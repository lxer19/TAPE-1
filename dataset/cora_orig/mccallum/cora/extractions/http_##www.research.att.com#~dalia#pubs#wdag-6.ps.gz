URL: http://www.research.att.com/~dalia/pubs/wdag-6.ps.gz
Refering-URL: http://www.research.att.com/~dalia/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Membership Algorithms for Multicast Communication Groups  
Author: Yair Amir, Danny Dolev Shlomo Kramer, Dalia Malki 
Address: Jerusalem, Israel  
Affiliation: The Hebrew University of  
Abstract: We introduce a membership protocol that maintains the set of currently connected machines in an asynchronous and dynamic environment. The protocol handles both failures and joining of machines. It operates within a multicast communication sub-system. It is well known that solving the membership problem in an asynchronous environment when faults may be present is impossible. In order to circumvent this difficulty, our approach rarely extracts from the membership live (but not active) machines unjustfully. The benefit is that our procotol always terminates within a finite time. In addition, if a machine is inadvertently taken out of the membership, it can rejoin it right away using the membership protocol. Despite the asynchrony, configuration changes are logically synchronized with all the regular messages in the system, and appear virtually synchronous to the application layer. The protocol presented here supports partitions and merges. When partitions and merging occur, the protocol provides the application with exact information about the status of the system. It is up to the application designer to merge the partitioned histories correctly.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. </author> <title> Total ordering of messages in broadcast domains. </title> <type> Technical Report CS92-9, </type> <institution> Dept. of Comp. Sci., the Hebrew University of Jerusalem, </institution> <year> 1992. </year>
Reference-contexts: This service delivers the message immediately from the DAG to the upper level. 2. Causal multicast: guarantees that delivery order preserves causality. 3. Agreed multicast: delivers messages in the same order at all sites. The ToTo algorithm implements the agreed multicast service in Transis (see <ref> [1] </ref>). 4. Safe multicast: delivers a message after all the active machines have ac knowledged its reception. <p> Note that this subset is the same at all the machines, due to the virtual synchrony property. A more complicated consensus decision that utilizes the dynamic membership is given in <ref> [1] </ref>. Fault tolerant mutual exclusion can be achieved. If the holder of a lock should fail, the remaining machines can retrieve it. A set of coordinated processes can provide reliable work-sharing. In this application, a certain set of tasks is distributed among replicated processes, each performing a certain portion.
Reference: 2. <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A communication subsystem for high availability. </title> <booktitle> In FTCS conference, </booktitle> <volume> number 22, </volume> <pages> pages 76-84, </pages> <month> July </month> <year> 1992. </year> <note> previous version available as TR CS91-13, </note> <institution> Dept. of Comp. Sci., the Hebrew University of Jerusalem. </institution>
Reference-contexts: Transis provides a variety of reliable multicast services. The services use different delivery criteria on the messages in the DAG. In some cases, the membership protocol interferes with the delivery of messages, as we shall see below. The paper <ref> [2] </ref> provides a detailed description of the Transis environment and services. Here is a short description of the Transis multicast services: 1. Basic multicast: guarantees delivery of the message at all the connected sites. This service delivers the message immediately from the DAG to the upper level. 2.
Reference: 3. <author> K. Birman, R. Cooper, and B. Gleeson. </author> <title> Programming with process groups: Group and multicast semantics. </title> <type> TR 91-1185, </type> <institution> dept. of Computer Science, Cornell University, </institution> <month> Jan </month> <year> 1991. </year>
Reference-contexts: The configuration change must take place amidst continuous communication operations. Furthermore, it must indicate to the user which messages are delivered before the reconfiguration and which after. This last property is termed by Bir-man et al. virtual synchrony, and its importance is discussed in <ref> [3, 4, 5] </ref>. We define the goal of the membership protocol as follows: P.1 Maintain the CCS in consensus among the set of machines that are con nected throughout the activation of the membership protocol.
Reference: 4. <author> K. Birman and T. Joseph. </author> <title> Exploiting virtual synchrony in distributed systems. </title> <booktitle> In Ann. Symp. Operating Systems Principles, </booktitle> <volume> number 11, </volume> <pages> pages 123-138. </pages> <publisher> ACM, </publisher> <month> Nov 87. </month>
Reference-contexts: The configuration change must take place amidst continuous communication operations. Furthermore, it must indicate to the user which messages are delivered before the reconfiguration and which after. This last property is termed by Bir-man et al. virtual synchrony, and its importance is discussed in <ref> [3, 4, 5] </ref>. We define the goal of the membership protocol as follows: P.1 Maintain the CCS in consensus among the set of machines that are con nected throughout the activation of the membership protocol.
Reference: 5. <author> K. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight causal and atomic group multicast. </title> <type> TR 91-1192, </type> <institution> dept. of comp. sci., Conrell University, </institution> <note> 91. revised version of `fast causal multicast'. </note>
Reference-contexts: Correct handling of partitions and merges. The protocol also handles failures that occur during the join. The most challenging property of our membership protocol is handling partitions and merges. To the best of our knowledge, all of the previous membership algorithms within similar environments <ref> [12, 13, 6, 5, 15, 9] </ref> handle the joining of single machines only. However, in reality, when the network includes bridging elements, partitions are likely to occur. In this case, there are two or more sets of machines that need to be joined together. <p> If a message arrives at a machine and some of its causal predecessors are missing, Transis transparently handles message recovery and re-ordering. Other environments like <ref> [5, 14] </ref> are equally suitable for providing the causality requirement. Below, we sometimes refer to the environment and messages as the Transis environment and Transis messages. The membership protocol operates above the Transis communication layer, such that message arrival order within the protocol preserves causality. <p> The configuration change must take place amidst continuous communication operations. Furthermore, it must indicate to the user which messages are delivered before the reconfiguration and which after. This last property is termed by Bir-man et al. virtual synchrony, and its importance is discussed in <ref> [3, 4, 5] </ref>. We define the goal of the membership protocol as follows: P.1 Maintain the CCS in consensus among the set of machines that are con nected throughout the activation of the membership protocol.
Reference: 6. <author> F. Cristian. </author> <title> Reaching agreement on processor group membership in synchronous distributed systems. </title> <type> Research Report RJ 5964, </type> <institution> IBM Almaden Research Center, </institution> <month> Mar. </month> <year> 1988. </year>
Reference-contexts: Knowing which machines are connected and active, and even having this knowledge consistent within the set of connected machines can be crucial. The problem of maintaining machine-set membership in the face of machine faults and joins is described in <ref> [6] </ref>. The protocol presented here is designed to implement the membership maintenance in Transis, a communication sub-system for high availability, currently developed at the Hebrew University of Jerusalem. A Transis broadcast domain comprises of a set of machines that can communicate via multicast messages. <p> Correct handling of partitions and merges. The protocol also handles failures that occur during the join. The most challenging property of our membership protocol is handling partitions and merges. To the best of our knowledge, all of the previous membership algorithms within similar environments <ref> [12, 13, 6, 5, 15, 9] </ref> handle the joining of single machines only. However, in reality, when the network includes bridging elements, partitions are likely to occur. In this case, there are two or more sets of machines that need to be joined together.
Reference: 7. <author> D. Dolev, C. Dwork, and L. Stockmeyer. </author> <title> On the minimal synchrony needed for distributed consensus. </title> <journal> J. ACM, </journal> <volume> 34(1) </volume> <pages> 77-97, </pages> <month> Jan. </month> <year> 1987. </year>
Reference: 8. <author> M. Fischer, N. Lynch, and M. Paterson. </author> <title> Impossibility of distributed consensus with one faulty process. </title> <journal> J. ACM, </journal> <volume> 32 </volume> <pages> 374-382, </pages> <month> April </month> <year> 1985. </year>
Reference: 9. <author> A. Griefer and R. Strong. Dcf: </author> <title> Distributed communication with fault tolerance. </title> <booktitle> In Ann. Symp. Principles of Distributed Computing, </booktitle> <volume> number 7, </volume> <pages> pages 18-27, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Correct handling of partitions and merges. The protocol also handles failures that occur during the join. The most challenging property of our membership protocol is handling partitions and merges. To the best of our knowledge, all of the previous membership algorithms within similar environments <ref> [12, 13, 6, 5, 15, 9] </ref> handle the joining of single machines only. However, in reality, when the network includes bridging elements, partitions are likely to occur. In this case, there are two or more sets of machines that need to be joined together.
Reference: 10. <author> L. Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Comm. ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July 78. </month>
Reference-contexts: Messages might be lost or delayed arbitrarily, but faults cannot alter messages' contents. Messages are uniquely identified through a pair &lt; sender, counter &gt; . Transis contains the communication layer reponsible for the reliable delivery of messages in the system ([2]). Transis guarantees the causal (see <ref> [10] </ref>) delivery order of messages, defined as the reflexive, transitive closure of: (1) m cause ! m 0 if receive q (m) ! send q (m 0 ) 2 (2) m cause ! m 0 if send q (m) ! send q (m 0 ) In Transis, each newly emitted message
Reference: 11. <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Broadcast protocols for distributed systems. </title> <journal> IEEE Trans. Parallel & Distributed Syst., </journal> <volume> (1), </volume> <month> Jan </month> <year> 1990. </year>
Reference: 12. <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Membership algorithms for asynchronous distributed systems. </title> <booktitle> In Intl. Conf. Distributed Computing Systems, </booktitle> <month> May 91. </month>
Reference-contexts: Correct handling of partitions and merges. The protocol also handles failures that occur during the join. The most challenging property of our membership protocol is handling partitions and merges. To the best of our knowledge, all of the previous membership algorithms within similar environments <ref> [12, 13, 6, 5, 15, 9] </ref> handle the joining of single machines only. However, in reality, when the network includes bridging elements, partitions are likely to occur. In this case, there are two or more sets of machines that need to be joined together. <p> The main shortcoming of algorithms like the membership algorithm based on Total is that with small probability, they might block indefinitely in face of faults ([11, 12]). The protocol presented here differs from <ref> [12] </ref> in achieving consensus based on causal messages. <p> indicate that messages m c;1 thru m c;3 precede the fault. 3 In order to provide unique message id's, message id's are pairs (incarnation, counter); Melliar Smith et al. discuss several conditions for providing this uniqueness requirement, among which is the ability to save incarnation numbers on nonvolatile storage, see <ref> [12] </ref>. The Expected message-id is therefore either within the current incarnation, or a later one. 4 The specific method for detecting communication-breaks is implementation dependent and irrelevant to the Faults protocol. For example, in the Transis environment, each machine expects to hear from other machines in the CCS set regularly.
Reference: 13. <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> A membership protocol based on partial order. </title> <booktitle> In proc. of the intl. working conf. on Dependable Computing for Critical Applications, </booktitle> <month> Feb </month> <year> 1991. </year>
Reference-contexts: Correct handling of partitions and merges. The protocol also handles failures that occur during the join. The most challenging property of our membership protocol is handling partitions and merges. To the best of our knowledge, all of the previous membership algorithms within similar environments <ref> [12, 13, 6, 5, 15, 9] </ref> handle the joining of single machines only. However, in reality, when the network includes bridging elements, partitions are likely to occur. In this case, there are two or more sets of machines that need to be joined together.
Reference: 14. <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlichting. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> August 89. </month>
Reference-contexts: If a message arrives at a machine and some of its causal predecessors are missing, Transis transparently handles message recovery and re-ordering. Other environments like <ref> [5, 14] </ref> are equally suitable for providing the causality requirement. Below, we sometimes refer to the environment and messages as the Transis environment and Transis messages. The membership protocol operates above the Transis communication layer, such that message arrival order within the protocol preserves causality.
Reference: 15. <author> A. M. Ricciardi and K. P. Birman. </author> <title> Using process groups to implement failure detection in asynchronous environments. </title> <type> TR 91-1188, </type> <institution> Dept. of Computer Science, Cornell University, </institution> <month> Feb </month> <year> 1991. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: Correct handling of partitions and merges. The protocol also handles failures that occur during the join. The most challenging property of our membership protocol is handling partitions and merges. To the best of our knowledge, all of the previous membership algorithms within similar environments <ref> [12, 13, 6, 5, 15, 9] </ref> handle the joining of single machines only. However, in reality, when the network includes bridging elements, partitions are likely to occur. In this case, there are two or more sets of machines that need to be joined together.
References-found: 15

