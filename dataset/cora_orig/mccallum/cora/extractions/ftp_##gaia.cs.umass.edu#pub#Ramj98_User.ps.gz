URL: ftp://gaia.cs.umass.edu/pub/Ramj98:User.ps.gz
Refering-URL: http://www-net.cs.umass.edu/papers/papers.html
Root-URL: 
Email: ramjee,tlp@bell-labs.com kurose,towsley@cs.umass.edu  
Title: User Agent Migration Policies in Multimedia Wireless Networks  
Author: Ramachandran Ramjee Tom La Porta, Jim Kurose and Don Towsley 
Address: Amherst  
Affiliation: Bell Labs, Lucent University of Massachusetts  
Abstract: Multimedia wireless networks often employ network based user agents as proxies for mobile users. In this paper, we consider a fundamental question in the design of these networks: should the user agents migrate and if so, what are good user agent migration policies? We first introduce a general framework for analysing user agent migration policies. We then highlight, through analysis and simulation, the numerous parameters and tradeoffs that dictate the design of migration policies. Finally, we identify two simple threshold-based policies that deliver very good performance over a wide range of system parameters and configurations. Keywords: Wireless Networks 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Adams, R. Gold, B. Schilit, M.Tso and R.Want, </author> <title> "An Infrared Network for Mobile Computers," </title> <booktitle> in Usenix Mobile and Location-Independent Computing Symposium, </booktitle> <year> 1993. </year>
Reference-contexts: When this intermediary server represents a particular mobile user, and performs actions on behalf of that mobile user, it is termed a "user agent". The need for such an agent inside the fixed network, acting on behalf of a mobile user, has been proposed by several researchers <ref> [1, 3, 7] </ref>. Although agents themselves have received considerable attention, the issue of user agent mobility has received less attention to date. In many applications, this issue has been resolved somewhat in an ad-hoc manner, based on the environment in which the application operates.
Reference: [2] <author> D. L. Eager, E.D. Lazowska, and J. Zahor-jan, </author> <title> "Adaptive Load Sharing in Homogeneous Distributed Systems," </title> <journal> in IEEE Transactions on Software Engineering," </journal> <volume> Vol 12, No. 5, </volume> <year> 1986. </year>
Reference-contexts: First, load balancing mechanisms in distributed systems were designed so that idle machines in a network of workstations could be profitably and transparently used <ref> [2] </ref>. Thus, the choice of a processor on which to execute a process was primarily based on the load conditions in the processors. <p> In more general terms, these policies can be classified as threshold type policies. In addition to their simplicity, we chose to examine threshold policies since other threshold-based policies have been shown to perform well in the context of load balancing in distributed systems <ref> [2] </ref>. The two additional policies we will consider are: * Count policy: In this policy, user agents migrate to the destination cell along with the mobile user only if the number of user agents at the destination processor is less than T .
Reference: [3] <author> My T. Le, F. Brughardt, S. Seshan and Jan Rabaey, "InfoNet: </author> <booktitle> The networking infrastructure of Infopad," Proceedings of Compcon, Calif., </booktitle> <month> Mar. </month> <year> 1995 </year>
Reference-contexts: When this intermediary server represents a particular mobile user, and performs actions on behalf of that mobile user, it is termed a "user agent". The need for such an agent inside the fixed network, acting on behalf of a mobile user, has been proposed by several researchers <ref> [1, 3, 7] </ref>. Although agents themselves have received considerable attention, the issue of user agent mobility has received less attention to date. In many applications, this issue has been resolved somewhat in an ad-hoc manner, based on the environment in which the application operates. <p> Although agents themselves have received considerable attention, the issue of user agent mobility has received less attention to date. In many applications, this issue has been resolved somewhat in an ad-hoc manner, based on the environment in which the application operates. For example, user agents in <ref> [3] </ref> are placed at a fixed well known location (such as the mobile user's home workstation) since the application operates in a campus area environment. Similarly, there is the concept of a home agent in the Mobile IP proposal [6].
Reference: [4] <author> M.Litzkow and M.Solomon, </author> <title> "Supporting check-pointing and process migration outside the Unix Kernel," </title> <booktitle> in Usenix Winter Conference, </booktitle> <address> San Francisco, California, </address> <year> 1992. </year>
Reference-contexts: Another important difference between the two problems is the impact of migration overhead. Since traditional process migration techniques <ref> [4] </ref> which imple ment load balancing in distributed systems are gen-eral purpose mechanisms, they result in considerable overhead in migration. In our case, we are migrating a specific process, the user agent.
Reference: [5] <author> M.F. Neuts, </author> <title> "Matrix Geometric Solution in Stochastic Models: An Algorithmic Approach," </title> <publisher> Dover Publications, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: We study the system analytically based on the matrix-geometric methods developed by Marcel Neuts <ref> [5] </ref>. This system can be interpreted as an M/M/1 queue in a random environment. The random environment arises here as a result of user's mobility. <p> The mean number of jobs in the system, J, is then given by <ref> [5] </ref>: J = !(I S)S (I S) 2 e (3) where S is a L+1 by L+1 matrix which is the solution of the following matrix quadratic equation: S 2 () + S [Q ( + )] + () = 0: (4) Equation (4) can be rewritten as S = [S <p> It can be shown that <ref> [5] </ref> the sequence of matrices S (i) obtained through successive iteration is nondecreasing and S (i) ! S. Once we obtain the mean number of requests in the system, J , through equation (3), the average response time, R, can be calculated using Little's law.
Reference: [6] <author> C.E.Perkins and Pravin Bhagwat, </author> <title> "A Mobile Networking System based on Internet Protocol," </title> <journal> IEEE Personal Communications, </journal> <volume> Vol 1., No. </volume> <pages> 1. </pages>
Reference-contexts: For example, user agents in [3] are placed at a fixed well known location (such as the mobile user's home workstation) since the application operates in a campus area environment. Similarly, there is the concept of a home agent in the Mobile IP proposal <ref> [6] </ref>. On the other hand, user agents in [7] are migrated along with the mobile user since the application operates over a wide-area environment. fl This work was done while the author was a doctoral student at the University of Massachusetts, Amherst.
Reference: [7] <author> R. Ramjee, T. La Porta, M. Veeraraghavan, </author> <title> "The use of Network-based Migrating User Agents for Personal Communication Services," </title> <journal> in IEEE Personal Communications Magazine, </journal> <volume> Vol. 2, No. 6, </volume> <month> Dec </month> <year> 1995. </year>
Reference-contexts: When this intermediary server represents a particular mobile user, and performs actions on behalf of that mobile user, it is termed a "user agent". The need for such an agent inside the fixed network, acting on behalf of a mobile user, has been proposed by several researchers <ref> [1, 3, 7] </ref>. Although agents themselves have received considerable attention, the issue of user agent mobility has received less attention to date. In many applications, this issue has been resolved somewhat in an ad-hoc manner, based on the environment in which the application operates. <p> Similarly, there is the concept of a home agent in the Mobile IP proposal [6]. On the other hand, user agents in <ref> [7] </ref> are migrated along with the mobile user since the application operates over a wide-area environment. fl This work was done while the author was a doctoral student at the University of Massachusetts, Amherst. <p> In our case, we are migrating a specific process, the user agent. We can thus assume that the executable code is present at the destination and accomplish the migration by transferring only a small amount of dynamic state information of the user agent. For example, in <ref> [7] </ref>, user agent migrations transfer only about 100 bytes of information and require only 100 to 150 milliseconds of processing and transmission time to perform migration. This paper makes three important contributions. First, we introduce a general framework for examining user agent migration policies.
Reference: [8] <author> R. Ramjee, </author> <title> "Supporting Connection Mobility in Wireless Networks," </title> <type> Ph.D. Dissertation, </type> <institution> University of Massachusetts, </institution> <year> 1997. </year>
Reference-contexts: On the other hand, under the Distance policy, while the maximum distance separating mobile users from their agents is controlled, 1 A discussion of three other variations of these two migration policies that we considered can be found in <ref> [8] </ref>. there may be occasional severe processing overloads. These two policies, while operating in the middle of the spectrum of migration policies, control the average response time and average distance metrics respectively. <p> As the mobile user moves, the user agent may be migrated along with the mobile user depending on the migration policy used. For now, we assume that there is negligible processing overhead due to user agent migration. In <ref> [8] </ref>, we study the behavior of the system in the presence of migration overheads. In a homogeneous network, under the aforementioned assumptions, the performance measures derived from modeling a single cell will also represent the performance of the overall network. <p> We refer the reader to <ref> [8] </ref> for the details of the simulator. Time vs Load through Simulation and Analysis. All quantities in this and other graphs are normalized to units of 1=. The average load to a base-station processor, termed the system load, is given by N fl c =. <p> Let P Count r denote the probability that a user returns to the cell containing its user agent given that the user performs a handoff. Then, the flow rate of user agents into a cell with m user agents is shown in <ref> [8] </ref> to be I Count m;; = N fl r m fl P Count r fl r ; 0 m &lt; T Let P T denote the probability that the cell has T agents. <p> The flow rate of user agents out of a cell with m user agents is shown in <ref> [8] </ref> to be O Count m;; = m fl r fl (1 P A ); 1 m &lt; T 0 otherwise where P A = P Count r + (C 1) fl P T =C. By analyzing the state transitions, it can be shown that [8] P T satisfies a non-linear <p> user agents is shown in <ref> [8] </ref> to be O Count m;; = m fl r fl (1 P A ); 1 m &lt; T 0 otherwise where P A = P Count r + (C 1) fl P T =C. By analyzing the state transitions, it can be shown that [8] P T satisfies a non-linear equation which can be solved using the method of bisection. Once P T is computed, we can determine the different state transition rates and derive the infinitesimal generator Q for the system. <p> Then D Count = 1 d=0 d fl P d The average distance D Count is shown in <ref> [8] </ref> to be D Count = 1 d=1 d fl 1 (1P T )P i fl i :(7) where Z (w (i); d) is 1 if the mobile user is at a distance d from the agent after the ith handoff of sequence w (i) consisting of an unconstrained handoff and <p> Let P Dist r denote the probability that a user returns to the cell containing its user agent given that the user performs a handoff. Then, the flow rate of user agents into a cell with m user agents is shown in <ref> [8] </ref> to be I Dist m;; = r (N m fl P Dist r ); 0 m &lt; N r (N m fl P Dist r )X; N m &lt; L where X denotes the probability of migration when a processor is not underloaded. <p> The flow rate of user agents out of a cell with m user agents is shown in <ref> [8] </ref> to be O Dist m;; = m r (1 P Dist r P B ); 1 m &lt; N m r (1 P Dist r X P B ); N m L 0 otherwise: where P N + denotes the probability that the cell has N or more agents, P <p> We assume a 21x21 network with fl = 8 neighbors for each cell. As the parameters N , r and c = are varied, it is shown in <ref> [8] </ref> that the shape of the graph remains similar. The points in the graph are obtained by varying the threshold value for the Count and Distance policies. <p> Please refer to <ref> [8] </ref> for a detailed discussion and analysis. So far, we have restricted ourselves to examining migration policies in homogeneous networks. While portions of a wide-area wireless networks may be homogeneous, there can be regions that display heterogeneous characteristics. For example, isolated "hot spots" can occur in cities, stadiums etc.
Reference: [9] <author> Y.-B. Lin and V.W. Mak, </author> <title> "Eliminating the Boundary Effect of a Large-Scale Personal Communication Service Network Simulation," </title> <booktitle> in ACM Transactions on Modeling and Computer Simulation, </booktitle> <volume> Vol. 4, No. 2, </volume> <month> April </month> <year> 1994. </year>
Reference-contexts: The mobile user stays in a cell for a period of time which is exponentially distributed with mean 1= r . The mobile user then moves to one of the neighboring cells with equal probability. These are fairly common assumptions for modeling user mobility in wide-area wireless environments <ref> [9] </ref>. Each user is represented by a network-based user agent as detailed in Section 2. We assume that requests arrive at the user agent in a Poisson manner with rate c . We further assume that request processing times are exponentially distributed with mean 1=.
References-found: 9

