URL: ftp://cse.ogi.edu/pub/pacsoft/papers/pnsqc95.ps
Refering-URL: http://www.cse.ogi.edu/PacSoft/projects/SDRR/p_overview.html
Root-URL: http://www.cse.ogi.edu
Email: [bell,mckinney]@cse.ogi.edu  
Title: Developing a Low-Defect Software Product in a Research Organization  
Author: Jeffrey M. Bell and Laura McKinney 
Date: May 19, 1995  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Jeffrey Bell et al. </author> <title> Software design for reliability and reuse: A proof-of-concept demonstration. </title> <booktitle> In TRI-Ada '94 Proceedings, </booktitle> <pages> pages 396-404. </pages> <publisher> ACM, </publisher> <month> November </month> <year> 1994. </year>
Reference: [2] <institution> Pacific Software Research Center. </institution> <note> SDRR project Phase I final scientific and technical report, </note> <month> February </month> <year> 1995. </year>
Reference: [3] <author> Richard B. Kieburtz. </author> <title> Results of the SDRR validation experiment, </title> <month> February </month> <year> 1995. </year> <note> In [2]. </note>
Reference-contexts: The experiment was successful and supported the hypotheses that the use of generator technology yields gains in reliability, productivity, predictability, flexibility, and usability. In particular, the experiment subjects realized a 2.9 times improvement in productivity and 2.3 times improvement in reliability over the templates method using the MTV generator <ref> [3] </ref>.
Reference: [4] <author> Richard B. Kieburtz, Fran~coise Bellegarde, Jef Bell, James Hook, Jeffrey Lewis, Dina Oliva, Tim Sheard, Lisa Walton, and Tong Zhou. </author> <title> Calculating software generators from solution specifications. </title> <type> Technical Report OGI-CSE-94-032B, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <month> October </month> <year> 1994. </year>
Reference: [5] <author> Alexei Kotov. </author> <title> Application of a new software metric in a research environment. </title> <type> Technical report, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <year> 1994. </year>
Reference-contexts: This historical information will continue to be used in further projects to predict available effort. 5.2 Capabilities To measure progress in functionality development, developers reported functionality as a set of "capabilities", which have been likened to unweighted function points <ref> [5] </ref>. Capabilities are units of functionality from a user's perspective. Identifying capabilities was a rough assessment 7 of functionality and available early in the project life cycle.
Reference: [6] <author> Jeffrey R. Lewis. </author> <title> A specification for an MTV generator. </title> <type> Technical Report 94-003, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <year> 1994. </year>
Reference-contexts: In this project we defined the SDRR method, developed the reusable engine, and built one generator to test the method. This generator produces code for the Message Translation and Validation (MTV) problem domain <ref> [6] </ref>. The MTV generator translates specifications of message formats written in a high-level declarative specification language into executable Ada packages suitable for integration with military C 3 I systems.
Reference: [7] <author> H. D. Mills, M. Dyer, and R. C. </author> <title> Linger. </title> <journal> Cleanroom software engineering. IEEE Software, </journal> <pages> pages 19-25, </pages> <month> September </month> <year> 1987. </year>
Reference-contexts: In the SDRR project we used inspections as the primary means for defect prevention in the implementation of the MTV domain-specific specification language. We are encouraged by the initial results, and plan to use more inspection and formal reasoning methods (e.g. Cleanroom <ref> [7] </ref> methods) in future development efforts. We used statically-typed functional languages such as Standard ML as our development platform. Unlike dynamically-typed functional languages such as Lisp or Scheme, statically-typed languages can give the programmer a wealth of useful information at an early stage.
Reference: [8] <author> Charles Plinta, Kenneth Lee, and Michael Rissman. </author> <title> A model solution for C 3 I message translation and validation. </title> <type> Technical Report CMU/SEI-89-TR-12 ESD-89-TR-20, </type> <institution> Software Engineering Institute, Carnegie Mellon University, </institution> <month> December </month> <year> 1989. </year>
Reference-contexts: The final activity of the project was a software engineering experiment comparing the use of the MTV generator with an existing state-of-the-art software development method based on software templates <ref> [8] </ref>. These templates, developed by the Software Engineering Institute, are skeletal Ada packages containing placeholders that can be "filled in" to produce working MTV code. This experiment was conducted in October-December 1994 by independent subjects who performed development and maintenance tasks specified by the Air Force using both development methods.
Reference: [9] <author> Tim Sheard. </author> <title> Guide to using CRML. </title> <year> 1993. </year>
Reference-contexts: Thus, functional languages are well suited to the implementation of program transformations. Prior to beginning the SDRR project, PacSoft personnel had experience implementing program transformations with functional languages. In fact, a functional language based on Standard ML called Compile-time Reflective ML (CRML) <ref> [9] </ref> was developed by PacSoft in part to support program transformations. This pre-existing infrastructure was further reason to use functional languages. 4.2 Advantages of functional languages There are other advantages to the use of functional languages. Because functional programs are declarative and very high-level, programmers can express computations concisely.
References-found: 9

