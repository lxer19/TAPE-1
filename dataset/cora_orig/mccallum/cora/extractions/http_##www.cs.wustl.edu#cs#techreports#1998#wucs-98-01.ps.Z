URL: http://www.cs.wustl.edu/cs/techreports/1998/wucs-98-01.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: 
Title: Search and Tracking Algorithms for Rapidly Moving Mobiles  
Author: Amy L. Murphy Gruia-Catalin Roman George Varghese 
Address: Campus Box 1045 One Brookings Drive Saint Louis, MO 63130-4899  
Affiliation: Department of Computer Science Washington University  
Date: June 1, 1998  2  
Pubnum: WUCS-98-1  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Acharya and B.R. Badrinath. </author> <title> A framework for delivering multicast messages in networks with mobile hosts. </title> <journal> Journal of Special Topics in Mobile Networks and Applications (MONET), </journal> <volume> 1(2) </volume> <pages> 199-219, </pages> <month> October 18 </month> <year> 1996. </year>
Reference-contexts: Note that each node keeps a copy of the announcement for only a small local propagation delay (i.e., the time to send and receive a message to all neighbors). This is more efficient than another proposal <ref> [1] </ref> which broadcasts the announcement to all nodes. Each node then stores the announcement until it either delivers the announcement or receives notice that another node has delivered it. <p> This allows mobiles to join and leave the multicast group at will, as in the IP multicast model. Prior work in Mobile IP requires re-registration on each mobile movement, while the results in <ref> [1] </ref> require the set of recipients to be known. Intuitively, multicast follows because the snapshot will record every mobile in the set exactly once. A mobile contains a list of multicast addresses that it subscribes to, and an announcement carries a multicast address it is sent to. <p> However, our work is fundamentally different because we use the distributed algorithms as a tool to achieve a different result (namely tracking and search) than that of the original distributed algorithm. <ref> [1] </ref> describes a centralized, reliable multicast protocol for mobile networks. This approach requires the sender to specify all mobiles in the recipient list, and for all nodes in the system to hold a copy of the announcement until delivery is complete.
Reference: [2] <author> M. Ahuja. </author> <title> Flush primitives for asynchronous distributed systems. </title> <journal> Information Processing Letters, </journal> <volume> 34(1) </volume> <pages> 5-12, </pages> <month> 22 February </month> <year> 1990. </year>
Reference-contexts: However, because many distributed algorithms use FIFO channels and our objective is to apply these algorithms to the mobile environment, the lack of FIFO channels in the mobile environment makes this difficult. Although flush primitives <ref> [2] </ref> can be used to make traditional non-FIFO channels FIFO, the separate channels used for mobiles and messages makes Ahuja's flush primitives inapplicable to mobility. To further understand this problem, we must explore a more detailed model of reality, and see exactly how the FIFO assumption can be broken.
Reference: [3] <author> B.R. Badrinath, A. Acharya, and T. Imielinski. </author> <title> Impact of mobility on distributed computations. </title> <journal> ACM Operating Systems Review, </journal> <volume> 27(2) </volume> <pages> 15-20, </pages> <year> 1993. </year>
Reference-contexts: Now both units have a fixed route for all communication and we do not require all nodes to be involved in every message delivery. If at any point this route fails, another can be established by running the snapshot for route discovery again. 5 Previous Work <ref> [3] </ref> describes issues (e.g., disconnection, low bandwidth, and low computational power) and techniques that arise in converting distributed algorithms to the mobility domain while retaining their original properties (e.g., running a distributed snapshot to get the state of a group of mobile units).
Reference: [4] <author> K.M. Chandy and L. Lamport. </author> <title> Distributed snapshots: Determining global states of distributed systems. </title> <journal> ACM Transactions on Computing Systems, </journal> <volume> 3(1) </volume> <pages> 63-75, </pages> <year> 1985. </year>
Reference-contexts: The algorithm starts with the main idea of the termination detection algorithm proposed by Dijkstra and Scholten [5], and adds considerable modifications. It is described in Section 3. Our second result adapts the snapshot algorithm by Chandy and Lamport <ref> [4] </ref> to search for a mobile unit. This is described in Section 4 together with an extension to multicasting to a set of mobiles. <p> For this paper, we use the Chandy-Lamport <ref> [4] </ref> algorithm; however, many other snapshot algorithms (including non-FIFO algorithms) can be used as well. When running this snapshot in a system with a uniquely identified mobile unit, there is never more than one copy of this mobile in the system at a given time.
Reference: [5] <author> E.W. Dijkstra and C. Scholten. </author> <title> Termination detection for diffusing computations. </title> <journal> Information Processing Letters, </journal> <volume> 11(1), </volume> <year> 1980. </year>
Reference-contexts: Using this mechanism, our first algorithm tracks the current location of the mobile, and uses the tracking trail for efficient delivery. The algorithm starts with the main idea of the termination detection algorithm proposed by Dijkstra and Scholten <ref> [5] </ref>, and adds considerable modifications. It is described in Section 3. Our second result adapts the snapshot algorithm by Chandy and Lamport [4] to search for a mobile unit. This is described in Section 4 together with an extension to multicasting to a set of mobiles. <p> Therefore, we would like to limit the number of MSCs involved in the delivery to those in that small region. To accomplish this, we turn to a tracking solution inspired by the termination detection algorithm for diffusing computations proposed by Dijkstra and Scholten <ref> [5] </ref>. messages are passed. A parent node keeps a count of the number of children it has, and the child keeps a pointer back to the parent. When a child goes idle, and it has no more children, it reports this to the parent and removes itself from the tree.
Reference: [6] <author> S. Kryukova, B. Massingill, and B. Sanders. </author> <title> Specification and proof of an algorithm for location management for mobile communication devices. </title> <booktitle> In Proceedings of the International Workshop on Formal Methods for Parallel Programming: Theory and Applications, </booktitle> <address> IIPS '97, Geneva, </address> <month> April </month> <year> 1997. </year>
Reference-contexts: This makes such a scheme hard to implement. However, in our snapshot delivery multicast, recipient lists are not necessary. Further, our algorithm is more efficient because it stores an announcement for at most a link round trip delay, and all decisions are taken locally. <ref> [6] </ref> provides a UNITY-style specification for a tracking algorithm that eventually converges to the shortest path from home to mobile. The convergence can be slow, and no guarantees are made that delivery will occur in a system with rapidly moving mobiles.
Reference: [7] <author> T. Maufer and C. Semeria. </author> <title> Introduction to IP multicast routing. </title> <type> Internet Draft, </type> <month> July </month> <year> 1997. </year> <month> ftp://ds.internic.net/internet-drafts/draft-ietf-mboned-intro-multicast-03.txt. </month>
Reference-contexts: Although this model makes guarantees even in the presence of disconnection, in most Internet multicast protocols, such as DVMRP and PIM <ref> [7] </ref>, the participant list is not known by the senders. This makes such a scheme hard to implement. However, in our snapshot delivery multicast, recipient lists are not necessary.
Reference: [8] <author> J. Moy. </author> <note> OSPF Version 2. </note> <institution> Internet Engineering Task Force, </institution> <year> 1994. </year>
Reference-contexts: Although the probability of error is low, packets are indeed dropped. A possible solution is to add acks for announcement messages (as is done, for example, in the intelligent flooding algorithm used by Link State Routing in OSI [12] and OSPF <ref> [8] </ref>). Another solution is only to provide best-effort service. Since lost announcements can lead to deadlock we need to delete an announcement after a timeout even if it is still expected along a channel. Fourth, we assumed that all MSCs in the network are involved in each delivery.
Reference: [9] <author> A.L. Murphy, G.-C. Roman, and G. Varghese. </author> <title> An exercise in formal reasoning about mobile communications. </title> <booktitle> In Proceedings of the Ninth International Workshop on Software Specification and Design, </booktitle> <pages> pages 25-33, </pages> <address> Ise-Shima, Japan, </address> <month> April </month> <year> 1998. </year> <journal> IEEE Computer Socitey Technical Council on Software Engineering, IEEE Computer Society. </journal>
Reference-contexts: Intuitively, the point at which a snapshot records the mobile must involve some contact between the snapshot control message and the mobile. By modifying the snapshot marker messages to piggyback the announcement, we obtain exactly once delivery. In <ref> [9] </ref>, this search algorithm is presented and its properties reasoned about directly from the program text. In this paper, however, we directly explore the relationship between the Chandy-Lamport algorithm and the resulting message delivery algorithm. <p> Each of our algorithms is directly applicable to the mobile code environment 17 with proper network support. A UNITY-style algorithm and proof of the second message delivery algorithm has been presented in <ref> [9] </ref>. This is a proof that does not exploit the relation to snapshots at all, and argues directly about message delivery properties. The I/O automata proof using reductions presented in this paper is new, and provides a clearer and simpler intuition of the problem approach.
Reference: [10] <author> C. Perkins. </author> <title> IP mobility support. RFC 2002, </title> <institution> IETF Network Working Group, </institution> <year> 1996. </year>
Reference-contexts: One model of mobility currently being implemented fits on top of the fixed network, effectively providing specific points of connection for the mobiles. In Mobile IP <ref> [10] </ref>, every mobile is associated with a fixed home agent. This agent provides a forwarding service for the mobile. When the mobile moves to a new location, it 1 contacts its home agent with new contact information. <p> The convergence can be slow, and no guarantees are made that delivery will occur in a system with rapidly moving mobiles. Similarly, Mobile IP <ref> [10] </ref> is a practical protocol being developed and tested. It has extensions to work in a cellular-like setting. However, in the case of rapid movement, the registration mechanism will not be able to complete and announcements will be dropped.
Reference: [11] <author> Y. Rekhter and T. LiC. Perkins. </author> <title> A Border Gateway Protocol 4 (BGP-4). </title> <type> RFC 1771, </type> <institution> IETF Network Working Group, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: But, what happens to the delete message heading for D from C? Because C is no longer D's parent, the delete is simply dropped and the backbone is not affected. Keeping the backbone list is similar to routing protocols passing complete paths to destination in BGP <ref> [11] </ref> to avoid loops. It has been argued that keeping such information in the packet greatly increases its size. However, in our case, the information is being kept by the mobile unit and we assume there is sufficient storage on such a device for this additional information.
Reference: [12] <author> M. Steenstrup. </author> <title> Routing in Communication Networks, chapter 5. </title> <publisher> Prentice-Hall, </publisher> <year> 1995. </year>
Reference-contexts: Most applications in the Internet today rely on sending messages to particular locations. For example, e-mail assumes that the sender knows a particular address for the recipient. In a fixed network, routing protocols such as link state routing <ref> [12] </ref> work over a fixed topology collecting information about the direction of each host. When a message arrives, the router performs a table lookup to decide which port, or direction, to send the message. <p> Although the probability of error is low, packets are indeed dropped. A possible solution is to add acks for announcement messages (as is done, for example, in the intelligent flooding algorithm used by Link State Routing in OSI <ref> [12] </ref> and OSPF [8]). Another solution is only to provide best-effort service. Since lost announcements can lead to deadlock we need to delete an announcement after a timeout even if it is still expected along a channel.
Reference: [13] <author> M. Steenstrup. </author> <title> Routing in Communication Networks, chapter 10. </title> <publisher> Prentice-Hall, </publisher> <year> 1995. </year> <month> 19 </month>
Reference-contexts: Because the outer address is now the foreign location of the mobile, the fixed network successfully routes the message to the mobile, where it is decapsulated and processed. In cellular telephones, a system similar to Mobile IP is employed when users roam outside their home region <ref> [13] </ref>. When the telephone is activated, the user registers with the home, indicating essentially a new area code to redirect calls to. The registration process occurs infrequently because the most common case is for the user to move within a single region. <p> We then propose a simple fix and show why the resulting channel is indeed FIFO. One of the American standards for analog cellular communication is AMPS <ref> [13] </ref>. In AMPS, cellular telephones tune to only one frequency at a time.
References-found: 13

