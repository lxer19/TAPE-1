URL: http://www.cc.gatech.edu/projects/canes/compserv/cs-draft.ps
Refering-URL: http://www.cs.gatech.edu/projects/canes/reports/qr4.html
Root-URL: 
Title: Composable Services for Active Networks AN Composable Services Working Group  
Date: May 1998  
Abstract: A composition method provides a means to specify a composite service constructed from components. This document focuses on composition of services to be executed at a single node and within a single execution environment. The purpose is to identify features common to all composition methods, present examples of composition methods, and outline larger issues that may be amenable to common solutions.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> AN Architecture Working Group. </author> <title> Architectural framework for active networks. </title> <editor> Ken Calvert, editor, </editor> <year> 1998. </year>
Reference-contexts: The reader is assumed to be familiar with active networking in general [5] and the architectural framework being developed by the architecture working group <ref> [1] </ref>. This document includes: * Terminology to discuss composition (Section 2). * A list of reference examples of composite behavior (Section 3). A developer of a composition method might use this as a checklist to determine whether the method satisfies some of the range of desired composition capabilities.
Reference: [2] <author> M. Hicks, P. Kakkar, T. Moore, C. Gunter, and S.Nettles. </author> <title> PLAN: A Programming Language for Active Networks. </title> <booktitle> Submitted to International Conference on Functional Programming, </booktitle> <year> 1998. </year>
Reference-contexts: For example, the packet might carry a program written in a scripting language that includes calls to node-resident service routines <ref> [2] </ref>. 6 Examples of Composition Methods This section contains examples of composition methods under development within the DARPA active networking program. The emphasis is on the way that each method addresses the features outlined in Section 5.
Reference: [3] <author> T. Pratt and M. Zelkowitz. </author> <title> Programming Languages: Design and Implementation. </title> <publisher> Prentice Hall, </publisher> <address> third edition, </address> <year> 1996. </year>
Reference-contexts: These developers will be influenced by both basic language features and attributes that are particular to networking. Basic language features of importance include clarity and simplicity, support for abstraction, naturalness for the application and ease of debugging and verification <ref> [3] </ref>. Attributes that are of particular interest for developing network services include: * Performance Critical to the success of active networking is the ability to offer services that have good performance. The composition method plays an important role in the performance of composed services.
Reference: [4] <author> B. Schwartz, W. Zhou, Z. Jackson, W. Strayer, D. Rockwell, and C. Partridge. </author> <title> Smart packets for active networks. </title> <address> http://www.net-tech.bbn.com/smtpkts/smtpkts.ps.gz, Jan 1998. </address>
Reference-contexts: A composite service should offer good performance to the individual user and place a reasonable burden on the shared resources of the network. This requirement might favor, for example, a composition method that offers a concise packet format for specifying or requesting a composite service <ref> [4] </ref>. * Ease of security Some control over access to composite services will be necessary for security purposes. For example, a particular user may need to be authorized to access a particular composite service.
Reference: [5] <author> D. Tennenhouse, J. Smith, W. Sincoskie, D. Wetherall, and G. Minden. </author> <title> A survey of active network research. </title> <journal> IEEE Communications Magazine, </journal> <volume> 35(1), </volume> <year> 1997. </year>
Reference-contexts: The reader is assumed to be familiar with active networking in general <ref> [5] </ref> and the architectural framework being developed by the architecture working group [1]. This document includes: * Terminology to discuss composition (Section 2). * A list of reference examples of composite behavior (Section 3).
Reference: [6] <author> D. Wetherall, J. Guttag, and D. L. Tennenhouse. </author> <title> ANTS: A toolkit for building and dynamically deploying network protocols. </title> <booktitle> In IEEE OPENARCH'98, </booktitle> <address> San Francisco, CA, </address> <month> April </month> <year> 1998. </year> <month> 8 </month>
Reference-contexts: This raises the issue of how the node-resident content is deployed. Possibilities include off-line loading by the node provider as part of node management and on-demand loading. A variety of techniques are possible for on-demand loading, for example code pulling <ref> [6] </ref>. 6 * Resource discovery Creating or using a composite service requires knowledge of available components or composite services. This raises a number of issues in the area of resource discovery.
References-found: 6

