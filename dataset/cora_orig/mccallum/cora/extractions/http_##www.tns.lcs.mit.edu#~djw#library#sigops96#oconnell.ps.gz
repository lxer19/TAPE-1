URL: http://www.tns.lcs.mit.edu/~djw/library/sigops96/oconnell.ps.gz
Refering-URL: http://www.tns.lcs.mit.edu/~djw/library/sigops96/index.html
Root-URL: 
Title: Techniques for Handling Scale and Distribution in Virtual Worlds  
Author: Karl O'Connell, Tom Dinneen, Steven Collins, Brendan Tangney, Neville Harris and Vinny Cahill 
Address: College Dublin Ireland  
Affiliation: Distributed Systems Group and Image Synthesis Group Department of Computer Science Trinity  
Abstract: Lack of bandwidth and network latency are known to be major impediments to achieving realism in distributed virtual world (vw) applications with a large number of, potentially geographically dispersed, entities. This paper describes a combination of techniques that we are using to overcome these twin problems. The techniques described are intended to reduce both the volume and frequency of communication between the entities that make up the virtual world and include the use of anonymous event-based communication with notify constraints, scoping of event propagation with zones, and use of predictive approaches to replica management. Each of these techniques is described in turn.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Steve Benford, John Bowers, Lennart Fahlen, Chris Greenhalg, John Mariani, and Tom Rodden. </author> <title> Networked Virtual realitty and Cooperative Work. </title> <journal> Presence, </journal> <volume> 4(4) </volume> <pages> 364-386, </pages> <year> 1995. </year>
Reference-contexts: A process may enter and leave groups dynamically, but at a given time will be a member of only one process group. A disadvantage with this approach however, is that it is difficult to scale because of the communication costs while maintaining reliability and consistent data. MASSIVE <ref> [1, 4] </ref> (Model, Architecture, and System for Spatial Interaction in Virtual Environments) supports multiple vws where each world may be inhabited by many concurrent users who can interact over ad hoc combinations of graphics, audio and text interfaces.
Reference: [2] <author> Carlson C. and Hagsand O. DIVE: </author> <title> A Platform For Multi-User Virtual Environments. </title> <journal> Computer And Graphics, </journal> <volume> 17(6) </volume> <pages> 663-669, </pages> <year> 1993. </year>
Reference-contexts: Partitioning vws into virtual computer spaces within which people and vw entities interact, either with each other or with the various tools they find there, is a common technique employed by many cscw systems (e.g Jupiter [3, 7]) and virtual environments (e.g. DIVE <ref> [2] </ref> and NPSNET IV [6]). Zones are a mechanism that facilitates the application developer in implementing whatever form of these spaces is required through extra features supported by the eco language. <p> An IP Multicast address may then be assigned to the AOI. NPSNET IV, however, is based on the use of the DIS network protocol which is targeted primarily at the development of large scale military applications. The DIVE <ref> [2] </ref> (Distributed Interactive Virtual Environment) system is a toolkit for building distributed interactive virtual reality applications in a heterogeneous network environment. DIVE allows a number of users and applications to share a virtual environment, where they can interact and communicate in real time.
Reference: [3] <author> Pavel Curtis, Michael Dixon, Ron Frederick, and David A Nichols. </author> <title> The Jupiter Audio/Video Architecture: Secure Multimedia in Network Places. </title> <booktitle> In ACM Multimedia Conference, </booktitle> <year> 1995. </year>
Reference-contexts: Partitioning vws into virtual computer spaces within which people and vw entities interact, either with each other or with the various tools they find there, is a common technique employed by many cscw systems (e.g Jupiter <ref> [3, 7] </ref>) and virtual environments (e.g. DIVE [2] and NPSNET IV [6]). Zones are a mechanism that facilitates the application developer in implementing whatever form of these spaces is required through extra features supported by the eco language.
Reference: [4] <author> Chris Greenhalgh and Steve Benford. </author> <title> MASSIVE: a Distributed Virtual Reality System Incorporating Spatial Trading. </title> <booktitle> In 15th International Conference on Distributed Computing Systems (DCS'95), </booktitle> <address> Vancouver, Canada, May 30-June 2 1995. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: A process may enter and leave groups dynamically, but at a given time will be a member of only one process group. A disadvantage with this approach however, is that it is difficult to scale because of the communication costs while maintaining reliability and consistent data. MASSIVE <ref> [1, 4] </ref> (Model, Architecture, and System for Spatial Interaction in Virtual Environments) supports multiple vws where each world may be inhabited by many concurrent users who can interact over ad hoc combinations of graphics, audio and text interfaces.
Reference: [5] <author> Locke J. </author> <title> An Intrduction to the Internet Networking Environment and SIMNET/DIS. </title> <type> Technical report, </type> <institution> Computer Science Department, Naval Postgraduate School, </institution> <month> August </month> <year> 1993. </year>
Reference-contexts: A binding can be established only if the signatures of the event and of the method match (if they have the same number of parameters, and the types of the corresponding parameters are the same). eco events are a richer abstraction than those of SimNet <ref> [5] </ref> and such systems. They are a language level concept and the eco model supports constraints which are named conditions that control the propagation and handling of events. Figure 1 shows the basic event API. The motivation for constraints is threefold. <p> An extra convergence step is introduced that smoothly converges with the tracked position at the Convergence Point. This step provides a seamless view of remote objects. This convergence path can then be extrapolated at the local frame rate. 6 Related Work Like void, SimNet and DIS <ref> [5] </ref> also use predictive methods and dead reckoning to reduce communication between entities within the vw. However both of these systems have problems when scaled due to their homogeneous world databases, where all object state changes must be communicated among all users of the environment.
Reference: [6] <author> Macedonia, Michael R., Zyda, Michael J., Pratt, David R., Brutzman, Donald P. and Barham, Paul T. </author> <title> Exploiting Reality with Multicast Groups: A Network Architecture for Large Scale Virtual Environments. </title> <booktitle> In the Proceedings of the 1995 IEEE Virtual Reality Annual Symposium, </booktitle> <address> North Carolina., </address> <year> 1995. </year>
Reference-contexts: Partitioning vws into virtual computer spaces within which people and vw entities interact, either with each other or with the various tools they find there, is a common technique employed by many cscw systems (e.g Jupiter [3, 7]) and virtual environments (e.g. DIVE [2] and NPSNET IV <ref> [6] </ref>). Zones are a mechanism that facilitates the application developer in implementing whatever form of these spaces is required through extra features supported by the eco language. <p> However both of these systems have problems when scaled due to their homogeneous world databases, where all object state changes must be communicated among all users of the environment. The NPSNET IV <ref> [6] </ref> project has attempted to overcome this problem by introducing the concept of areas of interest (AOI), whereby only vw entities within a particular AOI would communicate and receive messages from each other. An IP Multicast address may then be assigned to the AOI.
Reference: [7] <author> David A Nichols, Pavel Curtis, Michael Dixon, and John Lamping. High-Latency, </author> <title> Low-Bandwidth Windowing in the Jupiter Collaboration System. </title> <booktitle> In User Interface Systems and Technology (UIST'95), </booktitle> <year> 1995. </year>
Reference-contexts: Partitioning vws into virtual computer spaces within which people and vw entities interact, either with each other or with the various tools they find there, is a common technique employed by many cscw systems (e.g Jupiter <ref> [3, 7] </ref>) and virtual environments (e.g. DIVE [2] and NPSNET IV [6]). Zones are a mechanism that facilitates the application developer in implementing whatever form of these spaces is required through extra features supported by the eco language.
Reference: [8] <author> Karl O'Connell and Vinny Cahill. </author> <title> System Support for Scalable Distributed Virtual Worlds. </title> <booktitle> In Proceedings of the ACM Symposium on Virtual Reality Software and Technology. ACM, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: In a typical distributed `room based' game, for example, an entity may only be interested in events that are raised by other entities within same room. In the eco scoping model, objects are organised into zones <ref> [8] </ref>, where a zone is simply a collection of related objects and events are only visible within the zone of the object raising the event.
Reference: [9] <author> Karl O'Connell, Vinny Cahill, Andrew Condon, Stephen McGerty, Gradimir Starovic, and Brendan Tangney. </author> <title> The VOID shell: A toolkit for the development of distributed video games and virtual worlds. </title> <booktitle> In Proceedings of the Workshop on Simulation and Interaction in Virtual Environments, </booktitle> <year> 1995. </year> <note> Also technical report TCD-CS-95-27, </note> <institution> Dept. of Computer Science, Trinity College Dublin. </institution>
Reference-contexts: This paper describes a combination of techniques that we are using to overcome these twin problems. The work is being done within the context of a wider project known as Moonlight 1 , within which we are designing and implementing a toolkit, known as void <ref> [9] </ref>, for the development of distributed vw applications such as interactive simulations and advanced video games.
Reference: [10] <author> S.K. Singhal and D.R. Cheriton. </author> <title> Using a Position History-Based rotocol for Distributed Object Visualization. </title> <type> Technical Report STAN-CS-TR-94-1505, </type> <institution> Stanford University, </institution> <year> 1994. </year>
Reference-contexts: To ensure a realistic looking simulation and to cater for scalability the amount of communication between Entities and the display manager must be minimised. To achieve this a form of dead reckoning, similar to that outlined in <ref> [10] </ref>, is used. Entities and the Display Manager both execute a function which will predict the future behaviour of the Entity. Updates are only sent from the Entity when the actual local behaviour differs from the predicted version by a threshold amount.
Reference: [11] <author> Gradimir Starovic, Vinny Cahill, and Brendan Tangney. </author> <title> An event based object model for distributed programming. </title> <booktitle> In OOIS (Object-Oriented Information Systems) '95, </booktitle> <pages> pages 72-86, </pages> <address> London, </address> <month> December </month> <year> 1995. </year> <note> Springer-Verlag. Also technical report TCD-CS-95-28, </note> <institution> Dept. of Computer Science, Trinity College Dublin. </institution>
Reference-contexts: The current implementation of void is discussed and the paper concludes with a comparison of our approach with related work in the area. 2 The ECO Model void supports the use of object-oriented (oo) techniques for the design and development of vws. The void object model, known as eco <ref> [11] </ref>, combines three key concepts: objects representing entities, events providing the means for entities to interact and constraints which allow the specification of synchronisation, real-time, and notification requirements. eco objects, which are instance of classes, communicate using an event abstraction.
References-found: 11

