URL: ftp://ftp.cs.kun.nl/pub/CSI/SoftwEng.FunctLang/papers/baks-LFCS94.ps.gz
Refering-URL: http://www.cs.kun.nl/~clean/Clean.Papers.html
Root-URL: 
Email: E-mail: steffen@cs.kun.nl.  E-mail: fliquori, ronchig@di.unito.it.  E-mail: urzy@mimuw.edu.pl.  
Phone: 2  
Title: Comparing Cubes  
Author: Steffen van Bakel fl Luigi Liquori y Simona Ronchi della Rocca Pawe l Urzyczyn z Instytut Informatyki Uniwersytetu Warszawskiego, 
Address: Toernooiveld 1, 6525 ED Nijmegen, Nederland.  Corso Svizzera 185, 10145 Torino, Italia.  Banacha 2, 02-097 Warszawa, Polska.  
Affiliation: 1 Afdeling Informatica, Universiteit Nijmegen,  Dipartimento di Informatica, Universita degli Studi di Torino,  ul.  
Abstract: We study the cube of type assignment systems, as introduced in [10]. This cube is obtained from Barendregt's typed -cube [1] via a natural type erasing function E, that erases type information from terms. We prove that the systems in the former cube enjoy good computational properties, like subject reduction and strong normalization. We study the relationship between the two cubes, which leads to some unexpected results in the field of systems with dependent types. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Barendregt, </author> <title> H.P., Lambda Calculi with Types, </title> <booktitle> Handbook of Logic in Computer Science, </booktitle> <editor> Abramsky, Gabbai, Maibaum eds., </editor> <publisher> Oxford University Press, </publisher> <year> 1991. </year>
Reference-contexts: ERBCHRXCT920046 "Typed Lambda Calculus" z Partly supported by grants NSF CCR-9113196, KBN 2 1192 91 01 and by a grant from the Commission of The European Communities ERB-CIPA-CT92-2266 (294). [11, 15], and the calculus of constructions [5, 6]. Barendregt <ref> [1] </ref> gave a compact and appealing presentation of a class of typed systems, arranging them in a cube. In this cube, every vertex represents a different typed system. <p> This cube is isomorphic to the typed one, in the sense that every type assignment system defined in it is isomorphic to the typed system in the corresponding vertex of Barendregt's cube. 1 Two Cubes We will present a stratified version of the systems in Barendregt's cube, already presented in <ref> [1] </ref>, which will allow both the definition of the erasing function E and of the related cube of type assignment systems. 1.1 The Cube of Typed Systems Definition 1.1.1 The sets of typed -terms (fl t ), typed constructors (Cons t ) and typed kinds (Kind t ) are mutually defined <p> If ` t M : for a typed -term M , then ` t : fl (see <ref> [1] </ref>), and is called a type, or to be more precise: a type with respect to the context . <p> We write ` S A : B to indicate that ` t A : B can be derived using only the rules for S. The properties of this cube are studied in <ref> [1, 8] </ref>. 1.2 The Cube of Type Assignment Systems In this subsection we will present the cube of type assignment systems as was first presented in [10]. <p> A further step can be made by looking for a type assignment counterpart to the Generalised Type Systems, as defined in <ref> [1, 2, 3] </ref>.
Reference: [2] <author> Barendregt, </author> <title> H.P., Introduction to Generalised Type Systems, </title> <journal> Journal of Functional Programming, </journal> <volume> volume 1(2), </volume> <pages> 125-154, </pages> <year> 1991. </year>
Reference-contexts: A further step can be made by looking for a type assignment counterpart to the Generalised Type Systems, as defined in <ref> [1, 2, 3] </ref>.
Reference: [3] <author> Berardi, S., </author> <title> Towards a Mathematical Analysis of Type Dependence in Coquand-Huet Calculus of Constructions and the Other Systems in Barendregt's Cube, </title> <institution> Department of Computer Science, CMU, and Dipartimento di Matematica, Torino, </institution> <year> 1988. </year>
Reference-contexts: In [10] the erasing function was extended in a natural way to all typed systems in Barendregt's cube, including the systems with dependent types, as studied in <ref> [3, 12] </ref>. The essential difference is that the domain of E was extended to include types too, since terms can occur in types. This erasing function induces a cube of type assignment systems. <p> A further step can be made by looking for a type assignment counterpart to the Generalised Type Systems, as defined in <ref> [1, 2, 3] </ref>.
Reference: [4] <author> Curry, H.B., </author> <title> Modified Basic Functionality in Combinatory Logic, </title> <publisher> Dialectica, </publisher> <year> 1969. </year>
Reference-contexts: For instance, the simply typed -calculus is isomorphic to the Curry type assignment system, the second order lambda calculus to the polymorphic type assignment system, and the higher order -calculus to the higher order type assignment system. These correspondences were independently defined by Curry <ref> [4] </ref>, Leivant [14], and Giannini and Ronchi [9], but the induced erasing function is the same in all cases. In [10] the erasing function was extended in a natural way to all typed systems in Barendregt's cube, including the systems with dependent types, as studied in [3, 12].
Reference: [5] <author> Coquand, T., </author> <title> Metamathematical Investigations of a Calculus of Constructions, </title> <booktitle> Logic and Computer Science, </booktitle> <editor> Odifreddi ed., </editor> <publisher> Academic Press, </publisher> <pages> 91-122, </pages> <year> 1990. </year>
Reference-contexts: ERBCHRXCT920046 "Typed Lambda Calculus" z Partly supported by grants NSF CCR-9113196, KBN 2 1192 91 01 and by a grant from the Commission of The European Communities ERB-CIPA-CT92-2266 (294). [11, 15], and the calculus of constructions <ref> [5, 6] </ref>. Barendregt [1] gave a compact and appealing presentation of a class of typed systems, arranging them in a cube. In this cube, every vertex represents a different typed system.
Reference: [6] <author> Coquand, T. and Huet, G., </author> <title> The Calculus of Constructions, </title> <journal> Information and Computation, </journal> <volume> 76(2,3), </volume> <pages> 95-120, </pages> <year> 1988. </year>
Reference-contexts: ERBCHRXCT920046 "Typed Lambda Calculus" z Partly supported by grants NSF CCR-9113196, KBN 2 1192 91 01 and by a grant from the Commission of The European Communities ERB-CIPA-CT92-2266 (294). [11, 15], and the calculus of constructions <ref> [5, 6] </ref>. Barendregt [1] gave a compact and appealing presentation of a class of typed systems, arranging them in a cube. In this cube, every vertex represents a different typed system.
Reference: [7] <author> Dowek, G., </author> <title> The Undecidability of Typability in the Lambda-Pi-Calculus, </title> <booktitle> Proc. Typed Lambda Calculi and Applications, </booktitle> <volume> LNCS 664, </volume> <pages> 139-145, </pages> <year> 1993. </year>
Reference-contexts: In fact all the systems in the dependencies free part of the cubes TAS and TAS 0 have been extensively studied in the literature. The only type assignment system with dependent types already defined in the literature is the system of Dowek <ref> [7] </ref>. Strictly speaking, this is not a type assignment system in the usual sense. <p> So Dowek's system is equivalent to the system corresponding to P in the TAS 0 cube. For this system, the type checking problem was shown to be undecidable in <ref> [7] </ref>. The method of proof of the undecidability is however applicable for all our systems with dependencies. We showed that all the systems with dependencies we defined enjoy good computational properties, and we focused our attention in particular on the relationship between typed and type assignment systems.
Reference: [8] <author> Geuvers, H. and Nederhof, M., </author> <title> Modular Proof of Strong Normalization for the Calculus of Constructions, </title> <journal> Journal of Functional Programming, </journal> <volume> 1(2), </volume> <pages> 155-189, </pages> <year> 1991. </year>
Reference-contexts: We write ` S A : B to indicate that ` t A : B can be derived using only the rules for S. The properties of this cube are studied in <ref> [1, 8] </ref>. 1.2 The Cube of Type Assignment Systems In this subsection we will present the cube of type assignment systems as was first presented in [10].
Reference: [9] <author> Giannini, P. and Ronchi Della Rocca, S., </author> <title> Characterization of Typings in Polymorphic Type Discipline, </title> <booktitle> Proc. Logic in Computer Science, IEEE, </booktitle> <pages> 61-70, </pages> <year> 1988. </year>
Reference-contexts: These correspondences were independently defined by Curry [4], Leivant [14], and Giannini and Ronchi <ref> [9] </ref>, but the induced erasing function is the same in all cases. In [10] the erasing function was extended in a natural way to all typed systems in Barendregt's cube, including the systems with dependent types, as studied in [3, 12].
Reference: [10] <author> Giannini, P., Honsell, F. and Ronchi Della Rocca, S., </author> <title> Type Inference: Some Results, Some Problems, </title> <note> Fundamenta Informaticae, 19(1,2), pp.87-126, </note> <year> 1993. </year>
Reference-contexts: One vertex is the origin and represents the simply typed -calculus of Church; the edges represent the introduction of some new rules of type formation, namely Polymorphism, Higher Order and Dependencies. This three-dimensional structure allows for a deep comparative analysis of different typed -calculi. It is well known (see <ref> [10, 12] </ref>) that some of the type assignment systems already known in the literature can be also defined through an erasing function that erases type information from terms in a typed system. <p> These correspondences were independently defined by Curry [4], Leivant [14], and Giannini and Ronchi [9], but the induced erasing function is the same in all cases. In <ref> [10] </ref> the erasing function was extended in a natural way to all typed systems in Barendregt's cube, including the systems with dependent types, as studied in [3, 12]. The essential difference is that the domain of E was extended to include types too, since terms can occur in types. <p> This cube is a compact presentation of a class of type assignment systems, which partially coincide with known ones (in the side of the cube without dependencies) and partially represents the first attempt of defining type assignment systems with term-dependencies. It was also observed in <ref> [10] </ref> that, surprisingly, the isomorphism between derivations in the corresponding vertices of typed and type assignment cubes is no longer true in presence of dependencies. Then the natural question arises: what is the relation between the two cubes? The authors of [10] conjectured that the relation is an isomorphism between judgements <p> It was also observed in <ref> [10] </ref> that, surprisingly, the isomorphism between derivations in the corresponding vertices of typed and type assignment cubes is no longer true in presence of dependencies. Then the natural question arises: what is the relation between the two cubes? The authors of [10] conjectured that the relation is an isomorphism between judgements rather than derivations, that is, a judgement ` M : is true in one of the type assignment systems if and only if, in the corresponding typed system, a judgement t ` t M t : t can be proved such <p> The properties of this cube are studied in [1, 8]. 1.2 The Cube of Type Assignment Systems In this subsection we will present the cube of type assignment systems as was first presented in <ref> [10] </ref>. The definition of the type assignment cube is based on the definition of an erasing function E that erases all type information from the typed terms. <p> As before, a type is a constructor of kind fl (and again this is a context-dependent property). A -term M is typable if there are a context , and a constructor such that ` M : . (We prove in Section 2 that then is a type.) As in <ref> [10] </ref>, we can distinguish eight different type assignment systems, defined using the same collection of rules given in Definition 1.1.6 (i) for the TS cube. <p> An important property of the type assignment systems is strong normalization of typable terms; this is already known to hold for the systems F !, F 1, F 2, and F 0 (see <ref> [10] </ref>). Using this result, we will show that it also holds for the other four systems of the cube of type assignment systems. To achieve this, we use the function ED that `erases dependencies' as defined in [10]. <p> for the systems F !, F 1, F 2, and F 0 (see <ref> [10] </ref>). Using this result, we will show that it also holds for the other four systems of the cube of type assignment systems. To achieve this, we use the function ED that `erases dependencies' as defined in [10]. <p> Theorem 2.8 Termination If ` A : B then A is strongly normalizing. Proof: In <ref> [10] </ref>, Theorem 2.2.1 states that if ` A : B is a derived judgement in DF ! (DF 1, DF 2, DF 0 ), then ED () ` ED (A) : ED (B) is derivable in F ! (F 1, F 2, F 0 ). <p> The definition of isomorphism between two systems was already given in <ref> [10] </ref>, but in a less general way. Two systems are isomorphic according to the definition in [10], if they are isomorphic in the sense of the preceding Definition, and moreover, the function F is such that F (D t ) is obtained from D t by applying the erasing function to <p> The definition of isomorphism between two systems was already given in <ref> [10] </ref>, but in a less general way. Two systems are isomorphic according to the definition in [10], if they are isomorphic in the sense of the preceding Definition, and moreover, the function F is such that F (D t ) is obtained from D t by applying the erasing function to all terms in D t ; by abuse of notation, we denote F (D t ) <p> Then for every typed derivation D t , F (D t ) = E (D t ). The following results are taken from <ref> [10] </ref>: Theorem 3.3 Let S t and S u be systems in corresponding vertices of TS and TAS cube. i) S t and S u are consistent. ii) If S t and S u do not contain Dependencies as subset of their sets of rules, then S t and S u <p> Proof: See <ref> [10] </ref>. The proof uses the following properties of the erasing function: i) E (A [B=a]) E (A)[E (B)=a]; ii) If A !! fi C, then E (A) !! fi E (C). <p> After the negative result of Theorem 3.3 (iii), it is natural to ask if the corresponding systems in the TS and TAS cubes are at least similar. Such a conjecture was already stated in <ref> [10] </ref>. This property holds only for the systems without polymorphism, as will be shown in Theorem 3.7, namely, for DF 1 versus P, and for F 0 versus !. Adding polymorphism makes a difference: the systems with both polymorphism and dependencies are not similar. <p> This is the price we paid for reaching the isomorphism with the typed systems. 5 Conclusions This paper, together with <ref> [10] </ref>, can be seen as the first attempt to study type assignment systems with dependent types. In fact all the systems in the dependencies free part of the cubes TAS and TAS 0 have been extensively studied in the literature.
Reference: [11] <author> Girard, J.Y., </author> <title> The System F of Variable Types, Fifteen Years Later, </title> <journal> Theoretical Computer Science, </journal> <volume> 45, </volume> <pages> 159-192, </pages> <year> 1987. </year>
Reference-contexts: ERBCHRXCT920046 "Typed Lambda Calculus" z Partly supported by grants NSF CCR-9113196, KBN 2 1192 91 01 and by a grant from the Commission of The European Communities ERB-CIPA-CT92-2266 (294). <ref> [11, 15] </ref>, and the calculus of constructions [5, 6]. Barendregt [1] gave a compact and appealing presentation of a class of typed systems, arranging them in a cube. In this cube, every vertex represents a different typed system. <p> The system F 1 corresponds to the well-known Curry type assignment system, whereas F 2 is the type assignment version of 2, which is essentially Girard's system F <ref> [11] </ref>. 2 Basic properties of TAS In this section, we will prove that all the systems in TAS cube have good computational properties; the subject reduction property, the Church-Rosser property and strong normal ization of typable terms will be shown.
Reference: [12] <author> Harper, B., Honsell, F. and Plotkin, G., </author> <title> A Framework for Defining Logics, </title> <journal> Journal of the ACM, </journal> <volume> 40, </volume> <year> 1993. </year>
Reference-contexts: One vertex is the origin and represents the simply typed -calculus of Church; the edges represent the introduction of some new rules of type formation, namely Polymorphism, Higher Order and Dependencies. This three-dimensional structure allows for a deep comparative analysis of different typed -calculi. It is well known (see <ref> [10, 12] </ref>) that some of the type assignment systems already known in the literature can be also defined through an erasing function that erases type information from terms in a typed system. <p> In [10] the erasing function was extended in a natural way to all typed systems in Barendregt's cube, including the systems with dependent types, as studied in <ref> [3, 12] </ref>. The essential difference is that the domain of E was extended to include types too, since terms can occur in types. This erasing function induces a cube of type assignment systems.
Reference: [13] <author> Klop, J. W., </author> <title> Combinatory Reduction Systems, </title> <address> PhD-thesis, Rijksuniversiteit Utrecht, </address> <year> 1980. </year>
Reference-contexts: Theorem 2.3 Church-Rosser. If A !! fi A 0 and B !! fi B 0 , then there exists C such that A 0 !! fi C and B 0 !! fi C. Proof: In the terminology of Klop <ref> [13] </ref>, our beta reduction is a regular combinatory reduction system, and thus the Church-Rosser property follows from Theorem II.3.11 in [13]. The following lemmas can be proved by easy induction on the structure of derivations. <p> Proof: In the terminology of Klop <ref> [13] </ref>, our beta reduction is a regular combinatory reduction system, and thus the Church-Rosser property follows from Theorem II.3.11 in [13]. The following lemmas can be proved by easy induction on the structure of derivations. Lemma 2.4 i) If v 0 , and ` A : B, then FV (A) [ FV (B) Dom (), and 0 ` A : B. ii) Let B 2 ST (A).
Reference: [14] <author> Leivant, D., </author> <title> Polymorphic Type Inference, </title> <booktitle> In Symposium on Principles of Programming Languages, ACM, </booktitle> <pages> 88-98, </pages> <year> 1983. </year>
Reference-contexts: For instance, the simply typed -calculus is isomorphic to the Curry type assignment system, the second order lambda calculus to the polymorphic type assignment system, and the higher order -calculus to the higher order type assignment system. These correspondences were independently defined by Curry [4], Leivant <ref> [14] </ref>, and Giannini and Ronchi [9], but the induced erasing function is the same in all cases. In [10] the erasing function was extended in a natural way to all typed systems in Barendregt's cube, including the systems with dependent types, as studied in [3, 12].
Reference: [15] <author> Reynolds, </author> <title> J.C., Towards a Theory of Type Structures, </title> <booktitle> Proc. Paris Colloquium on Programming, </booktitle> <publisher> Springer Verlag, </publisher> <pages> 408-425, </pages> <year> 1974. </year>
Reference-contexts: ERBCHRXCT920046 "Typed Lambda Calculus" z Partly supported by grants NSF CCR-9113196, KBN 2 1192 91 01 and by a grant from the Commission of The European Communities ERB-CIPA-CT92-2266 (294). <ref> [11, 15] </ref>, and the calculus of constructions [5, 6]. Barendregt [1] gave a compact and appealing presentation of a class of typed systems, arranging them in a cube. In this cube, every vertex represents a different typed system.
References-found: 15

