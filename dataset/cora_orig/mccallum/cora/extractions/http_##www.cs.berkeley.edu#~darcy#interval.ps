URL: http://www.cs.berkeley.edu/~darcy/interval.ps
Refering-URL: http://www.cs.berkeley.edu/~christos/cs270/index.html
Root-URL: 
Keyword: Narrowing Interval Bounds  
Abstract: Joseph D. Darcy CS 270 Project Report, spring 1998 1. Abstract 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> ANSI/IEEE, </author> <title> New York, IEEE Standard for Binary Floating Point Arithmetic, </title> <editor> Std 754-1985 ed., </editor> <year> 1985. </year>
Reference-contexts: notable properties of this numerical system. 3.3 proves that the described interval arithmetic has inclusion monotonicity, the driving theorem for all interval arithmetic computation. 4 examines various techniques used to obtain narrower, more useful, interval bounds and the appendix shows there are problems naively implementing interval arithmetic on IEEE 754 <ref> [1] </ref> floating point hardware. 3. Background Before discussing how to compute interval bounds, a brief introduction to interval arithmetic is presented. <p> For now, our discussion of interval arithmetic assumes underlying exact real arithmetic. In practice, floating point arithmetic is used instead. The appendix discusses issues related to implementing interval arithmetic using the now ubiquitous IEEE 754 standard for Binary Floating-Point Arithmetic <ref> [1] </ref>. Interval arithmetic can also be extended to functions of many arguments and to arguments that are vectors of intervals. 3.1 Definition of Interval arithmetic The presentation of interval arithmetic in this section is based on [2] and [12]. <p> These rounding policies, rounding to positive infinity and rounding to negative infinity, are included in IEEE 754 for the express purpose of providing direct support for Interval arithmetic at a reasonable cost <ref> [1] </ref>. For a single operation, the bounds calculated by using these directed rounding modes are slightly wider than those calculated with exact arithmetic.
Reference: [2] <author> Gtz Alefeld and Jrgen Herzberger, </author> <title> Introduction to Interval Computations , Academic Press, </title> <address> New York 1983. </address>
Reference-contexts: This paper surveys a variety of techniques for refining the interval bounds. An appendix identifies issues with realizing floating point based interval arithmetic on current IEEE 754 compliant processors. 2. Introduction Interval arithmetic <ref> [2] </ref>, [12] is an effort to automatically determine the uncertainty in a numerical result based on the uncertainly in the data and because of any roundoff from floating point computation. <p> Interval arithmetic can also be extended to functions of many arguments and to arguments that are vectors of intervals. 3.1 Definition of Interval arithmetic The presentation of interval arithmetic in this section is based on <ref> [2] </ref> and [12]. An interval is a closed bounded set of real numbers, X x x t x t x x x= = 1 2 1 2 1 2 , | , , l q . Intervals are written with uppercase letters and real numbers with lowercase letters. <p> different interval arithmetics based on complex numbers can be defined; for example, intervals that are boxes and intervals that are circles. 3.2 Algebraic Properties of Simple Interval Arithmetic Since the elements of the intervals described in the previous section are real numbers, several properties of our interval arithmetic easily follow <ref> [2] </ref>: Joseph D.
Reference: [3] <author> Louis B. Ball, </author> <title> Automatic Differentiation: Techniques and Applications , Springer-Verlag, </title> <year> 1981. </year>
Reference-contexts: A related technique is presented in [4]. Instead of subdividing X into equally-sized regions, the monotone regions of X are found. The exact range of a monotone region can be found by looking at its endpoints. Finding the monotone regions relies on automatic differentiation <ref> [3] </ref>, finding an expression for the derivative of a function through the systematic application of simple calculus identities to the representation of the function. In general, automatic differentiation can be used to find higher order derivatives as well.
Reference: [4] <author> L. B. Ball, </author> <title> Improved Interval Bounds for Ranges of Functions, Interval Mathematics 1985, </title> <editor> ed. G. Goos and J. Hartmanis, </editor> <year> 1985. </year>
Reference-contexts: In other words, as the width of the input interval X decreases, the width of F X a f decreases at least linearly. Therefore, the exact range of f can be approximated arbitrarily closely in exact interval arithmetic. A related technique is presented in <ref> [4] </ref>. Instead of subdividing X into equally-sized regions, the monotone regions of X are found. The exact range of a monotone region can be found by looking at its endpoints.
Reference: [5] <author> Christian Biscof, Alan Carle, George Corliss, Andreas Griewank, and Paul Hovland, ADIFOR: </author> <title> Generating Derivative Codes from Fortran Programs, </title> <note> ADIFOR Working Note #1, Scientific Programming vol. 1, </note> <year> 1992, </year> <pages> pp. 1-29. </pages>
Reference-contexts: In general, automatic differentiation can be used to find higher order derivatives as well. Automatic differentiation packages have been developed for C [6] and FORTRAN <ref> [5] </ref>. 4.3 Centered Forms Instead of storing two endpoints, an interval can also be represented as a midpoint and a range.
Reference: [6] <author> Christian Biscof, L. Roh, and A Mauer, ADIS: </author> <title> And Extensible Automatic Differentiation Toold for ANSI-C. </title> <type> Preprint ANL?MSC-P626-1196, </type> <month> March </month> <year> 1997. </year>
Reference-contexts: In general, automatic differentiation can be used to find higher order derivatives as well. Automatic differentiation packages have been developed for C <ref> [6] </ref> and FORTRAN [5]. 4.3 Centered Forms Instead of storing two endpoints, an interval can also be represented as a midpoint and a range.
Reference: [7] <author> W. M. Kahan, </author> <title> The Improbability of Probabilistic Error Analyses for Numerical Computations, </title> <address> http://www.cs.berkeley.edu/~wkahan/improber.ps. </address>
Reference-contexts: Floating point rounding errors are correlated; they are not well-modeled by independent random variables <ref> [7] </ref>. Numerical analysts can take advantage of rounding error correlation to calculate more accurate answers. When used on such an algorithm, interval arithmetic blurs and the correlation and can give a false impressions that the algorithm is inaccurate.
Reference: [8] <author> William Kahan, </author> <note> Lecture Notes on Real Root-Finding, lecture notes for UC Berkeley Math 128, spring 1998, http://www.cs.berkeley.edu/~wkahan/Math128/RealRoots.ps. </note>
Reference-contexts: Instead of using derivatives for a Taylor expansion, divided differences can be used. Intuitively, derivatives are tangents whereas divided differences are secants. 4.4 Advantages of Divided Differences The first divided difference between two points is f x y x y , a f = - <ref> [8] </ref>. When x y= the divided difference is equal to the derivative. The second divided difference is the first divided difference of two other first divided differences, f x y z x z , , a f a f - . <p> However, calculating divided difference with vector arguments has complications not found in the scalar case. Symbolic algebra packages could include support for divided differences in addition to derivatives <ref> [8] </ref>. 5. Conclusions Introduced by Ramon Moore in his 1962 Stanford Ph.D. thesis, the interval arithmetic literature by 1979 sported well over 700 papers [15]. The interval arithmetic literature includes many variants of and extensions to the simple intervals presented in 3.1.
Reference: [9] <author> William Kahan, </author> <title> Miscalculating Area and Angles of a Needle-like Triangle, </title> <address> http://www.cs.berkeley.edu/~wkahan/triangle.ps. </address>
Reference-contexts: not imply the algorithm is giving an inaccurate answer.) For example, consider Herons formula for calculating the area of a triangle. s a b c = + + (( ) ) / 2 Known since antiquity, Herons formula calculated with floating point arithmetic gives inaccurate answers for long needle-like triangles <ref> [9] </ref>. <p> Darcy CS 270 Project Report, spring 1998 2 which gives the correct answer of 972730.06 when run under single precision floating point <ref> [9] </ref>. However, interval arithmetic suggests a more expedient alternative; run the same formula in higher precision until the upper and lower bound are suitably close. When Herons formula is run under double precision interval floating point and rounded back to single, the much sharper interval [972730.00, 972730.06] is returned.
Reference: [10] <author> W. M. Kahan, </author> <title> A More Complete Interval Arithmetic, Lectures notes prepared for a summer course at the University of Michigan, </title> <address> June 17-21, </address> <year> 1968. </year>
Reference-contexts: Other interval arithmetics are more elaborate and more expressive. Instead of being based on real numbers, interval arithmetic can be built on top of various extensions to the real numbers. For example in <ref> [10] </ref> Kahan describes an interval arithmetic based on the real numbers extended with a projective infinity, that is the real number line closed to form a circle via a point at infinity.
Reference: [11] <author> William Kahan, </author> <type> personal communication. Joseph D. Darcy CS 270 Project Report, </type> <month> spring </month> <year> 1998 </year> <month> 11 </month>
Reference-contexts: A path to avoid interval methods leads back to them <ref> [11] </ref>. Joseph D. Darcy CS 270 Project Report, spring 1998 3 This quantity can be calculated as a function of the endpoints of the argument intervals. <p> This not only avoids dividing but zero but also reduces floating point cancellation if f x f y a f a f <ref> [11] </ref>.
Reference: [12] <author> Ramon E. Moore, </author> <title> Methods and Applications of Interval Analysis , SIAM Philadelphia, </title> <year> 1979. </year>
Reference-contexts: This paper surveys a variety of techniques for refining the interval bounds. An appendix identifies issues with realizing floating point based interval arithmetic on current IEEE 754 compliant processors. 2. Introduction Interval arithmetic [2], <ref> [12] </ref> is an effort to automatically determine the uncertainty in a numerical result based on the uncertainly in the data and because of any roundoff from floating point computation. <p> Interval arithmetic can also be extended to functions of many arguments and to arguments that are vectors of intervals. 3.1 Definition of Interval arithmetic The presentation of interval arithmetic in this section is based on [2] and <ref> [12] </ref>. An interval is a closed bounded set of real numbers, X x x t x t x x x= = 1 2 1 2 1 2 , | , , l q . Intervals are written with uppercase letters and real numbers with lowercase letters. <p> 25 375 ,20 ,20 ,25 , In general, if all the interval arguments to a function appear at most once in the computation of the resulting interval, the resulting interval is exactly the range of the original rational function over X (assuming there are not divisions by intervals containing zero) <ref> [12] </ref>. Therefore, it is very desirable to have an algebraic equivalent form of f x a f having this property. However, clearly it is not always possible to manipulate a function into the desired form (e.g. h x x x a f a f = -1 ). <p> An important result is that the as the number of subdivisions increases to N, the excess width of the union of the images of the subdivisions decreases as 1/N. With this technique, improving the excess width by a linear factor also requires linearly more computation <ref> [12] </ref>. This behavior can be proven based on the Lipschitz property of our natural interval extensions. The Lipschitz property for intervals is w F X L w X a f b g a f . <p> If such centered forms are used in the subdivision process, the excess width decreases as 1/N 2 instead of 1/N <ref> [12] </ref>. The centered form techniques have extensions to interval functions of many variables [14].
Reference: [13] <editor> Numeric-interest mailing list archive, </editor> <address> http://www.validgh.com/numeric-interest. </address>
Reference: [14] <author> H. Ratschek and J. Rokne, </author> <title> Computer Methods for the Range of Functions , Ellis Horwood Limited, </title> <year> 1984. </year>
Reference-contexts: If such centered forms are used in the subdivision process, the excess width decreases as 1/N 2 instead of 1/N [12]. The centered form techniques have extensions to interval functions of many variables <ref> [14] </ref>.
Reference: [15] <author> Fred N. Ris, </author> <title> Interval Analysis and Applications to Linear Algebra , Doctoral thesis, </title> <institution> Wadam College, Oxford University, </institution> <year> 1972. </year>
Reference-contexts: Symbolic algebra packages could include support for divided differences in addition to derivatives [8]. 5. Conclusions Introduced by Ramon Moore in his 1962 Stanford Ph.D. thesis, the interval arithmetic literature by 1979 sported well over 700 papers <ref> [15] </ref>. The interval arithmetic literature includes many variants of and extensions to the simple intervals presented in 3.1. Common programming language have in the past and continue to stymie access to the IEEE 754 floating point features needed for a correct interval arithmetic implementation (see the appendix). <p> At the cost of a few negation, several identities (Table 1) allow a calculation intended to by run under round to + to be rewritten as a calculation under round to that gets the same answer (and vice versa) <ref> [15] </ref>. A rounding mode aware compiler could determine what mix of extra-negations and rounding mode changes resulted in the fastest code for a particular processor.
Reference: [16] <author> Richard L. Sites, Richard T. Witek, </author> <title> Alpha AXP Architecture Reference Manual, </title> <note> Second Edition , Digital Press, </note> <year> 1995. </year>
Reference-contexts: If each floating point instruction moving through the pipeline carried the rounding mode to use for that operation, the pipeline would not need to be synchronized on rounding mode changes. The Alpha architecture <ref> [16] </ref> has limited support for such capabilities by using a two-bit field in floating Joseph D. Darcy CS 270 Project Report, spring 1998 10 point instruction opcodes to indicate what rounding mode to use for that operation.
Reference: [17] <author> Wolfgang Walter, FORTRAN-SC: </author> <title> A FORTRAN Extension for Engineering/Scientific Computation with Access to ACRITH, printed in Reliability in Computing, </title> <editor> ed. Ramon E. Moore, </editor> <publisher> Academic Press, Inc., </publisher> <year> 1988, </year> <pages> pp. 43-62. </pages>
Reference-contexts: Common programming language have in the past and continue to stymie access to the IEEE 754 floating point features needed for a correct interval arithmetic implementation (see the appendix). Nevertheless, interval arithmetic implementations are available <ref> [17] </ref>. Numerical analysts still debate the proper definitions of interval functions (see the debate concerning interval X Y Although naive conversions from rational functions to interval equivalents can yield uselessly wide bounds, several automated techniques exist for achieving narrower bounds.
References-found: 17

