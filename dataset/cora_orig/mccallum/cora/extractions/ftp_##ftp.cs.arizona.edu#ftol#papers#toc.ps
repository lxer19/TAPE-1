URL: ftp://ftp.cs.arizona.edu/ftol/papers/toc.ps
Refering-URL: http://www.cs.arizona.edu/people/hiltunen/
Root-URL: http://www.cs.arizona.edu
Title: A Configurable Membership Service  
Author: Matti A. Hiltunen, Member, IEEE, and Richard D. Schlichting, Member, IEEE 
Keyword: Index terms: Distributed systems, networks, communication protocols, customization, mod ularity, micro-protocols.  
Abstract: A membership service is used to maintain information about which sites are functioning in a distributed system at any given time. Many such services have been defined, with each implementing a unique combination of properties that simplify the construction of higher levels of the system. Despite this wealth of possibilities, however, any given service typically realizes only one set of properties, which makes it difficult to tailor the service provided to the specific needs of the application. Here, a configurable membership service that addresses this problem is described. This service is based on decomposing membership into its constituent abstract properties, and then implementing these properties as separate software modules called micro-protocols that can be configured together to produce a customized membership service. A prototype C++ implementation of the membership service for a simulated distributed environment is also described. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. C. Laprie, ed., </author> <title> Dependability: Basic Concepts and Terminology. Vienna: </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [2] <author> Y. Amir, L. Moser, P. Melliar-Smith, D. Agarwal, and P. Ciarfella, </author> <title> The Totem single-ring ordering and membership protocol, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 13, </volume> <pages> pp. 311-342, </pages> <month> Nov </month> <year> 1995. </year>
Reference-contexts: Hiltunen and R. Schlichting are with the Department of Computer Science, The University of Arizona, Tucson, AZ 85721. E-mail: fhiltunen,rickg@cs.arizona.edu. called a membership protocol. Both membership services and protocols have been the subject of a large number of papers in recent years <ref> [2, 3, 4, 5, 6, 7, 8, 9] </ref>. While this variety of membership services and protocols gives the user many options, in most cases each service provides only a single combination of properties optimized for a given situation. <p> Membership services and protocols have been the subject of a large number of papers. Some of the work has been based on a synchronous system model, where bounds are placed on the network transmission time [26, 4, 5]. Other work assumes an asynchronous model similar to that used here <ref> [2, 14, 18, 8] </ref>. Unlike our configurable service, however, all these services guarantee only a single collection of properties, or at most, offer a small number of choices. Schemes based on logical rings or token passing are used by many multicast, membership, and system diagnosis protocols. <p> Schemes based on logical rings or token passing are used by many multicast, membership, and system diagnosis protocols. For example, token passing is used as a means of implementing reliable totally ordered multicast in the Reliable Broadcast Protocol [27], Token-Passing Multicast (TPM) protocol [19], Totem <ref> [2] </ref>, Pinwheel [26], and Reliable Multicast Protocol (RMP) [28]. In these protocols, the site possessing the token is either the only site that is allowed to send a message or the site that assigns a global ordering to messages sent by all sites. <p> In [7], a family of three membership protocols are described, where each protocol provides different guarantees. Although not configurable in the same sense as ours, the motivation 4 Totem uses a commit token for a similar purpose <ref> [2] </ref>. 33 that different applications need different guaranteesis similar. Finally, in [29], membership services are divided into three components: a Failure Suspector, a Multicast Component, and a View Component.
Reference: [3] <author> F. Cristian, </author> <title> Reaching agreement on processor-group membership in synchronous distributed systems, </title> <journal> Distributed Computing, </journal> <volume> vol. 4, </volume> <pages> pp. 175-187, </pages> <year> 1991. </year>
Reference-contexts: Hiltunen and R. Schlichting are with the Department of Computer Science, The University of Arizona, Tucson, AZ 85721. E-mail: fhiltunen,rickg@cs.arizona.edu. called a membership protocol. Both membership services and protocols have been the subject of a large number of papers in recent years <ref> [2, 3, 4, 5, 6, 7, 8, 9] </ref>. While this variety of membership services and protocols gives the user many options, in most cases each service provides only a single combination of properties optimized for a given situation. <p> This micro-protocol is distinct from ExtendedVirtualSynchrony since the 23 predecessor sets of such messages are different in the sites in the two merging partitions. Other partition handling micro-protocols. In numerous membership services <ref> [3, 13, 5, 6, 14, 8] </ref>, it is simply assumed that partitions will not occur, or that only one partition will continue to operate. The OnePartition micro-protocol implements a simple strategy that approximates this behavior.
Reference: [4] <author> P. Ezhilchelvan and R. Lemos, </author> <title> A robust group membership algorithm for distributed real-time system, </title> <booktitle> in Proceedings of the 11th Real-Time Systems Symposium, </booktitle> <address> (Lake Buena Vista, Florida), </address> <pages> pp. 173-179, </pages> <month> Dec </month> <year> 1990. </year>
Reference-contexts: Hiltunen and R. Schlichting are with the Department of Computer Science, The University of Arizona, Tucson, AZ 85721. E-mail: fhiltunen,rickg@cs.arizona.edu. called a membership protocol. Both membership services and protocols have been the subject of a large number of papers in recent years <ref> [2, 3, 4, 5, 6, 7, 8, 9] </ref>. While this variety of membership services and protocols gives the user many options, in most cases each service provides only a single combination of properties optimized for a given situation. <p> Membership services and protocols have been the subject of a large number of papers. Some of the work has been based on a synchronous system model, where bounds are placed on the network transmission time <ref> [26, 4, 5] </ref>. Other work assumes an asynchronous model similar to that used here [2, 14, 18, 8]. Unlike our configurable service, however, all these services guarantee only a single collection of properties, or at most, offer a small number of choices.
Reference: [5] <author> H. Kopetz, G. Grunsteidl, and J. Reisinger, </author> <title> Fault-tolerant membership service in a synchronous distributed real-time system, in Dependable Computing for Critical Applications (A. </title> <editor> Avizienis and J. Laprie, </editor> <booktitle> eds.), </booktitle> <pages> pp. 411-429, </pages> <publisher> Springer-Verlag, Wien, </publisher> <year> 1991. </year>
Reference-contexts: Hiltunen and R. Schlichting are with the Department of Computer Science, The University of Arizona, Tucson, AZ 85721. E-mail: fhiltunen,rickg@cs.arizona.edu. called a membership protocol. Both membership services and protocols have been the subject of a large number of papers in recent years <ref> [2, 3, 4, 5, 6, 7, 8, 9] </ref>. While this variety of membership services and protocols gives the user many options, in most cases each service provides only a single combination of properties optimized for a given situation. <p> This micro-protocol is distinct from ExtendedVirtualSynchrony since the 23 predecessor sets of such messages are different in the sites in the two merging partitions. Other partition handling micro-protocols. In numerous membership services <ref> [3, 13, 5, 6, 14, 8] </ref>, it is simply assumed that partitions will not occur, or that only one partition will continue to operate. The OnePartition micro-protocol implements a simple strategy that approximates this behavior. <p> Membership services and protocols have been the subject of a large number of papers. Some of the work has been based on a synchronous system model, where bounds are placed on the network transmission time <ref> [26, 4, 5] </ref>. Other work assumes an asynchronous model similar to that used here [2, 14, 18, 8]. Unlike our configurable service, however, all these services guarantee only a single collection of properties, or at most, offer a small number of choices.
Reference: [6] <author> P. Melliar-Smith, L. Moser, and V. Agarwala, </author> <title> Processor membership in asynchronous distributed systems, </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> vol. 5, </volume> <pages> pp. 459-473, </pages> <month> May </month> <year> 1994. </year> <month> 35 </month>
Reference-contexts: Hiltunen and R. Schlichting are with the Department of Computer Science, The University of Arizona, Tucson, AZ 85721. E-mail: fhiltunen,rickg@cs.arizona.edu. called a membership protocol. Both membership services and protocols have been the subject of a large number of papers in recent years <ref> [2, 3, 4, 5, 6, 7, 8, 9] </ref>. While this variety of membership services and protocols gives the user many options, in most cases each service provides only a single combination of properties optimized for a given situation. <p> This micro-protocol is distinct from ExtendedVirtualSynchrony since the 23 predecessor sets of such messages are different in the sites in the two merging partitions. Other partition handling micro-protocols. In numerous membership services <ref> [3, 13, 5, 6, 14, 8] </ref>, it is simply assumed that partitions will not occur, or that only one partition will continue to operate. The OnePartition micro-protocol implements a simple strategy that approximates this behavior.
Reference: [7] <author> R. Rajkumar, S. Fakhouri, and F. Jahanian, </author> <title> Processor group membership protocols: Specification, </title> <booktitle> design, and implementation, in Proceedings of the 12th Symposium on Reliable Distributed Systems, </booktitle> <address> (Princeton, NJ), </address> <pages> pp. 2-11, </pages> <month> Oct </month> <year> 1993. </year>
Reference-contexts: Hiltunen and R. Schlichting are with the Department of Computer Science, The University of Arizona, Tucson, AZ 85721. E-mail: fhiltunen,rickg@cs.arizona.edu. called a membership protocol. Both membership services and protocols have been the subject of a large number of papers in recent years <ref> [2, 3, 4, 5, 6, 7, 8, 9] </ref>. While this variety of membership services and protocols gives the user many options, in most cases each service provides only a single combination of properties optimized for a given situation. <p> This is determined, for example, by whether information is collected from multiple sites before making a decision and if so, how many must agree for the change to be reported. Different possibilities include allowing the decision to be made by only a single site (single site suspicion) <ref> [8, 7] </ref>, requiring that all functioning sites agree (consensus) [14, 15], or supporting some intermediate strategy based on voting (voted decision) [9]. Agreement. The agreement property states that if one site delivers a membership message to the application, all other functioning sites will eventually deliver the same message. <p> When a partition occurs, this property applies only to those sites within the same partition. 1 Weaker forms of agreement can also be identified. For example, eventual agreement guarantees that the membership on different sites will eventually converge, but allows the set of delivered membership messages to be different <ref> [7] </ref>. 1 Sites in other partitions or that were failed during the agreement process will typically obtain updated membership information during the partition merge or recovery process, respectively. 5 Ordering. <p> When a site updates its membership, all other sites are guaranteed either to have the same new membership or to be in a transition state to the new membership <ref> [7] </ref>. Partition Handling. Partition handling properties specify how the system behaves when a network partition occurs and when it is subsequently corrected. <p> In Horus, the membership service provides some degree of choice in the properties that it guarantees. Specifically, the application may choose to deal with partitions by using a single partition approach or by allowing computation to continue in all partitions. In <ref> [7] </ref>, a family of three membership protocols are described, where each protocol provides different guarantees. Although not configurable in the same sense as ours, the motivation 4 Totem uses a commit token for a similar purpose [2]. 33 that different applications need different guaranteesis similar.
Reference: [8] <author> A. Ricciardi and K. Birman, </author> <title> Using process groups to implement failure detection in asynchronous environments, </title> <booktitle> in Proceedings of the 10th ACM Symposium on Principles of Distributed Computing, </booktitle> <address> (Montreal, Quebec, Canada), </address> <pages> pp. 341-353, </pages> <month> Aug </month> <year> 1991. </year>
Reference-contexts: Hiltunen and R. Schlichting are with the Department of Computer Science, The University of Arizona, Tucson, AZ 85721. E-mail: fhiltunen,rickg@cs.arizona.edu. called a membership protocol. Both membership services and protocols have been the subject of a large number of papers in recent years <ref> [2, 3, 4, 5, 6, 7, 8, 9] </ref>. While this variety of membership services and protocols gives the user many options, in most cases each service provides only a single combination of properties optimized for a given situation. <p> This is determined, for example, by whether information is collected from multiple sites before making a decision and if so, how many must agree for the change to be reported. Different possibilities include allowing the decision to be made by only a single site (single site suspicion) <ref> [8, 7] </ref>, requiring that all functioning sites agree (consensus) [14, 15], or supporting some intermediate strategy based on voting (voted decision) [9]. Agreement. The agreement property states that if one site delivers a membership message to the application, all other functioning sites will eventually deliver the same message. <p> The various approaches for accomplishing this can be classified into three major categories: (1) broadcast based (e.g., [14, 15]), (2) coordinator based (e.g., <ref> [8] </ref>), and (3) token based (e.g., [19]). We selected the third since it allows property micro-protocols to be cleanly separated from the rest of the membership service implementation, thereby increasing configurability. <p> This micro-protocol is distinct from ExtendedVirtualSynchrony since the 23 predecessor sets of such messages are different in the sites in the two merging partitions. Other partition handling micro-protocols. In numerous membership services <ref> [3, 13, 5, 6, 14, 8] </ref>, it is simply assumed that partitions will not occur, or that only one partition will continue to operate. The OnePartition micro-protocol implements a simple strategy that approximates this behavior. <p> Membership services and protocols have been the subject of a large number of papers. Some of the work has been based on a synchronous system model, where bounds are placed on the network transmission time [26, 4, 5]. Other work assumes an asynchronous model similar to that used here <ref> [2, 14, 18, 8] </ref>. Unlike our configurable service, however, all these services guarantee only a single collection of properties, or at most, offer a small number of choices. Schemes based on logical rings or token passing are used by many multicast, membership, and system diagnosis protocols.
Reference: [9] <author> M. Reiter, </author> <title> A secure group membership protocol, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 22, </volume> <pages> pp. 31-42, </pages> <month> Jan </month> <year> 1996. </year>
Reference-contexts: Hiltunen and R. Schlichting are with the Department of Computer Science, The University of Arizona, Tucson, AZ 85721. E-mail: fhiltunen,rickg@cs.arizona.edu. called a membership protocol. Both membership services and protocols have been the subject of a large number of papers in recent years <ref> [2, 3, 4, 5, 6, 7, 8, 9] </ref>. While this variety of membership services and protocols gives the user many options, in most cases each service provides only a single combination of properties optimized for a given situation. <p> Different possibilities include allowing the decision to be made by only a single site (single site suspicion) [8, 7], requiring that all functioning sites agree (consensus) [14, 15], or supporting some intermediate strategy based on voting (voted decision) <ref> [9] </ref>. Agreement. The agreement property states that if one site delivers a membership message to the application, all other functioning sites will eventually deliver the same message.
Reference: [10] <author> K. Birman, A. Schiper, and P. Stephenson, </author> <title> Lightweight causal and atomic group multicast, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 9, </volume> <pages> pp. 272-314, </pages> <month> Aug </month> <year> 1991. </year>
Reference-contexts: As a result, the system designer often has little choice and may end up having to use a protocol that is either too strong or too weak. For example, the membership service in the ISIS system implements virtual synchrony <ref> [10] </ref>, which is a relatively strong property that guarantees that messages reflecting membership change events are delivered to the application at every site at precisely the identical point in the message stream.
Reference: [11] <author> N. Hutchinson and L. Peterson, </author> <title> The x-kernel: An architecture for implementing network protocols, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 17, </volume> <pages> pp. 64-76, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: In a larger context, this work can be viewed as extending the hierarchical approach to constructing modular networking software represented by such systems as the x-kernel <ref> [11] </ref> and Horus [12] to support finer grain modules and more flexible inter-module communication capabilities. 2 The goal of this paper is to describe the design of this configurable membership service and to relate some initial experience with a prototype implementation written in C++. <p> For example, the x-kernel <ref> [11] </ref> and Horus [12] support construction of configurable services, but the modules are relatively coarse-grain and can only interact hierarchically using a fixed interface. Adaptive [23] introduces an approach to building protocols that employs a collection of reusable building-block protocol mechanisms that can be composed automatically based on functional specifications.
Reference: [12] <author> R. v. Renesse, K. Birman, and S. Maffeis, Horus, </author> <title> a flexible group communication system, </title> <journal> Communications of the ACM, </journal> <volume> vol. 39, </volume> <pages> pp. 76-83, </pages> <month> Apr </month> <year> 1996. </year>
Reference-contexts: In a larger context, this work can be viewed as extending the hierarchical approach to constructing modular networking software represented by such systems as the x-kernel [11] and Horus <ref> [12] </ref> to support finer grain modules and more flexible inter-module communication capabilities. 2 The goal of this paper is to describe the design of this configurable membership service and to relate some initial experience with a prototype implementation written in C++. <p> For example, the x-kernel [11] and Horus <ref> [12] </ref> support construction of configurable services, but the modules are relatively coarse-grain and can only interact hierarchically using a fixed interface. Adaptive [23] introduces an approach to building protocols that employs a collection of reusable building-block protocol mechanisms that can be composed automatically based on functional specifications.
Reference: [13] <author> M. Hiltunen and R. Schlichting, </author> <title> Properties of membership services, </title> <booktitle> in Proceedings of the 2nd International Symposium on Autonomous Decentralized Systems, </booktitle> <address> (Phoenix, AZ), </address> <pages> pp. 200-207, </pages> <month> Apr </month> <year> 1995. </year>
Reference-contexts: The failures considered are site crash failures and typical network failures such as lost messages. Given such a system, the properties of a membership service can be defined in terms of what membership messages it generates and when they are delivered to the application <ref> [13] </ref>. The key abstraction for defining and implementing such a service is an ordering graph, i.e., a graph in which the nodes are application and membership messages, and the edges are ordering constraints between the messages. <p> A number of these properties are defined formally in <ref> [13] </ref> and summarized below. 4 Accuracy and Liveness. Accuracy and liveness deal with detecting a change in the status of a group member, either from functioning to non-functioning (failure), or from non-functioning to functioning (recovery). <p> This micro-protocol is distinct from ExtendedVirtualSynchrony since the 23 predecessor sets of such messages are different in the sites in the two merging partitions. Other partition handling micro-protocols. In numerous membership services <ref> [3, 13, 5, 6, 14, 8] </ref>, it is simply assumed that partitions will not occur, or that only one partition will continue to operate. The OnePartition micro-protocol implements a simple strategy that approximates this behavior.
Reference: [14] <author> S. Mishra, L. Peterson, and R. Schlichting, </author> <title> Consul: A communication substrate for fault-tolerant distributed programs, </title> <journal> Distributed System Engineering, </journal> <volume> vol. 1, </volume> <pages> pp. 87-103, </pages> <month> Dec </month> <year> 1993. </year>
Reference-contexts: Specifically, the edges define the predecessors of a message, where the 3 predecessors of a message M are those messages that must be delivered to the application before M can be delivered. Several collections of protocols for building fault-tolerant systems are based on abstractions resembling ordering graphs, including Consul <ref> [14] </ref> and Transis [15]. group executing on multiple sites, is the top layer. The reliable communication and membership services add application and membership messages, respectively, to the ordering graph. <p> Different possibilities include allowing the decision to be made by only a single site (single site suspicion) [8, 7], requiring that all functioning sites agree (consensus) <ref> [14, 15] </ref>, or supporting some intermediate strategy based on voting (voted decision) [9]. Agreement. The agreement property states that if one site delivers a membership message to the application, all other functioning sites will eventually deliver the same message. <p> The various approaches for accomplishing this can be classified into three major categories: (1) broadcast based (e.g., <ref> [14, 15] </ref>), (2) coordinator based (e.g., [8]), and (3) token based (e.g., [19]). We selected the third since it allows property micro-protocols to be cleanly separated from the rest of the membership service implementation, thereby increasing configurability. <p> This micro-protocol is distinct from ExtendedVirtualSynchrony since the 23 predecessor sets of such messages are different in the sites in the two merging partitions. Other partition handling micro-protocols. In numerous membership services <ref> [3, 13, 5, 6, 14, 8] </ref>, it is simply assumed that partitions will not occur, or that only one partition will continue to operate. The OnePartition micro-protocol implements a simple strategy that approximates this behavior. <p> Membership services and protocols have been the subject of a large number of papers. Some of the work has been based on a synchronous system model, where bounds are placed on the network transmission time [26, 4, 5]. Other work assumes an asynchronous model similar to that used here <ref> [2, 14, 18, 8] </ref>. Unlike our configurable service, however, all these services guarantee only a single collection of properties, or at most, offer a small number of choices. Schemes based on logical rings or token passing are used by many multicast, membership, and system diagnosis protocols.
Reference: [15] <author> D. Dolev and D. Malki, </author> <title> The Transis approach to high availability cluster communication, </title> <journal> Communications of the ACM, </journal> <volume> vol. 39, </volume> <pages> pp. 64-70, </pages> <month> Apr </month> <year> 1996. </year>
Reference-contexts: Several collections of protocols for building fault-tolerant systems are based on abstractions resembling ordering graphs, including Consul [14] and Transis <ref> [15] </ref>. group executing on multiple sites, is the top layer. The reliable communication and membership services add application and membership messages, respectively, to the ordering graph. <p> Different possibilities include allowing the decision to be made by only a single site (single site suspicion) [8, 7], requiring that all functioning sites agree (consensus) <ref> [14, 15] </ref>, or supporting some intermediate strategy based on voting (voted decision) [9]. Agreement. The agreement property states that if one site delivers a membership message to the application, all other functioning sites will eventually deliver the same message. <p> The various approaches for accomplishing this can be classified into three major categories: (1) broadcast based (e.g., <ref> [14, 15] </ref>), (2) coordinator based (e.g., [8]), and (3) token based (e.g., [19]). We selected the third since it allows property micro-protocols to be cleanly separated from the rest of the membership service implementation, thereby increasing configurability.
Reference: [16] <author> M. Fischer, N. Lynch, and M. Paterson, </author> <title> Impossibility of distributed consensus with one faulty process, </title> <journal> Journal of the ACM, </journal> <volume> vol. 32, </volume> <pages> pp. 374-382, </pages> <month> Apr </month> <year> 1985. </year>
Reference-contexts: Similarly, a service is live with respect to failure or recovery if it is guaranteed to detect and report that type of change eventually. In an asynchronous system, it is impossible to have a membership service that is both live and accurate with respect to either failures or recoveries <ref> [16] </ref>. Liveness and accuracy can also be characterized in terms of properties of failure detectors for asynchronous systems [17]. Confidence. The confidence property is the degree of certainty in a suspected membership change. There are two aspects to confidence. <p> Also inserts the current incarnation number in outgoing messages. Note that using LiveFailureDetection together with AccurateDetection does not result in a membership service that is both live and accurate, but rather an incorrect configuration that violates the impossibility result in <ref> [16] </ref>. See section 5 for more on configuring services based on this approach. Our design supports two versions of the confidence property. The first is single site suspicion, where no confirmation is needed from other sites.
Reference: [17] <author> T. Chandra and S. Toueg, </author> <title> Unreliable failure detectors for reliable distributed systems, </title> <journal> Journal of the ACM, </journal> <volume> vol. 34, no. 1, </volume> <pages> pp. 225-267, </pages> <year> 1996. </year>
Reference-contexts: In an asynchronous system, it is impossible to have a membership service that is both live and accurate with respect to either failures or recoveries [16]. Liveness and accuracy can also be characterized in terms of properties of failure detectors for asynchronous systems <ref> [17] </ref>. Confidence. The confidence property is the degree of certainty in a suspected membership change. There are two aspects to confidence. The first is the degree of certainty in the local decision to suspect that another site has failed or recovered.
Reference: [18] <author> L. Moser, Y. Amir, P. Melliar-Smith, and D. Agarwal, </author> <title> Extended virtual synchrony, </title> <booktitle> in Proceedings of the 14th International Conference on Distributed Computing Systems, (Poznan, Poland), </booktitle> <pages> pp. 56-65, </pages> <month> Jun </month> <year> 1994. </year>
Reference-contexts: A partition is treated as a sequence of individual site failures, with separate membership messages delivered to the application for each site in other partitions (partition time). 2 This property is similar to the property of the same name defined in <ref> [18] </ref>, but does not include all aspects of the functionality defined in that paper. 6 * Collective notification. A single membership message reporting all site failures is delivered to the application (partition time). * Majority operation. <p> The shutdown is coordinated by adding a SHUTDOWN entry to the token in the minority partition. Finally, the ExtendedWithPartition micro-protocol implements extended virtual synchrony between application messages and membership messages reporting partition merges, similar to that defined in <ref> [18] </ref>. This micro-protocol is distinct from ExtendedVirtualSynchrony since the 23 predecessor sets of such messages are different in the sites in the two merging partitions. Other partition handling micro-protocols. <p> Membership services and protocols have been the subject of a large number of papers. Some of the work has been based on a synchronous system model, where bounds are placed on the network transmission time [26, 4, 5]. Other work assumes an asynchronous model similar to that used here <ref> [2, 14, 18, 8] </ref>. Unlike our configurable service, however, all these services guarantee only a single collection of properties, or at most, offer a small number of choices. Schemes based on logical rings or token passing are used by many multicast, membership, and system diagnosis protocols.
Reference: [19] <author> B. Rajagopalan and P. McKinley, </author> <title> A token-based protocol for reliable, ordered multicast communication, </title> <booktitle> in Proceedings of the 8th Symposium on Reliable Distributed Systems, </booktitle> <address> (Seattle, WA), </address> <pages> pp. 84-93, </pages> <month> Oct </month> <year> 1989. </year>
Reference-contexts: The various approaches for accomplishing this can be classified into three major categories: (1) broadcast based (e.g., [14, 15]), (2) coordinator based (e.g., [8]), and (3) token based (e.g., <ref> [19] </ref>). We selected the third since it allows property micro-protocols to be cleanly separated from the rest of the membership service implementation, thereby increasing configurability. <p> Schemes based on logical rings or token passing are used by many multicast, membership, and system diagnosis protocols. For example, token passing is used as a means of implementing reliable totally ordered multicast in the Reliable Broadcast Protocol [27], Token-Passing Multicast (TPM) protocol <ref> [19] </ref>, Totem [2], Pinwheel [26], and Reliable Multicast Protocol (RMP) [28]. In these protocols, the site possessing the token is either the only site that is allowed to send a message or the site that assigns a global ordering to messages sent by all sites.
Reference: [20] <author> H. Orman, E. M. III, S. O'Malley, and L. Peterson, </author> <title> A fast and general implementation of Mach IPC in a network, </title> <booktitle> in Proceedings of the 3rd Usenix Mach Conference, </booktitle> <address> (Sante Fe, NM), </address> <pages> pp. 75-88, </pages> <month> Apr </month> <year> 1993. </year>
Reference-contexts: Live detection is based on lack of response from a site, i.e., timeouts. Accurate detection, on the other hand, cannot be based on communication since the network is assumed to be asynchronous. As a result, our implementation, like that described in <ref> [20] </ref> for Mach, detects a site failure only when the failed site recovers and reestablishes communication. Similarly, accurate recovery detectionthe only kind possible in asynchronous systemsis implemented by the recovering site contacting other sites upon recovery as described in the previous section. The following micro-protocols implement these properties: * LiveFailureDetection.
Reference: [21] <author> M. Hiltunen, </author> <title> Configurable Distributed Fault-Tolerant Services. </title> <type> PhD thesis, </type> <institution> Dept of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <month> Jul </month> <year> 1996. </year>
Reference-contexts: The algorithms used to implement these properties are similar to that used in AgreedLast, with the differences being the type of information collected on the first round, how this information is used, and whether message delivery to the application can continue during the process. Details can be found in <ref> [21] </ref>. 4.5 Partition handling micro-protocols As noted in section 2.2, the policies that dictate how a system operates in the presence of partitions can be divided into three phases: partition time, partitioned operation, and partition join. The micro-protocols relevant to each phase are described below. Partition Time. <p> Thus, in our design, this means that TotalOrder depends on MembershipDriver. A complete evaluation of dependencies between properties related to membership can be found in <ref> [21] </ref>. Another source of dependencies comes from the way in which properties are implemented, rather than any inherent relation between them.
Reference: [22] <author> N. Bhatti and R. Schlichting, </author> <title> A system for constructing configurable high-level protocols, </title> <booktitle> in Proceedings of SIGCOMM '95, </booktitle> <address> (Cambridge, MA), </address> <pages> pp. 138-150, </pages> <month> Aug </month> <year> 1995. </year> <month> 36 </month>
Reference-contexts: A subset of the micro-protocols has also been ported to an x-kernel based system called Coyote that implements the event-driven model on a cluster of workstations <ref> [22] </ref>. 6.2 Software organization The overall software organization resembles figure 1, with C++ classes being divided into three major portions that implement the application, network, and communication layer, respectively. The application is simulated by class User, which generates application messages.
Reference: [23] <author> D. Schmidt, D. Box, and T. Suda, </author> <title> ADAPTIVE: A dynamically assembled protocol transformation, integration, and evaluation environment, </title> <journal> Concurrency: Practice and Experience, </journal> <volume> vol. 5, </volume> <pages> pp. 269-286, </pages> <month> Jun </month> <year> 1993. </year>
Reference-contexts: For example, the x-kernel [11] and Horus [12] support construction of configurable services, but the modules are relatively coarse-grain and can only interact hierarchically using a fixed interface. Adaptive <ref> [23] </ref> introduces an approach to building protocols that employs a collection of reusable building-block protocol mechanisms that can be composed automatically based on functional specifications. The objects are tightly coupled in the sense that interactions between objects are fixed a priori.
Reference: [24] <author> G. Agha and D. Sturman, </author> <title> A methodology for adapting to patterns of faults, in Foundations of Dependable Computing: Models and Frameworks for Dependable Systems (G. </title> <editor> Koob and C. Lau, </editor> <booktitle> eds.), </booktitle> <pages> pp. 23-60, </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1994. </year>
Reference-contexts: The objects are tightly coupled in the sense that interactions between objects are fixed a priori. Finally, a number of object-based approaches have been proposed for building highly dependable software for distributed systems <ref> [24, 25] </ref>. Such approaches typically exploit the reflection capabilities of object-oriented systems to customize the behavior of the software for a given situation. Membership services and protocols have been the subject of a large number of papers.
Reference: [25] <author> J.-C. Fabre, V. Nicomette, T. Perennou, R. Stroud, and Z. Wu, </author> <title> Implementing fault tolerant applications using reflective object-oriented programming, </title> <booktitle> in Proceedings of the 25th International Symposium on Fault-Tolerant Computing, </booktitle> <address> (Pasadena, CA), </address> <pages> pp. 489-498, </pages> <month> Jun </month> <year> 1995. </year>
Reference-contexts: The objects are tightly coupled in the sense that interactions between objects are fixed a priori. Finally, a number of object-based approaches have been proposed for building highly dependable software for distributed systems <ref> [24, 25] </ref>. Such approaches typically exploit the reflection capabilities of object-oriented systems to customize the behavior of the software for a given situation. Membership services and protocols have been the subject of a large number of papers.
Reference: [26] <author> F. Cristian, S. Mishra, and G. Alvarez, </author> <title> High-performance asynchronous atomic broadcast, </title> <journal> Distributed Systems Engineering, </journal> <volume> vol. 4, </volume> <pages> pp. 109-128, </pages> <month> June </month> <year> 1997. </year>
Reference-contexts: Membership services and protocols have been the subject of a large number of papers. Some of the work has been based on a synchronous system model, where bounds are placed on the network transmission time <ref> [26, 4, 5] </ref>. Other work assumes an asynchronous model similar to that used here [2, 14, 18, 8]. Unlike our configurable service, however, all these services guarantee only a single collection of properties, or at most, offer a small number of choices. <p> Schemes based on logical rings or token passing are used by many multicast, membership, and system diagnosis protocols. For example, token passing is used as a means of implementing reliable totally ordered multicast in the Reliable Broadcast Protocol [27], Token-Passing Multicast (TPM) protocol [19], Totem [2], Pinwheel <ref> [26] </ref>, and Reliable Multicast Protocol (RMP) [28]. In these protocols, the site possessing the token is either the only site that is allowed to send a message or the site that assigns a global ordering to messages sent by all sites.
Reference: [27] <author> J. Chang and N. Maxemchuk, </author> <title> Reliable broadcast protocols, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 2, </volume> <pages> pp. 251-273, </pages> <month> Aug </month> <year> 1984. </year>
Reference-contexts: Schemes based on logical rings or token passing are used by many multicast, membership, and system diagnosis protocols. For example, token passing is used as a means of implementing reliable totally ordered multicast in the Reliable Broadcast Protocol <ref> [27] </ref>, Token-Passing Multicast (TPM) protocol [19], Totem [2], Pinwheel [26], and Reliable Multicast Protocol (RMP) [28]. In these protocols, the site possessing the token is either the only site that is allowed to send a message or the site that assigns a global ordering to messages sent by all sites.
Reference: [28] <author> B. Whetten, T. Montgomery, and S. Kaplan, </author> <title> A high performance totally ordered multicast protocol, </title> <booktitle> in Theory and Practice in Distributed Systems (Lecture Notes in Computer Science 938) (K. </booktitle> <editor> Birman, F. Mattern, and A. Schiper, </editor> <booktitle> eds.), </booktitle> <pages> pp. 33-57, </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: For example, token passing is used as a means of implementing reliable totally ordered multicast in the Reliable Broadcast Protocol [27], Token-Passing Multicast (TPM) protocol [19], Totem [2], Pinwheel [26], and Reliable Multicast Protocol (RMP) <ref> [28] </ref>. In these protocols, the site possessing the token is either the only site that is allowed to send a message or the site that assigns a global ordering to messages sent by all sites.
Reference: [29] <author> A. Schiper and A. Ricciardi, </author> <title> Virtually-synchronous communication based on a weak failure suspector, </title> <booktitle> in Proceedings of the 23rd Conference on Fault-Tolerant Computing, (Toulouse, France), </booktitle> <pages> pp. 534-543, </pages> <month> Jun </month> <year> 1993. </year> <month> 37 </month>
Reference-contexts: In [7], a family of three membership protocols are described, where each protocol provides different guarantees. Although not configurable in the same sense as ours, the motivation 4 Totem uses a commit token for a similar purpose [2]. 33 that different applications need different guaranteesis similar. Finally, in <ref> [29] </ref>, membership services are divided into three components: a Failure Suspector, a Multicast Component, and a View Component. The Failure Suspector implements the equivalent of the change detection property in our approach, while the Multicast Component provides reliable communication with virtually synchronous message ordering.
References-found: 29

