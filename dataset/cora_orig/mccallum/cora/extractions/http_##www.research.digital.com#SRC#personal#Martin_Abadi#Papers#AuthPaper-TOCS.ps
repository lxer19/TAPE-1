URL: http://www.research.digital.com/SRC/personal/Martin_Abadi/Papers/AuthPaper-TOCS.ps
Refering-URL: http://scotch.systemsz.cs.yale.edu/aplar/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Authentication in the Taos Operating System  
Author: EDWARD WOBBER, MART IN ABADI, MICHAEL BURROWS, and BUTLER LAMPSON 
Keyword: Categories and Subject Descriptors: C.2.4 [Computer-Communication Networks]: Distributed Systems; D.4.6 [Operating Systems]: Security and Protection|access control; authentication General Terms: Security, Theory Additional Key Words and Phrases: cryptography, mathematical logic  
Affiliation: Digital Equipment Corporation  
Abstract: We describe a design for security in a distributed system and its implementation. In our design, applications gain access to security services through a narrow interface. This interface provides a notion of identity that includes simple principals, groups, roles, and delegations. A new operating system component manages principals, credentials, and secure channels. It checks credentials according to the formal rules of a logic of authentication. Our implementation is efficient enough to support a substantial user community. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Abadi, M., Burrows, M., Kaufman, C., and Lampson, B. </author> <title> Authentication and delegation with smart-cards. </title> <booktitle> Science of Computer Programming 21, </booktitle> <volume> 2, </volume> <month> Oct. </month> <year> 1993, </year> <pages> 93-113. </pages>
Reference-contexts: In Taos, it is present just long enough to sign the login certificate. This certificate is of long duration, on the order of days. More sophisticated login protocols that take advantage of smart-cards can produce equivalent login certificates <ref> [1] </ref>. The node key and the session key are combined in a session certificate, which represents a handoff from the session key to the node key. <p> We keep analogous strings for nodes. Storing user secrets in this way would not be necessary if users carried public key smart-cards <ref> [1, 14] </ref>. Name certificates. These describe the mapping from keys to names. These certificates are signed by a CA trusted for this purpose, much like CCITT X.509 certificates [4].
Reference: 2. <author> Abadi, M., Burrows, M., and Lampson, B., and Plotkin, G. </author> <title> A calculus for access control in distributed systems. </title> <journal> ACM Trans. Prog. Lang. and Sys. </journal> <volume> 15, 4, </volume> <month> Oct. </month> <year> 1993, </year> <pages> 706-734. </pages>
Reference-contexts: 1. INTRODUCTION We describe a design for security in a distributed system and a particular implementation of this design. We present both the external interface and the major internal interfaces of our implementation. A formal logic <ref> [2, 9] </ref> guided our design. We explain the correspondence between implementation and logic, in particular how an authentication credential represents a formula and how an authentication is a proof. We discuss our experience and some performance results; the implementation is efficient enough to support a substantial user community. <p> BACKGROUND In this section we explain our treatment of encryption and time, sketch the rules of our authentication logic, and give an extended example of its use. Other papers treat these matters in detail <ref> [2, 9] </ref>. We use shared key encryption to secure short-term node-to-node channels. All other encryption is public key [15] and is done only for integrity, not for secrecy. <p> After booting, WS gets the boot certificate and K 1 ws , but does not know K 1 vax4 . 2 This axiom is not included in [9], but is suggested in <ref> [2] </ref>; we adopt it for simplicity. Authentication in the Taos Operating System 5 We treat login as a specialized form of delegation. <p> While this cost might grow with the number and geographic distribution of certified users, it can be offset by caching, hierarchical certification, and database replication. Our design can accommodate fast revocation of name certificates along the lines discussed elsewhere <ref> [2, 9] </ref>, but we have not implemented this feature. There is an Authentication in the Taos Operating System 25 inherent tradeoff between timely revocation and the effectiveness of caching. This tradeoff becomes more significant as the scale of the system increases. 6.
Reference: 3. <author> Birrell, A., Hisgen, A., Jerian, C., Mann, T., and Swart, G. </author> <title> The Echo distributed file system. </title> <type> Report 111, </type> <institution> Systems Research Center, Digital Equipment Corp., </institution> <month> Aug. </month> <year> 1993. </year> <title> Authentication in the Taos Operating System 27 </title>
Reference-contexts: Since certificates are statements signed off-line, they can be believed even if retrieved from untrusted storage. In Taos, we use a replicated, highly available name service <ref> [3] </ref> to store name certificates. Certificates are indexed by name in this 4 We could easily extend our system to incorporate a hierarchy of CAs. <p> In this section we discuss our experience, and in particular the performance of our system. 5.1 Authentication for the Echo file system The most commonly used authenticated application was Echo <ref> [3] </ref>, a distributed file system used extensively within Taos. The Echo environment exercised all the Taos security features described in this paper except general delegation. In addition to authenticating normal file system operations, Echo allowed the use of roles to control access to protected parts of the file system name-space.
Reference: 4. <author> CCITT. </author> <title> Information processing systems Open systems interconnection The directory authentication framework. CCITT 1988 Recommendation X.509. </title>
Reference-contexts: Storing user secrets in this way would not be necessary if users carried public key smart-cards [1, 14]. Name certificates. These describe the mapping from keys to names. These certificates are signed by a CA trusted for this purpose, much like CCITT X.509 certificates <ref> [4] </ref>. The logical form of a certificate that maps K u to U is: K ca says (K u ) U ) A simple extension of the grammar described in the previous section is used to express these statements.
Reference: 5. <author> Eberle, H. and Thacker, C. </author> <title> A 1 Gbit/second GaAs DES chip. </title> <booktitle> Proc. IEEE Custom Integrated Circuit Conf., </booktitle> <year> 1992, </year> <month> 19.7.1-19.7.4. </month>
Reference-contexts: Herbison [7] discusses the use of encrypting network controllers to build efficient secure channels. Our system design is intended to operate best with encryption-capable controllers. DES [11] hardware for such controllers has been shown to operate at speeds of 1 Gbit/sec <ref> [5] </ref>, so performance should not be a problem. In our implementation, software DES is used to sign channel certificates (see Section 4.3.4), but requests are made without signature to avoid the overhead of software encryption. 4.1.2 Process-to-process channels.
Reference: 6. <author> Gasser, M., Goldstein, A., Kaufman, C., and Lampson, B. </author> <title> The Digital distributed system security architecture. </title> <booktitle> Proc. 12th National Computer Security Conference, </booktitle> <address> NIST/NCSC, </address> <year> 1989, </year> <pages> 305-319. </pages>
Reference-contexts: E-mail: wobber@src.dec.com. 2 E. Wobber et al. Although Taos has been a convenient test vehicle, our only real dependence on it was that we could adapt it to our needs. We use the access control model of security [10] extended with compound principals <ref> [6] </ref>. In this model there are objects (files, printers, etc.), requests, and principals (users, machines, etc.) that utter requests. Each object has a guard or reference monitor that examines each request and decides whether or not to grant it.
Reference: 7. <author> Herbison, B. </author> <title> Low cost outboard cryptographic support for SILS and SP4. </title> <booktitle> Proc. 13th National Computer Security Conference, </booktitle> <address> NIST/NCSC, </address> <year> 1990, </year> <pages> 286-295. </pages>
Reference-contexts: When B reexecutes the key-establishment protocol, the resulting channel from A still speaks for K a . Hence, rekeying does not invalidate authentication state based on node keys. Taos does not implement hardware secure channels. The key exchange mechanism it implements is, however, suitable for constructing them. Herbison <ref> [7] </ref> discusses the use of encrypting network controllers to build efficient secure channels. Our system design is intended to operate best with encryption-capable controllers. DES [11] hardware for such controllers has been shown to operate at speeds of 1 Gbit/sec [5], so performance should not be a problem.
Reference: 8. <author> Knuth, D. </author> <booktitle> The Art of Computer Programming. </booktitle> <volume> Volume 2, </volume> <editor> second ed., </editor> <publisher> Addison-Wesley, </publisher> <year> 1981. </year>
Reference-contexts: We use public-domain implementations of MD4 and DES (in C); much faster ones are possible [9, Section 4]. Efficient RSA key generation is also important to our implementation. Using three separate threads running a randomized prime generation algorithm <ref> [8, p. 388] </ref>, we can produce a new RSA key in 10-15 seconds. 5 Only two primes are needed for generating a key, but there is a large variance in the time required for generating a prime. Using three threads significantly reduces the average time required for generating two primes.
Reference: 9. <author> Lampson, B., Abadi, M., Burrows, M., and Wobber, E. </author> <title> Authentication in distributed systems: </title> <journal> Theory and practice. ACM Trans. Comp. Sys. </journal> <volume> 10, 4, </volume> <month> Nov. </month> <year> 1992, </year> <pages> 265-310. </pages>
Reference-contexts: 1. INTRODUCTION We describe a design for security in a distributed system and a particular implementation of this design. We present both the external interface and the major internal interfaces of our implementation. A formal logic <ref> [2, 9] </ref> guided our design. We explain the correspondence between implementation and logic, in particular how an authentication credential represents a formula and how an authentication is a proof. We discuss our experience and some performance results; the implementation is efficient enough to support a substantial user community. <p> BACKGROUND In this section we explain our treatment of encryption and time, sketch the rules of our authentication logic, and give an extended example of its use. Other papers treat these matters in detail <ref> [2, 9] </ref>. We use shared key encryption to secure short-term node-to-node channels. All other encryption is public key [15] and is done only for integrity, not for secrecy. <p> A group can be thought of as the disjunction of its members. | Principals in roles. We write A as R for A in role R (for example, Bob as Admin for Bob acting as an administrator). A principal can adopt a role in order to reduce its rights <ref> [9, Section 6] </ref>. That is, A ) (A as R). 1 Although our logic includes propositional logic, in this paper we do not describe any formal notations or rules for propositional connectives. Instead, we use English keywords, like "if" and "then", and informal reasoning. 4 E. <p> After booting, WS gets the boot certificate and K 1 ws , but does not know K 1 vax4 . 2 This axiom is not included in <ref> [9] </ref>, but is suggested in [2]; we adopt it for simplicity. Authentication in the Taos Operating System 5 We treat login as a specialized form of delegation. <p> That is, FS knows that Vax4 running OS requests RQ on behalf of Bob. The access control algorithm given in <ref> [9, Section 9] </ref> can now determine whether the request should be granted. The remainder of the paper describes how this authentication logic is implemented in Taos. 6 E. Wobber et al. 3. AN API FOR AUTHENTICATION The logic is rather complex to be presented directly through a programming interface. <p> Given two nodes A and B, it is easy to establish a shared-key channel C between them. We use the following protocol, which is described in more detail in <ref> [9, Section 4] </ref>. In brief, A invents a random number J a and sends it to B encrypted under the public part of B's key K b . Similarly, B sends J b encrypted under A's key K a . Note that this is encryption for secrecy rather than integrity. <p> Certificates are indexed by name in this 4 We could easily extend our system to incorporate a hierarchy of CAs. For a system that implements a CA hierarchy, some indication of the local CA's location in the hierarchy would be required as well <ref> [9, Section 5] </ref>. Authentication in the Taos Operating System 21 store. The replication makes a denial-of-service attack more difficult. We may now continue the example of Section 4.3.1. <p> With only a single processor, it takes 472 ms to compute a RSA signature; this compares with 68 ms on a DECstation 5000, which runs at 20 MIPS. We use public-domain implementations of MD4 and DES (in C); much faster ones are possible <ref> [9, Section 4] </ref>. Efficient RSA key generation is also important to our implementation. <p> For example, the meanings of common embedded credentials (such as boot certificates) might be cached. 5.4 Scale Although our implementation was not used on a large scale, the technique of off-line certification with minimal reliance on on-line services is well suited to large naming hierarchies <ref> [9, Section 5.2] </ref>. The performance of our basic security primitives is dependent on system scale only in the cost of fetching static certificates such as those for names and group memberships. In our implementation, this cost is only a small fraction of the total overhead. <p> While this cost might grow with the number and geographic distribution of certified users, it can be offset by caching, hierarchical certification, and database replication. Our design can accommodate fast revocation of name certificates along the lines discussed elsewhere <ref> [2, 9] </ref>, but we have not implemented this feature. There is an Authentication in the Taos Operating System 25 inherent tradeoff between timely revocation and the effectiveness of caching. This tradeoff becomes more significant as the scale of the system increases. 6.
Reference: 10. <author> Lampson, B. </author> <title> Protection. </title> <journal> ACM Operating Systems Review 8, </journal> <volume> 1, </volume> <month> Jan. </month> <year> 1974, </year> <pages> 18-24. </pages>
Reference-contexts: E-mail: wobber@src.dec.com. 2 E. Wobber et al. Although Taos has been a convenient test vehicle, our only real dependence on it was that we could adapt it to our needs. We use the access control model of security <ref> [10] </ref> extended with compound principals [6]. In this model there are objects (files, printers, etc.), requests, and principals (users, machines, etc.) that utter requests. Each object has a guard or reference monitor that examines each request and decides whether or not to grant it.
Reference: 11. <author> National Bureau of Standards. </author> <title> Data Encryption Standard. </title> <publisher> FIPS Pub. </publisher> <address> 46, </address> <month> Jan. </month> <year> 1977. </year>
Reference-contexts: Taos does not implement hardware secure channels. The key exchange mechanism it implements is, however, suitable for constructing them. Herbison [7] discusses the use of encrypting network controllers to build efficient secure channels. Our system design is intended to operate best with encryption-capable controllers. DES <ref> [11] </ref> hardware for such controllers has been shown to operate at speeds of 1 Gbit/sec [5], so performance should not be a problem.
Reference: 12. <author> Needham, R. </author> <title> Cryptography and Secure Channels. Distributed Systems, </title> <editor> 2nd Ed., S. Mul-lender (editor), </editor> <publisher> ACM Press, </publisher> <year> 1993, </year> <pages> 231-241. </pages>
Reference-contexts: Our design does not mandate any one technique for implementing secure channels; such techniques are well documented <ref> [12] </ref>. 4.1.1 Node-to-node channels. Given two nodes A and B, it is easy to establish a shared-key channel C between them. We use the following protocol, which is described in more detail in [9, Section 4].
Reference: 13. <institution> Open Software Foundation Introduction to OSF DCE, Revision 1.0, </institution> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: We do not address either denial of service or the kind of non-disclosure security policies that are based on an information flow model. We touch only briefly on the problems of compatibility with other security mechanisms, such as Kerberos [19] and OSF DCE Security <ref> [13] </ref>. 2. BACKGROUND In this section we explain our treatment of encryption and time, sketch the rules of our authentication logic, and give an extended example of its use. Other papers treat these matters in detail [2, 9]. We use shared key encryption to secure short-term node-to-node channels.
Reference: 14. <author> Quisquater, J.-J., de Waleffe, D., and Bournas, J.-P. Corsair: </author> <title> a chip card with fast RSA capability. Smart Card 2000, </title> <editor> D. Chaum (editor), </editor> <publisher> Elsevier, </publisher> <year> 1991, </year> <pages> 199-206. </pages>
Reference-contexts: We keep analogous strings for nodes. Storing user secrets in this way would not be necessary if users carried public key smart-cards <ref> [1, 14] </ref>. Name certificates. These describe the mapping from keys to names. These certificates are signed by a CA trusted for this purpose, much like CCITT X.509 certificates [4].
Reference: 15. <author> Rivest, R., Shamir, A., and Adleman, L. </author> <title> A method for obtaining digital signatures and public-key cryptosystems. </title> <journal> Comm. ACM 21, </journal> <volume> 2, </volume> <month> Feb. </month> <year> 1978, </year> <pages> 120-126. </pages>
Reference-contexts: Other papers treat these matters in detail [2, 9]. We use shared key encryption to secure short-term node-to-node channels. All other encryption is public key <ref> [15] </ref> and is done only for integrity, not for secrecy. Authentication in the Taos Operating System 3 We write K and K 1 for the public and secret keys of a key pair. <p> The signature in a certificate includes the interval of time for which it is valid plus an unforgeable value identifying the signer. This value is a MD4 digest of the certificate, encrypted by a RSA secret key <ref> [15] </ref>. The digest is computed over the entire certificate, excluding embedded signatures, by a one-way function that reduces its input to a size small enough to sign conveniently; the function is one-way in the sense that it is computationally hard to find a different input with the same digest.
Reference: 16. <author> Rivest, R. </author> <title> The MD4 message digest algorithm. </title> <booktitle> Advances in Cryptology: Crypto '90, </booktitle> <publisher> Springer-Verlag LNCS, </publisher> <year> 1991, </year> <pages> 303-311. </pages>
Reference-contexts: A message digest function is applied to node keys in order to produce small values for the nk field. We use the MD4 message digest function <ref> [16] </ref>. In Taos we exploit the fact that most communication employs a transport protocol under our control. We identify each process with a 32-bit integer process tag (PTag). 3 The operating system ensures that all transmissions are tagged with valid PTags.
Reference: 17. <author> Schroeder, M. and Burrows, M. </author> <title> Performance of Firefly RPC. </title> <journal> ACM Trans. Comp. Sys. </journal> <volume> 8, 1, </volume> <month> Feb. </month> <year> 1990, </year> <pages> 1-17. </pages>
Reference-contexts: The numbers assume an existing node-to-node secure channel and a loaded name certificate cache. We show how time is divided between cryptographic functions and other parts of the system. We estimate that RPC with non-trivial arguments takes on the order of 5 ms <ref> [17] </ref>. The line labelled "S-expr" indicates the cost of parsing and writing S-expressions. This cost is about one-third of the total, but it could easily be reduced.
Reference: 18. <author> Shand, M. and Vuillemin, J. </author> <title> Fast implementations of RSA cryptography. </title> <booktitle> 11th Symposium on Computer Arithmetic, IEEE Computer Society, </booktitle> <year> 1993. </year>
Reference-contexts: We have not tried to implement this. 5.3 Performance The performance of our system depends on the costs of the cryptographic operations: RSA sign RSA verify DES MD4 248 ms 16 ms 15 ms 6 ms/kbyte Our RSA implementation <ref> [18] </ref> is carefully coded in C and assembler. We use a 512-bit modulus and a public key exponent of 3. The Firefly has 4 CVax processors, each running at about 2.5 MIPS. Our multiprocessor implementation of RSA signatures gains nearly a factor of two in speed.
Reference: 19. <author> Steiner, J., Neuman, C., Schiller, J. </author> <title> Kerberos: An authentication service for open network systems. </title> <booktitle> Proc. Usenix Winter Conference, </booktitle> <year> 1988, </year> <pages> 191-202. </pages>
Reference-contexts: We do not address either denial of service or the kind of non-disclosure security policies that are based on an information flow model. We touch only briefly on the problems of compatibility with other security mechanisms, such as Kerberos <ref> [19] </ref> and OSF DCE Security [13]. 2. BACKGROUND In this section we explain our treatment of encryption and time, sketch the rules of our authentication logic, and give an extended example of its use. Other papers treat these matters in detail [2, 9].
Reference: 20. <author> Thacker, C., Stewart, L., and Satterthwaite, E. Firefly: </author> <title> A multiprocessor workstation. </title> <journal> IEEE Trans. Computers 37, </journal> <volume> 8, </volume> <month> Aug. </month> <year> 1988, </year> <pages> 909-920. </pages> <note> Received June 1993; revised September 1993; accepted November 1993. </note>
Reference-contexts: The setting for our implementation is a distributed system where each node is a Firefly shared-memory multiprocessor running the Taos operating system <ref> [20] </ref>. Taos is completely multi-threaded, yet also implements a protected address-space model close enough to that of Unix that it can run most Unix binaries. Remote procedure call is the primary means of interprocess communication.
References-found: 20

