URL: http://www.cs.virginia.edu/~son/publications/tc95.ps
Refering-URL: http://www.cs.virginia.edu/~son/publications.html
Root-URL: http://www.cs.virginia.edu
Title: Assigning Real-Time Tasks to Homogeneous Multiprocessor Systems  
Author: Almut Burchard Jorg Liebeherr flfl Yingfeng Oh flfl Sang H. Son flfl 
Keyword: Key Words: Hard Real-Time Systems, Multiprocessor Systems, Rate-Monotonic Scheduling, Periodic Tasks, Task Assignment Scheme.  
Date: January 6, 1994  
Address: Atlanta, GA 30332  Charlottesville, VA 22903  
Affiliation: School of Mathematics Georgia Institute of Technology  flfl Computer Science Department University of Virginia  
Abstract: Optimal scheduling of real-time tasks on multiprocessor systems is known to be computationally intractable for large task sets. Any practical scheduling algorithm for assigning real-time tasks to a multiprocessor system presents a trade-off between its computational complexity and its performance. The performance of a scheduling algorithm is measured in terms of the additional number of processors required to arrive at a schedule without deadline violations as compared to an optimal algorithm. In this study, new schedulability conditions are presented for homogeneous multiprocessor systems where individual processors execute the rate-monotonic scheduling algorithm. The conditions are used to develop new strategies for assigning real-time tasks to processors. The performance of the new strategies is shown to be significantly better than suggested by the existing literature. Under the (realistic) assumption that the load of each real-time task is small compared to the processing speed of each processor, it is shown that all processors can be almost fully utilized. Task assignment strategies are proposed for scenarios where the task set is known a priori (off-line schemes), and where the real-time task set can change dynamically (on-line schemes). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Davari and S. K. Dhall. </author> <title> An On Line Algorithm for Real-Time Allocation. </title> <booktitle> In 19th Annual Hawaii International Conference on System Sciences, </booktitle> <pages> pages 194-200, </pages> <year> 1986. </year>
Reference-contexts: In this study, we are concerned with task assignment schemes for homogeneous multiprocessor systems where each processor executes the RM scheduling algorithm. This problem has been addressed in a number of studies <ref> [1, 2, 4, 9] </ref>. <p> RMFF first tries to accommodate a task in a processor marked as full before assigning it to the current processor. The First-Fit Decreasing-Utilization Factor (FFDUF) method is a variation of the first-fit heuristic scheme. Here, tasks are sorted in the order of their load factor <ref> [1] </ref>. In [9], a best-fit bin-packing heuristic is used as the basis for the Rate-Monotonic Best-Fit (RMBF) scheme. Similarly to RMFF, RMBF attempts to assign tasks to processors that have been marked as full. However, in RMBF, the full processors are inspected in a specific order. <p> the level of sophistication of the bin-packing heuristic, we focus on developing tighter schedulability conditions that allow to assign more tasks to each 4 Asymptotic Scheme Upper Bound: Complexity Type lim N=N opt RMNF [4] 2.67 O (K log K) off-line RMFF [4] 2.33 O (K log K) off-line FFDUF <ref> [1] </ref> 2 O (K log K) off-line RMBF [9] 2.33 O (K log K) off-line Next-Fit-M [2] 2.28+O (1=M ) O (K) on-line (a) Existing Task Assignment Schemes. <p> The second scheme, referred to as Rate-Monotonic General-Task or RMGT scheme, applies to general task sets. Previously proposed assignment schemes only consider the load factors of the tasks <ref> [1, 2, 4, 9] </ref>. Our schemes gain superiority by additionally taking into account the task periods. Before we present the schemes, let us review the maximum performance that can be achieved with a task assignment scheme using information on the load factors only.
Reference: [2] <author> S. Davari and S. K. Dhall. </author> <title> An On Line Algorithm for Real-Time Allocation. </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 194-200, </pages> <year> 1986. </year>
Reference-contexts: In this study, we are concerned with task assignment schemes for homogeneous multiprocessor systems where each processor executes the RM scheduling algorithm. This problem has been addressed in a number of studies <ref> [1, 2, 4, 9] </ref>. <p> On-line task assignment schemes can be implemented with lower computational complexity than off-line schemes, but may require more processors for a feasible schedule. An on-line task assignment scheme based on the next-fit bin-packing heuristics and referred to as Next-Fit-M is described in <ref> [2] </ref>. In Next-Fit-M, M is a parameter denoting the maximal number of processors which is considered for assigning a new task. <p> allow to assign more tasks to each 4 Asymptotic Scheme Upper Bound: Complexity Type lim N=N opt RMNF [4] 2.67 O (K log K) off-line RMFF [4] 2.33 O (K log K) off-line FFDUF [1] 2 O (K log K) off-line RMBF [9] 2.33 O (K log K) off-line Next-Fit-M <ref> [2] </ref> 2.28+O (1=M ) O (K) on-line (a) Existing Task Assignment Schemes. RMST 1=(1 ff) O (K log K) off-line RMGT 1.75 O (K log K) off-line RMGT/M 1=(1 ff) + O (1=M ) O (K) on-line (b) Proposed Task Assignment Schemes. Table 1: Comparison of Task Assignment Schemes. processor. <p> The second scheme, referred to as Rate-Monotonic General-Task or RMGT scheme, applies to general task sets. Previously proposed assignment schemes only consider the load factors of the tasks <ref> [1, 2, 4, 9] </ref>. Our schemes gain superiority by additionally taking into account the task periods. Before we present the schemes, let us review the maximum performance that can be achieved with a task assignment scheme using information on the load factors only.
Reference: [3] <author> S. K. Dhall. </author> <title> Scheduling Periodic-Time-Critical Jobs on Single Processor and Multiprocessor Computing Systems. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1977. </year>
Reference-contexts: All existing task assignment schemes are based on the sufficient schedulability conditions for uniprocessor systems derived in [8] and variants of this condition <ref> [3] </ref>. Thus, the existing assignment schemes differ mainly in the choice of the bin-packing heuristic. In [4], two heuristic assignment schemes are proposed, referred to as Rate-Monotonic Next-Fit (RMNF) and Rate-Monotonic First-Fit (RMFF). The schemes are based on the next-fit and first-fit bin-packing heuristic, respectively. <p> Both results coincide for the special case K = 2. A result similar to our Theorem 2 was conjectured in [4], but not proven. A partial proof, yet incomplete and needing additional assumptions was given in <ref> [3] </ref>. 3.1 Rate-Monotonic Scheduling in Uniprocessor Systems The schedulability condition presented in the following theorem takes advantage of a special property of the RM scheduling algorithm. We show that we can increase the processor utilization if all periods in a task set have values that are close to each other.
Reference: [4] <author> S. K. Dhall and C. L. Liu. </author> <title> On a real-time scheduling problem. </title> <journal> Operations Research, </journal> <volume> 26(1) </volume> <pages> 127-140, </pages> <month> January/February </month> <year> 1978. </year>
Reference-contexts: In this study, we are concerned with task assignment schemes for homogeneous multiprocessor systems where each processor executes the RM scheduling algorithm. This problem has been addressed in a number of studies <ref> [1, 2, 4, 9] </ref>. <p> All existing task assignment schemes are based on the sufficient schedulability conditions for uniprocessor systems derived in [8] and variants of this condition [3]. Thus, the existing assignment schemes differ mainly in the choice of the bin-packing heuristic. In <ref> [4] </ref>, two heuristic assignment schemes are proposed, referred to as Rate-Monotonic Next-Fit (RMNF) and Rate-Monotonic First-Fit (RMFF). The schemes are based on the next-fit and first-fit bin-packing heuristic, respectively. In both schemes, tasks are sorted in decreasing order of their periods before the assignment is started. <p> In [9], a best-fit bin-packing heuristic is used as the basis for the Rate-Monotonic Best-Fit (RMBF) scheme. Similarly to RMFF, RMBF attempts to assign tasks to processors that have been marked as full. However, in RMBF, the full processors are inspected in a specific order. As in <ref> [4] </ref>, tasks are assumed to be sorted by their period. Since the above schemes require that the entire task set is known before starting the task assignment they are referred to as off-line schemes. <p> Rather than increasing the level of sophistication of the bin-packing heuristic, we focus on developing tighter schedulability conditions that allow to assign more tasks to each 4 Asymptotic Scheme Upper Bound: Complexity Type lim N=N opt RMNF <ref> [4] </ref> 2.67 O (K log K) off-line RMFF [4] 2.33 O (K log K) off-line FFDUF [1] 2 O (K log K) off-line RMBF [9] 2.33 O (K log K) off-line Next-Fit-M [2] 2.28+O (1=M ) O (K) on-line (a) Existing Task Assignment Schemes. <p> Rather than increasing the level of sophistication of the bin-packing heuristic, we focus on developing tighter schedulability conditions that allow to assign more tasks to each 4 Asymptotic Scheme Upper Bound: Complexity Type lim N=N opt RMNF <ref> [4] </ref> 2.67 O (K log K) off-line RMFF [4] 2.33 O (K log K) off-line FFDUF [1] 2 O (K log K) off-line RMBF [9] 2.33 O (K log K) off-line Next-Fit-M [2] 2.28+O (1=M ) O (K) on-line (a) Existing Task Assignment Schemes. <p> In fact, Theorem 2 can be interpreted as as a dual result to the schedulability conditions given in [8] for multiprocessor system. Both results coincide for the special case K = 2. A result similar to our Theorem 2 was conjectured in <ref> [4] </ref>, but not proven. A partial proof, yet incomplete and needing additional assumptions was given in [3]. 3.1 Rate-Monotonic Scheduling in Uniprocessor Systems The schedulability condition presented in the following theorem takes advantage of a special property of the RM scheduling algorithm. <p> Lemma 2 implies that it is not necessary to assume that a task set is ordered by periods in order to apply the schedulability conditions in <ref> [4, 9] </ref>, a fact overlooked in both references. Lemma 2 Given a task set t 1 ; t 2 ; : : :; t K , and a task t = (C; T ) with T T i for i = 1; : : :; K. <p> The second scheme, referred to as Rate-Monotonic General-Task or RMGT scheme, applies to general task sets. Previously proposed assignment schemes only consider the load factors of the tasks <ref> [1, 2, 4, 9] </ref>. Our schemes gain superiority by additionally taking into account the task periods. Before we present the schemes, let us review the maximum performance that can be achieved with a task assignment scheme using information on the load factors only. <p> Before we present the schemes, let us review the maximum performance that can be achieved with a task assignment scheme using information on the load factors only. In this case, the sufficient schedulability conditions given in [8] and it variants <ref> [4, 9] </ref> are the best available schedulability conditions. If these conditions are used then the load assigned to any pair of processors exceeds ln 2. So, if N processors are used, then U &gt; 2 This bound cannot be improved beyond ( p 2 1)N .
Reference: [5] <author> D. S. Johnson, A. Demers, J. D. Ullman, M. R. Garey, and R. L. Graham. </author> <title> Worst Case Performance Bounds for Simple One-dimensional Packing Algorithms. </title> <journal> SIAM Journal of Computing, </journal> <volume> 3 </volume> <pages> 299-325, </pages> <year> 1974. </year>
Reference-contexts: Typically, the task assignment schemes apply variants of well-known heuristic bin-packing algorithms where the set of processors is regarded as a set of bins 1 . 1 The bin-packing problem is concerned with packing different-sized items into fixed-sized bins using the least number of bins <ref> [5] </ref>. 3 The decision whether a processor is full is determined by a schedulability condition. All existing task assignment schemes are based on the sufficient schedulability conditions for uniprocessor systems derived in [8] and variants of this condition [3]. <p> Recall from subsection 4.1 that Algorithm 1 has a complexity of O (jG 1 j log jG 1 j). Since a first fit bin-packing algorithm for tasks in G 2 can be implemented with a complexity of O (jG 2 j log jG 1 j) <ref> [5] </ref>, the worst case computational complexity of the RMGT scheme is given by O (K log K). In the following theorem, Theorem 4, we show that the number of processors needed by RMGT for scheduling an arbitrary set of real-time tasks satisfies a bound similar to (92).
Reference: [6] <author> J. P. Lehoczky, L. Sha, and Y. Ding. </author> <title> The Rate-Monotonic Scheduling Algorithm: Exact Characterization and Average Behavior. </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 166-171, </pages> <year> 1989. </year>
Reference-contexts: For both the EDD and RM algorithms, Liu and Layland derived sufficient conditions under which the respective algorithms yield feasible schedules. Such conditions are referred to as schedulability conditions. Recently, necessary and sufficient schedulability conditions were stated for both the RM algorithm <ref> [6] </ref> and the EDD algorithm [12]. Due to its low computational overhead the RM algorithm is widely regarded as an appropriate algorithm for scheduling real-time tasks on uniprocessor systems. Recently proposed extensions to the RM algorithm have increased its practical relevance [10, 11]. <p> For the proof, we will need three lemmas. Lemma 1, due to Lehoczky <ref> [6] </ref>, gives the necessary and sufficient schedulability for the RM algorithm in a uniprocessor system. Lemma 1 Given a set of real-time tasks t 1 ; t 2 ; : : : ; t K . Assume the tasks are ordered with increas ing period, T 1 T K .
Reference: [7] <author> J. Y.-T. Leung and J. Whitehead. </author> <title> On the Complexity of Fixed-Priority Scheduling of Periodic, Real-Time Tasks. Performance Evaluation, </title> <booktitle> 2 </booktitle> <pages> 237-250, </pages> <year> 1982. </year>
Reference-contexts: A major obstacle is that scheduling algorithms for real-time multiprocessor systems are significantly more complex than for uniprocessor systems. In multiprocessor systems, the scheduling algorithm must not only specify an ordering of tasks, but also must determine the specific processor to be used. Leung and Whitehead <ref> [7] </ref> proved that finding a minimal schedule for a given set of real-time tasks in a multiprocessor system is NP-hard. <p> However, the problem of finding an optimal assignment of tasks to processors for fixed priority scheduling algorithms, in particular the RM algorithm, as well as for dynamic priority scheduling algorithms, in particular EDD, was shown to be NP-hard <ref> [7] </ref>. In this study, we are concerned with task assignment schemes for homogeneous multiprocessor systems where each processor executes the RM scheduling algorithm. This problem has been addressed in a number of studies [1, 2, 4, 9].
Reference: [8] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling Algorithms for Multiprogramming in a Hard Real Time Environment. </title> <journal> Journal of the ACM, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: Scheduling algorithms can be divided into fixed priority and dynamic priority algorithms. In fixed priority algorithms, the priority of a task remains constant at all times, whereas in dynamic priority algorithms, the priority of a task may change during its execution. In their seminal work, Liu and Layland <ref> [8] </ref> showed that in single processor systems the dynamic priority earliest-deadline-due (EDD) algorithm which assigns the highest priority to the task closest to the end of its period is optimal among all scheduling algorithms. <p> All existing task assignment schemes are based on the sufficient schedulability conditions for uniprocessor systems derived in <ref> [8] </ref> and variants of this condition [3]. Thus, the existing assignment schemes differ mainly in the choice of the bin-packing heuristic. In [4], two heuristic assignment schemes are proposed, referred to as Rate-Monotonic Next-Fit (RMNF) and Rate-Monotonic First-Fit (RMFF). <p> The remainder of this study is structured as follows. In Section 2 we present our model for 5 real-time tasks and multiprocessor systems. In Section 3 we derive a tight schedulability condition for the RM scheduling algorithm in a uniprocessor system that improves on the results presented in <ref> [8] </ref>. We also prove a scheduling result for multiprocessor systems which can be interpreted as dual result to our uniprocessor scheduling condition. In Section 4 we construct two simple assignment schemes, referred to as RMST and RMGT. <p> The first result, presented in Theorem 1, is a simple modification of the result for uniprocessor systems by Liu and Layland <ref> [8] </ref>. Our result yields a higher utilization of the processor if the task periods satisfy certain constraints. On uniprocessor system, Theorem 1 does not provide a significant improvement for scheduling real-time tasks. <p> In our second result, stated in Theorem 2, we present a schedulability condition for the RM algorithm in multiprocessor systems. Theorem 2 uses exactly the same parameters, i.e., the total load U and the number of tasks K, as the uniprocessor result by Liu and Layland <ref> [8] </ref>. In fact, Theorem 2 can be interpreted as as a dual result to the schedulability conditions given in [8] for multiprocessor system. Both results coincide for the special case K = 2. A result similar to our Theorem 2 was conjectured in [4], but not proven. <p> Theorem 2 uses exactly the same parameters, i.e., the total load U and the number of tasks K, as the uniprocessor result by Liu and Layland <ref> [8] </ref>. In fact, Theorem 2 can be interpreted as as a dual result to the schedulability conditions given in [8] for multiprocessor system. Both results coincide for the special case K = 2. A result similar to our Theorem 2 was conjectured in [4], but not proven. <p> Both conditions are tight. 7 Note that Inequality (4) is exactly the schedulability condition given by Liu and Layland <ref> [8] </ref>. Theorem 1 improves upon [8] when fi &lt; 1 1=K, since the strict convexity of the function f (x) = x (2 1=x 1) implies that (K 1) 2 fi=(K1) 1 + 2 1fi 1 &gt; K (2 1=K 1) : (5) Throughout the paper, we will use a simpler <p> Both conditions are tight. 7 Note that Inequality (4) is exactly the schedulability condition given by Liu and Layland <ref> [8] </ref>. Theorem 1 improves upon [8] when fi &lt; 1 1=K, since the strict convexity of the function f (x) = x (2 1=x 1) implies that (K 1) 2 fi=(K1) 1 + 2 1fi 1 &gt; K (2 1=K 1) : (5) Throughout the paper, we will use a simpler version of Theorem 1. <p> Our schemes gain superiority by additionally taking into account the task periods. Before we present the schemes, let us review the maximum performance that can be achieved with a task assignment scheme using information on the load factors only. In this case, the sufficient schedulability conditions given in <ref> [8] </ref> and it variants [4, 9] are the best available schedulability conditions. If these conditions are used then the load assigned to any pair of processors exceeds ln 2. So, if N processors are used, then U &gt; 2 This bound cannot be improved beyond ( p 2 1)N . <p> For example, a set with K real-time tasks where U i = p 2 1 + " for each task cannot be scheduled onto K processors with this condition. Thus, all task assignment schemes that use the scheduling condition of <ref> [8] </ref> are strictly limited in the performance they can achieve. Similar arguments show that if the load factor of every task is less than ff, then a next-fit task assignment scheme based on [8] will ensure that the load on all but one processor is at least ln 2 ff. <p> Thus, all task assignment schemes that use the scheduling condition of <ref> [8] </ref> are strictly limited in the performance they can achieve. Similar arguments show that if the load factor of every task is less than ff, then a next-fit task assignment scheme based on [8] will ensure that the load on all but one processor is at least ln 2 ff. This shows that U &gt; (ln 2 ff)N (91) For ff &lt; 1=2 this bound is best possible.
Reference: [9] <author> Y. Oh and S. H. Son. </author> <title> Tight Performance Bounds of Heuristics for a Real-Time Scheduling Problem. </title> <note> Submitted for Publication. </note>
Reference-contexts: In this study, we are concerned with task assignment schemes for homogeneous multiprocessor systems where each processor executes the RM scheduling algorithm. This problem has been addressed in a number of studies <ref> [1, 2, 4, 9] </ref>. <p> RMFF first tries to accommodate a task in a processor marked as full before assigning it to the current processor. The First-Fit Decreasing-Utilization Factor (FFDUF) method is a variation of the first-fit heuristic scheme. Here, tasks are sorted in the order of their load factor [1]. In <ref> [9] </ref>, a best-fit bin-packing heuristic is used as the basis for the Rate-Monotonic Best-Fit (RMBF) scheme. Similarly to RMFF, RMBF attempts to assign tasks to processors that have been marked as full. However, in RMBF, the full processors are inspected in a specific order. <p> we focus on developing tighter schedulability conditions that allow to assign more tasks to each 4 Asymptotic Scheme Upper Bound: Complexity Type lim N=N opt RMNF [4] 2.67 O (K log K) off-line RMFF [4] 2.33 O (K log K) off-line FFDUF [1] 2 O (K log K) off-line RMBF <ref> [9] </ref> 2.33 O (K log K) off-line Next-Fit-M [2] 2.28+O (1=M ) O (K) on-line (a) Existing Task Assignment Schemes. RMST 1=(1 ff) O (K log K) off-line RMGT 1.75 O (K log K) off-line RMGT/M 1=(1 ff) + O (1=M ) O (K) on-line (b) Proposed Task Assignment Schemes. <p> Lemma 2 implies that it is not necessary to assume that a task set is ordered by periods in order to apply the schedulability conditions in <ref> [4, 9] </ref>, a fact overlooked in both references. Lemma 2 Given a task set t 1 ; t 2 ; : : :; t K , and a task t = (C; T ) with T T i for i = 1; : : :; K. <p> The second scheme, referred to as Rate-Monotonic General-Task or RMGT scheme, applies to general task sets. Previously proposed assignment schemes only consider the load factors of the tasks <ref> [1, 2, 4, 9] </ref>. Our schemes gain superiority by additionally taking into account the task periods. Before we present the schemes, let us review the maximum performance that can be achieved with a task assignment scheme using information on the load factors only. <p> Before we present the schemes, let us review the maximum performance that can be achieved with a task assignment scheme using information on the load factors only. In this case, the sufficient schedulability conditions given in [8] and it variants <ref> [4, 9] </ref> are the best available schedulability conditions. If these conditions are used then the load assigned to any pair of processors exceeds ln 2. So, if N processors are used, then U &gt; 2 This bound cannot be improved beyond ( p 2 1)N .
Reference: [10] <author> L. Sha, J. P. Lehoczky, and R. Rajkumar. </author> <title> Solutions for Some Practical Problems in Prioritized Preemptive Scheduling. </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 181-191, </pages> <year> 1986. </year>
Reference-contexts: Due to its low computational overhead the RM algorithm is widely regarded as an appropriate algorithm for scheduling real-time tasks on uniprocessor systems. Recently proposed extensions to the RM algorithm have increased its practical relevance <ref> [10, 11] </ref>. Even though real-time computer systems are expected to greatly benefit from multiprocessor technology, employing multiprocessor systems for real-time applications has shown to be difficult. A major obstacle is that scheduling algorithms for real-time multiprocessor systems are significantly more complex than for uniprocessor systems.
Reference: [11] <author> J. A. Stankovic and K. Ramamritham (editors). </author> <title> Hard Real-Time Systems. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1988. </year>
Reference-contexts: Due to its low computational overhead the RM algorithm is widely regarded as an appropriate algorithm for scheduling real-time tasks on uniprocessor systems. Recently proposed extensions to the RM algorithm have increased its practical relevance <ref> [10, 11] </ref>. Even though real-time computer systems are expected to greatly benefit from multiprocessor technology, employing multiprocessor systems for real-time applications has shown to be difficult. A major obstacle is that scheduling algorithms for real-time multiprocessor systems are significantly more complex than for uniprocessor systems.
Reference: [12] <author> Q. Z. Zheng and K. G. Shin. </author> <title> On the Ability of Establishing Real-Time Channels in Point-to-Point Packet Switched Networks. to appear: </title> <journal> IEEE Transactions on Communications. </journal> <volume> 35 </volume>
Reference-contexts: For both the EDD and RM algorithms, Liu and Layland derived sufficient conditions under which the respective algorithms yield feasible schedules. Such conditions are referred to as schedulability conditions. Recently, necessary and sufficient schedulability conditions were stated for both the RM algorithm [6] and the EDD algorithm <ref> [12] </ref>. Due to its low computational overhead the RM algorithm is widely regarded as an appropriate algorithm for scheduling real-time tasks on uniprocessor systems. Recently proposed extensions to the RM algorithm have increased its practical relevance [10, 11].
References-found: 12

