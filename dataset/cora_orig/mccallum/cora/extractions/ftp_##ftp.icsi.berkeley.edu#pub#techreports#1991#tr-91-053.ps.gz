URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1991/tr-91-053.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1991.html
Root-URL: http://www.icsi.berkeley.edu
Title: Unification with ICSIM  
Author: Franz Kurfe 
Date: August 1991  
Pubnum: TR-91-053  
Abstract: This document describes the implementation of a distributed unification algorithm using the connectionist simulator ICSIM. The algorithm is based on S. Holldobler's work, as described in [Holldobler, 1990b]. Unification problems are specified according to a simple language, describing the terms, functions, variables and constants occuring in such a problem; the terms to be unified are represented as &lt; term 1 = term 2 &gt; (e.g. &lt; f (x; x; x) = f (g(a); y; g(z)) &gt;). A parser extracts relevant information and creates intermediate data structures needed for the construction of the connectionist network. Essential data structures describe the symbols occurring in the terms, the hierarchical structure of the terms (functions and their arguments), and the occurrences of the symbols in the terms. The connectionist unification network is constructed based on these intermediate structures. It is hierarchically organized, its top level NET consisting of POSITIONS, which correspond to the nodes in the term structure. A POSITION consists of a SYMBOL, either of type VARIABLE or CONSTANT. Symbols comprise a TERM UNIT and a number of UNIFICATION UNITS, depending on the number of positions in the terms to be unified. Initially, TERM UNITS are set according to the occurrences of their symbols in the term structure; based on the links within the network and the activation of UNIFICATION UNITS, more TERM UNITS are activated as required by the unification algorithm. The final set of active TERM UNITS is used to construct the most general unifier for the terms to be unified. The network can be easily extended to detect inconsistencies in the term structure or to perform an occur check. 
Abstract-found: 1
Intro-found: 1
Reference: [Bibel et al., 1987] <author> Bibel, W., Kurfe, F., Aspetsberger, K., Hintenaus, P., and Schu-mann, J. </author> <year> (1987). </year> <title> Parallel inference machines. </title> <editor> In Treleaven, P. and Vanneschi, M., editors, </editor> <booktitle> Future Parallel Computers, number 272 in Lecture Notes in Computer Science, </booktitle> <pages> pages 185-226, </pages> <address> Berlin. </address> <publisher> Springer. </publisher>
Reference-contexts: If two positions 1 and 2 are in the one equivalence class, then their corresponding children 1 : and 2 : (the 20 arguments of the functions) must also be in one equivalence class. An idea somewhat related to this graphical approach is based on a dag representation <ref> [Bibel et al., 1987] </ref>. It relies on two operations: one is to "melt" nodes with the same variable symbol at different positions (singularity), and the other to "forward" the task of unification according to the term argument relation (decomposition).
Reference: [Elman, 1989] <author> Elman, J. L. </author> <year> (1989). </year> <title> Structured representations and connectionist models. </title> <booktitle> In COGSCI '89, </booktitle> <pages> pages 17-23. </pages>
Reference-contexts: A third approach is to view the unification problem as a sequence of symbols, and use a recurrent network to analyse if the sequence is admissible or not <ref> [Elman, 1989, Elman, 1990] </ref>. A problem is the determination of the variable substitutions, which certainly are of interest.
Reference: [Elman, 1990] <author> Elman, J. L. </author> <year> (1990). </year> <title> Finding structure in time. </title> <journal> Cognitive Science, </journal> <volume> 14 </volume> <pages> 179-211. </pages>
Reference-contexts: A third approach is to view the unification problem as a sequence of symbols, and use a recurrent network to analyse if the sequence is admissible or not <ref> [Elman, 1989, Elman, 1990] </ref>. A problem is the determination of the variable substitutions, which certainly are of interest.
Reference: [Holldobler, 1990a] <author> Holldobler, S. </author> <year> (1990a). </year> <title> CHCL a connectionist inference system for horn logic based on the connection method. </title> <type> Technical Report TR-90-042, </type> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA 94704. </address>
Reference-contexts: Especially the latter feature is very desirable for the unification network, in order to dynamically display the activities going on during execution. The unification network described here actually is the core of a connectionist inference mechanism <ref> [Holldobler, 1990a] </ref>. This inference mechanism relies on the same basic representation and processing techniques, and an implementation of it, also using ICSIM, is under way. 22
Reference: [Holldobler, 1990b] <author> Holldobler, S. </author> <year> (1990b). </year> <title> A structured connectionist unification algorithm. </title> <booktitle> In AAAI '90, </booktitle> <pages> pages 587-593. </pages> <note> A long version appeared as Technical Report TR-90-012, </note> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA. </address>
Reference-contexts: For constants, this is trivial; for variables it means that all the substitutions for one variable must be compatible. This feature of unification will be referred to singularity <ref> [Holldobler, 1990b] </ref>. <p> As a consequence, the number of connections would also be reduced substantially. Algorithm The number of units required for the algorithm as described in <ref> [Holldobler, 1990b] </ref> still is quadratic: 1 2 fi m fi n fi (n 1). Many of these units, however, will never be activated during the execution of the algorithm. This can be used for an incremental construction of the unification network.
Reference: [Meyer, 1988] <author> Meyer, B. </author> <year> (1988). </year> <title> Object-Oriented Software Construction. </title> <publisher> Prentice Hall, </publisher> <address> New York. </address>
Reference-contexts: It provides a collection of basic modules for the construction of connectionist networks, while maintaining a high degree of flexibility through the use of an object-oriented implementation environment. A first version of ICSIM was developed in Eiffel <ref> [Meyer, 1988] </ref>, a second one in Sather [Omohundro, 1990, Omohundro, 1991], a derivative of Eiffel geared towards higher efficiency and more simplicity.
Reference: [Omohundro, 1990] <author> Omohundro, S. </author> <year> (1990). </year> <title> The Sather Language. </title> <type> Technical report, </type> <institution> International Computer Science Institute. </institution>
Reference-contexts: It provides a collection of basic modules for the construction of connectionist networks, while maintaining a high degree of flexibility through the use of an object-oriented implementation environment. A first version of ICSIM was developed in Eiffel [Meyer, 1988], a second one in Sather <ref> [Omohundro, 1990, Omohundro, 1991] </ref>, a derivative of Eiffel geared towards higher efficiency and more simplicity. ICSIM relieves the user from the tedious task of implementing all the necessary details down to the level of the single units, their interconnections, and their possible modes of operation and interaction.
Reference: [Omohundro, 1991] <author> Omohundro, S. </author> <year> (1991). </year> <title> Differences between Sather and Eiffel. </title> <type> Eiffel Outlook. </type>
Reference-contexts: It provides a collection of basic modules for the construction of connectionist networks, while maintaining a high degree of flexibility through the use of an object-oriented implementation environment. A first version of ICSIM was developed in Eiffel [Meyer, 1988], a second one in Sather <ref> [Omohundro, 1990, Omohundro, 1991] </ref>, a derivative of Eiffel geared towards higher efficiency and more simplicity. ICSIM relieves the user from the tedious task of implementing all the necessary details down to the level of the single units, their interconnections, and their possible modes of operation and interaction.
Reference: [Pollack, 1988] <author> Pollack, J. </author> <year> (1988). </year> <title> Recursive auto-associative memory: Devising compositional distributed representations. </title> <booktitle> In 10th COGSCI. </booktitle>
Reference-contexts: One possibility, for example, is that the database of unification examples used is too small. A similar approach with more promising results (for a simplified version of unification, however), has been investigated by [Stolcke and Wu, 1991]. The basic idea there is to employ a recursive auto-associative memory <ref> [Pollack, 1988, Pollack, 1990] </ref> for the representation of the term structure, and modify it in such a way that it also performs unification. 21 6 Conclusions The major goal of this endeavor in unification with connectionist techniques has been to demonstrate that the algorithm works.
Reference: [Pollack, 1990] <author> Pollack, J. B. </author> <year> (1990). </year> <title> Recursive distributed representations. </title> <journal> Artificial Intelligence, </journal> <volume> 46 </volume> <pages> 77-105. </pages>
Reference-contexts: One possibility, for example, is that the database of unification examples used is too small. A similar approach with more promising results (for a simplified version of unification, however), has been investigated by [Stolcke and Wu, 1991]. The basic idea there is to employ a recursive auto-associative memory <ref> [Pollack, 1988, Pollack, 1990] </ref> for the representation of the term structure, and modify it in such a way that it also performs unification. 21 6 Conclusions The major goal of this endeavor in unification with connectionist techniques has been to demonstrate that the algorithm works.
Reference: [Schmidt, 1990] <author> Schmidt, H. W. </author> <year> (1990). </year> <title> ICSIM: Initial design of an object-oriented net simulator. </title> <type> Technical Report TR-90-55, </type> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA 94704. </address>
Reference-contexts: h 0:1 a f g x y z x x x h h h h h h 0:3 h h h h h h 0:1:1 a f g x y z s x 4 2 The Connectionist Simulator ICSIM ICSIM is a simulator for connectionist networks under development at ICSI <ref> [Schmidt, 1990] </ref>. It provides a collection of basic modules for the construction of connectionist networks, while maintaining a high degree of flexibility through the use of an object-oriented implementation environment.
Reference: [Stolcke and Wu, 1991] <author> Stolcke, A. and Wu, D. </author> <year> (1991). </year> <title> Tree matching with recursive distributed representations. </title> <booktitle> International Computer Science Institute. </booktitle> <pages> 23 </pages>
Reference-contexts: One possibility, for example, is that the database of unification examples used is too small. A similar approach with more promising results (for a simplified version of unification, however), has been investigated by <ref> [Stolcke and Wu, 1991] </ref>.
References-found: 12

