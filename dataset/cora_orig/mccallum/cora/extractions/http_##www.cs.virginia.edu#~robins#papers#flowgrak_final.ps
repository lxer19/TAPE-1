URL: http://www.cs.virginia.edu/~robins/papers/flowgrak_final.ps
Refering-URL: http://www.cs.virginia.edu/~robins/publications.html
Root-URL: http://www.cs.virginia.edu
Title: Optimal Robust Path Planning in General Environments  
Author: T. C. Hu, Andrew B. Kahng and Gabriel Robins 
Abstract: We address robust path planning for a mobile agent in a general environment by finding minimum cost source-destination paths having prescribed widths. The main result is a new approach which optimally solves the robust path planning problem using an efficient network flow formulation. Our algorithm represents a significant departure from conventional shortest-path or graph search based methods; it not only handles environments with solid polygonal obstacles but also generalizes to arbitrary cost maps which may arise in modeling incomplete or uncertain knowledge of the environment. Simple extensions allow us to address higher-dimensional problem instances and minimum-surface computations; the latter is a result of independent interest. We use an efficient implementation to exhibit optimal path-planning solutions for a variety of test problems. The paper concludes with open issues and directions for future work.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. K. Ahuja, J. B. Orlin, and R. E. Tarjan, </author> <title> Improved time bounds for the maximum flow problem, </title> <type> Tech. Rep. </type> <institution> CS-TR-118-87, Dept. of Computer Science, Princeton University, </institution> <year> 1987. </year> <title> 19 planning solutions (continued). Here we see the solutions corresponding to widths d = 4 (top left), d = 5 (top right), d = 7 (bottom left), and d = 8 (bottom right). </title>
Reference-contexts: [12] [16]) together imply the following: Theorem 2: The d-PATH method of Figure 9 outputs an optimal solution to the RMPPG problem in time polynomial in size of the mesh representation of the region R. 14 2.3 A Test Implementation There are numerous algorithms for computing maximum flows in networks <ref> [1] </ref> [16] [21]. To demonstrate the viability of our approach, we have used an existing implementation of Dinic's network flow algorithm [18]. Starting with an empty flow, the Dinic algorithm iteratively augments the flow in stages; the optimal flow solution is achieved when no flow augmentation is possible. <p> If we have a total of jN j nodes in our mesh graph, the time complexity of the Dinic algorithm is O (jN j 3 ). In practice, more efficient flow algorithms are available <ref> [1] </ref>. <p> The time complexity may be further reduced in cases where the terrain cost function may only take on values from a fixed, bounded range. In this case, we may apply the maximum flow algorithm of <ref> [1] </ref> to obtain an overall time complexity of O (jN j 2 ) for the d-PATH algorithm. 3 Simulation Results Our current d-PATH implementation uses ANSI C code to transform an arbitrary robust motion planning instance into a maximum-flow instance; we then use the Fortran-77 Dinic code of [18] to compute
Reference: [2] <author> J. C. Alexander, </author> <title> On the motion of a trailer-truck, problem 84-12, </title> <journal> SIAM Review, </journal> <year> (1985), </year> <pages> pp. 578-579. </pages>
Reference-contexts: The solution space may also be limited based on joint articulation, or the physical characteristics of control structures. Various classes of holonomic and non-holonomic kinematic constraints are discussed by Alexander <ref> [2] </ref>, Alexander and Maddocks [3], Barraquand and Latombe [5] [6], Canny [8], Canny, Donald, Reif and Xavier [9], Laumond [26] [27], Li, Canny and Sastry [29], and Nelson [34]. An entirely distinct field of study incorporates robot dynamics to establish additional constraints on (kinematically planned) path solutions [25].
Reference: [3] <author> J. C. Alexander and J. H. Maddocks, </author> <title> On the maneuvering of vehicles, </title> <journal> SIAM J. Applied Math., </journal> <volume> 48 (1988), </volume> <pages> pp. 38-51. </pages>
Reference-contexts: The solution space may also be limited based on joint articulation, or the physical characteristics of control structures. Various classes of holonomic and non-holonomic kinematic constraints are discussed by Alexander [2], Alexander and Maddocks <ref> [3] </ref>, Barraquand and Latombe [5] [6], Canny [8], Canny, Donald, Reif and Xavier [9], Laumond [26] [27], Li, Canny and Sastry [29], and Nelson [34]. An entirely distinct field of study incorporates robot dynamics to establish additional constraints on (kinematically planned) path solutions [25].
Reference: [4] <author> F. Avnaim, J. D. Boissonnat, and B. Faverjon, </author> <title> A practical exact motion planning algorithm for polygonal objects moving amidst polygonal obstacles, </title> <type> Tech. Rep. No. 890, </type> <institution> INRIA, Sophia-Antipolis, France, </institution> <year> 1988. </year>
Reference-contexts: In the same work, Canny also developed the exponential-time roadmap (or silhouette) method for general kinematic motion planning. Exact path planning algorithms for polygonal objects navigating among polygonal obstacles were given by Avnaim, Boissonnat and Faverjon <ref> [4] </ref>. Papadimitriou [36] proposed an algorithm that finds a path with cost within a factor of 1 + * of optimal, and runs in time polynomial in both 1 * and the total number of vertices.
Reference: [5] <author> J. Barraquand and J. C. Latombe, </author> <title> On non-holonomic mobile robots and optimal maneuvering, </title> <journal> Revue d'Intelligence Artificielle, </journal> <volume> 3 (1989), </volume> <pages> pp. </pages> <month> 77-103. </month> <title> 20 [6] , Conrollability of mobile robots with kinematic constraints, </title> <type> Tech. Rep. </type> <institution> No. STAN-CS-90-1317, Department of Computer Science, Stanford University, Stanford, </institution> <address> CA, </address> <year> 1990. </year> <title> [7] , Nonholonomic multibody mobile robots: Controllability and motion planning in the presence of obstacles, </title> <booktitle> Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <year> (1991), </year> <pages> pp. 2328-2335. </pages>
Reference-contexts: The solution space may also be limited based on joint articulation, or the physical characteristics of control structures. Various classes of holonomic and non-holonomic kinematic constraints are discussed by Alexander [2], Alexander and Maddocks [3], Barraquand and Latombe <ref> [5] </ref> [6], Canny [8], Canny, Donald, Reif and Xavier [9], Laumond [26] [27], Li, Canny and Sastry [29], and Nelson [34]. An entirely distinct field of study incorporates robot dynamics to establish additional constraints on (kinematically planned) path solutions [25].
Reference: [8] <author> J. Canny, </author> <title> The Complexity of Robot Motion Planning, </title> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: 1 Introduction To effect its goals, an autonomous mobile agent will execute a sequence of source-destination navigational tasks in the agent's configuration space. For each navigational task, the motion planning problem asks for a minimum-cost feasible path <ref> [8] </ref> [11] [25] [37]. The cost of a given solution may depend on many factors, including distance traveled, time or energy expended, and hazard probabilities encountered along the path. <p> The solution space may also be limited based on joint articulation, or the physical characteristics of control structures. Various classes of holonomic and non-holonomic kinematic constraints are discussed by Alexander [2], Alexander and Maddocks [3], Barraquand and Latombe [5] [6], Canny <ref> [8] </ref>, Canny, Donald, Reif and Xavier [9], Laumond [26] [27], Li, Canny and Sastry [29], and Nelson [34]. An entirely distinct field of study incorporates robot dynamics to establish additional constraints on (kinematically planned) path solutions [25]. <p> Note that our present work does not model the dynamics of the agent: rather, we address a kinematic path planning formulation which captures important practical constraints. In general, kinematic path planning has been widely studied (see, e.g., <ref> [8] </ref> [25] [37] for surveys); a number of special cases have been well-solved, and several complexity bounds have been established. If the path solution is not constrained to lie on a grid, Canny [8] showed that path planning problems are NP-hard when the dimension of the configuration space exceeds three. <p> In general, kinematic path planning has been widely studied (see, e.g., <ref> [8] </ref> [25] [37] for surveys); a number of special cases have been well-solved, and several complexity bounds have been established. If the path solution is not constrained to lie on a grid, Canny [8] showed that path planning problems are NP-hard when the dimension of the configuration space exceeds three. In the same work, Canny also developed the exponential-time roadmap (or silhouette) method for general kinematic motion planning.
Reference: [9] <author> J. Canny, B. Donald, J. Reif, and P. Xavier, </author> <title> On the complexity of kinodynamic planning, </title> <booktitle> in Proc. IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1988, </year> <pages> pp. 306-318. </pages>
Reference-contexts: The solution space may also be limited based on joint articulation, or the physical characteristics of control structures. Various classes of holonomic and non-holonomic kinematic constraints are discussed by Alexander [2], Alexander and Maddocks [3], Barraquand and Latombe [5] [6], Canny [8], Canny, Donald, Reif and Xavier <ref> [9] </ref>, Laumond [26] [27], Li, Canny and Sastry [29], and Nelson [34]. An entirely distinct field of study incorporates robot dynamics to establish additional constraints on (kinematically planned) path solutions [25].
Reference: [10] <author> D. W. Cho, </author> <title> Certainty grid representation for robot navigation by a bayesian method, </title> <journal> Robotica, </journal> <volume> 8 (1990), </volume> <pages> pp. 159-165. </pages>
Reference-contexts: As noted by Latombe [25], such enumerative approaches typically have exponential time complexity, and therefore efficient heuristics must be employed. A common heuristic for reducing search complexity is the hierarchical solution method based on 2 k - trees (esp. quadtrees and octtrees) or dissections into triangular or rectanguloid cells <ref> [10] </ref> [25]. Unfortunately, the hierarchical solution approach cannot guarantee optimal solutions [41]. Alternatively, physical analog methods might be employed; these commonly involve a potential field which forces the agent to move toward the goal configuration while avoiding contact with obstacles [7] [15] [24].
Reference: [11] <author> J. H. Connell, </author> <title> Minimalist Mobile Robotics, </title> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction To effect its goals, an autonomous mobile agent will execute a sequence of source-destination navigational tasks in the agent's configuration space. For each navigational task, the motion planning problem asks for a minimum-cost feasible path [8] <ref> [11] </ref> [25] [37]. The cost of a given solution may depend on many factors, including distance traveled, time or energy expended, and hazard probabilities encountered along the path.
Reference: [12] <author> T. H. Cormen, C. E. Leiserson, and R. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: The main contribution of this paper is a new algorithmic approach to optimal robust path-planning in environments with arbitrary cost maps. Essentially, we discard the usual mix of shortest-path algorithms and graph search techniques, and instead employ a more general combinatorial approach involving network flows <ref> [12] </ref>. The crucial observation is that a minimum-cost path which connects two locations s and t corresponds to a minimum-cost cut-set which separates two other locations s 0 and t 0 . <p> Optimal motion planning entails minimizing this path integral. To find a minimum-cost path P R between two points on the boundary of R, one might guess that Dijkstra's shortest path algorithm <ref> [12] </ref> provides a natural solution. However, application of Dijkstra's algorithm relies on an implicit assumption that the solution can be cast as an ideal path, i.e., a path of zero width. <p> We conclude this section with the observation that the max-flow min-cut theorem [16] and the existence of efficient algorithms for maximum flow (e.g., <ref> [12] </ref> [16]) together imply the following: Theorem 2: The d-PATH method of Figure 9 outputs an optimal solution to the RMPPG problem in time polynomial in size of the mesh representation of the region R. 14 2.3 A Test Implementation There are numerous algorithms for computing maximum flows in networks [1]
Reference: [13] <author> Courant and Robbins, </author> <title> What is Mathematics? An Elementary Approach to Ideas and Methods, </title> <publisher> Oxford University Press, </publisher> <address> London, England, </address> <year> 1941. </year>
Reference-contexts: Definition: A region is a simply-connected, compact subset of &lt; 2 . Given a region R, we know by the Jordan curve theorem <ref> [13] </ref> that the boundary B of R partitions the plane into three mutually disjoint sets: B itself; the interior of R; and the exterior of R.
Reference: [14] <author> T. Dean and M. Boddy, </author> <title> An analysis of time-dependent planning, </title> <booktitle> in Proc. AAAI, </booktitle> <address> St. Paul, </address> <year> 1988, </year> <pages> pp. 49-54. </pages>
Reference-contexts: intrinsic planarity and geometry of robot motion planning yields a layered, bounded-degree network representation, resulting in added implementation efficiency; 2. via incremental flow techniques, the method is suitable for dynamic or on-line problems, as well as situations where early knowledge of partial solutions is helpful (i.e., requiring an anytime algorithm <ref> [14] </ref>); and 3. the method generalizes to provide a solution to the classical Plateau problem on minimal surfaces [39], a result which is of independent interest [22] [23].
Reference: [15] <author> B. R. Donald, </author> <title> Error Detection and Recovery for Robot Motion Planning with Uncertainty, </title> <type> Ph.D. dissertation, </type> <institution> Dept of EE&CS, MIT, </institution> <year> 1987. </year>
Reference-contexts: Unfortunately, the hierarchical solution approach cannot guarantee optimal solutions [41]. Alternatively, physical analog methods might be employed; these commonly involve a potential field which forces the agent to move toward the goal configuration while avoiding contact with obstacles [7] <ref> [15] </ref> [24]. Path-finding may then be accomplished by variational methods (e.g., [38]), or by classical gradient or subgradient algorithms. Other work has essentially hybridized analogs of graph search algorithms (notably the best-first and depth-first approaches) with either hierarchical or physical analog formulations.
Reference: [16] <author> L. R. Ford and D. R. Fulkerson, </author> <title> Flows in Networks, </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1961. </year>
Reference-contexts: optimal algorithm for the RMPPG problem. 10 2.2 A Network Flow Based Approach To solve the robust motion planning problem in a grid, we use ideas from network flows in continua [21]. 2 For completeness of our exposition, we first review several key concepts from the theory of network flows <ref> [16] </ref> [28]. <p> A classical result of linear programming duality states that the maximum flow value is equal to the minimum cut capacity; this is the max-flow min-cut theorem <ref> [16] </ref>: Theorem 1: Given a network = (N; A; s; t; c; c 0 ), the value of a maximum s-t flow is equal to the minimum capacity of any s-t cut. <p> We conclude this section with the observation that the max-flow min-cut theorem <ref> [16] </ref> and the existence of efficient algorithms for maximum flow (e.g., [12] [16]) together imply the following: Theorem 2: The d-PATH method of Figure 9 outputs an optimal solution to the RMPPG problem in time polynomial in size of the mesh representation of the region R. 14 2.3 A Test Implementation <p> We conclude this section with the observation that the max-flow min-cut theorem <ref> [16] </ref> and the existence of efficient algorithms for maximum flow (e.g., [12] [16]) together imply the following: Theorem 2: The d-PATH method of Figure 9 outputs an optimal solution to the RMPPG problem in time polynomial in size of the mesh representation of the region R. 14 2.3 A Test Implementation There are numerous algorithms for computing maximum flows in networks [1] [16] <p> <ref> [16] </ref>) together imply the following: Theorem 2: The d-PATH method of Figure 9 outputs an optimal solution to the RMPPG problem in time polynomial in size of the mesh representation of the region R. 14 2.3 A Test Implementation There are numerous algorithms for computing maximum flows in networks [1] [16] [21]. To demonstrate the viability of our approach, we have used an existing implementation of Dinic's network flow algorithm [18]. Starting with an empty flow, the Dinic algorithm iteratively augments the flow in stages; the optimal flow solution is achieved when no flow augmentation is possible.
Reference: [17] <author> A. V. Goldberg, E. Tardos, and R. E. Tarjan, </author> <title> Network flow algorithms. </title> <type> manuscript, </type> <month> March </month> <year> 1989. </year>
Reference-contexts: If we have a total of jN j nodes in our mesh graph, the time complexity of the Dinic algorithm is O (jN j 3 ). In practice, more efficient flow algorithms are available [1]. For example, by using the network flow algorithm of <ref> [17] </ref>, we obtain the following: Theorem 3: For a given prescribed path width d, the d-PATH method solves the RMPPG problem in O (d 2 jN j 2 log d 2 ) time, where jN j is the number of nodes in the mesh representation of the region R. <p> Proof: Each node in the mesh induced by the method has no more than d 2 adjacent arcs, so that jAj = O (d 2 jN j). The network flow algorithm of <ref> [17] </ref> operates within time O (jAj jN j log ( jNj 2 overall time complexity of d-PATH is therefore O (d 2 jN j 2 log jNj If d is a constant (i.e., the agent size is much smaller than the environment size), then the time complexity of d-PATH becomes O
Reference: [18] <author> D. Goldfarb and M. D. Grigoriadis, </author> <title> A computational comparison of the dinic and network simplex methods for maximum flow, </title> <journal> Annals of Operation Research, </journal> <volume> 13 (1988), </volume> <pages> pp. 83-123. </pages>
Reference-contexts: To demonstrate the viability of our approach, we have used an existing implementation of Dinic's network flow algorithm <ref> [18] </ref>. Starting with an empty flow, the Dinic algorithm iteratively augments the flow in stages; the optimal flow solution is achieved when no flow augmentation is possible. <p> algorithm of [1] to obtain an overall time complexity of O (jN j 2 ) for the d-PATH algorithm. 3 Simulation Results Our current d-PATH implementation uses ANSI C code to transform an arbitrary robust motion planning instance into a maximum-flow instance; we then use the Fortran-77 Dinic code of <ref> [18] </ref> to compute the flow, and invoke Mathematica [40] to draw the resulting path. We have tested our implementation on three classes of motion planning instances: uniformly weighted regions, environments with polygonal obstacles, and smooth randomly-costed terrains.
Reference: [19] <author> R. E. Gomory, T. C. Hu, and J. M. Yohe, </author> <title> r-separating sets, Can. </title> <journal> J. Math., </journal> <volume> XXVI (1974), </volume> <pages> pp. 1418-1429. </pages>
Reference-contexts: In general, the optimum path for an agent of width d 1 cannot be obtained by simply 6 widening or narrowing the optimum path for an agent of width d 2 . We now establish the relationship between a prescribed-width path requirement and the concept of d-separation <ref> [19] </ref>. In the following, we use ball (x; d) to denote the closed ball of diameter d centered at x, i.e., the set of all points at distance d 2 or less from x.
Reference: [20] <author> D. Gusfield and D. Naor, </author> <title> Efficient algorithms for generalized cut trees, </title> <booktitle> in Proc. ACM/SIAM Simposium on Discrete Algorithms, </booktitle> <year> 1990, </year> <pages> pp. 422-433. </pages>
Reference-contexts: Thus, each arc (v 0 ; v 00 ) of the resulting directed network will, when saturated, contribute the original node weight w (v) to the minimum cut value. This transformation is illustrated in Figure 8 <ref> [20] </ref>. The overall size of the network increases by only a constant factor via this last transformation, i.e., the final directed arc-capacitated network will have only 2jN j nodes and jN j + 2jAj arcs.
Reference: [21] <author> T. C. Hu, </author> <title> Integer Programming and Network Flows, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1969. </year>
Reference-contexts: With this in mind, we now use a network flow approach to develop an efficient, optimal algorithm for the RMPPG problem. 10 2.2 A Network Flow Based Approach To solve the robust motion planning problem in a grid, we use ideas from network flows in continua <ref> [21] </ref>. 2 For completeness of our exposition, we first review several key concepts from the theory of network flows [16] [28]. <p> An illustration of this construction for d = 2 is given in Figure 6. We note that the concept of a d-neighborhood was first investigated by Gomory and Hu <ref> [21] </ref>. Finally, we choose nodes s 0 and t 0 such that the minimum s 0 -t 0 cut is forced to lie along some path between s and t. <p> together imply the following: Theorem 2: The d-PATH method of Figure 9 outputs an optimal solution to the RMPPG problem in time polynomial in size of the mesh representation of the region R. 14 2.3 A Test Implementation There are numerous algorithms for computing maximum flows in networks [1] [16] <ref> [21] </ref>. To demonstrate the viability of our approach, we have used an existing implementation of Dinic's network flow algorithm [18]. Starting with an empty flow, the Dinic algorithm iteratively augments the flow in stages; the optimal flow solution is achieved when no flow augmentation is possible.
Reference: [22] <author> T. C. Hu, A. B. Kahng, and G. Robins, </author> <title> Optimal solution of the discrete plateau problem, </title> <type> Tech. Rep. </type> <institution> CSD-920006, Computer Science Department, UCLA, </institution> <month> January </month> <year> 1992. </year> <title> [23] , Solution of the discrete plateau problem, </title> <booktitle> Proc. of the National Academy of Sciences, 89 (1992), </booktitle> <pages> pp. 9235-9236. </pages>
Reference-contexts: is suitable for dynamic or on-line problems, as well as situations where early knowledge of partial solutions is helpful (i.e., requiring an anytime algorithm [14]); and 3. the method generalizes to provide a solution to the classical Plateau problem on minimal surfaces [39], a result which is of independent interest <ref> [22] </ref> [23]. Given these advantages, we believe that our approach may well provide a new, practical basis for certain classes of autonomous agent path planning problems. The remainder of this paper is organized as follows. <p> Our method enjoys a number of additional generalizations and applications, including a higher-dimensional extension which solves a class of discrete instances of the Plateau problem on minimal surfaces <ref> [22] </ref> [23]. 17 The solutions shown correspond to widths d = 5 (top left), d = 6 (top right), d = 7 (bottom left), and d = 8 (bottom right).
Reference: [24] <author> O. Khatib, </author> <title> Real-time obstacle avoidance for manipulators and mobile robots, </title> <journal> Intl. J. of Robotics Research, </journal> <volume> 5 (1986), </volume> <pages> pp. 90-98. </pages>
Reference-contexts: Unfortunately, the hierarchical solution approach cannot guarantee optimal solutions [41]. Alternatively, physical analog methods might be employed; these commonly involve a potential field which forces the agent to move toward the goal configuration while avoiding contact with obstacles [7] [15] <ref> [24] </ref>. Path-finding may then be accomplished by variational methods (e.g., [38]), or by classical gradient or subgradient algorithms. Other work has essentially hybridized analogs of graph search algorithms (notably the best-first and depth-first approaches) with either hierarchical or physical analog formulations.
Reference: [25] <author> J. C. Latombe, </author> <title> Robot Motion Planning, </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: 1 Introduction To effect its goals, an autonomous mobile agent will execute a sequence of source-destination navigational tasks in the agent's configuration space. For each navigational task, the motion planning problem asks for a minimum-cost feasible path [8] [11] <ref> [25] </ref> [37]. The cost of a given solution may depend on many factors, including distance traveled, time or energy expended, and hazard probabilities encountered along the path. <p> A large body of work has addressed the motion planning problem; for a survey, the reader is referred to Latombe <ref> [25] </ref> or Mitchell [31]. We begin our exposition by reviewing several major problem formulations and solution methods. The basic motion planning problem involves kinematic path planning for a rigid-body mobile agent which moves in an environment populated by static polygonal obstacles. In this simple paradigm, the fl T. C. <p> An entirely distinct field of study incorporates robot dynamics to establish additional constraints on (kinematically planned) path solutions <ref> [25] </ref>. For example, gravity and friction coefficients will constrain both the path solution and the speed of traversal when the agent must avoid tip-over, sliding, and other undesirable phenomena. <p> Note that our present work does not model the dynamics of the agent: rather, we address a kinematic path planning formulation which captures important practical constraints. In general, kinematic path planning has been widely studied (see, e.g., [8] <ref> [25] </ref> [37] for surveys); a number of special cases have been well-solved, and several complexity bounds have been established. If the path solution is not constrained to lie on a grid, Canny [8] showed that path planning problems are NP-hard when the dimension of the configuration space exceeds three. <p> Obviously, the complexity of any variant is dependent on the number of paths computed and the ease of computing each optimum subpath. With a number of formulations, exhaustive graph search methods such as depth-first branch-and-bound or A* constitute the only known optimal algorithms. As noted by Latombe <ref> [25] </ref>, such enumerative approaches typically have exponential time complexity, and therefore efficient heuristics must be employed. A common heuristic for reducing search complexity is the hierarchical solution method based on 2 k - trees (esp. quadtrees and octtrees) or dissections into triangular or rectanguloid cells [10] [25]. <p> As noted by Latombe <ref> [25] </ref>, such enumerative approaches typically have exponential time complexity, and therefore efficient heuristics must be employed. A common heuristic for reducing search complexity is the hierarchical solution method based on 2 k - trees (esp. quadtrees and octtrees) or dissections into triangular or rectanguloid cells [10] [25]. Unfortunately, the hierarchical solution approach cannot guarantee optimal solutions [41]. Alternatively, physical analog methods might be employed; these commonly involve a potential field which forces the agent to move toward the goal configuration while avoiding contact with obstacles [7] [15] [24]. <p> The fundamental problem with such methods is that the output can be a locally minimum solution that is not globally optimum; no efficient variants of the physical analog approach that can guarantee a global optimum solution appear possible <ref> [25] </ref>. The main contribution of this paper is a new algorithmic approach to optimal robust path-planning in environments with arbitrary cost maps. Essentially, we discard the usual mix of shortest-path algorithms and graph search techniques, and instead employ a more general combinatorial approach involving network flows [12]. <p> In the special case where the cost function is binary, Dijkstra's algorithm is applicable via the following well-known technique <ref> [25] </ref>: augment the environment by growing each obstacle (as well as the region boundary) isotropically by d 2 units, then set the weight of each node in the free area to some constant, while the weight of any node in an area covered by an obstacle is set to infinity.
Reference: [26] <author> J. P. Laumond, </author> <title> Feasible trajectories for mobile robots with kinematic and environment constraints, </title> <booktitle> Preprints of the Intl. Conf. on Intelligent Systems, </booktitle> <year> (1986), </year> <pages> pp. </pages> <month> 346-354. </month> <title> [27] , Finding collision-free smooth trajectories for a non-holonomic mobile robot, </title> <booktitle> in Proc. IEEE Conf. on Foundations of Computer Science, </booktitle> <address> Milan, Italy, </address> <year> 1987, </year> <pages> pp. 1120-1123. 21 </pages>
Reference-contexts: The solution space may also be limited based on joint articulation, or the physical characteristics of control structures. Various classes of holonomic and non-holonomic kinematic constraints are discussed by Alexander [2], Alexander and Maddocks [3], Barraquand and Latombe [5] [6], Canny [8], Canny, Donald, Reif and Xavier [9], Laumond <ref> [26] </ref> [27], Li, Canny and Sastry [29], and Nelson [34]. An entirely distinct field of study incorporates robot dynamics to establish additional constraints on (kinematically planned) path solutions [25].
Reference: [28] <author> E. Lawler, </author> <title> Combinatorial Optimization: Networks and Matroids, </title> <publisher> Holt Rinehart and Winston, </publisher> <address> New York, </address> <year> 1976. </year>
Reference-contexts: algorithm for the RMPPG problem. 10 2.2 A Network Flow Based Approach To solve the robust motion planning problem in a grid, we use ideas from network flows in continua [21]. 2 For completeness of our exposition, we first review several key concepts from the theory of network flows [16] <ref> [28] </ref>.
Reference: [29] <author> Z. Li, J. F. Canny, and S. S. Sastry, </author> <title> On motion planning for dexrerous manipulation, part i: The problem formulation, </title> <booktitle> in Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <address> Scottsdale, AZ, </address> <year> 1989, </year> <pages> pp. 775-780. </pages>
Reference-contexts: Various classes of holonomic and non-holonomic kinematic constraints are discussed by Alexander [2], Alexander and Maddocks [3], Barraquand and Latombe [5] [6], Canny [8], Canny, Donald, Reif and Xavier [9], Laumond [26] [27], Li, Canny and Sastry <ref> [29] </ref>, and Nelson [34]. An entirely distinct field of study incorporates robot dynamics to establish additional constraints on (kinematically planned) path solutions [25].
Reference: [30] <author> T. Lozano-Perez, </author> <title> Spatial planning: A configuration space approach, </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-32 (1983), </volume> <pages> pp. 108-120. </pages>
Reference-contexts: This basic kinematic formulation has been augmented in several ways. For example, multiple agents may be present: this yields an environment with moving obstacles, and motivates the concept of configuration space-time <ref> [30] </ref>. The solution space may also be limited based on joint articulation, or the physical characteristics of control structures. <p> Such methods use the vertices of a graph to represent feasible points in the agent's configuration space; edges in the graph represent optimum subpaths (also called canonical paths) between these configurations. Variations include retraction methods based on Voronoi decomposition [35], and approximate cell decomposition <ref> [30] </ref>. For simple problem formulations, e.g., a point agent and convex polygonal obstacles, computational geometry techniques along with shortest-path algorithms afford efficient solutions, as surveyed by Schwartz et al. in [37].
Reference: [31] <author> J. S. B. Mitchell, </author> <title> An Algorithmic Approach to Some Problems in Terrain Navigation, in Geometric Reasoning, </title> <editor> D. Kapur and J. L. Mundy, editors, </editor> <publisher> MIT Press, </publisher> <year> 1988. </year> <title> [32] , On maximum flows in polyhedral domains, </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 40 (1990), </volume> <pages> pp. 88-123. </pages>
Reference-contexts: A large body of work has addressed the motion planning problem; for a survey, the reader is referred to Latombe [25] or Mitchell <ref> [31] </ref>. We begin our exposition by reviewing several major problem formulations and solution methods. The basic motion planning problem involves kinematic path planning for a rigid-body mobile agent which moves in an environment populated by static polygonal obstacles. In this simple paradigm, the fl T. C.
Reference: [33] <author> J. S. B. Mitchell, D. M. Mount, and C. H. Papadimitriou, </author> <title> The discrete geodesic problem, </title> <journal> SIAM J. Computing, </journal> <volume> 16 (1987), </volume> <pages> pp. 647-668. </pages>
Reference-contexts: Shortest path planning for a point moving on the boundary of a polyhedron has been studied in the computational geometry literature as the discrete geodesic problem (e.g., <ref> [33] </ref> and the related work in [32]). One readily observes that kinematic planning approaches fall into two main classes: efficient algorithms that have an underlying "shortest-path" approach, and exponential-time algorithms that rely on implicit enumeration techniques.
Reference: [34] <author> W. Nelson, </author> <title> Continuous-curvature paths for autonomous vehicles, </title> <booktitle> in Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <month> April </month> <year> 1989, </year> <pages> pp. 1260-1264. </pages>
Reference-contexts: Various classes of holonomic and non-holonomic kinematic constraints are discussed by Alexander [2], Alexander and Maddocks [3], Barraquand and Latombe [5] [6], Canny [8], Canny, Donald, Reif and Xavier [9], Laumond [26] [27], Li, Canny and Sastry [29], and Nelson <ref> [34] </ref>. An entirely distinct field of study incorporates robot dynamics to establish additional constraints on (kinematically planned) path solutions [25]. For example, gravity and friction coefficients will constrain both the path solution and the speed of traversal when the agent must avoid tip-over, sliding, and other undesirable phenomena.
Reference: [35] <author> C. O'Dunlaing and C. K. Yap, </author> <title> A retraction method for planning the motion of a disc, </title> <journal> J. Algorithms, </journal> <volume> 6 (1983), </volume> <pages> pp. 187-192. </pages>
Reference-contexts: Such methods use the vertices of a graph to represent feasible points in the agent's configuration space; edges in the graph represent optimum subpaths (also called canonical paths) between these configurations. Variations include retraction methods based on Voronoi decomposition <ref> [35] </ref>, and approximate cell decomposition [30]. For simple problem formulations, e.g., a point agent and convex polygonal obstacles, computational geometry techniques along with shortest-path algorithms afford efficient solutions, as surveyed by Schwartz et al. in [37].
Reference: [36] <author> C. H. Papadimitriou and K. Steiglitz, </author> <title> Combinatorial Optimization, </title> <publisher> Prentice-Hall, </publisher> <year> 1982. </year>
Reference-contexts: In the same work, Canny also developed the exponential-time roadmap (or silhouette) method for general kinematic motion planning. Exact path planning algorithms for polygonal objects navigating among polygonal obstacles were given by Avnaim, Boissonnat and Faverjon [4]. Papadimitriou <ref> [36] </ref> proposed an algorithm that finds a path with cost within a factor of 1 + * of optimal, and runs in time polynomial in both 1 * and the total number of vertices.
Reference: [37] <author> J. T. Schwartz, M. Sharir, and H. Hopcroft, </author> <title> Planning, Geometry and Complexity of Robot Motion, </title> <publisher> Ablex Publishing Corp., </publisher> <year> 1987. </year>
Reference-contexts: 1 Introduction To effect its goals, an autonomous mobile agent will execute a sequence of source-destination navigational tasks in the agent's configuration space. For each navigational task, the motion planning problem asks for a minimum-cost feasible path [8] [11] [25] <ref> [37] </ref>. The cost of a given solution may depend on many factors, including distance traveled, time or energy expended, and hazard probabilities encountered along the path. <p> Note that our present work does not model the dynamics of the agent: rather, we address a kinematic path planning formulation which captures important practical constraints. In general, kinematic path planning has been widely studied (see, e.g., [8] [25] <ref> [37] </ref> for surveys); a number of special cases have been well-solved, and several complexity bounds have been established. If the path solution is not constrained to lie on a grid, Canny [8] showed that path planning problems are NP-hard when the dimension of the configuration space exceeds three. <p> Variations include retraction methods based on Voronoi decomposition [35], and approximate cell decomposition [30]. For simple problem formulations, e.g., a point agent and convex polygonal obstacles, computational geometry techniques along with shortest-path algorithms afford efficient solutions, as surveyed by Schwartz et al. in <ref> [37] </ref>. Obviously, the complexity of any variant is dependent on the number of paths computed and the ease of computing each optimum subpath. With a number of formulations, exhaustive graph search methods such as depth-first branch-and-bound or A* constitute the only known optimal algorithms.
Reference: [38] <author> S. H. Suh and K. G. Shin, </author> <title> A variational dynamic programming approach to robot-path planning with a distance-safety criterion, </title> <journal> IEEE Trans. on Robotics and Automation, </journal> <volume> 4 (1988), </volume> <pages> pp. 334-349. </pages>
Reference-contexts: Alternatively, physical analog methods might be employed; these commonly involve a potential field which forces the agent to move toward the goal configuration while avoiding contact with obstacles [7] [15] [24]. Path-finding may then be accomplished by variational methods (e.g., <ref> [38] </ref>), or by classical gradient or subgradient algorithms. Other work has essentially hybridized analogs of graph search algorithms (notably the best-first and depth-first approaches) with either hierarchical or physical analog formulations.
Reference: [39] <author> T. Tsuchiya, </author> <title> On two methods for approximating minimal surfaces in parametric form, </title> <journal> Mathematics of Computation, </journal> <volume> 46 (1986), </volume> <pages> pp. 517-529. </pages>
Reference-contexts: efficiency; 2. via incremental flow techniques, the method is suitable for dynamic or on-line problems, as well as situations where early knowledge of partial solutions is helpful (i.e., requiring an anytime algorithm [14]); and 3. the method generalizes to provide a solution to the classical Plateau problem on minimal surfaces <ref> [39] </ref>, a result which is of independent interest [22] [23]. Given these advantages, we believe that our approach may well provide a new, practical basis for certain classes of autonomous agent path planning problems. The remainder of this paper is organized as follows.
Reference: [40] <author> S. Wolfram, </author> <title> Mathematica: A System for Doing Mathematics by Computer, Second Edition, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1991. </year>
Reference-contexts: complexity of O (jN j 2 ) for the d-PATH algorithm. 3 Simulation Results Our current d-PATH implementation uses ANSI C code to transform an arbitrary robust motion planning instance into a maximum-flow instance; we then use the Fortran-77 Dinic code of [18] to compute the flow, and invoke Mathematica <ref> [40] </ref> to draw the resulting path. We have tested our implementation on three classes of motion planning instances: uniformly weighted regions, environments with polygonal obstacles, and smooth randomly-costed terrains.
Reference: [41] <author> D. Zhu and J. C. Latombe, </author> <title> New heuristic algorithms for efficient hierarchical path planning, </title> <journal> IEEE Trans. on Robotics and Automation, </journal> <volume> 7 (1991), </volume> <pages> pp. 9-20. 22 </pages>
Reference-contexts: A common heuristic for reducing search complexity is the hierarchical solution method based on 2 k - trees (esp. quadtrees and octtrees) or dissections into triangular or rectanguloid cells [10] [25]. Unfortunately, the hierarchical solution approach cannot guarantee optimal solutions <ref> [41] </ref>. Alternatively, physical analog methods might be employed; these commonly involve a potential field which forces the agent to move toward the goal configuration while avoiding contact with obstacles [7] [15] [24]. Path-finding may then be accomplished by variational methods (e.g., [38]), or by classical gradient or subgradient algorithms.
References-found: 36

