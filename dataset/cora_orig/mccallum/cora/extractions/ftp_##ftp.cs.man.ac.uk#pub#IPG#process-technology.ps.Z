URL: ftp://ftp.cs.man.ac.uk/pub/IPG/process-technology.ps.Z
Refering-URL: http://www.cs.man.ac.uk/ipg/publications.html
Root-URL: http://www.cs.man.ac.uk
Title: APPLYING OBJECT-ORIENTED MODELLING TO SUPPORT PROCESS TECHNOLOGY  
Author: Fereidoon Shams-Aliee Brian C. Warboys 
Address: Manchester M13 9PL U.K.  Manchester M13 9PL U.K.  
Affiliation: Department of Computer Science University of Manchester  Department of Computer Science University of Manchester  
Abstract: Recent trends focusing on process technology applied in different domains confirm the obvious fact that a quality product can only be the result of a quality process. One of the basic requirements for improving the quality of a process is to manage its complexity by means of modelling techniques using different levels of abstraction. A simple yet powerful view for modelling a process is to represent the behaviour of its identified agents in terms of their activities and interactions with each other. To implement such a view, object-oriented modelling can be exploited for modelling the agents of a process in terms of objects and representing the dynamic behaviour of objects through the message passing and concurrent execution of these objects within a process. In this paper, the idea of employing object-orientation as a modelling technique for representing the behaviour of a process in terms of cooperative objects will be specified. The need to identify an abstract level, as an intermediate level between the object and process concepts, has been recognised and a new method for capturing such an abstract level has been developed. Based on this method the final structure of a process will be represented in terms of Petri nets. This will also represent the structure of the reusable components of a process in the form of patterns of cooperative objects, and the interface to be reused in different processes. The final model can be simulated through Petri net tools to check the specification of a process against its behaviour in terms of the cooperation of different objects playing roles within that process. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Andersen, E. P. and Reenskaug, T. </author> <year> (1992). </year> <title> System Design by Composing Structures of Interacting Objects. </title> <booktitle> In ECOOP`92 Proceedings, </booktitle> <volume> LNCS 615, </volume> <pages> pages 133-152. </pages> <publisher> Springer-Verlag. </publisher>
Reference: <author> Arapis, C. </author> <year> (1990). </year> <title> Specifying Object Life-Cycles. </title> <editor> In Tsichritzis, E. D., editor, </editor> <booktitle> Object Composition, </booktitle> <pages> pages 197-225. </pages> <institution> University de Geneve. </institution>
Reference-contexts: As defined in (Booch, 1994), a role is the face an object presents to the world at a given moment or a particular aspect, or behaviour which an object exhibits during a period of time <ref> (Arapis, 1990) </ref>. The most important point is the possible relationship between role and object concepts which provides an insight into viewing roles in terms of cooperation amongst different objects to play those roles. Figure 1 represents a many-to-many relationship between the role and the object concepts.
Reference: <author> Baldi, M., Gai, S., Jaccheri, M., and Lago, P. </author> <year> (1993). </year> <title> An Initial Experiment with Object-Oriented Software Process Modelling. </title> <institution> Department of Automation and Informatics, Polytechnic of Torino, Italy. </institution>
Reference: <author> Bastide, R., Sibertin-Blanc, C., and Palandue, P. </author> <year> (1993). </year> <title> Cooperative Objects: A concurrent, Petri-Net Based, </title> <booktitle> Object-Oriented Language. In Proceedings of the IEEE International Conference on Systems, Man and Cybernetics, </booktitle> <volume> Vol. 3, </volume> <pages> pages 286-291. </pages>
Reference: <author> Battiston, E. and Cindio, F. D. </author> <year> (1993). </year> <title> Class Orientation and Inheritance in Modular Algebraic Nets. </title> <booktitle> In Proceedings of the IEEE International Conference on Systems, Man and Cybernetics, </booktitle> <volume> Vol. 2, </volume> <pages> pages 712-723. </pages>
Reference: <author> Beck, K. and Cunningham, W. </author> <year> (1989). </year> <title> A Laboratory For Teaching Object-Oriented Thinking. </title> <booktitle> In OOP-SLA`89 Proceedings, </booktitle> <pages> pages 1-6. </pages> <booktitle> ACM SIGPLAN Notices, </booktitle> <volume> vol. 24, no. </volume> <pages> 10. </pages>
Reference-contexts: Further, Viewing roles before objects is the way to develop a high level design without committing to the existence of particular objects and the classes that support them. Characterising Roles Class, Responsibilities, Collaborators (CRC) cards were invented by Cunningham in response to a need to document collaborative design decisions <ref> (Beck and Cunningham, 1989) </ref>. CRC method has been recog-nised as a useful method for building structures of communicating objects (roles) in many object-oriented applications (Andersen and Reenskaug, 1992; Buschmann, 1993; Cain and Coplien, 1993; Reen-skauge and et al, 1992; Wirfs-Brock et al., 1990). <p> A responsibility serves as a handle for discussing potential solutions. Collaborators will send or be sent messages in the course of satisfying responsibilities. CRC cards have emerged as a simple yet effective way to analyze scenarios. First proposed by Beck and Cunningham as a tool for teaching object-oriented programming <ref> (Beck and Cunningham, 1989) </ref>, CRC cards have proven to be a useful development tool that facilitates brainstorming and enhances communication amongst developers. Beck and Cunningham suggest driving a design towards completion with the aid of execution scenarios.
Reference: <author> Becker, U. and Moldt, D. </author> <year> (1993). </year> <title> Object-Oriented Concepts for Coloured Petri Nets. </title> <booktitle> In Proceedings of the IEEE International Conference on Systems, Man and Cybernetics, </booktitle> <volume> Vol. 3, </volume> <pages> pages 279-285. </pages>
Reference: <author> Belkhatir, N. and Melo, W. L. </author> <year> (1994). </year> <title> Tempo: Defining Software Processes in an Approach Based on Objects with Roles. </title> <booktitle> In In Proceedings of the 1st International Conference on Object-Role Mod-elling, </booktitle> <address> Magnetic Island. </address>
Reference-contexts: Objects can provide such different behaviours during their life cycle. By changing the role of components in different contexts, different aspects of a component at different times can be represented through the execution of an object <ref> (Belkhatir and Melo, 1994) </ref>.
Reference: <author> Booch, G. </author> <year> (1994). </year> <title> Object-Oriented Analysis and Design with Applications. </title> <publisher> The Benjamin/Cummings Publishing Company Second Edition. </publisher>
Reference-contexts: Such an agent needs to interact with other roles, to assist part of a process. From an object perspective, roles prescribe the way we need to use objects to approach the system's goal. As defined in <ref> (Booch, 1994) </ref>, a role is the face an object presents to the world at a given moment or a particular aspect, or behaviour which an object exhibits during a period of time (Arapis, 1990).
Reference: <author> Buchs, D., Flumet, J., and Racloz, P. </author> <year> (1993). </year> <title> SANDS/CO-OPN Structured Algebraic Net Development System Concurrent Object-Oriented Petri Nets. </title> <type> Technical Report 71, </type> <institution> Uni-versite de Geneve. </institution>
Reference: <author> Buschmann, F. </author> <year> (1993). </year> <title> Rational Architecture for Object-Oriented Software Systems. </title> <type> JOOP September, </type> <pages> pages 30-41. </pages>
Reference: <author> Cain, B. G. and Coplien, J. O. </author> <year> (1993). </year> <title> A Role-Based Empirical Process Modelling Environment. </title> <booktitle> In ICSP2 Proceedings, </booktitle> <pages> pages 125-133, </pages> <address> Berlin, Ger-many. </address>
Reference-contexts: Since objects in such a representation have responsibilities, these type of classes can capture a role class which is more functionally oriented than objects. As expressed in <ref> (Cain and Coplien, 1993) </ref>, the basic abstraction in the model is role, a longstanding, stable locus of associated responsibilities in a process.
Reference: <author> Campbell, R. H. and Habermann, A. N. </author> <year> (1974). </year> <title> The Specification of Process Synchronization by Path Expressions. </title> <booktitle> In Lecture Notes in Computer Science, </booktitle> <volume> volume 16, </volume> <pages> pages 89-102. </pages> <publisher> Springer Verlag. </publisher>
Reference-contexts: As expressed in (Cain and Coplien, 1993), the basic abstraction in the model is role, a longstanding, stable locus of associated responsibilities in a process. Path expressions <ref> (Campbell and Habermann, 1974) </ref>, which originally have been derived from regular expressions to represent primitive operations such as sequence (a ; b), selection (a , b), and iteration a + or a fl , can be added to every CRC card to define a clear sequence of execution amongst responsibilities.
Reference: <editor> Conradi, R. and et al (1994). EPOSE: </editor> <title> Object-Oriented Cooperative Process Modelling, chapter three in Software process Modelling and Technology, </title> <publisher> Ed. </publisher>
Reference: <author> Anthony Finkelstein and Jeff Kramer and Bashar Nuseibeh, </author> <title> pages 33-70. </title> <publisher> Research Studies Press LTD. </publisher>
Reference: <author> Curtis, B., Kellner, M., and Over, J. </author> <year> (1992). </year> <title> Process Modeling. </title> <journal> Communications of ACM, </journal> <volume> 35(9) </volume> <pages> 75-90. </pages>
Reference-contexts: It has been advocated that an efficient process modelling approach has to focus not only on the analysis of data flow and transformations, but also on the communication and coordination of process elements <ref> (Curtis et al., 1992) </ref>. Object-oriented design is believed to be powerful enough to satisfy such requirements. Object-oriented modelling has been recognised as a powerful method for modelling in many software domains (Booch, 1994; Eliens, 1995; Rumbaugh et al., 1991). <p> However, more consideration needs to be given to the specification of processes based on objects with emphasis on exploiting objects to represent the communication and the coordination aspects as the major features of a process <ref> (Curtis et al., 1992) </ref>. In building process models based on objects, we have identified a gap between object capabilities and the process world. To overcome this problem, a level of abstraction, named role, above the object level, has been defined.
Reference: <author> Eliens, A. </author> <year> (1995). </year> <booktitle> Principles of Object-Oriented Software Development. </booktitle> <publisher> Addison-Wesley. </publisher>
Reference: <author> Garg, P. K., Mi, P., and Pham, T. </author> <year> (1994). </year> <title> The SMART Approach for Software Process Engineering. </title> <booktitle> In In Proceedings of the 16th International conference on Software Engineering, </booktitle> <pages> pages 341-350, </pages> <address> Italy. </address> <publisher> IEEE. </publisher>
Reference: <author> Jacobson, I., Ericsson, M., and Jacobson, A. </author> <year> (1995). </year> <title> The Object Advantage: Business Process Reengi-neering with Object Technology. </title> <publisher> Addison Wesley. </publisher>
Reference-contexts: Finally, viewing the design of process models in a similar way to the design of general software applications increases the adoptability of the object-oriented view as a general modelling approach since it has been applied successfully <ref> (Jacobson et al., 1995) </ref> to a new application area, in this case process technology.
Reference: <author> Johnson, R. E. </author> <year> (1992). </year> <title> Documenting Frameworks using Patterns. </title> <booktitle> In OOPSLA '92 Proceedings, </booktitle> <pages> pages 63-76. </pages> <booktitle> ACM SIGPLAN Notices, </booktitle> <volume> vol. 27, no. </volume> <pages> 10. </pages>
Reference-contexts: It has also been advocated that collaboration groups represent a reusable architectural abstraction above the level of individual objects that are essential for understanding, designing, and reusing object-oriented systems. As the result of this introduction it seems that the concepts of framework <ref> (Johnson, 1992) </ref> in object-oriented methods can be associated with the concept of role in process modelling applications.
Reference: <author> Lauer, P. E. and Campbell, R. H. </author> <year> (1975). </year> <title> A Description of the Path Expressions by Petri Nets. </title> <booktitle> In Proceedings of the 2nd ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 95-105, </pages> <address> New York, </address> <publisher> ACM. </publisher>
Reference-contexts: It is been shown that for every path that has been defined by primitive operations, there is an equivalent Petri net which semantically represents the same meaning of such path <ref> (Lauer and Campbell, 1975) </ref>. Figure 3 shows the equivalent Petri nets for such primitive operations, sequence, selection, iteration, and concurrency of path expressions. Basically, any path expression which can appear on a CRC card would be a combination of such primitive operations.
Reference: <author> Milner, R. </author> <year> (1989). </year> <title> Communication and Concurrency. </title> <publisher> Prentice-Hall. </publisher>
Reference-contexts: Without the assumption that a system or a process is composed of different components, it would be hard to represent the behaviour of that system or process <ref> (Milner, 1989) </ref>. Therefore, representing the system's components in terms of different objects provides the capability for viewing and designing the structural relationships between these objects. This can be identified as the basic requirement for the modification of a process through the changing of its structure. <p> Underlying both these notions is the assumption that each of the several parts of a system has its own identity, which persists through time <ref> (Milner, 1989) </ref>. Therefore, such parts can be mapped into objects and through the interaction of different objects, in terms of message passing, we will be able to represent communication amongst these parts.
Reference: <author> Murata, T. </author> <year> (1989). </year> <title> Petri Nets: Properties, Analysis and Applications. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 77(4) </volume> <pages> 541-580. </pages>
Reference: <author> Osterweil, L. </author> <year> (1987). </year> <title> Software Processes are Soft--ware too. </title> <booktitle> In Proceedings of the 9th International Conference on Software Engineering, </booktitle> <pages> pages 2-13, </pages> <address> Monterey. </address>
Reference-contexts: Object-oriented design is believed to be powerful enough to satisfy such requirements. Object-oriented modelling has been recognised as a powerful method for modelling in many software domains (Booch, 1994; Eliens, 1995; Rumbaugh et al., 1991). The idea that software processes are software too <ref> (Osterweil, 1987) </ref> implies the extension of the use of object-oriented modelling methods to process mod-elling.
Reference: <author> Peters, L. and Schultz, R. </author> <year> (1993). </year> <title> The Application of Petri-Nets in Object-Oriented Enterprise Simulations. </title> <booktitle> In Proceedings of the 26th Hawaii International Conference on System Science, </booktitle> <volume> Vol. 4, </volume> <pages> pages 390-398. </pages> <publisher> IEEE. </publisher>
Reference-contexts: Modelling Cooperation of Objects using Petri Nets Petri nets have been used with great success in the modelling of concurrent and real-time systems (Mu-rata, 1989; Peterson, 1981). Extending Petri nets to simulate processes has also the potential for increasing management's ability to understand and improve business processes <ref> (Peters and Schultz, 1993) </ref>. In recent years, Petri nets have been applied for the representation, simulation, and formal proving in many object-oriented research domains (Bastide et al., 1993; Battiston and Cindio, 1993; Becker and Moldt, 1993; Buchs et al., 1993). <p> and communication. * Transitions: can be assumed to be methods or operations of objects * Places: can represent states of an object, therefore, representing pre and post conditions before and after execution of a method (transition) * Arcs: are messages exchanged between objects * Tokens: can represent instances of objects <ref> (Peters and Schultz, 1993) </ref>, however, their flow represents the flow of control which basically shows the enactment of a process through the activation of its components Combining Petri nets with object-oriented concepts provides a good model for representing, understanding, and enacting the behaviour of roles and finally processes.
Reference: <author> Peterson, J. L. </author> <year> (1981). </year> <title> Petri Net Theory and the Mod-elling of Systems. </title> <publisher> Prentice Hall. </publisher>
Reference: <editor> Reenskauge, T. and et al (1992). OORASS: </editor> <title> Seamless Support for the Creation and Maintenance of Object-Oriented Systems. </title> <type> JOOP October, </type> <pages> pages 27-41. </pages>
Reference: <author> Rumbaugh, J., Blaha, M., Premelani, W., Eddy, F., and Lorensen, W. </author> <year> (1991). </year> <title> Object-Oriented Mod-elling and Design. </title> <publisher> Prentice-Hall. </publisher>
Reference: <author> Shams-Aliee, F. and Warboys, B. C. </author> <year> (1995). </year> <title> Roles Represent Patterns. </title> <booktitle> In the Workshop on Pattern Languages of Object-Oriented Programs at ECOOP'95, </booktitle> <address> Aarhus University, Denmark. </address>
Reference: <author> Singh, B. and Rein, G. L. </author> <year> (1992). </year> <title> Role Interaction Nets (RINs): A Process Description Formalism. </title> <type> Technical Report CT-083-92, </type> <institution> MCC. </institution>
Reference-contexts: UNDERLYING CONCEPTS TO CAPTURE AND MODEL PROCESSES USING OBJECTS Defining Role as an Intermediate Level Role definition is basically concerned with role theory as used for organisational coordination. Here, roles are the building blocks of organisational structures <ref> (Singh and Rein, 1992) </ref>. The role concept has been used slightly differently in different contexts although basically with the same root meaning. In process mod-elling a role is a list of responsibilities assigned to an agent to be followed in a specific order.
Reference: <author> Warboys, B. </author> <year> (1989). </year> <title> The IPSE 2.5 Project: Process Modelling as a basis for a support environment. </title> <booktitle> In Proceedings of the First International Conference on Software Development, Environments, and Factories, </booktitle> <address> Berlin. </address>
Reference-contexts: Further in playing a role such as librarian, a person object, a book class object, a file object, and some other objects can be used. In designing process models, roles are the basic building blocks of processes <ref> (Warboys, 1989) </ref>. In contrast with other software applications, role can be seen as a small application reusable in different processes. Instances of roles in a software process are project manager, design engineer, and QA engineer.
Reference: <author> Wiernga, R. and de Jonge, W. </author> <year> (1993). </year> <title> The Identification of Objects and Roles. </title> <type> Technical Report TR-267, </type> <institution> Faculty of Mathematics and Computer Science, Vrije University. </institution>
Reference-contexts: For example, depending on the level of detail that we wish to model, some objects which cooperate to play a project manager's role are project manager as a person object, documents, files, E-mail tool, and so on. In <ref> (Wiernga and de Jonge, 1993) </ref> a precise distinction between role and object concepts has been made and some good examples are provided to identify the differences between these concepts.
Reference: <author> Wirfs-Brock, R. J. and Johnson, R. E. </author> <year> (1990). </year> <title> A Survey of Current Research in Object-Oriented Design. </title> <journal> Communication of ACM, </journal> <volume> 33(9) </volume> <pages> 104-124. </pages>
Reference: <author> Wirfs-Brock, R. J. and Wilkerson, B. </author> <year> (1989). </year> <title> Object-Oriented Design: A Responsibility-Driven Approach. </title> <booktitle> In OOPSLA'89 Proceedings, </booktitle> <pages> pages 71-75. </pages>

References-found: 34

