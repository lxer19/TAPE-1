URL: ftp://ftp.cs.washington.edu/tr/1994/06/UW-CSE-94-06-04.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Title: Automatic Synthesis of Device Drivers for Hardware/Software Co-design  
Author: Elizabeth Walkup, Gaetano Borriello 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: Technical Report 94-06-04 August 16, 1994 
Abstract-found: 1
Intro-found: 1
Reference: [BCLS87] <author> T.N. Bui, S. Chaudhuri, F.T. Leighton, and M. Sipser. </author> <title> Graph bisection algoritms with good average case behavior. </title> <journal> Combina-torica, </journal> <volume> 7(2), </volume> <year> 1987. </year>
Reference-contexts: However, neither of these methods are particularly appropriate. Neither simulated annealing nor Kernighan-Lin perform well on graphs with small degree <ref> [BCLS87] </ref>, as is the case with the constraint graphs induced by the timing diagrams. <p> In addition, given a good initial partition, Kernighan-Lin does perform well [BHJL89]. Thus we hope to solve the partitioning portion of the problem using a Kernighan-Lin [KL70] style iterative improvement algorithm on top of a flow-based initial partition inspired by <ref> [BCLS87] </ref>. The graph bisection method of [BCLS87] for graphs with small ( o ( p bisection width defines a neighborhood N (v) of a vertex v to be all nodes within a given distance ( log d1 ( p n 2) where d is the degree of the nodes in the <p> In addition, given a good initial partition, Kernighan-Lin does perform well [BHJL89]. Thus we hope to solve the partitioning portion of the problem using a Kernighan-Lin [KL70] style iterative improvement algorithm on top of a flow-based initial partition inspired by <ref> [BCLS87] </ref>. The graph bisection method of [BCLS87] for graphs with small ( o ( p bisection width defines a neighborhood N (v) of a vertex v to be all nodes within a given distance ( log d1 ( p n 2) where d is the degree of the nodes in the graph) of v.
Reference: [BHJL89] <author> Thang Bui, Christopher Heigham, Curt Jones, and Tom Leighton. </author> <title> Improving the performance of the Kernighan-Lin and simulated annealing graph bisection algorithms. </title> <booktitle> In Proceedings of the 26th ACM/IEEE Design Automation Conference, </booktitle> <year> 1989. </year> <month> 13 </month>
Reference-contexts: The Kernighan-Lin method uses a cost measure which is straightforwardly updated between iterations. In addition, given a good initial partition, Kernighan-Lin does perform well <ref> [BHJL89] </ref>. Thus we hope to solve the partitioning portion of the problem using a Kernighan-Lin [KL70] style iterative improvement algorithm on top of a flow-based initial partition inspired by [BCLS87].
Reference: [Bor88] <author> Gaetano Borriello. </author> <title> A New Interface Specification Methodology and its Application to Transducer Synthesis. </title> <type> PhD thesis, </type> <institution> University of California, </institution> <month> May </month> <year> 1988. </year> <note> Report No. UCB/CSD 88/430. </note>
Reference-contexts: The problem of determining the best implementation of the driver so that it meets the timing constraints imposed by the device and makes efficient use of hardware resources can be posed as a combined scheduling and partitioning problem. Previous work in the field of interface synthesis <ref> [Bor88] </ref> considered the problem of generating glue logic to interconnect devices whose interfaces were specified by timing diagrams. The synthesized logic was guaranteed to meet all devices' timing requirements.
Reference: [Bor92] <author> Gaetano Borriello. </author> <title> Formalized timing diagrams. </title> <booktitle> In Proceedings of the European Design Automation Conference, </booktitle> <month> March </month> <year> 1992. </year>
Reference-contexts: The result, as we have seen, is a set of device driver routines and additional hardware needed for proper interfacing of the devices to the processor. Device specifications are stored in a library in a form that is independent of any processor considerations. There is a formalized timing diagram <ref> [Bor92] </ref> for each device operation. This consists of a hybrid state and timing diagram annotated with timing constraints. In addition, each device also includes information as to which device inputs can share a microcontroller port without interfering with each other.
Reference: [COB92] <author> Pai Chou, Ross Ortega, and Gaetano Borriello. </author> <booktitle> Synthesis of hardware/software interface in microcontroller-based systems. In Proceedings of the International Conference on Computer Aided Design, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: Note that in actuality one such finite state machine is shared among all device functionalities used. Issues of port allocation or memory-mapping are handled by the algorithm described in <ref> [COB92] </ref> and are outside the scope of this paper. <p> This may now require multiple instructions where one may have sufficed. In our device driver synthesis approach, the device drivers are written first without assigning microcontroller ports to device ports. A separate port assignment routine <ref> [COB92] </ref> makes the assignments with the help of the sharability information. After this step is completed, the device driver routines can be further refined to reflect the port assignment.
Reference: [CWB94] <author> Pai Chou, Elizabeth A. Walkup, and Gaetano Borriello. </author> <title> Scheduling for reactive real-time systems. </title> <booktitle> IEEE Micro, </booktitle> <month> July </month> <year> 1994. </year>
Reference-contexts: We will then interface the results of device driver synthesis with the port allocation step including the feedback to generate a different partition or schedule when a port allocation cannot be accommodated. A description of the complete system is available in <ref> [CWB94] </ref>. 7 Acknowledgements This work was supported by an NSF Graduate Fellowship (Walkup), a PYI Award (MIP-8858782), and by the ARPA/CSTO Microsystems Program under an ONR monitored contract (N00014-91-J-4041).
Reference: [GJ77] <author> Michael R. Garey and David S. Johnson. </author> <title> Two-processor scheduling with start times and deadlines. </title> <journal> SIAM Journal on Computing, </journal> <year> 1977. </year>
Reference-contexts: As would be expected, the scheduling portion alone of this problem is NP-complete. (The transformation is from 3-Partition as in <ref> [GJ79, GJ77] </ref> with timing constraints used to build jobs of appropriate duration.) Appendix A gives a reduction from 3-SAT in which the event scheduling subproblems are extremely simple.
Reference: [GJ79] <author> Michael R. Garey and David S. Johnson. Computers and Intractability. W. H. Freeman and Company, </author> <year> 1979. </year>
Reference-contexts: As would be expected, the scheduling portion alone of this problem is NP-complete. (The transformation is from 3-Partition as in <ref> [GJ79, GJ77] </ref> with timing constraints used to build jobs of appropriate duration.) Appendix A gives a reduction from 3-SAT in which the event scheduling subproblems are extremely simple.
Reference: [Gla93] <author> Bruce Gladstone. </author> <title> Specification of timing in a digital system. </title> <booktitle> ASIC and EDA, </booktitle> <pages> pages 46-52, </pages> <month> August </month> <year> 1993. </year>
Reference: [KD92] <author> David C. Ku and Giovanni De Micheli. </author> <title> Relative scheduling under timing constraints: algorithms for high-level synthesis of digital circuits. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 11(6), </volume> <month> June </month> <year> 1992. </year>
Reference-contexts: We would begin by performing the max-flow mincut algorithm followed by Kernighan-Lin iterative improvement using edges of the first three types mentioned above, and then attempt to schedule the microcontroller events using a scheduling method as in <ref> [KD92] </ref>.
Reference: [KGV83] <author> S. Kirkpatrick, C. D. Gelatt, and M. P. Vecchi. </author> <title> Optimization by simulated annealing. </title> <booktitle> Science, </booktitle> <pages> pages 671-679, </pages> <month> May </month> <year> 1983. </year>
Reference-contexts: This suggests that the partitioning portion of the problem is also difficult. 4 A Flow-Based Approach to Partitioning and Scheduling In designing an approach to solving the partitioning portion of the combined partitioning and scheduling algorithm, two methods most readily come to 7 mind: simulated annealing <ref> [KGV83] </ref>, and the Kernighan-Lin [KL70] algo-rithm. However, neither of these methods are particularly appropriate. Neither simulated annealing nor Kernighan-Lin perform well on graphs with small degree [BCLS87], as is the case with the constraint graphs induced by the timing diagrams.
Reference: [KL70] <author> B. W. Kernighan and S. Lin. </author> <title> An efficient heuristic procedure for partitioning graphs. </title> <journal> The Bell System Technical Journal, </journal> <month> February </month> <year> 1970. </year>
Reference-contexts: This suggests that the partitioning portion of the problem is also difficult. 4 A Flow-Based Approach to Partitioning and Scheduling In designing an approach to solving the partitioning portion of the combined partitioning and scheduling algorithm, two methods most readily come to 7 mind: simulated annealing [KGV83], and the Kernighan-Lin <ref> [KL70] </ref> algo-rithm. However, neither of these methods are particularly appropriate. Neither simulated annealing nor Kernighan-Lin perform well on graphs with small degree [BCLS87], as is the case with the constraint graphs induced by the timing diagrams. <p> The Kernighan-Lin method uses a cost measure which is straightforwardly updated between iterations. In addition, given a good initial partition, Kernighan-Lin does perform well [BHJL89]. Thus we hope to solve the partitioning portion of the problem using a Kernighan-Lin <ref> [KL70] </ref> style iterative improvement algorithm on top of a flow-based initial partition inspired by [BCLS87].
Reference: [Sol92] <author> Edward Solari. ISA and ESA, </author> <title> Theory and Operation. </title> <address> Annabooks, </address> <year> 1992. </year>
References-found: 13

