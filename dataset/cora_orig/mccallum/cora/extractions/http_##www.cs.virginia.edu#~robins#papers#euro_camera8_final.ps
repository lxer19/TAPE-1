URL: http://www.cs.virginia.edu/~robins/papers/euro_camera8_final.ps
Refering-URL: http://www.cs.virginia.edu/~robins/publications.html
Root-URL: http://www.cs.virginia.edu
Title: An Architecture-Independent Approach to FPGA Routing Based on Multi-Weighted Graphs  
Author: Michael J. Alexander, James P. Cohoon, Joseph L. Ganley, and Gabriel Robins 
Address: Charlottesville, VA 22903-2442  
Affiliation: Department of Computer Science, University of Virginia,  
Abstract: We propose a general framework for FPGA routing, which allows simultaneous optimization of multiple competing objectives under a smooth designer-controlled tradeoff. Our approach is based on a new multi-weighted graph formulation, enabling a theoretical performance characterization, as well as a practical implementation. Our FPGA router is architecture-independent, computationally efficient, and performs well on industrial benchmarks. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. J. Alexander and G. Robins, </author> <title> An Architecture-Independent Unified Approach to FPGA Routing, </title> <type> Tech. Rep. </type> <institution> CS-93-51, Department of Computer Science, University of Virginia, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: Similarly, we can compute the MST on each of the k induced graphs G i , and we denote these MST (G i ). We have the following bounds (proofs are omitted due to space limitations; see <ref> [1] </ref> [3] for details).
Reference: [2] <author> M. J. Alexander and G. Robins, </author> <title> High-Performance Routing for Field-Programmable Gate Arrays, </title> <booktitle> in Proc. IEEE Intl. ASIC Conf., </booktitle> <address> Rochester, NY, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: Our architecture-independent approach is based on a new and general multi-weighted graph formulation and escapes the pitfalls of the conventional global/local routing dichotomy by offering a single unified and effective method. Our techniques may also be extended to address high-performance FPGA routing <ref> [2] </ref>. 2 A Typical FPGA Architecture A typical symmetrical-array FPGA [8] consists of a rectangular array of logic blocks, separated by channels containing routing resources (i.e., channel edges, connection edges and switchboxes), as illustrated in Figure 1.
Reference: [3] <author> M. J. Alexander and G. Robins, </author> <title> A New Approach to FPGA Routing Based on Multi-Weighted Graphs, </title> <booktitle> in Proc. ACM/SIGDA International Workshop on Field-Programmable Gate Arrays, </booktitle> <address> Berkeley, CA, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: Similarly, we can compute the MST on each of the k induced graphs G i , and we denote these MST (G i ). We have the following bounds (proofs are omitted due to space limitations; see [1] <ref> [3] </ref> for details).
Reference: [4] <author> T. Barrera, J. Griffith, S. A. McKee, G. Robins, and T. Zhang, </author> <title> Toward a Steiner Engine: Enhanced Serial and Parallel Implementations of the Iterated 1-Steiner Algorithm, </title> <booktitle> in Proc. Great Lakes Symp. VLSI, </booktitle> <address> Kalamazoo, MI, </address> <month> March </month> <year> 1993, </year> <pages> pp. 90-94. </pages>
Reference-contexts: In particular, we hybridize (i) the Iterated 1-Steiner routing method of [20] (which is known to have both excellent empirical performance as well as an efficient implementation <ref> [4] </ref>) with (ii) the provably-good graph Steiner approximation scheme of [22], which can also be implemented efficiently [31]. <p> Moreover, for typical nets, I1S has average performance within 0.25% of optimal and produces optimal solu tions up to 90% of the time <ref> [4] </ref> [5]. For two pointsets P and S, define the MST savings of S with respect to P as MST (P; S) = MST (P ) MST (P [S).
Reference: [5] <author> T. Barrera, J. Griffith, G. Robins, and T. Zhang, </author> <title> Narrowing the Gap: Near-Optimal Steiner Trees in Polynomial Time, </title> <booktitle> in Proc. IEEE Intl. ASIC Conf., </booktitle> <address> Rochester, NY, </address> <month> September </month> <year> 1993, </year> <pages> pp. 87-90. </pages>
Reference-contexts: Moreover, for typical nets, I1S has average performance within 0.25% of optimal and produces optimal solu tions up to 90% of the time [4] <ref> [5] </ref>. For two pointsets P and S, define the MST savings of S with respect to P as MST (P; S) = MST (P ) MST (P [S).
Reference: [6] <author> N. B. Bhat and D. D. Hill, </author> <title> Routable Technology Mapping for LUT FPGAs, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <year> 1992, </year> <pages> pp. 95-98. </pages>
Reference-contexts: More recent work has addressed the issue of FPGA routability prediction during higher levels of the design cycle <ref> [6] </ref> [9] [28]. Routability is the likelihood of a particular placement being feasible to route using the available interconnect resources. While technology mapping and routability have been studied extensively, less attention has been focused on the actual routing. <p> This is surprising, since it has been noted that feasibility in FPGA designs is constrained by routing resources more than by logic resources [28]. Moreover it was observed that FPGA performance is often limited by routing delays, rather than by logic-block delays <ref> [6] </ref>. <p> Professor Robins is partially supported by NSF Young Investigator Award MIP-9457412. Professor Cohoon is partially supported by NSF grants MIP-9107717 and CDA-8922545. of candidate channel edges for each connection. In the technology mapping research of <ref> [6] </ref>, Steiner routing is performed by a global router; other work has adopted a more abstract model of FPGA routing [24], or explored issues such as bend reduction [30].
Reference: [7] <author> S. Brown, J. Rose, and Z. G. Vranesic, </author> <title> A Detailed Router for Field-Programmable Gate Arrays, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 11 (1992), </volume> <pages> pp. 620-628. </pages>
Reference-contexts: Moreover it was observed that FPGA performance is often limited by routing delays, rather than by logic-block delays [6]. Much previous work centered around the CGE and SEGA routers <ref> [7] </ref> [8] [23], which use a global router [25] to select a sequence fl Corresponding author is Professor Gabriel Robins, Department of Computer Science, Thornton Hall, University of Virginia, Charlottesville, VA 22903-2442, Email: robins@cs.virginia.edu, phone: (804) 982-2207, FAX: (804) 982-2214.
Reference: [8] <author> S. D. Brown, R. J. Francis, J. Rose, and Z. G. Vranesic, </author> <title> Field-Programmable Gate Arrays, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1992. </year>
Reference-contexts: Although there are a number of different commercially available FPGA technologies, an FPGA architecture generally consists of a symmetrical array of user configurable logic "blocks" or "cells" (each of which implements a portion of the design logic) and a set of interconnection resources used for routing <ref> [8] </ref>. <p> Moreover it was observed that FPGA performance is often limited by routing delays, rather than by logic-block delays [6]. Much previous work centered around the CGE and SEGA routers [7] <ref> [8] </ref> [23], which use a global router [25] to select a sequence fl Corresponding author is Professor Gabriel Robins, Department of Computer Science, Thornton Hall, University of Virginia, Charlottesville, VA 22903-2442, Email: robins@cs.virginia.edu, phone: (804) 982-2207, FAX: (804) 982-2214. Professor Robins is partially supported by NSF Young Investigator Award MIP-9457412. <p> Our techniques may also be extended to address high-performance FPGA routing [2]. 2 A Typical FPGA Architecture A typical symmetrical-array FPGA <ref> [8] </ref> consists of a rectangular array of logic blocks, separated by channels containing routing resources (i.e., channel edges, connection edges and switchboxes), as illustrated in Figure 1. <p> A switchbox allows interconnections from a given channel edge to only a subset of the channel edges on the other three sides and this interconnection pattern need not be symmetric <ref> [8] </ref>. Connection edges are used to connect logic-block pins to channel edges. <p> The code is available from the authors upon request. A common criterion used to evaluate the quality of FPGA routing solutions is the maximum width of the channels (i.e., how many edges wide are they) required to successfully route all nets of a circuit <ref> [8] </ref>. We have therefore compared the maximum channel width our router required to that required by CGE [8], using identical switchbox and interconnection options. We have tested our router on the five industrial benchmarks used in [8] (see Table 2). Table 3 compares our router with CGE on these benchmarks. <p> criterion used to evaluate the quality of FPGA routing solutions is the maximum width of the channels (i.e., how many edges wide are they) required to successfully route all nets of a circuit <ref> [8] </ref>. We have therefore compared the maximum channel width our router required to that required by CGE [8], using identical switchbox and interconnection options. We have tested our router on the five industrial benchmarks used in [8] (see Table 2). Table 3 compares our router with CGE on these benchmarks. <p> many edges wide are they) required to successfully route all nets of a circuit <ref> [8] </ref>. We have therefore compared the maximum channel width our router required to that required by CGE [8], using identical switchbox and interconnection options. We have tested our router on the five industrial benchmarks used in [8] (see Table 2). Table 3 compares our router with CGE on these benchmarks. Note that in three of the five cases, our router is able to successfully route all nets using fewer edges per channel.
Reference: [9] <author> P. K. Chan, M. D. F. Schlag, and J. Y. Zien, </author> <title> On Routability Prediction for Field-Programmable Gate Arrays, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1993, </year> <pages> pp. 326-330. </pages>
Reference-contexts: More recent work has addressed the issue of FPGA routability prediction during higher levels of the design cycle [6] <ref> [9] </ref> [28]. Routability is the likelihood of a particular placement being feasible to route using the available interconnect resources. While technology mapping and routability have been studied extensively, less attention has been focused on the actual routing.
Reference: [10] <author> K. C. Chen, J. Cong, Y. Ding, A. B. Kahng, and P. Trajmar, DAG-Map: </author> <title> Graph-Based FPGA Technology Mapping for Delay Optimization, </title> <booktitle> IEEE Design & Test of Computers, 9 (1992), </booktitle> <pages> pp. 7-20. </pages>
Reference-contexts: Partitioning and technology mapping in FPGAs has been extensively studied by e.g. <ref> [10] </ref> [15] [21] [26], where a typical goal is to minimize the maximum input-to-output circuit depth (which reduces delay) by varying the total number of logic blocks used (which in turn affects placement and routing feasibility), or some tradeoff between these two goals [27].
Reference: [11] <author> J. P. Cohoon and D. S. Richards, </author> <title> Optimal Two-Terminal fffi Wire Routing, Integration: </title> <journal> the VLSI Journal, </journal> <volume> 6 (1988), </volume> <pages> pp. 35-57. </pages>
Reference-contexts: This technique is flexible in that new criteria are easily incorporated into the model by introducing additional weight sets into the graph. Such a framework subsumes e.g., "alpha-beta" routing (which has been used for jog minimization in IC design <ref> [11] </ref> [18]), and also has practical application in non-VLSI domains [12]. Let V = fv 1 ; v 2 ; ; v n g be a set of nodes, and let E V fi V be a set of edges.
Reference: [12] <author> W. C. Collier and R. J. Weiland, </author> <title> Smart Cars, Smart Highways, </title> <journal> IEEE Spectrum, </journal> <volume> 31 (1994), </volume> <pages> pp. 27-33. </pages>
Reference-contexts: This technique is flexible in that new criteria are easily incorporated into the model by introducing additional weight sets into the graph. Such a framework subsumes e.g., "alpha-beta" routing (which has been used for jog minimization in IC design [11] [18]), and also has practical application in non-VLSI domains <ref> [12] </ref>. Let V = fv 1 ; v 2 ; ; v n g be a set of nodes, and let E V fi V be a set of edges.
Reference: [13] <author> J. L. Ganley and J. P. Cohoon, </author> <title> Routing a Multi-Terminal Critical Net: Steiner Tree Construction in the Presence of Obstacles, </title> <booktitle> in Proc. IEEE Intl. Symp. Circuits and Systems, </booktitle> <address> London, England, </address> <month> May </month> <year> 1994, </year> <pages> pp. </pages> <month> 1.113-1.116. </month>
Reference-contexts: We note that a method similar to IKMB has recently been applied to "escape graphs" to address routing in the presence of obstacles <ref> [13] </ref>. <p> On the other hand, we can show a general upper bound for metric graphs: Theorem 4.3 For any metric k-weighted graph G and tradeoff parameters ~ d, MST ( b G ( ~ d)) (n 1) P k Since most nets in typical VLSI designs contain three pins or less <ref> [13] </ref>, we derive a tighter upper bound for 3-pin nets where metricity holds (i.e., graphs with weight functions satisfying the triangle inequality dist (a; b)+ dist (b; c) dist (a; c), 8a; b; c 2 V ): Theorem 4.4 For 2-weighted metric graphs with three nodes, and any scaling vector ~
Reference: [14] <author> J. L. Ganley, M. J. Golin, and J. S. Salowe, </author> <title> Minimum Spanning Trees for Multiply-Weighted Graphs. </title> <type> unpublished manuscript, </type> <year> 1994. </year>
Reference-contexts: with three nodes, and any scaling vector ~ d = (d 1 ; d 2 ), the following holds: d 1 MST (G 1 ) + d 2 MST (G 2 ) MST ( b G ( ~ d)) 4 Recently, tighter bounds on MSTs over multi-weighted graphs were derived <ref> [14] </ref>. 5 Experimental Results We compared the performance of KMB and IKMB over 10; 000 random nets of cardinality 3, 4, 5, 7 and 10, with coordinates uniformly distributed in the range [0; : : :; 10000].
Reference: [15] <author> T. Gao, K. C. Chen, J. Cong, Y. Ding, and C. L. Liu, </author> <title> Placement and Placement Driven Technology Mapping for FPGA Synthesis, </title> <booktitle> in Proc. IEEE Intl. ASIC Conf., </booktitle> <address> Rochester, NY, </address> <month> September </month> <year> 1993, </year> <pages> pp. 87-91. </pages>
Reference-contexts: Partitioning and technology mapping in FPGAs has been extensively studied by e.g. [10] <ref> [15] </ref> [21] [26], where a typical goal is to minimize the maximum input-to-output circuit depth (which reduces delay) by varying the total number of logic blocks used (which in turn affects placement and routing feasibility), or some tradeoff between these two goals [27].
Reference: [16] <author> M. Garey and D. S. Johnson, </author> <title> The Rectilinear Steiner Problem is NP-Complete, </title> <journal> SIAM J. Applied Math., </journal> <volume> 32 (1977), </volume> <pages> pp. 826-834. </pages>
Reference-contexts: A second major result established that despite this restriction on the solution space, the MRST problem remains NP-complete <ref> [16] </ref>, prompting a large number of heuristics, as surveyed in [19]. The best known MRST heuristic is the Iterated 1-Steiner (I1S) algorithm [20], which always performs strictly better than 3 2 times optimal and achieves almost 11% average improvement over MST cost.
Reference: [17] <author> M. Hanan, </author> <title> On Steiner's Problem With Rectilinear Distance, </title> <journal> SIAM J. Applied Math., </journal> <volume> 14 (1966), </volume> <pages> pp. 255-265. </pages>
Reference-contexts: Research on the MRST problem has been guided by several fundamental results. First, Hanan <ref> [17] </ref> has shown that there always exists an MRST with Steiner points chosen from the intersection of all the horizontal and vertical lines passing through all the points in P .
Reference: [18] <author> T. C. Hu and T. Shing, </author> <title> The ff-fi Routing, in VLSI Circuit Layout: Theory and Design, </title> <address> New York, 1985, </address> <publisher> IEEE Press, </publisher> <pages> pp. 139-143. </pages>
Reference-contexts: This technique is flexible in that new criteria are easily incorporated into the model by introducing additional weight sets into the graph. Such a framework subsumes e.g., "alpha-beta" routing (which has been used for jog minimization in IC design [11] <ref> [18] </ref>), and also has practical application in non-VLSI domains [12]. Let V = fv 1 ; v 2 ; ; v n g be a set of nodes, and let E V fi V be a set of edges.
Reference: [19] <author> F. K. Hwang, D. S. Richards, and P. Winter, </author> <title> The Steiner Tree Problem, </title> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: A second major result established that despite this restriction on the solution space, the MRST problem remains NP-complete [16], prompting a large number of heuristics, as surveyed in <ref> [19] </ref>. The best known MRST heuristic is the Iterated 1-Steiner (I1S) algorithm [20], which always performs strictly better than 3 2 times optimal and achieves almost 11% average improvement over MST cost. <p> The GSMT problem is NP-complete <ref> [19] </ref>, and thus in order to remain computationally efficient, we must resort to heuristic solutions.
Reference: [20] <author> A. B. Kahng and G. Robins, </author> <title> A New Class of Iterative Steiner Tree Heuristics With Good Performance, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 11 (1992), </volume> <pages> pp. 893-902. </pages>
Reference-contexts: With this in mind, we propose a hybrid FPGA routing framework that combines both geometric and combinatorial techniques, and which simultaneously enjoys the attractive properties of each while retaining computational efficiency. In particular, we hybridize (i) the Iterated 1-Steiner routing method of <ref> [20] </ref> (which is known to have both excellent empirical performance as well as an efficient implementation [4]) with (ii) the provably-good graph Steiner approximation scheme of [22], which can also be implemented efficiently [31]. <p> A second major result established that despite this restriction on the solution space, the MRST problem remains NP-complete [16], prompting a large number of heuristics, as surveyed in [19]. The best known MRST heuristic is the Iterated 1-Steiner (I1S) algorithm <ref> [20] </ref>, which always performs strictly better than 3 2 times optimal and achieves almost 11% average improvement over MST cost. Moreover, for typical nets, I1S has average performance within 0.25% of optimal and produces optimal solu tions up to 90% of the time [4] [5]. <p> Figure 4 shows a graph and a Steiner minimum tree spanning the highlighted subset of the nodes; the graph Steiner problem is defined as follows: The Iterated 1-Steiner (I1S) Algorithm <ref> [20] </ref> Input: A set P of n points Output: A rectilinear Steiner tree over P S = ; While T = fx 2 H (P )jMST (P [ S; fxg) &gt; 0g 6= ; Do Find x 2 T with maximum MST (P [ S; fxg) S = S [ fxg
Reference: [21] <author> K. Karplus, Xmap: </author> <title> a Technology Mapper for Table-lookup Field-Programmable Gate Arrays, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1991, </year> <pages> pp. 240-243. </pages>
Reference-contexts: Partitioning and technology mapping in FPGAs has been extensively studied by e.g. [10] [15] <ref> [21] </ref> [26], where a typical goal is to minimize the maximum input-to-output circuit depth (which reduces delay) by varying the total number of logic blocks used (which in turn affects placement and routing feasibility), or some tradeoff between these two goals [27].
Reference: [22] <author> L. Kou, G. Markowsky, and L. Berman, </author> <title> A Fast Algorithm for Steiner Trees, </title> <journal> Acta Informatica, </journal> <volume> 15 (1981), </volume> <pages> pp. 141-145. </pages>
Reference-contexts: In particular, we hybridize (i) the Iterated 1-Steiner routing method of [20] (which is known to have both excellent empirical performance as well as an efficient implementation [4]) with (ii) the provably-good graph Steiner approximation scheme of <ref> [22] </ref>, which can also be implemented efficiently [31]. We show that the resulting combination of these two methods inherits the best characteristics of its two component methods. 3.1 Overview of Iterated 1-Steiner The cost of an edge between two points in the Man-hattan plane is the rectilinear distance between them. <p> The GSMT problem is NP-complete [19], and thus in order to remain computationally efficient, we must resort to heuristic solutions. The algorithm of Kou, Markowsky and Berman <ref> [22] </ref> solves the GSMT problem in polynomial time and is guaranteed to yield solu tions never more than 2 (1 1 L ) times optimal, where L is the minimum number of leaves in any optimal solution. <p> We denote the resulting tree as KMB and the cost of this tree as KMB. A formal description of the KMB method is given in Figure 5. The KMB Algorithm <ref> [22] </ref> Input: A graph G = (V; E) with edge weights w ij and a net N V Output: A low-cost tree T 0 = (V 0 ; E 0 ) spanning N (i.e.
Reference: [23] <author> G. G. Lemieux and S. D. Brown, </author> <title> A Detailed Routing Algorithm for Allocating Wire Segments in Field-Programmable Gate Arrays, </title> <booktitle> in Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <address> Lake Arrowhead, CA, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Moreover it was observed that FPGA performance is often limited by routing delays, rather than by logic-block delays [6]. Much previous work centered around the CGE and SEGA routers [7] [8] <ref> [23] </ref>, which use a global router [25] to select a sequence fl Corresponding author is Professor Gabriel Robins, Department of Computer Science, Thornton Hall, University of Virginia, Charlottesville, VA 22903-2442, Email: robins@cs.virginia.edu, phone: (804) 982-2207, FAX: (804) 982-2214. Professor Robins is partially supported by NSF Young Investigator Award MIP-9457412.
Reference: [24] <author> F. D. Lewis and W. C. Pong, </author> <title> A Negative Reinforcement Method of PGA Routing, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1993, </year> <pages> pp. 601-605. </pages>
Reference-contexts: Professor Cohoon is partially supported by NSF grants MIP-9107717 and CDA-8922545. of candidate channel edges for each connection. In the technology mapping research of [6], Steiner routing is performed by a global router; other work has adopted a more abstract model of FPGA routing <ref> [24] </ref>, or explored issues such as bend reduction [30]. We propose the first unified general framework for FPGA routing, where multiple competing objectives can be optimized simultaneously under a smooth designer-controlled tradeoff.
Reference: [25] <author> J. Rose, </author> <title> Parallel Global Routing for Standard Cells, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 9 (1990), </volume> <pages> pp. 1085-1095. </pages>
Reference-contexts: Moreover it was observed that FPGA performance is often limited by routing delays, rather than by logic-block delays [6]. Much previous work centered around the CGE and SEGA routers [7] [8] [23], which use a global router <ref> [25] </ref> to select a sequence fl Corresponding author is Professor Gabriel Robins, Department of Computer Science, Thornton Hall, University of Virginia, Charlottesville, VA 22903-2442, Email: robins@cs.virginia.edu, phone: (804) 982-2207, FAX: (804) 982-2214. Professor Robins is partially supported by NSF Young Investigator Award MIP-9457412.
Reference: [26] <author> K. Roy, B. Guan, and C. Sechen, </author> <title> FPGA MCM Partitioning and Placement, </title> <booktitle> in Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <address> Lake Arrowhead, CA, </address> <month> April </month> <year> 1993, </year> <pages> pp. 211-212. </pages>
Reference-contexts: Partitioning and technology mapping in FPGAs has been extensively studied by e.g. [10] [15] [21] <ref> [26] </ref>, where a typical goal is to minimize the maximum input-to-output circuit depth (which reduces delay) by varying the total number of logic blocks used (which in turn affects placement and routing feasibility), or some tradeoff between these two goals [27].
Reference: [27] <author> M. Schlag, J. Kong, and P. K. Chan, </author> <title> Routability-Driven Technology Mapping for LookUp Table-Based FP-GAs, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <year> 1992, </year> <pages> pp. 86-90. </pages>
Reference-contexts: FPGAs has been extensively studied by e.g. [10] [15] [21] [26], where a typical goal is to minimize the maximum input-to-output circuit depth (which reduces delay) by varying the total number of logic blocks used (which in turn affects placement and routing feasibility), or some tradeoff between these two goals <ref> [27] </ref>. More recent work has addressed the issue of FPGA routability prediction during higher levels of the design cycle [6] [9] [28]. Routability is the likelihood of a particular placement being feasible to route using the available interconnect resources.
Reference: [28] <author> S. Trimberger and M. R. Chene, </author> <title> Placement-Based Partitioning for Lookup-Table-Based FPGAs, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <year> 1992, </year> <pages> pp. 91-94. </pages>
Reference-contexts: More recent work has addressed the issue of FPGA routability prediction during higher levels of the design cycle [6] [9] <ref> [28] </ref>. Routability is the likelihood of a particular placement being feasible to route using the available interconnect resources. While technology mapping and routability have been studied extensively, less attention has been focused on the actual routing. <p> While technology mapping and routability have been studied extensively, less attention has been focused on the actual routing. This is surprising, since it has been noted that feasibility in FPGA designs is constrained by routing resources more than by logic resources <ref> [28] </ref>. Moreover it was observed that FPGA performance is often limited by routing delays, rather than by logic-block delays [6].
Reference: [29] <author> S. M. Trimberger, </author> <title> Field-Programmable Gate Array Technology, </title> <editor> S. M. Trimberger, editor, </editor> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1994. </year>
Reference-contexts: 1 Introduction Field-programmable gate arrays (FPGAs) are an inexpensive and flexible design alternative to custom integrated circuits. FPGAs are reusable high-density ASICs that can be easily (re)configured by the user, which has made them a popular "low risk" way to implement digital designs <ref> [29] </ref> [32]. Although there are a number of different commercially available FPGA technologies, an FPGA architecture generally consists of a symmetrical array of user configurable logic "blocks" or "cells" (each of which implements a portion of the design logic) and a set of interconnection resources used for routing [8]. <p> This indicates that our router is relatively thrifty in its utilization of the available resources, and can produce feasible routings where other routers cannot. FPGAs are available in several standard sizes, each with a fixed number of edges per channel <ref> [29] </ref>; clearly being able to successfully route designs using fewer resources will enable the usage of smaller (and cheaper) standard-sized parts, or may allow designs to be implemented using fewer fixed-size FPGAs when the design cannot fit on a single FPGA chip.
Reference: [30] <author> B. Tseng, J. Rose, and S. Brown, </author> <title> Improving FPGA Routing Architectures Using Architecture and CAD Interactions, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer Design, </booktitle> <year> 1992, </year> <pages> pp. 99-104. </pages>
Reference-contexts: In the technology mapping research of [6], Steiner routing is performed by a global router; other work has adopted a more abstract model of FPGA routing [24], or explored issues such as bend reduction <ref> [30] </ref>. We propose the first unified general framework for FPGA routing, where multiple competing objectives can be optimized simultaneously under a smooth designer-controlled tradeoff.
Reference: [31] <author> Y. F. Wu, P. Widmayer, and C. K. Wong, </author> <title> A Faster Approximation Algorithm for the Steiner Problem in Graphs, </title> <journal> Acta Informatica, </journal> <volume> 23 (1986), </volume> <pages> pp. 223-229. </pages>
Reference-contexts: In particular, we hybridize (i) the Iterated 1-Steiner routing method of [20] (which is known to have both excellent empirical performance as well as an efficient implementation [4]) with (ii) the provably-good graph Steiner approximation scheme of [22], which can also be implemented efficiently <ref> [31] </ref>. We show that the resulting combination of these two methods inherits the best characteristics of its two component methods. 3.1 Overview of Iterated 1-Steiner The cost of an edge between two points in the Man-hattan plane is the rectilinear distance between them.
Reference: [32] <author> Xilinx, </author> <title> The Programmable Gate Array Data Book, </title> <publisher> Xil-inx, Inc., </publisher> <address> San Jose, California, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction Field-programmable gate arrays (FPGAs) are an inexpensive and flexible design alternative to custom integrated circuits. FPGAs are reusable high-density ASICs that can be easily (re)configured by the user, which has made them a popular "low risk" way to implement digital designs [29] <ref> [32] </ref>. Although there are a number of different commercially available FPGA technologies, an FPGA architecture generally consists of a symmetrical array of user configurable logic "blocks" or "cells" (each of which implements a portion of the design logic) and a set of interconnection resources used for routing [8].
References-found: 32

