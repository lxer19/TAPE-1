URL: http://diva.eecs.berkeley.edu/~sitea/KUHSGROUP/POSTSCRIPT/DAC93.ps
Refering-URL: http://diva.eecs.berkeley.edu/~sitea/KUHSGROUP/publications.html
Root-URL: 
Title: Quadratic Boolean Programming for Performance-Driven System Partitioning  
Author: Minshine Shih Ernest S. Kuh 
Address: Berkeley, CA 94720  
Affiliation: Department of EECS, University of California,  
Abstract: We discovered and mathematically proved that a partitioning problem under timing and capacity constraints can be formulated exactly as a Quadratic Boolean Programming Problem. This new formulation allows arbitrary component sizes, arbitrary capacities of partitions, arbitrary interconnection costs and delay models between partitions. We then found a generalization/enhancement of Burkard's heuristic to efficiently solve the problem. Seven industrial circuits were used to compare our method against two other heuristics based on the traditional approach of component interchanges. Test results showed the superiority of our new method in terms of both solution quality and CPU usage, for problems under very tight Timing and Capacity Constraints. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Balas and J.B. Mazzola, </author> <title> "Quadratic 0-1 Programming by a New Linearization," </title> <booktitle> Presented at the joint ORSA/TIMS National Meeting, </booktitle> <address> Washington, D.C. </address> <year> 1980, </year>
Reference-contexts: Now let us define ! to be a constant vector satisfying ! r s=1 then we define for every solution vector u (k) at iteration k s = r=1 (k) (k) (k) MN X ! r u r (4) The following theorem is due to Balas and Mazzola <ref> [1] </ref>. Theorem 2 Every optimal solution y fl of min y2S y T ^ Q y corresponds uniquely to an optimal solution of min z; such that z MN X r y r ~ (5) 4.2 Burkard's Heuristic Expression (5) provides a linearization of the Quadratic Program ming Problem.
Reference: [2] <author> M. Shih, E.S. Kuh and R.-S. Tsay, </author> <title> "Integer Programming Techniques for Multiway System Partitioning under Timing and Capacity Constraints," </title> <booktitle> Proceedings, 1993 European DAC, </booktitle> <year> 1993, </year> <month> pp.294-298 </month>
Reference-contexts: In other words, given an "initial" component assignment which violates timing and capacity constraints, we want to find a "feasible (legal)" assignment that minimally deviates from the initial assignment. In a previous work <ref> [2] </ref> we calculated the deviation of a component by Manhattan distance between the positions of the initial assignment and the final assignment, times the size of that component. This is due to the consideration that a larger component should be less desirable to move. <p> Therefore P P (1; 0) is exactly the MCM/TCM partitioning problem described above. This problem is solved in <ref> [2] </ref>. 2.2 Special Cases : GAP and LAP For a Partitioning Problem P P (1; 0) with no C2 (Timing Constraints), it is called a Generalized Assignment Problem (GAP). This problem has been intensively studied in the past ten years and efficient heuristics have been found to solve it [12]. <p> We allow arbitrary interconnection cost (e.g. Manhattan wire length, quadratic wire length, or just total number of wire crossings) for GFM and GKL. A set of 7 industrial examples used in an earlier paper <ref> [2] </ref> were used to compare all 3 approaches. The sizes of the circuits are shown in the Table I. In each circuit, the components correspond to functional blocks in the high level design and have different sizes ranging about 2 orders of magnitude in the same circuit.
Reference: [3] <author> M. Shih and E.S. Kuh, </author> <title> "Quadratic Boolean Programming for Performance-Driven System Partitioning," </title> <note> Memorandum No. </note> <institution> UCB/ERL M93/19, University of Califor-nia at Berkeley, </institution> <year> 1993, </year>
Reference-contexts: Now we wish to embed the Timing Constraints C2 into cost matrix Q to form an augmented matrix Q 0 and solve a Quadratic Boolean Programming Problem using Q 0 without Timing Constraints. In the appendix of <ref> [3] </ref> we proved that such an embedding is always possible and we gave explicit expression to compute the new cost matrix Q 0 . That is, minimize y T 0 y; subject to C1; C3 is exactly a solution to our original problem. <p> This condition is stated in the following theorem (for definitions and proof, see <ref> [3] </ref>): a c 1 2 Theorem 1 (Sufficient Condition for Optimality of Solutions) Let Q be coincident to ^ Q over R and a minimum solution y fl of QBP ( ^ Q ) also satisfies y fl 2 F R .
Reference: [4] <author> R.E. Burkard and T. Bonniger, </author> <title> "A Heuristic for Quadratic Boolean Programs with Applications to Quadratic Assignment Problems," </title> <journal> European Journal of Operational Research, 1983, </journal> <volume> 13, </volume> <month> pp.372-386, </month>
Reference-contexts: Furthermore, they cannot take Timing Constraints into considerations. Our new formulation allows arbitrary component sizes, arbitrary capacities of partitions, arbitrary interconnection costs and delay models between partitions. To solve the Quadratic Boolean Programming problem, we generalized and enhanced an existing heuristic first proposed by Burkard <ref> [4] </ref>, fl Acknowledgement: This work is supported by the Semiconductor Research Corporation under grant 93-DC-008. which he applied to solve the Quadratic Assignment Problem (QAP). We found that the heuristic can be applied to a much more general class of problems instead of just QAP's. <p> This is the special case where the assignment A must be a permutation ' : J ! J . Despite extensive research on this problem, there had not been ef fective algorithms or heuristics to solve it until recently <ref> [4] </ref>. Moreover, all existing methods can only handle problem sizes up to 50 components. <p> Therefore for simplicity of notations, in the rest of this paper we only treat problems in the form of P P (1; 1). 3.1 Basic Transformation Here we derive a key relationship which Burkard <ref> [4] </ref> used implicitly in his work. Since no formal justification were given in [4] we give our own derivation here. <p> Therefore for simplicity of notations, in the rest of this paper we only treat problems in the form of P P (1; 1). 3.1 Basic Transformation Here we derive a key relationship which Burkard <ref> [4] </ref> used implicitly in his work. Since no formal justification were given in [4] we give our own derivation here. We transform the 2-dimensional solution matrix [x ij ] into a 1-dimensional column vector y of height M N by defining y r = x ij for r = i + (j 1) fi M . <p> However, directly solving expression (5) requires tremen dous amount of storage and time. Therefore Burkard <ref> [4] </ref> proposed the following heuristic. STEP 1. Initialize k 1; h (0) STEP 2. Compute bounds ! r according to expression ( 3) STEP 3.
Reference: [5] <author> E.R. Barnes, </author> <title> "An Algorithm for Partitioning the Nodes of a Graph," </title> <journal> SIAM Journal of Algebraic and Discrete Methods, 1982, </journal> <volume> 3(4) </volume> <pages> 541-550, </pages>
Reference: [6] <author> E.R. Barnes, A. Vannelli, and J.Q. Walker, </author> <title> "An New Heuristic for Partitioning the Nodes of a Graph," </title> <journal> SIAM Journal of Discrete Mathematics, 1988, </journal> <volume> 1(3) </volume> <pages> 299-305, </pages>
Reference: [7] <author> T. Lengauer, </author> <title> Combinatorial Algorithms for Integrated Circuit Layout, </title> <booktitle> 1990, </booktitle> <address> Chap 6, pp.285-286, </address>
Reference: [8] <author> B.W. Kernighan and S. Lin, </author> <title> "An Efficient Heuristic Procedure for Partitioning Graphs," </title> <journal> The Bell System Technical Journal, </journal> <volume> 49(2). </volume> <month> Feb. </month> <year> 1970. </year> <month> pp.291-307 </month>
Reference-contexts: Also since u (k) r is binary, we only need addition operations and multiplications can be avoided. 5 Experimental Results Since there is no existing method for comparison, we developed two partitioning methods based on Kernighan & Lin <ref> [8] </ref> type of component interchange. The first one is a generalization of Fiduccia & Mattheyses'[9] approach - GFM, moving one component at a time. Associated with each component are (M 1) gain entries, each entry representing the potential gain if that component is moved to the corresponding partition.
Reference: [9] <author> C.M. Fiduccia and R.M. Mattheyses, </author> <title> "An Linear Time Heuristic for Improving Network Partitions," </title> <booktitle> Proc. 19th Design Automation Conference, </booktitle> <year> 1982, </year> <month> pp.175-181 </month>
Reference: [10] <author> Y. Wei and C. Cheng, </author> <title> "Toward Efficient Hierarchical Designs by Ratio Cut Partitioning," </title> <booktitle> Proc. IEEE Int. Conf. on Computer-Aided Design, </booktitle> <year> 1989, </year> <month> pp.298-301 </month>
Reference-contexts: 1 Introduction Given a circuit or system consisting of interconnected components, there are two main types of partitioning problems. The first type of partitioning problem does not have a fixed underlying partition topology and therefore uses a "Ratio-Cut" cost function <ref> [10] </ref> as the objective. This is useful when we wish to determine the structure of the circuit and discover the so-called "natural clusters" of the circuit. The second type has a fixed, existing partition topology, which includes capacity for each partition, interconnection costs and delay models between partitions.
Reference: [11] <author> R.R. Tummala and E.J. Rymaszewski, </author> <title> "Microelectronics Packaging Handbook, </title> <journal> Chap. </journal> <volume> 16," </volume> <publisher> Van Nostrand Reinhold, </publisher> <year> 1989 </year>
Reference: [12] <author> S. Martello and P. Toth, </author> <title> "Knapsack Problems," </title> <booktitle> 1990, </booktitle> <address> Chap 7, pp.189-220 </address>
Reference-contexts: This problem has been intensively studied in the past ten years and efficient heuristics have been found to solve it <ref> [12] </ref>. For a Generalized Assignment Problem with M = N and s j = c i = constant; 8i 2 I and j 2 J , it becomes the well known Linear Assignment Problem (LAP). <p> Therefore in STEP 5 and STEP 7 we are actually solving Generalized Assignment Problems, which are generalizations of Linear Assignment Problems. We use an existing heuristic due to Martello and Toth <ref> [12] </ref> to solve the Generalized Assignment Problems. When computing (k) vector in STEP 4, each (k) s takes M N multiplications and the total computation for the whole vector is M 2 N 2 .
References-found: 12

