URL: ftp://st.cs.uiuc.edu/pub/papers/frameworks/conduits+.ps
Refering-URL: http://st-www.cs.uiuc.edu/users/johnson/professional.html
Root-URL: http://www.cs.uiuc.edu
Email: hueni@glue.ch  johnson@cs.uiuc.edu  engel@tech.ascom.ch  
Phone: fax: +41 31 301 4433 phone: +41 31 305 0311  phone: 217-244-0093  fax: +41 31 999 27 41 phone: +41 31 999 42 73  
Title: A Framework for Network Protocol Software  
Author: Hermann Huni Ralph Johnson Robert Engel 
Address: Ralligweg 10 CH-3012 Bern, Switzerland  1304 W. Springfield Ave. Urbana IL 61801  Morgenstrasse 129 CH-3018 Bern  
Affiliation: GLUE Software Engineering  Dept. of Computer Science University of Illinois  Ascom Tech AG  
Abstract: Writing software to control networks is important and difficult. It must be efficient, reliable, and flexible. Conduits+ is a framework for network software that has been used to implement the signalling system of a multi-protocol ATM 1 access switch. An earlier version was used to implement TCP/IP. It reduces the complexity of network software, makes it easier to extend or modify network protocols, and is sufficiently efficient. Conduits+ shows the power of a compo-nentized object-oriented framework and of common object-oriented design patterns. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Abbott, M. B. and Peterson, L. L. </author> <year> (1993). </year> <title> A language-based approach to protocol implementation. </title> <journal> IEEE/ACM Transaction on Networking, </journal> <volume> 1(1). </volume>
Reference-contexts: Thus, each kind of conduit required a separate subclass, and adding new protocols required much more development and testing. Another excellent source of inspiration, although just using object-based technology, was some follow-on work of the x-kernel group on a language for protocol implementations called Morpheus <ref> (Abbott and Peterson, 1993) </ref>. The authors claim that: Mor-pheus' benefits could not be duplicated by adding predefined classes to a general object-oriented language like C ++ since it would lack the knowledge of common patterns of protocol operation invocation that Morpheus exploits to optimize.
Reference: <author> Beck, K. and Johnson, R. </author> <year> (1994). </year> <title> Patterns generate architectures. </title> <booktitle> In European Conference on Object-Oriented Programming, </booktitle> <pages> pages 139-149, </pages> <address> Bologna, Italy. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: However, we describe the problem they solve and the design that results when they are applied. We have found patterns to be a useful way to describe the design of a framework <ref> (Beck and Johnson, 1994) </ref>. The graphic notation that we use to depict our architecture throughout this paper is similar to Booch's object-diagrams (Booch, 1994). This object-scenario notation was invented by GLUE Software Engineering primarily for teaching object-oriented software engineering (Huni and Metz, 1992) using C ++ .
Reference: <author> Booch, G. </author> <year> (1994). </year> <title> Object Oriented Analysis and Design with Applications. </title> <publisher> Benjanim/Cummings. </publisher>
Reference-contexts: We have found patterns to be a useful way to describe the design of a framework (Beck and Johnson, 1994). The graphic notation that we use to depict our architecture throughout this paper is similar to Booch's object-diagrams <ref> (Booch, 1994) </ref>. This object-scenario notation was invented by GLUE Software Engineering primarily for teaching object-oriented software engineering (Huni and Metz, 1992) using C ++ . While developing this framework, it was extensively used to communicate and document design-situations and has shown a lot of expressive power.
Reference: <author> Engel, R. </author> <year> (1995). </year> <title> Signalling in ATM networks: Experiences with an object-oriented solution. </title> <booktitle> In International Phoenix Conference on Computers and Communications. IEEE. </booktitle>
Reference: <author> Gamma, E., Helm, R., Johnson, R., and Vlissides, J. </author> <year> (1995). </year> <title> Design Patterns, Elements of Object-Oriented Software. </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: We describe the evolution of Conduits+ in terms of a sequence of design patterns. Design patterns are descriptions of communicating objects and classes that are customized to solve a general design problem in a particular context. The design patterns we use have all been described elsewhere <ref> (Gamma et al., 1995) </ref>, so we do not describe them in detail here. However, we describe the problem they solve and the design that results when they are applied. We have found patterns to be a useful way to describe the design of a framework (Beck and Johnson, 1994). <p> Protocols delegate their behavior to their state object, thus letting the protocol change its behavior when its state changes. A protocol changes its state by replacing its old state-object with a new one. The State pattern in the Design Pattern book <ref> (Gamma et al., 1995) </ref> gives a broad interface to both the context (Protocol) and the state-object (State). This interface has an operation for each possible event. Thus, a TCP protocol conduit would have operations like OpenConnection, CloseConnection, and Send, and it would delegate all these operations to its state object.
Reference: <author> Huni, H. and Metz, I. </author> <year> (1992). </year> <title> Teaching object-oriented software architecture by example: The games factory. </title> <booktitle> In OOPSLA Educators Symposium Proceedings. ACM. </booktitle>
Reference-contexts: The graphic notation that we use to depict our architecture throughout this paper is similar to Booch's object-diagrams (Booch, 1994). This object-scenario notation was invented by GLUE Software Engineering primarily for teaching object-oriented software engineering <ref> (Huni and Metz, 1992) </ref> using C ++ . While developing this framework, it was extensively used to communicate and document design-situations and has shown a lot of expressive power. Conduits+ is being used in a commercial product.
Reference: <author> Ingalls, D. </author> <year> (1986). </year> <title> A simple technique for handling multiple polymorphism. </title> <journal> SIGPLAN Notices, </journal> <volume> 21(11). </volume> <pages> ITU-T (1988-1993). </pages> <editor> Recommendation Z.100: </editor> <title> Specification and Description Language. </title> <type> ITU-T. </type>
Reference-contexts: Class State is tightly coupled to all of the Messenger classes, since it must implement all the operations that any of them perform on it. Notice that messengers and states use double-dispatching <ref> (Ingalls, 1986) </ref>. The first dispatch is to the messenger, and it performs the second dispatch on the state. Thus, the eventual function on the state depends on both the class of the messenger and the class of the state.
Reference: <author> Johnson, R. E. and Foote, B. </author> <year> (1988). </year> <title> Designing reusable classes. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 1(2) </volume> <pages> 22-35. </pages>
Reference-contexts: Documenting this framework helps communi cate the underlying model and how it works. Conduits+ is an example of a black-box framework, i.e. a framework in which components are reused mostly by composing instances <ref> (Johnson and Foote, 1988) </ref>. In contrast, a white-box framework is one in which components are reused mostly by inheritance. White-box frameworks get their name from the fact that their users tend to have to know more about the implementation of the components they reuse.
Reference: <author> Wirfs-Brock, R., Wilkerson, B., and Wiener, L. </author> <year> (1990). </year> <title> Designing Object-Oriented Software. </title> <publisher> Prentice Hall. </publisher>
Reference: <author> Zweig, J. M. and Johnson, R. E. </author> <year> (1990). </year> <title> The conduit: a communication abstraction in c++. </title> <booktitle> In USENIX C++ Conference. USENIX. </booktitle> <pages> 12 </pages>
Reference-contexts: Conduits was originally designed by Jonathan Zweig for his MS thesis <ref> (Zweig and Johnson, 1990) </ref> and used to implement TCP/IP. But this version did not separate Mux from Protocol, did not use the Visitor pattern, and did not have ConduitFactory. Thus, each kind of conduit required a separate subclass, and adding new protocols required much more development and testing.
References-found: 10

