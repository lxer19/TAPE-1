URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/rbd/www/papers/cmticmc.ps.Z
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/rbd/www/bib-interactiveperformance.html
Root-URL: 
Title: The CMU MIDI Toolkit  
Author: Roger B. Dannenberg Roger B. Dannenberg 
Note: Copyright (C) 1985  
Address: Pittsburgh, PA 15213 U.S.A.  
Affiliation: Computer Science Department and Center for Art and Technology Carnegie Mellon University  
Abstract: The CMU MIDI Toolkit is a collection of programs for experimental computer music education, composition, performance, and research. The programs are intended to allow low-cost commercial synthesizers to be used in experimental and educational applications. The CMU MIDI Toolkit features a text-based score language and translator, a real-time programming environment, and it supports arbitrary tuning and rhythm. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Collinge, D. J. MOXIE: </author> <title> A Language for Computer Music Performance. </title> <editor> In W. Buxton (editor), </editor> <booktitle> Proceedings of the International Computer Music Conference 1984, </booktitle> <pages> pages 217-220. </pages> <booktitle> International Computer Music Association, </booktitle> <year> 1985. </year>
Reference-contexts: In other respects, the pitch material is radically altered. The use of this tuning mechanism is completely optional. If no tuning is specified, then notes are not translated and no pitch bend commands are sent. 4. Moxc Moxc is based on the language MOXIE <ref> [1] </ref>. The best way to describe Moxc is to present a program that illustrates its features. The following program plays a sequence of notes with diminishing velocities to simulate an echo.
Reference: [2] <author> Dannenberg, Roger B., Paul McAvinney, and Marilyn T. Thomas. </author> <note> Carnegie-Mellon University Studio Report. </note> <editor> In W. Buxton (editor), </editor> <booktitle> Proceedings of the International Computer Music Conference 1984, </booktitle> <pages> pages 281-286. </pages> <booktitle> International Computer Music Association, </booktitle> <year> 1984. </year>
Reference-contexts: An attribute may not contain any blanks. The attributes are: time, pitch, loudness, voice number, duration, and timbre. Adagio has been used to program a variety of hardware and software synthesizers, and the Adagio compiler can be easily adapted to new environments <ref> [2] </ref>. Although not originally intended for MIDI, Adagio works quite well as a representation for MIDI scores. The MIDI version of Adagio currently uses the timbre attribute to select a MIDI ``program'' (synthesizer preset).
Reference: [3] <author> Dannenberg, F. K., R. B. Dannenberg, and P. Miller. </author> <title> Teaching Programming to Musicians. </title> <editor> In D. Mansfield (editor), </editor> <booktitle> Proceedings Fourth Symposium on Small Computers in the Arts, </booktitle> <pages> pages 114-122. </pages> <publisher> IEEE Computer Society, </publisher> <address> Washington, D.C., </address> <month> October, </month> <year> 1984. </year> <month> 6 </month>
Reference-contexts: Applications CMT is quite practical for realizing computer music compositions. The composition ``Jimmy Durante Boulevard,'' presented at this conference, is implemented using CMT. CMT is also useful as a vehicle for introducing programming to musicians <ref> [3] </ref>. The CMT manual documents a subset of C that is adequate for simple compositional work, and the system is used in computer music courses at CMU. Another application of CMT is to supplement an existing computer music installation.
References-found: 3

