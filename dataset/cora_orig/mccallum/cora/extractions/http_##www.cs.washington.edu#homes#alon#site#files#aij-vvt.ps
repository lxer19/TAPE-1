URL: http://www.cs.washington.edu/homes/alon/site/files/aij-vvt.ps
Refering-URL: http://www.cs.washington.edu/homes/alon/site/PaperAbstractPresentation_bib35.html
Root-URL: 
Email: alon@cs.washington.edu  mcr@lri.lri.fr  
Title: Verification of Knowledge Bases based on Containment Checking  
Author: Alon Y. Levy Marie-Christine Rousset 
Keyword: knowledge base verification, description logics, Horn rules, database theory, query containment, hybrid languages.  
Note: The work was done while this author was at AT&T Laboratories, Florham  
Address: Seattle, Washington, 98195  Building 490, 91405 Orsay Cedex, France  Park, New Jersey.  
Affiliation: Dept. of Computer Science and Engineering University of Washington  Dept. of Computer Science (L.R.I) C.N.R.S University of Paris Sud  
Abstract: Building complex knowledge based applications requires encoding large amounts of domain knowledge. After acquiring knowledge from domain experts, much of the effort in building a knowledge base goes into verifying that the knowledge is encoded correctly. A knowledge base is verified if it can be shown that certain constraints always hold between the inputs and the outputs. We consider the knowledge base verification problem for Horn rule knowledge bases and for three kinds of constraints: I/O consistency constraints, I/O dependency constraints and Input completeness constraints. For the first two cases, we establish tight complexity results on the problem, and show in what cases it is decidable. In the third case, we show that the problem is, in general, undecidable, and we identify two decidable cases. In our analysis we show how the properties of the problem vary depending on the presence of recursion in the Horn rules, the presence of the interpreted predicates =, , &lt; and 6=, and the presence of negation in the antecedents of the rules. Our approach to the verification problem is based on showing a close relationship to the problem of query containment, studied in the database literature. This connection also provides novel algorithms for the knowledge base verification problem. Finally, we provide the first algorithm for verifying hybrid knowledge bases that combine the expressive power of Horn rules and the description logic ALCN R. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alfred Aho, Yehoshua Sagiv, and Jeffrey D. Ullman. </author> <title> Equivalence of relational expressions. </title> <journal> SIAM Journal of Computing, </journal> (8)2:218-246, 1979. 
Reference-contexts: The main tool we use to obtain our results is the connection that we establish between the VVT problem and the problem of query containment, that has been extensively studied in the database literature (e.g., <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>). We show that viewing the VVT problem from the perspective of query containment provides a uniform view of the VVT problem which covers the different cases mentioned above. Specifically, our contributions are the following: 1. <p> problem corresponds to the case of Definition 2 where the sentence C is ) :P out . 4 Verification and Query Containment Our approach to solving the verification problem is based on showing a close connection to the problem of query containment, that has been considered in the database literature <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>. In this section we formalize the connection between the VVT problem and the query containment problem in the presence of I/O consistency and I/O dependency constraints.
Reference: [2] <editor> Marc Ayel and Marie-Christine Rousset, editors. </editor> <booktitle> Proceedings of the European Symposium on Verification and Validation of Knowledge Based Systems, </booktitle> <address> EUROVAV-95, </address> <year> 1995. </year>
Reference-contexts: We also show how the complexity depends on the exact form of the Horn rules. When the Horn rules are recursive, the VVT problem is undecidable. In contrast, previous work (e.g., <ref> [13, 25, 2] </ref>) provided complexity results for particular algorithms (as opposed to complexity of the problem itself). Furthermore, previous treatments were limited to the I/O consistency problem, and only for some cases of non recursive Horn rules. 3.
Reference: [3] <author> F. Baader and B. </author> <title> Hollunder. A terminological knowledge representation system with complete inference algorithm. </title> <booktitle> In In Proceedings of the Workshop on Processing Declarative Knowledge, PDK-91, Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 67-86. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Furthermore, previous treatments were limited to the I/O consistency problem, and only for some cases of non recursive Horn rules. 3. We provide the first sound and complete algorithm for verifying hybrid knowledge bases, combining the expressive powers of function-free Horn rules and the description logic ALCN R <ref> [3, 6] </ref> (this hybrid language, carin, is described in [20, 19]). Description logics are useful in this context because they are especially designed to model and express constraints on domains with a rich hierarchical structure. Previous work [17, 26] provided only incomplete algorithms for verifying such knowledge bases. 4. <p> Predicate names appearing in the Horn rules that do not appear in the terminology are called ordinary predicates. Ordinary predicates can be of any arity. In this paper we consider the language carin-ALCN R. We briefly review the description logic ALCN R <ref> [3, 6] </ref> below. 15 6.1.1 The Description Logic ALCN R A description logic contains unary relations (called concepts) which represent sets of objects in the domain and binary relations (called roles) which describe relationships between objects.
Reference: [4] <author> Catriel Beeri and Moshe Vardi. </author> <title> A proof procedure for data dependencies. </title> <journal> Journal of the ACM, </journal> <volume> 31(4) </volume> <pages> 718-741, </pages> <year> 1984. </year>
Reference-contexts: The definition of the predicate P in was given by a set of Horn rules. The class of input completeness constraints enables a richer specification of the set of legal inputs. Formally, input completeness constraints are given by tuple generating dependencies (tgd's) <ref> [11, 4, 40] </ref>, which are sentences of the form: 8 X [(9 Z)p 1 ( X 1 ; Z 1 ) ^ : : : ^ p n ( X n ; Z n ) ) (9 Y )q 1 ( X 0 m ; Y m )]: The predicates p <p> As a result, in Section 5 we obtain novel algorithms for solving these problems as well as the fundamental complexity results concerning it. In Section 7 we reconsider the VVT problem in the presence of input completeness constraints, and relate it to a problem of tgd entailment <ref> [11, 4, 40] </ref>. Since the tgd entailment problem is undecidable under very restrictive conditions, we identify subcases of the VVT problem that can be reformulated in terms of query containment in a hybrid language.
Reference: [5] <author> Fatma Bouali, Stephane Loiseau, and Marie-Christine Rousset. </author> <title> Verification and revision of rule bases. </title> <booktitle> In Proceedings of the 17th British Computer Society Conference on Expert Systems, </booktitle> <address> Cambridge, United Kingdom, </address> <year> 1997. </year>
Reference-contexts: The latter approach, for hybrid knowledge bases has been considered in [27]. Finally, the system can also propose to the designer refinements to the knowledge base that would make it consistent <ref> [5, 41] </ref>.
Reference: [6] <author> Martin Buchheit, Francesco M. Donini, and Andrea Schaerf. </author> <title> Decidable reasoning in terminological knowledge representation systems. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 1 </volume> <pages> 109-138, </pages> <year> 1993. </year>
Reference-contexts: Furthermore, previous treatments were limited to the I/O consistency problem, and only for some cases of non recursive Horn rules. 3. We provide the first sound and complete algorithm for verifying hybrid knowledge bases, combining the expressive powers of function-free Horn rules and the description logic ALCN R <ref> [3, 6] </ref> (this hybrid language, carin, is described in [20, 19]). Description logics are useful in this context because they are especially designed to model and express constraints on domains with a rich hierarchical structure. Previous work [17, 26] provided only incomplete algorithms for verifying such knowledge bases. 4. <p> Predicate names appearing in the Horn rules that do not appear in the terminology are called ordinary predicates. Ordinary predicates can be of any arity. In this paper we consider the language carin-ALCN R. We briefly review the description logic ALCN R <ref> [3, 6] </ref> below. 15 6.1.1 The Description Logic ALCN R A description logic contains unary relations (called concepts) which represent sets of objects in the domain and binary relations (called roles) which describe relationships between objects.
Reference: [7] <author> A.K. Chandra and P.M. Merlin. </author> <title> Optimal implementation of conjunctive queries in relational databases. </title> <booktitle> In Proceedings of the Ninth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 77-90, </pages> <year> 1977. </year> <month> 24 </month>
Reference-contexts: The main tool we use to obtain our results is the connection that we establish between the VVT problem and the problem of query containment, that has been extensively studied in the database literature (e.g., <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>). We show that viewing the VVT problem from the perspective of query containment provides a uniform view of the VVT problem which covers the different cases mentioned above. Specifically, our contributions are the following: 1. <p> problem corresponds to the case of Definition 2 where the sentence C is ) :P out . 4 Verification and Query Containment Our approach to solving the verification problem is based on showing a close connection to the problem of query containment, that has been considered in the database literature <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>. In this section we formalize the connection between the VVT problem and the query containment problem in the presence of I/O consistency and I/O dependency constraints. <p> Algorithms for the query containment problem for Horn rules without interpreted predicates and negation are given in <ref> [7, 28, 29, 8] </ref>. The algorithm and complexity results for the first case of each of the corollaries follows from [28]. The complexity results of the second case follow from [8]. The undecidability results follows from [32].
Reference: [8] <author> Surajit Chaudhuri and Moshe Vardi. </author> <title> On the equivalence of recursive and nonrecur--sive datalog programs. </title> <booktitle> In The Proceedings of the Eleventh ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> San Diego, CA., </address> <pages> pages 55-66, </pages> <year> 1992. </year>
Reference-contexts: The main tool we use to obtain our results is the connection that we establish between the VVT problem and the problem of query containment, that has been extensively studied in the database literature (e.g., <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>). We show that viewing the VVT problem from the perspective of query containment provides a uniform view of the VVT problem which covers the different cases mentioned above. Specifically, our contributions are the following: 1. <p> problem corresponds to the case of Definition 2 where the sentence C is ) :P out . 4 Verification and Query Containment Our approach to solving the verification problem is based on showing a close connection to the problem of query containment, that has been considered in the database literature <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>. In this section we formalize the connection between the VVT problem and the query containment problem in the presence of I/O consistency and I/O dependency constraints. <p> Algorithms for the query containment problem for Horn rules without interpreted predicates and negation are given in <ref> [7, 28, 29, 8] </ref>. The algorithm and complexity results for the first case of each of the corollaries follows from [28]. The complexity results of the second case follow from [8]. The undecidability results follows from [32]. <p> Algorithms for the query containment problem for Horn rules without interpreted predicates and negation are given in [7, 28, 29, 8]. The algorithm and complexity results for the first case of each of the corollaries follows from [28]. The complexity results of the second case follow from <ref> [8] </ref>. The undecidability results follows from [32]. <p> In order to apply ATMS techniques for recursive rules, one has to devise a termination condition for the generation of labels (or unfoldings). In this case, the termination condition described in <ref> [8] </ref> can be used as a basis for developing an ATMS-based algorithm for VVT. 3. For hybrid knowledge bases, no extension of ATMS algorithms has been considered.
Reference: [9] <author> Johan de Kleer. </author> <title> An assumption-based TMS. </title> <journal> Artificial Intelligence, </journal> <volume> 28, </volume> <year> 1986. </year>
Reference-contexts: It is instructive to take a closer look at the actual algorithms used in the literature for each of these problems. In the VVT community, most of the work has used algorithms based on Assumption-based Truth Maintenance Systems (ATMS) <ref> [9] </ref>. In the database community, containment algorithms are usually explained in terms of representative databases. There are several points to note in a comparison: 1. The exposition of the query containment algorithms in the literature has usually been for the purpose of analyzing the complexity of the problem.
Reference: [10] <author> E.W Dijkstra. </author> <title> A Discipline of Programming. </title> <publisher> Prentice Hall, </publisher> <year> 1976. </year>
Reference-contexts: On the other hand, in the program verification literature (e.g. <ref> [10] </ref>), such formulations are standard. That is, they attempt to check whether for any input satisfying some preconditions, the outputs of the program satisfy certain postconditions. The definition of the VVT problem w.r.t.
Reference: [11] <author> R. Fagin. </author> <title> Horn clauses and database dependecies. </title> <journal> Journal of the ACM, </journal> <volume> 29(4) </volume> <pages> 952-983, </pages> <year> 1982. </year>
Reference-contexts: The definition of the predicate P in was given by a set of Horn rules. The class of input completeness constraints enables a richer specification of the set of legal inputs. Formally, input completeness constraints are given by tuple generating dependencies (tgd's) <ref> [11, 4, 40] </ref>, which are sentences of the form: 8 X [(9 Z)p 1 ( X 1 ; Z 1 ) ^ : : : ^ p n ( X n ; Z n ) ) (9 Y )q 1 ( X 0 m ; Y m )]: The predicates p <p> As a result, in Section 5 we obtain novel algorithms for solving these problems as well as the fundamental complexity results concerning it. In Section 7 we reconsider the VVT problem in the presence of input completeness constraints, and relate it to a problem of tgd entailment <ref> [11, 4, 40] </ref>. Since the tgd entailment problem is undecidable under very restrictive conditions, we identify subcases of the VVT problem that can be reformulated in terms of query containment in a hybrid language.
Reference: [12] <author> D. Fensel, A Schonegge, R. Groenboom, and B. Wielenga. </author> <title> Specification and verification of kbs. </title> <booktitle> In Proceedings of the ECAI-96 workshop on Validation, Verification and Refinement of KBS, </booktitle> <year> 1996. </year>
Reference-contexts: As for the other forms of the problem, we are the first to treat input completeness constraints, and I/O dependency constraints were considered only very little. In particular, the need for verifying a knowledge base w.r.t. I/O dependency constraints has been pointed out in <ref> [24, 12] </ref>. It should be noted that testing a knowledge base w.r.t. a set of test cases can be seen as a very restricted case of the I/O dependency VVT problem, but the algorithms considered to perform such testing simply apply the KB to the (finite set of) test cases.
Reference: [13] <author> Allen Ginsberg. </author> <title> Knowledge base reduction: A new approach to checking knowledge bases for inconsistency and redundancy. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <year> 1988. </year>
Reference-contexts: We also show how the complexity depends on the exact form of the Horn rules. When the Horn rules are recursive, the VVT problem is undecidable. In contrast, previous work (e.g., <ref> [13, 25, 2] </ref>) provided complexity results for particular algorithms (as opposed to complexity of the problem itself). Furthermore, previous treatments were limited to the I/O consistency problem, and only for some cases of non recursive Horn rules. 3. <p> In fact, the results we present in the subsequent sections can also be viewed as providing the complexity of these specialized forms of entailment. Definition 3 differs slightly from related definitions proposed in the literature (e.g., <ref> [13, 25, 14, 23] </ref>). The definition in those works did not distinguish between the predicates P in and P out , and used a single bad predicate for defining illegal inputs and outputs. As we discuss in Section 8, previous definitions can be easily reformulated in our framework. <p> Ginsberg and Williamson [14] identified a subset of OPS5 rules that can be analyzed as logical rules, and presented an algorithm to do so. Their work did not consider recursive rules or interpreted predicates. Verification of non recursive logical rule knowledge bases has originally been considered by Ginsberg <ref> [13] </ref> and Rousset [25]. A sound and complete algorithm for verifying non recursive Horn rules with interpreted predicates was given in [23, 39]. As stated earlier, these works did not establish the complexity of the verification problem. <p> Our work provides the first sound and complete algorithm for verifying hybrid knowledge bases. Definition of the verification problem: On the surface, our definition of the VVT problem in the presence of I/O consistency constraints varies slightly from previous definitions (e.g., <ref> [25, 13, 14, 23] </ref>). The definition in those works did not distinguish between the predicates P in and P out . Instead they used a single predicate, called bad, to define illegal sets 22 of ground facts.
Reference: [14] <author> Allen Ginsberg and Keith Williamson. </author> <title> Inconsistency and redundancy checking for quasi-first-order-logic knowledge bases. </title> <journal> International Journal of Expert Systems: Research and Applications, </journal> <volume> 6, </volume> <year> 1993. </year>
Reference-contexts: In fact, the results we present in the subsequent sections can also be viewed as providing the complexity of these specialized forms of entailment. Definition 3 differs slightly from related definitions proposed in the literature (e.g., <ref> [13, 25, 14, 23] </ref>). The definition in those works did not distinguish between the predicates P in and P out , and used a single bad predicate for defining illegal inputs and outputs. As we discuss in Section 8, previous definitions can be easily reformulated in our framework. <p> We now compare our work to the related work on the I/O consistency VVT problem along several axes. The form and semantics of the rules: This paper considered only rules whose semantics is given within first-order logic. Several works have considered the verification of OPS5-style production rules (e.g, <ref> [30, 14, 31] </ref>). In such rules, the right hand side of the rules is an action that may also delete facts. Ginsberg and Williamson [14] identified a subset of OPS5 rules that can be analyzed as logical rules, and presented an algorithm to do so. <p> Several works have considered the verification of OPS5-style production rules (e.g, [30, 14, 31]). In such rules, the right hand side of the rules is an action that may also delete facts. Ginsberg and Williamson <ref> [14] </ref> identified a subset of OPS5 rules that can be analyzed as logical rules, and presented an algorithm to do so. Their work did not consider recursive rules or interpreted predicates. Verification of non recursive logical rule knowledge bases has originally been considered by Ginsberg [13] and Rousset [25]. <p> Our work provides the first sound and complete algorithm for verifying hybrid knowledge bases. Definition of the verification problem: On the surface, our definition of the VVT problem in the presence of I/O consistency constraints varies slightly from previous definitions (e.g., <ref> [25, 13, 14, 23] </ref>). The definition in those works did not distinguish between the predicates P in and P out . Instead they used a single predicate, called bad, to define illegal sets 22 of ground facts.
Reference: [15] <author> Y. Gurevich and H. R. Lewis. </author> <title> The inference problem for template dependencies. </title> <booktitle> In Proceedings of the First ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 221-229, </pages> <year> 1982. </year>
Reference-contexts: I/O dependency constraints. 7 VVT in the Presence of Input Completeness Con straints In this section we consider the VVT problem in the presence of input completeness constraints. Unfortunately, since the entailment problem of tgd's is undecidable <ref> [38, 15] </ref>, it follows immediately that the VVT problem in the presence of input completeness and I/O completeness constraints is undecidable. In this section we identify the class of separable tgds, for which we show that the problem is decidable.
Reference: [16] <author> A. Klug. </author> <title> On conjunctive queries containing inequalities. </title> <journal> Journal of the ACM, </journal> <pages> pages 35(1): 146-160, </pages> <year> 1988. </year>
Reference-contexts: The main tool we use to obtain our results is the connection that we establish between the VVT problem and the problem of query containment, that has been extensively studied in the database literature (e.g., <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>). We show that viewing the VVT problem from the perspective of query containment provides a uniform view of the VVT problem which covers the different cases mentioned above. Specifically, our contributions are the following: 1. <p> problem corresponds to the case of Definition 2 where the sentence C is ) :P out . 4 Verification and Query Containment Our approach to solving the verification problem is based on showing a close connection to the problem of query containment, that has been considered in the database literature <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>. In this section we formalize the connection between the VVT problem and the query containment problem in the presence of I/O consistency and I/O dependency constraints. <p> An algorithm and the upper complexity bound for the first part of Corollaries 5.3 and 5.4 follow from <ref> [16] </ref>. The algorithm and upper bound complexity result for the second cases is given in [21]. The lower bound for the first part of the corollaries and the undecidability result follow from [37].
Reference: [17] <author> Sunro Lee and Robert M. O'Keefe. </author> <title> Subsumption anomalies in hybrid knowledge bases. </title> <journal> International Journal of Expert Systems: Research and Applications, </journal> <volume> 6, </volume> <year> 1993. </year>
Reference-contexts: Description logics are useful in this context because they are especially designed to model and express constraints on domains with a rich hierarchical structure. Previous work <ref> [17, 26] </ref> provided only incomplete algorithms for verifying such knowledge bases. 4. Finally, we consider the I/O completeness problem, and show that it is related to the problem of inference of tuple-generating dependencies (tgd's) [34]. <p> In contrast, our work provides a tight complexity bound on this problem which is 2 p . Some of the subtleties involved in verifying hybrid knowledge bases have been pointed out in <ref> [17, 26] </ref>. Our work provides the first sound and complete algorithm for verifying hybrid knowledge bases. Definition of the verification problem: On the surface, our definition of the VVT problem in the presence of I/O consistency constraints varies slightly from previous definitions (e.g., [25, 13, 14, 23]).
Reference: [18] <author> Alon Y. Levy, Alberto O. Mendelzon, Yehoshua Sagiv, and Divesh Srivastava. </author> <title> Answering queries using views. </title> <booktitle> In Proceedings of the 14th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> San Jose, CA, </address> <year> 1995. </year>
Reference-contexts: The problem has been extensively considered in database theory because it is an important technique for query optimization [34, 29] and related problems <ref> [21, 18, 33, 35] </ref>. Formally, given a set of Horn rules R and a (finite) set of ground facts G, we can entail a (finite) set of ground atomic facts for every predicate P 2 R.
Reference: [19] <author> Alon Y. Levy and Marie-Christine Rousset. CARIN: </author> <title> a representation language integrating rules and description logics. </title> <booktitle> In Proceedings of the European Conference on Artificial Intelligence, </booktitle> <address> Budapest, Hungary, </address> <year> 1996. </year>
Reference-contexts: We provide the first sound and complete algorithm for verifying hybrid knowledge bases, combining the expressive powers of function-free Horn rules and the description logic ALCN R [3, 6] (this hybrid language, carin, is described in <ref> [20, 19] </ref>). Description logics are useful in this context because they are especially designed to model and express constraints on domains with a rich hierarchical structure. Previous work [17, 26] provided only incomplete algorithms for verifying such knowledge bases. 4. <p> Sound and complete entailment algorithms for carin-ALCN R are given in <ref> [19, 20] </ref>. Note that when the Horn rules are recursive, the entailment problem for carin-ALCN R is not decidable [20]. The following example illustrates the use of carin for expressing more complex I/O dependency constraints. <p> (s; c) ) Basic (c)] ) In (s) Adv (c) ^ T ake (s; c) ) Out (s) In carin, we express this constraint by defining the following terminology and extended rule: C v 8P rev:Basic 8P rev:Basic v C Student (s) ^ C (s) ) In (s): 2 In <ref> [19] </ref> we describe an algorithm for query containment for non recursive carin-ALCN R rules. That algorithm entails the following result. Corollary 6.1: Let R be a set of extended Horn rules in carin-ALCN R without interpreted predicates, and T be a terminology in ALCN R. <p> In this case, the termination condition described in [8] can be used as a basis for developing an ATMS-based algorithm for VVT. 3. For hybrid knowledge bases, no extension of ATMS algorithms has been considered. In this case, the only existing algorithm is the one based on query containment <ref> [19] </ref>. 8.2 Future work There are two main directions in which our framework should be extended. As mentioned above, one direction is to explore in more detail the algorithmic aspects of the correspondence between the query containment and the VVT problem.
Reference: [20] <author> Alon Y. Levy and Marie-Christine Rousset. </author> <title> The limits on combining recursive horn rules and description logics. </title> <booktitle> In Proceedings of the AAAI Thirteenth National Conference on Artificial Intelligence, </booktitle> <year> 1996. </year> <month> 25 </month>
Reference-contexts: We provide the first sound and complete algorithm for verifying hybrid knowledge bases, combining the expressive powers of function-free Horn rules and the description logic ALCN R [3, 6] (this hybrid language, carin, is described in <ref> [20, 19] </ref>). Description logics are useful in this context because they are especially designed to model and express constraints on domains with a rich hierarchical structure. Previous work [17, 26] provided only incomplete algorithms for verifying such knowledge bases. 4. <p> Sound and complete entailment algorithms for carin-ALCN R are given in <ref> [19, 20] </ref>. Note that when the Horn rules are recursive, the entailment problem for carin-ALCN R is not decidable [20]. The following example illustrates the use of carin for expressing more complex I/O dependency constraints. <p> Sound and complete entailment algorithms for carin-ALCN R are given in [19, 20]. Note that when the Horn rules are recursive, the entailment problem for carin-ALCN R is not decidable <ref> [20] </ref>. The following example illustrates the use of carin for expressing more complex I/O dependency constraints. Example 5: Suppose we want to express an I/O dependency constraint stating that all the students of a given year who have previously taken only basic courses, have to take an advanced course.
Reference: [21] <author> Alon Y. Levy and Yehoshua Sagiv. </author> <title> Queries independent of updates. </title> <booktitle> In Proceedings of the 19th VLDB Conference, Dublin, Ireland, </booktitle> <pages> pages 171-181, </pages> <year> 1993. </year>
Reference-contexts: The main tool we use to obtain our results is the connection that we establish between the VVT problem and the problem of query containment, that has been extensively studied in the database literature (e.g., <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>). We show that viewing the VVT problem from the perspective of query containment provides a uniform view of the VVT problem which covers the different cases mentioned above. Specifically, our contributions are the following: 1. <p> problem corresponds to the case of Definition 2 where the sentence C is ) :P out . 4 Verification and Query Containment Our approach to solving the verification problem is based on showing a close connection to the problem of query containment, that has been considered in the database literature <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>. In this section we formalize the connection between the VVT problem and the query containment problem in the presence of I/O consistency and I/O dependency constraints. <p> The problem has been extensively considered in database theory because it is an important technique for query optimization [34, 29] and related problems <ref> [21, 18, 33, 35] </ref>. Formally, given a set of Horn rules R and a (finite) set of ground facts G, we can entail a (finite) set of ground atomic facts for every predicate P 2 R. <p> An algorithm and the upper complexity bound for the first part of Corollaries 5.3 and 5.4 follow from [16]. The algorithm and upper bound complexity result for the second cases is given in <ref> [21] </ref>. The lower bound for the first part of the corollaries and the undecidability result follow from [37]. Finally, we note that the VVT problem considered here would remain decidable also if the rules have function symbols, as long as the rules are not recursive.
Reference: [22] <author> Alon Y. Levy and Dan Suciu. </author> <title> Deciding containment for queries with complex objects and aggregations. </title> <booktitle> In Proceedings of the 16th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> Tucson, Arizona., </address> <year> 1997. </year>
Reference-contexts: The main tool we use to obtain our results is the connection that we establish between the VVT problem and the problem of query containment, that has been extensively studied in the database literature (e.g., <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>). We show that viewing the VVT problem from the perspective of query containment provides a uniform view of the VVT problem which covers the different cases mentioned above. Specifically, our contributions are the following: 1. <p> problem corresponds to the case of Definition 2 where the sentence C is ) :P out . 4 Verification and Query Containment Our approach to solving the verification problem is based on showing a close connection to the problem of query containment, that has been considered in the database literature <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>. In this section we formalize the connection between the VVT problem and the query containment problem in the presence of I/O consistency and I/O dependency constraints.
Reference: [23] <author> Stephane Loiseau and Marie-Christine Rousset. </author> <title> Formal verification of knowledge bases focused on consistency: Two experiments based on ATMS techniques. </title> <journal> International Journal of Expert Systems: Research and Applications, </journal> <volume> 6, </volume> <year> 1993. </year>
Reference-contexts: In fact, the results we present in the subsequent sections can also be viewed as providing the complexity of these specialized forms of entailment. Definition 3 differs slightly from related definitions proposed in the literature (e.g., <ref> [13, 25, 14, 23] </ref>). The definition in those works did not distinguish between the predicates P in and P out , and used a single bad predicate for defining illegal inputs and outputs. As we discuss in Section 8, previous definitions can be easily reformulated in our framework. <p> Their work did not consider recursive rules or interpreted predicates. Verification of non recursive logical rule knowledge bases has originally been considered by Ginsberg [13] and Rousset [25]. A sound and complete algorithm for verifying non recursive Horn rules with interpreted predicates was given in <ref> [23, 39] </ref>. As stated earlier, these works did not establish the complexity of the verification problem. In particular, the complexity of the algorithms presented in [23, 39] was shown to be exponential time (by a simple reduction from the complexity of the ATMS algorithm being used). <p> A sound and complete algorithm for verifying non recursive Horn rules with interpreted predicates was given in <ref> [23, 39] </ref>. As stated earlier, these works did not establish the complexity of the verification problem. In particular, the complexity of the algorithms presented in [23, 39] was shown to be exponential time (by a simple reduction from the complexity of the ATMS algorithm being used). In contrast, our work provides a tight complexity bound on this problem which is 2 p . <p> Our work provides the first sound and complete algorithm for verifying hybrid knowledge bases. Definition of the verification problem: On the surface, our definition of the VVT problem in the presence of I/O consistency constraints varies slightly from previous definitions (e.g., <ref> [25, 13, 14, 23] </ref>). The definition in those works did not distinguish between the predicates P in and P out . Instead they used a single predicate, called bad, to define illegal sets 22 of ground facts. <p> It is easy to reformulate this definition of the VVT problem into our formalism. In particular, in rules defining bad that contain only base predicates in their antecedents we replace bad by P in . In the other rules, bad is replaced by P out . Loiseau and Rousset <ref> [23] </ref> describe a variant on the above definition. They identify a subset of the rules in the knowledge base sure as being sure rules (e.g., rules that have been previously verified).
Reference: [24] <author> Christine Pierret. </author> <title> Correctness of methods w.r.t problem specifications. </title> <booktitle> In Proceedings of the ECAI-96 workshop on Validation, Verification and Refinement of KBS, </booktitle> <year> 1996. </year>
Reference-contexts: As for the other forms of the problem, we are the first to treat input completeness constraints, and I/O dependency constraints were considered only very little. In particular, the need for verifying a knowledge base w.r.t. I/O dependency constraints has been pointed out in <ref> [24, 12] </ref>. It should be noted that testing a knowledge base w.r.t. a set of test cases can be seen as a very restricted case of the I/O dependency VVT problem, but the algorithms considered to perform such testing simply apply the KB to the (finite set of) test cases.
Reference: [25] <author> Marie-Christine Rousset. </author> <title> On the consistency of knowledge bases: </title> <booktitle> the COVADIS system. In Proceedings of the 8th European Conference on Artificial Intelligence (ECAI 88), </booktitle> <address> Munich, Germany, </address> <year> 1988. </year>
Reference-contexts: We also show how the complexity depends on the exact form of the Horn rules. When the Horn rules are recursive, the VVT problem is undecidable. In contrast, previous work (e.g., <ref> [13, 25, 2] </ref>) provided complexity results for particular algorithms (as opposed to complexity of the problem itself). Furthermore, previous treatments were limited to the I/O consistency problem, and only for some cases of non recursive Horn rules. 3. <p> In fact, the results we present in the subsequent sections can also be viewed as providing the complexity of these specialized forms of entailment. Definition 3 differs slightly from related definitions proposed in the literature (e.g., <ref> [13, 25, 14, 23] </ref>). The definition in those works did not distinguish between the predicates P in and P out , and used a single bad predicate for defining illegal inputs and outputs. As we discuss in Section 8, previous definitions can be easily reformulated in our framework. <p> Their work did not consider recursive rules or interpreted predicates. Verification of non recursive logical rule knowledge bases has originally been considered by Ginsberg [13] and Rousset <ref> [25] </ref>. A sound and complete algorithm for verifying non recursive Horn rules with interpreted predicates was given in [23, 39]. As stated earlier, these works did not establish the complexity of the verification problem. <p> Our work provides the first sound and complete algorithm for verifying hybrid knowledge bases. Definition of the verification problem: On the surface, our definition of the VVT problem in the presence of I/O consistency constraints varies slightly from previous definitions (e.g., <ref> [25, 13, 14, 23] </ref>). The definition in those works did not distinguish between the predicates P in and P out . Instead they used a single predicate, called bad, to define illegal sets 22 of ground facts.
Reference: [26] <author> Marie-Christine Rousset. </author> <title> Knowledge formal specifications for formal verification: a proposal based on the integration of different logical formalisms. </title> <booktitle> In Proceedings of the 11th European Conference on Artificial Intelligence (ECAI 94), </booktitle> <address> Amsterdam, Netherlands, </address> <year> 1994. </year>
Reference-contexts: Description logics are useful in this context because they are especially designed to model and express constraints on domains with a rich hierarchical structure. Previous work <ref> [17, 26] </ref> provided only incomplete algorithms for verifying such knowledge bases. 4. Finally, we consider the I/O completeness problem, and show that it is related to the problem of inference of tuple-generating dependencies (tgd's) [34]. <p> In contrast, our work provides a tight complexity bound on this problem which is 2 p . Some of the subtleties involved in verifying hybrid knowledge bases have been pointed out in <ref> [17, 26] </ref>. Our work provides the first sound and complete algorithm for verifying hybrid knowledge bases. Definition of the verification problem: On the surface, our definition of the VVT problem in the presence of I/O consistency constraints varies slightly from previous definitions (e.g., [25, 13, 14, 23]).
Reference: [27] <author> Marie-Christine Rousset and Pascale Hors. </author> <title> Modeling and verifying complex objects: A declarative approach based on description logics. </title> <booktitle> In Proceedings of the European Conference on Artificial Intelligence, </booktitle> <address> Budapest, Hungary, </address> <year> 1996. </year>
Reference-contexts: An interesting tradeoff in this case is whether to present the user with a counter example set of inputs, or to show her how the inconsistency in the knowledge base can be derived. The latter approach, for hybrid knowledge bases has been considered in <ref> [27] </ref>. Finally, the system can also propose to the designer refinements to the knowledge base that would make it consistent [5, 41].
Reference: [28] <author> Y. Sagiv and M. Yannakakis. </author> <title> Equivalence among relational expressions with the union and difference operators. </title> <journal> Journal of the ACM, </journal> <volume> 27(4) </volume> <pages> 633-655, </pages> <year> 1981. </year>
Reference-contexts: The main tool we use to obtain our results is the connection that we establish between the VVT problem and the problem of query containment, that has been extensively studied in the database literature (e.g., <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>). We show that viewing the VVT problem from the perspective of query containment provides a uniform view of the VVT problem which covers the different cases mentioned above. Specifically, our contributions are the following: 1. <p> problem corresponds to the case of Definition 2 where the sentence C is ) :P out . 4 Verification and Query Containment Our approach to solving the verification problem is based on showing a close connection to the problem of query containment, that has been considered in the database literature <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>. In this section we formalize the connection between the VVT problem and the query containment problem in the presence of I/O consistency and I/O dependency constraints. <p> Algorithms for the query containment problem for Horn rules without interpreted predicates and negation are given in <ref> [7, 28, 29, 8] </ref>. The algorithm and complexity results for the first case of each of the corollaries follows from [28]. The complexity results of the second case follow from [8]. The undecidability results follows from [32]. <p> Algorithms for the query containment problem for Horn rules without interpreted predicates and negation are given in [7, 28, 29, 8]. The algorithm and complexity results for the first case of each of the corollaries follows from <ref> [28] </ref>. The complexity results of the second case follow from [8]. The undecidability results follows from [32].
Reference: [29] <author> Yehoshua Sagiv. </author> <title> Optimizing datalog programs. </title> <editor> In Jack Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 659-698. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1988. </year>
Reference-contexts: The main tool we use to obtain our results is the connection that we establish between the VVT problem and the problem of query containment, that has been extensively studied in the database literature (e.g., <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>). We show that viewing the VVT problem from the perspective of query containment provides a uniform view of the VVT problem which covers the different cases mentioned above. Specifically, our contributions are the following: 1. <p> problem corresponds to the case of Definition 2 where the sentence C is ) :P out . 4 Verification and Query Containment Our approach to solving the verification problem is based on showing a close connection to the problem of query containment, that has been considered in the database literature <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>. In this section we formalize the connection between the VVT problem and the query containment problem in the presence of I/O consistency and I/O dependency constraints. <p> The query containment problem is to decide whether in any minimal fixpoint model of a set of Horn rules the extension of one predicate contains the extension of another. The problem has been extensively considered in database theory because it is an important technique for query optimization <ref> [34, 29] </ref> and related problems [21, 18, 33, 35]. Formally, given a set of Horn rules R and a (finite) set of ground facts G, we can entail a (finite) set of ground atomic facts for every predicate P 2 R. <p> Algorithms for the query containment problem for Horn rules without interpreted predicates and negation are given in <ref> [7, 28, 29, 8] </ref>. The algorithm and complexity results for the first case of each of the corollaries follows from [28]. The complexity results of the second case follow from [8]. The undecidability results follows from [32].
Reference: [30] <author> James G. Schmolze and Wayne Snyder. </author> <title> A tool for testing confluence of production rules. </title> <booktitle> In Proceedings of the European Symposium on Validation and Verification of KBS, </booktitle> <address> EUROVAV-95, </address> <year> 1995. </year>
Reference-contexts: We now compare our work to the related work on the I/O consistency VVT problem along several axes. The form and semantics of the rules: This paper considered only rules whose semantics is given within first-order logic. Several works have considered the verification of OPS5-style production rules (e.g, <ref> [30, 14, 31] </ref>). In such rules, the right hand side of the rules is an action that may also delete facts. Ginsberg and Williamson [14] identified a subset of OPS5 rules that can be analyzed as logical rules, and presented an algorithm to do so.
Reference: [31] <author> James G. Schmolze and Wayne Snyder. </author> <title> Detecting redundant production rules. </title> <booktitle> In Proceedings of the AAAI Fourteenth National Conference on Artificial Intelligence, </booktitle> <year> 1997. </year>
Reference-contexts: We now compare our work to the related work on the I/O consistency VVT problem along several axes. The form and semantics of the rules: This paper considered only rules whose semantics is given within first-order logic. Several works have considered the verification of OPS5-style production rules (e.g, <ref> [30, 14, 31] </ref>). In such rules, the right hand side of the rules is an action that may also delete facts. Ginsberg and Williamson [14] identified a subset of OPS5 rules that can be analyzed as logical rules, and presented an algorithm to do so.
Reference: [32] <author> Oded Shmueli. </author> <title> Equivalence of datalog queries is undecidable. </title> <journal> Journal of Logic Programming, </journal> <volume> 15 </volume> <pages> 231-241, </pages> <year> 1993. </year>
Reference-contexts: The main tool we use to obtain our results is the connection that we establish between the VVT problem and the problem of query containment, that has been extensively studied in the database literature (e.g., <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>). We show that viewing the VVT problem from the perspective of query containment provides a uniform view of the VVT problem which covers the different cases mentioned above. Specifically, our contributions are the following: 1. <p> problem corresponds to the case of Definition 2 where the sentence C is ) :P out . 4 Verification and Query Containment Our approach to solving the verification problem is based on showing a close connection to the problem of query containment, that has been considered in the database literature <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>. In this section we formalize the connection between the VVT problem and the query containment problem in the presence of I/O consistency and I/O dependency constraints. <p> The algorithm and complexity results for the first case of each of the corollaries follows from [28]. The complexity results of the second case follow from [8]. The undecidability results follows from <ref> [32] </ref>.
Reference: [33] <author> Odysseas G. Tsatalos, Marvin H. Solomon, and Yannis E. Ioannidis. </author> <title> The GMAP: A versatile tool for physical data independence. </title> <journal> VLDB Journal, </journal> <volume> 5(2) </volume> <pages> 101-118, </pages> <year> 1996. </year> <month> 26 </month>
Reference-contexts: The problem has been extensively considered in database theory because it is an important technique for query optimization [34, 29] and related problems <ref> [21, 18, 33, 35] </ref>. Formally, given a set of Horn rules R and a (finite) set of ground facts G, we can entail a (finite) set of ground atomic facts for every predicate P 2 R.
Reference: [34] <author> Jeffrey D. Ullman. </author> <title> Principles of Database and Knowledge-base Systems, Volumes I, II. </title> <publisher> Computer Science Press, </publisher> <address> Rockville MD, </address> <year> 1989. </year>
Reference-contexts: Previous work [17, 26] provided only incomplete algorithms for verifying such knowledge bases. 4. Finally, we consider the I/O completeness problem, and show that it is related to the problem of inference of tuple-generating dependencies (tgd's) <ref> [34] </ref>. This relationship shows that in general, the VVT problem in the presence of I/O completeness constraints is undecidable. <p> The query containment problem is to decide whether in any minimal fixpoint model of a set of Horn rules the extension of one predicate contains the extension of another. The problem has been extensively considered in database theory because it is an important technique for query optimization <ref> [34, 29] </ref> and related problems [21, 18, 33, 35]. Formally, given a set of Horn rules R and a (finite) set of ground facts G, we can entail a (finite) set of ground atomic facts for every predicate P 2 R.
Reference: [35] <author> Jeffrey D. Ullman. </author> <title> Information integration using logical views. </title> <booktitle> In Proceedings of the International Conference on Database Theory, </booktitle> <year> 1997. </year>
Reference-contexts: The problem has been extensively considered in database theory because it is an important technique for query optimization [34, 29] and related problems <ref> [21, 18, 33, 35] </ref>. Formally, given a set of Horn rules R and a (finite) set of ground facts G, we can entail a (finite) set of ground atomic facts for every predicate P 2 R.
Reference: [36] <author> Ron van der Meyden. </author> <title> The complexity of querying indefinite data about linearly ordered domains. </title> <booktitle> In The Proceedings of the Eleventh ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> San Diego, CA., </address> <pages> pages 331-345, </pages> <year> 1992. </year>
Reference-contexts: The main tool we use to obtain our results is the connection that we establish between the VVT problem and the problem of query containment, that has been extensively studied in the database literature (e.g., <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>). We show that viewing the VVT problem from the perspective of query containment provides a uniform view of the VVT problem which covers the different cases mentioned above. Specifically, our contributions are the following: 1. <p> problem corresponds to the case of Definition 2 where the sentence C is ) :P out . 4 Verification and Query Containment Our approach to solving the verification problem is based on showing a close connection to the problem of query containment, that has been considered in the database literature <ref> [7, 1, 28, 16, 29, 36, 8, 32, 21, 22] </ref>. In this section we formalize the connection between the VVT problem and the query containment problem in the presence of I/O consistency and I/O dependency constraints.
Reference: [37] <author> Ron van der Meyden. </author> <title> The Complexity of Querying Indefinite Information: Defined Relations Recursion and Linear Order. </title> <type> PhD thesis, </type> <institution> Rutgers University, </institution> <address> New Brunswick, New Jersey, </address> <year> 1992. </year>
Reference-contexts: The algorithm and upper bound complexity result for the second cases is given in [21]. The lower bound for the first part of the corollaries and the undecidability result follow from <ref> [37] </ref>. Finally, we note that the VVT problem considered here would remain decidable also if the rules have function symbols, as long as the rules are not recursive.
Reference: [38] <author> Moshe Vardi. </author> <title> The implication and finite implication problems for typed template dependencies. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 28(1) </volume> <pages> 3-28, </pages> <year> 1984. </year>
Reference-contexts: I/O dependency constraints. 7 VVT in the Presence of Input Completeness Con straints In this section we consider the VVT problem in the presence of input completeness constraints. Unfortunately, since the entailment problem of tgd's is undecidable <ref> [38, 15] </ref>, it follows immediately that the VVT problem in the presence of input completeness and I/O completeness constraints is undecidable. In this section we identify the class of separable tgds, for which we show that the problem is decidable.
Reference: [39] <author> Keith Williamson and Mark Dahl. </author> <title> Knowledge base reduction for verifying rule bases containing equations. </title> <booktitle> In Proceedings of the AAAI-93 workshop on Validation and Verification of KBS, </booktitle> <year> 1993. </year>
Reference-contexts: Their work did not consider recursive rules or interpreted predicates. Verification of non recursive logical rule knowledge bases has originally been considered by Ginsberg [13] and Rousset [25]. A sound and complete algorithm for verifying non recursive Horn rules with interpreted predicates was given in <ref> [23, 39] </ref>. As stated earlier, these works did not establish the complexity of the verification problem. In particular, the complexity of the algorithms presented in [23, 39] was shown to be exponential time (by a simple reduction from the complexity of the ATMS algorithm being used). <p> A sound and complete algorithm for verifying non recursive Horn rules with interpreted predicates was given in <ref> [23, 39] </ref>. As stated earlier, these works did not establish the complexity of the verification problem. In particular, the complexity of the algorithms presented in [23, 39] was shown to be exponential time (by a simple reduction from the complexity of the ATMS algorithm being used). In contrast, our work provides a tight complexity bound on this problem which is 2 p .
Reference: [40] <author> M. Yannakakis and C. H. Papadimitriou. </author> <title> Algebric dependencies. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 25(1) </volume> <pages> 2-41, </pages> <year> 1980. </year>
Reference-contexts: The definition of the predicate P in was given by a set of Horn rules. The class of input completeness constraints enables a richer specification of the set of legal inputs. Formally, input completeness constraints are given by tuple generating dependencies (tgd's) <ref> [11, 4, 40] </ref>, which are sentences of the form: 8 X [(9 Z)p 1 ( X 1 ; Z 1 ) ^ : : : ^ p n ( X n ; Z n ) ) (9 Y )q 1 ( X 0 m ; Y m )]: The predicates p <p> As a result, in Section 5 we obtain novel algorithms for solving these problems as well as the fundamental complexity results concerning it. In Section 7 we reconsider the VVT problem in the presence of input completeness constraints, and relate it to a problem of tgd entailment <ref> [11, 4, 40] </ref>. Since the tgd entailment problem is undecidable under very restrictive conditions, we identify subcases of the VVT problem that can be reformulated in terms of query containment in a hybrid language.
Reference: [41] <author> Neli Zlatareva. </author> <title> Explaining anomalies as a basis for KB refinement. </title> <booktitle> In Proceedings of the ECAI-96 workshop on Validation, Verification and Refinement of KBS, </booktitle> <year> 1996. </year> <month> 27 </month>
Reference-contexts: The latter approach, for hybrid knowledge bases has been considered in [27]. Finally, the system can also propose to the designer refinements to the knowledge base that would make it consistent <ref> [5, 41] </ref>.
References-found: 41

