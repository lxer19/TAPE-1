URL: http://www.math.macalester.edu/~fox/cs88/papers/tambedraft.ps
Refering-URL: http://www.math.macalester.edu/~fox/cs88/readings.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: tambe@isi.edu  
Title: Agent Architectures for Flexible, Practical Teamwork  
Author: Milind Tambe 
Web: http://www.isi.edu/soar/tambe  
Address: 4676 Admiralty Way, Marina del Rey, CA 90292  
Affiliation: Information Sciences Institute and Computer Science Department University of Southern California  
Abstract: Teamwork in complex, dynamic, multi-agent domains mandates highly flexible coordination and communication. Simply fitting individual agents with precomputed coordination plans will not do, for their inflexibility can cause severe failures in teamwork, and their domain-specificity hinders reusability. Our central hypothesis is that the key to such flexibility and reusability is agent architectures with integrated teamwork capabilities. This fundamental shift in agent architectures is illustrated via an implemented candidate: STEAM. While STEAM is founded on the joint intentions theory, practical operationalization has required it to integrate several key novel concepts: (i) team synchronization to establish joint intentions; (ii) constructs for monitoring joint intentions and repair; and (iii) decision-theoretic communication selectivity (to pragmatically extend the joint intentions theory). Applications in three different complex domains, with empirical results, are presented. 1 
Abstract-found: 1
Intro-found: 1
Reference: <author> Firby, J. </author> <year> 1987. </year> <title> An investigation into reactive planning in complex domains. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI). </booktitle>
Reference-contexts: Second, given domain specificity, reusability suffers coordination has to be redesigned for each new domain. A fundamental reason for these teamwork limitations is the current agent architectures. Architectures 1 Copyright c fl1997, American Association of Artificial Intelligence (www.aaai.org). All rights reserved. such as Soar (Newell 1990), RAP <ref> (Firby 1987) </ref>, PRS (Rao et al. 1993), BB1 (Hayes-Roth, Brownston, & Gen 1995), and IRMA (Pollack 1992) facilitate an individual agent's flexible behaviors via mechanisms such as commitments and reactive plans. However, flexible individual behaviors, even if simultaneous and coordinated, do not sum up to teamwork.
Reference: <author> Gmytrasiewicz, P. J.; Durfee, E. H.; and Wehe, D. K. </author> <year> 1991. </year> <title> A decision theoretic approach to co-ordinating multi-agent interactions. </title> <booktitle> In Proceedings of International Joint Conference on Artificial Intelligence. </booktitle>
Reference-contexts: The formal approach to teamwork in (Sonenberg et al. 1994) transforms team plans into separate role-plans for execution by individuals, with rigidly embedded communications. STEAM purposely avoids such transformations, so agents can flexibly reason with (i) explicit team goals/plans; and (ii) selective communication (very important in practice). In <ref> (Gmytrasiewicz, Durfee, & Wehe 1991) </ref>, decision theory is applied for message prioritization in coordination (rather than teamwork). STEAM applies decision theory in a very different context joint intentions for communication selectivity and enhancements. Also, STEAM integrates other key facilities for teamwork, and implements this theory in real-world domains.
Reference: <author> Grosz, B. </author> <year> 1996. </year> <journal> Collaborating systems. AI magazine 17(2). </journal>
Reference-contexts: 1 Introduction ...the capabilities needed for collaboration cannot be patched on but must be designed in from the start. <ref> (Grosz 1996) </ref> Teamwork is becoming increasingly critical in many multi-agent environments, such as, virtual training (Tambe et al. 1995; Rao et al. 1993), interactive entertainment (Hayes-Roth, Brownston, & Gen 1995), internet-based information integration, RoboCup soccer (Kitano et al. 1995), and robotic space missions. <p> Thus, discourse generation and interpretation is important in COLLAGEN, but capabilities critical in STEAM such as teamwork monitoring and repair, or decision-theoretic communication selectivity are at present excluded. An additional interesting contrast is that while COLLAGEN is based on the SharedPlan theory of collaboration <ref> (Grosz 1996) </ref>, STEAM is based on the joint intentions theory. A comparative analysis of the two systems for possible cross-fertilization of ideas/techniques is an issue for future work. In team tracking (Tambe 1996b), i.e., inferring team's joint intentions, the expressiveness of team operators has been exploited.
Reference: <author> Hayes-Roth, B.; Brownston, L.; and Gen, R. V. </author> <year> 1995. </year> <title> Multiagent collaobration in directed improvisation. </title> <booktitle> In Proceedings of the International Conference on Multi-Agent Systems (ICMAS-95). </booktitle>
Reference: <author> Jennings, N. </author> <year> 1995. </year> <title> Controlling cooperative problem solving in industrial multi-agent systems using joint intentions. </title> <booktitle> Artificial Intelligence 75. </booktitle>
Reference-contexts: Teamwork in such complex domains mandates highly flexible coordination and communication to surmount the uncertainties, e.g., dynamic changes in team's goals and team members' unexpected inability to fulfill responsibilities (consider Soccer). Unfortunately, implemented multi-agent systems often rely on preplanned, domain-specific coordination that fails to provide such flexibility <ref> (Jennings 1995) </ref>. First, it is difficult to anticipate and preplan for all possible coordination failures; particularly in scaling up to complex domains. Second, given domain specificity, reusability suffers coordination has to be redesigned for each new domain. A fundamental reason for these teamwork limitations is the current agent architectures. <p> This fact, plus the ubiquity of teamwork, has led to STEAM's architectural approach. Also novel in STEAM is the illustrated reuse across domains. Furthermore, STEAM handles more complex team organizations, including subteams. Finally, STEAM substantially extends the teamwork models. For instance, while <ref> (Jennings 1995) </ref> supports team synchronization (although without the benefit of PWAGs) it does not address communication selectivity, or role-monitoring constraints and integrated role repair. (Tambe 1996a) does not consider team synchronization; and furthermore, while raising the issue of communication cost, suggests only a heuristic evaluation of communication costs and benefits.
Reference: <author> Kaminka, G., and Tambe, M. </author> <year> 1997. </year> <title> Social comparison for failure monitoring and recovery in multi-agent settings. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, (Student abstract). </booktitle>
Reference-contexts: One novel approach exploits agent tracking (Tambe & Rosenbloom 1995; Tambe 1996b) to infer teammates' high-level goals and intentions for comparison with own goals and intentions. Differences in goals and intentions may indicate coordination failures, since teammates often carry out identical or related tasks. See <ref> (Kaminka & Tambe 1997) </ref> for more details. Among related work, STEAM is closely related to the recent model-based collaborative systems (Jennings 1995; Tambe 1996a). These systems provide agents with a model of teamwork based on joint intentions.
Reference: <author> Kitano, H.; Asada, M.; Kuniyoshi, Y.; Noda, I.; and Os-awa, E. </author> <year> 1995. </year> <title> Robocup: The robot world cup initiative. </title> <booktitle> In Proceedings of IJCAI-95 Workshop on Entertainment and AI/Alife. </booktitle>
Reference-contexts: needed for collaboration cannot be patched on but must be designed in from the start. (Grosz 1996) Teamwork is becoming increasingly critical in many multi-agent environments, such as, virtual training (Tambe et al. 1995; Rao et al. 1993), interactive entertainment (Hayes-Roth, Brownston, & Gen 1995), internet-based information integration, RoboCup soccer <ref> (Kitano et al. 1995) </ref>, and robotic space missions. Teamwork in such complex domains mandates highly flexible coordination and communication to surmount the uncertainties, e.g., dynamic changes in team's goals and team members' unexpected inability to fulfill responsibilities (consider Soccer). <p> Then, other company members fly forward to the battle position. Here, individual pilots repeatedly mask (hide) their helicopters and unmask to shoot missiles at enemy targets. In the second domain, Transport (Figure 2), transports protected by escort helicopters fly troops to land. Our third domain is RoboCup synthetic soccer <ref> (Kitano et al. 1995) </ref>. The Attack domain is illustrative of the teamwork challenges. In our initial implementation, based on Soar, a standard operator hierarchy was defined for each individual pilot. Figure 3 shows a portion of this hierarchy (for now, ignore the brackets [] shown around some operators).
Reference: <author> Levesque, H. J.; Cohen, P. R.; and Nunes, J. </author> <year> 1990. </year> <title> On acting together. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence. </booktitle> <address> Menlo Park, Calif.: </address> <publisher> AAAI press. </publisher>
Reference-contexts: However, flexible individual behaviors, even if simultaneous and coordinated, do not sum up to teamwork. A common example provided is ordinary traffic, which although simultaneous and coordinated, is not teamwork <ref> (Levesque, Cohen, & Nunes 1990) </ref>. Indeed, theories of collaboration point to fundamentally novel mental constructs as underlying teamwork, such as team goals, mutual beliefs and joint commitments (Grosz 1996; Levesque, Cohen, & Nunes 1990), absent in current agent architectures. <p> Yet, given the ubiquity of teamwork, architectural constructs for flexible, reusable teamwork capabilities are critical. This paper therefore proposes a fundamental shift in agent architectures to integrate teamwork capabilities. It presents one implemented candidate: STEAM (a Shell for TEAMwork). 2 Founded on the joint intentions theory <ref> (Levesque, Cohen, & Nunes 1990) </ref>, STEAM enables explicit representation of team goals and plans, and team's joint commitments. In practice, to enable multiple team members to maintain a coherent view of their team's goals/plans, STEAM incorporates (i) team synchronization to establish joint intentions; and (ii) monitoring and repair capabilities. <p> Thus, agents are forced to rely on the problematic domain-specific coordination plans. This issue is not specific to the Soar architecture, but the entire family of architectures mentioned in Section 1. 3 STEAM Foundations: Joint Intentions STEAM is founded on the joint intentions theory <ref> (Levesque, Cohen, & Nunes 1990) </ref>. A joint intention of a team Q is based on its joint commitment, which is defined as a joint persistent goal (JPG). <p> STEAM maintains a private state for an agent to apply its individual operators; and a team state to apply team operators. A team state is an agent's (abstract) model of the team's mutual beliefs about 3 WAG was originally called WG in <ref> (Levesque, Cohen, & Nunes 1990) </ref>, but later termed WAG in (Smith & Cohen 1996). the world, e.g., in the Transport domain, the team state includes the coordinates of the landing zone. STEAM can also maintain subteam states for subteam participation.
Reference: <author> Newell, A. </author> <year> 1990. </year> <title> Unified Theories of Cognition. </title> <address> Cam-bridge, Mass.: </address> <publisher> Harvard Univ. Press. </publisher>
Reference-contexts: Second, given domain specificity, reusability suffers coordination has to be redesigned for each new domain. A fundamental reason for these teamwork limitations is the current agent architectures. Architectures 1 Copyright c fl1997, American Association of Artificial Intelligence (www.aaai.org). All rights reserved. such as Soar <ref> (Newell 1990) </ref>, RAP (Firby 1987), PRS (Rao et al. 1993), BB1 (Hayes-Roth, Brownston, & Gen 1995), and IRMA (Pollack 1992) facilitate an individual agent's flexible behaviors via mechanisms such as commitments and reactive plans. However, flexible individual behaviors, even if simultaneous and coordinated, do not sum up to teamwork.
Reference: <author> Pollack, M. </author> <year> 1992. </year> <title> The uses of plans. </title> <booktitle> Artificial Intelligence 57 </booktitle> <pages> 43-68. </pages>
Reference-contexts: A fundamental reason for these teamwork limitations is the current agent architectures. Architectures 1 Copyright c fl1997, American Association of Artificial Intelligence (www.aaai.org). All rights reserved. such as Soar (Newell 1990), RAP (Firby 1987), PRS (Rao et al. 1993), BB1 (Hayes-Roth, Brownston, & Gen 1995), and IRMA <ref> (Pollack 1992) </ref> facilitate an individual agent's flexible behaviors via mechanisms such as commitments and reactive plans. However, flexible individual behaviors, even if simultaneous and coordinated, do not sum up to teamwork.
Reference: <author> Rao, A. S.; Lucas, A.; Morley, D.; Selvestrel, M.; and Murray, G. </author> <year> 1993. </year> <title> Agent-oriented architecture for air-combat simulation. </title> <type> Technical Report Technical Note 42, </type> <institution> The Australian Artificial Intelligence Institute. </institution>
Reference-contexts: A fundamental reason for these teamwork limitations is the current agent architectures. Architectures 1 Copyright c fl1997, American Association of Artificial Intelligence (www.aaai.org). All rights reserved. such as Soar (Newell 1990), RAP (Firby 1987), PRS <ref> (Rao et al. 1993) </ref>, BB1 (Hayes-Roth, Brownston, & Gen 1995), and IRMA (Pollack 1992) facilitate an individual agent's flexible behaviors via mechanisms such as commitments and reactive plans. However, flexible individual behaviors, even if simultaneous and coordinated, do not sum up to teamwork.
Reference: <author> Rich, C., and Sidner, C. </author> <year> 1997. </year> <title> COLLAGEN: When agents collaborate with people. </title> <booktitle> In Proceedings of the International Conference on Autonomous Agents (Agents'97). </booktitle>
Reference-contexts: Similarly (Tambe 1996a) can only monitor the loss of one specialist in a team, and repair that specific failure. In contrast, STEAM can monitor a greater variety of failures, and it integrates repair within the teamwork framework. While STEAM is also related to COLLAGEN <ref> (Rich & Sidner 1997) </ref> another recent system based on model-based collaboration the two systems emphasize complementary capabilities. In particular, COLLAGEN focuses on discourse and interactions between a human user and an intelligent agent, rather than multi-agent interaction.
Reference: <author> Sen, S. </author> <year> 1996. </year> <booktitle> Proceedings of the Spring Symposium on Adaptation, Coevolution and Learning. </booktitle> <address> Menlo Park, CA: </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference-contexts: Specifically, from STEAM's domain-independent reasoning about teamwork, agents learn situation-specific coordination rules. For instance, when the formation leader crashes, another agent learns situation-specific rules to take over as formation lead and communicate. Additionally, STEAM's knowledge-intensive approach could complement current inductive learning approaches for multi-agent coordination <ref> (Sen 1996) </ref>. Failure detection and recovery is also a key topic for future work, particularly in environments with unreliable communication. One novel approach exploits agent tracking (Tambe & Rosenbloom 1995; Tambe 1996b) to infer teammates' high-level goals and intentions for comparison with own goals and intentions.
Reference: <author> Smith, I., and Cohen, P. </author> <year> 1996. </year> <title> Towards semantics for an agent communication language based on speech acts. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI). </booktitle>
Reference-contexts: Such a commitment avoids key communication failures presented in Section 2 to establish mutual belief, an agent must typically communicate with its teammates. Members of Q must synchronize to establish JPG (Q,p). To achieve such team synchronization we adapt the request-confirm protocol <ref> (Smith & Cohen 1996) </ref>, described below. <p> A team state is an agent's (abstract) model of the team's mutual beliefs about 3 WAG was originally called WG in (Levesque, Cohen, & Nunes 1990), but later termed WAG in <ref> (Smith & Cohen 1996) </ref>. the world, e.g., in the Transport domain, the team state includes the coordinates of the landing zone. STEAM can also maintain subteam states for subteam participation.
Reference: <author> Sonenberg, E.; Tidhard, G.; Werner, E.; Kinny, D.; Ljung-berg, M.; and Rao, A. </author> <year> 1994. </year> <title> Planned team activity. </title> <type> Technical Report 26, </type> <institution> Australian AI Institute. </institution>
Reference-contexts: In team tracking (Tambe 1996b), i.e., inferring team's joint intentions, the expressiveness of team operators has been exploited. However, issues of synchronization, communication, monitoring and repair are not addressed. The formal approach to teamwork in <ref> (Sonenberg et al. 1994) </ref> transforms team plans into separate role-plans for execution by individuals, with rigidly embedded communications. STEAM purposely avoids such transformations, so agents can flexibly reason with (i) explicit team goals/plans; and (ii) selective communication (very important in practice).
Reference: <author> Tambe, M., and Rosenbloom, P. S. </author> <year> 1995. </year> <title> RESC: An approach for real-time, dynamic agent tracking. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI). </booktitle>
Reference-contexts: Two of the domains are based on a real-world battlefield simulator commercially developed for 2 STEAM code (with documentation/traces) is available at http://www.isi.edu/soar/tambe/steam/steam.html. military training <ref> (Tambe et al. 1995) </ref>. The first domain, At--tack (Figure 1), involves pilot agents for a company of (up to eight) attack helicopters. The company typically processes orders and then flies from home-base to a holding point (often in subteams).
Reference: <author> Tambe, M.; Johnson, W. L.; Jones, R.; Koss, F.; Laird, J. E.; Rosenbloom, P. S.; and Schwamb, K. </author> <year> 1995. </year> <title> Intelligent agents for interactive simulation environments. </title> <journal> AI Magazine 16(1). </journal>
Reference-contexts: Two of the domains are based on a real-world battlefield simulator commercially developed for 2 STEAM code (with documentation/traces) is available at http://www.isi.edu/soar/tambe/steam/steam.html. military training <ref> (Tambe et al. 1995) </ref>. The first domain, At--tack (Figure 1), involves pilot agents for a company of (up to eight) attack helicopters. The company typically processes orders and then flies from home-base to a holding point (often in subteams).
Reference: <author> Tambe, M. </author> <year> 1996a. </year> <title> Teamwork in real-world, dynamic environments. </title> <booktitle> In Proceedings of the International Conference on Multi-agent Systems (ICMAS). </booktitle>
Reference-contexts: Furthermore, STEAM handles more complex team organizations, including subteams. Finally, STEAM substantially extends the teamwork models. For instance, while (Jennings 1995) supports team synchronization (although without the benefit of PWAGs) it does not address communication selectivity, or role-monitoring constraints and integrated role repair. <ref> (Tambe 1996a) </ref> does not consider team synchronization; and furthermore, while raising the issue of communication cost, suggests only a heuristic evaluation of communication costs and benefits. In contrast, STEAM considers a vari-ety of uncertainties within the decision theory framework. Similarly (Tambe 1996a) can only monitor the loss of one specialist in <p> address communication selectivity, or role-monitoring constraints and integrated role repair. <ref> (Tambe 1996a) </ref> does not consider team synchronization; and furthermore, while raising the issue of communication cost, suggests only a heuristic evaluation of communication costs and benefits. In contrast, STEAM considers a vari-ety of uncertainties within the decision theory framework. Similarly (Tambe 1996a) can only monitor the loss of one specialist in a team, and repair that specific failure. In contrast, STEAM can monitor a greater variety of failures, and it integrates repair within the teamwork framework.
Reference: <author> Tambe, M. </author> <year> 1996b. </year> <title> Tracking dynamic team activity. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI). </booktitle>
Reference-contexts: However, as before, termination messages are used when ffi = 1, where they maximize expected utility. 6.2 Estimating Parameters (fl, t , ffi) As a first step, STEAM only uses qualitative (low, high, medium) parameter values. STEAM estimates likelihood of lack of team synchronization, fl, via team tracking <ref> (Tambe 1996b) </ref> dynamically inferring a team's mental state from observations of team members' actions. Fortunately, rather than tracking each teammate separately, an agent i can rely on its own team operator execution for team tracking. <p> An additional interesting contrast is that while COLLAGEN is based on the SharedPlan theory of collaboration (Grosz 1996), STEAM is based on the joint intentions theory. A comparative analysis of the two systems for possible cross-fertilization of ideas/techniques is an issue for future work. In team tracking <ref> (Tambe 1996b) </ref>, i.e., inferring team's joint intentions, the expressiveness of team operators has been exploited. However, issues of synchronization, communication, monitoring and repair are not addressed. The formal approach to teamwork in (Sonenberg et al. 1994) transforms team plans into separate role-plans for execution by individuals, with rigidly embedded communications.
References-found: 19

