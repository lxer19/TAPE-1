URL: http://www.daimi.aau.dk/~hilde/papers/final62copyright.ps.Z
Refering-URL: http://www.daimi.aau.dk/~hilde/publications.html
Root-URL: http://www.daimi.aau.dk
Email: fhilde,gwinskelg@brics.dk,  prakash@cs.mcgill.ca  
Phone: 2  
Title: A Relational Model of Non-Deterministic Dataflow  
Author: Thomas Hildebrandt Prakash Panangaden and Glynn Winskel 
Address: Aarhus, Denmark,  Montreal, Canada,  
Affiliation: 1 BRICS University of  McGill University,  
Abstract: We recast dataflow in a modern categorical light using profunctors as a generalisation of relations. The well known causal anomalies associated with relational semantics of indeterminate dataflow are avoided, but still we preserve much of the intuitions of a relational model. The development fits with the view of categories of models for concurrency and the general treatment of bisimula-tion they provide. In particular it fits with the recent categorical formulation of feedback using traced monoidal categories. The payoffs are: (1) explicit relations to existing models and semantics, especially the usual axioms of monotone IO automata are read off from the definition of profunctors, (2) a new definition of bisimulation for dataflow, the proof of the congruence of which benefits from the preservation properties associated with open maps and (3) a treatment of higher-order dataflow as a biproduct, essentially by following the geometry of interaction programme. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abramsky. </author> <title> A generalized kahn principle for abstract asynchronous networks. </title> <booktitle> In MFPS'89, volume 442 of LNCS, </booktitle> <pages> pages 121. </pages> <publisher> Springer, </publisher> <year> 1990. </year>
Reference-contexts: Kok's model turned out to be equivalent. Rabinovich and Traktenbrot analyzed the same issues from the point of view of finite observations and came up with general conditions under which a Kahn-like principle would hold [30, 29, 31]. Abramsky has generalised Kahn's principle to indeterminate networks <ref> [1] </ref>. 3 A Traced Monoidal Category of Kahn Processes In this section we summarize the basic theory of traced monoidal categories and describe a category of Kahn processes as an instance of a traced monoidal category.
Reference: [2] <author> S. Abramsky. </author> <title> Retracing some paths in process algebra. </title> <editor> In U. Montanari and V. Sassone, editors, CONCUR'96, </editor> <booktitle> volume 1119 of LNCS, </booktitle> <pages> pages 117. </pages> <publisher> Springer, </publisher> <month> August </month> <year> 1996. </year>
Reference-contexts: models [15] expressed in terms of trace sets, but also provides a relational viewpoint which allows one to think of composing network components as a (kind of) relational composition, 4. gives a semantics of higher-order networks almost for free by using the passage from traced monoidal categories to compact-closed categories <ref> [2, 18] </ref> (the geo metry of interaction construction). ? To appear in LNCS, proceedings of CONCUR '98, c fl SpringerVerlag. ? ? ? Basic Research in Computer Science, Centre of the Danish National Research Foundation. The categorical presentation is critical for all these points. <p> The categorical presentation is critical for all these points. Without the realization that Kahn processes can be described as a traced monoidal category and knowledge of the results in <ref> [2, 18] </ref> it would be hard to see how one could have proposed our model of higher-order processes. It is notable that the profunctor semantics of dataflow yields automatically the axioms for monotone port automata used in modelling dataflow [27] in contrast to the work in [33]. <p> The idea that non-deterministic dataflow can be modelled by some kind of general-ised relations fits with that of others, notably Stark in [33, 34]. Bisimulation for data-flow is studied in [35]. That dataflow should fit within a categorical account of feedback accords for instance with <ref> [21, 2] </ref>. But in presenting a semantics of dataflow as profunc-tors we obtain the benefits to be had from placing nondeterministic dataflow centrally within categories of models for concurrency, and in particular within presheaf models. <p> That situation is more complicated because not every morphism has a trace, so the categorical presentation of geometry of interaction referred to here is a simplification of the original program. Verity [18] and also to Abramsky <ref> [2] </ref>. As such it gives a method for realizing higher--order constructs in terms of feedback. In our setting one takes the categories Kahn and PProf ? and constructs compact-closed categories HKahn and HProf ? which then serve as the interpretations of higher-order Kahn processes and port profunctors. <p> In our setting one takes the categories Kahn and PProf ? and constructs compact-closed categories HKahn and HProf ? which then serve as the interpretations of higher-order Kahn processes and port profunctors. We will just give the main definition, for more details see <ref> [18, 2] </ref>. Essentially, one obtains a higher-order model by working with processes with bi-directional input and output. These processes are implemented by uni-directional processes of the underlying category in the obvious way, regarding negative input channels as output channels and negative output as input. Definition 12.
Reference: [3] <author> S. Abramsky, S. Gay, and R. Nagarajan. </author> <title> Interaction categories and the foundations of typed concurrent programming. </title> <booktitle> In Proc. of the 1994 Marktoberdorf summer school. </booktitle> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: In particular, dataflow feedback is shown as an instance of a trace operation in a category and this allows one to adapt the ideas from the geometry of interaction program to give a very smooth treatment of higher-order processes. The higher-order models should be compared to the work in <ref> [3] </ref>. It also remains to explore systematically the full family of models for dataflow, relating automata, event structure and traces-based models to the relational model, following the pattern set in [36]. Work is underway on a bicategory of (higher order) port automata.
Reference: [4] <author> E. S. Bainbridge. </author> <title> Feedback and generalized logic. </title> <journal> Information and Control, </journal> <volume> (31):7596, </volume> <year> 1976. </year>
Reference-contexts: The notion of traced monoidal category abstracts the notion of trace of a matrix from mul-tilinear algebra. However it has emerged in a variety of new contexts including the study of feedback systems <ref> [4] </ref>, knot theory [14] and recursion [13]. The axiomatization presented below is the definition of Joyal, Street and Verity [18], slightly simplified as in [13] and specialized to the context of symmetric monoidal categories so that the axioms appear simpler; in particular we do not consider braiding or twists.
Reference: [5] <editor> F. Borceux. </editor> <booktitle> Handbook of categorical logic, </booktitle> <volume> volume 1. </volume> <publisher> Cambridge University Press, </publisher> <year> 1994. </year>
Reference-contexts: It must be possible to represent different dependencies between input and output for a particular input-output pair in the relation. This is precisely what moving to the bicategory of profunctors does for us. 4.1 Profunctors The category Prof of profunctors, (or bimodules, or distributors <ref> [5] </ref>) are a categorical generalisation of sets and relations. The objects of Prof are small categories and arrows are profunctors; profunctors are like the buffered relations above but with the category 2 2 2 replaced by Set. Definition 7. Let P and Q be small categories.
Reference: [6] <author> J. Brock and W. Ackerman. </author> <title> Scenarios: A model of non-determinate computation. </title> <editor> In J. Diaz and I. Ramos, editors, </editor> <booktitle> Formalization of Programming Concepts, volume 107 of LNCS. </booktitle> <publisher> Springer, </publisher> <year> 1981. </year>
Reference-contexts: Faustini [11], Lynch and Stark [23]. Subsequently, different semantics have been described as satisfying Kahn's principle when they are built up compositionally along similar lines. 2.1 The Need for Causality For indeterminate networks, the situation is not so simple. Brock and Ackerman <ref> [6] </ref> showed the fact, referred to as the Brock-Ackerman anomaly, that for networks containing the nondeterministic primitive fair merge, the history model preserves too little information about the structure of the networks to support a compositional semantics.
Reference: [7] <author> G. L. Cattani and G. Winskel. </author> <title> Presheaf models for concurrency. </title> <booktitle> In CSL'96, volume 1258 of LNCS, </booktitle> <pages> pages 5875. </pages> <publisher> Springer, </publisher> <year> 1997. </year>
Reference-contexts: This yields a form of domain theory but boosted to the level of using categories rather than partial orders as the appropriate domains. One argument for the definition of bisimulation based on open maps is the powerful preservation properties associated with it. Notable is the result of <ref> [7] </ref> that any colimit preserving functor between presheaf categories preserves bisimulation, which besides obvious uses in relating semantics in different models with different notions of bisim-ulation is, along with several other general results, useful in establishing congruence properties of process languages. <p> Here we can exploit some general properties of open maps and so bisimulation on presheaves: the product of (surjective) open maps in a presheaf category is (surjective) open [16]; any colimit-preserving functor between presheaf categories preserves (surjective) open maps <ref> [7] </ref>. The proof that trace on PProf ? preserves bisimulation uses the latter property, exploiting the fact that trace can be expressed as a colimit, first showing that S as a functor between presheaf categories preserves open maps.
Reference: [8] <author> A. Cheng. </author> <title> Petri nets, traces, and local model checking. Research Series RS-95-39, </title> <type> BRICS, </type> <institution> Department of Computer Science, University of Aarhus, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: This will provide further operational back up to the trace on port profunctors and help in the understanding of independence at higher-order. Early attempts have been made to incorporate fairness into the profunctor model; it is hoped to exploit independence along the lines in <ref> [8] </ref> and include maximal or completed observations.
Reference: [9] <author> J. B. Dennis. </author> <title> First version of a dataflow procedure language. </title> <editor> In B. Robinet, editor, </editor> <booktitle> Proceedings Colloque sur la Programmation, volume 19 of LNCS, </booktitle> <pages> pages 362376. </pages> <publisher> Springer, </publisher> <year> 1974. </year>
Reference-contexts: The semantics of a language of this richness requires a flexible yet abstract domain theory of the kind presheaf models seem able to support. 2 Models for Indeterminate Dataflow The Dataflow paradigm for parallel computation, originated in work of Jack Dennis and others in the mid-sixties <ref> [19, 9] </ref>. The essential idea is that data flows between asynchronous computing agents, that are interconnected by communication channels acting as unbounded buffers.
Reference: [10] <author> V. Diekert and Y. Metivier. </author> <title> Handbook of Formal Languages., volume 3, chapter Partial Commutation and Traces. </title> <publisher> Springer, </publisher> <year> 1997. </year>
Reference-contexts: Given a set of portnames A P let A, the histories on A, be the elements in the free partially commutative monoid L fl A = <ref> [10] </ref>, where is the smallest equivalence relation such that ffha 0 ; v 0 iha; vifi ffha; viha 0 ; v 0 ifi if a 6= a 0 .
Reference: [11] <author> A. A. Faustini. </author> <title> An operational semantics for pure dataflow. </title> <booktitle> In ICALP'82, volume 140 of LNCS, </booktitle> <pages> pages 212224. </pages> <publisher> Springer, </publisher> <year> 1982. </year>
Reference-contexts: For dataflow networks built from only deterministic nodes, Kahn [19] has observed that their behaviour could be captured denotationally in the history model, defining network composition by the least fixed point of a set of equations describing the components, which was later shown formally by several authors, e.g. Faustini <ref> [11] </ref>, Lynch and Stark [23]. Subsequently, different semantics have been described as satisfying Kahn's principle when they are built up compositionally along similar lines. 2.1 The Need for Causality For indeterminate networks, the situation is not so simple.
Reference: [12] <author> M. Gordon. </author> <title> The semantic challenge of verilog hdl. </title> <note> www.cl.cam.ac.uk/mjcg/, April 1996. Revised version of an invited paper published in LICS'95. </note>
Reference-contexts: One of our future aims is a dataflow semantics of hardware-description languages, like for instance Verilog HDL <ref> [12] </ref>, which presently only possesses a non-compositional, operational definition.
Reference: [13] <author> M. Hasegawa. </author> <title> Recursion from cyclic sharing: traced monoidal categories and models of cyclic lambda calculi. </title> <booktitle> In TLCA'97, volume 1210 of LNCS, </booktitle> <pages> pages 196213, </pages> <month> April </month> <year> 1997. </year>
Reference-contexts: The notion of traced monoidal category abstracts the notion of trace of a matrix from mul-tilinear algebra. However it has emerged in a variety of new contexts including the study of feedback systems [4], knot theory [14] and recursion <ref> [13] </ref>. The axiomatization presented below is the definition of Joyal, Street and Verity [18], slightly simplified as in [13] and specialized to the context of symmetric monoidal categories so that the axioms appear simpler; in particular we do not consider braiding or twists. <p> However it has emerged in a variety of new contexts including the study of feedback systems [4], knot theory [14] and recursion <ref> [13] </ref>. The axiomatization presented below is the definition of Joyal, Street and Verity [18], slightly simplified as in [13] and specialized to the context of symmetric monoidal categories so that the axioms appear simpler; in particular we do not consider braiding or twists.
Reference: [14] <author> V. F. Jones. </author> <title> A polynomial invariant for links via von neumann algebras. </title> <journal> Bull. Amer. Math. Soc., </journal> <volume> 129:103112, </volume> <year> 1985. </year>
Reference-contexts: The notion of traced monoidal category abstracts the notion of trace of a matrix from mul-tilinear algebra. However it has emerged in a variety of new contexts including the study of feedback systems [4], knot theory <ref> [14] </ref> and recursion [13]. The axiomatization presented below is the definition of Joyal, Street and Verity [18], slightly simplified as in [13] and specialized to the context of symmetric monoidal categories so that the axioms appear simpler; in particular we do not consider braiding or twists.
Reference: [15] <author> B. Jonsson. </author> <title> A fully abstract trace model for dataflow networks. </title> <booktitle> In POPL'89, </booktitle> <pages> pages 155 165. </pages> <publisher> ACM, </publisher> <year> 1989. </year>
Reference-contexts: the general functoriality and naturality properties of presheaves automatically im ply the usually postulated axioms for asynchronous, monotone automata [27, 32] 2. we get a notion of bisimulation, which is crucial when one includes both synchron ous and asynchronous primitives together, 3. it is closely connected to the extant models <ref> [15] </ref> expressed in terms of trace sets, but also provides a relational viewpoint which allows one to think of composing network components as a (kind of) relational composition, 4. gives a semantics of higher-order networks almost for free by using the passage from traced monoidal categories to compact-closed categories [2, 18] <p> The essential idea is that data flows between asynchronous computing agents, that are interconnected by communication channels acting as unbounded buffers. Traditionally, the observable behaviour is taken to be the input-output relation between sequences of values on respectively input and output channels, sometimes referred to as the history model <ref> [15] </ref>. For dataflow networks built from only deterministic nodes, Kahn [19] has observed that their behaviour could be captured denotationally in the history model, defining network composition by the least fixed point of a set of equations describing the components, which was later shown formally by several authors, e.g. <p> This example shows the need for a model that records a more detailed causality relation between individual data tokens than the history model. 1 See [27, 26] for a study of the differences between the nondeterminate primitives. Jonsson <ref> [15] </ref> and Kok [22] have independently given fully abstract models for inde-terminate dataflow. Jonsson's model is based on trace 2 sets, which are sets of possible interaction sequences, finite or infinite, between a process and its environment. Kok's model turned out to be equivalent. <p> The particular axiomatisation presented here builds on the ideas of Stark [33] but using the formalism of traces presented in [26]. No originality is claimed for the trace model, it was Bengt Jonsson <ref> [15] </ref> who showed that traces form a fully abstract model of dataflow networks and there were several others with similar ideas at the time. We have a fixed set V of values and a fixed set P of ports.
Reference: [16] <author> A. Joyal and I. Moerdijk. </author> <title> A completeness theorem for open maps. </title> <journal> Annals of Pure and Applied Logic, </journal> <volume> 70(1):5186, </volume> <year> 1994. </year>
Reference-contexts: It is important to check that bisimulation on PProf ? is a congruence with respect to the operations tensor and trace. Here we can exploit some general properties of open maps and so bisimulation on presheaves: the product of (surjective) open maps in a presheaf category is (surjective) open <ref> [16] </ref>; any colimit-preserving functor between presheaf categories preserves (surjective) open maps [7]. The proof that trace on PProf ? preserves bisimulation uses the latter property, exploiting the fact that trace can be expressed as a colimit, first showing that S as a functor between presheaf categories preserves open maps.
Reference: [17] <author> A. Joyal, M. Nielsen, and G. Winskel. </author> <title> Bisimulation from open maps. Research Series RS-94-7, </title> <type> BRICS, </type> <institution> Department of Computer Science, University of Aarhus, </institution> <month> May </month> <year> 1994. </year> <pages> 42 pp. </pages> <note> Appears in LICS '93 special issue of Information and Computation, 127(2):164185. </note>
Reference-contexts: The background for our paper includes work done on presenting models for con-currency as categories, as summarised in [36]. This enabled a sweeping definition of bisimulation based on open maps applicable to any category of models equipped with a distinguished subcategory of paths <ref> [17] </ref>. It also exposed a new space of models: presheaves. Presheaf categories possess a canonical choice of open maps and bisim-ulation, and can themselves be related in the bicategory of profunctors. <p> This defines a symmetric monoidal structure on Prof. 4 The traces can also be viewed as a specific kind of pomsets [28] and the path categories as a subcategory of the category of pomsets given in <ref> [17] </ref>. Definition 8. Let P,P 0 and Q,Q 0 be small categories and X : P // + Q, Y : P 0 // + Q 0 profunctors. <p> Consequences We will briefly go through some of the consequences of the categorical semantics of dataflow given in the two previous sections. 5.1 A Bisimulation Congruence The presentation of models for concurrency as categories allows us to apply a general notion of bisimulation from spans of open maps proposed in <ref> [17] </ref>. The general idea is to identify a path category P ,! M as a subcategory of the model M, with objects representing runs or histories and morphisms compatible extensions of these. <p> : s 0 OE (s; s 0 ) 2 R & t 0 OE OE (s; s 0 ) 2 R & s 0 OE OE It is worth remarking, that the bisimulation is closely related to the strong history-preserving bisimulation obtained by the same approach for independence models in <ref> [17] </ref>. In particular, two bisimilar port automata will be strong history-preserving bisimilar for any fixed input sequence. It is important to check that bisimulation on PProf ? is a congruence with respect to the operations tensor and trace.
Reference: [18] <author> A. Joyal, R. Street, and D. Verity. </author> <title> Traced monoidal categories. </title> <journal> volume 119 of Math. Proc. Camb. Phil. Soc., </journal> <pages> pages 447468, </pages> <year> 1996. </year>
Reference-contexts: models [15] expressed in terms of trace sets, but also provides a relational viewpoint which allows one to think of composing network components as a (kind of) relational composition, 4. gives a semantics of higher-order networks almost for free by using the passage from traced monoidal categories to compact-closed categories <ref> [2, 18] </ref> (the geo metry of interaction construction). ? To appear in LNCS, proceedings of CONCUR '98, c fl SpringerVerlag. ? ? ? Basic Research in Computer Science, Centre of the Danish National Research Foundation. The categorical presentation is critical for all these points. <p> The categorical presentation is critical for all these points. Without the realization that Kahn processes can be described as a traced monoidal category and knowledge of the results in <ref> [2, 18] </ref> it would be hard to see how one could have proposed our model of higher-order processes. It is notable that the profunctor semantics of dataflow yields automatically the axioms for monotone port automata used in modelling dataflow [27] in contrast to the work in [33]. <p> However it has emerged in a variety of new contexts including the study of feedback systems [4], knot theory [14] and recursion [13]. The axiomatization presented below is the definition of Joyal, Street and Verity <ref> [18] </ref>, slightly simplified as in [13] and specialized to the context of symmetric monoidal categories so that the axioms appear simpler; in particular we do not consider braiding or twists. <p> That situation is more complicated because not every morphism has a trace, so the categorical presentation of geometry of interaction referred to here is a simplification of the original program. Verity <ref> [18] </ref> and also to Abramsky [2]. As such it gives a method for realizing higher--order constructs in terms of feedback. <p> In our setting one takes the categories Kahn and PProf ? and constructs compact-closed categories HKahn and HProf ? which then serve as the interpretations of higher-order Kahn processes and port profunctors. We will just give the main definition, for more details see <ref> [18, 2] </ref>. Essentially, one obtains a higher-order model by working with processes with bi-directional input and output. These processes are implemented by uni-directional processes of the underlying category in the obvious way, regarding negative input channels as output channels and negative output as input. Definition 12.
Reference: [19] <author> G. Kahn. </author> <title> The semantics of a simple language for parallel programming. </title> <booktitle> In Information Processing, </booktitle> <volume> volume 74, </volume> <pages> pages 471475, </pages> <year> 1974. </year>
Reference-contexts: The semantics of a language of this richness requires a flexible yet abstract domain theory of the kind presheaf models seem able to support. 2 Models for Indeterminate Dataflow The Dataflow paradigm for parallel computation, originated in work of Jack Dennis and others in the mid-sixties <ref> [19, 9] </ref>. The essential idea is that data flows between asynchronous computing agents, that are interconnected by communication channels acting as unbounded buffers. <p> Traditionally, the observable behaviour is taken to be the input-output relation between sequences of values on respectively input and output channels, sometimes referred to as the history model [15]. For dataflow networks built from only deterministic nodes, Kahn <ref> [19] </ref> has observed that their behaviour could be captured denotationally in the history model, defining network composition by the least fixed point of a set of equations describing the components, which was later shown formally by several authors, e.g. Faustini [11], Lynch and Stark [23]. <p> or x is related to some u and that u is related to y (once around the feedback loop) or, more generally, we can go around the feedback loop an indefinite number of times. 3.2 The Kahn Category The basic intuitions behind Kahn networks are, of course, due to Kahn <ref> [19] </ref> and a formal operational semantics in terms of coroutines is due to Kahn and McQueen [20]. The particular axiomatisation presented here builds on the ideas of Stark [33] but using the formalism of traces presented in [26].
Reference: [20] <author> G. Kahn and D. MacQueen. </author> <title> Coroutines and networks of parallel processes. </title> <editor> In Gilchrist, editor, </editor> <booktitle> Proceedings of Information Processing, </booktitle> <pages> pages 993998. </pages> <publisher> North-Holland, </publisher> <year> 1977. </year>
Reference-contexts: the feedback loop) or, more generally, we can go around the feedback loop an indefinite number of times. 3.2 The Kahn Category The basic intuitions behind Kahn networks are, of course, due to Kahn [19] and a formal operational semantics in terms of coroutines is due to Kahn and McQueen <ref> [20] </ref>. The particular axiomatisation presented here builds on the ideas of Stark [33] but using the formalism of traces presented in [26].
Reference: [21] <author> P. Katis, N. Sabadini, and R. Walters. </author> <title> Bicategories of processes. </title> <journal> Journal of Pure and Applied Algebra, </journal> <volume> (115):141178, </volume> <year> 1997. </year>
Reference-contexts: The idea that non-deterministic dataflow can be modelled by some kind of general-ised relations fits with that of others, notably Stark in [33, 34]. Bisimulation for data-flow is studied in [35]. That dataflow should fit within a categorical account of feedback accords for instance with <ref> [21, 2] </ref>. But in presenting a semantics of dataflow as profunc-tors we obtain the benefits to be had from placing nondeterministic dataflow centrally within categories of models for concurrency, and in particular within presheaf models.
Reference: [22] <author> J. Kok. </author> <title> A fully abstract semantics for dataflow nets. </title> <booktitle> In Proceedings of Parallel Architectures And Languages Europe, </booktitle> <pages> pages 351368, </pages> <address> Berlin, 1987. </address> <publisher> Springer. </publisher>
Reference-contexts: This example shows the need for a model that records a more detailed causality relation between individual data tokens than the history model. 1 See [27, 26] for a study of the differences between the nondeterminate primitives. Jonsson [15] and Kok <ref> [22] </ref> have independently given fully abstract models for inde-terminate dataflow. Jonsson's model is based on trace 2 sets, which are sets of possible interaction sequences, finite or infinite, between a process and its environment. Kok's model turned out to be equivalent.
Reference: [23] <author> N. A. Lynch and E. W. Stark. </author> <title> A proof of the kahn principle for input/output automata. Information and Computation, </title> <address> 82:8192, </address> <year> 1989. </year>
Reference-contexts: Faustini [11], Lynch and Stark <ref> [23] </ref>. Subsequently, different semantics have been described as satisfying Kahn's principle when they are built up compositionally along similar lines. 2.1 The Need for Causality For indeterminate networks, the situation is not so simple.
Reference: [24] <author> S. Mac Lane and I. Moerdijk. </author> <title> Sheaves in Geometry and Logic: A First Introduction to Topos Theory. </title> <publisher> Springer, </publisher> <year> 1992. </year>
Reference-contexts: Note how the two runs in process A 2 , with same input-output relation but different dependencies, are represented of elements of the presheaf X from its associated port automaton, which thus de termines X up to isomorph ism <ref> [24] </ref>, allowing us to work with the more concrete rep resentation when convenient. Thus, we can freely confuse elements x 2 X (ff; fi) with their corresponding states in A (X). Remarkably the axioms usually postulated for monotone port automata [27] follow for port automata of profunctors simply by functoriality.
Reference: [25] <author> S. Mac Lane. </author> <title> Categories for the Working Mathematician. Graduate Texts in Mathematics. </title> <publisher> Springer, </publisher> <year> 1971. </year>
Reference-contexts: Composition 5 of profunctors is given by the coend <ref> [25] </ref> Y ; Z (p; q) = Y (p; u) fi Z (u; q) ; (2) for Y : P // + U and Z : U // + Q. This generalises the expression for relational composition given by (1) earlier. Identities are given by hom functors. <p> We end this section with an important remark, namely that the secured trace can be defined as the composition of two functors on hom-categories; first a functor restricting to secured states and then a colimit, by using a standard construction of the subdivision category <ref> [25] </ref> which allows any coend to be expressed as a colimit. For a port profunctor X : A C // ? B C, we get A;B (X) = Colim C x S (X); (7) where C x is the subdivision category of C (dual to that in [25]) and S : <p> the subdivision category <ref> [25] </ref> which allows any coend to be expressed as a colimit. For a port profunctor X : A C // ? B C, we get A;B (X) = Colim C x S (X); (7) where C x is the subdivision category of C (dual to that in [25]) and S : PProf ? [A C; B C] ! Prof [A C x ; B] is the standard construction, except it is restricted to secured states.
Reference: [26] <author> P. Panangaden and V. Shanbhogue. </author> <title> The expressive power of indeterminate dataflow primitive. Information and Computation, </title> <address> 98(1):99131, </address> <year> 1992. </year>
Reference-contexts: This example shows the need for a model that records a more detailed causality relation between individual data tokens than the history model. 1 See <ref> [27, 26] </ref> for a study of the differences between the nondeterminate primitives. Jonsson [15] and Kok [22] have independently given fully abstract models for inde-terminate dataflow. Jonsson's model is based on trace 2 sets, which are sets of possible interaction sequences, finite or infinite, between a process and its environment. <p> The particular axiomatisation presented here builds on the ideas of Stark [33] but using the formalism of traces presented in <ref> [26] </ref>. No originality is claimed for the trace model, it was Bengt Jonsson [15] who showed that traces form a fully abstract model of dataflow networks and there were several others with similar ideas at the time.
Reference: [27] <author> P. Panangaden and E. W. Stark. </author> <title> Computations, residuals and the power of indeterminacy. </title> <booktitle> In Proc. of the 15th ICALP, </booktitle> <pages> pages 439454. </pages> <publisher> Springer, </publisher> <year> 1988. </year>
Reference-contexts: This new semantical treatment has a number of benefits 1. the general functoriality and naturality properties of presheaves automatically im ply the usually postulated axioms for asynchronous, monotone automata <ref> [27, 32] </ref> 2. we get a notion of bisimulation, which is crucial when one includes both synchron ous and asynchronous primitives together, 3. it is closely connected to the extant models [15] expressed in terms of trace sets, but also provides a relational viewpoint which allows one to think of composing <p> It is notable that the profunctor semantics of dataflow yields automatically the axioms for monotone port automata used in modelling dataflow <ref> [27] </ref> in contrast to the work in [33]. At the same time we have to work to get a correct operation on profunctors to model the dataflow feedback; the obvious choice of mod-elling feedback by coend doesn't account for the subtle causal constraints which plague dataflow semantics. <p> This example shows the need for a model that records a more detailed causality relation between individual data tokens than the history model. 1 See <ref> [27, 26] </ref> for a study of the differences between the nondeterminate primitives. Jonsson [15] and Kok [22] have independently given fully abstract models for inde-terminate dataflow. Jonsson's model is based on trace 2 sets, which are sets of possible interaction sequences, finite or infinite, between a process and its environment. <p> However, if an output occurs after an input then the pair of events cannot be permuted because the output event may be in response to the input. Furthermore we are assuming, again in (1), that the arrival of input does not disable already enabled output. In an earlier investigation <ref> [27] </ref> these were called monotone automata and it was shown that many common primitives, such as fair merge, timeouts, interrupts and polling cannot be expressed as monotone automata. <p> Thus, we can freely confuse elements x 2 X (ff; fi) with their corresponding states in A (X). Remarkably the axioms usually postulated for monotone port automata <ref> [27] </ref> follow for port automata of profunctors simply by functoriality. Proposition 3. Let X : A // + B and A (X) = (S; R; !; A; B). Then A1. Receptivity: 8ha; i; vi 2 I A & s 2 S: 9!s 0 2 S: s i a;v A2.
Reference: [28] <author> V. Pratt. </author> <title> Modelling concurrency with partial orders. </title> <journal> International Journal of Parallel Programming, </journal> <volume> (1), </volume> <year> 1986. </year>
Reference-contexts: The tensor product is given by the product of categories on objects and set-theoretic product on arrows. This defines a symmetric monoidal structure on Prof. 4 The traces can also be viewed as a specific kind of pomsets <ref> [28] </ref> and the path categories as a subcategory of the category of pomsets given in [17]. Definition 8. Let P,P 0 and Q,Q 0 be small categories and X : P // + Q, Y : P 0 // + Q 0 profunctors.
Reference: [29] <author> A. Rabinovich and B. A. Trakhtenbrot. </author> <title> Nets and data flow interpreters. </title> <booktitle> In Proceedings of the 4th LICS, </booktitle> <pages> pages 164174, </pages> <year> 1989. </year>
Reference-contexts: Kok's model turned out to be equivalent. Rabinovich and Traktenbrot analyzed the same issues from the point of view of finite observations and came up with general conditions under which a Kahn-like principle would hold <ref> [30, 29, 31] </ref>. Abramsky has generalised Kahn's principle to indeterminate networks [1]. 3 A Traced Monoidal Category of Kahn Processes In this section we summarize the basic theory of traced monoidal categories and describe a category of Kahn processes as an instance of a traced monoidal category.
Reference: [30] <author> A. Rabinovich and B. A. Trakhtenbrot. </author> <title> Nets of processes and dataflow. </title> <booktitle> volume 354 of LNCS, </booktitle> <year> 1989. </year> <title> To appear in Proceedings of ReX School on Linear Time, Branching Time and Partial Order in Logics and Models for Concurrency, </title> <publisher> LNCS. </publisher>
Reference-contexts: Kok's model turned out to be equivalent. Rabinovich and Traktenbrot analyzed the same issues from the point of view of finite observations and came up with general conditions under which a Kahn-like principle would hold <ref> [30, 29, 31] </ref>. Abramsky has generalised Kahn's principle to indeterminate networks [1]. 3 A Traced Monoidal Category of Kahn Processes In this section we summarize the basic theory of traced monoidal categories and describe a category of Kahn processes as an instance of a traced monoidal category.
Reference: [31] <author> A. Rabinovich and B. A. Trakhtenbrot. </author> <title> Communication among relations. </title> <editor> In M. S. Paterson, editor, </editor> <booktitle> Proc. of the 7th ICALP, volume 443 of LNCS, </booktitle> <pages> pages 294307. </pages> <publisher> Springer, </publisher> <year> 1990. </year>
Reference-contexts: Kok's model turned out to be equivalent. Rabinovich and Traktenbrot analyzed the same issues from the point of view of finite observations and came up with general conditions under which a Kahn-like principle would hold <ref> [30, 29, 31] </ref>. Abramsky has generalised Kahn's principle to indeterminate networks [1]. 3 A Traced Monoidal Category of Kahn Processes In this section we summarize the basic theory of traced monoidal categories and describe a category of Kahn processes as an instance of a traced monoidal category.
Reference: [32] <author> P. Selinger. </author> <title> First-order axioms for asynchrony. </title> <editor> In A. Mazurkiewicz and J. Winkowski, editors, CONCUR'97, </editor> <booktitle> volume 1243 of LNCS, </booktitle> <pages> pages 376390. </pages> <publisher> Springer, </publisher> <year> 1997. </year>
Reference-contexts: This new semantical treatment has a number of benefits 1. the general functoriality and naturality properties of presheaves automatically im ply the usually postulated axioms for asynchronous, monotone automata <ref> [27, 32] </ref> 2. we get a notion of bisimulation, which is crucial when one includes both synchron ous and asynchronous primitives together, 3. it is closely connected to the extant models [15] expressed in terms of trace sets, but also provides a relational viewpoint which allows one to think of composing <p> Let * A (or just *) denote the empty trace in A. Given the ordering on traces, we can define a buffer B A A fi A for each port set A P, as the relation f (ff; fi) j fi v ffg. Inspired by the work in <ref> [32] </ref>, we say that an IO-relation R Afi B is buffered if it satisfies that R = B A ; R; B B , i.e. adding buffers to input and output makes no difference.
Reference: [33] <author> E. W. Stark. </author> <title> Compositional relational semantics for indeterminate dataflow networks. </title> <booktitle> In CTCS, volume 389 of LNCS, </booktitle> <pages> pages 5274, </pages> <address> Manchester, U.K., 1989. </address> <publisher> Springer. </publisher>
Reference-contexts: It is notable that the profunctor semantics of dataflow yields automatically the axioms for monotone port automata used in modelling dataflow [27] in contrast to the work in <ref> [33] </ref>. At the same time we have to work to get a correct operation on profunctors to model the dataflow feedback; the obvious choice of mod-elling feedback by coend doesn't account for the subtle causal constraints which plague dataflow semantics. <p> The idea that non-deterministic dataflow can be modelled by some kind of general-ised relations fits with that of others, notably Stark in <ref> [33, 34] </ref>. Bisimulation for data-flow is studied in [35]. That dataflow should fit within a categorical account of feedback accords for instance with [21, 2]. <p> The particular axiomatisation presented here builds on the ideas of Stark <ref> [33] </ref> but using the formalism of traces presented in [26]. No originality is claimed for the trace model, it was Bengt Jonsson [15] who showed that traces form a fully abstract model of dataflow networks and there were several others with similar ideas at the time.
Reference: [34] <author> E. W. Stark. </author> <title> Dataflow networks are fibrations. </title> <booktitle> In CTCS, volume 530 of LNCS, </booktitle> <pages> pages 261281. </pages> <publisher> Springer, </publisher> <month> September </month> <year> 1991. </year>
Reference-contexts: The idea that non-deterministic dataflow can be modelled by some kind of general-ised relations fits with that of others, notably Stark in <ref> [33, 34] </ref>. Bisimulation for data-flow is studied in [35]. That dataflow should fit within a categorical account of feedback accords for instance with [21, 2].
Reference: [35] <author> E. W. Stark. </author> <title> A calculus of dataflow networks. </title> <booktitle> In Proceedings of the 7th LICS, </booktitle> <pages> pages 125136, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: The idea that non-deterministic dataflow can be modelled by some kind of general-ised relations fits with that of others, notably Stark in [33, 34]. Bisimulation for data-flow is studied in <ref> [35] </ref>. That dataflow should fit within a categorical account of feedback accords for instance with [21, 2]. But in presenting a semantics of dataflow as profunc-tors we obtain the benefits to be had from placing nondeterministic dataflow centrally within categories of models for concurrency, and in particular within presheaf models.
Reference: [36] <author> G. Winskel and M. Nielsen. </author> <booktitle> Handbook of Logic in Computer Science, volume IV, chapter Models for concurrency. </booktitle> <address> OUP, </address> <year> 1995. </year>
Reference-contexts: 1 Introduction A fundamental dichotomy in concurrency is the distinction between asynchronous communication and synchronous communication. In the present paper we unify the analysis of these situations in the framework of a categorical presentation of models for concur-rency as initiated by Winskel and Nielsen <ref> [36] </ref>. In particular we have given a treatment of indeterminate dataflow networks in terms of (a special kind of) profunctors which is very close to the treatment of synchronous communication. <p> The background for our paper includes work done on presenting models for con-currency as categories, as summarised in <ref> [36] </ref>. This enabled a sweeping definition of bisimulation based on open maps applicable to any category of models equipped with a distinguished subcategory of paths [17]. It also exposed a new space of models: presheaves. <p> We will refer to the elements as traces and for a sequence ff 2 L fl A let ff denote its trace. The traces A can be partial ordered by ff v fi iff 9fl:fffl = fi (see Sect.7 of <ref> [36] </ref>). Let * A (or just *) denote the empty trace in A. Given the ordering on traces, we can define a buffer B A A fi A for each port set A P, as the relation f (ff; fi) j fi v ffg. <p> The higher-order models should be compared to the work in [3]. It also remains to explore systematically the full family of models for dataflow, relating automata, event structure and traces-based models to the relational model, following the pattern set in <ref> [36] </ref>. Work is underway on a bicategory of (higher order) port automata. This will provide further operational back up to the trace on port profunctors and help in the understanding of independence at higher-order.
Reference: [37] <author> G. Winskel and M. Nielsen. </author> <title> Presheaves as transition systems. </title> <editor> In D. Peled, V. Pratt, and G. Holzmann, editors, POMIV'96, </editor> <booktitle> volume 29 of DIMACS. AMS, </booktitle> <month> july </month> <year> 1996. </year>
Reference-contexts: o c 0 ;v 0 ! u) then 9!t 0 2 S: s ! t 0 i c;v o c 0 ;v 0 ! u) : As a corollary, we get a mapping from port profunctors to Kahn processes. 6 The present construction generalises the one on presheaves given in <ref> [37] </ref> Corollary 1. For any X : A // + B s.t. X (*; *) 6= ?, the set of sequences Seq (X) is a Kahn process of sort (A; B). The above observations make port profunctors look promising as a model of dataflow. <p> For a presheaf model ^ P the canonical choice of path category is the category P under the Yoneda embedding. Recall that a port profunctor X : A // ? B can be viewed as a presheaf in " op As for the presheaves as transition systems in <ref> [37] </ref>, the A op fi Bbisimulation can be characterised as a back-&-forth bisimulation between the associated port automata. Proposition 6. Let X i : A // ? B and A (X i ) = (S i ; r i ; ! i ; A; B) for i 2 f1; 2g.
References-found: 37

