URL: http://www.cs.iastate.edu/tech-reports/TR96-23.ps
Refering-URL: http://www.cs.iastate.edu/tech-reports/catalog.html
Root-URL: http://www.cs.iastate.edu
Title: Timed Data Flow Diagrams  
Author: Jurgen Symanzik and Albert L. Baker Jurgen Symanzik and Albert L. Baker. 
Degree: All rights reserved.  
Keyword: Statistical Software Engineering, Formal Methods, Concurrent and Distributed Sys tems, Software Specification, Formalized Data Flow Diagrams, Timed Petri Nets.  
Address: 226 Atanasoff Hall  Ames, Iowa 50011-1040, USA  
Affiliation: Department of Computer Science  Iowa State University  
Note: TR #96-23 December 1996  c Copyright 1996 by  
Abstract-found: 0
Intro-found: 0
Reference: [BR90] <author> I.I. Bestuzheva and V.V. Rudnev. </author> <title> Timed Petri Nets: Classification and Comparative Analysis. </title> <journal> Automation and Remote Control, </journal> <volume> Pt. 1, 51(10) </volume> <pages> 1303-1318, </pages> <year> 1990. </year>
Reference-contexts: In this paper we only use the first approach. But it is worth noting that we have found our model of time to be expressively convenient and that the particular choice may not be of theoretical importance. It is established in <ref> [BR90] </ref> that, on a fundamental level, any type of TPN is sufficient, as long as it contains nonzero delays. We elsewhere ([SB96a], [SB96c]) argue the tight relationship between (subclasses of) FDFD's, Petri Nets (e. g., [Pet81]), and FIFO Petri Nets (introduced in [MM81]).
Reference: [CB94] <author> D.L. Coleman and A.L. Baker. </author> <title> Synthesizing Structured Analysis and Object-Oriented Specifications. </title> <type> Technical Report 94-04, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <month> March </month> <year> 1994. </year> <note> Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: Numerous formalizations of DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], [You89], [Har92], and [Har96]. In this paper we use the definitions of Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], <ref> [CB94] </ref>, [WBL93], and [LWBL96]. [War86] introduces a transformation schema that allows to represent the control and timing aspects of a real system modeled as a DFD.
Reference: [CGL94] <author> G. Ciardo, R. German, and C. Lindemann. </author> <title> A Charcterization of the Stochastic Process Underlying a Stochastic Petri Net. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 20(7) </volume> <pages> 506-515, </pages> <year> 1994. </year>
Reference: [Chi85] <author> G. Chiola. </author> <title> A Software Package for the Analysis of Generalized Stochastic Petri Net Models. </title> <booktitle> In International Workshop on Timed Petri Nets, </booktitle> <address> Torino, Italy, </address> <month> July </month> <year> 1985, </year> <pages> pages 136-143, </pages> <year> 1985. </year>
Reference-contexts: Some of these problems concern the state explosion and undecidability. However, there exists a large number of automated tools that help evaluate, analyze, and solve TPN's. To mention only a few, in <ref> [Chi85] </ref> a software package is introduced that allows the steady state and transient analysis of generalized Stochastic Petri Nets. [Cum85] describes a software package for the analysis of Stochastic Petri Nets models where transition firing times are distributed as Phase-Type. [Men85] provides a tool for the analysis of TPN's where firing
Reference: [Col91] <author> D.L. Coleman. </author> <title> Formalized Structured Analysis Specifications. </title> <type> PhD Thesis, </type> <institution> Iowa State University, Ames, Iowa, </institution> <month> 50011, </month> <year> 1991. </year>
Reference-contexts: Numerous formalizations of DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], [You89], [Har92], and [Har96]. In this paper we use the definitions of Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in <ref> [Col91] </ref>, [CB94], [WBL93], and [LWBL96]. [War86] introduces a transformation schema that allows to represent the control and timing aspects of a real system modeled as a DFD.
Reference: [Cum85] <author> A. Cumani. </author> <title> ESP | A Package for the Evaluation of Stochastic Petri Nets with Phase-Type Distributed Transition Times. </title> <booktitle> In International Workshop on Timed Petri Nets, </booktitle> <address> Torino, Italy, </address> <month> July </month> <year> 1985, </year> <pages> pages 144-151, </pages> <year> 1985. </year>
Reference-contexts: However, there exists a large number of automated tools that help evaluate, analyze, and solve TPN's. To mention only a few, in [Chi85] a software package is introduced that allows the steady state and transient analysis of generalized Stochastic Petri Nets. <ref> [Cum85] </ref> describes a software package for the analysis of Stochastic Petri Nets models where transition firing times are distributed as Phase-Type. [Men85] provides a tool for the analysis of TPN's where firing only occurs within the limits of time defined by the interval [a; b]; b a.
Reference: [DeM78] <author> T. DeMarco. </author> <title> Structured Analysis and System Specification. </title> <publisher> Yourdon, Inc., </publisher> <address> New York, New York, </address> <year> 1978. </year>
Reference-contexts: Within this model, bubbles can represent processes in a distributed or concurrent system. Flows can then represent message paths. A bubble consumes the information (values) on its in-flows, and produces information on its out-flows. Numerous formalizations of DFD's have appeared in the technical literature, e. g., in <ref> [DeM78] </ref>, [WM85a], [WM85b], [Har87], [TP89], [You89], [Har92], and [Har96].
Reference: [GM95] <author> R. German and J. Mitzlaff. </author> <title> Transient Analysis of Deterministic and Stochastic Petri Nets with TimeNET. </title> <editor> In H. Beilner and F. Bause, editors, </editor> <booktitle> Lecture Notes in Computer Science Vol. 977: Quantitative Evaluation of Computing and Communication Systems, </booktitle> <pages> pages 209-223, </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Heidelberg, </address> <year> 1995. </year> <month> 19 </month>
Reference-contexts: In <ref> [GM95] </ref>, TimeNET, a tool especially designed for non-Markovian Stochastic Petri Nets is presented and a comparison with other Petri Net tools is given. It should be possible to reuse and extend methods, algorithms, and tools known from TPN's for TDFD's.
Reference: [God82] <author> H.P. Godbersen. </author> <title> On the Problem of Time in Nets. </title> <editor> In C. Girault and W. Reisig, editors, </editor> <volume> Informatik-Fachberichte Vol. 52: </volume> <booktitle> Application and Theory of Petri Nets, </booktitle> <pages> pages 23-30, </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Heidelberg, </address> <year> 1982. </year>
Reference-contexts: Future research should be directed towards the question how decidability problems for TDFD's and FDFD's are related, similar to the discussion in <ref> [God82] </ref> where liveness properties of Petri Nets and Timed Petri Nets are compared. Acknowledgements Symanzik's research was partially supported by a German "DAAD-Doktorandenstipendium aus Mitteln des zweiten Hochschulsonderprogramms". The authors wish to thank Herbert T. David and Kenneth J. Koehler for many valuable suggestions on the presentation of this topic. 18
Reference: [Har87] <author> D. Harel. Statecharts: </author> <title> A Visual Formalism for Complex Systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8(3) </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference-contexts: Flows can then represent message paths. A bubble consumes the information (values) on its in-flows, and produces information on its out-flows. Numerous formalizations of DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], <ref> [Har87] </ref>, [TP89], [You89], [Har92], and [Har96].
Reference: [Har92] <author> D. Harel. </author> <title> Biting the Silver Bullet. </title> <journal> Computer, </journal> <volume> 21(1) </volume> <pages> 8-20, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: Flows can then represent message paths. A bubble consumes the information (values) on its in-flows, and produces information on its out-flows. Numerous formalizations of DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], [You89], <ref> [Har92] </ref>, and [Har96].
Reference: [Har96] <author> D. Harel. </author> <title> Executable Object Modeling with Statecharts. </title> <booktitle> In Proceedings of the 18th International Conference on Software Engineering, </booktitle> <pages> pages 246-257. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1996. </year>
Reference-contexts: Flows can then represent message paths. A bubble consumes the information (values) on its in-flows, and produces information on its out-flows. Numerous formalizations of DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], [You89], [Har92], and <ref> [Har96] </ref>. In this paper we use the definitions of Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and [LWBL96]. [War86] introduces a transformation schema that allows to represent the control and timing aspects of a real system modeled as a DFD.
Reference: [LWBL96] <author> G.T. Leavens, T. Wahls, A.L. Baker, and K. Lyle. </author> <title> An Operational Semantics of Firing Rules for Structured Analysis Style Data Flow Diagrams. </title> <type> Technical Report 93-28d, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <month> December </month> <year> 1993, </year> <note> revised, July 1996. Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: However, as used in practice, there has been no precise semantics for DFD's, let alone an incorporation of a model of time. In this paper, we augment the Formalized Data Flow Diagrams (FDFD's) defined in <ref> [LWBL96] </ref> by adding a deterministic (or stochastic) time behavior for the consumption of values from in-flows to processes and the production of values to the out-flows from processes. We call our new FDFD model Timed (or Stochastic) Data Flow Diagrams (TDFD's or SDFD's). <p> Numerous formalizations of DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], [You89], [Har92], and [Har96]. In this paper we use the definitions of Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and <ref> [LWBL96] </ref>. [War86] introduces a transformation schema that allows to represent the control and timing aspects of a real system modeled as a DFD. <p> In particular, for the definitions and example in this paper, we use the notation from <ref> [LWBL96] </ref>. The potential for direct execution of these FDFD's is presented in [WBL94]. It has been shown recently that a subclass of FDFD's, so called persistent flow-free Reduced Data Flow Diagrams (PFF-RDFD's) is Turing equivalent ([SB96a]). <p> Timed (Stochastic) Data Flow Diagrams will be introduced in Section 1.3. In Section 1.4, we describe a Producer/Consumer Model as a TDFD and consider possible execution policies. We conclude this paper with an overview on future work in Section 1.5. 1.2 Definitions The definition of FDFD's from <ref> [LWBL96] </ref> is: Definition (1.2.1): A Formalized Data Flow Diagram (FDFD) is a quintuple F DF D = (B ; FLOWNAMES ; TYPES ; P ; F ); where B is a set of bubbles, FLOWNAMES is a set of flows, TYPES is a set of types, P is the set fpersistent, <p> The following notational convention for members from these domains is used: b 2 B; fn 2 FLOWNAMES ; T 2 TYPES ; p 2 P ; f 2 F . While a more rigorous definition of the mappings used to define the execution behavior of FDFD's is contained in <ref> [LWBL96] </ref>, a less formal explanation follows. Consumable flows are modeled as infinite queues of values and persistent flows are modeled as shared variables for which the source bubble can write the value and the destination bubble can read the value.
Reference: [MBB + 85] <author> M.A. Marsan, G. Balbo, A. Bobbio, G. Chiola, G. Conte, and A. Cumani. </author> <title> On Petri Nets with Stochastic Timing. </title> <booktitle> In International Workshop on Timed Petri Nets, </booktitle> <address> Torino, Italy, </address> <month> July </month> <year> 1985, </year> <pages> pages 80-87, </pages> <year> 1985. </year>
Reference-contexts: We have borrowed from the work on Timed Petri Nets (TPN's), in particular from <ref> [MBB + 85] </ref>, for incorporating a model of time into FDFD's. However, TPN's are used primarily to capture the requisite synchronization in concurrent and distributed systems, but do not usually represent the full functional behavior of the systems. <p> Therefore, Stochastic Data Flow Diagram (SDFD) is a more appropriate name for our new model. We try to follow the general approach of Stochastic Petri Nets given in <ref> [MBB + 85] </ref> when defining SDFD's, when considering the impact of different execution policies on the semantics of the model, and when allowing a general time distribution that induces an associated stochastic process.
Reference: [MC87] <author> M.A. Marsan and G. Chiola. </author> <title> On Petri Nets with Determinstic and Exponentially Distributed Firing Times. </title> <editor> In G. Rozenberg, editor, </editor> <booktitle> Lecture Notes in Computer Science Vol. 266: Advances in Petri Nets 1987, </booktitle> <pages> pages 132-145, </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Heidelberg, </address> <year> 1987. </year>
Reference-contexts: Different types of probability distributions and execution policies will result in stochastic processes of different flavors, some of them easy to analyze and some of them difficult to capture. For Timed Petri Nets (TPN's), most work has been done for Exponential distributions (e. g., <ref> [MC87] </ref>), associated to a Markov process which is usually easy to analyze. Reasonable analytical results also can be gained for Phase-Type distributions. Other time behavior that can be found in the literature for TPN's, e. g., Deterministic timing (e. g., [MC87]), mixture of Deterministic and Exponential timing, and interval timing, should <p> most work has been done for Exponential distributions (e. g., <ref> [MC87] </ref>), associated to a Markov process which is usually easy to analyze. Reasonable analytical results also can be gained for Phase-Type distributions. Other time behavior that can be found in the literature for TPN's, e. g., Deterministic timing (e. g., [MC87]), mixture of Deterministic and Exponential timing, and interval timing, should result in reasonable results for TDFD's, too. 17 Many problems that occur during the analysis of TDFD's have been known for a long time when analyzing TPN's. Some of these problems concern the state explosion and undecidability.
Reference: [Men85] <author> M. Menasche. PAREDE: </author> <title> An Automated Tool for the Analysis of Time(d) Petri Nets. </title> <booktitle> In International Workshop on Timed Petri Nets, </booktitle> <address> Torino, Italy, </address> <month> July </month> <year> 1985, </year> <pages> pages 162-169, </pages> <year> 1985. </year>
Reference-contexts: To mention only a few, in [Chi85] a software package is introduced that allows the steady state and transient analysis of generalized Stochastic Petri Nets. [Cum85] describes a software package for the analysis of Stochastic Petri Nets models where transition firing times are distributed as Phase-Type. <ref> [Men85] </ref> provides a tool for the analysis of TPN's where firing only occurs within the limits of time defined by the interval [a; b]; b a. In [GM95], TimeNET, a tool especially designed for non-Markovian Stochastic Petri Nets is presented and a comparison with other Petri Net tools is given.
Reference: [MM81] <author> R. Martin and G. Memmi. </author> <title> Specification and Validation of Sequential Processes Communicating by FIFO Channels. </title> <booktitle> I.E.E. Conference Publication No. 198: Fourth International Conference on Software Engineering for Telecommunication Switching Systems, Warwick, </booktitle> <month> July </month> <year> 1981, </year> <pages> pages 54-57, </pages> <year> 1981. </year>
Reference-contexts: It is established in [BR90] that, on a fundamental level, any type of TPN is sufficient, as long as it contains nonzero delays. We elsewhere ([SB96a], [SB96c]) argue the tight relationship between (subclasses of) FDFD's, Petri Nets (e. g., [Pet81]), and FIFO Petri Nets (introduced in <ref> [MM81] </ref>). The work presented here covers one of the interrelated aspects of Statistics and Software Engineering, combined in the new interdisciplinary field "Statistical Software Engineering" 1 .
Reference: [Nat96] <institution> National Academy of Sciences. Statistical Software Engineering. National Academy Press, </institution> <address> Washington, D.C., </address> <year> 1996. </year> <month> 20 </month>
Reference: [Pet81] <author> J.L. Peterson. </author> <title> Petri Net Theory and the Modeling of Systems. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Engle-wood Cliffs, New Jersey, </address> <year> 1981. </year>
Reference-contexts: It is established in [BR90] that, on a fundamental level, any type of TPN is sufficient, as long as it contains nonzero delays. We elsewhere ([SB96a], [SB96c]) argue the tight relationship between (subclasses of) FDFD's, Petri Nets (e. g., <ref> [Pet81] </ref>), and FIFO Petri Nets (introduced in [MM81]). The work presented here covers one of the interrelated aspects of Statistics and Software Engineering, combined in the new interdisciplinary field "Statistical Software Engineering" 1 .
Reference: [SB96a] <author> J. Symanzik and A.L. Baker. </author> <title> Formalized Data Flow Diagrams and Their Relation to Other Computational Models. </title> <type> Technical Report 96-20, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <month> December </month> <year> 1996. </year> <note> Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference: [SB96b] <author> J. Symanzik and A.L. Baker. </author> <title> Non-Atomic Components of Data Flow Diagrams: Stores, Persistent Flows, and Tests for Empty Flows. </title> <type> Technical Report 96-21, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <note> De-cember 1996. Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference: [SB96c] <author> J. Symanzik and A.L. Baker. </author> <title> Subclasses of Formalized Data Flow Diagrams: Mono-geneous, Linear, and Topologically Free Choice RDFD's. </title> <type> Technical Report 96-22, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <month> December </month> <year> 1996. </year> <note> Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: It is established in [BR90] that, on a fundamental level, any type of TPN is sufficient, as long as it contains nonzero delays. We elsewhere ([SB96a], <ref> [SB96c] </ref>) argue the tight relationship between (subclasses of) FDFD's, Petri Nets (e. g., [Pet81]), and FIFO Petri Nets (introduced in [MM81]). The work presented here covers one of the interrelated aspects of Statistics and Software Engineering, combined in the new interdisciplinary field "Statistical Software Engineering" 1 .
Reference: [TP89] <author> T.H. Tse and L. Pong. </author> <title> Towards a Formal Foundation for DeMarco Data Flow Diagrams. </title> <journal> The Computer Journal, </journal> <volume> 32(1) </volume> <pages> 1-12, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: Flows can then represent message paths. A bubble consumes the information (values) on its in-flows, and produces information on its out-flows. Numerous formalizations of DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], <ref> [TP89] </ref>, [You89], [Har92], and [Har96].
Reference: [War86] <author> P.T. Ward. </author> <title> The Transformation Schema: An Extension of the Data Flow Diagram to Represent Control and Timing. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(2):198-210, </volume> <year> 1986. </year>
Reference-contexts: Numerous formalizations of DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], [You89], [Har92], and [Har96]. In this paper we use the definitions of Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and [LWBL96]. <ref> [War86] </ref> introduces a transformation schema that allows to represent the control and timing aspects of a real system modeled as a DFD.
Reference: [WBL93] <author> T. Wahls, A.L. Baker, and G.T. Leavens. </author> <title> An Executable Semantics for a Formalized Data Flow Diagram Specification Language. </title> <type> Technical Report 93-27, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <note> Novem-ber 1993. Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: Numerous formalizations of DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], [You89], [Har92], and [Har96]. In this paper we use the definitions of Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], <ref> [WBL93] </ref>, and [LWBL96]. [War86] introduces a transformation schema that allows to represent the control and timing aspects of a real system modeled as a DFD.
Reference: [WBL94] <author> T. Wahls, A.L. Baker, and G.T. Leavens. </author> <title> The Direct Execution of SPECS-C++: A Model-Based Specification Language for C++ Classes. </title> <type> Technical Report 94-02b, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <note> February 21 1994, revised, </note> <month> November </month> <year> 1994. </year> <note> Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: In particular, for the definitions and example in this paper, we use the notation from [LWBL96]. The potential for direct execution of these FDFD's is presented in <ref> [WBL94] </ref>. It has been shown recently that a subclass of FDFD's, so called persistent flow-free Reduced Data Flow Diagrams (PFF-RDFD's) is Turing equivalent ([SB96a]).
Reference: [WM85a] <author> P.T. Ward and S.J. Mellor. </author> <title> Structured Development for Real-Time Systems, Volume 1: Introduction and Tools. </title> <publisher> Yourdon, Inc., </publisher> <address> New York, New York, </address> <year> 1985. </year>
Reference-contexts: Our approach is to integrate models of timing behavior and semantic rigor with traditional Data Flow Diagrams (DFD's). DFD's are the basis of the software development methodology known as "Structured Analysis" (SA) ([DeM78], <ref> [WM85a] </ref>). DFD's are popular because their graphical representation and hierarchical structure allow some comprehension by users with non-technical backgrounds and they can also serve as an initial characterization of software architecture. The primary components of DFD's are bubbles and flows. <p> Within this model, bubbles can represent processes in a distributed or concurrent system. Flows can then represent message paths. A bubble consumes the information (values) on its in-flows, and produces information on its out-flows. Numerous formalizations of DFD's have appeared in the technical literature, e. g., in [DeM78], <ref> [WM85a] </ref>, [WM85b], [Har87], [TP89], [You89], [Har92], and [Har96].
Reference: [WM85b] <author> P.T. Ward and S.J. Mellor. </author> <title> Structured Development for Real-Time Systems, Volume 2: Essential Modeling Techniques. </title> <publisher> Yourdon, Inc., </publisher> <address> New York, New York, </address> <year> 1985. </year>
Reference-contexts: Within this model, bubbles can represent processes in a distributed or concurrent system. Flows can then represent message paths. A bubble consumes the information (values) on its in-flows, and produces information on its out-flows. Numerous formalizations of DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], <ref> [WM85b] </ref>, [Har87], [TP89], [You89], [Har92], and [Har96].
Reference: [You89] <author> E. Yourdon. </author> <title> Modern Structured Analysis. </title> <publisher> Yourdon Press Computing Series. Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1989. </year>
Reference-contexts: Flows can then represent message paths. A bubble consumes the information (values) on its in-flows, and produces information on its out-flows. Numerous formalizations of DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], <ref> [You89] </ref>, [Har92], and [Har96].
References-found: 29

