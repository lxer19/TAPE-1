URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-97-07.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Title: Fast and Incremental Routability Check of A Topological Routing Using a Cut-based Encoding  
Author: Man-Fai Yu Wayne Wei-Ming Dai 
Keyword: topological routing, planar routing, routability, single-layer routing, design rule check, visibility graph  
Address: Santa Cruz, CA 95064 USA  
Affiliation: Baskin Center for Computer Engineering Computer Sciences University of California, Santa Cruz  
Date: April 14, 1997  
Pubnum: UCSC-CRL-97-07  
Abstract: Many performance-driven routing algorithms do not consider routability. Routing trees are built assuming that there are no other wires. The main reason for this is that it is NP-hard to guarantee routability. Even checking for routabil-ity is a time-consuming process. This limits the usefulness of many performance-driven routing algorithms because unroutable designs are useless. Previous online routability checking is not fast enough for the many iterative improvement steps in a performance-driven routing algorithm. This paper provides such an algorithm. We propose a versatile topological routing encoding that not only allows an efficient routability check, but also provides proximity information for crosstalk and manufacturability analysis. Our routing model is applicable to a wide range of technologies, including PCB, MCM and standard cell ASIC. It allows rectilinear, octilinear or Euclidean wiring metric and arbitrary-shaped obstacles. It is gridless and supports variable wire width and spacing. Our algorithm is fast enough to be integrated into any iterative improvement schemes such as simulated annealing. Our basic observation is that the placement of obstacles is fixed but rerouting is very frequent. So we emphasize on an efficient rerouting and routability check step but pushes the complexity to building a data structure that depends only on the placement of the obstacles. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Staepelaere, J. Jue, T. Dayan, and W. W.-M. Dai, "Surf: </author> <title> A rubber-band routing system for multichip modules," </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: We achieve these two objectives by noting the following. First, maintaining topological routing takes less effort than the full shape and size of each wire in detail. Second, routability is completely determined by topological routing. The Surf system allows the user to directly manipulate topological routings <ref> [1] </ref>. Valainis et al [2] reported a compaction system using topological layout. Since the final geometry of the wires are not fixed, many performance-oriented optimizations can be applied. For example, wire widths and spacings can be adjusted for yield improvement, impedance matching, crosstalk control and delay.
Reference: [2] <author> J. Valainis, S. Kaptanoglu, E. Liu, and R. Suaya, </author> <title> "Two-dimensional IC layout compaction based on topological design rule checking," </title> <journal> IEEE Trans. Computer-aided Design, </journal> <volume> vol. 9, </volume> <pages> pp. 260-275, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: First, maintaining topological routing takes less effort than the full shape and size of each wire in detail. Second, routability is completely determined by topological routing. The Surf system allows the user to directly manipulate topological routings [1]. Valainis et al <ref> [2] </ref> reported a compaction system using topological layout. Since the final geometry of the wires are not fixed, many performance-oriented optimizations can be applied. For example, wire widths and spacings can be adjusted for yield improvement, impedance matching, crosstalk control and delay. <p> In this paper, we propose a cut-based encoding. In this encoding, the main objects in the encoding are cuts. Each cut contains a sequence of intersecting wires. This approach was used by several researchers for PCB routing, compaction and layout optimization <ref> [8, 9, 10, 2, 11] </ref>. Our encoding is based on Yu, Darnauer and Dai [11]. Since any encoding necessarily describes the topological routing, we can create a corresponding wire-based encoding from a cut-based encoding and vice versa.
Reference: [3] <author> F. M. Maley, </author> <title> Single-layer wire routing and compaction. </title> <address> Cambridge, MA: </address> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: This leads to efficient schemes of iterative improvement of topological routing. We first describe our routing model in Section 2. Then we give a brief summary of the major properties of wires and cuts. The majority of the results is from Maley <ref> [3] </ref>. Then we give an estimation of the number of critical cuts. This is the number of cuts we have 2 2 THE ROUTING MODEL Wires terminate at terminals. Terminals can be standalone or on the edge of an obstacle. A terminal is also an obstacle. <p> We directly supports obstacles as objects and does not restrict them to be on a grid. This is important in performance-driven routing systems because wires may be sized for delay and spacing may be irregular for crosstalk control. In Maley's work <ref> [3] </ref>, the routing model is gridless but terminals are not allowed to touch an obstacle. <p> The routing region B = P X T where X is the set of all obstacles and T the set of all terminals. B is usually an open multiconnected space. 3 The Routability Theorem This section briefly introduces some result of Maley <ref> [3] </ref> on which we develop the encoding. The most important concepts are cuts and flows. Intuitively, we measure the wires between a pair of obstacles. <p> The flow has to be always less than the capacity for all cuts in order for the whole design to be routable. 4 3 THE ROUTABILITY THEOREM A major result of Maley <ref> [3, esp. Ch. 2] </ref> is that we only need to consider the shortest cuts and wires. To decide whether a topological routing is routable, we first compute the rubberband equivalent of all the wires. <p> So all cuts within an equivalence class (cut class for short) has the same flow. The cut with the lowest capacity is called the dominant cut of the cut class. Maley proved that all critical cuts are straight <ref> [3] </ref>. From now on we will only consider straight cuts. We say that two cut classes 1 and 2 intersect if the endpoints of 1 and 2 are on different obstacles and for any straight cut in 1 there is a straight cut in 2 that intersects it. <p> Proof: Suppose there is a maximal planar subgraph that is not a triangulation. Then there is a face with more than 3 vertices. Name these vertices in counterclockwise order 11 Corollary 3. (a) shows the cuts that needs to be checked according to Maley <ref> [3] </ref>. (b) shows all the dominant cuts. It is sufficient to check these cuts. From these cuts, we choose a maximal planar subset as our encoding basis (c). These are the explicit cuts.
Reference: [4] <author> K.-Y. Khoo and J. Cong, </author> <title> "An efficient multilayer MCM router based on four-via routing," </title> <journal> IEEE Trans. Computer-aided Design, </journal> <volume> vol. 14, </volume> <pages> pp. 1277-1290, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: Our model allows concave obstacles to be represented as a group of abutting convex obstacles so there is no practical limitation on the shape of obstacles. On a grid-based layout system, obstacles are defined by clusters of grids. Terminals are also on grids <ref> [4, 5] </ref>. These systems need many grid points to represent large obstacles. This is because their grid points is a uniform discretization of the routing space. We directly supports obstacles as objects and does not restrict them to be on a grid.
Reference: [5] <author> J. D. Cho, K.-F. Liao, S. Rajie, and M. Sarrafzadeh, </author> <title> "M 2 R: Multilayer routing algorithm for high-performance MCMs," </title> <journal> IEEE Trans. Circuits and Systems I, </journal> <volume> vol. 41, </volume> <pages> pp. 253-265, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Our model allows concave obstacles to be represented as a group of abutting convex obstacles so there is no practical limitation on the shape of obstacles. On a grid-based layout system, obstacles are defined by clusters of grids. Terminals are also on grids <ref> [4, 5] </ref>. These systems need many grid points to represent large obstacles. This is because their grid points is a uniform discretization of the routing space. We directly supports obstacles as objects and does not restrict them to be on a grid.
Reference: [6] <author> R. L. Grahm, D. E. Knuth, and O. Patashnik, </author> <title> Concrete Mathematics: A foundation for Computer Science. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <editor> 2nd ed., </editor> <year> 1994. </year>
Reference-contexts: By symmetry, - = 2 (n) where (n) is the number of irreducible fractions in [0 : : : 1] with denominator less than or equal to n. It can be shown that <ref> [6, pp. 139] </ref> (x) = 3x 2 = 2 + O (x log x). Hence - 2 fi (n 2 ), i.e., linear to the number of points. <p> Any irreducible fraction can be expressed as (m + m 0 )=(n + n 0 ) where m, m 0 , n and n 0 are positive integers and m 0 n mn 0 = 1 <ref> [6, pp. 118] </ref>. The three fractions, m=n &lt; (m + m 0 )=(n + n 0 ) &lt; m 0 =n 0 are consecutive fractions in the sense that there are no other fractions of denominator less than or equal to n + n 0 between the gaps.
Reference: [7] <author> R. Cole and A. Siegel, </author> <title> "River routing every which way, but loose," </title> <booktitle> in Proc. 25th Ann. Symp. Foundation of Comp. Sci., </booktitle> <address> (Singer Island, FL), </address> <pages> pp. 65-73, </pages> <publisher> IEEE, IEEE Computer Society Press, </publisher> <month> October </month> <year> 1984. </year> <note> 24 REFERENCES </note>
Reference: [8] <author> R. P. Bazylevych, E. Zamora, and N. F. Storozenko, </author> <title> "The flexible routing algorithm for PCB," </title> <journal> Visnyk Lvivskoho Politekhnichnoho Instytutu, </journal> <volume> vol. N76, </volume> <pages> pp. 83-88, </pages> <year> 1973. </year> <note> In Ukrainian. </note>
Reference-contexts: In this paper, we propose a cut-based encoding. In this encoding, the main objects in the encoding are cuts. Each cut contains a sequence of intersecting wires. This approach was used by several researchers for PCB routing, compaction and layout optimization <ref> [8, 9, 10, 2, 11] </ref>. Our encoding is based on Yu, Darnauer and Dai [11]. Since any encoding necessarily describes the topological routing, we can create a corresponding wire-based encoding from a cut-based encoding and vice versa.
Reference: [9] <author> R. P. Bazylevych, E. F. Zamora, N. F. Storozenko, and R. Pelke, </author> <title> "Flexible Literzugverlegung fur Zweiseitige Leiterplatten mit Hilfe der EDVA 'm-222'," </title> <booktitle> in XX Internat. Vissenschaftliches Kolloquium, (Technische Hochschule Ilmenau), </booktitle> <pages> pp. 159-162, </pages> <year> 1975. </year> <note> In German. </note>
Reference-contexts: In this paper, we propose a cut-based encoding. In this encoding, the main objects in the encoding are cuts. Each cut contains a sequence of intersecting wires. This approach was used by several researchers for PCB routing, compaction and layout optimization <ref> [8, 9, 10, 2, 11] </ref>. Our encoding is based on Yu, Darnauer and Dai [11]. Since any encoding necessarily describes the topological routing, we can create a corresponding wire-based encoding from a cut-based encoding and vice versa.
Reference: [10] <editor> R. P. Bazylevych and R. Pelke, "Probleme der Optimierung der Leiter zugver legung bein Rechnergestiitzten Leiterplattenentwurf," </editor> <booktitle> in 23 Intern. Wiss. Koll., (TH Ilmenau), </booktitle> <pages> pp. 117-120, </pages> <year> 1978. </year> <note> In German. </note>
Reference-contexts: In this paper, we propose a cut-based encoding. In this encoding, the main objects in the encoding are cuts. Each cut contains a sequence of intersecting wires. This approach was used by several researchers for PCB routing, compaction and layout optimization <ref> [8, 9, 10, 2, 11] </ref>. Our encoding is based on Yu, Darnauer and Dai [11]. Since any encoding necessarily describes the topological routing, we can create a corresponding wire-based encoding from a cut-based encoding and vice versa.
Reference: [11] <author> M.-F. Yu, J. Darnauer, and W. W.-M. Dai, </author> <title> "Interchangeable pin routing with application to package layout," </title> <booktitle> in Proc. Intl. Conf. Computer-aided Design, </booktitle> <address> (Santa Clara, CA), </address> <publisher> IEEE, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: In this paper, we propose a cut-based encoding. In this encoding, the main objects in the encoding are cuts. Each cut contains a sequence of intersecting wires. This approach was used by several researchers for PCB routing, compaction and layout optimization <ref> [8, 9, 10, 2, 11] </ref>. Our encoding is based on Yu, Darnauer and Dai [11]. Since any encoding necessarily describes the topological routing, we can create a corresponding wire-based encoding from a cut-based encoding and vice versa. <p> In this encoding, the main objects in the encoding are cuts. Each cut contains a sequence of intersecting wires. This approach was used by several researchers for PCB routing, compaction and layout optimization [8, 9, 10, 2, 11]. Our encoding is based on Yu, Darnauer and Dai <ref> [11] </ref>. Since any encoding necessarily describes the topological routing, we can create a corresponding wire-based encoding from a cut-based encoding and vice versa. The fundamental advantage of cut-based encoding is that the basis of the encoding is detached from the routing.
Reference: [12] <author> S. K. Ghosh and D. M. Mount, </author> <title> "An output sensitive algorithm for computing visibility grpahs," </title> <journal> SIAM J. of Computing, </journal> <volume> vol. 20, </volume> <pages> pp. 888-910, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Fig. 6 shows our process. We first represent all polygons as multiple line segments (features in Maley [3]'s terminology). For an obstacle with attached terminals, we break up its boundary at the attached terminals and at its polygonal vertices (Fig. 6a). We use Ghosh's algorithm <ref> [12] </ref> to compute the visibility graph between all pairs of line segments and/or points. The complexity of this algorithm is O (n log n + E) where n is the number of points and endpoints of line segments and E the number of edges in the visibility graph.
Reference: [13] <author> F. P. Preparata and M. I. Shamos, </author> <title> Computational Geometry: An Introduction. </title> <booktitle> Texts and monographs in computer science, </booktitle> <address> New York, NY: </address> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Pick enough cuts to form a triangulation, designate them as explicit cuts Designate the rest as implicit cuts many cuts of the same capacity, we arbitrarily choose one. Next we compute all the intersections of these cuts. We use an algorithm described in Preparata and Shamos <ref> [13, pp. 284] </ref> to compute all the intersections between all pairs of cuts in O ((K + E) log E) time where K is the number of intersections.
References-found: 13

