URL: http://www.cs.iastate.edu/tech-reports/TR95-05.ps
Refering-URL: http://www.cs.iastate.edu/tech-reports/catalog.html
Root-URL: 
Title: A PHYSICAL EXAMPLE FOR TEACHING CURRIED FUNCTIONS  
Author: Gary T. Leavens Gary T. Leavens, 
Keyword: functional programming, physics, currying, teaching, examples. 1994 CR Categories D.1.1 [Programming Techniques] Applicative (Functional) Programming; J.2 [Physical Sciences and Engineering] Physics; K.3.2 [Computers and  
Address: 226 Atanasoff Hall  Ames, Iowa 50011-1040 USA  
Affiliation: Department of Computer Science  Iowa State University  
Note: TR #95-05 March 1995  Education] Computer and Information Science Education Computer science edua-tion. Submitted for publication.  1995. All rights reserved.  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> Harold Abelson, Gerald Jay Sussman, and Julie Sussman. </author> <title> Structure and Interpretation of Computer Programs. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1985. </year>
Reference-contexts: Since a closure record is just a data structure in C, the helping function invoke_closure is needed to call the function in the closure with an additional argument. 1 If one looks at the semantics of objectoriented programming languages (see pages 140-142 of <ref> [1] </ref> for the idea), one can see that the objects in an objectoriented programming language are very similar to closures. <p> However, to demonstrate the utility of curried functions, one should use a language, such as Scheme <ref> [1, 6, 14] </ref> that supports the automatic creation and invocation of closures. Because Scheme automatically creates closures, and can call them easily, students are not burdened with extraneous details and can concentrate on how to use the concept. <p> Because Scheme automatically creates closures, and can call them easily, students are not burdened with extraneous details and can concentrate on how to use the concept. For this reason, and also because the language is used in several texts that teach curried functions in the context of introductory programming <ref> [1, 6, 14] </ref> and programming languages [10], Scheme will be used in the rest of this paper. As a simple example of the power of Scheme for this kind of example, consider and prefix notation. <p> Sussman says that he never wrote down his lecture. Although his lecture was titled Teaching the Control of Complexity, the idea does not seem to have made it into the practice of teaching functional programming, and it does not appear in <ref> [1] </ref>. A PHYSICAL EXAMPLE FOR TEACHING CURRIED FUNCTIONS 5 also has as its approximate value 666.2 Newtons.
Reference: [2] <author> H. B. </author> <title> Curry. </title> <journal> Grundlagen der kombinatorischen logik. Amer. J. Math., </journal> <volume> 52 </volume> <pages> 509-536, 789-834, </pages> <year> 1930. </year>
Reference: [3] <author> Haskell B. Curry, Robert Feys, and William Craig. </author> <title> Combinatory Logic. </title> <booktitle> Studies in logic and the foundations of mathematics. </booktitle> <publisher> North-Holland Pub. Co., </publisher> <address> Amsterdam, </address> <year> 1958. </year>
Reference: [4] <author> Antony. J. T. Davie. </author> <title> An Introduction to Functional Programming Systems using Haskell. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, UK, </address> <year> 1992. </year>
Reference-contexts: Also included are undergraduate and graduate courses in programming language semantics (unit PL10 in [15]), with titles such as Essentials of Programming Languages [7, p.27]. Curried functions are also directly supported by some modern functional programming languages, such as Haskell <ref> [4] </ref>. Curry [2,3] and others [13] [5, pages 153-156] studying the concept of a function asked the question: does a programming language need to provide functions with an arbitrary number of arguments? Of course, there are many examples of useful functions that take several arguments, such as addition.
Reference: [5] <author> Gottlob Frege. </author> <title> Collected Papers, chapter Function and Concept, </title> <address> pages 137-156. </address> <publisher> Basil Blackwell, </publisher> <address> Jena, </address> <note> 1984 edition, 1891. Translated by Peter Geach, edited by Brian McGuinness. </note>
Reference-contexts: Also included are undergraduate and graduate courses in programming language semantics (unit PL10 in [15]), with titles such as Essentials of Programming Languages [7, p.27]. Curried functions are also directly supported by some modern functional programming languages, such as Haskell [4]. Curry [2,3] and others [13] <ref> [5, pages 153-156] </ref> studying the concept of a function asked the question: does a programming language need to provide functions with an arbitrary number of arguments? Of course, there are many examples of useful functions that take several arguments, such as addition.
Reference: [6] <author> Daniel P. Friedman and Matthias Felleisen. </author> <title> The Little LISPer (trade edition). </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1987. </year>
Reference-contexts: Although a data structure, called a closure (described below), must be built-in to a language that supports currying, it is well-known that no other data structures are needed for a programming language to be universal <ref> [6] </ref>. Furthermore, this data structure is all that is needed to implement functions, so this way of resolving the question seems to be simpler. The main point of this paper is to give an example that can be used to explain the utility of curried functions. <p> However, to demonstrate the utility of curried functions, one should use a language, such as Scheme <ref> [1, 6, 14] </ref> that supports the automatic creation and invocation of closures. Because Scheme automatically creates closures, and can call them easily, students are not burdened with extraneous details and can concentrate on how to use the concept. <p> Because Scheme automatically creates closures, and can call them easily, students are not burdened with extraneous details and can concentrate on how to use the concept. For this reason, and also because the language is used in several texts that teach curried functions in the context of introductory programming <ref> [1, 6, 14] </ref> and programming languages [10], Scheme will be used in the rest of this paper. As a simple example of the power of Scheme for this kind of example, consider and prefix notation.
Reference: [7] <author> Daniel P. Friedman, Mitchell Wand, and Christopher T. Haynes. </author> <title> Essentials of Programming Languages. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: Also included are undergraduate and graduate courses in programming language semantics (unit PL10 in [15]), with titles such as Essentials of Programming Languages <ref> [7, p.27] </ref>. Curried functions are also directly supported by some modern functional programming languages, such as Haskell [4]. <p> To illustrate the idea of function closures, and why they are needed if one is to be able to curry functions, consider the traditional first example of a curried function, a curried version of addition [14, p.210] <ref> [7, p. 27] </ref> [10, p. 100].
Reference: [8] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The C Programming Language (second edition). </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1988. </year>
Reference-contexts: Figure 1 shows an attempt to write a curried addition function, called cadd, in ANSI C <ref> [8] </ref>. (A language with functions, or function pointers, as values is needed for this illustration.) The goal of this attempt is that one should be able to write (cadd (2))(3) and have the result be 5. #include &lt;stdio.h&gt; typedef int (*func)(int); /* functions that take and return integers */ int takes_y
Reference: [9] <author> Gary T. Leavens. </author> <title> Fields in physics are like curried functions or physics for functional programmers. </title> <type> Technical Report 94-06b, </type> <institution> Department of Computer Science, Iowa State University, Ames, Iowa, </institution> <month> 50011, May </month> <year> 1994. </year> <note> Available by anonymous ftp from ftp.cs.iastate.edu, and by email from almanac@cs.iastate.edu. </note>
Reference-contexts: However, in this case the order of arguments does reflect the order implicit in the concept of the Newtonian gravitational field used in Physics. (See <ref> [9] </ref> for more details on the relationship between curried functions and fields.) RECOMMENDATION I recommend the use of such physical examples for demonstrating the utility of curried functions to students of functional programming.
Reference: [10] <author> Samuel N. Kamin. </author> <title> Programming Languages: An Interpreter-Based Approach. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1990. </year>
Reference-contexts: BACKGROUND Curried functions and currying are an important topic in computer science courses that teach functional programming [14, section 7.3]. Such courses include undergraduate courses in programming paradigms (unit PL11 in the ACMs Computing Curricula 1991 [15]), with titles such as Principles of Programming Languages [11, p. 388] <ref> [10, p. 100] </ref>. Also included are undergraduate and graduate courses in programming language semantics (unit PL10 in [15]), with titles such as Essentials of Programming Languages [7, p.27]. Curried functions are also directly supported by some modern functional programming languages, such as Haskell [4]. <p> To illustrate the idea of function closures, and why they are needed if one is to be able to curry functions, consider the traditional first example of a curried function, a curried version of addition [14, p.210] [7, p. 27] <ref> [10, p. 100] </ref>. <p> For this reason, and also because the language is used in several texts that teach curried functions in the context of introductory programming [1, 6, 14] and programming languages <ref> [10] </ref>, Scheme will be used in the rest of this paper. As a simple example of the power of Scheme for this kind of example, consider and prefix notation. In Scheme, the form ( define n e) binds the name n to the value of the expression e.
Reference: [11] <author> Bruce J. MacLennan. </author> <booktitle> Principles of Programming Languages (second edition). </booktitle> <publisher> Holt, Rinehart, and Winston, </publisher> <address> New York, </address> <year> 1987. </year>
Reference-contexts: BACKGROUND Curried functions and currying are an important topic in computer science courses that teach functional programming [14, section 7.3]. Such courses include undergraduate courses in programming paradigms (unit PL11 in the ACMs Computing Curricula 1991 [15]), with titles such as Principles of Programming Languages <ref> [11, p. 388] </ref> [10, p. 100]. Also included are undergraduate and graduate courses in programming language semantics (unit PL10 in [15]), with titles such as Essentials of Programming Languages [7, p.27]. Curried functions are also directly supported by some modern functional programming languages, such as Haskell [4].
Reference: [12] <author> Laurence C. Paulson. </author> <title> ML for the Working Programmer. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, UK, </address> <year> 1991. </year>
Reference-contexts: I have used such examples on homeworks with some success in an introductory class in computer programming that is taught using Scheme. I have also used such examples in lectures in a graduate course in programming languages that has been taught using Standard ML <ref> [12] </ref>. Students find such example are intuitive, and connected with their real-world experience. They are particularly excited about such examples if they have already taken a course in Physics. The aura of Physics as being natural adds naturality to the concept of curried functions, which might otherwise seem highly artificial.
Reference: [13] <author> Moses Schnfinkel. </author> <title> Uber die bausteine der mathematischen logik. </title> <journal> Math. Annalen, </journal> <volume> 92 </volume> <pages> 305-316, </pages> <year> 1924. </year> <note> An English translation appears in From Frege to Gdel, </note> <editor> edited by Jean van Heijenoort (Harvard Univ. </editor> <publisher> Press, </publisher> <year> 1967), </year> <pages> pages 355-366. </pages>
Reference-contexts: Also included are undergraduate and graduate courses in programming language semantics (unit PL10 in [15]), with titles such as Essentials of Programming Languages [7, p.27]. Curried functions are also directly supported by some modern functional programming languages, such as Haskell [4]. Curry [2,3] and others <ref> [13] </ref> [5, pages 153-156] studying the concept of a function asked the question: does a programming language need to provide functions with an arbitrary number of arguments? Of course, there are many examples of useful functions that take several arguments, such as addition.
Reference: [14] <author> George Springer and Daniel P. Friedman. </author> <title> Scheme and the Art of Programming. </title> <publisher> McGraw-Hill, </publisher> <address> New York, N.Y., </address> <year> 1989. </year>
Reference-contexts: Good motivating examples for teaching curried functions and their utility can be taken from Physics. BACKGROUND Curried functions and currying are an important topic in computer science courses that teach functional programming <ref> [14, section 7.3] </ref>. Such courses include undergraduate courses in programming paradigms (unit PL11 in the ACMs Computing Curricula 1991 [15]), with titles such as Principles of Programming Languages [11, p. 388] [10, p. 100]. <p> To illustrate the idea of function closures, and why they are needed if one is to be able to curry functions, consider the traditional first example of a curried function, a curried version of addition <ref> [14, p.210] </ref> [7, p. 27] [10, p. 100]. <p> However, to demonstrate the utility of curried functions, one should use a language, such as Scheme <ref> [1, 6, 14] </ref> that supports the automatic creation and invocation of closures. Because Scheme automatically creates closures, and can call them easily, students are not burdened with extraneous details and can concentrate on how to use the concept. <p> Because Scheme automatically creates closures, and can call them easily, students are not burdened with extraneous details and can concentrate on how to use the concept. For this reason, and also because the language is used in several texts that teach curried functions in the context of introductory programming <ref> [1, 6, 14] </ref> and programming languages [10], Scheme will be used in the rest of this paper. As a simple example of the power of Scheme for this kind of example, consider and prefix notation.
Reference: [15] <author> Allen B. Tucker, Bruce H. Barnes, et al. </author> <title> Computing Curricula 1991. </title> <journal> Communications of the ACM, </journal> <volume> 34(6) </volume> <pages> 69-84, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: BACKGROUND Curried functions and currying are an important topic in computer science courses that teach functional programming [14, section 7.3]. Such courses include undergraduate courses in programming paradigms (unit PL11 in the ACMs Computing Curricula 1991 <ref> [15] </ref>), with titles such as Principles of Programming Languages [11, p. 388] [10, p. 100]. Also included are undergraduate and graduate courses in programming language semantics (unit PL10 in [15]), with titles such as Essentials of Programming Languages [7, p.27]. <p> Such courses include undergraduate courses in programming paradigms (unit PL11 in the ACMs Computing Curricula 1991 <ref> [15] </ref>), with titles such as Principles of Programming Languages [11, p. 388] [10, p. 100]. Also included are undergraduate and graduate courses in programming language semantics (unit PL10 in [15]), with titles such as Essentials of Programming Languages [7, p.27]. Curried functions are also directly supported by some modern functional programming languages, such as Haskell [4].
References-found: 15

