URL: ftp://ftp.irisa.fr/techreports/1995/PI-900.ps.gz
Refering-URL: http://www.cs.gatech.edu/computing/classes/cs7431_98_spring/
Root-URL: 
Title: 900 LOGICAL TIME: A WAY TO CAPTURE CAUSALITY IN DISTRIBUTED SYSTEMS  
Author: M. RAYNAL, M. SINGHAL 
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Charron-Bost, B. </author> <title> Concerning the size of logical clocks in distributed systems. </title> <journal> Inf. Proc. Letters, </journal> <volume> vol.39, </volume> <year> (1991), </year> <pages> pp. 11-16. </pages>
Reference-contexts: However, the dimension of vector clocks cannot be less than n for this property <ref> [1] </ref>. Event Counting If d is always 1 in the rule R1, then the i th component of vector clock at process p i , vt i [i], denotes the number of events that have occurred at p i until that instant. <p> In this section, we discuss efficient ways to maintain vector clocks; similar techniques can be used to efficiently implement matrix clocks. It has been shown <ref> [1] </ref> that if vector clocks have to satisfy the strong consistency property, then in general vector timestamps must be at least of size n.
Reference: [2] <author> Fidge, L.J. </author> <title> Timestamp in message passing systems that preserves partial ordering. </title> <booktitle> Proc. 11th Australian Comp. Conf., </booktitle> <month> (Feb. </month> <year> 1988), </year> <pages> pp. 56-66. </pages>
Reference-contexts: Irisa Causality in Distributed Systems 9 If the increment value d is always 1, the scalar time has the following interesting property: if event e has a timestamp h, then h-1 represents the minimum logical duration, counted in units of events, required before producing the event e <ref> [2] </ref>; we call it the height of the event e, in short height (e). In other words, h-1 events have been produced sequentially before the event e regardless of the processes that produced these events.
Reference: [3] <author> Fidge, C. </author> <title> Logical time in distributed computing systems. </title> <booktitle> IEEE Computer, </booktitle> <month> (August </month> <year> 1991), </year> <pages> pp. 28-33. </pages>
Reference: [4] <author> Fischer, M.J., Michael, A. </author> <title> Sacrifying serializability to attain hight availability of data in an unreliable network. </title> <booktitle> Proc. of ACM Symposium on Principles of Database Systems, </booktitle> <year> (1982), </year> <pages> pp. 70-75. </pages>
Reference-contexts: Deliver message m. A system of matrix clocks was first informally proposed by Michael and Fischer in 1982 <ref> [4] </ref> and has been used by Wuu and Bernstein [12] and by Lynch and Sarin [9] to discard obsolete information in replicated databases. 6.2 Basic Property Clearly vector mt i [i; :] contains all the properties of vector clocks.
Reference: [5] <author> Fowler J., Zwaenepoel W. </author> <title> Causal distributed breakpoints. </title> <booktitle> Proc. of 10th Int'l. Conf. on Distributed Computing Systems, </booktitle> <year> (1990), </year> <pages> pp. 134-141. </pages> <note> Irisa Causality in Distributed Systems 19 </note>
Reference-contexts: This technique can substantially reduce the cost of maintaining vector clocks in large systems if process interaction exhibits temporal or spatial localities. However, it requires that communication channels be FIFO. Irisa Causality in Distributed Systems 15 7.2 Fowler-Zwaenepoel's Direct-Dependency Technique Fowler-Zwaenepoel's direct-dependency technique <ref> [5] </ref> does not maintain vector clocks on-the-fly. Instead, in this technique a process only maintains information regarding direct dependencies on other processes. A vector time for an event, that represents transitive dependencies on other processes, is constructed off-line from a recursive search of the direct dependency information at processes.
Reference: [6] <author> Jard C., Jourdan G-C. </author> <title> Dependency tracking and filtering in distributed computations. </title> <booktitle> in Brief announcements of the ACM symposium on PODC, </booktitle> <year> (1994). </year> <note> (A full presentation appeared as IRISA Tech. Report No. 851, </note> <year> 1994). </year>
Reference-contexts: Otherwise, during the reconstruction of a vector timestamp from the direct-dependency vectors, all the causal dependencies will not be captured. If events occur very frequently, this technique will require recording the history of a large number of events. In the Jard-Jourdan's technique <ref> [6] </ref>, events can PI n-900 16 M. Raynal and M. Singhal be adaptively observed while maintaining the capability of retrieving all the causal dependencies of an observed event.
Reference: [7] <author> Lamport, L. </author> <title> Time, clocks and the ordering of events in a distributed system. </title> <journal> Comm. ACM, </journal> <volume> vol.21, </volume> <month> (July </month> <year> 1978), </year> <pages> pp. 558-564. </pages>
Reference-contexts: Moreover each particular logical clock system provides its users with some additional properties. PI n-900 8 M. Raynal and M. Singhal 4 Scalar Time 4.1 Definition The scalar time representation was proposed by Lamport in 1978 <ref> [7] </ref> as an attempt to totally order events in a distributed system. Time domain in this representation is the set of non-negative integers. The logical local clock of a process p i and its local view of the global time are squashed into one integer variable C i . <p> Deliver the message. 1. 4.2 Basic Property Clearly, scalar clocks satisfy the monotonicity and hence the consistency property. In addition, scalar clocks can be used to totally order the events in a distributed system as follows <ref> [7] </ref>: The timestamp of an event is denoted by a tuple (t, i) where t is its time of occurrence and i is the identity of the process where it occurred. <p> The total order is generally used to ensure liveness properties in distributed algorithms (requests are timestamped and served according to the total order on these timestamps) <ref> [7] </ref>.
Reference: [8] <author> Mattern, F. </author> <title> Virtual time and global states of distributed systems. </title> <booktitle> Proc. "Parallel and distributed algorithms" Conf., </booktitle> <editor> (Cosnard, Quinton, Raynal, Robert Eds), </editor> <publisher> North-Holland, </publisher> <year> (1988), </year> <pages> pp. 215-226. </pages>
Reference-contexts: Reason for this is that the logical local clock and logical global clock of a process are squashed into one, resulting in the loss of information. 5 Vector Time 5.1 Definition The systems of vector clocks was developed independently by Fidge [2,3], Mattern <ref> [8] </ref>, and Schmuck [10]. (A brief historical perspective of vector clocks is given in the Sidebar 2.) In the system of vector clocks, the time domain is represented by a set of n-dimensional non-negative integer vectors.
Reference: [9] <author> Sarin, S.K., Lynch, L. </author> <title> Discarding obsolete information in a replicated data base system. </title> <journal> IEEE Trans. on Soft. Eng., vol.SE 13,1, </journal> <month> (Jan. </month> <year> 1987), </year> <pages> pp. 39-46. </pages>
Reference-contexts: Deliver message m. A system of matrix clocks was first informally proposed by Michael and Fischer in 1982 [4] and has been used by Wuu and Bernstein [12] and by Lynch and Sarin <ref> [9] </ref> to discard obsolete information in replicated databases. 6.2 Basic Property Clearly vector mt i [i; :] contains all the properties of vector clocks.
Reference: [10] <author> Schmuck, F. </author> <title> The use of efficient broadcast in asynchronous distributed systems. </title> <type> Ph. D. Thesis, </type> <institution> Cornell University, TR88-928, </institution> <year> (1988), </year> <pages> 124 pages. </pages>
Reference-contexts: Reason for this is that the logical local clock and logical global clock of a process are squashed into one, resulting in the loss of information. 5 Vector Time 5.1 Definition The systems of vector clocks was developed independently by Fidge [2,3], Mattern [8], and Schmuck <ref> [10] </ref>. (A brief historical perspective of vector clocks is given in the Sidebar 2.) In the system of vector clocks, the time domain is represented by a set of n-dimensional non-negative integer vectors.
Reference: [11] <author> Singhal, M., Kshemkalyani, A. </author> <title> An Efficient Implementation of Vector Clocks. </title> <journal> Information Processing Letters, </journal> <volume> 43, </volume> <month> August </month> <year> 1992, </year> <pages> pp. 47-52. </pages>
Reference-contexts: Therefore, in general the size of vector timestamp is the number of processes involved in a distributed computation; however, several optimizations are possible and next, we discuss techniques to implement vector timestamps efficiently. 7.1 Singhal-Kshemkalyani's Differential Technique Singhal-Kshemkalyani's technique <ref> [11] </ref> is based on the observation that between suc cessive events at a process, only few entries of the vector clock at that process are PI n-900 14 M. Raynal and M. Singhal likely to change.

Reference: [1] <author> Awerbuch, B. </author> <title> Complexity of network synchronization. </title> <journal> Journal of the ACM, </journal> <volume> vol.32,4, </volume> <year> (1985), </year> <pages> pp. 804-823. </pages>
Reference-contexts: However, the dimension of vector clocks cannot be less than n for this property <ref> [1] </ref>. Event Counting If d is always 1 in the rule R1, then the i th component of vector clock at process p i , vt i [i], denotes the number of events that have occurred at p i until that instant. <p> In this section, we discuss efficient ways to maintain vector clocks; similar techniques can be used to efficiently implement matrix clocks. It has been shown <ref> [1] </ref> that if vector clocks have to satisfy the strong consistency property, then in general vector timestamps must be at least of size n.
Reference: [2] <author> Berry, G. </author> <title> Real time programming : special purpose or general purpose languages. </title> <booktitle> IFIP Congress, Invited talk, </booktitle> <address> San Francisco, </address> <year> (1989). </year>
Reference-contexts: Irisa Causality in Distributed Systems 9 If the increment value d is always 1, the scalar time has the following interesting property: if event e has a timestamp h, then h-1 represents the minimum logical duration, counted in units of events, required before producing the event e <ref> [2] </ref>; we call it the height of the event e, in short height (e). In other words, h-1 events have been produced sequentially before the event e regardless of the processes that produced these events.
Reference: [3] <author> Chandy, K.M., Misra, J. </author> <title> The drinking philosophers problem. </title> <journal> ACM Toplas, </journal> <volume> vol.6,4, </volume> <year> (1984), </year> <pages> pp. 632-646. </pages>
Reference: [4] <author> Jefferson, D. </author> <title> Virtual time. </title> <journal> ACM Toplas, </journal> <volume> vol.7,3, </volume> <year> (1985), </year> <pages> pp. 404-425. </pages>
Reference-contexts: Deliver message m. A system of matrix clocks was first informally proposed by Michael and Fischer in 1982 <ref> [4] </ref> and has been used by Wuu and Bernstein [12] and by Lynch and Sarin [9] to discard obsolete information in replicated databases. 6.2 Basic Property Clearly vector mt i [i; :] contains all the properties of vector clocks.
Reference: [5] <author> Misra, J. </author> <title> Distributed discrete event simulation. </title> <journal> ACM Computing Surveys, </journal> <volume> vol.18,1, </volume> <year> (1986), </year> <pages> pp. 39-65. </pages>
Reference-contexts: This technique can substantially reduce the cost of maintaining vector clocks in large systems if process interaction exhibits temporal or spatial localities. However, it requires that communication channels be FIFO. Irisa Causality in Distributed Systems 15 7.2 Fowler-Zwaenepoel's Direct-Dependency Technique Fowler-Zwaenepoel's direct-dependency technique <ref> [5] </ref> does not maintain vector clocks on-the-fly. Instead, in this technique a process only maintains information regarding direct dependencies on other processes. A vector time for an event, that represents transitive dependencies on other processes, is constructed off-line from a recursive search of the direct dependency information at processes.
Reference: [6] <author> Raynal, M., Helary, J.M. </author> <title> Synchronization and control of distributed systems and programs. </title> <publisher> Wiley & sons, </publisher> <year> (1990), </year> <note> 124 p. </note>
Reference-contexts: Otherwise, during the reconstruction of a vector timestamp from the direct-dependency vectors, all the causal dependencies will not be captured. If events occur very frequently, this technique will require recording the history of a large number of events. In the Jard-Jourdan's technique <ref> [6] </ref>, events can PI n-900 16 M. Raynal and M. Singhal be adaptively observed while maintaining the capability of retrieving all the causal dependencies of an observed event.
Reference: [7] <author> Ricart, G., Agrawala, </author> <title> A.K. An optimal algorithm for mutual exclusion in computer networks. </title> <journal> Comm. ACM, </journal> <volume> vol.24,1, </volume> <month> (Jan. </month> <year> 1981), </year> <pages> pp. 9-17. </pages>
Reference-contexts: Moreover each particular logical clock system provides its users with some additional properties. PI n-900 8 M. Raynal and M. Singhal 4 Scalar Time 4.1 Definition The scalar time representation was proposed by Lamport in 1978 <ref> [7] </ref> as an attempt to totally order events in a distributed system. Time domain in this representation is the set of non-negative integers. The logical local clock of a process p i and its local view of the global time are squashed into one integer variable C i . <p> Deliver the message. 1. 4.2 Basic Property Clearly, scalar clocks satisfy the monotonicity and hence the consistency property. In addition, scalar clocks can be used to totally order the events in a distributed system as follows <ref> [7] </ref>: The timestamp of an event is denoted by a tuple (t, i) where t is its time of occurrence and i is the identity of the process where it occurred. <p> The total order is generally used to ensure liveness properties in distributed algorithms (requests are timestamped and served according to the total order on these timestamps) <ref> [7] </ref>.

Reference: [1] <author> Liskov, B., Ladin, R. </author> <title> Highly available distributed services and fault-tolerant distributed garbage collection. </title> <booktitle> Proc. 5th ACM Symposium on PODC, </booktitle> <year> (1986), </year> <pages> pp. 29-39. </pages>
Reference-contexts: However, the dimension of vector clocks cannot be less than n for this property <ref> [1] </ref>. Event Counting If d is always 1 in the rule R1, then the i th component of vector clock at process p i , vt i [i], denotes the number of events that have occurred at p i until that instant. <p> In this section, we discuss efficient ways to maintain vector clocks; similar techniques can be used to efficiently implement matrix clocks. It has been shown <ref> [1] </ref> that if vector clocks have to satisfy the strong consistency property, then in general vector timestamps must be at least of size n.
Reference: [2] <author> Parker, D.S. et al. </author> <title> Detection of mutual inconsistency in distributed systems. </title> <journal> IEEE Trans. on Soft. Eng., vol.SE 9,3, </journal> <month> (May </month> <year> 1983), </year> <pages> pp. 240-246. </pages>
Reference-contexts: Irisa Causality in Distributed Systems 9 If the increment value d is always 1, the scalar time has the following interesting property: if event e has a timestamp h, then h-1 represents the minimum logical duration, counted in units of events, required before producing the event e <ref> [2] </ref>; we call it the height of the event e, in short height (e). In other words, h-1 events have been produced sequentially before the event e regardless of the processes that produced these events.
Reference: [3] <author> Raynal, M. </author> <title> A distributed algorithm to prevent mutual drift between n logical clocks. </title> <journal> Inf. Processing Letters, </journal> <volume> vol.24, </volume> <year> (1987), </year> <pages> pp. 199-202. </pages>
Reference: [4] <author> Strom, R.E., Yemini, S. </author> <title> Optimistic recovery in distributed systems. </title> <journal> ACM TOCS, </journal> <volume> vol.3,3, </volume> <month> (August </month> <year> 1985), </year> <pages> pp. 204-226. </pages> <publisher> Irisa </publisher>
Reference-contexts: Deliver message m. A system of matrix clocks was first informally proposed by Michael and Fischer in 1982 <ref> [4] </ref> and has been used by Wuu and Bernstein [12] and by Lynch and Sarin [9] to discard obsolete information in replicated databases. 6.2 Basic Property Clearly vector mt i [i; :] contains all the properties of vector clocks.
References-found: 22

