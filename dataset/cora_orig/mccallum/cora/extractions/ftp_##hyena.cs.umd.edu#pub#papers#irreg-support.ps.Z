URL: ftp://hyena.cs.umd.edu/pub/papers/irreg-support.ps.Z
Refering-URL: http://www.cs.umd.edu/projects/hpsl/compilers/compilers-pub-abs.html
Root-URL: 
Title: Supporting Irregular Distributions in FORTRAN 90D/HPF Compilers  
Author: Ravi Ponnusamy yz Yuan-Shin Hwang Raja Das Joel Saltz Alok Choudhary Geoffrey Fox 
Keyword: support static and dynamic distributed array partitioning, partition loop iterations and indirection arrays, remap arrays from one distribution to another, and carry out index translation, buffer allocation and communication schedule generation.  
Note: This work was sponsored in part by ARPA (NAG-1-1485), NSF (ASC 9213821), and ONR (SC292-1-22913).  
Address: College Park, MD 20742 Syracuse, NY 13244  
Affiliation: UMIACS and Computer Science Department Northeast Parallel Architectures Center University of Maryland Syracuse University  
Abstract: This paper presents methods that make it possible to efficiently support irregular problems using data parallel languages. The approach involves the use of a portable, compiler-independent, runtime support library called CHAOS. The CHAOS runtime support library contains procedures that The CHAOS runtime procedures are used by a prototype Fortran 90D compiler as runtime support for irregular problems. This paper also presents performance results of compiler-generated and hand-parallelized versions of two stripped down applications codes. The first code is derived from an unstructured mesh computational fluid dynamics flow solver and the second is derived from the molecular dynamics code CHARMM. A method is described that makes it possible to emulate irregular distributions in HPF by reordering elements of data arrays and renumbering indirection arrays. The results suggest that an HPF compiler could use reordering and renumbering extrinsic functions to obtain performance comparable to that achieved by a compiler for a language (such as Fortran 90D) that directly supports irregular distributions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M.J. Berger and S. H. Bokhari. </author> <title> A partitioning strategy for nonuniform problems on multiprocessors. </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-36(5):570-580, </volume> <month> May </month> <year> 1987. </year> <month> 23 </month>
Reference-contexts: Researchers have developed a variety of methods to obtain data mappings that are designed to optimize irregular problem communication requirements <ref> [1, 16, 18] </ref>. The distribution produced by these methods needs to be represented by a table that associates a processor assignment with each array element. This kind of distribution is often called an irregular distribution. the graph of 6 nodes and 7 edges. Arrays x and y are data arrays. <p> For instance, a user might choose a partitioner that is based on coordinates <ref> [1] </ref>. A coordinate bisection partitioner decomposes data using the spatial locations of vertices in the mesh. If the user chooses a graph-based partitioner, the connectivity of the mesh could be used to decompose the mesh. The next step in parallelizing this application involves assigning equal amounts of work to processors. <p> All measurements were done on the Intel iPSC/860 machine. Initially, data arrays are in BLOCK distribution. 5.1 Effect of Irregular Distribution A geometry based partitioner, recursive coordinate bisection (RCB) <ref> [1] </ref>, was used to obtain an irregular data distribution. Performance results obtained using other kinds of partitioners are reported elsewhere [13]. The effect of irregular distribution is shown in Table 1.
Reference: [2] <author> Z. Bozkus, A. Choudhary, G. Fox, T. Haupt, S. Ranka, and M.-Y. Wu. </author> <title> Compiling Fortran 90D/HPF for distributed memory MIMD computers. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 21(1) </volume> <pages> 15-26, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Runtime support has been incorporated in the Fortran 90D compiler being developed at Syracuse University <ref> [2] </ref>.
Reference: [3] <author> B. R. Brooks, R. E. Bruccoleri, B. D. Olafson, D. J. States, S. Swaminathan, and M. Karplus. Charmm: </author> <title> A program for macromolecular energy, minimization, and dynamics calculations. </title> <journal> Journal of Computational Chemistry, </journal> <volume> 4:187, </volume> <year> 1983. </year>
Reference-contexts: Many scientific applications make extensive use of indirectly accessed arrays. Examples of such problems include computational fluid dynamics codes [11], molecular dynamics codes (CHARMM, AMBER, GROMOS, etc.) <ref> [3] </ref>, diagonal or polynomial preconditioned iterative linear solvers, and time dependent flame modeling codes. These problems are called irregular problems. Figure 1 illustrates code with an irregular loop. This example shows the code that sweeps over nedge mesh edges. Arrays x and y are data arrays. <p> Mesh edges are partitioned so that 1) load balance is maintained, and 2) computations mostly employ locally stored data. Other unstructured problems have similar indirectly accessed arrays. For instance, consider the non-bonded force calculation in the molecular dynamics code, CHARMM <ref> [3] </ref>, shown in Figure 4. Force components associated with each atom are stored as Fortran arrays. The loop L1 sweeps over all atoms. In this discussion, it is assumed that L1 is a parallel loop while L2 is a sequential one. <p> Notice that there are two ghost elements (in dashed lines) at the middle of the reordered array. 5 Compiler Support and Experimental Results This section presents the compiler transformations used to handle irregular templates that appear in the molecular dynamics code, CHARMM <ref> [3] </ref>, and fluid dynamics code, EUL3D [11]. Runtime support has been incorporated in the Fortran 90D compiler being developed at Syracuse University [2].
Reference: [4] <author> B. Chapman, P. Mehrotra, and H. Zima. </author> <title> Programming in Vienna Fortran. </title> <journal> Scientific Programming, </journal> <volume> 1(1) </volume> <pages> 31-50, </pages> <month> Fall </month> <year> 1992. </year>
Reference-contexts: Another example is to assign consecutively indexed array elements to processors in a round-robin fashion. These two standard data distribution schemes are often called BLOCK and CYCLIC data distributions [10], respectively. Languages such as High Performance Fortran (HPF) [10], Fortran D [6] and Vienna Fortran <ref> [4] </ref> allow users to control how array elements are assigned to processor memories. Many scientific applications make extensive use of indirectly accessed arrays. <p> The procedure gather can be used to fetch a copy of off-processor elements. The procedure scatter can be used to send off-processor elements. 4 Language Support A wide range of languages, such as Vienna Fortran <ref> [4] </ref>, pC++ [7], Fortran D [6] and HPF [10], provide a rich set of directives that allow users to specify desired data decompositions. With these directives, compilers can partition loop iterations and generate the communication required to parallelize the code. This research is presented in the Fortran D context. <p> A data partitioner can be invoked to set the values of the permutation array. Support for irregular distributions has been provided by Vienna Fortran also <ref> [4] </ref>. 12 S1 REAL*8 x (N),y (N) S2 INTEGER map (N) S3 C$ DECOMPOSITION reg (N),irreg (N) S4 C$ DISTRIBUTE reg (block) S5 C$ ALIGN map with reg S6 ... set values of map array using some mapping method ..
Reference: [5] <author> Raja Das, Mustafa Uysal, Joel Saltz, and Yuan-Shin Hwang. </author> <title> Communication optimizations for irregular sci-entific computations on distributed memory architectures. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 22(3) </volume> <pages> 462-479, </pages> <month> September </month> <year> 1994. </year> <note> Also available as University of Maryland Technical Report CS-TR-3163 and UMIACS-TR-93-109. </note>
Reference-contexts: C Inner Loop L2 do i = 1, nedge y (edge1 (i)) = y (edge1 (i)) + f (x (edge1 (i)), x (edge2 (i))) y (edge2 (i)) = y (edge2 (i)) + g (x (edge1 (i)), x (edge2 (i))) end do end do It has been widely observed (e.g. <ref> [5] </ref>, [13]) that performance on distributed memory systems can be enhanced by distributing data using a non-standard format. Researchers have developed a variety of methods to obtain data mappings that are designed to optimize irregular problem communication requirements [1, 16, 18]. <p> In this scheme, the translation table is divided into pages, and pages are distributed across processors. Processors that refer to a page frequently receive a copy of the page, making subsequent references local. A more detailed description of this scheme is presented in Das et al. <ref> [5] </ref>. Only the processor list ~p and offset list ~ l are displayed. The numbers above arrays are the index numbers of nodes. Figure 7 (a) shows an irregular distributed.
Reference: [6] <author> Geoffrey Fox, Seema Hiranandani, Ken Kennedy, Charles Koelbel, Uli Kremer, Chau-Wen Tseng, and Min-You Wu. </author> <title> Fortran D language specification. </title> <type> Technical Report CRPC-TR90079, </type> <institution> Center for Research on Parallel Computation, Rice University, </institution> <month> December </month> <year> 1990. </year>
Reference-contexts: Another example is to assign consecutively indexed array elements to processors in a round-robin fashion. These two standard data distribution schemes are often called BLOCK and CYCLIC data distributions [10], respectively. Languages such as High Performance Fortran (HPF) [10], Fortran D <ref> [6] </ref> and Vienna Fortran [4] allow users to control how array elements are assigned to processor memories. Many scientific applications make extensive use of indirectly accessed arrays. <p> The procedure gather can be used to fetch a copy of off-processor elements. The procedure scatter can be used to send off-processor elements. 4 Language Support A wide range of languages, such as Vienna Fortran [4], pC++ [7], Fortran D <ref> [6] </ref> and HPF [10], provide a rich set of directives that allow users to specify desired data decompositions. With these directives, compilers can partition loop iterations and generate the communication required to parallelize the code. This research is presented in the Fortran D context. <p> Array A is then aligned with the decomposition D. Distributing decomposition D by (*,BLOCK) results in a column partition of arrays aligned with D. A detailed description of the language can be found in Fox, et al. <ref> [6] </ref>. The data distribution specifications are then treated as comment statements in a sequential machine Fortran compiler.
Reference: [7] <author> Dennis Gannon, Shelby Yang, and Peter Beckman. </author> <title> User Guide for a Portable Parallel C++ Programming System, pC++. </title> <institution> Department of Computer Science and CICA, Indiana University, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: The procedure gather can be used to fetch a copy of off-processor elements. The procedure scatter can be used to send off-processor elements. 4 Language Support A wide range of languages, such as Vienna Fortran [4], pC++ <ref> [7] </ref>, Fortran D [6] and HPF [10], provide a rich set of directives that allow users to specify desired data decompositions. With these directives, compilers can partition loop iterations and generate the communication required to parallelize the code. This research is presented in the Fortran D context.
Reference: [8] <author> R. v. Hanxleden, K. Kennedy, and J. Saltz. </author> <title> Value-based distributions in fortran d | a preliminary report. </title> <type> Technical Report CRPC-TR93365-S, </type> <institution> Center for Research on Parallel Computation, Rice University, </institution> <month> December </month> <year> 1993. </year> <title> submitted to Journal of Programming Languages Special Issue on Compiling and RunTime Issues for Distributed Address Space Machines. </title>
Reference-contexts: Vienna Fortran allows user-defined functions to describe irregular distributions. The current version of HPF does not directly support irregular distributions. Language extensions have been proposed by Hanxeleden et al <ref> [8] </ref> and Ponnusamy et al [12] to support irregular distributions in languages like Fortran D. A method is described in this paper that makes it possible to emulate irregular distributions in HPF by reordering elements of data arrays and renumbering indirection arrays.
Reference: [9] <author> High Performance Fortran Forum. </author> <title> High Performance Fortran language specification. </title> <booktitle> Scientific Programming, </booktitle> <address> 2(1-2):1-170, </address> <year> 1993. </year>
Reference-contexts: END FORALL This means that iteration i must be computed on the processor on which x (i) resides, where the sizes of arrays ia and ib are equal to the number of iterations. A similar HPF directive EXECUTE- ON-HOME, proposed in the journal of development <ref> [9] </ref>, provides such a capability. A method proposed by Ponnusamy et al. [13] employs a scheme that executes a loop iteration on the processor that is the home of the largest number of distributed array references in that iteration. This is referred to as the almost owner computes rule.
Reference: [10] <author> C. Koelbel, D. Loveman, R. Schreiber, G. Steele, Jr., and M. Zosel. </author> <title> The High Performance Fortran Handbook. </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Another example is to assign consecutively indexed array elements to processors in a round-robin fashion. These two standard data distribution schemes are often called BLOCK and CYCLIC data distributions <ref> [10] </ref>, respectively. Languages such as High Performance Fortran (HPF) [10], Fortran D [6] and Vienna Fortran [4] allow users to control how array elements are assigned to processor memories. Many scientific applications make extensive use of indirectly accessed arrays. <p> Another example is to assign consecutively indexed array elements to processors in a round-robin fashion. These two standard data distribution schemes are often called BLOCK and CYCLIC data distributions <ref> [10] </ref>, respectively. Languages such as High Performance Fortran (HPF) [10], Fortran D [6] and Vienna Fortran [4] allow users to control how array elements are assigned to processor memories. Many scientific applications make extensive use of indirectly accessed arrays. <p> The procedure gather can be used to fetch a copy of off-processor elements. The procedure scatter can be used to send off-processor elements. 4 Language Support A wide range of languages, such as Vienna Fortran [4], pC++ [7], Fortran D [6] and HPF <ref> [10] </ref>, provide a rich set of directives that allow users to specify desired data decompositions. With these directives, compilers can partition loop iterations and generate the communication required to parallelize the code. This research is presented in the Fortran D context.
Reference: [11] <author> D. J. Mavriplis. </author> <title> Three dimensional unstructured multigrid for the Euler equations, paper 91-1549cp. </title> <booktitle> In AIAA 10th Computational Fluid Dynamics Conference, </booktitle> <month> June </month> <year> 1991. </year>
Reference-contexts: Languages such as High Performance Fortran (HPF) [10], Fortran D [6] and Vienna Fortran [4] allow users to control how array elements are assigned to processor memories. Many scientific applications make extensive use of indirectly accessed arrays. Examples of such problems include computational fluid dynamics codes <ref> [11] </ref>, molecular dynamics codes (CHARMM, AMBER, GROMOS, etc.) [3], diagonal or polynomial preconditioned iterative linear solvers, and time dependent flame modeling codes. These problems are called irregular problems. Figure 1 illustrates code with an irregular loop. This example shows the code that sweeps over nedge mesh edges. <p> They consist of a sequence of loops with indirectly accessed arrays and are similar to those depicted in Figure 1. The first application code is an unstructured Euler solver used to study the flow of air over an airfoil <ref> [11] </ref>. Complex aerodynamic shapes require high resolution meshes and, consequently, large numbers of mesh points. Physical values (e.g. velocity, pressure) are associated with each mesh vertex. These values are called flow variables and are stored in arrays. These arrays are called data arrays. <p> Since meshes are typically associated with physical objects, a spatial location can often be associated with each mesh point. The spatial locations of the mesh points and the connectivity of the vertices is determined by the mesh generation strategy <ref> [11] </ref>. Figure 3 depicts a mesh generated by such a process. This is an unstructured mesh representation of a three dimensional aircraft wing. <p> Notice that there are two ghost elements (in dashed lines) at the middle of the reordered array. 5 Compiler Support and Experimental Results This section presents the compiler transformations used to handle irregular templates that appear in the molecular dynamics code, CHARMM [3], and fluid dynamics code, EUL3D <ref> [11] </ref>. Runtime support has been incorporated in the Fortran 90D compiler being developed at Syracuse University [2].
Reference: [12] <author> Ravi Ponnusamy, Joel Saltz, and Alok Choudhary. </author> <title> Runtime-compilation techniques for data partitioning and communication schedule reuse. </title> <booktitle> In Proceedings Supercomputing '93, </booktitle> <pages> pages 361-370. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1993. </year> <note> Also available as University of Maryland Technical Report CS-TR-3055 and UMIACS-TR-93-32. </note>
Reference-contexts: Vienna Fortran allows user-defined functions to describe irregular distributions. The current version of HPF does not directly support irregular distributions. Language extensions have been proposed by Hanxeleden et al [8] and Ponnusamy et al <ref> [12] </ref> to support irregular distributions in languages like Fortran D. A method is described in this paper that makes it possible to emulate irregular distributions in HPF by reordering elements of data arrays and renumbering indirection arrays.
Reference: [13] <author> Ravi Ponnusamy, Joel Saltz, Alok Choudhary, Yuan-Shin Hwang, and Geoffrey Fox. </author> <title> Runtime support and compilation methods for user-specified data distributions. </title> <institution> Technical Report CS-TR-3194 and UMIACSTR-93-135, University of Maryland, Department of Computer Science and UMIACS, </institution> <month> November </month> <year> 1993. </year> <note> To appear in IEEE Transactions on Parallel and Distributed Systems. </note>
Reference-contexts: C Inner Loop L2 do i = 1, nedge y (edge1 (i)) = y (edge1 (i)) + f (x (edge1 (i)), x (edge2 (i))) y (edge2 (i)) = y (edge2 (i)) + g (x (edge1 (i)), x (edge2 (i))) end do end do It has been widely observed (e.g. [5], <ref> [13] </ref>) that performance on distributed memory systems can be enhanced by distributing data using a non-standard format. Researchers have developed a variety of methods to obtain data mappings that are designed to optimize irregular problem communication requirements [1, 16, 18]. <p> A similar HPF directive EXECUTE- ON-HOME, proposed in the journal of development [9], provides such a capability. A method proposed by Ponnusamy et al. <ref> [13] </ref> employs a scheme that executes a loop iteration on the processor that is the home of the largest number of distributed array references in that iteration. This is referred to as the almost owner computes rule. <p> All measurements were done on the Intel iPSC/860 machine. Initially, data arrays are in BLOCK distribution. 5.1 Effect of Irregular Distribution A geometry based partitioner, recursive coordinate bisection (RCB) [1], was used to obtain an irregular data distribution. Performance results obtained using other kinds of partitioners are reported elsewhere <ref> [13] </ref>. The effect of irregular distribution is shown in Table 1. The table shows the performance of hand parallelized versions of the EUL3D template and the CHARMM template with irregular distribution and BLOCK distribution. Partitioner in the table represents the time needed to partition the arrays.
Reference: [14] <author> J. Ramanujam and P. Sadayappan. </author> <title> Compile-time techniques for data distribution in distributed memory machines. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 2(4) </volume> <pages> 472-482, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Researchers have proposed compile-time techniques to partition data automatically by compilers. But their approaches are only applied to regular programs <ref> [14] </ref>. This paper considers two additional language features not found in HPF; variants of these language extensions are found in Fortran D and Vienna Fortran. The first feature is the ON clause; the ON clause allows users to specify which processor is to execute each iteration of a loop.
Reference: [15] <author> Joel Saltz, Harry Berryman, and Janet Wu. </author> <title> Multiprocessors and run-time compilation. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 3(6) </volume> <pages> 573-592, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: These on-the-fly decisions require special runtime support. A set of procedures have been developed, called CHAOS, that can be used by an HPF style compiler. CHAOS is a successor of PARTI <ref> [15] </ref> and provides support for managing user-defined distributions, partitioning loop iterations, remapping data and index arrays, and generating optimized communication schedules. The methods proposed in this paper are implemented in the Syracuse Fortran 90D prototype compiler. Templates from real application codes are employed to study performance. <p> Figure 5 (b) depicts a distribution of atoms to processors carried out using an inertial bisection partitioner. Compare the molecules associated with each processor. 3 Runtime Support This section is an overview of the principles and functionality of the CHAOS runtime support library, a superset of the PARTI library <ref> [15] </ref>. 5 (a) BLOCK Distribution (b) Irregular Distribution 3.1 Overview of CHAOS The CHAOS runtime library has been developed to efficiently handle problems that consist of a sequence of clearly demarcated concurrent computational phases.
Reference: [16] <author> H. Simon. </author> <title> Partitioning of unstructured mesh problems for parallel processing. </title> <booktitle> In Proceedings of the Conference on Parallel Methods on Large Scale Structural Analysis and Physics Applications. </booktitle> <publisher> Pergamon Press, </publisher> <year> 1991. </year>
Reference-contexts: Researchers have developed a variety of methods to obtain data mappings that are designed to optimize irregular problem communication requirements <ref> [1, 16, 18] </ref>. The distribution produced by these methods needs to be represented by a table that associates a processor assignment with each array element. This kind of distribution is often called an irregular distribution. the graph of 6 nodes and 7 edges. Arrays x and y are data arrays.
Reference: [17] <author> A. Vidwans, Y. Kallinderis, and V. Venkatakrishnan. </author> <title> A new parallel dynamic load balancing algorithm for 3d adaptive unstructured grids. </title> <booktitle> In Proceedings of the 11th AIAA CFD Conference, </booktitle> <address> Orlando FL, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: The current version of HPF does not support non-standard distributions. However, HPF can indirectly support such distributions by reordering array elements in ways that lead to reduced communication requirements. Applications scientists have frequently employed variants of this approach when porting irregular codes to parallel architectures <ref> [17] </ref>. A partitioner is first used to obtain a 15 (a) An Example Graph (b) BLOCK Distribution (c) Irregular Distribution Ob <br>- tained Using a Partitioner (d) Effect of Irregular Distribution via Renumbering mapping of array elements to processors.
Reference: [18] <author> R. Williams. </author> <title> Performance of dynamic load balancing algorithms for unstructured mesh calculations. </title> <journal> Con-currency, Practice and Experience, </journal> <volume> 3(5) </volume> <pages> 457-481, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Researchers have developed a variety of methods to obtain data mappings that are designed to optimize irregular problem communication requirements <ref> [1, 16, 18] </ref>. The distribution produced by these methods needs to be represented by a table that associates a processor assignment with each array element. This kind of distribution is often called an irregular distribution. the graph of 6 nodes and 7 edges. Arrays x and y are data arrays.
Reference: [19] <author> Hans Zima and Barbara Chapman. </author> <title> Supercompilers for Parallel and Vector Machines. </title> <address> Addision-Wesely, </address> <year> 1991. </year>
Reference-contexts: The two-phase computations result in two communication phases. Hence, two sets of communication schedules are generated. However, it seems plausible that the loop fusion <ref> [19] </ref> technique and sophisticated data flow analysis could be used by an HPF compiler to generate efficient code by combining the two computation phases as well as the two communication phases.
References-found: 19

