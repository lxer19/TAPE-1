URL: http://www.isi.edu/soar/johnson/wg81.ps
Refering-URL: http://www.isi.edu/software-sciences/feather/research-interests-and-publications.html
Root-URL: http://www.isi.edu
Email: e-mail: fbenner,feather,johnson,lornag@isi.edu  kbenner@andersen.com.]  
Title: Utilizing Scenarios in the Software Development Process  
Author: Kevin M. Benner, Martin S. Feather, W. Lewis Johnson and Lorna A. Zorman [In N. Prakash, C. Rolland, and B. Pernici, 
Keyword: Keycodes: D.2.1; D.2.6 Keywords: Requirements/Specification; Programming Environments  
Note: editors, Information System Development Process, IFIP Transactions A-30, Elsevier Science Publishers, Septem-ber 1993. c fl1993 IFIP. Permission to access via the World Wide Web granted by IFIP. For viewing purposes only. May not be reproduced, stored or retrans-mitted without express permission of Elsevier Science Publishers and IFIP. Mr. Benner's current email address is  
Address: 4676 Admiralty Way, Marina del Rey, CA 90292, USA  
Affiliation: USC/Information Sciences Institute,  
Abstract: Scenarios play an important role throughout the information system development process. Scenarios are partial descriptions of system and environment behavior arising in restricted situations. They are instrumental to the following activities: describing and clarifying the relevant properties of the application domain, uncovering system requirements, evaluating design alternatives, and validating designs. This paper will describe these roles in the context of an example and explain how computer-based tools can support the use of scenarios throughout the development process. The thesis of this paper is based on experience with three such computer-based tools. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.R. Anderson. </author> <title> Acquisition of Cognitive Skill. </title> <journal> Psychological Review, </journal> <volume> 89(4), </volume> <year> 1982. </year>
Reference-contexts: This emphasis on general, all-encompassing descriptions in software engineering stands in stark contrast to most human expertise. Cognitive science has demonstrated that human expert knowledge is organized in chunks, which recognize and respond to specific situations <ref> [1] </ref>. Human problem solving tends to be highly situated, i.e., people respond to details of the situation as it unfolds rather than carry out detailed plans that have been worked out in advance [19].
Reference: [2] <author> J.S. Anderson and B. Durney. </author> <title> Using Scenarios in Deficiency-Driven Requirements Engineering. </title> <booktitle> In RE'93: IEEE International Symposium on Requirements Engineering, </booktitle> <pages> pages 134-141. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1993. </year>
Reference-contexts: There has been limited discussion in the software engineering community of their use for describing, critiquing and explaining system behavior <ref> [2, 8] </ref>. Empirical studies have shown that designers evaluate designs by mentally simulating scenarios [9]. We claim that the significance of scenarios is greater than even these studies suggest.
Reference: [3] <author> K.M. Benner. </author> <title> Specification Reformulation During Specification Validation. </title> <booktitle> In Proceedings, Workshop on Problem Reformulation and Representation Change, Asilomar Conference Center, </booktitle> <address> Pacific Grove, CA, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: Guindon in [9] describes this process with respect to mental simulations. ASC <ref> [3] </ref> provides computer support for this same activity. 6 Computer-Based Support for Scenarios We have seen many ways that people use scenarios in the previous examples. There are also many ways that computer-based tools can support scenario processing.
Reference: [4] <author> R.L. Campbell. </author> <title> Will the Real Scenario Please Stand Up? SIGCHI Bulletin, </title> <booktitle> 24(2) </booktitle> <pages> 6-8, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: Likewise, validating the implemented system against client intent involves evaluating the system's behavior in specific situations. Scenarios have attracted interest lately in the human-computer interaction (HCI) community, as a way of describing sequences of interactions between systems and users [5, 16]. Campbell notes <ref> [4] </ref> that they can be used to illustrate how a user might accomplish particular tasks with the system, to evaluate system usability, to guide interface design, and to test theories of human-computer interaction.
Reference: [5] <author> J.M. Carroll and M.B. Rosson. </author> <title> Getting Around the Task-Artifact Cycle: How to Make Claims and Design by Scenario. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(2) </volume> <pages> 181-212, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: Likewise, validating the implemented system against client intent involves evaluating the system's behavior in specific situations. Scenarios have attracted interest lately in the human-computer interaction (HCI) community, as a way of describing sequences of interactions between systems and users <ref> [5, 16] </ref>. Campbell notes [4] that they can be used to illustrate how a user might accomplish particular tasks with the system, to evaluate system usability, to guide interface design, and to test theories of human-computer interaction.
Reference: [6] <author> J. </author> <title> Conklin and M.L. Begeman. gIBIS|A Hypertext Tool for Exploratory Policy Discussion. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 6(4) </volume> <pages> 303-331, </pages> <year> 1988. </year>
Reference-contexts: Argumentative hypermedia tools such as gIBIS <ref> [6] </ref> can serve this purpose. Such tools use hypertext nodes to record the arguments for or against particular design choices. One form of argument can be whether or not the system supports a particular scenario, described in natural language.
Reference: [7] <author> B. Curtis, H. Krasner, and N. Iscoe. </author> <title> A Field Study of the Software Design Process for Large Systems. </title> <journal> Communications of the ACM, </journal> <volume> 31(11) </volume> <pages> 1268-1287, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: This is intended as an intuitive example (of a system we are all familiar with) that illustrates the activities and corresponding capabilities we are postulating are useful. 5.1 Describing and clarifying the relevant properties of the application domain Curtis et. al. <ref> [7] </ref> cites "the thin spread of application domain knowledge" as an important cause of development effort and mistakes in large software systems. Capturing domain knowledge in the form of scenarios can alleviate this problem. Scenarios are also useful to validate our understanding of domains.
Reference: [8] <author> S.F. Fickas and P. Nagarajan. </author> <title> Critiquing Software Specifications: A Knowledge Based Approach. </title> <journal> IEEE Software, </journal> <volume> 5(6) </volume> <pages> 37-49, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: There has been limited discussion in the software engineering community of their use for describing, critiquing and explaining system behavior <ref> [2, 8] </ref>. Empirical studies have shown that designers evaluate designs by mentally simulating scenarios [9]. We claim that the significance of scenarios is greater than even these studies suggest.
Reference: [9] <author> R. Guindon. </author> <title> Knowledge Exploited by Experts During Software System Design. </title> <journal> Int. J. Man-Machine Studies, </journal> <volume> 33 </volume> <pages> 279-304, </pages> <year> 1990. </year>
Reference-contexts: There has been limited discussion in the software engineering community of their use for describing, critiquing and explaining system behavior [2, 8]. Empirical studies have shown that designers evaluate designs by mentally simulating scenarios <ref> [9] </ref>. We claim that the significance of scenarios is greater than even these studies suggest. Scenarios are pervasive throughout the software development process, and are important for any system that is situated in a complex environment, not just systems with human-computer interfaces [12]. <p> Guindon in <ref> [9] </ref> describes this process with respect to mental simulations. ASC [3] provides computer support for this same activity. 6 Computer-Based Support for Scenarios We have seen many ways that people use scenarios in the previous examples. There are also many ways that computer-based tools can support scenario processing.
Reference: [10] <author> M. Hamer. </author> <title> Traffic Lights Learn To Go With the Flow. </title> <journal> New Scientist, </journal> <volume> 1715:35, </volume> <month> May </month> <year> 1990. </year>
Reference-contexts: It is also an area of current active technological development. The British Government's Road Research Laboratory has recently developed a system called Microprocessor-Optimized Vehicle Actuation (MOVA) that alters light timings to minimize the amount of time vehicles have to wait at intersection <ref> [10] </ref>. The City of Los Angeles has designed and implemented a system called Automated Traffic Surveillance and Control (ATSAC) that is currently being used to control traffic at over one thousand intersections [20]; by 1998 all 4,000 signalized intersections in the city will be integrated into the system [18].
Reference: [11] <author> W. Hseush and G.E. Kaiser. </author> <title> Modeling Concurrency in Parallel Debugging. </title> <booktitle> In Proceedings of the ACM SIGPLAN Symposium on Principles and Practices of Parallel Programming, </booktitle> <pages> pages 11-20. </pages> <publisher> ACM Press, </publisher> <month> March </month> <year> 1990. </year> <journal> Published in SIGPLAN Notices, </journal> <volume> Vol. 25 No. 3, </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: The behavior and the situation are each a partial ordering of states and transitions. Ordering between states and composition of partially ordered states are specified by means of the following common relations <ref> [11] </ref>: sequentiality (e.g., one state must follow another, or one behavior must follow another), partial and total concurrency (e.g., two events must take place at the same time), repetition, permutation, inclusive and exclusive or (e.g., event1 or event2 but not both), negation (e.g., event3 is not to occur) etc. <p> Tools that can record scenarios formally in some fashion are likely to be more useful. Our work has focused more on specialized notations that formalize the situation and behavior in the scenario. In ASC scenarios are expressed as path expressions <ref> [11] </ref>, a notation designed to describe sequences of events. The ARIES representation for states and events [14] may be used to describe scenario situations.
Reference: [12] <author> W.L. Johnson. </author> <title> Specification via Scenarios and Views. </title> <booktitle> In Proceedings of the 3rd International Software Process Workshop, </booktitle> <pages> pages 61-63, </pages> <address> Breckenridge, CO, 1986. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: We claim that the significance of scenarios is greater than even these studies suggest. Scenarios are pervasive throughout the software development process, and are important for any system that is situated in a complex environment, not just systems with human-computer interfaces <ref> [12] </ref>. Furthermore, computer-based tools can enable scenarios to be realized as explicit artifacts. Automated retrieval, execution, etc. of scenarios can supplement and support the activities that software engineers perform mentally on scenarios at the present time.
Reference: [13] <author> W.L. Johnson, M.S. Feather, and D.R. Harris. </author> <title> Integrating Domain Knowledge, Requirements and Specifications. </title> <journal> Journal of Systems Integration, </journal> <volume> 1 </volume> <pages> 283-320, </pages> <year> 1991. </year>
Reference-contexts: These have all been integrated with the our knowledge-based system for supporting requirements acquisition, called ARIES (Acquisition of Requirements and Incremental Evolution into Specifications) <ref> [13, 14] </ref>. This section introduces the systems briefly, so that the reader may have some understanding of how automated tools can make use of scenarios. At the end of the paper, after the uses of scenarios have been surveyed, we will revisit these systems and further categorize their capabilities.
Reference: [14] <author> W.L. Johnson, M.S. Feather, and D.R. Harris. </author> <title> Representation and Presentation of Requirements Knowledge. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 18(10) </volume> <pages> 853-869, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: These have all been integrated with the our knowledge-based system for supporting requirements acquisition, called ARIES (Acquisition of Requirements and Incremental Evolution into Specifications) <ref> [13, 14] </ref>. This section introduces the systems briefly, so that the reader may have some understanding of how automated tools can make use of scenarios. At the end of the paper, after the uses of scenarios have been surveyed, we will revisit these systems and further categorize their capabilities. <p> Our work has focused more on specialized notations that formalize the situation and behavior in the scenario. In ASC scenarios are expressed as path expressions [11], a notation designed to describe sequences of events. The ARIES representation for states and events <ref> [14] </ref> may be used to describe scenario situations.
Reference: [15] <author> W.L. Johnson and L. Zorman. </author> <title> Supporting Groups Involved in Software Specification and Design. </title> <booktitle> In Proceedings of the 1992 CSCW Workshop on Understanding and Supporting Successful Group Work in Software Design, </booktitle> <year> 1992. </year> <note> Available from John Karat, </note> <institution> IBM Watson Research Center. </institution>
Reference-contexts: The Requirements Acquisition by Demonstration (RAD) system is intended to be used by non-programming application domain experts to create application domain scenarios in which multiple objects are interacting with their environment <ref> [15] </ref>. The scenarios are constructed by manipulating a graphical depiction of a situation into which the system being designed will be introduced, such as the depiction of a traffic light system shown in Figure 1.
Reference: [16] <author> J. Karat and J.L. Bennett. </author> <title> Using Scenarios in Design Meetings A Case Study Example. In Taking Software Design Serious Seriously: </title> <booktitle> Practical Techniques for Human-Computer Interaction Design, </booktitle> <pages> pages 63-94. </pages> <publisher> Academic Press, </publisher> <year> 1991. </year>
Reference-contexts: Likewise, validating the implemented system against client intent involves evaluating the system's behavior in specific situations. Scenarios have attracted interest lately in the human-computer interaction (HCI) community, as a way of describing sequences of interactions between systems and users <ref> [5, 16] </ref>. Campbell notes [4] that they can be used to illustrate how a user might accomplish particular tasks with the system, to evaluate system usability, to guide interface design, and to test theories of human-computer interaction.
Reference: [17] <author> V.E. Kelly and U. Nonnenmann. </author> <title> Reducing the Complexity of Formal Specification Acquisition. </title> <booktitle> In Proceedings of the AAAI-88 Workshop on Automating Software Design, </booktitle> <pages> pages 66-72, </pages> <address> St. Paul, MN, </address> <year> 1988. </year>
Reference-contexts: Some systems that demonstrate such capabilities already exist. For example, the WATSON system can take as input a scenario describing a proposed feature for a telephone system, and derive from it a complete specification of the feature <ref> [17] </ref>. We are providing some capabilities along these lines in RAD. The system provides a set of generic building blocks to let domain experts express the domain specific concepts that represent the objects and their situation as well as the behavior of the objects in the scenario.
Reference: [18] <author> E. Rowe. </author> <title> The Los Angeles Automated Traffic Surveillance and Control (ATSAC) System, </title> <month> September </month> <year> 1992. </year> <institution> Los Angeles Department of Transportation. </institution>
Reference-contexts: The City of Los Angeles has designed and implemented a system called Automated Traffic Surveillance and Control (ATSAC) that is currently being used to control traffic at over one thousand intersections [20]; by 1998 all 4,000 signalized intersections in the city will be integrated into the system <ref> [18] </ref>. Computer-controlled traffic signals are increasingly being recognized as having a critical role to play in relieving congestion, and reducing fuel consumption and emissions, and offer a cost-effective alternative to building new freeways and rail lines in urban settings. <p> Placement of loop detectors: Consider the following description on the choice of placement of loop detector (sensors that detect the passage of vehicles) (Figure 3), taken from Rowe <ref> [18] </ref>: "System detectors are placed in either of two configurations: in each marked lane at least 250 feet upstream of the signalized intersection or 100 feet on the departure side of the nearest upstream intersection which is signalized.
Reference: [19] <author> L.A. Suchman. </author> <title> Plans and Situated Actions: The Problem of Human-Machine Communication. </title> <publisher> Cambridge University Press, </publisher> <address> New York, </address> <year> 1987. </year>
Reference-contexts: Human problem solving tends to be highly situated, i.e., people respond to details of the situation as it unfolds rather than carry out detailed plans that have been worked out in advance <ref> [19] </ref>. This incompatibility between software engineering notation and human expertise causes severe difficulties in requirements elicitation and system validation. System analysts must elicit from domain experts general properties of the application domain, and general rules of behavior that the system should follow.
Reference: [20] <author> J. Walters. </author> <title> Los Angeles: Technology and Traffic. </title> <booktitle> Governing, </booktitle> <pages> page 43, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: The City of Los Angeles has designed and implemented a system called Automated Traffic Surveillance and Control (ATSAC) that is currently being used to control traffic at over one thousand intersections <ref> [20] </ref>; by 1998 all 4,000 signalized intersections in the city will be integrated into the system [18].
Reference: [21] <author> P. Zave. </author> <title> An Insider's Evaluation of PAISLey. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> SE-17:212-225, </volume> <year> 1991. </year>
Reference-contexts: If the specification is incomplete, the specialized specification is augmented in order to make it executable, as in the PAISLey simulator <ref> [21] </ref>. This augmentation is incorporated as part of a validation question's situation. Finally, scenarios may be used to capture simplifying assumptions, also as part of a validation question's situation.
References-found: 21

