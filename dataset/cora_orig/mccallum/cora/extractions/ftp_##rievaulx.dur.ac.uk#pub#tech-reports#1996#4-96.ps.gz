URL: ftp://rievaulx.dur.ac.uk/pub/tech-reports/1996/4-96.ps.gz
Refering-URL: http://www.progsoc.uts.edu.au/~geldridg/cpp/
Root-URL: 
Title: Test Case Development During OO Life-Cycle and Evolution  
Keyword: OO Life-cycle Testing- Test Data  
Abstract: Ishbel Duncan, Malcolm Munro and Dave Robson Testing Research Group, Computer Science, University of Durham, DH1 3LE, UK (Computer Science Technical Report 4/96) Abstract Testing is considered as integral to every phase of the OO life-cycle to ensure a well developed test suite covering requirements, design and structure. Release criteria between the phases of development incorporate test suite addition and documentation allowing traceability from requirements through coding to specific test cases. Software engineers can pool their knowledge via the test suite and this expertise can be used for regression testing after system alteration or for re-use considerations. 
Abstract-found: 1
Intro-found: 1
Reference: [Beizer, 1990] <author> Beizer, B. </author> <year> (1990). </year> <title> Software Testing Techniques. </title> <publisher> Van Nostrand Reinhold, 2nd edition. </publisher>
Reference-contexts: We postulate that the domain boundaries between classes are likely to be of a higher dimension, once classes are integrated, and therefore perhaps more likely to engender domain and range `holes' where faults can occur <ref> [Beizer, 1990] </ref>. Hatton hints at this when he states that it is better to have fewer functions of moderate size than many of a smaller size [Hatton, 1995] and the postulate also explains why small routines are generally found to have many faults. <p> Using regular expressions to describe the actions of a class <ref> [Beizer, 1990, Kirani and Tsai, 1994] </ref>, test cases can be derived to cover a variety of situations.
Reference: [Booch, 1986] <author> Booch, G. </author> <year> (1986). </year> <title> Object-Oriented Development. </title> <publisher> IEEE New York. </publisher>
Reference-contexts: An example of life-cycle based test case development is then given. 2 OO Testing Object Oriented (OO) systems have been promoted for ease of design, coding and re-use. Much research effort has been focused on design methods and process metrics <ref> [Henderson-Sellers, 1996, Rumbaugh et al., 1991, Booch, 1986] </ref> yet little has been expended on testing and maintenance aspects. It appears that OO is promoted for its ease of design and use implying that testing and maintenance are easier or cheaper than in traditional, 3GL systems.
Reference: [Duncan et al., 1996a] <author> Duncan, I., Robson, D., and Munro, M. </author> <year> (1996a). </year> <title> Defect Detection in Code. </title> <institution> Computer Science Technical Report 2/96, University of Durham. </institution>
Reference-contexts: There appears not to be any consensus as to which level achieves the better results in the form of error discovery. However, the lack of any recognised taxonomy does not help the process of error detection and assessment <ref> [Duncan et al., 1996a] </ref> The nature of OO systems, being formed from small interacting clusters of classes (components), appears to aid understanding but makes testing more difficult. This may be due to the dispersal of information across several classes and therefore makes control and data tracing more complex.
Reference: [Duncan et al., 1996b] <author> Duncan, I., Robson, D., and Munro, M. </author> <year> (1996b). </year> <title> Differences and Similarities between Testing OO and Procedural Code. </title> <institution> Computer Science Technical Report 5/96, University of Durham. </institution>
Reference-contexts: The presence of inheritance and polymorphism will alter testing necessity and focus but whether traditional unit testing is different from class testing, or whether function integration and object integration testing are comparable, is the subject of other research <ref> [Duncan et al., 1996b] </ref>. However different the testing requirements or focus of application may be, it is true to state that the OO software industry is now facing major testing problems. This is the first step to discovering problems with corrective and adaptive maintenance and regression testing.
Reference: [Graham, 1995] <author> Graham, D. </author> <year> (1995). </year> <title> Testing Object Oriented Systems. </title> <booktitle> UNICOM Seminar Series. </booktitle> <pages> 8 </pages>
Reference-contexts: This is the first step to discovering problems with corrective and adaptive maintenance and regression testing. Industry has debated the worth of OO testing emphasis being placed at the unit level (classes) or at the system level <ref> [Graham, 1995] </ref>. There appears not to be any consensus as to which level achieves the better results in the form of error discovery.
Reference: [Graham et al., 1993] <author> Graham, J., Drakeford, A., </author> <title> and C.D.Turner (1993). The verification, validation and testing of object-oriented systems. </title> <journal> BT technology Journal, </journal> <pages> pages 79 - 88. </pages>
Reference-contexts: Consequently, a check on the adequacy of the test suite must be made. That is, the test suite should be analysed for its fault finding capabilities. It is assumed that OO system testing is no different from traditional system testing <ref> [Graham et al., 1993] </ref>. What is apparent from the literature is the fractured approach to testing OO systems and the lack of methodology. There is also no formalism for measuring the adequacy of the test suite in respect of its fault finding abilities. This however, is similar to traditional systems. <p> Just as in object testing, method order invocation should be checked for correct processing both for valid scenarios (call orders) and for non-valid, either by requirements or design documents. Although other researchers have described the necessity of object integration testing based on call order of methods <ref> [Graham et al., 1993] </ref>, it is equally important to analyse the parameters of those methods. It is because of parameter and data manipulation that statement coverage is considered non sufficient.
Reference: [Harrold et al., 1992] <author> Harrold, M. J., McGregor, J., and Fitzpatrick, K. </author> <year> (1992). </year> <title> Incremental Testing of Object-Oriented Class Structure. </title> <booktitle> In 14th Int. Conference on Software Engineering. </booktitle>
Reference-contexts: There is certainly no standard methodology for the testing of OO code and any method must 2 incorporate strategies for class hierarchy testing and polymorphism. The hierarchical testing strategy of Harrold, McGregor and Fitzpatrick <ref> [Harrold et al., 1992] </ref> indicates the necessity of testing from a root class down the derivation tree to a leaf class. However, this strategy does not indicate what testing has to be performed for completeness. <p> More rigorous testing comes at a price and it must be left to the developers to determine the criteria by which the code is released. If inheritance exists then unit level testing should incorporate the hierarchical strategy for class testing <ref> [Harrold et al., 1992] </ref>. Each class of the inheritance tree should be analysed for coverage and for random method invocation and parameter partitions.
Reference: [Hatton, 1995] <author> Hatton, L. </author> <year> (1995). </year> <title> Bugs: avoiding the avoidable and living with the rest. </title> <booktitle> In Procs. of Durham 95, Ninth European Workshop on Software Maintenance. </booktitle>
Reference-contexts: Hatton hints at this when he states that it is better to have fewer functions of moderate size than many of a smaller size <ref> [Hatton, 1995] </ref> and the postulate also explains why small routines are generally found to have many faults. There is certainly no standard methodology for the testing of OO code and any method must 2 incorporate strategies for class hierarchy testing and polymorphism.
Reference: [Henderson-Sellers, 1996] <author> Henderson-Sellers, B. </author> <year> (1996). </year> <title> Object Oriented Metrics. </title> <publisher> Prentice Hall. </publisher>
Reference-contexts: An example of life-cycle based test case development is then given. 2 OO Testing Object Oriented (OO) systems have been promoted for ease of design, coding and re-use. Much research effort has been focused on design methods and process metrics <ref> [Henderson-Sellers, 1996, Rumbaugh et al., 1991, Booch, 1986] </ref> yet little has been expended on testing and maintenance aspects. It appears that OO is promoted for its ease of design and use implying that testing and maintenance are easier or cheaper than in traditional, 3GL systems.
Reference: [Hennell et al., 1982] <author> Hennell, M., Hedley, D., and Woodward, M. R. </author> <year> (1982). </year> <title> The path implications of a hierarchy of coverage measures on program testing. </title> <type> Technical report, </type> <institution> Dept of Computational Science, University of Liverpool. </institution>
Reference-contexts: It is at this stage that metrics can be used to indicate how well developed the test suite is in terms of its coverage of statements, structures (loops, switches), segments (Linear Code Sequence and Jumps <ref> [Hennell et al., 1982] </ref>), equivalence partitions, data states etc.. The metrics chosen must reflect the strength of testing required. It has already been mentioned that to ensure statement coverage by way of applying a number of test cases equal to the cyclomatic complexity is non sufficient.
Reference: [ISO9126, 1991] <author> ISO9126 (1991). </author> <title> ISO/IEC 9126 Information Technology Software product evaluation Quality characteristics and guidelines for their use. </title>
Reference-contexts: Methods or attributes that have to be adapted for generalisation or extension should be marked as pertaining to maintainability. Marking features allows cross reference to quality issues such as those outlined in ISO/IEC 9126 the standard for quality characteristics <ref> [ISO9126, 1991] </ref>. Documentation is a necessary part of the test suite development process and should form part of the release criteria between phases of the life-cycle. That is, movement should not occur between say, requirements and design phases, until a test suite is built and documented.
Reference: [Jacobsen et al., 1994] <author> Jacobsen, I., Christerson, M., Jonsson, P., and Overgaard, G. </author> <year> (1994). </year> <title> Object Oriented Software Engineering A Use Case Driven Approach. </title> <publisher> Addison Wesley, 4th edition. </publisher>
Reference-contexts: Testing should not be envisaged as a distinct phase of the life-cycle but as an integral part to the design and build process. As requirements are laid out, test cases simulating common use cases or scenarios <ref> [Jacobsen et al., 1994] </ref> can be noted and referenced via those use cases. That is, there should exist traceability between the requirements and the test cases.
Reference: [Kirani and Tsai, 1994] <author> Kirani, S. and Tsai, W. </author> <year> (1994). </year> <title> Specification and Verification of Object Oriented Programs. </title> <type> Technical report, </type> <institution> Computer Science, University of Minnesota, University of Minnesota, </institution> <address> Minneapolis, MN 55455, USA. </address>
Reference-contexts: Using regular expressions to describe the actions of a class <ref> [Beizer, 1990, Kirani and Tsai, 1994] </ref>, test cases can be derived to cover a variety of situations.
Reference: [McCabe et al., 1994] <author> McCabe, T., Dreyer, L., Dunn, A., and Watson, A. </author> <year> (1994). </year> <title> Testing an Object-Oriented Application. </title> <journal> The Quality Journal, </journal> <pages> pages 21 - 27. </pages>
Reference-contexts: These faults are unlikely to be detected at statement coverage level and so it is important to examine object to object calls, effectively thread testing. To assume that a class is safe <ref> [McCabe et al., 1994] </ref> because it has had a set number of test cases applied to it is a misleading test metric. Several test cases may find no errors but a single, well developed test case can discover many faults.
Reference: [Rumbaugh et al., 1991] <author> Rumbaugh, J., M.Blaha, Premerlani, W., Eddy, F., and Lorenson, W. </author> <year> (1991). </year> <title> Object Oriented Modelling and Design. </title> <publisher> Prentice Hall. </publisher> <pages> 9 </pages>
Reference-contexts: An example of life-cycle based test case development is then given. 2 OO Testing Object Oriented (OO) systems have been promoted for ease of design, coding and re-use. Much research effort has been focused on design methods and process metrics <ref> [Henderson-Sellers, 1996, Rumbaugh et al., 1991, Booch, 1986] </ref> yet little has been expended on testing and maintenance aspects. It appears that OO is promoted for its ease of design and use implying that testing and maintenance are easier or cheaper than in traditional, 3GL systems.
References-found: 15

