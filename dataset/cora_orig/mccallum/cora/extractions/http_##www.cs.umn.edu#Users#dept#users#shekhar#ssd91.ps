URL: http://www.cs.umn.edu/Users/dept/users/shekhar/ssd91.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/shekhar/
Root-URL: http://www.cs.umn.edu
Title: Motion in a Geographical Database System  
Author: S. Shekhar T.A. Yang 
Address: Minneapolis, MN 55455  
Affiliation: Computer Science Department University of Minnesota  
Abstract: Motion is an important phenomenon in geographic data related to Intelligent Vehicle Highway System (IVHS). Motion creates a need for frequent updates to the location of moving objects. Search queries like collision detection leads to a sequence of related spatial queries in the presence of moving objects. We evaluate the performance of existing spatial access methods for processing periodic collision detection queries in presence of moving objects. Tree based spatial access methods tend to incur high overhead for balancing and maintaining the tree structure for high update rate due to motion. We propose a new access method, called MoBiLe Files to efficiently manage spatial queries on moving objects. We use homeomorphic functions to map the object locations to disk addresses for saving disk space and computation time. We carry out detailed simulation and analysis of the performance of the proposed methods. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> T.A. Yang, S. Shekhar, </author> <title> and P.A. Hancock, A Relational Database System for Traffic Management Information, </title> <booktitle> Intl. Conf. on Vehicle Navigation & Information Systems (VNIS IVHS), IEEE, </booktitle> <address> (Oct. 1991.). </address>
Reference-contexts: 1. Introduction We are designing a traffic information base for Intelligent Vehicle Highway System (IVHS) applications to achieve the goals of shared resource, efficient disk-based computation and integrity of data <ref> [1, 2] </ref>. The information stored in the database will be used by transportation system designers for traffic modeling and control. The same information will be used by human factors researchers to simulate driving conditions in intelligent cars with headup displays and on-board computer.
Reference: 2. <author> T.A. Yang, S. Shekhar, </author> <title> and P.A. Hancock, Geographic Database for IVHS Management, </title> <booktitle> 2nd International Conference on Applications of Advanced Technologies in Transportation Engineering, ASCE, </booktitle> <month> (August </month> <year> 1991.). </year> <month> - 19 </month> - 
Reference-contexts: 1. Introduction We are designing a traffic information base for Intelligent Vehicle Highway System (IVHS) applications to achieve the goals of shared resource, efficient disk-based computation and integrity of data <ref> [1, 2] </ref>. The information stored in the database will be used by transportation system designers for traffic modeling and control. The same information will be used by human factors researchers to simulate driving conditions in intelligent cars with headup displays and on-board computer.
Reference: 3. <author> M. Coyle and S. Shekhar et.al., </author> <title> Exploring Headsup Displays for Driver Workload Management in Intelligent Vehicle Highway Systems, </title> <booktitle> 2nd International Conference on Applications of Advanced Technologies in Transportation Engineering, ASCE, </booktitle> <month> (August </month> <year> 1991.). </year>
Reference-contexts: The geographic database must provide access methods to handle the updates due to motion. Motion also determines the interesting queries to be processed on the traffic information stored in the database. For example, in a driving simulation environment <ref> [3, 4] </ref> we need to detect collisions among vehicles and other objects to simulate driving scenarios realistically. Collision detection can be modeled as a spatial query to determine the objects intersecting the area occupied by the vehicle of interest.
Reference: 4. <author> S. Shekhar and P. Hancock et.al., </author> <title> Human Factor Issues in Vehicles of Future, </title> <booktitle> Quarterly Bulleting of Human Factors Society, </booktitle> <year> (1991). </year>
Reference-contexts: The geographic database must provide access methods to handle the updates due to motion. Motion also determines the interesting queries to be processed on the traffic information stored in the database. For example, in a driving simulation environment <ref> [3, 4] </ref> we need to detect collisions among vehicles and other objects to simulate driving scenarios realistically. Collision detection can be modeled as a spatial query to determine the objects intersecting the area occupied by the vehicle of interest.
Reference: 5. <author> A. Guttman, R-Trees: </author> <title> A Dynamic Index Structure for Spatial Searching, </title> <booktitle> Proc. SIGMOD International Conf on Management of Data, </booktitle> <pages> pp. 47-57 ACM, </pages> <year> (1984). </year>
Reference-contexts: Recently a number of spatial data access methods have been proposed to retrieve objects which are n-dimensional points or solids. The spatial access methods optimize queries to retrieve all points or solids enclosed in or overlapping with a given search region. The proposed access methods include R-tree <ref> [5, 6] </ref> , Grid Files [7-11] , and other search trees [12, 13, 13-17]. However, these access methods were designed with the assumption of static world with no moving objects. The update rates were assumed to be much smaller than the search query rate. <p> A spatial query is directed to the regions which overlap the area of the given query. Typically the query examines one of the sub-regions at the leaf - 4 - level of the R-tree to identify the objects intersecting the area. R-tree <ref> [5] </ref>, R+-tree [6], k-D-B tree [17], hB-tree [13] and searching with polyhedra [12] are relevant access methods. R-tree is a a multilevel balanced indexing tree structure allowing overlapping and has more than 50% space utilization. <p> We allocated a square-shaped area on disk to the MoBiLe file. - 13 - self speed = low speed: low self speed = low number of vehicle = 2 other speed = high We used the R-tree access method and insert, delete, search, and linear split operation as described in <ref> [5] </ref>. The branching factor of R-tree was determined by disk block size and number of bytes needed to store each object. We experimented with 2 R-trees with branching factors of 32 and 128.
Reference: 6. <author> T. Sellis, N. Roussopoulos, and C. Faloutsos, </author> <title> The R+-Tree: A Dynamic Index for MultiDimensional Objects, </title> <booktitle> Proc 13th International Conf on Very Large Data Bases, </booktitle> <pages> pp. 507-518. </pages> <year> (1987). </year>
Reference-contexts: Recently a number of spatial data access methods have been proposed to retrieve objects which are n-dimensional points or solids. The spatial access methods optimize queries to retrieve all points or solids enclosed in or overlapping with a given search region. The proposed access methods include R-tree <ref> [5, 6] </ref> , Grid Files [7-11] , and other search trees [12, 13, 13-17]. However, these access methods were designed with the assumption of static world with no moving objects. The update rates were assumed to be much smaller than the search query rate. <p> A spatial query is directed to the regions which overlap the area of the given query. Typically the query examines one of the sub-regions at the leaf - 4 - level of the R-tree to identify the objects intersecting the area. R-tree [5], R+-tree <ref> [6] </ref>, k-D-B tree [17], hB-tree [13] and searching with polyhedra [12] are relevant access methods. R-tree is a a multilevel balanced indexing tree structure allowing overlapping and has more than 50% space utilization.
Reference: 7. <author> H. Blanken, A. Ubema, P. Meek, and B. van den Akker, </author> <title> The Generalized Grid File: Description and Performance Aspects, </title> <booktitle> 6th International Conference on Data Engineering, </booktitle> <address> (1990.). </address>
Reference-contexts: The objects located in a grid cell are stored together to preserve the geographic proximity relationship. The grid itself serves as the directory of the access method, storing pointers to the disk blocks containing object addresses. Grid-Files [10 Generalized Grid Files <ref> [7] </ref> Balanced and Nested Grid Files [8], and Grid Files without directory structure [20] utilize the idea of grids. The grid File was designed to handle efficiently a collection of records with a modest number of search attributes whose domains are large and linearly ordered [10].
Reference: 8. <author> M. Freeston, </author> <title> The BANG file: a new kind of grid file, </title> <booktitle> Proc. SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 260-269 ACM, </pages> <year> (1987). </year>
Reference-contexts: The objects located in a grid cell are stored together to preserve the geographic proximity relationship. The grid itself serves as the directory of the access method, storing pointers to the disk blocks containing object addresses. Grid-Files [10 Generalized Grid Files [7] Balanced and Nested Grid Files <ref> [8] </ref>, and Grid Files without directory structure [20] utilize the idea of grids. The grid File was designed to handle efficiently a collection of records with a modest number of search attributes whose domains are large and linearly ordered [10].
Reference: 9. <author> K. Hinrichs and J. Nievergelt, </author> <title> The Grid File: A Data Structure Designed to Support Proximity Queries on Spatial Objects, </title> <institution> Institut fur Informatik, Eidgenossische Technische Hochschule, </institution> <address> Zurich (July 1983). </address>
Reference: 10. <author> J. Nievergelt, H. Hinteberger, and K.D. Sevcik, </author> <title> The Grid File: an Adaptable, Symmetric Multi-Key File structure, </title> <journal> ACM Transactions on Database Systems 9(1) pp. </journal> <pages> 38-71. </pages> <year> (1984). </year>
Reference-contexts: The grid File was designed to handle efficiently a collection of records with a modest number of search attributes whose domains are large and linearly ordered <ref> [10] </ref>. <p> The designers had the above decisions fixed and the following three aspects of the grid file open as parameters to be specified by the implementor: splitting policy, merging policy, and implementation of the grid directory <ref> [10] </ref>. The Grid file requires a main memory array of pointers to disk blocks plus a vector for each dimension of the structure. In production environment with large data sets, the array becomes large and may make space management a problem [21].
Reference: 11. <author> M. Ouksel, </author> <title> The Interpolation-Based Grid File, </title> <booktitle> Proc of Symposium on Database Systems, ACM SIGMOD SIGACT, </booktitle> <address> (1985.). </address>
Reference: 12. <author> H.V. Jagadish, </author> <title> Spatial Search with Polyhedra, </title> <booktitle> 6th International Conference on Data Engineering, </booktitle> <year> (1990). </year>
Reference-contexts: The spatial access methods optimize queries to retrieve all points or solids enclosed in or overlapping with a given search region. The proposed access methods include R-tree [5, 6] , Grid Files [7-11] , and other search trees <ref> [12, 13, 13-17] </ref>. However, these access methods were designed with the assumption of static world with no moving objects. The update rates were assumed to be much smaller than the search query rate. <p> Typically the query examines one of the sub-regions at the leaf - 4 - level of the R-tree to identify the objects intersecting the area. R-tree [5], R+-tree [6], k-D-B tree [17], hB-tree [13] and searching with polyhedra <ref> [12] </ref> are relevant access methods. R-tree is a a multilevel balanced indexing tree structure allowing overlapping and has more than 50% space utilization.
Reference: 13. <author> D.B. Lomet and B. Salzberg, </author> <title> The hB-tree: A robust multiattribute search structure, </title> <booktitle> Proc. of the Fifth International Conf. on Data Engineering, </booktitle> <address> (Feb. 1989). Los Angeles. </address>
Reference-contexts: The spatial access methods optimize queries to retrieve all points or solids enclosed in or overlapping with a given search region. The proposed access methods include R-tree [5, 6] , Grid Files [7-11] , and other search trees <ref> [12, 13, 13-17] </ref>. However, these access methods were designed with the assumption of static world with no moving objects. The update rates were assumed to be much smaller than the search query rate. <p> A spatial query is directed to the regions which overlap the area of the given query. Typically the query examines one of the sub-regions at the leaf - 4 - level of the R-tree to identify the objects intersecting the area. R-tree [5], R+-tree [6], k-D-B tree [17], hB-tree <ref> [13] </ref> and searching with polyhedra [12] are relevant access methods. R-tree is a a multilevel balanced indexing tree structure allowing overlapping and has more than 50% space utilization.
Reference: 14. <author> H.-W. Six and P. Widmayer, </author> <title> Spatial Searching in Geometric Databases, </title> <booktitle> 4th International Conference on Data Engineering, </booktitle> <address> (1988.). </address>
Reference: 15. <author> D.B. Lomet and B. Salzberg, </author> <title> The hB-Tree: A multiattribute Indexing Method with good guaranteed performance, </title> <journal> ACM Transactions on Database Systems 15(4)(Dec. 1990.). </journal>
Reference: 16. <author> R.A. Finkel and J.L. Bentley, </author> <title> Quad trees -- a data structure for retrieval on composite keys, </title> <journal> Acta Inf. </journal> <pages> 4 pp. 1-9. </pages> <year> (1974). </year>
Reference: 17. <author> J.T. Robinson, </author> <title> The K-D-B-tree: a Search Structure for large multidimensional dynamic indexes, </title> <booktitle> Proc. SIGMOD, </booktitle> <pages> pp. 10-18. </pages> <publisher> ACM, </publisher> <year> (1981). </year>
Reference-contexts: A spatial query is directed to the regions which overlap the area of the given query. Typically the query examines one of the sub-regions at the leaf - 4 - level of the R-tree to identify the objects intersecting the area. R-tree [5], R+-tree [6], k-D-B tree <ref> [17] </ref>, hB-tree [13] and searching with polyhedra [12] are relevant access methods. R-tree is a a multilevel balanced indexing tree structure allowing overlapping and has more than 50% space utilization.
Reference: 18. <author> D. Greene, </author> <title> An Implementation and Performance Analysis of Spatial Data Access Methods, </title> <booktitle> Proc. 5th International Conference on Data Engineering, </booktitle> <year> (1989). </year>
Reference-contexts: A number of access methods have been proposed to handle spatial data and spatial queries. Recently a set of comparison studies have been reported to evaluate alternative access methods for various applications <ref> [18, 19] </ref>. The spatial access methods can be classified into two major groups: point access methods and spatial interval access methods [19], based on the types of queries supported. Point access methods are useful in answering queries about the properties of a point. <p> R-trees have the advantage of efficient secondary storage usage while suffers the problem of complex page split algorithm and excessive overlap of rectangles at the top levels of the index, which cause poor performance on region searches [21]. Two important comparison studies were made. First study <ref> [18] </ref> compared the access methods based on R-tree, including R-trees, k-d-B-trees, R+ trees, and 2D-Isam. She implemented insert, split and retrieve operations for each access method. Delete operation was not implemented. Access methods were implemented on the public domain POSTGRES database to reflect the total data management cost.
Reference: 19. <author> H.-P. Kriegel, M. Schiwietz, R. Schneider, and B. Seeger, </author> <title> Performance Comparison of Point and Spatial Access Methods, </title> <booktitle> Proceedings of the First Symposium SSD, </booktitle> <publisher> Springer-Verlag, (1990.). </publisher>
Reference-contexts: A number of access methods have been proposed to handle spatial data and spatial queries. Recently a set of comparison studies have been reported to evaluate alternative access methods for various applications <ref> [18, 19] </ref>. The spatial access methods can be classified into two major groups: point access methods and spatial interval access methods [19], based on the types of queries supported. Point access methods are useful in answering queries about the properties of a point. <p> Recently a set of comparison studies have been reported to evaluate alternative access methods for various applications [18, 19]. The spatial access methods can be classified into two major groups: point access methods and spatial interval access methods <ref> [19] </ref>, based on the types of queries supported. Point access methods are useful in answering queries about the properties of a point. For example, the elevation at a given geographic location may be modeled as a point query. The interval or spatial query relate to a region of space. <p> The rectangles overlapped with each other. The study concluded that R-trees provide the best tradeoff between performance and implementation complexity and that choice of implementation is crucial to the performance of all the methods investigated. A more comprehensive study of point and spatial access methods is presented in <ref> [19] </ref>. A testbed was designed for the evaluation of existing and new access methods. The performance comparison consists of two parts. In part I, multidimensional point access methods are compared, whereas in part II spatial access methods for rectangles are compared.
Reference: 20. <author> H.-P. Kriegel and B. Seeger, PLOP-Hashing: </author> <title> A Grid File without Directory, </title> <booktitle> Proc. IEEE 4th International Conf on Data Engineering,, </booktitle> <pages> pp. 369-376. </pages> <year> (1988). </year> <month> - 20 </month> - 
Reference-contexts: The grid itself serves as the directory of the access method, storing pointers to the disk blocks containing object addresses. Grid-Files [10 Generalized Grid Files [7] Balanced and Nested Grid Files [8], and Grid Files without directory structure <ref> [20] </ref> utilize the idea of grids. The grid File was designed to handle efficiently a collection of records with a modest number of search attributes whose domains are large and linearly ordered [10]. <p> In part I, four methods were selected for implementation and performance comparison: the 2-level grid file [22] , the BANG file, the hB-tree and the BUDDY hash tree. In part II, four methods were selected: the R-tree, the BANG file, the PLOP hashing <ref> [20] </ref> and the BUDDY hash tree. Performance comparisons were run on SUN workstations (3/50 and 3/60) under UNIX using Modula-2 implementations. In part I, seven different data files (distributions) and various types of point queries were used. In part II, five 2-dimensional data files consisting of 100,000 rectangles without duplicate.
Reference: 21. <author> M. Stonebraker, </author> <title> Future Trends in Data Base Systems, </title> <booktitle> Proc. 1988 IEEE Data Engineering Conf., </booktitle> <address> (Feb. 1988.). Los Angeles, CA. </address>
Reference-contexts: The Grid file requires a main memory array of pointers to disk blocks plus a vector for each dimension of the structure. In production environment with large data sets, the array becomes large and may make space management a problem <ref> [21] </ref>. The R-tree on the other hand divides the geographic area in K regions with a comparable number of objects. Each region may further be subdivided into K subregions. The recursive subdivision leads to a tree structure of divided regions. <p> R-trees have the advantage of efficient secondary storage usage while suffers the problem of complex page split algorithm and excessive overlap of rectangles at the top levels of the index, which cause poor performance on region searches <ref> [21] </ref>. Two important comparison studies were made. First study [18] compared the access methods based on R-tree, including R-trees, k-d-B-trees, R+ trees, and 2D-Isam. She implemented insert, split and retrieve operations for each access method. Delete operation was not implemented.
Reference: 22. <author> K. Hinrichs, </author> <title> The grid file system: implementation and case studies for applications, Dissertation No. </title> <type> 7734, </type> <institution> Eidgenossische Technische Hochschule (ETH), </institution> <address> Zurich, </address> <year> (1985). </year>
Reference-contexts: The performance comparison consists of two parts. In part I, multidimensional point access methods are compared, whereas in part II spatial access methods for rectangles are compared. In part I, four methods were selected for implementation and performance comparison: the 2-level grid file <ref> [22] </ref> , the BANG file, the hB-tree and the BUDDY hash tree. In part II, four methods were selected: the R-tree, the BANG file, the PLOP hashing [20] and the BUDDY hash tree. Performance comparisons were run on SUN workstations (3/50 and 3/60) under UNIX using Modula-2 implementations.
References-found: 22

