URL: http://www.cs.ucla.edu/~limsk/papers/thesis.ps.gz
Refering-URL: http://www.cs.ucla.edu/~limsk/
Root-URL: http://www.cs.ucla.edu
Title: Large Scale Circuit Partitioning With Loose/Stable Net Removal And Signal Flow Based Hierarchical Clustering  
Author: Sung Kyu Lim 
Degree: A thesis submitted in partial satisfaction of the requirements for the degree Master of Science in Computer Science by  
Date: 1997  
Affiliation: UNIVERSITY OF CALIFORNIA Los Angeles  
Abstract-found: 0
Intro-found: 1
Reference: [AHK96] <author> C. J. Alpert, L. W. Hagen, and A. B. Kahng. </author> <title> "A hybrid multilevel/genetic approach for circuit partitioning". </title> <booktitle> In Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <pages> pages 100-105, </pages> <year> 1996. </year>
Reference-contexts: Among many possible strategies of decomposing the cluster hierarchy that can work well with LSR, the hierarchical boundary declustering is developed. The FM-LSRb algorithm has achieved the best cutsize result among all the iterative improvement based partitioning algorithms reported in the literature. In particular, it outperforms the state-of-the-art GMetis <ref> [AHK96] </ref>, LA3-CDIP [DD96], and CLIP-PROP f [DD96] by 9.7%, 12.7%, and 7.1%, respectively. It also outperforms the state-of-the-art non-iterative improvement partitioning algorithms Paraboli [RDJ94] and FBB [YW94] by 30.0% and 17.2%, respectively. 3 The remainder of the thesis is organized as follows. Section 2 presents the LSR based partitioning algorithm. <p> higher rate of convergence due to its minor perturbation of the current partition compared to an entirely new random initial partition. 4.2 Comparison to Other Partitioning Algorithms Table 4 shows the comparison of our heap based FM-LSRb to state-of-the-art iterative improvement partitioning algorithms K-DualFM [CLS96] (dual net representation based), GMetis <ref> [AHK96] </ref> (genetic multi-level graph partitioning based), LA3-CDIP [DD96] (LIFO 22 circuit K-DualFM GMetis LA3-CDIP CLIP-PROP f FM-LSRb name size [CLS96] [AHK96] [DD96] [DD96] [CLL + 97] balu 801 27 27 27 27 27 primary1 833 52 47 52 51 45 struct 1952 38 33 36 33 33 primary2 3014 - 142 <p> partition. 4.2 Comparison to Other Partitioning Algorithms Table 4 shows the comparison of our heap based FM-LSRb to state-of-the-art iterative improvement partitioning algorithms K-DualFM [CLS96] (dual net representation based), GMetis <ref> [AHK96] </ref> (genetic multi-level graph partitioning based), LA3-CDIP [DD96] (LIFO 22 circuit K-DualFM GMetis LA3-CDIP CLIP-PROP f FM-LSRb name size [CLS96] [AHK96] [DD96] [DD96] [CLL + 97] balu 801 27 27 27 27 27 primary1 833 52 47 52 51 45 struct 1952 38 33 36 33 33 primary2 3014 - 142 152 152 120 s9234 5866 77 43 44 42 43 biomed 6514 107 102 83 84 84 s13207 8772 110
Reference: [AK93] <author> C. J. Alpert and A. B. Kahng. </author> <title> "Geometric embeddings for faster (and better) multi-way netlist partitioning". </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pages 743-748, </pages> <year> 1993. </year>
Reference-contexts: In this approach, clusters are identified and collapsed, and the resulting clustered circuit is partitioned using existing partitioning methods. Some of the well known clustering algorithms include random walk clustering [CHK91, HK92], multi-commodity flow based clustering [YCL92], clique based clustering [CS93], geometric embedding with min diameter clustering <ref> [AK93] </ref>, and Maximum Fanout Free Cone (MFFC) based clustering [CD93, CLB94, CX95]. Partitioning with module replication [HG92, KN91] and the communication complexity based partitioning method [BSV93] have also been proposed to further reduce the amount of interconnections.
Reference: [AK95] <author> C. J. Alpert and A. B. Kahng. </author> <title> "Recent directions in netlist partitioning: a survey". Integration, </title> <journal> the VLSI Journal, </journal> <pages> pages 1-81, </pages> <year> 1995. </year>
Reference-contexts: Partitioning with module replication [HG92, KN91] and the communication complexity based partitioning method [BSV93] have also been proposed to further reduce the amount of interconnections. A comprehensive survey of various techniques in circuit partitioning and clustering can be found in <ref> [AK95] </ref>. The iterative improvement based partitioning method has been studied extensively due to the following advantages over the other approaches; (i) area balance constraint as well as various cell sizes can be easily accommodated, (ii) one can easily control the runtime vs cutsize trade-off.
Reference: [AY95] <author> C. J. Alpert and S. Z. Yao. </author> <title> "Spectral partitioning: The more eigenvectors, the better". </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pages 195-200, </pages> <year> 1995. </year>
Reference-contexts: The analytical method uses a linear placement formulation with either (i) the quadratic wire length objective function solved by computing the second smallest eigenvector of the Laplacian matrix of the given circuit <ref> [Bar82, Bop87, DH73, HK92, AY95] </ref>, or (ii) the linear wire length objective function solved by an iterative method [RDJ94, LLC95]. <p> Then, by focusing on the updated gain when choosing cells to move, they were very successful in removing big clusters from the cutset without any prior clustering. Their method outperforms Paraboli [RDJ94] and MELO <ref> [AY95] </ref> substantially. However, our research reveals that cluster removal can be accomplished more efficiently by focusing intensively on removing nets in the cutset instead of cells.
Reference: [Bar82] <author> E. R. Barnes. </author> <title> "An algorithm for partitioning the nodes of a graph". </title> <journal> SIAM Journal Alg. Disc. Math., </journal> <pages> pages 541-550, </pages> <year> 1982. </year>
Reference-contexts: The analytical method uses a linear placement formulation with either (i) the quadratic wire length objective function solved by computing the second smallest eigenvector of the Laplacian matrix of the given circuit <ref> [Bar82, Bop87, DH73, HK92, AY95] </ref>, or (ii) the linear wire length objective function solved by an iterative method [RDJ94, LLC95].
Reference: [Bop87] <author> R. B. Boppana. </author> <title> "Eigenvalues and graph bisection: An average-case analysis". </title> <booktitle> In Proc. IEEE Symp. on Foundations of Comp. Sci., </booktitle> <pages> pages 280-285, </pages> <year> 1987. </year>
Reference-contexts: The analytical method uses a linear placement formulation with either (i) the quadratic wire length objective function solved by computing the second smallest eigenvector of the Laplacian matrix of the given circuit <ref> [Bar82, Bop87, DH73, HK92, AY95] </ref>, or (ii) the linear wire length objective function solved by an iterative method [RDJ94, LLC95].
Reference: [BSV93] <author> M. Beardslee and A. Sangiovanni-Vincentelli. </author> <title> "Heuristic methods for communication based logic partitioning". </title> <booktitle> In Proc. 4th ACM/SIGDA Physical Design Workshop, </booktitle> <pages> pages 199-210, </pages> <year> 1993. </year>
Reference-contexts: Partitioning with module replication [HG92, KN91] and the communication complexity based partitioning method <ref> [BSV93] </ref> have also been proposed to further reduce the amount of interconnections. A comprehensive survey of various techniques in circuit partitioning and clustering can be found in [AK95].
Reference: [CD93] <author> J. Cong and Y. Ding. </author> <title> "On area/depth trade-off in LUT-based FPGA technology mapping". </title> <booktitle> In Proc. 30th ACM/IEEE Design Automation Conf., </booktitle> <pages> pages 213-218, </pages> <year> 1993. </year>
Reference-contexts: Some of the well known clustering algorithms include random walk clustering [CHK91, HK92], multi-commodity flow based clustering [YCL92], clique based clustering [CS93], geometric embedding with min diameter clustering [AK93], and Maximum Fanout Free Cone (MFFC) based clustering <ref> [CD93, CLB94, CX95] </ref>. Partitioning with module replication [HG92, KN91] and the communication complexity based partitioning method [BSV93] have also been proposed to further reduce the amount of interconnections. A comprehensive survey of various techniques in circuit partitioning and clustering can be found in [AK95]. <p> Our research also shows that prior clustering can be effectively incorporated into partitioning to improve the solution quality further even a cluster removal technique is embedded. Our MFFS based clustering approach [CLL + 97] generalizes the existing MFFC decomposition method <ref> [CD93] </ref> from combinational to sequential circuits. Then it overcomes two limitations of the MFFC clustering algorithm; (i) it can handle cycles in the circuit, (ii) it allows a cluster to have multiple outputs in order to produce more natural clusters and make hierarchical clustering possible. <p> In this section, we first describe the signal flow and logic dependency based clustering algorithm MFFS introduced in [CLL + 97], which generalizes the existing MFFC decomposition method <ref> [CD93] </ref> from combinational circuits to general sequential circuits. More details of the algorithms with examples can be found in [CLL + 97]. <p> Then, we present various schemes to decompose the cluster hierarchy constructed by the MFFS clustering algorithm to improve the partitioning solution further. 3.1 Definition of MFFS The MFFC based clustering algorithm has been reported to provide natural clustering solution for combinational circuits <ref> [CD93, CLB94] </ref>. A modified MFFC algorithm for sequential circuits has been presented in [CX95], but the capability of this algorithm to detect directed cycles is limited. <p> Finally, the placement algorithm can focus on relatively small sized subcircuits to optimize the performance while improving the quality of the solution, possibly followed by more global level refinement. The clustering algorithms include SC (single output MFFC) <ref> [CD93] </ref>, SS (single output MFFS), MC (multiple output MFFC), and MS (multiple output MFFS) [CLL + 97]. The single output algorithms SC and SS can construct two-level cluster hierarchy tree, whereas the multiple output algorithms MC and MS are designed for higher hierarchy levels.
Reference: [CHK91] <author> J. Cong, L. Hagen, and A. B. Kahng. </author> <title> "Random walks for circuit clustering". </title> <booktitle> In Proc. IEEE 4th Int'l ASIC Conf., </booktitle> <pages> pages 14-21, </pages> <year> 1991. </year>
Reference-contexts: To reduce the computational complexity for partitioning large-scale circuits, clustering based methods have been introduced. In this approach, clusters are identified and collapsed, and the resulting clustered circuit is partitioned using existing partitioning methods. Some of the well known clustering algorithms include random walk clustering <ref> [CHK91, HK92] </ref>, multi-commodity flow based clustering [YCL92], clique based clustering [CS93], geometric embedding with min diameter clustering [AK93], and Maximum Fanout Free Cone (MFFC) based clustering [CD93, CLB94, CX95].
Reference: [CHK92] <author> J. Cong, L. Hagen, and A. B. Kahng. </author> <title> "Net partitions yield better module partitions". </title> <booktitle> In Proc. IEEE 29th Design Automation Conf., </booktitle> <pages> pages 47-52, </pages> <year> 1992. </year> <month> 30 </month>
Reference-contexts: The net based partitioning approach first computes a partitioning solution of the nets and then transforms 1 it into a module partitioning solution <ref> [CHK92, CLS96] </ref>. To reduce the computational complexity for partitioning large-scale circuits, clustering based methods have been introduced. In this approach, clusters are identified and collapsed, and the resulting clustered circuit is partitioned using existing partitioning methods.
Reference: [CLB94] <author> J. Cong, Z. Li, and R. Bagrodia. </author> <title> "Acyclic multi-way partitioning of boolean networks". </title> <booktitle> In Proc. ACM/IEEE 31st Design Automation Conf., </booktitle> <pages> pages 670-675, </pages> <year> 1994. </year>
Reference-contexts: Some of the well known clustering algorithms include random walk clustering [CHK91, HK92], multi-commodity flow based clustering [YCL92], clique based clustering [CS93], geometric embedding with min diameter clustering [AK93], and Maximum Fanout Free Cone (MFFC) based clustering <ref> [CD93, CLB94, CX95] </ref>. Partitioning with module replication [HG92, KN91] and the communication complexity based partitioning method [BSV93] have also been proposed to further reduce the amount of interconnections. A comprehensive survey of various techniques in circuit partitioning and clustering can be found in [AK95]. <p> Then, we present various schemes to decompose the cluster hierarchy constructed by the MFFS clustering algorithm to improve the partitioning solution further. 3.1 Definition of MFFS The MFFC based clustering algorithm has been reported to provide natural clustering solution for combinational circuits <ref> [CD93, CLB94] </ref>. A modified MFFC algorithm for sequential circuits has been presented in [CX95], but the capability of this algorithm to detect directed cycles is limited.
Reference: [CLL + 97] <author> J. Cong, P. Li, S. K. Lim, T. Shibuya, and D. Xu. </author> <title> "Large scale circuit partitioning with loose/stable net removal and signal flow based hierarchical clustering". </title> <type> Technical Report 970005, </type> <institution> CS Dept. of UCLA, </institution> <year> 1997. </year>
Reference-contexts: The result of combining two ideas is the partitioning algorithm named Loose and Stable net Removal (LSR). Our research also shows that prior clustering can be effectively incorporated into partitioning to improve the solution quality further even a cluster removal technique is embedded. Our MFFS based clustering approach <ref> [CLL + 97] </ref> generalizes the existing MFFC decomposition method [CD93] from combinational to sequential circuits. <p> The result of combining two ideas is the partitioning algorithm named Loose and Stable net Removal (LSR). 13 circuit FM LA3 LA3-CLIP LA3-CDIP FM-LR name size [DD96] [DD96] [DD96] [DD96] <ref> [CLL + 97] </ref> s1423 619 17 16 16 15 13 sioo 664 31 25 25 25 25 s1488 686 48 42 42 41 43 balu 801 27 27 27 27 27 primary1 833 47 52 52 52 45 test04 1515 87 82 51 52 45 test03 1607 75 80 57 57 <p> In this section, we first describe the signal flow and logic dependency based clustering algorithm MFFS introduced in <ref> [CLL + 97] </ref>, which generalizes the existing MFFC decomposition method [CD93] from combinational circuits to general sequential circuits. More details of the algorithms with examples can be found in [CLL + 97]. <p> In this section, we first describe the signal flow and logic dependency based clustering algorithm MFFS introduced in <ref> [CLL + 97] </ref>, which generalizes the existing MFFC decomposition method [CD93] from combinational circuits to general sequential circuits. More details of the algorithms with examples can be found in [CLL + 97]. Then, we present various schemes to decompose the cluster hierarchy constructed by the MFFS clustering algorithm to improve the partitioning solution further. 3.1 Definition of MFFS The MFFC based clustering algorithm has been reported to provide natural clustering solution for combinational circuits [CD93, CLB94]. <p> Recently, the Maximum Fanout Free Subgraph (MFFS) based clustering algorithm is reported to overcome these restrictions <ref> [CLL + 97] </ref>. They first revised the original definition of the MFFC and extended it to establish the definition of the MFFS. <p> The MFFS construction algorithm tells us how to obtain one MFFS cluster. If we want to cluster the entire netlist, we need to apply the MFFS construction algorithm repeatedly. In this case, the selection of the root node set is very important. An interested reader is referred to <ref> [CLL + 97] </ref> for more details and examples. 3.3 Declustering Strategies As mentioned earlier, LR is an effective local optimizer that focuses on smaller nets, whereas more global level of optimization can be accomplished through the handling of larger nets with LSR. <p> If we decompose clusters A through D in Figure 5, subcluster a can be moved to reduce the cutsize by 3 1 = 2. The multiple output MFFS clustering algorithm <ref> [CLL + 97] </ref> can form a hierarchical cluster tree after a recursive clustering process as shown in Figure 6. <p> to Other Partitioning Algorithms Table 4 shows the comparison of our heap based FM-LSRb to state-of-the-art iterative improvement partitioning algorithms K-DualFM [CLS96] (dual net representation based), GMetis [AHK96] (genetic multi-level graph partitioning based), LA3-CDIP [DD96] (LIFO 22 circuit K-DualFM GMetis LA3-CDIP CLIP-PROP f FM-LSRb name size [CLS96] [AHK96] [DD96] [DD96] <ref> [CLL + 97] </ref> balu 801 27 27 27 27 27 primary1 833 52 47 52 51 45 struct 1952 38 33 36 33 33 primary2 3014 - 142 152 152 120 s9234 5866 77 43 44 42 43 biomed 6514 107 102 83 84 84 s13207 8772 110 74 70 71 <p> Our algorithms outperform Fujitsu's current partitioning tool by up to 41.8% in terms of the minimum cutsize of 20 and 160 runs. The detailed constrained partitioning result is shown in Table 6. 24 circuit FBB Paraboli PANZA FM-LSRb name size [YW94] [RDJ94] [LLC95] <ref> [CLL + 97] </ref> s1423 619 13 16 15 13 s13207 8772 74 91 66 58 s35932 18148 49 62 43 47 s38417 23949 58 49 49 51 sioo 664 - 45 25 25 s1488 686 - 50 44 42 balu 801 - 41 27 27 struct 1952 - 40 33 33 <p> Furthermore, we developed an efficient partitioning algorithm called FM-LSRb that combines a signal flow based hierarchical clustering algorithm using Maximum Fanout Free Subgraph (MFFS) technique <ref> [CLL + 97] </ref> with LSR. In algorithm FM-LSRb, the cluster decomposition strategy was also integrated to decompose the clusters that are connected to the nets in the cutset for further cutsize reduction. <p> The clustering algorithms include SC (single output MFFC) [CD93], SS (single output MFFS), MC (multiple output MFFC), and MS (multiple output MFFS) <ref> [CLL + 97] </ref>. The single output algorithms SC and SS can construct two-level cluster hierarchy tree, whereas the multiple output algorithms MC and MS are designed for higher hierarchy levels.
Reference: [CLR90] <author> T. Cormen, C. Leiserson, and R. Rivest. </author> <title> Introduction to Algorithm. </title> <publisher> McGraw-Hill Book Co., </publisher> <year> 1990. </year>
Reference-contexts: The heap data structure is a partially ordered array object that supports insertion and 10 deletion of the element and update of values of the element with O (lg n) access time due to the corresponding partial re-ordering <ref> [CLR90] </ref>, where n is the total number of the elements. The conventional bucket structure for bipartitioning requires O (p + n) amount of memory with O (p) access time [FM82]. However, heap is independent of p since it requires O (n) amount of memory with O (lg n) access time.
Reference: [CLS96] <author> J. Cong, W. Labio, and N. Shivakumar. </author> <title> "Multi-way VLSI circuit partitioning based on dual net representation". </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <pages> pages 396-409, </pages> <year> 1996. </year>
Reference-contexts: The net based partitioning approach first computes a partitioning solution of the nets and then transforms 1 it into a module partitioning solution <ref> [CHK92, CLS96] </ref>. To reduce the computational complexity for partitioning large-scale circuits, clustering based methods have been introduced. In this approach, clusters are identified and collapsed, and the resulting clustered circuit is partitioned using existing partitioning methods. <p> based algorithms since SNT pro motes higher rate of convergence due to its minor perturbation of the current partition compared to an entirely new random initial partition. 4.2 Comparison to Other Partitioning Algorithms Table 4 shows the comparison of our heap based FM-LSRb to state-of-the-art iterative improvement partitioning algorithms K-DualFM <ref> [CLS96] </ref> (dual net representation based), GMetis [AHK96] (genetic multi-level graph partitioning based), LA3-CDIP [DD96] (LIFO 22 circuit K-DualFM GMetis LA3-CDIP CLIP-PROP f FM-LSRb name size [CLS96] [AHK96] [DD96] [DD96] [CLL + 97] balu 801 27 27 27 27 27 primary1 833 52 47 52 51 45 struct 1952 38 33 36 <p> initial partition. 4.2 Comparison to Other Partitioning Algorithms Table 4 shows the comparison of our heap based FM-LSRb to state-of-the-art iterative improvement partitioning algorithms K-DualFM <ref> [CLS96] </ref> (dual net representation based), GMetis [AHK96] (genetic multi-level graph partitioning based), LA3-CDIP [DD96] (LIFO 22 circuit K-DualFM GMetis LA3-CDIP CLIP-PROP f FM-LSRb name size [CLS96] [AHK96] [DD96] [DD96] [CLL + 97] balu 801 27 27 27 27 27 primary1 833 52 47 52 51 45 struct 1952 38 33 36 33 33 primary2 3014 - 142 152 152 120 s9234 5866 77 43 44 42 43 biomed 6514 107 102 83 84 84 s13207 8772
Reference: [CS93] <author> J. Cong and M. Smith. </author> <title> "A bottom-up clustering algorithm with applications to circuit partitioning in VLSI designs". </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pages 755-760, </pages> <year> 1993. </year>
Reference-contexts: In this approach, clusters are identified and collapsed, and the resulting clustered circuit is partitioned using existing partitioning methods. Some of the well known clustering algorithms include random walk clustering [CHK91, HK92], multi-commodity flow based clustering [YCL92], clique based clustering <ref> [CS93] </ref>, geometric embedding with min diameter clustering [AK93], and Maximum Fanout Free Cone (MFFC) based clustering [CD93, CLB94, CX95]. Partitioning with module replication [HG92, KN91] and the communication complexity based partitioning method [BSV93] have also been proposed to further reduce the amount of interconnections.
Reference: [CX95] <author> J. Cong and D. Xu. </author> <title> "Exploiting signal flow and logic dependency in standard cell placement". </title> <booktitle> In Proc. Asia and South Pacific Design Automation Conf., </booktitle> <pages> pages 399-404, </pages> <year> 1995. </year>
Reference-contexts: Some of the well known clustering algorithms include random walk clustering [CHK91, HK92], multi-commodity flow based clustering [YCL92], clique based clustering [CS93], geometric embedding with min diameter clustering [AK93], and Maximum Fanout Free Cone (MFFC) based clustering <ref> [CD93, CLB94, CX95] </ref>. Partitioning with module replication [HG92, KN91] and the communication complexity based partitioning method [BSV93] have also been proposed to further reduce the amount of interconnections. A comprehensive survey of various techniques in circuit partitioning and clustering can be found in [AK95]. <p> A modified MFFC algorithm for sequential circuits has been presented in <ref> [CX95] </ref>, but the capability of this algorithm to detect directed cycles is limited. In general, the MFFC algorithm has the following restrictions; (i) it is mainly applied to combinational circuits, (ii) it allows only one output signal for each cluster, which may result in many small clusters.
Reference: [DD96] <author> S. Dutt and W. Deng. </author> <title> "VLSI circuit partitioning by cluster-removal using iterative improvement techniques". </title> <booktitle> In Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pages 194-200, </pages> <year> 1996. </year>
Reference-contexts: The iterative improvement based partitioning method has been studied extensively due to the following advantages over the other approaches; (i) area balance constraint as well as various cell sizes can be easily accommodated, (ii) one can easily control the runtime vs cutsize trade-off. Recently, Dutt and Deng <ref> [DD96] </ref> introduced an effective cluster removal technique into their iterative improvement partitioning algorithm in order to prevent big clusters from being cut. <p> Then our Loose net Removal (LR) algorithm tries to prevent as many loose nets from becoming locked as possible during 2 the cell move. The experimental result indicates that LR without any kind of tie-breaking [Kri84] or locality promoting [HHK95] enhancement is sufficient to outperform LA3-CDIP <ref> [DD96] </ref>. A net is defined to be stable if it has remained cut consistently. Shibuya et al [SNK95] observed that more than 80% of the nets in the final cutset are stable, and these nets trap FM type algorithm into local minima and limit the solution quality. <p> The FM-LSRb algorithm has achieved the best cutsize result among all the iterative improvement based partitioning algorithms reported in the literature. In particular, it outperforms the state-of-the-art GMetis [AHK96], LA3-CDIP <ref> [DD96] </ref>, and CLIP-PROP f [DD96] by 9.7%, 12.7%, and 7.1%, respectively. It also outperforms the state-of-the-art non-iterative improvement partitioning algorithms Paraboli [RDJ94] and FBB [YW94] by 30.0% and 17.2%, respectively. 3 The remainder of the thesis is organized as follows. Section 2 presents the LSR based partitioning algorithm. <p> The FM-LSRb algorithm has achieved the best cutsize result among all the iterative improvement based partitioning algorithms reported in the literature. In particular, it outperforms the state-of-the-art GMetis [AHK96], LA3-CDIP <ref> [DD96] </ref>, and CLIP-PROP f [DD96] by 9.7%, 12.7%, and 7.1%, respectively. It also outperforms the state-of-the-art non-iterative improvement partitioning algorithms Paraboli [RDJ94] and FBB [YW94] by 30.0% and 17.2%, respectively. 3 The remainder of the thesis is organized as follows. Section 2 presents the LSR based partitioning algorithm. <p> However, this is a weak form of promoting the locality of cell moves since the locality can easily be destroyed from the update of other cells with even higher gain values. Recently, Dutt and Deng <ref> [DD96] </ref> proposed a more efficient way of promoting the locality in the choice of cells to move subsequently. <p> The access time overhead is also reasonable. For example, our heap based FM running on SUN SPARC5 spent 115.4 sec for bipartitioning the 16 test circuits we used, whereas Dutt and Deng's conventional bucket based FM tested on the same machine spent 97.3 sec <ref> [DD96] </ref>. In addition, the LIFO bucket structure can easily be simulated with heap in the following way. We can maintain the global move counter that keeps track of how many cell moves have occurred so far. <p> The minimum cutsize of 20 runs for FM, LA3, LIFO-LA3-CLIP, and LIFO-LA3-CDIP reported in <ref> [DD96] </ref> are used for the comparison. As one can see, with the very simple strategy of LR, we achieved from 5.7% to 49.2% improvement over the previous iterative improvement partitioning algorithms. <p> This convinces us that our strong form of cluster removal strategy focusing on the free cells of loose nets is shown to be very effective without any kind of tie-breaking or locality promoting enhancement. The authors of <ref> [DD96] </ref> provided a discussion about why LA3 fails on big circuits. 2.2.3 Loose and Stable Net Removal A net is defined to be stable if it has remained cut throughout the entire run. <p> The result of combining two ideas is the partitioning algorithm named Loose and Stable net Removal (LSR). 13 circuit FM LA3 LA3-CLIP LA3-CDIP FM-LR name size <ref> [DD96] </ref> [DD96] [DD96] [DD96] [CLL + 97] s1423 619 17 16 16 15 13 sioo 664 31 25 25 25 25 s1488 686 48 42 42 41 43 balu 801 27 27 27 27 27 primary1 833 47 52 52 52 45 test04 1515 87 82 51 52 45 test03 1607 <p> The result of combining two ideas is the partitioning algorithm named Loose and Stable net Removal (LSR). 13 circuit FM LA3 LA3-CLIP LA3-CDIP FM-LR name size <ref> [DD96] </ref> [DD96] [DD96] [DD96] [CLL + 97] s1423 619 17 16 16 15 13 sioo 664 31 25 25 25 25 s1488 686 48 42 42 41 43 balu 801 27 27 27 27 27 primary1 833 47 52 52 52 45 test04 1515 87 82 51 52 45 test03 1607 75 <p> The result of combining two ideas is the partitioning algorithm named Loose and Stable net Removal (LSR). 13 circuit FM LA3 LA3-CLIP LA3-CDIP FM-LR name size <ref> [DD96] </ref> [DD96] [DD96] [DD96] [CLL + 97] s1423 619 17 16 16 15 13 sioo 664 31 25 25 25 25 s1488 686 48 42 42 41 43 balu 801 27 27 27 27 27 primary1 833 47 52 52 52 45 test04 1515 87 82 51 52 45 test03 1607 75 80 <p> The result of combining two ideas is the partitioning algorithm named Loose and Stable net Removal (LSR). 13 circuit FM LA3 LA3-CLIP LA3-CDIP FM-LR name size <ref> [DD96] </ref> [DD96] [DD96] [DD96] [CLL + 97] s1423 619 17 16 16 15 13 sioo 664 31 25 25 25 25 s1488 686 48 42 42 41 43 balu 801 27 27 27 27 27 primary1 833 47 52 52 52 45 test04 1515 87 82 51 52 45 test03 1607 75 80 57 <p> Our algorithms were tested with the same set of benchmark circuits used in <ref> [DD96] </ref> (some of them are omitted since they do not have the signal directions, which are required by our MFFS clustering algorithm). The bipartitioning result is based on the minimum cutsize of 20 runs under 45-55% area balance criterion and real cell sizes. <p> minor perturbation of the current partition compared to an entirely new random initial partition. 4.2 Comparison to Other Partitioning Algorithms Table 4 shows the comparison of our heap based FM-LSRb to state-of-the-art iterative improvement partitioning algorithms K-DualFM [CLS96] (dual net representation based), GMetis [AHK96] (genetic multi-level graph partitioning based), LA3-CDIP <ref> [DD96] </ref> (LIFO 22 circuit K-DualFM GMetis LA3-CDIP CLIP-PROP f FM-LSRb name size [CLS96] [AHK96] [DD96] [DD96] [CLL + 97] balu 801 27 27 27 27 27 primary1 833 52 47 52 51 45 struct 1952 38 33 36 33 33 primary2 3014 - 142 152 152 120 s9234 5866 77 43 <p> 4.2 Comparison to Other Partitioning Algorithms Table 4 shows the comparison of our heap based FM-LSRb to state-of-the-art iterative improvement partitioning algorithms K-DualFM [CLS96] (dual net representation based), GMetis [AHK96] (genetic multi-level graph partitioning based), LA3-CDIP <ref> [DD96] </ref> (LIFO 22 circuit K-DualFM GMetis LA3-CDIP CLIP-PROP f FM-LSRb name size [CLS96] [AHK96] [DD96] [DD96] [CLL + 97] balu 801 27 27 27 27 27 primary1 833 52 47 52 51 45 struct 1952 38 33 36 33 33 primary2 3014 - 142 152 152 120 s9234 5866 77 43 44 42 43 biomed 6514 107 102 83 84 84 s13207 8772 110 74 <p> Comparison to Other Partitioning Algorithms Table 4 shows the comparison of our heap based FM-LSRb to state-of-the-art iterative improvement partitioning algorithms K-DualFM [CLS96] (dual net representation based), GMetis [AHK96] (genetic multi-level graph partitioning based), LA3-CDIP <ref> [DD96] </ref> (LIFO 22 circuit K-DualFM GMetis LA3-CDIP CLIP-PROP f FM-LSRb name size [CLS96] [AHK96] [DD96] [DD96] [CLL + 97] balu 801 27 27 27 27 27 primary1 833 52 47 52 51 45 struct 1952 38 33 36 33 33 primary2 3014 - 142 152 152 120 s9234 5866 77 43 44 42 43 biomed 6514 107 102 83 84 84 s13207 8772 110 74 70 <p> s38417 23949 - 69 79 65 51 avq.large 25178 - 145 145 143 141 TOTAL 504 1 989 1023 961 893 RATIO 1.47 1 1.11 1.15 1.08 1.00 TIME - 2164.0 581.7 561.1 640.4 Table 4: Comparison to Iterative Improvement Partitioners bucket, lookahead and cluster detection based), and CLIP-PROP f <ref> [DD96] </ref> (CLIP, PROP, followed by PROP post-refinement). The experiment shows that FM-LSRb consistently outperforms K-DualFM, GMetis, LA3-CDIP, and CLIP-PROP f by 31.9%, 9.7%, 12.7%, and 7.1%, respectively.
Reference: [DH73] <author> W. E. Donath and A. J. Hoffman. </author> <title> "Lower bounds for the partitioning of graphs". </title> <journal> IBM Journal Res. Dev., </journal> <pages> pages 420-425, </pages> <year> 1973. </year>
Reference-contexts: The analytical method uses a linear placement formulation with either (i) the quadratic wire length objective function solved by computing the second smallest eigenvector of the Laplacian matrix of the given circuit <ref> [Bar82, Bop87, DH73, HK92, AY95] </ref>, or (ii) the linear wire length objective function solved by an iterative method [RDJ94, LLC95].
Reference: [FM82] <author> C. Fiduccia and R. Mattheyses. </author> <title> "A linear time heuristic for improving network partitions". </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pages 175-181, </pages> <year> 1982. </year> <month> 31 </month>
Reference-contexts: The iterative improvement partitioning starts with some initial partitions, usually generated randomly, and then moves cells between partitions to improve the solution. Some of the best known methods include the Kernighan & Lin (KL) algorithm [KL70], the Fiduccia & Mattheyses (FM) algorithm <ref> [FM82] </ref>, Krishnamurthy's lookahead scheme [Kri84], and the simulated annealing based approach [KGV83, GS84]. <p> An iterative improvement type of partitioning algorithm such as FM <ref> [FM82] </ref> uses the notion of cell gain to represent the reduction in the cutsize if the cell is moved to another block. <p> The conventional bucket structure for bipartitioning requires O (p + n) amount of memory with O (p) access time <ref> [FM82] </ref>. However, heap is independent of p since it requires O (n) amount of memory with O (lg n) access time. Since the cell gain range is extended due to LR, heap is a reasonable choice for storing cell gains while maintaining the memory and runtime efficiency. <p> The single output algorithms SC and SS can construct two-level cluster hierarchy tree, whereas the multiple output algorithms MC and MS are designed for higher hierarchy levels. The partitioning algorithms include three basic algorithms such as FM <ref> [FM82] </ref> (random bucket), LIFO [HHK95] (LIFO bucket), and LA3 [Kri84] (lookahead capability), and various partitioning enhancements include SNT [SNK95] (stable net removal), LR (loose net removal), 27 selection -clu -bpart -epart -declu 0 no clustering no partitioning no enhancement no declustering 1 SC FM SNT complete 2 SS LIFO LR level-by-level
Reference: [GS84] <author> J. Greene and K. Supowit. </author> <title> "Simulated annealing without rejected moves". </title> <booktitle> In Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pages 658-663, </pages> <year> 1984. </year>
Reference-contexts: Some of the best known methods include the Kernighan & Lin (KL) algorithm [KL70], the Fiduccia & Mattheyses (FM) algorithm [FM82], Krishnamurthy's lookahead scheme [Kri84], and the simulated annealing based approach <ref> [KGV83, GS84] </ref>.
Reference: [HG92] <author> J. Hwang and A. E. Gamal. </author> <title> "Optimal replication for min-cut partitioning". </title> <booktitle> In Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pages 432-435, </pages> <year> 1992. </year>
Reference-contexts: Some of the well known clustering algorithms include random walk clustering [CHK91, HK92], multi-commodity flow based clustering [YCL92], clique based clustering [CS93], geometric embedding with min diameter clustering [AK93], and Maximum Fanout Free Cone (MFFC) based clustering [CD93, CLB94, CX95]. Partitioning with module replication <ref> [HG92, KN91] </ref> and the communication complexity based partitioning method [BSV93] have also been proposed to further reduce the amount of interconnections. A comprehensive survey of various techniques in circuit partitioning and clustering can be found in [AK95].
Reference: [HHK95] <author> L. Hagen, D. Huang, and A. B. Kahng. </author> <title> "On implementation choices for iterative improvement partitioning algorithms". </title> <booktitle> In Proc. ACM/IEEE European Design Automation Conf., </booktitle> <year> 1995. </year>
Reference-contexts: Then our Loose net Removal (LR) algorithm tries to prevent as many loose nets from becoming locked as possible during 2 the cell move. The experimental result indicates that LR without any kind of tie-breaking [Kri84] or locality promoting <ref> [HHK95] </ref> enhancement is sufficient to outperform LA3-CDIP [DD96]. A net is defined to be stable if it has remained cut consistently. <p> Then, it was Hagen et al <ref> [HHK95] </ref> who first observed that this locality motivates the removal of closely connected cells that straddle the cutline. In order to promote this locality, they suggested the LIFO (Last In First Out) order of organizing the cells with the same gain. <p> The single output algorithms SC and SS can construct two-level cluster hierarchy tree, whereas the multiple output algorithms MC and MS are designed for higher hierarchy levels. The partitioning algorithms include three basic algorithms such as FM [FM82] (random bucket), LIFO <ref> [HHK95] </ref> (LIFO bucket), and LA3 [Kri84] (lookahead capability), and various partitioning enhancements include SNT [SNK95] (stable net removal), LR (loose net removal), 27 selection -clu -bpart -epart -declu 0 no clustering no partitioning no enhancement no declustering 1 SC FM SNT complete 2 SS LIFO LR level-by-level 3 MC LA3 LSR
Reference: [HK92] <author> L. Hagen and A. B. Kahng. </author> <title> "A new approach to effective circuit clustering". </title> <booktitle> In Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pages 422-427, </pages> <year> 1992. </year>
Reference-contexts: The analytical method uses a linear placement formulation with either (i) the quadratic wire length objective function solved by computing the second smallest eigenvector of the Laplacian matrix of the given circuit <ref> [Bar82, Bop87, DH73, HK92, AY95] </ref>, or (ii) the linear wire length objective function solved by an iterative method [RDJ94, LLC95]. <p> To reduce the computational complexity for partitioning large-scale circuits, clustering based methods have been introduced. In this approach, clusters are identified and collapsed, and the resulting clustered circuit is partitioned using existing partitioning methods. Some of the well known clustering algorithms include random walk clustering <ref> [CHK91, HK92] </ref>, multi-commodity flow based clustering [YCL92], clique based clustering [CS93], geometric embedding with min diameter clustering [AK93], and Maximum Fanout Free Cone (MFFC) based clustering [CD93, CLB94, CX95].
Reference: [KGV83] <author> S. Kirkpatrick, C. D. Gelatt, and M. P. Vecchi. </author> <title> "Optimization by simulated annealing". </title> <booktitle> Science, </booktitle> <pages> pages 671-680, </pages> <year> 1983. </year>
Reference-contexts: Some of the best known methods include the Kernighan & Lin (KL) algorithm [KL70], the Fiduccia & Mattheyses (FM) algorithm [FM82], Krishnamurthy's lookahead scheme [Kri84], and the simulated annealing based approach <ref> [KGV83, GS84] </ref>.
Reference: [KL70] <author> B. Kernighan and S. Lin. </author> <title> "An efficient heuristic procedure for partitioning of electrical circuits". </title> <journal> Bell System Technical Journal, </journal> <year> 1970. </year>
Reference-contexts: The iterative improvement partitioning starts with some initial partitions, usually generated randomly, and then moves cells between partitions to improve the solution. Some of the best known methods include the Kernighan & Lin (KL) algorithm <ref> [KL70] </ref>, the Fiduccia & Mattheyses (FM) algorithm [FM82], Krishnamurthy's lookahead scheme [Kri84], and the simulated annealing based approach [KGV83, GS84].
Reference: [KN91] <author> C. Kring and A. R. </author> <title> Newton. "A cell-replicating approach to mincut-based circuit partitioning". </title> <booktitle> In Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pages 2-5, </pages> <year> 1991. </year>
Reference-contexts: Some of the well known clustering algorithms include random walk clustering [CHK91, HK92], multi-commodity flow based clustering [YCL92], clique based clustering [CS93], geometric embedding with min diameter clustering [AK93], and Maximum Fanout Free Cone (MFFC) based clustering [CD93, CLB94, CX95]. Partitioning with module replication <ref> [HG92, KN91] </ref> and the communication complexity based partitioning method [BSV93] have also been proposed to further reduce the amount of interconnections. A comprehensive survey of various techniques in circuit partitioning and clustering can be found in [AK95].
Reference: [Kri84] <author> B. Krishnamurthy. </author> <title> "An improved min-cut algorithm for partitioning VLSI networks". </title> <journal> IEEE Trans. on Computers, </journal> <pages> pages 438-446, </pages> <year> 1984. </year>
Reference-contexts: The iterative improvement partitioning starts with some initial partitions, usually generated randomly, and then moves cells between partitions to improve the solution. Some of the best known methods include the Kernighan & Lin (KL) algorithm [KL70], the Fiduccia & Mattheyses (FM) algorithm [FM82], Krishnamurthy's lookahead scheme <ref> [Kri84] </ref>, and the simulated annealing based approach [KGV83, GS84]. <p> Then our Loose net Removal (LR) algorithm tries to prevent as many loose nets from becoming locked as possible during 2 the cell move. The experimental result indicates that LR without any kind of tie-breaking <ref> [Kri84] </ref> or locality promoting [HHK95] enhancement is sufficient to outperform LA3-CDIP [DD96]. A net is defined to be stable if it has remained cut consistently. <p> As a result, their algorithm CLIP/CDIP achieved the best cutsize result among all the published iterative improvement type partitioning algorithms so far. However, their strategy is not free from frequent tie-breaking situation, which still requires the lookahead capability such as LA3 <ref> [Kri84] </ref> for better tie-breaking. Furthermore, they still rely on LIFO buckets to boost their ability to minimize the cutsize. <p> Since the entire cells are distributed into this short range, many cells will have the same gain values. Therefore, most of the iterative improvement based partitioning algorithms that utilize this conventional bucket structure requires a better tie-breaking strategy such as the lookahead capability <ref> [Kri84] </ref>. LR causes the cell gain range to expand due to the cell gain increase described in the previous section, eliminating the necessity of lookahead capability. However, the extended gain range makes the conventional bucket structure inefficient, so we use the heap based bucket structure for storing cell gains. <p> The single output algorithms SC and SS can construct two-level cluster hierarchy tree, whereas the multiple output algorithms MC and MS are designed for higher hierarchy levels. The partitioning algorithms include three basic algorithms such as FM [FM82] (random bucket), LIFO [HHK95] (LIFO bucket), and LA3 <ref> [Kri84] </ref> (lookahead capability), and various partitioning enhancements include SNT [SNK95] (stable net removal), LR (loose net removal), 27 selection -clu -bpart -epart -declu 0 no clustering no partitioning no enhancement no declustering 1 SC FM SNT complete 2 SS LIFO LR level-by-level 3 MC LA3 LSR boundary 4 MS Table 7:
Reference: [KSJA91] <author> J. M. Kleinhans, G. Sigl, F. M. Johannes, and K. J. Antreich. "GORDIAN: </author> <title> VLSI placement by quadratic programming and slicing optimization". </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <pages> pages 356-365, </pages> <year> 1991. </year>
Reference-contexts: In particular, circuit partitioning is crucial in top-down hierarchical VLSI layout since any complex circuit, consisting of a large number of components, cannot be designed efficiently without decomposing it into a set of smaller subcircuits. For example, the well accepted simulated annealing based [SL87] or analytical based <ref> [TKH88, KSJA91, SCK91, SS95] </ref> placement methods are becoming infeasible since they require a prohibitively large amount of computation time and/or memory to produce a satisfactory solution.
Reference: [LLC95] <author> J. Li, J. Lillis, and C. K. Cheng. </author> <title> "Linear decomposition algorithm for VLSI design applications". </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pages 223-228, </pages> <year> 1995. </year>
Reference-contexts: The analytical method uses a linear placement formulation with either (i) the quadratic wire length objective function solved by computing the second smallest eigenvector of the Laplacian matrix of the given circuit [Bar82, Bop87, DH73, HK92, AY95], or (ii) the linear wire length objective function solved by an iterative method <ref> [RDJ94, LLC95] </ref>. The mincut based method uses the maximum flow algorithm to compute a series of minimum cuts in the given circuit in order to obtain an area balanced cut with the smallest cutsize [YW94]. <p> Table 5 shows the comparison of our FM-LSRb to the state-of-the-art non-iterative improvement partitioning algorithms FBB [YW94] (network flow based), Paraboli [RDJ94] 1 based on the 7 common test circuits 23 (analytical placement based) and PANZA <ref> [LLC95] </ref> (network flow and spectral based). On the average, FM-LSRb outperforms the Paraboli and FBB by 30.0% and 17.2%, respectively. PANZA reports the best cutsize result among all categories of partitioning algorithms combined. However, the runtime report is omitted, and it also assumes uniform cell size instead of real size. <p> Our algorithms outperform Fujitsu's current partitioning tool by up to 41.8% in terms of the minimum cutsize of 20 and 160 runs. The detailed constrained partitioning result is shown in Table 6. 24 circuit FBB Paraboli PANZA FM-LSRb name size [YW94] [RDJ94] <ref> [LLC95] </ref> [CLL + 97] s1423 619 13 16 15 13 s13207 8772 74 91 66 58 s35932 18148 49 62 43 47 s38417 23949 58 49 49 51 sioo 664 - 45 25 25 s1488 686 - 50 44 42 balu 801 - 41 27 27 struct 1952 - 40 33
Reference: [RDJ94] <author> B. M. Riess, K. Doll, and F. M. Johannes. </author> <title> "Partitioning very large circuits using analytical placement techniques". </title> <booktitle> In Proc. ACM/IEEE 31st Design Automation Conf., </booktitle> <pages> pages 646-651, </pages> <year> 1994. </year>
Reference-contexts: The analytical method uses a linear placement formulation with either (i) the quadratic wire length objective function solved by computing the second smallest eigenvector of the Laplacian matrix of the given circuit [Bar82, Bop87, DH73, HK92, AY95], or (ii) the linear wire length objective function solved by an iterative method <ref> [RDJ94, LLC95] </ref>. The mincut based method uses the maximum flow algorithm to compute a series of minimum cuts in the given circuit in order to obtain an area balanced cut with the smallest cutsize [YW94]. <p> Then, by focusing on the updated gain when choosing cells to move, they were very successful in removing big clusters from the cutset without any prior clustering. Their method outperforms Paraboli <ref> [RDJ94] </ref> and MELO [AY95] substantially. However, our research reveals that cluster removal can be accomplished more efficiently by focusing intensively on removing nets in the cutset instead of cells. <p> In particular, it outperforms the state-of-the-art GMetis [AHK96], LA3-CDIP [DD96], and CLIP-PROP f [DD96] by 9.7%, 12.7%, and 7.1%, respectively. It also outperforms the state-of-the-art non-iterative improvement partitioning algorithms Paraboli <ref> [RDJ94] </ref> and FBB [YW94] by 30.0% and 17.2%, respectively. 3 The remainder of the thesis is organized as follows. Section 2 presents the LSR based partitioning algorithm. Section 3 presents signal flow based hierarchical MFFS clustering algorithm. Section 4 provides experimental results. <p> The O (lg n) runtime overhead due to the heap based bucket structure is negligible. Table 5 shows the comparison of our FM-LSRb to the state-of-the-art non-iterative improvement partitioning algorithms FBB [YW94] (network flow based), Paraboli <ref> [RDJ94] </ref> 1 based on the 7 common test circuits 23 (analytical placement based) and PANZA [LLC95] (network flow and spectral based). On the average, FM-LSRb outperforms the Paraboli and FBB by 30.0% and 17.2%, respectively. PANZA reports the best cutsize result among all categories of partitioning algorithms combined. <p> Our algorithms outperform Fujitsu's current partitioning tool by up to 41.8% in terms of the minimum cutsize of 20 and 160 runs. The detailed constrained partitioning result is shown in Table 6. 24 circuit FBB Paraboli PANZA FM-LSRb name size [YW94] <ref> [RDJ94] </ref> [LLC95] [CLL + 97] s1423 619 13 16 15 13 s13207 8772 74 91 66 58 s35932 18148 49 62 43 47 s38417 23949 58 49 49 51 sioo 664 - 45 25 25 s1488 686 - 50 44 42 balu 801 - 41 27 27 struct 1952 - 40
Reference: [SCK91] <author> A. Srinivasan, K. Chaudhary, and E. S. Kuh. "RITUAL: </author> <title> Performance driven placement algorithm for small cell ICs". </title> <booktitle> In Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pages 48-51, </pages> <year> 1991. </year>
Reference-contexts: In particular, circuit partitioning is crucial in top-down hierarchical VLSI layout since any complex circuit, consisting of a large number of components, cannot be designed efficiently without decomposing it into a set of smaller subcircuits. For example, the well accepted simulated annealing based [SL87] or analytical based <ref> [TKH88, KSJA91, SCK91, SS95] </ref> placement methods are becoming infeasible since they require a prohibitively large amount of computation time and/or memory to produce a satisfactory solution.
Reference: [SL87] <author> C. Sechen and K. W. Lee. </author> <title> "An improved simulated annealing algorithm for row-based placement". </title> <booktitle> In Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pages 478-481, </pages> <year> 1987. </year>
Reference-contexts: In particular, circuit partitioning is crucial in top-down hierarchical VLSI layout since any complex circuit, consisting of a large number of components, cannot be designed efficiently without decomposing it into a set of smaller subcircuits. For example, the well accepted simulated annealing based <ref> [SL87] </ref> or analytical based [TKH88, KSJA91, SCK91, SS95] placement methods are becoming infeasible since they require a prohibitively large amount of computation time and/or memory to produce a satisfactory solution.
Reference: [SNK95] <author> T. Shibuya, I. Nitta, and K. Kawamura. "SMINCUT: </author> <title> VLSI placement tool using min-cut". </title> <journal> Fujitsu Scientific & Technical Journal, </journal> <pages> pages 197-207, </pages> <year> 1995. </year>
Reference-contexts: The experimental result indicates that LR without any kind of tie-breaking [Kri84] or locality promoting [HHK95] enhancement is sufficient to outperform LA3-CDIP [DD96]. A net is defined to be stable if it has remained cut consistently. Shibuya et al <ref> [SNK95] </ref> observed that more than 80% of the nets in the final cutset are stable, and these nets trap FM type algorithm into local minima and limit the solution quality. From this observation, they proposed an efficient way to remove stable nets from the cutset. <p> We shall first present the concept of loose nets and its relation to cluster removal. Then we present a modified cell gain computation and Loose-net Removal (LR) algorithm as well as its enhancement with Stable Net Transition <ref> [SNK95] </ref>. 2.2.1 Loose Net Removal A free net contains only free cells, and a locked net has locked cells in two or more blocks. <p> The authors of [DD96] provided a discussion about why LA3 fails on big circuits. 2.2.3 Loose and Stable Net Removal A net is defined to be stable if it has remained cut throughout the entire run. Shibuya et al <ref> [SNK95] </ref> observed that more than 80% of the nets in the final cutset are stable, and these nets trap FM type algorithm into local minima and limit the solution quality. <p> The original SNT algorithm <ref> [SNK95] </ref> begins with only one random initial partition and evolves from it. However, our research shows that a better partitioning result can be obtained if SNT based search is performed on multiple random initial points under the same CPU time. <p> The stable net removal algorithm <ref> [SNK95] </ref> was then incorporated into LR to form an efficient and powerful iterative circuit partitioning algorithm LSR (Loose and Stable net Removal) for more global level control on hard-to-remove nets. <p> The partitioning algorithms include three basic algorithms such as FM [FM82] (random bucket), LIFO [HHK95] (LIFO bucket), and LA3 [Kri84] (lookahead capability), and various partitioning enhancements include SNT <ref> [SNK95] </ref> (stable net removal), LR (loose net removal), 27 selection -clu -bpart -epart -declu 0 no clustering no partitioning no enhancement no declustering 1 SC FM SNT complete 2 SS LIFO LR level-by-level 3 MC LA3 LSR boundary 4 MS Table 7: Options Related to the Partitioning and LSR (loose and
Reference: [SS95] <author> W. Swartz and C. Sechen. </author> <title> "Timing driven placement for large standard cell circuits". </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pages 211-215, </pages> <year> 1995. </year>
Reference-contexts: In particular, circuit partitioning is crucial in top-down hierarchical VLSI layout since any complex circuit, consisting of a large number of components, cannot be designed efficiently without decomposing it into a set of smaller subcircuits. For example, the well accepted simulated annealing based [SL87] or analytical based <ref> [TKH88, KSJA91, SCK91, SS95] </ref> placement methods are becoming infeasible since they require a prohibitively large amount of computation time and/or memory to produce a satisfactory solution.
Reference: [TKH88] <author> R. Tsay, E. S. Kuh, , and C. Hsu. "PROUD: </author> <title> A fast sea-of-gates placement algorithm". </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pages 318-323, </pages> <year> 1988. </year>
Reference-contexts: In particular, circuit partitioning is crucial in top-down hierarchical VLSI layout since any complex circuit, consisting of a large number of components, cannot be designed efficiently without decomposing it into a set of smaller subcircuits. For example, the well accepted simulated annealing based [SL87] or analytical based <ref> [TKH88, KSJA91, SCK91, SS95] </ref> placement methods are becoming infeasible since they require a prohibitively large amount of computation time and/or memory to produce a satisfactory solution.
Reference: [YCL92] <author> C. W. Yeh, C. K. Cheng, and T. T. Lin. </author> <title> "A probabilistic multicommodity-flow solution to circuit clustering problems". </title> <booktitle> In Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pages 428-431, </pages> <year> 1992. </year>
Reference-contexts: In this approach, clusters are identified and collapsed, and the resulting clustered circuit is partitioned using existing partitioning methods. Some of the well known clustering algorithms include random walk clustering [CHK91, HK92], multi-commodity flow based clustering <ref> [YCL92] </ref>, clique based clustering [CS93], geometric embedding with min diameter clustering [AK93], and Maximum Fanout Free Cone (MFFC) based clustering [CD93, CLB94, CX95]. Partitioning with module replication [HG92, KN91] and the communication complexity based partitioning method [BSV93] have also been proposed to further reduce the amount of interconnections.
Reference: [YW94] <author> H. Yang and D. F. Wong. </author> <title> "Efficient network flow based min-cut balanced partitioning". </title> <booktitle> In Proc. IEEE Int. Conf. on Computer-Aided Design, </booktitle> <pages> pages 50-55, </pages> <year> 1994. </year>
Reference-contexts: The mincut based method uses the maximum flow algorithm to compute a series of minimum cuts in the given circuit in order to obtain an area balanced cut with the smallest cutsize <ref> [YW94] </ref>. The net based partitioning approach first computes a partitioning solution of the nets and then transforms 1 it into a module partitioning solution [CHK92, CLS96]. To reduce the computational complexity for partitioning large-scale circuits, clustering based methods have been introduced. <p> In particular, it outperforms the state-of-the-art GMetis [AHK96], LA3-CDIP [DD96], and CLIP-PROP f [DD96] by 9.7%, 12.7%, and 7.1%, respectively. It also outperforms the state-of-the-art non-iterative improvement partitioning algorithms Paraboli [RDJ94] and FBB <ref> [YW94] </ref> by 30.0% and 17.2%, respectively. 3 The remainder of the thesis is organized as follows. Section 2 presents the LSR based partitioning algorithm. Section 3 presents signal flow based hierarchical MFFS clustering algorithm. Section 4 provides experimental results. <p> The O (lg n) runtime overhead due to the heap based bucket structure is negligible. Table 5 shows the comparison of our FM-LSRb to the state-of-the-art non-iterative improvement partitioning algorithms FBB <ref> [YW94] </ref> (network flow based), Paraboli [RDJ94] 1 based on the 7 common test circuits 23 (analytical placement based) and PANZA [LLC95] (network flow and spectral based). On the average, FM-LSRb outperforms the Paraboli and FBB by 30.0% and 17.2%, respectively. <p> Our algorithms outperform Fujitsu's current partitioning tool by up to 41.8% in terms of the minimum cutsize of 20 and 160 runs. The detailed constrained partitioning result is shown in Table 6. 24 circuit FBB Paraboli PANZA FM-LSRb name size <ref> [YW94] </ref> [RDJ94] [LLC95] [CLL + 97] s1423 619 13 16 15 13 s13207 8772 74 91 66 58 s35932 18148 49 62 43 47 s38417 23949 58 49 49 51 sioo 664 - 45 25 25 s1488 686 - 50 44 42 balu 801 - 41 27 27 struct 1952 -
References-found: 37

