URL: http://seclab.cs.ucdavis.edu/~bishop/scriv/ucd-ecs-96-11.ps
Refering-URL: http://seclab.cs.ucdavis.edu/~bishop/scriv/index.html
Root-URL: http://www.cs.ucdavis.edu
Title: A Critical Analysis of Vulnerability Taxonomies  
Author: Matt Bishop and David Bailey 
Note: This document was created with FrameMaker 4.0.4  
Date: September 1996  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> R. P. Abbott, J. S. Chin, J. E. Donnelley, W. L. Konigsford, S. Tokubo, and D. A. Webb, </author> <title> Security Analysis and Enhancements of Computer Operating Systems, </title> <type> NBSIR 761041, </type> <institution> Institute for Computer Sciences and Technology, National Bureau of Standards (Apr. </institution> <year> 1976) </year>
Reference-contexts: Drawing on the analogy with systematics, given the right taxonomy, the vulnerability would be the genus; the attack, the specific creature (although in practise, the attack can be taxonomized further). In the 1970s, two major studies attempted to taxonomize security aws. One, the RISOS study <ref> [1] </ref>, focused on aws in operating systems; the other, the Program Analysis (PA) study [4], included both operating systems and programs. Interestingly enough, the taxonomies both presented were similar, in that the classes of aws could be mapped to one another.
Reference: [2] <author> T. Aslam, </author> <title> A Taxonomy of Security Faults in the UNIX Operating System, </title> <institution> Master of Science thesis, Department of Computer Sciences, Purdue University, West Lafay ette, </institution> <note> IN 47907 (1995). </note>
Reference-contexts: Since then, other studies have based their taxonomies upon these results [3][5]. However, the classifications defined in these studies are not taxonomies in the sense that we have used the word, for they fail to define classification schemes that identify a unique category for each vulnerability. Aslams recent study <ref> [2] </ref> approached classification slightly differently, through software fault analysis. A decision procedure determines into which class a soft ware fault is placed. Even so, it suffers from aws similar to those of the PA and RISOS studies. <p> Moving up to the design level, a completely different classification is needed. Clearly, this fails to meet our definition of taxonomy, so the ambiguity in the PA classifications make it difficult to use to classify aws for our purposes. Finally, consider Aslams taxonomy. The selection criteria for fault classification <ref> [2] </ref> places the aw in class 1a from the point of view of the attacking program (object installed with incorrect permissions, because the attacking program can delete the file), in class 3a4 from the point of view of the xterm program (access rights validation error, as xterm does not properly validate
Reference: [3] <author> M. Bishop, </author> <title> A Taxonomy of UNIX System and Network Vulnerabilities, </title> <type> Technical Report 95-10, </type> <institution> Department of Computer Science, University of California at Davis, Davis, </institution> <address> CA (1995). </address>
Reference: [4] <author> R. Bisbey II and D. Hollingsworth, </author> <title> Protection Analysis Project Final Report, </title> <institution> ISI/ RR-78-13, DTIC AD A056816, USC/Information Sciences Institute (May, </institution> <year> 1978). </year>
Reference-contexts: In the 1970s, two major studies attempted to taxonomize security aws. One, the RISOS study [1], focused on aws in operating systems; the other, the Program Analysis (PA) study <ref> [4] </ref>, included both operating systems and programs. Interestingly enough, the taxonomies both presented were similar, in that the classes of aws could be mapped to one another. Since then, other studies have based their taxonomies upon these results [3][5].
Reference: [5] <author> C. E. Landwehr, A. R. Bull, J. P. McDermott, and W. S. Choi, </author> <title> A Taxonomy of Com puter Program Security Flaws, </title> <journal> Computing Surveys </journal>
Reference-contexts: Now, one can view a vulnerability as a containing class (such as genus is in the biological taxonomy) and attacks as elements of that class. This unifies the two into a complete and consistent tax onomy, much as Landwehr tried to do in <ref> [5] </ref>. The game of Animal suggests an approach to building a taxonomy. Given two aws, some (discriminating) question captures the difference between them. Then, for the next aw, either it matches one of the earlier ones found, or some other (discriminating) question (s) distinguish it from the other two aws.
Reference: [6] <author> P. G. Neumann, </author> <title> Computer System Security Evaluation, </title> <booktitle> 1978 National Computer Conference Proceedings AFIPS Conference Proceedings (June 1978). </booktitle>
Reference-contexts: This type of taxonomy captures that (1) each different vulnerability has a single, unique corresponding tuple, and (2) there exists a well-defined procedure for deriving a tuples corresponding to a vulnerability. 2.1 The Program Analysis Study Neumanns presentation <ref> [6] </ref> of this study organizes the nine classes of aws to show the connections between the major classes and subclasses of aws: 1.
Reference: [7] <author> D. Seeley, </author> <title> A Tour of the Worm, </title> <booktitle> Proceedings of the 1989 Winter USENIX Technical Conference </booktitle>
Reference-contexts: Then xterm appends logging output to the password file. At this point, the user can create a root account without a password and gain root privi leges. Figure 1 summarizes this. 2.5 Second Flaw: fingerd buffer overrun aw The Internet worm of 1988 <ref> [7] </ref> publicized this aw, but it continues to recur, most recently in implementations of browsers for the World Wide Web and some versions of the SMTP agent sendmail finger protocol obtains information about the users of a remote sys tem.
References-found: 7

