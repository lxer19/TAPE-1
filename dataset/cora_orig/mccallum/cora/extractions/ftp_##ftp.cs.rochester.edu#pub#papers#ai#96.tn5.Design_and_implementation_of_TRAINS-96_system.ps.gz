URL: ftp://ftp.cs.rochester.edu/pub/papers/ai/96.tn5.Design_and_implementation_of_TRAINS-96_system.ps.gz
Refering-URL: http://www.cs.rochester.edu/u/ringger/research/tn-96-5.html
Root-URL: 
Title: The Design and Implementation of the TRAINS-96 System: A Prototype Mixed-Initiative Planning Assistant  
Author: George Ferguson James F. Allen Brad W. Miller Eric K. Ringger 
Date: October 1996  
Address: Rochester, New York 14627  
Affiliation: The University of Rochester Computer Science Department  
Pubnum: TRAINS Technical Note 96-5  
Abstract: This document describes the design and implementation of TRAINS-96, a prototype mixed-initiative planning assistant system. The TRAINS-96 system helps a human manager solve routing problems in a simple transportation domain. It interacts with the human using spoken, typed, and graphical input and generates spoken output and graphical map displays. The key to TRAINS-96 is that it treats the interaction with the user as a dialogue in which each participant can do what they do best. The TRAINS-96 system is intended as both a demonstration of the feasibility of realistic mixed-initiative planning and as a platform for future research. This document describes both the design of the system and such features of its use as might be useful for further experimentation. Further references and a comprehensive set of manual pages are also provided. This material is based upon work supported by ARPA - Rome Laboratory under research contract no. F30602-95-1-0025, by the Office of Naval Research under research grant no. N00014-95-1-1088, and by the National Science Foundation under grant no. IRI-9623665. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the sponsors. 
Abstract-found: 1
Intro-found: 1
Reference: [Allen, 1995] <author> James F. Allen, </author> <title> "The TRAINS-95 Parsing System: A User's Manual," </title> <type> TRAINS technical Note 95-1, </type> <institution> Department of Computer Science, University of Rochester, Rochester, </institution> <address> NY, 14627, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: The exact interpretation of these messages is still somewhat ad hoc and better handling of them is the subject of current research. 12.3 Parser Operation Given that errors are inevitable, robust parsing techniques are essential. The Parser module uses a pure bottom-up parser based on that described in <ref> [Allen, 1995] </ref> to identify the 33 possible constituents at any point in the utterance based on syntactic and semantic re-strictions. Every constituent in each grammar rule specifies both a syntactic category and a semantic category, plus other features to encode co-occurance restrictions as found in many grammars. <p> For example, there is no general rule for PP attachment in the grammar. Rather there are rules for temporal adverbial modification (e.g., "at eight o'clock"), locational modification (e.g., "in Chicago"), and so on. Documentation on the form of the grammar and the functions of the parser are found in <ref> [Allen, 1995] </ref>. The end result of parsing is a sequence of speech acts rather than a syntactic sentence. Viewing the output as a sequence of speech acts has significant impact on the form and style of the grammar.
Reference: [Allen, 1996a] <author> James F. Allen, </author> <title> "Logical Form in the TRAINS-96 System," </title> <type> Trains technical note, </type> <institution> Department of Computer Science, University of Rochester, Rochester, </institution> <address> NY, 14627, </address> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: If an utterance were completely uninterpretable, the parser would still produce an output namely, a TELL act with no identified content! The full specification of the output of the parser can be found in <ref> [Allen, 1996a] </ref>. <p> Further details of the Parser's logical form, including significantly more detail regarding the representation of the semantics, can be found in <ref> [Allen, 1996a] </ref>. 38 13 Discourse Manager The Discourse Manager is responsible for interpreting the user's utterances, and figuring out what to do about them. For problem-related utterances such as suggestions, this involves passing them on to the Problem Solving module and integrating the results.
Reference: [Allen, 1996b] <author> James F. Allen, </author> <title> "Problem Solving Manager Documentation". TRAINS Project Online Documentation, </title> <year> 1996. </year>
Reference-contexts: The values of the :result argument depend on the particular request, and the display-info contains information of use in generation (such as cities, engines, etc.). The :reason argument is used to explain all scores except :good. For more details, see <ref> [Allen, 1996b] </ref>. Update Requests The set of update requests understood by the Problem Solver (module PS) is shown in Table 20. Update requests actually change the Problem Solver's hierarchical plan representation, typically using a ps-state identifier that was returned by an interpretation action. <p> ASK-ABOUT: This will generate a reply whose content is a list of all propositions that contain the expr as an argument. Further details regarding the Problem Solver knowledge base functions and the set of pred icates understood by the current version of the module can be found in <ref> [Allen, 1996b] </ref>. 50 15 Other Modules This section describes a variety of other modules making up the TRAINS-96 System. Most of them provide services involved in making TRAINS a useful experimental and demonstration system.
Reference: [Allen and Schubert, 1991] <author> James F. Allen and Lenhart K. Schubert, </author> <title> "The TRAINS Project," </title> <type> TRAINS Technical Note 91-1, </type> <institution> Department of Computer Science, University of Rochester, Rochester, </institution> <address> NY, 14627, </address> <month> May </month> <year> 1991. </year>
Reference: [Allen et al., 1995] <author> James F. Allen, Lenhart K. Schubert, George Ferguson, Peter Heeman, Chung Hee Hwang, Tsuneaki Kato, Marc Light, Nathaniel G. Martin, Bradford W. Miller, Massimo Poesio, and David R. Traum, </author> <title> "The TRAINS Project: A case study in defining a conversational planning agent," </title> <journal> Journal of Experimental and Theoretical AI, </journal> <volume> 7 </volume> <pages> 7-48, </pages> <year> 1995. </year> <note> Also available as TRAINS Technical Note 93-4, </note> <institution> Department of Computer Science, University of Rochester. </institution>
Reference: [Ferguson et al., 1996] <author> George Ferguson, James Allen, and Brad Miller, "TRAINS-95: </author> <title> Towards a Mixed-Initiative Planning Assistant," </title> <booktitle> in Proceedings of the Third International Conference on Artificial Intelligence Planning Systems (AIPS-96), </booktitle> <pages> pages 70-77, </pages> <address> Edin-burgh, Scotland, </address> <month> 29-31 May </month> <year> 1996. </year>
Reference: [Finin et al., 1993] <author> Tim Finin, Jay Weber, Gio Wiederhold, Michael Genesereth, Richard Fritzson, Donald McKay, James McGuire, Richard Pelavin, Stuart Shapiro, and Chris Beck, </author> <title> "Specification of the KQML Agent-Communication Language". </title> <type> Draft, </type> <month> 15 June </month> <year> 1993. </year>
Reference-contexts: The rest of this section describes KQML and its use in the TRAINS System. It is intended as a complement to the KQML specification <ref> [Finin et al., 1993] </ref>, which provides more details regarding message formats. Subsequent sections will describe the messages understood by the components of the TRAINS System. 3.1 KQML Basics KQML defines messages in terms of "performatives," a term from the semantics of natural language verbs.
Reference: [Heeman and Allen, 1995] <author> Peter A. Heeman and James F. Allen, </author> <title> "The TRAINS-93 Dialogues," </title> <type> TRAINS Technical Note 94-2, </type> <institution> Dept. of Computer Science, University of Rochester, Rochester, </institution> <address> NY, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: For TRAINS-96, two sets of models are available: one for ATIS (distributed with Sphinx-II) and one for TDC-75 (developed from sessions with the TRAINS-95 system as well as the TRAINS-93 Dialogue Corpus <ref> [Heeman and Allen, 1995] </ref>). Each set must only be used when SPEECH-IN is using its language model with the corresponding name. Using the wrong SPEECH-PP model will defeat the port-processor's purpose entirely. For TRAINS-96, the TDC-75 models are the default for both SPEECH-IN and SPEECH-PP.
Reference: [Hinkelman and Allen, 1989] <author> Elizabeth A. Hinkelman and James F. Allen, </author> <title> "Two constraints on speech act ambiguity," </title> <booktitle> in Proceedings of the Twenty-Seventh Annual Meeting of the Association for Computational Linguistics (ACL-89), </booktitle> <pages> pages 212-219, </pages> <address> Vancouver, BC, </address> <month> 25-27 June </month> <year> 1989. </year>
Reference-contexts: Simply classifying such utterances as sentences would miss the point. Thus the parser computes a set of plausible speech act interpretation based on the surface form, similar to the model described in <ref> [Hinkelman and Allen, 1989] </ref>. We use a hierarchy of speech acts, shown in Table 16, that encode different levels of vagueness, including an act (SPEECH-ACT) that indicates content without an identified illocutionary force.
Reference: [Huang et al., 1992] <author> Xuedong Huang, Fileno Alleva, Hsiao-Wuen Hon, Mei-Yu Hwang, and Ronald Rosenfeld, </author> <title> "The SPHINX-II Speech Recognition System: An Overview," </title> <type> Technical Report CS-92-112, </type> <institution> Carnegie Mellon University, School of Computer Science, </institution> <address> Pitts-burgh, PA, </address> <month> January </month> <year> 1992. </year> <month> 60 </month>
Reference-contexts: Manager understands the core set of messages shown in Table 3 (page 9), although it ignores them all with the exception of exit and hide/show-window. 18 7 Speech Recognition Speech recognition in TRAINS-96 is performed by the SPEECH-IN module, which is based on the Sphinx-II system from Carnegie Mellon University <ref> [Huang et al., 1992] </ref>. We made as few changes as possible to the Sphinx code, mostly adding KQML input and output, fixing a few bugs, and adjusting the audio routines to use the AudioFile server as described in the previous section.
Reference: [Kautz, 1987] <author> Henry A. Kautz, </author> <title> A Formal Theory of Plan Recognition, </title> <type> PhD thesis, </type> <institution> Depart--ment of Computer Science, University of Rochester, Rochester, </institution> <address> NY, </address> <month> May </month> <year> 1987. </year> <note> Available as Technical Report 215. </note>
Reference-contexts: Interpretation Requests The set of interpretation requests understood by the Problem Solver (module PS) is shown in Table 19. In general, there are two relationships between goals, which correspond to the refinement and decomposition relations defined in Kautz' model <ref> [Kautz, 1987; Kautz, 1991] </ref>. * A goal G 0 is a refinement of a goal G if any plan that satisfies G 0 also satisfies G. * A set of goals G 1 ; : : : ; G n with temporal constraints, is a decomposition of a goal G, if
Reference: [Kautz, 1991] <author> Henry A. Kautz, </author> <title> "A Formal Theory of Plan Recognition and its Implementation," </title> <booktitle> in Reasoning about Plans, </booktitle> <pages> pages 69-126. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1991. </year>
Reference-contexts: Interpretation Requests The set of interpretation requests understood by the Problem Solver (module PS) is shown in Table 19. In general, there are two relationships between goals, which correspond to the refinement and decomposition relations defined in Kautz' model <ref> [Kautz, 1987; Kautz, 1991] </ref>. * A goal G 0 is a refinement of a goal G if any plan that satisfies G 0 also satisfies G. * A set of goals G 1 ; : : : ; G n with temporal constraints, is a decomposition of a goal G, if
Reference: [Levergood et al., 1993a] <author> Thomas M. Levergood, Andrew C. Payne, James Gettys, G. Win-field Treese, and Lawrence C. Stewart, "AudioFile: </author> <title> A network-transparent system for distributed audio applications," </title> <type> Technical Report 93/8, </type> <institution> Digital Equipment Corporation, Cambridge Research Lab, </institution> <address> Cambridge, MA, </address> <month> 11 June </month> <year> 1993. </year>
Reference-contexts: The Audio Manager was eventually undone by point (2) above, when synchronization issues with the Sun audio hardware became too difficult to do properly. For the final version of the TRAINS-96 system, we are using the AudioFile network audio system developed at DEC <ref> [Levergood et al., 1993a; Levergood et al., 1993b] </ref>. This package is based on the X Window System sources and attempts to do for audio what X does for graphics, namely provide a network-transparent audio model based on a client-server architecture.
Reference: [Levergood et al., 1993b] <author> Thomas M. Levergood, Andrew C. Payne, James Gettys, G. Win-field Treese, and Lawrence C. Stewart, "AudioFile: </author> <title> A network-transparent system for distributed audio applications," </title> <booktitle> in Proceedings of the USENIX Summer Conference, </booktitle> <month> June </month> <year> 1993. </year>
Reference-contexts: The Audio Manager was eventually undone by point (2) above, when synchronization issues with the Sun audio hardware became too difficult to do properly. For the final version of the TRAINS-96 system, we are using the AudioFile network audio system developed at DEC <ref> [Levergood et al., 1993a; Levergood et al., 1993b] </ref>. This package is based on the X Window System sources and attempts to do for audio what X does for graphics, namely provide a network-transparent audio model based on a client-server architecture.
Reference: [Ringger, 1995] <author> Eric K. Ringger, </author> <title> "A Robust Loose Coupling for Speech Recognition and Natural Language Understanding," </title> <type> Technical Report 592, </type> <institution> Department of Computer Science, University of Rochester, Rochester, </institution> <address> NY, 14627, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: In short, the purpose of the postprocessor is to improve word recognition accuracy and to thereby increase the likelihood of a successful interchange between the user and the system. Further discussion of the postprocessor's design can be found in <ref> [Ringger, 1995] </ref>, and a detailed experimental analysis of its performance can be found in [Ringger and Allen, 1996].
Reference: [Ringger and Allen, 1996] <author> Eric K. Ringger and James F. Allen, </author> <title> "A fertility channel model for post-correction of continuous speech recognition," </title> <booktitle> in Proceedings of the Fourth International Conference on Spoken Language Processing (ICSLP'96), </booktitle> <address> Philadelphia, PA, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: Further discussion of the postprocessor's design can be found in [Ringger, 1995], and a detailed experimental analysis of its performance can be found in <ref> [Ringger and Allen, 1996] </ref>. The complete set of messages understood by the SPEECH-PP module is shown in Table 9. 8.2 Speech Post-Processor Models The SPEECH-PP module requires two models to perform helpful corrections: a language model and a channel model. It is necessary to train these models prior to operation.
Reference: [Searle, 1969] <author> John R. Searle, </author> <title> Speech Acts: An essay in the philosophy of language, </title> <publisher> Cam-bridge University Press, </publisher> <address> Cambridge, England, </address> <year> 1969. </year>
Reference-contexts: The speech act forms reflect the surface form of the utterances, and fall into classes, organized along the lines of Searle's taxonomy <ref> [Searle, 1969] </ref>. Note that there are some acts, such as WARN, that do not appear as output from the parser but may be recognized by the system at later stages of processing.
Reference: [Sikorski and Allen, 1996] <author> Teresa Sikorski and James F. Allen, </author> <title> "TRAINS-95 System Evaluation," </title> <type> TRAINS Technical Note 96-3, </type> <institution> Dept. of Computer Science, University of Rochester, Rochester, </institution> <address> NY, </address> <month> July </month> <year> 1996. </year> <month> 61 </month>
Reference-contexts: We have left the system running for hours unattended while in use. Unfortunately, the task itself remains very simple, as it was in TRAINS-95. We will be conducting a set of experiments on the efficacy of the system, as we did for TRAINS-95 <ref> [Sikorski and Allen, 1996] </ref>, and we believe that the improvements will be evident.
References-found: 18

