URL: http://renoir.csc.ncsu.edu/Faculty/Vouk/Papers/FTPattern.ps
Refering-URL: http://renoir.csc.ncsu.edu/Faculty/Vouk/vouk.se.html
Root-URL: http://www.csc.ncsu.edu
Email: email: fjdaniel@eos.ncsu.edu  email: kkim1@eos.ncsu.edu, vouk@csc.ncsu.edu  
Title: The Reliable Hybrid Pattern A Generalized Software Fault Tolerant Design Pattern  
Author: Fonda Daniels Kalhee Kim and Mladen A. Vouk 
Keyword: Key words: Reliable Hybrid pattern, fault tolerant software, N-Version Programming, Recovery Block.  
Note: 1.0 Introduction  
Address: Box 7911  Raleigh, NC 27695  Box 8206  Raleigh, NC 27695  
Affiliation: Department of Electrical Computer Engineering,  North Carolina State University  Department of Computer Science,  North Carolina State University  
Abstract: In order to make software applications more reliable, it may be necessary to incorporate into them a strategy for tolerating software faults. In the case of critical applications, this is essential. In this paper we describe a general pattern, which we call the Reliable Hybrid pattern, that can be used to design fault tolerant software applications. The pattern supports development of applications based on classical fault tolerant strategies such as N-Version Programming and Recovery Block, as well as those based on advanced hybrid techniques such as Consensus Recovery Block, Acceptance Voting, and N-Self Checking Programming. The Reliable Hybrid pattern structure reflects the fact that these advanced strategies can be constructed through recursive combination of N-Version Programming, Recovery Block, and hybrid components. Our pattern explicitly indicates how different advanced software voting techniques fit into the design structure. We use Consensus Recovery Block to illustrate the behavior of the designs that can be constructed using the Reliable Hybrid pattern, and we discuss some general issues related to the use of fault-tolerant software. The technique of using redundant software modules as protection against software faults was inherited from hardware [Nels87]. However, unlike hardware failures, software faults are for the most part the result of software specification and design errors, thus simple replication of software components does not provide reasonable protection. This dictates designs and development methods that use diverse algorithms in the redundant components in order to minimize the potential for common-cause faults and failures. Redundancy requires the ability to judge acceptability of the outputs of several modules, either by direct evaluation or by comparison, and subsequent selection of one of the outputs as the correct output. The algorithm that compares, evaluates and selects the correct output is called an adjudicator. Depending on the application, adjudication algorithms range from simple to complex. There are several adjudication algorithms that have been proposed. This includes voting, selection of the median value, and acceptance testing as well as more complex decision-making. Two common fault-tolerant software schemes are N-Version Programming 
Abstract-found: 1
Intro-found: 0
Reference: [Aviz85] <author> A. Avizienis, </author> <title> The N-Version Approach to Fault-Tolerant Software, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. SE - 11 (12), </volume> <pages> pp. 1491-1501, </pages> <year> 1985. </year>
Reference-contexts: Depending on the application, adjudication algorithms range from simple to complex. There are several adjudication algorithms that have been proposed. This includes voting, selection of the median value, and acceptance testing as well as more complex decision-making. Two common fault-tolerant software schemes are N-Version Programming 2 (voter-based) <ref> [Aviz85] </ref> and Recovery Block (acceptance test-based) [Rand75]. Both of these schemes are based on software component redundancy and on the assumption that correlated coincident failures of these components are rare. <p> techniques [Lyu95, Lyu96]. 3 Table 1: Fault Tolerance Techniques Adjudication Method Algorithm Description Reference Voter NVP with Majority Voting (MV) In an m out of N fault tolerant software system, m is the agreement number or the number of matching outputs that the adjudication algorithm requires to make a decision. <ref> [Aviz85, Lyu96] </ref> NVP with Consensus Voting (CV) Generalization of majority voting. In consensus voting the result with the largest agreement number is chosen as the correct answer.
Reference: [Bell91] <author> F. Belli and P. Jedrzejowicz, </author> <title> Comparative Analysis of Concurrent Fault-Tolerance Techniques for Real-Time Applications, </title> <booktitle> Proc. Intl. Symposium on Software Reliability Engineering, </booktitle> <address> Austin, TX, </address> <year> 1991. </year>
Reference-contexts: The strategy fails if both NVP and RB fail. [Scot87] Acceptance Voting (AV) The output of each module is first presented to an acceptance test and only those modules that pass the acceptance test are used to vote on the correctness of the answers. <ref> [Bell91, Lyu96] </ref> N-Self Checking Programming (NSCP) N modules are executed in pairs for all N. Outputs of each pair are tested and if they do not agree with each other, the responses of the pair are discarded.
Reference: [Busc95] <author> F. Buschmann, </author> <title> The MasterSlave Pattern, Pattern Languages of Program Design, </title> <editor> J.Coplien and D.C. Schnidt eds. </editor> <booktitle> Addision-Wesley, </booktitle> <pages> pp. 133-142, </pages> <year> 1995. </year>
Reference-contexts: If they agree the outputs are compared again. [Lapr90] An objectoriented approach to software fault tolerance has previously been discussed in [Xu95]. NVP and RB have been previously implemented as MasterSlave <ref> [Busc95] </ref> and Backup [Subr95] design patterns respectively. The design pattern presented in this paper is more general. It allows reuse of these two patterns, as well as construction of more complex hybrid solutions. We call it the Reliable Hybrid pattern.
Reference: [Gamm94] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides, </author> <title> Design Patterns: Elements of Reusable ObjectOriented Software, </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: The other three patterns that are related to the general idea of redundancy-based fault tolerance are the Chain of Responsibility pattern, the Strategy pattern, and the Composite pattern <ref> [Gamm94] </ref>. The Chain of Responsibility pattern decouples objects so that multiple objects have a chance to handle a request independently. In the Reliable Hybrid pattern each diverse software version is an example of Strategy.
Reference: [Kim96] <author> K.Kim, M.A. Vouk, and D. F. McAllister, </author> <title> An Empirical Evaluation of Maximum Likelihood Voting in Failure Correlation Conditions, </title> <booktitle> Proc. </booktitle> <volume> ISSRE 96, </volume> <pages> pp. 330-339, </pages> <year> 1996. </year>
Reference-contexts: Practical implementation of MLV requires certain modification to the MLV algorithm. <ref> [Leun95, Kim96] </ref> Acceptance Test Recovery Block (RB) Independently developed functionally equivalent versions are executed in sequence or in parallel, and the output of each is adjudicated by an acceptance test. The first version that passes the acceptance test is chosen as the correct answer. <p> accp_test succeeds result result get_result (resList) get_result (resList) correct voter result or failure Adjudication SubSystem A typical object structure for CRB with CV looks like Figure 3: AClient Master Master Version1 VersionN Hybrid CV RBS 2.5 Consequences Improved Reliability: The reliability of fault tolerant software approaches has been studied extensively <ref> [Vouk93, Luy95, Lyu96, Kim96] </ref>. Studies have shown that depending on the diversity and dependability of the components the reliability gains of a N-version system can be 30% to several orders of magnitude. A criticality and cost analysis should be used to decide if the gains are sufficient and cost effective.
Reference: [Lapr90] <author> J.C. Laprie, J. Arlat, C. Beounes, K. Kanoun, </author> <title> Definition and Analysis of Hardware and Software Fault-Tolerant Architectures, </title> <journal> IEEE Computer, </journal> <volume> Vol 23(6), </volume> <month> July </month> <year> 1990, </year> <pages> pp. 39-51. </pages>
Reference-contexts: Outputs of each pair are tested and if they do not agree with each other, the responses of the pair are discarded. If they agree the outputs are compared again. <ref> [Lapr90] </ref> An objectoriented approach to software fault tolerance has previously been discussed in [Xu95]. NVP and RB have been previously implemented as MasterSlave [Busc95] and Backup [Subr95] design patterns respectively. The design pattern presented in this paper is more general.
Reference: [Leun95] <author> Y. Leung, </author> <title> Maximum Likelihood Voting for Fault-Tolerant Software with Finite Output Space, </title> <journal> IEEE Trans. Rel, </journal> <volume> Vol. 44(3), </volume> <year> 1995. </year>
Reference-contexts: Practical implementation of MLV requires certain modification to the MLV algorithm. <ref> [Leun95, Kim96] </ref> Acceptance Test Recovery Block (RB) Independently developed functionally equivalent versions are executed in sequence or in parallel, and the output of each is adjudicated by an acceptance test. The first version that passes the acceptance test is chosen as the correct answer.
Reference: [Lyu95] <author> M. Lyu, B. Krishnamurthy, eds. </author> <title> Software Fault Tolerance, </title> <publisher> Johm Wiley & Son, </publisher> <address> New York,1995. </address>
Reference-contexts: Note that NVP is commonly used to refer to voting-based fault tolerance software. Table 1 lists several examples of voter-based algorithms. There are many other voting techniques that may be of practical interest to the reader <ref> [Lyu95, Lyu96] </ref>. Acceptance Test-Based An acceptance test is an adjudicator that is a programspecific mechanism that checks the correctness of the program results. An acceptance test might only consist of bounds or simple tests to determine acceptability. An example of an acceptance test-based technique is listed in Table 1. <p> Hybrid There are also ways of combining the preceding simple techniques to create hybrid fault tolerance approaches. Examples of hybrid strategies, which combine both voter-based and acceptance-based techniques are listed in Table 1. There are many other hybrid techniques <ref> [Lyu95, Lyu96] </ref>. 3 Table 1: Fault Tolerance Techniques Adjudication Method Algorithm Description Reference Voter NVP with Majority Voting (MV) In an m out of N fault tolerant software system, m is the agreement number or the number of matching outputs that the adjudication algorithm requires to make a decision. [Aviz85, Lyu96] <p> For example, design patterns that possess similar relationships can be used to implement solutions to similar problems. Using diverse design patterns to implement functionally equivalent versions is very desirable. The issue of diversity has been studied in great detail in the literature <ref> [Lyu95, Lyu96] </ref>. 2.7 Known Uses 8 Fault tolerance has been considered for use, and is actually being used, in a number of application areas. In most cases these are critical application areas such as nuclear power plants, railway systems, and aerospace systems [Lyu95, Lyu96]. 2.8 Related Patterns The most closely related <p> been studied in great detail in the literature <ref> [Lyu95, Lyu96] </ref>. 2.7 Known Uses 8 Fault tolerance has been considered for use, and is actually being used, in a number of application areas. In most cases these are critical application areas such as nuclear power plants, railway systems, and aerospace systems [Lyu95, Lyu96]. 2.8 Related Patterns The most closely related are, of course, the MasterSlave pattern that emulates NVP and the Backup pattern that emulates RB.
Reference: [Lyu96] <author> M. Lyu, eds., </author> <title> Handbook of Software Reliability Engineering, </title> <publisher> McGraw-Hill and IEEE Computer Society Press, </publisher> <address> New York, </address> <year> 1996. </year>
Reference-contexts: Note that NVP is commonly used to refer to voting-based fault tolerance software. Table 1 lists several examples of voter-based algorithms. There are many other voting techniques that may be of practical interest to the reader <ref> [Lyu95, Lyu96] </ref>. Acceptance Test-Based An acceptance test is an adjudicator that is a programspecific mechanism that checks the correctness of the program results. An acceptance test might only consist of bounds or simple tests to determine acceptability. An example of an acceptance test-based technique is listed in Table 1. <p> Hybrid There are also ways of combining the preceding simple techniques to create hybrid fault tolerance approaches. Examples of hybrid strategies, which combine both voter-based and acceptance-based techniques are listed in Table 1. There are many other hybrid techniques <ref> [Lyu95, Lyu96] </ref>. 3 Table 1: Fault Tolerance Techniques Adjudication Method Algorithm Description Reference Voter NVP with Majority Voting (MV) In an m out of N fault tolerant software system, m is the agreement number or the number of matching outputs that the adjudication algorithm requires to make a decision. [Aviz85, Lyu96] <p> techniques [Lyu95, Lyu96]. 3 Table 1: Fault Tolerance Techniques Adjudication Method Algorithm Description Reference Voter NVP with Majority Voting (MV) In an m out of N fault tolerant software system, m is the agreement number or the number of matching outputs that the adjudication algorithm requires to make a decision. <ref> [Aviz85, Lyu96] </ref> NVP with Consensus Voting (CV) Generalization of majority voting. In consensus voting the result with the largest agreement number is chosen as the correct answer. <p> The strategy fails if both NVP and RB fail. [Scot87] Acceptance Voting (AV) The output of each module is first presented to an acceptance test and only those modules that pass the acceptance test are used to vote on the correctness of the answers. <ref> [Bell91, Lyu96] </ref> N-Self Checking Programming (NSCP) N modules are executed in pairs for all N. Outputs of each pair are tested and if they do not agree with each other, the responses of the pair are discarded. <p> accp_test succeeds result result get_result (resList) get_result (resList) correct voter result or failure Adjudication SubSystem A typical object structure for CRB with CV looks like Figure 3: AClient Master Master Version1 VersionN Hybrid CV RBS 2.5 Consequences Improved Reliability: The reliability of fault tolerant software approaches has been studied extensively <ref> [Vouk93, Luy95, Lyu96, Kim96] </ref>. Studies have shown that depending on the diversity and dependability of the components the reliability gains of a N-version system can be 30% to several orders of magnitude. A criticality and cost analysis should be used to decide if the gains are sufficient and cost effective. <p> However, reuse of existing but diverse object libraries can go a long way to mitigate that cost. Practical experience with the cost of development of redundancy-based fault tolerant software solutions indicates that, in a well designed multiversion system, each additional component costs about 75-80% of a single version <ref> [Lyu96] </ref>. This means that the cost of multiversion software increases sublinearly with the number of components. Additional memory may be required due to the added complexity of the fault tolerant mechanism. Demand on processing resources increases proportional to the number of software versions. <p> For example, design patterns that possess similar relationships can be used to implement solutions to similar problems. Using diverse design patterns to implement functionally equivalent versions is very desirable. The issue of diversity has been studied in great detail in the literature <ref> [Lyu95, Lyu96] </ref>. 2.7 Known Uses 8 Fault tolerance has been considered for use, and is actually being used, in a number of application areas. In most cases these are critical application areas such as nuclear power plants, railway systems, and aerospace systems [Lyu95, Lyu96]. 2.8 Related Patterns The most closely related <p> been studied in great detail in the literature <ref> [Lyu95, Lyu96] </ref>. 2.7 Known Uses 8 Fault tolerance has been considered for use, and is actually being used, in a number of application areas. In most cases these are critical application areas such as nuclear power plants, railway systems, and aerospace systems [Lyu95, Lyu96]. 2.8 Related Patterns The most closely related are, of course, the MasterSlave pattern that emulates NVP and the Backup pattern that emulates RB.
Reference: [McAl90] <author> D.F. McAllister, C.E. Sun and M.A. Vouk, </author> <title> Reliability of Voting in Fault-Tolerant Software Systems for Small Output Spaces, </title> <journal> IEEE Trans. Rel., </journal> <volume> Vol-39(5), </volume> <pages> pp. 524-534, </pages> <year> 1990. </year>
Reference-contexts: In consensus voting the result with the largest agreement number is chosen as the correct answer. If there are several outputs with the same agreement number, the tie can be broken in several ways. <ref> [McAl90, Vouk93] </ref> NVP with Maximum Likelihood Voting (MLV) Takes the reliability of each software version into consideration and determines the most likely correct answer.
Reference: [Nels87] <editor> V.P. Nelson and B.D. Carroll, eds, </editor> <booktitle> Tutorial; Fault-Tolerant Computing, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1987. </year>
Reference-contexts: 1.0 Introduction The technique of using redundant software modules as protection against software faults was inherited from hardware <ref> [Nels87] </ref>. However, unlike hardware failures, software faults are for the most part the result of software specification and design errors, thus simple replication of software components does not provide reasonable protection.
Reference: [Rand75] <author> B. Randell, </author> <title> Systems structure from software fault-tolerance, </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> Vol. SE - 1, </volume> <pages> pp. 220-232, </pages> <year> 1975. </year>
Reference-contexts: There are several adjudication algorithms that have been proposed. This includes voting, selection of the median value, and acceptance testing as well as more complex decision-making. Two common fault-tolerant software schemes are N-Version Programming 2 (voter-based) [Aviz85] and Recovery Block (acceptance test-based) <ref> [Rand75] </ref>. Both of these schemes are based on software component redundancy and on the assumption that correlated coincident failures of these components are rare. Voter-Based N-Version Programming (NVP) proposes parallel execution of independently developed functionally equivalent software versions with adjudication of their outputs by a voter.
Reference: [Rand93] <author> B. Randell and J. Xu, </author> <title> ObjectOriented Software Fault Tolerance: Framework, Reuse and Design Diversity, </title> <booktitle> 1 st Workshop on Predictability Dependable Computing Systems (2), </booktitle> <address> Toulouse, </address> <month> September, </month> <pages> pp. 165-184, </pages> <year> 1993. </year>
Reference: [Scot87] <author> R.K. Scott, J.W. Gault and D.F. McAllister, </author> <title> Fault Tolerant Reliability Modeling, </title> <journal> IEEE Trans. Soft. Engr. </journal> <volume> Vol. SE-13, No. 5, </volume> <pages> pp. 582-592, </pages> <year> 1987. </year>
Reference-contexts: The complexity of the acceptance test can vary widely. [Rand75, Lyu95, Hybrid Consensus Recovery Block (CRB) Executes NVP first, followed by RB. If NVP fails the system resorts to RB in an attempt to find the correct answer. The strategy fails if both NVP and RB fail. <ref> [Scot87] </ref> Acceptance Voting (AV) The output of each module is first presented to an acceptance test and only those modules that pass the acceptance test are used to vote on the correctness of the answers. [Bell91, Lyu96] N-Self Checking Programming (NSCP) N modules are executed in pairs for all N.
Reference: [Subr95] <author> S. Subramanian, and W. Tsai, </author> <title> Backup Pattern: Designing Redundancy in ObjectOriented Software, Pattern Languages of Program Design, </title> <editor> J.Coplien and D.C. Schnidt, eds. Addision-Wesley, </editor> <year> 1996. </year> <month> 10 </month>
Reference-contexts: If they agree the outputs are compared again. [Lapr90] An objectoriented approach to software fault tolerance has previously been discussed in [Xu95]. NVP and RB have been previously implemented as MasterSlave [Busc95] and Backup <ref> [Subr95] </ref> design patterns respectively. The design pattern presented in this paper is more general. It allows reuse of these two patterns, as well as construction of more complex hybrid solutions. We call it the Reliable Hybrid pattern.
Reference: [Vouk93] <author> M.A. Vouk, D.F. McAllister, D.E. Eckhardt, Kalhee Kim, </author> <title> An Empirical Evaluation of Consensus Voting and Consensus Recovery Block Reliability in the Presence of Failure Correlation, </title> <journal> Journal of Computer and Software Engineering, </journal> <volume> Vol1(4), </volume> <pages> pp. 367-388, </pages> <year> 1993. </year>
Reference-contexts: In consensus voting the result with the largest agreement number is chosen as the correct answer. If there are several outputs with the same agreement number, the tie can be broken in several ways. <ref> [McAl90, Vouk93] </ref> NVP with Maximum Likelihood Voting (MLV) Takes the reliability of each software version into consideration and determines the most likely correct answer. <p> accp_test succeeds result result get_result (resList) get_result (resList) correct voter result or failure Adjudication SubSystem A typical object structure for CRB with CV looks like Figure 3: AClient Master Master Version1 VersionN Hybrid CV RBS 2.5 Consequences Improved Reliability: The reliability of fault tolerant software approaches has been studied extensively <ref> [Vouk93, Luy95, Lyu96, Kim96] </ref>. Studies have shown that depending on the diversity and dependability of the components the reliability gains of a N-version system can be 30% to several orders of magnitude. A criticality and cost analysis should be used to decide if the gains are sufficient and cost effective.
Reference: [Xu95] <author> J. Xu, B. Randell, C.M. F. Rubira-Calsavara and R.J. Stroud, </author> <title> Toward an Object-Oriented Approach to Software Fault Tolerance, in Fault-Tolerant Parallel and Distributed Systems, </title> <editor> eds. D. Pradham and D. Avresky, </editor> <publisher> IEEE CS Press, </publisher> <pages> pp. 226-233, </pages> <year> 1995. </year>
Reference-contexts: Outputs of each pair are tested and if they do not agree with each other, the responses of the pair are discarded. If they agree the outputs are compared again. [Lapr90] An objectoriented approach to software fault tolerance has previously been discussed in <ref> [Xu95] </ref>. NVP and RB have been previously implemented as MasterSlave [Busc95] and Backup [Subr95] design patterns respectively. The design pattern presented in this paper is more general. It allows reuse of these two patterns, as well as construction of more complex hybrid solutions. We call it the Reliable Hybrid pattern.
Reference: [Zimm95] <author> W. Zimmer, </author> <title> Relationships Between Design Patterns, Pattern Languages of Program Design, </title> <editor> J.Coplien and D.C. Schmidt, eds. </editor> <publisher> Addison-Wesley, </publisher> <pages> pp. </pages> <month> 345-359 </month> <year> 1995. </year>
References-found: 18

