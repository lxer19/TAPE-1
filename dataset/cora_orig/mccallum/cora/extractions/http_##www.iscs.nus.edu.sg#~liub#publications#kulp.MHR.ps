URL: http://www.iscs.nus.edu.sg/~liub/publications/kulp.MHR.ps
Refering-URL: 
Root-URL: 
Email: Email: [kulp,liub,whsu]@iscs.nus.edu.sg  
Title: Discovering Large Empty Maximal Hyper-Rectangle in Multi-Dimensional Space  
Author: Liang-Ping Ku, Bing Liu, Wynne Hsu 
Address: Republic of Singapore, 119260  
Affiliation: Department of Information Systems and Computer Science National University of Singapore  
Abstract: Given a collection of points in a multi-dimensional space, we consider the problem of finding the set of all possible Maximal Hyper-Rectangle (MHR), defined to be hyper-rectangles that are empty and have at least a point bounding each of its surfaces. It is easy to see that there are enormous number of such MHRs in a given instance, and most of the time, applications require only to find the "largest" MHR or"sufficiently large" MHRs. Our proposed algorithm solved all the above problems by setting a criterion to measure sufficiently large MHRs so that only those large MHRs will be reported. The algorithm runs much faster when the criterion set is "reasonably tight" as pruning is done naturally in the algorithm.
Abstract-found: 1
Intro-found: 1
Reference: [CDL86] <author> B. Chazelle, R. L. Drydale, and D. T. Lee. </author> <title> Computing the Largest Empty Rectangle. </title> <journal> Siam J. Computing, </journal> <volume> 15(1) </volume> <pages> 300-315, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction Problems occurring in multi-dimensional space have not been studied as extensively as those for one- or two-dimensional (1-D and 2-D) counterparts. One such example is the problem of finding the largest empty rectangle in a 2-D space containing points obstacles <ref> [CDL86] </ref> [Orl90]. To the best of our knowledge, no equivalent has been found to solve multi-dimensional version of the problem, namely, finding the largest empty hyper-rectangle in a multi-dimensional space.
Reference: [Ku96] <author> L.P. Ku. </author> <title> Algorithms for an Incremental Bin-Packing System. MSc. </title> <type> Thesis, </type> <institution> Dept. of Information Systems and Computer Science, National University of Singapore, </institution> <year> 1996. </year>
Reference-contexts: Lastly, a real disease database is analyzed and some interesting MHR are reported. 1 Note that in another piece of work, a useful "summary" of the collection of MHR is proposed for the purpose of of decision support in 2-D bin-packing system. Interested readers are referred to <ref> [Ku96] </ref>. 6 Acknowledgements We will like to thank Dr Tan Tiow Seng of Department of Information Systems and Computer Science, National University of Singapore, for his comments in the early phase of this work.
Reference: [LKH97] <author> B. Liu, L.-P. Ku, and W. Hsu. </author> <title> Discovering Interesting Holes in Data. </title> <booktitle> Proceedings of 15th International Joint Conferernce on Artificial Intelligence, </booktitle> <year> 1997. </year>
Reference-contexts: This problem of finding largest empty hyper-rectangle is applicable in the area of data mining as database of k attributes naturally form a k-dimensional space, and each data tuple forms a point in that space. A detailed description of this application and their related works are presented <ref> [LKH97] </ref>. By finding the "largest" (or "sufficiently large") empty hyper-rectangle means that there is no data tuple whose attributes fall in the ranges of the empty hyper-rectangle. This has different implications depending on the type of database of interest.
Reference: [OL82] <author> M. H. Overmars and J. V. Leeuwen. </author> <title> Dynamic Multi-Dimensional Data Structures Based on Quad- and K-D Trees. </title> <journal> Acta Informatica, </journal> <volume> 17 </volume> <pages> 267-285, </pages> <year> 1982. </year>
Reference-contexts: The data structure T can be implemented using fairly standard method; first transforming the MHRs into 2k-dimensional points [PS85] and then storing them in a Pseudo 2k-d tree <ref> [OL82] </ref>. We also defined a function BigEnough (R) which returns TRUE if the MHR R is considered "sufficiently large". Note that the function BigEnough () must satisfy the following: if BigEnough (R 0 ) is true, then BigEnough (R) must be true for all R that contains R 0 . <p> Proof: Since new MHRs generated are split off from existing MHRs, and by Lemma 10, it is safe to discard any MHR that fails the BigEnough () test. Together with Lemma 9, the lemma is proved. 2 2.5 Run Time Complexity T is implemented using a pseudo 2k-d tree <ref> [OL82] </ref>, hence each insert and delete operation on T can be implemented in O ((log m) 2 ) amortized time, where there are O (m) number of MHR stored in T .
Reference: [Orl90] <author> M. Orlowski. </author> <title> A New Algorithm for the Largest Empty Rectangle Problem. </title> <journal> Algorithmica, </journal> <volume> 5 </volume> <pages> 65-73, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction Problems occurring in multi-dimensional space have not been studied as extensively as those for one- or two-dimensional (1-D and 2-D) counterparts. One such example is the problem of finding the largest empty rectangle in a 2-D space containing points obstacles [CDL86] <ref> [Orl90] </ref>. To the best of our knowledge, no equivalent has been found to solve multi-dimensional version of the problem, namely, finding the largest empty hyper-rectangle in a multi-dimensional space.
Reference: [PS85] <author> F.P. Preparata and M.I. Shamos. </author> <title> Computational Geometry An Introduction. </title> <publisher> Springer Verlag, </publisher> <year> 1985. </year> <month> 15 </month>
Reference-contexts: ContainmentSearch (T; X) : returns a list of MHR from T that contains the point X, or bounded by the point X. The data structure T can be implemented using fairly standard method; first transforming the MHRs into 2k-dimensional points <ref> [PS85] </ref> and then storing them in a Pseudo 2k-d tree [OL82]. We also defined a function BigEnough (R) which returns TRUE if the MHR R is considered "sufficiently large".
References-found: 6

