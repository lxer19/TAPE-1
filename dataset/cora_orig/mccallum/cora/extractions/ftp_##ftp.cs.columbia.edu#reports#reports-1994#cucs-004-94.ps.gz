URL: ftp://ftp.cs.columbia.edu/reports/reports-1994/cucs-004-94.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1994.html
Root-URL: http://www.cs.columbia.edu
Title: Expanding the Repertoire of Process-based Tool Integration  
Author: Giuseppe Valetto 
Degree: MS Thesis Proposal  
Note: c fl1994 Giuseppe Valetto  
Date: February 9, 1994  
Address: 500 West 120th St. New York, N.Y. 10027  
Affiliation: Department of Computer Science Columbia University  
Pubnum: CUCS-004-94  
Abstract: The purpose of this thesis is to design and implement a new protocol for tool enveloping, in the context of the Oz Process Centered Environment. This new part of the system would be complementary to the already existing Black Box protocol for Oz and would deal with additional families of tools, whose character would be better serviced by a different approach, providing enhanced flexibility and a greater amount of interaction between the human operator, the tools and the environment during the execution of the wrapped activities. To achieve this, the concepts of persistent tool platforms, tool sessions and transaction-like activities will be introduced as the main innovative features of the protocol. We plan to be able to encapsulate and service conveniently classes of tools such as interpretive systems, databases, medium and large size applications that allow for incremental binding of parameters and partial retrieving of results, and possibly multi-user tools. Marginal modification and upgrading of the Oz general architecture and components will necessarily be performed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> George T. Heineman Gail E. Kaiser Naser S. Barghouti and Israel Z. Ben-Shaul. </author> <title> Rule Chaining in Marvel: Dynamic Binding of Parameters. </title> <journal> IEEE Expert, </journal> <volume> 7(6) </volume> <pages> 26-32, </pages> <month> De-cember </month> <year> 1992. </year>
Reference-contexts: Each SEL envelope is invoked during the execution of an Oz rule (defined in a specific language called MSL <ref> [1] </ref>), which consists of several different parts: * A name and a list of typed parameters that it accepts.
Reference: [2] <author> Israel Z. Ben-Shaul. </author> <title> Oz: A Decentralized Process Centered Environment. </title> <type> Technical Report CUCS-011-93, </type> <institution> Columbia University Department of Computer Science, </institution> <month> April </month> <year> 1993. </year> <type> PhD Thesis Proposal. </type>
Reference-contexts: Conceptually, envelopes, beside executing activities, perform the task to extract data from the internal representation in the SDE, to present them to their "wrapped" applications in the correct format and, in general, to provide mapping between the system's data repository and the tool's own one. Oz Overview Oz <ref> [2] </ref> [3] is a multi-user PCE that realizes the process description and support with a rule-based approach, and stores all the data, software components and their mutual relations in 1 an object oriented repository called the objectbase.
Reference: [3] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> A paradigm for decentralized process modeling and its realization in the oz environment. </title> <booktitle> In 16th International Conference on Software Engineering, </booktitle> <address> Sorrento, Italy, </address> <month> May </month> <year> 1994. </year> <note> In press. </note>
Reference-contexts: Conceptually, envelopes, beside executing activities, perform the task to extract data from the internal representation in the SDE, to present them to their "wrapped" applications in the correct format and, in general, to provide mapping between the system's data repository and the tool's own one. Oz Overview Oz [2] <ref> [3] </ref> is a multi-user PCE that realizes the process description and support with a rule-based approach, and stores all the data, software components and their mutual relations in 1 an object oriented repository called the objectbase.
Reference: [4] <author> Kenneth Birman. </author> <title> ISIS: A System for Fault-tolerant Distributed Computing. </title> <type> Technical Report TR-86-744, </type> <institution> Cornell University, Department of Computer Science, </institution> <address> Ithaca, NY, </address> <month> November </month> <year> 1986. </year>
Reference-contexts: Another effort, specifically directed towards group editing and using a similar approach, is DistEdit [19], which exploits the communication mechanism available in another tool-kit, called ISIS <ref> [4] </ref>. GroupDesign [18] allows group sessions and it is oriented towards drawing in structured graphics. It supports this kind of activity providing features as "Tele-Conference" and means of recognizing actions performed on the current project by each member of the group.
Reference: [5] <author> Christian Bremeau. </author> <title> The PCTE Contribution to Ada Programming Support Environments (APSE). </title> <editor> In Fred Long, editor, </editor> <booktitle> Software Engineering Environments International Workshop on Environments, volume 467 of Lecture Notes in Computer Science, </booktitle> <pages> pages 151-166, </pages> <address> Chinon, France, </address> <month> September </month> <year> 1989. </year> <note> Springer-Verlag. </note>
Reference-contexts: The aim is to create a set of services and facilities, called a public tool interface, complete enough to support tool writers in very different situations and domains. The result would be a generation of homogeneous tools, widely reusable under the PCTE specifications. Many SDE prototypes and projects [28] <ref> [5] </ref> [12] in Europe as well as in the USA have already adopted the PCTE standard. However, such a standardized approach is only useful if the SDE developers can or choose to abide to the standard conventions and their unavoidable limitations.
Reference: [6] <author> M. R. Cagan. </author> <title> The HP SoftBench Environment: An Architecture for a New Generation of Software Tools. </title> <journal> Hewlett-Packard Journal, </journal> <volume> 41(3) </volume> <pages> 36-47, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Here, the message server and the interfaces constitute the subsystem in charge of tool integration. This component is often referred to as a message bus. Such an approach is used, among others, by Field [22], Conversation Builder [17] [7], and SoftBench <ref> [6] </ref> [13]. PCTE [27] [11] is one of the most representative examples of efforts directed to define a widely recognized and accepted public standard for building tools with better portability.
Reference: [7] <author> Alan M. Carroll. </author> <title> The ConversationBuilder Kernel and Applications. </title> <type> Technical report, </type> <institution> University of Illinois, </institution> <year> 1992. </year> <type> PhD thesis. </type>
Reference-contexts: Here, the message server and the interfaces constitute the subsystem in charge of tool integration. This component is often referred to as a message bus. Such an approach is used, among others, by Field [22], Conversation Builder [17] <ref> [7] </ref>, and SoftBench [6] [13]. PCTE [27] [11] is one of the most representative examples of efforts directed to define a widely recognized and accepted public standard for building tools with better portability.
Reference: [8] <author> Prasun Dewan and Rajiv Choudary. </author> <title> A High-level and Flexible Framework for Implementing Multiuser User Interfaces. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(4) </volume> <pages> 345-380, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Dewan and Riedl presented FLECSE [9], a Software Engineering environment using dedicated collaborative tools, all built on the common framework provided by multi-user Suite <ref> [8] </ref>. While all of these these tool-kits maintain a certain amount of integration, none of them can fully enforce rules and desirable behaviors in collaborative software development.
Reference: [9] <author> Prasun Dewan and John Riedl. </author> <title> Toward Computer-Supported Concurrent Software Engineering. </title> <journal> Computer, </journal> <volume> 26(1) </volume> <pages> 17-27, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: GroupDesign [18] allows group sessions and it is oriented towards drawing in structured graphics. It supports this kind of activity providing features as "Tele-Conference" and means of recognizing actions performed on the current project by each member of the group. Dewan and Riedl presented FLECSE <ref> [9] </ref>, a Software Engineering environment using dedicated collaborative tools, all built on the common framework provided by multi-user Suite [8]. While all of these these tool-kits maintain a certain amount of integration, none of them can fully enforce rules and desirable behaviors in collaborative software development.
Reference: [10] <author> Anthony Earl. </author> <title> Principles of a Reference Model for Computer Aided Software Engineering Environments. </title> <editor> In Fred Long, editor, </editor> <booktitle> Software Engineering Environments International Workshop on Environments, volume 467 of Lecture Notes in Computer Science, </booktitle> <pages> pages 115-129, </pages> <address> Chinon, France, </address> <month> September </month> <year> 1989. </year> <note> Springer-Verlag. </note>
Reference-contexts: Wasserman [30] for example identified five kinds of integration (platform, presentation, data, control, process). Moreover, Earl <ref> [10] </ref> proposed a well known reference model for Computer Aided Software Engineering Environments (CASEEs, another term for addressing SDEs), in which a lot of emphasis is on the issues of portability and interoperability of tools.
Reference: [11] <author> F. Gallo, G. Boudier, and I. Thomas. </author> <title> Overview of PCTE and PCTE+. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 24(2), </volume> <month> February </month> <year> 1989. </year>
Reference-contexts: Here, the message server and the interfaces constitute the subsystem in charge of tool integration. This component is often referred to as a message bus. Such an approach is used, among others, by Field [22], Conversation Builder [17] [7], and SoftBench [6] [13]. PCTE [27] <ref> [11] </ref> is one of the most representative examples of efforts directed to define a widely recognized and accepted public standard for building tools with better portability.
Reference: [12] <author> Mari Georges and Claude Koemmer. </author> <title> Use and Extension of PCTE: The SPMMS Information System. </title> <editor> In Fred Long, editor, </editor> <booktitle> Software Engineering Environments International Workshop on Environments, volume 467 of Lecture Notes in Computer Science, </booktitle> <pages> pages 271-282, </pages> <address> Chinon, France, </address> <month> September </month> <year> 1989. </year> <note> Springer-Verlag. 28 </note>
Reference-contexts: The result would be a generation of homogeneous tools, widely reusable under the PCTE specifications. Many SDE prototypes and projects [28] [5] <ref> [12] </ref> in Europe as well as in the USA have already adopted the PCTE standard. However, such a standardized approach is only useful if the SDE developers can or choose to abide to the standard conventions and their unavoidable limitations.
Reference: [13] <author> C. Gerety. </author> <title> A New Generation of Software Development Tools. </title> <journal> Hewlett-Packard Journal, </journal> <volume> 41(3) </volume> <pages> 36-47, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Here, the message server and the interfaces constitute the subsystem in charge of tool integration. This component is often referred to as a message bus. Such an approach is used, among others, by Field [22], Conversation Builder [17] [7], and SoftBench [6] <ref> [13] </ref>. PCTE [27] [11] is one of the most representative examples of efforts directed to define a widely recognized and accepted public standard for building tools with better portability.
Reference: [14] <author> Mark A. Gisi and Gail E. Kaiser. </author> <title> Extending a Tool Integration Language. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 218-227, </pages> <address> Redondo Beach CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: No dedicated tools, nor code changes, nor recompilation were necessary, since Marvel fully exploited the principle of tool enveloping; Oz follows the same approach. The current mechanism to achieve this kind of integration is called the Shell Envelope Language (SEL) <ref> [14] </ref>.
Reference: [15] <author> G. E. Kaiser, N. S. Barghouti, and M. H. Sokolsky. </author> <title> Preliminary Experience with Process Modeling in the Marvel Software Development Environment Kernel. </title> <booktitle> In 23rd Annual Hawaii International Conference on System Sciences, </booktitle> <volume> volume II, </volume> <pages> pages 131-140, </pages> <address> Kona HI, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: The envelope idea was first introduced by the 7 ISTAR [26] system. Marvel envelopes are augmented Unix shell scripts [20], invoking external tools and able to achieve tool integration without modification in a Black Box <ref> [15] </ref> fashion. The Marvel project (on which Oz is based) also explored a different enveloping mechanism with the experimental implementation of a Grey Box style protocol, that allows feeding of parameters in an incremental fashion to medium size tools during their execution.
Reference: [16] <author> Israel Z. Ben-Shaul Gail E. Kaiser and George T. Heineman. </author> <title> An Architecture for Multi-User Software Development Environments. </title> <journal> Computing Systems, The Journal of the USENIX Association, </journal> <volume> 6(2) </volume> <pages> 65-103, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: It is based on the experience gained in developing the Marvel 3.1 PCE <ref> [16] </ref>, to which it is intended to be the successor, and while it inherited from Marvel most of its main features, it differs from it in several ways, noticeably in the fact that it is more oriented towards distributed use.
Reference: [17] <author> Simon M. Kaplan. Conversationbuilder: </author> <title> An open architecture for collaborative work. </title> <editor> In D. Diaper, D. Gilmore, G. Cockton, and B. Shackel, editors, </editor> <booktitle> IFIP TC 13 3rd International Conference on Human-Computer Interaction | INTERACT '90, </booktitle> <pages> pages 917-922, </pages> <address> Cambridge, United Kingdom, </address> <month> August </month> <year> 1990. </year> <pages> North-Holland. </pages>
Reference-contexts: Here, the message server and the interfaces constitute the subsystem in charge of tool integration. This component is often referred to as a message bus. Such an approach is used, among others, by Field [22], Conversation Builder <ref> [17] </ref> [7], and SoftBench [6] [13]. PCTE [27] [11] is one of the most representative examples of efforts directed to define a widely recognized and accepted public standard for building tools with better portability.
Reference: [18] <author> Alain Karsenty, Cristophe Tronche, and Michel Beaudouin-Lafon. GroupDesign: </author> <title> Shared Editing in a Heterogeneous Environment. </title> <journal> Computing Systems, </journal> <volume> 6(2) </volume> <pages> 167-195, </pages> <year> 1993. </year>
Reference-contexts: Another effort, specifically directed towards group editing and using a similar approach, is DistEdit [19], which exploits the communication mechanism available in another tool-kit, called ISIS [4]. GroupDesign <ref> [18] </ref> allows group sessions and it is oriented towards drawing in structured graphics. It supports this kind of activity providing features as "Tele-Conference" and means of recognizing actions performed on the current project by each member of the group.
Reference: [19] <author> Michael J. Knister and Atul Prakash. DistEdit: </author> <title> A Distributed Toolkit for Supporting Multiple Group Editors. </title> <booktitle> In CSCW90: Conference on Computer-Suppported Cooperative Work, </booktitle> <pages> pages 342-355, </pages> <address> Los Angeles, California, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: Another effort, specifically directed towards group editing and using a similar approach, is DistEdit <ref> [19] </ref>, which exploits the communication mechanism available in another tool-kit, called ISIS [4]. GroupDesign [18] allows group sessions and it is oriented towards drawing in structured graphics.
Reference: [20] <author> S. G. Kochan and P. H. Wood, </author> <title> editors. UNIX Shell Programming. </title> <publisher> Hayden Books, </publisher> <address> Indianapolis, </address> <year> 1988. </year>
Reference-contexts: The envelope idea was first introduced by the 7 ISTAR [26] system. Marvel envelopes are augmented Unix shell scripts <ref> [20] </ref>, invoking external tools and able to achieve tool integration without modification in a Black Box [15] fashion.
Reference: [21] <author> Dorab Patel and Scott D. Kalter. </author> <title> A UNIX Toolkit for Distributed Synchronous Collaborative Applications. </title> <journal> Computing Systems, </journal> <volume> 6(2) </volume> <pages> 105-133, </pages> <month> spring </month> <year> 1993. </year>
Reference-contexts: Currently, a few extensive tool-kits are available, that allow for cooperation: Patel and Kalter realized a Unix tool-kit called COeX <ref> [21] </ref>, providing primitives for building diverse collaborative applications in a high-level fashion, abstracting basic multi-user issues and implementation details. Another effort, specifically directed towards group editing and using a similar approach, is DistEdit [19], which exploits the communication mechanism available in another tool-kit, called ISIS [4].
Reference: [22] <author> Steven P. Reiss. </author> <title> Connecting Tools Using Message Passing in the Field Program Development Environment. </title> <journal> IEEE Software, </journal> <volume> 7(4) </volume> <pages> 57-66, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Here, the message server and the interfaces constitute the subsystem in charge of tool integration. This component is often referred to as a message bus. Such an approach is used, among others, by Field <ref> [22] </ref>, Conversation Builder [17] [7], and SoftBench [6] [13]. PCTE [27] [11] is one of the most representative examples of efforts directed to define a widely recognized and accepted public standard for building tools with better portability.
Reference: [23] <author> Wilhelm Schafer, </author> <title> editor. </title> <booktitle> 8th International Software Process Workshop: State of the Practice in Process Technology, </booktitle> <address> Wadern, Germany, </address> <month> March </month> <year> 1993. </year> <booktitle> IEEE Computer Society Press. [24] 2nd International Conference on the Software Process: Continuous Software Process Improvement, </booktitle> <address> Berlin, Germany, February 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The more generic is the set of software engineering activities to be supported, the more diverse are the necessary tools and the more flexible must be the integration principle. Therefore, in the field of Process Centered Environments (PCEs) <ref> [23] </ref> [24], which are a subclass of SDEs designed to define, enforce and support a variety of software processes using a built-in process modeling formalism, the need for such generality becomes clearly of utmost importance. The approaches to tool integration can be very different.
Reference: [25] <author> Ethan Solomita, James Kempf, and Dan Duchamp. xmove: </author> <title> A Pseudoserver for X Window Movement. </title> <type> Technical report, </type> <institution> SMLI, </institution> <year> 1993. </year> <month> 29 </month>
Reference-contexts: To accomplish this task, we plan to exploit an utility written for another project, called xmove <ref> [25] </ref>, which allows the GUI of a tool to be transfered across hosts and terminals.
Reference: [26] <author> Vic Stenning. </author> <title> An introduction to ISTAR. </title> <editor> In Ian Somerville, editor, </editor> <booktitle> Software Engineering Environments, volume 7 of IEEE Computing Series, </booktitle> <pages> pages 1-22. </pages> <publisher> Peter Peregrinus Ltd., </publisher> <address> London, </address> <year> 1986. </year>
Reference-contexts: Another widely explored approach, and probably the most flexible and general one, is tool wrapping or tool enveloping, in which the aim is the encapsulation in the environment of external tools with no changes to their code. The envelope idea was first introduced by the 7 ISTAR <ref> [26] </ref> system. Marvel envelopes are augmented Unix shell scripts [20], invoking external tools and able to achieve tool integration without modification in a Black Box [15] fashion.
Reference: [27] <author> Ian Thomas. </author> <title> PCTE Interfaces: Supporting Tools in Software-Engineering Environments. </title> <journal> IEEE Software, </journal> <volume> 6(6) </volume> <pages> 15-23, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: Here, the message server and the interfaces constitute the subsystem in charge of tool integration. This component is often referred to as a message bus. Such an approach is used, among others, by Field [22], Conversation Builder [17] [7], and SoftBench [6] [13]. PCTE <ref> [27] </ref> [11] is one of the most representative examples of efforts directed to define a widely recognized and accepted public standard for building tools with better portability.
Reference: [28] <author> Ian Thomas. </author> <title> Tool Integration in the Pact Environment. </title> <booktitle> In 11th International Conference on Software Engineering, </booktitle> <pages> pages 13-22, </pages> <address> Pittsburgh PA, May 1989. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The aim is to create a set of services and facilities, called a public tool interface, complete enough to support tool writers in very different situations and domains. The result would be a generation of homogeneous tools, widely reusable under the PCTE specifications. Many SDE prototypes and projects <ref> [28] </ref> [5] [12] in Europe as well as in the USA have already adopted the PCTE standard. However, such a standardized approach is only useful if the SDE developers can or choose to abide to the standard conventions and their unavoidable limitations.
Reference: [29] <author> Ian Thomas and Brian A. Nejmeh. </author> <title> Definitions of Tool Integration for Environments. </title> <journal> IEEE Software, </journal> <volume> 9(2) </volume> <pages> 29-35, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: 1 Introduction The issue of integrating a set of tools in a Software Development Environment (SDE) <ref> [29] </ref> is of great relevance to the degree of functionality that the SDE can provide, to its flexibility and power, to its ability to model a variety of operations and to assist users in many ways and in different situations.
Reference: [30] <author> A. I. Wasserman. </author> <title> Tool Integration in Software Engineering Environments. </title> <editor> In Fred Long, editor, </editor> <booktitle> Software Engineering Environments: International Workshop on Environments, volume 467 of Lecture Notes in Computer Science, </booktitle> <pages> pages 137-149, </pages> <address> Chinon, France, </address> <month> September </month> <year> 1989. </year> <note> Springer-Verlag. 30 </note>
Reference-contexts: Wasserman <ref> [30] </ref> for example identified five kinds of integration (platform, presentation, data, control, process). Moreover, Earl [10] proposed a well known reference model for Computer Aided Software Engineering Environments (CASEEs, another term for addressing SDEs), in which a lot of emphasis is on the issues of portability and interoperability of tools.
References-found: 29

