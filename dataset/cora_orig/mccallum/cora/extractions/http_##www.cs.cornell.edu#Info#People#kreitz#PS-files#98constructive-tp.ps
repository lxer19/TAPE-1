URL: http://www.cs.cornell.edu/Info/People/kreitz/PS-files/98constructive-tp.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/kreitz/Abstracts/98constructive-tp.html
Root-URL: 
Email: fkreitz,jeotten,steph,pientkag@cs.cornell.edu  
Title: Matrix-based Constructive Theorem Proving  
Author: Christoph Kreitz Jens Otten Stephan Schmitt Brigitte Pientka 
Address: Ithaca, NY 14853-7501, U.S.A.  
Affiliation: Department of Computer Science, Cornell-University  
Abstract: Bibel's connection method, originally developed for classical logic, has been extended to a variety of non-classical logics and used to control the creation of sequent proofs for interactive proof assistants. Matrix methods for intuitionistic logic also are the central inference engine for program synthesis and verification. We present a coherent account of matrix methods for constructive theorem proving and show how to extend them to inductive theorem proving by integrating rippling tech niques into the unification process.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> T. Altenkirch, V. Gaspes, B. Nordstrom, and B. von Sydow. </author> <title> A user's guide to ALF. </title> <institution> University of Goteborg, </institution> <year> 1994. </year>
Reference-contexts: Because of that there is no single automated proof procedure that can handle all the reasoning problems occurring during a program derivation or verification. Instead, one usually relies on proof assistants like NuPRL [9], Coq [10], Alf <ref> [1] </ref> etc., which are based on very expressive logical calculi and support interactive and tactic controlled proof and program development. Proof assistants, however, suffer from a very low degree of automation, since all their inferences must eventually be based on sequent or natural deduction rules.
Reference: 2. <author> J. Bates and R. Constable. </author> <title> Proofs as programs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(1) </volume> <pages> 113-136, </pages> <year> 1985. </year>
Reference-contexts: If, however, the formula is a part of a program derivation, one must be able to extract a piece of code from the proof, which according to the proofs-as-program paradigm <ref> [2] </ref>, is essentially the same as providing a constructive sequent proof. In order to integrate matrix methods into proof assistants it is therefore necessary to reconstruct a sequent proof from a given matrix proof.
Reference: 3. <author> W. Bibel. </author> <title> On matrices with connections. </title> <journal> Journal of the Association for Computing Machinery, </journal> <pages> 28(633-645), </pages> <year> 1981. </year>
Reference-contexts: It is therefore desirable to extend the reasoning power of proof assistants by integrating well-understood techniques from automated theorem proving. Matrix-based proof search procedures <ref> [3, 4] </ref> can be understood as compact representations of tableaux or sequent proof techniques. <p> In Section 5 we discuss the integration of rippling techniques into matrix methods. We conclude with a discussion of possible applications of our work in program synthesis and verification. 2 The Connection Method for Non-normal Form The connection method <ref> [3, 4] </ref> was originally designed as proof search method for formulae in clause normal form. But as normalization of formulae is often costly and as many non-classical logics do not have normal forms, it is necessary to develop matrix methods for formulae in non-normal form. <p> Matrix of the formula F 1 The matrix-characterizations of logical validity <ref> [3, 4, 25] </ref> depend on the concepts of paths, connections, and complementarity. A path through a formula F is a set of mutually ff-related atomic positions of its formula tree that describes a maximal horizontal path through the matrix representation of F .
Reference: 4. <author> W. Bibel. </author> <title> Automated Theorem Proving. </title> <publisher> Vieweg, </publisher> <year> 1987. </year>
Reference-contexts: It is therefore desirable to extend the reasoning power of proof assistants by integrating well-understood techniques from automated theorem proving. Matrix-based proof search procedures <ref> [3, 4] </ref> can be understood as compact representations of tableaux or sequent proof techniques. <p> In Section 5 we discuss the integration of rippling techniques into matrix methods. We conclude with a discussion of possible applications of our work in program synthesis and verification. 2 The Connection Method for Non-normal Form The connection method <ref> [3, 4] </ref> was originally designed as proof search method for formulae in clause normal form. But as normalization of formulae is often costly and as many non-classical logics do not have normal forms, it is necessary to develop matrix methods for formulae in non-normal form. <p> But as normalization of formulae is often costly and as many non-classical logics do not have normal forms, it is necessary to develop matrix methods for formulae in non-normal form. Bibel <ref> [4] </ref> already describes a non-clausal version of his connection method. The version that we will present here is more general. It is based on Wallen's matrix characterizations of logical validity [25] and can easily be adapted to a variety of logics. <p> Matrix of the formula F 1 The matrix-characterizations of logical validity <ref> [3, 4, 25] </ref> depend on the concepts of paths, connections, and complementarity. A path through a formula F is a set of mutually ff-related atomic positions of its formula tree that describes a maximal horizontal path through the matrix representation of F . <p> As paths through matrices correspond to branches of tableaux proofs and complementary connections to closing branches, a formula F is valid if every path through some F contains a complementary connection. Theorem 1 (Matrix Characterization for Classical Logic <ref> [4] </ref>). A formula F is (classically) valid iff there is a multiplicity , an admissible substitution and a set of -complementary connections such that every path through F contains a connection from this set. Example 1. In the matrix for F 1 in Figure 2 there are 18 paths. <p> Instead, a path checking al gorithm should be driven by the connections: once a complementary connection has been identified all paths containing this connection can be eliminated from 4 further consideration. This idea is similar to Bibel's connection method for clas-sical logic <ref> [4] </ref>, but our algorithm is more general and useful for proof search in various non-classical logics. The key notions of our path checking algorithm are a active paths, proven subgoals, and open subgoals. The active path P will specify those paths which are just being investigated for complementarity.
Reference: 5. <author> W. Bibel. </author> <title> Deduktion Automatisierung der Logik, </title> <journal> volume 6.2 of Handbuch der Informatik. R. </journal> <volume> Oldenbourg, </volume> <year> 1992. </year>
Reference-contexts: Example 5. Consider 9y :(x&lt;y 2 ) ^ x&lt;(y+1) 2 ` 9y :(x+1&lt;y 2 ) ^ x+1&lt;(y+1) 2 from example 4 (after unfolding the abbreviation ) and its matrix below. 3 This concept, which resembles the theory connections discussed in <ref> [5] </ref>, could also be extended to unary or n-ary connections w.r.t some theory T . 13 x&lt; 1 (y h +1) 2 x&lt; 0 y 2 x+1&lt; 1 Y 2 x+1&lt; 0 (Y c +1) 2 2 As connections should only run between atoms of the induction hypothesis and the corresponding
Reference: 6. <author> W. Bibel, D. Korn, C. Kreitz, S. Schmitt. </author> <title> Problem-oriented applications of automated theorem proving. </title> <editor> In J. Calmet & C. Limongelli, eds., </editor> <booktitle> Design and Implementation of Symbolic Computation Systems, </booktitle> <volume> LNCS 1126, </volume> <pages> pp. 1-21, </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: Furthermore, algorithms for converting matrix proofs into sequent proofs have been developed [23, 24], which makes it possible to view matrix proofs as plans for predicate logic proofs that can be executed within a proof assistant <ref> [6, 15] </ref>. Viewing matrix proofs as proof plans also suggests the integration of addi-tional proof planning techniques into the connection method.
Reference: 7. <author> W. Bibel, D. Korn, C. Kreitz, F. Kurucz, J. Otten, S. Schmitt, G. Stolpmann. </author> <title> A multi-level approach to program synthesis. </title> <editor> In N.E. Fuchs, </editor> <booktitle> ed.,Seventh International Workshop on Logic Program Synthesis and Transformation, LNAI 1463, </booktitle> <pages> pp. 1-25, </pages> <publisher> Springer, </publisher> <year> 1998. </year>
Reference-contexts: The search for a rippling sequence is based on the rippling-distance strategy introduced in <ref> [16, 7] </ref>. The resulting rippling proof together with the case analysis is translated back into a sequent proof that can be executed by the NuPRL proof development system [9].
Reference: 8. <author> A. Bundy, F. van Harmelen, A. Ireland, and A. Smaill. Rippling: </author> <title> a heuristic for guiding inductive proofs. </title> <journal> Artificial Intelligence, </journal> <year> 1992. </year>
Reference-contexts: Viewing matrix proofs as proof plans also suggests the integration of addi-tional proof planning techniques into the connection method. Rewrite techniques such as rippling <ref> [8] </ref>, for instance, have successfully been used as proof planners for inductive theorem proving but are relatively weak as far as predicate logic reasoning is concerned. <p> As formal reasoning about programs often requires inductive arguments the same methodology should be applied to integrate techniques from inductive theorem proving as well. Here, an annotated rewrite technique, called rippling <ref> [8] </ref>, has been used successfully to plan the reasoning steps from the induction hypothesis to the induction conclusion. This technique, however, shows certain weaknesses when dealing with program synthesis through inductive proofs, since in this case existentially quantified variables need to be instantiated.
Reference: 9. <author> R. Constable, S. Allen, M. Bromley, et. al. </author> <title> Implementing Mathematics with the NuPRL proof development system. </title> <publisher> Prentice Hall, </publisher> <year> 1986. </year> <month> 15 </month>
Reference-contexts: Because of that there is no single automated proof procedure that can handle all the reasoning problems occurring during a program derivation or verification. Instead, one usually relies on proof assistants like NuPRL <ref> [9] </ref>, Coq [10], Alf [1] etc., which are based on very expressive logical calculi and support interactive and tactic controlled proof and program development. Proof assistants, however, suffer from a very low degree of automation, since all their inferences must eventually be based on sequent or natural deduction rules. <p> Although in principle it would be possible to embed the connection method as trusted external refiner , a technique supported by the upcoming release 5 of the NuPRL proof development system <ref> [9] </ref>, a matrix proof can only be used to establish the truth of a given formula. <p> The search for a rippling sequence is based on the rippling-distance strategy introduced in [16, 7]. The resulting rippling proof together with the case analysis is translated back into a sequent proof that can be executed by the NuPRL proof development system <ref> [9] </ref>. Since the only weakness of the above approach lies in the sequent-based logical proof search, it suggest an integration of the above techniques into a matrix based theorem prover.
Reference: 10. <author> G. Dowek et. al. </author> <title> The Coq proof assistant user's guide. </title> <institution> Institut National de Recherche en Informatique et en Automatique, </institution> <type> Report RR 134, </type> <year> 1991. </year>
Reference-contexts: Because of that there is no single automated proof procedure that can handle all the reasoning problems occurring during a program derivation or verification. Instead, one usually relies on proof assistants like NuPRL [9], Coq <ref> [10] </ref>, Alf [1] etc., which are based on very expressive logical calculi and support interactive and tactic controlled proof and program development. Proof assistants, however, suffer from a very low degree of automation, since all their inferences must eventually be based on sequent or natural deduction rules.
Reference: 11. <author> C. Kreitz, M. Hayden, and J. Hickey. </author> <title> A proof environment for the development of group communication systems. </title> <editor> In C. & H. Kirchner, ed., </editor> <booktitle> 15 th International Conference on Automated Deduction, </booktitle> <publisher> LNAI, Springer, </publisher> <year> 1998. </year>
Reference-contexts: We also intend to embed known synthesis, verification, and optimization techniques into proof assistants by using the same methodology. Our ultimate goal is to combine our experience with reasoning about group communication systems <ref> [11] </ref> and the above techniques into a highly automated proof environment for the development of safety-critical systems.
Reference: 12. <author> C. </author> <title> Kreitz. Formal mathematics for verifiably correct program synthesis. </title> <journal> Journal of the IGPL, </journal> <volume> 4(1) </volume> <pages> 75-94, </pages> <year> 1996. </year>
Reference-contexts: Obviously, this concept is not restricted to first-order or inductive theorem proving. In a similar way we can also integrate proof procedures for other important logics, such as modal logics [20] or linear logic [14], or higher-level strategies for program synthesis <ref> [12, 13] </ref>. In many of these cases we can rely on already known successful techniques that were originally implemented independently and view their results as plans for the actual derivation.
Reference: 13. <author> C. </author> <title> Kreitz. Program synthesis. </title> <editor> In W. Bibel and P. Schmitt, </editor> <title> eds.,Automated Deduction A Basis for Applications, </title> <booktitle> chapter III.2.5, </booktitle> <pages> pp. 105-134, </pages> <publisher> Kluwer, </publisher> <year> 1998. </year>
Reference-contexts: Obviously, this concept is not restricted to first-order or inductive theorem proving. In a similar way we can also integrate proof procedures for other important logics, such as modal logics [20] or linear logic [14], or higher-level strategies for program synthesis <ref> [12, 13] </ref>. In many of these cases we can rely on already known successful techniques that were originally implemented independently and view their results as plans for the actual derivation.
Reference: 14. <editor> C. Kreitz, H. Mantel, J. Otten, and S. Schmitt. </editor> <title> Connection-Based Proof Construction in Linear Logic. </title> <editor> In W. McCune, ed., </editor> <booktitle> 14 th Conference on Automated Deduction, LNAI 1249, </booktitle> <pages> pp. 207-221. </pages> <publisher> Springer, </publisher> <year> 1997. </year>
Reference-contexts: Although originally developed for classical logic, the connection method has recently been extended to a variety of non-classical logics such as intuitionistic logic [18], modal logics [20], and fragments of linear logic <ref> [14, 17] </ref>. Furthermore, algorithms for converting matrix proofs into sequent proofs have been developed [23, 24], which makes it possible to view matrix proofs as plans for predicate logic proofs that can be executed within a proof assistant [6, 15]. <p> Obviously, this concept is not restricted to first-order or inductive theorem proving. In a similar way we can also integrate proof procedures for other important logics, such as modal logics [20] or linear logic <ref> [14] </ref>, or higher-level strategies for program synthesis [12, 13]. In many of these cases we can rely on already known successful techniques that were originally implemented independently and view their results as plans for the actual derivation.
Reference: 15. <author> C. Kreitz, J. Otten, and S. Schmitt. </author> <title> Guiding Program Development Systems by a Connection Based Proof Strategy. </title> <editor> In M. Proietti, ed., </editor> <booktitle> Fifth International Workshop on Logic Program Synthesis and Transformation, </booktitle> <volume> LNCS 1048, </volume> <pages> pp. 137-151. </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: Furthermore, algorithms for converting matrix proofs into sequent proofs have been developed [23, 24], which makes it possible to view matrix proofs as plans for predicate logic proofs that can be executed within a proof assistant <ref> [6, 15] </ref>. Viewing matrix proofs as proof plans also suggests the integration of addi-tional proof planning techniques into the connection method.
Reference: 16. <editor> F. Kurucz. Realisierung verschiedender Induktionsstrategien basierend auf dem Rippling-Kalkul. </editor> <address> Diplomarbeit, </address> <institution> Technische Hochschule Darmstadt, </institution> <year> 1997. </year>
Reference-contexts: The search for a rippling sequence is based on the rippling-distance strategy introduced in <ref> [16, 7] </ref>. The resulting rippling proof together with the case analysis is translated back into a sequent proof that can be executed by the NuPRL proof development system [9].
Reference: 17. <author> H. Mantel and C. </author> <title> Kreitz. A matrix characterization for MELL. </title> <booktitle> In 6 th European Workshop on Logics in AI (JELIA-98), </booktitle> <publisher> LNAI, Springer, </publisher> <year> 1998. </year>
Reference-contexts: Although originally developed for classical logic, the connection method has recently been extended to a variety of non-classical logics such as intuitionistic logic [18], modal logics [20], and fragments of linear logic <ref> [14, 17] </ref>. Furthermore, algorithms for converting matrix proofs into sequent proofs have been developed [23, 24], which makes it possible to view matrix proofs as plans for predicate logic proofs that can be executed within a proof assistant [6, 15].
Reference: 18. <author> J. Otten and C. </author> <title> Kreitz. A connection based proof method for intuitionistic logic. </title> <editor> In P. Baumgartner, R. Hahnle & J. Posegga, eds., </editor> <title> 4 th Workshop on Theorem Proving with Analytic Tableaux and Related Methods, </title> <publisher> LNAI 918, </publisher> <pages> pp. 122-137. </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: Although originally developed for classical logic, the connection method has recently been extended to a variety of non-classical logics such as intuitionistic logic <ref> [18] </ref>, modal logics [20], and fragments of linear logic [14, 17]. Furthermore, algorithms for converting matrix proofs into sequent proofs have been developed [23, 24], which makes it possible to view matrix proofs as plans for predicate logic proofs that can be executed within a proof assistant [6, 15].
Reference: 19. <author> J. Otten and C. </author> <title> Kreitz. T-String-Unification: Unifying Prefixes in Non-Classical Proof Methods. </title> <editor> In U. Moscato, ed., </editor> <title> 5 th Workshop on Theorem Proving with Analytic Tableaux and Related Methods, </title> <publisher> LNAI 1071, </publisher> <pages> pp. 244-260. </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: It returns 1 := ( Q 1 ; J 1 ) if 1 is J-admissible and fails otherwise or if either of the two unifications fails. To compute the intuitionistic substitution we apply a specialized string unification algorithm <ref> [19] </ref>. String unification in general is quite complicated but prefixes are a very restricted class of strings. Prefixes are strings without duplicates. <p> Our unification algorithm is parameterized by a set of transformation rules in order to be adaptable to a variety of logics. For intuitionistic prefix unification the peculiarities of the logic are expressed by a set of 10 transformation rules (see <ref> [19] </ref>). These rules enable us to compute a single most general unifier in linear time.
Reference: 20. <author> J. Otten and C. </author> <title> Kreitz. A Uniform Proof Procedure for Classical and Non-classical Logics. </title> <editor> In G. Gorz & S. Holldobler, eds., KI-96: </editor> <booktitle> Advances in Artificial Intelligence, LNAI 1137, </booktitle> <pages> pp. 307-319. </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: Although originally developed for classical logic, the connection method has recently been extended to a variety of non-classical logics such as intuitionistic logic [18], modal logics <ref> [20] </ref>, and fragments of linear logic [14, 17]. Furthermore, algorithms for converting matrix proofs into sequent proofs have been developed [23, 24], which makes it possible to view matrix proofs as plans for predicate logic proofs that can be executed within a proof assistant [6, 15]. <p> Obviously, this concept is not restricted to first-order or inductive theorem proving. In a similar way we can also integrate proof procedures for other important logics, such as modal logics <ref> [20] </ref> or linear logic [14], or higher-level strategies for program synthesis [12, 13]. In many of these cases we can rely on already known successful techniques that were originally implemented independently and view their results as plans for the actual derivation.
Reference: 21. <author> B. Pientka and C. </author> <title> Kreitz. Instantiation of existentially quantified variables in inductive specification proofs. </title> <booktitle> In 4 th International Conference on Artificial Intelligence and Symbolic Computation, </booktitle> <publisher> LNAI, Springer , 1998. </publisher>
Reference-contexts: Rewrite techniques such as rippling [8], for instance, have successfully been used as proof planners for inductive theorem proving but are relatively weak as far as predicate logic reasoning is concerned. A recent extension <ref> [21] </ref> has demonstrated that rippling techniques and logical proof search methods can be combined and used successfully for constructive theorem proving and the synthesis of inductive programs. <p> It is therefore necessary to combine logical proof search techniques with controlled rewrite techniques such as rippling in order to improve the degree of automation when reasoning inductively about program specifications. A first step in this direction <ref> [21] </ref> has shown that a combination rippling, reverse rippling, and simple first-order techniques can be used to generate the case analysis and to solve synthesis problems like the above automatically. <p> Essentially this will lead to an even more compact matrix characterization of validity and thus to further reductions of the search space in inductive theorem proving. In the following we will outline the fundamental steps towards a combination of rippling and matrix-based theorem proving. The techniques described in <ref> [21] </ref> enable us to generate conditional substitutions as a solution for a given synthesis problem. The conditions generated in the process will lead to a case analysis in the first step of a top-down sequent proof while each of the resulting subgoals can be proven by "conventional" proof techniques. <p> Since x and y h are constants neither of the two connections can be unified and we have to use the rippling techniques described in <ref> [21] </ref> to show their complementarity. In the first case 1 this eventually leads to the substitution Q 1 =fY c ny h +1g.
Reference: 22. <author> S. Schmitt and C. </author> <title> Kreitz. Deleting redundancy in proof reconstruction. </title> <editor> In H. de Swaart, ed., </editor> <booktitle> International Conference TABLEAUX-98, </booktitle> <pages> LNAI 1397 pp. 262-276. </pages> <publisher> Springer, </publisher> <year> 1998. </year>
Reference-contexts: The technical details of our conversion procedure and the efficient elimination of redundancies after fi-splits are quite subtle. An extensive discussion and algorithmic description can be found in <ref> [24, 22] </ref>. 5 Integrating Induction Techniques The procedure for converting matrix proofs into sequent proofs suggests viewing the connection method as a proof planner for first-order logic that can be used to extend the reasoning capabilities of proof assistants by fully automated proof procedures.
Reference: 23. <author> S. Schmitt and C. </author> <title> Kreitz. On transforming intuitionistic matrix proofs into standard-sequent proofs. </title> <editor> In P. Baumgartner, R. Hahnle & J. Posegga, eds., </editor> <title> 4 th Workshop on Theorem Proving with Analytic Tableaux and Related Methods, </title> <publisher> LNAI 918, </publisher> <pages> pp. 106-121. </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: Although originally developed for classical logic, the connection method has recently been extended to a variety of non-classical logics such as intuitionistic logic [18], modal logics [20], and fragments of linear logic [14, 17]. Furthermore, algorithms for converting matrix proofs into sequent proofs have been developed <ref> [23, 24] </ref>, which makes it possible to view matrix proofs as plans for predicate logic proofs that can be executed within a proof assistant [6, 15]. Viewing matrix proofs as proof plans also suggests the integration of addi-tional proof planning techniques into the connection method.
Reference: 24. <author> S. Schmitt and C. </author> <title> Kreitz. Converting non-classical matrix proofs into sequent-style systems. </title> <editor> In M. McRobbie & J. Slaney, eds, </editor> <booktitle> 13 th Conference on Automated Deduction, LNAI 1104, </booktitle> <pages> pp. 418-432. </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: Although originally developed for classical logic, the connection method has recently been extended to a variety of non-classical logics such as intuitionistic logic [18], modal logics [20], and fragments of linear logic [14, 17]. Furthermore, algorithms for converting matrix proofs into sequent proofs have been developed <ref> [23, 24] </ref>, which makes it possible to view matrix proofs as plans for predicate logic proofs that can be executed within a proof assistant [6, 15]. Viewing matrix proofs as proof plans also suggests the integration of addi-tional proof planning techniques into the connection method. <p> The technical details of our conversion procedure and the efficient elimination of redundancies after fi-splits are quite subtle. An extensive discussion and algorithmic description can be found in <ref> [24, 22] </ref>. 5 Integrating Induction Techniques The procedure for converting matrix proofs into sequent proofs suggests viewing the connection method as a proof planner for first-order logic that can be used to extend the reasoning capabilities of proof assistants by fully automated proof procedures.
Reference: 25. <author> L. Wallen. </author> <title> Automated deduction in nonclassical logic. </title> <publisher> MIT Press, </publisher> <year> 1990. </year> <month> 16 </month>
Reference-contexts: Bibel [4] already describes a non-clausal version of his connection method. The version that we will present here is more general. It is based on Wallen's matrix characterizations of logical validity <ref> [25] </ref> and can easily be adapted to a variety of logics. Since matrix proofs can be viewed as compact representations of analytic tableaux, many notions from tableaux calculi carry over to matrix methods. <p> Matrix of the formula F 1 The matrix-characterizations of logical validity <ref> [3, 4, 25] </ref> depend on the concepts of paths, connections, and complementarity. A path through a formula F is a set of mutually ff-related atomic positions of its formula tree that describes a maximal horizontal path through the matrix representation of F . <p> An intuitionistic multiplicity J :!IN encodes the number of distinct instances of -subformulae that need to be considered during the proof search. It can be combined with a quantifier multiplicity Q and leads to an indexed formula F . Theorem 4 (Matrix Characterization for Intuitionistic Logic <ref> [25] </ref>). A formula F is intuitionistically valid iff there is a multiplicity := ( Q ; J ), a J-admissible combined substitution = ( Q ; J ), and a set of -complementary connections such that every path through F contains a connection from this set. Example 3.
References-found: 25

