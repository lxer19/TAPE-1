URL: http://www.swi.psy.uva.nl/usr/remco/postscripts/Straatman:97a.ps.gz
Refering-URL: http://www.swi.psy.uva.nl/usr/remco/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: remco@swi.psy.uva.nl  
Title: KIDS for KADS  
Author: Remco Straatman 
Address: Amsterdam, Roetersstraat 15, 1018 WB Amsterdam, NL  
Affiliation: SWI, University of  
Abstract: In order to give more support in the construction, adaptation, and use of problem-solving methods (PSM) an explicit representation of the relevant aspects of a PSM is necessary. In [4] we propose such a framework, based on the kads [5] methodology. kids [7], a transformational software development system, is based on a representation similar to our proposed framework. In this paper we investigate to what extent kids can be used as a basis for representations and tools for PSM development.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> M. Aben. </author> <title> Formal Methods in Knowledge Engineering. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <month> februari </month> <year> 1995. </year>
Reference-contexts: We described how this framework could support verification, construction and use of PSMs. One of the things missing in this work is a representation of all the aspects of the framework and their relations. Current attempts at describing these concepts and/or parts of the construction process, such as <ref> [10, 1, 9] </ref> are either too informal or describe only a subset of the concepts needed. In this paper we focus on kids, a transformational programming system based on a formalism that incorporates a number of the concepts (specifically goals and assumptions) missing in the representations mentioned above.
Reference: 2. <author> V. R. </author> <title> Benjamins. Problem Solving Methods for Diagnosis. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <address> Amsterdam, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: In this case, we chose to specify the mapping of domain terms to task terms as functions in a mapping theory. We then used kids to construct the method (normally we would select the appropriate problem solving method for this task from a library (e.g. [3], <ref> [2] </ref>)). At first we tried to apply the kids tactics to the function representing the top level task, assignment. However, none of the kids tactics were able to successfully derive a program for the assignment task.
Reference: 3. <author> J. A. Breuker and W. Van de Velde, </author> <title> editors. The CommonKADS Library for Expertise Modelling. </title> <publisher> IOS Press, </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1994. </year>
Reference-contexts: To make kids applicable on this we did the following: Identify the task the queens problem is an instance of. The N-queens problem can be classified as an assignment task, as described in <ref> [3] </ref>, chapter 5. We formalized the assignment task in the kids language, regroup. Describe the Queens domain. The domain knowledge is equivalent to the description given in [7]. <p> In this case, we chose to specify the mapping of domain terms to task terms as functions in a mapping theory. We then used kids to construct the method (normally we would select the appropriate problem solving method for this task from a library (e.g. <ref> [3] </ref>, [2])). At first we tried to apply the kids tactics to the function representing the top level task, assignment. However, none of the kids tactics were able to successfully derive a program for the assignment task.
Reference: 4. <author> D. Fensel and R. Straatman. </author> <title> The essence of problem-solving methods: Making assumptions for efficiency reasons. </title> <editor> In Nigel Shadbolt, Kieron O'Hara, and Guus Schreiber, editors, </editor> <booktitle> proceedings of the 9th European Knowledge Acquisition Workshop, </booktitle> <publisher> EKAW-96 Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: 1 Introduction The development and use of problem-solving methods has been extensively studied in the field of knowledge engineering. In <ref> [4] </ref> we proposed a formal framework for representing PSMs. We described how this framework could support verification, construction and use of PSMs. One of the things missing in this work is a representation of all the aspects of the framework and their relations. <p> According to us, these processes can be greatly improved by making explicit the relevant parts of a PSM. Fensel and Straatman <ref> [4] </ref> present a representation framework for this purpose. Our framework does not drastically deviate from earlier work on PSMs, but rather clarifies the relations that hold between the ingredients of a PSM and presents some required extensions.
Reference: 5. <editor> A. Th. Schreiber, B. J. Wielinga, and J. A. Breuker, editors. KADS: </editor> <title> A Principled Approach to Knowledge-Based System Development Academic Press, </title> <address> London, </address> <year> 1993. </year>
Reference: 6. <author> D. R. Smith. </author> <title> Structure and design of global search algorithms. </title> <type> Technical Report KES.U.87.12, </type> <institution> Kestrel Institute, Palo Alto, California, </institution> <month> November </month> <year> 1987. </year>
Reference: 7. <author> D. R. Smith. Kids: </author> <title> A semi-automatic program development system. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> September </month> <year> 1990. </year>
Reference-contexts: The four parts of a PSM and their relationships provide strong handles for the automation of the development and adaptation of PSMs, however currently no complete formalization nor tools based on the framework are available. 3 KIDS kids <ref> [7] </ref> is a tool for the semi-automatic construction of correct and efficient programs from formal problem specifications. kids has been used to generate efficient programs for complex, real-world tasks. <p> Proving this provides a substitution for parts of the methods theory that were parameterized. With this substitution kids can construct a version of the method specific to the user's problem. In <ref> [7] </ref> the application of the global search tactic to the N-Queens problem is described. For this example, [7] states that the original N-Queens specification cannot be compiled, the unoptimized global search program results in an implementation that spends O (k 2 ) time per node, and takes 60 minutes to generate <p> Proving this provides a substitution for parts of the methods theory that were parameterized. With this substitution kids can construct a version of the method specific to the user's problem. In <ref> [7] </ref> the application of the global search tactic to the N-Queens problem is described. For this example, [7] states that the original N-Queens specification cannot be compiled, the unoptimized global search program results in an implementation that spends O (k 2 ) time per node, and takes 60 minutes to generate all 92 solutions to the 8-Queens problem. <p> We used the N-Queens problem given in <ref> [7] </ref> as the domain for this specification. Due to a lack of space we cannot give examples of the specifications here, see [8] for details. To make kids applicable on this we did the following: Identify the task the queens problem is an instance of. <p> The N-queens problem can be classified as an assignment task, as described in [3], chapter 5. We formalized the assignment task in the kids language, regroup. Describe the Queens domain. The domain knowledge is equivalent to the description given in <ref> [7] </ref>. However now the domain knowledge is more clearly separated from the task definition, whereas in the original formulation the domain formulation was strongly influenced by the task definition. Link the task and domain. <p> Unfortunately, the kids system is not supported by its authors, so, apart from the documentation, we had no sources to point us into any direction. Therefore, we cannot give a conclusive cause for this failure. Since we based the example on the example described in <ref> [7] </ref> it should lie within the range of what can be solved by kids.
Reference: 8. <author> R. Straatman. </author> <title> KIDS for KADS. </title> <type> Technical report, </type> <address> SWI, UvA, Amsterdam, </address> <year> 1996. </year> <note> http://www.swi.psy.uva.nl/usr/remco/postscripts/Straatman:96a.ps.gz </note>
Reference-contexts: Next, we describe the kids system. We describe how kids relates to our framework and how it could be used for constructing PSMs. We then report an example of this usage, and discuss the problems that arose. Due to space constraints, our description will be brief, see <ref> [8] </ref> for more details. ? The investigations were supported by the Netherlands Computer Science Research Foundation with financial support from the Netherlands Organization for Scientific Research (NWO). 2 Automatic construction and adaptation of PSMs Our current research interest is automatic support for construction and adaptation of PSMs. <p> We used the N-Queens problem given in [7] as the domain for this specification. Due to a lack of space we cannot give examples of the specifications here, see <ref> [8] </ref> for details. To make kids applicable on this we did the following: Identify the task the queens problem is an instance of. The N-queens problem can be classified as an assignment task, as described in [3], chapter 5. We formalized the assignment task in the kids language, regroup.
Reference: 9. <author> F. van Harmelen and M. Aben. </author> <title> Structure preserving specification languages for knowledge-based systems. </title> <journal> International Journal of Human Computer Studies, </journal> <year> 1996. </year>
Reference-contexts: We described how this framework could support verification, construction and use of PSMs. One of the things missing in this work is a representation of all the aspects of the framework and their relations. Current attempts at describing these concepts and/or parts of the construction process, such as <ref> [10, 1, 9] </ref> are either too informal or describe only a subset of the concepts needed. In this paper we focus on kids, a transformational programming system based on a formalism that incorporates a number of the concepts (specifically goals and assumptions) missing in the representations mentioned above.
Reference: 10. <author> B. J. Wielinga, J. M. Akkermans, and A. Th. Schreiber. </author> <title> A formal analysis of parametric design problem solving. </title> <editor> In B. R. Gaines and M. A. Musen, editors, </editor> <booktitle> Proceedings of the 8th Banff KAW, </booktitle> <address> Alberta, Canada, </address> <year> 1995. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: We described how this framework could support verification, construction and use of PSMs. One of the things missing in this work is a representation of all the aspects of the framework and their relations. Current attempts at describing these concepts and/or parts of the construction process, such as <ref> [10, 1, 9] </ref> are either too informal or describe only a subset of the concepts needed. In this paper we focus on kids, a transformational programming system based on a formalism that incorporates a number of the concepts (specifically goals and assumptions) missing in the representations mentioned above.
References-found: 10

