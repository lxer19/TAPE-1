URL: http://www.cs.cornell.edu/Info/People/basu/papers/wdag96.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/basu/papers.html
Root-URL: http://www.cs.brown.edu/
Title: Simulating Reliable Links with Unreliable Links in the Presence of Process Crashes  
Author: Anindya Basu Bernadette Charron-Bost Sam Toueg 
Affiliation: 1 Department of Computer Science, Upson Hall, Cornell University, USA. 2 Laboratoire d'Informatique LIX, Ecole Polytechnique, FRANCE.  
Abstract-found: 0
Intro-found: 1
Reference: [AAF + 94] <author> Y. Afek, H. Attiya, A. D. Fekete, M. Fischer, N. Lynch, Y. Mansour, D. Wang, and L. Zuck. </author> <title> Reliable communication over unreliable channels. </title> <journal> Journal of the ACM, </journal> <volume> 41(6) </volume> <pages> 1267-1297, </pages> <year> 1994. </year>
Reference-contexts: We do this by showing that given a system with fair lossy links and a majority of correct processes, one can simulate a system with reliable links. The problem of tolerating crash and/or link failures has been extensively studied (e.g., <ref> [AAF + 94, AE86, AGH90, BSW69, FLMS93, GA88, WZ89] </ref>). Several papers focus on a single link and on how to mask failures of that link [AAF + 94, BSW69]. <p> The problem of tolerating crash and/or link failures has been extensively studied (e.g., [AAF + 94, AE86, AGH90, BSW69, FLMS93, GA88, WZ89]). Several papers focus on a single link and on how to mask failures of that link <ref> [AAF + 94, BSW69] </ref>. In contrast, we study lossy links in the context of an entire system: we show that the effect of lossy links depends on the proportion of faulty processes in the system. Other works have also studied tolerating lossy links in the context of an entire network.
Reference: [ABND + 90] <author> H. Attiya, A. Bar-Noy, D. Dolev, D. Peleg, and R. Reischuk. </author> <title> Renaming in an asynchronous environment. </title> <journal> Journal of the ACM, </journal> <volume> 37(3) </volume> <pages> 524-548, </pages> <year> 1990. </year>
Reference-contexts: The set of problems solvable in asynchronous systems with process crashes include Reliable, FIFO, and Causal Broadcast, and their uniform counterparts [Bir85, HT94], as well as Approximate Agreement [DLP + 86], Renaming <ref> [ABND + 90] </ref>, and k-set Agreement [Cha90]. The question is whether such problems remain solvable (and if so, how) if we add link failures. We consider two models of lossy links: eventually reliable and fair lossy.
Reference: [AE86] <author> B. Awerbuch and S. </author> <title> Even. Reliable broadcast protocols in unreliable networks. Networks: </title> <journal> An International Journal, </journal> <volume> 16, </volume> <year> 1986. </year>
Reference-contexts: We do this by showing that given a system with fair lossy links and a majority of correct processes, one can simulate a system with reliable links. The problem of tolerating crash and/or link failures has been extensively studied (e.g., <ref> [AAF + 94, AE86, AGH90, BSW69, FLMS93, GA88, WZ89] </ref>). Several papers focus on a single link and on how to mask failures of that link [AAF + 94, BSW69]. <p> Other works have also studied tolerating lossy links in the context of an entire network. However, some of them do not consider process crashes [GA88], while others assume that crashed processes recover [AGH90], and yet others focus on the solution of specific problems such as Broadcast <ref> [AE86] </ref>. In contrast, our results assume permanent process crashes, and more importantly, we study the effect of link failures on the solvability of problems in general. This approach stresses the importance of the notion of correct-restricted problems. The paper is organized as follows.
Reference: [AGH90] <author> B. Awerbuch, O. Goldreich, and A. Herzberg. </author> <title> A quantitative approach to dynamic networks. </title> <booktitle> In Proceedings of the 9th ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 189-204, </pages> <address> Quebec City, Quebec, Canada, </address> <year> 1990. </year>
Reference-contexts: We do this by showing that given a system with fair lossy links and a majority of correct processes, one can simulate a system with reliable links. The problem of tolerating crash and/or link failures has been extensively studied (e.g., <ref> [AAF + 94, AE86, AGH90, BSW69, FLMS93, GA88, WZ89] </ref>). Several papers focus on a single link and on how to mask failures of that link [AAF + 94, BSW69]. <p> Other works have also studied tolerating lossy links in the context of an entire network. However, some of them do not consider process crashes [GA88], while others assume that crashed processes recover <ref> [AGH90] </ref>, and yet others focus on the solution of specific problems such as Broadcast [AE86]. In contrast, our results assume permanent process crashes, and more importantly, we study the effect of link failures on the solvability of problems in general.
Reference: [BCBT96] <author> A. Basu, B. Charron-Bost, and S. Toueg. </author> <title> Simulating reliable links with unreliable links in the presence of process crashes. </title> <type> Technical report, </type> <institution> Cornell University, Dept. of Computer Science, Cornell University, </institution> <address> Ithaca, NY 14853, </address> <year> 1996. </year>
Reference-contexts: Finally, in Section 6 we state our results more formally using a refinement of the model and the notion of translation. This version of the paper does not contain detailed proofs; these are given in <ref> [BCBT96] </ref>. 4 The complement of this class of problems includes all problems with uniform specifications [NT90]. 2 Model We consider asynchronous distributed systems where processes communicate by message passing via a completely connected network, and there are no bounds on relative process speeds or message transmission times. 2.1 Variables and States <p> A precise description of the mapping from P to P 0 that defines the translation T , together with a proof of correctness, is given in <ref> [BCBT96] </ref>. We can now state our main result: Theorem 14. Let be any specification that is correct-restricted, and closed under stuttering and augmentation. Let T be the translation referred to above. <p> The formal description of the mapping from P to P 0 and its correctness proof is similar to that for the translation W R n;t ! F L and is also given in <ref> [BCBT96] </ref>. Theorem 15. Let be any specification closed under stuttering and augmentation. Let T be the translation referred to above.
Reference: [Bir85] <author> K. Birman. </author> <title> Replication and fault-tolerance in the ISIS system. </title> <booktitle> In Proceedings of the 10th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 79-86, </pages> <address> Orcas Island, WA USA, </address> <year> 1985. </year>
Reference-contexts: In this paper, we focus on asynchronous systems (results concerning synchronous systems will be described in a companion paper). The set of problems solvable in asynchronous systems with process crashes include Reliable, FIFO, and Causal Broadcast, and their uniform counterparts <ref> [Bir85, HT94] </ref>, as well as Approximate Agreement [DLP + 86], Renaming [ABND + 90], and k-set Agreement [Cha90]. The question is whether such problems remain solvable (and if so, how) if we add link failures. We consider two models of lossy links: eventually reliable and fair lossy.
Reference: [BN92] <author> R. Bazzi and G. Neiger. </author> <title> Simulating crash failures with many faulty processors. </title> <editor> In A. Segal and S. Zaks, editors, </editor> <booktitle> Proceedings of the Sixth International Workshop on Distributed Algorithms, volume 647 of Lecture Notes on Computer Science, </booktitle> <pages> pages 166-184. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Our second result characterizes a large class of problems that remain solvable even with fair lossy links. Informally, this class consists of all the problems whose specifications refer only to the behavior of correct processes (i.e., processes that do not crash) these are called correct-restricted [Gop92] or failure-insensitive <ref> [BN92] </ref> problems. 4 This class of problems includes Reliable, FIFO, and Causal Broadcast, and correct-restricted versions of Approximate Agreement, Renaming, and k-set Agreement. <p> Henceforth, we consider only such specifications. 2.10 Correct-Restricted Specifications Intuitively, a specification is correct-restricted if it refers only to the states of correct processes (those with infinite traces) <ref> [Gop92, BN92] </ref>. Formally, let H and H 0 be any two traces in Vec (S) with the same dimension, say k.
Reference: [BSW69] <author> K. A. Bartlett, R. A. Scantlebury, and P. T. Wilkinson. </author> <title> A note on reliable full-duplex transmission over half-duplex links. </title> <journal> Comm. of the ACM, </journal> <volume> 12(5) </volume> <pages> 260-261, </pages> <year> 1969. </year>
Reference-contexts: We do this by showing that given a system with fair lossy links and a majority of correct processes, one can simulate a system with reliable links. The problem of tolerating crash and/or link failures has been extensively studied (e.g., <ref> [AAF + 94, AE86, AGH90, BSW69, FLMS93, GA88, WZ89] </ref>). Several papers focus on a single link and on how to mask failures of that link [AAF + 94, BSW69]. <p> The problem of tolerating crash and/or link failures has been extensively studied (e.g., [AAF + 94, AE86, AGH90, BSW69, FLMS93, GA88, WZ89]). Several papers focus on a single link and on how to mask failures of that link <ref> [AAF + 94, BSW69] </ref>. In contrast, we study lossy links in the context of an entire system: we show that the effect of lossy links depends on the proportion of faulty processes in the system. Other works have also studied tolerating lossy links in the context of an entire network.
Reference: [Cha90] <author> S. Chaudhuri. </author> <title> Agreement is harder than consensus: Set consensus problems in totally asynchronous systems. </title> <booktitle> In Proceedings of the 9th ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 311-324, </pages> <address> Quebec City, Quebec, Canada, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: The set of problems solvable in asynchronous systems with process crashes include Reliable, FIFO, and Causal Broadcast, and their uniform counterparts [Bir85, HT94], as well as Approximate Agreement [DLP + 86], Renaming [ABND + 90], and k-set Agreement <ref> [Cha90] </ref>. The question is whether such problems remain solvable (and if so, how) if we add link failures. We consider two models of lossy links: eventually reliable and fair lossy.
Reference: [DLP + 86] <author> D. Dolev, N. A. Lynch, S. S. Pinter, E. W. Stark, and W. E. Weihl. </author> <title> Reaching approximate agreement in the presence of faults. </title> <journal> Journal of the ACM, </journal> <volume> 33(3) </volume> <pages> 499-516, </pages> <month> July </month> <year> 1986. </year>
Reference-contexts: In this paper, we focus on asynchronous systems (results concerning synchronous systems will be described in a companion paper). The set of problems solvable in asynchronous systems with process crashes include Reliable, FIFO, and Causal Broadcast, and their uniform counterparts [Bir85, HT94], as well as Approximate Agreement <ref> [DLP + 86] </ref>, Renaming [ABND + 90], and k-set Agreement [Cha90]. The question is whether such problems remain solvable (and if so, how) if we add link failures. We consider two models of lossy links: eventually reliable and fair lossy.
Reference: [FLMS93] <author> A. D. Fekete, N. Lynch, Y. Mansour, and J. Spinelli. </author> <title> The impossibility of implementing reliable communication in the face of crashes. </title> <journal> Journal of the ACM, </journal> <volume> 40(5) </volume> <pages> 1087-1107, </pages> <year> 1993. </year>
Reference-contexts: We do this by showing that given a system with fair lossy links and a majority of correct processes, one can simulate a system with reliable links. The problem of tolerating crash and/or link failures has been extensively studied (e.g., <ref> [AAF + 94, AE86, AGH90, BSW69, FLMS93, GA88, WZ89] </ref>). Several papers focus on a single link and on how to mask failures of that link [AAF + 94, BSW69].
Reference: [GA88] <author> E. Gafni and Y. Afek. </author> <title> End-to-end communication in unreliable networks. </title> <booktitle> In Proceedings of the Seventh ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 131-148, </pages> <address> Toronto, Ontario, Canada, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: We do this by showing that given a system with fair lossy links and a majority of correct processes, one can simulate a system with reliable links. The problem of tolerating crash and/or link failures has been extensively studied (e.g., <ref> [AAF + 94, AE86, AGH90, BSW69, FLMS93, GA88, WZ89] </ref>). Several papers focus on a single link and on how to mask failures of that link [AAF + 94, BSW69]. <p> Other works have also studied tolerating lossy links in the context of an entire network. However, some of them do not consider process crashes <ref> [GA88] </ref>, while others assume that crashed processes recover [AGH90], and yet others focus on the solution of specific problems such as Broadcast [AE86]. In contrast, our results assume permanent process crashes, and more importantly, we study the effect of link failures on the solvability of problems in general.
Reference: [Gop92] <author> A. Gopal. </author> <title> Fault-Tolerant Broadcasts and Multicasts: The Problem of Inconsistency and Contamination. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <month> January </month> <year> 1992. </year>
Reference-contexts: Our second result characterizes a large class of problems that remain solvable even with fair lossy links. Informally, this class consists of all the problems whose specifications refer only to the behavior of correct processes (i.e., processes that do not crash) these are called correct-restricted <ref> [Gop92] </ref> or failure-insensitive [BN92] problems. 4 This class of problems includes Reliable, FIFO, and Causal Broadcast, and correct-restricted versions of Approximate Agreement, Renaming, and k-set Agreement. <p> Henceforth, we consider only such specifications. 2.10 Correct-Restricted Specifications Intuitively, a specification is correct-restricted if it refers only to the states of correct processes (those with infinite traces) <ref> [Gop92, BN92] </ref>. Formally, let H and H 0 be any two traces in Vec (S) with the same dimension, say k.
Reference: [HT94] <author> V. Hadzilacos and S. Toueg. </author> <title> A modular approach to fault-tolerant broadcasts and related problems. </title> <type> Technical Report TR 94-1425, </type> <institution> Cornell University, Dept. of Computer Science, Cornell University, </institution> <address> Ithaca, NY 14853, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: In this paper, we focus on asynchronous systems (results concerning synchronous systems will be described in a companion paper). The set of problems solvable in asynchronous systems with process crashes include Reliable, FIFO, and Causal Broadcast, and their uniform counterparts <ref> [Bir85, HT94] </ref>, as well as Approximate Agreement [DLP + 86], Renaming [ABND + 90], and k-set Agreement [Cha90]. The question is whether such problems remain solvable (and if so, how) if we add link failures. We consider two models of lossy links: eventually reliable and fair lossy. <p> Such partitioning renders most interesting problems trivially impossible. Our first two results concern systems where half (or more) processes may crash. We first show that the intuition described above is flawed. We do so by exhibiting a problem, Uniform Reliable Broadcast <ref> [HT94] </ref>, that is solvable with reliable links but not with eventually reliable links. However, not all problems are like Uniform Reliable Broadcast. Our second result characterizes a large class of problems that remain solvable even with fair lossy links. <p> Reliable Broadcast (RB) and Consensus are examples of problems with a correct-restricted specification. Their uniform counterparts (e.g., URB in Section 3) are not correct-restricted (their specifications refer to the behavior of faulty processes) <ref> [HT94] </ref>. 3 Reliable is Strictly Stronger than Eventually Reliable Since an eventually reliable link can lose only a finite number of messages, it may appear that one can mask these message losses by repeatedly sending copies of each message, or by piggybacking on each message all the messages that were previously <p> We now show that this intuition is incorrect: in systems where a majority of processes may crash, there are natural problems that can be solved with reliable links but not with eventually reliable links. One such problem is Uniform Reliable Broadcast (or simply URB) <ref> [HT94] </ref>. Informally, URB is defined in terms of two primitives, broadcast and deliver, that must satisfy three properties: Validity: If a correct process broadcasts a message m, then it eventually delivers m. <p> Uniform agreement: If a process (whether correct or faulty) delivers a message m, then all correct processes eventually deliver m. Integrity: For any message m, every correct process delivers m at most once, and only if m was previously broadcast by its sender. A simple algorithm given in <ref> [HT94] </ref> solves URB with reliable links and any number of process crashes, and a standard partitioning argument shows that URB cannot be solved with eventually reliable links if a majority of processes may crash. 7 Indeed it may require the sending of an infinite number of message copies, or, alternatively, the
Reference: [Lam78] <author> L. Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: The set of all correct processes in history H is denoted by correct (H). 2.4 Event Ordering We relate events that occur in a history using the happens-before (henceforth abbreviated as before) relation defined in <ref> [Lam78] </ref>.
Reference: [Lam83] <author> L. Lamport. </author> <title> What good is temporal logic? In R. </title> <editor> E. A. Mason, editor, </editor> <booktitle> Information Processing 83: proceedings of the IFIP Ninth World Congress, </booktitle> <pages> pages 657-668. </pages> <publisher> IFIP, North-Holland, </publisher> <month> September </month> <year> 1983. </year>
Reference-contexts: Thus, a simulation stretches the trace of the simulated process: a segment s 1 s 2 of a trace can be stretched into some stuttering version s 1 s 1 s 2 s 2 <ref> [Lam83] </ref>.
Reference: [NT90] <author> G. Neiger and S. Toueg. </author> <title> Automatically increasing the fault-tolerance of distributed algorithms. </title> <journal> Journal of Algorithms, </journal> <volume> 11(3) </volume> <pages> 374-419, </pages> <year> 1990. </year>
Reference-contexts: This version of the paper does not contain detailed proofs; these are given in [BCBT96]. 4 The complement of this class of problems includes all problems with uniform specifications <ref> [NT90] </ref>. 2 Model We consider asynchronous distributed systems where processes communicate by message passing via a completely connected network, and there are no bounds on relative process speeds or message transmission times. 2.1 Variables and States We postulate an infinite universal set of variables V. <p> To state these results more precisely, we first refine our model and define the notion of translation <ref> [NT90] </ref>. 6.1 Augmentation The state of a process that simulates another one has two components: the simulated variables (all the variables of the simulated process) and the simulation variables (some book keeping variables that are used to carry out the simulation). These two sets of variables are disjoint.
Reference: [WZ89] <author> D. Wang and L. Zuck. </author> <title> Tight bounds for the sequence transmission problem. </title> <booktitle> In Proceedings of the 8th ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 73-83, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: We do this by showing that given a system with fair lossy links and a majority of correct processes, one can simulate a system with reliable links. The problem of tolerating crash and/or link failures has been extensively studied (e.g., <ref> [AAF + 94, AE86, AGH90, BSW69, FLMS93, GA88, WZ89] </ref>). Several papers focus on a single link and on how to mask failures of that link [AAF + 94, BSW69].
References-found: 18

