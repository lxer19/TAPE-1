URL: http://www.cs.toronto.edu/~micah/pubs/infinite.ps
Refering-URL: http://www.cs.toronto.edu/~micah/pubs/pubs.html
Root-URL: 
Email: micah@cs.toronto.edu  pebe@uni-paderborn.de  ellern@hni.uni-paderborn.de  
Phone: 2  3  
Title: Analyzing an Infinite Parallel Job Allocation Process  
Author: Micah Adler Petra Berenbrink and Klaus Schroder 
Address: Toronto, Canada  Germany  Germany  
Affiliation: 1 Department of Computer Science, University of  Department of Mathematics and Computer Science, Paderborn University,  Heinz Nixdorf Institute and Department of Mathematics and Computer Science, Paderborn University,  
Abstract: In recent years the task of allocating jobs to servers has been studied with the balls and bins abstraction. Results in this area exploit the large decrease in maximum load that can be achieved by allowing each job (ball) a very small amount of choice in choosing its destination server (bin). The scenarios considered can be divided into two categories: sequential, where each job can be placed at a server before the next job arrives, and parallel, where the jobs arrive in large batches that must be dealt with simultaneously. Another, orthogonal, classification of load balancing scenarios is into fixed time and infinite. Fixed time processes are only analyzed for an interval of time that is known in advance, and for all such results thus far either the number of rounds or the total expected number of arrivals at each server is a constant. In the infinite case, there is an arrival process and a deletion process that are both defined over an infinite time line. In this paper, we present an algorithm for allocating jobs arriving in parallel over an infinite time line. While there have been several results for the infinite sequential case, no analogous results exist for the infinite parallel case. We consider the process where m jobs arrive in each round to n servers, and each server is allowed to remove one job per round. We introduce a simple algorithm, where it is sufficient for each job to choose between 2 random servers, that obtains the following result: if m n 6e , then for any given round, the probability that any job has to wait more than O(log log n) rounds before being processed is at most 1=n ff for any constant ff. Furthermore, we analyze the distribution on waiting times: with the same probability, the number of jobs of any given round that have to wait t + c rounds to be processed is at most O( n 2 (2 t ) ) for a small constant c. These results are comparable with existing results for the infinite sequential case. y Supported by an operating grant from the Natural Sciences and Engineering Research Council of Canada, and by ITRC, an Ontario Centre of Excellence. This research was conducted in part while he was at the Heinz Nixdorf Institute Graduate College, Paderborn, Germany. z Supported by DFG-SFB 376 Massive Parallelitat, and by EU ESPRIT Long Term Reseach Project 20244 (ALCOM-IT). x Supported by the DFG-Graduiertenkolleg Parallele Rechnernetzwerke in der Produktion-stechnik, by DFG-SFB 376 Massive Parallelitat, and by EU ESPRIT Long Term Reseach Project 20244 (ALCOM-IT). 
Abstract-found: 1
Intro-found: 1
Reference: [ABK94] <author> Yossi Azar, Andrei Z. Broder, and Anna R. Karlin. </author> <title> On-line load balancing. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 130:7384, </address> <year> 1994. </year> <note> A preliminary version appeared in FOCS 92. </note>
Reference-contexts: The simple sequential game has many applications and is also used as an online algorithm for competitive Load Balancing (see <ref> [ABK94] </ref>, [AKP + 93], and [PW93]). Recently, Czumaj et al. ([CS97]) extended the results in several directions.
Reference: [ABKU94] <author> Y. Azar, A. Z. Broder, A. R. Karlin, and E. Upfal. </author> <title> Balanced allocations. </title> <booktitle> In Proceedings of the 26th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 593602, </pages> <address> New York, 1994. </address> <publisher> ACM, ACM Press. </publisher>
Reference-contexts: Often, this problem is stated in terms of balls and bins; such occupancy results have several applications in load balancing, hashing, and PRAM simulation [KLM92], <ref> [ABKU94] </ref>, [ACMR95]. A simple distributed algorithm for allocating jobs to servers is to place each job at a random server. <p> This requires no coordination, but it is well known that if there are n jobs and n servers, it is likely that one of the servers receives O ( log n log log n ) jobs. However, <ref> [ABKU94] </ref> demonstrated that a small amount of choice in possible servers for each job can lead to as much as an exponential decrease in the maximum imbalance, without prohibitively increasing coordination. Some of the work in this area [ABKU94,CS97] can be described as sequential. <p> The seminal paper on the sequential scenario <ref> [ABKU94] </ref> considered both a fixed time (which they call finite) process, and an infinite process. <p> We develop a method for using a witness tree argument in the analysis of an infinite process; this is the main technical contribution of our paper. 1.2 Previous Work Azar et al. <ref> [ABKU94] </ref> examine a sequential protocol called greedy process to place n balls into n bins. For each ball they choose d bins i.u.r. and put the ball into the bin with minimum load at the time of placement. <p> They show that a process with reassignments yields a maximum load that is never smaller by more than an constant factor than the maximum load of the process from <ref> [ABKU94] </ref>. Adler et al. [ACMR95] explore the problem in parallel and distributed settings for the case of placing n balls into n bins. <p> For any constant number r 2 IN of communication rounds, the maximum load is shown to be at least q log log n . Additionally, they present parallelizations of the sequential strategy found in <ref> [ABKU94] </ref>. They give a two-round parallelization of the greedy process, matching the lower bound. Furthermore, they introduce a multiple-round strategy requiring log log n + O (1) rounds of communication and achieving maximum load log log n + O (1), w.h.p.
Reference: [ACMR95] <author> Micah Adler, Soumen Chakrabarti, Michael Mitzenmacher, and Lars Rasmussen. </author> <title> Parallel randomized load balancing. </title> <booktitle> In Proceedings of the 27th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 238247, </pages> <address> New York, USA, 1995. </address> <publisher> ACM, ACM Press. </publisher>
Reference-contexts: Often, this problem is stated in terms of balls and bins; such occupancy results have several applications in load balancing, hashing, and PRAM simulation [KLM92], [ABKU94], <ref> [ACMR95] </ref>. A simple distributed algorithm for allocating jobs to servers is to place each job at a random server. <p> They show that a process with reassignments yields a maximum load that is never smaller by more than an constant factor than the maximum load of the process from [ABKU94]. Adler et al. <ref> [ACMR95] </ref> explore the problem in parallel and distributed settings for the case of placing n balls into n bins. <p> For m = n, he analyzes a very simple class of algorithms achieving maximum load O q log log n if r rounds of communication are allowed. This matches the lower bound presented in <ref> [ACMR95] </ref>. He generalizes the algorithm for m &gt; n balls and achieves the optimal load of O ( m n ) using log log n log (m=n) rounds of com munication, w.h.p., or load max log n; O n using r rounds of communication, w.h.p. <p> In [BMS97] the authors extend the lower bound of <ref> [ACMR95] </ref> to arbitrary r log log n, implying that the result of Stemanns protocol is optimal for all r.
Reference: [AKP + 93] <author> Yossi Azar, Bala Kakyanasundaram, Serge Plotkin, Kirk R. Pruhs, and Orli Waarts. </author> <title> On-line load balancing of temporary tasks. </title> <booktitle> In Proceedings of the 3rd Workshop on Algorithms and Data Structures, </booktitle> <pages> pages 119130, </pages> <year> 1993. </year>
Reference-contexts: The simple sequential game has many applications and is also used as an online algorithm for competitive Load Balancing (see [ABK94], <ref> [AKP + 93] </ref>, and [PW93]). Recently, Czumaj et al. ([CS97]) extended the results in several directions.
Reference: [BMS97] <author> Petra Berenbrink, Friedhelm Meyer auf der Heide, and Klaus Schroder. </author> <title> Allocating weighted jobs in parallel. </title> <booktitle> In Proceedings of the 9th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 302310, </pages> <year> 1997. </year>
Reference-contexts: He generalizes the algorithm for m &gt; n balls and achieves the optimal load of O ( m n ) using log log n log (m=n) rounds of com munication, w.h.p., or load max log n; O n using r rounds of communication, w.h.p. In <ref> [BMS97] </ref> the authors extend the lower bound of [ACMR95] to arbitrary r log log n, implying that the result of Stemanns protocol is optimal for all r.
Reference: [CS97] <author> Artur Czumaj and Volker Stemann. </author> <title> Randomized allocation processes. </title> <booktitle> In Proceedings of the 38th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 194 203, </pages> <address> Miami Beach, FL, 1997. </address> <publisher> IEEE Computer Society Press, Los Alamitos. </publisher>
Reference-contexts: Despite a large subsequent body of work on the parallel scenario as well as further work on infinite processes in the sequential scenario <ref> [CS97] </ref>, up to now there has been no analysis of an infinite process for the parallel scenario. In fact, for all previous parallel results, either the number of rounds or the total expected number of arrivals at each server is a constant.
Reference: [KLM92] <author> Richard M. Karp, Michael Luby, and Friedhelm Meyer auf der Heide. </author> <title> Efficient PRAM simulation on a distributed memory machine. </title> <booktitle> In Proceedings of the 24th ACM Symposium on Theory of Computing, </booktitle> <year> 1992. </year>
Reference-contexts: Often, this problem is stated in terms of balls and bins; such occupancy results have several applications in load balancing, hashing, and PRAM simulation <ref> [KLM92] </ref>, [ABKU94], [ACMR95]. A simple distributed algorithm for allocating jobs to servers is to place each job at a random server.
Reference: [Kur81] <author> Thomas G. Kurtz. </author> <title> Approximation of Population Processes. </title> <booktitle> Regional Conference Series in Applied Mathematics. </booktitle> <address> CMBS-NSF, </address> <year> 1981. </year>
Reference: [Mit96] <author> Michael Mitzenmacher. </author> <title> Density dependent jump markov processes and applications to load balancing. </title> <booktitle> In Proceedings of the 37th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 213223, </pages> <year> 1996. </year>
Reference-contexts: The authors present a protocol which achieves maximum load of fl m using O log log n rounds of communication. In particular, for log log n rounds the optimal load of O m is achieved. Mitzenmacher <ref> [Mit96] </ref> analyzes a dynamic but fixed time allocation strategy: Customers (balls) arrive as a Poisson stream of rate n, &lt; 1, at a collection of n servers (bins). Each customer chooses d servers i.u.r. and joins the server with the fewest customers.
Reference: [Mit97] <author> Michael Mitzenmacher. </author> <title> On the analysis of randomized load balancing schemes. </title> <booktitle> In Proceedings of the 9th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 292301, </pages> <address> Newport, Rhode Island, </address> <year> 1997. </year>
Reference-contexts: Results for such a scenario are rather limited in their applicability to parallel and distributed settings, and thus much of the work on allocation processes has concentrated on the parallel scenario ([ACMR95,Mit96,St96,BMS97], <ref> [Mit97] </ref>), where the jobs arrive in large batches that must be processed simultaneously. The seminal paper on the sequential scenario [ABKU94] considered both a fixed time (which they call finite) process, and an infinite process. <p> His analysis makes use of deep results of Kurtz ([Kur81]) on so called density dependent Markov Chains. In <ref> [Mit97] </ref> the author extends his results to several different load generation and consumption schemes. For example, he analyzes the same process with constant service times, the customers having a different number of choices, and bounded queue lengths.
Reference: [MSS95] <editor> Friedhelm Meyer auf der Heide, Christian Scheideler, and Volker Stemann. </editor> <title> Exploiting storage redundancy to speed up randomized shared memory simulations. </title> <booktitle> In Proceedings of the 12th Annual Symposium on Theoretical Aspects of Computer Science, </booktitle> <year> 1995. </year>
Reference-contexts: Our results also hold if the jobs are generated asynchronously, for instance by a Poisson Process. The analysis of the process is performed using a type of delay sequence argument, using a structure known as a witness tree <ref> [MSS95] </ref>. To use this type of argument, we first show that every time the process fails a witness tree must exist. We then show that that it is very unlikely for a witness tree to occur.
Reference: [PW93] <author> S. Phillips and J. Westbrook. </author> <title> Online load balancing and network flow. </title> <booktitle> In Proceedings of the 25th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 402411. </pages> <publisher> ACM, </publisher> <year> 1993. </year>
Reference-contexts: The simple sequential game has many applications and is also used as an online algorithm for competitive Load Balancing (see [ABK94], [AKP + 93], and <ref> [PW93] </ref>). Recently, Czumaj et al. ([CS97]) extended the results in several directions. They present an adaptive process where the number of choices made in order to place a ball depends on the load of the previously chosen bins, and an off-line allocation process knowing the random choices in advance.
Reference: [SV96] <author> Christian Scheideler and Berthold Voecking. </author> <title> Continuous Routing Strategies. </title> <booktitle> In Proceedings of the 8th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <year> 1996. </year>
Reference-contexts: It is easy to show that the same result holds if the jobs are generated by n generators which can be arbitrarily distributed over the processors (see <ref> [SV96] </ref>). Each generator is allowed to produce a job with a probability smaller than 1 2de per round. It is also possible to use generators with different generation probabilities if the expected overall generated load is smaller than 1 2de .
Reference: [St96] <author> Volker Stemann. </author> <title> Parallel balanced allocations. </title> <booktitle> In Proceedings of the 8th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 261269, </pages> <address> New York, USA, 1996. </address> <publisher> ACM. </publisher>
Reference-contexts: They show that with T = r q log log n this algorithm terminates after r rounds with maximum load r T , w.h.p. Stemann <ref> [St96] </ref> extends the results for the case where the number of balls m is larger than the number n of bins. For m = n, he analyzes a very simple class of algorithms achieving maximum load O q log log n if r rounds of communication are allowed.
References-found: 14

