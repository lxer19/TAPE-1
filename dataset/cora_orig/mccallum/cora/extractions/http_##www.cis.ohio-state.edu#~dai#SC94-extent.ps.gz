URL: http://www.cis.ohio-state.edu/~dai/SC94-extent.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/~dai/
Root-URL: 
Title: EXTENT: A Portable Programming Environment for Designing and Implementing High-Performance Block Recursive Algorithms  
Author: D. L. Dai, S. K. S. Gupta, S. D. Kaushik, J. H. Lu, R. V. Singh, C.-H. Huang, P. Sadayappan and R. W. Johnson 
Keyword: Parallel programming environment, Tensor (Kronecker) product, Block recursive algorithm, Parallel program synthesis.  
Address: Columbus, OH 43210  St. Cloud, MN 56301  
Affiliation: Department of Computer and Information Science The Ohio State University  Department of Computer Science St. Cloud State University  
Abstract: EXTENT is an EXpert system for TENsor product formula Translation. In this paper we present a programming environment for automatic generation of parallel/vector programs from tensor product formulas. A tensor (Kronecker) product based programming methodology is used for designing high performance programs on various architectures. In this programming methodology, block recursive algorithms such as the fast Fourier transform and Strassen's matrix multiplication algorithm are expressed as tensor product formulas involving tensor product and other matrix operations. A tensor product formula can be systematically translated to parallel and/or vector code for various parallel architectures. A prototype system which generates programs for the Cray Y-MP, Cray T3D, and Intel Paragon has been developed. Performance results for some generated programs are presented. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. R. Allen and K. Kennedy. </author> <title> Automatic translation of FORTRAN programs to vector form. </title> <journal> ACM Trans. Programming Languages and Systems, </journal> <volume> 9 </volume> <pages> 491-542, </pages> <year> 1987. </year>
Reference-contexts: Existing software support for developing parallel programs broadly fall into two categories. The first category includes general purpose programming languages like pC++ [2], HPF [7], Fortran D [13], and Vienna Fortran [4] and program transformation/restructuring tools like Parafrase-2 [21], ParaScope <ref> [1] </ref>, and SUPERB [8, 25]. The second category includes application oriented problem-solving and program development programming environments such as parallel ELLPACK [15] and libraries such as ScaLAPACK [5].
Reference: [2] <author> F. Bodin, P. Beckman, D. Gannon, S. Yang, S. Kesa-van, A. Malony, and B. Mohr. </author> <title> Implementing a parallel C++ runtime system for scalable parallel systems. </title> <booktitle> In Supercomputing '93, </booktitle> <pages> pages 588-597, </pages> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: This situation has been exacerbated by the lack of programming languages which are compilable into efficient codes for various supercomputer architectures. Existing software support for developing parallel programs broadly fall into two categories. The first category includes general purpose programming languages like pC++ <ref> [2] </ref>, HPF [7], Fortran D [13], and Vienna Fortran [4] and program transformation/restructuring tools like Parafrase-2 [21], ParaScope [1], and SUPERB [8, 25]. The second category includes application oriented problem-solving and program development programming environments such as parallel ELLPACK [15] and libraries such as ScaLAPACK [5].
Reference: [3] <author> J. W. Brewer. </author> <title> Kronecker Products and matrix calculus in system theory. </title> <journal> IEEE Transaction on Circuits and Systems, </journal> <volume> 25 </volume> <pages> 772-781, </pages> <year> 1978. </year>
Reference-contexts: EXTENT is targeted towards development of high performance programs for block recursive algorithms. The tensor product has been used for modeling algorithms with recursive computational structure which occur in application areas such as digital signal processing [10, 22], image processing [23], linear system design <ref> [3] </ref>, and statistics [11]. In recent years, the tensor product framework has been successfully used to design and implement high performance algorithms for the discrete Fourier transform (DFT) [18, 24] and matrix multiplication [16, 17] on shared-memory vector multiprocessors.
Reference: [4] <author> B. M. Chapman, P. Mehrotra, and H. P. Zima. </author> <title> Vienna Fortran a Fortran language extension for distributed memory multiprocessors. </title> <editor> In J. Saltz and P. Mehro-tra, editors, </editor> <booktitle> Language, Compilers and Runtime Environments for Distributed Memory Machines, </booktitle> <pages> pages 39-62. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1992. </year>
Reference-contexts: Existing software support for developing parallel programs broadly fall into two categories. The first category includes general purpose programming languages like pC++ [2], HPF [7], Fortran D [13], and Vienna Fortran <ref> [4] </ref> and program transformation/restructuring tools like Parafrase-2 [21], ParaScope [1], and SUPERB [8, 25]. The second category includes application oriented problem-solving and program development programming environments such as parallel ELLPACK [15] and libraries such as ScaLAPACK [5].
Reference: [5] <author> J. Choi, J. J. Dongarra, R. Pozo, and D. W. Walker. </author> <title> ScaLAPACK: A scalable linear algebra library for distributed-memory concurrent computers. </title> <booktitle> In Proc. of Fourth Symposium on the Frontiers of Massively Parallel Computation, </booktitle> <pages> pages 120-127, </pages> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: The second category includes application oriented problem-solving and program development programming environments such as parallel ELLPACK [15] and libraries such as ScaLAPACK <ref> [5] </ref>. This paper presents EXTENT (EXpert system for TENsor product formula Translation) which is a portable programming environment for a tensor (Kro-necker) product based programming methodology. EXTENT is targeted towards development of high performance programs for block recursive algorithms.
Reference: [6] <author> J. J. Dongarra, J. Du Croz, S. Hammarling, and I. Duff. </author> <title> A set of level 3 basic linear algebra subprograms. </title> <journal> ACM Transactions on Math. Software, </journal> <volume> 16(1) </volume> <pages> 1-17, </pages> <year> 1990. </year>
Reference-contexts: The block partitioning is recursively applied until the block matrix multiplications to be computed can be more efficiently carried out by the conventional matrix multiplication algorithm. A library subroutine, such as sgemm from BLAS 3 <ref> [6] </ref>, can be used to perform this block matrix multiplication. The Strassen subsystem also supports Winograd's variation of Strassen's algorithm. This variation reduces the number of additions. Depending on the architecture of the target machine, algorithm, and block size combinations have different performance for a given size.
Reference: [7] <author> High Performance Fortran Forum. </author> <title> High Performance Fortran language specification, version 1.0. </title> <type> Technical Report CRPC-TR92225, </type> <institution> Rice University, </institution> <year> 1993. </year>
Reference-contexts: This situation has been exacerbated by the lack of programming languages which are compilable into efficient codes for various supercomputer architectures. Existing software support for developing parallel programs broadly fall into two categories. The first category includes general purpose programming languages like pC++ [2], HPF <ref> [7] </ref>, Fortran D [13], and Vienna Fortran [4] and program transformation/restructuring tools like Parafrase-2 [21], ParaScope [1], and SUPERB [8, 25]. The second category includes application oriented problem-solving and program development programming environments such as parallel ELLPACK [15] and libraries such as ScaLAPACK [5]. <p> Various data distribution schemes can be used to distribute data among processors. The common distributions used are the block, cyclic, and block-cyclic distributions <ref> [7] </ref>. In the course of the computation, communication is needed when a processor requires data from another processor's local memory. In most distributed-memory multiprocessors the cost of communicating a data value is considerably larger than the cost of a primitive arithmetic computation on the data element.
Reference: [8] <author> H. M. Gerndt and H. P. Zima. </author> <title> Optimizing communication in SUPERB. </title> <booktitle> In CONPAR 90, </booktitle> <pages> pages 300-311, </pages> <year> 1990. </year> <note> LNCS 457. </note>
Reference-contexts: Existing software support for developing parallel programs broadly fall into two categories. The first category includes general purpose programming languages like pC++ [2], HPF [7], Fortran D [13], and Vienna Fortran [4] and program transformation/restructuring tools like Parafrase-2 [21], ParaScope [1], and SUPERB <ref> [8, 25] </ref>. The second category includes application oriented problem-solving and program development programming environments such as parallel ELLPACK [15] and libraries such as ScaLAPACK [5]. This paper presents EXTENT (EXpert system for TENsor product formula Translation) which is a portable programming environment for a tensor (Kro-necker) product based programming methodology.
Reference: [9] <author> A. Graham. </author> <title> Kronecker Products and Matrix Calculus: With Applications. </title> <publisher> Ellis Horwood Limited, </publisher> <year> 1981. </year>
Reference-contexts: For details of the theory of tensor products, the reader is referred to <ref> [9, 14] </ref>. We next describe the FFT subsystem and the Strassen subsystem. 3.1 FFT Subsystem The FFT subsystem is used for developing high performance programs for computing the DFT.
Reference: [10] <author> J. Granta, M. Conner, and R. Tolimieri. </author> <title> Recursive fast algorithms and the role of the tensor product. </title> <journal> IEEE Transaction on Signal Processing, </journal> <volume> 40(12) </volume> <pages> 2921-2930, </pages> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: EXTENT is targeted towards development of high performance programs for block recursive algorithms. The tensor product has been used for modeling algorithms with recursive computational structure which occur in application areas such as digital signal processing <ref> [10, 22] </ref>, image processing [23], linear system design [3], and statistics [11]. In recent years, the tensor product framework has been successfully used to design and implement high performance algorithms for the discrete Fourier transform (DFT) [18, 24] and matrix multiplication [16, 17] on shared-memory vector multiprocessors.
Reference: [11] <author> F. A. Graybill. </author> <title> Matrices, with applications in Statistics. </title> <booktitle> Wadsworth International Group, </booktitle> <address> Belmont, CA, </address> <year> 1983. </year>
Reference-contexts: EXTENT is targeted towards development of high performance programs for block recursive algorithms. The tensor product has been used for modeling algorithms with recursive computational structure which occur in application areas such as digital signal processing [10, 22], image processing [23], linear system design [3], and statistics <ref> [11] </ref>. In recent years, the tensor product framework has been successfully used to design and implement high performance algorithms for the discrete Fourier transform (DFT) [18, 24] and matrix multiplication [16, 17] on shared-memory vector multiprocessors.
Reference: [12] <author> S. K. S. Gupta, S. D. Kaushik, C.-H. Huang, J. R. Johnson, R. W. Johnson, and P. Sadayappan. </author> <title> A methodology for the generation of data distributions to optimize communication. </title> <booktitle> In Fourth IEEE Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 436-441, </pages> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: This, coupled with the availability of a methodology for translating algorithms expressed using the tensor product and other matrix operations into parallel/vector codes for shared-memory vector multiprocessors [17, 18] and distributed-memory MIMD machines <ref> [12] </ref>, provides a basis for the portable programming environment presented in this paper. To design and implement an algorithm using the tensor product requires first that the algorithm be expressed as the evaluation of a matrix formula. Then the various constituent matrices are factored into tensor products of smaller matrices.
Reference: [13] <author> S. Hiranandani, K. Kennedy, and C.-W. Tseng. </author> <title> Compiling Fortran-D for MIMD distributed-memory machines. </title> <journal> Communication of the ACM, </journal> <volume> 35(8) </volume> <pages> 66-80, </pages> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: This situation has been exacerbated by the lack of programming languages which are compilable into efficient codes for various supercomputer architectures. Existing software support for developing parallel programs broadly fall into two categories. The first category includes general purpose programming languages like pC++ [2], HPF [7], Fortran D <ref> [13] </ref>, and Vienna Fortran [4] and program transformation/restructuring tools like Parafrase-2 [21], ParaScope [1], and SUPERB [8, 25]. The second category includes application oriented problem-solving and program development programming environments such as parallel ELLPACK [15] and libraries such as ScaLAPACK [5].
Reference: [14] <author> R. A. Horn and C. R. Johnson. </author> <title> Topics in Matrix Analysis. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1991. </year>
Reference-contexts: For details of the theory of tensor products, the reader is referred to <ref> [9, 14] </ref>. We next describe the FFT subsystem and the Strassen subsystem. 3.1 FFT Subsystem The FFT subsystem is used for developing high performance programs for computing the DFT.
Reference: [15] <author> E. N. Houstis and J. R. Rice. </author> <title> Parallel ELLPACK: A development and problem solving environment for high performance computing machines. </title> <editor> In P. W. Gaffney and E. N. Houstis, editors, </editor> <booktitle> Programming environments for high-level scientific problem solving, </booktitle> <pages> pages 229-241, </pages> <year> 1992. </year>
Reference-contexts: The first category includes general purpose programming languages like pC++ [2], HPF [7], Fortran D [13], and Vienna Fortran [4] and program transformation/restructuring tools like Parafrase-2 [21], ParaScope [1], and SUPERB [8, 25]. The second category includes application oriented problem-solving and program development programming environments such as parallel ELLPACK <ref> [15] </ref> and libraries such as ScaLAPACK [5]. This paper presents EXTENT (EXpert system for TENsor product formula Translation) which is a portable programming environment for a tensor (Kro-necker) product based programming methodology. EXTENT is targeted towards development of high performance programs for block recursive algorithms.
Reference: [16] <author> C.-H. Huang, J. R. Johnson, and R. W. Johnson. </author> <title> A tensor product formulation of Strassen's matrix multiplication algorithm. </title> <journal> Appl. Math. Letters, </journal> <volume> 3(3) </volume> <pages> 67-71, </pages> <year> 1990. </year>
Reference-contexts: In recent years, the tensor product framework has been successfully used to design and implement high performance algorithms for the discrete Fourier transform (DFT) [18, 24] and matrix multiplication <ref> [16, 17] </ref> on shared-memory vector multiprocessors. The significance of the tensor product lies in its ability to model computational structures occurring in a wide spectrum of supercomputer architectures, as well as, the underlying hardware 1 structures, like the interconnection networks [19, 20]. <p> It can be noted from the tensor product formulation of the FFT algorithms [18, 24] and the Strassen matrix multiplication algorithm <ref> [16, 17] </ref> that formulas for block recursive algorithms have the following generic form: k Y T j where T j = (I l j L n j I r j ) where A m j ;n j are computation matrices.
Reference: [17] <author> C.-H. Huang, J. R. Johnson, and R. W. Johnson. </author> <title> Generating parallel programs from tensor product formulas: A case study of Strassen's matrix multiplication algorithm. </title> <booktitle> In Proc. International Conference on Parallel Processing 1992, volume III, </booktitle> <pages> pages 104-108, </pages> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: In recent years, the tensor product framework has been successfully used to design and implement high performance algorithms for the discrete Fourier transform (DFT) [18, 24] and matrix multiplication <ref> [16, 17] </ref> on shared-memory vector multiprocessors. The significance of the tensor product lies in its ability to model computational structures occurring in a wide spectrum of supercomputer architectures, as well as, the underlying hardware 1 structures, like the interconnection networks [19, 20]. <p> This, coupled with the availability of a methodology for translating algorithms expressed using the tensor product and other matrix operations into parallel/vector codes for shared-memory vector multiprocessors <ref> [17, 18] </ref> and distributed-memory MIMD machines [12], provides a basis for the portable programming environment presented in this paper. To design and implement an algorithm using the tensor product requires first that the algorithm be expressed as the evaluation of a matrix formula. <p> It can be noted from the tensor product formulation of the FFT algorithms [18, 24] and the Strassen matrix multiplication algorithm <ref> [16, 17] </ref> that formulas for block recursive algorithms have the following generic form: k Y T j where T j = (I l j L n j I r j ) where A m j ;n j are computation matrices.
Reference: [18] <author> J. R. Johnson, R. W. Johnson, D. Rodriguez, and R. Tolimieri. </author> <title> A methodology for designing, modifying and implementing fourier transform algorithms on various architectures. </title> <journal> Circuits Systems Signal Process, </journal> <volume> 9(4) </volume> <pages> 450-500, </pages> <year> 1990. </year>
Reference-contexts: In recent years, the tensor product framework has been successfully used to design and implement high performance algorithms for the discrete Fourier transform (DFT) <ref> [18, 24] </ref> and matrix multiplication [16, 17] on shared-memory vector multiprocessors. The significance of the tensor product lies in its ability to model computational structures occurring in a wide spectrum of supercomputer architectures, as well as, the underlying hardware 1 structures, like the interconnection networks [19, 20]. <p> This, coupled with the availability of a methodology for translating algorithms expressed using the tensor product and other matrix operations into parallel/vector codes for shared-memory vector multiprocessors <ref> [17, 18] </ref> and distributed-memory MIMD machines [12], provides a basis for the portable programming environment presented in this paper. To design and implement an algorithm using the tensor product requires first that the algorithm be expressed as the evaluation of a matrix formula. <p> It can be noted from the tensor product formulation of the FFT algorithms <ref> [18, 24] </ref> and the Strassen matrix multiplication algorithm [16, 17] that formulas for block recursive algorithms have the following generic form: k Y T j where T j = (I l j L n j I r j ) where A m j ;n j are computation matrices.
Reference: [19] <author> S. D. Kaushik, S. Sharma, and C.-H. Huang. </author> <title> An algebraic theory for modeling multistage interconnection networks. </title> <journal> Journal of Information Science and Engineering, </journal> <volume> 9 </volume> <pages> 1-26, </pages> <year> 1993. </year>
Reference-contexts: The significance of the tensor product lies in its ability to model computational structures occurring in a wide spectrum of supercomputer architectures, as well as, the underlying hardware 1 structures, like the interconnection networks <ref> [19, 20] </ref>. This, coupled with the availability of a methodology for translating algorithms expressed using the tensor product and other matrix operations into parallel/vector codes for shared-memory vector multiprocessors [17, 18] and distributed-memory MIMD machines [12], provides a basis for the portable programming environment presented in this paper.
Reference: [20] <author> S. D. Kaushik, S. Sharma, C.-H. Huang, J. R. John-son, R. W. Johnson, and P. Sadayappan. </author> <title> An algebraic theory for modeling direct interconnection networks. </title> <booktitle> In Supercomputing '92, </booktitle> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: The significance of the tensor product lies in its ability to model computational structures occurring in a wide spectrum of supercomputer architectures, as well as, the underlying hardware 1 structures, like the interconnection networks <ref> [19, 20] </ref>. This, coupled with the availability of a methodology for translating algorithms expressed using the tensor product and other matrix operations into parallel/vector codes for shared-memory vector multiprocessors [17, 18] and distributed-memory MIMD machines [12], provides a basis for the portable programming environment presented in this paper.
Reference: [21] <author> C. D. Polychronopoulos, M. Girkar, M. R. Haghighat, C. L. Lee, Bruce Leung, and D. Schouten. </author> <title> Parafrase-2: An environment for parallelizing, partitioning synchronizing, and scheduling programs on multiprocessors. </title> <booktitle> In Proc. of International Conference on Parallel Processing, </booktitle> <volume> volume II, </volume> <pages> pages 39-48, </pages> <year> 1989. </year>
Reference-contexts: Existing software support for developing parallel programs broadly fall into two categories. The first category includes general purpose programming languages like pC++ [2], HPF [7], Fortran D [13], and Vienna Fortran [4] and program transformation/restructuring tools like Parafrase-2 <ref> [21] </ref>, ParaScope [1], and SUPERB [8, 25]. The second category includes application oriented problem-solving and program development programming environments such as parallel ELLPACK [15] and libraries such as ScaLAPACK [5].
Reference: [22] <author> P. A. Regalia and S. K. Mitra. </author> <title> Kronecker products, unitary matrices and signal processing applications. </title> <journal> SIAM Reviews, </journal> <volume> 31(4) </volume> <pages> 586-613, </pages> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: EXTENT is targeted towards development of high performance programs for block recursive algorithms. The tensor product has been used for modeling algorithms with recursive computational structure which occur in application areas such as digital signal processing <ref> [10, 22] </ref>, image processing [23], linear system design [3], and statistics [11]. In recent years, the tensor product framework has been successfully used to design and implement high performance algorithms for the discrete Fourier transform (DFT) [18, 24] and matrix multiplication [16, 17] on shared-memory vector multiprocessors.
Reference: [23] <author> G. X. Ritter and P. D. Gader. </author> <title> Image algebra techniques and parallel image processing. </title> <journal> J. Parallel and Distributed Computing, </journal> <volume> 4 </volume> <pages> 7-44, </pages> <year> 1987. </year>
Reference-contexts: EXTENT is targeted towards development of high performance programs for block recursive algorithms. The tensor product has been used for modeling algorithms with recursive computational structure which occur in application areas such as digital signal processing [10, 22], image processing <ref> [23] </ref>, linear system design [3], and statistics [11]. In recent years, the tensor product framework has been successfully used to design and implement high performance algorithms for the discrete Fourier transform (DFT) [18, 24] and matrix multiplication [16, 17] on shared-memory vector multiprocessors.
Reference: [24] <author> C. Van Loan. </author> <title> Computational frameworks for the fast Fourier transform. </title> <publisher> SIAM, </publisher> <year> 1992. </year>
Reference-contexts: In recent years, the tensor product framework has been successfully used to design and implement high performance algorithms for the discrete Fourier transform (DFT) <ref> [18, 24] </ref> and matrix multiplication [16, 17] on shared-memory vector multiprocessors. The significance of the tensor product lies in its ability to model computational structures occurring in a wide spectrum of supercomputer architectures, as well as, the underlying hardware 1 structures, like the interconnection networks [19, 20]. <p> It can be noted from the tensor product formulation of the FFT algorithms <ref> [18, 24] </ref> and the Strassen matrix multiplication algorithm [16, 17] that formulas for block recursive algorithms have the following generic form: k Y T j where T j = (I l j L n j I r j ) where A m j ;n j are computation matrices.
Reference: [25] <author> H. P. Zima, H.-J. Bast, and H. M. Gerndt. </author> <title> SUPERB a tool for semi-automatic MIMD/SIMD parlleliza-tion. </title> <journal> Parallel Computing, </journal> <volume> 6 </volume> <pages> 1-18, </pages> <year> 1988. </year> <month> 10 </month>
Reference-contexts: Existing software support for developing parallel programs broadly fall into two categories. The first category includes general purpose programming languages like pC++ [2], HPF [7], Fortran D [13], and Vienna Fortran [4] and program transformation/restructuring tools like Parafrase-2 [21], ParaScope [1], and SUPERB <ref> [8, 25] </ref>. The second category includes application oriented problem-solving and program development programming environments such as parallel ELLPACK [15] and libraries such as ScaLAPACK [5]. This paper presents EXTENT (EXpert system for TENsor product formula Translation) which is a portable programming environment for a tensor (Kro-necker) product based programming methodology.
References-found: 25

