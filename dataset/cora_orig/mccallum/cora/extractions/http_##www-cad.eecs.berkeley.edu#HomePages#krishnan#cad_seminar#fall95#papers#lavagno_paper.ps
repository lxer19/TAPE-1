URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/fall95/papers/lavagno_paper.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/fall95/fall95.html
Root-URL: http://www.cs.berkeley.edu
Title: Synthesizing Petri Nets from State-Based Models  
Author: Jordi Cortadella, Michael Kishinevsky, Luciano Lavagno and Alexandre Yakovlev 
Date: 12 April 1995  
Pubnum: Technical Report UPC-DAC-95-09  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A.V. Aho, J.E. Hopcroft, and Ullman J.D. </author> <title> The design and analysis of Computer Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> MA, </address> <year> 1974. </year>
Reference-contexts: The problem of minimizing a deterministic TS is equivalent to the state minimization problem for completely specified Finite State Machine. The complexity of this problem is O (n s log n s ), where n s is the number of blocks in the equivalent state partition <ref> [1] </ref>. One possible organization of the PN synthesis algorithm would be to minimize a TS at the first step and then to work with a minimized version of the TS. <p> A place p 2 P is called unique choice (UC) if <ref> [jp * j &gt; 1] </ref> ^ [8t 1 ; t 2 2 p*; *t 1 [ *t 2 6= fpg : t 1 and t 2 cannot be enabled simultaneously] 3 This net is actually more complex than may seem at first.
Reference: [2] <author> Rajeev Alur and David Dill. </author> <title> Automata for Modeling Real-Time Systems. </title> <booktitle> In Automata, Languages and Programming: 17th Annual Colloquium, volume 443 of Lecture Notes in Computer Science, </booktitle> <pages> pages 322-335, </pages> <year> 1990. </year> <institution> Warwick University, </institution> <month> July 16-20. </month>
Reference-contexts: This opens up an avenue for building interactive tools where a designer has the possibility to play with a PN-like specification, performing equivalent transformations of PNs, and/or transformations of other specifications into PNs under different design constraints and optimization criteria. There are well-known algorithms (see, e.g., [11], [19] or <ref> [2] </ref>) to extract a finite-state representation of the sequential behavior of a synchronous or asynchronous circuit. But a really user-friendly interaction can be achieved only by presenting the designer with a timing diagram-like PN that represents the same behavior, with explicit causality.
Reference: [3] <author> E. Badouel, L. Bernardinello, and Ph. Darondeau. </author> <title> Polynomial algorithms for the synthesis of bounded nets. </title> <type> Technical Report 2316, </type> <institution> INRIA, </institution> <address> RENNES Cedex, France, </address> <year> 1994. </year>
Reference-contexts: On the other hand, building the reachability graphs of N 1 and N 2 and then obtaining back the product net would provide a much easier and intuitive practical method for composition. The notion of regions was introduced by Nielsen et al.[28] (and developed in <ref> [3] </ref>, [5], [25]) as a basic intermediate object between state-based and event-based specifications. "State" in safe Petri nets is distributed among places: each state is a set of marked places, and each place is marked in a set of states.
Reference: [4] <author> K. van Berkel. </author> <title> Handshake circuits: an intermediary between communicating processes and VLSI. </title> <type> PhD thesis, </type> <institution> Technical University of Eindhoven, </institution> <year> 1992. </year>
Reference-contexts: The example is aimed at modelling circuits obtained from TANGRAM descriptions. TANGRAM is a CSP-like language <ref> [4] </ref> used for the synthesis of asynchronous circuits. [4], a network of handshake elements is obtained (Figure 7.1,b). The behavior of each handshake element can be described by an STG. sequencer) is obtained. <p> The example is aimed at modelling circuits obtained from TANGRAM descriptions. TANGRAM is a CSP-like language <ref> [4] </ref> used for the synthesis of asynchronous circuits. [4], a network of handshake elements is obtained (Figure 7.1,b). The behavior of each handshake element can be described by an STG. sequencer) is obtained. From the STGs of each element, synchronization places between events with the same labels are inserted (dashed places and arcs).
Reference: [5] <author> L. Bernardinello, G. De Michelis, K. Petruni, and S. Vigna. </author> <title> On synchronic structure of transition systems. </title> <type> Technical report, </type> <institution> Universita di Milano, Milano, </institution> <year> 1994. </year>
Reference-contexts: On the other hand, building the reachability graphs of N 1 and N 2 and then obtaining back the product net would provide a much easier and intuitive practical method for composition. The notion of regions was introduced by Nielsen et al.[28] (and developed in [3], <ref> [5] </ref>, [25]) as a basic intermediate object between state-based and event-based specifications. "State" in safe Petri nets is distributed among places: each state is a set of marked places, and each place is marked in a set of states. <p> Property 3.3 Every region can be represented as a union of disjoint minimal regions. Property 3.1 has been mentioned in <ref> [5] </ref> for the subclass of elementary TS. We generalize it for the complete class of elementary TS. Property 3.2 was given in [28]. Property 3.3 is a stronger refinement of the corresponding property from [5], which shows that any region can be viewed as a linear combination of the minimal regions. <p> Property 3.1 has been mentioned in <ref> [5] </ref> for the subclass of elementary TS. We generalize it for the complete class of elementary TS. Property 3.2 was given in [28]. Property 3.3 is a stronger refinement of the corresponding property from [5], which shows that any region can be viewed as a linear combination of the minimal regions. The proofs are given in the Appendix (section A.1). For each state s 2 S we define the set of non-trivial regions containing s, denoted by R s . <p> A PN which is synthesized following this procedure is called a saturated net, since all regions are mapped into the corresponding places. A saturated net is canonical, however it has a lot of redundancy. As shown in <ref> [5] </ref>, it is enough to consider only minimal regions. The net constructed from all minimal regions is also a canonical form and is called a minimal saturated net. Even a minimal saturated net can be redundant. <p> These minimal regions are called minimal pre-regions. Minimal regions which are not pre-regions are not needed, since a PN with a minimized RG is generated (see section 3.4). Also, non-minimal regions are not needed, since according to <ref> [5] </ref> a minimal saturated net has an RG which is isomorphic to the initial elementary TS. Although the original proof was given for a 11 subclass of ETS, called Condition Event Transition Systems, the result can be trivially generalized to the whole class of ETS. <p> For practical examples, only one or two iterations are usually required to converge. Obviously, the PN obtained after any splitting is split-isomorphic to the initial TS. These arguments, together with the result from <ref> [5] </ref> on isomorphism between a minimal saturated net and an elementary TS, immediately imply the correctness of our algorithms. 6 Modifications of the basic synthesis method In this section, we consider how our synthesis method can be modified in accordance with some practical modelling requirements that may be imposed by real-life
Reference: [6] <author> R. Brayton et al. </author> <title> Logic Minimisation Algorithms for VLSI Synthesis. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Hingham, MA, </address> <year> 1984. </year>
Reference: [7] <author> Randal Bryant. </author> <title> Symbolic boolean manipulation with ordered binary-decision diagrams. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(3) </volume> <pages> 293-318, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: An efficient representation of the TS and its states is thus crucial to cope with the complexity of such operations. Given an appropriate encoding of the states of the TS [31], we have chosen to use Ordered Binary Decision Diagrams <ref> [7] </ref> to represent sets of states (by means of characteristic functions) and the TS (by means of the disjunction of transition relations, one for each label).
Reference: [8] <author> T.-A. Chu. </author> <title> Synthesis of Self-timed VLSI Circuits from Graph-theoretic Specifications. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Petri Nets ([32, 26], PNs) with transitions labeled by symbols from a given alphabet (so called labeled Petri Nets) have been widely used in numerous applications: design and specifications of asynchronous circuits <ref> [35, 8, 21, 19] </ref>, resource allocation problem in operating systems and distributed computation [38], performance analysis and timing verification [17, 34], high-level design [13]. Petri Nets are popular due to their inherent ability to express both concurrent and non-deterministic behavior.
Reference: [9] <author> E. M. Clarke, D. E. Long, and K. L. McMillan. </author> <title> A language for compositional specification and verification of finite state hardware controllers. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 79(9), </volume> <month> September </month> <year> 1991. </year>
Reference: [10] <author> J. Cortadella, L. Lavagno, P. Vanbekbergen, and A.Yakovlev. </author> <title> Designing asynchronous circuits from behavioural specifications with internal conflicts. </title> <booktitle> In Proceedings of Int. Conf. on Adv. Res. in Asynch. Circ. and Syst., </booktitle> <pages> pages 106-115, </pages> <address> Salt Lake City, Utah, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: Furthermore, the actual process is essentially controlled by the designer, who might wish to avoid working with self-loop regions and prefer the label splitting option instead. The scope of the use of non-pure nets can be quite large, especially in specifications of circuits with asymmetric conflicts <ref> [10] </ref>. <p> In the net model of the stage control circuit all events are uniquely represented with true con-currency. It was then relatively straightforward to apply the technique of <ref> [10] </ref>, which systematically adds semaphores for conflict places at the PN level. Finally, implementing semaphores by mutual exclusion elements we can obtain a circuit implementation (somewhat similar to a solution recently presented by Ebergen [14]) shown in Figure 11,c.
Reference: [11] <author> O. Coudert, C. Berthet, and J. C. Madre. </author> <title> Verification of sequential machines using boolean functional vectors. </title> <editor> In L. Claesen, editor, </editor> <booktitle> Proc. IFIP Int. Workshop on Applied Formal Methods for Correct VLSI Design, </booktitle> <pages> pages 111-128, </pages> <address> Leuven, Belgium, </address> <month> November </month> <year> 1989. </year>
Reference-contexts: This opens up an avenue for building interactive tools where a designer has the possibility to play with a PN-like specification, performing equivalent transformations of PNs, and/or transformations of other specifications into PNs under different design constraints and optimization criteria. There are well-known algorithms (see, e.g., <ref> [11] </ref>, [19] or [2]) to extract a finite-state representation of the sequential behavior of a synchronous or asynchronous circuit. But a really user-friendly interaction can be achieved only by presenting the designer with a timing diagram-like PN that represents the same behavior, with explicit causality. <p> The algorithms to manipulate the sets of states of the TS are based on symbolic techniques for verification of sequential machines <ref> [11] </ref>. 5 Correctness of the algorithms In this section we prove that our algorithm for synthesis of a PN from a TS is effective and correct, i.e., given a TS it always produces an equivalent place-irredundant safe Petri Net.
Reference: [12] <author> D.L. Dill. </author> <title> Trace Theory for Automatic Hierarchical Verification of Speed-Independent Circuits. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1988. </year> <note> An ACM Distinguished Dissertation 1988. </note>
Reference-contexts: On the other hand, safe nets are also well suited for verification. State-based models are popular for formal specification and verification of complex systems (CSP [16], CCS [23, 24], FSMs <ref> [12, 20] </ref>, Burst mode automata [29]). Even the formal semantics for most of the event-based models is given via states. The drawback of state-based models is that they represent in the very same way different notions such as causality, concurrency and conflict.
Reference: [13] <author> D. Drusinsky. </author> <title> Extended state diagrams and reactive systems. </title> <journal> Dr.Dobb's Journal, </journal> <pages> pages 72-80,106-107, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: with transitions labeled by symbols from a given alphabet (so called labeled Petri Nets) have been widely used in numerous applications: design and specifications of asynchronous circuits [35, 8, 21, 19], resource allocation problem in operating systems and distributed computation [38], performance analysis and timing verification [17, 34], high-level design <ref> [13] </ref>. Petri Nets are popular due to their inherent ability to express both concurrent and non-deterministic behavior. Although checking properties and verifying Petri Nets could be difficult in general, for some subclasses of Petri Nets there are efficient verification algorithms.
Reference: [14] <author> J. Ebergen. </author> <type> personal communication. </type> <month> March </month> <year> 1995. </year>
Reference-contexts: It was then relatively straightforward to apply the technique of [10], which systematically adds semaphores for conflict places at the PN level. Finally, implementing semaphores by mutual exclusion elements we can obtain a circuit implementation (somewhat similar to a solution recently presented by Ebergen <ref> [14] </ref>) shown in Figure 11,c.
Reference: [15] <author> J. Esparza and M. Nielsen. </author> <title> Decidability issues for petri nets. Petri Nets Newsletter, </title> <booktitle> 94 </booktitle> <pages> 5-23, </pages> <year> 1994. </year>
Reference-contexts: A net is called safe if no more than one token can appear in a place. Safe nets are especially widely used in many applications, since they have simple verification algorithms <ref> [15] </ref> and simple semantics. A net is called a pure net if (p; t) 2 F implies that (t; p) 62 F , i.e., for each transition t the following condition is satisfied: t * " * t = ;.
Reference: [16] <author> C. A. R. Hoare. </author> <title> Communicating Sequential Processes. </title> <booktitle> In Communications of the ACM, </booktitle> <pages> pages 666-677, </pages> <month> August </month> <year> 1978. </year>
Reference-contexts: Safe nets have high expressive power, in particular every finite state system can be expressed as a safe labeled PN. On the other hand, safe nets are also well suited for verification. State-based models are popular for formal specification and verification of complex systems (CSP <ref> [16] </ref>, CCS [23, 24], FSMs [12, 20], Burst mode automata [29]). Even the formal semantics for most of the event-based models is given via states. The drawback of state-based models is that they represent in the very same way different notions such as causality, concurrency and conflict.
Reference: [17] <author> Henrik Hulgaard and Steven M. Burns. </author> <title> Bounded delay timing analysis of a class of CSP programs with choice. </title> <booktitle> In Proc. International Symposium on Advanced Research in Asynchronous Circuits and Systems, </booktitle> <pages> pages 2-11, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Nets ([32, 26], PNs) with transitions labeled by symbols from a given alphabet (so called labeled Petri Nets) have been widely used in numerous applications: design and specifications of asynchronous circuits [35, 8, 21, 19], resource allocation problem in operating systems and distributed computation [38], performance analysis and timing verification <ref> [17, 34] </ref>, high-level design [13]. Petri Nets are popular due to their inherent ability to express both concurrent and non-deterministic behavior. Although checking properties and verifying Petri Nets could be difficult in general, for some subclasses of Petri Nets there are efficient verification algorithms. <p> Apart from interaction with the designer, which is a major motivation for this work, we also address the issue of extracting explicit causal relations in order to be able to apply analysis and synthesis techniques which rely on explicit causality and concurrency information ([30], <ref> [17] </ref>). Moreover, classical techniques for Petri net composition ([33]) are based on the creation of a "cross-product" between transitions with the same label. Suppose that two PNs N 1 and N 2 , with n and m transitions labeled with the same name respectively, are composed.
Reference: [18] <author> R.M. Keller. </author> <title> A fundamental theorem of asynchronous parallel computation. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> 24 </volume> <pages> 103-112, </pages> <year> 1975. </year>
Reference-contexts: A TS is called minimal if it contains no equivalent states. We say that the confluence condition holds for states s and s 0 if there is a state s 00 which is reachable both from s and s 0 <ref> [18] </ref>. Note that according to the definition of reachability s 00 can coincide with s or s 0 .
Reference: [19] <author> M. Kishinevsky, A. Kondratyev, A. Taubin, and V. Varshavsky. </author> <title> Concurrent Hardware: The Theory and Practice of Self-Timed Design. </title> <publisher> John Wiley and Sons, </publisher> <address> London, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction Petri Nets ([32, 26], PNs) with transitions labeled by symbols from a given alphabet (so called labeled Petri Nets) have been widely used in numerous applications: design and specifications of asynchronous circuits <ref> [35, 8, 21, 19] </ref>, resource allocation problem in operating systems and distributed computation [38], performance analysis and timing verification [17, 34], high-level design [13]. Petri Nets are popular due to their inherent ability to express both concurrent and non-deterministic behavior. <p> This opens up an avenue for building interactive tools where a designer has the possibility to play with a PN-like specification, performing equivalent transformations of PNs, and/or transformations of other specifications into PNs under different design constraints and optimization criteria. There are well-known algorithms (see, e.g., [11], <ref> [19] </ref> or [2]) to extract a finite-state representation of the sequential behavior of a synchronous or asynchronous circuit. But a really user-friendly interaction can be achieved only by presenting the designer with a timing diagram-like PN that represents the same behavior, with explicit causality. <p> g; a ffi = fr 3 ; r 7 g; b ffi = fr 3 ; r 8 g; c ffi = fr 4 ; r 6 g. 3.2 Excitation regions and switching regions While regions in a TS are related to places in the corresponding PN, an excitation region <ref> [19] </ref> for event a is a maximal set of states in which transition a is enabled. Therefore, excitation regions are related to transitions of the PN.
Reference: [20] <author> R. P. Kurshan. </author> <title> Analysis of discrete event coordination. </title> <booktitle> In Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: On the other hand, safe nets are also well suited for verification. State-based models are popular for formal specification and verification of complex systems (CSP [16], CCS [23, 24], FSMs <ref> [12, 20] </ref>, Burst mode automata [29]). Even the formal semantics for most of the event-based models is given via states. The drawback of state-based models is that they represent in the very same way different notions such as causality, concurrency and conflict.
Reference: [21] <author> L. Lavagno and A. Sangiovanni-Vincentelli. </author> <title> Algorithms for synthesis and testing of asynchronous circuits. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction Petri Nets ([32, 26], PNs) with transitions labeled by symbols from a given alphabet (so called labeled Petri Nets) have been widely used in numerous applications: design and specifications of asynchronous circuits <ref> [35, 8, 21, 19] </ref>, resource allocation problem in operating systems and distributed computation [38], performance analysis and timing verification [17, 34], high-level design [13]. Petri Nets are popular due to their inherent ability to express both concurrent and non-deterministic behavior.
Reference: [22] <author> B. Lin and F. Somenzi. </author> <title> Minimization of symbolic relations. </title> <booktitle> In Proc. of the IEEE Int. Conf. on Computer-Aided Design, </booktitle> <pages> pages 88-91, </pages> <address> Santa Clara, CA, </address> <month> November </month> <year> 1990. </year> <month> 25 </month>
Reference-contexts: There is another possible solution (fr 6 ; r 7 g), but it has non-minimum cost. A BDD-based method similar to that of <ref> [22] </ref> has been implemented.
Reference: [23] <author> Robin Milner. </author> <title> A calculus of communication systems. </title> <booktitle> In Lecture Notes in Computer Science, </booktitle> <volume> volume 92. </volume> <publisher> Springer-Verlag, </publisher> <year> 1980. </year>
Reference-contexts: Safe nets have high expressive power, in particular every finite state system can be expressed as a safe labeled PN. On the other hand, safe nets are also well suited for verification. State-based models are popular for formal specification and verification of complex systems (CSP [16], CCS <ref> [23, 24] </ref>, FSMs [12, 20], Burst mode automata [29]). Even the formal semantics for most of the event-based models is given via states. The drawback of state-based models is that they represent in the very same way different notions such as causality, concurrency and conflict. <p> Such extensions allow us to preserve our region derivation techniques and therefore do not affect much the overall net synthesis process. Finally, introducing dummy events, i.e., events whose occurrence cannot be observed through the normal labeled trace equivalence (dummy events are equivalent to silent actions in <ref> [23] </ref>), presents a very efficient way to synthesize PNs with true concurrency. Further, in Section 7 we show the practical significance of these extensions deriving a PN specification of a stage control circuit in a counterflow pipeline. The original description [36] of the stage control was a non-elementary TS. <p> In this transformation we rely on the fact that the bi-simulation equivalence is preserved when a dummy event is introduced <ref> [23] </ref> into the TS. We illustrate the effect of introducing dummy events using another practical design example. The TS shown in Figure 8,b defines the behavior of a cell of a cascaded "non-resetting" arbiter.
Reference: [24] <author> Robin Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice-Hall, </publisher> <year> 1989. </year>
Reference-contexts: Safe nets have high expressive power, in particular every finite state system can be expressed as a safe labeled PN. On the other hand, safe nets are also well suited for verification. State-based models are popular for formal specification and verification of complex systems (CSP [16], CCS <ref> [23, 24] </ref>, FSMs [12, 20], Burst mode automata [29]). Even the formal semantics for most of the event-based models is given via states. The drawback of state-based models is that they represent in the very same way different notions such as causality, concurrency and conflict.
Reference: [25] <author> M. Mukund. </author> <title> Petri nets and step transition systems. </title> <journal> Int. Journal of Foundations of Computer Science, </journal> <volume> 3(4) </volume> <pages> 443-478, </pages> <year> 1992. </year>
Reference-contexts: On the other hand, building the reachability graphs of N 1 and N 2 and then obtaining back the product net would provide a much easier and intuitive practical method for composition. The notion of regions was introduced by Nielsen et al.[28] (and developed in [3], [5], <ref> [25] </ref>) as a basic intermediate object between state-based and event-based specifications. "State" in safe Petri nets is distributed among places: each state is a set of marked places, and each place is marked in a set of states.
Reference: [26] <author> T. Murata. </author> <title> Petri Nets: Properties, analysis and applications. </title> <booktitle> Proceedings of the IEEE, </booktitle> <pages> pages 541-580, </pages> <month> April </month> <year> 1989. </year>
Reference: [27] <author> T. Murata. </author> <title> Petri nets: Properties, analysis and applications. </title> <booktitle> Proceedings of IEEE, </booktitle> <volume> 77(4) </volume> <pages> 541-580, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: Otherwise, a TS is called non-deterministic. 4 2.2 Petri Nets In this section we give a definition of Petri Nets and Elementary Nets and compare their expressive power. A Petri Net <ref> [32, 27] </ref> is a quadruple N = (P; T; F; m 0 ), where P is a finite set of places, T is a finite set of transitions, F (P fi T ) [ (T fi P ) is the flow relation, and m 0 is the initial marking.
Reference: [28] <author> M. Nielsen, G. Rozenberg, and P.S. Thiagarajan. </author> <title> Elementary transition systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 96 </volume> <pages> 3-33, </pages> <year> 1992. </year>
Reference-contexts: Section 6 proposes extensions of the basic method to cope with a broader class of specifications. Section 7 shows the experimental results obtained by a practical application of the proposed methodology. Section 8 concludes the paper. 2 Models 2.1 Transition systems A transition system (TS) is a quadruple <ref> [28] </ref> T S = (S; E; T; s in ), where S is a finite non-empty set of states, E is a set of events, T S fi E fi S is a transition relation, and s in is an initial state. <p> Property 3.1 If r and r 0 are two different regions such that r 0 is a subregion of r, then r r 0 is a region. Property 3.2 <ref> [28] </ref> A set of states, r, is a region, if and only if its coset r = S r is a region, where S is a set of all states of the TS. Property 3.3 Every region can be represented as a union of disjoint minimal regions. <p> Property 3.3 Every region can be represented as a union of disjoint minimal regions. Property 3.1 has been mentioned in [5] for the subclass of elementary TS. We generalize it for the complete class of elementary TS. Property 3.2 was given in <ref> [28] </ref>. Property 3.3 is a stronger refinement of the corresponding property from [5], which shows that any region can be viewed as a linear combination of the minimal regions. The proofs are given in the Appendix (section A.1). <p> The corresponding GSR for event a is GSR (a) = fs 2 ; s 6 g. 3.3 Elementary Transition Systems 3.3.1 Axioms for Elementary Transition Systems A TS T S = (S; E; T; s in ) is called elementary <ref> [28] </ref> (ETS) if it satisfies, in addition to (A1) - (A4), the following two axioms about regions: A5. State separation property: 8s; s 0 2 S : [R s = R s 0 ) s = s 0 ]; A6. <p> Let us consider event a. The only pre-region of a is region fs 1 ; s 3 ; s 5 ; s 7 g. Therefore ffi e R s 7 , but there is no transition labeled with a from s 7 . It has been shown in <ref> [28] </ref> that if a TS is elementary, then an EN with a reachability graph isomorphic to the TS can be constructed. Vice-versa, a RG of an EN is always an elementary TS. <p> The procedure given by <ref> [28] </ref> to synthesize a Petri net from an ETS is as follows: * For each event a a transition labeled with a is generated in the PN; * For each region r i a place p i is generated; * Place p i contains a token in the initial marking m
Reference: [29] <author> S. M. Nowick and D. L. Dill. </author> <title> Automatic synthesis of locally-clocked asynchronous state machines. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1991. </year>
Reference-contexts: On the other hand, safe nets are also well suited for verification. State-based models are popular for formal specification and verification of complex systems (CSP [16], CCS [23, 24], FSMs [12, 20], Burst mode automata <ref> [29] </ref>). Even the formal semantics for most of the event-based models is given via states. The drawback of state-based models is that they represent in the very same way different notions such as causality, concurrency and conflict.
Reference: [30] <author> E. Pastor and J. Cortadella. </author> <title> Polynomial algorithms for the synthesis of hazard-free circuits from signal transition graphs. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1993. </year>
Reference: [31] <author> E. Pastor, O. Roig, J. Cortadella, and R. Badia. </author> <title> Petri net analysis using boolean manipulation. </title> <booktitle> In 15th International Conference on Application and Theory of Petri Nets, </booktitle> <address> Zaragoza, Spain, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Moreover, operations such as intersection, inclusion and equality among the explored sets must be executed often. An efficient representation of the TS and its states is thus crucial to cope with the complexity of such operations. Given an appropriate encoding of the states of the TS <ref> [31] </ref>, we have chosen to use Ordered Binary Decision Diagrams [7] to represent sets of states (by means of characteristic functions) and the TS (by means of the disjunction of transition relations, one for each label).
Reference: [32] <author> C. A. </author> <title> Petri. Kommunikation mit Automaten. </title> <type> PhD thesis, </type> <institution> Bonn, Institut fur Instrumentelle Mathematik, </institution> <year> 1962. </year> <note> (technical report Schriften des IIM Nr. 3). </note>
Reference-contexts: Otherwise, a TS is called non-deterministic. 4 2.2 Petri Nets In this section we give a definition of Petri Nets and Elementary Nets and compare their expressive power. A Petri Net <ref> [32, 27] </ref> is a quadruple N = (P; T; F; m 0 ), where P is a finite set of places, T is a finite set of transitions, F (P fi T ) [ (T fi P ) is the flow relation, and m 0 is the initial marking.
Reference: [33] <author> I. Reicher and M. Yoeli. </author> <title> Net-based modeling of communicating parallel processes with applications to VLSI design. </title> <type> Technical Report 532, </type> <institution> Technion, Haifa, </institution> <year> 1988. </year>
Reference: [34] <author> T. G. Rokicki. </author> <title> Representing and Modeling Digital Circuits. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1993. </year>
Reference-contexts: Nets ([32, 26], PNs) with transitions labeled by symbols from a given alphabet (so called labeled Petri Nets) have been widely used in numerous applications: design and specifications of asynchronous circuits [35, 8, 21, 19], resource allocation problem in operating systems and distributed computation [38], performance analysis and timing verification <ref> [17, 34] </ref>, high-level design [13]. Petri Nets are popular due to their inherent ability to express both concurrent and non-deterministic behavior. Although checking properties and verifying Petri Nets could be difficult in general, for some subclasses of Petri Nets there are efficient verification algorithms.
Reference: [35] <author> L. Y. Rosenblum and A. V. Yakovlev. </author> <title> Signal graphs: from self-timed to timed ones. </title> <booktitle> In International Workshop on Timed Petri Nets, </booktitle> <address> Torino, Italy, </address> <year> 1985. </year>
Reference-contexts: 1 Introduction Petri Nets ([32, 26], PNs) with transitions labeled by symbols from a given alphabet (so called labeled Petri Nets) have been widely used in numerous applications: design and specifications of asynchronous circuits <ref> [35, 8, 21, 19] </ref>, resource allocation problem in operating systems and distributed computation [38], performance analysis and timing verification [17, 34], high-level design [13]. Petri Nets are popular due to their inherent ability to express both concurrent and non-deterministic behavior.
Reference: [36] <author> R.F. Sproull, I.E. Sutherland, and C.E. Molnar. </author> <title> The counterflow pipeline processor architecture. </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <pages> pages 48-59, </pages> <month> Fall </month> <year> 1994. </year>
Reference-contexts: Further, in Section 7 we show the practical significance of these extensions deriving a PN specification of a stage control circuit in a counterflow pipeline. The original description <ref> [36] </ref> of the stage control was a non-elementary TS. As a result of our PN synthesis, we obtain an implementation of the stage control, by means of syntactic transformation of the PN model to a two-phase [37] asynchronous circuit. <p> was obtained for the circuit depicted in 7.2 Counterflow pipeline processor: stage control circuit In this section, we briefly outline the process of deriving a PN specification and its circuit implementation for a stage control circuit in a counterflow pipeline processor (for a complete description of the architecture refer to <ref> [36] </ref>). Although some of the steps were assisted by hand, our net synthesis approach played a key methodological role. The original behavioral description of the stage control was given by Molnar in the form of a TS.
Reference: [37] <author> I. E. Sutherland. </author> <title> Micropipelines. </title> <journal> Communications of the ACM, </journal> <month> June </month> <year> 1989. </year> <note> Turing Award Lecture. </note>
Reference-contexts: The original description [36] of the stage control was a non-elementary TS. As a result of our PN synthesis, we obtain an implementation of the stage control, by means of syntactic transformation of the PN model to a two-phase <ref> [37] </ref> asynchronous circuit. Avoiding excessive formalism, our discussion will significantly rely on the use of some "real" design examples. 6.1 Non-pure nets Consider the following example. A cell of a token-ring arbiter, together with its behavioral description, in the form of a TS, is shown in Figure 7,a,b.
Reference: [38] <editor> D.C. Tsichritzis and P.A. </editor> <booktitle> Bernstein. Operating Systems. </booktitle> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1974. </year> <month> 26 </month>
Reference-contexts: 1 Introduction Petri Nets ([32, 26], PNs) with transitions labeled by symbols from a given alphabet (so called labeled Petri Nets) have been widely used in numerous applications: design and specifications of asynchronous circuits [35, 8, 21, 19], resource allocation problem in operating systems and distributed computation <ref> [38] </ref>, performance analysis and timing verification [17, 34], high-level design [13]. Petri Nets are popular due to their inherent ability to express both concurrent and non-deterministic behavior. Although checking properties and verifying Petri Nets could be difficult in general, for some subclasses of Petri Nets there are efficient verification algorithms.
References-found: 38

