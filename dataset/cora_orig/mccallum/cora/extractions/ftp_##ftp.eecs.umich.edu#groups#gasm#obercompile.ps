URL: ftp://ftp.eecs.umich.edu/groups/gasm/obercompile.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.cs.umich.edu
Title: SPECIFICATION OF AN OBERON COMPILER BY MEANS OF A TYPED GUREVICH MACHINE  
Author: Alexandre Zamulin 
Note: Novosibirsk 1997  
Affiliation: Siberian Division of the Russian Academy of Sciences Institute of Informatics Systems  
Abstract: Technical report No. 589.3945009.00007-01 Supported by the Russian Foundation for Basic Research grant No 95-01-00878 
Abstract-found: 1
Intro-found: 1
Reference: [BBB85] <author> F.L. Bauer, R. Berghammer, M. Broy, </author> <title> ea. The Munich project CIP. Volume I: The wide spectrum language CIP-L. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <address> v.183, Berlin: </address> <publisher> Springer 1985 </publisher>
Reference-contexts: Detached operation specifications introduce operators do not belonging to definite kinds or data types (control structures, for example). An entity-structured signature is generally a signature of a many-sorted algebra. Ruslan is based on the concept of loose semantics <ref> [BBB85] </ref>, i.e., any algebra satisfying the equation of a specification is regarded as its model. The Typed Gurevich Machine used in the document possesses a number of transition rules indicating in which way one algebra of a given signature can be transformed into another algebra of the same signature. <p> We regard an entity specification as an abstract entity in the sense that any implementation satisfying the equations is allowed. This is known as loose semantics <ref> [BBB85] </ref>. According to this, a specification methodology known as behavioral approach first advocated in [GH78] is used. In this case, the set of entity operations is divided into two groups: constructors and observers.
Reference: [BFG93] <author> M.Broy, C.Facchi, R.Grosu, </author> <title> ea. The Requirement and Design Specification, Language Spectrum, An Informal Introduction, </title> <type> Version 1.0. </type> <institution> Technische Universitaet Muenchen, Instituet fuer Informatik, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: Moreover, a modern programming language usually has a set of type constructors (record type, array type, etc.) permitting to create new types using existing types. Sort constructors have been introduced in <ref> [BFG93] </ref> to model this language feature. However, data types created by the same type constructor have a common structure and can be objects of dedicated operations over data types. Kinds have been proposed in [Car88] to help to regard data types as objects of certain kinds.
Reference: [BG81] <author> Burstall R.M. and Goguen J.A. </author> <title> Algebras, Theories, and Freeness: An Introduction for Computer Scientists. </title> <booktitle> Proc. Marktoberdorf Summer School on Theoretical Foundations of Programming Methodology, </booktitle> <month> August, </month> <year> 1981. </year>
Reference-contexts: Moreover, the specification is a big document with hundreds of lines of equations. Therefore, the specification is likely to contain plenty of bugs and has to be debugged as any complex program. 2. Basic definitions 2.1. Signatures, algebras, theories The main algebraic notions are given in <ref> [BG81] </ref> in the following way. Def . A signature, S, is a pair, &lt;S, W&gt;, where S is a set (of sorts) and W is a family of sets (of operators) indexed by S * S. Def . Let S be a signature.
Reference: [Car88] <author> L.Cardelli. </author> <title> Types for Data-Oriented Languages. </title> <booktitle> Lecture Notes in Computer Science, 1988, v. </booktitle> <volume> 303, </volume> <pages> pp. 1-15. </pages>
Reference-contexts: A Typed Gurevich Machine [Zam97] based on the specification language Ruslan [Zam94a, Zam94b], Evolving Algebra approach [Gur93], and Algebraic Specifications with Implicit State [DG93] is used for this purpose. To provide facilities for the specification of complex data structures, Ruslan includes, besides data types, such constructions as kinds <ref> [Car88] </ref> and type classes [WB89]. Kinds are "types of types", they provide operations for constructing and manipulating data types. A type class characterizes a set of types (possibly of different kinds) with common operations. <p> Sort constructors have been introduced in [BFG93] to model this language feature. However, data types created by the same type constructor have a common structure and can be objects of dedicated operations over data types. Kinds have been proposed in <ref> [Car88] </ref> to help to regard data types as objects of certain kinds. This idea can be used for formal definition of type constructors and operations over data types. Kinds provide a vertical splitting of data types into various groups.
Reference: [DG93] <author> P. Dauchy and M.C. </author> <title> Gaudel, Implicit State in Algebraic Specifications. </title> <booktitle> International Workshop on Information Systems - Correctness and Reusability (IS-CORE'93), Informatik-Berichte, 1993, </booktitle> <volume> No 01/93. </volume>
Reference-contexts: 1. Introduction This document presents a formal definition of Oberon [Wir90] semantics. A Typed Gurevich Machine [Zam97] based on the specification language Ruslan [Zam94a, Zam94b], Evolving Algebra approach [Gur93], and Algebraic Specifications with Implicit State <ref> [DG93] </ref> is used for this purpose. To provide facilities for the specification of complex data structures, Ruslan includes, besides data types, such constructions as kinds [Car88] and type classes [WB89]. Kinds are "types of types", they provide operations for constructing and manipulating data types.
Reference: [GH78] <author> J.Guttag, J.J.Horning. </author> <title> The algebraic specification of abstract data types. </title> <journal> Acta Informatika, 1978, v.10, </journal> <volume> No.1, </volume> <pages> pp. 27-52. </pages>
Reference-contexts: We regard an entity specification as an abstract entity in the sense that any implementation satisfying the equations is allowed. This is known as loose semantics [BBB85]. According to this, a specification methodology known as behavioral approach first advocated in <ref> [GH78] </ref> is used. In this case, the set of entity operations is divided into two groups: constructors and observers. The constructor yields a value of the entity being specified and the observer yields a value of a primitive entity.
Reference: [Gur93] <author> Y. Gurevich. </author> <title> Evolving Algebras 1993: Lipary Guide. Specification and Validation Methods, </title> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference-contexts: 1. Introduction This document presents a formal definition of Oberon [Wir90] semantics. A Typed Gurevich Machine [Zam97] based on the specification language Ruslan [Zam94a, Zam94b], Evolving Algebra approach <ref> [Gur93] </ref>, and Algebraic Specifications with Implicit State [DG93] is used for this purpose. To provide facilities for the specification of complex data structures, Ruslan includes, besides data types, such constructions as kinds [Car88] and type classes [WB89].
Reference: [WB89] <author> P. Wadler and S. Blott. </author> <title> How to make ad-hoc polymorphism less ad-hoc. </title> <booktitle> Conf. Record of the 16th ACM Annual Symp. on Principles of _ Progr. </booktitle> <address> Lang., Austin, Texas, </address> <month> January </month> <year> 1989. </year>
Reference-contexts: To provide facilities for the specification of complex data structures, Ruslan includes, besides data types, such constructions as kinds [Car88] and type classes <ref> [WB89] </ref>. Kinds are "types of types", they provide operations for constructing and manipulating data types. A type class characterizes a set of types (possibly of different kinds) with common operations. Entity-structured signatures, algebras, and specifications are elaborated to provide a theoretical background for kinds, data types, and type classes. <p> This idea can be used for formal definition of type constructors and operations over data types. Kinds provide a vertical splitting of data types into various groups. On the other hand, the data types sharing some common operations can be combined into various type classes <ref> [WB89] </ref> or type subtypes [Zam89]. This facility provides a horizontal splitting of the data type community into various groups. This feature should also be taken into account when a data type theory is developed.
Reference: [Wir90] <author> N. Wirth. </author> <title> The Programming Language Oberon (Revised edition). </title> <institution> Department Informatik, Institut fur Computersysteme, ETH, </institution> <address> Zurich, </address> <year> 1990. </year>
Reference-contexts: 1. Introduction This document presents a formal definition of Oberon <ref> [Wir90] </ref> semantics. A Typed Gurevich Machine [Zam97] based on the specification language Ruslan [Zam94a, Zam94b], Evolving Algebra approach [Gur93], and Algebraic Specifications with Implicit State [DG93] is used for this purpose.
Reference: [Zam89] <author> Zamulin A.V. </author> <title> The Database Programming Language Atlant. </title> <institution> University of Glasgow, Department of Computing Science, Research report CSC/89/R13, </institution> <month> June </month> <year> 1989. </year>
Reference-contexts: This idea can be used for formal definition of type constructors and operations over data types. Kinds provide a vertical splitting of data types into various groups. On the other hand, the data types sharing some common operations can be combined into various type classes [WB89] or type subtypes <ref> [Zam89] </ref>. This facility provides a horizontal splitting of the data type community into various groups. This feature should also be taken into account when a data type theory is developed.
Reference: [Zam94a] <author> A.V. Zamulin. </author> <title> The Database Specification Language RUSLAN (preliminary communication). </title> <institution> Siberian Division of the Russian Academy of Sciences, Institute of Informatics Systems, </institution> <type> Preprint 28, </type> <note> Novosibirsk 1994. (Available electronically by anonymous ftp from math.tulane.edu, directory "pub/zamulin", file "Ruslan1.ps.Z"). </note>
Reference-contexts: 1. Introduction This document presents a formal definition of Oberon [Wir90] semantics. A Typed Gurevich Machine [Zam97] based on the specification language Ruslan <ref> [Zam94a, Zam94b] </ref>, Evolving Algebra approach [Gur93], and Algebraic Specifications with Implicit State [DG93] is used for this purpose. To provide facilities for the specification of complex data structures, Ruslan includes, besides data types, such constructions as kinds [Car88] and type classes [WB89].
Reference: [Zam94b] <author> A.V. Zamulin. </author> <title> The Database Specification Language RUSLAN (specification 117 examples). </title> <institution> Siberian Division of the Russian Academy of Sciences, Institute of Informatics Systems, </institution> <type> Preprint 29, </type> <note> Novosibirsk 1994. (Available electronically by anonymous ftp from math.tulane.edu, directory "pub/zamulin", file "Ruslan2.ps.Z"). </note>
Reference-contexts: 1. Introduction This document presents a formal definition of Oberon [Wir90] semantics. A Typed Gurevich Machine [Zam97] based on the specification language Ruslan <ref> [Zam94a, Zam94b] </ref>, Evolving Algebra approach [Gur93], and Algebraic Specifications with Implicit State [DG93] is used for this purpose. To provide facilities for the specification of complex data structures, Ruslan includes, besides data types, such constructions as kinds [Car88] and type classes [WB89].

References-found: 12

