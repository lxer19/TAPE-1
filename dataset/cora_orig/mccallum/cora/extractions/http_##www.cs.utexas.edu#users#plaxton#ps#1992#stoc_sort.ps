URL: http://www.cs.utexas.edu/users/plaxton/ps/1992/stoc_sort.ps
Refering-URL: http://www.cs.utexas.edu/users/plaxton/html/abc.html
Root-URL: 
Title: A Hypercubic Sorting Network with Nearly Logarithmic Depth  
Author: C. Greg Plaxton 
Keyword: lg lg n) lg n-depth hypercubic sorting  
Note: networks. Note that this depth is o(lg 1+* n) for any constant &gt; 0.  
Address: Austin  
Affiliation: Department of Computer Science University of Texas at  
Abstract: A natural class of "hypercubic" sorting networks is defined. The regular structure of these sorting networks allows for elegant and efficient implementations on any of the so-called hypercubic networks (e.g., the hypercube, shu*e-exchange, butterfly, and cube-connected cycles). This class of sorting networks contains Batcher's O(lg 2 n)-depth bitonic sort, but not the O(lg n)-depth sorting network of Ajtai, Komlos, and Szemeredi. In fact, no o(lg 2 n)- depth compare-interchange sort was previously known for any of the hypercubic networks. In this paper, we prove the existence of a family of 2 O( p
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Ajtai, J. Komlos, and E. Szemeredi. </author> <title> An O(n log n) sorting network. </title> <journal> Combinatorica, </journal> <volume> 3 </volume> <pages> 1-19, </pages> <year> 1983. </year>
Reference-contexts: One source of the difficulty of this particular exercise was subsequently revealed by Aj- tai, Komlos, and Szemeredi <ref> [1] </ref>, who provided an optimal O (lg n)-depth sorting network construction (hereinafter referred to as the "AKS sorting network"). While the AKS sorting network represents a major theoretical breakthrough, it suffers from two significant shortcomings.
Reference: [2] <author> K. E. Batcher. </author> <title> Sorting networks and their applications. </title> <booktitle> In Proceedings of the AFIPS Spring Joint Computer Conference, </booktitle> <volume> vol. 32, </volume> <pages> pages 307-314, </pages> <year> 1968. </year>
Reference-contexts: Hence the well-known (n lg n) sequential lower bound for comparison-based sorting implies an (lg n) lower bound on the depth of any n-input sorting network. An elegant O (lg 2 n)- depth upper bound is given by Batcher's bitonic sorting network <ref> [2] </ref>. For small values of n, the depth of bitonic sort either matches or is very close to matching that of the best constructions known (a very limited number of which are known to be optimal) [6].
Reference: [3] <author> V. E. </author> <title> Benes. Optimal rearrangeable multi-stage connecting networks. </title> <journal> Bell System Technical Journal, </journal> <volume> 43 </volume> <pages> 1641-1656, </pages> <year> 1964. </year>
Reference-contexts: Formally, we have () = 0kn k : For any permutation in (2 d ), let N denote the 2 d -input hypercubic comparator network of depth 2d 1 based on Benes permutation routing <ref> [3] </ref>. Note that of the four operations f0; 1; +; g defined in the introduction, only f0; 1g are used in N . Several variable names are used throughout the paper.
Reference: [4] <author> V. Chvatal. </author> <type> Personal communication. </type>
Reference-contexts: This section describes how to use a comparator network N that sorts most inputs to construct a high- order merging network, that is, a k-way merging network for some k 2. A similar technique has recently been used by Ajtai, Komlos, and Szemeredi <ref> [4] </ref> as part of an improved version of their original sorting network construction. The multiplicative constant associated with the new construction is significantly lower than the constant established by Paterson [8]. The following lemma represents a slight generalization of the 0-1 principle cited in Section 1.
Reference: [5] <author> R. E. Cypher. </author> <title> Theoretical aspects of VLSI pin limitations. </title> <type> Technical Report RJ7115, </type> <institution> IBM Almaden Research Center, </institution> <month> November </month> <year> 1989. </year>
Reference-contexts: Second, the structure of the network is sufficiently "irregular" that it does not seem to map efficiently to common interconnection schemes. In fact, Cypher has proven that any emulation of the AKS network on the cube-connected cycles (a hypercubic network) requires (lg 2 n) time <ref> [5] </ref>. The latter issue is of significant interest, since a primary motivation for considering the problem of constructing small-depth sorting networks is to obtain a fast parallel sorting algorithm for a general-purpose parallel computer.
Reference: [6] <author> D. E. Knuth. </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> volume 3. </volume> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1973. </year>
Reference-contexts: In fact, any n-input comparator network that sorts the 2 n n-tuples of f0; 1g n is an n-input sorting network. The latter observation is known as the 0-1 principle for sorting networks <ref> [6] </ref>. It is natural to consider the problem of constructing sorting networks of optimal depth. Note that at most bn=2c comparisons can be performed at any given level of a comparator network. <p> For small values of n, the depth of bitonic sort either matches or is very close to matching that of the best constructions known (a very limited number of which are known to be optimal) <ref> [6] </ref>. Thus, one might suspect the depth of Batcher's bitonic sorting network to be optimal to within a constant factor, or perhaps even to within a lower-order additive term.
Reference: [7] <author> F. T. Leighton and C. G. Plaxton. </author> <title> A (fairly) simple circuit that (usually) sorts. </title> <booktitle> In Proceedings of the 31st Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 264-274, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: In other words, it would be highly desirable to identify a small-depth sorting network that could be implemented efficiently on a network that is also useful for performing operations other than sorting. In <ref> [7] </ref>, Leighton and Plaxton pursue a novel approach towards circumventing the two shortcomings of the AKS network mentioned above. They consider the construction of small-depth "probabilistic" sorting networks that sort most, but not all, of the n! possible permutations. <p> Note that ffi is not a constant, but a function of d. However, for d 2, ffi is bounded from above and below by constants since ffi fl =2 ffi ffi fl . Theorem 1 below does not appear in <ref> [7] </ref>, but it can be proven relatively easily given the techniques developed in that paper. Note that the theorem expresses a trade-off between the sorting power of a network and its depth; this trade-off is controlled by the choices of k and f . <p> of depth S (k) + fi (d + (d k)f (d)) such that jSort (N ) " (n)j (1 O (n 3 2 2 ffik ))n!: We begin our progress towards a proof of The- orem 1 by considering the following essential lemma adapted from the "butterfly tournament" analysis of <ref> [7] </ref>. Lemma 3.1 Let n = 2 d for some nonnegative integer d, let fl = 1 2 3f (d) , and let X = [n]. <p> Proof: This lemma is adapted from Theorem 1 of <ref> [7] </ref>, with two main changes. First, while the original theorem set fl to a particular constant (approximately 0.822) less than 1, it is now being set to 1 2 3f (d) . <p> These changes do not result from any new techniques for analyzing the behavior of butterfly comparator networks. Rather, they reflect a trade-off between the value of fl and the probability of failure. For the application described in <ref> [7] </ref> (a 7:44 lg n-depth network that sorts a randomly chosen input permutation with very high probability), the best trade-off is obtained by setting fl to the smallest possible value for which the probability of failure is less than 2 2 *d for some constant * &gt; 0. <p> For the present application, we prefer to allow fl to approach 1 in order to obtain a very small probability of failure. We now indicate how to adapt the arguments of <ref> [7] </ref>, which led to a "low" fl, "high" probability of failure result, to obtain the desired "high" fl, "low" probability of failure result. [Unfortu- nately, the proof provided in [7] is rather lengthy, and so it will not be reproduced in its entirety.] We first modify the statement of Lemma 3.4 <p> We now indicate how to adapt the arguments of <ref> [7] </ref>, which led to a "low" fl, "high" probability of failure result, to obtain the desired "high" fl, "low" probability of failure result. [Unfortu- nately, the proof provided in [7] is rather lengthy, and so it will not be reproduced in its entirety.] We first modify the statement of Lemma 3.4 of [7]. The revised claim is that at most n 11=f (d) of the h ff (p; q)'s can exceed n ffi fl + 1 f (d) . <p> led to a "low" fl, "high" probability of failure result, to obtain the desired "high" fl, "low" probability of failure result. [Unfortu- nately, the proof provided in <ref> [7] </ref> is rather lengthy, and so it will not be reproduced in its entirety.] We first modify the statement of Lemma 3.4 of [7]. The revised claim is that at most n 11=f (d) of the h ff (p; q)'s can exceed n ffi fl + 1 f (d) . <p> If this bound did not hold then we would have H (d; p; q) &gt; n 11=f (d) n ffi fl +1=f (d) On the other hand, setting = 3 we find that r fl p 2)=16 (as discussed in <ref> [7] </ref>), and hence H 3 (d; p; q) (r fl = n lg (10+7 2)4 p Note that the constant ffi fl has been defined in such a way that the preceding upper and lower bounds on H 3 (d; p; q) yield the desired contradiction. <p> For each output ff in X n Y , we 5 can now argue as in <ref> [7] </ref> that v ff u ff 2n ffi n 3f (d) 2 In what follows, let i denote the integer corresponding to the binary string ff. By definition, we have g i (u ff ) = 2 n ffi and g i (v ff ) = . <p> By definition, we have g i (u ff ) = 2 n ffi and g i (v ff ) = . Thus, the reasoning used to prove Lemma 3.2 of <ref> [7] </ref> gives f i (bu ff nc) = O ( p ) p ). Lemma 3.1 of [7] implies that output i will have rank k in the range bu ff nc k &lt; dv ff ne with probability 1 O ( n2 n ffi ). <p> By definition, we have g i (u ff ) = 2 n ffi and g i (v ff ) = . Thus, the reasoning used to prove Lemma 3.2 of <ref> [7] </ref> gives f i (bu ff nc) = O ( p ) p ). Lemma 3.1 of [7] implies that output i will have rank k in the range bu ff nc k &lt; dv ff ne with probability 1 O ( n2 n ffi ). <p> Since jX n Y j jXj = n, these bounds will hold for all binary strings ff in X n Y simultaneously with probability 1O (n 3=2 2 n ffi ). Following <ref> [7] </ref>, the desired permutation can now be constructed by sorting the outputs according to the p ff 's. This completes the proof of Lemma 3.1. With the preceding lemma in hand, we are now able to sketch the proof of Theorem 1. <p> This completes the proof of Lemma 3.1. With the preceding lemma in hand, we are now able to sketch the proof of Theorem 1. As in the proof of Lemma 3.1, we will not reproduce in detail those arguments which are treated at length in <ref> [7] </ref>, but will focus our discussion on the additional insights needed to establish Theorem 1. Given a comparator network N and an input permutation , we say that N sorts to within positions if every output i receives a value in the range i to i + . <p> In <ref> [7] </ref>, it is shown that an n-input comparator network N 0 consisting of: (i) the network N , followed by (ii) some fixed permutation 0 (for a hypercubic construction, this can be implemented with the network N 0 ), followed by (iii) a set of disjoint binary tree insertion networks applied
Reference: [8] <author> M. S. Paterson. </author> <title> Improved sorting networks with O(log n) depth. </title> <journal> Algorithmica, </journal> <volume> 5 </volume> <pages> 75-92, </pages> <year> 1990. </year>
Reference-contexts: A similar technique has recently been used by Ajtai, Komlos, and Szemeredi [4] as part of an improved version of their original sorting network construction. The multiplicative constant associated with the new construction is significantly lower than the constant established by Paterson <ref> [8] </ref>. The following lemma represents a slight generalization of the 0-1 principle cited in Section 1. Lemma 4.1 Let N denote an n-input comparator network. Let X f0; 1g n and let Y = f 2 (n) j () Xg: Then X Sort (N ) implies Y Sort (N ).
Reference: [9] <author> C. G. Plaxton and T. Suel. </author> <title> A lower bound for sorting networks based on the shu*e per-mutation. </title> <booktitle> In Proceedings of the 4th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 70-79, </pages> <month> June </month> <year> 1992. </year> <month> 12 </month>
Reference-contexts: Batcher's bitonic sort provides an O (lg 2 n) upper bound for this problem, and in a recent paper, Plaxton and Suel <ref> [9] </ref> have established an (lg 2 n= lg lg n) lower bound.
References-found: 9

