URL: http://www.cs.clemson.edu/~malloy/papers/education/aseet95.ps
Refering-URL: http://www.cs.clemson.edu/~malloy/cse.html
Root-URL: http://www.cs.clemson.edu
Email: E-Mail: malloy@cs.clemson.edu  
Phone: Phone: 803-656-0808 Fax: 803-656-0145  
Title: Migrating from An Object Based Approach to an Object Oriented Approach to Software Design  
Author: Brian A. Malloy, Devidas Gupta, Anuradha Kare, and John D. McGregor 
Address: Clemson, SC 29634 1906.  
Affiliation: Department of Computer Science Clemson University  
Abstract: In this paper we discuss our experience in building a series of laboratory exercises intended to serve as a model of an extensible, reusable database management system. The target audience for the laboratory exercises is students at the CS 2 level. We begin our discussion by detailing our migration from a design of the laboratory exercises that is object-based to a design that is object-oriented. Our original object-based design was implemented in the Ada 83 language. However, our migration to an object-oriented design includes an implementation that is accomplished using the Ada 95 language[2] and the GNAT compiler[5]. The laboratory exercises present several implementations of a database management system that permit students to use several keys, and various configurations of the data in the system. The data configurations include a table, a list and a binary tree: three important data structures in the CS 2 curriculum. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Ada 95 Quality and Style : Guidelines for Professional Programmers. Software Productivity Consortium Services Corporation, </institution> <note> version 00.01.00 edition, </note> <month> February </month> <year> 1995. </year>
Reference: [2] <author> International Standard ISO/IEC 8652:1995(E). </author> <title> Annotated Ada Reference Manual. </title> <type> Intermetrics, </type> <institution> Inc., </institution> <note> version 6.0 edition, </note> <month> December </month> <year> 1994. </year>
Reference-contexts: The Ada 95 language enhances Ada 83 to provide full support for object orientation <ref> [2] </ref> and therefore it supports a more powerful form of software extension. In this paper we discuss our experience in building a series of laboratory exercises intended to serve as a model of an extensible, reusable system for students at the CS 2 level. <p> In this paper we discuss our experience in building a series of laboratory exercises intended to serve as a model of an extensible, reusable system for students at the CS 2 level. The laboratory exercises, coded in Ada 95 <ref> [2] </ref>, present several implementations of a database management system that permit students to use several keys, and various configurations of the data in the system. The data configurations include a table, a list and a binary tree: three important data structures in the CS 2 curriculum.
Reference: [3] <author> G. Booch. </author> <title> Object Oriented Development, </title> <booktitle> volume SE-12. </booktitle> <month> February </month> <year> 1986. </year>
Reference-contexts: The packages KeyPackage, ElementPackage and ContainerPackage form a layer of abstraction and interface to the main program, Dbase. 3 The Ob ject Based Approach The model of computation provided by Ada 83 has come to be known as an object-based model <ref> [3] </ref>. It provides for objects that encapsulate behavior and data and hide implementation details. <p> The first exercise provides motivation for the use of generics by requiring multiple versions of the software. The second exercise introduces generics as a technique to provide specific instantiations of the database system. These first two exercises represent an object-based model <ref> [3] </ref>. The third laboratory exercise uses the object-oriented features of Ada 95 to introduce the students to the notion of extensible software.
Reference: [4] <author> G. Booch. </author> <title> Software Engineering with Ada. </title> <publisher> Benjamin Cummings, </publisher> <address> second edition, </address> <year> 1986. </year>
Reference: [5] <author> C. Comar and E. Schonberg F. Gasperoni. </author> <title> The gnat project: A gnu-ada9x compiler. </title> <type> Technical Report. </type>
Reference: [6] <author> Rick Decker and Stuart Hirshfield. </author> <title> Top-down teaching with oop. </title> <booktitle> In Proceedings of the Twenty-Fourth SIGCSE Technical Symposium on Computer Science Education, </booktitle> <year> 1993. </year>
Reference: [7] <author> Susan Fife Dorchak and Patricia Brisotti Rice. </author> <title> Writing Readable Ada. </title> <address> D.C. </address> <publisher> Heath and Company, </publisher> <year> 1989. </year>
Reference: [8] <author> Michael B. Feldman and Elliot B. Koffman. </author> <title> Ada Problem Solving and Program Design. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1992. </year>
Reference-contexts: The contractual model of modularization that splits a module into a specification and an implementation component, separates the specifications from the implementation details. The procedures and functions and their parametrization yield small, cohesive units <ref> [8] </ref>. Private types provide for data abstraction. Packages allow for modularization of the procedures and functions, and the data types. The exception handling feature of Ada 83 provides a structured way to control the flow of information and allows for error recovery to be incorporated seamlessly into the design.
Reference: [9] <author> N. Fenton and A. Melton. </author> <title> Deriving structurally based software measures. </title> <journal> The Journal of Systems and Software, </journal> <volume> 12(3) </volume> <pages> 177-886, </pages> <month> July </month> <year> 1990. </year>
Reference: [10] <author> Dean W. Gonzalez. </author> <title> Ada Programmer's Handbook and Language Reference Manual. </title> <publisher> The Ben-jamin/Cummings Publishing Company, Inc., </publisher> <year> 1991. </year>
Reference: [11] <author> Richard C. Holt. </author> <title> Introducing object orientation using the turing language. </title> <booktitle> In Proceedings of the Twenty-Fifth SIGCSE Technical Symposium on Computer Science Education, </booktitle> <pages> pages 324 - 328, </pages> <year> 1994. </year>
Reference: [12] <author> John D. McGregor and David A. Sykes. </author> <title> Object-Oriented Software Development: Engineering Software for Reuse. </title> <publisher> Van Nostrand Reinhold, </publisher> <year> 1992. </year>
Reference-contexts: This permits a form of polymorphism referred to as inclusion polymorphism <ref> [12] </ref>. This style allows a family of classes, related by the inheritance relationship, to be created and to be used interchangeably in selected spots in the software architecture.
Reference: [13] <author> Glenn Meter. </author> <title> Engaging students and teaching modern concepts: Literate, situated, </title> <booktitle> object-oriented programming. In Proceedings of the Twenty-Fifth SIGCSE Technical Symposium on Computer Science Education, </booktitle> <pages> pages 329 - 338, </pages> <year> 1994. </year>
Reference: [14] <author> David J. Naiditch. </author> <title> Rendezvous with Ada. </title> <publisher> John Wiley & Sons, </publisher> <year> 1995. </year>
Reference-contexts: The type of the object decides the procedure or function to which the call gets dispatched. Abstract subprograms and types permit the creation of a blueprint for a type and the supporting functions that the inheritance class builds upon <ref> [14] </ref>.
Reference: [15] <institution> United States Department of Defense ANSI/MIL-STD-1815A-1983. </institution> <note> Reference Manual for the Ada Programming Language. </note> <institution> American National Standards Institute, Inc., </institution> <month> February </month> <year> 1983. </year>
Reference-contexts: The ideal language should provide facilities for modularization, data abstraction, error detection, reusability and extensibility. The language should also afford the student some help in the form of type checking. Ada 83 is an imperative, strongly typed, block-structured language, designed to foster sound software engineering principles <ref> [15] </ref>.
Reference: [16] <author> Brenda C. Parker and John D. McGregor. </author> <title> A goal-oriented approach to laboratory development and implementation. </title> <booktitle> In Proceedings of the Twenty-Sixth SIGCSE Technical Symposium on Computer Science Education, </booktitle> <year> 1995. </year>
Reference: [17] <author> J. P. Rosen. </author> <title> What orientation should ada objects take? Communications of the ACM, </title> <booktitle> 35(11) </booktitle> <pages> 71-76, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Ada 83 includes such attractive features as packages for system modularization, private types for data abstraction, exceptions for dealing with run-time errors and generics for reusability. fl This work is partially supported by DARPA Grant # DCA100-95-1-0002 However, Ada 83, because of its lack of a full inheritance mechanism <ref> [17] </ref>, does not support extensibility as completely as an object-oriented language. The Ada 95 language enhances Ada 83 to provide full support for object orientation [2] and therefore it supports a more powerful form of software extension.

References-found: 17

