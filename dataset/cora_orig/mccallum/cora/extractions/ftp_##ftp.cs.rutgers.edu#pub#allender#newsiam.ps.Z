URL: ftp://ftp.cs.rutgers.edu/pub/allender/newsiam.ps.Z
Refering-URL: http://www.cs.rutgers.edu/~allender/publications/
Root-URL: http://www.cs.rutgers.edu
Title: A UNIFORM CIRCUIT LOWER BOUND FOR THE PERMANENT  
Author: ERIC ALLENDER AND VIVEK GORE 
Keyword: ACC circuits. Key words. circuit complexity, uniformity, permanent, lower bounds, complexity classes  
Note: that does not have nonuniform  AMS subject classifications. 68Q05, 68Q15, 03D15  
Abstract: We show that uniform families of ACC circuits of subexponential size cannot compute the permanent function. This also implies similar lower bounds for certain sets in PP. This is one of the very few examples of a lower bound in circuit complexity whose proof hinges on the uniformity condition; it is still unknown if there is any set in Ntime (2 n O(1) 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Allender and V. Gore, </author> <title> On strong separations from AC 0 , in Advances in Computation Theory, Jin-Yi Cai, </title> <editor> ed., </editor> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <volume> Vol. 13, </volume> <publisher> American Mathematical Society, Providence, RI, </publisher> <pages> pp. 21-37, </pages> <year> 1993. </year>
Reference-contexts: ALLENDER AND V. GORE can actually be brought down to o (n) by modifying the oracle Turing machine model, but we choose not to do so for the sake of clarity.) Corollary 3.2. The following statements are true: 1. ACC (subexp) Dtime (n 9 ) P ERM <ref> [1] </ref> where PERM [1] refers to the case when only one call is made to PERM. 2. There is a set Z in C = P such that ACC (subexp) Ntime (n 2 ) Z . Proof. 1. <p> GORE can actually be brought down to o (n) by modifying the oracle Turing machine model, but we choose not to do so for the sake of clarity.) Corollary 3.2. The following statements are true: 1. ACC (subexp) Dtime (n 9 ) P ERM <ref> [1] </ref> where PERM [1] refers to the case when only one call is made to PERM. 2. There is a set Z in C = P such that ACC (subexp) Ntime (n 2 ) Z . Proof. 1. Let M L and M be the machines from the proof of Theorem 1.1. <p> Theorem 3.4. The permanent function (PERM) does not have ACC (subexp) circuits. Proof. Corollary 3.2 states that ACC (subexp) Dtime (n 9 ) PERM <ref> [1] </ref> . By the hierarchy theorem of [17], we know that Dtime (n 9 ) PERM [1] ( Dtime (n 10 ) PERM [1] . Suppose PERM has ACC (subexp) circuits. Let L 2 Dtime (n 10 ) PERM [1] and let M be the oracle machine that accepts L making <p> Theorem 3.4. The permanent function (PERM) does not have ACC (subexp) circuits. Proof. Corollary 3.2 states that ACC (subexp) Dtime (n 9 ) PERM <ref> [1] </ref> . By the hierarchy theorem of [17], we know that Dtime (n 9 ) PERM [1] ( Dtime (n 10 ) PERM [1] . Suppose PERM has ACC (subexp) circuits. Let L 2 Dtime (n 10 ) PERM [1] and let M be the oracle machine that accepts L making at most one call to PERM. <p> Theorem 3.4. The permanent function (PERM) does not have ACC (subexp) circuits. Proof. Corollary 3.2 states that ACC (subexp) Dtime (n 9 ) PERM <ref> [1] </ref> . By the hierarchy theorem of [17], we know that Dtime (n 9 ) PERM [1] ( Dtime (n 10 ) PERM [1] . Suppose PERM has ACC (subexp) circuits. Let L 2 Dtime (n 10 ) PERM [1] and let M be the oracle machine that accepts L making at most one call to PERM. <p> Corollary 3.2 states that ACC (subexp) Dtime (n 9 ) PERM <ref> [1] </ref> . By the hierarchy theorem of [17], we know that Dtime (n 9 ) PERM [1] ( Dtime (n 10 ) PERM [1] . Suppose PERM has ACC (subexp) circuits. Let L 2 Dtime (n 10 ) PERM [1] and let M be the oracle machine that accepts L making at most one call to PERM. Let L 0 = fhx; zi : M accepts x if z is used as the answer to the query made by M to PERM on input x g. <p> Since L 0 , L 00 and PERM all have ACC (subexp) circuit families, the resulting family for L is also in ACC (subexp). Therefore, using the result in Theorem 1.1, L 2 Dtime (n 9 ) PERM <ref> [1] </ref> which contradicts the hierarchy theorem of [17] since we started with an arbitrary L in Dtime (n 10 ) PERM [1] . A UNIFORM CIRCUIT LOWER BOUND FOR THE PERMANENT 7 Theorem 3.5. PP 6 ACC (subsubexp): Proof. <p> Therefore, using the result in Theorem 1.1, L 2 Dtime (n 9 ) PERM <ref> [1] </ref> which contradicts the hierarchy theorem of [17] since we started with an arbitrary L in Dtime (n 10 ) PERM [1] . A UNIFORM CIRCUIT LOWER BOUND FOR THE PERMANENT 7 Theorem 3.5. PP 6 ACC (subsubexp): Proof. We claim that if PP ACC (subsubexp), then PrTime (subsubexp) ACC (subexp). <p> The work presented here originally started off as the study of sets that are immune to small complexity classes such as AC 0 and ACC. An infinite set L is immune to a complexity class C if no infinite subset of L is in C. In <ref> [1] </ref>, we show that P PP contains 8 E. ALLENDER AND V. GORE sets that are immune to ACC, and that nonrelativizing proof techniques suitable for attacking the Dtime vs.
Reference: [2] <author> E. Allender and U. Hertrampf, </author> <title> Depth reduction for circuits of unbounded fan-in, </title> <journal> Inform. Comput., </journal> <note> to appear. </note>
Reference: [3] <author> J. Aspnes, R. Beigel, M. Furst, and S. Rudich, </author> <title> The expressive power of voting polynomials, </title> <booktitle> in Proc. 23rd Annual ACM Symposium on Theory of Computing, </booktitle> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1991, </year> <pages> pp. 402-409. </pages>
Reference-contexts: Machinery for proving lower bounds for AC 0 has been developed in a series of papers, culminating in the powerful and elegant techniques of <ref> [18, 29, 3] </ref>. These papers provide exponential size lower bounds for constant depth circuits computing the PARITY function.
Reference: [4] <author> D. Barrington, </author> <title> Bounded-width polynomial-size branching programs recognize exactly those languages in N C 1 , J. </title> <journal> Comput. System Sci., </journal> <volume> 38 (1989), </volume> <pages> pp. </pages> <month> 150-164. </month> <title> [5] , Quasipolynomial size circuit classes, </title> <booktitle> in Proc. 7th Annual IEEE Structure in Complexity Theory Conference, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> Washington, DC, </address> <year> 1992, </year> <pages> pp. 86-93. </pages>
Reference-contexts: Therefore, the next natural extension of the above class was to allow MOD m gates for composite moduli m. This extension is known as the class ACC, and it was introduced (implicitly) by Barrington in <ref> [4] </ref>. <p> Barrington <ref> [4] </ref> has conjectured that ACC ( NC 1 . <p> 2.3. (<ref> [21, 4, 7] </ref>) A language L is in ACC if there exists a positive integer m such that L is recognized by a family of constant depth polynomial size circuits containing NOT gates and unbounded fan-in AND, OR and MOD m gates. ACC was first defined and studied in [21, 4, 7] under the name ACC 0 . Barring-ton and Therien showed that ACC is equal to the class of languages recognized by polynomial length programs over solvable monoids [7]. Razborov [22] and Smolensky 4 E. ALLENDER AND V.
References-found: 4

