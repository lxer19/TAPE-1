URL: http://www.isi.edu/sims/papers/92-abstrips.ps
Refering-URL: http://www.isi.edu/~knoblock/
Root-URL: 
Email: knoblock@isi.edu  
Title: An Analysis of ABSTRIPS  
Author: Craig A. Knoblock 
Address: 4676 Admiralty Way Marina del Rey, CA 90292  
Affiliation: University of Southern California Information Sciences Institute  
Abstract: Abstrips [ Sacerdoti, 1974 ] was the first system to automate the construction of abstraction hierarchies for planning. Despite the seminal nature of this work, the method ab-strips uses to construct abstraction hierarchies is only described in vague terms, and there is no analysis of how the method works or when it will be effective. This paper fills this gap and presents a reconstruction and analysis of the algorithm used in ab-strips. The analysis shows that the method for constructing abstractions implicitly assumes that the preconditions that are determined to be details will be independent. In those cases where the independence assumption fails to hold, abstrips can degrade the performance of the planner. The paper also compares the abstrips approach to generating abstractions to the one used in alpine [ Knoblock, 1990 ] and describes how alpine avoids the problem that arises in abstrips.
Abstract-found: 1
Intro-found: 1
Reference: [ Bacchus and Yang, 1991 ] <author> Fahiem Bacchus and Qiang Yang. </author> <title> The downward refinement property. </title> <booktitle> In Proceedings of the Twelfth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 286-292, </pages> <address> Syd-ney, Australia, </address> <year> 1991. </year>
Reference: [ Carbonell et al., 1991 ] <author> Jaime G. Carbonell, Craig A. Knoblock, and Steven Minton. </author> <title> PRODIGY: An integrated architecture for planning and learning. </title> <editor> In Kurt VanLehn, editor, </editor> <booktitle> Architectures for Intelligence, </booktitle> <pages> pages 241-278. </pages> <publisher> Lawrence Erlbaum, </publisher> <address> Hillsdale, NJ, </address> <year> 1991. </year> <note> Available as Technical Report CMU-CS-89-189. </note>
Reference-contexts: In addition, recent results presented in [ Knoblock, 1991 ] indicate that the abstraction hierarchies generated by abstrips actually degrade performance rather than improve it when used in the prodigy problem solver <ref> [ Minton et al., 1989, Carbonell et al., 1991 ] </ref> . This paper presents a detailed analysis of how abstrips works. It also explains the apparent contradiction in that the abstractions generated by abstrips worked well in the strips system, yet produced poor performance when used in prodigy.
Reference: [ Christensen, 1991 ] <author> Jens Christensen. </author> <title> Automatic Abstraction in Planning. </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science, Stanford University, </institution> <year> 1991. </year>
Reference-contexts: Thus the abstractions generated by abstrips consider the difficulty in achieving individual conditions, but do not take into account the potential interactions among different subgoals. This section compares the criterion used by abstrips for constructing abstractions to other closely related work. pablo <ref> [ Christensen, 1991 ] </ref> is another system that generates abstractions for hierarchical planning. It uses a technique called predicate relaxation to determine the number of steps needed to achieve each predicate by partially evaluating the operators.
Reference: [ Fikes and Nilsson, 1971 ] <author> Richard E. Fikes and Nils J. Nilsson. </author> <title> STRIPS: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 189-208, </pages> <note> 1971. </note> [ <author> Joslin and Roach, 1989 ] David Joslin and John Roach. </author> <title> A theoretical analysis of conjunctive-goal problems. </title> <journal> Artificial Intelligence, </journal> <volume> 41(1) </volume> <pages> 97-106, </pages> <year> 1989. </year>
Reference-contexts: A problem is first solved in an abstract space and then refined at successively more detailed levels. The abstrips system [ Sacerdoti, 1974 ] provided some of the earliest work on abstraction in planning. ab-strips was built on top of the strips planning system <ref> [ Fikes and Nilsson, 1971 ] </ref> and would first construct an abstraction hierarchy for a problem space and then use the abstractions for hierarchical planning. <p> The problem is from the strips robot planning domain <ref> [ Fikes and Nilsson, 1971 ] </ref> and was selected from the randomly generated problems used in the experiments described later in this paper. This domain is defined in Appendix B.
Reference: [ Knoblock et al., 1991 ] <author> Craig A. Knoblock, Josh D. Tenenberg, and Qiang Yang. </author> <title> Characterizing abstraction hierarchies for planning. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <address> Anaheim, CA, </address> <year> 1991. </year>
Reference-contexts: Each abstraction space in a hierarchy is formed by dropping literals (atomic formulas) from the original problem space, thus it abstracts the preconditions and effects of operators as well as the states and goals of a problem space. Alpine forms abstraction hierarchies based on the ordered monotonicity property <ref> [ Knoblock et al., 1991 ] </ref> , which requires that the truth value of a literal introduced at one level is not changed at a lower level. This property guarantees that the preconditions that are achieved in an abstract plan will not be deleted (clobbered) while refining that plan.
Reference: [ Knoblock, 1990 ] <author> Craig A. Knoblock. </author> <title> Learning abstraction hierarchies for problem solving. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 923-928, </pages> <address> Boston, MA, </address> <year> 1990. </year>
Reference-contexts: The third section presents an example problem that illustrates a shortcoming of the abstrips approach. The fourth section compares the approaches used in ab-strips and alpine <ref> [ Knoblock, 1990, Knoblock, 1991 ] </ref> for generating abstractions and shows how alpine avoids the problem that arises in abstrips. The fifth section presents experimental results that compare abstrips' abstractions to alpine's in the prodigy problem solver. <p> In the analysis used by abstrips, the door status appeared to be a detail, but during planning considerable time can be wasted before it finally backtracks to the correct point in the search space and corrects the mistake. 4 Comparison with ALPINE The alpine system <ref> [ Knoblock, 1990, Knoblock, 1991 ] </ref> completely automates the generation of abstraction hierarchies from the definition of a problem space.
Reference: [ Knoblock, 1991 ] <author> Craig A. Knoblock. </author> <title> Automatically Generating Abstractions for Problem Solving. </title> <type> Ph.D. Thesis, </type> <institution> School of Computer Science, Carnegie Mel-lon University, </institution> <year> 1991. </year> <note> Available as Technical Report CMU-CS-91-120. </note>
Reference-contexts: The work on abstrips is widely viewed as seminal work on abstraction in planning [ Korf, 1987, Tenenberg, 1988 ] . Yet, to date there has been no detailed description or analysis of the method used in abstrips for constructing abstraction hierarchies. In addition, recent results presented in <ref> [ Knoblock, 1991 ] </ref> indicate that the abstraction hierarchies generated by abstrips actually degrade performance rather than improve it when used in the prodigy problem solver [ Minton et al., 1989, Carbonell et al., 1991 ] . This paper presents a detailed analysis of how abstrips works. <p> The third section presents an example problem that illustrates a shortcoming of the abstrips approach. The fourth section compares the approaches used in ab-strips and alpine <ref> [ Knoblock, 1990, Knoblock, 1991 ] </ref> for generating abstractions and shows how alpine avoids the problem that arises in abstrips. The fifth section presents experimental results that compare abstrips' abstractions to alpine's in the prodigy problem solver. <p> The problem involves achieving the following conjunc tion of five goals: (and (inroom a room1) (status door56 closed) (status door12 closed) (inroom robot room3) (inroom b room6)), where the initial state for this problem is shown in is included in Appendix D of <ref> [ Knoblock, 1991 ] </ref> . The criticality assignments generated by abstrips for this problem domain are specified in [ Sacerdoti, 1974 ] and shown in Appendix B. abstrips assigns the static preconditions the highest criticality, 6. <p> In the analysis used by abstrips, the door status appeared to be a detail, but during planning considerable time can be wasted before it finally backtracks to the correct point in the search space and corrects the mistake. 4 Comparison with ALPINE The alpine system <ref> [ Knoblock, 1990, Knoblock, 1991 ] </ref> completely automates the generation of abstraction hierarchies from the definition of a problem space. <p> If a plan for achieving literal C 1 can change the truth value of literal C 2 , then literal C 1 cannot be in a lower abstraction level than literal C 2 . The detailed algorithm is described in <ref> [ Knoblock, 1991 ] </ref> . Alpine's approach to generating abstractions differs from abstrips in several important ways. First, alpine forms abstractions based on the ordered mono-tonicity property, while abstrips forms abstractions by considering whether each precondition of each operator can be achieved by a short plan.
Reference: [ Korf, 1987 ] <author> Richard E. Korf. </author> <title> Planning as search: A quantitative approach. </title> <journal> Artificial Intelligence, </journal> <volume> 33(1) </volume> <pages> 65-88, </pages> <year> 1987. </year>
Reference-contexts: The process is repeated until the plan is expanded to the lowest level of criticality. The work on abstrips is widely viewed as seminal work on abstraction in planning <ref> [ Korf, 1987, Tenenberg, 1988 ] </ref> . Yet, to date there has been no detailed description or analysis of the method used in abstrips for constructing abstraction hierarchies.
Reference: [ Minton et al., 1989 ] <author> Steven Minton, Jaime G. Car-bonell, Craig A. Knoblock, Daniel R. Kuokka, Oren Etzioni, and Yolanda Gil. </author> <title> Explanation-based learning: A problem solving perspective. </title> <journal> Artificial Intelligence, </journal> <volume> 40(1-3):63-118, </volume> <year> 1989. </year>
Reference-contexts: In addition, recent results presented in [ Knoblock, 1991 ] indicate that the abstraction hierarchies generated by abstrips actually degrade performance rather than improve it when used in the prodigy problem solver <ref> [ Minton et al., 1989, Carbonell et al., 1991 ] </ref> . This paper presents a detailed analysis of how abstrips works. It also explains the apparent contradiction in that the abstractions generated by abstrips worked well in the strips system, yet produced poor performance when used in prodigy.
Reference: [ Newell and Simon, 1972 ] <author> Allen Newell and Herbert A. Simon. </author> <title> Human Problem Solving. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1972. </year>
Reference-contexts: Hierarchical planning was pioneered in GPS <ref> [ Newell and Simon, 1972 ] </ref> , but abstrips was the first system that automated the construction of abstraction hierarchies. In abstrips, the abstraction spaces are constructed by assigning criticalities, numbers indicating relative difficulty, to the preconditions of each operator. The system uses these criticalities to plan abstractly.
Reference: [ Sacerdoti, 1974 ] <author> Earl D. Sacerdoti. </author> <title> Planning in a hierarchy of abstraction spaces. </title> <journal> Artificial Intelligence, </journal> <volume> 5(2) </volume> <pages> 115-135, </pages> <year> 1974. </year>
Reference-contexts: 1 Introduction One approach to reducing search in planning is to exploit abstractions of a problem space to plan hierarchically. A problem is first solved in an abstract space and then refined at successively more detailed levels. The abstrips system <ref> [ Sacerdoti, 1974 ] </ref> provided some of the earliest work on abstraction in planning. ab-strips was built on top of the strips planning system [ Fikes and Nilsson, 1971 ] and would first construct an abstraction hierarchy for a problem space and then use the abstractions for hierarchical planning. <p> According to <ref> [ Sacerdoti, 1974 ] </ref> , the criticalities are assigned as follows: A predetermined (partial) ordering of all the predicates used in describing the problem domain was used to specify an order for examining the literals of the precondition wffs of all the operators in the domain. <p> The criticality assignments generated by abstrips for this problem domain are specified in <ref> [ Sacerdoti, 1974 ] </ref> and shown in Appendix B. abstrips assigns the static preconditions the highest criticality, 6. It assigns the preconditions that cannot be achieved by a short plan a criticality of 5.
Reference: [ Tenenberg, 1988 ] <author> Josh D. Tenenberg. </author> <title> Abstraction in Planning. </title> <type> Ph.D. Thesis, </type> <institution> Computer Science Department, University of Rochester, </institution> <year> 1988. </year>
Reference-contexts: The process is repeated until the plan is expanded to the lowest level of criticality. The work on abstrips is widely viewed as seminal work on abstraction in planning <ref> [ Korf, 1987, Tenenberg, 1988 ] </ref> . Yet, to date there has been no detailed description or analysis of the method used in abstrips for constructing abstraction hierarchies.
References-found: 12

