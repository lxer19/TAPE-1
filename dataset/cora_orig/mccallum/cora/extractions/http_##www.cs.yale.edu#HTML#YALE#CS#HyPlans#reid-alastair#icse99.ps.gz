URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/reid-alastair/icse99.ps.gz
Refering-URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/reid-alastair/
Root-URL: http://www.cs.yale.edu
Email: freid-alastair, peterson-john, hager-greg, hudak-paulg@cs.yale.edu  
Phone: (203) 432-1272  
Title: Prototyping Real-Time Vision Systems: An Experiment in DSL Design  
Author: Alastair Reid, John Peterson, Greg Hager, Paul Hudak 
Keyword: Domain-specific languages, Functional programming, Modularity, Code reuse, Computer vision, Haskell, Interoperability.  
Address: P.O Box 208285 New Haven, CT 06520  
Affiliation: Yale University  
Abstract: We describe the transformation of XVision, a large library of C++ code for real-time vision processing, into FVision (pronounced "fission"), a fully-featured domain-specific language embedded in Haskell. The resulting prototype system substantiates the claims of increased modularity, effective code reuse, and rapid pro-totyping that characterize the DSL approach to system design. It also illustrates the need for judicious interface design: relegating computationally expensive tasks to XVision (pre-existing C++ components), and leaving modular compositional tasks to FVision (Haskell). At the same time, our experience demonstrates how Haskell's advanced language features (specifically parametric polymorphism, lazy evaluation, higher order functions and automatic storage reclamation) permit a rapid DSL design that is itself highly modular and easily modified. Overall, the resulting hybrid system exceeded our expectations: visual tracking programs continue to spend most of their time executing low level image-processing code, while Haskell's advanced features allow us to quickly develop and test small prototype systems within a matter of a few days and to develop realistic applications within a few weeks. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Kavi Arya. </author> <title> A functional animation starter-kit. </title> <journal> Journal of Functional Programming, </journal> <volume> 4(1) </volume> <pages> 1-18, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: The use of streams in signal processing and operating systems contexts dates back many years [8]. Streams have also been proposed as a basis for functional animation <ref> [1] </ref>. 7 CONCLUSIONS A domain-specific language is a powerful software engineering tool that increases productivity and flexibility in complex applications where ordinary program libraries are less effective. Creating a full-fledged DSL from a library was more difficult than expected but the results were well worth the investment.
Reference: [2] <author> R. Bird and P. Wadler. </author> <title> Introduction to Functional Programming. </title> <publisher> Prentice Hall, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: functional languages for rapid prototyping [9], and one that describes the power of higher-order functions and lazy evaluation as the "glue" needed for modular programming. 9 Pipelines are very similar to the notion of streams in the functional programming community, about which any good textbook on Haskell will address (e.g. <ref> [2] </ref>). The use of streams in signal processing and operating systems contexts dates back many years [8].
Reference: [3] <author> Conal Elliott. </author> <title> Modeling interactive 3D and multimedia animation with an embedded language. </title> <booktitle> In Proceedings of the first conference on Domain-Specific Languages. USENIX, </booktitle> <month> October </month> <year> 1997. </year>
Reference-contexts: There are papers too numerous to mention on tools for building DSL's from scratch, but most relevant is previous efforts of our own on embedded DSL's [11, 10]. Previous examples of DSL's embedded in Haskell include Fran <ref> [3, 4] </ref>, a language for functional reactive animations, and ActiveHaskell [14], a DSL for scripting COM components. These share much with FVision in their use of Haskell as a vehicle for expressing abstraction and modularity.
Reference: [4] <author> Conal Elliott and Paul Hudak. </author> <title> Functional reactive animation. </title> <booktitle> In International Conference on Functional Programming, </booktitle> <pages> pages 163-173, </pages> <month> June </month> <year> 1997. </year>
Reference-contexts: There are papers too numerous to mention on tools for building DSL's from scratch, but most relevant is previous efforts of our own on embedded DSL's [11, 10]. Previous examples of DSL's embedded in Haskell include Fran <ref> [3, 4] </ref>, a language for functional reactive animations, and ActiveHaskell [14], a DSL for scripting COM components. These share much with FVision in their use of Haskell as a vehicle for expressing abstraction and modularity.
Reference: [5] <author> Sigbjorn Finne and Simon Peyton Jones. </author> <title> Pictures: A simple structured graphics model. </title> <booktitle> In Glasgow Functional Programming Workshop, </booktitle> <address> Ullapool, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: Similarly, we plan to add support to let us view each physical window on our desktop as a collection of virtual windows each displaying relevant images and data from inside an FVision pipeline. This should be easy to do using standard functional programming technology <ref> [5] </ref> and will solve a problem observed in both FVision and XVision: when a complex application starts, it typically opens a dozen small windows on the screen, each window being randomly positioned on the screen according 8 to the window manager's whim. 5 ASSESSMENT In many ways, the development of FVision
Reference: [6] <author> G. D. Hager and P. N. Belhumeur. </author> <title> Efficient region tracking of with parametric models of illumination and geometry. </title> <note> To appear in IEEE PAMI., </note> <month> October </month> <year> 1998. </year>
Reference-contexts: The notion of the feedback loop is important as it captures the idea that the state of the feature at the current time is in fact a small perturbation on what it was in the previous frame. case of an SSD (Sum of Squared Difference) tracking algorithm <ref> [6] </ref>. This algorithm tracks a region by attempting to compute an image motion and/or deformation to match the current appearance of a target to a fixed reference.
Reference: [7] <author> G. D. Hager and K. Toyama. </author> <title> The "XVision" system: A general purpose substrate for real-time vision applications. </title> <booktitle> Comp. Vision, Image Understanding., </booktitle> <volume> 69(1) </volume> <pages> 23-27, </pages> <month> January </month> <year> 1998. </year>
Reference-contexts: 1 INTRODUCTION Real-time computer vision is an area that is at a critical juncture. Inexpensive cameras, digitizers, and high-performance video devices are now plentiful, and the processing power of most PC's and workstations has reached the point where they can perform many image processing functions which historically required specialized hardware <ref> [7] </ref>. Software exploiting vision has not, however, advanced at a comparable rate. We assert that this is not due to a lack of algorithms or computing power, but rather that little is yet known about the effective software abstractions and tools in this domain.
Reference: [8] <author> P. Henderson. </author> <title> Purely functional operating systems. </title> <booktitle> In Functional Programming and Its Applications: An Advanced Course, </booktitle> <pages> pages 177-192. </pages> <publisher> Cambridge University Press, </publisher> <year> 1982. </year>
Reference-contexts: The use of streams in signal processing and operating systems contexts dates back many years <ref> [8] </ref>. Streams have also been proposed as a basis for functional animation [1]. 7 CONCLUSIONS A domain-specific language is a powerful software engineering tool that increases productivity and flexibility in complex applications where ordinary program libraries are less effective.
Reference: [9] <author> P. Henderson. </author> <title> Functional programming, formal spepcification, and rapid prototyping. </title> <journal> IEEE Transactions on SW Engineering, </journal> <volume> SE-12(2):241-250, </volume> <year> 1986. </year>
Reference-contexts: General discussions of the advantages of programming with pure functions are also quite numerous; two of particular relevance to our work are one that describes the use of functional languages for rapid prototyping <ref> [9] </ref>, and one that describes the power of higher-order functions and lazy evaluation as the "glue" needed for modular programming. 9 Pipelines are very similar to the notion of streams in the functional programming community, about which any good textbook on Haskell will address (e.g. [2]).
Reference: [10] <author> P. Hudak. </author> <title> Building domain specific embedded languages. </title> <journal> ACM Computing Surveys, </journal> <volume> 28A:(electronic), </volume> <month> December </month> <year> 1996. </year>
Reference-contexts: There are papers too numerous to mention on tools for building DSL's from scratch, but most relevant is previous efforts of our own on embedded DSL's <ref> [11, 10] </ref>. Previous examples of DSL's embedded in Haskell include Fran [3, 4], a language for functional reactive animations, and ActiveHaskell [14], a DSL for scripting COM components. These share much with FVision in their use of Haskell as a vehicle for expressing abstraction and modularity.
Reference: [11] <author> Paul Hudak. </author> <title> Modular domain specific languages and tools. </title> <booktitle> In Proceedings of Fifth International Conference on Software Reuse, </booktitle> <pages> pages 134-142. </pages> <publisher> IEEE Computer Society, </publisher> <month> June </month> <year> 1998. </year>
Reference-contexts: There are papers too numerous to mention on tools for building DSL's from scratch, but most relevant is previous efforts of our own on embedded DSL's <ref> [11, 10] </ref>. Previous examples of DSL's embedded in Haskell include Fran [3, 4], a language for functional reactive animations, and ActiveHaskell [14], a DSL for scripting COM components. These share much with FVision in their use of Haskell as a vehicle for expressing abstraction and modularity.
Reference: [12] <author> R.E. Kahn, M.J. Swain, </author> <title> P.N. Prokopowicz, and R.J. Firby. Gesture recognition using Perseus architecture. </title> <booktitle> In Proc. IEEE Conf. Comp. Vision and Patt. Recog., </booktitle> <pages> pages 734-741, </pages> <year> 1996. </year>
Reference-contexts: We assert that this is not due to a lack of algorithms or computing power, but rather that little is yet known about the effective software abstractions and tools in this domain. There have been several attempts to build general-purpose image processing libraries <ref> [13, 17, 12] </ref>. Most have taken a traditional approach to system design using a language such as C++ or Java is to build suitable libraries, based on well designed interfaces, that capture system functionality in a modular way.
Reference: [13] <author> J.L. Mundy. </author> <title> The image understanding environment program. </title> <journal> IEEE EXPERT, </journal> <volume> 10(6) </volume> <pages> 64-73, </pages> <month> De-cember </month> <year> 1995. </year>
Reference-contexts: We assert that this is not due to a lack of algorithms or computing power, but rather that little is yet known about the effective software abstractions and tools in this domain. There have been several attempts to build general-purpose image processing libraries <ref> [13, 17, 12] </ref>. Most have taken a traditional approach to system design using a language such as C++ or Java is to build suitable libraries, based on well designed interfaces, that capture system functionality in a modular way.
Reference: [14] <author> Simon Peyton-Jones, Erik Meijer, and Dan Leijen. </author> <title> Scripting COM components in haskell. </title> <booktitle> In Proceedings of 5th International Conference on Software Reuse, </booktitle> <pages> pages 224-233. IEEE/ACM, </pages> <year> 1998. </year>
Reference-contexts: There are papers too numerous to mention on tools for building DSL's from scratch, but most relevant is previous efforts of our own on embedded DSL's [11, 10]. Previous examples of DSL's embedded in Haskell include Fran [3, 4], a language for functional reactive animations, and ActiveHaskell <ref> [14] </ref>, a DSL for scripting COM components. These share much with FVision in their use of Haskell as a vehicle for expressing abstraction and modularity.
Reference: [15] <author> SL. Peyton Jones, T. Nordin, and A. Reid. Green-card: </author> <title> a foreign-language interface for haskell. </title> <booktitle> In Proc Haskell Workshop, </booktitle> <address> Amsterdam, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: This consists of the primitive data types that domain experts want to use (principally, in our case, images and matrices) and a useful set of operations to create, manipulate, and output values of those types. An essential tool in this task was our foreign function interface generator GreenCard <ref> [15] </ref> which made it easy to make C++ values and operations look like Haskell values and operations to the FVision programmer.
Reference: [16] <author> C. Consel S. Thibault, R. Marlet. </author> <title> A domain-specific language for video device drivers: From design to implementation. </title> <booktitle> In Proceedings of the first conference on Domain-Specific Languages, </booktitle> <pages> pages 11-26. </pages> <publisher> USENIX, </publisher> <month> October </month> <year> 1997. </year> <month> 10 </month>
Reference-contexts: is a good basis for parallel execution on shared memory multiprocessors or even on a loosely coupled collection of processors. 6 RELATED WORK We are not aware of any other efforts to create a special-purpose language for computer vision, although there does exist a DSL for writing video device drivers <ref> [16] </ref>. That work is at a level quite a bit lower than that at which are working, but it is conceivable to use it as a substrate for our own work.
Reference: [17] <institution> The Khoros Group. </institution> <note> The Khoros Users Manual. </note> <institution> The University of New Mexico, </institution> <address> Albuquerque, NM, </address> <year> 1991. </year>
Reference-contexts: We assert that this is not due to a lack of algorithms or computing power, but rather that little is yet known about the effective software abstractions and tools in this domain. There have been several attempts to build general-purpose image processing libraries <ref> [13, 17, 12] </ref>. Most have taken a traditional approach to system design using a language such as C++ or Java is to build suitable libraries, based on well designed interfaces, that capture system functionality in a modular way.
References-found: 17

