URL: http://www-cad.eecs.berkeley.edu/research/hsis/papers/technical/timing.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/research/hsis/index.html
Root-URL: http://www.cs.berkeley.edu
Title: A Methodology for Formal Verification of Real-Time Systems  
Abstract-found: 0
Intro-found: 1
Reference: [ABB + 94] <author> A. Aziz, F. Balarin, R. K. Brayton, S.-T. Cheng, R. Hojati, S. C. Krishnan, R. K. Ranjan, A. L. Sangiovanni-Vincentelli, T. R. Shiple, V. Singhal, S. Tasiran, and H.-Y. Wang. HSIS: </author> <title> A BDD-based environment for formal verification. </title> <booktitle> In Proceedings of the 31th ACM/IEEE Design Automation Conference, </booktitle> <year> 1994. </year>
Reference-contexts: TESLA can also be used to place some restrictions on the system's specification. Requirement 4 A methodology must be supported by tools. To support our methodology we have: * extended the formal design verification system HSIS <ref> [ABB + 94] </ref> with procedures for formal verification of timed and alternating RQ automata; both procedures can be guided by user provided hints, describing timing constraints that are critical for the property to be verified, * developed vl2mvt, a compiler from a synthesis subset of Verilog to BLIF MVT, * developed <p> A run r is fair if the set of states that occurs infinitely often in r satisfies fairness constraints. For the purpose of this paper it suffices to say that if no fairness constraints are given all runs are fair. For more details the reader is referred to <ref> [ABB + 94] </ref>.
Reference: [ACD90] <author> Rajeev Alur, Costas Courcoubetis, and David L. Dill. </author> <title> Model-checking for real-time systems. </title> <booktitle> In Proceedings of 5th LICS, </booktitle> <pages> pages 414-425, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Verilog to BLIF MVT, * developed a compiler from TESLA to the subset of Verilog supported by vl2mvt. 1.2 Related Work Most of the recent developments in formal verification of real-time systems stem from the Alur's and Dill's work on timed automata [Dil89, AD90] and related work on model checking <ref> [ACD90] </ref>. They reduce the problem to the verification of a finite-state system called a region automaton. A region automaton is finite but typically too large to verify with existing resources.
Reference: [ACD + 92] <author> Rajeev Alur, Costas Courcoubetis, David L. Dill, Nicholas Halbwachs, and Howard Wong-Toi. </author> <title> An implementation of three algorithms for timing verification based on automata emptiness. </title> <booktitle> In Proceedings of IEEE Real-time Systems Symposium, </booktitle> <year> 1992. </year>
Reference-contexts: They reduce the problem to the verification of a finite-state system called a region automaton. A region automaton is finite but typically too large to verify with existing resources. Thus, several verification procedures that try to avoid building the full region automaton have been developed <ref> [HNSY92, ACD + 92, BSV93, AIKY93] </ref>. In HSIS we provide iterative algorithms based on [BSV94] and [LB93], but our methodology is not limited to these choices. 3 Despite these advances, the verification of real-time system remains a hard problem. <p> For example, in the railroad crossing in Figure 1 which is a slight modification of the example in <ref> [ACD + 92] </ref>, the system has three components: the train, the gate, and the controller. The train 5 approaches from outside of the crossing.
Reference: [AD90] <author> Rajeev Alur and David L. Dill. </author> <title> Automata for modelling real-time systems. In M.S. </title> <editor> Paterson, editor, </editor> <booktitle> ICALP'90 Automata, languages, and programming: 17th international colloquium. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year> <note> LNCS vol. 443. </note>
Reference-contexts: Many formalisms that can capture complex timing constraints have been proposed, but most are not suitable for automatic verification. The problem is that making real time a part of the system's state makes the state space infinite and verification undecidable in general. Two notable exceptions are timed automata <ref> [Dil89, AD90] </ref> and alternating RQ automata [LB93, LB94]. In both cases, a real-time system is modeled as a combination of a finite-state system and real-valued time measuring devices called timers. <p> vl2mvt, a compiler from a synthesis subset of Verilog to BLIF MVT, * developed a compiler from TESLA to the subset of Verilog supported by vl2mvt. 1.2 Related Work Most of the recent developments in formal verification of real-time systems stem from the Alur's and Dill's work on timed automata <ref> [Dil89, AD90] </ref> and related work on model checking [ACD90]. They reduce the problem to the verification of a finite-state system called a region automaton. A region automaton is finite but typically too large to verify with existing resources. <p> However, algorithms are available for two special cases: timed automata and alternating RQ automata. 13 The decision procedure for language emptiness for timed automata was developed by Alur and Dill <ref> [AD90] </ref>. They show how to construct a finite-state automaton called the region automaton that accepts only timing consistent sequences.
Reference: [AIKY93] <author> Rajeev Alur, Alon Itai, R. P. Kurshan, and M. Yannakakis. </author> <title> Timing verification by successive approximation. </title> <editor> In G. v. Bochmann and D.K. Probst, editors, </editor> <booktitle> Proceedings of Computer Aided Verification : 4th International Workshop, CAV '92, </booktitle> <address> Montreal, Canada, June 29-July 1, 1992. </address> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <note> LNCS vol. 663. </note>
Reference-contexts: They reduce the problem to the verification of a finite-state system called a region automaton. A region automaton is finite but typically too large to verify with existing resources. Thus, several verification procedures that try to avoid building the full region automaton have been developed <ref> [HNSY92, ACD + 92, BSV93, AIKY93] </ref>. In HSIS we provide iterative algorithms based on [BSV94] and [LB93], but our methodology is not limited to these choices. 3 Despite these advances, the verification of real-time system remains a hard problem.
Reference: [BSV93] <author> Felice Balarin and Alberto L. Sangiovanni-Vincentelli. </author> <title> A verification strategy for timing constrained systems. </title> <editor> In G. v. Bochmann and D.K. Probst, editors, </editor> <booktitle> Proceedings of Computer Aided Verification : 4th International Workshop, CAV '92, </booktitle> <address> Montreal, Canada, June 29-July 1, </address> <year> 1992, </year> <pages> pages 151-63. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <note> LNCS vol. 663. </note>
Reference-contexts: They reduce the problem to the verification of a finite-state system called a region automaton. A region automaton is finite but typically too large to verify with existing resources. Thus, several verification procedures that try to avoid building the full region automaton have been developed <ref> [HNSY92, ACD + 92, BSV93, AIKY93] </ref>. In HSIS we provide iterative algorithms based on [BSV94] and [LB93], but our methodology is not limited to these choices. 3 Despite these advances, the verification of real-time system remains a hard problem.
Reference: [BSV94] <author> Felice Balarin and Alberto L. Sangiovanni-Vincentelli. </author> <title> An iterative approach to verification of real-time systems. Formal Methods in System Design: </title> <note> An International Journal, 1994. to be published. 19 </note>
Reference-contexts: A region automaton is finite but typically too large to verify with existing resources. Thus, several verification procedures that try to avoid building the full region automaton have been developed [HNSY92, ACD + 92, BSV93, AIKY93]. In HSIS we provide iterative algorithms based on <ref> [BSV94] </ref> and [LB93], but our methodology is not limited to these choices. 3 Despite these advances, the verification of real-time system remains a hard problem. Thus, it is not surprising that only a few such systems are available. <p> These abstractions are all of a certain type. It is possible to show that there can be only finitely many abstractions of that type, so the procedure will terminate. For more details refer to <ref> [BSV94] </ref>. In the case of alternating RQ automata, ANALYZE reduces to checking satisfiability of a set of linear inequalities.
Reference: [CDHT93] <author> Costas Courcoubetis, David L. Dill, M. Hatzaki, and Panagiotis Tzounakis. </author> <title> Verification with real-time COSPAN. </title> <editor> In G. v. Bochmann and D.K. Probst, editors, </editor> <booktitle> Proceedings of Computer Aided Verification : 4th International Workshop, CAV '92, </booktitle> <address> Montreal, Canada, June 29-July 1, 1992. </address> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <note> LNCS vol. 663. </note>
Reference-contexts: Thus, it is not surprising that only a few such systems are available. We mention real-time extensions of COSPAN <ref> [CDHT93] </ref> and EPSILON [ CGL93] all based on automata approaches and KRO-NOS [NSY92] based on model checking. None of these systems supports all requirements we have placed on the methodology.
Reference: [ CGL93] <author> K. Cerans, J. Godskesen, and K. Larsen. </author> <title> Timed modal specification theory and tools. In Costas Courcoubetis, editor, </title> <booktitle> Computer Aided Verification: 5th International Conference, CAV'93, Elounda, Greece, June/July 1993, Proceedings, </booktitle> <pages> pages 253-267. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <note> LNCS vol. 697. </note>
Reference-contexts: Thus, it is not surprising that only a few such systems are available. We mention real-time extensions of COSPAN [CDHT93] and EPSILON <ref> [ CGL93] </ref> all based on automata approaches and KRO-NOS [NSY92] based on model checking. None of these systems supports all requirements we have placed on the methodology.
Reference: [Dil89] <author> David L. Dill. </author> <title> Timing assumptions and verification of finite-state concurrent systems. </title> <editor> In Joseph Sifakis, editor, </editor> <title> Automatic Verification Methods for Finite-State Systems. </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year> <note> LNCS vol. 407. </note>
Reference-contexts: Many formalisms that can capture complex timing constraints have been proposed, but most are not suitable for automatic verification. The problem is that making real time a part of the system's state makes the state space infinite and verification undecidable in general. Two notable exceptions are timed automata <ref> [Dil89, AD90] </ref> and alternating RQ automata [LB93, LB94]. In both cases, a real-time system is modeled as a combination of a finite-state system and real-valued time measuring devices called timers. <p> vl2mvt, a compiler from a synthesis subset of Verilog to BLIF MVT, * developed a compiler from TESLA to the subset of Verilog supported by vl2mvt. 1.2 Related Work Most of the recent developments in formal verification of real-time systems stem from the Alur's and Dill's work on timed automata <ref> [Dil89, AD90] </ref> and related work on model checking [ACD90]. They reduce the problem to the verification of a finite-state system called a region automaton. A region automaton is finite but typically too large to verify with existing resources.
Reference: [HNSY92] <author> Thomas A. Henzinger, Xavier Nicolin, Jospeh Sifakis, and Sergio Yovine. </author> <title> Symbolic model-checking for real-time systems. </title> <booktitle> In Proceedings of 7th Symposium on Logics in Computer Science. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: They reduce the problem to the verification of a finite-state system called a region automaton. A region automaton is finite but typically too large to verify with existing resources. Thus, several verification procedures that try to avoid building the full region automaton have been developed <ref> [HNSY92, ACD + 92, BSV93, AIKY93] </ref>. In HSIS we provide iterative algorithms based on [BSV94] and [LB93], but our methodology is not limited to these choices. 3 Despite these advances, the verification of real-time system remains a hard problem.
Reference: [LB93] <author> William K. C. Lam and Robert K. Brayton. </author> <title> Alternating RQ timed automata. In Costas Courcoubetis, editor, </title> <booktitle> Computer Aided Verification: 5th International Conference, CAV'93, Elounda, Greece, June/July 1993, Proceedings, </booktitle> <pages> pages 237-252. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <note> LNCS vol. 697. </note>
Reference-contexts: The problem is that making real time a part of the system's state makes the state space infinite and verification undecidable in general. Two notable exceptions are timed automata [Dil89, AD90] and alternating RQ automata <ref> [LB93, LB94] </ref>. In both cases, a real-time system is modeled as a combination of a finite-state system and real-valued time measuring devices called timers. <p> A region automaton is finite but typically too large to verify with existing resources. Thus, several verification procedures that try to avoid building the full region automaton have been developed [HNSY92, ACD + 92, BSV93, AIKY93]. In HSIS we provide iterative algorithms based on [BSV94] and <ref> [LB93] </ref>, but our methodology is not limited to these choices. 3 Despite these advances, the verification of real-time system remains a hard problem. Thus, it is not surprising that only a few such systems are available. <p> Since there are only finitely many !-simple paths, the procedure will terminate. More details are provided in <ref> [LB93, LB94] </ref>. In both cases, there can be exponentially many iterations in the worst case, but in our experience that is rare. Also, since the algorithms build different abstractions it is possible that each is more efficient for a certain class of real-time systems.
Reference: [LB94] <author> William K. C. Lam and Robert K. Brayton. </author> <title> Criteria for the simple path property in timed automata. </title> <booktitle> In Computer Aided Verification: 6th International Conference, </booktitle> <address> CAV'94, Stanford, </address> <month> June </month> <year> 1994, </year> <title> Proceedings. </title> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The problem is that making real time a part of the system's state makes the state space infinite and verification undecidable in general. Two notable exceptions are timed automata [Dil89, AD90] and alternating RQ automata <ref> [LB93, LB94] </ref>. In both cases, a real-time system is modeled as a combination of a finite-state system and real-valued time measuring devices called timers. <p> is traversable infinitely often if and only if it is traversable once. from s 0 only if the self-loop s 1 ! s 1 is traversed exactly 4 times. y := 0 y = 5 x = 1 alwaysx := 0 x := 0 Lam and Brayton have proved in <ref> [LB94] </ref> that if X is the set of all not traversable !-simple paths 1 in an alternating RQ automaton A, and A u is A with timing constraints ignored, then there is a traversable ! path in A if and only if there is an ! simple path in A u <p> Since there are only finitely many !-simple paths, the procedure will terminate. More details are provided in <ref> [LB93, LB94] </ref>. In both cases, there can be exponentially many iterations in the worst case, but in our experience that is rare. Also, since the algorithms build different abstractions it is possible that each is more efficient for a certain class of real-time systems.
Reference: [NSY92] <author> Xavier Nicolin, Jospeh Sifakis, and Sergio Yovine. </author> <title> Compiling real-time specifications into extended automata. </title> <journal> IEEE TSE Special Issue on Real-Time Systems, </journal> <month> September </month> <year> 1992. </year> <month> 20 </month>
Reference-contexts: Thus, it is not surprising that only a few such systems are available. We mention real-time extensions of COSPAN [CDHT93] and EPSILON [ CGL93] all based on automata approaches and KRO-NOS <ref> [NSY92] </ref> based on model checking. None of these systems supports all requirements we have placed on the methodology.
References-found: 14

