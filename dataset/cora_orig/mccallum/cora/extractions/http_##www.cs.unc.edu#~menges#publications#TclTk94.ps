URL: http://www.cs.unc.edu/~menges/publications/TclTk94.ps
Refering-URL: http://www.cs.unc.edu/~menges/abstracts/TclTk94.html
Root-URL: http://www.cs.unc.edu
Email: fmenges,laddg@cs.unc.edu  
Title: Tcl/C++ Binding Made Easy  
Author: John Menges, Brian Ladd 
Date: June 2, 1994  
Address: Chapel Hill, NC 27599  
Affiliation: Department of Computer Science University of North Carolina  
Abstract: This paper describes a type-safe binding mechanism for mapping Tcl commands to calls on member functions of particular C++ objects. Given an easy-to-write mapping class for each C++ type used in the signatures of the member functions to be called, our method makes it simple to implement a binding to any member function using any combination of these types. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> John Menges and Mark Parris. </author> <title> Tcl and Tk Use in the Artifact Based Collaboration System. </title> <booktitle> In Tcl/Tk Workshop Proceedings, </booktitle> <pages> pages 66-70, </pages> <address> Berkeley, Califor-nia, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: This work is supported in part by the National Science Foundation (Grant # IRI-9015443), and a Graduate Fellowship from the IBM Corporation. components of ABC. A brief description of ABC and its use of Tk and Tcl is provided in a paper presented at the 1993 Tcl/Tk Workshop <ref> [1] </ref>. During system development it is often necessary to expose the interfaces of C++ objects at run-time. This is of particular interest when building scaffolding for exercising objects for debugging purposes but is also useful for building interfaces for users of the system. <p> Such exposure requires an easy-to-use, type-safe binding mechanism for mapping Tcl commands to calls on member functions of particular C++ objects. The method described in this paper is an outgrowth of the one described in the appendix of our 1993 Tcl/Tk Workshop paper <ref> [1] </ref>. The method described in [1] was type-safe and effective, but cumbersome to use. Judicious use of C++ templates simplifies the specification of the Tcl/C++ bindings with no loss of safety or effectiveness. <p> Such exposure requires an easy-to-use, type-safe binding mechanism for mapping Tcl commands to calls on member functions of particular C++ objects. The method described in this paper is an outgrowth of the one described in the appendix of our 1993 Tcl/Tk Workshop paper <ref> [1] </ref>. The method described in [1] was type-safe and effective, but cumbersome to use. Judicious use of C++ templates simplifies the specification of the Tcl/C++ bindings with no loss of safety or effectiveness.
Reference: [2] <author> B. C. Smith, L. A. Rowe, and S. C Yen. </author> <title> Tcl Distributed Programming. </title> <booktitle> In Tcl/Tk Workshop Proceedings, </booktitle> <pages> pages 50-51, </pages> <address> Berkeley, California, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: Our application process contains a Tcl interpreter object belonging to a subclass of Extended Tcl's TclInterp cl class. Communication between the front-end and the application is performed using Tcl-DP <ref> [2] </ref>. The TclInterp cl class enables the application to create new commands, implemented as C++ functions and accessible from the front-end via dp RPC calls. This works fine for controlling the application at the process level.
Reference: [3] <author> J. B. Smith and F. D. Smith. </author> <title> ABC: A Hypermedia System for Artifact-Based Collaboration. </title> <booktitle> In Proceedings of Hypertext '91, </booktitle> <month> December </month> <year> 1991. </year>
References-found: 3

