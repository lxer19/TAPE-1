URL: http://www.cs.columbia.edu/~german/papers/usenix.ps
Refering-URL: http://www.cs.columbia.edu/~german/papers.html
Root-URL: http://www.cs.columbia.edu
Title: Concert/C: A Language for Distributed Programming  
Author: Joshua S. Auerbach Arthur P. Goldberg German S. Goldszmidt Ajei S. Gopal Mark T. Kennedy Josyula R. Rao James R. Russell P. O. 
Affiliation: IBM Thomas J. Watson Research Center  
Address: San Francisco, California.  Box 704, Yorktown Heights, NY 10598  
Note: Published in the Proceedings of the Winter 1994 USENIX Conference,  
Abstract: Concert/C is a new language for distributed C programming that extends ANSI C to support distribution and process dynamics. Concert/C provides the ability to create and terminate processes, connect them together, and communicate among them. It supports transparent remote function calls (RPC) and asynchronous messages. Interprocess communications interfaces are typed in Concert/C, and type correctness is checked at compile time wherever possible, otherwise at runtime. All C data types, including complex data structures containing pointers and aliases, can be transmitted in RPCs. Concert/C programs run on a heterogeneous set of machine architectures and operating systems and communicate over multiple RPC and messaging protocols. The current Concert/C implementation runs on AIX 3.2 1 , SunOS 4.1, Solaris 2.2 and OS/2 2.1, and communicates over Sun RPC, OSF/DCE and UDP multicast. Several groups inside and outside IBM are actively using Concert/C, and it is available via anonymous ftp from software.watson.ibm.com:/pub/concert.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gregory R. Andrews. </author> <title> Synchronizing Resources. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3(4) </volume> <pages> 405-430, </pages> <month> October </month> <year> 1981. </year>
Reference-contexts: A new language designed to support distributed computing (e.g., Argus [20], SR <ref> [1] </ref>, NIL [30], Emerald [10], Hermes [29]; a survey may be found in [7]) can hide complexity very well for those programmers willing to learn the new language.
Reference: [2] <author> J. S. Auerbach, D. F. Bacon, A. P. Goldberg, G. S. Goldszmidt, A. S. Gopal, M. T. Kennedy, A. R. Lowry, J. R. Russell, W. Silverman, R. E. Strom, D. M. Yellin, and S. A. Yemini. </author> <title> High-level language support for programming distributed systems. </title> <booktitle> In 1992 International Conference on Computer Languages, </booktitle> <pages> pages 320-330. </pages> <publisher> IEEE Computer Society, </publisher> <month> April </month> <year> 1992. </year>
Reference-contexts: Thus, we may build Concert/Cobol, Concert/Fortran, Concert/C++, etc. Each of these languages will implement a distributed computing model called the process model: a distributed program is composed of a set of sequential processes communicating by RPC and asynchronous message passing <ref> [35, 2] </ref>. These languages will interoperate, so that a Concert/Cobol process could serve an RPC by a Concert/C process. To support data interoperability, IPC messages are mapped in and out of a Concert Universal type family, as described in [6].
Reference: [3] <author> Joshua Auerbach, Steven S. Demion, Arthur P. Goldberg, German Goldszmidt, Ajei Gopal, Mark T. Kennedy, Josyula R. Rao, and James R. Russell. </author> <title> Concert/C manual: A programmer's guide to a language for distributed C programming. </title> <type> Technical Report RC19332, </type> <institution> IBM T. J. Watson Research Center, </institution> <year> 1993. </year>
Reference-contexts: We made this decision because language-integrated support for distributed programming can offer a higher level of functionality than other approaches, as we demonstrate in section 3. 1 All trademarks appearing in this paper are recognized registered trademarks of their respective companies. 1 2 The Concert/C Language Concert/C <ref> [4, 3] </ref> is a superset of ANSI C. Like an ANSI C program, a Concert/C program is built from separately compiled source files combined in a link step. <p> We are also investigating improvements to the run-time to add group communication and fault-tolerant primitives such as causal and atomic multicast [9]. The Unix implementations of Concert/C, together with comprehensive documentation, including a tutorial [17], a programmer's manual <ref> [3] </ref> and example code, are available via anonymous ftp 8 . 7 We measured this performance between IBM RS/6000 workstations connected by a 16Mbit token ring, and communi cating via Sun RPC over TCP/IP. 8 from software.watson.ibm.com:/pub/concert
Reference: [4] <author> Joshua Auerbach, Arthur P. Goldberg, German Goldszmidt, Ajei Gopal, Mark T. Kennedy, James R. Russell, and Shaula Yemini. </author> <title> Concert/C specification and reference: Definition of a language for distributed C programming. </title> <type> Technical Report RC18994, </type> <institution> IBM T. J. Watson Research Center, </institution> <year> 1993. </year>
Reference-contexts: We made this decision because language-integrated support for distributed programming can offer a higher level of functionality than other approaches, as we demonstrate in section 3. 1 All trademarks appearing in this paper are recognized registered trademarks of their respective companies. 1 2 The Concert/C Language Concert/C <ref> [4, 3] </ref> is a superset of ANSI C. Like an ANSI C program, a Concert/C program is built from separately compiled source files combined in a link step.
Reference: [5] <author> Joshua S. Auerbach, Ajei S. Gopal, Mark T. Kennedy, and James R. Russell. Concert/C: </author> <title> Supporting distributed programming with language extensions and a portable multiprotocol runtime. </title> <booktitle> In The 14th International Conference on Distributed Computing Systems, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: Of course, to actually deliver interoperability with SUN ONC and OSF DCE components is also a challenge 5 for protocol management in the runtime and in stub compilation; we deal with this aspect of Concert/C in <ref> [5] </ref>. Second, supporting dynamic EBFs is greatly aided by having a single-translator approach. <p> The prototype permits Concert processes to interoperate with existing SUN/RPC components (such as NIS). Many more details on the implementation are provided in <ref> [5] </ref>. 5 Related Work In the Concert project, we choose to extend multiple existing languages to best satisfy the conflicting goals of (1) hiding complexity and (2) building on an existing base of already-written code and programmer skills.
Reference: [6] <author> Joshua S. Auerbach and James R. Russell. </author> <title> The Concert Signature Representation: IDL as intermediate language. </title> <booktitle> In Proceedings of the 1994 ACM SIGPLAN Workshop on Interface Definition Languages, </booktitle> <month> January </month> <year> 1994. </year>
Reference-contexts: These languages will interoperate, so that a Concert/Cobol process could serve an RPC by a Concert/C process. To support data interoperability, IPC messages are mapped in and out of a Concert Universal type family, as described in <ref> [6] </ref>. We are expanding the support for OSF/DCE to further exploit DCE services such as naming and security, and to provide richer interoperability with DCE components not written using Concert/C. These improvements will be made available in the anonymous ftp version later this year.
Reference: [7] <author> H. E. Bal, J. G. Steiner, and A. S. Tanenbaum. </author> <title> Programming languages for distributed computing systems. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3), </volume> <month> September </month> <year> 1991. </year>
Reference-contexts: A new language designed to support distributed computing (e.g., Argus [20], SR [1], NIL [30], Emerald [10], Hermes [29]; a survey may be found in <ref> [7] </ref>) can hide complexity very well for those programmers willing to learn the new language. We will not engage in a feature by feature comparison with these languages, many of which have influenced Concert/C (particularly NIL and Hermes, which, like SR, share Concert/C's philosophy of providing both message-passing and RPC).
Reference: [8] <author> B. N. Bershad, D. T. Ching, E. D. Lazowska, J. Sanislo, and M. Schwartz. </author> <title> Remote procedure call facility for interconnecting heterogeneous computer systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(8) </volume> <pages> 880-894, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: At the opposite extreme, commercial packages (such as OSF/DCE [25], Apollo NCS [19], PeerLogic's Pipes, Momentum's XIPC, Horizon's Message Express, or SUN ONC [32])) and software tools (such as Matchmaker [18], Courier [34], Horus [16], and HRPC <ref> [8] </ref>) permit programmers to continue using familiar languages and to incorporate existing code. Many of these packages are "multi-protocol" at the transport level (they work over many transport protocols), although only HRPC is "multi-protocol" at the RPC protocol level (interoperating with other RPC-based tools, as does Concert/C). <p> As mentioned, while many tools support multiple transport protocols, almost none are designed to support multiple RPC protocols and also to interoperate with components using those protocols but not using the same programming tool. An exception is HRPC <ref> [8] </ref>, a two-translators tool which does, however, have this multiple RPC protocols feature. Several things differentiate Concert/C from HRPC.
Reference: [9] <author> Kenneth P. Birman, Robert Cooper, et al. </author> <title> The ISIS system manual, version 2.0. </title> <type> Technical report, </type> <institution> CS Department, Cornell, </institution> <month> March </month> <year> 1990. </year>
Reference-contexts: This performance compares favorably with other systems for parallel programming, like pvm [33] and C-linda [15], as studied in [13]. The measurement program is in the Concert/C Tutorial [17]. Parsons [26] has compared the usability and performance of Concert/C with other tools for distributed programming including Isis <ref> [9] </ref> and PVM [33]. 7 Future Work Concert/C is the first of a set of compatible extensions to important programming languages. Thus, we may build Concert/Cobol, Concert/Fortran, Concert/C++, etc. <p> We are also investigating improvements to the run-time to add group communication and fault-tolerant primitives such as causal and atomic multicast <ref> [9] </ref>.
Reference: [10] <author> A. Black, N. Hutchinson, E. Jul, H. Levy, and L. Carter. </author> <title> Distribution and abstract types in Emerald. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(1) </volume> <pages> 65-76, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: A new language designed to support distributed computing (e.g., Argus [20], SR [1], NIL [30], Emerald <ref> [10] </ref>, Hermes [29]; a survey may be found in [7]) can hide complexity very well for those programmers willing to learn the new language.
Reference: [11] <author> A. Califano and I. Rigoutsos. </author> <title> FLASH: A Fast Look-Up Algorithm for String Homology. </title> <booktitle> In Proceedings First International Conference on Intelligent Systems for Molecular Biology, </booktitle> <address> Washington, DC, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: Programmers have used Concert/C to improve the performance of their applications in several ways, including parallelizing bottlenecks, and reducing communications by moving code next to its input data. For example, one large Concert/C application searches a database of genetic information on 64 Risc System/6000s in parallel <ref> [11] </ref>. Another Concert/C application uses similar search techniques to perform complex visual pattern recognition [27]. Concert/C has been used to connect a natural language textual query program to a collection of large, geographically dispersed text repositories [22].
Reference: [12] <author> K. M. Chandy and S. Taylor. </author> <title> The composition of concurrent programs. </title> <booktitle> In Proceedings Supercomputing '89. ACM, </booktitle> <month> November </month> <year> 1989. </year>
Reference-contexts: One consequence of this difference is that Concert programs may be developed and instantiated by independent programmers in independent administrative domains and still communicate with each other. PCN <ref> [12] </ref> is a new language with a C-compatible type system and the ability to link with C. However, when using PCN, all distributed logic is written strictly in PCN; C subroutines perform only local computation.
Reference: [13] <author> C. C. Douglas, Timothy G. Mattson, and Martin H. Schultz. </author> <title> A comparison of distributed and shared virtual memory systems on networks. </title> <type> Technical report, </type> <institution> Department of Computer Science, Yale University, </institution> <address> New Haven, </address> <year> 1993. </year> <month> YALEU/DCS/TR-975. </month>
Reference-contexts: This performance compares favorably with other systems for parallel programming, like pvm [33] and C-linda [15], as studied in <ref> [13] </ref>. The measurement program is in the Concert/C Tutorial [17]. Parsons [26] has compared the usability and performance of Concert/C with other tools for distributed programming including Isis [9] and PVM [33]. 7 Future Work Concert/C is the first of a set of compatible extensions to important programming languages.
Reference: [14] <author> N. H. Gehani and W. D. Roome. </author> <title> The Concurrent C Programming Language. </title> <publisher> Silicon Press, </publisher> <address> 25 Beverly Road, Summit, NJ, 07901, </address> <year> 1989. </year>
Reference-contexts: In client/server applications, components often belong to semi-independent administrative domains, and the connectivity of the resulting "multi-application" is constantly changing. Concurrent C <ref> [14] </ref> is also an extension to C, but we classify it as a new language because legacy C code almost always has to be reworked and must be recompiled in order to be incorporated into a Concurrent C program.
Reference: [15] <author> D. Gelernter and N. Carriero. </author> <title> Applications experience with LINDA. </title> <journal> SIGPLAN Notices, </journal> <volume> 23(9) </volume> <pages> 173-187, </pages> <month> September </month> <year> 1988. </year>
Reference-contexts: The "single-translator" or "language extensions" approach of Concert/C is shared by some other efforts, most notably Linda <ref> [15] </ref>. Linda has a radically different model of computation than Concert/C (a shared tuple space), which makes it particularly effective for parallelizing single applications. <p> The round trip delay for an RPC that communicates a single integer takes 8 ms, little more than Sun RPC's 5 ms delay. 7 Transmission of arrays achieves a bandwidth of 0.5 Mbyte/sec. This performance compares favorably with other systems for parallel programming, like pvm [33] and C-linda <ref> [15] </ref>, as studied in [13]. The measurement program is in the Concert/C Tutorial [17].
Reference: [16] <author> Phillip B. Gibbons. </author> <title> A stub generator for multilanguage RPC in heterogeneous environments. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13(1):77-87, </volume> <month> January </month> <year> 1987. </year>
Reference-contexts: At the opposite extreme, commercial packages (such as OSF/DCE [25], Apollo NCS [19], PeerLogic's Pipes, Momentum's XIPC, Horizon's Message Express, or SUN ONC [32])) and software tools (such as Matchmaker [18], Courier [34], Horus <ref> [16] </ref>, and HRPC [8]) permit programmers to continue using familiar languages and to incorporate existing code. Many of these packages are "multi-protocol" at the transport level (they work over many transport protocols), although only HRPC is "multi-protocol" at the RPC protocol level (interoperating with other RPC-based tools, as does Concert/C).
Reference: [17] <author> Arthur P. Goldberg. </author> <title> Concert/C tutorial: An introduction to a language for distributed C program-ming. </title> <type> Technical Report RA218, </type> <institution> IBM T. J. Watson Research Center, </institution> <year> 1993. </year>
Reference-contexts: This performance compares favorably with other systems for parallel programming, like pvm [33] and C-linda [15], as studied in [13]. The measurement program is in the Concert/C Tutorial <ref> [17] </ref>. Parsons [26] has compared the usability and performance of Concert/C with other tools for distributed programming including Isis [9] and PVM [33]. 7 Future Work Concert/C is the first of a set of compatible extensions to important programming languages. Thus, we may build Concert/Cobol, Concert/Fortran, Concert/C++, etc. <p> We are also investigating improvements to the run-time to add group communication and fault-tolerant primitives such as causal and atomic multicast [9]. The Unix implementations of Concert/C, together with comprehensive documentation, including a tutorial <ref> [17] </ref>, a programmer's manual [3] and example code, are available via anonymous ftp 8 . 7 We measured this performance between IBM RS/6000 workstations connected by a 16Mbit token ring, and communi cating via Sun RPC over TCP/IP. 8 from software.watson.ibm.com:/pub/concert
Reference: [18] <author> Michael B. Jones and Richard F. Rashid. </author> <title> Mach and Matchmaker: Kernel and language support for object-oriented distributed systems. </title> <type> Technical Report CMU-CS-87-150, </type> <institution> CS Department, </institution> <address> CMU, </address> <month> September </month> <year> 1986. </year>
Reference-contexts: At the opposite extreme, commercial packages (such as OSF/DCE [25], Apollo NCS [19], PeerLogic's Pipes, Momentum's XIPC, Horizon's Message Express, or SUN ONC [32])) and software tools (such as Matchmaker <ref> [18] </ref>, Courier [34], Horus [16], and HRPC [8]) permit programmers to continue using familiar languages and to incorporate existing code.
Reference: [19] <author> Mike Kong, Terence H. Dineen, Paul J. Leach, Elizabeth A. Martin, Nathaniel W. Mishkin, Joseph N. Pato, and Geoffrey L. Wyant. </author> <title> Network Computing System Reference Manual. </title> <publisher> Prentice-Hall, </publisher> <address> Engle-wood Cliffs, NJ, </address> <year> 1990. </year>
Reference-contexts: Also (although this is not inherent in the approach), the existing implementations of these new languages have not been "multi-protocol"; they are constructed in terms of a single protocol suite. At the opposite extreme, commercial packages (such as OSF/DCE [25], Apollo NCS <ref> [19] </ref>, PeerLogic's Pipes, Momentum's XIPC, Horizon's Message Express, or SUN ONC [32])) and software tools (such as Matchmaker [18], Courier [34], Horus [16], and HRPC [8]) permit programmers to continue using familiar languages and to incorporate existing code.
Reference: [20] <author> B. Liskov. </author> <title> Distributed programming in Argus. </title> <journal> Comm. ACM, </journal> <volume> 31(3), </volume> <month> March </month> <year> 1988. </year>
Reference-contexts: A new language designed to support distributed computing (e.g., Argus <ref> [20] </ref>, SR [1], NIL [30], Emerald [10], Hermes [29]; a survey may be found in [7]) can hide complexity very well for those programmers willing to learn the new language.
Reference: [21] <author> Andy Lowry, Rob Strom, and Danny Yellin. </author> <title> The Global Desktop, </title> <institution> IBM T. J. Watson Research Center. </institution> <note> To be published, available from the authors. </note>
Reference-contexts: Concert/C has been used to connect a natural language textual query program to a collection of large, geographically dispersed text repositories [22]. The Global Desktop project uses Concert/C to enable the graphical interconnection of running applications, thus enabling cooperative computing over a network <ref> [21] </ref>. Yet another application has used Concert/C for the collection and analysis of time series data for the observation of seismic sensored phenomena [28]. The current prototype performs well.
Reference: [22] <author> Y.S. Maarek, D.M. Berry, and G.E. Kaiser. </author> <title> An information retrieval approach for automatically constructing software libraries. </title> <journal> Transactions on Software Engineering, </journal> <volume> 17(8), </volume> <month> August </month> <year> 1991. </year>
Reference-contexts: Another Concert/C application uses similar search techniques to perform complex visual pattern recognition [27]. Concert/C has been used to connect a natural language textual query program to a collection of large, geographically dispersed text repositories <ref> [22] </ref>. The Global Desktop project uses Concert/C to enable the graphical interconnection of running applications, thus enabling cooperative computing over a network [21]. Yet another application has used Concert/C for the collection and analysis of time series data for the observation of seismic sensored phenomena [28].
Reference: [23] <author> Netwise. </author> <title> C Language RPC TOOL, </title> <booktitle> 1989. </booktitle> <address> Boulder, Colorado. </address>
Reference-contexts: Partly because function is defined at a low level, but mostly because of the limitations of the "two translators" approach, the library APIs of the most powerful tools in this class become quite complex. 6 Tools attempting to address the residual complexity of library-based packages <ref> [24, 23] </ref> typically generate, in addition to stubs, a prologue to establish a program's initial connectivity, and also help automate the program construction process.
Reference: [24] <author> NobleNet. </author> <title> EZ-RPC Manual, </title> <booktitle> 1992. </booktitle> <address> Natick, Ma. </address>
Reference-contexts: Partly because function is defined at a low level, but mostly because of the limitations of the "two translators" approach, the library APIs of the most powerful tools in this class become quite complex. 6 Tools attempting to address the residual complexity of library-based packages <ref> [24, 23] </ref> typically generate, in addition to stubs, a prologue to establish a program's initial connectivity, and also help automate the program construction process.
Reference: [25] <author> Open Software Foundation, </author> <title> Cambridge, Mass. OSF DCE Release 1.0 Developer's Kit Documentation Set, </title> <month> February </month> <year> 1991. </year>
Reference-contexts: Also (although this is not inherent in the approach), the existing implementations of these new languages have not been "multi-protocol"; they are constructed in terms of a single protocol suite. At the opposite extreme, commercial packages (such as OSF/DCE <ref> [25] </ref>, Apollo NCS [19], PeerLogic's Pipes, Momentum's XIPC, Horizon's Message Express, or SUN ONC [32])) and software tools (such as Matchmaker [18], Courier [34], Horus [16], and HRPC [8]) permit programmers to continue using familiar languages and to incorporate existing code. <p> Concert/C pre-compiles for a set of target protocols at compile time and makes a single selection at runtime, after which all marshalling and demarshalling may be done by 6 For example, OSF/DCE <ref> [25] </ref> has a published programming interface comprising 157 RPC and threads function calls, not counting the ones used privately by stubs. compiled code. In HRPC, once a protocol is selected for a particular RPC handle, that protocol is fixed.
Reference: [26] <author> Ian Parsons. </author> <title> Evaluation of distributed communication systems. </title> <type> U. </type> <institution> Alberta. </institution> <note> Available from author. </note>
Reference-contexts: This performance compares favorably with other systems for parallel programming, like pvm [33] and C-linda [15], as studied in [13]. The measurement program is in the Concert/C Tutorial [17]. Parsons <ref> [26] </ref> has compared the usability and performance of Concert/C with other tools for distributed programming including Isis [9] and PVM [33]. 7 Future Work Concert/C is the first of a set of compatible extensions to important programming languages. Thus, we may build Concert/Cobol, Concert/Fortran, Concert/C++, etc.
Reference: [27] <author> I. Rigoutsos and R. Hummel. </author> <title> Distributed Bayesian Object Recognition. </title> <booktitle> In Proceedings IEEE Conference on Computer Vision and Pattern Recognition, </booktitle> <address> New York City, NY, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: For example, one large Concert/C application searches a database of genetic information on 64 Risc System/6000s in parallel [11]. Another Concert/C application uses similar search techniques to perform complex visual pattern recognition <ref> [27] </ref>. Concert/C has been used to connect a natural language textual query program to a collection of large, geographically dispersed text repositories [22]. The Global Desktop project uses Concert/C to enable the graphical interconnection of running applications, thus enabling cooperative computing over a network [21].
Reference: [28] <author> Patricia Gomes Soares and Alan Randolph Karben. </author> <title> Implementing a Delegation Model Design of an HPCC Application Using Concert/C. </title> <booktitle> In Proceedings of the 1993 IBM Centre for Advanced Studies Conference, </booktitle> <pages> pages 729-738, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: The Global Desktop project uses Concert/C to enable the graphical interconnection of running applications, thus enabling cooperative computing over a network [21]. Yet another application has used Concert/C for the collection and analysis of time series data for the observation of seismic sensored phenomena <ref> [28] </ref>. The current prototype performs well. The round trip delay for an RPC that communicates a single integer takes 8 ms, little more than Sun RPC's 5 ms delay. 7 Transmission of arrays achieves a bandwidth of 0.5 Mbyte/sec.
Reference: [29] <author> Robert E. Strom, David F. Bacon, Arthur Goldberg, Andy Lowry, Daniel Yellin, and Shaula Alexander Yemini. </author> <title> Hermes: A Language for Distributed Computing. </title> <publisher> Prentice Hall, </publisher> <month> January </month> <year> 1991. </year>
Reference-contexts: A new language designed to support distributed computing (e.g., Argus [20], SR [1], NIL [30], Emerald [10], Hermes <ref> [29] </ref>; a survey may be found in [7]) can hide complexity very well for those programmers willing to learn the new language.
Reference: [30] <author> Robert E. Strom and Shaula Alexander Yemini. </author> <title> NIL: An integrated language and system for distributed programming. </title> <booktitle> In SIGPLAN '83 Symposium on Programming Language Issues in Software Systems, </booktitle> <month> June </month> <year> 1983. </year>
Reference-contexts: A new language designed to support distributed computing (e.g., Argus [20], SR [1], NIL <ref> [30] </ref>, Emerald [10], Hermes [29]; a survey may be found in [7]) can hide complexity very well for those programmers willing to learn the new language.
Reference: [31] <author> Bjarne Stroustrup. </author> <title> A history of C++: 1979-1991. </title> <journal> SIGPLAN Notices, </journal> <volume> 28(3) </volume> <pages> 271-297, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: Line number information is captured and preserved. Unlike the cfront implementation of C++ <ref> [31] </ref>, ccc does not "mangle" names. Concert/C programs, including ones instantiated by create can be debugged with tools such as dbx and gdb. The compiler does, however, analyze all the declarations and statements in the program. Concert/C operations are checked and translated.
Reference: [32] <author> Sun Microsystems. </author> <title> SUN Network Programming, </title> <year> 1988. </year>
Reference-contexts: We chose to implement Concert/C as a language, rather than a set of library functions like PVM [33] or a set of library functions plus a stub compiler like SUN ONC assisted by tools such as rpcgen <ref> [32] </ref>. <p> At the opposite extreme, commercial packages (such as OSF/DCE [25], Apollo NCS [19], PeerLogic's Pipes, Momentum's XIPC, Horizon's Message Express, or SUN ONC <ref> [32] </ref>)) and software tools (such as Matchmaker [18], Courier [34], Horus [16], and HRPC [8]) permit programmers to continue using familiar languages and to incorporate existing code.
Reference: [33] <author> V. S. Sunderam. </author> <title> Pvm: A framework for parallel distributed computing. </title> <journal> Concurrency: Practice & Experience, </journal> <volume> 2(4) </volume> <pages> 315-339, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: We designed Concert/C to exist in this environment. Our compiler is portable to any system with an ANSI C compiler, and our "multi-protocol" run-time can communicate over a heterogeneous set of protocols. We chose to implement Concert/C as a language, rather than a set of library functions like PVM <ref> [33] </ref> or a set of library functions plus a stub compiler like SUN ONC assisted by tools such as rpcgen [32]. <p> The round trip delay for an RPC that communicates a single integer takes 8 ms, little more than Sun RPC's 5 ms delay. 7 Transmission of arrays achieves a bandwidth of 0.5 Mbyte/sec. This performance compares favorably with other systems for parallel programming, like pvm <ref> [33] </ref> and C-linda [15], as studied in [13]. The measurement program is in the Concert/C Tutorial [17]. Parsons [26] has compared the usability and performance of Concert/C with other tools for distributed programming including Isis [9] and PVM [33]. 7 Future Work Concert/C is the first of a set of compatible <p> This performance compares favorably with other systems for parallel programming, like pvm <ref> [33] </ref> and C-linda [15], as studied in [13]. The measurement program is in the Concert/C Tutorial [17]. Parsons [26] has compared the usability and performance of Concert/C with other tools for distributed programming including Isis [9] and PVM [33]. 7 Future Work Concert/C is the first of a set of compatible extensions to important programming languages. Thus, we may build Concert/Cobol, Concert/Fortran, Concert/C++, etc.
Reference: [34] <institution> The Xerox Corporation. </institution> <month> Courier: </month> <title> The Remote Procedure Call Protocol, </title> <month> December </month> <year> 1981. </year> <note> Technical Report XSIS 038112. </note>
Reference-contexts: At the opposite extreme, commercial packages (such as OSF/DCE [25], Apollo NCS [19], PeerLogic's Pipes, Momentum's XIPC, Horizon's Message Express, or SUN ONC [32])) and software tools (such as Matchmaker [18], Courier <ref> [34] </ref>, Horus [16], and HRPC [8]) permit programmers to continue using familiar languages and to incorporate existing code.
Reference: [35] <author> S. A. Yemini, G. Goldszmidt, A. Stoyenko, Y. Wei, and L. Beeck. </author> <title> Concert: A high-level-language approach to heterogeneous distributed systems. </title> <booktitle> In The Ninth International Conference on Distributed Computing Systems, </booktitle> <pages> pages 162-171. </pages> <publisher> IEEE Computer Society, </publisher> <month> June </month> <year> 1989. </year>
Reference-contexts: Thus, we may build Concert/Cobol, Concert/Fortran, Concert/C++, etc. Each of these languages will implement a distributed computing model called the process model: a distributed program is composed of a set of sequential processes communicating by RPC and asynchronous message passing <ref> [35, 2] </ref>. These languages will interoperate, so that a Concert/Cobol process could serve an RPC by a Concert/C process. To support data interoperability, IPC messages are mapped in and out of a Concert Universal type family, as described in [6].
References-found: 35

