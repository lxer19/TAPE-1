URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1997/TR34.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Title: Fine-Grain Multitolerant Barrier Synchronization  
Author: Sandeep S. Kulkarni Anish Arora 
Keyword: fault-tolerance, detectable and undetectable faults, synchronization, concurrency.  
Address: Columbus, OH 43210 USA  
Affiliation: Department of Computer and Information Science 1 The Ohio State University  
Abstract: We design a multitolerant program for synchronizing the phases of concurrent processes. The tolerances of the program enable processes to (i) compute all phases correctly in the presence of faults that corrupt process state in a detectable manner, and (ii) compute only a minimum possible number of phases incorrectly before resuming correct computation in the presence of faults that corrupt process state in an undetectable manner. The program is fine-grain in the sense that each process action either updates the state of that process or involves communication with one of two neighboring processes. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. S. Kulkarni and A. Arora. </author> <title> Stepwise design of tolerances in barrier computations. </title> <type> Technical Report OSU-CISRC TR-22, </type> <institution> Ohio State University, </institution> <year> 1997. </year>
Reference-contexts: Research supported in part by NSF Grant CCR-93-08640, OSU Grant 221506, and NSA MDA904-96-1-1011. This paper is a substantially revised version of <ref> [1] </ref>. 1 Specifically, our designs are able to tolerate all state corruptions, while keeping for each fault-class the number of phases executed incorrectly to be the minimum that is possible for that fault-class. The rest of this paper is organized as follows. In Section 2, we state the problem formally.
Reference: [2] <author> E. W. Dijkstra. </author> <title> Self-stabilizing systems in spite of distributed control. </title> <journal> Communications of the ACM, </journal> <volume> 17(11), </volume> <year> 1974. </year>
Reference-contexts: The state corruption view suggests that one way to accommodate all of the fault-classes is to design the set of processes to be stabilizing <ref> [2] </ref>, i.e., to recover from an arbitrarily corrupted state to one from where the specification of barrier synchronization is (re)satisfied.
Reference: [3] <author> A. Arora and S. S. Kulkarni. </author> <title> Component-based design of multitolerance. </title> <type> Technical Report OSU-CISRC TR37, </type> <institution> Ohio State University, </institution> <year> 1996. </year> <note> Revised for IEEE Transactions on Software Engineering. </note>
Reference-contexts: We therefore present in this paper barrier synchronization designs that offer multiple levels of tolerance corresponding to multiple fault-classes, a notion which we refer to as multitolerance <ref> [3] </ref>. 1 Email: fkulkarni,anishg@cis.ohio-state.edu; Web: http://www.cis.ohio-state.edu/f~ kulkarni,~anish g. Research supported in part by NSF Grant CCR-93-08640, OSU Grant 221506, and NSA MDA904-96-1-1011. <p> It follows that we will superpose the refined barrier synchronization upon an underlying multitol-erant token ring program. Next, we briefly recall such a token ring program, which we have formally derived and proven correct elsewhere <ref> [3] </ref>. Underlying token ring program. Each process j maintains a sequence number, sn:j, which is in the domain f0::K 1g for some K &gt; N in the absence of detectable faults.
Reference: [4] <author> T. Herman and S. Ghosh. </author> <title> Stabilizing phase-clocks. </title> <journal> Information Processing Letters, </journal> <volume> 54 </volume> <pages> 259-265, </pages> <year> 1995. </year>
Reference-contexts: This multitolerance is useful since instan-tiations of our multitolerant solution satisfy the specification and typical tolerance requirements of a 11 variety of synchronization problems, such as clock unison <ref> [4] </ref>, phase synchronization [5], and atomic commitment [6]. The last of these problems, atomic commitment, raises the issue that we did not explicitly consider faults that make processes crash, restart, or exhibit Byzantine behavior.
Reference: [5] <author> R. M. Lipton and A. Park. </author> <title> The processor identity problem. </title> <journal> Information Processing Letters, </journal> <volume> 36(2) </volume> <pages> 91-94, </pages> <year> 1990. </year>
Reference-contexts: This multitolerance is useful since instan-tiations of our multitolerant solution satisfy the specification and typical tolerance requirements of a 11 variety of synchronization problems, such as clock unison [4], phase synchronization <ref> [5] </ref>, and atomic commitment [6]. The last of these problems, atomic commitment, raises the issue that we did not explicitly consider faults that make processes crash, restart, or exhibit Byzantine behavior.
Reference: [6] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing : Concepts and Techniques. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1993. </year> <month> 12 </month>
Reference-contexts: This multitolerance is useful since instan-tiations of our multitolerant solution satisfy the specification and typical tolerance requirements of a 11 variety of synchronization problems, such as clock unison [4], phase synchronization [5], and atomic commitment <ref> [6] </ref>. The last of these problems, atomic commitment, raises the issue that we did not explicitly consider faults that make processes crash, restart, or exhibit Byzantine behavior.
References-found: 6

