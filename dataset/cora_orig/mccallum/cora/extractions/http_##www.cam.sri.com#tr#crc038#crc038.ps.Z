URL: http://www.cam.sri.com/tr/crc038/crc038.ps.Z
Refering-URL: http://www.cam.sri.com/tr/ABSTRACTS.html
Root-URL: 
Title: An Embedding of Timed Transition Systems in HOL  
Author: Rachel Cardell-Oliver, Roger Hale and John Herbert 
Address: Suite 23 Millers Yard, Mill Lane, Cambridge CB2 1RQ, England  
Affiliation: Cambridge Computer Science Research Centre, SRI International,  
Date: 1993  
Note: of Formal Methods in System Design, 3(1&2), Kluwer;  
Web: URL: http://www.cam.sri.com/tr/crc038/paper.ps.ZJournal  
Abstract: The theory of Timed Transition Systems (TTSs) developed by Henzinger, Manna and Pnueli provides a formal framework for specifying and reasoning about real-time systems. In this theory a system is described by a set of state transitions with associated time constraints. We report on work in progress to mechanize the published theory of timed transition systems using the HOL theorem prover. Different specification languages may be defined in terms of the TTS model. In particular, a real-time temporal logic (RTTL) has been used for specifying requirements and a graphical notation for specifying system designs. A semantics for each of these languages can be given in terms of TTSs, which can in turn be represented in the HOL logic, and these common semantic interpretations enable formal proofs that one specification satisfies another. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. J. Boulton. </author> <title> On efficiency in theorem provers which fully expand proofs into primitive inferences. </title> <type> Technical Report 248, </type> <institution> Computer Laboratory, University of Cambridge, </institution> <address> England, </address> <year> 1992. </year>
Reference-contexts: Anyway, the published theory is ultimately decidable. It seems likely that a reasonably efficient decision procedure could be implemented in HOL (see <ref> [1] </ref>, for example), but so far we have only experimented with partial automation of Henzinger's rules. Our experience with some small examples suggests that the published rules are not in the most convenient form, but with some modifications and a suitably customised proof environment they can be used effectively. <p> .. .. ... .. ... .. .. ... .. .. .. ... .. .. .... .. ... .. .. ... .. .. .. ... .. ... .. .. ... ... ... .. .. ... .. ... .. . req ! req := F [0; 0] :req ! light := red <ref> [1; 1] </ref> T ! light := green [1; 1] l 0 l 3 A timed transition has three parts: an enabling condition, an action and a timing constraint. A transition is written c ! a. When the enabling condition, c, is true the transition is said to be enabled. <p> ... .. .. .. ... .. .. .... .. ... .. .. ... .. .. .. ... .. ... .. .. ... ... ... .. .. ... .. ... .. . req ! req := F [0; 0] :req ! light := red <ref> [1; 1] </ref> T ! light := green [1; 1] l 0 l 3 A timed transition has three parts: an enabling condition, an action and a timing constraint. A transition is written c ! a. When the enabling condition, c, is true the transition is said to be enabled.
Reference: [2] <author> Chin-Tsun Chou. </author> <title> A sequent formulation of a logic of predicates in HOL. </title> <editor> In L. J. M. Claesen and M. J. G. Gordon, editors, </editor> <booktitle> Higher Order Logic Theorem Proving and its Applications, </booktitle> <pages> pages 71-80. </pages> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: Using temporal sequents in this way it is possible to reason directly about requirements in HOL using a variant of Chin-Tsun Chou's predicate logic package <ref> [2] </ref>. This is illustrated below in Section 6.4. 5 Timed Transition Diagrams In Section 2.1 TTDs were used to specify the behaviour of a traffic light controller. <p> We have done some preliminary work on this, but the example below shows roughly how a proof goes through in HOL without much special purpose machinery other than pre-proved theorems. The only non-standard features we have used are Chin-Tsun Chou's predicate logic package <ref> [2] </ref> for lifting HOL tactics to first-order sequents (i.e. A j= p) and a procedure for proving theorems based on the monotonicity of temporal operators w.r.t. implication.
Reference: [3] <author> J. R. Harrison. </author> <title> Constructing the real numbers in HOL. </title> <editor> In L. J. M. Claesen and M. J. G. Gordon, editors, </editor> <booktitle> Higher Order Logic Theorem Proving and its Applications, </booktitle> <pages> pages 145-164. </pages> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: A situation has a state component and a time component. States are mappings from variables to values; times are non-negative numbers (actually natural numbers in this work, but they could just as well be non-negative reals using an embedding of the reals in HOL <ref> [3] </ref>).
Reference: [4] <author> T. </author> <title> A Henzinger. The temporal specification and verification of real-time systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Stanford University, California, </institution> <year> 1991. </year>
Reference-contexts: Henzinger places restrictions on p, q and ' so that it cannot occur, but the general form is simpler to use and more widely applicable. 7 Neither the form given in [5] nor the version in <ref> [4] </ref> seems suitable. 16 in T and satisfying the properties above has the property that once enabled (i.e. c P = P i and all conditions in C satisfied) it remains enabled until it is taken, and the condition After t = ( c P = P j ) ^ :
Reference: [5] <author> T. A. Henzinger, Z. Manna, and A. Pnueli. </author> <title> Temporal proof methodologies for real-time systems. </title> <booktitle> In Proceedings of the 18th Symposium on Principles of Programming Languages. </booktitle> <publisher> ACM Press, </publisher> <year> 1991. </year>
Reference-contexts: Figure 1 shows how this hierarchy of semantic interpretations fits into the HOL theorem prover. We have defined a model of TTSs in HOL [7]. Within this model we have verified a number of proof rules for TTSs, including those proposed by Henzinger et al. <ref> [5] </ref>, thus demonstrating the soundness of the rules with respect to this semantic model. It is claimed that Henzinger's rules are complete for proving bounded response 1 Computational Model (e.g. <p> Not every specification will be conveniently presented in a decidable form (the requirements described in Section 3.8 are already, in minor ways, outside the scope of the rules in <ref> [5] </ref>), nor will every decidable property be decidable in reasonable time; a certain amount of interactive proof is often required before decision procedures can be applied. <p> a requirement, p, if p is true in all situation sequences which are computations of the TTS. 6.1 Proof rules A set of proof rules, which is complete for showing that a particular class of TTSs satisfies a given class of RTTL formulae, has been proposed by Henzinger et al <ref> [5] </ref>. The class of RTTL requirements captured are bounded response and bounded in-variance properties. <p> However, it is usually simple to eliminate this case in applications of the rule. Henzinger places restrictions on p, q and ' so that it cannot occur, but the general form is simpler to use and more widely applicable. 7 Neither the form given in <ref> [5] </ref> nor the version in [4] seems suitable. 16 in T and satisfying the properties above has the property that once enabled (i.e. c P = P i and all conditions in C satisfied) it remains enabled until it is taken, and the condition After t = ( c P =
Reference: [6] <author> T. A. Henzinger, Z. Manna, and A. Pnueli. </author> <title> Timed transition systems. </title> <booktitle> In Pro ceedings of the 1991 REX Workshop, </booktitle> <month> November </month> <year> 1991. </year>
Reference-contexts: 1 Introduction The theory of Timed Transition Systems developed by Henzinger, Manna and Pnueli provides a formal framework for specifying and reasoning about real-time systems <ref> [6] </ref>. In this theory a system is described by a set of state transitions with associated time constraints. Different specification languages may be defined in terms of this general model. <p> This example is taken from a paper by Henzinger et al. <ref> [6] </ref>. 2.1 System description The controller changes a pedestrian light from red to green and green to red in response to requests from pedestrians. A pedestrian may request the lights at any time. On detecting a request, the controller cancels the request and sets the pedestrian light to green. <p> Communication between processes is via state variables which are global to the 4 system. A model encompassing shared and private variables may be considered in future work. It is also possible to define synchronous and asynchronous message passing between processes <ref> [6] </ref> and these primitives could also be mechanized in HOL. 2.2 System requirements Consider the following real-time requirements for the traffic light: * Whenever a request is registered the light must become green within 1 second and then remain green for at least ffi + 1 seconds. * The light must
Reference: [7] <institution> SRI International and DSTO Australia. The HOL System. Cambridge Computer Science Research Center, SRI International, </institution> <note> revised version, 1991. Four volumes. </note>
Reference-contexts: Figure 1 shows how this hierarchy of semantic interpretations fits into the HOL theorem prover. We have defined a model of TTSs in HOL <ref> [7] </ref>. Within this model we have verified a number of proof rules for TTSs, including those proposed by Henzinger et al. [5], thus demonstrating the soundness of the rules with respect to this semantic model.
Reference: [8] <author> L. Thery, Y. Bertot, and G. Kahn. </author> <title> Real theorem provers deserve real user interfaces. </title> <type> Technical Report 1684, </type> <institution> INRIA, Sophia Antipolis, </institution> <year> 1992. </year> <month> 22 </month>
Reference-contexts: We have not yet addressed the issue of high level interfaces for verification, but we do not see this as a major problem. The addition of graphical interfaces has begun to be addressed in other work (e.g. Thery's Centaur-based interface to HOL <ref> [8] </ref>) and we would expect to use similar techniques for transition systems and RTTL. 21 A more difficult question is whether we can develop proof systems for verifying temporal properties of timed transition diagrams which are convenient to use.
References-found: 8

