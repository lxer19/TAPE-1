URL: ftp://ftp.cs.toronto.edu/pub/bonner/papers/genome.mapping/ismb94.ps
Refering-URL: http://www.cs.toronto.edu/DB/people/bonner/papers.html
Root-URL: 
Email: eharley@db.toronto.edu  bonner@db.toronto.edu  
Title: A Flexible Approach to Genome Map Assembly  
Author: Eric Harley Anthony J. Bonner 
Date: August 14-17 1994.  
Note: Appears in Proceedings of the International Symposium on Intelligent Sys tems for Molecular Biology (ISMB), pages 161-169. AAAI Press, Menlo Park, California. Held at Stanford University,  ftp://db.toronto.edu/pub/bonner/papers/genome.mapping/ismb94.ps.gz  
Address: Toronto, Ont, Canada M5S 1A4  
Affiliation: University of Toronto Department of Computer Science  
Abstract: A major goal of the Human Genome Project is to construct detailed physical maps of the human genome. A physical map is an assignment of DNA fragments to their locations on the genome. Complete maps of large genomes require the integration of many kinds of experimental data, each with its own forms of noise, experimental error and anomalies. To facilitate the assembly of physical maps, we are developing a flexible approach to map assembly based on logic programming and data visualization. Logic programming provides a convenient and mathematically rigorous way of reasoning about data, while data visualization provides layout algorithms for assembling and displaying genome mapping data. The approach has several benefits: (i) it frees the user (or programmer) from data management problems, (ii) it allows him to see anomalies in the data visually, (iii) it helps him to rapidly develop and test rules for filtering out anomalous data and for combining data from different sources, and (iv) it displays a genome map as a graph with linear structure. To demonstrate the approach, this paper describes numerous rules for map assembly implemented in a data-visualization system called Hy+. Using these rules, we have successfully assembled contigs (partial maps) from real and simulated mapping data|data that is noisy, imprecise and contradictory. This paper is available at the following URL: 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A.V. Aho, J.E. Hopcroft, and J.D. Ullman. </author> <title> Data Structures and Algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: The query uses four define graphs to express a variation of Dijkstra's shortest path algorithm <ref> [1] </ref>. The first two boxes (define start and count edges) compute the shortest paths from the start node (sts (286)) to every other node in the same connected component. This is done by adding arcs labelled b (M ) to the graph.
Reference: [2] <author> H. Ait-Kaci. </author> <title> Warren's Abstract Machine: A Tutorial Reconstruction. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: Other logic-programming systems provide even more speed. For instance, the XSB system is an order of magnitude faster than CORAL [14]. This efficiency is achieved by memoing and by compiling logical rules into code for an extended Warren Abstract Machine (XWAM) <ref> [2] </ref>. We plan to install XSB as a back end for Hy+ and test its effectiveness in assembling and analyzing physical genome maps.
Reference: [3] <author> F. Alizadeh, K.M. Karp, L.E. Newberg, and D.K. Weisser. </author> <title> Physical mapping of chromosome: A combinatorial problem in molecular biology. </title> <booktitle> In Proceedings of the ACM-SIAM Symposium on Discrete Algorithms (SODA), </booktitle> <pages> pages 371-381. </pages> <publisher> ACM Press, </publisher> <year> 1993. </year>
Reference-contexts: However, most current algorithms are limited to a narrow range of data. Some algorithms make strict assumptions about the data and the errors (sometimes assuming no error at all) in order to achieve mathematical proofs of correctness and optimality <ref> [3, 8, 11] </ref>. Map-assembly programs used at large genome centers make more realistic assumptions, but they can be inflexible, monolithic programs that are hard to modify or extend. The MAPMAKER program for genetic mapping, developed at the Whitehead/MIT Centre for Genome Research, is an example of such a program [10].
Reference: [4] <author> R. Arratia, E.S. Lander, S. Tavare, </author> <title> and M.S. Waterman. Genomic mapping by anchoring random clones: A mathematical analysis. </title> <journal> Genomics, </journal> <volume> 11 </volume> <pages> 806-827, </pages> <year> 1991. </year>
Reference-contexts: For example, a YAC insert may be chimeric, containing two DNA fragments from different parts of the genome. For data containing these chimers, two STS probes are considered close if they hit two common YACs (This is the double-linkage strategy of <ref> [4] </ref>). Other rules can specify how to resolve data ambiguities. For example, the Whitehead/MIT Genome Center has found that the pooling scheme used in their YAC screening leads to a high rate of false negatives. <p> case, we have two distinct probes, p 1 and p 2 , two distinct YACs, y 1 and y 2 , and four tuples in the hit relation: hit (p 1 ; y 1 ) hit (p 1 ; y 2 ) (2) (This is the double linkage strategy of <ref> [4] </ref>).
Reference: [5] <author> M.P. Consens. </author> <title> Graphlog: "real life" recursive queries using graphs. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, University of Toronto, 10 King's College Rd, Toronto, Ont, Canada, </institution> <year> 1989. </year>
Reference-contexts: The rectangular insert in the figure shows a graphical pattern, which is the query that generated the graph. The next sections explain such queries. 3 Hy+ Hy+ is a data visualization system based on a generalization of labeled directed graphs, called hygraphs <ref> [5, 7] </ref>. Hygraphs can be effectively used to organize the visual presentation into a more informative one than would be possible in normal graphs. The user interface to Hy+ is a menu driven windowing system offering many graphical facilities and color options for the visual display of data and relations. <p> Hy+ offers visual facilities for filtering the data to be displayed, and for defining new relations on the data. These query facilities are written in a graphical query language called GraphLog <ref> [5, 7] </ref>. A graphical query in GraphLog is composed of define graphs and show graphs. A define-graph-query defines new graphical relations, and a show-graph-query filters the data before presenting it to the user. Briefly, a define graph defines a logical rule of inference. <p> Likewise, each undistinguished edge in the graph contributes an atomic formula to the premise of this rule. The translation from query graphs to Horn rules is described in detail in <ref> [5, p. 44] </ref>. Intuitively, a define graph says that if the undistinguished edges appear in a graph, then the distinguished edge should be added to the graph. In contrast to define graphs, a show graph may have more than one distinguished edge.
Reference: [6] <author> M.P. Consens. </author> <title> Creating and Filtering Structural Data Visualizations using Hygraph Patterns. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Toronto, 10 King's College Rd, Toronto, Ont, Canada, </institution> <year> 1994. </year>
Reference-contexts: This paper gives deductive rules for dealing with such ambiguities. To test our approach, we have encoded rules for map assembly using the Hy+ data visualization system. Developed at the University of Toronto <ref> [6] </ref>, Hy+ provides a graphical user interface to a number of logic-programming systems, including PROLOG, CORAL and LDL [12, 15]. It also has a number of algorithms for graph layout. Unlike many data visualization systems, Hy+ represents both logical rules and query answers as graphs. <p> An important aspect of our work is that Hy+ is a general tool for querying and visualizing data, and was not designed with genomes or biology in mind. In fact, the initial applications of the Hy+ system were in software engineering and network management <ref> [6] </ref>. In our application, all biological knowledge is embodied in logical rules. Display of the resulting graphs is carried out by the graph layout algorithms in Hy+. These algorithms know a lot about graphs, but nothing about biology. <p> In addition, the query and data visualization facilities of Hy+ facilitate the exploration and debugging of genome maps, allowing a user to quickly locate interesting or problematic regions in a map. This is comparable to the use of Hy+ in understanding and debugging large software systems <ref> [6] </ref>. To illustrate our approach to map assembly and analysis, this paper focuses on a particular kind of physical map, called an STS content map. We show how experimental error in this data can be accommodated (and even exploited) by rules that account for the biological origins of the errors. <p> These ideas have been extensively investigated in the Logic Programming and AI communities, e:g:, [9]. It should be noted that Hy+ was designed and built without genomes or biology in mind. In fact, its initial applications were in software engineering and network management <ref> [6] </ref>. In our application, all biological knowledge is encoded in graphical patterns, like those in logic-programming system for evaluation. In this paper, the resulting inferences provide information on what probes are close together on a chromosome. Contig assembly itself is carried out by graph layout algorithms in Hy+.
Reference: [7] <author> M.P. Consens and A.O. Mendelzon. </author> <title> Graphlog: A visual formalism for real life recursion. </title> <booktitle> In Proceedings of the ACM Symposium on the Principles of Database Systems (PODS), </booktitle> <pages> pages 404-416, </pages> <year> 1990. </year>
Reference-contexts: The rectangular insert in the figure shows a graphical pattern, which is the query that generated the graph. The next sections explain such queries. 3 Hy+ Hy+ is a data visualization system based on a generalization of labeled directed graphs, called hygraphs <ref> [5, 7] </ref>. Hygraphs can be effectively used to organize the visual presentation into a more informative one than would be possible in normal graphs. The user interface to Hy+ is a menu driven windowing system offering many graphical facilities and color options for the visual display of data and relations. <p> Hy+ offers visual facilities for filtering the data to be displayed, and for defining new relations on the data. These query facilities are written in a graphical query language called GraphLog <ref> [5, 7] </ref>. A graphical query in GraphLog is composed of define graphs and show graphs. A define-graph-query defines new graphical relations, and a show-graph-query filters the data before presenting it to the user. Briefly, a define graph defines a logical rule of inference.
Reference: [8] <author> R.M. Karp. </author> <title> Mapping the genome: Some combinatorial problems arising in molecular biology. </title> <booktitle> In Proceedings of the ACM Symposium on Theory of Computing (STOC), </booktitle> <pages> pages 278-285. </pages> <publisher> ACM Press, </publisher> <year> 1993. </year>
Reference-contexts: However, most current algorithms are limited to a narrow range of data. Some algorithms make strict assumptions about the data and the errors (sometimes assuming no error at all) in order to achieve mathematical proofs of correctness and optimality <ref> [3, 8, 11] </ref>. Map-assembly programs used at large genome centers make more realistic assumptions, but they can be inflexible, monolithic programs that are hard to modify or extend. The MAPMAKER program for genetic mapping, developed at the Whitehead/MIT Centre for Genome Research, is an example of such a program [10].
Reference: [9] <author> M. Kifer and A. Li. </author> <title> On the semantics of rule-based expert systems with uncertainty. </title> <booktitle> In Proceedings of the International Conference on Database Theory (ICDT), number 326 in Lecture Notes in Computer Science, </booktitle> <pages> pages 102-117. </pages> <publisher> Springer-Verlag, </publisher> <month> August/September </month> <year> 1988. </year>
Reference-contexts: Probabilistic inference can be dealt with by logical expressions of the form q (x) : p, which intuitively means that statement q (x) is true with probability p. These ideas have been extensively investigated in the Logic Programming and AI communities, e:g:, <ref> [9] </ref>. It should be noted that Hy+ was designed and built without genomes or biology in mind. In fact, its initial applications were in software engineering and network management [6]. In our application, all biological knowledge is encoded in graphical patterns, like those in logic-programming system for evaluation.
Reference: [10] <author> E.S. Lander, P. Green, J. Abrahamson, A. Barlow, M. Daly, S. Lincoln, and L. New-burg. MAPMAKER: </author> <title> an interactive computer package for constructing primary genetic linkage maps of experimental and natural populations. </title> <journal> Genomics, </journal> <volume> 1 </volume> <pages> 174-181, </pages> <year> 1987. </year>
Reference-contexts: Map-assembly programs used at large genome centers make more realistic assumptions, but they can be inflexible, monolithic programs that are hard to modify or extend. The MAPMAKER program for genetic mapping, developed at the Whitehead/MIT Centre for Genome Research, is an example of such a program <ref> [10] </ref>. Programs for automatic assembly of integrated physical maps will be even more complex. The reason for this complexity is that mapping data comes in a wide variety of forms, each with its own forms of imprecision and experimental error.
Reference: [11] <author> A.J. Lee, E.A. Rundensteiner, S. Thomas, and S. Lafortune. </author> <title> An information model for genome map representation and assembly. </title> <type> Technical Report SDE-TR-163-93, </type> <institution> University of Michigan, Dept of Electrical Engineering and Computer Science, </institution> <address> Ann Arbor, MI 48109-2122, </address> <month> May </month> <year> 1993. </year> <month> 15 </month>
Reference-contexts: However, most current algorithms are limited to a narrow range of data. Some algorithms make strict assumptions about the data and the errors (sometimes assuming no error at all) in order to achieve mathematical proofs of correctness and optimality <ref> [3, 8, 11] </ref>. Map-assembly programs used at large genome centers make more realistic assumptions, but they can be inflexible, monolithic programs that are hard to modify or extend. The MAPMAKER program for genetic mapping, developed at the Whitehead/MIT Centre for Genome Research, is an example of such a program [10].
Reference: [12] <author> R. Ramakrishnan, D. Srivastava, and P. Seshadri. </author> <title> Implementation of the CORAL deductive database system. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 167-176, </pages> <address> Washington, DC, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: To test our approach, we have encoded rules for map assembly using the Hy+ data visualization system. Developed at the University of Toronto [6], Hy+ provides a graphical user interface to a number of logic-programming systems, including PROLOG, CORAL and LDL <ref> [12, 15] </ref>. It also has a number of algorithms for graph layout. Unlike many data visualization systems, Hy+ represents both logical rules and query answers as graphs. Using logical rules, Hy+ transforms mapping data into a graph, which is then displayed using layout algorithms. <p> The user interface to Hy+ is a menu driven windowing system offering many graphical facilities and color options for the visual display of data and relations. The front end, written in Smalltalk, communicates with other programs including database backends written in PROLOG, CORAL and LDL <ref> [12, 15] </ref>, which evaluate queries. Hy+ offers visual facilities for filtering the data to be displayed, and for defining new relations on the data. These query facilities are written in a graphical query language called GraphLog [5, 7]. <p> Modern logic-programming systems have solved these problems. For instance, the CORAL system evaluates queries from the bottom up (forward chaining) and uses a process known as "magic sets" to provide the necessary goal-directed behavior <ref> [12] </ref>. Using CORAL, each of the queries in this paper was evaluated in a few minutes or less. Other logic-programming systems provide even more speed. For instance, the XSB system is an order of magnitude faster than CORAL [14].
Reference: [13] <author> S. Rozen, M.J. Daly, M.-P. Reeve, and N. Goodman. Genome-map: </author> <title> Real-world test data and queries for logic databases. Whitehead/MIT Center for Genome Research, One Kendall Square, </title> <address> Cambridge, MA 02139. </address> <note> Unpublished draft, </note> <month> December </month> <year> 1993. </year>
Reference-contexts: We show how experimental error in this data can be accommodated (and even exploited) by rules that account for the biological origins of the errors. We illustrate the effect of the rules on synthetic but realistic STS data provided by the Whitehead Institute/MIT Center for Genome Research <ref> [13] </ref>. This data contains simulated noise and experimental error, including chimers and false negatives. It was made available expressly for the purpose of testing new logic-based approaches to map assembly. In [13], a number of queries to physical maps are suggested, queries that an investigator might reasonably ask. <p> effect of the rules on synthetic but realistic STS data provided by the Whitehead Institute/MIT Center for Genome Research <ref> [13] </ref>. This data contains simulated noise and experimental error, including chimers and false negatives. It was made available expressly for the purpose of testing new logic-based approaches to map assembly. In [13], a number of queries to physical maps are suggested, queries that an investigator might reasonably ask. We show how to answer these queries, assemble contigs, and more. 2 STS Content Mapping The aim of STS content mapping is to determine the order of STS probes along a chromosome. <p> There is not always enough data in this relation to infer that two STS probes are close together. In such cases, we can exploit ambiguous data, i:e:, data stored in the relation amb (P; Y ). A simple way of doing this is suggested in <ref> [13] </ref>: if one of the four hit tuples in (2) above is actually an ambiguous hit, then we can still infer that probes p 1 and p 2 are close. <p> can create a smaller number of larger contigs. (Additional experiments could then confirm or refute these putative contigs.) One way to do this is to search the database for evidence suggesting that two probes are probably close on the chromosome, from which we can infer a set of probable contigs <ref> [13] </ref>. The first step is to find evidence that an ambiguous hit is actually a probable hit. To see how, suppose that probe p ambiguously hits YAC y. <p> The result is a graph similar to that on the left side of Figure 2. Each simple path in this graph is called a 2-linked YAC path in <ref> [13] </ref>, and is a potential map of the contig.
Reference: [14] <author> K. Sagonas, T. Swift, and D.S. Warren. </author> <title> XSB as an efficient deductive database engine. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 442-453, </pages> <address> Minneapolis, MN, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Using CORAL, each of the queries in this paper was evaluated in a few minutes or less. Other logic-programming systems provide even more speed. For instance, the XSB system is an order of magnitude faster than CORAL <ref> [14] </ref>. This efficiency is achieved by memoing and by compiling logical rules into code for an extended Warren Abstract Machine (XWAM) [2]. We plan to install XSB as a back end for Hy+ and test its effectiveness in assembling and analyzing physical genome maps.
Reference: [15] <author> S. Tsur and C. Zaniolo. </author> <title> LDL: A Logic-Based Data-Language. </title> <booktitle> In Proceedings of the International Conference on Very Large Data Bases (VLDB), </booktitle> <address> Kyoto, Japan, </address> <year> 1986. </year> <month> 16 </month>
Reference-contexts: To test our approach, we have encoded rules for map assembly using the Hy+ data visualization system. Developed at the University of Toronto [6], Hy+ provides a graphical user interface to a number of logic-programming systems, including PROLOG, CORAL and LDL <ref> [12, 15] </ref>. It also has a number of algorithms for graph layout. Unlike many data visualization systems, Hy+ represents both logical rules and query answers as graphs. Using logical rules, Hy+ transforms mapping data into a graph, which is then displayed using layout algorithms. <p> The user interface to Hy+ is a menu driven windowing system offering many graphical facilities and color options for the visual display of data and relations. The front end, written in Smalltalk, communicates with other programs including database backends written in PROLOG, CORAL and LDL <ref> [12, 15] </ref>, which evaluate queries. Hy+ offers visual facilities for filtering the data to be displayed, and for defining new relations on the data. These query facilities are written in a graphical query language called GraphLog [5, 7].
References-found: 15

