URL: http://www.cs.utexas.edu/users/vishy/btp/ps_files/tphols97.ps
Refering-URL: http://www.cs.utexas.edu/users/vishy/linx.html
Root-URL: 
Title: Mechanizing Various -Calculi in HOL (Extended Abstract)  
Author: Sanjiva Prasad B Karthikeyan T R Vishwanath 
Address: New Delhi 110016, INDIA  
Affiliation: Department of Computer Science and Engineering Indian Institute of Technology, Delhi  
Abstract: The -calculus is a process algebra for modelling concurrent systems in which the pattern of communication may change over time. We encode various versions of the -calculus in Higher Order Logic, using the HOL90 and the HOL Light theorem provers. We extend the work of Tom Melham by incorporating polyadicity, agent definitions, guarded sums and the notion of barbed equivalence. We also encode a -calculus with localities, the l -calculus, and an adequate translation from the l -calculus to the -calculus. Using these operational theories, we are encoding example applications in the calculi and investigating the development of proof support for reasoning about mobile distributed programs by translation into the -calculus.
Abstract-found: 1
Intro-found: 1
Reference: [ACS96] <author> R. Amadio, I. Castellani, and D. Sangiorgi. </author> <title> On bisimulations for the asynchronous -calculus. </title> <booktitle> In CONCUR 96, Springer Lect. Notes in Comp. Sci. </booktitle> <volume> 1119, </volume> <pages> pages 147-162, </pages> <address> Pisa, </address> <year> 1996. </year> <note> Extended version appeared as INRIA-RR 2913, available at http://protis.univ-mrs.fr/~amadio/. </note>
Reference-contexts: In addition, we have encoded the transition relations and some simple properties of the asynchronous variants of the monadic and polyadic -calculus. In the future we intend to encode the notion of asynchronous bisimulation <ref> [ACS96] </ref>, and prove meta-theoretic properties for this notion. We have then encoded the l -calculus, as presented in [AP94] 6 and have proved some general meta-theorems about the calculus to verify the encoding.
Reference: [Ait95] <author> Otmane Ait-Mohamed. </author> <title> Mechanizing a pi-calculus equivalence in HOL. In Higher Order Logic Theorem Proving and Its Applications: </title> <booktitle> 8th International Workshop, </booktitle> <address> Aspen Grove, Utah, </address> <month> September </month> <year> 1995: </year> <booktitle> Proceedings, volume 971 of Lecture Notes in Computer Science, </booktitle> <pages> pages 1-16. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: We felt it important to support the various formulations of the - calculus, in particular polyadicity, agent definitions and guarded sums, since they allow more natural and convenient descriptions of systems. Barbed equivalence is an alternative theory. Ait-Mohammed has also extended Melham's work in <ref> [Ait95] </ref>, mechanizing a version of the -calculus in HOL, along with the notions of strong early bisimulation and the associated equivalence theory. The main result is a tactic for checking this equivalence amongst certain classes of -terms.
Reference: [Ait96] <author> Otmane Ait-Mohamed. </author> <title> La theorie du -calcul dans le systeme HOL. </title> <type> PhD thesis, </type> <institution> Universite de Nancy, </institution> <year> 1996. </year>
Reference-contexts: Ait-Mohammed has also extended Melham's work in [Ait95], mechanizing a version of the -calculus in HOL, along with the notions of strong early bisimulation and the associated equivalence theory. The main result is a tactic for checking this equivalence amongst certain classes of -terms. His Ph.D. thesis <ref> [Ait96] </ref> reports the verification of a handover protocol for mobile systems expressed in the -calculus [OP92]. We are unaware of other work in mechanizing -calculus theories in HOL. Other theorem-proving environments such as Coq are attractive alternative systems for mechanizing process calculi, particularly if they support co-inductive reasoning.
Reference: [AP94] <author> Roberto Amadio and Sanjiva Prasad. </author> <title> Localities and Failures. </title> <booktitle> In SLNCS 880: Proceedings of FST&TCS 14, SLNCS, </booktitle> <pages> pages 205-216, </pages> <year> 1994. </year>
Reference-contexts: More recently, Amadio and Prasad <ref> [AP94] </ref> have presented a calculus, called the l -calculus, that extends the synchronous polyadic -calculus with some typical distributed computing notions, such as the location of computation and resource allocation, and a simple notion of failure of sites participating in a computation. <p> Op. cit. also contains a translation of the l -calculus into a simply-sorted polyadic -calculus, which is shown there to be adequate with respect to a notion of barbed equivalence [MS92]. Motivations. The motivation of this work arose from an very simple example in <ref> [AP94] </ref> of a fault-tolerant system which is barbed equivalent to a simple repetitive process. <p> In the future we intend to encode the notion of asynchronous bisimulation [ACS96], and prove meta-theoretic properties for this notion. We have then encoded the l -calculus, as presented in <ref> [AP94] </ref> 6 and have proved some general meta-theorems about the calculus to verify the encoding. The translation from the l -calculus to the -calculus is encoded both in HOL and also in ML (see x3 below). <p> At the HOL level, this mainly involves defining the l calculus and the calculus within the same operational theory with non-clashing names for all constants, type constructors and functions in the two theories. We have encoded the example application of <ref> [AP94] </ref> and are attempting to prove a fault-tolerant property, namely the barbed equivalence of its image under the translation to a simple specification, by using the adequacy of the translation as mentioned above.
Reference: [GM93] <author> M. J. C. Gordon and T. F. Melham. </author> <title> Introduction to HOL: A theorem proving environment for higher order logic. </title> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction We report some ongoing work on the mechanization of the theories of several variants of the -calculus [MPW92] in HOL <ref> [GM93] </ref>. For the embeddings, we have primarily used HOL90 [Sli] but have also used HOL Light [Har96], a relatively new system developed by John Harrison at Cambridge on top of CAML Light.
Reference: [GMP89] <author> A. Giacalone, P. Mishra, and S. Prasad. </author> <title> Facile: A symmetric integration of concurrent and functional programming. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 18(2) </volume> <pages> 121-160, </pages> <year> 1989. </year>
Reference-contexts: For example, various researchers have shown how the -calculus may be encoded in the -calculus 4 . The -calculus supports a degree of mobility in computation by allowing dynamic changes to the communication topology. Such features may be seen in sophisticated higher-order concurrent programming languages such as Facile <ref> [GMP89] </ref>, CML [Rep91] and Pict [PT94], whose development is closely related to the -calculus. Indeed, the operational semantics for these languages may be provided by translation into the -calculus.
Reference: [Har96] <author> John R Harrison. </author> <title> HOL Light: A tutorial introduction. </title> <booktitle> In SLNCS 1166: Proceedings of FMCAD 96, </booktitle> <address> SLNCS, </address> <year> 1996. </year>
Reference-contexts: 1 Introduction We report some ongoing work on the mechanization of the theories of several variants of the -calculus [MPW92] in HOL [GM93]. For the embeddings, we have primarily used HOL90 [Sli] but have also used HOL Light <ref> [Har96] </ref>, a relatively new system developed by John Harrison at Cambridge on top of CAML Light. The work reported here was performed by the second and third authors as part of their Bachelor's degree project, under the guidance of the first author.
Reference: [HT91] <author> K. Honda and M. Tokoro. </author> <title> An object calculus for asynchronous communication. </title> <booktitle> Proc. ECOOP 91, </booktitle> <address> Geneve, </address> <year> 1991. </year>
Reference-contexts: Although we have till now spoken of the -calculus, there are in fact several variants, such as the monadic and polyadic [Mil93] variants that differ in whether a single or multiple names may be communicated in one step, and the so-called synchronous and asynchronous <ref> [HT91] </ref> variants that differ in whether a sending process "blocks" or not when a correspondent process is not immediately present.
Reference: [Mel94] <author> Tom F. Melham. </author> <title> A mechanized theory of the -calculus in HOL. </title> <journal> Nordic Journal of Computing, </journal> <volume> 1(1) </volume> <pages> 50-76, </pages> <year> 1994. </year>
Reference-contexts: The starting point for our work is a paper by Tom Melham <ref> [Mel94] </ref>, in which he outlines the encoding of a simply sorted monadic -calculus in HOL. The operational/algebraic theory he presents is based on strong late bisimulation. Melham uses the so-called deep embedding approach to encode the -calculus in HOL. <p> operational theory in HOL. 7 Indeed, the hand proof of adequacy relied on an analysis of the various kinds of sequences of moves possible, and showing properties such as confluence hold for certain kinds of moves. 4 Related Work As mentioned above, our work borrows greatly from Melham's earlier paper <ref> [Mel94] </ref>. We felt it important to support the various formulations of the - calculus, in particular polyadicity, agent definitions and guarded sums, since they allow more natural and convenient descriptions of systems. Barbed equivalence is an alternative theory.
Reference: [Mil93] <author> R. Milner. </author> <title> The polyadic -calculus: A tutorial. </title> <editor> In W. Brauer F.L. Bauer and H. Schwichtenberg, editors, </editor> <title> Logic and Algebra of Specification. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Indeed, the operational semantics for these languages may be provided by translation into the -calculus. Although we have till now spoken of the -calculus, there are in fact several variants, such as the monadic and polyadic <ref> [Mil93] </ref> variants that differ in whether a single or multiple names may be communicated in one step, and the so-called synchronous and asynchronous [HT91] variants that differ in whether a sending process "blocks" or not when a correspondent process is not immediately present.
Reference: [MPW92] <author> Robin Milner, Joachim Parrow, and David Walker. </author> <title> A calculus of mobile processes, Parts I and II. </title> <journal> Journal of Information and Computation, </journal> <volume> 100 </volume> <pages> 1-77, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: 1 Introduction We report some ongoing work on the mechanization of the theories of several variants of the -calculus <ref> [MPW92] </ref> in HOL [GM93]. For the embeddings, we have primarily used HOL90 [Sli] but have also used HOL Light [Har96], a relatively new system developed by John Harrison at Cambridge on top of CAML Light.
Reference: [MS92] <author> R. Milner and D. Sangiorgi. </author> <title> Barbed Bisimulation. </title> <booktitle> In SLNCS 623: Proceedings of ICALP 92, </booktitle> <address> SLNCS. </address> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: This small distributed calculus is in fact describes the core of Facile's model of distribution. Op. cit. also contains a translation of the l -calculus into a simply-sorted polyadic -calculus, which is shown there to be adequate with respect to a notion of barbed equivalence <ref> [MS92] </ref>. Motivations. The motivation of this work arose from an very simple example in [AP94] of a fault-tolerant system which is barbed equivalent to a simple repetitive process. <p> In this context it is probably worthwhile noting that the HOL Light support for type definitions is far easier for naive users. We have also encoded the notion of (weak) barbed equivalence, introduced originally by Pnueli and further developed by Milner and Sangiorgi <ref> [MS92] </ref>. We prove the standard theorems about these calculi under this notion of equivalence thus verifying the correctness of our encodings.
Reference: [OP92] <author> F. Orava and J. Parrow. </author> <title> An algebraic verification of a mobile network. </title> <journal> Formal Aspects of Computing, </journal> <pages> pages 497-543, </pages> <year> 1992. </year>
Reference-contexts: The main result is a tactic for checking this equivalence amongst certain classes of -terms. His Ph.D. thesis [Ait96] reports the verification of a handover protocol for mobile systems expressed in the -calculus <ref> [OP92] </ref>. We are unaware of other work in mechanizing -calculus theories in HOL. Other theorem-proving environments such as Coq are attractive alternative systems for mechanizing process calculi, particularly if they support co-inductive reasoning.
Reference: [PT94] <author> Benjamin C. Pierce and David N. Turner. </author> <title> PICT user manual, </title> <note> 1994. Available electronically. </note>
Reference-contexts: The -calculus supports a degree of mobility in computation by allowing dynamic changes to the communication topology. Such features may be seen in sophisticated higher-order concurrent programming languages such as Facile [GMP89], CML [Rep91] and Pict <ref> [PT94] </ref>, whose development is closely related to the -calculus. Indeed, the operational semantics for these languages may be provided by translation into the -calculus.
Reference: [Rep91] <author> John Reppy. </author> <title> CML: A higher-order concurrent language. </title> <booktitle> Programming Language Design and Implementation, </booktitle> <month> June </month> <year> 1991. </year>
Reference-contexts: The -calculus supports a degree of mobility in computation by allowing dynamic changes to the communication topology. Such features may be seen in sophisticated higher-order concurrent programming languages such as Facile [GMP89], CML <ref> [Rep91] </ref> and Pict [PT94], whose development is closely related to the -calculus. Indeed, the operational semantics for these languages may be provided by translation into the -calculus.
Reference: [Sli] <author> Konrad Slind. </author> <title> The online HOL90 user manual and tutorial. </title> <note> Available electronically. </note>
Reference-contexts: 1 Introduction We report some ongoing work on the mechanization of the theories of several variants of the -calculus [MPW92] in HOL [GM93]. For the embeddings, we have primarily used HOL90 <ref> [Sli] </ref> but have also used HOL Light [Har96], a relatively new system developed by John Harrison at Cambridge on top of CAML Light. The work reported here was performed by the second and third authors as part of their Bachelor's degree project, under the guidance of the first author.
Reference: [VM94] <author> B. Victor and F. Moller. </author> <title> The Mobility Workbench: A tool for the calculus. </title> <type> Technical Report ECS-LFCS-94-285, </type> <institution> Department of Computer Science, University of Edinburgh, </institution> <month> Feb </month> <year> 1994. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: However, the equivalence of the translated processes could not be verified using tools developed for the -calculus such as the Mobility WorkBench <ref> [VM94] </ref>, since the image under 4 All these encodings are basically inspired by the Krivine machine and CPS transforms. the translation of the fault-tolerant process is not finite state 5 .
References-found: 17

