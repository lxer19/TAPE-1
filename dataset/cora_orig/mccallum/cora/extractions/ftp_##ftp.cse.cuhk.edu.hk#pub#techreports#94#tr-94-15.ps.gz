URL: ftp://ftp.cse.cuhk.edu.hk/pub/techreports/94/tr-94-15.ps.gz
Refering-URL: ftp://ftp.cs.cuhk.hk/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fckchiu,jleeg@cs.cuhk.hk  
Title: Towards Practical Interval Constraint Solving in Logic Programming  
Author: C.K. Chiu and J.H.M. Lee 
Address: Shatin, Hong Kong  
Affiliation: Department of Computer Science The Chinese University of Hong Kong  
Abstract: Existing interval constraint logic programming languages, such as BNR Pro-log, work under the framework of interval narrowing and are deficient in solving linear systems, which constitute an important class of problems in engineering and other applications. In this paper, an interval linear equality solver, which is based on generalized interval arithmetic and Gaussian elimination, is proposed. We show how the solver can be adapted to incremental execution and incorporated into a constraint logic programming language already equipped with a non-linear solver based on interval narrowing. The two solvers interact and cooperate during computation, resulting in a practical interval constraint arithmetic language CIAL. A prototype of CIAL, based on CLP(R), is constructed and compared favourably against several major constraint logic programming languages. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Alefeld and J. Herzberger. </author> <title> Introduction to Interval Computations. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1983. </year> <note> Translated by J. Rokne from Ele-mente der Intervallrechnung. </note>
Reference-contexts: The former is unavoidable in performing interval arithmetic in a floating-point system. Generalized interval arithmetic by Hansen [6] presents a solution to reduce the effect of the latter. 3.1 Basics of Interval Arithmetic A good introduction to interval arithmetic can be found in <ref> [1] </ref>. In the following, we define only the necessary notations and concepts. To represent intervals, we use the usual mathematical notations, such as (1; 2] which denotes the set fx j x 2g. We differentiate between real intervals and floating-point intervals. <p> This widens the computed interval unnecessarily. The simplest examples for illustrating this problem are A I A I and A I ff A I . It can be checked easily that [0; 0] A I A I and <ref> [1; 1] </ref> A I ff A I . <p> An interval X I = [a; b] is represented as a generalized interval in the form, X I = Y I [c; c]Z I where y c = a; y +c = b; Y I = [y; y] and Z I = <ref> [1; 1] </ref>: If an interval X I i is computed depending on n other input intervals, the resulting interval is expressed as a generalized interval, X I i r=1 ir ) i and Z I ir are numerical intervals computed by ordinary interval arithmetic operators. <p> We get k = [0; 0] instead of [a b; b a], since Y I i Y I 2 ; a+b 2 ; a+b [0; 0] and Z I ir = <ref> [1; 1] </ref> [1; 1] = [0; 0]. <p> We get k = [0; 0] instead of [a b; b a], since Y I i Y I 2 ; a+b 2 ; a+b [0; 0] and Z I ir = <ref> [1; 1] </ref> [1; 1] = [0; 0].
Reference: [2] <author> F. Benhamou, D. McAllester, and P. Van Hentenryck. </author> <title> CLP(Intervals) revisited. </title> <booktitle> In Logic Programming: Proceedings of the 1994 International Symposium, </booktitle> <year> 1994. </year>
Reference-contexts: They also show how the generalized algorithm can be incorporated in CLP (R) [11] and CHIP [5] in such a way that the languages' logical semantics is preserved. Benhamou et al <ref> [2] </ref> replaces the usual interval narrowing operator of previous CLP (Interval) languages by an operator based on interval Newton method to speed up non-linear constraint solving. 3 An Interval Gaussian Elimination Solver Motivated by the success of the linear solver of CLP (R), CIAL's linear solver is also an adaptation of <p> Substituting the coefficients with some concrete data, we get the following system of equalities. ( [2:0001; 2:0002] X I [1:0002; 1:0003] Y I = <ref> [2; 2] </ref> Solving the above system using naive interval Gaussian elimination yields the following results. ( Y I = (0:80016132 : : :; 0:79975469 : : :) In the following, we show that better results can be obtained by adopting operators from generalized interval arithmetic in Gaussian elimination. 3.3 Generalized Interval
Reference: [3] <editor> F. Benhamou and W.J. Older. </editor> <title> Applying interval arithmetic to real, integer and boolean constraints. </title> <note> (to appear) Journal of Logic Programming, </note> <year> 1994. </year>
Reference-contexts: We collectively call these techniques interval narrowing hereafter. Interval narrowing has been shown to be applicable to critical path scheduling [18], X-ray diffraction crystallography [18], boolean constraint solving <ref> [3] </ref>, disjunctive constraint solving [3, 19], and finite domain 1 constraint solving [3]. However, it is deficient in handling linear constraints. <p> We collectively call these techniques interval narrowing hereafter. Interval narrowing has been shown to be applicable to critical path scheduling [18], X-ray diffraction crystallography [18], boolean constraint solving [3], disjunctive constraint solving <ref> [3, 19] </ref>, and finite domain 1 constraint solving [3]. However, it is deficient in handling linear constraints. <p> We collectively call these techniques interval narrowing hereafter. Interval narrowing has been shown to be applicable to critical path scheduling [18], X-ray diffraction crystallography [18], boolean constraint solving <ref> [3] </ref>, disjunctive constraint solving [3, 19], and finite domain 1 constraint solving [3]. However, it is deficient in handling linear constraints. For example, interval narrowing fails to narrow for such simple systems as "fX + Y = 5; X Y = 6g." Cleary [4] proposes a form of case analysis technique, domain splitting, as a remedy. <p> A constraint relaxation cycle is needed to coordinate the execution of the narrowing algorithms for a network of constraints. BNR-Prolog [18] and its sequel CLP (BNR) <ref> [3] </ref> provide relational interval arithmetic in a way that is loosely based on Cleary's pre-publication idea, differing somewhat in particulars. Sidebottom and 1 Detailed analysis of the two claims requires knowledge of interval narrowing, which is out of the scope of this paper.
Reference: [4] <author> J.G. Cleary. </author> <title> Logical arithmetic. </title> <journal> Future Computing Systems, </journal> <volume> 2(2) </volume> <pages> 125-149, </pages> <year> 1987. </year>
Reference-contexts: However, it is deficient in handling linear constraints. For example, interval narrowing fails to narrow for such simple systems as "fX + Y = 5; X Y = 6g." Cleary <ref> [4] </ref> proposes a form of case analysis technique, domain splitting, as a remedy. Domain splitting partitions an interval into two, visit one, and visit the other upon backtracking. This backtracking tree search is expensive to perform. <p> In particular, the interaction between the two constraint solvers is discussed in details. In section 5, the prototype implementation of CIAL and its comparisons to other major interval systems are described. Section 6 summarizes the contributions of the paper and sheds light on further work. 2 Related Work Cleary <ref> [4] </ref> introduces "logical arithmetic," a relational version of interval arithmetic, into Prolog. He describes distinct algorithms, one for each kind of constraint over intervals, that narrow intervals associated with a constraint by removing values that do not satisfy the constraint.
Reference: [5] <author> M. Dincbas, P. Van Hentenryck, H. Simonis, A. Aggoun, T. Graf, and F. Berthier. </author> <title> The constraint logic programming language CHIP. </title> <booktitle> In Proceedings of the International Conference on Fifth Generation Computer Systems (FGCS'88), </booktitle> <pages> pages 693-702, </pages> <address> Tokyo, Japan, </address> <month> December </month> <year> 1988. </year>
Reference-contexts: Lee and van Emden [12, 13] generalize Cleary's algorithms for narrowing intervals constrained by any relations p on I (IR) n . They also show how the generalized algorithm can be incorporated in CLP (R) [11] and CHIP <ref> [5] </ref> in such a way that the languages' logical semantics is preserved. <p> Semantically, an interval variable is an ordinary logical variable. We distinguish interval variables from logical variables purely for implementation efficiency. Resembling domain variables in CHIP <ref> [5] </ref>, an interval variable is represented as a variable with an associated interval. Interval variable can unify with other unbound logical variables, interval variables, or numbers. To unify an interval with an unbound variable, we simply bind the interval variable to the unbound variable.
Reference: [6] <author> E.R. Hansen. </author> <title> A generalized interval arithmetic. In K.L. Nickel, editor, Interval Mathematics: </title> <booktitle> Proceedings of the International Symposium, </booktitle> <pages> pages 7-18. </pages> <publisher> Springer-Verlag, </publisher> <year> 1975. </year>
Reference-contexts: Answers generated using this naive approach will not be as sharp as possible, in general, due to outward-rounding and the variable dependency problem. The former is unavoidable in performing interval arithmetic in a floating-point system. Generalized interval arithmetic by Hansen <ref> [6] </ref> presents a solution to reduce the effect of the latter. 3.1 Basics of Interval Arithmetic A good introduction to interval arithmetic can be found in [1]. In the following, we define only the necessary notations and concepts. <p> In the following, we show that better results can be obtained by adopting operators from generalized interval arithmetic in Gaussian elimination. 3.3 Generalized Interval Gaussian Elimination A generalized interval Gaussian elimination procedure is obtained by replacing the ordinary arithmetic operators in an Gaussian elimination procedure by generalized interval arithmetic operators <ref> [6] </ref>. Interval computation on generalized interval arithmetic is somewhat similar to the use of interval mean-value theorem [17] for obtaining sharper results. However, calculating the derivative of functions can be avoided. <p> The computation rules for Y I i and Z I ir are beyond the scope of this paper. We study the generalized interval minus as an example and refer the readers to <ref> [6] </ref>.
Reference: [7] <author> W.S. Havens, S. Sidebottom, G. Sidebottom, J. Jones, M. Cuperman, and R. Davison. </author> <title> Echidna constraint reasoning system: Next-generation expert system technology. </title> <type> Technical Report CSS-IS TR 90-09, </type> <institution> Centre for Systems Science, Simon Fraser University, Burnaby, B.C., Canada, </institution> <year> 1990. </year>
Reference-contexts: We justify our assertion by experiments with a few interval narrowing implementations, as described in section 5. 2 Havens [19] design and implement a version of relational interval arithmetic in the constraint reasoning system Echidna <ref> [7] </ref>. Based on hierarchical consistency techniques [16], Echidna can handle unions of disjoint intervals. Lhomme [14] analyzes the complexity of consistency techniques for numeric CSP's and proposes partial consistency techniques, whose complexities can be tuned by adjusting the bound width of the resulting intervals.
Reference: [8] <author> H. Hong. </author> <title> Non-linear real constraints in constraint logic programming. </title> <booktitle> In Proceedings of the Second International Conference on Algebraic and Logic Programming, </booktitle> <pages> pages 201-212, </pages> <year> 1992. </year>
Reference-contexts: Second, roundoff errors induced by floating-point arithmetic destroys the soundness of computation. The advent of constraint logic programming [9] presents a solution to the first problem but the implementation of CLP languages, such as CLP (R) [11], are mostly based on floating-point arithmetic. The second problem remains. RISC-CLP (R) <ref> [8] </ref> uses symbolic algebra methods to tackle the roundoff error problem. Previous efforts in the sub-symbolic camp, such as BNR Prolog [18], employ interval methods [17] and belong to the family of consistency techniques [15]. We collectively call these techniques interval narrowing hereafter. <p> In the following, we compare CIAL with BNR Prolog v3.1.0, CLP (BNR) (or BNR Prolog v4.2.3), Echidna Version 0.947 beta, and CLP (R) Version 10 1.2 over three numerical examples of various types: analysis of a simple DC circuit, inconsistent simultaneous equations, and the famous Wilkinson polynomial <ref> [8] </ref>. The examples range from purely linear constraints, to a mixture of linear and non-linear constraints, and to purely non-linear constraints.
Reference: [9] <author> J. Jaffar and J-L. Lassez. </author> <title> Constraint logic programming. </title> <booktitle> In Proceedings of the 14th ACM POPL Conference, </booktitle> <pages> pages 111-119, </pages> <address> Munich, </address> <month> January </month> <year> 1987. </year>
Reference-contexts: Towards the first aim, current status of Prolog arithmetic has much to be desired. First, Prolog arithmetic is functional in nature. Second, roundoff errors induced by floating-point arithmetic destroys the soundness of computation. The advent of constraint logic programming <ref> [9] </ref> presents a solution to the first problem but the implementation of CLP languages, such as CLP (R) [11], are mostly based on floating-point arithmetic. The second problem remains. RISC-CLP (R) [8] uses symbolic algebra methods to tackle the roundoff error problem. <p> In the following, we describe the operational semantics of CIAL, each component of the architecture and the interaction between the two solvers in more details. 6 4.1 Operational Semantics CIAL shares the same syntax and declarative semantics <ref> [9] </ref> as CLP (R). Its operational semantics is based on the generalized M X derivation [12].
Reference: [10] <author> J. Jaffar, M.J. Maher, P.J. Stuckey, and R.H.C. Yap. </author> <booktitle> Output in CLP(R). In Proceedings of the International Conference on Fifth Generation Computer Systems 1992 (to appear), </booktitle> <address> Tokyo, Japan, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Generalized M X derivation is not new. It has been implemented in CLP (R) for constraint simplification and output <ref> [10] </ref>. 4.2 The Inference Engine The structure of the engine resembles that of a standard structure-sharing Prolog interpreter and there is no need to elaborate further. Some changes to the unification algorithm, however, is needed to unify interval variables with other terms in CIAL. Additional binding mechanisms are defined. <p> The problem is to find the real roots of the following equation. 20 Y (X + i) + EX 19 = 0 Let E = 0. The real roots of this unperturbed polynomial in the closed interval <ref> [20; 10] </ref> are -20,-19,-18,-17,-16,-15,14,-13,-12,-11,-10, respectively. A slight perturbation of the polynomial by E = 2 23 removes all roots in [20; 10], as shown in figure 3 (a) which consists of the curves Y = Q 20 i=1 (X + i) and Y = EX 19 . <p> The real roots of this unperturbed polynomial in the closed interval <ref> [20; 10] </ref> are -20,-19,-18,-17,-16,-15,14,-13,-12,-11,-10, respectively. A slight perturbation of the polynomial by E = 2 23 removes all roots in [20; 10], as shown in figure 3 (a) which consists of the curves Y = Q 20 i=1 (X + i) and Y = EX 19 . CIAL returns no answers as expected.
Reference: [11] <author> J. Jaffar, S. Michaylov, P.J. Stuckey, and R.H.C. Yap. </author> <title> The CLP(R) language and system. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 14(3) </volume> <pages> 339-395, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: First, Prolog arithmetic is functional in nature. Second, roundoff errors induced by floating-point arithmetic destroys the soundness of computation. The advent of constraint logic programming [9] presents a solution to the first problem but the implementation of CLP languages, such as CLP (R) <ref> [11] </ref>, are mostly based on floating-point arithmetic. The second problem remains. RISC-CLP (R) [8] uses symbolic algebra methods to tackle the roundoff error problem. Previous efforts in the sub-symbolic camp, such as BNR Prolog [18], employ interval methods [17] and belong to the family of consistency techniques [15]. <p> Lee and van Emden [12, 13] generalize Cleary's algorithms for narrowing intervals constrained by any relations p on I (IR) n . They also show how the generalized algorithm can be incorporated in CLP (R) <ref> [11] </ref> and CHIP [5] in such a way that the languages' logical semantics is preserved. <p> CIAL is no exception. In the following, we present such an adaptation for the generalized Gaussian elimination procedure and its interaction with the non-linear solver. Our algorithm is based on that of CLP (R) <ref> [11] </ref>. We present only the parts that differ from their counterparts in CLP (R): detection of redundancy/inconsistency of newly added linear equation and the selection of non-parametric variables.
Reference: [12] <author> J.H.M. Lee and M.H. van Emden. </author> <title> Adapting CLP(R) to floating-point arithmetic. </title> <booktitle> In Proceedings of the International Conference on Fifth Generation Computer Systems 1992, </booktitle> <pages> pages 996-1003, </pages> <address> Tokyo, Japan, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Furthermore, interval narrowing may sometimes fail or take a long time to detect inconsistency of linear systems. 1 Thus, interval narrowing is opted for improvement in terms of practicality. We propose CIAL (for Constraint Interval Arithmetic Language), an extension of ICLP (R) <ref> [12] </ref>, the constraint solver of which is based on interval narrowing. The syntax and semantics of CIAL are almost identical to those of ICLP (R) [12], except that the arithmetic operators use slightly different, but self-explanatory, symbols. The enhancement is in terms of constraint solving capabilities. <p> We propose CIAL (for Constraint Interval Arithmetic Language), an extension of ICLP (R) <ref> [12] </ref>, the constraint solver of which is based on interval narrowing. The syntax and semantics of CIAL are almost identical to those of ICLP (R) [12], except that the arithmetic operators use slightly different, but self-explanatory, symbols. The enhancement is in terms of constraint solving capabilities. CIAL consists of a linear interval constraint solver in addition to an interval narrowing solver. <p> Based on hierarchical consistency techniques [16], Echidna can handle unions of disjoint intervals. Lhomme [14] analyzes the complexity of consistency techniques for numeric CSP's and proposes partial consistency techniques, whose complexities can be tuned by adjusting the bound width of the resulting intervals. Lee and van Emden <ref> [12, 13] </ref> generalize Cleary's algorithms for narrowing intervals constrained by any relations p on I (IR) n . They also show how the generalized algorithm can be incorporated in CLP (R) [11] and CHIP [5] in such a way that the languages' logical semantics is preserved. <p> Its operational semantics is based on the generalized M X derivation <ref> [12] </ref>. Let P be a CLP (X ) program, where X is a domain of computation with structure M X , and G i = c; B 1 ; : : : ; B k ; : : : ; B n , n &gt; 0 a goal.
Reference: [13] <author> J.H.M. Lee and M.H. van Emden. </author> <title> Interval computation as deduction in CHIP. </title> <journal> Journal of Logic Programming, </journal> <volume> 16(3 </volume> & 4):255-276, 1993. 
Reference-contexts: Based on hierarchical consistency techniques [16], Echidna can handle unions of disjoint intervals. Lhomme [14] analyzes the complexity of consistency techniques for numeric CSP's and proposes partial consistency techniques, whose complexities can be tuned by adjusting the bound width of the resulting intervals. Lee and van Emden <ref> [12, 13] </ref> generalize Cleary's algorithms for narrowing intervals constrained by any relations p on I (IR) n . They also show how the generalized algorithm can be incorporated in CLP (R) [11] and CHIP [5] in such a way that the languages' logical semantics is preserved.
Reference: [14] <author> O. Lhomme. </author> <title> Consistency techniques for numeric CSPs. </title> <booktitle> In Proceedings of the 13th International Joint Conference on Artificial Intelligence, </booktitle> <year> 1993. </year>
Reference-contexts: Based on hierarchical consistency techniques [16], Echidna can handle unions of disjoint intervals. Lhomme <ref> [14] </ref> analyzes the complexity of consistency techniques for numeric CSP's and proposes partial consistency techniques, whose complexities can be tuned by adjusting the bound width of the resulting intervals.
Reference: [15] <author> A.K. Mackworth. </author> <title> Consistency in networks of relations. </title> <journal> AI Journal, </journal> <volume> 8(1) </volume> <pages> 99-118, </pages> <year> 1977. </year>
Reference-contexts: The second problem remains. RISC-CLP (R) [8] uses symbolic algebra methods to tackle the roundoff error problem. Previous efforts in the sub-symbolic camp, such as BNR Prolog [18], employ interval methods [17] and belong to the family of consistency techniques <ref> [15] </ref>. We collectively call these techniques interval narrowing hereafter. Interval narrowing has been shown to be applicable to critical path scheduling [18], X-ray diffraction crystallography [18], boolean constraint solving [3], disjunctive constraint solving [3, 19], and finite domain 1 constraint solving [3]. However, it is deficient in handling linear constraints.
Reference: [16] <author> A.K. Mackworth, J.A. </author> <title> Mulder, and W.S. Havens. Hierarchical arc consistency: Exploiting structured domains in constraint satisfaction problems. </title> <journal> Computational Intelligence, </journal> <volume> 1 </volume> <pages> 118-126, </pages> <year> 1985. </year>
Reference-contexts: We justify our assertion by experiments with a few interval narrowing implementations, as described in section 5. 2 Havens [19] design and implement a version of relational interval arithmetic in the constraint reasoning system Echidna [7]. Based on hierarchical consistency techniques <ref> [16] </ref>, Echidna can handle unions of disjoint intervals. Lhomme [14] analyzes the complexity of consistency techniques for numeric CSP's and proposes partial consistency techniques, whose complexities can be tuned by adjusting the bound width of the resulting intervals.
Reference: [17] <author> R.E. Moore. </author> <title> Interval Analysis. </title> <publisher> Prentice-Hall, </publisher> <year> 1966. </year>
Reference-contexts: The second problem remains. RISC-CLP (R) [8] uses symbolic algebra methods to tackle the roundoff error problem. Previous efforts in the sub-symbolic camp, such as BNR Prolog [18], employ interval methods <ref> [17] </ref> and belong to the family of consistency techniques [15]. We collectively call these techniques interval narrowing hereafter. <p> Interval computation on generalized interval arithmetic is somewhat similar to the use of interval mean-value theorem <ref> [17] </ref> for obtaining sharper results. However, calculating the derivative of functions can be avoided.
Reference: [18] <author> W. Older and A. Vellino. </author> <title> Extending Prolog with constraint arithmetics on real intervals. </title> <booktitle> In Proceedings of the Canadian Conference on Computer & Electrical Engineering, </booktitle> <address> Ottawa, Canada, </address> <year> 1990. </year>
Reference-contexts: The second problem remains. RISC-CLP (R) [8] uses symbolic algebra methods to tackle the roundoff error problem. Previous efforts in the sub-symbolic camp, such as BNR Prolog <ref> [18] </ref>, employ interval methods [17] and belong to the family of consistency techniques [15]. We collectively call these techniques interval narrowing hereafter. Interval narrowing has been shown to be applicable to critical path scheduling [18], X-ray diffraction crystallography [18], boolean constraint solving [3], disjunctive constraint solving [3, 19], and finite domain <p> Previous efforts in the sub-symbolic camp, such as BNR Prolog <ref> [18] </ref>, employ interval methods [17] and belong to the family of consistency techniques [15]. We collectively call these techniques interval narrowing hereafter. Interval narrowing has been shown to be applicable to critical path scheduling [18], X-ray diffraction crystallography [18], boolean constraint solving [3], disjunctive constraint solving [3, 19], and finite domain 1 constraint solving [3]. However, it is deficient in handling linear constraints. <p> Previous efforts in the sub-symbolic camp, such as BNR Prolog <ref> [18] </ref>, employ interval methods [17] and belong to the family of consistency techniques [15]. We collectively call these techniques interval narrowing hereafter. Interval narrowing has been shown to be applicable to critical path scheduling [18], X-ray diffraction crystallography [18], boolean constraint solving [3], disjunctive constraint solving [3, 19], and finite domain 1 constraint solving [3]. However, it is deficient in handling linear constraints. <p> He describes distinct algorithms, one for each kind of constraint over intervals, that narrow intervals associated with a constraint by removing values that do not satisfy the constraint. A constraint relaxation cycle is needed to coordinate the execution of the narrowing algorithms for a network of constraints. BNR-Prolog <ref> [18] </ref> and its sequel CLP (BNR) [3] provide relational interval arithmetic in a way that is loosely based on Cleary's pre-publication idea, differing somewhat in particulars. Sidebottom and 1 Detailed analysis of the two claims requires knowledge of interval narrowing, which is out of the scope of this paper.
Reference: [19] <author> G. Sidebottom and W.S. Havens. </author> <title> Hierarchical arc consistency for disjoint real intervals in constraint logic programming. </title> <journal> Computational Intelligence, </journal> <volume> 8(4), </volume> <year> 1992. </year>
Reference-contexts: We collectively call these techniques interval narrowing hereafter. Interval narrowing has been shown to be applicable to critical path scheduling [18], X-ray diffraction crystallography [18], boolean constraint solving [3], disjunctive constraint solving <ref> [3, 19] </ref>, and finite domain 1 constraint solving [3]. However, it is deficient in handling linear constraints. <p> Sidebottom and 1 Detailed analysis of the two claims requires knowledge of interval narrowing, which is out of the scope of this paper. We justify our assertion by experiments with a few interval narrowing implementations, as described in section 5. 2 Havens <ref> [19] </ref> design and implement a version of relational interval arithmetic in the constraint reasoning system Echidna [7]. Based on hierarchical consistency techniques [16], Echidna can handle unions of disjoint intervals.
Reference: [20] <author> J.H. Wilkinson. </author> <title> The Algebraic Eigenvalue Problem. </title> <publisher> Oxford University Press, </publisher> <year> 1965. </year> <month> 15 </month>
Reference-contexts: In the case of interval division, ff, B cannot contain 0. Floating-point intervals are not closed 2 We refer the interested readers to the outstanding book by Wilkinson <ref> [20] </ref>. 3 Interval versions of other arithmetic operators, such as squaring, can be defined similarly. 3 under interval operations. In floating-point arithmetic, real numbers are approximated by floating-point numbers using rounding or truncation. In interval arithmetic, we approximate real intervals by floating-point intervals using the outward-rounding function ~. <p> The problem is to find the real roots of the following equation. 20 Y (X + i) + EX 19 = 0 Let E = 0. The real roots of this unperturbed polynomial in the closed interval <ref> [20; 10] </ref> are -20,-19,-18,-17,-16,-15,14,-13,-12,-11,-10, respectively. A slight perturbation of the polynomial by E = 2 23 removes all roots in [20; 10], as shown in figure 3 (a) which consists of the curves Y = Q 20 i=1 (X + i) and Y = EX 19 . <p> The real roots of this unperturbed polynomial in the closed interval <ref> [20; 10] </ref> are -20,-19,-18,-17,-16,-15,14,-13,-12,-11,-10, respectively. A slight perturbation of the polynomial by E = 2 23 removes all roots in [20; 10], as shown in figure 3 (a) which consists of the curves Y = Q 20 i=1 (X + i) and Y = EX 19 . CIAL returns no answers as expected.
References-found: 20

