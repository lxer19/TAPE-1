URL: http://www.cs.purdue.edu/homes/spaf/tech-reps/9210.ps
Refering-URL: http://www.cs.purdue.edu/coast/coast-tools.html
Root-URL: http://www.cs.purdue.edu
Author: Eugene H. Spafford Stephen A. Weeber 
Date: 19 February 1992  
Address: Building  West Lafayette, IN 47907-1398  
Affiliation: Purdue  Department of Computer Sciences 1398 Computer Science  Purdue University  
Note: Authors?  
Pubnum: Technical Report CSD-TR 92-010 SERC Technical Report SERC-TR 110-P  
Abstract: Software Forensics: Can We Track Code to its Abstract Viruses, worms, trojan horses, and crackers all exist and threaten the security of our computer systems. Often, we are aware of an intrusion only after it has occurred. On some occasions, we may have a fragment of code left behind used by an adversary to gain access or damage the system. A natural question to ask is Can we use this remnant of code to positively identify the culprit? In this paper, we detail some of the features of code remnants that might be analyzed and then used to identify their authors. We further outline some of the difficulties involved in tracing an intruder by analyzing code. We conclude by discussing some future work that needs to be done before this approach can be properly evaluated. We refer to our process as software forensics, similar to medical forensics: we are examining the remains to obtain evidence about the factors involved. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Louis J. Chmura and Henry F. Ledgard. </author> <title> COBOL with Style: Programming Proverbs. </title> <publisher> Hyden Book Company, Inc., </publisher> <address> Rochelle Park, NJ, </address> <year> 1976. </year>
Reference-contexts: Using appropriate stylistic elements may help in the production, reuse, and debugging of code. Many texts recommend elements of style to use when programming, and often programmers integrate selected elements of others' styles into their own repertoire as they gain experience programming (cf. <ref> [1, 9, 11, 6, 17] </ref>). The keys to identifying the author of suspect code are selection of an appropriate body of code and identification of appropriate features for comparison.
Reference: [2] <author> B. J. Choi, R. A. DeMillo, E. W. Krauser, R. J. Martin, A. P. Mathur, A. J. Offutt, H. Pan, and E. H. Spafford. </author> <title> The Mothra tools set. </title> <booktitle> In Proceedings of the 22nd Hawaii International Conference on Systems and Software, </booktitle> <pages> pages 275-284, </pages> <address> Kona, HI, </address> <month> January </month> <year> 1989. </year>
Reference: [3] <author> S. D. Conte, H. E. Dunsmore, and V. Y. Shen. </author> <title> Software Engineering Metrics and Models. </title> <address> Benjamin/Cummings, </address> <year> 1986. </year> <month> 14 </month>
Reference: [4] <author> The Cuckoo's Egg. Clifford Stoll. </author> <title> Doubleday, </title> <address> New York, NY, </address> <year> 1989. </year>
Reference: [5] <author> Mark W. Eichin and Jon A. Rochlis. </author> <title> With microscope and tweezers: an analysis of the Internet virus of November 1988. </title> <booktitle> In Proceedings of the Symposium on Research in Security and Privacy, </booktitle> <address> Oakland, CA, </address> <month> May </month> <year> 1989. </year> <pages> IEEE-CS. </pages>
Reference: [6] <author> L.W. Cannon et. al. </author> <title> Recommended C Style and Coding Standards. Pocket reference guide. Specialized Systems Consultants, 1991. Updated version of AT&T's Indian Hill coding guidelines. </title>
Reference-contexts: Using appropriate stylistic elements may help in the production, reuse, and debugging of code. Many texts recommend elements of style to use when programming, and often programmers integrate selected elements of others' styles into their own repertoire as they gain experience programming (cf. <ref> [1, 9, 11, 6, 17] </ref>). The keys to identifying the author of suspect code are selection of an appropriate body of code and identification of appropriate features for comparison.
Reference: [7] <author> Joseph A. Fanciulli. </author> <title> The process of handwriting comparison. </title> <journal> FBI Law Enforcement Bulletin, </journal> <pages> pages 5-8, </pages> <month> October </month> <year> 1979. </year>
Reference: [8] <author> M. F. Interrante and Z. Basrawala. </author> <title> Reverse engineering annotated bibliography. </title> <type> Technical Report SERC-TR-12-F, </type> <institution> Software Engineering Research Center, University of Florida, </institution> <month> January </month> <year> 1988. </year>
Reference-contexts: The analysis of code to determine characteristics is, at the heart, a form of reverse-engineering. Existing techniques, however, have focused more on how to recover specifications and programmer decisions rather than to determine programmer-specific characteristics (cf., <ref> [8] </ref>). Further research into this technique, based on examination of large amounts of code, should provide further insight into the utility of what we have proposed.
Reference: [9] <author> Brian W. Kernighan and P. J. Plauger. </author> <title> The Elements of Programming Style. </title> <publisher> Mcgraw-Hill, </publisher> <address> second edition, </address> <year> 1978. </year>
Reference-contexts: Using appropriate stylistic elements may help in the production, reuse, and debugging of code. Many texts recommend elements of style to use when programming, and often programmers integrate selected elements of others' styles into their own repertoire as they gain experience programming (cf. <ref> [1, 9, 11, 6, 17] </ref>). The keys to identifying the author of suspect code are selection of an appropriate body of code and identification of appropriate features for comparison.
Reference: [10] <author> V. Klement, R. Naske, and K. Steinke. </author> <title> The application of image processing and pattern recognition techniques to the forensic analysis of handwriting. </title> <booktitle> In 1980 International Conference: Security Through Science and Engineering, </booktitle> <pages> pages 5-11, </pages> <year> 1980. </year>
Reference: [11] <author> Henry F. Ledgard, Paul A. Nagin, and John F. Hueras. </author> <title> Pascal with Style. </title> <publisher> Hayden, </publisher> <year> 1979. </year>
Reference-contexts: Using appropriate stylistic elements may help in the production, reuse, and debugging of code. Many texts recommend elements of style to use when programming, and often programmers integrate selected elements of others' styles into their own repertoire as they gain experience programming (cf. <ref> [1, 9, 11, 6, 17] </ref>). The keys to identifying the author of suspect code are selection of an appropriate body of code and identification of appropriate features for comparison.
Reference: [12] <author> Frederick Mosteller and David L. Wallace. </author> <title> Applied Bayesian and Classical Inference: </title> <booktitle> The Case of the Federalist Papers. Springer Series in Statistics. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1964. </year>
Reference: [13] <author> Charles Simonyi. </author> <title> Meta-programming: A software production technique. </title> <journal> Byte, </journal> <pages> pages 34-45, </pages> <month> September </month> <year> 1991. </year>
Reference: [14] <author> Herbert Solomon. </author> <booktitle> Confidence Intervals in Legal Settings, </booktitle> <pages> pages 455-473. </pages> <publisher> John Wiley & Sons, </publisher> <year> 1986. </year>
Reference-contexts: However, a rigorous mathematical approach is needed if any of these kinds of results are to be applied in a court of law (cf. <ref> [14] </ref>). We believe that if this approach is developed, it may also prove useful 13 in applications of reverse-engineering for reuse and debugging. The analysis of code to determine characteristics is, at the heart, a form of reverse-engineering.
Reference: [15] <author> Eugene H. Spafford. </author> <title> The Internet worm program: an analysis. </title> <journal> Computer Communication Review, </journal> <volume> 19(1), </volume> <month> January </month> <year> 1989. </year> <note> Also issued as Purdue CS technical report TR-CSD-823. 15 </note>
Reference-contexts: This was certainly a 1 Our experience with both undergraduate and graduate student programmers sup ports this supposition. 5 poor approach, as the repeated searches of long lists dramatically reduced the efficiency of the program. This was noted in <ref> [15] </ref>, and a correspondent later related that the Worm's author, Robert T. Morris, had been instructed in the Lisp programming language in his first undergraduate data structures and algorithms course. <p> As an example, consider the following section of code in the C language: #define DEBUG 0 main () - 3 Including <ref> [15] </ref>. 10 /* some amount of code here */ if (DEBUG) - printf ... many debugging values here ... - In this example the code will never be executed.
Reference: [16] <author> Eugene H. Spafford. </author> <title> Extending mutation testing to find environ-mental bugs. </title> <journal> Software Practice and Experience, </journal> <volume> 20(2) </volume> <pages> 181-189, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: code by both students and colleagues: * Failure to code bitwise operations to reflect different byte ordering on the target machine the so-called little-endian vs. big-endian problem. * Failure to check for numeric overflow or underflow, or assuming that the internal numeric representation was of a certain (different) form (cf. <ref> [16] </ref>). * Assuming that uninitialized pointers can be dereferenced with out generating a fault. * Assuming the stack can hold very large value-copy parameter structures when doing subroutine calls. * Failure to check error returns from some system calls that can (rarely) fail. 11 Metrics Software metrics might be employed to
Reference: [17] <author> Dennie Van Tassel. </author> <title> Program Style, Design, Efficiency, Debugging, and Testing. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <note> second edition, </note> <year> 1978. </year>
Reference-contexts: Using appropriate stylistic elements may help in the production, reuse, and debugging of code. Many texts recommend elements of style to use when programming, and often programmers integrate selected elements of others' styles into their own repertoire as they gain experience programming (cf. <ref> [1, 9, 11, 6, 17] </ref>). The keys to identifying the author of suspect code are selection of an appropriate body of code and identification of appropriate features for comparison.
References-found: 17

