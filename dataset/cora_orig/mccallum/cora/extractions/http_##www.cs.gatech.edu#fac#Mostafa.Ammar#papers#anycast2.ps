URL: http://www.cs.gatech.edu/fac/Mostafa.Ammar/papers/anycast2.ps
Refering-URL: http://www.cs.gatech.edu/fac/Mostafa.Ammar/anycast.html
Root-URL: 
Email: ffei,bobby,ewz,ammarg@cc.gatech.edu  
Title: A Novel Server Selection Technique for Improving the Response Time of a Replicated Service  
Author: Zongming Fei Samrat Bhattacharjee Ellen W. Zegura Mostafa H. Ammar 
Note: This work is supported in part by research grants from IBM, Intel and NSF under contract number NCR 9628379.  
Address: Atlanta, GA 30332  
Affiliation: Networking and Telecommunications Group College of Computing Georgia Institute of Technology  
Abstract: Server replication is an approach often used to improve the ability of a service to handle a large number of clients. One of the important factors in the efficient utilization of replicated servers is the ability to direct client requests to the best server, according to some optimality criteria. In this paper we target an environment in which servers are distributed across the Internet, and clients identify servers using our application-layer anycasting service. Our goal is to allocate servers to clients in a way that minimizes a client's response time. To that end, we develop an approach for estimating the performance that a client would experience when accessing particular servers. Such information is maintained in a resolver that clients can query to obtain the identity of the server with the best response time. Our performance collection technique combines server push with client probes to estimate the expected response time. A set of experiments is used to demonstrate the properties of our performance determination approach and to show its advantages when used within the application-layer anycasting architecture. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. D. Katz, M. Butler, and R. McGrath, </author> <title> "A scalable HTTP server: The NCSA prototype," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> vol. 27, </volume> <pages> pp. 155-164, </pages> <year> 1994. </year>
Reference-contexts: Furthermore, the closest server geographically may not be the best server to use because it may not be the closest in terms of end-to-end delay over the Internet and/or it may not be the least loaded of the servers. 2. Using Domain Name System (DNS) modifications <ref> [1] </ref> to return the IP address of one of a set of servers when the DNS server is queried. This technique is transparent to the client.
Reference: [2] <author> S. Bhattacharjee, M. H. Ammar, E. W. Zegura, V. Shah, and Z. Fei, </author> <title> "Application layer anycasting," </title> <booktitle> in Proceedings of INFOCOM 97, </booktitle> <year> 1997. </year>
Reference-contexts: Such a mechanism must allow for the maintenance of information about the servers and their relative performance. One such technique that we have proposed uses the anycasting communication paradigm at the application layer <ref> [2] </ref>. Our anycasting proposal complements IETF standardization efforts aimed at developing a set of specific service location protocols [3]. <p> A sender desiring to communicate with only one of the servers sends datagrams with the IP anycast address in the destination address field. The datagram is then routed using anycast-aware routers to at least one of the servers identified by the anycast address. In our work <ref> [2] </ref> we adopt a more general view of anycasting as a communication paradigm that is analogous to the broadcast and multicast communication paradigms. In particular, we differentiate between the anycasting service definition and the protocol layer providing the anycasting service. <p> The original anycasting proposal [4] can, therefore, be viewed as providing the anycasting service definition and examining the provision of this service within the IP layer. Our motivation derives from the fact that network-layer-supported anycasting has several limitations as discussed in <ref> [2] </ref>, the most important being that application-specific metrics cannot be maintained at the network layer. Whereas network-layer support hinges around the use of anycast IP addresses, our application-layer support makes use of anycast domain names (ADNs). <p> We distinguish between several types of filters in our general architecture. For the purposes of this paper the relevant filter is the metric-based filter which picks the server with the best 3 (numerically lowest or highest) metric value. We also propose in <ref> [2] </ref> some approaches that can be used to specify the filter. 3 Related Work The server or resource finding problem has been the subject of much investigation for over a decade.
Reference: [3] <author> J. Veizades, E. Guttman, C. Perkins, and S. Kaplan, </author> <title> "Service location protocol," </title> <type> RFC 2165, </type> <month> June </month> <year> 1997. </year>
Reference-contexts: One such technique that we have proposed uses the anycasting communication paradigm at the application layer [2]. Our anycasting proposal complements IETF standardization efforts aimed at developing a set of specific service location protocols <ref> [3] </ref>. In this paper we examine one important aspect of the third technique described above, namely how can server performance information be collected at the site where server to client allocation decisions are made. <p> The case of a mobile resource was addressed through interesting techniques such as the use of forwarding addresses [11]. More recently, the Service Location Working Group of the IETF is considering the design of the Service Location Protocol <ref> [3] </ref>. We describe the relationship of our work to the Server Location Protocol efforts in Section 3.1. Beginning with initial services like ftp, archie, and gopher and culminating more recently with the World-Wide Web, the Internet has experienced a dramatic growth in the use and provision of information services. <p> Remote measurement and monitoring of system performance has been explored as part of the extensive work on distributed system monitoring [17, 18]. 3.1 Relationship to the Service Location Protocols The Service Location Working Group of the IETF has been developing protocols to facilitate the discovery and selection of network services <ref> [3] </ref>. Thus, the high level objectives of their work and ours are quite similar. However, their focus differs considerably from ours, and the solutions we and they have developed are mostly complementary. We briefly describe their focus, then contrast our contributions with theirs.
Reference: [4] <author> C. Partridge, T. Mendez, and W. Milliken, </author> <title> "Host anycasting service," </title> <type> RFC 1546, </type> <month> November </month> <year> 1993. </year>
Reference-contexts: Section 5 shows the results from experiments with clients using our anycasting architecture in conjunction with the performance determination technique we developed. The paper is concluded in Section 6. 2 Overview of Application-Layer Anycasting As originally defined <ref> [4] </ref>, anycasting provides: "a stateless best effort delivery of an anycast datagram to at least one host, and preferably only one host, which serves the anycast address." In this definition, an IP anycast address is used to define a group of servers that provide the same service. <p> In our work [2] we adopt a more general view of anycasting as a communication paradigm that is analogous to the broadcast and multicast communication paradigms. In particular, we differentiate between the anycasting service definition and the protocol layer providing the anycasting service. The original anycasting proposal <ref> [4] </ref> can, therefore, be viewed as providing the anycasting service definition and examining the provision of this service within the IP layer. <p> This adds a new dimension to the server finding problem: it is now important to find the "best" server from among many content-equivalent servers. Two notable studies in this area are: 1) the original work by Partridge, Mendez and Milliken <ref> [4] </ref> proposing the idea of anycasting and discussing its network-layer support and 2) a recent study by Guyton and Schwartz [12] which addresses the problem of locating the nearest server. The latter work also presents a classification of "best"-server location schemes.
Reference: [5] <author> J. Bernabeu, M. Ammar, and M. Ahamad, </author> <title> "Optimizing a generalized polling protocol for resource finding over a multiple access channel," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> vol. 27, </volume> <pages> pp. 1429-1445, </pages> <year> 1995. </year>
Reference-contexts: Many techniques were proposed and investigated. These include: 1) the use of multicast or broadcast communication to "touch" all the locations where the resource may reside in an attempt to find it (e.g., <ref> [5, 6] </ref>) , 2) the use of various name server architectures in order to lookup the location of the resource (e.g., [7, 8, 9]) and 3) the use of caching of a resource's location (not content) at sites where the resource is frequently accessed [10].
Reference: [6] <author> D. Oppen and Y. Dalal, </author> <title> "The clearinghouse: A decentralized agent for locating named objects in a distributed environment," </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> vol. 3, </volume> <pages> pp. 230-253, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: Many techniques were proposed and investigated. These include: 1) the use of multicast or broadcast communication to "touch" all the locations where the resource may reside in an attempt to find it (e.g., <ref> [5, 6] </ref>) , 2) the use of various name server architectures in order to lookup the location of the resource (e.g., [7, 8, 9]) and 3) the use of caching of a resource's location (not content) at sites where the resource is frequently accessed [10].
Reference: [7] <author> P. Mockapetris, </author> <title> "Domain names concepts and facilities," </title> <type> RFC 1034, </type> <month> November </month> <year> 1987. </year>
Reference-contexts: These include: 1) the use of multicast or broadcast communication to "touch" all the locations where the resource may reside in an attempt to find it (e.g., [5, 6]) , 2) the use of various name server architectures in order to lookup the location of the resource (e.g., <ref> [7, 8, 9] </ref>) and 3) the use of caching of a resource's location (not content) at sites where the resource is frequently accessed [10]. This early work dealt with situations where there is typically a single instance of the resource.
Reference: [8] <author> I. Gopal and A. Segall, </author> <title> "Directories for networks with casually connected users," </title> <booktitle> in Proceedings of INFOCOM 88, </booktitle> <pages> pp. 1060-1064, </pages> <year> 1988. </year>
Reference-contexts: These include: 1) the use of multicast or broadcast communication to "touch" all the locations where the resource may reside in an attempt to find it (e.g., [5, 6]) , 2) the use of various name server architectures in order to lookup the location of the resource (e.g., <ref> [7, 8, 9] </ref>) and 3) the use of caching of a resource's location (not content) at sites where the resource is frequently accessed [10]. This early work dealt with situations where there is typically a single instance of the resource.
Reference: [9] <author> A. Birrel, R. Levin, and M. Schroeder, "Grapevine: </author> <title> An exercise in distributed computing," </title> <journal> Communications of the ACM, </journal> <volume> vol. 25, </volume> <pages> pp. 260-274, </pages> <month> April </month> <year> 1982. </year>
Reference-contexts: These include: 1) the use of multicast or broadcast communication to "touch" all the locations where the resource may reside in an attempt to find it (e.g., [5, 6]) , 2) the use of various name server architectures in order to lookup the location of the resource (e.g., <ref> [7, 8, 9] </ref>) and 3) the use of caching of a resource's location (not content) at sites where the resource is frequently accessed [10]. This early work dealt with situations where there is typically a single instance of the resource.
Reference: [10] <author> D. Terry, </author> <title> "Caching hints in distributed systems," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 13, </volume> <pages> pp. 48-54, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: an attempt to find it (e.g., [5, 6]) , 2) the use of various name server architectures in order to lookup the location of the resource (e.g., [7, 8, 9]) and 3) the use of caching of a resource's location (not content) at sites where the resource is frequently accessed <ref> [10] </ref>. This early work dealt with situations where there is typically a single instance of the resource. The case of a mobile resource was addressed through interesting techniques such as the use of forwarding addresses [11].
Reference: [11] <author> R. Fowler, </author> <title> Decentralized Object Finding Using Forwarding Addresses. </title> <type> PhD thesis, </type> <institution> University of Washington, </institution> <year> 1985. </year>
Reference-contexts: This early work dealt with situations where there is typically a single instance of the resource. The case of a mobile resource was addressed through interesting techniques such as the use of forwarding addresses <ref> [11] </ref>. More recently, the Service Location Working Group of the IETF is considering the design of the Service Location Protocol [3]. We describe the relationship of our work to the Server Location Protocol efforts in Section 3.1.
Reference: [12] <author> J. Guyton and M. Schwartz, </author> <title> "Locating nearby copies of replicated Internet servers," </title> <booktitle> in Proceedings of SIGCOMM 95, </booktitle> <pages> pp. 288-298, </pages> <year> 1995. </year>
Reference-contexts: Two notable studies in this area are: 1) the original work by Partridge, Mendez and Milliken [4] proposing the idea of anycasting and discussing its network-layer support and 2) a recent study by Guyton and Schwartz <ref> [12] </ref> which addresses the problem of locating the nearest server. The latter work also presents a classification of "best"-server location schemes. <p> By choosing to define anycasting as a communication paradigm, we deviate somewhat from the Guyton and Schwartz classification which considers the original definition of anycasting as a network-layer-supported service. Our work investigates the complete design of application-layer anycasting and not just the metric probing aspect as discussed in <ref> [12] </ref>. We also consider using a variety of metrics (not just hop-distance as provided by SONAR) in order to provide a closer match to the application requirement. Recent work by Carter and Corvella [15, 16] has also addressed the issue of server selection.
Reference: [13] <author> C. M. Bowman, P. Danzig, D. Hardy, U. Manber, and M. Schwartz, </author> <title> "The harvest information discovery and access system," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> vol. 28, </volume> <pages> pp. 119-125, </pages> <year> 1995. </year>
Reference-contexts: The latter work also presents a classification of "best"-server location schemes. The work is related to earlier work on the Harvest system <ref> [13] </ref> which provides a set of tools for gathering information from various servers and efficiently indexing and searching through this information. Tools for caching and replication of indices are also used in the Harvest system in order to improve the scalability of the service.
Reference: [14] <author> K. Moore, J. Cox, and S. Green, </author> <title> "SONAR a network proximity service," Internet Draft (work in progress) draft-moore-sonar-01.txt, </title> <month> February </month> <year> 1996. </year>
Reference-contexts: Tools for caching and replication of indices are also used in the Harvest system in order to improve the scalability of the service. Another related project is the SONAR network proximity service <ref> [14] </ref> in which the authors define a service which can return the closest (in hops) server from among a list presented to it.
Reference: [15] <author> R. L. Carter and M. E. Crovella, </author> <title> "Server selection using dynamic path characterization in wide-area networks," </title> <booktitle> in Proceedings of INFOCOM 97, </booktitle> <year> 1997. </year> <month> 20 </month>
Reference-contexts: We also consider using a variety of metrics (not just hop-distance as provided by SONAR) in order to provide a closer match to the application requirement. Recent work by Carter and Corvella <ref> [15, 16] </ref> has also addressed the issue of server selection. Their selection, however, has been primarily based on the characteristics of the path leading to the server.
Reference: [16] <author> R. L. Carter and M. E. Crovella, </author> <title> "Dynamic server selection using bandwidth probing in wide-area networks," </title> <type> Tech. Rep. </type> <institution> BU-CS-96-007, Computer Science Department, Boston University, </institution> <address> Boston, MA, </address> <year> 1996. </year>
Reference-contexts: We also consider using a variety of metrics (not just hop-distance as provided by SONAR) in order to provide a closer match to the application requirement. Recent work by Carter and Corvella <ref> [15, 16] </ref> has also addressed the issue of server selection. Their selection, however, has been primarily based on the characteristics of the path leading to the server. <p> Their selection, however, has been primarily based on the characteristics of the path leading to the server. While they acknowledge the desirability of using server load information as a guide to server selection, their work does not address this issue (except for a limited experiment 4 reported in <ref> [16] </ref>).
Reference: [17] <author> B. Schroeder, </author> <title> "On-line monitoring: A tutorial," </title> <journal> IEEE Computer, </journal> <volume> vol. 28, </volume> <pages> pp. 72-78, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Remote measurement and monitoring of system performance has been explored as part of the extensive work on distributed system monitoring <ref> [17, 18] </ref>. 3.1 Relationship to the Service Location Protocols The Service Location Working Group of the IETF has been developing protocols to facilitate the discovery and selection of network services [3]. Thus, the high level objectives of their work and ours are quite similar.
Reference: [18] <author> F. Lange, R. Kroeger, and M. Gergeleit, </author> <title> "Jewel: Design and implementation of a distributed measurement system," </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> vol. 3, </volume> <pages> pp. 657-671, </pages> <month> Novemeber </month> <year> 1992. </year>
Reference-contexts: Remote measurement and monitoring of system performance has been explored as part of the extensive work on distributed system monitoring <ref> [17, 18] </ref>. 3.1 Relationship to the Service Location Protocols The Service Location Working Group of the IETF has been developing protocols to facilitate the discovery and selection of network services [3]. Thus, the high level objectives of their work and ours are quite similar.
Reference: [19] <author> J. Rosenberg, B. Suter, and H. Schulzrinne, </author> <title> "Wide area network service location," Internet Draft (work in progress) draft-ietf-svrloc-wasrv-00.txt, </title> <month> July </month> <year> 1997. </year>
Reference-contexts: We have also focused on a single type of "server," namely an IP address. Despite the differences in implementation, our performance evaluation should provide important information as the Service Location group expands their protocols to include a global internet <ref> [19] </ref>. 4 Metric Collection 4.1 Metrics of Interest As mentioned in the Introduction, the focus of this paper is on maintaining the metric information needed to select amongst replicated web servers.
Reference: [20] <author> J. Gwertzman and M. Seltzer, </author> <title> "The case for geographical push-caching," </title> <booktitle> in Proceedings of the 1995 Workshop on Hot Operating Systems, </booktitle> <year> 1995. </year>
Reference-contexts: In the server push technique <ref> [20, 21] </ref>, the server monitors its performance and pushes this information to the resolvers when interesting changes are observed. For additional scalability, the update information can be network-layer multicast to all resolvers that maintain information 6 about the server.
Reference: [21] <author> M. Humes, </author> <title> "Netscape's server push, client pull and CGI animation." </title> <address> http://www.emf.net/ mal/animate.html. </address>
Reference-contexts: In the server push technique <ref> [20, 21] </ref>, the server monitors its performance and pushes this information to the resolvers when interesting changes are observed. For additional scalability, the update information can be network-layer multicast to all resolvers that maintain information 6 about the server.
Reference: [22] <author> E. C. Rosen, </author> <title> "The updating protocol of arpanet's new routing algorithm," </title> <journal> Computer Networks, </journal> <volume> no. 4, </volume> <pages> pp. 11-19, </pages> <year> 1980. </year>
Reference-contexts: Note that the task of updating link state in a distributed routing environment has precisely the same criteria. We have adopted the link state update algorithm used in the ARPANET <ref> [22] </ref>. The update algorithm is parameterized by a measurement interval I , a maximum threshold T and a reduction factor R. The algorithm maintains a current threshold C, initialized to T . The server measures its performance over each interval I.
Reference: [23] <author> M. F. Arlitt and C. L. Williamson, </author> <title> "Web server workload characterization: The search for invariants," </title> <booktitle> in Proceedings of ACM SIGMETRICS '96 Conference, </booktitle> <publisher> ACM Press, </publisher> <year> 1996. </year> <month> 21 </month>
Reference-contexts: The response time measured at probing can be used to compare the relative performance of servers as long as the sizes of probing files are the same at all servers. This is important, since web item size distributions have been observed to have infinite variance <ref> [23] </ref>. Clients: We modified the NCSA Mosaic 4 client to have the desired behavior. The behavior at our clients consists of two parts. First, a client must determine a set of requests to make to 3 The precise algorithm at the push daemon is as follows.
References-found: 23

