URL: file://dream.dai.ed.ac.uk/pub/papers/PS/pub419.ps.gz
Refering-URL: http://www.dai.ed.ac.uk:80/staff/personal_pages/bundy/drafts/ripple-faq.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Rational Reconstruction and Extension of Recursion Analysis  
Author: Alan Bundy, Frank van Harmelen, Jane Hesketh Alan Smaill, and Andrew Stevens 
Keyword: Oyster system.  
Address: 80 South Bridge, Edinburgh, EH1 1HN, Scotland  
Affiliation: Department of Artificial Intelligence, University of Edinburgh,  
Abstract: The focus of this paper is the technique of recursion analysis. Recursion analysis is used by the Boyer-Moore Theorem Prover to choose an appropriate induction schema and variable to prove theorems by mathematical induction. A rational reconstruction of recursion analysis is outlined, using the technique of proof plans. This rational reconstruction suggests an extension of recursion analysis which frees the induction suggestion from the forms of recursion found in the conjecture. Preliminary results are reported of the automation of this rational reconstruction and extension using the clam 
Abstract-found: 1
Intro-found: 1
Reference: [ Boyer and Moore, 1979 ] <author> R. S. Boyer and J S. Moore. </author> <title> A Computational Logic. </title> <publisher> Academic Press, </publisher> <address> 1979. </address> <publisher> ACM monograph series. </publisher>
Reference-contexts: A proof plan for a conjecture defines a tactic tailor-made to generate a proof of that conjecture. The state of the art in inductive theorem proving is the Boyer-Moore Theorem Prover, <ref> [ Boyer and Moore, 1979 ] </ref> (henceforth bmtp). It is, thus, natural for us to try and represent the heuristics embedded in the bmtp as Oyster tactics. [ Bundy, 1988 ] contains an analysis of some of these heuristics. <p> Why is this? 4 The original BMTP deals with subsumption as a situation distinct from (as opposed to subsumed by) merging. One consequence is that it is unable to deal with the 2/3 step situation and others like it. 5 See <ref> [ Boyer and Moore, 1979 ] </ref> or [ Stevens, 1988 ] for a full definition of unsuitable replacements and flawed suggestions. 6 BMTP does prove a non-classic, `verification' version of this theorem which, in the place of an existentially quantified variable, includes a function, defined by p fi x 0 recursion,
Reference: [ Bundy et al., 1988 ] <author> Alan Bundy, F. van Harmelen, J. Hesketh, and A. Smaill. </author> <title> Experiments with proof plans for induction. </title> <type> Research Paper 413, </type> <institution> Dept. of Artificial Intelligence, University of Edinburgh, </institution> <year> 1988. </year> <note> Appeared in Journal of Automated Reasoning, 7, </note> <year> 1991. </year>
Reference-contexts: We have used this analysis to implement a number of Oyster tactics for inductive proofs and have successfully tested them on some simple theorems drawn from the literature, <ref> [ Bundy et al., 1988 ] </ref> . 2 Recursion Analysis Recursion analysis is the name we have given to the process, embedded in bmtp, of analysing the recursive structure of a conjecture and deciding what form of induction to use to prove it. <p> Ideally, our method fitting process would be flexible and accept partially fitting methods if fully fitting ones are not available. However, in the current implementation we have adopted the short term expedient of building this flexibility into the preconditions themselves. See <ref> [ Bundy et al., 1988 ] </ref> for details. 6 The Use of Lemmas in Rippling-Out The step tactic, which is restricted to using rewrite rules based on the step formula of recursive definitions, is not always strong enough to enable ripple out to succeed. <p> Whether this success is brought at the price of an unacceptable increase of the planning search space it is not possible to tell without further empirical testing. The initial empirical results reported in <ref> [ Bundy et al., 1988 ] </ref> are very encouraging, however. The planning search space on simple examples is several orders of magnitude smaller than the object-level search space, and the ratio improves with more complex theorems.
Reference: [ Bundy, 1988 ] <author> Alan Bundy. </author> <title> The use of explicit plans to guide inductive proofs. </title> <editor> In R. Lusk and R. Over-beek, editors, </editor> <booktitle> 9th Conference on Automated Deduction, </booktitle> <pages> pages 111-120. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year> <note> Longer version available from Edinburgh as DAI Research Paper No. 349. </note>
Reference-contexts: The state of the art in inductive theorem proving is the Boyer-Moore Theorem Prover, [ Boyer and Moore, 1979 ] (henceforth bmtp). It is, thus, natural for us to try and represent the heuristics embedded in the bmtp as Oyster tactics. <ref> [ Bundy, 1988 ] </ref> contains an analysis of some of these heuristics. <p> In particular, the final induction suggestions of recursion analysis initiate proofs of this type and generate subgoals that the other heuristics are designed to solve. We believe that proof plans provide a good notation for describing this overall shape and accounting for the way that the heuristics combine together, <ref> [ Bundy, 1988 ] </ref> . Proof plans can be used to predict and account for the successes and failures of the bmtp. They also suggest ways of improving and extending the bmtp heuristics.
Reference: [ Constable et al., 1986 ] <author> R. L. Constable, S. F. Allen, H. M. Bromley, et al. </author> <title> Implementing Mathematics with the Nuprl Proof Development System. </title> <publisher> Prentice Hall, </publisher> <year> 1986. </year>
Reference-contexts: This proof plan is then used to guide the Oyster proof development system, [ Horn, 1988 ] , in a proof of the conjecture. Oyster is a Prolog re-implementation of Nuprl, <ref> [ Constable et al., 1986 ] </ref> . They are both proof checkers for Intuitionistic Type Theory, a logic based on the work of Martin-Lof. Oyster reasons backwards from the conjecture it is trying to prove, using a sequent calculus formalism which includes rules of inference for mathematical induction.
Reference: [ Horn, 1988 ] <author> C. Horn. </author> <title> The Nurprl proof development system. </title> <type> Working paper 214, </type> <institution> Dept. of Artificial Intelligence, University of Edinburgh, </institution> <year> 1988. </year> <note> The Edinburgh version of Nurprl has been renamed Oyster. </note>
Reference-contexts: Given a conjecture, the clam plan formation program constructs a proof plan to solve it from existing proof tactics. This proof plan is then used to guide the Oyster proof development system, <ref> [ Horn, 1988 ] </ref> , in a proof of the conjecture. Oyster is a Prolog re-implementation of Nuprl, [ Constable et al., 1986 ] . They are both proof checkers for Intuitionistic Type Theory, a logic based on the work of Martin-Lof.
Reference: [ Stevens, 1988 ] <author> A. Stevens. </author> <title> A rational reconstruction of Boyer & Moore's technique for constructing induction formulas. </title> <editor> In Y. Kodratoff, editor, </editor> <booktitle> The Proceedings of ECAI-88, </booktitle> <pages> pages 565-570. </pages> <booktitle> European Conference on Artificial Intelligence, </booktitle> <year> 1988. </year> <note> Also available from Edin-burgh as DAI Research Paper No. 360. </note>
Reference-contexts: The form of the recursive functions contained in the conjecture is used to construct raw induction suggestions. These are then combined together into a final induction suggestion, which is the one used in the proof. In this section we will explain the rational reconstruction of recursion analysis given in <ref> [ Stevens, 1988 ] </ref> . In later sections we will see how to realise this rational reconstruction within proof plans and how to extend it. We can best explain how recursion analysis works by example. <p> In general, there may not be an already suggested schema for a variable that subsumes all the others, but it may be possible to find a new schema that does. Stevens' recursion analysis, <ref> [ Stevens, 1988 ] </ref> , finds such all-subsuming schemata by merging one or more raw induction suggestions. For instance, a 2 step and 3 step induction would be merged to give a 6 step schema that subsumed both 4 . <p> Flawed suggestions are rejected if any unflawed ones remain, so that in the example above, the 2 step, x suggestion is the one that is finally chosen. In the event of a tie the induction subsuming the largest number of raw suggestions is chosen. bmtp and <ref> [ Stevens, 1988 ] </ref> use recursion analysis to construct induction schemata at run time, and hence must prove them well-founded after construction. We have not reconstructed this aspect of recursion analysis, and so do not discuss it further here. <p> Why is this? 4 The original BMTP deals with subsumption as a situation distinct from (as opposed to subsumed by) merging. One consequence is that it is unable to deal with the 2/3 step situation and others like it. 5 See [ Boyer and Moore, 1979 ] or <ref> [ Stevens, 1988 ] </ref> for a full definition of unsuitable replacements and flawed suggestions. 6 BMTP does prove a non-classic, `verification' version of this theorem which, in the place of an existentially quantified variable, includes a function, defined by p fi x 0 recursion, which returns the prime factors of a
References-found: 6

