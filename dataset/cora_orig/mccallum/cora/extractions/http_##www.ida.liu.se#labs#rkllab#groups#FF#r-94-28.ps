URL: http://www.ida.liu.se/labs/rkllab/groups/FF/r-94-28.ps
Refering-URL: http://www.ida.liu.se/labs/rkllab/groups/FF/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: larka@ida.liu.se  
Title: Fluents Framework  
Author: Lars Karlsson 
Note: and  This work has been supported by the Swedish National Board for Industrial Development (NUTEK grant 5222-92-5615) as part of the ESPRIT Basic Research Action No 6156-Drums II.  
Abstract: IDA Technical Report 1994 LiTH-IDA-R-94-28 ISSN-0281-4250 Department of Computer and Information Science, Linkoping University, S-581 83 Linkoping, Sweden Specification and Synthesis Abstract An autonomous agent operating in a dynamical environment will face a number of different reasoning problems, one of which is how to plan its actions in order to pursue its goals. For this purpose, it is important that the agent represents its knowledge about the world in a coherent, expressive and well-understood way, in our case the temporal logics from Erik Sandewall's "Features and Fluents" framework. However, most existing planning systems make no use of temporal logics, but have specialised representations such as the Strips formalism and hierarchical task networks. In order to benefit from the techniques used by these planners, it is useful to analyse and reconstruct them within the given framework. This includes making explicit the ontological and epistemological assumptions underlying the planners; representing plans as entities of the temporal logic; and reconstructing the algorithms in terms of the new representation. The two planners Strips and Tweak have been analysed and reconstructed in this way. of Plans Using the Features
Abstract-found: 1
Intro-found: 1
Reference: [AHT90] <editor> James Allen, James Hendler, and Austin Tate, editors. </editor> <booktitle> Readings in Planning. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference: [All84] <author> James F. Allen. </author> <title> Towards a general theory of action and time. </title> <journal> Artificial Intelligence, </journal> <volume> 23 </volume> <pages> 123-154, </pages> <year> 1984. </year> <note> Reprinted in [AHT90]. </note>
Reference-contexts: Green [Gre69] and Kowalski [Kow77] both used a situation calculus-type of representation, and showed how theorem proving can be used to find plans which solve specific problems. Other examples of temporal logics applied to planning are Pednault's Action Description Language (ADL) [Ped86] and Allen's logic of temporal intervals <ref> [All84, All91] </ref>. Rosenschein [Ros81] used dynamic logic for representing plans. However, the main part of planning systems do not use temporal logics, especially if we consider planners that have actually been implemented and applied for solving realistic problems.
Reference: [All91] <author> James F. Allen. </author> <title> Temporal reasoning and planning. </title> <editor> In Allen, Kautz, Pelavin, and Tenenberg, editors, </editor> <title> Reasoning About Plans. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: Green [Gre69] and Kowalski [Kow77] both used a situation calculus-type of representation, and showed how theorem proving can be used to find plans which solve specific problems. Other examples of temporal logics applied to planning are Pednault's Action Description Language (ADL) [Ped86] and Allen's logic of temporal intervals <ref> [All84, All91] </ref>. Rosenschein [Ros81] used dynamic logic for representing plans. However, the main part of planning systems do not use temporal logics, especially if we consider planners that have actually been implemented and applied for solving realistic problems.
Reference: [BD94] <author> Mark Boddy and Thomas Dean. </author> <title> Deliberation scheduling for problem solving in time-constrained environments. </title> <journal> Artificial Intelligence, </journal> <volume> 67 </volume> <pages> 245-285, </pages> <year> 1994. </year>
Reference-contexts: Other problems, which are generally outside the scope of traditional planning, concern knowledge acquisition, interference from external events and other agents, and the limited resources of reasoning and response times available to an agent in a real-life environment. Valuable work has been done in these areas <ref> [Moo85, BIP88, BD94] </ref> and we hope to explore them further in the future. 40
Reference: [BIP88] <author> Michael E. Bratman, David J. Israel, and Martha E. Pollack. </author> <title> Plans and resource-bounded practical reasoning. </title> <journal> Computational Intelligence, </journal> <volume> 4(4) </volume> <pages> 349-355, </pages> <year> 1988. </year>
Reference-contexts: Other problems, which are generally outside the scope of traditional planning, concern knowledge acquisition, interference from external events and other agents, and the limited resources of reasoning and response times available to an agent in a real-life environment. Valuable work has been done in these areas <ref> [Moo85, BIP88, BD94] </ref> and we hope to explore them further in the future. 40
Reference: [BJ80] <author> George S. Boolos and Richard C. Jeffrey. </author> <title> Computability and Logic. </title> <publisher> Cambridge University Press, </publisher> <address> 2nd edition, </address> <year> 1980. </year>
Reference-contexts: A theory of this domain, including &lt; and the successor function 0 , is decidable as proven by Presburger (see e.g. <ref> [BJ80, p. 219] </ref>). Besides the integers, which are fixed temporal constants, a set of unfixed temporal constants is available.
Reference: [Bro91] <author> Rodney A. Brooks. </author> <title> How to build complete creatures rather than isolated cognitive simulators. </title> <editor> In Kurt VanLehn, editor, </editor> <booktitle> Architectures for Intelligence, </booktitle> <pages> pages 225-240. </pages> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale, New Jersey, </address> <year> 1991. </year>
Reference-contexts: These planners generally follow an operator-based approach and fall under two main categories: precondition-achievement planners and hierarchical planners [Tat77, CT91, Wil88]. 1 There are alternative approaches where symbolic reasoning is not taken as a primitive aspect of intelligence, e.g. connectionist models [Gro88] and Brook's subsumption architecture <ref> [Bro91] </ref>. 1 The precondition-achievement planner strips by Fikes and Nilsson [FN71] represents situations as sets of first-order logic sentences.
Reference: [Cha87] <author> David Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 333-377, </pages> <year> 1987. </year> <note> Reprinted in [AHT90]. </note>
Reference-contexts: Restrictions on the world structure can therefore result in considerable gains in planning efficiency. When discussing efficiency, we should observe that planning with a first-order representation with variables or function symbols (e.g. strips) generally is undecidable <ref> [Cha87, ENS92] </ref>. Consequently, standard complexity theory does not suffice when it comes to assessing the difficulty of non-trivial planning problems and techniques. <p> In this section, we analyse and reconstruct the total-order planner strips [FN71]. In the next section, we will do the same thing for a partial-order planner, tweak <ref> [Cha87] </ref>. Another partial-order planner, which recently has earned much attention, is McAllester's and Rosenblitt's systematic nonlinear planner (SNLP) [MR91]. As SNLP has the same operator representation as strips, the results in these sections applies for SNLP as well. 3.2 strips | a Total-Order Planner strips is a total-order planner. <p> Qlaw represents the qualification laws in the form: qlaw [t; t 0 ]A (x) ; [t]fi (x) (44) where [t]fi (x) is the precondition description. 3.4.1 A Truth Criterion for strips-I The concept of truth criteria was first introduced by Chapman <ref> [Cha87] </ref> for his partial-order planner tweak, which is presented in the next section. The main purpose of a truth criterion is to support efficient computation of whether a predicate is true or false in a particular situation in the plan. <p> The plan 0 is scd1 [0; 1]U nstack (B; A) scd2 [1; 2]P utdown (B) scd3 [2; 3]P ickup (A) scd4 [3; 4]Stack (A; B). (48) It is easily verified that the plan is executable and achieves the goal. 28 4 TWEAK | a Partial-Order Planner The tweak planner <ref> [Cha87] </ref> is based on the least commitment principle, stating that during the planning process, decisions about for instance the order between two steps should not be made until they have to be made. tweak has two new major features compared to strips. 1. The plans of tweak are partially ordered. <p> Chapmans suggests using a dependency-directed breadth-first search strategy (see e.g. [CM85]). As the algorithm is based on the necessary and sufficient MTC, it is correct and complete. Theorem 5 (Correctness/Completeness) <ref> [Cha87] </ref> If tweak, given a problem, terminates claiming a solution, the plan it produces does in fact solve the problem. <p> The operators of the original strips formalism are very restricted in their expressiveness. Basically the same kind of operators are used in many other planners, for instance tweak <ref> [Cha87] </ref>, SNLP [MR91] and for primitive (non-decomposable) operators in hierarchical planners such as O-Plan [CT91] and sipe [Wil88] (with the addition of resource specification). In contrast, FL is able to represent actions with duration, detailed trajectories, and context-dependent or random effects.
Reference: [CM85] <author> Eugene Charniak and Drew McDermott. </author> <title> Introduction to Artificial Intelligence. </title> <publisher> Addison Wesley, </publisher> <year> 1985. </year>
Reference-contexts: The symbols _ and 9 represent nondeterministic choice-points; ^ denotes that all outgoing branches must be followed. the goal-achievement procedure is called and the preconditions of any new steps become new goals. Chapmans suggests using a dependency-directed breadth-first search strategy (see e.g. <ref> [CM85] </ref>). As the algorithm is based on the necessary and sufficient MTC, it is correct and complete. Theorem 5 (Correctness/Completeness) [Cha87] If tweak, given a problem, terminates claiming a solution, the plan it produces does in fact solve the problem.
Reference: [CT91] <author> Ken Currie and Austin Tate. O-Plan: </author> <title> the open planning architecture. </title> <journal> Artificial Intelligence, </journal> <volume> 52(1) </volume> <pages> 49-86, </pages> <year> 1991. </year>
Reference-contexts: However, the main part of planning systems do not use temporal logics, especially if we consider planners that have actually been implemented and applied for solving realistic problems. These planners generally follow an operator-based approach and fall under two main categories: precondition-achievement planners and hierarchical planners <ref> [Tat77, CT91, Wil88] </ref>. 1 There are alternative approaches where symbolic reasoning is not taken as a primitive aspect of intelligence, e.g. connectionist models [Gro88] and Brook's subsumption architecture [Bro91]. 1 The precondition-achievement planner strips by Fikes and Nilsson [FN71] represents situations as sets of first-order logic sentences. <p> Planning is but one of the reasoning capabilities required in a dynamic and complex environment. This puts high demands of expressiveness and flexibility on whatever representation is being used. Hierarchical task networks <ref> [Tat77, CT91] </ref> might be good for hierarchical planning, but we are less convinced they are good for e.g. anticipation (fore-seeing the future) and learning. A second motivation is the implicit assumptions about the properties of the world which underly these planners. <p> The operators of the original strips formalism are very restricted in their expressiveness. Basically the same kind of operators are used in many other planners, for instance tweak [Cha87], SNLP [MR91] and for primitive (non-decomposable) operators in hierarchical planners such as O-Plan <ref> [CT91] </ref> and sipe [Wil88] (with the addition of resource specification). In contrast, FL is able to represent actions with duration, detailed trajectories, and context-dependent or random effects. If we are to construct planners for these spe 39 cialities, we will only have to make minor modifications in our representation.
Reference: [DL94] <author> Patrick Doherty and Witold Lukaszewicz. </author> <title> Circumscribing features and fluents. </title> <booktitle> In Proceedings of the 1st International Conference on Temporal Reasoning, </booktitle> <pages> pages 82-100. </pages> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: Here, we will define a reified and typed fluent logic (FL) with the non-negative integers for time domain. It is an extension of a fluent logic by Doherty and Lukaszewicz <ref> [DL94, Doh94] </ref>, which in turn is based on Sandewall's logics. The extension lies in the introduction of fluents with arguments. FL is a representation which is not restricted to plan synthesis.
Reference: [Doh94] <author> Patrick Doherty. </author> <title> Notes on PMON circumscription. </title> <type> Technical report, </type> <institution> Department of Computer and Information Science, Linkoping University, </institution> <year> 1994. </year>
Reference-contexts: Here, we will define a reified and typed fluent logic (FL) with the non-negative integers for time domain. It is an extension of a fluent logic by Doherty and Lukaszewicz <ref> [DL94, Doh94] </ref>, which in turn is based on Sandewall's logics. The extension lies in the introduction of fluents with arguments. FL is a representation which is not restricted to plan synthesis. <p> Occlude; ()) = (Occlude) ^ 8::[() ^ &lt; Occlude] (20) We shall write j~ ff (21) M OD P MON () (22) for M OD (P M ON ()) where M OD (T ) denotes the model set of a theory T . 2.4.8 FL Chronicles as Logic Programs Doherty <ref> [Doh94] </ref> has shown that PMON circumscription results in first-order-reducible theories. Consequently, classical theorem proving techniques can be applied to scenario descriptions. 2.4.9 Restricted Monotonicity of FL Scenario Descriptions As shown by Doherty [Doh94], FL chronicles have the restricted monotonic-ity property [Lif93]. <p> (T ) denotes the model set of a theory T . 2.4.8 FL Chronicles as Logic Programs Doherty <ref> [Doh94] </ref> has shown that PMON circumscription results in first-order-reducible theories. Consequently, classical theorem proving techniques can be applied to scenario descriptions. 2.4.9 Restricted Monotonicity of FL Scenario Descriptions As shown by Doherty [Doh94], FL chronicles have the restricted monotonic-ity property [Lif93]. Some classes of statements of a non-monotonic formalism monotonically increases the set of valid conclusions when added to a set of premises. Such classes can be identified for FL scenario descriptions. <p> A chronicle 00 = hO; Law; Scd; Obs [ fli is a monotonic extension of for any set of observations fl. Proof See Doherty <ref> [Doh94] </ref>. To sum it up, temporal and atemporal constraints and observations can be added without invalidating any previous conclusions. 2.4.10 FL for Q No logic for the epistemological speciality Q is presented by Sandewall [San94], and none will be proposed here.
Reference: [ENS92] <author> Kutluhan Erol, Dana S. Nau, </author> <title> and V.S. Subrahmanian. When is planning decidable? In Artificial Intelligence Planning Systems: </title> <booktitle> Proceedings of the First International Conference, </booktitle> <year> 1992. </year>
Reference-contexts: Restrictions on the world structure can therefore result in considerable gains in planning efficiency. When discussing efficiency, we should observe that planning with a first-order representation with variables or function symbols (e.g. strips) generally is undecidable <ref> [Cha87, ENS92] </ref>. Consequently, standard complexity theory does not suffice when it comes to assessing the difficulty of non-trivial planning problems and techniques.
Reference: [FN71] <author> Richard E. Fikes and Nils J. Nilsson. </author> <title> STRIPS: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 189-208, </pages> <year> 1971. </year> <note> Reprinted in [AHT90]. 41 </note>
Reference-contexts: approach and fall under two main categories: precondition-achievement planners and hierarchical planners [Tat77, CT91, Wil88]. 1 There are alternative approaches where symbolic reasoning is not taken as a primitive aspect of intelligence, e.g. connectionist models [Gro88] and Brook's subsumption architecture [Bro91]. 1 The precondition-achievement planner strips by Fikes and Nilsson <ref> [FN71] </ref> represents situations as sets of first-order logic sentences. In order to sidestep the problem with frame axioms in situation calculus, strips does not represent actions (called operators) and their effects as entities within the logic, but as transformations on sets of sentences. <p> For instance, the ontological designator IAdC characterizes the assumption of strong inertia, alternative but deterministic results of actions and possible concurrency of actions. Let us see how the ontological taxonomy relates to traditional planning. The most well-known formalism is the strips formalism <ref> [FN71] </ref>, where actions are characterized by one set of preconditions and one set of effects, 4 I Strong inertia. Integer time. A Alternative results of actions (context dependency and nondeterminism). U Local ramification dependencies between features of the objects directly involved in an action. <p> In this section, we analyse and reconstruct the total-order planner strips <ref> [FN71] </ref>. In the next section, we will do the same thing for a partial-order planner, tweak [Cha87]. Another partial-order planner, which recently has earned much attention, is McAllester's and Rosenblitt's systematic nonlinear planner (SNLP) [MR91]. <p> An advantage of this mode of procedure is that the resulting partial plans are always executable. We will now make an attempt to characterize the semantics underlying the strips assumption, and from there move on to a strips in Fluent Logic. As the original article by Fikes and Nilsson <ref> [FN71] </ref> only gives a syntactic characterization of operators and states, we will have to start from this and try to translate it to a state-based semantics.
Reference: [GL87] <editor> M.P. Georgeff and A.L. Lansky, editors. </editor> <booktitle> Reasoning about Actions and Plans: Proceedings of the 1986 Workshop. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference: [GN87] <author> Michael J. Genesereth and Nils J. Nilsson. </author> <booktitle> Logical Foundations of Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference-contexts: There appears to be no restriction that this set of formulae should give a complete description of the world. Consequently, world models will be interpreted as partial states (or sets of states). An alternative approach is to use a closed world assumption <ref> [GN87] </ref>. 3.2.2 strips Operators and Plans A strips operator ff is a transformation on world models. An operator description for ff is a triple (P re ff ; Del ff ; Add ff ).
Reference: [Gre69] <author> Cordell Green. </author> <title> Applications of theorem proving to problem solving. </title> <booktitle> In Proceedings of the First International Joint Conference on Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1969. </year> <note> Reprinted in [AHT90]. </note>
Reference-contexts: As they are two closely related topics, their respective histories have much in common and the influence has been mutual. The first temporal representation used in AI was the situation calculus, introduced by McCarthy and Hayes [McC62, MH69] and based on first-order logic. Green <ref> [Gre69] </ref> and Kowalski [Kow77] both used a situation calculus-type of representation, and showed how theorem proving can be used to find plans which solve specific problems. Other examples of temporal logics applied to planning are Pednault's Action Description Language (ADL) [Ped86] and Allen's logic of temporal intervals [All84, All91].
Reference: [Gro88] <author> Stephen Grossberg, </author> <title> editor. </title> <booktitle> Neural Networks and Natural Intelligence. </booktitle> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: These planners generally follow an operator-based approach and fall under two main categories: precondition-achievement planners and hierarchical planners [Tat77, CT91, Wil88]. 1 There are alternative approaches where symbolic reasoning is not taken as a primitive aspect of intelligence, e.g. connectionist models <ref> [Gro88] </ref> and Brook's subsumption architecture [Bro91]. 1 The precondition-achievement planner strips by Fikes and Nilsson [FN71] represents situations as sets of first-order logic sentences.
Reference: [KN94] <author> Subbarao Kambhampati and Dana S. Nau. </author> <title> On the nature and role of modal truth criteria in planning. </title> <booktitle> In Proceedings of the Second International Conference on Artificial Intelligence Planning Systems. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: We will restrict fl to statements about individual steps, situations and constraints. 5 5 With no restrictions on fl, strange things may happen. For instance, all completions of a plan are totally ordered and instantiated, and therefore the plan itself is necessarily totally ordered and instantiated <ref> [KN94] </ref>. 30 4.0.7 tweak System and Planning Problem A tweak system is a tuple hM 0 ; Oi (54) where M 0 is the initial world model, and O is a set of operators. <p> For each clobberer, there must be a white knight W which comes between s and C and reasserts p whenever p is denied by C. A subject of discussion is whether the truth criterion applies to partial plans or to complete and executable plans alone. Kambhampati and Nau <ref> [KN94] </ref> distinguishes between modal truth and modal conditional truth; the latter is independent of the executability of plans and therefore more suitable for partial plans.
Reference: [Kow77] <author> Robert Kowalski. </author> <title> Logic for Problem Solving. </title> <publisher> Elsevier Science Publishing, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: As they are two closely related topics, their respective histories have much in common and the influence has been mutual. The first temporal representation used in AI was the situation calculus, introduced by McCarthy and Hayes [McC62, MH69] and based on first-order logic. Green [Gre69] and Kowalski <ref> [Kow77] </ref> both used a situation calculus-type of representation, and showed how theorem proving can be used to find plans which solve specific problems. Other examples of temporal logics applied to planning are Pednault's Action Description Language (ADL) [Ped86] and Allen's logic of temporal intervals [All84, All91].
Reference: [Lif85] <author> Vladimir Lifschitz. </author> <title> Computing circumscription. </title> <booktitle> In Proceedings of the Ninth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 121-127. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1985. </year>
Reference-contexts: For this purpose, we use an additional axiom set of nochange premises as follows ( denotes 'exclusive or'). NCH = f 8f; t:Holds (t; f )Holds (t+1; f ) ) Occlude (t+1; f ) g (18) 11 The PMON minimization policy is defined as follows, using second-order circumscription <ref> [Lif85, Luk90] </ref> to minimize Occlude while keeping Holds fixed. The circumscription operation is performed on scenario descriptions in the base language. We will use the abbreviation U &lt; V for 8x:(U (x) ) V (x)) ^ :(U (x) ) V (x)).
Reference: [Lif87] <author> Vladimir Lifschitz. </author> <title> On the semantics of STRIPS. </title> <note> In Georgeff and Lansky [GL87]. </note>
Reference-contexts: As the original article by Fikes and Nilsson [FN71] only gives a syntactic characterization of operators and states, we will have to start from this and try to translate it to a state-based semantics. The formal description of strips in the following subsections is inspired by Lifschitz <ref> [Lif87] </ref>. 3.2.1 World Models and States Fikes and Nilsson use world models to describe states. A world model is represented by a set of well-formed closed FOPC formulae. There appears to be no restriction that this set of formulae should give a complete description of the world. <p> Applicable (ff; M 0 ). 3. Result (ff; M 0 ) ` G. 20 3.2.4 Soundness and Essential Formulae Operators are defined as syntactic transformations of world models. This is problematic; it is easy to construct strips systems that are unsound. Lifs-chitz <ref> [Lif87] </ref> suggests selecting a set E of formulae as essential. Only essential formulae are allowed to change by means of Del and Add; non-essential formulae occurring in M 0 (or in the add- or deletelist of any operator) have to be true in all world models. <p> Finally, a world model M is satisfied in a state s if every element of M is satisfied in s. Lifschitz definition of soundness is as follows. 4 Definition 5 <ref> [Lif87] </ref> An operator description (P re; Del; Add) is sound relative to an action f if, for every state s such that P is satisfied in s, 1. f is applicable in state s, 2. every essential sentence which is satisfied in s and does not belong to D is satisfied <p> Theorem 3 <ref> [Lif87] </ref> If is sound, and a plan ff is accepted by , then the action f ff is applicable in the initial state s 0 and the world model Result (ff; M 0 ) is satisfied in the state f ff (s 0 ). 3 A literal is either an atomic
Reference: [Lif93] <author> Vladimir Lifschitz. </author> <title> Restricted monotonicity. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence. </booktitle> <publisher> AAAI Press, </publisher> <address> Menlo Park, California, </address> <year> 1993. </year>
Reference-contexts: Consequently, classical theorem proving techniques can be applied to scenario descriptions. 2.4.9 Restricted Monotonicity of FL Scenario Descriptions As shown by Doherty [Doh94], FL chronicles have the restricted monotonic-ity property <ref> [Lif93] </ref>. Some classes of statements of a non-monotonic formalism monotonically increases the set of valid conclusions when added to a set of premises. Such classes can be identified for FL scenario descriptions.
Reference: [Luk90] <author> Witold Lukaszewicz. </author> <title> Non-monotonic Reasoning. </title> <publisher> Morgan Kauf-mann, </publisher> <year> 1990. </year>
Reference-contexts: For this purpose, we use an additional axiom set of nochange premises as follows ( denotes 'exclusive or'). NCH = f 8f; t:Holds (t; f )Holds (t+1; f ) ) Occlude (t+1; f ) g (18) 11 The PMON minimization policy is defined as follows, using second-order circumscription <ref> [Lif85, Luk90] </ref> to minimize Occlude while keeping Holds fixed. The circumscription operation is performed on scenario descriptions in the base language. We will use the abbreviation U &lt; V for 8x:(U (x) ) V (x)) ^ :(U (x) ) V (x)).
Reference: [McC62] <author> John McCarthy. </author> <title> Situations, actions, and causal laws. </title> <type> Technical Report Memo nr 2, </type> <institution> Stanford Artificial Intelligence Project, </institution> <year> 1962. </year>
Reference-contexts: As they are two closely related topics, their respective histories have much in common and the influence has been mutual. The first temporal representation used in AI was the situation calculus, introduced by McCarthy and Hayes <ref> [McC62, MH69] </ref> and based on first-order logic. Green [Gre69] and Kowalski [Kow77] both used a situation calculus-type of representation, and showed how theorem proving can be used to find plans which solve specific problems.
Reference: [MH69] <author> John McCarthy and Patrick J. Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <journal> Machine Intelligence, </journal> <volume> 4 </volume> <pages> 463-502, </pages> <year> 1969. </year> <note> Reprinted in [AHT90]. </note>
Reference-contexts: As they are two closely related topics, their respective histories have much in common and the influence has been mutual. The first temporal representation used in AI was the situation calculus, introduced by McCarthy and Hayes <ref> [McC62, MH69] </ref> and based on first-order logic. Green [Gre69] and Kowalski [Kow77] both used a situation calculus-type of representation, and showed how theorem proving can be used to find plans which solve specific problems.
Reference: [Moo85] <author> Robert C. Moore. </author> <title> A formal theory of knowledge and action. </title> <editor> In J.R. Hobbs and R.C. Moore, editors, </editor> <booktitle> Formal Theories of the Com-monsense World, chapter 9. </booktitle> <publisher> Ablex, </publisher> <address> Norwood, New Jersey, </address> <year> 1985. </year>
Reference-contexts: Other problems, which are generally outside the scope of traditional planning, concern knowledge acquisition, interference from external events and other agents, and the limited resources of reasoning and response times available to an agent in a real-life environment. Valuable work has been done in these areas <ref> [Moo85, BIP88, BD94] </ref> and we hope to explore them further in the future. 40
Reference: [MR91] <author> David McAllester and David Rosenblitt. </author> <title> Systematic nonlinear planning. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence. </booktitle> <publisher> AAAI Press, </publisher> <address> Menlo Park, California, </address> <year> 1991. </year> <month> 42 </month>
Reference-contexts: In this section, we analyse and reconstruct the total-order planner strips [FN71]. In the next section, we will do the same thing for a partial-order planner, tweak [Cha87]. Another partial-order planner, which recently has earned much attention, is McAllester's and Rosenblitt's systematic nonlinear planner (SNLP) <ref> [MR91] </ref>. As SNLP has the same operator representation as strips, the results in these sections applies for SNLP as well. 3.2 strips | a Total-Order Planner strips is a total-order planner. The search in the plan space is done from the end of the plan, in a regressive manner. <p> The operators of the original strips formalism are very restricted in their expressiveness. Basically the same kind of operators are used in many other planners, for instance tweak [Cha87], SNLP <ref> [MR91] </ref> and for primitive (non-decomposable) operators in hierarchical planners such as O-Plan [CT91] and sipe [Wil88] (with the addition of resource specification). In contrast, FL is able to represent actions with duration, detailed trajectories, and context-dependent or random effects.
Reference: [Nil80] <author> Nils J. Nilsson. </author> <booktitle> Principles of Artificial Intelligence. </booktitle> <publisher> Morgan Kauf--mann, </publisher> <year> 1980. </year> <note> Also published by Springer-Verlag 1982. </note>
Reference-contexts: The recursive version presented here is based upon a version by Nilsson <ref> [Nil80] </ref>, but has been modified to suit our notation. The symbol denotes a (partial) plan, S denotes a world model, and finally G is a set of goal sentences.
Reference: [Ped86] <author> Edwin P.D. Pednault. </author> <title> Formulating multiagent, dynamic-world problems in the classical planning framework. </title> <note> In Georgeff and Lansky [GL87]. </note>
Reference-contexts: Green [Gre69] and Kowalski [Kow77] both used a situation calculus-type of representation, and showed how theorem proving can be used to find plans which solve specific problems. Other examples of temporal logics applied to planning are Pednault's Action Description Language (ADL) <ref> [Ped86] </ref> and Allen's logic of temporal intervals [All84, All91]. Rosenschein [Ros81] used dynamic logic for representing plans. However, the main part of planning systems do not use temporal logics, especially if we consider planners that have actually been implemented and applied for solving realistic problems.
Reference: [Ped88] <author> Edwin P.D. Pednault. </author> <title> Synthesizing plans that contain actions with context-dependent effects. </title> <journal> Computational Intelligence, </journal> <volume> 4 </volume> <pages> 356-372, </pages> <year> 1988. </year>
Reference-contexts: Some recent planners such as Sipe [Wil88] deals with concurrency in terms of resource sharing, and would consequently belong to the IebC assumption. Pednault's ADL supports planning with context-dependent actions (IAd) <ref> [Ped88] </ref>. 2.2 The Epistemological Taxonomy The agent might have more or less correct and complete knowledge about action laws, action and event occurrences and the state of the world. This knowledge is usually expressed in scenario descriptions.
Reference: [Ros81] <author> Stanley J. Rosenschein. </author> <title> Plan synthesis: A logical perspective. </title> <booktitle> In Proceedings of the Seventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 331-37. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1981. </year> <note> Reprinted in [AHT90]. </note>
Reference-contexts: Other examples of temporal logics applied to planning are Pednault's Action Description Language (ADL) [Ped86] and Allen's logic of temporal intervals [All84, All91]. Rosenschein <ref> [Ros81] </ref> used dynamic logic for representing plans. However, the main part of planning systems do not use temporal logics, especially if we consider planners that have actually been implemented and applied for solving realistic problems.
Reference: [San94] <author> Erik Sandewall. </author> <title> Features and Fluents. </title> <publisher> Oxford Press, </publisher> <year> 1994. </year>
Reference-contexts: For instance, the strips formalism cannot represent context-dependent actions. 1.2 Features and Fluents This thesis follows the tradition of using temporal logics for planning. The subject is treated within Sandewall's Features and Fluents framework <ref> [San94, SS94] </ref>, which takes a systematic approach to the analysis and construction of temporal logics. <p> Finally, we hope that studying existing planners from a temporal logics perspective will contribute to a better understanding of how current planners work, especially concerning how they represent the world. 1.3.2 Planning and the Systematic Approach Our investigation will be based on Sandewall's systematic approach. Sande-wall states that <ref> [San94, p.32] </ref> ...The ego's 2 understanding of its world is in terms of (discrete valued) features and occurrences. The understanding is intended to be used for prediction, postdiction (e.g. diagnosis), generalization, planning etc. <p> The letter p corresponds to the restriction of information to the initial situation which is common in planning. 2.3 Formal Definition of Reasoning Problems Definition 1 A scenario description <ref> [San94] </ref> is a tuple hZ; 1 ; 2 ; : : :; k i where Z identifies the epistemological assumptions made about the scenario, and the succeeding elements are sets of formulae or other formal objects. <p> Let fl be an entailment relation for scenario descriptions. Sandewall <ref> [San94] </ref> defines this relation in terms of the underlying semantics, a topic we will not go into in this report. 6 Definition 2 A k-adic reasoning problem [San94] is a fourtuple hh 1 ; 2 ; : : : ; k i; ffi; ;; ti where all i are scenario descriptions, <p> Let fl be an entailment relation for scenario descriptions. Sandewall <ref> [San94] </ref> defines this relation in terms of the underlying semantics, a topic we will not go into in this report. 6 Definition 2 A k-adic reasoning problem [San94] is a fourtuple hh 1 ; 2 ; : : : ; k i; ffi; ;; ti where all i are scenario descriptions, ffi is a set of scenario descriptions wherein the solution is to be found, ; is a (k+1)-ary relation over scenario descriptions written as 1 ; 2 <p> The capital letter S with index is used to denote these. 2.4.7 Minimizing change in FL The criterion used for minimization of change is called PMON (Pointwise Minimization of Occlusion with No-Change premises). PMON has been proven correct for the K-IA class of scenarios <ref> [San94] </ref>. The idea is to minimize occlusion | "allowed change" | and then filter away those models where there are unoccluded changes. For this purpose, we use an additional axiom set of nochange premises as follows ( denotes 'exclusive or'). <p> Proof See Doherty [Doh94]. To sum it up, temporal and atemporal constraints and observations can be added without invalidating any previous conclusions. 2.4.10 FL for Q No logic for the epistemological speciality Q is presented by Sandewall <ref> [San94] </ref>, and none will be proposed here. As soon will be shown, this problem can be side-stepped by reasoning in K. 2.5 Plan Specification Our intention is to use scenario descriptions to specify the world of a planning problem, the goals, and the resulting plan. <p> The PMON completion <ref> [San94] </ref> of is as follows: [0; 2]hungry ^ inStreet ^ :inRest [3; 4]hungry [5; 7]hungry ^ :inStreet ^ inRest [8]:inStreet ^ inRest [9; 1):hungry ^ :inStreet ^ inRest (26) The goal [10]:hungry is clearly achieved by the plan. 13 2.6 Reasoning about Partial Plans There might be stages in the plan <p> We shall use an intermediate transformation to K pg as described in the previous section. K pg Isb is within the range of applicability of PMON <ref> [San94] </ref>. The time domain is the non-negative integers Z. Furthermore, a set of fluents are selected as essential.
Reference: [SS94] <author> Erik Sandewall and Yoav Shoham. </author> <title> Nonmonotonic temporal reasoning. </title> <booktitle> In Handbook of Artificial Intelligence and Logic Programming. </booktitle> <publisher> Oxford University Press, </publisher> <year> 1994. </year> <note> (To appear). </note>
Reference-contexts: For instance, the strips formalism cannot represent context-dependent actions. 1.2 Features and Fluents This thesis follows the tradition of using temporal logics for planning. The subject is treated within Sandewall's Features and Fluents framework <ref> [San94, SS94] </ref>, which takes a systematic approach to the analysis and construction of temporal logics.
Reference: [Tat77] <author> Austin Tate. </author> <title> Generating project networks. </title> <booktitle> In Proceedings of the Fifth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 888-93. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1977. </year> <note> Reprinted in [AHT90]. </note>
Reference-contexts: However, the main part of planning systems do not use temporal logics, especially if we consider planners that have actually been implemented and applied for solving realistic problems. These planners generally follow an operator-based approach and fall under two main categories: precondition-achievement planners and hierarchical planners <ref> [Tat77, CT91, Wil88] </ref>. 1 There are alternative approaches where symbolic reasoning is not taken as a primitive aspect of intelligence, e.g. connectionist models [Gro88] and Brook's subsumption architecture [Bro91]. 1 The precondition-achievement planner strips by Fikes and Nilsson [FN71] represents situations as sets of first-order logic sentences. <p> Planning is but one of the reasoning capabilities required in a dynamic and complex environment. This puts high demands of expressiveness and flexibility on whatever representation is being used. Hierarchical task networks <ref> [Tat77, CT91] </ref> might be good for hierarchical planning, but we are less convinced they are good for e.g. anticipation (fore-seeing the future) and learning. A second motivation is the implicit assumptions about the properties of the world which underly these planners.
Reference: [Wil88] <author> David E. Wilkins. </author> <title> Practical Planning: extending the classical AI paradigm. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year> <month> 43 </month>
Reference-contexts: However, the main part of planning systems do not use temporal logics, especially if we consider planners that have actually been implemented and applied for solving realistic problems. These planners generally follow an operator-based approach and fall under two main categories: precondition-achievement planners and hierarchical planners <ref> [Tat77, CT91, Wil88] </ref>. 1 There are alternative approaches where symbolic reasoning is not taken as a primitive aspect of intelligence, e.g. connectionist models [Gro88] and Brook's subsumption architecture [Bro91]. 1 The precondition-achievement planner strips by Fikes and Nilsson [FN71] represents situations as sets of first-order logic sentences. <p> Ad Deterministic actions. independent of state. (Actually the effects are defined in terms of two sets, called the add and delete lists. strips will be given a more detailed investigation later in this paper.) strips appears to fall within the Isb assumption. Some recent planners such as Sipe <ref> [Wil88] </ref> deals with concurrency in terms of resource sharing, and would consequently belong to the IebC assumption. <p> The operators of the original strips formalism are very restricted in their expressiveness. Basically the same kind of operators are used in many other planners, for instance tweak [Cha87], SNLP [MR91] and for primitive (non-decomposable) operators in hierarchical planners such as O-Plan [CT91] and sipe <ref> [Wil88] </ref> (with the addition of resource specification). In contrast, FL is able to represent actions with duration, detailed trajectories, and context-dependent or random effects. If we are to construct planners for these spe 39 cialities, we will only have to make minor modifications in our representation.
References-found: 36

