URL: ftp://ftp.cc.gatech.edu/pub/gvu/tr/1993/93-19.ps.Z
Refering-URL: http://www.cs.gatech.edu/gvu/reports/1993/
Root-URL: 
Title: ABSTRACT Adaptive action prompting supports users by suggesting how to continue with the interaction. A
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> L. Balint: </author> <title> Adaptive Dynamic Menu System. </title> <booktitle> Poster Abstracts HCI International 89, </booktitle> <address> Boston, </address> <month> September 18-22, </month> <year> 1989. </year>
Reference-contexts: Microsoft Word [12] provides an adaptive menu which offers the most recently opened files. To reopen these files, users simply choose from the menu rather than going through the dialog with a file selection box. Related research focuses on a reorganization of menus according to user-specific usage patterns. Balint <ref> [1] </ref>, for instance reports on an adaptive dynamic menu system where positions of menu items are automatically adjusted after every interaction. Sukaviriya and Foley [16], in contrast, propose to explicitly suggest modifications to menu layouts to users.
Reference: 2. <author> P. R. Cohen: </author> <title> The Role of Natural Language in a Multimodal Interface. </title> <booktitle> Proc. </booktitle> <address> UIST92, Monterey, CA, Nov 15-18, </address> <year> 1992. </year>
Reference: 3. <author> A. Cypher. Eager: </author> <title> Programming Repetitive Tasks By Example. </title> <booktitle> Proc. CHI 91, </booktitle> <pages> pp. 33-39, </pages> <year> 1991. </year>
Reference-contexts: Both approaches differ from the work described in this paper in that they modify the otherwise static menus of an application and that they only consider the statistical history of interactions to infer an improved menu structure. Cypher <ref> [3] </ref> introduced Eager, a Programming-By-Example system to automate iterative patterns in interaction. Eager is similar to adaptive prompting in that it anticipates which action the user is going to perform next.
Reference: 4. <author> H. Dieterich, U. Malinowski, T. Khme, M. Schneider-Hufschmidt: </author> <title> State of the Art in Adaptive User Interfaces. </title> <booktitle> In: </booktitle> <pages> [14]. </pages>
Reference: 5. <author> W. D. Gray, W. E. Heey, D. Murray (eds.): </author> <booktitle> Proceedings of the 1993 ACM International Workshop on Intelligent User Interfaces. </booktitle> <address> Orlando, FL. </address> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1993. </year>
Reference: 6. <author> T. Khme: </author> <title> A User-Centered Approach to Adaptive User Interfaces. </title> <booktitle> In [5], </booktitle> <pages> pp. 243-245, </pages> <year> 1993. </year>
Reference-contexts: Therefore, the user is widely supported in inspecting and controlling the adaptive mechanisms. This approach has been called Computer-Aided Adaptation and described in more detail earlier <ref> [6] </ref>. It is crucial that the user can obtain any insights and adjustments with a minimal amount of additional knowledge and effort. Therefore, the user interface for all kinds of user involvement consists only of simple menus and dialog boxes.
Reference: 7. <author> T. Khme, U. Malinowski, J. D. Foley: </author> <title> Adaptive Prompting. </title> <type> Technical Report GIT-GVU-93-05, </type> <institution> Georgia Institute of Technology, </institution> <month> January </month> <year> 1993. </year>
Reference-contexts: Thus, explorative working in a rich environment is always possible if desired but not necessary in situations with a clear focus in the task domain. While this paper concentrates on the technical aspects of adaptive action prompting an earlier paper <ref> [7] </ref> describes the general idea of adaptive prompting as applicable to different concepts in contemporary user interfaces, including tool selection (see also [8]) and dialog boxes (see also [11]). First, we provide a brief discussion of related work.
Reference: 8. <author> T. Khme, U. Malinowski, J. D. Foley: </author> <title> Facilitating Interactive Tool Selection by Adaptive Prompting. Short Paper Abstracts INTERCHI93, </title> <address> Amsterdam, The Neth-erlands, </address> <month> April 24-29, </month> <year> 1993. </year>
Reference-contexts: While this paper concentrates on the technical aspects of adaptive action prompting an earlier paper [7] describes the general idea of adaptive prompting as applicable to different concepts in contemporary user interfaces, including tool selection (see also <ref> [8] </ref>) and dialog boxes (see also [11]). First, we provide a brief discussion of related work. Then, the adaptive action prompter is described in terms of its user interface and its functional characteristics. The underlying context model and the embedded prompting strategies are subsequently discussed in detail.
Reference: 9. <author> T. Khme, M. Schneider-Hufschmidt: </author> <title> SX/Tools - An Open Design Environment for Adaptable Multimedia User Interfaces. </title> <booktitle> Proc. Eurographics 92, Computer Graphics Forum, </booktitle> <volume> Vol. 11, No. 3, </volume> <pages> pp C-93C-105, </pages> <year> 1992. </year>
Reference-contexts: Hence, space consumption could be limited to what is just necessary. CURRENT STATUS AND FUTURE WORK A prototype of the action prompter has been developed in C++ using UIDE [18] for application and user modeling. The prompter interface has been built with SX/Tools <ref> [9] </ref>. We have evaluated a couple of prompting strategies, however, only in the context of a small demo application. Although first results are encouraging they lack in generality because of the very limited domain.
Reference: 10. <author> C. Lewis, P. G. Polson: </author> <title> Cognitive Walkthroughs: A Method for Theory-Based Evaluation of User Interfaces. </title> <booktitle> CHI92 Tutorial Notes, </booktitle> <address> Monterey, CA, </address> <month> May 4, </month> <year> 1992. </year>
Reference-contexts: Prior to selecting an action, users have to consider if the application provides an appropriate action at all. Even more basically, users have to imagine what would be an appropriate action to proceed with in order to perform a certain task of the application domain (cf. <ref> [10] </ref>). While in direct manipulation interfaces all available functions are principally accessible at the same time, thus allowing for an explorative working style, these interfaces generally do not support users in dealing with such sequencing problems.
Reference: 11. <author> U. Malinowski: </author> <title> Adjusting Forms to Users Behavior. </title> <booktitle> In [5], </booktitle> <pages> pp. 247-249, </pages> <year> 1993. </year>
Reference-contexts: While this paper concentrates on the technical aspects of adaptive action prompting an earlier paper [7] describes the general idea of adaptive prompting as applicable to different concepts in contemporary user interfaces, including tool selection (see also [8]) and dialog boxes (see also <ref> [11] </ref>). First, we provide a brief discussion of related work. Then, the adaptive action prompter is described in terms of its user interface and its functional characteristics. The underlying context model and the embedded prompting strategies are subsequently discussed in detail.
Reference: 12. <institution> Microsoft Word 5.0, Microsoft Corporation, </institution> <year> 1991. </year>
Reference-contexts: In some environments, menus are configurable, i.e. users can determine which items are contained in a menu and in which order. Thus, users have the opportunity to adapt the menus to their particular needs and preferences. Microsoft Word <ref> [12] </ref> provides an adaptive menu which offers the most recently opened files. To reopen these files, users simply choose from the menu rather than going through the dialog with a file selection box. Related research focuses on a reorganization of menus according to user-specific usage patterns.
Reference: 13. <author> M. A. Perz, J. L. Sibert: </author> <title> Focus in Graphical User Interfaces. </title> <booktitle> In [5], </booktitle> <pages> pp. 255-257, </pages> <year> 1993. </year>
Reference-contexts: This mechanism uses the first order focus context to establish and switch between respective second order focus contexts (cf. the notion of the focus space in <ref> [13] </ref>). These contexts include in addition those objects which are closely related to an obviously focused object. The interpretation of closely related depends on structural relationships between objects provided by the application model.
Reference: 14. <author> M. Schneider-Hufschmidt, T. Khme, U. Malinowski (eds.): </author> <title> Adaptive User Interfaces - Principles and Practice. </title> <publisher> Elsevier, </publisher> <address> Amsterdam. </address> <note> In preparation. </note>
Reference: 15. <author> G. Sperling: </author> <title> The Information Available in a Brief Visual Representation. </title> <journal> Psych. Monogr., </journal> <volume> Vol. 74, No. 11, </volume> <year> 1960. </year>
Reference-contexts: These menus provide opportunities to customize the prompter interface and to adjust the prompting strategies. The default number of presented action prompts is 4, due to experiments that determined the average number of items perceivable at a glance to be 4.2 <ref> [15] </ref>. However, the number of prompts and the layout (rows/columns) can easily be changed by means of a dialog box that is accessible via the view menu (figure 3). The appearance of the prompts is adjustable.
Reference: 16. <author> P. Sukaviriya, J. Foley: </author> <title> A Built-in Provision for Collecting Individual Task Usage Information in UIDE: the User Interface Design Environment. </title> <booktitle> In: </booktitle> <pages> [14]. </pages>
Reference-contexts: Related research focuses on a reorganization of menus according to user-specific usage patterns. Balint [1], for instance reports on an adaptive dynamic menu system where positions of menu items are automatically adjusted after every interaction. Sukaviriya and Foley <ref> [16] </ref>, in contrast, propose to explicitly suggest modifications to menu layouts to users. The common goal is an increased performance due to the fact that the most frequently used item is moved to the most convenient location to select. <p> Corresponding help can be either textual or animated [17] and is generated from a model of the application and interaction. The work described in this paper is closely related to UIDE and is based on its models and built-in provision for collecting individual task usage information <ref> [16] </ref>. A comparison between context-sensitive help and adaptive prompting is provided in a later section. THE ADAPTIVE ACTION PROMPTER A prompter in this context is an intelligent agent who helps the user by suggesting how to continue with the interaction. <p> Experts, on the other hand, might have developed preferences for certain actions as far as there are redundant sets of actions and different ways to perform a given task. For purposes of user modeling, this work uses UIDEs built-in mechanisms for recording a statistical history of interactions <ref> [16] </ref>. In order to obtain a model of the users expertise, not only successful completions of actions are recorded but also, for instance, related help requests. Preferred actions are determined by a comparative analysis of the users action-related expertise and the most-recently-used time stamp for that action.
Reference: 17. <author> P. Sukaviriya, J. J. de Graaff: </author> <title> Automatic Generation of Context-sensitive Show&Tell Help. </title> <type> Technical Report GIT-GVU-92-18, </type> <institution> Georgia Institute of Technology, </institution> <month> July </month> <year> 1992. </year>
Reference-contexts: The user interface environment UIDE [18] supports users in action selection by providing context-sensitive help on why an action is currently disabled and how to enable this action. Corresponding help can be either textual or animated <ref> [17] </ref> and is generated from a model of the application and interaction. The work described in this paper is closely related to UIDE and is based on its models and built-in provision for collecting individual task usage information [16]. <p> As we know from the generation of context-sensitive help on how an action could be enabled <ref> [17] </ref>, there are in general different ways to enable an action, i.e. to make the precondition of an action become true. Planning algorithms can be used to determine possible solutions by looking at which actions postconditions would satisfy other actions preconditions.
Reference: 18. <author> P. Sukaviriya, J. Foley, T. Griffith: </author> <title> A Second Generation User Interface Design Environment: The Model and The Runtime Architecture. </title> <booktitle> Proc. </booktitle> <address> INTERCHI93, Amsterdam, The Netherlands, </address> <month> April 24-29, </month> <year> 1993. </year>
Reference-contexts: The user simply clicks on the Eager icon for task completion at any point in time. With its focus on repetitive tasks, a mechanism like that of Eager could be a supplemental part of adaptive prompting. The user interface environment UIDE <ref> [18] </ref> supports users in action selection by providing context-sensitive help on why an action is currently disabled and how to enable this action. Corresponding help can be either textual or animated [17] and is generated from a model of the application and interaction. <p> In particular, the prompting strategies support an open number of knowledge sources. Application Model. Sensible alternatives of actions to proceed with are generally determined by the application domain and the tasks users perform in this domain by interacting with the computer. This work uses the UIDE application model <ref> [18] </ref> that provides information about the elements of the dialog such as objects, actions, relationships between objects and actions, and relationships between subsequent actions. By being used for controlling and monitoring the interaction, this model is able to also supply information about the actual dialog with respect to these elements. <p> Adaptive prompting would be a solution since it presents only those items which are most important in a given situation. Hence, space consumption could be limited to what is just necessary. CURRENT STATUS AND FUTURE WORK A prototype of the action prompter has been developed in C++ using UIDE <ref> [18] </ref> for application and user modeling. The prompter interface has been built with SX/Tools [9]. We have evaluated a couple of prompting strategies, however, only in the context of a small demo application. Although first results are encouraging they lack in generality because of the very limited domain.
Reference: 19. <author> H. R. Tennant, K. M. Ross, R. M. Saenz, C. W. Thomp-son, J. R. Miller: </author> <title> Menu-based natural language understanding. </title> <booktitle> Proceedings of the 21st annual meeting of the Association for Computational Linguistics, </booktitle> <pages> pp. 151-158, </pages> <year> 1983. </year>
Reference-contexts: Optionally, the user can choose the desired action from the prompter by means of a more accurate input modality. The usefulness of this approach has been demonstrated earlier by Tennant et al. <ref> [19] </ref> who provided a menu to facilitate natural language input and recognition. Guidance Aspects Although multimodal interfaces facilitate more intuitive dialogs than ever possible in contemporary direct manipulation interfaces they will not completely relieve the interface from providing guidance.
References-found: 19

