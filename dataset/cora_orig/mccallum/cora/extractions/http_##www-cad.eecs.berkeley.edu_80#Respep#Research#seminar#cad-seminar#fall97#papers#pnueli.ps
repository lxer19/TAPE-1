URL: http://www-cad.eecs.berkeley.edu:80/Respep/Research/seminar/cad-seminar/fall97/papers/pnueli.ps
Refering-URL: http://www-cad.eecs.berkeley.edu:80/Respep/Research/seminar/cad-seminar/fall97/abstract/pnueli.html
Root-URL: 
Title: Verifying Out-of-Order Executions  
Author: W. Damm A. Pnueli 
Date: October 3, 1997  
Abstract: The paper presents an approach to the specification and verification of out-of-order execution in the design of micro-processors. Ultimately, the appropriate statement of correctness is that the out-of-order execution produces the same final state as a purely sequential machine running the same program.
Abstract-found: 1
Intro-found: 1
Reference: [BCM + 92] <author> J.R. Burch, E.M. Clarke, K.L. McMillan, D.L. Dill, and J. Hwang. </author> <title> Symbolic model checking: 10 20 states and beyond. </title> <journal> Information and Computation, </journal> <volume> 98(2) </volume> <pages> 142-170, </pages> <year> 1992. </year>
Reference-contexts: The need for formal verification tools to support industrial design processes is now recognized [Keu96] and is apparent by the introduction of commercial verification tools. However, while circuit comparison and to a lesser extend property verification based on symbolic model-checking <ref> [BCM + 92] </ref> have found their way into industrial applications (c.f. e.g. [CCH + 96, BM97]) , coping with the complexity of industrial designs remains a key challenge, requiring complementary proof-methods to be combined in verification environments.
Reference: [BD94] <author> J. R. Burch and D. L. Dill. </author> <title> Automatic verification of pipelined microprocessor control. </title> <booktitle> In Proc. 6 th Intl. Conference on Computer Aided Verification (CAV'94), volume 818 of Lect. Notes in Comp. Sci., </booktitle> <pages> pages 68-80. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: In particular, proof-methods based on decision procedures for first-order logic <ref> [BD94] </ref>, [JDJ95] have gained high attention due to their ability to naturally cope with abstractions from data-computations fl This research was supported in part by a gift from Intel, a grant from the Minerva foundation, and an Infrastructure grant from the Israeli Ministry of Science and the Arts. y OFFIS, Oldenburg, <p> In particular, contrary to <ref> [BD94] </ref>, we are able to give natural meaning to any state of the hardware within our intermediate model, and thus need not code our refinement relation by relying on the existence of a flushing mechanism. <p> else 0 8 Conclusion We have presented a refinement-based proof-method for the verification of modern processor architectures, and demonstrated its applicability by showing the correctness of a data-path involving multiple functional units, register-renaming, dynamic scheduling, and out-of-order execution, thus significantly exceeding the complexity of static pipelines as e.g. treated in <ref> [BD94] </ref>.
Reference: [BM97] <author> G. Barrett and A. McIsaac. </author> <title> Model-checking in a microprocessor design project. </title> <editor> In O. Grumberg, editor, </editor> <booktitle> Proc. 9 th Intl. Conference on Computer Aided Verification (CAV'97), Lect. Notes in Comp. </booktitle> <publisher> Sci. Springer-Verlag, </publisher> <year> 1997. </year> <note> to appear. </note>
Reference-contexts: However, while circuit comparison and to a lesser extend property verification based on symbolic model-checking [BCM + 92] have found their way into industrial applications (c.f. e.g. <ref> [CCH + 96, BM97] </ref>) , coping with the complexity of industrial designs remains a key challenge, requiring complementary proof-methods to be combined in verification environments.
Reference: [CCH + 96] <author> Y.A. Chen, E.M. Clarke, P.-H. Ho, Y. Hoskote, T. Kam, M. Khaira, J.OLeary, and X. Zhao. </author> <title> Verification of all circuits in a floating point unit using word-level modelchecking. </title> <editor> In M. Srivas and A. Camilleri, editors, </editor> <booktitle> Proc. 1 st Intl. Conference on Formal Methods in Computer-Aided Design (FMCAD'96), volume 1166 of Lect. Notes in Comp. Sci., </booktitle> <pages> pages 1-18. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: However, while circuit comparison and to a lesser extend property verification based on symbolic model-checking [BCM + 92] have found their way into industrial applications (c.f. e.g. <ref> [CCH + 96, BM97] </ref>) , coping with the complexity of industrial designs remains a key challenge, requiring complementary proof-methods to be combined in verification environments.
Reference: [DHP95] <author> G. Doehmen, R. Herrmann, and H. Pargmann. </author> <title> Translating vhdl into functional symbolic finite-state models. </title> <editor> J. </editor> <booktitle> on Formal Methods in System Design, </booktitle> <volume> 7 </volume> <pages> 125-148, </pages> <year> 1995. </year>
Reference-contexts: Transitions are expressed using first-order transition predicates. 2 Work outside the scope of this paper provides the tool-basis integrating the proof-method described into a verification environment for hardware-verification <ref> [DJS94, DHP95] </ref>. This paper is structured as follows. The next section presents a short summary of the underlying mathematical model of synchronous transition systems and their refinement theory. Ultimately, the implementation has to be compatible with the sequential reference model developed in Section 3.
Reference: [DJS94] <author> W. Damm, B. Josko, and R. Schlor. </author> <title> Specification and verification of vhdl-based system-level hardware design. </title> <editor> In E. Borger, editor, </editor> <booktitle> Specification and Validation Methods, </booktitle> <pages> pages 331-410. </pages> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference-contexts: Transitions are expressed using first-order transition predicates. 2 Work outside the scope of this paper provides the tool-basis integrating the proof-method described into a verification environment for hardware-verification <ref> [DJS94, DHP95] </ref>. This paper is structured as follows. The next section presents a short summary of the underlying mathematical model of synchronous transition systems and their refinement theory. Ultimately, the implementation has to be compatible with the sequential reference model developed in Section 3.
Reference: [GM93] <editor> M.J.C. Gordon and T.F. Melham, editors. </editor> <title> Introduction to HOL: A Theorem Proving Environment for Higher-Order Logic. </title> <publisher> Cambridge University Press, </publisher> <year> 1993. </year> <month> 21 </month>
Reference-contexts: Minerva foundation, and an Infrastructure grant from the Israeli Ministry of Science and the Arts. y OFFIS, Oldenburg, Germany z Weizmann Institute of Science, Rehovot, Israel 1 when analyzing complex control circuitry while allowing full automation of the proof (in contrast to approaches relying on interactive theorem proving such as <ref> [GM93, ORSS94, SM96] </ref>). In this paper we propose a proof-method for proving correctness of such processor designs based on refinement , and illustrate it by showing correctness of the Tomasulo algorithm [HP96] supporting out-of-order execution of floating point instructions.
Reference: [HIKB96] <author> R. Hojati, A. Isles, D. Kirkpatrick, and R.K. Brayton. </author> <title> Verification using uninter--preted functions and finite instantiations. </title> <booktitle> In Proc. 1 st Intl. Conference on Formal Methods in Computer-Aided Design (FMCAD'96), </booktitle> <pages> pages 218 - 232, </pages> <year> 1996. </year>
Reference-contexts: We note, that also <ref> [HIKB96] </ref> work with a logic of uninterpreted functions, but use the techniques of reducing property verification to verifying the property for finite-instantiations of the model, which in general (and in particular for the application to super-scalar processors discussed in this paper) is not complete.
Reference: [HP96] <author> J.L. Hennessy and D.A. Patterson. </author> <title> Computer Architecture: A Quantitative Approach. </title> <publisher> Morgan Kaufmann Publishers Inc, </publisher> <year> 1996. </year>
Reference-contexts: The design of controllers maintaining compatibility with sequential program execution while supporting out-of-order as well as speculative execution of instructions, interrupts, and load/store buffers is both challenging and error-prone (c.f. e.g. <ref> [HP96] </ref>). As the complexity of designs has grown, so has the need for advanced validation techniques. The need for formal verification tools to support industrial design processes is now recognized [Keu96] and is apparent by the introduction of commercial verification tools. <p> In this paper we propose a proof-method for proving correctness of such processor designs based on refinement , and illustrate it by showing correctness of the Tomasulo algorithm <ref> [HP96] </ref> supporting out-of-order execution of floating point instructions. <p> seq and non-det have equal sets of observations, which allows us to conclude that non-det v seq. 6 The Tomasulo Algorithm 6.1 The System Tomasulo In this section, we give a formal definition of the Tomasulo Algorithm for data-driven execution of instructions, which is based on the informal presentation in <ref> [HP96] </ref>. Fig. 5 shows an instance of the data-path with three functional units. Instructions flow from the instruction queue to one of the reservation-stations, where they await availability of their sources. Once these are available, pipelined execution within the functional unit is initiated.
Reference: [J.B96] <author> J.Burch. </author> <title> Techniques for verifying superscaler microprocessors. </title> <booktitle> In Proc. Design Automation Conference 96 (DAC96), </booktitle> <year> 1996. </year>
Reference-contexts: Clearly the complexity of a refinement proof depends on the complexity of the refinement relation; while flushing may be appropriate in static pipelines with an essentially fixed delay, its extension to out-of-order execution <ref> [J.B96] </ref> is cumbersome due to the loss of information when flushing dynamically scheduled hardware, information which has to be painfully reconstructed when actually carrying out the proof.
Reference: [JDJ95] <author> R.B. Jones, D.L. Dill, and J.R.Burch. </author> <title> Efficient validity checking for processor verification. </title> <booktitle> In Intl. Conf. on Computer-Aided Design. IEEE, </booktitle> <year> 1995. </year>
Reference-contexts: In particular, proof-methods based on decision procedures for first-order logic [BD94], <ref> [JDJ95] </ref> have gained high attention due to their ability to naturally cope with abstractions from data-computations fl This research was supported in part by a gift from Intel, a grant from the Minerva foundation, and an Infrastructure grant from the Israeli Ministry of Science and the Arts. y OFFIS, Oldenburg, Germany
Reference: [Keu96] <author> K. Keutzer. </author> <title> The need for formal methods for integrated circuit design. </title> <editor> In M. Sri-vas and A. Camilleri, editors, </editor> <booktitle> Proc. 1 st Intl. Conference on Formal Methods in Computer-Aided Design (FMCAD'96), volume 1166 of Lect. Notes in Comp. Sci., </booktitle> <pages> pages 1-18. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: As the complexity of designs has grown, so has the need for advanced validation techniques. The need for formal verification tools to support industrial design processes is now recognized <ref> [Keu96] </ref> and is apparent by the introduction of commercial verification tools.
Reference: [KP96] <author> Y. Kesten and A. Pnueli. </author> <title> An ffsts-based common semantics for signal, statechart, dc+, and C. </title> <type> Technical report, </type> <institution> Dept. of Comp. Sci., Weizmann Institute, </institution> <month> March </month> <year> 1996. </year>
Reference: [MP96] <author> Z. Manna and A. Pnueli. </author> <title> Clocked transition systems. </title> <editor> In A. Pnueli and H. Lin, editors, </editor> <booktitle> Logic and Software Engineering, </booktitle> <pages> pages 3 - 42. </pages> <publisher> World Scientific, </publisher> <address> Singapore, </address> <year> 1996. </year>
Reference-contexts: We base this paper on the semantic model of synchronous transition systems ([KP96], [PS97]), a variant of the clocked transition systems used in <ref> [MP96] </ref> in particular providing the concept of step. Steps will correspond to clock-cycles at the hardware-level, while a step of our model of data-driven execution will correspond to the reduction of a subset of all "enabled" instructions.
Reference: [ORSS94] <author> S. Owre, J.M. Rushby, N. Shankar, </author> <title> and M.K. Srivas. A tutorial on using PVS for hardware verification. </title> <editor> In R. Kumar and T. Kropf, editors, </editor> <booktitle> Proceedings of the Second Conference on Theorem Provers in Circuit Design, </booktitle> <pages> pages 167-188. </pages> <note> FZI Publication, Universitat Karlsruhe, 1994. Preliminary Version. </note>
Reference-contexts: Minerva foundation, and an Infrastructure grant from the Israeli Ministry of Science and the Arts. y OFFIS, Oldenburg, Germany z Weizmann Institute of Science, Rehovot, Israel 1 when analyzing complex control circuitry while allowing full automation of the proof (in contrast to approaches relying on interactive theorem proving such as <ref> [GM93, ORSS94, SM96] </ref>). In this paper we propose a proof-method for proving correctness of such processor designs based on refinement , and illustrate it by showing correctness of the Tomasulo algorithm [HP96] supporting out-of-order execution of floating point instructions. <p> Still, this work needs to be extended in a number of ways. 20 * So far, verification of invariants and the refinement relation within PVS <ref> [ORSS94] </ref> is not completed and relying on hand-translation rather than compilation of the employed notation for sts; * Ongoing work considers to considerably lift the degree of automation achieved so far within PVS and providing links to VHDL based verification tools developed in the FOR MAT project; * A paper under
Reference: [PS97] <author> A. Pnueli and E. Singerman. </author> <title> Fair synchronous transition systems and their liveness proofs. </title> <type> Technical report, </type> <institution> Dept. of Comp. Sci., Weizmann Institute, </institution> <month> Jan </month> <year> 1997. </year>
Reference-contexts: We base this paper on the semantic model of synchronous transition systems ([KP96], <ref> [PS97] </ref>), a variant of the clocked transition systems used in [MP96] in particular providing the concept of step. Steps will correspond to clock-cycles at the hardware-level, while a step of our model of data-driven execution will correspond to the reduction of a subset of all "enabled" instructions. <p> We give a formal definition of the Tomasulo Algorithm in Section 6. The final section contains the refinement relation and the correctness proof. 2 Synchronous Transition Systems and their Refine ment 2.1 Synchronous Transition Systems As our computational model we take synchronous transition systems ([KP96], <ref> [PS97] </ref>. A synchronous transition system (sts) S = hV; fi; i, consists of the following components: * V : A finite set of typed system variables.

References-found: 16

