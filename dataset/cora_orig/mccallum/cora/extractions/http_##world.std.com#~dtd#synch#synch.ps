URL: http://world.std.com/~dtd/synch/synch.ps
Refering-URL: http://world.std.com/~dtd/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Kerberos Security With Clocks Adrift: History, Protocols, and Implementation I used to be Snow White,
Author: Don Davis Daniel E. Geer, Sc.D. Openvision Technologies Theodore Ts'o Mae West 
Note: MIT Kerberos V5 source-distribution.  
Date: September 19, 1995  
Affiliation: Massachusetts Institute of Technology  
Abstract: We show that the Kerberos Authentication System can relax its requirement for synchronized clocks, with only a minor change which is consistent with the current protocol. Synchronization has been an important limitation of Kerberos; it imposes political costs and technical ones. Further, Kerberos' reliance on synchronization obstructs the secure initialization of clocks at bootstrap. Perhaps most important, this synchronization requirement limits Kerberos' utility in contexts where connectivity is often intermittent. Such environments are becoming more important as mobile computing becomes more common. Mobile hosts are particularly refractory to security measures, but our proposal gracefully extends Kerberos even to mobile users, making it easier to secure the rest of a network that includes mobile hosts. An advantage of our proposal is that we do not change the Kerberos protocol per se; by reinterpreting an unused challenge-response handshake in the standard Kerberos protocol, we convey just enough replay protection to authenticate the initial ticket and its timestamp to an unsynchronized client, without adding process-state to the system's servers. We have implemented this protocol in the 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S.M. Bellovin and M. Merritt, </author> <title> "Limitations of the Kerberos Authentication System," </title> <booktitle> in USENIX Conference Proceedings, </booktitle> <pages> pp. </pages> <address> 253-267 (Dallas, TX; Winter 1991). </address> <note> Also in ACM Comp. Comm. Rev., 20(5), pp. 119-132 (October 1990). [research.att.com:dist/internet security/kerblimit.usenix.ps] </note>
Reference-contexts: In 1990, 12 years after Needham and Schroeder's paper, and five years after Kerberos' introduction, Bellovin and Merritt of AT&T Bell Labs wrote an important and insightful critique of Kerberos' version 4, which was influential in the design of the current version 5. <ref> [1] </ref> Along with other problems, Bellovin and Mer-ritt pointed out that Kerberos security depends on secure clock-synchronization, and that V4 Kerberos was not itself sufficient to secure a clock-synchronization service.
Reference: [2] <author> M. Bishop, </author> <title> "A Security Analysis of the NTP Protocol," </title> <booktitle> Sixth Annual Computer Security Conference Proceedings, </booktitle> <pages> pp. </pages> <address> 20-29 (Dec. 1990; Tuscon, AZ), [louie.udel.edu:/pub/ntp/doc/security.ps.Z] </address>
Reference-contexts: NTP's security has been extensively analyzed by Matt Bishop. <ref> [2] </ref> Each secure clock update depends on an uninterrupted chain of authentications, server-to-server, between the client and a remote physical clock. To mediate these authentications, NTP requires each host to maintain a shared key in a disk file, but makes no provision to distribute or refresh these keys.
Reference: [3] <author> Michael Burrows, Mart in Abadi, and Roger Needham, </author> <title> "A Logic of Authentication," </title> <journal> Proc. R. Soc. Lond. </journal> <note> A 426(1989) pp. 233-271. </note>
Reference-contexts: As it happens, though, this speed/complexity tradeoff was not the reason Kerberos' designers chose a synchronizing protocol. The 1978 Needham-Schroeder protocol, [14] from which Kerberos descends, used challenge and response to protect authentication credentials from replay. Three years later, Denning and Sacco <ref> [6, 3] </ref> pointed out that the N-S protocol was particularly vulnerable to compromised session-keys, because its key-distribution tickets made no provision for expiration of keys. They recommended that the tickets be timestamped, so that the session-keys would expire and be renewed regularly.
Reference: [4] <author> D. Davis and D. Geer, </author> <title> "Kerberos Security with Clocks Adrift," </title> <booktitle> Proc. 5 th USENIX UNIX Security Symposium, </booktitle> <address> Salt Lake City (June 1995), </address> <pages> pp. 35-40. </pages>
Reference-contexts: re-issue an old challenge N old , then she can replay correspondingly old credentials T old ; fS t ; N old ; L old ; K old g K b , whose session key K old she knows by prior theft. 2 In an earlier version of this article <ref> [4] </ref>, Davis and Geer presented a similar C/R protocol, which exploited Kerberos V5's flexible preauthentication feature [19, 15] for secure synchronization.
Reference: [5] <author> D. Davis, P.R. Fenstermacher, and R. Ihaka, </author> <title> "Cryptographic Randomness from Air Turbulence in Disk Drives," </title> <booktitle> in Advances in Cryptology - CRYPTO '94, </booktitle> <editor> Ed. by Yvo G. Desmedt. </editor> <booktitle> Springer-Verlag Lecture Notes in Comp. Sci. </booktitle> <volume> 839, </volume> <pages> pp. </pages> <month> 114-120 </month> <year> (1994). </year>
Reference-contexts: Bob will send a nonce N b in a challenge-response handshake: B ! AS : B; S t ; N b (1) Bob's nonce N b is a random number, which he can generate from disk-drive randomness <ref> [5] </ref> or from some other noise source [7]. <p> True natural randomness is available on almost every computer, because the computer's disk-speed varies slightly but constantly. This speed variation originates in turbulent air-drag on the disk platters, and is big enough to subtly perturb the timing of disk-accesses. <ref> [5] </ref> The cost of disk-randomness is its low bandwidth and its dependence on characteristics of the operating system, CPU, disk-drive, and controller board.
Reference: [6] <author> D. Denning and G.M. Sacco, </author> <title> "Timestamps in Key Distribution Protocols," </title> <journal> CACM 24(8), </journal> <pages> pp. </pages> <month> 533-536 (August </month> <year> 1981). </year>
Reference-contexts: As it happens, though, this speed/complexity tradeoff was not the reason Kerberos' designers chose a synchronizing protocol. The 1978 Needham-Schroeder protocol, [14] from which Kerberos descends, used challenge and response to protect authentication credentials from replay. Three years later, Denning and Sacco <ref> [6, 3] </ref> pointed out that the N-S protocol was particularly vulnerable to compromised session-keys, because its key-distribution tickets made no provision for expiration of keys. They recommended that the tickets be timestamped, so that the session-keys would expire and be renewed regularly.
Reference: [7] <author> D. Eastlake, S. Crocker, and J. Schiller, </author> <title> Randomness Recommendations for Security, Internet RFC 1750, </title> <month> December </month> <year> 1994. </year>
Reference-contexts: Bob will send a nonce N b in a challenge-response handshake: B ! AS : B; S t ; N b (1) Bob's nonce N b is a random number, which he can generate from disk-drive randomness [5] or from some other noise source <ref> [7] </ref>. The AS returns to Bob a new session-key K bt , the key's times of creation and expiration L = (L create ; L expire ), a ticket T bt = fS t ; L; K bt g K t , and the nonce N b , newly encrypted. <p> On machines with low noise-bandwidth, a background process can accumulate and cache the noise continuously, so as to yield a random nonce on demand, instantly. Another readily-available source of natural randomness is keyboard-timing <ref> [7] </ref>, but this is problematic, too. First, when the Kerberos client software is preparing its first ticket-request, the only keyboard-input it sees is the user's entry of his username; the password doesn't get read until after the KDC reply is received.
Reference: [8] <author> L. Gong, </author> <title> "A Security Risk of Depending on Synchronized Clocks", </title> <journal> ACM Op. Sys. Rev., </journal> <pages> 26(1) pp. </pages> <month> 49-53 </month> <year> (1992). </year> <note> [http://www.csl.sri.com/gong/pub393.html] </note>
Reference-contexts: This blocks a "postdated-timestamp" attack noted by Li Gong <ref> [8] </ref>. Gong points out that if a client's synchronization fails so that his clock runs fast, his accidentally-postdated message can be suppressed and replayed later, when the postdated message becomes current.
Reference: [9] <author> L. Gong, </author> <title> "Variations on the Themes of Message Freshness and Replay," </title> <booktitle> Proc. IEEE Computer Security Foundations Workshop VI, </booktitle> <address> Franconia, </address> <note> NH (June '93) pp. 131-6. [http://www.csl.sri.com/gong/pub393.html] </note>
Reference-contexts: Timestamps from users with slow clocks are indistinguishable from replays, so tolerating slow clocks gives attackers more time in which to work. Synchronization sharply limits this "replay window." The alternatives to timestamping are all variations on "challenge and response." <ref> [9] </ref> In a challenge-response protocol, the credential recipient prevents replay by challenging each sender to encrypt and return a fresh random number, so as to demonstrate timeliness. The sender proves his identity by using his private key, or his session key, to encrypt the random number.
Reference: [10] <author> S.P. Miller, B.C. Neuman, J.I. Schiller, and J.H. Saltzer, </author> <title> Project Athena Technical Plan, Sec. E.2.1: "Kerberos Authentication and Authorization System," (Cambridge, Mass.) M.I.T. Project Athena internal document, </title> <journal> Dec. </journal> <volume> 21, </volume> <year> 1987. </year>
Reference: [11] <author> D.L. Mills, </author> <title> Network Time Protocol (Version 2) Specification and Implementation, Internet Request For Comments 1119 (Sept. </title> <year> 1989). </year>
Reference-contexts: needs to know the difference, or skew, between his clock and the standard clock. [22] Thus, by adding a challenge-response handshake to only the Authentication Service protocol, we can break the circularity of Kerberos' dependence on a secure time-service. 3 Current Time Services NTP is a cryptographically-hardened time service protocol. <ref> [11, 12] </ref> It enables a wide-area network to synchronize its software clocks with a few highly-accurate physical clocks. NTP's security has been extensively analyzed by Matt Bishop. [2] Each secure clock update depends on an uninterrupted chain of authentications, server-to-server, between the client and a remote physical clock.
Reference: [12] <author> D.L. Mills, </author> <title> Internet Time Synchronization: the Network Time Protocol, Internet Request For Comments 1129 (Oct. </title> <year> 1989). </year>
Reference-contexts: needs to know the difference, or skew, between his clock and the standard clock. [22] Thus, by adding a challenge-response handshake to only the Authentication Service protocol, we can break the circularity of Kerberos' dependence on a secure time-service. 3 Current Time Services NTP is a cryptographically-hardened time service protocol. <ref> [11, 12] </ref> It enables a wide-area network to synchronize its software clocks with a few highly-accurate physical clocks. NTP's security has been extensively analyzed by Matt Bishop. [2] Each secure clock update depends on an uninterrupted chain of authentications, server-to-server, between the client and a remote physical clock.
Reference: [13] <author> R. Molva, G. Tsudik, E. Van Herreweghen, and S. Zatti, </author> <title> "KryptoKnight Authentication and Key Distribution System." </title> <publisher> [jerico.usc.edu:pub/gene/kryptoknight.ps.Z] </publisher>
Reference-contexts: 1 Introduction The Kerberos Authentication System [21, 16] provides password security for large networks. Unlike its principal competitors, KryptoKnight <ref> [13] </ref> and SESAME, [18] Kerberos requires that all of a network's system clocks must be synchronized.
Reference: [14] <author> R. M. Needham and M. D. Schroeder, </author> <title> "Using Encryption for Authentication in Large Networks of Computers," </title> <journal> CACM, </journal> <volume> 21(12), </volume> <pages> pp. </pages> <month> 993-999 (December, </month> <year> 1978). </year>
Reference-contexts: Thus, it might seem that Kerberos' designers chose to optimize performance with timestamps and synchronization. As it happens, though, this speed/complexity tradeoff was not the reason Kerberos' designers chose a synchronizing protocol. The 1978 Needham-Schroeder protocol, <ref> [14] </ref> from which Kerberos descends, used challenge and response to protect authentication credentials from replay. Three years later, Denning and Sacco [6, 3] pointed out that the N-S protocol was particularly vulnerable to compromised session-keys, because its key-distribution tickets made no provision for expiration of keys.
Reference: [15] <author> C. Neuman and J. Kohl, </author> <title> The Kerberos Network Authentication Service (V5), Internet RFC 1510, </title> <month> September </month> <year> 1993. </year>
Reference-contexts: ; fS t ; N old ; L old ; K old g K b , whose session key K old she knows by prior theft. 2 In an earlier version of this article [4], Davis and Geer presented a similar C/R protocol, which exploited Kerberos V5's flexible preauthentication feature <ref> [19, 15] </ref> for secure synchronization. <p> However, the Kerberos protocol specification <ref> [15] </ref> warns against using the authtime field in the KDC AP REP message for time synchronization. <p> As in the usual Kerberos protocol, AS learns nothing from this exchange about whether it really was Bob who requested tickets, unless he uses preauthentication data to authenticate his request. <ref> [19, 15] </ref> Note though that when preauthentication is available, it may make our challenge-response unnecessary. Many preauthenti-cation mechanisms, such as smart-card protocols, were originally designed as mutual-authentication schemes in their own right, and do authenticate the server to the client.
Reference: [16] <author> C. Neuman and T. Ts'o, </author> <title> "Kerberos: An Authentication Service for Computer Networks," </title> <journal> IEEE Communications, </journal> <pages> 32(9) pp. </pages> <month> 33-38 (September, </month> <year> 1994). </year>
Reference-contexts: 1 Introduction The Kerberos Authentication System <ref> [21, 16] </ref> provides password security for large networks. Unlike its principal competitors, KryptoKnight [13] and SESAME, [18] Kerberos requires that all of a network's system clocks must be synchronized.
Reference: [17] <author> Open Software Foundation, </author> <title> OSF T M DCE Version 1.0, DCE Administration Guide Volume 1, Module 4: "DCE Distributed Time Service," Rev. 1.0, Update 1.0.1. </title> <address> (Cambridge, MA; July 1992). </address>
Reference-contexts: We do not recommend using secure NTP for synchronizing application services, however. The Open Software Foundation's Distributed Computing Environment (OSF DCE) includes a secure Distributed Time Service, <ref> [17] </ref> whose security is mediated by DCE's Kerberos-based Security Service. For bootstrap, the DCE time service relies on the host's hardware clock chip to be physically secure, battery-powered, and accurate enough to fulfill Kerberos' secure synchronization needs.
Reference: [18] <author> T.A. Parker, </author> <title> "A Secure European System for Applications in a Multi-Vendor Environment (The SESAME Project)," </title> <booktitle> Proc. 14 th Am. Nat'l. Sec. Conf. </booktitle> <year> 1991. </year>
Reference-contexts: 1 Introduction The Kerberos Authentication System [21, 16] provides password security for large networks. Unlike its principal competitors, KryptoKnight [13] and SESAME, <ref> [18] </ref> Kerberos requires that all of a network's system clocks must be synchronized. At first glance, this does not seem to be a great burden, at least for UNIX networks, but as Kerberos' influence has grown, synchronization has become a substantial impediment to Kerberos' adoption as a uniform networking standard.
Reference: [19] <author> J. Pato, </author> <title> Using Pre-Authentication to Avoid Password Guessing Attacks, </title> <address> (Cambridge, Mass.) M.I.T. </address> <note> Project Athena (December 1992). </note>
Reference-contexts: ; fS t ; N old ; L old ; K old g K b , whose session key K old she knows by prior theft. 2 In an earlier version of this article [4], Davis and Geer presented a similar C/R protocol, which exploited Kerberos V5's flexible preauthentication feature <ref> [19, 15] </ref> for secure synchronization. <p> As in the usual Kerberos protocol, AS learns nothing from this exchange about whether it really was Bob who requested tickets, unless he uses preauthentication data to authenticate his request. <ref> [19, 15] </ref> Note though that when preauthentication is available, it may make our challenge-response unnecessary. Many preauthenti-cation mechanisms, such as smart-card protocols, were originally designed as mutual-authentication schemes in their own right, and do authenticate the server to the client.
Reference: [20] <author> J. Pato, </author> <type> personal communication. </type>
Reference-contexts: For bootstrap, the DCE time service relies on the host's hardware clock chip to be physically secure, battery-powered, and accurate enough to fulfill Kerberos' secure synchronization needs. DCE explicitly accepts, just as Kerberos always has, that the clocks must be initialized "out-of-band," i.e., by wristwatch. <ref> [20] </ref> DCE's DTS is designed to interoperate with with NTP, but this interoperation does not address our bootstrap problem. Finally, neither NTP nor DCE's DTS makes any provision for physically-insecure hosts, which cannot hold long-lived keys on disk, and which therefore cannot participate in either protocol.
Reference: [21] <author> J.G. Steiner, C.Neuman, and J.I. Schiller, </author> <title> "Kerberos: An Authentication Service for Open Network Systems", </title> <booktitle> USENIX Winter Conference Proceedings, </booktitle> <month> February </month> <year> 1988. </year> <month> [athena-dist.mit.edu:pub/kerberos/doc/usenix.PS] </month>
Reference-contexts: 1 Introduction The Kerberos Authentication System <ref> [21, 16] </ref> provides password security for large networks. Unlike its principal competitors, KryptoKnight [13] and SESAME, [18] Kerberos requires that all of a network's system clocks must be synchronized. <p> Unfortunately, Denning and Sacco did not discuss the importance and difficulty of securing the time-synchronization process itself. In the mid-80's, MIT's Project Athena incorporated Denning and Sacco's recommendations into their implementation of the Needham-Schroeder protocol, and added other protocols and security features, too. <ref> [21] </ref> 1 Eventually, faster network infrastructure will make extra exchanges transparent to the user, removing this obstacle to mobile synchronization.
Reference: [22] <author> S. Zanarotti, </author> <title> of Dimensional Dynamics, Inc. was the first to use this trick; personal communication. </title>
Reference-contexts: To be able to detect replay, the client only needs to know the difference, or skew, between his clock and the standard clock. <ref> [22] </ref> Thus, by adding a challenge-response handshake to only the Authentication Service protocol, we can break the circularity of Kerberos' dependence on a secure time-service. 3 Current Time Services NTP is a cryptographically-hardened time service protocol. [11, 12] It enables a wide-area network to synchronize its software clocks with a few <p> The trick is particularly necessary for the Mac, whose clock is hard to keep synchronized for a variety of reasons. <ref> [22] </ref> Note that after her initial login with challenge and response, Alice's other security interactions are perfectly standard, and the rest of the Kerberos protocol is unchanged.
References-found: 22

