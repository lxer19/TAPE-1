URL: http://www.cs.utah.edu/~ganesh/w97-uv/summer97/amon-tau.ps
Refering-URL: http://www.cs.utah.edu/~ganesh/w97-uv/summer97/
Root-URL: 
Email: tod@cs.swt.edu gaetano@cs.washington.edu  
Title: Making Complex Timing Relationships Readable: Presburger Formula Simplification using Don't Cares Timing Issues in the
Author: Tod Amon Gaetano Borriello Jiwen Liu 
Keyword: Presburger formulas arise.  
Note: TAU '97: 1997 ACM IEEE International Workshop on  
Address: San Marcos, TX 78666 Seattle, WA 98195  
Affiliation: Department of Computer Science Department of Computer Science and Engineering Southwest Texas State University University of Washington  
Abstract: Solutions to timing relationship analysis problems are often reported using symbolic variables and inequalities which specify linear relationships between the variables. Complex relationships can be expressed using Presburger formulas which allow Boolean relations to be specified between the inequalities. Libraries that manipulate Presburger formulas, such as the Omega libraries [10], often provide solutions that are overly complex. For Presburger formulas to be manipulated efficiently by other tools (e.g., synthesis tools) and/or be readable by humans, they must be simplified. This paper develops and applies a highly effective simplification approach based on logic minimization techniques. The results of our tool are quite promising both in terms of the degree of simplification achieved and in run time and are applicable to other domains where 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Amon and G. Borriello. </author> <title> An approach to symbolic timing verification. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conference (DAC), </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: In more complex cases, the temporal relationships may involve minimums and maximums which often lead to disjoint solution spaces and disjunctions between the linear constraints (e.g., f [X,Y]: X &lt;= 30 or Y &lt;= 30 or X + Y &lt;= 70g) <ref> [1, 14] </ref>. Presburger formulas which consist of affine constraints over integer variables, the logical connectives :, ^, _, and the quantifiers 8 and 9, can be used to specify these types of relationships.
Reference: [2] <author> T. Amon, G. Borriello, D. Hu, and J. Liu. </author> <title> Symbolic timing verification of timing diagrams using presburger formulas. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conference (DAC), </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: Some of the more recent uses have arisen because new software that can efficiently manipulate Presburger formulas has been developed (i.e., the Omega libraries [5, 6, 10, 11]). We have recently been using this software to perform symbolic timing verification of timing diagrams <ref> [2] </ref>. The promise of symbolic timing verification is that it can be used to derive constraints to be imposed on synthesis tools and/or enable the abstraction of complex timing relationships. Working with symbolic variables can also help humans understand and validate formal specifications of timing behavior. <p> The problem description takes the form of a set of integer n-tuples where n is the number of symbolic variables. Within the formula we quantify variables which represent times at which signal transitions take place and use inequalities to express all of the temporal relationships (see <ref> [2] </ref> for details). We use the Omega libraries to remove the quantifications (using Fourier-Motzkin variable elimination) to obtain a description of the requirements that the symbolic variables must meet in order for the constraints to always be satisfied.
Reference: [3] <author> Tevfik Bultan, Richard Gerber, and William Pugh. </author> <title> Symbolic model checking of infinite state programs using presburger arithmetic. </title> <type> Technical Report UMIACS-TR-96-66, </type> <institution> University of Maryland, </institution> <month> September </month> <year> 1996. </year>
Reference-contexts: Although Presburger formulas have not been widely used due to complexity concerns, they have been effectively used for problems such as dependence analysis for advanced compiler optimizations [9], model checking of infinite state programs <ref> [3] </ref>, and mechanical verification in theorem provers [4]. Some of the more recent uses have arisen because new software that can efficiently manipulate Presburger formulas has been developed (i.e., the Omega libraries [5, 6, 10, 11]).
Reference: [4] <author> D. C. Cooper. </author> <title> Programs for mechanical program verification. </title> <booktitle> In Machine Intelligence 6, </booktitle> <year> 1971. </year>
Reference-contexts: Although Presburger formulas have not been widely used due to complexity concerns, they have been effectively used for problems such as dependence analysis for advanced compiler optimizations [9], model checking of infinite state programs [3], and mechanical verification in theorem provers <ref> [4] </ref>. Some of the more recent uses have arisen because new software that can efficiently manipulate Presburger formulas has been developed (i.e., the Omega libraries [5, 6, 10, 11]). We have recently been using this software to perform symbolic timing verification of timing diagrams [2].
Reference: [5] <author> Wayne Kelly and William Pugh. </author> <title> Determining schedules based on performance estimation. In Parallel Processing Letters, </title> <month> September </month> <year> 1994. </year>
Reference-contexts: Some of the more recent uses have arisen because new software that can efficiently manipulate Presburger formulas has been developed (i.e., the Omega libraries <ref> [5, 6, 10, 11] </ref>). We have recently been using this software to perform symbolic timing verification of timing diagrams [2]. The promise of symbolic timing verification is that it can be used to derive constraints to be imposed on synthesis tools and/or enable the abstraction of complex timing relationships.
Reference: [6] <author> Wayne Kelly and William Pugh. </author> <title> Finding legal reordering transformations using mappings. </title> <booktitle> In Seventh International Workshop on Languages and Compilers for Parallel Computing, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: Some of the more recent uses have arisen because new software that can efficiently manipulate Presburger formulas has been developed (i.e., the Omega libraries <ref> [5, 6, 10, 11] </ref>). We have recently been using this software to perform symbolic timing verification of timing diagrams [2]. The promise of symbolic timing verification is that it can be used to derive constraints to be imposed on synthesis tools and/or enable the abstraction of complex timing relationships.
Reference: [7] <author> K. L. McMillan and D. L. Dill. </author> <title> Algorithms for interface timing verification. </title> <booktitle> In Proc. International Conf. Computer Design (ICCD), </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: Graph algorithms have been effectively applied to determine the satisfiability (the ranges of allowable values for each variable) of these systems of inequalities <ref> [7, 13] </ref>. In more complex cases, the temporal relationships may involve minimums and maximums which often lead to disjoint solution spaces and disjunctions between the linear constraints (e.g., f [X,Y]: X &lt;= 30 or Y &lt;= 30 or X + Y &lt;= 70g) [1, 14].
Reference: [8] <author> Derek Oppen. </author> <title> A 2 2 2 pn upper bound on the complexity of presburger arithmetic. </title> <journal> In Journal of Computer and System Sciences, </journal> <month> July </month> <year> 1978. </year>
Reference-contexts: Symbolic solutions can assist designers in evaluating tradeoffs and make it easier to validate and understand their formal specifications. 5 Conclusions The best known upper bound on the performance of an algorithm for verifying Presburger formulas is O (2 2 2 n ) <ref> [8] </ref> and Omega may have an even larger upper bound. For this reason, Presburger formulas have not been used very much for timing analysis.
Reference: [9] <author> William Pugh. </author> <title> A practical algorithm for exact array dependence analysis. </title> <journal> Communications of the ACM, </journal> <volume> 35(8), </volume> <month> August </month> <year> 1992. </year>
Reference-contexts: Although Presburger formulas have not been widely used due to complexity concerns, they have been effectively used for problems such as dependence analysis for advanced compiler optimizations <ref> [9] </ref>, model checking of infinite state programs [3], and mechanical verification in theorem provers [4]. Some of the more recent uses have arisen because new software that can efficiently manipulate Presburger formulas has been developed (i.e., the Omega libraries [5, 6, 10, 11]).
Reference: [10] <author> William Pugh et al. </author> <title> The omega project. </title> <note> In URL: http://www.cs.umd.edu/projects/omega. </note>
Reference-contexts: Some of the more recent uses have arisen because new software that can efficiently manipulate Presburger formulas has been developed (i.e., the Omega libraries <ref> [5, 6, 10, 11] </ref>). We have recently been using this software to perform symbolic timing verification of timing diagrams [2]. The promise of symbolic timing verification is that it can be used to derive constraints to be imposed on synthesis tools and/or enable the abstraction of complex timing relationships. <p> Our simplification methodology will quite likely be of great benefit in other application areas as well, both for users of Omega (i.e., as of February 1994 over 400 researchers had obtained copies of the Omega software libraries <ref> [10] </ref>) and for other users of Presburger formulas (many theorem provers contain algorithms for analyzing Presburger formulas). Our tools need to be further refined in addition to being made more efficient.
Reference: [11] <author> William Pugh and David Wonnacott. </author> <title> An exact method for the analysis of value-based array data dependences. </title> <booktitle> In Proc. 6th Workshop on Programming Languages and Compilers for Parallel Computing, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: Some of the more recent uses have arisen because new software that can efficiently manipulate Presburger formulas has been developed (i.e., the Omega libraries <ref> [5, 6, 10, 11] </ref>). We have recently been using this software to perform symbolic timing verification of timing diagrams [2]. The promise of symbolic timing verification is that it can be used to derive constraints to be imposed on synthesis tools and/or enable the abstraction of complex timing relationships.
Reference: [12] <author> E. M. Sentovich et al. </author> <title> SIS: A system for sequential circuit synthesis. </title> <type> Technical Report UCB/ERL M92/41, </type> <institution> UC Berkeley, </institution> <month> May </month> <year> 1992. </year> <note> see http://www-cad.eecs.berkeley.edu/Software/. </note>
Reference-contexts: The response time constraint was added after the diagrams were composed. but also factored forms that tend to be more readable because the number of literals is minimized. In this section, we describe the mapping and don't care extraction steps in detail and refer readers to <ref> [12] </ref> for more information on logic minimization. 3.1 Mapping The purpose of mapping is to attach a name to each inequality present in the Presburger formula. <p> simplification methodology based upon iteratively increasing the maximum don't care level until a reasonable solution is found or compute times grow to be too large. 3.3 Logic Minimization We have two tools we use to move between mapped Presburger formulas and SIS, a logic optimization tool developed at UC Berkeley <ref> [12] </ref>. Our tool eqnextract takes a mapped Presburger formula as input and produces a .eqn file for use by SIS. Our tool eqninsert takes a .eqn file and a mapped Presburger formula and replaces the formula with that specified by the .eqn file.
Reference: [13] <author> P. Vanbekbergen, G. Goossens, and H. De Man. </author> <title> Specification and analysis of timing constraints in signal transition graphs. </title> <booktitle> In European Design Automation Conference, </booktitle> <month> March </month> <year> 1992. </year>
Reference-contexts: Graph algorithms have been effectively applied to determine the satisfiability (the ranges of allowable values for each variable) of these systems of inequalities <ref> [7, 13] </ref>. In more complex cases, the temporal relationships may involve minimums and maximums which often lead to disjoint solution spaces and disjunctions between the linear constraints (e.g., f [X,Y]: X &lt;= 30 or Y &lt;= 30 or X + Y &lt;= 70g) [1, 14].
Reference: [14] <author> E. Walkup and G. Borriello. </author> <title> Interface timing verification with application to synthesis. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conference (DAC), </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: In more complex cases, the temporal relationships may involve minimums and maximums which often lead to disjoint solution spaces and disjunctions between the linear constraints (e.g., f [X,Y]: X &lt;= 30 or Y &lt;= 30 or X + Y &lt;= 70g) <ref> [1, 14] </ref>. Presburger formulas which consist of affine constraints over integer variables, the logical connectives :, ^, _, and the quantifiers 8 and 9, can be used to specify these types of relationships.
Reference: [15] <author> Elizabeth A. Walkup. </author> <title> Optimization of Linear Max-Plus Systems with Application to Timing Analysis. </title> <type> Ph.D. thesis, </type> <institution> University of Washington, </institution> <year> 1995. </year> <month> 10 </month>
Reference-contexts: Omega always presents solutions as unions of sets containing no disjuncts (i.e., in sum of products form). 3 2.2 Interface Verification Example This second example is taken from <ref> [15] </ref> which contains two specifications for a memory controller and a bus. Here, we consider only the read protocol and the combined specification as shown in help us to select another memory controller.
References-found: 15

