URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P372.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts93.htm
Root-URL: http://www.mcs.anl.gov
Email: lusk@mcs.anl.gov  mudambi@ecrc.de  overbeek@mcs.anl.gov  szeredi@iqsoft.hu  
Title: Applications of the Aurora Parallel Prolog System to Computational Molecular Biology  
Author: Ewing Lusk U. S. A. Shyam Mudambi Ross Overbeek U. S. A. Peter Szeredi Teleki Blanka u. -. 
Address: Argonne, IL 60439  Arabellastr. 17 D-81925, Munich Germany  Argonne, IL 60439  H-1142 Budapest  
Affiliation: Argonne National Laboratory  ECRC GmbH  Argonne National Laboratory  IQSOFT  Hungary  
Abstract: We describe an investigation into the use of the Aurora parallel Prolog system in two applications within the area of computational molecular biology. The computational requirements were large, due to the nature of the applications, and were carried out on a scalable parallel computer, the BBN "Butterfly" TC-2000. Results include both a demonstration that logic programming can be effective in the context of demanding applications on large-scale parallel machines, and some insights into parallel programming in Prolog. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Bairoch. PROSITE: </author> <title> a dictionary of sites and patterns in proteins. </title> <journal> Nucleic Acids Res. </journal> <volume> 19 </volume> <pages> 2241-2245(1991). </pages>
Reference-contexts: Amos Bairoch <ref> [1] </ref> has created a remarkable set of patterns that identify functionally significant sections of protein sequences.
Reference: [2] <author> Anthony Beaumont, S Muthu Raman, Peter Szeredi, and David H D Warren. </author> <title> Flexible Scheduling of Or-Parallelism in Aurora: The Bris-tol Scheduler. </title> <booktitle> In PARLE91: Conference on Parallel Architectures and Languages Europe, </booktitle> <pages> pages 403-420. </pages> <publisher> Springer Verlag, </publisher> <month> June </month> <year> 1991. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol 506. </volume>
Reference-contexts: Later research showed that this type of scheduling is rather inefficient for finer grain granularity problems <ref> [2] </ref>. In our problem, topmost scheduling is forced on the system by the shape of the search tree, irrespectively of the scheduling strategy of the underlying system 2 . <p> Several workers may cooperate in this process, thus sharing the work through public backtracking rather then the more expensive means of "major task switching" as described in <ref> [2] </ref>. The third row of Table 4 shows the effect of bottom-to-top exploration 2 We actually used the Bristol scheduler with bottommost scheduling. technique applied to the original database of proteins.
Reference: [3] <author> Ralph Butler, Terry Disz, Ewing Lusk, Robert Olson, Ross Overbeek, and Rick Stevens. </author> <title> Scheduling OR-parallelism: an Argonne perspective. </title> <booktitle> In Proceedings of the Fifth International Conference on Logic Programming, </booktitle> <pages> pages 1590-1605, </pages> <publisher> MIT Press, </publisher> <month> August </month> <year> 1988. </year>
Reference-contexts: only a few procedure calls long) and the workers will be getting in each other's way, causing considerable synchronization overheads. (a) (b) The exploration of the search space is thus done by descending from top to bottom, an approach analogous to the topmost scheduling strategy of early parallel Prolog implementations <ref> [3, 4] </ref>. Later research showed that this type of scheduling is rather inefficient for finer grain granularity problems [2]. In our problem, topmost scheduling is forced on the system by the shape of the search tree, irrespectively of the scheduling strategy of the underlying system 2 .
Reference: [4] <author> Alan Calderwood and Peter Szeredi. </author> <title> Scheduling or-parallelism in Aurora the Manchester scheduler. </title> <booktitle> In Proceedings of the Sixth International Conference on Logic Programming, </booktitle> <pages> pages 419-435, </pages> <publisher> MIT Press, </publisher> <month> June </month> <year> 1989. </year>
Reference-contexts: only a few procedure calls long) and the workers will be getting in each other's way, causing considerable synchronization overheads. (a) (b) The exploration of the search space is thus done by descending from top to bottom, an approach analogous to the topmost scheduling strategy of early parallel Prolog implementations <ref> [3, 4] </ref>. Later research showed that this type of scheduling is rather inefficient for finer grain granularity problems [2]. In our problem, topmost scheduling is forced on the system by the shape of the search tree, irrespectively of the scheduling strategy of the underlying system 2 .
Reference: [5] <author> Mats Carlsson, Ewing L. Lusk, and Peter Szeredi. </author> <title> Smoothing rough edges in Aurora (Extended Abstract). </title> <booktitle> In Proceedings of the First COMPULOG-NOE Area Meeting on Parallelism and Implementation Technology. </booktitle> <institution> Technical University of Madrid, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: It supports the full Prolog language, including all the normal intrinsics of SICStus Prolog, a full-featured system. Certain enhancements for advanced synchronization mechanisms, modifications to the top-level interpreter, and parallel I/O, have been described in <ref> [5] </ref>. Here we mention two recently-added features that were used in the present work. 3.1 Aurora on NUMA Machines Aurora was developed on the Sequent Symmetry, which has a true shared-memory architecture. Such architectures provide a convenient programming model, but are inherently non-scalable.
Reference: [6] <author> Virginia Herrarte and Ewing Lusk. </author> <title> Studying parallel program behavior with Upshot. </title> <type> Technical Report ANL-91/15. </type> <institution> Argonne National Laboratory, </institution> <year> 1991. </year>
Reference-contexts: All of these tools provide post-mortem analysis of log files created during the run. Two of the tools have been used in tuning the applications presented here. They are upshot, which allows detailed analysis of events on a relatively small number of processes <ref> [6] </ref>, and gsx, which is better suited to providing summary information on runs involving large numbers of processes. Other Aurora tools are visandor and must. An example snapshot of an upshot session is shown in Figure 1.
Reference: [7] <author> Wen-Hsiung Li and Dan Graur. </author> <title> Fundamentals of Molecular Evolution. </title> <publisher> Sinauer and Associates, </publisher> <year> 1991. </year>
Reference-contexts: Although these could certainly be unified, it is true that the types of patterns one searches for in DNA are quite distinct from those used for proteins. For a general introduction to genetic sequences, see <ref> [7] </ref>. 4.1 Searching DNA for Pseudo-knots DNA sequences are represented as strings composed from the characters fA,C,G,Tg, each one of which represents a nucleotide. For example, an interesting piece of DNA might well be represented by TCAGCCTATTCG....
Reference: [8] <author> Ewing Lusk, Ralph Butler, Terence Disz, Robert Olson, Ross Overbeek, Rick Stevens, D.H.D. Warren, Alan Calderwood, Peter Szeredi, Seif Haridi, Per Brand, Mats Carlsson, Andrzej Ciepielewski, and Bogumi l Hausman. </author> <title> The Aurora or-parallel Prolog system. New Generation Computing, </title> <address> 7(2,3):243-271, </address> <year> 1990. </year>
Reference-contexts: 1 Introduction Aurora <ref> [8] </ref> is an OR-parallel implementation of full Prolog. The system is nearing maturity, and we are beginning to use it for application work.
Reference: [9] <author> Shyam Mudambi. </author> <title> Performance of Aurora on NUMA machines. </title> <editor> In Koichi Furukawa, editor, </editor> <booktitle> Logic Programming: Proceedings of the Eighth International Conference on Logic Programming, </booktitle> <pages> pages 793-806, </pages> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: Such architectures provide a convenient programming model, but are inherently non-scalable. For that reason, the Symmetry is limited by its bus bandwidth to about 30 processors, and previously-published Aurora results were similarly limited. Recent work by Shyam Mudambi, continuing that reported in <ref> [9] </ref>, has resulted in a port of Aurora to the BBN TC-2000, a current scalable architecture with Motorola 88000 processors. The results here were carried out on the machine at Argonne National Laboratory, where 42 processors at a time can be scheduled. <p> This has been done in the Butterfly version of Aurora by a combination of duplicating read-only global data and allocating WAM stack space locally. Details can be found in <ref> [9] </ref>. The three-level memory hierarchy of the BBN also affects the interface to foreign subroutines, critical in the applications described here. In particular, it was necessary to change the original design of the C interface, which put dynamically-linked code in shared memory.
Reference: [10] <author> David Searls. </author> <title> Investigating the Linguistics of DNA with Definite Clause Grammars. </title> <editor> In Ewing L. Lusk and Ross A. Overbeek, editors, </editor> <booktitle> Logic Programming: Proceedings of the 1989 North American Conference, </booktitle> <pages> pages 189-208, </pages> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: We have implemented a language (based on the work of David Searls <ref> [10] </ref>) for expressing such patterns and for rapidly scanning DNA strings for matches. For a search to be well-specified, one has to express limits on the sizes of all substrings and fillers, as well as a level of tolerance when looking for complements.
References-found: 10

