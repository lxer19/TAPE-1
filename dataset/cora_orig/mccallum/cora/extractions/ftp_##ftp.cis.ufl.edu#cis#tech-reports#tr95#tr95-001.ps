URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr95/tr95-001.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr95-abstracts.html
Root-URL: http://www.cis.ufl.edu
Email: ted@cis.ufl.edu  
Title: Analysis of the Request Patterns to the NSSDC On-line Archive  
Author: Theodore Johnson 
Address: Greenbelt MD 20771 Gainesville, Fl 32611-2024  
Affiliation: Code 630 Dept. of CIS NASA Goddard Space Flight Center University of Florida  
Abstract: NASA missions, both for earth science and for space science, collect huge amounts of data, and the rate at which data is being gathered is increasing. For example, the EOSDIS project is expected to collect petabytes per year. In addition, these archives are being made available to remote users over the Internet. The ability to manage the growth of the size and request activity of scientific archives depends on an understanding of the of the access patterns of scientific users. The National Space Science Data Center (NSSDC) of NASA Goddard Space Flight Center has run their on-line mass storage archive of space data, the National Data Archive and Distribution Service (NDADS), since November 1991. A large world-wide space research community makes use of NSSDC, requesting more than 20,000 files per month. Since the initiation of their service, they have maintained log files which record all accesses the archive. In this report, we present an analysis of the NDADS log files. We analyze the log files, and discuss several issues, including caching, reference patterns, clustering, and system loading.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E.R. Arnold and M.E. Nelson. </author> <title> Automatic Unix backup in a mass storage environment. </title> <booktitle> In Usenix Winter 1988, </booktitle> <pages> pages 131-136, </pages> <year> 1988. </year>
Reference-contexts: In [10], they analyze file migration activity. They find a bursty reference pattern, both in system load and in references to a file. Additional studies have been made by Jensen and Reed [5], Strange [14], Arnold and Nelson <ref> [1] </ref>, Ewing and Peskin [3], Henderson and Poston [4], Tarshish and Salmon [15], and by Thanhardt and Harano [16].
Reference: [2] <author> P.J. Denning and D.R. Sluts. </author> <title> Generalized working sets for segment reference strings. </title> <journal> Communications of the ACM, </journal> <volume> 21(9) </volume> <pages> 750-759, </pages> <year> 1978. </year>
Reference-contexts: If one wants to minimize the number of cache misses, then it is much better to choose large files than small files for replacement, because removing large files frees up more space. The optimal replacement algorithm for variable size objects, with respect to cache misses, is the GOPT algorithm <ref> [2] </ref>: Let F be the set of cached files, and for file f 2 F , let N f be the time until the next reference to f and let S f be the size of f .
Reference: [3] <author> C.W. Ewing and A.M. Peskin. </author> <title> The masstor mass storage product at brookhaven national laboratory. </title> <booktitle> Computer, </booktitle> <pages> pages 57-66, </pages> <year> 1982. </year>
Reference-contexts: In [10], they analyze file migration activity. They find a bursty reference pattern, both in system load and in references to a file. Additional studies have been made by Jensen and Reed [5], Strange [14], Arnold and Nelson [1], Ewing and Peskin <ref> [3] </ref>, Henderson and Poston [4], Tarshish and Salmon [15], and by Thanhardt and Harano [16].
Reference: [4] <author> R.L. Henderson and A. Poston. MSS II and RASH: </author> <title> A mainframe unix based mass storage system with a rapid access storage heirarch file mamangement system. </title> <booktitle> In USENIX Winter 1989, </booktitle> <pages> pages 65-84, </pages> <year> 1989. </year>
Reference-contexts: In [10], they analyze file migration activity. They find a bursty reference pattern, both in system load and in references to a file. Additional studies have been made by Jensen and Reed [5], Strange [14], Arnold and Nelson [1], Ewing and Peskin [3], Henderson and Poston <ref> [4] </ref>, Tarshish and Salmon [15], and by Thanhardt and Harano [16].
Reference: [5] <author> D.W. Jensen and D.A. Reed. </author> <title> File archive activity in a supercomputing environment. </title> <type> Technical Report UIUCDCS-R-91-1672, </type> <institution> University of Illinois at Urbana-Chanpaign, </institution> <year> 1991. </year>
Reference-contexts: In [10], they analyze file migration activity. They find a bursty reference pattern, both in system load and in references to a file. Additional studies have been made by Jensen and Reed <ref> [5] </ref>, Strange [14], Arnold and Nelson [1], Ewing and Peskin [3], Henderson and Poston [4], Tarshish and Salmon [15], and by Thanhardt and Harano [16].
Reference: [6] <author> T. Johnson and D. Shasha. </author> <title> 2Q: a low overhead high performance buffer management replacement algorithm. </title> <booktitle> In Proc. of the 20th Int'l Conf. on Very Large Databases, </booktitle> <pages> pages 439-450, </pages> <year> 1994. </year>
Reference-contexts: A large body of caching literature exists when all cached objects are of the same size. The Least Recently Used (LRU) replacement algorithm is widely recognized as having good performance in practice, although statistical algorithms with better performance have been proposed recently <ref> [6, 11] </ref>. Caching objects of widely varying sizes is somewhat more complicated, and has not received the same amount of attention.
Reference: [7] <author> D.H. Lawrie, J.M. Randal, and R.R. Barton. </author> <title> Experiments with automatic file migration. </title> <booktitle> Computer, </booktitle> <pages> pages 45-55, </pages> <year> 1982. </year>
Reference-contexts: Finally, we present an analysis of the system load. Several studies on the reference patterns to mass storage systems have been published. Smith [12] analyzes file migration patterns in hierarchical storage management system. This analysis was used to design several HSM caching algorithms [13]. Lawrie, Randal, and Burton <ref> [7] </ref> compare the performance of several file caching algorithms. Miller and Katz 1 This work was performed while Theodore Johnson was an ASEE Summer Faculty Fellow at GSFC.
Reference: [8] <author> E. Miller, </author> <year> 1994. </year> <title> Provate communication. </title> <note> Thanks also to comp.arch.storage. </note>
Reference-contexts: While STWS can be implemented, it also requires a great deal of computation. For this reason, STWS is often approximated by what we call the STbin algorithm <ref> [8] </ref>: A file is put into a bin based on its size. The files in a bin are sorted in a list using LRU. To choose a file for replacement, look at the file at the tail of each bin and compute its P f fl S f product.
Reference: [9] <author> E.L. Miller and R.H. Katz. </author> <title> Analyzing the i/o behavior of supercomputing applications. </title> <booktitle> In Supercomputing '91, </booktitle> <pages> pages 557-577, </pages> <year> 1991. </year>
Reference-contexts: Miller and Katz 1 This work was performed while Theodore Johnson was an ASEE Summer Faculty Fellow at GSFC. This research is partially supported by grant from NASA through USRA, #5555-19 have made two studies on the I/O pattern of supercomputer applications. In <ref> [9] </ref>, they find that much of the I/O activity in a supercomputer system is due to checkpointing, and thus is very bursty. They make the observation that much of the data that is written is never subsequently read, or is only read once. In [10], they analyze file migration activity.
Reference: [10] <author> E.L. Miller and R.H. Katz. </author> <title> An analysis of file migration in a unix supercomputing environment. </title> <booktitle> In USENIX Winter 1988, </booktitle> <year> 1993. </year>
Reference-contexts: In [9], they find that much of the I/O activity in a supercomputer system is due to checkpointing, and thus is very bursty. They make the observation that much of the data that is written is never subsequently read, or is only read once. In <ref> [10] </ref>, they analyze file migration activity. They find a bursty reference pattern, both in system load and in references to a file.
Reference: [11] <author> E.J. O'Neil, P.E. O'Neil, and G. Weikum. </author> <title> The lru-k page replacement algorithm for database disk buffering. </title> <booktitle> In Proceedings of the 1993 ACM Sigmod International Conference on Management of Data, </booktitle> <pages> pages 297-306, </pages> <year> 1993. </year>
Reference-contexts: A large body of caching literature exists when all cached objects are of the same size. The Least Recently Used (LRU) replacement algorithm is widely recognized as having good performance in practice, although statistical algorithms with better performance have been proposed recently <ref> [6, 11] </ref>. Caching objects of widely varying sizes is somewhat more complicated, and has not received the same amount of attention.
Reference: [12] <author> A.J. Smith. </author> <title> Analysis of long-term reference patterns for application to file migration algorithms. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> SE-7(4):403-417, </volume> <year> 1981. </year>
Reference-contexts: We show that the request for a file are bursty, and that user requests are bursty. Finally, we present an analysis of the system load. Several studies on the reference patterns to mass storage systems have been published. Smith <ref> [12] </ref> analyzes file migration patterns in hierarchical storage management system. This analysis was used to design several HSM caching algorithms [13]. Lawrie, Randal, and Burton [7] compare the performance of several file caching algorithms.
Reference: [13] <author> A.J. Smith. </author> <title> Long term file migration: Development and evaluation of algorithms. </title> <journal> Communications of the ACM, </journal> <volume> 24(8) </volume> <pages> 521-532, </pages> <year> 1981. </year>
Reference-contexts: Finally, we present an analysis of the system load. Several studies on the reference patterns to mass storage systems have been published. Smith [12] analyzes file migration patterns in hierarchical storage management system. This analysis was used to design several HSM caching algorithms <ref> [13] </ref>. Lawrie, Randal, and Burton [7] compare the performance of several file caching algorithms. Miller and Katz 1 This work was performed while Theodore Johnson was an ASEE Summer Faculty Fellow at GSFC. <p> Choose for replacement the f 0 2 F whose product N f 0 fl S f 0 is the largest. The GOPT algorithm cannot be implemented (because it requires knowledge of future events), but it can be approximated. The Space-Time Working Set (STWS) algorithm <ref> [13] </ref> approximates GOPT be substituting P f , the time since the last reference to f , for N f . While STWS can be implemented, it also requires a great deal of computation.
Reference: [14] <author> S. </author> <title> Strange. Analysis of long-term unix file access patterns for application to automatic file migration strategies. </title> <type> Technical Report UCB/CSD 92/700, </type> <institution> University of California, Berkeley, </institution> <year> 1992. </year>
Reference-contexts: In [10], they analyze file migration activity. They find a bursty reference pattern, both in system load and in references to a file. Additional studies have been made by Jensen and Reed [5], Strange <ref> [14] </ref>, Arnold and Nelson [1], Ewing and Peskin [3], Henderson and Poston [4], Tarshish and Salmon [15], and by Thanhardt and Harano [16].
Reference: [15] <author> A. Tarshish and E. Salmon. </author> <title> The growth of the UniTree mass storage system at the NASA Center for the Computational Sciences. </title> <booktitle> In Third NASA Goddard Conf. on Mass Storage Systems and Technologies, </booktitle> <pages> pages 179-185, </pages> <year> 1993. </year>
Reference-contexts: They find a bursty reference pattern, both in system load and in references to a file. Additional studies have been made by Jensen and Reed [5], Strange [14], Arnold and Nelson [1], Ewing and Peskin [3], Henderson and Poston [4], Tarshish and Salmon <ref> [15] </ref>, and by Thanhardt and Harano [16].
Reference: [16] <author> E. Thanhardt and G. Harano. </author> <title> File migration in the ncar mass storage system. </title> <booktitle> In Mass Storage Systems Symposium, </booktitle> <pages> pages 114-121, </pages> <year> 1988. </year>
Reference-contexts: They find a bursty reference pattern, both in system load and in references to a file. Additional studies have been made by Jensen and Reed [5], Strange [14], Arnold and Nelson [1], Ewing and Peskin [3], Henderson and Poston [4], Tarshish and Salmon [15], and by Thanhardt and Harano <ref> [16] </ref>. However, all of these studies apply to supercomputer environments, which can be expected to have access patterns different from those of a scientific archive. 1.1 Log Files The National Space Science Data Center is the primary archive for all space data collected by NASA.
References-found: 16

