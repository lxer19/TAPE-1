URL: ftp://ftp.cs.dartmouth.edu/TR/TR94-220.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/reports/abstracts/TR94-220/
Root-URL: http://www.cs.dartmouth.edu
Email: dfk,songbac,sriram@cs.dartmouth.edu  
Author: David Kotz, Song Bac Toh, and Sriram Radhakrishnan 
Date: July 18, 1994  
Address: Hanover, NH 03755-3510  
Affiliation: Department of Computer Science Dartmouth College  
Pubnum: Dartmouth PCS-TR94-220  
Abstract: Available at URL ftp://ftp.cs.dartmouth.edu/pub/CS-techreports/TR94-220.ps.Z A Detailed Simulation Model of the HP 97560 Disk Drive Abstract We implemented a detailed model of the HP 97560 disk drive, to replicate a model devised by Ruemmler and Wilkes (both of Hewlett-Packard, HP). Our model simulates one or more disk drives attached to one or more SCSI buses. The design is broken into three components: a test driver, the disk model itself, and the discrete-event simulation support. Thus, the disk model can be easily extracted and used in other simulation environments. We validated our model using traces obtained from HP, using the same "demerit" measure as Ruemmler and Wilkes. We obtained a demerit percentage of 3.9%, indicating that our model was extremely accurate. This paper describes our implementation, and is meant for those wishing to use our model, see our validation, or understand our code. 
Abstract-found: 1
Intro-found: 1
Reference: [BDCW91] <author> Eric A. Brewer, Chrysanthos N. Dellarocas, Adrian Colbrook, and William E. Weihl. Proteus: </author> <title> A high-performance parallel-architecture simulator. </title> <type> Technical Report MIT/LCS/TR-516, </type> <institution> MIT, </institution> <month> September </month> <year> 1991. </year>
Reference-contexts: Thus, the disk model can be easily extracted and used in other simulation environments. We have used it in a stand-alone mode (which uses a small discrete-event support module that we built) and incorporated it into a larger simulation embedded in the Proteus parallel-architecture simulator <ref> [BDCW91] </ref>. This paper does not describe any new results; it is meant as documentation of our model, its implementation, and its validation. There are three sections in the paper, oriented to readers with This document corresponds to version 2.0 of the disk-model software. <p> to sleep and wake up the caller's thread. queue.c: a simple queue used for tracking those disks that wish to use the bus. heap.c: a priority queue (heap) used to schedule events chronologically. modularize.c: a few miscellaneous functions We have also integrated the disk model into the Proteus parallel-architecture simulator <ref> [BDCW91] </ref>, where we simulate a parallel file system involving many disks and buses [Kot94]. 4 Validation To validate our model, we used a trace-driven simulation, choosing trace data from the same set of disk traces used by Ruemmler and Wilkes in their study. 1 In particular, we chose the "snake" traces
Reference: [HP91] <institution> Hewlett Packard. </institution> <note> HP97556/58/60 5.25-inch SCSI Disk Drives Technical Reference Manual, second edition, </note> <month> June </month> <year> 1991. </year> <title> HP Part number 5960-0115. </title>
Reference-contexts: our understanding of how the HP 97560 works, then some details about our code, and then some support mechanisms needed by the code. 3.1 Our understanding of the HP 97560 Our model was based on the paper by Ruemmler and Wilkes [RW94] and on the manual for the disk drive <ref> [HP91] </ref>. <p> We guessed this parameter. * Disk requests on the bus are 10 bytes, derived from <ref> [HP91] </ref>. John Wilkes thinks they used 50 bytes. * "Done messages" on the bus are 1 bytes. * Controller overhead (for both read and write) is 2.2 msec, after [RW94], though longer than that in [HP91]. * We assume that read-ahead can be aborted in the middle of a sector transfer, <p> We guessed this parameter. * Disk requests on the bus are 10 bytes, derived from <ref> [HP91] </ref>. John Wilkes thinks they used 50 bytes. * "Done messages" on the bus are 1 bytes. * Controller overhead (for both read and write) is 2.2 msec, after [RW94], though longer than that in [HP91]. * We assume that read-ahead can be aborted in the middle of a sector transfer, which is documented in [HP91]. * The 97560 does not have segmented cache, command queueing, or multiple zones. * We ignore thermal recalibrations. 3.2 Structure of the code The main part of the code is <p> used 50 bytes. * "Done messages" on the bus are 1 bytes. * Controller overhead (for both read and write) is 2.2 msec, after [RW94], though longer than that in <ref> [HP91] </ref>. * We assume that read-ahead can be aborted in the middle of a sector transfer, which is documented in [HP91]. * The 97560 does not have segmented cache, command queueing, or multiple zones. * We ignore thermal recalibrations. 3.2 Structure of the code The main part of the code is in the DiskDevice module, spread over four files: diskdevice.h: the interface to the module diskdevices.h: included only by the diskdevice*.c <p> Our interface assumes that all writes may be immediate-reported, and provides a separate DiskDeviceSync command that simply waits for any outstanding I/O. This interface is consistent with the SCSI interface <ref> [HP91] </ref>. If a synchronous write is desired, the pair DiskDeviceTransfer and DiskDeviceSync accomplish the same thing with no additional overhead. The Controller becomes more complex when immediate-reported writes are considered.
Reference: [Kot94] <author> David Kotz. </author> <title> Disk-directed I/O for MIMD multiprocessors. </title> <booktitle> In Operating Systems Design and Implementation, </booktitle> <month> June </month> <year> 1994. </year> <note> Submitted extended abstract. </note>
Reference-contexts: for tracking those disks that wish to use the bus. heap.c: a priority queue (heap) used to schedule events chronologically. modularize.c: a few miscellaneous functions We have also integrated the disk model into the Proteus parallel-architecture simulator [BDCW91], where we simulate a parallel file system involving many disks and buses <ref> [Kot94] </ref>. 4 Validation To validate our model, we used a trace-driven simulation, choosing trace data from the same set of disk traces used by Ruemmler and Wilkes in their study. 1 In particular, we chose the "snake" traces from 4/25/92 through 4/30/92, disk numbers 5 and 6.
Reference: [RW94] <author> Chris Ruemmler and John Wilkes. </author> <title> An introduction to disk drive modeling. </title> <journal> IEEE Computer, </journal> <volume> 27(3) </volume> <pages> 17-28, </pages> <month> March </month> <year> 1994. </year> <title> 12 0 0.2 0.4 0.6 0.8 1 CDF Access time (msec) Cumulative-distribution function (CDF) of access times Modeled disk Real disk the original disks. There were 664,995 accesses. The overall demerit percentage was 3.89%. 0 0.2 0.4 0.6 0.8 1 CDF Access time (msec) Cumulative-distribution function (CDF) of access times Modeled disk Real disk 13 </title>
Reference-contexts: 1 Introduction A recent paper by Ruemmler and Wilkes <ref> [RW94] </ref> describes the HP 97560 disk drive in detail, their model of the disk, and general techniques for modeling disks. We implemented our own version of the model. Our model simulates one or more disk drives attached to one or more SCSI buses. <p> the disk. 3 Implementation In this section, we describe our understanding of how the HP 97560 works, then some details about our code, and then some support mechanisms needed by the code. 3.1 Our understanding of the HP 97560 Our model was based on the paper by Ruemmler and Wilkes <ref> [RW94] </ref> and on the manual for the disk drive [HP91]. <p> We guessed this parameter. * Disk requests on the bus are 10 bytes, derived from [HP91]. John Wilkes thinks they used 50 bytes. * "Done messages" on the bus are 1 bytes. * Controller overhead (for both read and write) is 2.2 msec, after <ref> [RW94] </ref>, though longer than that in [HP91]. * We assume that read-ahead can be aborted in the middle of a sector transfer, which is documented in [HP91]. * The 97560 does not have segmented cache, command queueing, or multiple zones. * We ignore thermal recalibrations. 3.2 Structure of the code The <p> Our access-time distribution curve was visibly close, but the demerit figure was poor. The curves in <ref> [RW94] </ref> end at 50 msec. After consulting with Chris Ruemmler, we discovered that he had filtered the traces to exclude these "long" requests, assuming that they were due to thermal recalibration, something they (and we) did not model. Indeed, these events are rare (t 1% of all events). <p> From the trace we also had the set of real access times on the same requests. Our mean access time was 12.434 msec, with a demerit figure of 0.484, and a demerit percentage of 3.89% (see <ref> [RW94] </ref> for a definition of these measures). Figure 3 shows the distributions; Figure 4 shows the same distributions on a 0 to 50 msec scale, for comparison with [RW94]. <p> Our mean access time was 12.434 msec, with a demerit figure of 0.484, and a demerit percentage of 3.89% (see <ref> [RW94] </ref> for a definition of these measures). Figure 3 shows the distributions; Figure 4 shows the same distributions on a 0 to 50 msec scale, for comparison with [RW94]. We also used a set of microbenchmarks, based on regular access patterns (reading and writing sequentially, reading increasingly large blocks but always starting from sector 0, etc.). Plots of these access times (not shown) allowed us to "check" our model against the intuition. <p> Acknowledgements Song Bac Toh, an undergraduate, wrote most of the code for the disk model, and Sriram Radhakr-ishnan, another undergraduate, wrote most of the code for trace-driven validation of the model. Many thanks to John Wilkes, Chris Ruemmler, and HP for the wonderful paper <ref> [RW94] </ref>, trace data, and answers to our many questions.
References-found: 4

