URL: http://www.cs.rutgers.edu/~davison/pubs/hci97.ps
Refering-URL: http://www.cs.rutgers.edu/~davison/pubs/hci97.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Toward An Adaptive Command Line Interface  
Author: Brian D. Davison and Haym Hirsh 
Address: New Jersey New Brunswick, New Jersey 08903, USA  
Affiliation: Department of Computer Science, Rutgers, The State University of  
Abstract: This paper explores different mechanisms for predicting the next command to be used for the UNIX command-line shell. We have collected command histories from 77 people, and have calculated the predictive accuracy for each of five methods over this dataset. The algorithm with the best performance has an average online predictive accuracy of up to 45%. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Brian D. Davison and Haym Hirsh. </author> <title> Experiments in UNIX command prediction. </title> <type> Technical Report ML-TR-41, </type> <institution> Department of Computer Science, Rutgers University, </institution> <year> 1997. </year>
Reference-contexts: undergraduate data was collected over two months on computer systems dedicated to their programming projects, and not their primary systems, and so the patterns of commands selected may reflect the orientation of their use (i.e., editing and compilation rather than email). 1 An expanded version of this paper is available <ref> [1] </ref>. 2 We collected data unobtrusively, by causing the UNIX shell at its closing to record the command history in a time-stamped file. This method was used to minimize potential interference with the user's activities.
Reference: 2. <author> Kenichi Yoshida and Hiroshi Motoda. </author> <title> Automated user modeling for intelligent interface. </title> <journal> International Journal of Human-Computer Interaction, </journal> <volume> 8(3) </volume> <pages> 237-258, </pages> <year> 1996. </year>
Reference-contexts: This paper 1 discusses how the data was collected and how a sampling of algorithms performs on it. There has been a range of work developing systems that recognize regularities in the usage of a computer. Yoshida and Motoda's <ref> [2] </ref> investigation of the use of machine learning to predict a user's next command is the most similar to the work reported here, but uses a different estimation of performance, different algorithms, and has a very small dataset. <p> The data for this domain is inherently sequential, and thus it is inappropriate to use cross-validation and similar evaluation methods that effectively take a random sample of commands from a user's history and use them to predict the remaining commands. Yoshida and Motoda <ref> [2] </ref> evaluate their ability to predict the last third of commands using the first two-thirds, 2 but this could worsen predictive accuracy on the last third if users' behaviors are a "moving target", changing over time. Further, this eliminates two-thirds of the data from use in computing predictive accuracy.
Reference: 3. <author> Allen Cypher, </author> <title> editor. Watch What I Do: Programming by Demonstration. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1993. </year>
Reference-contexts: Yoshida and Motoda's [2] investigation of the use of machine learning to predict a user's next command is the most similar to the work reported here, but uses a different estimation of performance, different algorithms, and has a very small dataset. Also similar is work in programming by demonstration <ref> [3] </ref>, such as Cypher's Eager [4], which recognizes and automates simple repetitions in user actions in a graphical interface. Finally, Lesh and Etzioni [5] also consider UNIX commands in plan recognition. 2. Approach and Methodology We captured command histories from 77 people at Rutgers University.
Reference: 4. <author> Allen Cypher. Eager: </author> <title> Programming repetitive tasks by demonstration. </title> <booktitle> In Cypher [3], </booktitle> <pages> pages 204-217. </pages>
Reference-contexts: Also similar is work in programming by demonstration [3], such as Cypher's Eager <ref> [4] </ref>, which recognizes and automates simple repetitions in user actions in a graphical interface. Finally, Lesh and Etzioni [5] also consider UNIX commands in plan recognition. 2. Approach and Methodology We captured command histories from 77 people at Rutgers University.
Reference: 5. <author> Neal Lesh and Oren Etzioni. </author> <title> A sound and fast goal recognizer. </title> <booktitle> In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1995. </year>
Reference-contexts: Also similar is work in programming by demonstration [3], such as Cypher's Eager [4], which recognizes and automates simple repetitions in user actions in a graphical interface. Finally, Lesh and Etzioni <ref> [5] </ref> also consider UNIX commands in plan recognition. 2. Approach and Methodology We captured command histories from 77 people at Rutgers University. Two of these were faculty (including the second author), five were graduate students (including the first author), and the rest were undergraduates in an Internet programming course.
Reference: 6. <author> J. Ross Quinlan. C4.5: </author> <title> Programs for Machine Learning. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference-contexts: This method was used to minimize potential interference with the user's activities. This paper describes the application of a total of five methods to this data: * C4.5 <ref> [6] </ref> is a well-used decision-tree learner developed in the machine-learning community, with demonstrated excellent performance over a wide variety of problems.
Reference: 7. <author> Haym Hirsh and Brian D. Davison. </author> <title> An adaptive UNIX command-line assistant. </title> <booktitle> In Proceedings of the First International Conference on Autonomous Agents. </booktitle> <publisher> ACM Press, </publisher> <year> 1997. </year> <title> 3 The modifications to tcsh that formed our prototype were implemented by Mark Limotte. </title>
Reference-contexts: Learning is performed by the decision-tree learner C4.5. This prototype is described further elsewhere <ref> [7] </ref>. While this initial version of ilash incorporates a strong learner, C4.5, it does make other tradeoffs. Decision trees are not created or updated online | a new decision tree must be built explicitly by the user, commonly just once a day.
References-found: 7

