URL: http://www.cs.berkeley.edu/~lorch/papers/pcyc-winet.ps
Refering-URL: http://www.cs.berkeley.edu/~lorch/papers/
Root-URL: 
Title: Scheduling Techniques for Reducing Processor Energy Use in MacOS  
Author: Jacob R. Lorch and Alan Jay Smith 
Address: Berkeley, CA 94720-1776  
Affiliation: Computer Science Division, EECS Department, UC Berkeley  
Abstract: The CPU is one of the major power consumers in a portable computer, and considerable power can be saved by turning off the CPU when it is not doing useful work. In Apple's MacOS, however, idle time is often converted to busy waiting, and generally it is very hard to tell when no useful computation is occurring. In this paper, we suggest several heuristic techniques for identifying this condition, and for temporarily putting the CPU in a low-power state. These techniques include turning off the processor when all processes are blocked, turning off the processor when processes appear to be busy waiting, and extending real time process sleep periods. We use trace-driven simulation, using processor run interval traces, to evaluate the potential energy savings and performance impact. We find that these techniques save considerable amounts of processor energy (as much as 66%), while having very little performance impact (less than 2% increase in run time). Implementing the proposed strategies should increase battery lifetime by approximately 20% relative to Apple's current CPU power management strategy, since the CPU and associated logic are responsible for about 32% of power use; similar techniques should be applicable to operating systems with similar behavior. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Apple Computer, Inc. </author> <title> Inside Macintosh, Volume VI, </title> <publisher> Addison Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <year> 1991. </year>
Reference: [2] <author> Conger, J. </author> <title> Windows API Bible, </title> <publisher> Waite Group Press, </publisher> <address> Corte Madera, CA, </address> <year> 1992. </year>
Reference-contexts: However, it makes no attempt to police processes that make unfair processor time requests; in fact, one recognized problem with its power management is that if a single process requests events using PeekMessage rather than GetMessage or WaitMessage, then processor power management cannot take place <ref> [2, 11] </ref>. This problem is exactly the sort that the greediness technique was designed to alleviate, so we may find that, as we demonstrated for the MacOS, the effective-ness of the basic strategy is greatly improved by the use of such a technique.
Reference: [3] <author> F. Douglis, , P. Krishnan, and B. Marsh. </author> <title> Thwarting the power-hungry disk, </title> <booktitle> in Proceedings of the 1994 Winter USENIX Conference, </booktitle> <address> San Francisco, CA, </address> <year> 1994, </year> <pages> pp. 293-306. </pages>
Reference-contexts: In this way, the goal of processor power management strategies is similar to that of hard disks <ref> [3, 7] </ref>. Some strategies for making these predictions are described by Srivastava et al. [15] Unlike disks, however, the delay and energy cost for a modern microprocessor to enter and return from a low-power mode are typically low.
Reference: [4] <author> S. Gary, C. Dietz, J. Eno, G. Gerosa, S. Park, and H. Sanchez. </author> <title> The PowerPC T M 603 microprocessor: a low-power design for portable applications, </title> <booktitle> in Proceedings of the IEEE International Computer Society Conference, </booktitle> <address> San Francisco, CA, </address> <year> 1994, </year> <pages> pp. 307-315. </pages>
Reference-contexts: For instance, the AT&T Hobbit and certain versions of the MC68030 and MC68040 use static logic so that most of their state can be retained when the clock is shut down [15]. Also, the PowerPC 603 can exit the low-power Doze mode in about ten system clocks <ref> [4] </ref>. Because of the short delay and low energy cost for entering and leaving a low-power state, the optimal CPU power management strategy is trivial: turn off the CPU whenever there is no useful work to do.
Reference: [5] <author> R. Jain. </author> <title> The Art of Computer Systems Performance Analysis: Techniques for Experimental Design, Measurement, Simulation, and Modeling, </title> <publisher> John Wiley & Sons, Inc., </publisher> <address> New York, NY, </address> <year> 1991. </year>
Reference-contexts: We used the ANOVA technique described in [6] for a within-subjects design, checking the results with the statistically equivalent paired observation technique described in <ref> [5] </ref>. The comparisons we performed were those we considered the most meaningful comparisons between pairs of strategies, namely differences in energy savings between strategy C and each other strategy, between B and BI, between BI and BIS, between BI and BIG, and between BIS and BIG.
Reference: [6] <author> G. Keppel and S. Zedeck. </author> <title> Data Analysis for Research Designs: Analysis of Variance and Multiple Regression/Correlation Approaches, </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> New York, NY, </address> <year> 1989. </year>
Reference-contexts: Therefore, we have attempted to perform a statistical analysis of the results, even though we recognize that any failure to detect a significant difference between treatments would be a poor indication that such differences are solely due to chance factors. We used the ANOVA technique described in <ref> [6] </ref> for a within-subjects design, checking the results with the statistically equivalent paired observation technique described in [5].
Reference: [7] <author> K. Li, R. Kumpf, P. Horton, and T. Anderson. </author> <title> A quantitative analysis of disk drive power management in portable computers, </title> <booktitle> in Proceedings of the 1994 Winter USENIX Conference, </booktitle> <year> 1994, </year> <pages> pp. 279-291. </pages>
Reference-contexts: In this way, the goal of processor power management strategies is similar to that of hard disks <ref> [3, 7] </ref>. Some strategies for making these predictions are described by Srivastava et al. [15] Unlike disks, however, the delay and energy cost for a modern microprocessor to enter and return from a low-power mode are typically low.
Reference: [8] <author> J. Lorch. </author> <title> Modeling the effect of different processor cycling techniques on power consumption, </title> <type> report 179, </type> <institution> Performance Evaluation Group, ATG Integrated Systems, Apple Computer, Inc., Cupertino, </institution> <address> CA, </address> <year> 1995. </year>
Reference-contexts: One might wonder why MacOS uses this inactivity timer based strategy instead of the basic strategy. One reason is that all but the most recent Macintosh computers have high over-head associated with turning off and on the processor <ref> [8] </ref>, making the basic strategy less applicable. In older processors, for example, the contents of on-chip caches were lost when the processor was powered down. <p> The first tool, IdleTracer, collects traces of events needed to simulate the different strategies, and is discussed in more detail in <ref> [8] </ref>. <p> Table 1 indicates data about the traces obtained from each user and the machines on which those traces were collected. Much more detailed discussion of the traces and their collection appears in <ref> [8] </ref>. Most results we present will concern the aggregate workload, i.e. the trace composed of the concatenation of all six of these traces. 4 Results In this section, we refer to the Current MacOS strategy as strategy C and the Basic strategy as strategy B.
Reference: [9] <author> J. Lorch. </author> <title> A Complete Picture of the Energy Consumption of a Portable Computer, </title> <type> Masters Thesis, </type> <institution> Computer Science, University of California at Berkeley, </institution> <year> 1995. </year>
Reference-contexts: High power consumption in portable computers is even more undesirable as users of such machines want them to last as long as possible on a single battery charge. For these reasons, much work has been done in reducing the power consumption of computers. In <ref> [9] </ref> and [10], we analyzed the power consumption of various Macintosh PowerBook computers, in typical use by fl This material is based upon work supported by a National Science Foundation Graduate Research Fellowship, by Apple Computer, and also in part by the National Science Foundation under grants MIP-9116578 and CCR-9117028, the <p> To illustrate how percent time in low-power mode would translate into overall power savings, let us consider an example based on estimates of power consumption from previous work <ref> [9, 10] </ref>. In this example, based on the Duo 280c, turning off the processor saves 3.74 W, while the components that remain on consume, on average, 5.65 W, given current power management techniques. <p> It is unclear how much more or less effective these methods would be for some other workload; for instance, a previous study with a different workload <ref> [9, 10] </ref> found that 48.1% of processor power was saved by the current MacOS strategy. Even within the workload studied here, we have seen that the savings from each strategy varies greatly from one user to another.
Reference: [10] <author> J. Lorch and A. J. Smith. </author> <title> How energy is consumed and saved in portable computers, </title> <note> in preparation, </note> <year> 1996. </year>
Reference-contexts: High power consumption in portable computers is even more undesirable as users of such machines want them to last as long as possible on a single battery charge. For these reasons, much work has been done in reducing the power consumption of computers. In [9] and <ref> [10] </ref>, we analyzed the power consumption of various Macintosh PowerBook computers, in typical use by fl This material is based upon work supported by a National Science Foundation Graduate Research Fellowship, by Apple Computer, and also in part by the National Science Foundation under grants MIP-9116578 and CCR-9117028, the State of <p> To illustrate how percent time in low-power mode would translate into overall power savings, let us consider an example based on estimates of power consumption from previous work <ref> [9, 10] </ref>. In this example, based on the Duo 280c, turning off the processor saves 3.74 W, while the components that remain on consume, on average, 5.65 W, given current power management techniques. <p> It is unclear how much more or less effective these methods would be for some other workload; for instance, a previous study with a different workload <ref> [9, 10] </ref> found that 48.1% of processor power was saved by the current MacOS strategy. Even within the workload studied here, we have seen that the savings from each strategy varies greatly from one user to another.
Reference: [11] <author> M. Pietrek. </author> <title> Windows Internals, </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1993. </year>
Reference-contexts: However, it makes no attempt to police processes that make unfair processor time requests; in fact, one recognized problem with its power management is that if a single process requests events using PeekMessage rather than GetMessage or WaitMessage, then processor power management cannot take place <ref> [2, 11] </ref>. This problem is exactly the sort that the greediness technique was designed to alleviate, so we may find that, as we demonstrated for the MacOS, the effective-ness of the basic strategy is greatly improved by the use of such a technique.
Reference: [12] <author> D. D. Redell, Y. K. Dalal, T. R. Horsley, H. C. Lauer, W. C. Lynch, P. R. McJones, H. G. Murray, and S. C. Purcell. </author> <title> Pilot: an operating system for a personal computer, </title> <journal> Communications of the ACM, </journal> <month> 23:2 </month> <year> (1980) </year> <month> 81-92. </month>
Reference-contexts: Unfortunately, in Apple's MacOS, processes can run or be scheduled to run even when they have no useful work to do. This feature is partially by design, since in a single-user system there is less need for the operating system to act as an arbiter of resource use <ref> [12] </ref>. Partially, it is because the OS was not written with power management in mind.
Reference: [13] <author> D. M. Ritchie and K. Thompson. </author> <title> The UNIX time-sharing system, </title> <journal> Communications of the ACM, </journal> <month> 17:7 </month> <year> (1974) </year> <month> 265-275. </month>
Reference: [14] <author> P. Sohn. SETC: </author> <title> A System Event Tracer and Counter, Performance Evaluation Group, </title> <institution> ATG Integrated Systems, Apple Computer, Inc., Cupertino, </institution> <address> CA, </address> <year> 1994. </year>
Reference-contexts: Also, IdleTracer shuts off processor power management while it is tracing, so that the traces it uses are not confounded by the current strategy and thus can be used to simulate any strategy. IdleTracer makes use of the SETC <ref> [14] </ref> module, a set of routines for tracing and counting system events. The second tool, ItmSim, simulates power management methods using the current MacOS inactivity-threshold strategy, and provides a basis for comparison.
Reference: [15] <author> M. B. Srivastava, A. P. Chandrakasan, and R. W. Broder-son. </author> <title> Predictive system shutdown and other architectural techniques for energy efficient programmable computation, IEEE Transactions on Very Large Scale Integration (VLSI) Systems, </title> <month> 4:1 </month> <year> (1996) </year> <month> 42-55. </month>
Reference-contexts: In this way, the goal of processor power management strategies is similar to that of hard disks [3, 7]. Some strategies for making these predictions are described by Srivastava et al. <ref> [15] </ref> Unlike disks, however, the delay and energy cost for a modern microprocessor to enter and return from a low-power mode are typically low. <p> For instance, the AT&T Hobbit and certain versions of the MC68030 and MC68040 use static logic so that most of their state can be retained when the clock is shut down <ref> [15] </ref>. Also, the PowerPC 603 can exit the low-power Doze mode in about ten system clocks [4]. <p> Because of the short delay and low energy cost for entering and leaving a low-power state, the optimal CPU power management strategy is trivial: turn off the CPU whenever there is no useful work to do. An opportunity for such a strategy is described by Srivastava et al. <ref> [15] </ref>, who point out that the process scheduling of modern window-based operating systems is event-driven, i.e. that the responsibility of processes in such systems is to process events such as mouse clicks when they occur and then to block until another such event is ready.
Reference: [16] <author> B. Suessmith and G. Paap, III. </author> <title> PowerPC 603 microprocessor power management, </title> <journal> Communications of the ACM, </journal> <month> 37:6 </month> <year> (1994), </year> <pages> 43-46. </pages>
Reference-contexts: An essentially equivalent version of this strategy, namely to establish a virtual lowest-priority process whose job is to turn off the processor when it runs, is recommended by Suessmith and Paap <ref> [16] </ref> for the PowerPC 603, and by Suzuki and Uno [17] in a 1993 patent.
Reference: [17] <author> N. Suzuki and S. Uno. </author> <title> Information ProcessingSystem Having Power Saving Control of the Processor Clock, </title> <institution> United States Patent #5,189,647, </institution> <year> 1993. </year>
Reference-contexts: An essentially equivalent version of this strategy, namely to establish a virtual lowest-priority process whose job is to turn off the processor when it runs, is recommended by Suessmith and Paap [16] for the PowerPC 603, and by Suzuki and Uno <ref> [17] </ref> in a 1993 patent.
References-found: 17

