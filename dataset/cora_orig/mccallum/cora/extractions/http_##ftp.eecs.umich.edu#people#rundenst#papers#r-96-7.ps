URL: http://ftp.eecs.umich.edu/people/rundenst/papers/r-96-7.ps
Refering-URL: http://ftp.eecs.umich.edu/people/rundenst/papers/
Root-URL: http://www.eecs.umich.edu
Email: e-mail: [ywh jning rundenst] @eecs.umich.edu  
Title: Evaluation of Hierarchical Path Finding Techniques for ITS Route Guidance  
Author: Yun-Wu Huang^, Ning Jing*, and Elke A. Rundensteiner^ 
Address: Ann Arbor, MI 48109  Changsha, Hunan, P.R. China  
Affiliation: (^)Department of Electrical Engineering and Computer Science University of Michigan,  (*)Department of Electrical Engineering Changsha Institute of Technology,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Huang, Y. W., Jing, N. and Rundensteiner, E., </author> <title> A Semi-Materialized View Approach for Route Maintenance in Intelligent Vehicle Highway Systems, </title> <booktitle> The Second ACM Workshop on Geographic Information Systems, </booktitle> <address> Washington, D.C., </address> <month> Nov. </month> <year> 1994, </year> <pages> pp. 144 -- 151. </pages>
Reference-contexts: INTRODUCTION Centralized ITS route guidance relies on the Traffic Management Center (TMC) to conduct path search and to communicate with vehicles on the road. While advantages such as lower cost per vehicle and the possibility of global optimization may be achieved <ref> [1] </ref>, the centralized architecture imposes a stringent time constraint on path computation. If such technology is widely adopted, the total number of path finding requests received by the TMC may amount to a huge collection of computation tasks, culminating during rush hours. <p> As a result, some requests may fail to complete in time. An alternative solution to the centralized path finding is to precompute the shortest paths of all O-D pairs <ref> [1] </ref>. Upon receiving a path finding request, the TMC needs only to look up the requested path from the precomputed path structure. However, due to the dynamic nature of the traffic, the shortest path for each O-D pair varies from time to time. <p> The formation of the hierarchical fragment is very sensitive to the update of the underlying base relation, and is recommended for stable graphs. It is less suitable for dynamic changing graphs like the ITS networks. In <ref> [1] </ref>, we have studied the applicability of the flat path encoding structure to ITS applications. While promising, this then prompted the hierarchical improvement presented in this paper.
Reference: [2] <author> Huang, Y. W., Jing, N. and Rundensteiner, E., </author> <title> Hierarchical Path Views: A Model Based on Fragmentation and Transportation Road Types, </title> <institution> University of Michigan, ITS Research Center for Excellence, </institution> <type> Technical Report, </type> <year> 1995. </year>
Reference-contexts: Thus the precomputed path structure needs to be updated frequently based on current traffic measurement and possibly traffic prediction information. The current known path algorithms for all-pair shortest path computation for ITS networks require <ref> [2] </ref> time complexity with n the number of nodes. For large ITS networks (several ten thousand nodes), such complexity demands a long computation time, making frequent updates of the path structure infeasible. <p> For large ITS networks (several ten thousand nodes), such complexity demands a long computation time, making frequent updates of the path structure infeasible. In addition, because there are possibly shortest paths in the precomputed path structure, the size of the structure also increases quadratically for larger networks. In <ref> [2] </ref>, we proposed a hierarchical path structure based on ITS network road-type classification. <p> Precomputing of all-pair shortest paths is performed for each subnetwork of all levels. This paper is an extension of <ref> [2] </ref> in the following ways: First, in [2] we only experimented with maps up to 3,600 nodes. In this paper, we focus on and experiment with much larger maps that are up to roughly 30,000 nodes, including a real map of the Detroit City of 28,628 nodes. <p> Precomputing of all-pair shortest paths is performed for each subnetwork of all levels. This paper is an extension of <ref> [2] </ref> in the following ways: First, in [2] we only experimented with maps up to 3,600 nodes. In this paper, we focus on and experiment with much larger maps that are up to roughly 30,000 nodes, including a real map of the Detroit City of 28,628 nodes. <p> To our knowledge, this is the first attempt in experimenting with maps of such sizes using path precomputing techniques. Furthermore, in <ref> [2] </ref>, experiments were only conducted for hierarchical path structures up to 2 levels. In this paper, we also go beyond the 2-level hierarchy and conduct extensive experiments on up to 3-level path structures on both the Detroit map and synthetic grid maps. <p> For shortest path computation, AGG is the minimum function and CON is the add function. A complete description and analysis of the TCD algorithm can be found in <ref> [2, 8] </ref>. Because the path structure needs to reflect the most current traffic condition, it needs to be updated frequently. To recompute the affected path structure using the TCD algorithm requires a fixed CPU time independent of the number of changed links.
Reference: [3] <author> Dijkstra, E. W., </author> <title> A Note on Two Problems in Connection with Graphs, Numerische Mathematik,Mar. </title> <booktitle> 1959, </booktitle> <pages> pp. 269 -- 271. </pages>
Reference-contexts: Otherwise, the induction process will repeated for level-k+2. HIERARCHICAL PATH STRUCTURE ALGORITHMS Creating and Updating the Path Structure We have proposed the Two-Color Dijkstra (TCD) algorithm which optimizes the Dijkstra algorithm <ref> [3] </ref> for ITS networks by coloring nodes of the graph either GREEN or RED.
Reference: [4] <author> Carr, B., </author> <title> Graphs and Networks, </title> <publisher> Clarendon Press, Oxford, </publisher> <address> England, </address> <year> 1979. </year>
Reference-contexts: The single-source shortest path for a GREEN node can be trivially determined by applying AGG and CON operations, where CON stands for concatenation and AGG stands for aggregation. AGG and CON are path operators in the path algebra developed by Carre <ref> [4] </ref>, and refined by Rosenthal et al. [5], Agrawal et al. [6], and Ioannidis et al. [7]. For shortest path computation, AGG is the minimum function and CON is the add function. A complete description and analysis of the TCD algorithm can be found in [2, 8].
Reference: [5] <author> Rosenthal, A., Heiler, S., Dayal, U., and Manola, F., </author> <title> Traversal Recursion: A Practical Approach to Supporting Recursive Applications, </title> <booktitle> Proc. ACM-SIGMOD 1986, </booktitle> <pages> pp. 166 -- 176. </pages>
Reference-contexts: The single-source shortest path for a GREEN node can be trivially determined by applying AGG and CON operations, where CON stands for concatenation and AGG stands for aggregation. AGG and CON are path operators in the path algebra developed by Carre [4], and refined by Rosenthal et al. <ref> [5] </ref>, Agrawal et al. [6], and Ioannidis et al. [7]. For shortest path computation, AGG is the minimum function and CON is the add function. A complete description and analysis of the TCD algorithm can be found in [2, 8].
Reference: [6] <author> Agrawal, R., Dar, S., and Jagadish, H. V., </author> <title> Direct Transitive Closure Algorithms: Design and Performance Evaluation, </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 15, No. 3, </volume> <month> Sept. </month> <year> 1990, </year> <pages> pp. 427 -- 458. </pages>
Reference-contexts: AGG and CON are path operators in the path algebra developed by Carre [4], and refined by Rosenthal et al. [5], Agrawal et al. <ref> [6] </ref>, and Ioannidis et al. [7]. For shortest path computation, AGG is the minimum function and CON is the add function. A complete description and analysis of the TCD algorithm can be found in [2, 8].
Reference: [7] <author> Ioannidis, Y., Ramakrishnan R., and Winger, L., </author> <title> Transitive Closure Algorithms Based on Graph Traversal, </title> <journal> ACM Trans. on Database Systems, </journal> <volume> Vol. 18, No. 3, </volume> <month> Sept. </month> <year> 1993, </year> <pages> pp. 512 -- 576. </pages>
Reference-contexts: AGG and CON are path operators in the path algebra developed by Carre [4], and refined by Rosenthal et al. [5], Agrawal et al. [6], and Ioannidis et al. <ref> [7] </ref>. For shortest path computation, AGG is the minimum function and CON is the add function. A complete description and analysis of the TCD algorithm can be found in [2, 8]. Because the path structure needs to reflect the most current traffic condition, it needs to be updated frequently.
Reference: [8] <author> Huang, Y. W., Jing, N. and Rundensteiner, E., </author> <title> Hierarchical Path Views: A Model Based on Fragmentation and Transportation Road Types, </title> <booktitle> The Third ACM Workshop on Geographic Information Systems, </booktitle> <address> Washington, D.C., </address> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: For shortest path computation, AGG is the minimum function and CON is the add function. A complete description and analysis of the TCD algorithm can be found in <ref> [2, 8] </ref>. Because the path structure needs to reflect the most current traffic condition, it needs to be updated frequently. To recompute the affected path structure using the TCD algorithm requires a fixed CPU time independent of the number of changed links.
Reference: [9] <author> Shekar, S., Kohli, A. and Coyle, M., </author> <title> Path Computation Algorithms for Advanced Traveller Information Systems, </title> <booktitle> IEEE 9th Int. Conf. on Data Engineering, </booktitle> <year> 1993, </year> <pages> pp. 31 -- 39. </pages>
Reference-contexts: Path Search Time We run experiments to compare path search efficiency between different approaches. We choose a popular estimation function based on the Euclidean O-D distance times the minimum link weight per link for the HHPR algorithm we introduced earlier, the , and hierarchical algorithms <ref> [9] </ref>. We randomly selected 1,000 long paths (The long paths are longer than 2/3 length of the longest path) and conducted path search for all approaches. Our path search returns the shortest path weight between the source and destination. <p> Hierarchical Path Inaccuracy Rate The last experiment compares the Path Inaccuracy Rate (PIR) between the HHPR search algorithm under our hierarchical path structure and the hierarchical algorithm proposed by others for ITS path finding <ref> [9] </ref>. 8 We derive the discrepancy ratio and call it PIR.
Reference: [10] <author> Yang, T. A., Shekhar, S., Hamidzadeh, B. and Hancock, P. A., </author> <title> Path Planning and Evaluation in IVHS Databases, </title> <address> VNIS, </address> <year> 1991, </year> <pages> pp. 283 -- 290. </pages>
Reference-contexts: This comes at the cost of deploying additional resources in maintaining and storing the partial path information, as characterized by our earlier experiments. These results also prove our assumption that high-speed roads are generally preferred for inter-regional traffic. RELATED RESEARCH Yang et al. <ref> [10] </ref> described an ITS path finding system based on ITS road type hierarchy. Their path search is based on the algorithm that traverses the 2-level hierarchy. Path precomputation is not deployed in their system.
Reference: [11] <author> Hustma, M. A. W., Apers, P. M. G., and Ceri S., </author> <title> Complex Transitive Closure Queries on a Fragmented Graph, </title> <booktitle> Proc. of the 3rd Int. Conf. on Data Theory, Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990, </year> <pages> pp. 470 -- 484. </pages>
Reference-contexts: RELATED RESEARCH Yang et al. [10] described an ITS path finding system based on ITS road type hierarchy. Their path search is based on the algorithm that traverses the 2-level hierarchy. Path precomputation is not deployed in their system. Hustma et al. <ref> [11, 12] </ref> proposed a distributed and parallel transitive closure computation that divides a relation into fragments. This approach prefers the fragmentation graph of the fragmented relation to be acyclic, making it less applicable for ITS graphs which are typically strongly connected. [13] extended [11, 12] with the introduction of the notion <p> Hustma et al. <ref> [11, 12] </ref> proposed a distributed and parallel transitive closure computation that divides a relation into fragments. This approach prefers the fragmentation graph of the fragmented relation to be acyclic, making it less applicable for ITS graphs which are typically strongly connected. [13] extended [11, 12] with the introduction of the notion of a hierarchical fragment (i.e., the super-graph). The formation of the hierarchical fragment is very sensitive to the update of the underlying base relation, and is recommended for stable graphs. It is less suitable for dynamic changing graphs like the ITS networks.
Reference: [12] <author> Hustma, M. A. W., Apers, P. M. G., and Ceri S., </author> <title> Distributed Transitive Closure Computations: The Disconnection Set Approach, </title> <booktitle> Proc. of the 16th VLDB, </booktitle> <year> 1990, </year> <pages> pp. 335 -- 346. </pages>
Reference-contexts: RELATED RESEARCH Yang et al. [10] described an ITS path finding system based on ITS road type hierarchy. Their path search is based on the algorithm that traverses the 2-level hierarchy. Path precomputation is not deployed in their system. Hustma et al. <ref> [11, 12] </ref> proposed a distributed and parallel transitive closure computation that divides a relation into fragments. This approach prefers the fragmentation graph of the fragmented relation to be acyclic, making it less applicable for ITS graphs which are typically strongly connected. [13] extended [11, 12] with the introduction of the notion <p> Hustma et al. <ref> [11, 12] </ref> proposed a distributed and parallel transitive closure computation that divides a relation into fragments. This approach prefers the fragmentation graph of the fragmented relation to be acyclic, making it less applicable for ITS graphs which are typically strongly connected. [13] extended [11, 12] with the introduction of the notion of a hierarchical fragment (i.e., the super-graph). The formation of the hierarchical fragment is very sensitive to the update of the underlying base relation, and is recommended for stable graphs. It is less suitable for dynamic changing graphs like the ITS networks.
Reference: [13] <author> Hustma, M. A. W., Cacace, F., and Ceri S., </author> <title> Parallel Hierarchical Evaluation of Transitive Closure Queries, </title> <booktitle> 1st Int. Conf. on Parallel and Distributed Inf. Sys., </booktitle> <year> 1990, </year> <pages> pp. 130 -- 137. </pages>
Reference-contexts: Hustma et al. [11, 12] proposed a distributed and parallel transitive closure computation that divides a relation into fragments. This approach prefers the fragmentation graph of the fragmented relation to be acyclic, making it less applicable for ITS graphs which are typically strongly connected. <ref> [13] </ref> extended [11, 12] with the introduction of the notion of a hierarchical fragment (i.e., the super-graph). The formation of the hierarchical fragment is very sensitive to the update of the underlying base relation, and is recommended for stable graphs.
Reference: [14] <author> Jing, N., Huang, Y.W. and Rundensteiner, E., </author> <title> Shortest Path Queries: An Optimal Hierarchical Graph Model and Evaluation, </title> <institution> University of Michigan, ITS Research Center for Excellence, </institution> <type> Technical Report, </type> <month> July </month> <year> 1995. </year>
Reference-contexts: It is less suitable for dynamic changing graphs like the ITS networks. In [1], we have studied the applicability of the flat path encoding structure to ITS applications. While promising, this then prompted the hierarchical improvement presented in this paper. In a separate research effort <ref> [14] </ref>, we have introduced an optimal hierarchical approach of encoded paths, which does not rely on the type classification of the links for the hierarchical graph decomposition.
References-found: 14

