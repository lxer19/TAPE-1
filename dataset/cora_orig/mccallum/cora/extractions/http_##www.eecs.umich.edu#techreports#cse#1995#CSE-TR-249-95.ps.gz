URL: http://www.eecs.umich.edu/techreports/cse/1995/CSE-TR-249-95.ps.gz
Refering-URL: http://www.eecs.umich.edu/home/techreports/cse95.html
Root-URL: http://www.eecs.umich.edu
Title: Specification and Verification of the Undo/Redo Algorithm for Database Recovery  
Author: Yuri Gurevich Charles Wallace 
Note: ([Gur 95]). The specification is used to verify correctness and liveness properties of the algorithm.  
Date: July 12, 1995  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [BHG 87] <author> P. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: In our proof of liveness, we focus on cases with error-free intervals sufficiently long to allow recovery. 3 Algorithm Description The undo/redo algorithm originated in [Gray 78]; we use the presentation in <ref> [BHG 87] </ref> as our guidelines. One of the advantages of this algorithm, besides its simplicity, is the fact that it imposes no restrictions on the CM. Newly written data items stored in the cache are flushed only when the CM sees fit to do so. <p> Just as every read in a strict schedule reads a committed value, so every write in 1 In <ref> [BHG 87] </ref>'s abstract description of the algorithm, log records are not assumed to include before images; it is simply stated that any before image "can be found in the log." In the more specific description, before images are explicitly included in the log records, as "keeping such information in these records
Reference: [Gray 78] <author> J. Gray, </author> <booktitle> "Notes on Database Operating Systems," in Operating Systems: An Advanced Course, Lecture Notes in Computer Science 60, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1978, </year> <pages> 393-481. </pages>
Reference-contexts: In our proof of liveness, we focus on cases with error-free intervals sufficiently long to allow recovery. 3 Algorithm Description The undo/redo algorithm originated in <ref> [Gray 78] </ref>; we use the presentation in [BHG 87] as our guidelines. One of the advantages of this algorithm, besides its simplicity, is the fact that it imposes no restrictions on the CM.
Reference: [Gur 93] <author> Y. Gurevich, </author> <title> "Evolving Algebras: An Attempt to Discover Semantics," </title> <booktitle> in Current Trends in Theoretical Computer Science, </booktitle> <editor> eds. G. Rozenberg and A. Salomaa, </editor> <publisher> World Scientific, </publisher> <year> 1993, </year> <pages> 266-292. </pages>
Reference: [Gur 95] <author> Y. Gurevich, </author> <title> "Evolving Algebras 1993: Lipari Guide," in Specification and Validation Methods, </title> <editor> ed. E. Borger, </editor> <publisher> Oxford University Press, </publisher> <year> 1995. </year> <month> 18 </month>
References-found: 4

