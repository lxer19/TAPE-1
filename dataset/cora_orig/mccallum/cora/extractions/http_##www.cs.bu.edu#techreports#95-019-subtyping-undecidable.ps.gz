URL: http://www.cs.bu.edu/techreports/95-019-subtyping-undecidable.ps.gz
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: jbw@cs.bu.edu  
Title: The Undecidability of Mitchell's Subtyping Relationship  
Author: J. B. Wells 
Date: December 10, 1995  
Address: Boston, MA 02215, U.S.A.  
Affiliation: Dept. of Computer Science Boston University  
Abstract: Mitchell defined and axiomatized a subtyping relationship (also known as containment, coercibility, or subsumption) over the types of System F (with "!" and "8"). This subtyping relationship is quite simple and does not involve bounded quantification. Tiuryn and Urzyczyn quite recently proved this subtyping relationship to be undecidable. This paper supplies a new undecidability proof for this subtyping relationship. First, a new syntax-directed axiomatization of the subtyping relationship is defined. Then, this axiomatization is used to prove a reduction from the undecidable problem of semi-unification to subtyping. The undecidability of subtyping implies the undecidability of type checking for System F extended with Mitchell's subtyping, also known as "F plus eta".
Abstract-found: 1
Intro-found: 1
Reference: [KTU93] <author> A. J. Kfoury, J. Tiuryn, and P. Urzyczyn. </author> <title> The undecidability of the semi-unification problem. </title> <journal> Inf. Comput., </journal> <volume> 102(1) </volume> <pages> 83-101, </pages> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: This is Lemma 6 in [Tiu95]. ffi 7 2.5 Semi-Unification For convenience, we define semi-unification using a first-order signature containing the single infix binary function symbol "!" and for the case where there are only two pairs of terms. (The general definition of semi-unification is reducible to this special case <ref> [Pud88, KTU93] </ref> and the proof that semi-unification is undecidable is actually for this special case [KTU93].) The set of algebraic terms T is defined by the grammar T ::= Vj (T ! T ). This definition is chosen because it allows mapping terms onto types. In fact, T T. <p> using a first-order signature containing the single infix binary function symbol "!" and for the case where there are only two pairs of terms. (The general definition of semi-unification is reducible to this special case [Pud88, KTU93] and the proof that semi-unification is undecidable is actually for this special case <ref> [KTU93] </ref>.) The set of algebraic terms T is defined by the grammar T ::= Vj (T ! T ). This definition is chosen because it allows mapping terms onto types. In fact, T T. <p> Proof: By Theorem 4.1, SUP is reducible to Sub. SUP was proven to be undecidable by Kfoury, Tiuryn, and Urzyczyn <ref> [KTU93] </ref>. ffi 17
Reference: [LMS95] <author> G. Longo, K. Milsted, and S. Soloviev. </author> <title> A logic of subtyping. </title> <booktitle> In Proc. 10th Ann. IEEE Symp. Logic Comput. Sci., </booktitle> <pages> pp. 292-299, </pages> <month> June 26-29, </month> <year> 1995. </year>
Reference-contexts: 8 ~ fi:([~ff := ~t ]) ~ fi 62 FTV (8~ff:) (distr) 8~ff:( ! t ) (8~ff:) ! (8~ff:t ) (!) 1 ! t 1 2 ! t 2 (trans) ; t (congruence) t Longo, Milsted, and Soloviev give another axiomatization of the subtyping relationship called System F ` co <ref> [LMS95] </ref>. (This name is used because when the inference rules of the system are labelled with proof terms, it becomes a fragment of System F.) It goes as follows. (ax) ` co 2 ` co 1 ; t 1 ` co t 2 (8-left) [ff := ] ` co t (8 <p> becomes a fragment of System F.) It goes as follows. (ax) ` co 2 ` co 1 ; t 1 ` co t 2 (8-left) [ff := ] ` co t (8 n -right) ` co 1 ! ! n ! t ff 62 FTV (f; ~g) Theorem 11 in <ref> [LMS95] </ref> states that t if and only if ` co t . Hence, the two systems may be used interchangeably.
Reference: [Mit88] <author> J. C. Mitchell. </author> <title> Polymorphic type inference and containment. </title> <journal> Inf. Comput., </journal> 76(2/3):211-249, Feb./Mar. 1988. 
Reference-contexts: Equivalently, a position is positive if and only if the path to that position contains an even number of occurrences of "L", otherwise it is negative. 5 2.3 Subtyping Mitchell's axiomatization of the subtyping relationship <ref> [Mit88] </ref> is given by the following rules. (sub) 8~ff: 8 ~ fi:([~ff := ~t ]) ~ fi 62 FTV (8~ff:) (distr) 8~ff:( ! t ) (8~ff:) ! (8~ff:t ) (!) 1 ! t 1 2 ! t 2 (trans) ; t (congruence) t Longo, Milsted, and Soloviev give another axiomatization of
Reference: [Pud88] <author> P. Pudlak. </author> <title> On a unification problem related to Kreisel's conjecture. </title> <journal> Commentationes Mathematicae Universitatis Carolinae, </journal> <volume> 29(3) </volume> <pages> 551-556, </pages> <address> 1988. Prague, Czechoslovakia. </address>
Reference-contexts: This is Lemma 6 in [Tiu95]. ffi 7 2.5 Semi-Unification For convenience, we define semi-unification using a first-order signature containing the single infix binary function symbol "!" and for the case where there are only two pairs of terms. (The general definition of semi-unification is reducible to this special case <ref> [Pud88, KTU93] </ref> and the proof that semi-unification is undecidable is actually for this special case [KTU93].) The set of algebraic terms T is defined by the grammar T ::= Vj (T ! T ). This definition is chosen because it allows mapping terms onto types. In fact, T T.
Reference: [Tiu95] <author> J. Tiuryn. </author> <title> Equational axiomatization of bicoercibility for polymorphic types. </title> <type> Technical Report 95-004, </type> <institution> Comp. Sci. Dept., Boston Univ., </institution> <month> Feb. </month> <year> 1995. </year> <note> URL: ftp://cs-ftp.bu.edu/techreports/95-004-coercibility.ps.Z. </note>
Reference-contexts: Trevor Jim inspired this research by asking me at LICS '95 to prove the undecidability of typability in System F extended with Mitchell's subtyping. He also made me aware of Tiuryn's paper on bicoercibility <ref> [Tiu95] </ref>, which was essential for my understanding of Mitchell's subtyping relationship. <p> Tiuryn has proven that the following axiomatization 6 captures precisely the notion of bicoercibility <ref> [Tiu95] </ref>. (A1) (A3) 8ff: [ff := ?] all occurrences of ff in are positive (A4) 8ff:( ! t ) ! 8ff:t ff 62 FTV () and ff occurs negatively in t (arrow) 0 ; t t 0 (quant) 0 (trans) ; t (symm) t Lemma 2.2 If t , then the <p> Proof: By inspection of the rules that axiomatize bicoercibility. ffi Lemma 2.3 If ( L ! R ) (t L ! t R ) then L t L and R t R . Proof: This is Lemma 6 in <ref> [Tiu95] </ref>. ffi 7 2.5 Semi-Unification For convenience, we define semi-unification using a first-order signature containing the single infix binary function symbol "!" and for the case where there are only two pairs of terms. (The general definition of semi-unification is reducible to this special case [Pud88, KTU93] and the proof that
Reference: [TU95] <author> J. Tiuryn and P. Urzyczyn. </author> <title> The subtyping problem for second-order types is undecidable. </title> <type> Technical report, </type> <institution> Inst. of Informatics, Univ. of Warsaw, </institution> <month> Nov. </month> <year> 1995. </year> <note> URL: ftp://ftp.mimuw.edu.pl/pub/users/urzy/sub-undec.ps.Z. </note>
Reference-contexts: Using this new axiomatization, Tiuryn and Urzyczyn recently proved the undecidability of the subtyping relationship by a reduction from the halting problem for 2-counter automata <ref> [TU95] </ref>. As well as the undecidability of subtyping, Tiuryn and Urzy-czyn's result implies the undecidability of type checking for System F extended 2 with subtyping (also known as "F plus eta").
Reference: [Wel94] <author> J. B. Wells. </author> <title> Typability and type checking in the second-order - calculus are equivalent and undecidable. </title> <booktitle> In Proc. 9th Ann. IEEE Symp. </booktitle> <institution> Logic Comput. Sci., </institution> <month> July 4-6, </month> <year> 1994. </year> <month> 18 </month>
Reference-contexts: This undecidability result is also interesting because of the way it proves that type checking for System F extended with subtyping ("F plus eta") is undecidable. Type checking for System F without subtyping was also proven undecidable by a reduction from semi-unification <ref> [Wel94] </ref>. Thus, the type checking problem is undecidable for both versions of System F for the same reason. 1.3 Future Work It has also been an open problem whether typability in System F extended with Mitchell's subtyping is decidable. <p> Using the new syntax-directed axiomatization of subtyping, I have recently discovered a proof of the undecidability of typability in System F extended with subtyping. The overall structure of the 3 proof is similar to way typability was proven undecidable for System F without subtyping <ref> [Wel94] </ref>, but the lower-level details are quite different. The paper will be available soon. 1.4 Acknowledgements Jerzy Tiuryn helped me by clearing up some misconceptions I had about the decidability of Mitchell's subtyping relationship.
References-found: 7

