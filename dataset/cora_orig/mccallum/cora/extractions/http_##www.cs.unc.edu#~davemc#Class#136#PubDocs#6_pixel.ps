URL: http://www.cs.unc.edu/~davemc/Class/136/PubDocs/6_pixel.ps
Refering-URL: http://www.cs.unc.edu/~davemc/Class/136/PubDocs/
Root-URL: http://www.cs.unc.edu
Author: Alvy Ray Smith 
Date: v6.06  July 17, 1995  
Affiliation: Microsoft Tech  
Pubnum: Memo 6  $fl3L[HOfl,Vfl 1RW $/LWWOHfl6TXDUH* $fl3L[HOfl,Vfl 1RW $/LWWOHfl6TXDUH* $fl3L[HOfl,Vfl 1RW $/LWWOHfl6TXDUHffi ff$QGflDfl9R[HOflLVfl 1RW flDfl/LWWOHfl&XEHfi Technical Memo 6  
Abstract: My purpose here is to, once and for all, rid the world of the misconception that a pixel is a little geometric square. This is not a religious issue. This is an issue that strikes right at the root of correct image (sprite) computing and the ability to correctly integrate (converge) the discrete and the continuous. The little square model is simply incorrect. It harms. It gets in the way. If you find yourself thinking that a pixel is a little square, please read this paper. I will have succeeded if you at least understand that you are using the model and why it is permissible in your case to do so (is it?). Everything I say about little squares and pixels in the 2D case applies equally well to little cubes and voxels in 3D. The generalization is straightforward, so I wont mention it from hereon 1 . I discuss why the little square model continues to dominate our collective minds. I show why it is wrong in general. I show when it is appropriate to use a little square in the context of a pixel. I propose a discrete to continuous mappingbecause this is where the problem arisesthat always works and does not assume too much. I presented some of this argument in Tech Memo 5 ([Smith95]) but have encountered a serious enough misuse of the little square model since I wrote that paper to make me believe a full frontal attack is necessary. 
Abstract-found: 1
Intro-found: 1
Reference: [Smith95] <author> Smith, Alvy Ray, </author> <title> A Sprite Theory of Image Computing , Technical Memo 5, </title> <publisher> Microsoft, </publisher> <month> July </month> <year> 1995. </year>
References-found: 1

