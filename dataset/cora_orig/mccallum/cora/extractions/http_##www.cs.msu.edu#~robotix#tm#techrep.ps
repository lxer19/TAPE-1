URL: http://www.cs.msu.edu/~robotix/tm/techrep.ps
Refering-URL: http://www.cs.msu.edu/~robotix/rdlist.html
Root-URL: http://www.cs.msu.edu
Title: WebWatcher: A Tour Guide for the World Wide Web  
Author: Thorsten Joachims, Dayne Freitag, Tom Mitchell 
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Date: September 1996  
Pubnum: CMU-CS-96-xxx  
Abstract: This research is sponsored by the Wright Laboratory, Aeronautical Systems Center, Air Force Materiel Command, USAF, and the Advanced Research Projects Agency (ARPA) under grant F33615-93-1-1330. The US Government is authorized to reproduce and distribute reprints for Government purposes, notwithstanding any copyright notation thereon. Views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of Wright Laboratory or the United States Government. 
Abstract-found: 1
Intro-found: 1
Reference: [AFJM95] <author> R. Armstrong, D. Freitag, T. Joachims, and T. Mitchell. Web-watcher: </author> <title> A learning apprentice for the world wide web. </title> <booktitle> In AAAI Spring Symposium on Information Gathering from Heterogeneous, Distributed Environments, </booktitle> <month> March </month> <year> 1995. </year>
Reference-contexts: Here we describe a first experiment with a more restricted, but operational, tour guide. In particular, we describe WebWatcher <ref> [AFJM95] </ref>, a system that accompanies the user as he or she browses the web. Like a museum tour guide, WebWatcher interactively suggests where to go next. The user can communicate with the system and give feedback.
Reference: [Bel57] <author> Richard Bellman. </author> <title> Dynamic Programming. </title> <publisher> Princeton University Press, </publisher> <year> 1957. </year>
Reference-contexts: Under certain conditions, the Q function can be iteratively approximated by updating the estimate for Q (s; a) each time action a is performed by the agent in state s, as follows (see <ref> [Bel57] </ref>): Q n+1 (s; a) = R (s 0 ) + fl max a 0 2actions in s 0 [Q n (s 0 ; a 0 )] where s 0 is the state resulting from performing action a in state s.
Reference: [BS95] <author> M. Balabanovic and Y. Shoham. </author> <title> Learning information retrieval agents: Experiments with automated web browsing. </title> <booktitle> In AAAI Spring Symposium Series on Information Gathering from Distributed, Heterogeneous Environments, Working Notes. </booktitle> <address> AAAI-Press, </address> <year> 1995. </year>
Reference-contexts: The system uses the ratings to learn a user specific topic profile that can be used to suggest unexplored hyperlinks on the page. Syskill and Webert can also use search engines like LYCOS to retrieve pages by turning the topic profile into a query. Lira <ref> [BS95] </ref> works in an o*ine setting. A general model of one user's interest is learned by asking the user to rate pages.
Reference: [Gor95] <author> G. Gordon. </author> <title> Stable function approximation in dynamic programming. </title> <booktitle> In International Conference on Machine Learning, </booktitle> <year> 1995. </year>
Reference-contexts: We chose to use a similarity-weighted 3-nearest neighbor function approximator for this purpose, because of the many features needed to describe pages and hyperlinks, and because of certain theoretical advantages <ref> [Gor95] </ref>. Each hyperlink a is described by the TFIDF vector representation of the underlined anchor text. Each page s is represented in an analogous way using the text in its title.
Reference: [JMFA95] <author> T. Joachims, T. Mitchell, D. Freitag, and R. Armstrong. Web-watcher: </author> <title> Machine learning and hypertext. </title> <editor> In K. Morik and J. Her-rmann, editors, </editor> <booktitle> GI Fachgruppentreffen Maschinelles Lernen. </booktitle> <institution> University of Dortmund, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: Again, WebWatcher gives new suggestions there. If we were particularly interested in a page, we could tell WebWatcher so by clicking on "Show me similar pages" in the menubar. WebWatcher would then display a list of pages which are similar based on a metric derived from hypertext structure <ref> [JMFA95] </ref>. Two additional commands are available in WebWatcher's menubar on any page. Clicking on the command "how many followed each link?" asks Web-Watcher to display for each hyperlink the number of previous visitors who took that link.
Reference: [Lie95] <author> H. Lieberman. Letizia: </author> <title> An agent that assists web browsing. </title> <booktitle> In International Joint Conference on Artificial Intelligence, </booktitle> <address> Montreal, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: the methods and sources of information that are combined. 20 Popularity uses frequency information derived from user behavior an a particular page, Match uses the underlined text in hyperlinks, Annotate uses the interest descriptions from the user traces and Q-Learning makes use of the hypertext structure. 4 Related Work Letizia <ref> [Lie95] </ref> is similar to WebWatcher in the sense that the system accompanies the user while browsing. One difference is that the system serves only one particular user. Letizia is located on the users machine and learns his or her current interest. <p> We have recently begun experiments with such a personalized WebWatcher. One system that demonstrates the feasibility of learning such long-term user interest models is the NewsWeeder system [Lang95], which learns user interests in reading net news. One example of a person-specific web agent is Letizia <ref> [Lie95] </ref>. * Combining user-specific and web locale-specific learning. Note that one way to implement a personalized WebWatcher is to simply adapt the current system to maintain a separate set of training data for each user.
Reference: [MCF + 94] <author> T. Mitchell, R. Caruana, D. Freitag, J. McDermott, and D. Zabowski. </author> <title> Experience with a learning personal assistent. </title> <journal> Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 81-91, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: In particular, we describe WebWatcher [AFJM95], a system that accompanies the user as he or she browses the web. Like a museum tour guide, WebWatcher interactively suggests where to go next. The user can communicate with the system and give feedback. WebWatcher acts as a learning apprentice <ref> [MMS85, MCF + 94] </ref>, observing and learning from its users' actions. Over time WebWatcher learns to become more expert for the parts of the World Wide Web that it has visited in the past, and for the types of topics in which previous visitors have had an interest.
Reference: [Mit96] <author> T. Mitchell. </author> <title> Machine Learning. </title> <publisher> McGraw-Hill, </publisher> <year> 1996. </year>
Reference-contexts: To estimate Pr (choicejAnnotate (h; i); M atch (h; i); Q (h; i); P opularity (h; p)) logistic regression <ref> [Mit96] </ref> is used. An additional small amount of data is used as training data for regression (see section 3.1.3). 3.2.2 Experimental Results The table in figure 15 shows the results of combining the predictions of all four learning algorithms.
Reference: [MMS85] <author> T. Mitchell, S. Mahadevan, and L. Steinberg. </author> <title> Leap: A learning apprentice for vlsi design. </title> <booktitle> In Ninth International Joint Conference on Artificial Intelligence, </booktitle> <month> August </month> <year> 1985. </year>
Reference-contexts: In particular, we describe WebWatcher [AFJM95], a system that accompanies the user as he or she browses the web. Like a museum tour guide, WebWatcher interactively suggests where to go next. The user can communicate with the system and give feedback. WebWatcher acts as a learning apprentice <ref> [MMS85, MCF + 94] </ref>, observing and learning from its users' actions. Over time WebWatcher learns to become more expert for the parts of the World Wide Web that it has visited in the past, and for the types of topics in which previous visitors have had an interest.
Reference: [PMB96] <author> M. Pazzani, J. Muramatsu, and D. Billsus. Syskill & webert: </author> <title> Identifying interesting web sites. </title> <booktitle> In AAAI Conference, </booktitle> <address> Portland, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: One difference is that the system serves only one particular user. Letizia is located on the users machine and learns his or her current interest. By doing lookahead search Letizia can recommend pages in the neighborhood of where the user is currently browsing. Syskill and Webert <ref> [PMB96] </ref> offers a more restricted way of browsing than WebWatcher and Letizia. Starting from a manually constructed index page for a particular topic, the user can rate hyperlinks off this page.
Reference: [Sal91] <author> G. Salton. </author> <title> Developments in automatic text retrieval. </title> <journal> Science, </journal> <volume> 253 </volume> <pages> 974-979, </pages> <year> 1991. </year>
Reference-contexts: Interests and hyperlink descriptions are represented by very high-dimensional feature vectors (figure 9), with each dimension representing a particular word in the English language. The weight of a word w for a piece of text d is computed using the TFIDF heuristic as described in <ref> [Sal91] </ref>. T F IDF (w; d) = T F (w; d) fl log ( DF (w) The term-frequency T F (w; d) counts the number of times word w occurs in text d. The document-frequency DF (w) is the number of texts that contain word w 12 user's interest keywords. <p> In particular the weight of a word is zero if it does not occur in a piece of text at all. Based on this vector representation the similarity of two pieces of text can be calculated as the cosine between their vectors <ref> [Sal91] </ref>. The particular algorithm WebWatcher uses to suggest hyperlinks goes through all the hyperlinks on the current page. For each hyperlink the list of interests (including the original underlined words) associated with it is ranked according to the similarity with the current user's interest. <p> How shall we measure whether a page fits the user's interest? The particular reward function used here is again based on the vector space retrieval model and the TFIDF heuristic <ref> [Sal91] </ref> already introduced in section 2.4. Pages are represented as vectors of words and the vector length is normalized to one. The values of the vector give an estimate of how important the corresponding word is on the page.
Reference: [Vap82] <author> V. Vapnik. </author> <title> Estimation of Dependencies Based on Empirical Data. </title> <publisher> Springer-Verlag, </publisher> <year> 1982. </year> <month> 25 </month>
Reference-contexts: The output of P opularity (h; p) is an estimate of the probability Pr (choicejh; p) that a user follows hyperlink h on page p independent of a particular interest. To estimate Pr (choicejh; p) a Bayesian estimator is used with uniform prior <ref> [Vap82] </ref> (often called Laplace estimator).
References-found: 12

