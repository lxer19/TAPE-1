URL: http://www.cs.rochester.edu/u/srini/main.ps
Refering-URL: http://www.cs.rochester.edu/stats/oldmonths/1998.06/docs-name.html
Root-URL: 
Email: fsrini,sandhyag@cs.rochester.edu  
Title: InterAct: Virtual Sharing for Interactive Client-Server Applications  
Author: Srinivasan Parthasarathy and Sandhya Dwarkadas 
Address: Rochester, NY 14627-0226  
Affiliation: Department of Computer Science University of Rochester  
Abstract: We describe InterAct, a framework for interactive client-server applications. InterAct provides an efficient mechanism to support object sharing while facilitating client-controlled consistency. Advantages are two-fold: the ability to cache relevant data on the client to help support interactivity, and the ability to extend the computation boundary to the client in order to reduce server load. We examine its performance on the interactive data-mining domain, and present some basic results that indicate the flexibility and performance achievable.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> C. Aggarwal and P. Yu. </author> <title> Online generation of association rules. </title> <booktitle> In ICDE, </booktitle> <month> Feb </month> <year> 1998. </year>
Reference-contexts: In this application, the data server is responsible for creating a shared data structure (itemset lattice [12]) based on the local database. This lattice is subsequently mapped by the client. The client executes some non-trivial interactions on the lattice, as described in previous work <ref> [1] </ref>. The server updates the mapped data structure corresponding to changes in the database (which we simulate), and commits these changes. Updates are transmitted to the client on a client poll.
Reference: 2. <author> C. Amza, A.L. Cox, S. Dwarkadas, P. Keleher, H. Lu, R. Rajamony, and W. Zwaenepoel. TreadMarks: </author> <title> Shared memory computing on networks of workstations. </title> <journal> IEEE Computer, </journal> <volume> 29(2) </volume> <pages> 18-28, </pages> <month> Feb </month> <year> 1996. </year>
Reference-contexts: Separating connection and data information, co-locates all the pointers, enabling the runtime to perform rapid address translation. 3.2 Object Modification Detection The technique we use to detect modifications is similar to that used by multiple-writer page-based software distributed shared memory systems <ref> [4, 2] </ref>. At the beginning of every interval, all relevant object pages are marked read-only using the mprotect VM call. <p> This leads to a proliferation of isolated tools with little or no inter-operability. Our work derives some of its characteristics from the distributed shared memory domain. In particular, the way we compute changes to our objects is a hybrid combination of the approaches described in TreadMarks <ref> [2] </ref> and Midway [13]. Orca [3] is similar in some respects to our work, particularly in that it provides an address independent object format similar to ours. Beehive [10] is a distributed shared memory system that also supports a temporal notion of consistency called delta consistency.
Reference: 3. <author> H.E. Bal, M.F. Kaashoek, </author> <title> and A.S. Tanenbaum. Orca: A language for parallel programming of distributed systems. </title> <journal> IEEE TSE, </journal> <month> Jun </month> <year> 1992. </year>
Reference-contexts: Our work derives some of its characteristics from the distributed shared memory domain. In particular, the way we compute changes to our objects is a hybrid combination of the approaches described in TreadMarks [2] and Midway [13]. Orca <ref> [3] </ref> is similar in some respects to our work, particularly in that it provides an address independent object format similar to ours. Beehive [10] is a distributed shared memory system that also supports a temporal notion of consistency called delta consistency. This is similar to temporal updates in InterAct.
Reference: 4. <author> J.B. Carter, J.K. Bennett, and W. Zwaenepoel. </author> <title> Implementation and performance of Munin. </title> <booktitle> In Proceedings of the 13th ACM SOSP, </booktitle> <month> Oct </month> <year> 1991. </year>
Reference-contexts: Separating connection and data information, co-locates all the pointers, enabling the runtime to perform rapid address translation. 3.2 Object Modification Detection The technique we use to detect modifications is similar to that used by multiple-writer page-based software distributed shared memory systems <ref> [4, 2] </ref>. At the beginning of every interval, all relevant object pages are marked read-only using the mprotect VM call. <p> When a processor incurs a write fault, it creates a write notice (WN) for the faulting page and appends the WN to a list of WNs associated with the current interval. It simultaneously saves a pristine copy of each page called a twin and enables write permissions <ref> [4] </ref>. The twin serves two purposes. First, if a client request comes in during an interval, data is delivered from the twin, thereby ensuring atomicity. Second, at the end of an interval the twin is used to identify the nodes modified within an interval.
Reference: 5. <author> Prasun Dewan. </author> <title> A Survey of Applications of CSCW Including Some in Educational Settings. </title> <booktitle> ED-MEDIA, </booktitle> <pages> pages 147-152, </pages> <month> Jun </month> <year> 1993. </year>
Reference-contexts: Our system provides a transparent mechanism to identify modifications made to these data structures, thereby reducing data communication. Computer Supported Collaborative Work (CSCW) <ref> [5] </ref> systems share some of the features of our system (supporting interactive sessions across disparate systems, update notification etc.). However, most such applications support only a particular aspect of work, e.g., informal communication, distributed meetings, document co-authoring etc.
Reference: 6. <author> K. Gharachorloo, D. Lenoski, J. Laudon, P. Gibbons, A. Gupta, and J. Hennessy. </author> <title> Memory consistency and event ordering in scalable shared-memory multiprocessors. </title> <booktitle> In Proceedings of the 17th ISCA,May 1990. </booktitle>
Reference-contexts: In such application domains, both the data sharing mechanisms and the consistency models are important. While the use of shared memory improves ease-of-use, employing a spatial memory model such as release consistency <ref> [6] </ref> is not always the most efficient alternative. Roughly speaking, release consistency guarantees a coherent view of all shared data at synchronization points. This can have an adverse effect on performance especially in high-latency message-based environments.
Reference: 7. <author> A.D. Joseph, A.F. deLespinasse, J.A. Tauber, D.K. Gifford, and M.F. Kaashoek. </author> <title> Rover: A toolkit for mobile information access. </title> <booktitle> In 15th SOSP, </booktitle> <month> Dec </month> <year> 1995. </year>
Reference-contexts: Distributed object systems such as Emerald [8], Rover <ref> [7] </ref>, and Globe [11], also permit object sharing in the presence of replicated objects and object migration. Clearly, InterAct shares some features with such systems, such as support for address-independent objects (serialization/marshalling), and a need to identify where the pointers are and what they point to.
Reference: 8. <author> E. Jul, H. Levy, N. Hutchinson, and A. Black. </author> <title> Fine-grained mobility in the Emerald system. </title> <journal> ACM TOCS, </journal> <volume> 6(1) </volume> <pages> 109-133, </pages> <month> Feb </month> <year> 1988. </year>
Reference-contexts: We found the run-time overhead imposed by adhering to our framework, for the above interactive experiments, to be less than 6%. 5 Related Work Remote Procedure Call (RPC) mechanisms, and Remote Method Invocation (RMI) mechanisms have been used for building client-server applications. Distributed object systems such as Emerald <ref> [8] </ref>, Rover [7], and Globe [11], also permit object sharing in the presence of replicated objects and object migration. Clearly, InterAct shares some features with such systems, such as support for address-independent objects (serialization/marshalling), and a need to identify where the pointers are and what they point to.
Reference: 9. <author> S. Parthasarathy, M. J. Zaki, and W. Li. </author> <title> Memory placement for parallel data mining on shared-memory systems. </title> <note> To appear in KDD, </note> <month> Aug </month> <year> 1998. </year>
Reference-contexts: We address each of these issues here. 3.1 Address Translation InterAct objects request memory in page chunks using a segment-based memory placement library <ref> [9] </ref>. The library, which uses the Unix malloc routines, provides mechanisms to control memory placement policies for dynamic data structures. Using the library functions, we can identify the pages that belong to a given object. An object refers to a recursive data structure such as a tree or graph.
Reference: 10. <author> A. Singla, U. Ramachandran, and J. Hodgins. </author> <title> Temporal notions of synchronization and consistency in beehive. </title> <booktitle> In PROC of the 9TH SPAA, </booktitle> <month> Jun </month> <year> 1997. </year>
Reference-contexts: In particular, the way we compute changes to our objects is a hybrid combination of the approaches described in TreadMarks [2] and Midway [13]. Orca [3] is similar in some respects to our work, particularly in that it provides an address independent object format similar to ours. Beehive <ref> [10] </ref> is a distributed shared memory system that also supports a temporal notion of consistency called delta consistency. This is similar to temporal updates in InterAct. Our system differs from the above distributed shared memory approaches in that it supports sharing across disparate processes.
Reference: 11. <author> M. vanSteen, P. Homburg, </author> <title> and A.S. Tanenbaum. The architectural design of globe: A wide-area distributed system. </title> <note> In Technical Report (Vrije University) IR-431, </note> <month> Mar </month> <year> 1997. </year>
Reference-contexts: Distributed object systems such as Emerald [8], Rover [7], and Globe <ref> [11] </ref>, also permit object sharing in the presence of replicated objects and object migration. Clearly, InterAct shares some features with such systems, such as support for address-independent objects (serialization/marshalling), and a need to identify where the pointers are and what they point to.
Reference: 12. <author> M. J. Zaki, S. Parthasarathy, M. Ogihara, and W. Li. </author> <title> New parallel algorithms for fast discovery of association rules. Data Mining and Knowledge Discovery: </title> <note> An International Journal, </note> <month> Dec </month> <year> 1997. </year>
Reference-contexts: Identifies, defines, and supports the types of consistency required. We illustrate the design using the interactive data mining domain in particular an association mining system <ref> [12] </ref>. Data mining algorithms typically operate on large data sets and are compute intensive. The process is also largely repetitive, with the user perturbing the input parameters to a given task in order to arrive at the desired result. <p> In this application, the data server is responsible for creating a shared data structure (itemset lattice <ref> [12] </ref>) based on the local database. This lattice is subsequently mapped by the client. The client executes some non-trivial interactions on the lattice, as described in previous work [1]. The server updates the mapped data structure corresponding to changes in the database (which we simulate), and commits these changes.
Reference: 13. <author> M.J. Zekauskas, </author> <title> W.A. Sawdon, and B.N. Bershad. Software write detection for distributed shared memory. </title> <booktitle> In PROC of first OSDI, </booktitle> <pages> pages 87-100, </pages> <month> Nov </month> <year> 1994. </year>
Reference-contexts: This leads to a proliferation of isolated tools with little or no inter-operability. Our work derives some of its characteristics from the distributed shared memory domain. In particular, the way we compute changes to our objects is a hybrid combination of the approaches described in TreadMarks [2] and Midway <ref> [13] </ref>. Orca [3] is similar in some respects to our work, particularly in that it provides an address independent object format similar to ours. Beehive [10] is a distributed shared memory system that also supports a temporal notion of consistency called delta consistency.
References-found: 13

