URL: ftp://ftp.cs.cornell.edu/pub/chandra/thesis.ps.Z
Refering-URL: http://www.cs.cornell.edu/Info/People/chandra/Thesis.html
Root-URL: http://www.cs.brown.edu/
Title: UNRELIABLE FAILURE DETECTORS FOR ASYNCHRONOUS DISTRIBUTED SYSTEMS  
Author: Tushar Deepak Chandra 
Degree: A Dissertation Presented to the Faculty of the Graduate School  in Partial Fulfillment of the Requirements for the Degree of Doctor of Philosophy by  
Date: May 1993  
Affiliation: of Cornell University  
Abstract-found: 0
Intro-found: 1
Reference: [ABD + 87] <author> Hagit Attiya, Amotz Bar-Noy, Danny Dolev, Daphne Koller, David Peleg, and Rudiger Reischuk. </author> <title> Achievable cases in an asynchronous environment. </title> <booktitle> In Proceedings of the Twenty-Eighth Symposium on Foundations of Computer Science, </booktitle> <pages> pages 337-346. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1987. </year>
Reference: [ADKM91] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A communication sub-system for high availability. </title> <type> Technical Report CS91-13, </type> <institution> Computer Science Department, The Hebrew University of Jerusalem, </institution> <month> November </month> <year> 1991. </year>
Reference-contexts: Applications based on these paradigms include SIFT [WLG + 78], State Machines [Lam78,Sch90], Isis [BJ87, BCJ + 90], Psync [PBS89], Amoeba [Mul87], Delta-4 [Pow91], Transis <ref> [ADKM91] </ref>, HAS [Cri87], FAA [CDD90], and Atomic Commitment. Given their wide applicability, Consensus and Atomic Broadcast have been extensively studied by both theoretical and experimental researchers for over a decade. In this thesis, we focus on solutions to Consensus and Atomic Broadcast in the asynchronous model of distributed computing.
Reference: [ADLS91] <author> Hagit Attiya, Cynthia Dwork, Nancy Lynch, and Larry Stockmeyer. </author> <title> Bounds on the time to reach agreement in the presence of timing un-certainity. </title> <booktitle> In Proceedings of the Twenty third ACM Symposium on Theory of Computing, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: This is left as a subject for future research. 5.4 Other work Several works in fault-tolerant computing used time-outs primarily or exclusively for the purpose of failure detection. An example of this approach is given by an algorithm in <ref> [ADLS91] </ref>, which, as pointed out by the authors, "can be viewed as an asynchronous algorithm that uses a fault detection (e.g., timeout) mechanism." Appendix A A hierarchy of failure detectors and bounds on fault-tolerance In the preceding chapters, we introduced the concept of unreliable failure detectors that could make mistakes, and
Reference: [BCJ + 90] <author> Kenneth P. Birman, Robert Cooper, Thomas A. Joseph, Kenneth P. Kane, and Frank Bernhard Schmuck. </author> <title> ISIS A Distributed Programming Environment, </title> <month> June </month> <year> 1990. </year>
Reference-contexts: Atomic Broadcast allows processes to reliably broadcast messages, so that they agree on the set of messages they deliver and the order of message deliveries. Applications based on these paradigms include SIFT [WLG + 78], State Machines [Lam78,Sch90], Isis <ref> [BJ87, BCJ + 90] </ref>, Psync [PBS89], Amoeba [Mul87], Delta-4 [Pow91], Transis [ADKM91], HAS [Cri87], FAA [CDD90], and Atomic Commitment. Given their wide applicability, Consensus and Atomic Broadcast have been extensively studied by both theoretical and experimental researchers for over a decade. <p> In other words, the Isis failure detector forces the system to conform to its view. To applications such a failure detector makes no mistakes. For a more detailed discussion on this, see Section 5.3. 4 the underlying failure detection mechanisms, such as the Isis Toolkit <ref> [BCJ + 90] </ref> for asynchronous fault-tolerant distributed computing. We characterize a failure detector by specifying the completeness property and accuracy property that it must satisfy. <p> He also shows that for systems with a majority of correct processes, it is sufficient to use an Eventually Strong Failure Detector and atomic registers. 5.3 The Isis toolkit Isis is a programming toolkit for building fault-tolerant distributed systems <ref> [BJ87, BCJ + 90] </ref>. Although Isis employs the asynchronous model of distributed computing, it also provides several powerful primitives, including Atomic Broadcast. Roughly speaking, Isis has the following internal architecture. The lowest layer of Isis can be modeled as an asynchronous system and a failure detector.
Reference: [BGP89] <author> Piotr Berman, Juan A. Garay, and Kenneth J. Perry. </author> <title> Towards optimal distributed consensus. </title> <booktitle> In Proceedings of the Thirtieth Symposium on Foundations of Computer Science, </booktitle> <pages> pages 410-415. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1989. </year>
Reference: [BGT90] <author> Navin Budhiraja, Ajei Gopal, and Sam Toueg. </author> <title> Early-stopping distributed bidding and applications. </title> <booktitle> In Proceedings of the Fourth International Workshop on Distributed Algorithms. </booktitle> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1990. </year> <note> In press. </note>
Reference-contexts: Atomic Broadcast is a powerful communication paradigm for fault-tolerant distributed computing <ref> [CM84, CASD85, BJ87, PGM89, BGT90, GSTC90,Sch90] </ref>. We now show that Consensus and Atomic Broadcast are equivalent in asynchronous systems with crash failures. This is shown by reducing each to the other. 8 In other words, a solution for one automatically yields a solution for the other.
Reference: [BJ87] <author> Kenneth P. Birman and Thomas A. Joseph. </author> <title> Reliable communication in the presence of failures. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(1) </volume> <pages> 47-76, </pages> <month> February </month> <year> 1987. </year> <pages> 117 118 </pages>
Reference-contexts: Atomic Broadcast allows processes to reliably broadcast messages, so that they agree on the set of messages they deliver and the order of message deliveries. Applications based on these paradigms include SIFT [WLG + 78], State Machines [Lam78,Sch90], Isis <ref> [BJ87, BCJ + 90] </ref>, Psync [PBS89], Amoeba [Mul87], Delta-4 [Pow91], Transis [ADKM91], HAS [Cri87], FAA [CDD90], and Atomic Commitment. Given their wide applicability, Consensus and Atomic Broadcast have been extensively studied by both theoretical and experimental researchers for over a decade. <p> Atomic Broadcast is a powerful communication paradigm for fault-tolerant distributed computing <ref> [CM84, CASD85, BJ87, PGM89, BGT90, GSTC90,Sch90] </ref>. We now show that Consensus and Atomic Broadcast are equivalent in asynchronous systems with crash failures. This is shown by reducing each to the other. 8 In other words, a solution for one automatically yields a solution for the other. <p> He also shows that for systems with a majority of correct processes, it is sufficient to use an Eventually Strong Failure Detector and atomic registers. 5.3 The Isis toolkit Isis is a programming toolkit for building fault-tolerant distributed systems <ref> [BJ87, BCJ + 90] </ref>. Although Isis employs the asynchronous model of distributed computing, it also provides several powerful primitives, including Atomic Broadcast. Roughly speaking, Isis has the following internal architecture. The lowest layer of Isis can be modeled as an asynchronous system and a failure detector.
Reference: [BMZ88] <author> Ofer Biran, Shlomo Moran, and Shmuel Zaks. </author> <title> A combinatorial characterization of the distributed tasks that are solvable in the presence of one faulty processor. </title> <booktitle> In Proceedings of the Seventh ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 263-275, </pages> <month> August </month> <year> 1988. </year>
Reference: [BW87] <author> M. Bridgland and R. Watro. </author> <title> Fault-tolerant decision making in totally asynchronous distributed systems. </title> <booktitle> In Proceedings of the Sixth ACM Symposium on Principles of Distributed Computing, </booktitle> <year> 1987. </year>
Reference: [CASD85] <author> Flaviu Cristian, Houtan Aghili, H. Raymond Strong, and Danny Dolev. </author> <title> Atomic broadcast: From simple message diffusion to Byzantine agreement. </title> <booktitle> In Proceedings of the Fifteenth International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 200-206, </pages> <month> June </month> <year> 1985. </year> <note> A revised version appears as IBM Research Laboratory Technical Report RJ5244 (April 1989). </note>
Reference-contexts: Atomic Broadcast is a powerful communication paradigm for fault-tolerant distributed computing <ref> [CM84, CASD85, BJ87, PGM89, BGT90, GSTC90,Sch90] </ref>. We now show that Consensus and Atomic Broadcast are equivalent in asynchronous systems with crash failures. This is shown by reducing each to the other. 8 In other words, a solution for one automatically yields a solution for the other.
Reference: [CD89] <author> Benny Chor and Cynthia Dwork. </author> <title> Randomization in byzantine agreement. </title> <booktitle> Advances in Computer Research, </booktitle> <volume> 5 </volume> <pages> 443-497, </pages> <year> 1989. </year>
Reference-contexts: To circumvent these impossibility results, previous research focused on the use of randomization techniques <ref> [CD89] </ref>, the definition of some weaker problems and their solutions [DLP + 86,ABD + 87,BW87,BMZ88], or the study of several models of partial synchrony [DDS87,DLS88]. <p> This is because Consensus has no deterministic solution in such systems [FLP85]. 2. Atomic Broadcast can be solved using randomization or unreliable failure detectors in asynchronous systems. This is because Consensus is solvable with these techniques in such systems (for a survey of randomized Consensus algorithms, see <ref> [CD89] </ref>). Consensus can be easily reduced to Atomic Broadcast as follows. To propose a value, a process atomically broadcasts it. <p> Corollary 33: There is an Eventually Perfect Failure Detector 3P such that there is no algorithm A which solves Atomic Broadcast using 3P in asynchronous systems with f d n 2 e. Furthermore, Theorem 29 shows that by "plugging in" any randomized Consensus algorithm (such as the ones in <ref> [CD89] </ref>) into the algorithm of Figure 3.7, we automatically get a randomized algorithm for Atomic Broadcast in asynchronous systems. Corollary 34: Atomic Broadcast can be solved by randomized algorithms in asynchronous systems with f &lt; n 2 crash failures.
Reference: [CDD90] <author> Flaviu Cristian, Robert D. Dancey, and Jon Dehn. </author> <title> Fault-tolerance in the advanced automation system. </title> <type> Technical Report RJ 7424, </type> <institution> IBM Research Laboratory, </institution> <month> April </month> <year> 1990. </year>
Reference-contexts: Applications based on these paradigms include SIFT [WLG + 78], State Machines [Lam78,Sch90], Isis [BJ87, BCJ + 90], Psync [PBS89], Amoeba [Mul87], Delta-4 [Pow91], Transis [ADKM91], HAS [Cri87], FAA <ref> [CDD90] </ref>, and Atomic Commitment. Given their wide applicability, Consensus and Atomic Broadcast have been extensively studied by both theoretical and experimental researchers for over a decade. In this thesis, we focus on solutions to Consensus and Atomic Broadcast in the asynchronous model of distributed computing.
Reference: [CM84] <author> J. Chang and N. Maxemchuk. </author> <title> Reliable broadcast protocols. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(3) </volume> <pages> 251-273, </pages> <month> August </month> <year> 1984. </year>
Reference-contexts: Atomic Broadcast is a powerful communication paradigm for fault-tolerant distributed computing <ref> [CM84, CASD85, BJ87, PGM89, BGT90, GSTC90,Sch90] </ref>. We now show that Consensus and Atomic Broadcast are equivalent in asynchronous systems with crash failures. This is shown by reducing each to the other. 8 In other words, a solution for one automatically yields a solution for the other.
Reference: [Cri87] <author> Flaviu Cristian. </author> <title> Issues in the design of highly available computing services. </title> <booktitle> In Annual Symposium of the Canadian Information Processing Society, </booktitle> <pages> pages 9-16, </pages> <month> July </month> <year> 1987. </year> <note> Also IBM Research Report RJ5856, </note> <month> July </month> <year> 1987. </year>
Reference-contexts: Applications based on these paradigms include SIFT [WLG + 78], State Machines [Lam78,Sch90], Isis [BJ87, BCJ + 90], Psync [PBS89], Amoeba [Mul87], Delta-4 [Pow91], Transis [ADKM91], HAS <ref> [Cri87] </ref>, FAA [CDD90], and Atomic Commitment. Given their wide applicability, Consensus and Atomic Broadcast have been extensively studied by both theoretical and experimental researchers for over a decade. In this thesis, we focus on solutions to Consensus and Atomic Broadcast in the asynchronous model of distributed computing.
Reference: [CT90] <author> Tushar Deepak Chandra and Sam Toueg. </author> <title> Time and message efficient reliable broadcasts. </title> <booktitle> In Proceedings of the Fourth International Workshop on Distributed Algorithms. </booktitle> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1990. </year> <note> In press. </note>
Reference: [DDS87] <author> Danny Dolev, Cynthia Dwork, and Larry Stockmeyer. </author> <title> On the minimal synchronism needed for distributed consensus. </title> <journal> Journal of the ACM, </journal> <volume> 34(1) </volume> <pages> 77-97, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: Thus, Atomic Broadcast can be solved using the unreliable failure detectors described in this thesis. Furthermore, 3W is the weakest failure detector that can be used to solve Atomic Broadcast. A different tack on circumventing the unsolvability of Consensus is pursued in <ref> [DDS87] </ref> and [DLS88]. The approach of those papers is based on the observation that between the completely synchronous and completely asynchronous models of distributed systems there lie a variety of intermediate partially synchronous models. <p> The synchronous and asynchronous models are the two extremes of a spectrum of possible models. Many intermediate models have also been studied. For example, processes may have bounded speeds and perfectly synchronized clocks, but message delays may be unbounded <ref> [DDS87] </ref>. Or, message delays may be bounded but unknown [DLS88]. This thesis focuses on the asynchronous model of computation. However, our work has a direct impact on several models of partial synchrony (this is considered in more detail in Section 5.1). <p> This realisation led us to augment the asynchronous model of computation with unreliable failure detectors as described in this thesis. A different tack on circumventing the unsolvability of Consensus is pursued in <ref> [DDS87] </ref> and [DLS88]. The approach of those papers is based on the observation 98 99 that between the completely synchronous and completely asynchronous models of distributed systems there lie a variety of intermediate "partially synchronous" models. In particular, [DDS87] defines a space of 32 models by considering five key parameters, each <p> A different tack on circumventing the unsolvability of Consensus is pursued in <ref> [DDS87] </ref> and [DLS88]. The approach of those papers is based on the observation 98 99 that between the completely synchronous and completely asynchronous models of distributed systems there lie a variety of intermediate "partially synchronous" models. In particular, [DDS87] defines a space of 32 models by considering five key parameters, each of which admits a "favourable" and an "unfavourable" setting. For instance, one of the parameters is whether the maximum message delay is bounded and known (favourable setting) or unbounded (unfavourable setting). <p> For instance, one of the parameters is whether the maximum message delay is bounded and known (favourable setting) or unbounded (unfavourable setting). Each of the 32 models corresponds to a particular setting of the 5 parameters. <ref> [DDS87] </ref> identifies four "minimal" models in which Consensus is solvable. These are minimal in the sense that the weakening of any parameter from favourable to unfavourable would yield a model of partial synchrony where Consensus is unsolvable. Thus, within the space of the models considered, [DDS87] delineates precisely the boundary between <p> setting of the 5 parameters. <ref> [DDS87] </ref> identifies four "minimal" models in which Consensus is solvable. These are minimal in the sense that the weakening of any parameter from favourable to unfavourable would yield a model of partial synchrony where Consensus is unsolvable. Thus, within the space of the models considered, [DDS87] delineates precisely the boundary between solvability and unsolvability of Consensus, and provides an answer to the question "What is the least amount of synchrony sufficient to solve Consensus?". [DLS88] considers the following two models of partial synchrony. <p> Thus Case 2 cannot occur. 2 Thus, failure detectors can be viewed as a more abstract and modular way of incorporating partial synchrony assumptions into the model of computation. Instead of focusing on the operational features of partial synchrony (such as the five parameters considered in <ref> [DDS87] </ref>), we can consider the axiomatic properties that failure detectors must have in order to solve Consensus. The problem of implementing a given failure detector in a specific model of partial synchrony becomes a separate issue; this separation affords greater modularity. <p> From this more abstract point of view, the question "What is the least amount of synchrony sufficient to solve Consensus?" translates to "What is the weakest failure detector sufficient to solve Consensus?". In contrast to <ref> [DDS87] </ref>, which identified a set of minimal models of partial synchrony in which Consensus is solvable, we are able to exhibit a single minimum failure detector that can be used to solve Consensus. The technical device that made this possible is the notion of 103 reduction between failure detectors.
Reference: [DLP + 86] <author> Danny Dolev, Nancy A. Lynch, Shlomit S. Pinter, Eugene W. Stark, and William E. Weihl. </author> <title> Reaching approximate agreement in the presence of faults. </title> <journal> Journal of the ACM, </journal> <volume> 33(3) </volume> <pages> 499-516, </pages> <month> July </month> <year> 1986. </year> <month> 119 </month>
Reference: [DLS88] <author> Cynthia Dwork, Nancy A. Lynch, and Larry Stockmeyer. </author> <title> Consensus in the presence of partial synchrony. </title> <journal> Journal of the ACM, </journal> <volume> 35(2) </volume> <pages> 288-323, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: Thus, Atomic Broadcast can be solved using the unreliable failure detectors described in this thesis. Furthermore, 3W is the weakest failure detector that can be used to solve Atomic Broadcast. A different tack on circumventing the unsolvability of Consensus is pursued in [DDS87] and <ref> [DLS88] </ref>. The approach of those papers is based on the observation that between the completely synchronous and completely asynchronous models of distributed systems there lie a variety of intermediate partially synchronous models. <p> However, that reduction is more complex and is omitted from this thesis. 9 synchrony considered in <ref> [DLS88] </ref>. This immediately implies that Consensus and Atomic Broadcast can be solved in these models. <p> The synchronous and asynchronous models are the two extremes of a spectrum of possible models. Many intermediate models have also been studied. For example, processes may have bounded speeds and perfectly synchronized clocks, but message delays may be unbounded [DDS87]. Or, message delays may be bounded but unknown <ref> [DLS88] </ref>. This thesis focuses on the asynchronous model of computation. However, our work has a direct impact on several models of partial synchrony (this is considered in more detail in Section 5.1). <p> Note that Theorem 23 is also a corollary of Theorem 4.3 in <ref> [DLS88] </ref> together with Theorem 66. 3.6 On Atomic Broadcast We now consider Atomic Broadcast, another fundamental problem in fault tolerant distributed computing, and show that our results on Consensus also apply to Atomic Broadcast. Informally, Atomic Broadcast requires that all correct processes deliver the same messages in the same order. <p> This realisation led us to augment the asynchronous model of computation with unreliable failure detectors as described in this thesis. A different tack on circumventing the unsolvability of Consensus is pursued in [DDS87] and <ref> [DLS88] </ref>. The approach of those papers is based on the observation 98 99 that between the completely synchronous and completely asynchronous models of distributed systems there lie a variety of intermediate "partially synchronous" models. <p> Thus, within the space of the models considered, [DDS87] delineates precisely the boundary between solvability and unsolvability of Consensus, and provides an answer to the question "What is the least amount of synchrony sufficient to solve Consensus?". <ref> [DLS88] </ref> considers the following two models of partial synchrony. The first model assumes that there are bounds on relative process speeds and on message transmission times, but these bounds are not known. The second model assumes that these bounds are known, but they hold only after some unknown time. <p> Since 3P is stronger than 3W, by Corollaries 20 and 32, this implementation immediately gives Consensus and Atomic Broadcast solutions for this model of partial synchrony and, a fortiori, for the two models of <ref> [DLS88] </ref>.
Reference: [Fis83] <author> Michael J. Fischer. </author> <title> The consensus problem in unreliable distributed systems (a brief survey). </title> <type> Technical Report 273, </type> <institution> Department of Computer Science, Yale University, </institution> <month> June </month> <year> 1983. </year>
Reference-contexts: The proof is obvious and therefore omitted. 3.4 The Consensus problem In the Consensus problem, all correct processes propose a value and must reach a unanimous and irrevocable decision on some value that is related to the proposed values <ref> [Fis83] </ref>. We define the Consensus problem in terms of two primitives, propose (v) and decide (v), where v is a value drawn from a set of possible proposed values. <p> We now show how to use unreliable failure detectors to solve Consensus in asynchronous systems. 4 The validity condition captures the relation between the decision value and the proposed values. Changing this condition results in other types of Consensus <ref> [Fis83] </ref>. 27 3.5 Solving Consensus using unreliable failure detectors We now show how to solve Consensus using each one of the eight failure detectors defined in Figure 3.1.
Reference: [FLP85] <author> Michael J. Fischer, Nancy A. Lynch, and Michael S. Paterson. </author> <title> Impossibility of distributed consensus with one faulty process. </title> <journal> Journal of the ACM, </journal> <volume> 32(2) </volume> <pages> 374-382, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: them) should be done in terms of their abstract properties and not in terms 5 Indeed, no scheme could implement 3W in the purely asynchronous system: as we show in Section 3.5.2, such an implementation could be used to solve Consensus in such a system, contradicting the impossibility result of <ref> [FLP85] </ref>. 7 of any particular implementation. This is an important feature of this approach, and the reader should refrain from thinking of failure detectors in terms of specific time-out mechanisms. The failure detection properties of 3W are sufficient to solve Consensus in asynchronous systems. <p> Our model of asynchronous computation with failure detection is patterned after the one in <ref> [FLP85] </ref>. The system consists of a set of n processes, = fp 1 ; p 2 ; : : : ; p n g. Every pair of processes is connected by a reliable communication channel. <p> Atomic Broadcast cannot be solved with a deterministic algorithm in asynchronous systems, even if we assume that at most one process may fail, and it can only fail by crashing. This is because Consensus has no deterministic solution in such systems <ref> [FLP85] </ref>. 2. Atomic Broadcast can be solved using randomization or unreliable failure detectors in asynchronous systems. This is because Consensus is solvable with these techniques in such systems (for a survey of randomized Consensus algorithms, see [CD89]). Consensus can be easily reduced to Atomic Broadcast as follows. <p> We also remark that the non-determinism arising from the choice of the message to be received reflects the asynchrony of the message buffer | it is not due to non 1 In the send phase, p sends a message to all the processes atomically. As was shown in <ref> [FLP85] </ref>, the ability to do so is not sufficient for solving Consensus. An alternative formulation of a step could restrict a process to sending a message to a single process in the send phase. <p> Intuitively, this is because if p crashes no process can figure out whether p has taken the step that determines the decision value. The existence of such a critical "hidden" step is also at the core of many impossibility proofs starting with <ref> [FLP85] </ref>. In our case, the "hiding" is more difficult because now processes have recourse to the failure detector D. Despite this, the hiding of the step of the deciding process of a decision gadget is still possible. <p> Finally, no two steps can occur at the same time. 8 These assumptions are convenient because they make the formal model simpler to describe. Also, they are consistent with those made in the model of <ref> [FLP85] </ref> that provided the impetus for this work. On the other hand, in Chapter 3 a model with weaker properties is used. There, the three phases of a step need not occur indivisibly, and may occur at different times. <p> The fact that a message can be received only after it was sent is needed here. 92 4.6.2 Weak Consensus <ref> [FLP85] </ref> actually showed that even the Weak Consensus problem cannot be solved (deterministically) in an asynchronous system. <p> Chapter 5 Related work 5.1 Partial synchrony Fischer, Lynch and Paterson showed that Consensus cannot be solved in an asynchronous system subject to crash failures <ref> [FLP85] </ref>. The fundamental reason why Consensus cannot be solved in completely asynchronous systems is the fact that, in such systems, it is impossible to reliably distinguish a process that has crashed from one that is merely very slow. In other words, Consensus is unsolvable because accurate failure detection is impossible.
Reference: [GSTC90] <author> Ajei Gopal, Ray Strong, Sam Toueg, and Flaviu Cristian. </author> <title> Early-delivery atomic broadcast. </title> <booktitle> In Proceedings of the Ninth ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 297-310, </pages> <month> August </month> <year> 1990. </year>
Reference: [Had84] <author> Vassos Hadzilacos. </author> <title> Issues of Fault Tolerance in Concurrent Computations. </title> <type> Ph.D. dissertation, </type> <institution> Harvard University, </institution> <month> June </month> <year> 1984. </year> <note> Department of Computer Science Technical Report 11-84. </note>
Reference-contexts: Several types of failures have been studied in the literature. These include (1) crash failures|in which a faulty process stops prematurely and does nothing from that point on [LF82], (2) omission failures|in which a faulty process can intermittently omit to send or receive messages <ref> [Had84, PT86] </ref>, and (3) arbitrary failures|in which faulty processes can behave arbitrarily [LSP82]. In this thesis, we only consider crash failures. 11 12 Types of communication failures: Several models of link failures have been considered in the literature, including crash, omission and arbitrary failures.
Reference: [HM90] <author> Joseph Y. Halpern and Yoram Moses. </author> <title> Knowledge and common knowledge in a distributed environment. </title> <journal> Journal of the ACM, </journal> <volume> 37(3) </volume> <pages> 549-587, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: ; H; I; S; T i using D; 8t; 8p; q 2 : [9t 0 : (R; t 0 ) j= K p (q =2 F (t))] ) [9t 00 t : q 62 H (p; t 00 )] 109 The knowledge theoretic operator K p can be defined formally <ref> [HM90] </ref>. Informally (R; t) j= iff in run R at time t, predicate holds. We say (R; t) ~ p (R 0 ; t 0 ) iff the run R at time t and the run R 0 at time t 0 are indistinguishable to p.
Reference: [LA87] <author> M.C. Loui and Abu-Amara. </author> <title> Memory requirements for agreement among unreliable asynchronous processes. </title> <booktitle> Advances in computing research, </booktitle> <volume> 4 </volume> <pages> 163-183, </pages> <year> 1987. </year>
Reference-contexts: failure detector can be implemented in different (indeed, incomparable) models of partial synchrony. 5.2 The application of failure detection in shared memory systems Loui and Abu-Amara showed that in an asynchronous shared memory system with atomic read/write registers, Consensus cannot be solved even if at most one process may crash <ref> [LA87] </ref>. This raises the following natural question: can we circumvent this impossibility result using unreliable failure detectors? In a recent work, Lo shows that this is indeed possible [Lo93].
Reference: [Lam78] <author> Leslie Lamport. </author> <booktitle> The implementation of reliable distributed multipro-cess systems. Computer Networks, </booktitle> <volume> 2 </volume> <pages> 95-114, </pages> <year> 1978. </year>
Reference: [LF82] <author> Leslie Lamport and Michael Fischer. </author> <title> Byzantine generals and transaction commit protocols. </title> <type> Technical Report 62, </type> <institution> SRI International, </institution> <month> April </month> <year> 1982. </year>
Reference-contexts: Several types of failures have been studied in the literature. These include (1) crash failures|in which a faulty process stops prematurely and does nothing from that point on <ref> [LF82] </ref>, (2) omission failures|in which a faulty process can intermittently omit to send or receive messages [Had84, PT86], and (3) arbitrary failures|in which faulty processes can behave arbitrarily [LSP82].
Reference: [Lo93] <author> Wai Kau Lo. </author> <title> Using failure detectors to solve consensus in asynchronous shared-memory systems. </title> <type> Masters dissertation, </type> <institution> University of Toronto, </institution> <month> January </month> <year> 1993. </year>
Reference-contexts: This raises the following natural question: can we circumvent this impossibility result using unreliable failure detectors? In a recent work, Lo shows that this is indeed possible <ref> [Lo93] </ref>. In particular, he shows that using a Strong Failure Detector and atomic registers, one can solve Consensus for any number of failures.
Reference: [LSP82] <author> Leslie Lamport, Robert Shostak, and Marshall Pease. </author> <title> The Byzantine generals problem. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 4(3) </volume> <pages> 382-401, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: These include (1) crash failures|in which a faulty process stops prematurely and does nothing from that point on [LF82], (2) omission failures|in which a faulty process can intermittently omit to send or receive messages [Had84, PT86], and (3) arbitrary failures|in which faulty processes can behave arbitrarily <ref> [LSP82] </ref>. In this thesis, we only consider crash failures. 11 12 Types of communication failures: Several models of link failures have been considered in the literature, including crash, omission and arbitrary failures. In this thesis, we assume that the communication subsystem is reliable, i.e., no link failures occur.
Reference: [MDH86] <author> Yoram Moses, Danny Dolev, and Joseph Y. Halpern. </author> <title> Cheating husbands and other stories: a case study of knowledge, action, </title> <journal> and communication. Distributed Computing, </journal> <volume> 1(3) </volume> <pages> 167-176, </pages> <year> 1986. </year> <month> 120 </month>
Reference: [MSF87] <author> C. Mohan, R. Strong, and S. Finkelstein. </author> <title> Methods for distributed transaction commit and recovery using Byzantine agreement within clusters of processors. </title> <booktitle> In Proceedings of the Sixth ACM Symposium on Principles of Distributed Computing, </booktitle> <year> 1987. </year>
Reference-contexts: Extending our results to other types of failures, such as omission (cf. <ref> [MSF87, Had84,PT86] </ref>) and arbitrary failures (cf. [PSL80]), remains a goal for future work. We showed that 3W is weaker than any failure detector that can be used to solve Consensus.
Reference: [Mul87] <author> Sape J. Mullender, </author> <title> editor. The Amoeba distributed operating system: </title> <booktitle> Selected papers 1984 - 1987. </booktitle> <institution> Centre for Mathematics and Computer Science, </institution> <year> 1987. </year>
Reference-contexts: Atomic Broadcast allows processes to reliably broadcast messages, so that they agree on the set of messages they deliver and the order of message deliveries. Applications based on these paradigms include SIFT [WLG + 78], State Machines [Lam78,Sch90], Isis [BJ87, BCJ + 90], Psync [PBS89], Amoeba <ref> [Mul87] </ref>, Delta-4 [Pow91], Transis [ADKM91], HAS [Cri87], FAA [CDD90], and Atomic Commitment. Given their wide applicability, Consensus and Atomic Broadcast have been extensively studied by both theoretical and experimental researchers for over a decade.
Reference: [PBS89] <author> L. L. Peterson, N. C. Bucholz, and Richard D. Schlichting. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> In ACM Transactions on computer systems 7,3, </journal> <pages> pages 217-246, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: Atomic Broadcast allows processes to reliably broadcast messages, so that they agree on the set of messages they deliver and the order of message deliveries. Applications based on these paradigms include SIFT [WLG + 78], State Machines [Lam78,Sch90], Isis [BJ87, BCJ + 90], Psync <ref> [PBS89] </ref>, Amoeba [Mul87], Delta-4 [Pow91], Transis [ADKM91], HAS [Cri87], FAA [CDD90], and Atomic Commitment. Given their wide applicability, Consensus and Atomic Broadcast have been extensively studied by both theoretical and experimental researchers for over a decade.
Reference: [PGM89] <author> Frank Pittelli and Hector Garcia-Molina. </author> <title> Reliable scheduling in a tmr database system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(1) </volume> <pages> 25-60, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: Atomic Broadcast is a powerful communication paradigm for fault-tolerant distributed computing <ref> [CM84, CASD85, BJ87, PGM89, BGT90, GSTC90,Sch90] </ref>. We now show that Consensus and Atomic Broadcast are equivalent in asynchronous systems with crash failures. This is shown by reducing each to the other. 8 In other words, a solution for one automatically yields a solution for the other.
Reference: [Pow91] <editor> D. Powell, editor. Delta-4: </editor> <title> A Generic Architecture for Dependable Distributed Computing. </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Atomic Broadcast allows processes to reliably broadcast messages, so that they agree on the set of messages they deliver and the order of message deliveries. Applications based on these paradigms include SIFT [WLG + 78], State Machines [Lam78,Sch90], Isis [BJ87, BCJ + 90], Psync [PBS89], Amoeba [Mul87], Delta-4 <ref> [Pow91] </ref>, Transis [ADKM91], HAS [Cri87], FAA [CDD90], and Atomic Commitment. Given their wide applicability, Consensus and Atomic Broadcast have been extensively studied by both theoretical and experimental researchers for over a decade.
Reference: [PSL80] <author> M. Pease, R. Shostak, and Leslie Lamport. </author> <title> Reaching agreement in the presence of faults. </title> <journal> Journal of the ACM, </journal> <volume> 27(2) </volume> <pages> 228-234, </pages> <month> April </month> <year> 1980. </year>
Reference-contexts: Extending our results to other types of failures, such as omission (cf. [MSF87, Had84,PT86]) and arbitrary failures (cf. <ref> [PSL80] </ref>), remains a goal for future work. We showed that 3W is weaker than any failure detector that can be used to solve Consensus.
Reference: [PT86] <author> Kenneth J. Perry and Sam Toueg. </author> <title> Distributed agreement in the presence of processor and communication faults. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 12(3) </volume> <pages> 477-482, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: Several types of failures have been studied in the literature. These include (1) crash failures|in which a faulty process stops prematurely and does nothing from that point on [LF82], (2) omission failures|in which a faulty process can intermittently omit to send or receive messages <ref> [Had84, PT86] </ref>, and (3) arbitrary failures|in which faulty processes can behave arbitrarily [LSP82]. In this thesis, we only consider crash failures. 11 12 Types of communication failures: Several models of link failures have been considered in the literature, including crash, omission and arbitrary failures.
Reference: [RB91] <author> Aleta Ricciardi and Ken Birman. </author> <title> Using process groups to implement failure detection in asynchronous environments. </title> <booktitle> In Proceedings of the Tenth ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 341-351. </pages> <publisher> ACM Press, </publisher> <month> August </month> <year> 1991. </year>
Reference-contexts: This makes the presentation of applications and their proof of correctness more modular. Our approach is well-suited to model many existing systems that decouple the design of fault-tolerant applications from 2 A different approach was taken by the Isis system <ref> [RB91] </ref>: a correct process that is wrongly suspected to have crashed, is forced to leave the system. In other words, the Isis failure detector forces the system to conform to its view. To applications such a failure detector makes no mistakes. <p> By definition, k is a critical index. 2 The rest of the proof remains unchanged. 4.6.3 Failure detectors with infinite range of output values The failure detectors in <ref> [RB91] </ref> and Chapter 3 only output lists of processes suspected to have crashed. Since the set of processes is finite, the range of possible output values of these failure detectors is also finite. <p> Furthermore, processes are never "discriminated against" if they are falsely suspected to have crashed. Isis takes an alternative approach based on the assumption that failure detectors rarely make mistakes <ref> [RB91] </ref>. In those cases in which a correct process p is falsely suspected by the failure detector, p is effectively forced "to crash" (via a group membership protocol that removes p from all the groups that it belongs to).
Reference: [Rei82] <author> Rudiger Reischuk. </author> <title> A new solution for the Byzantine general's problem. </title> <type> Technical Report RJ 3673, </type> <institution> IBM Research Laboratory, </institution> <month> November </month> <year> 1982. </year>
Reference: [Sch90] <author> Fred B. Schneider. </author> <title> Implementing fault-tolerant services using the state machine approach: A tutorial. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 299-319, </pages> <month> December </month> <year> 1990. </year>
Reference: [WLG + 78] <author> John H. Wensley, Leslie Lamport, Jack Goldberg, Milton W. Green, Karl N. Levitt, P.M. Melliar-Smith, Robert E. Shostak, and Charles B. Weinstock. SIFT: </author> <title> Design and analysis of a fault-tolerant computer for aircraft control. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 66(10) </volume> <pages> 1240-1255, </pages> <month> October </month> <year> 1978. </year>
Reference-contexts: Atomic Broadcast allows processes to reliably broadcast messages, so that they agree on the set of messages they deliver and the order of message deliveries. Applications based on these paradigms include SIFT <ref> [WLG + 78] </ref>, State Machines [Lam78,Sch90], Isis [BJ87, BCJ + 90], Psync [PBS89], Amoeba [Mul87], Delta-4 [Pow91], Transis [ADKM91], HAS [Cri87], FAA [CDD90], and Atomic Commitment. Given their wide applicability, Consensus and Atomic Broadcast have been extensively studied by both theoretical and experimental researchers for over a decade.
References-found: 40

