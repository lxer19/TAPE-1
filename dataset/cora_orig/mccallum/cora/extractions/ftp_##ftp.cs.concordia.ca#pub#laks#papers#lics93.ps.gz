URL: ftp://ftp.cs.concordia.ca/pub/laks/papers/lics93.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/laks/papers.html
Root-URL: http://www.cs.concordia.ca
Title: Homomorphic Tree Embeddings and Their Applications to Recursive Program Optimization  
Author: Laks V.S. Lakshmanan Karima Ashraf and Jiawei Han 
Address: Montreal, Quebec  Burnaby, BC  
Affiliation: Dept. of Computer Science, Concordia University,  Dept. of Computer Science, Simon Fraser University,  
Note: Appears in: LICS '93.  
Abstract: Abstrct: We study the problems of stage preserving linearization and 1-boundedness for a class of nonlinear single rule recursive programs and develop syntactic characterizations for both. Our characterizations lead to a polynomial time algorithm for the former and a linear time algorithm for the latter. Stage preserving linearization results in a significant improvement in evaluation efficiency, compared to a linearization which does not preserve stages. The class of non-linear sirups which are stage preserving lin-earizable includes several classes of programs which can be linearized only using a mix of left and right linear rules, as well as programs which cannot be linearized using previously known techniques. Our study makes use of a novel technique based on the notion of homomorphic tree embeddings. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Chaudhuri, S. and Vardi, M.Y. </author> <title> On the equivalence of recursive and nonrecursive datalog programs. </title> <booktitle> In Proc. 11th ACM SIGACT-SIGMOD-SIGART Symp. on Principles of Database Systems, </booktitle> <year> 1992. </year>
Reference-contexts: The problem of testing whether a given recursive program is equivalent to a given non-recursive program is different from that of testing boundedness. Chaudhuri and Vardi <ref> [1] </ref> has shown that this is decidable but complete for 3EXPTIME for general programs. Contributions: We develop a new technique based on homomorphic tree embeddings for studying sp-linearizability and 1-boundedness. We give a characterization of these properties in terms of such embed-dings.
Reference: [2] <author> Gaifman, H., Mairson, H., Sagiv, Y., and Vardi, M.Y. </author> <title> Undecidable optimization problems for database logic programs. </title> <type> Technical report, IBM Research Report RJ 5583 (56702), </type> <address> Yorktown Heights, New York,, </address> <month> April 3 </month> <year> 1987. </year>
Reference-contexts: Previous Work: Substantial amount of work has been done in recursive query optimization and we will only refer to a few here for want of space. Firstly, Gaif-man et. al. <ref> [2] </ref> has shown that the general problem of linearization, i.e. testing if a given bilinear recursion is equivalent to a linear recursion is undecidable provided the complexity classes PTIME and NC are distinct.
Reference: [3] <author> Hillebrand, G.G., Mairson, H.G., and Vardi, M.Y. </author> <title> Tools for datalog boundedness. </title> <booktitle> In Proc. ACM Symp. PODS, </booktitle> <pages> pages 1-12, </pages> <year> 1991. </year>
Reference-contexts: Saraiya [16] among other things tightens this NP-hardness result to more restricted classes of sirups. Extensive work has been done on the topic of boundedness and we refer the reader to Vardi [19], Kanellakis and Abiteboul [7], and Hillebrand et. al. <ref> [3] </ref> for recent surveys and accounts of various decid-ability and undecidability results. Ioannidis [4] and Naughton [11] are some early works reporting positive results on boundedness. For works dealing with problems more general than boundedness (e.g., recursive redundancy and proof-tree removability) see Naughton [12] and Lakshmanan and Hernandez [10].
Reference: [4] <author> Ioannidis, Y.E. </author> <title> A time bound on the materialization of some recursively defined views. </title> <booktitle> In Proc. 11th Int. Conf. of Very Large Data Bases, </booktitle> <pages> pages 219-226, </pages> <year> 1985. </year>
Reference-contexts: Extensive work has been done on the topic of boundedness and we refer the reader to Vardi [19], Kanellakis and Abiteboul [7], and Hillebrand et. al. [3] for recent surveys and accounts of various decid-ability and undecidability results. Ioannidis <ref> [4] </ref> and Naughton [11] are some early works reporting positive results on boundedness. For works dealing with problems more general than boundedness (e.g., recursive redundancy and proof-tree removability) see Naughton [12] and Lakshmanan and Hernandez [10].
Reference: [5] <author> Ioannidis, Y.E. and Ramakrishnan, R. </author> <title> Efficient transitive closure algorithms. </title> <booktitle> In Proc. 14th VLDB Conference, </booktitle> <pages> pages 382-394, </pages> <year> 1987. </year>
Reference-contexts: E.g., when transitive closure based on bilinear recursion is ZYT-linearized it can lead to an exponential increase in the stage of certain tuples. While for transitive closure itself this problem is easily solved using the logarithmic speedup techniques proposed in the literature (e.g., see <ref> [18, 5] </ref>), these techniques may not be applicable when the recursion is not one-sided 2 , without increasing the arity of the recursive predicate.
Reference: [6] <author> Kanellakis, P. </author> <title> Logic programming and parallel complexity. </title> <booktitle> In Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 547-586. </pages> <year> 1988. </year> <editor> J. Minker ed., </editor> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: For works dealing with problems more general than boundedness (e.g., recursive redundancy and proof-tree removability) see Naughton [12] and Lakshmanan and Hernandez [10]. The latter also considers the effect of functional dependencies on proof-tree removability of subgoals (and hence boundedness). On the specific problem of 1-boundedness, Kanellakis <ref> [6] </ref> has shown that detecting 1-boundedness is NP-hard even for linear sirups defining a predicate of arity four. Saraiya [16] has tightened this result to more restricted classes of linear sirups. He also gives a polynomial time algorithm for testing 1-boundedness of linear sirups with no repeating subgoals. <p> Thus an efficiently testable characterization is necessary for 1-boundedness. We shall actually develop a simple and elegant characterization of 1-boundedness. As we shall show, our characterization leads to a linear time algorithm for the recognition of such programs. Kanellakis <ref> [6] </ref> has shown that when the subgoals are allowed to repeat in the recursive rule, detection of (uniform) 1-boundedness is NP-hard even for linear programs.
Reference: [7] <author> Kanellakis, P. and Abiteboul, S. </author> <title> Database theory column: Deciding bounded recursion in database logic programs. </title> <journal> SIGACT News, </journal> <volume> 20(4) </volume> <pages> 17-23, </pages> <year> 1989. </year>
Reference-contexts: Saraiya [16] among other things tightens this NP-hardness result to more restricted classes of sirups. Extensive work has been done on the topic of boundedness and we refer the reader to Vardi [19], Kanellakis and Abiteboul <ref> [7] </ref>, and Hillebrand et. al. [3] for recent surveys and accounts of various decid-ability and undecidability results. Ioannidis [4] and Naughton [11] are some early works reporting positive results on boundedness.
Reference: [8] <author> Kemp, D.B., Ramamohanarao, K., and Somogyi, Z. Right-, </author> <title> left- and multi-linear rule transformations that maintain context information. </title> <booktitle> In Proc. 16th VLDB Conf., </booktitle> <pages> pages 235-242, </pages> <year> 1989. </year>
Reference-contexts: Thus, stage preserving linearization achieves a substantial improvement in query processing efficiency without the aid of additional strategies during evaluation, compared to a linearization technique which does not preserve the stage. For general (linear) recursive programs, this is very important. Finally, several techniques developed for mixed linear recursions <ref> [13, 8] </ref> can be taken advantage of when evaluating specific queries 1 The stage of a tuple in a bottom-up fixpoint evaluation is the minimum number of iterations needed to produce that tuple.
Reference: [9] <author> Lakshmanan, Laks V.S., Ashraf, K., and Han, J. </author> <title> Homomorphic trees embeddings and their applications to recursive program optimization. </title> <type> Technical report, </type> <institution> Concordia University, Mon-treal, Canada, </institution> <month> April </month> <year> 1993. </year> <note> Submitted to a technical journal (A preliminary version appears in IEEE Symp. on Logic in Computer Science, Mon-treal, Quebec.). </note>
Reference-contexts: The last point implies that the number of iterations needed to reach a fixpoint using is equal to the number of iterations needed using . It is possible to show that each iteration based on involves less work than a similar iteration based on <ref> [9] </ref>. Thus, stage preserving linearization achieves significant savings in the cost of query evaluation. In contrast, a technique such as ZYT-linearization does not preserve the stage in general. <p> Based on our characterizations, we develop a polynomial time algorithm for testing sp-linearizability and a linear time algorithm for 1-boundedness. For want of space, we suppress the proofs of all our results and the algorithmic details in this extended abstract. These appear in the full paper <ref> [9] </ref>. 2 Fundamentals In this section, we shall develop the conventions, notations, and fundamental notions that we shall employ in this paper. For standard terminology of deductive databases (including proof-trees, conjunctive queries, equivalence of programs, containment mappings, etc.), the reader is referred to [17]. <p> The reason is that testing whether the sirup will admit any given type of embedding will involve considering an exponential number of mapping possibilities for the edb subgoals in the tree. In the full paper <ref> [9] </ref>, we develop a complete syntactic characterization for any of the embeddings to hold for a sirup, and hence for the sirup to be sp-linearizable. For want of space, we illustrate our characterization only for the case of squash-embeddings. We first need some notions. <p> In <ref> [9] </ref> we develop the syntactic characterization for the existence of all types of embed-dings and also develop a polynomial time algorithm which tests whether the given sirup is sp-linearizable and constructs an embedding if one exists. We also establish its correctness and complexity. <p> It can be determined in time linear in the size of a non-linear sirup whether the sirup is 1-bounded. 2 In <ref> [9] </ref> we give a linear time algorithm and prove its correctness and complexity. As an example, consider the program in Example 1.3. This program is 1-bounded since it satisfies the condition 2 above.
Reference: [10] <author> Lakshmanan, Laks V.S. and Hernandez, H. </author> <title> Structural query optimization: A uniform framework for semantic query optimization in deductive databases. </title> <booktitle> In Proc. ACM Symp. PODS, </booktitle> <pages> pages 102-114, </pages> <address> Denver, CO, </address> <year> 1991. </year>
Reference-contexts: Ioannidis [4] and Naughton [11] are some early works reporting positive results on boundedness. For works dealing with problems more general than boundedness (e.g., recursive redundancy and proof-tree removability) see Naughton [12] and Lakshmanan and Hernandez <ref> [10] </ref>. The latter also considers the effect of functional dependencies on proof-tree removability of subgoals (and hence boundedness). On the specific problem of 1-boundedness, Kanellakis [6] has shown that detecting 1-boundedness is NP-hard even for linear sirups defining a predicate of arity four.
Reference: [11] <author> Naughton, J.F. </author> <title> Data independent recursion in deductive databases. </title> <booktitle> In Proc. 5th ACM Symp. PODS, </booktitle> <pages> pages 267-279, </pages> <year> 1986. </year>
Reference-contexts: Extensive work has been done on the topic of boundedness and we refer the reader to Vardi [19], Kanellakis and Abiteboul [7], and Hillebrand et. al. [3] for recent surveys and accounts of various decid-ability and undecidability results. Ioannidis [4] and Naughton <ref> [11] </ref> are some early works reporting positive results on boundedness. For works dealing with problems more general than boundedness (e.g., recursive redundancy and proof-tree removability) see Naughton [12] and Lakshmanan and Hernandez [10]. The latter also considers the effect of functional dependencies on proof-tree removability of subgoals (and hence boundedness).
Reference: [12] <author> Naughton, J.F. </author> <title> Redundancy in function free recursive inference rules. </title> <booktitle> In Proc. of the IEEE Symposium on Logic Programming, </booktitle> <year> 1986. </year>
Reference-contexts: Ioannidis [4] and Naughton [11] are some early works reporting positive results on boundedness. For works dealing with problems more general than boundedness (e.g., recursive redundancy and proof-tree removability) see Naughton <ref> [12] </ref> and Lakshmanan and Hernandez [10]. The latter also considers the effect of functional dependencies on proof-tree removability of subgoals (and hence boundedness). On the specific problem of 1-boundedness, Kanellakis [6] has shown that detecting 1-boundedness is NP-hard even for linear sirups defining a predicate of arity four.
Reference: [13] <author> Naughton, J.F., Ramakrishnan, R., Sagiv, Y., and Ullman, J.D. </author> <title> Efficient evaluation of right-, left-, and multi-linear rules. </title> <booktitle> In Proc. ACM SIG-MOD '89 International Conference on Management of Data, </booktitle> <pages> pages 380-391, </pages> <year> 1990. </year>
Reference-contexts: Thus, stage preserving linearization achieves a substantial improvement in query processing efficiency without the aid of additional strategies during evaluation, compared to a linearization technique which does not preserve the stage. For general (linear) recursive programs, this is very important. Finally, several techniques developed for mixed linear recursions <ref> [13, 8] </ref> can be taken advantage of when evaluating specific queries 1 The stage of a tuple in a bottom-up fixpoint evaluation is the minimum number of iterations needed to produce that tuple.
Reference: [14] <author> Ramakrishnan, R., Sagiv, Y., Ullman, J.D., and Vardi, M. </author> <title> Proof-tree transformation theorems and their applications. </title> <booktitle> In Proc. 8th ACM Symp. PODS, </booktitle> <pages> pages 172-181, </pages> <year> 1989. </year>
Reference-contexts: Zhang et. al. [21] gives a polynomial time characterization for this property when there is at most one edb subgoal in the sirup. Saraiya [15] extends this result to the case where there are a number of distinct edb subgoals in the sirup body. Ramakrishnan et. al. <ref> [14] </ref> proves several proof-tree transformation theorems and shows their application to commutativ-ity of rules and ZYT-linearizability. They show that when the edb subgoals are allowed to repeat, ZYT-linearizability is NP-hard, and may be undecidable. Saraiya [16] among other things tightens this NP-hardness result to more restricted classes of sirups. <p> In order to linearize an arbitrary non-linear tree T non , a transformation rule T !T 0 must satisfy two conditions, as shown in <ref> [14] </ref>: (i) T T 0 ; (ii) it should be possible to transform an arbitrary tree T non into a linear tree by finitely many applications of the rule T !T 0 . <p> Our study has led to a complete syntactic characterization as well as efficient decision procedures for these problems (polynomial for the former and linear for the latter). The significance of sp-linearization was brought out. In comparing with previous approaches to linearization (e.g., <ref> [15, 14] </ref>) we note that they only consider the problem of testing equivalence to a specific linear sirup while in our approach, the linear program can consist of a number of recursive rules and the exact program to which equivalence is being tested in not known a priori.
Reference: [15] <author> Saraiya, Y. </author> <title> Linearizing nonlinear recursions in polynomial-time. </title> <booktitle> In Proc. 8th ACM SIGACT-SIGMOD-SIGACT Symp. of Principles of Database Systems, </booktitle> <pages> pages 182-189, </pages> <year> 1989. </year>
Reference-contexts: ZYT-linearizability is a specific way of linearizing a bilinear recursion, by replacing exactly one of the recursive subgoals of the sirup by the exit predicate. Zhang et. al. [21] gives a polynomial time characterization for this property when there is at most one edb subgoal in the sirup. Saraiya <ref> [15] </ref> extends this result to the case where there are a number of distinct edb subgoals in the sirup body. Ramakrishnan et. al. [14] proves several proof-tree transformation theorems and shows their application to commutativ-ity of rules and ZYT-linearizability. <p> Our study has led to a complete syntactic characterization as well as efficient decision procedures for these problems (polynomial for the former and linear for the latter). The significance of sp-linearization was brought out. In comparing with previous approaches to linearization (e.g., <ref> [15, 14] </ref>) we note that they only consider the problem of testing equivalence to a specific linear sirup while in our approach, the linear program can consist of a number of recursive rules and the exact program to which equivalence is being tested in not known a priori.
Reference: [16] <author> Saraiya, Y. </author> <title> Polynomial-time program transformations in deductive databases. </title> <booktitle> In Proc. 9th ACM SIGACT-SIGMOD-SIGACT Symp. on Principles of Database Systems, </booktitle> <pages> pages 132-144, </pages> <year> 1990. </year>
Reference-contexts: Ramakrishnan et. al. [14] proves several proof-tree transformation theorems and shows their application to commutativ-ity of rules and ZYT-linearizability. They show that when the edb subgoals are allowed to repeat, ZYT-linearizability is NP-hard, and may be undecidable. Saraiya <ref> [16] </ref> among other things tightens this NP-hardness result to more restricted classes of sirups. <p> The latter also considers the effect of functional dependencies on proof-tree removability of subgoals (and hence boundedness). On the specific problem of 1-boundedness, Kanellakis [6] has shown that detecting 1-boundedness is NP-hard even for linear sirups defining a predicate of arity four. Saraiya <ref> [16] </ref> has tightened this result to more restricted classes of linear sirups. He also gives a polynomial time algorithm for testing 1-boundedness of linear sirups with no repeating subgoals.
Reference: [17] <author> Ullman, J.D. </author> <title> Principles of Database and Knowledge-Base Systems, volume II. </title> <publisher> Computer Science Press, </publisher> <address> Maryland, </address> <year> 1989. </year>
Reference-contexts: These appear in the full paper [9]. 2 Fundamentals In this section, we shall develop the conventions, notations, and fundamental notions that we shall employ in this paper. For standard terminology of deductive databases (including proof-trees, conjunctive queries, equivalence of programs, containment mappings, etc.), the reader is referred to <ref> [17] </ref>. In this paper, we consider non-linear sirups of the form given in Definition 1.2, where the edb subgoals are distinct and the exit predicate e does not appear in the body of the sirup.
Reference: [18] <author> Valduriez, P. and Boral, H. </author> <title> Evaluation of recursive queries using join indices. </title> <booktitle> In Proc. 1st Expert Database Systems, </booktitle> <pages> pages 271-293, </pages> <year> 1986. </year>
Reference-contexts: E.g., when transitive closure based on bilinear recursion is ZYT-linearized it can lead to an exponential increase in the stage of certain tuples. While for transitive closure itself this problem is easily solved using the logarithmic speedup techniques proposed in the literature (e.g., see <ref> [18, 5] </ref>), these techniques may not be applicable when the recursion is not one-sided 2 , without increasing the arity of the recursive predicate.
Reference: [19] <author> Vardi, M.Y. </author> <title> Decidability and undecidability re-sults for boundedness of linear recursive queries. </title> <booktitle> In Proc. 7th ACM SIGACT-SIGMOD-SIGART Symp. on Principles of Database Systems, </booktitle> <pages> pages 341-351, </pages> <year> 1988. </year>
Reference-contexts: Saraiya [16] among other things tightens this NP-hardness result to more restricted classes of sirups. Extensive work has been done on the topic of boundedness and we refer the reader to Vardi <ref> [19] </ref>, Kanellakis and Abiteboul [7], and Hillebrand et. al. [3] for recent surveys and accounts of various decid-ability and undecidability results. Ioannidis [4] and Naughton [11] are some early works reporting positive results on boundedness.
Reference: [20] <author> Wood, P.T. </author> <title> Syntactic characterizations of 1-bounded datalog programs. </title> <booktitle> In International Conference on Deductive and Object-Oriented Databases, </booktitle> <year> 1991. </year>
Reference-contexts: Saraiya [16] has tightened this result to more restricted classes of linear sirups. He also gives a polynomial time algorithm for testing 1-boundedness of linear sirups with no repeating subgoals. Wood <ref> [20] </ref> has recently given a syntactic characterization and a linear time algorithm for 1-boundedness for a subclass of linear sirups with some restrictions. The problem of testing whether a given recursive program is equivalent to a given non-recursive program is different from that of testing boundedness.
Reference: [21] <author> Zhang, W., Yu, C.T., and Troy, D. </author> <title> Necessary and sufficient conditions to linearize doubly recursive programs in logic databases. </title> <journal> ACM Transactions on Database Systems, </journal> <pages> pages 271-293, </pages> <year> 1990. </year>
Reference-contexts: e (U; V ); p (X 2 ; U ). 2 Some significant features of the linear programs (such as above) obtained using the linearization technique proposed in this paper are as follows. (1) Such equivalent linear programs cannot be obtained using previously proposed techniques. (2) While ZYT-type of linearization <ref> [21] </ref> considers replacing a non-linear sirup with either a left-linear rule or a right-linear rule, our technique is (also) applicable to programs which can only be linearized using a mix of left and right linear rules (and in some cases, as with P above, using one more rule). (3) For every <p> ZYT-linearizability is a specific way of linearizing a bilinear recursion, by replacing exactly one of the recursive subgoals of the sirup by the exit predicate. Zhang et. al. <ref> [21] </ref> gives a polynomial time characterization for this property when there is at most one edb subgoal in the sirup. Saraiya [15] extends this result to the case where there are a number of distinct edb subgoals in the sirup body.
References-found: 21

