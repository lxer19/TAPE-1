URL: http://www.almaden.ibm.com/cs/quest/papers/de97.ps
Refering-URL: http://www.almaden.ibm.com/cs/quest/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: High-dimensional Similarity Joins  
Author: Kyuseok Shim Ramakrishnan Srikant Rakesh Agrawal 
Address: 650 Harry Road, San Jose, CA 95120  
Affiliation: IBM Almaden Research Center  
Abstract: Many emerging data mining applications require a similarity join between points in a high-dimensional domain. We present a new algorithm that utilizes a new index structure, called the *-kdB tree, for fast spatial similarity joins on high-dimensional points. This index structure reduces the number of neighboring leaf nodes that are considered for the join test, as well as the traversal cost of finding appropriate branches in the internal nodes. The storage cost for internal nodes is independent of the number of dimensions. Hence the proposed index structure scales to high-dimensional data. Empirical evaluation, using synthetic and real-life datasets, shows that similarity join using the *-kdB tree is 2 to an order of magnitude faster than the R + tree, with the performance gap increasing with the number of dimensions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agrawal, C. Faloutsos, and A. Swami. </author> <title> Efficient similarity search in sequence databases. </title> <booktitle> In Proc. of the Fourth Int'l Conference on Foundations of Data Organization and Algorithms, </booktitle> <address> Chicago, </address> <month> October </month> <year> 1993. </year> <booktitle> Also in Lecture Notes in Computer Science 730, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1993, </year> <month> 6984. </month>
Reference-contexts: 1 Introduction Many emerging data mining applications require efficient processing of similarity joins on high-dimensional points. Examples include applications in time-series databases <ref> [1, 2] </ref>, multimedia databases [9, 14, 13], medical databases [3, 21], and scientific databases [22]. Some typical queries in these applications include: (1) discover all stocks with similar price movements; (2) find all pairs of similar images; (3) retrieve music scores similar to a target music score.
Reference: [2] <author> R. Agrawal, K.-I. Lin, H. S. Sawhney, and K. Shim. </author> <title> Fast similarity search in the presence of noise, scaling, and translation in time-series databases. </title> <booktitle> In Proc. of the 21st Int'l Conference on Very Large Databases, </booktitle> <pages> pages 490501, </pages> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Many emerging data mining applications require efficient processing of similarity joins on high-dimensional points. Examples include applications in time-series databases <ref> [1, 2] </ref>, multimedia databases [9, 14, 13], medical databases [3, 21], and scientific databases [22]. Some typical queries in these applications include: (1) discover all stocks with similar price movements; (2) find all pairs of similar images; (3) retrieve music scores similar to a target music score. <p> For example, given all pairs of similar images, the images can be clustered into groups such that the images in each group are similar. To motivate the need for multidimensional indices in such applications, consider the problem of finding all pairs of similar time-sequences. The technique in <ref> [2] </ref> solves this problem by breaking each time-sequences into a set of contiguous subsequences, and finding all subsequences similar to each other. If two sequences have enough similar fl Currently at Bell Laboratories, Murray Hill, NJ. subsequences, they are considered similar. <p> Similar Time Sequences Consider the problem of finding similar time sequences. The algorithm proposed in <ref> [2] </ref> first finds similar atomic subsequences, and then stitches together the atomic subsequence matches to get similar subsequences or similar sequences. Each sequence is broken into atomic subsequences by using a sliding window of size w. The atomic subsequences are then mapped to points in a w-dimensional space. <p> The atomic subsequences are then mapped to points in a w-dimensional space. The problem of finding similar atomic subsequences now corresponds to the problem of finding pairs of w-dimensional points within * distance of each other, using the L 1 norm. (See <ref> [2] </ref> for the rationale behind this approach.) The time sequences in our experiment were the daily closing prices of 795 U.S. mutual funds, from Jan 4, 1993 to March 3, 1995. There were around 400,000 points for the experiment (since each sequence is broken using a sliding window).
Reference: [3] <author> M. Arya, W. Cody, C. Faloutsos, J. Richardson, and A. Toga. QBISM: </author> <title> A prototype 3-d medical image database system. </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 16(1):3842, </volume> <month> March </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Many emerging data mining applications require efficient processing of similarity joins on high-dimensional points. Examples include applications in time-series databases [1, 2], multimedia databases [9, 14, 13], medical databases <ref> [3, 21] </ref>, and scientific databases [22]. Some typical queries in these applications include: (1) discover all stocks with similar price movements; (2) find all pairs of similar images; (3) retrieve music scores similar to a target music score. These queries are often a prelude to clustering the objects.
Reference: [4] <author> N. Beckmann, H.-P. Kriegel, R. Schneider, and B. Seeger. </author> <title> The R fl -tree: an efficient and robust access method for points and rectangles. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 322331, </pages> <address> Atlantic City, NJ, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: We also give a brief overview of other indices. We then discuss inadequacies of the current index structures. 1 Our experiments indicated that the R + tree was better than the R tree [8] or the R fl tree <ref> [4] </ref> tree for high-dimensional similarity joins. 2.1 The R-tree family R-tree [8] is a balanced tree in which each node represents a rectangular region. Each internal node in a R-tree stores a minimum bounding rectangle (MBR) for each of its children. <p> Figure 1 shows an example of R-tree. This tree consists of 4 leaf nodes and 3 internal nodes. The MBRs are N1,N2,L1,L2,L3 and L4. The root node has two children whose MBRs are N1 and N2. R fl tree <ref> [4] </ref> added two major enhancements to R-tree. First, rather than just considering the area, the node splitting heuristic in R fl tree also minimizes the perimeter and overlap of the bounding regions.
Reference: [5] <author> J. L. Bentley. </author> <title> Multidimensional binary search trees used for associative searching. </title> <journal> Communication of ACM, </journal> <volume> 18(9), </volume> <year> 1975. </year>
Reference-contexts: The main difference is that the bounding rectangles cover the entire space, unlike the MBRs of the R + tree. hB-tree [12] is similar to the kdB tree except that bounding rectangles of the children of an internal node are organized as a K-D tree <ref> [5] </ref> rather than as a list of MBRs. (The K-D-tree is a binary tree for multi-dimensional points. In each level of the K-D-tree, only one dimension, chosen cyclically, is used to decide the subtree for traversal.) Further, the bounding regions may have rectangular holes in them.
Reference: [6] <author> S. Berchtold, D. Kiem, and H. Kriegel. </author> <title> The x-tree: An index structure for high-dimensional data. </title> <booktitle> In Proc. of the 22nd Int'l Conference on Very Large Databases, </booktitle> <address> Bombay, India, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: R + tree [19] imposes the constraint that no two bounding regions of a non-leaf node overlap. Thus, except for the boundary surfaces, there will be only one path to every leaf region, which can reduce search and join costs. X-tree <ref> [6] </ref> avoids splits that could result in high degree of overlap of bounding regions for R fl -tree. Their experiments show that the overlap of bounding regions increases significantly for high dimensional data resulting in performance deterioration in the R fl -tree. <p> Experiments show that X-tree improves the performance of point query and nearest-neighbor query compared to R fl -tree and TV-tree (described below). No comparison with R + -tree is given in <ref> [6] </ref> for point data.
Reference: [7] <author> C. Faloutsos and K.-I. Lin. </author> <title> Fastmap: A fast algorithm for indexing, data-mining and visualization of traditional and multimedia datasets. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 163174, </pages> <address> San Jose, CA, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: This translates to finding all points close to a query point. Even if there is no direct mapping from an object to a point in a multi-dimensional space, this paradigm can still be used if a distance function between objects is available. An algorithm is presented in <ref> [7] </ref> for generating a mapping from an object to a multi-dimensional point, given a set of objects and a distance function. Current spatial access methods (see [18, 8] for an overview) have mainly concentrated on storing map information, which is a 2-dimensional or 3-dimensional space.
Reference: [8] <author> A. Guttman. R-trees: </author> <title> a dynamic index structure for spatial searching. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 4757, </pages> <address> Boston, Mass, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: An algorithm is presented in [7] for generating a mapping from an object to a multi-dimensional point, given a set of objects and a distance function. Current spatial access methods (see <ref> [18, 8] </ref> for an overview) have mainly concentrated on storing map information, which is a 2-dimensional or 3-dimensional space. While they work well with low dimensional data points, the time and space for these indices grow rapidly with dimensionality. <p> We also give a brief overview of other indices. We then discuss inadequacies of the current index structures. 1 Our experiments indicated that the R + tree was better than the R tree <ref> [8] </ref> or the R fl tree [4] tree for high-dimensional similarity joins. 2.1 The R-tree family R-tree [8] is a balanced tree in which each node represents a rectangular region. Each internal node in a R-tree stores a minimum bounding rectangle (MBR) for each of its children. <p> We then discuss inadequacies of the current index structures. 1 Our experiments indicated that the R + tree was better than the R tree <ref> [8] </ref> or the R fl tree [4] tree for high-dimensional similarity joins. 2.1 The R-tree family R-tree [8] is a balanced tree in which each node represents a rectangular region. Each internal node in a R-tree stores a minimum bounding rectangle (MBR) for each of its children. The MBR covers the space of the points in the child node. The MBRs of siblings can overlap.
Reference: [9] <author> H. V. Jagadish. </author> <title> A retrieval technique for similar shapes. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, pages 208217, </booktitle> <address> Denver, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Many emerging data mining applications require efficient processing of similarity joins on high-dimensional points. Examples include applications in time-series databases [1, 2], multimedia databases <ref> [9, 14, 13] </ref>, medical databases [3, 21], and scientific databases [22]. Some typical queries in these applications include: (1) discover all stocks with similar price movements; (2) find all pairs of similar images; (3) retrieve music scores similar to a target music score.
Reference: [10] <author> K.-I. Lin, H. V. Jagadish, and C. Faloutsos. </author> <title> The TV-Tree: An index structure for high-dimensional data. </title> <journal> VLDB Journal, </journal> <volume> 3(4):517542, </volume> <year> 1994. </year>
Reference-contexts: In each level of the K-D-tree, only one dimension, chosen cyclically, is used to decide the subtree for traversal.) Further, the bounding regions may have rectangular holes in them. This reduces the cost of splitting a node compared to the kdB tree. TV-tree <ref> [10] </ref> uses a variable number of dimensions for indexing. TV-tree has a design parameter ff (active dimension) which is typically a small integer (1 or 2). For any node, only ff dimensions are used to represent bounding regions and to split nodes.
Reference: [11] <author> M.-L. Lo and C. V. Ravishankar. </author> <title> Spatial joins using seeded trees. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 209220, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: This problem is mitigated for the hB-tree or the TV-tree. This is not a problem for the grid-file. Build Time. The set of objects participating in a spatial join may often be pruned by selection predicates <ref> [11] </ref> (e.g. find all similar international funds). In those cases, it may be faster to perform the non-spatial selection predicate first (select international funds) and then perform spatial join on the result. Thus it is sometimes necessary to build a spatial index on-the-fly.
Reference: [12] <author> D. Lomet and B. Salzberg. </author> <title> The hB-tree: A multi-attribute indexing method with good guaranteed performance. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(4), </volume> <year> 1909. </year>
Reference-contexts: The shaded area contains screened points. 2.2 Other Index Structures kdB tree [17] is similar to the R + tree. The main difference is that the bounding rectangles cover the entire space, unlike the MBRs of the R + tree. hB-tree <ref> [12] </ref> is similar to the kdB tree except that bounding rectangles of the children of an internal node are organized as a K-D tree [5] rather than as a list of MBRs. (The K-D-tree is a binary tree for multi-dimensional points.
Reference: [13] <author> A. D. Narasimhalu and S. Christodoulakis. </author> <title> Multimedia information systems: the unfolding of a reality. </title> <journal> IEEE Computer, </journal> <volume> 24(10):68, </volume> <month> Oct </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Many emerging data mining applications require efficient processing of similarity joins on high-dimensional points. Examples include applications in time-series databases [1, 2], multimedia databases <ref> [9, 14, 13] </ref>, medical databases [3, 21], and scientific databases [22]. Some typical queries in these applications include: (1) discover all stocks with similar price movements; (2) find all pairs of similar images; (3) retrieve music scores similar to a target music score.
Reference: [14] <author> W. Niblack, R. Barber, W. Equitz, M. Flickner, E. Glasman, D. Petkovic, P. Yanker, C. Faloutsos, and G. Taubin. </author> <title> The qbic project: Querying images by content using color, texture and shape. </title> <booktitle> In SPIE 1993 Int'l Symposium on Electronic Imaging: Science and Technology, Conference 1908, Storage and Retrieval for Image and Video Databases, </booktitle> <month> Feb </month> <year> 1993. </year> <note> Also available as IBM Reseach Report RJ 9203 (81511), </note> <month> Feb 1, </month> <year> 1993, </year> <institution> Computer Science. </institution>
Reference-contexts: 1 Introduction Many emerging data mining applications require efficient processing of similarity joins on high-dimensional points. Examples include applications in time-series databases [1, 2], multimedia databases <ref> [9, 14, 13] </ref>, medical databases [3, 21], and scientific databases [22]. Some typical queries in these applications include: (1) discover all stocks with similar price movements; (2) find all pairs of similar images; (3) retrieve music scores similar to a target music score.
Reference: [15] <author> J. Nievergelt, H. Hinterberger, and K. Sevcik. </author> <title> The grid file: an adaptable, symmetric multikey file structure. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 9(1):3871, </volume> <year> 1984. </year>
Reference-contexts: Since the first k dimensions can no longer distinguish the points in those nodes, the next ff dimensions (after the k dimensions) are used to store bounding regions and for splitting. This reduces the storage and traversal cost for internal nodes. Grid-file <ref> [15] </ref> partitions the k-dimensional space as a grid; multiple grid buckets may be placed in a single disk page. A directory structure keeps track of the mapping from grid buckets to disk pages. A grid bucket must fit within a leaf page.
Reference: [16] <author> J. M. Patel and D. J. DeWitt. </author> <title> Partition Based Spatial-Merge Join. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 259270, </pages> <address> Montreal, Canada, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Thus it is sometimes necessary to build a spatial index on-the-fly. Current indices are designed to be built once; the cost of building them can be more than the cost of the join <ref> [16] </ref>. Skewed Data. Handling skewed data is not a problem for most current indices except the grid-file. In a k-dimensional space, a single data page overflow may result in a k 1 dimensional slice being added to the grid-file directory.
Reference: [17] <author> J. T. Robinson. </author> <title> The k-D-B-tree: A search structure for large multidimensional dynamic indexes. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 1018, </pages> <address> Ann Arbor, MI, </address> <month> April </month> <year> 1981. </year>
Reference-contexts: Figure 2 shows an example, where the rectangles with solid lines represent the MBRs of two leaf nodes and the dotted lines illustrate the extended boundaries. The shaded area contains screened points. 2.2 Other Index Structures kdB tree <ref> [17] </ref> is similar to the R + tree.
Reference: [18] <author> H. Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: An algorithm is presented in [7] for generating a mapping from an object to a multi-dimensional point, given a set of objects and a distance function. Current spatial access methods (see <ref> [18, 8] </ref> for an overview) have mainly concentrated on storing map information, which is a 2-dimensional or 3-dimensional space. While they work well with low dimensional data points, the time and space for these indices grow rapidly with dimensionality.
Reference: [19] <author> T. Sellis, N. Roussopoulos, and C. Faloutsos. </author> <title> The R + tree: a dynamic index for multi-dimensional objects. </title> <booktitle> In Proc. 13th Int'l Conference on Very Large Databases, </booktitle> <pages> pages 507518, </pages> <address> Brighton, England, </address> <year> 1987. </year>
Reference-contexts: This lets the *-kdB tree use the similarity distance limit * as a parameter in building the tree. Empirical evaluation shows that the build plus join time for the *-kdB tree is typically 3 to 35 times less than the join time for the R + tree <ref> [19] </ref>, 1 with the performance gap increasing with the number of dimensions. A pure main-memory data structure would not be very useful, since the data in many applications will not fit in memory. We extend the join algorithm to handle large amount of data while still using the *-kdB tree. <p> When a node becomes full, it is not split immediately, but a portion of the node is reinserted from the top level. With these two enhancements, the R fl tree generally outperforms R-tree. R + tree <ref> [19] </ref> imposes the constraint that no two bounding regions of a non-leaf node overlap. Thus, except for the boundary surfaces, there will be only one path to every leaf region, which can reduce search and join costs.
Reference: [20] <author> K. Shim, R. Srikant, and R. Agrawal. </author> <title> The *-kdb tree: A fast index structure for high-dimensional similarity joins. </title> <type> Research Report, </type> <institution> IBM Almaden Research Center, </institution> <address> San Jose, California, </address> <year> 1996. </year> <note> Available from http://www.almaden.ibm.com/cs/quest. </note>
Reference-contexts: We first experimented varying * for the L 1 , L 2 and L 1 norms. The relative performance of the (a) L 1 (b) L 2 (c) L 1 Uniform Distribution Gaussian Distribution Value algorithms is almost identical for the three distance metrics (See <ref> [20] </ref>). We only show the results for the L 2 -norm in the remaining experiments. * value. Figure 8 shows the results of varying * from 0.01 to 0.2, for both uniform and gaussian data distributions. L 2 is used as distance metric. <p> We have also analyzed the number of join and screen tests for the *-kdB tree and the R + tree. The analysis showed that the *-kdB tree will perform considerably better for high-dimensional points. This analysis can be found in <ref> [20] </ref>. Given the popularity of the R-tree family of index structures, we have also studied how the ideas of the *-kdB tree can be grafted to the R-tree family. <p> We found that the resulting biased R-tree performs much better than the R-tree for high-dimensional similarity joins, but the *-kdB tree still did better. The details of this study can be found in <ref> [20] </ref>.
Reference: [21] <author> A. W. Toga, P. K. Banerjee, and E. M. Santori. </author> <title> Warping 3d models for interbrain comparisons. </title> <address> Neurosc. Abs. 16:247, </address> <year> 1990. </year>
Reference-contexts: 1 Introduction Many emerging data mining applications require efficient processing of similarity joins on high-dimensional points. Examples include applications in time-series databases [1, 2], multimedia databases [9, 14, 13], medical databases <ref> [3, 21] </ref>, and scientific databases [22]. Some typical queries in these applications include: (1) discover all stocks with similar price movements; (2) find all pairs of similar images; (3) retrieve music scores similar to a target music score. These queries are often a prelude to clustering the objects.
Reference: [22] <author> D. Vassiliadis. </author> <title> The input-state space approach to the prediction of auroral geomagnetic activity from solar wind variables. </title> <booktitle> In Int'l Workshop on Applications of Artificial Intelligence in Solar Terrestrial Physics, </booktitle> <month> Sept </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Many emerging data mining applications require efficient processing of similarity joins on high-dimensional points. Examples include applications in time-series databases [1, 2], multimedia databases [9, 14, 13], medical databases [3, 21], and scientific databases <ref> [22] </ref>. Some typical queries in these applications include: (1) discover all stocks with similar price movements; (2) find all pairs of similar images; (3) retrieve music scores similar to a target music score. These queries are often a prelude to clustering the objects.
References-found: 22

