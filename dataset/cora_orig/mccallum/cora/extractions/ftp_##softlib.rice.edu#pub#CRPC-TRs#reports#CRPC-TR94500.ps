URL: ftp://softlib.rice.edu/pub/CRPC-TRs/reports/CRPC-TR94500.ps
Refering-URL: http://www.cs.rice.edu/~ken/kennedy-vita.html
Root-URL: 
Email: lorie@cs.rice.edu ken@cs.rice.edu  
Phone: Phone: (906)337-4205 Phone  
Title: Automatic Data Distribution of Small Meshes Coupled Grid Applications  
Author: Lorie M. Liebrock* Ken Kennedy 
Date: October 24, 1994  
Note: and Fax: (906)337-5817 corresponding author  
Address: 2315 County Rd. 6100 S. Main St. Calumet, MI 49913 Houston, TX 77005-1892  
Affiliation: Department of Computer Science Department of Computer Science Rice University Rice University  
Abstract: Composite grid problems arise in important application areas, e.g., reactor simulation. Related physical phenomena are inherently parallel and their simulations are computationally intensive. Unfortunately, parallel languages, e.g., High Performance Fortran, provide little explicit support for these problems. We illustrate topological connections via a coupling statement and develop an algorithm that automatically determines distributions for composite grid problems with meshes that are small relative to the number of processors. Our algorithm's alignment and distribution specifications are input to the transformed High Performance Fortran program which applies the mapping for execution of the simulation code. Precompiler transformations, such as cloning for alignment specification, are described. Excerpts from a High Performance Fortran program before and after transformation illustrate user programming style and transformation issues. Some advantages of this approach are: transformations are applied before compilation, and allow communication optimization, and the distribution may be determined for any number of problems without recompilation; user determined distribution for parallelization is unnecessary; and portability is improved. We validate the algorithm using a number of reactor configurations. Two random distribution algorithms provide a basis of comparison with measures of load balance and communication cost. Experiments show that our algorithm almost always obtains load balance at least as good as, and often significantly better than, random algorithms while reducing the total communication per iteration by about 50% or in some cases as much as 90%. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B.E. Boyack, H. Stumpf, and J.F. Lime. </author> <title> TRAC User's Guide. </title> <institution> Los Alamos National Laboratory, </institution> <address> Los Alamos, New Mexico 87545, </address> <year> 1985. </year>
Reference-contexts: Two important application areas for composite grid approaches are electric circuit analysis and nuclear reactor simulation. In nuclear reactor simulations, different grids are used for each of the reactor vessels, pipes, pumps, etc. <ref> [1] </ref>. Applications of this type are called multiblock, composite grid or irregularly coupled regular mesh (ICRM) problems. To provide an indication of the complexity of the topology (dimensionality, size, and connectivity) of these problems, Figures 1-5 show five of the diagrams from the Westinghouse AP600 advanced reactor design 1 . <p> For nuclear reactor applications, mesh and coupling descriptions can be be obtained by translating the grid specifications found in the input file for simulators such as TRAC <ref> [1] </ref>. Therefore the coupling specifications presented here indicate what information must be extracted from the input. <p> Robinson Reactor Model Like the LOFT model, the H.B. Robinson model is a small model that has been used to illustrate concepts in the Los Alamos TRAC manuals. The H.B. Robinson reactor model nodalization came from the TRAC manual <ref> [1] </ref>. This model has 100 components (144 3-d cells and 433 1-d cells) and 21 heat structures. Table 6 shows the number of each type of component and the total number of elements for each type of component. The validation results for the H.B.
Reference: [2] <author> C. Chase, K. Crowley, J. Saltz, and A. Reeves. </author> <title> Compiler and runtime support for irregularly coupled regular meshes. </title> <journal> Journal of the ACM, </journal> <month> July </month> <year> 1992. </year>
Reference-contexts: As a result of this discussion we have a set of computationally intensive simulation problems, which are difficult to parallelize efficiently, coming from inherently parallel physical phenomena. None of the current parallelization approaches for these problems, e.g., PARTI <ref> [2] </ref>, save the programmer from having to decipher the grid assembly and determine data distributions. Since the description of the grid assembly is normally part of the input, this implies user intervention for data distribution for every new grid assembly input. <p> As an example, consider two meshes, A and B, each of which are 40x40x40 with one coupled face. These meshes and the coupling between them are illustrated in Figure 6. This problem was used by J. Saltz <ref> [2] </ref> to show the feasibility of the PARTI multiblock runtime system for parallelization of composite grid problems.
Reference: [3] <author> G. Fox, S. Hiranandani, K. Kennedy, C. Koelbel, U. Kremer, C. Tseng, and M. Wu. </author> <title> Fortran D language specification. </title> <type> Technical Report TR90-141, </type> <institution> Dept. of Computer Science, Rice University, </institution> <month> December </month> <year> 1990. </year>
Reference-contexts: To do this we exploit not only the regularity inside of each mesh, but also the topology of the connections between meshes to automatically determine distribution of data structures. We use an extension of Fortran D <ref> [3] </ref>, coupling specification, to illustrate the information that must be extracted from the input file for automatic distribution. For nuclear reactor applications, mesh and coupling descriptions can be be obtained by translating the grid specifications found in the input file for simulators such as TRAC [1].
Reference: [4] <author> M. W. Hall, S. Hiranandani, K. Kennedy, and C. Tseng. </author> <title> Interprocedural compilation of Fortran D for MIMD distributed-memory machines. </title> <booktitle> In Proceedings of Supercomputing '92, </booktitle> <address> Minneapolis, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: to allocation routines go here call main () end program icrm style and an understanding of how the input file relates to the allocation of these structures, the analysis necessary for execution of the automatic distribution algorithm is similar to the interprocedural analysis performed by Rice University's Fortran D compiler <ref> [4] </ref>. 8 3 Automatic Distribution Algorithm Minimally, for the algorithm we are about to describe, we need, in addition to the information in coupling specifications, measures of: * the amount of computation per element in each mesh, * the amount of communication in each dimension of each large mesh, and *
Reference: [5] <author> Susan J. Jolly-Woodruff and James F. </author> <month> Lime. </month> <institution> Los Alamos National Laboratories, </institution> <month> March </month> <year> 1994. </year> <title> Private communication. </title>
Reference-contexts: There are thirteen different types of components associated with reactor simulations: ACCUM, BREAK, FILL, PIPE, PLENUM, PRIZER, PUMP, ROD (or SLAB), STGEN, TEE, TURB, VALVE and VESSEL. Table 1 shows the approximate number of additions/multiplications, and divisions 3 for each element of one-dimensional, two-dimensional (ROD), and three-dimensional (VESSEL) components <ref> [5] </ref>. Component Type # Add/Mults # Divides 1-d 11,798 704 3-d 117,057 1073 Table 1: Operation counts for all component types. For each test problem, we ran the two random algorithms three times.
Reference: [6] <author> Joe Kelly. Nuclear Regulatory Commission, </author> <month> January </month> <year> 1994. </year> <title> Private communication. </title>
Reference-contexts: Further support of clones in programs makes code development more tedious and error prone as well. To make rewriting of applications codes such as TRAC and RELAP-5 for parallel processors practical, the resulting program must be portable, easy to develop, and easy to support <ref> [6] </ref>. For this reason we 3 discuss not only the automatic generation of alignment and distribution specifications, but also the automatic transformation of High Performance Fortran (HPF) programs to support the generation of clones and the use of alignment and distribution specifications. <p> The style should also make development and support more efficient in terms of programmer effort [12]. This includes the amount of time that a new researcher must study the code before being able to make contributions to the application development <ref> [6] </ref>. Further, programs written in this style should achieve good performance when compiled by a good compiler. We will describe this style in the context of HPF [7]. Two of the most important language features, for the current discussion, are dynamic memory allocation and user-defined data types.
Reference: [7] <author> Charles H. Koelbel, David B. Loveman, Robert S. Schreiber, Guy L. Steele Jr., and Mary E. Zosel. </author> <title> The High Performance Fortran Handbook. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1994. </year>
Reference-contexts: Further, programs written in this style should achieve good performance when compiled by a good compiler. We will describe this style in the context of HPF <ref> [7] </ref>. Two of the most important language features, for the current discussion, are dynamic memory allocation and user-defined data types.

Reference: [9] <author> L.M. Liebrock and K. Kennedy. </author> <title> Parallelization of linearized application in Fortran D. </title> <booktitle> In International Parallel Processing Symposium '94, </booktitle> <pages> pages 51-60, </pages> <address> Washington, DC, </address> <month> April </month> <year> 1994. </year>
Reference-contexts: Finally, this section contains a discussion of the limitations and advantages of the topology-based small mesh distribution approach. For efficient parallelization of composite grid applications, we would like to distribute each mesh according to its dimensionality <ref> [9] </ref>. Hence, we will distribute all of the large meshes over all of the processors in the same dimensionality [8]. During the mapping of the large meshes, a processor configuration is selected for distribution of the entire problem.
Reference: [10] <author> J.F. Lime and B.E. Boyack. </author> <title> TRAC large-break loss-of-coolant accident analysis for the ap600 design. </title> <booktitle> In International Topical Meeting on Advanced Reactors Safety, </booktitle> <address> Pittsburgh, PA, </address> <month> April </month> <year> 1994. </year>
Reference-contexts: Lime who developed this TRAC model for the AP600 at Los Alamos National Laboratories with support from the Nuclear Regulatory Commission's Office of Nuclear Regulatory Research. Preliminary large-break loss-of-coolant accident results performed with TRAC-PF1/MOD2 <ref> [10] </ref>. 2 for three days, simulations of many scenarios need to be run. Since simulation of the AP600 reactor currently takes approximately 40 times as long as real time using two communicating workstations (one running RELAP-5 and the other running Contain), each scenario takes about 120 days to run. <p> 450,072 562,590 312,550 Comp min 112,518 37,506 75,012 112,518 162,526 100,016 275,044 Table 5: Validation results for the 1-d LOFT reactor model. 4.3 Westinghouse AP600 Reactor Model The Westinghouse AP600 reactor model nodalization was developed by Jim Lime at Los Alamos National Laboratories with support from the Nuclear Regulatory Commission <ref> [10] </ref>. This model has 173 hydro components (1060 3-d cells and 865 1-d cells) and 47 heat structures. Table 8 shows the number of each type of component and the total number of elements for each type of component.
Reference: [11] <author> J.C. Lin, V. Martinez, and J.W. Spore. </author> <title> TRAC Developmental Assessment Manual. </title> <institution> Los Alamos National Laboratory, </institution> <address> Los Alamos, New Mexico 87545, </address> <year> 1993. </year>
Reference-contexts: The LOFT reactor model nodalization came from the TRAC manual <ref> [11] </ref>. There are two versions of this model. The difference between the two versions is that the second version replaces the 3-d reactor vessel with a set of 1-d components and changes the heat structures.
Reference: [12] <author> George F. </author> <month> Niederauer. </month> <institution> Los Alamos National Laboratories, </institution> <month> January </month> <year> 1994. </year> <title> Private communication. </title> <type> 25 </type>
Reference-contexts: The style should also make development and support more efficient in terms of programmer effort <ref> [12] </ref>. This includes the amount of time that a new researcher must study the code before being able to make contributions to the application development [6]. Further, programs written in this style should achieve good performance when compiled by a good compiler.
References-found: 11

