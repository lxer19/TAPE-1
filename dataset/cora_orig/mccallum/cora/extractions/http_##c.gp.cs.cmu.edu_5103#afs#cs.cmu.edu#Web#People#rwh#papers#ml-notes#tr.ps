URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/Web/People/rwh/papers/ml-notes/tr.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/Web/People/rwh/index.html
Root-URL: http://www.cs.cmu.edu
Title: Introduction to Standard ML  
Author: Robert Harper Kevin Mitchell, 
Degree: Robert Harper. All rights reserved.  
Date: 1986-1993  
Note: Copyright c  1 With exercises by  
Address: Pittsburgh, PA 15213-3891  
Affiliation: School of Computer Science Carnegie Mellon University  Edinburgh University, Edinburgh, UK.  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Harold Abelson and Gerald Sussman, </author> <title> Structure and Interpretation of Computer Programs, </title> <publisher> The MIT Press, </publisher> <year> 1985. </year>
Reference-contexts: As with tuples, it makes no sense to compare two lists with different types of elements, and so any attempt to do so is considered a type error. - [1,2,3] = 1::2::3::nil; &gt; true : bool - [ <ref> [1] </ref>, [2,4] ] = [ [2 div 2], [1+1, 9 div 3] ]; &gt; false : bool 2.2.8 Records The last compound type that we shall consider in this section is the record type. <p> Exercise 2.4.2 Bind the variable x to the value 0 by constructing patterns to match against the following expressions. For example, given the expression (true,"hello",0), the required pattern is ( , ,x). 1. - a=1, b=0, c=true - 2. <ref> [ ~2, ~1, 0, 1, 2 ] </ref> 2.5. DEFINING FUNCTIONS 21 2.5 Defining functions So far we have been using some of the pre-defined functions of ML, such as the arithmetic functions and the relational operations.
Reference: [2] <author> Rod Burstall, David MacQueen, and Donald Sannella, </author> <title> HOPE: An Experimental Applicative Language, </title> <institution> Edinburgh University Internal Report CSR-62-80, </institution> <year> 1980. </year>
Reference-contexts: Standard ML is a synthesis of many of the ideas that were explored in the variant languages, notably Luca Cardelli's dialect [3], and in the functional language HOPE developed by Rod Burstall, Dave MacQueen, and Don San-nella <ref> [2] </ref>. The most recent addition to the language is the modules system developed by Dave MacQueen [6]. These notes are intended as an informal introduction to the language and its use, and should not be regarded as a definitive description of Standard ML. <p> Exercise 2.4.2 Bind the variable x to the value 0 by constructing patterns to match against the following expressions. For example, given the expression (true,"hello",0), the required pattern is ( , ,x). 1. - a=1, b=0, c=true - 2. <ref> [ ~2, ~1, 0, 1, 2 ] </ref> 2.5. DEFINING FUNCTIONS 21 2.5 Defining functions So far we have been using some of the pre-defined functions of ML, such as the arithmetic functions and the relational operations.
Reference: [3] <author> Luca Cardelli, </author> <title> ML under UNIX, </title> <institution> AT&T Bell Laboratories, </institution> <year> 1984. </year>
Reference-contexts: Since then numerous dialects and implementations have arisen, both at Edinburgh and elsewhere. Standard ML is a synthesis of many of the ideas that were explored in the variant languages, notably Luca Cardelli's dialect <ref> [3] </ref>, and in the functional language HOPE developed by Rod Burstall, Dave MacQueen, and Don San-nella [2]. The most recent addition to the language is the modules system developed by Dave MacQueen [6].
Reference: [4] <author> Michael Gordon, Robin Milner, and Christopher Wadsworth, </author> <title> Edinburgh LCF, </title> <booktitle> Springer-Verlag Lecture Notes in Computer Science, </booktitle> <volume> vol. 78, </volume> <year> 1979. </year>
Reference-contexts: Separate compilation is supported through the ability to export and import functors. Standard ML is the newest member of a family of languages tracing its origins to the ML language developed at Edinburgh by Mike Gordon, Robin Milner, and Chris Wadsworth in the mid-seventies <ref> [4] </ref>. Since then numerous dialects and implementations have arisen, both at Edinburgh and elsewhere.
Reference: [5] <author> Robert Harper, David MacQueen, and Robin Milner, </author> <title> Standard ML, </title> <institution> Ed-inburgh University Internal Report ECS-LFCS-86-2, </institution> <month> March, </month> <year> 1986. </year>
Reference-contexts: Comments and suggestions from readers are welcome. The definition of Standard ML is available from MIT Press [7]. A less formal, but in many ways obsolete, account is available as an Edinburgh University technical report <ref> [5] </ref>. The reader is encouraged to consult the definition for precise details about the language.
Reference: [6] <author> David MacQueen, </author> <title> Modules for Standard ML, </title> <booktitle> in [5]. </booktitle>
Reference-contexts: The most recent addition to the language is the modules system developed by Dave MacQueen <ref> [6] </ref>. These notes are intended as an informal introduction to the language and its use, and should not be regarded as a definitive description of Standard ML.
Reference: [7] <author> Robin Milner, Mads Tofte, and Robert Harper. </author> <title> The Definition of Standard ML. </title> <publisher> MIT Press, </publisher> <year> 1990. </year> <month> 87 </month>
Reference-contexts: They have evolved over a number of years, and are in need of revision both to reflect changes in the language, and the experience gained with it since its inception. Comments and suggestions from readers are welcome. The definition of Standard ML is available from MIT Press <ref> [7] </ref>. A less formal, but in many ways obsolete, account is available as an Edinburgh University technical report [5]. The reader is encouraged to consult the definition for precise details about the language. <p> The double quote itself is written "n"". - "Fish knuckles"; &gt; "Fish knuckles" : string - """"; &gt; """ : string Special characters may also appear in strings, but we shall have no need of them. Consult the ML language definition <ref> [7] </ref> for the details of how to build such strings. <p> The rough-and-ready rule is that if the values of a type involve functions, then it probably doesn't admit equality (this rule can be deceptive, so once you get more familiar with ML, you are encouraged to look at the official definition in the ML report <ref> [7] </ref>). With these preliminaries out of the way, we can now go on to consider user-defined functions. The syntax is quite similar to that used in other languages. <p> and the -calculus.) Here are some examples of the use of function constants and their relationship to clausal function definitions: fun listify x = [x]; &gt; val listify = fn : 'a-&gt;'a list - val listify2 = fn x=&gt;[x]; &gt; listify2 = fn : 'a-&gt;'a list - listify 7; &gt; <ref> [7] </ref> : int list - listify2 7; &gt; [7] : int list - (fn x=&gt;[x])(7); &gt; [7] : int list - val l=[1,2,3]; &gt; val l = [1,2,3] : int list - map (fn x=&gt;[x],l); &gt; [[1],[2],[3]] : int list list We begin by giving the definition of a very simple <p> the use of function constants and their relationship to clausal function definitions: fun listify x = [x]; &gt; val listify = fn : 'a-&gt;'a list - val listify2 = fn x=&gt;[x]; &gt; listify2 = fn : 'a-&gt;'a list - listify 7; &gt; <ref> [7] </ref> : int list - listify2 7; &gt; [7] : int list - (fn x=&gt;[x])(7); &gt; [7] : int list - val l=[1,2,3]; &gt; val l = [1,2,3] : int list - map (fn x=&gt;[x],l); &gt; [[1],[2],[3]] : int list list We begin by giving the definition of a very simple function called listify that makes a single element <p> to clausal function definitions: fun listify x = [x]; &gt; val listify = fn : 'a-&gt;'a list - val listify2 = fn x=&gt;[x]; &gt; listify2 = fn : 'a-&gt;'a list - listify 7; &gt; <ref> [7] </ref> : int list - listify2 7; &gt; [7] : int list - (fn x=&gt;[x])(7); &gt; [7] : int list - val l=[1,2,3]; &gt; val l = [1,2,3] : int list - map (fn x=&gt;[x],l); &gt; [[1],[2],[3]] : int list list We begin by giving the definition of a very simple function called listify that makes a single element list out of its argument. <p> The function listify2 is exactly equivalent, except that it makes use of a function constant. The expression fn x=&gt;[x] evaluates to a function that, when given an object x, returns [x], just as listify does. In fact, we can apply this function "directly" to the argument 7, obtaining <ref> [7] </ref>. In the last example, we pass the function denoted by fn x=&gt;[x] to map (defined above), and obtain the same result as we did from map listify l.
References-found: 7

