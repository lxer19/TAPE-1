URL: http://www.cs.rice.edu/MSCP/papers/popl89.ps.gz
Refering-URL: http://www.cs.rice.edu/MSCP/publications.html
Root-URL: 
Title: Fast Interprocedural Alias Analysis  
Author: Keith D. Cooper Ken Kennedy 
Address: Houston, Texas 77251-1892  
Affiliation: Department of Computer Science Rice University  
Abstract: We present a new algorithm for computing interprocedural aliases due to passing parameters by reference. This algorithm runs in O(N 2 + NE) time and, when combined with algorithms for alias-free, ow-insensitive data-ow problems, yields algorithms for solution of the general ow insensitive problems that also run in O(N 2 + NE) time.
Abstract-found: 1
Intro-found: 1
Reference: [Alle 74] <author> F.E. Allen, </author> <title> ``Interprocedural data ow analysis'', </title> <booktitle> Proc. of the 1974 IFIPS Congress, </booktitle> <year> 1974. </year>
Reference: [Bann 79] <author> J.P. Banning, </author> <title> ``An efficient way to find the side effects of procedure calls and the aliases of variables'', </title> <booktitle> Proc. Sixth POPL, </booktitle> <month> Jan., </month> <year> 1979. </year>
Reference-contexts: Banning first suggested the approach of decomposing interprocedural data-ow problems into two subcompo-nents: the problem of analyzing potential aliases and the alias-free data-ow analysis problem <ref> [Bann 79] </ref>. For many important data-ow analysis problems, these two subproblems can be solved independently and the results combined later to produce a general solution. <p> Howev er, we prefer Banning's classification of side-effects as ``ow-insensitive'' and ``ow-sensitive'' because the terminology reects the precise definition that he provided for this distinction <ref> [Bann 79] </ref>. 2. The Problem Whenever a program can reference a single storage location using two different variable names, those names are said to be aliases.
Reference: [Bart 78] <author> J.M. Barth, </author> <title> ``A practical interprocedural data ow analysis algorithm'', </title> <type> CACM 21(9), </type> <month> Sept., </month> <year> 1978. </year>
Reference-contexts: Finally, section 9 contains a summary of the results. This work has been supported by the National Science Foundation through grants CCR 86-19893, CCR 87-06229, and ASC 85-18578 and by IBM Corporation. 1 Some researchers use the terms ``may'' and ``must following Barth <ref> [Bart 78] </ref>. Howev er, we prefer Banning's classification of side-effects as ``ow-insensitive'' and ``ow-sensitive'' because the terminology reects the precise definition that he provided for this distinction [Bann 79]. 2.
Reference: [Burk 84] <author> M. Burke, </author> <title> ``An interval analysis approach toward interprocedural data ow'', </title> <type> Report RC 10640, </type> <institution> IBM T.J. Watson Research Center, </institution> <address> Yorktown Heights, N.Y., </address> <month> July, </month> <year> 1984. </year>
Reference: [BuCy 86] <author> M. Burke and R. Cytron, </author> <title> ``Interprocedural dependence analysis and parallelization'', </title> <booktitle> Proc. SIGPLAN 86 Symposium on Compiler Construction, SIGPLAN Notices 21(7), </booktitle> <month> July </month> <year> 1986. </year>
Reference: [Call 88] <author> D. Callahan, </author> <title> ``The program summary graph and ow-sensitive interprocedural data ow analysis'', </title> <booktitle> Proc. SIGPLAN 88 Conference on Programming Language Design and Implementation, SIGPLAN Notices 23(7), </booktitle> <month> July </month> <year> 1988. </year>
Reference-contexts: Future Work In the course of developing this method, a number of interesting problems have presented themselves for future work: 1) Callahan has demonstrated an algorithm for alias-free ow-sensitive summary problems that runs in time proportional to N times the size of the program summary graph <ref> [Call 88] </ref>. We believe that information about aliases can be used to improve the precision of the answers to some, but not all, problems solvable with his method. 2) The method we have presented computes information about variables that may be aliases.
Reference: [CCKT 86] <author> D. Callahan, K.D. Cooper, K. Kennedy, and L. Torczon, </author> <title> ``Interprocedural constant propagation'', </title> <booktitle> Proc. SIGPLAN 86 Symposium on Compiler Construction, SIGPLAN Notices, </booktitle> <volume> 21(7), </volume> <month> July </month> <year> 1986. </year>
Reference-contexts: The Binding Graph This method uses the binding graph introduced in our previous work on alias-free ow-insensitive summary problems [CoKe 88]. It is a natural adaptation of the scheme used in Torczon's algorithm for interprocedural constant propagation <ref> [Torc 85, CCKT 86] </ref>. The program's binding graph, b = (N b , E b ), represents interactions between formal parameters. Nodes in N b uniquely rep resent the formal parameters of the various procedures in the program. Edges in E b represent individual bind ing events. <p> It is amenable to bit-vector implementation and uses the same graphical representation as our algorithms for the alias-free summary problems [CoKe 88] and interprocedural constant propagation <ref> [Torc 85, CCKT 86] </ref>. We hav e demonstrated how the method can be used to produce a general solution to an interprocedural summary problem from the solution to the alias-free problem. This process takes O (NE) time.
Reference: [CaKe 87] <author> D. Callahan and K. Kennedy, </author> <title> ``Analysis of interprocedural side effects in a parallel programming environment'', </title> <booktitle> Proc. First Int'l Conference on Supercomputing, </booktitle> <address> Athens, Greece, </address> <month> June </month> <year> 1987. </year>
Reference-contexts: A more sophisticated treatment of arrays, in the style of Callahan and Kennedy's regular section analysis, might produce useful information about the offsets and patterns of overlap in a program <ref> [CaKe 87] </ref>. We intend to pursue each of these ideas. 9. Conclusions We hav e introduced a new interprocedural analysis algorithm for computing aliases due to call-by-reference parameter binding.
Reference: [CaRy 86] <author> M.D. Carroll and B.G. Ryder, </author> <title> ``An incremen-tal algorithm for software analysis'', </title> <booktitle> Proc. of the SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, SIGPLAN Notices 22(1), </booktitle> <month> Jan. </month> <year> 1987. </year>
Reference: [Coop 85] <author> K.D. Cooper, </author> <title> ``Analyzing aliases of reference formal parameters'', </title> <booktitle> Proc. Twelfth POPL, </booktitle> <month> Jan. </month> <year> 1985. </year>
Reference-contexts: Thus, the overall running time of the algorithm is O (N 2 + NE) [CoKe 88]. The best previous algorithm for single-variable alias analysis requires at least O (N 3 + N 2 E) time <ref> [Coop 85] </ref>. Hence, the time to solve the alias problem dominates the computation of the complete solution. Furthermore, once aliases are determined, there still remains the problem of integrating them with the solution of the alias-free problem to produce a general result.
Reference: [CoKe 84] <author> K.D. Cooper and K. Kennedy, </author> <title> ``Efficient computation of ow insensitive interprocedu-ral summary information'', </title> <booktitle> Proc. SIGPLAN 84 Symposium on Compiler Construction, SIG-PLAN Notices 19(6), </booktitle> <month> June </month> <year> 1984. </year>
Reference: [CoKe 87] <author> K.D. Cooper and K. Kennedy, </author> <title> ``Efficient computation of ow-insensitive interprocedu-ral summary information a correction'', </title> <journal> SIGPLAN Notices, </journal> <volume> 23(4), </volume> <month> April, </month> <note> 1988 (also TR87-60, </note> <institution> Department of Computer Science, Rice University, </institution> <month> Oct. </month> <year> 1987). </year>
Reference: [CoKe 88] <author> K.D. Cooper and K. Kennedy, </author> <title> ``Interprocedu-ral side-effect analysis in linear time'', </title> <booktitle> Proc. SIGPLAN 88 Conference on Programming Language Design and Implementation, SIGPLAN Notices 23(7), </booktitle> <month> July </month> <year> 1988. </year>
Reference-contexts: Thus, the overall running time of the algorithm is O (N 2 + NE) <ref> [CoKe 88] </ref>. The best previous algorithm for single-variable alias analysis requires at least O (N 3 + N 2 E) time [Coop 85]. Hence, the time to solve the alias problem dominates the computation of the complete solution. <p> The Binding Graph This method uses the binding graph introduced in our previous work on alias-free ow-insensitive summary problems <ref> [CoKe 88] </ref>. It is a natural adaptation of the scheme used in Torczon's algorithm for interprocedural constant propagation [Torc 85, CCKT 86]. The program's binding graph, b = (N b , E b ), represents interactions between formal parameters. <p> Phase 1: Global Aliases The problem of constructing a binding graph in the presence of nesting was discussed in connection with our previous work on ow-insensitive side-effect analysis <ref> [CoKe 88] </ref>. The same construction will work for alias propagation as well. Therefore, let us concentrate on the problem of propagation. A naive way to address the problem of nesting levels in this phase is to solve for global aliases by levels. <p> It is amenable to bit-vector implementation and uses the same graphical representation as our algorithms for the alias-free summary problems <ref> [CoKe 88] </ref> and interprocedural constant propagation [Torc 85, CCKT 86]. We hav e demonstrated how the method can be used to produce a general solution to an interprocedural summary problem from the solution to the alias-free problem. This process takes O (NE) time. <p> We hav e demonstrated how the method can be used to produce a general solution to an interprocedural summary problem from the solution to the alias-free problem. This process takes O (NE) time. When combined with previous results on the ow-insensitive analysis of alias-free problems <ref> [CoKe 88] </ref>, this produces an algorithm for solving these problems in time proportional to the size of the call graph times the number of variables in the program. The time bound achieved is asymptotically the fastest known. We expect variants of this algorithm to be extremely fast in practice. 10.
Reference: [HoRB 88] <author> S. Horwitz, T. Reps and D Binkley, </author> <title> ``Inter-procedural slicing using dependence graphs'', </title> <booktitle> Proc. SIGPLAN 88 Conference on Programming Language Design and Implementation, SIGPLAN Notices 23(7), </booktitle> <month> July </month> <year> 1988. </year>
Reference: [Myer 80] <author> E. Myers, </author> <title> ``A precise and efficient algorithm for determining existential summary data ow information'', </title> <type> Technical Report CU-CS-175-80, </type> <institution> Department of Computer Science, University of Colorado, </institution> <month> March, </month> <year> 1980. </year>
Reference: [Rose 79] <author> B. Rosen, </author> <title> ``Data ow analysis for procedural languages'', </title> <type> JA CM 26(2), </type> <month> April, </month> <year> 1979. </year>
Reference: [Spil 71] <author> T.C. Spillman, </author> <title> ``Exposing side-effects in a PL/I optimizing compiler'', </title> <booktitle> Proc. of the 1971 IFIPS Congress, </booktitle> <year> 1971. </year>
Reference: [Torc 85] <author> L. Torczon, </author> <title> ``Compilation dependences in an ambitious optimizing compiler'', </title> <type> Ph.D. dissertation, </type> <institution> Department of Computer Science, Rice University, </institution> <month> May, </month> <year> 1985. </year>
Reference-contexts: The Binding Graph This method uses the binding graph introduced in our previous work on alias-free ow-insensitive summary problems [CoKe 88]. It is a natural adaptation of the scheme used in Torczon's algorithm for interprocedural constant propagation <ref> [Torc 85, CCKT 86] </ref>. The program's binding graph, b = (N b , E b ), represents interactions between formal parameters. Nodes in N b uniquely rep resent the formal parameters of the various procedures in the program. Edges in E b represent individual bind ing events. <p> It is amenable to bit-vector implementation and uses the same graphical representation as our algorithms for the alias-free summary problems [CoKe 88] and interprocedural constant propagation <ref> [Torc 85, CCKT 86] </ref>. We hav e demonstrated how the method can be used to produce a general solution to an interprocedural summary problem from the solution to the alias-free problem. This process takes O (NE) time.
References-found: 18

