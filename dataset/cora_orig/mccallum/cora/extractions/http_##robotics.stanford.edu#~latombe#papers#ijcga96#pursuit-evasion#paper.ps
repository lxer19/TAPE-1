URL: http://robotics.stanford.edu/~latombe/papers/ijcga96/pursuit-evasion/paper.ps
Refering-URL: http://robotics.stanford.edu/~latombe/projects/
Root-URL: http://www.cs.stanford.edu
Email: fguibas,latombe,lavalle,dlin,rajeevg@cs.stanford.edu  
Title: A Visibility-Based Pursuit-Evasion Problem  
Author: Leonidas J. Guibas Jean-Claude Latombe Steven M. LaValle David Lin Rajeev Motwani 
Note: Submitted to the International Journal of Computational Geometry and Applications  
Address: Stanford, CA 94305  
Affiliation: Computer Science Department Stanford University  
Abstract: This paper addresses the problem of planning the motion of one or more pursuers in a polygonal environment to eventually "see" an evader that is unpredictable, has unknown initial position, and is capable of moving arbitrarily fast. A visibility region is associated with each pursuer, and the goal is to guarantee that the evader will ultimately lie in at least one visibility region. The study of this problem is motivated in part by robotics applications, such as surveillance with a mobile robot equipped with a camera that must find a moving target in a cluttered workspace. A few bounds are introduced, and a complete algorithm is presented for computing a successful motion strategy. For a simply-connected free space, a logarithmic bound is established on the minimum of pursuers needed. Loose bounds for multiply-connected free spaces are also given. A set of problems that are solvable by a single pursuer and require a linear number of recontaminations is shown. The complete algorithm searches a finite cell complex that is constructed on the basis of critical information changes. This concept can be applied in principle to multiple-pursuer problems, and the case of a single pursuer has been implemented. Several solution strategies are shown, most of which were computed in a few seconds on a standard workstation.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. S. Arnon. </author> <title> Geometric reasoning with logic and algebra. </title> <booktitle> Artif. Intell., </booktitle> <address> 37(1-3):37-60, </address> <year> 1988. </year>
Reference-contexts: Identifying critical information changes We next describe a general mechanism for defining critical information changes. This is inspired in part by a standard approach used in motion planning, which is to preserve completeness by using a decomposition of the configuration space that is constructed by analyzing critical events (e.g., <ref> [1, 14, 22] </ref>). For example, in [23] a cell decomposition is determined by analyzing the contact manifolds in a composite configuration space that is generated by the positions of several disks in the plane.
Reference: [2] <author> T. Ba~sar and G. J. Olsder. </author> <title> Dynamic Noncooperative Game Theory. </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1982. </year>
Reference-contexts: Pursuit-evasion scenarios in continuous spaces have arisen in a variety of applications such as air traffic 1 control <ref> [2] </ref>, military strategy [11], and trajectory tracking [10]. This has resulted in the formal study of general decision problems in which two decision makers have diametrically opposing interests. Classical pursuit-evasion games express differential motion models for two opponents, and conditions of capture or optimal strategies are sought [11]. <p> Let the information space, I, represent the set of possible information states. The information space is a standard representational tool for problems that have imperfect state information, and has been useful in stochastic optimal control and dynamic game theory (e.g., <ref> [2, 12] </ref>), and in motion planning [3, 16]. The information states also correspond to the knowledge states introduced for manipulation planning under uncertainty in [7].
Reference: [3] <author> J. Barraquand and P. Ferbach. </author> <title> Motion planning with uncertainty: The information space approach. </title> <booktitle> In IEEE Int. Conf. Robot. & Autom., </booktitle> <pages> pages 1341-1348, </pages> <year> 1995. </year>
Reference-contexts: Let the information space, I, represent the set of possible information states. The information space is a standard representational tool for problems that have imperfect state information, and has been useful in stochastic optimal control and dynamic game theory (e.g., [2, 12]), and in motion planning <ref> [3, 16] </ref>. The information states also correspond to the knowledge states introduced for manipulation planning under uncertainty in [7].
Reference: [4] <author> D. Bienstock and P. Seymour. </author> <title> Monotonicity in graph searching. </title> <journal> J. Algorithms, </journal> <volume> 12 </volume> <pages> 239-245, </pages> <year> 1991. </year>
Reference-contexts: It states that there exist examples that require recontaminating some portion of the free space a linear number of times. This result is surprising because for Parsons' problem it was shown in [13] that no recontamination is necessary (a shorter proof of this appears in <ref> [4] </ref>). In [25] a free space was given that requires two recontaminations, which at least established that recontamination is generally necessary for visibility-based pursuit evasion.
Reference: [5] <author> J. F. Canny. </author> <title> The Complexity of Robot Motion Planning. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1988. </year>
Reference-contexts: It is natural to compare the notion of completeness for this problem to completeness for the basic motion planning problem (i.e., the algorithm will find a collision-free path if such a path exists <ref> [5] </ref>). One important difference, however, is that the minimum number of pursuers is crucial, but does not have a correspondence for the basic path planning problem.
Reference: [6] <author> W.-P. Chin and S. Ntafos. </author> <title> Optimum watchman routes. </title> <journal> Information Processing Letters, </journal> <volume> 28 </volume> <pages> 39-44, </pages> <year> 1988. </year>
Reference-contexts: Far fewer guards are needed when they are allowed to move and search for an evader; however, the required motion strategies can become quite complex. A closely related art gallery variant is the watchman tour problem <ref> [6] </ref>. In this case a minimum-length closed path is computed such that any point in the polygon is visible from some point along the path.
Reference: [7] <author> M. Erdmann. </author> <title> Randomization for robot tasks: Using dynamic programming in the space of knowledge states. </title> <journal> Algorithmica, </journal> <volume> 10 </volume> <pages> 248-291, </pages> <year> 1993. </year>
Reference-contexts: The information states also correspond to the knowledge states introduced for manipulation planning under uncertainty in <ref> [7] </ref>.
Reference: [8] <author> L. Guibas and J. Stolfe. </author> <title> Primitives for the manipulation of general subdivisions and the computation of Voronoi diagrams. </title> <journal> AMC Trans. Graphics, </journal> <volume> 4(2) </volume> <pages> 74-123, </pages> <year> 1985. </year>
Reference-contexts: The computation times and other parameters for several examples are listed in Figure 12. The implementation uses the quad-edge structure from <ref> [8] </ref> to maintain the topological ordering of the conservative cells. The searching strategy is essentially Dijkstra's shortest path algorithm, where the distance is measured from the adjacent cell centroids.
Reference: [9] <author> L. J. Guibas, R. Motwani, and P. Raghavan. </author> <title> The robot localization problem. </title> <editor> In K. Gold-berg, D. Halperin, J.-C. Latombe, and R. Wilson, editors, </editor> <booktitle> Proc. 1st Workshop on Algorithmic Foundations of Robotics, </booktitle> <pages> pages 269-282. </pages> <address> A.K. Peters, Wellesley, MA, </address> <year> 1995. </year>
Reference-contexts: Hence, a cell decomposition that maintains the same corresponding gap edges will only contain conservative cells. The idea is to partition the free space into convex cells by identifying critical places at which edge visibility changes. A decomposition of this type has been 17 used for robot localization in <ref> [9, 26] </ref>, and generates O (n 3 ) cells in the worst case for a simple polygon (which is always true if H (F ) = 1). The free space can be sufficiently partitioned in our case by extending rays in the three general cases shown in Figure 9.
Reference: [10] <author> O. Hajek. </author> <title> Pursuit Games. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1975. </year>
Reference-contexts: Pursuit-evasion scenarios in continuous spaces have arisen in a variety of applications such as air traffic 1 control [2], military strategy [11], and trajectory tracking <ref> [10] </ref>. This has resulted in the formal study of general decision problems in which two decision makers have diametrically opposing interests. Classical pursuit-evasion games express differential motion models for two opponents, and conditions of capture or optimal strategies are sought [11].
Reference: [11] <author> R. Isaacs. </author> <title> Differential Games. </title> <publisher> Wiley, </publisher> <address> New York, NY, </address> <year> 1965. </year>
Reference-contexts: Pursuit-evasion scenarios in continuous spaces have arisen in a variety of applications such as air traffic 1 control [2], military strategy <ref> [11] </ref>, and trajectory tracking [10]. This has resulted in the formal study of general decision problems in which two decision makers have diametrically opposing interests. Classical pursuit-evasion games express differential motion models for two opponents, and conditions of capture or optimal strategies are sought [11]. <p> traffic 1 control [2], military strategy <ref> [11] </ref>, and trajectory tracking [10]. This has resulted in the formal study of general decision problems in which two decision makers have diametrically opposing interests. Classical pursuit-evasion games express differential motion models for two opponents, and conditions of capture or optimal strategies are sought [11]. For example, in the classical Homicidal Chauffeur game, conditions of inevitable collision can be expressed in terms of the nonholonomic turning-radius constraints of the pursuer and evader. Although interesting decision problems arise through the differential motion models, geometric free-space constraints are usually not considered in classical pursuit-evasion games.
Reference: [12] <author> P. R. Kumar and P. Varaiya. </author> <title> Stochastic Systems. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1986. </year>
Reference-contexts: Let the information space, I, represent the set of possible information states. The information space is a standard representational tool for problems that have imperfect state information, and has been useful in stochastic optimal control and dynamic game theory (e.g., <ref> [2, 12] </ref>), and in motion planning [3, 16]. The information states also correspond to the knowledge states introduced for manipulation planning under uncertainty in [7].
Reference: [13] <author> A. S. Lapaugh. </author> <title> Recontamination does not help to search a graph. </title> <journal> J. ACM, </journal> <volume> 40(2) </volume> <pages> 224-245, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: It states that there exist examples that require recontaminating some portion of the free space a linear number of times. This result is surprising because for Parsons' problem it was shown in <ref> [13] </ref> that no recontamination is necessary (a shorter proof of this appears in [4]). In [25] a free space was given that requires two recontaminations, which at least established that recontamination is generally necessary for visibility-based pursuit evasion.
Reference: [14] <author> J.-C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: Identifying critical information changes We next describe a general mechanism for defining critical information changes. This is inspired in part by a standard approach used in motion planning, which is to preserve completeness by using a decomposition of the configuration space that is constructed by analyzing critical events (e.g., <ref> [1, 14, 22] </ref>). For example, in [23] a cell decomposition is determined by analyzing the contact manifolds in a composite configuration space that is generated by the positions of several disks in the plane.
Reference: [15] <author> J.-P. Laumond. </author> <title> Singularities and topological aspects in nonholonomic motion planning. </title> <editor> In Z. Li and J. F. Canny, editors, </editor> <booktitle> Nonholonomic Motion Planning, </booktitle> <pages> pages 149-200. </pages> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1993. </year>
Reference-contexts: For the class of problems in which H (F ) = 1, it is shown that the same region can require recontamination as many as (n) times. This result is surprising because pursuit-evasion in a graph is known not to require any recontaminations <ref> [15] </ref>. Consider the problem of determining the minimum number of pursuers, H (F ), required to find an evader in a given free space F . This number will generally depend on both the topological and geometric complexity of F .
Reference: [16] <author> S. M. LaValle. </author> <title> A Game-Theoretic Framework for Robot Motion Planning. </title> <type> PhD thesis, </type> <institution> University of Illinois, Urbana, IL, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: Let the information space, I, represent the set of possible information states. The information space is a standard representational tool for problems that have imperfect state information, and has been useful in stochastic optimal control and dynamic game theory (e.g., [2, 12]), and in motion planning <ref> [3, 16] </ref>. The information states also correspond to the knowledge states introduced for manipulation planning under uncertainty in [7].
Reference: [17] <author> F. Makedon and I. H. Sudborough. </author> <title> Minimizing width in linear layouts. </title> <booktitle> In Proc. 10th ICALP, Lecture Notes in Computer Science 154, </booktitle> <pages> pages 478-490. </pages> <publisher> Springer-Verlag, </publisher> <year> 1983. </year>
Reference-contexts: The search number of a graph refers to the minimum number of pursers needed to solve a pursuit-evasion problem, and has been closely related to other graph properties such as cutwidth <ref> [17, 19] </ref>. Pursuit-evasion scenarios in continuous spaces have arisen in a variety of applications such as air traffic 1 control [2], military strategy [11], and trajectory tracking [10]. This has resulted in the formal study of general decision problems in which two decision makers have diametrically opposing interests. <p> Let the edges of G k connect any two vertices for which one coordinate differs by one unit (i.e., a standard four-neighborhood). The cutwidth of G k is k. It is established in <ref> [17] </ref> that for all graphs G, the search number S (G) is related to the cutwidth as S (G) CW (G) bdeg (G)=2c S (G), in which deg (G) is the maximum vertex degree of G. Because deg (G k ) = 4, S (G) k 2S (G).
Reference: [18] <author> N. Megiddo, S. L. Hakimi, M. R. Garey, D. S. Johnson, and C. H. Papadimitriou. </author> <title> The complexity of searching a graph. </title> <journal> J. ACM, </journal> <volume> 35(1) </volume> <pages> 18-44, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: Interesting results have been obtained for pursuit evasion in a graph, in which the pursuers and evader can move from vertex to vertex until eventually a pursuer and evader lie in the same vertex <ref> [18, 21] </ref>. The search number of a graph refers to the minimum number of pursers needed to solve a pursuit-evasion problem, and has been closely related to other graph properties such as cutwidth [17, 19]. <p> Some results from graph searching will first be described and utilized to construct difficult worst-case problem instances. Let Parsons' problem refer to the graph-searching problem presented in <ref> [18, 21] </ref>. The task is to specify the number of pursuers required to find an evader that can execute continuous motions along the edges of a graph. Instead of using visibility, capture is achieved when one of the pursuers "touches" the evader.
Reference: [19] <author> B. Monien and I. H. Sudborough. </author> <title> Min cut is NP-complete for edge weighted graphs. </title> <journal> Theoretical Computer Science, </journal> <volume> 58 </volume> <pages> 209-229, </pages> <year> 1988. </year>
Reference-contexts: The search number of a graph refers to the minimum number of pursers needed to solve a pursuit-evasion problem, and has been closely related to other graph properties such as cutwidth <ref> [17, 19] </ref>. Pursuit-evasion scenarios in continuous spaces have arisen in a variety of applications such as air traffic 1 control [2], military strategy [11], and trajectory tracking [10]. This has resulted in the formal study of general decision problems in which two decision makers have diametrically opposing interests. <p> The problem becomes most difficult when the minimum number of pursuers is requested. The general problem is intractable if P 6= N P : Theorem 6 Computing H (F ) is NP-hard. Proof: It is shown in <ref> [19] </ref> that Parsons' problem for a planar graph with maximum vertex degree 3 is NP-complete (i.e., computing the search number, S (G) ).
Reference: [20] <author> J. O'Rourke. </author> <title> Art Gallery Theorems and Algorithms. </title> <publisher> Oxford University Press, </publisher> <address> New York, NY, </address> <year> 1987. </year>
Reference-contexts: A moving visibility polygon in a polygonal environment adds geometric information that must be utilized, and also leads to connections with the static art gallery problems <ref> [20, 24] </ref>. In the limiting case, art gallery results serve as a loose upper bound on the number of pursuers by allowing a covering of the free space by static guards, guaranteeing that any evader will be immediately visible.
Reference: [21] <author> T. D. Parsons. </author> <title> Pursuit-evasion in a graph. </title> <editor> In Y. Alani and D. R. Lick, editors, </editor> <booktitle> Theory and Applcation of Graphs, </booktitle> <pages> pages 426-441. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1976. </year> <month> 28 </month>
Reference-contexts: Interesting results have been obtained for pursuit evasion in a graph, in which the pursuers and evader can move from vertex to vertex until eventually a pursuer and evader lie in the same vertex <ref> [18, 21] </ref>. The search number of a graph refers to the minimum number of pursers needed to solve a pursuit-evasion problem, and has been closely related to other graph properties such as cutwidth [17, 19]. <p> Some results from graph searching will first be described and utilized to construct difficult worst-case problem instances. Let Parsons' problem refer to the graph-searching problem presented in <ref> [18, 21] </ref>. The task is to specify the number of pursuers required to find an evader that can execute continuous motions along the edges of a graph. Instead of using visibility, capture is achieved when one of the pursuers "touches" the evader. <p> Thus any solution strategy, fl, for F can be used to determine a corresponding solution strategy for G. 2 A theorem from <ref> [21] </ref> will be useful for proving Theorem 2, which provides a logarithmic lower bound on the number of pursuers needed to successfully search a simply-connected free space: Lemma 2 (Parsons) Let G be a tree. <p> Proof: Using Lemma 2, a tree, G, can be constructed recursively that has a constant branching factor of three, height N 1, and requires N pursuers (an example is given in 8 <ref> [21] </ref>). By Lemma 1, an equivalent geometric instance can be constructed for each N . Figure 4 depicts these geometric instances, for which H (F ) = (lg n) 2 Theorem 1 and Theorem 2 together imply a tight logarithmic bound, H (F ) = fi (lg n).
Reference: [22] <author> J. T. Schwartz and M. Sharir. </author> <title> On the piano movers' problem: II. General techniqies for computing topological properties of algebraic manifolds. </title> <journal> Communications on Pure and Applied Mathematics, </journal> <volume> 36 </volume> <pages> 345-398, </pages> <year> 1983. </year>
Reference-contexts: Identifying critical information changes We next describe a general mechanism for defining critical information changes. This is inspired in part by a standard approach used in motion planning, which is to preserve completeness by using a decomposition of the configuration space that is constructed by analyzing critical events (e.g., <ref> [1, 14, 22] </ref>). For example, in [23] a cell decomposition is determined by analyzing the contact manifolds in a composite configuration space that is generated by the positions of several disks in the plane.
Reference: [23] <author> J. T. Schwartz and M. Sharir. </author> <title> On the piano movers' problem: III. Coordinating the motion of several independent bodies. </title> <journal> Int. J. Robot. Res., </journal> <volume> 2(3) </volume> <pages> 97-140, </pages> <year> 1983. </year>
Reference-contexts: This is inspired in part by a standard approach used in motion planning, which is to preserve completeness by using a decomposition of the configuration space that is constructed by analyzing critical events (e.g., [1, 14, 22]). For example, in <ref> [23] </ref> a cell decomposition is determined by analyzing the contact manifolds in a composite configuration space that is generated by the positions of several disks in the plane. The next definition describes an information invariance property, which allows the information space, I, to be partitioned into equivalence classes.
Reference: [24] <author> T. Shermer. </author> <title> Recent results in art galleries. </title> <journal> Proc. IEEE, </journal> <volume> 80(9) </volume> <pages> 1384-1399, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: A moving visibility polygon in a polygonal environment adds geometric information that must be utilized, and also leads to connections with the static art gallery problems <ref> [20, 24] </ref>. In the limiting case, art gallery results serve as a loose upper bound on the number of pursuers by allowing a covering of the free space by static guards, guaranteeing that any evader will be immediately visible. <p> In our case, however, the pursuers have the additional burden of ensuring that an evader cannot "sneak" to a portion of the environment that has already been explored. Variations of this problem have also been considered in [25]. It was stated in <ref> [24] </ref> that it is difficult to even determine if a polygon is searchable by a single pursuer. Several applications can be envisioned for problems and motion strategies of this type.
Reference: [25] <author> I. Suzuki and M. Yamashita. </author> <title> Searching for a mobile intruder in a polygonal region. </title> <journal> SIAM J. Comput., </journal> <volume> 21(5) </volume> <pages> 863-888, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: In our case, however, the pursuers have the additional burden of ensuring that an evader cannot "sneak" to a portion of the environment that has already been explored. Variations of this problem have also been considered in <ref> [25] </ref>. It was stated in [24] that it is difficult to even determine if a polygon is searchable by a single pursuer. Several applications can be envisioned for problems and motion strategies of this type. <p> Consider the problem of determining the minimum number of pursuers, H (F ), required to find an evader in a given free space F . This number will generally depend on both the topological and geometric complexity of F . In <ref> [25] </ref> a class of simple polygons is identified for which a single pursuer suffices (referred to as "hedgehogs"). <p> It states that there exist examples that require recontaminating some portion of the free space a linear number of times. This result is surprising because for Parsons' problem it was shown in [13] that no recontamination is necessary (a shorter proof of this appears in [4]). In <ref> [25] </ref> a free space was given that requires two recontaminations, which at least established that recontamination is generally necessary for visibility-based pursuit evasion. <p> Searching Total Time (Cells) (Information) Time (sec) Time (sec) Fig. 13 28 25 200 0.04 0.02 0.06 Fig. 15 46 237 8787 0.53 1.59 2.12 Fig. 17 70 888 103049 3.00 168.63 171.63 the solution diagrams. Figure 15 shows the hookpin example described in <ref> [25] </ref>. Note that the leftmost pin is recontaminated twice, and the pins are visited in the same order as mentioned in [25]. Figure 16 is an instance of the sequence described in Section 3 that requires a linear number of recontaminations. <p> Figure 15 shows the hookpin example described in <ref> [25] </ref>. Note that the leftmost pin is recontaminated twice, and the pins are visited in the same order as mentioned in [25]. Figure 16 is an instance of the sequence described in Section 3 that requires a linear number of recontaminations. The region near the top of the figure is recontaminated 3 times. <p> The conservative cell and edge-visibility concepts could be applied for the 3-D case, but considerable challenges would be faced to produce an efficient algorithm. Another problem variation is to consider a limited viewing angle, or a set of viewing rays as considered in <ref> [25] </ref>. A limited viewing angle can realistically occur in applications, and the problem can be extended to planning strategies that sweep viewing angles in addition to moving the pursuers.
Reference: [26] <author> R. Talluri and J. K. Aggarwal. </author> <title> Mobile robot self-location using model-image feature correspondence. </title> <journal> IEEE Trans. Robot. & Autom., </journal> <volume> 12(1) </volume> <pages> 63-77, </pages> <month> February </month> <year> 1996. </year> <month> 29 </month>
Reference-contexts: Hence, a cell decomposition that maintains the same corresponding gap edges will only contain conservative cells. The idea is to partition the free space into convex cells by identifying critical places at which edge visibility changes. A decomposition of this type has been 17 used for robot localization in <ref> [9, 26] </ref>, and generates O (n 3 ) cells in the worst case for a simple polygon (which is always true if H (F ) = 1). The free space can be sufficiently partitioned in our case by extending rays in the three general cases shown in Figure 9.
References-found: 26

