URL: http://www.cs.cmu.edu/~dandre/papers/IJCAI-95-MM.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/dandre/www/papers/papers.html
Root-URL: 
Email: andre@flamingo.stanford.edu  
Phone: Phone: 415-941-9137  
Title: The Automatic Programming of Agents that Learn Mental Models and Create Simple Plans of Action  
Author: David Andre 
Address: 860 Live Oak Ave, Apt 4 Menlo Park, CA 94025  
Affiliation: Visiting Scholar Computer Science Department Stanford University  
Abstract: An essential component of an intelligent agent is the ability to notice, encode, store, and utilize information about its environment. Traditional approaches to program induction have focused on evolving functional or reactive programs. This paper presents MAPMAKER, an approach to the automatic generation of agents that discover information about their environment, encode this information for later use, and create simple plans utilizing the stored mental models. In this approach, agents are multipart computer programs that communicate through a shared memory. Both the programs and the representation scheme are evolved using genetic programming. An illustrative problem of 'gold' collection is used to demonstrate the approach in which one part of a program makes a map of the world and stores it in memory, and the other part uses this map to find the gold The results indicate that the approach can evolve programs that store simple representations of their environments and use these representations to produce simple plans. 1. Introduction 
Abstract-found: 1
Intro-found: 1
Reference: <author> Ackley, D. and Littman M. </author> <year> (1991). </year> <title> Interactions between learning and evolution. </title> <booktitle> In Artificial Life II, SFI Studies in the Sciences of Complexity, </booktitle> <volume> vol. X, </volume> <editor> ed. </editor> <publisher> C.G. </publisher>
Reference: <editor> Langton, C.Taylor, J.D. Farmer, & S. Rasmussen, </editor> <publisher> Addison-Wesley. </publisher>
Reference: <author> Andre, D., </author> <year> (1994a). </year> <title> Evolution of Mapmaking: Learning, planning, and memory using genetic programming. </title> <booktitle> Proceedings of the 1994 IEEE World Congress on Computational Intelligence. </booktitle> <publisher> IEEE Press. </publisher>
Reference-contexts: In some preliminary work with the MAPMAKER method, we demonstrated that agents could evolve to solve the gold collection problem when programs had access to only one memory cell for each world location <ref> (Andre 1994a) </ref>. This previous work used the same multi-module MAPMAKER architecture used in the current work, but the evolved agents utilized a simplified two-dimensional memory that performed a good deal of computation for the agents. <p> The map-maker has no access to functions for motion, for example, but has access to view the world through the GoldPos function. Additionally, some functions are constrained to occur only in the ADFs so that to use the functions, the ADFs must be used. Previous work <ref> (Andre 1994a) </ref> indicated that runs that had no such restrictions were largely unsuccessful. Restricting several key functions to an ADF forces that ADF to be used in any circumstances where the behavior produced by those functions is needed.
Reference: <author> Andre, D., </author> <year> (1994b). </year> <title> Learning and upgrading rules for an OCR system using Genetic Programming. </title> <booktitle> Proceedings of the 1994 IEEE World Congress on Computational Intelligence. </booktitle> <publisher> IEEE Press. </publisher>
Reference: <author> Belew, R.K., McInerney, J., and Schraudolph, N.N. </author> <year> (1991). </year> <title> Evolving Networks: Using the genetic algorithm with connectionist learning. </title> <booktitle> In Artificial Life II, SFI Studies in the Sciences of Complexity, </booktitle> <volume> vol. X, </volume> <editor> ed. C.G. Langton, C.Taylor, </editor> <publisher> J.D. </publisher>
Reference: <editor> Farmer, & S. Rasmussen, </editor> <publisher> Addison-Wesley. </publisher>
Reference: <author> Genesereth, M. and Nourbakhsh, I.. </author> <year> (1993). </year> <title> Timesaving tips for problem solving with incomplete information. </title> <booktitle> In Proceedings of the 11th National Conference on Artificial Intelligence, </booktitle> <address> AAAI-Press. </address>
Reference-contexts: Solutions are thus not easily generated, even for the tiniest worlds. Additionally, the 2x2 world is similar to Sqaure World, a problem in the AI literature used to illustrate planning strategies <ref> (Genesereth and Nourbakhsh, 1993) </ref>. 4. Preparatory Steps There are four steps in preparing to use genetic programming on any problem, namely specifying the architecture of the programs to be evolved, the set of primitive programmatic ingredients, the fitness function, and the parameters for controlling the run.
Reference: <author> Goldberg, D.E., and Deb, K. </author> <year> (1991). </year> <title> A comparative analysis of selection schemes used in genetic algorithms. </title> <editor> In Rawlins, G. (editor), </editor> <booktitle> Foundations of Genetic Algorithms. </booktitle> <publisher> Morgran Kaufmann. </publisher>
Reference-contexts: In addition, there is a large penalty for picking up no golds. The fitness function is thus Fitness=5*Gold_Remaining + 20*Num_of_FalseDigs+(10,000 if Gold=0). The next step in preparing to run genetic programming is to choose values for various parameters of the run. Tournament selection <ref> (Goldberg and Deb, 1991) </ref> with a tournament size of 8 was used to choose parents for crossover. To choose parents to be removed from the population to make room for the newly created children, tournament selection with a tournament of size 2 was used.
Reference: <editor> Kinnear, K. E. Jr. (ed). </editor> <booktitle> (1994). Advances in Genetic Programming. </booktitle> <publisher> The MIT Press. </publisher>
Reference-contexts: Additionally, the role that the neural net plays in the individual is often pre-specified, and thus the learned representations can only be used in limited ways. In genetic programming, the use of branching operators that depend upon the state of the environment is common <ref> (Kinnear, 1994) </ref>. When an evolved program combines several actions and branching statements through the use of pr ogn statements it incorporates an implicit use of state.
Reference: <author> Koza, J.R., </author> <year> (1992). </year> <title> Genetic Programming: on the programming of computers by means of natural selection, </title> <address> Cambridge, Mass: </address> <publisher> MIT Press. </publisher>
Reference-contexts: However, much of the work on the artificial induction of computer programs has focused on reactive programs with no use or only a minimal use of state. These programs, although generated by an artificial process, do not themselves learn or produce plans of action. Genetic programming <ref> (Koza, 1992) </ref> is a variant of the genetic algorithm in which the genetic population consists of computer programs rather than of fixed length bitstrings or other fixed data structures. <p> As described in John Koza's seminal work (1992), genetic programming is a method to breed populations of computer programs. The genetic programming performed in this research employs steady-state selection (Syswerda, 1989), a minor variant on Koza's methods <ref> (Koza, 1992) </ref>. <p> R refers to the ephemeral random constant, -10 &lt;= R &lt;= 10. Ephemeral random constants provide a method for creating constants in GP <ref> (Koza, 1992) </ref> other than those explicitly provided. These constants all are terminals, since they take zero arguments. ADFU1 and A D F U 2 are one-argument functions that call the appropriate ADF. Arg_1 is a zero-argument function that contains the dummy variable (formal parameter) passed to one of the ADFs.
Reference: <author> Koza, J.R., </author> <title> (1994) Genetic Programming II:Autonmatic Discovery of Reusable Programs . Cambridge, </title> <address> MA: </address> <publisher> The MIT Press. </publisher>
Reference-contexts: Genetic programming can evolve programs utilizing iteration and subroutine calls, as discussed in Koza (1994). Automatically defined functions (ADFs) are subroutines that are coevolved with the main program, and have been found to increase the power of genetic programming <ref> (Koza, 1994) </ref>. For more information on genetic programming, see Kinnear (1994), which reviews recent advances in genetic programming. 2.2 Related Work The acquisition of mental models and the automatic synthesis of agents that learn are not new areas for the field of evolutionary computation. <p> The map-user must also evolve the code to move around the world to the squares with gold. If the map-user takes the simplest option and avoids path planning by visiting every square, then it must solve Koza's Lawnmower problem <ref> (Koza, 1994) </ref>. Koza found this problem to be very difficult when no ADFs were used, and fairly straightforward, although not trivial, when ADFs were used. Solutions are thus not easily generated, even for the tiniest worlds.
Reference: <author> Syswerda, G. </author> <year> (1989). </year> <title> Uniform crossover in genetic algorithms. </title> <booktitle> Proceedings of the Third International Conference on Genetic Algorithms. </booktitle> <editor> (J. Schaffer, Ed,) </editor> <address> San Mateo, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: As described in John Koza's seminal work (1992), genetic programming is a method to breed populations of computer programs. The genetic programming performed in this research employs steady-state selection <ref> (Syswerda, 1989) </ref>, a minor variant on Koza's methods (Koza, 1992).
Reference: <author> Tackett, W.A. </author> <year> (1994). </year> <title> Recombination, Selection, and the Genetic Construction of Computer Programs. </title> <type> Ph.D. dissertation, </type> <institution> University of Southern California, Department of Electrical Engineering Systems. </institution>
Reference: <author> Teller, A. </author> <title> (1994) Turing Completeness in the language of genetic programming with indexed memory. </title> <booktitle> Proceedings of the 1994 IEEE World Congress on Computational Intelligence. </booktitle> <publisher> IEEE Press. </publisher>
Reference: <author> Teller, A. </author> <year> (1994). </year> <title> The Evolution of Mental Models. </title> <booktitle> Advances in Genetic Programming. </booktitle> <editor> (Kim Kinnear, Ed.). </editor> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
References-found: 15

