URL: http://robotics.stanford.edu/~latombe/papers/handbook/cg/paper.ps.gz
Refering-URL: http://robotics.stanford.edu/~latombe/pub.html
Root-URL: http://www.robotics.stanford.edu
Title: 41 ROBOTICS  
Author: Dan Halperin, Lydia Kavraki and Jean-Claude Latombe 
Abstract-found: 0
Intro-found: 1
Reference: [AHLM96] <author> S. Akella, W. Huang, K. Lynch, and M. Mason. </author> <title> Planar manipulation on a conveyor with a one joint robot. </title> <booktitle> In Giralt and Hirzinger [GH96], </booktitle> <pages> pages 265-276. </pages>
Reference-contexts: An algorithm to compute the design of a sequence of curved fences along a conveyor belt to reorient a given polygonal part [WGPB96]. An algorithm computes the sequence of motions of a single articulated fence on a conveyor belt to achieve a goal orientation of an object <ref> [AHLM96] </ref>. A frictionless parallel-jaw gripper was used in [Gol93] to orient polygonal parts. For any part P having an n-sided convex hull, there exists a sequence of 2n 1 squeezes achieving a single orientation of P (up to symmetries of the convex hull).
Reference: [ALS95] <author> R. Alami, J.P. Laumond, and T. Simeon. </author> <title> Two manipulation planning algorithms. </title> <editor> Robotics 21 In Goldberg et al. </editor> <booktitle> [GHLW95], </booktitle> <pages> pages 109-125. </pages>
Reference-contexts: An extension of this problem allowing an infinite set of grasps is solved by an exact cell decomposition algorithm in <ref> [ALS95] </ref>. Heuristic algorithms have also been proposed. The planner in [KL94] first plans the path of the movable object M . During that phase, it only verifies that for every configuration taken by M there exists at least one collision-free configuration of the robot where it can hold M .
Reference: [ART95] <author> P.K. Agarwal, P. Raghavan, and H. Tamaki. </author> <title> Motion planning for a steering-constrained robot through moderate obstacles. </title> <booktitle> In Proc. 28th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 343-352, </pages> <year> 1995. </year>
Reference-contexts: Polygonal obstacles: an algorithm to decide whether there exists such a path between two configurations; it runs in time exponential in obstacle complexity [FW88]. Convex obstacles: The algorithm in <ref> [ART95] </ref> computes a path in polynomial time under the assumptions that all obstacles are convex and their boundaries have a curvature radius greater than the minimum turning radius of the point (moderate obstacles). Other polynomial algorithms (e.g., [BL93]) require some sort of discretization and are only asymptotically complete.
Reference: [BDG85] <author> J.E. Bobrow, S. Dubowsky, and J.S. Gibson. </author> <title> Time-optimal control of robotic manipulators along specified paths. </title> <journal> Int. J. of Robotics Research, </journal> <volume> 4 </volume> <pages> 3-17, </pages> <year> 1985. </year>
Reference-contexts: Numerical techniques solve this problem by finely discretizing the path t <ref> [BDG85] </ref>. MINIMAL-TIME TRAJECTORY PLANNING Finding a minimal-time trajectory, called kinodynamic motion planning, is much harder. One approach is to first plan a geometric free path and then iteratively 18 D. Halperin, L. Kavraki and J.-C. Latombe deform this path to reduce travel time [SD91].
Reference: [BDM96] <author> K.F. Bohringer, B.R. Donald, </author> <title> and N.C. MacDonald. What programmable vector fields can (and cannot) do: Force field algorithms for mems and vibratory parts feeders. </title> <booktitle> In Proc. IEEE Int. Conf. on Rob. and Autom., </booktitle> <pages> pages 822-930, </pages> <year> 1996. </year>
Reference-contexts: This sequence is computed in O (n 2 log n) time. This result has been generalized to planar parts having a piecewise algebraic convex hull [RG95]. New fabrication techniques, like MEMS, can be used to build arrays of tiny actuators that can be programmed to orient mechanical parts <ref> [BDM96] </ref>. OPEN PROBLEMS A major open practical problem is to predict feeder throughputs to evaluate alternative feeder designs, given the geometry of the parts to be manipulated.
Reference: [BG96] <author> R.C. Brost and K.Y. Goldberg. </author> <title> A complete algorithm for designing planar fixtures using modular components. </title> <journal> IEEE Tr. on Syst., Man and Cyber., </journal> <volume> 12 </volume> <pages> 31-46, </pages> <year> 1996. </year>
Reference-contexts: When the fixturing kit consists of a latticed workholding plane, three locators, and one clamp, the algorithm in <ref> [BG96] </ref> finds all possible placements of a given part on the workholding surface where form closure can be achieved, along with the corresponding positions of the locators and the clamp.
Reference: [BH95] <author> M. Barbehenn and S. Hutchinson. </author> <title> Efficient search and hierarchical motion planning by dynamically maintaining single-source shortest paths trees. </title> <journal> IEEE Tr. on Rob. and Autom., </journal> <volume> 11 </volume> <pages> 198-214, </pages> <year> 1995. </year>
Reference-contexts: Local-minima free potentials have been proposed [RK92], but their computation is likely to be at least as expensive as path planning. One may also construct grids at variable resolution. Hierarchical space decomposition techniques such as octrees and boxtrees have been used to that purpose <ref> [BH95] </ref>. At any decomposition level, each grid cell is labelled empty, full, or mixed depending on whether it lies entirely in the free space, or in the C-obstacle region, or overlaps both.
Reference: [BKL + 96] <author> J. Barraquand, L.E. Kavraki, J.C. Latombe, T.-Y. Li, R. Motwani, and P. Raghavan. </author> <title> A random sampling framework for path planning in large-dimensional configuration spaces. </title> <journal> Int. J. of Robotics Research, </journal> <note> 1996. To appear. </note>
Reference-contexts: PROBABILISTIC ALGORITHMS The complexity of path planning for robots with many dofs (more than 4 or 5) has led the development of computational schemes that attempt to trade off completeness against time. One such scheme, probabilistic planning <ref> [BKL + 96] </ref>, avoids computing an explicit geometric representation of the free space. Instead, it uses an efficient procedure to compute distances between bodies in the workspace. It samples the configuration space by selecting a large number of configurations at random and retaining only the free configurations as milestones. <p> Once a roadmap has been precom-puted, it is used to process an arbitrary number of path planning queries. Another sampling strategy [BL91] assumes that the initial and goal configurations are given, and incrementally builds a roadmap until these two configurations are connected. The results reported in <ref> [BKL + 96] </ref> bound the number of milestones generated by the algorithm given in [KSLO96], under the assumption that the configuration space verifies some simple geometric property.
Reference: [BL91] <author> J. Barraquand and J.C. Latombe. </author> <title> Robot motion planning: A distributed representation approach. </title> <journal> Int. J. of Robotics Research, </journal> <volume> 10 </volume> <pages> 628-649, </pages> <year> 1991. </year>
Reference-contexts: Various strategies can be applied to sample the configuration space. The strategy in [KSLO96] proceeds as sketched above. Once a roadmap has been precom-puted, it is used to process an arbitrary number of path planning queries. Another sampling strategy <ref> [BL91] </ref> assumes that the initial and goal configurations are given, and incrementally builds a roadmap until these two configurations are connected. <p> Evaluating the repulsive field requires an efficient distance computation algorithm. The search is usually done in a best-first fashion, by following the steepest descent of the potential function. Several techniques deal with local minima <ref> [BL91] </ref>. Local-minima free potentials have been proposed [RK92], but their computation is likely to be at least as expensive as path planning. One may also construct grids at variable resolution. Hierarchical space decomposition techniques such as octrees and boxtrees have been used to that purpose [BH95].
Reference: [BL93] <author> J. Barraquand and J.C. Latombe. </author> <title> Nonholonomic multibody mobile robots: Controllability and motion planning in the presence of obstacles. </title> <journal> Algorithmica, </journal> <volume> 10 </volume> <pages> 121-155, </pages> <year> 1993. </year>
Reference-contexts: It is locally controllable iff this is true for all q 0 2 C. Car-like robots and tractor-trailers that can go forward and backward are locally controllable <ref> [BL93] </ref>. Let X and Y be two smooth vector fields on C. <p> The Control Lie Algebra associated with the control set , denoted by L (), is the space of all linear combinations of vector fields in closed by the Lie bracket operation. The following result derives from the Controllability Rank Condition Theorem <ref> [BL93] </ref>: A robot is locally controllable if, for every q 2 C, (q) is symmetric with respect to the origin of T q (C) and the set fX (q) j X 2 L ((q))g has dimension m. <p> The algorithm in <ref> [BL93] </ref> directly constructs a nonholonomic path for a car-like or a tractor-trailer robot by searching a tree obtained by concatenating short feasible paths, starting at the robot's initial configuration. <p> Convex obstacles: The algorithm in [ART95] computes a path in polynomial time under the assumptions that all obstacles are convex and their boundaries have a curvature radius greater than the minimum turning radius of the point (moderate obstacles). Other polynomial algorithms (e.g., <ref> [BL93] </ref>) require some sort of discretization and are only asymptotically complete. OPEN PROBLEM Establish a non-trivial lower bound on the complexity of planning for a nonholo nomic robot that is not locally controllable. 41.5.3 UNCERTAINTY In practice, robots deviate from planned paths due to errors in control and position sensing.
Reference: [BR79] <author> O. Bottema and B. Roth. </author> <title> Theoretical Kinematics. </title> <publisher> North Holland Publishing Company, </publisher> <year> 1979. </year>
Reference-contexts: Matching and aspect graphs are two related topics that have been well studied, mainly in computer vision; see Chapter 25. 41.8 SOURCES AND RELATED MATERIAL Craig's book [Cra86] provides an introduction to robot arm kinematics, dynamics and control. For advanced kinematics see the book by Bottema and Roth <ref> [BR79] </ref>. Robot motion planning and its variants are discussed in Latombe's book [Lat91]. This book takes an algorithmic approach to a variety of advanced issues in robotics (not restricted to robot arms).
Reference: [Bri95] <author> A.J. Briggs. </author> <title> Efficient geometric algorithms for robot sensing and control. </title> <type> Report 95-1480, </type> <institution> Dept. of Computer Science, Cornell Univ., </institution> <address> Ithaca, NY, </address> <year> 1995. </year>
Reference-contexts: Checking the containment of I by the backprojection at each such direction yields a one-step motion plan, if one exists, in amortized time O (n 2 log n), where n is the number of edges in C <ref> [Bri95] </ref>. In [dBGH + 95] the computational complexity of solving certain one-step planning problems is expressed also in terms of the size of the control error. MULTI-STEP PLANNING For multi-step planning, algebraic approaches that check the satisfiability of a first-order semi-algebraic formula have been proposed. <p> It yields the concepts of a non-directional blocking graph and an interference diagram. In motion planning with uncertainty (Section 41.5.3), a similar concept is the non-directional backprojection/preimage of a goal <ref> [Bri95, LL95] </ref>. As the direction of motion varies, the topology of a preimage changes only at critical values which define an arrangement of cells in the motion space. This arrangement, along with a preimage computed in each cell, forms the non-directional preimage. <p> Practical techniques for localization are also available, e.g. [TA96]. ADDITIONAL ISSUES IN SENSING Sensor placement is the problem of computing the set of placements from which a sensor can monitor a region within a given workspace <ref> [Bri95] </ref>. Another problem is to choose a minimal set of sensors and their placement so as to completely cover a given region. This induces a family of art-gallery type problems (see Chapter 25) that vary according to the type of data that the sensor provides.
Reference: [Can88] <author> J.F. Canny. </author> <title> The Complexity of Robot Motion Planning. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1988. </year>
Reference-contexts: Two kinds of complete planners have been proposed: general ones, which apply to virtually any robot with an arbitrary number of dofs, and specific ones, which apply to a restricted family of robots usually having a fixed small number of dofs. The general "roadmap" algorithm in <ref> [Can88] </ref> is singly-exponential in the dimension of C and polynomial in both the number of polynomial constraints defining the free space and their maximal degree (Theorem 40.1.2). Specific algorithms have been developed mainly for robots with 2 or 3 dofs.
Reference: [Can89] <author> J.F. Canny. </author> <title> On computability of fine motion plans. </title> <booktitle> In Proc. IEEE Int. Conf. on Rob. and Autom., </booktitle> <pages> pages 177-182, </pages> <year> 1989. </year>
Reference-contexts: In [dBGH + 95] the computational complexity of solving certain one-step planning problems is expressed also in terms of the size of the control error. MULTI-STEP PLANNING For multi-step planning, algebraic approaches that check the satisfiability of a first-order semi-algebraic formula have been proposed. In <ref> [Can89] </ref> it is assumed that all possible trajectories have an algebraic description. The approach there is based on a two-player-game interpretation of planning, where the robot is one player and nature the other.
Reference: [CR87] <author> J.F. Canny and J. Reif. </author> <title> New lower bound techniques for robot motion planning problems. </title> <booktitle> In Proc. 28th IEEE Symp. on Found. of Comp. Sci., </booktitle> <pages> pages 49-60, </pages> <year> 1987. </year>
Reference-contexts: The condition T is a boolean function of the sensor readings and time which causes the motion to stop as soon as it becomes true. A plan may contain conditional branchings. This problem is NEXPTIME-hard for a point robot moving in 3-space among polyhedral obstacles <ref> [CR87] </ref>. PREIMAGE OF A GOAL Given a goal G and a command (v; T ), a preimage of G is any region P C such that executing the command from anywhere in P makes the robot reach and stop in G [LPMT84].
Reference: [Cra86] <author> J.J. Craig. </author> <title> Introduction to Robotics. Mechanics and Control. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1986. </year>
Reference-contexts: The equation of motion of a robot arm with m dofs can be written as M (q) q + V ( _ q; q)+G (q) = , where q, _ q, and q respectively denote the robot's configuration, velocity, and acceleration <ref> [Cra86] </ref>. M is the m fi m inertia matrix of the robot, V the m-vector (quadratic in _ q) of centrifugal and Coriolis forces, and G the m-vector of gravity forces. is the m-vector of the torques applied by the joint actuators. <p> There has been considerable interest in reconstructing shapes of objects using simple sensors, called probes; see Chapter 26. Matching and aspect graphs are two related topics that have been well studied, mainly in computer vision; see Chapter 25. 41.8 SOURCES AND RELATED MATERIAL Craig's book <ref> [Cra86] </ref> provides an introduction to robot arm kinematics, dynamics and control. For advanced kinematics see the book by Bottema and Roth [BR79]. Robot motion planning and its variants are discussed in Latombe's book [Lat91].
Reference: [dBGH + 95] <author> M. de Berg, L. Guibas, D. Halperin, M. Overmars, O. Schwarzkopf, M. Sharir, and M. Teillaud. </author> <title> Reaching a goal with directional uncertainty. </title> <journal> Theoret. Comput. Sci., </journal> <volume> 140 </volume> <pages> 301-317, </pages> <year> 1995. </year>
Reference-contexts: Checking the containment of I by the backprojection at each such direction yields a one-step motion plan, if one exists, in amortized time O (n 2 log n), where n is the number of edges in C [Bri95]. In <ref> [dBGH + 95] </ref> the computational complexity of solving certain one-step planning problems is expressed also in terms of the size of the control error. MULTI-STEP PLANNING For multi-step planning, algebraic approaches that check the satisfiability of a first-order semi-algebraic formula have been proposed.
Reference: [Don87] <author> B.R. Donald. </author> <title> A search algorithm for motion planning with six degrees of freedom. </title> <journal> Artificial Intelligence, </journal> <volume> 31 </volume> <pages> 295-353, </pages> <year> 1987. </year>
Reference-contexts: HEURISTIC ALGORITHMS Several heuristic techniques have been proposed to speedup path planning. Some of them work well in practice, but they usually offer no performance guarantee. Heuristic algorithms often search a regular grid defined over configuration space and generate a path as a sequence of adjacent grid points <ref> [Don87] </ref>. The search can be guided by a potential field, a function over the free space that has a global minimum at the goal configuration. This function may be constructed as the sum of an attractive and a repulsive field [Kha86].
Reference: [DX95] <author> B.R. Donald and P. Xavier. </author> <title> Provably good approximation algorithms for optimal kinodynamic planning: Robots with decoupled dynamics bounds. </title> <journal> Algorithmica, </journal> <volume> 14 </volume> <pages> 443-479, </pages> <year> 1995. </year>
Reference-contexts: Each iteration requires checking the new path for collision and recomputing the optimal-time control. No bound has been established on the running time of this approach or the goodness of its outcome. Kinodynamic planning is NP-hard for a point robot under Newtonian mechanics in 3-space <ref> [DX95] </ref>. The approximation algorithm in [DXCR93] computes a trajectory *-close to optimal in time polynomial in both 1=* and the workspace complexity. 41.6 DATA STRUCTURES FOR MOVING OBJECTS Robotics requires efficient algorithms to compute motions and/or to update properties of bodies as they move (e.g., distances to obstacles).
Reference: [DXCR93] <author> B.R. Donald, P. Xavier, J.F. Canny, and J. Reif. </author> <title> Kinodynamic motion planning. </title> <journal> J. of the ACM, </journal> <volume> 40 </volume> <pages> 1048-1066, </pages> <address> 1993. 22 D. </address> <publisher> Halperin, </publisher> <editor> L. Kavraki and J.-C. </editor> <publisher> Latombe </publisher>
Reference-contexts: No bound has been established on the running time of this approach or the goodness of its outcome. Kinodynamic planning is NP-hard for a point robot under Newtonian mechanics in 3-space [DX95]. The approximation algorithm in <ref> [DXCR93] </ref> computes a trajectory *-close to optimal in time polynomial in both 1=* and the workspace complexity. 41.6 DATA STRUCTURES FOR MOVING OBJECTS Robotics requires efficient algorithms to compute motions and/or to update properties of bodies as they move (e.g., distances to obstacles).
Reference: [EM88] <author> M. Erdmann and M. Mason. </author> <title> An exploration of sensorless manipulation. </title> <journal> IEEE Tr. on Rob. and Autom., </journal> <volume> 4(4) </volume> <pages> 369-379, </pages> <year> 1988. </year>
Reference-contexts: This result has been used in several nonprehensile manipulation algorithms: A planning algorithm for a robot that tilts a tray containing a planar part of known shape to orient it to a desired orientation <ref> [EM88] </ref>. An algorithm to compute the design of a sequence of curved fences along a conveyor belt to reorient a given polygonal part [WGPB96]. An algorithm computes the sequence of motions of a single articulated fence on a conveyor belt to achieve a goal orientation of an object [AHLM96].
Reference: [Erd86] <author> M. Erdmann. </author> <title> Using backprojections for fine motion planning with uncertainty. </title> <journal> Int. J. of Robotics Research, </journal> <volume> 5 </volume> <pages> 19-45, </pages> <year> 1986. </year>
Reference-contexts: One way to compute a (non-maximal) preimage is to restrict the termination condition so that it recognizes G independently of the region from which the motion started <ref> [Erd86] </ref>. For example, one may shrink G to a subset K, called the kernel of G, such that whenever the robot is in K, all robot configurations consistent with the current sensor readings are in G.
Reference: [FC92] <author> C. Ferrari and J.F. Canny. </author> <title> Planning optimal grasps. </title> <booktitle> In Proc. IEEE Int. Conf. on Rob. and Autom., </booktitle> <pages> pages 2290-2295, </pages> <year> 1992. </year>
Reference-contexts: This algorithm is linear in the part complexity . Other linear-time techniques using results from combinatorial geometry (Steinitz Theorem) are presented in [MSS87, Mis95]. Optimal force-closure grasps are synthesized in <ref> [FC92] </ref> by maximizing the set of external wrenches that can be balanced by the contact wrenches. Robotics 5 Finding the maximal regions on a body where fingers can be positioned independently while achieving force closure makes it possible to accommodate errors in finger placement.
Reference: [FW88] <author> S.J. Fortune and G.T. Wilfong. </author> <title> Planning constrained motions. </title> <booktitle> In Proc. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 445-459, </pages> <year> 1988. </year>
Reference-contexts: Results include: No obstacles: a complete synthesis of the shortest, no-cusp path for a point moving with a lower-bounded turning radius [SL93]. Polygonal obstacles: an algorithm to decide whether there exists such a path between two configurations; it runs in time exponential in obstacle complexity <ref> [FW88] </ref>. Convex obstacles: The algorithm in [ART95] computes a path in polynomial time under the assumptions that all obstacles are convex and their boundaries have a curvature radius greater than the minimum turning radius of the point (moderate obstacles).
Reference: [GH96] <editor> G. Giralt and G. Hirzinger, editors. </editor> <booktitle> Robotics Research. </booktitle> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: Robot motion planning and its variants are discussed in Latombe's book [Lat91]. This book takes an algorithmic approach to a variety of advanced issues in robotics (not restricted to robot arms). The proceedings series of The International Symposium on Robotics Research gives state-of-the-art presentations of robotics in general <ref> [GH96] </ref>, whereas the recent collection [GHLW95] emphasizes algorithmic issues in robotics. Several Computational Geometry books contain sections on robotics or motion planning [O'R94, SA95]. RELATED CHAPTERS Chapter 21: Arrangements Chapter 25: Visibility Chapter 29: Computational real algebraic geometry Chapter 40: Motion planning
Reference: [GHH + 95] <author> L. Guibas, D. Halperin, H. Hirukawa, J.C. Latombe, and R.H. Wilson. </author> <title> A simple and efficient procedure for polyhedral assembly partitioning under infinitesimal motions. </title> <booktitle> In Proc. IEEE Int. Conf. on Rob. and Autom., </booktitle> <pages> pages 2553-2560, </pages> <year> 1995. </year>
Reference-contexts: Then partitioning the polyhedral assembly takes O (mc 5 ) time, where m is the number of pairs of parts in contact and c is the number of independent point-plane contact constraints. (This result is improved in <ref> [GHH + 95] </ref> by using the concept of maximally covered cells; see Chapter 21.) Robotics 9 Using these algorithms, every feasible disassembly sequence can be generated in polynomial time. In [WL95] NDBGs are only defined for simple families of separating motions (infinitesimal rigid motions and infinite translations). <p> For the case of infinitesimal rigid motion it has been observed that only a (relatively small) subset of the NDBG needs to be constructed <ref> [GHH + 95] </ref>.
Reference: [GHLW95] <author> K.Y. Goldberg, D. Halperin, J.C. Latombe, and R.H. Wilson, </author> <title> editors. Algorithmic Foundations of Robotics. A K Peters, </title> <publisher> Ltd., </publisher> <year> 1995. </year>
Reference-contexts: This book takes an algorithmic approach to a variety of advanced issues in robotics (not restricted to robot arms). The proceedings series of The International Symposium on Robotics Research gives state-of-the-art presentations of robotics in general [GH96], whereas the recent collection <ref> [GHLW95] </ref> emphasizes algorithmic issues in robotics. Several Computational Geometry books contain sections on robotics or motion planning [O'R94, SA95]. RELATED CHAPTERS Chapter 21: Arrangements Chapter 25: Visibility Chapter 29: Computational real algebraic geometry Chapter 40: Motion planning
Reference: [GJK88] <author> E.G. Gilbert, D.W. Johnson, and S.S. Keerthi. </author> <title> A fast procedure for computing distance between complex objects in three-dimensional space. </title> <journal> IEEE Tr. on Rob. and Autom., </journal> <volume> 4 </volume> <pages> 193-203, </pages> <year> 1988. </year>
Reference-contexts: DISTANCE COMPUTATION 12 D. Halperin, L. Kavraki and J.-C. Latombe The efficient computation of distances between two bodies is a crucial element of many path planners. Various algorithms have been proposed to compute distances between two convex bodies. A numerical descent technique is described in <ref> [GJK88] </ref> to compute the distance between two convex polyhedra; experience indicates that it runs in approximately linear time in the total complexity of the polyhedra. See Chapter 33 for related techniques.
Reference: [Gol93] <author> K. Y. Goldberg. </author> <title> Orienting polygonal parts without sensors. </title> <journal> Algorithmica, </journal> <volume> 10 </volume> <pages> 201-225, </pages> <year> 1993. </year>
Reference-contexts: An algorithm computes the sequence of motions of a single articulated fence on a conveyor belt to achieve a goal orientation of an object [AHLM96]. A frictionless parallel-jaw gripper was used in <ref> [Gol93] </ref> to orient polygonal parts. For any part P having an n-sided convex hull, there exists a sequence of 2n 1 squeezes achieving a single orientation of P (up to symmetries of the convex hull). This sequence is computed in O (n 2 log n) time. <p> As the direction of motion varies, the topology of a preimage changes only at critical values which define an arrangement of cells in the motion space. This arrangement, along with a preimage computed in each cell, forms the non-directional preimage. A related concept is used in <ref> [Gol93] </ref> to construct the possible orientations of a polygonal body after it has been squeezed by a parallel-jaw gripper (Section 41.2.3). DYNAMIC MAINTENANCE OF KINEMATIC STRUCTURES Several prototypes of highly flexible robots have been designed and constructed in recent years.
Reference: [Gri90] <author> W.E.L. </author> <title> Grimson. Object Recognition by Computer. The Role of Geometric Constraints. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: Preprocessing these data yields more directly usable information, e.g., geometric information, which can then be exploited to perform such tasks as model construction, object identification, and robot localization. Vision sensors are the most widely used sensors. Many recent textbooks focus on the role of geometry in computer vision, e.g. <ref> [Gri90] </ref>. Touch and force sensors are important to detect and characterize contacts among objects, for instance in manipulation tasks. Sensing is a wide domain of research with many subareas and challenging problems. Here we only mention a few selected topics.
Reference: [HJW85] <author> J.E. Hopcroft, D.A. Joseph, and S.H Whitesides. </author> <title> On the movement of robot arms in 2-dimensional bounded regions. </title> <journal> SIAM J. on Computing, </journal> <volume> 14 </volume> <pages> 315-333, </pages> <year> 1985. </year>
Reference-contexts: However, it no longer holds in some very simple settings; for instance, planning the path of a planar arm within an empty circle is in P <ref> [HJW85] </ref>. Two kinds of complete planners have been proposed: general ones, which apply to virtually any robot with an arbitrary number of dofs, and specific ones, which apply to a restricted family of robots usually having a fixed small number of dofs.
Reference: [HLM] <author> D. Halperin, J.C. Latombe, and R. Motwani. </author> <title> Dynamic maintenance of kinematic structures. </title> <editor> In J.P. Laumond and M. Overmars, editors, </editor> <title> Algorithmic Foundations of Robotics. A K Peters. </title> <note> To appear. </note>
Reference-contexts: Given a linkage with many dofs, how can we efficiently maintain a data structure that allows us to quickly answer intersection (or range) queries as the bodies move. Several models for dynamic maintenance of such linkages are proposed in <ref> [HLM] </ref> together with efficient maintenance algorithms. Tight results are given on the worst-case, amortized, and randomized complexity of this data structure problem.
Reference: [HS91] <author> L. S. Homem de Mello and A. C. Sanderson. </author> <title> A correct and complete algorithm for the generation of mechanical assembly sequences. </title> <journal> IEEE Tr. on Rob. and Autom., </journal> <volume> 7(2) </volume> <pages> 228-240, </pages> <year> 1991. </year>
Reference-contexts: The problem remains NP-complete when both S and AnS are required to be connected and motions are restricted to translations [KK95]. MONOTONE TWO-HANDED ASSEMBLY SEQUENCING A popular approach to assembly sequencing is disassembly sequencing <ref> [HS91] </ref>. A sequence that separates an assembly to its individual components is first generated and next reversed. Most existing assembly sequencers can only generate two-handed monotone sequences. Such a sequence is computed by partitioning the assembly and, recursively, the obtained subassemblies into two separated subassemblies.
Reference: [HS96] <author> D. Halperin and M. Sharir. </author> <title> A near-quadratic algorithm for planning the motion of a polygon in a polygonal environment. </title> <journal> Discrete Comput. Geom., </journal> <volume> 16 </volume> <pages> 121-134, </pages> <year> 1996. </year>
Reference-contexts: Specific algorithms have been developed mainly for robots with 2 or 3 dofs. For a k-sided polygonal robot moving freely in a polygonal workspace, the algorithm in <ref> [HS96] </ref> takes O ((kn) 2+* ) time, where n is the total number of edges of the workspace (Theorem 40.2.10).
Reference: [HW95] <author> D. Halperin and R.H. Wilson. </author> <title> Assembly partitioning along simple paths: the case of multiple translations. </title> <booktitle> In Proc. IEEE Int. Conf. on Rob. and Autom., </booktitle> <pages> pages 1585-1593, </pages> <year> 1995. </year>
Reference-contexts: Robotics 7 FIGURE 41.3.1 Both assemblies below admit two-handed sequences with translational motions only. While (a) accepts a monotone such sequence, (b) does not. To disassemble (b) the triangle must be translated to an intermediate position <ref> [HW95] </ref>. If general motions are accepted, there exists a monotone two-handed sequence for (b). A monotone three-handed sequence with translations only is also possible. Assembly operation: Motion that merges s pairwise-separated subassemblies (s 2) into a new subassembly; each subassembly moves as a single body. <p> When each separating motion is restricted to be a short sequence of concatenated translations (for example, a finite translation followed by an infinite translation), rather efficient partitioning algorithms are proposed in <ref> [HW95] </ref>. OPEN PROBLEM The complexity of the NDBG grows exponentially with the number of parameters that control the allowable motions, making this approach highly time consuming for assembly sequencing with compound motions.
Reference: [Kha86] <author> O. Khatib. </author> <title> Real-time obstacle avoidance for manipulators and mobile robots. </title> <journal> Int. J. of Robotics Research, </journal> <volume> 5 </volume> <pages> 90-98, </pages> <year> 1986. </year>
Reference-contexts: The search can be guided by a potential field, a function over the free space that has a global minimum at the goal configuration. This function may be constructed as the sum of an attractive and a repulsive field <ref> [Kha86] </ref>. The attractive field has a single minimum at the goal and grows to infinity as the distance to the goal increases.
Reference: [KK95] <author> L.E. Kavraki and M.N. Kolountzakis. </author> <title> Partitioning a planar assembly into two connected parts is NP-complete. </title> <journal> Information Processing Letters, </journal> <volume> 55 </volume> <pages> 159-165, </pages> <year> 1995. </year>
Reference-contexts: Kavraki and J.-C. Latombe sembly A can be partitioned into two subassemblies S and AnS such that they can be separated by an arbitrary motion is NP-complete [WKLLP95]. The problem remains NP-complete when both S and AnS are required to be connected and motions are restricted to translations <ref> [KK95] </ref>. MONOTONE TWO-HANDED ASSEMBLY SEQUENCING A popular approach to assembly sequencing is disassembly sequencing [HS91]. A sequence that separates an assembly to its individual components is first generated and next reversed. Most existing assembly sequencers can only generate two-handed monotone sequences.
Reference: [KL94] <author> Y. Koga and J.C. Latombe. </author> <title> On multi-arm manipulation planning. </title> <booktitle> In Proc. IEEE Int. Conf. on Rob. and Autom., </booktitle> <pages> pages 945-952, </pages> <year> 1994. </year>
Reference-contexts: An extension of this problem allowing an infinite set of grasps is solved by an exact cell decomposition algorithm in [ALS95]. Heuristic algorithms have also been proposed. The planner in <ref> [KL94] </ref> first plans the path of the movable object M . During that phase, it only verifies that for every configuration taken by M there exists at least one collision-free configuration of the robot where it can hold M .
Reference: [KMY92] <author> D. Kirkpatrick, B. Mishra, and C. Yap. </author> <title> Quantitative Steinitz's theorem with applications to multifingered grasping. </title> <journal> Discrete Comput. Geom., </journal> <volume> 7(3) </volume> <pages> 295-318, </pages> <year> 1992. </year>
Reference-contexts: A related quantitative measure of the quality of a grasp (one among several metrics proposed) is the radius of the maximum ball centered at the origin and contained in the convex hull H <ref> [KMY92] </ref>. SYNTHESIZING FORM/FORCE CLOSURE GRASPS Most research has concentrated on computing grasps with 2 to 4 non-sticky fingers. Optimization techniques and elementary Euclidean geometry are used in [MNP90] to derive an algorithm computing a single force-closure grasp of a polygonal/polyhedral part. This algorithm is linear in the part complexity .
Reference: [Kol95] <author> K. Kolarov. </author> <title> Algorithms for optimal design of robots in complex environment. </title> <editor> In Goldberg et al. </editor> <booktitle> [GHLW95], </booktitle> <pages> pages 347-369. Robotics 23 </pages>
Reference-contexts: OPEN PROBLEM Given a workspace W , find the optimal design of a robot arm that can reach everywhere in W without collision. Several variants of this problem are solved in <ref> [Kol95] </ref>. However the three-dimensional case is largely open.
Reference: [KSLO96] <author> L.E. Kavraki, P. Svestka, J.C. Latombe, and M. Overmars. </author> <title> Probabilistic roadmaps for fast path planning in high dimensional configuration spaces. </title> <journal> IEEE Tr. on Rob. and Autom., </journal> <volume> 12 </volume> <pages> 566-580, </pages> <year> 1996. </year>
Reference-contexts: This computation yields the graph (V; E), called a probabilistic roadmap, where V is the set of milestones and E is the set of pairs of milestones that have been connected. Various strategies can be applied to sample the configuration space. The strategy in <ref> [KSLO96] </ref> proceeds as sketched above. Once a roadmap has been precom-puted, it is used to process an arbitrary number of path planning queries. Another sampling strategy [BL91] assumes that the initial and goal configurations are given, and incrementally builds a roadmap until these two configurations are connected. <p> Another sampling strategy [BL91] assumes that the initial and goal configurations are given, and incrementally builds a roadmap until these two configurations are connected. The results reported in [BKL + 96] bound the number of milestones generated by the algorithm given in <ref> [KSLO96] </ref>, under the assumption that the configuration space verifies some simple geometric property. One such property is *-goodness: a set S of volume is said to be *-good, if every point in S sees a subset of S of volume at least * fi .
Reference: [Lat91] <author> J.C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: A preimage is then computed as the region from which the robot commanded along v is guaranteed to reach K. This region is called the backprojection of K for v. This preimage computation approach has been well studied in a polygonal configuration space when G is a polygon <ref> [Lat91] </ref>. ONE-STEP PLANNING In a polygonal configuration space, the kernel of a polygonal goal is either independent of the selected v or changes at a number of critical orientations of v that is linear in the workspace complexity [Lat91]. <p> well studied in a polygonal configuration space when G is a polygon <ref> [Lat91] </ref>. ONE-STEP PLANNING In a polygonal configuration space, the kernel of a polygonal goal is either independent of the selected v or changes at a number of critical orientations of v that is linear in the workspace complexity [Lat91]. Moreover, the backprojection of a polygonal region K, when the orientation of v varies, changes topology only at a quadratic number of critical directions. Its intersection with a polygonal initial region I of constant complexity also changes qualitatively at few directions of v. <p> For advanced kinematics see the book by Bottema and Roth [BR79]. Robot motion planning and its variants are discussed in Latombe's book <ref> [Lat91] </ref>. This book takes an algorithmic approach to a variety of advanced issues in robotics (not restricted to robot arms). The proceedings series of The International Symposium on Robotics Research gives state-of-the-art presentations of robotics in general [GH96], whereas the recent collection [GHLW95] emphasizes algorithmic issues in robotics.
Reference: [LC91] <author> M.C. Lin and J.F. Canny. </author> <title> A fast algorithm for incremental distance computation. </title> <booktitle> In Proc. IEEE Int. Conf. on Rob. and Autom., </booktitle> <pages> pages 1008-1014, </pages> <year> 1991. </year>
Reference-contexts: Simple bounding volumes, often coupled with hierarchical decomposition techniques have been used to reduce computation time [Qui94]. When motion is involved, incremental distance computation has been suggested for tracking the closest points on a pair of convex polyhedra <ref> [LC91] </ref>. It takes advantage of the fact that the closest features (faces, edges, vertices) change infrequently as the polyhedra move along finely discretized paths. 41.5 OTHER MOTION PLANNING PROBLEMS There are many useful extensions of the basic path planning problem.
Reference: [LJTM94] <author> J.P. Laumond, P.E. Jacobs, M. Taix, and R.M. Murray. </author> <title> A motion planner for nonholonomic mobile robots. </title> <journal> IEEE Tr. on Rob. and Autom., </journal> <volume> 10 </volume> <pages> 577-593, </pages> <year> 1994. </year>
Reference-contexts: The recursion halts at every subpath that can be replaced by a feasible free subpath. Specific substitution rules (e.g., Reeds and Shepp curves) have been defined for car-like robots <ref> [LJTM94] </ref>. The complexity of transforming a non-feasible free path t into a feasible one is of the form O (* d ), where * is the smallest clearance between the robot and the obstacles along t and d is the degree of nonholonomy of the robot (see [LJTM94] for the case <p> for car-like robots <ref> [LJTM94] </ref>. The complexity of transforming a non-feasible free path t into a feasible one is of the form O (* d ), where * is the smallest clearance between the robot and the obstacles along t and d is the degree of nonholonomy of the robot (see [LJTM94] for the case d = 2). The algorithm in [BL93] directly constructs a nonholonomic path for a car-like or a tractor-trailer robot by searching a tree obtained by concatenating short feasible paths, starting at the robot's initial configuration.
Reference: [LL95] <author> A. Lazanas and J.C. Latombe. </author> <title> Landmark-based robot navigation. </title> <journal> Algorithmica, </journal> <volume> 13 </volume> <pages> 472-501, </pages> <year> 1995. </year>
Reference-contexts: LANDMARK-BASED PLANNING Often a workspace contains features that can be reliably sensed and used to precisely localize the robot. Each such landmark feature induces a region in configuration space called the landmark area from which the robot can sense the corresponding feature. The planner described in <ref> [LL95] </ref> considers a point robot among n circular obstacles and O (n) circular landmark areas. It assumes perfect position sensing and motion control in landmark areas. <p> It yields the concepts of a non-directional blocking graph and an interference diagram. In motion planning with uncertainty (Section 41.5.3), a similar concept is the non-directional backprojection/preimage of a goal <ref> [Bri95, LL95] </ref>. As the direction of motion varies, the topology of a preimage changes only at critical values which define an arrangement of cells in the motion space. This arrangement, along with a preimage computed in each cell, forms the non-directional preimage.
Reference: [LP83] <author> T. Lozano-Perez. </author> <title> Spatial planning: A configuration space approach. </title> <journal> IEEE Tr. on Computers, </journal> <volume> 32 </volume> <pages> 108-120, </pages> <year> 1983. </year>
Reference-contexts: It arises in a variety of forms. The simplest form|the basic path planning problem |requires finding a geometric collision-free path for a single robot in a known static workspace. The path is represented by a curve segment connecting two points in the robot's configuration space <ref> [LP83] </ref>. This curve must not intersect a forbidden region, the C-obstacle region, which is the image of the workspace obstacles. Other motion planning problems require dealing with moving obstacles, multiple robots, movable objects, uncertainty, etc. In this section we consider basic path planning.
Reference: [LPMT84] <author> T. Lozano-Perez, M.T. Mason, and R.H. Taylor. </author> <title> Automatic synthesis of fine-motion strategies for robots. </title> <journal> Int. J. of Robotics Research, </journal> <volume> 3 </volume> <pages> 3-24, </pages> <year> 1984. </year>
Reference-contexts: PREIMAGE OF A GOAL Given a goal G and a command (v; T ), a preimage of G is any region P C such that executing the command from anywhere in P makes the robot reach and stop in G <ref> [LPMT84] </ref>. One way to compute a (non-maximal) preimage is to restrict the termination condition so that it recognizes G independently of the region from which the motion started [Erd86].
Reference: [LR96] <author> J.P. Laumond and J.J. Risler. </author> <title> Nonholonomic systems: controllability and complexity. </title> <journal> Theoretical Computer Sciences, </journal> <volume> 157 </volume> <pages> 101-114, </pages> <year> 1996. </year>
Reference-contexts: The degree of nonholonomy of a car-like robot is 2. Except at some singular configurations, the degree of nonholonomy of a tractor towing a chain of s trailers is 2 + s <ref> [LR96] </ref>. Intuitively, the higher the degree of nonholonomy the more complex (and the slower) the robot's maneuvers to perform some motions. PLANNING FOR CONTROLLABLE ROBOTS Let A be a locally controllable non-holonomic robot.
Reference: [Mas82] <author> M. Mason. </author> <title> Manipulation by grasping and pushing operations. </title> <type> PhD thesis, </type> <institution> MIT, Artificial Intelligence Laboratory, </institution> <year> 1982. </year>
Reference-contexts: It may also 6 D. Halperin, L. Kavraki and J.-C. Latombe enable a robot to move parts that are too large or heavy to be grasped and lifted. Pushing is one form of nonprehensile manipulation. Work on pushing originated in <ref> [Mas82] </ref> where a simple rule is established to qualitatively determine the motion of a pushed object. This rule makes use of the position of the center of friction of the object on the supporting surface.
Reference: [Mat95] <author> R. Matikalli. </author> <title> Mechanics Based Assembly Planning. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1995. </year>
Reference-contexts: The algorithm in [ORSW95] computes the form-closure fixtures of input polygonal parts using a kit containing one edge fixture, one locator, and one clamp. An algorithm for fixturing an assembly of parts that are not rigidly fastened together is proposed in <ref> [Mat95] </ref>. A large number of fixturing contacts are first scattered at random on the external boundary of the assembly.
Reference: [Mis91] <author> B. Mishra. Workholding: </author> <title> Analysis and planning. </title> <booktitle> In Proc. IEEE/SRJ Int. Conf. on Intelligent Robots and Systems, </booktitle> <pages> pages 53-57, </pages> <year> 1991. </year>
Reference-contexts: one clamp are used on a workholding plane, there exist polygons of arbitrary size for which no fixture design can be achieved [ZGW94]; but, if parts are restricted to be rectilinear, a fixture can always be found as long as all edges have length of four or more lattice units <ref> [Mis91] </ref>. When the fixturing kit consists of a latticed workholding plane, three locators, and one clamp, the algorithm in [BG96] finds all possible placements of a given part on the workholding surface where form closure can be achieved, along with the corresponding positions of the locators and the clamp.
Reference: [Mis95] <author> B. Mishra. </author> <title> Grasp metrics: Optimality and complexity. </title> <editor> In Goldberg et al. </editor> <booktitle> [GHLW95], </booktitle> <pages> pages 137-165. </pages>
Reference-contexts: Optimization techniques and elementary Euclidean geometry are used in [MNP90] to derive an algorithm computing a single force-closure grasp of a polygonal/polyhedral part. This algorithm is linear in the part complexity . Other linear-time techniques using results from combinatorial geometry (Steinitz Theorem) are presented in <ref> [MSS87, Mis95] </ref>. Optimal force-closure grasps are synthesized in [FC92] by maximizing the set of external wrenches that can be balanced by the contact wrenches.
Reference: [MNP90] <author> X. Markenscoff, L. Ni, and C.H. Papadimitriou. </author> <title> The geometry of grasping. </title> <journal> The Int. J. of Robotics Research, </journal> <volume> 9 </volume> <pages> 61-74, </pages> <year> 1990. </year>
Reference-contexts: SIZE OF A FORM/FORCE CLOSURE GRASP The following results are shown in <ref> [MNP90, MSS87] </ref>: Bodies with rotational symmetry (e.g., discs in 2-space, spheres and cylinders in 3-space) admit no form-closure grasps. All other bodies admit a form-closure grasp with at most 4 fingers in 2-space and 12 fingers in 3-space. All polyhedral bodies have a form-closure grasp with 7 fingers. <p> SYNTHESIZING FORM/FORCE CLOSURE GRASPS Most research has concentrated on computing grasps with 2 to 4 non-sticky fingers. Optimization techniques and elementary Euclidean geometry are used in <ref> [MNP90] </ref> to derive an algorithm computing a single force-closure grasp of a polygonal/polyhedral part. This algorithm is linear in the part complexity . Other linear-time techniques using results from combinatorial geometry (Steinitz Theorem) are presented in [MSS87, Mis95].
Reference: [MSS87] <author> B. Mishra, J.T. Schwartz, and M. Sharir. </author> <title> On the existence and synthesis of multi-finger positive grips. </title> <journal> Algorithmica, </journal> <volume> 2 </volume> <pages> 541-558, </pages> <year> 1987. </year>
Reference-contexts: SIZE OF A FORM/FORCE CLOSURE GRASP The following results are shown in <ref> [MNP90, MSS87] </ref>: Bodies with rotational symmetry (e.g., discs in 2-space, spheres and cylinders in 3-space) admit no form-closure grasps. All other bodies admit a form-closure grasp with at most 4 fingers in 2-space and 12 fingers in 3-space. All polyhedral bodies have a form-closure grasp with 7 fingers. <p> Said otherwise: the null wrench (origin) should lie in the interior of the convex hull H of the finger wrenches <ref> [MSS87] </ref>. This condition provides an effective test for deciding in constant time whether a given grasp achieves force closure. <p> Optimization techniques and elementary Euclidean geometry are used in [MNP90] to derive an algorithm computing a single force-closure grasp of a polygonal/polyhedral part. This algorithm is linear in the part complexity . Other linear-time techniques using results from combinatorial geometry (Steinitz Theorem) are presented in <ref> [MSS87, Mis95] </ref>. Optimal force-closure grasps are synthesized in [FC92] by maximizing the set of external wrenches that can be balanced by the contact wrenches.
Reference: [MZG + 96] <author> B. Mirtich, Y. Zhuang, K. Goldberg, J. Craig, R. Zanutta, B. Carlisle, and J. Canny. </author> <title> Estimating pose statistics for robotic part feeders. </title> <booktitle> In Proc. IEEE Int. Conf. on Rob. and Autom., </booktitle> <pages> pages 1140-1146, </pages> <year> 1996. </year>
Reference-contexts: OPEN PROBLEMS A major open practical problem is to predict feeder throughputs to evaluate alternative feeder designs, given the geometry of the parts to be manipulated. In relation to this problem, simulation algorithms have recently been proposed to predict the pose of a part dropped on a horizontal surface <ref> [MZG + 96] </ref>. 41.3 ASSEMBLY SEQUENCING Most mechanical products consist of multiple parts. The goal of assembly sequencing is to compute both an order in which parts can be assembled and the corre sponding required movements of the parts. GLOSSARY Assembly: Collection of bodies in some given relative placements.
Reference: [Nat88] <author> B. K. Natarajan. </author> <title> On planning assemblies. </title> <booktitle> In Proc. 4th ACM Symp. on Comput. Geom., </booktitle> <pages> pages 299-308, </pages> <year> 1988. </year>
Reference-contexts: See Figure 41.3.1. NUMBER OF HANDS IN ASSEMBLY Every assembly of convex polygons in the plane has a two-handed assembly sequence of translations. In the worst-case, s hands are necessary and sufficient for assemblies of s star-shaped polygons/polyhedra <ref> [Nat88] </ref>. There exists an assembly of six tetrahedra without a two-handed assembly sequence of translations, but with a three-handed sequence of translations. Every assembly of five or fewer convex polyhedra admits a two-handed assembly sequence of translations. <p> There exists an assembly of thirty convex polyhedra that cannot be assembled with two hands [SS94]. COMPLEXITY OF ASSEMBLY SEQUENCING When arbitrary sequences are allowed, assembly sequencing is PSPACE-hard. The problem remains PSPACE-hard even when the bodies are polygons, each with constant number of vertices <ref> [Nat88] </ref>. When only two-handed monotone sequences are permitted, deciding if an as 8 D. Halperin, L. Kavraki and J.-C. Latombe sembly A can be partitioned into two subassemblies S and AnS such that they can be separated by an arbitrary motion is NP-complete [WKLLP95].
Reference: [Ngu88] <author> V.D. Nguyen. </author> <title> Constructing force-closure grasps. </title> <journal> Int. J. on Robotics Research, </journal> <volume> 7 </volume> <pages> 3-16, </pages> <year> 1988. </year>
Reference-contexts: Robotics 5 Finding the maximal regions on a body where fingers can be positioned independently while achieving force closure makes it possible to accommodate errors in finger placement. Geometric algorithms for constructing such regions are proposed in <ref> [Ngu88] </ref> for grasping polygons with two fingers (with friction) and four fingers (without friction), and for grasping polyhedra with three fingers (with frictional contact capable of generating torques) and seven fingers (without friction). Curved obstacles have also been studied [PSS + 95].
Reference: [O'R94] <author> J. O'Rourke. </author> <title> Computational Geometry in C. </title> <publisher> Cambridge University Press, </publisher> <address> NY, </address> <year> 1994. </year>
Reference-contexts: However the three-dimensional case is largely open. An extension of this problem requires also to design the layout of the workspace so that a certain task can be completed efficiently. (Additional reachability problems for planar robot arms and their solutions are presented in <ref> [O'R94, Section 8.6] </ref>.) 41.2 PART MANIPULATION Part manipulation is one of the most frequently performed operations in industrial robotics: parts are grasped from conveyor belts, they are oriented prior to feeding assembly workcells, and they are immobilized for machining operations. <p> The proceedings series of The International Symposium on Robotics Research gives state-of-the-art presentations of robotics in general [GH96], whereas the recent collection [GHLW95] emphasizes algorithmic issues in robotics. Several Computational Geometry books contain sections on robotics or motion planning <ref> [O'R94, SA95] </ref>. RELATED CHAPTERS Chapter 21: Arrangements Chapter 25: Visibility Chapter 29: Computational real algebraic geometry Chapter 40: Motion planning
Reference: [ORSW95] <author> M. Overmars, A. Rao, O. Schwarzkopf, and C. Wentink. </author> <title> Immobilizing polygons against a wall. </title> <booktitle> In Proc. ACM Symp. on Comput. Geom., </booktitle> <pages> pages 29-38, </pages> <year> 1995. </year>
Reference-contexts: The algorithm in <ref> [ORSW95] </ref> computes the form-closure fixtures of input polygonal parts using a kit containing one edge fixture, one locator, and one clamp. An algorithm for fixturing an assembly of parts that are not rigidly fastened together is proposed in [Mat95].
Reference: [PSS + 95] <author> J. Ponce, A. Sudsang, S. Sullivan, B. Faverjon, J.D. Boissonnat, and J.P. Merlet. </author> <title> Algorithms for computing force-closure grasps of polyhedral objects. </title> <editor> In Goldberg et al. </editor> <booktitle> [GHLW95], </booktitle> <pages> pages 167-184. </pages>
Reference-contexts: Geometric algorithms for constructing such regions are proposed in [Ngu88] for grasping polygons with two fingers (with friction) and four fingers (without friction), and for grasping polyhedra with three fingers (with frictional contact capable of generating torques) and seven fingers (without friction). Curved obstacles have also been studied <ref> [PSS + 95] </ref>. The latter paper contains a good overview for work on the effect of curvature at contact points on grasp planning. DEXTROUS GRASPING Reorienting a part by moving fingers on the part's surface is often considered to lie in the broader realm of grasping.
Reference: [Qui94] <author> S. Quinlan. </author> <title> Efficient distance computation between non-convex objects. </title> <booktitle> In Proc. IEEE Int. Conf. on Rob. and Autom., </booktitle> <pages> pages 3324-3329, </pages> <address> 1994. 24 D. </address> <publisher> Halperin, </publisher> <editor> L. Kavraki and J.-C. </editor> <publisher> Latombe </publisher>
Reference-contexts: The cost of computing the distance between every pair of bodies can be prohibitive. Simple bounding volumes, often coupled with hierarchical decomposition techniques have been used to reduce computation time <ref> [Qui94] </ref>. When motion is involved, incremental distance computation has been suggested for tracking the closest points on a pair of convex polyhedra [LC91].
Reference: [RG95] <author> A.S. Rao and K.Y. Goldberg. </author> <title> Manipulating algebraic parts in the plane. </title> <journal> IEEE Tr. on Rob. and Autom., </journal> <volume> 11 </volume> <pages> 598-602, </pages> <year> 1995. </year>
Reference-contexts: This sequence is computed in O (n 2 log n) time. This result has been generalized to planar parts having a piecewise algebraic convex hull <ref> [RG95] </ref>. New fabrication techniques, like MEMS, can be used to build arrays of tiny actuators that can be programmed to orient mechanical parts [BDM96]. OPEN PROBLEMS A major open practical problem is to predict feeder throughputs to evaluate alternative feeder designs, given the geometry of the parts to be manipulated.
Reference: [RK92] <author> E. Rimon and D. Koditschek. </author> <title> Exact robot navigation using artificial potential functions. </title> <journal> IEEE Tr. on Rob. and Autom., </journal> <volume> 8 </volume> <pages> 501-518, </pages> <year> 1992. </year>
Reference-contexts: Evaluating the repulsive field requires an efficient distance computation algorithm. The search is usually done in a best-first fashion, by following the steepest descent of the potential function. Several techniques deal with local minima [BL91]. Local-minima free potentials have been proposed <ref> [RK92] </ref>, but their computation is likely to be at least as expensive as path planning. One may also construct grids at variable resolution. Hierarchical space decomposition techniques such as octrees and boxtrees have been used to that purpose [BH95].
Reference: [Rot94] <author> B. Roth. </author> <title> Connections between robotic and classical mechanisms. </title> <editor> In T. Kanade and R. Paul, editors, </editor> <booktitle> Robotics Research 6, </booktitle> <pages> pages 225-236. </pages> <booktitle> The Int. Foundation for Robotics Research, </booktitle> <year> 1994. </year>
Reference-contexts: The number of dofs of L, denoted by n dof , is the number of joints in L that can move independently with the others complying, and is given by the Grubler formula <ref> [Rot94] </ref>: n dof n 0 (n link 1) (n 0 1)n joint where n 0 = 3, if the linkage is planar, and n 0 = 6, if the linkage is in 3-space. In general, this formula holds with the "equal" relation. <p> If the arm has two prismatic joints, then the maximum drops to 8. If it has three prismatic joints, it drops to 2. Any time three consecutive revolute joints have intersecting or parallel axes, the number is at most 8 (see <ref> [Rot94] </ref>). OPEN PROBLEM Given a workspace W , find the optimal design of a robot arm that can reach everywhere in W without collision. Several variants of this problem are solved in [Kol95]. However the three-dimensional case is largely open.
Reference: [SA95] <author> M. Sharir and P.K. Agarwal. </author> <title> Davenport-Schinzel Sequences and Their Geometric Applications. </title> <publisher> Cambridge University Press, </publisher> <address> NY, </address> <year> 1995. </year>
Reference-contexts: The proceedings series of The International Symposium on Robotics Research gives state-of-the-art presentations of robotics in general [GH96], whereas the recent collection [GHLW95] emphasizes algorithmic issues in robotics. Several Computational Geometry books contain sections on robotics or motion planning <ref> [O'R94, SA95] </ref>. RELATED CHAPTERS Chapter 21: Arrangements Chapter 25: Visibility Chapter 29: Computational real algebraic geometry Chapter 40: Motion planning
Reference: [SD91] <author> Z. Shiller and S. Dubowsky. </author> <title> On computing time-optimal motions of robotic manipulators in the presence of obstacles. </title> <journal> IEEE Tr. on Rob. and Autom., </journal> <volume> 7 </volume> <pages> 785-797, </pages> <year> 1991. </year>
Reference-contexts: MINIMAL-TIME TRAJECTORY PLANNING Finding a minimal-time trajectory, called kinodynamic motion planning, is much harder. One approach is to first plan a geometric free path and then iteratively 18 D. Halperin, L. Kavraki and J.-C. Latombe deform this path to reduce travel time <ref> [SD91] </ref>. Each iteration requires checking the new path for collision and recomputing the optimal-time control. No bound has been established on the running time of this approach or the goodness of its outcome. Kinodynamic planning is NP-hard for a point robot under Newtonian mechanics in 3-space [DX95].
Reference: [SL93] <author> P. Soueres and J.P. Laumond. </author> <title> Shortest path synthesis for a car-like robot. </title> <booktitle> In Proc. 2nd European Control Conf., </booktitle> <year> 1993. </year>
Reference-contexts: Research has almost exclusively focused on car-like robots that can only move forward. Results include: No obstacles: a complete synthesis of the shortest, no-cusp path for a point moving with a lower-bounded turning radius <ref> [SL93] </ref>. Polygonal obstacles: an algorithm to decide whether there exists such a path between two configurations; it runs in time exponential in obstacle complexity [FW88].
Reference: [SS94] <author> J. Snoeyink and J. Stolfi. </author> <title> Objects that cannot be taken apart with two hands. </title> <journal> Discrete Comput. Geom., </journal> <volume> 12 </volume> <pages> 367-384, </pages> <year> 1994. </year>
Reference-contexts: Every assembly of five or fewer convex polyhedra admits a two-handed assembly sequence of translations. There exists an assembly of thirty convex polyhedra that cannot be assembled with two hands <ref> [SS94] </ref>. COMPLEXITY OF ASSEMBLY SEQUENCING When arbitrary sequences are allowed, assembly sequencing is PSPACE-hard. The problem remains PSPACE-hard even when the bodies are polygons, each with constant number of vertices [Nat88]. When only two-handed monotone sequences are permitted, deciding if an as 8 D. Halperin, L. Kavraki and J.-C.
Reference: [TA96] <author> R. Talluri and J.K. Aggarwal. </author> <title> Mobile robot self-location using model-image feature correspondence. </title> <journal> IEEE Tr. on Rob. and Autom., </journal> <volume> 12 </volume> <pages> 63-77, </pages> <year> 1996. </year>
Reference-contexts: Halperin, L. Kavraki and J.-C. Latombe is usually more complex; but computation time is less restricted. A preprocessing approach to the static localization problem for a point robot equipped with a 360 ffi range sensor is discussed in Section 40.3. Practical techniques for localization are also available, e.g. <ref> [TA96] </ref>. ADDITIONAL ISSUES IN SENSING Sensor placement is the problem of computing the set of placements from which a sensor can monitor a region within a given workspace [Bri95]. Another problem is to choose a minimal set of sensors and their placement so as to completely cover a given region.
Reference: [WGPB96] <author> J. Wiegley, K. Goldberg, M. Peshkin, and M. Brokowski. </author> <title> A complete algorithm for designing passive fences to orient parts. </title> <booktitle> In Proc. Int. Conf. on Rob. and Autom., </booktitle> <pages> pages 1133-1139, </pages> <year> 1996. </year>
Reference-contexts: An algorithm to compute the design of a sequence of curved fences along a conveyor belt to reorient a given polygonal part <ref> [WGPB96] </ref>. An algorithm computes the sequence of motions of a single articulated fence on a conveyor belt to achieve a goal orientation of an object [AHLM96]. A frictionless parallel-jaw gripper was used in [Gol93] to orient polygonal parts.
Reference: [Wil91] <author> G. Wilfong. </author> <title> Motion planning in the presence of movable objects. </title> <journal> Annals Math. Artif. Intell., </journal> <volume> 3 </volume> <pages> 131-150, </pages> <year> 1991. </year>
Reference-contexts: Such objects, called movable objects, cannot move autonomously; they must be grasped by a robot. Planning with movable objects is called manipulation planning. In <ref> [Wil91] </ref> the robot A and the movable object M are both convex polygons in a polygonal workspace. The goal is to bring A and M to specified positions. A can only translate.
Reference: [WKLLP95] <author> R.H. Wilson, L.E. Kavraki, J.C. Latombe, and T. Lozano-Perez. </author> <title> Two-handed assembly sequencing. </title> <journal> Int. J. of Robotics Research, </journal> <volume> 14 </volume> <pages> 335-350, </pages> <year> 1995. </year>
Reference-contexts: When only two-handed monotone sequences are permitted, deciding if an as 8 D. Halperin, L. Kavraki and J.-C. Latombe sembly A can be partitioned into two subassemblies S and AnS such that they can be separated by an arbitrary motion is NP-complete <ref> [WKLLP95] </ref>. The problem remains NP-complete when both S and AnS are required to be connected and motions are restricted to translations [KK95]. MONOTONE TWO-HANDED ASSEMBLY SEQUENCING A popular approach to assembly sequencing is disassembly sequencing [HS91]. <p> In [WL95] NDBGs are only defined for simple families of separating motions (infinitesimal rigid motions and infinite translations). An extension, called the interference diagram, is proposed in <ref> [WKLLP95] </ref> for more complex motions. However, in the worst case, this diagram yields a partitioning algorithm that is exponential in the number of surfaces describing the assembly.
Reference: [WL95] <author> R.H. Wilson and J.C. Latombe. </author> <title> Geometric reasoning about mechanical assembly. </title> <journal> Artificial Intelligence, </journal> <volume> 71 </volume> <pages> 371-396, </pages> <year> 1995. </year>
Reference-contexts: Most existing assembly sequencers can only generate two-handed monotone sequences. Such a sequence is computed by partitioning the assembly and, recursively, the obtained subassemblies into two separated subassemblies. The non-directional blocking graph (NDBG) is proposed in <ref> [WL95] </ref> to represent all the blocking relations in an assembly. It is a subdivision of the space of all allowable motions of separation into a finite number of cells such that within each cell the set of blocking relations between all pairs of parts remain fixed. <p> The overall sequencing algorithm continues recursively with the resulting subassemblies. If all the DBGs that are produced during a partitioning step are strongly connected, the algorithm notifies that the assembly does not admit a two-handed monotone assembly sequence with infinite translations. Polynomial time algorithms are proposed in <ref> [WL95] </ref> to compute and exploit NDBGs for restricted families of motions. <p> In particular, the case of partitioning a polyhedral assembly by a single translation to infinity, is analyzed in detail, and it is shown that partitioning an assembly of m polyhedra with a total of v vertices takes O (m 2 v 4 ) time. Another case studied in <ref> [WL95] </ref> is where the separating motions are infinitesimal rigid motions. <p> In <ref> [WL95] </ref> NDBGs are only defined for simple families of separating motions (infinitesimal rigid motions and infinite translations). An extension, called the interference diagram, is proposed in [WKLLP95] for more complex motions.
Reference: [ZF96] <author> Z. Zhang and O. Faugeras. </author> <title> A 3d world model builder with a mobile robot. </title> <journal> Int. J. of Robotics Research, </journal> <volume> 11 </volume> <pages> 269-285, </pages> <year> 1996. </year>
Reference-contexts: The robot must patch together the successively obtained partial models to eventually form a complete map of the workspace. This problem is complicated by the fact that the robot has imperfect control and cannot accurately keep track of its position in a fixed coordinate system. See, e.g., <ref> [ZF96] </ref>. ROBOT LOCALIZATION A robot often has to localize itself relative to its workspace W . A model of W is given and localization is done by matching sensory inputs against this model to infer the transform that defines the robot configuration. This problem usually arises for mobile robots.
Reference: [ZGW94] <author> Y. Zhuang, K.Y. Goldberg, and Y. Wong. </author> <title> On the existence of modular fixtures. </title> <booktitle> In Proc. IEEE Int. Conf. on Rob. and Autom., </booktitle> <pages> pages 543-549, </pages> <year> 1994. </year>
Reference-contexts: In modular fixturing, contact locations are restricted by the lattice of holes, and form closure cannot always be achieved. In particular, when three locators and one clamp are used on a workholding plane, there exist polygons of arbitrary size for which no fixture design can be achieved <ref> [ZGW94] </ref>; but, if parts are restricted to be rectilinear, a fixture can always be found as long as all edges have length of four or more lattice units [Mis91].
References-found: 75

