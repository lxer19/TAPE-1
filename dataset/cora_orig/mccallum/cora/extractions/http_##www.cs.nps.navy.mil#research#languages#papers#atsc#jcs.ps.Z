URL: http://www.cs.nps.navy.mil/research/languages/papers/atsc/jcs.ps.Z
Refering-URL: http://swarm.cs.wustl.edu/~picco/papers/biblio/security.bib.html
Root-URL: 
Title: A SOUND TYPE SYSTEM FOR SECURE FLOW ANALYSIS  
Author: Dennis Volpano Geoffrey Smith Cynthia Irvine 
Keyword: type systems, program security, soundness proofs  
Address: Monterey, California 93943, U.S.A.  Miami, Florida 33199, U.S.A.  Monterey, California 93943, U.S.A.  
Affiliation: Computer Science Department Naval Postgraduate School  School of Computer Science Florida International University  Computer Science Department Naval Postgraduate School  
Date: (29 Jul 1996), 1-20  
Note: Journal of Computer Security draft printout,  IOS Press  
Abstract: Ensuring secure information flow within programs in the context of multiple sensitivity levels has been widely studied. Especially noteworthy is Denning's work in secure flow analysis and the lattice model [6][7]. Until now, however, the soundness of Denning's analysis has not been established satisfactorily. We formulate Denning's approach as a type system and present a notion of soundness for the system that can be viewed as a form of noninterference. Soundness is established by proving, with respect to a standard programming language semantics, that all well-typed programs have this noninterference property. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Andrews, R. Reitman, </author> <title> "An Axiomatic Approach to Information Flow in Programs", </title> <journal> ACM Transactions on Programming Languages and Systems 2, </journal> <volume> 1, </volume> <year> (1980), </year> <pages> 56-76. </pages>
Reference-contexts: Denning's analysis has been characterized as an extension of an axiomatic logic for program correctness by Andrews and Reitman <ref> [1] </ref>. Other more recent efforts have been aimed at extending the analysis to properly handle language features like 2 D. Volpano, G. Smith, C. Irvine procedures [15][16] and nondeterminism [2], while others have focused on integrity analysis only [18][19]. <p> Denning provides intuitive arguments only in [7][8]. Although a more rigorous account of information flow in terms of classical information theory is given in [8], no formal soundness proof is attempted. Andrews and Reitman <ref> [1] </ref> do not address the soundness of their flow logic at all. Soundness is considered in rbk [18], but the treatment depends on an "instrumented semantics" where every value is tagged with a security class. These classes are updated for values at run time according to Denning's certification conditions. <p> Therefore, -0 l (l 00 ) = 0 l (l 00 ) for all l 00 such that (l 00 ) t . tu 7. Discussion The early work of Denning [5][6][7] and Andrews and Reitman <ref> [1] </ref> treated soundness intuitively. More recently, Mizuno and Schmidt [17] and rbk [18] have attempted to give rigorous soundness proofs for Denning-style secure flow analysis.
Reference: [2] <author> J. Ban^atre, C. Bryce, D. Le Metayer, </author> <title> "Compile-time Detection of Information Flow in Sequential Programs", pp. </title> <booktitle> 55-73 in Proceedings of the European Symposium on Research in Computer Security, Lecture Notes in Computer Science 875, </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1994. </year>
Reference-contexts: Denning's analysis has been characterized as an extension of an axiomatic logic for program correctness by Andrews and Reitman [1]. Other more recent efforts have been aimed at extending the analysis to properly handle language features like 2 D. Volpano, G. Smith, C. Irvine procedures [15][16] and nondeterminism <ref> [2] </ref>, while others have focused on integrity analysis only [18][19]. So far there has not been a satisfactory treatment of the soundness of Den-ning's analysis. <p> If we had instead used an instrumented semantics, then our (letvar) rule would essentially be incorporated into the semantics, where its correctness would have to be taken on faith. Ban^atre et al. <ref> [2] </ref> also take a noninterference approach to soundness, but they consider a nondeterministic language. They associate with a program variable v, a set called the security variable of v, denoted v. <p> They describe an axiomatic, information flow logic for deducing whether a variable is a member of v, for some variable v. For example, one can deduce that ` 1 fx 62 zg y := z fx 62 yg A soundness proposition (Proposition 1, p. 58 <ref> [2] </ref>) is given that basically says that if x 62 y, for a given program, then executing the program with any two initial A Sound Type System for Secure Flow Analysis 17 values of x will produce the same sets of final values for y, as long as the program may
Reference: [3] <author> D. Bell, L. LaPadula, </author> <title> Secure Computer System: Mathematical Foundations and Model, </title> <type> MITRE Corp. Technical Report M74-244, </type> <year> 1973. </year>
Reference-contexts: 1. Introduction The problem of ensuring secure information flow within systems having multiple sensitivity levels has been studied extensively, beginning with the early work of Bell and LaPadula <ref> [3] </ref>. This was extended by the lattice-model work of Denning [5][6][7] who pioneered program certification, an efficient form of static analysis that could be easily incorporated into a compiler to verify secure information flow in programs. <p> Other soundness efforts will then be discussed along with language extensions and some directions for future research. A Sound Type System for Secure Flow Analysis 3 2. The Lattice Model of Information Flow The lattice model is an extension of the Bell and LaPadula model <ref> [3] </ref>. In this model, an information flow policy is defined by a lattice (SC; ), where SC is a finite set of security classes partially ordered by .
Reference: [4] <author> K. Biba, </author> <title> Integrity Considerations for Secure Computer Systems, </title> <type> MITRE Corp. Technical Report ESD-TR-76-372, </type> <year> 1977. </year>
Reference: [5] <author> D. Denning, </author> <title> Secure Information Flow in Computer Systems, </title> <type> Purdue University Ph.D. Thesis, </type> <year> 1975. </year>
Reference: [6] <author> D. Denning, </author> <title> "A Lattice Model of Secure Information Flow", </title> <journal> Communications of the ACM 19, </journal> <volume> 5, </volume> <year> (1976), </year> <pages> 236-242. </pages>
Reference: [7] <author> D. Denning, P. Denning, </author> <title> "Certification of Programs for Secure Information Flow", </title> <journal> Communications of the ACM 20, </journal> <volume> 7, </volume> <year> (1977), </year> <pages> 504-513. </pages>
Reference: [8] <author> D. Denning, </author> <title> Cryptography and Data Security, </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: Denning provides intuitive arguments only in [7]<ref> [8] </ref>. Although a more rigorous account of information flow in terms of classical information theory is given in [8], no formal soundness proof is attempted. Andrews and Reitman [1] do not address the soundness of their flow logic at all. Soundness is considered in rbk [18], but the treatment depends on an "instrumented semantics" where every value is tagged with a security class. <p> Denning has used concepts such as uncertainty (entropy) from information theory to formalize the notion of information flow in programs <ref> [8] </ref>. Basically, if a program, executed in state s, yields a state s 0 , then the execution causes an information flow from x to y if new information about x in state s is available from y in state s 0 .
Reference: [9] <author> J. Goguen, J. Meseguer, </author> <title> "Security Policies and Security Models", pp. </title> <booktitle> 11-20 in Proceedings of the 1982 IEEE Symposium on Security and Privacy, </booktitle> <year> 1982. </year>
Reference-contexts: Characterizing the analysis as a type system has many advantages. It serves as a formal specification that cleanly separates the security policies from the algorithms for enforcing them in programs. The separation also admits a notion of soundness for the analysis that resembles traditional noninterference <ref> [9] </ref>. Intuitively, soundness states that variables in a well-typed program do not "interfere" with variables at lower security levels. This is formalized as a type soundness theorem and proved.
Reference: [10] <author> R. Harper, </author> <title> "A Simplified Account of Polymorphic References", </title> <journal> Information Processing Letters 51, </journal> <year> (1994), </year> <pages> 201-206. </pages>
Reference-contexts: So, for example, if t = U , then the lemma says that no trusted location will be updated when c is evaluated. The following lemma is a straightforward variant of a lemma given in <ref> [10] </ref>. Lemma 6.5 (Substitution) If ; fl ` l : t var and ; fl [x : t var ] ` c : t 0 cmd, then ; fl ` [l=x]c : t 0 cmd .
Reference: [11] <author> T. Lunt, P. Neumann, D. Denning, R. Schell, M. Heckman, W. Shockley, </author> <title> Secure Distributed Data Views Security Policy and Interpretation for DMBS for a Class A1 DBMS, </title> <institution> Rome Air Development Center Technical Report RADC-TR-89-313, </institution> <note> Vol I, </note> <year> 1989. </year>
Reference: [12] <author> D. McCullough, </author> <title> "Specifications for Multi-level Security and a Hook-up Property", </title> <booktitle> in Proceedings of the 1987 IEEE Symposium on Security and Privacy, </booktitle> <year> 1987. </year>
Reference-contexts: So perhaps it is not surprising that nondeterministic language features also cause a problem. As mentioned above, Ban^atre et al. encountered difficulty when attempting to prove a form of noninterference for nondeterministic programs. New security models, such as Generalized Noninterference <ref> [12] </ref> should be explored as potential notions of type soundness for new type systems that deal with nondeterministic programs. 8. Summary We have formulated Denning's secure flow analysis as a type system and proved it sound with respect to a standard programming language semantics for a core deterministic language.
Reference: [13] <author> D. McCullough, </author> <title> "Noninterference and the Composability of Security Properties", pp. </title> <booktitle> 177-186 in Proceedings of the 1988 IEEE Symposium on Security and Privacy, </booktitle> <year> 1988. </year>
Reference: [14] <author> J. McLean, </author> <title> "Security Models and Information Flow", pp. </title> <booktitle> 180-187 in Proceedings of the 1990 IEEE Symposium on Security and Privacy, </booktitle> <year> 1990. </year>
Reference: [15] <author> M. Mizuno, </author> <title> "A Least Fixed Point Approach to Inter-Procedural Information Flow Control", pp. </title> <booktitle> 558-570 in Proceedings of the 12th National Computer Security Conference, </booktitle> <year> 1989. </year>
Reference: [16] <author> M. Mizuno, A. Oldehoeft, </author> <title> "Information Flow Control in a Distributed Object-Oriented System with Statically-Bound Object Variables", pp. </title> <booktitle> 56-67 in Proceedings of the 10th National Computer Security Conference, 1987. </booktitle> <address> 20 D. </address> <publisher> Volpano, </publisher> <editor> G. Smith, C. </editor> <address> Irvine </address>
Reference: [17] <author> M. Mizuno, D. Schmidt, </author> <title> "A Security Flow Control Algorithm and its Denotational Semantics Correctness Proof", </title> <journal> Formal Aspects of Computing 4, </journal> <volume> 6A, </volume> <year> (1992), </year> <pages> 722-754. </pages>
Reference-contexts: Soundness is considered in rbk [18], but the treatment depends on an "instrumented semantics" where every value is tagged with a security class. These classes are updated for values at run time according to Denning's certification conditions. A similar approach is taken by Mizuno and Schmidt <ref> [17] </ref>. However, these approaches are unsatisfactory. By modifying the semantics in this way, there is no longer any basis for justifying the soundness of the analysis. Proving soundness in this framework essentially amounts to proving that the analysis is consistent with the instrumented semantics. <p> Therefore, -0 l (l 00 ) = 0 l (l 00 ) for all l 00 such that (l 00 ) t . tu 7. Discussion The early work of Denning [5][6][7] and Andrews and Reitman [1] treated soundness intuitively. More recently, Mizuno and Schmidt <ref> [17] </ref> and rbk [18] have attempted to give rigorous soundness proofs for Denning-style secure flow analysis.
Reference: [18] <author> P. rbk, </author> <title> "Can You Trust Your Data?", pp. </title> <booktitle> 575-589 in Proceedings of the 1995 Theory and Practice of Software Development Conference, Lecture Notes in Computer Science 915, </booktitle> <year> 1995. </year>
Reference-contexts: Although a more rigorous account of information flow in terms of classical information theory is given in [8], no formal soundness proof is attempted. Andrews and Reitman [1] do not address the soundness of their flow logic at all. Soundness is considered in rbk <ref> [18] </ref>, but the treatment depends on an "instrumented semantics" where every value is tagged with a security class. These classes are updated for values at run time according to Denning's certification conditions. A similar approach is taken by Mizuno and Schmidt [17]. However, these approaches are unsatisfactory. <p> Therefore, -0 l (l 00 ) = 0 l (l 00 ) for all l 00 such that (l 00 ) t . tu 7. Discussion The early work of Denning [5][6][7] and Andrews and Reitman [1] treated soundness intuitively. More recently, Mizuno and Schmidt [17] and rbk <ref> [18] </ref> have attempted to give rigorous soundness proofs for Denning-style secure flow analysis.
Reference: [19] <author> J. Palsberg, P. rbk, </author> <title> "Trust in the -calculus", </title> <booktitle> in Proceedings of the 1995 Static Analysis Symposium, Lecture Notes in Computer Science 983, </booktitle> <year> 1995. </year>
Reference-contexts: Mode in requires a small change in the type soundness theorem but the proof methodology is basically the same. Other language features pose more serious problems for our type soundness theorem. One is the idea of explicit type casting within programs. Palsberg and rbk <ref> [19] </ref> propose a system for integrity analysis in programs.
Reference: [20] <author> L. Paulson, </author> <title> ML for the Working Programmer, </title> <address> Cambridge, </address> <year> 1991. </year>
Reference-contexts: A type system is basically a formal system of type inference rules for making judgments about programs. They are usually used to establish the type correctness of programs in a strongly-typed language, for example, Standard ML <ref> [20] </ref>. However, they are not limited to reasoning about traditional forms of type correctness. They can be regarded, in general, as logical systems in which to reason about a wide variety of program properties. In our case, the property of interest is secure information flow.
Reference: [21] <author> J. Reynolds, </author> <title> Preliminary Design of the Programming Language Forsythe, </title> <institution> Carnegie Mellon University Technical Report CMU-CS-88-159, </institution> <year> 1988. </year>
Reference-contexts: Procedure types have the form t proc (t 1 ; t 2 var ; t 3 acc) where acc is a new antimonotonic type constructor that stands for acceptor in the spirit of Forsythe <ref> [21] </ref>. An acceptor is a variable that can be assigned to but not evaluated. This is true of out parameters in Ada 83 but not Ada 95; consequently, acc is not antimonotonic in Ada 95.
References-found: 21

