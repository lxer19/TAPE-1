URL: http://www.cs.washington.edu/research/projects/lis/www/papers/postscript/mcmurchie-FPGA95.ps
Refering-URL: http://www.cs.washington.edu/research/projects/lis/www/papers/
Root-URL: http://www.cs.washington.edu
Title: PathFinder: A Negotiation-Based Performance-Driven Router for FPGAs  
Author: Larry McMurchie and Carl Ebeling 
Address: Seattle, WA  
Affiliation: Dept. of Computer Science and Engineering University of Washington,  
Abstract: Routing FPGAs is a challenging problem because of the relative scarcity of routing resources, both wires and connection points. This can lead either to slow implementations caused by long wiring paths that avoid congestion or a failure to route all signals. This paper presents PathFinder, a router that balances the goals of performance and routability. PathFinder uses an iterative algorithm that converges to a solution in which all signals are routed while achieving close to the optimal performance allowed by the placement. Routability is achieved by forcing signals to negotiate for a resource and thereby determine which signal needs the resource most. Delay is minimized by allowing the more critical signals a greater say in this negotiation. Because PathFinder requires only a directed graph to describe the architecture of routing resources, it adapts readily to a wide variety of FPGA architectures such as Triptych, Xilinx 3000 and mesh-connected arrays of FPGAs. The results of routing ISCAS benchmarks on the Triptych FPGA architecture show an average increase of only 4.5% in critical path delay over the optimum delay for a placement. Routes of ISCAS benchmarks on the Xilinx 3000 architecture show a greater completion rate than commercial tools, as well as 11% faster implementations. 
Abstract-found: 1
Intro-found: 1
Reference: [Alexander94] <author> M. Alexander, </author> <title> "A Unified New Approach to FPGA Routing Based on Multi-Weighted Graphs," </title> <booktitle> 2nd International ACM/SIGDA Workshop on Field-Programmable Gate Arrays, </booktitle> <month> February </month> <year> 1994. </year>
Reference-contexts: Delay is usually factored into the standard rip-up and retry approach by ordering the nets to be routed such that critical nets are routed most directly ([Brown92]). How to optimally balance the competing goals of minimizing delay of critical paths and eliminating congestion is an open question. <ref> [Alexander94] </ref> presents a general multi-weighted graph formalism that attempts to accommodate delay and congestion. Results based only upon congestion elimination compare favorably with those of [Brown92]; however, the work is preliminary and no results are given that compare critical path lengths.
Reference: [Brown92] <author> S. Brown, J. Rose, and Z. Vranesic, </author> <title> "A Detailed Router for Field-Programmable Gate Arrays," </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> vol. 11, no. 5, </volume> <month> May </month> <year> 1992, </year> <pages> pp. 620-628. </pages>
Reference-contexts: Several papers have described versions of shortest path with rip-up and retry targeted to FPGAs. [Hill91] uses a breadth-first search while performing routes in random order and a "blame factor" is introduced to decide what routes need to be ripped up when a connection is unrealized. <ref> [Brown92] </ref> uses a global router to assign connections so that channel densities are balanced; a detailed router generates families of explicit paths within channels to resolve congestion. If some connections are unrealizable, the channel routes are ripped up and a rerouting is performed using larger families of paths. <p> are routed most directly (<ref> [Brown92] </ref>). How to optimally balance the competing goals of minimizing delay of critical paths and eliminating congestion is an open question. [Alexander94] presents a general multi-weighted graph formalism that attempts to accommodate delay and congestion. Results based only upon congestion elimination compare favorably with those of [Brown92]; however, the work is preliminary and no results are given that compare critical path lengths. The most extensive work to date factoring delay into FPGA routing has been that of [Frankle92]. In this work a slack analysis is performed to calculate upper bounds for individual source/sink connections.
Reference: [Cohn91] <author> J. Cohn, D. Garrod, R. Rutenbar, and L. Carley, "KOAN/ANAGRAM II: </author> <title> New Tools for Device-Level Analog Placement and Routing," </title> <journal> IEEE Journal of SolidState Circuits, </journal> <volume> vol. 26, </volume> <month> March </month> <year> 1991, </year> <pages> pp. 330-342. </pages>
Reference-contexts: By itself, this technique usually yields many unroutable nets, which must be rerouted by hand. A plethora of rip-up and retry approaches have been proposed to remedy the deficiencies of this approach ([Dees81], [Linsker84], <ref> [Cohn91] </ref>). The basic problem with rip-up and retry is that the success of a route is dependent not just on the choice of which nets to reroute, but also on the order in which rerouting is done.
Reference: [Dees81] <author> W. Dees and R. Smith, </author> <title> "Performance of Interconnection Rip-Up and Reroute Strategies," </title> <booktitle> in Proc. 18th Design Automation Conference, </booktitle> <month> June </month> <year> 1981, </year> <pages> pp. 382-390. </pages>
Reference: [Frankle92] <author> J. Frankle, </author> <title> "Iterative and Adaptive Slack Allocation for Performance-driven Layout and FPGA Routing," </title> <booktitle> in Proc. 29h Design Automation Conference, </booktitle> <month> June </month> <year> 1992, </year> <pages> pp. 536-542. </pages>
Reference-contexts: Results based only upon congestion elimination compare favorably with those of [Brown92]; however, the work is preliminary and no results are given that compare critical path lengths. The most extensive work to date factoring delay into FPGA routing has been that of <ref> [Frankle92] </ref>. In this work a slack analysis is performed to calculate upper bounds for individual source/sink connections. A rip-up and retry scheme routes signals, increasing upper bounds as needed. Once the routing has completed, selected connections are rerouted so as to reduce the overall delay. <p> Note that by recalculating the A ij , we have kept a tight reign on the critical path. Over the course of iterations, the critical path increases only to the extent required to resolve congestion. This approach is fundamentally different from other schemes ([Brown92], <ref> [Frankle92] </ref>) which attempt to resolve congestion first, then reduce delay by rerouting critical nets. 3.4 Delay Bounds In this section we show that if h n is bounded by d n , then algorithm NCD guarantees a worst case path delay equal to the minimum delay route of the critical path. <p> In this case the delay degradation from optimal is an average of 4.6%, and is at worst 12.6%. The only other work quoting delay degradation from optimal is that of <ref> [Frankle92] </ref>, in which an average degradation of 16% is found on the Xilinx 4000 architecture. 4.2 Experiments on Xilinx 3000 Our WireC template for the Xilinx 3000 architecture describes the entire routing structure of muxes, pips and switchboxes ([Xilinx93]).
Reference: [Hauck92] <author> S. Hauck, G. Borriello and C. Ebeling, TRIPTYCH: </author> <title> An FPGA Architecture with Integrated Logic and Routing, </title> <booktitle> in Proc. of the 1992 Conference on Advanced Research in VLSI and Parallel Systems, </booktitle> <month> March </month> <year> 1992, </year> <pages> pp. 26-43. </pages>
Reference: [Hill91] <author> D. Hill, </author> <title> "A CAD System for the Design of Field Programmable Gate Arrays," </title> <booktitle> in Proc. 28th Design Automation Conference, </booktitle> <month> June </month> <year> 1991, </year> <pages> pp. 187-192. </pages>
Reference-contexts: Several papers have described versions of shortest path with rip-up and retry targeted to FPGAs. <ref> [Hill91] </ref> uses a breadth-first search while performing routes in random order and a "blame factor" is introduced to decide what routes need to be ripped up when a connection is unrealized. [Brown92] uses a global router to assign connections so that channel densities are balanced; a detailed router generates families of
Reference: [Linsker84] <author> R. Linsker, </author> <title> "An Iterative-Improvement Penalty-Function-Driven Wire Routing System," </title> <journal> IBM Journal of Research and Development, </journal> <volume> vol. 28, </volume> <month> Sept. </month> <year> 1984, </year> <pages> pp. 613-624. </pages>
Reference-contexts: By itself, this technique usually yields many unroutable nets, which must be rerouted by hand. A plethora of rip-up and retry approaches have been proposed to remedy the deficiencies of this approach ([Dees81], <ref> [Linsker84] </ref>, [Cohn91]). The basic problem with rip-up and retry is that the success of a route is dependent not just on the choice of which nets to reroute, but also on the order in which rerouting is done.
Reference: [Nair87] <author> R. Nair, </author> <title> "A Simple Yet Effective Technique for Global Wiring," </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> vol. CAD-6, no. 6, </volume> <month> March </month> <year> 1987, </year> <pages> pp. 165-172. </pages>
Reference-contexts: Although PathFinder could be improved by adding architecturespecific knowledge, our experiments show that it performs extremely well even without this extra knowledge. 2 General Approach PathFinder is derived from an iterative scheme for the global routing of custom IC's developed by Nair <ref> [Nair87] </ref>. This scheme differs in several aspects from most forms of rip-up and retry. Only one net is ripped up at a time, but every net is ripped up and rerouted on every iteration, even if the net does not pass through a congested area.
Reference: [Takahashi80] <author> H. Takahashi and A. </author> <title> Matsuyama, An Approximate Solution for the Problem in Graphs, </title> <journal> Japonica, </journal> <volume> vol. 24, </volume> <year> 1980, </year> <pages> pp. 573-577. </pages>
Reference: [Xilinx93] <author> Xilinx, Inc., </author> <title> Xact Development System, </title> <year> 1993. </year>
References-found: 11

