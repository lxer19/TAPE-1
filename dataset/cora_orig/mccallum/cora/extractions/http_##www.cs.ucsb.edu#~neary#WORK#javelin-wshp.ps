URL: http://www.cs.ucsb.edu/~neary/WORK/javelin-wshp.ps
Refering-URL: http://www.cs.ucsb.edu/~neary/WORK/dir.html
Root-URL: http://www.cs.ucsb.edu
Email: danielwg@cs.ucsb.edu  
Title: Javelin: Internet-Based Parallel Computing Using Java  
Author: Peter Cappello, Bernd Christiansen, Mihai F. Ionescu Michael O. Neary, Klaus E. Schauser, and Daniel Wu fcappello, bernd, mionescu, neary, schauser, 
Keyword: Global computing, Internet, Java, just-in-time compilation, World-Wide-Web.  
Address: Santa Barbara, CA 93106  
Affiliation: Department of Computer Science University of California, Santa Barbara  
Abstract: Java offers the basic infrastructure needed to integrate computers connected to the Internet into a seamless parallel computational resource: a flexible, easily-installed infrastructure for running coarse-grained parallel applications on numerous, anonymous machines. Ease of participation is seen as a key property for such a resource to realize the vision of a multiprocessing environment comprising thousands of computers. We present Javelin, a Java-based infrastructure for global computing. The system is based on Internet software technology that is essentially ubiquitous: Web technology. Its architecture and implementation require participants to have access only to a Java-enabled Web browser. The security constraints implied by this, the resulting architecture, and current implementation are presented. The Javelin architecture is intended to be a substrate on which various programming models may be implemented. Several such models are presented: A Linda Tuple Space, an SPMD programming model with barriers, as well as support for message passing. Experimental results are given in the form of micro-benchmarks and a Mersenne Prime application that runs on a heterogeneous network of several parallel machines, workstations, and PCs. 
Abstract-found: 1
Intro-found: 1
Reference: [ACPtNt94] <author> T. E. Anderson, D. E. Culler, D. A. Patterson, </author> <title> and the NOW team. A Case for NOW (Networks of Workstations), </title> <month> December </month> <year> 1994. </year>
Reference-contexts: This vision is as old as the Internet. More recent network computing approaches, include CONDOR [LLM88], Linda [WL88], PVM [Sun90], Piranha [GK92], MPI [MPI94], Legion [GWF + 94], and Network of Workstations (NOW) <ref> [ACPtNt94] </ref>. Legion is probably the most powerful of these models and provides both greater throughput and improved response time via parallel execution. With the exception of Legion, all the systems require the user to have login access to all machines used in the computation.
Reference: [AISS97] <author> A. Alexandrov, M. Ibel, K. E. Schauser, and C. Scheiman. SuperWeb: </author> <title> Towards a Web-Based Global Computing Infrastructure. </title> <note> To appear in International Parallel Processing Symposium, </note> <month> May </month> <year> 1997. </year>
Reference-contexts: We therefore expect thousands of hosts to participate. 1.3 Scope of our Work The purpose of this work is to provide a simple yet efficient infrastructure that supports as many different programming models as possible without compromising portability and flexibility. As discussed in <ref> [AISS97] </ref>, there are several important issues such an infrastructure must provide to be successful. In this paper, we do not attempt to study these issues, but instead focus on a particular design, discussing the constraints imposed by standard, Java-enabled web browsers. Future versions however will take these aspects into account.
Reference: [BBB96] <author> J. E. Baldeschwieler, R. D. Blumofe, and E. A. Brewer. </author> <title> ATLAS: An Infrastructure for Global Computing. </title> <booktitle> In In Proceedings of the Seventh ACM SIGOPS European Workshop on System Support for Worldwide Applications, </booktitle> <year> 1996. </year>
Reference-contexts: The flexibility of Java has also been observed by several other researchers. A new, Java-based, generation of projects is aimed at establishing a software infrastructure on which a global computing vision can be April 25, 1997 - 12 : 45 DRAFT 14 implemented. These projects include ATLAS <ref> [BBB96] </ref>, Charlotte [BKKW96], and ParaWeb [BSST96]. All three projects are designed explicitly to run parallel applications and provide a specific programming model. Other recent systems such as JPVM [Fer] and Java-MPI [Tay] use Java to overcome heterogeneity, but are not intended to execute on anonymous machines.
Reference: [BKKW96] <author> A. Baratloo, M. Karaul, Z. Kedem, and P. Wyckoff. </author> <title> Charlotte: Metacomputing on the Web. </title> <booktitle> In In Proceedings of the 9th Conference on Parallel and Distributed Computing Systems, </booktitle> <year> 1996. </year>
Reference-contexts: The flexibility of Java has also been observed by several other researchers. A new, Java-based, generation of projects is aimed at establishing a software infrastructure on which a global computing vision can be April 25, 1997 - 12 : 45 DRAFT 14 implemented. These projects include ATLAS [BBB96], Charlotte <ref> [BKKW96] </ref>, and ParaWeb [BSST96]. All three projects are designed explicitly to run parallel applications and provide a specific programming model. Other recent systems such as JPVM [Fer] and Java-MPI [Tay] use Java to overcome heterogeneity, but are not intended to execute on anonymous machines.
Reference: [Blu95] <author> R. D. Blumofe. </author> <title> Executing Multithreaded Programs Efficiently. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: ATLAS provides a global computing model, based on Java and on the Cilk programming model <ref> [Blu95] </ref>, that is best suited to tree-based computations. ATLAS ensures scalability using a hierarchy of managers (their equivalent of SuperWeb brokers). The current implementation uses native libraries, which may raise some portability problems. Charlotte supports distributed shared memory, and uses a fork-join model for parallel programming.
Reference: [BSST96] <author> T. Brecht, H. Sandhu, M. Shan, and J. Talbot. ParaWeb: </author> <title> Towards World-Wide Supercomputing. </title> <booktitle> In In Proceedings of the Seventh ACM SIGOPS European Workshop on System Support for Worldwide Applications, </booktitle> <year> 1996. </year>
Reference-contexts: A new, Java-based, generation of projects is aimed at establishing a software infrastructure on which a global computing vision can be April 25, 1997 - 12 : 45 DRAFT 14 implemented. These projects include ATLAS [BBB96], Charlotte [BKKW96], and ParaWeb <ref> [BSST96] </ref>. All three projects are designed explicitly to run parallel applications and provide a specific programming model. Other recent systems such as JPVM [Fer] and Java-MPI [Tay] use Java to overcome heterogeneity, but are not intended to execute on anonymous machines.
Reference: [CDL + 96] <author> K. M. Chandy, B. Dimitrov, H. Le, J. Mandleson, M. Richardson, A. Rifkin, P. A. G. Sivilotti, W. Tanaka, and L. Weisman. </author> <title> A World-Wide Distributed System Using Java and the Internet. </title> <booktitle> In In Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing, </booktitle> <address> Syracuse, NY, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: Other recent systems such as JPVM [Fer] and Java-MPI [Tay] use Java to overcome heterogeneity, but are not intended to execute on anonymous machines. The use of Java as a means for building distributed systems that execute throughout the Internet has also been recently proposed by Chandy et al. <ref> [CDL + 96] </ref> and Fox et al. [FF96], and studied in [Sar96]. ATLAS provides a global computing model, based on Java and on the Cilk programming model [Blu95], that is best suited to tree-based computations. ATLAS ensures scalability using a hierarchy of managers (their equivalent of SuperWeb brokers).
Reference: [Com96] <editor> Electric Communities. </editor> <booktitle> The E programming language, </booktitle> <year> 1996. </year> <note> http://www.communities.com/e/epl.html. </note>
Reference-contexts: Recently, a large variety of Java performance boosters have become available [FJa]. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too. Languages worth considering, besides Java, include the E programming language <ref> [Com96] </ref> which is very similar, but offers a more flexible security framework than Java, and the Limbo programming language in the Inferno operating system [Inc], which allows, among other features, for easier and more efficient just-in-time compilation.
Reference: [Con] <institution> World Wide Wed Consortium. </institution> <note> Jigsaw HTTP Server. http://www.w3.org/pub/WWW/Jigsaw/. </note>
Reference-contexts: They can either be embedded into Web pages or invoked like CGI scripts. Currently, Servlets are supported by JavaSoft's Jeeves [Sun96c] and W3C's Jigsaw <ref> [Con] </ref>. However, we feel that Servlets will be supported by most HTTP servers released in the near future. We have found the servlet approach to be a very convenient way of extending the functionality of HTTP servers with application-specific services.
Reference: [Cor96] <author> Microsoft Corporation. </author> <title> DCOM The Distributed Component Object Model, </title> <year> 1996. </year>
Reference-contexts: However, promising standards for interoperability and portability between different combinations of software and hardware components emerged only a couple of years ago. Java Beans [Sun96d] is the latest in the world of Web-based distributed computation, but we also have widely used technologies such as CORBA [Gro95] or DCOM <ref> [Cor96] </ref>. We expect to see a shift in Web technology towards systems based on distributed objects and IIOP. 6 Conclusions In this paper, we have designed and implemented Javelin, a prototype infrastructure for Internet-based parallel computing using Java.
Reference: [DFW96] <author> D. Dean, E. W. Felten, and D. S. Wallach. </author> <title> Java Security: From HotJava to Netscape and Beyond. </title> <booktitle> In In Proceedings of the 1996 IEEE Sumposium on Security and Privacy, </booktitle> <address> Oakland, CA, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: We therefore assume the usual Java security restrictions that apply to applets. For example, applets downloaded from the broker are permitted to communicate with the broker only. Additional Java security issues are discussed in <ref> [DFW96] </ref>. In this version, we do not provide levels of security beyond what Java-enabled web browsers offer. April 25, 1997 - 12 : 45 DRAFT 3 Scalability: We envision extending our broker to a scalable network of brokers.
Reference: [Fer] <author> A. Ferrari. </author> <title> JPVM The Java Parallel Virtual Machine. </title> <address> http://www.cs.virginia.edu/ajf2j/jpvm.html. </address>
Reference-contexts: These projects include ATLAS [BBB96], Charlotte [BKKW96], and ParaWeb [BSST96]. All three projects are designed explicitly to run parallel applications and provide a specific programming model. Other recent systems such as JPVM <ref> [Fer] </ref> and Java-MPI [Tay] use Java to overcome heterogeneity, but are not intended to execute on anonymous machines.
Reference: [FF96] <author> G. Fox and W. Furmanski. </author> <title> Towards Web/Java based High Performance Distributed Computing An Evolving Virtual Machine. </title> <booktitle> In In Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing, </booktitle> <address> Syracuse, NY, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: The use of Java as a means for building distributed systems that execute throughout the Internet has also been recently proposed by Chandy et al. [CDL + 96] and Fox et al. <ref> [FF96] </ref>, and studied in [Sar96]. ATLAS provides a global computing model, based on Java and on the Cilk programming model [Blu95], that is best suited to tree-based computations. ATLAS ensures scalability using a hierarchy of managers (their equivalent of SuperWeb brokers).
Reference: [FJa] <institution> Free Java compilers. </institution> <note> http://webhackers.cygnus.com/webhackers/projects/java.html. </note>
Reference-contexts: Recently, a large variety of Java performance boosters have become available <ref> [FJa] </ref>. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [GK92] <author> D. Gelernter and D. Kaminsky. </author> <title> Supercomputing out of Recycled Garbage: Preliminary Experience with Piranha. </title> <booktitle> In Proceedings of the Sixth ACM International Conference on Supercomputing, </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: This vision is as old as the Internet. More recent network computing approaches, include CONDOR [LLM88], Linda [WL88], PVM [Sun90], Piranha <ref> [GK92] </ref>, MPI [MPI94], Legion [GWF + 94], and Network of Workstations (NOW) [ACPtNt94]. Legion is probably the most powerful of these models and provides both greater throughput and improved response time via parallel execution.
Reference: [Gro95] <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <note> 1995. 2.0 ed. April 25, 1997 - 12 : 45 DRAFT 16 </note>
Reference-contexts: However, promising standards for interoperability and portability between different combinations of software and hardware components emerged only a couple of years ago. Java Beans [Sun96d] is the latest in the world of Web-based distributed computation, but we also have widely used technologies such as CORBA <ref> [Gro95] </ref> or DCOM [Cor96]. We expect to see a shift in Web technology towards systems based on distributed objects and IIOP. 6 Conclusions In this paper, we have designed and implemented Javelin, a prototype infrastructure for Internet-based parallel computing using Java.
Reference: [Gut] <author> Y. S. Gutfreund. </author> <note> The WWWinda Orchestrator. http://info.gte.com/ftp/circus/Orchestrator/. </note>
Reference-contexts: Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Remote Method Invocation (RMI) [Sun96b] and Object Serialization [Sun96a], or already have been provided by other research groups (for example [SC96], [Ros] and <ref> [Gut] </ref>). Recently, a large variety of Java performance boosters have become available [FJa]. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [GWF + 94] <author> A. S. Grimshaw, W. A. Wulf, J. C. French, A. C. Weaver, and P. F. Reynolds, Jr. </author> <title> A Synopsis of the Legion Project. </title> <type> Technical Report CS-94-20, </type> <institution> Department of Computer Science, University of Virginia, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: This vision is as old as the Internet. More recent network computing approaches, include CONDOR [LLM88], Linda [WL88], PVM [Sun90], Piranha [GK92], MPI [MPI94], Legion <ref> [GWF + 94] </ref>, and Network of Workstations (NOW) [ACPtNt94]. Legion is probably the most powerful of these models and provides both greater throughput and improved response time via parallel execution.
Reference: [GWTB96] <author> I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer. </author> <title> A Secure Environment for Untrusted Helper Applications Confining the Wily Hacker. </title> <booktitle> In Proceedings of the 1996 USENIX Security Symposium, </booktitle> <year> 1996. </year>
Reference-contexts: The secure execution of arbitrary binaries recently has been addressed by at least two techniques. First, software-based fault isolation techniques [Sof95] guard against insecure system calls of programs by patching their binaries. Second, secure remote helper applications <ref> [GWTB96] </ref> use operating system tracing facilities to limit the use of resources that could violate system integrity. Another important goal of our project is to allow a natural integration of our infrastructure with other currently existing models for distributed systems.
Reference: [Inc] <institution> Lucent Technologies Inc. </institution> <note> Inferno. http://inferno.bell-labs.com/inferno/. </note>
Reference-contexts: Languages worth considering, besides Java, include the E programming language [Com96] which is very similar, but offers a more flexible security framework than Java, and the Limbo programming language in the Inferno operating system <ref> [Inc] </ref>, which allows, among other features, for easier and more efficient just-in-time compilation. The secure execution of arbitrary binaries recently has been addressed by at least two techniques. First, software-based fault isolation techniques [Sof95] guard against insecure system calls of programs by patching their binaries.
Reference: [LLM88] <author> M. Litzkow, M. Livny, and M. W. </author> <title> Mutka. Condor A Hunter of Idle Workstations. </title> <booktitle> In Proceedings of the 8th International Conference of Distributed Computing Systems, </booktitle> <month> June </month> <year> 1988. </year>
Reference-contexts: This vision is as old as the Internet. More recent network computing approaches, include CONDOR <ref> [LLM88] </ref>, Linda [WL88], PVM [Sun90], Piranha [GK92], MPI [MPI94], Legion [GWF + 94], and Network of Workstations (NOW) [ACPtNt94]. Legion is probably the most powerful of these models and provides both greater throughput and improved response time via parallel execution.
Reference: [MPI94] <author> MPI: </author> <title> A Message-Passing Interface Standard. </title> <journal> The International Journal of Supercomputer Applications and High Performance Computing, </journal> <volume> 8(3), </volume> <year> 1994. </year>
Reference-contexts: This vision is as old as the Internet. More recent network computing approaches, include CONDOR [LLM88], Linda [WL88], PVM [Sun90], Piranha [GK92], MPI <ref> [MPI94] </ref>, Legion [GWF + 94], and Network of Workstations (NOW) [ACPtNt94]. Legion is probably the most powerful of these models and provides both greater throughput and improved response time via parallel execution.
Reference: [Rob] <author> D. Robinson. </author> <title> The WWW Common Gateway Interface. Internet Draft. </title> <note> Version 1.1. </note>
Reference-contexts: Similarly, in implementing the broker we want to leverage existing HTTP server technology and ways of extending server functionality using CGI scripts <ref> [Rob] </ref> or servlets [Sun96c]. In other words, we want our architecture to be build on top of the existing Internet infrastructure. Consequently, our design is based on the following premises: Tasks: A task on which a host can operate is represented as an applet embedded in an HTML page. <p> Recently developed HTTP servers can be extended in two ways, either by using the Common Gateway Interface <ref> [Rob] </ref> and spawning a new process, or by installing servlets [Sun96c]. Servlets are small Java programs like Applets, but are executed at the server side and, like CGI scripts, allow for the dynamic creation of Web pages. They can either be embedded into Web pages or invoked like CGI scripts.
Reference: [Rob54] <author> Raphael M. Robinson. </author> <title> Mersenne and Fermat numbers. </title> <booktitle> In In Proceedings of the American Mathematical Society, </booktitle> <volume> volume 5, </volume> <year> 1954. </year>
Reference-contexts: Beginning in the 1952, with the discovery of the 13th Mersenne prime by Raphael M. Robinson <ref> [Rob54] </ref>, all subsequent Mersenne primes have been found by computer. To date only 35 Mersenne primes have been discovered. With larger and larger prime exponents, the search for Mersenee primes becomes progressively more difficult.
Reference: [Ros] <author> D. Rossi. </author> <note> Jada. http://www.cs.unibo.it/rossi/jada/. </note>
Reference-contexts: Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Remote Method Invocation (RMI) [Sun96b] and Object Serialization [Sun96a], or already have been provided by other research groups (for example [SC96], <ref> [Ros] </ref> and [Gut]). Recently, a large variety of Java performance boosters have become available [FJa]. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [Sar96] <author> L. F. G. Sarmenta. </author> <title> Volunteer Computing. Draft Preliminary Concept Paper and Project Proposal, </title> <month> October </month> <year> 1996. </year>
Reference-contexts: The use of Java as a means for building distributed systems that execute throughout the Internet has also been recently proposed by Chandy et al. [CDL + 96] and Fox et al. [FF96], and studied in <ref> [Sar96] </ref>. ATLAS provides a global computing model, based on Java and on the Cilk programming model [Blu95], that is best suited to tree-based computations. ATLAS ensures scalability using a hierarchy of managers (their equivalent of SuperWeb brokers). The current implementation uses native libraries, which may raise some portability problems.
Reference: [SC96] <author> P. A. G. Sivilotti and K. M. Chandy. </author> <title> Reliable Synchronization Primitives for Java Threads. </title> <type> Technical Report CS-TR-96-11, </type> <institution> California Institute of Technology, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Remote Method Invocation (RMI) [Sun96b] and Object Serialization [Sun96a], or already have been provided by other research groups (for example <ref> [SC96] </ref>, [Ros] and [Gut]). Recently, a large variety of Java performance boosters have become available [FJa]. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [Sof95] <institution> Colusa Software. </institution> <note> Omniware Technical Overview. http://www.colusa.com, 1995. </note>
Reference-contexts: The secure execution of arbitrary binaries recently has been addressed by at least two techniques. First, software-based fault isolation techniques <ref> [Sof95] </ref> guard against insecure system calls of programs by patching their binaries. Second, secure remote helper applications [GWTB96] use operating system tracing facilities to limit the use of resources that could violate system integrity.
Reference: [Sun90] <author> V. S. Sunderam. </author> <title> PVM: A Framework for Parallel Distributed Computing. </title> <type> Technical Report ORNL/TM-11375, </type> <institution> Dept. of Math and Computer Science, Emory University, </institution> <address> Atlanta, GA, USA, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: This vision is as old as the Internet. More recent network computing approaches, include CONDOR [LLM88], Linda [WL88], PVM <ref> [Sun90] </ref>, Piranha [GK92], MPI [MPI94], Legion [GWF + 94], and Network of Workstations (NOW) [ACPtNt94]. Legion is probably the most powerful of these models and provides both greater throughput and improved response time via parallel execution.
Reference: [Sun96a] <author> Sun Microsystems, Inc. </author> <title> Java Object Serialization Specification, </title> <month> May </month> <year> 1996. </year> <note> Revision 0.9. </note>
Reference-contexts: Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Remote Method Invocation (RMI) [Sun96b] and Object Serialization <ref> [Sun96a] </ref>, or already have been provided by other research groups (for example [SC96], [Ros] and [Gut]). Recently, a large variety of Java performance boosters have become available [FJa]. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [Sun96b] <author> Sun Microsystems, Inc. </author> <title> Java Remote Method Invocation Specification, </title> <month> May </month> <year> 1996. </year> <note> Revision 0.9. </note>
Reference-contexts: Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Remote Method Invocation (RMI) <ref> [Sun96b] </ref> and Object Serialization [Sun96a], or already have been provided by other research groups (for example [SC96], [Ros] and [Gut]). Recently, a large variety of Java performance boosters have become available [FJa]. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [Sun96c] <author> Sun Microsystems, Inc. </author> <title> Java Servlet Application Programming Interface, </title> <month> November </month> <year> 1996. </year> <note> Draft version 2. </note>
Reference-contexts: Similarly, in implementing the broker we want to leverage existing HTTP server technology and ways of extending server functionality using CGI scripts [Rob] or servlets <ref> [Sun96c] </ref>. In other words, we want our architecture to be build on top of the existing Internet infrastructure. Consequently, our design is based on the following premises: Tasks: A task on which a host can operate is represented as an applet embedded in an HTML page. <p> Recently developed HTTP servers can be extended in two ways, either by using the Common Gateway Interface [Rob] and spawning a new process, or by installing servlets <ref> [Sun96c] </ref>. Servlets are small Java programs like Applets, but are executed at the server side and, like CGI scripts, allow for the dynamic creation of Web pages. They can either be embedded into Web pages or invoked like CGI scripts. Currently, Servlets are supported by JavaSoft's Jeeves [Sun96c] and W3C's Jigsaw <p> by installing servlets <ref> [Sun96c] </ref>. Servlets are small Java programs like Applets, but are executed at the server side and, like CGI scripts, allow for the dynamic creation of Web pages. They can either be embedded into Web pages or invoked like CGI scripts. Currently, Servlets are supported by JavaSoft's Jeeves [Sun96c] and W3C's Jigsaw [Con]. However, we feel that Servlets will be supported by most HTTP servers released in the near future. We have found the servlet approach to be a very convenient way of extending the functionality of HTTP servers with application-specific services. <p> As long as all clients and hosts obey these intervals, the overall overhead is reduced, although it may increase for individual applications. 2.5 Implementation Our implementation is based on an HTTP server entirely written in Java that runs servlets compatible with the API used by JavaSoft's Jeeves <ref> [Sun96c] </ref>. The broker is implemented as a servlet and schedules applets using a FIFO queue. Furthermore, servlets provide additional services such as form-based file upload (as described in RFC 1867), semaphores, a Linda tuple space and communication channels (as described in the previous section).
Reference: [Sun96d] <author> Sun Microsystems, Inc. </author> <title> JavaBeans 1.0 API Specification, </title> <month> December </month> <year> 1996. </year> <title> Revision A. </title>
Reference-contexts: There has been substantial work in the last decade geared towards heterogeneity and open systems. However, promising standards for interoperability and portability between different combinations of software and hardware components emerged only a couple of years ago. Java Beans <ref> [Sun96d] </ref> is the latest in the world of Web-based distributed computation, but we also have widely used technologies such as CORBA [Gro95] or DCOM [Cor96].
Reference: [Tay] <author> S. Taylor. </author> <title> Prototype Java-MPI Package. http://cisr.anu.edu.au/sam/java/java mpi prototype.html. </title>
Reference-contexts: These projects include ATLAS [BBB96], Charlotte [BKKW96], and ParaWeb [BSST96]. All three projects are designed explicitly to run parallel applications and provide a specific programming model. Other recent systems such as JPVM [Fer] and Java-MPI <ref> [Tay] </ref> use Java to overcome heterogeneity, but are not intended to execute on anonymous machines.
Reference: [WL88] <author> R. A. Whiteside and J. S. Leichter. </author> <title> Using Linda for Supercomputing on a Local Area Network. </title> <type> Technical Report YALEU/DCS/TR-638, </type> <institution> Department of Computer Science, Yale University, </institution> <address> New Haven, Connecticut, </address> <year> 1988. </year>
Reference-contexts: The Linda programming model <ref> [WL88] </ref> was originally developed by Gelernter and Carriero of Yale University in 1988. This Linda model provides a construct known as tuple space that concurrent processes can access to insert, delete, and update data known as tuples. Atomic operations known as Out, Rd, and In provide synchronization for these accesses. <p> This vision is as old as the Internet. More recent network computing approaches, include CONDOR [LLM88], Linda <ref> [WL88] </ref>, PVM [Sun90], Piranha [GK92], MPI [MPI94], Legion [GWF + 94], and Network of Workstations (NOW) [ACPtNt94]. Legion is probably the most powerful of these models and provides both greater throughput and improved response time via parallel execution.
References-found: 35

