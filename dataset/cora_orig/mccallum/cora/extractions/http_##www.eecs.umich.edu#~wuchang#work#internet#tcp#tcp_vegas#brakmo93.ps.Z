URL: http://www.eecs.umich.edu/~wuchang/work/internet/tcp/tcp_vegas/brakmo93.ps.Z
Refering-URL: http://www.eecs.umich.edu/~wuchang/work/internet/
Root-URL: http://www.cs.umich.edu
Title: TCP Vegas: New Techniques for Congestion Detection and Avoidance  
Author: Lawrence S. Brakmo Sean W. O'Malley Larry L. Peterson 
Address: Tucson, AZ 85721  
Affiliation: Department of Computer Science University of Arizona  
Abstract: Vegas is a new implementation of TCP that achieves between 40 and 70% better throughput, with one-fifth to one-half the losses, as compared to the implementation of TCP in the Reno distribution of BSD Unix. This paper motivates and describes the three key techniques employed by Vegas, and presents the results of a comprehensive experimental performance studyusing both simulations and measurements on the Internetof the Vegas and Reno implementations of TCP. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Danzig and S. Jamin. tcplib: </author> <title> A Library of TCP Internetwork Traffic Characteristics. </title> <type> Technical Report CS-SYS-91-495, </type> <institution> Computer Science Department, USC, </institution> <year> 1991. </year>
Reference-contexts: It is also trivial to move protocols between the simulator and the real world, thereby providing a comprehensive protocol design, implementation, and testing environment. One of the most important protocols available in the simulator is called TRAFFICit implements TCP Internet traffic based on tcplib <ref> [1] </ref>. TRAFFIC starts conversations with interarrival times given by an exponential distribution. Each conversation can be of type TELNET, FTP, NNTP, or SMTP, each of which expects a set of parameters. For example, FTP expects the following parameters: number of items to transmit, control segment size, and the item sizes.
Reference: [2] <author> A. Heybey. </author> <title> The network simulator. </title> <type> Technical report, </type> <institution> MIT, </institution> <month> Sept. </month> <year> 1990. </year>
Reference: [3] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: Finally, Section 6 discusses relevant issues and Section 7 makes some concluding remarks. 2 Tools This section briefly describes the tools used to implement and analyze the different versions of TCP. All of the protocols were developed and tested under the University of Arizona's x-kernel framework <ref> [3] </ref>. Our implementation of Reno was derived by retrofitting the BSD implementation into the x-kernel. Our implementation of Vegas was derived by modifying Reno. 2.1 Simulator Many of the results reported in this paper were obtained from a network simulator.
Reference: [4] <author> V. Jacobson. </author> <title> Congestion Avoidance and Control. </title> <booktitle> In Proceedings of the SIGCOMM '88 Symposium, </booktitle> <pages> pages 314-32, </pages> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Few would argue that one of TCP's strengths lies in its adaptive retransmission and congestion control mechanism, with Jacobson's paper <ref> [4] </ref> providing the cornerstone of that mechanism. This paper attempts to go beyond this earlier work; to provide some new insights into congestion control, and to propose modifications to the implementation of TCP that exploit these insights.
Reference: [5] <author> V. Jacobson and R. Braden. </author> <title> TCP Extensions for Long-Delay Paths. Request for Comments 1072, </title> <address> Oct. </address> <year> 1988. </year>
Reference-contexts: This is because Vegas limits its use of router buffers as specified by the fi threshold, whereas Reno increases its window size until there are losseswhich means all the router buffers are being used. Selective ACKs <ref> [5, 6] </ref> have been proposed as a way to decrease the number of unnecessarily retransmitted packets and to provide information for a better retransmit mechanism than the one in Reno.
Reference: [6] <author> V. Jacobson, R. Braden, and D. </author> <title> Borman. TCP Extensions for High Performance. Request for Comments 1323, </title> <month> May </month> <year> 1992. </year>
Reference-contexts: This is because Vegas limits its use of router buffers as specified by the fi threshold, whereas Reno increases its window size until there are losseswhich means all the router buffers are being used. Selective ACKs <ref> [5, 6] </ref> have been proposed as a way to decrease the number of unnecessarily retransmitted packets and to provide information for a better retransmit mechanism than the one in Reno.
Reference: [7] <author> R. Jain. </author> <title> A Delay-Based Approach for Congestion Avoidance in Interconnected Heterogeneous Computer Networks. </title> <journal> ACM Computer Communication Review, </journal> <volume> 19(5) </volume> <pages> 56-71, </pages> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: In this case, the router queue size is ten and the queuing discipline is FIFO. There are several previously proposed approaches for proactive congestion detection based on a common understanding of the network changes as it approaches congestion (an excellent development is given in <ref> [7] </ref>). These changes can be seen in Figure 6 in the time interval from 4.5 to 7.5 seconds. One change is the increased queue size in the intermediate nodes of the connection, resulting in an increase of the RTT for each successive segment. <p> If it is, then the algorithm decreases the congestion window by one-eighth. Jain's CARD (Congestion Avoidance using Round-trip Delay) approach <ref> [7] </ref> is based on an analytic derivation of a socially optimum window size for a deterministic network. The decision as to whether or not to change the current window size is based on changes to both the RTT and the window size.
Reference: [8] <author> R. Jain. </author> <title> The Art of Computer Systems Performance Analysis: Techniques for ExperimentalDesign, Measurement, Simulation and Modeling. </title> <publisher> John Wiley and Sons, Inc., </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: Many different propagation delays were used, with the ap-propiate results averaged. These simulations where used to obtain preliminary results regarding fairness and the behavior of Vegas under stress. To judge fairness, we chose Jain's fairness index <ref> [8] </ref>. In the case of 2 and 4 connections, with each connection transfering 8 MB, Reno was slightly more fair than Vegas when all connections had the same propagation delay, but Vegas was more fair than Reno when the propagation delay was larger for half of the connections.
Reference: [9] <author> S. Keshav. </author> <title> REAL: A Network Simulator. </title> <type> Technical Report 88/472, </type> <institution> Department of Computer Science, UC Berkeley, </institution> <year> 1988. </year>
Reference-contexts: Our implementation of Reno was derived by retrofitting the BSD implementation into the x-kernel. Our implementation of Vegas was derived by modifying Reno. 2.1 Simulator Many of the results reported in this paper were obtained from a network simulator. Even though several good simulators are availablee.g., REAL <ref> [9] </ref> and Netsim [2]we decided to build our own simulator based on the x-kernel. 1 We limit our discussion to Reno, which is both newer and better performing than Tahoe.
Reference: [10] <author> Z. Wang and J. Crowcroft. </author> <title> A New Congestion Control Scheme: Slow Start and Search (Tri-S). </title> <journal> ACM Computer Communication Review, </journal> <volume> 21(1) </volume> <pages> 32-43, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: Note that the window changes during every adjustment, that is, it oscillates around its optimal point. Another change seen as the network approaches congestion is the flattening of the sending rate. Wang and Crowcroft's Tri-S scheme <ref> [10] </ref> takes advantage of this fact. Every RTT, they increase the window size by one segment and compare the throughput achieved to the throughput when the window was one segment smaller.
Reference: [11] <author> Z. Wang and J. Crowcroft. </author> <title> Eliminating Periodic Packet Losses in 4.3-Tahoe BSD TCP Congestion Control Algorithm. </title> <journal> ACM Computer Communication Review, </journal> <volume> 22(2) </volume> <pages> 9-16, </pages> <month> Apr. </month> <year> 1992. </year>
Reference-contexts: These changes can be seen in Figure 6 in the time interval from 4.5 to 7.5 seconds. One change is the increased queue size in the intermediate nodes of the connection, resulting in an increase of the RTT for each successive segment. Wang and Crowcroft's DUAL algorithm <ref> [11] </ref> is based on this increase of the round-trip delay. The congestion window normally increases as in Reno, but every two round-trip delays the algorithm checks to see if the current RTT is greater than the average of the minimum and maximum RTTs seen so far.
Reference: [12] <author> L. Zhang, S. Shenker, and D. D. Clark. </author> <title> Observations on the Dynamics of a Congestion Control Algorithm: The Effects of Two-Way Traffic. </title> <booktitle> In Proceedings of the SIGCOMM '91 Symposium, </booktitle> <pages> pages 133-147, </pages> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: Again, Reno did better when running against Vegas than against itself, but this time, its losses increased by only 6% (versus 43%) in the Reno/Vegas case. * Two-way background traffic. There have been reports of change in TCP's behavior when the background traffic is two-way rather than one-way <ref> [12] </ref>. Thus, we modified the experiment in Section 4.2 by adding tcplib traffic from Host3b to Host3a. The throughput ratio stayed the same, but the loss ratio was much better: 0.29. Reno resent more data and Vegas remained about the same.
References-found: 12

