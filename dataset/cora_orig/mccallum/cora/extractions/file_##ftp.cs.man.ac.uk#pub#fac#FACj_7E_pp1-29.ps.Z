URL: file://ftp.cs.man.ac.uk/pub/fac/FACj_7E_pp1-29.ps.Z
Refering-URL: http://www.salford.ac.uk/isrc/vadera/svpubs.html
Root-URL: 
Title: of Computing Proof by Analogy in Mural AMore Detailed Account  
Author: Sunil Vadera 
Keyword: Heuristics; Theorem proving; Analogy  
Address: Salford, Salford, UK  
Affiliation: Department of Mathematics and Computer Science, University of  
Note: Formal Aspects of Computing (1995) 7(E): 1-29 c 1995 BCS Formal Aspects  
Abstract: An important advantages of using a formal method of developing software is that one can prove that development steps are correct with respect to their specification. Conducting proofs by hand, however, can be time consuming to the extent that designers have to judge whether a proof of a particular obligation is worth conducting. Even if hand proofs are worth conducting, how do we know that they are correct? One approach to overcoming this problem is to use an automatic theorem proving system to develop and check our proofs. However, in order to enable present day theorem provers to check proofs, one has to conduct them in much more detail than hand proofs. Carrying out more detailed proofs is of course more time consuming. This paper describes the use of proof by analogy in an attempt to reduce the time spent on proofs. We develop and implement a proof follower based on analogy and present two examples to illustrate its characteristics. One example illustrates the successful use of the proof follower. The other example illustrates that the follower's failure can provide a hint that enables the user to complete a proof. We conclude our study by contrasting our approach with other work. 
Abstract-found: 1
Intro-found: 1
Reference: [B + 83] <author> Buchanan B. G. et al.: </author> <title> Constructing an expert system. </title> <editor> In F. Hayes-Roth, D. A. Waterman, and D. B. Lenat, editors, </editor> <booktitle> Building Expert Systems, </booktitle> <pages> pages 127-167. </pages> <publisher> Addison Wesley, </publisher> <year> 1983. </year>
Reference-contexts: In the area of expert systems, even when the heuristics are known to human experts, the problem of generalising and representing them is known to be a major problem. Indeed, it is thought to be a bottleneck for the development of expert systems (e.g. see Buchanan et al. <ref> [B + 83] </ref>). It is therefore likely that the need to recognise and represent heuristics could form a bottleneck for their use in theorem proving. An alternative to the explicit coding of heuristics is to carry out proofs by analogy.
Reference: [Bun79] <editor> Bundy, A.: </editor> <booktitle> The Computer Modelling of Mathematical Reasoning. </booktitle> <publisher> Academic Press, </publisher> <year> 1979. </year>
Reference-contexts: We have implemented our approach in mural and therefore adopt the notation and proof presentation style described in [JJL91]. We also expect the reader to be familiar with logic and proofs as described in texts like <ref> [Bun79, Jon90, MaW85] </ref>. Proof Presentation A proof is presented as a sequence of lines. Assumption lines are labelled with a from and conclusion lines are labelled with an infer. Lines are justified on their 4 S. Vadera Fig. 2.
Reference: [Bun88] <author> Bundy, A.: </author> <title> The use of explicit plans to guide inductive proofs. </title> <editor> In R. Lusk and R. Overbeek, editors, </editor> <booktitle> 9th Conference on Automated Deduction, </booktitle> <pages> pages 111-120. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: We, of course, do not use such tools blindly. Instead, we use the experience gained in previous proofs to guide us. One way of embodying this experience in a theorem proving system is to develop explicit heuristics (e.g. Bundy's rippling tactics <ref> [Bun88] </ref>). The development of explicit heuristics does, however, require considerable effort on our part. First we have to be able to recognise and generalise common proof steps. Then we have to code them in a tactic language.
Reference: [Eva68] <author> Evans, T. G.: </author> <title> A program for the solution of a class of geometric analogy intelligence test questions. </title> <editor> In Minsky M., editor, </editor> <booktitle> Semantic Information Processing, </booktitle> <pages> pages 273-353. </pages> <publisher> MIT Press, </publisher> <year> 1968. </year>
Reference-contexts: For example, Gruber [Gru78] gives an account of the role played by such a notion of analogy in the development of Darwin's theory of evolution. A different notion of analogy is best typified by Evans' system <ref> [Eva68] </ref>. In one of the earliest studies of analogy, Evans developed a system for solving geometric analogy problems like the one given in Fig. 1.
Reference: [GiH80] <author> Gick, M. and Holyoak, K. J.: </author> <title> Analogical problem solving. </title> <journal> Cognitive Psychology, </journal> <volume> 12, </volume> <year> 1980. </year>
Reference-contexts: An Introduction to Analogy The use of analogy to aid the solution of problems is the subject of a broad range of studies. These include studies that examine psychological aspects of human problem solving processes (e.g. Gick and Holyoak <ref> [GiH80] </ref>), attempts to use analogy to solve novel problems (e.g. McDermott [McD79]), and the use of analogy to aid automatic theorem provers. We refer the reader to Hall [Hal89] for a broad review of computational aspects of analogy.
Reference: [Gru78] <author> Gruber, H. E.: </author> <title> Darwin's tree of nature and other images of wide scope. </title> <booktitle> In On Aesthetics in Science, </booktitle> <pages> pages 121-140. </pages> <publisher> MIT Press, </publisher> <year> 1978. </year>
Reference-contexts: The term analogy itself has been interpreted broadly in the literature (see Indurkhya [Ind89] for a detailed discussion). For instance, one sense of the word has been to describe the use of an apparently unrelated problem to suggest a new angle of approaching a problem. For example, Gruber <ref> [Gru78] </ref> gives an account of the role played by such a notion of analogy in the development of Darwin's theory of evolution. A different notion of analogy is best typified by Evans' system [Eva68].
Reference: [Hal89] <author> Hall, R. P.: </author> <title> Computational approaches to analogical reasoning: A comparative analysis. </title> <journal> Artificial Intelligence, </journal> <volume> 39 </volume> <pages> 39-120, </pages> <year> 1989. </year>
Reference-contexts: These include studies that examine psychological aspects of human problem solving processes (e.g. Gick and Holyoak [GiH80]), attempts to use analogy to solve novel problems (e.g. McDermott [McD79]), and the use of analogy to aid automatic theorem provers. We refer the reader to Hall <ref> [Hal89] </ref> for a broad review of computational aspects of analogy. The term analogy itself has been interpreted broadly in the literature (see Indurkhya [Ind89] for a detailed discussion). <p> An approach like ours would soon stop after producing some inappropriate lines. A system that defaults to resolution could however perform a significant amount of searching before stopping (if at all). * As the descriptions of other systems suggest (see <ref> [Kli71, Hal89, Owe90] </ref>), the flexible matchers are much more complex than a strict matcher.
Reference: [Ind89] <author> Indurkhya, B.: </author> <title> Modes of analogy. In Analogical and Inductive Inference, </title> <booktitle> Lecture Notes in AI, </booktitle> <volume> 397, </volume> <pages> pages 217-230, </pages> <year> 1989. </year>
Reference-contexts: McDermott [McD79]), and the use of analogy to aid automatic theorem provers. We refer the reader to Hall [Hal89] for a broad review of computational aspects of analogy. The term analogy itself has been interpreted broadly in the literature (see Indurkhya <ref> [Ind89] </ref> for a detailed discussion). For instance, one sense of the word has been to describe the use of an apparently unrelated problem to suggest a new angle of approaching a problem.
Reference: [JJL91] <author> Jones, C. B., Jones, K. D., Lindsay, P. A. and Moore, R.: </author> <title> editors. mural: A Formal Development Support System. </title> <publisher> Springer Verlag, </publisher> <address> London, </address> <year> 1991. </year>
Reference-contexts: Although useful, if we use such a function at each possible proof step, then we simply end up with the explosive search space of resolution theorem provers. For example, in the theorem proving system mural <ref> [JJL91] </ref>, over 30 known rules match: append (append (reverse (l); m); n) = append (reverse (l); append (m; n)) These include rules as diverse as the definition of set equality, induction rules and elimination rules. We, of course, do not use such tools blindly. <p> Summary of Notation This section summarises the notation that is used in this paper. We have implemented our approach in mural and therefore adopt the notation and proof presentation style described in <ref> [JJL91] </ref>. We also expect the reader to be familiar with logic and proofs as described in texts like [Bun79, Jon90, MaW85]. Proof Presentation A proof is presented as a sequence of lines. Assumption lines are labelled with a from and conclusion lines are labelled with an infer. <p> That is, a term is instantiated by replacing its metavariables in the domain of the instantiation by their right hand sides in the instantiation. We also note that mural's definition of instantiation includes the appropriate replacement of place holders (see p. 129 of <ref> [JJL91] </ref> for a formal definition). We define the notion of applying an analogy to an instantiation as follows. <p> We have, however, only implemented the simpler approach. 4. Example uses of the Proof Follower We have implemented the proof follower in the theorem proving system mural <ref> [JJL91] </ref> and have carried out several examples. In this section we describe two of these examples to illustrate the characteristics of the proof follower. We refer the reader to [Vad92] for more involved examples. We begin with an example in which the proof follower is successful. <p> An alternative approach to taking advantage of possible similarities between proofs is to use theory morphisms. Lindsay <ref> [JJL91, p. 68] </ref> proposes such an approach for mural. The use of theory morphisms requires one to define an abstract theory. Then the proven results in the abstract theory (after transformation) hold in each of the concrete theories without the need for their proof within these theories.
Reference: [Jon90] <author> Jones, C. B.: </author> <title> Systematic Software Development using VDM. </title> <publisher> Prentice Hall International, </publisher> <address> second edition, </address> <year> 1990. </year>
Reference-contexts: We have implemented our approach in mural and therefore adopt the notation and proof presentation style described in [JJL91]. We also expect the reader to be familiar with logic and proofs as described in texts like <ref> [Bun79, Jon90, MaW85] </ref>. Proof Presentation A proof is presented as a sequence of lines. Assumption lines are labelled with a from and conclusion lines are labelled with an infer. Lines are justified on their 4 S. Vadera Fig. 2. <p> An alternative way of proving the associativity of set union is to use induction. Proof by Analogy in Mural AMore Detailed Account 23 Fig. 6. Proposed analogous rule. Fig. 7. Source proof of [-assoc (inductive). Thus, for example, Jones <ref> [Jon90] </ref> adopts this approach. We therefore carried out the proof of [-assoc by induction in mural as shown in Fig. 7. How well does the proof follower manage to carry out the proof of "-assoc from this inductive proof? Figure 8 shows the result of its attempt.
Reference: [Kli71] <author> Kling, R. E.: </author> <title> A paradigm for reasoning by analogy. </title> <journal> Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 147-178, </pages> <year> 1971. </year>
Reference-contexts: Filtering Axioms by Analogy. there are examples for which a proof is possible for which the proof follower will fail. There have been several other attempts at carrying out proofs by analogy. The most notable contributions are the resolution based approaches of Kling <ref> [Kli71] </ref>, Munyer [Mun81], and Owen [Owe90]. A primary aim of these systems is to reduce the large number of axioms that are available as potential parent clauses in a resolution proof. <p> An approach like ours would soon stop after producing some inappropriate lines. A system that defaults to resolution could however perform a significant amount of searching before stopping (if at all). * As the descriptions of other systems suggest (see <ref> [Kli71, Hal89, Owe90] </ref>), the flexible matchers are much more complex than a strict matcher.
Reference: [McD79] <author> McDermott, J.: </author> <title> Learning to use analogies. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 568-576, </pages> <address> Tokyo, </address> <year> 1979. </year>
Reference-contexts: These include studies that examine psychological aspects of human problem solving processes (e.g. Gick and Holyoak [GiH80]), attempts to use analogy to solve novel problems (e.g. McDermott <ref> [McD79] </ref>), and the use of analogy to aid automatic theorem provers. We refer the reader to Hall [Hal89] for a broad review of computational aspects of analogy. The term analogy itself has been interpreted broadly in the literature (see Indurkhya [Ind89] for a detailed discussion).
Reference: [Mun81] <author> Munyer, J. C.: </author> <title> Analogy as a means of discovery in problem-solving and learning. </title> <type> PhD thesis, </type> <institution> University of California, Santa Cruz, </institution> <year> 1981. </year>
Reference-contexts: Filtering Axioms by Analogy. there are examples for which a proof is possible for which the proof follower will fail. There have been several other attempts at carrying out proofs by analogy. The most notable contributions are the resolution based approaches of Kling [Kli71], Munyer <ref> [Mun81] </ref>, and Owen [Owe90]. A primary aim of these systems is to reduce the large number of axioms that are available as potential parent clauses in a resolution proof.
Reference: [MaW85] <author> Manna, Z. and Waldinger, R.: </author> <title> The Logical Basis for Computer Programming I. </title> <publisher> Addison Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1985. </year>
Reference-contexts: We have implemented our approach in mural and therefore adopt the notation and proof presentation style described in [JJL91]. We also expect the reader to be familiar with logic and proofs as described in texts like <ref> [Bun79, Jon90, MaW85] </ref>. Proof Presentation A proof is presented as a sequence of lines. Assumption lines are labelled with a from and conclusion lines are labelled with an infer. Lines are justified on their 4 S. Vadera Fig. 2.
Reference: [Owe90] <author> Owen, S.: </author> <title> Analogy for Automated Reasoning. </title> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: Filtering Axioms by Analogy. there are examples for which a proof is possible for which the proof follower will fail. There have been several other attempts at carrying out proofs by analogy. The most notable contributions are the resolution based approaches of Kling [Kli71], Munyer [Mun81], and Owen <ref> [Owe90] </ref>. A primary aim of these systems is to reduce the large number of axioms that are available as potential parent clauses in a resolution proof. <p> An approach like ours would soon stop after producing some inappropriate lines. A system that defaults to resolution could however perform a significant amount of searching before stopping (if at all). * As the descriptions of other systems suggest (see <ref> [Kli71, Hal89, Owe90] </ref>), the flexible matchers are much more complex than a strict matcher.
Reference: [Vad92] <author> Vadera, S.: </author> <title> Heuristics for Proofs. </title> <type> PhD thesis, </type> <institution> University of Manchester, Manch-ester M13 9PL, UK, </institution> <year> 1992. </year> <note> Received March 1993 Accepted in a revised form in May 1994 by D. J. Cooke </note>
Reference-contexts: Example uses of the Proof Follower We have implemented the proof follower in the theorem proving system mural [JJL91] and have carried out several examples. In this section we describe two of these examples to illustrate the characteristics of the proof follower. We refer the reader to <ref> [Vad92] </ref> for more involved examples. We begin with an example in which the proof follower is successful. Then we give an example in which the proof follower is not able to complete a proof but still makes a significant contribution. 4.1. <p> For instance if the len (cons (a; s)) = len s + 1 rule is not available when we attempt a proof in 3 The reader should be able to deduce the content of the rules used from the justifications. The reader can also refer to <ref> [Vad92] </ref> for the rules. Proof by Analogy in Mural AMore Detailed Account 21 Fig. 4. <p> The use of analogy is not restricted to properties whose proofs can be related by abstraction. If the use of an analogy contributes only part of a proof, then its use may still be worthwhile (see <ref> [Vad92] </ref> for such an example). 2. The morphism needs to be built explicitly while the use of analogy uses matching to relate the source and the target. One would expect that a user would find it easier to use analogy than to use abstraction and morphisms. 3.
References-found: 16

