URL: ftp://ftp.eecs.umich.edu/groups/gasm/manysortabst.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.eecs.umich.edu
Email: J.F.M.Tonino@cs.tudelft.nl  
Title: A Sound and Complete SOS-Semantics for Non-Distributed Deterministic  
Address: P.O. Box 356, 2600 AJ Delft, The Netherlands,  
Affiliation: Delft University of Technology, Faculty of Information Technology and Systems,  
Abstract: State Machines Abstract. In this paper we present a sound and complete Structural Operational Semantics (SOS) for non-distributed deterministic Abstract State Machines (ASMs). Since ASMs exhibit both sequential and parallel features, the semantics is structured into two layers. One layer describes the parallel execution of updates, the other layer describes the sequential execution of rules. The semantics has some nice properties, the most important of which include soundness and completeness. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Borger. </author> <title> A logical operational semantics of full Prolog; Part I: Selection core and control. </title> <editor> In E. Borger, H. Kleine Buning, and M.M. Richter, editors, </editor> <booktitle> Computer Science Logic; 3rd Workshop, </booktitle> <address> CSL'89; Kaiserslautern, FRG, </address> <month> October 2-6, </month> <year> 1989, </year> <booktitle> proceedings, </booktitle> <pages> pages 36-64, </pages> <address> Berlin, 1990. </address> <publisher> Springer-Verlag, LNCS 440. </publisher>
Reference-contexts: We will always suppress the subscript V in 1 V for any set V . Definition 8. Let fi be a variable assignment for a -structure A, let x u i i 2 Var u i and let d i 2 (A u i ) 1 for i 2 <ref> [1; m] </ref>. Furthermore, let x u i i j= x j whenever i 6= j. Then [x u 1 1 7!d 1 ; : : : ; x u m m 7!d m ] is called an assignment update. <p> Its effect fi [x u 1 m 7!d m ] on fi is the assignment fi 0 defined by: fi 0 (y u ) = &lt; d i if y u j x u i i and d i 6= 1 for some i 2 <ref> [1; m] </ref>; fi (y u ) if defined and if y u j= x u i i for all i 2 [1; m]; undefined otherwise : By means of an interpretation terms and formulae can be interpreted. <p> 0 defined by: fi 0 (y u ) = &lt; d i if y u j x u i i and d i 6= 1 for some i 2 <ref> [1; m] </ref>; fi (y u ) if defined and if y u j= x u i i for all i 2 [1; m]; undefined otherwise : By means of an interpretation terms and formulae can be interpreted. Due to the fact that we deal with a logic of partial functions, the interpretation of terms will be partial. This means that not all terms will be denoting. <p> Furthermore, let d i 2 A w i and e i 2 (A u i ) 1 for i 2 <ref> [1; m] </ref>, and suppose that d i 6= d j whenever f i j f j for i 6= j. Then M = [[f 1 [d 1 7!e 1 ]; : : : ; f m [d m 7!e m ]]] is called a modification operator. <p> Moreover, it is defined to be the set of local modification operators [[f i [d i 7!e i ]]], also written as f i [d i 7!e i ], (i 2 <ref> [1; m] </ref>). So, local modification operators are modification operators for which m = 1.
Reference: [2] <author> E. Borger. </author> <title> A logical operational semantics of full Prolog; Part II: Built-in predicates for database manipulations. </title> <editor> In B. Rovan, editor, </editor> <booktitle> Symposium on Mathematical Foundations of Computer Science; MFCS '90; Banska Bystrica, </booktitle> <address> Czechoslo-vakia, </address> <month> August 27-31, </month> <year> 1990, </year> <booktitle> proceedings, </booktitle> <pages> pages 1-14, </pages> <address> Berlin, 1990. </address> <publisher> Springer-Verlag, LNCS 452. </publisher>
Reference: [3] <author> E. Borger. </author> <title> A logical operational semantics of full Prolog; Part III: Built-in predicates for files, terms, arithmetic and input-output. </title> <editor> In Y.N. Moschovakis, editor, </editor> <booktitle> Logic from Computer Science; proceedings of a workshop held November 13-17, 1989, </booktitle> <address> New York, 1992. </address> <publisher> Springer-Verlag, </publisher> <address> MSRI 21. </address>
Reference: [4] <author> E. Borger and D. Rosenzweig. </author> <title> A mathematical definition of full Prolog. </title> <booktitle> Science of Computer Programming, </booktitle> <year> 1994. </year>
Reference: [5] <author> G. Del Castillo, Y. Gurevich, and K. Stroetmann. </author> <title> Typed Abstract State Machines. </title> <note> Submitted to Journal of Universal Computer Science, </note> <year> 1998. </year>
Reference-contexts: To be in accordance with their actual use in practice, our ASMs are many-sorted. In this way we abstract away from the construction of types out of basic types, as is done in type systems. Typed ASMs are studied in [17] and, recently, in <ref> [5] </ref>. One of the consequences of our choice to work with many-sorted ASMs is that the contraction update cannot be expressed as a function update anymore since there are no characteristic functions for universes in this framework. This provides us with another reason to include the contraction update.
Reference: [6] <author> P. Glavan and D. Rosenzweig. </author> <title> Communicating Evolving Algebras. </title> <editor> In E. Borger, G. Jager, and H. Kleine Buning, editors, </editor> <booktitle> Computer Science Logic; 6th Workshop, </booktitle> <address> CSL'92; San Miniato, Italy, </address> <month> September 28 - October 2, </month> <year> 1992, </year> <title> selected papers, </title> <address> Berlin, 1993. </address> <publisher> Springer-Verlag, LNCS 702. </publisher>
Reference-contexts: Another direction for future research is developing a logic based semantics for ASMs, such as Hoare semantics or dynamic logic. For the fragment in this paper a sound, but not complete Hoare calculus has been developed in [15]. In <ref> [6] </ref> a dynamic logic is described for a fragment for the early ASM formalism. Here ASMs are interpreted as modal operators. Research along this lines could be extended to the full ASM formalism.
Reference: [7] <author> Y Gurevich. </author> <title> Logic and the challenge of computer science. </title> <editor> In E. Borger, editor, </editor> <booktitle> Trends in Theoretical Computer Science, chapter 1, </booktitle> <pages> pages 1-57. </pages> <publisher> Computer Science Press, </publisher> <address> Rockville, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction Abstract State Machines (ASMs), formerly called Evolving Algebras, were introduced by Yuri Gurevich in the late eighties and early nineties as an alternative formal specification language (see <ref> [7, 8, 9] </ref>). ASMs are claimed to be easier to work with than other formal specification formalisms known from the literature. Egon Borger was one of the first to test the ASM methodology. He formalized the operational semantics of full Prolog (see e.g.[1, 2, 3, 4]).
Reference: [8] <author> Y. Gurevich. </author> <title> Evolving Algebras, a tutorial introduction. </title> <journal> Bulletin of the European Association for Theoretical Computer Science, </journal> <volume> 43 </volume> <pages> 264-284, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Abstract State Machines (ASMs), formerly called Evolving Algebras, were introduced by Yuri Gurevich in the late eighties and early nineties as an alternative formal specification language (see <ref> [7, 8, 9] </ref>). ASMs are claimed to be easier to work with than other formal specification formalisms known from the literature. Egon Borger was one of the first to test the ASM methodology. He formalized the operational semantics of full Prolog (see e.g.[1, 2, 3, 4]).
Reference: [9] <author> Y Gurevich. </author> <title> Evolving Algebras 1993: Lipari guide. </title> <editor> In E. Borger, editor, </editor> <booktitle> Specification and Validation Methods, </booktitle> <pages> pages 9-36. </pages> <publisher> Clarendon Press, Oxford, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction Abstract State Machines (ASMs), formerly called Evolving Algebras, were introduced by Yuri Gurevich in the late eighties and early nineties as an alternative formal specification language (see <ref> [7, 8, 9] </ref>). ASMs are claimed to be easier to work with than other formal specification formalisms known from the literature. Egon Borger was one of the first to test the ASM methodology. He formalized the operational semantics of full Prolog (see e.g.[1, 2, 3, 4]).
Reference: [10] <author> Y. Gurevich. </author> <note> May 1997 Draft of the ASM Guide, 1997. </note> <institution> University of Michigan, EECS Department Technical Report CSE-TR-336-97. </institution> <note> See: http://www.eecs.umich.edu/gasm. </note>
Reference-contexts: Another benefit is that programming languages the semantics of which can be formalized using our ASM fragment like Prolog inherit the SOS-semantics presented here. Parallel to the work reported in [15], Gurevich has developed an alternative semantics for ASMs in <ref> [10] </ref>. According to this semantics - Gurevich calls it a denotational semantics the meaning of a rule is an equivalence class of updates, which is a function on states. The semantics of rules is defined by recursion on the structure of rules. <p> In that case Theorem 39 does not hold, of course. The semantic framework seems to be suited for formalizing other ASM constructs as well. In particular, it would be interesting to develop a SOS-semantics for the latest version of the ASM formalism which includes distributed ASMs (see <ref> [10] </ref>). It would be also interesting to extend the notion of consistent ASMs to this rich formalism. Another direction for future research is developing a logic based semantics for ASMs, such as Hoare semantics or dynamic logic.
Reference: [11] <author> J. Meseguer and J.A. Goguen. Initiality, </author> <title> induction, and computability. </title> <editor> In M. Ni-vat and J.C. Reynolds, editors, </editor> <booktitle> Algebraic Methods in Semantics, </booktitle> <pages> pages 459-541. </pages> <publisher> Cambridge University Press, </publisher> <year> 1985. </year>
Reference-contexts: The sets Var u are disjoint from set Sym. Elements of Var u are written as x u . We will use the following convention (cf. <ref> [11] </ref>): If V = fV u j u 2 Sortg is a Sort-indexed family of sets, and w = u 1 : : : u n 2 Sort fl , then V w will denote V u 1 fi : : : fi V u n .
Reference: [12] <author> G. Plotkin. </author> <title> An operational semantics for CSP. </title> <editor> In D. Bjorner, editor, </editor> <booktitle> Proceedings IFIP TC 2 Working Conference: Formal Description of Programming Concepts - II, </booktitle> <pages> pages 199-223, </pages> <address> Amsterdam, 1983. </address> <publisher> North-Holland. </publisher>
Reference-contexts: The kind of formalism in which we will express the semantics, will be Structural Operational Semantics. This kind of semantics was pioneered by Plotkin (see for example <ref> [12] </ref>), and is covered nowadays in many textbooks on the semantics of programming languages. In our version of ASMs, extension updates are, in fact, compound updates, i.e. they are structured.
Reference: [13] <author> D. Scott. </author> <title> Existence and description in formal logic. </title> <editor> In R. Schoenman, editor, Bertrand Russell, </editor> <booktitle> Philosopher of the Century, chapter 16, </booktitle> <pages> pages 181-200. </pages> <publisher> George Allen & Unwin Ltd, </publisher> <address> London, </address> <year> 1967. </year>
Reference-contexts: In Sect. 6 we define the SOS-semantics for our fragment and list some of its important properties like soundness and completeness. Finally, in Sect. 7, we present our conclusions. 2 E-Logic As underlying logic for ASMs we will use a variant of E-logic originally developed by Scott in <ref> [13, 14] </ref>. The "E" stands for existence. Our version of E-logic is a classical many-sorted logic of partial functions with existence predicate and strictness conditions on functions and predicates.
Reference: [14] <author> D.S. Scott. </author> <title> Identity and existence in intuitionistic logic. In M.P. </title> <editor> Fourman, C.J. Mulvey, and D.S. Scott, editors, </editor> <booktitle> Applications of Sheaves, Proceedings, Durham 1977, </booktitle> <pages> pages 660-696, </pages> <address> Berlin, 1979. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In Sect. 6 we define the SOS-semantics for our fragment and list some of its important properties like soundness and completeness. Finally, in Sect. 7, we present our conclusions. 2 E-Logic As underlying logic for ASMs we will use a variant of E-logic originally developed by Scott in <ref> [13, 14] </ref>. The "E" stands for existence. Our version of E-logic is a classical many-sorted logic of partial functions with existence predicate and strictness conditions on functions and predicates.
Reference: [15] <author> H. Tonino. </author> <title> A Theory of Many-sorted Evolving Algebras. </title> <type> PhD thesis, </type> <institution> Delft University of Technology, </institution> <year> 1997. </year>
Reference-contexts: He formalized the operational semantics of full Prolog (see e.g.[1, 2, 3, 4]). Since then quite a lot of papers applying ASMs to a wide variety of problems have been published. Foundational issues have lacked much attention, however. In <ref> [15] </ref> the present author has set a first step towards a firm logical foundation of ASMs. In this thesis both a Structural Operational Semantics (SOS-semantics) and a Hoare-style axiomatic semantics for non-distributed ASMs have been developed. <p> Another benefit is that programming languages the semantics of which can be formalized using our ASM fragment like Prolog inherit the SOS-semantics presented here. Parallel to the work reported in <ref> [15] </ref>, Gurevich has developed an alternative semantics for ASMs in [10]. According to this semantics - Gurevich calls it a denotational semantics the meaning of a rule is an equivalence class of updates, which is a function on states. <p> Definition 11. Let s; t 2 Term u , then strong equality between s and t, notation s t, is defined by #s ^ #t!s = t. It is possible to define a sound and complete deduction system for this logic as is shown in <ref> [15] </ref>. In fact, a soundness and completeness result is proven for an E-logic with so-called `extended terms' which are used in an axiomatic semantics for ASMs. 3 Operations on Interpretations The model-theoretic operations we are about to introduce will be used in the SOS-semantics for ASMs. <p> fiiM 1 = hAM 1 ; fii; hA; fiiE u d = hAE u hA; fiiD u d = hAD u d i; hA; fiiM 2 = hA; fiM 2 i : For results about these operations in connection with the denotation of terms and formulae the reader might consult <ref> [15] </ref>. We will now continue with the syntax of ASMs. 4 Syntax of ASMs The dialect of ASMs we will use is based on the syntax of the early Evolving Algebras developed by Borger in his papers on the semantics of Prolog. <p> This can be done by adding a set D of reserve elements in the formulation of the rules. At any stage of the computation this set contains new elements which can be safely chosen. For details, see <ref> [15] </ref>. The semantics of rem t : u covers the possibility of parallel contraction updates of the same element recall that parallel contractions are allowed. <p> In all other cases R is said to terminate abnormally, and J is said to be an abnormal final state. For the SOS-semantics a number of interesting adequacy results can be proven. We list some of them without proofs. Again, the reader is referred to <ref> [15] </ref>. The following theorem shows that extension variables are real bound variables. In the theorem U [x:=y] refers to the result of renaming the free occurrences of x in U into y (while at the same time renaming extension variables which could clash with y). <p> Another direction for future research is developing a logic based semantics for ASMs, such as Hoare semantics or dynamic logic. For the fragment in this paper a sound, but not complete Hoare calculus has been developed in <ref> [15] </ref>. In [6] a dynamic logic is described for a fragment for the early ASM formalism. Here ASMs are interpreted as modal operators. Research along this lines could be extended to the full ASM formalism.
Reference: [16] <author> M. Wirsing. </author> <title> Algebraic specification. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <pages> pages 675-788. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1990. </year>
Reference-contexts: Furthermore, we will use j for syntactic equality. The model theory of E-logic is based on partial structures, i.e. structures in which constants may not denote, and functions can be partial. The interpretation of predicates is total, however. Without predicates our structures would have been algebras (see <ref> [16] </ref>). Before reading the following definition the reader should recall our convention about vector notation just above Definition 2. Definition 4. Let = h; Sort; Sym; oei be a given signature.
Reference: [17] <author> A.V. Zamulin. </author> <title> Typed gurevich machines revisited. </title> <journal> Joint CS & IIS Bulletin, Computer Science, </journal> <volume> 5, </volume> <year> 1997. </year>
Reference-contexts: To be in accordance with their actual use in practice, our ASMs are many-sorted. In this way we abstract away from the construction of types out of basic types, as is done in type systems. Typed ASMs are studied in <ref> [17] </ref> and, recently, in [5]. One of the consequences of our choice to work with many-sorted ASMs is that the contraction update cannot be expressed as a function update anymore since there are no characteristic functions for universes in this framework.
References-found: 17

