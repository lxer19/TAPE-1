URL: http://www.cs.rpi.edu/tr/96-19.ps
Refering-URL: http://www.cs.rpi.edu/tr/
Root-URL: 
Email: mcnaught@cs.rpi.edu  
Title: Contributions of Ronald V. Book to the Theory of String-Rewriting Systems  
Author: Robert McNaughton 
Date: November, 1996  
Address: Troy, NY 12180-3590, U.S.A.  
Affiliation: Department of Computer Science Rensselaer Polytechnic Institute  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. Berstel, </author> <title> Congruences plus que parfaites et langages algebriques, </title> <booktitle> Seminaire d'Informatique Theorique, Institute de Programmation (1976-77), </booktitle> <pages> pp. 123-147. </pages>
Reference-contexts: The collection of research problems that Book was to focus on in the 1980's was, to a large extent, an outgrowth of the collection of problems that Nivat and his collaborators had focused on in the 1970's (see Berstell's 1977 paper <ref> [1] </ref>). During most of the 1980's Book was intensively interested in research in this area. He is to be lauded for carrying out his research on a broad front, maintaining an interest in several different research questions, developing his own thoughts and paying careful attention to the results of others.
Reference: [2] <author> R. </author> <title> Book, Confluent and other types of Thue systems, </title> <journal> J. Association Computing Machinery, </journal> <volume> Vol. 29 (1982), </volume> <pages> pp. 171-182. </pages>
Reference-contexts: Linear-time string reduction. Perhaps the most impressive of Book's results about rewriting systems from an applications point of view is that systems with the length-based Church-Rosser property have a highly efficient method of reduction of a string to a canonical form. In <ref> [2] </ref> he shows how to construct, for any such system, an automaton with two pushdown stores that can reduce any string over the alphabet to its canonical form in time that is linear in the length of the string. <p> This algorithm would be easily implemented as a computer program, which, if care is taken in the writing, runs in linear time. In <ref> [2] </ref>, Book chose to implement the algorithm as a pushdown automaton with two pushdown stores (see also the proof of Theorem 2.2.9 in [8]). 5. Monoid presentation.
Reference: [3] <author> R. </author> <title> Book, When is a monoid a group? The Church-Rosser case is tractable, </title> <journal> Theoretical Computer Science, </journal> <volume> Vol. 18 (1982), </volume> <pages> pp. 325-331. </pages>
Reference-contexts: Otto's improvement on this result [13] implies that the free-monoid problem is decidable for the class of Church-Rosser Thue systems (; E) where E is finite. In 1982 Book proved <ref> [3] </ref> that the group problem is decidable for the class of monadic Thue systems with the Church-Rosser property (cancellativity was not needed).
Reference: [4] <author> R. </author> <title> Book, Decidable sentences of Church-Rosser congruences, </title> <journal> Theoretical Computer Science, </journal> <volume> Vol. 24 (1983), </volume> <pages> pp. 301-312. </pages>
Reference-contexts: all monadic Church-Rosser Thue systems with the cancellative property. (A Thue system has the cancellative property if, for all x; y; z 2 fl , xz $ fl yz implies x $ fl y, and zx $ fl zy implies x $ fl y.) This result, although not stated in <ref> [4] </ref>, follows by methods used in that paper (see p. 172 of [8]). Otto's improvement on this result [13] implies that the free-monoid problem is decidable for the class of Church-Rosser Thue systems (; E) where E is finite.
Reference: [5] <author> R. </author> <title> Book, Homogeneous Thue systems and the Church-Rosser property, </title> <journal> Discrete Mathematics, </journal> <volume> Vol. 48 (l984), </volume> <pages> pp. 137-145. </pages>
Reference-contexts: The end of that chapter surveys a number of other algebraic problems about Thue systems: the conjugacy problem, the cancellativity problem, and the problem of the existence of a nontrivial idempotent, which are not discussed here. 6. Another of Book's results about monoids <ref> [5] </ref>. This last section will consider another problem about the monoids represented by Thue systems. An element of such a monoid can be thought of as an equivalence class of strings. Since the equivalence classes can be multiplied to get other equivalence classes, they are called congruence classes. <p> If w is its own root (k = 1) then w is primitive. If there are nonnull strings u; v; z such that w = uz = zv then z is an overlap of w. Book's result <ref> [5] </ref> (see also pp. 62-63 of [6]) about a Thue system T = (; f (w; e)g), the monoid M T presented by T and the group U T of units of M T states: (a) If w is primitive and has no overlap then U T is trivial (meaning that
Reference: [6] <author> R. </author> <title> Book, Thue systems as rewriting systems, </title> <journal> J. Symbolic Computation, </journal> <volume> Vol. 3 (1987), </volume> <pages> pp. 39-68. </pages>
Reference-contexts: As we have noted, even the procedure for obtaining a minimal-length string equivalent to a given string is more complex for preperfect systems. For Book's discussion of alternatives to the length-based Church-Rosser property for systems with viable reduction procedures, the reader is referred to pp. 65-66 of <ref> [6] </ref>. In cases where a system does not have the length-based Church-Rosser property, it is sometimes possible to revise the system so that it has some other Church-Rosser property. Usually this would require finding another reduction relation not based wholly on length. <p> If w is its own root (k = 1) then w is primitive. If there are nonnull strings u; v; z such that w = uz = zv then z is an overlap of w. Book's result [5] (see also pp. 62-63 of <ref> [6] </ref>) about a Thue system T = (; f (w; e)g), the monoid M T presented by T and the group U T of units of M T states: (a) If w is primitive and has no overlap then U T is trivial (meaning that [e] is the only member of <p> The theorem examined in this section turns out to be helpful in answering this question in certain cases. For Book's detailed discussion of this matter, see pp. 62-64 of <ref> [6] </ref>. This ends my brief and incomplete review of Ron Book's work on rewriting systems during the 1980's.
Reference: [7] <author> R. Book and C. O'Dunlaing, </author> <title> Testing for the Church-Rosser property, </title> <journal> Theoretical Computer Science, </journal> <volume> Vol. 16 (1981), </volume> <pages> pp. 223-229. </pages>
Reference-contexts: Book made much of this fact. Book was also impressed with the fact that it was computationally simple to tell whether a given Thue system (; Q) for finite Q has the length-based Church-Rosser property. With O'Dunlaing <ref> [7] </ref> he noted that the decision procedure for this problem, discovered by Nivat and Cochet [12], could be made to run in polynomial time. When length-preserving rules play an important role, it may be appropriate to consider a property that is considerably weaker than the length-based Church-Rosser property. <p> Example for Case (b): Let T = (fa; bg; f (ababab; e)g). Then w = (ab) 3 has root ab, which has no overlap. Using well known methods (see, e.g., <ref> [7] </ref>), it is easy to see that T has the length-based Church-Rosser property with the one reduction rule (ababab; e). It is not difficult to see that [ab]; [abab]; [e] 2 U T and that no two of these three are equal.
Reference: [8] <author> R. Book and F. Otto, </author> <title> String-rewriting systems, </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: I regret that I could not complete it in time for it to appear in the Festschrift volume (edited by Ding-Zhu Du and Ker-I Ko). y Supported by Grant No. CCR-9500182 from the National Science Foundation. 1 Book was joined by Friedrich Otto in 1993 in writing a monograph <ref> [8] </ref> that has a fairly complete account of this area of research, including most of Book's contributions. Because of its importance, I shall often refer to it informally rather than by its location in the list of references at the end of the review. <p> Where (; R) is an abstract reduction system and E is defined from R as E 0 was defined in the preceding paragraph, then (; R) has the confluence property if and only if (; E; R) has the Church-Rosser property (see, e.g., Lemma 1.1.7 of <ref> [8] </ref>). For the purposes of this paragraph this result can serve as a definition of "confluence." Because of the closeness in meaning of "confluence" and "Church-Rosser," the former term is not discussed in this review outside this paragraph, even though it is at present the more popular term. <p> This algorithm would be easily implemented as a computer program, which, if care is taken in the writing, runs in linear time. In [2], Book chose to implement the algorithm as a pushdown automaton with two pushdown stores (see also the proof of Theorem 2.2.9 in <ref> [8] </ref>). 5. Monoid presentation. <p> has the cancellative property if, for all x; y; z 2 fl , xz $ fl yz implies x $ fl y, and zx $ fl zy implies x $ fl y.) This result, although not stated in [4], follows by methods used in that paper (see p. 172 of <ref> [8] </ref>). Otto's improvement on this result [13] implies that the free-monoid problem is decidable for the class of Church-Rosser Thue systems (; E) where E is finite.
Reference: [9] <author> A. Church and J.B. Rosser, </author> <title> Some properties of conversion, </title> <journal> Trans. Am. Math. Soc., </journal> <volume> Vol. 39 (1939), </volume> <pages> pp. 472-482. </pages>
Reference-contexts: The string x n is thus a canonical form of x. The sequence x 0 ; x 1 ; : : : ; x n we call a reduction sequence for x. (The term "Church-Rosser" honors work by Alonzo Church and Barkley Rosser <ref> [9] </ref> on the lambda calculus.) Note that if we have x = x 0 ! x 1 ! ! x i , and both x i ! x i+1 and x i ! x 0 i+1 hold, then we can take either x i+1 or x 0 i+1 as the (i
Reference: [10] <author> M. </author> <title> Jantzen, Confluent string rewriting, </title> <journal> EATCS Monograph No. </journal> <volume> 14, </volume> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: We can get a mixed system from such an existing semi-Thue system (; R) by putting E = f (x; y)j (x; y) 2 R or (y; x) 2 Rg. This type of mixed system is, in effect, what was used in a 1988 monograph by Jantzen <ref> [10] </ref> and in the very first chapter of the 1993 monograph by Book and Otto. More will be said about it in the next section. In this review, a rewriting system will always be a mixed system.
Reference: [11] <author> D. Kapur and P. Narendran, </author> <title> The Knuth-Bendix completion procedure and Thue systems, </title> <journal> SIAM J. Computing, </journal> <volume> Vol. 14 (1985), </volume> <pages> pp. 1052-1072. </pages>
Reference-contexts: Assuming the alphabet is ordered, we can define x &lt; y for x; y 2 fl to mean that either jxj &lt; jyj or jxj = jyj and x precedes y in alphabetic order. Then, following <ref> [11] </ref>, we can define a mixed system (; E; R) to be lexicographically confluent if (1) x &lt; y for all (y; x) 2 R and (2) (; E; R) has the Church-Rosser property.
Reference: [12] <editor> M. Nivat and M. Benois, Congruences parfaites et quasi-parfaites, Seminaire Dubreil, </editor> <volume> Vol. </volume> <pages> 25 (1971-72), </pages> <month> 7-01-09. </month>
Reference-contexts: 1. Introduction. Ron Book's interest in string-rewriting systems was stimulated by Maurice Nivat <ref> [12] </ref>, who, in the 1970's, investigated Thue systems [15] and semi-Thue systems for applications to formal languages and algebra. <p> Book was also impressed with the fact that it was computationally simple to tell whether a given Thue system (; Q) for finite Q has the length-based Church-Rosser property. With O'Dunlaing [7] he noted that the decision procedure for this problem, discovered by Nivat and Cochet <ref> [12] </ref>, could be made to run in polynomial time. When length-preserving rules play an important role, it may be appropriate to consider a property that is considerably weaker than the length-based Church-Rosser property.
Reference: [13] <author> F. Otto, </author> <title> Church-Rosser Thue systems that present free monoids, </title> <journal> SIAM J. Computing, </journal> <volume> Vol. 15 (1986), </volume> <pages> pp. 786-792. </pages>
Reference-contexts: Otto's improvement on this result <ref> [13] </ref> implies that the free-monoid problem is decidable for the class of Church-Rosser Thue systems (; E) where E is finite. In 1982 Book proved [3] that the group problem is decidable for the class of monadic Thue systems with the Church-Rosser property (cancellativity was not needed).
Reference: [14] <author> F. Otto, </author> <title> On deciding whether a monoid is a free monoid or is a group, </title> <journal> Acta Informatica, </journal> <volume> Vol. 23 (1986), </volume> <pages> pp. 99-110. </pages>
Reference-contexts: One of Book's research objectives has been to find interesting subclasses of the class of all Thue systems for which these problems are decidable. He achieved certain results along these lines in the early 1980's, on which Otto made improvements in 1986 ([13], <ref> [14] </ref>). <p> In 1982 Book proved [3] that the group problem is decidable for the class of monadic Thue systems with the Church-Rosser property (cancellativity was not needed). Otto's improvement <ref> [14] </ref> implies that this result (as in the case of the free-monoid problem) holds when the class of Thue systems is the class of Church-Rosser Thue systems (; E) with finite E. 9 The last chapter of the monograph by Book and Otto gives a complete and well written technical exposition
Reference: [15] <author> A. </author> <title> Thue, Probleme uber Veranderungen von Zeichenreihen nach gegebenen Regeln, </title> <journal> Skr. Vid. Kristiania, I Mat. Natuv. Klasse, </journal> <volume> No. 10 (1914), </volume> <pages> 34 pp. 12 </pages>
Reference-contexts: 1. Introduction. Ron Book's interest in string-rewriting systems was stimulated by Maurice Nivat [12], who, in the 1970's, investigated Thue systems <ref> [15] </ref> and semi-Thue systems for applications to formal languages and algebra. <p> This short review is not intended to serve either as a complete survey or as a technical introduction. I regret that time has not permitted even a mention of the work of most of his followers. 2. Thue systems <ref> [15] </ref> and semi-Thue systems. These are the two basic abstract concepts used in the study of string rewriting, and are presented here briefly. From them a mixed system is defined, which is a mixture of a Thue system and a semi-Thue system related in a certain way.
References-found: 15

