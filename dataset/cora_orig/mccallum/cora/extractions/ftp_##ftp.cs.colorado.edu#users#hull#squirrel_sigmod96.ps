URL: ftp://ftp.cs.colorado.edu/users/hull/squirrel:sigmod96.ps
Refering-URL: http://www.cs.concordia.ca/~faculty/grahne/courses/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: hull@cs.colorado.edu  gzhou@cs.colorado.edu  
Title: A Framework for Supporting Data Integration Using the Materialized and Virtual Approaches  
Author: Richard Hull Gang Zhou 
Address: Boulder, CO 80309-0430  Boulder, CO 80309-0430  
Affiliation: Computer Science Department University of Colorado  Computer Science Department University of Colorado  
Abstract: This paper presents a framework for data integration currently under development in the Squirrel project. The framework is based on a special class of mediators, called Squirrel integration mediators. These mediators can support the traditional virtual and materialized approaches, and also hybrids of them. In the Squirrel mediators, a relation in the integrated view can be supported as (a) fully materialized, (b) fully virtual, or (c) partially materialized (i.e., with some attributes materialized and other attributes virtual). In general, (partially) materialized relations of the integrated view are maintained by incremental updates from the source databases. Squirrel mediators provide two approaches for doing this: (1) materialize all needed auxiliary data, so that data sources do not have to be queried when processing the incremental updates; or (2) leave some or all of the auxiliary data virtual, and query selected source databases when processing incremental updates. The paper presents formal notions of consistency and "freshness" for integrated views defined over multiple autonomous source databases. It is shown that Squirrel mediators satisfy these properties. 
Abstract-found: 1
Intro-found: 1
Reference: [ACHK93] <author> Y. Arens, C.Y. Chee, C.N. Hsu, </author> <title> and C.A. Knoblock. Retrieving and integrating data from multiple information sources. </title> <journal> Intl. Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 2(2) </volume> <pages> 127-158, </pages> <year> 1993. </year>
Reference: [ADD + 91] <author> R. Ahmed, P. DeSmedt, W. Du, W. Kent, M. Ketabchi, W. Litwin, A. Rafii, and M. C. Shan. </author> <title> Pegasus heterogeneous multidatabase system. </title> <booktitle> IEEE Computer, </booktitle> <month> December </month> <year> 1991. </year>
Reference: [BDD + 95] <author> O. Boucelma, J. Dalrymple, M. Doherty, J. C. Franchitti, R. Hull, R. King, and G. Zhou. </author> <title> Incorporating Active and Multi-database-state Services into an OSA-Compliant Interoperability Framework. </title> <note> In The Collected Arcadia Papers, Second Edition. </note> <institution> University of California, Irvine, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: The Squirrel mediators implement a synthesis of several technologies, including query processing against virtual integrated views [LMR90], algorithms for updating materialized views [BLT86, GMS93, GL95, ZGHW95], the use of the active paradigm to implement those algorithms [CW91, Cha94], and the use of "active modules" to provide light-weight, customizable activeness <ref> [Dal95, BDD + 95] </ref>. A central construct used by Squirrel mediators to support integrated views is the notion of "View Decomposition Plan" (VDP). A VDP provides a systematic framework for synthesizing the above technologies in order to support materialized, virtual, and hybrid relations.
Reference: [BLT86] <author> J.A. Blakeley, P.-A. Larson, and F.W. Tompa. </author> <title> Efficiently updating materialized views. </title> <booktitle> In Proc. ACM SIGMOD Symp. on the Management of Data, </booktitle> <pages> pages 61-71, </pages> <year> 1986. </year>
Reference-contexts: The Squirrel mediators implement a synthesis of several technologies, including query processing against virtual integrated views [LMR90], algorithms for updating materialized views <ref> [BLT86, GMS93, GL95, ZGHW95] </ref>, the use of the active paradigm to implement those algorithms [CW91, Cha94], and the use of "active modules" to provide light-weight, customizable activeness [Dal95, BDD + 95]. A central construct used by Squirrel mediators to support integrated views is the notion of "View Decomposition Plan" (VDP).
Reference: [CGL + 96] <author> L.S. Colby, T. Griffin, L. Libkin, I.S. Mumick, and H. Trickery. </author> <title> Algorithms for deferred view maintenance. </title> <booktitle> In Proc. ACM SIGMOD Symp. on the Management of Data, </booktitle> <pages> pages 469-480, </pages> <year> 1996. </year>
Reference-contexts: The mechanism described above overlaps to certain extent with mechanisms developed in [ZGHW95] and <ref> [CGL + 96] </ref>. Reference [CGL + 96] establishes invariants between a source database, a view of that database which may be maintained using deferred updates, and deltas on the source database and view. The algorithm described above is compatible with these invariants. <p> The mechanism described above overlaps to certain extent with mechanisms developed in [ZGHW95] and <ref> [CGL + 96] </ref>. Reference [CGL + 96] establishes invariants between a source database, a view of that database which may be maintained using deferred updates, and deltas on the source database and view. The algorithm described above is compatible with these invariants. Reference [ZGHW95] considers warehoused views derived from a single source database.
Reference: [Cha94] <author> T.-P. Chang. </author> <title> On Incremental Update Propagation Between Object-Based Databases. </title> <type> PhD thesis, </type> <institution> University of Southern California, </institution> <address> Los Angeles, CA, </address> <year> 1994. </year>
Reference-contexts: The Squirrel mediators implement a synthesis of several technologies, including query processing against virtual integrated views [LMR90], algorithms for updating materialized views [BLT86, GMS93, GL95, ZGHW95], the use of the active paradigm to implement those algorithms <ref> [CW91, Cha94] </ref>, and the use of "active modules" to provide light-weight, customizable activeness [Dal95, BDD + 95]. A central construct used by Squirrel mediators to support integrated views is the notion of "View Decomposition Plan" (VDP).
Reference: [CW91] <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for incremental view maintenance. </title> <booktitle> In Proc. of Intl. Conf. on Very Large Data Bases, </booktitle> <pages> pages 577-589, </pages> <year> 1991. </year>
Reference-contexts: The Squirrel mediators implement a synthesis of several technologies, including query processing against virtual integrated views [LMR90], algorithms for updating materialized views [BLT86, GMS93, GL95, ZGHW95], the use of the active paradigm to implement those algorithms <ref> [CW91, Cha94] </ref>, and the use of "active modules" to provide light-weight, customizable activeness [Dal95, BDD + 95]. A central construct used by Squirrel mediators to support integrated views is the notion of "View Decomposition Plan" (VDP).
Reference: [Dal95] <author> J. Dalrymple. </author> <title> Extending Rule Mechanisms for the Construction of Interoperable Systems. </title> <type> PhD thesis, </type> <institution> University of Colorado, Boulder, </institution> <year> 1995. </year>
Reference-contexts: The Squirrel mediators implement a synthesis of several technologies, including query processing against virtual integrated views [LMR90], algorithms for updating materialized views [BLT86, GMS93, GL95, ZGHW95], the use of the active paradigm to implement those algorithms [CW91, Cha94], and the use of "active modules" to provide light-weight, customizable activeness <ref> [Dal95, BDD + 95] </ref>. A central construct used by Squirrel mediators to support integrated views is the notion of "View Decomposition Plan" (VDP). A VDP provides a systematic framework for synthesizing the above technologies in order to support materialized, virtual, and hybrid relations.
Reference: [DH84] <author> U. Dayal and H.Y. Hwang. </author> <title> View definition and generalization for database integration in a multidatabase system. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> SE-10(6):628-644, </volume> <year> 1984. </year>
Reference: [DHR96] <author> M. Doherty, R. Hull, and M. Rupawalla. </author> <title> Structures for manipulating proposed updates in object-oriented databases. </title> <booktitle> In Proc. ACM SIGMOD Symp. on the Management of Data, </booktitle> <pages> pages 306-317, </pages> <year> 1996. </year>
Reference-contexts: A delta can simultaneously contain atoms that refer to more than relation. Deltas have also been generalized to bags <ref> [DHR96] </ref>. Incremental updates in the update-queue and incremental updates computed during update propagation are represented as deltas. Two important operators are apply and smash. Given delta and database state db, apply (db; ) denotes the result of applying the atoms in to db.
Reference: [GHJ96] <author> S. Ghandeharizadeh, R. Hull, and D. Jacobs. Her-aclitus: </author> <title> Elevating deltas to be first-class citizens in a database programming language. </title> <journal> ACM Trans. on Database Systems, </journal> <note> 1996. To appear. Available via anonymous ftp at ftp://ftp.cs.colorado.edu//users/hull/hera-tech94-revised.ps. </note>
Reference-contexts: A Squirrel mediator processes these incremental updates and internal ones for a variety of purposes. This subsection introduces the notation and tools used by the mediator to manipulate such incremental updates. We use the Heraclitus paradigm <ref> [HJ91, GHJ96] </ref>, which elevates "deltas", or the differences between database states, to be first-class citizens in database programming languages.
Reference: [GJM96] <author> A. Gupta, H.V. Jagadish, </author> <title> and I.S. Mumick. Data integration using self-maintainable views. </title> <booktitle> In Proc. of Intl. Conf. on Extending Data Base Technology, </booktitle> <year> 1996. </year>
Reference-contexts: A view with fully materialized support has been termed "self-maintainable" in <ref> [GJM96] </ref>. The framework presented in this paper forms one aspect of the Squirrel project currently under way at the University of Colorado [ZHKF95, ZHK95]. The framework is based on a special class of mediators [Wie92], called Squirrel integration mediators.
Reference: [GL95] <author> T. Griffin and L. Libkin. </author> <title> Incremental maintenance of views with duplicates. </title> <booktitle> In Proc. ACM SIGMOD Symp. on the Management of Data, </booktitle> <pages> pages 328-339, </pages> <year> 1995. </year>
Reference-contexts: The Squirrel mediators implement a synthesis of several technologies, including query processing against virtual integrated views [LMR90], algorithms for updating materialized views <ref> [BLT86, GMS93, GL95, ZGHW95] </ref>, the use of the active paradigm to implement those algorithms [CW91, Cha94], and the use of "active modules" to provide light-weight, customizable activeness [Dal95, BDD + 95]. A central construct used by Squirrel mediators to support integrated views is the notion of "View Decomposition Plan" (VDP). <p> The rules follow the general spirit of previous works, mainly <ref> [GMS93, GL95] </ref>. Due to the space limitation, we present only one sample rule for relations defined with select/project/join (SPJ). The complete set of rules is presented in [ZHK95].
Reference: [GMS93] <author> A. Gupta, </author> <title> I.S. Mumick, and V.S. Subrahmanian. Maintaining views incrementally. </title> <booktitle> In Proc. ACM SIGMOD Symp. on the Management of Data, </booktitle> <pages> pages 157-166, </pages> <year> 1993. </year>
Reference-contexts: The Squirrel mediators implement a synthesis of several technologies, including query processing against virtual integrated views [LMR90], algorithms for updating materialized views <ref> [BLT86, GMS93, GL95, ZGHW95] </ref>, the use of the active paradigm to implement those algorithms [CW91, Cha94], and the use of "active modules" to provide light-weight, customizable activeness [Dal95, BDD + 95]. A central construct used by Squirrel mediators to support integrated views is the notion of "View Decomposition Plan" (VDP). <p> The rules follow the general spirit of previous works, mainly <ref> [GMS93, GL95] </ref>. Due to the space limitation, we present only one sample rule for relations defined with select/project/join (SPJ). The complete set of rules is presented in [ZHK95].
Reference: [HJ91] <author> R. Hull and D. Jacobs. </author> <title> Language constructs for programming active databases. </title> <booktitle> In Proc. of Intl. Conf. on Very Large Data Bases, </booktitle> <pages> pages 455-468, </pages> <year> 1991. </year>
Reference-contexts: A Squirrel mediator processes these incremental updates and internal ones for a variety of purposes. This subsection introduces the notation and tools used by the mediator to manipulate such incremental updates. We use the Heraclitus paradigm <ref> [HJ91, GHJ96] </ref>, which elevates "deltas", or the differences between database states, to be first-class citizens in database programming languages. <p> For the relational case, the smash 1 ! 2 can be computed by forming the union of 1 and 2 , and then deleting any element of 1 that conflicts with an element of 2 <ref> [HJ91] </ref>. Smash is also relatively easy to compute for bag deltas. An insertion atom +R ( ~ t) in is redundant for state db if ~ t is in R under db; and similarly for deletion atoms.
Reference: [HZ96] <author> R. Hull and G. Zhou. </author> <title> A framework for optimizing data integration using the materialized and virtual approaches. </title> <type> Technical report, </type> <institution> Computer Science Department, University of Colorado, </institution> <year> 1996. </year> <note> in preparation. </note>
Reference-contexts: Section 6 describes the three central algorithms used by Squirrel mediators to support hybrid integrated views. Section 7 shows that Squirrel mediators satisfy the consistency and freshness properties. Some future research directions are offered in Section 8. Due to space limitations, many details are omitted in this paper; see <ref> [HZ96] </ref>. T = r 1 ;r 3 ;s 1 ;s 2 ( r 4 =100 R 1 r 2 =s 1 s 3 &lt;50 S) 2 Motivating Examples and Intuitive Remarks This section presents three related examples to give a progressive overview of several key aspects of Squirrel mediators. <p> The language currently supported by Squirrel for specifying integrated views includes the relational algebra. We use an attribute-based form of the algebra. In the interest of clarity, in the discussion below, we do not consider the use of attribute-renaming (see <ref> [HZ96] </ref>). Although the view definition language is based on set semantics, some of the relations stored inside an integration mediator may be bags, in order to support our incremental maintenance algorithms; this occurs if the integrated view involves projection or union. Another part of the language specifies "object matching".
Reference: [LMR90] <author> W. Litwin, L. Mark, and N. Roussopolos. </author> <title> Interoperability of multiple autonomous databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 267-293, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: The discussion here is presented in terms of the relational model, and the general spirit of our techniques can be applied in the context of the object-oriented database model. The Squirrel mediators implement a synthesis of several technologies, including query processing against virtual integrated views <ref> [LMR90] </ref>, algorithms for updating materialized views [BLT86, GMS93, GL95, ZGHW95], the use of the active paradigm to implement those algorithms [CW91, Cha94], and the use of "active modules" to provide light-weight, customizable activeness [Dal95, BDD + 95].
Reference: [SBG + 81] <author> J. M. Smith, P. A. Bernstein, N. Goodman, U. Dayal, T. Landers, K.W.T. Lin, and E. Wong. </author> <title> Multi-base Integrating heterogenous distributed database systems. </title> <booktitle> In National Computer Conference, </booktitle> <pages> pages 487-499, </pages> <year> 1981. </year>
Reference: [T + 90] <author> G. Thomas et al. </author> <title> Heterogeneous distributed database systems for production use. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 237-266, </pages> <month> September </month> <year> 1990. </year>
Reference: [WHW89] <author> S. Widjojo, R. Hull, and D. Wile. </author> <title> Distributed Information Sharing using WorldBase. </title> <journal> IEEE Office Knowledge Engineering, </journal> <volume> 3(2) </volume> <pages> 17-26, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: T + 90, ADD + 91, ACHK93]. A complementary approach has emerged recently, that is based on storing the view in materialized form <ref> [WHW89, ZHKF95, ZHK95, ZGHW95] </ref>. In that approach, queries can be answered without accessing the source databases, and the materialized view is typically maintained via propagation of incremental updates.
Reference: [Wie92] <author> G. Wiederhold. </author> <booktitle> Mediators in the architecture of future information systems. IEEE Computer, </booktitle> <pages> pages 38-49, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: A view with fully materialized support has been termed "self-maintainable" in [GJM96]. The framework presented in this paper forms one aspect of the Squirrel project currently under way at the University of Colorado [ZHKF95, ZHK95]. The framework is based on a special class of mediators <ref> [Wie92] </ref>, called Squirrel integration mediators. Squirrel is a tool that can be used to generate these mediators from high-level specifications.
Reference: [ZGHW95] <author> Y. Zhuge, H. Garcia-Molina, J. Hammer, and J. Widom. </author> <title> View maintenance in a warehousing environment. </title> <booktitle> In Proc. ACM SIGMOD Symp. on the Management of Data, </booktitle> <pages> pages 316-327, </pages> <address> San Jose, California, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: T + 90, ADD + 91, ACHK93]. A complementary approach has emerged recently, that is based on storing the view in materialized form <ref> [WHW89, ZHKF95, ZHK95, ZGHW95] </ref>. In that approach, queries can be answered without accessing the source databases, and the materialized view is typically maintained via propagation of incremental updates. <p> The Squirrel mediators implement a synthesis of several technologies, including query processing against virtual integrated views [LMR90], algorithms for updating materialized views <ref> [BLT86, GMS93, GL95, ZGHW95] </ref>, the use of the active paradigm to implement those algorithms [CW91, Cha94], and the use of "active modules" to provide light-weight, customizable activeness [Dal95, BDD + 95]. A central construct used by Squirrel mediators to support integrated views is the notion of "View Decomposition Plan" (VDP). <p> The mechanism described above overlaps to certain extent with mechanisms developed in <ref> [ZGHW95] </ref> and [CGL + 96]. Reference [CGL + 96] establishes invariants between a source database, a view of that database which may be maintained using deferred updates, and deltas on the source database and view. The algorithm described above is compatible with these invariants. Reference [ZGHW95] considers warehoused views derived from <p> extent with mechanisms developed in <ref> [ZGHW95] </ref> and [CGL + 96]. Reference [CGL + 96] establishes invariants between a source database, a view of that database which may be maintained using deferred updates, and deltas on the source database and view. The algorithm described above is compatible with these invariants. Reference [ZGHW95] considers warehoused views derived from a single source database. The algorithm described in [ZGHW95] has to send compensating queries to the source, while our algorithm performs the compensation locally in the mediator. Unlike our algorithm, the algorithm in [ZGHW95] may have to repeatedly send out compensating queries, if the updates <p> The algorithm described above is compatible with these invariants. Reference <ref> [ZGHW95] </ref> considers warehoused views derived from a single source database. The algorithm described in [ZGHW95] has to send compensating queries to the source, while our algorithm performs the compensation locally in the mediator. Unlike our algorithm, the algorithm in [ZGHW95] may have to repeatedly send out compensating queries, if the updates in the source occurs very frequently. <p> The algorithm described above is compatible with these invariants. Reference <ref> [ZGHW95] </ref> considers warehoused views derived from a single source database. The algorithm described in [ZGHW95] has to send compensating queries to the source, while our algorithm performs the compensation locally in the mediator. Unlike our algorithm, the algorithm in [ZGHW95] may have to repeatedly send out compensating queries, if the updates in the source occurs very frequently. In fact, the algorithm may need to execute an arbitrary number of compensating queries without producing an answer to the initial query.
Reference: [ZHK95] <author> G. Zhou, R. Hull, and R. King. </author> <title> Generating data integration mediators that use materialization, </title> <note> 1995. To appear, Journal of Intelligent Information Systems. </note>
Reference-contexts: T + 90, ADD + 91, ACHK93]. A complementary approach has emerged recently, that is based on storing the view in materialized form <ref> [WHW89, ZHKF95, ZHK95, ZGHW95] </ref>. In that approach, queries can be answered without accessing the source databases, and the materialized view is typically maintained via propagation of incremental updates. <p> In general, (partially) materialized relations of the integrated view are maintained by incremental updates from the source databases. Two approaches for doing this are provided in our framework: (1) "fully materialized support" <ref> [ZHKF95, ZHK95] </ref>: materialize all needed auxiliary data, so that data sources do not have to be queried when processing the incremental updates; and (2) leave some or all of the auxiliary data virtual, and query selected source databases when processing the incremental update. <p> A view with fully materialized support has been termed "self-maintainable" in [GJM96]. The framework presented in this paper forms one aspect of the Squirrel project currently under way at the University of Colorado <ref> [ZHKF95, ZHK95] </ref>. The framework is based on a special class of mediators [Wie92], called Squirrel integration mediators. Squirrel is a tool that can be used to generate these mediators from high-level specifications. References [ZHKF95, ZHK95] describe a restricted form of Squirrel mediators, that support only fully materialized integrated views with full <p> this paper forms one aspect of the Squirrel project currently under way at the University of Colorado <ref> [ZHKF95, ZHK95] </ref>. The framework is based on a special class of mediators [Wie92], called Squirrel integration mediators. Squirrel is a tool that can be used to generate these mediators from high-level specifications. References [ZHKF95, ZHK95] describe a restricted form of Squirrel mediators, that support only fully materialized integrated views with full materialized support; they do not address the issue of virtual or hybrid integrated views. 481 The present paper substantially generalizes and ex-tends the work of [ZHKF95, ZHK95] by developing a framework for supporting <p> References <ref> [ZHKF95, ZHK95] </ref> describe a restricted form of Squirrel mediators, that support only fully materialized integrated views with full materialized support; they do not address the issue of virtual or hybrid integrated views. 481 The present paper substantially generalizes and ex-tends the work of [ZHKF95, ZHK95] by developing a framework for supporting hybrid materialized/virtual integrated views. In particular, we describe a generalized architecture for Squirrel mediators that supports hybrid integrated views, and we present the key algorithms used by these mediators. <p> Although the view definition language is based on set semantics, some of the relations stored inside an integration mediator may be bags, in order to support our incremental maintenance algorithms; this occurs if the integrated view involves projection or union. Another part of the language specifies "object matching". See <ref> [ZHKF95, ZHK95] </ref>. 5.1 Definition We now present the definitions of VDP and annotations for them. Formally, a VDP is a labeled dag V = (V; E; relation; source; def; Export) where V is a set of nodes, E is a set of edges over V , and such that: 1. <p> The rules follow the general spirit of previous works, mainly [GMS93, GL95]. Due to the space limitation, we present only one sample rule for relations defined with select/project/join (SPJ). The complete set of rules is presented in <ref> [ZHK95] </ref>. SPJ: Suppose a relation T in a VDP is defined with SPJ operators: T = p f ( p 1 f 1 R 1 1 g 1 : : : 1 g n1 p n f n R n ).
Reference: [ZHKF95] <author> G. Zhou, R. Hull, R. King, and J-C. Franchitti. </author> <title> Using object matching and materialization to integrate heterogeneous databases. </title> <booktitle> In Proc. of Third Intl. Conf. on Cooperative Information Systems (CoopIS-95), </booktitle> <address> Vienna, Austria, </address> <month> May </month> <year> 1995. </year> <month> 492 </month>
Reference-contexts: T + 90, ADD + 91, ACHK93]. A complementary approach has emerged recently, that is based on storing the view in materialized form <ref> [WHW89, ZHKF95, ZHK95, ZGHW95] </ref>. In that approach, queries can be answered without accessing the source databases, and the materialized view is typically maintained via propagation of incremental updates. <p> In general, (partially) materialized relations of the integrated view are maintained by incremental updates from the source databases. Two approaches for doing this are provided in our framework: (1) "fully materialized support" <ref> [ZHKF95, ZHK95] </ref>: materialize all needed auxiliary data, so that data sources do not have to be queried when processing the incremental updates; and (2) leave some or all of the auxiliary data virtual, and query selected source databases when processing the incremental update. <p> A view with fully materialized support has been termed "self-maintainable" in [GJM96]. The framework presented in this paper forms one aspect of the Squirrel project currently under way at the University of Colorado <ref> [ZHKF95, ZHK95] </ref>. The framework is based on a special class of mediators [Wie92], called Squirrel integration mediators. Squirrel is a tool that can be used to generate these mediators from high-level specifications. References [ZHKF95, ZHK95] describe a restricted form of Squirrel mediators, that support only fully materialized integrated views with full <p> this paper forms one aspect of the Squirrel project currently under way at the University of Colorado <ref> [ZHKF95, ZHK95] </ref>. The framework is based on a special class of mediators [Wie92], called Squirrel integration mediators. Squirrel is a tool that can be used to generate these mediators from high-level specifications. References [ZHKF95, ZHK95] describe a restricted form of Squirrel mediators, that support only fully materialized integrated views with full materialized support; they do not address the issue of virtual or hybrid integrated views. 481 The present paper substantially generalizes and ex-tends the work of [ZHKF95, ZHK95] by developing a framework for supporting <p> References <ref> [ZHKF95, ZHK95] </ref> describe a restricted form of Squirrel mediators, that support only fully materialized integrated views with full materialized support; they do not address the issue of virtual or hybrid integrated views. 481 The present paper substantially generalizes and ex-tends the work of [ZHKF95, ZHK95] by developing a framework for supporting hybrid materialized/virtual integrated views. In particular, we describe a generalized architecture for Squirrel mediators that supports hybrid integrated views, and we present the key algorithms used by these mediators. <p> Although the view definition language is based on set semantics, some of the relations stored inside an integration mediator may be bags, in order to support our incremental maintenance algorithms; this occurs if the integrated view involves projection or union. Another part of the language specifies "object matching". See <ref> [ZHKF95, ZHK95] </ref>. 5.1 Definition We now present the definitions of VDP and annotations for them. Formally, a VDP is a labeled dag V = (V; E; relation; source; def; Export) where V is a set of nodes, E is a set of edges over V , and such that: 1.
References-found: 24

