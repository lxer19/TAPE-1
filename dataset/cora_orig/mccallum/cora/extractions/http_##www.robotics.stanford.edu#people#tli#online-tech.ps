URL: http://www.robotics.stanford.edu/people/tli/online-tech.ps
Refering-URL: http://www.robotics.stanford.edu/people/tli/online.html
Root-URL: http://www.robotics.stanford.edu
Title: On-Line Manipulation Planning for Two Robot Arms in a Dynamic Environment  
Author: Tsai-Yen Li and Jean-Claude Latombe 
Address: Stanford, CA 94305, USA  
Affiliation: Robotics Laboratory, Department of Computer Science, Stanford University  
Abstract: In a constantly changing and partially unpredictable environment, robot motion planning must be on-line. The planner receives a continuous flow of information about occurring events and generates new plans, while previously planned motions are being executed. This paper describes an on-line planner for two cooperating arms whose task is to grab parts of various types on a conveyor belt and transfer them to their respective goals while avoiding collision with obstacles. Parts arrive on the belt in random order, at any time. Both goals and obstacles may be dynamically changed. This scenario is typical of manufacturing cells serving machine-tools, assembling products, or packaging objects. The proposed approach breaks the overall planning problem into subproblems, each involving a low-dimensional configuration or configurationfitime space, and orchestrates very fast primitives solving these subproblems. The resulting planner has been implemented and extensively tested in a simulated environment, as well as with a real dual-arm system. Its competitiveness has been evaluated against an oracle making (almost) the best decision at any one time; the results show that the planner compares extremely well. 
Abstract-found: 1
Intro-found: 1
Reference: [1] ||, <author> ControlShell: </author> <title> Object Oriented Framework for Real-Time Software - User's Manual, </title> <booktitle> Real-Time Innovations Inc., </booktitle> <address> Sunnyvale, CA, 4.2 edition, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: This software is integrated under ControlShell, which provides object-oriented tools for combining software components developed separately <ref> [1] </ref>. The five modules are implemented on several computers and communicate through a subscription-based network data sharing system called the Network Data Delivery Service (NDDS) [30].
Reference: [2] <author> R. Alami, T. Simeon, and J.P. Laumond, </author> <title> A Geometrical Approach to Planning Manipulation Tasks: The Case of Discrete Placements and Grasps, </title> <booktitle> Robotics Research 5, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990, </year> <pages> 453-459. </pages>
Reference-contexts: These paths lie in different subspaces of the composite C-space defined as the Cartesian product of the C-spaces of all robots and movable objects. Manipulation planning has been studied for a single robot in <ref> [2, 35] </ref> and for multiple robots in [18, 19, 20, 21]. The regrasping issue with one robot has been specifically investigated in [34]. 3 Scenario The scenario considered in this paper involves two robot arms, a conveyor belt, an overhead vision system, a working table, movable parts, and obstacles.
Reference: [3] <author> J. Barraquand and J.C. Latombe, </author> <title> Robot Motion Planning: A Distributed Representation Approach, </title> <journal> Int. J. of Rob. Res., </journal> <volume> 10(6), </volume> <month> Dec. </month> <year> 1991, </year> <pages> 628-649. </pages>
Reference-contexts: Various path planning algorithms based on this concept have been proposed [22]. A number of very fast planners have been implemented for robots with few degrees of freedom (usually, 3) <ref> [3, 4, 24] </ref>. A typical technique consists of exploring a uniform grid in C-space, using a best-first search algorithm guided by a goal-oriented potential field [3]. Reasonably efficient planners have also been developed for robots with many degrees of freedom (6 or more) [3, 9, 14, 15, 21]. <p> A number of very fast planners have been implemented for robots with few degrees of freedom (usually, 3) [3, 4, 24]. A typical technique consists of exploring a uniform grid in C-space, using a best-first search algorithm guided by a goal-oriented potential field <ref> [3] </ref>. Reasonably efficient planners have also been developed for robots with many degrees of freedom (6 or more) [3, 9, 14, 15, 21]. But these planners still take too much time to be used on-line; their time performance also lacks consistency. <p> A typical technique consists of exploring a uniform grid in C-space, using a best-first search algorithm guided by a goal-oriented potential field [3]. Reasonably efficient planners have also been developed for robots with many degrees of freedom (6 or more) <ref> [3, 9, 14, 15, 21] </ref>. But these planners still take too much time to be used on-line; their time performance also lacks consistency. Existing path planners can be used to facilitate off-line robot programming or to check the feasibility of future operations. <p> When the velocity of the robot is upper-bounded, the tangent must further point into a cone determined by the maximal velocity. Motion planning for several robots sharing the same space has been addressed in <ref> [3, 4, 8, 16] </ref>. Two approaches have been proposed. The centralized approach consists of treating the various robots as if they were one single robot, by considering the Cartesian product of their individual C-spaces [3, 4]. This space is called the composite C-space. <p> Motion planning for several robots sharing the same space has been addressed in [3, 4, 8, 16]. Two approaches have been proposed. The centralized approach consists of treating the various robots as if they were one single robot, by considering the Cartesian product of their individual C-spaces <ref> [3, 4] </ref>. This space is called the composite C-space. The forbidden region in this space is the set of all configurations where one robot intersects an obstacle or two robots intersect each other. <p> Indeed, there exist techniques that plan motions in such spaces much under the second on current workstations, while planning in spaces of dimension four or higher takes one or several orders of magnitude longer <ref> [3] </ref>. Reducing planning to even smaller spaces, if possible, would yield faster, but weaker primitives. The time gain would contribute little to the total efficiency of the robot system; but the greater weakness of the primitives would likely lead to missing opportunities. <p> The resolution along the orientation axis is such that when X rotates by one increment about its reference point, the point of X that undergoes the maximal displacement (i.e., the point in X the furthest away from the reference point) moves by approximately " <ref> [3] </ref>. 13 5.2 Planning a Grasp Motion for a Part on the Belt Let us now consider the grasp subtask of the task (X; A 1 ). X may either be a part arriving on the belt, or a part previously ungrasped at an intermediate location on the table.
Reference: [4] <author> J. Barraquand, B. Langlois, and J.C. Latombe, </author> <title> Numerical Potential Field Techniques for Robot Path Planning," </title> <journal> IEEE Tr. on Sys., Man, and Cyb., </journal> <volume> 22(2), </volume> <year> 1992, </year> <pages> 224-241. </pages>
Reference-contexts: Various path planning algorithms based on this concept have been proposed [22]. A number of very fast planners have been implemented for robots with few degrees of freedom (usually, 3) <ref> [3, 4, 24] </ref>. A typical technique consists of exploring a uniform grid in C-space, using a best-first search algorithm guided by a goal-oriented potential field [3]. Reasonably efficient planners have also been developed for robots with many degrees of freedom (6 or more) [3, 9, 14, 15, 21]. <p> When the velocity of the robot is upper-bounded, the tangent must further point into a cone determined by the maximal velocity. Motion planning for several robots sharing the same space has been addressed in <ref> [3, 4, 8, 16] </ref>. Two approaches have been proposed. The centralized approach consists of treating the various robots as if they were one single robot, by considering the Cartesian product of their individual C-spaces [3, 4]. This space is called the composite C-space. <p> Motion planning for several robots sharing the same space has been addressed in [3, 4, 8, 16]. Two approaches have been proposed. The centralized approach consists of treating the various robots as if they were one single robot, by considering the Cartesian product of their individual C-spaces <ref> [3, 4] </ref>. This space is called the composite C-space. The forbidden region in this space is the set of all configurations where one robot intersects an obstacle or two robots intersect each other.
Reference: [5] <author> M.S. Branicky and W.S. Newman, </author> <title> Rapid Computation of Configuration Space Obstacles, </title> <booktitle> Proc. IEEE Int. Conf. Rob. and Aut., </booktitle> <pages> 304-310, </pages> <year> 1990. </year>
Reference-contexts: In our implementation this improvement cut the time to compute an arm C-space bitmap by almost two orders of magnitude. Other efficient techniques to compute C-space bitmaps for articulated arms are proposed in <ref> [5, 26, 27] </ref>. Arm's CT-space: The 3D bitmap representing an arm's CT-space is computed one time slice at a time. The computation of the 2D bitmap in one time slice is done as above, only when the planner needs this time slice.
Reference: [6] <author> H.S. Chang and T.Y. Li, </author> <title> Assembly Maintainability Study with Motion Planning, </title> <type> Manuscript, </type> <year> 1994. </year>
Reference-contexts: For example, the path planner in [9] is used to compute collision-free paths of an 8-dof manipulator among cooling pipes in a nuclear plant. In [12] a planner generates paths of a 5-dof riveting machine to assemble portions of an airplane fuselage. The planner in <ref> [6] </ref> is used to 2 check for the maintainability of aircraft engines. Today, a number of commercial cad environments integrate off-line robot programming tools and some include automatic collision checkers and path planners. Such planners will soon be standard components of off-line robot programming systems.
Reference: [7] <author> J.J. Craig, </author> <title> Introduction to Robotics. Mechanics and Control, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1986. </year>
Reference-contexts: The arms must grab parts as they arrive on the belt and transfer them to specified goals on the table where, for example, they will form an assembled product. 3 The robot system is depicted in Fig. 1. It consists of two identical scara-type arms <ref> [7] </ref>, each having three links and four degrees of freedom. The first two links of each arm form a horizontal linkage with two revolute joints. The third link, which carries the gripper, translates up and down. Finally, the gripper can rotate about its vertical axis.
Reference: [8] <author> M. Erdmann and T. Lozano-Perez, </author> <title> On Multiple Moving Objects, </title> <journal> Algorithmica, </journal> <volume> 2(4), </volume> <year> 1987, </year> <pages> 477-521. </pages>
Reference-contexts: When the velocity of the robot is upper-bounded, the tangent must further point into a cone determined by the maximal velocity. Motion planning for several robots sharing the same space has been addressed in <ref> [3, 4, 8, 16] </ref>. Two approaches have been proposed. The centralized approach consists of treating the various robots as if they were one single robot, by considering the Cartesian product of their individual C-spaces [3, 4]. This space is called the composite C-space. <p> An alternative is the decoupled approach, which consists of planning for one robot at a time. In one technique, the robots whose motions have already been planned are treated as moving obstacles constraining the motions of the other robots <ref> [8] </ref>. This technique requires searching the C-space of the first robot and the CT-spaces of all other robots. Another technique, called velocity tuning, plans the path of each robot separately and then tunes the robots' velocities along their respective paths so that no two robots ever collide [16].
Reference: [9] <author> B. Faverjon and P. Tournassoud, </author> <title> A Practical Approach to Motion-Planning for Manipulators with Many Degrees of Freedom, </title> <booktitle> Robotics Research 5, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990, </year> <pages> 425-433. </pages>
Reference-contexts: A typical technique consists of exploring a uniform grid in C-space, using a best-first search algorithm guided by a goal-oriented potential field [3]. Reasonably efficient planners have also been developed for robots with many degrees of freedom (6 or more) <ref> [3, 9, 14, 15, 21] </ref>. But these planners still take too much time to be used on-line; their time performance also lacks consistency. Existing path planners can be used to facilitate off-line robot programming or to check the feasibility of future operations. <p> But these planners still take too much time to be used on-line; their time performance also lacks consistency. Existing path planners can be used to facilitate off-line robot programming or to check the feasibility of future operations. For example, the path planner in <ref> [9] </ref> is used to compute collision-free paths of an 8-dof manipulator among cooling pipes in a nuclear plant. In [12] a planner generates paths of a 5-dof riveting machine to assemble portions of an airplane fuselage.
Reference: [10] <author> K. Fujimura, </author> <title> Motion Planning in Dynamic Environments, </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1991. </year>
Reference-contexts: As such environments become more frequent in manufacturing, the need for more sophisticated planning tools increases. Motion planning in the presence of obstacles moving along known trajectories is a step toward dealing with a dynamic environment. It has been studied in particular in <ref> [10, 11, 32, 33] </ref>, where previous path planning methods have been extended to deal with the temporal aspect of this new problem. Motion plans are generated in the form of robot's trajectories, i.e., geometric paths indexed by time.
Reference: [11] <author> K. Fujimura, </author> <title> Motion Planning Amid Transient Obstacles, </title> <journal> Int. J. of Rob. Res., </journal> <volume> 13(5), </volume> <year> 1994, </year> <pages> 395-407. </pages>
Reference-contexts: As such environments become more frequent in manufacturing, the need for more sophisticated planning tools increases. Motion planning in the presence of obstacles moving along known trajectories is a step toward dealing with a dynamic environment. It has been studied in particular in <ref> [10, 11, 32, 33] </ref>, where previous path planning methods have been extended to deal with the temporal aspect of this new problem. Motion plans are generated in the form of robot's trajectories, i.e., geometric paths indexed by time.
Reference: [12] <author> L. Graux, P. Millies, P.L. Kociemba, and B. Langlois, </author> <title> Integration of a Path Generation Algorithm into Off-Line Programming of AIRBUS Panels, Aerospace Automated Fastening Conf. and Exp., </title> <type> SAE Tech. Paper 922404, </type> <month> Oct. </month> <year> 1992. </year> <month> 30 </month>
Reference-contexts: Existing path planners can be used to facilitate off-line robot programming or to check the feasibility of future operations. For example, the path planner in [9] is used to compute collision-free paths of an 8-dof manipulator among cooling pipes in a nuclear plant. In <ref> [12] </ref> a planner generates paths of a 5-dof riveting machine to assemble portions of an airplane fuselage. The planner in [6] is used to 2 check for the maintainability of aircraft engines.
Reference: [13] <author> L. Guibas, L. Ramshaw, and J. Stolfi, </author> <title> A Kinetic Framework for Computational Geometry, </title> <booktitle> Proc. FOCS, </booktitle> <year> 1983, </year> <pages> 100-111. </pages>
Reference-contexts: Any cross-section of this subset at a constant orientation of X is itself a convex polygon that is computed in time linear in the number of vertices of X i and O j <ref> [13, 25] </ref>. A polygon-filling function transforms this polygon into a 2D bitmap. The 3D C-space bitmap of X is constructed by stacking fixed-orientation 2D slices.
Reference: [14] <author> K.K. Gupta and Z. Guo, </author> <title> Motion Planning for Many Degrees of Freedom: Sequential Search with Backtracking, </title> <note> to appear in IEEE Tr. on Rob. and Aut.. </note>
Reference-contexts: A typical technique consists of exploring a uniform grid in C-space, using a best-first search algorithm guided by a goal-oriented potential field [3]. Reasonably efficient planners have also been developed for robots with many degrees of freedom (6 or more) <ref> [3, 9, 14, 15, 21] </ref>. But these planners still take too much time to be used on-line; their time performance also lacks consistency. Existing path planners can be used to facilitate off-line robot programming or to check the feasibility of future operations.
Reference: [15] <author> K.K. Gupta and X. Zhu, </author> <title> Practical Motion Planning for Many Degrees of Freedom: A Novel Approach Within Sequential Framework, </title> <booktitle> Proc. IEEE Int. Conf. Rob. and Aut., </booktitle> <address> San Diego, CA, </address> <year> 1994, </year> <pages> 2038-2043. </pages>
Reference-contexts: A typical technique consists of exploring a uniform grid in C-space, using a best-first search algorithm guided by a goal-oriented potential field [3]. Reasonably efficient planners have also been developed for robots with many degrees of freedom (6 or more) <ref> [3, 9, 14, 15, 21] </ref>. But these planners still take too much time to be used on-line; their time performance also lacks consistency. Existing path planners can be used to facilitate off-line robot programming or to check the feasibility of future operations.
Reference: [16] <author> K.K. Gupta and S.W Zucker, </author> <title> Toward Efficient Trajectory Planning: Path Velocity Decomposition, </title> <journal> Int. J. of Rob. Res., </journal> <volume> 5, </volume> <year> 1986, </year> <pages> 72-89. </pages>
Reference-contexts: When the velocity of the robot is upper-bounded, the tangent must further point into a cone determined by the maximal velocity. Motion planning for several robots sharing the same space has been addressed in <ref> [3, 4, 8, 16] </ref>. Two approaches have been proposed. The centralized approach consists of treating the various robots as if they were one single robot, by considering the Cartesian product of their individual C-spaces [3, 4]. This space is called the composite C-space. <p> This technique requires searching the C-space of the first robot and the CT-spaces of all other robots. Another technique, called velocity tuning, plans the path of each robot separately and then tunes the robots' velocities along their respective paths so that no two robots ever collide <ref> [16] </ref>. However, the decoupled approach is not complete, i.e., may fail to find a motion of the robots even if one exists. Manipulation planning extends motion planning by allowing robots to move objects.
Reference: [17] <author> L. Kavraki and J.C. Latombe, </author> <title> Randomized Preprocessing of Configuration Space for Fast Path Planning, </title> <booktitle> Proc. IEEE Int. Conf. Rob. and Aut., </booktitle> <address> San Diego, CA, </address> <year> 1994, </year> <pages> 2138-2145. </pages>
Reference: [18] <author> Y. Koga, K. Kondo, J. Kuffner, and J.C. Latombe, </author> <title> Planning Motions with Intentions, </title> <booktitle> Proc. </booktitle> <address> SIGGRAPH'94, </address> <year> 1994, </year> <pages> 395-408. </pages>
Reference-contexts: These paths lie in different subspaces of the composite C-space defined as the Cartesian product of the C-spaces of all robots and movable objects. Manipulation planning has been studied for a single robot in [2, 35] and for multiple robots in <ref> [18, 19, 20, 21] </ref>. The regrasping issue with one robot has been specifically investigated in [34]. 3 Scenario The scenario considered in this paper involves two robot arms, a conveyor belt, an overhead vision system, a working table, movable parts, and obstacles.
Reference: [19] <author> Y. Koga, T. Lastennet, T.Y. Li, and J.C. Latombe, </author> <title> Multi-Arm Manipulation Planning, </title> <booktitle> 9th Int. Symp. on Automation and Robotics in Construction, </booktitle> <address> Tokyo, </address> <year> 1992, </year> <pages> 281-288. </pages>
Reference-contexts: These paths lie in different subspaces of the composite C-space defined as the Cartesian product of the C-spaces of all robots and movable objects. Manipulation planning has been studied for a single robot in [2, 35] and for multiple robots in <ref> [18, 19, 20, 21] </ref>. The regrasping issue with one robot has been specifically investigated in [34]. 3 Scenario The scenario considered in this paper involves two robot arms, a conveyor belt, an overhead vision system, a working table, movable parts, and obstacles.
Reference: [20] <author> Y. Koga and J.C. Latombe, </author> <title> Experiments in Dual-Arm Manipulation Planning, </title> <booktitle> Proc. IEEE Int. Conf. Rob. and Aut., </booktitle> <address> Nice, France, </address> <year> 1992, </year> <pages> 2238-2245. </pages>
Reference-contexts: These paths lie in different subspaces of the composite C-space defined as the Cartesian product of the C-spaces of all robots and movable objects. Manipulation planning has been studied for a single robot in [2, 35] and for multiple robots in <ref> [18, 19, 20, 21] </ref>. The regrasping issue with one robot has been specifically investigated in [34]. 3 Scenario The scenario considered in this paper involves two robot arms, a conveyor belt, an overhead vision system, a working table, movable parts, and obstacles. <p> Planning for the deliver subtask is done like in Subsection 5.4. No hand-over operations are possible, but the planner may put down the part on the table to change an arm posture or swap grasps (see <ref> [20] </ref>). Fig. 5 shows a series of snapshots in which the two arms perform a coordinated motion generated by the planner to grasp the same long part and transfer it to its goal. The transfer requires ungrasping the part at an intermediate location to change the posture of both arms.
Reference: [21] <author> Y. Koga and J.C. Latombe, </author> <title> On Multi-Arm Manipulation Planning, </title> <booktitle> Proc. IEEE Int. Conf. Rob. and Aut., </booktitle> <address> San Diego, CA, </address> <year> 1994, </year> <pages> 945-952. </pages>
Reference-contexts: A typical technique consists of exploring a uniform grid in C-space, using a best-first search algorithm guided by a goal-oriented potential field [3]. Reasonably efficient planners have also been developed for robots with many degrees of freedom (6 or more) <ref> [3, 9, 14, 15, 21] </ref>. But these planners still take too much time to be used on-line; their time performance also lacks consistency. Existing path planners can be used to facilitate off-line robot programming or to check the feasibility of future operations. <p> These paths lie in different subspaces of the composite C-space defined as the Cartesian product of the C-spaces of all robots and movable objects. Manipulation planning has been studied for a single robot in [2, 35] and for multiple robots in <ref> [18, 19, 20, 21] </ref>. The regrasping issue with one robot has been specifically investigated in [34]. 3 Scenario The scenario considered in this paper involves two robot arms, a conveyor belt, an overhead vision system, a working table, movable parts, and obstacles. <p> This search is guided by a goal-oriented potential field similar to the NF2 function described in [22] and is restricted to the configurations of X where A 1 and/or A 2 can grasp X, as proposed in <ref> [21] </ref>. An alternative, which could save time-consuming hand-over operations, is to first restrict the search to the configurations of X where A 1 can grasp X; only if this search fails, the configurations reachable by A 2 would also be considered. <p> Furthermore, computing an entire bitmap is often not more time-consuming than performing a few explicit collision checks in the workspace. The idea of using precomputed bitmaps to accelerate collision checking is also used in <ref> [21, 23] </ref>. Part's C-space: The C-space bitmap for a part X represents the forbidden region created by the obstacles. We model both X and the obstacles as unions of convex polygons, fX i g i=1;2;::: and fO j g j=1;2;::: , respectively.
Reference: [22] <author> J.C. Latombe, </author> <title> Robot Motion Planning, </title> <publisher> Kluwer, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: A motion plan is then computed as a geometric path. A major concept produced by this research is the notion of the configuration space, or C-space, of a robot [25]. Various path planning algorithms based on this concept have been proposed <ref> [22] </ref>. A number of very fast planners have been implemented for robots with few degrees of freedom (usually, 3) [3, 4, 24]. A typical technique consists of exploring a uniform grid in C-space, using a best-first search algorithm guided by a goal-oriented potential field [3]. <p> This search is guided by a goal-oriented potential field similar to the NF2 function described in <ref> [22] </ref> and is restricted to the configurations of X where A 1 and/or A 2 can grasp X, as proposed in [21].
Reference: [23] <author> J.C. Latombe, </author> <title> A Fast Path Planner for a Car-Like Indoor Mobile Robot, </title> <booktitle> Proc. 9th Nat. Conf. Artif. Int., AAAI, </booktitle> <address> Anaheim, CA, </address> <year> 1991, </year> <pages> 659-665. </pages>
Reference-contexts: Furthermore, computing an entire bitmap is often not more time-consuming than performing a few explicit collision checks in the workspace. The idea of using precomputed bitmaps to accelerate collision checking is also used in <ref> [21, 23] </ref>. Part's C-space: The C-space bitmap for a part X represents the forbidden region created by the obstacles. We model both X and the obstacles as unions of convex polygons, fX i g i=1;2;::: and fO j g j=1;2;::: , respectively.
Reference: [24] <author> J. Lengyel, M. Reichert, B.R. Donald, and P. Greenberg, </author> <title> Real-Time Robot Motion Planning Using Rasterizing Computer Graphics Hardware, </title> <booktitle> Proc. </booktitle> <address> SIGGRAPH'90, Dallas, TX, </address> <year> 1990. </year>
Reference-contexts: Various path planning algorithms based on this concept have been proposed [22]. A number of very fast planners have been implemented for robots with few degrees of freedom (usually, 3) <ref> [3, 4, 24] </ref>. A typical technique consists of exploring a uniform grid in C-space, using a best-first search algorithm guided by a goal-oriented potential field [3]. Reasonably efficient planners have also been developed for robots with many degrees of freedom (6 or more) [3, 9, 14, 15, 21].
Reference: [25] <author> T. Lozano-Perez, </author> <title> Spatial Planning: A Configuration Space Approach, </title> <journal> IEEE Tr. on Comp., </journal> <volume> 32(2), </volume> <year> 1983, </year> <pages> 108-120. </pages>
Reference-contexts: Most of the research, however, has focused on off-line planning in static environments. A motion plan is then computed as a geometric path. A major concept produced by this research is the notion of the configuration space, or C-space, of a robot <ref> [25] </ref>. Various path planning algorithms based on this concept have been proposed [22]. A number of very fast planners have been implemented for robots with few degrees of freedom (usually, 3) [3, 4, 24]. <p> Any cross-section of this subset at a constant orientation of X is itself a convex polygon that is computed in time linear in the number of vertices of X i and O j <ref> [13, 25] </ref>. A polygon-filling function transforms this polygon into a 2D bitmap. The 3D C-space bitmap of X is constructed by stacking fixed-orientation 2D slices.
Reference: [26] <author> T. Lozano-Perez, </author> <title> Parallel Robot Motion Planning, </title> <booktitle> Proc. IEEE Int. Conf. Rob. and Aut., </booktitle> <address> Sacramento, CA, </address> <year> 1991, </year> <pages> 1000-1007. </pages>
Reference-contexts: In our implementation this improvement cut the time to compute an arm C-space bitmap by almost two orders of magnitude. Other efficient techniques to compute C-space bitmaps for articulated arms are proposed in <ref> [5, 26, 27] </ref>. Arm's CT-space: The 3D bitmap representing an arm's CT-space is computed one time slice at a time. The computation of the 2D bitmap in one time slice is done as above, only when the planner needs this time slice.
Reference: [27] <author> A.A. Maciejewski and J.J. Fox, </author> <title> Path Planning and the Topology of Configuration Space, </title> <journal> IEEE Tr. on Rob. and Aut., </journal> <volume> 9(4), </volume> <year> 1993, </year> <pages> 444-456. </pages>
Reference-contexts: In our implementation this improvement cut the time to compute an arm C-space bitmap by almost two orders of magnitude. Other efficient techniques to compute C-space bitmaps for articulated arms are proposed in <ref> [5, 26, 27] </ref>. Arm's CT-space: The 3D bitmap representing an arm's CT-space is computed one time slice at a time. The computation of the 2D bitmap in one time slice is done as above, only when the planner needs this time slice.
Reference: [28] <author> G. Pardo-Castellote, </author> <title> Experimental Integration of Planning and Control in a Distribited Robotic System, </title> <type> PhD thesis, </type> <institution> Dept. Electrical Eng., Stanford Univ., </institution> <address> CA, </address> <year> 1994. </year>
Reference-contexts: The integrated system comprises five major modules: the user interface, the on-line manipulation planner, the dual-arm robot control system, the real-time vision system, and the graphic simulator <ref> [28, 29] </ref>. Characteristic arrangements of LEDs are mounted on all objects of interest (arriving parts and obstacles); the overhead vision system senses these LEDs, identifies their arrangements, and computes the positions of the objects in real time.
Reference: [29] <author> G. Pardo-Castellote, T.Y. Li, Y. Koga, R.H. Cannon, J.C. Latombe, and S.A. Schneider, </author> <title> Experimental Integration of Planning in a Distributed Control System, </title> <booktitle> Proc. Int. Symp. on Experimental Rob., </booktitle> <address> Kyoto, </address> <month> Oct. </month> <year> 1993, </year> <pages> 217-222. </pages>
Reference-contexts: The integrated system comprises five major modules: the user interface, the on-line manipulation planner, the dual-arm robot control system, the real-time vision system, and the graphic simulator <ref> [28, 29] </ref>. Characteristic arrangements of LEDs are mounted on all objects of interest (arriving parts and obstacles); the overhead vision system senses these LEDs, identifies their arrangements, and computes the positions of the objects in real time.
Reference: [30] <author> G. Pardo-Castellote and S. Schneider, </author> <title> The Network Data Delivery Service: Real-Time Data Connectivity for Distributed Control Applications, </title> <booktitle> Proc. IEEE Int. Conf. Rob. and Aut., </booktitle> <address> San Diego, </address> <year> 1994, </year> <pages> 2870-2876. 31 </pages>
Reference-contexts: This software is integrated under ControlShell, which provides object-oriented tools for combining software components developed separately [1]. The five modules are implemented on several computers and communicate through a subscription-based network data sharing system called the Network Data Delivery Service (NDDS) <ref> [30] </ref>. In the current implementation, the user interface and the planner run on two different UNIX workstations, while the control and vision modules run on several VME-based real-time processors.
Reference: [31] <author> L.E. Pfeffer, </author> <title> The Design and Control of a Two-Armed, Cooperating, Flexible-Drivetrain Robot System, </title> <type> PhD thesis, </type> <institution> Stanford Univ., Stanford, </institution> <address> CA, </address> <year> 1993. </year>
Reference-contexts: This kind of improvement could benefit the planner even when the belt's velocity is nominal. 9 Connection to Robotic System System description: We have connected our planner with the dual-arm robotic system shown in Figure 6, which has been developed in the Aerospace Robotics Laboratory at Stanford <ref> [31] </ref>. The integrated system comprises five major modules: the user interface, the on-line manipulation planner, the dual-arm robot control system, the real-time vision system, and the graphic simulator [28, 29].
Reference: [32] <author> J.H. Reif and M. Sharir, </author> <title> Motion Planning in the Presence of Moving Obstacles, </title> <booktitle> Proc. FOCS, </booktitle> <year> 1985, </year> <pages> 144-154. </pages>
Reference-contexts: As such environments become more frequent in manufacturing, the need for more sophisticated planning tools increases. Motion planning in the presence of obstacles moving along known trajectories is a step toward dealing with a dynamic environment. It has been studied in particular in <ref> [10, 11, 32, 33] </ref>, where previous path planning methods have been extended to deal with the temporal aspect of this new problem. Motion plans are generated in the form of robot's trajectories, i.e., geometric paths indexed by time.
Reference: [33] <author> C. Shih, T. Lee, </author> <title> and W.A. Gruver, A Unified Approach for Robot Motion Planning With Moving Polyhedral Obstacles, </title> <journal> IEEE Tr. Sys., Man, and Cyb., </journal> <volume> 20, </volume> <year> 1990, </year> <pages> 903-315. </pages>
Reference-contexts: As such environments become more frequent in manufacturing, the need for more sophisticated planning tools increases. Motion planning in the presence of obstacles moving along known trajectories is a step toward dealing with a dynamic environment. It has been studied in particular in <ref> [10, 11, 32, 33] </ref>, where previous path planning methods have been extended to deal with the temporal aspect of this new problem. Motion plans are generated in the form of robot's trajectories, i.e., geometric paths indexed by time.
Reference: [34] <author> P. Tournassoud, T. Lozano-Perez, and E. Mazer, Regrasping, </author> <booktitle> Proc. IEEE Int. Conf. Rob. and Aut., </booktitle> <address> Raleigh, NC, </address> <year> 1987, </year> <pages> 1924-1928. </pages>
Reference-contexts: Manipulation planning has been studied for a single robot in [2, 35] and for multiple robots in [18, 19, 20, 21]. The regrasping issue with one robot has been specifically investigated in <ref> [34] </ref>. 3 Scenario The scenario considered in this paper involves two robot arms, a conveyor belt, an overhead vision system, a working table, movable parts, and obstacles.
Reference: [35] <author> G. Wilfong, </author> <title> Motion Planning in the Presence of Movable Obstacles, </title> <booktitle> Proc. ACM Symp. on Comp. Geometry, </booktitle> <year> 1988, </year> <pages> 279-288. 32 </pages>
Reference-contexts: These paths lie in different subspaces of the composite C-space defined as the Cartesian product of the C-spaces of all robots and movable objects. Manipulation planning has been studied for a single robot in <ref> [2, 35] </ref> and for multiple robots in [18, 19, 20, 21]. The regrasping issue with one robot has been specifically investigated in [34]. 3 Scenario The scenario considered in this paper involves two robot arms, a conveyor belt, an overhead vision system, a working table, movable parts, and obstacles.
References-found: 35

