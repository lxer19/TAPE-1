URL: ftp://theory.lcs.mit.edu/pub/tds/vehicle.ps.gz
Refering-URL: http://theory.lcs.mit.edu/~hbw/decelftp.html
Root-URL: 
Title: Correctness of Vehicle Control Systems A Case Study  
Author: H. B. Weinberg and Nancy Lynch 
Address: Cambridge, MA 02139, USA  
Affiliation: MIT Laboratory for Computer Science  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alur, C. Courcoubetis, T. Henzinger, P. Ho, X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> The algorithmic analysis of hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 3-34, </pages> <year> 1995. </year>
Reference-contexts: The hybrid I/O automaton model is an extension of the timed I/O automaton model of [17, 4], inspired by the phase transition system model of [19] and the similar hybrid system model of <ref> [1] </ref>. A HIOA is a (possibly) infinite state labelled transition system. The states of a HIOA are the valuations of a set of variables. Certain states are distinguished as start states. The transitions (steps) of a HIOA are of two types: discrete and continuous. <p> Phase transition systems are analogous to hybrid I/O automata: their transitions correspond to our discrete steps and their activities correspond to our trajectories. However, phase transition systems lack good support for composition and abstraction. The hybrid system model of <ref> [1] </ref> is similar to the phase transition system model except that it includes synchronization labels that correspond to our actions. This allows a notion of parallel composition. The hybrid system model differs from our HIOA model because it has no input/output distinction on either labels (actions) or variables.
Reference: [2] <author> R. Alur and D. Dill. </author> <title> Automata for modelling real-time systems. </title> <booktitle> In Proc. 17th ICALP Lecture Notes in Computer Science 443, </booktitle> <pages> pages 322-335. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: The development of models and verification methods for timing-based systems is an active research area within computer science. The timed I/O automaton model is similar, for example, to models of Alur and Dill <ref> [2] </ref>, of Lamport [10] and of Henzinger, Manna and Pnueli [9].
Reference: [3] <author> J. Frankel, L. Alvarez, R. Horowitz, and P. Li. </author> <title> Robust platoon maneuvers for AVHS. </title> <type> Manuscript, </type> <institution> Berkeley, </institution> <month> November 10, </month> <year> 1994. </year>
Reference-contexts: In [15], levels of abstraction are used to relate continuous and discrete control of a vehicle maneuver, as well as to relate derivative-based and function-based system descriptions. Safety assurance systems for automated transit are examined in [27]. Current work involves modelling the platoon join maneuver from the PATH project <ref> [3] </ref>, as well as continuing the project on safety assurance systems. The development of models and verification methods for timing-based systems is an active research area within computer science.
Reference: [4] <author> R. Gawlick, R. Segala, J. Sgaard-Andersen, and N. Lynch. </author> <title> Liveness in timed and untimed systems. </title> <type> Technical Report MIT/LCS/TR-587, </type> <institution> Laboratory for Computer Science, Mas-sachusetts Institute of Technology, </institution> <address> Cambridge, MA, 02139, </address> <month> December </month> <year> 1993. </year> <note> Condensed version in Serge Abiteloul and Eli Shamir, </note> <editor> editors, </editor> <booktitle> Proceedings of the 21st International Colloquim, ICALP94, volume 820 of Lecture Notes in Computer Science, </booktitle> <pages> pages 166-177, </pages> <address> Jerusalem, Israel, July 1994. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: We are especially concerned that the methods allow faithful representation of hybrid systems (including all components), and clear and scalable proofs of significant properties of these systems. The hybrid I/O automaton model is an extension of the timed I/O automaton model of <ref> [17, 4] </ref>, inspired by the phase transition system model of [19] and the similar hybrid system model of [1]. A HIOA is a (possibly) infinite state labelled transition system. The states of a HIOA are the valuations of a set of variables. Certain states are distinguished as start states. <p> This latter reference also includes examples from automated transportation. The full version of this work appears in [26]. 2 Hybrid I/O Automaton Model The hybrid I/O automaton model [16] is based on the timed I/O automaton model of <ref> [17, 4] </ref>, but it represents continuous behavior more explicitly. We give a brief summary here, and refer the reader to [16] for the details. A state of a HIOA is defined to be a valuation of a set of variables.
Reference: [5] <author> D. Godbole and J. Lygeros. </author> <title> Longitudinal control of the lead car of a platoon. </title> <type> California PATH Technical Memorandum 93-7, </type> <institution> Institute of Transportation Studies, University of Cali-fornia, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: Fourth and finally, the methods are not completely automatic. They require the user to supply invariants and simulations, which express key insights about the system and serve as useful documentation. Typical examples of automated transportation systems include the Raytheon Personal Rapid Transit System and the California PATH project <ref> [6, 5, 13] </ref>. In these hybrid systems, a number of computer-controlled vehicles share a network of tracks or highways. The digital part of the system is the computer vehicle controller and the analog part of the system consists of the vehicle, its engine, the guideway, and so forth. <p> It remains to apply these techniques to additional case studies in automated transportation, especially those with complex discrete activity. We are currently modelling multi-vehicle maneuvers arising in the California PATH project <ref> [6, 5, 13] </ref>. We are also extending the preliminary treatment of safety systems in [27] to handle additional safety checks. The related discipline of air traffic control should also provide some interesting case studies.
Reference: [6] <author> D. N. Godbole, J. Lygeros, and S. Sastry. </author> <title> Hierarchical hybrid control: A case study. Preliminary report for the California PATH program, </title> <institution> Institute of Transportation Studies, University of California, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: Fourth and finally, the methods are not completely automatic. They require the user to supply invariants and simulations, which express key insights about the system and serve as useful documentation. Typical examples of automated transportation systems include the Raytheon Personal Rapid Transit System and the California PATH project <ref> [6, 5, 13] </ref>. In these hybrid systems, a number of computer-controlled vehicles share a network of tracks or highways. The digital part of the system is the computer vehicle controller and the analog part of the system consists of the vehicle, its engine, the guideway, and so forth. <p> In these hybrid systems, a number of computer-controlled vehicles share a network of tracks or highways. The digital part of the system is the computer vehicle controller and the analog part of the system consists of the vehicle, its engine, the guideway, and so forth. In <ref> [6] </ref>, the control of the transportation system is described hierarchically the higher levels coordinate and determine strategy while the lowest level performs specific maneuvers. Our case study focuses on a single maneuver: the task of decelerating a vehicle to a target speed within a given distance. <p> It remains to apply these techniques to additional case studies in automated transportation, especially those with complex discrete activity. We are currently modelling multi-vehicle maneuvers arising in the California PATH project <ref> [6, 5, 13] </ref>. We are also extending the preliminary treatment of safety systems in [27] to handle additional safety checks. The related discipline of air traffic control should also provide some interesting case studies.
Reference: [7] <author> C. Heitmeyer and N. Lynch. </author> <title> The generalized railroad crossing: A case study in formal verification of real-time systems. </title> <booktitle> In Proceedings of the Real-Time Systems Symposium, </booktitle> <pages> pages 120-131, </pages> <address> San Juan, Puerto Rico, </address> <month> December </month> <year> 1994. </year> <note> IEEE. Full version in Technical Memo MIT/LCS/TM-511, </note> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <address> Cambridge, MA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: This case study is part of a larger project on modelling, verifying, and analyzing problems arising in automated transit systems. A survey of the early results of that project appears in [14]. A preliminary study of the Generalized Railroad Crossing problem appears in <ref> [7, 8] </ref>; this uses only the timed I/O automaton model, not the HIOA model. In [15], levels of abstraction are used to relate continuous and discrete control of a vehicle maneuver, as well as to relate derivative-based and function-based system descriptions.
Reference: [8] <author> C. Heitmeyer and N. Lynch. </author> <title> Formal verification of real-time systems using timed automata. </title> <editor> In C. Heitmeyer and D. Man-drioli, editors, </editor> <title> Formal Methods for Real-Time Computing, </title> <booktitle> Trends in Software, chapter 4, </booktitle> <pages> pages 83-106. </pages> <publisher> John Wiley & Sons Ltd, </publisher> <month> April </month> <year> 1996. </year>
Reference-contexts: This case study is part of a larger project on modelling, verifying, and analyzing problems arising in automated transit systems. A survey of the early results of that project appears in [14]. A preliminary study of the Generalized Railroad Crossing problem appears in <ref> [7, 8] </ref>; this uses only the timed I/O automaton model, not the HIOA model. In [15], levels of abstraction are used to relate continuous and discrete control of a vehicle maneuver, as well as to relate derivative-based and function-based system descriptions.
Reference: [9] <author> T. Henzinger, Z. Manna, and A. Pnueli. </author> <title> Timed transition systems. </title> <editor> In J. W. de Bakker, C. Huizing, and G. Rozenberg, editors, </editor> <booktitle> Proceedings of REX Workshop Real-Time: Theory in Practice, volume 600 of Lecture Notes in Comupter Science, </booktitle> <pages> pages 226-251. </pages> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1991. </year>
Reference-contexts: The development of models and verification methods for timing-based systems is an active research area within computer science. The timed I/O automaton model is similar, for example, to models of Alur and Dill [2], of Lamport [10] and of Henzinger, Manna and Pnueli <ref> [9] </ref>. In contrast to those formalisms, the development and use of the timed I/O automaton model has focused on compositional properties [24], implementation relations [17, 23], and semi-automated proof checking [12], with less emphasis on syntactic forms, temporal logics, and fully automatic analysis. <p> Just as timed I/O automata have been extended to hybrid I/O automata to treat hybrid systems, so have other real-time models. For example, the timed transition system model of <ref> [9] </ref> is extended to the phase transition system model in [19]. Phase transition systems are analogous to hybrid I/O automata: their transitions correspond to our discrete steps and their activities correspond to our trajectories. However, phase transition systems lack good support for composition and abstraction.
Reference: [10] <author> L. Lamport. </author> <title> The temporal logic of actions. </title> <type> Technical Report 79, </type> <institution> Digital Systems Research Center, </institution> <month> December 25 </month> <year> 1991. </year>
Reference-contexts: The development of models and verification methods for timing-based systems is an active research area within computer science. The timed I/O automaton model is similar, for example, to models of Alur and Dill [2], of Lamport <ref> [10] </ref> and of Henzinger, Manna and Pnueli [9]. In contrast to those formalisms, the development and use of the timed I/O automaton model has focused on compositional properties [24], implementation relations [17, 23], and semi-automated proof checking [12], with less emphasis on syntactic forms, temporal logics, and fully automatic analysis.
Reference: [11] <author> G. Leeb and N. Lynch. </author> <title> Proving safety properties of the steam boiler controller: Formal methods for industrial applications, a case study, </title> <booktitle> 1996. To appear in Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag series. </publisher>
Reference-contexts: Their emphasis was on the use of an extension of Dijkstra's weakest-precondition calculus to derive correct solutions. Other case studies in modelling hybrid systems include two analyses of steam boiler controllers one using timed I/O automaton methods <ref> [11] </ref> and another using the automated proof checker PVS [25] and a project using a variety of techniques to 2 model and verify controllers for aircraft landing gear [22]. This latter reference also includes examples from automated transportation.
Reference: [12] <author> V. Luchangco. </author> <title> Using simulation techniques to prove timing properties. </title> <type> Master's thesis, </type> <institution> Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology, </institution> <address> Cambridge, MA 02139, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: In contrast to those formalisms, the development and use of the timed I/O automaton model has focused on compositional properties [24], implementation relations [17, 23], and semi-automated proof checking <ref> [12] </ref>, with less emphasis on syntactic forms, temporal logics, and fully automatic analysis. Just as timed I/O automata have been extended to hybrid I/O automata to treat hybrid systems, so have other real-time models.
Reference: [13] <author> J. Lygeros and D. N. Godbole. </author> <title> An interface between continuous and discrete-event controllers for vehicle automation. </title> <institution> California PATH Research Report UCB-ITS-PRR-94-12, Institute of Transportation Studies, University of California, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: Fourth and finally, the methods are not completely automatic. They require the user to supply invariants and simulations, which express key insights about the system and serve as useful documentation. Typical examples of automated transportation systems include the Raytheon Personal Rapid Transit System and the California PATH project <ref> [6, 5, 13] </ref>. In these hybrid systems, a number of computer-controlled vehicles share a network of tracks or highways. The digital part of the system is the computer vehicle controller and the analog part of the system consists of the vehicle, its engine, the guideway, and so forth. <p> It remains to apply these techniques to additional case studies in automated transportation, especially those with complex discrete activity. We are currently modelling multi-vehicle maneuvers arising in the California PATH project <ref> [6, 5, 13] </ref>. We are also extending the preliminary treatment of safety systems in [27] to handle additional safety checks. The related discipline of air traffic control should also provide some interesting case studies.
Reference: [14] <author> N. Lynch. </author> <title> Modelling and verification of automated transit systems, using timed automata, invariants and simulations. </title> <editor> In R. Alur, T. Henzinger, and E. Sontag, editors, </editor> <title> Hybrid Systems III: Verification and Control (DIMACS/SYCON Workshop on Verification and Control of Hybrid Systems, </title> <address> New Brunswick, New Jersey, </address> <month> October </month> <year> 1995), </year> <booktitle> volume 1066 of Lecture Notes in Computer Science, </booktitle> <pages> pages 449-463. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: This case study is part of a larger project on modelling, verifying, and analyzing problems arising in automated transit systems. A survey of the early results of that project appears in <ref> [14] </ref>. A preliminary study of the Generalized Railroad Crossing problem appears in [7, 8]; this uses only the timed I/O automaton model, not the HIOA model.
Reference: [15] <author> N. Lynch. </author> <title> A three-level analysis of a simple acceleration maneuver, with uncertainties. </title> <booktitle> In Proceedings of the Third AMAST Workshop on Real-Time Systems, </booktitle> <pages> pages 1-22, </pages> <address> Salt Lake City, Utah, </address> <month> March </month> <year> 1996. </year> <month> 10 </month>
Reference-contexts: A survey of the early results of that project appears in [14]. A preliminary study of the Generalized Railroad Crossing problem appears in [7, 8]; this uses only the timed I/O automaton model, not the HIOA model. In <ref> [15] </ref>, levels of abstraction are used to relate continuous and discrete control of a vehicle maneuver, as well as to relate derivative-based and function-based system descriptions. Safety assurance systems for automated transit are examined in [27].
Reference: [16] <author> N. Lynch, R. Segala, F. Vaandrager, and H. B. Weinberg. </author> <title> Hy--brid I/O automata. </title> <editor> In R. Alur, T. Henzinger, and E. Son-tag, editors, </editor> <title> Hybrid Systems III: Verification and Control (DI-MACS/SYCON Workshop on Verification and Control of Hybrid Systems, </title> <address> New Brunswick, New Jersey, </address> <month> October </month> <year> 1995), </year> <booktitle> volume 1066 of Lecture Notes in Computer Science, </booktitle> <pages> pages 496-510. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: However, systems that combine both types of activity appear to require new methods. The development and application of such methods is an active area of current research. One formal tool that has recently been developed is the hybrid I/O automaton (HIOA) model <ref> [16] </ref>. In this case study, we show how the HIOA model can be used to specify and verify part of an automated transportation system a vehicle deceleration maneuver. The methods we use include computer-science-based techniques such as automaton composition, invariant assertions, and simulation mappings, as well as simple continuous analysis. <p> This latter reference also includes examples from automated transportation. The full version of this work appears in [26]. 2 Hybrid I/O Automaton Model The hybrid I/O automaton model <ref> [16] </ref> is based on the timed I/O automaton model of [17, 4], but it represents continuous behavior more explicitly. We give a brief summary here, and refer the reader to [16] for the details. A state of a HIOA is defined to be a valuation of a set of variables. <p> The full version of this work appears in [26]. 2 Hybrid I/O Automaton Model The hybrid I/O automaton model <ref> [16] </ref> is based on the timed I/O automaton model of [17, 4], but it represents continuous behavior more explicitly. We give a brief summary here, and refer the reader to [16] for the details. A state of a HIOA is defined to be a valuation of a set of variables.
Reference: [17] <author> N. Lynch and F. Vaandrager. </author> <title> Forward and backward simulations Part II: </title> <journal> Timing-based systems. Information and Computation. </journal> <note> To appear. Available now as Technical Memo MIT/LCS/TM-487.c, </note> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <address> Cambridge, MA 02139, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: We are especially concerned that the methods allow faithful representation of hybrid systems (including all components), and clear and scalable proofs of significant properties of these systems. The hybrid I/O automaton model is an extension of the timed I/O automaton model of <ref> [17, 4] </ref>, inspired by the phase transition system model of [19] and the similar hybrid system model of [1]. A HIOA is a (possibly) infinite state labelled transition system. The states of a HIOA are the valuations of a set of variables. Certain states are distinguished as start states. <p> The timed I/O automaton model is similar, for example, to models of Alur and Dill [2], of Lamport [10] and of Henzinger, Manna and Pnueli [9]. In contrast to those formalisms, the development and use of the timed I/O automaton model has focused on compositional properties [24], implementation relations <ref> [17, 23] </ref>, and semi-automated proof checking [12], with less emphasis on syntactic forms, temporal logics, and fully automatic analysis. Just as timed I/O automata have been extended to hybrid I/O automata to treat hybrid systems, so have other real-time models. <p> The hybrid system model differs from our HIOA model because it has no input/output distinction on either labels (actions) or variables. The methods of invariant assertions and simulation mappings are widely used in computer science. An overview of these methods, for untimed and timed systems, appears in <ref> [18, 17] </ref>. Another project involving formal modelling of train control systems, using computer science techniques, was carried out by Schneider and co-workers [20]. Their emphasis was on the use of an extension of Dijkstra's weakest-precondition calculus to derive correct solutions. <p> This latter reference also includes examples from automated transportation. The full version of this work appears in [26]. 2 Hybrid I/O Automaton Model The hybrid I/O automaton model [16] is based on the timed I/O automaton model of <ref> [17, 4] </ref>, but it represents continuous behavior more explicitly. We give a brief summary here, and refer the reader to [16] for the details. A state of a HIOA is defined to be a valuation of a set of variables.
Reference: [18] <author> N. Lynch and F. Vaandrager. </author> <title> Forward and backward simulations Part I: </title> <journal> Untimed systems. Information and Computation, </journal> <volume> 121(2) </volume> <pages> 214-233, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: The hybrid system model differs from our HIOA model because it has no input/output distinction on either labels (actions) or variables. The methods of invariant assertions and simulation mappings are widely used in computer science. An overview of these methods, for untimed and timed systems, appears in <ref> [18, 17] </ref>. Another project involving formal modelling of train control systems, using computer science techniques, was carried out by Schneider and co-workers [20]. Their emphasis was on the use of an extension of Dijkstra's weakest-precondition calculus to derive correct solutions.
Reference: [19] <author> O. Maler, Z. Manna, and A. Pnueli. </author> <title> From timed to hybrid systems. </title> <editor> In J. de Bakker, C. Huizing, W. de Roever, and G. Rozenberg, editors, </editor> <booktitle> REX Workshop on Real-Time: Theory in Practice, volume 600 of Lecture Notes in Computer Science, </booktitle> <pages> pages 447-484, </pages> <address> Mook, The Netherlands, June 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The hybrid I/O automaton model is an extension of the timed I/O automaton model of [17, 4], inspired by the phase transition system model of <ref> [19] </ref> and the similar hybrid system model of [1]. A HIOA is a (possibly) infinite state labelled transition system. The states of a HIOA are the valuations of a set of variables. Certain states are distinguished as start states. <p> Just as timed I/O automata have been extended to hybrid I/O automata to treat hybrid systems, so have other real-time models. For example, the timed transition system model of [9] is extended to the phase transition system model in <ref> [19] </ref>. Phase transition systems are analogous to hybrid I/O automata: their transitions correspond to our discrete steps and their activities correspond to our trajectories. However, phase transition systems lack good support for composition and abstraction.
Reference: [20] <author> K. Marzullo, F. B. Schneider, and N. Budhiraja. </author> <title> Derivation of sequential real-time, process control programs. </title> <editor> In A. M. van Tilborg and G. M. Koob, editors, </editor> <booktitle> Foundations of Real-Time Computing, </booktitle> <pages> pages 39-54. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: The methods of invariant assertions and simulation mappings are widely used in computer science. An overview of these methods, for untimed and timed systems, appears in [18, 17]. Another project involving formal modelling of train control systems, using computer science techniques, was carried out by Schneider and co-workers <ref> [20] </ref>. Their emphasis was on the use of an extension of Dijkstra's weakest-precondition calculus to derive correct solutions.
Reference: [21] <author> M. Merritt, F. Modugno, and M. Tuttle. </author> <title> Time constrained automata. </title> <editor> In J. C. M. Baeten and J. F. Goote, editors, CONCUR'91: </editor> <booktitle> 2nd International Conference on Concurrency Theory, volume 527 of Lecture Notes in Comupter Science, </booktitle> <pages> pages 408-423, </pages> <address> Amsterdam, The Netherlands, Aug. 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The ON task governs the transitions from idle to braking and the OFF task governs the transitions from braking to done. The notation used above is based on <ref> [21] </ref>. In order to convert this description to a HIOA, the time constraints for the tasks must be built into the automaton's states, transitions and trajectories.
Reference: [22] <author> S. Nadjm-Tehrani. </author> <title> Modelling and formal analysis of an aircraft landing gear system. </title> <booktitle> In Second European Workshop on Real-Time and Hybrid Systems, </booktitle> <pages> pages 239-246, </pages> <address> Grenoble, France, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Other case studies in modelling hybrid systems include two analyses of steam boiler controllers one using timed I/O automaton methods [11] and another using the automated proof checker PVS [25] and a project using a variety of techniques to 2 model and verify controllers for aircraft landing gear <ref> [22] </ref>. This latter reference also includes examples from automated transportation. The full version of this work appears in [26]. 2 Hybrid I/O Automaton Model The hybrid I/O automaton model [16] is based on the timed I/O automaton model of [17, 4], but it represents continuous behavior more explicitly.
Reference: [23] <author> J. Sgaard-Andersen. </author> <title> Correctness of Protocols in Distributed Systems. </title> <type> PhD thesis, </type> <institution> Technical University of Den-mark, Lyngby, Denmark, </institution> <month> December </month> <year> 1993. </year> <month> ID-TR: </month> <pages> 1993-131. </pages>
Reference-contexts: The timed I/O automaton model is similar, for example, to models of Alur and Dill [2], of Lamport [10] and of Henzinger, Manna and Pnueli [9]. In contrast to those formalisms, the development and use of the timed I/O automaton model has focused on compositional properties [24], implementation relations <ref> [17, 23] </ref>, and semi-automated proof checking [12], with less emphasis on syntactic forms, temporal logics, and fully automatic analysis. Just as timed I/O automata have been extended to hybrid I/O automata to treat hybrid systems, so have other real-time models.
Reference: [24] <author> F. Vaandrager and N. Lynch. </author> <title> Action transducers and timed automata. </title> <editor> In W. R. Cleaveland, editor, </editor> <booktitle> CONCUR '92: 3rd International Conference on Concurrency Theory, volume 630 of Lecture Notes in Computer Science, </booktitle> <pages> pages 436-455, </pages> <address> Stony Brook, NY, USA, August 1992. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: The timed I/O automaton model is similar, for example, to models of Alur and Dill [2], of Lamport [10] and of Henzinger, Manna and Pnueli [9]. In contrast to those formalisms, the development and use of the timed I/O automaton model has focused on compositional properties <ref> [24] </ref>, implementation relations [17, 23], and semi-automated proof checking [12], with less emphasis on syntactic forms, temporal logics, and fully automatic analysis. Just as timed I/O automata have been extended to hybrid I/O automata to treat hybrid systems, so have other real-time models.
Reference: [25] <author> J. Vitt and J. Hooman. </author> <title> Specification and verification of a real-time steam boiler system. </title> <booktitle> In Second European Workshop on Real-Time and Hybrid Systems, </booktitle> <pages> pages 205-208, </pages> <address> Grenoble, France, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Their emphasis was on the use of an extension of Dijkstra's weakest-precondition calculus to derive correct solutions. Other case studies in modelling hybrid systems include two analyses of steam boiler controllers one using timed I/O automaton methods [11] and another using the automated proof checker PVS <ref> [25] </ref> and a project using a variety of techniques to 2 model and verify controllers for aircraft landing gear [22]. This latter reference also includes examples from automated transportation.
Reference: [26] <author> H. Weinberg. </author> <title> Correctness of vehicle control systems: A case study. </title> <type> Master's thesis, </type> <institution> Department of Electrical Engineering and Computer Science, Mas-sachusetts Institute of Technology, </institution> <address> Cambridge, MA 02139, </address> <month> February </month> <year> 1996. </year> <note> Also, MIT/LCS/TR-685 and URL http://theory.lcs.mit.edu/tds/HBW-thesis.html. </note>
Reference-contexts: This latter reference also includes examples from automated transportation. The full version of this work appears in <ref> [26] </ref>. 2 Hybrid I/O Automaton Model The hybrid I/O automaton model [16] is based on the timed I/O automaton model of [17, 4], but it represents continuous behavior more explicitly. We give a brief summary here, and refer the reader to [16] for the details. <p> While not braking, the train has acceleration exactly 0. The variable now represents the current time; when using assertions to reason about the timing behavior of systems, it is convenient to have an explicit state variable that records the current time. At this point in <ref> [26] </ref>, we prove various fundamen Actions: Input: brakeOn and brakeOff Vars: Output: x 2 R, initially x = c s _x 2 R, initially _x = _c s x 2 R, initially x = c s b, a boolean, initially false now 2 R 0 , initially 0 Discrete Transitions: brakeOn: <p> The trajectories are simple there is no interesting continuous behavior in the controller, so time just passes without changing anything else. The entire system is modelled formally as the composition of the two HIOAs, TRAIN and ONESHOT, which we call ONESHOT-SYS. Correctness of ONESHOT At this point in <ref> [26] </ref>, we prove the correctness of the ONESHOT controller. In the pro cess of doing this, we prove a variety of properties about ONESHOT-SYS, almost all of which take the form of invariant assertions. <p> It has as a special case the upper bound needed in the safety property (note that c max is negative). In <ref> [26] </ref>, we demonstrate this invariant for each phase separately and combine the results into a global invariant. <p> Correctness of DEL-ONE-SHOT In <ref> [26] </ref> we give a complete proof of correctness of the DEL-ONE-SHOT controller. The proof is based on a simulation mapping from this case to the unbuffered case of Section 3 specifically, from DEL-ONE-SHOT-AND-BUF to ONESHOT.
Reference: [27] <author> H. B. Weinberg, N. Lynch, and N. Delisle. </author> <title> Verification of automated vehicle protection systems. </title> <editor> In R. Alur, T. Hen-zinger, and E. Sontag, editors, </editor> <title> Hybrid Systems III: Verification and Control (DIMACS/SYCON Workshop on Verification and Control of Hybrid Systems, </title> <address> New Brunswick, New Jersey, </address> <month> October </month> <year> 1995), </year> <booktitle> volume 1066 of Lecture Notes in Computer Science, </booktitle> <pages> pages 101-113. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <month> 11 </month>
Reference-contexts: In [15], levels of abstraction are used to relate continuous and discrete control of a vehicle maneuver, as well as to relate derivative-based and function-based system descriptions. Safety assurance systems for automated transit are examined in <ref> [27] </ref>. Current work involves modelling the platoon join maneuver from the PATH project [3], as well as continuing the project on safety assurance systems. The development of models and verification methods for timing-based systems is an active research area within computer science. <p> It remains to apply these techniques to additional case studies in automated transportation, especially those with complex discrete activity. We are currently modelling multi-vehicle maneuvers arising in the California PATH project [6, 5, 13]. We are also extending the preliminary treatment of safety systems in <ref> [27] </ref> to handle additional safety checks. The related discipline of air traffic control should also provide some interesting case studies. It also remains to integrate into our framework the techniques of relevant disciplines such as control theory.
References-found: 27

