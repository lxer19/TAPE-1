URL: http://www.cs.washington.edu/research/projects/spin/www/papers/WCS/language.ps
Refering-URL: http://www.cs.washington.edu/research/projects/spin/www/papers/index.html
Root-URL: 
Title: Language Support for Extensible Operating Systems  
Author: Wilson C. Hsieh, Marc E. Fiuczynski, Charles Garrett, Stefan Savage, David Becker, and Brian N. Bershad 
Abstract: We have identified three areas where language support for operating system extensibility is important: performance, safety, and expressive power. First, an extension language should support pointer-safe casting to avoid unnecessary copying of data. Second, an extension language must allow a caller to isolate untrusted code. Finally, an extension language should provide a vocabulary for describing interfaces, modules, and procedures in a first-class fashion. We present specific examples of these needs, and describe the changes to Modula-3 that we have made for our work in the SPIN operating system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B.N. Bershad, S. Savage, P. Pardyak, D. Becker, M. Fiuczynski, and E.G. Sirer. </author> <title> Protection is a Software Issue. </title> <booktitle> In Proceedings of the Fifth Workshop on Hot Topics in Operating Systems, </booktitle> <pages> pages 62-65, </pages> <address> Orcas Island, WA, </address> <month> May 4-5, </month> <year> 1995. </year>
Reference-contexts: SPIN relies on language facilities to protect the system from extensions (and extensions from each other). Extensions are written using the safe subset of Modula-3 [6], which enforces type safety. Relying on the language to enforce safe extension behavior is more efficient than relying on hardware mechanisms <ref> [1] </ref>, because much of the protection overhead is paid at compile-time or link-time. We have added new features to the safe subset of Modula-3, because it does not satisfy our requirements for performance and expressive power.
Reference: [2] <author> B.N. Bershad, S. Savage, P. Pardyak, E.G. Sirer, M. Fiuczynski, D. Becker, S. Eggers, and C. Chambers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the 15th Symposium on Operating Systems Principles, </booktitle> <pages> pages 267-284, </pages> <address> Copper Mountain, CO, </address> <month> December 3-6, </month> <year> 1995. </year>
Reference-contexts: 1 Introduction SPIN is an extensible operating system that allows untrusted applications to extend system services by dynamically linking extension code into its kernel <ref> [2] </ref>. These extensions directly access system services with procedure calls, and system resources via loads and stores. As a result, extensions do not incur costly address space switches when they interact with the kernel. SPIN relies on language facilities to protect the system from extensions (and extensions from each other).
Reference: [3] <author> D. D. Clark and D. L. Tennenhouse. </author> <title> Architectural Considerations for a New Generation of Protocols. </title> <booktitle> In Proceedings of the Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications 1990, </booktitle> <month> September </month> <year> 1990. </year>
Reference-contexts: For good performance, this interpretation should occur in place; that is, an operating system must avoid copying as much as possible, in order to deliver high performance networking <ref> [3] </ref>. Unsafe languages, such as C, provide the ability to cast data from one type to another. The safe subset of Modula-3, however, does not provide any means to cast data.
Reference: [4] <institution> Digital Equipment Corporation. Modula-2+Epsilon Language Specification, </institution> <month> March 20, </month> <year> 1991. </year>
Reference-contexts: Java also restricts casting to be pointer-safe in order to ensure safety. The Modula-2+epsilon <ref> [4] </ref> language, an extension to Modula-2+, provided a casting facility similar to VIEW.
Reference: [5] <author> M. Fiuczynski and B.N. Bershad. </author> <title> An Extensible Protocol Architecture for Application-Specific Networking. </title> <booktitle> In Proceedings of 1996 Winter USENIX, </booktitle> <address> San Diego, CA, </address> <month> January 22-26, </month> <year> 1996. </year>
Reference-contexts: Finally, the alignment of the input should agree with that of the target type; if alignment compatability is not known at compile-time, a check is performed at runtime. The code in Figure 1 illustrates how we use VIEW to interpret packets in our networking code <ref> [5] </ref>. We rely on Modula-3's WITH statement to create an alias, which allows a VIEW'ed array to be named without a copy. Inside the body of the WITH statement, the variable etherHeader is a well-typed alias for the packet's 2 MODULE Ether; IMPORT Mbuf, IP, Arp; ...
Reference: [6] <author> G. Nelson, </author> <title> editor. Systems Programming with Modula-3. Series in Innovative Technology. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1991. </year>
Reference-contexts: As a result, extensions do not incur costly address space switches when they interact with the kernel. SPIN relies on language facilities to protect the system from extensions (and extensions from each other). Extensions are written using the safe subset of Modula-3 <ref> [6] </ref>, which enforces type safety. Relying on the language to enforce safe extension behavior is more efficient than relying on hardware mechanisms [1], because much of the protection overhead is paid at compile-time or link-time. <p> An instance of RTCode.InterfaceType uniquely identifies a particular implementation of that interface at runtime. 1 The exception model of Modula-3 requires that each procedure explicitly state what exceptions it can raise, although a note on page 29 of the Modula-3 book <ref> [6] </ref> does imply the existence of an implicit exception. A statement on page 12 states that an implementation may reflect checked runtime errors as exceptions.
Reference: [7] <author> P. Pardyak, S. Savage, and B.N. Bershad. </author> <title> Language and Runtime Support for the Safe Dynamic Interposition of System Code, </title> <month> November </month> <year> 1996. </year>
Reference-contexts: We have also added a new generic procedure type called PROCANY to Modula-3, because we have found it necessary to write interfaces that operate on generic procedures. One example of such an interface is that of the SPIN dispatcher <ref> [7] </ref>. The dispatcher is responsible for binding events and their handlers, both of which are represented as procedures. As a result, the dispatcher must be able to accept generic procedures as arguments.
Reference: [8] <author> Sun Microsystems Computer Corporation. </author> <title> The Java Language Specification, </title> <note> version 1.0 beta edition, October 30, 1995. 7 </note>
Reference-contexts: Such questions are necessary to permit linkage operations to be authorized based on these relationships. Without the expressiveness provided by our new types, this interface could not be written in Modula-3. 5 Related Work The Java <ref> [8] </ref> language, although it has a syntax that resembles C and C++, is very similar in spirit to Modula-3. Java also restricts casting to be pointer-safe in order to ensure safety. The Modula-2+epsilon [4] language, an extension to Modula-2+, provided a casting facility similar to VIEW.
References-found: 8

