URL: http://www.eecs.umich.edu/techreports/cse/1994/CSE-TR-202-94.ps.gz
Refering-URL: http://www.eecs.umich.edu/home/techreports/cse94.html
Root-URL: http://www.eecs.umich.edu
Title: CSE-TR Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation  
Author: Michael A. Riepe, Joo P. Marques Silva, Karem A. Sakallah, Richard B. Brown - 
Address: Ann Arbor, Michigan 48109-2122fl USA  
Affiliation: THE UNIVERSITY OF MICHIGAN Computer Science and Engineering Divisionfl Department of Electrical Engineering and Computer Sciencefl  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> P. Agrawal, W.J. Dally, W.C. Fischer, H.V. Jagadish, A.S. Krishnakumar, R. Tutundjain. </author> <title> MARS: A Multiprocessor-Based Programmable Accelerator, </title> <booktitle> IEEE Design & Test of Computers , February 1987, </booktitle> <pages> pp. 2837. </pages>
Reference-contexts: Generally, though, the computed event times are only bounds actual event times if the 2 event/cycle assumption is violated. Historically, the highest performing logic simulation methods rely on custom hardware accel erators to boost performance several orders of magnitude beyond what is achievable with soft ware simulators <ref> [1, 2, 4, 9, 15, 17, 23, 33, 43] </ref>. More recently, hardware emulators based on field programmable gate arrays (FPGAs) [30] have become popular high-end alternatives because of their faster speeds and their reconfigurability. <p> During all other cy cles, , Start is disabled and the input ( V i i ) is combined with the current cumulative result stored in the output register. i 3 n = 1-bit wide bus 14-bit wide bus V 1 <ref> [1] </ref> V i [1] CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation also be used for synchronization in a multiprocessor implementation of Ravel-XL (see Section 7.3). 4.4 Pipeline Design For a typical circuit, with many more gates than synchronizers, simulation code based on the above instruction set is <p> During all other cy cles, , Start is disabled and the input ( V i i ) is combined with the current cumulative result stored in the output register. i 3 n = 1-bit wide bus 14-bit wide bus V 1 <ref> [1] </ref> V i [1] CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation also be used for synchronization in a multiprocessor implementation of Ravel-XL (see Section 7.3). 4.4 Pipeline Design For a typical circuit, with many more gates than synchronizers, simulation code based on the above instruction set is clearly dominated by <p> Numbers reported here, for a single-board system programmed for a 2-phase multiple-delay algorithm and running at 10MHz <ref> [1, page 35] </ref>, are about an order of magnitude slower than Ravel-XL. This system is easily scalable using multiple boards in parallel, and the authors expect an almost linear increase in speed and capacity with a multi-board system. <p> Indeed, many of the faster logic simulation hardware accelerators use parallel techniques <ref> [1, 2, 9, 15, 17, 33, 43] </ref>. Ravel-XL was designed with support for multi-processing in mind. Multiple Ravel-XL boards can be placed on a single backplane and one design partitioned among these boards. Synchronization can be handled in one of two ways.
Reference: [2] <author> P. Agrawal, W. J. Dally. </author> <title> A Hardware Logic Simulation System, </title> <journal> IEEE Trans. on Computer-Aided Design , January 1990, </journal> <pages> pp. </pages> <year> 1929. </year>
Reference-contexts: Generally, though, the computed event times are only bounds actual event times if the 2 event/cycle assumption is violated. Historically, the highest performing logic simulation methods rely on custom hardware accel erators to boost performance several orders of magnitude beyond what is achievable with soft ware simulators <ref> [1, 2, 4, 9, 15, 17, 23, 33, 43] </ref>. More recently, hardware emulators based on field programmable gate arrays (FPGAs) [30] have become popular high-end alternatives because of their faster speeds and their reconfigurability. <p> Indeed, many of the faster logic simulation hardware accelerators use parallel techniques <ref> [1, 2, 9, 15, 17, 33, 43] </ref>. Ravel-XL was designed with support for multi-processing in mind. Multiple Ravel-XL boards can be placed on a single backplane and one design partitioned among these boards. Synchronization can be handled in one of two ways.
Reference: [3] <author> Z. Barzilai, J.L. Carter, B. K. Rosen, J.D. Rutledge. </author> <title> HSSA High-Speed Simulator, </title> <journal> IEEE Trans. on Computer-Aided Design , July 1987, </journal> <pages> pp. 601617. </pages>
Reference-contexts: The simplest logic simulators incorporate only two-valued logic models and make no attempt CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation to simulate circuit timing (so-called zero-delay models) <ref> [3, 40, 41] </ref>.
Reference: [4] <author> T. Blank. </author> <title> A Survey of Hardware Accelerators Used in Computer-Aided Design, </title> <booktitle> IEEE Design & Test , August 1984, </booktitle> <pages> pp. 2138. </pages>
Reference-contexts: Generally, though, the computed event times are only bounds actual event times if the 2 event/cycle assumption is violated. Historically, the highest performing logic simulation methods rely on custom hardware accel erators to boost performance several orders of magnitude beyond what is achievable with soft ware simulators <ref> [1, 2, 4, 9, 15, 17, 23, 33, 43] </ref>. More recently, hardware emulators based on field programmable gate arrays (FPGAs) [30] have become popular high-end alternatives because of their faster speeds and their reconfigurability.
Reference: [5] <author> R. K. Brayton, R. Rudell, A. Sangiovanni-Vincentelli, and A. R. Wang, </author> <title> MIS: A Multiple-Level Logic Optimization System, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Despite promising advances over the last few years in correct-by-construction logic synthesis <ref> [5] </ref> and formal (functional) verification [8], logic simulation has yet to be dislodged from its role as an indispensable method for design verification of large digital systems.
Reference: [6] <author> M. Breuer, A. Friedman. </author> <title> Diagnosis and Reliable Design of Digital Systems, </title> <publisher> Computer Science Press Inc., </publisher> <address> Woodland Hills, CA. </address> <year> 1976. </year>
Reference: [7] <author> F. Brglez, D. Bryan, and K. Kozminski. </author> <title> Combinational Profiles of Sequential Benchmark Circuits, </title> <booktitle> in Proc. </booktitle> <address> ISCAS89, </address> <year> 1989. </year>
Reference-contexts: For these simulators the EGPS figures are computed directly from experimental run-times using the ISCAS-89 sequential benchmark circuit suite <ref> [7] </ref> with sequences of randomly-generated input patterns. Experiments performed with the Verilog-HDL model of Ravel-XL allow a direct comparison to be made between Ravel-XL and the other software simulators.
Reference: [8] <author> M. C. Browne, E. M. Clarke, D. L. Dill, and B. Mishra, </author> <title> Automatic Verification of Sequential Circuits Using Temporal Logic, </title> <journal> IEEE Transactions on Computers 1044, </journal> <year> 1986. </year>
Reference-contexts: 1 Introduction Despite promising advances over the last few years in correct-by-construction logic synthesis [5] and formal (functional) verification <ref> [8] </ref>, logic simulation has yet to be dislodged from its role as an indispensable method for design verification of large digital systems.
Reference: [9] <author> T. Burggraff, A. Love, R. Malm, A. Rudy. </author> <title> The IBM Los Gatos Logic Simulation Machine Hardware, </title> <booktitle> in Proc. IEEE Intl Conf. Computer Design , October 1983, </booktitle> <pages> pp. 584587. </pages>
Reference-contexts: Generally, though, the computed event times are only bounds actual event times if the 2 event/cycle assumption is violated. Historically, the highest performing logic simulation methods rely on custom hardware accel erators to boost performance several orders of magnitude beyond what is achievable with soft ware simulators <ref> [1, 2, 4, 9, 15, 17, 23, 33, 43] </ref>. More recently, hardware emulators based on field programmable gate arrays (FPGAs) [30] have become popular high-end alternatives because of their faster speeds and their reconfigurability. <p> It is also compared against several LC accelerators: an unnamed system by Zasio et. al. [42] and the family of IBM simulation engines (LSM <ref> [9] </ref>, YSE [15], and EVE [17]). For these systems the peak performance figures are estimated from published simulation data. Since the activity levels in these simulations are not given, the EGPS figures for ED simulators are estimated assuming a 10% activity level, which is typical for circuits we have tested. <p> Indeed, many of the faster logic simulation hardware accelerators use parallel techniques <ref> [1, 2, 9, 15, 17, 33, 43] </ref>. Ravel-XL was designed with support for multi-processing in mind. Multiple Ravel-XL boards can be placed on a single backplane and one design partitioned among these boards. Synchronization can be handled in one of two ways.
Reference: [10] <author> T.M. Burks, K. A. Sakallah. </author> <title> Min-Max Linear Programming and the Timing Analysis of Digital Circuits, </title> <booktitle> in Proc. International Conference on Computer-Aided Design 152155. </booktitle>
Reference: [11] <institution> Cadence Design Systems Inc. </institution> <note> Verilog-XL Reference Manual, Version 1.6, </note> <year> 1991. </year>
Reference-contexts: It is implemented in a 0.8-micron 3-metal CMOS process, and the final dimensions of the chip are approximately 1.18 x 1.18 centimeters on a side. PLACE CHIP PLOT HERE CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation model written in the Verilog Hardware Description Language (HDL) <ref> [11] </ref>. This model was manually partitioned into distinct datapath and control sections to aid the subsequent design synthesis phase. Physical design was performed using the EPOCH silicon compiler [12]. <p> Where appropriate, we dis cuss multi-board system performance, and note which systems are scalable. 6.1 Benchmark Results We benchmarked several software simulators including Verilog-XL, a Verilog interpreter from Cadence Design Systems <ref> [11] </ref>, VCS, a Verilog compiler from Chronologic Simulation [13], and the software implementation of Ravel [31,32,37]. For these simulators the EGPS figures are computed directly from experimental run-times using the ISCAS-89 sequential benchmark circuit suite [7] with sequences of randomly-generated input patterns.
Reference: [12] <institution> Cascade Design Automation Corp. EPOCH Designers Handbook, EDH-1.0Beta, </institution> <year> 1992. </year>
Reference-contexts: This model was manually partitioned into distinct datapath and control sections to aid the subsequent design synthesis phase. Physical design was performed using the EPOCH silicon compiler <ref> [12] </ref>. EPOCH receives its input in a synthesizable subset of Verilog HDL: behavioral datapath elements were manually converted from the behavioral model into netlists of SSI and MSI macro cells defined in the EPOCH library, while behavioral control modules were input directly from the architectural models.
Reference: [13] <institution> Chronologic Simulation, </institution> <note> VCS Reference Manual, version 2.0, </note> <year> 1993. </year>
Reference-contexts: Where appropriate, we dis cuss multi-board system performance, and note which systems are scalable. 6.1 Benchmark Results We benchmarked several software simulators including Verilog-XL, a Verilog interpreter from Cadence Design Systems [11], VCS, a Verilog compiler from Chronologic Simulation <ref> [13] </ref>, and the software implementation of Ravel [31,32,37]. For these simulators the EGPS figures are computed directly from experimental run-times using the ISCAS-89 sequential benchmark circuit suite [7] with sequences of randomly-generated input patterns.
Reference: [14] <author> J. Crapuchettes. </author> <title> TURBOchannel Interface ASIC Functional Specification, Revision 0.6 (preliminary), </title> <institution> Digital Equipment Corporation, TRI/ADD Program, </institution> <month> August 31, </month> <year> 1992. </year>
Reference-contexts: A prototype system board, shown in Figure 1, will consist of the Ravel-XL chip, external code and data mem ories, an interface to the Digital Equipment Corporation (DEC) TURBOchannel bus backplane [16] realized with the DEC TcIA (TURBOchannel Interface ASIC) chip <ref> [14] </ref>, and a small number of glue-logic chips, initialization ROMs, and bus-driver chips. It is designed to operate as a peripheral device on a DEC workstation. The remainder of this paper is organized as follows. Section 2 reviews the Ravel simulation model and algorithm.
Reference: [15] <author> M. Denneau. </author> <title> The Yorktown Simulation Engine, </title> <booktitle> in Proc. 19th ACM/IEEE Design Automation Conference , June 1992, </booktitle> <pages> pp. 5559. </pages>
Reference-contexts: Generally, though, the computed event times are only bounds actual event times if the 2 event/cycle assumption is violated. Historically, the highest performing logic simulation methods rely on custom hardware accel erators to boost performance several orders of magnitude beyond what is achievable with soft ware simulators <ref> [1, 2, 4, 9, 15, 17, 23, 33, 43] </ref>. More recently, hardware emulators based on field programmable gate arrays (FPGAs) [30] have become popular high-end alternatives because of their faster speeds and their reconfigurability. <p> It is also compared against several LC accelerators: an unnamed system by Zasio et. al. [42] and the family of IBM simulation engines (LSM [9], YSE <ref> [15] </ref>, and EVE [17]). For these systems the peak performance figures are estimated from published simulation data. Since the activity levels in these simulations are not given, the EGPS figures for ED simulators are estimated assuming a 10% activity level, which is typical for circuits we have tested. <p> Indeed, many of the faster logic simulation hardware accelerators use parallel techniques <ref> [1, 2, 9, 15, 17, 33, 43] </ref>. Ravel-XL was designed with support for multi-processing in mind. Multiple Ravel-XL boards can be placed on a single backplane and one design partitioned among these boards. Synchronization can be handled in one of two ways.
Reference: [16] <institution> Digital Equipment Corporation. TURBOchannel Specifications-Version 2C, Digital Equipment Corporation, TRI/ADD Program, EK-TCDEV-DK-004, </institution> <month> September </month> <year> 1991. </year>
Reference-contexts: A prototype system board, shown in Figure 1, will consist of the Ravel-XL chip, external code and data mem ories, an interface to the Digital Equipment Corporation (DEC) TURBOchannel bus backplane <ref> [16] </ref> realized with the DEC TcIA (TURBOchannel Interface ASIC) chip [14], and a small number of glue-logic chips, initialization ROMs, and bus-driver chips. It is designed to operate as a peripheral device on a DEC workstation. The remainder of this paper is organized as follows.
Reference: [17] <author> L. N. Dunn. </author> <title> IBMs Engineering Design System Support for VLSI Design and Verification, CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation IEEE Design & Test of Computers , February 1984, </title> <journal> pp. </journal> <volume> 3040. </volume>
Reference-contexts: Generally, though, the computed event times are only bounds actual event times if the 2 event/cycle assumption is violated. Historically, the highest performing logic simulation methods rely on custom hardware accel erators to boost performance several orders of magnitude beyond what is achievable with soft ware simulators <ref> [1, 2, 4, 9, 15, 17, 23, 33, 43] </ref>. More recently, hardware emulators based on field programmable gate arrays (FPGAs) [30] have become popular high-end alternatives because of their faster speeds and their reconfigurability. <p> It is also compared against several LC accelerators: an unnamed system by Zasio et. al. [42] and the family of IBM simulation engines (LSM [9], YSE [15], and EVE <ref> [17] </ref>). For these systems the peak performance figures are estimated from published simulation data. Since the activity levels in these simulations are not given, the EGPS figures for ED simulators are estimated assuming a 10% activity level, which is typical for circuits we have tested. <p> Indeed, many of the faster logic simulation hardware accelerators use parallel techniques <ref> [1, 2, 9, 15, 17, 33, 43] </ref>. Ravel-XL was designed with support for multi-processing in mind. Multiple Ravel-XL boards can be placed on a single backplane and one design partitioned among these boards. Synchronization can be handled in one of two ways.
Reference: [18] <author> M. Farmwald, D. Mooring. </author> <title> A Fast Path to One Memory, </title> <journal> IEEE Spectrum , October 1992, </journal> <pages> pp 50-51. </pages>
Reference-contexts: This will require the use of technology such as a multi-port cache in the data memory and a faster interface to the code memory, such as a Rambus RDRAM <ref> [18] </ref>. As the simulation speed increases the write-through cache will quickly limit performance, requiring a more complex caching scheme, in conjunction with deeper write-buffers, to limit the frequency of off-chip writes. Other improvements that are planned include the ability to model gated-clocks and tri-state busses.
Reference: [19] <author> J.L. Hennessy, D.A. Patterson. </author> <title> Computer Architecture, a Quantitative Approach, </title> <publisher> Morgan Kaufmann Publishers Inc., </publisher> <address> San Mateo, Ca. </address> <year> 1990. </year>
Reference-contexts: Three of the simulation instructions are CISC-style instructions that are in one-to-one correspondence with the equations for gate evaluation, synchronizer evaluation and phase shifting. To reduce code length and still allow full access to a 32-bit word-addressable address space these instructions use a base-displacement addressing mode <ref> [19] </ref>: the address of a word-aligned operand is obtained by concatenating a 16-bit value from a base register with the 16-bit positive displacement field in the instruction. The chip has 17 16-bit base registers that are implicitly paired with the input and output operands of gates and synchronizers. <p> This goal amounts to reducing a given normalized memory cycle time which may be &gt;1, to an effective normalized memory cycle time To obtain = 1 when the memory system must be organized so that it matches the pat terns of locality in the code and data streams <ref> [19] </ref>. Locality is expressed in two ways: temporal and spatial. The split memory system implied by our pipeline design gives us the opportunity to optimize the code and data memory architectures differently. <p> In our discussion of the data cache we will address all four of the main cache parameters: cache size, associativity, line-size, and write policy. Our analysis will decompose the miss rate into its three components: compulsory misses, capacity misses, and conict misses <ref> [19] </ref>, and discuss the effects of our design decisions on each. Temporal locality in the data stream results from the re-use of output signal waveforms in the evaluation of fanout gates, and is strongly dependent on the order in which the instructions are scheduled.
Reference: [20] <author> G. Kane, J. Heinrich. </author> <title> MIPS RISC Architecture, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1992. </year>
Reference-contexts: J J J J 2.00 4.00 6.00 0 5000 10000 15000 20000 25000 Cycles circuit size (# gates) cycles/gate J cycles/input CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation 6.1.2 Software Simulators In its current implementation Ravel generates a simulation program in the MIPS R3000 instruction set <ref> [20] </ref>. The table below lists the number of machine instructions generated for a typical gate: At an ideal CPI of 1 on the benchmark workstation, and assuming an average of 3-inputs/gate, Ravel runs at about 100 CPG.
Reference: [21] <author> Y. S. Lee, P. M. Maurer. </author> <title> Two New Techniques for Compiled Multi-Delay Logic Simulation, </title> <booktitle> in Proc. 29th Design Automation Conference </booktitle>
Reference-contexts: This allows more complex timing models, such as unit or assigned (multiple) delay, to be used but at the cost of many, often unnecessary, evaluations per gate. Thus, such approaches have little chance of obtaining competitive simulation speed <ref> [21] </ref>. Because circuits with asynchronous feedback cannot be levelized, ED algorithms handle circuits with asynchronous feedback much more naturally than LC methods. However, iterative LC evaluation techniques can be used to simulate an asynchronous circuit until it stabilizes [41].
Reference: [22] <author> D. M. Lewis. </author> <title> A Hierarchical Compiled-Code Event-Driven Logic Simulator, </title> <journal> IEEE Transactions on Computer-Aided Design , June 1991, </journal> <pages> pp. 726737. </pages>
Reference-contexts: Digital circuit simulators can be broadly classified into two main categories based on the sched uling algorithm they employ for gate evaluation: statically-scheduled levelized-code 27, 40] versus dynamically-scheduled event-driven (ED) <ref> [22, 28, 29, 39] </ref>. LC algorithms arrange the logic gates so that they are evaluated according to a partial ordering that ensures causality. During simulation, all gates are evaluated in each clock cycle, regardless of whether their inputs have changed since the last cycle. <p> Circuit compilation, thus, tends to increase the efficiency and speed of the simulation at the cost of greater pre-processing time and larger code size. Historically, most ED simulators were interpreted, and most LC simulators were compiled. Recent research on threaded-code techniques <ref> [22, 28, 29] </ref>, however, has led to the development of compilers for ED algorithms as well. The simplest logic simulators incorporate only two-valued logic models and make no attempt CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation to simulate circuit timing (so-called zero-delay models) [3, 40, 41]. <p> a function of circuit size. 112133165175176179202214217234292294398412424478526547653659731 1030610369178252067920705 5.00% 15.00% 25.00% 35.00% fraction of total cycles circuit size (# gates) RAW stalls CMiss stalls CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation mance degradation due to lack of locality is a problem common to LC simulators in general <ref> [22, 23] </ref>. Even for moderately sized circuits of several thousand gates the observed CPI was 2 or larger, yielding a minimum CPG of 200 for a typical 3-input gate.
Reference: [23] <author> D.M. Lewis. </author> <title> Performance Issues in a Compiled-Code Hardware Accelerator, CAD Accelerators, </title> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1991, </year> <pages> pp. 4759. </pages>
Reference-contexts: Generally, though, the computed event times are only bounds actual event times if the 2 event/cycle assumption is violated. Historically, the highest performing logic simulation methods rely on custom hardware accel erators to boost performance several orders of magnitude beyond what is achievable with soft ware simulators <ref> [1, 2, 4, 9, 15, 17, 23, 33, 43] </ref>. More recently, hardware emulators based on field programmable gate arrays (FPGAs) [30] have become popular high-end alternatives because of their faster speeds and their reconfigurability. <p> a function of circuit size. 112133165175176179202214217234292294398412424478526547653659731 1030610369178252067920705 5.00% 15.00% 25.00% 35.00% fraction of total cycles circuit size (# gates) RAW stalls CMiss stalls CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation mance degradation due to lack of locality is a problem common to LC simulators in general <ref> [22, 23] </ref>. Even for moderately sized circuits of several thousand gates the observed CPI was 2 or larger, yielding a minimum CPG of 200 for a typical 3-input gate.
Reference: [24] <author> D.M. Lewis. </author> <title> A Compiled-Code Hardware Accelerator for Circuit Simulation, </title> <journal> IEEE Transactions on Computer-Aided Design , May 1992, </journal> <pages> pp. 555565. </pages>
Reference-contexts: However, Lewis has observed that the straight-line code produced by compiled simulators causes poor hit rates <ref> [24] </ref>. Instead of instruction and data caches Lewis advocates the use of off-chip memories and a very deep pipelinewhich would have no adverse side effects on branchless codeto absorb the long latencies. This design would address the latency issues, but would have difficulty meeting our bandwidth requirements.
Reference: [25] <author> D.M. Lewis, M. H. van Ierssel, D. H. Wong. </author> <title> A Field Programmable Accelerator for Compiled-Code Applications, </title> <booktitle> in Proc. International Conference on Computer Design (ICCD) 1993, </booktitle> <pages> pp. 491496. </pages>
Reference-contexts: An interpreted simulator steps through the circuit by traversing a data structure representing the circuit graph, generally using time-consuming indirect addressing modes, and alternating between graph traversal and gate evaluation using subroutine calls and returns. As described by Lewis <ref> [25] </ref>, circuit compilation is essentially a pre-processing step that symbolically executes the simulation to uncover data structures that can be statically allocated. This eliminates the code required for circuit-graph traversal, which becomes hard-coded into the simulator kernel, and replaces most indirect memory references with direct references to static addresses.
Reference: [26] <author> B. A. Malloy, E. L. Lloyd, M. L. Soffa. </author> <title> Scheduling DAGs for Asynchronous Multiprocessor Execution, </title> <journal> IEEE Trans. Parallel and Distributed Systems , Vol. </journal> <volume> 5 no. 5, </volume> <month> May </month> <year> 1994, </year> <pages> pp. 498508. </pages>
Reference-contexts: In general, this problem is NP-complete <ref> [26] </ref>, but we have obtained good results with simple heuristics using a recursive depth-first traversal [38] of the circuit. The algorithm starts at a primary-output and recursively expands its fanin-cone, generating code for each gate (if it has not already been evaluated) as it returns from the recursion.
Reference: [27] <author> P. M. Maurer. </author> <title> Two New Techniques for Unit-Delay Compiled Simulation, </title> <journal> IEEE Transactions On Computer-Aided Design , Vol. </journal> <volume> 11, NO. 9., </volume> <month> September </month> <year> 1992, </year> <pages> pp. 11201130. </pages>
Reference-contexts: Even so, LC simulation with circuit delays is possible. Maurer <ref> [27] </ref> has developed an LC algorithm which traces all possible paths through the circuit to obtain, for each gate, the set of times at which the gate could possibly change, and schedules the gate for evaluation at each of those times.
Reference: [28] <author> P. M. Maurer, Y. S. Lee. </author> <title> Gateways: A Technique for Adding Event-Driven Behavior to Compiled Simulations, </title> <journal> IEEE Trans. on Computer-Aided Design , March 1994, </journal> <pages> pp. 338352. </pages>
Reference-contexts: Digital circuit simulators can be broadly classified into two main categories based on the sched uling algorithm they employ for gate evaluation: statically-scheduled levelized-code 27, 40] versus dynamically-scheduled event-driven (ED) <ref> [22, 28, 29, 39] </ref>. LC algorithms arrange the logic gates so that they are evaluated according to a partial ordering that ensures causality. During simulation, all gates are evaluated in each clock cycle, regardless of whether their inputs have changed since the last cycle. <p> Circuit compilation, thus, tends to increase the efficiency and speed of the simulation at the cost of greater pre-processing time and larger code size. Historically, most ED simulators were interpreted, and most LC simulators were compiled. Recent research on threaded-code techniques <ref> [22, 28, 29] </ref>, however, has led to the development of compilers for ED algorithms as well. The simplest logic simulators incorporate only two-valued logic models and make no attempt CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation to simulate circuit timing (so-called zero-delay models) [3, 40, 41].
Reference: [29] <author> A. N. Parlakbilek, D. M. Lewis. </author> <title> A Multiple-Strength Multiple-Delay Compiled-Code Logic Simulator, </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Sys tems </journal>
Reference-contexts: Digital circuit simulators can be broadly classified into two main categories based on the sched uling algorithm they employ for gate evaluation: statically-scheduled levelized-code 27, 40] versus dynamically-scheduled event-driven (ED) <ref> [22, 28, 29, 39] </ref>. LC algorithms arrange the logic gates so that they are evaluated according to a partial ordering that ensures causality. During simulation, all gates are evaluated in each clock cycle, regardless of whether their inputs have changed since the last cycle. <p> Circuit compilation, thus, tends to increase the efficiency and speed of the simulation at the cost of greater pre-processing time and larger code size. Historically, most ED simulators were interpreted, and most LC simulators were compiled. Recent research on threaded-code techniques <ref> [22, 28, 29] </ref>, however, has led to the development of compilers for ED algorithms as well. The simplest logic simulators incorporate only two-valued logic models and make no attempt CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation to simulate circuit timing (so-called zero-delay models) [3, 40, 41].
Reference: [30] <author> Quickturn Systems, Inc. </author> <title> Enterprise Emulation System Users Guide, </title> <year> 1991. </year>
Reference-contexts: Historically, the highest performing logic simulation methods rely on custom hardware accel erators to boost performance several orders of magnitude beyond what is achievable with soft ware simulators [1, 2, 4, 9, 15, 17, 23, 33, 43]. More recently, hardware emulators based on field programmable gate arrays (FPGAs) <ref> [30] </ref> have become popular high-end alternatives because of their faster speeds and their reconfigurability. In both cases, however, this performance premium comes at a steep cost, and such options are usually reserved to the verification of high-volume products such as microprocessors.
Reference: [31] <author> M. Riepe, K. Sakallah. </author> <title> Delay Accurate Compiled-Code Synchronous Gate-Level Verilog Simulation, </title> <booktitle> in Proc. 2nd International Verilog HDL Conference , March 1993, </booktitle> <pages> pp. 121127. </pages>
Reference-contexts: We recently described an LC simulation model and algorithm called Ravel that addresses these observations <ref> [31, 32, 37] </ref>. The Ravel model is an extension of a timing model that was developed specifically to analyze and optimize the setup and hold constraints in multi-phase synchronous CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation circuits that employ level-sensitive latches [34, 35]. <p> Data signals are assumed to have unspecified ble logic values at the beginning and end of each clock period; they are assumed to be changing and unknown between their earliest and latest event times. The Ravel LC logic simulator <ref> [31, 32, 37] </ref> extended the above model for use in logic simulation by requiring the stable values of data signals at the beginning and end of each clock cycle to be completely specified. <p> The benchmark workstation, a DECs-tation 5000/240 running at 40MHz, can be expected to achieve 0.20 M-EGPS with the full simulation model and 0.40 M-EGPS with long-path-only delays. This agrees with the simulation data gathered in <ref> [31] </ref>, which observed a long-path-only simulation speed of 0.355 M-EGPS for the ISCAS-89 S1196 circuit, a typical circuit with a 13% activity level and large enough to cause the CPI to be around 2. <p> Experiments using the ISCAS-89 sequential circuit suite have shown the software implementation of Ravel to operate about ten times faster than Verilog-XL, and at about the same speed as VCS, for circuits with activity levels near 10% <ref> [31] </ref>. In these experiments Ravel was run in long-path-only mode to more closely match the single-delay model of Verilog.
Reference: [32] <author> M. A. Riepe, J. L. Bell, E. J. Shriver, K. A. Sakallah. </author> <title> Assigned-Delay Compiled-Code Mul-tiphase Synchronous Logic Simulation, </title> <note> (in preparation). </note>
Reference-contexts: We recently described an LC simulation model and algorithm called Ravel that addresses these observations <ref> [31, 32, 37] </ref>. The Ravel model is an extension of a timing model that was developed specifically to analyze and optimize the setup and hold constraints in multi-phase synchronous CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation circuits that employ level-sensitive latches [34, 35]. <p> Data signals are assumed to have unspecified ble logic values at the beginning and end of each clock period; they are assumed to be changing and unknown between their earliest and latest event times. The Ravel LC logic simulator <ref> [31, 32, 37] </ref> extended the above model for use in logic simulation by requiring the stable values of data signals at the beginning and end of each clock cycle to be completely specified. <p> This ideal CPI rate is rarely achieved, however, because of the lack of locality in the instruction stream produced by Ravel. Experiments indicated a dramatic increase in the cache miss rate as soon as the size of the simulation loop exceeded the size of the instruction cache <ref> [32] </ref>. As we mentioned in Section 4.5, it has been observed that memory system perfor Delay Model 2-input 3-input 4-input -input long & short path 71 100 129 long path only 33 46 59 zero delay 8 12 16 Fig. 12.
Reference: [33] <author> M. Saitoh, K. Iwata, A. Nakamura, M. Kakegawa, J. Masuda, H. Hamamura, F. Hirose, N. Kawato. </author> <title> Logic Simulation System Using Simulation Processor (SP), </title> <booktitle> in Proc. 25th ACM/ IEEE Design Automation Conference CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation </booktitle>
Reference-contexts: Generally, though, the computed event times are only bounds actual event times if the 2 event/cycle assumption is violated. Historically, the highest performing logic simulation methods rely on custom hardware accel erators to boost performance several orders of magnitude beyond what is achievable with soft ware simulators <ref> [1, 2, 4, 9, 15, 17, 23, 33, 43] </ref>. More recently, hardware emulators based on field programmable gate arrays (FPGAs) [30] have become popular high-end alternatives because of their faster speeds and their reconfigurability. <p> Experiments performed with the Verilog-HDL model of Ravel-XL allow a direct comparison to be made between Ravel-XL and the other software simulators. The performance of Ravel-XL is compared with several ED hardware accelerators: MARS [1,2], the XP product family from Zycad Corp. [43], and the Fujitsu SP <ref> [33] </ref>. It is also compared against several LC accelerators: an unnamed system by Zasio et. al. [42] and the family of IBM simulation engines (LSM [9], YSE [15], and EVE [17]). For these systems the peak performance figures are estimated from published simulation data. <p> Indeed, many of the faster logic simulation hardware accelerators use parallel techniques <ref> [1, 2, 9, 15, 17, 33, 43] </ref>. Ravel-XL was designed with support for multi-processing in mind. Multiple Ravel-XL boards can be placed on a single backplane and one design partitioned among these boards. Synchronization can be handled in one of two ways.
Reference: [34] <author> K. A. Sakallah, T. N. Mudge, O. A. Olukotun. </author> <title> checkT and minT : Timing Verification and Optimal Clocking of Synchronous Digital Circuits, </title> <booktitle> in Proc. International Conference on Computer Aided Design , November 1990, </booktitle> <pages> pp. 552555. </pages>
Reference-contexts: The Ravel model is an extension of a timing model that was developed specifically to analyze and optimize the setup and hold constraints in multi-phase synchronous CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation circuits that employ level-sensitive latches <ref> [34, 35] </ref>. Ravel is based on a synchronous model for logic signals which records two events per cycle, the first and last. <p> Section 7 discusses our future plans for the Ravel-XL project, and Section 8 closes the paper with some concluding remarks summarizing our contribu tion. 2 Ravel Model Overview A mathematical model of the timing behavior of synchronous sequential circuits was intro duced in <ref> [34, 35] </ref> and used as the basis for efficient timing verification and clock schedule optimization algorithms. <p> Primary inputs and outputs can be easily accommodated by inserting fictitious synchronizers. CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation Evaluate the waveforms at the outputs of the destination synchronizer using equations (5)(7). As described in <ref> [34] </ref>, clock phases are totally ordered based on the occurrence times of their latching edges in a global frame of reference.
Reference: [35] <author> K. A. Sakallah, T. N. Mudge, and O. A. Olukotun, </author> <title> Analysis and Design of Latch-Controlled Synchronous Digital Circuits, </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems </journal>
Reference-contexts: The Ravel model is an extension of a timing model that was developed specifically to analyze and optimize the setup and hold constraints in multi-phase synchronous CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation circuits that employ level-sensitive latches <ref> [34, 35] </ref>. Ravel is based on a synchronous model for logic signals which records two events per cycle, the first and last. <p> Section 7 discusses our future plans for the Ravel-XL project, and Section 8 closes the paper with some concluding remarks summarizing our contribu tion. 2 Ravel Model Overview A mathematical model of the timing behavior of synchronous sequential circuits was intro duced in <ref> [34, 35] </ref> and used as the basis for efficient timing verification and clock schedule optimization algorithms.
Reference: [36] <author> K. A. Sakallah, T.N. Mudge, T. M. Burks, </author> <title> E.S. Davidson. Synchronization of Pipelines, </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems , Vol. </journal> <volume> 12 NO. 8, </volume> <month> August </month> <year> 1993, </year> <pages> pp. 11321146. </pages>
Reference: [37] <author> E. Shriver, K. Sakallah. Ravel: </author> <title> Assigned-Delay Compiled Code Logic Simulation, </title> <booktitle> in Proc. International Conference on Computer Aided Design , November 1992, </booktitle> <pages> pp. 364368. </pages>
Reference-contexts: We recently described an LC simulation model and algorithm called Ravel that addresses these observations <ref> [31, 32, 37] </ref>. The Ravel model is an extension of a timing model that was developed specifically to analyze and optimize the setup and hold constraints in multi-phase synchronous CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation circuits that employ level-sensitive latches [34, 35]. <p> Data signals are assumed to have unspecified ble logic values at the beginning and end of each clock period; they are assumed to be changing and unknown between their earliest and latest event times. The Ravel LC logic simulator <ref> [31, 32, 37] </ref> extended the above model for use in logic simulation by requiring the stable values of data signals at the beginning and end of each clock cycle to be completely specified.
Reference: [38] <author> R. Tarjan. </author> <title> Depth-First Search and Linear Graph Algorithms, </title> <journal> in Proc. SIAM J. Comput . Vol. </journal> <volume> 1 No. 2, </volume> <month> June </month> <year> 1972, </year> <pages> pp. 146160. </pages>
Reference-contexts: In general, this problem is NP-complete [26], but we have obtained good results with simple heuristics using a recursive depth-first traversal <ref> [38] </ref> of the circuit. The algorithm starts at a primary-output and recursively expands its fanin-cone, generating code for each gate (if it has not already been evaluated) as it returns from the recursion.
Reference: [39] <author> E. Ulrich. </author> <title> Exclusive Simulation of Activity in Digital Networks, </title> <journal> Communications of the ACM , Vol. </journal> <volume> 12, NO. 2, </volume> <month> February </month> <year> 1969, </year> <pages> pp. 102110. </pages>
Reference-contexts: Digital circuit simulators can be broadly classified into two main categories based on the sched uling algorithm they employ for gate evaluation: statically-scheduled levelized-code 27, 40] versus dynamically-scheduled event-driven (ED) <ref> [22, 28, 29, 39] </ref>. LC algorithms arrange the logic gates so that they are evaluated according to a partial ordering that ensures causality. During simulation, all gates are evaluated in each clock cycle, regardless of whether their inputs have changed since the last cycle.
Reference: [40] <author> L. Wang, N.E. Hoover, E.H. Porter, J.J. Zasio. SSIM: </author> <title> A Software Levelized Compiled-Code Simulator, </title> <booktitle> in Proc. 24th ACM/IEEE Design Automation Conference </booktitle>
Reference-contexts: The simplest logic simulators incorporate only two-valued logic models and make no attempt CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation to simulate circuit timing (so-called zero-delay models) <ref> [3, 40, 41] </ref>.
Reference: [41] <author> Z. Wang, P. M. Maurer. LECSIM: </author> <title> A Levelized Event Driven Compiled Logic Simulator, </title> <booktitle> in Proc. 27th ACM/IEEE Design Automation Conference, </booktitle>
Reference-contexts: The simplest logic simulators incorporate only two-valued logic models and make no attempt CSE-TR-202-94 Ravel-XL: A Hardware Accelerator for Assigned-Delay Compiled-Code Logic Gate Simulation to simulate circuit timing (so-called zero-delay models) <ref> [3, 40, 41] </ref>. <p> Thus, such approaches have little chance of obtaining competitive simulation speed [21]. Because circuits with asynchronous feedback cannot be levelized, ED algorithms handle circuits with asynchronous feedback much more naturally than LC methods. However, iterative LC evaluation techniques can be used to simulate an asynchronous circuit until it stabilizes <ref> [41] </ref>. Often, as in the case of the feedback paths in the cross-coupled gates of an RS-latch, only one or two iterations are necessary.
Reference: [42] <author> J. Zasio, P. Hwang. </author> <title> A Low-Cost High-Performance Levelized Compiled-Code Simulation Accelerator, </title> <publisher> Hardware Accelerators for Electrical CAD , IOP Publishing Ltd., </publisher> <year> 1988, </year> <pages> pp. 46 56. </pages>
Reference-contexts: The performance of Ravel-XL is compared with several ED hardware accelerators: MARS [1,2], the XP product family from Zycad Corp. [43], and the Fujitsu SP [33]. It is also compared against several LC accelerators: an unnamed system by Zasio et. al. <ref> [42] </ref> and the family of IBM simulation engines (LSM [9], YSE [15], and EVE [17]). For these systems the peak performance figures are estimated from published simulation data.
Reference: [43] <author> Zycad Corporation, </author> <title> The XP Product Family, marketing literature. </title>
Reference-contexts: Generally, though, the computed event times are only bounds actual event times if the 2 event/cycle assumption is violated. Historically, the highest performing logic simulation methods rely on custom hardware accel erators to boost performance several orders of magnitude beyond what is achievable with soft ware simulators <ref> [1, 2, 4, 9, 15, 17, 23, 33, 43] </ref>. More recently, hardware emulators based on field programmable gate arrays (FPGAs) [30] have become popular high-end alternatives because of their faster speeds and their reconfigurability. <p> Experiments performed with the Verilog-HDL model of Ravel-XL allow a direct comparison to be made between Ravel-XL and the other software simulators. The performance of Ravel-XL is compared with several ED hardware accelerators: MARS [1,2], the XP product family from Zycad Corp. <ref> [43] </ref>, and the Fujitsu SP [33]. It is also compared against several LC accelerators: an unnamed system by Zasio et. al. [42] and the family of IBM simulation engines (LSM [9], YSE [15], and EVE [17]). For these systems the peak performance figures are estimated from published simulation data. <p> Indeed, many of the faster logic simulation hardware accelerators use parallel techniques <ref> [1, 2, 9, 15, 17, 33, 43] </ref>. Ravel-XL was designed with support for multi-processing in mind. Multiple Ravel-XL boards can be placed on a single backplane and one design partitioned among these boards. Synchronization can be handled in one of two ways.
References-found: 43

