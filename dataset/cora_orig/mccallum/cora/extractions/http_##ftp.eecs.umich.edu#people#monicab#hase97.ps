URL: http://ftp.eecs.umich.edu/people/monicab/hase97.ps
Refering-URL: http://ftp.eecs.umich.edu/people/monicab/
Root-URL: http://www.eecs.umich.edu
Email: fmonicab,farnam,ewinnerg@eecs.umich.edu fheitmeyer,labawg@itd.nrl.navy.mil  
Title: A Software Environment for Custom Simulation and Monitoring of Real-Time Specifications  
Author: Monica Brockmeyer Constance Heitmeyer Farnam Jahanian Bruce Labaw Elly Winner 
Address: Ann Arbor, MI 48109-2122 Washington, DC 20375  
Affiliation: Department of Electrical Engineering Center for High Assurance and Computer Science Computer Systems University of Michigan Naval Research Laboratory  
Abstract: The testing and validation of formal specifications of high-assurance real-time systems requires an extensible simulation environment with support for users to generate events, customize displays, and monitor event traces. This paper describes MTSim, an customizable simulation platform for the Modechart Toolset (MT). MTSim provides support for "plugging in" user-defined viewers as well as user participation in the generation of simulations by allowing users to inject events into the execution trace. Moreover, MT-Sim provides monitoring and assertion checking of execution traces and the invocation of user-specified handlers upon assertion violation. This paper also introduces a MTSim component called WebSim, a suite of simulation tools for MT, and an application-specific component of MTSim, which displays the cockpit of an F-18 aircraft and models its bomb release function. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ramesh Bharadwaj and Constance L. Heitmeyer. </author> <title> Verifying scr requirements specifications using state exploration. </title> <booktitle> In Proceedings of First ACM SIGPLAN Workshop on Automatic Analysis of Software, </booktitle> <month> Jan-uary </month> <year> 1997. </year>
Reference-contexts: The Software Cost Reduction (SCR) toolset, SCR*, supports specification and analysis of requirements in the tabular SCR notation [11]. The tools provide completeness and consistency checking [10], specification editing, simulation, and mechanical verification <ref> [1] </ref>. The SCR notation may be used to specify the required system functions as well as the required system timing and accuracy. 3 MTSim Clients This section describes several prototype MTSim clients.
Reference: [2] <author> B. Boehm. </author> <title> Software Engineering Economics. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1981. </year>
Reference-contexts: Other studies have demonstrated that errors in the requirements specification are the most frequent cause of software errors and the most expensive to correct <ref> [2] </ref>. fl This work is supported in part by the Naval Research Laboratory under Grant N00014-94-P2015. To effectively detect errors in specifications of practical systems, specification languages and verification techniques must be complemented with software tools that are robust, flexible, and integrated [5].
Reference: [3] <author> M. Brockmeyer, F. Jahanian, C. Heitmeyer, and B. Labaw. </author> <title> An approach to monitoring and assertion-checking distributed real-time systems. </title> <booktitle> In Workshop on Parallel and Distributed Real-Time Systems, </booktitle> <month> April </month> <year> 1996. </year>
Reference-contexts: This permits the client to indicate values when the specification is incomplete or to instruct the simulator about how to handle nondeterminism. 3.1.2 The WebSim Monitor The WebSim Monitor performs monitoring and assertion checking. For a description of our approach to monitoring and assertion checking Modechart specifications, see <ref> [3] </ref>. Monitoring and assertion checking can be used to detect undesirable behavior or an assertion violation as an execution trace is generated.
Reference: [4] <author> P. C. Clements, C. L. Heitmeyer, B. G. Labaw, and A. T. Rose. </author> <title> MT: A toolset for specifying and analyzing real-time systems. </title> <booktitle> In Proc. IEEE Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: This interface provides an abstraction which mimics the physical appearance of an F-18 cockpit. MTSim has been developed within the context of the Modechart toolset (MT) <ref> [4] </ref>, a collection of integrated tools developed by researchers at the Naval Research Laboratory and the University of Texas. MT supports the formal specification of real-time behavior in the graphical Modechart language [12] and analysis via completeness and consistency checking, simulation, and formal verification.
Reference: [5] <author> D. Craigen, S. Gerhart, and T. Ralston. </author> <title> An international survey of industrial applications of formal methods. </title> <type> Technical Report NRL-9581, </type> <institution> Naval Research Laboratory, </institution> <address> Washington, DC, </address> <year> 1993. </year>
Reference-contexts: To effectively detect errors in specifications of practical systems, specification languages and verification techniques must be complemented with software tools that are robust, flexible, and integrated <ref> [5] </ref>. Among the tools effective for testing and debugging specifications early in the design process are simulators, which allow the user to generate and examine symbolic executions of the system under development. Simulation is even more effective if based on a formal specification. <p> Section 6 discusses future work. 2 Related Work This section reviews various formal methods for developing real-time systems with a particular emphasis on tool support. Several researchers have noted the need for tool support for these approaches, e.g. <ref> [5, 9] </ref>. The STATEMATE system [8], which has been widely employed in industry, has many capabilities not found in research prototypes, e.g., version management and support for splitting specifications into multiple documents. The STATEMATE user can invoke a variety of static queries about the system specification.
Reference: [6] <author> D.A. Gabel. </author> <title> Technology 1994: </title> <journal> Software engineering. IEEE Spectrum, </journal> <volume> 31(1) </volume> <pages> 38-41, </pages> <month> january </month> <year> 1994. </year>
Reference-contexts: Several studies have shown that the cost of detecting and removing software errors increases significantly as the development process moves from requirements specification toward implementation <ref> [6] </ref>. Other studies have demonstrated that errors in the requirements specification are the most frequent cause of software errors and the most expensive to correct [2]. fl This work is supported in part by the Naval Research Laboratory under Grant N00014-94-P2015.
Reference: [7] <author> C. Ghezzi, D. Mandrioli, and A. Morzenti. </author> <title> TRIO, a logic language for executable specification of real-time software. </title> <journal> Journal of System Software, </journal> <volume> 12, </volume> <year> 1990. </year>
Reference-contexts: The semantics of Cabernet is defined by TRIO <ref> [7] </ref>, a language developed specifically to support executable specifications and simulation. The Software Cost Reduction (SCR) toolset, SCR*, supports specification and analysis of requirements in the tabular SCR notation [11]. The tools provide completeness and consistency checking [10], specification editing, simulation, and mechanical verification [1].
Reference: [8] <author> D. Harel et al. STATEMATE: </author> <title> A working environment for the development of complex reactive systems. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> SE-16, </volume> <month> April </month> <year> 1990. </year>
Reference-contexts: Section 6 discusses future work. 2 Related Work This section reviews various formal methods for developing real-time systems with a particular emphasis on tool support. Several researchers have noted the need for tool support for these approaches, e.g. [5, 9]. The STATEMATE system <ref> [8] </ref>, which has been widely employed in industry, has many capabilities not found in research prototypes, e.g., version management and support for splitting specifications into multiple documents. The STATEMATE user can invoke a variety of static queries about the system specification. <p> As the simulation progresses, the active modes are displayed as shaded boxes, while modes that are not active are unshaded. This approach is effective for displaying the state of the entire system at given points of time. A similar tool is found in STATEM-ATE <ref> [8] </ref>. Finally, a Time Process client displays the simulation as a series of horizontal bars. (Our tool will be based on the interface to the original Modechart Toolset Simulator, which is illustrated in Figure 2.) Each bar indicates the behavior of one mode, transition, or external event over time.
Reference: [9] <author> C. Heitmeyer and D. Mandrioli, </author> <title> editors. Formal Methods for Real-Time Computing. </title> <publisher> John Wiley and Sons, </publisher> <year> 1996. </year>
Reference-contexts: Section 6 discusses future work. 2 Related Work This section reviews various formal methods for developing real-time systems with a particular emphasis on tool support. Several researchers have noted the need for tool support for these approaches, e.g. <ref> [5, 9] </ref>. The STATEMATE system [8], which has been widely employed in industry, has many capabilities not found in research prototypes, e.g., version management and support for splitting specifications into multiple documents. The STATEMATE user can invoke a variety of static queries about the system specification.
Reference: [10] <author> Constance L. Heitmeyer, Ralph D. Jeffords, and Bruce G. Labaw. </author> <title> Automated consistency checking of requirements specifications. </title> <journal> ACM Trans. on Software Eng. and Methodology, </journal> <volume> 5(3) </volume> <pages> 231-261, </pages> <month> July </month> <year> 1996. </year>
Reference-contexts: The semantics of Cabernet is defined by TRIO [7], a language developed specifically to support executable specifications and simulation. The Software Cost Reduction (SCR) toolset, SCR*, supports specification and analysis of requirements in the tabular SCR notation [11]. The tools provide completeness and consistency checking <ref> [10] </ref>, specification editing, simulation, and mechanical verification [1]. The SCR notation may be used to specify the required system functions as well as the required system timing and accuracy. 3 MTSim Clients This section describes several prototype MTSim clients.
Reference: [11] <author> Constance L. Heitmeyer, James Kirby, and Bruce Labaw. </author> <title> Tools for formal specification, verification, and validation of requirements. </title> <booktitle> In Proceedings of 12th Annual Conference on Computer Assurance (COMPASS '97), </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: The semantics of Cabernet is defined by TRIO [7], a language developed specifically to support executable specifications and simulation. The Software Cost Reduction (SCR) toolset, SCR*, supports specification and analysis of requirements in the tabular SCR notation <ref> [11] </ref>. The tools provide completeness and consistency checking [10], specification editing, simulation, and mechanical verification [1]. The SCR notation may be used to specify the required system functions as well as the required system timing and accuracy. 3 MTSim Clients This section describes several prototype MTSim clients. <p> Also under investigation are user-defined handlers. These handlers would allow users to launch specialized displays (which could themselves be MT-Sim clients), perform calculations, or take other actions. 3.1.3 Generic Viewers: WebSim Displays We have developed three types of displays. The first is a simple logging facility <ref> [11] </ref>. The second display, an Animator, provides an "animated" view of the simulation behavior, The Animator, which is illustrated in Figure 1, simulates the execution of the system of interest by displaying the original Modechart specification. <p> And finally, we wanted to evaluate how easily existing software could be incorporated into MTSim. The F-18 cockpit interface was developed by NRL researchers as an interface to the SCR* Toolset <ref> [11] </ref> and was implemented in Motif using Century Computing's TAE+ interface builder The purpose of the interface is to mimic the externally visible behavior of the cockpit of a Navy attack aircraft during a bomb release mission. In particular, the interface helps simulates the bomb release function of an F-18.
Reference: [12] <author> F. Jahanian and A. K. Mok. Modechart: </author> <title> A specification language for real-time systems. </title> <journal> IEEE Trans. Software Engineering, </journal> <month> 20(10), December </month> <year> 1994. </year>
Reference-contexts: MTSim has been developed within the context of the Modechart toolset (MT) [4], a collection of integrated tools developed by researchers at the Naval Research Laboratory and the University of Texas. MT supports the formal specification of real-time behavior in the graphical Modechart language <ref> [12] </ref> and analysis via completeness and consistency checking, simulation, and formal verification. The remainder of this paper is organized as follows: To put MTSim in context, Section 2 describes other tools developed to support formal methods, emphasizing those designed for real-time systems.
Reference: [13] <author> D. Mandrioli, A. Morzenti, M. Pezze, P. SanPietro, and S. Silva. </author> <title> A Petri net and logic approach to the specification and verification of real time systems. </title> <editor> In C. Heitmeyer and D. Mandrioli, editors, </editor> <title> Formal Methods for Real-Time Computing, chapter 6. </title> <publisher> John Wiley and sons, </publisher> <year> 1996. </year>
Reference-contexts: There is no automatic generation of watchdog code. It is also possible to set breakpoints in the Statechart code. The Cabernet tool <ref> [13] </ref> provides a formal framework for developing real-time systems based on a temporal and functional extension of Petri Nets.
References-found: 13

