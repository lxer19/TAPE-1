URL: http://www.cs.princeton.edu/~funk/symp95.ps.gz
Refering-URL: http://www.cs.princeton.edu/~funk/
Root-URL: http://www.cs.princeton.edu
Title: RING: A Client-Server System for Multi-User Virtual Environments  
Author: Thomas A. Funkhouser 
Keyword: CR Categories and Subject Descriptors: [Computer Graphics]: I.3.7 Three-Dimensional Graphics and Realism Virtual Reality. Additional Key Words and Phrases: Visual simulation, multi-user systems, virtual reality, 3D virtual environments, real-time graphics, client-server design, distributed systems.  
Affiliation: AT&T Bell Laboratories  
Abstract: This paper describes the client-server design, implementation and experimental results for a system that supports real-time visual interaction between a large number of users in a shared 3D virtual environment. The key feature of the system is that server-based visibility algorithms compute potential visual interactions between entities representing users in order to reduce the number of messages required to maintain consistent state among many workstations distributed across a wide-area network. When an entity changes state, update messages are sent only to workstations with entities that can potentially perceive the change - i.e., ones to which the update is visible. Initial experiments show a 40x decrease in the number of messages processed by client workstations during tests with 1024 entities interacting in a large densely occluded virtual environment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Airey, John M., John H. Rohlf, and Frederick P. Brooks, Jr., </author> <title> Towards Image Realism with Interactive Update Rates in Complex Virtual Building Environments. </title> <booktitle> ACM SIGGRAPH Special Issue on 1990 Symposium on Interactive 3D Graphics, </booktitle> <volume> 24, 2 (1990), </volume> <pages> 41-50. </pages>
Reference-contexts: Server-based message culling is implemented using precomputed line-of-sight visibility information. Prior to the multi-user simulation, the shared virtual environment is partitioned into a spatial subdivision of cells whose boundaries are comprised of the static, axis-aligned polygons of the virtual environment <ref> [1, 15] </ref>. A visibility precomputation is per clients, possibly culling, augmenting, or altering messages. formed in which the set of cells potentially visible to each cell is determined by tracing beams of possible sight-lines through transparent cell boundaries [15, 16] (see Figure 6).
Reference: [2] <author> Blanchard, C., S. Gurgess, Y. Harvill, J. Lanier, A. Lasko, M. Oberman, and M. Teitel, </author> <title> Reality Built for Two: A Virtual Reality Tool. </title> <booktitle> ACM SIGGRAPH Special Issue on 1990 Symposium on Interactive 3D Graphics, </booktitle> <address> (Snowbird, Utah), </address> <year> 1990, </year> <pages> 35-36. </pages>
Reference-contexts: Unfortunately, most existing systems do not scale well to large numbers of simultaneous users. Reality Built For Two <ref> [2] </ref>, VEOS [4], and MR Toolkit [14] are multi-user virtual reality systems that maintain consistent state among N workstations by sending a point-to-point message to each of N-1 workstations whenever any entity in the distributed simulation changes state.
Reference: [3] <author> Blau, Brian, Charles E. Hughes, Michael J. Moshell, and Curtis Lisle, </author> <title> Networked Virtual Environments. </title> <booktitle> ACM SIGGRAPH Special Issue on 1992 Symposium on Interactive 3D Graphics, </booktitle> <address> (Cambridge, MA), </address> <year> 1992, </year> <pages> 157-164. </pages>
Reference-contexts: This approach yields O (N 2 ) update messages during every simulation step (see Figure 2), and thus does not scale to many simultaneous users before the network gets saturated. O (N 2 ) update messages (labeled arrows) during each simulation step. SIMNET [5], NPSNET [17], and VERN <ref> [3] </ref> use broadcast messages to send updates to all other workstations participating in a virtual environment at once.
Reference: [4] <author> Bricken, William, </author> <title> and Geoffrey Coco The VEOS Project. </title> <type> Technical Report, </type> <institution> Human Interface Technology Laboratory, University of Washington, </institution> <year> 1993. </year>
Reference-contexts: Unfortunately, most existing systems do not scale well to large numbers of simultaneous users. Reality Built For Two [2], VEOS <ref> [4] </ref>, and MR Toolkit [14] are multi-user virtual reality systems that maintain consistent state among N workstations by sending a point-to-point message to each of N-1 workstations whenever any entity in the distributed simulation changes state. <p> Clients sent update messages only for changes in derivatives of entity position and/or orientation (i.e., dead-reckoning) while other clients simulated intermediate positions with linear "smooth-back." Update messages containing 40 bytes (message-type <ref> [4] </ref>, entity-ID [4], target-position [12], target-orientation [12], positional-velocity [4], and rotational-velocity [4]) were generated for each entity once every 2.3 seconds on average with this "random" navigational behavior. <p> Clients sent update messages only for changes in derivatives of entity position and/or orientation (i.e., dead-reckoning) while other clients simulated intermediate positions with linear "smooth-back." Update messages containing 40 bytes (message-type <ref> [4] </ref>, entity-ID [4], target-position [12], target-orientation [12], positional-velocity [4], and rotational-velocity [4]) were generated for each entity once every 2.3 seconds on average with this "random" navigational behavior. <p> Clients sent update messages only for changes in derivatives of entity position and/or orientation (i.e., dead-reckoning) while other clients simulated intermediate positions with linear "smooth-back." Update messages containing 40 bytes (message-type <ref> [4] </ref>, entity-ID [4], target-position [12], target-orientation [12], positional-velocity [4], and rotational-velocity [4]) were generated for each entity once every 2.3 seconds on average with this "random" navigational behavior. <p> Clients sent update messages only for changes in derivatives of entity position and/or orientation (i.e., dead-reckoning) while other clients simulated intermediate positions with linear "smooth-back." Update messages containing 40 bytes (message-type <ref> [4] </ref>, entity-ID [4], target-position [12], target-orientation [12], positional-velocity [4], and rotational-velocity [4]) were generated for each entity once every 2.3 seconds on average with this "random" navigational behavior.
Reference: [5] <author> Calvin, James, Alan Dickens, Bob Gaines, Paul Met-zger, Dale Miller, and Dan Owen, </author> <title> The SIMNET Virtual World Architecture. </title> <booktitle> Proceedings of the IEEE Virtual Reality Annual International Symposium, </booktitle> <month> September, </month> <year> 1993, </year> <pages> 450-455. </pages>
Reference-contexts: This approach yields O (N 2 ) update messages during every simulation step (see Figure 2), and thus does not scale to many simultaneous users before the network gets saturated. O (N 2 ) update messages (labeled arrows) during each simulation step. SIMNET <ref> [5] </ref>, NPSNET [17], and VERN [3] use broadcast messages to send updates to all other workstations participating in a virtual environment at once.
Reference: [6] <author> Carlsson, Christer, and Olof Hafsand, Dive: </author> <title> A Multi-User Virtual Reality System. </title> <booktitle> Proceedings of the IEEE Virtual Reality Annual International Symposium, </booktitle> <address> Septem-ber, </address> <year> 1993, </year> <pages> 394-401. </pages>
Reference-contexts: Multicast In our first experiments with multi-user virtual environments, we used IP multicast to send update messages directly between clients. The general idea is to map entity properties into multicast groups, and send update messages only to relevant groups <ref> [6] </ref>. For instance, Macedonia [12] partitions a virtual world into a 2D grid of hexagonal shaped cells each of which is represented by a separate multicast group.
Reference: [7] <author> Funkhouser, Thomas A., Carlo H. Sequin, and Seth J. Teller, </author> <title> Management of Large Amounts of Data in Interactive Building Walkthroughs. </title> <booktitle> ACM SIGGRAPH Special Issue on 1992 Symposium on Interactive 3D Graphics, </booktitle> <address> (Cambridge, MA), </address> <year> 1992, </year> <pages> 11-20. </pages>
Reference: [8] <author> Funkhouser, Thomas A., and Carlo H. Sequin. </author> <title> Adaptive Display Algorithm for Interactive Frame Rates During Visualization of Complex Virtual Environments. </title> <journal> Computer Graphics (SIGGRAPH '93), </journal> <volume> 27, </volume> <month> 247-254.. </month>
Reference-contexts: Finally, time critical computing algorithms can be used to determine an "optimal" set of messages to send to each client based on network connection bandwidths, workstation processing capabilities, and many other real-time performance factors (i.e., in a manner similar to that used in <ref> [8] </ref>). messages to client A at finer resolutions for entity B, which is nearby, than for entity E, which is far away. Multiresolution simulation and time critical computing algorithms can also be useful for behavioral simulation in RING clients.
Reference: [9] <institution> Institute of Electrical and Electronics Engineers (IEEE), IEEE P1278 Standard for Information Technology - Distributed Simulation Application Process and Data Entity Interchange Formats. </institution>
Reference-contexts: As a result, general-purpose distributed database systems are not adequate for use in multiuser visual simulation applications, and special-purpose messaging protocols are typically used to maintain consistent state in multi-user visual simulation systems <ref> [9, 13] </ref>. 2 Previous work Numerous experimental virtual reality systems and multiplayer games have been developed for real time interaction in shared virtual environments. Unfortunately, most existing systems do not scale well to large numbers of simultaneous users.
Reference: [10] <author> Kazman, Rick, </author> <title> Making WAVES: On the Design of Architectures for Low-end Distributed Virtual Environments. </title> <booktitle> Proceedings of IEEE Virtual Reality Annual International Symposium, </booktitle> <month> September </month> <year> 1993, </year> <pages> 443-449. </pages>
Reference-contexts: Kazman has proposed a system design, called WAVES, in which message managers mediate communication between hosts, possibly culling irrelevant messages <ref> [10, 11] </ref>. His approach is very similar to the one presented in this paper. One difference is that this paper presents algorithms and experimental results for visibility-based message culling during large simulations. updates each simulation step.
Reference: [11] <author> Kazman, Rick, </author> <title> Load Balancing, Latency Management and Separation of Concerns in a Distributed Virtual World. Parallel Computations Paradigms and Applications, </title> <editor> A. Zomaya (ed.), </editor> <publisher> Chapman & Hall, </publisher> <year> 1995, </year> <note> to appear. </note>
Reference-contexts: Kazman has proposed a system design, called WAVES, in which message managers mediate communication between hosts, possibly culling irrelevant messages <ref> [10, 11] </ref>. His approach is very similar to the one presented in this paper. One difference is that this paper presents algorithms and experimental results for visibility-based message culling during large simulations. updates each simulation step.
Reference: [12] <author> Macedonia, Michael, R. Michael J. Zyda, David R. Pratt, and Paul T Barham, </author> <title> Exploiting Reality with Multicast Groups: A Network Architecture for Large Scale Virtual Environments. </title> <booktitle> To appear in Proceedings of IEEE Virtual Reality Annual International Symposium, </booktitle> <year> 1995. </year>
Reference-contexts: Clients sent update messages only for changes in derivatives of entity position and/or orientation (i.e., dead-reckoning) while other clients simulated intermediate positions with linear "smooth-back." Update messages containing 40 bytes (message-type [4], entity-ID [4], target-position <ref> [12] </ref>, target-orientation [12], positional-velocity [4], and rotational-velocity [4]) were generated for each entity once every 2.3 seconds on average with this "random" navigational behavior. <p> Clients sent update messages only for changes in derivatives of entity position and/or orientation (i.e., dead-reckoning) while other clients simulated intermediate positions with linear "smooth-back." Update messages containing 40 bytes (message-type [4], entity-ID [4], target-position <ref> [12] </ref>, target-orientation [12], positional-velocity [4], and rotational-velocity [4]) were generated for each entity once every 2.3 seconds on average with this "random" navigational behavior. <p> Multicast In our first experiments with multi-user virtual environments, we used IP multicast to send update messages directly between clients. The general idea is to map entity properties into multicast groups, and send update messages only to relevant groups [6]. For instance, Macedonia <ref> [12] </ref> partitions a virtual world into a 2D grid of hexagonal shaped cells each of which is represented by a separate multicast group.
Reference: [13] <author> Pope, Arthur R., </author> <title> The SIMNET Network and Protocols. </title> <type> Technical Report 9120, </type> <institution> LORAL Advanced Distributed Simulation, </institution> <address> Cambridge, MA, </address> <month> June, </month> <year> 1991. </year>
Reference-contexts: As a result, general-purpose distributed database systems are not adequate for use in multiuser visual simulation applications, and special-purpose messaging protocols are typically used to maintain consistent state in multi-user visual simulation systems <ref> [9, 13] </ref>. 2 Previous work Numerous experimental virtual reality systems and multiplayer games have been developed for real time interaction in shared virtual environments. Unfortunately, most existing systems do not scale well to large numbers of simultaneous users.
Reference: [14] <author> Shaw, Chris, and Mark Green, </author> <title> The MR Toolkit Peers Package and Experiment. </title> <booktitle> Proceedings of IEEE Virtual Reality Annual International Symposium, </booktitle> <month> September </month> <year> 1993, </year> <pages> 463-469. </pages>
Reference-contexts: Unfortunately, most existing systems do not scale well to large numbers of simultaneous users. Reality Built For Two [2], VEOS [4], and MR Toolkit <ref> [14] </ref> are multi-user virtual reality systems that maintain consistent state among N workstations by sending a point-to-point message to each of N-1 workstations whenever any entity in the distributed simulation changes state.
Reference: [15] <author> Teller, Seth J., and Carlo H. Sequin, </author> <title> Visibility Preprocessing for Interactive Walkthroughs. </title> <journal> Computer Graphics (SIGGRAPH `91). </journal> <volume> 25, 4, </volume> <pages> 61-69. </pages>
Reference-contexts: Server-based message culling is implemented using precomputed line-of-sight visibility information. Prior to the multi-user simulation, the shared virtual environment is partitioned into a spatial subdivision of cells whose boundaries are comprised of the static, axis-aligned polygons of the virtual environment <ref> [1, 15] </ref>. A visibility precomputation is per clients, possibly culling, augmenting, or altering messages. formed in which the set of cells potentially visible to each cell is determined by tracing beams of possible sight-lines through transparent cell boundaries [15, 16] (see Figure 6). <p> A visibility precomputation is per clients, possibly culling, augmenting, or altering messages. formed in which the set of cells potentially visible to each cell is determined by tracing beams of possible sight-lines through transparent cell boundaries <ref> [15, 16] </ref> (see Figure 6). During the multi-user simulation, servers keep track of which cells contain which entities by exchanging "periodic" update messages when entities cross cell boundaries.
Reference: [16] <author> Teller, Seth J., </author> <title> Visibility Computations in Densely Occluded Polyhedral Environments. </title> <type> Ph.D. thesis, </type> <institution> Computer Science Division (EECS), University of California, Berke-ley, </institution> <year> 1992. </year> <note> Also available as UC Berkeley technical report UCB/CSD-92-708. </note>
Reference-contexts: A visibility precomputation is per clients, possibly culling, augmenting, or altering messages. formed in which the set of cells potentially visible to each cell is determined by tracing beams of possible sight-lines through transparent cell boundaries <ref> [15, 16] </ref> (see Figure 6). During the multi-user simulation, servers keep track of which cells contain which entities by exchanging "periodic" update messages when entities cross cell boundaries.

References-found: 16

