URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/tau97.TKB.ps.Z
Refering-URL: http://www.eecs.berkeley.edu/~serdar/publications/index.html
Root-URL: http://www.cs.berkeley.edu
Title: Computing Delay with Coupling Using Timed Automata  
Author: Serdar Tasran Yuji Kukimoto and Robert K. Brayton 
Address: Berkeley  
Affiliation: Department of Electrical Engineering and Computer Sciences, University of California,  
Abstract: Deep sub-micron circuits place new requirements on timing analysis tools: More accuracy is needed and new effects such as pattern dependent delays and cross-talk must be modeled. We propose a timed-automaton-based approach for computing delays of combinational circuits. Timed automata are used to represent delay models of circuit components and cross-talk effects, as well as sets of waveforms at nodes of the circuit. The uniform framework offered by timed automata has the advantage that accuracy and complexity can be traded-off without needing to change the algorithms used in the analysis. The expressiveness of timed automata is very useful for modeling deep sub-micron effects, however, analysis with timed automata has suffered from complexity problems and has been limited to systems with tens of components. To alleviate this problem, we propose a method that mimics image computation across a Boolean network and argue that by adopting a hierarchical view of combinational circuits and by using a proper set of heuristics for image computation, delay analysis with timed automata can be made practical. 
Abstract-found: 1
Intro-found: 1
Reference: [AD94] <author> R. Alur and D.L. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: This capability is useful for modeling coupling between timed automata. Since timers take on values from IR, the state space of a timed automaton is infinite. Analysis is performed by partitioning this space into a finite number of equivalence classes ( <ref> [AD94] </ref>). The version of timed automata presented above is different from that of [AD94], but its state space can be partitioned into a finite number of equivalence classes in exactly the same way as [AD94]. <p> Since timers take on values from IR, the state space of a timed automaton is infinite. Analysis is performed by partitioning this space into a finite number of equivalence classes ( <ref> [AD94] </ref>). The version of timed automata presented above is different from that of [AD94], but its state space can be partitioned into a finite number of equivalence classes in exactly the same way as [AD94]. A proof of this fact appears in the appendix. 2.3 Modeling Wire Delay and Cross-talk Wires constitute a significant part of delay in deep-submicron combinational circuits. <p> Analysis is performed by partitioning this space into a finite number of equivalence classes ( <ref> [AD94] </ref>). The version of timed automata presented above is different from that of [AD94], but its state space can be partitioned into a finite number of equivalence classes in exactly the same way as [AD94]. A proof of this fact appears in the appendix. 2.3 Modeling Wire Delay and Cross-talk Wires constitute a significant part of delay in deep-submicron combinational circuits. The analysis and modeling of wire delays are complicated by the fact that coupling from nearby wires needs to be taken into account.
Reference: [ACHDW92] <author> R. Alur, C. Courcoubetis, N. Halbwachs, D. Dill and H. </author> <booktitle> Wong-Toi Minimization of Timed Transition Systems In Proceedings of the Third Conference on Concurrency Theory, </booktitle> <year> 1992 </year>
Reference: [CLM89] <author> E. M. Clarke, D. E. Long, and K. L. </author> <title> McMillan Compositional Model Checking In Proc. </title> <booktitle> 4th Annual Symposium on Logic in Computer Science, </booktitle> <month> June </month> <year> 1989. </year>
Reference-contexts: Moreover, more efficient techniques developed for analyzing timed automata can be incorporated immediately. 3 Bisimilarity in the sense we are using is an equivalence relation between the locations of an automaton. The bisimilarity quotient is an automaton that has one location representing each equivalence class. See <ref> [CLM89] </ref>, for instance, for a more detailed treatment of bisimulation. The timed automaton network is conceptually appealing, and provides a lot of flexibility in implementing delay computation algorithms. The theoretical aspect of analysis with timed automata has been investigated extensively.
Reference: [CL95] <author> B. S. Carlson and S.-J. </author> <title> Lee Delay optimization of digital CMOS VLSI circuits by transistor reordering. </title> <journal> In IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, vol.14, </journal> <volume> (no.10), </volume> <pages> pages 1183-92, </pages> <month> Oct. </month> <year> 1995 </year>
Reference-contexts: This effect may be negligible for static CMOS gates with few inputs, but for high performance designs, complex dynamic logic gates with large numbers of inputs are frequently used, and for these types of gates, the dependence of delay on this effect is significant ( <ref> [CL95] </ref>). In the next section we present timed automata more formally, and describe the features that are useful in modeling delay characteristics. 2.2 Timed Automata Let X be a finite set of real-valued variables. An X-valuation assigns a nonnegative real value -(x) to each variable x 2 X.
Reference: [CY91] <author> C. Courcoubetis and M. </author> <title> Yannakakis Minimum and maximum delay problems in real-time systems In Proceedings of the Third Workshop on Computer-Aided Verification, </title> <publisher> LNCS 575, </publisher> <pages> pages 399-409, </pages> <year> 1991. </year>
Reference-contexts: One can then determine the longest time that F can take from an initial location of F to the set of locations where the primary outputs have stabilized (applying the the maximum delay algorithm of <ref> [CY91] </ref>, for instance). Note that the uniform timed automaton representation enables a clean mathematical formulation of the delay computation problem. The analogy with image computation manifests itself in the equation for F .
Reference: [DY96] <author> C. Daws and S. </author> <title> Yovine Reducing the Number of Clock Variables of Timed Automata In Proceedings of the 1996 Real-Time Systems Symposium, </title> <address> RTSS '96, Washington, DC, USA, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: We propose the following algorithm: (i) Take the product of automata and hide intermediate variables. (ii) Perform untimed reachability analysis on the product automaton. Delete locations that are unreachable. (iii) Apply the timer minimization algorithm of <ref> [DY96] </ref> to the reachable part of the product. (iv) Minimize the result with respect to bisimulation equivalence, modulo transitions that do not correspond to observable events. (Observable events are events that involve input or output variables. <p> Untimed reachability analysis provides an overestimate of the set of reachable locations that can be computed quickly. (iii) <ref> [DY96] </ref> presents an algorithm that minimizes the number of timer variables used by a timed automaton. It operates on a textual description of a timed automaton and outputs a timed automaton that is bisimilar to the input automaton. [DY96] achieves further reduction of timer variables by allowing on the automaton edges <p> of the set of reachable locations that can be computed quickly. (iii) <ref> [DY96] </ref> presents an algorithm that minimizes the number of timer variables used by a timed automaton. It operates on a textual description of a timed automaton and outputs a timed automaton that is bisimilar to the input automaton. [DY96] achieves further reduction of timer variables by allowing on the automaton edges assignments of the form x y, where x and y are timers.
Reference: [DKM93] <author> S. Devadas, K. Keutzer and S. </author> <title> Malik Computation of Floating Mode Delay in Combinational Circuits: </title> <journal> Theory and Algorithms In IEEE Transactions on Computer-Aided Design, </journal> <volume> 12(12): </volume> <pages> 1913-1923, </pages> <month> December </month> <year> 1993. </year>
Reference: [KB97] <author> Y. Kukimoto and R. K. </author> <title> Brayton Hierarchical Timing Analysis under the XBD0 Model In Proceedings of the Intl. </title> <booktitle> Workshop on Logic Synthesis, </booktitle> <volume> IWLS '97, </volume> <month> May </month> <year> 1997. </year>
Reference-contexts: The operation of hiding internal variables of a composition of automata is often referred to as smoothing. The automaton obtained from A by hiding variable y is denoted by (9y)A. A Hierarchical View of Combinational Circuits As has been observed by <ref> [KB97] </ref> and [YH95] and as will be clearer in section 3, hierarchical representation and verification are essential for being able to handle large circuits. The theory and algorithms for hierarchical reasoning with timed automata had been studied previously in [TAKB96] and [LLPY97].
Reference: [LB94] <author> W.K.C. Lam, and Robert K. </author> <title> Brayton Timed Boolean Functions- A Unified Formalism for Exact Timing Analysis. ISBN 0-7923-945402, </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1994. </year>
Reference-contexts: This has restricted the use of timed automata to asynchronous circuits, which are generally smaller than synchronous circuits but require a more detailed analysis than delay computation. Efficient exact methods had already been devised for computing the delays of acyclic combinational circuits ([DKM93], <ref> [LB94] </ref>, [MSBS93], [YH95]) and thus networks of timed automata appeared to be too general a model for this purpose. As argued above, deep sub-micron circuits place different demands on timing analysis tools, and this new setting makes the expressiveness of the timed automata formalism desirable.
Reference: [LLPY97] <author> K. G. Larsen, F. Larsson, P. Pettersson, and W. </author> <title> Yi Efficient Verification of Real-Time Systems: </title> <booktitle> Compact Data Structure and State Space Reduction In Proceedings of 8th IEEE Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1997. </year>
Reference-contexts: The theory and algorithms for hierarchical reasoning with timed automata had been studied previously in [TAKB96] and <ref> [LLPY97] </ref>. In the approach we propose, a combinational circuit is represented hierarchically as follows: leaf-level components are connected (or coupled) groups of gates, transistors and wires, and higher level modules consist of interconnections of modules from lower levels.
Reference: [LPY95] <author> K. Larsen, P. Pettersson, and W. Yi. </author> <title> Compositional and symbolic model-checking of real-time systems. </title> <booktitle> In Proceedings of the 16th IEEE Real-Time Systems Symposium, </booktitle> <year> 1995. </year>
Reference: [MP95] <author> O. Maler, A. </author> <title> Pnueli Timing Analysis of Asynchronous Circuits Using Timed Automata In ACM Intl. </title> <booktitle> Workshop on Timing Issues in the Specification and Synthesis of Digital Systems, </booktitle> <pages> pages 249-257, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: automata have been previously used to represent gate delay models (<ref> [MP95] </ref>, [TAKB96], [TB97]) for the verification of asynchronous circuits. As an example, figure 1 (from [TB97]) depicts a timed automaton 1 See Section 2 for explanation of timer variables representing the inertial delay model for a buffer as described in [MP95]. The inertial delay model specifies ranges [d rise;min ; d rise;max ] and [d fall;min ; d fall;max ] for the rising and falling delays.
Reference: [MSBS93] <author> P. McGeer, A. Saldanha, R. K. Brayton and A. L. </author> <title> Sangiovanni-Vincentelli Delay Models and Exact Timing Analysis In Logic Synthesis and Optimization, pages 167-189, </title> <editor> T. Sasao, ed., </editor> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: This has restricted the use of timed automata to asynchronous circuits, which are generally smaller than synchronous circuits but require a more detailed analysis than delay computation. Efficient exact methods had already been devised for computing the delays of acyclic combinational circuits ([DKM93], [LB94], <ref> [MSBS93] </ref>, [YH95]) and thus networks of timed automata appeared to be too general a model for this purpose. As argued above, deep sub-micron circuits place different demands on timing analysis tools, and this new setting makes the expressiveness of the timed automata formalism desirable.
Reference: [SN96] <author> K. Shepard and V. </author> <booktitle> Narayanan Noise in Deep Submicron Digital Design In Proceedings of the 1996 IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <volume> ICCAD '96, </volume> <pages> pages 524-31, </pages> <year> 1996 </year>
Reference-contexts: In certain cases, it is needed to compute delay at the transistor level. * Wire delays become dominant and analysis of these delays is complicated by the fact that there is cross-talk between wires. Coupling from other nodes can affect the rise and fall times at dynamic nodes ( <ref> [SN96] </ref>). Delay analysis algorithms must use parameters that are extracted from the layout and must take into account the cross-talk factor, which depends on the relative timing of signals as well as their logic values. As a result, current algorithms for computing exact delay are inapplicable for deep sub-micron circuits.
Reference: [TAKB96] <author> S. Tasran, R. Alur, R. P. Kurshan, and R. K. </author> <title> Brayton Verifying Abstractions of Timed Systems. </title> <booktitle> In Proceedings of the 7th Intl. Conf. on Concurrency Theory, CONCUR '96, </booktitle> <volume> LNCS 1119, </volume> <pages> pages 546-562, </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Section 4 summarizes the implementation issues that remain to be addressed. To convey the intuition behind the approach more clearly, we refrain from a completely formal presentation and, instead, illustrate the key points using examples. We refer the interested reader to the Appendix and previously published work ( <ref> [TAKB96] </ref> and [TB97]) for a more precise explanation of analysis with timed automata. 2 Modeling Circuits and Waveforms In the same way that finite state machines are used to represent regular languages as well as input-output behaviors of sequential circuits, we use timed automata to represent sets of waveforms and input-output <p> new = 0 x d fall;max i old = 0, i new = 1 d fall;min Falling Delay d fall;max d rise;min Rising Delay d rise;max the range [d fall;min ; d fall;max ]. 2.1 Gate Delay Models Timed automata have been previously used to represent gate delay models ([MP95], <ref> [TAKB96] </ref>, [TB97]) for the verification of asynchronous circuits. As an example, figure 1 (from [TB97]) depicts a timed automaton 1 See Section 2 for explanation of timer variables representing the inertial delay model for a buffer as described in [MP95]. <p> The theory and algorithms for hierarchical reasoning with timed automata had been studied previously in <ref> [TAKB96] </ref> and [LLPY97]. In the approach we propose, a combinational circuit is represented hierarchically as follows: leaf-level components are connected (or coupled) groups of gates, transistors and wires, and higher level modules consist of interconnections of modules from lower levels.
Reference: [TB97] <author> S. Tasran and R. K. Brayton STARI: </author> <title> A Case Study in Compositional and Hierarchical Timing Verification. </title> <booktitle> In Proceedings of the 9th Intl. Conf. on Computer-Aided Verification, CAV '97, </booktitle> <volume> LNCS 1254, </volume> <pages> pages 191-201, </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: To convey the intuition behind the approach more clearly, we refrain from a completely formal presentation and, instead, illustrate the key points using examples. We refer the interested reader to the Appendix and previously published work ( [TAKB96] and <ref> [TB97] </ref>) for a more precise explanation of analysis with timed automata. 2 Modeling Circuits and Waveforms In the same way that finite state machines are used to represent regular languages as well as input-output behaviors of sequential circuits, we use timed automata to represent sets of waveforms and input-output behaviors of <p> = 0 x d fall;max i old = 0, i new = 1 d fall;min Falling Delay d fall;max d rise;min Rising Delay d rise;max the range [d fall;min ; d fall;max ]. 2.1 Gate Delay Models Timed automata have been previously used to represent gate delay models ([MP95], [TAKB96], <ref> [TB97] </ref>) for the verification of asynchronous circuits. As an example, figure 1 (from [TB97]) depicts a timed automaton 1 See Section 2 for explanation of timer variables representing the inertial delay model for a buffer as described in [MP95]. <p> d fall;min Falling Delay d fall;max d rise;min Rising Delay d rise;max the range [d fall;min ; d fall;max ]. 2.1 Gate Delay Models Timed automata have been previously used to represent gate delay models ([MP95], [TAKB96], <ref> [TB97] </ref>) for the verification of asynchronous circuits. As an example, figure 1 (from [TB97]) depicts a timed automaton 1 See Section 2 for explanation of timer variables representing the inertial delay model for a buffer as described in [MP95].
Reference: [YH95] <author> H. Yalcin and John P. </author> <title> Hayes Hierarchical Timing Analysis Using Conditional Delays. </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <volume> ICCAD '95, </volume> <pages> pages 371-377, </pages> <year> 1995 </year>
Reference-contexts: This has restricted the use of timed automata to asynchronous circuits, which are generally smaller than synchronous circuits but require a more detailed analysis than delay computation. Efficient exact methods had already been devised for computing the delays of acyclic combinational circuits ([DKM93], [LB94], [MSBS93], <ref> [YH95] </ref>) and thus networks of timed automata appeared to be too general a model for this purpose. As argued above, deep sub-micron circuits place different demands on timing analysis tools, and this new setting makes the expressiveness of the timed automata formalism desirable. <p> The operation of hiding internal variables of a composition of automata is often referred to as smoothing. The automaton obtained from A by hiding variable y is denoted by (9y)A. A Hierarchical View of Combinational Circuits As has been observed by [KB97] and <ref> [YH95] </ref> and as will be clearer in section 3, hierarchical representation and verification are essential for being able to handle large circuits. The theory and algorithms for hierarchical reasoning with timed automata had been studied previously in [TAKB96] and [LLPY97].
References-found: 17

