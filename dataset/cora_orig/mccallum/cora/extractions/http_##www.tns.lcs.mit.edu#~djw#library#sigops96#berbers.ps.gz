URL: http://www.tns.lcs.mit.edu/~djw/library/sigops96/berbers.ps.gz
Refering-URL: http://www.tns.lcs.mit.edu/~djw/library/sigops96/index.html
Root-URL: 
Email: email: Yolande.Berbers@cs.kuleuven.ac.be  
Title: Infrastructure for mobile agents  
Author: Yolande Berbers, Bart De Decker, Wouter Joosen 
Address: snail mail: Celestijnenlaan 200A, B-3001 Leuven, Belgium  
Affiliation: Department of Computer Science, KULeuven  
Abstract: State of the art distributed application technology is not suited to tackle the challenges offered by the Information Superhighway. A new communication model based on mobile agents has been proposed and is still intensely studied. Research on the software infrastructure required to host agents on the move is urgently needed. The paper presents a requirements analysis for the infrastructure needs of agents in a distributed applications environment such as DCE or CORBA. It introduces an outline of a comprehensive proposal which includes requirements for autonomy, communication, mobility and security.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> W. Rosenberry et al. </author> <title> Understanding DCE. </title> <publisher> OReilly & Associates, Inc., </publisher> <year> 1992 </year>
Reference-contexts: In the traditional world of distributed systems, the client/server model using Remote Procedure Calls (RPCs) has been accepted as the best model to cope with distribution, and large applications have been built using this technology. Systems such as DCE <ref> [1] </ref> constitute a standard that allows complex applications to be built across heterogeneous platforms. The conventional client/server model has been adapted to the objectoriented technology, giving rise to systems such as CORBA [2] where objects are used both for clients and servers, and where RPCs are replaced by object invocations.
Reference: 2. <author> Object Management Group. </author> <title> Common Object Request Broker: Architecture and Specifications (Document no. </title> <address> 91.12.1), </address> <year> 1991 </year>
Reference-contexts: Systems such as DCE [1] constitute a standard that allows complex applications to be built across heterogeneous platforms. The conventional client/server model has been adapted to the objectoriented technology, giving rise to systems such as CORBA <ref> [2] </ref> where objects are used both for clients and servers, and where RPCs are replaced by object invocations. Although both the traditional client/server model as the distributed objectoriented model perform well in a controlled, high-bandwidth office environment, they are not adapted to face the challenges of worldwide network systems.
Reference: 3. <institution> Intelligent Agents, </institution> <note> Communications of the ACM, 37(7), Special Issue, </note> <month> July </month> <year> 1994 </year>
Reference-contexts: As such, it can serve as a guideline when establishing enhanced standards for distributed systems. 2. Mobile agents: a communication model for worldwide network systems A new model for gluing together pieces of worldwide applications has been proposed under the name of mobile agents <ref> [3, 4, 5] </ref>. This communication paradigm has been popularized in recent years by researchers and developers interested in various applications ranging from smart document search, over shopping in the Internet, to intelligent network services, as well as in languages that support these applications.
Reference: 4. <author> C.G. Harrison, D. Chess, A. Kershenbaum. </author> <title> Mobile agents: are they a good idea ?, IBM technical report, </title> <institution> IBM T.J. Watson Research Center, </institution> <address> Yorktown Heights, NY, </address> <month> March </month> <year> 1995 </year>
Reference-contexts: As such, it can serve as a guideline when establishing enhanced standards for distributed systems. 2. Mobile agents: a communication model for worldwide network systems A new model for gluing together pieces of worldwide applications has been proposed under the name of mobile agents <ref> [3, 4, 5] </ref>. This communication paradigm has been popularized in recent years by researchers and developers interested in various applications ranging from smart document search, over shopping in the Internet, to intelligent network services, as well as in languages that support these applications.
Reference: 5. <author> D. Chess, B. Grosof, C. Harrison, D. Levine, C. Parris, G. Tsudik. </author> <title> Itinerant agents for mobile computing, </title> <journal> IEEE Personal Communications Magazine, </journal> <month> October </month> <year> 1995 </year>
Reference-contexts: As such, it can serve as a guideline when establishing enhanced standards for distributed systems. 2. Mobile agents: a communication model for worldwide network systems A new model for gluing together pieces of worldwide applications has been proposed under the name of mobile agents <ref> [3, 4, 5] </ref>. This communication paradigm has been popularized in recent years by researchers and developers interested in various applications ranging from smart document search, over shopping in the Internet, to intelligent network services, as well as in languages that support these applications.
Reference: 6. <author> W. Joosen, F. Matthijs, J. Van Oeyen, B. Robben, S. Bijnens, P. Verbaeten. CORRELATE: </author> <title> High-level support for traveling agents, </title> <type> Technical report 236, </type> <institution> Department of Computer Science, K.U.Leuven, </institution> <year> 1996 </year>
Reference-contexts: In theory all languages can be used; in practice however, the compilation of some languages is not completely platform independent (e.g. C). Self and CORRELATE <ref> [6] </ref> are examples of languages suited for dynamic compilation. Much attention is currently paid to languages which are either interpreted directly or which are compiled to a portable intermediate code which is interpreted. <p> Such projects can take the liberty to experiment with new concepts and ideas, and the most appealing results may become major ingredients in the standard systems of tomorrow. For instance, we wish to refer to the CORRELATE project of our research group <ref> [6, 12, 13] </ref>. CORRELATE is a concurrent objectoriented language with a metalevel architecture. In CORRELATE, agents are defined as a natural extension of active objects. An active object model unifies the concepts of processes and passive objects.
Reference: 7. <author> J. Ousterhout. </author> <title> Tcl and the Tk toolkit, </title> <publisher> Addison-Wesley, </publisher> <year> 1994 </year>
Reference-contexts: C). Self and CORRELATE [6] are examples of languages suited for dynamic compilation. Much attention is currently paid to languages which are either interpreted directly or which are compiled to a portable intermediate code which is interpreted. Tcl <ref> [7] </ref> and Perl [8] are examples of languages that are directly interpreted, Java [9] is transported as intermediate byte code. For such languages, an appropriate interpreter must be available in each agency. <p> Other relevant projects that are important in this perspective include work on systems for agents such as TACOMA [14] and of course work on languages such as Telescript [15], TcL <ref> [7, 16, 17] </ref>, and Java [9], just to name a few. 5. Conclusion This paper first introduces agents as a communication paradigm that is better suited than traditional paradigms (e.g. RPC) in a worldwide network environment.
Reference: 8. <author> L. Wall, R. Schwartz. </author> <title> Programming Perl. </title> <publisher> OReilly & Associates, </publisher> <year> 1990 </year>
Reference-contexts: C). Self and CORRELATE [6] are examples of languages suited for dynamic compilation. Much attention is currently paid to languages which are either interpreted directly or which are compiled to a portable intermediate code which is interpreted. Tcl [7] and Perl <ref> [8] </ref> are examples of languages that are directly interpreted, Java [9] is transported as intermediate byte code. For such languages, an appropriate interpreter must be available in each agency.
Reference: 9. <institution> The Java Language: A white paper, Sunsoft Inc., </institution> <year> 1995 </year>
Reference-contexts: Much attention is currently paid to languages which are either interpreted directly or which are compiled to a portable intermediate code which is interpreted. Tcl [7] and Perl [8] are examples of languages that are directly interpreted, Java <ref> [9] </ref> is transported as intermediate byte code. For such languages, an appropriate interpreter must be available in each agency. Interpreting a program is of course less efficient than executing machine code; however the code does not have to be compiled by the agency. <p> Other relevant projects that are important in this perspective include work on systems for agents such as TACOMA [14] and of course work on languages such as Telescript [15], TcL [7, 16, 17], and Java <ref> [9] </ref>, just to name a few. 5. Conclusion This paper first introduces agents as a communication paradigm that is better suited than traditional paradigms (e.g. RPC) in a worldwide network environment.
Reference: 10. <author> E. Jul, H. Levy, N. Hutchinson, A. Black. </author> <title> Fine-grained mobility in the Emerald system, </title> <booktitle> Proceedings of the 11th ACM SIGOPS Conference, </booktitle> <month> November </month> <year> 1987 </year>
Reference-contexts: Experience from systems offering object migration such as Emerald <ref> [10] </ref> or XENOOPS [11, 12] can be used in this respect. We consider here both systems in which processes and objects are orthogonal (like in Emerald), and systems with concurrent objects, i.e. in which the concepts of objects and processes are unified.
Reference: 11. <author> W. Joosen, Y. Berbers, M. Snyers, P. Verbaeten. </author> <title> Transparent object migration in adaptive parallel applications, </title> <booktitle> Proceedings of the European Workshop on Parallel Computing, </booktitle> <month> March </month> <year> 1992 </year>
Reference-contexts: Experience from systems offering object migration such as Emerald [10] or XENOOPS <ref> [11, 12] </ref> can be used in this respect. We consider here both systems in which processes and objects are orthogonal (like in Emerald), and systems with concurrent objects, i.e. in which the concepts of objects and processes are unified.
Reference: 12. <author> S. Bijnens, W. Joosen, P. Verbaeten. </author> <title> A reflective invocation scheme to realize advanced object management. In Object Based Distributed Programming , R. </title> <editor> Guerraoui, O. Nierstrasz, M. Riveill (eds.), </editor> <publisher> LNCS 791, Springer Verlag, </publisher> <year> 1994 </year>
Reference-contexts: Experience from systems offering object migration such as Emerald [10] or XENOOPS <ref> [11, 12] </ref> can be used in this respect. We consider here both systems in which processes and objects are orthogonal (like in Emerald), and systems with concurrent objects, i.e. in which the concepts of objects and processes are unified. <p> Such projects can take the liberty to experiment with new concepts and ideas, and the most appealing results may become major ingredients in the standard systems of tomorrow. For instance, we wish to refer to the CORRELATE project of our research group <ref> [6, 12, 13] </ref>. CORRELATE is a concurrent objectoriented language with a metalevel architecture. In CORRELATE, agents are defined as a natural extension of active objects. An active object model unifies the concepts of processes and passive objects. <p> This has an important impact: even if the agent delegates the execution of a migration policy, it still has the autonomy to synchronize the actual execution of the mechanism with other (ongoing or pending) operations. This obviously simplifies the implementation of a mobility support layer (cfr. section 3.3) <ref> [12] </ref>, and therefore, it also increases the potential for interoperability. The fundamental issue emerging from this observation is the question whether or not a more standardized (and maybe narrowing) definition of process abstractions should become part of standard broker architectures.
Reference: 13. <author> F. Matthijs, W. Joosen, J. Van Oeyen, B. Robben, P. Verbaeten. </author> <title> Mobile active objects in CORRELATE, Proceedings of ECOOP95 Workshop on Mobility and Replication, </title> <editor> Eds. B. Anderson, C. Baquero, R. </editor> <booktitle> Oliveira, </booktitle> <pages> pp. 142-154, </pages> <year> 1995 </year>
Reference-contexts: Such projects can take the liberty to experiment with new concepts and ideas, and the most appealing results may become major ingredients in the standard systems of tomorrow. For instance, we wish to refer to the CORRELATE project of our research group <ref> [6, 12, 13] </ref>. CORRELATE is a concurrent objectoriented language with a metalevel architecture. In CORRELATE, agents are defined as a natural extension of active objects. An active object model unifies the concepts of processes and passive objects.
Reference: 14. <author> D. Johansen, R. van Renesse, F. Schneider. </author> <title> Operating system support for mobile agents. </title> <booktitle> Proceedings of the Fifth Workshop on Hot Topics in Operating Systems (HotOS), </booktitle> <pages> pp. 42-45, </pages> <month> May </month> <year> 1995 </year>
Reference-contexts: Other relevant projects that are important in this perspective include work on systems for agents such as TACOMA <ref> [14] </ref> and of course work on languages such as Telescript [15], TcL [7, 16, 17], and Java [9], just to name a few. 5. Conclusion This paper first introduces agents as a communication paradigm that is better suited than traditional paradigms (e.g. RPC) in a worldwide network environment.
Reference: 15. <author> J. White, </author> <title> Telescript technology: The foundation for the electronic marketplace. General Magic White Paper, </title> <year> 1994 </year>
Reference-contexts: Other relevant projects that are important in this perspective include work on systems for agents such as TACOMA [14] and of course work on languages such as Telescript <ref> [15] </ref>, TcL [7, 16, 17], and Java [9], just to name a few. 5. Conclusion This paper first introduces agents as a communication paradigm that is better suited than traditional paradigms (e.g. RPC) in a worldwide network environment.
Reference: 16. <author> R. Gray. </author> <title> Agent Tcl: A transportable agent system. </title> <booktitle> Proceedings of the CIKM Workshop on Intelligent Information Agents, </booktitle> <address> Baltimore, Maryland, </address> <month> December </month> <year> 1995 </year>
Reference-contexts: Other relevant projects that are important in this perspective include work on systems for agents such as TACOMA [14] and of course work on languages such as Telescript [15], TcL <ref> [7, 16, 17] </ref>, and Java [9], just to name a few. 5. Conclusion This paper first introduces agents as a communication paradigm that is better suited than traditional paradigms (e.g. RPC) in a worldwide network environment.
Reference: 17. <author> J. Levy, J. Ousterhout. </author> <title> A Safe Tcl toolkit for electronic meeting places. </title> <booktitle> Proceedings of the First USENIX Workshop on Electronic Commerce, </booktitle> <pages> pp. 133-135, </pages> <month> July </month> <year> 1995 </year>
Reference-contexts: Other relevant projects that are important in this perspective include work on systems for agents such as TACOMA [14] and of course work on languages such as Telescript [15], TcL <ref> [7, 16, 17] </ref>, and Java [9], just to name a few. 5. Conclusion This paper first introduces agents as a communication paradigm that is better suited than traditional paradigms (e.g. RPC) in a worldwide network environment.
References-found: 17

