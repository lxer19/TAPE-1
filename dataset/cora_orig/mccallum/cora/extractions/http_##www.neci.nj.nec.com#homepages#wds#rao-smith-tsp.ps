URL: http://www.neci.nj.nec.com/homepages/wds/rao-smith-tsp.ps
Refering-URL: http://www.neci.nj.nec.com/homepages/wds/confpubs.html
Root-URL: 
Email: fsatish,wdsg@research.nj.nec.com  
Title: Approximation schemes Improved approximation schemes for geometrical graphs via "spanners" and "banyans" O(N log N)
Author: Satish B. Rao Warren D. Smith 
Keyword: Polynomial time approximation schemes, optimal algorithms, derandomization, Traveling salesman tour, Steiner minimum tree, Minimum spanning tree, Minimum matchings, 2-matchings, Edge cover, Rectilinear Steiner minimum tree, quadtrees, spanners, banyans.  
Date: May 23, 1998  
Note: Rao-Smith typeset 793 May 23, 1998  d)-approximate MM in  Contents  
Abstract: We give deterministic and randomized algorithms to find a Euclidean traveling salesman tour (TST) of length within (1 + 1=s) times optimal. They run in O(N log N) time and O(N) space for constant dimension and s. These time and space bounds are optimal in an algebraic computation tree model. We can also find a (1 + 1=s) times optimal length 2-matching (M2M), edge cover (EC), minimum spanning tree (MST), Steiner minimal tree (SMT), rectilinear ditto (RSMT), and related graphs in the same time bound. This improves recent algorithms of Arora, which had used N(log N) O(s d1 ) time in fixed dimension d to produce a (1 + 1=s) times optimal TST (or SMT, RSMT) with success probability 1=2. To verify success, however, Arora could only use a deterministic version of his algorithm that took a factor of N d more time. The increase in running time for our deterministic version depends only on s. Arora's approach can also be extended to produce other (1 + *)-approximate geometrical graphs besides TSTs, e.g. the minimum matching (MM) and subgraph versions of the MST and TST problems. Our methods (at least at the moment) don't apply to those problems, but we can produce a 1:001 exp(8 2 11=(d1) p Our algorithms are based on using low-weight Eu-clidean spanner graphs (and generalizations of them) in conjunction with the hierarchical structure theorems that serve as the basis of Arora's work. A "t-spanner" is a graph on N sites such that shortest path distance between two spanner vertices approximates the Euclidean distance to within a factor of t. By making work by Arya, Das, et al. more explicit, we show that a (1 + 1=s)-spanner of N sites in d-space is computable in (sd) O(d) N log N time and (sd) O(d) N space, has maximum valence (sd) O(d) , and is (sd) O(d) times longer than the MST. We show that spanners can in principle be made orders of magnitude shorter and simpler by allowing "Steiner points." We introduce a remarkable generalization of the notion of "t-spanner," the "t-banyan," that t-approximates interconnection costs for site subsets of any cardinality, not just 2. If d 1 and * &gt; 0 are fixed, we show a (1 + *)-banyan of N sites in d-space exists, has O(N) vertices and O(N) edges, is only a constant factor longer than the MST, and is computable in O(N log N) time. fl NECI, 4 Independence way, Princeton NJ 08544
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Arora. </author> <title> Nearly linear time approximation schemes for Euclidean TSP and other geometric problems. </title> <booktitle> In Proceedings of the 38th Annual Symposium on Foundations of Computer Science, </booktitle> <year> 1997. </year> <note> Also available electronically on Arora's web page http://www.cs.princeton.edu/~arora/publist.html in an updated form. </note>
Reference-contexts: 1 Introduction W e improve a method of Arora <ref> [1] </ref> for approximating TSTs and SMTs. Arora's algorithm, given N points in a Euclidean d-space, d 2, produces, with probability 1=2, a (1 + 1=s)-approximate TST. It runs in N (log N ) O (s d) d1 time (s &gt; 1). <p> Ideas of this nature, although providing very useful guidelines in practical programming, should not be relied on 2 . Both we and <ref> [1] </ref> avoid any probabilistic assumptions about our input, and instead derive all our randomness from a random number generator. Another kind of randomness the kind in [1] is "Monte Carlo" algorithms. <p> Ideas of this nature, although providing very useful guidelines in practical programming, should not be relied on 2 . Both we and <ref> [1] </ref> avoid any probabilistic assumptions about our input, and instead derive all our randomness from a random number generator. Another kind of randomness the kind in [1] is "Monte Carlo" algorithms. These are algorithms which succeed with some probability (say 1=2), or fail but there may be no easy way to distinguish success from failure. Arora [1]'s algorithms may also be regarded as running in some worst case runtime bond and never failing- if we change their <p> Again, many of the techniques were previously developed by Arora in <ref> [1] </ref>. We assume that the sites are on integer coordinates of an L fi L grid. We then choose random integers a and b from [0; L]. <p> The procedure above along with its analysis is derived easily from the proof of Arora's main structure theorem in <ref> [1] </ref>. We set r = O (s K+1 ) in the procedure above. This produces a modified graph S 0 that consists of the line segments from S plus some additional line segments whose total length is O (s K M ST )=r = O (M ST =s). <p> This allows us to use dynamic programming to find the optimal TST in the modified spanner in time that is exponential in r = O (s K+1 ) but linear in N . (The same standard techniques were used by <ref> [1] </ref>). We remark that, unlike Arora [1], we can efficiently de-randomize the procedure above. This is due to the fact that Arora considered applying his modification procedure to some unknown solution to the TST problem. We actually use the modification procedure on the spanner graph which we explicitly compute. <p> This allows us to use dynamic programming to find the optimal TST in the modified spanner in time that is exponential in r = O (s K+1 ) but linear in N . (The same standard techniques were used by <ref> [1] </ref>). We remark that, unlike Arora [1], we can efficiently de-randomize the procedure above. This is due to the fact that Arora considered applying his modification procedure to some unknown solution to the TST problem. We actually use the modification procedure on the spanner graph which we explicitly compute. <p> However in arbitrary metric spaces it is known that approximating SMT or TST to within 1+* is NP-complete, for all sufficiently small constant * &gt; 0. (See <ref> [1] </ref> for the references to this recently developed area of "MAX-SNP hardness.") 2 Approximating the TSP in the plane We use lemmas stated in [1] and [25] about (1 + *)-approximate traveling salesman tours for N sites in the plane. <p> in arbitrary metric spaces it is known that approximating SMT or TST to within 1+* is NP-complete, for all sufficiently small constant * &gt; 0. (See <ref> [1] </ref> for the references to this recently developed area of "MAX-SNP hardness.") 2 Approximating the TSP in the plane We use lemmas stated in [1] and [25] about (1 + *)-approximate traveling salesman tours for N sites in the plane. They all generalize to d-space with d &gt; 2, but for now we will state some of them only in the case d = 2. <p> They all generalize to d-space with d &gt; 2, but for now we will state some of them only in the case d = 2. Lemma 3 (Perturbation Lemma) Given a graph G on N input sites in <ref> [0; 1] </ref> d , one can perturb the sites so that they are on points of the form (i=k; j=k) for integers i; j and with common denominator k, so that the total length of the graph changes by an additive term of at most p dE G =k where E <p> Assuming WLOG that the point set in <ref> [0; 1] </ref> d has MST length M 1, by using the lemma above and scaling by a factor of L = p dN=(ffiM ), we may alter a traveling salesman problem so that its sites lie on integer points in [0; L) d . <p> Definition 4 We define t (G; l) for a graph G and a line segment l in &lt; 2 to be the number of times any edge in G crosses l. We also state a version of a lemma from <ref> [1] </ref>. Lemma 5 Given a graph G in &lt; 2 on N sites X l:horizontal t (G; l) + l:vertical t (G; l) d`(G); (14) where `(G) denotes the length of G, and l are lines (in d-space, hyperplanes) of the integer grid. hard. The above lemma (proven in [1]) follows <p> from <ref> [1] </ref>. Lemma 5 Given a graph G in &lt; 2 on N sites X l:horizontal t (G; l) + l:vertical t (G; l) d`(G); (14) where `(G) denotes the length of G, and l are lines (in d-space, hyperplanes) of the integer grid. hard. The above lemma (proven in [1]) follows from the fact that the L 1 and L 2 norms differ by at most a p d factor. Definition 6 A crossing between a G-edge and a quadtree box boundary is "relevant" if exactly one of the endpoints of the G-edge is inside the box. <p> Rescaling, we get the stated bound. 2 Lemma 13 is unchanged, and lemma 14 holds trivially. We now claim that our proof (see also Arora's proof in <ref> [1] </ref>) of theorem 10 generalizes to &lt; d to yield Theorem 27 Given a graph G on a grid, a (g; )-patching procedure for the graph and line segments in &lt; d , an integer r with r , and a quadtree dissection with a random shift (a 1 ; : <p> Optimal TST's can be found in such graphs in O (r) r N time and space by dynamic programming just as in x2.1 or <ref> [1] </ref>. 18 Not surprisingly, this generalization of our proof of theorem 10 to general d is similar to Arora [1]'s section 2.3 generalizing his proof. <p> For example disregarding the constants in the Os the 2 (sd) O (d) factor in our runtime bound (EQ 8) when d = 2 and s = 10 (for 10% accuracy in the worst case), would be 2 400 . However, at the end of <ref> [1] </ref>, Arora points out that a (slower form of) his algorithm may be interpreted as a local optimizer. (Ours too.) It is possible that this interpretation is of more practical value than our algorithms, because then the powerful competing techniques [33] [45] could be used as Arora's local optimizer! Also these
Reference: [2] <author> S. Arya, G.Das, D.M.Mount, J.S.Salowe, and M.Smid. </author> <title> Euclidean spanners: short, thin, </title> <booktitle> and lanky. In Proceedings of the 27th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 489-498, </pages> <year> 1995. </year>
Reference-contexts: Theorem 30 will be proven in 2D in the next subsection, and in full generality in the one after. (For properties of spanner graphs and runtime analysis for spanner finding algorithms, see x6.) Remarks. (i) It is also possible to force the banyan to have small graphical diameter. See <ref> [2] </ref>. (ii) One reason it is amazing that a (1 + *)-banyan requires only a linear number of Steiner points if * &gt; 0, is that a 1-banyan apparently could require as many as N 2 N of them for the "ladder" 2D site set: a 2 fi (N + 1)
Reference: [3] <author> J.E. Beasley and F.Goffinet. </author> <title> A Delaunay triangulation-based heuristic for the Euclidean Steiner problem. </title> <booktitle> Networks, </booktitle> <pages> pages 215-224, </pages> <year> 1994. </year>
Reference-contexts: By locally optimizing the SMT output by our algorithm with the aid of the Hwang O (N )-time 2D topology optimization algorithm described in [40] or the Smith multi-D topology optimization algorithm also described there, (see also <ref> [3] </ref>; also the exhaustive search algorithm of [45] may be used as a local optimizer by applying it to subtrees); and by using the competing exhaustive search algorithms to solve the small subproblems arising in our algorithm; it may be possible to find very good approximate SMTs even for very large
Reference: [4] <author> A. Borchers and D-Z. Du. </author> <title> The k-steiner ratio in graphs. </title> <journal> SIAM J. Computing, </journal> <volume> 26(3) </volume> <pages> 857-869, </pages> <year> 1997. </year>
Reference-contexts: Apparently the current record polynomial time approximation factor for SMTs in arbitrary metric spaces is 1:644, due to Karpinski & Zelikovsky in an unpublished manuscript. SMT in a general metric space is at least r2 r +s (r+1)2 r +s times as long <ref> [4] </ref> 14 as the shortest union needs down to linear, because we've used the spanners arising from [5] instead of Vaidya's spanners, and we've used the O ( V ff (E; V ) log V E log (V C))-time matching algorithm of [18]. 12 And it will run in the same
Reference: [5] <author> P.B. Callahan and S.R.Kosaraju. </author> <title> A decomposition of multi-dimensional point sets with applications to k-nearest neighbors and n-body potential fields. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 546-556, </pages> <year> 1992. </year>
Reference-contexts: If d = 2, the d's in the bound above may be replaced by 1's by using a DNN graph as one's spanner (see x6 and [39]) instead of the spanners arising from <ref> [5] </ref>. Still better dependence on s is perhaps achievable. <p> SMT in a general metric space is at least r2 r +s (r+1)2 r +s times as long [4] 14 as the shortest union needs down to linear, because we've used the spanners arising from <ref> [5] </ref> instead of Vaidya's spanners, and we've used the O ( V ff (E; V ) log V E log (V C))-time matching algorithm of [18]. 12 And it will run in the same time bound as Vaidya's plain approximate Euclidean minimum matching algorithm, if one believes that the time bound
Reference: [6] <author> B.M. Chazelle. </author> <title> A faster deterministic algorithm for minimum spanning trees. </title> <booktitle> In Proceedings of the 38th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 22-34, </pages> <year> 1997. </year>
Reference-contexts: The literature also contains the alternative related terminology (which we will avoid) of "BPP" and "RP" algorithms. 4 With one exception, the Monte Carlo matching algorithm of x4.4. 5 Actually [9] did not prove this for spanners and banyans. However by applying any o (N log N) MST algorithm <ref> [6] </ref> to either of these graphs we would recover an approximate MST, hence by [9]'s (N log N) lower bound for approximate MSTs, the result follows. They also did not prove this for MM, M2M, EC, ANN, but we do claim this (although we omit the proof).
Reference: [7] <author> N. Christophides. </author> <title> Worst-case analysis of a new heuristic for the traveling salesman problem. In J.F.Traub, editor, Symposium on new directions and recent results in algorithms and complexity. </title> <publisher> Academic Press, </publisher> <year> 1976. </year>
Reference-contexts: But our faster randomized algorithm is Monte Carlo; like Arora's randomized scheme, it can fail without any indication that it failed. 1.7 Related Work on Geometrical Graph algorithms Christophides <ref> [7] </ref> observed that by finding the minimum spanning tree of the graph, and then adjoining the minimum length matching of all the odd-valent points in the spanning tree, an Eulerian (even-valent) graph CG resulted, and in any metric space 3 2 `(T ST ) `(CG): In DocNumber 5 . 1. 7.
Reference: [8] <author> G. B. Dantzig. </author> <title> Linear Programming And Exten sions. </title> <publisher> Princeton University Press, </publisher> <year> 1968. </year>
Reference-contexts: Notice that this does not hurt our SMT and RSMT time and space bounds because they already depended doubly exponentially on d, compared to which a factor d O (d 2 ) is insignificant. 4.3 Minimum edge cover (EC) and 2-matching (M2M) The LP dual <ref> [8] </ref> of the LP formulation of the M2M problem (cf. [30]), is the problem of finding a non-negative real weight w v associated with every site v, such that w a + w b dist (a; b) when a 6= b, and maximizing W = v w v .
Reference: [9] <author> G. Das, S. Kapoor, and M. Smid. </author> <title> On the complex ity of approximating Euclidean traveling salesman tours and minimum spanning trees. </title> <journal> Algorithmica, </journal> <volume> 19 </volume> <pages> 447-460, </pages> <year> 1997. </year>
Reference-contexts: visible in our worst case time bounds. 1.3 How close are we to optimal speed? The N log N behavior of our TST, MST, SMT, EC, ANN, M2M, MM, spanner, banyan, or RSMT runtime (8) when s and d are held fixed is optimal in an "alge-braic computation tree" model <ref> [9] </ref> 5 . <p> The literature also contains the alternative related terminology (which we will avoid) of "BPP" and "RP" algorithms. 4 With one exception, the Monte Carlo matching algorithm of x4.4. 5 Actually <ref> [9] </ref> did not prove this for spanners and banyans. However by applying any o (N log N) MST algorithm [6] to either of these graphs we would recover an approximate MST, hence by [9]'s (N log N) lower bound for approximate MSTs, the result follows.
Reference: [10] <author> G. Das, G. Narasimhan, and J. Salowe. </author> <title> A new way to weigh malnourished Euclidean graphs. </title> <booktitle> In Proceedings of the 6th Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 215-222, </pages> <year> 1995. </year>
Reference-contexts: Das, Narasimhan & Salowe <ref> [10] </ref> showed that spanners could be found with sum of the edge lengths at most O (a d (*)`(M ST )) where `(M ST ) is the length of the minimum spanning tree of the sites. They did not specify the function a d (*).
Reference: [11] <author> G. Das, P.Heffernan, and G.Narasimhan. </author> <title> Optimally sparse spanners in 3-dimensional Euclidean space. </title> <booktitle> In ACM Symposium on Computational Geometry, </booktitle> <pages> pages 53-62, </pages> <year> 1993. </year>
Reference: [12] <author> D. Z. Du and F. K. Hwang. </author> <title> A proof of the Gilbert Pollak conjecture on the Steiner ratio. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 121-135, </pages> <year> 1992. </year>
Reference-contexts: schemes of k-site SMTs with k = 2 r + s, 0 s &lt; 2 r ; RSMT in the Euclidean plane is at least 2=3 times as long as the L 1 MST [23]; SMT in the Euclidean plane is at least p times as long as the MST <ref> [12] </ref>; and all these factors are tight.
Reference: [13] <author> D.Z.Chen, G.Das, and M.Smid. </author> <title> Lower bounds for computing geometric spanners and approximate shortest paths. </title> <booktitle> In Canadian Conference on Computational Geometry, </booktitle> <pages> pages 155-160, </pages> <year> 1996. </year>
Reference-contexts: We also claim that approximating the shortest pair distance to within any constant factor requires (N log N) time. All these (N log N) bounds apply even in 1D. M.Smid points out that <ref> [13] </ref> also proves N log N lower bounds for computing spanners, and [38] shows an N log N lower bound for approximate min weight matching. in log N dimensional space, is NP-hard 6 .
Reference: [14] <editor> E.Aarts and J.K.Lenstra, editors. </editor> <title> Local search in combinatorial optimization. </title> <address> J.Wiley, </address> <year> 1997. </year>
Reference-contexts: Choosing the quadtree split coordinates in some heuristic manner. It seems impossible to tell how much effect these ploys will have, except by experiment. A brief survey of the competition is below. TST: In practice heuristic algorithms such as the Lin-Kernighan [29] [34] <ref> [14] </ref> local optimization procedure and Held-Karp lower bound [22] [37] will rapidly find a TST and a proof that it is within a small factor (usually a few percent) of optimality.
Reference: [15] <author> David Eppstein, Gary L. Miller, and Shang-Hua Teng. </author> <title> A deterministic linear time algorithm for geometric separators and its applications. </title> <journal> Fundamenta Informaticae, </journal> <volume> 22 </volume> <pages> 309-330, </pages> <year> 1995. </year>
Reference-contexts: In higher dimensions d, one may use Vaidya's algorithm to find the ANN spheres and then find their intersections with techniques of [32] and <ref> [15] </ref>. The resulting algorithm will run in d O (d) N + O (dN log N ) steps. This obsoletes the previous best runtime N O (log N ) d1 of [39].
Reference: [16] <author> S. J. Fortune. </author> <title> A sweepline algorithm for voronoi diagrams. </title> <journal> Algorithmica, </journal> <pages> pages 153-174, </pages> <year> 1987. </year>
Reference-contexts: Many people do not like Monte Carlo algorithms because it is difficult to debug them (is my failure a bug or a feature?) and one can never be sure when to stop running them. 2 For example, Fortune's "sweepline" algorithm for computing 2D Delaunay triangulations <ref> [16] </ref>, although in theory deterministic and featuring O (N log N) runtime in the worst case, was implemented by Fortune (in a widely distributed C program) without tree balancing. The resulting code exhibited N 2 runtime for N points forming a convex N-gon.
Reference: [17] <author> U. Fossmeier and M. Kaufmann. </author> <title> Solving rectilinear Steiner tree problems exactly in theory and practice. </title> <year> 1997. </year>
Reference-contexts: However, it is not known if this can be done in a polynomial number of steps, even in the plane 26 . SMT: The best computer program so far [45] can solve problems with 140 random 27 sites in 2D. See also <ref> [17] </ref> for a program which can solve 55-site 2D RSMT problems.
Reference: [18] <author> Harold N. Gabow and Robert E. Tarjan. </author> <title> Faster scaling algorithms for general graph-matching problems. </title> <journal> J. ACM, </journal> <volume> 38(4) </volume> <pages> 815-853, </pages> <year> 1991. </year>
Reference-contexts: problem" is: inside an edge-weighted graph with V vertices and E edges, we ask for a subgraph having minimal total weight whose valency at each vertex v is at least L v and at most U v . (We specify the arrays L and U .) At the end of <ref> [18] </ref>, it was remarked that this problem could be solved (provided all the edge weights were non-negative integers C) in time O ( p but the details were deferred to a "forthcoming paper" and also to a second manuscript and unfortunately neither was ever published. <p> Similarly for M2M. If the reader is unhappy about relying on unpublished results of Gabow and Tarjan <ref> [18] </ref>, we remark that it's made clear how and why the DCS problem is soluble in polynomial time, and in fact is reducible to a min-weight matching problem, in chapter 10 of [30]. <p> r +s (r+1)2 r +s times as long [4] 14 as the shortest union needs down to linear, because we've used the spanners arising from [5] instead of Vaidya's spanners, and we've used the O ( V ff (E; V ) log V E log (V C))-time matching algorithm of <ref> [18] </ref>. 12 And it will run in the same time bound as Vaidya's plain approximate Euclidean minimum matching algorithm, if one believes that the time bound in the unpublished Gabow-Tarjan result will apply for the ODCS problem. 13 They weren't really previously known, since we just pointed them out for the
Reference: [19] <author> M. R. Garey, R. L. Graham, and D. S. Johnson. </author> <title> The complexity of computing Steiner minimal trees. </title> <journal> SIAM J. Appl. Math., </journal> <volume> 32(4) </volume> <pages> 835-859, </pages> <year> 1977. </year>
Reference-contexts: Similarly H B contains a regular site V B . Proof of Hexagon property: It is almost the same as the proof of lemma 3 (page 841) of <ref> [19] </ref>, but we include 20 MST does not have this property. DocNumber 15 . 4. 2. 0 Rao-Smith typeset 793 May 23, 1998 Approximation schemes it here for completeness. Refer to figure 3 in which AB and all the hexagon sides are L in length and AB is vertical.
Reference: [20] <author> E.N. Gilbert and H.O. Pollak. </author> <title> Steiner minimal trees. </title> <journal> SIAM J. Appl. Math., </journal> <volume> 16(1) </volume> <pages> 1-29, </pages> <year> 1968. </year> <note> DocNumber 22 . 5. 2. 0 Rao-Smith typeset 793 May 23, 1998 Approximation schemes </note>
Reference-contexts: Fact 7: (MST property) If AB is an SMT edge where A and B are sites, then AB is an MST edge. The above facts 0-7 were shown in <ref> [20] </ref>. All of them are valid in general dimension except for fact 6. Lemma 33 (Hexagon property; d = 2 only) Let AB be an SMT edge.
Reference: [21] <author> Michel X. Goemans. </author> <title> Worst-case comparison of valid inequalities for the TSP. </title> <journal> Mathematical Programming, </journal> <volume> 69 </volume> <pages> 335-349, </pages> <year> 1995. </year>
Reference-contexts: No proof is known that the running time is always going to be rapid or that the approximation is always going to be good, but in practice it almost always is. Furthermore, programs that branch and bound (using high quality lower bounds arising from "polyhedral combinatorics" [26] <ref> [21] </ref> which empirically always seem to exhibit errors well below 1%) can find the optimal tour, and prove it, for TST problems with 1000s of sites [33] 24 .
Reference: [22] <author> M. Held and R.M. Karp. </author> <title> The traveling salesman problem and minimum spanning trees. </title> <journal> Operations Research, </journal> <volume> 18 </volume> <pages> 1138-1162, </pages> <year> 1970. </year>
Reference-contexts: It seems impossible to tell how much effect these ploys will have, except by experiment. A brief survey of the competition is below. TST: In practice heuristic algorithms such as the Lin-Kernighan [29] [34] [14] local optimization procedure and Held-Karp lower bound <ref> [22] </ref> [37] will rapidly find a TST and a proof that it is within a small factor (usually a few percent) of optimality.
Reference: [23] <author> F.K. Hwang. </author> <title> On Steiner minimal trees with rectilin ear distance. </title> <journal> SIAM J. Appl. Math., </journal> <volume> 30(1) </volume> <pages> 104-114, </pages> <year> 1976. </year>
Reference-contexts: to be MAX-SNP DocNumber 6 . 1. 7. 0 Rao-Smith typeset 793 May 23, 1998 Approximation schemes of k-site SMTs with k = 2 r + s, 0 s &lt; 2 r ; RSMT in the Euclidean plane is at least 2=3 times as long as the L 1 MST <ref> [23] </ref>; SMT in the Euclidean plane is at least p times as long as the MST [12]; and all these factors are tight.
Reference: [24] <author> D. Karger, P. Klein, and R.E. Tarjan. </author> <title> A random ized linear-time algorithm to find minimum spanning trees. </title> <journal> J.ACM, </journal> <volume> 42 </volume> <pages> 321-328, </pages> <year> 1995. </year>
Reference-contexts: 1=s)-approximate MST may be found by computing a (1 + 1=s)-spanner of the N sites, and then finding the minimum spanning tree lying inside the spanner in time O (N + E S ), where E S is the number of spanner edges, using the linear time MST algorithm of <ref> [24] </ref>. The resulting runtime (cf. theorem 45) is (sd) O (d) N + O (dN log N ) in space O (s d N ).
Reference: [25] <author> R.M. Karp. </author> <title> Probabilistic analysis of partitioning al gorithms for the TSP in the plane. </title> <journal> Math.Oper.Res., </journal> <volume> 2 </volume> <pages> 209-224, </pages> <year> 1977. </year>
Reference-contexts: metric spaces it is known that approximating SMT or TST to within 1+* is NP-complete, for all sufficiently small constant * &gt; 0. (See [1] for the references to this recently developed area of "MAX-SNP hardness.") 2 Approximating the TSP in the plane We use lemmas stated in [1] and <ref> [25] </ref> about (1 + *)-approximate traveling salesman tours for N sites in the plane. They all generalize to d-space with d &gt; 2, but for now we will state some of them only in the case d = 2.
Reference: [26] <author> E.L. Lawler, J.K. Lenstra, A.H.G. Rinnooy Kan, </author> <title> and D.B. Shmoys, editors. The traveling salesman problem. </title> <address> J.Wiley, </address> <year> 1985. </year>
Reference-contexts: No proof is known that the running time is always going to be rapid or that the approximation is always going to be good, but in practice it almost always is. Furthermore, programs that branch and bound (using high quality lower bounds arising from "polyhedral combinatorics" <ref> [26] </ref> [21] which empirically always seem to exhibit errors well below 1%) can find the optimal tour, and prove it, for TST problems with 1000s of sites [33] 24 .
Reference: [27] <author> J. Van Leeuwen and A.A. Schoone. </author> <title> Untangling a traveling salesman tour in the plane. </title> <booktitle> In Proc. 7th conf. on graphtheoretic concepts in computer sci. (WG 81), </booktitle> <address> Linz, Austria, </address> <pages> pages 87-98, </pages> <year> 1981. </year>
Reference-contexts: Finally, our approximate EC and M2M algorithms may be useful. We don't know of any competition here. 5.2 Open questions Minimum Matching Can our (1 + *)-approximation approach be made to work for MM still in O (N log N ) time? 26 Van Leeuwen and Schoone <ref> [27] </ref> show that performing any N 3 =4 elementary uncrossing operations will always uncross a TST (also MM, etc.) of N sites in general position in the plane.
Reference: [28] <author> C. Levcopoulos and A. Lingas. </author> <title> There are planar graphs almost as good as the complete graphs and almost as cheap as minimum spanning trees. </title> <journal> Algorithmica, </journal> <volume> 8 </volume> <pages> 251-256, </pages> <year> 1992. </year>
Reference: [29] <author> S. Lin and B. Kernighan. </author> <title> An effective heuristic al gorithm for the travelling-salesman problem. </title> <journal> Operations Research, </journal> <volume> 21 </volume> <pages> 498-516, </pages> <year> 1973. </year>
Reference-contexts: Choosing the quadtree split coordinates in some heuristic manner. It seems impossible to tell how much effect these ploys will have, except by experiment. A brief survey of the competition is below. TST: In practice heuristic algorithms such as the Lin-Kernighan <ref> [29] </ref> [34] [14] local optimization procedure and Held-Karp lower bound [22] [37] will rapidly find a TST and a proof that it is within a small factor (usually a few percent) of optimality.
Reference: [30] <author> L. Lovasz and M. Plummer. </author> <title> Matching theory. </title> <publisher> North-Holland, </publisher> <year> 1986. </year>
Reference-contexts: Similarly for M2M. If the reader is unhappy about relying on unpublished results of Gabow and Tarjan [18], we remark that it's made clear how and why the DCS problem is soluble in polynomial time, and in fact is reducible to a min-weight matching problem, in chapter 10 of <ref> [30] </ref>. Indeed, [30] even mentions graph transformations which will allow the solution of, for example, the parity constrained DCS problem (PDCS) the valence of v is constrained to be an integer between L v and U v with parity P v ; also some vertices's parity may be left unconstrained. <p> If the reader is unhappy about relying on unpublished results of Gabow and Tarjan [18], we remark that it's made clear how and why the DCS problem is soluble in polynomial time, and in fact is reducible to a min-weight matching problem, in chapter 10 of <ref> [30] </ref>. Indeed, [30] even mentions graph transformations which will allow the solution of, for example, the parity constrained DCS problem (PDCS) the valence of v is constrained to be an integer between L v and U v with parity P v ; also some vertices's parity may be left unconstrained. <p> hurt our SMT and RSMT time and space bounds because they already depended doubly exponentially on d, compared to which a factor d O (d 2 ) is insignificant. 4.3 Minimum edge cover (EC) and 2-matching (M2M) The LP dual [8] of the LP formulation of the M2M problem (cf. <ref> [30] </ref>), is the problem of finding a non-negative real weight w v associated with every site v, such that w a + w b dist (a; b) when a 6= b, and maximizing W = v w v .
Reference: [31] <author> M.Ajtai, J.Komlos, and G.Tusnady. </author> <title> On optimal matchings. </title> <journal> Combinatorica, </journal> <volume> 4 </volume> <pages> 259-264, </pages> <year> 1984. </year>
Reference-contexts: Associate with every site v a ball B v centered at that site with radius the distance to the site's nearest neighbor. There is an edge ij in SOI if B i and B j intersect. Finally, the minimum bipartite matching (MBM) among N red and N blue points <ref> [31] </ref> is the minimum length pairing of each red point with a unique blue mate.
Reference: [32] <author> G.L. Miller, S-H. Teng, W. Thurston, and S.A. Vavasis. </author> <title> Separators for sphere packings and nearest neighbor graphs. </title> <journal> J. </journal> <note> ACM (submitted), </note> <year> 1996. </year>
Reference-contexts: In higher dimensions d, one may use Vaidya's algorithm to find the ANN spheres and then find their intersections with techniques of <ref> [32] </ref> and [15]. The resulting algorithm will run in d O (d) N + O (dN log N ) steps. This obsoletes the previous best runtime N O (log N ) d1 of [39].
Reference: [33] <author> M. Padberg and G. Rinaldi. </author> <title> A branch and cut al gorithm for the resolution of large scale symmetric traveling salesman problems. </title> <journal> SIAM Review, </journal> <volume> 33 </volume> <pages> 60-100, </pages> <year> 1991. </year>
Reference-contexts: Furthermore, programs that branch and bound (using high quality lower bounds arising from "polyhedral combinatorics" [26] [21] which empirically always seem to exhibit errors well below 1%) can find the optimal tour, and prove it, for TST problems with 1000s of sites <ref> [33] </ref> 24 . These procedures undoubtedly consume asymptotically exponential runtime (1 + c) N , or quite likely even N cN , for some c &gt; 0. But empirically c is remarkably small 25 (c 0:004? Or even less?). <p> However, at the end of [1], Arora points out that a (slower form of) his algorithm may be interpreted as a local optimizer. (Ours too.) It is possible that this interpretation is of more practical value than our algorithms, because then the powerful competing techniques <ref> [33] </ref> [45] could be used as Arora's local optimizer! Also these techniques could be used to solve the small "TST with boundary conditions" subproblems arising in our algorithm. 24 The lowest cardinality of any as-yet inexactly solved TST problem in "TSPlib" [35] is 2103. 25 Also, it should be possible to
Reference: [34] <author> Christos H. Papadimitriou. </author> <title> The complexity of the Lin-Kernighan heuristic for the traveling salesman problem. </title> <journal> SIAM J. Comput., </journal> <volume> 21(3) </volume> <pages> 450-465, </pages> <year> 1992. </year>
Reference-contexts: Choosing the quadtree split coordinates in some heuristic manner. It seems impossible to tell how much effect these ploys will have, except by experiment. A brief survey of the competition is below. TST: In practice heuristic algorithms such as the Lin-Kernighan [29] <ref> [34] </ref> [14] local optimization procedure and Held-Karp lower bound [22] [37] will rapidly find a TST and a proof that it is within a small factor (usually a few percent) of optimality.
Reference: [35] <author> G. Reinelt. </author> <title> Tsplib a travelling salesman pro gram library. </title> <journal> ORSA J. Comput., </journal> <volume> 3 </volume> <pages> 376-384, </pages> <year> 1991. </year> <note> http://junji.complex.hokudai.ac.jp/export/kebbe/index. </note>
Reference-contexts: than our algorithms, because then the powerful competing techniques [33] [45] could be used as Arora's local optimizer! Also these techniques could be used to solve the small "TST with boundary conditions" subproblems arising in our algorithm. 24 The lowest cardinality of any as-yet inexactly solved TST problem in "TSPlib" <ref> [35] </ref> is 2103. 25 Also, it should be possible to combine the N O ( p N) time exact 2D TST algorithm of [39] with the branch and bound programs to get the best of both worlds.
Reference: [36] <author> C.A. Rogers. </author> <title> Covering a sphere with spheres. </title> <journal> Math ematika, </journal> <volume> 10 </volume> <pages> 157-164, </pages> <year> 1963. </year>
Reference: [37] <author> D.B. Shmoys and D.P. Williamson. </author> <title> Analyzing the Held-Karp TSP bound: A monotonicity property with application. </title> <journal> Info. Proc. Lett., </journal> <pages> pages 281-285, </pages> <year> 1990. </year>
Reference-contexts: space 3 2 `(T ST ) `(CG): In DocNumber 5 . 1. 7. 0 Rao-Smith typeset 793 May 23, 1998 Approximation schemes fact 3 2 `(LP ) `(CG), where `(LP ) is the cost of a simple linear programming lower bound on the TST cost (also computable in polynomial time) <ref> [37] </ref>. This approximation ratio 1:5 is still best known for TST in arbitrary metric spaces for approximation algorithms running in polynomial time. <p> It seems impossible to tell how much effect these ploys will have, except by experiment. A brief survey of the competition is below. TST: In practice heuristic algorithms such as the Lin-Kernighan [29] [34] [14] local optimization procedure and Held-Karp lower bound [22] <ref> [37] </ref> will rapidly find a TST and a proof that it is within a small factor (usually a few percent) of optimality.
Reference: [38] <author> Michiel Smid. </author> <title> Lower bounds. </title> <booktitle> Lecture notes at Magdeburg, </booktitle> <year> 1997. </year> <month> michiel@isgnw.cs.Uni-Magdeburg.DE. </month>
Reference-contexts: We also claim that approximating the shortest pair distance to within any constant factor requires (N log N) time. All these (N log N) bounds apply even in 1D. M.Smid points out that [13] also proves N log N lower bounds for computing spanners, and <ref> [38] </ref> shows an N log N lower bound for approximate min weight matching. in log N dimensional space, is NP-hard 6 .
Reference: [39] <author> W.D. Smith. </author> <title> Studies in computational geometry mo tivated by mesh generation. </title> <type> PhD thesis, </type> <institution> Princeton Applied Math Dept., Princeton, NJ, </institution> <year> 1988. </year> <note> University Microfilms International, order # 9002713. </note>
Reference-contexts: This approximation ratio 1:5 is still best known for TST in arbitrary metric spaces for approximation algorithms running in polynomial time. Smith <ref> [39] </ref> showed how, by "searching over separators," to find the optimum TST for N points in the Euclidean plane in N O ( p N) steps. (Other geometrical graphs are calculable with the same technique, for example the minimum length triangulation.) Also in [40] he extended this to handle RSMT. <p> Smith <ref> [39] </ref> showed how to find a -DNNG of N sites in the plane in time O (N log N )=; see also our theorem 46. Vaidya [43] showed how to find ANND in O (d) d N + O (dN log N ) time by a tree-of-boxes algorithm 9 . <p> The SOI graph is computable in O (N log N ) time when d = 2 by computing the ANN spheres from the Delaunay triangulation and then finding their intersections (of which there will be 10 2 O (d) N ) via the "plane sweep" paradigm <ref> [39] </ref>. In higher dimensions d, one may use Vaidya's algorithm to find the ANN spheres and then find their intersections with techniques of [32] and [15]. The resulting algorithm will run in d O (d) N + O (dN log N ) steps. <p> The resulting algorithm will run in d O (d) N + O (dN log N ) steps. This obsoletes the previous best runtime N O (log N ) d1 of <ref> [39] </ref>. <p> If d = 2, the d's in the bound above may be replaced by 1's by using a DNN graph as one's spanner (see x6 and <ref> [39] </ref>) instead of the spanners arising from [5]. Still better dependence on s is perhaps achievable. <p> Techniques for showing a 2 O (r) bound with planarity and generation algorithms to achieve such bounds are discussed in <ref> [39] </ref>. boxes to get a min-length subproblem solution in a larger box, we must consider all possible pairs of compatible boundary conditions on the boundary between the sub-boxes. <p> used to solve the small "TST with boundary conditions" subproblems arising in our algorithm. 24 The lowest cardinality of any as-yet inexactly solved TST problem in "TSPlib" [35] is 2103. 25 Also, it should be possible to combine the N O ( p N) time exact 2D TST algorithm of <ref> [39] </ref> with the branch and bound programs to get the best of both worlds. If one does implement our TST algorithm, one may want to "clean up" the tour by performing, e.g., 2-opt or Lin-Kernighan as a postprocessing step.
Reference: [40] <author> W.D. Smith. </author> <title> How to find Steiner minimal trees in d-space. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 137-177, </pages> <year> 1992. </year>
Reference-contexts: Smith [39] showed how, by "searching over separators," to find the optimum TST for N points in the Euclidean plane in N O ( p N) steps. (Other geometrical graphs are calculable with the same technique, for example the minimum length triangulation.) Also in <ref> [40] </ref> he extended this to handle RSMT. Smith [39] showed how to find a -DNNG of N sites in the plane in time O (N log N )=; see also our theorem 46. <p> SMT: The best computer program so far [45] can solve problems with 140 random 27 sites in 2D. See also [17] for a program which can solve 55-site 2D RSMT problems. An impractical exact RSMT algorithm running in N O ( N) time is described in <ref> [40] </ref>; recently the author (Smith) has generalized this to N O (N 11=d ) in d dimensions while at the same time making it much more practical. <p> The worst case runtime behavior of their algorithm appears (!) to be doubly exponential: A B N . At present, however, the best available program for SMT in 3D <ref> [40] </ref>, can only solve 12-site SMTs. Thus again at least on the surface it seems as though our algorithm cannot have much practical impact in 2D. Looking more deeply, again it may be possible by combining our techniques with the competing ones, to get a practical impact. <p> Looking more deeply, again it may be possible by combining our techniques with the competing ones, to get a practical impact. By locally optimizing the SMT output by our algorithm with the aid of the Hwang O (N )-time 2D topology optimization algorithm described in <ref> [40] </ref> or the Smith multi-D topology optimization algorithm also described there, (see also [3]; also the exhaustive search algorithm of [45] may be used as a local optimizer by applying it to subtrees); and by using the competing exhaustive search algorithms to solve the small subproblems arising in our algorithm; it
Reference: [41] <author> Luca Trevisan. </author> <title> When Hamming meets Euclid: the approximability of geometric TSP and MST. </title> <booktitle> In Proceedings of the 29th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 21-29, </pages> <year> 1997. </year>
Reference-contexts: But in fact our runtime bounds are the same as this "impossible" result but with the o changed to an O. Finally, we can make it plausible that the dependence of our TST running time on d with s held fixed is close to optimal. Trevisan <ref> [41] </ref> showed that approximating TST to within any sufficiently small constant factor for N sites 3 "1-sided hybrid" algorithms are also possible: The "strong pseudoprime test" is Las Vegas for proving compositeness, but only Monte Carlo for verifying primality.
Reference: [42] <author> P.M. Vaidya. </author> <title> Approximate minimum weight match ing on points in k-dimensional space. </title> <journal> Algorithmica, </journal> <volume> 4(4) </volume> <pages> 569-583, </pages> <year> 1989. </year>
Reference-contexts: Vaidya in section 6.1 of his paper <ref> [42] </ref> shows how to find a min-length odd-valent subgraph in a V -vertex E-edge spanner graph by solving a min-weight matching problem in an easily generated associated graph (in which a full matching must exist) with 2E + V vertices and 5E + 5V edges.
Reference: [43] <author> P.M. Vaidya. </author> <title> An optimal algorithm for the all nearest-neighbors problem. </title> <journal> Discrete and computational geometry, </journal> <volume> 4 </volume> <pages> 101-115, </pages> <year> 1989. </year>
Reference-contexts: Smith [39] showed how to find a -DNNG of N sites in the plane in time O (N log N )=; see also our theorem 46. Vaidya <ref> [43] </ref> showed how to find ANND in O (d) d N + O (dN log N ) time by a tree-of-boxes algorithm 9 . <p> or b's nearest neighbor distance, then get rid of it and replace it with the two nearest neighbor distances. 2 The ANNfi2 graph has 2 O (d) N edges 23 and is computable in d O (d) N log N steps using a variant of Vaidya's all nearest neighbor algorithm <ref> [43] </ref>. Again we may use spanners of its connected components. In any metric space the EC graph consists of a union of disjoint single edges and "L's" (2-edge paths). (Proof: if there were a ( 3)-edge path in EC, you could remove the middle edge.
Reference: [44] <author> David M. Warme. </author> <title> A new exact algorithm for rec tilinear steiner trees. </title> <booktitle> In International Symposium on Mathematical Programming, </booktitle> <address> Lausanne, Switzer-land, </address> <year> 1997. </year>
Reference-contexts: Later note: A recent breakthrough (for practical purposes) is a program by D.Warme <ref> [44] </ref>, in cooperation with P.Winter and M.Zachariasen, which can now solve 2000-site 2D SMT and 1000-site 2D RSMT problems. The worst case runtime behavior of their algorithm appears (!) to be doubly exponential: A B N .

References-found: 44

