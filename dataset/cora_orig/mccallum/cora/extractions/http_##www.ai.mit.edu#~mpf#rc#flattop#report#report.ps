URL: http://www.ai.mit.edu/~mpf/rc/flattop/report/report.ps
Refering-URL: 
Root-URL: 
Title: AN ADIABATIC LOGIC IMPLEMENTATION OF A REVERSIBLE CELLULAR AUTOMATON  
Author: Michael P. Frank Nicole Love 
Address: Cambridge, MA 02139  
Affiliation: Artificial Intelligence Laboratory Massachusetts Institute of Technology  
Abstract: Adiabatic circuit techniques have lately been a topic of interest in the low-power design community, but nobody has yet designed a complete computer using only adiabatic logic. We have (almost) completed the circuit design and layout of a simple fully-adiabatic processing element (PE) that nevertheless comprises a general-purpose parallel processor when tiled in large arrays. This PE implements the local update rule for Margolus's Billiard Ball Model Cellular Automaton [3], a reversible universal model of computation. The PE is implemented using Younis and Knight's SCRL logic family [1]. Our cell contains just 292 transis tors and tiles on a 131 fi 117 m 2 grid in the HP14 process. Hand-calculations indicate that our adiabatic circuit can operate with up to about 1000 times the energy efficiency of the equivalent standard CMOS circuit. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Younis, S. G. and Knight, Jr., T. F., </author> <title> "Asymptotically Zero Energy Split-Level Charge Recovery Logic." </title> <booktitle> International Workshop on Low Power Design, </booktitle> <pages> pp. 177-182, </pages> <year> 1994. </year> <note> http://www.ai.mit.edu/people/tk/ lowpower/low94.ps </note>
Reference-contexts: In the following sections, we note a few facts about SCRL and BBMCA, describe our circuit design and layout, and provide hand-analysis indicating the power savings achieved by our circuit. 2. SCRL SCRL <ref> [1, 2] </ref> has several advantages over its predecessors in adiabatic logic. The main one is that SCRL can be pipelined, allowing for continuously-running, sequential adiabatic circuits. This pipelining requires that each gate be paired with another gate to compute the reverse function. <p> Normal SCRL stages cannot compute non-inverting logic functions, but it is actually possible to compute non-inverting functions by providing an extra pair of "fast" rails that split before the main rails do, and re-combine after the main ones. (See <ref> [1, 2] </ref>.) These rails can be used to drive an extra level of logic (such as inverters) to feed the inputs of the main logicq. In this way, a single SCRL stage can compute any logic function. We used this trick to help make our circuits simpler.
Reference: [2] <author> Younis, S. G., </author> <title> Asymptotically Zero Energy Computing Using Split-Level Charge Recovery Logic, </title> <type> Ph.D. Thesis, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <year> 1994. </year>
Reference-contexts: In the following sections, we note a few facts about SCRL and BBMCA, describe our circuit design and layout, and provide hand-analysis indicating the power savings achieved by our circuit. 2. SCRL SCRL <ref> [1, 2] </ref> has several advantages over its predecessors in adiabatic logic. The main one is that SCRL can be pipelined, allowing for continuously-running, sequential adiabatic circuits. This pipelining requires that each gate be paired with another gate to compute the reverse function. <p> Normal SCRL stages cannot compute non-inverting logic functions, but it is actually possible to compute non-inverting functions by providing an extra pair of "fast" rails that split before the main rails do, and re-combine after the main ones. (See <ref> [1, 2] </ref>.) These rails can be used to drive an extra level of logic (such as inverters) to feed the inputs of the main logicq. In this way, a single SCRL stage can compute any logic function. We used this trick to help make our circuits simpler. <p> The wires going off the edges of the array can be folded back into the array to connect the two bit-planes, or fed out to neighboring chips in a larger array. 4. CIRCUIT DESIGN We decided to focus on so-called "3-phase SCRL" <ref> [2] </ref> for implementing our array because it is the simplest version of SCRL that doesn't depend on dynamic charge storage, and we wanted to be able to run the clocks arbitrarily slowly or stop them altogether without worrying about losing our logic values, in order to make testing easier.
Reference: [3] <author> Margolus, N. H., </author> <title> Physics and Computation, </title> <type> Ph.D. Thesis, </type> <institution> MIT Physics Department, </institution> <year> 1987. </year>
Reference-contexts: 1. INTRODUCTION Microscopic physical dynamics is invertible, which suggests that an optimal computation technology using this dynamics would be reversible as well <ref> [3] </ref>. Any operation that is not reversible is required by thermodynamics to dissipate energy k B T ln 2, where k B is Boltzmann's constant and T is the temperature in K, per bit of information discarded. <p> To make the project feasible, we chose the simplest par allel universal computer model we knew about, namely that of Margolus's Billiard Ball Model Cellular Automaton (BBMCA) <ref> [3] </ref>. It is not exactly the most convenient computer to program, but it is simple, universal, reversible, and scalable. In the following sections, we note a few facts about SCRL and BBMCA, describe our circuit design and layout, and provide hand-analysis indicating the power savings achieved by our circuit. 2.
References-found: 3

