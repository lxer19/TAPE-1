URL: ftp://ftp.cs.indiana.edu/pub/scheme-repository/doc/pubs/libscheme-vhll.ps.gz
Refering-URL: http://www.cs.indiana.edu/scheme-repository/doc.publications.html
Root-URL: http://www.cs.indiana.edu
Email: Brent.Benson@mail.csd.harris.com  
Title: libscheme: Scheme as a C Library  
Author: Brent W. Benson Jr. 
Affiliation: Harris Computer Systems  
Abstract: Because of its small size and simplicity, Scheme is often seen as an ideal extension or scripting language. While there are many Scheme implementations available, their interfaces are often complex and can get in the way of using the implementation as part of a larger software product. The libscheme library makes the Scheme language available as a C library. Its interface is through a single C header file and it is easily extended with new primitive procedures, new primitive types, and new syntax. It is portable to any system that has an ANSI C compiler and to which Hans Boehm's popular conservative garbage collector [1] has been ported. It has been used to build a variety of special purpose data manipulation tools, and as an extension language for an ethernet monitor.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Hans Boehm and M. Weiser. </author> <title> Garbage Collection in an Uncooperative Environment . Software Practice and Experience. </title> <journal> pp. </journal> <pages> 807-820. </pages> <month> September, </month> <year> 1988. </year>
Reference-contexts: of the first expression is returned. obj = scheme_read (stdin); result = SCHEME_CATCH_ERROR (scheme_eval (obj, env), 0); if (result == 0) - /* error handling code */ - else - scheme_write (stdout, result); - 4.8 Memory Allocation/Garbage Collection The libscheme library uses Hans Boehm and Alan Demers' conservative garbage collector <ref> [1] </ref>. It provides a replacement for the C library function malloc () called GC_malloc (). The storage that is allocated by GC_malloc () is subject to garbage collection.
Reference: [2] <author> Stephen Bourne. </author> <title> An Introduction to the UNIX Shell . Berkeley 4.3 UNIX User's Supplementary Documents. </title> <booktitle> USENIX Association. </booktitle>
Reference-contexts: 1 Introduction There is a long tradition of scripting languages in the Unix community, the canonical example being /bin/sh <ref> [2] </ref>. Scripting languages allow the programmer to express programming ideas at a high level, and can also be designed in such a way that the language interpreter can be included as an extension language inside of other programs.
Reference: [3] <editor> William Clinger and Jonathan Rees (Editors). </editor> <title> Revised 4 Report on the Algorithmic Language Scheme. </title> <note> Available by anonymous ftp from altdorf.ai.mit.edu. </note> <year> 1991. </year>
Reference-contexts: The libscheme library attempts to learn from Tcl's success by making Scheme <ref> [3] </ref> available as a C library and by providing simple ways to extend the language with new procedures and syntax. While Scheme is not as convenient as Tcl in the role of an interactive shell program, it has several advantages over Tcl with respect to writing scripts: 1. <p> Scheme demonstrates that a very small number of rules for forming expressions, with no restrictions on how they are composed, suffice to form a practical and efficient programming language that is flexible enough to support most of the major programming paradigms in use today. <ref> [3] </ref> These properties make Scheme a good general purpose programming language and also an ideal extension language.
Reference: [4] <author> Oliver Laumann. </author> <note> Reference Manual for the Elk Extension Language Kit . Available by anonymous ftp from tub.cs.tu-berlin.de. </note>
Reference-contexts: While in recent years there has been an explosion of general purpose extension and scripting languages (e.g., Python [6] and Elk <ref> [4] </ref>), one language has had a dramatic increase in popularity and seems to have become the de facto extension language. That language is Tcl [5].
Reference: [5] <author> John Ousterhout. </author> <title> Tcl: an Embeddable Command Language. </title> <booktitle> Proceedings of the Winter 1990 USENIX Conference. USENIX Association. </booktitle> <year> 1990. </year>
Reference-contexts: While in recent years there has been an explosion of general purpose extension and scripting languages (e.g., Python [6] and Elk [4]), one language has had a dramatic increase in popularity and seems to have become the de facto extension language. That language is Tcl <ref> [5] </ref>.
Reference: [6] <author> Guido van Rossum. </author> <note> Python Reference Manual . Release 1.0.2. Available by anonymous ftp from ftp.cwi.nl. </note> <year> 1994. </year>
Reference-contexts: While in recent years there has been an explosion of general purpose extension and scripting languages (e.g., Python <ref> [6] </ref> and Elk [4]), one language has had a dramatic increase in popularity and seems to have become the de facto extension language. That language is Tcl [5].
Reference: [7] <institution> DWARF Debugging Information Format . Unix International. </institution> <note> Available by anonymous ftp from dg-rtp.dg.com. </note> <year> 1994. </year>
Reference-contexts: The user can extend the interpreter by adding bindings to the global environment. Each binding can provide a new primitive written in C, a new syntax form, a new type, a constant, etc. 3.1 An Example DWARF is a full-featured and complex debugging information format <ref> [7] </ref>. Our example program, dwarfscheme, is an interface that allows the user to browse DWARF information in an object file by providing stubs to the libdwarf [8] library. Figure 2 shows a sample dwarfscheme dialogue.
Reference: [8] <institution> DWARF Access Library (libdwarf ). Unix International. </institution> <year> 1994. </year> <title> The Author Brent Benson received a BA in Mathematics from the University of Rochester 1990 and completed the work for his MS in Computer Science at the University of New Hampshire in 1992. He has been a senior software engineer in the small but feisty compiler group at Harris Computer Systems since 1992. </title>
Reference-contexts: Our example program, dwarfscheme, is an interface that allows the user to browse DWARF information in an object file by providing stubs to the libdwarf <ref> [8] </ref> library. Figure 2 shows a sample dwarfscheme dialogue. In this example the user invokes dwarfscheme, opens the file "a.out" for DWARF reading, defines a function for printing out debugging information entries (DIEs), and prints out the first DIE.
References-found: 8

