URL: http://www.cs.man.ac.uk/~tessaris/DL/docs/TechRep/TUB/TUB-FB13-KIT-105.ps.Z
Refering-URL: http://www.cs.man.ac.uk/~tessaris/DL/papers.html
Root-URL: http://www.cs.man.ac.uk
Email: cmk@cs.tu-berlin.de  
Title: of Object Descriptions in BACK  
Author: Carsten Kindermann 
Date: December 1992  
Address: PROJEKT KIT-BACK, FR 5-12 FRANKLINSTR. 28/29 D-1000 BERLIN 10  
Affiliation: TECHNISCHE UNIVERSIT AT BERLIN  
Note: Retraction  
Abstract: KIT REPORT 105 
Abstract-found: 1
Intro-found: 1
Reference: [B + 91] <author> Franz Baader et al. </author> <title> Terminological Knowledge Representation: A Proposal for a Terminological Logic. </title> <editor> In Bernhard Nebel, Christof Peltason, and Kai von Luck, editors, </editor> <booktitle> International Workshop on Terminological Logics, KIT Report 89, </booktitle> <pages> pages 120-128, </pages> <address> Technische Uni-versitat Berlin, Germany, </address> <month> August </month> <year> 1991. </year>
Reference: [BS85] <author> Ronald J. Brachman and James G. Schmolze. </author> <title> An overview of the KL-ONE knowledge representation system. </title> <journal> Cognitive Science, </journal> <volume> 9(2) </volume> <pages> 171-216, </pages> <month> April </month> <year> 1985. </year>
Reference: [CRM80] <author> Eugene Charniak, Christopher K. Riesbeck, and Drew V. McDermott. </author> <booktitle> Artificial Intelligence Programming. </booktitle> <publisher> Erlbaum, </publisher> <address> Hillsdale, N.J., </address> <year> 1980. </year>
Reference-contexts: The approach described here is also employed to enforce changes of the KB schema, i.e., concept and role redefinition, onto the KB. A description of this work is found in [Tho92]. 7 Related Work The work described in this report adopts a monotonic data dependency network management approach (see <ref> [CRM80, Chap. 16] </ref> or [Neb90, Sec. 6.6.1]). A data dependency network (DDN) basically consists of nodes, which denote believed propositions, justifications, which denote sets of propositions used in derivations, and the links between them. Justifications support nodes, and nodes participate in justifications.
Reference: [DBMP90] <author> Maria Damiani, Sandro Bottarelli, Manlio Migliorati, and Christof Peltason. </author> <title> Terminological Information Management in ADKMS. </title> <booktitle> In 32 ESPRIT '90 Conference Proceedings, </booktitle> <pages> pages 163-176. </pages> <publisher> Kluwer Aca--demic Publishers, </publisher> <address> Dordrecht, The Netherlands, </address> <year> 1990. </year>
Reference-contexts: An analysis of this approach revealed, however, that most objects are related to each other. For the evaluation we used a knowledge base constructed using the BACK system. The KB has been developed in an application in the business area <ref> [DBMP90] </ref>, and describes the organizational structure of the `Gruppo Ferruzzi', a large industrial holding. The KB contains 604 objects. Out of these 604 objects 143 objects are not related to any other object.
Reference: [Euz90] <author> Jerome Euzenat. </author> <title> Inference cache consistency in large object knowledge bases. </title> <institution> Rapport interne, Laboratoire ARTEMIS, Grenoble, France, </institution> <month> September </month> <year> 1990. </year>
Reference-contexts: In addition, BACK deals with abstraction and propagation of type information. In FPPD, dependencies are established between atomic propositions rather than entire object descriptions; on the other hand, justifications of dependencies are not maintained, which results in dependencies similar to our unlabeled version of DependsOn.Euzenat shows in <ref> [Euz90] </ref> that even in the presence of non-monotonic inferences a dedicated inference cache system can be superior to a standard TMS. He compares the two approaches for the object-based SHIRKA knowledge base management system.
Reference: [GMN84] <editor> Herve Gallaire, Jack Minker, and Jean-Marie Nicolas. </editor> <title> Logic and databases: A deductive approach. </title> <journal> ACM Computing Surveys, </journal> <volume> 16(2) </volume> <pages> 153-185, </pages> <year> 1984. </year>
Reference-contexts: For generative systems, retraction of single facts requires to remove from the knowledge base also those facts that were derived in direct or indirect dependence on the retracted ones. 3 The terms generative and derivative are used in the context of deductive databases, cf. <ref> [GMN84] </ref>. 3 Processing Retractions of Object Descriptions We now propose a general retraction algorithm that meets the expectations formu lated above.
Reference: [Kin90] <author> Carsten Kindermann. </author> <title> Class Instances in a Terminological Framework An Experience Report. </title> <editor> In H. Marburger, editor, GWAI-90. </editor> <booktitle> 14th German Workshop on Artificial Intelligence, </booktitle> <pages> pages 48-57. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <month> September </month> <year> 1990. </year>
Reference-contexts: with an invalid NF C are processed on their own, and will eventually trigger the appropriate inference rules, BACK filters those objects out in Step (3.2). 6 For the details of object classification in BACK confer [QK90]; for a motivation of BACK's strategy of mixed forward-chained and backward-chained inferences see <ref> [Kin90] </ref>. 14 by the change of o1. There exists no inverse role to R1, so (3.3a) does not yield anything new.
Reference: [Kin92] <author> Carsten Kindermann. </author> <title> Retraction in Terminological Knowledge Bases. </title> <editor> In B. Neumann, editor, </editor> <booktitle> Proceedings of the 10th European Conference on Artificial Intelligence, </booktitle> <pages> pages 420-424. </pages> <publisher> Wiley, </publisher> <month> August </month> <year> 1992. </year>
Reference: [Mac91] <author> Robert MacGregor. </author> <type> Personal Communication. </type> <month> November </month> <year> 1991. </year>
Reference-contexts: On the interface level, we provide the retraction operation forget/1, which retracts from the KB the fact passed as an argument. An important restriction is that we only allow for retraction of facts explicitly told by the user, a restriction made in many terminological systems (see e.g. <ref> [PS91, Mac91] </ref>). Following Nebel [Neb90], we also use the term literal retraction. From the system we expect that, after a successful processing of a forget operation, system answers reflect a state as if the retracted description had never existed. <p> With respect to retractability of object descriptions there are some similarities: 13 As BACK, both systems permit only retraction of explicitly told 13 There is no published material on the retraction mechanisms in CLASSIC and LOOM; the details mentioned here are from personal communications <ref> [Mac91, PS91] </ref>. 30 information, and both systems are implemented using a generative technique. 14 Differences are caused by the expressivity of the supported languages. <p> LOOM aims to integrate general artificial intelligence programming techniques into its framework; as a consequence, a DDN like approach had to be replaced by truth-maintenance of arbitrary first-order logic predicates <ref> [Mac91] </ref>. CLASSIC, on the other hand, supports a more restricted language than the one discussed in this report; essentially, it does not provide defined roles. Retraction can be handled more easily since the possible sources for dependencies between objects are limited.
Reference: [MB92] <author> Robert M. MacGregor and David Brill. </author> <title> Recognition algorithms for the loom classifier. </title> <booktitle> In Proceedings of the 11th National Conference of the American Association for Artificial Intelligence, </booktitle> <address> San Jose, </address> <institution> Cal., </institution> <year> 1992. </year>
Reference-contexts: Dependencies between objects are maintained to decide when this has to be done. A single dependency is established by the reasoning component whenever an application of an inference rule at one object causes a change 14 For LOOM also exist newer experiments with derivative implementation techniques, cf. <ref> [MB92] </ref>. 31 of the NF C of another object; redundant dependencies are withdrawn. To each dependency its justification is attached in order to be able to reduce the number of objects considered as unsafe.
Reference: [McA82] <author> David A. McAllester. </author> <title> Reasoning utility package user's manual. </title> <type> AI Memo 667, </type> <institution> AI Laboratory, Massachusetts Institute of Technology, </institution> <address> Cambridge, Mass., </address> <month> April </month> <year> 1982. </year>
Reference-contexts: In the context of terminological systems, an early solution to the retraction problem was provided by KL-TWO [Vil85]. It consisted of a purely terminological component (not supporting object management), and, as its assertional component, a version of RUP <ref> [McA82] </ref>, a reason-maintenance system supporting propositional logic. Although an elegant solution with respect to the retraction problem, the two components did not match very well (cf. [Neb90, p. 64] for details).
Reference: [Neb90] <author> Bernhard Nebel. </author> <title> Reasoning and Revision in Hybrid Representation Systems, </title> <booktitle> volume 422 of Lecture Notes in Artificail Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1990. </year>
Reference-contexts: An important restriction is that we only allow for retraction of facts explicitly told by the user, a restriction made in many terminological systems (see e.g. [PS91, Mac91]). Following Nebel <ref> [Neb90] </ref>, we also use the term literal retraction. From the system we expect that, after a successful processing of a forget operation, system answers reflect a state as if the retracted description had never existed. <p> In this case no extra maintenance of object dependencies is required, yet far too many objects are processed. Reason maintenance or truth-maintenance systems (TMS) constitute the other extreme. As Nebel points out in <ref> [Neb90, Sec. 6.6] </ref>, TMSs are able to precisely identify propositions that become invalid when the maintained knowledge is changed. <p> Being designed to be used in general problem solving contexts, however, they require an overhead, in terms of search procedures and maintained data, that is inappropriate for our purpose <ref> [Neb90, p. 186] </ref>: 6 * TMSs support the problem solving task by implementing strategies to ex-plore large search spaces, and to find one, many, or all solutions to a given problem. * In TMS, derived propositions are perhaps marked as disbelieved or no longer derivable, but they are not deleted. <p> A description of this work is found in [Tho92]. 7 Related Work The work described in this report adopts a monotonic data dependency network management approach (see [CRM80, Chap. 16] or <ref> [Neb90, Sec. 6.6.1] </ref>). A data dependency network (DDN) basically consists of nodes, which denote believed propositions, justifications, which denote sets of propositions used in derivations, and the links between them. Justifications support nodes, and nodes participate in justifications. <p> It consisted of a purely terminological component (not supporting object management), and, as its assertional component, a version of RUP [McA82], a reason-maintenance system supporting propositional logic. Although an elegant solution with respect to the retraction problem, the two components did not match very well (cf. <ref> [Neb90, p. 64] </ref> for details). The BACK system is more closely related to the systems CLASSIC of Bell Labs, and LOOM of USC/ISI (see the descriptions in [Ric91]), in that the components that deal with the object level have been especially designed to match the supported terminological logics.
Reference: [OK88] <author> Bernd Owsnicki-Klewe. </author> <title> Configuration as a consistency maintenance task. </title> <editor> In W. Hoeppner, editor, GWAI-88. </editor> <booktitle> 12th German Workshop on Artificial Intelligence, </booktitle> <pages> pages 77-87. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1988. </year>
Reference-contexts: In DDNs, therefore, justifications support atomic propositions, 12 For a description of implication links in BACK cf. [QK90]; BACK basically follows the approach described in <ref> [OK88] </ref>. 29 while in our case they are supporting entire normal forms. Furthermore, in a DDN approach, also inference rules participate in justifications, while our approach abstracts from the applied inference rules.
Reference: [OKe90] <author> Richard A. O'Keefe. </author> <title> The Craft of Prolog. Logic Programming Series. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference: [PS91] <author> Peter Patel-Schneider. </author> <type> Personal Communication. </type> <month> November </month> <year> 1991. </year> <month> 33 </month>
Reference-contexts: On the interface level, we provide the retraction operation forget/1, which retracts from the KB the fact passed as an argument. An important restriction is that we only allow for retraction of facts explicitly told by the user, a restriction made in many terminological systems (see e.g. <ref> [PS91, Mac91] </ref>). Following Nebel [Neb90], we also use the term literal retraction. From the system we expect that, after a successful processing of a forget operation, system answers reflect a state as if the retracted description had never existed. <p> With respect to retractability of object descriptions there are some similarities: 13 As BACK, both systems permit only retraction of explicitly told 13 There is no published material on the retraction mechanisms in CLASSIC and LOOM; the details mentioned here are from personal communications <ref> [Mac91, PS91] </ref>. 30 information, and both systems are implemented using a generative technique. 14 Differences are caused by the expressivity of the supported languages. <p> Retraction can be handled more easily since the possible sources for dependencies between objects are limited. This leads to different choices for the details of dependency maintenance <ref> [PS91] </ref>: CLASSIC stores at each object what information has been broadcasted to, and what has been received from, other objects. This corresponds to making DependsOn entries labeled both with their justifications and consequences, and to retaining redundant dependencies.
Reference: [PSKQ89] <author> Christof Peltason, Albrecht Schmiedel, Carsten Kindermann, and Joachim Quantz. </author> <title> The BACK System Revisited. </title> <type> KIT Report 75, </type> <institution> Technische Universitat Berlin, Germany, </institution> <month> September </month> <year> 1989. </year>
Reference: [PvLK91] <author> Christof Peltason, Kai von Luck, and Carsten Kindermann. </author> <title> Proceedings of the Terminological Logic Users Workshop. </title> <type> KIT Report 95, </type> <institution> Technische Universitat Berlin, Germany, </institution> <month> December </month> <year> 1991. </year>
Reference: [QK90] <author> Joachim Quantz and Carsten Kindermann. </author> <title> Implementation of the BACK System Version 4. </title> <type> KIT Report 78, </type> <institution> Department of Computer Science, Technische Universitat Berlin, </institution> <address> Berlin, Germany, </address> <month> September </month> <year> 1990. </year>
Reference-contexts: This case of adding facts to the description of an object is already handled in the normal working mode by making the conjunction of the old description and the new facts, cf. <ref> [QK90] </ref>. Only when facts are retracted, previously derived and subsequently cached facts may have to be removed. 3.1 Minimal and Maximal Approaches Before going into details, let us consider two extremes between which we will develop our solution. <p> The first two items roughly correspond to the functionality of the released BACK V4 described <ref> [QK90] </ref>. The treatment of defined roles has been proposed by Quantz [Qua90], and has been integrated into the new system release BACK V5. The corresponding DependsOn entries are specified in Fig. 3. <p> C of o9, however, is valid; o9 has not been affected 5 Because objects with an invalid NF C are processed on their own, and will eventually trigger the appropriate inference rules, BACK filters those objects out in Step (3.2). 6 For the details of object classification in BACK confer <ref> [QK90] </ref>; for a motivation of BACK's strategy of mixed forward-chained and backward-chained inferences see [Kin90]. 14 by the change of o1. There exists no inverse role to R1, so (3.3a) does not yield anything new. <p> The dependency module provides the functionality to create single DependsOn entries, to add and remove them from the DependsOn relation, and to determine unsafe objects. The 11 The implementation of BACK Version 4, the basis for Version 5, is described in <ref> [QK90] </ref>. 27 latter is an implementation of function depending-objects/1 of Fig. 2. For the computation of the transitive closure of direct dependencies it uses an adapted version of the Warshall algorithmin the Prolog version given in [OKe90]into which the call of directly-depending-objects/1 has been unfolded. <p> In DDNs, therefore, justifications support atomic propositions, 12 For a description of implication links in BACK cf. <ref> [QK90] </ref>; BACK basically follows the approach described in [OK88]. 29 while in our case they are supporting entire normal forms. Furthermore, in a DDN approach, also inference rules participate in justifications, while our approach abstracts from the applied inference rules.
Reference: [Qua90] <author> Joachim Quantz. </author> <title> Modeling and Reasoning with Defined Roles in BACK. </title> <type> KIT Report 84, </type> <institution> Technische Universitat Berlin, Germany, </institution> <month> November </month> <year> 1990. </year>
Reference-contexts: The first two items roughly correspond to the functionality of the released BACK V4 described [QK90]. The treatment of defined roles has been proposed by Quantz <ref> [Qua90] </ref>, and has been integrated into the new system release BACK V5. The corresponding DependsOn entries are specified in Fig. 3. Note that Fig. 1 contains only those rules that affect other objects; for the complete set of rules see Appendix B. <p> R 1 :=Rj C 1 for each y with (y; x) * R: (12.2) (with CvC 1 ) add (y; x) * R 1 ; triggered by assertion of (x; y) * R (Rules 1 to 7), or x * C (Rule 8) resp. The rules are adapted from <ref> [Qua90] </ref>; Rules 5, 6, and 7 have been newly added. respectively). 4 For the application of Rules 1.1 to 1.7 of Fig. 1 it is assumed that a new filler relation (x; y) * R (for Rule 1.8 x * C) is asserted by the user yielding the specified inferences. <p> Rule 1.1 is applied, and yields (x; z) * S3. As a dependency we record DependsOn (x; y) since if (y; z) * S2 is deleted from y also x has to be processed again. 2 The actual implementation of defined roles differs from the description in <ref> [Qua90] </ref>. Roughly, deciding on a syntactic basis (i.e., role introductions) for which roles to assert new fillers left out too many cases; the syntactic criteria have been exchanged for semantic criteria (i.e., role subsumption). The difference between [Qua90] and the implementation, however, does not affect our discussion of the 4 Throughout <p> again. 2 The actual implementation of defined roles differs from the description in <ref> [Qua90] </ref>. Roughly, deciding on a syntactic basis (i.e., role introductions) for which roles to assert new fillers left out too many cases; the syntactic criteria have been exchanged for semantic criteria (i.e., role subsumption). The difference between [Qua90] and the implementation, however, does not affect our discussion of the 4 Throughout the report, variables and concrete entities will not be distinguished syntactically; it should always be obvious from the context what is meant. 9 process x: IF x's user definition has been changed THEN recompute N F U
Reference: [Ric91] <author> Charles Rich. </author> <title> Special issue on implemented knowledge representation and reasoning systems. </title> <journal> SIGART Bulletin, </journal> <volume> 2(3), </volume> <month> June </month> <year> 1991. </year>
Reference-contexts: Although an elegant solution with respect to the retraction problem, the two components did not match very well (cf. [Neb90, p. 64] for details). The BACK system is more closely related to the systems CLASSIC of Bell Labs, and LOOM of USC/ISI (see the descriptions in <ref> [Ric91] </ref>), in that the components that deal with the object level have been especially designed to match the supported terminological logics.
Reference: [Tho92] <author> Jan Thomsen. </author> <title> Schema evolution and its consequences for a terminological knowledge base. </title> <type> Unpublished Draft, </type> <year> 1992. </year> <title> (A report on the subject is expected for summer 1993.) </title>
Reference-contexts: In this case it is sufficient to keep the more special dependency d2 (cf. also <ref> [Tho92] </ref>). It is easy to see that x1=x2 still will be determined as unsafe correctly: The withdrawn d1 would become unsafe if NF U (y1=y2)6v p1. Since p2 v p1 it immediately follows that NF U (y1=y2)6v p2. <p> have reached one of our initial goals: to keep the normal form data structures independent of data that has to be maintained solely for the purpose of handling retractions. 6.2 Dependency Module All data structures and functionality concerned with object dependencies are encapsulated in a separate dependency module (cf. also <ref> [Tho92] </ref>). The dependency module provides the functionality to create single DependsOn entries, to add and remove them from the DependsOn relation, and to determine unsafe objects. <p> The approach described here is also employed to enforce changes of the KB schema, i.e., concept and role redefinition, onto the KB. A description of this work is found in <ref> [Tho92] </ref>. 7 Related Work The work described in this report adopts a monotonic data dependency network management approach (see [CRM80, Chap. 16] or [Neb90, Sec. 6.6.1]).
Reference: [Vil85] <author> Marc B. Vilain. </author> <title> The restricted language architecture of a hybrid representation system. </title> <booktitle> In Proceedings of the 9th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 547-551, </pages> <address> Los Angeles, </address> <institution> Cal., </institution> <month> August </month> <year> 1985. </year>
Reference-contexts: In the context of terminological systems, an early solution to the retraction problem was provided by KL-TWO <ref> [Vil85] </ref>. It consisted of a purely terminological component (not supporting object management), and, as its assertional component, a version of RUP [McA82], a reason-maintenance system supporting propositional logic.
Reference: [VM86] <author> Kris Van Marcke. </author> <title> A parallel algorithm for consistency maintenance in knowledge representation. </title> <booktitle> In Proceedings of the 7th European Conference on Artificial Intelligence, </booktitle> <pages> pages 278-290, </pages> <address> Brighton, England, </address> <month> July </month> <year> 1986. </year> <month> 34 </month>
Reference-contexts: underlying KB (in contrast to derivative implementations that recompute derivable facts each time they are required). 3 Caching of inferred data may happen as part of precomputation of inferences at assertion time, or in a lazy evaluation mode whenever a query leads to the deduction of new facts (see e.g. <ref> [VM86] </ref>). <p> In the literature, more support can be found for our reservation about employing standard truth-maintenance systems for implementing retractability of knowledge base facts (see Sec. 3.1). Van Marcke develops a consistency maintenance system called FPPD to support management of cached inference results <ref> [VM86] </ref>. FPPD distinguishes primitive values, which are given explicitly, and computed values, which depend on the execution of functions and rely on the validity of the functions' argument values.
References-found: 23

