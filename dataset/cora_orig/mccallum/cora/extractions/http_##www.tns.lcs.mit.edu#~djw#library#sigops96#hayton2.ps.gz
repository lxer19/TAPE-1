URL: http://www.tns.lcs.mit.edu/~djw/library/sigops96/hayton2.ps.gz
Refering-URL: http://www.tns.lcs.mit.edu/~djw/library/sigops96/index.html
Root-URL: 
Email: fRichard.Hayton, Ken.Moodyg@cl.cam.ac.uk  
Title: An Open Architecture for Secure Interworking Services  
Author: Richard Hayton and Ken Moody 
Address: Pembroke Street, Cambridge CB2 3QG, United Kingdom  
Affiliation: University of Cambridge Computer Laboratory  
Abstract: There is a developing need for applications and distributed services to cooperate or inter-operate. Current mechanisms can hide the heterogeneity of host operating systems and abstract the issues of distribution and object location. However, in order for systems to inter-operate securely there must also be ways to hide differences in security policies, or at least to support negotiation between them. Other proposals for the interworking of security mechanisms have focussed on the enforcement of access policy at the expense of flexibility of expression of policy. This work describes a new architectural approach to security. The key idea is that a process is the universal client entity; a process may act on behalf of an identified individual as in traditional security schemes. More generally, a process may adopt an application-specific name or role, and this is used as the basis for authentication in Oasis. A service may then be written in terms of service-specific categories of clients, decoupled from the mechanisms used to specify and enforce access control policy. This approach allows great flexibility when integrating a number of services, and reduces the mismatch of policies that is common in heterogeneous systems. In addition, Oasis services may be integrated with alternative authentication and access control schemes, providing a truly open architecture. A flexible security definition is meaningless if not backed by a robust and efficient implementation. Oasis has been fully implemented, and is inherently distributed and scalable. In this paper we describe the general approach then concentrate on revocation, where security designs are most often criticised. Oasis is unique in supporting the rapid and selective revocation of privileges which can cascade between services and organisations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Morris Sloman, </author> <title> Policy Driven Management for Distributed Systems, In Journal of Network and Systems Management, </title> <publisher> Plenum Press, </publisher> <month> 2(4) </month> <year> 1994 </year>
Reference: [2] <author> R. Hayton, OASIS, </author> <title> An Open Architecture for Secure Interworking Services, </title> <type> University of Cambridge PhD thesis, Technical Report 399. </type> <year> 1996. </year>
Reference-contexts: In the second we consider the implementation of this scheme, with particular attention to the implementation of rapid, selective revocation of role membership (and hence access rights). A fuller description of the Oasis architecture can be found in <ref> [2] </ref>. 2 Policies and Proofs Access control is about determining if a request from a process is to be honoured. Requests do not come directly from human users, although it may be appropriate to express access control policy as if they did. <p> When policies from other services are combined, reasoning is more difficult. However, as RDL is an expressive language, it is often the case that alternative policies may be converted to RDL. Even if this does not aid implementation, it greatly simplifies reasoning about interacting policies. See <ref> [2, chapter 3] </ref> for a detailed treatment of the conversion of UNIX ACLs to RDL statements. 13 Conclusions There are two primary access control issues; the specification of access policy and the enforcement of that policy.
Reference: [3] <author> Butler Lampson, Martin Abadi, Michael Burrows and Edward Wobber, </author> <title> A Calculus for Access-Control in Distributed Systems, </title> <journal> In ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(4) </volume> <pages> 706-734, </pages> <year> 1993 </year>
Reference-contexts: All that is required is that a suitable statement is available during the access check and that that the file service believes that the statement is valid <ref> [3] </ref>. This is the basic mechanism used in Oasis. Client processes obtain certified statements from services and use them as credentials when accessing other services.
Reference: [4] <author> Li Gong. </author> <title> A secure identity-based capability system. </title> <booktitle> In Proceedings of the 1989 Symposium on Security and Privacy, </booktitle> <pages> pages 56-63. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1989. </year>
Reference-contexts: Finally, a field within the certificate is used to determine if the certificate has been revoked. The digital signature is a function of the certificate text, the process identifier and the issuing service. This is based on that used in <ref> [4] </ref> and ensures that a certificate cannot be `stolen' or used out of context. Unlike other schemes, in Oasis the only function of the digital signature is to check that the signature is not forged.
Reference: [5] <author> R. Hayton, J. Bacon, John Bates, and K. Moody, </author> <title> Using Events to Build Large Scale Distributed Applications, </title> <booktitle> ACM SIGOPS European Workshop, </booktitle> <month> September 96. </month>
Reference-contexts: Of course, the certificate is only usable in one instance of the meeting service and the Chair certificate is useless once the meeting finishes. 1 This is described in a companion paper at this workshop <ref> [5] </ref> 10 The Effect of Failures Event notification between servers may be delayed indefinitely by network congestion or failure. Additionally, either of the parties may fail and restart independently. These situations must be taken into account in the design of any distributed system involving events.
References-found: 5

