URL: ftp://ftp.cse.unsw.edu.au/pub/doc/papers/UNSW/9503.ps.Z
Refering-URL: http://www.cse.unsw.edu.au/school/research/tr.html
Root-URL: http://www.cse.unsw.edu.au
Email: email: jochen.liedtke@gmd.de  email: kevine@vast.unsw.edu.au  
Title: Guarded Page Tables on the MIPS R4600  
Author: Jochen Liedtke Kevin Elphinstone 
Note: Communicated by Jayasooriah  
Date: 23 NOVEMBER 1995  
Address: SET-RS, Schlo Birlinghoven, 53757 Sankt Augustin, Germany  Sydney 2052, NSW, Australia  
Affiliation: GMD German National Research Center for Information Technology GMD  School of Computer Science and Engineering The University of New South Wales  
Pubnum: UNSW-CSE-TR-9503  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> Alberto Bartoli, Sape J. Mullender, and Martijn van der Valk. </author> <title> Wide-address spaces | eploring the design space. </title> <type> Technical Report Pegasus paper 92-3, </type> <institution> University of Cambridge Computer Laboratory, </institution> <year> 1992. </year> <month> 26 </month>
Reference: [2] <author> J. S. Chase, H. M. Levy, M. J. Freely, and E. D. Lazowska. </author> <title> Sharing and protection in a single address space operating system. </title> <journal> ACM Transactions on Computer Systems, </journal> <month> November </month> <year> 1994. </year>
Reference: [3] <author> A. Dearle, R. di Bona, J. Farrow, F. Henskens, A. Lindstrom, J. Rosenberg, and F. Vaughan. Grasshopper: </author> <title> An othogobnally persistent operating system. </title> <type> Technical Report GH-03, </type> <institution> Basser Dept. Computer Science, University of Sydney, </institution> <year> 1994. </year>
Reference: [4] <author> Robin Fairbairns. </author> <title> Pegasus summary report, kernel work package. </title> <type> Technical Report Pegasus paper 93-1, </type> <institution> University of Cambridge Computer Laboratory, </institution> <year> 1993. </year>
Reference: [5] <author> G. Heiser, K. Elphinstone, S. Russell, and G. R. Hellestrand. </author> <title> A distributed single address-space operating system supporting persistence. </title> <type> SCS&E Report 9302, </type> <institution> Univ. of New South Wales, School of Computer Science, Kensington, Australia, </institution> <month> March </month> <year> 1993. </year>
Reference: [6] <author> Jerry Huck and Jim Hays. </author> <title> Architectural Support for Translation Table Management in Large Address Space Machines. </title> <booktitle> In Proceedings of the 20th International Symposium on Computer Architecture, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: Refill software can overwrite selected TLB entries or use a hardware provided mechanism to overwrite a randomly selected entry. 13 4.1 TLB Refill in Detail TLB refill has been measured contributing up to 40% of total execution time <ref> [6] </ref> in some applications. While such high contributions are not normal, it is none the less important to minimise TLB refill costs as much as possible. Before presenting or analysing any TLB refill routines, the basic cost of taking a null exception (C excpt ) needs to be determined.
Reference: [7] <institution> Integrated Device Technology, Inc. </institution> <note> IDT79R4600 ORION Hardware User's Manual, </note> <month> October </month> <year> 1993. </year>
Reference-contexts: This is the cost of taking an exception that simply performs an exception return (eret) instruction. An exception generating instruction causes execution to begin, at the appropriate exception vector, when it reaches the fifth stage of the pipeline <ref> [7] </ref>: cost 4 cycles. Assuming eret has a delay slot similar to a branch or jump, it costs 2 cycles. Thus C excpt = 6 cycles. Refill|Virtual Array To serve as a reference, the best case TLB refill is presented. However before presentation, four coprocessor 0 (CP0) registers need introducing. <p> The best case TLB refill routine is: 14 GVDC 111324 34 dmfc0 k0, XContext nop ld k0,[k0+8] dmtc0 k1,EntryLo0 dmtc0 k0,EntryLo1 nop tlbwr ; 1 cycle slip <ref> [7] </ref> Assuming the ideal situation, no cache misses and no second level TLB misses on the virtual array, the timing of the routine is 9 cycles.
Reference: [8] <author> J. Liedtke. </author> <title> Some theorems about guarded page tables. Arbeitspapiere der GMD No. </title> <type> 792, </type> <institution> German National Research Center for Computer Science (GMD), Sankt Augustin, </institution> <year> 1993. </year>
Reference-contexts: If the table walking code is not in the instruction cache, another 2p penalty cycles may occur. Since, within one address space, the R4600 supports 40-bit addresses and the smallest page is 4K, no more than (40 12)=4 = 7 translation steps should be necessary <ref> [8] </ref> per translation. Recall that the required steps can vary from page to page. Less than 7 steps are required in very sparse or in contiguous regions. It seems reasonable to expect 3 to 7 steps, depending on OS strategy and type of application.
Reference: [9] <author> J. Liedtke. </author> <title> Address space sparsity and fine granularity. </title> <booktitle> In 6th SIGOPS European Workshop, </booktitle> <pages> pages 78-81, </pages> <address> Schlo Dagstuhl, Germany, </address> <month> September </month> <year> 1994. </year> <note> also in Operating Systems Review 29, </note> <month> 1 (Jan. </month> <year> 1995), </year> <pages> 87-90. </pages>
Reference: [10] <author> J. Liedtke. </author> <title> Page table structures for fine-grain virtual memory. </title> <journal> IEEE Technical Committee on Computer Architecture Newsletter, pages xx-xx, </journal> <note> xx 1994. also published as Arbeitspapier der GMD No. 872, </note> <institution> German National Research Center for Computer Science (GMD), Sankt Augustin, </institution> <year> 1993. </year>
Reference: [11] <author> J. Liedtke. </author> <title> Some theorems about restricted guarded page tables. Arbeitspapiere der GMD No. </title> <type> 834, </type> <institution> German National Research Center for Computer Science (GMD), Sankt Augustin, </institution> <year> 1994. </year>
Reference: [12] <author> Kevin Murray, Tim Wilkinson, Peter Osmon, Ashley Saulsbury, Tom Stiemerling, and Paul Kelly. </author> <title> Design and Implementation of an Object-Oriented 64-bit Single Address Space Microkernel. </title> <type> Technical Report 9, </type> <institution> SARC, Dept. Computer Science, City University, </institution> <address> London, </address> <year> 1993. </year>
Reference: [13] <author> D. Nagle, R. Uhlig, T. Stanley, S. Sechrest, T. Mudge, and R. Brown. </author> <title> Design tradeoffs for software managed TLBs. </title> <booktitle> In 20th Annual International Symposium on Computer Architecture (ISCA), </booktitle> <pages> pages 27-38, </pages> <address> San Diego, CA, </address> <month> May </month> <year> 1993. </year>
Reference: [14] <author> R. L. </author> <title> Sites, editor. Alpha Architecture Reference Manual. </title> <institution> Digital Equipment Corporation, Maynard, </institution> <address> M.A., </address> <year> 1992. </year>
Reference: [15] <author> M Talluri, S. Kong, M. D. Hill, and D. A. Patterson. </author> <title> Tradeoffs in supporting two page sizes. </title> <booktitle> In 19th Annual International Symposium on Computer Architecture (ISCA), </booktitle> <pages> pages 415-424, </pages> <address> Gold Coast, Australia, </address> <month> May </month> <year> 1992. </year>
Reference: [16] <author> Madhusudhan Talluri and Mark D. Hill. </author> <title> Surpassing the TLB performance of su-perpages with less operating system support. </title> <booktitle> In Sixth Int'l Conf. on Architectural Support for Programming Languages and Operating Systems, </booktitle> <month> October </month> <year> 1994. </year>
Reference: [17] <author> Madhusudhan Talluri, Mark D. Hill, and Yousef A. Khalidi. </author> <title> A new page table for 64-bit address spaces. </title> <booktitle> In Proc. </booktitle> <address> SOSP'95, </address> <year> 1995. </year> <month> 27 </month>
References-found: 17

