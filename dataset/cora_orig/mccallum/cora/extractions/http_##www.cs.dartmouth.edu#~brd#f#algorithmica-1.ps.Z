URL: http://www.cs.dartmouth.edu/~brd/f/algorithmica-1.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~brd/www/
Root-URL: http://www.cs.dartmouth.edu
Title: Provably Good Approximation Algorithms for Optimal Kinodynamic Planning: Robots with Decoupled Dynamics Bounds 1  
Author: Bruce R. Donald Patrick Xavier 
Keyword: robot motion planning, optimal control, polynomial-time *-approximation algorithm, time-optimal trajectory, shortest path, kinodynamics, polyhedral obstacles  
Address: Ithaca, NY 14853-7501  Albuquerque NM 87185-0951  
Affiliation: Department of Computer Science, Cornell University,  Sandia National Laboratories,  
Abstract: We consider the following problem: given a robot system, find a minimal-time trajectory that goes from a start state to a goal state while avoiding obstacles by a speed-dependent safety-margin and respecting dynamics bounds. In [1] we developed a provably good approximation algorithm for the minimum-time trajectory problem for a robot system with decoupled dynamics bounds (e.g., a point robot in R 3 ). This algorithm differs from previous work in three ways. It is possible (1) to bound the goodness of the approximation by an error term *; (2) to polynomially bound the computational complexity of our algorithm; and (3) to express the complexity as a polynomial function of the error term. Hence, given the geometric obstacles, dynamics bounds, and the error term *, the algorithm returns a solution that is *-close to optimal and requires only a polynomial (in ( 1 * )) amount of time. We extend the results of [1] in two ways. First, we modify it to halve the exponent in the polynomial bounds from 6d to 3d, so that that the new algorithm is O , where N is the geometric complexity of the obstacles and c is a robot-dependent constant. Second, the new algorithm finds a trajectory that matches the optimal in time with an * factor sacrificed in the obstacle-avoidance safety margin. Similar results hold for polyhedral Cartesian manipulators in polyhedral environments. The new results indicate that an implementation of the algorithm could be reasonable, and a 1 This paper describes research done at the Computer Science Robotics Laboratory at Cornell University. preliminary implementation has been done for the planar case.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Canny, B. Donald, J. Reif, and P. Xavier. </author> <title> On the complexity of kinodynamic planning. </title> <booktitle> In Proceedings of the 29 th Annual Symposium on the Foundations of Computer Science, </booktitle> <pages> pages 306-316, </pages> <address> White Plains, New York, </address> <year> 1988. </year>
Reference-contexts: Therefore, it is reasonable to pursue approximation algorithms | algorithms that compute kinodynamic solutions that are "close" to optimal. However, for the many proposed approximate or heuristic techniques previous to <ref> [1, 5] </ref>, 3 there exist no bounds on the goodness of the resulting solutions, or on the time-complexity of the algorithms. The primary measure of optimality is time. <p> Thus, it is also natural to incorporate a safety measure into the meaning of "optimal". The problem formulation we introduced in <ref> [1] </ref> therefore includes a speed-dependent obstacle-avoidance margin in the problem parameters, along with start and goal states, dynamics bounds, and a set of obstacles. This margin of error is specified by a safety function. An optimal trajectory is thus a minimum-time trajectory that respects this safety criterion. <p> version of the problem allows an algorithm for kinodynamic planning to trade off running time against optimality in terms of: (a) execution time of the trajectory, (b) strictness in observing the safety margin, and (c) closeness to the desired start and goal states. (We note that (c) is implied in <ref> [1] </ref> but clarified in [6].) To analytically express this trade-off we parameterize closeness to an optimal solution with a tolerance * and bound algorithm running time in terms of this *. <p> For example, if there exists a "safe" optimal-time kinodynamic solution requiring time T opt , then the algorithm must find a "nearly-as-safe" solution that requires time at most (1 + *)T opt . <ref> [1] </ref> described the first provably-good polynomial-time approximation algorithm for 2-and 3-dimensional optimal kinodynamic planning, which they restricted to particle dynamics. Here, we modify and reanalyze the algorithm to improve both its its complexity bound and its accuracy. <p> Furthermore, 2 [2] have recently provided an exact algorithm for the 2D L 1 case. The algorithm runs in exponential time and polynomial space. 3 [5] is the journal revision of <ref> [1] </ref>. 1 we show that if there exists an optimal kinodynamic solution requiring time T opt , then the new algorithm will find an approximately optimal solution that requires time T opt , whereas [1] only show a bound of (1 + *)T opt . <p> The algorithm runs in exponential time and polynomial space. 3 [5] is the journal revision of <ref> [1] </ref>. 1 we show that if there exists an optimal kinodynamic solution requiring time T opt , then the new algorithm will find an approximately optimal solution that requires time T opt , whereas [1] only show a bound of (1 + *)T opt . These new results indicate that our theoretical algorithm might be reasonable for o*ine motion planning, and we have performed simple experiments with a preliminary implementation of this algorithm, as reported in [3]. <p> The state of a robot at a given time is its configuration and velocity. The general kinodynamic planning problem is, for a given robot, to find a motion that goes from a start state to a goal state while obeying kinodynamic constraints. We consider the following Cartesian problem from <ref> [1] </ref>. (See Figure 1.) A point mass in R d , where d 2 f2; 3g, must be moved from a start state S = (s; _ s) to a goal state G = (g; _g). <p> The theorem states that the algorithm runs in time polynomial in the geometric complexity N and in the resolution ( 1 * ), as does the result from <ref> [1] </ref>. Our new result is a significant improvement over the [1] result in both the approximation accuracy and the complexity bounds, as described in Section 1. <p> The theorem states that the algorithm runs in time polynomial in the geometric complexity N and in the resolution ( 1 * ), as does the result from <ref> [1] </ref>. Our new result is a significant improvement over the [1] result in both the approximation accuracy and the complexity bounds, as described in Section 1. Observing more closely, we note that an optimal kinodynamic planning problem K has three components: The combinatorial complexity of K is the number N of faces in the arrangement of obstacles O. <p> In the language of combinatorial optimization [8], we show that our algorithm is an *-approximation scheme that is fully polynomial in the combinatorial and algebraic complexity of the geometry, and pseudo-polynomial in the kinodynamic bounds. We also note that neither our algorithm nor the <ref> [1] </ref> algorithm guarantees that the approximate optimal safe solution will be near optimal safe solution except at its endpoints. In this respect, these trajectory planning algorithms are similar to Papadimitriou's fully polynomial approximation scheme for 3D Euclidian shortest paths [9]. <p> In this problem, a robot with wheels and a bounded minimum turning radius must be moved. To make the analogy clear, in our case, the minimum turning radius is 1 a max k _pk 2 . <ref> [1] </ref> (see also its revision, [5]) introduce the use of an *-approximation problem formulation to kinodynamic planning and provide the first provably good approximation algorithm for 2- and 3-dimensional optimal kinodynamic planning. <p> In Section 3, we describe the improved algorithm, with the changes presented in Section 3.2. In Section 4 we present the complexity analysis. 3 Kinodynamic Planning with L 1 Dynamics Bounds 3.1 The Basic Idea The basic idea behind our approach, beginning with <ref> [1] </ref>, is to reduce the problem of finding an approximately minimal-time trajectory to finding the shortest path in a directed graph. <p> The closeness of the approximations to S and G would improve as t decreases. This describes the gist of the <ref> [1] </ref> algorithm. The main burden in proving the correctness is to show how to choose an adequately small t that induces a reachability graph only polynomially large in 1 * . <p> This family of tolerances is given by the following lemma, which is proven in <ref> [1, 3, 5] </ref>. Note that because the lemma holds for any L p -norm, our results are easily extendible to safety margin given in any such norm. <p> The lemmas and theorem that follow and the terms in the algorithm give us Theorem 2.1. We note that the structure of the proof of the main result is similar to that in <ref> [1] </ref>. However, the Strong Tracking Lemma (4.2) shows how to choose a timestep and root 13 vertex so that some graph trajectory will track a an optimal trajectory, and not merely an optimal trajectory that has been *-time-rescaled, i.e., slowed down by a factor of *. <p> Furthermore, the proof of the lemma is significantly different from that of the Tracking Lemma of <ref> [1] </ref>. The main part of the our proof is based on tracking velocity functions and makes use of the velocity limits in the problem to bound the duration over which tracking error can increase, unlike the corresponding proof in the earlier work. The construction is done with explicit inductive definition. <p> Moreover, t is polynomial in x , v , 1 v max , and 1 a max . Specifically, t can be chosen as the largest t such that a max t divides v max and t min x ; 2a max : (13) As in <ref> [1] </ref>, it will be sufficient to consider the one-dimensional case, since we are using the L 1 -norm for dynamics bounds. Assume that trajectory r obeys the velocity and acceleration bounds. Let us call a function that describes the velocity of some grid-bang trajectory a grid-bang velocity function. <p> For a description of the modified safety-checking step, which extends [27] and [28], see our companion paper [7] or [3], which present our results for robots with coupled dynamics. Finally, the <ref> [1] </ref> approach and its descendents reduce the problem of finding an approximately optimal trajectory to that of finding the shortest path between two vertices of a uniform-cost graph whose vertices correspond to system states. <p> the complexity of the algorithm is O (c d (N + k)( 1 * ) 3d ), with the increased cost resulting from checking closeness to the sources or sinks. 6 Conclusions In this paper we obtain a provably good approximation algorithm for kinodynamic planning that extends the results of <ref> [1] </ref>. We modify their algorithm for Cartesian kinodynamic planning under L 1 dynamics bounds and apply new analysis techniques. <p> This claim was made in <ref> [1] </ref>, but without proof. While the general description here should convey the flavor of the result, the technical specifics are intended to accompany or follow a close reading Section 2 of [4]. <p> The algorithm runs in exponential time and polynomial space. 3. [5] is the journal revision of <ref> [1] </ref>. 4. In cases when v r (t ) j a max t a max t = a max 2 , the floor or ceiling must be chosen consistently. 5. Actually, it's the second incarnation of our first implementation. 6. We mostly follow the notation of [4] in this section.
Reference: [2] <author> J. Canny, A. Rege, and J. Reif. </author> <title> An exact algorithm for kinodynamic planning in the plane. </title> <booktitle> In Proceedings of the Sixth Annual Symposium on Computational Geometry, </booktitle> <pages> pages 271-280, </pages> <address> Berkeley, California, </address> <year> 1990. </year>
Reference-contexts: The new algorithm is has time complexity O * , where N is the geometric complexity of the environment and c depends on the dynamics and safety margin parameters; this halves the previous exponent of the ( 1 * ) term. Furthermore, 2 <ref> [2] </ref> have recently provided an exact algorithm for the 2D L 1 case. <p> Support for our robotics research there is provided in part by the National Science Foundation under grants No. IRI-8802390, IRI-9000532 and by a Presidential Young Investigator award, and in part by the Mathematical Sciences Institute, Intel Corporation, and AT&T Bell laboratories. 2. <ref> [2] </ref> have recently provided an exact algorithm for the 2D L 1 case. The algorithm runs in exponential time and polynomial space. 3. [5] is the journal revision of [1]. 4.
Reference: [3] <author> P. Xavier. </author> <title> Provably-good approximation algorithms for optimal kinodynamic robot motion plans. </title> <type> CS Dept. Tech. Rep. </type> <institution> CUCS-TR92-1279, Cornell University, </institution> <address> Ithaca, New York, </address> <month> April </month> <year> 1992. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: While there has been much work on this problem in the robotics community, there have been no exact algorithms except in the one-dimensional case. 2 In three dimensions, finding exact solutions is known to be NP-hard <ref> [3] </ref>; this straightforward extension of a result from [4] is also described in Appendix A. Therefore, it is reasonable to pursue approximation algorithms | algorithms that compute kinodynamic solutions that are "close" to optimal. <p> These new results indicate that our theoretical algorithm might be reasonable for o*ine motion planning, and we have performed simple experiments with a preliminary implementation of this algorithm, as reported in <ref> [3] </ref>. Our companion paper [7] extends our approach to robots with coupled dynamics and coupled dynamics bounds, including open-chain manipulators. 2 Kinodynamic Motion Planning 2.1 The Kinodynamic Planning Problem Kinematic constraints, such as joint limits and obstacles, limit the configuration (position) of a robot. <p> This family of tolerances is given by the following lemma, which is proven in <ref> [1, 3, 5] </ref>. Note that because the lemma holds for any L p -norm, our results are easily extendible to safety margin given in any such norm. <p> Certain secondary performance measures can be used to choose among these during each round, but this is unrelated to our theoretical result and does not affect the number of states visited. This idea is explored in <ref> [3] </ref>, and Figure 13 illustrates the effect of a different choice. Despite the slowness of the our current implementation, we do not believe that the algorithm is inherently impractical. <p> This single change in the algorithm dramatically reduces the size of the reachability graph and the running time. (See Figure 14.) The analysis in <ref> [3, 23] </ref> closely parallels the one described here. Finally, we note that because of the particular graph-search nature of the algorithm, we could greatly exploit parallelism in a practical implementation; additional, though limited, parallelism can be extracted in safety-checking. 5.3 Extensions Our results can be directly extended in several ways. <p> For such robots with revolute and translational degrees of freedom and polyhedral workspace obstacles, the only change in the algorithm would again be in the safety-checking step. For a description of the modified safety-checking step, which extends [27] and [28], see our companion paper [7] or <ref> [3] </ref>, which present our results for robots with coupled dynamics. Finally, the [1] approach and its descendents reduce the problem of finding an approximately optimal trajectory to that of finding the shortest path between two vertices of a uniform-cost graph whose vertices correspond to system states.
Reference: [4] <author> J. Canny and J Reif. </author> <title> New lower bound techniques for robot motion planning. </title> <booktitle> In Proceedings of the 28 th Annual Symposium on the Foundations of Computer Science, </booktitle> <address> Los Angeles, California, </address> <year> 1987. </year>
Reference-contexts: While there has been much work on this problem in the robotics community, there have been no exact algorithms except in the one-dimensional case. 2 In three dimensions, finding exact solutions is known to be NP-hard [3]; this straightforward extension of a result from <ref> [4] </ref> is also described in Appendix A. Therefore, it is reasonable to pursue approximation algorithms | algorithms that compute kinodynamic solutions that are "close" to optimal. <p> Again, the closeness of the approximation is strictly in terms of the optimization measure, so the optimal solution might not appear spatially similar to the truly optimal. In fact, the results of <ref> [4] </ref> imply that finding a path that is is homotopic to the optimal is N P-hard. (See Appendix A.) We have completed a preliminary Common Lisp implementation of this algorithm in two dimensions. <p> The polyhedral Euclidian shortest path problem can be viewed as a version of optimal kinodynamic planning in which the acceleration bound a max is set to to infinity. This observation may be used to extend the results of <ref> [4] </ref> to show that in 3D, optimal kinodynamic planning is N P-hard; a proof sketch is given in the Appendix of this paper. [9] gives a fully-polynomial approximation algorithm for the shortest path problem. O'Dunlaing [19] provides an exact algorithm for one-dimensional kinodynamic planning. <p> For our corresponding results for robots having less restricted dynamics and dynamics bounds, we encourage the reader to see our companion paper [7]. 27 Appendices A Kinodynamic Planning Lower Bounds This appendix sketches how to extend Canny's and Reif's proof <ref> [4] </ref> of the N P-hardness of the 3D shortest-path problem to show that Optimal Cartesian Kinodynamic Planning in 3D is also N P-hard. This claim was made in [1], but without proof. <p> This claim was made in [1], but without proof. While the general description here should convey the flavor of the result, the technical specifics are intended to accompany or follow a close reading Section 2 of <ref> [4] </ref>. The discussion also includes a brief justification of our statement from Section 2.3 that finding a path that is homotopic to the shortest is N P-hard. <p> A.1 Canny's and Reif 's Proof A.1.1 A Reduction To prove that the 3D shortest-path problem for a point among polyhedral obstacles is N P-hard, <ref> [4] </ref> give a polynomial-time reduction from 3SAT. <p> In addition, internal walls will divide the spaces between certain plates into rooms having one slit on the "ceiling" and one slit on the "floor". The start position will be above the top plate, and the goal below the lowest. 6 We mostly follow the notation of <ref> [4] </ref> in this section. In particular, "l" is used as in [4], not as in the rest of this paper; i.e., it does not mean "world diameter". ffi ac is not found in [4], but it just takes the place of a more complicated term. 28 The environment is constructed so <p> The start position will be above the top plate, and the goal below the lowest. 6 We mostly follow the notation of <ref> [4] </ref> in this section. In particular, "l" is used as in [4], not as in the rest of this paper; i.e., it does not mean "world diameter". ffi ac is not found in [4], but it just takes the place of a more complicated term. 28 The environment is constructed so that it will have special properties that we describe, avoiding details <p> above the top plate, and the goal below the lowest. 6 We mostly follow the notation of <ref> [4] </ref> in this section. In particular, "l" is used as in [4], not as in the rest of this paper; i.e., it does not mean "world diameter". ffi ac is not found in [4], but it just takes the place of a more complicated term. 28 The environment is constructed so that it will have special properties that we describe, avoiding details as much as possible. <p> Finally, F is satisfiable if and only if the shortest path from start to goal will not be "stretched". Observation. The careful reader of <ref> [4] </ref> will note that for any of these homotopy equivalence classes, it can be easily calculated whether the shortest path in that class will be "stretched" in this manner. <p> Thus, given a 3CNF formula F , we could construct the corresponding polyhedral shortest path problem, and once we obtain the homotopy class of the shortest path from start to goal, we could determine whether F is satisfiable. Thus, the construction in <ref> [4] </ref> can be used to show that finding the homotopy equivalence class of the shortest path in a polyhedral environment is N P-hard. A.1.3 Bit-Counting To show their reduction is polynomial-time, [4] must show that the number of bits necessary to encode the corresponding shortest-path problem instance will be polynomial in <p> Thus, the construction in <ref> [4] </ref> can be used to show that finding the homotopy equivalence class of the shortest path in a polyhedral environment is N P-hard. A.1.3 Bit-Counting To show their reduction is polynomial-time, [4] must show that the number of bits necessary to encode the corresponding shortest-path problem instance will be polynomial in n and m. The main problem is to show that * CR does not have to be too small. Suppose that the construction procedes for a 3CNF formula F . <p> Again, modulo some details, we can view their analysis as having three steps, showing that: 1. If the slit width and plate thickness were zero, the construction guarantees that for path length lower bound l = 2 3n and another parameter, which <ref> [4] </ref> call the minimum virtual source spacing, ffi min = 2 nm : l unstretched = l; and l stretched l + ffi 2 4l (Equation (9) in [4].) 2. <p> and plate thickness were zero, the construction guarantees that for path length lower bound l = 2 3n and another parameter, which <ref> [4] </ref> call the minimum virtual source spacing, ffi min = 2 nm : l unstretched = l; and l stretched l + ffi 2 4l (Equation (9) in [4].) 2. <p> Hence, we would use a point amidst polyhedral obstacles. We will also choose the units for time and distance such that they convert trivially. For a given 3CNF formula F , the new reduction constructs the a kinodynamic planning problem instance identical to the path-planning problem instance in the <ref> [4] </ref> reduction except that 1. the slit width and plate thickness * 0 CR will be smaller than * CR ; 2. the start and goal positions will be lifted to the corresponding states with velocity zero; 3. the velocity must obey a unit bound (in the same L p -norm <p> Let T stretched be the minimal solution time in this case, T unstretched be the least time otherwise. Suppose that we choose times T l = l and ffi T = ffi min via unit conversion. It follows the analysis in <ref> [4] </ref> that if the slit width and plate thickness were zero, and if the acceleration bound were infinite, then T unstretched = l; and T stretched l + ffi 2 4l With slit width and plate thickness * 0 CR but infinite acceleration, it follows that l T unstretched l + <p> In cases when v r (t ) j a max t a max t = a max 2 , the floor or ceiling must be chosen consistently. 5. Actually, it's the second incarnation of our first implementation. 6. We mostly follow the notation of <ref> [4] </ref> in this section. In particular, "l" is used as in [4], not as in the rest of this paper; i.e., it does not mean "world diameter". ffi ac is not found in [4], but it just takes the place of a more complicated term. 34 <p> Actually, it's the second incarnation of our first implementation. 6. We mostly follow the notation of <ref> [4] </ref> in this section. In particular, "l" is used as in [4], not as in the rest of this paper; i.e., it does not mean "world diameter". ffi ac is not found in [4], but it just takes the place of a more complicated term. 34 <p> Actually, it's the second incarnation of our first implementation. 6. We mostly follow the notation of <ref> [4] </ref> in this section. In particular, "l" is used as in [4], not as in the rest of this paper; i.e., it does not mean "world diameter". ffi ac is not found in [4], but it just takes the place of a more complicated term. 34
Reference: [5] <author> B. Donald, P. Xavier, J. Canny, and J. Reif. </author> <title> Kinodynamic motion planning. </title> <journal> Journal of the ACM, </journal> <volume> 40(5), </volume> <month> November </month> <year> 1993. </year> <note> Journal version of [1]. </note>
Reference-contexts: Therefore, it is reasonable to pursue approximation algorithms | algorithms that compute kinodynamic solutions that are "close" to optimal. However, for the many proposed approximate or heuristic techniques previous to <ref> [1, 5] </ref>, 3 there exist no bounds on the goodness of the resulting solutions, or on the time-complexity of the algorithms. The primary measure of optimality is time. <p> Furthermore, 2 [2] have recently provided an exact algorithm for the 2D L 1 case. The algorithm runs in exponential time and polynomial space. 3 <ref> [5] </ref> is the journal revision of [1]. 1 we show that if there exists an optimal kinodynamic solution requiring time T opt , then the new algorithm will find an approximately optimal solution that requires time T opt , whereas [1] only show a bound of (1 + *)T opt . <p> In this problem, a robot with wheels and a bounded minimum turning radius must be moved. To make the analogy clear, in our case, the minimum turning radius is 1 a max k _pk 2 . [1] (see also its revision, <ref> [5] </ref>) introduce the use of an *-approximation problem formulation to kinodynamic planning and provide the first provably good approximation algorithm for 2- and 3-dimensional optimal kinodynamic planning. <p> Safety-checking using simple computational-geometric techniques described in Appendix B costs O (N ) per (a max ; t )- bang, as in <ref> [5] </ref>. With minor modifications, the technique for checking safety with respect to a single obstacle is also used to check closeness to the goal. <p> This family of tolerances is given by the following lemma, which is proven in <ref> [1, 3, 5] </ref>. Note that because the lemma holds for any L p -norm, our results are easily extendible to safety margin given in any such norm. <p> IRI-8802390, IRI-9000532 and by a Presidential Young Investigator award, and in part by the Mathematical Sciences Institute, Intel Corporation, and AT&T Bell laboratories. 2. [2] have recently provided an exact algorithm for the 2D L 1 case. The algorithm runs in exponential time and polynomial space. 3. <ref> [5] </ref> is the journal revision of [1]. 4. In cases when v r (t ) j a max t a max t = a max 2 , the floor or ceiling must be chosen consistently. 5. Actually, it's the second incarnation of our first implementation. 6.
Reference: [6] <author> B. Donald and P. Xavier. </author> <title> Provably good approximation algorithms for optimal ki-nodynamic planning for cartesian robots and open chain manipulators. </title> <institution> Department of Computer Science Technical Report TR-1095, Cornell University Department of Computer Science, </institution> <address> Ithaca, New York, </address> <month> February </month> <year> 1990. </year> <note> Supercedes TR-971. </note>
Reference-contexts: allows an algorithm for kinodynamic planning to trade off running time against optimality in terms of: (a) execution time of the trajectory, (b) strictness in observing the safety margin, and (c) closeness to the desired start and goal states. (We note that (c) is implied in [1] but clarified in <ref> [6] </ref>.) To analytically express this trade-off we parameterize closeness to an optimal solution with a tolerance * and bound algorithm running time in terms of this *.
Reference: [7] <author> B. Donald and P. Xavier. </author> <title> Provably good approximation algorithms for optimal ki-nodynamic planning for cartesian robots and open-chain manipulators. </title> <note> Companion paper in Algorithmica, ? 199? </note>
Reference-contexts: These new results indicate that our theoretical algorithm might be reasonable for o*ine motion planning, and we have performed simple experiments with a preliminary implementation of this algorithm, as reported in [3]. Our companion paper <ref> [7] </ref> extends our approach to robots with coupled dynamics and coupled dynamics bounds, including open-chain manipulators. 2 Kinodynamic Motion Planning 2.1 The Kinodynamic Planning Problem Kinematic constraints, such as joint limits and obstacles, limit the configuration (position) of a robot. <p> For such robots with revolute and translational degrees of freedom and polyhedral workspace obstacles, the only change in the algorithm would again be in the safety-checking step. For a description of the modified safety-checking step, which extends [27] and [28], see our companion paper <ref> [7] </ref> or [3], which present our results for robots with coupled dynamics. Finally, the [1] approach and its descendents reduce the problem of finding an approximately optimal trajectory to that of finding the shortest path between two vertices of a uniform-cost graph whose vertices correspond to system states. <p> We have presented results with the lowest known complexity for Cartesian kinodynamic planning in two and three dimensions. For our corresponding results for robots having less restricted dynamics and dynamics bounds, we encourage the reader to see our companion paper <ref> [7] </ref>. 27 Appendices A Kinodynamic Planning Lower Bounds This appendix sketches how to extend Canny's and Reif's proof [4] of the N P-hardness of the 3D shortest-path problem to show that Optimal Cartesian Kinodynamic Planning in 3D is also N P-hard. This claim was made in [1], but without proof.
Reference: [8] <author> C. H. Papadimitriou and K. Steiglitz. </author> <title> Combinatorial Optimization: Algorithms and Complexity. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New York, </address> <year> 1982. </year>
Reference-contexts: The algebraic complexity of the kinodynamic bounds is the number of bits necessary to encode the kinodynamic bounds (a max ; v max ; c 1 ; c 0 ). In the language of combinatorial optimization <ref> [8] </ref>, we show that our algorithm is an *-approximation scheme that is fully polynomial in the combinatorial and algebraic complexity of the geometry, and pseudo-polynomial in the kinodynamic bounds.
Reference: [9] <author> C. H. Papadimitriou. </author> <title> An algorithm for shortest path motion in three dimensions. </title> <journal> Information Processing Letters, </journal> <volume> 20 </volume> <pages> 259-263, </pages> <year> 1985. </year>
Reference-contexts: We also note that neither our algorithm nor the [1] algorithm guarantees that the approximate optimal safe solution will be near optimal safe solution except at its endpoints. In this respect, these trajectory planning algorithms are similar to Papadimitriou's fully polynomial approximation scheme for 3D Euclidian shortest paths <ref> [9] </ref>. Again, the closeness of the approximation is strictly in terms of the optimization measure, so the optimal solution might not appear spatially similar to the truly optimal. <p> This observation may be used to extend the results of [4] to show that in 3D, optimal kinodynamic planning is N P-hard; a proof sketch is given in the Appendix of this paper. <ref> [9] </ref> gives a fully-polynomial approximation algorithm for the shortest path problem. O'Dunlaing [19] provides an exact algorithm for one-dimensional kinodynamic planning. These methods may extend to the 2- and 3D cases as well.
Reference: [10] <author> M. Brady, J. Hollerbach, T. Johnson, T. Lozano-Perez, and M. Mason, </author> <title> editors. Robot Motion: Planning and Control. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1982. </year>
Reference-contexts: In Section 5 we briefly report on this and describe extensions to the main result. 2.4 Previous and Related Work For a review of issues in robotics and algorithmic motion planning, see <ref> [10, 11] </ref>. There exists a large body of work on optimal control in the control theory and robotics literature. For example, see [12-16]. Much of this work provides partial analytic characterizations of time-optimal solutions.
Reference: [11] <author> C. Yap. </author> <title> Algorithmic motion planning. </title> <editor> In J. Schwartz and C. Yap, editors, </editor> <booktitle> Advances in Robotics: </booktitle> <volume> Volume 1. </volume> <publisher> Lawrence Erlbaum Associates, </publisher> <year> 1986. </year>
Reference-contexts: In Section 5 we briefly report on this and describe extensions to the main result. 2.4 Previous and Related Work For a review of issues in robotics and algorithmic motion planning, see <ref> [10, 11] </ref>. There exists a large body of work on optimal control in the control theory and robotics literature. For example, see [12-16]. Much of this work provides partial analytic characterizations of time-optimal solutions.
Reference: [12] <author> J. M. Hollerbach. </author> <title> Dynamic scaling of manipulator trajectories. MIT A.I. </title> <type> Memo 700, </type> <institution> Massachusetts Institute of Technology, Cambridge, Massachusetts, </institution> <year> 1983. </year>
Reference-contexts: There exists a large body of work on optimal control in the control theory and robotics literature. For example, see [12-16]. Much of this work provides partial analytic characterizations of time-optimal solutions. Among significant results, <ref> [12, 13] </ref> show how to time-rescale the velocity profile of given a particular trajectory to obtain a trajectory that is time-optimal with respect to dynamics constraints. This flavor of theoretical work has led to algorithms 6 that attempt to find nearly time-optimal trajectories, notably [17] and [18].
Reference: [13] <author> J. Bobrow, S. Dubowsky, and J. Gibson. </author> <title> Time-optimal control of robot manipulators along specified paths. </title> <journal> International Journal of Robotics Research, </journal> <volume> 4(3), </volume> <year> 1985. </year> <month> 35 </month>
Reference-contexts: There exists a large body of work on optimal control in the control theory and robotics literature. For example, see [12-16]. Much of this work provides partial analytic characterizations of time-optimal solutions. Among significant results, <ref> [12, 13] </ref> show how to time-rescale the velocity profile of given a particular trajectory to obtain a trajectory that is time-optimal with respect to dynamics constraints. This flavor of theoretical work has led to algorithms 6 that attempt to find nearly time-optimal trajectories, notably [17] and [18].
Reference: [14] <author> H. M. </author> <title> Schaettler. </title> <journal> On the optimality of bang-bang trajectories in R 3 . Bulletin of the American Mathematical Society, </journal> <volume> 16(1) </volume> <pages> 113-116, </pages> <year> 1987. </year>
Reference: [15] <author> E. Sontag and H. Sussmann. </author> <title> Remarks on the time-optimal control of two-link manipulators. </title> <booktitle> In Proceedings of the 24 th Conference on Decision and Control, </booktitle> <address> Ft. Lauderdale, Florida, </address> <year> 1985. </year>
Reference: [16] <author> E. Sontag and H. Sussmann. </author> <title> Time-optimal control of manipulators. </title> <type> Technical report, </type> <institution> Department of Mathematics, Rutgers University, </institution> <address> New Brunswick, New Jersey, </address> <year> 1986. </year>
Reference: [17] <author> G. Sahar and J. Hollerbach. </author> <title> Planning of minimum-time trajectories for robot arms. </title> <booktitle> In Proceedings of the 1985 IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 751-758, </pages> <address> St. Louis, Missouri, </address> <year> 1985. </year>
Reference-contexts: Among significant results, [12, 13] show how to time-rescale the velocity profile of given a particular trajectory to obtain a trajectory that is time-optimal with respect to dynamics constraints. This flavor of theoretical work has led to algorithms 6 that attempt to find nearly time-optimal trajectories, notably <ref> [17] </ref> and [18]. None of these results provided analytically guaranteed closeness to global optimality, and assuring one could control the accuracy of these algorithms by increasing the number of gridpoints required that their running-time bounds be exponential this number.
Reference: [18] <author> Z. Shiller and S. Dubowsky. </author> <title> Global time-optimal motions of robotic manipulators in the presence of obstacles. </title> <booktitle> In Proceedings of the 1988 IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 370-375, </pages> <address> Philadelphia, Pennsylvania, </address> <year> 1988. </year>
Reference-contexts: Among significant results, [12, 13] show how to time-rescale the velocity profile of given a particular trajectory to obtain a trajectory that is time-optimal with respect to dynamics constraints. This flavor of theoretical work has led to algorithms 6 that attempt to find nearly time-optimal trajectories, notably [17] and <ref> [18] </ref>. None of these results provided analytically guaranteed closeness to global optimality, and assuring one could control the accuracy of these algorithms by increasing the number of gridpoints required that their running-time bounds be exponential this number.
Reference: [19] <author> C. O'Dunlaing. </author> <title> Motion planning with inertial constraints. </title> <journal> Algorithmica, </journal> <volume> 2(4) </volume> <pages> 431-475, </pages> <year> 1987. </year>
Reference-contexts: This observation may be used to extend the results of [4] to show that in 3D, optimal kinodynamic planning is N P-hard; a proof sketch is given in the Appendix of this paper. [9] gives a fully-polynomial approximation algorithm for the shortest path problem. O'Dunlaing <ref> [19] </ref> provides an exact algorithm for one-dimensional kinodynamic planning. These methods may extend to the 2- and 3D cases as well. Kinodynamic planning in 2D is related to the problem of planning with non-holonomic constraints, as studied by Fortune and Wilfong [20, 21] and Jacobs and Canny [22].
Reference: [20] <author> S. Fortune and G. Wilfong. </author> <title> Planning constrained motion. </title> <booktitle> In Twentieth Annual ACM Symposium on Theory of Computing, </booktitle> <address> Chicago, </address> <year> 1988. </year>
Reference-contexts: O'Dunlaing [19] provides an exact algorithm for one-dimensional kinodynamic planning. These methods may extend to the 2- and 3D cases as well. Kinodynamic planning in 2D is related to the problem of planning with non-holonomic constraints, as studied by Fortune and Wilfong <ref> [20, 21] </ref> and Jacobs and Canny [22]. In this problem, a robot with wheels and a bounded minimum turning radius must be moved.
Reference: [21] <author> G. Wilfong. </author> <title> Motion planning for an autonomous vehicle. </title> <booktitle> In Proceedings of the 1988 IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 529-533, </pages> <address> Philadel-phia, Pennsylvania, </address> <year> 1988. </year>
Reference-contexts: O'Dunlaing [19] provides an exact algorithm for one-dimensional kinodynamic planning. These methods may extend to the 2- and 3D cases as well. Kinodynamic planning in 2D is related to the problem of planning with non-holonomic constraints, as studied by Fortune and Wilfong <ref> [20, 21] </ref> and Jacobs and Canny [22]. In this problem, a robot with wheels and a bounded minimum turning radius must be moved.
Reference: [22] <author> P. Jacobs and J. Canny. </author> <title> Planning smooth paths for mobile robots. </title> <booktitle> In Proceedings ot the 1989 IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 2-7, </pages> <address> Scottsdale, Arizona, </address> <year> 1989. </year>
Reference-contexts: O'Dunlaing [19] provides an exact algorithm for one-dimensional kinodynamic planning. These methods may extend to the 2- and 3D cases as well. Kinodynamic planning in 2D is related to the problem of planning with non-holonomic constraints, as studied by Fortune and Wilfong [20, 21] and Jacobs and Canny <ref> [22] </ref>. In this problem, a robot with wheels and a bounded minimum turning radius must be moved.
Reference: [23] <author> B. Donald and P. Xavier. </author> <title> Time-safety trade-offs and a bang-bang algorithm for ki-nodynamic planning. </title> <booktitle> In Proceedings of the 1991 IEEE International Conference on Robotics and Automation, </booktitle> <address> Sacramento, California, </address> <year> 1991. </year>
Reference-contexts: This single change in the algorithm dramatically reduces the size of the reachability graph and the running time. (See Figure 14.) The analysis in <ref> [3, 23] </ref> closely parallels the one described here. Finally, we note that because of the particular graph-search nature of the algorithm, we could greatly exploit parallelism in a practical implementation; additional, though limited, parallelism can be extracted in safety-checking. 5.3 Extensions Our results can be directly extended in several ways.
Reference: [24] <author> T. Lozano-Perez. </author> <title> Spatial planning: A configuration space approach. </title> <journal> IEEE Transactions on Computers, </journal> <note> C-32(2):108-120, 1983. Also MIT A.I. Memo 605, </note> <month> December </month> <year> 1982. </year>
Reference-contexts: Finally, we note that because of the particular graph-search nature of the algorithm, we could greatly exploit parallelism in a practical implementation; additional, though limited, parallelism can be extracted in safety-checking. 5.3 Extensions Our results can be directly extended in several ways. Via a transformation to configuration space <ref> [24] </ref>, our results can be applied to a rigid, non-rotating robot whose geometry is given by a union R of convex polyhedra. This configuration space transformation has been discussed extensively in the literature (see, e.g., [24]). The algorithm of [24] could be used as a preprocess to reduce the planning problem <p> Via a transformation to configuration space <ref> [24] </ref>, our results can be applied to a rigid, non-rotating robot whose geometry is given by a union R of convex polyhedra. This configuration space transformation has been discussed extensively in the literature (see, e.g., [24]). The algorithm of [24] could be used as a preprocess to reduce the planning problem for R amidst obstacles O to the point navigation problem we have discussed. <p> Via a transformation to configuration space <ref> [24] </ref>, our results can be applied to a rigid, non-rotating robot whose geometry is given by a union R of convex polyhedra. This configuration space transformation has been discussed extensively in the literature (see, e.g., [24]). The algorithm of [24] could be used as a preprocess to reduce the planning problem for R amidst obstacles O to the point navigation problem we have discussed. <p> The procedure runs in O (N ) time, where N is geometric complexity of the configuration space obstacles. We review some basic computational geometry developed by <ref> [24] </ref>, describe the special case when c 1 = 0, and then extend the method to the general case. Assume that the configuration space obstacles are the union of convex polyhedra, and recall that d 3.
Reference: [25] <author> H. Edelsbrunner. </author> <title> Algorithms in Combinatorial Geometry. EATCS 10. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1987. </year>
Reference-contexts: The details of the result appear to hinge on bounding the number of (d 1)-faces (since a (d 2)-face bounds exactly two (d 1)-faces) of the Minkowski sum and constructing their incidence relation. We conjecture that applying and extending work from computational geometry such as <ref> [25, 26] </ref> would be fruitful. 25 In turn, this extended d-dimensional algorithm would apply, via robot-dependent con-stant linear transforms, to other robots with constant, decoupled dynamics equations and decoupled dynamics, when the configuration space obstacles are expressed as unions of convex polytopes.
Reference: [26] <author> L. Guibas and R. Seidel. </author> <title> Computing convolutions by reciprocal search. </title> <booktitle> In Proceedings 4 th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 90-99, </pages> <year> 1988. </year> <month> 36 </month>
Reference-contexts: The details of the result appear to hinge on bounding the number of (d 1)-faces (since a (d 2)-face bounds exactly two (d 1)-faces) of the Minkowski sum and constructing their incidence relation. We conjecture that applying and extending work from computational geometry such as <ref> [25, 26] </ref> would be fruitful. 25 In turn, this extended d-dimensional algorithm would apply, via robot-dependent con-stant linear transforms, to other robots with constant, decoupled dynamics equations and decoupled dynamics, when the configuration space obstacles are expressed as unions of convex polytopes.
Reference: [27] <author> J. Canny. </author> <title> Collision detection for moving polyhedra. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 8(2) </volume> <pages> 200-209, </pages> <year> 1986. </year>
Reference-contexts: For such robots with revolute and translational degrees of freedom and polyhedral workspace obstacles, the only change in the algorithm would again be in the safety-checking step. For a description of the modified safety-checking step, which extends <ref> [27] </ref> and [28], see our companion paper [7] or [3], which present our results for robots with coupled dynamics.

References-found: 27

