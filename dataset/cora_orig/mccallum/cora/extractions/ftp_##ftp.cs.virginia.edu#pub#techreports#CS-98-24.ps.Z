URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-98-24.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.cs.virginia.edu
Title: Architecture and Object Model for Distributed Object-Oriented Real-Time Databases  
Author: John A. Stankovic Sang H. Son 
Address: Charlottesville, VA 22903  
Affiliation: Department of Computer Science University of Virginia  
Abstract: The confluence of computers, communications, and databases is quickly creating a global virtual database where many applications require real-time access to both temporally accurate and multimedia data. This is particularly true in military and intelligence applications, but these required features are needed in many commercial applications as well. We are developing a distributed database, called BeeHive, which could offer features along different types of requirements: real-time, fault-tolerance, security, and quality-of service for audio and video. Support of these features and potential trade-offs between them could provide a significant improvement in performance and functionality over current distributed database and object management systems. In this paper, we present a high level design for BeeHive architecture and sketch the design of the BeeHive Object Model (BOM) which extends object-oriented data models by incorporating time and other features into objects. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Adelberg, B. Kao, and H. Garcia-Molina, </author> <title> An Overview of the STanford Real-time Information Processor, </title> <journal> ACM SIGMOD Record, </journal> <volume> 25(1), </volume> <year> 1996. </year>
Reference-contexts: Although it is planned to broaden the scope to include security and fault-tolerance, it is not clear how such extension can fit into the architecture. Further, they do not consider issues such as transactions and database management. STRIP (STanford Real-Time Information Processor) <ref> [1] </ref> is a database designed for heterogeneous environments and provides support for value function scheduling and for temporal constraints on data. Its goals include high performance and the ability to share data in open systems.
Reference: [2] <author> S.F. Andler, J. Hansson, J. Eriksson, J. Mellin, M. Berndtsson, and B. Eftring, DeeDS: </author> <title> Towards a Distributed and Active Real-Time Database Systems, </title> <journal> ACM SIGMOD Record, </journal> <volume> 15(1) </volume> <pages> 38-40, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Its goals include high performance and the ability to share data in open systems. It does not support any notion of performance guarantees or hard real-time constraints, and hence cannot be used for the applications we are envisioning in this project. The Distributed Active Real-Time Database System (DEEDS) <ref> [2] </ref> prototype is an event-triggered real-time database system, using dynamic scheduling of sets of transactions, being developed in Sweden. The reactive behavior is modeled using ECA rules. In the current prototype they do not support temporal constraints of data and multimedia information.
Reference: [3] <author> ATM Forum, </author> <title> ATM Traffic Management Specification 4.0, </title> <month> April </month> <year> 1996. </year>
Reference-contexts: The Tenet protocols do not provide a middleware layer that can accommodate the needs of applications with special requirements for security or fault tolerance. Several QoS standardization efforts are being undertaken by several network communities. The ATM Forum recently completed a traffic management specification <ref> [3] </ref> which supports hard-real time applications via peak rate allocations in the CBR service class. All other ATM service classes only give probabilistic QoS guarantees. The IntServ working group of the IETF is working towards a complete QoS service architecture for the Internet, using RSVP [7] for signaling.
Reference: [4] <author> A. Banerjea, D. Ferrari, B. A. Mah, M. Moran, D. C. Verma, and H. Zhang, </author> <title> The Tenet Real-Time Protocol Suite: Design, Implementation, and Experiences, </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 4(1) </volume> <pages> 1-10, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: However, no existing system can give end-to-end QoS assurances in a large-scale, dynamic, and heterogeneous distributed system. Note that none of the existing QoS network architectures supports an integrated approach to QoS that contains the network as well as real-time applications. The Tenet protocol suite <ref> [4] </ref> developed within the context of the BLANCA Gigabit testbed networks presented the first comprehensive service model for inter-networks. The work resulted in the design of two transport protocols (CMTP, RMTP), a network protocol (RTIP), and a signaling protocol (RCAP) to support a diverse set of real-time services.
Reference: [5] <author> A. Bondavalli, J. Stankovic, and L. Strigini, </author> <title> Adaptive Fault Tolerance for Real-Time Systems, </title> <booktitle> Third International Workshop on Responsive Computer Systems, </booktitle> <month> September </month> <year> 1993. </year>
Reference: [6] <author> A. Bondavali, J. Stankovic, and L. Strigini, </author> <title> Adaptable Fault Tolerance for Real-Time Systems, Responsive Computer Systems: Towards Integration of Fault Tolerance and Real-Time, </title> <publisher> Kluwer, </publisher> <year> 1995, </year> <pages> pp. 187-205. </pages>
Reference: [7] <author> R. Braden, L. Zhang, S. Berson, S. Herzog, and S. Jamin, </author> <title> Resource ReSerVation Protocol (RSVP) Version 1 Functional Specification, </title> <type> Internet Draft, </type> <month> November </month> <year> 1996. </year>
Reference-contexts: All other ATM service classes only give probabilistic QoS guarantees. The IntServ working group of the IETF is working towards a complete QoS service architecture for the Internet, using RSVP <ref> [7] </ref> for signaling. The draft proposal for a guaranteed service definition will support deterministic end-to-end delays; however, an implementation is not yet available. The Open Software's Foundation Research Institute is pursuing several efforts to build configurable real-time operating systems for modular and scalable high-performance computing systems.
Reference: [8] <author> A. Guha, A. Pavan, J. Liu, A. Rastogi, and T. Steeves, </author> <title> Supporting Real-Time and Multimedia Applications on the Mercuri Testbed, </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> Vol. 13, No. 4, </volume> <month> May </month> <year> 1995. </year>
Reference-contexts: While commercial database systems such as Oracle [10] or Sybase [9] allow for the storage of multimedia data, it is usually done as a BLOB (binary large object). These systems are not integrated with real-time applications. Also developed in industry is the Mer-curi project <ref> [8] </ref> where data from remote video cameras is transferred through an ATM network and displayed using X windows, but they provide only best effort services. In recent years, considerable progress has been made in the areas of QoS support for operating systems, networks, and open distributed systems.
Reference: [9] <author> J. E. Kirkwood, </author> <title> Sybase Architecture and Administration, </title> <publisher> Prentice-Hall, </publisher> <year> 1993. </year>
Reference-contexts: It mainly deals with the mismatch problem encountered in information representation in heterogeneous databases, but no real-time and fault-tolerance issues are pursued as in BeeHive. While commercial database systems such as Oracle [10] or Sybase <ref> [9] </ref> allow for the storage of multimedia data, it is usually done as a BLOB (binary large object). These systems are not integrated with real-time applications.
Reference: [10] <author> G. Koch and K. Loney, </author> <title> Oracle: The Complete Reference, </title> <publisher> Mc Graw-Hill, </publisher> <year> 1997. </year>
Reference-contexts: It mainly deals with the mismatch problem encountered in information representation in heterogeneous databases, but no real-time and fault-tolerance issues are pursued as in BeeHive. While commercial database systems such as Oracle <ref> [10] </ref> or Sybase [9] allow for the storage of multimedia data, it is usually done as a BLOB (binary large object). These systems are not integrated with real-time applications.
Reference: [11] <author> M. J. Lewis and A. Grimshaw, </author> <title> The Core Legion Object Model, </title> <booktitle> In Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: The BeeHive design is composed of native BeeHive sites, legacy sites ported to BeeHive, interfaces to legacy systems outside of BeeHive, and an interface to the Legion system 1 <ref> [11] </ref> (see Figure 1). The native BeeHive sites comprise a federated distributed database model that implements a temporal data model, time cognizant database and QoS protocols, a specification model, a mapping from this specification to four APIs (the OS, network, fault tolerance and security APIs), and underlying novel object support. <p> retrieved is audio and video, the playout itself has time constraints, is large in volume, must be syn chronized, can be degraded if necessary, etc. * Analysis Tools: Retrieved data may be fed to analysis tools for further processing including having this processing itself be distributed by using Le gion <ref> [11] </ref>. The user-level fault tolerance interface includes features for each of the four service classes for each fault type.
Reference: [12] <author> J. Prichard, L. DiPippo, J. Peckham, and V. Wolfe, RTSORAC: </author> <title> A Real-Time Object-Oriented Database Model, </title> <booktitle> Database and Expert System Applications Conference (DEXA'94), </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: In this section we present each component of the BOM, and then discuss how they can be supported by the BeeHive architecture. The BOM has some similarity in terms of the structure of objects to the RTSORAC object model <ref> [12] </ref>.
Reference: [13] <author> R.M. Sivasankaran, J.A. Stankovic, D. Towsley, B. Purimetla and K. Ramamritham, </author> <title> Priority Assignment in Real-Time Active Databases, </title> <booktitle> The International Journal on Very Large Data Bases, </booktitle> <volume> Vol. 5, No. 1, </volume> <month> January </month> <year> 1996. </year>
Reference: [14] <author> J. Stankovic and K. Ramamritham, </author> <title> The Spring Kernel: A New Paradigm for Hard Real-Time Operating Systems, </title> <journal> IEEE Software, </journal> <volume> 8(3) </volume> <pages> 62-72, </pages> <month> May </month> <year> 1991. </year>
Reference: [15] <author> J. Stankovic and K. Ramamritham, </author> <title> Reflective Real-Time Operating Systems, Principles of Real-Time Systems, Sang Son, editor, </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference: [16] <author> J. Stankovic, S. Son, and C. Nguyen, </author> <title> The Cogency Monitor: An External Interface Architecture for a Distributed Object-Oriented Real-Time Database, </title> <booktitle> IEEE Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1998. </year>
Reference-contexts: At the application level, users can submit transactions, analysis programs, general programs, and access audio, video, and image data. For each of these 2 An initial implementation of BeeHive wrappers <ref> [16] </ref> that provide an interface to the open information sources of the Internet has been implemented. However, this aspect of BeeHive is not the focus of this paper. activities the user has a standard specification inter-face for real-time, QoS for audio, video, and images, fault tolerance, and security.
Reference: [17] <author> F. Travostino and E. Menze III, </author> <title> The CORDS Book, </title> <institution> OSF Research Institute, </institution> <month> September </month> <year> 1996. </year>
Reference-contexts: The Open Software's Foundation Research Institute is pursuing several efforts to build configurable real-time operating systems for modular and scalable high-performance computing systems. An important effort in respect to fault-tolerance is the CORDS <ref> [17] </ref> system. CORDS develops an extensible suite of protocols for fault isolation and fault management in support of dependable distributed real-time applications.
Reference: [18] <author> S. Vinoski. </author> <title> CORBA: Integrating Diverse Applications Within Distributed Heterogeneous Environments, </title> <journal> IEEE Communications Magazine, </journal> <volume> 14(2), </volume> <month> February </month> <year> 1997. </year>
Reference: [19] <author> G. Wiederhold, </author> <title> Mediators in the Architecture of Future Information Systems, </title> <journal> IEEE Computer, </journal> <volume> Vol. 25, No. 3, </volume> <month> March </month> <year> 1992, </year> <pages> pp. 38-49. </pages>
Reference-contexts: In the current prototype they do not support temporal constraints of data and multimedia information. To allow applications to utilize multiple remote databases in dynamic and heterogeneous environments, the notion of mediator was introduced and a prototype was implemented in the PENGUIN system <ref> [19] </ref>. A mediator is a software module that exploits encoded knowledge about certain sets or subsets of data to create information for a higher layer of applications.
Reference: [20] <author> M. Xiong, J. Stankovic, K. Ramamritham, D. Towsley and R. M. Sivasankaran, </author> <title> Maintaining Temporal Consistency: Issues and Algorithms, </title> <booktitle> The First International Workshop on Real-Time Databases, </booktitle> <month> March, </month> <year> 1996. </year>
Reference: [21] <author> M. Xiong, R. Sivasankaran, J. Stankovic, K. Ra-mamritham and D. Towsley, </author> <title> Scheduling Transactions with Temporal Constraints: Exploiting Data Semantics, </title> <booktitle> Real-Time Systems Symposium, </booktitle> <month> De-cember </month> <year> 1996. </year>
Reference: [22] <author> J. Zinky, D. Bakken, and R. Schantz, </author> <title> Architectural Support for Quality of Service for CORBA Objects, </title> <journal> Theory and Practice of Object Systems, </journal> <volume> 3(1) </volume> <pages> 1-20, </pages> <month> April </month> <year> 1997. </year>
Reference-contexts: There are several research projects, past and present, that have addressed one or more of the issues of real-time databases, QoS at the network and OS levels, multimedia, fault tolerance, security, and distributed execution platforms. We briefly describe a few of these projects. The QuO architecture <ref> [22] </ref> being developed at BBN aims at supporting QoS at the CORBA object level. It provides mechanisms for measuring and enforcing QoS agreements. Its goal is to make distributed applications more predictable and adaptive, even if end-to-end guarantees cannot be provided.
References-found: 22

