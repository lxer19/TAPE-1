URL: http://www.cs.man.ac.uk/~fellowsd/work/rainbow/rasm.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~fellowsd/work/rainbow/
Root-URL: http://www.cs.man.ac.uk
Title: Rainbow Assember (RASM) DRAFT 1 Basic Formatting lines to have a combination of things on
Author: Donal K. Fellows 
Note: I will not allow  Prior to the appending  2 Instructions 2.1 Meta-Instructions  
Date: October 3, 1997  
Abstract: One instruction per line. Leading and trailing spaces are chopped before parsing. Where the first character is a semicolon, ;, the rest of the line will be taken as a comment (and inserted into the generated code). Where the first character is a colon, :, the rest of the line will be taken to be a label in the code. Labels should not contain a double colon, ::, as this is reserved for inter-module references. I use Tcl to split an instruction into opcode and operands, so you either need to use curly braces to quote spaces (and other significant characters) or backslash-sequences. Note that the special backslash-newline-whitespace to single space conversion is not supported, so long strings with no newline characters need to represented by long lines in the input. If an operand starts (after the instruction line has been split up into words) with a colon, :, the remainder of that operand represents the address of a label to be pushed onto the stack. Where an address reference (label name) contains a double colon, ::, the part before the double colon refers to the name of a compilation module to look up the label in, and the part after the double colon refers to the name to look up there. If an operand starts with an apostrophe, ', the remainder represents a type to be pushed onto the stack. If an operand starts with a dollar, $, the remainder represents a string to be pushed onto the stack. All other operands are taken to be data values. There is also a shorthand for getArg number, which is implemented using an operand starting with a commercial at symbol, @, with the rest of the operand being the data value to use as an index (presuably a positive integer!) Note that getArg number is itself in-turn a shorthand for a push followed by a getArg, so quite a lot of instructions can be generated by a single line of RASM code. 
Abstract-found: 1
Intro-found: 1
References-found: 0

