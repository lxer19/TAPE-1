URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-95-31.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Email: avg@cs.ucsc.edu ksk@cs.ucsc.edu wilhelms@cs.ucsc.edu  
Title: Hierarchically Accelerated Ray Casting for Volume Rendering with Controlled Error  
Author: Allen Van Gelder Kwansik Kim Jane Wilhelms 
Date: March 31, 1995  
Address: Santa Cruz 95064 UCSC-CRL-95-31  
Affiliation: Baskin Center for Computer Engineering and Information Sciences University of California,  
Abstract: Ray casting for volume rendering can be accelerated by taking large steps over regions where data need not be processed at a fine resolution. A new implementation is described that utilizes both a user-specified data importance and a high-level data model in appropriate regions to achieve acceleration. Previously reported work exploited high accumulated opacity, transparency, and nearly constant valued regions. This work generalizes homogeneity from nearly constant values to least-squares fits with a set of basis functions. The implemented set supports trilinear functions, and the framework supports other functions. Experience is reported with sequential and small-scale parallel runs. Comparisons are made with other methods on the bases of time, image quality, and sensitivity to error tolerance. Ray casting with zero error provides a reference image with which others are compared quantitatively. The implementation lives within a general system for multi-dimensional trees. For a given error tolerance, this ensures that the same resolution is used in all regions, by all hierarchical rendering methods, whether based on projection or ray-casting. Data-importnace functions were found to be a significant source of acceleration. Image comparisons led to identification of the main source of image degradation in projection methods as being color interpolation rather than data interpolation. An improvement to projection methods is suggested, based on hardware texture maps. Keywords: computer graphics, scientific visualization, ray casting, direct volume rendering. 
Abstract-found: 1
Intro-found: 1
Reference: [CCF94] <author> Brian Cabral, Nancy Cam, and Jim Foran. </author> <title> Accelerated volume rendering and tomographic reconstruction using texture mapping hardware. </title> <booktitle> In 1994 Symposium on Volume Visualization, </booktitle> <pages> pages 91-98, </pages> <address> Washington, D.C., </address> <month> October </month> <year> 1994. </year>
Reference-contexts: It runs on standard graphics hardware. While parallelization is not as straight-forward as with a ray-caster, images could be created in parallel from different regions of the tree and composited. Hardware 3D texture mapping is a very fast method available on machines that have this feature <ref> [CCF94, GL94, WVGW94, CN93] </ref>. (An example of such a machine is the SGI Reality Engine.) In this case, a version of the data taking into account distance between data points is stored as a 3D texture map. The volume is created by drawing polygonal texture-mapped slices through the texture map.
Reference: [CN93] <author> T. J. Cullip and U. Newman. </author> <title> Accelerating volume reconstruction with 3d texture hardware. </title> <type> Technical Report TR93-027, </type> <institution> University of North Carolina, </institution> <address> Chapel Hill, N. C., </address> <year> 1993. </year>
Reference-contexts: It runs on standard graphics hardware. While parallelization is not as straight-forward as with a ray-caster, images could be created in parallel from different regions of the tree and composited. Hardware 3D texture mapping is a very fast method available on machines that have this feature <ref> [CCF94, GL94, WVGW94, CN93] </ref>. (An example of such a machine is the SGI Reality Engine.) In this case, a version of the data taking into account distance between data points is stored as a 3D texture map. The volume is created by drawing polygonal texture-mapped slices through the texture map.
Reference: [DH92] <author> John Danskin and Pat Hanrahan. </author> <title> Fast algorithms for volume ray tracing. </title> <booktitle> In 1992 Workshop on Volume Visualization, </booktitle> <pages> pages 91-98, </pages> <address> Boston, Mass., </address> <month> October </month> <year> 1992. </year> <note> ACM. </note>
Reference-contexts: Each node in the octree stores its average values and standard deviations (used as error estimates). The procedure performs progressive refinement until the given error level is satisfied. Daskin and Hanrahan <ref> [DH92] </ref> extended the above work, using additional acceleration techniques for raycasting. They added fi-acceleration, in which fewer samples are taken as the opacity along the ray accumulates. Westermann [Wes94] provides a general multiresolution framework for volume rendering using a wavelet representation to sample data along the ray. <p> Moreover the update amount is w x t x (if t x was selected), where w x is the x width (measured in grid points) of the subregion being "jumped over". 4 Most previous works on ray-casting acceleration techniques <ref> [Lev90, DH92, Wes94] </ref> use variations of regular sampling. Upson and Keeler in their seminal work intersect a cell face but then step along the ray through the cell to integrate [UK88]. <p> Danskin and Hanrahan adaptively vary the step size while integrating color and opacity along the ray, and approximate the data by an average <ref> [DH92] </ref>. Westermann varies step size with the multiresolution scale, and interpolate the data with wavelets [Wes94]. Instead of using a regular sampling technique, we integrate directly from the entry point to the exit point, approximately solving the underlying differential equation.
Reference: [GL94] <author> S. Guan and R. G. Lipes. </author> <title> Innovative volume rendering using 3d texture mapping. In SPIE: Medical Imaging 1994: Images Captures, Formatting and Display. </title> <booktitle> SPIE 2164, </booktitle> <year> 1994. </year>
Reference-contexts: It runs on standard graphics hardware. While parallelization is not as straight-forward as with a ray-caster, images could be created in parallel from different regions of the tree and composited. Hardware 3D texture mapping is a very fast method available on machines that have this feature <ref> [CCF94, GL94, WVGW94, CN93] </ref>. (An example of such a machine is the SGI Reality Engine.) In this case, a version of the data taking into account distance between data points is stored as a 3D texture map. The volume is created by drawing polygonal texture-mapped slices through the texture map.
Reference: [Lev90] <author> Marc Levoy. </author> <title> Efficient ray tracing of volume data. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 9(3) </volume> <pages> 245-261, </pages> <month> July </month> <year> 1990. </year> <title> 2 Due to an alignment bug, we were unable to compare raycast and projection framebuffers, </title> <journal> or raycast and 3D-texture framebuffers. </journal> <volume> 11 </volume>
Reference-contexts: Many other ray tracing and ray casting approaches have been reported, but this section reviews mainly those that rely on hierarchical representation. Levoy <ref> [Lev90] </ref> introduced basic acceleration techniques based on the presence information and ff-termination, in which the ray is no longer integrated when accumulated opacity is near 1.0. The volume data is preprocessed into an octree of bits, so an empty region can be traversed in one step. <p> Moreover the update amount is w x t x (if t x was selected), where w x is the x width (measured in grid points) of the subregion being "jumped over". 4 Most previous works on ray-casting acceleration techniques <ref> [Lev90, DH92, Wes94] </ref> use variations of regular sampling. Upson and Keeler in their seminal work intersect a cell face but then step along the ray through the cell to integrate [UK88]. <p> Levoy skips transparent regions (based on an octree), then steps at equal intervals through regions to be colored, evaluating the function by interpolation at the full resolution of the data <ref> [Lev90] </ref>. Danskin and Hanrahan adaptively vary the step size while integrating color and opacity along the ray, and approximate the data by an average [DH92]. Westermann varies step size with the multiresolution scale, and interpolate the data with wavelets [Wes94].
Reference: [LH91] <author> David Laur and Pat Hanrahan. </author> <title> Hierarchical splatting: A progressive refinement algorithm for volume rendering. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 25(4) </volume> <pages> 285-288, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: The volume data is preprocessed into an octree of bits, so an empty region can be traversed in one step. By casting a ray front to back, computing color integration can be terminated if it reaches the maximum opacity. Laur and Hanrahan <ref> [LH91] </ref> extend this idea to take advantage of relatively constant-valued subregions to apply the hierarchical approach with back-to-front splatting. Depending on the error tolerance given, a large block of relatively constant subregions can be projected at the higher level of octree. <p> Coherent projection uses hardware-assisted Gouraud shading to provide a fast and reasonably good quality image <ref> [WVG91, LH91, ST90] </ref>. Assuming parallel projection, a projection of one region (the template) is always a uniformly scaled version of the projection of any other. Color and opacity contributions are calculated only at the projected region's vertices, and hardware Gouraud shading is used to find values across it.
Reference: [MBC93] <author> Nelson Max, Barry Becker, and Roger Crawfis. </author> <title> Flow volumes for interactive vector field visualization. </title> <editor> In Nielson and Bergeron, editors, </editor> <booktitle> Visualization '93, </booktitle> <pages> pages 19-24, </pages> <address> San Jose, Ca, </address> <month> October </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: That is, color interpolation errors are more serious than data interpolation errors. This suggests an avenue for improvement of projection methods on workstations with hardware texture maps. Max et al. have made a step in this direction for cells of uniform color and varying thickness <ref> [MBC93] </ref>. We plan to investigate an extension to handle nonuniformly colored cells, by employing texture lookup tables in conjunction with texture maps.
Reference: [SB87] <author> J. Snyder and A. Barr. </author> <title> Ray tracing complex models containing surface tessellations. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 21(4) </volume> <pages> 119-128, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: For perspective, rays may require varying permutations, but the permutation is fixed within an individual ray. The function findExit can use a generalization of the Snyder and Barr method for regularly tesselated grids <ref> [SB87] </ref>, which can be thought of as merging three ordered lists of intersection points. Three ray parameter values t x , t y , and t z , are maintained, representing the most imminent intersections of the ray with x, y, and z grid planes.
Reference: [SK94] <author> L. M. Sobierajski and A. E. Kaufman. </author> <title> Volumetric ray tracing. </title> <booktitle> In ACM Workshop on Volume Visualization 1994, </booktitle> <pages> pages 11-18, </pages> <address> Washington, D.C., </address> <month> October </month> <year> 1994. </year>
Reference-contexts: These effects are subjective and ad hoc, and are optionally invoked by the user. However, lack of shape cues is often an obstacle in understanding volume rendering, and deserves further investigation. Sobierajski and Kaufman <ref> [SK94] </ref> have described methods for shape cues based on introduction of familiar geometric objects. As mentioned at the beginning of the section, we already have a flexible data structure and algorithm for traversing the hierarchy selectively.
Reference: [ST90] <author> Peter Shirley and Allan Tuchman. </author> <title> A polygonal approximation to direct scalar volume rendering. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 63-70, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Coherent projection uses hardware-assisted Gouraud shading to provide a fast and reasonably good quality image <ref> [WVG91, LH91, ST90] </ref>. Assuming parallel projection, a projection of one region (the template) is always a uniformly scaled version of the projection of any other. Color and opacity contributions are calculated only at the projected region's vertices, and hardware Gouraud shading is used to find values across it.
Reference: [UK88] <author> Craig Upson and Michael Keeler. </author> <title> The v-buffer: Visible volume rendering. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 22(4) </volume> <pages> 59-64, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: Upson and Keeler in their seminal work intersect a cell face but then step along the ray through the cell to integrate <ref> [UK88] </ref>. Levoy skips transparent regions (based on an octree), then steps at equal intervals through regions to be colored, evaluating the function by interpolation at the full resolution of the data [Lev90].
Reference: [Wes94] <author> Ruediger Westermann. </author> <title> A multiresolution framework for volume rendering. </title> <editor> In Arie Kaufmann and Wolfgang Krueger, editors, </editor> <booktitle> 1994 Symposium on Volume Visualization, </booktitle> <address> Washington, D.C., </address> <month> October </month> <year> 1994. </year> <note> ACM. </note>
Reference-contexts: The procedure performs progressive refinement until the given error level is satisfied. Daskin and Hanrahan [DH92] extended the above work, using additional acceleration techniques for raycasting. They added fi-acceleration, in which fewer samples are taken as the opacity along the ray accumulates. Westermann <ref> [Wes94] </ref> provides a general multiresolution framework for volume rendering using a wavelet representation to sample data along the ray. Homogeneity and fi-acceleration techniques are implemented on raycasting and wavelet coefficients are directly used to hierarchically sample data along the ray. <p> Moreover the update amount is w x t x (if t x was selected), where w x is the x width (measured in grid points) of the subregion being "jumped over". 4 Most previous works on ray-casting acceleration techniques <ref> [Lev90, DH92, Wes94] </ref> use variations of regular sampling. Upson and Keeler in their seminal work intersect a cell face but then step along the ray through the cell to integrate [UK88]. <p> Danskin and Hanrahan adaptively vary the step size while integrating color and opacity along the ray, and approximate the data by an average [DH92]. Westermann varies step size with the multiresolution scale, and interpolate the data with wavelets <ref> [Wes94] </ref>. Instead of using a regular sampling technique, we integrate directly from the entry point to the exit point, approximately solving the underlying differential equation. The approximation is the same as used by the coherent projection method [WVG91], to find the color at the thickest point of a cell's projection.
Reference: [WVG91] <author> Jane Wilhelms and Allen Van Gelder. </author> <title> A coherent projection approach for direct volume rendering. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 25(4) </volume> <pages> 275-284, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction This paper further explores visualization using an error-controlled hierarchy, as initially described earlier [WVG94]. The particular emphasis here is the addition of a ray-caster to the direct volume rendering methods already available in the program (coherent projection <ref> [WVG91] </ref> and hardware 3D texture maps [WVGW94]), and the comparison of the three methods. The higher speeds of modern graphics workstations make ray-casting in 3D volumes practical for moderately sized volumes, although still not interactive in most cases. <p> Therefore, the hierarchy and its selective traversal provide a fast and flexible method of imaging large volumes. 2 This section is only a very brief summary of the methods developed in mdh. Previous publications describe the algorithms in more detail <ref> [WVG91, WVG92, WVG94, WVGW94] </ref>. 3 Background and Related Work Much work has been done on accelerating raycasting algorithms by exploiting empty or homogeneous subregions of volume data. Many other ray tracing and ray casting approaches have been reported, but this section reviews mainly those that rely on hierarchical representation. <p> Instead of using a regular sampling technique, we integrate directly from the entry point to the exit point, approximately solving the underlying differential equation. The approximation is the same as used by the coherent projection method <ref> [WVG91] </ref>, to find the color at the thickest point of a cell's projection. This gives the "emission" contribution of the region for this ray. We have also experimented with reflective shading and depth attenuation to convey a sense of shape in the image (Section 5). <p> We are presently exploring the amount of error this may introduce. An alternative is to use finite differences for the gradient within the data. 6 Comparison of Rendering Methods Our hierarchical visualization software provides three methods of direct volume rendering: coherent projection <ref> [WVG91, WVG94] </ref>, hardware 3D textures [WVGW94], and ray-casting. Coherent projection uses hardware-assisted Gouraud shading to provide a fast and reasonably good quality image [WVG91, LH91, ST90]. Assuming parallel projection, a projection of one region (the template) is always a uniformly scaled version of the projection of any other. <p> Coherent projection uses hardware-assisted Gouraud shading to provide a fast and reasonably good quality image <ref> [WVG91, LH91, ST90] </ref>. Assuming parallel projection, a projection of one region (the template) is always a uniformly scaled version of the projection of any other. Color and opacity contributions are calculated only at the projected region's vertices, and hardware Gouraud shading is used to find values across it.
Reference: [WVG92] <author> Jane Wilhelms and Allen Van Gelder. </author> <title> Octrees for faster isosurface generation. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 11(3) </volume> <pages> 201-227, </pages> <month> July </month> <year> 1992. </year> <note> Extended abstract in ACM Computer Graphics 24(5) 57-62; also UCSC technical report UCSC-CRL-90-28. </note>
Reference-contexts: Experimental results are reported in Section 7. 2 The Hierarchy Our hierarchical visualization software mdh creates an n-dimensional hierarchy over an n-dimensional rectilinear volume. (In practice, n is usually three for spatial volumes or four for spatio-temporal volumes.) The hierarchy uses a space-saving strategy known as a BON tree <ref> [WVG92] </ref>. Each node in the tree contains a model of the data in the region covered by the node as well as evaluation information useful for traversing the tree for imaging. The standard data model is a trilinear cell model (voxel and voxel trilinear models are also available). <p> Therefore, the hierarchy and its selective traversal provide a fast and flexible method of imaging large volumes. 2 This section is only a very brief summary of the methods developed in mdh. Previous publications describe the algorithms in more detail <ref> [WVG91, WVG92, WVG94, WVGW94] </ref>. 3 Background and Related Work Much work has been done on accelerating raycasting algorithms by exploiting empty or homogeneous subregions of volume data. Many other ray tracing and ray casting approaches have been reported, but this section reviews mainly those that rely on hierarchical representation.
Reference: [WVG94] <author> Jane Wilhelms and Allen Van Gelder. </author> <title> Multi-dimensional trees for controlled volume rendering and compression. </title> <booktitle> In ACM Workshop on Volume Visualization 1994, </booktitle> <address> Washington, D.C., </address> <month> October </month> <year> 1994. </year> <note> See also technical report UCSC-CRL-94-02. </note>
Reference-contexts: 1 Introduction This paper further explores visualization using an error-controlled hierarchy, as initially described earlier <ref> [WVG94] </ref>. The particular emphasis here is the addition of a ray-caster to the direct volume rendering methods already available in the program (coherent projection [WVG91] and hardware 3D texture maps [WVGW94]), and the comparison of the three methods. <p> Therefore, the hierarchy and its selective traversal provide a fast and flexible method of imaging large volumes. 2 This section is only a very brief summary of the methods developed in mdh. Previous publications describe the algorithms in more detail <ref> [WVG91, WVG92, WVG94, WVGW94] </ref>. 3 Background and Related Work Much work has been done on accelerating raycasting algorithms by exploiting empty or homogeneous subregions of volume data. Many other ray tracing and ray casting approaches have been reported, but this section reviews mainly those that rely on hierarchical representation. <p> Homogeneity and fi-acceleration techniques are implemented on raycasting and wavelet coefficients are directly used to hierarchically sample data along the ray. Wilhelms and Van Gelder extended the work of Laur and Hanrahan by incorporating additional basis functions, permitting the data to be fit by a trilinear function <ref> [WVG94] </ref>. <p> However, the criteria for choosing the appropriate level differ substantially among the methods. 4 Ray-Casting Algorithm The ray-casting method reported here was integrated into the multi-dimensional hierarchical system reported previously <ref> [WVG94] </ref>. This modular approach gave us numerous capabilities, essentially free of charge, such as depth selection based on error metrics and data importance, interrupt checking, choice of display dimensions on higher dimensional data. <p> We are presently exploring the amount of error this may introduce. An alternative is to use finite differences for the gradient within the data. 6 Comparison of Rendering Methods Our hierarchical visualization software provides three methods of direct volume rendering: coherent projection <ref> [WVG91, WVG94] </ref>, hardware 3D textures [WVGW94], and ray-casting. Coherent projection uses hardware-assisted Gouraud shading to provide a fast and reasonably good quality image [WVG91, LH91, ST90]. Assuming parallel projection, a projection of one region (the template) is always a uniformly scaled version of the projection of any other.
Reference: [WVGW94] <author> Orion Wilson, Allen Van Gelder, and Jane Wilhelms. </author> <title> Direct volume rendering via 3d textures. </title> <type> Technical Report UCSC-CRL-94-19, </type> <institution> CIS Board, University of California, Santa Cruz, </institution> <year> 1994. </year> <month> 12 </month>
Reference-contexts: 1 Introduction This paper further explores visualization using an error-controlled hierarchy, as initially described earlier [WVG94]. The particular emphasis here is the addition of a ray-caster to the direct volume rendering methods already available in the program (coherent projection [WVG91] and hardware 3D texture maps <ref> [WVGW94] </ref>), and the comparison of the three methods. The higher speeds of modern graphics workstations make ray-casting in 3D volumes practical for moderately sized volumes, although still not interactive in most cases. Various acceleration techniques can usually improve the speed substantially, as reviewed in Section 3. <p> Therefore, the hierarchy and its selective traversal provide a fast and flexible method of imaging large volumes. 2 This section is only a very brief summary of the methods developed in mdh. Previous publications describe the algorithms in more detail <ref> [WVG91, WVG92, WVG94, WVGW94] </ref>. 3 Background and Related Work Much work has been done on accelerating raycasting algorithms by exploiting empty or homogeneous subregions of volume data. Many other ray tracing and ray casting approaches have been reported, but this section reviews mainly those that rely on hierarchical representation. <p> We are presently exploring the amount of error this may introduce. An alternative is to use finite differences for the gradient within the data. 6 Comparison of Rendering Methods Our hierarchical visualization software provides three methods of direct volume rendering: coherent projection [WVG91, WVG94], hardware 3D textures <ref> [WVGW94] </ref>, and ray-casting. Coherent projection uses hardware-assisted Gouraud shading to provide a fast and reasonably good quality image [WVG91, LH91, ST90]. Assuming parallel projection, a projection of one region (the template) is always a uniformly scaled version of the projection of any other. <p> It runs on standard graphics hardware. While parallelization is not as straight-forward as with a ray-caster, images could be created in parallel from different regions of the tree and composited. Hardware 3D texture mapping is a very fast method available on machines that have this feature <ref> [CCF94, GL94, WVGW94, CN93] </ref>. (An example of such a machine is the SGI Reality Engine.) In this case, a version of the data taking into account distance between data points is stored as a 3D texture map. The volume is created by drawing polygonal texture-mapped slices through the texture map.
References-found: 16

