URL: ftp://ftp.cs.rochester.edu/pub/papers/theory/95.tr587.PL_hierarchy_collapses.ps.gz
Refering-URL: http://www.cs.rochester.edu/users/faculty/ogihara/research/pubs.html
Root-URL: 
Title: The PL Hierarchy Collapses  
Author: Mitsunori Ogihara 
Date: June, 1995  
Address: Rochester, NY 14627  
Affiliation: Department of Computer Science University of Rochester  
Pubnum: Technical Report 587  
Abstract-found: 0
Intro-found: 1
Reference: [AO94] <author> E. Allender and M. Ogihara. </author> <title> Relationships among PL, #L, and the determinant. </title> <booktitle> In Proceedings of the 9th Conference on Structure in Complexity Theory, </booktitle> <pages> pages 267-278. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: For a nondeterministic Turing machine M and a string x, let acc M (x) (respectively, rej M (x)) denote the number of accepting (respectively, rejecting) computation paths of M on x, and let gap M (x) denote acc M (x)rej M (x). We define the logspace analogue GapL <ref> [AO94] </ref> of GapP [FFK94] as follows. GapL = fgap M fi fi M is a logarithmic space-bounded and polynomial time-bounded nondeterministic Turing machine g. By replacing the probabilistic coin tosses by nondeterministic moves, we obtain the following characterization of PL. Proposition 1.3 [AO94] L 2 PL if and only if there <p> We define the logspace analogue GapL <ref> [AO94] </ref> of GapP [FFK94] as follows. GapL = fgap M fi fi M is a logarithmic space-bounded and polynomial time-bounded nondeterministic Turing machine g. By replacing the probabilistic coin tosses by nondeterministic moves, we obtain the following characterization of PL. Proposition 1.3 [AO94] L 2 PL if and only if there exists f 2 GapL such that for every x, x 2 L if and only if f (x) 0. 1 Recently, Beigel, Reingold, and Spielman [BRS95] showed a striking result that PP is closed under intersection. <p> They exhibited a method to construct GapP functions with certain properties. Extending the method, Fortnow and Reingold [FR91] showed that PP is actually closed under polynomial-time truth-table reductions. As PL is characterized in terms of GapL, we could prove closure properties of PL using similar methods. Allender and Ogihara <ref> [AO94] </ref> showed that PL is indeed closed under both logspace conjunctive truth-table reductions and logspace disjunctive truth-table reductions. In this paper, we strengthen the closure properties of PL. In fact, we show that the relativized PL hierarchy collapses to PL. <p> The requirement is essential to consider relativized logspace classes, because without the requirement, PL relative to L coincides with PP, which is though of as an unlikely event. The equivalence result by Jung is relativizable; that is, for every language A, PL A = PL poly A <ref> [AO94] </ref>. So, we do not have to worry about the time-bound when we consider the relativization of PL. Definition 1.4 The relativized PL hierarchy PLH is defined as follows: PLH = PL PL PL PL PL PL [ Is the hierarchy proper? The answer is negative.
Reference: [Bar89] <author> D. Barrington. </author> <title> Bounded-width polynomial-size branching programs recognize exactly those languages in NC 1 . Journal of Computer and System Science, </title> <booktitle> 38 </booktitle> <pages> 150-164, </pages> <year> 1989. </year>
Reference-contexts: Once we obtain the closure property, it is easy to extend it to the closure property under logspace-uniform constant-depth, unbounded-fan-in circuit reductions, in which arbitrary modulo q gates and threshold gates are allowed. Therefore, PL is closed under logspace-uniform TC 0 -reductions [Rei87] and is closed under ACC-reductions <ref> [Bar89] </ref>. Now that PL is closed under arbitrary constant-depth circuits, we ask whether PL is closed under NC 1 -reductions [Coo85,Wil87]. We currently do not know the answer to the question. Acknowledgment The author would like to thank Eric Allender for enjoyable discussions and insightful comments.
Reference: [BCP83] <author> A. Borodin, S. Cook, and N. Pippenger. </author> <title> Parallel computation for well-endowed rings and space-bounded probabilistic machines. </title> <journal> Information and Control, </journal> <volume> 58 </volume> <pages> 113-136, </pages> <year> 1983. </year>
Reference: [BRS95] <author> R. Beigel, N. Reingold, and D. Spielman. </author> <title> PP is closed under intersection. </title> <journal> Journal of Computer and System Science, </journal> <volume> 50 </volume> <pages> 191-202, </pages> <year> 1995. </year> <month> 9 </month>
Reference-contexts: Proposition 1.3 [AO94] L 2 PL if and only if there exists f 2 GapL such that for every x, x 2 L if and only if f (x) 0. 1 Recently, Beigel, Reingold, and Spielman <ref> [BRS95] </ref> showed a striking result that PP is closed under intersection. They exhibited a method to construct GapP functions with certain properties. Extending the method, Fortnow and Reingold [FR91] showed that PP is actually closed under polynomial-time truth-table reductions. <p> Proposition 2.2 A languages L is in PL if and only if there exists a function f in GapL such that for every x, f (x) 1 if x 2 L and f (x) 1 otherwise. Here we define the "magic" polynomials by Beigel, Reingold, and Spielman <ref> [BRS95] </ref>. Definition 2.3 Let m 1 and k 1.
Reference: [Coo85] <author> S. Cook. </author> <title> A taxonomy of problems with fast parallel algorithms. </title> <journal> Information and Computation, </journal> <volume> 64 </volume> <pages> 2-22, </pages> <year> 1985. </year>
Reference: [FFK94] <author> S. Fenner, L. Fortnow, and S. Kurtz. </author> <title> Gap-definable counting classes. </title> <journal> Journal of Computer and System Science, </journal> <volume> 48(1) </volume> <pages> 116-148, </pages> <year> 1994. </year>
Reference-contexts: We define the logspace analogue GapL [AO94] of GapP <ref> [FFK94] </ref> as follows. GapL = fgap M fi fi M is a logarithmic space-bounded and polynomial time-bounded nondeterministic Turing machine g. By replacing the probabilistic coin tosses by nondeterministic moves, we obtain the following characterization of PL. <p> It is known that PLH coincides with the closure of PL under logspace-uniform AC 0 reductions [Wil90]. So, the collapse result implies AC 0 (PL) = PL. 2 Properties of GapL The following properties of GapL can be proven by following proofs similar to those of GapP in <ref> [FFK94] </ref>. Theorem 2.1 Let f be a function in GapL, g : fl fi N 7! fl be a function in FL, and p be a polynomial.
Reference: [FR91] <author> L. Fortnow and N. Reingold. </author> <title> PP is closed under truth-table reductions. </title> <booktitle> In Proceedings of the 6th Conference on Structure in Complexity Theory, </booktitle> <pages> pages 13-15. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: They exhibited a method to construct GapP functions with certain properties. Extending the method, Fortnow and Reingold <ref> [FR91] </ref> showed that PP is actually closed under polynomial-time truth-table reductions. As PL is characterized in terms of GapL, we could prove closure properties of PL using similar methods. Allender and Ogihara [AO94] showed that PL is indeed closed under both logspace conjunctive truth-table reductions and logspace disjunctive truth-table reductions.
Reference: [Gil77] <author> J. Gill. </author> <title> Computational complexity of probabilistic Turing machines. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6(4) </volume> <pages> 675-695, </pages> <year> 1977. </year>
Reference-contexts: 1 Introduction The power of probabilistic computations has been a central research area in complexity theory. Above all, class PP, the probabilistic polynomial-time, introduced independently by Gill <ref> [Gil77] </ref> and Simon [Sim75], has been widely studied in the literature, and recently there have emerged remarkable results to clarify the power of PP. <p> One might expect that a similar observation would shed light on the power of PL, introduced by Gill <ref> [Gil77] </ref> as the logarithmic-space analogue of PP. Definition 1.1 [Gil77] A language L belongs to PL if there is a logarithmic space-bounded probabilistic Turing machine M with no time-bound such that for ever x, x 2 L if and only if the probability that M on x accepts is at least <p> One might expect that a similar observation would shed light on the power of PL, introduced by Gill <ref> [Gil77] </ref> as the logarithmic-space analogue of PP. Definition 1.1 [Gil77] A language L belongs to PL if there is a logarithmic space-bounded probabilistic Turing machine M with no time-bound such that for ever x, x 2 L if and only if the probability that M on x accepts is at least a half.
Reference: [Jun85] <author> H. Jung. </author> <title> On probabilistic time and space. </title> <booktitle> In Proceedings of the 12th Conference on Automata, Languages and Programming, </booktitle> <pages> pages 310-317. </pages> <note> Springer-Verlag Lecture Notes in Computer Science #194, </note> <year> 1985. </year>
Reference-contexts: An immediate question arising from the definition is whether demanding that the machine M be polynomial time-bounded makes any difference. Let us use PL poly to denote the class defined by the machines with that restriction. Jung <ref> [Jun85] </ref> showed that these classes are indeed identical. Proposition 1.2 [Jun85] PL = PL poly . This equivalence allows us to introduce counting functions to capture PL. <p> An immediate question arising from the definition is whether demanding that the machine M be polynomial time-bounded makes any difference. Let us use PL poly to denote the class defined by the machines with that restriction. Jung <ref> [Jun85] </ref> showed that these classes are indeed identical. Proposition 1.2 [Jun85] PL = PL poly . This equivalence allows us to introduce counting functions to capture PL.
Reference: [Rei87] <author> J. Reif. </author> <title> On threshold circuits and polynomial computation. </title> <booktitle> In Proceedings of the 2nd Conference on Structure in Complexity Theory, </booktitle> <pages> pages 118-123. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1987. </year>
Reference-contexts: Once we obtain the closure property, it is easy to extend it to the closure property under logspace-uniform constant-depth, unbounded-fan-in circuit reductions, in which arbitrary modulo q gates and threshold gates are allowed. Therefore, PL is closed under logspace-uniform TC 0 -reductions <ref> [Rei87] </ref> and is closed under ACC-reductions [Bar89]. Now that PL is closed under arbitrary constant-depth circuits, we ask whether PL is closed under NC 1 -reductions [Coo85,Wil87]. We currently do not know the answer to the question.
Reference: [RST84] <author> W. Ruzzo, J. Simon, and M. Tompa. </author> <title> Space-bounded hierarchies and probabilistic computations. </title> <journal> Journal of Computer and System Science, </journal> <volume> 28 </volume> <pages> 216-230, </pages> <year> 1984. </year>
Reference-contexts: The requirement in (1) that M should run deterministically while generating queries is called the Ruzzo-Simon-Tompa relativization <ref> [RST84] </ref>. The requirement is essential to consider relativized logspace classes, because without the requirement, PL relative to L coincides with PP, which is though of as an unlikely event. The equivalence result by Jung is relativizable; that is, for every language A, PL A = PL poly A [AO94].
Reference: [Sim75] <author> J. Simon. </author> <title> On some central problems in computational complexity. </title> <type> PhD thesis, </type> <institution> Cor-nell Univeristy, </institution> <address> Ithaca, NY, </address> <year> 1975. </year> <note> Available as Cornell Department of Computer Science Technical Report TR75-224. </note>
Reference-contexts: 1 Introduction The power of probabilistic computations has been a central research area in complexity theory. Above all, class PP, the probabilistic polynomial-time, introduced independently by Gill [Gil77] and Simon <ref> [Sim75] </ref>, has been widely studied in the literature, and recently there have emerged remarkable results to clarify the power of PP.
Reference: [Val79] <author> L. Valiant. </author> <title> The complexity of computing the permanent. </title> <journal> Theoretical Computer Science, </journal> <volume> 8 </volume> <pages> 189-201, </pages> <year> 1979. </year>
Reference-contexts: Such results are established, in some sense, based on the observation that PP can be characterized in terms of the functions that count the number of accepting computation paths of nondeterministic Turing machines; namely, #P <ref> [Val79] </ref>. One might expect that a similar observation would shed light on the power of PL, introduced by Gill [Gil77] as the logarithmic-space analogue of PP.
Reference: [Wil87] <author> C. Wilson. </author> <title> Relatizived NC. </title> <journal> Mathematical Systems Theory, </journal> <volume> 20 </volume> <pages> 13-29, </pages> <year> 1987. </year>
Reference: [Wil90] <author> C. Wilson. </author> <title> On the decomposability of NC and AC. </title> <journal> SIAM Journal on Computing, </journal> <volume> 19(2) </volume> <pages> 384-296, </pages> <month> April </month> <year> 1990. </year> <month> 10 </month>
Reference-contexts: We show PL PL = PL, and thus, PLH = PL. It is known that PLH coincides with the closure of PL under logspace-uniform AC 0 reductions <ref> [Wil90] </ref>. So, the collapse result implies AC 0 (PL) = PL. 2 Properties of GapL The following properties of GapL can be proven by following proofs similar to those of GapP in [FFK94].
References-found: 15

