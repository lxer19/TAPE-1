URL: ftp://grilled.cs.wisc.edu/naim/andes.ps.gz
Refering-URL: http://www.cs.wisc.edu/~naim/publications.html
Root-URL: 
Email: e-mail: on92r@ecs.soton.ac.uk  e-mail: teruel@usb.ve  
Title: ANDES: A Performance Analyzer for Parallel Programs determines the following metrics: speedup, efficiency, experimentally determined
Author: Oscar Nam Alejandro Teruel 
Note: ANDES  
Date: October 1992  
Address: Southampton S09 5NH, UK  Caracas, Venezuela  
Affiliation: Dept. of Electronics Computer Science Southampton University  Computer Science Department Universidad Simon Bolvar  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Acosta, D. and Fernandez, M., </author> <title> Generacion de Variables Aleatorias en Paralelo. </title> <institution> Computing Engineering Thesis, Universidad Simon Bolivar, Caracas, Venezuela, </institution> <month> January </month> <year> 1992. </year>
Reference-contexts: This iterative evaluation process continues until the performance is satisfactory or no further improvements can be gained. 7 Experiences with ANDES In order to evaluate ANDES with a real problem and validate the methodology proposed, Acosta and Fernandez <ref> [1] </ref> implemented a parallel version of the Gibbs Sampler algorithm and analyzed it using ANDES. The Gibbs Sampler algorithm determines a curve that represents the function associated with a given collection of initial data using statistical methods. <p> Load and Communication balancing Elapsed time Communication and no communication time 6 Synchronization time between processes Percentage of cpu-communication overlapping Percentage of idle time per processor * The ANDES prototype is a useful tool to analyze the performance of parallel programs, as has been shown by the Gibbs Sampler algorithm <ref> [1] </ref>. * The algorithm described by Jones in [7] to compute the percentage of idle time per processor, has given good results within the serial fraction. * The percentage of cpu-communication overlapping is a new metric proposed in this work that can be used to compute the degree of parallelism in
Reference: [2] <author> Burkhart, H. and Millen, R., </author> <title> Performance-Measurement Tools in a Multiprocessor Environment, </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. 38, No. 5, </volume> <month> May </month> <year> 1989. </year>
Reference-contexts: In [11] there is a description of the methodology and studies made in order to evaluate SIMPAR. In the literature, we can find similar tools like <ref> [2] </ref>, [3], [4], [5], [9], [12], [13], [14] and [16].
Reference: [3] <author> Couch, A. and Krumme, D., </author> <title> Monitoring Parallel Executions in Real Time, </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: In [11] there is a description of the methodology and studies made in order to evaluate SIMPAR. In the literature, we can find similar tools like [2], <ref> [3] </ref>, [4], [5], [9], [12], [13], [14] and [16].
Reference: [4] <author> Gabber, E., </author> <title> VMMP: A Practical Tool for the Development of Portable and Efficient Programs for Multiprocessors, </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> Vol. 1, No. 3, </volume> <month> July </month> <year> 1990. </year>
Reference-contexts: In [11] there is a description of the methodology and studies made in order to evaluate SIMPAR. In the literature, we can find similar tools like [2], [3], <ref> [4] </ref>, [5], [9], [12], [13], [14] and [16].
Reference: [5] <author> Harrison, W., </author> <title> Tools for Multiple-CPU Environments, </title> <journal> IEEE Software, </journal> <month> May </month> <year> 1990. </year>
Reference-contexts: In [11] there is a description of the methodology and studies made in order to evaluate SIMPAR. In the literature, we can find similar tools like [2], [3], [4], <ref> [5] </ref>, [9], [12], [13], [14] and [16].
Reference: [6] <author> INMOS, </author> <title> Ansi C Toolset User Manual, INMOS Limited, </title> <year> 1990. </year>
Reference-contexts: The development of ANDES took approximately one year, considering that there already existed an ANSI C parser to build the abstract tree related to the program being analyzed [15]. The ANDES prototype was written in parallel INMOS ANSI C <ref> [6] </ref> and has around 1300 lines of code. ANDES has three main modules: * Configurer: Allows the user to introduce the particular hardware characteristics like topology, communication channels, etc. Using this information, ANDES can decide how to transmit the results of the analysis at the end of the process.
Reference: [7] <editor> Jones, G., et al, </editor> <title> Measuring the Busyness of a Transputer, </title> <booktitle> Occam User Group Newletter, </booktitle> <volume> No. 12, </volume> <month> January </month> <year> 1990. </year>
Reference-contexts: no communication time 6 Synchronization time between processes Percentage of cpu-communication overlapping Percentage of idle time per processor * The ANDES prototype is a useful tool to analyze the performance of parallel programs, as has been shown by the Gibbs Sampler algorithm [1]. * The algorithm described by Jones in <ref> [7] </ref> to compute the percentage of idle time per processor, has given good results within the serial fraction. * The percentage of cpu-communication overlapping is a new metric proposed in this work that can be used to compute the degree of parallelism in one specific processor. * The ANDES prototype is
Reference: [8] <author> Karp, A. and Flatt, H., </author> <title> Measuring Parallel Processor Performance, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 33, No. 5, </volume> <month> May </month> <year> 1990. </year>
Reference-contexts: With this information in mind, this paper is going to describe some of the most useful metrics to analyze parallel programs: speedup, efficiency, experimentally determined serial fraction <ref> [8] </ref> and percentage of cpu-communication overlapping. The remainding metrics: percentage of idle time per processor, load and communication balancing and synchronization time are described in detail in [10]. <p> To calculate this serial fraction in an analytical way is a very complex problem, because there is not an easy way to determine for each program which fraction of it is executed serially and which fraction is not. For this reason, Karp and Flatt in <ref> [8] </ref> introduce the definition of experimentally determined serial fraction (serial fraction from now on), which is an empirical estimation of the theoretical serial fraction. The serial fraction is defined by the following equation: 3 f = A (n;p) 1 1 1 where A (n,p) is the speedup for p processors.
Reference: [9] <author> McLaren, R. and Rogers, W., </author> <title> Instrumentation and Performance Monitoring of Distributed Systems, </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: In [11] there is a description of the methodology and studies made in order to evaluate SIMPAR. In the literature, we can find similar tools like [2], [3], [4], [5], <ref> [9] </ref>, [12], [13], [14] and [16].
Reference: [10] <author> Naim, O., Un Analizador de desempeno de programas en C paralelo (ANDES), </author> <type> Master's thesis, </type> <institution> Universidad Simon Bolivar, Caracas, Venezuela, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: The remainding metrics: percentage of idle time per processor, load and communication balancing and synchronization time are described in detail in <ref> [10] </ref>. The speedup is the elapsed time of the best sequential algorithm divided by the elapsed time required by the parallel version on p processors. The efficiency is related to price-performance. It is defined by the ratio between the speedup and the number of processors. <p> Considering the precision of the measurements made by ANDES, the error was 14% in the worst case (synchronization time between processes) and 1% in the best case (communication time). The results about other experiences, including a LU parallel decomposition algorithm, are described in <ref> [10] </ref>. 8 Conclusions * ANDES is a software monitor that analyzes the performance behaviour of a parallel program by applying performance debugging. * ANDES computes the following metrics: Speedup Efficiency Serial fraction Load and Communication balancing Elapsed time Communication and no communication time 6 Synchronization time between processes Percentage of cpu-communication
Reference: [11] <author> Naim, O. and Teruel, A., </author> <title> Consideraciones sobre el Paralelismo en SIMPAR (FASE I), </title> <type> Technical report IT-1991-001, </type> <institution> Computer Science Department, Universidad Simon Bolivar, Caracas, Venezuela, </institution> <year> 1991. </year>
Reference-contexts: The main goal of the project is to build commercial software to resolve linear programming problems on a transputer based platform using a PC as a front-end. In <ref> [11] </ref> there is a description of the methodology and studies made in order to evaluate SIMPAR. In the literature, we can find similar tools like [2], [3], [4], [5], [9], [12], [13], [14] and [16].
Reference: [12] <author> Nichols, K., </author> <title> Performance Tools, </title> <journal> IEEE Software, </journal> <month> May </month> <year> 1990. </year>
Reference-contexts: In [11] there is a description of the methodology and studies made in order to evaluate SIMPAR. In the literature, we can find similar tools like [2], [3], [4], [5], [9], <ref> [12] </ref>, [13], [14] and [16].
Reference: [13] <author> Pease et al, PAWS: </author> <title> A Performance Evaluation Tool for Parallel Computing Systems, </title> <booktitle> IEEE Computer, </booktitle> <month> January </month> <year> 1991. </year>
Reference-contexts: In [11] there is a description of the methodology and studies made in order to evaluate SIMPAR. In the literature, we can find similar tools like [2], [3], [4], [5], [9], [12], <ref> [13] </ref>, [14] and [16].
Reference: [14] <author> Reilly, M., </author> <title> A Performance Monitor for Parallel Programs, </title> <publisher> Academic Press Inc., </publisher> <year> 1990. </year>
Reference-contexts: In [11] there is a description of the methodology and studies made in order to evaluate SIMPAR. In the literature, we can find similar tools like [2], [3], [4], [5], [9], [12], [13], <ref> [14] </ref> and [16].
Reference: [15] <author> Sanabria, M. and Hung, A., </author> <title> Construccion de un Parser de ANSI C, </title> <institution> Computing Engineering thesis, Universidad Simon Bolivar, Caracas, Venezuela, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: The development of ANDES took approximately one year, considering that there already existed an ANSI C parser to build the abstract tree related to the program being analyzed <ref> [15] </ref>. The ANDES prototype was written in parallel INMOS ANSI C [6] and has around 1300 lines of code. ANDES has three main modules: * Configurer: Allows the user to introduce the particular hardware characteristics like topology, communication channels, etc.
Reference: [16] <author> Wagner, A., Chanson, S., Goldstein, N., Jiang, J., Larsen, H. and Sreekantaswamy, H., </author> <title> TIPS: Transputer-based Interactive Parallelizing System, </title> <institution> Department of Computer Science, University of Columbia, </institution> <year> 1991. </year> <month> 8 </month>
Reference-contexts: In [11] there is a description of the methodology and studies made in order to evaluate SIMPAR. In the literature, we can find similar tools like [2], [3], [4], [5], [9], [12], [13], [14] and <ref> [16] </ref>.
References-found: 16

