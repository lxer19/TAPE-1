URL: http://www.cs.cmu.edu/afs/cs/project/theo-11/www/siegfried.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs/project/theo-11/www/publications.html
Root-URL: 
Phone: 2  
Title: "Programmed" by their Users  
Author: Siegfried Bocionek and Tom M. Mitchell 
Date: Sept. 93  
Address: ZFE ST SN 33, Otto-Hahn-Ring 6, 8000 Munchen 83, Germany  5000 Forbes Avenue, Pittsburgh, PA 15213-3891, USA  GI), Dresden, Germany,  
Affiliation: 1 Siemens AG,  Carnegie Mellon University, School of Computer Science,  of Computer Science (Gesellschaft fur Informatik,  
Note: Office Automation Systems that are  23rd Annual Conference of the German Association  
Abstract: To be highly useful, office automation systems require customization to individual users, work environments, and tasks. We consider the question of whether office automation systems can be developed that allow users who are not skilled programmers to easily "program", or customize, these tools themselves. In other words, can we deploy very general, non-customized programs that can be extended and adapted during usage? Besides the well-known knowledge acquisition and automated learning methods we propose an approach called dialog-based learning (DBL), that allows the user to teach the system directly while performing the task. It acquires knowledge through a dialog in which the user both illustrates the procedure using a grounded example, and provides instructions about how to perform the task in the general case. We focus discussion on CAP II (a program that schedules meetings by negotiation via email), and on RAP (a program that makes room reservation via email).
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> S. Bocionek and T. Mitchell. </author> <title> CAP II: Making the Calendar Apprentice an Agent. </title> <type> Technical Report CMU-CS-93-to-appear, </type> <institution> Carnegie Mellon University, School of Computer Science, </institution> <address> Pittsburgh, PA, </address> <year> 1993. </year>
Reference-contexts: If all recipients possess CAP II, their agents may negotiate until a commonly acceptable date is found. If one recipient does not have CAP II, the message is human readable and he may respond directly. A collection of CAP II agents (see also <ref> [1] </ref>) forms a system of communicating finite state machines (FSM) that interact by means of a contract-net protocol similar to that of Sen and Durfee [8]. <p> Some task-independent rudimentary structure is pre-programmed into RAP. The specific RAP messages are filtered by means of keywords in the subject line (the word "RAP-Request" in Fig. 1 is used for filtering, the connected word "xx123" for identifying a specific event; those mechanisms work exactly like in CAP II <ref> [1] </ref>). The pre-programmed behavior of RAP includes primarily the "empty" FSM that contains only start and stop states, and the "meta format" of the email messages. The strategy for adding states and transitions to the FSM is fixed. <p> RAP analyzes the message before sending it. It asks the user the following questions: To which type of interaction does this message belong? (room-request, positive-answer, counter-proposal, other) Assume the user answers with "room-request" (under some "good-will assump tion"; see <ref> [1] </ref>). Then RAP will next ask Which is the meaning-carrying phrase in that message? Table 2.
Reference: 2. <author> S. Bocionek and M. Sassin. </author> <title> Dialog-Based Learning (DBL) for Adaptive Interface Agents and Programming-by-Demonstration Systems. </title> <type> Technical Report CMU-CS-93-to-appear, </type> <institution> Carnegie Mellon University, School of CS, </institution> <address> Pittsburgh, PA, </address> <year> 1993. </year>
Reference-contexts: If yes, the transition is goto global-start. Otherwise, a new state is generated and added as a new row. 4 For example, RAP has learned to go to state s1 (see 3 A discussion of the limitations and assumptions made in RAP can be found in <ref> [2] </ref>. 4 This strategy does not construct the minimal FSM because no merging of states happens. How to provide such an optimization is still under consideration (for details refer to [2]). <p> go to state s1 (see 3 A discussion of the limitations and assumptions made in RAP can be found in <ref> [2] </ref>. 4 This strategy does not construct the minimal FSM because no merging of states happens. How to provide such an optimization is still under consideration (for details refer to [2]). Table 2) always when the user sends a request with keyphrase "need a room", and if "RAP-Request" appears in the subject line of an outgoing email message. Table 2 shows the FSM after also having learned the message type positive-answer.
Reference: 3. <author> L. Dent, et al. </author> <title> A Personal Learning Apprentice. </title> <booktitle> In National Conference on Artificial Intelligence (AAAI-92), </booktitle> <month> August </month> <year> 1992. </year>
Reference-contexts: This paper considers the question of how to organize such field-customizable systems, if their users are not skilled programmers. Our work on the calendar assistant CAP <ref> [3] </ref> has shown that machine learning techniques can play a role in providing the kind of user customiza-tion desired. It has also shown the limitations of such fully automatic learning methods. <p> Nakauchi et al. [7] have developed a related learning system for the processing of purchase orders. Their system learns rules that help the user complete the purchase order form. 2 CAP II: A learning, communicating, and negotiating Calendar APprentice The calendar apprentice CAP <ref> [3] </ref> is a calendar program that learns to give advice to its user on how to set up a meeting (i.e. how long, where, when).
Reference: 4. <author> R. Kozierok and P. Maes. </author> <title> A learning interface agent for scheduling meetings. </title> <booktitle> In Int. Workshop on Intelligent User Interfaces, </booktitle> <address> Orlando, Fl, </address> <month> January </month> <year> 1993. </year> <month> ACM-SIGCHI. </month>
Reference-contexts: Another implementation of meeting negotiation through contract nets was done by Lux [5]. Based on a general "negotiation language", calendar agents were specified and interfaced to existing calendar tools (e.g., Xcalentool). While the above approaches have no learning capabilities, the negotiating calendar of Kozierok and Maes <ref> [4] </ref> does. The difference from our CAP II system in learning is that it uses mainly memory-based learning, while we explicitly construct general rules. Nakauchi et al. [7] have developed a related learning system for the processing of purchase orders.
Reference: 5. <author> A. Lux. </author> <title> A Multi-Agent Approach towards Group Scheduling. </title> <institution> Research Report RR-92-41, DFKI, Kaiserslautern, Germany, </institution> <month> August </month> <year> 1992. </year>
Reference-contexts: A procedure for using contract net protocols to schedule meetings was reported by Sen and Durfee [8]. The communicating automata of CAP II are an extension to that approach. Another implementation of meeting negotiation through contract nets was done by Lux <ref> [5] </ref>. Based on a general "negotiation language", calendar agents were specified and interfaced to existing calendar tools (e.g., Xcalentool). While the above approaches have no learning capabilities, the negotiating calendar of Kozierok and Maes [4] does.
Reference: 6. <author> R. Medina-Mora, T. Winograd, R. Flores, and F. Flores. </author> <title> The ActionWorkflow approach to workflow management technology. </title> <editor> In J. Turner and R. Kraut, editors, </editor> <booktitle> CSCW '92 (Sharing Perspectives), </booktitle> <address> Toronta, Canada, </address> <month> November </month> <year> 1992. </year> <note> ACM Press. </note>
Reference-contexts: There is good deal of related work in calendar and other workflow applications. Medina-Mora et al. <ref> [6] </ref> have proposed a general workflow model that fits many office tasks. A procedure for using contract net protocols to schedule meetings was reported by Sen and Durfee [8]. The communicating automata of CAP II are an extension to that approach.
Reference: 7. <author> Y. Nakauchi, et al. </author> <title> Groupware that Learns. </title> <booktitle> In Proc. of the IEEE Pacific Rim Communications, Computers and Signal Processing. </booktitle> <publisher> IEEE Press, </publisher> <month> May </month> <year> 1991. </year>
Reference-contexts: While the above approaches have no learning capabilities, the negotiating calendar of Kozierok and Maes [4] does. The difference from our CAP II system in learning is that it uses mainly memory-based learning, while we explicitly construct general rules. Nakauchi et al. <ref> [7] </ref> have developed a related learning system for the processing of purchase orders.
Reference: 8. <author> S. Sen and E.H. Durfee. </author> <title> A formal study of distributed meeting scheduling: Preliminary results. </title> <booktitle> In Conference on Organizational Computing Systems. ACM, </booktitle> <month> November </month> <year> 1991. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: There is good deal of related work in calendar and other workflow applications. Medina-Mora et al. [6] have proposed a general workflow model that fits many office tasks. A procedure for using contract net protocols to schedule meetings was reported by Sen and Durfee <ref> [8] </ref>. The communicating automata of CAP II are an extension to that approach. Another implementation of meeting negotiation through contract nets was done by Lux [5]. Based on a general "negotiation language", calendar agents were specified and interfaced to existing calendar tools (e.g., Xcalentool). <p> A collection of CAP II agents (see also [1]) forms a system of communicating finite state machines (FSM) that interact by means of a contract-net protocol similar to that of Sen and Durfee <ref> [8] </ref>. The involvement of non-CAP users is ensured by a readable, semi-structured email message format and some special supporting mechanisms such as suggesting at the end of each message how to reply.
References-found: 8

