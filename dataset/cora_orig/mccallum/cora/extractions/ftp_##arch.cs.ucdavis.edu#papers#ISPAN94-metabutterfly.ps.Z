URL: ftp://arch.cs.ucdavis.edu/papers/ISPAN94-metabutterfly.ps.Z
Refering-URL: http://arch.cs.ucdavis.edu/~chong/pubs.html
Root-URL: http://www.cs.ucdavis.edu
Email: ftchong@lcs.mit.edu  brewer@cs.berkeley.edu  ftl@math.mit.edu  tk@ai.mit.edu  
Title: Building a Better Butterfly: The Multiplexed Metabutterfly  
Author: Frederic T. Chong Eric A. Brewer F. Thomson Leighton Thomas F. Knight, Jr. 
Address: Berkeley  
Affiliation: Massachusetts Institute of Technology University of California at  
Abstract: Multistage networks are important in a wide variety of applications. Expander-based networks, such as multibutterflies, are a tremendous improvement over traditional butterflies in both fault and congestion tolerance. However, multibutterflies cost at least twice as much in chips and wiring as butterflies. It is also impossible to build large multibutterflies due to their wiring complexity. We show that we can build an expander-based network that has comparable cost to a butterfly with the same number of endpoints, yet has substantially better fault and congestion performance. Specifically, we introduce a hierarchical construction that dramatically reduces wiring complexity and makes large expanders buildable. We are able to exploit the hierarchical structure to find large numbers of logical wires to multiplex over a smaller number of physical wires. Since many of the wires in an expander-based network are used to provide alternate paths, not useful bandwidth, substantial multiplexing can be done without significantly degrading performance. We present simulation results to support our conclusions. In comparing a butterfly with the comparable 2-to-1 multiplexed metabutterfly, we found that the metabutter-fly performed better by nearly a factor of two on random traffic and greater than a factor of five on worst-case traffic.
Abstract-found: 1
Intro-found: 1
Reference: [ALM90] <author> S. Arora, T. Leighton, and B. Maggs. </author> <title> On-line algorithms for path selection in a non-blocking network. </title> <booktitle> In Proceedings of the 22nd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 149-158, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Bassalygo and Pinsker [BP74] first studied splitter networks with expansion. Recently, numerous results have been discovered that indicate that multibutterflies are ideally suited for message-routing applications. Among other things, multibutterflies can solve any one-to-one packet routing [Upf89], circuit-switching <ref> [ALM90] </ref>, or non-blocking routing problem [ALM90] in optimal time, even if many of the routers in the network are faulty [LM89]. Although many other multipath networks [LP83] [CS82] [RK84] [KPR88] [TYZ88] have been proposed, none are known to be as powerful, especially for efficient, on-line message-routing. <p> Bassalygo and Pinsker [BP74] first studied splitter networks with expansion. Recently, numerous results have been discovered that indicate that multibutterflies are ideally suited for message-routing applications. Among other things, multibutterflies can solve any one-to-one packet routing [Upf89], circuit-switching <ref> [ALM90] </ref>, or non-blocking routing problem [ALM90] in optimal time, even if many of the routers in the network are faulty [LM89]. Although many other multipath networks [LP83] [CS82] [RK84] [KPR88] [TYZ88] have been proposed, none are known to be as powerful, especially for efficient, on-line message-routing.
Reference: [AOST93] <author> Thomas E. Anderson, Susan S. Owicki, James B. Saxe, and Charles P. Thacker. </author> <title> High-speed switch scheduling for local-area networks. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 11(4) </volume> <pages> 319-352, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Our second implementation replaces each metanode with a single time-domain ATM switch such as the AN2 <ref> [AOST93] </ref>. The high-bandwidth, high-switching capabilities of such an ATM switch make them ideal for metanode implementation.
Reference: [BBN87] <institution> BBN Advanced Computers Inc., </institution> <address> Cambridge, MA. </address> <booktitle> Inside the Butterfly Plus, </booktitle> <month> October </month> <year> 1987. </year>
Reference-contexts: The goal of the multiplexed metabutterfly is the performance and fault tolerance of the metabutterfly with hardware requirements close to those of the traditional butterfly. We show through simulation that this goal is achievable. 2 Butterflies In this context, it is useful to view the traditional butterfly <ref> [BBN87] </ref> as the simplest form of a splitter network, as shown in Figure 2 (A). A splitter network is composed of multiple stages of routers. It is helpful to view routing a message through a splitter network as a sorting function through equivalence classes of fewer and fewer routers.
Reference: [BCL94] <author> Eric A. Brewer, Frederic T. Chong, and F. Thomson Leighton. </author> <title> Scalable expanders: exploiting hierarchical random wiring. </title> <booktitle> In Proceedings of the 26nd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 144-152, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: This represents the state of multistage networks prior to our work. Metabutterfly: Uses the same amount of hardware as the multibutterfly, but constrains the randomness of the wiring to ensure that large versions are practical. Despite the limited randomness, we proved that all the theoretical properties hold <ref> [BCL94] </ref>. In this paper we present evidence that the fault and congestion tolerance is identical in practice as well. The metabut-terfly thus provides all of the benefits of the multibutterfly without the wiring complexity, thus allowing very large networks. <p> Figure 4 (A) shows a radix-2 64-input metabutterfly that is an 8-extended 8-input multi-butterfly. This example has a two-level hierarchy, but deeper hierarchies are possible and actually make sense for very large networks. 5.1 Metabutterfly Properties Brewer, Chong, and Leighton <ref> [BCL94] </ref> have proven that any (ff; fi; M; N )-expander with ffM 1 can be scaled with a random k-extension into an (ff 0 ; fi 0 ; kM; kN )-expander with probability at least 1 2e ffM , where ff 0 = ff 2 fi 2 e 4 +4ff and
Reference: [BP74] <author> L. A. Bassalygo and M. S. Pinsker. </author> <title> Complexity of optimum nonblocking switching networks without reconnections. </title> <journal> Problems of Information Transmission, </journal> <volume> 9 </volume> <pages> 64-66, </pages> <year> 1974. </year>
Reference-contexts: Given multiplicity d, the degree of any node is dr. A multibutterfly is a splitter network in which each splitter is an (ff, fi; M; M r )-expander in each of the r directions, where M is the number of inputs of the splitter. Bassalygo and Pinsker <ref> [BP74] </ref> first studied splitter networks with expansion. Recently, numerous results have been discovered that indicate that multibutterflies are ideally suited for message-routing applications.
Reference: [Bre94] <author> Eric A. Brewer. </author> <title> Adaptive routing for fault tolerance and performance. Area Exam, </title> <institution> Massachusetts Institute of Technology, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: Figure 3 (B) shows an example of a random 3-extension. 5 Metabutterflies We apply random k-extensions to a multibutterfly to build a scalable, hierarchical network, the metabutterfly, first introduced by Brewer in <ref> [Bre94] </ref>. Each splitter of the metabutterfly is a random k-extension of the corresponding splitter of the multibutterfly, with the possible exception of the last few stages. The value of k may differ for each splitter.
Reference: [CED92] <author> Frederic Chong, Eran Egozy, and Andre DeHon. </author> <title> Fault tolerance and performance of multipath multistage interconnection networks. </title> <editor> In Thomas F. Knight Jr. and John Savage, editors, </editor> <booktitle> Advanced Research in VLSI and Parallel Systems 1992, </booktitle> <pages> pages 227-242. </pages> <publisher> MIT Press, </publisher> <month> March </month> <year> 1992. </year>
Reference-contexts: Although the theoretical bounds on ff degrade with each level of hierarchy, we now demonstrate empirically that the performance and fault tolerance of metabutterflies is identical to that of multi-butterflies. We use the methodology of previous studies <ref> [CED92] </ref> [CK92] and investigate performance with uniformly distributed router failures within each network. 5 We compared performance for a 1024-endpoint multibutterfly and for 1024-endpoint metabutterflies with metanode sizes of 8, 16, and 64. The routers had a radix of 4 and a multiplicity of 2.
Reference: [CK92] <author> Frederic T. Chong and Thomas F. Knight, Jr. </author> <title> Design and performance of multipath MIN architectures. </title> <booktitle> In Symposium on Parallel Architectures and Algorithms, </booktitle> <pages> pages 286-295, </pages> <address> San Diego, California, </address> <month> June </month> <year> 1992. </year> <note> ACM. </note>
Reference-contexts: Although the theoretical bounds on ff degrade with each level of hierarchy, we now demonstrate empirically that the performance and fault tolerance of metabutterflies is identical to that of multi-butterflies. We use the methodology of previous studies [CED92] <ref> [CK92] </ref> and investigate performance with uniformly distributed router failures within each network. 5 We compared performance for a 1024-endpoint multibutterfly and for 1024-endpoint metabutterflies with metanode sizes of 8, 16, and 64. The routers had a radix of 4 and a multiplicity of 2.
Reference: [CS82] <author> L. Ciminiera and A. Serra. </author> <title> A fault-tolerant connecting network for multiprocessor systems. </title> <booktitle> In Proceedings of the 1982 International Conference on Parallel Processing, </booktitle> <pages> pages 113-122. </pages> <publisher> IEEE, </publisher> <month> August </month> <year> 1982. </year>
Reference-contexts: Among other things, multibutterflies can solve any one-to-one packet routing [Upf89], circuit-switching [ALM90], or non-blocking routing problem [ALM90] in optimal time, even if many of the routers in the network are faulty [LM89]. Although many other multipath networks [LP83] <ref> [CS82] </ref> [RK84] [KPR88] [TYZ88] have been proposed, none are known to be as powerful, especially for efficient, on-line message-routing.
Reference: [DeH93] <author> Andre DeHon. </author> <title> Robust, high-speed network design for large-scale multiprocessing. </title> <type> AI Technical Report 1445, </type> <institution> MIT Artificial Intelligence Laboratory, 545 Technology Sq., </institution> <address> Cambridge, MA 02139, </address> <month> February </month> <year> 1993. </year> <month> 10 </month>
Reference-contexts: Figure 7 (B) compares a cascaded metanode to the equivalent butterfly hardware. The resulting metanode is a radix-r, multiplicity-n router. Since the original metanode had dn channels in each direction, our cascade implementation effectively performs d-to-1 multiplexing. The cascading of router chips is described in <ref> [DeH93] </ref>. Basically, a set of d cascaded width- w d chips work in tandem to simulate a single width-w router. Since pad delays dominate high-performance switches, latency of these cascaded routers should be comparable to those of the original butterfly.
Reference: [KPR88] <author> S.C. Kothari, G.M. Prabhu, and R. Roberts. </author> <title> The kappa network with fault-tolerant destination tag algorithm. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(5) </volume> <pages> 612-617, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Among other things, multibutterflies can solve any one-to-one packet routing [Upf89], circuit-switching [ALM90], or non-blocking routing problem [ALM90] in optimal time, even if many of the routers in the network are faulty [LM89]. Although many other multipath networks [LP83] [CS82] [RK84] <ref> [KPR88] </ref> [TYZ88] have been proposed, none are known to be as powerful, especially for efficient, on-line message-routing.
Reference: [KS83] <author> Clyde P. Kruskal and Marc Snir. </author> <title> The performance of multistage interconnection networks for multiprocessors. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-32(12):1091-1098, </volume> <month> December </month> <year> 1983. </year>
Reference-contexts: An individual splitter consists of an equivalence class and its r associated equivalence classes in the next stage. The dilated butterfly <ref> [KS83] </ref>, shown in Figure 2 (B), is also a splitter network. The only difference from the traditional butterfly is that each wire has been split into two, so that one can fail or be busy without affecting the other.
Reference: [Lei85] <author> Charles E. Leiserson. Fat-trees: </author> <title> Universal networks for hardware efficient supercomputing. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-34(10):892-901, </volume> <month> October </month> <year> 1985. </year>
Reference-contexts: Unfortunately, random wiring (as well as the known constructions of good expanders) scales poorly in practice. For example, a 4K-endpoint machine with multiplicity d = 2 has 8K wires in the first stage, almost all of which would be long cables with distinct logical endpoints. For comparison, a fat-tree <ref> [Lei85] </ref> might have a similar number of cables for the root node, but there are few logical endpoints, so huge groups of wires can be routed together.
Reference: [LM89] <author> Tom Leighton and Bruce Maggs. </author> <title> Expanders might be practical: Fast algorithms for routing around faults on multibutterflies. </title> <booktitle> In IEEE 30th Annual Symposium on Foundations of Computer Science, </booktitle> <year> 1989. </year>
Reference-contexts: Recently, numerous results have been discovered that indicate that multibutterflies are ideally suited for message-routing applications. Among other things, multibutterflies can solve any one-to-one packet routing [Upf89], circuit-switching [ALM90], or non-blocking routing problem [ALM90] in optimal time, even if many of the routers in the network are faulty <ref> [LM89] </ref>. Although many other multipath networks [LP83] [CS82] [RK84] [KPR88] [TYZ88] have been proposed, none are known to be as powerful, especially for efficient, on-line message-routing.
Reference: [LM92] <author> Tom Leighton and Bruce Maggs. </author> <title> Fast algorithms for routing around faults in multibutterflies and randomly-wired splitter networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 41(5) </volume> <pages> 1-10, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: In contrast, one fault in a radix-2 butterfly blocks 2 j inputs j levels back. As a consequence, problems with faults and congestion that destroy the performance of traditional networks can be overcome easily in multibutterflies. (For a survey of the research on multibutterflies see [Pip93] <ref> [LM92] </ref>.) (A) (B) 3.1 Wiring Complexity Multibutterflies are generally constructed by randomly wiring redundant connections between equivalence classes of each splitter. Although deterministic constructions are known [WZ93], none are known to produce expansion comparable to random wiring.
Reference: [LP83] <author> Duncan Lawrie and Krishnan Padmanabhan. </author> <title> A class of redundant path multistage interconnection networks. </title> <journal> IEEE Tr. on Computers, </journal> <volume> C-32(12):1099-1108, </volume> <month> December </month> <year> 1983. </year>
Reference-contexts: Among other things, multibutterflies can solve any one-to-one packet routing [Upf89], circuit-switching [ALM90], or non-blocking routing problem [ALM90] in optimal time, even if many of the routers in the network are faulty [LM89]. Although many other multipath networks <ref> [LP83] </ref> [CS82] [RK84] [KPR88] [TYZ88] have been proposed, none are known to be as powerful, especially for efficient, on-line message-routing.
Reference: [Pip93] <author> Nicholas Pippenger. </author> <title> Self-routing superconcentrators. </title> <booktitle> In 25th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 355-361. </pages> <publisher> ACM, </publisher> <month> May </month> <year> 1993. </year>
Reference-contexts: In contrast, one fault in a radix-2 butterfly blocks 2 j inputs j levels back. As a consequence, problems with faults and congestion that destroy the performance of traditional networks can be overcome easily in multibutterflies. (For a survey of the research on multibutterflies see <ref> [Pip93] </ref> [LM92].) (A) (B) 3.1 Wiring Complexity Multibutterflies are generally constructed by randomly wiring redundant connections between equivalence classes of each splitter. Although deterministic constructions are known [WZ93], none are known to produce expansion comparable to random wiring.
Reference: [RK84] <editor> S.M. Reddy and V.P. Kumar. </editor> <title> On fault-tolerant multistage interconnection networks. </title> <booktitle> In Proceedings of the 1984 International Conference on Parallel Processing, </booktitle> <pages> pages 155-165. </pages> <publisher> IEEE, </publisher> <month> August </month> <year> 1984. </year>
Reference-contexts: Among other things, multibutterflies can solve any one-to-one packet routing [Upf89], circuit-switching [ALM90], or non-blocking routing problem [ALM90] in optimal time, even if many of the routers in the network are faulty [LM89]. Although many other multipath networks [LP83] [CS82] <ref> [RK84] </ref> [KPR88] [TYZ88] have been proposed, none are known to be as powerful, especially for efficient, on-line message-routing.
Reference: [TYZ88] <author> N.F. Tzeng, P.C. Yew, and C.Q. Zhu. </author> <title> Realizing fault-tolerant interconnection networks via chaining. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(4) </volume> <pages> 458-462, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: Among other things, multibutterflies can solve any one-to-one packet routing [Upf89], circuit-switching [ALM90], or non-blocking routing problem [ALM90] in optimal time, even if many of the routers in the network are faulty [LM89]. Although many other multipath networks [LP83] [CS82] [RK84] [KPR88] <ref> [TYZ88] </ref> have been proposed, none are known to be as powerful, especially for efficient, on-line message-routing.
Reference: [Upf89] <author> E. Upfal. </author> <title> An O(log N ) deterministic packet routing scheme. </title> <booktitle> In 21st Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 241-250. </pages> <publisher> ACM, </publisher> <month> May </month> <year> 1989. </year>
Reference-contexts: Bassalygo and Pinsker [BP74] first studied splitter networks with expansion. Recently, numerous results have been discovered that indicate that multibutterflies are ideally suited for message-routing applications. Among other things, multibutterflies can solve any one-to-one packet routing <ref> [Upf89] </ref>, circuit-switching [ALM90], or non-blocking routing problem [ALM90] in optimal time, even if many of the routers in the network are faulty [LM89]. Although many other multipath networks [LP83] [CS82] [RK84] [KPR88] [TYZ88] have been proposed, none are known to be as powerful, especially for efficient, on-line message-routing.
Reference: [WZ93] <author> Avi Wigderson and David Zuckerman. </author> <title> Expanders that beat the eigenvalue bound: explicit construction and applications. </title> <booktitle> In 25th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 245-251. </pages> <publisher> ACM, </publisher> <month> May </month> <year> 1993. </year> <month> 11 </month>
Reference-contexts: Although deterministic constructions are known <ref> [WZ93] </ref>, none are known to produce expansion comparable to random wiring. Unfortunately, random wiring (as well as the known constructions of good expanders) scales poorly in practice.
References-found: 21

