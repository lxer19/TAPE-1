URL: http://www.iro.umontreal.ca/~frasson/FrassonPub/Calisce-agents.ps
Refering-URL: http://www.iro.umontreal.ca/~frasson/conf-proceedings.htm
Root-URL: http://www.iro.umontreal.ca
Email: Email: -mengelle, frasson-@iro.umontreal.ca  
Title: A Multi-Agent Architecture for an ITS with Multiple Strategies  
Author: Thierry Mengelle, Claude Frasson 
Address: 2920 Chemin de la Tour, Montral, H3T 1J4, Qubec, Canada  
Affiliation: Universit de Montral, Dpartement d'informatique et de recherche oprationnelle  
Abstract: This research aims to implement an intelligent tutoring system with multiple cooperative strategies involving several pedagogical agents (for instance: tutor, cotutor, companion, ...). Such agents are able to play different pedagogical roles, consequently, we called them actors. We describe a general architecture for actors, and illustrate it in the context of a new strategy : learning by disturbing. A prototype of an environment for building actors has been implemented using an object oriented language; it allows to develop new cooperative pedagogical strategies. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Ameur, E., Frasson, C., Stiharu-Alexe, C.: </author> <title> Towards New Learning Strategies In Intelligent Tutoring Systems, </title> <booktitle> Brazilian Conference of Artificial Intelligence SBIA'95 (1995) 121-130 </booktitle>
Reference-contexts: The resulting systems were generally difficult to control and not always efficient from a pedagogical point of view. Since the mid-eighties, various alternatives to this one to one tutoring strategy have been proposed: learning with a co-learner [5], learning by teaching [10], or, more recently, learning by disturbing <ref> [1] </ref>. All of these new approaches suggest that the computer can simulate various pedagogical agents which can cooperate with the learner in a constructive process. Because the efficiency of these cooperative strategies depends on the learner's characteristics, our objective is to implement an ITS with multiple strategies. <p> Concerning the different kinds of intelligent agents, we define the main properties that are required for these actors. We then describe the architecture of an actor and illustrate it in the context of the learning by disturbing strategy <ref> [1] </ref>. To conclude, we briefly describe a prototype of an authoring environment allowing the implementation of similar cooperative strategies involving several actors. 2. <p> However, as mentioned above, we need a more flexible communication between the learner and the system allowing various interactions between several partners, for instance a companion which simulates the behavior of another learner [3], a cotutor that helps the tutor <ref> [1] </ref>, ... Artificial Learner Troublemaker Co-Tutor Companion SupervisorTutor Learner Model Human Learner Session Manager Non-Didactic Resource Curriculum Fig. 1. <p> In the next section will also distinguish actors from other intelligent agents. To illustrate the different paradigms, we will take the example of the learning by disturbing strategy <ref> [1] </ref>. This strategy aims to strengthen the learner's self-confidence; it involves three partners (Figure 1): the tutor, the troublemaker and the human learner (by way of the artificial learner). The learner works on a specific task and the troublemaker can give him advice.
Reference: 2. <author> Ameur, E., Frasson, C.: </author> <title> Analyzing a new learning strategy according to different knowledge levels, </title> <journal> Computer and Education, </journal> <note> An International Journal (1996), to appear </note>
Reference-contexts: Unlike the companion, the knowledge of the troublemaker is quite superior to that of the real student. A first experiment (learning of highway code) has shown that the learning by disturbing strategy becomes efficient for advanced students <ref> [2] </ref>. Some experiments on the other pedagogical strategies are under way in order to find rules that will allow the session manager to select the best strategy according to learner's characteristics. 3. Intelligent Agents for ITS: Actors 3.1.
Reference: 3. <author> Chan, T.W., </author> <title> Baskin, A.B.: Learning Companion Systems. </title> <editor> In C. Frasson & G. Gauthier (Eds.), </editor> <booktitle> Intelligent Tutoring Systems: At the Crossroads of Artificial Intelligence and Education, Chapter 1, </booktitle> <address> New Jersey, </address> <publisher> Ablex Publishing Corporation (1990) </publisher>
Reference-contexts: However, as mentioned above, we need a more flexible communication between the learner and the system allowing various interactions between several partners, for instance a companion which simulates the behavior of another learner <ref> [3] </ref>, a cotutor that helps the tutor [1], ... Artificial Learner Troublemaker Co-Tutor Companion SupervisorTutor Learner Model Human Learner Session Manager Non-Didactic Resource Curriculum Fig. 1. <p> Each pedagogical strategy involves some specific pedagogical agents. For instance, the one-to-one tutoring strategy involves only two agents: the tutor and the artificial learner. (which is intended to synchronize the human learner's activity with the different agents); the learning with a companion strategy <ref> [3] </ref> calls a third agent: the companion. A same agent can act in several strategies; alone with the learner, the previous companion will play the role of the co-learner as suggested in [5]. <p> of motivation has an impact on the knowledge of these actors: the troublemaker needs pedagogical knowledge to decide when it is suitable to mislead the learner, while for the companion only the domain knowledge is absolutely required (one way of implementing the companion is to use a machine learning approach <ref> [3] </ref>). Unlike the companion, the knowledge of the troublemaker is quite superior to that of the real student. A first experiment (learning of highway code) has shown that the learning by disturbing strategy becomes efficient for advanced students [2].
Reference: 4. <author> Frasson C., Mengelle T., Ameur E., Gouardres G.: </author> <title> An Actor-Based Architecture for Intelligent Tutoring Systems. </title> <booktitle> Third International Conference ITS'96, </booktitle> <address> Montral. Canada, </address> <note> LNCS (1996), to appear. </note>
Reference-contexts: Conceptual architecture of an actor <ref> [4] </ref>. An original point of this architecture is that each actor can observe the previous behavior of the other actors, a record of their actions (and not only the results of actions). <p> The previous scenario presents a typical example of the activity of the actor in the control mode. To see examples of functioning in the reasoning mode (i.e. preemption of a control task by a cognitive task after learning), the reader can refer to <ref> [4] </ref>. 2 TM-TS3 is a typical situation which has been defined for another strategy and allows the tutor to change its question consequently to the request of another actor : the supervisor. 3 In the context of the SAFARI project, the learner model consists of three parts : a cognitive model,
Reference: 5. <author> Gilmore, D., Self, J.: </author> <title> The application of machine learning to intelligent tutoring systems. </title> <editor> In J. Self (Ed.), </editor> <booktitle> Artificial Intelligence and Human Learning, Intelligent computer-assisted instruction, </booktitle> <address> New York: </address> <publisher> Chapman and Hall (1988) 179-196 </publisher>
Reference-contexts: The resulting systems were generally difficult to control and not always efficient from a pedagogical point of view. Since the mid-eighties, various alternatives to this one to one tutoring strategy have been proposed: learning with a co-learner <ref> [5] </ref>, learning by teaching [10], or, more recently, learning by disturbing [1]. All of these new approaches suggest that the computer can simulate various pedagogical agents which can cooperate with the learner in a constructive process. <p> A same agent can act in several strategies; alone with the learner, the previous companion will play the role of the co-learner as suggested in <ref> [5] </ref>. Since the same agent can 1 In the context of the SAFARI project, which supports our work, we consider two kinds of resources : didactic resources that are self-managed (for instance, a CBT module), and nondidactic resources.
Reference: 6. <author> Huffman, S. B., Laird, </author> <title> J.E.: Flexibly Instructable Agents, </title> <journal> Journal of Artificial Intelligence Research , Volume 3 (1995) 271-324 </journal>
Reference-contexts: Because an agent can act in different learning strategies, we need to allow it to evolve, to be adjusted to new learning situations. To ensure this adaptation, the designer can simulate the system and modify the agents' knowledge. This is the main characteristic of instructable agents <ref> [6] </ref>. These can receive instructions or new algorithms. To help the designer, we want to allow agents to dynamically improve their behavior. In particular, like adaptive agents, they have to adapt their perception and their decisions (reasoning methods, control strategy, ...) according to current objectives, available information, and performance criteria.
Reference: 7. <author> Mengelle, T.: </author> <title> Etude d'une architecture d'environnements d'apprentissage bass sur le concept de prceptorat avis. </title> <type> PhD Thesis, </type> <institution> University of Toulouse III (1995) </institution>
Reference-contexts: Evolution of the environment results from the activity of the other actors (the fact that the troublemaker has just given a misleading information or that an answer of the learner becomes available in the common memory). This module consists of a set of typical situations <ref> [7] </ref>. Each typical situation describes a specific condition of activation according to the characteristics of the environment. The action module allow the actor to act on the environment. It consists of a set of action tasks. <p> Fig. 3. Implementation and example of functioning of an actor: the tutor To define a new strategy, our approach promotes reuse. We encourage the designer to take into consideration the existing actors and to implement this new strategy by using a simulation process <ref> [7] </ref>. This process allows him to progressively adjust existing actors to fit the new strategy and to define the new actors. Creating, or adjusting, an actor requires the definition or modification of typical situations and tasks.
Reference: 8. <author> Morignot P., Hayes-Roth, B.: </author> <title> Why does an agent act ? In M.T. </title> <editor> Cox & M. Freed (Eds.), </editor> <booktitle> Proceedings of the AAAI Spring Symposium on Representing Mental States Mechanisms. </booktitle> <address> Menlo Park, </address> <publisher> AAAI (1995) </publisher>
Reference-contexts: In our context, pedagogical agent must show ability to react according to the activity of the other agents. It seems suitable to consider two kinds of reactions: immediate responses to stimuli without reasoning (like in reactive agents), and controlled reactions that require planning, prediction and diagnosis capabilities <ref> [8] </ref>. Because an agent can act in different learning strategies, we need to allow it to evolve, to be adjusted to new learning situations. To ensure this adaptation, the designer can simulate the system and modify the agents' knowledge. This is the main characteristic of instructable agents [6].
Reference: 9. <author> Nkambou, R., Lefebvre, B., Gauthier, G.: </author> <title> A Curriculum-Based Student Model for Intelligent Tutoring System. </title> <booktitle> Fifth International Conference on User Modelling , Kailua-Kona (1996) 91-98 </booktitle>
Reference-contexts: SAFARI project, the learner model consists of three parts : a cognitive model, which represents the domain knowledge of the student with an overlay on the curriculum, an affective model, which stores the habits and preferences of the student, and an inferential part allowing to dynamically update the learner model <ref> [9] </ref>. 5. Description of the Prototype We have used the Smalltalk objectoriented language to implement a prototype of a generator of cooperative pedagogical strategies. Each strategy involves several actors that are described according to the previous architecture.
Reference: 10. <author> Palthepu, S., Greer, J., McCalla, G.: </author> <title> Learning by Teaching. </title> <booktitle> The Proceedings of the International Conference on the Learning Sciences, AACE (1991) </booktitle>
Reference-contexts: The resulting systems were generally difficult to control and not always efficient from a pedagogical point of view. Since the mid-eighties, various alternatives to this one to one tutoring strategy have been proposed: learning with a co-learner [5], learning by teaching <ref> [10] </ref>, or, more recently, learning by disturbing [1]. All of these new approaches suggest that the computer can simulate various pedagogical agents which can cooperate with the learner in a constructive process.
References-found: 10

