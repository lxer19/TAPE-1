URL: http://www.cs.cmu.edu/afs/cs/user/mmv/www/papers/gsat-epia97.ps.gz
Refering-URL: http://www.cs.cmu.edu/~mmv/produce-bib.html
Root-URL: 
Title: GenSAT: A Navigational Approach  
Keyword: Content areas: constraint programming, agent-oriented programming.  
Abstract: GenSAT is a family of local hill-climbing procedures for solving propositional sat-isfiability problems. We restate it as a navigational search process performed on an N -dimensional cube by a fictitious agent with limited lookahead. Several members of the GenSAT family have been introduced whose efficiency varies from the best in average for randomly generated problems to a complete failure on the realistic, specially constrained problems, hence raising the interesting question of understanding the essence of their different performance. In this paper, we show how we use our navigational approach to investigate this issue. We introduce new algorithms that sharply focus on specific combinations of properties of efficient GenSAT variants, and which help to identify the relevance of the algorithm features to the efficiency of local search. In particular, we argue for the reasons of higher effectiveness of HSAT compared to the original GSAT. We also derive fast approximating procedures based on variable weights that can provide good switching points for a mixed search policy. Our conclusions are validated by empirical evidence obtained from the application of several GenSAT variants to random 3SAT problem instances and to simple navigational problems. Statement: This paper has not been submitted to other conferences neither verbatim nor in essence.
Abstract-found: 1
Intro-found: 1
Reference: <author> Crawford, J.; and Auton, L. </author> <year> 1993. </year> <title> Experimental results on the crossover point in sat-isfiability problems. </title> <booktitle> In Proceedings of 11th National Conference on Artificial Intelligence (AAAI), </booktitle> <pages> 21-27. </pages>
Reference: <author> Frank, J. </author> <year> 1996. </year> <title> Weighting for Godot: Learning Heuristics for GSAT. </title> <booktitle> In Proceedings of 13th National Conference on Artificial Intelligence (AAAI), </booktitle> <pages> 338-343. </pages>
Reference-contexts: 1 Introduction Recently an alphabetical mix of variants of GSAT (Gu 1992; Selman et al. 1992) has attracted a lot of attention from Artificial Intelligence (AI) researchers: TSAT, CSAT, DSAT, HSAT (Gent & Walsh 1993; 1995), WSAT (Selman et al. 1994), WGSAT, UGSAT <ref> (Frank 1996) </ref> just to name few. All these local hill-climbing procedures are members of the GenSAT family. Propositional satisfiability (SAT) is the fundamental problem of the class of NP-hard problems, which is believed not to admit solutions that are always polynomial on the size of the problems. <p> Thus, the question of the efficiency of GSAT and similar procedures is reduced to the domain-heuristics relations that guide agent-centered search on an N -dimensional cube. Recent works on changing the usual static heuristic thenumber of unsatisfied (satisfied) clauses to the dynamic weighted sums <ref> (Frank 1996) </ref> produced another promising sub-family of GenSAT procedures. Our experiments showed that the "quality" of the usual heuristic varies greatly in different regions of the N -dimensional cube, and as the ratio of L to N grows, this heuristic becomes misleading in some regions of the problem's domain. <p> NavGSAT can be also applied to problems with dynamically changing domains, when the domain changes can influence the decision making process. Finally, approximate solution provide an excellent starting point for a different search policy. For example, WGSAT and UGSAT <ref> (Frank 1996) </ref> utilized a 8 promising idea of the instant heuristic update based on the weight of unsatisfied clauses. An approximate solution provided by HSAT or NavGSAT constitutes an excellent starting point for WGSAT, UGSAT or another effective search procedure of a satisfiable solution, for example, *-search (with heuristic updates).
Reference: <author> Gent, I.; and Walsh, T. </author> <year> 1993. </year> <title> Towards an understanding of hill-climbing procedures for SAT. </title> <booktitle> In Proceedings of 11th National Conference on Artificial Intelligence (AAAI), </booktitle> <pages> 28-33. </pages>
Reference-contexts: GSAT (Gu 1992; Selman et al. 1992) is an instance of GenSAT in which initial (see Table 1) generates a random truth assignment, hill-climb returns all those variables whose flips 1 give the greatest increase in the number of satisfied clauses and pick chooses one of these variables at random <ref> (Gent & Walsh 1993) </ref>. <p> Flips if T satisfies then return T else poss-flips := hill-climb (; T ) ; compute best local neighbors of T V := pick (poss-flips) ; pick a variable T := T with V's truth assignment inverted end return "no satisfying assignment found" Table 1: The GenSAT Procedure. hill-climbing procedures <ref> (Gent & Walsh 1993) </ref> identified two distinct search phases and suggested possible improvements for GenSAT variants. HSAT is a specific variant of GenSAT, which uses a queue to control the selection of variables to flip 2 . <p> Thus, *-search is a navigational analogue of HSAT for soluble problem instances. Previous research identified two phases of GenSAT procedures: steady hill-climbing and plateau phases <ref> (Gent & Walsh 1993) </ref>. During the plateau phase these procedures perform series of sideway flips keeping the number of satisfied clauses on the same level. <p> This increased our interest in studying further reasons for the performance advantage of HSAT over GSAT. We focused our attention on poss-flips thenumber of equally good flips between which GSAT randomly picks <ref> (Gent & Walsh 1993) </ref>, or, alternatively, the branching factor of GSAT search during the plateau phase. We noticed that on earlier stages of the plateau phase both GSAT and NRGSAT tend to increase poss-flips, whereas HSAT randomly oscillates poss-flips around a certain (lower) level. <p> In the second part of the plateau phase the number of poss-flips for HSAT or NavRGSAT approaches the number of poss-flips for GSAT. Lower graph represents second-order ties for NavRGSAT that form a subset of poss-flips. Our experiments confirmed the result obtained in <ref> (Gent & Walsh 1993) </ref> that the whole picture scales up linearly in the number of variables and the number of poss-flips. The plateau phase begins after about 0:2N 0:25N steps.
Reference: <author> Gent, I.; and Walsh, T. </author> <year> 1993. </year> <title> An empirical analysis of search in GSAT. </title> <journal> Journal of Artificial Intelligence Research, 1993, </journal> <volume> 1, </volume> <pages> 47-59. </pages>
Reference-contexts: GSAT (Gu 1992; Selman et al. 1992) is an instance of GenSAT in which initial (see Table 1) generates a random truth assignment, hill-climb returns all those variables whose flips 1 give the greatest increase in the number of satisfied clauses and pick chooses one of these variables at random <ref> (Gent & Walsh 1993) </ref>. <p> Flips if T satisfies then return T else poss-flips := hill-climb (; T ) ; compute best local neighbors of T V := pick (poss-flips) ; pick a variable T := T with V's truth assignment inverted end return "no satisfying assignment found" Table 1: The GenSAT Procedure. hill-climbing procedures <ref> (Gent & Walsh 1993) </ref> identified two distinct search phases and suggested possible improvements for GenSAT variants. HSAT is a specific variant of GenSAT, which uses a queue to control the selection of variables to flip 2 . <p> Thus, *-search is a navigational analogue of HSAT for soluble problem instances. Previous research identified two phases of GenSAT procedures: steady hill-climbing and plateau phases <ref> (Gent & Walsh 1993) </ref>. During the plateau phase these procedures perform series of sideway flips keeping the number of satisfied clauses on the same level. <p> This increased our interest in studying further reasons for the performance advantage of HSAT over GSAT. We focused our attention on poss-flips thenumber of equally good flips between which GSAT randomly picks <ref> (Gent & Walsh 1993) </ref>, or, alternatively, the branching factor of GSAT search during the plateau phase. We noticed that on earlier stages of the plateau phase both GSAT and NRGSAT tend to increase poss-flips, whereas HSAT randomly oscillates poss-flips around a certain (lower) level. <p> In the second part of the plateau phase the number of poss-flips for HSAT or NavRGSAT approaches the number of poss-flips for GSAT. Lower graph represents second-order ties for NavRGSAT that form a subset of poss-flips. Our experiments confirmed the result obtained in <ref> (Gent & Walsh 1993) </ref> that the whole picture scales up linearly in the number of variables and the number of poss-flips. The plateau phase begins after about 0:2N 0:25N steps.
Reference: <author> Gent, I.; and Walsh, T. </author> <year> 1995. </year> <title> Unsatisfied variables in local search. </title> <editor> In J. Hallam, </editor> <title> editor,Hybrid Problems, Hybrid Solutions. </title> <publisher> IOS press, </publisher> <year> 1995. </year>
Reference-contexts: This property of HSAT has been stated as the reason of its performance advantage for randomly generated problems in comparison with GSAT <ref> (Gent & Walsh 1995) </ref>. To re-evaluate the importance of visiting new corners of the N -dimensional cube, we introduced another hill-climbing procedure, that differs from GSAT only in keeping track of all visited vertices and Never Re-visiting them again, NRGSAT. <p> For randomly generated 3SAT problems HSAT proved to be one of the most efficient hill-climbing procedures. There has been reports on HSAT's failures in solving non-random propositional satisfiability problems <ref> (Gent & Walsh 1995) </ref>. We view the non-flexibility of 7 HSAT's queue heuristic as a possible obstacle in solving over-constrained problems.
Reference: <author> Gu, J. </author> <year> 1992. </year> <title> Efficient local search for very large-scale satisfiability problems. </title> <journal> SIGART Bulletin 3(1) </journal> <pages> 8-12. </pages>
Reference: <author> Ishida, T.; and Shimbo, M. </author> <year> 1996. </year> <title> Improving the learning efficiencies of realtime search.. </title> <booktitle> In Proceedings of 13th National Conference on Artificial Intelligence (AAAI), </booktitle> <pages> 338-343. </pages>
Reference-contexts: In general, this heuristic is neither consistent, nor admissible. However, for the most intricate random instances of SAT problems with L = O (N ), this heuristic is an O (N ) approximation of the real distance. Therefore, *-search <ref> (Ishida & Shimbo 1996) </ref>, a modification of LRTA* that uses approximations of admissible heuristics, applies to SAT problems. 3 procedure LRTA*(V; E) Initially, F (v) := h (v) for all v 2 V . LRTA* starts at vertex v start : 1. v := the current vertex. 2. <p> Proof: After repeated problem-solving trials the length of a solution of *-search converges to the length of the optimal path multiplied by (1+*) <ref> (Ishida & Shimbo 1996) </ref>. On one hand, the length of the optimal path for a soluble propositional satisfiability problem is O (N ). On the other hand, for problems with L = O (N ) approximating factor * is also O (N ).
Reference: <author> Koenig, S., and Smirnov, Y. </author> <year> 1996. </year> <title> Graph learning with a nearest neighbor approach. </title> <booktitle> In Proceedings of the Conference on Computational Learning Theory (COLT), </booktitle> <pages> 19-28. </pages>
Reference-contexts: Furthermore, even a consistent, admissible heuristic can become misleading, and an efficient informed agent-centered search algorithm can demonstrate worse performance than the uninformed (zero heuristic) version of the same algorithm <ref> (Koenig & Smirnov 1996) </ref>. From the algorithmic point of view, the behavior of LRTA* (Korf 1990), one of the most efficient agent-centered search methods, is close to NavGSAT's behavior. Both methods look for the most promising vertex among neighbors of the current vertex.
Reference: <author> Korf, R. </author> <year> 1990. </year> <title> Real-time heuristic search. </title> <journal> Artificial Intelligence 42(2-3):189-211. </journal>
Reference-contexts: Furthermore, even a consistent, admissible heuristic can become misleading, and an efficient informed agent-centered search algorithm can demonstrate worse performance than the uninformed (zero heuristic) version of the same algorithm (Koenig & Smirnov 1996). From the algorithmic point of view, the behavior of LRTA* <ref> (Korf 1990) </ref>, one of the most efficient agent-centered search methods, is close to NavGSAT's behavior. Both methods look for the most promising vertex among neighbors of the current vertex.
Reference: <author> Mitchell, D.; Selman, B.; and Levesque, H. </author> <year> 1992. </year> <title> Hard and easy distributions of SAT problems. </title> <booktitle> In Proceedings of 10th National Conference on Artificial Intelligence (AAAI), </booktitle> <pages> 459-465. </pages>
Reference: <author> Selman, B.; Levesque, H.; and Mitchell, D. </author> <year> 1992. </year> <title> A new method for solving hard sat-isfiability problems. </title> <booktitle> In Proceedings of 10th National Conference on Artificial Intelligence (AAAI), </booktitle> <pages> 440-446. </pages>
Reference: <author> Selman, B.; Kautz, H.; and Cohen, B. </author> <year> 1994. </year> <title> Noise strategies for improving local search. </title> <booktitle> In Proceedings of 12th National Conference on Artificial Intelligence (AAAI), </booktitle> <pages> 337-343. </pages>
Reference-contexts: 1 Introduction Recently an alphabetical mix of variants of GSAT (Gu 1992; Selman et al. 1992) has attracted a lot of attention from Artificial Intelligence (AI) researchers: TSAT, CSAT, DSAT, HSAT (Gent & Walsh 1993; 1995), WSAT <ref> (Selman et al. 1994) </ref>, WGSAT, UGSAT (Frank 1996) just to name few. All these local hill-climbing procedures are members of the GenSAT family.
Reference: <author> Smirnov, Y.; Koenig, S.; Veloso, M.; and Simmons, R. </author> <year> 1996. </year> <title> Efficient goal-directed exploration. </title> <booktitle> In Proceedings of 13th National Conference on Artificial Intelligence (AAAI), </booktitle> <pages> 292-297. </pages>
Reference-contexts: O (2 N ). Moreover, unlike classical AI search where A* is an optimal informed algorithm for an arbitrary admissible heuristic, there are no optimal algorithms for agent-centered search problems <ref> (Smirnov et al. 1996) </ref>. Furthermore, even a consistent, admissible heuristic can become misleading, and an efficient informed agent-centered search algorithm can demonstrate worse performance than the uninformed (zero heuristic) version of the same algorithm (Koenig & Smirnov 1996). <p> Furthermore, even a consistent, admissible heuristic can become misleading, and an efficient informed agent-centered search algorithm can demonstrate worse performance than the uninformed (zero heuristic) version of the same algorithm <ref> (Koenig & Smirnov 1996) </ref>. From the algorithmic point of view, the behavior of LRTA* (Korf 1990), one of the most efficient agent-centered search methods, is close to NavGSAT's behavior. Both methods look for the most promising vertex among neighbors of the current vertex. <p> In addition to selecting a neighbor with the best heuristic value, LRTA* also updates the heuristic value of the current vertex (see Table 2). The efficiency of LRTA* depends on how closely the heuristic function represents the real distance <ref> (Smirnov et al. 1996) </ref>. The vast majority of GSAT-like procedures use the number of unsatisfied (or satisfied) clauses as the guiding heuristic. In general, this heuristic is neither consistent, nor admissible.
References-found: 13

