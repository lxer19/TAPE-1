URL: http://www.cs.berkeley.edu/~alanm/CP/khalidi.tr-94-28.94.ps
Refering-URL: http://www.cs.berkeley.edu/~alanm/CP/bib.html
Root-URL: 
Email: yousef.khalidi@eng.sun.com vikram.joshi@eng.sun.com dock.williams@eng.sun.com  
Title: A Study of the Structure and Performance of MMU Handling Software  
Author: Yousef A. Khalidi Vikram P. Joshi Dock Williams 
Address: M/S 29-01 2550 Garcia Avenue Mountain View, CA 94043  
Note: email addresses:  
Date: June 1994  
Pubnum: SMLI TR-94-28  
Abstract: Modern operating systems provide a rich set of interfaces for mapping, sharing, and protecting memory. Different memory management unit (MMU) architectures provide different mechanisms for managing memory translations. Since the same OS usually runs on different MMU architectures, a software hardware address translation (hat) layer that abstracts the MMU architecture is normally implemented between MMU hardware and the virtual memory system of the OS. In this paper, we study the impact of the OS and the MMU on the structure and performance of the hat layer. In particular, we concentrate on the role of the hat layer on the scalability of system performance on symmetric multiprocessors with 2-12 CPUs. The results show that, unlike single-user applications, multi-user applications require very careful multi-threading of the hat layer to achieve system performance that scales with the number of CPUs. In addition, multi-threading the hat can result in better performance in lesser amounts of physical memory. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abrosimov, Vadim, Marc Rozier, and Marc Shapiro. </author> <title> Generic Memory Management for Operating System Kernels. </title> <booktitle> Proceedings of the 12th Symposium on Operating Systems Principles (SOSP '89) (1989): </booktitle> <pages> 123136. </pages>
Reference-contexts: 1 Introduction Modern operating systems, such as Chorus <ref> [1] </ref>, MACH [9], NT TM [4], Solaris /UNIX SVR4 [5], and Spring [7] provide a rich set of interfaces for mapping, sharing, and protecting memory. <p> Minor faults occur when the required page is in memory, but the page table does not contain the required translation to the page. Copy-on-write faults are also included in this category. pendent portions of the system. The literature describes several implementations of machine-dependent MMU hat layers 2 <ref> [1, 4, 5, 10] </ref>. Although hat implementations normally do support multiprocessor systems, to our knowledge there is no published material that describes the performance aspects of the hat layer and the scalability of the implementations on multiprocessor systems.
Reference: [2] <author> Blanck, G. and S. Krueger. </author> <title> The Super-SPARC Microprocessor. </title> <booktitle> COMPCON (Febru-ary 1992): </booktitle> <pages> 136141. </pages>
Reference-contexts: For example, some MMUs such as the one used in Super-SPARC TM <ref> [2] </ref> require a page table per address space organized as a three-level tree. The MMU descriptor in Figure 2 would in this case contain a pointer to such a three-level table.
Reference: [3] <author> Cheriton, D., A. Gupta, P. Boyle, and H. Goosen. </author> <title> The VMP Multiprocessor: Initial Experience, Refinements and Performance Evaluation. </title> <booktitle> Proceedings of the 15th International Symposium on Computer Architectures (May 1988). </booktitle>
Reference-contexts: Other related material includes a large body of literature on MMU hardware structures (see [6] for a good survey), and software page table issues (e.g., <ref> [3, 8] </ref>). In general, previous work concentrated on the structure of the MMU as it affects performance on uniprocessor systems.
Reference: [4] <author> Custer, Helen. </author> <title> Inside Windows NT. </title> <publisher> Microsoft Press. </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction Modern operating systems, such as Chorus [1], MACH [9], NT TM <ref> [4] </ref>, Solaris /UNIX SVR4 [5], and Spring [7] provide a rich set of interfaces for mapping, sharing, and protecting memory. Typically, these systems allow portions of files (or more generally, memory objects) to be mapped simultaneously in different address spaces at different virtual addresses, with perhaps different protection attributes. <p> Minor faults occur when the required page is in memory, but the page table does not contain the required translation to the page. Copy-on-write faults are also included in this category. pendent portions of the system. The literature describes several implementations of machine-dependent MMU hat layers 2 <ref> [1, 4, 5, 10] </ref>. Although hat implementations normally do support multiprocessor systems, to our knowledge there is no published material that describes the performance aspects of the hat layer and the scalability of the implementations on multiprocessor systems.
Reference: [5] <author> Gingell, Robert A., Joseph P. Moran, and William A. Shannon. </author> <title> Virtual Memory Architecture in SunOS. </title> <booktitle> Proceedings of 1987 Summer USENIX Conference (June 1987). </booktitle>
Reference-contexts: 1 Introduction Modern operating systems, such as Chorus [1], MACH [9], NT TM [4], Solaris /UNIX SVR4 <ref> [5] </ref>, and Spring [7] provide a rich set of interfaces for mapping, sharing, and protecting memory. Typically, these systems allow portions of files (or more generally, memory objects) to be mapped simultaneously in different address spaces at different virtual addresses, with perhaps different protection attributes. <p> Minor faults occur when the required page is in memory, but the page table does not contain the required translation to the page. Copy-on-write faults are also included in this category. pendent portions of the system. The literature describes several implementations of machine-dependent MMU hat layers 2 <ref> [1, 4, 5, 10] </ref>. Although hat implementations normally do support multiprocessor systems, to our knowledge there is no published material that describes the performance aspects of the hat layer and the scalability of the implementations on multiprocessor systems.
Reference: [6] <author> Huck, Jerry and Jim Hays. </author> <title> Architectural Support for Translation Table Management in Large Address Space Machines. </title> <booktitle> Proceedings of the 20th International Symposium on Computer Architectures (May 1993). </booktitle>
Reference-contexts: Although hat implementations normally do support multiprocessor systems, to our knowledge there is no published material that describes the performance aspects of the hat layer and the scalability of the implementations on multiprocessor systems. Other related material includes a large body of literature on MMU hardware structures (see <ref> [6] </ref> for a good survey), and software page table issues (e.g., [3, 8]). In general, previous work concentrated on the structure of the MMU as it affects performance on uniprocessor systems. With the notable exception of [6], previous works did not consider multi-user benchmarks to any great extent. 3 Requirements The <p> Other related material includes a large body of literature on MMU hardware structures (see <ref> [6] </ref> for a good survey), and software page table issues (e.g., [3, 8]). In general, previous work concentrated on the structure of the MMU as it affects performance on uniprocessor systems. With the notable exception of [6], previous works did not consider multi-user benchmarks to any great extent. 3 Requirements The structure and the interface of the hat layer are dictated by a number of requirements.
Reference: [7] <author> Khalidi, Yousef A. and Michael N. </author> <note> Nelson. </note>
Reference-contexts: 1 Introduction Modern operating systems, such as Chorus [1], MACH [9], NT TM [4], Solaris /UNIX SVR4 [5], and Spring <ref> [7] </ref> provide a rich set of interfaces for mapping, sharing, and protecting memory. Typically, these systems allow portions of files (or more generally, memory objects) to be mapped simultaneously in different address spaces at different virtual addresses, with perhaps different protection attributes.
References-found: 7

