URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/modck/pub/www/cv/CHARME95.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/modck/pub/www/cv/papers.html
Root-URL: 
Title: Semantics of a Verification-Oriented Subset of VHDL  
Author: David Deharbe and Dominique Borrione 
Address: BP 53 F-38041 Grenoble Cedex 9, France  
Affiliation: ARTEMIS-IMAG  
Abstract: This paper gives operational semantics for a subset of VHDL in terms of abstract machines. Restrictions to the VHDL source code are the finiteness of data types, and the absence of quantitative timing informations. The abstract machine of a design unit is built by composition of the abstract machines for its embedded processes and blocks. The kernel process in our model is distributed among the composed machines. One transition of the final abstract machine models a VHDL delta cycle. This model can be used for symbolic model checking and equivalence verification.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> C. Bayol, B. Soulas, F. Corno, P. Prinetto, and D. Borrione. </author> <title> A process algebra interpretation of a verification oriented overlanguage of VHDL. </title> <booktitle> In Euro-DAC with Euro-VHDL'94, </booktitle> <pages> pages 506-511, </pages> <address> Grenoble, France, </address> <month> Sep. </month> <year> 1994. </year> <title> ACM/IEEE, </title> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: 1 Introduction Giving a formal definition of the semantics of VHDL [7] is of highest importance for synthesis and formal verification. Many different approaches have been proposed to fulfill this need, see eg <ref> [1, 3, 4, 5, 8, 9, 10, 11] </ref>. A first conclusion can be drawn from a study of these works: one has to trade off the number of VHDL features modeled, and the practical usefulness of the semantics.
Reference: 2. <author> W. Damm, B. Josko, and R. </author> <title> Schl or. Specification and Validation methods for Programming Languages and Systems, </title> <booktitle> chapter Specification and Verification of VHDL-based System-Level Hardware Designs, </booktitle> <pages> pages 331-410. </pages> <publisher> Oxford University Press, </publisher> <year> 1995. </year> <editor> E. Borger, </editor> <publisher> editor. </publisher>
Reference-contexts: By means of symbolic simulation techniques, a single execution of the generated abstract machines represents all possible executions of the corresponding VHDL script. The research efforts that are closest to our work are the semantics presented by Damm et al. <ref> [2] </ref>, that serve as a formal basis to feed VHDL designs to a model checker. Our approach mainly differs in the fact that a state in our model represents a point in the simulation where the current statement of all processes is a wait statement, whereas in [2] a state represents <p> Damm et al. <ref> [2] </ref>, that serve as a formal basis to feed VHDL designs to a model checker. Our approach mainly differs in the fact that a state in our model represents a point in the simulation where the current statement of all processes is a wait statement, whereas in [2] a state represents a point where the current statement of each process is any statement. Using programming terminology, a program counter in our case goes from a wait statement to the next wait statement, whereas in [2] it goes from a sequential statement to the next sequential statement. <p> where the current statement of all processes is a wait statement, whereas in <ref> [2] </ref> a state represents a point where the current statement of each process is any statement. Using programming terminology, a program counter in our case goes from a wait statement to the next wait statement, whereas in [2] it goes from a sequential statement to the next sequential statement. Thus, the main advantage of our approach is that a single transition represents a whole simulation cycle, which is not the case in [2], where several transitions are needed. <p> in our case goes from a wait statement to the next wait statement, whereas in <ref> [2] </ref> it goes from a sequential statement to the next sequential statement. Thus, the main advantage of our approach is that a single transition represents a whole simulation cycle, which is not the case in [2], where several transitions are needed. Overview of the Article : Section 2 presents the target model towards which we shall map VHDL design entities. Section 3 gives the general principles that drive the different aspects of the semantics: the elaboration of models and their composition.
Reference: 3. <author> K. Davis. </author> <title> A Denotational Definition of the VHDL Simulation Kernel. </title> <booktitle> In 11 th International Symposium on Computer Hardware Description Languages and their Applications, </booktitle> <pages> pages 509-521, </pages> <address> Ottawa, Canada, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction Giving a formal definition of the semantics of VHDL [7] is of highest importance for synthesis and formal verification. Many different approaches have been proposed to fulfill this need, see eg <ref> [1, 3, 4, 5, 8, 9, 10, 11] </ref>. A first conclusion can be drawn from a study of these works: one has to trade off the number of VHDL features modeled, and the practical usefulness of the semantics.
Reference: 4. <author> A. Debreil and D. Jaillet. </author> <title> Synchronous description in VHDL for formal proof and resulting guidelines proposed by BULL. </title> <type> Advanced report, </type> <institution> BULL Pro-duits Systemes Departement Developpement Assiste, </institution> <address> rue Jean Jaures-B.P. 68-Les Clayes-sous-Bois-France, </address> <month> July </month> <year> 1992. </year> <note> BULL/92.0001 rev.A. </note>
Reference-contexts: 1 Introduction Giving a formal definition of the semantics of VHDL [7] is of highest importance for synthesis and formal verification. Many different approaches have been proposed to fulfill this need, see eg <ref> [1, 3, 4, 5, 8, 9, 10, 11] </ref>. A first conclusion can be drawn from a study of these works: one has to trade off the number of VHDL features modeled, and the practical usefulness of the semantics. <p> We have the intuition that a previous finite state machine model <ref> [4] </ref> which assumed strict restrictions on signals assigned under the condition of a clock pulse could be derived as a special case of the abstract machine model presented here.
Reference: 5. <editor> C. Delgado Kloos and P. Breuer, editors. </editor> <title> Formal Semantics for VHDL, </title> <booktitle> volume 307 of Series in Engineering and Computer Science. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Giving a formal definition of the semantics of VHDL [7] is of highest importance for synthesis and formal verification. Many different approaches have been proposed to fulfill this need, see eg <ref> [1, 3, 4, 5, 8, 9, 10, 11] </ref>. A first conclusion can be drawn from a study of these works: one has to trade off the number of VHDL features modeled, and the practical usefulness of the semantics.
Reference: 6. <author> R. Herrmann and H. Pargmann. </author> <title> Computing binary decision diagrams for VHDL data types. </title> <booktitle> In Euro-DAC with Euro-VHDL '94, </booktitle> <address> Grenoble, France, </address> <month> Sep. </month> <year> 1994. </year>
Reference-contexts: Result decision diagrams. 4.6 Generation of the Abstract Machine In order to elaborate the abstract machine, we suppose the existence of a mor-phism (see e.g. <ref> [6] </ref>), from the VHDL value domains to the value domains of the abstract machine. To simplify this presentation, we use on type names as well as on expressions. In the following, types, operators and objects of VHDL are written using the typewriter style.
Reference: 7. <author> IEEE. </author> <title> IEEE Standard VHDL Language Reference Manual, </title> <booktitle> 1993. </booktitle> <address> Std 1076-1993. </address>
Reference-contexts: 1 Introduction Giving a formal definition of the semantics of VHDL <ref> [7] </ref> is of highest importance for synthesis and formal verification. Many different approaches have been proposed to fulfill this need, see eg [1, 3, 4, 5, 8, 9, 10, 11].
Reference: 8. <author> B. Levy, I. Filippenko, L. Markus, and T. Menas. </author> <title> Using the State Delta Verification System for Hardware Description. </title> <editor> In V. Stravidou, T. Melham, and R. Boute, editors, </editor> <booktitle> Theorem Provers in Circuit Design, </booktitle> <pages> pages 337-360, </pages> <address> Nijmegen, Netherlands, June 1992. </address> <publisher> IFIP A-10, North Holland. </publisher>
Reference-contexts: 1 Introduction Giving a formal definition of the semantics of VHDL [7] is of highest importance for synthesis and formal verification. Many different approaches have been proposed to fulfill this need, see eg <ref> [1, 3, 4, 5, 8, 9, 10, 11] </ref>. A first conclusion can be drawn from a study of these works: one has to trade off the number of VHDL features modeled, and the practical usefulness of the semantics.
Reference: 9. <author> S. Olcoz and J. Colon. </author> <title> A Petri net approach for the analysis of VHDL descriptions. </title> <editor> In G. Milne and L. Pierre, editors, </editor> <title> Correct Hardware Design and Verification Methods, </title> <booktitle> volume 683 of Lecture Notes in Computer Science, </booktitle> <pages> pages 15-26, </pages> <address> Arles, France, </address> <month> May </month> <year> 1993. </year> <booktitle> ESPRIT WG 6018 and IFIP WG 10.2, </booktitle> <publisher> Springer Verlag. </publisher>
Reference-contexts: 1 Introduction Giving a formal definition of the semantics of VHDL [7] is of highest importance for synthesis and formal verification. Many different approaches have been proposed to fulfill this need, see eg <ref> [1, 3, 4, 5, 8, 9, 10, 11] </ref>. A first conclusion can be drawn from a study of these works: one has to trade off the number of VHDL features modeled, and the practical usefulness of the semantics.
Reference: 10. <author> A. Salem and D. Borrione. </author> <title> VHDL for simulation, synthesis, and formal proofs of hardware, chapter Formal semantics for VHDL timing constructs. </title> <booktitle> Kluwer international series in engineering and computer science. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <year> 1992. </year> <note> J. Mermet editor. </note>
Reference-contexts: 1 Introduction Giving a formal definition of the semantics of VHDL [7] is of highest importance for synthesis and formal verification. Many different approaches have been proposed to fulfill this need, see eg <ref> [1, 3, 4, 5, 8, 9, 10, 11] </ref>. A first conclusion can be drawn from a study of these works: one has to trade off the number of VHDL features modeled, and the practical usefulness of the semantics.
Reference: 11. <author> J. Van Tassel. </author> <title> A formalisation of the VHDL simulation cycle. </title> <type> Technical Report 249, </type> <institution> University of Cambridge, </institution> <address> Cambridge, </address> <month> March </month> <year> 1992. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: 1 Introduction Giving a formal definition of the semantics of VHDL [7] is of highest importance for synthesis and formal verification. Many different approaches have been proposed to fulfill this need, see eg <ref> [1, 3, 4, 5, 8, 9, 10, 11] </ref>. A first conclusion can be drawn from a study of these works: one has to trade off the number of VHDL features modeled, and the practical usefulness of the semantics.
References-found: 11

