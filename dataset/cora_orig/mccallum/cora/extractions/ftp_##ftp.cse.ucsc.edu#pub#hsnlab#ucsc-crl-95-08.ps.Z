URL: ftp://ftp.cse.ucsc.edu/pub/hsnlab/ucsc-crl-95-08.ps.Z
Refering-URL: http://www.cse.ucsc.edu/research/ccrg/projects/internet.html
Root-URL: http://www.cse.ucsc.edu
Title: Degree-Constrained Multicasting in Point-to-Point Networks  
Author: Fred Bauer Anujan Varma 
Keyword: Degree-constrained multicasting, Steiner problem in networks, multicast switch design, ATM multicast.  
Note: This research is supported by the Advanced Research Projects Agency (ARPA) under Contract  
Address: Santa Cruz, CA 95064  
Affiliation: Computer Engineering Department University of California  
Pubnum: UCSC-CRL-95-08  
Email: E-mail: ffred,varmag@cse.ucsc.edu  
Date: February 17, 1995  
Abstract: Establishing a multicast tree in a point-to-point network of switch nodes, such as a wide-area ATM network, is often modeled as the NP-complete Steiner problem in networks. In this paper, we study algorithms for finding efficient multicast trees in the presence of constraints on the copying ability of the individual switch nodes in the network. We refer to this problem as the degree-constrained multicast tree problem and model it as the degree-constrained Steiner problem in networks. Steiner heuristics for the degree-constrained case are proposed and their simulation results for sparse, point-to-point networks are presented. The results are compared with respect to their quality of solution, cost (running time), and the number of test cases for which no solution could be found. The results of our research indicate that efficient multicast trees can be found in large, sparse networks with small multicast groups even with limited multicast capability in the individual switches. Some of the Steiner heuristics tested yielded degree-constrained multicast trees within 5% of the best heuristic solution found in most of the cases. Even when the fanout of each switch node was restricted to 2, the heuristics we used were able to generate efficient multicast trees in almost all our test networks. Surprisingly few test networks were unsolvable. In those cases where no solution was found by a heuristic, backtracking solved many of the remaining cases. Among the heuristics we used, degree-constrained versions of simple path-distance heuristics such as SPH and SPH-R provided the best tradeoffs between quality of solution and cost. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Ammar, S. Cheung, and C. Scoglio. </author> <title> "Routing multipoint connections using virtual paths in an ATM network," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> San Francisco, CA, </address> <month> Apr. </month> <year> 1993, </year> <pages> pp. 98-105. </pages>
Reference-contexts: A tree, in contrast, has only one Steiner tree and it may not be degree-constrained. While other constraints such as jitter, delay, and link capacity are important in constructing multicast tress, we focus specifically on the problem of degree-constraints. Papers such as <ref> [1, 14, 17] </ref> typify published approaches to multicasting with constraints other than the degree of individual nodes. <p> Papers such as [1, 14, 17] typify published approaches to multicasting with constraints other than the degree of individual nodes. For example, Ammar et al. address the multicast tree problem as a flow problem, allowing for asymmetric capacities between source and destinations <ref> [1] </ref>; Jiang includes link capacity constraints in his Steiner heuristics [14]; and Kompella et al. include delay constraints in their Steiner heuristics [17]. The remainder of this paper is organized as follows. Section 2 describes the evaluated heuristics. Section 3 discusses the simulation methodology.
Reference: [2] <author> Y.P. Aneja. </author> <title> "An integer linear programming approach to the Steiner problem in graphs," </title> <journal> Networks, </journal> <volume> vol. 10, </volume> <pages> pp. 167-178, </pages> <year> 1980. </year>
Reference-contexts: results on the asymptotic time-complexities of these algorithms, together with the known upper bounds on the ratio of the quality of solution produced to that of an optimal solution. 3 SPH-Z [19] A29 [26] SPH-R (Section 2.2.2) SPH [19] Naive (Section 2.1.1) PDH Local Steinalization [6] Contraction [27] Set Cover <ref> [2] </ref> Dual Ascent [28] 2.1 Unconstrained Steiner Tree Heuristics Many Steiner heuristics have been proposed in the literature [12, 19, 26, 27] and form a suitable basis for DCSP-specific heuristics. In this section, we first examine the heuristics for the unconstrained Steiner problem listed in Table 1. <p> Each set of three components is connected through an optimal node determined as above. If, at the end, only two components remain, they are connected using the shortest path between them. 8 2.1.8 Set Cover Heuristic Aneja <ref> [2] </ref> describes an integer linear programming approach to the SPN by posing the SPN as the set cover problem.
Reference: [3] <author> J. Beasley. </author> <title> "An SST-based algorithm for the Steiner problem in graphs," </title> <journal> Networks, </journal> <volume> vol. 19, </volume> <pages> pp. 1-16, </pages> <year> 1989. </year>
Reference-contexts: Transmitting common copies of data over a multicast tree is the preferable method. However, determining the optimal multi-cast tree for a graph, in general, is a difficult problem. Previous authors have established that the multicast tree problem may be modeled as the Steiner problem in networks <ref> [3, 4, 5, 12, 27] </ref>, referred to hereafter as the SPN, and that explicit solutions are prohibitively expensive. <p> Third, since finding a solution to the DCSP is NP-complete [24], a given DCSP heuristic may not be able to find a solution even though one exists. Consequently, all of our DCSP heuristics employ backtracking. Our backtracking strategy is inspired by Beasley's Lagrangean relaxation approach <ref> [3] </ref> in which Beasley applies a Steiner heuristic to each subgraph of G created by forcing every non-member node in or out of the solution. To force a non-member node to be in a solution, Beasley converts it temporarily to a member node. <p> The quality of solution for a heuristic is compared with the best solution found because (i) the cost of finding an optimal solution for a 200-node graph is prohibitive and (ii) the optimal solutions we found for a small number of graphs using Beasley's Lagrangean Relaxation algorithm <ref> [3] </ref> often had the same cost as the the best solution found by the heuristics. The last criterion gives the number of networks for which a heuristic could not find a solution even with backtracking.
Reference: [4] <author> L. Berry. </author> <title> "Graph theoretic models for multicast communications," in Traffic theories for new telecommunications services ITC Specialists Seminar, </title> <address> Adelaide, Australia, </address> <month> Sep. </month> <year> 1989, </year> <pages> pp. 95-99. </pages>
Reference-contexts: Transmitting common copies of data over a multicast tree is the preferable method. However, determining the optimal multi-cast tree for a graph, in general, is a difficult problem. Previous authors have established that the multicast tree problem may be modeled as the Steiner problem in networks <ref> [3, 4, 5, 12, 27] </ref>, referred to hereafter as the SPN, and that explicit solutions are prohibitively expensive.
Reference: [5] <author> K. Bharath-Kumar and Jaffe. </author> <title> "Routing to multiple destinations in computer networks," </title> <journal> IEEE Transactions on Communications, </journal> <volume> vol. COM-31, no. 3, </volume> <pages> pp. 343-351, </pages> <month> Mar. </month> <year> 1983. </year>
Reference-contexts: Transmitting common copies of data over a multicast tree is the preferable method. However, determining the optimal multi-cast tree for a graph, in general, is a difficult problem. Previous authors have established that the multicast tree problem may be modeled as the Steiner problem in networks <ref> [3, 4, 5, 12, 27] </ref>, referred to hereafter as the SPN, and that explicit solutions are prohibitively expensive. <p> A number of good, inexpensive heuristics exist for the SPN and have been reviewed extensively elsewhere <ref> [5, 12, 16, 20, 19, 26, 27] </ref>. Some have been shown through analysis to produce solutions no worse than twice the optimal solution [27]. Our empirical evidence indicates that these heuristics find solutions much better than twice the optimal with reasonable speed in most cases.
Reference: [6] <author> N. Chen. </author> <title> "New algorithms for Steiner tree on graphs," </title> <booktitle> in 1983 IEEE International Symposium on Circuits and Systems, </booktitle> <address> Newport Beach, CA, </address> <month> May </month> <year> 1983, </year> <pages> pp. 1217-1219. </pages>
Reference-contexts: Table 1 summarizes known results on the asymptotic time-complexities of these algorithms, together with the known upper bounds on the ratio of the quality of solution produced to that of an optimal solution. 3 SPH-Z [19] A29 [26] SPH-R (Section 2.2.2) SPH [19] Naive (Section 2.1.1) PDH Local Steinalization <ref> [6] </ref> Contraction [27] Set Cover [2] Dual Ascent [28] 2.1 Unconstrained Steiner Tree Heuristics Many Steiner heuristics have been proposed in the literature [12, 19, 26, 27] and form a suitable basis for DCSP-specific heuristics. <p> Finally, prune all non-multicast member leaves from T . The result is the solution. 2.1.7 Local Steinalization Heuristic Chen <ref> [6] </ref> describes a method to determine the optimal node through which to connect three multicast members. Using this method recursively, he outlines two heuristics, TPS1 and TPS2, which find Steiner solutions.
Reference: [7] <author> S. Deering. </author> <title> "Multicast routing in internetworks and extended LANs," </title> <journal> Computer Communication Review, </journal> <volume> vol. 18, no. 4, </volume> <pages> pp. 55-64, </pages> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: Many existing networks already support multicasting. For example the Internet MBONE service, a popular conferencing tool, already uses the multicast support recently added to the Internet <ref> [7] </ref>. Many emerging standards for point-to-point packet-switched networks, notably ATM, Frame Relay and SMDS, include support for multicasting. Future applications such as audio and video conferencing, replicated database updating, and distributed resource discovery will rely on the ability of the network to perform multicast communication.
Reference: [8] <author> M. Doar and I. Leslie. </author> <title> "How bad is naive multicast routing?," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> San Francisco, CA, </address> <month> Apr. </month> <year> 1993, </year> <pages> pp. 82-89. 26 </pages>
Reference-contexts: We expected this heuristic to give the worst results; as it sometimes does. However, we discovered that it often produces quite respectable results. This matches Doar's results <ref> [8] </ref>. We treat heuristic Naive as the baseline from which to compare other Steiner heuristics. We describe heuristic Naive as follows. 1. Initialize subtree T to an arbitrary Z-node. 2. Connect subtree T with an arbitrary Z-node 62 T by the shortest path. 3. <p> The 2000 networks were generated to resemble networks in a manner similar that of Doar <ref> [8] </ref>. Each of n nodes is distributed across a Cartesian coordinate plane with minimum and maximum coordinates (0; 0) and (2n; 2n), creating a forest of n nodes spread across this plane. In all of our test graphs, the number of nodes n was set at 200. <p> The weight of each edge is its rectilinear distance plus a small constant. We used the probability function P (x; y) = fie 2ffn ; where d x;y is the rectilinear distance between nodes x and y <ref> [8] </ref>. The parameters ff and fi govern the density of the graph. Increasing ff increases the number of connections to nodes far away and increasing fi increases the number of edges from each node. <p> The next least expensive heuristics K-SPH and ADH often gave better solutions at moderate, extra expense. Heuristic Naive, our expected worst Steiner heuristic, often did produce the worst solution; however, it also produced many solutions of surprisingly high quality. This result matches that of Doar and Leslie <ref> [8] </ref>. The quality of solution of the more complex heuristics A29 and Dual Ascent rarely justified their 24 edge was identified by graph reductions. 25 additional effort. As expected, dense networks posed much less of a challenge to degree-constrained Steiner heuristics than sparse networks.
Reference: [9] <author> R. Douglas. </author> <title> "NP-completeness and degree restricted spanning trees," </title> <journal> Discrete Mathe--matics, </journal> <volume> vol. 105, </volume> <pages> pp. 41-47, </pages> <year> 1992. </year>
Reference-contexts: The degree-constrained Steiner problem in networks is a relatively new problem and is addressed in only a handful of published papers [13, 21, 23, 24]. The degree-constrained Steiner problem is NP-complete [24] and contains the NP-complete problem of determining a degree-constrained spanning tree <ref> [9, 15] </ref>. Furthermore, finding a solution to the DCSP is also NP-complete [24]. In practice, however, the heuristics we tested rarely failed to find a solution in our test networks.
Reference: [10] <author> C. Duin and A. Volgenant. </author> <title> "An edge elimination test for the Steiner problem in graphs," </title> <journal> Operations Research Letters, </journal> <volume> vol. 8, </volume> <pages> pp. 79-83, </pages> <year> 1989. </year>
Reference-contexts: The modifications reduce the size of the initial graph, reducing subsequent heuristic run-time. Our empirical evidence suggests that on sparse networks even simple graph reductions may reduce their size as much as 15%. Graph reductions have been extensively reviewed elsewhere <ref> [10, 11, 27] </ref>. A short list of such reductions follows. 1. S degree 1. A non-member node that is a leaf of graph G cannot be a part of the solution and may be deleted. <p> We restricted ourselves to graph reductions S degree 1, S degree 2, and Z degree 1 because these were of reasonable cost and could be applied to the degree-constrained case. We had to discard many other graph reductions <ref> [10, 11, 27] </ref> because they eliminated nodes and edges 22 23 needed in the degree-constrained case. For example, some graph reductions identify shortest paths between multicast members as solution edges, eliminating longer paths.
Reference: [11] <author> C. Duin and A. Volgenant. </author> <title> "Reduction tests for the Steiner problem in graphs," </title> <journal> Networks, </journal> <volume> vol. 19, no. 5, </volume> <pages> pp. 549-567, </pages> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: The modifications reduce the size of the initial graph, reducing subsequent heuristic run-time. Our empirical evidence suggests that on sparse networks even simple graph reductions may reduce their size as much as 15%. Graph reductions have been extensively reviewed elsewhere <ref> [10, 11, 27] </ref>. A short list of such reductions follows. 1. S degree 1. A non-member node that is a leaf of graph G cannot be a part of the solution and may be deleted. <p> We restricted ourselves to graph reductions S degree 1, S degree 2, and Z degree 1 because these were of reasonable cost and could be applied to the degree-constrained case. We had to discard many other graph reductions <ref> [10, 11, 27] </ref> because they eliminated nodes and edges 22 23 needed in the degree-constrained case. For example, some graph reductions identify shortest paths between multicast members as solution edges, eliminating longer paths.
Reference: [12] <author> F. Hwang and D. Richards. </author> <title> "Steiner tree problems," </title> <journal> Networks, </journal> <volume> vol. 22, </volume> <pages> pp. 55-89, </pages> <year> 1992. </year>
Reference-contexts: Transmitting common copies of data over a multicast tree is the preferable method. However, determining the optimal multi-cast tree for a graph, in general, is a difficult problem. Previous authors have established that the multicast tree problem may be modeled as the Steiner problem in networks <ref> [3, 4, 5, 12, 27] </ref>, referred to hereafter as the SPN, and that explicit solutions are prohibitively expensive. <p> A number of good, inexpensive heuristics exist for the SPN and have been reviewed extensively elsewhere <ref> [5, 12, 16, 20, 19, 26, 27] </ref>. Some have been shown through analysis to produce solutions no worse than twice the optimal solution [27]. Our empirical evidence indicates that these heuristics find solutions much better than twice the optimal with reasonable speed in most cases. <p> the quality of solution produced to that of an optimal solution. 3 SPH-Z [19] A29 [26] SPH-R (Section 2.2.2) SPH [19] Naive (Section 2.1.1) PDH Local Steinalization [6] Contraction [27] Set Cover [2] Dual Ascent [28] 2.1 Unconstrained Steiner Tree Heuristics Many Steiner heuristics have been proposed in the literature <ref> [12, 19, 26, 27] </ref> and form a suitable basis for DCSP-specific heuristics. In this section, we first examine the heuristics for the unconstrained Steiner problem listed in Table 1. These heuristics are then modified to handle degree constraints and compared by way of simulation.
Reference: [13] <author> F. Hwang, D. Richards, and P. Winter. </author> <title> The Steiner Tree Problem. </title> <address> New York: </address> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: The degree-constrained Steiner problem in networks is a relatively new problem and is addressed in only a handful of published papers <ref> [13, 21, 23, 24] </ref>. The degree-constrained Steiner problem is NP-complete [24] and contains the NP-complete problem of determining a degree-constrained spanning tree [9, 15]. Furthermore, finding a solution to the DCSP is also NP-complete [24].
Reference: [14] <author> X. Jiang. </author> <title> "Path finding algorithms for broadband multicast," </title> <booktitle> in Third Int'l Conf. on High Speed Networking, </booktitle> <editor> O. Spaniol and A. Danthine, ed., </editor> <address> New York: </address> <publisher> North-Holland, </publisher> <year> 1991, </year> <pages> pp. 153-164. </pages>
Reference-contexts: A tree, in contrast, has only one Steiner tree and it may not be degree-constrained. While other constraints such as jitter, delay, and link capacity are important in constructing multicast tress, we focus specifically on the problem of degree-constraints. Papers such as <ref> [1, 14, 17] </ref> typify published approaches to multicasting with constraints other than the degree of individual nodes. <p> For example, Ammar et al. address the multicast tree problem as a flow problem, allowing for asymmetric capacities between source and destinations [1]; Jiang includes link capacity constraints in his Steiner heuristics <ref> [14] </ref>; and Kompella et al. include delay constraints in their Steiner heuristics [17]. The remainder of this paper is organized as follows. Section 2 describes the evaluated heuristics. Section 3 discusses the simulation methodology. Section 4 presents the simulation results and compares the heuristics based on these results.
Reference: [15] <author> D. Johnson. </author> <title> "The NP-completeness column: an ongoing guide," </title> <journal> Journal of Algorithms, </journal> <volume> vol. 6, no. 3, </volume> <pages> pp. 434-451, </pages> <month> Sep. </month> <year> 1985. </year>
Reference-contexts: The degree-constrained Steiner problem in networks is a relatively new problem and is addressed in only a handful of published papers [13, 21, 23, 24]. The degree-constrained Steiner problem is NP-complete [24] and contains the NP-complete problem of determining a degree-constrained spanning tree <ref> [9, 15] </ref>. Furthermore, finding a solution to the DCSP is also NP-complete [24]. In practice, however, the heuristics we tested rarely failed to find a solution in our test networks.
Reference: [16] <author> V. Kompella, J. Pasquale, and G. Polyzos. </author> <title> "Multicasting for multimedia applications," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> New York, NY, </address> <month> May </month> <year> 1992, </year> <pages> pp. 2078-2085. </pages>
Reference-contexts: A number of good, inexpensive heuristics exist for the SPN and have been reviewed extensively elsewhere <ref> [5, 12, 16, 20, 19, 26, 27] </ref>. Some have been shown through analysis to produce solutions no worse than twice the optimal solution [27]. Our empirical evidence indicates that these heuristics find solutions much better than twice the optimal with reasonable speed in most cases.
Reference: [17] <author> V. Kompella, J. Pasquale, and G. Polyzos. </author> <title> "Multicast routing for multimedia communications," </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> vol. 1, no. 3, </volume> <pages> pp. 286-292, </pages> <month> Jun. </month> <year> 1993. </year>
Reference-contexts: A tree, in contrast, has only one Steiner tree and it may not be degree-constrained. While other constraints such as jitter, delay, and link capacity are important in constructing multicast tress, we focus specifically on the problem of degree-constraints. Papers such as <ref> [1, 14, 17] </ref> typify published approaches to multicasting with constraints other than the degree of individual nodes. <p> For example, Ammar et al. address the multicast tree problem as a flow problem, allowing for asymmetric capacities between source and destinations [1]; Jiang includes link capacity constraints in his Steiner heuristics [14]; and Kompella et al. include delay constraints in their Steiner heuristics <ref> [17] </ref>. The remainder of this paper is organized as follows. Section 2 describes the evaluated heuristics. Section 3 discusses the simulation methodology. Section 4 presents the simulation results and compares the heuristics based on these results.
Reference: [18] <author> J. Kruskal. </author> <title> "On the shortest spanning subtree of a graph and the traveling salesman problem," </title> <journal> Proc. Amer. Math. Soc., </journal> <volume> vol. 7, </volume> <pages> pp. 48-50, </pages> <year> 1956. </year>
Reference-contexts: (b) Repeatedly prune S-leaves of U . 2.1.3 Heuristic SPH-Z This variant of SPH applies the basic SPH algorithm described in Section 2.1.2 once for each possible choice of the starting Z-node, returning the best solution found. 5 2.1.4 Heuristic K-SPH Unlike the previous heuristics, K-SPH, the Kruskal-based shortest-path heuristic <ref> [18] </ref>, starts with the forest of multicast member nodes. It repeatedly joins the two closest multicast member subtrees until a single tree spanning all multicast members remains. K-SPH's algorithm is described as follows. 1. Initialize T to be the forest of Z-nodes. 2.
Reference: [19] <author> M. Smith and P. Winter. </author> <title> "Path-distance heuristics for the Steiner problem in undirected networks," </title> <journal> Algorithmica, </journal> <volume> vol. 7, no. </volume> <pages> 2-3, pp. 309-327, </pages> <year> 1992. </year>
Reference-contexts: A number of good, inexpensive heuristics exist for the SPN and have been reviewed extensively elsewhere <ref> [5, 12, 16, 20, 19, 26, 27] </ref>. Some have been shown through analysis to produce solutions no worse than twice the optimal solution [27]. Our empirical evidence indicates that these heuristics find solutions much better than twice the optimal with reasonable speed in most cases. <p> Finally, the distance between two trees is the distance of the shortest among all paths between any node in one tree and any node in the other tree. Smith and Winter <ref> [19] </ref> divide Steiner heuristics into a morphological structure similar to the one shown in Figure 1. At the highest level, heuristics are divided between those that are path-distance heuristics (PDH) and others. <p> Table 1 summarizes known results on the asymptotic time-complexities of these algorithms, together with the known upper bounds on the ratio of the quality of solution produced to that of an optimal solution. 3 SPH-Z <ref> [19] </ref> A29 [26] SPH-R (Section 2.2.2) SPH [19] Naive (Section 2.1.1) PDH Local Steinalization [6] Contraction [27] Set Cover [2] Dual Ascent [28] 2.1 Unconstrained Steiner Tree Heuristics Many Steiner heuristics have been proposed in the literature [12, 19, 26, 27] and form a suitable basis for DCSP-specific heuristics. <p> Table 1 summarizes known results on the asymptotic time-complexities of these algorithms, together with the known upper bounds on the ratio of the quality of solution produced to that of an optimal solution. 3 SPH-Z <ref> [19] </ref> A29 [26] SPH-R (Section 2.2.2) SPH [19] Naive (Section 2.1.1) PDH Local Steinalization [6] Contraction [27] Set Cover [2] Dual Ascent [28] 2.1 Unconstrained Steiner Tree Heuristics Many Steiner heuristics have been proposed in the literature [12, 19, 26, 27] and form a suitable basis for DCSP-specific heuristics. <p> the quality of solution produced to that of an optimal solution. 3 SPH-Z [19] A29 [26] SPH-R (Section 2.2.2) SPH [19] Naive (Section 2.1.1) PDH Local Steinalization [6] Contraction [27] Set Cover [2] Dual Ascent [28] 2.1 Unconstrained Steiner Tree Heuristics Many Steiner heuristics have been proposed in the literature <ref> [12, 19, 26, 27] </ref> and form a suitable basis for DCSP-specific heuristics. In this section, we first examine the heuristics for the unconstrained Steiner problem listed in Table 1. These heuristics are then modified to handle degree constraints and compared by way of simulation. <p> The algorithm terminates when all members have joined the tree. Note that this algorithm differs from heuristic Naive because multicast members join in the order determined by their distance to the multicast tree, rather than in random order. This solution may be improved even further using the following technique <ref> [19] </ref>. Find the graph induced by the nodes in the solution, derive the induced graph's minimum spanning tree using a method such as Prim's algorithm, and prune the minimum spanning tree of non-multicast member leaves. The resulting tree is an improved solution. <p> The last criterion gives the number of networks for which a heuristic could not find a solution even with backtracking. To verify and calibrate simulation results, we first compared our results obtained from running unconstrained versions of the heuristics with those published by Smith <ref> [19] </ref> and Voss [26]. Of the heuristics compared, only one | Dual Ascent | did not match the published results. That only one heuristic differed significantly from published results is interesting since our simulations focused on a much narrower range of networks than those considered by Smith or Voss.
Reference: [20] <author> H. Takahashi and A. </author> <title> Matsuyama. "An approximate solution for the Steiner problem in graphs," </title> <journal> Math. Japonica, </journal> <volume> vol. 24, no. 6, </volume> <pages> pp. 573-577, </pages> <year> 1980. </year>
Reference-contexts: A number of good, inexpensive heuristics exist for the SPN and have been reviewed extensively elsewhere <ref> [5, 12, 16, 20, 19, 26, 27] </ref>. Some have been shown through analysis to produce solutions no worse than twice the optimal solution [27]. Our empirical evidence indicates that these heuristics find solutions much better than twice the optimal with reasonable speed in most cases. <p> We describe heuristic Naive as follows. 1. Initialize subtree T to an arbitrary Z-node. 2. Connect subtree T with an arbitrary Z-node 62 T by the shortest path. 3. If a Z-node exists 62 T , go to step 2. 2.1.2 Shortest Path Heuristic (SPH) The shortest-path heuristic <ref> [20] </ref> produces surprisingly good results and has many variants as shown in Figure 1. SPH initializes the multicast tree to an arbitrary multicast member. It then joins the next closest multicast member to the multicast tree by the shortest path between the multicast member and the tree.
Reference: [21] <author> H. Tode, Y. Sakai, M. Yamamoto, H. Okada, and Y. Tezuka. </author> <title> "Multicast routing algorithm for nodal load balancing," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> New York, NY, </address> <month> May </month> <year> 1992, </year> <pages> pp. 2086-2095. </pages>
Reference-contexts: The degree-constrained Steiner problem in networks is a relatively new problem and is addressed in only a handful of published papers <ref> [13, 21, 23, 24] </ref>. The degree-constrained Steiner problem is NP-complete [24] and contains the NP-complete problem of determining a degree-constrained spanning tree [9, 15]. Furthermore, finding a solution to the DCSP is also NP-complete [24]. <p> Some heuristics in this paper generate more than one tree. Each such heuristic returns the best tree generated as its solution. Few DCSP heuristics exist in the literature <ref> [21, 24] </ref>. A previous paper by Tode, et al. [21] treats the DCSP as an optimization problem. It presents two DCSP heuristics that minimize the average degree of the multicast tree. <p> Some heuristics in this paper generate more than one tree. Each such heuristic returns the best tree generated as its solution. Few DCSP heuristics exist in the literature [21, 24]. A previous paper by Tode, et al. <ref> [21] </ref> treats the DCSP as an optimization problem. It presents two DCSP heuristics that minimize the average degree of the multicast tree. It also includes a discussion of how to modify the heuristics to limit the maximum degree in the multicast tree.
Reference: [22] <author> J. Turner. </author> <title> "An optimal nonblocking multicast virtual circuit switch," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> Toronto, Canada, </address> <month> Jun. </month> <year> 1994, </year> <pages> pp. 298-305. </pages>
Reference-contexts: Even when the switches allow multicasting to an arbitrary number of destination ports, there are several advantages in limiting the number of copies made by each switch. For example, some packet-switch architectures implement multicasting by circulating copies of packets through the switch fabric multiple times <ref> [22] </ref>. Thus, keeping the degree small reduces the number of passes No. F19628-93-C-0175 and by the NSF Young Investigator Award No. MIP-9257103. A shortened version of this paper appears in Proc. IEEE INFOCOM '95, Boston, April 4-6, 1995, pp. 369-376. 1 needed through the switch fabric.
Reference: [23] <author> S. Voss. </author> <title> "A survey of some generalizations of Steiner's problem," </title> <booktitle> in Proc. of the First Balkan Conference on Operational Research, </booktitle> <year> 1988. </year>
Reference-contexts: The degree-constrained Steiner problem in networks is a relatively new problem and is addressed in only a handful of published papers <ref> [13, 21, 23, 24] </ref>. The degree-constrained Steiner problem is NP-complete [24] and contains the NP-complete problem of determining a degree-constrained spanning tree [9, 15]. Furthermore, finding a solution to the DCSP is also NP-complete [24].
Reference: [24] <editor> S. Voss. Steiner-Probleme in Graphen. Frankfurt/Main: </editor> <publisher> Hain, </publisher> <year> 1990, </year> <pages> pp. 179-184. 27 </pages>
Reference-contexts: The degree-constrained Steiner problem in networks is a relatively new problem and is addressed in only a handful of published papers <ref> [13, 21, 23, 24] </ref>. The degree-constrained Steiner problem is NP-complete [24] and contains the NP-complete problem of determining a degree-constrained spanning tree [9, 15]. Furthermore, finding a solution to the DCSP is also NP-complete [24]. <p> The degree-constrained Steiner problem in networks is a relatively new problem and is addressed in only a handful of published papers [13, 21, 23, 24]. The degree-constrained Steiner problem is NP-complete <ref> [24] </ref> and contains the NP-complete problem of determining a degree-constrained spanning tree [9, 15]. Furthermore, finding a solution to the DCSP is also NP-complete [24]. In practice, however, the heuristics we tested rarely failed to find a solution in our test networks. <p> The degree-constrained Steiner problem is NP-complete <ref> [24] </ref> and contains the NP-complete problem of determining a degree-constrained spanning tree [9, 15]. Furthermore, finding a solution to the DCSP is also NP-complete [24]. In practice, however, the heuristics we tested rarely failed to find a solution in our test networks. Although a multicast tree generated by a DCSP heuristic might be an optimal solution to the graph, it need not be. <p> Some heuristics in this paper generate more than one tree. Each such heuristic returns the best tree generated as its solution. Few DCSP heuristics exist in the literature <ref> [21, 24] </ref>. A previous paper by Tode, et al. [21] treats the DCSP as an optimization problem. It presents two DCSP heuristics that minimize the average degree of the multicast tree. <p> This changed topology can and does alter the shortest path information for remaining steps. As a consequence, heuristics must constantly reevaluate shortest paths between nodes. Third, since finding a solution to the DCSP is NP-complete <ref> [24] </ref>, a given DCSP heuristic may not be able to find a solution even though one exists. Consequently, all of our DCSP heuristics employ backtracking. <p> Ultimately, it is doubtful whether the quality of solution for the Set Cover heuristic would justify its cost. 2.2.2 Constrained Heuristics In addition to the above unconstrained heuristics, we simulate two DCSP-specific heuristics, A29 and SPH-R. Heuristic A29 was first proposed by Voss <ref> [24] </ref> and heuristic SPH-R is our own contribution. They are described below. A29: Heuristic A29 [24] is the only published DCSP heuristic of which we are aware. It is also a variant of SPH. <p> Heuristic A29 was first proposed by Voss <ref> [24] </ref> and heuristic SPH-R is our own contribution. They are described below. A29: Heuristic A29 [24] is the only published DCSP heuristic of which we are aware. It is also a variant of SPH. It first adds enough edges of infinite weight to make G a complete graph and then applies heuristic SPH. <p> Table 3 summarizes the success rates of the degree-constrained heuristics based on simulations on 2000 test networks. As expected, heuristics run on the sample networks with degree-constraints sometimes had difficulty in finding solutions. This is because finding a solution for the degree-constrained case is also NP-complete <ref> [24] </ref>. In practice, however, most of the degree-constrained graphs could be solved by the heuristics directly or through backtracking. In fact, each of the 2000 test networks could be solved by at least one of the heuristics. The maximum number of cases missed by any single heuristic was 7.
Reference: [25] <author> S. Voss. </author> <title> "Problems with generalized Steiner problems," </title> <journal> Algorithmica, </journal> <volume> vol. 7, no. </volume> <pages> 2-3, pp. 333-335, </pages> <year> 1992. </year>
Reference-contexts: The problem of how to create the initial multicast tree when switch multicast capabilities vary is hereafter referred to as the degree-constrained multicast tree problem. We model the degree-constrained multicast tree problem as the degree-constrained Steiner problem in networks (DCSP), first described by S. Voss <ref> [25] </ref>. The degree-constrained Steiner problem in networks is of particular interest to high-speed networks since multicast copies must be made quickly, typically by hardware. Whereas a low-speed switch might reasonably approximate infinite copy-capability, high-speed switches may have limited copy capabilities due to their speed constraints.
Reference: [26] <author> S. Voss. </author> <title> "Steiner's problem in graphs: Heuristic methods," </title> <journal> Discrete Applied Mathematics, </journal> <volume> vol. 40, </volume> <pages> pp. 45-72, </pages> <year> 1992. </year>
Reference-contexts: A number of good, inexpensive heuristics exist for the SPN and have been reviewed extensively elsewhere <ref> [5, 12, 16, 20, 19, 26, 27] </ref>. Some have been shown through analysis to produce solutions no worse than twice the optimal solution [27]. Our empirical evidence indicates that these heuristics find solutions much better than twice the optimal with reasonable speed in most cases. <p> Table 1 summarizes known results on the asymptotic time-complexities of these algorithms, together with the known upper bounds on the ratio of the quality of solution produced to that of an optimal solution. 3 SPH-Z [19] A29 <ref> [26] </ref> SPH-R (Section 2.2.2) SPH [19] Naive (Section 2.1.1) PDH Local Steinalization [6] Contraction [27] Set Cover [2] Dual Ascent [28] 2.1 Unconstrained Steiner Tree Heuristics Many Steiner heuristics have been proposed in the literature [12, 19, 26, 27] and form a suitable basis for DCSP-specific heuristics. <p> the quality of solution produced to that of an optimal solution. 3 SPH-Z [19] A29 [26] SPH-R (Section 2.2.2) SPH [19] Naive (Section 2.1.1) PDH Local Steinalization [6] Contraction [27] Set Cover [2] Dual Ascent [28] 2.1 Unconstrained Steiner Tree Heuristics Many Steiner heuristics have been proposed in the literature <ref> [12, 19, 26, 27] </ref> and form a suitable basis for DCSP-specific heuristics. In this section, we first examine the heuristics for the unconstrained Steiner problem listed in Table 1. These heuristics are then modified to handle degree constraints and compared by way of simulation. <p> We know this to be true since simply taking the spanning tree and pruning it to be the Steiner tree can, in the worst case, produce a solution that departs from the optimal by a factor of jSj + 1 <ref> [26] </ref>. 5. Finally, prune all non-multicast member leaves from T . The result is the solution. 2.1.7 Local Steinalization Heuristic Chen [6] describes a method to determine the optimal node through which to connect three multicast members. <p> The last criterion gives the number of networks for which a heuristic could not find a solution even with backtracking. To verify and calibrate simulation results, we first compared our results obtained from running unconstrained versions of the heuristics with those published by Smith [19] and Voss <ref> [26] </ref>. Of the heuristics compared, only one | Dual Ascent | did not match the published results. That only one heuristic differed significantly from published results is interesting since our simulations focused on a much narrower range of networks than those considered by Smith or Voss. <p> Each of our networks is large, sparse and has a small multicast group. By contrast, Smith and Voss simulated a mix of sparse and dense networks with small to large multicast groups. In Voss' simulations <ref> [26] </ref>, heuristic Dual Ascent found the best solution as much as 80% of time. In our simulations, however, the algorithm rarely produced the best solution; in some cases the solutions were as much as 15% off when compared with the best solution among all the heuristics. <p> This is important because Dual Ascent uses a minimum spanning tree (MST) of the subgraph to find a Steiner tree. Previously published results have shown that the approach based on pruning the MST works well for large multicast groups, but poorly for small groups <ref> [26] </ref>. The published worst-case ratio between a solution using the MST and an optimal solution is jSj + 1 where jSj is the number of non-multicast members. <p> Since the worst case ratio between a solution and an optimal solution for the SPH is 2X and for the MST is jSj+1 (where S is the number of non-multicast members) <ref> [26] </ref>, this difference is not surprising. 20 Cluster Degree-Constrained Unconstrained Repetitive 705.88 797.08 Kruskal 81.57 79.17 Dual Ascent 72.70 59.13 Simple 13.11 15.25 Naive 1.94 4.55 Table 7: Average cost of heuristics for the degree-constrained and unconstrained cases (in millions of statements).
Reference: [27] <author> P. Winter. </author> <title> "Steiner problem in networks: A survey," </title> <journal> Networks, </journal> <volume> vol. 17, no. 2, </volume> <pages> pp. 129-167, </pages> <year> 1987. </year>
Reference-contexts: Transmitting common copies of data over a multicast tree is the preferable method. However, determining the optimal multi-cast tree for a graph, in general, is a difficult problem. Previous authors have established that the multicast tree problem may be modeled as the Steiner problem in networks <ref> [3, 4, 5, 12, 27] </ref>, referred to hereafter as the SPN, and that explicit solutions are prohibitively expensive. <p> For example, two popular explicit algorithms, the spanning tree enumeration algorithm and the dynamic programming algorithm <ref> [27] </ref>, have algorithmic complexity of O (p 2 2 (np) + n 3 ) and O (n3 p + n 2 2 p + n 3 ), respectively, where n is the number of nodes in the graph and p the number of multicast members. <p> A number of good, inexpensive heuristics exist for the SPN and have been reviewed extensively elsewhere <ref> [5, 12, 16, 20, 19, 26, 27] </ref>. Some have been shown through analysis to produce solutions no worse than twice the optimal solution [27]. Our empirical evidence indicates that these heuristics find solutions much better than twice the optimal with reasonable speed in most cases. <p> A number of good, inexpensive heuristics exist for the SPN and have been reviewed extensively elsewhere [5, 12, 16, 20, 19, 26, 27]. Some have been shown through analysis to produce solutions no worse than twice the optimal solution <ref> [27] </ref>. Our empirical evidence indicates that these heuristics find solutions much better than twice the optimal with reasonable speed in most cases. Finding a multicast tree is complicated by the likely heterogeneous nature of the multicast environment. <p> 1 summarizes known results on the asymptotic time-complexities of these algorithms, together with the known upper bounds on the ratio of the quality of solution produced to that of an optimal solution. 3 SPH-Z [19] A29 [26] SPH-R (Section 2.2.2) SPH [19] Naive (Section 2.1.1) PDH Local Steinalization [6] Contraction <ref> [27] </ref> Set Cover [2] Dual Ascent [28] 2.1 Unconstrained Steiner Tree Heuristics Many Steiner heuristics have been proposed in the literature [12, 19, 26, 27] and form a suitable basis for DCSP-specific heuristics. In this section, we first examine the heuristics for the unconstrained Steiner problem listed in Table 1. <p> the quality of solution produced to that of an optimal solution. 3 SPH-Z [19] A29 [26] SPH-R (Section 2.2.2) SPH [19] Naive (Section 2.1.1) PDH Local Steinalization [6] Contraction [27] Set Cover [2] Dual Ascent [28] 2.1 Unconstrained Steiner Tree Heuristics Many Steiner heuristics have been proposed in the literature <ref> [12, 19, 26, 27] </ref> and form a suitable basis for DCSP-specific heuristics. In this section, we first examine the heuristics for the unconstrained Steiner problem listed in Table 1. These heuristics are then modified to handle degree constraints and compared by way of simulation. <p> The heuristic result is a (sub-optimal) solution. Unfortunately, this algorithm is very complex and requires many optimizations to run efficiently. Because it is so complex and because other, simpler heuristics produced good solutions, we elected to leave this heuristic out of our evaluation. 2.1.9 Contraction Heuristic The Contraction heuristic <ref> [27] </ref> recursively collapses neighborhoods classes of multicast nodes into a single multicast super-node. A neighborhood of a node i is defined to be the nodes of G that lie within a given distance r from i. <p> The modifications reduce the size of the initial graph, reducing subsequent heuristic run-time. Our empirical evidence suggests that on sparse networks even simple graph reductions may reduce their size as much as 15%. Graph reductions have been extensively reviewed elsewhere <ref> [10, 11, 27] </ref>. A short list of such reductions follows. 1. S degree 1. A non-member node that is a leaf of graph G cannot be a part of the solution and may be deleted. <p> We restricted ourselves to graph reductions S degree 1, S degree 2, and Z degree 1 because these were of reasonable cost and could be applied to the degree-constrained case. We had to discard many other graph reductions <ref> [10, 11, 27] </ref> because they eliminated nodes and edges 22 23 needed in the degree-constrained case. For example, some graph reductions identify shortest paths between multicast members as solution edges, eliminating longer paths. <p> Second, the run-time of heuristics also improves. Our results indicate an improvement of 10-20% in heuristic run-time for many cases. This fits the 17-20% improvement predicted using the time complexity for heuristics ADH, SPH and SPH-Z <ref> [27] </ref>. 5 Concluding Remarks In this paper we studied the degree-constrained multicast tree problem as applied to point-to-point networks and evaluated the effectiveness of several heuristic algorithms based on modifications of algorithms for the unconstrained Steiner-tree problem.
Reference: [28] <author> R. Wong. </author> <title> "A dual ascent approach for Steiner tree problems on a directed graph," </title> <journal> Mathematical Programming, </journal> <volume> vol. 28, </volume> <pages> pp. 271-287, </pages> <year> 1984. </year>
Reference-contexts: asymptotic time-complexities of these algorithms, together with the known upper bounds on the ratio of the quality of solution produced to that of an optimal solution. 3 SPH-Z [19] A29 [26] SPH-R (Section 2.2.2) SPH [19] Naive (Section 2.1.1) PDH Local Steinalization [6] Contraction [27] Set Cover [2] Dual Ascent <ref> [28] </ref> 2.1 Unconstrained Steiner Tree Heuristics Many Steiner heuristics have been proposed in the literature [12, 19, 26, 27] and form a suitable basis for DCSP-specific heuristics. In this section, we first examine the heuristics for the unconstrained Steiner problem listed in Table 1. <p> If T is disconnected, go to step 2. 4. Improve the solution as discussed in step 4 of the SPH heuristic. 6 2.1.6 Heuristic Dual Ascent Wong <ref> [28] </ref> describes an exact solution and a heuristic to the SPN. The Dual Ascent heuristic finds a solution to the SPN in five steps: 1.
Reference: [29] <author> W. De Zhong, Y. Onozato, and J. Kaniyil. </author> <title> "A copy network with shared buffers for large-scale multicast ATM switching," </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> vol. 1, no. 2, </volume> <pages> pp. 157-165, </pages> <month> Apr. </month> <year> 1993. </year> <month> 28 </month>
Reference-contexts: Finding a multicast tree is complicated by the likely heterogeneous nature of the multicast environment. Switches in a point-to-point network will likely vary in their ability to support multicasting. Some switches may not support multicasting; others may be limited in the number of multicast copies they can reasonably make <ref> [29] </ref>. The multicast capability of each switch is represented in this paper by a degree-constraint. Thus, a degree constraint of d implies that the corresponding switch is able to forward copies of an incoming packet to a maximum of d 1 output ports.
References-found: 29

