URL: http://www.cs.man.ac.uk/~tessaris/DL/docs/ECAI94/degiacomo-lenzerini.ps.Z
Refering-URL: http://www.cs.man.ac.uk/~tessaris/DL/papers.html
Root-URL: http://www.cs.man.ac.uk
Title: Concept language with number restrictions and fixpoints, and its relationship with mu-calculus  
Author: Giuseppe De Giacomo and Maurizio Lenzerini 
Abstract: Many recent works point out that there are several possibilities of assigning a meaning to a concept definition containing some sort of recursion. In this paper, we argue that, instead of choosing a single style of semantics, we achieve a better result by adopting a formalism allowing for different semantics to coexist. In order to demonstrate the feasibility of our proposal, we present a knowledge representation language with the above characteristics. The language is a powerful concept language where, besides the usual constructs for conjunction, disjunction, negation, and quantifiers, both qualified number restrictions, and recursive definitions are allowed. Notably, these features make our formalism one of the most powerful concept languages proposed in literature, in which the usual frame-based descriptions can be combined with definitions of data structures such as lists, directed acyclic graphs, streams, etc. We show that reasoning in our language is decidable, and we characterize its computational complexity by resorting to a correspondence with the modal mu-calculus interpreted over deterministic structures. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Baader, </author> <title> `Terminological cycles in KL-ONE-based KR-languages', </title> <booktitle> in Proc. of the 8th Nat. Conf. on Artificial Intelligence, </booktitle> <pages> pp. 621-626, </pages> <year> (1990). </year>
Reference: [2] <author> C. Beeri, </author> <title> `A formal approach to object-oriented database', </title> <booktitle> in Data and Knowledge Engineering, </booktitle> <pages> pp. 353-382, </pages> <year> (1990). </year>
Reference: [3] <author> D. Beneventano and S. Bergamaschi, </author> <title> `Subsumption for complex object data models', </title> <booktitle> in Proc. of the 4th Int. Conf. on Database Theory, </booktitle> <volume> LNCS 646, </volume> <pages> pp. 357-375. </pages> <publisher> Springer-Verlag, </publisher> <year> (1992). </year>
Reference: [4] <author> S. Bergamaschi and C. Sartori, </author> <title> `On taxonomic reasoning in conceptual design', </title> <journal> ACM Transaction on Database Systems, </journal> <volume> 17(3), </volume> <pages> 385-422, </pages> <year> (1992). </year>
Reference-contexts: We show that reasoning in this logic is decidable, and we precisely characterize the computational complexity of the reasoning process by resorting to a correspondence with the modal mu-calculus interpreted over deterministic structures. Several recent papers (see, for example, <ref> [4, 5] </ref>) advocate the use of concept languages as a unifying framework for different types of database and knowledge representation formalisms. Indeed, it is possible to show that, based on both the constructors and the definitional facilities, our language can capture several database models and programming language type systems.
Reference: [5] <author> A. Borgida, </author> <title> `From type systems to knowledge representation: Natural semantics specifications for description logics', </title> <journal> International Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 1(1), </volume> <pages> 93-126, </pages> <year> (1992). </year>
Reference-contexts: We show that reasoning in this logic is decidable, and we precisely characterize the computational complexity of the reasoning process by resorting to a correspondence with the modal mu-calculus interpreted over deterministic structures. Several recent papers (see, for example, <ref> [4, 5] </ref>) advocate the use of concept languages as a unifying framework for different types of database and knowledge representation formalisms. Indeed, it is possible to show that, based on both the constructors and the definitional facilities, our language can capture several database models and programming language type systems.
Reference: [6] <author> J. de Bakker, </author> <title> Mathematical Theory of Program Correctness, </title> <publisher> Prentice-Hall, </publisher> <year> 1980. </year>
Reference-contexts: We conclude the paper discussing our results and comparing them to other proposals in the literature. 2 PRELIMINARIES In this section, we briefly recall some preliminary notions regarding concept languages, and fixpoints. The reader is referred to [10] and <ref> [6] </ref> for an introduction to the subjects. <p> It is well known that mutual fixpoints can be re-expressed by means of embedded ones (see, for example, <ref> [6, 13] </ref>). As a consequence of this observation it follows that our language is strictly more expressive than the one analyzed in [13]. 10 Note that, parametric concepts can be introduced also in simpler languages not containing constructs for fixpoints.
Reference: [7] <author> G. De Giacomo and M. Lenzerini, </author> <title> `Boosting the correspondence between description logics and propositional dynamic logics', </title> <booktitle> in Proc. of the 12th Nat. Conf. on Artificial Intelligence, </booktitle> <year> (1994). </year>
Reference-contexts: In order to devise a (effective) method for checking a ALCN concept for unsatisfiability, we exhibit a correspondence (similarly to <ref> [14, 7] </ref>) between ALCN and a powerful logic of programs called modal mu-calculus ([9, 16, 17]), which subsumes most Propositional Dynamic Logics, and most temporal logics for reactive/parallel processes (for references, see [15]). 8 Notice that inclusions statements in T are interpreted according to the descriptive semantics.
Reference: [8] <author> E. A. Emerson and C. S. Jutla, </author> <title> `The complexity of tree automata and logics of programs', </title> <booktitle> in Proc. of the 20th Ann. Symp. on the Foundations of Computer Science, </booktitle> <pages> pp. 328-337, </pages> <year> (1988). </year>
Reference: [9] <author> D. Kozen, </author> <title> `Results on the propositional mu-calculus', </title> <journal> Theoretical Computer Science, </journal> <volume> 27, </volume> <pages> 333-355, </pages> <year> (1983). </year>
Reference: [10] <author> B. Nebel, </author> <title> Reasoning and Revision in Hybrid Representation Systems, </title> <booktitle> Lecture Notes In Artificial Intelligence, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: We conclude the paper discussing our results and comparing them to other proposals in the literature. 2 PRELIMINARIES In this section, we briefly recall some preliminary notions regarding concept languages, and fixpoints. The reader is referred to <ref> [10] </ref> and [6] for an introduction to the subjects. <p> We call recursive definition statements 3 (or simply recursive definitions), definition statements of the form A = def F (A); 3 Terminological cycles in <ref> [10] </ref>. where F (A) stands for a concept that has A as a subconcept 4 .
Reference: [11] <author> R. Parikh, </author> <title> `Propositional dynamic logic of programs: A survey', </title> <booktitle> in Proc. of the 1st Work. on Logic of Programs, </booktitle> <volume> LNCS 125, </volume> <pages> pp. 102-144. </pages> <publisher> Springer-Verlag, </publisher> <year> (1981). </year>
Reference: [12] <author> S. Safra, </author> <title> `On the complexity of !-automata', </title> <booktitle> in Proc. of the 20th Ann. Symp. on the Foundations of Computer Science, </booktitle> <pages> pp. 319-327, </pages> <year> (1988). </year>
Reference: [13] <author> K. Schild, </author> <title> `Terminological cycles and the propositional mu-calculus', </title> <booktitle> in Proc. of the 4th Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <year> (1994). </year>
Reference-contexts: Our proposal of allowing for fixpoint constructors explicitly in the formalism is shared by a recent work independently carried out by Schild <ref> [13] </ref>. The main goal of that work is to study both the expressive power and the computational complexity of subsumption and satisfiability for terminological knowledge bases expressed in ALC (no number restrictions), whose definitions can be mutually recursive. <p> It is well known that mutual fixpoints can be re-expressed by means of embedded ones (see, for example, <ref> [6, 13] </ref>). As a consequence of this observation it follows that our language is strictly more expressive than the one analyzed in [13]. 10 Note that, parametric concepts can be introduced also in simpler languages not containing constructs for fixpoints. <p> It is well known that mutual fixpoints can be re-expressed by means of embedded ones (see, for example, [6, 13]). As a consequence of this observation it follows that our language is strictly more expressive than the one analyzed in <ref> [13] </ref>. 10 Note that, parametric concepts can be introduced also in simpler languages not containing constructs for fixpoints. We conclude noticing that although the proposed language is very powerful, it lacks a construct for inverse roles which is needed for example to correctly capture the notions of TREE, BINARY-TREE, etc.
Reference: [14] <author> K. Schild, </author> <title> `A correspondence theory for terminological logics: Preliminary report', </title> <booktitle> in Proc. of the 12th Int. Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 466-471, </pages> <year> (1991). </year>
Reference-contexts: In order to devise a (effective) method for checking a ALCN concept for unsatisfiability, we exhibit a correspondence (similarly to <ref> [14, 7] </ref>) between ALCN and a powerful logic of programs called modal mu-calculus ([9, 16, 17]), which subsumes most Propositional Dynamic Logics, and most temporal logics for reactive/parallel processes (for references, see [15]). 8 Notice that inclusions statements in T are interpreted according to the descriptive semantics.
Reference: [15] <author> C. Stirling, </author> <title> `Modal and temporal logic', </title> <booktitle> in Handbook of Logic in Computer Science, </booktitle> <pages> 477-563, </pages> <publisher> Clarendon Press, Oxford, </publisher> <year> (1992). </year>
Reference-contexts: to devise a (effective) method for checking a ALCN concept for unsatisfiability, we exhibit a correspondence (similarly to [14, 7]) between ALCN and a powerful logic of programs called modal mu-calculus ([9, 16, 17]), which subsumes most Propositional Dynamic Logics, and most temporal logics for reactive/parallel processes (for references, see <ref> [15] </ref>). 8 Notice that inclusions statements in T are interpreted according to the descriptive semantics.
Reference: [16] <author> R. S. Streett and E. A. Emerson, </author> <title> `The propositional mu-calculus is elementary', </title> <booktitle> in Proc. of the 6th Int. Col. on Automata, Languages and Programming, </booktitle> <volume> LNCS 172, </volume> <pages> pp. 465-472. </pages> <publisher> Springer-Verlag, </publisher> <year> (1984). </year>
Reference: [17] <author> R. S. Streett and E. A. Emerson, </author> <title> `An automata theoretic decision procedure for the propositional mu-calculus', </title> <journal> Information and Control, </journal> <volume> 81, </volume> <pages> 249-264, </pages> <year> (1989). </year>
Reference: [18] <author> A. Tarski, </author> <title> `A lattice-theoretical fixpoint theorem and its applications', </title> <journal> Pacific Journal of Mathematics, </journal> <volume> 5, </volume> <pages> 285-309, </pages> <year> (1955). </year>
Reference: [19] <author> M. Y. Vardi and P. Wolper, </author> <title> `Automata theoretic techniques for modal logics of programs', </title> <booktitle> in Proc. of the 16th Ann. Symp. on the Foundations of Computer Science, </booktitle> <pages> pp. 446-456, </pages> <year> (1984). </year> <title> Knowledge Representation 360 G. </title> <editor> De Giacomo and M. </editor> <publisher> Lenzerini </publisher>
References-found: 19

