URL: http://www.cs.indiana.edu/hmg/behaviortables.ps.Z
Refering-URL: http://www.cs.indiana.edu/hmg/hmg.html
Root-URL: http://www.cs.indiana.edu
Email: sjohnson@cs.indiana.edu  
Title: Behavior Tables (abstract)  
Author: Steven D. Johnson 
Date: March 7, 1997  
Address: Bloomington Indiana  
Affiliation: Computer Science Department Indiana University,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Robert G. Burger. </author> <title> The scheme machine. </title> <type> Technical Report 413, </type> <institution> Indiana University, Computer Science Department, </institution> <month> August </month> <year> 1994. </year> <pages> 59 pages. </pages>
Reference-contexts: A textual expression of the algorithm describes the computation of fib (n). A timing diagram shows the interface abstraction. The behavior table in Figure 2 (page 7) describes the garbage collector of a list processing computer <ref> [1] </ref>. It is representative of the tables we work with in our case studies. Its level of specification is more abstract, with two of the registers of type memory.
Reference: [2] <institution> Derivation Systems, Inc., Carlsbad, California. DRS: </institution> <note> Derivational Reasoning System, 1.2.1 edition, December 1995. Contact drs@derivation.com. </note>
Reference: [3] <author> Nikil D. Dutt and Daniel D. Gajski. Exel: </author> <title> A language for interactive behavioral synthesis. </title> <editor> In John A. Darringer and Franz J. Rammig, editors, </editor> <booktitle> Computer Hardware Description Languages and their Applications, </booktitle> <pages> pages 3-18, </pages> <year> 1989. </year>
Reference-contexts: Their work is also evidence of the utility of a tabular specification language for CAD tool development. Behavior tables have also been proposed as an interchange format by Gajski, Dutt, et. al. <ref> [4, 3] </ref>. We find it very encouraging that research in high-level synthesis and formal methods finds common ground in these tabular representations; it represents a new opportunity for synergy. Leveson's Requirements State Machine Language [12]. is based on Harel's state charts [5], but uses and-or tables to specify hyper-edges.
Reference: [4] <author> D. Gajski, N. Dutt, A. Wu, and S. Lin. </author> <title> High-level Synthesis: Introduction to Chip and System Design. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1992. </year> <note> 11 Indiana University Technical Report |DRAFT| March 7, </note> <year> 1997 </year>
Reference-contexts: Their work is also evidence of the utility of a tabular specification language for CAD tool development. Behavior tables have also been proposed as an interchange format by Gajski, Dutt, et. al. <ref> [4, 3] </ref>. We find it very encouraging that research in high-level synthesis and formal methods finds common ground in these tabular representations; it represents a new opportunity for synergy. Leveson's Requirements State Machine Language [12]. is based on Harel's state charts [5], but uses and-or tables to specify hyper-edges.
Reference: [5] <author> D. Harel. Statecharts: </author> <title> a visual formalism for complex systems. </title> <booktitle> The Science of Computer Programming, </booktitle> <volume> 8 </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference-contexts: We find it very encouraging that research in high-level synthesis and formal methods finds common ground in these tabular representations; it represents a new opportunity for synergy. Leveson's Requirements State Machine Language [12]. is based on Harel's state charts <ref> [5] </ref>, but uses and-or tables to specify hyper-edges. She echos Hoover's observation that decision tables are readily accepted and used by practicing engineers. Both Tablewise and TDTs have provisions for assertions that are not yet found in our behavior tables.
Reference: [6] <author> Constance Heitmeyer, Ralph Jeffords, and Bruce Labaw. </author> <title> Tools for analyzing scr-style requirements specifications: a formal foundation. </title> <type> Technical Report 7499, </type> <institution> Naval Research Laboratory, </institution> <year> 1995. </year> <note> In press. </note>
Reference-contexts: The notion of term evaluation is standard. The value of a term, t, is written oe [[t]], where oe is an assignment or association of variables to values. A generic don't-care constant, written as `"', denotes an undetermined value. 1 For instance, SCR <ref> [6] </ref>. Although we had recently obtained the earlier technical report on this work [17], we saw the TACAS'97 article [16] the day before submitting this abstract. We have not been able to give either article a extensive reading yet. 2 An apology about terminology.
Reference: [7] <author> D. N. Hoover and Zewei Chen. Tbell: </author> <title> A mathematical tool for analyzing decision tables. </title> <type> Contractor Report 195027, </type> <institution> National Aeronautics and Space Administration, </institution> <address> Hampton VA 23681-0001, </address> <month> November </month> <year> 1994. </year> <institution> Authors' affiliation: Odyssey Research Associates, Inc., </institution> <address> Ithaca NY. </address>
Reference-contexts: In Sections 3 through 5 we present a syntax and representative semantics for the tables we use. Section 6 illustrates the kind of manipulations we perform in design derivation. 2 Related work The work on decision tables by Hoover, Chen, and others <ref> [8, 7] </ref> inspired us to think more seriously about the behavior tables developed in our case studies of design derivation. Their Tablewise specification tool was developed for avionics software development, but clearly applies to reactive systems in general. <p> We hope this terminology will stabalize in the near future. 3 Indiana University Technical Report |DRAFT| March 7, 1997 A finite extension of propositional logic is assumed|Hoover calls it finite logic <ref> [7] </ref>. Arbitrary collections of enumerated values, or tokens, can be formed. These finite sets come with a polymorphic selection operation. A behavior table can be thought of as an iterated composition of selection expressions.
Reference: [8] <author> D. N. Hoover, David Guaspari, </author> <title> and Polar Humenn. Applications of formal methods to specification and safety of avionics software. </title> <type> Contractor Report 4723, </type> <institution> National Aeronautics and Space Administration Langley Research Center (NASA/LRC), </institution> <address> Hampton VA 23681-0001, </address> <month> November </month> <year> 1994. </year> <institution> Authors affiliation: Odyssey Research Associates, Inc., Ithaca NY. Printed copies available from NASA Center for AeroSpace Information, </institution> <address> 800 Elkridge Landing Road, Linthicum Heights MD 21090-2934. </address>
Reference-contexts: In Sections 3 through 5 we present a syntax and representative semantics for the tables we use. Section 6 illustrates the kind of manipulations we perform in design derivation. 2 Related work The work on decision tables by Hoover, Chen, and others <ref> [8, 7] </ref> inspired us to think more seriously about the behavior tables developed in our case studies of design derivation. Their Tablewise specification tool was developed for avionics software development, but clearly applies to reactive systems in general. <p> In addition to a graphical front end, there are functions for verifying exclusivity and completeness of decision tables and for performing structural analyses to aid in obtaining these properties. Future topics mentioned in <ref> [8] </ref> include connections to state-machine and statechart based specification. This connection is the focus of our interest. Li and Gupta introduce timed decision tables as an HDL [14, 13]. Their results on optimizations exploiting don't care entries are directly applicable to the forms we use in our work. <p> We have not been able to give either article a extensive reading yet. 2 An apology about terminology. The term behavior table arose spontaneously in our research group. We have adopted the terms decision table from <ref> [8] </ref> and action table from [14] for fragments of our forms. But these fragments are identical in neither syntax nor semantics. Furthermore, there are other objects in the literature with similar names, including "behavior table" that probably have incompatable meanings. <p> We say g holds for an assignment oe to ISC when, for each p 2 P , either c p = " or oe [[p]] = c p . A decision table D = [P; G], consists of a condition set and a list of guards. Following <ref> [8] </ref>, we say a decision table is functional when G describes a proper partitioning of the possible assignments to ISC.
Reference: [9] <author> Steven D. Johnson. </author> <title> Manipulating logical organization with system factorizations. </title> <editor> In Leeser and Brown, editors, </editor> <title> Hardware Specification, Verification and Synthesis: </title> <booktitle> Mathematical Aspects, volume 408 of LNCS, </booktitle> <pages> pages 260-281. </pages> <publisher> Springer, </publisher> <month> July </month> <year> 1989. </year> <booktitle> Proceedings of Mathematical Sciences Institute Workshop, </booktitle> <institution> Cornell University, </institution> <year> 1989. </year>
Reference-contexts: 2 false ao v w sub u 1 2 " done* u=0 u w ao add v w ALU:(aop,ai1,ai2) ! ao* add ai1+ai2 9 Indiana University Technical Report |DRAFT| March 7, 1997 A system factorization encapsulates a set of subject terms in a new table and generates residual interface signals <ref> [9] </ref>. Here, the interface signal aop generates instruction tokens, sub and add, telling ALU which operation to perform. The table manipulation tool keeps track of the connectivity. To finish the example, we make some assignments to the don't-care entries whose ultimate effect is to isolate control. <p> Our notion of system factorization, involving both data abstraction and interface specification, has yet to be fully reflected in behavior tables. The underlying ideas are more general than the example shows, having evolved over several years of research <ref> [19, 21, 26, 29, 20, 28, 22, 9] </ref>. For example, consider a pipelined ALU that takes operands sequentially.
Reference: [10] <author> Steven D. Johnson and B. Bose. </author> <title> A system for digital design derivation. </title> <type> Technical Report 289, </type> <institution> Indiana University, Computer Science Department, Indiana University, </institution> <month> August </month> <year> 1989. </year> <title> Summary presented at the 1989 IEEE High Level Synthesis Workshop, </title> <publisher> Kennebunkport, Maine. </publisher>
Reference-contexts: In our prior work we get a semantics by interpreting a table as a recursive system of stream-defining equations <ref> [10] </ref>. More directly, suppose we are given a set of initial values for the registers, fx s g s2S and a stream for each input variable in I.
Reference: [11] <author> Steven D. Johnson and Bhaskar Bose. </author> <title> A system for mechanized digital design derivation. </title> <booktitle> In IFIP and ACM/SIGDA International Workshop on Formal Methods in VLSI Design, 1991. Participants' proceedings, workshop held in Miami, </booktitle> <address> Florida, </address> <month> January </month> <year> 1991. </year> <note> Available as Indiana University Computer Science Department Technical Report No. </note> <month> 323 (December </month> <year> 1990). </year>
Reference-contexts: 1 Introduction and background The tabular specification language described in this article emerged as a visual representation for interactive system design. Initially, we used it in a casual way, generating the tables from the underlying expressions of a formal system for design derivation <ref> [11] </ref>. Behavior tables evolved as a compromise notation between control oriented and architecturally oriented formal specifications. They are also way to impose structure on text and, in that sense, are a modest step toward more diagrammatic design notations.
Reference: [12] <author> Nancy G. Leveson, Mats Per Erik Heimdahl, Holly Hildreth, and Jon Damon Reese. </author> <title> Requirements specifiation for process-control systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 20(9) </volume> <pages> 684-707, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: Behavior tables have also been proposed as an interchange format by Gajski, Dutt, et. al. [4, 3]. We find it very encouraging that research in high-level synthesis and formal methods finds common ground in these tabular representations; it represents a new opportunity for synergy. Leveson's Requirements State Machine Language <ref> [12] </ref>. is based on Harel's state charts [5], but uses and-or tables to specify hyper-edges. She echos Hoover's observation that decision tables are readily accepted and used by practicing engineers. Both Tablewise and TDTs have provisions for assertions that are not yet found in our behavior tables.
Reference: [13] <author> Jian Li. </author> <title> Timed decision tables: A behavioral model for embedded system specification and optimization. </title> <type> Technical Report UIUCDCS-R-96-1971, Uni 12 Indiana University Technical Report |DRAFT| March 7, </type> <institution> 1997 veristy of Illinois Department of Computer Science, </institution> <address> 1304 West Springfield Ave, Urbana IL 61801, </address> <year> 1996. </year> <editor> Ph. D. </editor> <publisher> dissertation. </publisher>
Reference-contexts: Future topics mentioned in [8] include connections to state-machine and statechart based specification. This connection is the focus of our interest. Li and Gupta introduce timed decision tables as an HDL <ref> [14, 13] </ref>. Their results on optimizations exploiting don't care entries are directly applicable to the forms we use in our work. Their work is also evidence of the utility of a tabular specification language for CAD tool development.
Reference: [14] <author> Jian Li and Rejash K. Gupta. </author> <title> HDL optimization using timed decision tables. </title> <booktitle> In 33rd ACM/IEEE Design Automation Conference, </booktitle> <year> 1996. </year>
Reference-contexts: Future topics mentioned in [8] include connections to state-machine and statechart based specification. This connection is the focus of our interest. Li and Gupta introduce timed decision tables as an HDL <ref> [14, 13] </ref>. Their results on optimizations exploiting don't care entries are directly applicable to the forms we use in our work. Their work is also evidence of the utility of a tabular specification language for CAD tool development. <p> We have not been able to give either article a extensive reading yet. 2 An apology about terminology. The term behavior table arose spontaneously in our research group. We have adopted the terms decision table from [8] and action table from <ref> [14] </ref> for fragments of our forms. But these fragments are identical in neither syntax nor semantics. Furthermore, there are other objects in the literature with similar names, including "behavior table" that probably have incompatable meanings.
Reference: [15] <author> Paul S. </author> <title> Miner. </title> <booktitle> in progress. </booktitle>
Reference-contexts: Instead, they are composed by connecting their I/O ports. One difficulty to anticipate in formalizing this semantics is that the fundamental semantic objects, streams, are non-trivial to represent in many theorem provers. Miner is developing a theory for streams in PVS <ref> [15] </ref>. Changing from a synchronous to an asynchronous communication model results in still another semantic variation. In fact, behavior tables will acquire a range of semantics, depending on their applications, just as HDLs and programming languages do.
Reference: [16] <author> Sam Owre, John Rushby, and N. Shankar. </author> <title> Integration in PVS: Tables, types, and model checking. </title> <booktitle> In Tools and Algorithms for the Construction and Analysis of Systems TACAS '97, Lecture Notes in Computer Science, </booktitle> <address> Enschede, The Netherlands, </address> <month> April </month> <year> 1997. </year> <note> Springer-Verlag. To appear. </note>
Reference-contexts: In Tablewise the primary intent seems to be the verification of invariant properties, but assertions could also be used to state constraints, measures, and, for that matter, computational actions. Owre, Rushby, and Shankar lay the foundations for formalizing various tables in PVS <ref> [16] </ref> Their review includes all of the work we cite as well as additional state-machine specification notations 1 Their treatment is a shallow embedding, that is, based on a syntax translation into the PVS surface language. <p> A generic don't-care constant, written as `"', denotes an undetermined value. 1 For instance, SCR [6]. Although we had recently obtained the earlier technical report on this work [17], we saw the TACAS'97 article <ref> [16] </ref> the day before submitting this abstract. We have not been able to give either article a extensive reading yet. 2 An apology about terminology. The term behavior table arose spontaneously in our research group.
Reference: [17] <author> Sam Owre, John Rushby, and Natarajan Shankar. </author> <title> Analyzing tabular and state-transition specifications in PVS. </title> <type> Technical Report SRI-CSL-95-12, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> July </month> <year> 1995. </year> <note> Revised May 1996. Available, with specification files, from URL http://www.csl.sri.com/csl-95-12.html. </note>
Reference-contexts: The value of a term, t, is written oe [[t]], where oe is an assignment or association of variables to values. A generic don't-care constant, written as `"', denotes an undetermined value. 1 For instance, SCR [6]. Although we had recently obtained the earlier technical report on this work <ref> [17] </ref>, we saw the TACAS'97 article [16] the day before submitting this abstract. We have not been able to give either article a extensive reading yet. 2 An apology about terminology. The term behavior table arose spontaneously in our research group.
Reference: [18] <author> K. Rath, I. Celis, and R. M. Wehrmeister. RTBA: </author> <title> A generic bit-sliced bus architecture for datapath synthesis. </title> <type> Technical Report 321, </type> <institution> Department of Computer Science, Indiana University, </institution> <month> December </month> <year> 1990. </year>
Reference-contexts: This realization prompted us to consider our tables more seriously as a formal design notation, and we began exploring features that are useful in system design applications <ref> [27, 25, 24, 23, 18] </ref>. Other encouraging influences fl This research is supported, in part, by the National Science Foundation under Grant MIP94-02817. Indiana University Technical Report |DRAFT| March 7, 1997 are the emerging tools and techniques for using tables in requirements specification, verification, and synthesis.
Reference: [19] <author> Kamlesh Rath. </author> <title> Sequential System Decomposition. </title> <type> PhD thesis, </type> <institution> Computer Science Department, Indiana University, USA, </institution> <year> 1995. </year> <type> Technical Report No. 457, </type> <pages> 90 pages. </pages>
Reference-contexts: Our notion of system factorization, involving both data abstraction and interface specification, has yet to be fully reflected in behavior tables. The underlying ideas are more general than the example shows, having evolved over several years of research <ref> [19, 21, 26, 29, 20, 28, 22, 9] </ref>. For example, consider a pipelined ALU that takes operands sequentially.
Reference: [20] <author> Kamlesh Rath, Bhaskar Bose, and Steven D. Johnson. </author> <title> Derivation of a DRAM memory interface by sequential decomposition. </title> <booktitle> In Proceedings of the International Conference on Computer Design (ICCD), </booktitle> <pages> pages 438-441. </pages> <note> IEEE, Octo-ber 1993. Also published as Tech Report No. 385, </note> <institution> Computer Science Department, Indiana University. </institution>
Reference-contexts: Our notion of system factorization, involving both data abstraction and interface specification, has yet to be fully reflected in behavior tables. The underlying ideas are more general than the example shows, having evolved over several years of research <ref> [19, 21, 26, 29, 20, 28, 22, 9] </ref>. For example, consider a pipelined ALU that takes operands sequentially.
Reference: [21] <author> Kamlesh Rath, Venkatesh Choppella, and Steven D. Johnson. </author> <title> Decomposition of sequential behavior using interface specification and complementation. </title> <journal> VLSI Design Journal, </journal> <note> 3(3-4):347-358, 1995. In print, special issue on decomposition. </note>
Reference-contexts: Our notion of system factorization, involving both data abstraction and interface specification, has yet to be fully reflected in behavior tables. The underlying ideas are more general than the example shows, having evolved over several years of research <ref> [19, 21, 26, 29, 20, 28, 22, 9] </ref>. For example, consider a pipelined ALU that takes operands sequentially.
Reference: [22] <author> Kamlesh Rath and Steven D. Johnson. </author> <title> Toward a basis for protocol specification and process decomposition. </title> <editor> In D. Agnew, L. Claesen, and R. Camposano, editors, </editor> <booktitle> Proceedings of IFIP Conference on Hardware Description Languages and their Applications, </booktitle> <pages> pages 157-174. </pages> <publisher> Elsevier, </publisher> <month> April </month> <year> 1993. </year> <note> Also published as Technical Report No. 375, </note> <institution> Dept. of Computer Science, Indiana University. </institution> <note> 13 Indiana University Technical Report |DRAFT| March 7, </note> <year> 1997 </year>
Reference-contexts: Our notion of system factorization, involving both data abstraction and interface specification, has yet to be fully reflected in behavior tables. The underlying ideas are more general than the example shows, having evolved over several years of research <ref> [19, 21, 26, 29, 20, 28, 22, 9] </ref>. For example, consider a pipelined ALU that takes operands sequentially.
Reference: [23] <author> Kamlesh Rath, M. Esen Tuna, and Steven D. Johnson. </author> <title> Behavior tables: A basis for system representation and transformational system synthesis. </title> <booktitle> In Proceedings of the International Conference on Computer Aided Design (IC-CAD), </booktitle> <pages> pages 736-740. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1993. </year> <note> Also published as Technical Report 89, </note> <institution> Computer Science Department, Indiana University. </institution>
Reference-contexts: This realization prompted us to consider our tables more seriously as a formal design notation, and we began exploring features that are useful in system design applications <ref> [27, 25, 24, 23, 18] </ref>. Other encouraging influences fl This research is supported, in part, by the National Science Foundation under Grant MIP94-02817. Indiana University Technical Report |DRAFT| March 7, 1997 are the emerging tools and techniques for using tables in requirements specification, verification, and synthesis. <p> We have added syntax for bounded indirection which often significantly reduces the size of behavior tables <ref> [23] </ref> and is novel for hardware description languages. If r is a signal or register, then #r denotes a token referring to r.
Reference: [24] <author> Kamlesh Rath, M. Esen Tuna, and Steven D. Johnson. </author> <title> An introduction to behavior tables. </title> <type> Technical Report 392, </type> <institution> Indiana University Computer Science Department, </institution> <month> December </month> <year> 1993. </year> <note> condensed version published in ICCAD95. </note>
Reference-contexts: This realization prompted us to consider our tables more seriously as a formal design notation, and we began exploring features that are useful in system design applications <ref> [27, 25, 24, 23, 18] </ref>. Other encouraging influences fl This research is supported, in part, by the National Science Foundation under Grant MIP94-02817. Indiana University Technical Report |DRAFT| March 7, 1997 are the emerging tools and techniques for using tables in requirements specification, verification, and synthesis.
Reference: [25] <author> Kamlesh Rath, M. Esen Tuna, and Steven D. Johnson. </author> <title> Specification and synthesis of bounded indirection. </title> <type> Technical Report 398, </type> <institution> Indiana University, Computer Science Department, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: This realization prompted us to consider our tables more seriously as a formal design notation, and we began exploring features that are useful in system design applications <ref> [27, 25, 24, 23, 18] </ref>. Other encouraging influences fl This research is supported, in part, by the National Science Foundation under Grant MIP94-02817. Indiana University Technical Report |DRAFT| March 7, 1997 are the emerging tools and techniques for using tables in requirements specification, verification, and synthesis.
Reference: [26] <author> M. Esen Tuna, Steven D. Johnson, and Bob Burger. </author> <title> Continuations in hardware-software codesign. </title> <booktitle> In Proceedings of the International Conference on Computer Design (ICCD), </booktitle> <pages> pages 264-269. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1994. </year> <note> Also published as Tech Report # 409, </note> <institution> Computer Science Department, Indiana University. </institution>
Reference-contexts: Our notion of system factorization, involving both data abstraction and interface specification, has yet to be fully reflected in behavior tables. The underlying ideas are more general than the example shows, having evolved over several years of research <ref> [19, 21, 26, 29, 20, 28, 22, 9] </ref>. For example, consider a pipelined ALU that takes operands sequentially. <p> In [27] we show how a behavior table describing a bus reduces to one row when indirection is used to specify sources and destinations. In <ref> [26] </ref> we explore control indirection. These features need be incorporated in both the table semantics and the underlying transformation system.
Reference: [27] <author> M. Esen Tuna, Kamlesh Rath, and Steven D. Johnson. </author> <title> Specification and synthesis of bounded indirection. </title> <booktitle> In Proceedings of the Fifth Great Lakes Symposium on VLSI, </booktitle> <pages> pages 86-89. </pages> <publisher> IEEE, </publisher> <month> March </month> <year> 1995. </year>
Reference-contexts: This realization prompted us to consider our tables more seriously as a formal design notation, and we began exploring features that are useful in system design applications <ref> [27, 25, 24, 23, 18] </ref>. Other encouraging influences fl This research is supported, in part, by the National Science Foundation under Grant MIP94-02817. Indiana University Technical Report |DRAFT| March 7, 1997 are the emerging tools and techniques for using tables in requirements specification, verification, and synthesis. <p> If r is a signal or register, then #r denotes a token referring to r. If register s contains such a token, then @s denotes the entity to which s refers; that is, @s j case s of . . . #r: r. . . In <ref> [27] </ref> we show how a behavior table describing a bus reduces to one row when indirection is used to specify sources and destinations. In [26] we explore control indirection. These features need be incorporated in both the table semantics and the underlying transformation system.
Reference: [28] <author> Zheng Zhu and Steven D. Johnson. </author> <title> Automatic synthesis of sequential synchronizations. </title> <editor> In D. Agnew, L. Claesen, and R. Camposano, editors, </editor> <booktitle> Proceedings of IFIP Conference on Hardware Description Languages and their Applications, </booktitle> <pages> pages 285-301. </pages> <publisher> Elsevier, </publisher> <month> April </month> <year> 1993. </year> <note> Also published as Technical Report No. 373, </note> <institution> Dept. of Computer Science, Indiana University. </institution>
Reference-contexts: Our notion of system factorization, involving both data abstraction and interface specification, has yet to be fully reflected in behavior tables. The underlying ideas are more general than the example shows, having evolved over several years of research <ref> [19, 21, 26, 29, 20, 28, 22, 9] </ref>. For example, consider a pipelined ALU that takes operands sequentially.
Reference: [29] <author> Zheng Zhu and Steven D. Johnson. </author> <title> Capturing synchronization specifications for sequential compositions. </title> <booktitle> In Proceedings of the 1994 IEEE International Conference on Computer Design (ICCD 94), </booktitle> <pages> pages 117-121. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1994. </year> <note> Indiana University Technical Report |DRAFT| March 7, </note> <year> 1997 </year>
Reference-contexts: Our notion of system factorization, involving both data abstraction and interface specification, has yet to be fully reflected in behavior tables. The underlying ideas are more general than the example shows, having evolved over several years of research <ref> [19, 21, 26, 29, 20, 28, 22, 9] </ref>. For example, consider a pipelined ALU that takes operands sequentially.
References-found: 29

