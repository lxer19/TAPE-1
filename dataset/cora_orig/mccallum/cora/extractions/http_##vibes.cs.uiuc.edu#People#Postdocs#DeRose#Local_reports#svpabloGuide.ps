URL: http://vibes.cs.uiuc.edu/People/Postdocs/DeRose/Local_reports/svpabloGuide.ps
Refering-URL: http://vibes.cs.uiuc.edu/People/Postdocs/DeRose/pablo_publications.html
Root-URL: http://www.cs.uiuc.edu
Title: SvPablo Guide  
Author: Luiz A. De Rose Ying Zhang Ruth Aydt Mario Pantano 
Note: 1 Supported in part by DARPA contracts DABT63-91-K-0004, DABT63-93-C-0040, DABT63-94-C-0049 (SIO), F30602-96-C-0161, and N66001-97-C-8532, and by NASA contract NAG-1-613 (ICLASS).  
Date: February 13, 1997 Revised April 15, 1997 Revised May 30, 1997 Revised September 1, 1997 Revised December 1, 1997 Revised August 1, 1998  
Web: http://www-pablo.cs.uiuc.edu  
Address: Urbana, Illinois 61801  
Affiliation: Pablo Research Group Department of Computer Science University of Illinois  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Vikram Adve, John Mellor-Crummey, Jhy-Chun Wang, and Daniel Reed. </author> <title> Integrating Compilation and Performance Analysis for Data-Parallel Programs. </title> <booktitle> Proceedings of Supercomputing'95, </booktitle> <month> November </month> <year> 1995. </year>
Reference-contexts: SvPablo is derived from joint work of the Pablo group at the University of Illinois at Urbana-Champaign and the Center for Research in Parallel Computation at Rice University <ref> [1] </ref>. Initial work on F77/F90 integration was done at the Jet Propulsion Laboratory (JPL) from the California Institute of Technology. In addition to the SvPablo graphical visualization and instrumentation tool, the distribution includes various libraries and stand-alone programs that collect runtime performance data and prepare it for viewing using SvPablo. <p> per-process SDDF performance files. void hpf trac term () f int svPabloNumNodes (); int svPabloMyID (); int svPabloTraceFlag = 1; int svPabloFirstEvent = 84; int svPabloLastEvent = 168; int svPabloProcTableSize = 14; main (argc, argv, envp) int argc; char **argv, **envp; f if (argc &gt;= 2) f if (strcmp (argv <ref> [1] </ref>, "-trace") == 0) f svPabloTraceFlag = 1; argc--; argv [1] = argv [0]; argv++; g else if (strcmp (argv [1], "-notrace") == 0) f svPabloTraceFlag = 0; argc--; argv [1] = argv [0]; argv++; g svPablo Init (argc, argv ); main (); svPablo Finalize ( ); g 80 g D.2 <p> int svPabloNumNodes (); int svPabloMyID (); int svPabloTraceFlag = 1; int svPabloFirstEvent = 84; int svPabloLastEvent = 168; int svPabloProcTableSize = 14; main (argc, argv, envp) int argc; char **argv, **envp; f if (argc &gt;= 2) f if (strcmp (argv <ref> [1] </ref>, "-trace") == 0) f svPabloTraceFlag = 1; argc--; argv [1] = argv [0]; argv++; g else if (strcmp (argv [1], "-notrace") == 0) f svPabloTraceFlag = 0; argc--; argv [1] = argv [0]; argv++; g svPablo Init (argc, argv ); main (); svPablo Finalize ( ); g 80 g D.2 C and Fortran Data Capture Library As opposed to the <p> int svPabloFirstEvent = 84; int svPabloLastEvent = 168; int svPabloProcTableSize = 14; main (argc, argv, envp) int argc; char **argv, **envp; f if (argc &gt;= 2) f if (strcmp (argv <ref> [1] </ref>, "-trace") == 0) f svPabloTraceFlag = 1; argc--; argv [1] = argv [0]; argv++; g else if (strcmp (argv [1], "-notrace") == 0) f svPabloTraceFlag = 0; argc--; argv [1] = argv [0]; argv++; g svPablo Init (argc, argv ); main (); svPablo Finalize ( ); g 80 g D.2 C and Fortran Data Capture Library As opposed to the HPF instrumentation, the C and Fortran codes instrumentation is performed <p> = 14; main (argc, argv, envp) int argc; char **argv, **envp; f if (argc &gt;= 2) f if (strcmp (argv <ref> [1] </ref>, "-trace") == 0) f svPabloTraceFlag = 1; argc--; argv [1] = argv [0]; argv++; g else if (strcmp (argv [1], "-notrace") == 0) f svPabloTraceFlag = 0; argc--; argv [1] = argv [0]; argv++; g svPablo Init (argc, argv ); main (); svPablo Finalize ( ); g 80 g D.2 C and Fortran Data Capture Library As opposed to the HPF instrumentation, the C and Fortran codes instrumentation is performed by generating instrumented files that are copies of the original
Reference: [2] <author> Ruth Aydt. </author> <title> The Pablo Self-Defining Data Format. </title> <type> Technical report, </type> <institution> Department of Computer Science at the University of Illinois at Urbana-Champaign, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: In this case, all subroutines and the outer loops are instrumented. Performance browsing is accomplished by correlating the performance data gathered at run-time with the source code, performing statistical analyses, and creating a performance file. This performance file, stored in the Pablo Self-Defining Data Format (SDDF) <ref> [2] </ref>, is used as input to the SvPablo tool which presents the performance information as it relates to the original source code. This document is a combined user guide and reference manual.
Reference: [3] <institution> MIPS Technologies Inc. Definition of MIPS R10000 Performance Counters, </institution> <year> 1996. </year> <note> http://www.sgi.com/MIPS/products/r10k/Perf Cnt/R10K PF Count.doc.html. </note>
Reference-contexts: computes the duration of the loop and increments its timer and counter. void svPabloLoopEnd ( EventID ) int EventID; /* Event ID */ f 82 83 E Using the MIPS R10000 Hardware Performance Counters The SvPablo data capture library supports the use of the MIPS R10000 (R10K) hardware performance counters <ref> [4, 3] </ref> to allow the visualization of hardware events on the SGI Power Challenge, the SGI Origin 2000, and other architectures that use the MIPS R10K processor.
Reference: [4] <institution> MIPS Technologies Inc. </institution> <note> R10000 Microprocessor User's Manual, version 2.0 edition, </note> <month> October </month> <year> 1996. </year>
Reference-contexts: computes the duration of the loop and increments its timer and counter. void svPabloLoopEnd ( EventID ) int EventID; /* Event ID */ f 82 83 E Using the MIPS R10000 Hardware Performance Counters The SvPablo data capture library supports the use of the MIPS R10000 (R10K) hardware performance counters <ref> [4, 3] </ref> to allow the visualization of hardware events on the SGI Power Challenge, the SGI Origin 2000, and other architectures that use the MIPS R10K processor.
Reference: [5] <institution> The Portland Group, Inc. </institution> <note> PGHPF User's Guide, 1994. 91 </note>
Reference-contexts: The current release supports programs written in Fortran 77 (F77), Fortran 90 (F90) 2 , ANSI C (C), and High Performance Fortran (HPF) (when compiled with the Portland Group HPF compiler (pghpf ) <ref> [5] </ref>). SvPablo is derived from joint work of the Pablo group at the University of Illinois at Urbana-Champaign and the Center for Research in Parallel Computation at Rice University [1]. Initial work on F77/F90 integration was done at the Jet Propulsion Laboratory (JPL) from the California Institute of Technology. <p> The source code for the HPF data capture library is provided in the SvPablo directory "Src/Programs" and consists of the following files: * pghpf2SDDF.c * pghpf2SDDF.h * hpf dsSDDF.h For more information on compiling, linking, and running HPF programs, see the PGHPF User's Guide <ref> [5] </ref>. 4.2 Notes on Instrumentation Overhead and How to Reduce It As mentioned above, the HPF instrumentation is done automatically by the compiler for every line and function that is executed. This automatic instrumentation will create an overhead that is dependent on programming style. <p> Hence, the graphical performance browser knows that the record descriptor will not contain the seven data fields with the trace data from each process and the corresponding statistics. 68 "Event Statistics Configuration" f <ref> [5] </ref> f "SEND" g, "Statistics by Line" g, "Message Send Duration" g, "Send Mesg Duration" g, "Message Send Statistics" g, "SendMesgSeconds" g g;; C.2 Procedure Statistics Fields within procedure statistics records are divided into optional and mandatory categories. <p> Min"; int "IncSeconds Min Node"; double "IncSeconds Mean"; double "IncSeconds Std Dev"; // "ExcSeconds" "Execution time excluding calls to other functions" double "ExcSeconds"[]; double "ExcSeconds Max"; int "ExcSeconds Max Node"; double "ExcSeconds Min"; int "ExcSeconds Min Node"; double "ExcSeconds Mean"; double "ExcSeconds Std Dev"; g;; 70 "Event Statistics Configuration" f <ref> [5] </ref> f "CALL" g, "SPECIAL" g, "NONE" g, "NONE" g, "Function Call Statistics" g, "Called Procedure" g g;; The Procedure Statistics Configuration data records are used to define the optional fields in the Procedure Statistics record descriptor, similar to the event statistics records described in xC.1.
References-found: 5

