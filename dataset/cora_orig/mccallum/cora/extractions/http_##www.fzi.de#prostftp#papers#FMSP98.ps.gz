URL: http://www.fzi.de/prostftp/papers/FMSP98.ps.gz
Refering-URL: http://www.fzi.de/prost/people/melcher.html
Root-URL: http://www.fzi.de
Email: email: melcher@fzi.de  
Phone: +49 721 9654 610  
Title: Controller Synthesis for the Production Cell Case Study  
Author: Helmut Melcher 
Address: Haid-und-Neu-Str. 10-14 D-76131 Karlsruhe, Germany  
Affiliation: Forschungszentrum Informatik Department of Software Engineering  
Abstract: 1. ABSTRACT 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alur, Th. A. Henzinger, and O. Kupferman. </author> <title> Alter nating-time temporal logic. </title> <booktitle> In COMPOS 97 - International Symposium on Compositionality, </booktitle> <address> Kiel, Malente, </address> <month> September </month> <year> 1997. </year> <note> to appear also in FOCS 97. </note>
Reference-contexts: Thomas [15] describes the algorithms for synthesis in a context of games played over Bchi automata, covering a very general class of liveness properties and giving in-deep results about the theoretical complexity. In the game view, uncontrollable actions are viewed as the opponents moves. More recently, Alur et al. <ref> [1] </ref> introduced alternating-time temporal logics (ATL) as a general framework for reasoning about open systems.
Reference: [2] <author> E. Asarin, O. Maler, and A. Pnueli. </author> <title> Symbolic controller synthesis for discrete and timed systems. </title> <booktitle> volume 999 of Lecture Notes in Computer Science, </booktitle> <pages> pages 120, </pages> <year> 1995. </year>
Reference-contexts: The concept of controllable and uncontrollable events has its counterpart in CSLxt as controllable (output) and uncontrollable (input) variables. In Maler, Pnueli and Sifakis [11] and Asarin, Maler and Pnueli <ref> [2] </ref> essentially the same approach as single-BDD based CSLxt is used, using a controllable predecessor operator as the core of the algorithm. <p> Safety and liveness requirements are then imposed on the specification by using the well-known fix-point iterations for the temporal operators (diamond, box and their combinations) - in the same way as used by CSLxt. Whereas the papers of Maler, Pnueli and Sifakis [11] and Asarin, Maler and Pnueli <ref> [2] </ref> have the same notion of controllability as CSLxt, the papers of Manna and Wolper [12] and Clarke and Emerson [5] lack any notion of controllability. In their approach, a specification is given as an (implicit) conjunction of temporal logic formulas.
Reference: [3] <author> Balemi et al. </author> <title> Supervisory control of a rapid thermal multiprocessor. </title> <journal> IEEE Transactions on Automatic Con trol, </journal> <volume> 38(7):10401059, </volume> <year> 1993. </year>
Reference-contexts: We are only aware of one paper of Thistle and Wonham [14] addressing infinite systems. Finally, the DES algorithms are typically implemented in a direct (non-symbolic) representation, with the notable exceptions of the papers of Hoffman and Wong-Toi [7] and Balemi et al. <ref> [3] </ref>. The concept of controllable and uncontrollable events has its counterpart in CSLxt as controllable (output) and uncontrollable (input) variables.
Reference: [4] <editor> Manfred Broy and Stefan Jhnichen, editors. </editor> <booktitle> Korrekte Software durch formale Methoden. </booktitle> <address> Technische Univer sitt Berlin, Franklinstrae 2829, D-10587 Berlin, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: Therefore, we have chosen the case study to demonstrate the application of Controller Synthesis and the capabilities of CSLxt and the CSLxt compiler. The original version of the case study [8, 9] was developed at the Forschungszentrum Informatik (FZI) in the KorSo project <ref> [4] </ref>. Our work is based on a more recent version, which was designed in the context of the KorSys project [10]. The task consists of developing provably correct control software for an industrial production cell of a metal-processing plant. Figure 3 shows the architecture of the cell.
Reference: [5] <author> E. M. Clarke and E. A. Emerson. </author> <title> Design and synthesis of synchronization skeletons using branching time tem poral logic. </title> <booktitle> In Proc. Workshop on Logics of Programs, volume 131 of Lecture Notes in Computer Science, </booktitle> <pages> pages 5271, </pages> <address> Berlin, 1981. </address> <publisher> Springer. </publisher>
Reference-contexts: Whereas the papers of Maler, Pnueli and Sifakis [11] and Asarin, Maler and Pnueli [2] have the same notion of controllability as CSLxt, the papers of Manna and Wolper [12] and Clarke and Emerson <ref> [5] </ref> lack any notion of controllability. In their approach, a specification is given as an (implicit) conjunction of temporal logic formulas. A model of this specification is built by a tableau construction. Rather than synthesizing a complete controller, they focus on the synchronization part of a distributed system.
Reference: [6] <author> Nicolas Halbwachs. </author> <title> Synchronous Programming Of Reactive Systems. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Dor drecht, Boston, London, </address> <year> 1993. </year>
Reference-contexts: CSLxt was developed by Siemens corporate research. In the following sections, we describe the language, the underlying synthesis algorithm and our contribution to the Case Study Production Cell. 5.1 The language CSLxt Communication and synchronity CSLxt is a synchronous language <ref> [6] </ref>. The behavior of the controller and its environment is described by means of processes, which all take part in a global synchronous step. The assumption is that communication between processes happens in zero-time. Instantaneous communication loops are only allowed within the environment and the controller and not between them.
Reference: [7] <author> Hoffmann and Wong-Toi. </author> <title> Symbolic synthesis of super visory controllers. </title> <booktitle> In Proceedings of the American Control Conference, </booktitle> <pages> pages 27892793, </pages> <address> IL, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: We are only aware of one paper of Thistle and Wonham [14] addressing infinite systems. Finally, the DES algorithms are typically implemented in a direct (non-symbolic) representation, with the notable exceptions of the papers of Hoffman and Wong-Toi <ref> [7] </ref> and Balemi et al. [3]. The concept of controllable and uncontrollable events has its counterpart in CSLxt as controllable (output) and uncontrollable (input) variables.
Reference: [8] <author> Claus Lewerentz and Thomas Lindner, </author> <title> editors. Case Study Production Cell, </title> <booktitle> volume 1/94 of FZI-Publica tions. </booktitle> <year> 1994. </year>
Reference-contexts: Therefore, we have chosen the case study to demonstrate the application of Controller Synthesis and the capabilities of CSLxt and the CSLxt compiler. The original version of the case study <ref> [8, 9] </ref> was developed at the Forschungszentrum Informatik (FZI) in the KorSo project [4]. Our work is based on a more recent version, which was designed in the context of the KorSys project [10].
Reference: [9] <author> Claus Lewerentz and Thomas Lindner, </author> <title> editors. Case Study Production Cell: A Comparative Study in For mal Specification and Verification, </title> <booktitle> volume 891 of Lec ture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Therefore, we have chosen the case study to demonstrate the application of Controller Synthesis and the capabilities of CSLxt and the CSLxt compiler. The original version of the case study <ref> [8, 9] </ref> was developed at the Forschungszentrum Informatik (FZI) in the KorSo project [4]. Our work is based on a more recent version, which was designed in the context of the KorSys project [10].
Reference: [10] <author> Annette Ltzbeyer. Aufgabenstellung einer fehlertoler-anten fertigungszelle, </author> <month> January </month> <year> 1996. </year> <note> http://www.fzi.de/ loetzbeyer.html. </note>
Reference-contexts: The original version of the case study [8, 9] was developed at the Forschungszentrum Informatik (FZI) in the KorSo project [4]. Our work is based on a more recent version, which was designed in the context of the KorSys project <ref> [10] </ref>. The task consists of developing provably correct control software for an industrial production cell of a metal-processing plant. Figure 3 shows the architecture of the cell. On the bottom left, the feed belt which conveys metal plates to an elevating rotary table is shown.
Reference: [11] <author> O. Maler, A. Pnueli, and J. Sifakis. </author> <title> On the synthesis of discrete controllers for timed systems. </title> <editor> In E. W. Mayr and C. Puech, editors, </editor> <booktitle> Proceedings STACS95, volume 900 of Lecture Notes in Computer Science, </booktitle> <pages> pages 229 242. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: The concept of controllable and uncontrollable events has its counterpart in CSLxt as controllable (output) and uncontrollable (input) variables. In Maler, Pnueli and Sifakis <ref> [11] </ref> and Asarin, Maler and Pnueli [2] essentially the same approach as single-BDD based CSLxt is used, using a controllable predecessor operator as the core of the algorithm. <p> Safety and liveness requirements are then imposed on the specification by using the well-known fix-point iterations for the temporal operators (diamond, box and their combinations) - in the same way as used by CSLxt. Whereas the papers of Maler, Pnueli and Sifakis <ref> [11] </ref> and Asarin, Maler and Pnueli [2] have the same notion of controllability as CSLxt, the papers of Manna and Wolper [12] and Clarke and Emerson [5] lack any notion of controllability. In their approach, a specification is given as an (implicit) conjunction of temporal logic formulas.
Reference: [12] <author> Zohar Manna and Pierre Wolper. </author> <title> Synthesis of commu nicating processes from temporal logic specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 6(1):6893, </volume> <month> January </month> <year> 1984. </year>
Reference-contexts: Whereas the papers of Maler, Pnueli and Sifakis [11] and Asarin, Maler and Pnueli [2] have the same notion of controllability as CSLxt, the papers of Manna and Wolper <ref> [12] </ref> and Clarke and Emerson [5] lack any notion of controllability. In their approach, a specification is given as an (implicit) conjunction of temporal logic formulas. A model of this specification is built by a tableau construction.
Reference: [13] <author> P.J. Ramadge and W.M. Wonham. </author> <title> The control of dis crete event systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 77(1), </volume> <month> January </month> <year> 1989. </year>
Reference-contexts: A more elaborate form of assumption-commitment reasoning can also be applied to deal with large, distributed systems. 6.3 Related work The field of synthesizing reactive systems comprises contributions from both control theory and computer science. From Control Theory, discrete event systems (DES, as in Ramadge and Wonham <ref> [13] </ref> ) is the prevailing paradigm. They differ from CSLxt by emphasizing the sequence of events rather than the state of variables. Also they focus on finite behavior, which leads to a simpler class of liveness properties which can be dealt with.
Reference: [14] <author> Thistle and Wonham. </author> <title> Supervision of infinite behaviour of discrete-event systems. </title> <journal> SIAM Journal on Control and Optimization, </journal> <volume> 32(4):10981113, </volume> <month> July </month> <year> 1994. </year>
Reference-contexts: They differ from CSLxt by emphasizing the sequence of events rather than the state of variables. Also they focus on finite behavior, which leads to a simpler class of liveness properties which can be dealt with. We are only aware of one paper of Thistle and Wonham <ref> [14] </ref> addressing infinite systems. Finally, the DES algorithms are typically implemented in a direct (non-symbolic) representation, with the notable exceptions of the papers of Hoffman and Wong-Toi [7] and Balemi et al. [3].
Reference: [15] <author> Wolfgang Thomas. </author> <title> On the synthesis of strategies in infinite games. </title> <booktitle> In 12th Annual Symposium on Theoretical Aspects of Computer Science, volume 900 of LNCS, </booktitle> <pages> pages 113, </pages> <address> Munich, Germany, March 1995. </address> <publisher> Springer. </publisher>
Reference-contexts: In their approach, a specification is given as an (implicit) conjunction of temporal logic formulas. A model of this specification is built by a tableau construction. Rather than synthesizing a complete controller, they focus on the synchronization part of a distributed system. Thomas <ref> [15] </ref> describes the algorithms for synthesis in a context of games played over Bchi automata, covering a very general class of liveness properties and giving in-deep results about the theoretical complexity. In the game view, uncontrollable actions are viewed as the opponents moves.
Reference: [16] <author> Klaus Winkelmann. </author> <title> Verfahren zur automatischen Erzeugung einer Steuerung. German patent application no. GR 94E1475DE, </title> <month> May 17 </month> <year> 1994. </year>
Reference-contexts: If the compilation produces no error message, and if the environment behaves as specified, the generated controller is guaranteed by construction to satisfy the required properties. The algorithm is protected by international patents and was first described in <ref> [16] </ref>. We present here the details of the fixpoint iteration for safety: Notations Let x denote the vector of output and internal variables (i.e. controllable variables), y denote the vector of input variables (controlled by the environment), x and y denote the corresponding next state vectors.
References-found: 16

