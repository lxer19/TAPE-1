URL: http://www.cs.bu.edu/techreports/97-010-accord-cacm.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: s.nagy@opengroup.org best@cs.bu.edu  
Title: Concurrency Admission Control Management in ACCORD  
Author: Sue Nagy Azer Bestavros 
Note: This work has been partially supported by NSF (grant CCR-9706685). This work was conducted as part of the author's Ph.D. thesis at Boston University.  
Address: Cambridge, MA 02142 Boston, MA 02215  
Affiliation: The Open Group Computer Science Department Research Institute Boston University  
Abstract: We propose and evaluate admission control mechanisms for ACCORD, an Admission Control and Capacity Overload management Real-time Database framework|an architecture and a transaction model|for hard deadline RTDB systems. The system architecture consists of admission control and scheduling components which provide early notification of failure to submitted transactions that are deemed not valuable or incapable of completing on time. In particular, our Concurrency Admission Control Manager (CACM) ensures that transactions which are admitted do not overburden the system by requiring a level of concurrency that is not sustainable. The transaction model consists of two components: a primary task and a compensating task. The execution requirements of the primary task are not known a priori, whereas those of the compensating task are known a priori. Upon the submission of a transaction, the Admission Control Mechanisms are employed to decide whether to admit or reject that transaction. Once admitted, a transaction is guaranteed to finish executing before its deadline. A transaction is considered to have finished executing if exactly one of two things occur: Either its primary task is completed (successful commitment), or its compensating task is completed (safe termination). Committed transactions bring a profit to the system, whereas a terminated transaction brings no profit. The goal of the admission control and scheduling protocols (e.g., concurrency control, I/O scheduling, memory management) employed in the system is to maximize system profit. In that respect, we describe a number of concurrency admission control strategies and contrast (through simulations) their relative performance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Abbott and H. Garcia-Molina. </author> <title> Scheduling real-time transaction: A performance evaluation. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 17(3) </volume> <pages> 513-560, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: The priority of a transaction, which in continuously evaluated <ref> [1] </ref>, is based upon the expected value of the transaction at its completion time rather than on the current time.
Reference: [2] <author> Robert Abbott and Hector Garcia-Molina. </author> <title> Scheduling real-time transactions. </title> <journal> ACM, SIGMOD Record, </journal> <volume> 17(1) </volume> <pages> 71-81, </pages> <year> 1988. </year>
Reference-contexts: The notions of transaction values and value functions [22, 28], used to express the value that a transaction has to the system as a function of time, have been utilized in both RTS [10, 11] as well as in RTDB systems <ref> [2, 8, 19, 21, 37, 40] </ref>. In [10, 11], the value of a task is evaluated during the admission control process. The decision to reject a task or remove a previously guaranteed task is based upon tasks' values. <p> In the context of RTDB systems, Huang et al. [21], continuing with the work of [37], use transactions' values to schedule system resources (e.g., CPU) and in conflict resolution protocols in a soft real-time environment. Abbott and Garcia-Molina <ref> [2] </ref> also employ transactions' values to assign priorities to transactions for scheduling system resources in a soft RTDB system. Extending their AED scheduling algorithm to be value-cognizant, Haritsa et al. [19], developed Hierarchical Earliest Deadline (HED) for a firm RTDB system. All of the aforementioned research (with the exception of [2] <p> <ref> [2] </ref> also employ transactions' values to assign priorities to transactions for scheduling system resources in a soft RTDB system. Extending their AED scheduling algorithm to be value-cognizant, Haritsa et al. [19], developed Hierarchical Earliest Deadline (HED) for a firm RTDB system. All of the aforementioned research (with the exception of [2] which does not have any performance results) make use of transactions' values which are time-invariant. A different approach is taken by Bestavros and Braoudakis [8] and Tseng et al. [40].
Reference: [3] <author> Robert Abbott and Hector Garcia-Molina. </author> <title> Scheduling real-time transactions: A performance evaluation. </title> <booktitle> In Proceedings of the 14th International Conference on Very Large Data Bases, </booktitle> <pages> pages 1-12, </pages> <address> Los Angeles, Ca, </address> <year> 1988. </year>
Reference-contexts: In this paper we study our admission control mechanism in conjunction with two types of concurrency control protocols, namely Optimistic Concurrency Control with forward validation (such as OCC-BC [29] or SCC-nS [7]), or Pessimistic Concurrency Control (PCC) with Priority Abort (such as 2PL-PA <ref> [3] </ref>). 2.1 Workload Admission Control Manager The source contains a set of transactions which are generated off-line. Each enters the system at a random time and is first processed by the ACM. <p> Real-time variants of 2PL have been suggested. One such variant is 2PL High Priority (2PL-HP) <ref> [3] </ref> which augments 2PL with a priority-based conflict resolution mechanism. A higher priority, lock requesting transaction aborts and restarts all lower priority, lock holding transactions which have a lock on the desired object in a conflicting lock mode.
Reference: [4] <author> N. Audsley, A. Burns, M. Richardson, and A. Wellings. </author> <title> A database model for hard real-time systems. </title> <type> Technical report, </type> <institution> Real-Time Systems Group, University of York,, U.K., </institution> <year> 1991. </year>
Reference-contexts: The restart of a transaction due to the validation of another does not necessarily imply the materialization of a potential conflict. Due to their non-blocking behavior, optimistic concurrency control techniques, such as OCC-BC, are better able to guarantee both absolute and relative consistency <ref> [4, 35] </ref> requirements.
Reference: [5] <author> N. C. Audsley, R. I. Davis, and A. Burns. </author> <title> Mechanisms for enhancing the flexibility and utility of hard real-time systems. </title> <booktitle> In Proceedings of the Real-Time Systems Symposium, </booktitle> <pages> pages 12-21, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: These are contrasted to our model below. Liu et al. [27] developed the imprecise computation model which decomposes each task 18 into two subtasks, a mandatory part and an optional part. Others employing this model include Audsley et al. <ref> [5] </ref> and Davis et al. [14]. Our model differs from the imprecise computation model in that the WCET requirements for the mandatory and optional parts are assumed in [27, 5, 14], whereas they are assumed only for the compensating tasks in our model. <p> Others employing this model include Audsley et al. [5] and Davis et al. [14]. Our model differs from the imprecise computation model in that the WCET requirements for the mandatory and optional parts are assumed in <ref> [27, 5, 14] </ref>, whereas they are assumed only for the compensating tasks in our model. Also, unlike the imprecise computation model, we start off with the execution of the optional component (the primary task), leaving the mandatory component (the compensating task) to a later time (if needed).
Reference: [6] <author> B. R. Badrinath and Krithi Ramamritham. </author> <title> Semantics-based concurrency control: Beyond commuta-tivity. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 17(1) </volume> <pages> 163-199, </pages> <month> March </month> <year> 1992. </year> <month> 22 </month>
Reference-contexts: conflicting operations are: * write (T i ; X), read (T j ; X): Read After Write (RAW) * read (T i ; X), write (T j ; X): Write After Read (WAR) * write (T i ; X), write (T j ; X): Write After Write (WAW) Other research <ref> [6, 41, 36] </ref> has considered semantic-based concurrency control whereby semantic information on database operations is exploited to enhance the degree of concurrency. Objects such as stacks and queues with operations of push, pop, top and enqueue, dequeue, respectively, are typical.
Reference: [7] <author> Azer Bestavros and Spyridon Braoudakis. </author> <title> Timeliness via speculation for real-time databases. </title> <booktitle> In Pro--ceedings of RTSS'94: The 14 th IEEE Real-Time System Symposium, </booktitle> <address> San Juan, Puerto Rico, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: Notice that this 2-tier priority assumption still allows primary tasks (compensating tasks) to be prioritized amongst themselves. In this paper we study our admission control mechanism in conjunction with two types of concurrency control protocols, namely Optimistic Concurrency Control with forward validation (such as OCC-BC [29] or SCC-nS <ref> [7] </ref>), or Pessimistic Concurrency Control (PCC) with Priority Abort (such as 2PL-PA [3]). 2.1 Workload Admission Control Manager The source contains a set of transactions which are generated off-line. Each enters the system at a random time and is first processed by the ACM.
Reference: [8] <author> Azer Bestavros and Spyridon Braoudakis. </author> <title> Value-cognizant speculative concurrency control. </title> <booktitle> In Proceedings of VLDB'95: The International Conference on Very Large Databases, </booktitle> <address> Zurich, Switzerland, </address> <month> Spetember </month> <year> 1995. </year>
Reference-contexts: The notions of transaction values and value functions [22, 28], used to express the value that a transaction has to the system as a function of time, have been utilized in both RTS [10, 11] as well as in RTDB systems <ref> [2, 8, 19, 21, 37, 40] </ref>. In [10, 11], the value of a task is evaluated during the admission control process. The decision to reject a task or remove a previously guaranteed task is based upon tasks' values. <p> All of the aforementioned research (with the exception of [2] which does not have any performance results) make use of transactions' values which are time-invariant. A different approach is taken by Bestavros and Braoudakis <ref> [8] </ref> and Tseng et al. [40]. In [8] each transaction is characterized by a time-variant value function which is used to specify both the nature of the timing constraint (i.e. no deadline, hard, soft, or firm deadline) as well as the transaction's importance to the system relative to other transactions. <p> All of the aforementioned research (with the exception of [2] which does not have any performance results) make use of transactions' values which are time-invariant. A different approach is taken by Bestavros and Braoudakis <ref> [8] </ref> and Tseng et al. [40]. In [8] each transaction is characterized by a time-variant value function which is used to specify both the nature of the timing constraint (i.e. no deadline, hard, soft, or firm deadline) as well as the transaction's importance to the system relative to other transactions. <p> Transactions which commit by their deadlines return their full value to the system while those that commit past their deadlines return a diminished value, a value specified by the transaction's associated value function. Value functions are specifically used in <ref> [8] </ref> in order to determine whether it is advantageous to delay the commitment of a transaction which has finished its execution, i.e. Will the commitment of this transaction return more profit to the system if it is committed now or delayed to a later point in time? Like [8], Tseng et <p> used in <ref> [8] </ref> in order to determine whether it is advantageous to delay the commitment of a transaction which has finished its execution, i.e. Will the commitment of this transaction return more profit to the system if it is committed now or delayed to a later point in time? Like [8], Tseng et al. use time-variant value functions in their Highest Reward First (HRF) scheduling algorithm for a firm RTDB System. The priority of a transaction, which in continuously evaluated [1], is based upon the expected value of the transaction at its completion time rather than on the current time.
Reference: [9] <author> Azer Bestavros and Sue Nagy. </author> <title> Value-cognizant admission control for rtdb systems. </title> <booktitle> In RTSS'96: The 17th Real-Time Systems Symposium, </booktitle> <pages> pages 230-239, </pages> <address> Washington, D.C., </address> <month> December </month> <year> 1996. </year>
Reference-contexts: Even if the current demand on the system's resources is low, a transaction is rejected if it is not feasible to schedule its compensating task (e.g., it cannot be accommodated in the CTQ). Details regarding the WACM can be found in <ref> [9] </ref>. 2.2 Concurrency Admission Control Manager In order to ensure that compensating tasks can execute unhindered (and thus complete within their WCETs) the CACM must guarantee that the admission of a transaction into the system does not result in data conflicts between the compensating task of that transaction and other already <p> whether finished or rejected, are removed from the system and sent to the sink which generates statistical information used to evaluate the system performance. 5 This condition is true in any uniprocessor system where compensating tasks cannot be preempted. 6 3 Optimizing Profit through ACM 3.1 Introduction As described in <ref> [9] </ref>, the motivation for employing an admission control mechanism, especially in situations of overload, is to allocate system resources, such as the CPU, wisely, i.e. <p> We restrict our attention to the case where CT S and CT A are equal. Each transaction which successfully passes through the CACM is admitted to the system provided that its compensating task can be scheduled according to Latest Fit (LF) scheduling 13 technique (see <ref> [9] </ref> for details). Those transactions failing the CACM test are rejected from the system. The aforementioned CACM procedure does not take into consideration transactions' values when making admission control and scheduling decisions.
Reference: [10] <author> Sara Biyabani, John Stankovic, and Krithi Ramamritham. </author> <title> The integration of deadline and criticalness in hard real-time scheduling. </title> <booktitle> In Proceedings of the 9th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1988. </year>
Reference-contexts: In such systems, the performance objective becomes that of maximizing the system profit. The notions of transaction values and value functions [22, 28], used to express the value that a transaction has to the system as a function of time, have been utilized in both RTS <ref> [10, 11] </ref> as well as in RTDB systems [2, 8, 19, 21, 37, 40]. In [10, 11], the value of a task is evaluated during the admission control process. The decision to reject a task or remove a previously guaranteed task is based upon tasks' values. <p> The notions of transaction values and value functions [22, 28], used to express the value that a transaction has to the system as a function of time, have been utilized in both RTS <ref> [10, 11] </ref> as well as in RTDB systems [2, 8, 19, 21, 37, 40]. In [10, 11], the value of a task is evaluated during the admission control process. The decision to reject a task or remove a previously guaranteed task is based upon tasks' values.
Reference: [11] <author> G. Buttazzo, M. Spuri, and F. Sensini. </author> <title> Value vs. deadline scheduling in overload conditions. </title> <booktitle> In Proceedings of the 16th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: In such systems, the performance objective becomes that of maximizing the system profit. The notions of transaction values and value functions [22, 28], used to express the value that a transaction has to the system as a function of time, have been utilized in both RTS <ref> [10, 11] </ref> as well as in RTDB systems [2, 8, 19, 21, 37, 40]. In [10, 11], the value of a task is evaluated during the admission control process. The decision to reject a task or remove a previously guaranteed task is based upon tasks' values. <p> The notions of transaction values and value functions [22, 28], used to express the value that a transaction has to the system as a function of time, have been utilized in both RTS <ref> [10, 11] </ref> as well as in RTDB systems [2, 8, 19, 21, 37, 40]. In [10, 11], the value of a task is evaluated during the admission control process. The decision to reject a task or remove a previously guaranteed task is based upon tasks' values.
Reference: [12] <author> S. Chakravarthy, D. Hong, and T. Johnson. </author> <title> Incorporating load factor into the scheduling of soft real-time transactions. </title> <type> Technical Report TR94-024, </type> <institution> University of Florida, Department of Computer and Information Science, </institution> <year> 1994. </year>
Reference-contexts: CCA takes into account both static (i.e. deadline) and dynamic (i.e. effective service time, restart cost) aspects of a transaction's execution when dynamically computing the priority of a transaction. Chakravarthy et al. <ref> [12] </ref> extend CCA to adapt to the system load| CCA-ALF|Cost Conscious Approach with Average Load Factor. Like CCA, CCA-ALF uses both static and dynamic information in calculating the priority of a transaction.
Reference: [13] <author> H. Chetto and M. Chetto. </author> <title> Some results of the earliest deadline scheduling algorithm. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(10) </volume> <pages> 1261-1269, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: A number of papers have employed the primary / alternative model in which the primary task provides good quality of service and is preferable to the alternative which produces an acceptable quality of service. Alternatives handle timing faults in <ref> [25, 13] </ref> and processor failures in [30, 32, 23]. Our notion of a compensating task is indeed similar to that of an alternative; execution of a compensating task provides less attractive quality of service in comparison to the execution of the primary task. The similarities end here, however.
Reference: [14] <author> R. I. Davis, S. Punnekkat, N. Audsley, and A. Burns. </author> <title> Flexible scheduling for adaptable real-time systems. </title> <booktitle> In Proceedings of the Real-Time Technology and Applications Symposium, </booktitle> <pages> pages 230-239, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: These are contrasted to our model below. Liu et al. [27] developed the imprecise computation model which decomposes each task 18 into two subtasks, a mandatory part and an optional part. Others employing this model include Audsley et al. [5] and Davis et al. <ref> [14] </ref>. Our model differs from the imprecise computation model in that the WCET requirements for the mandatory and optional parts are assumed in [27, 5, 14], whereas they are assumed only for the compensating tasks in our model. <p> Others employing this model include Audsley et al. [5] and Davis et al. [14]. Our model differs from the imprecise computation model in that the WCET requirements for the mandatory and optional parts are assumed in <ref> [27, 5, 14] </ref>, whereas they are assumed only for the compensating tasks in our model. Also, unlike the imprecise computation model, we start off with the execution of the optional component (the primary task), leaving the mandatory component (the compensating task) to a later time (if needed).
Reference: [15] <author> M. L. Dertouzos. </author> <title> Control robotics: The procedural control of physical processes. </title> <booktitle> In Proceedings IFIP Congress, </booktitle> <pages> pages 807-813, </pages> <year> 1974. </year>
Reference-contexts: Since all tasks in the PTQ are ready to execute, a scheduling algorithm must be used to apportion the CPU time amongst these tasks. We use the Earliest Deadline First algorithm (EDF) [26], which is optimal for a uniprocessor system with independent, preemptible tasks having arbitrary deadlines <ref> [15] </ref>. The CTQ is organized as a series of slots, one for each compensating task. Each slot contains the compensating task id as well as its start and end times. Slots are order according to ascending start time.
Reference: [16] <author> K. P. Eswaran, J. N. Gray, R. A. Lorie, and I. L. Traiger. </author> <title> The notions of consistency and predicate locks in a database system. </title> <journal> Communications of the ACM, </journal> 19(11) 624-633, November 1976. 
Reference-contexts: We review two types of concurrency control protocols: pessimistic and optimistic. 3.2.1 Pessimistic Concurrency Control (PCC) With pessimistic concurrency control techniques, such as 2PL <ref> [16] </ref>, conflicts never materialize since potential conflicts are avoided by blocking transactions.
Reference: [17] <author> B. Goyal, J. Haritsa, S. Seshadri, and V. Srinivasan. </author> <title> Index concurrency control in firm real-time dbms. </title> <booktitle> In Proceedings of the 21st VLDB Conference, </booktitle> <pages> pages 146-157, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: Admission control protocols and feedback mechanisms have been employed in a variety of RTDB system components: transaction scheduling [19, 20], memory allocation for queries [33], and B-tree index concurrency control <ref> [17] </ref>. Haritsa et al. [19] incorporate a feedback mechanism into an Adaptive Earliest Deadline (AED) and Hierarchical Earliest Deadline (HED) scheduling strategies for transactions in a firm deadline environment. Both AED and HED attempt to stabilize the overload performance of EDF. Goyal et al. [17] describe an approach that allows transactions <p> [33], and B-tree index concurrency control <ref> [17] </ref>. Haritsa et al. [19] incorporate a feedback mechanism into an Adaptive Earliest Deadline (AED) and Hierarchical Earliest Deadline (HED) scheduling strategies for transactions in a firm deadline environment. Both AED and HED attempt to stabilize the overload performance of EDF. Goyal et al. [17] describe an approach that allows transactions to 19 be rejected as part of an optimization of the Load Adaptive B-link algorithm (LAB-link), a real-time version of index (B-tree) concurrency control algorithms in firm-deadline RTDB systems. <p> In [33], when the number of transactions admitted to the system exceeds the MPL, new transactions are made to wait. This non-zero admission waiting time is detrimental to the progress of these transactions completing by their deadlines. The situation is analogous in <ref> [17] </ref>. When the load control mechanism is active and the utilization of the bottleneck resource is above the preset threshold, new transactions are not allowed to enter the system. Eventually, these transactions are aborted when it is discovered that their deadlines have passed.
Reference: [18] <author> T. Haerder. </author> <title> Observations on optimistic concurrency control schemes. </title> <journal> Information Systems, </journal> <volume> 9(2) </volume> <pages> 111-120, </pages> <month> October </month> <year> 1984. </year>
Reference-contexts: Transactions failing the validation phase are restarted. With OCC techniques, serializability is guaranteed by the validation phase. Transaction validation occurs in one of two manners: forward validation <ref> [18] </ref> and backward validation [24], depending upon the manner in which conflicts are detected.
Reference: [19] <author> Jayant R. Haritsa, Miron Livny, and Michael J. Carey. </author> <title> Earliest deadline scheduling for real-time database systems. </title> <booktitle> In Proceedings of the 12th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: Admission control protocols and feedback mechanisms have been employed in a variety of RTDB system components: transaction scheduling <ref> [19, 20] </ref>, memory allocation for queries [33], and B-tree index concurrency control [17]. Haritsa et al. [19] incorporate a feedback mechanism into an Adaptive Earliest Deadline (AED) and Hierarchical Earliest Deadline (HED) scheduling strategies for transactions in a firm deadline environment. <p> Admission control protocols and feedback mechanisms have been employed in a variety of RTDB system components: transaction scheduling [19, 20], memory allocation for queries [33], and B-tree index concurrency control [17]. Haritsa et al. <ref> [19] </ref> incorporate a feedback mechanism into an Adaptive Earliest Deadline (AED) and Hierarchical Earliest Deadline (HED) scheduling strategies for transactions in a firm deadline environment. Both AED and HED attempt to stabilize the overload performance of EDF. <p> The notions of transaction values and value functions [22, 28], used to express the value that a transaction has to the system as a function of time, have been utilized in both RTS [10, 11] as well as in RTDB systems <ref> [2, 8, 19, 21, 37, 40] </ref>. In [10, 11], the value of a task is evaluated during the admission control process. The decision to reject a task or remove a previously guaranteed task is based upon tasks' values. <p> Abbott and Garcia-Molina [2] also employ transactions' values to assign priorities to transactions for scheduling system resources in a soft RTDB system. Extending their AED scheduling algorithm to be value-cognizant, Haritsa et al. <ref> [19] </ref>, developed Hierarchical Earliest Deadline (HED) for a firm RTDB system. All of the aforementioned research (with the exception of [2] which does not have any performance results) make use of transactions' values which are time-invariant.
Reference: [20] <author> R. Hong, T. Johnson, and S. Chakravarthy. </author> <title> Real-time transaction scheduling: A cost conscious approach. </title> <booktitle> In Proceedings of the 14th IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 197-206, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Admission control protocols and feedback mechanisms have been employed in a variety of RTDB system components: transaction scheduling <ref> [19, 20] </ref>, memory allocation for queries [33], and B-tree index concurrency control [17]. Haritsa et al. [19] incorporate a feedback mechanism into an Adaptive Earliest Deadline (AED) and Hierarchical Earliest Deadline (HED) scheduling strategies for transactions in a firm deadline environment. <p> By tuning the system based on the percentage of missed deadlines, their technique does not guarantee a maximum profit. Also, the notion of a guarantee (whether for commitment or safe termination by the deadline) is non-existent in their work. Hong et al. <ref> [20] </ref> introduce the Cost Conscious Approach (CCA) to scheduling transactions in a soft RTDB system. CCA takes into account both static (i.e. deadline) and dynamic (i.e. effective service time, restart cost) aspects of a transaction's execution when dynamically computing the priority of a transaction.
Reference: [21] <author> J. Huang, J. A. Stankovic, D. Towsley, and K. Ramamritham. </author> <title> Experimental evaluation of real-time transaction processing. </title> <booktitle> In Proceedings of the 10th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1989. </year>
Reference-contexts: The notions of transaction values and value functions [22, 28], used to express the value that a transaction has to the system as a function of time, have been utilized in both RTS [10, 11] as well as in RTDB systems <ref> [2, 8, 19, 21, 37, 40] </ref>. In [10, 11], the value of a task is evaluated during the admission control process. The decision to reject a task or remove a previously guaranteed task is based upon tasks' values. <p> In all cases, the WCET of the tasks is assumed to be known a priori. In the context of RTDB systems, Huang et al. <ref> [21] </ref>, continuing with the work of [37], use transactions' values to schedule system resources (e.g., CPU) and in conflict resolution protocols in a soft real-time environment. Abbott and Garcia-Molina [2] also employ transactions' values to assign priorities to transactions for scheduling system resources in a soft RTDB system.
Reference: [22] <author> E. Jensen, C. Locke, and H. Tokuda. </author> <title> A time-driven scheduling model for real-time operating systems. </title> <booktitle> In Proceedings of the 6th Real-Time Systems Symposium, </booktitle> <pages> pages 112-122, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: In many 20 systems, this assumption is not valid, making it necessary to consider the worth of a transaction, when making resource allocation and conflict resolution decisions. In such systems, the performance objective becomes that of maximizing the system profit. The notions of transaction values and value functions <ref> [22, 28] </ref>, used to express the value that a transaction has to the system as a function of time, have been utilized in both RTS [10, 11] as well as in RTDB systems [2, 8, 19, 21, 37, 40].
Reference: [23] <author> C. M. Krishna and K. G. Shin. </author> <title> On scheduling tasks with a quick recovery from failure. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 35(5) </volume> <pages> 448-455, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: A number of papers have employed the primary / alternative model in which the primary task provides good quality of service and is preferable to the alternative which produces an acceptable quality of service. Alternatives handle timing faults in [25, 13] and processor failures in <ref> [30, 32, 23] </ref>. Our notion of a compensating task is indeed similar to that of an alternative; execution of a compensating task provides less attractive quality of service in comparison to the execution of the primary task. The similarities end here, however.
Reference: [24] <author> H. Kung and John Robinson. </author> <title> On optimistic methods for concurrency control. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(2), </volume> <month> June </month> <year> 1981. </year> <month> 23 </month>
Reference-contexts: Moreover, 2PL-HP prevents deadlocks due to its conflict-based priority mechanism (assuming that static, unique priorities are assigned to all transactions). 3.2.2 Optimistic Concurrency Control (OCC) Unlike pessimistic techniques, optimistic protocols like OCC <ref> [24] </ref> ignore potential conflicts by allowing database operations issued by transactions to be performed when requested. Specifically, transactions proceed in three phases: read, validate and write. <p> Transactions failing the validation phase are restarted. With OCC techniques, serializability is guaranteed by the validation phase. Transaction validation occurs in one of two manners: forward validation [18] and backward validation <ref> [24] </ref>, depending upon the manner in which conflicts are detected. With backward validation, if the read set of the validating transaction T i intersects with the write set of any transaction 8 which committed since T i started its read phase, T i is restarted|the potential conflict has materi-alized. <p> With forward validation, if the write set of the validating transaction T i intersects with the read set of active, uncommitted transactions, then either T i is restarted or the conflicting, active transactions are restarted. Since OCC is a restarted-based protocol, deadlocks are not possible. With classical OCC <ref> [24] </ref>, conflicts are not detected until the validation phase. Resources are wasted by those transactions which reach the validation phase only to be restarted.
Reference: [25] <author> A. Liestman and R. Campbell. </author> <title> A fault-tolerant scheduling problem. </title> <journal> IEEE Transaction on Software Engineering, </journal> <volume> SE-12(11):1089-1095, </volume> <month> November </month> <year> 1986. </year>
Reference-contexts: A number of papers have employed the primary / alternative model in which the primary task provides good quality of service and is preferable to the alternative which produces an acceptable quality of service. Alternatives handle timing faults in <ref> [25, 13] </ref> and processor failures in [30, 32, 23]. Our notion of a compensating task is indeed similar to that of an alternative; execution of a compensating task provides less attractive quality of service in comparison to the execution of the primary task. The similarities end here, however.
Reference: [26] <author> C. L. Liu and J. Layland. </author> <title> Scheduling algorithms for multiprogramming in hard real-time environments. </title> <journal> Journal of the Assocation of Computing Machinery, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: Since all tasks in the PTQ are ready to execute, a scheduling algorithm must be used to apportion the CPU time amongst these tasks. We use the Earliest Deadline First algorithm (EDF) <ref> [26] </ref>, which is optimal for a uniprocessor system with independent, preemptible tasks having arbitrary deadlines [15]. The CTQ is organized as a series of slots, one for each compensating task. Each slot contains the compensating task id as well as its start and end times.
Reference: [27] <author> J. W.-S. Liu, K. J. Lin, and S. Natarajan. </author> <title> Scheduling real-time, periodic jobs using imprecise results. </title> <booktitle> In Proceedings of the 8th IEEE Real-time Systems Symposium, </booktitle> <month> December </month> <year> 1987. </year>
Reference-contexts: There have been a number of similar models suggested in the literature. These are contrasted to our model below. Liu et al. <ref> [27] </ref> developed the imprecise computation model which decomposes each task 18 into two subtasks, a mandatory part and an optional part. Others employing this model include Audsley et al. [5] and Davis et al. [14]. <p> Others employing this model include Audsley et al. [5] and Davis et al. [14]. Our model differs from the imprecise computation model in that the WCET requirements for the mandatory and optional parts are assumed in <ref> [27, 5, 14] </ref>, whereas they are assumed only for the compensating tasks in our model. Also, unlike the imprecise computation model, we start off with the execution of the optional component (the primary task), leaving the mandatory component (the compensating task) to a later time (if needed).
Reference: [28] <author> C. Locke. </author> <title> Best Effort Decision Making for Real-Time Scheduling. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, Department of Computer Science, </institution> <month> May </month> <year> 1986. </year>
Reference-contexts: In many 20 systems, this assumption is not valid, making it necessary to consider the worth of a transaction, when making resource allocation and conflict resolution decisions. In such systems, the performance objective becomes that of maximizing the system profit. The notions of transaction values and value functions <ref> [22, 28] </ref>, used to express the value that a transaction has to the system as a function of time, have been utilized in both RTS [10, 11] as well as in RTDB systems [2, 8, 19, 21, 37, 40].
Reference: [29] <author> D. Menasce and T. Nakanishi. </author> <title> Optimistic versus pessimistic concurrency control mechanisms in database management systems. </title> <journal> Information Systems, </journal> <volume> 7(1), </volume> <year> 1982. </year>
Reference-contexts: Notice that this 2-tier priority assumption still allows primary tasks (compensating tasks) to be prioritized amongst themselves. In this paper we study our admission control mechanism in conjunction with two types of concurrency control protocols, namely Optimistic Concurrency Control with forward validation (such as OCC-BC <ref> [29] </ref> or SCC-nS [7]), or Pessimistic Concurrency Control (PCC) with Priority Abort (such as 2PL-PA [3]). 2.1 Workload Admission Control Manager The source contains a set of transactions which are generated off-line. Each enters the system at a random time and is first processed by the ACM. <p> With classical OCC [24], conflicts are not detected until the validation phase. Resources are wasted by those transactions which reach the validation phase only to be restarted. In order to waste less system resources and restart transactions as early as possible, both of which are important for real-time systems, <ref> [29, 34] </ref> introduced a variant of forward validation which employs a broadcast commit (BC) mechanism. OCC-BC guarantees that a transaction reaching its validation phase will commit as checks for materialized conflicts are made with uncommitted transactions rather than with committed transactions.
Reference: [30] <author> D. Mosse, R. Melhem, and S. Ghosh. </author> <title> Analysis of a fault-tolerant multiprocessor scheduling algorithm. </title> <booktitle> IEEE Fault Tolerant Computing, </booktitle> <pages> pages 16-25, </pages> <year> 1994. </year>
Reference-contexts: A number of papers have employed the primary / alternative model in which the primary task provides good quality of service and is preferable to the alternative which produces an acceptable quality of service. Alternatives handle timing faults in [25, 13] and processor failures in <ref> [30, 32, 23] </ref>. Our notion of a compensating task is indeed similar to that of an alternative; execution of a compensating task provides less attractive quality of service in comparison to the execution of the primary task. The similarities end here, however.
Reference: [31] <author> Sue Nagy and Azer Bestavros. </author> <title> Admission control for soft-deadline transactions in accord. </title> <booktitle> In 3 rd IEEE Real-time Technology and Applications Symposium, </booktitle> <address> Montreal, Canada, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: In particular, all compensating tasks are assumed to have a higher priority than primary tasks. Thus a primary task may be preempted (or aborted) by a compensating task, whereas a compensating task cannot 4 Our current research in <ref> [31] </ref> involves extending our results to soft and firm deadline systems by allowing for a profit/loss past a transaction's deadline. 4 be preempted by either a primary task or another compensating task under any condition.
Reference: [32] <author> Y. Oh and S. Son. </author> <title> An algorithm for real-time fault-tolerant scheduling in multiprocessor systems. </title> <booktitle> In Fourth Euromicro Workshop on Real-time Systems, </booktitle> <year> 1992. </year>
Reference-contexts: A number of papers have employed the primary / alternative model in which the primary task provides good quality of service and is preferable to the alternative which produces an acceptable quality of service. Alternatives handle timing faults in [25, 13] and processor failures in <ref> [30, 32, 23] </ref>. Our notion of a compensating task is indeed similar to that of an alternative; execution of a compensating task provides less attractive quality of service in comparison to the execution of the primary task. The similarities end here, however.
Reference: [33] <author> H. Pang, M. J. Carey, and M. Livny. </author> <title> Managing memory for real-time queries. </title> <booktitle> In Proceedings of the 1994 ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 221-232, </pages> <year> 1994. </year>
Reference-contexts: Admission control protocols and feedback mechanisms have been employed in a variety of RTDB system components: transaction scheduling [19, 20], memory allocation for queries <ref> [33] </ref>, and B-tree index concurrency control [17]. Haritsa et al. [19] incorporate a feedback mechanism into an Adaptive Earliest Deadline (AED) and Hierarchical Earliest Deadline (HED) scheduling strategies for transactions in a firm deadline environment. Both AED and HED attempt to stabilize the overload performance of EDF. <p> Since only soft deadline transactions are considered, Chakravarthy et al. do not employ an admission control protocol. The focus of Pang et al. <ref> [33] </ref> is on admission control and memory management of queries requiring large amounts of computational memory in a firm RTDB system. Their Priority Memory Management (PMM) algorithm consists of two components: admission control and memory allocation. <p> The only two possible transaction execution outcomes are commitment and abortion. In <ref> [33] </ref>, when the number of transactions admitted to the system exceeds the MPL, new transactions are made to wait. This non-zero admission waiting time is detrimental to the progress of these transactions completing by their deadlines. The situation is analogous in [17].
Reference: [34] <author> John Robinson. </author> <title> Design of Concurrency Controls for Transaction Processing Systems. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1982. </year>
Reference-contexts: With classical OCC [24], conflicts are not detected until the validation phase. Resources are wasted by those transactions which reach the validation phase only to be restarted. In order to waste less system resources and restart transactions as early as possible, both of which are important for real-time systems, <ref> [29, 34] </ref> introduced a variant of forward validation which employs a broadcast commit (BC) mechanism. OCC-BC guarantees that a transaction reaching its validation phase will commit as checks for materialized conflicts are made with uncommitted transactions rather than with committed transactions.
Reference: [35] <author> X. Song and J. Liu. </author> <title> How well can data temporal consistency be maintained? In Proceedings IEEE Symposium on Computer-Aided Control Systems Design, </title> <address> pages 275-284, </address> <month> March </month> <year> 1992. </year>
Reference-contexts: The restart of a transaction due to the validation of another does not necessarily imply the materialization of a potential conflict. Due to their non-blocking behavior, optimistic concurrency control techniques, such as OCC-BC, are better able to guarantee both absolute and relative consistency <ref> [4, 35] </ref> requirements.
Reference: [36] <author> M. Squadrito, B. Thuraisingham, L. DiPippo, and V. Wolfe. </author> <title> Towards priority ceilings in object-based semantic real-time concurrency control. </title> <booktitle> In Proceedings of RTDB'96: The 1996 Workshop on Real-Time Databases, </booktitle> <pages> pages 127-134, </pages> <address> Newport Beach, California, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: conflicting operations are: * write (T i ; X), read (T j ; X): Read After Write (RAW) * read (T i ; X), write (T j ; X): Write After Read (WAR) * write (T i ; X), write (T j ; X): Write After Write (WAW) Other research <ref> [6, 41, 36] </ref> has considered semantic-based concurrency control whereby semantic information on database operations is exploited to enhance the degree of concurrency. Objects such as stacks and queues with operations of push, pop, top and enqueue, dequeue, respectively, are typical.
Reference: [37] <author> John Stankovic and Wei Zhao. </author> <title> On real-time transactions. </title> <journal> ACM, SIGMOD Record, </journal> <volume> 17(1) </volume> <pages> 4-18, </pages> <year> 1988. </year>
Reference-contexts: The notions of transaction values and value functions [22, 28], used to express the value that a transaction has to the system as a function of time, have been utilized in both RTS [10, 11] as well as in RTDB systems <ref> [2, 8, 19, 21, 37, 40] </ref>. In [10, 11], the value of a task is evaluated during the admission control process. The decision to reject a task or remove a previously guaranteed task is based upon tasks' values. <p> In all cases, the WCET of the tasks is assumed to be known a priori. In the context of RTDB systems, Huang et al. [21], continuing with the work of <ref> [37] </ref>, use transactions' values to schedule system resources (e.g., CPU) and in conflict resolution protocols in a soft real-time environment. Abbott and Garcia-Molina [2] also employ transactions' values to assign priorities to transactions for scheduling system resources in a soft RTDB system.
Reference: [38] <author> Ken Tew, Panos K. Chrysanthis, and Daniel Mosse. </author> <title> Emperical evaluation of task and resource scheduling in dynamic real-time systems. </title> <booktitle> In Proceedings of RTSS'96 WIP Session: The 17 th IEEE Real-Time System Symposium, </booktitle> <pages> pages 35-38, </pages> <address> Washington, D.C., </address> <month> December </month> <year> 1996. </year>
Reference-contexts: The similarities end here, however. The alternatives in Liestman and Campbell are not subject to timing failures, whereas in our model compensating tasks may have hard, soft or firm deadlines. Moreover, in Chetto and Chetto, the alternatives are periodic in nature, unlike compensating tasks which are not. In <ref> [38] </ref>, Tew et al. introduce a task model with two components: a load task and an execute task whereby the load task first loads the task from disk into memory thereby making the execute task eligible to run (i.e. there is a precedence relation between the two tasks).
Reference: [39] <author> Robert H. Thomas. </author> <title> A majority consensus approach to concurrency control for multiple copy databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 4(2) </volume> <pages> 180-209, </pages> <year> 1979. </year>
Reference-contexts: In this research, we restrict our attention to OCC-BC as a concurrency control mechanism representative of restarted-based protocols. Moreover, we treat WAW conflicts using Thomas' Write Rule (TWR) <ref> [39] </ref> which ignores write operations which arrive too late. For OCC-BC, CP (T X j ) = 0 is indicative of the read/write sets of T X i and T Y j not inter secting, i.e. the commitment of T Y j never restarts T X i .
Reference: [40] <author> S.-M. Tseng, Y.H. Chin, and W.-P. Yang. </author> <title> Scheduling real-time transactions with dynamic values: a performance evaluation. </title> <booktitle> In Proceedings Second International Workshop on Real-Time Computing Systems and Applications, </booktitle> <pages> pages 60-67, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: The notions of transaction values and value functions [22, 28], used to express the value that a transaction has to the system as a function of time, have been utilized in both RTS [10, 11] as well as in RTDB systems <ref> [2, 8, 19, 21, 37, 40] </ref>. In [10, 11], the value of a task is evaluated during the admission control process. The decision to reject a task or remove a previously guaranteed task is based upon tasks' values. <p> All of the aforementioned research (with the exception of [2] which does not have any performance results) make use of transactions' values which are time-invariant. A different approach is taken by Bestavros and Braoudakis [8] and Tseng et al. <ref> [40] </ref>. In [8] each transaction is characterized by a time-variant value function which is used to specify both the nature of the timing constraint (i.e. no deadline, hard, soft, or firm deadline) as well as the transaction's importance to the system relative to other transactions.
Reference: [41] <author> W. Weihl. </author> <title> Commutativity-based concurrency control for abstract data types. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(12) </volume> <pages> 1488-1505, </pages> <year> 1988. </year> <month> 24 </month>
Reference-contexts: conflicting operations are: * write (T i ; X), read (T j ; X): Read After Write (RAW) * read (T i ; X), write (T j ; X): Write After Read (WAR) * write (T i ; X), write (T j ; X): Write After Write (WAW) Other research <ref> [6, 41, 36] </ref> has considered semantic-based concurrency control whereby semantic information on database operations is exploited to enhance the degree of concurrency. Objects such as stacks and queues with operations of push, pop, top and enqueue, dequeue, respectively, are typical.
References-found: 41

