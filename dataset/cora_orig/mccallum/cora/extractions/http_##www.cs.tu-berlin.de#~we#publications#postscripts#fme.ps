URL: http://www.cs.tu-berlin.de/~we/publications/postscripts/fme.ps
Refering-URL: http://www.first.gmd.de/~espress/gesamt_public.html
Root-URL: 
Title: Combining Statecharts and Z for the Design of Safety-Critical Control Systems  
Author: Matthias Weber 
Address: Berlin  
Affiliation: Technische Universitat  
Abstract: we@cs.tu-berlin.de Abstract. In this report, we describe an approach that integrates a mathematical specification language with more traditional software design techniques to yield a practicable methodology for the specification of safety-critical control systems. To manage complexity and to foster separation of concerns, the system design model is divided into three views: the architectural view, specified with object and class diagrams; the reactive view, specified with statecharts; and the functional view, specified with Z. A systematic relationship between the reactive and the functional view entails proof obligations to guarantee semantic compatibility. We illustrate this approach with a case study on controlling a heavy hydraulic press.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> L. M. Barroca, J. S. Fitzgerald, and L. Spencer. </author> <title> The architectural specification of an avionics subsystem. </title> <booktitle> In IEEE Workshop on Industrial-strength Formal Specification Techniques, </booktitle> <pages> pages 17-29. </pages> <publisher> IEEE Press, </publisher> <year> 1995. </year>
Reference-contexts: The idea of combining statecharts and Z is certainly not new; for example <ref> [1] </ref> uses a combination of Z and timed statecharts in the context of an application from avionics. The next section explains key ideas of our approach.
Reference: 2. <author> G. Booch. </author> <title> Object-Oriented Analysis and Design with Applications. </title> <publisher> Benjamin Cummings, </publisher> <address> second edition, </address> <year> 1994. </year>
Reference-contexts: The architectural model of a system describes the relationships between the types of components used in the system as well as the actual configuration of the system components itself. For the description of this model, we adopt the object-oriented modeling paradigm <ref> [2, for instance] </ref>: We understand an embedded control system as a hierarchically structured collection of objects that change state and interact with each other throughout their lifetime. <p> Since this is a very small example, the analysis and architectural design is straightforward. The results are summarized in the diagrams presented in Figures 2 and 4. For this example, we mostly use notations inspired from OMT [10] and Booch <ref> [2] </ref>. However, choice of notations is by no means essential and it should not be difficult for the experienced to adapt the information content of the following diagrams to his favorite notation. Fig. 2.
Reference: 3. <author> D. Craigen, S. Gerhart, and T. Ralston. </author> <title> An international survey of industrial applications of formal methods. </title> <type> Technical Report NISTGCR 93/626, </type> <institution> National Institute of Standards and Technology, Gaithersburg, MD 20899, </institution> <year> 1993. </year>
Reference-contexts: 1 Introduction Formal methods have been seriously applied during the past years in various industrial and academic pilot projects as reported, for instance, in <ref> [3] </ref>. However, the breakthrough has not yet been achieved. Many companies involved in such projects are scaling down their use of formal methods to a level that is in accordance with their current industrial relevance.
Reference: 4. <institution> Zentralstelle fur Unfallverhutung und Arbeitsmedizin. Pressen Sicherheit-sregeln fur Zweihandschaltungen an kraftbetriebenen Pressen der Metallbearbeitung. Hauptverband der gewerblichen Berufsgenossenschaften, </institution> <address> Langwartweg 103, 5300 Bonn 1, 2nd edition, </address> <year> 1978. </year>
Reference-contexts: A typical safety device to prevent hand injuries are two-hand controllers, i.e. control units with two buttons, located about 1 meter apart, that must both be kept pressed while a potentially dangerous action is performed <ref> [4] </ref>. In addition, both buttons must be pressed within a small period of time (in our example 0.5 sec) in order to successfully initiate the closing of the press. The obvious intention behind two-hand controllers is to keep both of the worker's hands out of the danger area.
Reference: 5. <author> D. Harel. Statecharts: </author> <title> A visual formalism for complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8(3) </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference-contexts: Reactive behavior is modeled by specifying how, and under which timing constraints, operations from external objects are requested or supplied (or both) in the state changes of objects. We specify reactive behavior using an appropriate variant of timed hierarchical state transition diagrams, i.e. with a variant of statecharts <ref> [5] </ref>. There are two reasons for this choice: firstly, statecharts have proven to be sufficiently expressive for modeling complex component interactions and time control, and secondly, the use of statecharts, or close variants of statecharts, is currently spreading in industry.
Reference: 6. <author> D. Harel and E. Gery. </author> <title> Executable Object-Modeling with Statecharts. </title> <note> In to appear, </note> <editor> editor, </editor> <booktitle> Proc. </booktitle> <volume> ICSE 18, </volume> <year> 1996. </year>
Reference-contexts: Since their discussion does not add anything interesting at this point, their treatment is not further detailed. A variety of formal semantics for statecharts have been developed [14]. The present paper is more in the line of current work on embedding statecharts into an object-oriented setting [11] <ref> [6] </ref>. Therefore, we would like to add two remarks about basic semantic concepts of the statechart notation as used in this report: The basic communication mechanism is point-to-point communication rather than broadcasting.
Reference: 7. <author> M. Heisel, S. Jahnichen, M. Simons, and M. Weber. </author> <title> Embedding mathematical techniques into system engineering. </title> <editor> In M. Wirsing, editor, </editor> <booktitle> ICSE-17 Workshop on Formal Methods Application in Software Engineering Practice, </booktitle> <pages> pages 53-60, </pages> <year> 1995. </year>
Reference-contexts: We believe that a more modest approach to the integration of formal techniques into the system design process will lead to a more immediate application of such techniques <ref> [7] </ref>. Starting out from existing and accepted conventional design methods which are amenable to the integration of mathematical techniques, one should investigate at which points during the design process mathematical techniques can be smoothly and usefully integrated.
Reference: 8. <author> I. Houston and S. King. </author> <title> CICS Project Report: Experiences and Results from the Use of Z in IBM. </title> <editor> In S.Prehn and W.J.Toetenel, editors, </editor> <booktitle> VDM'91 Formal Software Development Methods, volume 551 of LNCS, </booktitle> <pages> pages 588-596. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: 9. <author> Y. Kestens and A. Pnueli. </author> <title> Timed and Hybrid Statecharts and their Textual Representation, </title> <booktitle> volume 299 of LNCS, </booktitle> <pages> pages 591 - 620. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: As for operation arrows, the condition and requested operations may be omitted. Timeout transitions are a very simple, but often sufficient, means to deal with time constraints. If necessary, they could be generalized to timed transitions <ref> [9] </ref>. After modeling the reactive view of the global control of the hydraulic press system, we have yet to describe the reactive behavior of the sampler: After initialization, the sampler periodically samples the two button sensors and the press sensor.
Reference: 10. <author> J. Rumbaugh et al. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice-Hall, </publisher> <year> 1991. </year>
Reference-contexts: Since this is a very small example, the analysis and architectural design is straightforward. The results are summarized in the diagrams presented in Figures 2 and 4. For this example, we mostly use notations inspired from OMT <ref> [10] </ref> and Booch [2]. However, choice of notations is by no means essential and it should not be difficult for the experienced to adapt the information content of the following diagrams to his favorite notation. Fig. 2.
Reference: 11. <author> B. Selic, G. Gullekson, and P. T. Ward. </author> <title> Real-Time Object-Oriented Modeling. </title> <publisher> John Wiley & Sons, </publisher> <year> 1994. </year>
Reference-contexts: Since their discussion does not add anything interesting at this point, their treatment is not further detailed. A variety of formal semantics for statecharts have been developed [14]. The present paper is more in the line of current work on embedding statecharts into an object-oriented setting <ref> [11] </ref> [6]. Therefore, we would like to add two remarks about basic semantic concepts of the statechart notation as used in this report: The basic communication mechanism is point-to-point communication rather than broadcasting. <p> Requesting an operation from an object can be interpreted as sending a message to an object, and providing an operation to an object can be interpreted as receiving a message from an object. As specified in the architectural view, communications can be synchronous or asynchronous. Following the approach in <ref> [11] </ref>, operation transitions are thus based on the concepts of request and provision of operations rather than the concept of event. The execution of a transition is not timeless and external messages may arrive at any time.
Reference: 12. <institution> IEEE Software. Safety-Critical Systems. IEEE, </institution> <month> January </month> <year> 1994. </year>
Reference: 13. <author> M. Spivey. </author> <title> The Z Notation, A Reference Manual. </title> <publisher> Prentice Hall, </publisher> <address> 2nd edition, </address> <year> 1992. </year>
Reference-contexts: Often, functional behavior in state-based systems is specified by textual or formal descriptions of pre- and postconditions and of data invariants. In our approach, we specify the functional behavior of objects using the state-based formal specification language Z <ref> [13] </ref>. There are two main reasons for using Z: firstly, in our view, Z has proven to be particularly useful for modeling complex functional data transformations; and secondly, both in academia and industry, Z has become one of the most widely used formal specification notations.
Reference: 14. <author> M. von der Beeck. </author> <title> A comparison of statecharts variants. </title> <booktitle> In Symposium on Fault-Tolerant Computing, </booktitle> <publisher> LNCS. Springer, </publisher> <year> 1994. </year>
Reference-contexts: Since their discussion does not add anything interesting at this point, their treatment is not further detailed. A variety of formal semantics for statecharts have been developed <ref> [14] </ref>. The present paper is more in the line of current work on embedding statecharts into an object-oriented setting [11] [6].
References-found: 14

