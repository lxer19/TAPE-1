URL: ftp://ftp.umiacs.umd.edu/pub/ONRrept/SQR95.ps
Refering-URL: http://www.umiacs.umd.edu/research/CLIP/DARPA/im.html
Root-URL: 
Email: firstname.lastname@inria.fr  louiqa@umiacs.umd.edu  
Title: Query Reformulation in Multidatabase Systems using Semantic Knowledge  
Author: Daniela Florescu flfl Louiqa Raschid Patrick Valduriez flfl 
Address: 78153 Le Chesnay Cedex, France  College Park, MD 20742  
Affiliation: flfl INRIA, Rocquencourt  University of Maryland  
Abstract: We consider a multidatabase system (MDBMS) with a common object-oriented model, based on the ODMG standard, and local databases that may be relational, object-oriented, or file systems. The MDBMS interface could be different from the union of the local interfaces, and may include views of particular local databases, integrity constraints, and knowledge about data replication in local databases. Query reformulation is made difficult by the variety of semantic knowledge that is used to describe the MDBMS, and the complexity of the Object Query Language. We present a reformulation algorithm which exploits semantic knowledge, (represented as integrity assertions and mapping rules), for semantic rewriting based on pattern-matching. It is general enough to re-use the results of previously computed queries in the MDBMS.
Abstract-found: 1
Intro-found: 1
Reference: [Ahmed91] <author> R. </author> <title> Ahmed et al ., "The Pegasus Heterogeneous Multidatabase System". </title> <journal> IEEE Computer, </journal> <volume> 24(12), </volume> <year> 1991. </year>
Reference-contexts: Most of the work on multidatabase query processing uses an object-oriented approach, and assumes a global schema which is the union of the local databases, eg., Pegasus <ref> [Ahmed91] </ref>, UniSQL [Kim93], Garlic [Carey95]. This simplifies query reformulation, but restricts the MDBMS interface by maintaining the autonomy of local interfaces. Furthermore, semantic knowledge is not exploited, and prevents expressing a view over local databases, reusing the results of previous queries, or exploiting data redundancy. <p> The Multidatabase Environment We present the assumptions regarding the MDBMS architecture, with its common model and language, and then define query reformulation in this environment. 2.1 Architectural Assumptions In order to focus on the problem of query reformulation, it is sufficient to use an object-oriented MDBMS architecture such as in <ref> [Ahmed91] </ref> or in [Carey95]. The multidatabase consists of several autonomous heterogeneous local databases. Each local database is accessed through a wrapper [Carey95] which provides an interface to describe the local data in the common data model.
Reference: [Arens93] <author> Y. Arens, C.Y. Chee, C.-N. Hsu and C.A. Knoblock, </author> <title> "Retrieving and integrating data from multiple information sources" Int. </title> <journal> Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 2(2), </volume> <year> 1993 </year>
Reference-contexts: However, their common object model is an object-oriented extension of the relational model based on a description logic. The common Datalog-based query language is not as powerful as OQL. The semantic knowledge that we use for reformulation is much richer compared to their "site description" information. The SIMS project <ref> [Arens93] </ref> also performs some 2 reformulation, but it is based on a fixed set of reformulation operators which can not exploit more general semantic knowledge such as integrity constraints. They, too, do not use a standard object model or standard query language. <p> Our solution to query reformulation relies on the uniform expression of semantic knowledge, as rewrite rules, in a canonical form of OQL expression. OQL-based rewrite rules provide a very expressive language for specifying equivalent queries. Compared to previous reformulation work in <ref> [Arens93] </ref>, [Levy95a], we support reformulation using an expressive query language and a variety of semantic knowledge. The reformulation algorithm is based on pattern-matching, and uses both syntactic rewriting to express a query in canonical form, and semantic rewriting using the rewrite rules, to obtain alternate 18 equivalent OQL queries.
Reference: [Bancilhon92] <editor> F. Bancilhon, C. Delobel, and P. Kannelakis (eds.), </editor> <title> Building an Object-oriented Database System the story of O2. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: The solution proposed in this paper has been implemented in the Flora optimizer prototype, [Florescu94], which has been operational at INRIA since the last IDEA review (June 1994). The Flora optimizer supports the ODMG data model and query language, and currently uses the O2 DBMS, <ref> [Bancilhon92] </ref>, for local database management.
Reference: [Barsalou92] <author> T. Barsalou and D. Gangopadhay, </author> <title> "M(DM): An Open Framework for Interoperation of Mul-timodel Multidatabase Systems". </title> <booktitle> Int. Conf. on Data Engineering, </booktitle> <address> Tempe, AZ, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: They, too, do not use a standard object model or standard query language. Other recent proposals for transforming multidatabase queries are based on higher-order query languages [Krishnamurthy91], higher-order logics [Lakshmanan93], or meta-models <ref> [Barsalou92] </ref>. Each of these depends on using a query language or model that is not standard, (and more complex), compared to the relational or object models and languages.
Reference: [Carey95] <author> M. </author> <title> Carey et al ., "Towards Heterogeneous Multimedia Information Systems: the Garlic Approach". </title> <type> Technical Report, </type> <institution> IBM Almaden Research, </institution> <year> 1995. </year>
Reference-contexts: Most of the work on multidatabase query processing uses an object-oriented approach, and assumes a global schema which is the union of the local databases, eg., Pegasus [Ahmed91], UniSQL [Kim93], Garlic <ref> [Carey95] </ref>. This simplifies query reformulation, but restricts the MDBMS interface by maintaining the autonomy of local interfaces. Furthermore, semantic knowledge is not exploited, and prevents expressing a view over local databases, reusing the results of previous queries, or exploiting data redundancy. <p> We present the assumptions regarding the MDBMS architecture, with its common model and language, and then define query reformulation in this environment. 2.1 Architectural Assumptions In order to focus on the problem of query reformulation, it is sufficient to use an object-oriented MDBMS architecture such as in [Ahmed91] or in <ref> [Carey95] </ref>. The multidatabase consists of several autonomous heterogeneous local databases. Each local database is accessed through a wrapper [Carey95] which provides an interface to describe the local data in the common data model. <p> reformulation in this environment. 2.1 Architectural Assumptions In order to focus on the problem of query reformulation, it is sufficient to use an object-oriented MDBMS architecture such as in [Ahmed91] or in <ref> [Carey95] </ref>. The multidatabase consists of several autonomous heterogeneous local databases. Each local database is accessed through a wrapper [Carey95] which provides an interface to describe the local data in the common data model. The wrapper is also responsible for translating queries, expressed in the multidatabase language, into the local query language, (eg., SQL for a relational database). We make several assumptions about the MDBMS environment.
Reference: [Cattell93] <author> R.G.G. </author> <title> Cattell et al ., The Object Database Standard - ODMG 93. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: A MDBMS must provide transparent access to the participating data sources, which we call local databases. To achieve transparency of distribution and heterogeneity, the MDBMS is based on a common data model and language. The ODMG standard <ref> [Cattell93] </ref>, fl This research has been partially supported by the Advanced Research Project Agency under grant ARPA/ONR 92-J1929 and by the Commission of European Communities under Esprit project IDEA. 1 which extends the OMG object-oriented data model [OMG92], provides a good basis for a common integration framework. <p> We consider a MDBMS which supports the ODMG data model and the Object Query Language (OQL) <ref> [Cattell93] </ref>. Local databases may be relational or object-oriented databases, or more specialized data sources (eg. multimedia servers). A database schema expressed in the ODMG model is called an interface. The MDBMS provides a single MDBMS interface, and a local interface for each database. <p> The final result is computed at the MDBMS level. 2.2 The Common Data Model The multidatabase model and language used to describe each local database is based on the ODMG standard <ref> [Cattell93] </ref>. We introduce the main elements of the object data model and query language (with minor changes) which are necessary for the rest of the paper. The object data model is based on a type system. Types can be atomic or constructed.
Reference: [Chaudhuri93] <author> S. Chaudhuri, K. Shim, </author> <title> "Query Optimization in The Presence of Foreign Functions". </title> <booktitle> Int. Conf. on VLDB, </booktitle> <address> Dublin, Ireland, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: We express this semantic knowledge as a set of rewrite rules, and our reformulation algorithm uses these rewrite rules to correctly produce the equivalent queries. Previous work on rule-based query rewriting, in centralized databases, <ref> [Chaudhuri93] </ref>, or heterogeneous databases, [Levy95b], is based on the Datalog language. Datalog has a simple value-based data model. This simplifies the query expressions, and makes query rewriting relatively easy, using simple pattern matching of the query with the rule base.
Reference: [Du92] <author> W. Du, R. Krishnamurthy and M.-C. Shan, </author> <title> "Query optimization in heterogeneous DBMS". </title> <booktitle> Int. Conf. on VLDB, </booktitle> <address> Vancouver, Canada, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: The latter step corresponds to optimization, and must use a heterogeneous cost model, as in <ref> [Du92] </ref>, or must use some heuristics. In this paper, we address the first step of query reformulation. It is important for two reasons.
Reference: [Florescu94] <author> D. Florescu and P. Valduriez, </author> <title> "Rule-based Query Processing in the IDEA System". </title> <booktitle> Int. Symp. on Advanced Database Technologies and Their Integration, </booktitle> <address> Nara, Japan, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: The cost model can store the cost of computing queries, in an implementation independent manner. This is important in a heterogeneous environment, where we wish to preserve the autonomy of each local database. The solution proposed in this paper has been implemented in the Flora optimizer prototype, <ref> [Florescu94] </ref>, which has been operational at INRIA since the last IDEA review (June 1994). The Flora optimizer supports the ODMG data model and query language, and currently uses the O2 DBMS, [Bancilhon92], for local database management.
Reference: [Kim93] <author> W. </author> <title> Kim et al ., "On Resolving Schematic Heterogeneity in Multidatabase Systems". Distributed and Parallel Databases, </title> <type> 1(3), </type> <year> 1993. </year> <month> 19 </month>
Reference-contexts: Most of the work on multidatabase query processing uses an object-oriented approach, and assumes a global schema which is the union of the local databases, eg., Pegasus [Ahmed91], UniSQL <ref> [Kim93] </ref>, Garlic [Carey95]. This simplifies query reformulation, but restricts the MDBMS interface by maintaining the autonomy of local interfaces. Furthermore, semantic knowledge is not exploited, and prevents expressing a view over local databases, reusing the results of previous queries, or exploiting data redundancy.
Reference: [Kirk93] <author> W. Kirk, A.Y. Levy, Y. Sagiv and D. Srivastava, </author> <title> "The Information Manifold". Distributed and Parallel Databases, </title> <type> 1(3), </type> <year> 1993. </year>
Reference: [Krishnamurthy91] <author> R. Krishnamurthy, W. Litwin and W. Kent, </author> <title> "Language Features for Interoperability of Databases with Schematic Discrepancies". </title> <booktitle> ACM SIGMOD Int. Conf., </booktitle> <address> Denver, CO, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: They, too, do not use a standard object model or standard query language. Other recent proposals for transforming multidatabase queries are based on higher-order query languages <ref> [Krishnamurthy91] </ref>, higher-order logics [Lakshmanan93], or meta-models [Barsalou92]. Each of these depends on using a query language or model that is not standard, (and more complex), compared to the relational or object models and languages.
Reference: [Lakshmanan93] <author> L.V.S. Lakshmanan, F. </author> <title> Sadri and I.N. Subramanian, "On the Logical Foundations of Schema Integration and Evolution in Heterogeneous Database Systems". </title> <booktitle> Int. Conf. on Deductive and Object-Oriented Databases, </booktitle> <address> Phoenix, AZ, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: They, too, do not use a standard object model or standard query language. Other recent proposals for transforming multidatabase queries are based on higher-order query languages [Krishnamurthy91], higher-order logics <ref> [Lakshmanan93] </ref>, or meta-models [Barsalou92]. Each of these depends on using a query language or model that is not standard, (and more complex), compared to the relational or object models and languages.
Reference: [Levy95a] <author> A.Y. Levy, D. Srivastava and T. Kirk, </author> <title> "Data model and query evaluation in global information systems". </title> <note> Int. Journal on Intelligent Information Systems special issue on Networked Information Retrieval, to appear 1995. </note>
Reference-contexts: This simplifies query reformulation, but restricts the MDBMS interface by maintaining the autonomy of local interfaces. Furthermore, semantic knowledge is not exploited, and prevents expressing a view over local databases, reusing the results of previous queries, or exploiting data redundancy. The system described in <ref> [Levy95a] </ref> does perform query reformulation using semantic knowledge. However, their common object model is an object-oriented extension of the relational model based on a description logic. The common Datalog-based query language is not as powerful as OQL. <p> The generality of OQL allows our MDBMS environment to deal with complex objects. However, such generality adds much complexity and makes reformulation much more difficult than for instance with a Datalog-based language <ref> [Levy95a] </ref>. 2.4 Heterogeneous Query Reformulation We can now formally define the problem of heterogeneous query reformulation. <p> Our solution to query reformulation relies on the uniform expression of semantic knowledge, as rewrite rules, in a canonical form of OQL expression. OQL-based rewrite rules provide a very expressive language for specifying equivalent queries. Compared to previous reformulation work in [Arens93], <ref> [Levy95a] </ref>, we support reformulation using an expressive query language and a variety of semantic knowledge. The reformulation algorithm is based on pattern-matching, and uses both syntactic rewriting to express a query in canonical form, and semantic rewriting using the rewrite rules, to obtain alternate 18 equivalent OQL queries.
Reference: [Levy95b] <author> A.Y. Levy, A.O. Mendelzon, Y. Sagiv and D. Srivastava, </author> <title> "Answering Queries Using Views". </title> <journal> ACM PODS, </journal> <note> to appear 1995. </note>
Reference-contexts: We express this semantic knowledge as a set of rewrite rules, and our reformulation algorithm uses these rewrite rules to correctly produce the equivalent queries. Previous work on rule-based query rewriting, in centralized databases, [Chaudhuri93], or heterogeneous databases, <ref> [Levy95b] </ref>, is based on the Datalog language. Datalog has a simple value-based data model. This simplifies the query expressions, and makes query rewriting relatively easy, using simple pattern matching of the query with the rule base. In our context, OQL queries are more expressive, but this makes rewriting more complex.
Reference: [Litwin86] <author> W. Litwin and A. Abdelatif, </author> <title> "Multidatabase Interoperability". </title> <booktitle> IEEE Computer, </booktitle> <month> 19(12), </month> <year> 1986. </year>
Reference: [Miller93] <author> R.J. Miller, Y.E. Ioannidis and R. Ramakrishnan, </author> <title> "The Use of Information Capacity in Schema Integration and Translation". </title> <booktitle> Int. Conf. on VLDB, </booktitle> <year> 1993. </year>
Reference-contexts: To correctly reformulate a query, the MDBMS must know the mapping from the MDBMS interface to the local interfaces. We assume that such mapping information is obtained using schema integration techniques, eg., <ref> [Miller93] </ref>. Furthermore, there may be integrity constraints in the local or MDBMS interfaces. This mapping and integrity constraint information is semantic knowledge which we exploit for query reformulation.
Reference: [OMG92] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification. Framingham, </title> <address> MA, </address> <year> 1992. </year>
Reference-contexts: The ODMG standard [Cattell93], fl This research has been partially supported by the Advanced Research Project Agency under grant ARPA/ONR 92-J1929 and by the Commission of European Communities under Esprit project IDEA. 1 which extends the OMG object-oriented data model <ref> [OMG92] </ref>, provides a good basis for a common integration framework. We consider a MDBMS which supports the ODMG data model and the Object Query Language (OQL) [Cattell93]. Local databases may be relational or object-oriented databases, or more specialized data sources (eg. multimedia servers).
Reference: [ Ozsu91a] <author> T. Ozsu and P. Valduriez, </author> <title> Principles of Distributed Database Systems. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Heterogeneity typically stems from multiple data models (eg. relational, object-oriented), different DBMS, and dedicated data servers. Multidatabase systems (MDBMS) should contribute the necessary technology for interoperability of distributed, heterogeneous and autonomous data sources <ref> [ Ozsu91a, Sheth90] </ref>. A MDBMS must provide transparent access to the participating data sources, which we call local databases. To achieve transparency of distribution and heterogeneity, the MDBMS is based on a common data model and language.
Reference: [ Ozsu91b] <author> T. Ozsu and P. Valduriez, </author> <title> "Distributed Databases : Where are we now?", </title> <journal> IEEE Computer, </journal> <volume> 24(8), </volume> <year> 1991. </year>
Reference: [ Ozsu93] <author> T. Ozsu, U. Dayal and P. Valduriez (eds.), </author> <title> Distributed Object Management. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference: [Raschid94] <author> L. Raschid, Y. Chang and B. Dorr, </author> <title> "Query Transformation Techniques for Interoperable Query Processing in Cooperative Information Systems". </title> <booktitle> Int. Conf. on Cooperative Information Systems, </booktitle> <address> Toronto, </address> <month> May </month> <year> 1994. </year>
Reference: [Sheth90] <author> A. Sheth and J. Larson, </author> <title> "Federated Database Systems for Managing Distributed, Heterogeneous, and Autonomous Databases". </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3), </volume> <year> 1990. </year>
Reference-contexts: Heterogeneity typically stems from multiple data models (eg. relational, object-oriented), different DBMS, and dedicated data servers. Multidatabase systems (MDBMS) should contribute the necessary technology for interoperability of distributed, heterogeneous and autonomous data sources <ref> [ Ozsu91a, Sheth90] </ref>. A MDBMS must provide transparent access to the participating data sources, which we call local databases. To achieve transparency of distribution and heterogeneity, the MDBMS is based on a common data model and language.

References-found: 23

