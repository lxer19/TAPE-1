URL: ftp://rtcl.eecs.umich.edu/outgoing/zaher/negotiation.ps
Refering-URL: http://www.eecs.umich.edu/RTCL/adaptware/
Root-URL: http://www.cs.umich.edu
Email: fzaher, marbles, kgshing@eecs.umich.edu  
Title: QoS Negotiation in Real-Time Systems and Its Application to Automated Flight Control  
Author: Tarek F. Abdelzaher, Ella M. Atkins, and Kang G. Shin 
Address: Ann Arbor, Michigan 48109-2122  
Affiliation: Real-time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: We propose a model for quality-of-service (QoS) negotiation in building real-time services to meet both predictability and graceful degradation requirements. QoS negotiation is shown to (i) outperform conventional "binary" admission control schemes (either guaranteeing the required QoS or rejecting the service request), and (ii) achieve higher application-perceived system utility. We incorporated the proposed QoS-negotiation model into an example real-time middleware service, called RTPOOL, which manages a distributed pool of shared computing resources (processors) to guarantee timeliness QoS for real-time applications. The efficacy and power of QoS negotiation are demonstrated for an automated flight control system implemented on a network of PCs running RT-POOL. This system is used to fly an F-16 fighter aircraft modeled using the Aerial Combat (ACM) F-16 Flight Simulator. Experimental results indicate that QoS negotiation, while maintaining real-time guarantees, enables graceful QoS degradation under conditions in which traditional schedulability analysis and admission control schemes fail. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. M. Atkins, E. H. Durfee, and K. G. Shin, </author> <title> "Plan development in CIRCA using local probabilistic models," </title> <booktitle> in Uncertainty in Artificial Intelligence: Proceedings of the Twelfth Conference, </booktitle> <pages> pp. 49-56, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: The mission planner was developed in the context of the Cooperative Intelligent Real-time Control Architecture (CIRCA) <ref> [1] </ref>, which computes task execution tradeoffs from application domain knowledge and alters the mission plan as required during QoS negotiation. In this paper, we begin with a review of related work (Section 2), followed by a description of the proposed QoS-negotiation model (Section 3). <p> Our QoS-negotiation scheme will allow graceful performance degradation when enough resources are lost to violate off-line guarantees. In this paper we consider only tasks having a known and bounded execution time. Issues in dealing with potentially unbounded on-line computations, such as run-time intelligent flight planning, are discussed in <ref> [1] </ref>. We issue F-16 aircraft guidance commands in terms of altitude (z) and compass heading (h), and employ a control loop to compute primary actuator commands, including elevator, ailerons, rudder, and throttle. <p> Controller state includes altitude z, heading h, pitch, p, and roll r. Equation (1) shows the control laws used during our experiments, adopted from those used in <ref> [1] </ref>. <p> In this section we briefly highlight how this support may complement mission planning techniques in the context of CIRCA (the Cooperative Intelligent Real-time Control Architecture) <ref> [1] </ref>. Based on a user-specified domain knowledge base, CIRCA's main goal is to build a set of control plans to keep the system "safe" (i.e., avoid catastrophic failures such as an aircraft crash) while working to achieve its performance goals (e.g., arrive at its destination on time).
Reference: [2] <author> J. Xu and D. L. Parnas, </author> <title> "Scheduling processes with release times, deadlines, precedence, and exclusion relations," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> vol. SE-16, no. 3, </volume> <pages> pp. 360-369, </pages> <month> March </month> <year> 1990. </year>
Reference: [3] <author> T. Shepard and M. Gagne, </author> <title> "A pre-run-time scheduling algorithm for hard real-time systems," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 17, no. 7, </volume> <pages> pp. 669-677, </pages> <month> Jul </month> <year> 1991. </year>
Reference: [4] <author> T. F. Abdelzaher and K. G. Shin, </author> <title> "Optimal combined task and message scheduling in distributed real-time systems," </title> <booktitle> in IEEE Real-Time Systems Symposium, </booktitle> <address> Pisa, Italy, </address> <month> December </month> <year> 1995. </year>
Reference: [5] <author> D. D. Kandlur, K. G. Shin, and D. Ferrari, </author> <title> "Real-time communication in multi-hop networks," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 5, no. 10, </volume> <pages> pp. 1044-1056, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: On-line admission control has been used to guarantee predictability of services where request patterns are not known in advance, e.g., establishment requests of real-time channels <ref> [5] </ref>. This concept has also been applied to resource reservation for dynamically-arriving real-time tasks, e.g., the Spring Kernel [6] and Dreams real-time system [7]. A main concern of this approach is predictability. <p> The application is composed of a set of tasks, each of which requires a set of resources/services. We are concerned mainly with long-lived services that need to hold reserved resources for an extended period of time, such as processor capacity reservation [12] and communication connection establishment services <ref> [5] </ref>. Our negotiation model is centered around three simple abstractions: QoS levels, rewards, and rejection penalty . A client requesting service specifies in its request a set of negotiation options and the penalty of rejecting the request derived from the expected utility of the requested service.
Reference: [6] <author> J. A. Stankovic and K. Ramamritham, </author> <title> "The Spring Kernel: A new paradigm for real-time systems," </title> <journal> IEEE Software, </journal> <pages> pp. 62-72, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: On-line admission control has been used to guarantee predictability of services where request patterns are not known in advance, e.g., establishment requests of real-time channels [5]. This concept has also been applied to resource reservation for dynamically-arriving real-time tasks, e.g., the Spring Kernel <ref> [6] </ref> and Dreams real-time system [7]. A main concern of this approach is predictability. Run-time guarantees given to admitted requests are never revoked even if they result in rejecting subsequently-arriving more important requests competing for the same resources.
Reference: [7] <author> S. Sommer and J. Potter, </author> <title> "Operating system extensions for dynamic real-time applications," </title> <booktitle> in IEEE Real-Time Systems Symposium, </booktitle> <pages> pp. 45-50, </pages> <address> Washington, DC, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: On-line admission control has been used to guarantee predictability of services where request patterns are not known in advance, e.g., establishment requests of real-time channels [5]. This concept has also been applied to resource reservation for dynamically-arriving real-time tasks, e.g., the Spring Kernel [6] and Dreams real-time system <ref> [7] </ref>. A main concern of this approach is predictability. Run-time guarantees given to admitted requests are never revoked even if they result in rejecting subsequently-arriving more important requests competing for the same resources.
Reference: [8] <author> R. Clark, E. Jensen, and F. Reynolds, </author> <title> "An architectural overview of the Alpha real-time distributed kernel," </title> <booktitle> in Proceedings of the USENIX Workshop on Microkernels and other Kernel Architectures, </booktitle> <year> 1992. </year>
Reference-contexts: In soft real-time systems, services are more concerned with maximizing overall utility (by serving the most important request first) than guaranteeing reserved resources for individual requests. Priority driven services can generally be categorized this way, and are supported in real-time kernels such as Alpha <ref> [8] </ref> and Mach [9]. Under overload conditions, lower priority tasks are denied service in favor of more important tasks. In the Rialto operating system [10], a resource planner attempts to dynamically maximize user-perceived utility of the entire system.
Reference: [9] <author> H. Tokuda, T. Nakajima, and P. Rao, </author> <title> "Real-time Mach: Towards a predictable real-time system," </title> <booktitle> in Proceedings of the USENIX Mach Workshop, </booktitle> <pages> pp. 73-82, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: In soft real-time systems, services are more concerned with maximizing overall utility (by serving the most important request first) than guaranteeing reserved resources for individual requests. Priority driven services can generally be categorized this way, and are supported in real-time kernels such as Alpha [8] and Mach <ref> [9] </ref>. Under overload conditions, lower priority tasks are denied service in favor of more important tasks. In the Rialto operating system [10], a resource planner attempts to dynamically maximize user-perceived utility of the entire system.
Reference: [10] <author> M. B. Jones and P. J. Leach, </author> <title> "Modular real-time resource management in the rialto operating system," </title> <type> Technical Report MSR-TR-95-16, </type> <institution> Mi-crosoft Research, Advanced Technology Division, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: Priority driven services can generally be categorized this way, and are supported in real-time kernels such as Alpha [8] and Mach [9]. Under overload conditions, lower priority tasks are denied service in favor of more important tasks. In the Rialto operating system <ref> [10] </ref>, a resource planner attempts to dynamically maximize user-perceived utility of the entire system. However, the scheme does not adopt the notion of guaranteeing a reserved amount of resources for the application.
Reference: [11] <author> W. Zhao and K. Ramamritham, </author> <title> "Virtual time CSMA protocols for hard real-time communication," </title> <journal> IEEE Transactions of Software Engineering, </journal> <volume> vol. 13, no. 8, </volume> <pages> pp. 938-952, </pages> <year> 1987. </year>
Reference-contexts: Compromises between giving irrevocable service guarantees to arriving requests (in hard real-time system), and maximizing overall system utility (in soft real-time systems) have been addressed. For example, virtual clock based communication schemes <ref> [11] </ref> essentially delay a packet transmission request until its virtual arrival time. This enforces a global priority order, a special case of maximizing utility. Recently, a similar approach has been suggested for guaranteeing dynamic real-time tasks.
Reference: [12] <author> C. Mercer, S. Savage, and H. Tokuda, </author> <title> "Processor capacity reserves: Operating system support for multimedia applications," </title> <booktitle> in Proceedings of the IEEE International Conference on Multimedia Computing and Systems, </booktitle> <pages> pp. 90-99, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: The application is composed of a set of tasks, each of which requires a set of resources/services. We are concerned mainly with long-lived services that need to hold reserved resources for an extended period of time, such as processor capacity reservation <ref> [12] </ref> and communication connection establishment services [5]. Our negotiation model is centered around three simple abstractions: QoS levels, rewards, and rejection penalty .
Reference: [13] <author> D. Seto, J. P. Lehoczky, L. Sha, and K. G. Shin, </author> <title> "On task schedulability in real-time control systems," </title> <booktitle> in IEEE Real-Time Systems Symposium, </booktitle> <pages> pp. 13-21, </pages> <address> Washington, DC, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: For an independent periodic task, the parameters consist of task period, deadline, and execution time. We model period and deadline as negotiable parameters. This represents a significant departure from most scheduling literature, although the authors of <ref> [13] </ref> articulate on the alterability of task periods in real-time control systems using system stability and performance index. Task execution time, on the other hand, depends on the underlying machine speed and thus should not be hardcoded into the client's request.
Reference: [14] <author> T. Abdelzaher, A. Shaikh, F. Jahanian, and K. Shin, "RTCAST: </author> <title> Lightweight multicast for real-time process groups," </title> <booktitle> in IEEE Real-Time Technology and Applications Symposium, </booktitle> <address> Boston, Massachusetts, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Our group membership algorithm is a derivative of <ref> [14] </ref>, and the user interface to this algorithm is the subscribe to pool () call which causes the machine on which the call was executed to join the named pool. When a new machine subscribes (joins), each machine in the pool adds the new member to the group.
Reference: [15] <author> N. C. Hutchinson and L. L. Peterson, </author> <title> "The x-Kernel: An architecture for implementing network protocols," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 17, no. 1, </volume> <pages> pp. 64-76, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: This requires location-independent send () and receive () primitives for inter-task communication. Tasks communicate via location-independent send () and receive () primitives which use local communication buffers on the same machine, and send messages across the network for remote destinations. Our communication protocol stack is implemented using xKer-nel 3.2 <ref> [15] </ref>, and is layered on top of a UDP/IP stack. The communication subsystem architecture on each host is designed to support prioritized, bounded-time message delivery. This architecture has been proposed earlier in the context of implementing real-time channels [16].
Reference: [16] <author> A. Mehra, A. Indiresan, and K. G. Shin, </author> <title> "Structuring communication for quality of service guarantees," </title> <booktitle> in IEEE Real-Time Systems Symposium, </booktitle> <pages> pp. 144-154, </pages> <address> Washington, DC, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: Our communication protocol stack is implemented using xKer-nel 3.2 [15], and is layered on top of a UDP/IP stack. The communication subsystem architecture on each host is designed to support prioritized, bounded-time message delivery. This architecture has been proposed earlier in the context of implementing real-time channels <ref> [16] </ref>.
Reference: [17] <author> S. Liden, </author> <title> "The evolution of flight management systems," </title> <booktitle> in Proceedings of the 1994 IEEE/AIAA Thirteenth Digital Avionics Systems Conference, </booktitle> <pages> pp. 157-169. </pages> <publisher> IEEE, </publisher> <year> 1995. </year>
Reference-contexts: Section 6.3 summarizes the set of tasks, QoS levels, and rewards that describe our application. 6.1 Automated Flight Control Current Flight Management Systems (FMS) ( <ref> [17] </ref>, [18]) perform several functions, including flight planning, navigation, guidance, and control. The flight planner computes waypoint trajectories, then during flight, the navigator uses sensor data to maintain a current aircraft state estimate.
Reference: [18] <author> J. Schreur, </author> <title> "B737 flight management computer flight plan trajectory computation and analysis," </title> <booktitle> in Proceedings of the American Control Conference, </booktitle> <pages> pp. 3419-3429, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Section 6.3 summarizes the set of tasks, QoS levels, and rewards that describe our application. 6.1 Automated Flight Control Current Flight Management Systems (FMS) ( [17], <ref> [18] </ref>) perform several functions, including flight planning, navigation, guidance, and control. The flight planner computes waypoint trajectories, then during flight, the navigator uses sensor data to maintain a current aircraft state estimate.
Reference: [19] <author> E. M. Atkins. </author> <title> Reasoning About and In Time when Building Plans for Safe, Fully-Automated Aircraft Flight. </title> <type> Ph.D. Thesis Proposal, </type> <month> December </month> <year> 1996. </year>
Reference-contexts: Our controller may also command a secondary actuator set that improves flight performance but is not critical for flight safety. Secondary actuators include the afterburner for extra engine thrust, and flaps and speed brake used to enhance slow-airspeed control. In a parallel research effort <ref> [19] </ref> a set of linear controllers have been implemented to calculate the primary actuator commands to achieve the desired reference altitude (z ref ) and heading (h ref ). Controller state includes altitude z, heading h, pitch, p, and roll r. <p> Controller state includes altitude z, heading h, pitch, p, and roll r. Equation (1) shows the control laws used during our experiments, adopted from those used in [1]. In higher-performance QoS levels (see Section 6.3), the controller also sends discrete-valued commands to the secondary actuator set (described in <ref> [19] </ref>). 0 elevator ailerons rudder 1 0 B B B z ref z p r 1 C C C (1) 0 K 1 0 K p 1 K d 1 0 0 0 K 3 0 0 K p 3 K d 3 A 6.2 Computing QoS Levels and Rewards Our <p> The reward decrease corresponding to degrading a task from one QoS level to another, or rejecting a task altogether, is computed from the corresponding increase in failure probability. The CIRCA planner computes a maximum period for each task based on the notion of preempting TTFs <ref> [19] </ref>. For any state, an outgoing TTF is considered preempted if its probability is below the specified threshold. To define alternative QoS levels, CIRCA's planner may compute different task periods based on a set of alternative TTF probability thresholds.
Reference: [20] <author> R. Rainey. </author> <title> ACM: The Aerial Combat Simulation for X11, </title> <month> February </month> <year> 1994. </year>
Reference-contexts: A complete set of task QoS levels may be developed by considering all TTF probability thresholds. 6.3 Description of Flight Tasks We have used the Aerial Combat (ACM) F-16 flight simulator <ref> [20] </ref> for all flight tests. ACM runs on a Sun workstation with socket connection to the real-time execution platform.
References-found: 20

