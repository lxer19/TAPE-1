URL: http://www.research.microsoft.com/crypto/papers/rfe.ps
Refering-URL: http://www.research.microsoft.com/crypto/
Root-URL: http://www.research.microsoft.com
Title: Receipt-Free Secret-Ballot Elections (Extended Abstract)  
Author: Josh Benaloh and Dwight Tuinstra 
Affiliation: Clarkson University  
Abstract: Prior verifiable secret-ballot election protocols all suffer from a common defect which renders them unsuitable for practical use: they allow voters to (if they wish) carry away from the protocol receipts which can be used to prove to others how they voted. This simple defect enables vote buying and coercion which are impractical in current physical election systems due to the "plausible deniability" offered by a voting booth. This defect is embedded, not only within prior election protocols, but within all of the more general protocols for collective computation of a public function from private inputs. This paper presents the first verifiable secret-ballot election protocols in which participants are unable to prove to others how they voted. 
Abstract-found: 1
Intro-found: 1
Reference: [Arro63] <author> Arrow, K. </author> <title> Social Choice and Individual Values. </title> <publisher> John Wiley and Sons, </publisher> <address> New York (1963). </address>
Reference: [Baba85] <author> Babai, L. </author> <title> "Trading Group Theory for Randomness." </title> <booktitle> Proc. 17 th ACM Symp. on Theory of Computing, </booktitle> <address> Providence, RI (May 1985), </address> <pages> 421-429. </pages>
Reference: [Beav89] <author> Beaver, D. </author> <title> "Multiparty Protocols Tolerating Half Faulty Processors." </title> <booktitle> Crypto '89, </booktitle> <address> Santa Barbara, CA (Aug. </address> <year> 1989), </year> <pages> 560-572. </pages>
Reference-contexts: was subsequently subsumed by a line of research on general collective computing techniques which allow joint computation of a public output of any computable function based on private inputs. (The election function is a relatively simple special case corresponding roughly to addition.) Work here includes [GMW87], [BGW88], [CCD88], [BeGo89], [BIBe89], <ref> [Beav89] </ref>, [RaBO89], [BFKR90], and [Beav91]. However, these protocols also allow participants to reveal their private inputs if they so choose. Hence, despite claims made within some of this literature, these methods are not suitable for secret-ballot elections.
Reference: [Beav91] <author> Beaver, D. </author> <title> "Foundations of Secure Interactive Computing." </title> <booktitle> Crypto '91, </booktitle> <address> Santa Barbara, CA (Aug. </address> <year> 1991), </year> <pages> 377-391. </pages>
Reference-contexts: a line of research on general collective computing techniques which allow joint computation of a public output of any computable function based on private inputs. (The election function is a relatively simple special case corresponding roughly to addition.) Work here includes [GMW87], [BGW88], [CCD88], [BeGo89], [BIBe89], [Beav89], [RaBO89], [BFKR90], and <ref> [Beav91] </ref>. However, these protocols also allow participants to reveal their private inputs if they so choose. Hence, despite claims made within some of this literature, these methods are not suitable for secret-ballot elections.
Reference: [BeGo89] <author> Beaver, D. and Goldwasser, S. </author> <title> "Multi-party Computation with Faulty Majority." </title> <booktitle> Proc. 30 th IEEE Symp. on Foundations of Computer Science, </booktitle> <address> Research Triangle Park, NC (Oct.-Nov. </address> <year> 1989), </year> <pages> 468-473. </pages>
Reference-contexts: election work was subsequently subsumed by a line of research on general collective computing techniques which allow joint computation of a public output of any computable function based on private inputs. (The election function is a relatively simple special case corresponding roughly to addition.) Work here includes [GMW87], [BGW88], [CCD88], <ref> [BeGo89] </ref>, [BIBe89], [Beav89], [RaBO89], [BFKR90], and [Beav91]. However, these protocols also allow participants to reveal their private inputs if they so choose. Hence, despite claims made within some of this literature, these methods are not suitable for secret-ballot elections.
Reference: [Bena86a] <author> Benaloh, J. </author> <title> "Cryptographic Capsules: A Disjunctive Primitive for Interactive Protocols." </title> <booktitle> Crypto '86, </booktitle> <address> Santa Barbara, CA (Aug. </address> <year> 1986), </year> <pages> 213-222. </pages>
Reference-contexts: Section 5 will describe how privacy can be enhanced by distributing the power of the voting authority across many agents. In this first protocol, a ballot is an ordered pair comprising an encrypted 0 and an encrypted 1 in random order (see <ref> [Bena86a] </ref>), created by the authority. The authority uses the beacon to provide an (interactive) proof (see [GMR85]) which, from an observer's point of view, shows that the ballot is indeed of this form but does not reveal the ordering.
Reference: [Bena86b] <author> Benaloh, J. </author> <title> "Secret Sharing Homomor-phisms: Keeping Shares of a Secret Secret." </title> <booktitle> Crypto '86, </booktitle> <address> Santa Barbara, CA (Aug. </address> <year> 1986), </year> <pages> 251-260. </pages>
Reference: [Bena87] <author> Benaloh, J. </author> <title> "Verifiable Secret-Ballot Elections." </title> <type> Ph.D. </type> <institution> Thesis presented at Yale University, </institution> <address> New Haven, CT (Dec. </address> <year> 1987). </year> <note> (Available as TR-561, </note> <institution> Yale University, Department of Computer Science, </institution> <address> New Haven, CT (Sep. </address> <year> 1987).) </year>
Reference-contexts: The reasonable work in this area includes [DLM82], [Merr83], [Yao82], [Chau81], [CoFi85], [Chau86], [BeYu86], and <ref> [Bena87] </ref>. In all of these protocols, however, it is a simple matter for a voter to, at a later time, show to a third party the vote cast in an election. <p> to compute x 2 f0; 1g from E (x) with probability 1 2 +" is equivalent to the ability to compute x 2 f0; 1; : : : ; r 1g from E (x) with probability 1 r + ".] One such probabilistic encryption method is given in [CoFi85] and <ref> [Bena87] </ref> under the assumption that "higher residuosity" is not polynomial time computable. The mechanics of this method are described briefly in the appendix. (See [Bena94] for a description of this method and its properties.) 3 A Scaled-Down Election Protocol In this section, we present a scaled-down election protocol.
Reference: [Bena94] <author> Benaloh, J. </author> <title> "Dense Probabilistic Encryption." </title> <booktitle> Proc. SAC '94 Workshop on Selected Areas of Cryptography, </booktitle> <address> Kingston, </address> <note> ON (May 1994). </note>
Reference-contexts: The mechanics of this method are described briefly in the appendix. (See <ref> [Bena94] </ref> for a description of this method and its properties.) 3 A Scaled-Down Election Protocol In this section, we present a scaled-down election protocol. There is only one tallying authority, and this authority has the ability to decrypt and read all votes.
Reference: [BeYu86] <author> Benaloh, J. and Yung, M. </author> <title> "Distributing the Power of a Government to Enhance the Privacy of Voters." </title> <booktitle> Proc. 5 th ACM Symp. on Principles of Distributed Computing, </booktitle> <address> Calgary, AB (Aug. </address> <year> 1986), </year> <pages> 52-62. </pages>
Reference-contexts: The reasonable work in this area includes [DLM82], [Merr83], [Yao82], [Chau81], [CoFi85], [Chau86], <ref> [BeYu86] </ref>, and [Bena87]. In all of these protocols, however, it is a simple matter for a voter to, at a later time, show to a third party the vote cast in an election.
Reference: [BFKR90] <author> Beaver, D., Feigenbaum, J., Kilian, J., and Rogaway, P. </author> <title> "Security with Low Communication Overhead." </title> <booktitle> Crypto '90, </booktitle> <address> Santa Barbara, CA (Aug. </address> <year> 1990), </year> <pages> 62-76. </pages>
Reference-contexts: subsumed by a line of research on general collective computing techniques which allow joint computation of a public output of any computable function based on private inputs. (The election function is a relatively simple special case corresponding roughly to addition.) Work here includes [GMW87], [BGW88], [CCD88], [BeGo89], [BIBe89], [Beav89], [RaBO89], <ref> [BFKR90] </ref>, and [Beav91]. However, these protocols also allow participants to reveal their private inputs if they so choose. Hence, despite claims made within some of this literature, these methods are not suitable for secret-ballot elections.
Reference: [BGW88] <author> Ben-Or, M., Goldwasser, S., and Wig-derson, A. </author> <title> "Completeness Theorems for Non-Cryptographic Fault-Tolerant Dis tributed Computation." </title> <booktitle> Proc. 20 th ACM Symp. on Theory of Computing, </booktitle> <address> Chicago, IL (May 1988), </address> <pages> 1-10. </pages>
Reference-contexts: The previous election work was subsequently subsumed by a line of research on general collective computing techniques which allow joint computation of a public output of any computable function based on private inputs. (The election function is a relatively simple special case corresponding roughly to addition.) Work here includes [GMW87], <ref> [BGW88] </ref>, [CCD88], [BeGo89], [BIBe89], [Beav89], [RaBO89], [BFKR90], and [Beav91]. However, these protocols also allow participants to reveal their private inputs if they so choose. Hence, despite claims made within some of this literature, these methods are not suitable for secret-ballot elections.
Reference: [BIBe89] <author> Bar-Ilan, J. and Beaver, D. </author> <title> "Non-cryptographic Fault-tolerant Computing in a Constant Number of Rounds of Interaction." </title> <booktitle> Proc. 8 th ACM Symp. on Principles of Distributed Computing, </booktitle> <address> Edmonton, AB (Aug. </address> <year> 1989), </year> <pages> 201-209. </pages>
Reference-contexts: work was subsequently subsumed by a line of research on general collective computing techniques which allow joint computation of a public output of any computable function based on private inputs. (The election function is a relatively simple special case corresponding roughly to addition.) Work here includes [GMW87], [BGW88], [CCD88], [BeGo89], <ref> [BIBe89] </ref>, [Beav89], [RaBO89], [BFKR90], and [Beav91]. However, these protocols also allow participants to reveal their private inputs if they so choose. Hence, despite claims made within some of this literature, these methods are not suitable for secret-ballot elections.
Reference: [CaRa93] <author> Cannetti, R. and Rabin, T. </author> <title> "Fast Asynchronous Byzantine Agreement with Optimal Resilience." </title> <booktitle> Proc. 25 th ACM Symp. on Theory of Computing, </booktitle> <address> San Diego, CA (May 1993), </address> <pages> 42-51. </pages>
Reference-contexts: If desired, such public channels could be built out of private channels by cryptographic means (for instance, using digital signatures as in [RSA78]) or by Byzan-tine agreement protocols (see, for example, [GaMo93] or <ref> [CaRa93] </ref>). Some subset of the processes are designated as voters, and each voter has two separate processes denoted V 0 and V 1 . The tally of an election is defined to be the number of voters who ran the V 1 protocol.
Reference: [CCD88] <author> Chaum, D., Crepeau, C., and Damg-ard, I. </author> <title> "Multiparty Uncondition ally Secure Protocols." </title> <booktitle> Proc. 20 th ACM Symp. on Theory of Computing, </booktitle> <address> Chicago, IL (May 1988), </address> <pages> 11-19. </pages>
Reference-contexts: previous election work was subsequently subsumed by a line of research on general collective computing techniques which allow joint computation of a public output of any computable function based on private inputs. (The election function is a relatively simple special case corresponding roughly to addition.) Work here includes [GMW87], [BGW88], <ref> [CCD88] </ref>, [BeGo89], [BIBe89], [Beav89], [RaBO89], [BFKR90], and [Beav91]. However, these protocols also allow participants to reveal their private inputs if they so choose. Hence, despite claims made within some of this literature, these methods are not suitable for secret-ballot elections.
Reference: [CGMA85] <author> Chor, B., Goldwasser, S., Micali, S., and Awerbuch, B. </author> <title> "Verifiable Secret Sharing and Achieving Simultaneity in the Presence of Faults." </title> <booktitle> Proc. 26 th IEEE Symp. on Foundations of Computer Science, </booktitle> <address> Portland, OR (Oct. </address> <year> 1985), </year> <pages> 383-395. </pages>
Reference: [Chau81] <author> Chaum, D. </author> <title> "Untraceable Electronic Mail, Return Addresses, and Digital Pseudonyms." </title> <journal> Comm. ACM 24, </journal> <volume> 2, </volume> <month> (Feb. </month> <year> 1981), </year> <pages> 84-88. </pages>
Reference-contexts: The reasonable work in this area includes [DLM82], [Merr83], [Yao82], <ref> [Chau81] </ref>, [CoFi85], [Chau86], [BeYu86], and [Bena87]. In all of these protocols, however, it is a simple matter for a voter to, at a later time, show to a third party the vote cast in an election.
Reference: [Chau86] <author> Chaum, D. </author> <title> "Elections with Unconditionally Secret-Ballots and Disruption Equivalent to Breaking RSA." </title> <note> unpublished manuscript (1986). </note>
Reference-contexts: The reasonable work in this area includes [DLM82], [Merr83], [Yao82], [Chau81], [CoFi85], <ref> [Chau86] </ref>, [BeYu86], and [Bena87]. In all of these protocols, however, it is a simple matter for a voter to, at a later time, show to a third party the vote cast in an election.
Reference: [CoFi85] <author> Cohen, J. and Fischer, M. </author> <title> "A Ro--bust and Verifiable Cryptographically Se cure Election Scheme." </title> <booktitle> Proc. 26 th IEEE Symp. on Foundations of Computer Science, </booktitle> <address> Portland, OR (Oct. </address> <year> 1985), </year> <pages> 372-382. </pages>
Reference-contexts: The reasonable work in this area includes [DLM82], [Merr83], [Yao82], [Chau81], <ref> [CoFi85] </ref>, [Chau86], [BeYu86], and [Bena87]. In all of these protocols, however, it is a simple matter for a voter to, at a later time, show to a third party the vote cast in an election. <p> the ability to compute x 2 f0; 1g from E (x) with probability 1 2 +" is equivalent to the ability to compute x 2 f0; 1; : : : ; r 1g from E (x) with probability 1 r + ".] One such probabilistic encryption method is given in <ref> [CoFi85] </ref> and [Bena87] under the assumption that "higher residuosity" is not polynomial time computable. The mechanics of this method are described briefly in the appendix. (See [Bena94] for a description of this method and its properties.) 3 A Scaled-Down Election Protocol In this section, we present a scaled-down election protocol.
Reference: [Cohe86] <author> Cohen, J. </author> <title> "Improving Privacy in Cryptographic Elections." </title> <institution> TR-454, Yale University, Department of Computer Science, </institution> <address> New Haven, CT (Feb. </address> <year> 1986). </year>
Reference: [DiHe76] <author> Diffie, W. and Hellman, M. </author> <title> "New Directions in Cryptography." </title> <journal> IEEE Trans. on Information Theory 22, </journal> <volume> 6, </volume> <month> (Nov. </month> <year> 1976), </year> <pages> 644-654. </pages>
Reference: [DLM82] <author> DeMillo, R., Lynch, N. and Merritt, M. </author> <title> "Cryptographic Protocols." </title> <booktitle> Proc. 14 th ACM Symp. on Theory of Computing, </booktitle> <address> San Francisco, CA (May 1982), </address> <pages> 383-400. </pages>
Reference-contexts: The reasonable work in this area includes <ref> [DLM82] </ref>, [Merr83], [Yao82], [Chau81], [CoFi85], [Chau86], [BeYu86], and [Bena87]. In all of these protocols, however, it is a simple matter for a voter to, at a later time, show to a third party the vote cast in an election.
Reference: [GaMo93] <author> Garay, J. and Moses, Y. </author> <title> "Fully Polynomial Byzantine Agreement in t + 1 Rounds." </title> <booktitle> Proc. 25 th ACM Symp. on Theory of Computing, </booktitle> <address> San Diego, CA (May 1993), </address> <pages> 31-41. </pages>
Reference-contexts: If desired, such public channels could be built out of private channels by cryptographic means (for instance, using digital signatures as in [RSA78]) or by Byzan-tine agreement protocols (see, for example, <ref> [GaMo93] </ref> or [CaRa93]). Some subset of the processes are designated as voters, and each voter has two separate processes denoted V 0 and V 1 . The tally of an election is defined to be the number of voters who ran the V 1 protocol.
Reference: [GMR85] <author> Goldwasser, S., Micali, S., and Rack-off C. </author> <title> "The Knowledge Complexity of Interactive Proof-Systems." </title> <booktitle> Proc. 17 th ACM Symp. on Theory of Computing, </booktitle> <address> Providence, RI (May 1985), </address> <pages> 291-304. </pages>
Reference-contexts: In this first protocol, a ballot is an ordered pair comprising an encrypted 0 and an encrypted 1 in random order (see [Bena86a]), created by the authority. The authority uses the beacon to provide an (interactive) proof (see <ref> [GMR85] </ref>) which, from an observer's point of view, shows that the ballot is indeed of this form but does not reveal the ordering.
Reference: [GMW87] <author> Goldreich, O., Micali, S., and Wig-derson, A. </author> <title> "How to Play Any Mental Game or A Completeness Theorem for Protocols with Honest Majority." </title> <booktitle> Proc. 19 th ACM Symp. on Theory of Computing, </booktitle> <address> New York, NY (May 1987), </address> <pages> 218-229. </pages>
Reference-contexts: The previous election work was subsequently subsumed by a line of research on general collective computing techniques which allow joint computation of a public output of any computable function based on private inputs. (The election function is a relatively simple special case corresponding roughly to addition.) Work here includes <ref> [GMW87] </ref>, [BGW88], [CCD88], [BeGo89], [BIBe89], [Beav89], [RaBO89], [BFKR90], and [Beav91]. However, these protocols also allow participants to reveal their private inputs if they so choose. Hence, despite claims made within some of this literature, these methods are not suitable for secret-ballot elections.
Reference: [GoMi84] <author> Goldwasser, S. and Micali, S. </author> <title> "Probabilistic Encryption." </title> <journal> J. Comp. Sys. Sci. </journal> <volume> 28, </volume> <year> (1984), </year> <pages> 270-299. </pages>
Reference: [Kran86] <author> Kranakis, E. </author> <title> Primality and Cryptography. </title> <publisher> John Wiley and Sons, </publisher> <address> New York (1986). </address>
Reference: [Merr83] <author> Merritt, M. </author> <title> "Cryptographic Protocols." </title> <type> Ph.D. </type> <institution> Thesis presented at Georgia Institute of Technology (Feb. </institution> <year> 1983). </year>
Reference-contexts: The reasonable work in this area includes [DLM82], <ref> [Merr83] </ref>, [Yao82], [Chau81], [CoFi85], [Chau86], [BeYu86], and [Bena87]. In all of these protocols, however, it is a simple matter for a voter to, at a later time, show to a third party the vote cast in an election.
Reference: [Rabi83] <author> Rabin, M. </author> <title> "Transaction Protection by Beacons." </title> <journal> J. Comp. Sys. Sci. </journal> <volume> 27, </volume> <month> 2 (Oct. </month> <year> 1983), </year> <pages> 256-267. </pages>
Reference-contexts: Furthermore, while the voter is in the voting booth no other process may observe the voter's actions or the information arriving on the voter's input channels. We also assume the existence of a beacon (see <ref> [Rabi83] </ref>) which produces an unlimited supply of unpredictable bits. Such a beacon could either be constructed physically (perhaps as a gauge monitoring the activity of a "natural random source") or synthetically by XOR-ing bits supplied by agents of the election system.
Reference: [RaBO89] <author> Rabin, T. and Ben-Or, M. </author> <title> "Verifiable Secret Sharing and Multiparty Protocols with Honest Majority." </title> <booktitle> Proc. 21 st ACM Symp. on Theory of Computing, </booktitle> <address> Seattle, WA (May 1989), </address> <pages> 73-85. </pages>
Reference-contexts: subsequently subsumed by a line of research on general collective computing techniques which allow joint computation of a public output of any computable function based on private inputs. (The election function is a relatively simple special case corresponding roughly to addition.) Work here includes [GMW87], [BGW88], [CCD88], [BeGo89], [BIBe89], [Beav89], <ref> [RaBO89] </ref>, [BFKR90], and [Beav91]. However, these protocols also allow participants to reveal their private inputs if they so choose. Hence, despite claims made within some of this literature, these methods are not suitable for secret-ballot elections.
Reference: [RAD78] <author> Rivest, R., Adleman, L., and Der-touzos, M. </author> <title> "On Data Banks and Privacy Homomorphisms." Foundations of Secure Computation, </title> <editor> ed. by R. A. DeMillo, et. al. </editor> <publisher> Academic Press, </publisher> <address> New York, </address> <year> (1978), </year> <pages> 169-179. </pages>
Reference: [RSA78] <author> Rivest, R., Shamir, A., and Adleman, L. </author> <title> "A Method for Obtaining Digital Signatures and Public-key Cryptosystems." </title> <journal> Comm. ACM 21, </journal> <month> 2 (Feb. </month> <year> 1978), </year> <pages> 120-126. </pages>
Reference-contexts: If desired, such public channels could be built out of private channels by cryptographic means (for instance, using digital signatures as in <ref> [RSA78] </ref>) or by Byzan-tine agreement protocols (see, for example, [GaMo93] or [CaRa93]). Some subset of the processes are designated as voters, and each voter has two separate processes denoted V 0 and V 1 .
Reference: [Sham79] <author> Shamir, A. </author> <title> "How to Share a Secret." </title> <journal> Comm. ACM 22, </journal> <volume> 11 (Nov. </volume> <year> 1979), </year> <pages> 612-613. </pages>
Reference-contexts: The protocol can be set such that it is necessary for all authorities to collude in order to determine how any individual vote was cast. However, this would also allow an election to be halted by a single faulty authority. To alleviate this problem, secret sharing methods (see <ref> [Sham79] </ref>) are used to introduce fault-tolerance.
Reference: [Stra80] <author> Straffin, P. </author> <title> Topics in the Theory of Voting. </title> <publisher> Birkhauser, </publisher> <address> Boston, </address> <year> (1980). </year>
Reference: [Yao82] <author> Yao, A. </author> <title> "Protocols for Secure Computa tions." </title> <booktitle> Proc. 23 rd IEEE Symp. on Foundations of Computer Science, </booktitle> <address> Chicago, IL (Nov. </address> <year> 1982), </year> <pages> 160-164. </pages>
Reference-contexts: The reasonable work in this area includes [DLM82], [Merr83], <ref> [Yao82] </ref>, [Chau81], [CoFi85], [Chau86], [BeYu86], and [Bena87]. In all of these protocols, however, it is a simple matter for a voter to, at a later time, show to a third party the vote cast in an election.
References-found: 35

