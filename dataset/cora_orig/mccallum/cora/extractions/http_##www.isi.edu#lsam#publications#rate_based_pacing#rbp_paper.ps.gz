URL: http://www.isi.edu/lsam/publications/rate_based_pacing/rbp_paper.ps.gz
Refering-URL: http://www.isi.edu/lsam/publications/rate_based_pacing/index.html
Root-URL: http://www.isi.edu
Title: Rate Based Pacing for TCP  
Author: Vikram Visweswaraiah and John Heidemann 
Date: June 17, 1997  
Abstract: TCP's congestion avoidance mechanisms are not tuned for request-response traffic like HTTP. Prior work on HTTP performance has shown that enhancements to HTTP (P-HTTP) can result in poorer performance than expected. This suggests that certain changes may need to be made to TCP to obtain the expected performance. The increasing use of the World Wide Web and the use of HTTP in areas other than the Web require a clearer understanding of the need for these changes and the problems that would exist without the changes. One such problem has to do with some TCP implementations forcing slow-start in the middle of a connection that has been idle for a certain amount of time, even if there is no packet loss. Other existing TCP implementations do not treat idle time as a special case and use the prior value of the congestion window to send data. Both extremes lead to poor performance of P-HTTP over TCP. This document describes the motivation and implementation of rate based pacing for TCP, which provides a good compromise between the two extremes. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jeffrey C. </author> <title> Mogul. </title> <booktitle> The case for persistent-connection HTTP. In Proceedings of the SIGCOMM '95, </booktitle> <pages> pages 299-313. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1995. </year>
Reference-contexts: One such enhancement, only recently being standardized in HTTP/1.1, is P-HTTP, an implementation of HTTP which avoids the need for multiple TCP connections across a transaction to the same server <ref> [1] </ref>. However, P-HTTP interacts with current TCP implementations in a manner that degrades performance [2]. One of the interactions has to do with TCP's congestion avoidance mechanisms, which is examined in this document. We describe the problem, named "slow-start restart" and propose a possible solution.
Reference: [2] <author> John Heidemann. </author> <title> Performance interactions between P-HTTP and TCP implementations. </title> <journal> ACM Computer Communication Review, </journal> <volume> 27(2):tba, </volume> <month> April </month> <year> 1997. </year> <note> Draft versions were available in 1996 as [Heidemann96b]. </note>
Reference-contexts: One such enhancement, only recently being standardized in HTTP/1.1, is P-HTTP, an implementation of HTTP which avoids the need for multiple TCP connections across a transaction to the same server [1]. However, P-HTTP interacts with current TCP implementations in a manner that degrades performance <ref> [2] </ref>. One of the interactions has to do with TCP's congestion avoidance mechanisms, which is examined in this document. We describe the problem, named "slow-start restart" and propose a possible solution. <p> This can degrade the performance of layers that TCP provides service to, a strong example being P-HTTP. Prior work has suggested that this "slow-start restart" problem is a contributor to poor performance of P-HTTP over TCP <ref> [2] </ref>. One way of solving the problem is to send segments at a certain "pace" until we get the ACK clock running again. <p> This is an excellent compromise between the two extremes of dumping segments back to back and restarting with slow-start. We believe that this implementation will give much better performance, at least for the situations mentioned in <ref> [2] </ref>. 5 Conclusions and Future Work Restarting with slow-start in the middle of a connection can lead to poor performance. At the same time, dumping segments all at once can mean overrunning intermediate router queues, leading to a drop in throughput.
Reference: [3] <author> L. Brakmo and L. Peterson. </author> <title> TCP Vegas: End to end congestion avoidance on a global internet. </title> <journal> IEEE Journal of Selected Areas in Communication, </journal> <volume> 13(8) </volume> <pages> 1465-1480, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: A mechanism that clocks the segments sent in RBP. Idle time detection is done by some TCP implementations (4.4 BSD, Linux 2.x). Instead of forcing slow start upon detection of idle time, we modify the behavior to RBP. TCP Vegas gives us a method for bandwidth estimation <ref> [3] </ref>. We borrowed the Vegas port of USC for our implementation [4]. The RBP window and the timing between segments in that window are based on functions of the estimated bandwidth and the RTT.
Reference: [4] <author> J.S. Ahn, Peter B. Danzig, Z. Liu, and L. Yan. </author> <title> TCP Vegas: Emulation and experiment. </title> <booktitle> In Proceedings of the ACM SIGCOMM '95, </booktitle> <pages> page xxx. </pages> <note> ACM, xxx 1995. </note>
Reference-contexts: Idle time detection is done by some TCP implementations (4.4 BSD, Linux 2.x). Instead of forcing slow start upon detection of idle time, we modify the behavior to RBP. TCP Vegas gives us a method for bandwidth estimation [3]. We borrowed the Vegas port of USC for our implementation <ref> [4] </ref>. The RBP window and the timing between segments in that window are based on functions of the estimated bandwidth and the RTT. The segments are clocked by a custom RBP timer which is operational only for the time that RBP is in effect.
Reference: [5] <editor> W. Richard Stevens. TCP/IP Illustrated, </editor> <volume> volume 1. </volume> <publisher> Addison-Wesley, </publisher> <year> 1994. </year> <month> 6 </month>
Reference-contexts: RBP behavior should be observable at the beginning of the second data transfer phase. A program capable of doing such data transfer is Stevens' sock program <ref> [5] </ref>. To compare RBP behavior with the other two extremes (slow-start restart and no slow-start restart), we modified Stevens' sock program to understand setsockopt options for all three cases. This included adding a command line switch capable of taking the following values: TCP RENO RESTART: For slow-start restart.
References-found: 5

