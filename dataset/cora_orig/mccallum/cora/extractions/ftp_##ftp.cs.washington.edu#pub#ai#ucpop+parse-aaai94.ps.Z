URL: ftp://ftp.cs.washington.edu/pub/ai/ucpop+parse-aaai94.ps.Z
Refering-URL: http://www.cs.washington.edu/homes/weld/pubs.html
Root-URL: 
Email: fbarrett, weldg@cs.washington.edu  
Title: Task-Decomposition via Plan Parsing  
Author: Anthony Barrett and Daniel S. Weld 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington,  
Note: To appear, AAAI-94 1  
Abstract: In this paper we present a bottom-up plan parsing approach to task-decomposition. Instead of reducing tasks into actions, we use an incremental parsing algorithm to recognize which partial primitive plans match the schemata. In essence, our approach exploits the observation that schemata are a convenient means for reducing search. We compile the schemata into a declarative search control language (like that used in machine learning research), which rejects plan refinements that cannot be parsed. We demonstrate that neither parsing nor reduction dominates the other on efficiency grounds and provide preliminary empirical results comparing the two. We note that our parsing approach allows convenient comparison (and combination) of different search control technologies, generates minimal plans, and handles expressive languages (e.g., universal quantification and conditional effects) with ease. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Brotsky, D. </author> <year> 1984. </year> <title> An algorithm for parsing flow graphs. </title> <institution> AI-TR-704, MIT AI Lab. </institution>
Reference-contexts: Conclusions We have described a fully implemented task-decomposition planner, ucpop+parse, based on plan parsing. As it stands, ucpop+parse can not handle recursive schemata | they cause the parser to enter an infinite loop. We hope to soon adapt the flow-graph parsing algorithm of <ref> (Brotsky 1984) </ref> in order to circumvent this problem. We also wish to see if derivational analogy (Veloso & Carbonell 1993) can be used to automatically learn decomposition schemata. We showed that neither the reduction nor parsing approach dominates the other in every problem domain.
Reference: <author> Chapman, D. </author> <year> 1987. </year> <title> Planning for conjunctive goals. </title> <booktitle> Artificial Intelligence 32(3) </booktitle> <pages> 333-377. </pages>
Reference-contexts: Instead researchers focussed on noah's idea of partially ordered plan steps and dropped the notion of tasks. For example, tweak <ref> (Chapman 1987) </ref> and snlp (McAllester & Rosenblitt 1991) synthesize plans solely from actions. Subsequent research continued the focus on actions, but explored expressive languages with conditional effects and universal quantification (Pednault 1988, McDermott 1991, Pednault 1991, Penberthy & Weld 1992). <p> We adopt the insight (due to (Erol, Nau, & Hendler 1993)) that task-decomposition can be considered a search for a plan in the intersection of these two sets. Sound and complete partial-order planners such as tweak <ref> (Chapman 1987) </ref>, snlp (McAllester & Rosen-blitt 1991), and ucpop (Penberthy & Weld 1992) generate the solution space directly. Traditional task-decomposition planners use a task reduction process that expands the schema-generated set, then selects for membership in the solution set.
Reference: <author> Currie, K., and Tate, A. </author> <year> 1991. </year> <title> O-plan: the open planning architecture. </title> <booktitle> Artificial Intelligence 52(1) </booktitle> <pages> 49-86. </pages>
Reference-contexts: When tasks and actions interfered with each other, critic functions performed arbitrary plan-transformation repairs. Despite the ubiquity of task-decomposition in "in-dustrial strength" planners such as sipe (Wilkins 1988, Wilkins 1992), and o-plan <ref> (Currie & Tate 1991) </ref>, most fl We appreciate helpful comments and suggestions from Denise Draper, Oren Etzioni, Keith Golden, Nick Kushm-erick, Ying Sun, and Mike Williamson. <p> Readers familiar with non-lin (Tate 1977) or O-plan <ref> (Currie & Tate 1991) </ref> should note that these "circle intervals" correspond to achieve conditions, while intervals whose producer is drawn as a box correspond to supervised conditions. m @ @R ~ ~ ~ ~: ? m -:open open open take-out put-in open in ? at-b manage-contents close :openopen managing the briefcase's
Reference: <author> Erol, K., Nau, D., and Hendler, J. </author> <year> 1993. </year> <title> Toward a general framework for hierarchical task-network planning (extended abstract). </title> <booktitle> In Working Notes of the AAAI Spring Symposium: Foundations of Automatic Planning: The Classical Approach and Beyond. </booktitle> <address> Menlo Park, CA: </address> <publisher> AAAI Press. </publisher>
Reference-contexts: The set of these schema-derived networks thus constitutes a formal language which we call the schema-generated plans. The set of all action sequences that solve a given planning problem (as defined by (Pednault 1991)) constitutes another language, which we call the solution set. We adopt the insight (due to <ref> (Erol, Nau, & Hendler 1993) </ref>) that task-decomposition can be considered a search for a plan in the intersection of these two sets. Sound and complete partial-order planners such as tweak (Chapman 1987), snlp (McAllester & Rosen-blitt 1991), and ucpop (Penberthy & Weld 1992) generate the solution space directly.
Reference: <author> Etzioni, O. </author> <year> 1993. </year> <title> Acquiring search-control knowledge via static analysis. </title> <booktitle> Artificial Intelligence 62(2) </booktitle> <pages> 255-302. </pages>
Reference-contexts: remains: Is there a sound and complete task-decomposition algorithm for an expressive language such as adl (Pednault 1989), i.e. one with conditional effects and universal quantification? Inadequate emphasis on task-decomposition has also had an unfortunate effect on machine learning research for planning, e.g. explanation-based learning (Minton 1988), static domain analysis <ref> (Etzioni 1993, Smith & Peot 1993) </ref>, abstraction (Knoblock 1990, Yang & Tenenberg 1990), case-based planning (Ham-mond 1990), and derivational analogy (Veloso & Car-bonell 1993).
Reference: <author> Gil, Y. </author> <year> 1991. </year> <title> A specification of process planning for PRODIGY. </title> <institution> CMU-CS-91-179, Carnegie-Mellon University. </institution>
Reference-contexts: To illustrate this feature, we tested ucpop+parse on the example briefcase problem and by posing two problems in each of two more complex domains: Tyre-world (Russell 1992) and Process Planning <ref> (Gil 1991) </ref>. In Tyreworld, the problems were to remove a tire from an automobile's hub, and to completely change a flat tire. The shortest solutions for these problems require 7 and 19 steps respectively.
Reference: <author> Hammond, K. </author> <year> 1990. </year> <title> Explaining and repairing plans that fail. </title> <booktitle> Artificial Intelligence 45 </booktitle> <pages> 173-228. </pages>
Reference: <author> Kambhampati, S., and Hendler, J. </author> <year> 1992. </year> <title> A validation structure based theory of plan modification and reuse. </title> <booktitle> Artificial Intelligence 55 </booktitle> <month> 193-258. </month> <title> 3 This corresponds to the definition of completeness used in (Erol, Nau, & Hendler 1993); an schema-based planner is likely to be incomplete with respect to the primitive solution set. </title>
Reference-contexts: In our algorithm, a partial-order planner synthesizes networks of actions, and an incremental parser identifies the decomposition that corresponds to the actions. We demonstrate that neither the reduction nor parsing approach strictly dominates the other on efficiency 1 The priar system <ref> (Kambhampati & Hendler 1992) </ref> is a rare exception. grounds. However, our parsing approach provides two advantages: 1.
Reference: <author> Knoblock, C. </author> <year> 1990. </year> <title> Learning abstraction hierarchies for problem solving. </title> <booktitle> In Proc. 8th Nat. Conf. on A.I., </booktitle> <pages> 923-928. </pages>
Reference-contexts: task-decomposition algorithm for an expressive language such as adl (Pednault 1989), i.e. one with conditional effects and universal quantification? Inadequate emphasis on task-decomposition has also had an unfortunate effect on machine learning research for planning, e.g. explanation-based learning (Minton 1988), static domain analysis (Etzioni 1993, Smith & Peot 1993), abstraction <ref> (Knoblock 1990, Yang & Tenenberg 1990) </ref>, case-based planning (Ham-mond 1990), and derivational analogy (Veloso & Car-bonell 1993). It is unfortunate that the vast majority 1 of research on speedup learning has ignored task-decomposition planners, since defining and using tasks provides a very successful form of search control. <p> These problems required 6 and 10 steps respectively. The purpose of our experiment was to explore interactions between plan parsing and three different search strategies: vanilla best-first; best first search with a search space structured according to an abstraction hierarchy generated by the alpine machine learning algorithm <ref> (Knoblock 1990) </ref>; and domain-dependent, hand-coded rules. To create our Tyreworld parser we defined 5 tasks for getting tools, inflating tires, removing tires, installing tires, and cleaning up.
Reference: <author> McAllester, D., and Rosenblitt, D. </author> <year> 1991. </year> <title> Systematic nonlinear planning. </title> <booktitle> In Proc. 9th Nat. Conf. on A.I., </booktitle> <pages> 634-639. </pages>
Reference-contexts: Instead researchers focussed on noah's idea of partially ordered plan steps and dropped the notion of tasks. For example, tweak (Chapman 1987) and snlp <ref> (McAllester & Rosenblitt 1991) </ref> synthesize plans solely from actions. Subsequent research continued the focus on actions, but explored expressive languages with conditional effects and universal quantification (Pednault 1988, McDermott 1991, Pednault 1991, Penberthy & Weld 1992). <p> We adopt the insight (due to (Erol, Nau, & Hendler 1993)) that task-decomposition can be considered a search for a plan in the intersection of these two sets. Sound and complete partial-order planners such as tweak (Chapman 1987), snlp <ref> (McAllester & Rosen-blitt 1991) </ref>, and ucpop (Penberthy & Weld 1992) generate the solution space directly. Traditional task-decomposition planners use a task reduction process that expands the schema-generated set, then selects for membership in the solution set. <p> The returned set contains plans created by adding a single causal link <ref> (McAllester & Rosenblitt 1991) </ref> to the original plan.
Reference: <author> McDermott, D. </author> <year> 1991. </year> <title> Regression planning. </title> <journal> International Journal of Intelligent Systems 6 </journal> <pages> 357-416. </pages>
Reference: <author> Minton, S., Carbonell, J. G., Knoblock, C. A., Kuokka, D. R., Etzioni, O., and Gil, Y. </author> <year> 1989. </year> <title> Explanation-based learning: A problem-solving perspective. </title> <booktitle> Artificial Intelligence 40 </booktitle> <pages> 63-118. </pages> <note> Available as technical report CMU-CS-89-103. </note>
Reference-contexts: Note that the information specified by a protection interval's producer is equivalent to a prodigy-style search control rule <ref> (Minton et al. 1989) </ref> which rejects attempts to achieve goals with inappropriate actions. As explained later, ucpop+parse compiles schemata into a plan parser using rules of this form. manage-contents task.
Reference: <author> Minton, S. </author> <year> 1988. </year> <title> Quantitative results concerning the utility of explanation-based learning. </title> <booktitle> In Proc. 7th Nat. Conf. on A.I., </booktitle> <pages> 564-569. </pages>
Reference-contexts: Hence an interesting question remains: Is there a sound and complete task-decomposition algorithm for an expressive language such as adl (Pednault 1989), i.e. one with conditional effects and universal quantification? Inadequate emphasis on task-decomposition has also had an unfortunate effect on machine learning research for planning, e.g. explanation-based learning <ref> (Minton 1988) </ref>, static domain analysis (Etzioni 1993, Smith & Peot 1993), abstraction (Knoblock 1990, Yang & Tenenberg 1990), case-based planning (Ham-mond 1990), and derivational analogy (Veloso & Car-bonell 1993).
Reference: <author> Pednault, E. </author> <year> 1988. </year> <title> Synthesizing plans that contain actions with context-dependent effects. </title> <booktitle> Computational Intelligence 4(4) </booktitle> <pages> 356-372. </pages>
Reference-contexts: For example, tweak (Chapman 1987) and snlp (McAllester & Rosenblitt 1991) synthesize plans solely from actions. Subsequent research continued the focus on actions, but explored expressive languages with conditional effects and universal quantification <ref> (Pednault 1988, McDermott 1991, Pednault 1991, Penberthy & Weld 1992) </ref>. Only recently have formalists investigated task-decomposition (Yang 1990, Erol, Nau, & Hendler 1993), but their formulations assume the strips action representation. <p> Task-Decomposition Problems We illustrate task-decomposition with an extension of the briefcase domain <ref> (Pednault 1988) </ref>, which we encode with five primitive operators. Carry moves the briefcase and all of its contents, open and close act on the briefcase, while put-in and take-out respectively add and remove items from the briefcase if it is open (Table 1).
Reference: <author> Pednault, E. </author> <year> 1989. </year> <title> ADL: Exploring the middle ground between STRIPS and the situation calculus. </title> <booktitle> In Proc. 1st Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> 324-332. </pages>
Reference-contexts: Only recently have formalists investigated task-decomposition (Yang 1990, Erol, Nau, & Hendler 1993), but their formulations assume the strips action representation. Hence an interesting question remains: Is there a sound and complete task-decomposition algorithm for an expressive language such as adl <ref> (Pednault 1989) </ref>, i.e. one with conditional effects and universal quantification? Inadequate emphasis on task-decomposition has also had an unfortunate effect on machine learning research for planning, e.g. explanation-based learning (Minton 1988), static domain analysis (Etzioni 1993, Smith & Peot 1993), abstraction (Knoblock 1990, Yang & Tenenberg 1990), case-based planning (Ham-mond 1990), <p> Carry moves the briefcase and all of its contents, open and close act on the briefcase, while put-in and take-out respectively add and remove items from the briefcase if it is open (Table 1). Note the use of conditional and universally quantified effects in the carry action (see <ref> (Pednault 1989, Penberthy & Weld 1992) </ref> for the action semantics.). open () precondition : :open effect : open close () precondition : open effect : :open take-out (x) precondition : open effect : :in (x ) put-in (x) precondition : 9l at-b (l) ^ at (x ; l ) ^ open
Reference: <author> Pednault, E. </author> <year> 1991. </year> <title> Generalizing nonlinear planning to handle complex goals and actions with context-dependent effects. </title> <booktitle> In Proc. 12th Int. Joint Conf. on A.I. </booktitle>
Reference-contexts: The set of these schema-derived networks thus constitutes a formal language which we call the schema-generated plans. The set of all action sequences that solve a given planning problem (as defined by <ref> (Pednault 1991) </ref>) constitutes another language, which we call the solution set. We adopt the insight (due to (Erol, Nau, & Hendler 1993)) that task-decomposition can be considered a search for a plan in the intersection of these two sets.
Reference: <author> Penberthy, J., and Weld, D. </author> <year> 1992. </year> <title> UCPOP: A sound, complete, partial order planner for ADL. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> 103-114. </pages> <note> Available via FTP from pub/ai/ at cs.washington.edu. </note>
Reference-contexts: We adopt the insight (due to (Erol, Nau, & Hendler 1993)) that task-decomposition can be considered a search for a plan in the intersection of these two sets. Sound and complete partial-order planners such as tweak (Chapman 1987), snlp (McAllester & Rosen-blitt 1991), and ucpop <ref> (Penberthy & Weld 1992) </ref> generate the solution space directly. Traditional task-decomposition planners use a task reduction process that expands the schema-generated set, then selects for membership in the solution set. Plan Parsing in ucpop+parse Our approach breaks from this tradition by reversing the roles of the refinement and testing processes. <p> Parse: Let P arses = extend-parses (P arses; P ). If P arses becomes empty then fail. 5. Go to step 2. Actually, the schemata are compiled into a parser that interacts with the ucpop planner <ref> (Penberthy & Weld 1992) </ref> through its general rule-based search controller. The routine UCPOP-init-plan () takes a problem specification and returns an initial plan consisting solely of a :start action (whose effects encode the initial conditions) and a :goal action (whose preconditions encode the goals). <p> Since ucpop has already been proven sound and complete <ref> (Penberthy & Weld 1992) </ref>, ucpop+parse automatically inherits soundness. In addition, it can be shown to be complete relative to the schema language intersection 3 as long as the parser is complete.
Reference: <author> Russell, S. </author> <year> 1992. </year> <title> Efficient memory-bounded search algorithms. </title> <booktitle> In Proceedings of the Tenth European Conference on Artificial Intelligence. </booktitle> <address> Vienna: </address> <publisher> Wiley. </publisher>
Reference-contexts: To illustrate this feature, we tested ucpop+parse on the example briefcase problem and by posing two problems in each of two more complex domains: Tyre-world <ref> (Russell 1992) </ref> and Process Planning (Gil 1991). In Tyreworld, the problems were to remove a tire from an automobile's hub, and to completely change a flat tire. The shortest solutions for these problems require 7 and 19 steps respectively.
Reference: <author> Sacerdoti, E. </author> <year> 1975. </year> <title> The nonlinear nature of plans. </title> <booktitle> In Proceedings of IJCAI-75, </booktitle> <pages> 206-214. </pages>
Reference-contexts: Introduction noah <ref> (Sacerdoti 1975) </ref> introduced two important innovations: the partial order step representation and the use of schemata to define abstract tasks in terms of primitive actions and other tasks. noah represented plans as partially ordered sets of tasks and actions, and reduced tasks by substituting them with networks of tasks and actions
Reference: <author> Smith, D., and Peot, M. </author> <year> 1993. </year> <title> Postponing threats in partial-order planning. </title> <booktitle> In Proc. 11th Nat. Conf. on A.I., </booktitle> <pages> 500-506. </pages>
Reference-contexts: remains: Is there a sound and complete task-decomposition algorithm for an expressive language such as adl (Pednault 1989), i.e. one with conditional effects and universal quantification? Inadequate emphasis on task-decomposition has also had an unfortunate effect on machine learning research for planning, e.g. explanation-based learning (Minton 1988), static domain analysis <ref> (Etzioni 1993, Smith & Peot 1993) </ref>, abstraction (Knoblock 1990, Yang & Tenenberg 1990), case-based planning (Ham-mond 1990), and derivational analogy (Veloso & Car-bonell 1993).
Reference: <author> Tate, A. </author> <year> 1977. </year> <title> Generating project networks. </title> <booktitle> In Proc. 5th Int. Joint Conf. on A.I., </booktitle> <pages> 888-893. </pages>
Reference-contexts: Readers familiar with non-lin <ref> (Tate 1977) </ref> or O-plan (Currie & Tate 1991) should note that these "circle intervals" correspond to achieve conditions, while intervals whose producer is drawn as a box correspond to supervised conditions. m @ @R ~ ~ ~ ~: ? m -:open open open take-out put-in open in ? at-b manage-contents close
Reference: <author> Veloso, M., and Carbonell, J. </author> <year> 1993. </year> <title> Derivational Analogy in prodigy: Automating Case Acquisition, Storage, and Utilization. </title> <booktitle> Machine Learning 10 </booktitle> <pages> 249-278. </pages>
Reference-contexts: with conditional effects and universal quantification? Inadequate emphasis on task-decomposition has also had an unfortunate effect on machine learning research for planning, e.g. explanation-based learning (Minton 1988), static domain analysis (Etzioni 1993, Smith & Peot 1993), abstraction (Knoblock 1990, Yang & Tenenberg 1990), case-based planning (Ham-mond 1990), and derivational analogy <ref> (Veloso & Car-bonell 1993) </ref>. It is unfortunate that the vast majority 1 of research on speedup learning has ignored task-decomposition planners, since defining and using tasks provides a very successful form of search control. <p> As it stands, ucpop+parse can not handle recursive schemata | they cause the parser to enter an infinite loop. We hope to soon adapt the flow-graph parsing algorithm of (Brotsky 1984) in order to circumvent this problem. We also wish to see if derivational analogy <ref> (Veloso & Carbonell 1993) </ref> can be used to automatically learn decomposition schemata. We showed that neither the reduction nor parsing approach dominates the other in every problem domain. In addition, we reported preliminary experiments that suggest performance is comparable in the two approaches.
Reference: <author> Wilkins, D. E. </author> <year> 1988. </year> <title> Practical Planning. </title> <address> San Mateo, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: When tasks and actions interfered with each other, critic functions performed arbitrary plan-transformation repairs. Despite the ubiquity of task-decomposition in "in-dustrial strength" planners such as sipe <ref> (Wilkins 1988, Wilkins 1992) </ref>, and o-plan (Currie & Tate 1991), most fl We appreciate helpful comments and suggestions from Denise Draper, Oren Etzioni, Keith Golden, Nick Kushm-erick, Ying Sun, and Mike Williamson.
Reference: <author> Wilkins, D. </author> <year> 1992. </year> <title> Using the SIPE-2 Planning System, </title>
Reference-contexts: This assumption does not hold when actions have conditional effects, since new preconditions may be introduced whenever an unused effect gets requested, or confronted. Extending a reduction planner to handle conditional effects is a topic for future research. sipe-2 <ref> (Wilkins 1992) </ref> does allow conditional effects and can compute universally quantified preconditions for an action, but the preconditions are computed when the action is added to the plan. It is unclear if it can be extended to add preconditions to a step at a later point.
References-found: 24

