URL: http://cairo.cs.uiuc.edu/papers/OMEGA.ps
Refering-URL: http://cairo.cs.uiuc.edu/papers.html
Root-URL: http://www.cs.uiuc.edu
Title: Design, Implementation and Experiences of the OMEGA End-Point Architecture  
Author: Klara Nahrstedt Jonathan M. Smith 
Address: IL 61801  Philadelphia, PA 19104  
Affiliation: Computer Science Department University of Illinois at Urbana-Champaign,  Distributed Systems Laboratory University of Pennsylvania,  
Abstract: The OMEGA architecture provides end-to-end quality of service (QoS) guarantees for distributed applications. QoS parameters are translated between application and network requirements by the QoS Broker, thus integrating media and network QoS management into a single entity. Admission control uses a schedulability test derived from application requirements. A novel task priority and precedence based scheme is used to represent complex application requirements and ensure correct feasible schedules. A prototype of OMEGA has been implemented using workstations connected by a 155 Mbps dedicated ATM LAN. To simplify implementation, we assumed a networked multimedia application with periodic media streams, specifically a master/slave telerobotics application. This application employs media with highly diverse QoS requirements (e.g., interarrival times, loss rate, bandwidth) and therefore provides a good platform for testing how closely one can achieve QoS guarantees with workstation hosts and cell-switching. Experience with this implementation has helped to identify new challenges to extending these techniques to a larger domain of applications and systems, and suggests promising new research questions.
Abstract-found: 1
Intro-found: 1
Reference: [And93] <author> D. P. Anderson. </author> <title> Meta-Scheduling for Distributed Continuous Media. </title> <journal> ACM Transaction on Computer Systems, </journal> <volume> 11(3), </volume> <month> August </month> <year> 1993. </year>
Reference-contexts: This requires balancing resources among the application, network, and operating system within the endpoints as well as balancing resources between end-points and the network <ref> [And93] </ref>. As a part of the OMEGA system, we designed and implemented a resource management entity, called the QoS Broker, which provides local and global resource management as shown in Figure 5. <p> This mapping is done within the admission services. 3.3 Admission Admission control is an essential element to achieve guaranteed services. For distributed multimedia communications systems, each resource along the path (s) between source (s) and sink (s) must monitor its availability <ref> [And93] </ref>. In our OMEGA architecture, the control and monitor of end-point resources is done by the QoS Broker, which performs admission control at both layers of the OMEGA system (Figure 2).
Reference: [Bie93] <author> E. W. Biersack. </author> <title> Performance Evaluation of Forward Error Correction in an ATM Environment. </title> <journal> IEEE JSAC, </journal> <volume> 11(4) </volume> <pages> 631-640, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: If real-time behavior of the continuous media is required, its importance is high and sample loss rate is low, then a Forward Error Correction (FEC) <ref> [Bie93] </ref> mechanism is used in the RTNP protocol. In other protocol suites, a different error correction mechanism (e.g., selective retransmission) can be specified. In our RTNP implementation, if FEC is not needed, then only error detection is performed. * Cost and Burstiness mappings are currently not supported. 2.
Reference: [BM91] <author> A. Banerjea and B. Mah. </author> <title> The Real-Time Channel Administration Protocol. </title> <booktitle> In 2nd International Workshop on Network and Operating System for Digital Audio and Video, </booktitle> <address> Heidelberg, Germany, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: An example of such a subsystem would be a realization of an ATM B-ISDN network [TS93] with METS (Multimedia Enhanced Transport Service) support [CCH93], Native-mode ATM stack [KS95], the TENET suite <ref> [FV90, BM91] </ref> (RCAP, RTIP,CMTP, RMTP), or other architectures. Figure 1 shows several end-point network/transport architectures for provision of transport-to-transport layer guarantees. OMEGA also presumes an operating system providing some real-time capabilities. To provide application-to-application guarantees, these components in isolation are not enough.
Reference: [CCH93] <author> A. Campbell, G. Coulson, and D. Hutchison. </author> <title> A Multimedia Enhanced Transport Service in a Quality of Service Architecture. In Workshop on Network and Operating System Support for Digital Audio and Video '93, </title> <address> Lancaster, England, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: The OMEGA architecture presumes a network subsystem capable of providing QoS specified via some parameters such as bounds on round-trip or interarrival delays, errors, or throughput. An example of such a subsystem would be a realization of an ATM B-ISDN network [TS93] with METS (Multimedia Enhanced Transport Service) support <ref> [CCH93] </ref>, Native-mode ATM stack [KS95], the TENET suite [FV90, BM91] (RCAP, RTIP,CMTP, RMTP), or other architectures. Figure 1 shows several end-point network/transport architectures for provision of transport-to-transport layer guarantees. OMEGA also presumes an operating system providing some real-time capabilities. To provide application-to-application guarantees, these components in isolation are not enough. <p> The OMEGA architecture is an end-point architecture for provision of QoS guarantees in NMS. We assume in this paper that network management and transmission protocols for provision of guarantees in intermediate network nodes exist <ref> [PZF94, CCH93, KS95] </ref> and concentrate on the role and elements of OMEGA. Hence, together with a proper network management for QoS guarantees OMEGA achieves global application-to-application guarantees.
Reference: [CT90] <author> D.D. Clark and D.L. Tennenhouse. </author> <title> Architectural Considerations for a New Generation of Protocols. </title> <booktitle> In ACM SIGCOMM'90, </booktitle> <pages> pages 200-208, </pages> <address> Philadelphia, PA, </address> <month> September 2 </month> <year> 1990. </year>
Reference-contexts: manipulations of an APDU such as fragmentation, integration/disintegration (which depends on the size of an APDU and the similarity/dissimilarity of application QoS), and intraframe synchronization if application subsamples are specified. 2.1.2 Transport Subsystem The transport subsystem layer includes the functionalities of the network and transport layers using Integrated Layer Processing <ref> [CT90] </ref>. Network protocol functions provide services between the application subsystem and the network host interface. They build the core of the Real-Time Network Protocol (RTNP). The basic services are: connection management for uni-directional connections, data movement from/to application ring buffers to/from network host interface, and time error detection/reporting mechanism.
Reference: [Dan84] <author> R.B. Dannenberg. </author> <title> Arctic: A Functional Language for Real-Time Control. </title> <booktitle> In ACM Symposium on LISP and Functional Programming, </booktitle> <pages> pages 96-103, </pages> <month> August </month> <year> 1984. </year>
Reference-contexts: be desirable to specify more complex behaviors such as: between (t1 and t2) send data with QoS 1 ; after t2 send data with QoS 2 ; Experimental language support should be designed and prototyped, combining language support for QoS specification [FY94] and language support for time, as in Dannenberg's <ref> [Dan84] </ref> Arctic language or Lee's CSR (Communicating Shared Resources) [LDG91].
Reference: [DPD94] <author> P. Druschel, L.L. Peterson, and B.S. Davie. </author> <title> Experiences with a High-Speed Network Adaptor. </title> <booktitle> In ACM SIGCOMM, </booktitle> <pages> pages 2-13, </pages> <address> London, UK, </address> <month> September </month> <year> 1994. </year>
Reference: [FV90] <author> D. Ferrari and D. C. Verma. </author> <title> A Scheme for Real-Time Channel Establishment in Wide-Area Networks. </title> <journal> IEEE JSAC, </journal> <volume> 8(3) </volume> <pages> 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: An example of such a subsystem would be a realization of an ATM B-ISDN network [TS93] with METS (Multimedia Enhanced Transport Service) support [CCH93], Native-mode ATM stack [KS95], the TENET suite <ref> [FV90, BM91] </ref> (RCAP, RTIP,CMTP, RMTP), or other architectures. Figure 1 shows several end-point network/transport architectures for provision of transport-to-transport layer guarantees. OMEGA also presumes an operating system providing some real-time capabilities. To provide application-to-application guarantees, these components in isolation are not enough.
Reference: [FY94] <author> P.G.S. Florissi and Y. Yemini. </author> <title> Managing Quality of Service in QuAL. In Workshop on Distributed Multimedia Applications and Quality of Service Verification, </title> <address> Montreal, Canada, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: It would be desirable to specify more complex behaviors such as: between (t1 and t2) send data with QoS 1 ; after t2 send data with QoS 2 ; Experimental language support should be designed and prototyped, combining language support for QoS specification <ref> [FY94] </ref> and language support for time, as in Dannenberg's [Dan84] Arctic language or Lee's CSR (Communicating Shared Resources) [LDG91].
Reference: [KS95] <author> S. Keshav and H. Saran. </author> <title> Semantics and Implementation of a Native-Mode ATM Protocol Stack. </title> <type> Internal technical memo, </type> <institution> AT&T Bell Laboratories, </institution> <address> Murray Hill, NJ, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: An example of such a subsystem would be a realization of an ATM B-ISDN network [TS93] with METS (Multimedia Enhanced Transport Service) support [CCH93], Native-mode ATM stack <ref> [KS95] </ref>, the TENET suite [FV90, BM91] (RCAP, RTIP,CMTP, RMTP), or other architectures. Figure 1 shows several end-point network/transport architectures for provision of transport-to-transport layer guarantees. OMEGA also presumes an operating system providing some real-time capabilities. To provide application-to-application guarantees, these components in isolation are not enough. <p> The OMEGA architecture is an end-point architecture for provision of QoS guarantees in NMS. We assume in this paper that network management and transmission protocols for provision of guarantees in intermediate network nodes exist <ref> [PZF94, CCH93, KS95] </ref> and concentrate on the role and elements of OMEGA. Hence, together with a proper network management for QoS guarantees OMEGA achieves global application-to-application guarantees.
Reference: [LDG91] <author> I. Lee, S. Davidson, and R. Gerber. </author> <title> Communicating Shared Resources: A Paradigm for Integrating Real-Time Specification and Implementation. </title> <editor> In A.M. van Tilborg and G.M. Koob, editors, </editor> <booktitle> Foundations of Real-Time Computing: Formal Specifications and Methods, </booktitle> <pages> pages 87-109. </pages> <publisher> Kluwer Academic Press, </publisher> <year> 1991. </year> <month> 29 </month>
Reference-contexts: between (t1 and t2) send data with QoS 1 ; after t2 send data with QoS 2 ; Experimental language support should be designed and prototyped, combining language support for QoS specification [FY94] and language support for time, as in Dannenberg's [Dan84] Arctic language or Lee's CSR (Communicating Shared Resources) <ref> [LDG91] </ref>. Second, while automatic management of resources can be managed by the operating system inferring application behavior, our observation is that current OS management policies do least well with the most complex multimedia application those that in some sense push the edge.
Reference: [LL73] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling Algorithms for Multiprogramming in a Hard Real-Time Environment. </title> <journal> Journal of the ACM, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: Smoothing traffic is required when measured EED &lt; requested EED. Real-time networked applications want the right data 1 The general Liu and Layland <ref> [LL73] </ref> schedulability test is modified for non-preemptive tasks: P n e r 1 P n 13 Variable Name Relation SI max. number of schedulable intervals SI = A ;:::;P n min (P 1 A ) A aggregate processing time of all RTAP tasks per stream i (one sample) T i P
Reference: [Nah95] <author> K. Nahrstedt. </author> <title> An Architecture for End-to-End Quality of Service Provision and its Experimental Validation. </title> <type> PhD thesis, </type> <institution> Department of Computer and Information Science, University of Pennsylvania, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: The implementation is detailed in <ref> [Nah95] </ref>. We will show on an example (Figure 11) how the algorithm for computation of the precedence graph works. <p> The application subsystem had been running in user space and used TCP/IP over a lightly loaded Ethernet (180 ms!) on lightly loaded SUN (slave)/SGI (master) <ref> [Nah95] </ref> (the same restrictions were used for OMEGA measurements). Figure 15 shows the configuration of our telerobotics system with support of both systems.
Reference: [NS94] <author> M. Di Natale and J. A. Stankovic. </author> <title> Dynamic End-to-End Guarantees in Distributed Real-Time Systems. </title> <booktitle> In Real-Time Systems Symposium, </booktitle> <pages> pages 216-227, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: The dependency (precedence ! <ref> [NS94] </ref>) relation is, for example, read sample (i) ! send packet (k i ). A further implicit precedence between application and network tasks is receive packet (k i )) ! write sample (i). <p> According to the precedence graph, negotiation and admission services provide the distribution and acceptance of the system QoS parameters (tasks). The broker suggests a joint schedule based on time slicing <ref> [NS94] </ref>. The joint schedule consists of an ordered set of RTAP/RTNP tasks where each task includes an assignment of a feasible time slice.
Reference: [NS95] <author> K. Nahrstedt and J. M. Smith. </author> <title> The QoS Broker. </title> <journal> IEEE Multimedia, </journal> <volume> 2(1) </volume> <pages> 53-67, </pages> <month> Spring </month> <year> 1995. </year>
Reference-contexts: The rest of the paper is organized as follows: in Section 2 we describe communication and resource models used for the OMEGA architecture. Section 3 briefly discusses the design of the QoS Broker <ref> [NS95] </ref>, and concentrates on services for provision of QoS during the call establishment phase. In Section 4 we describe our experimental testbed, implementation, and measured results. <p> Therefore, they require guarantees on the resources needed for the communication. Resource guarantees are negotiated during the call establishment phase by the QoS Broker protocol <ref> [NS95] </ref> which is an addition to the communication architecture present in both application and transport layers, as shown in Figure 2. <p> We describe all end-point resources with Quality of Service (QoS) parameters maintained in small profiles, which represent the requirements for the resources <ref> [NS95] </ref>. The resources in each domain (application, OS, network) maintain domain-specific representations. Therefore, we introduce multiple views of QoS: * Application QoS Parameters Application requirements for multimedia devices are specified with application QoS parameters. <p> A full description of the QoS Broker protocol design and implementation is presented in <ref> [NS95] </ref>; we provide a brief overview here and concentrate on a detailed discussion of services used by the broker, which are illustrated in [NS95] only through examples. 3.1 Design of QoS Broker Previously, QoS requirements were specified in terms of network QoS parameters and the application specified these parameters to the <p> A full description of the QoS Broker protocol design and implementation is presented in <ref> [NS95] </ref>; we provide a brief overview here and concentrate on a detailed discussion of services used by the broker, which are illustrated in [NS95] only through examples. 3.1 Design of QoS Broker Previously, QoS requirements were specified in terms of network QoS parameters and the application specified these parameters to the network. <p> The RTAP/RTNP tasks performed well. The measured end-to-end delays of the sensory data for our telerobotics application are 3 ms (average value) using an ATM LAN environment <ref> [NS95] </ref>, which is about a factor of 60 better than the application had previously achieved. The application subsystem had been running in user space and used TCP/IP over a lightly loaded Ethernet (180 ms!) on lightly loaded SUN (slave)/SGI (master) [Nah95] (the same restrictions were used for OMEGA measurements).
Reference: [PZF94] <author> C. Parris, H. Zhang, and D. Ferrari. </author> <title> Dynamic Management of Guaranteed Performance Multimedia Connections. </title> <journal> Multimedia Systems, </journal> <volume> 1(6), </volume> <year> 1994. </year>
Reference-contexts: The OMEGA architecture is an end-point architecture for provision of QoS guarantees in NMS. We assume in this paper that network management and transmission protocols for provision of guarantees in intermediate network nodes exist <ref> [PZF94, CCH93, KS95] </ref> and concentrate on the role and elements of OMEGA. Hence, together with a proper network management for QoS guarantees OMEGA achieves global application-to-application guarantees.
Reference: [R.L94] <author> R.L.R Carmo et al. </author> <title> Real-Time Communication Services in a DQDB Network. </title> <booktitle> In Real-Time Systems Symposium, pages 249 -258, </booktitle> <address> San Juan, Puerto Rico, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: Non-preemptive algorithms are relatively easy to implement, but the drawback is that a high priority message can be blocked by a long low priority message. This is called priority inversion <ref> [R.L94] </ref>.
Reference: [ST93] <author> J. M. Smith and C. Brendan S. Traw. </author> <title> Giving Applications Access to Gbit/s Networking. </title> <journal> IEEE Network, </journal> <pages> pages 44-52, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: The upper bound of available aggregate throughput at the end-point is determined by the network host interface and its device driver. For example, in our system the ATM host interface (hardware) provides a transmission rate of 155 Mbps, however, the ATM transport subsystem, after overhead, provides 135 Mbps <ref> [ST93] </ref>.
Reference: [TM89] <author> H. Tokuda and C. W. Mercer. </author> <title> ARTS: A Distributed Real-Time Kernel. </title> <journal> ACM Press, Operating Systems Review, </journal> <volume> 23(3) </volume> <pages> 29-53, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: An example system containing support of several scheduling policies such as rate-monotonic algorithm, earliest deadline first, time slicing, mixed priority scheduling, etc. is the ARTS (A Distributed Real-Time System) kernel <ref> [TM89] </ref>. Among the deepest research questions is that of renegotiation paradigms with adaptive algorithms, and mapping perceptual QoS to the kinds of algorithms and mechanisms we have discussed in this paper; we have only touched on these topics. There are several promising directions for future work stemming from our research.
Reference: [TS93] <author> C. B. S. Traw and J. M. Smith. </author> <title> Hardware/Software Organization of a High-Performance ATM Host Interface. </title> <journal> IEEE JSAC, Special Issue on High-Speed Computer/Network Interfaces, </journal> <volume> 11(2) </volume> <pages> 240-253, </pages> <month> February </month> <year> 1993. </year> <month> 30 </month>
Reference-contexts: The OMEGA architecture presumes a network subsystem capable of providing QoS specified via some parameters such as bounds on round-trip or interarrival delays, errors, or throughput. An example of such a subsystem would be a realization of an ATM B-ISDN network <ref> [TS93] </ref> with METS (Multimedia Enhanced Transport Service) support [CCH93], Native-mode ATM stack [KS95], the TENET suite [FV90, BM91] (RCAP, RTIP,CMTP, RMTP), or other architectures. Figure 1 shows several end-point network/transport architectures for provision of transport-to-transport layer guarantees. OMEGA also presumes an operating system providing some real-time capabilities. <p> The two RISC System/6000 workstations are connected through ATM host interfaces <ref> [TS93] </ref>, using HP G-LINK/UTP5 transmission systems operating at 155 Mbps. The RISC System/6000 workstations are connected to the individual robot control stations via BIT3 S-Bus-to-MCA adapter cards. OMEGA treats access to a robot control bus as a multimedia device access.
References-found: 20

