URL: ftp://ftp.cc.gatech.edu/pub/gvu/tr/1995/95-03.ps.Z
Refering-URL: http://www.cs.gatech.edu/gvu/reports/1995/
Root-URL: 
Email: E-mail: stasko@cc.gatech.edu  
Title: The PARADE Environment for Visualizing Parallel Program Executions: A Progress Report  
Author: John T. Stasko 
Address: Atlanta, GA 30332-0280  
Affiliation: Graphics, Visualization, and Usability Center College of Computing Georgia Institute of Technology  
Pubnum: Technical Report GIT-GVU-95-03  
Abstract: This report describes the current status of the PARADE visualization environment. PARADE supports the design and implementation of software visualizations of parallel and distributed programs. It contains primary components for monitoring a program's execution, building the software visualization, and mapping the execution to the visualization. In this report we provide brief descriptions of many of the projects that comprise the PARADE environment, and we provide references to more detailed information on the projects. 
Abstract-found: 1
Intro-found: 1
Reference: [BFK + 94] <author> Doug Bowman, Adam Ferrari, Melisa Kelley, Brian Schmidt, Brad Topol, and Vaidy Sunderam. </author> <title> The Conch network concurrent programming system. </title> <type> Technical report, </type> <institution> Emory University, </institution> <address> Atlanta, GA, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: The third and least programmer-involved method we have used to gather post-mortem trace information is to actually modify the resident parallel communication library for a system. We utilize this approach with Conch, an experimental heterogeneous network computing system <ref> [BFK + 94] </ref>. Conch contains communication primitives for send-receive communication, barriers, rendezvous, and so on. We have modified the native code of these routines to support run-time activation or deactivation of the trace production [TSS94]. At run-time the programmer simply specifies a command-line flag to turn on tracing.
Reference: [CE93] <author> Thomas L. </author> <title> Casavant (Editor). Special issue on tools and methods for visualization of parallel systems and computation. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18(2), </volume> <month> June </month> <year> 1993. </year>
Reference-contexts: A well constructed picture, diagram, or visualization can communicate much more information in a small space than a corresponding textual description [Tuf83, Tuf90]. Recently, increasing attention has focused on the use of software visualization to assist parallel programming (see [KS93] in particular and <ref> [CE93] </ref> for a collection of articles on this topic). This paper is a progress report on a project called PARADE (PARallel program Animation Development Environment) that was started in 1991. Its goal was to develop an environment that facilitates the creation and use of visualizations by programmers developing concurrent programs.
Reference: [Che93] <author> Dorren Y. Cheng. </author> <title> A survey of parallel programming languages and tools. </title> <type> Technical Report RND-93-005, </type> <institution> NASA Ames Research Center, Moffett Field, </institution> <address> CA, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: One approach to facilitating the growth of parallel and distributed programming involves the development of new programming languages and new hardware. Recently, however, researchers have begun to focus on the importance of good software tools to assist developers of concurrent programs <ref> [Che93, PC94] </ref>. These tools include debuggers, performance monitors, execution analysis and replay tools, and other aids. Our research also has focused on tools for program understanding and development, but we have a different emphasis: software visualization tools [SP92].
Reference: [GEK + 94] <author> Weiming Gu, Greg Eisenhauer, Eileen Kraemer, Karsten Schwan, John Stasko, Jeffrey Vetter, and Nirupama Mallavarupu. </author> <title> Falcon: on-line monitoring and steering of large-scale parallel programs. </title> <type> Technical Report GIT-CC-94-21, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <address> Atlanta, GA, </address> <month> April </month> <year> 1994. </year>
Reference-contexts: For instance, it would not be uncommon for the animation to receive a message receive program event before the corresponding message send program event. Our approach uses filters that preserve the causal ordering of program events by applying simple ordering rules to the event transmissions <ref> [GEK + 94] </ref>. To generate post-mortem visualizations with PARADE, the primary method used in the environment, we utilize three different software instrumentation techniques. <p> Color is used to indicate the different processors. and the important arrays manipulated in the program. Color, image flashing, and arrows are used to indicate data access, movement, and work between the processors. Finally, views of the state of cthreads programs have been developed using Polka as well <ref> [GEK + 94] </ref>. Moving to the actual design of animations themselves, one key challenge is how to "scale up" the views.
Reference: [KS93] <author> Eileen Kraemer and John T. Stasko. </author> <title> The visualization of parallel systems: An overview. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18(2) </volume> <pages> 105-117, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: A well constructed picture, diagram, or visualization can communicate much more information in a small space than a corresponding textual description [Tuf83, Tuf90]. Recently, increasing attention has focused on the use of software visualization to assist parallel programming (see <ref> [KS93] </ref> in particular and [CE93] for a collection of articles on this topic). This paper is a progress report on a project called PARADE (PARallel program Animation Development Environment) that was started in 1991.
Reference: [KS94a] <author> Eileen Kraemer and John T. Stasko. </author> <title> Toward flexible control of the temporal mapping from concurrent program events to animations. </title> <booktitle> In Proceedings of the 8th International Parallel Processing Symposium (IPPS '94), </booktitle> <pages> pages 902-908, </pages> <address> Cancun, Mexico, </address> <month> April </month> <year> 1994. </year>
Reference-contexts: That is, we define a number of different temporal perspectives under which an animation of a program execution can be viewed. We provide a system and interface, the Animation Choreographer, that allows a viewer to interactively choose one of these perspectives and to further adjust the perspective interactively <ref> [KS94a, KS94b] </ref>. The Animation Choreographer of PARADE must know the operations of the program being visualized, the set of available animation views and scenes, and the mappings between these two sets. The first two are described by the event and visualization specification files described in the prior two sections.
Reference: [KS94b] <author> Eileen Kraemer and John T. Stasko. </author> <title> Toward flexible control of the temporal mapping from concurrent program events to animations. </title> <type> Technical Report GIT-GVU-94/10, </type> <institution> Graphics, Visualization, and Usability Center, Georgia Institute of Technology, </institution> <address> Atlanta, GA, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: That is, we define a number of different temporal perspectives under which an animation of a program execution can be viewed. We provide a system and interface, the Animation Choreographer, that allows a viewer to interactively choose one of these perspectives and to further adjust the perspective interactively <ref> [KS94a, KS94b] </ref>. The Animation Choreographer of PARADE must know the operations of the program being visualized, the set of available animation views and scenes, and the mappings between these two sets. The first two are described by the event and visualization specification files described in the prior two sections.
Reference: [Lam78] <author> Leslie Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year> <month> 16 </month>
Reference-contexts: That is, a viewer may wish to examine a program execution as it occurred with respect to a global clock, as it occurred under some logical clock ordering <ref> [Lam78] </ref>, or as it might have occurred under some other valid event ordering. It is easy to see how these objectives have led us to develop a flexible environment with many different components and tools, as opposed to a monolithic system built to do only one thing.
Reference: [MS95] <author> Jeyakumar Muthukumarasamy and John T. Stasko. </author> <title> Visualizing program ex-ecutions on large data sets using semantic zooming. </title> <type> Technical Report GIT-GVU-95/02, </type> <institution> Graphics, Visualization, and Usability Center, Georgia Institute of Technology, </institution> <address> Atlanta, GA, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: Moving to the actual design of animations themselves, one key challenge is how to "scale up" the views. That is, how do we visualize very large programs or execution of programs on very large data sets? We utilize a concept called semantic zooming that is useful in such situations <ref> [MS95] </ref>. With semantic zooming, we can present the entire program and its data set within one view by using abstraction and clustering. From there viewers can interactively select graphical objects to zoom in on areas of interest.
Reference: [PC94] <author> Cherri M. Pancake and Cutis Cook. </author> <title> What users need in parallel tool support: Survey results and analysis. </title> <booktitle> In Proceedings of the Scalable High Performance Computing Conference (SHPCC '94), </booktitle> <pages> pages 40-47, </pages> <address> Knoxville, TN, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: One approach to facilitating the growth of parallel and distributed programming involves the development of new programming languages and new hardware. Recently, however, researchers have begun to focus on the importance of good software tools to assist developers of concurrent programs <ref> [Che93, PC94] </ref>. These tools include debuggers, performance monitors, execution analysis and replay tools, and other aids. Our research also has focused on tools for program understanding and development, but we have a different emphasis: software visualization tools [SP92].
Reference: [SAK91] <author> John T. Stasko, William F. Appelbe, and Eileen Kraemer. </author> <title> Utilizing program visualization techniques to aid parallel and distributed program development. </title> <type> Technical Report GIT-GVU-91/08, </type> <institution> Graphics, Visualization, and Usability Center, Georgia Institute of Technology, </institution> <address> Atlanta, GA, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: Its goal was to develop an environment that facilitates the creation and use of visualizations by programmers developing concurrent programs. A report roughly summarizing the original proposal for the project can be found in <ref> [SAK91] </ref>. Primary support for the project has been a three year National Science Foundation grant (CCR-9121607). Portions of the project also have been supported by Kendall Square Research and by an Intel Graduate Fellowship.
Reference: [SK92] <author> John T. Stasko and Eileen Kraemer. </author> <title> A methodology for building application-specific visualizations of parallel programs. </title> <type> Technical Report GIT-GVU-92-10, </type> <institution> Graphics, Visualization, and Usability Center, Georgia Institute of Technology, </institution> <address> Atlanta, GA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: All three specification files are used as input to the Animation Choreographer when a user generates a software visualization of a program execution. Details of this process will be described later in the report. 3.2 Visualizations Visualizations in PARADE are built using the Polka animation system <ref> [SK92, SK93] </ref>. Polka supports color, 2-D visualizations, and in particular, it provides high-level primitives for smooth animation effects. It also supports independent scheduling and execution of animation actions, thus permitting easy design of concurrent animation scenarios.
Reference: [SK93] <author> John T. Stasko and Eileen Kraemer. </author> <title> A methodology for building application-specific visualizations of parallel programs. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18(2) </volume> <pages> 258-264, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: All three specification files are used as input to the Animation Choreographer when a user generates a software visualization of a program execution. Details of this process will be described later in the report. 3.2 Visualizations Visualizations in PARADE are built using the Polka animation system <ref> [SK92, SK93] </ref>. Polka supports color, 2-D visualizations, and in particular, it provides high-level primitives for smooth animation effects. It also supports independent scheduling and execution of animation actions, thus permitting easy design of concurrent animation scenarios.
Reference: [SP92] <author> John T. Stasko and Charles Patterson. </author> <title> Understanding and characterizing software visualization systems. </title> <booktitle> In Proceedings of the 1992 IEEE Workshop on Visual Languages, </booktitle> <pages> pages 3-10, </pages> <address> Seattle, WA, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: These tools include debuggers, performance monitors, execution analysis and replay tools, and other aids. Our research also has focused on tools for program understanding and development, but we have a different emphasis: software visualization tools <ref> [SP92] </ref>. A key component of understanding a program execution is knowing what is occurring in the program, how individual processes are working, and how they are communicating.
Reference: [Sun90] <author> V.S. Sunderam. </author> <title> PVM: A framework for parallel distributed computing. </title> <journal> Con-currency: Practice & Experience, </journal> <volume> 2(4) </volume> <pages> 315-339, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: We currently also are developing a visualization library for the PVM <ref> [Sun90] </ref> distributed system. It will soon be available via anonymous ftp at the site mentioned at the end of this report. FORTRAN programs. Individual views here show the processor grid, data distribution, 6 7 to message sends and receives. 8 view illustrates important arrays in the program.
Reference: [SW92] <author> John T. Stasko and Joseph F. Wehrli. </author> <title> Three-dimensional computation visualization. </title> <type> Technical Report GIT-GVU-92-20, </type> <institution> Graphics, Visualization, and Usability Center, Georgia Institute of Technology, </institution> <address> Atlanta, GA, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: It is available via anonymous ftp as the file pub/people/stasko/polka.tar.Z on the machine ftp.cc.gatech.edu. Detailed documentation and example animations are provided with 5 the distribution. We also have developed a 3-D version of Polka written in GL on Silicon Graphics workstations <ref> [SW92, SW93] </ref>. We have used it to develop a number of interesting software visualizations of parallel programs as well. As was done in the program monitoring component, we have created a specification format describing a Polka visualization. A sample visualization specification appears below.
Reference: [SW93] <author> John T. Stasko and Joseph F. Wehrli. </author> <title> Three-dimensional computation visualization. </title> <booktitle> In Proceedings of the 1993 IEEE Symposium on Visual Languages, </booktitle> <pages> pages 100-107, </pages> <address> Bergen, Norway, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: It is available via anonymous ftp as the file pub/people/stasko/polka.tar.Z on the machine ftp.cc.gatech.edu. Detailed documentation and example animations are provided with 5 the distribution. We also have developed a 3-D version of Polka written in GL on Silicon Graphics workstations <ref> [SW92, SW93] </ref>. We have used it to develop a number of interesting software visualizations of parallel programs as well. As was done in the program monitoring component, we have created a specification format describing a Polka visualization. A sample visualization specification appears below.
Reference: [TSS94] <author> Brad Topol, John T. Stasko, and Vaidy S. Sunderam. </author> <title> Integrating visualization support into distributed computing systems. </title> <type> Technical Report GIT-GVU-94/38, </type> <institution> Graphics, Visualization, and Usability Center, Georgia Institute of Technology, </institution> <address> Atlanta, GA, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: We utilize this approach with Conch, an experimental heterogeneous network computing system [BFK + 94]. Conch contains communication primitives for send-receive communication, barriers, rendezvous, and so on. We have modified the native code of these routines to support run-time activation or deactivation of the trace production <ref> [TSS94] </ref>. At run-time the programmer simply specifies a command-line flag to turn on tracing. We also have provided a way to gather more "subtle," application-specific trace information from a Conch program, that is, information not available from the communication calls.
Reference: [Tuf83] <author> Edward R. Tufte. </author> <title> The Visual Display of Quantitative Information. </title> <publisher> Graphics Press, </publisher> <address> Cheshire, CT, </address> <year> 1983. </year>
Reference-contexts: People have a tremendous ability to track patterns, observe images, and detect anomalies in the things they see. A well constructed picture, diagram, or visualization can communicate much more information in a small space than a corresponding textual description <ref> [Tuf83, Tuf90] </ref>. Recently, increasing attention has focused on the use of software visualization to assist parallel programming (see [KS93] in particular and [CE93] for a collection of articles on this topic).
Reference: [Tuf90] <author> Edward R. Tufte. </author> <title> Envisioning Information. </title> <publisher> Graphics Press, </publisher> <address> Cheshire, CT, </address> <year> 1990. </year>
Reference-contexts: People have a tremendous ability to track patterns, observe images, and detect anomalies in the things they see. A well constructed picture, diagram, or visualization can communicate much more information in a small space than a corresponding textual description <ref> [Tuf83, Tuf90] </ref>. Recently, increasing attention has focused on the use of software visualization to assist parallel programming (see [KS93] in particular and [CE93] for a collection of articles on this topic).
Reference: [WS93] <author> Joseph Wehrli and John Stasko. </author> <title> Interactive three-dimensional visual debugging in massively parallel computation (extended abstract). </title> <booktitle> In Proceedings of the 1993 ACM/ONR Workshop on Parallel and Distributed Debugging, </booktitle> <pages> pages 235-237, </pages> <address> San Diego, CA, </address> <month> May </month> <year> 1993. </year> <month> 17 </month>
Reference-contexts: As less and less elements are shown in the view, the presentation adjusts to provide more detail. We also have used the Polka-3D system to build visualizations of large programs. In particular, we used natural 3-D perspective and zooming to depict executions of program running on a MasPar machine <ref> [WS93] </ref>. 9 animation allows a viewer to examine characteristics of the entire data set and to zoom in on particular regions of the array. 10 To further help simplify the development of Polka visualizations, we are currently work-ing on a tool that will allow users to build visualizations without any textual
Reference: [ZS95] <author> Qiang A. Zhao and John T. Stasko. </author> <title> Visualizing the execution of threads-based parallel programs. </title> <type> Technical Report GIT-GVU-95/01, </type> <institution> Graphics, Visualization, and Usability Center, Georgia Institute of Technology, </institution> <address> Atlanta, GA, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: For example, KSR machines provide a C library called pthreads that includes basic process control and communication calls such as pthread create, pthread mutex init, pthread barrier checkin, and so on. We have developed a set of macros called gthreads that can be used to monitor KSR pthreads programs <ref> [ZS95] </ref>. In essence, we define a macro for each pthread call that first writes a trace event of that call, then calls the original pthread routine. <p> Then, software developers simply use the library as an application|they write no Polka code themselves. We have done this for a few different programming paradigms. Figure 3 shows the set of views built for the KSR pthreads package mentioned earlier in the Program Monitoring section <ref> [ZS95] </ref>. These views highlight the state of threads, barriers, and mutexes; They show where each thread is within the program call graph, and they show a history of the threads over time. status of different processing elements, and the history of the computation.
References-found: 22

