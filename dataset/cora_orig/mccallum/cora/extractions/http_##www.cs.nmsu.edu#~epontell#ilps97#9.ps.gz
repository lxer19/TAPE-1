URL: http://www.cs.nmsu.edu/~epontell/ilps97/9.ps.gz
Refering-URL: http://www.cs.nmsu.edu/lldap/ilps97/programme.html
Root-URL: http://www.cs.nmsu.edu
Email: lfcastro@inf.ufrgs.br  geyer@inf.ufrgs.br  
Phone: Fone: +55 (053) 981-1831  Fone: +55 (051) 316-6802  
Title: ParTy A Parallel-Types Analyser  
Author: Luis Fernando Pias de Castro Claudio Fernando Resin Geyer 
Keyword: Porto Alegre RS Keywords: Type inference, Abstract interpretation, Prolog, Parallelism  
Address: Caixa Postal 15064  
Affiliation: Instituto de Informatica UFRGS  
Abstract: This work presents a type inference system aimed at the parallel exploitation of logic programs. It emphasizes the determination of costs related to the exportation of goals on distributed memory parallel machines, so types are based on the actual storage model of terms in Warren's Abstract Machine. The proposed type domain introduces a novel notion of type interval, which provides a greater accuracy on type analysis. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> COLMERAUER, A. et al. </author> <title> Un Systeme de Communication Homme-Machine en Francais. </title> <institution> GIA: Universite d'Aix-Marseille II, </institution> <year> 1972. </year>
Reference-contexts: 1. Introduction Prolog <ref> [1] </ref> [2] is a declarative programming language based on first-order logic. It provides the programmer ways to express problems in a high level of abstraction. One important characteristic of this language is its clear distinction between the logic description of a problem and the control needed to solve it. <p> Logic Programming The logic programming paradigm provides the user a way to express problems at a high level of abstraction. Prolog is the most well-known logic programming language used nowadays, and it's based on two independent works of Colmerauer <ref> [1] </ref> and Kowalski [2]. Prolog's main characteristic is the clear distinction between logic and control. It means that, when a programmer wants to describe a problem, he only has to be concerned about its logic. The underlying system will be responsible for providing a control system to solve the problem.
Reference: [2] <author> KOWALSKI, R. </author> <title> Logic for Problem Solving. </title> <address> New York: </address> <publisher> Elsevier, </publisher> <year> 1979. </year>
Reference-contexts: 1. Introduction Prolog [1] <ref> [2] </ref> is a declarative programming language based on first-order logic. It provides the programmer ways to express problems in a high level of abstraction. One important characteristic of this language is its clear distinction between the logic description of a problem and the control needed to solve it. <p> Logic Programming The logic programming paradigm provides the user a way to express problems at a high level of abstraction. Prolog is the most well-known logic programming language used nowadays, and it's based on two independent works of Colmerauer [1] and Kowalski <ref> [2] </ref>. Prolog's main characteristic is the clear distinction between logic and control. It means that, when a programmer wants to describe a problem, he only has to be concerned about its logic. The underlying system will be responsible for providing a control system to solve the problem.
Reference: [3] <editor> BRIAT, J.; FAVRE, M.; GEYER, C. et al. Opera: </editor> <title> a Parallel Prolog system and its Implementation on Supernode. </title> <institution> Grenoble: Laboratoire de Genie Informatique de Grenoble/CAP-Gemini-Inovation, </institution> <year> 1990. </year> <type> (Technical Report). </type>
Reference-contexts: This implies that Prolog is a well suited language for automatic exploitation of parallelism. There are several parallel implementations of Prolog. However, most of them are based on shared memory machines. Opera <ref> [3] </ref> [4] is a project aimed at building a parallel Prolog system based on distributed memory machines. The inclusion of parallelism in the control of a languages such as Prolog adds some overhead due to the issues related to managing the distribution of work among several processors. <p> However, most of the existing systems are based on shared-memory machines. 2.4. Opera Independent And-Parallelism Opera is a parallel Prolog system, which exploits or-parallelism and independent and-parallelism. Opera is aimed at exploiting parallelism on distributed-memory machines. Opera's or-parallelism is based on a multi-sequential model <ref> [3] </ref>. When a processor asks for work it receives a clause, which must be completely executed by this processor. Each processor executes a WAM-based abstract machine called TWAM. The independent and-parallelism model used in Opera is called restricted and-parallelism.
Reference: [4] <author> GEYER, C.; YAMIN, A.; WERNER, O. Projeto Opera: </author> <title> Um Modelo E/OU para Prolog. </title> <editor> In: CONGRESSO DA SOCIEDADE BRASILEIRA DE COMPUTAC ~ AO, </editor> <volume> 12., </volume> <year> 1992, </year> <institution> Rio de Janeiro. Anais... Rio de Janeiro: SBC, </institution> <year> 1992. </year>
Reference-contexts: This implies that Prolog is a well suited language for automatic exploitation of parallelism. There are several parallel implementations of Prolog. However, most of them are based on shared memory machines. Opera [3] <ref> [4] </ref> is a project aimed at building a parallel Prolog system based on distributed memory machines. The inclusion of parallelism in the control of a languages such as Prolog adds some overhead due to the issues related to managing the distribution of work among several processors.
Reference: [5] <author> COUSOT, P.; COUSOT, R. </author> <title> Abstract Interpretation: A Unified Lattice Model for Static Analysis of Programs by Construction or Approximation of Fixpoints. </title> <booktitle> In: ACM SYMP. ON PRINCIPLES OF PROGRAMMING LANGUAGES, </booktitle> <volume> 4., </volume> <year> 1977. </year> <title> Proceedings... </title> <publisher> ACM Press, </publisher> <year> 1977. </year>
Reference-contexts: Basic Concepts In this section we are going to describe the basic concepts needed to understand the proposed type inference system, that will be used throughout the remaining of the text. 2.1. Abstract Intepretation Abstract interpretation is a static analysis technique developed by Cousot and Cousot <ref> [5] </ref>. It's based on the idea of obtaining an approximate semantics of a program, by abstracting the domain over which this program works. In order to do this, first we have to define an abstract domain which reflects the kind of information we want to infer.
Reference: [6] <author> WARREN, D.H.D. </author> <title> An Abstract Prolog Instruction Set. </title> <booktitle> Manchester:SRI International: </booktitle> <institution> AI Center: Computer Science and Technology Division, </institution> <year> 1983. </year> <note> (Technical Note 309). </note>
Reference-contexts: On one hand, this characteristic makes program development easier, since the programmer doesn't have to specify the control of the program. On the other hand, it allows the underlying runtime system to implement different control systems. Most of Prolog implementations are based on the Warren Abstract Machine (WAM) <ref> [6] </ref>. WAM is a stack-oriented abstract machine specially developed for the execution of Prolog programs. Workshop on Parallelism and Implementation Technology 3 2.3. Parallel Processing Parallel processing is, nowadays, a widely accepted technique to provide high performance for several kinds of programs.
Reference: [7] <author> ALI, K.; KARLSSON, R. </author> <title> The Muse Or-Parallel Prolog Model and Its Performance. </title> <institution> Kista:Swedish Institute of Computer Science, </institution> <year> 1990. </year>
Reference-contexts: There are several implementations of parallel Prolog systems. For example, Muse <ref> [7] </ref> or-parallel system, the independent and-parallelism &-Prolog system [8], and Andorra-I [9], which exploits both or-parallelism and dependent and-parallelism. However, most of the existing systems are based on shared-memory machines. 2.4. Opera Independent And-Parallelism Opera is a parallel Prolog system, which exploits or-parallelism and independent and-parallelism.
Reference: [8] <author> HERMENEGILDO, M. </author> <title> &-Prolog and its Performance: Exploiting Independent And-Parallelism. </title> <booktitle> In: INTERNATIONAL CONFERENCE ON LOGIC PROGRAMMING, 1990. </booktitle> <address> Proceedings..., </address> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: There are several implementations of parallel Prolog systems. For example, Muse [7] or-parallel system, the independent and-parallelism &-Prolog system <ref> [8] </ref>, and Andorra-I [9], which exploits both or-parallelism and dependent and-parallelism. However, most of the existing systems are based on shared-memory machines. 2.4. Opera Independent And-Parallelism Opera is a parallel Prolog system, which exploits or-parallelism and independent and-parallelism. Opera is aimed at exploiting parallelism on distributed-memory machines.
Reference: [9] <author> COSTA, V.S.; WARREN, D.H.D.; YANG, R. </author> <title> The Andorra-I Engine: A Parallel Implementation of the Basic Andorra Model. </title> <booktitle> In: INTERNATIONAL CONFERENCE ON LOGIC PROGRAMMING, </booktitle> <volume> 8., </volume> <year> 1991. </year> <title> Proceedings..., </title> <publisher> MIT Press, </publisher> <year> 1991. </year> <booktitle> 10 Workshop on Parallelism and Implementation Technology </booktitle>
Reference-contexts: There are several implementations of parallel Prolog systems. For example, Muse [7] or-parallel system, the independent and-parallelism &-Prolog system [8], and Andorra-I <ref> [9] </ref>, which exploits both or-parallelism and dependent and-parallelism. However, most of the existing systems are based on shared-memory machines. 2.4. Opera Independent And-Parallelism Opera is a parallel Prolog system, which exploits or-parallelism and independent and-parallelism. Opera is aimed at exploiting parallelism on distributed-memory machines.
Reference: [10] <author> HERMENEGILDO, M. </author> <title> An Abstract machine Based Execution Model for Computer Architecture Design and Efficient Implementation of Logic Programs in Parallel. </title> <institution> Austin: University of Texas at Austin, </institution> <year> 1986. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: The independent and-parallelism model used in Opera is called restricted and-parallelism. According to this model, conditional graph expressions are used to denote situations when parallel execution of goals may be exploited. The WAM-based abstract machine used for and-parallelism is the RAP-WAM <ref> [10] </ref>, which has been adapted to work on distributed-memory machines [11]. 3. Type Inference for Distributed-Memory Parallel Machines 3.1. Static Analysis Model The static analysis model presented here includes the execution model for the fixpoint calculus and the abstraction of the primitive operations of Prolog.
Reference: [11] <author> WERNER, O. Uma Maquina Abstrata Estendida para o Paralelismo E na Pro-gramac~ao em Logica. Porto Alegre: CPGCC da UFRGS, </author> <year> 1994. </year> <type> Master Thesis. </type>
Reference-contexts: According to this model, conditional graph expressions are used to denote situations when parallel execution of goals may be exploited. The WAM-based abstract machine used for and-parallelism is the RAP-WAM [10], which has been adapted to work on distributed-memory machines <ref> [11] </ref>. 3. Type Inference for Distributed-Memory Parallel Machines 3.1. Static Analysis Model The static analysis model presented here includes the execution model for the fixpoint calculus and the abstraction of the primitive operations of Prolog.
Reference: [12] <editor> BARBOSA, J. GRANLOG: Um Modelo para Analise Automatica de Granulosidade na Programac~ao em Logica. Porto Alegre: CPGCC da UFRGS, </editor> <year> 1996. </year> <type> Master Thesis. </type>
Reference-contexts: Using the type inference system describe in this paper, it's possible for the compiler to generate specialized code for the unification process, according to the types of the terms that are being unified. 4.2. Determination of Costs One of the main characteristics of and-parallelism is its small granularity <ref> [12] </ref>. It means that the cost of (sequential) execution of a goal is usually small. On distributed memory machines, this may cause a great problem, since the cost for exporting a goal to other machine involves transferring WAM stacks via messages.
Reference: [13] <author> AZZOUNE, H. </author> <title> Type Inference in Prolog. </title> <booktitle> 9th. International Conference on Automated Deduction, </booktitle> <address> Argonne, USA, </address> <month> May </month> <year> 1988. </year>
Reference-contexts: Workshop on Parallelism and Implementation Technology 9 5. Conclusions This work presents a type inference system designed to be used at the cost evaluation of the parallel execution of goals under distributed-memory machines. The notion of type inference isn't new to logic programming systems. Azzoune <ref> [13] </ref> defines an inference system based on generating and solving inequations on type variables. Corsini and Musumbu [14] define a type analysis system based on abstract interpretation, allowing for the inference of partially instantiated terms.
Reference: [14] <author> CORSINI, M.-M. e MUSUMBU, K. </author> <title> Type Inference in Prolog: a New Approach. </title> <booktitle> Theoretical Computer Science, </booktitle> <publisher> Elsevier, v. </publisher> <address> 119, </address> <year> 1993. </year>
Reference-contexts: The notion of type inference isn't new to logic programming systems. Azzoune [13] defines an inference system based on generating and solving inequations on type variables. Corsini and Musumbu <ref> [14] </ref> define a type analysis system based on abstract interpretation, allowing for the inference of partially instantiated terms. Codish and Lagoon [15] present an interesting directional-types inference system based on the use of program abstraction and ACI-unification.
Reference: [15] <author> CODISH, M. e LAGOON, V. </author> <title> Type Dependencies for Logic Programs Using ACI-Unification From: </title> <institution> ftp://132.72.40.8/pub/people/codish/aci-type.ps, Ben-Gurion University of the Negev, </institution> <year> 1996. </year>
Reference-contexts: Azzoune [13] defines an inference system based on generating and solving inequations on type variables. Corsini and Musumbu [14] define a type analysis system based on abstract interpretation, allowing for the inference of partially instantiated terms. Codish and Lagoon <ref> [15] </ref> present an interesting directional-types inference system based on the use of program abstraction and ACI-unification. The parallel type system presented in this work is unique in introducing a notion of interval of types. This notion provides for a more accurate analysis.
References-found: 15

