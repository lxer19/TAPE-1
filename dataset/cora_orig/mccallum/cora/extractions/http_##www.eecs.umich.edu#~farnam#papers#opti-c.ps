URL: http://www.eecs.umich.edu/~farnam/papers/opti-c.ps
Refering-URL: http://www.eecs.umich.edu/~farnam/papers/pubs.html
Root-URL: http://www.cs.umich.edu
Email: fzou, farnamg@eecs.umich.edu  
Title: Optimization of a Real-Time Primary-Backup Replication Service  
Author: Hengming Zou and Farnam Jahanian 
Address: Ann Arbor, Michigan 48109  
Affiliation: Real-time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: The primary-backup replication model is one of the commonly adopted approaches to providing fault tolerant data services. Its extension to the real-time environment, however, imposes the additional constraint of timing predictability, which requires a bounded overhead for managing redundancy. This paper discusses the trade-off between reducing system overhead and increasing (temporal) consistency between the primary and backup, and explores ways to optimize such a system to minimize either the inconsistency or the system overhead while maintaining the temporal consistency guarantees of the system. An implementation built on top of the existing RTPB model [20] was developed within the x-kernel architecture on the Mach OSF platform running MK 7.2. Results of an experimental evaluation of the proposed optimization techniques are discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alonso, D. Barbara, and H. Garcia-Molina. </author> <title> Data caching issues in an information retrieval system. </title> <journal> ACM Transaction on Database Systems, </journal> <volume> 15(3) </volume> <pages> 359-384, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Weak consistency can also improve performance in non-real-time applications. For instance, the quasi-copy model permits some inconsistency between the central data and its cached copies at remote sites <ref> [1] </ref>. This gives the scheduler more flexibility in propagating updates to the cached copies.
Reference: [2] <author> R. Rajkumar et al. </author> <title> The real-time publisher-subscriber inter-process communication model for distributed real-time systems: </title> <booktitle> Design and implementation. In Proc. Real-Time Technology and Applications Symposium, </booktitle> <pages> pages 66-75, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: It guarantees agreement on membership among the communicating processors, and ensures that membership changes resulting from processor joins or departures are atomic and ordered with respect to multicast messages. Both TTP and RTCAST are based on active replication whereas RTPB is a passive scheme. Rajkumar <ref> [2, 3] </ref> presents a publisher/subscriber model for distributed real-time systems. It provides a simple user interface for publishing messages on a logical "channel", and for subscribing to selected channels as needed by each application.
Reference: [3] <author> M. Gagliardi, R.Rajkumar, and L. Sha. </author> <title> Designing for evolvability: Building blocks for evolvable real-time systems. </title> <booktitle> In Proc. Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: It guarantees agreement on membership among the communicating processors, and ensures that membership changes resulting from processor joins or departures are atomic and ordered with respect to multicast messages. Both TTP and RTCAST are based on active replication whereas RTPB is a passive scheme. Rajkumar <ref> [2, 3] </ref> presents a publisher/subscriber model for distributed real-time systems. It provides a simple user interface for publishing messages on a logical "channel", and for subscribing to selected channels as needed by each application.
Reference: [4] <author> C-C Han and K-J Lin. </author> <title> Scheduling distance-constrained real-time tasks. </title> <booktitle> In Proc. </booktitle> <address> RTSS'92. </address>
Reference-contexts: can be stated as: minimize objective function: P i under con straint: P n i =p U i =p P p P i ffi B The constraint P n i =p U i =p P 1) is needed to guarantee task schedulability un der both the Rate-Monotonic [14] and Distance-Constrained <ref> [4] </ref> scheduling algorithms. 1 The inequality p U i ensures that the temporal constraint imposed on object i at the backup is maintained while inequality p P i p U i guarantees that no unnecessary update is sent to the backup since more frequent updates at backup would not make any <p> Refer to the extended version [19] for all the proofs of the theorems backup is relatively straightforward: 1. Assign p U i = ffi B i initially 2. Check schedulability test using rate-monotonic [14] or distance-constrained <ref> [4] </ref> scheduling. If the test fails, then it is impossible to schedule the task set without violating the given temporal constraint. 3. Otherwise, sort the terms p P i =p U i ; i = 1; : : : ; n into ascending order. 4. <p> Assign the smallest value that is p P i but ffi B to the new task such that the total utilization of the task set is still under 2n (2 1=2n 1) (This ensures that the whole task set is schedulable under rate-monotonic [14] or distance-constrained scheduling <ref> [4] </ref>). 2. If Step 1 fails, then reject the object. Global optimal 1. Insert term p P i =p U i into the ordered list that we obtained in static or previous allocations. 2. Rerun the static allocation algorithm. 3. If Step 2 fails, then reject the new object.
Reference: [5] <author> H.F.Korth, N.Soparkar, and A. Silberschatz. </author> <title> Triggered real-time databases with consistency constraints. </title> <booktitle> In Proc. Int'l Conf. on Very Large Data Bases, </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: In particular, a number of researchers have observed that serializ-ability is too strict as a correctness criterion for real-time databases. Relaxed correctness criteria facilitate higher concurrency by permitting a limited amount of inconsistency in how a transaction views the database state <ref> [5, 8, 9, 11-13, 16, 17] </ref>. For example, a recent work [10] [11] proposed a class of real-time data access protocols called SSP (Similarity Stack Protocol) applicable to distributed real-time systems.
Reference: [6] <author> H.Kopetz and G. Grunsteidl. </author> <title> Ttp a protocol for fault-tolerant real-time systems. </title> <journal> In IEEE Computer, </journal> <volume> volume 27, </volume> <pages> pages 14-23, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Hence, the problem of server replication posses additional challenges in a real-time environment. In recent years, several experimental projects have begun to address the problem of replication in distributed hard real-time systems. For example, TTP <ref> [6] </ref> is a time-triggered distributed real-time system: its architecture is based on the assumption that the worst-case load is determined apriori at design time, and the system response to external events is cyclic at predetermined time-intervals.
Reference: [7] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Janruary </month> <year> 1991. </year>
Reference-contexts: The new prototype is implemented as a user-level x-kernel <ref> [7] </ref> based server on the MK 7.2 microkernel from the Open Group. 3 Our system includes a primary server and a backup server. A client application resides on the same machine as the primary. The client continuously senses the environment and periodically sends updates to the primary.
Reference: [8] <author> B. Kao and H. Garcia-Molina. </author> <title> An overview of real-time database systems. </title> <editor> In S.H. Son, editor, </editor> <booktitle> Advances in Real-Time systems, </booktitle> <pages> pages 463-486. </pages> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: In particular, a number of researchers have observed that serializ-ability is too strict as a correctness criterion for real-time databases. Relaxed correctness criteria facilitate higher concurrency by permitting a limited amount of inconsistency in how a transaction views the database state <ref> [5, 8, 9, 11-13, 16, 17] </ref>. For example, a recent work [10] [11] proposed a class of real-time data access protocols called SSP (Similarity Stack Protocol) applicable to distributed real-time systems.
Reference: [9] <author> T-W Kuo and A.K.Mok. </author> <title> Ssp: A semantics-based protocol for real-time data access. </title> <booktitle> In Proc. </booktitle> <address> RTSS'93. </address>
Reference-contexts: In particular, a number of researchers have observed that serializ-ability is too strict as a correctness criterion for real-time databases. Relaxed correctness criteria facilitate higher concurrency by permitting a limited amount of inconsistency in how a transaction views the database state <ref> [5, 8, 9, 11-13, 16, 17] </ref>. For example, a recent work [10] [11] proposed a class of real-time data access protocols called SSP (Similarity Stack Protocol) applicable to distributed real-time systems.
Reference: [10] <author> T-W Kuo and A.K.Mok. </author> <title> Ssp: A semantics-based protocol for real-time data access. </title> <booktitle> In Proceedings of IEEE 14th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: Relaxed correctness criteria facilitate higher concurrency by permitting a limited amount of inconsistency in how a transaction views the database state [5, 8, 9, 11-13, 16, 17]. For example, a recent work <ref> [10] </ref> [11] proposed a class of real-time data access protocols called SSP (Similarity Stack Protocol) applicable to distributed real-time systems.
Reference: [11] <author> Tei-Wei Kuo, D. Locke, and F. Wang. </author> <title> Error propagation analysis of real-time data intensive application. </title> <booktitle> In IEEE Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: Relaxed correctness criteria facilitate higher concurrency by permitting a limited amount of inconsistency in how a transaction views the database state [5, 8, 9, 11-13, 16, 17]. For example, a recent work [10] <ref> [11] </ref> proposed a class of real-time data access protocols called SSP (Similarity Stack Protocol) applicable to distributed real-time systems. The correctness of the SSP protocol is justified by the concept of similarity which allows different but sufficiently timely data to be used in a computation without adversely affecting the outcome.
Reference: [12] <author> K-J Lin. </author> <title> Consistency issues in real-time database systems. </title> <booktitle> In Proc. ICSS'89, </booktitle> <pages> pages 654-661. </pages>
Reference: [13] <author> K-J Lin and F. Jahanian. </author> <title> Issues and applications. In Sang Son, editor, Real-time Database Systems. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1997. </year>
Reference: [14] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard real-time environment. </title> <journal> Journal of the ACM, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: our optimization problem can be stated as: minimize objective function: P i under con straint: P n i =p U i =p P p P i ffi B The constraint P n i =p U i =p P 1) is needed to guarantee task schedulability un der both the Rate-Monotonic <ref> [14] </ref> and Distance-Constrained [4] scheduling algorithms. 1 The inequality p U i ensures that the temporal constraint imposed on object i at the backup is maintained while inequality p P i p U i guarantees that no unnecessary update is sent to the backup since more frequent updates at backup would <p> Refer to the extended version [19] for all the proofs of the theorems backup is relatively straightforward: 1. Assign p U i = ffi B i initially 2. Check schedulability test using rate-monotonic <ref> [14] </ref> or distance-constrained [4] scheduling. If the test fails, then it is impossible to schedule the task set without violating the given temporal constraint. 3. Otherwise, sort the terms p P i =p U i ; i = 1; : : : ; n into ascending order. 4. <p> Local optimal 1. Assign the smallest value that is p P i but ffi B to the new task such that the total utilization of the task set is still under 2n (2 1=2n 1) (This ensures that the whole task set is schedulable under rate-monotonic <ref> [14] </ref> or distance-constrained scheduling [4]). 2. If Step 1 fails, then reject the object. Global optimal 1. Insert term p P i =p U i into the ordered list that we obtained in static or previous allocations. 2. Rerun the static allocation algorithm. 3.
Reference: [15] <author> J.W.S. Liu, W.-K. Shih, and K.-J. Lin. </author> <title> Imprecise computation. </title> <booktitle> In Proceedings of IEEE, </booktitle> <volume> volume 82, </volume> <pages> pages 83-94, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: SSP schedules are deadlock-free, subject to limited blocking and do not use locks. Furthermore, a schedulability bound can be given for the SSP scheduler. Simulation results show that SSP is especially useful for scheduling real-time data access on multiprocessor systems. Similarly, the notion of imprecise computation <ref> [15] </ref> explores weaker application semantics and guarantees timely completion of tasks by relaxing the accuracy requirements of the computation. This is particularly useful in applications that use discrete samples of continuous time variables, since these values can be approximated when there is not sufficient time to compute an exact value.
Reference: [16] <author> C. Pu and A. Leff. </author> <title> Replica control in distributed systems: An asynchronous approach. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <pages> pages 377-386, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: In particular, a number of researchers have observed that serializ-ability is too strict as a correctness criterion for real-time databases. Relaxed correctness criteria facilitate higher concurrency by permitting a limited amount of inconsistency in how a transaction views the database state <ref> [5, 8, 9, 11-13, 16, 17] </ref>. For example, a recent work [10] [11] proposed a class of real-time data access protocols called SSP (Similarity Stack Protocol) applicable to distributed real-time systems.
Reference: [17] <author> S.B.Davidson and A. Watters. </author> <title> Partial computation in real-time database systems. </title> <booktitle> In Proc. Workshop on Real-Time Operating Systems and Software, </booktitle> <pages> pages 117-121, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: In particular, a number of researchers have observed that serializ-ability is too strict as a correctness criterion for real-time databases. Relaxed correctness criteria facilitate higher concurrency by permitting a limited amount of inconsistency in how a transaction views the database state <ref> [5, 8, 9, 11-13, 16, 17] </ref>. For example, a recent work [10] [11] proposed a class of real-time data access protocols called SSP (Similarity Stack Protocol) applicable to distributed real-time systems.
Reference: [18] <author> T.Abdelzaher, A.Shaikh, S.Johnson, F.Jahanian, and K.G.Shin. Rtcast: </author> <title> Lightweight multicast for real-time process groups. </title> <booktitle> In IEEE Real-Time Technology and Applications Symposium, </booktitle> <year> 1996. </year>
Reference-contexts: The TTP provides fault-tolerance by implementing active redundancy through a collection of replicated components with each relies on a number of hardware and software mechanisms for error detection to ensure a fail-silent behavior. RTCAST <ref> [18] </ref> is a lightweight fault-tolerant mul-ticast and membership service for real-time process groups which exchange periodic and aperiodic messages. The service supports bounded-time message transport, atomicity, and order for multicasts within a group of communicating processes in the presence of processor crashes and communication failures.
Reference: [19] <author> H. Zou and F. Jahanian. </author> <title> Optimization of a real-time primary-backup replication service. </title> <type> Technical Report CSE-TR-367-98, </type> <institution> University of Michi-gan, </institution> <month> July </month> <year> 1998. </year>
Reference-contexts: Static allocation: Since all objects are know a priori, the algorithm for scheduling updates from primary to 2 Due to space limitation, we omit the proof here. Refer to the extended version <ref> [19] </ref> for all the proofs of the theorems backup is relatively straightforward: 1. Assign p U i = ffi B i initially 2. Check schedulability test using rate-monotonic [14] or distance-constrained [4] scheduling.
Reference: [20] <author> H. Zou and F. Jahanian. </author> <title> Real-time primary-backup replications with temporal consistency guarantees. </title> <booktitle> In Proc. ICDCS, </booktitle> <pages> pages 48-56, </pages> <month> May </month> <year> 1998. </year>
Reference-contexts: Particularly, when time is scarce and the overhead for managing redundancy is too high, an alternative solution is required to provide both timing predictability and fault tolerance. This paper builds on our Real-Time Primary-Backup (RTPB) Replication <ref> [20] </ref> model that achieves a balance between fault tolerance and timing dependability. However, the proposed scheduling algorithm in [20] is not optimal in the sense that it minimizes neither the temporal inconsistency between the primary and backup nor the system overhead in maintaining a given bound on the inconsistency. <p> This paper builds on our Real-Time Primary-Backup (RTPB) Replication <ref> [20] </ref> model that achieves a balance between fault tolerance and timing dependability. However, the proposed scheduling algorithm in [20] is not optimal in the sense that it minimizes neither the temporal inconsistency between the primary and backup nor the system overhead in maintaining a given bound on the inconsistency. <p> Section 5 extends the results by considering faults. Section 6 is the implementation followed by performance analysis in Section 7. Section 8 discusses the related work, and finally, Section 9 is our conclusion. 2 The RTPB model The RTPB scheme developed in <ref> [20] </ref> is an extension of the traditional primary-backup approach to support real-time computation and temporal consistency guarantees. The main features that set RTPB apart from its traditional counterpart are the decou-pling of client request processes from backup updates and bounded temporal inconsistency between the primary and backup. <p> The same algorithm described in Section 4 can be used here if we substitute the upper bound ffi B i in the constraining inequality by ffi B 6 Implementation We have integrated the optimization techniques developed in this paper into the RTPB prototype that was built in our previous work <ref> [20] </ref>. The new prototype is implemented as a user-level x-kernel [7] based server on the MK 7.2 microkernel from the Open Group. 3 Our system includes a primary server and a backup server. A client application resides on the same machine as the primary. <p> Each inter-object temporal constraint ffi ij for object i, j can be met at the primary if p i ffi ij and p j ffi ij . The temporal constraint for object i on the backup is also checked to ensure that it can be met <ref> [20] </ref>. <p> The new client replaces the client at the crashed machine to perform the application task. Our implementation supports the integration of a new backup after a failure is detected. 7 Performance Evaluation This section evaluates the proposed optimization techniques against the RTPB service developed in <ref> [20] </ref>. we consider two metrics: average temporal distance and average duration of backup inconsistency, which are influenced by several parameters including client write rate, number of objects being accepted, window size, and message loss probability. 7.1 The ATD metrics To demonstrate the optimization technique proposed in this paper, we measured the <p> The optimized RTPB attempts to send as many updates as possible to the backup. It must be noted that in both graphs, larger window size results in smaller ATD, which conforms to the result presented in <ref> [20] </ref>. (a) without optimization (b) with optimization approximate 35% improvement on the ATD due to the application of the optimization techniques described in this paper. <p> The original RTPB model already schedules a minimum number of updates to the backup (hence leaves maximum available resources at the primary for client request processing). See Figure 6 and 7 in <ref> [20] </ref> for graphs of this metrics. 8 Related work 8.1 Replication models Past work on synchronous and asynchronous replication protocols has focused, in most cases, on applications for which timing predictability is not a key requirement.
References-found: 20

