URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1994/1994-14.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: W[2]-hardness of Precedence Constrained K-processor Scheduling  
Author: Hans L. Bodlaender Michael R. Fellows 
Abstract: It is shown that the Precedence Constrained K-Processor Scheduling problem is W [2]-hard. This means that there does not exist a constant c, such that for all fixed K, the Precedence Constrained K-Processor Scheduling problem can be solved in O(n c ) time, unless an unlikely collapse occurs in the parameterized complexity hierarchy introduced by Downey and Fellows (see [5]). That is, if the problem can be solved in polynomial time for each fixed K, then it is likely that the degree of the running time polynomial must increase as the number of processors K increases.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Abrahamson, R. Downey and M. Fellows. </author> <title> Fixed-Parameter Intractability II. </title> <booktitle> Proceedings of the 10th Symposium on Theoretical Aspects of Computer Science (STACS), </booktitle> <pages> pp. 374-385, </pages> <note> Springer-Verlag, Lecture Notes in Computer Science, 1993. 7 </note>
Reference-contexts: Namely, if such an algorithm would exist for Precedence Constrained K-Processor Scheduling, this would imply such algorithms for all problems in the parameterized complexity classes W <ref> [1] </ref> and W [2], including K-Independent Set, K-Clique, K-Perfect Code, K-Subset Sum, K-Subset Product, K-Square Tiling, and K-Step Halting Problem for Nondeterministic Tur-ing Machines [3, 4, 5, 6]. <p> f; g : N + ! N + are arbitrary functions and c is a constant independent of K, so that (x; K) 2 A if and only if (x 0 ; g (K)) 2 B. 3 In [5], Downey and Fellows define complexity classes F P T , W <ref> [1] </ref>, W [2], : : : , W [P ], where F P T is the class of fixed-parameter tractable problems. The following containment relations hold: F T P W [1] W [2] : : : W [P ] Problems that are hard for W [1] (and hence problems hard for <p> 0 ; g (K)) 2 B. 3 In [5], Downey and Fellows define complexity classes F P T , W <ref> [1] </ref>, W [2], : : : , W [P ], where F P T is the class of fixed-parameter tractable problems. The following containment relations hold: F T P W [1] W [2] : : : W [P ] Problems that are hard for W [1] (and hence problems hard for any larger class) are believed not to be fixed-parameter tractable. <p> F P T , W <ref> [1] </ref>, W [2], : : : , W [P ], where F P T is the class of fixed-parameter tractable problems. The following containment relations hold: F T P W [1] W [2] : : : W [P ] Problems that are hard for W [1] (and hence problems hard for any larger class) are believed not to be fixed-parameter tractable. However, showing that the W hierarchy is proper would be very hard, as this would imply P 6= N P . <p> Thus a completeness theory for exploring the issue of fixed-parameter tractability is a reasonable way to proceed. It can be shown that if the W hierarchy collapses, then a strong quantitative form of the P 6= N P conjecture fails <ref> [1] </ref>. A set of vertices W V is a dominating set of an undirected graph G = (V; E), if for all v 2 V , either v 2 W or v is adjacent to a vertex w 2 W .
Reference: [2] <author> H. Bodlaender, M. Fellows and M. Hallett. </author> <title> Beyond NP-completeness for problems of bounded width: hardness for the W hierarchy. To appear, </title> <booktitle> Proceedings of the 26th ACM Symposium on the Theory of Computing, </booktitle> <year> 1994. </year>
Reference-contexts: Some of the basic notions of this theory are reviewed in Section 2. The main result of this paper is that the Precedence Constrained K-Processor Scheduling problem is hard for the complexity class W <ref> [2] </ref>. <p> Namely, if such an algorithm would exist for Precedence Constrained K-Processor Scheduling, this would imply such algorithms for all problems in the parameterized complexity classes W [1] and W <ref> [2] </ref>, including K-Independent Set, K-Clique, K-Perfect Code, K-Subset Sum, K-Subset Product, K-Square Tiling, and K-Step Halting Problem for Nondeterministic Tur-ing Machines [3, 4, 5, 6]. <p> : N + ! N + are arbitrary functions and c is a constant independent of K, so that (x; K) 2 A if and only if (x 0 ; g (K)) 2 B. 3 In [5], Downey and Fellows define complexity classes F P T , W [1], W <ref> [2] </ref>, : : : , W [P ], where F P T is the class of fixed-parameter tractable problems. The following containment relations hold: F T P W [1] W [2] : : : W [P ] Problems that are hard for W [1] (and hence problems hard for any larger <p> g (K)) 2 B. 3 In [5], Downey and Fellows define complexity classes F P T , W [1], W <ref> [2] </ref>, : : : , W [P ], where F P T is the class of fixed-parameter tractable problems. The following containment relations hold: F T P W [1] W [2] : : : W [P ] Problems that are hard for W [1] (and hence problems hard for any larger class) are believed not to be fixed-parameter tractable. However, showing that the W hierarchy is proper would be very hard, as this would imply P 6= N P . <p> Question: Does G have a dominating set W V with jW j K? Parameter: K. Our main result relies on the following theorem from [5]. Theorem 1 Dominating Set is complete for the class W <ref> [2] </ref>. 3 Main Result Theorem 2 Precedence Constrained K-Processor Scheduling is W [2]-hard. Proof: We transform from Dominating Set. Let (G = (V; E), k) be an instance to Dominating Set. Suppose jV j = n, and write V = fv 0 ; : : : ; v n1 g.
Reference: [3] <author> L. Cai, J. Chen, R. Downey and M. Fellows. </author> <title> The parameterized complexity of short computations and factorization. </title> <institution> University of Victoria, </institution> <type> Technical Report, </type> <institution> Department of Computer Science, </institution> <month> July, </month> <year> 1993. </year>
Reference-contexts: Namely, if such an algorithm would exist for Precedence Constrained K-Processor Scheduling, this would imply such algorithms for all problems in the parameterized complexity classes W [1] and W [2], including K-Independent Set, K-Clique, K-Perfect Code, K-Subset Sum, K-Subset Product, K-Square Tiling, and K-Step Halting Problem for Nondeterministic Tur-ing Machines <ref> [3, 4, 5, 6] </ref>.
Reference: [4] <author> R. Downey, P. Evans and M. Fellows. </author> <title> Parameterized learning complexity. </title> <booktitle> Proc. Sixth ACM Workshop on Computational Learning Theory (COLT), </booktitle> <pages> pp. 51-57, </pages> <publisher> ACM Press, </publisher> <year> 1993. </year>
Reference-contexts: Namely, if such an algorithm would exist for Precedence Constrained K-Processor Scheduling, this would imply such algorithms for all problems in the parameterized complexity classes W [1] and W [2], including K-Independent Set, K-Clique, K-Perfect Code, K-Subset Sum, K-Subset Product, K-Square Tiling, and K-Step Halting Problem for Nondeterministic Tur-ing Machines <ref> [3, 4, 5, 6] </ref>.
Reference: [5] <author> R. Downey and M. Fellows. </author> <title> Fixed-parameter intractability (extended abstract). </title> <booktitle> In Proceedings of the Seventh Annual Conference on Structure in Complexity Theory, </booktitle> <pages> pp. 36-49, </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1992. </year> <note> Final version to appear in SIAM J. Comp. </note>
Reference-contexts: Just as the theory of NP-completeness can be used to show that problems are unlikely to be solvable in polynomial time, the theory of fixed parameter complexity, introduced in <ref> [5] </ref>, can be used to demonstrate the unlikelihood of fixed-parameter tractability. Some of the basic notions of this theory are reviewed in Section 2. The main result of this paper is that the Precedence Constrained K-Processor Scheduling problem is hard for the complexity class W [2]. <p> Namely, if such an algorithm would exist for Precedence Constrained K-Processor Scheduling, this would imply such algorithms for all problems in the parameterized complexity classes W [1] and W [2], including K-Independent Set, K-Clique, K-Perfect Code, K-Subset Sum, K-Subset Product, K-Square Tiling, and K-Step Halting Problem for Nondeterministic Tur-ing Machines <ref> [3, 4, 5, 6] </ref>. <p> (x 0 ; g (K)) in time f (K)jxj c , where f; g : N + ! N + are arbitrary functions and c is a constant independent of K, so that (x; K) 2 A if and only if (x 0 ; g (K)) 2 B. 3 In <ref> [5] </ref>, Downey and Fellows define complexity classes F P T , W [1], W [2], : : : , W [P ], where F P T is the class of fixed-parameter tractable problems. <p> The Dominating Set problem is the following: Dominating Set Instance: Undirected graph G = (V; E), integer K 2 N + . Question: Does G have a dominating set W V with jW j K? Parameter: K. Our main result relies on the following theorem from <ref> [5] </ref>. Theorem 1 Dominating Set is complete for the class W [2]. 3 Main Result Theorem 2 Precedence Constrained K-Processor Scheduling is W [2]-hard. Proof: We transform from Dominating Set. Let (G = (V; E), k) be an instance to Dominating Set.
Reference: [6] <author> R. Downey, M. Fellows, B. Kapron, M. Hallett and H.T. Wareham. </author> <title> The parameterized complexity of some problems in logic and linguistics. </title> <booktitle> To appear in Proceedings of Symposium on Logical Foundations of Computer Science (LFCS'94), Springer-Verlag, Lecture Notes in Computer Science, </booktitle> <year> 1994. </year>
Reference-contexts: Namely, if such an algorithm would exist for Precedence Constrained K-Processor Scheduling, this would imply such algorithms for all problems in the parameterized complexity classes W [1] and W [2], including K-Independent Set, K-Clique, K-Perfect Code, K-Subset Sum, K-Subset Product, K-Square Tiling, and K-Step Halting Problem for Nondeterministic Tur-ing Machines <ref> [3, 4, 5, 6] </ref>.
Reference: [7] <author> M. Fujii, T. Kasami, and K. Ninomiya. </author> <title> Optimal sequencing of two equivalent processors. </title> <journal> SIAM J. Appl. Math., </journal> <volume> 17 (1969), </volume> <pages> 784-789. </pages> <note> Erratum. SIAM J. Appl. Math. 20 (1971), 141. </note>
Reference-contexts: So far, a polynomial time algorithm is known only for the case of K = 2 <ref> [7] </ref>, and the question whether there exists a polynomial time algorithm for this problem for each fixed K is a famous open problem. (See e.g. [8], [OPEN 8].) If K is variable, then the problem is NP-hard. Many special cases have been investigated; see e.g. [9] for an overview.
Reference: [8] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability, A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: So far, a polynomial time algorithm is known only for the case of K = 2 [7], and the question whether there exists a polynomial time algorithm for this problem for each fixed K is a famous open problem. (See e.g. <ref> [8] </ref>, [OPEN 8].) If K is variable, then the problem is NP-hard. Many special cases have been investigated; see e.g. [9] for an overview. Although it is often believed that `polynomial time' is a synonym for `practical', this is not always the case. <p> This (desirable) complexity behaviour is termed fixed-parameter tractability. For other parameterized problems, it seems that the degrees of the polynomials bounding the running times must depend on K. Well-known examples of the former include K-Vertex Cover and K-Min Cut Linear Arrangement (see <ref> [8] </ref> for the definitions). Each of these is solvable in linear time for each fixed K. Examples of the latter include K-Dominating Set and K-Bandwidth, for which the best known algorithms require time (n K ) and are based on forms of exhaustive search. <p> Although we do not solve the problem [OPEN 8] from <ref> [8] </ref>, our result can be interpreted as bearing on the practical significance of this problem, showing that even if there is no particular K for which the problem is NP-complete, it is still likely to be computationally intractable for the fixed parameter values that are important in many applications. 2 Definitions
Reference: [9] <author> E. L. Lawler, J. K. Lenstra, A. H. G. Rinnooy Kan, and D. B. Shmoys. </author> <title> Sequencing and scheduling: Algorithms and complexity. </title> <editor> In S. G. et al, editor, Handbooks in OR & MS, </editor> <volume> Vol. 4, </volume> <pages> pages 445-522. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1993. </year> <month> 8 </month>
Reference-contexts: Many special cases have been investigated; see e.g. <ref> [9] </ref> for an overview. Although it is often believed that `polynomial time' is a synonym for `practical', this is not always the case. Polynomial time algorithms with a running time of fi (n K ) will be slow, even for very small values of K.
References-found: 9

