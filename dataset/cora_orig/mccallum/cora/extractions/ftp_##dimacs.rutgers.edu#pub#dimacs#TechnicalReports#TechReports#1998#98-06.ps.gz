URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1998/98-06.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1998.html
Root-URL: http://www.cs.rutgers.edu
Email: E-mail: yash@research.bell-labs.com.  
Author: Avishai Wool 
Keyword: Key Management for Encrypted Broadcast  
Address: 700 Mountain Ave., Murray Hill, NJ 07974.  
Affiliation: Bell Laboratories, Lucent Technologies,  
Note: by  DIMACS is a partnership of Rutgers University, Princeton University, AT&T Research, Bellcore, and Bell Laboratories. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 98-06 January 1998 
Abstract-found: 1
Intro-found: 1
Reference: [ARV95] <author> W. Aiello, S. Rajagopalan, and R. Venkatesan. </author> <title> Design of practical and provably good random number generators. </title> <booktitle> In Proc. ACM-SIAM Symp. on Discrete Alg. (SODA), </booktitle> <pages> pages 1-9, </pages> <year> 1995. </year>
Reference-contexts: A program whose CID is p is encrypted using the key Key (p) = M p. (1) This method of generating keys as linear combinations of the master keys is similar to the techniques used in <ref> [IN89, ARV95, FS96] </ref> to construct provably secure pseudo-random generators. However a pseudo-random generator in itself is not sufficient for our purposes; in the next section we show how we capitalize on the linearity of the scheme in the definitions of the possible packages.
Reference: [BC94] <author> C. Blundo and A. Cresti. </author> <title> Space requirements for broadcast encryption. </title> <editor> In A. De Santis, editor, </editor> <booktitle> Advances in Cryptology - EUROCRYPT'94, </booktitle> <volume> LNCS 950, </volume> <pages> pages 287-298. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Under this model, Fiat and Naor [FN94] suggested methods of securely broadcasting key information such that only a selected set of users can decrypt this information while coalitions of up to k other users can learn nothing. Extensions to this basic work can be found in <ref> [BC94, BFS96] </ref>. In the second model, the STTs also have an uplink capability (e.g., via a phone line or cable-modem). This model fits modern system designs such as the Lucent IVES TM architecture.
Reference: [Ber91] <author> S. Berkovits. </author> <title> How to broadcast a secret. </title> <booktitle> In Advances in Cryptology - EUROCRYPT'91, </booktitle> <volume> LNCS 547, </volume> <pages> pages 535-541. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Key management schemes which have full flexibility (i.e., allow users to access any set of programs they wish) can be found in [CT90, HP95]. However their techniques rely on RSA public-key cryptography [RSA78] and therefore are not considered to be applicable in our scenario. Protocols for conference key distribution <ref> [CC89, Ber91, Gon94] </ref> have more stringent security requirements than we do here, such as verifying the key's authenticity and repelling replay attacks.
Reference: [BFS96] <author> C. Blundo, L. A. Frota Mattos, and D. R. Stinson. </author> <title> Trade-offs between communication and storage in unconditionally secure schemes for broadcast encryption and interactive key distribution. </title> <booktitle> In Advances in Cryptology - CRYPTO'96, </booktitle> <volume> LNCS 1109, </volume> <pages> pages 387-400. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Under this model, Fiat and Naor [FN94] suggested methods of securely broadcasting key information such that only a selected set of users can decrypt this information while coalitions of up to k other users can learn nothing. Extensions to this basic work can be found in <ref> [BC94, BFS96] </ref>. In the second model, the STTs also have an uplink capability (e.g., via a phone line or cable-modem). This model fits modern system designs such as the Lucent IVES TM architecture.
Reference: [BM77] <author> G. Birkhoff and S. Mac Lane. </author> <title> A Survey of Modern Algebra. </title> <publisher> Macmillan Publishing Co., </publisher> <address> 4th edition, </address> <year> 1977. </year>
Reference-contexts: For sake of concreteness we can think of using encryption keys of length k = 64 or k = 128 bits. The Vspace scheme relies on basic results of linear algebra. A good reference book for the required mathematical background is <ref> [BM77] </ref>. We use boldface letters to denote program CIDs, which we view as n-bit vectors over GF (2). <p> Checking if a vector p is independent of the vectors currently in B can be done by solving a system of linear equations <ref> [BM77] </ref>. It is not difficult to see that the basis B generated in this manner does indeed span all the programs belonging to the requested topics. However, there may be side-effects to this procedure. This is since in general the union of linear subspaces is not a linear subspace.
Reference: [CC89] <author> G. H. Chiou and W. T. Chen. </author> <title> Secure broadcasting using secure lock. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> 15(8) </volume> <pages> 929-934, </pages> <year> 1989. </year>
Reference-contexts: Key management schemes which have full flexibility (i.e., allow users to access any set of programs they wish) can be found in [CT90, HP95]. However their techniques rely on RSA public-key cryptography [RSA78] and therefore are not considered to be applicable in our scenario. Protocols for conference key distribution <ref> [CC89, Ber91, Gon94] </ref> have more stringent security requirements than we do here, such as verifying the key's authenticity and repelling replay attacks.
Reference: [CEFH95] <author> J. L. Cohen, M. H. Etzel, D. W. Faucher, and D. N. Heer. </author> <title> Security for broadband digital networks. </title> <journal> Communications Technology, </journal> <pages> pages 58-69, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: Extensions to this basic work can be found in [BC94, BFS96]. In the second model, the STTs also have an uplink capability (e.g., via a phone line or cable-modem). This model fits modern system designs such as the Lucent IVES TM architecture. The solution suggested in <ref> [CEFH95] </ref> is based on the idea that each billing period the head-end runs a secure and authenticated protocol with every STT. During this protocol key information is downloaded to the STT, and pay-per-view data is uploaded. <p> STT, and in particular they can decrypt all the programs that Alice is entitled to. 2 Our specific concern here is to ensure that the pirates will not be able to decrypt programs that Alice is not entitled to. 2 Several measures are suggested in the Lucent IVES TM architecture <ref> [CEFH95] </ref> to qualify this statement.
Reference: [CT90] <author> G. C. Chick and S. E. Tavares. </author> <title> Flexible access control with master keys. </title> <editor> In G. Brassard, editor, </editor> <booktitle> Advances in Cryptology - CRYPTO'89, </booktitle> <volume> LNCS 435, </volume> <pages> pages 316-322. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Alternative approaches. Key management schemes which have full flexibility (i.e., allow users to access any set of programs they wish) can be found in <ref> [CT90, HP95] </ref>. However their techniques rely on RSA public-key cryptography [RSA78] and therefore are not considered to be applicable in our scenario. Protocols for conference key distribution [CC89, Ber91, Gon94] have more stringent security requirements than we do here, such as verifying the key's authenticity and repelling replay attacks.
Reference: [DES77] <institution> Data encryption standard. National Bureau of Standards, </institution> <type> NBS FIPS PUB 46, U.S. </type> <institution> Department of Commerce, </institution> <month> January </month> <year> 1977. </year>
Reference-contexts: This is because the pirate would be able to obtain either XORs of program keys, or XORs of the pseudo random strings by XORing together various encryptions. Candidates for the covering algorithm may be DES <ref> [DES77] </ref> or Triple-DES [Tri85]. - 14 - Besides choosing a good covering algorithm, another measure we can take is to pad the program keys with random strings, and then cover the padded key. This would increase the header size in proportion to the length of the padding.
Reference: [FN94] <author> A. Fiat and M. Naor. </author> <title> Broadcast encryption. </title> <booktitle> In Advances in Cryptology - CRYPTO'93, </booktitle> <volume> LNCS 773, </volume> <pages> pages 480-491. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Two types of solutions can be found in the literature, which differ in the communication model they assume. In the first model, the only type of communication between the head-end and STTs is the uni-directional broadcast. Under this model, Fiat and Naor <ref> [FN94] </ref> suggested methods of securely broadcasting key information such that only a selected set of users can decrypt this information while coalitions of up to k other users can learn nothing. Extensions to this basic work can be found in [BC94, BFS96].
Reference: [FS96] <author> J.-B. Fischer and J. Stern. </author> <title> An efficient pseudo-random generator provably as secure as syndrome decoding. </title> <editor> In U. Maurer, editor, </editor> <booktitle> Advances in Cryptology - EUROCRYPT'96, </booktitle> <volume> LNCS 1070, </volume> <pages> pages 245-255. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <month> - 18 </month> - 
Reference-contexts: A program whose CID is p is encrypted using the key Key (p) = M p. (1) This method of generating keys as linear combinations of the master keys is similar to the techniques used in <ref> [IN89, ARV95, FS96] </ref> to construct provably secure pseudo-random generators. However a pseudo-random generator in itself is not sufficient for our purposes; in the next section we show how we capitalize on the linearity of the scheme in the definitions of the possible packages.
Reference: [Gol67] <author> S. W. Golomb. </author> <title> Shift Register Sequences. </title> <publisher> Holden-Day, </publisher> <address> San Francisco, </address> <year> 1967. </year> <note> Reprinted by Aegean Park Press, </note> <year> 1982. </year>
Reference-contexts: Thus every program can be decrypted if the keys of n linearly independent programs are broken. Therefore we must ensure that the encryption algorithm does not preserve linearity. For this reason, algorithms based on linear feedback shift registers (cf. <ref> [Gol67] </ref>) may not be good choices. Algorithms based on the discrete log problem (cf. [Odl85]) may be inappropriate as well, since in some sense the linearity is preserved in the exponents, namely g a g b = g a+b .
Reference: [Gon94] <author> L. Gong. </author> <title> New protocols for third-party-based authentication and secure broadcast. </title> <booktitle> In Proc. 2nd ACM Conf. Comp. and Comm. Security, </booktitle> <pages> pages 176-183, </pages> <year> 1994. </year>
Reference-contexts: Key management schemes which have full flexibility (i.e., allow users to access any set of programs they wish) can be found in [CT90, HP95]. However their techniques rely on RSA public-key cryptography [RSA78] and therefore are not considered to be applicable in our scenario. Protocols for conference key distribution <ref> [CC89, Ber91, Gon94] </ref> have more stringent security requirements than we do here, such as verifying the key's authenticity and repelling replay attacks.
Reference: [GR69] <author> J. Goldman and G.-C. Rota. </author> <title> The number of subspaces of a vector space. </title> <editor> In W. Tutte, editor, </editor> <booktitle> Recent Progress in Combinatorics, </booktitle> <pages> pages 75-83. </pages> <publisher> Academic Press, </publisher> <year> 1969. </year>
Reference-contexts: Proposition 7.1 AP (Vspace) = 2 (1+o (1))n 2 =4 . Proof: The number of d-dimensional linear subspaces in an n-dimensional vector space over a field of 2 elements is called the Gaussian binomial coefficient and is denoted by h d . In <ref> [GR69] </ref> and [MS77, pp. 443-445] it is shown that " d = (2 d 1)(2 d1 1) (2 1) For the upper bound, note that the Gaussian coefficient is maximized when d = n=2, so AP (Vspace) = n X " d n n # Since for any 2 s n
Reference: [HP95] <author> S. Halevi and E. Petrank. </author> <title> Storing classified files. </title> <type> Manuscript, </type> <year> 1995. </year> <note> Electronic Publication: ftp://theory.lcs.mit.edu/pub/people/shaih/classify.ps.gz. </note>
Reference-contexts: Alternative approaches. Key management schemes which have full flexibility (i.e., allow users to access any set of programs they wish) can be found in <ref> [CT90, HP95] </ref>. However their techniques rely on RSA public-key cryptography [RSA78] and therefore are not considered to be applicable in our scenario. Protocols for conference key distribution [CC89, Ber91, Gon94] have more stringent security requirements than we do here, such as verifying the key's authenticity and repelling replay attacks.
Reference: [IN89] <author> R. Impagliazzo and M. Naor. </author> <title> Efficient cryptographic schemes as secure as subset sum. </title> <booktitle> In Proc. 30th IEEE Symp. Foundations of Comp. Sci. (FOCS), </booktitle> <pages> pages 236-241, </pages> <year> 1989. </year>
Reference-contexts: A program whose CID is p is encrypted using the key Key (p) = M p. (1) This method of generating keys as linear combinations of the master keys is similar to the techniques used in <ref> [IN89, ARV95, FS96] </ref> to construct provably secure pseudo-random generators. However a pseudo-random generator in itself is not sufficient for our purposes; in the next section we show how we capitalize on the linearity of the scheme in the definitions of the possible packages.
Reference: [Lub96] <author> M. Luby. </author> <title> Pseudorandomenss and Cryptographic Applications. </title> <publisher> Princeton Universtity Press, </publisher> <address> Princeton, New Jersey, </address> <year> 1996. </year>
Reference-contexts: Rather, the encryption key should be h (Key (p)) where h (x) is a member of a universal family of hash function (cf. <ref> [Lub96, ch. 8] </ref>). Practical choices may be MD5 [Riv92] or SHA [SHA93]. By this the linearity is destroyed before the key is used in the fast video encryption algorithm.
Reference: [McC96] <author> J. McCormac. </author> <title> European Scrambling Systems 5. </title> <publisher> Waterford Universtity Press, </publisher> <address> Waterford, Ireland, </address> <year> 1996. </year>
Reference-contexts: This is an access control scheme which is reportedly used by some analog European satellite TV systems, e.g., the Sky VideoCrypt systems <ref> [McC96, p. 4-10] </ref>. According to the pirate reports [McC96, p. 9-56], the recent digital DirectTv system (VideoGuard) in the US is similar to VideoCrypt, and thus may also use the bit-vector scheme. In this scheme, all the programs are encrypted with the same key, which is stored in every STT. <p> This is an access control scheme which is reportedly used by some analog European satellite TV systems, e.g., the Sky VideoCrypt systems [McC96, p. 4-10]. According to the pirate reports <ref> [McC96, p. 9-56] </ref>, the recent digital DirectTv system (VideoGuard) in the US is similar to VideoCrypt, and thus may also use the bit-vector scheme. In this scheme, all the programs are encrypted with the same key, which is stored in every STT. <p> Alternatively, if the pirates can extract the key from the STT then they can build a decoder that will decrypt every program. This second disadvantage seems to have contributed to the fact that both the VideoCrypt and VideoGuard systems were indeed extensively pirated <ref> [McC96] </ref>. The block-by-block scheme. In this scheme, the programs are split into n disjoint blocks. All the programs belonging to a block are encrypted using the same key. The STT stores the keys for each block that the user buys. <p> All the programs belonging to a block are encrypted using the same key. The STT stores the keys for each block that the user buys. According to the pirates' reports, such a system has been used in the D2-MAC EuroCrypt system <ref> [McC96, p. 4-11] </ref>. The block-by-block scheme is more secure than the bit-vector scheme since the access control is cryptographic. In addition the secure memory requirements are small; at most n keys need to be stored. <p> Therefore a pirate can only mount an attack using the transmission itself. This model of attack is discussed in Section 6.1. However experience shows that pirates are very successful in breaking into such "tamper-proof" STTs. In fact only a handful of the successful attacks described in <ref> [McC96] </ref> can be classified as crypt-analytical attacks, and only against analog equivalents of simple substitution ciphers. All the rest exploit breaches in the "secure" chip.
Reference: [MPE94] <author> MPEG-2: </author> <title> Coding of moving pictures and associated audio. </title> <address> ISO/IEC CD 13818-1, </address> <year> 1994. </year>
Reference-contexts: We require that k &gt; n for the scheme to work. A convenient value for n is n = 32, as this size allows a program's CID to be placed in the ECM field defined in the MPEG-2 standard <ref> [MPE94] </ref>. For sake of concreteness we can think of using encryption keys of length k = 64 or k = 128 bits. The Vspace scheme relies on basic results of linear algebra. A good reference book for the required mathematical background is [BM77].
Reference: [MQ95] <author> B. M. Macq and J.-J. Quisquater. </author> <title> Cryptology for digital TV broadcasting. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 83(6) </volume> <pages> 944-957, </pages> <year> 1995. </year>
Reference-contexts: The reason encryption is needed is to ensure that only paying customers, who have the required keys, will be able to view the programs <ref> [MQ95] </ref>. In this context, the head-end broadcasts the encrypted TV programs to a large population of users. Each network user has a set-top terminal (STT) which receives the encrypted broadcast and decrypts the programs that the user is entitled to.
Reference: [MS77] <author> F. J. MacWilliams and N. J. A. Sloane. </author> <title> The Theory of Error Correcting Codes. </title> <publisher> North Holland, </publisher> <year> 1977. </year>
Reference-contexts: To amend this situation, the check matrix can be added to the entitlement. With this extra information the STT can easily check if the selected program p is in the entitled subspace U or not, without attempting to decrypt it. In the field of error correcting codes <ref> [MS77] </ref> such a matrix is known as a parity check matrix. Definition 4.5 Let B be a basis matrix for a subspace U . <p> Proposition 7.1 AP (Vspace) = 2 (1+o (1))n 2 =4 . Proof: The number of d-dimensional linear subspaces in an n-dimensional vector space over a field of 2 elements is called the Gaussian binomial coefficient and is denoted by h d . In [GR69] and <ref> [MS77, pp. 443-445] </ref> it is shown that " d = (2 d 1)(2 d1 1) (2 1) For the upper bound, note that the Gaussian coefficient is maximized when d = n=2, so AP (Vspace) = n X " d n n # Since for any 2 s n we have
Reference: [Odl85] <author> A. Odlyzko. </author> <title> Discrete logarithms in finite fields and their cryptographic significance. </title> <booktitle> In Advances in Cryptology - EUROCRYPT'84, </booktitle> <volume> LNCS 209, </volume> <pages> pages 224-314. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Therefore we must ensure that the encryption algorithm does not preserve linearity. For this reason, algorithms based on linear feedback shift registers (cf. [Gol67]) may not be good choices. Algorithms based on the discrete log problem (cf. <ref> [Odl85] </ref>) may be inappropriate as well, since in some sense the linearity is preserved in the exponents, namely g a g b = g a+b .
Reference: [Riv92] <author> R. L. Rivest. </author> <title> The MD5 message digest algorithm. </title> <type> RFC 1321, </type> <month> April </month> <year> 1992. </year>
Reference-contexts: Rather, the encryption key should be h (Key (p)) where h (x) is a member of a universal family of hash function (cf. [Lub96, ch. 8]). Practical choices may be MD5 <ref> [Riv92] </ref> or SHA [SHA93]. By this the linearity is destroyed before the key is used in the fast video encryption algorithm.
Reference: [RSA78] <author> R. L. Rivest, A. Shamir, and L. M. Adelman. </author> <title> A method for obtaining digital signatures and public-key cryptosystems. </title> <journal> Comm. ACM, </journal> <volume> 21 </volume> <pages> 120-126, </pages> <year> 1978. </year>
Reference-contexts: Alternative approaches. Key management schemes which have full flexibility (i.e., allow users to access any set of programs they wish) can be found in [CT90, HP95]. However their techniques rely on RSA public-key cryptography <ref> [RSA78] </ref> and therefore are not considered to be applicable in our scenario. Protocols for conference key distribution [CC89, Ber91, Gon94] have more stringent security requirements than we do here, such as verifying the key's authenticity and repelling replay attacks.
Reference: [SHA93] <institution> Secure hash standard. National Institute of Standards and Technology, </institution> <type> NIST FIPS PUB 180, U.S. </type> <institution> Department of Commerce, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: Rather, the encryption key should be h (Key (p)) where h (x) is a member of a universal family of hash function (cf. [Lub96, ch. 8]). Practical choices may be MD5 [Riv92] or SHA <ref> [SHA93] </ref>. By this the linearity is destroyed before the key is used in the fast video encryption algorithm.
Reference: [Tri85] <author> ANSI X9.17 (revised). </author> <title> American National Standard for Financial Institution Key Management (Wholesale), </title> <journal> American Bankers Association, </journal> <year> 1985. </year>
Reference-contexts: This is because the pirate would be able to obtain either XORs of program keys, or XORs of the pseudo random strings by XORing together various encryptions. Candidates for the covering algorithm may be DES [DES77] or Triple-DES <ref> [Tri85] </ref>. - 14 - Besides choosing a good covering algorithm, another measure we can take is to pad the program keys with random strings, and then cover the padded key. This would increase the header size in proportion to the length of the padding.
References-found: 26

