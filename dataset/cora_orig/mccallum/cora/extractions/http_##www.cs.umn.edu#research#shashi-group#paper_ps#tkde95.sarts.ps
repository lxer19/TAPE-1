URL: http://www.cs.umn.edu/research/shashi-group/paper_ps/tkde95.sarts.ps
Refering-URL: http://www.cs.umn.edu/Research/shashi-group/abstract/tkde95.sarts.abs.html
Root-URL: http://www.cs.umn.edu
Email: (shekhar@cs.umn.edu) (hamidzad@cs.ust.hk)  Shashi Shekhar shekhar@cs.umn.edu  Babak Hamidzadeh hamidzad@cs.ust.hk  
Phone: phone fax  612-624-8307 612-625-0572  
Title: SARTS: A Dependable Real-Time Search Algorithm  
Author: Shashi Shekhar Babak Hamidzadeh 
Keyword: Ke Words: Real-Time, On-Line Optimization, Planning Effort Allocation, Search.  
Note: Name email  852-358-7011 852-358-1477 Under final review for publication in IEEE Transactions on Knowledge and Data Engineering  
Address: 4-192 EE/CS Building Clear Water Bay, Kowloon, Hong Kong 200 Union Street S.E. Minneapolis, MN 55455  
Affiliation: Department of Computer Science Department of Computer Science University of Minnesota University of Science Technology  
Abstract: Many important applications of AI systems need dependable real-time search algorithms which are capable of achieving high deadline compliance and high predictability. Deadline compliance represents the probability that the system will meet a task's time constraints. Predictability represents the system's ability to decide the feasibility of meeting the time constraints of a given task from a task set well ahead of the deadline. There is a great need for evaluation and development of real-time search algorithms. We propose a new algorithm, SARTS, that is based on a novel online technique to choose the proper values of parameters which control the time allocated to planning based on the time constraints. SARTS also provides criteria to predict its ability to meet the time constraints of a given task. We evaluate the deadline compliance and predictability of the proposed algorithm. The results of our experiments show that the new ideas incorporated in SARTS lead to higher performance in terms of deadline compliance and predictability. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <editor> E. Rich, </editor> <booktitle> Artificial Intelligence, </booktitle> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1983. </year>
Reference-contexts: Section 4 provides an experimental evaluation of SARTS. Based on the size of the state space, availability of information and the nature of the problem solving, the complete state space may not be generated and stored prior to the start of problem solving <ref> [1] </ref>. - 5 - Finally, section 5 provides a set of concluding remarks. 2. State of the Art and Our Contributions Recent years have witnessed a great deal of work on real-time search. This section summarizes the related literature and identifies the contributions of this paper in this area. 2.1.
Reference: 2. <author> R. E. Korf, </author> <title> ``Search: a survey of recent results,'' Exploring artificial intelligence ( Ed. </title> <editor> H. Shrobe), </editor> <publisher> Morgan Kauffman, </publisher> <year> 1988. </year>
Reference: 3. <author> J. A. Stankovic and K. Ramamritham, </author> <title> ``Editorial: What is Predictability for Real-Time Systems?,'' </title> <journal> Journal of Real-Time Systems, </journal> <volume> vol. 2, </volume> <pages> pp. 247-254, </pages> <publisher> Kluwer Academic Publishing, </publisher> <year> 1990. </year>
Reference-contexts: Basic Concepts A real-time system is defined to be one in which the quality and correctness of a solution provided by the system depends on the time at which the solution is produced, as well as the functional correctness of that solution <ref> [3] </ref>. The time constraints of many real-time tasks are posed as deadlines on the time by which solutions are provided by a system. <p> Critical tasks are discussed in classical computer systems literature in the context of dependability [4], which encompasses the notions of reliability [5], fault tolerance [6], safety [7], and security [4]. The dependability of a real-time system, however, refers to deadline compliance - 3 - and predictability <ref> [3] </ref>. Given a task set, deadline compliance represents the probability of meeting the time constraint of a randomly selected task. This can be done via calculating the fraction or percentage of tasks whose deadlines can be met by the system.
Reference: 4. <author> J. C. Laprie and A. Costes, </author> <title> ``Dependability: A Unifying Concept for Reliable Computing,'' </title> <booktitle> Proceedings of the 12th International Symposium on Fault Tolerant Computing, </booktitle> <pages> pp. 18-21, </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1982. </year> <month> - 23 </month> - 
Reference-contexts: Critical tasks are discussed in classical computer systems literature in the context of dependability <ref> [4] </ref>, which encompasses the notions of reliability [5], fault tolerance [6], safety [7], and security [4]. The dependability of a real-time system, however, refers to deadline compliance - 3 - and predictability [3]. <p> Critical tasks are discussed in classical computer systems literature in the context of dependability <ref> [4] </ref>, which encompasses the notions of reliability [5], fault tolerance [6], safety [7], and security [4]. The dependability of a real-time system, however, refers to deadline compliance - 3 - and predictability [3]. Given a task set, deadline compliance represents the probability of meeting the time constraint of a randomly selected task.
Reference: 5. <author> J. D. Musa, A. Iannino, and K. Okumoto, </author> <title> Software Reliability: Measurement, Prediction, Application, </title> <publisher> McGraw-Hill. </publisher>
Reference-contexts: Critical tasks are discussed in classical computer systems literature in the context of dependability [4], which encompasses the notions of reliability <ref> [5] </ref>, fault tolerance [6], safety [7], and security [4]. The dependability of a real-time system, however, refers to deadline compliance - 3 - and predictability [3]. Given a task set, deadline compliance represents the probability of meeting the time constraint of a randomly selected task.
Reference: 6. <institution> IEEE Computer, </institution> <note> Special Issue on Dependability Modeling, </note> <month> October </month> <year> 1990. </year>
Reference-contexts: Critical tasks are discussed in classical computer systems literature in the context of dependability [4], which encompasses the notions of reliability [5], fault tolerance <ref> [6] </ref>, safety [7], and security [4]. The dependability of a real-time system, however, refers to deadline compliance - 3 - and predictability [3]. Given a task set, deadline compliance represents the probability of meeting the time constraint of a randomly selected task.
Reference: 7. <author> N. G. Leveson, </author> <title> ``Software Safety: Why, What, and How,'' </title> <journal> Computing Surveys, </journal> <volume> vol. 18, no. 2, </volume> <pages> pp. 125-163, </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1986. </year>
Reference-contexts: Critical tasks are discussed in classical computer systems literature in the context of dependability [4], which encompasses the notions of reliability [5], fault tolerance [6], safety <ref> [7] </ref>, and security [4]. The dependability of a real-time system, however, refers to deadline compliance - 3 - and predictability [3]. Given a task set, deadline compliance represents the probability of meeting the time constraint of a randomly selected task.
Reference: 8. <author> T. Anderson and P. A. Lee, </author> <title> in Fault Tolerance: </title> <booktitle> Principles and Practice, </booktitle> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1981. </year>
Reference-contexts: A predictable real-time system is one for which a simple model can be constructed to forecast that system's ability to meet the time constraints of a given task. The models to predict and to detect possible deadline violations (i.e. unsafe states) may include assertions, external monitors and watchdog timers <ref> [8] </ref>. "In general, it is important (1) to detect unsafe states as quickly as possible in order to minimize exposure time, (2) to have monitors that are independent from the application software so that faults in one cannot disable the other, and (3) to have a monitor add as little complexity
Reference: 9. <author> M. Drummond, K. Swanson, J. Bresina, and R. Levinson, </author> <title> ``Reaction-First Search,'' </title> <booktitle> Proceedings of the International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 1408-1414, IJCAI, </pages> <year> 1993. </year>
Reference-contexts: Solution quality may also be measured by the degree of completion of the task. A partial completion of a task in a real-time system may refer to searching and executing a partial solution to a problem instance before a deadline. A value is associated with a partially completed task <ref> [9] </ref>. This value can be calculated via a function f (n,g) that measures the quality of the partially completed task based on how close the task is to completion. The closer the task is to completion, the higher its value will be.
Reference: 10. <author> R.E. Korf, </author> <title> ``Real-Time Heuristic Search: First Results,'' </title> <booktitle> Proc. AAAI Conference, </booktitle> <year> 1987. </year>
Reference-contexts: All algorithms used a common admissible heuristic function, i.e. euclidean distance, for estimating the distance from a given node to the Destination node. This heuristic formula is monotonic <ref> [10] </ref> and is guaranteed to produce optimal solutions in A*. This heuristic formula allows substantial pruning of frontier nodes without loss of valuable information while reaching a partial solution, in the family of candidate algorithms included in our experiments. In the following paragraphs, we will describe the individual algorithms. <p> This policy of executing only a single edge in each execution cycle is referred to as the least-commitment policy. This process of planning cycles followed by least-commitment execution cycles is repeated until a solution is reached <ref> [10] </ref>. The different versions of SARTS and RTA*(n) that are tested in this set of experiments are as follows. The PPRTA*(n) algorithm is a variation of RTA*(n) which differs from that algorithm only in its commitment policy in executing planned partial paths. <p> The deadline values were selected from the range <ref> [10, 20, ..., 200, 300, ..., 1000] </ref>. PPRTA*(n) may lead to shorter paths in terms of execution costs. This algorithm, however, incurs larger planning costs than FL (n). As is shown in the figure, FL (n) performs as well as or better than PPRTA*(n) for most n. <p> The deadline values were selected from the range <ref> [10, 20, ..., 200, 300, ..., 1000] </ref>. As was pointed out before, both algorithms adopt the partial-A* search policy of FL (n), but they differ in their plan-cycle termination criterion. <p> The deadline values were selected from the range <ref> [10, 20, ..., 200, 300, ..., 1000] </ref>. We use true-negative (TN), false-negative (FN), false-positive (FP) and true-positive (TP) categories in order to evaluate the test. The prediction accuracy of the test is measured as TP + FN # of instances 100. The accuracy measures the predictive power of an algorithm.
Reference: 11. <author> J. A. Stankovic and K. Ramamritham, </author> <title> Tutorial Hard Real-Time Systems, </title> <publisher> Computer Society Press of the IEEE, </publisher> <year> 1988. </year>
Reference: 12. <author> J. A. Stankovic and K. Ramamritham, </author> <title> Advances in Real-Time Systems, </title> <publisher> Computer Society Press of the IEEE, </publisher> <year> 1993. </year>
Reference: 13. <author> K. M. Kavi, </author> <title> Real-Time Systems: Abstractions, </title> <booktitle> Languages, and Design Methodologies, </booktitle> <publisher> Computer Society Press of the IEEE, </publisher> <year> 1992. </year>
Reference: 14. <author> Y. H. Lee and C. M. Krishna, </author> <title> Readings in Real-Time Systems, </title> <publisher> Computer Society Press of the IEEE, </publisher> <year> 1993. </year>
Reference: 15. <author> V. Lesser, </author> <title> ``Guest Editor Introduction: </title> <booktitle> Special Issue on Real-Time AI,'' Real-Time Systems, </booktitle> <volume> vol. 2, no. 1/2, </volume> <month> May </month> <year> 1990. </year>
Reference-contexts: For a comprehensive survey of these algorithms see [27,26]. Heuristic search has been used as a viable approach to hard real-time task scheduling problems [28,29,30,31,32,33,34,35,36,37,38]. Real-time AI search algorithms [2,39,40,41,42,43,40,44,45,46,47,10,48,49,50,51,52,53,54,55,9] manage the inherent non-determinism in most AI problems so as to produce an acceptable answer within a time constraint <ref> [15] </ref>. These approaches are based on the allocation and control of planning time [39,40,41,42,43,44,10,48], anytime problem solving [49,50,51], and a priori knowledge about the utility of planning [52,53,54].
Reference: 16. <author> B. Auernheimer and R. A. Kemmerer, ``RT-ASLAN: </author> <title> A Specification Language for Real-Time Systems,'' </title> <journal> Tr ans-actions on Software Engineering, </journal> <volume> vol. SE-12, no. 9, </volume> <pages> pp. 879-889, </pages> <publisher> IEEE, </publisher> <month> September </month> <year> 1986. </year>
Reference: 17. <author> J. Crow, D. Denning, P. Ladkin, M. Melliar-Smith, J. Rushby, R. Schwartz, R. Shostak, and F. von Henke, </author> <title> SRI verification system version 2.0 user's guide, </title> <institution> SRI International Computer Science Laboratory, </institution> <address> Menlo Park CA., </address> <month> November </month> <year> 1985. </year>
Reference: 18. <author> D. I. Good, B. L. DiVito, and M. K. Smith, </author> <title> Using the Gypsy Methodology, </title> <institution> Institute for Computer Science, Uni-veristy of Texas at Austin, </institution> <month> June </month> <year> 1984. </year>
Reference: 19. <author> J. Scheid, S. Anderson, R. Martin, and S. Hotsberg, </author> <title> The Ina Jo Specification Language Reference Manual, System Development Corp., </title> <address> Santa Monica, CA, </address> <month> January </month> <year> 1986. </year>
Reference: 20. <author> D. H. Thompson and R. W. Erickson (Eds.), </author> <title> AFFIRM Reference Manual, </title> <institution> USC Information Science Institute, Marina del Rey, </institution> <address> CA, </address> <month> February </month> <year> 1981. </year>
Reference-contexts: The deadline values were selected from the range <ref> [10, 20, ..., 200, 300, ..., 1000] </ref>. PPRTA*(n) may lead to shorter paths in terms of execution costs. This algorithm, however, incurs larger planning costs than FL (n). As is shown in the figure, FL (n) performs as well as or better than PPRTA*(n) for most n. <p> The deadline values were selected from the range <ref> [10, 20, ..., 200, 300, ..., 1000] </ref>. As was pointed out before, both algorithms adopt the partial-A* search policy of FL (n), but they differ in their plan-cycle termination criterion. <p> The deadline values were selected from the range <ref> [10, 20, ..., 200, 300, ..., 1000] </ref>. We use true-negative (TN), false-negative (FN), false-positive (FP) and true-positive (TP) categories in order to evaluate the test. The prediction accuracy of the test is measured as TP + FN # of instances 100. The accuracy measures the predictive power of an algorithm.
Reference: 21. <author> J. F. Kurose, M. Schwartz, and Y. Yemini, </author> <title> ``Multiple-Access Protocols and Time-Constrained Communication,'' </title> <journal> ACM Computing Surveys, </journal> <pages> pp. 43-70, </pages> <month> March, </month> <year> 1984. </year>
Reference-contexts: Research on real-time systems [11,12,13,14] has addressed the issues in specification, verification, and design [16,17,18,19,20]. The dependability of real-time systems was evaluated via statically analyzing the specification as well as via dynamic simulation. Real-time system research has addressed problems such as real-time communications <ref> [21] </ref>, operating system design [22], architectural issues [23,24,25], and real-time task scheduling [26]. Real-time task scheduling algorithms address the problem of executing a set of tasks with common or individual deadlines in such a way that the task deadlines are met.
Reference: 22. <author> J. A. Stankovic and K. Ramamritham, </author> <title> ``The Design of the Spring Kernel,'' </title> <booktitle> Proceedings of the Real-Time Systems Symposium, </booktitle> <pages> pp. 146-157, </pages> <publisher> IEEE, </publisher> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: Research on real-time systems [11,12,13,14] has addressed the issues in specification, verification, and design [16,17,18,19,20]. The dependability of real-time systems was evaluated via statically analyzing the specification as well as via dynamic simulation. Real-time system research has addressed problems such as real-time communications [21], operating system design <ref> [22] </ref>, architectural issues [23,24,25], and real-time task scheduling [26]. Real-time task scheduling algorithms address the problem of executing a set of tasks with common or individual deadlines in such a way that the task deadlines are met.
Reference: 23. <editor> Barbara Hayes-Roth, </editor> <booktitle> ``Architectural Foundations for Real-Time Performance in Intelligent Agents,'' Real-Time Systems, </booktitle> <volume> vol. 2, no. 1/2, </volume> <month> May, </month> <year> 1990. </year>
Reference: 24. <author> J.S. Lark, L.D. Erman, S. Forrest, K.P. Gostelow, F. Hayes-Roth, and D.M. Smith, </author> <title> ``Concepts, Methods, and Languages for Building Timely Intelligent Systems,'' </title> <booktitle> Real-Time Systems, </booktitle> <volume> vol. 2, no. 1/2, </volume> <month> May, </month> <year> 1990. </year>
Reference: 25. <author> R. A. Brooks, </author> <title> ``A Robust Layered Control System for a Mobile Robot,'' </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> vol. RA-2, no. 1, </volume> <pages> pp. 14-23, </pages> <month> March, </month> <year> 1986. </year>
Reference: 26. <author> P. Gopinath, </author> <title> ``A Survey of Real-Time Scheduling Agorithms,'' </title> <type> Working Paper, </type> <institution> Honeywell Inc., </institution> <year> 1993. </year>
Reference-contexts: The dependability of real-time systems was evaluated via statically analyzing the specification as well as via dynamic simulation. Real-time system research has addressed problems such as real-time communications [21], operating system design [22], architectural issues [23,24,25], and real-time task scheduling <ref> [26] </ref>. Real-time task scheduling algorithms address the problem of executing a set of tasks with common or individual deadlines in such a way that the task deadlines are met. The complexity of these algorithms can vary greatly based on the characteristics of the tasks, the system and their time constraints.
Reference: 27. <author> S. Cheng, J. A. Stankovic, and K. Ramamritham, </author> <title> ``Scheduling Algorithms for Hard Real-Time Systems - A Brief Survey,'' </title> <booktitle> Tutorial on Hard Real-Time Systems, </booktitle> <pages> pp. 150-173, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1988. </year>
Reference: 28. <author> D. Peng and K. G. Shin, </author> <title> ``Modeling of Concurrent Task Execution in a Distributed System for Real-Time Control,'' </title> <journal> Tr ansactions on computers, IEEE, </journal> <month> April, </month> <year> 1987. </year>
Reference: 29. <author> C. C. Shen and W. H. Tsai, </author> <title> ``A Graph Matching Approach to Optimal Task Assignment in Distributed Computing Systems Using a Minimax Criterion,'' </title> <journal> Tr ansactions on Computers, IEEE, </journal> <month> March, </month> <year> 1985. </year>
Reference: 30. <author> C. Hou and K. G. Shin, </author> <title> ``Allocation of Periodic Task Modules with Precedence and Deadline Constraints in Distributed Real-Time Systems,'' </title> <booktitle> Real-Time Systems Symposium, IEEE, </booktitle> <year> 1992. </year>
Reference: 31. <author> Bratley P., Florian M., and Robillard P., </author> <title> ``Scheduling with Earliest Start and Due Date Constraints,'' </title> <journal> Naval Research Logistics Quarterly, </journal> <volume> vol. 18, no. 4, </volume> <month> December </month> <year> 1971. </year> <month> - 24 </month> - 
Reference: 32. <author> Baker K. R. and Su Z. S., </author> <title> ``Sequencing with Due-Dates and Early Start Times to Minimize Maximum Tardiness.,'' </title> <journal> Naval Research Logistics Quarterly, </journal> <volume> vol. 21, </volume> <year> 1974. </year>
Reference: 33. <author> H. Kise, </author> <title> ``A solvable case of the one-machine scheduling problem with ready and due times,'' </title> <journal> Operations Research, </journal> <volume> vol. 26, no. 1, </volume> <year> 1978. </year>
Reference: 34. <author> Erschler J., Fontan G., Merce C., and Roubellat F., </author> <title> ``A New Dominance Concept in Scheduling n Jobs on a Single Machine with Ready Times and Due Dates,'' </title> <journal> Operations Research, </journal> <volume> vol. 31, no. 1, </volume> <year> 1983. </year>
Reference: 35. <author> W. Zhao and K. Ramamritham, </author> <title> ``Simple ad Integrated Heuristic Algorithms for Scheduling Tasks with Time and Resource Constraints,'' </title> <journal> Journal of Systems and Software, </journal> <year> 1987. </year>
Reference: 36. <author> W. Zhao, K. Ramamritham, and J. A. Stankovic, </author> <title> ``Preemptive Scheduling Under Time and Resource Constraints,'' </title> <journal> IEEE Transactions on Computers, </journal> <month> August </month> <year> 1987. </year>
Reference: 37. <author> Bratley P., Florian M., and Robillard P., </author> <title> ``Scheduling with Earliest Start and Due Date Constraints on Multiple Machines,'' </title> <journal> Naval Research Logistics Quarterly, </journal> <volume> vol. 18, </volume> <year> 1975. </year>
Reference: 38. <author> M. Zweben, E. Davis, B. Daun, E. Drascher, M. Deale, and M. Eskey, </author> <title> ``Learning to Improve Constraint-Based Scheduling,'' </title> <journal> Artificial Intelligence, </journal> <volume> vol. 58, </volume> <pages> pp. 271-296, </pages> <publisher> Elsevier, </publisher> <year> 1992. </year>
Reference: 39. <author> R.E. Korf, </author> <title> ``Depth-Limited Search for Real-Time Problem Solving,'' </title> <booktitle> Real-Time Systems, </booktitle> <volume> vol. 2, no. 1/2, </volume> <month> May, </month> <year> 1990. </year>
Reference: 40. <author> B. Hamidzadeh and S. Shekhar, ``DYNORA: </author> <title> A Real-Time Planning Algorithm to Meet Response Time Constraints in Dynamic Environments,'' </title> <booktitle> Proc. of IEEE Conference on Tools for Artificial Intelligence, </booktitle> <year> 1991. </year>
Reference-contexts: This algorithm, however, does not directly address the problem of constraints on response time. Furthermore, this algorithm does not have the ability to adjust the allocated planning time according to the constraints of the task. Another approach to allocation and control of planning time is provided in <ref> [40] </ref> by the DYnamic Near Optimal Response-time Algorithm (DYNORA) to simultaneously address both response-time constraints and issues concerning dynamic environments. As a means of minimizing response-times, DYNORA uses both solution quality and planning time to direct a search, which is unique.
Reference: 41. <author> S. Shekhar and B. Hamidzadeh, </author> <title> ``Evaluation of Real-Time Search Algorithms in Dynamic Worlds (Summary of Results),'' </title> <booktitle> Proc. of IEEE Conference on Tools for Artificial Intelligence Conference, </booktitle> <year> 1992. </year>
Reference: 42. <author> B. Hamidzadeh and S. Shekhar, ``DYNORAII: </author> <title> A Real-Time Planning Algorithm,'' </title> <booktitle> Accepted for Publication in the International Journal of Artificial Intelligence Tools, </booktitle> <address> IJAIT, </address> <year> 1993. </year>
Reference: 43. <author> B. Hamidzadeh and S. Shekhar, </author> <title> ``Real-time Planning: Meeting Response Time Constraints in Dynamic Environments,'' </title> <booktitle> Proc. of the Workshop on Real-Time Knowledge-Based Systems, AAAI, </booktitle> <year> 1991. </year>
Reference: 44. <author> R. E. Korf, </author> <title> ``Real-Time Heuristic Search,'' </title> <journal> Artificial Intelligence Journal, </journal> <volume> vol. 42, no. </volume> <pages> 2-3, pp. 197-221, </pages> <year> 1990. </year>
Reference-contexts: A later cycle may utilize the result of a prior cycle via this special number to avoid looping in cycles indefinitely <ref> [44] </ref>. During the execution phase, the partial path planned in the plan phase of the current cycle is executed. The partial path may consist of one or more edges in the graph.
Reference: 45. <author> B. Hamidzadeh, B. Hamidzadeh, and S. Shekhar, </author> <title> ``Specification and Analysis of Real-Time Problem Solvers,'' </title> <note> Under final review for publication in IEEE Transactions on Software Engineering, </note> <year> 1994. </year>
Reference: 46. <author> J. C. Pemberton and R. E. Korf, </author> <title> ``Incremental Path Planning on Graphs with Cycles,'' </title> <booktitle> Proceedings of the First International Conference on AI Planning Systems, </booktitle> <pages> pp. 179-188, </pages> <year> 1992. </year>
Reference: 47. <author> S. Russell and E. H. Wefald, </author> <title> Do the Right Thing, </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference: 48. <author> R.E. Korf, </author> <title> ``Real-Time Heuristic Search: New Results,'' </title> <booktitle> Proc. AAAI Conference, </booktitle> <year> 1988. </year>
Reference: 49. <author> T. Dean and M. Boddy, </author> <title> ``An Analysis of Time Dependent Planning,'' </title> <booktitle> Proc. AAAI, </booktitle> <pages> pp. 49-54, </pages> <year> 1988. </year>
Reference: 50. <author> M. Boddy, </author> <title> ``Solving Time-Dependent Problems: A Decision-Theoretic Approach to Planning in Dynamic Environments,'' </title> <type> Ph.D. Dissertation, </type> <institution> Department of Computer Science, Brown University, </institution> <month> May, </month> <year> 1991. </year>
Reference: 51. <author> S. Shekhar and S. Dutta, </author> <title> ``Minimizing Response Times In Real Time Planning And Search,'' </title> <booktitle> Proceedings of 11th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 238-242, IJCAI, </pages> <year> 1989. </year>
Reference-contexts: Reaction-First Search (RFS)[9] can be considered an anytime search algorithm in the sense that its expected performance monotonically improves its goal satisfaction probability. This algorithm, however, simply uses whatever computation time is available without monitoring or controlling the planning time to better comply with deadlines. NORA <ref> [51] </ref> is another example of an anytime search algorithm that uses hierarchical search to improve the solution at hand via a set of semantic information for database query planning. Like other anytime algorithms, NORA improves the solution quality, giv en a longer time. <p> Small values of a may restrict the planning time to a minimum in each cycle, reducing SARTS to a greedy algorithm. Besides controlling planning cost, criterion (1) is also effective in achieving near-optimal response time in sequential plan and execute paradigms <ref> [51] </ref>. CP (i) may represent elapsed time and may depend on the number of nodes expanded during the ith cycle. The expanded nodes are those whose descendants were generated and were added, in the correct order, to the open list during cycle i.
Reference: 52. <author> E. J. Horvitz, G. F. Cooper, and D. E. Heckerman, </author> <title> ``Reection and Action Under Scarce Resources: Theoretical Principles and Empirical Study,'' </title> <booktitle> Proceedings of 11th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 1121-1127, IJCAI, </pages> <year> 1989. </year>
Reference: 53. <author> S. Russell and E. </author> <title> Wefald, </title> <booktitle> ``Principles of Metareasoning,'' Artificial Intelligence, </booktitle> <volume> vol. 49, </volume> <pages> pp. 361-395, </pages> <publisher> Elsevier, </publisher> <year> 1991. </year>
Reference: 54. <author> M. Boddy, </author> <title> ``Anytime Problem Solving Using Dynamic Programming,'' </title> <booktitle> Proc. Ninth National Conference on Artificial Intelligence, AAAI, </booktitle> <year> 1991. </year>
Reference: 55. <author> B. Hamidzadeh and S. Shekhar, </author> <title> ``Can Real-Time Search Algorithms Meet Deadlines?,'' </title> <booktitle> Proc. of the Tenth National Conference on Artificial Intelligence, AAAI, </booktitle> <year> 1992. </year>
Reference: 56. <author> C. E. Shannon, </author> <title> ``Programming a Computer For Playing Chess,'' </title> <journal> Philosophical Magazine, </journal> <volume> vol. 41, </volume> <pages> pp. 256-275, </pages> <year> 1950. </year>
Reference-contexts: The complete plan to reach the goal may not be worked out by the time the allocated planning time has reached its limit. The agent executes a partial plan without exploring all the consequences of this commitment. RTA* uses a variation of the minmax search <ref> [56] </ref> called the minmin look-ahead search for partial planning. The minmin search looks forward from the current state to a fixed-depth horizon and applies the heuristic evaluation function (f=g+h) of A* to the nodes at the depth frontier. The best f value is then sent back to the current node.
Reference: 57. <author> D. Gelperin, </author> <title> ``On the Optimality of A*,'' </title> <journal> Artificial Intelligence, </journal> <volume> vol. 8, </volume> <pages> pp. 69-76, </pages> <publisher> Elsevier, </publisher> <year> 1977. </year>
Reference-contexts: The execution phase of a cycle in SARTS may consist of traversing the entire partial path, as shown in figure 2. Planning carried out in each cycle consists of several iterations. An iteration of the SARTS algorithm is similar to an iteration of A* <ref> [57] </ref>. Each iteration removes the most promising node from a list of unexplored nodes (i.e. the open list), generates the immediate children of that node (expanding a node), adds those children to the open list, and sorts the new list with the most promising node first. <p> nodes to be the primary measure of A perfect heuristic function h * (s, g) provides an exact value of the execution cost of path (node, goal)[58]. - 9 - planning time, the above statements also imply that, with a perfect heuristic, A* finds the optimal path in optimal time <ref> [57] </ref>. Similar properties hold for SARTS as shown in the following lemmas. Lemma 1: Given h * , during each cycle i, SARTS expands only those nodes which are on the optimal path from the current node s (i) of that cycle to the goal.
Reference: 58. <author> N. J. Nilsson, </author> <booktitle> Principles of Artificial Intelligence, </booktitle> <publisher> Tioga, </publisher> <address> Palo Alto, CA, </address> <year> 1980. </year> <month> - 25 </month> - 
Reference: 59. <author> P. E. Hart, N. J. Nilsson, and B. Raphael, </author> <title> ``A Formal Basis For the Heuristic Determination of Minimum Cost Paths,'' </title> <journal> IEEE Transactions on Systems Science and Cybernetics, </journal> <volume> vol. SSC-4, no. 2, </volume> <pages> pp. 100-107, </pages> <year> 1968. </year> <month> - 26 </month> -
References-found: 59

