URL: ftp://coast.cs.purdue.edu/pub/COAST/papers/mark-crosbie/crosbie-krsul-lodin-spaf-smbs.ps.Z
Refering-URL: http://www.cs.purdue.edu/coast/coast-library.html
Root-URL: http://www.cs.purdue.edu
Email: fmcrosbie,krsul,swlodin, spafg@cs.purdue.edu  
Title: A Secure Message Broadcast System (SMBS)  
Author: Mark Crosbie Ivan Krsul Steve Lodin Eugene H. Spafford 
Date: April 16, 1997  
Address: West Lafayette, IN 47907-1398  
Affiliation: The COAST Project Department of Computer Sciences Purdue University  
Pubnum: Technical Report CSD-TR-96-019  
Abstract-found: 0
Intro-found: 1
Reference: [BG92] <author> Mihir Bellare and Oded Goldreich. </author> <title> On defining proofs of knowledge. </title> <booktitle> In Proceedings of CRYPTO 92: Advances in Cryptology, Lectures in computer science. </booktitle> <institution> University of California, Santa Barbara, </institution> <year> 1992. </year>
Reference-contexts: Although much has been written about zero knowledge proofs, and to the best of our knowledge, few products have actual implementations that depend on this class of authentication mechanisms, and none use them as effective authentication techniques for widespread dynamic communication protocols <ref> [FS86, LL95, GKG92, BG92] </ref>. Portable implementation The system was designed to be portable. This was achieved by using the PERL programming language [WS92] wherever possible. There are three components to the system: fl Contact person for questions concerning the paper. 1.
Reference: [Coh93] <author> Henri Cohen. </author> <title> A couse in computational algebraic number theory. Graduate texts in mathematics. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Solving equations of the form x 2 a (mod p) can be done in the general case with the algorithm of Tonelli and Shanks <ref> [Coh93, pages 32-35] </ref>.
Reference: [Den83] <author> Dorothy E. Denning. </author> <title> Cryptography and Data Security. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: root modulo p with the following equations: p 3 (mod 4) ) x = a (p+1)=4 (mod p) 1 To find a solution to the original congruence, the solutions x 1 , p x 1 , x 2 , and q x 2 are combined using the Chinese Remainder Theorem <ref> [Den83, pages 47-48] </ref> four times in the following four equations: t x 1 (mod p) t x 1 (mod p) t p x 1 (mod p) t p x 1 (mod p) Four solutions to the original congruence exist because n contains two prime factors, and these four solutions will result
Reference: [DH76] <author> Whitfield Diffie and Martin Hellman. </author> <title> New directions in cryptography. </title> <journal> Transactions on Information Theory, </journal> <volume> IT-22(6):644-654, </volume> <month> November </month> <year> 1976. </year>
Reference-contexts: The number of iterations that must be performed then depends on the level of confidence desired. 3.2 Diffie-Hellman Key Exchange Diffie-Hellman was the first public-key algorithm invented [Sch96, pages 513-514]. It is named after its authors <ref> [DH76] </ref>. It gets its security from the difficulty of calculating discrete logarithms in a finite field, as compared with the ease of calculating exponentiation in the same field. Diffie-Hellman can be used for key distribution. Using the familiar Alice and Bob as the participants, the algorithm is simple. <p> Different keys of varying length and characters are used to test the keys. For the process of argument testing, if both arguments are not passed, the routines return an error. Diffie-Hellman Key Exchange Package. The Diffie-Hellman <ref> [DH76] </ref> key exchange package implements the protocol as explained in Schneier [Sch96, pages 513-514]. The package provides a client routine that communicates to another instance of the client routine.
Reference: [FS86] <author> Amos Fiat and Adi Shamir. </author> <title> How to prove yourself: Practical solutions to identification and signature problems. </title> <booktitle> In Proceedings of CRYPTO 86: Advances in Cryptology, Lectures in computer science, </booktitle> <pages> pages 186-194. </pages> <institution> University of California, Santa Barbara, </institution> <year> 1986. </year>
Reference-contexts: The design of the SMBS system addresses the following issues: Secure communication Message broadcasts between users will be encrypted to ensure privacy of communi cation. User authentication A zero-knowledge proof based on the Amos Fiat and Adi Shamir <ref> [FS86] </ref> system will be used to authenticate users without revealing to potential eavesdroppers any information that might compromise the system. <p> Although much has been written about zero knowledge proofs, and to the best of our knowledge, few products have actual implementations that depend on this class of authentication mechanisms, and none use them as effective authentication techniques for widespread dynamic communication protocols <ref> [FS86, LL95, GKG92, BG92] </ref>. Portable implementation The system was designed to be portable. This was achieved by using the PERL programming language [WS92] wherever possible. There are three components to the system: fl Contact person for questions concerning the paper. 1.
Reference: [GKG92] <author> Dimitris Gritzalis, Sokratis Katsikas, and Stefanos Gritzalis. </author> <title> A zero knowledge probabilistic login protocol. </title> <journal> Computers & Security, </journal> <volume> 11(8) </volume> <pages> 733-745, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: Although much has been written about zero knowledge proofs, and to the best of our knowledge, few products have actual implementations that depend on this class of authentication mechanisms, and none use them as effective authentication techniques for widespread dynamic communication protocols <ref> [FS86, LL95, GKG92, BG92] </ref>. Portable implementation The system was designed to be portable. This was achieved by using the PERL programming language [WS92] wherever possible. There are three components to the system: fl Contact person for questions concerning the paper. 1.
Reference: [GMW86] <author> O. Goldreich, S. Micali, and A. Wigderson. </author> <title> Proofs that yield nothing but their validity. </title> <booktitle> In Proceedings of 27th IEEE Annual Symposium on the Foundations of Computer Science, </booktitle> <year> 1986. </year>
Reference-contexts: We will present detailed state-machines for the behaviour of each of the components of the system later in this document, but the steps involved can be summarized below: 1. The chat server and the authentication server authenticate each other using a zero-knowledge proof <ref> [GMW86] </ref>. 2. Users authenticate themselves to the authentication server and obtain from it a session key. The session key is used to encrypt some of the traffic to and from the user.
Reference: [Lac] <author> Jack Lacy. Cryptolib 1.1. </author> <note> Announced in sci.crypt. </note>
Reference-contexts: The interface to the multi-precision (MP) library is too cumbersome to be practical. We wrote the MP interface in Perl so our system could be prototyped quickly. A better implementation would be to use other crypto libraries <ref> [Lac] </ref> or use the GNU multi-precision package. The client, chat server and authentication server could be ported to Java [Mic95]. This would enhance the portability of the system | Java is bytecode interpreted and so is platform independent.
Reference: [Lai92] <author> Xuejia Lai. </author> <title> On the design and security of block ciphers. </title> <publisher> Hartung-Gorre Verlag, </publisher> <address> Konstanz, Switzer-land, </address> <year> 1992. </year> <title> This is the author's Ph.D. dissertation. "Secret-key block ciphers are the subject of this work. The design and security of block ciphers, together with their application in hashing techniques, are considered. In particular, iterated block ciphers that are based on iterating a weak round function several times are considered. Four basic constructions for the round function of an iterated cipher are studied.". </title>
Reference-contexts: If so, the package exits with an error. Crypt Package. The crypt package provides an interface to the encryption/decryption program. The encryption and decryption processes in this project are performed using the IDEA program <ref> [LM91, Lai92] </ref>. There are two routines in the crypt package, encrypt and decrypt. Both routines take the same arguments as input: a string S and a key k. The string S must be non-zero in length.
Reference: [LL95] <author> Chae Hoon Lim and Pil Joong Lee. </author> <title> Several practical protocols for authentication and key exchange. </title> <journal> Information Processing Letters, </journal> <volume> 53(2) </volume> <pages> 91-96, </pages> <year> 1995. </year>
Reference-contexts: Although much has been written about zero knowledge proofs, and to the best of our knowledge, few products have actual implementations that depend on this class of authentication mechanisms, and none use them as effective authentication techniques for widespread dynamic communication protocols <ref> [FS86, LL95, GKG92, BG92] </ref>. Portable implementation The system was designed to be portable. This was achieved by using the PERL programming language [WS92] wherever possible. There are three components to the system: fl Contact person for questions concerning the paper. 1.
Reference: [LM91] <author> X. Lai and J. L. Massey. </author> <title> A proposal for a new block encryption standard. </title> <booktitle> In Advances in Cryptology | Eurocrypt '90, </booktitle> <pages> pages 389-404, </pages> <address> Berlin, 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: If so, the package exits with an error. Crypt Package. The crypt package provides an interface to the encryption/decryption program. The encryption and decryption processes in this project are performed using the IDEA program <ref> [LM91, Lai92] </ref>. There are two routines in the crypt package, encrypt and decrypt. Both routines take the same arguments as input: a string S and a key k. The string S must be non-zero in length.
Reference: [Mic95] <author> Sun Microsystems. </author> <title> The Java Language Specification, release 1.0 alpha 3 edition, </title> <month> May </month> <year> 1995. </year>
Reference-contexts: We wrote the MP interface in Perl so our system could be prototyped quickly. A better implementation would be to use other crypto libraries [Lac] or use the GNU multi-precision package. The client, chat server and authentication server could be ported to Java <ref> [Mic95] </ref>. This would enhance the portability of the system | Java is bytecode interpreted and so is platform independent. The interface to the SMBS system would be through a Web broswer running the Java applets.
Reference: [Sch96] <author> Bruce Schneier. </author> <title> Applied Cryptography: Protocols, Algorithms, and Source Code in C. </title> <publisher> John Wiley & Sons, Inc, </publisher> <address> New York, NY, USA, 2nd edition, </address> <year> 1996. </year>
Reference-contexts: After 100 iterations the chances of P cheating is, approximately, one in 10 30 . The number of iterations that must be performed then depends on the level of confidence desired. 3.2 Diffie-Hellman Key Exchange Diffie-Hellman was the first public-key algorithm invented <ref> [Sch96, pages 513-514] </ref>. It is named after its authors [DH76]. It gets its security from the difficulty of calculating discrete logarithms in a finite field, as compared with the ease of calculating exponentiation in the same field. Diffie-Hellman can be used for key distribution. <p> We've chosen to use the IDEA block cipher for encryption and decryption. According to Schneier <ref> [Sch96, page 319] </ref>, IDEA appears to be significantly more secure than DES and the software implementations are about as fast as DES. IDEA operates on 64-bit plaintext blocks using a 128 bit key. It uses both confusion and diffusion mixing operations from different algebraic groups to provide its security. <p> Different keys of varying length and characters are used to test the keys. For the process of argument testing, if both arguments are not passed, the routines return an error. Diffie-Hellman Key Exchange Package. The Diffie-Hellman [DH76] key exchange package implements the protocol as explained in Schneier <ref> [Sch96, pages 513-514] </ref>. The package provides a client routine that communicates to another instance of the client routine. The two instances of the client routine are either the authentication server and a chat client or the authentication server and the chat server.
Reference: [WS92] <author> Larry Wall and Randal Schwartz. </author> <title> Programming PERL. </title> <publisher> O'Reilly and Associates, </publisher> <year> 1992. </year>
Reference-contexts: Portable implementation The system was designed to be portable. This was achieved by using the PERL programming language <ref> [WS92] </ref> wherever possible. There are three components to the system: fl Contact person for questions concerning the paper. 1. An Authentication Server verifies the identity of all parties in the system. Authentication is the process of validating that an entity actually is who it claims to be.
References-found: 14

