URL: http://www.cs.umn.edu/Research/shashi-group/paper_ps/computer96.ps
Refering-URL: http://www.cs.umn.edu/Research/shashi-group/paper_list.html
Root-URL: http://www.cs.umn.edu
Email: E-mail Phone/Fax  shekhar@cs.umn.edu siva@cs.umn.edu kumar@cs.umn.edu  gregt@adelphi  
Title: High Performance Geographic Information Systems: Experiences with a Shared Address Space Architecture  
Author: Shashi Shekhar Sivakumar Ravada Vipin Kumar Douglas Chubb Greg Turner Shashi Shekhar Sivakumar Ravada Vipin Kumar ()-/ Douglas Chubb Greg Turner 
Keyword: Declustering Geographic Information Systems, High Performance, Load-Balancing, Range Query, Shared Address Space Architectures.  
Address: 4-192 EE/CS, 200 Union St. SE Minneapolis, MN 55455  Vint Hill Farms Station Warrenton, VA 22186-5100  Adelphi, MD  
Affiliation: Department of Computer Science University of Minnesota  Research and Technology Division U.S. Army CECOM, RDEC, IEWD  Army Research Laboratory  
Note: Author Address  assb01.army.mil This work is sponsored in part by the Army High Performance Computing Research Center under the auspices of the Department of the Army, Army Research Laboratory cooperative agreement number DAAH04-95-2-0003/contract number DAAH04-95-C-0008, the content of which does not necessarily reflect the position or the policy of the government, and no official endorsement should be inferred. This work is also supported in part by NSF grant #CDA9414015.  
Abstract: Several emerging visualization applications such as flight simulators, distributed interactive simulation (DIS), and virtual reality are using geographic information systems (GISs) for high-fidelity representation of actual terrains. These applications impose stringent performance and response-time restrictions which can be met via parallelization of the GIS. Currently, we are developing a high performance GIS on a Shared Address Space Architecture (SASA), namely, Silicon Graphics Challenge, as a part of the virtual GIS project of the Army Research Laboratories. Our experience shows that data-parallel message-passing algorithms can be fairly effective for implementing high performance GISs on SASAs. Our experimental results with the GIS-range-query operation show that data-partitioning is an effective approach towards achieving high performance in GIS. As partitioning extended spatial objects is difficult, special techniques such as systematic declustering are needed to parallelize the range-query operation. Systematic declustering methods outperform random declustering methods for range query problems. Static load-balancing methods with systematic declustering even outperform random declustering coupled with dynamic load-balancing (DLB). In addition, the performance of DLB methods can be improved by using the declustering methods for determining the subsets of polygons to be transferred during run-time. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. G. Akl and K. A. Lyons. </author> <title> Parallel Computational Geometry. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1993. </year>
Reference-contexts: The query box is then intersected with each of the remaining polygons, and the output is obtained as a set of polygons by polygonizing the results of the intersection computation. The GIS-range-query operation can be parallelized either by function-partitioning <ref> [1] </ref> or by data-partitioning [12]. Function-Partitioning uses specialized data structures and algorithms which may be different from their sequential counterparts. A data-partitioning technique divides the data among different processors and independently executes the sequential algorithm on each processor. Data-Partitioning in turn is achieved by declustering [3, 10] the spatial data.
Reference: [2] <author> The DIS Steering Committee. </author> <title> The DIS vision a map to the future of distributed interactive simulation. </title> <type> Technical report, </type> <institution> Institute for Simulation and Training, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: We experimentally show that data partitioning using systematic declustering is effective for achieving good performance in many GIS applications. 1.1 Application Domain: Real-Time Terrain Visualization A real-time terrain-visualization [11] system (e.g., a distributed interactive simulation system <ref> [2] </ref>) is a virtual environment [6] which lets the users navigate and interact with a three-dimensional computer-generated geographic environment in real-time. This type of system has three major components: interaction, 3-D graphics, and GIS. Figure 1 shows the different components of a terrain-visualization system for a typical flight simulator.
Reference: [3] <author> M. T. Fang, R. C. T. Lee, and C. C. Chang. </author> <title> The Idea of Declustering and its Applications. </title> <booktitle> In Proceedings of the International Conference on Very Large Databases, </booktitle> <year> 1986. </year>
Reference-contexts: Function-Partitioning uses specialized data structures and algorithms which may be different from their sequential counterparts. A data-partitioning technique divides the data among different processors and independently executes the sequential algorithm on each processor. Data-Partitioning in turn is achieved by declustering <ref> [3, 10] </ref> the spatial data. If the static declustering methods fail to equally distribute the load among different processors, the load-balance may be improved by redistributing parts of the data to idle processors using dynamic load-balancing (DLB) techniques.
Reference: [4] <author> J. Goldfeather, S. Molnar, G. Turk, and H. Fuchs. </author> <title> Near Real-Time CSG Rendering Using Tree Normalization and Geometric Pruning. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 9(3), </volume> <year> 1989. </year>
Reference-contexts: In this paper, we focus on parallelizing the GIS-range-query problem on a shared address-space architecture (SASA). 1.3 Scope Alternative techniques like polygon simplification via culling <ref> [4, 5] </ref> and incremental range queries [12] can be used to further improve the performance of range query processing. Parallelization of the GIS-range-query problem is orthogonal to these alternatives, since they can be used in addition to the parallelization techniques.
Reference: [5] <author> P. Heckbert and M. </author> <title> Garland. Multiresolution Modelling for Fast Rendering. </title> <booktitle> In Proceedings of Graphics Interface, </booktitle> <year> 1994. </year>
Reference-contexts: In this paper, we focus on parallelizing the GIS-range-query problem on a shared address-space architecture (SASA). 1.3 Scope Alternative techniques like polygon simplification via culling <ref> [4, 5] </ref> and incremental range queries [12] can be used to further improve the performance of range query processing. Parallelization of the GIS-range-query problem is orthogonal to these alternatives, since they can be used in addition to the parallelization techniques.
Reference: [6] <author> W. Hibbard and D. Santek. </author> <title> Visualizing Large Data Sets in the Earth Sciences. </title> <journal> IEEE Computer, </journal> <note> Special Issue on Vualization in Scientific Computing, </note> <month> August </month> <year> 1989. </year>
Reference-contexts: We experimentally show that data partitioning using systematic declustering is effective for achieving good performance in many GIS applications. 1.1 Application Domain: Real-Time Terrain Visualization A real-time terrain-visualization [11] system (e.g., a distributed interactive simulation system [2]) is a virtual environment <ref> [6] </ref> which lets the users navigate and interact with a three-dimensional computer-generated geographic environment in real-time. This type of system has three major components: interaction, 3-D graphics, and GIS. Figure 1 shows the different components of a terrain-visualization system for a typical flight simulator.
Reference: [7] <author> C. Kruskal and A. Weiss. </author> <title> Allocating independent subtasks on parallel processors. </title> <journal> IEEE Transactions on Software Engineering, </journal> <pages> pages 1001-1016, </pages> <month> October </month> <year> 1985. </year>
Reference-contexts: On the other hand, too small a pool can also lead to processor idling, due to the static load-imbalance in the rest of the data. These two situations are shown in Figure 3. Granularity of Transfers and Data-Partitioning Method Several strategies like self-scheduling, factoring scheduling, and chunk scheduling <ref> [7] </ref> exist for determining the amount of work to be fetched during DLB. The cost of synchronization affects the performance of these scheduling algorithms, as several processors have to share the knowledge about the remaining work. Small chunks can be used when the synchronization cost is low.
Reference: [8] <author> V. Kumar, A. Grama, A. Gupta, and G. Karypis. </author> <title> Introduction to Parallel Computing: Design and Analysis of Algorithms. </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <year> 1994. </year>
Reference-contexts: A typical dynamic load-balancing technique <ref> [8] </ref> for a shared memory computer addresses two issues: (i) how does an idle processor fetch more work, and (ii) what is the granularity of the work transfer and the data-partitioning method.
Reference: [9] <author> R. Laurini and D. Thompson. </author> <title> Fundamentals of Spatial Information Systems. </title> <publisher> Academic Press Inc, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction A high performance geographic information system (HPGIS) is a central component of many interactive applications like real-time terrain visualization, situation assessment, and spatial decision-making. The geographic information system (GIS) <ref> [9] </ref> often contains spatial data (geometric and feature data) represented as large sets of points, chains of line-segments, and polygons. In practice, the spatial data sets required to model geographic applications are usually very large (10-100 MBytes).
Reference: [10] <author> D. R. Liu and S. Shekhar. </author> <title> A Similarity Graph-Based Approach to Declustering Problem and its Applications. </title> <booktitle> In Proceedings of the Eleventh International Conference on Data Engineering, </booktitle> <institution> IEEE. </institution> <note> The complete technical report Csci TR 94-018, available via WWW at URL: http://www.cs.umn.edu/research/shashi-group/paper ps/infs.ps., </note> <year> 1995. </year>
Reference-contexts: Function-Partitioning uses specialized data structures and algorithms which may be different from their sequential counterparts. A data-partitioning technique divides the data among different processors and independently executes the sequential algorithm on each processor. Data-Partitioning in turn is achieved by declustering <ref> [3, 10] </ref> the spatial data. If the static declustering methods fail to equally distribute the load among different processors, the load-balance may be improved by redistributing parts of the data to idle processors using dynamic load-balancing (DLB) techniques.
Reference: [11] <author> D. R. Pratt, M. Zyda, and K. Kelleher. </author> <title> Guest Editor's Introduction: Virtual Reality-In the Mind of the Beholder. </title> <booktitle> IEEE Computer, Special Issue on Virtual Environments, </booktitle> <month> July </month> <year> 1995. </year>
Reference-contexts: We experimentally show that data partitioning using systematic declustering is effective for achieving good performance in many GIS applications. 1.1 Application Domain: Real-Time Terrain Visualization A real-time terrain-visualization <ref> [11] </ref> system (e.g., a distributed interactive simulation system [2]) is a virtual environment [6] which lets the users navigate and interact with a three-dimensional computer-generated geographic environment in real-time. This type of system has three major components: interaction, 3-D graphics, and GIS.
Reference: [12] <author> S. Shekhar, S. Ravada, V. Kumar, D. Chubb, and G. Turner. </author> <title> Declustering and Load-Balancing Methods for Parallelizing Geographic Information Systems. </title> <note> To appear in IEEE Transaction on Knowledge and Data Engineering. Also available as Technical Report TR 95-076, </note> <institution> Department of Computer Science, University of Minnesota. URL:http://www.cs.umn.edu/Research/shashi-group/paper ps/rqtkde96.ps, </institution> <year> 1995. </year> <month> 12 </month>
Reference-contexts: In this paper, we focus on parallelizing the GIS-range-query problem on a shared address-space architecture (SASA). 1.3 Scope Alternative techniques like polygon simplification via culling [4, 5] and incremental range queries <ref> [12] </ref> can be used to further improve the performance of range query processing. Parallelization of the GIS-range-query problem is orthogonal to these alternatives, since they can be used in addition to the parallelization techniques. In this paper, we only focus on the parallelization issues of this problem. <p> The approach of using work-transfers during run-time to improve the load-balance is referred to as dynamic load-balancing (DLB). 2 Parallel Formulation for the GIS-range-query The GIS-range-query problem has three main components: (i) approximate filtering at the polygon level, (ii) intersection computation, and (iii) polygonization of the result. (See <ref> [12] </ref> for a detailed discussion of a sequential algorithm.) A search structure is used to filter out many non-interesting polygons from the set of input polygons. <p> The query box is then intersected with each of the remaining polygons, and the output is obtained as a set of polygons by polygonizing the results of the intersection computation. The GIS-range-query operation can be parallelized either by function-partitioning [1] or by data-partitioning <ref> [12] </ref>. Function-Partitioning uses specialized data structures and algorithms which may be different from their sequential counterparts. A data-partitioning technique divides the data among different processors and independently executes the sequential algorithm on each processor. Data-Partitioning in turn is achieved by declustering [3, 10] the spatial data. <p> Since the location of the query is not known a priori, it is hard to develop a declustering strategy that is optimal for all range queries. As the declustering problem is NP-Hard <ref> [12] </ref>, heuristic methods are used for declustering spatial data. Random partitioning, local load-balance and similarity-graph-based methods are three popular algorithms for declustering spatial data. Intuitively, a local load-balance method tries to balance the work-load at each processor for a given range query. <p> Intuitively, a local load-balance method tries to balance the work-load at each processor for a given range query. A similarity based declustering method tries to balance the work-load at each processor over a representative set of multiple range queries. Refer to <ref> [12] </ref> for a detailed discussion of the declustering algorithms. 4 2.2 Dynamic Load-Balancing (DLB) Techniques If static declustering methods fail to equally distribute the load among different processors, the load-balance may be improved by transferring some spatial objects to idle processors using dynamic load-balancing techniques. <p> In the rest of the discussion, a kX map denotes a map that is k times bigger than the 1X map. Each polygon is represented as a sequence of edges, where each edge is a pair of 2D coordinate points. In addition, a search structure <ref> [12] </ref> is used to quickly identify the relevant edges of a polygon for a given range query. Each range query is chosen to be about 20% of the total area of the map. In our experiments, we only measure and analyze the cost per range-query and exclude any preprocessing cost. <p> Note that there are several parameters involved in evaluating an algorithm for the GIS-range-query problem. Here we present an evaluation of only those parameters which are interesting for SASAs. For a detailed study of other parameters, see <ref> [12] </ref>. 3.1 Evaluation of the Granularity of Work-Allocation in DLB We compare the effect of different chunk sizes with chunks containing 1 to 100 polygons, using PBM for DLB and the similarity-graph method for declustering. <p> The transformation converted the replicated data in the message-passing algorithm to shared data in a SASA. This is not done automatically by PVM/MPI type systems. This address space mapping improves the capacity of the system to solve larger problems relative to a message-passing architecture <ref> [12] </ref>. Table 1 gives the mapping of a message-passing algorithm to a SASA. A message-passing algorithm uses three kinds of data: local data, read-only shared data and modifiable shared data. The read-only shared data is often replicated to facilitate data-sharing, particularly if data transfer is costly.
References-found: 12

