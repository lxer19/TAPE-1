URL: http://www.cs.jhu.edu/~sheppard/beh-wp.ps
Refering-URL: http://www.cs.jhu.edu/~sheppard/pubs.html
Root-URL: 
Email: las@wash.inmet.com jsheppar@arinc.com  
Title: A Behavior Model for Next Generation Test Systems  
Author: Lee A. Shombert John W. Sheppard 
Address: Drive, Suite 710 2551 Riva Road McClean, VA 22102 Annapolis, MD 21401  
Affiliation: Intermetrics, Inc. ARINC 7918 Jones Branch  
Abstract: Defining information required by automatic test systems frequently involves a description of system behavior. To facilitate capturing the required behavior information in the context of testing, a formal model of behavior was developed for use by test systems. The approach taken in defining the behavior model was based on information modeling and was derived from recent work in formal methods by the hardware and software design communities. Specifically, an information model was developed in EXPRESS capturing the relationships between essential entities characterizing behavior. In this paper, we provide a high level description of the behavior information model and several examples applying the model in a test environment. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Abramsky S. and C. Hankin. </author> <year> 1987. </year> <title> Abstract Interpretation of Declarative Languages, </title> <address> Chichester, England: </address> <publisher> Ellis Horwood. </publisher>
Reference: <author> Atkins, R. and D. Rolince. </author> <year> 1994. </year> <title> TRSL Standard Supports Current and Future Test Processes, </title> <booktitle> Proceedings AUTOTESTCON 94, </booktitle> <address> New York: </address> <publisher> IEEE Press, </publisher> <pages> pp. 271279. </pages>
Reference: <author> Caunegre, P. and C. Abraham. </author> <year> 1995. </year> <title> Achieving Simulation-Based Test Program Verification and Fault Simulation Capabilities for Mixed-Signal Systems, </title> <booktitle> Proceedings of the European Design & Test Conference, </booktitle> <address> Los Alamitos, California: </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: requirements due to considerations such as operator convenience, test time minimization, or other concerns not directly related to the requirements. 11 Test Program Verification Test program verification is the process of comparing an existing test program with a set of test requirements to ensure that the program satisfies the requirements <ref> (Caunegre & Abraham, 1995) </ref>. As discussed earlier, the behavior description of the test program constrains its execution trace, and only the execution trace truly can be verified.
Reference: <author> Cooke, J. </author> <year> 1992. </year> <title> Formal MethodsMathematics, Theory, Recipes or What? The Computer Journal, </title> <publisher> 35(5):419423. </publisher>
Reference: <author> Dechter, R. </author> <year> 1992. </year> <title> Constraint Networks: A Survey, </title> <booktitle> The Encyclopedia of Artificial Intelligence, </booktitle> <editor> Stuart C. Shapiro (ed.), </editor> <address> New York: </address> <publisher> Wiley. </publisher>
Reference: <author> Hall, A. </author> <year> 1990. </year> <title> Seven Myths of Formal Methods, </title> <journal> IEEE Software, </journal> <month> September, </month> <pages> pp. 1119. </pages>
Reference: <author> Hardenburg, G. and D. Nichols. </author> <year> 1995. </year> <title> The IEEE ABBET Lower Layers Definition and Status, </title> <booktitle> Proceedings of AUTOTESTCON 95, </booktitle> <address> New York: </address> <publisher> IEEE Press, </publisher> <pages> pp. 5765. </pages>
Reference-contexts: These predicted execution traces can be verified with respect to some behavior, and with enough such simulations, the test program could be declared to be acceptable. Test Resource Allocation Test resource allocation identifies candidate resources and then determines if the candidates are suitable for the required task <ref> (Hardenburg & Nichols, 1995) </ref>. Test resource allocation is an important function in test development, and automation of this function is important when automating the test program generation process. Automated allocation also enables dynamic allocation of test resources, that in turn leads to more portable test programs.
Reference: <author> Hogger, C. J. </author> <year> 1984. </year> <title> Introduction to Logic Programming, </title> <address> London, England: </address> <publisher> Academic Press. </publisher> <address> 18 ISO 10103-11:1994. </address> <booktitle> Industrial Automation Systems and IntegrationProduct Data Representation and ExchangePart 11: EXPRESS Language Reference Manual, Geneva, Switzerland: International Organization on Standardization. </booktitle>
Reference: <author> Miegler, M. and W. Wolz. </author> <year> 1996. </year> <title> Development of Test Programs in a Virtual Test Environment, </title> <booktitle> Proceedings of the VLSI Symposion, </booktitle> <address> Los Alamitos, California: </address> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 99103. </pages>
Reference-contexts: In these cases simulation of the test program, also called virtual tests, can generate predictions of execution 12 traces for the test program <ref> (Miegler & Wolz, 1996) </ref>. These predicted execution traces can be verified with respect to some behavior, and with enough such simulations, the test program could be declared to be acceptable.
Reference: <author> Nagy, J. and J. Newberg. </author> <year> 1994. </year> <title> Capturing Board-Level Test Requirements in Generic Formats, </title> <booktitle> Proceedings AUTOTESTCON 94, </booktitle> <address> New York: </address> <publisher> IEEE Press, </publisher> <pages> pp. 6169. </pages>
Reference: <author> Papachristou, C. and J. Carletta. </author> <year> 1995. </year> <title> Test Synthesis in the Behavioral Domain, </title> <booktitle> Proceedings of the International Test Conference, </booktitle> <address> Los Alamitos, California: </address> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 693702. </pages>
Reference-contexts: Test Program Synthesis Because it is declarative, a behavior description does not usually capture enough information to directly generate code for a test program. However, a behavior can be used to 10 guide test program generation <ref> (Papachristou & Carletta, 1995) </ref>. In general, the code synthesis process can follow a constraint satisfaction process coupled with a code generator as a side effect (Dechter, 1992; Pearl 1988).
Reference: <author> Pearl, P. </author> <year> 1988. </year> <title> Probabilistic Reasoning in Intelligent Systems, </title> <address> San Mateo, California: </address> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference: <author> Schenk, D. and P. Wilson. </author> <year> 1994. </year> <title> Information Modeling: The EXPRESS Way, </title> <address> New York: </address> <publisher> Oxford University Press. </publisher>
Reference: <author> Thomas, M. </author> <year> 1993. </year> <title> The Industrial Use of Formal Methods, Microprocessors and Microsystems, </title> <publisher> 17(1):3136. </publisher>
References-found: 14

