URL: http://www.cs.colorado.edu/~nutt/CS3753/Supplements/ex5.ps
Refering-URL: http://www.cs.colorado.edu/~nutt/CS3753/Assigns/assign6.html
Root-URL: http://www.cs.colorado.edu
Title: D R A F T 86 5. Interprocess Communication  
Note: The details of the CreateFile, ReadFile, and WriteFile functions. A. Introduction  
Abstract: The purpose of this exercise is to explore NTs facilities to support communication among threads that are implemented within different processes. Classically, this is called interprocess communication (or simply IPC). Since the NT file model is used as the basis of most IPC mechanisms, you will also learn more about this model. In this exercise you will learn about: General NT mechanisms that support IPC Different IPC mechanism at different system levels The high level File I/O Model The details for using pipes. Threads operating in the same process use the same address space, so it is easy for them to share information among themselves. As noted in Exercise 4, kernel objects can be used for a thread in one process to signal a thread in another process. However, when two threads in different processes wish to exchange data, a completely new set of mechanisms must be used. This exercise looks at NTs mechanisms to support data transfer across process address spaces. (One other important mechanism, the memory-mapped file, is not discussed until Exercise 8.) This general problem of supporting a mechanism for one (thread in a) process to share information with another is called interprocess communication (IPC). In multiprogrammed computers, IPC may be implemented by providing a shared memory mechanism or a mechanism by which the units of computation exchange messages that are transferred over some shared medium (such as kernel space memory). Message-based IPC became very important when networks became cost-effective in the 1980s. Also in the late 1980s and 1990s, OS researchers pushed hard on creating abstract shared memory that could be implemented on top of a message-based mechanism. NT supports a shared memory model within a computer, and a few message-based mechanisms within a computer and across a network. This exercise looks at the message-based mechanisms that are used within a computer, Exercise 6 focuses on IPC mechanisms that use a network for message delivery, and Exercise 8 describes the memory-mapped file shared memory mechanism. Kernel Local Procedure Calls There is a specialized IPC mechanism used within the Executive (and not available through the Win32 API). The Local Procedure Call (LPC) mechanism is built on top of Kernel port objects; it is used for highspeed message passing by client and server processes within the Executive and the subsystems. For example, LPCs are used for IPC between the Local Security Authority server and the Secure Reference Monitor. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Hart, Johnson M., </author> <title> Win32 System Programming, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1997. </year> <title> Microsoft, Win32 API Reference Manual, Microsoft online documentation. </title> <editor> Richter, Jeffrey, </editor> <title> Advanced Windows, Third Edition, </title> <publisher> Microsoft Press, </publisher> <address> Redmond, WA, </address> <year> 1997. </year>
Reference: <author> Solomon, David A., </author> <title> Inside Windows NT, Second Edition, </title> <publisher> Microsoft Press, </publisher> <address> Redmond, WA, </address> <year> 1998. </year>
References-found: 2

