URL: http://ftp.eecs.umich.edu/people/rundenst/papers/r-93-2.ps
Refering-URL: http://ftp.eecs.umich.edu/people/rundenst/papers/
Root-URL: http://www.eecs.umich.edu
Email: e-mail: kuno@eecs.umich.edu, rundenst@eecs.umich.edu  
Title: Developing an Object-Oriented View Management System  
Author: Harumi A. Kuno and Elke A. Rundensteiner 
Keyword: Schema Integration, Meta Schema, View Definition, Data Independence, Object-Oriented Databases.  
Date: July, 1993  
Address: 1301 Beal Ave Ann Arbor, MI 48109-2122  
Affiliation: Dept. of Elect. Engineering and Computer Science Software Systems Research Laboratory The University of Michigan,  
Abstract: This paper discusses our experiences regarding the design and implementation of the MultiView system a framework for the specification, creation, and management of updatable views in object-oriented databases (OODBs) using commercially available OODB technology. MultiView, which simplifies view schema design and maintenance by breaking view specification into the tasks of class derivation, global schema integration, view class selection, and view hierarchy generation, has been implemented on top of the GemStone OODB. The current implementation employs a three-layered architecture (composed of meta-objects, schema-objects, and data-objects) to extend the GemStone object model. It results in a view tool that extends the GemStone data model by supporting view specification, maintenance, and access. In this paper, we describe the system classes and methods as well as necessary algorithms. The first prototype of MultiView has been built, and we describe a sample application example. 
Abstract-found: 1
Intro-found: 1
Reference: [AB91] <author> S. Abiteboul and A. Bonner. </author> <title> Objects and views. </title> <booktitle> SIGMOD, </booktitle> <pages> pages 238-247, </pages> <year> 1991. </year>
Reference-contexts: Most previous work regarding view systems for OODBs focuses on view formation to the exclusion of view incorporation. Most researchers have focused on how query languages can be used to support the definition of virtual classes <ref> [HZ90, SLT91, TYI88, AB91, Run92b, Ber92] </ref>. In their discussion of FUGUE, Heiler and Zdonik [HZ90] propose that the query language of their DBMS can be used for the specification of object-oriented views. They do not investigate either the issues of classification nor the re-use of methods. <p> On the contrary, they require the view definer to manually enter the methods to be associated with a newly derived class, rather than deriving them automatically whenever possible, as done in our system. Abiteboul and Bonner <ref> [AB91] </ref> mention the integration of select view classes into a view schema, but choose to enable selective upward versus downwards inheritance rather than creating intermediate yes planned not known not known no yes partially? no yes no no noyes no yes yes no yes not clear yes* yes* yes* yes** yes,
Reference: [ABD + 92] <author> M. Atkinson, F. Bancilhon, D. DeWitt, K. Dittrich, D. Maier, and S. Zdonic. </author> <title> The object-oriented database system manifesto. </title> <editor> In F. Bancilhon, C. Delobel, and P. Kanellakis, editors, </editor> <title> Building an Object-Oriented Database System: The Story of O2, </title> <booktitle> chapter 1, </booktitle> <pages> pages 3 - 20. </pages> <publisher> Morgan Kauf-mann Pub., </publisher> <year> 1992. </year>
Reference-contexts: We show a detailed example run of MultiView in Section 5, compare MultiView to related work in Section 6, and conclude with Section 7. 2 The MultiView Data Model 2.1 Introduction Although the authors of <ref> [ABD + 92] </ref> and [ACD + 93] arrive at a number of tenets that specify properties the new ODBMS's should provide, there is currently no single definitive set of characteristics that a data model must possess to be considered "object-oriented." Furthermore, the list of properties set forth by these groups is
Reference: [ACD + 93] <author> T. Atwood, R. Cattell, J. Duhl, G. Ferran, and D. Wade. </author> <title> The odmg object model. </title> <journal> Journal of Object Oriented Programming, </journal> <pages> pages 64-69, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: We show a detailed example run of MultiView in Section 5, compare MultiView to related work in Section 6, and conclude with Section 7. 2 The MultiView Data Model 2.1 Introduction Although the authors of [ABD + 92] and <ref> [ACD + 93] </ref> arrive at a number of tenets that specify properties the new ODBMS's should provide, there is currently no single definitive set of characteristics that a data model must possess to be considered "object-oriented." Furthermore, the list of properties set forth by these groups is composed of properties which <p> MultiView adapts GemStone's native data model to concur more closely with the ODMG data model <ref> [ACD + 93] </ref> and to incorporate features necessary for the support of updatable views.
Reference: [Ber92] <author> E. Bertino. </author> <title> A view mechanism for object-oriented databases. </title> <booktitle> In 3rd International Conference on Extending Database Technology, </booktitle> <pages> pages 136-151, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: These experiences will prove useful to other researchers developing view support. Note that while several proposals of object-oriented views have been given in the literature in recent years <ref> [Ber92, HZ90, Kim88, SLT91, SZ89, TYI88] </ref>, the large majority of them have not yet been implemented. Furthermore, we are not aware of any commercial OODB currently supporting such general purpose view capabilities. Our work described in this paper thus fills a significant void. <p> (1) require the user to specify explicitly the relationship between a virtual class and existing base classes [TYI88]; or (2) relate a virtual class only with its direct source class via a subclass/superclass relationship [SLT91]; or (3) simply relate a virtual class with its source class via a derived-from relationship <ref> [Ber92] </ref>, (4) or with the root of the schema [HZ90, Kim89]. The first approach is vulnerable to potential consistency problems, since the users might introduce an inconsistency in the schema graph by inserting is-a arcs between two classes not related by a subclass relationship. <p> Most previous work regarding view systems for OODBs focuses on view formation to the exclusion of view incorporation. Most researchers have focused on how query languages can be used to support the definition of virtual classes <ref> [HZ90, SLT91, TYI88, AB91, Run92b, Ber92] </ref>. In their discussion of FUGUE, Heiler and Zdonik [HZ90] propose that the query language of their DBMS can be used for the specification of object-oriented views. They do not investigate either the issues of classification nor the re-use of methods.
Reference: [Car84] <author> L. Cardelli. </author> <title> A semantics of multiple inheritance. </title> <booktitle> In Semantics of Data Types - Lecture Notes in Computer Science, </booktitle> <volume> 173, </volume> <pages> pages 51-67. </pages> <publisher> Springer, </publisher> <year> 1984. </year>
Reference-contexts: In the case of virtual classes, however, Mul-tiView determines subsumption by the implementa 3 Alternative definitions of the "subclass" relationship exist, for example, in [Kim88] and <ref> [Car84] </ref>. tion (code block) rather than the interface (selector name) of types.
Reference: [GB89] <author> J. P. Gilbert and L. Bic. </author> <title> An object-oriented data model for semantic relativism. </title> <booktitle> In ECOOP, </booktitle> <year> 1989. </year>
Reference-contexts: There are also some proposals on supporting multiple protocols (interfaces) for each type (class) <ref> [GB89, SS89] </ref>; such an approach would require however many extensions to the typical object model.
Reference: [HZ90] <author> S. Heiler and S. B. Zdonik. </author> <title> Object views: Extending the vision. </title> <booktitle> Proceedings of the IEEE Data Engineering Conference, </booktitle> <month> February </month> <year> 1990. </year>
Reference-contexts: These experiences will prove useful to other researchers developing view support. Note that while several proposals of object-oriented views have been given in the literature in recent years <ref> [Ber92, HZ90, Kim88, SLT91, SZ89, TYI88] </ref>, the large majority of them have not yet been implemented. Furthermore, we are not aware of any commercial OODB currently supporting such general purpose view capabilities. Our work described in this paper thus fills a significant void. <p> between a virtual class and existing base classes [TYI88]; or (2) relate a virtual class only with its direct source class via a subclass/superclass relationship [SLT91]; or (3) simply relate a virtual class with its source class via a derived-from relationship [Ber92], (4) or with the root of the schema <ref> [HZ90, Kim89] </ref>. The first approach is vulnerable to potential consistency problems, since the users might introduce an inconsistency in the schema graph by inserting is-a arcs between two classes not related by a subclass relationship. <p> Most previous work regarding view systems for OODBs focuses on view formation to the exclusion of view incorporation. Most researchers have focused on how query languages can be used to support the definition of virtual classes <ref> [HZ90, SLT91, TYI88, AB91, Run92b, Ber92] </ref>. In their discussion of FUGUE, Heiler and Zdonik [HZ90] propose that the query language of their DBMS can be used for the specification of object-oriented views. They do not investigate either the issues of classification nor the re-use of methods. <p> Most researchers have focused on how query languages can be used to support the definition of virtual classes [HZ90, SLT91, TYI88, AB91, Run92b, Ber92]. In their discussion of FUGUE, Heiler and Zdonik <ref> [HZ90] </ref> propose that the query language of their DBMS can be used for the specification of object-oriented views. They do not investigate either the issues of classification nor the re-use of methods.
Reference: [Kim88] <author> H. J. Kim. </author> <title> Issues in Object Oriented Database Systems. </title> <type> PhD thesis, </type> <institution> University of Texas at Austin, </institution> <month> May </month> <year> 1988. </year>
Reference-contexts: These experiences will prove useful to other researchers developing view support. Note that while several proposals of object-oriented views have been given in the literature in recent years <ref> [Ber92, HZ90, Kim88, SLT91, SZ89, TYI88] </ref>, the large majority of them have not yet been implemented. Furthermore, we are not aware of any commercial OODB currently supporting such general purpose view capabilities. Our work described in this paper thus fills a significant void. <p> In the case of virtual classes, however, Mul-tiView determines subsumption by the implementa 3 Alternative definitions of the "subclass" relationship exist, for example, in <ref> [Kim88] </ref> and [Car84]. tion (code block) rather than the interface (selector name) of types. <p> Others define view schemata through the manipulation of the object schema graph rather than solely by query languages. Tanaka et al. [TYI88] propose that view schemata be defined by manually manipulating the edges in the global schema graph. <ref> [Kim88] </ref> also uses DAG rearrangement for view schema definition. Such DAG manipulation approaches must deal with the issues of (1) possibly introducing inconsistencies into the view schema due to human error and of (2) unintentionally modifying the semantics of a virtual class due to side effects of graph manipulation.
Reference: [Kim89] <author> W. Kim. </author> <title> A model of queries in object-oriented databases. </title> <booktitle> In Proceedings of the International Conference on Very Large Databases, </booktitle> <pages> pages 423-432, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: between a virtual class and existing base classes [TYI88]; or (2) relate a virtual class only with its direct source class via a subclass/superclass relationship [SLT91]; or (3) simply relate a virtual class with its source class via a derived-from relationship [Ber92], (4) or with the root of the schema <ref> [HZ90, Kim89] </ref>. The first approach is vulnerable to potential consistency problems, since the users might introduce an inconsistency in the schema graph by inserting is-a arcs between two classes not related by a subclass relationship.
Reference: [MNK91] <author> M. M. A. Morsi, S. B. Navathe, and H.- J. Kim. </author> <title> A schema management and pro-totyping interface for an object-oriented database environment. </title> <editor> In F. Van Ass-che, B. Moulin, and C. Rolland, editors, </editor> <booktitle> Object Oriented Approach in Information Systems, </booktitle> <pages> pages 157-180. </pages> <publisher> Elsevier Science Publishers B. V. (North Holland), </publisher> <year> 1991. </year>
Reference-contexts: This feature of Mul-tiView is a significant difference to other approaches. For instance, in <ref> [MNK91] </ref>, the specification of a virtual class (both type and extent) has to be dynamically recomputed for each view schema it is inserted in, since for example the addition of an is-a relation ship may add new inherited attributes to the virtual type. <p> Such DAG manipulation approaches must deal with the issues of (1) possibly introducing inconsistencies into the view schema due to human error and of (2) unintentionally modifying the semantics of a virtual class due to side effects of graph manipulation. For example, in <ref> [MNK91] </ref>, the addition of an is-a relationship may add new inherited attributes to the virtual type, so the specification of a virtual class (both type and extent) is dynamically recomputed for each view schema in which it is inserted.
Reference: [Run92a] <author> E. A. Rundensteiner. </author> <title> A class integration algorithm and its application for supporting consistent object views. </title> <type> Technical Report 92-50, </type> <institution> University of California, Irvine, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: designed Mul-tiView, a view management system which supports the definition of virtual classes through user queries, and automatically organizes both base and virtual classes into one comprehensive global schema graph from which object-oriented views virtual, possibly restructured, subschema graphs of the global schema can be specified in a consistent manner <ref> [Run92a] </ref>. In this paper, we describe the design and implementation of the MultiView prototype system which has been realized using GemStone 1 . In particular, we outline its three-layered architecture, its system classes, its view query language, and its user interface. <p> In particular, we outline its three-layered architecture, its system classes, its view query language, and its user interface. This work not only validates the MultiView view methodology introduced elsewhere <ref> [Run92a] </ref>, but it also results in general observations about the basic functionalities required from an OODB system for building a view manager. These experiences will prove useful to other researchers developing view support. <p> OODBs [Run92b] MultiView breaks view specification into four subtasks, illustrated in Figures 1 through 4: 1. the derivation of virtual classes via an object oriented query; 2. the integration of the virtual classes with existing classes into a single consistent global schema graph, maintaining relationships between base and virtual classes; <ref> [Run92a] </ref> 3. the selection of both base and virtual classes from the augmented global schema to participate in named view schemata; 4. the construction of arbitrarily complex view schemata composed of these selected view classes. [Run93] The separation of the view design process into a number of well-defined tasks has several <p> Because we restrict the query language used for virtual class derivation to be an object-preserving algebra (i.e., no new objects are being generated re quiring new identifiers), views in MultiView are automatically updatable <ref> [SLT91, Run92a] </ref>. <p> In fact, it reduces the fourth subtask, the problem of determining the class generalization hierarchy for each of the view schemata, to a simple and efficient graph-theoretic algorithm <ref> [Run92a] </ref>. Global class integration presents the view definer with knowledge about all classes in the global schema, even those that are not related to his or her view schema. As the size of the schema graph grows, class integration becomes a more and more involved pro cess. <p> These problems and their solutions are described in more detail in <ref> [Run92a] </ref> and [Run92b]. Inheritance mismatch is a problem of the type hierarchy which occurs when a new virtual class is cre person name birthday universityMember name birthday universityId employee name birthday universityId salary student name birthday universityId GPA Object agelessStudent name universityId GPA b. <p> As described in Section 2, if two classes C 1 and C 2 share some common property then they both must have inherited if from some lowest common super-class (LCS) in the class lattice for which this common property is defined. <ref> [Run92a] </ref> shows how (intermediate) classes can be created when inserting a new class V into a global schema, representing the LCS class of V and the existing classes in the hierarchy. <p> View generation has been reduced to a classical graph problem. Hence, we can apply standard graph algorithms to solve the view generation problem as we proposed elsewhere in <ref> [Run92a] </ref> and [Run93]. 4 Implementation of the Multi View Prototype 4.1 Required OODB Features Because support for a comprehensive consistent global schema is one of the primary goals of Mul-tiView, the MultiView data model differs from GemStone's in a number of fundamental ways.
Reference: [Run92b] <author> E. A. Rundensteiner. </author> <title> Multiview: A methodology for supporting multiple views in object-oriented databases. </title> <booktitle> In 18th VLDB Conference, </booktitle> <year> 1992. </year>
Reference-contexts: only the original base classes) is maintained by considering it to be a special view schema containing all base classes, which are added to this base view schema upon class creation. 3 The MultiView Approach In this section, we outline MultiView, our approach for supporting multiple view schemata in OODBs <ref> [Run92b] </ref> MultiView breaks view specification into four subtasks, illustrated in Figures 1 through 4: 1. the derivation of virtual classes via an object oriented query; 2. the integration of the virtual classes with existing classes into a single consistent global schema graph, maintaining relationships between base and virtual classes; [Run92a] 3. <p> These problems and their solutions are described in more detail in [Run92a] and <ref> [Run92b] </ref>. Inheritance mismatch is a problem of the type hierarchy which occurs when a new virtual class is cre person name birthday universityMember name birthday universityId employee name birthday universityId salary student name birthday universityId GPA Object agelessStudent name universityId GPA b. <p> The algorithm then determines a set VE of is-a edges among classes in VV such that VS = (VV,VE) is a valid view schema <ref> [Run92b] </ref>. View generation has been reduced to a classical graph problem. <p> Most previous work regarding view systems for OODBs focuses on view formation to the exclusion of view incorporation. Most researchers have focused on how query languages can be used to support the definition of virtual classes <ref> [HZ90, SLT91, TYI88, AB91, Run92b, Ber92] </ref>. In their discussion of FUGUE, Heiler and Zdonik [HZ90] propose that the query language of their DBMS can be used for the specification of object-oriented views. They do not investigate either the issues of classification nor the re-use of methods.
Reference: [Run93] <author> E. A. Rundensteiner. </author> <title> Tools for view generation in oodbs. </title> <booktitle> In ACM 2nd Int. Conf on Information and Knowledge Management (CIKM'93), </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: classes into a single consistent global schema graph, maintaining relationships between base and virtual classes; [Run92a] 3. the selection of both base and virtual classes from the augmented global schema to participate in named view schemata; 4. the construction of arbitrarily complex view schemata composed of these selected view classes. <ref> [Run93] </ref> The separation of the view design process into a number of well-defined tasks has several advantages. First, it simplifies view specification, since each of the tasks can be solved independently from the others. <p> View generation has been reduced to a classical graph problem. Hence, we can apply standard graph algorithms to solve the view generation problem as we proposed elsewhere in [Run92a] and <ref> [Run93] </ref>. 4 Implementation of the Multi View Prototype 4.1 Required OODB Features Because support for a comprehensive consistent global schema is one of the primary goals of Mul-tiView, the MultiView data model differs from GemStone's in a number of fundamental ways.
Reference: [Ser91] <author> Servio Corporation. </author> <note> Programming in OPAL, version 2.5 edition, </note> <month> August </month> <year> 1991. </year>
Reference-contexts: The MultiView data model is similar to the OPAL model used by GemStone, and is fully object-oriented, supporting classes, class methods, object instances (objects), object identifiers, complete encapsulation 2 , and many other features <ref> [Ser91] </ref>. MultiView adapts GemStone's native data model to concur more closely with the ODMG data model [ACD + 93] and to incorporate features necessary for the support of updatable views. <p> the superclass, and thus in each context where an instance of the superclass is required, an instance of the subclass is also permitted. 3 In some languages (including Smalltalk and language derivatives of Smalltalk, such as GemStone's native language, Opal), methods are identified by their selectors, i.e., their method names <ref> [Ser91] </ref>. When an object receives a message whose selector does not match the selector of any of the methods belonging to the receiver's class, then the system searches the methods belonging to that class's super-classes, looking for an appropriate selector.
Reference: [SLT91] <author> M. H. Scholl, C. Laasch, and M. Tresch. </author> <title> Updatable views in object-oriented databases. </title> <booktitle> In Proceedings of the Second DOOD Conference, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: These experiences will prove useful to other researchers developing view support. Note that while several proposals of object-oriented views have been given in the literature in recent years <ref> [Ber92, HZ90, Kim88, SLT91, SZ89, TYI88] </ref>, the large majority of them have not yet been implemented. Furthermore, we are not aware of any commercial OODB currently supporting such general purpose view capabilities. Our work described in this paper thus fills a significant void. <p> In addition, MultiView also extends the GemStone model to incorporate features necessary for the support of updatable views, such as dynamic reclassification, multiple inheritance, and multiple class membership and instantiation <ref> [SLT91] </ref>. For details of how these features were achieved, the reader is referred to Section 4.2 for a discussion of the MultiView system architecture. <p> Because we restrict the query language used for virtual class derivation to be an object-preserving algebra (i.e., no new objects are being generated re quiring new identifiers), views in MultiView are automatically updatable <ref> [SLT91, Run92a] </ref>. <p> Existing approaches in the literature either: (1) require the user to specify explicitly the relationship between a virtual class and existing base classes [TYI88]; or (2) relate a virtual class only with its direct source class via a subclass/superclass relationship <ref> [SLT91] </ref>; or (3) simply relate a virtual class with its source class via a derived-from relationship [Ber92], (4) or with the root of the schema [HZ90, Kim89]. <p> Most previous work regarding view systems for OODBs focuses on view formation to the exclusion of view incorporation. Most researchers have focused on how query languages can be used to support the definition of virtual classes <ref> [HZ90, SLT91, TYI88, AB91, Run92b, Ber92] </ref>. In their discussion of FUGUE, Heiler and Zdonik [HZ90] propose that the query language of their DBMS can be used for the specification of object-oriented views. They do not investigate either the issues of classification nor the re-use of methods. <p> To the best of our knowledge, an implementation of their approach using the O2 system is planned, but not yet implemented. Scholl et al.'s work on views <ref> [SLT91] </ref> comes closest to our work; they have also developed a prototype of their approach. They suggest use of an object-preserving subset of their algebra to define virtual classes and thus achieve updatable views.
Reference: [SS89] <author> J. Shilling and P. Sweeney. </author> <title> Three steps to views: Extending the object-oriented paradigm. </title> <booktitle> In OOPSLA, </booktitle> <pages> pages 353 - 361, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: There are also some proposals on supporting multiple protocols (interfaces) for each type (class) <ref> [GB89, SS89] </ref>; such an approach would require however many extensions to the typical object model.
Reference: [SZ89] <author> L. A. Stein and S. B. Zdonik. Clovers: </author> <title> The dynamic behavior of types and instances. </title> <type> Technical Report CS-89-42, </type> <institution> Brown University, </institution> <month> November </month> <year> 1989. </year>
Reference-contexts: These experiences will prove useful to other researchers developing view support. Note that while several proposals of object-oriented views have been given in the literature in recent years <ref> [Ber92, HZ90, Kim88, SLT91, SZ89, TYI88] </ref>, the large majority of them have not yet been implemented. Furthermore, we are not aware of any commercial OODB currently supporting such general purpose view capabilities. Our work described in this paper thus fills a significant void.

References-found: 17

