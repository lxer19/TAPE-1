URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/robust_timed_automata.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/robust_timed_automata.html
Root-URL: http://www.cs.berkeley.edu
Email: vgupta@parc.xerox.com  tah@eecs.berkeley.edu  radha@math.luc.edu  
Phone: 2  3  
Title: Robust Timed Automata  
Author: Vineet Gupta Thomas A. Henzinger Radha Jagadeesan 
Address: 3333 Coyote Hill Road, Palo Alto, CA 94304;  Berkeley, CA 94720;  Univ.-Lake Shore Campus, Chicago, IL 60626;  
Affiliation: 1 Xerox PARC,  EECS Department, University of California,  Mathematical Sciences Department, Loyola  
Abstract: We define robust timed automata, which are timed automata that accept all trajectories "robustly": if a robust timed automaton accepts a trajectory, then it must accept neighboring trajectories also; and if a robust timed automaton rejects a trajectory, then it must reject neighboring trajectories also. We show that the emptiness problem for robust timed automata is still decidable, by modifying the region construction for timed automata. We then show that, like timed automata, robust timed automata cannot be determinized. This result is somewhat unexpected, given that in temporal logic, the removal of real-time equality constraints is known to lead to a decidable theory that is closed under all boolean operations.
Abstract-found: 1
Intro-found: 1
Reference: [ACD93] <author> R. Alur, C. Courcoubetis, and D.L. Dill. </author> <title> Model checking in dense real time. </title> <journal> Information and Computation, </journal> <volume> 104(1) </volume> <pages> 2-34, </pages> <year> 1993. </year>
Reference-contexts: The emptiness check leads, in the usual way, to algorithms for verifying requirements of robust timed automata that are specified in a linear-time logic such as MITL [AFH96], in a branching-time logic such as TCTL <ref> [ACD93] </ref>, or by event-clock automata [AFH94]. Second, we study the complementation problem for robust timed automata.
Reference: [ACH + 95] <author> R. Alur, C. Courcoubetis, N. Halbwachs, T.A. Henzinger, P.-H. Ho, X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> The algorithmic analysis of hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 3-34, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction The formalism of timed automata [AD94] has become a standard model for real-time systems, and its extension to hybrid automata <ref> [ACHH93, ACH + 95, Hen96] </ref> has become a standard model for mixed discrete-continuous systems. Yet it may be argued that the precision inherent in the formalism of timed and hybrid automata gives too much expressive power to the system designer. <p> If HTraj is the set of hybrid trajectories, then each hybrid automaton accepts a subset of HTraj <ref> [ACH + 95] </ref>. Given a metric on HTraj, we again define tubes as the open sets of the corresponding topology. Now, following our definition for timed automata, a tube is accepted by a hybrid automaton iff a dense subset of trajectories in the tube are accepted by the automaton.
Reference: [ACHH93] <author> R. Alur, C. Courcoubetis, T.A. Henzinger, and P.-H. Ho. </author> <title> Hybrid automata: an algorithmic approach to the specification and verification of hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <title> Hybrid Systems I, </title> <booktitle> Lecture Notes in Computer Science 736, </booktitle> <pages> pages 209-229. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction The formalism of timed automata [AD94] has become a standard model for real-time systems, and its extension to hybrid automata <ref> [ACHH93, ACH + 95, Hen96] </ref> has become a standard model for mixed discrete-continuous systems. Yet it may be argued that the precision inherent in the formalism of timed and hybrid automata gives too much expressive power to the system designer.
Reference: [AD94] <author> R. Alur and D.L. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction The formalism of timed automata <ref> [AD94] </ref> has become a standard model for real-time systems, and its extension to hybrid automata [ACHH93, ACH + 95, Hen96] has become a standard model for mixed discrete-continuous systems. <p> In this paper, we look at some theoretical implications of robustness. First, we solve the emptiness problem for robust timed automata: given a timed automaton A, does A accept any tube? Our emptiness check for tube acceptance is derived from the region method of <ref> [AD94] </ref> for trajectory acceptance, but is somewhat more efficient, because only open regions need be considered. <p> While timed automata with trajectory acceptance are not closed under complement <ref> [AD94] </ref> (i.e., there is a timed automaton whose rejected trajectories are not the accepted trajectories of any other timed automaton), one may harbor some hope that robust timed automata can be complemented (i.e., for every timed automaton B there may be a timed automaton :B that accepts precisely the tubes which <p> The impossibility of complementation for timed automata follows from the fact that while the emptiness problem is decidable, the universality problem (i.e., given a timed automaton, does it accept all trajectories?) is not <ref> [AD94] </ref>. Undecidability proofs for real-time problems, however, typically depend on an encoding of Turing-machine computations which uses the exact real-numbered times available in individual trajectories. These proofs do not straight-forwardly extend to tubes. 3. <p> Thus, for timed automata, a tube will be accepted iff all but finitely many of its trajectories are accepted, and it will be rejected iff all but finitely many of its trajectories are rejected. 3 Robust Timed Automata We define a variant of Alur-Dill timed automata <ref> [AD94] </ref>. While the variant makes several aspects of our presentation easier, we will show that it is equivalent in expressive power to Alur-Dill timed automata. <p> Moreover, by Proposition 4, the open automaton A int accepts any tube iff it accepts any trajectory. The latter problem can be solved using the region construction of <ref> [AD94] </ref>. In fact, for checking the emptiness of open timed automata such as A int , only open regions need be considered. Theorem 5. The problem of deciding whether a timed automaton accepts any tube is complete for PSPACE. Proof. <p> In addition, there is an "-transition from the state hq; Ri to the state hq 0 ; R 0 i in reg (A) iff q = q 0 and R 0 is a successor region of R. PSPACE-completeness follows from the corresponding proof in <ref> [AD94] </ref>. ut 5 Nondeterminizability of Robust Timed Automata The previous section shows that timed automata yield a decidable theory of tubes. In this section, we present evidence that the resulting theory of tubes is not closed under all boolean operations. <p> Theorem 8. The open timed automaton A of Figure 4 is not tube-determinizable. 5 Similarly, since [L (A)] c = [L (A)] c = [L (A) c ], it would suffice to construct trajectory complements of closed timed automata. This, however, is known to be impossi ble <ref> [AD94] </ref>. a y &gt; 2 y := (0; 1)x := (0; 1) a Fig. 4. A nondeterminizable open timed automaton Proof.
Reference: [AFH94] <author> R. Alur, L. Fix, and T.A. Henzinger. </author> <title> A determinizable class of timed automata. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 1-13. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The emptiness check leads, in the usual way, to algorithms for verifying requirements of robust timed automata that are specified in a linear-time logic such as MITL [AFH96], in a branching-time logic such as TCTL [ACD93], or by event-clock automata <ref> [AFH94] </ref>. Second, we study the complementation problem for robust timed automata.
Reference: [AFH96] <author> R. Alur, T. Feder, and T.A. Henzinger. </author> <title> The benefits of relaxing punctuality. </title> <journal> Journal of the ACM, </journal> <volume> 43(1) </volume> <pages> 116-146, </pages> <year> 1996. </year>
Reference-contexts: The emptiness check leads, in the usual way, to algorithms for verifying requirements of robust timed automata that are specified in a linear-time logic such as MITL <ref> [AFH96] </ref>, in a branching-time logic such as TCTL [ACD93], or by event-clock automata [AFH94]. Second, we study the complementation problem for robust timed automata. <p> This hope stems from the following observations: 1. In the case of linear-time temporal logic, the removal of all timing constraints that enforce exact real-numbered time differences between events leads to a decidable theory, called MITL, which is closed under all boolean operations <ref> [AFH96] </ref>. It is therefore not unreasonable to expect that in the case of timed automata, the removal of individual trajectories, which express exact real-numbered time differences between events, leads likewise to a decidable and boolean-closed theory. 2.
Reference: [AHH96] <author> R. Alur, T.A. Henzinger, and P.-H. Ho. </author> <title> Automatic symbolic verification of embedded systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(3) </volume> <pages> 181-201, </pages> <year> 1996. </year>
Reference-contexts: Linear hybrid automata can be analyzed for tube acceptance as in the case of trajectory acceptance <ref> [AHH96] </ref>, but only open regions (open polyhedral sets in R n ) are needed during the computation. This significantly simplifies the algorithms that have been implemented in tools such as HyTech [HHWT95].
Reference: [Hen96] <author> T.A. Henzinger. </author> <title> The theory of hybrid automata. </title> <booktitle> In Proceedings of the 11th Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 278-292. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year> <type> Invited tutorial. </type>
Reference-contexts: 1 Introduction The formalism of timed automata [AD94] has become a standard model for real-time systems, and its extension to hybrid automata <ref> [ACHH93, ACH + 95, Hen96] </ref> has become a standard model for mixed discrete-continuous systems. Yet it may be argued that the precision inherent in the formalism of timed and hybrid automata gives too much expressive power to the system designer.
Reference: [HHWT95] <author> T.A. Henzinger, P.-H. Ho, and H. Wong-Toi. HyTech: </author> <title> the next generation. </title> <booktitle> In Proceedings of the 16th Annual Real-time Systems Symposium, </booktitle> <pages> pages 56-65. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: Linear hybrid automata can be analyzed for tube acceptance as in the case of trajectory acceptance [AHH96], but only open regions (open polyhedral sets in R n ) are needed during the computation. This significantly simplifies the algorithms that have been implemented in tools such as HyTech <ref> [HHWT95] </ref>. We conclude by posing an important open question: are there interesting classes of hybrid automata whose emptiness is undecidable under trajectory acceptance but decidable under tube acceptance?
Reference: [HNSY94] <author> T.A. Henzinger, X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> Symbolic model checking for real-time systems. </title> <journal> Information and Computation, </journal> <volume> 111(2) </volume> <pages> 193-244, </pages> <year> 1994. </year> <note> Special issue for LICS 92. 17 </note>
Reference-contexts: It is often convenient to annotate locations with clock constraints, so-called invariant conditions <ref> [HNSY94] </ref>. Our results extend straight-forwardly to timed automata with invariant conditions. A clock-valuation function fl : C ! R + 0 assigns to each clock variable a nonnegative real in R + 0 = R + [ f0g.
References-found: 10

