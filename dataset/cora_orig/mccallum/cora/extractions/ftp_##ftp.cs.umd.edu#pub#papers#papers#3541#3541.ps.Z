URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3541/3541.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: Compositional Verification by Model Checking for Counter-Examples  
Author: Tevfik Bultan Jeffrey Fischer Richard Gerber 
Address: College Park, MD 20742  8000 Westpark Drive McLean, VA 22070  College Park, MD 20742  
Affiliation: Department of Computer Science University of Maryland  Rational Software Corporation  Institute for Advanced Computer Studies Department of Computer Science University of Maryland  
Abstract: We have developed a compositional method that directly addresses this problem in the context of multi-tasking programs. Our solution depends on three key space-saving ingredients: (1) checking for counter-examples, which leads to simpler search algorithms; (2) automatic extraction of interfaces, which allows a refinement of the finite model even before its communicating partners have been compiled; and (3) using propositional "strengthening assertions" for the sole purpose of reducing state space. In this paper we present our compositional approach, and describe the software tools that support it. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alur, C. Courcoubetis, T. A. Henzinger, and P. Ho. </author> <title> Hybrid automata: an algorithmic approach to the specification and verification of hybrid systems. </title> <booktitle> Proceedings of the Workshop on Theory of Hybrid Systems, </booktitle> <year> 1992. </year>
Reference-contexts: As part of our future work we intend to add real-time modelling capabilities. While there has been recent research in real-time model checking (see <ref> [1, 12] </ref>), there has been very little exploration using a compositional framework. The addition of time makes this a significantly more complex problem. 6 Conclusions We have developed an automated approach to verification that is compositional.
Reference: [2] <author> J. R. Burch, E. M. Clarke, K. L. McMillan, D. L. Dill, and L. H. Hwang. </author> <title> Symbolic model checking: 10 20 states and beyond. </title> <booktitle> Proceedings of the Fifth Annual Symposium on Logic in Computer Science, </booktitle> <pages> 428-439, </pages> <year> 1990. </year>
Reference-contexts: Reduction techniques have generally followed one of two paths: (1) to avoid generating the entire structure, and instead to perform the check compositionally or locally [5, 8, 17, 18]; or (2) to form the whole structure, but encode it symbolically to reduce its size <ref> [2] </ref>. We have taken the compositional approach, albeit with several unique twists. 1 Computation Tree Logic a branching time temporal logic. 1 First, we negate a user-entered invariant, and then search for its counter-example.
Reference: [3] <author> M. Chiodo, T. R. Shiple, A. Sangiovanni-Vincentelli, and R. K.Brayton. </author> <title> Automatic reduction in CTL compositional model checking. </title> <booktitle> Proceedings CAV'92, </booktitle> <volume> LNCS 663, </volume> <pages> 234-247, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: We show how this type of query leads to a sound and complete theory of compositional model-checking, the preliminary sketch of which was first reported in [11] (which in turn extended the hardware analysis work in <ref> [3] </ref>). Second, we exploit Ada's rendezvous-style communication, and automatically extract "logical interfaces" for each task. This allows us to refine a task's model with respect to its communicating partners even before their models have been generated.
Reference: [4] <author> E. M. Clarke, E. A. Emerson, and A. P. Sistla. </author> <title> Automatic verification of finite-state concurrent systems using temporal logic specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: Model checking refers to a family of algorithms used to check whether a state-transition structure satisfies a formula in some temporal logic. Several such logics [9, 13] and procedures [6, 10, 15] have been proposed for this use. Our work uses CTL 1 model checking <ref> [4] </ref>, which runs in time linear in both the size of the structure and the length of the formula being verified. The size of the structure normally dictates the cost of verification.
Reference: [5] <author> S. C. Cheung and J. Kramer. </author> <title> Enhancing Compositional Reacha-bility Analysis with Context Constraints. </title> <booktitle> Proceedings FSE'93, ACM SIGSOFT, </booktitle> <pages> 115-125, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: A considerable amount of research has been directed towards techniques for reducing the size of the model that gets constructed while applying model checking. Reduction techniques have generally followed one of two paths: (1) to avoid generating the entire structure, and instead to perform the check compositionally or locally <ref> [5, 8, 17, 18] </ref>; or (2) to form the whole structure, but encode it symbolically to reduce its size [2].
Reference: [6] <author> R. Cleaveland. </author> <title> Tableau-based model checking in the propositional mu-calculus. </title> <journal> Acta Informatica, </journal> <volume> 27 </volume> <pages> 725-747, </pages> <year> 1990. </year>
Reference-contexts: The particular technique we use is model checking. Model checking refers to a family of algorithms used to check whether a state-transition structure satisfies a formula in some temporal logic. Several such logics [9, 13] and procedures <ref> [6, 10, 15] </ref> have been proposed for this use. Our work uses CTL 1 model checking [4], which runs in time linear in both the size of the structure and the length of the formula being verified. The size of the structure normally dictates the cost of verification.
Reference: [7] <author> R. Cleaveland, J. Parrow, and B. Steffen. </author> <title> The Concurrency Workbench. Proceedings of the Workshop on Automatic Verification Methods for Finite-State Systems, </title> <publisher> LNCS 407, </publisher> <pages> 24-37, </pages> <year> 1990. </year>
Reference-contexts: There is a wide range in capability and accuracy of various modeling techniques, as well as in the complexity of verifying properties of the models <ref> [7, 14, 16] </ref>. The particular technique we use is model checking. Model checking refers to a family of algorithms used to check whether a state-transition structure satisfies a formula in some temporal logic. Several such logics [9, 13] and procedures [6, 10, 15] have been proposed for this use.
Reference: [8] <author> E. M. Clarke, D. E. Long, and K. L. McMillan. </author> <title> Compositional model checking. </title> <booktitle> Proceedings of the Fourth Annual Symposium on Logic in Computer Science, </booktitle> <pages> 464-475, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: A considerable amount of research has been directed towards techniques for reducing the size of the model that gets constructed while applying model checking. Reduction techniques have generally followed one of two paths: (1) to avoid generating the entire structure, and instead to perform the check compositionally or locally <ref> [5, 8, 17, 18] </ref>; or (2) to form the whole structure, but encode it symbolically to reduce its size [2].
Reference: [9] <author> E. A. Emerson and J. Y. Halpern. </author> <title> 'Sometimes' and 'not never' revisited: on branching versus linear time temporal logic. </title> <journal> Journal of the ACM, </journal> <volume> 33(1) </volume> <pages> 151-178, </pages> <month> January </month> <year> 1986. </year>
Reference-contexts: The particular technique we use is model checking. Model checking refers to a family of algorithms used to check whether a state-transition structure satisfies a formula in some temporal logic. Several such logics <ref> [9, 13] </ref> and procedures [6, 10, 15] have been proposed for this use. Our work uses CTL 1 model checking [4], which runs in time linear in both the size of the structure and the length of the formula being verified.
Reference: [10] <author> E. A. Emerson and C. Lei. </author> <title> Efficient model checking in fragments of the propositional mu-calculus. </title> <booktitle> Proceedings of Symposium on Logic in Computer Science, </booktitle> <pages> 267-278, </pages> <year> 1986 </year>
Reference-contexts: The particular technique we use is model checking. Model checking refers to a family of algorithms used to check whether a state-transition structure satisfies a formula in some temporal logic. Several such logics [9, 13] and procedures <ref> [6, 10, 15] </ref> have been proposed for this use. Our work uses CTL 1 model checking [4], which runs in time linear in both the size of the structure and the length of the formula being verified. The size of the structure normally dictates the cost of verification.
Reference: [11] <author> J. Fischer and R. Gerber. </author> <title> Compositional Model Checking of Ada Tasking Programs Proceedings COMPASS'94. </title> <year> 1994. </year>
Reference-contexts: We show how this type of query leads to a sound and complete theory of compositional model-checking, the preliminary sketch of which was first reported in <ref> [11] </ref> (which in turn extended the hardware analysis work in [3]). Second, we exploit Ada's rendezvous-style communication, and automatically extract "logical interfaces" for each task. This allows us to refine a task's model with respect to its communicating partners even before their models have been generated.
Reference: [12] <author> N. Halbwachs. </author> <title> Delay analysis in synchronous programs CAV93, </title> <publisher> LNCS 697. </publisher> <year> 1993. </year>
Reference-contexts: As part of our future work we intend to add real-time modelling capabilities. While there has been recent research in real-time model checking (see <ref> [1, 12] </ref>), there has been very little exploration using a compositional framework. The addition of time makes this a significantly more complex problem. 6 Conclusions We have developed an automated approach to verification that is compositional.
Reference: [13] <author> R. J. van Glabbeek. </author> <title> The linear time branching time spectrum. </title> <journal> CONCUR90, </journal> <volume> LNCS 458, </volume> <year> 1990. </year>
Reference-contexts: The particular technique we use is model checking. Model checking refers to a family of algorithms used to check whether a state-transition structure satisfies a formula in some temporal logic. Several such logics <ref> [9, 13] </ref> and procedures [6, 10, 15] have been proposed for this use. Our work uses CTL 1 model checking [4], which runs in time linear in both the size of the structure and the length of the formula being verified.
Reference: [14] <author> R. Gerber and I. Lee. </author> <title> A Layered Approach to Automating the Verification of Real-Time Systems. </title> <journal> IEEE Trans. on Software Eng., </journal> <volume> 18(9) </volume> <pages> 768-784, </pages> <year> 1992. </year>
Reference-contexts: There is a wide range in capability and accuracy of various modeling techniques, as well as in the complexity of verifying properties of the models <ref> [7, 14, 16] </ref>. The particular technique we use is model checking. Model checking refers to a family of algorithms used to check whether a state-transition structure satisfies a formula in some temporal logic. Several such logics [9, 13] and procedures [6, 10, 15] have been proposed for this use.
Reference: [15] <author> O. Lichtenstein and A. Pnueli. </author> <title> Checking that finite state concurrent programs satisfy their linear specifications. </title> <year> 1984. </year>
Reference-contexts: The particular technique we use is model checking. Model checking refers to a family of algorithms used to check whether a state-transition structure satisfies a formula in some temporal logic. Several such logics [9, 13] and procedures <ref> [6, 10, 15] </ref> have been proposed for this use. Our work uses CTL 1 model checking [4], which runs in time linear in both the size of the structure and the length of the formula being verified. The size of the structure normally dictates the cost of verification.
Reference: [16] <author> J. S. Ostroff. </author> <title> Survey of formal methods for the specification and design of real-time systems. Draft for IEEE Press book "Tutorial on Specification of Time", </title> <year> 1992. </year>
Reference-contexts: There is a wide range in capability and accuracy of various modeling techniques, as well as in the complexity of verifying properties of the models <ref> [7, 14, 16] </ref>. The particular technique we use is model checking. Model checking refers to a family of algorithms used to check whether a state-transition structure satisfies a formula in some temporal logic. Several such logics [9, 13] and procedures [6, 10, 15] have been proposed for this use.
Reference: [17] <author> C. Stirling and D. Walker. </author> <title> CCS, liveness, and local model checking in the linear time mu-calculus. Automatic Verification Methods for Finite State Systems, </title> <publisher> LNCS 407, </publisher> <year> 1989. </year>
Reference-contexts: A considerable amount of research has been directed towards techniques for reducing the size of the model that gets constructed while applying model checking. Reduction techniques have generally followed one of two paths: (1) to avoid generating the entire structure, and instead to perform the check compositionally or locally <ref> [5, 8, 17, 18] </ref>; or (2) to form the whole structure, but encode it symbolically to reduce its size [2].
Reference: [18] <author> W. J. Yeh and M. Young. </author> <title> Compositional Reachability Analysis Using Process Algebra. </title> <booktitle> Proceedings TAV4, ACM SIGSOFT, </booktitle> <pages> 49-59, </pages> <month> October </month> <year> 1991. </year> <month> 15 </month>
Reference-contexts: A considerable amount of research has been directed towards techniques for reducing the size of the model that gets constructed while applying model checking. Reduction techniques have generally followed one of two paths: (1) to avoid generating the entire structure, and instead to perform the check compositionally or locally <ref> [5, 8, 17, 18] </ref>; or (2) to form the whole structure, but encode it symbolically to reduce its size [2].
References-found: 18

