URL: http://www.cs.cmu.edu/afs/cs/project/jair/pub/volume2/david95a.ps.Z
Refering-URL: http://www.cs.washington.edu/research/jair/abstracts/david95a.html
Root-URL: 
Email: david@lirmm.fr  
Title: Using Pivot Consistency to Decompose and Solve Functional CSPs  
Author: Philippe David 
Address: 34392 Montpellier Cedex 5 France  
Note: Journal of Artificial Intelligence Research 2 (1995) 447-474 Submitted 11/94; published 5/95  LIRMM (UMR C9928 CNRS/universite Montpellier II) 161 rue Ada,  
Abstract: Many studies have been carried out in order to increase the search efficiency of constraint satisfaction problems; among them, some make use of structural properties of the constraint network; others take into account semantic properties of the constraints, generally assuming that all the constraints possess the given property. In this paper, we propose a new decomposition method benefiting from both semantic properties of functional constraints (not bijective constraints) and structural properties of the network; furthermore, not all the constraints need to be functional. We show that under some conditions, the existence of solutions can be guaranteed. We first characterize a particular subset of the variables, which we name a root set. We then introduce pivot consistency, a new local consistency which is a weak form of path consistency and can be achieved in O(n 2 d 2 ) complexity (instead of O(n 3 d 3 ) for path consistency), and we present associated properties; in particular, we show that any consistent instantiation of the root set can be linearly extended to a solution, which leads to the presentation of the aforementioned new method for solving by decomposing functional csps.
Abstract-found: 1
Intro-found: 1
Reference: <author> Berge, C. </author> <year> (1970). </year> <institution> Graphes et Hypergraphes. Dunod, Paris. </institution>
Reference-contexts: Before going further, we need to recall some graph theory notions: the descendant of a vertex (variable), and the root of a directed graph: Definition 2.3 <ref> (Berge, 1970) </ref> A vertex X k is a descendant of X i in a directed graph (X; C f ) iff there exists in C f a path (X i ; X j 1 ; : : : ; X j q ; : : : ; X j p ;
Reference: <author> Bessiere, C. </author> <year> (1994). </year> <title> Arc-consistency and arc-consistency again. </title> <journal> Artificial Intelligence, </journal> <volume> 65 (1), </volume> <pages> 179-190. </pages>
Reference: <author> Borning, A. </author> <year> (1981). </year> <title> The Programming Language Aspects of ThingLab, A Constraint-Oriented Simulation Laboratory. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3 (4), </volume> <pages> 353-387. </pages>
Reference-contexts: All rights reserved. David Programming (Van Hentenryck et al., 1992). Many constraint-based systems and languages use functional constraints, including thinglab <ref> (Borning, 1981) </ref>, garnet (Myers, Giuse, & Vander Zanden, 1992) and kaleidoscope (Freeman-Benson & Borning, 1992). In this paper, we study functional constraints: the relations they represent are partial functions (notice those are not the same as bijective constraints: see sections 2.1 and 2.2).
Reference: <author> Cooper, M. C., Cohen, D. A., & Jeavons, P. G. </author> <year> (1994). </year> <title> Characterising tractable constraints. </title> <journal> Artificial Intelligence, </journal> <volume> 65, </volume> <pages> 347-361. </pages>
Reference: <author> David, P. </author> <year> (1993). </year> <title> When functional and bijective constraints make a CSP polynomial. </title> <booktitle> In Proceedings of IJCAI-93, </booktitle> <pages> pp. 224-229. </pages> <address> Chambery, France. </address>
Reference-contexts: The difference, and, in our opinion, an interesting improvement, is that the results we present in this paper also apply when only some of the constraints are functional. In a previous paper <ref> (David, 1993) </ref>, it is shown that in a path consistent csp, any consistent instantiation can be extended to a solution if, for every non-instantiated variable, there exists a sequence of functional or bijective constraints from an (any) instantiated variable to this non-instantiated variable.
Reference: <author> Dechter, R. </author> <year> (1990). </year> <title> Enhancement Schemes for Constraint Processing: Backjumping, Learning, and Cutset Decomposition. </title> <journal> Artificial Intelligence, </journal> <volume> 41 (3), </volume> <pages> 273-312. </pages>
Reference-contexts: Other work concerned the characterization of classes of polynomial problems, based on the size of their domains (Dechter, 1992) or on the structure of the constraint network (Freuder, 1978), leading to the presentation of decomposition methods such as the cycle-cutset <ref> (Dechter, 1990) </ref> or the tree clustering (Dechter & Pearl, 1989) methods.
Reference: <author> Dechter, R. </author> <year> (1992). </year> <title> From local to global consistency. </title> <journal> Artificial Intelligence, </journal> <volume> 55 (1), </volume> <pages> 87-107. </pages>
Reference-contexts: Other work concerned the characterization of classes of polynomial problems, based on the size of their domains <ref> (Dechter, 1992) </ref> or on the structure of the constraint network (Freuder, 1978), leading to the presentation of decomposition methods such as the cycle-cutset (Dechter, 1990) or the tree clustering (Dechter & Pearl, 1989) methods.
Reference: <author> Dechter, R., & Pearl, J. </author> <year> (1988). </year> <title> Network-based heuristics for constraint satisfaction problems. </title> <journal> Artificial Intelligence, </journal> <volume> 34 (1), </volume> <pages> 1-38. </pages>
Reference-contexts: On every step of the assignment, two elements have to be distinguished: firstly, the set of the formerly instantiated variables (the instantiated set), and secondly the 8. Similarly to directional path consistency and adaptative consistency <ref> (Dechter & Pearl, 1988) </ref>. 454 Pivot Consistency for Functional CSPs next variable to be instantiated. One can consider pivot consistency as a property between each instantiated set and the next variable to be instantiated.
Reference: <author> Dechter, R., & Pearl, J. </author> <year> (1989). </year> <title> Tree clustering for Constraint Networks. </title> <journal> Artificial Intelligence, </journal> <volume> 38 (3), </volume> <pages> 353-366. </pages>
Reference-contexts: Other work concerned the characterization of classes of polynomial problems, based on the size of their domains (Dechter, 1992) or on the structure of the constraint network (Freuder, 1978), leading to the presentation of decomposition methods such as the cycle-cutset (Dechter, 1990) or the tree clustering <ref> (Dechter & Pearl, 1989) </ref> methods.
Reference: <author> Freeman-Benson, B. N., & Borning, A. </author> <year> (1992). </year> <title> Integrating constraints with an object-oriented languuage. </title> <booktitle> In Proceedings of ECOOP-92, </booktitle> <pages> pp. 268-286. </pages> <editor> 473 David Freuder, E. C. </editor> <year> (1978). </year> <title> Synthesizing Constraint Expressions. </title> <journal> Communications of the ACM, </journal> <volume> 21 (11), </volume> <pages> 958-966. </pages>
Reference: <author> Ginsberg, M. L. </author> <year> (1993). </year> <title> Dynamic Backtracking. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 1, </volume> <pages> 25-46. </pages>
Reference: <author> Haralick, R. M., & Elliot, G. L. </author> <year> (1980). </year> <title> Increasing tree search efficiency for constraint satisfaction problems. </title> <journal> Artificial Intelligence, </journal> <volume> 14, </volume> <pages> 263-313. </pages>
Reference: <author> Janssen, P., Jegou, P., Nouguier, B., Vilarem, M.-C., & Castro, B. </author> <year> (1990). </year> <title> SYNTHIA: Assisted design of peptide synthesis plans. </title> <journal> New Journal of Chemistry, </journal> <volume> 14 (12), </volume> <pages> 969-976. </pages>
Reference-contexts: We present these results further in this paper. Some frequently encountered constraints are functional constraints, for instance in peptide synthesis <ref> (Janssen, Jegou, Nouguier, Vilarem, & Castro, 1990) </ref> or in Constraint Logic c fl1995 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved. David Programming (Van Hentenryck et al., 1992).
Reference: <author> Kirousis, L. M. </author> <year> (1993). </year> <title> Fast parallel constraint satisfaction. </title> <journal> Artificial Intelligence, </journal> <volume> 64, </volume> <pages> 147-160. </pages>
Reference: <author> Lucchesi, C. L., & Osborn, S. L. </author> <year> (1978). </year> <title> Candidate keys for relations. </title> <journal> J. Computer and System Sciences, </journal> <volume> 17 (2), </volume> <pages> 270-279. </pages>
Reference: <author> Mackworth, A. K. </author> <year> (1977). </year> <title> Consistency in Networks of Relations. </title> <journal> Artificial Intelligence, </journal> <volume> 8 (1), </volume> <pages> 99-118. </pages>
Reference: <author> Mohr, R., & Henderson, T. C. </author> <year> (1986). </year> <title> Arc and Path Consistency Revisited. </title> <journal> Artificial Intelligence, </journal> <volume> 28 (2), </volume> <pages> 225-233. </pages>
Reference: <author> Mohr, R., & Masini, G. </author> <year> (1988). </year> <title> Running efficiently arc consistency. </title> <booktitle> In Syntactic and Structural Pattern Recognition, </booktitle> <pages> pp. 217-231. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin Heidelberg. </address>
Reference: <author> Montanari, U. </author> <year> (1974). </year> <title> Networks of Constraints: fundamental properties and applications to picture processing. </title> <journal> Information Sciences, </journal> <volume> 7 (1), </volume> <pages> 95-132. </pages>
Reference: <author> Myers, B. A., Giuse, D. A., & Vander Zanden, B. </author> <year> (1992). </year> <title> Declarative programming in a prototype-instance system: object-oriented programming without writing methods. </title> <booktitle> In Proceedings of OOPSLA-92, </booktitle> <pages> pp. 184-200. </pages> <address> Vancouver, Canada. </address>
Reference-contexts: All rights reserved. David Programming (Van Hentenryck et al., 1992). Many constraint-based systems and languages use functional constraints, including thinglab (Borning, 1981), garnet <ref> (Myers, Giuse, & Vander Zanden, 1992) </ref> and kaleidoscope (Freeman-Benson & Borning, 1992). In this paper, we study functional constraints: the relations they represent are partial functions (notice those are not the same as bijective constraints: see sections 2.1 and 2.2).
Reference: <author> Prosser, P. </author> <year> (1993). </year> <title> Hybrid algorithms for the constraint satisfaction problem. </title> <journal> Computational Intelligence, </journal> <volume> 9 (3), </volume> <pages> 268-299. </pages>
Reference: <author> Tarjan, R. </author> <year> (1972). </year> <title> Depth-first search and linear Graph algorithms. </title> <journal> SIAM Journal on Computing, </journal> <volume> 1 (2), </volume> <pages> 146-160. </pages> <editor> van Beek, P. </editor> <year> (1992). </year> <title> On the Minimality and Decomposability of Constraint Networks. </title> <booktitle> In Proceedings of AAAI-92, </booktitle> <pages> pp. 447-452. </pages> <address> San Jose, </address> <note> California. </note> <author> van Beek, P., & Dechter, R. </author> <year> (1994). </year> <title> Constraint Tightness versus Global Consistency. </title> <booktitle> In Proceedings of KR-94. </booktitle> <address> Bonn, Germany. </address>
Reference-contexts: Consequently, R 0 is not a root set. R is thus a minimum root set. 2 Complexity: It is the same as the complexity required for computing the strongly connected components, that is O (e + n) <ref> (Tarjan, 1972) </ref>, if e is the number of edges and n the number of vertices. A.2 Choice of the Pivots and Computation of an R-compatible Order We now describe how to choose the pivot candidates and to compute an R-compatible ordering.
Reference: <author> Van Hentenryck, P., Deville, Y., & Teng, C.-M. </author> <year> (1992). </year> <title> A generic arc-consistency algorithm and its specializations. </title> <journal> Artificial Intelligence, </journal> <volume> 57 (2-3), </volume> <pages> 291-321. 474 </pages>
Reference-contexts: We present these results further in this paper. Some frequently encountered constraints are functional constraints, for instance in peptide synthesis (Janssen, Jegou, Nouguier, Vilarem, & Castro, 1990) or in Constraint Logic c fl1995 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved. David Programming <ref> (Van Hentenryck et al., 1992) </ref>. Many constraint-based systems and languages use functional constraints, including thinglab (Borning, 1981), garnet (Myers, Giuse, & Vander Zanden, 1992) and kaleidoscope (Freeman-Benson & Borning, 1992). <p> All rights reserved. David Programming (Van Hentenryck et al., 1992). Many constraint-based systems and languages use functional constraints, including thinglab (Borning, 1981), garnet <ref> (Myers, Giuse, & Vander Zanden, 1992) </ref> and kaleidoscope (Freeman-Benson & Borning, 1992). In this paper, we study functional constraints: the relations they represent are partial functions (notice those are not the same as bijective constraints: see sections 2.1 and 2.2).
References-found: 23

