URL: file://ftp.cs.ucla.edu/pub/ficus/reiher/tw.papers/tw_debug.ps.gz
Refering-URL: http://ficus-www.cs.ucla.edu/project-members/reiher/available_papers.html
Root-URL: http://www.cs.ucla.edu
Email: reiher@onyx.jpl.nasa.gov  bellenot@math.fsu.edu  jefferson@lanai.cs.ucla.edu  
Title: Debugging the Time Warp Operating System and Its Application Programs  
Author: Peter L. Reiher Steven Bellenot David Jefferson 
Address: 4800 Oak Grove Drive Pasadena, CA 91109  Tallahassee, FL. 32306  Los Angeles, CA 90024  
Affiliation: Jet Propulsion Laboratory California Institute of Technology  The Florida State University  UCLA  
Abstract: The Time Warp Operating System (TWOS) runs discrete event simulations on parallel hardware using an optimistic synchronization method based on rollback and message cancellation. Developing this system caused many difficult debugging problems, both because of its unique method of operation and general problems of developing a distributed system. This paper describes some of the techniques used to debug TWOS. These techniques include debuggers built into the operating system, logging methods, graphical tools, internal statistics, special-purpose applications, and monitors. In addition, TWOS has an important property that aids in debugging simulations run under TWOS must produce deterministic results from run to run. The paper discusses how this property proved useful for debugging both TWOS and the applications run on it. 
Abstract-found: 1
Intro-found: 1
Reference: [Bellenot 89] <author> S. Bellenot and M. Di Loreto, </author> <title> Tools For Measuring the Performance and Diagnosing the Behavior of Distributed Simulations Using Time Warp, </title> <booktitle> Proceedings of the 1989 SCS Conference on Distributed Simulation , Vol. </booktitle> <volume> 21, No. 1, </volume> <year> 1989. </year>
Reference-contexts: Unlike correctness problems, one generally cannot quickly pin down the problem to one section of the code. Debugging performance problems is a common theme in parallel processing [Segall 85], [Socha 88]. Several TWOS tools are specifically designed to help with performance problems <ref> [Bellenot 89] </ref>. One of these is the progress chart. The progress chart is a graphical tool that plots lines on a screen for every event run during a simulations execution, both committed and uncommitted. In a single picture, the progress chart can summarize the entire course of a TWOS run. <p> Another method used to debug TWOS is to write test applications that stress particular aspects of the system. Certain applications meant to induce cascading rollbacks have uncovered problems with the message delivery system and the handling of system messages. One such application, described in <ref> [Bellenot 89] </ref>, was called slooow. This target and arrows simulation had lots of fast arrow objects that shot messages at a rather slow target object. The node hosting the target object would run out of memory much faster than the nodes hosting arrow objects, uncovering flow control problems.
Reference: [Cheung 90] <author> W. Cheung, J. Black, and E. Manning, </author> <title> A Framework For Distributed Debugging, </title> <journal> IEEE Software , Jan. </journal> <volume> 90. </volume>
Reference-contexts: This paper does not intend to present new debugging methods or an integrated approach to debugging for parallel systems. Rather, it is a case study showing how some difficult debugging challenges were met and suggesting some general guidelines for approaching the debugging of complex parallel or distributed systems. <ref> [Cheung 90] </ref> describes a more general framework for debugging distributed programs. [Lehr 89] and [Socha 88] describe two actual integrated debugging systems for distributed programs. 2. <p> If a simulation is producing nondeterministic results, indicating an error in TWOS, the event log can be used to track down the problem. Logging and replay is a commonly used method in parallel debugging [Lin 88], <ref> [Cheung 90] </ref>, though TWOS use of the method has certain wrinkles not present in other systems. The event log is used in two ways. First, the sequential simulator can also produce an event log.
Reference: [Elshoff 88] <author> I. Elshoff, </author> <title> A Distributed Debugger For Amoeba, </title> <booktitle> ACM SIGPLAN and SIGOPS Workshop on Parallel and Distributed Debugging , May 1988. </booktitle>
Reference-contexts: This approach proved most valuable during the process of writing some of the most basic TWOS code, particularly before the system was in a state where it could work at all, as a whole. <ref> [Elshoff 88] </ref> describes a similar method used in debugging the Amoeba system. As an example of the use of the tester , sometimes a TWOS application will get stuck, failing to make progress when it should, due to some error. <p> The logs necessary to run these tools tend to be very large and the memory requirements for storing the data can sometimes prove burdensome. A similar filtering approach is used by <ref> [Elshoff 88] </ref>, and many others. This improvement will be made when time permits. 4.5 The Event Log TWOS can keep a log of committed events for a simulation.
Reference: [Emrath 88] <author> P. Emrath, D. Padua, </author> <title> Automatic Detection of Non-Determinacy in Parallel Programs, </title> <booktitle> ACM SIGPLAN and SIGOPS Workshop on Parallel and Distributed Debugging , May 1988. </booktitle>
Reference-contexts: Debugging and Determinism The value of providing deterministic results for debugging parallel and distributed systems is widely recognized [Socha 88], [Lin 88]. However, providing determinism for all runs (not just debugging replays) on a system supporting an asynchronous model of user communications is not easy <ref> [Emrath 88] </ref>. None the less, TWOS must provide deterministic results to its users on all runs [Reiher 90a], which gives the added benefit that the presence of nondeterministic results is a sure sign of an error.
Reference: [Fujimoto 90] <author> R. Fujimoto, </author> <title> Parallel Discrete Event Simulation, </title> <journal> Communications of the ACM , vol 33., </journal> <volume> no. 10, </volume> <month> Oct. 90. </month>
Reference-contexts: Several other implementations of virtual time synchronized distributed simulation systems also exist, and methods of performing distributed simulations in totally different ways have been developed <ref> [Fujimoto 90] </ref>. TWOS has been under development at the Jet Propulsion Laboratory since 1983. It has been a complete, functional system since 1986.
Reference: [Hontalas 89] <author> P. Hontalas, B. Beckman, M. Di Loreto, L. Blume, P. Reiher, K. Sturdevant, L. V. Warren, J. Wedel, F. Wieland, and D. Jefferson, </author> <title> Performance of the Colliding Pucks Simulation on the Time Warp Operating System (Part 1: Asynchronous Behavior and Sectoring, </title> <booktitle> In Proceedings of the SCS Multiconference on Distributed Simulation , Unger, </booktitle> <editor> B. and Fujimoto, R., Eds., </editor> <booktitle> Society For Computer Simulation, </booktitle> <address> San Diego, CA, </address> <year> 1989. </year>
Reference-contexts: Experience with TWOS has shown that optimistic execution can provide excellent speedup of discrete event simulation, despite fairly frequent rollbacks. TWOS has achieved speedups in excess of 40 times the speed of the same simulation performed by TWSIM <ref> [Hontalas 89] </ref>. This description of TWOS is necessarily brief, and does not cover the theory of virtual time that underlies its operation [Jefferson 85], nor many important and interesting details of its implementation [Jefferson 87].
Reference: [Jefferson 85] <author> D. Jefferson,, </author> <title> Virtual Time, </title> <journal> ACM Transactions on Programming Languages and Systems , vol. </journal> <volume> 7, no. 3, </volume> <year> 1985. </year>
Reference-contexts: TWOS has achieved speedups in excess of 40 times the speed of the same simulation performed by TWSIM [Hontalas 89]. This description of TWOS is necessarily brief, and does not cover the theory of virtual time that underlies its operation <ref> [Jefferson 85] </ref>, nor many important and interesting details of its implementation [Jefferson 87]. Several other implementations of virtual time synchronized distributed simulation systems also exist, and methods of performing distributed simulations in totally different ways have been developed [Fujimoto 90].
Reference: [Jefferson 87] <author> D. Jefferson, B. Beckman, F. Wieland, L. Blume, M. Di Loreto, P. Hontalas, P. Laroche, K. Sturdevant, J. Tupman, V. Warren, J. Wedel, H. Younger, and S. Bellenot, </author> <title> Distributed Simulation and the Time Warp Operating System, </title> <booktitle> Proceedings of the 11th Symposium on Operating System Principles, </booktitle> , <year> 1987. </year>
Reference-contexts: This description of TWOS is necessarily brief, and does not cover the theory of virtual time that underlies its operation [Jefferson 85], nor many important and interesting details of its implementation <ref> [Jefferson 87] </ref>. Several other implementations of virtual time synchronized distributed simulation systems also exist, and methods of performing distributed simulations in totally different ways have been developed [Fujimoto 90]. TWOS has been under development at the Jet Propulsion Laboratory since 1983. It has been a complete, functional system since 1986.
Reference: [Lehr 89] <author> T. Lehr, Z. Segall, D. Vrsalovic, E. Caplan, A. Chung, and C. Fineman, </author> <title> Visualizing Performance Debugging, </title> <journal> Computer , vol. </journal> <volume> 22, no. 10, </volume> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: Rather, it is a case study showing how some difficult debugging challenges were met and suggesting some general guidelines for approaching the debugging of complex parallel or distributed systems. [Cheung 90] describes a more general framework for debugging distributed programs. <ref> [Lehr 89] </ref> and [Socha 88] describe two actual integrated debugging systems for distributed programs. 2. <p> The message plot showed these broad gaps of inactivity. More recently, the message plot has shown the negative effects of paging on the Mach version of TWOS. <ref> [Lehr 89] </ref> describes a graphical tool bearing some resemblance to the progress chart. However, it does not include a concept of virtual time, so it does not show progress in virtual time versus real time. <p> And they cannot show an objects input queue, or the scheduler queue, or the object location data structures in the same simple, seamless way that tester can. Availability of a true parallel debugger, such as those described in <ref> [Lehr 89] </ref> and [Socha 88], would be a great improvement, but would still not totally replace the special TWOS tools. 5. Availability TWOS version 2.0 is available through NASAs Cosmic software distribution system. The release includes some, but not all, of the tools discussed in the previous sections.
Reference: [Lin 88] <author> C. Lin and R. LeBlanc, </author> <title> Event-Based Debugging of Object/Action Programs, </title> <booktitle> ACM SIGPLAN and SIGOPS Workshop on Parallel and Distributed Debugging , May 1988. </booktitle>
Reference-contexts: Debugging and Determinism The value of providing deterministic results for debugging parallel and distributed systems is widely recognized [Socha 88], <ref> [Lin 88] </ref>. However, providing determinism for all runs (not just debugging replays) on a system supporting an asynchronous model of user communications is not easy [Emrath 88]. <p> If a simulation is producing nondeterministic results, indicating an error in TWOS, the event log can be used to track down the problem. Logging and replay is a commonly used method in parallel debugging <ref> [Lin 88] </ref>, [Cheung 90], though TWOS use of the method has certain wrinkles not present in other systems. The event log is used in two ways. First, the sequential simulator can also produce an event log.
Reference: [Reiher 90a] <author> P. Reiher, F. Wieland, and P. Hontalas, </author> <title> Providing Determinism In the Time Warp Operating System Costs, Benefits, and Implications, </title> <booktitle> In Proceedings of the IEEE Workshop on Experimental Distributed Systems, </booktitle> <month> October </month> <year> 1990. </year>
Reference-contexts: However, providing determinism for all runs (not just debugging replays) on a system supporting an asynchronous model of user communications is not easy [Emrath 88]. None the less, TWOS must provide deterministic results to its users on all runs <ref> [Reiher 90a] </ref>, which gives the added benefit that the presence of nondeterministic results is a sure sign of an error. Many errors in both TWOS itself and its simulations have been discovered through nondeterministic results.
Reference: [Reiher 90b] <author> P. Reiher and D. Jefferson, </author> <title> Virtual Time Based Dynamic Load Management In the Time Warp Operating System, </title> <journal> Transactions of the Society for Computer Simulation, vol.7, </journal> <volume> no. 2, </volume> <month> July </month> <year> 1990. </year>
Reference-contexts: The performance problems proved to have more to do with internal handling of messages at the source and destination nodes than with any delays in getting them from one to the other. Another tool has helped in debugging TWOS dynamic load management facility <ref> [Reiher 90b] </ref>. The load manager is supposed to move load from heavily loaded nodes to lightly loaded nodes, where load is a quantity rather specific to TWOS and its optimistic method of execution.
Reference: [Segall 85] <author> Z. Segall and L. Rudolph, PIE: </author> <title> A Programming and Instrumentation Environment for Parallel Processing, </title> <journal> IEEE Software , vol. </journal> <volume> 2, no. 6, </volume> <month> Nov. </month> <year> 1985. </year>
Reference-contexts: Performance problems are often very hard to diagnose in TWOS. Unlike correctness problems, one generally cannot quickly pin down the problem to one section of the code. Debugging performance problems is a common theme in parallel processing <ref> [Segall 85] </ref>, [Socha 88]. Several TWOS tools are specifically designed to help with performance problems [Bellenot 89]. One of these is the progress chart. The progress chart is a graphical tool that plots lines on a screen for every event run during a simulations execution, both committed and uncommitted.
Reference: [Socha 88] <author> D. Socha, M. Bailey, and D. Notkin, Voyeur: </author> <title> Graphical Views of Parallel Programs, </title> <booktitle> ACM SIGPLAN and SIGOPS Workshop on Parallel and Distributed Debugging , May 1988. </booktitle> . 
Reference-contexts: Rather, it is a case study showing how some difficult debugging challenges were met and suggesting some general guidelines for approaching the debugging of complex parallel or distributed systems. [Cheung 90] describes a more general framework for debugging distributed programs. [Lehr 89] and <ref> [Socha 88] </ref> describe two actual integrated debugging systems for distributed programs. 2. <p> Debugging and Determinism The value of providing deterministic results for debugging parallel and distributed systems is widely recognized <ref> [Socha 88] </ref>, [Lin 88]. However, providing determinism for all runs (not just debugging replays) on a system supporting an asynchronous model of user communications is not easy [Emrath 88]. <p> Performance problems are often very hard to diagnose in TWOS. Unlike correctness problems, one generally cannot quickly pin down the problem to one section of the code. Debugging performance problems is a common theme in parallel processing [Segall 85], <ref> [Socha 88] </ref>. Several TWOS tools are specifically designed to help with performance problems [Bellenot 89]. One of these is the progress chart. The progress chart is a graphical tool that plots lines on a screen for every event run during a simulations execution, both committed and uncommitted. <p> And they cannot show an objects input queue, or the scheduler queue, or the object location data structures in the same simple, seamless way that tester can. Availability of a true parallel debugger, such as those described in [Lehr 89] and <ref> [Socha 88] </ref>, would be a great improvement, but would still not totally replace the special TWOS tools. 5. Availability TWOS version 2.0 is available through NASAs Cosmic software distribution system. The release includes some, but not all, of the tools discussed in the previous sections.
References-found: 14

