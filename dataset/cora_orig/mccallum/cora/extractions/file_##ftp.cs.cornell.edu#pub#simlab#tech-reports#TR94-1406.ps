URL: file://ftp.cs.cornell.edu/pub/simlab/tech-reports/TR94-1406.ps
Refering-URL: http://www.cs.cornell.edu/Info/Projects/SimLab/papers.by.project.html
Root-URL: 
Email: rick@cs.cornell.edu  
Title: Chain Models and Finite Element Analysis: An Executable Chains Formulation of Plane Stress  
Author: Richard S. Palmer 
Date: January 12, 1994  
Address: Ithaca, NY 14853  
Affiliation: Department of Computer Science Cornell University  
Abstract: Algebraic-topological k-chains defined over finite cell complexes have been proposed as a uniform computational means of representing physical objects, systems and properties. This article introduces Chains, a computer language whose basic datatypes are cells, cell complexes, and k-chains. To illustrate how Chains may be used in numerical computing, we develop a two page Chains program that completely specifies a finite element solution to plane strain, including symbolic definition of quadratic shape functions, the related "element stiffness matrices," and an algebraic-topological specification of the assembly process. In contrast to a textbook derivation of the finite element method (which it closely resembles), this program is a fully formal finite element computation, and hence is a step towards the goal of improving the process of creating software for scientific computing by raising the semantic level at which physical systems are specified.
Abstract-found: 1
Intro-found: 1
Reference: [Bjt78] <author> yvind Bjtrke. </author> <title> The finite element method as multi-terminal networks. </title> <editor> In yvind Bjtrke and Ole Immanuel Franksen, editors, </editor> <booktitle> System Structures in Engineering, </booktitle> <pages> pages 179 - 218. </pages> <address> Tapir, </address> <year> 1978. </year>
Reference-contexts: When the finite element method began to gain popularity in the 1960s, there was an interest in understanding how the topological methods described, e.g., in [Kro59] and [Pay61] were related to FEM. For instance, Bjtrke <ref> [Bjt78] </ref> compared the finite element method to electrical networks, viewing each finite element as a "component" with "terminals" which are wired together to create a network. Similarly, the finite element method has been compared to the bond graph methodology [Pay61].
Reference: [Bra66] <author> Franklin H. Branin. </author> <title> The algebraic-topological basis for network analogies and the vector calculus. </title> <booktitle> In Proceedings of the Symposium on Generalized Networks, </booktitle> <volume> volume 16, </volume> <pages> pages 453 - 491, </pages> <address> Brooklyn, New York, </address> <year> 1966. </year> <institution> Polytechnic Institute of Brooklyn. </institution>
Reference-contexts: Applications of algebraic-topological methods to distributed parameter problems, that is, problems typically modeled with partial differential equations, such as the elasticity problem addressed in this article have also been extensively investigated <ref> [Bra66, EvD74, Kro39, Kro45, Kro59, Nic25, Ton75] </ref>, mostly from a theoretical point of view, although physical analogies were used in the precomputer age to design circuits for approximating physical behavior. <p> In this case, the coefficients of U2 representing the polynomial defined over the triangle becomes completely "virtual" all coefficients are functionally derived from (proper) subface chains. In contrast, U1 uses two coefficients associated with its faces and one of its own. 3.5 Measurement and piecewise polynomials [PS94], following <ref> [Bra66, Ton75, Fra85] </ref>, described a relationship between the way a physical system is measured and the dimension p of a p-chain used to represent such a measurement mathematically.
Reference: [BS90] <author> Paul Bamberg and Schlomo Sternberg. </author> <title> A Course in Mathematics for Students of Physics. </title> <address> Cambridge, Cambridge, England, 1988,1990. </address>
Reference-contexts: either by computer or human. 1.2 Previous work 1.2.1 Previous algebraic-topological approaches Algebraic-topological approaches to systems modeling have been popular since Kirchoff, especially in the "lumped parameter" domains, roughly, those physics domains that are reasonably well modeled by time-varying discrete mathematical systems (and thus by ordinary differential equations) (see, e.g., <ref> [BS90, Ols43, PC92, Pay61] </ref>). <p> do not discuss conditions of validity here, other than to say that they are expressions that can be tested to determine whether a physical element may be applied to a particular cell. 27 languages and methodologies based on the underlying topology of physical problems [Ton75], such as electrical circuit theory <ref> [BS90] </ref>, and the bond graph methodology [Pay61].
Reference: [CME89] <author> R.D. Cook, D. S. Malkus, and Plesha M. E. </author> <title> Concepts and Applications of Finite Element Analysis. </title> <publisher> John Wiley and Sons, </publisher> <address> third edition, </address> <year> 1989. </year>
Reference-contexts: Most "mathematical" descriptions of the finite element method concentrate on the process of transforming the continuum descriptions of physical behavior into a discrete linear system <ref> [CME89, ZL89, Str88] </ref>. Rather than repeat such a derivation in this article, we assume the reader is familiar with the finite element method (FEM), and with the standard methods of deriving finite elements (e.g., variational and weighted residual methods). <p> These mathematical objects (scalars, vectors, polynomials, etc.) will be represented with algebraic-topological chains. Here we focus on the 2D quadratic triangular element, a finite element well suited for representing linear elasticity in complex planar regions <ref> [CME89] </ref>. It should be apparent from this derivation 16 how Chains can be used to create other kinds of piecewise polynomial. The interested reader may wish to compare this derivation with that of [CME89]. <p> 2D quadratic triangular element, a finite element well suited for representing linear elasticity in complex planar regions <ref> [CME89] </ref>. It should be apparent from this derivation 16 how Chains can be used to create other kinds of piecewise polynomial. The interested reader may wish to compare this derivation with that of [CME89]. We first define the prototype cell required in (1), the definition of a physical element (Definition 2.2). In this case, we choose a 2-simplex, i.e., a triangle, having abstract vertices V0, V1, and V2.
Reference: [DBMS79] <author> J. Dongarra, J. R. Bunch, Cleve B. Moler, and G. W. Stewart. </author> <title> LINPACK User's Guide. </title> <publisher> SIAM Publications, </publisher> <address> Philadelphia, PA, </address> <year> 1979. </year>
Reference-contexts: The system generates optimized C, FORTRAN, and Common Lisp code, and examples to date have used numerical libraries including ODEPACK [Hin83],SPARSPAK [GL81], LINPACK <ref> [DBMS79] </ref>, and MEXX [Lub90, LNPE92]. The software architecture of the current Chains prototype described in this article is illustrated in Figure 2.
Reference: [EvD74] <author> F. J. Evans and J. J. van Dixhoorn. </author> <title> Towards more physical structure in systems theory. </title> <editor> In F. J. Evans and J. J. van Dixhoorn, editors, </editor> <booktitle> Physical Structure in Systems Theory, </booktitle> <pages> pages 1 - 15, </pages> <address> London, 1974. </address> <publisher> Academic Press. </publisher>
Reference-contexts: Applications of algebraic-topological methods to distributed parameter problems, that is, problems typically modeled with partial differential equations, such as the elasticity problem addressed in this article have also been extensively investigated <ref> [Bra66, EvD74, Kro39, Kro45, Kro59, Nic25, Ton75] </ref>, mostly from a theoretical point of view, although physical analogies were used in the precomputer age to design circuits for approximating physical behavior.
Reference: [Fra85] <author> O. I. Franksen. </author> <title> The nature of data from measurements to systems. </title> <journal> Bit, </journal> <volume> 25 </volume> <pages> 25-50, </pages> <year> 1985. </year>
Reference-contexts: In this case, the coefficients of U2 representing the polynomial defined over the triangle becomes completely "virtual" all coefficients are functionally derived from (proper) subface chains. In contrast, U1 uses two coefficients associated with its faces and one of its own. 3.5 Measurement and piecewise polynomials [PS94], following <ref> [Bra66, Ton75, Fra85] </ref>, described a relationship between the way a physical system is measured and the dimension p of a p-chain used to represent such a measurement mathematically.
Reference: [GL81] <author> Alan George and Joseph W. Liu. </author> <title> Computer Solution of Large Sparse Positive Definite Systems. </title> <publisher> Prentice-Hall, </publisher> <year> 1981. </year>
Reference-contexts: Chains uses Mathematica [Wol91] and Weyl [Zip89] for symbolic computations (for instance to compute with chains having polynomials as coefficients), as well as FORTRAN libraries for numerical routines. The system generates optimized C, FORTRAN, and Common Lisp code, and examples to date have used numerical libraries including ODEPACK [Hin83],SPARSPAK <ref> [GL81] </ref>, LINPACK [DBMS79], and MEXX [Lub90, LNPE92]. The software architecture of the current Chains prototype described in this article is illustrated in Figure 2. <p> Currently, the Chains environment contains a few linear systems solvers. For the sample at hand, which is SPD (sparse positive definite) we have used two classes of methods. The first is the direct sparse solver SPARSPAK <ref> [GL81] </ref>.
Reference: [Hin83] <author> A. C. Hindmarsh. Odepack, </author> <title> a systematized collection of ODE solvers. </title> <editor> In R. S. Stepleman and et al., editors, </editor> <booktitle> Scientific Computing, </booktitle> <pages> pages 55-64. </pages> <publisher> North-Holland, Publ., </publisher> <address> Amster-dam, </address> <year> 1983. </year> <month> 37 </month>
Reference: [HY61] <author> John G. Hocking and Gail S. Young. </author> <title> Topology. </title> <publisher> Dover, </publisher> <address> New York, </address> <year> 1961. </year>
Reference-contexts: Hence most implementation descriptions apply only to simplices, as opposed to more general cells. An n-simplex is an n-dimensional generalization of the triangle (a triangle is a 2-simplex, while a tetrahedron is a 3-simplex). There are various possible definitions of embedded and abstract n-simplices <ref> [HY61, Mun84] </ref>. 9 two "sets" are homeomorphic. The bottom row illustrates, from left to right, a 0-simplex, a 0-ball, and a 0-cube (all of which are homeomorphic to a point). Both n-simplices and n-cubes may be represented by an ordered list of their (possibly unembedded) vertices (their "corner points").
Reference: [Jac74] <author> Nathan Jacobson. </author> <title> Basic Algebra. </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <year> 1974. </year>
Reference: [Kro39] <author> Gabriel Kron. </author> <title> Tensor analysis of networks. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1939. </year>
Reference-contexts: Applications of algebraic-topological methods to distributed parameter problems, that is, problems typically modeled with partial differential equations, such as the elasticity problem addressed in this article have also been extensively investigated <ref> [Bra66, EvD74, Kro39, Kro45, Kro59, Nic25, Ton75] </ref>, mostly from a theoretical point of view, although physical analogies were used in the precomputer age to design circuits for approximating physical behavior.
Reference: [Kro45] <author> Gabriel Kron. </author> <title> Numerical solution of ordinary and partial differential equations by means of equivalent circuits. </title> <journal> Journal of Applied Physics, </journal> <volume> 126 </volume> <pages> 172-186, </pages> <month> March </month> <year> 1945. </year>
Reference-contexts: Applications of algebraic-topological methods to distributed parameter problems, that is, problems typically modeled with partial differential equations, such as the elasticity problem addressed in this article have also been extensively investigated <ref> [Bra66, EvD74, Kro39, Kro45, Kro59, Nic25, Ton75] </ref>, mostly from a theoretical point of view, although physical analogies were used in the precomputer age to design circuits for approximating physical behavior.
Reference: [Kro59] <author> Gabriel Kron. </author> <title> Diakoptics The Piecewise Solution of Large-Scale Systems. </title> <journal> The Electrical Journal, London, </journal> <pages> 1957-1959. </pages> <note> A series of 20 articles beginning June 7, </note> <year> 1957. </year>
Reference-contexts: Applications of algebraic-topological methods to distributed parameter problems, that is, problems typically modeled with partial differential equations, such as the elasticity problem addressed in this article have also been extensively investigated <ref> [Bra66, EvD74, Kro39, Kro45, Kro59, Nic25, Ton75] </ref>, mostly from a theoretical point of view, although physical analogies were used in the precomputer age to design circuits for approximating physical behavior. <p> When the finite element method began to gain popularity in the 1960s, there was an interest in understanding how the topological methods described, e.g., in <ref> [Kro59] </ref> and [Pay61] were related to FEM. For instance, Bjtrke [Bjt78] compared the finite element method to electrical networks, viewing each finite element as a "component" with "terminals" which are wired together to create a network. Similarly, the finite element method has been compared to the bond graph methodology [Pay61].
Reference: [LL86] <author> L. D. Landau and E. M. Lifshitz. </author> <title> Theory of elasticity. </title> <publisher> Pergamon Press, </publisher> <address> New York, </address> <note> 3rd english edition, </note> <year> 1986. </year>
Reference-contexts: The continuum model of elasticity <ref> [LL86] </ref> expresses physical behavior in terms of four basic quantities: displacement u, strain ~ , force f, and stress . The strain tensor defines the local deformation properties of a body at a point, while the stress tensor represents forces acting through infinitesimal planes passing through a point.
Reference: [LNPE92] <author> Ch. Lubich, U. Nowak, U. Poehle, and Ch. Engstler. </author> <title> Mexx numerical software for the integration of constraint mechanical systems. </title> <type> Technical Report SC 92-12, </type> <institution> Konrad-Zuse-Zentrum fuer Informationstechnik Berlin, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: The system generates optimized C, FORTRAN, and Common Lisp code, and examples to date have used numerical libraries including ODEPACK [Hin83],SPARSPAK [GL81], LINPACK [DBMS79], and MEXX <ref> [Lub90, LNPE92] </ref>. The software architecture of the current Chains prototype described in this article is illustrated in Figure 2.
Reference: [Lub90] <author> Ch. Lubich. </author> <title> Extrapolation integrators for constrained multibody systems. </title> <type> Report, </type> <institution> Univ. </institution> <address> Innsbruck, </address> <month> September </month> <year> 1990. </year>
Reference-contexts: The system generates optimized C, FORTRAN, and Common Lisp code, and examples to date have used numerical libraries including ODEPACK [Hin83],SPARSPAK [GL81], LINPACK [DBMS79], and MEXX <ref> [Lub90, LNPE92] </ref>. The software architecture of the current Chains prototype described in this article is illustrated in Figure 2.
Reference: [Mac92] <author> R. I. Mackie. </author> <title> Object oriented programming of the finite element method. </title> <journal> International Journal for Numerical Methods in Engineering, </journal> <volume> 35(2) </volume> <pages> 425-436, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: common to physical problems may be exploited by using the Chains language to create executable code. 3 1.2.2 Object oriented finite element analysis Recently, the popularity of object oriented programming, and in particular, the C++ programming language, has sparked an interest in applying object oriented techniques to finite element problems <ref> [Mac92, OTAY92, RK93] </ref>. Indeed there is a close relationship between the chain models methodology and object oriented methods. In particular, both approaches focus on systematically decomposing complex systems into simpler interacting parts.
Reference: [Mun84] <author> James R. Munkres. </author> <title> Elements of Algebraic Topology. </title> <publisher> Addison-Wesley, </publisher> <address> New York, </address> <year> 1984. </year>
Reference-contexts: Hence most implementation descriptions apply only to simplices, as opposed to more general cells. An n-simplex is an n-dimensional generalization of the triangle (a triangle is a 2-simplex, while a tetrahedron is a 3-simplex). There are various possible definitions of embedded and abstract n-simplices <ref> [HY61, Mun84] </ref>. 9 two "sets" are homeomorphic. The bottom row illustrates, from left to right, a 0-simplex, a 0-ball, and a 0-cube (all of which are homeomorphic to a point). Both n-simplices and n-cubes may be represented by an ordered list of their (possibly unembedded) vertices (their "corner points"). <p> We may partition the n! orderings of these vertices into two classes, those that are even permutations of some reference ordering (which we will view as positively oriented), and those that are odd permutations (which we will view as negatively oriented) <ref> [Mun84] </ref>. <p> It is standard to identify a cell c and the formal value 1fic, where 1 is the multiplicative identity element in G <ref> [Mun84] </ref>, and in doing so we find that expression above defines a chain set F, with coefficients in &lt; 2 , which represents the sum of the surfaces forces (resolved to the nodes by the basis construction, Representation 5) on the nodes (i.e., virtual 0-cells) of K. <p> Definition A.3 Two sets S 1 and S 2 are homeomorphic if there is a continuous, invertible, 1-1 and onto function h mapping S 1 to S 2 : h : S 1 ! S 2 <ref> [Mun84] </ref>. Homeomorphism defines the concept of "topologically equivalent," the class of all sets that are homeomorphic to some "reference set," such as the n-ball B n : Definition A.4 An n-cell c is a set that is homeomorphic to a n-ball B n .
Reference: [Nic25] <author> C. A. Nickle. </author> <title> Oscillographic solution of electro-mechanical systems. </title> <journal> Transactions of the American Institute of Electrical Engineers, </journal> <volume> 44 </volume> <pages> 844-856, </pages> <year> 1925. </year>
Reference-contexts: Applications of algebraic-topological methods to distributed parameter problems, that is, problems typically modeled with partial differential equations, such as the elasticity problem addressed in this article have also been extensively investigated <ref> [Bra66, EvD74, Kro39, Kro45, Kro59, Nic25, Ton75] </ref>, mostly from a theoretical point of view, although physical analogies were used in the precomputer age to design circuits for approximating physical behavior.
Reference: [Ols43] <author> H. F. Olson. </author> <title> Dynamical Analogies. </title> <publisher> Van Nostrand, Princeton, </publisher> <year> 1943. </year>
Reference-contexts: either by computer or human. 1.2 Previous work 1.2.1 Previous algebraic-topological approaches Algebraic-topological approaches to systems modeling have been popular since Kirchoff, especially in the "lumped parameter" domains, roughly, those physics domains that are reasonably well modeled by time-varying discrete mathematical systems (and thus by ordinary differential equations) (see, e.g., <ref> [BS90, Ols43, PC92, Pay61] </ref>).
Reference: [OTAY92] <author> D. Ouazar, A.R.D. Thorley, B. Akdi, and M Yzzogh. </author> <title> Finite element object oriented approach for fluid transients analysis. </title> <booktitle> In Fourth International Conference on Hydraulic Engineering Software - HYDROSOFT/92, </booktitle> <pages> pages 539-548, </pages> <address> Valencia, Spain, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: common to physical problems may be exploited by using the Chains language to create executable code. 3 1.2.2 Object oriented finite element analysis Recently, the popularity of object oriented programming, and in particular, the C++ programming language, has sparked an interest in applying object oriented techniques to finite element problems <ref> [Mac92, OTAY92, RK93] </ref>. Indeed there is a close relationship between the chain models methodology and object oriented methods. In particular, both approaches focus on systematically decomposing complex systems into simpler interacting parts.
Reference: [Pay61] <author> Henry M. Paynter. </author> <title> Analysis and Design of Engineering Systems. </title> <publisher> The M.I.T. Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1961. </year>
Reference-contexts: either by computer or human. 1.2 Previous work 1.2.1 Previous algebraic-topological approaches Algebraic-topological approaches to systems modeling have been popular since Kirchoff, especially in the "lumped parameter" domains, roughly, those physics domains that are reasonably well modeled by time-varying discrete mathematical systems (and thus by ordinary differential equations) (see, e.g., <ref> [BS90, Ols43, PC92, Pay61] </ref>). <p> When the finite element method began to gain popularity in the 1960s, there was an interest in understanding how the topological methods described, e.g., in [Kro59] and <ref> [Pay61] </ref> were related to FEM. For instance, Bjtrke [Bjt78] compared the finite element method to electrical networks, viewing each finite element as a "component" with "terminals" which are wired together to create a network. Similarly, the finite element method has been compared to the bond graph methodology [Pay61]. <p> in [Kro59] and <ref> [Pay61] </ref> were related to FEM. For instance, Bjtrke [Bjt78] compared the finite element method to electrical networks, viewing each finite element as a "component" with "terminals" which are wired together to create a network. Similarly, the finite element method has been compared to the bond graph methodology [Pay61]. The approach described in this article builds on the work described in the references above, but in contrast to previous work, algebraic-topological structure of physical problems is placed in the context of computer languages and systems. <p> here, other than to say that they are expressions that can be tested to determine whether a physical element may be applied to a particular cell. 27 languages and methodologies based on the underlying topology of physical problems [Ton75], such as electrical circuit theory [BS90], and the bond graph methodology <ref> [Pay61] </ref>.
Reference: [PC92] <author> Richard S. Palmer and James F. Cremer. Simlab: </author> <title> Automatically creating physical systems simulators. </title> <booktitle> In The 1992 ASME Winter Annual Meeting, </booktitle> <year> 1992. </year>
Reference-contexts: either by computer or human. 1.2 Previous work 1.2.1 Previous algebraic-topological approaches Algebraic-topological approaches to systems modeling have been popular since Kirchoff, especially in the "lumped parameter" domains, roughly, those physics domains that are reasonably well modeled by time-varying discrete mathematical systems (and thus by ordinary differential equations) (see, e.g., <ref> [BS90, Ols43, PC92, Pay61] </ref>). <p> The software architecture of the current Chains prototype described in this article is illustrated in Figure 2. The general goal of the Chains (as well as its predecessor, SimLab <ref> [PC92] </ref>) has been to raise the semantic level at which physical systems analyses may be "programmed" while maximizing 6 7 performance of the resulting programs. For this reason we have partitioned the various tasks and assigned them to the computing subsystems most appropriate to their requirements.
Reference: [PS94] <author> Richard S. Palmer and Vadim Shapiro. </author> <title> Chain models of physical behavior for engineering analysis and design. </title> <booktitle> Research in Engineering Design, </booktitle> <month> Spring </month> <year> 1994. </year>
Reference-contexts: 1 Introduction The chain models <ref> [PS94] </ref> formalism for representing physical systems has been proposed as a means of unifying the analysis of existing systems as well as the synthesis of new ones. <p> For physical systems, we desire a language that defines a map from some set of strings to (computer representations of mathematical models of) physical systems. We propose Chains as such a language, and the chain models formalism described in <ref> [PS94] </ref> as the target semantics (i.e., computer representations and mathematical models) for the Chains language. <p> volume" and "finite element," a language based on the concepts of algebraic-topology has the potential to provide a powerful, yet intuitive means of formally expressing complex engineering systems and computations on them. 2 Chain models and physical elements Chain models and physical elements are introduced and described in detail in <ref> [PS94] </ref>, which also describes the motivation and several potential uses that are beyond the scope of this article. <p> For this reason, we shall give a brief, informal description of the mathematical components of a chain model: cells, complexes, and chains, which comprise the main tools we use to represent physical systems. The reader is referred to <ref> [PS94] </ref> for more detail. <p> In this case, the coefficients of U2 representing the polynomial defined over the triangle becomes completely "virtual" all coefficients are functionally derived from (proper) subface chains. In contrast, U1 uses two coefficients associated with its faces and one of its own. 3.5 Measurement and piecewise polynomials <ref> [PS94] </ref>, following [Bra66, Ton75, Fra85], described a relationship between the way a physical system is measured and the dimension p of a p-chain used to represent such a measurement mathematically.
Reference: [RK93] <author> C. Rihaczek and B. Kroplin. </author> <title> Object oriented design of finite element software for transient, non-linear coupling problems. </title> <booktitle> In Proceedings of the 5th International Conference on Computing in Civil and Building Engineering, </booktitle> <pages> pages 545-552. </pages> <address> ACSE, Anaheim, CA, USA, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: common to physical problems may be exploited by using the Chains language to create executable code. 3 1.2.2 Object oriented finite element analysis Recently, the popularity of object oriented programming, and in particular, the C++ programming language, has sparked an interest in applying object oriented techniques to finite element problems <ref> [Mac92, OTAY92, RK93] </ref>. Indeed there is a close relationship between the chain models methodology and object oriented methods. In particular, both approaches focus on systematically decomposing complex systems into simpler interacting parts.
Reference: [RV81] <author> A. A. G. Requicha and H. B. Voelcker. </author> <title> An introduction to geometric modeling and its applications in mechanical design and production. </title> <editor> In J. T. Tou, editor, </editor> <booktitle> Advances in Information Systems Science, </booktitle> <volume> Vol. 8. </volume> <publisher> Plenum Publishing, </publisher> <year> 1981. </year> <month> 38 </month>
Reference-contexts: The best analog to a computer language for physics is the "language" of geometric modeling. Geometric modelers are, in essence, maps from strings in some language (e.g., CSG <ref> [RV81] </ref>) to (computer representations of mathematical models of) geometric shapes. For physical systems, we desire a language that defines a map from some set of strings to (computer representations of mathematical models of) physical systems.
Reference: [Ste90] <author> Guy L. Steele, Jr. </author> <title> Common Lisp, the language. </title> <note> Digital Press, second edition, </note> <year> 1990. </year>
Reference-contexts: For this reason, we choose to view the concrete syntax as an "inessential" part of a computer language, to be modified as desired to address different communities. In particular, Chains is currently implemented with two syntaxes: Common Lisp <ref> [Ste90] </ref> style sexp syntax, and Mathematica [Wol91] style syntax. Expressions in either syntax are translated to the internal Chains representation, and computed results can likewise be viewed in either syntax. The presentation syntax for Chains used in this article is that of Mathematica.
Reference: [Str88] <author> Gilbert Strang. </author> <title> Linear Algebra and its Applications. </title> <publisher> Harcourt Brace Jovanovitch, </publisher> <year> 1988. </year>
Reference-contexts: As Strang <ref> [Str88] </ref> states, "... the finite element method ... has made it possible to use more of the power of the computer | in constructing a discrete approximation, solving it, and displaying the results | than any other technique in scientific computation." As we shall see, the chain models methodology is, (among <p> Most "mathematical" descriptions of the finite element method concentrate on the process of transforming the continuum descriptions of physical behavior into a discrete linear system <ref> [CME89, ZL89, Str88] </ref>. Rather than repeat such a derivation in this article, we assume the reader is familiar with the finite element method (FEM), and with the standard methods of deriving finite elements (e.g., variational and weighted residual methods).
Reference: [Ton75] <author> Enzo Tonti. </author> <title> On the Formal Structure of Physical Theories. </title> <institution> Istituto Di Matematica Del Politecnico Di Milano, Milan, </institution> <year> 1975. </year>
Reference-contexts: Applications of algebraic-topological methods to distributed parameter problems, that is, problems typically modeled with partial differential equations, such as the elasticity problem addressed in this article have also been extensively investigated <ref> [Bra66, EvD74, Kro39, Kro45, Kro59, Nic25, Ton75] </ref>, mostly from a theoretical point of view, although physical analogies were used in the precomputer age to design circuits for approximating physical behavior. <p> In this case, the coefficients of U2 representing the polynomial defined over the triangle becomes completely "virtual" all coefficients are functionally derived from (proper) subface chains. In contrast, U1 uses two coefficients associated with its faces and one of its own. 3.5 Measurement and piecewise polynomials [PS94], following <ref> [Bra66, Ton75, Fra85] </ref>, described a relationship between the way a physical system is measured and the dimension p of a p-chain used to represent such a measurement mathematically. <p> We do not discuss conditions of validity here, other than to say that they are expressions that can be tested to determine whether a physical element may be applied to a particular cell. 27 languages and methodologies based on the underlying topology of physical problems <ref> [Ton75] </ref>, such as electrical circuit theory [BS90], and the bond graph methodology [Pay61].
Reference: [Wol91] <author> Stephen Wolfram. </author> <title> Mathematica: a system for doing mathmatics by computer. </title> <publisher> Addison-Wesley, </publisher> <address> second edition, </address> <year> 1991. </year>
Reference-contexts: Chains uses Mathematica <ref> [Wol91] </ref> and Weyl [Zip89] for symbolic computations (for instance to compute with chains having polynomials as coefficients), as well as FORTRAN libraries for numerical routines. <p> For this reason, we choose to view the concrete syntax as an "inessential" part of a computer language, to be modified as desired to address different communities. In particular, Chains is currently implemented with two syntaxes: Common Lisp [Ste90] style sexp syntax, and Mathematica <ref> [Wol91] </ref> style syntax. Expressions in either syntax are translated to the internal Chains representation, and computed results can likewise be viewed in either syntax. The presentation syntax for Chains used in this article is that of Mathematica. As an example 1 , the following two forms are equivalent.
Reference: [Zip89] <author> Richard E. Zippel. </author> <title> The weyl computer algebra substrate. </title> <note> working paper, </note> <month> July </month> <year> 1989. </year>
Reference-contexts: Chains uses Mathematica [Wol91] and Weyl <ref> [Zip89] </ref> for symbolic computations (for instance to compute with chains having polynomials as coefficients), as well as FORTRAN libraries for numerical routines. The system generates optimized C, FORTRAN, and Common Lisp code, and examples to date have used numerical libraries including ODEPACK [Hin83],SPARSPAK [GL81], LINPACK [DBMS79], and MEXX [Lub90, LNPE92].
Reference: [ZL89] <author> O. C. Zienkiewicz and Taylor R. L. </author> <title> The Finite Element Method. </title> <publisher> McGraw-Hill, </publisher> <address> fourth edition, </address> <year> 1989. </year> <month> 39 </month>
Reference-contexts: Most "mathematical" descriptions of the finite element method concentrate on the process of transforming the continuum descriptions of physical behavior into a discrete linear system <ref> [CME89, ZL89, Str88] </ref>. Rather than repeat such a derivation in this article, we assume the reader is familiar with the finite element method (FEM), and with the standard methods of deriving finite elements (e.g., variational and weighted residual methods).
References-found: 33

