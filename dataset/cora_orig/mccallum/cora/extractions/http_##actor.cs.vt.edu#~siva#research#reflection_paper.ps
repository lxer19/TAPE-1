URL: http://actor.cs.vt.edu/~siva/research/reflection_paper.ps
Refering-URL: http://csgrad.cs.vt.edu/~siva/publications.html
Root-URL: http://www.cs.vt.edu
Email: E-mail: fsiva,kafurag@cs.vt.edu  
Phone: Phone: (540) 231-6931, Fax: (540) 231-6075  
Title: Using Reflection for Implementing ICOM, An Interoperable Common Object Model  
Author: Siva Challa and Dennis Kafura 
Address: McBryde Hall, Virginia Tech Blacksburg, VA 24061-0106  
Affiliation: Department of Computer Science  
Abstract: Reuse of already developed object-oriented software components is reduced when software is written in different object-oriented languages, or when it is not easy to relocate the software components from one machine to another machine. Software development in a distributed and heterogeneous environment is a solution to this problem. Several common object models have been defined for software development in a distributed and heterogeneous environment. Most of the existing common object models do not agree upon a common set of object-oriented features. These models are weak (i.e., they have only a modest subset of object-oriented features) because they support both object-oriented and non object-oriented languages and mapping of the model into non object-oriented languages is a complex problem. In this paper an interoperable common object model (ICOM) that supports statically typed object-oriented languages is presented. The ICOM model has an extensive set of object-oriented features along with a framework that uses reflection techniques to support the model. The architecture of ICOM framework is described and a detailed account on how reflection is used is given. A prototype involving dynamic method binding feature is explained in detail.
Abstract-found: 1
Intro-found: 1
Reference: [Agha86] <author> Gul A. Agha, </author> <title> ACTORS: A Model of Concurrent Computation in Distributed Systems, Using Reflection for Implementing ICOM 13 The MIT Press, </title> <address> Cambridge, Massachusetts, </address> <year> 1986. </year>
Reference: [Atta89] <author> Guiseppe Attardi, Cinzia Bonini, Maria Rosaria Boscotrecase, Tito Flagella, and Mauro Gaspari, </author> <title> Metalevel Programming in CLOS, </title> <booktitle> ECOOP 89, </booktitle> <month> July, </month> <year> 1989, </year> <pages> pp 243-256. </pages>
Reference: [Broc94] <author> K. Brockschmidt, </author> <title> Inside OLE 2, </title> <publisher> Microsoft Press, </publisher> <address> Redmond, </address> <year> 1994. </year>
Reference-contexts: Most of the existing object-oriented software is developed in different object-oriented languages, since there is no universal object-oriented language for software development. To integrate the software components developed in different languages, several common object models have been defined [Som93] [Omg91] [Open93] [Mano93] <ref> [Broc94] </ref>. A typical common object model is defined by the features contained in an Interface Definition Language (IDL). The object model defined by the IDL can be used for interoperability of components from different languages. <p> When an invocation is received by the server, the metaclass intercepts the operation invocation and sends appropriate message to the server object. 3.1 Core Set of Features of ICOM Among the existing common object models [Omg91] [Som93] [Cutt93] <ref> [Broc94] </ref>, there is no agreement upon a common set of object-oriented features. The object model of CORBA takes a common denominator approach to find a common set of features.
Reference: [Chal94] <author> Siva Challa, </author> <title> Towards an Interoperable, Reflective Common Object Model for Statically Typed Object-Oriented Languages, </title> <booktitle> OOPSLA '94 Workshop on Multi-Language Object Models, </booktitle> <address> Portland, Oregon, </address> <month> October 24, </month> <year> 1994. </year>
Reference-contexts: The object model defined by the IDL can be used for interoperability of components from different languages. Current object-oriented systems for interoperability and component-based reuse employ object models that are weakened by the attempt to provide accessibility from too broad a domain of programming languages <ref> [Chal94] </ref>. These common denominator models are limited: they support only a subset of object oriented features because mapping of a more complete object model into a non-object oriented language is not manageable.
Reference: [Chib93] <author> Shigeru Chiba, </author> <title> Open C++ Release 1.2 Programmer's Guide, </title> <type> Technical Report no. 93-3, </type> <institution> University of Tokyo, </institution> <year> 1993. </year>
Reference-contexts: The prototype is different from the existing systems in the following ways. Programming conventions such as using directives in comments <ref> [Chib93] </ref> are not required. The prototype uses a combination of metaclass and metacommunication approaches whereas the existing systems use either metaclass or metaobject approaches.
Reference: [Cutt93] <author> Doug Cutting, Bill Janssen, Mike Spreitzer and Farrel Wymore, </author> <title> ILU Reference Manual, </title> <institution> Xerox Corporation, Palo Alto, </institution> <year> 1993. </year>
Reference-contexts: When an invocation is received by the server, the metaclass intercepts the operation invocation and sends appropriate message to the server object. 3.1 Core Set of Features of ICOM Among the existing common object models [Omg91] [Som93] <ref> [Cutt93] </ref> [Broc94], there is no agreement upon a common set of object-oriented features. The object model of CORBA takes a common denominator approach to find a common set of features.
Reference: [Ferb89] <author> Jacques Ferber, </author> <title> Computational Reflection in Class Based Object Oriented Languages, </title> <booktitle> OOPSLA '89 Proceedings, </booktitle> <month> October, </month> <year> 1989, </year> <pages> pp 317-326. </pages>
Reference-contexts: A framework that supports the model in a distributed heterogeneous environment is presented. Uniform mapping techniques are used to map the model into object-oriented languages. For this purpose reflection techniques <ref> [Ferb89] </ref> [Maes87] [Kicz91] are used. These techniques help eliminate minor semantic differences between similar features of the model and the language. Reflection is also used to map the features that are not present in the languages onto the languages. <p> Object-Oriented Reification is the representation of the specific aspects of an object-oriented program as objects within that program. There are two approaches to object-oriented reflection: the metaclass approach and the metaobject approach <ref> [Ferb89] </ref>. In the context of distributed and heterogeneous environment a third approach metacommunication [Ferb89] can be used. In the metaclass approach, the class of an object is considered as its metaobject. Metaclasses are metaobjects of classes. <p> Object-Oriented Reification is the representation of the specific aspects of an object-oriented program as objects within that program. There are two approaches to object-oriented reflection: the metaclass approach and the metaobject approach <ref> [Ferb89] </ref>. In the context of distributed and heterogeneous environment a third approach metacommunication [Ferb89] can be used. In the metaclass approach, the class of an object is considered as its metaobject. Metaclasses are metaobjects of classes. Meta-classes can have metaobjects for themselves, thus forming an infinite reflective tower [Maes87] that is normally terminated by defining a root metaclass which is metaobject of itself.
Reference: [Java95] <institution> The Java Language Specification, Sun Microsystems, </institution> <address> CA, </address> <year> 1995. </year>
Reference-contexts: ICOM model concentrates on statically typed object oriented languages. The languages selected are C++ [Stro94], Modula-3 [Nels90] and Java <ref> [Java95] </ref>.
Reference: [Kafu92] <author> Dennis Kafura and Manibrata Mukherji and Greg Lavender, </author> <title> ACT++: A Class Library for Concurrent Programming in C++ Using Actors, </title> <journal> Journal of Object-Oriented Programming, </journal> <month> October, </month> <year> 1993, </year> <pages> pp 47-62. </pages>
Reference: [Kicz91] <author> Gregor Kiczales, James des Rivieres, and Ganiel G Bobrow, </author> <title> The Art of the Metaobject Protocol, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: A framework that supports the model in a distributed heterogeneous environment is presented. Uniform mapping techniques are used to map the model into object-oriented languages. For this purpose reflection techniques [Ferb89] [Maes87] <ref> [Kicz91] </ref> are used. These techniques help eliminate minor semantic differences between similar features of the model and the language. Reflection is also used to map the features that are not present in the languages onto the languages. Statically typed object-oriented languages are frequently used in building systems for interoperability.
Reference: [Kons93] <author> Dimitri Konstantas, </author> <title> Object Oriented Interoperability, Visual Objects, </title> <editor> D. Tsichritzis (Ed.), </editor> <address> University of Geneva, </address> <year> 1993. </year>
Reference: [Malh93] <author> Jawahar Malhotra, </author> <title> Dynamic Extensibility in a Statically-Compiled Object-Oriented Language, Object Technologies for Advanced Software, </title> <month> November, </month> <year> 1993, </year> <pages> pp 297-314. </pages>
Reference: [Mano93] <author> Frank Manola and Sandra Heiler, </author> <title> A "RISC" Object Model for Object System Interop-eration: Concepts and Appl ications, Document No. </title> <institution> TR-0231-08-93-165, GTE Laboratories Inc., Waltham, Massachusetts, </institution> <month> December, </month> <year> 1993. </year>
Reference-contexts: Most of the existing object-oriented software is developed in different object-oriented languages, since there is no universal object-oriented language for software development. To integrate the software components developed in different languages, several common object models have been defined [Som93] [Omg91] [Open93] <ref> [Mano93] </ref> [Broc94]. A typical common object model is defined by the features contained in an Interface Definition Language (IDL). The object model defined by the IDL can be used for interoperability of components from different languages.
Reference: [Mano94] <editor> X3H7 Object Model Features Matrix, Frank Manola (Editor), x3h7-93-007v8, </editor> <address> Waltham, Massachusetts, </address> <month> May, </month> <year> 1994. </year>
Reference: [Maes87] <editor> Pattie Maes, </editor> <title> Concepts and Experiments in Computational Reflection, </title> <booktitle> OOPSLA '87 Proceedings, </booktitle> <month> October, </month> <year> 1987, </year> <pages> pp 147-155. </pages> <note> Using Reflection for Implementing ICOM 14 </note>
Reference-contexts: A framework that supports the model in a distributed heterogeneous environment is presented. Uniform mapping techniques are used to map the model into object-oriented languages. For this purpose reflection techniques [Ferb89] <ref> [Maes87] </ref> [Kicz91] are used. These techniques help eliminate minor semantic differences between similar features of the model and the language. Reflection is also used to map the features that are not present in the languages onto the languages. Statically typed object-oriented languages are frequently used in building systems for interoperability. <p> The client code should be parsed with the IDL translator, compiled with the language compiler and linked with the stub code generated by the initial invocation of the IDL translator. 3 Use of Reflection Extending the definitions of reflection and reification <ref> [Maes87] </ref>, object-oriented reflection and object-oriented reification with regard to object-oriented programming in a distributed and heterogeneous environment are defined. Object-oriented reflection is defined as the ability of an object-oriented system to make its own object model's features the subject (or domain) of its computation in a causally connected way. <p> In the context of distributed and heterogeneous environment a third approach metacommunication [Ferb89] can be used. In the metaclass approach, the class of an object is considered as its metaobject. Metaclasses are metaobjects of classes. Meta-classes can have metaobjects for themselves, thus forming an infinite reflective tower <ref> [Maes87] </ref> that is normally terminated by defining a root metaclass which is metaobject of itself.
Reference: [Nels90] <editor> Greg Nelson (Editor), </editor> <title> Systems Programming with Modula-3, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1991. </year>
Reference-contexts: Static typing offers both a degree of safety to applications and is critical in defining the interfaces of remote objects and the data that is exchanged between client and server objects. ICOM model concentrates on statically typed object oriented languages. The languages selected are C++ [Stro94], Modula-3 <ref> [Nels90] </ref> and Java [Java95].
Reference: [Omg91] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification OMG Document Number 91.12.1, </title> <journal> Rev. </journal> <volume> 1.1, </volume> <year> 1991. </year>
Reference-contexts: Most of the existing object-oriented software is developed in different object-oriented languages, since there is no universal object-oriented language for software development. To integrate the software components developed in different languages, several common object models have been defined [Som93] <ref> [Omg91] </ref> [Open93] [Mano93] [Broc94]. A typical common object model is defined by the features contained in an Interface Definition Language (IDL). The object model defined by the IDL can be used for interoperability of components from different languages. <p> These common denominator models are limited: they support only a subset of object oriented features because mapping of a more complete object model into a non-object oriented language is not manageable. For example, method overloading is not provided in Object Management Group's (OMG) Common Object Request Broker Architecture (CORBA) <ref> [Omg91] </ref> since dealing with overloaded names is too difficult or very awkward to handle in typical non-object oriented languages. Powerful features missing from this and many other models include: parametric polymorphism and concurrency. <p> When an invocation is received by the server, the metaclass intercepts the operation invocation and sends appropriate message to the server object. 3.1 Core Set of Features of ICOM Among the existing common object models <ref> [Omg91] </ref> [Som93] [Cutt93] [Broc94], there is no agreement upon a common set of object-oriented features. The object model of CORBA takes a common denominator approach to find a common set of features.
Reference: [Open93] <institution> Reference Model for Open Distributed Processing, WG7 N. 885, International Standards Organization, New South Wales, Australia, </institution> <month> November, </month> <year> 1993. </year>
Reference-contexts: Most of the existing object-oriented software is developed in different object-oriented languages, since there is no universal object-oriented language for software development. To integrate the software components developed in different languages, several common object models have been defined [Som93] [Omg91] <ref> [Open93] </ref> [Mano93] [Broc94]. A typical common object model is defined by the features contained in an Interface Definition Language (IDL). The object model defined by the IDL can be used for interoperability of components from different languages.
Reference: [Som93] <institution> SOMobjects Developer Toolkit Technical Overview, </institution> <note> Version 2.0, </note> <institution> IBM, </institution> <address> New York, </address> <month> November, </month> <year> 1993. </year>
Reference-contexts: Most of the existing object-oriented software is developed in different object-oriented languages, since there is no universal object-oriented language for software development. To integrate the software components developed in different languages, several common object models have been defined <ref> [Som93] </ref> [Omg91] [Open93] [Mano93] [Broc94]. A typical common object model is defined by the features contained in an Interface Definition Language (IDL). The object model defined by the IDL can be used for interoperability of components from different languages. <p> When an invocation is received by the server, the metaclass intercepts the operation invocation and sends appropriate message to the server object. 3.1 Core Set of Features of ICOM Among the existing common object models [Omg91] <ref> [Som93] </ref> [Cutt93] [Broc94], there is no agreement upon a common set of object-oriented features. The object model of CORBA takes a common denominator approach to find a common set of features.
Reference: [Stro94] <author> Bjarne Stroustrup, </author> <title> The C++ Programming Language, Second Edition, </title> <publisher> Addison Wesley Publishing Co., </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: Static typing offers both a degree of safety to applications and is critical in defining the interfaces of remote objects and the data that is exchanged between client and server objects. ICOM model concentrates on statically typed object oriented languages. The languages selected are C++ <ref> [Stro94] </ref>, Modula-3 [Nels90] and Java [Java95].
References-found: 20

