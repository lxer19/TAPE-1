URL: ftp://ftp.cs.washington.edu/pub/orca/papers/UW-CSE-98-10-02.ps
Refering-URL: http://www.cs.washington.edu/research/zpl/papers/abstracts/regions.html
Root-URL: http://www.cs.washington.edu
Email: fbrad,echris,snyderg@cs.washington.edu, lin@cs.utexas.edu  
Title: Regions: An Abstraction for Expressing Array Computation  
Author: Bradford L. Chamberlain E Christopher Lewis Calvin Lin Lawrence Snyder 
Date: February 1, 1999  
Address: Seattle, WA 98195-2350  Austin, TX 78712  
Affiliation: University of Washington,  University of Texas,  
Abstract: Most array languages, such as Fortran 90, Matlab, and APL, provide support for referencing arrays by extending the traditional array subscripting construct found in scalar languages. We present an alternative approach that exploits the concept of regionsa representation of index sets that can be named, manipulated with high-level operators, and syntactically separated from array references. This paper develops the concept of region-based programming and describes its benefits in the context of an idealized array language called RL. We show that regions simplify programming, reduce the likelihood of errors, and enable code reuse. Furthermore, we describe how regions accentuate the locality of array expressions and how this locality is important when targeting parallel computers. We also show how the concepts of region-based programming have been used in ZPL, a fully-implemented practical parallel programming language in use by scientists and engineers. In addition, we contrast region-based programming with the array reference constructs of other array languages. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jeanne C. Adams, Walter S. Brainerd, Jean T. Martin, Brian T. Smith, and Jerrold L. Wagener. </author> <title> Fortran 90 Handbook. </title> <publisher> McGraw-Hill, </publisher> <year> 1992. </year>
Reference-contexts: APL [7], the first array language, supports the use of integer vectors in each subscript position, computing the outer product of the indices in each dimension to determine the elements referenced. Fortran 90 <ref> [1] </ref> uses a simplified variation on this syntax to support common reference patterns using triple or slice notation to describe a regular subset of elements. Both languages allow the subscript to be elided when referring to all elements of an array. <p> For each, a Fortran 90 and APL example statements are given (columns 2 and 3) and their corresponding RL statement (column 4). 12 6 Related Work The most prevalent alternative to region-based programming is array subscripting, as found in APL, Fortran 90, and Matlab <ref> [7, 1, 6] </ref>. As we have argued, array subscripting is a more cumbersome means of expressing simple array operations and is no more powerful than a region-based approach.
Reference: [2] <author> Thomas Braunl. Parallaxis-III: </author> <title> A language for structured data-parallel programming. </title> <booktitle> In Proceedings of the IEEE First International Conference on Algorithms and Architectures for Parallel Processing, </booktitle> <pages> pages 4352. </pages> <publisher> IEEE, </publisher> <month> April </month> <year> 1995. </year>
Reference-contexts: Several parallel languages have supported mechanisms for storing and manipulating index sets. Parallaxis-III and Cfl are two such examples, both designed to express a SIMD style of computation <ref> [2, 15] </ref>. Both languages support dense multidimensional index spaces that are used to declare parallel arrays. Parallaxis-III array statements are performed over the entire array, and therefore do not use index sets to describe computation. Cfl does use its index sets (shapes) to designate parallel computation over entire arrays.
Reference: [3] <author> Bradford L. Chamberlain, Sung-Eun Choi, E Christopher Lewis, Calvin Lin, Lawrence Snyder, and W. Derrick Weathersby. </author> <title> ZPL's WYSIWYG performance model. </title> <booktitle> In Proceedings of the Third International Workshop on High-Level Parallel Programming Models and Supportive Environments, </booktitle> <pages> pages 5061. </pages> <publisher> IEEE, </publisher> <month> March </month> <year> 1998. </year>
Reference-contexts: As a result, ZPL de-emphasizes general purpose operators that obscure costs. Instead, ZPL explicitly defines how arrays are allocated and provides operators that accurately reflect the cost of manipulating arrays with respect to the allocation. This is known as ZPL's WYSIWYG performance model <ref> [3] </ref>. Arbitrary array indexing is difficult to parallelize efficiently [5]. <p> The ZPL solution is to use regions and region operators, which provide syntactic cues to indicate when the compiler will generate communication. In order to emphasize data locality in the parallel context, ZPL maps all interacting regions (defined in <ref> [3] </ref>) to a conceptual processor grid of the same rank in a grid-aligned fashion, mapping region indices to processor indices in the corresponding dimension (e.g., rows of a 2-dimensional region would be mapped to rows of a virtual 2-dimensional processor grid).
Reference: [4] <author> S. J. Fink, S. R. Kohn, and S. B. Baden. </author> <title> Efficient run-time support for irregular block-structured applications. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <note> 1998. To appear. </note>
Reference-contexts: Statements therefore operate either over the entirety of an array, or by indexing into the array as in scalar languages. Conformability in FIDIL is somewhat more dynamic than in other languagesoperations are only performed on indices that are present in both operators. KeLP <ref> [4] </ref> is a C++ runtime library that is a descendent of FIDIL. It supports shift, intersect, and grow operators on rectangular index sets called regions. KeLP uses regions to express iteration spaces using a for all indices in the region control construct.
Reference: [5] <author> Raymond Greenlaw and Lawrence Snyder. </author> <title> Achieving speedups for APL on an SIMD distributed memory machine. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 19(2):111127, </volume> <month> April </month> <year> 1990. </year>
Reference-contexts: Instead, ZPL explicitly defines how arrays are allocated and provides operators that accurately reflect the cost of manipulating arrays with respect to the allocation. This is known as ZPL's WYSIWYG performance model [3]. Arbitrary array indexing is difficult to parallelize efficiently <ref> [5] </ref>. For example, the following Fortran 90 statement A (i) = A (j); is a simple assignment if the i th and j th elements of A reside on the same processor, but requires communication at a considerably higher cost if they do not reside on the same processor.
Reference: [6] <author> Duane Hanselman and Bruce Littlefield. </author> <title> Mastering MATLAB. </title> <publisher> Prentice-Hall, </publisher> <year> 1996. </year>
Reference-contexts: For each, a Fortran 90 and APL example statements are given (columns 2 and 3) and their corresponding RL statement (column 4). 12 6 Related Work The most prevalent alternative to region-based programming is array subscripting, as found in APL, Fortran 90, and Matlab <ref> [7, 1, 6] </ref>. As we have argued, array subscripting is a more cumbersome means of expressing simple array operations and is no more powerful than a region-based approach.
Reference: [7] <author> Kenneth E. Iverson. </author> <title> A Programming Language. </title> <publisher> John Wiley and Sons, </publisher> <year> 1962. </year> <month> 14 </month>
Reference-contexts: This notation, which was inherited from linear algebra, is natural and convenient for scalar languages since they operate on single values at a time. In contrast, array languages support the atomic manipulation of multiple array elements, so they typically extend traditional subscripting to a more complex form. APL <ref> [7] </ref>, the first array language, supports the use of integer vectors in each subscript position, computing the outer product of the indices in each dimension to determine the elements referenced. <p> For each, a Fortran 90 and APL example statements are given (columns 2 and 3) and their corresponding RL statement (column 4). 12 6 Related Work The most prevalent alternative to region-based programming is array subscripting, as found in APL, Fortran 90, and Matlab <ref> [7, 1, 6] </ref>. As we have argued, array subscripting is a more cumbersome means of expressing simple array operations and is no more powerful than a region-based approach.
Reference: [8] <author> S. C. Johnson and C. Mohler. </author> <title> Compiling MATLAB. </title> <booktitle> In Proceedings of the USENIX Symposium on Very High Level Languages (VHLL), </booktitle> <pages> pages 11927, </pages> <address> Santa Fe, New Mexico, </address> <month> October </month> <year> 1994. </year> <institution> USENIX Association. </institution>
Reference-contexts: Besides being subscript-based, Matlab differs from ZPL in that it is designed to be a serial, interpreted language, so it is highly dynamic. Attempts to compile it are hindered by dynamic array allocation and data types <ref> [8] </ref>, and attempts to parallelize it are limited by the fact that the language provides no support for managing locality or communication costs [11] in parallel implementation. SAC (Single Assignment C) is a strict, purely functional subset of the C programming language, extended with richer support for arrays [12].
Reference: [9] <author> Calvin Lin and Lawrence Snyder. ZPL: </author> <title> An array sublanguage. </title> <editor> In Uptal Banerjee, David Gelernter, Alexandru Nicolau, and David Padua, editors, </editor> <booktitle> Workshop on Languages and Compilers for Parallel Computing, </booktitle> <pages> pages 96 114. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Furthermore, we compare the region-based representation to the conventional subscripted form. Although the region-based ZPL language has been described before <ref> [9] </ref>, this is the first discussion of regions as an abstract programming language concept. Section 2 describes the advantages of region-based programming. In Section 3, we give a formal definition for regions and describe RL's support for region declarations and operators.
Reference: [10] <author> Bruce J. MacLennan. </author> <booktitle> Principles of Programming Languages. </booktitle> <publisher> Saunders College Publishing, </publisher> <address> 2nd edition, </address> <year> 1987. </year>
Reference-contexts: Because the common portions of references are factored into a region, all that is left at the array references is an indication of how they differ. This applies the common language design principle that similar things should look similar, and different things should look different <ref> [10] </ref>. For example, the following RL statement contains four references to array A, each shifted in one of the cardinal directions.
Reference: [11] <author> L. De Rose, K. Gallivan, E. Gallopoulos, B. Marsolf, and D. Padua. </author> <title> FALCON: A MATLAB interactive restructuring compiler. </title> <editor> In C. H. Huang, P. Sadayappan, U. Banerjee, S. Gelernter, A. Nicolau, and D. Padua, editors, </editor> <booktitle> Proceedings of the 8th Iternational Workshop on Languages and Compiler for Parallel Computing, </booktitle> <pages> pages 269 88, </pages> <address> Columbus, Ohio, </address> <month> August </month> <year> 1995. </year> <note> Springer-Verlag. </note>
Reference-contexts: Attempts to compile it are hindered by dynamic array allocation and data types [8], and attempts to parallelize it are limited by the fact that the language provides no support for managing locality or communication costs <ref> [11] </ref> in parallel implementation. SAC (Single Assignment C) is a strict, purely functional subset of the C programming language, extended with richer support for arrays [12]. Like regions, the WITH-loop construct is used to limit the indices involved in a computation for a statement or group of statements.
Reference: [12] <author> Sven-Bodo Scholz. </author> <title> On programming scientific application in SAC a functional language extended by a subsystem for high-level array operations. </title> <editor> In Werner Kluge, editor, </editor> <booktitle> Proceedings of the 8th International Workshop on the Implementation of Functional Languages (IFL '96), </booktitle> <pages> pages 85104, </pages> <address> Bad Godesberg, Germany, </address> <month> September </month> <year> 1996. </year> <note> Springer-Verlag. </note>
Reference-contexts: SAC (Single Assignment C) is a strict, purely functional subset of the C programming language, extended with richer support for arrays <ref> [12] </ref>. Like regions, the WITH-loop construct is used to limit the indices involved in a computation for a statement or group of statements. Despite the fact that SAC provides simple array operations such as cat and rotate, indexing is still required on array references in WITH-loops.
Reference: [13] <author> Luigi Semenzato and Paul Hilfinger. </author> <title> Arrays in FIDIL. </title> <editor> In Robert Grossman, editor, </editor> <booktitle> Symbolic Computation: Applications to Scientific Computing, </booktitle> <pages> pages 155169. </pages> <publisher> SIAM, </publisher> <year> 1989. </year>
Reference-contexts: Both languages allow for individual elements to be masked on and off. Neither provides support for strided index sets. FIDIL is another parallel array language designed for scientific computation <ref> [13] </ref> with support for more general index sets called domains. Domains need neither be rectangular nor dense, and FIDIL supports computation over them using set-theoretic union, intersection, and difference operations. The role of domains is limited to describing the structure of arrays (maps) and not for specifying computational references.
Reference: [14] <author> Lawrence Snyder. </author> <note> Programming Guide to ZPL. MIT Press (in pressavailable at publication date at ftp://ftp.cs.washington.edu/pub/orca/docs/zpl guide.ps), </note> <year> 1999. </year>
Reference-contexts: This paper also describes how the ZPL parallel programming language is based on the region concept. ZPL is a real-world programming language that is publicly available on the world-wide web 2 and is in use by scientists and engineers <ref> [14] </ref>. We describe decisions made in the design of ZPL that not only support efficient parallel implementations, but also provide a performance model that allows programmers to easily reason about parallel overheadsan uncommon feature in parallel programming languages. This paper makes two primary contributions.
Reference: [15] <institution> C* Programming Guide, </institution> <note> Version 6.0.2. </note> <institution> Thinking Machines Corporation, Cambridge, Massachusetts, </institution> <month> June </month> <year> 1991. </year> <month> 15 </month>
Reference-contexts: Several parallel languages have supported mechanisms for storing and manipulating index sets. Parallaxis-III and Cfl are two such examples, both designed to express a SIMD style of computation <ref> [2, 15] </ref>. Both languages support dense multidimensional index spaces that are used to declare parallel arrays. Parallaxis-III array statements are performed over the entire array, and therefore do not use index sets to describe computation. Cfl does use its index sets (shapes) to designate parallel computation over entire arrays.
References-found: 15

