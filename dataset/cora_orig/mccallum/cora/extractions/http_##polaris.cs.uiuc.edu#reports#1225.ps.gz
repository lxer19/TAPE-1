URL: http://polaris.cs.uiuc.edu/reports/1225.ps.gz
Refering-URL: http://polaris.cs.uiuc.edu/tech_reports.html
Root-URL: http://www.cs.uiuc.edu
Title: PTOPP A PRACTICAL TOOLSET FOR THE OPTIMIZATION OF PARALLEL PROGRAMS  
Author: BY PATRICK EARL MCCLAUGHRY 
Degree: 1990 THESIS Submitted in partial fulfillment of the requirements for the degree of Master of Science in Computer Science in the Graduate College of the  
Address: 1992 Urbana, Illinois  
Affiliation: B.S., University of Illinois at Urbana-Champaign,  University of Illinois at Urbana-Champaign,  
Abstract-found: 0
Intro-found: 1
Reference: [ASM89] <author> Bill Appelbe, Kevin Smith, and Charles McDowell. Start/Pat: </author> <title> A Parallel-Programming Toolkit. </title> <journal> IEEE Software, </journal> <volume> 6(4) </volume> <pages> 29-38, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: A simple toolset is more likely to be accepted than an environment with more overhead and a steeper learning curve. The narrow performance-oriented goal of ptopp sets it apart from other parallel programming environments. However, Faust [GGJ + 89], Start/Pat <ref> [ASM89] </ref>, sigmacs, [SG90] and R N [CCH + 87] are a few parallel toolsets that could be compared to ptopp.
Reference: [CCH + 87] <author> Alan Carle, Keith D. Cooper, Robert T. Hood, Ken Kennedy, Linda Torczon, and Scott K. Warren. </author> <title> A Practical Environment for Scientific Programming. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 75-89, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: A simple toolset is more likely to be accepted than an environment with more overhead and a steeper learning curve. The narrow performance-oriented goal of ptopp sets it apart from other parallel programming environments. However, Faust [GGJ + 89], Start/Pat [ASM89], sigmacs, [SG90] and R N <ref> [CCH + 87] </ref> are a few parallel toolsets that could be compared to ptopp. Faust addresses the creation of executable programs through a graphical makefile editor which not only shows the dependencies, but also highlights those which need to be reconstructed in order to create the executable.
Reference: [Eig91] <author> Rudolf Eigenmann. </author> <title> Towards a methodology of optimizing programs for high-performance computers. </title> <type> Technical Report 1178, </type> <institution> Univ. of Illinois at Urbana-Champaign, Center for Supercomp. R&D, </institution> <month> December </month> <year> 1991. </year>
Reference-contexts: Consisting of real-world applications, the Perfect codes offers an opportunity to demonstrate the value of multiprocessing in solving such problems. It is this process of transformation that ptopp attempts to address to some degree. During the porting operation several steps are followed. <ref> [Eig91] </ref> offers detailed explanation of the steps customarily followed by a group of professionals at CSRD in the process of transforming a program for use on Cedar. The primary focus of this group is source-level transformation of sequential programs to achieve maximum parallel performance. <p> This is done to allow rapid recompilation of future version which only differ in a few modules from the original program. A number of common version are created, supplying a standard set of data to measure execution statistics such as spreading speedup and globalization penalty. <ref> [Eig91] </ref> gives greater detail on the measurements and their importance to the porting operation. Now the truly interactive portion begins. The most time-consuming regions of the program can easily be identified from the timing results. <p> Passing the modules through the preprocessor and compiler with different options can improve the performance. More often, manual optimizations need to be done at the source level to improve performance. Some of the typical modifications are array privatization, stripmining and induction variable substitution. See <ref> [Eig91] </ref> for more examples. After the modifications are complete, a new program version is created and executed, producing a new set of performance timings. The collection and comparison of the various timing results drives the iterative process. <p> Start/Pat and R N include debugging interpreters and the ability to interactively replay the execution of a program. Users of ptopp use the debugging techniques available at the unix level. Additional techniques used in the porting efforts are described in <ref> [Eig91] </ref>. There were never grand notions for ptopp. Starting with modest ambitions has helped to keep ptopp simple and to the point. A primary force throughout its development has been "getting the job done." This job is, of course, the porting and optimization of applications to the Cedar architecture. <p> A profile may be resorted in ascending or descending order based on any column. It may also be regenerated quickly without respecifying the entire experiment list. Figure 6 shows an example of a profile constructed from the ptopp database. 8 These terms are defined in <ref> [Eig91] </ref>. 19 ptopp has several profile manipulation commands. Since profiles usually contain filtered data from the database, ptopp has the ability to display the raw result data for an experiment.
Reference: [GGJ + 89] <author> Kyle Gallivan, Dennis Gannon, William Jalby, Allen Malony, and Harry Wi-jshoff. </author> <title> Behavioral Characterization of Multiprocessor Memory Systems: A Case Study. </title> <booktitle> Proceedings 1989 ACM SIGMETRICS Conf. on Measuring and Modeling Computer Systems, </booktitle> <address> Berkeley, CA, </address> <pages> pages 79-88, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: A simple toolset is more likely to be accepted than an environment with more overhead and a steeper learning curve. The narrow performance-oriented goal of ptopp sets it apart from other parallel programming environments. However, Faust <ref> [GGJ + 89] </ref>, Start/Pat [ASM89], sigmacs, [SG90] and R N [CCH + 87] are a few parallel toolsets that could be compared to ptopp.
Reference: [PCW + 89] <author> M. Berry; D. Chen; P. Koss; D. Kuck; L. Pointer, S. Lo; Y. Pang; R. Roloff; A. Sameh; E. Clementi, S. Chin; D. Schneider; G. Fox; P. Messina; D. Walker, C. Hsiung; J. Schwarzmeier; K. Lue; S. Orszag; F. Seidl, O. Johnson; G. Swanson; R. Goodrum, and J. Martin. </author> <title> The Perfect Club Benchmarks: Effective Performance Evalution of Supercomputers. </title> <booktitle> Int'l. Jour. of Supercomputer Applications, Fall 1989, </booktitle> <volume> 3(3) </volume> <pages> 5-40, </pages> <month> Fall </month> <year> 1989. </year>
Reference-contexts: The component tools have been created in response to specific needs that arose from the porting of the Perfect Benchmarks T M <ref> [PCW + 89] </ref> to the Cedar [Sta91] architecture at the Center for Supercomputing Research and Development at the University of Illinois.
Reference: [Rel90] <institution> Relational Technology Inc. </institution> <note> INGRES/SQL Reference Manual, </note> <month> January </month> <year> 1990. </year>
Reference-contexts: Queries can be composed in an embedded C language (esql) or they can be entered in an interactive way through the ingres terminal monitor <ref> [Rel90] </ref>.
Reference: [SG90] <author> Bruce Shei and Dennis Gannon. SIGMACS: </author> <title> A Programmable Programming Environment. </title> <booktitle> 3rd Workshop on Languages and Compilers for Parallel Programming, </booktitle> <year> 1990. </year>
Reference-contexts: A simple toolset is more likely to be accepted than an environment with more overhead and a steeper learning curve. The narrow performance-oriented goal of ptopp sets it apart from other parallel programming environments. However, Faust [GGJ + 89], Start/Pat [ASM89], sigmacs, <ref> [SG90] </ref> and R N [CCH + 87] are a few parallel toolsets that could be compared to ptopp.
Reference: [Sta91] <author> CSRD Staff. </author> <title> The Cedar Project. </title> <booktitle> Proceedings of ICPP'91, </booktitle> <address> St. Charles, IL, </address> <month> August 12-16, </month> <year> 1991. </year>
Reference-contexts: The component tools have been created in response to specific needs that arose from the porting of the Perfect Benchmarks T M [PCW + 89] to the Cedar <ref> [Sta91] </ref> architecture at the Center for Supercomputing Research and Development at the University of Illinois. Several of the tools existed in some form before ptopp came into existence; others were created as additional needs developed. ptopp contains tools to help instrument programs, compile them, and produce comparison reports for analysis.
References-found: 8

