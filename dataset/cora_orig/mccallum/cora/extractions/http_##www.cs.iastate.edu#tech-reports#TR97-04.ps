URL: http://www.cs.iastate.edu/tech-reports/TR97-04.ps
Refering-URL: http://www.cs.iastate.edu/tech-reports/catalog.html
Root-URL: http://www.cs.iastate.edu
Title: Specification Facets for More Precise, Focused Documentation [Logics and Meaning of Programs] Specifying and verifying
Author: Gary T. Leavens and Clyde Ruby Gary T. Leavens and Clyde Ruby, . 
Keyword: reuse, formal specification languages, metaspecification, facets, expressiveness. 1993 CR Categories: D.2.1 [Software Engineering] Requirements/Specifications Languages;  
Address: 226 Atanasoff Hall  Ames, Iowa 50011-1040, USA  
Affiliation: Columbus, Ohio. Department of Computer Science  Iowa State University  
Date: March 23-26, 1997,  
Note: TR #97-04 January 1997  F.3.1  Copyright c  This is a short position paper that will appear in the proceedings of the Eighth Annual Workshop on Software Reuse,  
Abstract-found: 0
Intro-found: 0
Reference: [Ame91] <author> Pierre America. </author> <title> Designing an object-oriented programming language with behavioural subtyping. </title> <editor> In J. W. de Bakker, W. P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Foundations of Object-Oriented Languages, REX School/Workshop, Noordwijkerhout, The Nether-lands, May/June 1990, volume 489 of Lecture Notes in Computer Science, </booktitle> <pages> pages 60-90. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1991. </year>
Reference-contexts: He has long been active in the theory of object-oriented (OO) methods, studying the concept of behavioral subtyping <ref> [Ame91, LW90, Lea91, LW94, LW95, DL96] </ref>. Subtyping is a kind of polymorphism [Car91] that allows objects of subtypes to be sent messages as if they were objects of their supertypes. Subtyping by itself, however, only guarantees the absence of type errors. Behavioral subtyping also guarantees the absence of surprising behavior.
Reference: [Car91] <author> Luca Cardelli. </author> <title> Typeful programming. </title> <editor> In E. J. Neuhold and M. Paul, editors, </editor> <booktitle> Formal Description of Programming Concepts, IFIP State-of-the-Art Reports, </booktitle> <pages> pages 431-507. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1991. </year>
Reference-contexts: He has long been active in the theory of object-oriented (OO) methods, studying the concept of behavioral subtyping [Ame91, LW90, Lea91, LW94, LW95, DL96]. Subtyping is a kind of polymorphism <ref> [Car91] </ref> that allows objects of subtypes to be sent messages as if they were objects of their supertypes. Subtyping by itself, however, only guarantees the absence of type errors. Behavioral subtyping also guarantees the absence of surprising behavior.
Reference: [DL96] <author> Krishna Kishore Dhara and Gary T. Leavens. </author> <title> Forcing behavioral subtyping through specification inheritance. </title> <booktitle> In Proceedings of the 18th International Conference on Software Engineering, </booktitle> <address> Berlin, Germany, </address> <pages> pages 258-267. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> March </month> <year> 1996. </year>
Reference-contexts: He has long been active in the theory of object-oriented (OO) methods, studying the concept of behavioral subtyping <ref> [Ame91, LW90, Lea91, LW94, LW95, DL96] </ref>. Subtyping is a kind of polymorphism [Car91] that allows objects of subtypes to be sent messages as if they were objects of their supertypes. Subtyping by itself, however, only guarantees the absence of type errors. Behavioral subtyping also guarantees the absence of surprising behavior.
Reference: [Heh93] <author> Eric C.R. Hehner. </author> <title> A Practical Theory of Programming. Texts and Monographs in Computer Science. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Exactly how this would work is a matter for research, but, following 2 Hehner <ref> [Heh93] </ref>, one approach would be to incorporate such facets as if they were ghost variables 1 (like Hehner's t for time). There are several theoretical issues to investigate, such as the interaction of frame axioms among different facets. <p> That is, most formal specification languages do not help one specify how much time a procedure can take, or how much space it can use, or how it affects the firing of torpedos. Hehner's "practical theory of programming" <ref> [Heh93] </ref> is a notable exception. It uses partial correctness, and procedure specifications can mention a ghost variable, t, to describe the time a procedure may take. This allows one to recover total correctness if desired. It also hints at a way of adding facets to a specification language.
Reference: [Lam94] <author> Leslie Lamport. </author> <title> The temporal logic of actions. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(3) </volume> <pages> 872-923, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: It uses partial correctness, and procedure specifications can mention a ghost variable, t, to describe the time a procedure may take. This allows one to recover total correctness if desired. It also hints at a way of adding facets to a specification language. Temporal logic <ref> [MP92, Lam94] </ref> is used in specifying reactive or concurrent systems, where the relative timing of events matters. It allows one to specify liveness and safety properties, such as absence of deadlock and starvation.
Reference: [Lea91] <author> Gary T. Leavens. </author> <title> Modular specification and verification of object-oriented programs. </title> <journal> IEEE Software, </journal> <volume> 8(4) </volume> <pages> 72-80, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: He has long been active in the theory of object-oriented (OO) methods, studying the concept of behavioral subtyping <ref> [Ame91, LW90, Lea91, LW94, LW95, DL96] </ref>. Subtyping is a kind of polymorphism [Car91] that allows objects of subtypes to be sent messages as if they were objects of their supertypes. Subtyping by itself, however, only guarantees the absence of type errors. Behavioral subtyping also guarantees the absence of surprising behavior.
Reference: [Lea96a] <author> Gary T. Leavens. </author> <title> Larch frequently asked questions. </title> <note> Version 1.62. Available in http://www.cs.iastate.edu/~leavens/larch-faq.html, December 1996. </note>
Reference: [Lea96b] <author> Gary T. Leavens. </author> <note> Larch/C++ Reference Manual. Version 4.20. Available in ftp://ftp.cs.iastate.edu/pub/larchc++/lcpp.ps.gz or on the world wide web at the URL http://www.cs.iastate.edu/~leavens/larchc++.html, December 1996. </note>
Reference-contexts: Behavioral subtyping also guarantees the absence of surprising behavior. This allows client code, code that sends messages to objects, to be reused for behavioral subtypes. In the past six years Leavens has been working in the semantics of specification languages, and has been designing the specification language Larch/C++ <ref> [Lea96c, Lea96b] </ref>, which is a behavioral interface specification language tailored to C++. Ruby is a graduate student doing research in formal specification of object-oriented programming languages.
Reference: [Lea96c] <author> Gary T. Leavens. </author> <title> An overview of Larch/C++: Behavioral specifications for C++ modules. </title> <editor> In Hiam Kilov and William Harvey, editors, </editor> <booktitle> Specification of Behavioral Semantics in Object-Oriented Information Modeling, chapter 8, </booktitle> <pages> pages 121-142. </pages> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1996. </year> <note> An extended version is TR #96-01b, </note> <institution> Department of Computer Science, Iowa State University, Ames, Iowa, </institution> <month> 50011. </month>
Reference-contexts: Behavioral subtyping also guarantees the absence of surprising behavior. This allows client code, code that sends messages to objects, to be reused for behavioral subtypes. In the past six years Leavens has been working in the semantics of specification languages, and has been designing the specification language Larch/C++ <ref> [Lea96c, Lea96b] </ref>, which is a behavioral interface specification language tailored to C++. Ruby is a graduate student doing research in formal specification of object-oriented programming languages.
Reference: [LG86] <author> Barbara Liskov and John Guttag. </author> <title> Abstraction and Specification in Program Development. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1986. </year>
Reference-contexts: One facet is functional behavior, but there are many others: time, space, security issues, aliasing, etc. Because various facets are (by definition) important parts of the description of software, and because having an abstract description of software is important for reuse (for example, <ref> [LG86, Mey92] </ref>), our position is as follows. Specification languages should be able to document all facets of program behavior. The facets that will be important to some users (e.g., communication bandwidth) are not necessarily important to others.
Reference: [LW90] <author> Gary T. Leavens and William E. Weihl. </author> <title> Reasoning about object-oriented programs that use subtypes (extended abstract). </title> <editor> In N. Meyrowitz, editor, </editor> <booktitle> OOPSLA ECOOP '90 Proceedings, volume 25(10) of ACM SIGPLAN Notices, </booktitle> <pages> pages 212-223. </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1990. </year> <month> 4 </month>
Reference-contexts: He has long been active in the theory of object-oriented (OO) methods, studying the concept of behavioral subtyping <ref> [Ame91, LW90, Lea91, LW94, LW95, DL96] </ref>. Subtyping is a kind of polymorphism [Car91] that allows objects of subtypes to be sent messages as if they were objects of their supertypes. Subtyping by itself, however, only guarantees the absence of type errors. Behavioral subtyping also guarantees the absence of surprising behavior.
Reference: [LW94] <author> Barbara Liskov and Jeannette Wing. </author> <title> A behavioral notion of subtyping. </title> <journal> ACM Transac--tions on Programming Languages and Systems, </journal> <volume> 16(6) </volume> <pages> 1811-1841, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: He has long been active in the theory of object-oriented (OO) methods, studying the concept of behavioral subtyping <ref> [Ame91, LW90, Lea91, LW94, LW95, DL96] </ref>. Subtyping is a kind of polymorphism [Car91] that allows objects of subtypes to be sent messages as if they were objects of their supertypes. Subtyping by itself, however, only guarantees the absence of type errors. Behavioral subtyping also guarantees the absence of surprising behavior.
Reference: [LW95] <author> Gary T. Leavens and William E. Weihl. </author> <title> Specification and verification of object-oriented programs using supertype abstraction. </title> <journal> Acta Informatica, </journal> <volume> 32(8) </volume> <pages> 705-778, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: He has long been active in the theory of object-oriented (OO) methods, studying the concept of behavioral subtyping <ref> [Ame91, LW90, Lea91, LW94, LW95, DL96] </ref>. Subtyping is a kind of polymorphism [Car91] that allows objects of subtypes to be sent messages as if they were objects of their supertypes. Subtyping by itself, however, only guarantees the absence of type errors. Behavioral subtyping also guarantees the absence of surprising behavior.
Reference: [Mey92] <author> Bertrand Meyer. </author> <title> Applying "design by contract". </title> <journal> Computer, </journal> <volume> 25(10) </volume> <pages> 40-51, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: One facet is functional behavior, but there are many others: time, space, security issues, aliasing, etc. Because various facets are (by definition) important parts of the description of software, and because having an abstract description of software is important for reuse (for example, <ref> [LG86, Mey92] </ref>), our position is as follows. Specification languages should be able to document all facets of program behavior. The facets that will be important to some users (e.g., communication bandwidth) are not necessarily important to others.
Reference: [MP92] <author> Zohar Manna and Amir Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Systems. </title> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1992. </year>
Reference-contexts: It uses partial correctness, and procedure specifications can mention a ghost variable, t, to describe the time a procedure may take. This allows one to recover total correctness if desired. It also hints at a way of adding facets to a specification language. Temporal logic <ref> [MP92, Lam94] </ref> is used in specifying reactive or concurrent systems, where the relative timing of events matters. It allows one to specify liveness and safety properties, such as absence of deadlock and starvation.
Reference: [Sit97] <author> Murali Sitaraman. </author> <title> Impact of performance considerations on formal specification design. </title> <note> To appear in Formal Aspects of Computing, </note> <year> 1997. </year>
Reference-contexts: Ideally, with metaspecification, one would be able to use the ideas of temporal logic for the specification of such properties. However, even if one adopted temporal logic for the time facet, this would not solve the problem of how to specify other facets. Sitaraman <ref> [Sit97] </ref> described design considerations for "implementation neutral" and "performance neutral" abstractions. These abstractions have correct implementations that allow many different implementations, including those with widely varying time and space usage.

References-found: 16

