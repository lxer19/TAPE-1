URL: http://vibes.cs.uiuc.edu/publications/Papers/DMCC6.ps.gz
Refering-URL: http://vibes.cs.uiuc.edu/People/Staff/Aydt/publications.htm
Root-URL: http://www.cs.uiuc.edu
Title: Scalable Performance Environments for Parallel Systems  
Author: Daniel A. Reed Robert D. Olson, Ruth A. Aydt, Tara M. Madhyastha, Thomas Birkett, David W. Jensen, Bobby A. A. Nazief, and Brian K. Totty 
Address: Urbana, Illinois 61801  
Affiliation: Department of Computer Science University of Illinois  
Abstract: As parallel systems expand in size and complexity, the absence of performance tools for these parallel systems exacerbates the already difficult problems of application program and system software performance tuning. Moreover, given the pace of technological change, we can no longer afford to develop ad hoc, one-of-a-kind performance instrumentation software; we need scalable, portable performance analysis tools. We describe an environment prototype based on the lessons learned from two previous generations of performance data analysis software. Our environment prototype contains a set of performance data transformation modules that can be interconnected in user-specified ways. It is the responsibility of the environment infrastructure to hide details of module interconnection and data sharing. The environment is written in C ++ with the graphical displays based on X windows and the Motif toolkit. It allows users to interconnect and configure modules graphically to form an acyclic, directed data analysis graph. Performance trace data are represented in a self-documenting stream format that includes internal definitions of data types, sizes, and names. The environment prototype supports the use of head-mounted displays and sonic data presentation in addition to the traditional use of visual techniques. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Becker, A. </author> <title> Modern Virtual Screen Technology and Applications. </title> <booktitle> In Proceedings of Spring CompCon '90 (1990), IEEE Computer Society, </booktitle> <pages> pp. 612-615. </pages>
Reference-contexts: With current technology, these displays are heavy, awkward, and confining. However, lightweight, low-bandwidth displays need not occlude vision nor prevent normal office activities. Reflection Technology has developed an IBM PC CGA-compatible monochrome display that weighs 2.25 ounces and occupies a package approximately 1.2"x1.3"x3.5" <ref> [1] </ref>. Images can be transferred to the display via a standard RS-232 interface. Using this display, we have developed a graphics library that supports a subset of the displays described in x3.1, albeit at reduced graphic resolution.
Reference: [2] <author> Blattner, M. M., Sumikawa, D. A., and Greenberg, R. M. Earcons and Icons: </author> <title> Their Structure and Common Design Principles. </title> <booktitle> Human-Computer Interaction 4 (1989), </booktitle> <pages> 11-44. </pages>
Reference-contexts: At present, our sonic widgets support the mapping of a sequence of scalar data values to * musical scales with different tunings, * volumes, * timbres, and * arbitrary sound samples. We have also developed a set of "earcons," <ref> [2] </ref> or audio warnings, that presently include sampled voice warnings and enumerations, alarms, and bells. Simply put, we plan to exploit audio's potential for a wide range of perceptually continuous transformations in real time.
Reference: [3] <author> Chung, J. C., Harris, M., Brooks, F. P., Fuchs, H., Kelley, M. T., Hughes, J., Ouh-young, M., Cheung, C., Holloway, R. L., and Pique, M. </author> <title> Exploring Virtual Worlds with Head-Mounted Displays. In Three-Dimensional Visualization and Display Technologies, </title> <booktitle> Volume 1083 (1989), SPIE, </booktitle> <pages> pp. 42-52. </pages>
Reference-contexts: Head-mounted displays provide a non-intrusive alternative to visual monitoring on a workstation. Stereoscopic, head-mounted displays with real-time or near real-time graphics often are associated with virtual reality research <ref> [3] </ref>. With current technology, these displays are heavy, awkward, and confining. However, lightweight, low-bandwidth displays need not occlude vision nor prevent normal office activities. Reflection Technology has developed an IBM PC CGA-compatible monochrome display that weighs 2.25 ounces and occupies a package approximately 1.2"x1.3"x3.5" [1].
Reference: [4] <author> Couch, A. L., and Krumme, D. W. </author> <title> Monitoring Parallel Executions in Real Time. </title> <booktitle> In Proceedings of the Fifth Distributed Memory Computing Conference (Apr. </booktitle> <year> 1990), </year> <pages> pp. 1187-1206. </pages>
Reference-contexts: This is an extension of our previous system, described in [10], that permitted only a single level of interconnected analysis modules with fixed functionality. Graphically connecting modules to create an executable data flow graph has been used by Couch in his Seecube performance environment <ref> [4] </ref> and in both commercial and research implementations of graphics and image processing software. The best known such example is Stardent's AVS visualization system [15]. Academic examples include the aPE visualization system [5] and the Khoros image processing system [16].
Reference: [5] <author> Dyer, D. S. </author> <title> A Dataflow Toolkit for Visualization. </title> <booktitle> IEEE Computer (July 1990), </booktitle> <pages> 60-69. </pages>
Reference-contexts: The best known such example is Stardent's AVS visualization system [15]. Academic examples include the aPE visualization system <ref> [5] </ref> and the Khoros image processing system [16]. Based on the broad success of this graphical construction paradigm in other problem domains, we believe it is an ideal approach to interactive performance data analysis.
Reference: [6] <author> Francioni, J. M., Albright, L., and Jack-son, J. A. </author> <title> The Sounds of Parallel Programs. </title> <booktitle> In Proceedings of the Sixth Distributed Memory Computing Conference (1991), </booktitle> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: Other perceivable sound qualities include spatial location and, for music, vibrato (frequency modulation) and tremolo (amplitude modulation). Clearly, sound represents a rich communication channel that has heretofore been highly underestimated or ignored completely in computer systems performance data presentation; the recent work by Francioni <ref> [6] </ref> is an exception. We are developing a set of "sonic widgets" analogous to the graphical widgets found in the X window system. <p> The music world has adopted the Musical Instrument Digital Interface (MIDI) as a standard, and there are wide variety of electronic musical instruments with MIDI interfaces. By connecting one or more of these instruments to a workstation, one can easily create a broad spectrum of sounds <ref> [6] </ref>. For this reason, we are now extending our sonic implementation to support both the basic SparcStation audio and one or more inexpensive MIDI musical instruments. Clearly, the practical utility of sonic output remains to be empirically determined.
Reference: [7] <author> Lillevik, S. L. </author> <title> Touchstone Program Overview. </title> <booktitle> In Proceedings of the Fifth Distributed Memory Computing Conference (1990), IEEE Computer Society, </booktitle> <pages> pp. 647-657. </pages>
Reference-contexts: CDA87-22836, by the National Aeronautics and Space Administration under NASA Contract Number NAG-1-613, and by grants from Apple Computer and the Digital Equipment Corporation External Research Program. projected emergence of massively parallel MIMD systems (e.g., the Intel Touchstone project goals include a 2048 node system based on i860 microprocessor technology <ref> [7] </ref>), understanding and correcting application and system performance bottlenecks become crucial. Although it is now architecturally feasible to construct scalable parallel systems that contain thousands of processors, there is no discipline or set of standard software libraries for evaluating the performance of these systems or their application programs.
Reference: [8] <author> Malony, A. D., and Reed, D. A. </author> <title> Visualizing Parallel Computer System Performance. In Instrumentation for Future Parallel Computing Systems, </title> <editor> M. Simmons, R. Koskela, and I. Bucher, Eds. </editor> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1989. </year>
Reference-contexts: Repeated experience has shown that if performance analysis tools are difficult to use, software developers will eschew these tools in favor of simpler, inferior techniques, even if it means the concomitant abandonment of a sophisticated performance data analysis environment. In <ref> [8] </ref>, we argued that integration and flexibility are the twin keys to an effective performance analysis environment. If the performance instrumentation environment does not permit diverse approaches to performance data reduction and analysis, its functional lifetime will be limited.
Reference: [9] <author> Malony, A. D., and Reed, D. A. </author> <title> A Hardware-Based Performance Monitor for the In-tel iPSC/2 Hypercube. </title> <booktitle> In 1990 ACM International Conference on Supercomputing (June 1990), Association for Computing Machinery. </booktitle>
Reference-contexts: In [8], we argued that integration and flexibility are the twin keys to an effective performance analysis environment. If the performance instrumentation environment does not permit diverse approaches to performance data reduction and analysis, its functional lifetime will be limited. In <ref> [13, 9, 10] </ref>, we reported the completion of performance data visualization prototypes that supported both dynamic graphic displays and event timelines.
Reference: [10] <author> Malony, A. D., Reed, D. A., and Rudolph, D. C. </author> <title> Integrating Performance Data Collection, Analysis, and Visualization. In Parallel Computer Systems: Performance Instrumentation and Visualization, </title> <editor> M. Simmons, R. Koskela, and I. Bucher, Eds. </editor> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1990. </year>
Reference-contexts: In [8], we argued that integration and flexibility are the twin keys to an effective performance analysis environment. If the performance instrumentation environment does not permit diverse approaches to performance data reduction and analysis, its functional lifetime will be limited. In <ref> [13, 9, 10] </ref>, we reported the completion of performance data visualization prototypes that supported both dynamic graphic displays and event timelines. <p> It allows users to interconnect and configure modules graphically to form an acyclic, directed graph of data analysis and presentation modules. This is an extension of our previous system, described in <ref> [10] </ref>, that permitted only a single level of interconnected analysis modules with fixed functionality. Graphically connecting modules to create an executable data flow graph has been used by Couch in his Seecube performance environment [4] and in both commercial and research implementations of graphics and image processing software. <p> Thus, we are exploring the use of head-mounted displays and sonic data presentation in addition to the traditional use of visual techniques. 3.1 Dynamic Graphics The diversity of performance data demands an equally rich set of performance displays. In our earlier performance environment, described in <ref> [10] </ref>, we developed a variety of X windows performance data displays, including dials, bar charts, LEDs, Kiviat diagrams, matrix views, X-Y plots, contour plots, strip charts, and a general purpose graph display.
Reference: [11] <author> Michael Berry, e. a. </author> <title> The Perfect Club Benchmarks: Performance Evaluation of Supercomputers. </title> <journal> The International Journal of Supercomputer Applications 3, </journal> <volume> 3 (1989), </volume> <pages> 5-40. </pages> <month> Fall. </month>
Reference-contexts: For sequential systems, increasing clock rates, MIPS, and MFLOPS are raising the performance of almost all applications. In contrast, the expected performance for a suite of parallel applications can vary widely, depending on the match of parallel architecture, system software, and application algorithms <ref> [11] </ref>.
Reference: [12] <author> NCSA. </author> <note> NCSA HDF, Version 2.0, </note> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: The notion of self-documenting data files is not new. Users of supercomputer centers store scientific data sets and raster images in the Hierarchical Data Format (HDF) <ref> [12] </ref> or the Common Data Form (netCDF) [14]. Both formats allow the user to include a description (e.g., array sizes, types, and labels) in a file with the raw data.
Reference: [13] <author> Reed, D. A., and Rudolph, D. C. </author> <title> Experiences with Hypercube Operating System Instrumentation. </title> <note> International Journal of High-Speed Computing (Dec. </note> <year> 1989), </year> <pages> 517-542. </pages>
Reference-contexts: In [8], we argued that integration and flexibility are the twin keys to an effective performance analysis environment. If the performance instrumentation environment does not permit diverse approaches to performance data reduction and analysis, its functional lifetime will be limited. In <ref> [13, 9, 10] </ref>, we reported the completion of performance data visualization prototypes that supported both dynamic graphic displays and event timelines.
Reference: [14] <author> Rew, R. K. </author> <note> netCDF User's Guide, Version 1.0. </note> <institution> Unidata Program Center, University Corporation for Atmospheric Research, </institution> <month> Apr. </month> <year> 1989. </year>
Reference-contexts: The notion of self-documenting data files is not new. Users of supercomputer centers store scientific data sets and raster images in the Hierarchical Data Format (HDF) [12] or the Common Data Form (netCDF) <ref> [14] </ref>. Both formats allow the user to include a description (e.g., array sizes, types, and labels) in a file with the raw data.
Reference: [15] <author> Stardent Computer, Inc. </author> <title> Application Visualization System, User's Guide, </title> <year> 1989. </year>
Reference-contexts: Graphically connecting modules to create an executable data flow graph has been used by Couch in his Seecube performance environment [4] and in both commercial and research implementations of graphics and image processing software. The best known such example is Stardent's AVS visualization system <ref> [15] </ref>. Academic examples include the aPE visualization system [5] and the Khoros image processing system [16]. Based on the broad success of this graphical construction paradigm in other problem domains, we believe it is an ideal approach to interactive performance data analysis.
Reference: [16] <author> Williams, C., and Rasure, J. </author> <title> A Visual Language for Image Processing. </title> <booktitle> In IEEE Workshop on Visual Languages (Oct. </booktitle> <year> 1990). </year>
Reference-contexts: The best known such example is Stardent's AVS visualization system [15]. Academic examples include the aPE visualization system [5] and the Khoros image processing system <ref> [16] </ref>. Based on the broad success of this graphical construction paradigm in other problem domains, we believe it is an ideal approach to interactive performance data analysis. In our environment, performance trace events are represented in a stream data format that includes internal definitions of data types, sizes, and names.
References-found: 16

