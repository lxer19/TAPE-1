URL: http://www.cs.ucla.edu/~hari/software/ecn/ecn_report.ps.gz
Refering-URL: http://www.cs.ucla.edu/~hari/software/ecn/ecn.html
Root-URL: http://www.cs.ucla.edu
Keyword: Analyzing Explicit Congestion Notification (ECN) benefits for TCP Hariharan Krishnan  
Note: 1998  
Address: Los Angeles  
Affiliation: University of California  
Abstract: A project report submitted in partial satisfaction of the requirements for the degree Master of Science in Computer Science by
Abstract-found: 1
Intro-found: 1
Reference: [CHO97] <author> K. Cho. </author> <title> "Alternate Queueing for BSD Unix.", </title> <month> November </month> <year> 1997. </year>
Reference-contexts: However, in this report for sake for clarity and consistency, these bits are referred as ECT and CE bits except when it is required to show the difference. 42 byte 3.2.1 Design Framework ECN router side support made use of Alternate Queuing (ALTQ) framework <ref> [CHO97] </ref> designed and implemented in Sony Computer Labs, Japan for FreeBSD [FBD97] systems. The main motivation to use ALTQ framework rather than adding router support to ECN separately is: * RED was already implemented for FreeBSD using the ALTQ framework. <p> Our ECN implementation for IPv6 is largely based on the RED code that was a part of the ALTQ distribution for FreeBSD 2.2.2 by <ref> [CHO97] </ref>. 3.2.4 Features of ECN Router implementation Our ECN router implementation has some interesting features. The ECN router supports both ECN-capable and non-ECN capable traffic. Thus it can incrementally deployed in the Internet and such deployment would be transparent to the hosts.
Reference: [CKL97] <author> S. Leung C. Chen, H. Krishnan and N. Tang. </author> <title> "Implementing Explicit Congestion Notification (ECN) in TCP for IPv6.", </title> <month> December </month> <year> 1997. </year>
Reference-contexts: and routers have 10Mbps and link delays ranging from (2 to 9 ms) Link between router r1 and r2 is 50Kbps, 500ms Both routers r1 and r2 are always ECN capable. 39 CHAPTER 3 ECN implementation for TCP/IPv6 3.1 Introduction This chapter describes the design and implementation of ECN support <ref> [CKL97] </ref> for TCP over IPv6. Section 3.2 describes the modifications made to the current RED implementation for adding ECN support to the routers. Section 3.3 describes the changes made to the host side TCP for supporting ECN. Finally some preliminary measurements made on the implementation test-bed are shown.
Reference: [DH95] <author> S. Deering and R. Hinden. </author> <title> "Internet Protocol, Version 6 (IPv6) Specification." </title> <type> RFC 1883, </type> <month> December </month> <year> 1995. </year>
Reference-contexts: It is important to note that adding ECN for TCP requires changes to both TCP implementation in the hosts and as well as adding support in the routers to mark the packets instead of dropping them. Ramakrishnan and Floyd [RF97] have proposed to add ECN support for IPv6 <ref> [DH95] </ref> and to TCP. The following sections briefly describes ECN support for TCP in hosts and routers. <p> The CE bit is set only for packets with the ECT bit set. Floyd [Flo94] also describes an equivalent approach with just one-bit rather than using two bits 4 . UCLA-ECNv1 used the first two bits in the flow label field of the IPv6 header <ref> [DH95] </ref> for EC (or ECT) and EN (or CE) bits. These bit positions are changed in UCLA-ECNv2 based on the new proposal for first word of IPv6 header in [DH997] and are described in [SEC98]. The modified IPv6 header format in UCLA-ECNv1 is shown in figure 3.1.
Reference: [DH997] <author> S. Deering and R. Hinden. </author> <title> "Internet draft draft-ietf-ipngwg-ipv6-spec-v2-01.txt.", </title> <month> November </month> <year> 1997. </year>
Reference-contexts: UCLA-ECNv1 used the first two bits in the flow label field of the IPv6 header [DH95] for EC (or ECT) and EN (or CE) bits. These bit positions are changed in UCLA-ECNv2 based on the new proposal for first word of IPv6 header in <ref> [DH997] </ref> and are described in [SEC98]. The modified IPv6 header format in UCLA-ECNv1 is shown in figure 3.1. The position of ECT and CE bits were changed from bit positions 5 8 and 9 to bit positions 10 and 11 in the IPv6 header. <p> The modified IPv6 header format in UCLA-ECNv1 is shown in figure 3.1. The position of ECT and CE bits were changed from bit positions 5 8 and 9 to bit positions 10 and 11 in the IPv6 header. This change is based on the current proposal <ref> [DH997] </ref> for the first word of the IPv6 header and mapping the IPv4 TOS byte to the IPv6 traffic class field as described in [SEC98]. These changes have been been approved by the IPv6 working group only for experimental purposes. Hence these changes was made in UCLA-ECN [ECN98]. <p> These changes have been been approved by the IPv6 working group only for experimental purposes. Hence these changes was made in UCLA-ECN [ECN98]. The current proposal for the first word of the IPv6 header <ref> [DH997] </ref> and the 3 An ECN capable transport is one that can respond to ECN congestion notifications 4 For discussion on two-bit Vs one-bit refer to ftp://ftp.ee.lbl.gov/email/sf.97nov19.txt 5 Bit positions refer to IPv6 header in network byte order 41 mapping to IPv4 TOS byte is shown in figure 3.2.
Reference: [ECN97] <author> S. Leung C. Chen, H. Krishnan and N. Tang. "UCLA-ECN v1.", </author> <month> De-cember </month> <year> 1997. </year>
Reference-contexts: The IPv6 implementation was from INRIA 2 [INR97]. Our implementation was largely based on the proposal from Floyd et al. in [RF97]. The following sections describe the router side and the host side support in UCLA-ECN implementation. Though both the initial implementation (UCLA-ECNv1) <ref> [ECN97] </ref> and minor changes made in the later version (UCLA-ECNv2) [ECN98] based on later developments are described, the distinction is made only to bring out the changes. 1 "Our" refers to ECN project team of C. Chen, H. Krishnan, S. Leung, N. <p> Hence it is required to negotiate ECN capability between the sender and the receiver before the TCP connection is established. Thus ECN negotiation is an important mandatory aspect of ECN TCP. 48 ECN negotiation is implemented in UCLA-ECN <ref> [ECN97] </ref> by adding two new states for TCP connections. These states are called TCPS SYN RECEIVED - ECN and TCPS SYN ESTABLISHED ECN. These states parallel the existing TCP states TCPS SYN RECEIVED and TCPS SYN ESTABSLISHED. <p> This feature is implemented in UCLA-ECN <ref> [ECN97] </ref> by using a reserved bit in the TCP flags portion of the TCP header. The modified TCP header is shown 49 in figure 3.5. A new flag called TF ECN ACKNOTIFY is added in the tcpcb (TCP control block).
Reference: [ECN98] <author> H. Krishnan. "UCLA-ECN v2.", </author> <month> March </month> <year> 1998. </year> <note> [FBD97] "Board of Directors, FreeBSD HandBook. URL http://www.freebsd.org.", 1997. </note>
Reference-contexts: Our implementation was largely based on the proposal from Floyd et al. in [RF97]. The following sections describe the router side and the host side support in UCLA-ECN implementation. Though both the initial implementation (UCLA-ECNv1) [ECN97] and minor changes made in the later version (UCLA-ECNv2) <ref> [ECN98] </ref> based on later developments are described, the distinction is made only to bring out the changes. 1 "Our" refers to ECN project team of C. Chen, H. Krishnan, S. Leung, N. <p> These changes have been been approved by the IPv6 working group only for experimental purposes. Hence these changes was made in UCLA-ECN <ref> [ECN98] </ref>.
Reference: [FEm98] <author> S. Floyd. </author> <booktitle> "Issues in ECN: Email discussions.", </booktitle> <year> 1998. </year>
Reference-contexts: In the later sections, ECN benefits for TCP are examined for complex topology with multiple congested 10 gateways. Finally conclusions based on the simulation study are offered in the last section. 2.2 Focus This simulation study focuses on the following issues <ref> [FEm98] </ref>. * Benefits (or not) of ECN TCP for short web transfers. * Benefits (or not) of ECN TCP for bulk data transfers. * Fairness (or not) of ECN TCP to non-ECN TCP flows. * Benefits of ECN TCP for multiple congested gateways. * Robustness of ECN with congestion in both
Reference: [FF96] <author> K. Fall and S. Floyd. </author> <title> "Simulation-based Comparisons of Tahoe, Reno, and SACK TCP." </title> <journal> Computer Communication Review, </journal> <volume> 26(3) </volume> <pages> 5-21, </pages> <month> July </month> <year> 1996. </year>
Reference-contexts: Thus we see that ECN reduces the packet drops and number of retransmissions during times of congestion and thus leads to better throughput. 2.5.2.1 ECN gains with different TCP extensions It is expected that ECN benefits will be less moderate with Sack [MR96] <ref> [FF96] </ref> or Newreno TCP than with other TCP extensions like Reno or Tahoe, during times 2 Another possibility is due to out of order delivery of packets.
Reference: [FJ93] <author> S. Floyd and V. Jacobson. </author> <title> "Random Early Detection Gateways for Congestion Avoidance." </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 3(1), </volume> <month> August </month> <year> 1993. </year>
Reference-contexts: Thus the limits of end-to-end congestion control were recognized and the need for support from the routers to control congestion was realized. The following sections reviews some of the gateway congestion control mechanisms that have been proposed for packet switched networks. While there are many proposed schemes [Has89] [MK92] <ref> [FJ93] </ref> [RJ90] [FJ93] the following section only looks at few them i.e., RED [FJ93] and DECbit [RJ90] that are related to the topic of study in this report. Finally, a more recently proposed scheme, which forms the topic of study in this report, ECN [Flo94] is described. <p> The following sections reviews some of the gateway congestion control mechanisms that have been proposed for packet switched networks. While there are many proposed schemes [Has89] [MK92] <ref> [FJ93] </ref> [RJ90] [FJ93] the following section only looks at few them i.e., RED [FJ93] and DECbit [RJ90] that are related to the topic of study in this report. Finally, a more recently proposed scheme, which forms the topic of study in this report, ECN [Flo94] is described. <p> The following sections reviews some of the gateway congestion control mechanisms that have been proposed for packet switched networks. While there are many proposed schemes [Has89] [MK92] <ref> [FJ93] </ref> [RJ90] [FJ93] the following section only looks at few them i.e., RED [FJ93] and DECbit [RJ90] that are related to the topic of study in this report. Finally, a more recently proposed scheme, which forms the topic of study in this report, ECN [Flo94] is described. <p> Otherwise, the window is increased linearly. 1.3.2 Random Early Detection Random Early Detection (RED) is a gateway congestion avoidance scheme for packet switched networks proposed by Floyd et al. <ref> [FJ93] </ref>. A RED gateway detects incipient congestion based on the average queue size. The connections could then be notified of incipient congestion by either setting a bit in the packet headers or by dropping packets. RED gateways are designed to accompany a transport-layer congestion control protocol such as TCP. <p> Thus higher rate senders are penalized more. 1 A cycle is defined as busy + idle period. A gateway is busy when it is transmitting packets and idle otherwise 3 Several significant differences between RED gateways and DECbit are de-scribed in <ref> [FJ93] </ref>. The first difference is on the method of computing the average queue size. Because the DECbit scheme chooses the last cycle and the current busy for averaging the queue size, the queue size can sometimes be averaged over fairly short period of time. <p> Chen, H. Krishnan, S. Leung, N. Tang 2 Initially an earlier IPv6 INRIA version was used 40 3.2 ECN Router Side Support An ECN router uses RED <ref> [FJ93] </ref> queue management scheme to detect incipient congestion. Congestion is notified to the ECN capable transport 3 by setting a bit in the IPv6 header. However, for Non-ECN capable transport protocols packets are dropped rather than being marked resulting in their similar treatment as in RED routers.
Reference: [Flo94] <author> S. Floyd. </author> <title> "TCP and Explicit Congestion Notification." </title> <journal> ACM Computer Communications Review, </journal> <volume> 24, </volume> <month> October </month> <year> 1994. </year>
Reference-contexts: The ever increasing network traffic caused by the new wave of web applications based on TCP not only leads to network congestion and packet drops but also affects the performance of TCP drastically during times of congestion. Explicit Congestion Notification (ECN) for TCP <ref> [Flo94] </ref> is a proposal from Floyd for providing explicit congestion feedback for TCP. This is expected to benefit TCP during times of congestion since packet drops will be reduced. <p> Finally, a more recently proposed scheme, which forms the topic of study in this report, ECN <ref> [Flo94] </ref> is described. A survey of gateway congestion control schemes appears in [MR91]. 1.3 Gateway Congestion Avoidance Schemes 1.3.1 DECbit Gateways The DECbit congestion avoidance scheme is a binary feedback scheme for congestion avoidance proposed by Jain et al.[RJ90]. <p> max p . p b max p (avg min th )=(max th min th ) The final packet-marking probability p a increases slowly as the count 2 in-creases since the last marked packet: p a p b =(1 count p b ) 1.3.3 Explicit Congestion Notification Explicit Congestion Notification (ECN) <ref> [Flo94] </ref> is an enhancement to current RED implementations that marks packets for ECN Capable flows 3 rather than dropping packets. By marking packets an ECN gateway makes packet drops a rarity. This is especially useful for flows like TCP that are sensitive to even a single packet loss. <p> There are three main features of adding ECN support to TCP. 4 The words router and gateway are used interchangeably in this report 5 Floyd also refers to overloaded one-bit approach for adding ECN support in <ref> [Flo94] </ref>. <p> These two bits are referred to as ECN capable transport bit (ECT or EC bit) and Congestion Experienced bit (CE or EN bit) respectively. The CE bit is set only for packets with the ECT bit set. Floyd <ref> [Flo94] </ref> also describes an equivalent approach with just one-bit rather than using two bits 4 . UCLA-ECNv1 used the first two bits in the flow label field of the IPv6 header [DH95] for EC (or ECT) and EN (or CE) bits.
Reference: [Has89] <author> E. Hashem. </author> <title> "Analysis of random drop for gateway congestion control." </title> <type> Rep. </type> <institution> lcs tr-465, Lab. for Comput. Sci., M.I.T., </institution> <year> 1989. </year>
Reference-contexts: Thus the limits of end-to-end congestion control were recognized and the need for support from the routers to control congestion was realized. The following sections reviews some of the gateway congestion control mechanisms that have been proposed for packet switched networks. While there are many proposed schemes <ref> [Has89] </ref> [MK92] [FJ93] [RJ90] [FJ93] the following section only looks at few them i.e., RED [FJ93] and DECbit [RJ90] that are related to the topic of study in this report. Finally, a more recently proposed scheme, which forms the topic of study in this report, ECN [Flo94] is described.
Reference: [Hoe96] <author> J. Hoe. </author> <title> "Improving the start-up behavior of a congestion control scheme for TCP." </title> <booktitle> In Proceedings of ACM SIGCOMM Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications, </booktitle> <pages> pp. 270-280, </pages> <address> New York, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: All simulation results are obtained with NewReno TCP senders. NewReno is a proposal from <ref> [Hoe96] </ref> that requires only sender side changes to TCP to recover from multiple losses in a window of data. 13 2.5.1 Simulation Details All TCP flows in this simulation use NewReno TCP. Two congesting flows (both non-ECN TCP) are started at the instant t = 0.
Reference: [HS97] <author> S. Seshan H. Balakrishnan, V. Padmanabhan and M. Stemm. </author> <title> "TCP Behaviour of a Busy Internet Server: Analysis and Improvements." </title> <booktitle> 1997. [INR97] "IPv6 implementation for FreeBSD, </booktitle> <address> ftp://ftp.inria.fr/network/ipv6/.", </address> <year> 1997. </year>
Reference-contexts: 1000 web transfers the tcp senders and receivers were distributed among many nodes each connecting the bottleneck link routers by 10Mbps, 2ms links. 21 2.7.2 Comments It is important to note that with short web transfers most of TCP loss recovery is expected to be with timeouts as described in <ref> [HS97] </ref>. This is due to the fact with less data to send the congestion window maynot reach a high value to generate enough duplicate acks (3 for Reno TCP) for loss recovery. <p> This gradually increasing transfer times was due to multiple losses with many retransmissions and time outs. A recent study based on measurements with a busy web server <ref> [HS97] </ref> shows that more than 50% of the retransmissions for short web transfers are due to timeouts due to multiple losses in a window and due to insufficient duplicate acknowledgements. These timeouts are costly due to high round trip times (360ms in this case) with multiple congested gateways.
Reference: [Jac88] <author> V. Jacobson. </author> <title> "Congestion Avoidance and Control." </title> <booktitle> In Proceedings of SIGCOMM '88, </booktitle> <address> Stanford, CA, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: Hence it becomes important to study and understand ECN benefits for TCP. 1.2 Introduction TCP [Pos81] congestion control has been an active area of research for the last decade. Most of the work focussed on improving TCP's ability to dynamically adjust to network congestion. Algorithms like slow-start, congestion avoidance <ref> [Jac88] </ref> play an integral part of TCP's congestion control. However, these algorithms treat network as a black-box, where network doesn't play any role in controlling network congestion. In effect congestion control mechanisms were 1 provided only by end-to-end hosts.
Reference: [JLM96] <author> C. Leres V. Jacobson and S. McCanne. </author> <title> "Tcpdump A tool to dump traffic on a network.", </title> <month> July </month> <year> 1996. </year>
Reference-contexts: ECN negotiation and correct setting of ECT and CE bits were verified from tcpdump <ref> [JLM96] </ref> traces.
Reference: [LC91] <author> S. Shenker L. Zhang and D. D. Clark. </author> <title> "Observations on the Dynamics of a Congestion Control Algorithm: The Effects of Two-Way Traffic." </title> <booktitle> Proc. SIGCOMM '91, </booktitle> <year> 1991. </year>
Reference-contexts: In this simulation we consider a scenario where there is congestion on both data path and the ack path. Hence there is a possibility of both data and ack packets getting lost. Zhang et al. <ref> [LC91] </ref> describes several phenomena such as ACK-compression peculiar to two-way traffic which gives rise to rapid fluctuations in 31 the queue length. However, to decouple the effects of ECN under study from the phenomenon peculiar to two-way TCP traffic as described in [LC91] the number of TCP flows were increased. <p> Zhang et al. <ref> [LC91] </ref> describes several phenomena such as ACK-compression peculiar to two-way traffic which gives rise to rapid fluctuations in 31 the queue length. However, to decouple the effects of ECN under study from the phenomenon peculiar to two-way TCP traffic as described in [LC91] the number of TCP flows were increased. Before looking into robustness for ECN TCP it is important to note that TCP itself is inherently robust with loss of ACK packets. This is due to its cumulative acknowledgements.
Reference: [MK92] <author> P. Mishra and H. Kanakia. </author> <title> "A hop by hop rate based congestion control scheme." </title> <booktitle> Proc. SIGCOMM '92, </booktitle> <pages> pp. 112-123, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: Thus the limits of end-to-end congestion control were recognized and the need for support from the routers to control congestion was realized. The following sections reviews some of the gateway congestion control mechanisms that have been proposed for packet switched networks. While there are many proposed schemes [Has89] <ref> [MK92] </ref> [FJ93] [RJ90] [FJ93] the following section only looks at few them i.e., RED [FJ93] and DECbit [RJ90] that are related to the topic of study in this report. Finally, a more recently proposed scheme, which forms the topic of study in this report, ECN [Flo94] is described.
Reference: [MLD] <author> D. Y. Lee P. E. Mckenney and B. A. Denny. </author> <title> "Traffic Generator Software release notes.". </title>
Reference-contexts: All traffic was generated using a tool called tg <ref> [MLD] </ref>, a traffic generator for FreeBSD. The following charts shows the throughput results of ECN capable TCP against non-ECN capable TCP for two different levels of congestion. The results were averaged over 100 runs.
Reference: [MR91] <author> A. Mankin and K.K. Ramakrishnan. </author> <title> "Gateway congestion control survey." RFC 1254, </title> <editor> p. </editor> <volume> 21, </volume> <month> August </month> <year> 1991. </year>
Reference-contexts: Finally, a more recently proposed scheme, which forms the topic of study in this report, ECN [Flo94] is described. A survey of gateway congestion control schemes appears in <ref> [MR91] </ref>. 1.3 Gateway Congestion Avoidance Schemes 1.3.1 DECbit Gateways The DECbit congestion avoidance scheme is a binary feedback scheme for congestion avoidance proposed by Jain et al.[RJ90]. A DECbit gateway uses a congestion indication bit in the packet headers to provide congestion feedback.
Reference: [MR96] <author> S. Floyd M. Mathis, J. Mahdavi and A. Romanow. </author> <title> "TCP Selective Acknowldegement Options." </title> <booktitle> RFC 2018, </booktitle> <month> April </month> <year> 1996. </year>
Reference-contexts: Thus we see that ECN reduces the packet drops and number of retransmissions during times of congestion and thus leads to better throughput. 2.5.2.1 ECN gains with different TCP extensions It is expected that ECN benefits will be less moderate with Sack <ref> [MR96] </ref> [FF96] or Newreno TCP than with other TCP extensions like Reno or Tahoe, during times 2 Another possibility is due to out of order delivery of packets.
Reference: [NS98] <institution> Contributors list in http://www-mash.cs.berkeley.edu/ns/ns contributors.html. "UCB/LBNL/VINT Network Simulator - ns version 2.1b2.", </institution> <month> January </month> <year> 1998. </year>
Reference-contexts: The subsequent sections describes the simulation study of each of these issues in detail. All the simulations are done using NS-2.1b2 <ref> [NS98] </ref>. 2.3 Terms To avoid circumlocution the following terms are defined. These terms will be used throughout this report. * Congesting Flows These are TCP flows that are mainly used to create congestion in the routers.
Reference: [PF97] <author> V. Paxon and S. Floyd. </author> <title> "Why We Don't Know How To Simulate The Internet." </title> <booktitle> Proceedings of the 1997 Winter Simulation Conference, </booktitle> <month> December </month> <year> 1997. </year>
Reference-contexts: ECN benefits for TCP are expected to be negligible during times of no congestion. While protocols like TCP work in large scale heterogeneous distributed environment, simulating such environments for studying effects of even simple modifications to these protocols is very difficult as described by Paxon et al. in <ref> [PF97] </ref> given the enormous heterogeneity in traffic mix, traffic conditions and several large scale effects. Nevertheless, it is hoped that this simulation would help in understanding some basic qualitative features that was intended to be studied.
Reference: [Pos81] <author> J. Postel. </author> <title> "Transmission Control Protocol DARPA Internet Program Protocol Specification." </title> <type> RFC 793, </type> <month> September </month> <year> 1981. </year>
Reference-contexts: This is expected to benefit TCP during times of congestion since packet drops will be reduced. Hence it becomes important to study and understand ECN benefits for TCP. 1.2 Introduction TCP <ref> [Pos81] </ref> congestion control has been an active area of research for the last decade. Most of the work focussed on improving TCP's ability to dynamically adjust to network congestion. Algorithms like slow-start, congestion avoidance [Jac88] play an integral part of TCP's congestion control.
Reference: [RF97] <author> K.K. Ramakrishnan and S. Floyd. </author> <title> "A Proposal to add Explicit Congestion Notification (ECN) to IPv6 and to TCP." </title> <type> IETF Draft draft-kksjf-ECN-00.txt, </type> <month> November </month> <year> 1997. </year>
Reference-contexts: It is important to note that adding ECN for TCP requires changes to both TCP implementation in the hosts and as well as adding support in the routers to mark the packets instead of dropping them. Ramakrishnan and Floyd <ref> [RF97] </ref> have proposed to add ECN support for IPv6 [DH95] and to TCP. The following sections briefly describes ECN support for TCP in hosts and routers. <p> entire 8 connection. * Echoing congestion indication back to the sender: Since only the sender side TCP does congestion control it is important for the receiver to echo the congestion indication information for the forward path back to the sender. * Sender TCP's reaction to congestion indication: As described in <ref> [RF97] </ref>, sender TCP's reaction to congestion indication should be similar to packet loss. In particular, it should reduce the congestion window by a factor of half and reduce its slow start threshold based on the reduced congestion window. 1.4 Organization of this report This report is organized into two parts. <p> Finally some preliminary measurements made on the implementation test-bed are shown. Our 1 implementation is on FreeBSD 2.2.2 [FBD97] and for RenoTCP over IPv6. The IPv6 implementation was from INRIA 2 [INR97]. Our implementation was largely based on the proposal from Floyd et al. in <ref> [RF97] </ref>. The following sections describe the router side and the host side support in UCLA-ECN implementation.
Reference: [RJ90] <author> K.K. Ramakrishnan and R. Jain. </author> <title> "A Binary feedback scheme for congestion avoidance in computer networks." </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 8(2) </volume> <pages> 158-181, </pages> <year> 1990. </year>
Reference-contexts: The following sections reviews some of the gateway congestion control mechanisms that have been proposed for packet switched networks. While there are many proposed schemes [Has89] [MK92] [FJ93] <ref> [RJ90] </ref> [FJ93] the following section only looks at few them i.e., RED [FJ93] and DECbit [RJ90] that are related to the topic of study in this report. Finally, a more recently proposed scheme, which forms the topic of study in this report, ECN [Flo94] is described. <p> The following sections reviews some of the gateway congestion control mechanisms that have been proposed for packet switched networks. While there are many proposed schemes [Has89] [MK92] [FJ93] <ref> [RJ90] </ref> [FJ93] the following section only looks at few them i.e., RED [FJ93] and DECbit [RJ90] that are related to the topic of study in this report. Finally, a more recently proposed scheme, which forms the topic of study in this report, ECN [Flo94] is described.
Reference: [SEC98] <author> S. Floyd. </author> <note> "http://www-nrg.ee.lbl.gov/floyd/ECN-IP.txt.", January 1998. </note>
Reference-contexts: UCLA-ECNv1 used the first two bits in the flow label field of the IPv6 header [DH95] for EC (or ECT) and EN (or CE) bits. These bit positions are changed in UCLA-ECNv2 based on the new proposal for first word of IPv6 header in [DH997] and are described in <ref> [SEC98] </ref>. The modified IPv6 header format in UCLA-ECNv1 is shown in figure 3.1. The position of ECT and CE bits were changed from bit positions 5 8 and 9 to bit positions 10 and 11 in the IPv6 header. <p> This change is based on the current proposal [DH997] for the first word of the IPv6 header and mapping the IPv4 TOS byte to the IPv6 traffic class field as described in <ref> [SEC98] </ref>. These changes have been been approved by the IPv6 working group only for experimental purposes. Hence these changes was made in UCLA-ECN [ECN98].
References-found: 26

