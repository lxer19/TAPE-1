URL: http://www-ccs.cs.umass.edu/recpub-rts/WMDRTSS97.ps
Refering-URL: http://www-ccs.cs.umass.edu/recpub-rts/index.html
Root-URL: 
Email: e-mail: mizunuma, takegaki@con.sdl.melco.co.jp  
Title: Implementation and Performance of MidART  
Author: Oscar Gonzalez Chia Shen Ichiro Mizunuma Morikazu Takegaki 
Address: Amherst, MA 01003 Cambridge, MA 02139  8-1-1, Tsukaguchi-honmachi, Amagaski, Hyogo, 661  
Affiliation: Computer Science Department MERL A Mitsubishi Electric Research Lab. University of Massachusetts 201 Broadway  Industrial Electronics and Systems Lab. Mitsubishi Electric Corp.  
Abstract: In this paper, we describe our experience in the implementation of MidART Middleware and network Architecture for distributed Real-Time systems. Our MidART project addresses the problem of middleware design to support high speed network based distributed real-time applications. The uniqueness of MidART lies in the simplicity of services provided and the flexibility of data reflection models, compared with more general purpose but much more complicated middle-ware such as CORBA implementations. This simplicity leads to ease of understanding and ease of use by application builders, while its flexiblity sufficiently serves the needs of the class of real-time applications MidART is designed for. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Amza, A. L. Cox, S. Dwarkadas, P. Keleher, H. Lu, R. Rajamony, W. Yu, and W. Zwaenepoel. TreadMarks: </author> <title> Shared Memory Computing on Networks of Workstations. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 18-28, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: Other work and technology that are also related to MidART include distributed shared memory (DSM) <ref> [1] </ref>, reflective memory [10], and memory channels [2]. The Real-Time Channel-based Reflective Memory in MidART is much more flexible compared with either the hardware supported reflective memory and memory channels, or the software supported distributed shared memory.
Reference: [2] <author> Digital Equiqment Corporation. </author> <title> Memory Channel Overview. </title> <address> www.unix.digital.com/bin/textit/ cluster/memchanl/memchanl.html, </address> <month> May 29 </month> <year> 1996. </year>
Reference-contexts: Other work and technology that are also related to MidART include distributed shared memory (DSM) [1], reflective memory [10], and memory channels <ref> [2] </ref>. The Real-Time Channel-based Reflective Memory in MidART is much more flexible compared with either the hardware supported reflective memory and memory channels, or the software supported distributed shared memory.
Reference: [3] <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <editor> 2.0 ed. </editor> <month> July </month> <year> 1995. </year>
Reference-contexts: For more detail of Selective Channels and RT CRM, readers are refered to [5] and [7]. The uniqueness of MidART lies in the simplicity of services provided and the flexibility of data reflection models, compared with more general purpose but much more complicated middleware such as CORBA implementations <ref> [3] </ref> [6].
Reference: [4] <author> T. Harrison, D. Levine, and D. Schmidt. </author> <title> The Design and Performance of a Real-Time CORBA Event Service. </title> <booktitle> In OOPSLA '97, </booktitle> <month> October </month> <year> 1997. </year>
Reference-contexts: A Create call does the following: 1) Contacts global server to obtain id. 2) Creates memory area (allocates buffers and locks them into memory) 3) Creates mutex for read/write access. 4) Creates an event to synchronize with DPA thread. 6 Related Work Recently <ref> [4] </ref> has reported the design and implementation of a real-time CORBA event service.
Reference: [5] <author> I. Mizunuma, C. Shen, and M. Takegaki. </author> <title> Mid-dleware for Distributed Industrial Real-Time Systems on ATM Networks. </title> <booktitle> In 17th IEEE Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: To facilitate the construction of distributed real-time applications on open off-the-shelf systems, we must first provide easy-to-use real-time programming models and services to the real-time application designers. In this paper, we describe our experience in the implementation of MidART Middleware and network Architecture for distributed Real-Time systems <ref> [5] </ref>. Our MidART project addresses the problem of mid-dleware design to support high speed network based distributed real-time applications. The class of applications we are dealing with are those in which humans need to interact (e.g., control and monitoring) with instruments and devices in a networked environment through computer-based interfaces. <p> The end-to-end delay requirements for these applications range from one or two milliseconds to hundreds of milliseconds. Our initial proof of concept prototype was constructed on PC running QNX real-time operating system over ATM networks as reported in <ref> [5] </ref>. Currently the project has evolved to implement the entire mid-dleware in C++ on Windows NT as well as Unix platforms with Fast Ethernet. <p> The focus of our middleware is to support the end-to-end application real-time data transfer requirements with a set of easy-to-use communication service programming interfaces. The two key services provided by MidART are Real-Time Channel-Based Reflective Memory (RT-CRM) [7] and Selective Channels <ref> [5] </ref>. Selective Channels allow applications to dynamically choose the remote node (s) which data is to be viewed from and sent to at run time. <p> There can be many data push agent threads representing many readers associated with the same writer memory area. * RT-CRM supports both synchronous and asyn chronous data reflection models. For more detail of Selective Channels and RT CRM, readers are refered to <ref> [5] </ref> and [7]. The uniqueness of MidART lies in the simplicity of services provided and the flexibility of data reflection models, compared with more general purpose but much more complicated middleware such as CORBA implementations [3] [6]. <p> In particular, a multicast control channel must exist to run the Selective Channel prototcol as described in <ref> [5] </ref>. * The Scheduler module is responsible for the scheduling of the active DPA and receiver objects. Currently, we are in the process of evaluating the benefits of using rate-based and/or fixed priority rate monotonic algorithms. * The Fault Tolerance module provides two optional services. <p> A brief description of each of these threads follows: The Selective Channel Server is implemented as sequential UDP server. It supports the channel switching protocol describe in <ref> [5] </ref>. This protocol enables an application to start or stop the DPA thread associated with a particular ReMA. The thread handling the communication with the Global Server implements a TCP client. Once the connection is established, it remains open as long as the LS is active.
Reference: [6] <author> D. Schmidt, A. Gokhale, T. Harrison, and G. Parulkar. </author> <title> A High-Performance Endsystem Architecture for Real-time CORBA. </title> <journal> In IEEE Communications Magazine, </journal> <volume> volume 14, </volume> <month> Feb. </month> <year> 1997. </year>
Reference-contexts: For more detail of Selective Channels and RT CRM, readers are refered to [5] and [7]. The uniqueness of MidART lies in the simplicity of services provided and the flexibility of data reflection models, compared with more general purpose but much more complicated middleware such as CORBA implementations [3] <ref> [6] </ref>.
Reference: [7] <author> C. Shen and I. Mizunuma. RT-CRM: </author> <title> Real-Time Channel-Based Reflective Memory. </title> <booktitle> In IEEE Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: The focus of our middleware is to support the end-to-end application real-time data transfer requirements with a set of easy-to-use communication service programming interfaces. The two key services provided by MidART are Real-Time Channel-Based Reflective Memory (RT-CRM) <ref> [7] </ref> and Selective Channels [5]. Selective Channels allow applications to dynamically choose the remote node (s) which data is to be viewed from and sent to at run time. <p> There can be many data push agent threads representing many readers associated with the same writer memory area. * RT-CRM supports both synchronous and asyn chronous data reflection models. For more detail of Selective Channels and RT CRM, readers are refered to [5] and <ref> [7] </ref>. The uniqueness of MidART lies in the simplicity of services provided and the flexibility of data reflection models, compared with more general purpose but much more complicated middleware such as CORBA implementations [3] [6]. <p> The Real-Time Channel-based Reflective Memory in MidART is much more flexible compared with either the hardware supported reflective memory and memory channels, or the software supported distributed shared memory. Due to space limitations, we will not fully review these technologies and interested readers are refered to <ref> [7] </ref> for an in-depth comparison. 7 Concluding Remarks We have described the implementation and preliminary performance results of MidART. As the application-to-application round trip delay tests show, our current implementation can support the class of real-time applications which MidART is designed for.
Reference: [8] <author> M. Timmerman and J-C. Monfret. </author> <title> Windows NT as Real-Time OS?. Real-Time Magazine, </title> <month> Q2 </month> <year> 1997. </year>
Reference-contexts: It is known that although Windows NT provides real-time class priorities to threads and nondegradable priority scheduling, the OS itself does introduce priority inversion problems <ref> [8] </ref>. Thus another item of our current work is obtaining experimental data on how bad the priority inversion problem is with respect to MidART threads and its application threads.
Reference: [9] <author> M. Timmerman and J-C. Monfret. </author> <title> Windows NT Real-Time Extensions: an Overview. Real-Time Magazine, </title> <month> Q3 </month> <year> 1997. </year>
Reference-contexts: One possibility is that this priority inversion problem can be masked via careful design, e.g., rate control network I/O traffic, and limiting the amount of critical section and GUI activities. We are also studying an alternative of using one of the real-time Windows NT extensions <ref> [9] </ref>. As mentioned in Section 1.1, the uniqueness of Mi-dART lies in the simplicity of services provided and the flexibility of data reflection models.
Reference: [10] <author> VME Microsystems International Corporation. </author> <title> Reflective Memory Network. </title> <type> White Paper, </type> <month> Febru-ary </month> <year> 1996. </year>
Reference-contexts: Other work and technology that are also related to MidART include distributed shared memory (DSM) [1], reflective memory <ref> [10] </ref>, and memory channels [2]. The Real-Time Channel-based Reflective Memory in MidART is much more flexible compared with either the hardware supported reflective memory and memory channels, or the software supported distributed shared memory.
References-found: 10

