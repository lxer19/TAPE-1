URL: http://www.csc.ncsu.edu/faculty/riely/papers/98hlcl.ps.gz
Refering-URL: http://www.csc.ncsu.edu/faculty/riely/papers.html
Root-URL: http://www.csc.ncsu.edu
Email: matthewh@cogs.susx.ac.uk  riely@csc.ncsu.edu  
Title: Resource Access Control in Systems of Mobile Agents (Extended Abstract)  
Author: Matthew Hennessy James Riely 
Address: Brighton, UK  Raleigh, NC, USA  
Affiliation: School of Cognitive and Computing Sciences Univ. of Sussex  Department of Computer Science North Carolina State Univ.  
Note: HLCL'98 to appear  
Abstract: We describe a typing system for a distributed p-calculus which guarantees that distributed agents cannot access the resources of a system without first being granted the capability to do so. The language studied allows agents to move between distributed locations and to augment their set of capabilities via communication with other agents. The type system is based on the novel notion of a location type, which describes the set of resources available to an agent at a location. Resources are themselves equipped with capabilities, and thus an agent may be given permission to send data along a channel at a particular location without being granted permission to read data along the same channel. We also describe a tagged version of the language, where the capabilities of agents are made explicit in the syntax. Using this tagged language we define access violations as runtime errors and prove that well-typed programs are incapable of such errors. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Amadio and S. Prasad. </author> <title> Modelling IP mobility. </title> <type> Internal Report 244, </type> <institution> Laboratoire d'Informatique de Marseille, </institution> <year> 1997. </year>
Reference: [2] <author> R. Amadio. </author> <title> An asynchronous model of locality, failure, and process mobility. In COORDINATION '97, </title> <booktitle> volume 1282 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Sewell [23] generalizes the type system of [22] to distinguish between local communication, which can be efficiently implemented, and non-local communication. Fournet et al. [10] have developed an ML-style typing system for the join calculus where channels are allowed a certain amount of polymorphism. Amadio <ref> [2] </ref> has presented a type system that guarantees that channel names are defined at exactly one location, whereas the type system of Kobayashi et al. [17] ensures that some channels are used linearly. The work closest to ours is that of de Nicola, Ferrari and Pugliese [7].
Reference: [3] <author> L. Cardelli and A. D. Gordon. </author> <title> Mobile ambients. </title> <editor> In Maurice Nivat, editor, </editor> <booktitle> Proc. FOSSACS'98, International Conference on Foundations of Software Science and Computation Structures, volume 1378 of Lecture Notes in Computer Science, </booktitle> <pages> pages 140155. </pages> <publisher> Springer-Verlag, </publisher> <year> 1998. </year>
Reference: [4] <author> L. Cardelli. </author> <title> A language with distributed scope. </title> <booktitle> Computing Systems, </booktitle> <address> 8(1):2759, </address> <month> January </month> <year> 1995. </year> <note> A preliminary version appeared in Proceedings of the 22nd ACM Symposium on Principles of Programming. </note>
Reference-contexts: These include Java [24], Odyssey [11], Aglets [15], Voyager [20] and the latest revisions of the Internet protocol [21,1]. In addition to these commercial efforts, many prototype languages have been developed and implemented within the programming language research community examples include Linda [5,6], Facile [12], Obliq <ref> [4] </ref>, Infospheres [8], and the join calculus [9]. In this paper we address the issue of resource access control for such languages. Central to the paradigm of mobile computation are the notions of agent, resource and location. Agents are effective entities that perform computation and interact with other agents.
Reference: [5] <author> N. Carriero and D. Gelernter. </author> <title> Linda in context. </title> <journal> Communications of the ACM, </journal> <volume> 32(4):444458, </volume> <year> 1989. </year>
Reference: [6] <author> N. Carriero, D. Gelernter, and L. Zuck. Bauhaus Linda. </author> <title> In Object-Based Models and Languages for Concurrent Systems, </title> <booktitle> number 924 in Lecture Notes in Computer Science, </booktitle> <pages> pages 6676. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: The work closest to ours is that of de Nicola, Ferrari and Pugliese [7]. Their goals are the same as ours, but the specifics of their solution are quite different. They work with a variant of Linda <ref> [6] </ref> with multiple tuple spaces. Tuple spaces correspond to locations in our setting, and tuples (named data) correspond to resources. The type system of [7] controls access to tuple spaces, rather than to specific tuples, and thus provides coarser-grained control of resource access than that provided by our typing system.
Reference: [7] <author> R. De Nicola, G. Ferrari, and R. Pugliese. </author> <title> Coordinating mobile agents via blackboards and access rights. In COORDINATION '97, </title> <booktitle> volume 1282 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Amadio [2] has presented a type system that guarantees that channel names are defined at exactly one location, whereas the type system of Kobayashi et al. [17] ensures that some channels are used linearly. The work closest to ours is that of de Nicola, Ferrari and Pugliese <ref> [7] </ref>. Their goals are the same as ours, but the specifics of their solution are quite different. They work with a variant of Linda [6] with multiple tuple spaces. Tuple spaces correspond to locations in our setting, and tuples (named data) correspond to resources. The type system of [7] controls access <p> and Pugliese <ref> [7] </ref>. Their goals are the same as ours, but the specifics of their solution are quite different. They work with a variant of Linda [6] with multiple tuple spaces. Tuple spaces correspond to locations in our setting, and tuples (named data) correspond to resources. The type system of [7] controls access to tuple spaces, rather than to specific tuples, and thus provides coarser-grained control of resource access than that provided by our typing system.
Reference: [8] <author> K.M. Chandy et al. </author> <title> A world-wide distributed system using java and the internet. </title> <booktitle> In IEEE International Symposium on High Performance Distributed Computing. IEEE, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: These include Java [24], Odyssey [11], Aglets [15], Voyager [20] and the latest revisions of the Internet protocol [21,1]. In addition to these commercial efforts, many prototype languages have been developed and implemented within the programming language research community examples include Linda [5,6], Facile [12], Obliq [4], Infospheres <ref> [8] </ref>, and the join calculus [9]. In this paper we address the issue of resource access control for such languages. Central to the paradigm of mobile computation are the notions of agent, resource and location. Agents are effective entities that perform computation and interact with other agents.
Reference: [9] <author> C. Fournet, G. Gonthier, J.J. Levy, L. Marganget, and D. Remy. </author> <title> A calculus of mobile agents. </title> <editor> In U. Montanari and V. Sassone, editors, </editor> <booktitle> CONCUR: Proceedings of the International Conference on Concurrency Theory, volume 1119 of Lecture Notes in Computer Science, </booktitle> <pages> pages 406421, </pages> <address> Pisa, </address> <month> August </month> <year> 1996. </year> <note> Springer-Verlag. </note>
Reference-contexts: In addition to these commercial efforts, many prototype languages have been developed and implemented within the programming language research community examples include Linda [5,6], Facile [12], Obliq [4], Infospheres [8], and the join calculus <ref> [9] </ref>. In this paper we address the issue of resource access control for such languages. Central to the paradigm of mobile computation are the notions of agent, resource and location. Agents are effective entities that perform computation and interact with other agents. <p> For example in the join calculus <ref> [9] </ref> message routing is automatic as the restricted syntax ensures that all channels have a unique location at which they are serviced. In Dp, to send a message to a remote location, an agent must first spawn a sub-agent which moves to that location; locations are more visible in Dp.
Reference: [10] <author> C. Fournet, C. Laneve, L. Maranget, and D. Remy. </author> <title> Implicit typing la ml for the join-calculus. </title> <booktitle> In CONCUR: Proceedings of the International Conference on Concurrency Theory, Lecture Notes in Computer Science, </booktitle> <address> Warsaw, </address> <month> August </month> <year> 1997. </year> <note> Springer-Verlag. </note>
Reference-contexts: For example in [22], Pierce and Sangiorgi define a type system for the p-calculus with read and write capabilities on channels. Sewell [23] generalizes the type system of [22] to distinguish between local communication, which can be efficiently implemented, and non-local communication. Fournet et al. <ref> [10] </ref> have developed an ML-style typing system for the join calculus where channels are allowed a certain amount of polymorphism.
Reference: [11] <institution> General Magic Inc. Agent technology. hhtp://www.genmagic.com/html/agent overview.html, </institution> <year> 1997. </year> <note> 14 Hennessy and Riely </note>
Reference-contexts: 1 Introduction Mobile computation, where independent agents roam widely distributed networks in search of resources and information, is fast becoming a reality. A number of programming languages, APIs and protocols have recently emerged which seek to provide high-level support for mobile agents. These include Java [24], Odyssey <ref> [11] </ref>, Aglets [15], Voyager [20] and the latest revisions of the Internet protocol [21,1]. In addition to these commercial efforts, many prototype languages have been developed and implemented within the programming language research community examples include Linda [5,6], Facile [12], Obliq [4], Infospheres [8], and the join calculus [9].
Reference: [12] <author> A. Giacalone, P. Mishra, and S. Prasad. </author> <title> A symmetric integration of concurrent and functional programming. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 18(2):121 160, </volume> <year> 1989. </year>
Reference-contexts: These include Java [24], Odyssey [11], Aglets [15], Voyager [20] and the latest revisions of the Internet protocol [21,1]. In addition to these commercial efforts, many prototype languages have been developed and implemented within the programming language research community examples include Linda [5,6], Facile <ref> [12] </ref>, Obliq [4], Infospheres [8], and the join calculus [9]. In this paper we address the issue of resource access control for such languages. Central to the paradigm of mobile computation are the notions of agent, resource and location.
Reference: [13] <author> N. Heintz and J.G. Riecke. </author> <title> The SLam calculus: Programming with secrecy and integrity. </title> <booktitle> In Conference Record of the ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Diego, </address> <month> January </month> <year> 1998. </year> <note> ACM Press. </note>
Reference: [14] <author> M. Hennessy and J. Riely. </author> <title> Resource access control in systems of mobile agents. </title> <institution> Computer Science Technical Report 2/98, University of Sussex, </institution> <year> 1998. </year> <note> Available from http://www.cogs.susx.ac.uk/. </note>
Reference-contexts: We end with a brief comparison with related work. In this extended abstract all proofs are omitted, as are many other details, including some definitions. The reader is referred to the published technical report <ref> [14] </ref> for a full account. 2 The Language A typical Dp network is the following: `JPK j (n k a:A) (`JQK j kJRK) There are three agents running in parallel: `JPK and `JQK running at location ` and kJRK running at location k.
Reference: [15] <institution> IBM Corp. The IBM aglets workbench. </institution> <note> http://www.trl.ibm.co.jp/aglets/, 1996. </note>
Reference-contexts: 1 Introduction Mobile computation, where independent agents roam widely distributed networks in search of resources and information, is fast becoming a reality. A number of programming languages, APIs and protocols have recently emerged which seek to provide high-level support for mobile agents. These include Java [24], Odyssey [11], Aglets <ref> [15] </ref>, Voyager [20] and the latest revisions of the Internet protocol [21,1]. In addition to these commercial efforts, many prototype languages have been developed and implemented within the programming language research community examples include Linda [5,6], Facile [12], Obliq [4], Infospheres [8], and the join calculus [9].
Reference: [16] <author> G. Karjoth, D.B. Lange, and M. Oshima. </author> <title> A security model for aglets. </title> <journal> IEEE Internet Computing, </journal> <volume> 1(4), </volume> <year> 1997. </year>
Reference: [17] <author> N. Kobayashi, B.C. Pierce, and D.N. Turner. </author> <title> Linearity and the pi-calculus. </title> <booktitle> In Conference Record of the ACM Symposium on Principles of Programming Languages, </booktitle> <address> Paris, </address> <month> January </month> <year> 1996. </year> <note> ACM Press. </note>
Reference-contexts: Fournet et al. [10] have developed an ML-style typing system for the join calculus where channels are allowed a certain amount of polymorphism. Amadio [2] has presented a type system that guarantees that channel names are defined at exactly one location, whereas the type system of Kobayashi et al. <ref> [17] </ref> ensures that some channels are used linearly. The work closest to ours is that of de Nicola, Ferrari and Pugliese [7]. Their goals are the same as ours, but the specifics of their solution are quite different. They work with a variant of Linda [6] with multiple tuple spaces.
Reference: [18] <author> R. Milner. </author> <title> The polyadic p-calculus: a tutorial. </title> <type> Technical Report ECS-LFCS-91-180, </type> <institution> Laboratory for Foundations of Computer Science, Department of Computer Science, University of Edinburgh, UK, </institution> <month> October </month> <year> 1991. </year> <title> Also in Logic and Algebra of Specification, </title> <editor> ed. F. L. Bauer, W. Brauer and H. Schwichtenberg, </editor> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The language studied in this paper, called Dp, is a distributed variant of the p-calculus [19], and thus the resources of interest are channels which support binary communication between agents. We take agents to be located threads, which are simply terms of the ordinary polyadic p-calculus <ref> [18] </ref>, extended with primitives for movement between locations and for the creation of new locations. The type system is based on the notion of location types of the form: locfk 1 ; :::; k n g where each k i is a location capability.
Reference: [19] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A calculus of mobile processes, Parts I and II. Information and Computation, </title> <address> 100:177, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: Using this tagged language, we capture resource access violations as runtime errors and show that well-typed terms are incapable of such errors. The language studied in this paper, called Dp, is a distributed variant of the p-calculus <ref> [19] </ref>, and thus the resources of interest are channels which support binary communication between agents. We take agents to be located threads, which are simply terms of the ordinary polyadic p-calculus [18], extended with primitives for movement between locations and for the creation of new locations.
Reference: [20] <institution> ObjectSpace Inc. </institution> <note> Objectspace voyager. http://www.objectspace.com/voyager, 1997. </note>
Reference-contexts: A number of programming languages, APIs and protocols have recently emerged which seek to provide high-level support for mobile agents. These include Java [24], Odyssey [11], Aglets [15], Voyager <ref> [20] </ref> and the latest revisions of the Internet protocol [21,1]. In addition to these commercial efforts, many prototype languages have been developed and implemented within the programming language research community examples include Linda [5,6], Facile [12], Obliq [4], Infospheres [8], and the join calculus [9].
Reference: [21] <author> C. Perkins. </author> <title> IP mobility support. </title> <booktitle> RFC 2002, </booktitle> <year> 1996. </year>
Reference: [22] <author> B. Pierce and D. Sangiorgi. </author> <title> Typing and subtyping for mobile processes. </title> <note> Mathematical Structures in Computer Science, 6(5):409454, 1996. Extended abstract in LICS '93. </note>
Reference-contexts: But the subtyping relation on channel capabilities is more interesting: rhSi &lt; : rhTi if S &lt; : T whSi &lt; : whTi if T &lt; : S As one should expect from <ref> [22] </ref>, the read capability is covariant, whereas the write capability is contravariant. <p> The final constraint on channel types is a consistency requirement. It prevents agents from fabricating capabilities. For example, it prevents an agent from sending a value at type locfa:Ag and then receiving the same value at type locfa:A; b:Bg. Readers familiar with <ref> [22] </ref> will notice that Pierce and Sangiorgi's channel types PS types are also representable in our type system (ignoring recursion). <p> Location movement allows groups of running threads to be moved about the network asynchronously (i.e. without each thread performing an explicit go); for further discussion, see the full version. Many channel-based typing systems for p-calculi and related languages have been proposed. For example in <ref> [22] </ref>, Pierce and Sangiorgi define a type system for the p-calculus with read and write capabilities on channels. Sewell [23] generalizes the type system of [22] to distinguish between local communication, which can be efficiently implemented, and non-local communication. <p> Many channel-based typing systems for p-calculi and related languages have been proposed. For example in <ref> [22] </ref>, Pierce and Sangiorgi define a type system for the p-calculus with read and write capabilities on channels. Sewell [23] generalizes the type system of [22] to distinguish between local communication, which can be efficiently implemented, and non-local communication. Fournet et al. [10] have developed an ML-style typing system for the join calculus where channels are allowed a certain amount of polymorphism.
Reference: [23] <author> P. Sewell. </author> <title> Global/local subtyping for a distributed p-calculus. </title> <type> Technical Report 435, </type> <institution> Computer Laboratory, University of Cambridge, </institution> <month> August </month> <year> 1997. </year>
Reference-contexts: Many channel-based typing systems for p-calculi and related languages have been proposed. For example in [22], Pierce and Sangiorgi define a type system for the p-calculus with read and write capabilities on channels. Sewell <ref> [23] </ref> generalizes the type system of [22] to distinguish between local communication, which can be efficiently implemented, and non-local communication. Fournet et al. [10] have developed an ML-style typing system for the join calculus where channels are allowed a certain amount of polymorphism.
Reference: [24] <institution> Sun Microsystems Inc. Java home page. </institution> <note> http://www.javasoft.com/, 1995. 15 </note>
Reference-contexts: 1 Introduction Mobile computation, where independent agents roam widely distributed networks in search of resources and information, is fast becoming a reality. A number of programming languages, APIs and protocols have recently emerged which seek to provide high-level support for mobile agents. These include Java <ref> [24] </ref>, Odyssey [11], Aglets [15], Voyager [20] and the latest revisions of the Internet protocol [21,1].
References-found: 24

