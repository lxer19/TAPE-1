URL: http://www.research.att.com/library/trs/TRs/98/98.11/98.11.1.body.ps
Refering-URL: http://www.research.att.com/library/trs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fmab,jfg@research.att.com  angelos@dsl.cis.upenn.edu  
Phone: 2  
Title: KeyNote: Trust Management for Public-Key Infrastructures  
Author: Matt Blaze Joan Feigenbaum Angelos D. Keromytis 
Address: 180 Park Avenue Florham Park, NJ 07932 USA  200 S. 33rd Str., Philadelphia, PA 19104 USA  
Affiliation: 1 AT&T Labs Research  Distributed Systems Lab CIS Department, University of Pennsylvania  
Abstract: This paper discusses the rationale for designing a simple trust-management system for public-key infrastructures, called KeyNote. The motivating principles are expressiveness, simplicity, and extensibility. We believe that none of the existing public-key infrastructure pro posals provide as good a combination of these three factors.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> M. Blaze, J. Feigenbaum, and A. D. Keromytis, </author> <title> "The KeyNote Trust Management System," work in progress. </title> <type> Internet Draft, </type> <month> April </month> <year> 1998, </year> <note> http://www.cis.upenn.edu/~angelos/draft-angelos-spki-keynote.txt.gz. </note>
Reference-contexts: KeyNote determines whether proposed actions are consistent with local policy by applying the assertion predicates to the action environment. Although the basic design of KeyNote <ref> [1] </ref> is similar in spirit to that of Policy-Maker, KeyNote's features have been simplified to more directly support public key infrastructure-like applications. The central differences between PolicyMaker and KeyNote are: KeyNote predicates are written in a simple notation based on C-like expres sions and regular expressions. <p> Both systems are unnecessarily large and complex (because secure naming and authorization are orthogonal). Easily describable system. The basic KeyNote document <ref> [1] </ref> is 15 pages long, including an extensive examples section. We believe that such a compact document makes the system easy to understand. Constrast this size with other systems' documentation (especially those produced by committees!) Easy to understand and create assertions. The KeyNote assertion format is human-readabled, ASCII-based. <p> We believe that the combination of simplicity, expressiveness, and extensibility makes KeyNote well-suited for trust-management in public-key infrastructure. For more information about KeyNote, please read the Internet Draft <ref> [1] </ref>.
Reference: 2. <author> M. Blaze, J. Feigenbaum, and J. Lacy, </author> <title> "Decentralized Trust Management," </title> <booktitle> in Proceedings of the 17th Symposium on Security and Privacy, </booktitle> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <year> 1996, </year> <pages> pp. 164-173. </pages>
Reference-contexts: 1 Introduction Trust management, introduced in the PolicyMaker system <ref> [2] </ref>, is a unified approach to specifying and interpreting security policies, credentials, and relationships that allows direct authorization of security-critical actions. <p> some expense of generality. 4 Extensibility Two important components of a trust-management system are the assertion syntax and the compliance-checking algorithm. (Recall that "compliance checking" is the process of deciding whether a set of credential assertions prove that a request complies with a policy assertion.) In the PolicyMaker trust-management system <ref> [2, 3] </ref>, both the assertion syntax and the compliance-checking algorithm are proper generalizations of the corresponding components of KeyNote. This implies that KeyNote is highly extensible; indeed, its natural extension has already been implemented.
Reference: 3. <author> M. Blaze, J. Feigenbaum, and M. Strauss, </author> <title> "Compliance Checking in the PolicyMaker Trust Management System," </title> <booktitle> in Proceedings of the 2nd Financial Crypto Conference, Lecture Notes in Computer Science, </booktitle> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1998, </year> <note> to appear. Available in preprint form as AT&T Technical Report 98.3.2, http://www.research.att.com/library/trs/TRs/98/98.3/98.3.2.body.ps. </note>
Reference-contexts: some expense of generality. 4 Extensibility Two important components of a trust-management system are the assertion syntax and the compliance-checking algorithm. (Recall that "compliance checking" is the process of deciding whether a set of credential assertions prove that a request complies with a policy assertion.) In the PolicyMaker trust-management system <ref> [2, 3] </ref>, both the assertion syntax and the compliance-checking algorithm are proper generalizations of the corresponding components of KeyNote. This implies that KeyNote is highly extensible; indeed, its natural extension has already been implemented. <p> The PolicyMaker notion of "proof of compliance" is beyond the scope of this paper; it is discussed in full detail in <ref> [3] </ref>. Here we briefly explain one way in which PolicyMaker assertions generalize KeyNote assertions and why this generalization might be useful. A PolicyMaker assertion is a pair (f i ; s i ). The "source" s i is basically identical to the KeyNote SIGNER field. <p> Such non-boolean assertions are useful in several standard trust-management constructions, including those that require explicit control over "delegation depth." See <ref> [3, Section 3] </ref> for more details. Ellison et al. note that some applications may require more expressive power than the SPKI/SDSI certification framework provides, and they suggest the use of PolicyMaker to achieve this additional power.
Reference: 4. <author> C. Ellison, </author> <title> A Simple Public-Key Infrastructure, </title> <address> http://www.clark.net/pub/cme/html/spki.html. </address>
Reference-contexts: KeyNote assertions always return a boolean (authorized or not) answer. Credential signature verification is built in to the KeyNote system. Assertion syntax is based on a human-readable "RFC-822"-style syntax. Trusted actions are described by simple attribute/value pairs. SPKI/SDSI <ref> [4] </ref> also essentially attempts to do trust-management for public-key infrastructures. We believe that KeyNote provides a better solution, because it was designed to be simpler, more extensible, and more expressive than SPKI (and certainly than X.509 [7]). <p> Other approaches include name-based schemes (such as X.509 [7]), in which the infrastructure aims to provide a common application-independent certificate with each application left to develop its own mechanism to interpret the security semantics of the name, and SPKI/SDSI <ref> [4] </ref>, which attempts to provide both an authorization and a naming mechanism. Both systems are unnecessarily large and complex (because secure naming and authorization are orthogonal). Easily describable system. The basic KeyNote document [1] is 15 pages long, including an extensive examples section.
Reference: 5. <author> C. Ellison, B. Frantz, B. Lampson, R. Rivest, B. Thomas, and T. Ylonen, </author> <note> "SPKI Certificate Theory," http://www.clark.net/pub/cme/theory.txt </note>
Reference-contexts: Ellison et al. note that some applications may require more expressive power than the SPKI/SDSI certification framework provides, and they suggest the use of PolicyMaker to achieve this additional power. More precisely, <ref> [5, Section 7.3] </ref> contains the following suggestion: "For any trust policy which the full SPKI 5-tuple reduction can not express, one must write a policy interpretation program and PolicyMaker provides a language and body of examples for that purpose.
Reference: 6. <author> R. Rivest and B. Lampson, </author> <title> SDSI: A Simple Distributed Security Infrastructure, </title> <address> http://theory.lcs.mit.edu/~rivest/sdsi11.html. </address>
Reference: 7. <author> Consultation Committee, </author> <title> X.509: The Directory Authentication Framework, International Telephone and Telegraph, International Telecommunications Union, </title> <address> Geneva, </address> <year> 1989. </year>
Reference-contexts: Trusted actions are described by simple attribute/value pairs. SPKI/SDSI [4] also essentially attempts to do trust-management for public-key infrastructures. We believe that KeyNote provides a better solution, because it was designed to be simpler, more extensible, and more expressive than SPKI (and certainly than X.509 <ref> [7] </ref>). In the following sections, we expand on these three design principles. 2 Simplicity Simplicity in the design of KeyNote manifests itself in various aspects of the system: Narrow focus. KeyNote aims to provide a common, application-independent mechanism for use with application-specific credentials and policies. <p> KeyNote aims to provide a common, application-independent mechanism for use with application-specific credentials and policies. Each application (or class of applications) will develop its own set of attributes, with application-specific credentials and policies created to operate on them. Other approaches include name-based schemes (such as X.509 <ref> [7] </ref>), in which the infrastructure aims to provide a common application-independent certificate with each application left to develop its own mechanism to interpret the security semantics of the name, and SPKI/SDSI [4], which attempts to provide both an authorization and a naming mechanism.
References-found: 7

