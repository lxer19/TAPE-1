URL: http://seclab.cs.ucdavis.edu/~bishop/scriv/ucd-ecs-95-10.ps
Refering-URL: http://seclab.cs.ucdavis.edu/~bishop/scriv/index.html
Root-URL: http://www.cs.ucdavis.edu
Title: A Taxonomy of UNIX System and Network Vulnerabilities  
Author: Matt Bishop 
Note: This document was created with FrameMaker 4.0.4  
Date: May 1995  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Dan Farmer and Wietse Venema, </author> <title> Improving the Security of Your Site by Breaking Into It, </title> <address> USENET posting (Dec. </address> <year> 1993) </year>
Reference-contexts: That attackers can, and do, exploit system vulnerabilities is widely known; indeed, detailed descriptions of how to find vulnerable states have appeared in various periodicals such as PHRACK , and on the USENET <ref> [1] </ref>. All these discussions essentially show how to probe a system for clues that indicate the system is running software known to be vulnerable, or that it is being managed in such a way as to allow an attacker to exploit a vulnerability. <p> Summary scheme. As more aws are classified (and we emphasize that the 9 listed are by no means exhaus tive; for example, of the many aws listed in <ref> [1] </ref>, most are problems in configuring the protection domain, and experience shows these should be more dominant than in our sample), the data in these charts will become more complete, and more accurate conclusions can be drawn.
Reference: [2] <author> R. Bisbey II and D. Hollingsworth, </author> <title> Protection Analysis Project Final Report, </title> <journal> ISI/RR-78-13, DTIC AD A056816, USC/Information Sciences Institute (May, </journal> <note> 1978); cited in </note>
Reference-contexts: It introduced the notion of classes of vulnerabilities in which these were grouped by how well one aw suggested another. Work at the Information Sciences Institute <ref> [2] </ref> and Lawrence Livermore National Laboratories [9] extended this notion by postulating broad categories of aws and grouping known vulnerabilities into these categories. Independently, several penetration studies of systems were made [5][6][7]. In the late 1980s interest in the study of vulnerabilities became more prominent for two reasons. <p> Analysis of Previous Models We now consider previous models of security vulnerabilities. There are four main works: the Information Sciences Institute study <ref> [2] </ref>, the RISOS project [9], a study from the Naval Research Laboratory [3], and a discussion of vulnerabilities for intrusion detection [11]. <p> So for this section, we shall focus on both applications-level and program-level security problems, and omit discussion of kernel-level problems entirely. Those interested in such problems are referred to <ref> [2] </ref>. 4.1. Improper Choice of Initial Protection Domain The vulnerabilities in this class involve incorrectly set permissions when the system starts; these are configuration errors. Detection first requires a knowledge of the security policy, since that policy describes the proper configuration.
Reference: [3] <author> Carl E. Landwehr, Alan R. Bull, John P. McDermott, and William S. Choi, </author> <title> A Taxonomy of Computer Security Flaws with Examples, </title> <note> submitted for publication </note>
Reference-contexts: This helped drive the collection of system vulnerabilities and their integration into a database; and since it would be desirable to have the intrusion detection system find new attacks, the interest in classifying vulnerabilities grew, with an eye towards being able to detect new ones. Work by <ref> [3] </ref> and [11] proposed taxonomies. In this paper, we shall build on prior work to present another taxonomy, and argue that this classification scheme highlights characteristics of the vulnerabilities it classifies in a more useful way than other work. <p> Analysis of Previous Models We now consider previous models of security vulnerabilities. There are four main works: the Information Sciences Institute study [2], the RISOS project [9], a study from the Naval Research Laboratory <ref> [3] </ref>, and a discussion of vulnerabilities for intrusion detection [11]. The Protection Analysis project, undertaken at the Information Sciences Institute, had as its goal the derivation or discovery of patterns of errors that would enable the automatic detection of security aws. <p> Other methods of exploiting covert channels could fall into PA categories 3b (improper sequencing) and 4 (improper choice of operator or operand) as well, if the method of signalling involved aws in those categories. Landwehrs study <ref> [3] </ref> is interesting because it attempts to classify vulnerabilities according to genesis, time of introduction, and location. The genesis category has two major subcategories. Those aws which were inadvertent fall into one of the above classes ([3] uses a modification Table 3.
Reference: [4] <author> Peter G. Neumann, </author> <title> Computer System Security Evaluation, </title> <booktitle> 1978 National Computer Conference Proceedings AFIPS Conference Proceedings ), pp. </booktitle> <month> 10871095 (June </month> <year> 1978). </year>
Reference-contexts: The unique contribution of this work is an analysis of how to use the Protection Analysis work to improve security of existing systems, and how to write programs with minimal exploitable security aws. This contrasts the work to <ref> [4] </ref>, which argued that a preventative approach using formal methods to design secure systems is appropriate. <p> Improper choice of operand or operation using unfair scheduling algorithms that block cer tain processes or users from running; using the wrong function or wrong arguments. Table 1. The categories of aws in the Protection Analysis study, as presented in <ref> [4] </ref>. The exam ples are taken from [4]. For example, how are files represented at the various levels of the hierarchy? At the highest level, users would use file names; at an intermediate level, programs would use integers (file handles or descriptors). <p> Improper choice of operand or operation using unfair scheduling algorithms that block cer tain processes or users from running; using the wrong function or wrong arguments. Table 1. The categories of aws in the Protection Analysis study, as presented in <ref> [4] </ref>. The exam ples are taken from [4]. For example, how are files represented at the various levels of the hierarchy? At the highest level, users would use file names; at an intermediate level, programs would use integers (file handles or descriptors).
Reference: [5] <author> C. R. Attanasio, P. W. Markstein, and R. Phillips, </author> <title> Penetrating an Operating System: a Study of VM/370 Integrity, </title> <journal> IBM Systems Journal (1), International Business Machines Corp., </journal> <pages> pp. </pages> <month> 102106 </month> <year> (1979). </year>
Reference: [6] <author> B. Hebbard, P. Grosso, T. Baldridge, C. Chan, D. Fishman, P. Goshgarian, T. Hilton, J. Hoshen, K. Hoult, G. Huntley, M. Stolarchuk, and L. Warner, </author> <title> A Penetration Analysis of the Michigan Terminal System, </title> <journal> Operating Systems Reviews (1) pp. </journal> <month> 720 (Jan. </month> <year> 1980) </year>
Reference: [7] <author> A. L. Wilkinson, D. H. Anderson, D. P. Chang, Lee Hock Hin, A. J. Mayo, I. T. Viney, R. Williams, and W. Wright, </author> <title> A Penetration Analysis of a Burroughs Large System, </title> <journal> Operating Systems Review (1) pp. </journal> <month> 1425 (Jan. </month> <year> 1981). </year>
Reference: [8] <author> Richard R. Linde, </author> <title> Operating System Penetration, </title> <booktitle> 1975 National Computer Conference Proceedings AFIPS Conference Proceedings ), pp. </booktitle> <month> 361368 (May </month> <year> 1975). </year>
Reference-contexts: The issue of how to find the underlying vulnerabilities in the first place is finessed. Research projects have addressed this issue. The seminal aw hypothesis methodology <ref> [8] </ref> used people who knew the system being attacked to find specific vulnerabilities and then hypothesize more vulnerabilities from the known one. It introduced the notion of classes of vulnerabilities in which these were grouped by how well one aw suggested another.
Reference: [9] <author> R. P. Abbott, J. S. Chin, J. E. Donnelley, W. L. Konigsford, S. Tokubo, and D. A. Webb, </author> <title> Security Analysis and Enhancements of Computer Operating Systems, </title> <type> NBSIR 761041, </type> <institution> Institute for Computer Sciences and Technology, National Bureau of Standards (Apr. </institution> <year> 1976) </year>
Reference-contexts: It introduced the notion of classes of vulnerabilities in which these were grouped by how well one aw suggested another. Work at the Information Sciences Institute [2] and Lawrence Livermore National Laboratories <ref> [9] </ref> extended this notion by postulating broad categories of aws and grouping known vulnerabilities into these categories. Independently, several penetration studies of systems were made [5][6][7]. In the late 1980s interest in the study of vulnerabilities became more prominent for two reasons. <p> Analysis of Previous Models We now consider previous models of security vulnerabilities. There are four main works: the Information Sciences Institute study [2], the RISOS project <ref> [9] </ref>, a study from the Naval Research Laboratory [3], and a discussion of vulnerabilities for intrusion detection [11]. The Protection Analysis project, undertaken at the Information Sciences Institute, had as its goal the derivation or discovery of patterns of errors that would enable the automatic detection of security aws. <p> Exploitable logic error preventing a program from opening a critical file, causing the pro gram to execute an error routine that gives the user unauthorized rights. Table 2. The categories of aws in the RISOS study, as presented in <ref> [9] </ref>. The examples are taken from [9]. ter two. As with the Protection Analysis study, these problems may occur anywhere in the design hierarchy. <p> Exploitable logic error preventing a program from opening a critical file, causing the pro gram to execute an error routine that gives the user unauthorized rights. Table 2. The categories of aws in the RISOS study, as presented in <ref> [9] </ref>. The examples are taken from [9]. ter two. As with the Protection Analysis study, these problems may occur anywhere in the design hierarchy.
Reference: [10] <author> Matt Bishop, </author> <title> Security Problems with the UNIX Operating System, </title> <note> unpublished </note>
Reference: [11] <author> Eugene H. Spafford, </author> <title> Common System Vulnerabilities, </title> <booktitle> Proceedings of the Workshop on Future Directions in Computer Misuse and Anomaly Detection </booktitle>
Reference-contexts: This helped drive the collection of system vulnerabilities and their integration into a database; and since it would be desirable to have the intrusion detection system find new attacks, the interest in classifying vulnerabilities grew, with an eye towards being able to detect new ones. Work by [3] and <ref> [11] </ref> proposed taxonomies. In this paper, we shall build on prior work to present another taxonomy, and argue that this classification scheme highlights characteristics of the vulnerabilities it classifies in a more useful way than other work. <p> Analysis of Previous Models We now consider previous models of security vulnerabilities. There are four main works: the Information Sciences Institute study [2], the RISOS project [9], a study from the Naval Research Laboratory [3], and a discussion of vulnerabilities for intrusion detection <ref> [11] </ref>. The Protection Analysis project, undertaken at the Information Sciences Institute, had as its goal the derivation or discovery of patterns of errors that would enable the automatic detection of security aws. The classification scheme that was developed is summarized in Table 1. <p> Thus, for our purposes, this category is not particularly useful; as we shall see, however, a slight modification makes it very useful. Spaffords characterization of security vulnerabilities <ref> [11] </ref> identifies operational (administra tive) aws, design aws, and faults as the three main categories of aws. All of these are sub sumed by the classes discussed above, and require no further discussion. 2.3.
Reference: [12] <author> Dorothy E. Denning, </author> <title> An Intrusion Detection Model, </title> <type> Technical Report CSL-149, </type> <institution> Com puter Science Laboratory, SRI International (Nov. </institution> <year> 1985). </year>
Reference-contexts: System administrators often found themselves attacked before they even knew of a vulnerabilitys existence, and the strictures preventing the discussion of existing (and unfixed) security holes began to break down. The second was the advent of intrusion detection systems, first proposed in <ref> [12] </ref> to detect statistically unexpected patterns of behavior. Investigators used a database of rules to describe known attacks against systems, and the intrusion detection mechanisms would look for events matching those rules.
Reference: [13] <author> Andrew S. Tanenbaum, </author> <booktitle> Operating Systems Design and Implementation , Prentice-Hall, </booktitle> <publisher> Inc. </publisher> <year> (1987). </year>
Reference-contexts: Within the attack, lots of events occur that set up the exploitation but do not depend upon the particular vulnerability. The actual exploitation (that is, the violation of the security policy) is typically only a few events. For example, consider the mkdir bug in Version 7 UNIX <ref> [13] </ref> (see Appendix A). The vulnerability is the ability to change the ownership of a system file; the vulnerability is the race condition (specifically, the lack of atomicity in the creation/change owner steps) that allows one to change ownership of a system file, as an exploitation of that vulnerability. <p> class: 3b, improper synchronization/sequencing Time of Introduction: 1, during development Exploitation Domain involved: 1, root protection domains Effect Domain: 1, any protection domain Minimum number: 2, the mkdir process and another process to delete the directory file and link the password file to the name Source: unknown, but described in <ref> [13] </ref> xterm Flaw This is the legendary time-of-check to time-of-use aw; specifically the binding of the log file name changes between the time of the access check and the opening for writing. Hence, the vulnerability it exhibits is in the class of improper change (aw class 1c).
Reference: [14] <author> K. Thompson, </author> <title> Reections on Trusting Trust, </title> <journal> Communications of the ACM 763 (Aug. </journal> <year> 1984). </year>
Reference: [15] <author> A. V. Discolo, </author> <title> 4.2 BSD Unix Security, </title> <note> unpublished </note>
Reference: [16] <author> Shari Lawrence Peeger, </author> <title> Software Engineering: The Production of Quality Software (sec ond edition), </title> <publisher> Macmillan Publishing Company, </publisher> <address> New York (1991). </address>
Reference-contexts: Landwehr divides the lifetime of software into three phases, the development phase, the maintenance phase, and the operation phase. In software engineering terms, maintenance is defined as any work done to change the system after it is in operation <ref> [16] </ref>. But what precisely does in operation mean? When software is in the beta test stage, it may be in operation at sites other than the developers site, yet that is considered development. Further, Landwehrs example of an operational aw is the infection of a program with a virus.
Reference: [17] <author> Matt Bishop, </author> <title> Analyzing the Security of an Existing Computer System, </title> <booktitle> 1986 Proceedings of the Fall Joint Computer Conference , pp. </booktitle> <month> 1115-1119 (Nov. </month> <year> 1986) </year>
Reference-contexts: Checking requires a detailed analysis of the nature of the functions implementing the abstraction operations. For this, a security manual of the sort described in <ref> [17] </ref> is a useful way to specify the security properties of the implementation of the functions. 4.3. Improper Change Flaws of this category occur when data that is meant to be consistent is not consistent; essentially, one misplaces trust in the integrity of the data. <p> Several of the more common programming errors in programs written for the UNIX environment are summarized in Table 7. A database along the lines of the security manual for the system calls and library functions <ref> [17] </ref> would enable a tool such as a security lint to check for many improper validation problems. It would have other uses as well; it would help programmers to write robust code which did not involve security issues. At runtime, the return value of functions should be checked.
Reference: [18] <author> George Fink and Karl Levitt, </author> <title> Property-based testing of privileged programs, </title> <booktitle> Proceedings of the Tenth Annual Computer Security Applications Conference , to appear. </booktitle>
Reference-contexts: Techniques for detecting improper change aws are very similar to those used for analyzing testing. Research in the application of the testing technique called slicing is very promising <ref> [18] </ref>; its advantage over simple pattern matching is that it detects cases where the same value is stored in different variables, and the different variables are used in the file system or memory manage ment calls that can produce an improper change aw. <p> Table 6 summarizes several pairs of allocation and deallocation functions in the UNIX system. Testing techniques, specifically slicing <ref> [18] </ref>, can easily focus on the functions performing the allocation and deallocation, and this will enable rapid checking of the associations. Problems arise when the aw involves more than one process; unless shared memory is involved, the aws will involve files or processes.
Reference: [19] <author> Dorothy Denning, </author> <title> An Intrusion-Detection Model, </title> <booktitle> Proceedings of the 1986 IEEE Symposium on Security and Privacy pp. </booktitle> <month> 118-131 (Apr. </month> <year> 1986). </year>
Reference-contexts: Another, more pernicious form of improper validation is the ability to masquerade as another. Detecting such a masquerade is beyond the scope of this work; the interested reader is referred to work on intrusion detection systems <ref> [19] </ref>. However, a failure to select an adequate one-way transform for reusable passwords is an excellent example of a aw of improper validation. 4.7. Improper Indivisibility This category involves operations which need to be atomic but are interruptible.
Reference: [20] <author> Dennis Ritchie, </author> <title> On the Security of UNIX, in UNIX System Managers Manual, 4.3 Berke-ley Software Distribution, </title> <institution> Virtual VAX11 Version , Computer Science Research Group, Computer Science Division, Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <address> CA, </address> <pages> pp. 17 </pages> <month> 1-3 (Apr. </month> <year> 1986) </year>
Reference-contexts: Part of the complaints stemmed from an ignorance of the UNIX system, but far more from the misunderstanding that the UNIX system was not designed to be secure <ref> [20] </ref>.
Reference: [21] <author> J. Saltzer and M. Schroeder, </author> <title> The Protection of Information in Computer Systems, </title> <booktitle> Proceedings of the IEEE (9)pp. </booktitle> <month> 1278-1308 (Sep. </month> <year> 1975). </year>
Reference-contexts: Commercial vendors began to add on security mechanisms for their clients, or third parties began to supply security mechanisms, as the UNIX community absorbed the complaints and tried to deal with them, but, as <ref> [21] </ref> points out, retrofitted mechanisms are never as good as those designed in from the start. Problems still arise when firms purchase UNIX systems not understanding the type of secu rity those systems provide. Finally, it enables one to analyze realistically proposed security solutions.
Reference: [22] <author> Daniel Bonyun, </author> <title> The Role of a Well-Defined Auditing Process in the Enforcement of Privacy Policy and Data Security, </title> <booktitle> Proceedings of the 1981 Symposium on Security and Privacy pp. </booktitle> <month> 19-25 (Apr. </month> <year> 1981). </year>
Reference-contexts: So, instead of looking for the specific high-level attack, one need only look for the low-level exploitation. This ties into the notion of goal-oriented auditing and logging, which is an extension of the work of <ref> [22] </ref>. Using that approach, one determines first what one will use the auditing mechanisms to look for, and then builds in the audit mechanism to make the appropriate log entries. If logging is already provided (as is the case here), this refinement process indicates exactly what to look for.
Reference: [23] <author> Mamoru Maekawa, Arthur E. Oldehoeft, and Rodney R. Oldehoeft, </author> <title> Operating Systems Advanced Concepts , Benjamin/Cummings Publishing Company (1987) </title>
Reference-contexts: Again, this means we must work from the abstraction on down to the implementation. 1. The Bernstein conditions disallow reading and writing, or two processes writing, simultaneously <ref> [23] </ref> A very famous bug arose in some versions of UNIX UUCP when the shells built-in operators were augmented to include the in-line command evaluation operator uuxqt program, which received commands from the remote program , would scan the user-supplied command looking for command dividers such as pipes, and check each
Reference: [24] <author> Matt Bishop, </author> <title> A Race Condition Scanner, </title> <note> in preparation. </note>
Reference-contexts: Nevertheless, even with a pattern matching program, the ubiquity of race conditions can be seen. Running a prototype scanner on the sendmail program revealed an unknown race condition that enabled an attacker to change the protection mode of any file on the system to world readable <ref> [24] </ref>. The bug was reported and corrected. 4.4. Improper Naming At the user level, handling improper naming simply means detecting objects in the users protection domain with the same name.
References-found: 24

