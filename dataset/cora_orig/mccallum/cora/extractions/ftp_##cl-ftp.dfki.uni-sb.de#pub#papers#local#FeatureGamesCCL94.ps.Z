URL: ftp://cl-ftp.dfki.uni-sb.de/pub/papers/local/FeatureGamesCCL94.ps.Z
Refering-URL: http://cl-www.dfki.uni-sb.de/cl/papers/cl-abstracts.html
Root-URL: 
Email: email: fbackofen,treineng@dfki.uni-sb.de  
Title: How to Win a Game with Features  
Author: Rolf Backofen and Ralf Treinen 
Address: Stuhlsatzenhausweg 3 D-66123 Saarbrucken, Germany  
Affiliation: German Research Center for Artificial Intelligence (DFKI)  
Abstract: We show, that the axiomatization of rational trees in the language of features given elsewhere is complete. In contrast to other completeness proofs that have been given in this field, we employ the method of Ehrenfeucht-Frasse Games, which yields a much simpler proof. The result extends previous results on complete axiomatizations of rational trees in the language of constructor equations or in a weaker feature language.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Hassan At-Kaci, Andreas Podelski, and Gert Smolka. </author> <title> A feature-based constraint system for logic programming with entailment. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 122(1-2):263-283, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: We use the language of so-called features, which are well-known for a long time in computational linguistics and knowledge representation (see [12] for a survey). There are different possible choices of a feature language. A first language F T has been established in [3] and <ref> [1] </ref>. The language of F T consists of unary label predicates, which express that the root node of a tree has a certain label, and binary feature predicates, which serve as the partial selector functions for trees.
Reference: 2. <author> Rolf Backofen. </author> <title> A complete axiomatization of the algebra of feature trees with arity predicates. </title> <note> To appear as a DFKI-report, </note> <year> 1994. </year>
Reference-contexts: A complete axiomatization of rational trees in the language of F T has been given in [3], and a complete axiomatization of rational trees in the language of CF T in <ref> [2] </ref>. In both cases, a quantifier elimination method has been used with a similar overall structure than [11]. Both methods for proving the completeness of CF T have their merits. The quantifier elimination used in [2] serves for a concrete decision algorithm, whereas the proof presented here is much simpler. <p> [3], and a complete axiomatization of rational trees in the language of CF T in <ref> [2] </ref>. In both cases, a quantifier elimination method has been used with a similar overall structure than [11]. Both methods for proving the completeness of CF T have their merits. The quantifier elimination used in [2] serves for a concrete decision algorithm, whereas the proof presented here is much simpler. Thus, we think our paper describes a method for proving completeness which can be more easily adapted to other variants of feature logic than the method of quantifier elimination.
Reference: 3. <author> Rolf Backofen and Gert Smolka. </author> <title> A complete and recursive feature theory. </title> <type> Re--search Report RR-92-30, </type> <institution> Deutsches Forschungszentrum fur Kunstliche Intelligenz, </institution> <address> Stuhlsatzenhausweg 3, D 66123 Saarbrucken, Germany, </address> <month> September </month> <year> 1992. </year> <note> Short version as [4]. </note>
Reference-contexts: We use the language of so-called features, which are well-known for a long time in computational linguistics and knowledge representation (see [12] for a survey). There are different possible choices of a feature language. A first language F T has been established in <ref> [3] </ref> and [1]. The language of F T consists of unary label predicates, which express that the root node of a tree has a certain label, and binary feature predicates, which serve as the partial selector functions for trees. <p> A complete axiomatization of rational trees in the language of F T has been given in <ref> [3] </ref>, and a complete axiomatization of rational trees in the language of CF T in [2]. In both cases, a quantifier elimination method has been used with a similar overall structure than [11]. Both methods for proving the completeness of CF T have their merits. <p> This case is analogous to the last one. 5 Conclusion We have proven the completeness of the feature theory CFT, which unifies the completeness results for F T <ref> [3] </ref> and for rational constructor trees [5, 11]. We feel that the use of features and path constraints significantly simplifies the logic of trees.
Reference: 4. <author> Rolf Backofen and Gert Smolka. </author> <title> A complete and recursive feature theory. </title> <booktitle> In Proc. of the 31 th Annual Meeting of the Association for Computational Linguistics, </booktitle> <pages> pages 193-200, </pages> <address> Columbus, Ohio, </address> <month> 22-26 June </month> <year> 1993. </year> <note> Complete version as [3]. </note>
Reference-contexts: Hence, the Duplicator has to watch for chains of relations between the chosen elements, but may exploit the knowledge of n and (; ) to restrict the set of relevant chains. In the context of CFT, chains of relations are expressed as path constraints <ref> [4] </ref>. For every p 2 Fea fl , we define the formula xpy by x*y := x : 9z (xpz ^ zfy). Furthermore, Axp := 9z (xpz ^ Az) xp # yq := 9z (xpz ^ yqz) The latter formula is called a co-reference constraint.
Reference: 5. <author> Hubert Comon and Pierre Lescanne. </author> <title> Equational problems and disunification. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 7(3,4):371-425, </volume> <year> 1989. </year>
Reference-contexts: In the context of finite constructor trees, Hodges [10] observes that the use of selector functions simplifies the completeness proof of an axiomatization. His completeness proof is by quantifier elimination. Complete axiomatizations of the algebra of rational trees, using the language of Herbrand, have been given independently in <ref> [5] </ref> for the case of a finite signature, and in [11] for both the case of a finite and an infinite signature. <p> This case is analogous to the last one. 5 Conclusion We have proven the completeness of the feature theory CFT, which unifies the completeness results for F T [3] and for rational constructor trees <ref> [5, 11] </ref>. We feel that the use of features and path constraints significantly simplifies the logic of trees.
Reference: 6. <author> Nachum Dershowitz and Jean-Pierre Jouannaud. </author> <title> Rewrite systems. </title> <editor> In Jan van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B Formal Models and Semantics, chapter 6, </booktitle> <pages> pages 243-320. </pages> <publisher> Elsevier Science Publishers and The MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Feature constraints xfy immediately generalize to path constraints such as x (f 1 f n )y, which can be defined by using intermediate variables. In the field of term rewriting systems (see <ref> [6] </ref> for a survey), the notion of an occurrence in a term is well established. In the context of feature logic, there is no need for introducing such a meta-notation, since we can use the path constraints which are an immediate offspring of the base language.
Reference: 7. <author> Andrzej Ehrenfeucht. </author> <title> An application of games to the completeness problem for formalized theories. </title> <journal> Fundamenta Mathematicae, </journal> <volume> 49 </volume> <pages> 129-141, </pages> <year> 1961. </year>
Reference-contexts: The next section briefly reviews the theory CFT from [13], and Section 3 reviews the method of Frasse [8] and Ehrenfeucht <ref> [7] </ref>. The core of the paper is Section 4, where we prove the completeness of CFT with the method of Section 3. yval xval yval 2 point circle 2 7 centerradius type nat or 1 def 2 3 point xval yval xval 2 red point name 3 color Fig. 1. <p> Instead of Frasse's original theorem we here use the game-theoretic reformulation due to Ehrenfeucht <ref> [7] </ref>. The game is performed by two players, the Spoiler and the Duplicator. In the beginning, the Spoiler chooses a finite subsignature 2 t and the number n of rounds to go. The aim of the Duplicator is to build a partial t -isomorphism of length n.
Reference: 8. <author> Roland Frasse. </author> <title> Sur les classifications des systems de relations. </title> <publisher> Publications Sci. </publisher> <address> de l'Universite d'Alger, I:35-182, </address> <month> June </month> <year> 1954. </year>
Reference-contexts: Thus, we think our paper describes a method for proving completeness which can be more easily adapted to other variants of feature logic than the method of quantifier elimination. The next section briefly reviews the theory CFT from [13], and Section 3 reviews the method of Frasse <ref> [8] </ref> and Ehrenfeucht [7]. <p> Hence, for a determinant ffi, con (ffi) = det (ffi). Proposition 2. For every solved form we have 8 (Vffi con (ffi)) 9con (ffi) ffi Note that the existence is no longer unique in case of a solved form. 3 Ehrenfeucht-Frasse Games Frasse <ref> [8] </ref> gives a definition of elementary equivalence in terms of mappings between structures. Any two isomorphic structures are elementarily equivalent, but there are of course elementarily equivalent structures which are not isomorphic. Hence, to characterize elementary equivalence algebraically we have to weaken the notion of isomorphism.
Reference: 9. <author> W. Thomas H.D. Ebbinghaus, J. Flum. </author> <title> Mathematical Logic. </title> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: This strategy of the Spoiler would cause the Duplicator, if the number of moves is increased by 1, to duplicate the bound for the first move, which results in the recursion equation (m + 1) = 2 fl (m). In fact, it can be shown <ref> [9] </ref>, that this bound is sufficient for simple theories like the theory of one successor function.
Reference: 10. <author> Wilfrid Hodges. </author> <title> Model Theory. Encyclopedia of Mathematics and its Applications </title>
Reference-contexts: In the context of feature logic, there is no need for introducing such a meta-notation, since we can use the path constraints which are an immediate offspring of the base language. In the context of finite constructor trees, Hodges <ref> [10] </ref> observes that the use of selector functions simplifies the completeness proof of an axiomatization. His completeness proof is by quantifier elimination.
Reference: 42. <institution> Cambridge University Press, </institution> <year> 1993. </year>
Reference: 11. <author> Michael J. Maher. </author> <title> Complete axiomatizations of the algebras of finite, rational and infinite trees. </title> <booktitle> In Proceedings of the Third Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 348-357. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1988. </year>
Reference-contexts: His completeness proof is by quantifier elimination. Complete axiomatizations of the algebra of rational trees, using the language of Herbrand, have been given independently in [5] for the case of a finite signature, and in <ref> [11] </ref> for both the case of a finite and an infinite signature. A complete axiomatization of rational trees in the language of F T has been given in [3], and a complete axiomatization of rational trees in the language of CF T in [2]. <p> A complete axiomatization of rational trees in the language of F T has been given in [3], and a complete axiomatization of rational trees in the language of CF T in [2]. In both cases, a quantifier elimination method has been used with a similar overall structure than <ref> [11] </ref>. Both methods for proving the completeness of CF T have their merits. The quantifier elimination used in [2] serves for a concrete decision algorithm, whereas the proof presented here is much simpler. <p> This case is analogous to the last one. 5 Conclusion We have proven the completeness of the feature theory CFT, which unifies the completeness results for F T [3] and for rational constructor trees <ref> [5, 11] </ref>. We feel that the use of features and path constraints significantly simplifies the logic of trees.
Reference: 12. <author> Gert Smolka. </author> <title> Feature constraint logics for unification grammars. </title> <journal> Journal of Logic Programming, </journal> <volume> 12 </volume> <pages> 51-87, </pages> <year> 1992. </year>
Reference-contexts: Here, we take a more elementary view. We use the language of so-called features, which are well-known for a long time in computational linguistics and knowledge representation (see <ref> [12] </ref> for a survey). There are different possible choices of a feature language. A first language F T has been established in [3] and [1].
Reference: 13. <author> Gert Smolka and Ralf Treinen. </author> <title> Records for logic programming. </title> <journal> Journal of Logic Programming, </journal> <volume> 18(3) </volume> <pages> 229-258, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: This was the reason to extend F T to CF T <ref> [13] </ref> by adding unary arity predicates xff 1 ; : : : ; f n g, which express that x has exactly the features f 1 ; : : : ; f n . Adding this constraint to the above translation again ensures uniqueness of the solution. <p> Adding this constraint to the above translation again ensures uniqueness of the solution. Note that although Herbrand can be translated into CF T , the converse does not hold since we are using an infinite set of features. Thus, CF T is a substantial extension of Herbrand. In <ref> [13] </ref>, an axiomatization of CFT was given and proven complete for 9 fl formulae. In this paper, we prove the completeness of CFT which has been conjectured in [13]. <p> Thus, CF T is a substantial extension of Herbrand. In <ref> [13] </ref>, an axiomatization of CFT was given and proven complete for 9 fl formulae. In this paper, we prove the completeness of CFT which has been conjectured in [13]. From a complete axiomatization we gain a sound and complete deduction system for valid formulae in the language of CF T . <p> Thus, we think our paper describes a method for proving completeness which can be more easily adapted to other variants of feature logic than the method of quantifier elimination. The next section briefly reviews the theory CFT from <ref> [13] </ref>, and Section 3 reviews the method of Frasse [8] and Ehrenfeucht [7].
Reference: 14. <author> Ralf Treinen. </author> <title> Feature constraints with first-class features. </title> <editor> In Andrzej M. Borzyszkowski and Stefan Soko lowski, editors, </editor> <booktitle> Mathematical Foundations of Computer Science 1993, Lecture Notes in Computer Science, </booktitle> <volume> vol. 711, </volume> <pages> pages 734-743. </pages> <publisher> Springer-Verlag, </publisher> <month> 30 August-3 September </month> <year> 1993. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: Note that the existence of a complete axiomatization of rational trees in the language of CF T is not straightforward, since for instance the theory in a language allowing for first-class features is undecidable <ref> [14] </ref>. The completeness proof uses Frasse's theorem and its game-theoretic formulation due to Ehrenfeucht. This method requires an argument concerning chains of relations between elements in a model. Feature logic is well suited for such an argument, since chains of relations are naturally expressed as path constraints.
References-found: 15

