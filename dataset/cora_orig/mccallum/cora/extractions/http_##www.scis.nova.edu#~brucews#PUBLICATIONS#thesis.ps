URL: http://www.scis.nova.edu/~brucews/PUBLICATIONS/thesis.ps
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Note: 664  
Abstract: Zhang, B.-T. & Muhlenbein, H. (1994). Synthesis of sigma-pi neural networks by the breeder genetic programming. In Michaelewicz, Z. (Ed.), Proceedings of the First IEEE World Congress on Evolutionary Computation. IEEE World Congress on Computational Intelligence. Volume 1, (pp. 318-323), New York, NY. IEEE Press. This paper presents a method for the evolution of the architecture and weights of a neural network which includes in its fitness calculation a term that attempts to minimize the complexity of the neural network as measured as a function of the number of interconnections between neurons and the absolute magnitudes of the weights. A network with m output units is represented in this method by a set of m trees where each tree corresponds to the connections leading from all of the inputs units to a single output unit. The trees have a constrained syntax that is represented by a network building grammar. Neurons in the grammar have as parameters their threshold value, the number of incoming signals, and a parameter for each incoming symbol. The incoming signals are represented by a weight and a recursive neural network or an input signal. A variation of the genetic algorithm called the breeder genetic algorithm is used to create and optimize the networks. In this structure, the t best individuals are selected to form a breeding pool. Once in the pool, an iterative hillclimbing search based on mutation is applied to each of the individuals to learn the local optimum of the surface for that individual. The locally optimal individual replaces the individual from which it was generated in the breeder pool. Finally, random pairs of individuals from the breeding pool are recombined to generate a new population. The method is applied to the generation of sigma-pi neural networks. In a sigma-pi network, inputs a neuron can be computed through taking the sum of the input connections or through taking the product of the input connections. The method was found to work well for all but large problems where the convergence time was slow. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Aktas, A. Z. </author> <year> (1987). </year> <title> Structured Analysis and Design of Information Systems. </title> <address> Engle-wood Cliffs, NJ: </address> <publisher> Prentice-Hall. </publisher>
Reference: <author> Al-Mahmood, M. A. & Smith, S. I. </author> <year> (1993). </year> <title> Knowledge discovery using genetic programming. </title> <type> Master's thesis, </type> <institution> Naval Postgraduate School, Monterrey, </institution> <address> CA. </address>
Reference: <author> Amarel, S. </author> <year> (1981). </year> <title> On representations of problems of reasoning about actions. </title> <editor> In B. L. Webber & N. J. Nilsson (Eds.), </editor> <booktitle> Readings in Artificial Intelligence chapter 1, </booktitle> <pages> (pp. 2-22). </pages> <address> Los Altos, CA: </address> <publisher> Morgan Kaufmann Publishers Inc. </publisher>
Reference: <author> Ancona, M. & Nieddu, P. </author> <year> (1992). </year> <title> A trip to object oriented land. </title> <journal> Microprocessing and Microprogramming, </journal> <volume> 35 (1-5), </volume> <pages> 195-202. </pages>
Reference: <author> Andre, D. </author> <year> (1994). </year> <title> Evolution of map making: Learning, planning, and memory using genetic programming. </title> <editor> In Z. Michaelewicz (Ed.), </editor> <booktitle> Proceedings of the First IEEE World Congress on Evolutionary Computation. IEEE World Congress on Computational Intelligence. </booktitle> <pages> Volume 1 (pp. 250-255). </pages> <address> New York, NY: </address> <publisher> IEEE Press. </publisher>
Reference: <author> Andrews, M. & Prager, R. </author> <year> (1994). </year> <title> Genetic programming for the acquisition of double auction market strategies. </title> <editor> In K. E. Kinnear, Jr. (Ed.), </editor> <booktitle> Advances in Genetic Programming chapter 16. </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Angeline, P. J. </author> <year> (1993). </year> <title> Evolutionary Algorithms and Emergent Intelligence. </title> <type> PhD thesis, </type> <institution> Ohio State University, Laboratory for Artificial Intelligence Research (LAIR), Columbus, OH. </institution>
Reference: <author> Angeline, P. J. </author> <year> (1994). </year> <title> Genetic programming and emergent intelligence. </title> <editor> In K. </editor> <publisher> E. </publisher>
Reference: <editor> Kinnear, Jr. (Ed.), </editor> <booktitle> Advances in Genetic Programming chapter 4. </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Angeline, P. J. & Pollack, J. B. </author> <year> (1992). </year> <title> The evolutionary induction of subroutines. </title> <booktitle> In Proceedings of the Fourteenth Annual Conference of the Cognitive Science Society. </booktitle> <publisher> Lawrence Earlbaum. </publisher>
References-found: 10

