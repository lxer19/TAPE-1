URL: ftp://ftp.cag.lcs.mit.edu/pub/virtual_wires/babb-thesis.ps.Z
Refering-URL: http://www.cag.lcs.mit.edu/vwires/papers/index.html
Root-URL: 
Title: Virtual Wires: Overcoming Pin Limitations in FPGA-based Logic Emulation  
Author: by Jonathan William Babb Anant Agarwal 
Degree: 1991 Submitted to the Department of Electrical Engineering and Computer Science in partial fulfillment of the requirements for the degree of Master of Science at the  The author hereby grants to MIT permission to reproduce and to distribute copies of this thesis document in whole or in part. Signature of Author  Certified by  Associate Professor of Computer Science and Electrical Engineering Thesis Supervisor Accepted by Fred Morgenthaler Chairman, Departmental Committee on Graduate Students  
Note: c Massachusetts Institute of Technology,  
Date: February 1994  1993  November 15, 1993  
Affiliation: B.S. Electrical Engineering Georgia Institute of Technology,  MASSACHUSETTS INSTITUTE OF TECHNOLOGY  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Agarwal, J. Babb, D. Chaiken, G. D'Souza, K. Johnson, D. Kranz, J. Kubia-towicz, B.-H. Lim, G. Maa, K. MacKenzie, D. Nussbaum, M. Parkin, and D. Ye-ung. Sparcle: </author> <title> Today's Micro for Tomorrow's Multiprocessor. </title> <booktitle> In HOTCHIPS, </booktitle> <month> August </month> <year> 1992. </year>
Reference-contexts: Each Alewife node (Figure 7-1) consists of a RISC processor, a floating point coprocessor, a cache, a portion of globally-shared distributed memory, a controller memory management unit (CMMU), and a network switch. The RISC microprocessor, Sparcle [3] <ref> [1] </ref>, is an 18K gate SPARC processor with some modifications to the basic hardware. These modifications enhance the usefulness of Sparcle as the processing element in a multiprocessor. The CMMU [29] part is an 86K gate cache controller for this distributed shared memory machine being designed at MIT.
Reference: [2] <author> A. Agarwal et al. </author> <title> The MIT Alewife machine: A large-scale distributed memory multiprocessor. In Scalable Shared Memory Multiprocessors. </title> <publisher> Kluwer Academic Press, </publisher> <year> 1991. </year>
Reference-contexts: Elements 15% 25% % Comb. Elements 85% 75% External IO count 129 245 Table 7.3: Design Statitics 7.2 Benchmarks The benchmarks in this chapter are both ASICs used in the Alewife Machine, a distributed shared memory machine being designed at MIT <ref> [2] </ref>. Alewife consists of a scalable number of homogeneous processing nodes connected in a 2-dimensional mesh network. Each Alewife node (Figure 7-1) consists of a RISC processor, a floating point coprocessor, a cache, a portion of globally-shared distributed memory, a controller memory management unit (CMMU), and a network switch.
Reference: [3] <author> A. Agarwal, J. Kubiatowicz, D. Kranz, B.-H. Lim, D. Yeung, G. D'Souza, and M. Parkin. Sparcle: </author> <title> An Evolutionary Processor Design for Multiprocessors. </title> <journal> IEEE Micro, </journal> <volume> 13(3) </volume> <pages> 48-61, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Shift loops are then alternately connected to physical wires according to a predetermined schedule. These structures are embedded directly into the netlist for each FPGA. In our results from compiling two complex designs, the 18K gate Sparcle microprocessor <ref> [3] </ref> and the 86K gate Alewife Communications and Memory Management Unit (A-1000) [29] (to be presented in Chapter 7), we show that the use of Virtual Wires can decrease FPGA chip count by a factor of 3 for Sparcle and 10 for the A-1000, assuming a crossbar interconnect. <p> Each Alewife node (Figure 7-1) consists of a RISC processor, a floating point coprocessor, a cache, a portion of globally-shared distributed memory, a controller memory management unit (CMMU), and a network switch. The RISC microprocessor, Sparcle <ref> [3] </ref> [1], is an 18K gate SPARC processor with some modifications to the basic hardware. These modifications enhance the usefulness of Sparcle as the processing element in a multiprocessor. The CMMU [29] part is an 86K gate cache controller for this distributed shared memory machine being designed at MIT.
Reference: [4] <institution> Aptix, Inc. Aptix AXB-AP4 Data Sheet, </institution> <month> oct </month> <year> 1993. </year>
Reference-contexts: Recent improvements in hardware models include the use of programmable logic and programmable PC boards <ref> [4] </ref>. The added complexity of reconfigurability can be offset by the ability to make design changes more rapidly. As software improves for such models, the distinction between hardware models, and the next category of prototypes, logic emulation, is becoming blurred.
Reference: [5] <author> J. Babb and R. Tessier. </author> <title> Virtual Wires: Overcoming Pin Limitations in FPGA-based Logic Emulators. </title> <booktitle> In Proceedings 1993 MIT Student Workshop on Supercomputing Technologies, </booktitle> <address> pages 4.0 - 4.1, Plimoth Plantation, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Trends indicate that this discrepancy will only get worse as technology scales available gate counts are increasing faster than available pin counts. To overcome pin limitations in FPGA-based logic emulators <ref> [5] </ref>, 1 this thesis proposes the use of a compilation technique based on Virtual Wires [6]. This method can be applied to any topology and FPGA device, although some benefit substantially more than others.
Reference: [6] <author> J. Babb, R. Tessier, and A. Agarwal. </author> <title> Virtual Wires: Overcoming Pin Limitations in FPGA-based Logic Emulators. </title> <booktitle> In Proceedings IEEE Workshop on FPGA-based Custom Computing Machines, </booktitle> <pages> pages 142-151, </pages> <address> Napa, CA, </address> <month> April </month> <year> 1993. </year> <note> IEEE. Also as MIT/LCS TM-491, </note> <month> January </month> <year> 1993. </year>
Reference-contexts: Trends indicate that this discrepancy will only get worse as technology scales available gate counts are increasing faster than available pin counts. To overcome pin limitations in FPGA-based logic emulators [5], 1 this thesis proposes the use of a compilation technique based on Virtual Wires <ref> [6] </ref>. This method can be applied to any topology and FPGA device, although some benefit substantially more than others. A virtual wire represents a connection between a logical output on one FPGA and a logical input on another FPGA. <p> See Sections 7.6, Section 7.8, and Chapter 8 for more detail on these tradeoffs. Chapter 4 Virtual Wires To overcome pin limitations in FPGA-based logic emulators, we propose the use of a compilation technique which utilizes Virtual Wires <ref> [6] </ref>. This chapter describes an implementation of Virtual Wires in the context of a complete emulation software system, independent of target FPGA device and interconnect topology.
Reference: [7] <author> H. B. Bakoglu. </author> <title> Circuits, Interconnections, and Packaging for VLSI. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: The values of K p and B reported for the IBM computers were 2.5 and 0.6, respectively. This rule only applies if N g 1. As with most rules, it has limitations. See [31] and <ref> [7] </ref>. Equation 3.1 can be used to measure the communication parameters of a given implementation technology as well as the parameters of a design specification. A design's architecture and organization greatly affect its parameters. For example, pipelining increases communication requirements due to dependencies between pipeline stages. <p> The term for I is Rent's rule for the circuit with a factor of 1=2 to allow for overlapping inputs with outputs. The term for d is an upper limit to the average wire length, in Manhattan hops, which can also be derived from Rent's rule <ref> [7] </ref>. Thus given Rent's parameters, K circuit p and B circuit , for a given design, the Virtual Wires overhead, N vw g , can be expressed strictly in terms of design and partition sizes. 90 CHAPTER 8.
Reference: [8] <author> Z. Barzilai, J. Carter, B. Rosen, and J. Rutledge. </author> <title> HSS A High Speed Simulator. </title> <type> Technical Report RC 11738, </type> <institution> IBM T. J. Watson Research Center, </institution> <month> March </month> <year> 1986. </year>
Reference-contexts: To improve simulation time, engineers have used both software and hardware techniques. Software based accelerations include compiled-code simulation, parallel simulation, and high level simulation. In compiled-code simulation <ref> [8] </ref>, digital logic that is to be simulated is compiled directly into machine instructions rather than being interpreted. Parallel simulation techniques [40] have been reported to achieve speed-ups for digital logic simulation as well.
Reference: [9] <author> D. Bertsekas and R. Gallagher, </author> <title> editors. Data Networks. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1992. </year> <note> 99 100 BIBLIOGRAPHY </note>
Reference-contexts: More recently, simulated annealing and linear programming techniques have been used to statically schedule communication patterns for the Numesh multicomputer [35]. Static routing has also been used in FPGA-based systolic arrays, such as Splash [20]. Virtual circuit routing <ref> [9] </ref>, found in connection-oriented networks, is store-and-forward switching in which a particular path is set up when a communication session is initiated, and is maintained for the duration of that session.
Reference: [10] <author> T. Blank. </author> <title> A survey of hardware accelerators used in computer aided design. </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <month> Aug. </month> <year> 1984. </year>
Reference-contexts: In conjunction with these methods, researchers are speeding up simulation by directly simulating high-level description languages (HDLs) such as VHDL and Verilog [15]. Hardware acceleration ranges from co-processors for software simulators, to special purpose logic processors <ref> [10] </ref>. Co-processors allow a standard computer to be accelerated for logic simulation much like a floating point unit speeds up numerical calculations. However, in co-processors, the I/O transfer between the coupled host and hardware accelerator can easily become a bottleneck. <p> Communication is done with a hierarchy of buses using a time-division multiplexing (TDM) technique. In this technique, data is strobed from/to the bus by comparing a stored time-slot value for each pin with an on-board time-slot counter. See <ref> [10] </ref> for a more comprehensive survey of hardware accelerators used in computer aided design. 2.2 FPGA-based Logic Emulation Even before FPGAs existed, logic emulation based on cellular arrays [39] was being explored in academia. Cellular arrays can be traced back to work on cellular automata in the 1960's [37].
Reference: [11] <author> S. Brown, R. Francis, J. Rose, and Z. Vranesic. </author> <title> Field-Programmable Gate Arrays. </title> <publisher> Kluwer Academic Publishers, Norwell, </publisher> <address> Mass., </address> <year> 1992. </year>
Reference-contexts: Before continuing the discussion of logic emulation in Section 1.3, we examine one of the most promising devices for implementing logic emulation: the Field Programmable Gate Array. 1.2 FPGAs and FPGA Computing Since the birth of programmable logic devices in 1974, and the Field Programmable Gate Array (FPGA) around 1986 <ref> [11] </ref>, programmable logic has traditionally been used to replace fixed discrete logic and gate array logic. In particular, the numerous advantages of FPGAs reduced manufacturing time, the ability to accommodate design changes easier, and uniform part replacement, have made the FPGA a very attractive building block for logic design.
Reference: [12] <author> J. Cocke and R. E. Miller. </author> <title> Configurable Computer System. </title> <type> Technical Report 9, IBM Technical Disclosure Bulletin, </type> <month> Feb. </month> <year> 1973. </year>
Reference-contexts: An inter-processor switch provides communication among up to 256 logic array processors. Applications range 29 30 CHAPTER 2. BACKGROUND from design verification and fast simulation, to logic analysis and "partial hardware bring-up" (i.e. logic emulation). This engine is a follow-on to the previous Logic Simulation Machine <ref> [12] </ref>, both of which are based on the concepts of John Cocke. The Very Large Simulation Subsystem (VLSS) [45] is another massively parallel simulation engine, capable of performing hundreds of billions of gate evaluations per second.
Reference: [13] <institution> Concurrent Logic, Inc. CLi6000 Series Field-Programmable Gate Arrays, </institution> <month> May </month> <year> 1992. </year> <note> Revision 1c. </note>
Reference-contexts: 1,024bits 3136 bits I/Os 112 pins 160 pins 160 pins 192 pins 96 pins 108 pins Table 7.4: A Few FPGA Device Characteristics 7.3 Target FPGAs For target FPGAs, we consider the Xilinx 3000 and 4000 series (including the new 4000H series) [46] [47] and the Concurrent Logic Cli6000 series <ref> [13] </ref>. These are all SRAM-based FPGAs. The Xilinx 3000 series is the previous generation of Xilinx FPGAs, and the Xilinx 4000 series is the latest generation. The largest size FPGA in this series will contain 20,000 claimed gates and 240 external I/O pins.
Reference: [14] <author> D. Conner. </author> <title> IC prototyping: When simulation isn't enough. </title> <journal> Electronic Design News, </journal> <pages> pages 74-74, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Among other uses, Anyboard can be used as a logic emulator for designs of a few thousand gates. The Anyboard project is focused on providing a 32 CHAPTER 2. BACKGROUND low cost, rapid prototyping solution for universities. For an overview of other available prototyping and emulation solutions, see <ref> [14] </ref>. 2.3 Network Communication Related network communication concepts for improving usable bandwidth include static routing, virtual circuit routing, and virtual channels. The set of inter-FPGA communications established via Virtual Wires makes up a statically routed network. Static routing can be used whenever communication can be predetermined.
Reference: [15] <author> D. Thomas and P. Moorby. </author> <title> The Verilog Hardware Description Language. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: Parallel simulation techniques [40] have been reported to achieve speed-ups for digital logic simulation as well. In conjunction with these methods, researchers are speeding up simulation by directly simulating high-level description languages (HDLs) such as VHDL and Verilog <ref> [15] </ref>. Hardware acceleration ranges from co-processors for software simulators, to special purpose logic processors [10]. Co-processors allow a standard computer to be accelerated for logic simulation much like a floating point unit speeds up numerical calculations.
Reference: [16] <author> W. J. Dally. </author> <title> Virtual-channel flow control. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 3(2), </volume> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: This allows transmission bandwidth to be used on an as-needed basis. Using Virtual Wires for static routing for logic emulation is also similar to the use of virtual channels <ref> [16] </ref> in dynamically-routed networks. These channels decouple resource allocation, allowing active packets to pass blocked packets to use bandwidth that would otherwise be left idle. Chapter 3 The Pin Limitation Problem One of the high level design issues faced in FPGA-based logic emulation is the pin limitation problem.
Reference: [17] <author> D. V. den Bout, J. Morris, D. Thomae, S. Labrozzi, S. Wingo, and D. Hallman. Anyboard: </author> <title> An FPGA-based, reconfigurable system. </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: This system is targeted at the low-end of the market and is not scalable like the Quickturn system. InCA also provides a logic partitioning tool which can be used for designers who build their own hardware. AnyBoard, developed at North Carolina State University, <ref> [17] </ref> is an FPGA-based reconfigurable system. Among other uses, Anyboard can be used as a logic emulator for designs of a few thousand gates. The Anyboard project is focused on providing a 32 CHAPTER 2. BACKGROUND low cost, rapid prototyping solution for universities.
Reference: [18] <author> S. Devadas and K. Keutzer. </author> <title> Synthesis of robust delay-fault-testable circuits: </title> <journal> Practice. IEEE Transactions on Computer Aided Design, </journal> <volume> 11(3) </volume> <pages> 277-300, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: INTRODUCTION satisfies a given specification. By using algorithmic shortcuts such as binary decision diagrams [32] and symbolic simulation [21], formal methods are able to reduce the computational requirements of system testing. Formal methods have also succeeded in the areas of automatic test pattern generation [27], synthesis for testability <ref> [18] </ref>, and static timing analysis. However, the use of formal verification is quite limited if high-level specifications are not necessarily consistent and correct. For the majority of their verification needs, system designers must then rely on empirical methods.
Reference: [19] <author> C. Fiduccia and R. Mattheyses. </author> <title> A linear time heuristic for improving network partitions. </title> <booktitle> In Proceedings of the 19th Design Automation Conference, </booktitle> <pages> pages 175-181, </pages> <year> 1982. </year>
Reference-contexts: Well-known algorithms include the Kern-inghan and Lin (K&L) [26] mincut algorithm which has complexity in the number of components of O (n 2 log n) for an optimization pass, and an efficient bisection heuristic by Fiduccia and Mattheyses (F&M) <ref> [19] </ref> which exhibits linear complexity in the number of pins, running in O (p). 3.3 Empirical Observation: Rent's Rule In 1960, E.F.
Reference: [20] <author> M. Gokhale, W. Holmes, A. Kopser, S. Lucas, R. Minnich, D. Sweeney, and D. Lopresti. </author> <title> Building and using a highly parallel programmable logic array. </title> <journal> Computer, </journal> <volume> 24(1), </volume> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: This mechanism has been used in scheduling real-time communication in a multiprocessor environment [30]. More recently, simulated annealing and linear programming techniques have been used to statically schedule communication patterns for the Numesh multicomputer [35]. Static routing has also been used in FPGA-based systolic arrays, such as Splash <ref> [20] </ref>. Virtual circuit routing [9], found in connection-oriented networks, is store-and-forward switching in which a particular path is set up when a communication session is initiated, and is maintained for the duration of that session.
Reference: [21] <author> A. Gupta. </author> <title> Formal Hardware Verification Methods: A Survey. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, School of Computer Science, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: Verification techniques fall into two categories: formal methods and empirical methods. Formal verification methods attempt to prove that an implementation 15 16 CHAPTER 1. INTRODUCTION satisfies a given specification. By using algorithmic shortcuts such as binary decision diagrams [32] and symbolic simulation <ref> [21] </ref>, formal methods are able to reduce the computational requirements of system testing. Formal methods have also succeeded in the areas of automatic test pattern generation [27], synthesis for testability [18], and static timing analysis.
Reference: [22] <author> S. Hanono. </author> <title> Lsi and verilog serial interface to fpga board. Alewife Systems Memo 39, </title> <institution> MIT Computer Architecture Group, </institution> <month> Oct. </month> <year> 1993. </year> <note> BIBLIOGRAPHY 101 </note>
Reference-contexts: This technique of remote access to the emulation system works particularly well for synchronous logic, since evaluation times may be limited to transitions of the system clock. Figure 6-4 shows our current simulation accelerator interface. See [42] and <ref> [22] </ref> for more detail on the simulation accelerator. Chapter 7 Results 7.1 Overview We have implemented the entire Virtual Wires software system described in Chapter 5 and the Xilinx-based prototype hardware described in Section 6.2.
Reference: [23] <author> N. Hastie and R. Cliff. </author> <title> The implementation of hardware subroutines on field programmable gate arrays. </title> <booktitle> In IEEE Custom Integrated Circuits Conference, </booktitle> <month> May </month> <year> 1990. </year>
Reference-contexts: The price is in terms of longer compilation time (we must synthesize circuits!), and a non-trivial configuration time. Because of slow configuration time, re-use of FPGA logic, called virtual logic, is computationally expensive. More efficient virtual logic has been introduced to the FPGA world, in the Plessey ERA <ref> [23] </ref>, with the hardware subroutine - "a circuit or part circuit optimized for the particular situation encountered, performing a specific task at a specific time, and then being replaced by another and another as the application demands." However, currently available high density FPGAs are not targeted 22 CHAPTER 1. <p> Using the information gained from dependency analysis, we can now predict which portions of the design are active during which parts of the synchronous clock cycle. If new FPGA devices support fast partial reconfiguration, this information can be used to implement virtual logic via invocation of hardware subroutines <ref> [23] </ref>. Even without fast reconfiguration, we can use Virtual Wires to automate combinational logic resource sharing. Because of the long routing delays and high register count in FPGAs, Virtual Wires could also be used to implement a form of wave pipelining in these shared resources.
Reference: [24] <author> J. Hennessy and D. Patterson. </author> <title> Computer Architecture A Quantitative Approach. </title> <publisher> Morgan Kaufmann, </publisher> <address> Palo Alto, California, </address> <year> 1990. </year>
Reference-contexts: For these chips, the need for thorough testing heavily impacts the design methodology itself. Continuing growth in the scale of circuit integration and the resulting increase in the number of components in current designs <ref> [24] </ref> are compounding verification costs. To make matters worse, the computational power required to verify systems increases at a greater than linear rate with system size and circuit complexity.
Reference: [25] <author> InCA Inc. </author> <title> Concept Silicon Reference Manual, </title> <month> Nov. </month> <year> 1992. </year> <note> Version 1.1. </note>
Reference-contexts: The MARS systems use the more advanced Xilinx 4000 series [47] and do not have special crossbar chips. The MARS system takes advantage of the Xilinx 4000's ability to emulate memory directly in the FPGA. The Virtual ASIC system by InCA, ltd. <ref> [25] </ref> uses a combination of nearest neighbor and crossbar interconnect. This system is targeted at the low-end of the market and is not scalable like the Quickturn system. InCA also provides a logic partitioning tool which can be used for designers who build their own hardware. <p> With Virtual Wires, the total gate count (logic gates and virtual wiring overhead) must be no greater than the target FPGA gate count. In our current implementation, we use the Concept Silicon partitioner by InCA <ref> [25] </ref>. This partitioner performs K-way partitioning with min-cut and clustering techniques to minimize partition pin counts. The output of the partitioning tool consists of a set of FPGA partitions, and a top level netlist which contains the information for wiring the partitions together to form the original netlist. <p> Table 7.7 shows the results for both hard wires and Virtual Wires. Compiling the A-1000 to a torus, hardwires only, was not practical with our partitioning software. The gate utilizations obtained for the hardwired cases agree with reports in the literature <ref> [25] </ref> [44] on designs of similar complexity. 7.7.
Reference: [26] <author> B. Kerninghan and S. Lin. </author> <title> An Efficient Heuristic Procedure for Partitioning Graphs. </title> <type> Technical Report 2, </type> <institution> Bell Syst. Tech. J., </institution> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: Because the partitioning problem can not be solved in polynomial time, programmers must use efficient heuristic partitioning algorithms to optimize partitions with a reasonable amount of computational effort. Well-known algorithms include the Kern-inghan and Lin (K&L) <ref> [26] </ref> mincut algorithm which has complexity in the number of components of O (n 2 log n) for an optimization pass, and an efficient bisection heuristic by Fiduccia and Mattheyses (F&M) [19] which exhibits linear complexity in the number of pins, running in O (p). 3.3 Empirical Observation: Rent's Rule In
Reference: [27] <author> T. Kirkland and M. Mercer. </author> <title> Algorithms for automatic-test pattern generation. </title> <journal> IEEE Design & Test of Computers, </journal> <volume> 5(3) </volume> <pages> 43-55, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: INTRODUCTION satisfies a given specification. By using algorithmic shortcuts such as binary decision diagrams [32] and symbolic simulation [21], formal methods are able to reduce the computational requirements of system testing. Formal methods have also succeeded in the areas of automatic test pattern generation <ref> [27] </ref>, synthesis for testability [18], and static timing analysis. However, the use of formal verification is quite limited if high-level specifications are not necessarily consistent and correct. For the majority of their verification needs, system designers must then rely on empirical methods.
Reference: [28] <author> S. Kirkpatrick, C. D. Gellatt, and M. P. Vecchi. </author> <title> Simulated annealing. </title> <journal> Science, </journal> <volume> 220, </volume> <year> 1983. </year>
Reference-contexts: The swaps are discovered by looping through all pos sible 0 @ 2 C A pairwise swaps, and choosing either the best possible swaps, or choosing good swaps when they are first found. For further optimization, we have implemented a simulated annealing <ref> [28] </ref> algorithm. This algorithm is iteratively used to improve the resulting placement. The advantage of using simulated annealing is that local minima can be avoided.
Reference: [29] <author> J. Kubiatowicz. </author> <title> User's Manual for the A-1000 Communications and Memory Management Unit. ALEWIFE Memo No. </title> <type> 19, </type> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <month> January </month> <year> 1991. </year>
Reference-contexts: These structures are embedded directly into the netlist for each FPGA. In our results from compiling two complex designs, the 18K gate Sparcle microprocessor [3] and the 86K gate Alewife Communications and Memory Management Unit (A-1000) <ref> [29] </ref> (to be presented in Chapter 7), we show that the use of Virtual Wires can decrease FPGA chip count by a factor of 3 for Sparcle and 10 for the A-1000, assuming a crossbar interconnect. <p> The RISC microprocessor, Sparcle [3] [1], is an 18K gate SPARC processor with some modifications to the basic hardware. These modifications enhance the usefulness of Sparcle as the processing element in a multiprocessor. The CMMU <ref> [29] </ref> part is an 86K gate cache controller for this distributed shared memory machine being designed at MIT. It implements the shared memory abstraction and provides a message passing interface as well as performing the basic cache controller functionality.
Reference: [30] <author> H. T. Kung. </author> <title> Systolic communication. </title> <booktitle> In Proceedings of the International Conference on Systolic Arrays, </booktitle> <address> San Diego, California, </address> <month> May </month> <year> 1988. </year>
Reference-contexts: This method can be applied to any topology and FPGA device, although some benefit substantially more than others. A virtual wire represents a connection between a logical output on one FPGA and a logical input on another FPGA. Established via a pipelined, statically routed <ref> [30] </ref> communication network, these virtual wires increase available off-chip communication bandwidth by multiplexing the use of FPGA pin resources (physical wires) among multiple emulation signals (logical wires). We show that Virtual Wires effectively relax pin limitations. <p> Static routing can be used whenever communication can be predetermined. Static refers to the fact that all data movement can be determined and optimized at compile-time. This mechanism has been used in scheduling real-time communication in a multiprocessor environment <ref> [30] </ref>. More recently, simulated annealing and linear programming techniques have been used to statically schedule communication patterns for the Numesh multicomputer [35]. Static routing has also been used in FPGA-based systolic arrays, such as Splash [20].
Reference: [31] <author> B. Landman and R. Russo. </author> <title> On a pin versus block relationship for partitions of logic graphs. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-20(12), </volume> <month> Dec. </month> <year> 1971. </year>
Reference-contexts: Rent of IBM prepared two internal memoranda containing the log plots of pins versus gates (termed blocks in the literature of that time) for portions of the IBM series 1400 computers. In <ref> [31] </ref>, Landman and Russo present a careful analysis of 3.3. EMPIRICAL OBSERVATION: RENT'S RULE 37 his results based on a computer algorithm used to partition several designs for various pin limits. <p> The values of K p and B reported for the IBM computers were 2.5 and 0.6, respectively. This rule only applies if N g 1. As with most rules, it has limitations. See <ref> [31] </ref> and [7]. Equation 3.1 can be used to measure the communication parameters of a given implementation technology as well as the parameters of a design specification. A design's architecture and organization greatly affect its parameters. For example, pipelining increases communication requirements due to dependencies between pipeline stages.
Reference: [32] <author> C. Y. Lee. </author> <title> Representation of switching circuits by binary-decision progams. </title> <journal> Bell. Syst. tech. J., </journal> <volume> 38 </volume> <pages> 958-999, </pages> <month> July </month> <year> 1959. </year>
Reference-contexts: Verification techniques fall into two categories: formal methods and empirical methods. Formal verification methods attempt to prove that an implementation 15 16 CHAPTER 1. INTRODUCTION satisfies a given specification. By using algorithmic shortcuts such as binary decision diagrams <ref> [32] </ref> and symbolic simulation [21], formal methods are able to reduce the computational requirements of system testing. Formal methods have also succeeded in the areas of automatic test pattern generation [27], synthesis for testability [18], and static timing analysis.
Reference: [33] <author> L. Maliniak. </author> <title> Multiplexing enhances hardware emulation. </title> <booktitle> Electronic Design, </booktitle> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: Thus such a system can easily merit a million dollar price tag. Quickturn Inc. has developed emulation systems which interconnect FPGAs in a two-dimensional mesh [44] and, more recently, in a partial crossbar topology <ref> [33] </ref>. In both systems, they used the Xilinx 3090 series FPGA [46]. In the first system, they used FPGA for logic as well as inter-FPGA routing. In the second system, the Enterprise system, they added a custom crossbar chip alongside each FPGA. <p> This average distance drops utilization to U balanced hw 30 percent! As another example, if Quickturn were to mesh connect all 528 FPGAs in a 330K gate Enterprise Emulation System <ref> [33] </ref>, with the same B circuit = 0:6 design, a predicted d 4 hops would drop utilization to U balanced hw 10 percent of their current crossbar topology's efficiency. 3 8.2 Virtual Wires Gate Utilization If we consider the entire set of partitions, we can express the average Virtual Wires gate
Reference: [34] <author> F. P. Manning. </author> <title> Automatic Test, Configuration, and Repair of Cellular Arrays. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, Department of Electrical Engineering and Computer Science, </institution> <month> June </month> <year> 1975. </year>
Reference-contexts: Cellular arrays can be traced back to work on cellular automata in the 1960's [37]. However this work could not be applied to logic emulation without the enabling technology of large scale integration, rapidly progressing in the 1970's. In Frank Manning's 1975 thesis <ref> [34] </ref>, the use of rectangular arrays of programmable logic cells, in which information stored in a cell tells that cell how to behave, was proposed as an efficient means of logic simulation.
Reference: [35] <author> M. Minsky. </author> <title> Scheduled routing for the numesh. </title> <type> Master's thesis, </type> <institution> EECS Department, MIT, </institution> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: This mechanism has been used in scheduling real-time communication in a multiprocessor environment [30]. More recently, simulated annealing and linear programming techniques have been used to statically schedule communication patterns for the Numesh multicomputer <ref> [35] </ref>. Static routing has also been used in FPGA-based systolic arrays, such as Splash [20]. Virtual circuit routing [9], found in connection-oriented networks, is store-and-forward switching in which a particular path is set up when a communication session is initiated, and is maintained for the duration of that session.
Reference: [36] <author> M.R. Garey and D.S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory or NP-Completeness. </title> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1979. </year> <note> 102 BIBLIOGRAPHY </note>
Reference-contexts: The graph partitioning problem belongs to the class of NP-hard problems <ref> [36] </ref> given n nodes to partition into m subsets, the number of possible different partitionings, P , is: P = (n=m)! m m! In FPGAs, differing internal resources, such as registers and lookup tables, complicate the partitioning problem.
Reference: [37] <author> J. V. Neumann. </author> <title> Theory of Self-Reproducing Automata. edited and completed by A.W. </title> <editor> Burks, U. </editor> <booktitle> of Ill. </booktitle> <publisher> Press, </publisher> <address> Urbana and London, </address> <year> 1966. </year>
Reference-contexts: See [10] for a more comprehensive survey of hardware accelerators used in computer aided design. 2.2 FPGA-based Logic Emulation Even before FPGAs existed, logic emulation based on cellular arrays [39] was being explored in academia. Cellular arrays can be traced back to work on cellular automata in the 1960's <ref> [37] </ref>. However this work could not be applied to logic emulation without the enabling technology of large scale integration, rapidly progressing in the 1970's.
Reference: [38] <author> G. F. Pfister. </author> <title> The yorktown simulation engine: Introduction. </title> <booktitle> In Proc. 19th Design Automation Conference, </booktitle> <pages> pages 51-54. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1982. </year>
Reference-contexts: The second uses a communication technique analogous to static routing, the communication technique used by Virtual Wires. Designed at the IBM T. J. Watson Research Center, the Yorktown Simulation Engine (YSE) <ref> [38] </ref> is a special-purpose highly-parallel programmable logic machine for the gate-level simulation of logic. It can simulate up to one million gates at a speed of over two billion gate simulations per second. It is composed of an array of logic processors, each capable of simulating 4096 gates.
Reference: [39] <author> R. Shoup. </author> <title> Programmable Cellular Logic Arrays. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, School of Computer Science, </institution> <month> March </month> <year> 1970. </year>
Reference-contexts: See [10] for a more comprehensive survey of hardware accelerators used in computer aided design. 2.2 FPGA-based Logic Emulation Even before FPGAs existed, logic emulation based on cellular arrays <ref> [39] </ref> was being explored in academia. Cellular arrays can be traced back to work on cellular automata in the 1960's [37]. However this work could not be applied to logic emulation without the enabling technology of large scale integration, rapidly progressing in the 1970's.
Reference: [40] <author> L. P. Soule. </author> <title> Parallel Logic Simulation: An Evaluation of Centralized-Time and Distributed-Time Algorithms. </title> <type> PhD thesis, </type> <institution> Standford University, Department of Electrical Engineering and Computer Science, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: To improve simulation time, engineers have used both software and hardware techniques. Software based accelerations include compiled-code simulation, parallel simulation, and high level simulation. In compiled-code simulation [8], digital logic that is to be simulated is compiled directly into machine instructions rather than being interpreted. Parallel simulation techniques <ref> [40] </ref> have been reported to achieve speed-ups for digital logic simulation as well. In conjunction with these methods, researchers are speeding up simulation by directly simulating high-level description languages (HDLs) such as VHDL and Verilog [15]. Hardware acceleration ranges from co-processors for software simulators, to special purpose logic processors [10].
Reference: [41] <author> Synopsys, Inc. </author> <title> Command Reference Manual, </title> <note> Version 3.0, </note> <month> dec </month> <year> 1992. </year>
Reference-contexts: RESULTS Tool Function Software Used Netlist Translator InCA Translator Technology Mapper InCA Libraries Partitioner InCA Partitioner Global Placer New C program Dependency Analyzer Modified lisp parser program Virtual Router New C program Table 7.1: Software Tools used For Experiments Tool Function Software Used Netlist Translator Synopsys <ref> [41] </ref> Technology Mapper Synopsys FPGA Compiler [41] Partitioner InCA Partitioner Global Placer New C program Dependency Analyzer Modified lisp parser program Virtual Router New C program Route Embedder New C program FPGA-Specific APR Xilinx XACT Table 7.2: Current Software Tools 7.1. <p> Function Software Used Netlist Translator InCA Translator Technology Mapper InCA Libraries Partitioner InCA Partitioner Global Placer New C program Dependency Analyzer Modified lisp parser program Virtual Router New C program Table 7.1: Software Tools used For Experiments Tool Function Software Used Netlist Translator Synopsys <ref> [41] </ref> Technology Mapper Synopsys FPGA Compiler [41] Partitioner InCA Partitioner Global Placer New C program Dependency Analyzer Modified lisp parser program Virtual Router New C program Route Embedder New C program FPGA-Specific APR Xilinx XACT Table 7.2: Current Software Tools 7.1.
Reference: [42] <author> R. Tessier, J. Babb, M. Dahl, S. Hanono, and A. Agarwal. </author> <title> The Virtual Wires Emulation System: A Gate-Efficient ASIC Prototyping Environment. </title> <booktitle> In Submitted to 1994 ACM International Workshop on Field-Programmable Gate Arrays, </booktitle> <address> Berkeley, CA, </address> <month> February </month> <year> 1994. </year> <note> ACM. </note>
Reference-contexts: With Virtual Wires, use of a low dimension network reduces emulation speed proportional to the network diameter: a factor of 2 for Sparcle and 6 for the A-1000. Based on the implications of these results we have fabricated a scalable, low cost emulation system <ref> [42] </ref>. Our final contribution is an analysis of the overhead of Virtual Wires and hard wires. We introduce Rent ratios and a topological factor for predicting pin limitation overhead without Virtual Wires. For Virtual Wires, we derive the optimal partition size. <p> This technique of remote access to the emulation system works particularly well for synchronous logic, since evaluation times may be limited to transitions of the system clock. Figure 6-4 shows our current simulation accelerator interface. See <ref> [42] </ref> and [22] for more detail on the simulation accelerator. Chapter 7 Results 7.1 Overview We have implemented the entire Virtual Wires software system described in Chapter 5 and the Xilinx-based prototype hardware described in Section 6.2.
Reference: [43] <author> S. Walters. </author> <title> Prototyping ASICs in reprogrammable hardware meets system requirements. </title> <booktitle> Computer Design, </booktitle> <pages> pages 76-77, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: There is also the added difficulty of verifying the custom model itself! In the case of a chip, this difficulty may result in modeling costs that are higher than the original design costs of the final system <ref> [43] </ref>. Recent improvements in hardware models include the use of programmable logic and programmable PC boards [4]. The added complexity of reconfigurability can be offset by the ability to make design changes more rapidly.
Reference: [44] <author> S. Walters. </author> <title> Computer-aided prototyping for ASIC-based systems. </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: And finally, the application can be compiled with purely static communication patterns. 1.4. CONTRIBUTIONS OF THESIS 23 FPGA-based logic emulators are capable of emulating complex logic designs at clock speeds six orders of magnitude faster than a software simulator <ref> [44] </ref>. This performance is achieved by partitioning a logic design, described by a netlist, across an interconnected array of FPGAs (Figure 1-3). This array is connected to a host workstation which is capable of downloading design configurations, and is directly wired into the target system for the logic design. <p> In 1992, the price for a system was in the range of $2 to $3 per emulated gate. Thus such a system can easily merit a million dollar price tag. Quickturn Inc. has developed emulation systems which interconnect FPGAs in a two-dimensional mesh <ref> [44] </ref> and, more recently, in a partial crossbar topology [33]. In both systems, they used the Xilinx 3090 series FPGA [46]. In the first system, they used FPGA for logic as well as inter-FPGA routing. <p> Table 7.7 shows the results for both hard wires and Virtual Wires. Compiling the A-1000 to a torus, hardwires only, was not practical with our partitioning software. The gate utilizations obtained for the hardwired cases agree with reports in the literature [25] <ref> [44] </ref> on designs of similar complexity. 7.7.
Reference: [45] <author> Y.-C. Wei, C.-K. Cheng, and Z. Wurman. </author> <title> Multiple-level partitioning: An application for the very large-scale hardware simulator. </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> 26(5), </volume> <month> May </month> <year> 1991. </year>
Reference-contexts: BACKGROUND from design verification and fast simulation, to logic analysis and "partial hardware bring-up" (i.e. logic emulation). This engine is a follow-on to the previous Logic Simulation Machine [12], both of which are based on the concepts of John Cocke. The Very Large Simulation Subsystem (VLSS) <ref> [45] </ref> is another massively parallel simulation engine, capable of performing hundreds of billions of gate evaluations per second. It is a compiled simulator with each processor being a special purpose full-custom chip containing 64 two-input one-output programmable gates.
Reference: [46] <author> XILINX, Inc., </author> <title> 2100 Logic Drive, </title> <address> San Jose, California, </address> <month> 95214. </month> <title> The Programmable Gate Array Data Book, </title> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: Thus such a system can easily merit a million dollar price tag. Quickturn Inc. has developed emulation systems which interconnect FPGAs in a two-dimensional mesh [44] and, more recently, in a partial crossbar topology [33]. In both systems, they used the Xilinx 3090 series FPGA <ref> [46] </ref>. In the first system, they used FPGA for logic as well as inter-FPGA routing. In the second system, the Enterprise system, they added a custom crossbar chip alongside each FPGA. <p> 616 bits 1,120 bits 200 bits 392 bits 1,024bits 3136 bits I/Os 112 pins 160 pins 160 pins 192 pins 96 pins 108 pins Table 7.4: A Few FPGA Device Characteristics 7.3 Target FPGAs For target FPGAs, we consider the Xilinx 3000 and 4000 series (including the new 4000H series) <ref> [46] </ref> [47] and the Concurrent Logic Cli6000 series [13]. These are all SRAM-based FPGAs. The Xilinx 3000 series is the previous generation of Xilinx FPGAs, and the Xilinx 4000 series is the latest generation.
Reference: [47] <author> XILINX, Inc., </author> <title> 2100 Logic Drive, </title> <address> San Jose, California, </address> <booktitle> 95214. The XC4000 Data Book, </booktitle> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: As the use of FPGAs has become more refined, another powerful property has become apparent the ability for a system containing an FPGA to reconfigure that device to perform different functions at different times. In particular, static random access memory (SRAM) based FPGAs, such as the Xilinx 4000 Series <ref> [47] </ref>, can be reconfigured. Figure 1-2 shows the high level architecture of an SRAM-based FPGA. The SRAM, shown to the side in a separate box for clarity, is actually interspersed throughout the programmable logic, interconnect, and I/O. <p> Up to 64 Mbytes of memory can be emulated with the addition of special memory emulation cards. Quickturn also sells MARS emulators, originally developed by Pie Design Systems, Inc. This system is very similar to Quickturn's Enterprise system. The MARS systems use the more advanced Xilinx 4000 series <ref> [47] </ref> and do not have special crossbar chips. The MARS system takes advantage of the Xilinx 4000's ability to emulate memory directly in the FPGA. The Virtual ASIC system by InCA, ltd. [25] uses a combination of nearest neighbor and crossbar interconnect. <p> bits 1,120 bits 200 bits 392 bits 1,024bits 3136 bits I/Os 112 pins 160 pins 160 pins 192 pins 96 pins 108 pins Table 7.4: A Few FPGA Device Characteristics 7.3 Target FPGAs For target FPGAs, we consider the Xilinx 3000 and 4000 series (including the new 4000H series) [46] <ref> [47] </ref> and the Concurrent Logic Cli6000 series [13]. These are all SRAM-based FPGAs. The Xilinx 3000 series is the previous generation of Xilinx FPGAs, and the Xilinx 4000 series is the latest generation. The largest size FPGA in this series will contain 20,000 claimed gates and 240 external I/O pins.
References-found: 47

