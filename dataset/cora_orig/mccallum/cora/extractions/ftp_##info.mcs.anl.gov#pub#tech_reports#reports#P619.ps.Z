URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P619.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts96.htm
Root-URL: http://www.mcs.anl.gov
Title: Otter: The CADE-13 Competition Incarnations  
Author: WILLIAM McCUNE and LARRY WOS 
Note: Preprint ANL/MCS-P619-1096  
Date: 60439.  
Address: Argonne, IL  
Affiliation: Mathematics and Computer Science Division, Argonne National Laboratory,  
Abstract: This article discusses the two incarnations of Otter entered in the CADE-13 Automated Theorem Proving Competition. Also presented are some historical background, a summary of applications that have led to new results in mathematics and logic, and a general discussion of Otter. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. Butler, E. Lusk, W. McCune, and R. Overbeek. </author> <title> Paths to high-performance automated theorem proving. </title> <editor> In J. Siekmann, editor, </editor> <booktitle> Proceedings of the 8th International Conference on Automated Deduction, LNCS, </booktitle> <volume> Vol. 230, </volume> <pages> pages 588-597, </pages> <address> Berlin, 1986. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The functionality of ITP was similar to that of AURA, except that environments were omitted. The motivations for LMA and ITP were sound software engineering and portability. Several experimental theorem provers based on technology for compiling logic programs <ref> [1] </ref> were also part of the third generation. Otter [19] is a member of the fourth generation.
Reference: 2. <author> R. Butler and R. Overbeek. </author> <title> A tutorial on the construction of high-performance resolution/paramodulation systems. </title> <type> Tech. Report ANL-90/30, </type> <institution> Argonne National Laboratory, Argonne, IL, </institution> <year> 1990. </year>
Reference-contexts: Other members of the fourth generation are ROO [9] (Radical Otter Optimization), by John Slaney, Lusk, and McCune, which is a parallel version of Otter; FDB <ref> [2] </ref> (Formula DataBase), by Overbeek and Ralph Butler, which is a unification and indexing toolkit; MACE [18] (Models And CounterExamples), by McCune, which searches for finite models; and EQP [20] (EQuational Prover), by McCune, a program for equational logic, which incorporates associative-commutative unification and matching.
Reference: 3. <author> J. Hart and K. Kunen. </author> <title> Single axioms for odd exponent groups. </title> <journal> J. Automated Reasoning, </journal> <volume> 14(3) </volume> <pages> 383-412, </pages> <year> 1995. </year>
Reference-contexts: Examples of such results are the existence of fixed point combinators in fragments of combinatory logic [25, 36], logic calculi with condensed detachment [27], single axioms for group calculi [14, 17], single axioms for group theory and subvarieties [16, 26] and (K. Kunen and J. Hart) <ref> [5, 3, 6] </ref>, single axioms for ternary Boolean algebra (with R. Padman-abhan) [30], equational theorems about cubic curves (with Padmanabhan) [29], single axioms for lattice-like algebras (with Padmanabhan) [22], self-dual bases for groups and for lattices (with Padmanabhan) [23], implicational axioms for groups and Abelian groups (with A. D.
Reference: 4. <author> T. Jech. </author> <title> Otter experiments in a system of combinatory logic. </title> <journal> J. Automated Reasoning, </journal> <volume> 14(3) </volume> <pages> 413-426, </pages> <year> 1995. </year>
Reference-contexts: D. Sands) [24], Robbins algebra (with S. Winker) [44, 20, 34], Moufang loops [23] and (Kunen) [7, 8], illiative combinatory logic (T. Jech) <ref> [4] </ref>, and proofs with particular properties [37, 38, 39]. 2. Architecture Otter reads an input file containing a set of clauses and some control information.
Reference: 5. <author> K. Kunen. </author> <title> Single axioms for groups. </title> <journal> J. Automated Reasoning, </journal> <volume> 9(3) </volume> <pages> 291-308, </pages> <year> 1992. </year>
Reference-contexts: Examples of such results are the existence of fixed point combinators in fragments of combinatory logic [25, 36], logic calculi with condensed detachment [27], single axioms for group calculi [14, 17], single axioms for group theory and subvarieties [16, 26] and (K. Kunen and J. Hart) <ref> [5, 3, 6] </ref>, single axioms for ternary Boolean algebra (with R. Padman-abhan) [30], equational theorems about cubic curves (with Padmanabhan) [29], single axioms for lattice-like algebras (with Padmanabhan) [22], self-dual bases for groups and for lattices (with Padmanabhan) [23], implicational axioms for groups and Abelian groups (with A. D.
Reference: 6. <author> K. Kunen. </author> <title> The shortest single axioms for groups of exponent 4. </title> <journal> Computers and Mathematics with Applications, </journal> <volume> 29 </volume> <pages> 1-12, </pages> <year> 1995. </year>
Reference-contexts: Examples of such results are the existence of fixed point combinators in fragments of combinatory logic [25, 36], logic calculi with condensed detachment [27], single axioms for group calculi [14, 17], single axioms for group theory and subvarieties [16, 26] and (K. Kunen and J. Hart) <ref> [5, 3, 6] </ref>, single axioms for ternary Boolean algebra (with R. Padman-abhan) [30], equational theorems about cubic curves (with Padmanabhan) [29], single axioms for lattice-like algebras (with Padmanabhan) [22], self-dual bases for groups and for lattices (with Padmanabhan) [23], implicational axioms for groups and Abelian groups (with A. D.
Reference: 7. <author> K. </author> <title> Kunen. </title> <journal> Moufang quasigroups. J. Algebra, </journal> <volume> 83 </volume> <pages> 231-234, </pages> <year> 1996. </year>
Reference-contexts: D. Sands) [24], Robbins algebra (with S. Winker) [44, 20, 34], Moufang loops [23] and (Kunen) <ref> [7, 8] </ref>, illiative combinatory logic (T. Jech) [4], and proofs with particular properties [37, 38, 39]. 2. Architecture Otter reads an input file containing a set of clauses and some control information.
Reference: 8. <author> K. Kunen. Quasigroups, </author> <title> loops, and associative laws. </title> <journal> J. </journal> <note> Algebra, 1996. To appear. </note>
Reference-contexts: D. Sands) [24], Robbins algebra (with S. Winker) [44, 20, 34], Moufang loops [23] and (Kunen) <ref> [7, 8] </ref>, illiative combinatory logic (T. Jech) [4], and proofs with particular properties [37, 38, 39]. 2. Architecture Otter reads an input file containing a set of clauses and some control information.
Reference: 9. <author> E. Lusk and W. McCune. </author> <title> Experiments with ROO, a parallel automated deduction system. </title> <editor> In B. Fronhofer and G. Wrightson, editors, </editor> <title> Parallelization in Inference Systems, </title> <journal> LNAI, </journal> <volume> Vol. 590, </volume> <pages> pages 139-162, </pages> <address> Berlin, 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: For a while the program was called CART (for Compendium of Automated Reasoning Techniques), but that name brought too many images of oxen and mud, so we renamed the program Otter (Organized theorem-proving techniques for effective research) in May 1988. Other members of the fourth generation are ROO <ref> [9] </ref> (Radical Otter Optimization), by John Slaney, Lusk, and McCune, which is a parallel version of Otter; FDB [2] (Formula DataBase), by Overbeek and Ralph Butler, which is a unification and indexing toolkit; MACE [18] (Models And CounterExamples), by McCune, which searches for finite models; and EQP [20] (EQuational Prover), by
Reference: 10. <author> E. Lusk, W. McCune, and R. Overbeek. </author> <title> Logic Machine Architecture: Kernel functions. </title> <editor> In D. Loveland, editor, </editor> <booktitle> Proceedings of the 6th Conference on Automated Deduction, LNCS, </booktitle> <volume> Vol. 138, </volume> <pages> pages 70-84, </pages> <address> Berlin, 1982. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The third generation of Argonne theorem provers, started in 1980 by Over-beek, Lusk, and McCune, consisted mostly of the LMA <ref> [10] </ref> (Logic Machine Architecture), a toolkit (written in Pascal) for building deduction systems, and ITP [11] (Interactive Theorem Prover), constructed with LMA. The functionality of ITP was similar to that of AURA, except that environments were omitted. The motivations for LMA and ITP were sound software engineering and portability.
Reference: 11. <author> E. Lusk, W. McCune, and R. Overbeek. </author> <note> ITP at Argonne National Laboratory. </note> <editor> In J. Siek-mann, editor, </editor> <booktitle> Proceedings of the 8th International Conference on Automated Deduction, LNCS, </booktitle> <volume> Vol. 230, </volume> <pages> pages 697-698, </pages> <address> Berlin, 1986. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The third generation of Argonne theorem provers, started in 1980 by Over-beek, Lusk, and McCune, consisted mostly of the LMA [10] (Logic Machine Architecture), a toolkit (written in Pascal) for building deduction systems, and ITP <ref> [11] </ref> (Interactive Theorem Prover), constructed with LMA. The functionality of ITP was similar to that of AURA, except that environments were omitted. The motivations for LMA and ITP were sound software engineering and portability.
Reference: 12. <author> J. McCharen, R. Overbeek, and L. Wos. </author> <title> Complexity and related enhancements for automated theorem-proving programs. </title> <journal> Computers and Mathematics with Applications, </journal> <volume> 2 </volume> <pages> 1-16, </pages> <year> 1976. </year>
Reference-contexts: The second generation, started by Ross Overbeek in 1970 [28], was based on the NIUTP (Northern Illinois University Theorem Prover) series <ref> [12, 13] </ref>, which fl Supported by the Mathematical, Information, and Computational Sciences Division subprogram of the Office of Computational and Technology Research, U.S.
Reference: 13. <author> J. McCharen, R. Overbeek, and L. Wos. </author> <title> Problems and experiments for and with automated theorem-proving programs. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-25(8):773-782, </volume> <month> August </month> <year> 1976. </year>
Reference-contexts: The second generation, started by Ross Overbeek in 1970 [28], was based on the NIUTP (Northern Illinois University Theorem Prover) series <ref> [12, 13] </ref>, which fl Supported by the Mathematical, Information, and Computational Sciences Division subprogram of the Office of Computational and Technology Research, U.S.
Reference: 14. <author> W. McCune. </author> <title> Automated discovery of new axiomatizations of the left group and right group calculi. </title> <journal> J. Automated Reasoning, </journal> <volume> 9(1) </volume> <pages> 1-24, </pages> <year> 1992. </year>
Reference-contexts: Examples of such results are the existence of fixed point combinators in fragments of combinatory logic [25, 36], logic calculi with condensed detachment [27], single axioms for group calculi <ref> [14, 17] </ref>, single axioms for group theory and subvarieties [16, 26] and (K. Kunen and J. Hart) [5, 3, 6], single axioms for ternary Boolean algebra (with R.
Reference: 15. <author> W. McCune. </author> <title> Experiments with discrimination tree indexing and path indexing for term retrieval. </title> <journal> J. Automated Reasoning, </journal> <volume> 9(2) </volume> <pages> 147-167, </pages> <year> 1992. </year> <type> Invited paper. </type>
Reference-contexts: Therefore, the C programming language was used. The functionality of AURA and ITP, especially the inference and search methods, was quite useful in practice, so Otter retained most of it. However, low-level algorithms such as indexing techniques <ref> [15] </ref> were improved during construction of Otter, resulting in sharp speedups over ITP. Otter evolved from 1988 through 1995 as the need for new features arose during our work on inference rules, search strategies, and applications. <p> It contains about 35,000 lines of code (including comments). Clauses and terms are stored in shared data structures, which speed some of the indexing and inference operations and save memory. Specially designed and tuned indexing algorithms <ref> [15] </ref> are used to access terms and clauses for subsump-tion operations, application in inference rules, and application of demodulators. Otter is designed to run in a UNIX-like environment, but versions (with several limitations) are available also for DOS computers and Macintoshes. 4.
Reference: 16. <author> W. McCune. </author> <title> Single axioms for groups and Abelian groups with various operations. </title> <journal> J. Automated Reasoning, </journal> <volume> 10(1) </volume> <pages> 1-13, </pages> <year> 1993. </year>
Reference-contexts: Examples of such results are the existence of fixed point combinators in fragments of combinatory logic [25, 36], logic calculi with condensed detachment [27], single axioms for group calculi [14, 17], single axioms for group theory and subvarieties <ref> [16, 26] </ref> and (K. Kunen and J. Hart) [5, 3, 6], single axioms for ternary Boolean algebra (with R.
Reference: 17. <author> W. McCune. </author> <title> Single axioms for the left group and right group calculi. </title> <journal> Notre Dame J. Formal Logic, </journal> <volume> 34(1) </volume> <pages> 132-139, </pages> <year> 1993. </year>
Reference-contexts: Examples of such results are the existence of fixed point combinators in fragments of combinatory logic [25, 36], logic calculi with condensed detachment [27], single axioms for group calculi <ref> [14, 17] </ref>, single axioms for group theory and subvarieties [16, 26] and (K. Kunen and J. Hart) [5, 3, 6], single axioms for ternary Boolean algebra (with R.
Reference: 18. <author> W. McCune. </author> <title> A Davis-Putnam program and its application to finite first-order model search: Quasigroup existence problems. </title> <type> Tech. Report ANL/MCS-TM-194, </type> <institution> Argonne National Laboratory, Argonne, IL, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: Other members of the fourth generation are ROO [9] (Radical Otter Optimization), by John Slaney, Lusk, and McCune, which is a parallel version of Otter; FDB [2] (Formula DataBase), by Overbeek and Ralph Butler, which is a unification and indexing toolkit; MACE <ref> [18] </ref> (Models And CounterExamples), by McCune, which searches for finite models; and EQP [20] (EQuational Prover), by McCune, a program for equational logic, which incorporates associative-commutative unification and matching. Aside from effective inference rules and strategies for proving theorems, speed and portability were the main considerations in building Otter.
Reference: 19. <author> W. McCune. </author> <title> Otter 3.0 Reference Manual and Guide. </title> <type> Tech. Report ANL-94/6, </type> <institution> Argonne National Laboratory, Argonne, IL, </institution> <year> 1994. </year>
Reference-contexts: 1. Introduction Otter <ref> [19, 21] </ref> is an automated deduction system for first-order logic with equality. Two versions of Otter were entered in the CADE-13 Automated Theorem Proving System Competition, and the main purpose of this article is to give a detailed presentation of our entries. <p> The functionality of ITP was similar to that of AURA, except that environments were omitted. The motivations for LMA and ITP were sound software engineering and portability. Several experimental theorem provers based on technology for compiling logic programs [1] were also part of the third generation. Otter <ref> [19] </ref> is a member of the fourth generation. We started writing code for a new theorem prover in June 1987, and by December of that year it had developed into a program that was useful for our research on inference rules and search strategies. <p> See the manual <ref> [19] </ref> for details on the material in this section. 2.1. Logic Otter applies to statements in classical first-order (unsorted) logic with equality. It accepts as input either clauses or quantified formulas. <p> Most of our current work uses LRPO. The user may input a (total) symbol ordering; the default symbol ordering is constants OE high-arity OE OE binary OE unary, and within arity, the lexicographic ascii ordering is used. See the Otter manual <ref> [19] </ref> for the ad hoc ordering method. Selection of the given clause in Step 1 of the inference loop is the most important aspect of the search process; it is the next path to explore. The default selection is the smallest clause in sos, which we call best-first search. <p> clause, say P , to be used paper.tex; 17/10/1996; 11:24; no v.; p.6 Otter: The CADE-13 Competition Incarnations 7 as a rewrite rule P = TRUE to simplify nonunit derived clauses, and the knuth-bendix flag causes several additional options to be set so that the search resembles Knuth-Bendix completion (see <ref> [19] </ref>). The two competition entries named Otter-304z were run in the (ordinary) autonomous mode. 2.3.3. The Auto-Wos Mode A different version of the autonomous mode, called auto-wos, was created specifically for the CADE-13 competition.
Reference: 20. <author> W. McCune. </author> <title> 33 basic test problems: A practical evaluation of some paramodulation strategies. </title> <type> Preprint ANL/MCS-P618-1096, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1996. </year>
Reference-contexts: generation are ROO [9] (Radical Otter Optimization), by John Slaney, Lusk, and McCune, which is a parallel version of Otter; FDB [2] (Formula DataBase), by Overbeek and Ralph Butler, which is a unification and indexing toolkit; MACE [18] (Models And CounterExamples), by McCune, which searches for finite models; and EQP <ref> [20] </ref> (EQuational Prover), by McCune, a program for equational logic, which incorporates associative-commutative unification and matching. Aside from effective inference rules and strategies for proving theorems, speed and portability were the main considerations in building Otter. Therefore, the C programming language was used. <p> Padman-abhan) [30], equational theorems about cubic curves (with Padmanabhan) [29], single axioms for lattice-like algebras (with Padmanabhan) [22], self-dual bases for groups and for lattices (with Padmanabhan) [23], implicational axioms for groups and Abelian groups (with A. D. Sands) [24], Robbins algebra (with S. Winker) <ref> [44, 20, 34] </ref>, Moufang loops [23] and (Kunen) [7, 8], illiative combinatory logic (T. Jech) [4], and proofs with particular properties [37, 38, 39]. 2. Architecture Otter reads an input file containing a set of clauses and some control information. <p> If many of those clauses become demodulators, much time is spent (and wasted) using them to try to demodulate previous clauses. Thus, a good value for the max-weight parameter is important to achieving a well-behaved search <ref> [20] </ref>. We frequently make several initial searches, varying the max-weight parameter until a good value is found.
Reference: 21. <author> W. McCune. </author> <note> Otter. http://www.mcs.anl.gov/home/mccune/ar/otter/, 1996. </note>
Reference-contexts: 1. Introduction Otter <ref> [19, 21] </ref> is an automated deduction system for first-order logic with equality. Two versions of Otter were entered in the CADE-13 Automated Theorem Proving System Competition, and the main purpose of this article is to give a detailed presentation of our entries.
Reference: 22. <author> W. McCune and R. Padmanabhan. </author> <title> Single identities for lattice theory and weakly associative lattices. </title> <type> Preprint MCS-P493-0395, </type> <institution> Argonne National Laboratory, Argonne, IL, </institution> <year> 1995. </year>
Reference-contexts: Kunen and J. Hart) [5, 3, 6], single axioms for ternary Boolean algebra (with R. Padman-abhan) [30], equational theorems about cubic curves (with Padmanabhan) [29], single axioms for lattice-like algebras (with Padmanabhan) <ref> [22] </ref>, self-dual bases for groups and for lattices (with Padmanabhan) [23], implicational axioms for groups and Abelian groups (with A. D. Sands) [24], Robbins algebra (with S. Winker) [44, 20, 34], Moufang loops [23] and (Kunen) [7, 8], illiative combinatory logic (T.
Reference: 23. <author> W. McCune and R. Padmanabhan. </author> <title> Automated Deduction in Equational Logic and Cubic Curves, </title> <booktitle> Vol. 1095 of LNCS (AI subseries). </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1996. </year> <note> paper.tex; 17/10/1996; 11:24; no v.; p.10 Otter: The CADE-13 Competition Incarnations 11 </note>
Reference-contexts: Kunen and J. Hart) [5, 3, 6], single axioms for ternary Boolean algebra (with R. Padman-abhan) [30], equational theorems about cubic curves (with Padmanabhan) [29], single axioms for lattice-like algebras (with Padmanabhan) [22], self-dual bases for groups and for lattices (with Padmanabhan) <ref> [23] </ref>, implicational axioms for groups and Abelian groups (with A. D. Sands) [24], Robbins algebra (with S. Winker) [44, 20, 34], Moufang loops [23] and (Kunen) [7, 8], illiative combinatory logic (T. Jech) [4], and proofs with particular properties [37, 38, 39]. 2. <p> Padman-abhan) [30], equational theorems about cubic curves (with Padmanabhan) [29], single axioms for lattice-like algebras (with Padmanabhan) [22], self-dual bases for groups and for lattices (with Padmanabhan) <ref> [23] </ref>, implicational axioms for groups and Abelian groups (with A. D. Sands) [24], Robbins algebra (with S. Winker) [44, 20, 34], Moufang loops [23] and (Kunen) [7, 8], illiative combinatory logic (T. Jech) [4], and proofs with particular properties [37, 38, 39]. 2. Architecture Otter reads an input file containing a set of clauses and some control information. <p> It is a generalization rule that applies to equations and is derived from the property of cubic curves that for some kinds of statement P , if P holds at some point on a cubic curve, then P holds at every point on the curve. See <ref> [23] </ref> for details and applications. 2.3.
Reference: 24. <author> W. McCune and A. D. Sands. </author> <title> Computer and human reasoning: Single implicative axioms for groups and for Abelian groups. </title> <journal> American Mathematical Monthly, </journal> <month> December </month> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: Padman-abhan) [30], equational theorems about cubic curves (with Padmanabhan) [29], single axioms for lattice-like algebras (with Padmanabhan) [22], self-dual bases for groups and for lattices (with Padmanabhan) [23], implicational axioms for groups and Abelian groups (with A. D. Sands) <ref> [24] </ref>, Robbins algebra (with S. Winker) [44, 20, 34], Moufang loops [23] and (Kunen) [7, 8], illiative combinatory logic (T. Jech) [4], and proofs with particular properties [37, 38, 39]. 2. Architecture Otter reads an input file containing a set of clauses and some control information.
Reference: 25. <author> W. McCune and L. Wos. </author> <title> The absence and the presence of fixed point combinators. </title> <journal> Theoretical Computer Science, </journal> <volume> 87 </volume> <pages> 221-228, </pages> <year> 1991. </year>
Reference-contexts: Applications of Otter Otter has been applied to several areas of mathematics and logic, and many new results have been obtained with its use. Examples of such results are the existence of fixed point combinators in fragments of combinatory logic <ref> [25, 36] </ref>, logic calculi with condensed detachment [27], single axioms for group calculi [14, 17], single axioms for group theory and subvarieties [16, 26] and (K. Kunen and J. Hart) [5, 3, 6], single axioms for ternary Boolean algebra (with R.
Reference: 26. <author> W. McCune and L. Wos. </author> <title> Application of automated deduction to the search for single axioms for exponent groups. </title> <editor> In A. Voronkov, editor, </editor> <booktitle> Logic Programming and Automated Reasoning, LNAI, </booktitle> <volume> Vol. 624, </volume> <pages> pages 131-136, </pages> <address> Berlin, 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Examples of such results are the existence of fixed point combinators in fragments of combinatory logic [25, 36], logic calculi with condensed detachment [27], single axioms for group calculi [14, 17], single axioms for group theory and subvarieties <ref> [16, 26] </ref> and (K. Kunen and J. Hart) [5, 3, 6], single axioms for ternary Boolean algebra (with R.
Reference: 27. <author> W. McCune and L. Wos. </author> <title> Experiments in automated deduction with condensed detachment. </title> <editor> In D. Kapur, editor, </editor> <booktitle> Proceedings of the 11th International Conference on Automated Deduction, LNAI, </booktitle> <volume> Vol. 607, </volume> <pages> pages 209-223, </pages> <address> Berlin, 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Applications of Otter Otter has been applied to several areas of mathematics and logic, and many new results have been obtained with its use. Examples of such results are the existence of fixed point combinators in fragments of combinatory logic [25, 36], logic calculi with condensed detachment <ref> [27] </ref>, single axioms for group calculi [14, 17], single axioms for group theory and subvarieties [16, 26] and (K. Kunen and J. Hart) [5, 3, 6], single axioms for ternary Boolean algebra (with R.
Reference: 28. <author> R. Overbeek. </author> <title> A new class of automated theorem-proving algorithms. </title> <type> Ph.D. thesis, </type> <institution> Penn-sylvania State University, </institution> <year> 1971. </year>
Reference-contexts: The program RG1 [41] (R is mnemonic for equality), designed by George Robinson and Wos in 1967, had binary resolution, factoring, paramodulation, demodulation, and the set of support strategy. The second generation, started by Ross Overbeek in 1970 <ref> [28] </ref>, was based on the NIUTP (Northern Illinois University Theorem Prover) series [12, 13], which fl Supported by the Mathematical, Information, and Computational Sciences Division subprogram of the Office of Computational and Technology Research, U.S.
Reference: 29. <author> R. Padmanabhan and W. McCune. </author> <title> Automated reasoning about cubic curves. </title> <journal> Computers and Mathematics with Applications, </journal> <volume> 29(2) </volume> <pages> 17-26, </pages> <year> 1995. </year>
Reference-contexts: Kunen and J. Hart) [5, 3, 6], single axioms for ternary Boolean algebra (with R. Padman-abhan) [30], equational theorems about cubic curves (with Padmanabhan) <ref> [29] </ref>, single axioms for lattice-like algebras (with Padmanabhan) [22], self-dual bases for groups and for lattices (with Padmanabhan) [23], implicational axioms for groups and Abelian groups (with A. D. Sands) [24], Robbins algebra (with S. Winker) [44, 20, 34], Moufang loops [23] and (Kunen) [7, 8], illiative combinatory logic (T.
Reference: 30. <author> R. Padmanabhan and W. McCune. </author> <title> Single identities for ternary Boolean algebras. </title> <journal> Computers and Mathematics with Applications, </journal> <volume> 29(2) </volume> <pages> 13-16, </pages> <year> 1995. </year>
Reference-contexts: Kunen and J. Hart) [5, 3, 6], single axioms for ternary Boolean algebra (with R. Padman-abhan) <ref> [30] </ref>, equational theorems about cubic curves (with Padmanabhan) [29], single axioms for lattice-like algebras (with Padmanabhan) [22], self-dual bases for groups and for lattices (with Padmanabhan) [23], implicational axioms for groups and Abelian groups (with A. D. Sands) [24], Robbins algebra (with S.
Reference: 31. <author> B. Smith. </author> <title> Reference manual for the environmental theorem prover: An incarnation of AURA. </title> <type> Tech. Report ANL-88-2, </type> <institution> Argonne National Laboratory, Argonne, IL, </institution> <month> March </month> <year> 1988. </year>
Reference-contexts: Department of Energy, under Contract W-31-109-Eng-38. 2 WILLIAM McCUNE and LARRY WOS evolved into AURA (AUtomated Reasoning Assistant) and its variants <ref> [31] </ref>, with contributions from Brian Smith, Rusty Lusk, Bob Veroff, Steve Winker, and Wos. The NIUTP/AURA generation (written mostly in IBM assembly language, with some PL/1) included the first high-performance implementations of hyper-resolution, demodulation, and paramodulation, and it introduced unit-resulting resolution and weighting.
Reference: 32. <author> G. Sutcliffe and C. Suttner. </author> <title> CADE-13 ATP system competition results. </title> <note> http://www.cs.jcu.edu.au/ftp/users/GSutcliffe/Competition/Results.html, 1996. </note>
Reference-contexts: A strength not evident from the competition is deduction in Horn theories, and a weakness not evident is, of course, propositional satisfiability. 5. Conclusion One of the most important features of the results can be seen in the tables of runtimes for each system on each theorem <ref> [32] </ref>. Most of the theorems on which the top finishers failed were proved easily by at least one system. Each of the unit equality theorems was proved by at least one system, and 45 of 50 were proved in less than 20 seconds by at least one system.
Reference: 33. <author> S. Winker. </author> <title> Generation and verification of finite models and counterexamples using an automated theorem prover answering two open questions. </title> <journal> J. ACM, </journal> <volume> 29 </volume> <pages> 273-284, </pages> <year> 1982. </year>
Reference-contexts: The result was the first practical set of programs in that their use led to answers to several open questions in equivalential calculus [45], ternary Boolean algebra <ref> [33] </ref>, semigroups [35], and Robbins algebra. The third generation of Argonne theorem provers, started in 1980 by Over-beek, Lusk, and McCune, consisted mostly of the LMA [10] (Logic Machine Architecture), a toolkit (written in Pascal) for building deduction systems, and ITP [11] (Interactive Theorem Prover), constructed with LMA.
Reference: 34. <author> S. Winker. </author> <title> Robbins algebra: Conditions that make a near-Boolean algebra Boolean. </title> <journal> J. Automated Reasoning, </journal> <volume> 6(4) </volume> <pages> 465-489, </pages> <year> 1990. </year>
Reference-contexts: Padman-abhan) [30], equational theorems about cubic curves (with Padmanabhan) [29], single axioms for lattice-like algebras (with Padmanabhan) [22], self-dual bases for groups and for lattices (with Padmanabhan) [23], implicational axioms for groups and Abelian groups (with A. D. Sands) [24], Robbins algebra (with S. Winker) <ref> [44, 20, 34] </ref>, Moufang loops [23] and (Kunen) [7, 8], illiative combinatory logic (T. Jech) [4], and proofs with particular properties [37, 38, 39]. 2. Architecture Otter reads an input file containing a set of clauses and some control information.
Reference: 35. <author> S. Winker, L. Wos, and E. Lusk. </author> <title> Semigroups, antiautomorphisms, and involutions: A computer solution to an open problem, I. </title> <journal> Math. of Comp., </journal> <volume> 37 </volume> <pages> 533-545, </pages> <year> 1981. </year>
Reference-contexts: The result was the first practical set of programs in that their use led to answers to several open questions in equivalential calculus [45], ternary Boolean algebra [33], semigroups <ref> [35] </ref>, and Robbins algebra. The third generation of Argonne theorem provers, started in 1980 by Over-beek, Lusk, and McCune, consisted mostly of the LMA [10] (Logic Machine Architecture), a toolkit (written in Pascal) for building deduction systems, and ITP [11] (Interactive Theorem Prover), constructed with LMA.
Reference: 36. <author> L. Wos. </author> <title> The kernel strategy and its use for the study of combinatory logic. </title> <journal> J. Automated Reasoning, </journal> <volume> 10(3) </volume> <pages> 287-343, </pages> <year> 1993. </year>
Reference-contexts: Applications of Otter Otter has been applied to several areas of mathematics and logic, and many new results have been obtained with its use. Examples of such results are the existence of fixed point combinators in fragments of combinatory logic <ref> [25, 36] </ref>, logic calculi with condensed detachment [27], single axioms for group calculi [14, 17], single axioms for group theory and subvarieties [16, 26] and (K. Kunen and J. Hart) [5, 3, 6], single axioms for ternary Boolean algebra (with R.
Reference: 37. <author> L. Wos. </author> <title> Searching for circles of pure proofs. </title> <journal> J. Automated Reasoning, </journal> <volume> 15(3) </volume> <pages> 279-315, </pages> <year> 1995. </year>
Reference-contexts: D. Sands) [24], Robbins algebra (with S. Winker) [44, 20, 34], Moufang loops [23] and (Kunen) [7, 8], illiative combinatory logic (T. Jech) [4], and proofs with particular properties <ref> [37, 38, 39] </ref>. 2. Architecture Otter reads an input file containing a set of clauses and some control information.
Reference: 38. <author> L. Wos. </author> <title> Otter and the Moufang identity problem. </title> <journal> J. </journal> <note> Automated Reasoning, 1996. To appear. </note>
Reference-contexts: D. Sands) [24], Robbins algebra (with S. Winker) [44, 20, 34], Moufang loops [23] and (Kunen) [7, 8], illiative combinatory logic (T. Jech) [4], and proofs with particular properties <ref> [37, 38, 39] </ref>. 2. Architecture Otter reads an input file containing a set of clauses and some control information.
Reference: 39. <author> L. Wos. </author> <title> The power of combining reasonance with heat. </title> <journal> J. Automated Reasoning, </journal> <volume> 17(1) </volume> <pages> 23-81, </pages> <year> 1996. </year>
Reference-contexts: D. Sands) [24], Robbins algebra (with S. Winker) [44, 20, 34], Moufang loops [23] and (Kunen) [7, 8], illiative combinatory logic (T. Jech) [4], and proofs with particular properties <ref> [37, 38, 39] </ref>. 2. Architecture Otter reads an input file containing a set of clauses and some control information. <p> In the end, we used the rule with P = "all positive clauses are ground" and f = "positive clauses". Second, we experimented with the hot list strategy <ref> [39] </ref>, which causes Otter to give special emphasis to key clauses; results indicated that our current hot list strategies are best used in the iterative-search mode rather than in autonomous modes, so the hot list strategy was not used for the competition.
Reference: 40. <author> L. Wos, D. Carson, and G. Robinson. </author> <title> The unit preference strategy in theorem proving. </title> <booktitle> In AFIPS Proceedings 26, </booktitle> <pages> pages 615-621. </pages> <publisher> Spartan Books, </publisher> <year> 1964. </year>
Reference-contexts: We have always placed great importance on implementing and testing our ideas in the field, so many computer programs have been written. The first generation consisted mainly of two programs. PG1 (Program 1), designed by Dan Carson, George Robinson, and Wos in 1963, had the unit preference strategy <ref> [40] </ref>; experimentation with PG1 led to the set of support strategy [42] and demodulation [43]. The program RG1 [41] (R is mnemonic for equality), designed by George Robinson and Wos in 1967, had binary resolution, factoring, paramodulation, demodulation, and the set of support strategy.
Reference: 41. <author> L. Wos and G. Robinson. </author> <title> Paramodulation and set of support. </title> <booktitle> In Lecture Notes in Mathematics: IRIA Symposium on Automatic Demonstration, </booktitle> <pages> pages 276-310. </pages> <publisher> Springer-Verlag, </publisher> <year> 1968. </year>
Reference-contexts: The first generation consisted mainly of two programs. PG1 (Program 1), designed by Dan Carson, George Robinson, and Wos in 1963, had the unit preference strategy [40]; experimentation with PG1 led to the set of support strategy [42] and demodulation [43]. The program RG1 <ref> [41] </ref> (R is mnemonic for equality), designed by George Robinson and Wos in 1967, had binary resolution, factoring, paramodulation, demodulation, and the set of support strategy.
Reference: 42. <author> L. Wos, G. Robinson, and D. Carson. </author> <title> Efficiency and completeness of the set of support strategy in theorem proving. </title> <journal> J. ACM, </journal> <volume> 12(4) </volume> <pages> 536-541, </pages> <year> 1965. </year>
Reference-contexts: The first generation consisted mainly of two programs. PG1 (Program 1), designed by Dan Carson, George Robinson, and Wos in 1963, had the unit preference strategy [40]; experimentation with PG1 led to the set of support strategy <ref> [42] </ref> and demodulation [43]. The program RG1 [41] (R is mnemonic for equality), designed by George Robinson and Wos in 1967, had binary resolution, factoring, paramodulation, demodulation, and the set of support strategy.
Reference: 43. <author> L. Wos, G. Robinson, D. Carson, and L. Shalla. </author> <title> The concept of demodulation in theorem proving. </title> <journal> J. ACM, </journal> <volume> 14(4) </volume> <pages> 698-709, </pages> <year> 1967. </year>
Reference-contexts: The first generation consisted mainly of two programs. PG1 (Program 1), designed by Dan Carson, George Robinson, and Wos in 1963, had the unit preference strategy [40]; experimentation with PG1 led to the set of support strategy [42] and demodulation <ref> [43] </ref>. The program RG1 [41] (R is mnemonic for equality), designed by George Robinson and Wos in 1967, had binary resolution, factoring, paramodulation, demodulation, and the set of support strategy.
Reference: 44. <author> L. Wos, S. Winker, W. McCune, R. Overbeek, E. Lusk, R. Stevens, and R. Butler. </author> <title> Automated reasoning contributes to mathematics and logic. </title> <editor> In M. Stickel, editor, </editor> <booktitle> Proceedings of the 10th International Conference on Automated Deduction, LNAI, </booktitle> <volume> Vol. 449, </volume> <pages> pages 485-499, </pages> <address> Berlin, 1990. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Padman-abhan) [30], equational theorems about cubic curves (with Padmanabhan) [29], single axioms for lattice-like algebras (with Padmanabhan) [22], self-dual bases for groups and for lattices (with Padmanabhan) [23], implicational axioms for groups and Abelian groups (with A. D. Sands) [24], Robbins algebra (with S. Winker) <ref> [44, 20, 34] </ref>, Moufang loops [23] and (Kunen) [7, 8], illiative combinatory logic (T. Jech) [4], and proofs with particular properties [37, 38, 39]. 2. Architecture Otter reads an input file containing a set of clauses and some control information.
Reference: 45. <author> L. Wos, S. Winker, B. Smith, R. Veroff, and L. Henschen. </author> <title> A new use of an automated reasoning assistant: Open questions in equivalential calculus and the study of infinite domains. </title> <journal> Artificial Intelligence, </journal> <volume> 22 </volume> <pages> 303-356, </pages> <year> 1984. </year> <note> paper.tex; 17/10/1996; 11:24; no v.; p.11 </note>
Reference-contexts: The result was the first practical set of programs in that their use led to answers to several open questions in equivalential calculus <ref> [45] </ref>, ternary Boolean algebra [33], semigroups [35], and Robbins algebra.
References-found: 45

