URL: http://north.east.isi.edu/spt/rap.ps
Refering-URL: http://north.east.isi.edu/spt/status.html
Root-URL: http://www.isi.edu
Email: freza, mjh, estring@isi.edu  
Title: RAP: An End-to-end Rate-based Congestion Control Mechanism for Realtime Streams in the Internet  
Author: Reza Rejaie Mark Handley, Deborah Estrin 
Date: June 1, 1998  
Note: Submitted to ICNP 98  
Address: Marina Del Rey, CA 90292  
Affiliation: University of Southern California Information Sciences Institute  
Abstract: End-to-end congestion control mechanisms have been critical to the robustness and stability of the Internet. The majority of today's Internet traffic is TCP, and we expect this to remain a large proportion of traffic in the future. Thus, having TCP-friendly behavior is crucial for new applications. However, the emergence of non-congestion-controlled re-altime applications threatens unfairness to competing TCP traffic and possible congestion collapse. We present an end-to-end TCP-friendly Rate Adaptation Protocol (RAP), which employs an additive-increase, multiplicative-decrease (AIMD) algorithm. It is well suited for unicast delivery of realtime streams and other semi-reliable rate-based applications. Its primary goal is to be TCP-friendly while separating network congestion control from application-level reliability. We evaluate RAP through extensive simulation, and conclude that bandwidth is usually evenly shared between TCP and RAP traffic. Unfairness to TCP traffic is directly determined by how TCP diverges from the AIMD algorithm. Basic RAP behaves in a TCP-friendly fashion in a wide range of likely conditions, but we also devised a fine-grain rate-adaptation mechanism to extend this range further. Finally, we show that deploying RED queue management can result in more ideal fairness between TCP and RAP traffic. 
Abstract-found: 1
Intro-found: 1
Reference: [Bol93] <author> J. C. Bolot. </author> <title> Characterizing end-to-end packet delay and loss in the internet. Journal of High Speed Networks, </title> <address> 2(3):289298, </address> <month> Septem-ber </month> <year> 1993. </year>
Reference-contexts: Changing the rate too often results in oscillation whereas infrequent change of rate leads to an unresponsive behavior. RAP adjusts the I P G once every round-trip time. The time between two subsequent adjusting points is called a step. Because of the random nature of the RTT signal <ref> [Bol93] </ref>, using the recent sample RTT as the step length is likely to result in a poor behavior. We need a smoothed version of RTT that represents low frequency variation of RTT and filters out the transient (i.e. high frequency) changes. <p> As long as the unfairness problem is not resolved for TCP flows, being TCP-friendly implies accepting this unfairness. 3.1 Clustered Losses In a shared best-effort networks with a high level of statistical multiplexing, the observed loss pattern has a near random behavior <ref> [Bol93] </ref> that is determined by the aggregate traffic pattern. Thus it is generally hard for an end system to predict or control the loss rate by adjusting the transmission rate. End systems are expected to react to congestion on suitable time scales by dropping their rate exponentially.
Reference: [BP95] <author> L. Brakmo and L. Peterson. </author> <title> TCP Vegas: End to end congestion avoidance on a global internet. </title> <journal> IEEE Journal of Selected Areas in Communication, </journal> <volume> 13(8):14651480, </volume> <month> October </month> <year> 1995. </year>
Reference-contexts: DABT63-95-C0095 and DABT63-96-C-0054 as part of SPT and VINT projects The success of TCP is due to its stable end-to-end congestion control mechanism based on conservative back-off. Although congestion control in TCP has been extensively studied and continuously refined during the past decade <ref> [BP95, MM96, Hoe96] </ref>, it is still an active area of research. TCP has been widely deployed due to its suitability for traditional data applications (e.g. FTP, e-mail, etc). During recent years, the Internet has witnessed the emergence of realtime applications. This class of applications are delay-sensitive, semi-reliable and rate-based. <p> Finally, section 5 concludes the paper and addresses some of our future work. 2 Coexisting with TCP Coexisting with TCP traffic in the Internet environment has the following implications: Loss-based rate control: Different implicit congestion signals have been proposed: variation of RTT in delay-based congestion avoidance [Jai89], Vegas-like congestion avoidance <ref> [BP95] </ref>, and packet loss [Jac88]. Delay-based congestion avoidance schemes usually obtain a smaller bandwidth share when they compete with loss-based schemes like TCP. TCP probes the network for available bandwidth by linearly increasing its transmission rates until it detects a packet loss.
Reference: [BT94] <author> J. Bolot and T. Turletti. </author> <title> A rate control mechanism for packet video in the internet. </title> <booktitle> Proc. IEEE Infocomm, </booktitle> <pages> pages 12161223, </pages> <month> June </month> <year> 1994. </year> <note> http://www.tns.lcs.mit.edu/ turletti/. </note>
Reference-contexts: Turletti et. al. propose a control mechanism that performs exponential increase and exponential decrease. This approach does not lead to a fair state <ref> [BT94] </ref>. The work in [BVG96] describes a control mechanism to limit the experienced loss rate by adjusting the transmission rate of a source. No details about the rate adjustment scheme are presented. In a shared environment such as internet, the loss pattern depends on the aggregate traffic. <p> RAP performs source-based traffic shaping, based on the state of the network as it is shown in figure 1. Thus, one could replace the rate control mechanism in coder-based approaches such the one in <ref> [BVG96, BT94] </ref> with RAP. RAP only addresses congestion control it does not directly address reliability. We extensively evaluated performance of RAP through simulation 2 . Our simulations show that RAP is TCP-friendly as long as TCP's congestion control is dominated by the AIMD algorithm.
Reference: [BVG96] <author> J. Bolot and A. Vega-Garcia. </author> <title> Control mechanism for packet audio in the internet. </title> <booktitle> Proc. IEEE Infocom, </booktitle> <year> 1996. </year>
Reference-contexts: Turletti et. al. propose a control mechanism that performs exponential increase and exponential decrease. This approach does not lead to a fair state [BT94]. The work in <ref> [BVG96] </ref> describes a control mechanism to limit the experienced loss rate by adjusting the transmission rate of a source. No details about the rate adjustment scheme are presented. In a shared environment such as internet, the loss pattern depends on the aggregate traffic. <p> RAP performs source-based traffic shaping, based on the state of the network as it is shown in figure 1. Thus, one could replace the rate control mechanism in coder-based approaches such the one in <ref> [BVG96, BT94] </ref> with RAP. RAP only addresses congestion control it does not directly address reliability. We extensively evaluated performance of RAP through simulation 2 . Our simulations show that RAP is TCP-friendly as long as TCP's congestion control is dominated by the AIMD algorithm.
Reference: [CJ89] <author> D. Chiu and R. Jain. </author> <title> Analysis of the increase and decrease algorithm for congestion avoidance in computer networks. </title> <journal> Journal of Computer Networks and ISDN, </journal> <volume> 17(1):114, </volume> <month> June </month> <year> 1989. </year>
Reference-contexts: By well-behaved we mean that a RAP source reacts to a congestion event by backing off its transmission rate exponentially on an appropriate time-scale (i.e. a couple of RTT). It has been shown that the Additive Increase and Multiplicative Decrease (AIMD) algorithm efficiently converges to a fair state <ref> [CJ89] </ref>. RAP adopts an AIMD algorithm for rate adaptation. A rate-based congestion control mechanism is considered TCP-friendly if its average transmission rate is not higher (and hopefully not much lower) than that achieved by a TCP connection along the same path [MF97].
Reference: [CSZ92] <author> D. D. Clark, S. Shenker, and L. Zhang. </author> <title> Sup-portng realtime applications in an integrated service packet network: Architecture and mechanism. </title> <booktitle> ACM SIGCOMM, </booktitle> <pages> pages 1426, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: Best-effort networks such as today's Internet do not attempt to guarantee an upper bound on the end-to-end delay. Thus, the quality of delivered service to realtime applications over a best-effort network is neither controllable nor predictable. This problem has inspired several studies <ref> [CSZ92, Kur93, FP95] </ref> of the design of new service models to accommodate realtime applications. These premium services (e.g. controlled-load and guaranteed) are currently being developed in the IETF and are expected to be added to portions of the Internet.
Reference: [CY90] <author> D. E. Comer and R. S. Yavatkar. </author> <title> A rate-based congestion avoidance and control scheme for packet switched networks. </title> <booktitle> Proc. of the ICDCS, IEEE, </booktitle> <year> 1990. </year>
Reference-contexts: The hop-by-hop congestion control scheme proposed by Mishra et. al. [MK92] require its machinery to be deployed in the intermediate routers. Comer et. al propose another rate-based scheme that requires cooperation of the switches in the network to monitor the traffic <ref> [CY90] </ref>. The packet-pair scheme proposed by Keshav [Kes91] assumes weighted fair queueing [DKS89] is not currently supported in the Internet. Designing congestion control schemes for the Internet presents other challenges as well. More than 90% of the today's Internet traffic consists of TCP-type (Tahoe, Reno, etc) flows.
Reference: [Dab92] <author> W. Dabbous. </author> <title> Analysis of delayed-based congestion avoidance algorithm. </title> <booktitle> proc. 4th IFIP Conf. on High Performance Newtworking, </booktitle> <month> De-cember </month> <year> 1992. </year>
Reference-contexts: Moreover, coexisting with the TCP traffic implies that the congestion control should perform loss-based rate control. Many of the congestion avoidance schemes such as delay-based mechanisms <ref> [Jai89, Dab92] </ref> that react to early congestion signals (e.g. variation of RTT) lose to TCP in large networks and get a small share of bandwidth. Despite all the challenges, there have been several efforts to explore control mechanisms for delivery of real-time streams over the Internet.
Reference: [DKS89] <author> A. Demers, S. Keshav, and S. Shenker. </author> <title> Analysis and simulation of a fair queueing algorithm. </title> <booktitle> Proc. SIGCOMM Symposium on Communications Architectures and Protocols, </booktitle> <pages> pages 112, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Comer et. al propose another rate-based scheme that requires cooperation of the switches in the network to monitor the traffic [CY90]. The packet-pair scheme proposed by Keshav [Kes91] assumes weighted fair queueing <ref> [DKS89] </ref> is not currently supported in the Internet. Designing congestion control schemes for the Internet presents other challenges as well. More than 90% of the today's Internet traffic consists of TCP-type (Tahoe, Reno, etc) flows.
Reference: [FF96] <author> K. Fall and S. Floyd. </author> <title> Simulation-based comparison of tahoe, reno and sack tcp. </title> <journal> Computer Communication Review, </journal> <volume> 26(3):521, </volume> <month> July </month> <year> 1996. </year>
Reference-contexts: One of the main problem for TCP's congestion control is to recover from multiple losses within a window <ref> [FF96] </ref>. Multiple losses occurs mainly due to buffer overflow in drop-tail queues. Ideally, RED should be configured such that each flow only experiences at most one single loss per RTT. <p> Currently, we are in the process of implementing a RAP prototype for actual experiments over the Internet. We have simulated RAP using the ns2 simulator [MF95], and compared it to TCP Tahoe, Reno, NewReno <ref> [FF96] </ref> and Sack [MMFR96]. between SW 1 and SW 2 is always the bottleneck and SW 1 is the bottleneck point. All the other links have higher bandwidth and shorter delay than the bottleneck. <p> The observed unfairness against TCP traffic can be due to one of the following reasons: 1. TCP's inherent performance limitations, 2. An artifact of configuration parameters and 3. Unfairness imposed by coexisting RAP flows. TCP suffers from some performance limitations <ref> [FF96, Mor97] </ref>. In particular, if TCP experiences multiple losses within a window, it is constrained to either wait for retransmission timeout or go through slow-start. As a result, TCP may temporarily lose its ack-clocking and its congestion control mechanism diverges from the AIMD algorithm. <p> The severity of the problem varies among different flavors of TCP and mainly depends on window size and loss pattern. TCP Sack is able to recover from the multiple loss scenarios easier than other flavors of TCP whereas Reno's performance is substantially degraded <ref> [FF96] </ref>. Generally, TCP's ability to efficiently recover from multiple loss increases with its window size. The more TCP diverges from the AIMD algorithm, the less bandwidth it obtains and the lower performance it exhibits in large scale. <p> We have repeated the same experiment with RAP against Reno, NewReno 12 and Sack TCP. Results are shown in Figure 7, 8, 9 respectively. These re 12 NewReno is a modified version of Reno TCP that avoids some of the Reno's performance problems. For more details, refer to <ref> [FF96] </ref> 10 sults confirm that the large-scale behavior of TCP traffic is in agreement with the behavior we mentioned earlier. These experiments also reveal that TCP's inherent performance problems partially contribute to unfairness to the TCP traffic.
Reference: [FF97] <author> S. Floyd and K. </author> <month> Fall. </month> <title> Router mechanism to support end-to-end congestion control. </title> <type> Technical report, </type> <month> February </month> <year> 1997. </year>
Reference-contexts: Finally, the premium services might not be available in some areas, or will take time to be deployed. 1 Recently, there has been a rapid growth in deployment of the realtime applications <ref> [FF97] </ref> such as web-based audio or video and internet telephony. Currently, the majority of these applications are open-loop, i.e. without an end-to-end congestion control mechanism. Wide deployment of non-congestion-controlled applications have severe negative impact ranging from extreme unfairness to competing TCP traffic, to the threat of congestion collapse. <p> More than 90% of the today's Internet traffic consists of TCP-type (Tahoe, Reno, etc) flows. A congestion control mechanism designed for the Internet must be able not only to cope with the TCP background traffic but also behave in a TCP-friendly <ref> [FF97] </ref> fashion. Moreover, coexisting with the TCP traffic implies that the congestion control should perform loss-based rate control.
Reference: [FJ92] <author> S. Floyd and V. Jacobson. </author> <title> On traffic phase effect in packet-switched gateways. In-ternetworking: Research and Experiences, </title> <address> 3(3):115156, </address> <month> September </month> <year> 1992. </year> <month> 17 </month>
Reference-contexts: We initially observed severe phase effect phenomena among in our simulations. Phase effects becomes more pronounced as the number of flows and the amount of resources (i.e. buffer size and bandwidth) increase. This occurs mainly because of Drop Tail gateways in our small deterministic network as was reported in <ref> [FJ92] </ref>. Moreover, in our simulations all flows have the same packet size and observe similar RTT, which increases the probability of phase effects. To eliminate this problem without changing our parameters, we have added a small uniform random delay before transmission of each TCP packet 10 . <p> This delay ranges from zero to the bottleneck service time and emulates the random 9 Here we implicitly assumed that number of duplicate packets a TCP flow receives is negligible 10 This is possible by using overhead configuration parameter of TCP agent in ns. packet-processing time of intermediate gateways <ref> [FJ92] </ref>. Obviously, adding this random delay slightly decreases the transmission rate of TCP because it always delayed the transmission. We have added similar randomness to RAP, not only to resolve the phase effect problem between RAP flows, but also compensate for the added delay to TCP flows.
Reference: [FJ93] <author> S. Floyd and V. Jacobson. </author> <title> Random early detection gateways for congestion avoidance. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 1(4):397413, </volume> <month> August </month> <year> 1993. </year>
Reference-contexts: To further improve RAP, we have also devised a fine grain rate adaptation mechanism that enables it to exhibit TCP-friendly behavior over an even wider range. We assess the impact of TCP's burstiness on inter-protocol fairness in the context of small simulations. Our results show that deploying RED <ref> [FJ93] </ref> queue management results in an ideal fairness between TCP and RAP traffic. Finally, we investigated self-limiting issues in RAP and did not observe any evidence that implies inherent instability in RAP. The rest of this paper is organized as follows. Section 2 describes some implications of coexisting with TCP. <p> Otherwise since the values of new RTT samples is growing, the fine-grain feedback increases 8 the value of I P G 0 effectively and controls the transmission rate. 3.4 Random Early Discard Gateways There seems to be general agreement in the community on deploying Random Early Discard (RED) <ref> [FJ93] </ref> gateways to improve both fairness and performance of TCP traffic. Among other benefits, RED queue management attempts to achieve two goals; it tries to keep the average queue size low, and also by preventing the buffer from filling, it accommodates burst of packets.
Reference: [Flo91] <author> S. Floyd. </author> <title> Connections with multiple congested gateways in packet-switched networks. </title> <journal> Computer Communication Review, </journal> <volume> 21(5):30 47, </volume> <month> October </month> <year> 1991. </year>
Reference-contexts: The step length in RAP is analogous to the time it takes for TCP to send a full window worth of packets (i.e. one RTT). RAP suffers from the same unfairness against TCP flows with longer RTT that has frequently been reported <ref> [Flo91] </ref>. RAP connections with shorter RTT are more aggressive and achieve a larger share of the bottleneck bandwidth. However, there are two issues to notice: 1. in general, other measures of fairness can only be achieved by implementing the required machinery in the network [She90]. 2.
Reference: [FP95] <author> N. R. Figueira and J. Pasquale. Leave-in-time: </author> <title> A new service decipline for real-time communications in a packet-switching network. </title> <booktitle> ACM SIGCOMM, </booktitle> <pages> pages 207218, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: Best-effort networks such as today's Internet do not attempt to guarantee an upper bound on the end-to-end delay. Thus, the quality of delivered service to realtime applications over a best-effort network is neither controllable nor predictable. This problem has inspired several studies <ref> [CSZ92, Kur93, FP95] </ref> of the design of new service models to accommodate realtime applications. These premium services (e.g. controlled-load and guaranteed) are currently being developed in the IETF and are expected to be added to portions of the Internet.
Reference: [Hoe96] <author> Janey C. Hoe. </author> <title> Improving the start-up behavior of a congestion control for TCP. </title> <booktitle> ACM SIG-COMM, </booktitle> <year> 1996. </year>
Reference-contexts: DABT63-95-C0095 and DABT63-96-C-0054 as part of SPT and VINT projects The success of TCP is due to its stable end-to-end congestion control mechanism based on conservative back-off. Although congestion control in TCP has been extensively studied and continuously refined during the past decade <ref> [BP95, MM96, Hoe96] </ref>, it is still an active area of research. TCP has been widely deployed due to its suitability for traditional data applications (e.g. FTP, e-mail, etc). During recent years, the Internet has witnessed the emergence of realtime applications. This class of applications are delay-sensitive, semi-reliable and rate-based.
Reference: [Jac88] <author> V. Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> In ACM SIGCOMM, </booktitle> <pages> pages 314329. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1988. </year>
Reference-contexts: 1 Introduction The end-to-end congestion control mechanisms in TCP have saved the Internet from congestion collapse <ref> [Jac88] </ref>. fl This work was supported by DARPA under contract No. DABT63-95-C0095 and DABT63-96-C-0054 as part of SPT and VINT projects The success of TCP is due to its stable end-to-end congestion control mechanism based on conservative back-off. <p> End-to-end congestion control schemes are divided into two main categories: window-based and rate-based schemes. Despite the simplicity and popularity of window-based congestion control schemes, these schemes are not appropriate for realtime applications for several reasons. The first reason has to do with conservation of packets or self-clocking <ref> [Jac88] </ref> used by most window-based congestion control schemes such as TCP. As a result of the self-clocking, a source can not inject another packet beyond the current window until arrival of an acknowledgment (ACK). <p> the paper and addresses some of our future work. 2 Coexisting with TCP Coexisting with TCP traffic in the Internet environment has the following implications: Loss-based rate control: Different implicit congestion signals have been proposed: variation of RTT in delay-based congestion avoidance [Jai89], Vegas-like congestion avoidance [BP95], and packet loss <ref> [Jac88] </ref>. Delay-based congestion avoidance schemes usually obtain a smaller bandwidth share when they compete with loss-based schemes like TCP. TCP probes the network for available bandwidth by linearly increasing its transmission rates until it detects a packet loss. <p> Decision Function A high level description of the rate-adaptation scheme could be summarized by its decision function as follow: * If no congestion is detected, periodically increase the transmission rate; * If congestion is detected, decrease the transmission rate. Similar to the congestion avoidance algorithm in TCP <ref> [Jac88] </ref>, the RAP source searches for available bandwidth on the bottleneck link by periodically increasing its transmission rate. RAP considers losses to be congestion signals, and uses two mechanisms to detect loss: timeouts, and gaps in the sequence space (i.e. ACK-based). These two mechanisms work in parallel. <p> The transmission rate is controlled by adjusting the inter-packet-gap, I P G. S i = P acketSize IP G i To increase the rate additively, IPG must be iteratively up dated based on equation (1) <ref> [Jac88] </ref>: IP G i+1 = IP G i flC ff = S i+1 S i = P acketSize C (2) Note that in the equation (1), C has the dimension of time and it determines the value of ff. <p> Adjusting the I P G once every SRTT has a nice property; packets sent during one step are likely to be 5 We use a value of fi = 0:5 which is a conservative choice as it is chosen by TCP (see appendix C in <ref> [Jac88] </ref>). 5 acknowledged during the next step. This allows the RAP source to observe the reaction of the network to the previous adjustment before making a new adjustment.
Reference: [Jac97] <author> V. Jacobson. </author> <title> Email on the end-to-end email list. </title> <month> February </month> <year> 1997. </year>
Reference-contexts: However, if the source allows retransmission beyond the current window, the stability is lost, and so the number of retransmitted packets must also be limited. Rate-based schemes need to find some variant analogous to the window to bound the volume of outstanding data in the net work <ref> [Jac97] </ref>. One way to achieve this goal is use of correctly implemented timers. In the absence of any feedback, 7 the expired timer forces a source to drop its rate. RAP achieves self-limiting by using the timeout mechanism for loss detection.
Reference: [Jai89] <author> R. Jain. </author> <title> A delay-based approach for congestion avoidance in interconnected heterogeneous computer networks. </title> <journal> ACM Computer Communication Review, </journal> <volume> 19(5):5671, </volume> <month> Octo-ber </month> <year> 1989. </year>
Reference-contexts: Moreover, coexisting with the TCP traffic implies that the congestion control should perform loss-based rate control. Many of the congestion avoidance schemes such as delay-based mechanisms <ref> [Jai89, Dab92] </ref> that react to early congestion signals (e.g. variation of RTT) lose to TCP in large networks and get a small share of bandwidth. Despite all the challenges, there have been several efforts to explore control mechanisms for delivery of real-time streams over the Internet. <p> Finally, section 5 concludes the paper and addresses some of our future work. 2 Coexisting with TCP Coexisting with TCP traffic in the Internet environment has the following implications: Loss-based rate control: Different implicit congestion signals have been proposed: variation of RTT in delay-based congestion avoidance <ref> [Jai89] </ref>, Vegas-like congestion avoidance [BP95], and packet loss [Jac88]. Delay-based congestion avoidance schemes usually obtain a smaller bandwidth share when they compete with loss-based schemes like TCP. TCP probes the network for available bandwidth by linearly increasing its transmission rates until it detects a packet loss. <p> Each acknowledgment (ACK) packet contains the sequence number of the corresponding delivered data packet. Using the feedback, the RAP source can detect losses and sample the round-trip-time (RTT). To design a rate-adaptation mechanism, three issues must be addressed <ref> [Jai89] </ref>. These are the decision function , the increase/decrease algorithm and the decision frequency.
Reference: [Kes91] <author> S. Keshav. </author> <title> A control-theoretic approach to congestion control. </title> <booktitle> ACM SIGCOMM, </booktitle> <pages> pages 316, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: The hop-by-hop congestion control scheme proposed by Mishra et. al. [MK92] require its machinery to be deployed in the intermediate routers. Comer et. al propose another rate-based scheme that requires cooperation of the switches in the network to monitor the traffic [CY90]. The packet-pair scheme proposed by Keshav <ref> [Kes91] </ref> assumes weighted fair queueing [DKS89] is not currently supported in the Internet. Designing congestion control schemes for the Internet presents other challenges as well. More than 90% of the today's Internet traffic consists of TCP-type (Tahoe, Reno, etc) flows.
Reference: [Kes97] <author> S. Keshav, </author> <title> editor. An Engineering Approach to Computer Networks. </title> <publisher> Addison Wesley, </publisher> <year> 1997. </year>
Reference-contexts: In the context of traditional applications, error control schemes usually provide reliability by retransmission of a lost packet which increases end-to-end latency. This coupling has been shown problematic and limits the maximum transmission rate <ref> [Kes97] </ref>. Realtime applications are semi-reliable, i.e. able to tolerate some level of loss as long as variation of delay is limited. In the context of realtime applications, the goal of error control mechanisms is to achieve quality instead of reliability.
Reference: [Kur93] <author> J. Kurose. </author> <title> Open issues and challenges in providing QoS guarantees in high speed networks. </title> <journal> Computer Communication Review, </journal> <volume> 23(1):615, </volume> <month> January </month> <year> 1993. </year>
Reference-contexts: Best-effort networks such as today's Internet do not attempt to guarantee an upper bound on the end-to-end delay. Thus, the quality of delivered service to realtime applications over a best-effort network is neither controllable nor predictable. This problem has inspired several studies <ref> [CSZ92, Kur93, FP95] </ref> of the design of new service models to accommodate realtime applications. These premium services (e.g. controlled-load and guaranteed) are currently being developed in the IETF and are expected to be added to portions of the Internet.
Reference: [MF95] <author> S. McCanne and S. Floyd. </author> <title> Ns (network simulator). </title> <note> 1995. http://www-mash.cs.berkeley.edu/ns. </note>
Reference-contexts: However in a real network, we would have a larger number of short and long-lived TCP flows with some bursty traffic. Currently, we are in the process of implementing a RAP prototype for actual experiments over the Internet. We have simulated RAP using the ns2 simulator <ref> [MF95] </ref>, and compared it to TCP Tahoe, Reno, NewReno [FF96] and Sack [MMFR96]. between SW 1 and SW 2 is always the bottleneck and SW 1 is the bottleneck point. All the other links have higher bandwidth and shorter delay than the bottleneck.
Reference: [MF97] <author> J. Mahdavi and S. Floyd. </author> <note> TCP-friendly unicast rate-based flow control. Technical note sent to the end2end-interest mailing list, January 1997. http://www.psc.edu/networking/papers/tcp-friendly.html. </note>
Reference-contexts: RAP adopts an AIMD algorithm for rate adaptation. A rate-based congestion control mechanism is considered TCP-friendly if its average transmission rate is not higher (and hopefully not much lower) than that achieved by a TCP connection along the same path <ref> [MF97] </ref>. The TCP-friendly scheme should continuously monitor the connection and drop its rate when congestion is seen. RAP performs loss-based rate control and does not rely on any explicit congestion signal from the network. <p> The feedback delay is the time between changing the rate and detecting the network's reaction to that change. Feedback delay in ack-based schemes (e.g. RAP) is equal to one RTT. It is suggested that rate-based schemes adjust their rates not more than once per RTT <ref> [MF97] </ref>. Changing the rate too often results in oscillation whereas infrequent change of rate leads to an unresponsive behavior. RAP adjusts the I P G once every round-trip time. The time between two subsequent adjusting points is called a step. <p> End systems are expected to react to congestion on suitable time scales by dropping their rate exponentially. It takes one RTT for end systems to detect and react to congestion. Thus an end-system only needs to react at most once per RTT as long as it reacts sufficiently <ref> [MF97] </ref>. Thus, end systems require a mechanism by which they can identify a cluster of losses that are potentially related to the same congestion. A simple approach is to ignore all losses that are detected during the first RTT after a back-off. RAP employs a slightly different approach.
Reference: [MK92] <author> P. Mishra and H. Kanakia. </author> <title> A hop by hop rate-based congestion control scheme. </title> <booktitle> ACM SIG-COMM, </booktitle> <year> 1992. </year>
Reference-contexts: Unfortunately, many of the well known rate-based congestion control mechanisms can not be deployed over an unmodified Internet. The hop-by-hop congestion control scheme proposed by Mishra et. al. <ref> [MK92] </ref> require its machinery to be deployed in the intermediate routers. Comer et. al propose another rate-based scheme that requires cooperation of the switches in the network to monitor the traffic [CY90]. <p> Although it is hard to disprove, it has not been theoretically or experimentally proved <ref> [MK92] </ref>. Self-limiting behavior is the classic problem with rate-based schemes. In window-based schemes the source stops once it has a full window worth of data on the fly. This property makes the window-based schemes intrinsically stable.
Reference: [MM96] <author> M. Mathis and J. Mahdavi. </author> <title> Forward acknowledgment: Refining TCP congestion control. </title> <booktitle> ACM SIGCOMM, </booktitle> <year> 1996. </year>
Reference-contexts: DABT63-95-C0095 and DABT63-96-C-0054 as part of SPT and VINT projects The success of TCP is due to its stable end-to-end congestion control mechanism based on conservative back-off. Although congestion control in TCP has been extensively studied and continuously refined during the past decade <ref> [BP95, MM96, Hoe96] </ref>, it is still an active area of research. TCP has been widely deployed due to its suitability for traditional data applications (e.g. FTP, e-mail, etc). During recent years, the Internet has witnessed the emergence of realtime applications. This class of applications are delay-sensitive, semi-reliable and rate-based.
Reference: [MMFR96] <author> M . Mathis, S. Mahdavi, S. Floyd, and A. Ro-manow. </author> <title> TCP selective acknowledgement options. </title> <booktitle> RFC 2018, </booktitle> <month> April </month> <year> 1996. </year>
Reference-contexts: Currently, we are in the process of implementing a RAP prototype for actual experiments over the Internet. We have simulated RAP using the ns2 simulator [MF95], and compared it to TCP Tahoe, Reno, NewReno [FF96] and Sack <ref> [MMFR96] </ref>. between SW 1 and SW 2 is always the bottleneck and SW 1 is the bottleneck point. All the other links have higher bandwidth and shorter delay than the bottleneck.
Reference: [Mor97] <author> R. Morris. </author> <title> TCP behavior with many flows. </title> <booktitle> IEEE Int'l Conf. on Network Protocols, </booktitle> <month> Octo-ber </month> <year> 1997. </year>
Reference-contexts: The observed unfairness against TCP traffic can be due to one of the following reasons: 1. TCP's inherent performance limitations, 2. An artifact of configuration parameters and 3. Unfairness imposed by coexisting RAP flows. TCP suffers from some performance limitations <ref> [FF96, Mor97] </ref>. In particular, if TCP experiences multiple losses within a window, it is constrained to either wait for retransmission timeout or go through slow-start. As a result, TCP may temporarily lose its ack-clocking and its congestion control mechanism diverges from the AIMD algorithm.
Reference: [She90] <author> S. Shenker. </author> <title> A theoretical analysis of feedback flow control. </title> <booktitle> In ACM SIGCOMM, </booktitle> <pages> pages 156 165, </pages> <month> September </month> <year> 1990. </year> <month> 18 </month>
Reference-contexts: RAP connections with shorter RTT are more aggressive and achieve a larger share of the bottleneck bandwidth. However, there are two issues to notice: 1. in general, other measures of fairness can only be achieved by implementing the required machinery in the network <ref> [She90] </ref>. 2.
References-found: 29

