URL: ftp://ftp.cse.unsw.edu.au/pub/doc/papers/UNSW/9409.ps.Z
Refering-URL: http://www.cse.unsw.edu.au/school/research/tr.html
Root-URL: http://www.cse.unsw.edu.au
Title: Tracing Kernel Activity in SunOS 4.0  
Author: David Goodall and Stephen Russell Communicated by Gernot Heiser 
Affiliation: SCHOOL OF COMPUTER SCIENCE AND ENGINEERING THE UNIVERSITY OF NEW SOUTH WALES  
Abstract: SCS&E Report 9409 April, 1994 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Russell, A. Skea, K. Elphinstone, G. Heiser, K. Burston, I. Gorton, and G. Hellestrand. </author> <title> Distribution + Persistence = Global Virtual Memory. </title> <booktitle> In IEEE International Workshop on Object Orientation in Operating Systems, </booktitle> <volume> Vol. 2, </volume> <pages> pages 96-99, </pages> <address> Dourdan, France, </address> <year> 1992. </year>
Reference: [2] <author> G. Heiser, K. Elphinstone, S. Russell, and G.R. Hellestrand. </author> <title> A Distributed Single Address Space System Supporting Persistence. </title> <institution> School of Computer Science and Engineering Report 9302, University of NSW, Kensington, NSW, Australia, </institution> <year> 2033, </year> <month> March </month> <year> 1993. </year>
Reference: [3] <author> J. Vochteloo, S. Russell, and G. Heiser. </author> <title> Capability-Based Protection in the Mungi Operating System. </title> <booktitle> In IEEE International Workshop on Object Orientation in Operating Systems, </booktitle> <address> Asheville NC, </address> <year> 1993. </year>
Reference: [4] <author> M. Simmons, R. Koskela, I. Bucher. </author> <title> Editors. Instrumentation for Future Parallel Computing Systems. </title> <publisher> Addison Wesley 1989. </publisher>
Reference: [5] <author> M. Simmons, R. Koskela. </author> <title> Editors. Performance Instrumentation and Visualization. </title> <publisher> Addison Wesley 1990. </publisher> <pages> 8 </pages>
Reference: [6] <author> T.E. Anderson, H.M. Levy, B.N. Bershad, and E.D. Ladzowska. </author> <title> The interaction of architecture and operating system design. </title> <booktitle> In Symposium on Architectural Support for Programming Languages and Operating Systems, </booktitle> <volume> Vol. 4, </volume> <pages> pages 108-21, </pages> <year> 1991. </year>
Reference-contexts: With respect to the design of future operating systems, and the enhancement of 1 existing ones, there is still work to be done in taking measurements from current systems such as UNIX. For example, how do these systems interact with applications, and with the underlying hardware? <ref> [6] </ref>. In addition, accurate traces are desirable for feeding simulators of new designs such as Mungi. The design of the tool as a pseudo-controller with a number of devices is a gen-eralisation of a tool described in [7]. That paper described a single pseudo-device for measuring file system activity.
Reference: [7] <author> I. Hu. </author> <title> Measuring File Access Patterns in UNIX. In Performance Evaluation Review, </title> <journal> Vol. </journal> <volume> 14, No. 2, </volume> <pages> pages 15-20, </pages> <year> 1986. </year>
Reference-contexts: In addition, accurate traces are desirable for feeding simulators of new designs such as Mungi. The design of the tool as a pseudo-controller with a number of devices is a gen-eralisation of a tool described in <ref> [7] </ref>. That paper described a single pseudo-device for measuring file system activity. The measurement system described here also includes a high resolution timer attached to the Sun 3/50 SCSI port.
Reference: [8] <author> P.B. Danzig and S. Melvin. </author> <title> High Resolution Timing with Low Resolution Clocks and A Microsecond Resolution Timer for Sun Workstations. </title> <booktitle> In Operating Systems Review, </booktitle> <volume> Vol. 24, No. 1, </volume> <pages> pages 23-26, </pages> <month> Jan. 90. </month>
Reference-contexts: That paper described a single pseudo-device for measuring file system activity. The measurement system described here also includes a high resolution timer attached to the Sun 3/50 SCSI port. A timer making use of the data encryption chip socket on Sun 3 and Sun 4 computers is described in <ref> [8] </ref>. Profiling of a network protocol stack with timestamps provided by an interval timer is reported in [9]. 3 Design And Implementation is logdev.
Reference: [9] <author> D. Banks and M. Prudence. </author> <title> A High-Performance Network Architecture for a PA-RISC Workstation. </title> <journal> In IEEE Journal on Selected Areas in Communications, </journal> <volume> Vol. 11, No. 2, </volume> <month> February </month> <year> 1993. </year>
Reference-contexts: A timer making use of the data encryption chip socket on Sun 3 and Sun 4 computers is described in [8]. Profiling of a network protocol stack with timestamps provided by an interval timer is reported in <ref> [9] </ref>. 3 Design And Implementation is logdev. It resides in kernel space on the target Sun 3/50, and manages a variable number of pseudo-devices which do the actual work of capturing events generated by trace points within the kernel.
Reference: [10] <author> O. Endriss, M. Steinbrunn, and M. Zitterbart. </author> <title> Netmon-II a monitoring tool for distributed and multiprocessor systems. In Performance Evaluation, </title> <booktitle> (North Holland pub.), </booktitle> <volume> Vol. 12, No. 3, </volume> <pages> pages 191-202, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: This can lead to escalating overhead in order to differentiate between the causes of events. 4 The preferred solution is to write each event out of the target system in synchronous fashion via a convenient parallel port, as in <ref> [10] </ref>. This method has the desired effect of lowering measurement overhead. The events can be timestamped and collected by a separate dedicated system. This forms the basis of a possible future distributed instrumentation system.
Reference: [11] <author> J.E. Lumpp, Jr., T.L. Casavant, H.J. Siegel, </author> <title> and D.C. Marinescu. Specification and Identification of Events for Debugging and Performance Monitoring of Distributed Multiprocessor Systems. </title> <booktitle> In IEEE 10th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 476-483, </pages> <year> 1990. </year>
Reference: [12] <author> M. Spezialetti and J.P. Kearns. </author> <title> A General Approach to Recognising Event Occurrences in Distributed Computations. </title> <booktitle> In 8th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 300-307, </pages> <year> 1988. </year>
Reference-contexts: This form of elapsed time measurement is not applicable to a distributed instrumentation system, since events in such a system may be compounded of events occurring on separate nodes, in a global time sense <ref> [12] </ref>. In addition, the measure of CPU usage is only a guide to possible interference since we cannot know what the system may have done had it not been engaged in the measurement system code at some particular point in time, i.e. we cannot quantify the cost of `lost opportunity'.
Reference: [13] <author> D.D. Clark, V. Jacobson, J. Romkey, and H.Salwen. </author> <title> An Analysis of TCP Processing Overhead. </title> <journal> In IEEE Communications Magazine, Vol.27, </journal> <volume> No. 6, </volume> <pages> pages 23-29, </pages> <month> June </month> <year> 1989. </year>
Reference: [14] <author> S.J. Leffler, M.K. McKusick, M.J. Karels and J.S. Quarterman. </author> <title> The Design and Implementation of the 4.3BSD UNIX Operating System. </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Note that the number of interrupts is not the same at each level. For example a 4096 byte TCP packet is received as four Ethernet packets. Thus, for large TCP packets, the number of interrupts declines as the user level is approached <ref> [14] </ref>. The creation of the trace of events for the 8192 byte packet size required usage of 0.59 percent of CPU time on the target system by the measurement system. Again, note that the event buffers were not cleared over the network in order to avoid interference.
Reference: [15] <author> D. Spyridopoulos. </author> <title> Tracing the Sun Operating System to help resolve file system and GVM issues. </title> <type> Honours thesis, </type> <institution> School of Computer Science and Engineering, University of NSW, Kensington, NSW, Australia, </institution> <year> 2033, 1993. </year>
Reference-contexts: Again, note that the event buffers were not cleared over the network in order to avoid interference. Other measurement experiments have been conducted with the instrumentation system, <ref> [15] </ref>, similar to the file system study reported by Ousterhout et al. in [16]. The figures obtained compare reasonably well with the figures reported in [16], although our workload was somewhat artificial.
Reference: [16] <author> J.K Ousterhout, H. Da Costa, D. Harrison, J.A. Kunze, M. Kupfer and J.G. Thompson. </author> <title> A Trace-Driven Analysis of the UNIX 4.2 BSD File System. </title> <booktitle> In 10th Symposium on Operating Systems Principles, </booktitle> <pages> pages 15-24, </pages> <year> 1985. </year>
Reference-contexts: Instrumentation of the network protocols has been valuable in demonstrating the limitations of the system. Instrumentation of the file system has allowed capture of traces which produce results comparable with those of earlier studies <ref> [16] </ref>. The following table shows throughput measurements of the Transport Control Protocol (TCP) for varying packet sizes under almost ideal load conditions. I.e. the number of active processes executing on the systems under test was limited to as few as possible. <p> Again, note that the event buffers were not cleared over the network in order to avoid interference. Other measurement experiments have been conducted with the instrumentation system, [15], similar to the file system study reported by Ousterhout et al. in <ref> [16] </ref>. The figures obtained compare reasonably well with the figures reported in [16], although our workload was somewhat artificial. <p> Other measurement experiments have been conducted with the instrumentation system, [15], similar to the file system study reported by Ousterhout et al. in <ref> [16] </ref>. The figures obtained compare reasonably well with the figures reported in [16], although our workload was somewhat artificial.
Reference: [17] <author> D.S. Goodall. </author> <title> Operating System Instrumentation. </title> <type> Masters Project Report, </type> <institution> School of Computer Science and Engineering, University of NSW, Kensington, NSW, Australia, </institution> <year> 2033, 1993. </year>
Reference-contexts: A user manual and installation details for the instrumentation system can be found in <ref> [17] </ref>. The organisation of this paper is as follows. Section 2 deals with related work, and Section 3 with the design and implementation of the instrumentation system, including its level of interference with the target system.
Reference: [18] <author> G. Heiser, K. Elphinstone, S. Russell, J. Vochteloo. Mungi: </author> <title> A Distributed Single Address-Space Operating System. </title> <booktitle> In Seventeenth Annual Computer Science Conference volume 16, number 1, </booktitle> <address> Christchurch, New Zealand, </address> <month> January </month> <year> 1994. </year> <journal> Aus-tralian Computer Science Communications. </journal> <volume> 9 </volume>
References-found: 18

