URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/project/anim/aw/15-860/public/particles.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/project/anim/aw/15-860/public/860home.html
Root-URL: http://www.cs.cmu.edu
Title: Particle System Dynamics  
Author: Andrew Witkin 
Affiliation: School of Computer Science Carnegie Mellon University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R.W Hocknew and J.W. Eastwood. </author> <title> Computer Simulation Using Particles. Adam Hilger, </title> <address> New York, </address> <year> 1988. </year>
Reference-contexts: follows: /* length of state derivative, and force vectors */ int ParticleDims (ParticleSystem p)- return (6 * p-&gt;n); -; /* gather state from the particles into dst */ int ParticleGetState (ParticleSystem p, oat *dst)- int i; *(dst++) = p-&gt;p [i]-&gt;x [0]; *(dst++) = p-&gt;p [i]-&gt;x [2]; *(dst++) = p-&gt;p [i]-&gt;v <ref> [1] </ref>; - C2 /* scatter state from src into the particles */ int ParticleSetState (ParticleSystem p, oat *src)- int i; p-&gt;p [i]-&gt;x [0] = *(src++); p-&gt;p [i]-&gt;x [2] = *(src++); p-&gt;p [i]-&gt;v [1] = *(src++); - /* calculate derivative, place in dst */ int ParticleDerivative (ParticleSystem p, oat *dst)- int i; <p> oat *dst)- int i; *(dst++) = p-&gt;p [i]-&gt;x [0]; *(dst++) = p-&gt;p [i]-&gt;x [2]; *(dst++) = p-&gt;p [i]-&gt;v <ref> [1] </ref>; - C2 /* scatter state from src into the particles */ int ParticleSetState (ParticleSystem p, oat *src)- int i; p-&gt;p [i]-&gt;x [0] = *(src++); p-&gt;p [i]-&gt;x [2] = *(src++); p-&gt;p [i]-&gt;v [1] = *(src++); - /* calculate derivative, place in dst */ int ParticleDerivative (ParticleSystem p, oat *dst)- int i; ClearForces (p); /* zero the force accumulators */ ComputeForces (p); /* magic force function */ for (i=0; i &lt; p-&gt;n; i++)- *(dst++) = p-&gt;p [i]-&gt;v [0]; /* xdot = v */ *(dst++) <p> /* calculate derivative, place in dst */ int ParticleDerivative (ParticleSystem p, oat *dst)- int i; ClearForces (p); /* zero the force accumulators */ ComputeForces (p); /* magic force function */ for (i=0; i &lt; p-&gt;n; i++)- *(dst++) = p-&gt;p [i]-&gt;v [0]; /* xdot = v */ *(dst++) = p-&gt;p [i]-&gt;v <ref> [1] </ref>; *(dst++) = p-&gt;p [i]-&gt;f [0]/m; /* vdot = f/m */ *(dst++) = p-&gt;p [i]-&gt;f [1]/m; - Having defined these operations, and assuming some utility routines and temporary vectors, an Euler solver be written as void EulerStep (ParticleSystem p, oat DeltaT)- ParticleDeriv (p,temp1); /* get deriv */ ScaleVector (temp1,DeltaT) /* scale <p> For local interaction forces, particles begin to interact when they come close, and stop when they move apart. Spatially interacting particles have been used as approximate models for uid behavior, and large-scale particle simulations are widely used in physics <ref> [1] </ref>. A complication in large-scale spatial interaction simulations is that the force calculation is O.n 2 / in the number of particles. If the interactions are local, efficiency may be improved through the use of spatial buckets.
Reference: [2] <author> Gavin S. P. Miller. </author> <title> The motion dynamics of snakes and worms. </title> <journal> Computer Graphics, </journal> <volume> 22:169178, </volume> <year> 1988. </year>
Reference-contexts: interface could be written as follows: /* length of state derivative, and force vectors */ int ParticleDims (ParticleSystem p)- return (6 * p-&gt;n); -; /* gather state from the particles into dst */ int ParticleGetState (ParticleSystem p, oat *dst)- int i; *(dst++) = p-&gt;p [i]-&gt;x [0]; *(dst++) = p-&gt;p [i]-&gt;x <ref> [2] </ref>; *(dst++) = p-&gt;p [i]-&gt;v [1]; - C2 /* scatter state from src into the particles */ int ParticleSetState (ParticleSystem p, oat *src)- int i; p-&gt;p [i]-&gt;x [0] = *(src++); p-&gt;p [i]-&gt;x [2] = *(src++); p-&gt;p [i]-&gt;v [1] = *(src++); - /* calculate derivative, place in dst */ int ParticleDerivative (ParticleSystem <p> */ int ParticleGetState (ParticleSystem p, oat *dst)- int i; *(dst++) = p-&gt;p [i]-&gt;x [0]; *(dst++) = p-&gt;p [i]-&gt;x <ref> [2] </ref>; *(dst++) = p-&gt;p [i]-&gt;v [1]; - C2 /* scatter state from src into the particles */ int ParticleSetState (ParticleSystem p, oat *src)- int i; p-&gt;p [i]-&gt;x [0] = *(src++); p-&gt;p [i]-&gt;x [2] = *(src++); p-&gt;p [i]-&gt;v [1] = *(src++); - /* calculate derivative, place in dst */ int ParticleDerivative (ParticleSystem p, oat *dst)- int i; ClearForces (p); /* zero the force accumulators */ ComputeForces (p); /* magic force function */ for (i=0; i &lt; p-&gt;n; i++)- *(dst++) = p-&gt;p [i]-&gt;v [0]; /*
Reference: [3] <author> Andrew Witkin, Kurt Fleischer, and Alan Barr. </author> <title> Energy constraints on parameterized models. </title> <journal> Computer Graphics, </journal> <volume> 21(4):225232, </volume> <month> July </month> <year> 1987. </year> <month> C12 </month>
References-found: 3

