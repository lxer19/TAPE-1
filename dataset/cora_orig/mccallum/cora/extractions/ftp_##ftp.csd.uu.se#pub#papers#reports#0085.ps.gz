URL: ftp://ftp.csd.uu.se/pub/papers/reports/0085.ps.gz
Refering-URL: http://www.csd.uu.se/papers/reports.html
Root-URL: 
Email: e-mail: bjornc@csd.uu.se  e-mail: fseif,sverkerg@sics.se  
Title: A concurrent language for FD programming  
Author: Bjorn Carlson Seif Haridi Sverker Janson 
Address: Box 311 751 05 Uppsala  Box 1263, S-164 28 KISTA, Sweden  
Affiliation: Computing Science Department, Uppsala University  Swedish Institute of Computer Science  
Note: AKL(FD)  This work was sponsored by ESPRIT Project 7195 (ACCLAIM), and has been performed in close cooperation with the Programming Systems group at SICS. Also published in Logic Programming: Proceedings of the 1994 In- ternational Symposium, MIT Press, 1994.  
Abstract: UPMAIL Technical Report No. 85 1 August, 1994 ISSN 1100-0686 Abstract We consider a complete implementation of an extension of the finite domain constraint system FD, including antimonotone constraints, and its integration in AKL, a deep-guard concurrent constraint language. We present the language AKL(FD), together with associated programming techniques. In particular, we show how powerful symbolic constraints can be defined as AKL(FD) programs, which is partly made possible by the extension of FD with a condition combinator and a proper treatment of antimonotone constraints. The AGENTS implementation of AKL(FD) shows competetive performance in a complete programming environment. 
Abstract-found: 1
Intro-found: 1
Reference: [Car94] <author> Bjorn Carlson. </author> <title> The implementation of AKL(FD). </title> <type> Forthcoming research report, </type> <institution> SICS, </institution> <year> 1994. </year>
Reference-contexts: Local updates of variables belonging to external stores are trailed, enabling execution to move in and out of the local store, undoing and redoing updates. This is, of course, not a complete description; for such we refer to <ref> [Car94] </ref>. 5 Programming in AKL (FD) The expressiveness of AKL (FD) is illustrated by examples, ranging from the trivial to those using the full potential of AKL (FD). For each example we define both a consistency checking and an entailment checking version 6 of the constraint.
Reference: [CC94] <author> Bjorn Carlson and Mats Carlsson. </author> <title> Compiling finite domain con-straints. </title> <type> Forthcoming research report, </type> <institution> SICS, </institution> <year> 1994. </year>
Reference-contexts: The finite domain constraint system FD is a framework for solving discrete constraint satisfaction problems in a CCP setting [VHSD91]. FD is suitable as a target for constraint compilers and can be used both for consistency checking and for entailment checking <ref> [CC94, CCD94] </ref>. <p> By appropriate coding, an indexical can thus be made to suspend in a controlled fashion. 4 AKL (FD) In AKL (FD), a programmer may use indexicals directly, and has also the option to rely on the AKL (FD) constraint compiler to produce appropriate indexicals for given linear constraints <ref> [CC94] </ref>. These may be equalities or inequalities in which each term must be linear. For a linear constraint c, a statement fd (c) is compiled to monotone indexicals, suitable for consistency checking, and a statement fd ask (c) is compiled to an antimonotone indexical, suitable for entailment checking. <p> It is free for research and education purposes. (Contact agents-request@sics.se.) Future research includes * compiling implications and disjunctions of finite domain constraints, where disjunction is constructive [VHSD92]. Constraints are compiled differently whether used for consistency or entailment checking, and FD with conditional ranges will be used as target language <ref> [CC94] </ref>. * implementing constraint lifting, a generalization of constructive disjunction to nondeterminate agents. The lifting operation is typically union of finite domains, or anti-unification of terms. Acknowledgments.
Reference: [CCD94] <author> Bjorn Carlson, Mats Carlsson, and Daniel Diaz. </author> <title> Entailment of finite domain constraints. </title> <booktitle> In Proceedings of the International Conference on Logic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: The finite domain constraint system FD is a framework for solving discrete constraint satisfaction problems in a CCP setting [VHSD91]. FD is suitable as a target for constraint compilers and can be used both for consistency checking and for entailment checking <ref> [CC94, CCD94] </ref>. <p> Programming with nonmonotone expressions is unorthodox in the world of constraint programming. However, we claim that since it is possible to implement monotonicity checking of indexicals efficiently <ref> [CCD94] </ref>, and since the implementation of Table 1 can be made efficient (Section 6), there is a large potential in programming with nonmonotone indexicals. Indexicals can be used for implementing constructive reasoning with disjunctions, exemplified by the element/3 program below.
Reference: [DC93a] <author> D. Diaz and P. Codognet. </author> <title> A boolean extension of clp(FD). </title> <booktitle> In Proceedings of the International Symposium on Logic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: In CLP (FD), and (x; y; z) is defined by a conjunction of indexicals, and only domain constraints of the kind x 2 f0g (x 2 f1g) can be propagated <ref> [DC93a] </ref>, which are weaker than constraints of the type x = y. Of course, the version of CLP (FD) specialized to boolean indexicals achieves very efficient propagation of domain constraints [DC93b], however, the point we want to make is that in AKL (FD) more general constraint propagation can be implemented.
Reference: [DC93b] <author> D. Diaz and P. Codognet. </author> <title> Compiling constraints in clp(FD). </title> <note> Research report, INRIA, </note> <year> 1993. </year>
Reference-contexts: The programmer can thus experiment with alternatives, tailoring the constraints to fit the particular application. User-defined constraints have been recognized as crucial for the versatility of a constraint programming language <ref> [DC93b, VHSD91, ECR93, ILO93] </ref>. <p> Hence, we achieve the intended propagation of 6= [VH89] through the monotonicity reasoning depicted in Table 1. Note that the same constraint in CLP (FD) is defined by the use of a special value range function <ref> [DC93b] </ref>, which, thus, we do not need. Also note that labeling/1 can be called anywhere in the queens/2 clause, since the stability condition of AKL guarantees that all determinate work is performed before any don't know nondeterministic step is taken. <p> We thus achieve sufficient control of the execution of a user-defined constraint by exploiting the mono- tonicity of the defining indexicals. Note that the indexicals of the latter eq iff/3 behave exactly as the builtin range functions x to b and b to x of CLP (FD) <ref> [DC93b] </ref> by the combination of conditional ranges and monotonic- ity reasoning. <p> Note that this definition gives the same pruning as the builtin element/3 of CHIP and CLP (FD) does <ref> [DSH88, DC93b] </ref>. <p> Of course, the version of CLP (FD) specialized to boolean indexicals achieves very efficient propagation of domain constraints <ref> [DC93b] </ref>, however, the point we want to make is that in AKL (FD) more general constraint propagation can be implemented. <p> The queens program, finding one solution to the 16-queens problem, and collecting all 92 solutions to the 8-queens problem. The alpha program <ref> [DC93b] </ref>, which is a crypto-logical puzzle similar to the send-more-money problem, finding one solution. The 20 equations problem [DC93b], which is a linear arithmetic problem, finding one solution. The car sequencing program [DSH88], finding one solution to the standard instance of the problem. <p> The queens program, finding one solution to the 16-queens problem, and collecting all 92 solutions to the 8-queens problem. The alpha program <ref> [DC93b] </ref>, which is a crypto-logical puzzle similar to the send-more-money problem, finding one solution. The 20 equations problem [DC93b], which is a linear arithmetic problem, finding one solution. The car sequencing program [DSH88], finding one solution to the standard instance of the problem. <p> The difference in speed, disregarding the copying overhead, is primarily explained by the fact that CLP (FD) compiles to C, and inlines FD in the emulator <ref> [DC93b] </ref>. CHIP [DvHS + 88] is reported to be on average 2 times slower than CLP (FD) [DC93b], and hence AKL (FD) is comparable in speed to CHIP when labeling by trailing. <p> The difference in speed, disregarding the copying overhead, is primarily explained by the fact that CLP (FD) compiles to C, and inlines FD in the emulator <ref> [DC93b] </ref>. CHIP [DvHS + 88] is reported to be on average 2 times slower than CLP (FD) [DC93b], and hence AKL (FD) is comparable in speed to CHIP when labeling by trailing. Running the problems in ECLiPSe [ECR93], indicates that AGENTS is comparable in speed including the copying overhead, and about 4 times as fast by labeling in C.
Reference: [DSH88] <author> M. Dincbas, H. Simonis, and P. Van Hentenryck. </author> <title> Solving the car sequencing problem in constraint logic programming. </title> <booktitle> In European Conference on Artificial Intelligence, </booktitle> <year> 1988. </year>
Reference-contexts: That is, atmost (U, L, V) succeeds when at most U equations X i =V are true, where L=[X 1 ,: : :,X k ]. 5.4 Example: Element We now consider the definition of element/3 <ref> [DSH88] </ref>. The constraint exploits constructive disjunction which can be captured by the use of the 10 FD operators ) and _. <p> Note that this definition gives the same pruning as the builtin element/3 of CHIP and CLP (FD) does <ref> [DSH88, DC93b] </ref>. <p> The alpha program [DC93b], which is a crypto-logical puzzle similar to the send-more-money problem, finding one solution. The 20 equations problem [DC93b], which is a linear arithmetic problem, finding one solution. The car sequencing program <ref> [DSH88] </ref>, finding one solution to the standard instance of the problem. The cars program uses the definitions of element/3 and atmost/3 above, where we tried both the version of eq iff/3 using j and the version using ).
Reference: [DvHS + 88] <author> M. Dincbas, P. van Hentenryck, H. Simonis, A. Aggoun, T. Graf, and F. Berthier. </author> <title> The Constraint Logic Programming Language CHIP. </title> <booktitle> In Proceedings of the International Conference on Fifth Generation Computer Systems, </booktitle> <year> 1988. </year>
Reference-contexts: alternatively be defined by no threat (X, Y, N) :- fd (X6=Y), fd (X6=Y-N) which is a slightly less efficient formulation, since three constraints are used instead of one. 5.3 Example: Atmost In constraint logic programming systems such as CHIP and cc (FD), cardi- nality reasoning is performed by builtins <ref> [DvHS + 88, VHSD92] </ref>. We give an example of how cardinality reasoning can be programmed in AKL (FD), using the committed choice operator. The cardinality combinator can similarly be defined in AKL (FD) by using the abstraction notion of AKL [JMB + 94], thereby calling the constraints as predicates. <p> The difference in speed, disregarding the copying overhead, is primarily explained by the fact that CLP (FD) compiles to C, and inlines FD in the emulator [DC93b]. CHIP <ref> [DvHS + 88] </ref> is reported to be on average 2 times slower than CLP (FD) [DC93b], and hence AKL (FD) is comparable in speed to CHIP when labeling by trailing.
Reference: [ECR93] <author> ECRC. </author> <title> ECLiPSe User Manual, </title> <year> 1993. </year>
Reference-contexts: The programmer can thus experiment with alternatives, tailoring the constraints to fit the particular application. User-defined constraints have been recognized as crucial for the versatility of a constraint programming language <ref> [DC93b, VHSD91, ECR93, ILO93] </ref>. <p> CHIP [DvHS + 88] is reported to be on average 2 times slower than CLP (FD) [DC93b], and hence AKL (FD) is comparable in speed to CHIP when labeling by trailing. Running the problems in ECLiPSe <ref> [ECR93] </ref>, indicates that AGENTS is comparable in speed including the copying overhead, and about 4 times as fast by labeling in C.
Reference: [Fra94] <author> Torkel Franzen. </author> <title> Some formal aspects of the Andorra Kernel Language. </title> <institution> SICS Research Report R94:10, Swedish Institute of Computer Science, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: The paper is concluded with a brief performance evaluation (Section 6) and a summary (Section 7). 2 AKL This section gives a brief and informal summary of AKL, a deep-guard, don't know nondeterministic CCP language. For a complete definition see [JH91], <ref> [Fra94] </ref>, or [Jan94]. Basic statements, such as constraints, calls, composition, and hiding, are as in other CCP languages [Sar93] (see Figure 1). The particular flavor of AKL is given by the deep-guard choice statements, and the family of aggregate statements (which is not discussed here). <p> The state reached is called stable, and the behaviour is a generalization of the Basic Andorra Model to deep guards. Up to this point, the constructs introduced belong to the strictly logical subset of AKL, which has an interpretation in first-order logic both in terms of success and failure <ref> [Fra94] </ref>. Committed choice corresponds to guarded clauses in committed-choice languages. If any of the guards is successfully reduced to a store which is entailed by the union of external stores, the corresponding clause is promoted.
Reference: [HSD92] <author> P. Van Hentenryck, H. Simonis, and M. Dincbas. </author> <title> Constraint satisfaction using constraint logic programming. </title> <journal> Artificial Intelligence, </journal> <volume> 58 </volume> <pages> 113-159, </pages> <year> 1992. </year>
Reference-contexts: In cc (FD), and (x; y; z) is defined by a conjunction of implications, (X=0 !Z=0, : : :, X=Y !X=Z), similar to the clauses above (omitting the fd and fd ask operators) <ref> [HSD92] </ref>. Thus the same constraints are propagated as in AKL (FD). However, in cc (FD) there is a problem of propagating redundant copies of constraints. Consider, for example, the atom and (X, Y, 1). In AKL (FD) this atom is replaced by fd (X=1, Y=1).
Reference: [ILO93] <author> ILOG. </author> <title> ILOG Solver User Manual, </title> <year> 1993. </year>
Reference-contexts: The programmer can thus experiment with alternatives, tailoring the constraints to fit the particular application. User-defined constraints have been recognized as crucial for the versatility of a constraint programming language <ref> [DC93b, VHSD91, ECR93, ILO93] </ref>.
Reference: [Jan94] <author> Sverker Janson. </author> <title> AKL|A Multiparadigm Programming Language. </title> <institution> Uppsala theses in computing science 19, Uppsala University, </institution> <month> June </month> <year> 1994. </year> <note> (Also available as SICS Dissertation Series 14.). </note>
Reference-contexts: have extended FD with a conditional combinator, and we base our implementation on a proper treatment of the monotonicity of FD expressions. 1 Computing Science Department, Uppsala University, Box 311, 751 05 Uppsala 1 AKL (Agents Kernel Language) generalizes the basic CCP functionality using a small set of powerful combinators <ref> [JH91, Jan94] </ref>. The paradigm is that of agents communicating over a constraint store, but the combina- tors make possible also other readings, depending on the context, where agents compute functions or relations, serve as user-defined constraints, or as objects in object-oriented programs. <p> The paper is concluded with a brief performance evaluation (Section 6) and a summary (Section 7). 2 AKL This section gives a brief and informal summary of AKL, a deep-guard, don't know nondeterministic CCP language. For a complete definition see [JH91], [Fra94], or <ref> [Jan94] </ref>. Basic statements, such as constraints, calls, composition, and hiding, are as in other CCP languages [Sar93] (see Figure 1). The particular flavor of AKL is given by the deep-guard choice statements, and the family of aggregate statements (which is not discussed here). Choice statements are sequences of clauses.
Reference: [JH91] <author> Sverker Janson and Seif Haridi. </author> <title> Programming paradigms of the Andorra Kernel Language. </title> <booktitle> In Logic Programming: Proceedings of the 1991 International Symposium. </booktitle> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: have extended FD with a conditional combinator, and we base our implementation on a proper treatment of the monotonicity of FD expressions. 1 Computing Science Department, Uppsala University, Box 311, 751 05 Uppsala 1 AKL (Agents Kernel Language) generalizes the basic CCP functionality using a small set of powerful combinators <ref> [JH91, Jan94] </ref>. The paradigm is that of agents communicating over a constraint store, but the combina- tors make possible also other readings, depending on the context, where agents compute functions or relations, serve as user-defined constraints, or as objects in object-oriented programs. <p> The paper is concluded with a brief performance evaluation (Section 6) and a summary (Section 7). 2 AKL This section gives a brief and informal summary of AKL, a deep-guard, don't know nondeterministic CCP language. For a complete definition see <ref> [JH91] </ref>, [Fra94], or [Jan94]. Basic statements, such as constraints, calls, composition, and hiding, are as in other CCP languages [Sar93] (see Figure 1). The particular flavor of AKL is given by the deep-guard choice statements, and the family of aggregate statements (which is not discussed here).
Reference: [JMB + 94] <author> S. Janson, J. Montelius, K. Boortz, P. Brand, B. Carlson, R. C. Haygood, B. Danielsson, and S. Haridi. </author> <title> AGENTS User Manual. </title> <type> SICS, </type> <year> 1994. </year>
Reference-contexts: A major point of AKL is that its paradigms can be combined. For example, it is quite natural to have a reactive processor object-oriented top-level in a program, with other, encapsulated, components performing constraint solving using don't know nondeterminism. The AGENTS implementation of AKL <ref> [JMB + 94] </ref>, being developed at SICS, has rational trees as its basic constraint system, which is supported efficiently at the emulator level. <p> We give an example of how cardinality reasoning can be programmed in AKL (FD), using the committed choice operator. The cardinality combinator can similarly be defined in AKL (FD) by using the abstraction notion of AKL <ref> [JMB + 94] </ref>, thereby calling the constraints as predicates. Consider the constraint atmost (u; l; v) which is true iff at most u elements in l are equal to v, where l = [x 1 ; : : : ; x k ].
Reference: [Mah87] <author> Michael J. Maher. </author> <title> Logic semantics for a class of committed choice programs. </title> <booktitle> In Logic Programming: Proceedings of the Fourth International Conference. </booktitle> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: 1 Introduction Concurrent constraint programming (CCP) is a general paradigm for concurrent programming, which is characterized by its elegant notions of communication and synchronization based on constraints <ref> [Mah87, Sar93] </ref>. A set of constraints, regarded as formulas in first-order logic, forms a constraint store.
Reference: [Sar93] <author> Vijay A. Saraswat. </author> <title> Concurrent Constraint Programming Languages. </title> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction Concurrent constraint programming (CCP) is a general paradigm for concurrent programming, which is characterized by its elegant notions of communication and synchronization based on constraints <ref> [Mah87, Sar93] </ref>. A set of constraints, regarded as formulas in first-order logic, forms a constraint store. <p> For a complete definition see [JH91], [Fra94], or [Jan94]. Basic statements, such as constraints, calls, composition, and hiding, are as in other CCP languages <ref> [Sar93] </ref> (see Figure 1). The particular flavor of AKL is given by the deep-guard choice statements, and the family of aggregate statements (which is not discussed here). Choice statements are sequences of clauses. The first statement of a clause is the guard and the second the body.
Reference: [VH89] <author> Pascal Van Hentenryck. </author> <title> Constraint Satisfaction in Logic Programming. </title> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: Hence, we achieve the intended propagation of 6= <ref> [VH89] </ref> through the monotonicity reasoning depicted in Table 1. Note that the same constraint in CLP (FD) is defined by the use of a special value range function [DC93b], which, thus, we do not need. <p> j 2 dom (x)g, where l = [l 1 ; : : : ; l k ]). (For a copy of the example code contact agents-request@sics.se.) All the timings are in milliseconds, and are computed on a SPARC-2 system. "ff" is used to indicate if the first-fail principle was used <ref> [VH89] </ref>, and otherwise nave labeling was used. We tried labeling procedures written in C and in AKL (FD). Since general don't know nondeterminism in AGENTS is achieved by copying, we give the copy time for each example (see Table 2).
Reference: [VHSD91] <author> Pascal Van Hentenryck, Vijay Saraswat, and Yves Deville. </author> <title> Constraint processing in cc(fd). </title> <type> Unpublished manuscript, </type> <year> 1991. </year>
Reference-contexts: Telling and asking correspond to sending and receiving "messages", thereby providing the basic means for communication and synchronization for concurrent programming. Constraints also serve as primitives in problem solving programs. The finite domain constraint system FD is a framework for solving discrete constraint satisfaction problems in a CCP setting <ref> [VHSD91] </ref>. FD is suitable as a target for constraint compilers and can be used both for consistency checking and for entailment checking [CC94, CCD94]. <p> A clausal syntax for definitions with choice statements will be used, which corresponds to the above syntax in a straightforward manner. 3 FD The constraint system FD is based on simple domain constraints and functional rules called indexicals <ref> [VHSD91] </ref>. These rules may be thought of both as describing node and arc consistency propagation, and as describing the logical relation between variables. A domain constraint is an expression x 2 I, where I is a set of integers. <p> The programmer can thus experiment with alternatives, tailoring the constraints to fit the particular application. User-defined constraints have been recognized as crucial for the versatility of a constraint programming language <ref> [DC93b, VHSD91, ECR93, ILO93] </ref>.
Reference: [VHSD92] <author> Pascal Van Hentenryck, Vijay Saraswat, and Yves Deville. </author> <title> Constraint Logic Programming over Finite Domains: the Design, Implementation, and Applications of cc(fd). </title> <type> Technical report, </type> <institution> Computer Science Department, Brown University, </institution> <year> 1992. </year> <month> 16 </month>
Reference-contexts: alternatively be defined by no threat (X, Y, N) :- fd (X6=Y), fd (X6=Y-N) which is a slightly less efficient formulation, since three constraints are used instead of one. 5.3 Example: Atmost In constraint logic programming systems such as CHIP and cc (FD), cardi- nality reasoning is performed by builtins <ref> [DvHS + 88, VHSD92] </ref>. We give an example of how cardinality reasoning can be programmed in AKL (FD), using the committed choice operator. The cardinality combinator can similarly be defined in AKL (FD) by using the abstraction notion of AKL [JMB + 94], thereby calling the constraints as predicates. <p> AGENTS offers a complete implementation of AKL (FD), and is comparable in speed with state-of-the-art finite domain CLP languages. It is free for research and education purposes. (Contact agents-request@sics.se.) Future research includes * compiling implications and disjunctions of finite domain constraints, where disjunction is constructive <ref> [VHSD92] </ref>. Constraints are compiled differently whether used for consistency or entailment checking, and FD with conditional ranges will be used as target language [CC94]. * implementing constraint lifting, a generalization of constructive disjunction to nondeterminate agents. The lifting operation is typically union of finite domains, or anti-unification of terms. Acknowledgments.
References-found: 19

