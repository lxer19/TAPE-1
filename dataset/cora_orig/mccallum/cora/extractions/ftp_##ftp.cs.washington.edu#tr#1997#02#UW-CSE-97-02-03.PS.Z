URL: ftp://ftp.cs.washington.edu/tr/1997/02/UW-CSE-97-02-03.PS.Z
Refering-URL: http://www.cs.washington.edu/homes/ruzzo/
Root-URL: 
Title: Parallel RAMs with Owned Global Memory and Deterministic Context-Free Language Recognition  
Author: Patrick W. Dymond Walter L. Ruzzo 
Address: Seattle, WA 98195  
Affiliation: York University Computer Science  Department of Computer Science Engineering University of Washington  
Note: Also  
Pubnum: Technical Report CS-97-02.  
Abstract: Technical Report UW-CSE-97-02-03 February, 1997 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. J. Anderson and L. Snyder. </author> <title> A comparison of shared and nonshared memory models of parallel computation. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 79(4) </volume> <pages> 480-487, </pages> <month> Apr. </month> <year> 1991. </year>
Reference-contexts: There are several reasons to study this restriction of the CREW-PRAM. The CREW-PRAM model has been criticized for being too powerful to serve as a realistic model of physically realizable parallel machines due to its "unbounded fanin." Anderson and Snyder <ref> [1] </ref> point out that the two-stage programming process of first using the CREW-PRAM model to develop a straightforward fully parallel algorithm (e.g., for the "or" of n bits), and then emulating this algorithm on a physically realizable network, could lead to a sub-optimal algorithm (fi ((log n) 2 ) for the
Reference: [2] <author> J. Archibald and J.-L. Baer. </author> <title> Cache coherence protocols: Evaluation using a multiprocessor simulation model. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 4(4) </volume> <pages> 273-298, </pages> <year> 1986. </year>
Reference-contexts: Similar but not identical notions of "ownership" have appeared in the earlier lower bound work of Cook, et al. [7], and have also proven useful in practice for certain cache coherence protocols. (See, e.g., Archibald and Baer <ref> [2] </ref>.) In many current architectures of parallel systems, the machines provide a global memory programming model, implemented using physical hardware in which every memory cell is local to some processor. Caching or other techniques are used to ameliorate the cost of access to non-local memory.
Reference: [3] <author> A. K. Chandra and M. Tompa. </author> <title> The complexity of short two-person games. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 29(1) </volume> <pages> 21-33, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: For example, Sudborough's "hardest DCFL" [36] provides a natural example of a problem complete for CROW-PRAM time O (log n). Complete problems have been discovered by Chandra and Tompa for CRCW-PRAM time classes <ref> [3] </ref>. We know of no analogous natural problems that are complete for CREW-PRAM time classes. Following an earlier version of our paper [12], Lange and Niedermeier [22] established characterizations of other PRAM variants in terms of sequential complexity classes.
Reference: [4] <author> S. A. Cook. </author> <title> Characterizations of pushdown machines in terms of time-bounded computers. </title> <journal> Journal of the ACM, </journal> <volume> 18(1) </volume> <pages> 4-18, </pages> <month> Jan. </month> <year> 1971. </year>
Reference-contexts: The class LOGDCFL of languages log-space reducible to DCFLs was first defined and studied by Sudborough [36], who showed that it is equal to the class of languages recognizable in polynomial time by log-space bounded deterministic auxiliary pushdown automata (DauxPDAs), defined by Cook <ref> [4] </ref>. Our result appears to be the first to precisely characterize a parallel time complexity class (up to constant factors) in terms of a sequential one. For example, Sudborough's "hardest DCFL" [36] provides a natural example of a problem complete for CROW-PRAM time O (log n).
Reference: [5] <author> S. A. Cook. </author> <title> Deterministic CFL's are accepted simultaneously in polynomial time and log squared space. </title> <booktitle> In Conference Record of the Eleventh Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 338-345, </pages> <address> Atlanta, GA, </address> <month> Apr.-May </month> <year> 1979. </year> <note> See also [38]. </note>
Reference-contexts: The small-space and parallel time complexities of the problem are less well-understood. Two main results in these areas are by von Braunmuhl, Cook, Mehlhorn, and Verbeek <ref> [5, 38] </ref>, and by Klein and Reif [20]. Cook [5] presents a sequential algorithm for the DCFL recognition problem that runs in polynomial time on a Turing machine using only polynomial in log n space. <p> The small-space and parallel time complexities of the problem are less well-understood. Two main results in these areas are by von Braunmuhl, Cook, Mehlhorn, and Verbeek [5, 38], and by Klein and Reif [20]. Cook <ref> [5] </ref> presents a sequential algorithm for the DCFL recognition problem that runs in polynomial time on a Turing machine using only polynomial in log n space. <p> This result has been improved by von Braunmuhl et al. [38], who give Turing machine algorithms with optimal time-space product for any space bound in the range from (log n) 2 to n. Building somewhat on the ideas of <ref> [5, 38] </ref>, Klein and Reif [20] present an O (log n) time CREW-PRAM algorithm for DCFL recognition. (It is known that results of Stockmeyer and Vishkin [35] can be combined with the CROW-PRAMs and DCFL Recognition 5 algorithm of Ruzzo [32] to yield an O (log n) time algorithm for general <p> Corollary 12 (Harju [18].) DCFLs are in DauxPDA space O (log n) and stack height O (log 2 The following result is also a corollary. Corollary 13 (Cook <ref> [5] </ref>; von Braunmuhl, et al. [38].) DCFLs are in SC 2 . The time bound for the algorithm sketched above, while polynomial, is not particularly attractive.
Reference: [6] <author> S. A. Cook. </author> <title> Towards a complexity theory of synchronous parallel computation. </title> <booktitle> L'Enseignement Mathematique, XXVII(1-2):99-124, Jan.-June 1981. Also in [24, </booktitle> <pages> pages 75-100]. </pages> <note> CROW-PRAMs and DCFL Recognition 41 </note>
Reference-contexts: A PPM operates by sensing the outputs of its neighboring processors, and moving its pointers to other processors adjacent to its current neighbors. Cook proposed such a model as an example of the simplest possible parallel machine with "variable structure" <ref> [6] </ref>.
Reference: [7] <author> S. A. Cook, C. Dwork, and R. Reischuk. </author> <title> Upper and lower time bounds for parallel random access machines without simultaneous writes. </title> <journal> SIAM Journal on Computing, </journal> <volume> 15(1) </volume> <pages> 87-97, </pages> <month> Feb. </month> <year> 1986. </year>
Reference-contexts: The ownership restriction seems to be a very natural framework in which to design exclusive-write algorithms. Similar but not identical notions of "ownership" have appeared in the earlier lower bound work of Cook, et al. <ref> [7] </ref>, and have also proven useful in practice for certain cache coherence protocols. (See, e.g., Archibald and Baer [2].) In many current architectures of parallel systems, the machines provide a global memory programming model, implemented using physical hardware in which every memory cell is local to some processor. <p> defined only when at most one input bit is one. (This has been called a "partial domain" by Fich, in contrast to the more usual situation where an algorithm is required to produce a correct answer on all n-bit input sequences.) We know from the results of Cook, et al. <ref> [7] </ref> that even a CREW-PRAM requires time (log n) to test whether its input contains at most one 1 bit. Conceivably, a CREW algorithm that exploited something like Snir's "or" could always be transformed into a CROW algorithm by using this "preprocessing" time to better advantage.
Reference: [8] <author> S. A. Cook and P. W. Dymond. </author> <title> Parallel pointer machines. </title> <journal> Computational Complexity, </journal> <volume> 3(1) </volume> <pages> 19-30, </pages> <year> 1993. </year>
Reference-contexts: A log space-bounded reduction can be done on a CROW-PRAM in time O (log n) using the deterministic pointer-jumping technique of Fortune and Wyllie [15]. See Cook and Dymond <ref> [8] </ref> for a detailed description the simulation of log space by a parallel pointer machine in O (log n) time, and see Lam and Ruzzo [21] for a simulation of the later model by a O (log n) time-bounded CROW-PRAM. This simulation is easily made to obey restrictions R1-R3.
Reference: [9] <author> P. W. Dymond. </author> <title> Indirect addressing and the time relationships of some models of sequential computation. </title> <journal> Int. J. of Computers and Math. with Applications, </journal> <volume> 5 </volume> <pages> 195-209, </pages> <year> 1979. </year>
Reference-contexts: An analogous nonconstant lower bound on two dimensional array access was proved for sequential unit cost successor RAMs by Dymond <ref> [9] </ref>. 3 Simulation of CROW-PRAMs by DauxPDAs In this section we will prove the first half of Theorem 1, namely: Theorem 2 Any set recognized in time O (log n) on a CROW-PRAM is in LOGDCFL.
Reference: [10] <author> P. W. Dymond and S. A. Cook. </author> <title> Hardware complexity and parallel computation. </title> <booktitle> In 21st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 360-372, </pages> <address> Syracuse, NY, </address> <month> Oct. </month> <year> 1980. </year> <note> IEEE. </note>
Reference-contexts: While CROW-PRAMs appear to be nearly as powerful as CREW-PRAMs, it is interesting to compare them to a possibly weaker parallel model, the parallel pointer machine of Dymond and Cook <ref> [10] </ref>. PPMs consist of an unbounded pool of finite-state transducers, each with a finite set of pointers to other processors. A PPM operates by sensing the outputs of its neighboring processors, and moving its pointers to other processors adjacent to its current neighbors.
Reference: [11] <author> P. W. Dymond, F. E. Fich, N. Nishimura, P. Ragde, and W. L. Ruzzo. </author> <title> Pointers versus arithmetic in PRAMs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 53(2) </volume> <pages> 218-232, </pages> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: Lin, et al. show that CROW-PRAMs are sufficiently powerful to execute a variant of Cole's parallel merge sort algorithm in time O (log n) [23]. Work on further restrictions of the CROW-PRAM model by Lam and Ruzzo [21] and Dymond, et al. <ref> [11] </ref> is described at the end of section two. CROW-PRAMs and DCFL Recognition 7 2 Definition of CROW-PRAMs We start by defining the CREW-PRAM model we will use. As mentioned above, most of the details of the definition are not critical. <p> also showed a simultaneous linear relationship between the amounts of hardware used on the two machines.) Our conjecture that the CROW-PRAM's ability to access two-dimensional arrays in constant time cannot be directly emulated on a CROW-PRAM whose arithmetic capability is so limited has been proved recently by Dymond, et al. <ref> [11] </ref>. Since two-dimensional arrays appear to play an important part in the DCFL simulation algorithm of Section 6, this suggests that quite different techniques would be needed to recognize DCFLs in time O (log n) on the PPM, if this is indeed possible.
Reference: [12] <author> P. W. Dymond and W. L. Ruzzo. </author> <title> Parallel random access machines with owned global memory and deterministic context-free language recognition. </title> <editor> In L. Kott, editor, </editor> <booktitle> Automata, Languages, and Programming: 13th International Colloquium, volume 226 of Lecture Notes in Computer Science, </booktitle> <pages> pages 95-104, </pages> <publisher> Rennes, </publisher> <address> France, July 1986. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Complete problems have been discovered by Chandra and Tompa for CRCW-PRAM time classes [3]. We know of no analogous natural problems that are complete for CREW-PRAM time classes. Following an earlier version of our paper <ref> [12] </ref>, Lange and Niedermeier [22] established characterizations of other PRAM variants in terms of sequential complexity classes. We use the DCFL characterization to demonstrate the stability of CROW-PRAM complexity classes under definitional changes. <p> Further work involving the owned global memory concept in PRAMs has appeared following a preliminary version of this paper <ref> [12] </ref>. Fich and Wigderson give a lower bound separating EROW and CROW PRAMs [14]. Rossmanith introduces and studies Owner Read, Owner Write PRAMs, showing, for example, that they can do list ranking in O (log n) time [31]. Nishimura considers the owner concept in CRCW-PRAMs [29]. <p> At least, this provides some intuitive support for the empirical observation that most known CREW-PRAM algorithms are CROW-PRAM algorithms. In one context, we know the two models are equivalent. Following the appearance of an extended abstract of this paper <ref> [12] </ref>, Ragde (personal communication; see also Fich [13], Nisan [28]) observed that nonuniform CROW-PRAMs, i.e., ones having arbitrary instructions, exponentially many processors initially active, and allowing different programs for each value of n, running in time t are equivalent to Boolean decision trees of depth 2 t .
Reference: [13] <author> F. E. Fich. </author> <title> The complexity of computation on the parallel random access machine. </title> <editor> In J. H. Reif, editor, </editor> <booktitle> Synthesis of Parallel Algorithms, chapter 20, </booktitle> <pages> pages 843-899. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: At least, this provides some intuitive support for the empirical observation that most known CREW-PRAM algorithms are CROW-PRAM algorithms. In one context, we know the two models are equivalent. Following the appearance of an extended abstract of this paper [12], Ragde (personal communication; see also Fich <ref> [13] </ref>, Nisan [28]) observed that nonuniform CROW-PRAMs, i.e., ones having arbitrary instructions, exponentially many processors initially active, and allowing different programs for each value of n, running in time t are equivalent to Boolean decision trees of depth 2 t .
Reference: [14] <author> F. E. Fich and A. Wigderson. </author> <title> Towards understanding exclusive read. </title> <journal> SIAM Journal on Computing, </journal> <volume> 19(4) </volume> <pages> 717-727, </pages> <year> 1990. </year>
Reference-contexts: Further work involving the owned global memory concept in PRAMs has appeared following a preliminary version of this paper [12]. Fich and Wigderson give a lower bound separating EROW and CROW PRAMs <ref> [14] </ref>. Rossmanith introduces and studies Owner Read, Owner Write PRAMs, showing, for example, that they can do list ranking in O (log n) time [31]. Nishimura considers the owner concept in CRCW-PRAMs [29]. Nieder-meier and Rossmanith [27, 26] have considered the owner concept with other PRAM variants.
Reference: [15] <author> S. Fortune and J. C. Wyllie. </author> <title> Parallelism in random access machines. </title> <booktitle> In Conference Record of the Tenth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 114-118, </pages> <address> San Diego, CA, </address> <month> May </month> <year> 1978. </year>
Reference-contexts: CROW-PRAMs and DCFL Recognition 7 2 Definition of CROW-PRAMs We start by defining the CREW-PRAM model we will use. As mentioned above, most of the details of the definition are not critical. For specificity we use the definition of Fortune and Wyllie <ref> [15] </ref> (called simply a P-RAM there) which has: an unbounded global memory and an unbounded set of processors, each with an accumulator, an instruction counter and an unbounded local memory. Each memory cell can hold an arbitrary non-negative integer. <p> Sudborough [36] defined the class, and characterized it as the set of languages recognized in polynomial time on a logarithmic space deterministic auxiliary pushdown automaton. The main construction is similar to analogous ones given by Pratt and Stockmeyer [30], Fortune and Wyllie <ref> [15] </ref>, and Goldschlager [17] showing that PRAM time log n is contained in DSP ACE (log 2 n). <p> This much of the proof is essentially the same as in <ref> [15, 17, 30] </ref>. The main novelty with our proof is that our algorithm runs in polynomial time, rather than time n log n as in the earlier results. <p> We will not describe the rest of the PRAM's instruction set in great detail; see Fortune and Wyllie <ref> [15] </ref>. The state of processor p at time t is an ordered pair containing the instruction counter, and the contents of the accumulator of p at the end of the t th step. <p> CROW-PRAMs and DCFL Recognition 21 5 The Basic DPDA Simulation Algorithm We now will describe a procedure to efficiently simulate a DPDA on input x of length n. Our algorithm is motivated by the "repeated doubling" idea used, e.g., by Fortune and Wyllie <ref> [15, 39] </ref> and Klein and Reif [20], which can be described in our setting as follows. <p> A log space-bounded reduction can be done on a CROW-PRAM in time O (log n) using the deterministic pointer-jumping technique of Fortune and Wyllie <ref> [15] </ref>. See Cook and Dymond [8] for a detailed description the simulation of log space by a parallel pointer machine in O (log n) time, and see Lam and Ruzzo [21] for a simulation of the later model by a O (log n) time-bounded CROW-PRAM.
Reference: [16] <author> S. Ginsburg, S. A. Greibach, and M. A. Harrison. </author> <title> Stack automata and compiling. </title> <journal> Journal of the ACM, </journal> <volume> 14(1) </volume> <pages> 172-201, </pages> <year> 1967. </year>
Reference-contexts: Their algorithm makes general use of its space resource, i.e., it is not used as a pushdown store, or even as a stack (in the stack automaton sense; Ginsburg, Greibach, and Harrison <ref> [16] </ref>). The goal of the remainder of this section is to sketch an improvement to our algorithm to achieve time bounds matching those of von Braunmuhl, et al., while still using a DauxPDA. Our modifications borrow some of the key ideas from the von Braunmuhl, et al. constructions.
Reference: [17] <author> L. M. Goldschlager. </author> <title> A universal interconnection pattern for parallel computers. </title> <journal> Journal of the ACM, </journal> <volume> 29(4) </volume> <pages> 1073-1086, </pages> <month> Oct. </month> <year> 1982. </year>
Reference-contexts: Sudborough [36] defined the class, and characterized it as the set of languages recognized in polynomial time on a logarithmic space deterministic auxiliary pushdown automaton. The main construction is similar to analogous ones given by Pratt and Stockmeyer [30], Fortune and Wyllie [15], and Goldschlager <ref> [17] </ref> showing that PRAM time log n is contained in DSP ACE (log 2 n). <p> This much of the proof is essentially the same as in <ref> [15, 17, 30] </ref>. The main novelty with our proof is that our algorithm runs in polynomial time, rather than time n log n as in the earlier results. <p> a constant number of references to previously stored values of r k ; L k , and SUMMARY k The implementation of tables indexed by surface configurations and references, and the initialization of a unique processor for every array entry are done using now-standard parallel RAM programming techniques; see Gold-schlager <ref> [17] </ref> or Wyllie [39] for examples. Each surface and reference can be coded by an integer of O (log n) bits, which can be used as a table subscript. These techniques also suffice to implement the above algorithm on a CROW-PRAM satisfying restrictions R1-R3.
Reference: [18] <author> T. Harju. </author> <title> A simulation result for the auxiliary pushdown automata. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 19 </volume> <pages> 119-132, </pages> <year> 1979. </year> <month> 42 </month>
Reference-contexts: space DauxPDA if and only if L is accepted by such a machine that furthermore uses stack height O (log 2 38 An analogous result was previously known for nondeterministic PDAs (Ruzzo [32]), but the best result previous to Rytter's for stack height reduction in DauxPDAs required superpolynomial time (Harju <ref> [18] </ref>; c.f. [32] for an alternative proof). Corollary 12 (Harju [18].) DCFLs are in DauxPDA space O (log n) and stack height O (log 2 The following result is also a corollary. Corollary 13 (Cook [5]; von Braunmuhl, et al. [38].) DCFLs are in SC 2 . <p> such a machine that furthermore uses stack height O (log 2 38 An analogous result was previously known for nondeterministic PDAs (Ruzzo [32]), but the best result previous to Rytter's for stack height reduction in DauxPDAs required superpolynomial time (Harju <ref> [18] </ref>; c.f. [32] for an alternative proof). Corollary 12 (Harju [18].) DCFLs are in DauxPDA space O (log n) and stack height O (log 2 The following result is also a corollary. Corollary 13 (Cook [5]; von Braunmuhl, et al. [38].) DCFLs are in SC 2 .
Reference: [19] <author> M. A. Harrison. </author> <title> Introduction to Formal Language Theory. </title> <publisher> Addison Wesley, </publisher> <year> 1979. </year>
Reference-contexts: This completes the proof of the "only if" direction of Theorem 1. The converse is shown in the following sections. 4 DPDA Definitions and Notation We assume familiarity with deterministic pushdown automata (DPDA), as defined for example by Harrison <ref> [19] </ref>, as well as standard variations on this model. Our DPDAs have state set Q, input alphabet and pushdown alphabet . The empty string is denoted by *, the length of string S by jSj, and string concatenation by "". <p> Furthermore, we assume that for all 2 there is some transition pushing . By standard techniques (see, e.g., Harrison <ref> [19, Section 5.6] </ref>), there is a constant c &gt; 0 such that the DPDA can be assumed to have the above properties and to halt in time c n at most, with maximum pushdown depth n, on any input of length n. <p> 2 i ` k hw; S 3 i ) hu; S 1 S 2 i ` k+j hw; S 3 i: In addition to the restrictions on DPDAs discussed above, we assume that no id can occur twice in a computation of the DPDA when started at any given id <ref> [19, Section 5.6] </ref>. This justifies using ids as references to particular points in computations. E.g., if I ` t J, we could refer to the id J to uniquely identify the point in the computation t steps after id I.
Reference: [20] <author> P. N. Klein and J. H. Reif. </author> <title> Parallel time O(log n) acceptance of deterministic CFLs on an exclusive-write P-RAM. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17(3) </volume> <pages> 463-485, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: The small-space and parallel time complexities of the problem are less well-understood. Two main results in these areas are by von Braunmuhl, Cook, Mehlhorn, and Verbeek [5, 38], and by Klein and Reif <ref> [20] </ref>. Cook [5] presents a sequential algorithm for the DCFL recognition problem that runs in polynomial time on a Turing machine using only polynomial in log n space. <p> This result has been improved by von Braunmuhl et al. [38], who give Turing machine algorithms with optimal time-space product for any space bound in the range from (log n) 2 to n. Building somewhat on the ideas of [5, 38], Klein and Reif <ref> [20] </ref> present an O (log n) time CREW-PRAM algorithm for DCFL recognition. (It is known that results of Stockmeyer and Vishkin [35] can be combined with the CROW-PRAMs and DCFL Recognition 5 algorithm of Ruzzo [32] to yield an O (log n) time algorithm for general CFL recognition, but only on <p> This model seems to be closer to the way that some parallel machines have actually been constructed than models with an independent global memory not associated with any processor. The DCFL recognition algorithms of von Braunmuhl et al. [38] and Klein and Reif <ref> [20] </ref> are difficult ones, and use superficially different approaches. The third goal of this paper is to provide a unified approach to both problems, which, although based on both, we believe to be simpler than either. <p> The 6 small space algorithm provides an improvement to a result by Rytter [33], and a technical refinement to the optimal results of von Braunmuhl et al. [38]. Rytter had shown, using a sequential implementation of <ref> [20] </ref>, that it is possible to obtain a polynomial time, O (log 2 n) space algorithm for DCFL recognition using space mainly as a pushdown store (more precisely, a log n space DauxPDA with an O (log 2 n) bounded pushdown), rather than unrestricted O (log 2 n) space as in <p> CROW-PRAMs and DCFL Recognition 21 5 The Basic DPDA Simulation Algorithm We now will describe a procedure to efficiently simulate a DPDA on input x of length n. Our algorithm is motivated by the "repeated doubling" idea used, e.g., by Fortune and Wyllie [15, 39] and Klein and Reif <ref> [20] </ref>, which can be described in our setting as follows. Suppose we have computed for all surface configurations u 2 U and all strings S 2 fl , the 2 k step transition function D k (hu; Si), i.e., hu; Si ` 2 k D k (hu; Si).
Reference: [21] <author> T. W. Lam and W. L. Ruzzo. </author> <title> The power of parallel pointer manipulation. </title> <booktitle> In Proceedings of the 1989 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 92-102, </pages> <address> Santa Fe, NM, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: Lin, et al. show that CROW-PRAMs are sufficiently powerful to execute a variant of Cole's parallel merge sort algorithm in time O (log n) [23]. Work on further restrictions of the CROW-PRAM model by Lam and Ruzzo <ref> [21] </ref> and Dymond, et al. [11] is described at the end of section two. CROW-PRAMs and DCFL Recognition 7 2 Definition of CROW-PRAMs We start by defining the CREW-PRAM model we will use. As mentioned above, most of the details of the definition are not critical. <p> A PPM operates by sensing the outputs of its neighboring processors, and moving its pointers to other processors adjacent to its current neighbors. Cook proposed such a model as an example of the simplest possible parallel machine with "variable structure" [6]. CROW-PRAMs and DCFL Recognition 11 Lam and Ruzzo <ref> [21] </ref> establish that time on PPMs is linearly related to time on a restricted version of the CROW-PRAM, on which doubling and adding one are the only arithmetic operations permitted. (In fact, they also showed a simultaneous linear relationship between the amounts of hardware used on the two machines.) Our conjecture <p> See Cook and Dymond [8] for a detailed description the simulation of log space by a parallel pointer machine in O (log n) time, and see Lam and Ruzzo <ref> [21] </ref> for a simulation of the later model by a O (log n) time-bounded CROW-PRAM. This simulation is easily made to obey restrictions R1-R3.
Reference: [22] <author> K.-J. Lange and R. Niedermeier. </author> <title> Data-independences of parallel random access machines. </title> <editor> In R. K. Shyamasundar, editor, </editor> <booktitle> Foundations of Software Technology and Theoretical Computer Science, Thirteenth Conference, Lecture Notes in Computer Science, </booktitle> <pages> pages 104-113, </pages> <address> Bombay, India, Dec. 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Complete problems have been discovered by Chandra and Tompa for CRCW-PRAM time classes [3]. We know of no analogous natural problems that are complete for CREW-PRAM time classes. Following an earlier version of our paper [12], Lange and Niedermeier <ref> [22] </ref> established characterizations of other PRAM variants in terms of sequential complexity classes. We use the DCFL characterization to demonstrate the stability of CROW-PRAM complexity classes under definitional changes.
Reference: [23] <author> D. Lin, X. Deng, and P. W. Dymond. </author> <title> Implementing Cole's parallel mergesort algorithm on owner-write parallel random access machines. </title> <type> Technical report, </type> <institution> York University Department of Computer Science, </institution> <year> 1995. </year>
Reference-contexts: Nishimura considers the owner concept in CRCW-PRAMs [29]. Nieder-meier and Rossmanith [27, 26] have considered the owner concept with other PRAM variants. Lin, et al. show that CROW-PRAMs are sufficiently powerful to execute a variant of Cole's parallel merge sort algorithm in time O (log n) <ref> [23] </ref>. Work on further restrictions of the CROW-PRAM model by Lam and Ruzzo [21] and Dymond, et al. [11] is described at the end of section two. CROW-PRAMs and DCFL Recognition 7 2 Definition of CROW-PRAMs We start by defining the CREW-PRAM model we will use.
Reference: [24] <editor> Logic and Algorithmic, </editor> <booktitle> An International Symposium Held in Honor of Ernst Specker, </booktitle> <address> Zurich, </address> <month> Feb. </month> <pages> 5-11, </pages> <year> 1980. </year> <note> Monographie No. </note> <institution> 30 de L'Enseignement Mathematique, Universite de Geneve, </institution> <year> 1982. </year>
Reference: [25] <author> B. Monien, W. Rytter, and H. Schapers. </author> <title> Fast recognition of deterministic CFL's with a smaller number of processors. </title> <journal> Theoretical Computer Science, </journal> <volume> 116(2) </volume> <pages> 421-429, </pages> <month> 16 Aug. </month> <year> 1993. </year> <title> Corrigendum, </title> <address> ibid., 123(2):427, </address> <month> 31 Jan. </month> <year> 1994. </year>
Reference-contexts: This simulation is easily made to obey restrictions R1-R3. Finally, by Theorem 9, the resulting language can be recognized by a CROW-PRAM also obeying restrictions R1-R3. 2 Following appearance of an earlier version of this paper, Monien, et al. <ref> [25] </ref> gave a CREW-PRAM algorithm for DCFL recognition that, for any * &gt; 0, uses O (log n) time and n 2+* processors.
Reference: [26] <author> R. Niedermeier and P. Rossmanith. </author> <title> On optimal OROW-PRAM algorithms for computing recursively defined functions. </title> <journal> Parallel Processing Letters, </journal> <volume> 5(2) </volume> <pages> 299-309, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Fich and Wigderson give a lower bound separating EROW and CROW PRAMs [14]. Rossmanith introduces and studies Owner Read, Owner Write PRAMs, showing, for example, that they can do list ranking in O (log n) time [31]. Nishimura considers the owner concept in CRCW-PRAMs [29]. Nieder-meier and Rossmanith <ref> [27, 26] </ref> have considered the owner concept with other PRAM variants. Lin, et al. show that CROW-PRAMs are sufficiently powerful to execute a variant of Cole's parallel merge sort algorithm in time O (log n) [23].
Reference: [27] <author> R. Niedermeier and P. Rossmanith. </author> <title> PRAM's towards realistic parallelism: </title> <editor> BRAM's. In H. Reichel, editor, </editor> <booktitle> Fundamentals of Computation Theory: 10th International Conference, FCT '95, volume 965 of Lecture Notes in Computer Science, </booktitle> <pages> pages 363-373, </pages> <address> Dresden, Germany, Aug. 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Fich and Wigderson give a lower bound separating EROW and CROW PRAMs [14]. Rossmanith introduces and studies Owner Read, Owner Write PRAMs, showing, for example, that they can do list ranking in O (log n) time [31]. Nishimura considers the owner concept in CRCW-PRAMs [29]. Nieder-meier and Rossmanith <ref> [27, 26] </ref> have considered the owner concept with other PRAM variants. Lin, et al. show that CROW-PRAMs are sufficiently powerful to execute a variant of Cole's parallel merge sort algorithm in time O (log n) [23].
Reference: [28] <author> N. Nisan. </author> <title> CREW PRAMs and decision trees. </title> <journal> SIAM Journal on Computing, </journal> <volume> 20(6) </volume> <pages> 999-1007, </pages> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: At least, this provides some intuitive support for the empirical observation that most known CREW-PRAM algorithms are CROW-PRAM algorithms. In one context, we know the two models are equivalent. Following the appearance of an extended abstract of this paper [12], Ragde (personal communication; see also Fich [13], Nisan <ref> [28] </ref>) observed that nonuniform CROW-PRAMs, i.e., ones having arbitrary instructions, exponentially many processors initially active, and allowing different programs for each value of n, running in time t are equivalent to Boolean decision trees of depth 2 t . Nisan [28] established that for any set recognized by a (nonuniform) CREW-PRAM <p> paper [12], Ragde (personal communication; see also Fich [13], Nisan <ref> [28] </ref>) observed that nonuniform CROW-PRAMs, i.e., ones having arbitrary instructions, exponentially many processors initially active, and allowing different programs for each value of n, running in time t are equivalent to Boolean decision trees of depth 2 t . Nisan [28] established that for any set recognized by a (nonuniform) CREW-PRAM in time t (n) = O (log n), for each n there is a equivalent Boolean decision tree problem of depth 2 t (n) .
Reference: [29] <author> N. Nishimura. </author> <title> Restricted CRCW PRAMs. </title> <journal> Theoretical Computer Science, </journal> <volume> 123(2) </volume> <pages> 415-426, </pages> <month> 31 Jan. </month> <year> 1994. </year> <title> CROW-PRAMs and DCFL Recognition 43 </title>
Reference-contexts: Fich and Wigderson give a lower bound separating EROW and CROW PRAMs [14]. Rossmanith introduces and studies Owner Read, Owner Write PRAMs, showing, for example, that they can do list ranking in O (log n) time [31]. Nishimura considers the owner concept in CRCW-PRAMs <ref> [29] </ref>. Nieder-meier and Rossmanith [27, 26] have considered the owner concept with other PRAM variants. Lin, et al. show that CROW-PRAMs are sufficiently powerful to execute a variant of Cole's parallel merge sort algorithm in time O (log n) [23].
Reference: [30] <author> V. R. Pratt and L. J. Stockmeyer. </author> <title> A characterization of the power of vector machines. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 12(2) </volume> <pages> 198-221, </pages> <month> Apr. </month> <year> 1976. </year>
Reference-contexts: Sudborough [36] defined the class, and characterized it as the set of languages recognized in polynomial time on a logarithmic space deterministic auxiliary pushdown automaton. The main construction is similar to analogous ones given by Pratt and Stockmeyer <ref> [30] </ref>, Fortune and Wyllie [15], and Goldschlager [17] showing that PRAM time log n is contained in DSP ACE (log 2 n). <p> This much of the proof is essentially the same as in <ref> [15, 17, 30] </ref>. The main novelty with our proof is that our algorithm runs in polynomial time, rather than time n log n as in the earlier results.
Reference: [31] <author> P. Rossmanith. </author> <title> The owner concept for PRAMs. </title> <editor> In C. Choffrut and M. Jantzen, editors, </editor> <booktitle> STACS 91: 8th Annual Symposium on Theoretical Aspects of Computer Science, volume 480 of Lecture Notes in Computer Science, </booktitle> <pages> pages 172-183, </pages> <address> Hamburg, Germany, Feb. 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Fich and Wigderson give a lower bound separating EROW and CROW PRAMs [14]. Rossmanith introduces and studies Owner Read, Owner Write PRAMs, showing, for example, that they can do list ranking in O (log n) time <ref> [31] </ref>. Nishimura considers the owner concept in CRCW-PRAMs [29]. Nieder-meier and Rossmanith [27, 26] have considered the owner concept with other PRAM variants. Lin, et al. show that CROW-PRAMs are sufficiently powerful to execute a variant of Cole's parallel merge sort algorithm in time O (log n) [23].
Reference: [32] <author> W. L. Ruzzo. </author> <title> Tree-size bounded alternation. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 21(2) </volume> <pages> 218-235, </pages> <month> Oct. </month> <year> 1980. </year>
Reference-contexts: Building somewhat on the ideas of [5, 38], Klein and Reif [20] present an O (log n) time CREW-PRAM algorithm for DCFL recognition. (It is known that results of Stockmeyer and Vishkin [35] can be combined with the CROW-PRAMs and DCFL Recognition 5 algorithm of Ruzzo <ref> [32] </ref> to yield an O (log n) time algorithm for general CFL recognition, but only on the more powerful CRCW-PRAM model.) Our main result is the following characterization of CROW-PRAMs. <p> Theorem 11 (Rytter [33].) L is accepted by a polynomial time logarithmic space DauxPDA if and only if L is accepted by such a machine that furthermore uses stack height O (log 2 38 An analogous result was previously known for nondeterministic PDAs (Ruzzo <ref> [32] </ref>), but the best result previous to Rytter's for stack height reduction in DauxPDAs required superpolynomial time (Harju [18]; c.f. [32] for an alternative proof). Corollary 12 (Harju [18].) DCFLs are in DauxPDA space O (log n) and stack height O (log 2 The following result is also a corollary. <p> if and only if L is accepted by such a machine that furthermore uses stack height O (log 2 38 An analogous result was previously known for nondeterministic PDAs (Ruzzo <ref> [32] </ref>), but the best result previous to Rytter's for stack height reduction in DauxPDAs required superpolynomial time (Harju [18]; c.f. [32] for an alternative proof). Corollary 12 (Harju [18].) DCFLs are in DauxPDA space O (log n) and stack height O (log 2 The following result is also a corollary. Corollary 13 (Cook [5]; von Braunmuhl, et al. [38].) DCFLs are in SC 2 .
Reference: [33] <author> W. Rytter. </author> <title> On the recognition of context-free languages. </title> <editor> In A. Skowron, editor, </editor> <booktitle> Computation Theory: Fifth Symposium, volume 208 of Lecture Notes in Computer Science, </booktitle> <pages> pages 318-325, </pages> <address> Zaborow, Poland, </address> <month> Dec. </month> <note> 1984 (published 1985). Springer-Verlag. </note>
Reference-contexts: We obtain both a small time parallel algorithm and a small space sequential algorithm for DCFL recognition using the same basic approach. The 6 small space algorithm provides an improvement to a result by Rytter <ref> [33] </ref>, and a technical refinement to the optimal results of von Braunmuhl et al. [38]. <p> This, combined with Theorem 9, yields an alternate proof of the following result of Rytter. Theorem 11 (Rytter <ref> [33] </ref>.) L is accepted by a polynomial time logarithmic space DauxPDA if and only if L is accepted by such a machine that furthermore uses stack height O (log 2 38 An analogous result was previously known for nondeterministic PDAs (Ruzzo [32]), but the best result previous to Rytter's for stack
Reference: [34] <author> W. Rytter. </author> <title> Parallel time O(log n) recognition of unambiguous context-free languages. </title> <journal> Information and Computation, </journal> <volume> 73(1) </volume> <pages> 75-86, </pages> <year> 1987. </year>
Reference-contexts: The only full domain problem known to us where (uniform) CREW-PRAMs seem more powerful that CROW-PRAMs is the recognition problem for unambiguous context-free languages. For this problem Rytter <ref> [34] </ref> has given an O (log n) CREW-PRAM algorithm that appears to use the power of non-owner exclusive writes in a fundamental way. Loosely speaking, it seems that the unambiguity of the underlying grammar allows one to repeatedly exploit a feature like Snir's "or".
Reference: [35] <author> L. J. Stockmeyer and U. Vishkin. </author> <title> Simulation of parallel random access machines by circuits. </title> <journal> SIAM Journal on Computing, </journal> <volume> 13(2) </volume> <pages> 409-422, </pages> <month> May </month> <year> 1984. </year>
Reference-contexts: Building somewhat on the ideas of [5, 38], Klein and Reif [20] present an O (log n) time CREW-PRAM algorithm for DCFL recognition. (It is known that results of Stockmeyer and Vishkin <ref> [35] </ref> can be combined with the CROW-PRAMs and DCFL Recognition 5 algorithm of Ruzzo [32] to yield an O (log n) time algorithm for general CFL recognition, but only on the more powerful CRCW-PRAM model.) Our main result is the following characterization of CROW-PRAMs.
Reference: [36] <author> I. H. Sudborough. </author> <title> On the tape complexity of deterministic context-free languages. </title> <journal> Journal of the ACM, </journal> <volume> 25(3) </volume> <pages> 405-414, </pages> <year> 1978. </year>
Reference-contexts: Theorem 1 A language L is accepted by a CROW-PRAM in O (log n) time if and only if L is log-space reducible to a DCFL. The class LOGDCFL of languages log-space reducible to DCFLs was first defined and studied by Sudborough <ref> [36] </ref>, who showed that it is equal to the class of languages recognizable in polynomial time by log-space bounded deterministic auxiliary pushdown automata (DauxPDAs), defined by Cook [4]. <p> Our result appears to be the first to precisely characterize a parallel time complexity class (up to constant factors) in terms of a sequential one. For example, Sudborough's "hardest DCFL" <ref> [36] </ref> provides a natural example of a problem complete for CROW-PRAM time O (log n). Complete problems have been discovered by Chandra and Tompa for CRCW-PRAM time classes [3]. We know of no analogous natural problems that are complete for CREW-PRAM time classes. <p> Recall that LOGDCFL is the class of languages log space reducible to deterministic context-free languages. Sudborough <ref> [36] </ref> defined the class, and characterized it as the set of languages recognized in polynomial time on a logarithmic space deterministic auxiliary pushdown automaton.
Reference: [37] <author> U. Vishkin. </author> <title> Synchronous parallel computation a survey. </title> <type> Technical Report TR-71, </type> <institution> Department of Computer Science, Courant Institute NYU, </institution> <year> 1983. </year>
Reference-contexts: The second sensitive feature is arbitration of memory access conflicts. Two main variants have been most intensively studied. Following the nomenclature introduced by Vishkin <ref> [37] </ref>, the CRCW (Concurrent-Read, Concurrent-Write) PRAM allows memory access conflicts. All processors reading a given location in a given step receive its value.
Reference: [38] <author> B. von Braunmuhl, S. A. Cook, K. Mehlhorn, and R. </author> <title> Verbeek. The recognition of deterministic CFL's in small time and space. </title> <journal> Information and Control, 56(1-2):34-51, </journal> <volume> Jan./Feb. </volume> <year> 1983. </year>
Reference-contexts: The small-space and parallel time complexities of the problem are less well-understood. Two main results in these areas are by von Braunmuhl, Cook, Mehlhorn, and Verbeek <ref> [5, 38] </ref>, and by Klein and Reif [20]. Cook [5] presents a sequential algorithm for the DCFL recognition problem that runs in polynomial time on a Turing machine using only polynomial in log n space. <p> Cook [5] presents a sequential algorithm for the DCFL recognition problem that runs in polynomial time on a Turing machine using only polynomial in log n space. This result has been improved by von Braunmuhl et al. <ref> [38] </ref>, who give Turing machine algorithms with optimal time-space product for any space bound in the range from (log n) 2 to n. <p> This result has been improved by von Braunmuhl et al. [38], who give Turing machine algorithms with optimal time-space product for any space bound in the range from (log n) 2 to n. Building somewhat on the ideas of <ref> [5, 38] </ref>, Klein and Reif [20] present an O (log n) time CREW-PRAM algorithm for DCFL recognition. (It is known that results of Stockmeyer and Vishkin [35] can be combined with the CROW-PRAMs and DCFL Recognition 5 algorithm of Ruzzo [32] to yield an O (log n) time algorithm for general <p> This model seems to be closer to the way that some parallel machines have actually been constructed than models with an independent global memory not associated with any processor. The DCFL recognition algorithms of von Braunmuhl et al. <ref> [38] </ref> and Klein and Reif [20] are difficult ones, and use superficially different approaches. The third goal of this paper is to provide a unified approach to both problems, which, although based on both, we believe to be simpler than either. <p> We obtain both a small time parallel algorithm and a small space sequential algorithm for DCFL recognition using the same basic approach. The 6 small space algorithm provides an improvement to a result by Rytter [33], and a technical refinement to the optimal results of von Braunmuhl et al. <ref> [38] </ref>. <p> that it is possible to obtain a polynomial time, O (log 2 n) space algorithm for DCFL recognition using space mainly as a pushdown store (more precisely, a log n space DauxPDA with an O (log 2 n) bounded pushdown), rather than unrestricted O (log 2 n) space as in <ref> [38] </ref>. We improve these results by performing our simulation on a DauxPDA (like Rytter) while attaining a time-space product similar to that of von Braunmuhl et al. Section 2 presents the CROW-PRAM model, and discusses variations in the definition. <p> Corollary 12 (Harju [18].) DCFLs are in DauxPDA space O (log n) and stack height O (log 2 The following result is also a corollary. Corollary 13 (Cook [5]; von Braunmuhl, et al. <ref> [38] </ref>.) DCFLs are in SC 2 . The time bound for the algorithm sketched above, while polynomial, is not particularly attractive. As shown by von Braunmuhl, Cook, Mehlhorn, & Verbeek [38], DCFL recognition is in simultaneous space S (n) and time O (n 1+* =S (n)) on DTMs with random access <p> Corollary 13 (Cook [5]; von Braunmuhl, et al. <ref> [38] </ref>.) DCFLs are in SC 2 . The time bound for the algorithm sketched above, while polynomial, is not particularly attractive. As shown by von Braunmuhl, Cook, Mehlhorn, & Verbeek [38], DCFL recognition is in simultaneous space S (n) and time O (n 1+* =S (n)) on DTMs with random access to their input tapes, for any * &gt; 0 and any log n S (n) n.
Reference: [39] <author> J. C. Wyllie. </author> <title> The Complexity of Parallel Computations. </title> <type> PhD thesis, </type> <institution> Cornell University, Department of Computer Science, </institution> <year> 1979. </year> <type> TR 79-387. </type> <institution> (Last RCS Revision: 1.44; Date: 1997/04/17 04:20:28 </institution> .) 
Reference-contexts: CROW-PRAMs and DCFL Recognition 21 5 The Basic DPDA Simulation Algorithm We now will describe a procedure to efficiently simulate a DPDA on input x of length n. Our algorithm is motivated by the "repeated doubling" idea used, e.g., by Fortune and Wyllie <ref> [15, 39] </ref> and Klein and Reif [20], which can be described in our setting as follows. <p> of references to previously stored values of r k ; L k , and SUMMARY k The implementation of tables indexed by surface configurations and references, and the initialization of a unique processor for every array entry are done using now-standard parallel RAM programming techniques; see Gold-schlager [17] or Wyllie <ref> [39] </ref> for examples. Each surface and reference can be coded by an integer of O (log n) bits, which can be used as a table subscript. These techniques also suffice to implement the above algorithm on a CROW-PRAM satisfying restrictions R1-R3.
References-found: 39

