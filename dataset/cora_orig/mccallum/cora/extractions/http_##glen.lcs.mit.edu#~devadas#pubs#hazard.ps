URL: http://glen.lcs.mit.edu/~devadas/pubs/hazard.ps
Refering-URL: http://glen.lcs.mit.edu/~devadas/pubs/async.html
Root-URL: 
Email: Email: billlin@imec.be  Email:  
Title: Synthesis of Hazard-Free Multilevel Logic Under Multiple-Input Changes from Binary Decision Diagrams  
Author: Bill Lin Srinivas Devadas 
Web: devadas@rle-vlsi.mit.edu  
Address: B-3001 Leuven, Belgium  Cambridge, MA  
Affiliation: IMEC Laboratory  Department of EECS MIT,  
Abstract: We describe a new method for directly synthesizing a hazard-free multilevel logic implementation from a given logic specification. The method is based on free/ordered Binary Decision Diagrams (BDD's), and is naturally applicable to multiple-output logic functions. Given an incompletely-specified (multiple-output) Boolean function, the method produces a multilevel logic network that is hazard-free for a specified set of multiple-input changes. We assume an arbitrary (unbounded) gate and wire delay model under a pure delay (PD) assumption, we permit multiple-input changes, and we consider both static and dynamic hazards under the fundamental-mode assumption. Our framework is thus general and powerful. While it is not always possible to generate hazard-free implementations using our technique, we show that in some cases hazard-free multilevel implementations can be generated when hazard-free two-level representations cannot be found. This problem is generally regarded as a difficult problem and it has important applications in the field of asynchronous design. The method has been automated and applied to a number of examples. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Akella and G. Gopalakrishnan. Shilpa: </author> <title> a high-level synthesis system for self-timed circuits. </title> <booktitle> In ICCAD-1992. </booktitle>
Reference: [2] <author> P.A. Beerel and T. Meng. </author> <title> Automatic gate-level synthesis of speed-independent circuits. </title> <booktitle> In ICCAD-1992. </booktitle>
Reference: [3] <author> J. Beister. </author> <title> A unified approach to combinational hazards. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-23(6), </volume> <year> 1974. </year>
Reference-contexts: We also assume a pure delay (PD) model, which means we do not assume the presence of slow inertial delays to insure correctness. The two-level minimization version of the problem has been addressed by a number of researchers in the past <ref> [25, 16, 10, 5, 3, 4, 11] </ref>. More recently, Nowick [22] has developed an exact two-level minimizer that combines a number of previous ideas on this problem. <p> Therefore, we consider only transitions which are free of function hazards (see <ref> [10, 4, 3] </ref>). 2.4 Logic Hazards If f is free of function hazards for a transition from input A to B, it may still have hazards due to possible delays in the actual logic realization.
Reference: [4] <author> J.G. Bredeson. </author> <title> Synthesis of multiple input-change hazard-free combinational switching circuits without feedback. </title> <journal> Int. J. Electronics, </journal> <volume> 39(6) </volume> <pages> 615-624, </pages> <year> 1975. </year> <month> 27 </month>
Reference-contexts: We also assume a pure delay (PD) model, which means we do not assume the presence of slow inertial delays to insure correctness. The two-level minimization version of the problem has been addressed by a number of researchers in the past <ref> [25, 16, 10, 5, 3, 4, 11] </ref>. More recently, Nowick [22] has developed an exact two-level minimizer that combines a number of previous ideas on this problem. <p> Therefore, we consider only transitions which are free of function hazards (see <ref> [10, 4, 3] </ref>). 2.4 Logic Hazards If f is free of function hazards for a transition from input A to B, it may still have hazards due to possible delays in the actual logic realization. <p> Specifically, the transition cube t5 = 11 1 intersects the transition cube of t4 = [0111; 1011], but it does not contain the start state 0111, which is a dynamic hazard violation. See <ref> [11, 4, 22] </ref> for more details.
Reference: [5] <author> J.G. Bredeson and P.T. Hulina. </author> <title> Elimination of static and dynamic hazards for multiple input changes in combinational switching circuits. </title> <journal> Information and Control, </journal> <volume> 20 </volume> <pages> 114-224, </pages> <year> 1972. </year>
Reference-contexts: We also assume a pure delay (PD) model, which means we do not assume the presence of slow inertial delays to insure correctness. The two-level minimization version of the problem has been addressed by a number of researchers in the past <ref> [25, 16, 10, 5, 3, 4, 11] </ref>. More recently, Nowick [22] has developed an exact two-level minimizer that combines a number of previous ideas on this problem. <p> pair of states B and C (A 6= B; C 6= D) such that (a) B 2 [A; D] and C 2 [B; D] and If a transition has a function hazard, no implementation of the function can avoid a glitch on the transition, assuming arbitrary gate and wire delays <ref> [10, 5] </ref>. Therefore, we consider only transitions which are free of function hazards (see [10, 4, 3]). 2.4 Logic Hazards If f is free of function hazards for a transition from input A to B, it may still have hazards due to possible delays in the actual logic realization.
Reference: [6] <author> E. Brunvand and R. F. Sproull. </author> <title> Translating concurrent programs into delay-insensitive circuits. </title> <booktitle> In ICCAD-1989. </booktitle>
Reference: [7] <author> R. E. Bryant. </author> <title> Graph-based algorithms for boolean function manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35(8):677-691, </volume> <month> August </month> <year> 1986. </year>
Reference-contexts: A Binary decision diagram is a directed acyclic graph representation of Boolean function. BDD's have gained widespread use in the areas of formal verification and logic synthesis due to the canonical and easily manipulable nature of a class of BDD's <ref> [7] </ref>. Our framework is based on the use of both free as well as ordered BDD's and is naturally applicable to multiple-output logic functions. We permit multiple-input changes, and we consider both static and dynamic hazards, which means the 2 resulting framework is general and powerful. <p> ! 1 ! 0 ! 1 (or 1 ! 0 ! 1 ! 0) transitions while the specified behavior is a single 0 ! 1 transition (or 1 ! 0 transition). 3 Binary Decision Diagrams and Derived Multiplexor Networks 3.1 Binary Decision Diagrams In this section, we will restate from <ref> [7] </ref> the definitions for free Binary Decision Diagrams and reduced ordered Binary Decision Diagrams. We will then indicate how a multiplexor-based multilevel logic network can be derived from them. <p> A reduced BDD is one in which low (v) 6= high (v) for any vertex v and no two subgraphs in the BDD are identical. From Definition 3.1, a canonical form called a reduced ordered Binary Decision Diagram <ref> [7] </ref> (or simply ordered BDD) can be derived if the following restrictions are imposed: for any nonterminal vertex v, if low (v) is also a non-terminal, then we must have index (v) &lt; index (low (v)); and if high (v) is also a non-terminal, then we must have index (v) &lt;
Reference: [8] <author> T.-A. Chu. </author> <title> Synthesis of self-timed VLSI circuits from graph-theoretic specifications. </title> <type> Technical Report MIT-LCS-TR-393, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1987. </year>
Reference: [9] <author> O. Coudert and J.C. Madre. </author> <title> A unified framework for the formal verification of sequential circuits. </title> <booktitle> In ICCAD-90, </booktitle> <pages> pages 126-129, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: The other don't care minterms can be used for optimization, for example using techniques described in <ref> [9, 24] </ref> (cf. the restrict and the generalized cofactor operators). So for all practical purposes, we only need to consider completely specified functions. Once this preprocessing step is performed, the synthesis procedure is as follows: 1. Construct a BDD G for the Boolean function f .
Reference: [10] <author> E.B. Eichelberger. </author> <title> Hazard detection in combinational and sequential switching circuits. </title> <journal> IBM J. Res. Develop., </journal> <volume> 9(2) </volume> <pages> 90-99, </pages> <year> 1965. </year>
Reference-contexts: We also assume a pure delay (PD) model, which means we do not assume the presence of slow inertial delays to insure correctness. The two-level minimization version of the problem has been addressed by a number of researchers in the past <ref> [25, 16, 10, 5, 3, 4, 11] </ref>. More recently, Nowick [22] has developed an exact two-level minimizer that combines a number of previous ideas on this problem. <p> pair of states B and C (A 6= B; C 6= D) such that (a) B 2 [A; D] and C 2 [B; D] and If a transition has a function hazard, no implementation of the function can avoid a glitch on the transition, assuming arbitrary gate and wire delays <ref> [10, 5] </ref>. Therefore, we consider only transitions which are free of function hazards (see [10, 4, 3]). 2.4 Logic Hazards If f is free of function hazards for a transition from input A to B, it may still have hazards due to possible delays in the actual logic realization. <p> Therefore, we consider only transitions which are free of function hazards (see <ref> [10, 4, 3] </ref>). 2.4 Logic Hazards If f is free of function hazards for a transition from input A to B, it may still have hazards due to possible delays in the actual logic realization.
Reference: [11] <author> J. Frackowiak. </author> <title> Methoden der analyse und synthese von hasardarmen schaltnetzen mit min-imalen kosten I. </title> <journal> Elektronische Informationsverarbeitung und Kybernetik, </journal> 10(2/3):149-187, 1974. 
Reference-contexts: We also assume a pure delay (PD) model, which means we do not assume the presence of slow inertial delays to insure correctness. The two-level minimization version of the problem has been addressed by a number of researchers in the past <ref> [25, 16, 10, 5, 3, 4, 11] </ref>. More recently, Nowick [22] has developed an exact two-level minimizer that combines a number of previous ideas on this problem. <p> Specifically, the transition cube t5 = 11 1 intersects the transition cube of t4 = [0111; 1011], but it does not contain the start state 0111, which is a dynamic hazard violation. See <ref> [11, 4, 22] </ref> for more details.
Reference: [12] <author> A. Kondratyev, M. Kishinevsky, B. Lin, P. Vanbekbergen, and A. Yakovlev. </author> <title> On the conditions for gate-level speed-independence of asynchronous circuits. </title> <booktitle> In TAU-1993. </booktitle>
Reference: [13] <author> D.S. Kung. </author> <note> Hazard-non-increasing gate-level optimization algorithms. In ICCAD-1992. </note>
Reference-contexts: We provide a characterization on when such replacements are possible. The part of the network that can be safely replaced by AND- and OR- gates can be further optimized using non-hazard-increasing logic transformations, such as the ones discussed in <ref> [13] </ref>. Our combinational logic synthesis method can be applied directly to the synthesis of hazard-free logic for asynchronous state machines that operate under the fundamental mode assumption [21, 28]. Further, it can be generalized to the extended burst-mode state machine case [29]. <p> Therefore, by Theorem 5.1 C f is dynamic hazard-free for T i . 2 6 Replacement Strategies and Resynthesis 6.1 Replacement Circuits It is worthwhile to replace the multiplexors with primitive gates so non-hazard-increasing logic transformations (e.g., <ref> [13] </ref>) can be applied on the network to further reduce the area or improve the performance. Each mux-element f = a f a + a f a in the synthesized circuit C will have the following conditions at its inputs by Theorem 5.1. 1.
Reference: [14] <author> L. Lavagno, K. Keutzer, and A. Sangiovanni-Vincentelli. </author> <title> Algorithms for synthesis of hazard-free asynchronous circuits. </title> <booktitle> In DAC-91. </booktitle>
Reference: [15] <author> Alain J. Martin. </author> <title> Compiling communicating processes into delay-insensitive VLSI circuits. </title> <journal> Distributed Computing, </journal> <volume> 1 </volume> <pages> 226-234, </pages> <year> 1986. </year>
Reference: [16] <author> E.J. McCluskey. </author> <title> Introduction to the Theory of Switching Circuits. </title> <publisher> McGraw-Hill, </publisher> <year> 1965. </year>
Reference-contexts: We also assume a pure delay (PD) model, which means we do not assume the presence of slow inertial delays to insure correctness. The two-level minimization version of the problem has been addressed by a number of researchers in the past <ref> [25, 16, 10, 5, 3, 4, 11] </ref>. More recently, Nowick [22] has developed an exact two-level minimizer that combines a number of previous ideas on this problem.
Reference: [17] <author> Teresa H.-Y. Meng, Robert W. Brodersen, and David G. Messerschmitt. </author> <title> Automatic synthesis of asynchronous circuits from high-level specifications. </title> <journal> IEEE Transactions on CAD, </journal> <volume> 8(11) </volume> <pages> 1185-1205, </pages> <month> November </month> <year> 1989. </year> <month> 28 </month>
Reference: [18] <author> C.W. Moon, P.R. Stephan, and R.K. Brayton. </author> <title> Synthesis of hazard-free asynchronous circuits from graphical specifications. </title> <booktitle> In ICCAD-1991. </booktitle>
Reference: [19] <author> C. Myers and T. Meng. </author> <title> Synthesis of timed asynchronous circuits. </title> <booktitle> In ICCD-1992. </booktitle>
Reference: [20] <author> S. Nowick, </author> <year> 1993. </year> <title> Private communication. </title>
Reference-contexts: In this case, we can make use of free BDD's. This discussion will be deferred to Section 5.5. We now illustrate the ideas with an example. 5.4 An Example To illustrate the ideas, we have an example from Nowick <ref> [20] </ref> that was used to illustrate his two-level minimizer. The Karnaugh map of the example is shown in Figure 6. For this example, this is a set of four specified input transitions T = ft 1 ; t 2 ; t 3 ; t 4 g.
Reference: [21] <author> S.M. Nowick and D.L. Dill. </author> <title> Automatic synthesis of locally-clocked asynchronous state machines. </title> <booktitle> In ICCAD-1991. </booktitle>
Reference-contexts: This is a general combinational synthesis problem which arises in many asynchronous sequential applications. For example, the problem arises in the current synthesis trajectories for asynchronous finite state machines <ref> [21, 28] </ref>. In this work, we assume that gates and wires can have arbitrary delays, which means we do not require bounded delay assumptions for correct operation or the use of delay elements to fix or filter out glitches. <p> Our combinational logic synthesis method can be applied directly to the synthesis of hazard-free logic for asynchronous state machines that operate under the fundamental mode assumption <ref> [21, 28] </ref>. Further, it can be generalized to the extended burst-mode state machine case [29]. We have automated our method and have applied it to a number of examples.
Reference: [22] <author> S.M. Nowick and D.L. Dill. </author> <title> Exact two-level minimization of hazard-free logic with multiple-input changes. </title> <booktitle> In ICCAD-1992. </booktitle>
Reference-contexts: The two-level minimization version of the problem has been addressed by a number of researchers in the past [25, 16, 10, 5, 3, 4, 11]. More recently, Nowick <ref> [22] </ref> has developed an exact two-level minimizer that combines a number of previous ideas on this problem. <p> Specifically, the transition cube t5 = 11 1 intersects the transition cube of t4 = [0111; 1011], but it does not contain the start state 0111, which is a dynamic hazard violation. See <ref> [11, 4, 22] </ref> for more details. <p> The software has been implemented using the BDD package in SIS [23]. We present a set of results using benchmarks from the asynchronous design benchmark set. The results in Table 1 correspond to a direct comparison with the two-level hazard-free synthesis procedure of <ref> [22] </ref>. Hazard-free two-level and BDD-based circuits were synthesized using the specified set of static and dynamic transitions for the benchmark examples given in [22]. For the BDD-based circuits, a hazard-free mux-element requiring four literals was assumed. <p> The results in Table 1 correspond to a direct comparison with the two-level hazard-free synthesis procedure of <ref> [22] </ref>. Hazard-free two-level and BDD-based circuits were synthesized using the specified set of static and dynamic transitions for the benchmark examples given in [22]. For the BDD-based circuits, a hazard-free mux-element requiring four literals was assumed. The two-level circuits contain some very large fanin gates, however, we have reported the literal counts prior to decomposition (which would increase literal count).
Reference: [23] <author> E. M. Sentovich, K. J. Singh, C. Moon, H. Savoj, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Sequential Circuit Design Using Synthesis and Optimization. </title> <booktitle> In Proceedings of the Int'l Conference on Computer Design: VLSI in Computers and Processors, </booktitle> <pages> pages 328-333, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: The software has been implemented using the BDD package in SIS <ref> [23] </ref>. We present a set of results using benchmarks from the asynchronous design benchmark set. The results in Table 1 correspond to a direct comparison with the two-level hazard-free synthesis procedure of [22].
Reference: [24] <author> H. J. Touati, H. Savoj, B. Lin, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Implicit state enumeration of finite state machines using BDD's. </title> <booktitle> In ICCAD-90, </booktitle> <pages> pages 130-133, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: The other don't care minterms can be used for optimization, for example using techniques described in <ref> [9, 24] </ref> (cf. the restrict and the generalized cofactor operators). So for all practical purposes, we only need to consider completely specified functions. Once this preprocessing step is performed, the synthesis procedure is as follows: 1. Construct a BDD G for the Boolean function f .
Reference: [25] <author> S.H. Unger. </author> <title> Asynchronous Sequential Switching Circuits. </title> <address> New York: </address> <publisher> Wiley-Interscience, </publisher> <year> 1969. </year>
Reference-contexts: We also assume a pure delay (PD) model, which means we do not assume the presence of slow inertial delays to insure correctness. The two-level minimization version of the problem has been addressed by a number of researchers in the past <ref> [25, 16, 10, 5, 3, 4, 11] </ref>. More recently, Nowick [22] has developed an exact two-level minimizer that combines a number of previous ideas on this problem.
Reference: [26] <author> P. Vanbekbergen, B. Lin, G. Goossens, and H. De Man. </author> <title> A generalized state assignment theory for transformations on signal transition graphs. </title> <booktitle> In ICCAD-1992. </booktitle>
Reference: [27] <author> M.L. Yu and P.A. Subrahmanyam. </author> <title> A path-oriented approach for reducing hazards in asynchronous designs. </title> <booktitle> In DAC-1992. </booktitle>
Reference: [28] <author> K. Y. Yun and D. L. Dill. </author> <title> Unifying Asynchronous/Synchronous State Machine Synthesis. </title> <booktitle> In ICCAD-93, </booktitle> <pages> pages 255-260, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: This is a general combinational synthesis problem which arises in many asynchronous sequential applications. For example, the problem arises in the current synthesis trajectories for asynchronous finite state machines <ref> [21, 28] </ref>. In this work, we assume that gates and wires can have arbitrary delays, which means we do not require bounded delay assumptions for correct operation or the use of delay elements to fix or filter out glitches. <p> Our combinational logic synthesis method can be applied directly to the synthesis of hazard-free logic for asynchronous state machines that operate under the fundamental mode assumption <ref> [21, 28] </ref>. Further, it can be generalized to the extended burst-mode state machine case [29]. We have automated our method and have applied it to a number of examples.

References-found: 28

