URL: http://www.cs.washington.edu/homes/amir/phd/paper.ps.gz
Refering-URL: http://www.cs.washington.edu/homes/amir/CodeWeb/
Root-URL: http://www.cs.washington.edu
Email: famir,notking@cs.washington.edu  
Title: Learning to Use a Software Library through User-Selected Examples  
Author: Amir Michail and David Notkin 
Keyword: Software libraries, software reuse, learning by example.  
Address: Box 352350 Seattle, WA 98195-2350, USA  
Affiliation: Dept. of Computer Science and Engineering University of Washington,  
Abstract: Once a software library has been selected for a project, there is still the substantial problem of training developers to use it. This process is complicated by the fact that using a software library often requires some understanding of its fundamental components, their relationships, and various interactions between them. This is particularly true with frameworks which tend to impose a structure on the application. In this paper, we present a tool-based approach that demonstrates reuse of the software library through user-selected example applications. In this way, a developer can learn about fundamental library components and their relationships. An important aspect of our approach is that it requires no extra effort on the part of the library developer and can be used with any existing software library. Our approach facilitates learning to use a library by: (1) guiding the developer towards important components of general utility; (2) guiding the developer towards components particularly useful for a specific class of applications; and (3) providing access to the relevant source code in each example for further inspection. Our approach is supported by CodeWeb, a reuse tool we have built for C, C++, and Java libraries. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. J. Biggerstaff. </author> <title> Design recovery for maintenance and reuse. </title> <booktitle> Computer, </booktitle> <address> 22(7):3649, </address> <year> 1989. </year>
Reference-contexts: Although these tools may help a developer find individual components of interest, they do not show how these components can be used in combination. There are also tools that help a developer examine a software library in terms of architecture, style, etc. <ref> [1, 6, 13] </ref>. This may be helpful in understanding the design of the library which would facilitate reuse particularly with frameworks. However, such tools require a bottom-up approach to understanding the essential components, their relationships, and collaborations.
Reference: [2] <author> G. Fischer, S. Henninger, and D. Redmiles. </author> <title> Intertwining query construction and relevance evaluation. </title> <booktitle> In CHI '91, </booktitle> <pages> pages 5562, </pages> <year> 1991. </year>
Reference-contexts: Finally, these methods simply generate skeleton code; they do not present the user with examples on how to fill in and extend this skeleton code. While there has been other research on the use of examples to illustrate software library reuse <ref> [2, 9] </ref>, the work most closely related with our own, as far as we know, is that on exemplars [5]. Specifically, an exemplar is an executable visual model consisting of one or more instances of at least one concrete class for each abstract class in a library.
Reference: [3] <author> W. B. Frakes and B. A. Nejmeh. </author> <title> Software reuse through information retrieval. </title> <booktitle> In 20th Hawaii International Conference on System Sciences, </booktitle> <pages> pages 530535. </pages> <publisher> IEEE, </publisher> <year> 1987. </year>
Reference-contexts: For example, component retrieval tools are concerned with finding components that fit a particular need. Such work includes tools that use free-text indexing <ref> [3] </ref>, facets [11], and specification matching [8]. Although these tools may help a developer find individual components of interest, they do not show how these components can be used in combination.
Reference: [4] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: By looking at the type of the first parameter, we infer membership relationships between functions and the structures that they operate upon. 2.2.2 Inheritance and Composition The two most common techniques for reuse in software libraries are class inheritance and composition <ref> [4, p. 18] </ref>. When using inheritance, a class A inherits from some class B. When using composition, a class A has B as one of its member variables. However, not all member variables indicate composition. Some only express acquaintance relationships with other classes in the system.
Reference: [5] <author> D. Gangopadhyay and S. Mitra. </author> <title> Design by framework completion. </title> <booktitle> Automated Software Engineering, </booktitle> <address> 3:219237, </address> <year> 1996. </year>
Reference-contexts: As we shall see, some are specifically designed for this purpose, while others are more general in nature. Moreover, as discussed elsewhere <ref> [5] </ref>, such tools can be categorized as bottom-up or top-down. We follow this distinction in the following presentation of related work. 5.1 Bottom-up Approaches Bottom-up approaches require that the user select and assemble architecturally compatible sets of components from a software library. <p> However, such tools require a bottom-up approach to understanding the essential components, their relationships, and collaborations. These bottom-up approaches to learning to use a software library are akin to solving a Jigsaw puzzle <ref> [5] </ref>. It is not clear which components fit together and how. 5.2 Top-down Approaches Top-down approaches start out with a subset of the software library that is particularly fundamental and typically reused in most applications. <p> While there has been other research on the use of examples to illustrate software library reuse [2, 9], the work most closely related with our own, as far as we know, is that on exemplars <ref> [5] </ref>. Specifically, an exemplar is an executable visual model consisting of one or more instances of at least one concrete class for each abstract class in a library.
Reference: [6] <author> R. Kazman and S. J. Carriere. </author> <title> View extraction and view fusion in architectural understanding. </title> <booktitle> In 5th International Conference on Software Reuse. IEEE, </booktitle> <year> 1998. </year>
Reference-contexts: Although these tools may help a developer find individual components of interest, they do not show how these components can be used in combination. There are also tools that help a developer examine a software library in terms of architecture, style, etc. <ref> [1, 6, 13] </ref>. This may be helpful in understanding the design of the library which would facilitate reuse particularly with frameworks. However, such tools require a bottom-up approach to understanding the essential components, their relationships, and collaborations.
Reference: [7] <author> A. Michail and D. Notkin. </author> <title> Assessing software libraries by browsing similar classes, functions and relationships. </title> <booktitle> In Proceedings of the International Conference on Software Engineering, </booktitle> <year> 1999. </year>
Reference-contexts: Finally, it is possible to match components across software systems in completely different ways than those described in this paper. For example, we elsewhere describe a way to help developers select a library from among several candidates <ref> [7] </ref>. This is done by matching similar components across the libraries in question. By browsing the similar components and their relationships, one can quickly compare and contrast the libraries. It would be of interest to consider other ways to match components across different software systems for reuse related activities.
Reference: [8] <author> A. Moormann-Zaremski and J. M. Wing. </author> <title> Specification matching of software components. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 6(4):333369, </volume> <year> 1997. </year>
Reference-contexts: For example, component retrieval tools are concerned with finding components that fit a particular need. Such work includes tools that use free-text indexing [3], facets [11], and specification matching <ref> [8] </ref>. Although these tools may help a developer find individual components of interest, they do not show how these components can be used in combination. There are also tools that help a developer examine a software library in terms of architecture, style, etc. [1, 6, 13].
Reference: [9] <author> L. R. Neal. </author> <title> A system for example-based programming. </title> <booktitle> In CHI '89, </booktitle> <pages> pages 6368, </pages> <year> 1989. </year>
Reference-contexts: Finally, these methods simply generate skeleton code; they do not present the user with examples on how to fill in and extend this skeleton code. While there has been other research on the use of examples to illustrate software library reuse <ref> [2, 9] </ref>, the work most closely related with our own, as far as we know, is that on exemplars [5]. Specifically, an exemplar is an executable visual model consisting of one or more instances of at least one concrete class for each abstract class in a library.
Reference: [10] <author> W. Pree, G. Pomberger, A. Schappert, and P. Som-merlad. </author> <title> Active Guidance of Framework Development. </title> <booktitle> Software-Concepts and Tools, </booktitle> <address> 16(3):13645, </address> <year> 1995. </year>
Reference-contexts: One can learn from this subset and adapt or extend it to build a new application. For example, active cookbooks <ref> [10] </ref> and Microsoft Wizards guide the developer through common tasks (such as subclassing key classes) where the developer is asked to answer some questions, and skeleton code is generated automatically that reuses key library classes and provides a starting point for development.
Reference: [11] <author> R. Prieto-Diaz and P. Freeman. </author> <title> Classifying software for reusability. </title> <journal> IEEE Software, </journal> <volume> 4(1):616, </volume> <year> 1987. </year>
Reference-contexts: For example, component retrieval tools are concerned with finding components that fit a particular need. Such work includes tools that use free-text indexing [3], facets <ref> [11] </ref>, and specification matching [8]. Although these tools may help a developer find individual components of interest, they do not show how these components can be used in combination. There are also tools that help a developer examine a software library in terms of architecture, style, etc. [1, 6, 13].
Reference: [12] <author> S. Sparks, K. Benner, and C. Faris. </author> <title> Managing object-oriented framework reuse. </title> <booktitle> Computer, </booktitle> <address> 29(9):5261, </address> <year> 1996. </year>
Reference-contexts: Sparks, Benner and Faris give this advice for framework reuse: . . . expect to train every staff member who will use a framework. This often means having individuals attend a one-week course at the vendor site or training large groups at the project site. <ref> [12, p. 54] </ref> A crucial aspect of these techniques is that example programs are used throughout to illustrate how to reuse the library. Indeed, most libraries come with many example programs to get the developer started. Moreover, the selection of the examples is important. <p> Sparks, Benner and Faris say the following about demonstration code: Demonstration code that is provided by the framework builder. . . tends to demonstrate the 1 uses of all the features of the framework, rather than concentrating on how the framework is to be used in an application context. <ref> [12, p. 60] </ref> In this paper, we present a tool-based approach that demonstrates reuse of the software library through user-selected example applications. In this way, a developer can learn about fundamental library components and their relationships.
Reference: [13] <author> A. S. Yeh, D. R. Harris, and M. P. Chase. </author> <title> Manipulating recovered software architecture views. </title> <booktitle> In Proceedings of the International Conference on Software Engineering, </booktitle> <pages> pages 184194, </pages> <year> 1997. </year> <month> 11 </month>
Reference-contexts: Although these tools may help a developer find individual components of interest, they do not show how these components can be used in combination. There are also tools that help a developer examine a software library in terms of architecture, style, etc. <ref> [1, 6, 13] </ref>. This may be helpful in understanding the design of the library which would facilitate reuse particularly with frameworks. However, such tools require a bottom-up approach to understanding the essential components, their relationships, and collaborations.
References-found: 13

