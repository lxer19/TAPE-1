URL: http://www.cs.princeton.edu/~ken/strasbourg.ps
Refering-URL: http://www.cs.princeton.edu/~ken/research.html
Root-URL: http://www.cs.princeton.edu
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> Cappello, P. R., </author> <title> "Towards an FIR Filter Tissue," </title> <booktitle> Proc. ICASSP 85, </booktitle> <pages> pp. 276-279, </pages> <address> Tampa, FL, </address> <month> Mar. </month> <year> 1985. </year>
Reference: [2] <author> U. Frisch, D. d'Humie'res, B. Hasslacher, P. Lallemand, Y. Pomeau, and J. P. Rivet, </author> <title> "Lattice gas hydrodynamics in two and three dimensions," </title> <booktitle> Complex Systems 1 (1987), </booktitle> <pages> pp. 649-707. </pages>
Reference-contexts: We think of a cell's n-bit state vector as a binary occupancy vector, each bit representing the presence or absence of one of n particle types (the same idea is used in lattice gasses; see, for example, <ref> [2] </ref>). The operation of the CA is determined by a rule, called the update rule, which maps states of the cells in the neighborhood of cell i at time t to the state of cell i at time t + 1. we develop arithmetic algorithms.
Reference: [3] <author> H. T. Kung, </author> <title> "Why systolic architectures?" IEEE Comput. </title> <type> 15 1 (Jan. </type> <year> 1982), </year> <pages> pp. 37-46. </pages>
Reference-contexts: 1: Introduction The goal of this paper is to use Particle Machines (PMs) to incorporate the parallelism of systolic arrays <ref> [3] </ref> in hardware that is not application-specific and is easy to fabricate. The PM model, introduced in [8, 6, 7], uses colliding particles to encode computation.
Reference: [4] <author> F. T. Leighton, </author> <title> Introduction to Parallel Algorithms and Architectures, </title> <publisher> Morgan Kauf-man Publishers, </publisher> <address> San Mateo, CA, </address> <year> 1992. </year>
Reference-contexts: This turns out to be a very useful idea for implementing multiply-accumulators for FIR filtering, and feedback for IIR filtering [7]. The idea is used in [10] for implementing division, adapting an algorithm due to Leighton <ref> [4] </ref>. well known systolic array for the same purpose, but of course the structure is "soft" in the sense that it represents only the input stream of the PM which accomplishes the operation. [10].
Reference: [5] <author> N. Margolus, </author> <title> "Physics-like models of computations," </title> <journal> Physica 10D (1984), </journal> <pages> pp. 81-95. </pages>
Reference-contexts: In summary, the particle model gives us a new way to think about parallel computation. The medium that supports the particles need not be a CA <ref> [5] </ref>, and even if it is, the implementation need not be in VLSI. 5 Acknowledgement This work was supported in part by NSF grant MIP-9201484, and a grant from George-town University.
Reference: [6] <author> R. K. Squier and K. Steiglitz, </author> <title> "Subatomic particle machines: parallel processing in bulk material," </title> <note> submitted to Signal Processing Letters. </note>
Reference-contexts: 1: Introduction The goal of this paper is to use Particle Machines (PMs) to incorporate the parallelism of systolic arrays [3] in hardware that is not application-specific and is easy to fabricate. The PM model, introduced in <ref> [8, 6, 7] </ref>, uses colliding particles to encode computation. A PM can be realized in VLSI as a Cellular Automaton (CA), and the resultant chips are locally connected, very regular (being CA), and can be concatenated with a minimum of glue logic. <p> Such a PM can implement all four arithmetic operations in linear time. 3: Linear-time arithmetic We conclude with sketches of linear-time PM implementations of the four basic arithmetic operations. For details, see <ref> [6, 7] </ref>. Note that in all of these implementations, we can consider velocities as relative to an arbitrary frame of reference. We can always change the frame of reference by appropriate changes in the update rules. 2. <p> Four bits of precision are used in the calculation, and a test particle and associated rules are used to detect the termination condition, which is that no change occur in the four most significant bits of the intermediate result. The reader is referred to <ref> [6, 7, 10] </ref> for more detailed descriptions and a discussion of nested operations and digital filtering. 4: Discussion In a way, a PM is a programmable parallel computer without an instruction set | a NISC (No Instruction Set Computer).
Reference: [7] <author> R. K. Squier and K. Steiglitz, </author> <title> "Programmable Parallel Arithmetic in Cellular Automata using a Particle Model," </title> <type> Tech. </type> <institution> Rept. CS-TR-478-94, Computer Science Dept., Princeton Univ., </institution> <month> Dec. </month> <year> 1994. </year> <note> To appear in Complex Systems. </note>
Reference-contexts: 1: Introduction The goal of this paper is to use Particle Machines (PMs) to incorporate the parallelism of systolic arrays [3] in hardware that is not application-specific and is easy to fabricate. The PM model, introduced in <ref> [8, 6, 7] </ref>, uses colliding particles to encode computation. A PM can be realized in VLSI as a Cellular Automaton (CA), and the resultant chips are locally connected, very regular (being CA), and can be concatenated with a minimum of glue logic. <p> An interesting consequence of this flexibility is that the precision of fixed-point arithmetic is completely arbitrary and determined at run time by the user. Variable precision arithmetic is exploited in a linear-time, arbitrary-precision division algorithm described in [10] and illustrated in Section 3. The recent paper <ref> [7] </ref> shows that FIR filtering of a continuous input stream, and arbitrarily nested combinations of fixed-point addition, subtraction, and multiplication, can all be performed in one fixed CA-based PM in time linear in the number of input bits, all with arbitrary precision. <p> Such a PM can implement all four arithmetic operations in linear time. 3: Linear-time arithmetic We conclude with sketches of linear-time PM implementations of the four basic arithmetic operations. For details, see <ref> [6, 7] </ref>. Note that in all of these implementations, we can consider velocities as relative to an arbitrary frame of reference. We can always change the frame of reference by appropriate changes in the update rules. 2. <p> This turns out to be a very useful idea for implementing multiply-accumulators for FIR filtering, and feedback for IIR filtering <ref> [7] </ref>. The idea is used in [10] for implementing division, adapting an algorithm due to Leighton [4]. well known systolic array for the same purpose, but of course the structure is "soft" in the sense that it represents only the input stream of the PM which accomplishes the operation. [10]. <p> Four bits of precision are used in the calculation, and a test particle and associated rules are used to detect the termination condition, which is that no change occur in the four most significant bits of the intermediate result. The reader is referred to <ref> [6, 7, 10] </ref> for more detailed descriptions and a discussion of nested operations and digital filtering. 4: Discussion In a way, a PM is a programmable parallel computer without an instruction set | a NISC (No Instruction Set Computer).
Reference: [8] <author> K. Steiglitz, I. Kamal, and A. Watson, </author> <title> "Embedding computation in one-dimensional automata by phase coding solitons," </title> <journal> IEEE Trans. on Computers 37 2 (1988), </journal> <pages> pp. 138-145. </pages>
Reference-contexts: 1: Introduction The goal of this paper is to use Particle Machines (PMs) to incorporate the parallelism of systolic arrays [3] in hardware that is not application-specific and is easy to fabricate. The PM model, introduced in <ref> [8, 6, 7] </ref>, uses colliding particles to encode computation. A PM can be realized in VLSI as a Cellular Automaton (CA), and the resultant chips are locally connected, very regular (being CA), and can be concatenated with a minimum of glue logic.
Reference: [9] <author> N. Weste and K. Eshraghian, </author> <title> Principles of CMOS VLSI Design, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1985. </year>
Reference: [10] <author> R. K. Squier, K. Steiglitz, and M. H. Jakubowski, </author> <title> "General Parallel Computation without CPUs: VLSI Realization of a Particle Machine," </title> <type> Tech. </type> <institution> Rept. CS-TR-484-95, Dept. of Computer Science, Princeton University, </institution> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: An interesting consequence of this flexibility is that the precision of fixed-point arithmetic is completely arbitrary and determined at run time by the user. Variable precision arithmetic is exploited in a linear-time, arbitrary-precision division algorithm described in <ref> [10] </ref> and illustrated in Section 3. <p> The PM model is Turing equivalent, so the general question of compatibility is undecidable. However, if the set of inputs is sufficiently constrained, as is usually the case, the constraints can be used to test compatibility in time polynomial in the number of particles and rules. See <ref> [10] </ref> for a proof of undecidability and a discussion of a practical solution to the problem. We define the PM model in the next section. <p> In <ref> [10] </ref> we estimate that 300 cells of a CA implementing a PM with 100 rules and 36 particles will fit on a cm 2 100 MHz CMOS chip. <p> This turns out to be a very useful idea for implementing multiply-accumulators for FIR filtering, and feedback for IIR filtering [7]. The idea is used in <ref> [10] </ref> for implementing division, adapting an algorithm due to Leighton [4]. well known systolic array for the same purpose, but of course the structure is "soft" in the sense that it represents only the input stream of the PM which accomplishes the operation. [10]. <p> The idea is used in <ref> [10] </ref> for implementing division, adapting an algorithm due to Leighton [4]. well known systolic array for the same purpose, but of course the structure is "soft" in the sense that it represents only the input stream of the PM which accomplishes the operation. [10]. The simulated PM uses 38 types of particles and 112 rules, and is capable of realizing all the applications mentioned in this paper, including FIR and IIR filtering. Finally, Fig. 7 shows a completely different algorithm implemented on exactly the same machine. <p> Four bits of precision are used in the calculation, and a test particle and associated rules are used to detect the termination condition, which is that no change occur in the four most significant bits of the intermediate result. The reader is referred to <ref> [6, 7, 10] </ref> for more detailed descriptions and a discussion of nested operations and digital filtering. 4: Discussion In a way, a PM is a programmable parallel computer without an instruction set | a NISC (No Instruction Set Computer).
References-found: 10

