URL: http://www.cs.ucsd.edu/users/pasquale/Papers/virtclock94.ps
Refering-URL: http://www.cs.ucsd.edu/users/pasquale/Pub.html
Root-URL: http://www.cs.ucsd.edu
Email: norival, pasquale-@cs.ucsd.edu  
Title: Page 1 An Upper Bound on Delay for the VirtualClock Service Discipline  
Author: Norival R. Figueira and Joseph Pasquale 
Address: La Jolla, CA 92093-0114  
Affiliation: Computer Systems Laboratory Department of Computer Science and Engineering University of California, San Diego  
Abstract: We prove that a connection composed of VirtualClock servers provides an upper bound on delay for leaky bucket constrained sessions, i.e. sessions conforming to a token bucket fi lter. This upper bound on delay is calculated, and it is the same upper bound on delay given by PGPS. We also prove that leaky bucket constrained sessions are the only type of sessions for which an upper bound on delay can be provided by servers with an upper bound on link capacity. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Clark, S. Shenker, and L. Zhang, </author> <title> Supporting Real-Time Applications in an Integrated Services Packet Network: Architecture and Mechanism, </title> <booktitle> In Proceedings of ACM SIGCOMM 1992, </booktitle> <pages> pp. 14-26. </pages>
Reference-contexts: New tokens are continuously filling up the bucket with rate All tokens exceeding the maximum bucket capacity are discarded. A sessions traffic conforms to a token bucket filter ( r s , w 0 ) (here we adopt the notation used in <ref> [ 1] </ref>, and identify the session with the subscript ) if, for every generated packet, tokens are removed from the bucket, where is the length of the packet, and the bucket size is never negative (i.e. there are always enough tokens to be removed when a packet is generated).
Reference: [2] <author> R. L. Cruz, </author> <title> A Calculus for Network Delay, Part I: Network Elements in Isolation, </title> <journal> In IEEE Transactions on Information Theory, </journal> <volume> Vol. 37, No. 1, </volume> <pages> pp. 114-131, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: This shows that the delay bound in Stop-and-Go can be much larger than the delay bound in the VirtualClock scheme. The reader is referred to [ 16] which compares the delay distribution seen by sessions under FCFS multiplexing with the delay bound computed with Cruzs method <ref> [ 2, 3] </ref>, the delay bound using Stop-and-Go, and the delay bound using PGPS (presented later in this section). Hierarchical Round Robin (HRR) [ 10] also uses a framing strategy and is a nonwork-conserving service discipline.
Reference: [3] <author> R. L. Cruz, </author> <title> A Calculus for Network Delay, Part II: Network Analysis, </title> <journal> In IEEE Transactions on Information Theory, </journal> <volume> Vol. 37, No. 1, </volume> <pages> pp. 132-141, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: This shows that the delay bound in Stop-and-Go can be much larger than the delay bound in the VirtualClock scheme. The reader is referred to [ 16] which compares the delay distribution seen by sessions under FCFS multiplexing with the delay bound computed with Cruzs method <ref> [ 2, 3] </ref>, the delay bound using Stop-and-Go, and the delay bound using PGPS (presented later in this section). Hierarchical Round Robin (HRR) [ 10] also uses a framing strategy and is a nonwork-conserving service discipline.
Reference: [4] <author> A. Demers, S. Keshav, and S. Shenker, </author> <title> Analysis and Simulation of a Fair Queueing Algorithm, </title> <booktitle> In Proceedings of ACM SIGCOMM 1989, </booktitle> <pages> pp. 1-12. </pages>
Reference-contexts: This is the same upper bound on delay given by PGPS [ 11, 12, 13, 14]. PGPS is Parekh and Gallagers method for computing delay bounds under Weighted Fair Queueing <ref> [4] </ref>. We also prove that leaky bucket constrained sessions are the only type of sessions for which an upper bound on delay can be provided by servers with finite link capacity. The remainder of this paper is structured as follows. <p> This result is the same as that found using PGPS [11, 12, 13, 14] (see (4.36) in [ 11], or (23) in [ 13]). PGPS is Parekh and Gallager s method for computing delay bounds under Weighted Fair Queueing <ref> [4] </ref> when sessions conform to a token bucket filter. <p> In the VirtualClock scheme, bandwidth may be reserved at the average rate, although a session may need to reserve more bandwidth than its average rate in order to reduce the end-to-end delay, due to the coupling between delay bound and bandwidth allocation. Weighted Fair Queueing (WFQ) is proposed in <ref> [4] </ref> and is a service discipline that tries to emulate the service pro vided by a bit-by-bit round robin server. <p> This is the same upper bound on delay given by PGPS [11, 12, 13, 14], i.e. Parekhs and Gallagers method for computing delay bounds under Weighted Fair Queueing <ref> [4] </ref>. We also proved that leaky bucket constrained sessions are the only type of sessions for which an upper bound on delay can be provided by servers with fi nite link capacity.
Reference: [5] <author> D. Ferrari and D. Verma, </author> <title> A Scheme for Real-Time Channel Establishment in Wide-Area Networks, </title> <journal> In IEEE JSAC, </journal> <volume> Vol. 8, No. 4, </volume> <pages> pp. 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: This guaranteed data rate generally requires some admission control mechanism to allocate the finite link capacity of the servers. Several rate-based service disciplines have been proposed: DelayEDD <ref> [ 5] </ref>, JitterEDD [15], RCSP [17], PGPS [11, 12, 13, 14], Stop-and-Go [6, 7, 8], Hierarchical Round Robin [10], and VirtualClock [20]. Among them, Zhangs VirtualClock in [20] is the only work that does not present an upper bound on end-to-end delay. <p> It of fers the same upper bound on delay as Stop-and-Go, but does not guarantee a lower bound on delay . The same arguments in the discussion of Stop-and-Go also apply. In DelayEDD <ref> [ 5] </ref>, and its extension Jitter -EDD [15] (EDD stands for earliest-due-date), packets are assigned deadlines and transmitted in order of increasing deadline. <p> Page 19 reserved bandwidth of its session as in the VirtualClock scheme (see (6) and (7)). This leads to a schedulability test at connection establishment time <ref> [5] </ref> to avoid scheduling saturation, which can now occur even if bandwidth is not over-booked [5, 19]. The schedulability test is then a compromise on the looser coupling between reserved rate and delay bound. <p> Page 19 reserved bandwidth of its session as in the VirtualClock scheme (see (6) and (7)). This leads to a schedulability test at connection establishment time [5] to avoid scheduling saturation, which can now occur even if bandwidth is not over-booked <ref> [5, 19] </ref>. The schedulability test is then a compromise on the looser coupling between reserved rate and delay bound.
Reference: [6] <author> S. J. Golestani, </author> <title> A Stop-and-Go Queueing Framework for Congestion Management, </title> <booktitle> In Proceedings of ACM SIGCOMM 1990, </booktitle> <pages> pp. 8-18. </pages>
Reference-contexts: This guaranteed data rate generally requires some admission control mechanism to allocate the finite link capacity of the servers. Several rate-based service disciplines have been proposed: DelayEDD [ 5], JitterEDD [15], RCSP [17], PGPS [11, 12, 13, 14], Stop-and-Go <ref> [6, 7, 8] </ref>, Hierarchical Round Robin [10], and VirtualClock [20]. Among them, Zhangs VirtualClock in [20] is the only work that does not present an upper bound on end-to-end delay.
Reference: [7] <author> S. J. Golestani, </author> <title> Congestion-Free Transmission of Real-Time Traffic in Packet Networks, </title> <booktitle> In Proceedings of IEEE INFOCOM 1990, </booktitle> <pages> pp. 527-536. </pages>
Reference-contexts: This guaranteed data rate generally requires some admission control mechanism to allocate the finite link capacity of the servers. Several rate-based service disciplines have been proposed: DelayEDD [ 5], JitterEDD [15], RCSP [17], PGPS [11, 12, 13, 14], Stop-and-Go <ref> [6, 7, 8] </ref>, Hierarchical Round Robin [10], and VirtualClock [20]. Among them, Zhangs VirtualClock in [20] is the only work that does not present an upper bound on end-to-end delay.
Reference: [8] <author> S. J. Golestani, </author> <title> Duration-Limited Statistical Multiplexing of DelaySensitive Traffic in Packet Networks, </title> <booktitle> In Proceedings of IEEE INFOCOM 1991, </booktitle> <pages> pp. 323-332. </pages>
Reference-contexts: This guaranteed data rate generally requires some admission control mechanism to allocate the finite link capacity of the servers. Several rate-based service disciplines have been proposed: DelayEDD [ 5], JitterEDD [15], RCSP [17], PGPS [11, 12, 13, 14], Stop-and-Go <ref> [6, 7, 8] </ref>, Hierarchical Round Robin [10], and VirtualClock [20]. Among them, Zhangs VirtualClock in [20] is the only work that does not present an upper bound on end-to-end delay.
Reference: [9] <author> S. J. Golestani, </author> <title> A Self-Clocked Fair Queueing Scheme for Broadband Applications, </title> <booktitle> In Proceedings of IEEE INFOCOM 1994, </booktitle> <pages> pp. 636-646. </pages>
Reference-contexts: However , the VirtualClock service discipline does not conform to the notion of fairness attributed to PGPS. PGPS is called a fair queueing scheme because it closely emulates the service provided by a bit-by-bit round robin server . The reader is referred to <ref> [ 9] </ref> for a relevant work on Page 20 fair queueing systems. 5 Conclusions We proved that the VirtualClock service discipline provides an upper bound on delay for leaky bucket constrained sessions. This is the same upper bound on delay given by PGPS [11, 12, 13, 14], i.e.
Reference: [10] <author> C. Kalmanek, H. Kanakia, and S. Keshav, </author> <title> Rate Controlled Servers for Very HighSpeed Networks, </title> <booktitle> In Proceedings of IEEE GlobeCom 1990, </booktitle> <pages> pp. </pages> <month> 300.3.1-300.3.9. </month>
Reference-contexts: This guaranteed data rate generally requires some admission control mechanism to allocate the finite link capacity of the servers. Several rate-based service disciplines have been proposed: DelayEDD [ 5], JitterEDD [15], RCSP [17], PGPS [11, 12, 13, 14], Stop-and-Go [6, 7, 8], Hierarchical Round Robin <ref> [10] </ref>, and VirtualClock [20]. Among them, Zhangs VirtualClock in [20] is the only work that does not present an upper bound on end-to-end delay. Because of this, Vir tualClock has been classified as a service discipline that does not provide an upper bound on delay [19]. <p> The reader is referred to [ 16] which compares the delay distribution seen by sessions under FCFS multiplexing with the delay bound computed with Cruzs method [ 2, 3], the delay bound using Stop-and-Go, and the delay bound using PGPS (presented later in this section). Hierarchical Round Robin (HRR) <ref> [ 10] </ref> also uses a framing strategy and is a nonwork-conserving service discipline. It of fers the same upper bound on delay as Stop-and-Go, but does not guarantee a lower bound on delay . The same arguments in the discussion of Stop-and-Go also apply.
Reference: [11] <author> A. K. Parekh, </author> <title> A Generalized Processor Sharing Approach to Flow Control in Integrated Services Networks, </title> <type> Ph.D. thesis, </type> <institution> Massachusetts Institute of Technology, LIDS-TH-2089, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: This guaranteed data rate generally requires some admission control mechanism to allocate the finite link capacity of the servers. Several rate-based service disciplines have been proposed: DelayEDD [ 5], JitterEDD [15], RCSP [17], PGPS <ref> [11, 12, 13, 14] </ref>, Stop-and-Go [6, 7, 8], Hierarchical Round Robin [10], and VirtualClock [20]. Among them, Zhangs VirtualClock in [20] is the only work that does not present an upper bound on end-to-end delay. <p> For leaky bucket constrained sessions, i.e. sessions conforming to a token bucket fi lter, an upper bound on delay is calculated. This is the same upper bound on delay given by PGPS <ref> [ 11, 12, 13, 14] </ref>. PGPS is Parekh and Gallagers method for computing delay bounds under Weighted Fair Queueing [4]. We also prove that leaky bucket constrained sessions are the only type of sessions for which an upper bound on delay can be provided by servers with finite link capacity. <p> VirtualClock and Leaky Bucket Constrained Sessions An upper bound on delay for a session conforming to a token bucket filter ( . This is a direct consequence of (22) and the result of Lemma 2. This result is the same as that found using PGPS <ref> [11, 12, 13, 14] </ref> (see (4.36) in [ 11], or (23) in [ 13]). PGPS is Parekh and Gallager s method for computing delay bounds under Weighted Fair Queueing [4] when sessions conform to a token bucket filter. <p> This is a direct consequence of (22) and the result of Lemma 2. This result is the same as that found using PGPS [11, 12, 13, 14] (see (4.36) in <ref> [ 11] </ref>, or (23) in [ 13]). PGPS is Parekh and Gallager s method for computing delay bounds under Weighted Fair Queueing [4] when sessions conform to a token bucket filter. <p> Weighted Fair Queueing (WFQ) is proposed in [4] and is a service discipline that tries to emulate the service pro vided by a bit-by-bit round robin server. Each packet is stamped with the finishing round number (or virtual time fin ishing time , as called by Parekh in <ref> [ 11] </ref>) at which the packet would have fi nished transmission, had the server been doing a bit-by-bit round robin. Packets are served in increasing order of fi nishing round number. <p> Packets are served in increasing order of fi nishing round number. Packet-by-Packet Generalized Processor Sharing (PGPS) is the name given in <ref> [11, 12, 13, 14] </ref> to a method for computing delay bounds under WFQ when sessions conform to a token bucket fi lter. <p> The reader is referred to [ 9] for a relevant work on Page 20 fair queueing systems. 5 Conclusions We proved that the VirtualClock service discipline provides an upper bound on delay for leaky bucket constrained sessions. This is the same upper bound on delay given by PGPS <ref> [11, 12, 13, 14] </ref>, i.e. Parekhs and Gallagers method for computing delay bounds under Weighted Fair Queueing [4]. We also proved that leaky bucket constrained sessions are the only type of sessions for which an upper bound on delay can be provided by servers with fi nite link capacity.
Reference: [12] <author> A. K. Parekh, and G. Gallager, </author> <title> A Generalized Processor Sharing Approach to Flow Control in Integrated Services Networks - The Single Node Case, </title> <booktitle> In Proceedings of IEEE INFOCOM 1992, </booktitle> <volume> Vol. 2, </volume> <pages> pp. 915-924. </pages>
Reference-contexts: This guaranteed data rate generally requires some admission control mechanism to allocate the finite link capacity of the servers. Several rate-based service disciplines have been proposed: DelayEDD [ 5], JitterEDD [15], RCSP [17], PGPS <ref> [11, 12, 13, 14] </ref>, Stop-and-Go [6, 7, 8], Hierarchical Round Robin [10], and VirtualClock [20]. Among them, Zhangs VirtualClock in [20] is the only work that does not present an upper bound on end-to-end delay. <p> For leaky bucket constrained sessions, i.e. sessions conforming to a token bucket fi lter, an upper bound on delay is calculated. This is the same upper bound on delay given by PGPS <ref> [ 11, 12, 13, 14] </ref>. PGPS is Parekh and Gallagers method for computing delay bounds under Weighted Fair Queueing [4]. We also prove that leaky bucket constrained sessions are the only type of sessions for which an upper bound on delay can be provided by servers with finite link capacity. <p> VirtualClock and Leaky Bucket Constrained Sessions An upper bound on delay for a session conforming to a token bucket filter ( . This is a direct consequence of (22) and the result of Lemma 2. This result is the same as that found using PGPS <ref> [11, 12, 13, 14] </ref> (see (4.36) in [ 11], or (23) in [ 13]). PGPS is Parekh and Gallager s method for computing delay bounds under Weighted Fair Queueing [4] when sessions conform to a token bucket filter. <p> Packets are served in increasing order of fi nishing round number. Packet-by-Packet Generalized Processor Sharing (PGPS) is the name given in <ref> [11, 12, 13, 14] </ref> to a method for computing delay bounds under WFQ when sessions conform to a token bucket fi lter. <p> The reader is referred to [ 9] for a relevant work on Page 20 fair queueing systems. 5 Conclusions We proved that the VirtualClock service discipline provides an upper bound on delay for leaky bucket constrained sessions. This is the same upper bound on delay given by PGPS <ref> [11, 12, 13, 14] </ref>, i.e. Parekhs and Gallagers method for computing delay bounds under Weighted Fair Queueing [4]. We also proved that leaky bucket constrained sessions are the only type of sessions for which an upper bound on delay can be provided by servers with fi nite link capacity.
Reference: [13] <author> A. K. Parekh, and G. Gallager, </author> <title> A Generalized Processor Sharing Approach to Flow Control in Integrated Services Networks - The Multiple Node Case, </title> <booktitle> In Proceedings of IEEE INFOCOM 1993, </booktitle> <volume> Vol. 2, </volume> <pages> pp. 521-530. </pages>
Reference-contexts: This guaranteed data rate generally requires some admission control mechanism to allocate the finite link capacity of the servers. Several rate-based service disciplines have been proposed: DelayEDD [ 5], JitterEDD [15], RCSP [17], PGPS <ref> [11, 12, 13, 14] </ref>, Stop-and-Go [6, 7, 8], Hierarchical Round Robin [10], and VirtualClock [20]. Among them, Zhangs VirtualClock in [20] is the only work that does not present an upper bound on end-to-end delay. <p> For leaky bucket constrained sessions, i.e. sessions conforming to a token bucket fi lter, an upper bound on delay is calculated. This is the same upper bound on delay given by PGPS <ref> [ 11, 12, 13, 14] </ref>. PGPS is Parekh and Gallagers method for computing delay bounds under Weighted Fair Queueing [4]. We also prove that leaky bucket constrained sessions are the only type of sessions for which an upper bound on delay can be provided by servers with finite link capacity. <p> VirtualClock and Leaky Bucket Constrained Sessions An upper bound on delay for a session conforming to a token bucket filter ( . This is a direct consequence of (22) and the result of Lemma 2. This result is the same as that found using PGPS <ref> [11, 12, 13, 14] </ref> (see (4.36) in [ 11], or (23) in [ 13]). PGPS is Parekh and Gallager s method for computing delay bounds under Weighted Fair Queueing [4] when sessions conform to a token bucket filter. <p> This is a direct consequence of (22) and the result of Lemma 2. This result is the same as that found using PGPS [11, 12, 13, 14] (see (4.36) in [ 11], or (23) in <ref> [ 13] </ref>). PGPS is Parekh and Gallager s method for computing delay bounds under Weighted Fair Queueing [4] when sessions conform to a token bucket filter. <p> Packets are served in increasing order of fi nishing round number. Packet-by-Packet Generalized Processor Sharing (PGPS) is the name given in <ref> [11, 12, 13, 14] </ref> to a method for computing delay bounds under WFQ when sessions conform to a token bucket fi lter. <p> The reader is referred to [ 9] for a relevant work on Page 20 fair queueing systems. 5 Conclusions We proved that the VirtualClock service discipline provides an upper bound on delay for leaky bucket constrained sessions. This is the same upper bound on delay given by PGPS <ref> [11, 12, 13, 14] </ref>, i.e. Parekhs and Gallagers method for computing delay bounds under Weighted Fair Queueing [4]. We also proved that leaky bucket constrained sessions are the only type of sessions for which an upper bound on delay can be provided by servers with fi nite link capacity.
Reference: [14] <author> A. K. Parekh, and G. Gallager, </author> <title> A Generalized Processor Sharing Approach to Flow Control in Integrated Services Networks: The Single-Node Case, </title> <journal> In IEEE/ACM Transactions on Networking, </journal> <volume> Vol. 1, No. 3, </volume> <pages> pp. 344-357, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: This guaranteed data rate generally requires some admission control mechanism to allocate the finite link capacity of the servers. Several rate-based service disciplines have been proposed: DelayEDD [ 5], JitterEDD [15], RCSP [17], PGPS <ref> [11, 12, 13, 14] </ref>, Stop-and-Go [6, 7, 8], Hierarchical Round Robin [10], and VirtualClock [20]. Among them, Zhangs VirtualClock in [20] is the only work that does not present an upper bound on end-to-end delay. <p> For leaky bucket constrained sessions, i.e. sessions conforming to a token bucket fi lter, an upper bound on delay is calculated. This is the same upper bound on delay given by PGPS <ref> [ 11, 12, 13, 14] </ref>. PGPS is Parekh and Gallagers method for computing delay bounds under Weighted Fair Queueing [4]. We also prove that leaky bucket constrained sessions are the only type of sessions for which an upper bound on delay can be provided by servers with finite link capacity. <p> VirtualClock and Leaky Bucket Constrained Sessions An upper bound on delay for a session conforming to a token bucket filter ( . This is a direct consequence of (22) and the result of Lemma 2. This result is the same as that found using PGPS <ref> [11, 12, 13, 14] </ref> (see (4.36) in [ 11], or (23) in [ 13]). PGPS is Parekh and Gallager s method for computing delay bounds under Weighted Fair Queueing [4] when sessions conform to a token bucket filter. <p> Packets are served in increasing order of fi nishing round number. Packet-by-Packet Generalized Processor Sharing (PGPS) is the name given in <ref> [11, 12, 13, 14] </ref> to a method for computing delay bounds under WFQ when sessions conform to a token bucket fi lter. <p> The reader is referred to [ 9] for a relevant work on Page 20 fair queueing systems. 5 Conclusions We proved that the VirtualClock service discipline provides an upper bound on delay for leaky bucket constrained sessions. This is the same upper bound on delay given by PGPS <ref> [11, 12, 13, 14] </ref>, i.e. Parekhs and Gallagers method for computing delay bounds under Weighted Fair Queueing [4]. We also proved that leaky bucket constrained sessions are the only type of sessions for which an upper bound on delay can be provided by servers with fi nite link capacity.
Reference: [15] <author> D. Verma, H. Zhang, and D. Ferrari, </author> <title> Delay Jitter Control for Real-Time Communication in a Packet Switching Network, </title> <booktitle> In Proceedings of IEEE TriCom 1991, </booktitle> <pages> pp. 35-43. </pages>
Reference-contexts: This guaranteed data rate generally requires some admission control mechanism to allocate the finite link capacity of the servers. Several rate-based service disciplines have been proposed: DelayEDD [ 5], JitterEDD <ref> [15] </ref>, RCSP [17], PGPS [11, 12, 13, 14], Stop-and-Go [6, 7, 8], Hierarchical Round Robin [10], and VirtualClock [20]. Among them, Zhangs VirtualClock in [20] is the only work that does not present an upper bound on end-to-end delay. <p> It of fers the same upper bound on delay as Stop-and-Go, but does not guarantee a lower bound on delay . The same arguments in the discussion of Stop-and-Go also apply. In DelayEDD [ 5], and its extension Jitter -EDD <ref> [15] </ref> (EDD stands for earliest-due-date), packets are assigned deadlines and transmitted in order of increasing deadline. The deadline of a packet is not directly coupled to the Propagation delay is not considered here since it increases the delay by the same amount for both disciplines.
Reference: [16] <author> D. Yates, J. Kurose, D. Towsley, and M. G. Hluchyj, </author> <title> On Per-session End-to-End Delay Distributions and The Call Admission Problem for Real-Time Applications with QOS Requirements, </title> <booktitle> In Proceedings of ACM SIG-COMM 1993, </booktitle> <pages> pp. 2-12. Page 21 </pages>
Reference-contexts: The per-link increase in the upper bound on delay is for Stop-and-Go (where and (from (23)) for the VirtualClock scheme. This shows that the delay bound in Stop-and-Go can be much larger than the delay bound in the VirtualClock scheme. The reader is referred to <ref> [ 16] </ref> which compares the delay distribution seen by sessions under FCFS multiplexing with the delay bound computed with Cruzs method [ 2, 3], the delay bound using Stop-and-Go, and the delay bound using PGPS (presented later in this section).
Reference: [17] <author> H. Zhang and D. Ferrari, </author> <title> Rate-Controlled Static-Priority Queueing, </title> <booktitle> In Proceedings of IEEE INFOCOM 1993, </booktitle> <pages> pp. 227-236. </pages>
Reference-contexts: This guaranteed data rate generally requires some admission control mechanism to allocate the finite link capacity of the servers. Several rate-based service disciplines have been proposed: DelayEDD [ 5], JitterEDD [15], RCSP <ref> [17] </ref>, PGPS [11, 12, 13, 14], Stop-and-Go [6, 7, 8], Hierarchical Round Robin [10], and VirtualClock [20]. Among them, Zhangs VirtualClock in [20] is the only work that does not present an upper bound on end-to-end delay. <p> This leads to a schedulability test at connection establishment time [5] to avoid scheduling saturation, which can now occur even if bandwidth is not over-booked [5, 19]. The schedulability test is then a compromise on the looser coupling between reserved rate and delay bound. Rate-Controlled Static-Priority Queueing (RCSP) <ref> [17] </ref> is a service discipline that avoids both framing strategies (as in Stop-and-Go and HRR) and sorted priority queues (that are used in all the other service disciplines studied here, including VirtualClock), by the separation of rate-control and delay-control in the design of the server , which allows it to provide <p> In <ref> [17] </ref>, bandwidth is reserved at the peak rate implied by . This admission con trol is refi ned in [18], where both are taken into consideration.
Reference: [18] <author> H. Zhang and D. Ferrari, </author> <title> Improving Utilization for Deterministic Service in Multimedia Communication, </title> <booktitle> In Proceedings of the International Conference on Multimedia Computing and Systems, </booktitle> <pages> pp. 295-304, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: In [17], bandwidth is reserved at the peak rate implied by . This admission con trol is refi ned in <ref> [18] </ref>, where both are taken into consideration. In the VirtualClock scheme, bandwidth may be reserved at the average rate, although a session may need to reserve more bandwidth than its average rate in order to reduce the end-to-end delay, due to the coupling between delay bound and bandwidth allocation.
Reference: [19] <author> H. Zhang and S. Keshav, </author> <title> Comparison of Rate-Based Service Disciplines, </title> <booktitle> In Proceedings of ACM SIGCOMM 1991, </booktitle> <pages> pp. 113-121. </pages>
Reference-contexts: Among them, Zhangs VirtualClock in [20] is the only work that does not present an upper bound on end-to-end delay. Because of this, Vir tualClock has been classified as a service discipline that does not provide an upper bound on delay <ref> [19] </ref>. This work proves that VirtualClock provides an upper bound on delay for certain kinds of sessions. <p> Page 19 reserved bandwidth of its session as in the VirtualClock scheme (see (6) and (7)). This leads to a schedulability test at connection establishment time [5] to avoid scheduling saturation, which can now occur even if bandwidth is not over-booked <ref> [5, 19] </ref>. The schedulability test is then a compromise on the looser coupling between reserved rate and delay bound.

References-found: 19

