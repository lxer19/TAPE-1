URL: http://www-cs-faculty.stanford.edu/~koza/Ashikaga96dB.ps
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: 
Email: koza@cs.stanford.edu  dandre@cs.berkeley.edu  fhb3@slip.net  makeane@ix.netcom.com  
Title: Design of a 96 Decibel Operational Amplifier and Other Problems for Which a Computer Program
Author: John R. Koza David Andre Forrest H Bennett III Martin A. Keane 
Address: 258 Gates Building  Stanford, California 94305  Berkeley, California  Stanford, California 94305  5733 West Grover Chicago, Illinois 60630  
Affiliation: Computer Science Dept.  Stanford University  Computer Science Dept. University of California  Visiting Scholar Computer Science Dept. Stanford University  Econometrics Inc.  
Abstract: It would be desirable if computers could solve problems without the need for a human to write the detailed programmatic steps. That is, it would be desirable to have a domain-independent automatic programming technique in which "What You Want Is What You Get" ("WYWIWYG" pronounced "wow-eee-wig"). Genetic programming is such a technique. This paper surveys three recent examples of problems (one from the field of cellular automata and two from the fields of molecular biology) in which genetic programming evolved a computer program that produced results that were slightly better than human performance for the same problem. This paper then discusses a fourth problem in greater detail and demonstrates that a design for a low-distortion 96 decibel op amp (including both topology and component sizing) can be evolved using genetic programming. The information that the user must supply to genetic programming consists of the parts bin (transistors, resistors, and capacitors) and the fitness measure for the major operating characteristics of an op amp. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Andre, David and Koza, John R. </author> <year> 1996. </year> <title> Parallel genetic programming: A scalable implementation using the transputer architecture. </title> <editor> In Angeline, P. J. and Kinnear, K. E. Jr. (editors). </editor> <booktitle> 1996. Advances in Genetic Programming 2. </booktitle> <address> Cambridge: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Various human-written algorithms have appeared in the past two decades for the majority classification task for one-dimensional cellular automata. Genetic programming with automatically defined functions has evolved a rule for this task with an accuracy of 82.326% <ref> (Andre, Bennett, and Koza 1996) </ref>. This level of accuracy exceeds that of the original Gacs-Kurdyumov-Levin (GKL) rule, all other known subsequent human-written rules, and all other known rules produced by automated approaches for this problem.
Reference: <author> Andre, David, Bennett III, Forrest H, and Koza, John R. </author> <year> 1996. </year> <title> Discovery by genetic programming of a cellular automata rule that is better than any known rule for the majority classification problem. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Various human-written algorithms have appeared in the past two decades for the majority classification task for one-dimensional cellular automata. Genetic programming with automatically defined functions has evolved a rule for this task with an accuracy of 82.326% <ref> (Andre, Bennett, and Koza 1996) </ref>. This level of accuracy exceeds that of the original Gacs-Kurdyumov-Levin (GKL) rule, all other known subsequent human-written rules, and all other known rules produced by automated approaches for this problem.
Reference: <editor> Angeline, Peter J. and Kinnear, Kenneth E. Jr. (editors). </editor> <booktitle> 1996. Advances in Genetic Programming 2. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference: <author> Gruau, Frederic. </author> <year> 1996. </year> <title> Artificial cellular development in optimization and compilation. </title> <editor> In Sanchez, Eduardo and Tomassini, Marco (editors). </editor> <year> 1996. </year> <title> Towards Evolvable Hardware. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 1062. </volume> <publisher> Berlin: Springer-Verlag. </publisher> <pages> Pages 48 75. </pages>
Reference: <author> Hemmi, Hitoshi, Mizoguchi, Jun'ichi, and Shimohara, Katsunori. </author> <year> 1994. </year> <title> Development and evolution of hardware behaviors. </title> <editor> In Brooks, R. and Maes, P. (editors). </editor> <booktitle> Artificial Life IV: Proceedings of the Fourth International Workshop on the Synthesis and Simulation of Living Systems. </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher> <pages> Pages 371376. </pages>
Reference: <author> Higuchi, T., Niwa, T., Tanaka, H., Iba, H., de Garis, H. and Furuya, T. </author> <year> 1993. </year> <title> Evolvable hardware Genetic-based generation of electric circuitry at gate and hardware description language (HDL) levels. </title> <type> Electrotechnical Laboratory technical report 93-4, </type> <institution> Tsukuba, </institution> <address> Ibaraki, Japan. </address>
Reference: <author> Holland, John H. </author> <year> 1975. </year> <title> Adaptation in Natural and Artificial System. </title> <address> Ann Arbor, MI: </address> <publisher> University of Michigan Press. </publisher>
Reference: <editor> Kinnear, Kenneth E. Jr. (editor). </editor> <booktitle> 1994. Advances in Genetic Programming. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference: <author> Koza, John R. </author> <year> 1992. </year> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: The book Genetic Programming: On the Programming of Computers by Means of Natural Selection <ref> (Koza 1992) </ref> describes an extension of Holland's genetic algorithm in which the population consists of computer programs of varying size and shapes (that is, compositions of primitive functions and terminals).
Reference: <author> Koza, John R. </author> <year> 1994a. </year> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: A computer program that solves (or approximately solves) a given problem often emerges from this process. See also Koza and Rice 1992. The book Genetic Programming II: Automatic Discovery of Reusable Programs <ref> (Koza 1994a, 1994b) </ref> describes multipart programs consisting of a main program and one or more reusable, parameterized, hierarchically-called subprograms (called automatically defined functions). <p> Four different versions of genetic programming have been applied to this problem <ref> (Koza 1994a, Koza and Andre 1996a, 1996b) </ref>. The performance of all four versions using genetic programming is slightly superior to that of algorithms written by knowledgeable human investigators. 4 . <p> Connection-modifying functions have one or more construction-continuing subtrees, but no arithmetic-performing subtrees. Component-creating functions have one construction-continuing subtree and typically have one arithmetic-performing subtree. This constrained syntactic structure is preserved by using structure-preserving crossover with point typing <ref> (Koza 1994a) </ref>. 5 . 2 . 1 . The Embryonic Circuit The developmental process for converting a program tree into an electrical circuit begins with an embryonic circuit. circuits. VSOURCE is the incoming signal. VOUT is the output signal.
Reference: <author> Koza, John R. </author> <year> 1994b. </year> <title> Genetic Programming II Videotape: The Next Generation. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Koza, John R. </author> <year> 1995. </year> <title> Gene duplication to enable genetic programming to concurrently evolve both the architecture and work-performing steps of a computer program. </title> <booktitle> Proceedings of the 14th International Joint Conference on Artificial Intelligence. </booktitle> <address> San Francisco, CA: </address> <publisher> Morgan Kaufmann. </publisher> <pages> Pages 734740. </pages>
Reference-contexts: On each generation, four boatloads of emigrants, each consisting of B = 2% (the migration rate) of the node's subpopulation (selected on the basis of fitness) were dispatched to each of the four toroidally adjacent processing nodes. See Andre and Koza 1996 for details. Architecture-altering operations <ref> (Koza 1995) </ref> were used. The other parameters for controlling the runs of genetic programming were the default values specified in Koza 1994 (appendix D). 5 . 4 .
Reference: <author> Koza, John R. and Andre, David. </author> <year> 1996a. </year> <title> Classifying protein segments as transmembrane domains using architecture-altering operations in genetic programming. </title> <editor> In Angeline, Peter J. and Kinnear, Kenneth E. Jr. (editors). </editor> <booktitle> 1996. Advances in Genetic Programming II. </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press. In Press. </publisher>
Reference: <author> Koza, John R. and Andre, David. </author> <year> 1996b. </year> <title> Evolution of iteration in genetic programming. </title> <booktitle> In Evolutionary Programming V: Proceedings of the Fifth Annual Conference on Evolutionary Programming. </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press. In Press. </publisher>
Reference: <author> Koza, John R. and Andre, David. </author> <year> 1996c. </year> <title> Automatic discovery of protein motifs using genetic programming. </title> <editor> In Yao, Xin (editor). </editor> <booktitle> 1996. Evolutionary Computation: Theory and Applications. </booktitle> <address> Singapore: </address> <publisher> World Scientific. In Press. </publisher>
Reference-contexts: Genetic programming successfully evolved motifs for detecting the D-E-A-D box family of proteins and for detecting the manganese superoxide dismutase family <ref> (Koza and Andre 1996c) </ref>. Both motifs were evolved without prespecifying their length. Both evolved motifs employed automatically defined functions to capture the repeated use of common subexpressions.
Reference: <author> Koza, John R., Andre, David, Bennett III, Forrest H, and Keane, Martin A. </author> <year> 1996. </year> <title> Use of automatically defined functions and architecture-altering operations in automated circuit synthesis using genetic programming. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference-contexts: Various human-written algorithms have appeared in the past two decades for the majority classification task for one-dimensional cellular automata. Genetic programming with automatically defined functions has evolved a rule for this task with an accuracy of 82.326% <ref> (Andre, Bennett, and Koza 1996) </ref>. This level of accuracy exceeds that of the original Gacs-Kurdyumov-Levin (GKL) rule, all other known subsequent human-written rules, and all other known rules produced by automated approaches for this problem.
Reference: <author> Koza, John R., Andre, David, Bennett III, Forrest H, and Keane, Martin A. </author> <year> 1997. </year> <title> Genetic Programming III. </title> <note> In preparation. </note>
Reference: <author> Koza, John R., Bennett III, Forrest H, Andre, David, and Keane, Martin A. </author> <year> 1996a. </year> <title> Toward evolution of electronic animals using genetic programming. </title> <booktitle> Artificial Life V: Proceedings of the Fifth International Workshop on the Synthesis and Simulation of Living Systems. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference: <author> Koza, John R., Bennett III, Forrest H, Andre, David, and Keane, Martin A. </author> <year> 1996b. </year> <title> Four problems for which a computer program evolved by genetic programming is competitive with human performance. </title> <booktitle> Proceedings of the 1996 IEEE International Conference on Evolutionary Computation. </booktitle> <publisher> IEEE Press. </publisher> <pages> Pages 110. </pages>
Reference: <author> Koza, John R., Bennett III, Forrest H, Andre, David, and Keane, Martin A. </author> <year> 1996c. </year> <title> Automated design of both the topology and sizing of analog electrical circuits using genetic programming. </title> <editor> In Gero, John S. and Sudweeks, Fay (editors). </editor> <booktitle> Artificial Intelligence in Design '96. </booktitle> <address> Dordrecht: </address> <publisher> Kluwer. </publisher> <pages> 151-170. </pages>
Reference-contexts: Genetic programming successfully evolved motifs for detecting the D-E-A-D box family of proteins and for detecting the manganese superoxide dismutase family <ref> (Koza and Andre 1996c) </ref>. Both motifs were evolved without prespecifying their length. Both evolved motifs employed automatically defined functions to capture the repeated use of common subexpressions.
Reference: <author> Koza, John R., Bennett III, Forrest H, Andre, David, and Keane, Martin A. </author> <year> 1996d. </year> <title> Automated WYWIWYG design of both the topology and component values of analog electrical circuits using genetic programming. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher> <editor> Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference: <author> Koza, John R., and Rice, James P. </author> <year> 1992. </year> <title> Genetic Programming: The Movie. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher> <editor> Kruiskamp, Wim and Leenaerts, Domine. </editor> <year> 1995. </year> <title> DARWIN: CMOS opamp synthesis by means of a genetic algorithm. </title> <booktitle> Proceedings of the 32nd Design Automation Conference. </booktitle> <address> New York, NY: </address> <publisher> Association for Computing Machinery. </publisher> <pages> Pages 433438. </pages>
Reference-contexts: The book Genetic Programming: On the Programming of Computers by Means of Natural Selection <ref> (Koza 1992) </ref> describes an extension of Holland's genetic algorithm in which the population consists of computer programs of varying size and shapes (that is, compositions of primitive functions and terminals).
Reference: <author> Mizoguchi, Junichi, Hemmi, Hitoshi, and Shimohara, Katsunori. </author> <year> 1994. </year> <title> Production genetic algorithms for automated hardware design through an evolutionary process. </title> <booktitle> Proceedings of the First IEEE Conference on Evolutionary Computation. </booktitle> <publisher> IEEE Press. Volume I. </publisher> <pages> Pages 661-664. </pages>
Reference: <author> Quarles, Thomas, Newton, A. R., Pederson, D. O., and Sangiovanni-Vincentelli, A. </author> <year> 1994. </year> <note> SPICE 3 Version 3F5 User's Manual. </note> <institution> Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <address> CA. </address> <month> March </month> <year> 1994. </year>
Reference-contexts: The netlist identifies each component of the circuit, the nodes to which that component is connected, and the value of that component. Each circuit is then simulated to determine its behavior. The 217,000-line SPICE (Simulation Program with Integrated Circuit Emphasis) simulation program <ref> (Quarles et al. 1994) </ref> was modified to run as a submodule within the genetic programming system. An amplifier can be viewed in terms of its response to a DC input. An ideal amplifier circuit would receive a DC input, invert it, and multiply it by the amplification factor.
Reference: <author> Rutenbar, R. A. </author> <year> 1993. </year> <title> Analog design automation: Where are we? Where are we going? Proceedings of the l5th IEEE CICC. </title> <address> New York: </address> <publisher> IEEE. </publisher> <editor> 13.1.1-13.1.8. Sanchez, Eduardo and Tomassini, Marco (editors). </editor> <booktitle> 1996.Towards Evolvable Hardware. Lecture Notes in Computer Science, </booktitle> <volume> Volume 1062. </volume> <publisher> Berlin: Springer-Verlag. </publisher>
Reference-contexts: Design of a 96 Decibel Operational Amplifier 5 . 1 . The Problem of Automated Circuit Synthesis The problem of circuit synthesis involves designing an electrical circuit that satisfies userspecified design goals. The design of analog circuits and mixed analog-digital circuits has not proved to be amenable to automation <ref> (Rutenbar 1993) </ref>. Evolvable digital hardware (Hemmi, Mizoguchi, and Shimohara (1994); Mizoguchi, Hemmi, and Shimohara 1994; Higuchi et al. (1993); and Sanchez and Tomassini 1996) offers a potential approach to automated circuit synthesis.
Reference: <author> Thompson, Adrian. </author> <year> 1996. </year> <title> Silicon evolution. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
References-found: 26

