URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P718.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts98.htm
Root-URL: http://www.mcs.anl.gov
Phone: 3  
Title: Application Experiences with the Globus Toolkit  
Author: Sharon Brunett Karl Czajkowski Steven Fitzgerald Ian Foster Andrew Johnson Carl Kesselman Jason Leigh Steven Tuecke 
Address: Pasadena, CA 91125 Marina del Rey, CA 90292  Argonne, IL 60439 Chicago, IL 60637  
Affiliation: 1 Center for Advanced Computing Research 2 Information Sciences Institute California Institute of Technology University of Southern California  Mathematics and Computer Science 4 Electronic Visualization Lab Argonne National Laboratory University of Illinois  
Abstract: The development of applications and tools for high-performance "computational grids" is complicated by the heterogeneity and frequently dynamic behavior of the underlying resources; by the complexity of the applications themselves, which often combine aspects of supercomputing and distributed computing; and by the need to achieve high levels of performance. The Globus toolkit has been developed with the goal of simplifying this application development task, by providing implementations of various core services deemed essential for high-performance distributed computing. In this paper, we describe two large applications developed with this toolkit: a distributed interactive simulation and a teleimmersion system. We describe the process used to develop the applications, review lessons learned, and draw conclusions regarding the effectiveness of the toolkit approach. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. D. Alexandrov, M. Ibel, K. E. Schauser, and C. J. Scheiman. </author> <title> Extending the operating system at the user level: The UFO global file system. </title> <booktitle> In 1997 Annual Technical Conference on UNIX and Advanced Computing Systems (USENIX'97), </booktitle> <month> Jan. </month> <year> 1997. </year>
Reference-contexts: Using GASS, which supports append-mode file writes, we can write logfile entries to a remote location. GASS also supports automatic fetching of files when they are opened, in a similar fashion to UFO <ref> [1] </ref>, and program-controlled prestaging of files. We plan to use this facility to provide access to the read-only files accessed by SF-Express. 2.2. SF-Express Lessons Learned It is difficult to quantify the impact of Globus on SF-Express. However, we can offer strong anecdotal evidence as to its usefulness.
Reference: [2] <author> F. Berman. </author> <title> High-performance schedulers. </title> <booktitle> In [12]. </booktitle>
Reference-contexts: For example, resource brokers and co-allocators use services provided by GRAMs and by the Globus information service (the Metacom-puting Directory Service, or MDS [9]) to locate available resources and to start computations across computations of resources, respectively. Application-specific scheduling techniques <ref> [2] </ref> can also be used. The Globus toolkit has been used to construct the Globus Ubiquitous Supercomputing Testbed, or GUSTO: a large-scale testbed that spans over 20 sites and includes over 3,000 compute nodes for a total compute power of over 2 TFLOPS.
Reference: [3] <author> K. Birman. </author> <title> The process group approach to reliable distributed computing. </title> <journal> Communications of the ACM, </journal> <volume> 36(12) </volume> <pages> 37-53, </pages> <year> 1993. </year>
Reference-contexts: For example, tracking information need not be propagated reliably but can almost always benefit from multicast, while database updates require reliable communication but cannot always use multicast capabilities. Historically, teleimmersion systems (and similar applications) either have used a single low-level communication protocol for all flows (e.g., TCP/IP <ref> [26, 3, 6] </ref>) or have used a mixture of different, often specialized APIs for different flows [23, 25, 22]. Neither approach is ideal.
Reference: [4] <author> R. Braden, L. Zhang, D. Herzog, and S. Jamin. </author> <title> Resource ReSerVation Protocol (RSVP) Version 1 functional specification. </title> <type> Internet Draft, </type> <institution> Internet Engineering Task Force, </institution> <year> 1996. </year>
Reference-contexts: For example, tracking events can be performed with an unreliable multicast protocol, while database updates are propagated with reliable unicast or multicast. Nexus also allows quality of service (QoS) specifications [18] to be associated with communication links. These specifications can then be translated into an RSVP <ref> [4] </ref> or similar reservation if the underlying network supports this capability. MDS information can be used to determine the capabilities and utilization of the underlying networks, and hence to evaluate trade-offs between different protocols. 3.2.
Reference: [5] <author> S. Brunett, D. Davis, T. Gottschalk, P. Messina, and C. Kesselman. </author> <title> Implementing distributed synthetic forces simulations in metacomputing environments. </title> <booktitle> In Proceedings of the Heterogeneous Computing Workshop, </booktitle> <pages> pages 29-42. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1998. </year>
Reference-contexts: A large simulation may involve many tens of thousands of entities and requires thousands of processors. Globus services can be used to locate, assemble, and manage those resources. For example, in one experiment in March 1998, SF-Express was run on 1352 processors distributed over 13 supercomputers at nine sites <ref> [5] </ref> (Figure 2). This experiment involved over 100,000 entities, setting a new world record for simulation and meeting a performance goal that was not expected to be achieved until 2002.
Reference: [6] <author> C. Carlsson and O. Hagsand. </author> <title> DIVE amulti-user virtual reality system. </title> <booktitle> In Proceedings of the IEEE Virtual Reality Annual International Symposium. </booktitle> <year> 1993. </year>
Reference-contexts: For example, tracking information need not be propagated reliably but can almost always benefit from multicast, while database updates require reliable communication but cannot always use multicast capabilities. Historically, teleimmersion systems (and similar applications) either have used a single low-level communication protocol for all flows (e.g., TCP/IP <ref> [26, 3, 6] </ref>) or have used a mixture of different, often specialized APIs for different flows [23, 25, 22]. Neither approach is ideal.
Reference: [7] <author> K. Czajkowski, I. Foster, N. Karonis, C. Kesselman, S. Martin, W. Smith, and S. Tuecke. </author> <title> A resource management architecture for metacomputing systems. </title> <booktitle> In The 4th Workshop on Job Scheduling Strategies for Parallel Processing, </booktitle> <year> 1998. </year>
Reference-contexts: Different applications and tools can combine these services in different ways to construct "grid-enabled" systems. Various components of the Globus toolkit are described in detail in other papers <ref> [11, 7, 9, 13] </ref>. Briefly, the toolkit comprises the core services listed in Table 1, plus a selection of higher-level services defined in terms of these core services. Each core service defines an application program interface (API) that provides a uniform interface to a local service. <p> Each core service defines an application program interface (API) that provides a uniform interface to a local service. For example, the Globus Resource Allocation Manager (GRAM) service provides an API for requesting that computations be started on a computational resource, and for managing those computations once they are started <ref> [7] </ref>. Higher-level services use core services to implement more complex global functionality. For example, resource brokers and co-allocators use services provided by GRAMs and by the Globus information service (the Metacom-puting Directory Service, or MDS [9]) to locate available resources and to start computations across computations of resources, respectively.
Reference: [8] <author> T. DeFanti and R. Stevens. Tele-immersion. </author> <note> In [12]. </note>
Reference-contexts: CAVERNsoft The second application that we consider is CAV-ERNsoft [20], a software infrastructure designed to support the rapid development of teleimmersive applications. In teleimmersion, immersive virtual reality environments are used over networks to provide shared access to simulated virtual spaces for design, collaboration, entertainment, education, and so forth <ref> [20, 8] </ref> The producers and consumers of the virtual environment, as well as the datasets and simulations on which the virtual space is based, are frequently geographically distributed, placing heavy demands on distributed computing support. <p> We also note opportunities that we have identified for the use of other services. Communication in teleimmersive applications is complicated by the variety of flows that need to be handled. DeFanti and Stevens <ref> [8] </ref> identify nine distinct types of flow (control, text, audio, video, tracking, 5 of the CAVE.
Reference: [9] <author> S. Fitzgerald, I. Foster, C. Kesselman, G. von Laszewski, W. Smith, and S. Tuecke. </author> <title> A directory service for configuring high-performance distributed computations. </title> <booktitle> In Proc. 6th IEEE Symp. on High Performance Distributed Computing, </booktitle> <pages> pages 365-375. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1997. </year>
Reference-contexts: Different applications and tools can combine these services in different ways to construct "grid-enabled" systems. Various components of the Globus toolkit are described in detail in other papers <ref> [11, 7, 9, 13] </ref>. Briefly, the toolkit comprises the core services listed in Table 1, plus a selection of higher-level services defined in terms of these core services. Each core service defines an application program interface (API) that provides a uniform interface to a local service. <p> Higher-level services use core services to implement more complex global functionality. For example, resource brokers and co-allocators use services provided by GRAMs and by the Globus information service (the Metacom-puting Directory Service, or MDS <ref> [9] </ref>) to locate available resources and to start computations across computations of resources, respectively. Application-specific scheduling techniques [2] can also be used.
Reference: [10] <author> I. Foster, J. Geisler, C. Kesselman, and S. Tuecke. </author> <title> Managing multiple communication methods in high-performance networked computing systems. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 40 </volume> <pages> 35-48, </pages> <year> 1997. </year>
Reference-contexts: The Nexus communication library allows applications to define communication links over which can be performed asynchronous remote procedure calls called remote service requests (RSRs). Associated operations allow us to select the underlying communication protocol used for a particular RSR according to when, where, and what is being communicated <ref> [10] </ref>.
Reference: [11] <author> I. Foster and C. Kesselman. </author> <title> The Globus project: A progress report. </title> <booktitle> In Proceedings of the Heterogeneous Computing Workshop, </booktitle> <year> 1998. </year> <note> to appear. </note>
Reference-contexts: 1. Introduction The Globus grid toolkit is a collection of software components designed to support the development of applications for high-performance distributed computing environments, or "computational grids" <ref> [11, 12] </ref>. <p> Different applications and tools can combine these services in different ways to construct "grid-enabled" systems. Various components of the Globus toolkit are described in detail in other papers <ref> [11, 7, 9, 13] </ref>. Briefly, the toolkit comprises the core services listed in Table 1, plus a selection of higher-level services defined in terms of these core services. Each core service defines an application program interface (API) that provides a uniform interface to a local service.
Reference: [12] <author> I. Foster and C. Kesselman, </author> <title> editors. The Grid: Blueprint for a Future Computing Infrastructure. </title> <publisher> Mor-gan Kaufmann Publishers, </publisher> <year> 1998. </year>
Reference-contexts: 1. Introduction The Globus grid toolkit is a collection of software components designed to support the development of applications for high-performance distributed computing environments, or "computational grids" <ref> [11, 12] </ref>.
Reference: [13] <author> I. Foster, C. Kesselman, and S. Tuecke. </author> <title> The Nexus approach to integrating multithreading and communication. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 37 </volume> <pages> 70-82, </pages> <year> 1996. </year>
Reference-contexts: Different applications and tools can combine these services in different ways to construct "grid-enabled" systems. Various components of the Globus toolkit are described in detail in other papers <ref> [11, 7, 9, 13] </ref>. Briefly, the toolkit comprises the core services listed in Table 1, plus a selection of higher-level services defined in terms of these core services. Each core service defines an application program interface (API) that provides a uniform interface to a local service.
Reference: [14] <author> G. Fox and W. </author> <title> Furmanski. </title> <booktitle> High-performance commodity computing. In [12]. </booktitle>
Reference-contexts: The Globus toolkit is an implementation of a "bag of services" architecture, which provides application and tool developers not with a monolithic system but rather with a set of standalone services. (Other candidate grid architectures include the use of object-based technologies [16, 15], web technologies <ref> [14, 27] </ref>, and CORBA [17].) Each Globus component provides a basic service, such as authentication, resource allocation, information, communication, fault detection, and remote data access. Different applications and tools can combine these services in different ways to construct "grid-enabled" systems.
Reference: [15] <author> D. Gannon and A. Grimshaw. </author> <title> Object-based approaches. </title> <booktitle> In [12]. </booktitle>
Reference-contexts: The Globus toolkit is an implementation of a "bag of services" architecture, which provides application and tool developers not with a monolithic system but rather with a set of standalone services. (Other candidate grid architectures include the use of object-based technologies <ref> [16, 15] </ref>, web technologies [14, 27], and CORBA [17].) Each Globus component provides a basic service, such as authentication, resource allocation, information, communication, fault detection, and remote data access. Different applications and tools can combine these services in different ways to construct "grid-enabled" systems.
Reference: [16] <author> A. S. Grimshaw, W. A. Wulf, </author> <title> and the Legion team. The Legion vision of a worldwide virtual computer. </title> <journal> Communications of the ACM, </journal> <volume> 40(1), </volume> <month> Jan. </month> <year> 1997. </year>
Reference-contexts: The Globus toolkit is an implementation of a "bag of services" architecture, which provides application and tool developers not with a monolithic system but rather with a set of standalone services. (Other candidate grid architectures include the use of object-based technologies <ref> [16, 15] </ref>, web technologies [14, 27], and CORBA [17].) Each Globus component provides a basic service, such as authentication, resource allocation, information, communication, fault detection, and remote data access. Different applications and tools can combine these services in different ways to construct "grid-enabled" systems.
Reference: [17] <author> O. M. Group and X/Open. </author> <title> Common object request broker: Architecture and specification, </title> <year> 1991. </year>
Reference-contexts: The Globus toolkit is an implementation of a "bag of services" architecture, which provides application and tool developers not with a monolithic system but rather with a set of standalone services. (Other candidate grid architectures include the use of object-based technologies [16, 15], web technologies [14, 27], and CORBA <ref> [17] </ref>.) Each Globus component provides a basic service, such as authentication, resource allocation, information, communication, fault detection, and remote data access. Different applications and tools can combine these services in different ways to construct "grid-enabled" systems.
Reference: [18] <author> R. Guerin and H. Schulzrinne. </author> <title> Network quality of service. </title> <booktitle> In [12]. </booktitle>
Reference-contexts: Remote participants are able to enter the space and see and critique the design from various points of views and make minor adjustments. database, simulation, haptics, rendering), each with distinctive requirements in terms of both performance and the mechanisms that can be used to implement the flows <ref> [18] </ref>. For example, tracking information need not be propagated reliably but can almost always benefit from multicast, while database updates require reliable communication but cannot always use multicast capabilities. <p> For example, tracking events can be performed with an unreliable multicast protocol, while database updates are propagated with reliable unicast or multicast. Nexus also allows quality of service (QoS) specifications <ref> [18] </ref> to be associated with communication links. These specifications can then be translated into an RSVP [4] or similar reservation if the underlying network supports this capability.
Reference: [19] <author> J. Leigh. </author> <title> CAVERN and a Unified Approach to Support Realtime Networking and Persistence in TeleIm-mersion. </title> <type> PhD thesis, </type> <institution> University of Illinois at Chicago, </institution> <month> Dec </month> <year> 1997. </year>
Reference-contexts: This is exactly the model of opera tion employed by the Nexus RSR. * Performance Overhead. A number of comparisons have been made between sending data via standard UNIX TCP calls and Nexus RSRs <ref> [19] </ref>. Our results showed the only significant overhead imposed by Nexus to be a single redundant memory copy of an application's data to Nexus transmission and receiving buffers.
Reference: [20] <author> J. Leigh, A. Johnson, and T. A. DeFanti. CAVERN: </author> <title> A distributed architecture for supporting scalable persistence and interoperability in collaborative virtual environments. Virtual Reality: </title> <journal> Research, Development and Applications, </journal> <volume> 2(2) </volume> <pages> 217-237, </pages> <month> December </month> <year> 1997. </year>
Reference-contexts: CAVERNsoft The second application that we consider is CAV-ERNsoft <ref> [20] </ref>, a software infrastructure designed to support the rapid development of teleimmersive applications. <p> CAVERNsoft The second application that we consider is CAV-ERNsoft [20], a software infrastructure designed to support the rapid development of teleimmersive applications. In teleimmersion, immersive virtual reality environments are used over networks to provide shared access to simulated virtual spaces for design, collaboration, entertainment, education, and so forth <ref> [20, 8] </ref> The producers and consumers of the virtual environment, as well as the datasets and simulations on which the virtual space is based, are frequently geographically distributed, placing heavy demands on distributed computing support.
Reference: [21] <author> J. Leigh, A. E. Johnson, C. A. Vasilakis, and T. A. De-Fanti. </author> <title> Multi-perspective collaborative design in persistent networked virtual environments. </title> <booktitle> In Proceedings of IEEE Virtual Reality Annual International Symposium '96, </booktitle> <pages> pages 253-260, </pages> <month> Apr. </month> <year> 1996. </year>
Reference-contexts: CAVERNsoft is a second-generation teleimmersion system, designed in response to lessons learned with two earlier applications (CALVIN, a collaborative architectural layout system, and NICE, a collaborative educational system) <ref> [25, 21] </ref>. CALVIN employed a distributed shared-memory system that used completely reliable protocols as the main mechanism for information distribution.
Reference: [22] <author> M. R. Macedonia and M. J. Zyda. </author> <title> A taxonomy for networked virtual environments. </title> <booktitle> In Proceedings of the 1995 Workshop on Networked Realities. </booktitle> <year> 1995. </year>
Reference-contexts: Historically, teleimmersion systems (and similar applications) either have used a single low-level communication protocol for all flows (e.g., TCP/IP [26, 3, 6]) or have used a mixture of different, often specialized APIs for different flows <ref> [23, 25, 22] </ref>. Neither approach is ideal. We believe that a better approach is to code to a single API that allows both high-level specification of communication structure and independent specification of the mechanisms used to achieve that communication. Nexus, the communication component of the Globus toolkit, meets this requirement.
Reference: [23] <author> J. Mandeville, J. Furness, and T. Kawahata. Greenspace: </author> <title> Creating a distributed virtual environment for global applications. </title> <booktitle> In Proceedings of IEEE Networked Virtual Reality Workshop. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: Historically, teleimmersion systems (and similar applications) either have used a single low-level communication protocol for all flows (e.g., TCP/IP [26, 3, 6]) or have used a mixture of different, often specialized APIs for different flows <ref> [23, 25, 22] </ref>. Neither approach is ideal. We believe that a better approach is to code to a single API that allows both high-level specification of communication structure and independent specification of the mechanisms used to achieve that communication. Nexus, the communication component of the Globus toolkit, meets this requirement.
Reference: [24] <author> P. Messina, S. Brunett, D. Davis, T. Gottschalk, D. Curkendall, L. Ekroot, and H. Siegel. </author> <title> Distributed interactive simulation for synthetic forces. </title> <booktitle> In Proceedings of the 11th International Parallel Processing Symposium, </booktitle> <year> 1997. </year>
Reference-contexts: SF-Express The first application that we consider, SF-Express, is a distributed interactive simulation (DIS) application that harnesses multiple supercomputers to meet the computational demands of large-scale network-based simulation environments <ref> [24] </ref>. A large simulation may involve many tens of thousands of entities and requires thousands of processors. Globus services can be used to locate, assemble, and manage those resources.
Reference: [25] <author> M. Roussos, A. Johnson, J. Leigh, C. Valsilakis, C. Barnes, and T. Moher. </author> <title> NICE: Combining con-structionism, narrative, and collaborati on in a virtual learning environment. </title> <journal> Computer Graphics, </journal> <volume> 31(3) </volume> <pages> 62-63, </pages> <month> August </month> <year> 1997. </year>
Reference-contexts: Historically, teleimmersion systems (and similar applications) either have used a single low-level communication protocol for all flows (e.g., TCP/IP [26, 3, 6]) or have used a mixture of different, often specialized APIs for different flows <ref> [23, 25, 22] </ref>. Neither approach is ideal. We believe that a better approach is to code to a single API that allows both high-level specification of communication structure and independent specification of the mechanisms used to achieve that communication. Nexus, the communication component of the Globus toolkit, meets this requirement. <p> CAVERNsoft is a second-generation teleimmersion system, designed in response to lessons learned with two earlier applications (CALVIN, a collaborative architectural layout system, and NICE, a collaborative educational system) <ref> [25, 21] </ref>. CALVIN employed a distributed shared-memory system that used completely reliable protocols as the main mechanism for information distribution.
Reference: [26] <author> C. Shaw and M. Green. </author> <title> The MR toolkit peers package and environment. </title> <booktitle> In Proceedings of the Virtual Reality Annual International Symposium. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference-contexts: For example, tracking information need not be propagated reliably but can almost always benefit from multicast, while database updates require reliable communication but cannot always use multicast capabilities. Historically, teleimmersion systems (and similar applications) either have used a single low-level communication protocol for all flows (e.g., TCP/IP <ref> [26, 3, 6] </ref>) or have used a mixture of different, often specialized APIs for different flows [23, 25, 22]. Neither approach is ideal.
Reference: [27] <author> A. Vahdat, E. Belani, P. Eastham, C. Yoshikawa, T. Anderson, D. Culler, and M. Dahlin. WebOS: </author> <title> Operating system services for wide area applications. In 7th Symposium on High Performance Distributed Computing, </title> <note> to appear, </note> <month> July </month> <year> 1998. </year> <month> 8 </month>
Reference-contexts: The Globus toolkit is an implementation of a "bag of services" architecture, which provides application and tool developers not with a monolithic system but rather with a set of standalone services. (Other candidate grid architectures include the use of object-based technologies [16, 15], web technologies <ref> [14, 27] </ref>, and CORBA [17].) Each Globus component provides a basic service, such as authentication, resource allocation, information, communication, fault detection, and remote data access. Different applications and tools can combine these services in different ways to construct "grid-enabled" systems.
References-found: 27

