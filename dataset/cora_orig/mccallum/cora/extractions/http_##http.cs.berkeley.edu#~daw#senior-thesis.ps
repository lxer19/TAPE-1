URL: http://http.cs.berkeley.edu/~daw/senior-thesis.ps
Refering-URL: http://http.cs.berkeley.edu/~daw/me.html
Root-URL: http://www.cs.berkeley.edu
Title: The Security of MacGuffin  
Author: David A. Wagner 
Degree: A thesis presented to  in partial fulfillment of the requirements for the degree of Bachelor of Arts in the  
Affiliation: Princeton University  Department of Mathematics  
Date: April 19, 1995  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> NBS. </author> <title> Data encryption standard, </title> <month> January </month> <year> 1977. </year> <note> Federal Information Processing Standards Publication 46. </note>
Reference-contexts: 1 Introduction The principles of block cipher design have been a focus of intense research in cryptography for the past two decades. The public unveiling of DES (the NBS Data Encryption Standard <ref> [1] </ref>) was a major landmark in the study of block ciphers, arousing interest in cryptography and cryptanalysis. By modifying a design element of DES and studying how this change affects security, researchers have gained insight into the exceptional strength of DES in particular and Feistel ciphers in general. <p> A more comprehensive treatment can be found in many texts|the original DES standard can be found in <ref> [1] </ref>, while [4, 6, 7] provide more readable descriptions. MacGuffin is fully described and implemented in [5]. <p> When the two output-bit xors are equal for a pair of inputs, count the probability that the two input-bit xors are equal. If this probability is high enough, a simple attack on DES or MacGuffin is feasible. MacGuffin-7 can be attacked with this approach. In fact, Pr (S4 I <ref> [0; 1; 3; 5] </ref> = 0 j S4 O [0; 1] = 0) = :625; where I use the notation that (for example) x [0; 1; 3] = x 0 x 1 x 3 . <p> If this probability is high enough, a simple attack on DES or MacGuffin is feasible. MacGuffin-7 can be attacked with this approach. In fact, Pr (S4 I [0; 1; 3; 5] = 0 j S4 O <ref> [0; 1] </ref> = 0) = :625; where I use the notation that (for example) x [0; 1; 3] = x 0 x 1 x 3 . <p> MacGuffin-7 can be attacked with this approach. In fact, Pr (S4 I [0; 1; 3; 5] = 0 j S4 O [0; 1] = 0) = :625; where I use the notation that (for example) x <ref> [0; 1; 3] </ref> = x 0 x 1 x 3 . Here S4 I stands for the bits entering S4 in round 2, S4 fl I is short for the bits entering S4 in round 6, and S4 I = S4 I S4 fl I as before. <p> Here S4 I stands for the bits entering S4 in round 2, S4 fl I is short for the bits entering S4 in round 6, and S4 I = S4 I S4 fl I as before. Select only those known plaintexts (P; C) with S4 O <ref> [0; 1] </ref> = 0. For the selected plaintexts, S4 I [0; 1; 3; 5] = 0 with high probability. <p> Select only those known plaintexts (P; C) with S4 O [0; 1] = 0. For the selected plaintexts, S4 I <ref> [0; 1; 3; 5] </ref> = 0 with high probability. The values S4 I [0; 1; 3; 5] and S4 fl I [0; 1; 3; 5] in rounds 2 and 6 are known with high probability, up to xor with some subkey bits in rounds 2 and 6 (namely, S4 k [0; <p> Select only those known plaintexts (P; C) with S4 O [0; 1] = 0. For the selected plaintexts, S4 I <ref> [0; 1; 3; 5] </ref> = 0 with high probability. The values S4 I [0; 1; 3; 5] and S4 fl I [0; 1; 3; 5] in rounds 2 and 6 are known with high probability, up to xor with some subkey bits in rounds 2 and 6 (namely, S4 k [0; 1; 3; 5]) and the output of some S-boxes in rounds 1 and <p> Select only those known plaintexts (P; C) with S4 O [0; 1] = 0. For the selected plaintexts, S4 I <ref> [0; 1; 3; 5] </ref> = 0 with high probability. The values S4 I [0; 1; 3; 5] and S4 fl I [0; 1; 3; 5] in rounds 2 and 6 are known with high probability, up to xor with some subkey bits in rounds 2 and 6 (namely, S4 k [0; 1; 3; 5]) and the output of some S-boxes in rounds 1 and 7 (namely, S6 from round 1 and S7; <p> <ref> [0; 1; 3; 5] </ref> = 0 with high probability. The values S4 I [0; 1; 3; 5] and S4 fl I [0; 1; 3; 5] in rounds 2 and 6 are known with high probability, up to xor with some subkey bits in rounds 2 and 6 (namely, S4 k [0; 1; 3; 5]) and the output of some S-boxes in rounds 1 and 7 (namely, S6 from round 1 and S7; S8 from round 7). The inputs to S6 in round 1 and S7; S8 are known by the known plaintext assumption. <p> The inputs to S6 in round 1 and S7; S8 are known by the known plaintext assumption. Thus, we count on the subkey bits entering S6 in round 1, S7 and S8 in round 7, and the xor S4 k <ref> [0; 1; 3; 5] </ref> of subkey bits in rounds 2 and 6. The right value for those 19 subkey bits will be suggested by about 62.5% of the selected known plaintexts, while incorrect values will be suggested by just 50% of them. <p> For instance, bits 2 and 5 entering S1 in any round are the same as bits 1 and 3 entering S3 in the following round. Fix the xor of subkey bits S1 k [2] S3 fl k <ref> [1] </ref> and S1 k [5] S3 fl k [3] and suppose that the inputs to those S-boxes are otherwise randomly chosen. Then the joint distribution (conditioned on the fixed xors of subkey bits) of the two S-box outputs will be non-uniform. <p> Incorrect guesses of the subkey bits are likely to lead to white noise when X 4 is calculated, so we can recognize the correct guess by the non-uniform distribution recorded for it. More post-processing will derive the xors of subkey bits S1 k [2] S3 fl k <ref> [1] </ref> and S1 k [5] S3 fl k [3], since the distribution will be different for each possible such xors. There are several ways to implement the counting scheme. The simplest method uses an array of 2 12+4 counters. <p> 1 1 0 1 0 0 1 1 0 0 1 0 0 0 0 0 1 1 0 1 0 1 1 0 1 1 1 0 1 0 1 0 1 Another key dependence is derived from the observation that S5 P [0; 4] = S3 fl P <ref> [1; 4] </ref>. Here S5 P is the input to S5 in some round and S3 fl P denotes the input to S3 two rounds later. If S5 k [0; 4] S3 fl k [1; 4] = 1, the probability and S=N ratio of the iterative characteristic will be improved by a <p> Another key dependence is derived from the observation that S5 P [0; 4] = S3 fl P <ref> [1; 4] </ref>. Here S5 P is the input to S5 in some round and S3 fl P denotes the input to S3 two rounds later. If S5 k [0; 4] S3 fl k [1; 4] = 1, the probability and S=N ratio of the iterative characteristic will be improved by a factor of 12 12 + 10 4 ffi 22 16 All combinations of input bits were exhaustively searched to find the strongest key dependencies of the iterative characteristic.
Reference: [2] <author> D. Coppersmith. </author> <title> The Data Encryption Standard (DES) and its strength against attacks. </title> <journal> IBM J. Res. Develop., </journal> <volume> 38(3) </volume> <pages> 243-250, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: By modifying a design element of DES and studying how this change affects security, researchers have gained insight into the exceptional strength of DES in particular and Feistel ciphers in general. In retrospect, we can see that DES is surprisingly well-designed <ref> [2] </ref>, and research into the inner workings of DES continues to stimulate important advances. A tremendous assortment of DES variants have been proposed over the years. Many have suggested using independent subkeys for each round [3]; some suggested using different or variable S-boxes. <p> The properties of the DES f mapping have been well explored: for example, it is not bijective, though if two inputs produce the same output, there must be at least 3 S-boxes with differing inputs <ref> [10, 2] </ref>. The key scheduling algorithm specifies how to derive the round subkeys from the encryption key. DES uses a completely linear key schedule; in each round, 48 bits are selected from the 56 bit DES key. <p> For instance, bits 2 and 5 entering S1 in any round are the same as bits 1 and 3 entering S3 in the following round. Fix the xor of subkey bits S1 k <ref> [2] </ref> S3 fl k [1] and S1 k [5] S3 fl k [3] and suppose that the inputs to those S-boxes are otherwise randomly chosen. Then the joint distribution (conditioned on the fixed xors of subkey bits) of the two S-box outputs will be non-uniform. <p> Incorrect guesses of the subkey bits are likely to lead to white noise when X 4 is calculated, so we can recognize the correct guess by the non-uniform distribution recorded for it. More post-processing will derive the xors of subkey bits S1 k <ref> [2] </ref> S3 fl k [1] and S1 k [5] S3 fl k [3], since the distribution will be different for each possible such xors. There are several ways to implement the counting scheme. The simplest method uses an array of 2 12+4 counters. <p> This happens because the active S-boxes in nearby rounds share several input bits. For example, consider the inputs to S8 in one round and to S5 in the next round. We can see that S8 P [4] = S5 fl P <ref> [2] </ref>. Furthermore, 12 20 of the the possible inputs for S8 : 06 ! 0 have bit 4 of the input cleared (see Table 12). At the same time, 12 22 of the inputs satisfying S5 : 11 ! 0 have bit 27 2 set. <p> At the same time, 12 22 of the inputs satisfying S5 : 11 ! 0 have bit 27 2 set. If S8 k [4] S5 fl k <ref> [2] </ref> = 1, the probability and S=N ratio of the iterative characteristic will be improved by a factor of 12 12 + 8 10 ffi 20 22 If the xor of the subkey bits is zero, the probability and S=N ratios will be :98 times the average values. <p> I found that there are no other simple key dependencies based on the xor of S-box input bits being duplicated from round to round. There are some more complex key dependencies, but their effect is in general less pronounced. For example, note that S3 P <ref> [2] </ref> S3 k [2] = S5 fl y y where S3 P stands for the input to S3 in some round r, S5 fl O denotes the output from S5 in round r 2, and S3 P represents the input to S3 at round r 4. <p> I found that there are no other simple key dependencies based on the xor of S-box input bits being duplicated from round to round. There are some more complex key dependencies, but their effect is in general less pronounced. For example, note that S3 P <ref> [2] </ref> S3 k [2] = S5 fl y y where S3 P stands for the input to S3 in some round r, S5 fl O denotes the output from S5 in round r 2, and S3 P represents the input to S3 at round r 4. <p> We have S5 fl O [0] = 0 with probability 6 11 and S3 : 1A ! 0 with probability 5 8 16 64 when S3 P <ref> [2] </ref> = 0. Thus if S3 k [2] S3 y characteristic's probability will be improved by a factor of about ( 2 1 q)= 64 3 1:05 where p and q are defined as p = 32 64 32 10 10 6 q = 32 64 32 6 10 12 : <p> We have S5 fl O [0] = 0 with probability 6 11 and S3 : 1A ! 0 with probability 5 8 16 64 when S3 P <ref> [2] </ref> = 0. Thus if S3 k [2] S3 y characteristic's probability will be improved by a factor of about ( 2 1 q)= 64 3 1:05 where p and q are defined as p = 32 64 32 10 10 6 q = 32 64 32 6 10 12 : The other complex key dependencies have a <p> Criterion P5 is adopted directly from DES (e.g. R2 of [31]). Blaze and Schneier do not explicitly state rule P6 in [5], but their choice of input permutation is in agreement with it. Its origin can clearly be seen in DES: see R1 of [31] or P-2 of <ref> [2] </ref>. Notice that 29 Blaze and Schneier make no distinction between the "end" and "middle" bits of the input to an S-box, in sharp contrast to DES [31, 2]. Another obvious design element to modify is the choice of S-boxes. <p> Its origin can clearly be seen in DES: see R1 of [31] or P-2 of [2]. Notice that 29 Blaze and Schneier make no distinction between the "end" and "middle" bits of the input to an S-box, in sharp contrast to DES <ref> [31, 2] </ref>. Another obvious design element to modify is the choice of S-boxes. Since the MacGuffin S-boxes were based on the DES ones, and much documentation is available on design rules for creating DES-like S-boxes, it is convenient to generate new DES-like S-boxes and truncate them. <p> Since the MacGuffin S-boxes were based on the DES ones, and much documentation is available on design rules for creating DES-like S-boxes, it is convenient to generate new DES-like S-boxes and truncate them. I followed S-1, S-2, S-3, S-4, and S-7 from Coppersmith's account of the DES design process <ref> [2] </ref>; the other criteria were relevant only to the carefully balanced machinery in DES and appear to be of limited value to MacGuffin. <p> In short, long-term use of MacGuffin is not recommended. On the other hand, MacGuffin is just one particular incarnation of the more general GUFN structure. DES was carefully crafted so all components would mesh together to provide the maximum security possible <ref> [2] </ref>; it appears that MacGuffin was at a disadvantage with a less circumspect design. It is natural to wonder whether a more careful design based on the GUFN scheme might reap substantial benefits.
Reference: [3] <author> Thomas A. Berson. </author> <title> Long key variants of DES. </title> <booktitle> In Advances in Cryptology: CRYPTO '82, </booktitle> <pages> pages 311-313, </pages> <address> New York, 1983. </address> <publisher> Plenum Press. </publisher>
Reference-contexts: In retrospect, we can see that DES is surprisingly well-designed [2], and research into the inner workings of DES continues to stimulate important advances. A tremendous assortment of DES variants have been proposed over the years. Many have suggested using independent subkeys for each round <ref> [3] </ref>; some suggested using different or variable S-boxes. Schneier [4] includes Feal, GDES, IDEA, Khafre, Khufu, LOKI, Luby-Rackoff, Lucifer, Madryga, NewDES, REDOC, and RC2 among the list of important Feistel ciphers. Blowfish and RC5, two more recent encryption algorithms, are also structured very much like DES. <p> When the two output-bit xors are equal for a pair of inputs, count the probability that the two input-bit xors are equal. If this probability is high enough, a simple attack on DES or MacGuffin is feasible. MacGuffin-7 can be attacked with this approach. In fact, Pr (S4 I <ref> [0; 1; 3; 5] </ref> = 0 j S4 O [0; 1] = 0) = :625; where I use the notation that (for example) x [0; 1; 3] = x 0 x 1 x 3 . <p> MacGuffin-7 can be attacked with this approach. In fact, Pr (S4 I [0; 1; 3; 5] = 0 j S4 O [0; 1] = 0) = :625; where I use the notation that (for example) x <ref> [0; 1; 3] </ref> = x 0 x 1 x 3 . Here S4 I stands for the bits entering S4 in round 2, S4 fl I is short for the bits entering S4 in round 6, and S4 I = S4 I S4 fl I as before. <p> Select only those known plaintexts (P; C) with S4 O [0; 1] = 0. For the selected plaintexts, S4 I <ref> [0; 1; 3; 5] </ref> = 0 with high probability. The values S4 I [0; 1; 3; 5] and S4 fl I [0; 1; 3; 5] in rounds 2 and 6 are known with high probability, up to xor with some subkey bits in rounds 2 and 6 (namely, S4 k [0; <p> Select only those known plaintexts (P; C) with S4 O [0; 1] = 0. For the selected plaintexts, S4 I <ref> [0; 1; 3; 5] </ref> = 0 with high probability. The values S4 I [0; 1; 3; 5] and S4 fl I [0; 1; 3; 5] in rounds 2 and 6 are known with high probability, up to xor with some subkey bits in rounds 2 and 6 (namely, S4 k [0; 1; 3; 5]) and the output of some S-boxes in rounds 1 and <p> Select only those known plaintexts (P; C) with S4 O [0; 1] = 0. For the selected plaintexts, S4 I <ref> [0; 1; 3; 5] </ref> = 0 with high probability. The values S4 I [0; 1; 3; 5] and S4 fl I [0; 1; 3; 5] in rounds 2 and 6 are known with high probability, up to xor with some subkey bits in rounds 2 and 6 (namely, S4 k [0; 1; 3; 5]) and the output of some S-boxes in rounds 1 and 7 (namely, S6 from round 1 and S7; <p> <ref> [0; 1; 3; 5] </ref> = 0 with high probability. The values S4 I [0; 1; 3; 5] and S4 fl I [0; 1; 3; 5] in rounds 2 and 6 are known with high probability, up to xor with some subkey bits in rounds 2 and 6 (namely, S4 k [0; 1; 3; 5]) and the output of some S-boxes in rounds 1 and 7 (namely, S6 from round 1 and S7; S8 from round 7). The inputs to S6 in round 1 and S7; S8 are known by the known plaintext assumption. <p> The inputs to S6 in round 1 and S7; S8 are known by the known plaintext assumption. Thus, we count on the subkey bits entering S6 in round 1, S7 and S8 in round 7, and the xor S4 k <ref> [0; 1; 3; 5] </ref> of subkey bits in rounds 2 and 6. The right value for those 19 subkey bits will be suggested by about 62.5% of the selected known plaintexts, while incorrect values will be suggested by just 50% of them. <p> For instance, bits 2 and 5 entering S1 in any round are the same as bits 1 and 3 entering S3 in the following round. Fix the xor of subkey bits S1 k [2] S3 fl k [1] and S1 k [5] S3 fl k <ref> [3] </ref> and suppose that the inputs to those S-boxes are otherwise randomly chosen. Then the joint distribution (conditioned on the fixed xors of subkey bits) of the two S-box outputs will be non-uniform. <p> More post-processing will derive the xors of subkey bits S1 k [2] S3 fl k [1] and S1 k [5] S3 fl k <ref> [3] </ref>, since the distribution will be different for each possible such xors. There are several ways to implement the counting scheme. The simplest method uses an array of 2 12+4 counters.
Reference: [4] <author> Bruce Schneier. </author> <title> Applied Cryptography. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: A tremendous assortment of DES variants have been proposed over the years. Many have suggested using independent subkeys for each round [3]; some suggested using different or variable S-boxes. Schneier <ref> [4] </ref> includes Feal, GDES, IDEA, Khafre, Khufu, LOKI, Luby-Rackoff, Lucifer, Madryga, NewDES, REDOC, and RC2 among the list of important Feistel ciphers. Blowfish and RC5, two more recent encryption algorithms, are also structured very much like DES. <p> A more comprehensive treatment can be found in many texts|the original DES standard can be found in [1], while <ref> [4, 6, 7] </ref> provide more readable descriptions. MacGuffin is fully described and implemented in [5]. <p> A more comprehensive treatment can be found in many texts|the original DES standard can be found in [1], while [4, 6, 7] provide more readable descriptions. MacGuffin is fully described and implemented in [5]. For a general introduction to cryptography and block ciphers, the reader is referred to <ref> [4, 8, 6, 7, 9] </ref>. 2.1 DES In any (balanced) Feistel network, the plaintext block is split up evenly into a left half and a right half. DES uses 64 bit blocks, so the left and right registers are 32 bits wide. <p> This happens because the active S-boxes in nearby rounds share several input bits. For example, consider the inputs to S8 in one round and to S5 in the next round. We can see that S8 P <ref> [4] </ref> = S5 fl P [2]. Furthermore, 12 20 of the the possible inputs for S8 : 06 ! 0 have bit 4 of the input cleared (see Table 12). At the same time, 12 22 of the inputs satisfying S5 : 11 ! 0 have bit 27 2 set. <p> Furthermore, 12 20 of the the possible inputs for S8 : 06 ! 0 have bit 4 of the input cleared (see Table 12). At the same time, 12 22 of the inputs satisfying S5 : 11 ! 0 have bit 27 2 set. If S8 k <ref> [4] </ref> S5 fl k [2] = 1, the probability and S=N ratio of the iterative characteristic will be improved by a factor of 12 12 + 8 10 ffi 20 22 If the xor of the subkey bits is zero, the probability and S=N ratios will be :98 times the average <p> 1 1 0 0 0 0 1 1 0 1 0 0 1 1 0 0 1 0 0 0 0 0 1 1 0 1 0 1 1 0 1 1 1 0 1 0 1 0 1 Another key dependence is derived from the observation that S5 P <ref> [0; 4] </ref> = S3 fl P [1; 4]. Here S5 P is the input to S5 in some round and S3 fl P denotes the input to S3 two rounds later. If S5 k [0; 4] S3 fl k [1; 4] = 1, the probability and S=N ratio of the iterative <p> 1 1 0 1 0 0 1 1 0 0 1 0 0 0 0 0 1 1 0 1 0 1 1 0 1 1 1 0 1 0 1 0 1 Another key dependence is derived from the observation that S5 P [0; 4] = S3 fl P <ref> [1; 4] </ref>. Here S5 P is the input to S5 in some round and S3 fl P denotes the input to S3 two rounds later. If S5 k [0; 4] S3 fl k [1; 4] = 1, the probability and S=N ratio of the iterative characteristic will be improved by a <p> 1 0 1 0 1 Another key dependence is derived from the observation that S5 P <ref> [0; 4] </ref> = S3 fl P [1; 4]. Here S5 P is the input to S5 in some round and S3 fl P denotes the input to S3 two rounds later. If S5 k [0; 4] S3 fl k [1; 4] = 1, the probability and S=N ratio of the iterative characteristic will be improved by a factor of 12 12 + 10 4 ffi 22 16 All combinations of input bits were exhaustively searched to find the strongest key dependencies of the iterative characteristic. <p> Another key dependence is derived from the observation that S5 P [0; 4] = S3 fl P <ref> [1; 4] </ref>. Here S5 P is the input to S5 in some round and S3 fl P denotes the input to S3 two rounds later. If S5 k [0; 4] S3 fl k [1; 4] = 1, the probability and S=N ratio of the iterative characteristic will be improved by a factor of 12 12 + 10 4 ffi 22 16 All combinations of input bits were exhaustively searched to find the strongest key dependencies of the iterative characteristic.
Reference: [5] <author> Matt Blaze and Bruce Schneier. </author> <title> The MacGuffin block cipher algorithm. </title> <editor> In Bart Preneel, editor, </editor> <title> Fast Software Encryption: </title> <booktitle> Proceedings of K. U. Leuven Workshop on Algorithms. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <note> (to appear). </note>
Reference-contexts: Blowfish and RC5, two more recent encryption algorithms, are also structured very much like DES. Important lessons about the design of block ciphers have been learned from study of these DES variants. In keeping with this long tradition, two researchers have proposed a new DES variant called MacGuffin <ref> [5] </ref>. DES is a balanced Feistel network: it splits the input up in half into two registers, operating on the left half every round. In contrast, a generalized unbalanced Feistel network (a GUFN) need not split the register evenly into two equal-sized parts. <p> each round of MacGuffin affects just half as much of the block as DES, Blaze and Schneier suggest that two rounds of MacGuffin would equal approximately the strength of one DES round; thus, they conclude, MacGuffin with 32 rounds should be at least as secure as DES with 16 rounds <ref> [5] </ref>. This thesis is intended to examine the cryptographic strength of MacGuffin and to test that central hypothesis. 2 2 Description of MacGuffin and DES This section provides only a cursory introduction to DES and MacGuffin. <p> A more comprehensive treatment can be found in many texts|the original DES standard can be found in [1], while [4, 6, 7] provide more readable descriptions. MacGuffin is fully described and implemented in <ref> [5] </ref>. For a general introduction to cryptography and block ciphers, the reader is referred to [4, 8, 6, 7, 9]. 2.1 DES In any (balanced) Feistel network, the plaintext block is split up evenly into a left half and a right half. <p> When the two output-bit xors are equal for a pair of inputs, count the probability that the two input-bit xors are equal. If this probability is high enough, a simple attack on DES or MacGuffin is feasible. MacGuffin-7 can be attacked with this approach. In fact, Pr (S4 I <ref> [0; 1; 3; 5] </ref> = 0 j S4 O [0; 1] = 0) = :625; where I use the notation that (for example) x [0; 1; 3] = x 0 x 1 x 3 . <p> Select only those known plaintexts (P; C) with S4 O [0; 1] = 0. For the selected plaintexts, S4 I <ref> [0; 1; 3; 5] </ref> = 0 with high probability. The values S4 I [0; 1; 3; 5] and S4 fl I [0; 1; 3; 5] in rounds 2 and 6 are known with high probability, up to xor with some subkey bits in rounds 2 and 6 (namely, S4 k [0; <p> Select only those known plaintexts (P; C) with S4 O [0; 1] = 0. For the selected plaintexts, S4 I <ref> [0; 1; 3; 5] </ref> = 0 with high probability. The values S4 I [0; 1; 3; 5] and S4 fl I [0; 1; 3; 5] in rounds 2 and 6 are known with high probability, up to xor with some subkey bits in rounds 2 and 6 (namely, S4 k [0; 1; 3; 5]) and the output of some S-boxes in rounds 1 and <p> Select only those known plaintexts (P; C) with S4 O [0; 1] = 0. For the selected plaintexts, S4 I <ref> [0; 1; 3; 5] </ref> = 0 with high probability. The values S4 I [0; 1; 3; 5] and S4 fl I [0; 1; 3; 5] in rounds 2 and 6 are known with high probability, up to xor with some subkey bits in rounds 2 and 6 (namely, S4 k [0; 1; 3; 5]) and the output of some S-boxes in rounds 1 and 7 (namely, S6 from round 1 and S7; <p> <ref> [0; 1; 3; 5] </ref> = 0 with high probability. The values S4 I [0; 1; 3; 5] and S4 fl I [0; 1; 3; 5] in rounds 2 and 6 are known with high probability, up to xor with some subkey bits in rounds 2 and 6 (namely, S4 k [0; 1; 3; 5]) and the output of some S-boxes in rounds 1 and 7 (namely, S6 from round 1 and S7; S8 from round 7). The inputs to S6 in round 1 and S7; S8 are known by the known plaintext assumption. <p> The inputs to S6 in round 1 and S7; S8 are known by the known plaintext assumption. Thus, we count on the subkey bits entering S6 in round 1, S7 and S8 in round 7, and the xor S4 k <ref> [0; 1; 3; 5] </ref> of subkey bits in rounds 2 and 6. The right value for those 19 subkey bits will be suggested by about 62.5% of the selected known plaintexts, while incorrect values will be suggested by just 50% of them. <p> For instance, bits 2 and 5 entering S1 in any round are the same as bits 1 and 3 entering S3 in the following round. Fix the xor of subkey bits S1 k [2] S3 fl k [1] and S1 k <ref> [5] </ref> S3 fl k [3] and suppose that the inputs to those S-boxes are otherwise randomly chosen. Then the joint distribution (conditioned on the fixed xors of subkey bits) of the two S-box outputs will be non-uniform. <p> More post-processing will derive the xors of subkey bits S1 k [2] S3 fl k [1] and S1 k <ref> [5] </ref> S3 fl k [3], since the distribution will be different for each possible such xors. There are several ways to implement the counting scheme. The simplest method uses an array of 2 12+4 counters. <p> Criterion P4 is a logical new design rule for GUFNs which ensures that each output bit affects S-boxes in the next three rounds. Criterion P5 is adopted directly from DES (e.g. R2 of [31]). Blaze and Schneier do not explicitly state rule P6 in <ref> [5] </ref>, but their choice of input permutation is in agreement with it. Its origin can clearly be seen in DES: see R1 of [31] or P-2 of [2]. <p> Many newer block ciphers use a more sophisticated key scheduling algorithm with the goal of achieving a certain amount of one-wayness. MacGuffin follows this approach; the key schedule (paraphrased from <ref> [5] </ref>) is shown in Figure 4. KeySched (K) 1. for r 0 to 31 3. subkey [r][i] 0 4. UpdateSubkey (subkey, K 0:::63 ) 5.
Reference: [6] <author> Alan G. Konheim. </author> <title> Cryptography: A Primer. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, </address> <year> 1981. </year>
Reference-contexts: A more comprehensive treatment can be found in many texts|the original DES standard can be found in [1], while <ref> [4, 6, 7] </ref> provide more readable descriptions. MacGuffin is fully described and implemented in [5]. <p> A more comprehensive treatment can be found in many texts|the original DES standard can be found in [1], while [4, 6, 7] provide more readable descriptions. MacGuffin is fully described and implemented in [5]. For a general introduction to cryptography and block ciphers, the reader is referred to <ref> [4, 8, 6, 7, 9] </ref>. 2.1 DES In any (balanced) Feistel network, the plaintext block is split up evenly into a left half and a right half. DES uses 64 bit blocks, so the left and right registers are 32 bits wide. <p> The avalanche property holds if on average half the bits of the ciphertext change when one bit of the plaintext is changed <ref> [6, 12] </ref>. To test each cipher, 100 random keys and 500 plaintext blocks were chosen, for a total of 100 500 (64 + 1) = 3250000 encryptions per cipher tested. Let the random variable X denote the average number of ciphertext bits toggled. <p> In any good block cipher, each output bit will depend on all the inputs bits <ref> [6, 7, 22] </ref>. Let A ir denote the number of plaintext bits which the i-th output bit of MacGuffin-r depends upon. In particular, MacGuffin-r passes this test if A ir = 64 for all i. Table 7 contains a list of the A ir matrix entries. <p> Table 7 contains a list of the A ir matrix entries. By inspection, we see that 9 rounds of MacGuffin are necessary and sufficient to achieve full functional dependence for all the ciphertext bits. In comparison, 5 rounds of DES are required for complete functional dependence <ref> [6] </ref>. One can also count B jr , the number of ciphertext bits which depend upon the j-th plaintext bit of MacGuffin-r. As before, for MacGuffin-r to pass this test, we demand that B jr = 64 for all j.
Reference: [7] <author> Carl H. Meyer and Stephen M. Matyas. </author> <title> Cryptography: A New Dimension in Computer Data Security. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, </address> <year> 1982. </year>
Reference-contexts: A more comprehensive treatment can be found in many texts|the original DES standard can be found in [1], while <ref> [4, 6, 7] </ref> provide more readable descriptions. MacGuffin is fully described and implemented in [5]. <p> A more comprehensive treatment can be found in many texts|the original DES standard can be found in [1], while [4, 6, 7] provide more readable descriptions. MacGuffin is fully described and implemented in [5]. For a general introduction to cryptography and block ciphers, the reader is referred to <ref> [4, 8, 6, 7, 9] </ref>. 2.1 DES In any (balanced) Feistel network, the plaintext block is split up evenly into a left half and a right half. DES uses 64 bit blocks, so the left and right registers are 32 bits wide. <p> In any good block cipher, each output bit will depend on all the inputs bits <ref> [6, 7, 22] </ref>. Let A ir denote the number of plaintext bits which the i-th output bit of MacGuffin-r depends upon. In particular, MacGuffin-r passes this test if A ir = 64 for all i. Table 7 contains a list of the A ir matrix entries.
Reference: [8] <editor> Gustavus J. Simmons, editor. </editor> <booktitle> Contemporary Cryptography: The Science of Information Integrity. Institute of Electrical and Electronics Engineers, </booktitle> <year> 1992. </year>
Reference-contexts: A more comprehensive treatment can be found in many texts|the original DES standard can be found in [1], while [4, 6, 7] provide more readable descriptions. MacGuffin is fully described and implemented in [5]. For a general introduction to cryptography and block ciphers, the reader is referred to <ref> [4, 8, 6, 7, 9] </ref>. 2.1 DES In any (balanced) Feistel network, the plaintext block is split up evenly into a left half and a right half. DES uses 64 bit blocks, so the left and right registers are 32 bits wide.
Reference: [9] <author> Dorothy Denning, </author> <title> editor. Cryptography and Data Security. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1982. </year>
Reference-contexts: A more comprehensive treatment can be found in many texts|the original DES standard can be found in [1], while [4, 6, 7] provide more readable descriptions. MacGuffin is fully described and implemented in [5]. For a general introduction to cryptography and block ciphers, the reader is referred to <ref> [4, 8, 6, 7, 9] </ref>. 2.1 DES In any (balanced) Feistel network, the plaintext block is split up evenly into a left half and a right half. DES uses 64 bit blocks, so the left and right registers are 32 bits wide.
Reference: [10] <author> Yvo Desmedt, Jean-Jacques Quisquater, and Marc Davio. </author> <title> Dependence of output on input in DES: Small avalanche characteristics. </title> <booktitle> In Advances in Cryptology: CRYPTO '84, </booktitle> <pages> pages 359-376. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: The properties of the DES f mapping have been well explored: for example, it is not bijective, though if two inputs produce the same output, there must be at least 3 S-boxes with differing inputs <ref> [10, 2] </ref>. The key scheduling algorithm specifies how to derive the round subkeys from the encryption key. DES uses a completely linear key schedule; in each round, 48 bits are selected from the 56 bit DES key.
Reference: [11] <author> Edna K. Grossman and Bryant Tuckerman. </author> <title> Analysis of a weakened Feistel-like cipher. </title> <booktitle> In 1978 International Conference on Communications, pages 46.3.1-46.3.5. </booktitle> <publisher> Alger Press Limited, </publisher> <year> 1978. </year>
Reference-contexts: DES uses a completely linear key schedule; in each round, 48 bits are selected from the 56 bit DES key. If the key schedule were removed and all round subkeys were the same, DES would be vulnerable to a particularly nasty attack <ref> [11] </ref>. In fact, these attacks have been carefully avoided in the DES key schedule. 2.2 MacGuffin MacGuffin is an example of a generalized unbalanced Feistel cipher (a GUFN). MacGuffin splits the 64 bit plaintext block into four 16 bit registers l, a, b, and c. <p> First, these weak keys generate only a few different subkey values. This makes them vulnerable, or more vulnerable than usual, to certain attacks based on related keys <ref> [11, 34] </ref>. It also raises doubts about the security of those keys on general grounds. Secondly, the encryption and decryption operations are identical for some of the weak keys. <p> This is a partial indication that these types of short cycles have been avoided even when repeated round subkeys are artificially forced on MacGuffin. Because of the attacks on ciphers with repeated round subkey values <ref> [11, 34] </ref>, it is still interesting to search for weak keys. There are no obvious weak keys, and exhaustively searching over all 128 bit MacGuffin keys is infeasible, so the search for weak keys requires some cleverness. Here is one way which a weak key might occur.
Reference: [12] <author> A. F. Webster and S. E. Tavares. </author> <booktitle> On the design of S-boxes. In Advances in Cryptology: CRYPTO '85, </booktitle> <pages> pages 522-534. </pages> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference-contexts: The avalanche property holds if on average half the bits of the ciphertext change when one bit of the plaintext is changed <ref> [6, 12] </ref>. To test each cipher, 100 random keys and 500 plaintext blocks were chosen, for a total of 100 500 (64 + 1) = 3250000 encryptions per cipher tested. Let the random variable X denote the average number of ciphertext bits toggled. <p> MacGuffin-2r 5 31.884 31.783 6.5 n/a 31.993 3.2 The strict avalanche property The strict avalanche property is a generalization of the avalanche property: a block cipher is said to satisfy the strict avalanche property if changing one bit in the plaintext toggles each bit of the ciphertext with probability 0.5 <ref> [12] </ref>. To test for the strict avalanche property, 100 random keys and 500 random plaintext blocks were chosen. The random variable A ij is defined to be the j-th bit of E k (P ) E k (P e i ) for random k; P .
Reference: [13] <author> A. K. Leung and S. E. Tavares. </author> <title> Sequence complexity as a test for cryptographic systems. </title> <booktitle> In Advances in Cryptology: CRYPTO '84, </booktitle> <pages> pages 458-474. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Sequence complexity is one measure of the "randomness" of a bit string|it counts the number of new patterns appearing as one slides along the bits <ref> [13, 14] </ref>. For example, the sequence 0010111011001001 = 0=01=011=10110=0100=1 has sequence complexity 6. <p> For example, the sequence 0010111011001001 = 0=01=011=10110=0100=1 has sequence complexity 6. Nearly all bit strings of length n have complexity at least n= log 2 n, and so it is suggested in <ref> [13] </ref> and [14] to record how often the complexity of E k (P ) E k (P e i ) exceeds 10. The results of running this test for 100 random keys and 500 random plaintext blocks is shown in Table 4.
Reference: [14] <author> Helen Gustafson, Ed Dawson, and Bill Caelli. </author> <title> Comparison of block ciphers. </title> <booktitle> In Advances in Cryptology: AUSCRYPT '90, </booktitle> <pages> pages 208-220. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Sequence complexity is one measure of the "randomness" of a bit string|it counts the number of new patterns appearing as one slides along the bits <ref> [13, 14] </ref>. For example, the sequence 0010111011001001 = 0=01=011=10110=0100=1 has sequence complexity 6. <p> For example, the sequence 0010111011001001 = 0=01=011=10110=0100=1 has sequence complexity 6. Nearly all bit strings of length n have complexity at least n= log 2 n, and so it is suggested in [13] and <ref> [14] </ref> to record how often the complexity of E k (P ) E k (P e i ) exceeds 10. The results of running this test for 100 random keys and 500 random plaintext blocks is shown in Table 4. <p> fraction of ones in the j-th binary derivative of s for 0 j k, and set r = max p j min p j 1 k X p j for some fixed value of k|<ref> [14] </ref> suggests using k = 7. Note that r and p are random variables. According to [14], a block cipher should be accepted if 0:43 p 0:55 and r 0:33 (with a 1% significance level). After using 100 random keys and 500 random plaintexts, the percentage of k; P that gave bad values of p and r is recorded in Table 5 and Table 6. <p> It appears that 5 rounds of DES suffice to pass the binary derivative test, and 10 rounds are enough with MacGuffin. One minor anomaly deserves mention. The threshold r = 0:33 was experimentally obtained for a 1% significance level in <ref> [14] </ref>; on the other hand, my examination of supposedly random data indicates that the r = 0:33 threshold is closer to a 2% significance level. Perhaps this imprecision arose because only 10000 random blocks were tested in [14], whereas the tests shown here analyzed at least 300 times as many blocks. <p> threshold r = 0:33 was experimentally obtained for a 1% significance level in <ref> [14] </ref>; on the other hand, my examination of supposedly random data indicates that the r = 0:33 threshold is closer to a 2% significance level. Perhaps this imprecision arose because only 10000 random blocks were tested in [14], whereas the tests shown here analyzed at least 300 times as many blocks.
Reference: [15] <author> John M. Carroll and Lynda E. Robbins. </author> <title> Using binary derivatives to test an enhancement of DES. </title> <journal> Cryptologia, </journal> <volume> XII(4):193-208, </volume> <month> October </month> <year> 1988. </year>
Reference-contexts: Table 4: Sequence complexity: non-random ciphertexts r DES-r MacGuffin-2r 4 7.2% 8.4% 5 4.1% 4.1% 3.5 Binary derivatives Yet another test of randomness for bit strings counts the Hamming weight of repeated binary derivatives <ref> [15] </ref>. The binary derivative s 0 of a sequence s is defined by the equation s 0 8 where s i is the i-th bit of a sequence s.
Reference: [16] <author> Paul C. van Oorschot and Michael J. Wiener. </author> <title> Parallel collision search with application to hash functions and discrete logarithms. </title> <booktitle> In 2nd ACM Conference on Computer and Communications Security, </booktitle> <year> 1994. </year> <month> 40 </month>
Reference-contexts: Of course, the computing resources needed to iterate E k 2 63 times are rather difficult to acquire. For this reason, only a very limited version of the cycling test can be performed. I implemented an efficient parallel cycle detection algorithm <ref> [16] </ref> and iterated a random 128 bit key approximately 2 33 times. The test was repeated for the case where all round subkeys are set to 0. <p> Since both those properties are avoided in MacGuffin, one might guess that those types of short cycles aren't present either. I implemented an efficient parallel cycle detection algorithm <ref> [16] </ref> and applied it to the sequence P; (E 0 ffi E 1 )(P ); (E 0 ffi E 1 ) 2 (P ); : : : After 10 billion iterations, no cycles were found.
Reference: [17] <author> Don Coppersmith. </author> <title> The real reason for Rivest's phenomenon. </title> <booktitle> In Advances in Cryptology: CRYPTO '85, </booktitle> <pages> pages 535-536. </pages> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference-contexts: There does not appear to be any 128 bit encryption key which generates all zero subkeys under the MacGuffin key schedule; still, any short cycles here would be interesting. (For example, DES has very short cycles when all round subkeys are 0|every cycle is of length 1 or 2 <ref> [17] </ref>.) After 2 33 encryptions, no cycles were found. It is important to point out that the logical implications of this result are very limited: one may conclude only that MacGuffin does not appear to suffer from certain cycling weaknesses. <p> As it happens, the group element E 0 ffi E 1 often has an unusually short cycle length, i.e. an unusually small order in G <ref> [17] </ref>. Suppose we compute the cycle lengths l j of the sequences formed by iterating E 0 ffi E 1 on random starting points a j . Then we may conclude that lcm j a j divides jGj. <p> The other weak keys pair up as (k; k 0 ) where E k (P ) = E k 0 (P ) 8P: This is clearly a problem. Finally, the weak keys lead to unusually short cycles <ref> [17, 35] </ref>. Let E 0 denote encryption by the all-zero DES key (which causes all round subkeys to be zero as well), and let E 1 similarly stand for DES encryption by the all-ones key. <p> P .) These two facts, as it happens, imply that the sequence P; (E 0 ffi E 1 )(P ); (E 0 ffi E 1 ) 2 (P ); (E 0 ffi E 1 ) 3 (P ); : : : has many cycles of length at most 2 32 <ref> [17] </ref>. These have exceptionally short cycle lengths|one would expect a cycle length of 2 63 on average if E 0 ffi E 1 behaved like a random function. The DES weak keys arise from a linear key scheduling algorithm. <p> So, as chance would have it, MacGuffin does not suffer from this particular weakness. The short cycles when iterating E 0 ffi E 1 in DES arose from a complementation property and the fact that E 0 ; E 1 are involutions <ref> [17] </ref>. Since both those properties are avoided in MacGuffin, one might guess that those types of short cycles aren't present either.
Reference: [18] <author> B. S. Kaliski Jr., R. L. Rivest, and A. T. Sherman. </author> <title> Is DES a pure cipher? (results of more cycling experiments on DES). </title> <booktitle> In Advances in Cryptology: CRYPTO '85, </booktitle> <pages> pages 212-226. </pages> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: More generally, if some subset of MacGuffin keys generates a small subgroup, this could indicate similar weaknesses. Several papers have presented statistical evidence and conclusive proof that DES generates a large subgroup <ref> [18, 19, 20, 21] </ref>. Sadly, testing MacGuffin with any of these methods appears to be infeasible. One statistical approach tests the cycling behavior of maps derived from MacGuffin encryption.
Reference: [19] <author> Hikaru Morita, Kazuo Ohta, and Shoji Miyaguchi. </author> <title> A switching closure test to analyze cryp-tosystems. </title> <booktitle> In Advances in Cryptology: CRYPTO '91, </booktitle> <pages> pages 183-193. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: More generally, if some subset of MacGuffin keys generates a small subgroup, this could indicate similar weaknesses. Several papers have presented statistical evidence and conclusive proof that DES generates a large subgroup <ref> [18, 19, 20, 21] </ref>. Sadly, testing MacGuffin with any of these methods appears to be infeasible. One statistical approach tests the cycling behavior of maps derived from MacGuffin encryption.
Reference: [20] <author> Ralph Wernsdorf. </author> <title> The one-round alternating functions of the DES generate the alternating group. </title> <booktitle> In Advances in Cryptology: EUROCRYPT '92, </booktitle> <pages> pages 99-112. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: More generally, if some subset of MacGuffin keys generates a small subgroup, this could indicate similar weaknesses. Several papers have presented statistical evidence and conclusive proof that DES generates a large subgroup <ref> [18, 19, 20, 21] </ref>. Sadly, testing MacGuffin with any of these methods appears to be infeasible. One statistical approach tests the cycling behavior of maps derived from MacGuffin encryption. <p> Finally, one can sometimes establish by detailed algebraic arguments that a cipher is not closed. For example, Wernsdorf has shown that the DES round function generates the alternating group <ref> [20] </ref>. Regrettably, this approach requires intimate knowledge of group theory. I have not attempted to undertake such a study of the algebraic properties of MacGuffin. 3.8 Bit dependencies It is possible to write each output bit of a block cipher as a boolean function of the plaintext and the key.
Reference: [21] <author> Keith W. Campbell and Michael J. Wiener. </author> <title> DES is not a group. </title> <booktitle> In Advances in Cryptology: CRYPTO '92, </booktitle> <pages> pages 512-520. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: More generally, if some subset of MacGuffin keys generates a small subgroup, this could indicate similar weaknesses. Several papers have presented statistical evidence and conclusive proof that DES generates a large subgroup <ref> [18, 19, 20, 21] </ref>. Sadly, testing MacGuffin with any of these methods appears to be infeasible. One statistical approach tests the cycling behavior of maps derived from MacGuffin encryption. <p> Then we may conclude that lcm j a j divides jGj. In fact, this idea was successfully used to show that jGj &gt; 2 57 , so DES is certainly not closed <ref> [21] </ref>. Unfortunately, this method hinges upon finding a weak group element with order small enough to be computable; no such obvious candidates are available for testing MacGuffin. Finally, one can sometimes establish by detailed algebraic arguments that a cipher is not closed.
Reference: [22] <author> Walter Fumy. </author> <title> On the f -function of Feal. </title> <booktitle> In Advances in Cryptology: CRYPTO '87, </booktitle> <pages> pages 434-437. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: In any good block cipher, each output bit will depend on all the inputs bits <ref> [6, 7, 22] </ref>. Let A ir denote the number of plaintext bits which the i-th output bit of MacGuffin-r depends upon. In particular, MacGuffin-r passes this test if A ir = 64 for all i. Table 7 contains a list of the A ir matrix entries.
Reference: [23] <author> M. E. Hellman, R. C. Merkle, R. Schroeppel, L. Washington, W. Diffie, S. Pohlig, and P. Schweitzer. </author> <title> Results of an initial attempt to cryptanalyze the NBS Data Encryption Standard. </title> <type> Technical Report SEL 76-042, </type> <institution> Department of Electrical Engineering, Stanford University, </institution> <year> 1976. </year>
Reference-contexts: MacGuffin has a 128 bit key, so the 2 128 complexity of this naive approach is totally infeasible. Complementation properties can speed up brute force key search <ref> [23] </ref>. With DES, there is a non-trivial identity E k (P ) = E k (P ) which holds for all plaintexts P and all keys k, where x stands for the bitwise complement of x.
Reference: [24] <author> David Chaum and Jan-Hendrik Evertse. </author> <title> Cryptanalysis of DES with a reduced number of rounds. </title> <booktitle> In Advances in Cryptology: CRYPTO '85, </booktitle> <pages> pages 192-211. </pages> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference-contexts: The MacGuffin key schedule is highly non-linear, which avoids this type of complementation property. In fact, MacGuffin appears to have no obvious complementation properties at all. Thus, brute force key search of MacGuffin probably requires 2 128 trial encryptions|a tremendously large figure. 4.2 A meet-in-the-middle attack Chaum and Evertse <ref> [24] </ref> show that DES-6 is vulnerable to a meet-in-the-middle attack requiring a few known plaintexts and 2 54 trial encryptions. Variants with fewer rounds are even more susceptible to this attack.
Reference: [25] <author> Eli Biham and Adi Shamir. </author> <title> Differential Cryptanalysis of the Data Encryption Standard. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: Finally, the remaining unknown key bits can be found by exhaustive search. In fact, this type of attack can break DES-3 with just 20 known ciphertexts and 2 39 operations <ref> [25] </ref>. The complicated MacGuffin key schedule, along with the absence of an initial permutation, protects MacGuffin from this sort of attack. <p> Under the plausible assumption that the MacGuffin key schedule is more or less a one-way function (see Section 6), MacGuffin will be safe from a ciphertext-only attack. 4.5 A statistical known-plaintext attack This attack (like the previous two) is described in <ref> [25] </ref> and has been adapted to MacGuffin. <p> Note that this second stage requires complete knowledge of the pairs (P; C), while the first stage needs just the values P C. In comparison, DES-3 falls to this attack with about 256 P C xors <ref> [25] </ref>. The linearity of the DES key schedule renders a second stage unnecessary. 4.6 Another known-plaintext attack Biham and Shamir also suggest another known-plaintext attack on DES-5. <p> After this, the first and last rounds of MacGuffin-7 can be unraveled and the remaining 5 round cipher can be attacked with simpler methods discussed earlier. In comparison, DES-5 falls to a similar statistical attack with at most 370 known plaintexts <ref> [25] </ref>. The attack on DES-5 can be extended to use just knowledge of P C|the exact values of (P; C) are not needed. <p> Table 9: Chosen plaintexts needed for an avalanche-based attack r MacGuffin-r DES- r 2 13 500 n/a 15 36000 n/a 17 330000 n/a 4.8 A correlation attack Biham and Shamir briefly outline an unpublished statistical attack on DES-8 discovered by D. W. Davies <ref> [25] </ref>. This attack exploits a correlation between the outputs of adjacent S-boxes in the DES 19 f function. The correlation arises from the duplication of input bits between neighboring S-boxes by the DES E box. This attack on DES-8 derives 16 key bits with 2 40 known plaintexts. <p> On the other hand, the lack of an E box is worrying, for DES is much weaker without an expansion permutation|DES sans E box falls to a differential attack requiring just 2 28 chosen plaintexts <ref> [25] </ref>. One can formulate a variation on Davies' original idea to attack unbalanced Feistel ciphers like MacGuffin. In any one round, no two S-boxes share any common input bits|but there are many cases of S-box pairs in nearby rounds with duplicated input bits. <p> Then every such (x; x fl ) causes the f function output xor to be Y by the same fraction p of the subkey values. Proof: Biham and Shamir <ref> [25] </ref> prove this result for DES in Lemma 3.1. <p> Since finding all r 1 round characteristics is impractical for even fairly small values of r, instead we search for a relatively short iterative characteristic which can be repeated to obtain a long characteristic. For more information on differential cryptanalysis see e.g. <ref> [25, 26, 27, 28, 29, 30] </ref>. 5.2 MacGuffin characteristics I wrote several small programs to search for short iterative characteristics using mathematically plausible heuristics. The best characteristics found are listed in Table 11. <p> This characteristic is shown in full detail in Figure 3. In comparison, the best DES iterative characteristic has 2 rounds and probability 1=234 <ref> [25] </ref>. Thus, differential cryptanalysis penetrates MacGuffin 2r more successfully than DES-r. <p> Biham and Shamir have noted that any chosen plaintext differential attack can be carried out under the weaker known plaintext assumption, at some loss of efficiency <ref> [25] </ref>. Suppose the attack needs m chosen plaintexts, but instead 2 32 p m=2 known plaintexts are given. Then with high probability the required plaintext xors can be found among the available data and the differential attack can be carried out. <p> Then with high probability the required plaintext xors can be found among the available data and the differential attack can be carried out. In comparison, the best differential attack on DES with 16 rounds of independent subkeys requires approximately 2 60 chosen plaintexts and very little memory <ref> [25] </ref>. Vanilla DES with dependent round 26 subkeys is a bit weaker: there is a differential attack requiring 2 47 chosen plaintexts and very little memory [28]. However, this special attack succeeds only by taking advantage of the linear DES key schedule. <p> In this case the total complexity of the attack will be reduced to approximately 2 59 operations with negligible storage. 5.6 Enhanced characteristics If partial information about the first round subkey is available, we can often improve the probability of the first round of a characteristic <ref> [25] </ref>. Table 12 lists the possible input values of S8 for 06 ! 0. We can see that 7 10 of the inputs have bit 3 set. Suppose we know that the corresponding bit of the first round subkey (bit 20) is ff. <p> On the other hand, this method cannot be used to improve differential attacks which bypass the first three or more rounds. Because the DES E box duplicates input bits among neighboring S-boxes, the best iterative characteristic for DES propagates with a probability which is dependent on each round subkey <ref> [25] </ref>. Though MacGuffin has no E box, the 4 round iterative characteristic for MacGuffin also has a slight key dependence. This happens because the active S-boxes in nearby rounds share several input bits. For example, consider the inputs to S8 in one round and to S5 in the next round. <p> Criterion P1 was chosen so that the S-boxes of DES could be used directly; it has dubious cryptographic merit (for example, Biham and Shamir found that removal of the E box weakens DES by about 9 orders of magnitude <ref> [25] </ref>). Principles P2-P3 were chosen for performance reasons. Criterion P4 is a logical new design rule for GUFNs which ensures that each output bit affects S-boxes in the next three rounds. Criterion P5 is adopted directly from DES (e.g. R2 of [31]).
Reference: [26] <author> Eli Biham and Adi Shamir. </author> <title> Differential cryptanalysis of Feal and N-Hash. </title> <booktitle> In Advances in Cryptology: EUROCRYPT '91, </booktitle> <pages> pages 1-16. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Since finding all r 1 round characteristics is impractical for even fairly small values of r, instead we search for a relatively short iterative characteristic which can be repeated to obtain a long characteristic. For more information on differential cryptanalysis see e.g. <ref> [25, 26, 27, 28, 29, 30] </ref>. 5.2 MacGuffin characteristics I wrote several small programs to search for short iterative characteristics using mathematically plausible heuristics. The best characteristics found are listed in Table 11.
Reference: [27] <author> Eli Biham and Adi Shamir. </author> <title> Differential cryptanalysis of DES-like cryptosystems. </title> <booktitle> In Advances in Cryptology: CRYPTO '90, </booktitle> <pages> pages 2-21. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Since finding all r 1 round characteristics is impractical for even fairly small values of r, instead we search for a relatively short iterative characteristic which can be repeated to obtain a long characteristic. For more information on differential cryptanalysis see e.g. <ref> [25, 26, 27, 28, 29, 30] </ref>. 5.2 MacGuffin characteristics I wrote several small programs to search for short iterative characteristics using mathematically plausible heuristics. The best characteristics found are listed in Table 11.
Reference: [28] <author> Eli Biham and Adi Shamir. </author> <title> Differential cryptanalysis of the full 16-round DES. </title> <booktitle> In Advances in Cryptology: CRYPTO '92. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Since finding all r 1 round characteristics is impractical for even fairly small values of r, instead we search for a relatively short iterative characteristic which can be repeated to obtain a long characteristic. For more information on differential cryptanalysis see e.g. <ref> [25, 26, 27, 28, 29, 30] </ref>. 5.2 MacGuffin characteristics I wrote several small programs to search for short iterative characteristics using mathematically plausible heuristics. The best characteristics found are listed in Table 11. <p> Unfortunately, all 2 59 ciphertexts must be stored for use in each pass, so the low memory requirement of the clique method is no longer an advantage. The attack can be optimized if sufficient memory is available. Bypass the first three rounds with the techniques of Biham and Shamir <ref> [28] </ref>, use a 3R attack, and cover the middle 26 rounds with repetitions of the 4 round iterative characteristic. The characteristic has probability 20 148:9 6 64 Count on 54 round subkey bits. <p> Vanilla DES with dependent round 26 subkeys is a bit weaker: there is a differential attack requiring 2 47 chosen plaintexts and very little memory <ref> [28] </ref>. However, this special attack succeeds only by taking advantage of the linear DES key schedule. MacGuffin has a much more complicated key schedule, so the most valid comparison is with the independent subkey variant of DES.
Reference: [29] <author> Eli Biham and Adi Shamir. </author> <title> Differential cryptanalysis of Snefru, Khafre, REDOC-II, LOKI, and Lucifer. </title> <booktitle> In Advances in Cryptology: EUROCRYPT '91, </booktitle> <pages> pages 156-171. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Since finding all r 1 round characteristics is impractical for even fairly small values of r, instead we search for a relatively short iterative characteristic which can be repeated to obtain a long characteristic. For more information on differential cryptanalysis see e.g. <ref> [25, 26, 27, 28, 29, 30] </ref>. 5.2 MacGuffin characteristics I wrote several small programs to search for short iterative characteristics using mathematically plausible heuristics. The best characteristics found are listed in Table 11.
Reference: [30] <author> Xiejia Lai, James L. Massey, and Sean Murphy. </author> <title> Markov ciphers and differential cryptanalysis. </title> <booktitle> In Advances in Cryptology: EUROCRYPT '91, </booktitle> <pages> pages 17-38. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Since finding all r 1 round characteristics is impractical for even fairly small values of r, instead we search for a relatively short iterative characteristic which can be repeated to obtain a long characteristic. For more information on differential cryptanalysis see e.g. <ref> [25, 26, 27, 28, 29, 30] </ref>. 5.2 MacGuffin characteristics I wrote several small programs to search for short iterative characteristics using mathematically plausible heuristics. The best characteristics found are listed in Table 11. <p> Table 13: Other design choices for MacGuffin Category P1-P5 P1-P6 S-boxes Best p 1/655.4 1/546.1 1/336.1 Median p 1/256.0 1/240.1 1/132.4 Worst p 1/60.7 1/93.1 1/47.0 % with p &lt; 1=148:9 75% 90% 50% % with p &lt; 1=243 58% 55% 33% 5.8 Markov ciphers Lai, Massey, and Murphy <ref> [30] </ref> propose to treat the propagation of differential characteristics as a Markov chain. The concept of a Markov cipher is defined in their paper, but essentially it is a cipher in which differential characteristics propagate with the memoryless property found in Markov chains. See [30] for the precise definitions. <p> Markov ciphers Lai, Massey, and Murphy <ref> [30] </ref> propose to treat the propagation of differential characteristics as a Markov chain. The concept of a Markov cipher is defined in their paper, but essentially it is a cipher in which differential characteristics propagate with the memoryless property found in Markov chains. See [30] for the precise definitions. The following results are immediate (though they are mainly of theoretical interest). Lemma 8 MacGuffin is a Markov cipher under the group (Z 64 2 ; ). <p> Proof: This is just Lemma 6 in disguise. 2 Theorem 9 Under the hypothesis of stochastic equivalence and the assumption that the MacGuffin round subkeys are uniformly and independently distributed, MacGuffin is secure against differential cryptanalysis after sufficiently many rounds. 30 Proof: See Theorem 3 of <ref> [30] </ref>. 2 More practically, a design principle was suggested: The transition probability matrix of a Markov cipher should not be symmetric.
Reference: [31] <author> Lawrence Brown and Jennifer Seberry. </author> <title> On the design of permutation P in DES type cryp-tosystems. </title> <booktitle> In Advances in Cryptology: EUROCRYPT '89, </booktitle> <pages> pages 696-705. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Principles P2-P3 were chosen for performance reasons. Criterion P4 is a logical new design rule for GUFNs which ensures that each output bit affects S-boxes in the next three rounds. Criterion P5 is adopted directly from DES (e.g. R2 of <ref> [31] </ref>). Blaze and Schneier do not explicitly state rule P6 in [5], but their choice of input permutation is in agreement with it. Its origin can clearly be seen in DES: see R1 of [31] or P-2 of [2]. <p> Criterion P5 is adopted directly from DES (e.g. R2 of <ref> [31] </ref>). Blaze and Schneier do not explicitly state rule P6 in [5], but their choice of input permutation is in agreement with it. Its origin can clearly be seen in DES: see R1 of [31] or P-2 of [2]. Notice that 29 Blaze and Schneier make no distinction between the "end" and "middle" bits of the input to an S-box, in sharp contrast to DES [31, 2]. Another obvious design element to modify is the choice of S-boxes. <p> Its origin can clearly be seen in DES: see R1 of [31] or P-2 of [2]. Notice that 29 Blaze and Schneier make no distinction between the "end" and "middle" bits of the input to an S-box, in sharp contrast to DES <ref> [31, 2] </ref>. Another obvious design element to modify is the choice of S-boxes. Since the MacGuffin S-boxes were based on the DES ones, and much documentation is available on design rules for creating DES-like S-boxes, it is convenient to generate new DES-like S-boxes and truncate them.
Reference: [32] <author> Vincent Rijmen and Bart Preneel. </author> <title> Cryptanalysis of McGuffin. </title> <editor> In Bart Preneel, editor, </editor> <title> Fast Software Encryption: </title> <booktitle> Proceedings of K. U. Leuven Workshop on Algorithms. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <note> (to appear). </note>
Reference-contexts: A comparison of our results showed that the first version of their paper contained an inadvertent misreading of the MacGuffin specification <ref> [32] </ref>. After this initial false start, Rijmen and Preneel independently found the MacGuffin iterative characteristic depicted in Figure 3 and showed that MacGuffin is no stronger than DES [33].
Reference: [33] <author> Vincent Rijmen and Bart Preneel. </author> <title> Cryptanalysis of McGuffin, </title> <note> 1995. (a corrected version of [32]). </note>
Reference-contexts: A comparison of our results showed that the first version of their paper contained an inadvertent misreading of the MacGuffin specification [32]. After this initial false start, Rijmen and Preneel independently found the MacGuffin iterative characteristic depicted in Figure 3 and showed that MacGuffin is no stronger than DES <ref> [33] </ref>. They further demonstrated that MacGuffin is also susceptible to linear cryptanalysis (but MacGuffin is apparently more resistant to linear cryptanalysis than DES). Their work is especially impressive, for they cryptanalyzed MacGuffin at the same workshop where it was first formally presented. <p> The complexity of inversion is reduced significantly when related key chosen plaintexts are available. A modification was suggested to fix this defect. MacGuffin has several problematic weaknesses. It is more vulnerable to differential cryptanalysis than DES. It is not sufficiently resistant against linear cryptanalysis <ref> [33] </ref>. The key schedule is not perfect. The MacGuffin parameters were apparently chosen arbitrarily: the choice of S-boxes is not the best possible, and the input permutation can be greatly improved. In short, long-term use of MacGuffin is not recommended.
Reference: [34] <author> Eli Biham. </author> <title> New types of cryptanalytic attacks using related keys. </title> <booktitle> In Advances in Cryptology: EUROCRYPT '93, </booktitle> <pages> pages 398-409. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: First, these weak keys generate only a few different subkey values. This makes them vulnerable, or more vulnerable than usual, to certain attacks based on related keys <ref> [11, 34] </ref>. It also raises doubts about the security of those keys on general grounds. Secondly, the encryption and decryption operations are identical for some of the weak keys. <p> This is a partial indication that these types of short cycles have been avoided even when repeated round subkeys are artificially forced on MacGuffin. Because of the attacks on ciphers with repeated round subkey values <ref> [11, 34] </ref>, it is still interesting to search for weak keys. There are no obvious weak keys, and exhaustively searching over all 128 bit MacGuffin keys is infeasible, so the search for weak keys requires some cleverness. Here is one way which a weak key might occur. <p> UpdateSubkey (subkey, K 0:::63 ) This change foils the attack described earlier. More research is needed to decide whether the modified version is a completely secure one-way key schedule. 37 6.3 Inverting the key schedule with related keys Several authors have introduced the idea of related key cryptanalysis <ref> [36, 34] </ref>. Suppose we are allowed 2 t (t &lt; 64) related key chosen plaintext queries, and we wish to speed up inversion of the key schedule.
Reference: [35] <author> J. H. Moore and G. J. Simmons. </author> <title> Cycle structure of the DES with weak and semi-weak keys. </title> <booktitle> In Advances in Cryptology: CRYPTO '86, </booktitle> <pages> pages 3-32. </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: The other weak keys pair up as (k; k 0 ) where E k (P ) = E k 0 (P ) 8P: This is clearly a problem. Finally, the weak keys lead to unusually short cycles <ref> [17, 35] </ref>. Let E 0 denote encryption by the all-zero DES key (which causes all round subkeys to be zero as well), and let E 1 similarly stand for DES encryption by the all-ones key.
Reference: [36] <author> Robert Winternitz and Martin Hellman. </author> <title> Chosen-key attacks on a block cipher. </title> <journal> Cryptologia, </journal> <volume> XI(1):16-20, </volume> <month> January </month> <year> 1987. </year> <month> 42 </month>
Reference-contexts: UpdateSubkey (subkey, K 0:::63 ) This change foils the attack described earlier. More research is needed to decide whether the modified version is a completely secure one-way key schedule. 37 6.3 Inverting the key schedule with related keys Several authors have introduced the idea of related key cryptanalysis <ref> [36, 34] </ref>. Suppose we are allowed 2 t (t &lt; 64) related key chosen plaintext queries, and we wish to speed up inversion of the key schedule.
References-found: 36

