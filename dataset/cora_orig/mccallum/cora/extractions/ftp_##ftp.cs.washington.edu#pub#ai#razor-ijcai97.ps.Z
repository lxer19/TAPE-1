URL: ftp://ftp.cs.washington.edu/pub/ai/razor-ijcai97.ps.Z
Refering-URL: http://www.cs.washington.edu/homes/friedman/research.html
Root-URL: 
Email: ffriedman, weldg@cs.washington.edu  
Title: Efficiently Executing Information-Gathering Plans  
Author: Marc Friedman Daniel S. Weld 
Address: Box 352350 Seattle WA 98195-2350 USA  
Affiliation: Department of Computer Science and Engineering University of Washington,  
Abstract: We describe Razor, a planning-based information-gathering agent that assists users by automatically determining which Internet information sites are relevant to their query, accessing those sites in parallel, and integrating the results. Razor uses a disjunctive graph-based plan representation. It then uses a novel and powerful form of local completeness reasoning in order to transform those plans into contingent plans of high quality. These contingent plans can be efficiently executed, obtaining more answers at less cost than the original plans. We focus in this paper on the algorithms underlying the plan transformation process. 
Abstract-found: 1
Intro-found: 1
Reference: [ Adali et al., 1996 ] <author> S. Adali, K. Candan, Y. Papakonstanti-nou, and V. Subrahmanian. </author> <title> Query caching and optimization in distributed mediator systems. </title> <booktitle> In Procceedings of SIGMOD-96, </booktitle> <year> 1996. </year>
Reference: [ Arens et al., 1996 ] <author> Y. Arens, C. Knoblock, C. Chee, and C. Hsu. SIMS: </author> <title> Single interface to multiple sources. </title> <type> TR RL-TR-96-118, </type> <institution> USC Rome Labs, </institution> <year> 1996. </year>
Reference-contexts: They focus on orthogonal problems, such as expressing ontologies and converting between them. The Internet Softbot [ Etzioni and Weld, 1994 ] applies AI planning techniques to the problem of accessing online information as well as update. The SIMS database integration system <ref> [ Arens et al., 1996 ] </ref> applies AI planning to the problem of relational database integration with a rich hierarchical type system. The Information Manifold (IM) [ Levy et al., 1996a ] is similar to SIMS and Razor. Like SIMS, IM handles object type hierarchies.
Reference: [ Chawathe et al., 1994 ] <author> S. Chawathe, H. Garcia-Molina, J. Hammer, K. Ireland, Y. Papakonstantinou, J. Ullman, and J. Widom. </author> <title> The TSIMMIS project: Integration of heterogeneous information sources. </title> <booktitle> In Proc. IPSJ Conf, </booktitle> <year> 1994. </year>
Reference: [ Daruwala et al., 1995 ] <author> A. Daruwala, C. H. Goh, S. Hofmeis-ter, K. Hussein, S. Madnick, and M. Siegel. </author> <title> The context interchange network. </title> <booktitle> In IFIP WG2.6 Sixth Working Conference on Database Semantics, </booktitle> <year> 1995. </year>
Reference: [ Draper et al., 1994 ] <author> D. Draper, S. Hanks, and D. Weld. </author> <title> Probabilistic planning with information gathering and contingent execution. </title> <booktitle> In Proc. 2nd Intl. Conf. on AI Planning Systems, </booktitle> <month> June </month> <year> 1994. </year>
Reference: [ Duschka and Levy, 1997 ] <author> O. Duschka and A. Levy. </author> <title> Recursive plans for information gathering. </title> <booktitle> In Proc. 15th Int. Joint Conf. on AI, </booktitle> <year> 1997. </year>
Reference-contexts: The Razor system currently under development uses the recursive plan compilation procedure described in <ref> [ Duschka and Levy, 1997 ] </ref> augmented with additional type inference and modified to produce acyclic graphs. 3 Representing Local Completeness A single plan may contain many alternative ways to get an answer. <p> The entire subsumption and pruning process increased planning time only 53%. The frailty of our original Lisp implementation, combined with an improved undertanding of the ideal system architecture, led us to design the Razor system described in this paper. Our new C++ implementation uses recursive plans <ref> [ Duschka and Levy, 1997 ] </ref> to construct the plan graph.
Reference: [ Etzioni and Weld, 1994 ] <author> O. Etzioni and D. Weld. </author> <title> A softbot-based interface to the Internet. </title> <journal> C. ACM, </journal> <volume> 37(7) </volume> <pages> 72-6, </pages> <year> 1994. </year>
Reference-contexts: Several implemented systems (e.g., [ Chawathe et al., 1994; Adali et al., 1996; Daruwala et al., 1995 ] ) integrate multiple database systems using hand-tailored query plans. They focus on orthogonal problems, such as expressing ontologies and converting between them. The Internet Softbot <ref> [ Etzioni and Weld, 1994 ] </ref> applies AI planning techniques to the problem of accessing online information as well as update. The SIMS database integration system [ Arens et al., 1996 ] applies AI planning to the problem of relational database integration with a rich hierarchical type system.
Reference: [ Etzioni et al., 1994 ] <author> Oren Etzioni, Keith Golden, and Dan Weld. </author> <title> Tractable closed-world reasoning with updates. </title> <booktitle> In Proc. 4th Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 178-189, </pages> <year> 1994. </year>
Reference-contexts: But if the user were flexible with respect to airlines, she might try Southwest as well. We represent these relationships between sites with local completeness axioms. This section describes our local completeness representation, and explains how they simplify and generalize those of <ref> [ Etzioni et al., 1994; 1997 ] </ref> and [ Levy, 1996 ] . Intuitively, a local completeness (LC) rule states the conditions under which a site contains exhaustive information, i.e. when the site contains all information in the corresponding part of the world ontology. <p> Suppose MovieLink lists all the movies playing anywhere, and their theaters. We encode this with LC as follows: MovieLink (City; M ovie; T heater) ( (4) shows-in (M ovie; City; T heater). This is the simplest kind of LC statement, equivalent to the local closed world declarations of <ref> [ Etzioni et al., 1994 ] </ref> | a site is complete over the entire relation in the body of its site description. Assuming the site is available, one would never need to go anywhere else but to MovieLink to find movies playing in some locale. <p> This version uses an incomplete algorithm, however, for generating bounded-length information-gathering plans. For example, the IM can't find plans that require more steps than there are goal conjuncts; see [ Rajaraman et al., 1995 ] for examples. <ref> [ Etzioni et al., 1994 ] </ref> introduced the notion of local closed world and presented fast algorithms for inference and update. [ Levy, 1996 ] generalizes Etzioni et al.'s local completeness framework and presents a reduction of the answer-completeness problem to the query-independence problem.
Reference: [ Etzioni et al., 1997 ] <author> O. Etzioni, K. Golden, and D. Weld. </author> <title> Sound and efficient closed-world reasoning for planning. </title> <journal> Artificial Intelligence, </journal> <volume> 89(1-2):113-148, </volume> <month> January </month> <year> 1997. </year>
Reference: [ Kwok and Weld, 1996 ] <author> C. Kwok and D. Weld. </author> <title> Planning to gather information. </title> <booktitle> In Proc. 13th Nat. Conf. on AI, </booktitle> <year> 1996. </year>
Reference-contexts: A plan is executable if the input variables required by each step are connected to variables of the correct type along each in-edge, and those variables are available from the predecessor node. A graph is semantically correct if it returns only answers to the query (see also <ref> [ Kwok and Weld, 1996; Levy, 1996 ] </ref> ). There are several ways to construct plans. <p> A graph is semantically correct if it returns only answers to the query (see also [ Kwok and Weld, 1996; Levy, 1996 ] ). There are several ways to construct plans. Our first implementation used a partial-order version of the Occam planner <ref> [ Kwok and Weld, 1996 ] </ref> to produce a (complete yet potentially infinite) stream of conjunctive plans; this stream was truncated and merged into a graph. <p> The first, "Razor96" is written in Common Lisp and uses the Occam planner <ref> [ Kwok and Weld, 1996 ] </ref> as its planning GenerateGuards () Declare clause [all nodes,union nodes] Initialize all clauses to false Foreach hA M ,A N ,U i we found Foreach node P in A N Add status (M; done) to clause [P ,U ] Foreach node P S P =
Reference: [ Levy et al., 1996a ] <author> A. Levy, A. Rajaraman, and J. Ordille. </author> <title> Query-answering algorithms for information agents. </title> <booktitle> In Proc. 13th Nat. Conf. on AI, </booktitle> <year> 1996. </year>
Reference-contexts: The SIMS database integration system [ Arens et al., 1996 ] applies AI planning to the problem of relational database integration with a rich hierarchical type system. The Information Manifold (IM) <ref> [ Levy et al., 1996a ] </ref> is similar to SIMS and Razor. Like SIMS, IM handles object type hierarchies. Like Razor, IM is geared toward users of the web.
Reference: [ Levy et al., 1996b ] <author> A. Levy, A. Rajaraman, and J. Ordille. </author> <title> Querying heterogeneous information sources using source descriptions. </title> <booktitle> In Proceedings of the 22nd VLDB Conference, </booktitle> <year> 1996. </year>
Reference-contexts: Like SIMS, IM handles object type hierarchies. Like Razor, IM is geared toward users of the web. This incarnation of the IM system is incapable of handling information sources other than full relational databases. <ref> [ Levy et al., 1996b ] </ref> describes an apparently later version of the IM which allows bound variables in site descriptions. This version uses an incomplete algorithm, however, for generating bounded-length information-gathering plans.
Reference: [ Levy, 1996 ] <author> A. Levy. </author> <title> Obtaining complete answers from incomplete databases. </title> <booktitle> In Proceedings of the 22nd VLDB Conference, </booktitle> <year> 1996. </year>
Reference-contexts: A plan is executable if the input variables required by each step are connected to variables of the correct type along each in-edge, and those variables are available from the predecessor node. A graph is semantically correct if it returns only answers to the query (see also <ref> [ Kwok and Weld, 1996; Levy, 1996 ] </ref> ). There are several ways to construct plans. <p> We represent these relationships between sites with local completeness axioms. This section describes our local completeness representation, and explains how they simplify and generalize those of [ Etzioni et al., 1994; 1997 ] and <ref> [ Levy, 1996 ] </ref> . Intuitively, a local completeness (LC) rule states the conditions under which a site contains exhaustive information, i.e. when the site contains all information in the corresponding part of the world ontology. <p> ImdbCast's completeness is local, because it is limited to the subspace constrained by year-of (M; Y ) ^ (Y 1996). Note that this case can be expressed in the formulation of <ref> [ Levy, 1996 ] </ref> , but is not solvable by Levy's polynomial time algorithm because there is a world relation (year-of) in the constraint. As a third example, note that the content of some information sources is highly correlated. [ Levy, 1996 ] does not allow the expression of relationships between <p> Note that this case can be expressed in the formulation of <ref> [ Levy, 1996 ] </ref> , but is not solvable by Levy's polynomial time algorithm because there is a world relation (year-of) in the constraint. As a third example, note that the content of some information sources is highly correlated. [ Levy, 1996 ] does not allow the expression of relationships between two sites, but we encode them as follows: MovieLink (City; M ovie; T heater) ( (6) MetroCinema (City; M ovie; T heater). Here we said that MovieLink lists all of MetroCinema's reviews. <p> For example, the IM can't find plans that require more steps than there are goal conjuncts; see [ Rajaraman et al., 1995 ] for examples. [ Etzioni et al., 1994 ] introduced the notion of local closed world and presented fast algorithms for inference and update. <ref> [ Levy, 1996 ] </ref> generalizes Etzioni et al.'s local completeness framework and presents a reduction of the answer-completeness problem to the query-independence problem. We further extend Levy's representation and solve the extended problem directly.
Reference: [ Peot and Smith, 1992 ] <author> M. Peot and D. Smith. </author> <title> Conditional Nonlinear Planning. </title> <booktitle> In Proc. 1st Intl. Conf. on AI Planning Systems, </booktitle> <pages> pages 189-197, </pages> <month> June </month> <year> 1992. </year>
Reference: [ Pryor and Collins, 1996 ] <author> L. Pryor and G. Collins. </author> <title> Planning for contingencies: A decision-based approach. </title> <journal> J. Artificial Intelligence Research, </journal> <year> 1996. </year>
Reference: [ Rajaraman et al., 1995 ] <author> A. Rajaraman, Y. Sagiv, and J. Ullman. </author> <title> Answering queries using templates with binding patterns. </title> <booktitle> In Proc. ACM Symp on Principles of Database Systems, </booktitle> <year> 1995. </year>
Reference-contexts: This version uses an incomplete algorithm, however, for generating bounded-length information-gathering plans. For example, the IM can't find plans that require more steps than there are goal conjuncts; see <ref> [ Rajaraman et al., 1995 ] </ref> for examples. [ Etzioni et al., 1994 ] introduced the notion of local closed world and presented fast algorithms for inference and update. [ Levy, 1996 ] generalizes Etzioni et al.'s local completeness framework and presents a reduction of the answer-completeness problem to the query-independence
Reference: [ Schoppers, 1987 ] <author> M. Schoppers. </author> <title> Universal plans for reactive robots in unpredictable environments. </title> <booktitle> In Proc. 10th Int. Joint Conf. on AI, </booktitle> <pages> pages 1039-1046, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: However, the absence of causal (state-changing) actions in an information-gathering context leads to significant differences. In a sense, Razor's non-contingent plan corresponds to a universal plan <ref> [ Schoppers, 1987 ] </ref> and we introduce contingencies only for efficiency's sake. 8 Conclusions Razor is an information-gathering agent that plans how to answer user queries, reasons about the redundancy of accessing the different sources, and then executes the actions in a manner that attempts to get the maximum information to
Reference: [ Ullman, 1989 ] <author> J. Ullman. </author> <title> Database and knowledge-base systems. In Database and knowledge-base systems. </title> <publisher> Computer Science Press, </publisher> <year> 1989. </year>
Reference-contexts: Contains searches for a containment mapping from C to C 0 <ref> [ Ullman, 1989, p 881 ] </ref> ; if found this proves that the extention of C contains that of C 0 . <p> We say that subgraph G subsumes subgraph G 0 if from the site definitions and LC statements, , one can deduce that G 0 is contained in G. At the heart of the algorithm is a containment mapping routine for conjunctions <ref> [ Ullman, 1989, p 881 ] </ref> .
References-found: 18

