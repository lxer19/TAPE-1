URL: http://www-cad.eecs.berkeley.edu:80/~lcarloni/research/imagemVLSI97.ps
Refering-URL: http://www-cad.eecs.berkeley.edu:80/~lcarloni/research/papersIndex.html
Root-URL: 
Title: An implicit formulation for exact BDD minimization  
Date: September 5, 1996  
Abstract: This paper addresses the problem of binary decision diagram (BDD) minimization in the presence of don't care sets. Specifically, given an incompletely specified function g and a fixed ordering of the variables, we propose an exact algorithm for selecting f such that f is a cover for g and the binary decision diagram for f is of minimum size. The approach described is the only known exact algorithm for this problem not based on the enumeration of all possible assignments to the points in the don't care set. We also present a proof that this problem is NP-complete, a result that was also recently obtained in an independent way by other authors. We show that the BDD minimization problem can be formulated as a binate covering problem and solved using implicit enumeration techniques. In particular, we show that the minimum-sized binary decision diagram compatible with the specification can be found by solving a problem that is very similar to the problem of reducing incompletely specified finite state machines. We report experiments of an implicit implementation of our algorithm, by means of which a class of interesting examples was solved exactly. We compare it with existing heuristic algorithms, to measure the quality of the latter. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Blumer, A. Ehrenfeucht, D. Haussler, and M. K. Warmuth. </author> <title> Occam's razor. </title> <journal> Inform. Proc. Lett., </journal> <volume> 24 </volume> <pages> 377-380, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: This requires an exact algorithm to find those solutions or at least to validate the quality of heuristic algorithms. For instance, in inductive learning applications, the accuracy of the inferred hypotheses is strongly dependent on the complexity of the result <ref> [1] </ref>. One possible and very effective representation scheme for inferred hypotheses are BDDs.
Reference: [2] <author> K. Brace, R. Rudell, and R. Bryant. </author> <title> Efficient implementation of a BDD package. </title> <booktitle> In The Proceedings of the Design Automation Conference, </booktitle> <pages> pages 40-45, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: This similarity makes it possible to use implicit enumeration techniques developed for the purpose of ISFSM reduction [10] to solve efficiently the BDD minimization problem. The manipulation of the characteristic functions of the sets of compatibles and prime compatibles, represented with ROBDDs <ref> [2] </ref>, allows the generation of very large sets that cannot be enumerated explicitly, as it is demonstrated in the experiments. The transformation presented in this paper and the algorithms developed for the solution are important for practical and theoretical reasons.
Reference: [3] <author> R. Brayton, G. Hachtel, C. McMullen, and A. Sangiovanni-Vincentelli. </author> <title> Logic Minimization Algorithms for VLSI Synthesis. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1984. </year>
Reference-contexts: Under certain conditions, these upper bounds tend to become tight, with high probability, as the size of the problem increases, providing a welcome check for the results obtained. The second set of problems was obtained by selecting a subset of the problems that are distributed with Espresso <ref> [3] </ref>, a well known two-level minimizer. More specifically, we included in this set of problems the functions that are the first output from each of the PLAs that are included in the industry subset of the Espresso benchmark suite.
Reference: [4] <author> R. Bryant. </author> <title> Graph based algorithm for Boolean function manipulation. </title> <journal> In IEEE Transactions on Computers, </journal> <pages> pages C-35(8):667-691, </pages> <year> 1986. </year>
Reference-contexts: For a given ordering of the variables, the BDD for f is unique <ref> [4] </ref> and the problem has a well defined solution. We show that this minimization problem can be solved by selecting a minimum sized cover for a graph that satisfies some additional closure conditions. <p> Implicit techniques are based on the idea of operating on discrete sets by their characteristic functions represented by binary decision diagrams (BDDs) <ref> [4] </ref>. To perform state minimization, one needs to represent and manipulate efficiently sets of sets of states. With n states, each subset of states is represented in positional-set form, using a set of n Boolean variables, x = x 1 x 2 : : : x n .
Reference: [5] <author> S.-C. Chang, D.I. Cheng, and M. Marek-Sadowska. </author> <title> Minimizing ROBDD size of incompletely specified multiple output functions. </title> <booktitle> In The Proceedings of the European Design and Test Conference, </booktitle> <pages> pages 620-624, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: The restrict operator [7] and the constrain operator [6] (also known as generalized cofactor [18]) are two heuristics used to assign the don't cares of a BDD. A comprehensive study of heuristic BDD minimization has been presented in [16]. Another heuristic algorithm has been reported in <ref> [5] </ref>. We are aware also of work for an exact algorithm [14] based on the enumeration of the different covers that can be obtained by all possible assignments of the don't care points.
Reference: [6] <author> O. Coudert, C. Berthet, and J. C. Madre. </author> <title> Verification of sequential machines using functional Boolean vectors. </title> <booktitle> Proceedings of the IFIP International Workshop, Applied Formal Methods for Correct VLSI Design, </booktitle> <month> November </month> <year> 1989. </year>
Reference-contexts: Several heuristic algorithms for the problem addressed here have been proposed. These algorithms are important in applications where the available degrees of freedom in the functions represented can be used to reduce the memory requirements of BDD based algorithms. The restrict operator [7] and the constrain operator <ref> [6] </ref> (also known as generalized cofactor [18]) are two heuristics used to assign the don't cares of a BDD. A comprehensive study of heuristic BDD minimization has been presented in [16]. Another heuristic algorithm has been reported in [5]. <p> Instead, the column denoted with the label heuristic presents the solutions obtained using the restrict operator [7], a well-known heuristic algorithm for BDD minimization; equal solutions are obtained using the constrain operator <ref> [6] </ref> (also known as generalized cofactor [18]) 3 .
Reference: [7] <author> O. Coudert, C. Berthet, and J. C. Madre. </author> <title> Verification of synchronous sequential machines based on symbolic execution. Proceedings of the Workshop on Automatic Verification Methods for Finite State Systems, </title> <booktitle> vol. 407 of Lecture Notes in Computer Science, </booktitle> <pages> pages 365-373, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Several heuristic algorithms for the problem addressed here have been proposed. These algorithms are important in applications where the available degrees of freedom in the functions represented can be used to reduce the memory requirements of BDD based algorithms. The restrict operator <ref> [7] </ref> and the constrain operator [6] (also known as generalized cofactor [18]) are two heuristics used to assign the don't cares of a BDD. A comprehensive study of heuristic BDD minimization has been presented in [16]. Another heuristic algorithm has been reported in [5]. <p> This number coincides with the number of nodes of the final BDD and represents the exact solution of the BDD minimization problem. Instead, the column denoted with the label heuristic presents the solutions obtained using the restrict operator <ref> [7] </ref>, a well-known heuristic algorithm for BDD minimization; equal solutions are obtained using the constrain operator [6] (also known as generalized cofactor [18]) 3 .
Reference: [8] <author> A. Grasselli and F. Luccio. </author> <title> A method for minimizing the number of internal states in incompletely specified sequential networks. </title> <journal> IRE Transactions on Electronic Computers, </journal> <volume> EC-14(3):350-359, </volume> <month> June </month> <year> 1965. </year>
Reference-contexts: In particular, we show that the minimum sized binary decision diagram compatible with the specification can be found by solving a covering problem that is very similar to the covering problem obtained using exact algorithms for the reduction of incompletely specified finite state machines (ISFSM) <ref> [8] </ref>. This similarity makes it possible to use implicit enumeration techniques developed for the purpose of ISFSM reduction [10] to solve efficiently the BDD minimization problem.
Reference: [9] <author> K. Hirata, S. Shimozono, and A. Shinoara. </author> <title> On the hardness of approximating the minimum consistent OBDD problem. </title> <booktitle> In The Fifth Scandinavian Workshop on Algorithm Theory, </booktitle> <month> July </month> <year> 1996. </year> <month> 12 </month>
Reference-contexts: In [15] it is also proved that, under the hypothesis that NP 6= P, the problem has neither approximation schemes nor polynomial time approximation algorithms yielding solutions larger than the minimum by only a constant factor or a slowly increasing function. Finally, Hirata, Shimozono and Shinohara proved in <ref> [9] </ref> the related result that MBI is NP-hard (differently from [17]) and that there is a constant " &gt; 0 such that no polynomial algorithm can approximate MBI within the ratio n " unless P = NP. <p> Incidentally, the polynomial time procedure outlined in the proof of Fact 2, together with the results in [15] directly imply the result of Hirata, Shimonozo and Shinonara, as the authors themselves point out in the concluding remarks of <ref> [9] </ref>. 4 The Compatibility Graph Previous algorithms [14] for this problem used directly the BDD representation of f on and f off . The exact approach described in this paper uses the 3TBDD F that corresponds to the incompletely specified function f . F is assumed to be complete.
Reference: [10] <author> T. Kam, T. Villa, R. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> A fully implicit algorithm for exact state mini-mization. </title> <booktitle> In The Proceedings of the Design Automation Conference, </booktitle> <pages> pages 684-690, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: This similarity makes it possible to use implicit enumeration techniques developed for the purpose of ISFSM reduction <ref> [10] </ref> to solve efficiently the BDD minimization problem. The manipulation of the characteristic functions of the sets of compatibles and prime compatibles, represented with ROBDDs [2], allows the generation of very large sets that cannot be enumerated explicitly, as it is demonstrated in the experiments. <p> The transformation from BDD minimization to FSM reduction is shown in the appendix and its correctness is argued. 8 Implicit Computation of a Minimum Closed Cover We will use the unified implicit framework proposed in <ref> [10] </ref> 2 . Implicit techniques are based on the idea of operating on discrete sets by their characteristic functions represented by binary decision diagrams (BDDs) [4]. To perform state minimization, one needs to represent and manipulate efficiently sets of sets of states. <p> Our starting point is the fully implicit algorithm for exact state minimization reported in <ref> [10] </ref>, to which we refer for a complete description of the implicit computations. In the sequel we discuss the modifications needed to generate closed clique covers of the BDD. 8.2 Implicit Computation of L-closure We compute as in [10] the set of compatibles C (c), where C (c) = 1 iff <p> point is the fully implicit algorithm for exact state minimization reported in <ref> [10] </ref>, to which we refer for a complete description of the implicit computations. In the sequel we discuss the modifications needed to generate closed clique covers of the BDD. 8.2 Implicit Computation of L-closure We compute as in [10] the set of compatibles C (c), where C (c) = 1 iff c is the positional set representing a compatible of the companion FSM. <p> Notice that the time complexity of the computation depends only linearly from the explicit parameters N , number of states, and k, number of levels in the STG representation. 9 9 Results Starting from the program ISM for implicit state minimization <ref> [10] </ref> we developed IMAGEM, a new program based on the theory described in this paper for exact BDD minimization.
Reference: [11] <author> L. Lavagno, P. McGeer, A. Saldanha, and A. L. Sangiovanni-Vincentelli. </author> <title> Timed Shannon Circuits: A Power-Efficient Design Style and Synthesis Tool. </title> <booktitle> In Proceedings of the 32 th Design Automation Conference, </booktitle> <pages> pages 254-260, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: The selection of the minimum BDD consistent with an incompletely specified function is important also in logic synthesis applications that use BDDs not only as a tool for representing discrete functions but also to derive implementations that minimize some cost function. For instance, timed Shannon circuits <ref> [11] </ref> use the structure of the BDD to derive low power implementations and stand to gain from algorithms for the reduction of BDDs. The same holds for DCVS trees and multiplexer-based FPGAs.
Reference: [12] <author> A. Oliveira, L. Carloni, T. Villa, and A. Sangiovanni-Vincentelli. </author> <title> Exact minimization of binary decision diagrams using implicit techniques. </title> <type> Tech. Report No. </type> <institution> UCB/ERL M96/16, </institution> <month> April </month> <year> 1996. </year>
Reference-contexts: To solve an MBI problem, simply transform it into an EBM problem and solve it. The resulting solution will represent directly the answer to the original problem. 2 After we reported this result <ref> [12] </ref>, we were informed that an earlier proof had been published in a technical report by Sauerhoff and Wegener [15]. Our result has been obtained independently and provides a different proof.
Reference: [13] <author> Arlindo L. Oliveira. </author> <title> Inductive Learning by Selection of Minimal Complexity Representations. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, Electronics Research Laboratory, College of Engineering, University of California, Berkeley, </institution> <address> CA 94720, </address> <month> December </month> <year> 1994. </year> <note> Memorandum No. UCB/ERL M94/97. </note>
Reference-contexts: For instance, in inductive learning applications, the accuracy of the inferred hypotheses is strongly dependent on the complexity of the result [1]. One possible and very effective representation scheme for inferred hypotheses are BDDs. However, it was observed <ref> [13] </ref> that when BDDs are used as the representation scheme, existing heuristic algorithms for BDD minimization find solutions that are so far from the minimum that makes them of little value for this particular application. <p> The original objective was to identify the set of problems for which it is possible to recover exactly the original functions f i from the incompletely specified functions g i , thereby characterizing the conditions under which it is possible to infer the original function from a training set <ref> [13] </ref>. For the purposes of this work, the functions g i are used solely as a set of incompletely specified functions.
Reference: [14] <author> R. Ranjan, T. Shiple, and R. Hojati. </author> <title> Exact minimization of BDDs using don't cares. EE290ls Project Report, </title> <month> May </month> <year> 1993. </year>
Reference-contexts: A comprehensive study of heuristic BDD minimization has been presented in [16]. Another heuristic algorithm has been reported in [5]. We are aware also of work for an exact algorithm <ref> [14] </ref> based on the enumeration of the different covers that can be obtained by all possible assignments of the don't care points. <p> Then we can also solve the MBI problem. To prove the result we need to prove two facts. Fact 1. The BDD for a given function f of v variables cannot have more than n fi v internal nodes, where n is the number of minterms in f <ref> [14] </ref>. Proof of Fact 1: To verify this, consider all the paths through the BDD defined by all the minterms in f . This set of paths has to go through each internal node in the BDD for f at least once. <p> Incidentally, the polynomial time procedure outlined in the proof of Fact 2, together with the results in [15] directly imply the result of Hirata, Shimonozo and Shinonara, as the authors themselves point out in the concluding remarks of [9]. 4 The Compatibility Graph Previous algorithms <ref> [14] </ref> for this problem used directly the BDD representation of f on and f off . The exact approach described in this paper uses the 3TBDD F that corresponds to the incompletely specified function f . F is assumed to be complete.
Reference: [15] <author> M. Sauerhoff and I. Wegener. </author> <title> On the complexity of minimizing the OBDD size for incompletely specified functions. Forschungsbericht Nr. </title> <type> 560, </type> <institution> Universit at Dortmund, </institution> <year> 1994. </year>
Reference-contexts: The resulting solution will represent directly the answer to the original problem. 2 After we reported this result [12], we were informed that an earlier proof had been published in a technical report by Sauerhoff and Wegener <ref> [15] </ref>. Our result has been obtained independently and provides a different proof. In [15] it is also proved that, under the hypothesis that NP 6= P, the problem has neither approximation schemes nor polynomial time approximation algorithms yielding solutions larger than the minimum by only a constant factor or a slowly <p> The resulting solution will represent directly the answer to the original problem. 2 After we reported this result [12], we were informed that an earlier proof had been published in a technical report by Sauerhoff and Wegener <ref> [15] </ref>. Our result has been obtained independently and provides a different proof. In [15] it is also proved that, under the hypothesis that NP 6= P, the problem has neither approximation schemes nor polynomial time approximation algorithms yielding solutions larger than the minimum by only a constant factor or a slowly increasing function. <p> Incidentally, the polynomial time procedure outlined in the proof of Fact 2, together with the results in <ref> [15] </ref> directly imply the result of Hirata, Shimonozo and Shinonara, as the authors themselves point out in the concluding remarks of [9]. 4 The Compatibility Graph Previous algorithms [14] for this problem used directly the BDD representation of f on and f off .
Reference: [16] <author> T. Shiple, R. Hojati, A. Sangiovanni-Vincentelli, and R. Brayton. </author> <title> Heuristic minimization of BDDs using don't cares. </title> <booktitle> In The Proceedings of the Design Automation Conference, </booktitle> <pages> pages 225-231, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: From a theoretical point of view, the transformation presented in this work is an elegant characterization of the problem. We show in Section 3 that the problem is NP-complete, answering a question raised by Shiple et al. in <ref> [16] </ref>. Several heuristic algorithms for the problem addressed here have been proposed. These algorithms are important in applications where the available degrees of freedom in the functions represented can be used to reduce the memory requirements of BDD based algorithms. <p> The restrict operator [7] and the constrain operator [6] (also known as generalized cofactor [18]) are two heuristics used to assign the don't cares of a BDD. A comprehensive study of heuristic BDD minimization has been presented in <ref> [16] </ref>. Another heuristic algorithm has been reported in [5]. We are aware also of work for an exact algorithm [14] based on the enumeration of the different covers that can be obtained by all possible assignments of the don't care points. <p> Question: Is there a BDD with less than K nodes that implements a function that is a cover for f ? Proof that it is in NP (due to Shiple <ref> [16] </ref>): Guess a BDD with fewer than K nodes. Check whether the guessed BDD implements a function that is a cover of f .
Reference: [17] <author> Yasuhiko Takenaga and Shuzo Yajima. </author> <title> NP-completeness of minimum binary decision diagram identification. </title> <type> Technical Report COMP 92-99, </type> <institution> Institute of Electronics, Information and Communication Engineers (of Japan), </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: Question: For a given fixed ordering, is there a BDD with less than K nodes that satisfies all the examples, i.e., a BDD for a function whose on-set covers the positive examples and whose off-set covers the negative ones ? Takenaga and Yajima <ref> [17] </ref> proved that this problem is NP-complete, by reduction from graph K-colorability. The problem we address in this paper is the following: Problem: EXACT BDD MINIMIZATION (EBM) Instance: BDDs for functions f on and f dc and an integer K. <p> Finally, Hirata, Shimozono and Shinohara proved in [9] the related result that MBI is NP-hard (differently from <ref> [17] </ref>) and that there is a constant " &gt; 0 such that no polynomial algorithm can approximate MBI within the ratio n " unless P = NP.
Reference: [18] <author> H. Touati, H. Savoj, B. Lin, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Implicit state enumeration of finite state machines using BDD's. </title> <booktitle> The Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 130-133, </pages> <month> November </month> <year> 1990. </year> <month> 13 </month>
Reference-contexts: These algorithms are important in applications where the available degrees of freedom in the functions represented can be used to reduce the memory requirements of BDD based algorithms. The restrict operator [7] and the constrain operator [6] (also known as generalized cofactor <ref> [18] </ref>) are two heuristics used to assign the don't cares of a BDD. A comprehensive study of heuristic BDD minimization has been presented in [16]. Another heuristic algorithm has been reported in [5]. <p> Instead, the column denoted with the label heuristic presents the solutions obtained using the restrict operator [7], a well-known heuristic algorithm for BDD minimization; equal solutions are obtained using the constrain operator [6] (also known as generalized cofactor <ref> [18] </ref>) 3 .
References-found: 18

