URL: http://www.cs.princeton.edu/~wass/publications/socg95.ps.gz
Refering-URL: http://www.cs.princeton.edu/~wass/publications.html
Root-URL: http://www.cs.princeton.edu
Title: An Implementation for Mainta  ining Arrangements of Polygons  
Author: Michael Goldwasser 
Affiliation: Stanford University  
Note: Proc. Symp. on Comp. Geometry, Vancouver, 1995, pp. C32-33  This software is written in C and is available via ftp at flamingo.stanford.edu in the directory /pub/wass/arrangement/.  
Abstract: Constructing arrangements of geometric objects is a basic problem in computational geometry. Applications relying on arrangements arise in such fields as robotics, assembly planning, computer vision, graphics, and computer-assisted surgery. Arrangements are also used as a building block for other theoretical results in computational geometry. Many papers and textbooks have presented algorithms for maintaining arrangements under various conditions. This paper is a discussion of the practical issues that arose during the development of a software package which constructs an arrangement of polygons and segments using a basic randomized incremental approach. The need to handle polygons in addition to segments, and to deal with arrangements on a sphere as well as a plane, guided many design decisions. Also the need to cope with degeneracies and numerical inaccuracy in an efficient and consistent manner, brought up issues that are often glossed over in theoretical presentations of algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Chazelle and J. Incerpi. </author> <title> Triangulation and shape-complexity. </title> <journal> ACM Trans. Graph., </journal> <volume> 3(2) </volume> <pages> 135-152, </pages> <year> 1984. </year>
Reference-contexts: The notable limitation of this software is the fact that it is only semi-dynamic. For this application, polygons could be incrementally inserted however there was no need to delete polygons from the arrangement. 3 Algorithm We represent the arrangement using a vertical decomposition into trapezoids <ref> [1] </ref>. To avoid the maintanance of faces with arbitrarily many edges, we decompose each face into a number of trapezoids. This is done by extending an imaginary vertical thread from each vertex of the face upwards (downwards) into the face until an edge of the face is reached.
Reference: [2] <author> H. Edelsbrunner, L. Guibas, and J. Stolfi. </author> <title> Optimal point location in a monotone subdivision. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 317-340, </pages> <year> 1986. </year>
Reference-contexts: We give a brief explanation here, but we refer the reader to [3], [5] for details. We maintain two data structures. The primary structure stores the features of the actual arrangement, as well as all the topological information connecting neighboring features. The secondary structure, a layered dag <ref> [2] </ref>, allows us to take a new query point, and efficiently determine which cell of the arrangement contains it.
Reference: [3] <author> K. Mulmuley. </author> <title> Computational Geometry: An Introduction Through Randomized Algorithms. </title> <publisher> Prentice Hall, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: This is done by extending an imaginary vertical thread from each vertex of the face upwards (downwards) into the face until an edge of the face is reached. See Figure 1. 1 The algorithm used for construction is a basic ran-domized incremental construction, similar to that of Mulmuley <ref> [3] </ref> or Seidel [5]. We give a brief explanation here, but we refer the reader to [3], [5] for details. We maintain two data structures. The primary structure stores the features of the actual arrangement, as well as all the topological information connecting neighboring features. <p> See Figure 1. 1 The algorithm used for construction is a basic ran-domized incremental construction, similar to that of Mulmuley <ref> [3] </ref> or Seidel [5]. We give a brief explanation here, but we refer the reader to [3], [5] for details. We maintain two data structures. The primary structure stores the features of the actual arrangement, as well as all the topological information connecting neighboring features.
Reference: [4] <author> B. Romney, C. Godard, M. Goldwasser, and G. Ramku-mar. </author> <title> An efficient system for analyzing assembly complexity. </title> <booktitle> Proc. ASME Intern. Computers in Engin., </booktitle> <year> 1995. </year>
Reference-contexts: 1 Project Background This software was originally developed for use in the Stanford Assembly Analysis Tool (STAAT), an assembly planner for polyhedral parts <ref> [4] </ref>. For each pair of parts, analysis is performed to calculate the set of directions in which one part will collide with the other. This region is represented as a polygon on the sphere of fl Department of Computer Science, Stanford University, Stan-ford, CA, 94305. E-mail: wass@cs.stanford.edu.
Reference: [5] <author> R. Seidel. </author> <title> A simple and fast incremental randomized algorithm for computing trapezoidal decompositions and for triangulating polygons. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 1 </volume> <pages> 51-64, </pages> <year> 1991. </year>
Reference-contexts: See Figure 1. 1 The algorithm used for construction is a basic ran-domized incremental construction, similar to that of Mulmuley [3] or Seidel <ref> [5] </ref>. We give a brief explanation here, but we refer the reader to [3], [5] for details. We maintain two data structures. The primary structure stores the features of the actual arrangement, as well as all the topological information connecting neighboring features. <p> See Figure 1. 1 The algorithm used for construction is a basic ran-domized incremental construction, similar to that of Mulmuley [3] or Seidel <ref> [5] </ref>. We give a brief explanation here, but we refer the reader to [3], [5] for details. We maintain two data structures. The primary structure stores the features of the actual arrangement, as well as all the topological information connecting neighboring features.
Reference: [6] <author> J. Stolfi. </author> <title> Oriented Projective Geometry: A Framework for Geometric Computations. </title> <publisher> Academic Press, </publisher> <year> 1991. </year> <month> 2 </month>
Reference-contexts: The key is that there is an exact correspondence between the spherical coordinate system and the double-sided projective plane by viewing the coordinates (x; y; z) as homogeneous with weight z. A good explanation is given by Stolfi in <ref> [6] </ref>. To handle the sphere, we break it into two hemispheres using a "great meridian," M . Then we maintain the arrangement on both hemispheres separately, yet in a way so that the features are glued properly at M .
References-found: 6

