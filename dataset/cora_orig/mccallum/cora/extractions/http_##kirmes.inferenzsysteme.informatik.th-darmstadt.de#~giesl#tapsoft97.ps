URL: http://kirmes.inferenzsysteme.informatik.th-darmstadt.de/~giesl/tapsoft97.ps
Refering-URL: http://www.inferenzsysteme.informatik.tu-darmstadt.de/~giesl/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: thomas@cs.ruu.nl  E-mail: giesl@inferenzsysteme.informatik.th-darmstadt.de  
Phone: 2  
Title: Automatically Proving Termination Where Simplification Orderings Fail  
Author: Thomas Arts and Jurgen Giesl 
Note: (also non-simply terminating) TRSs can be proved fully automatically.  
Address: P.O. Box 80.089, 3508 TB Utrecht, The Netherlands,  Alexanderstr. 10, 64283 Darmstadt, Germany,  
Affiliation: 1 Dept. of Computer Science, Utrecht University,  FB Informatik, TH Darmstadt,  
Abstract: To prove termination of term rewriting systems (TRSs), several methods have been developed to synthesize suitable well-founded or-derings automatically. However, virtually all orderings that are amenable to automation are so-called simplification orderings. Unfortunately, there exist numerous interesting and relevant TRSs that cannot be oriented by orderings of this restricted class and therefore their termination cannot be proved automatically with the existing techniques. In this paper we present a new approach which allows to apply the standard techniques for automated termination proofs to those TRSs where these techniques failed up to now. For that purpose we have developed a procedure which, given a TRS, generates a set of inequalities (constraints) automatically. If there exists a well-founded ordering satisfying these constraints, then the TRS is terminating. It turns out that for many TRSs where a direct application of standard techniques fails, these standard techniques can nevertheless synthesize a well-founded ordering satisfying the generated constraints. In this way, termination of numerous 
Abstract-found: 1
Intro-found: 1
Reference: [AG96a] <author> T. Arts and J. Giesl. </author> <title> Termination of constructor systems. </title> <booktitle> In Proceedings of RTA-96, </booktitle> <volume> LNCS 1103, </volume> <pages> pages 63-77, </pages> <month> July </month> <year> 1996. </year>
Reference-contexts: ren (cap (t i )) are disjoint from the variables in ren (cap (t j )) for all i 6= j, ren (cap (t)) also matches v. ut 6 Related Work The concept of dependency pairs was introduced in [Art96] and a first method for its automation was proposed in <ref> [AG96a] </ref>. However, these approaches were restricted to non-overlapping constructor systems without nested recursion, whereas in the present paper we extended the technique to arbitrary TRSs. <p> There is a relation between dependency pairs and semantic labelling [Zan95], because the dependency pairs correspond to the labels of a TRS labelled by the process of self -labelling. But in contrast to the approaches of <ref> [Art96, AG96a] </ref>, our new termination criterion is no longer directly based on semantic labelling. Therefore this new criterion is better suited for automation (as one does not have to construct a suitable semantic interpretation any more) and its soundness can be proved in a much easier and shorter way. <p> Moreover, by the introduction of dependency graphs we obtained a considerably more powerful automated technique than the method proposed in <ref> [AG96a] </ref>. Recently, we also developed a method for proving innermost normalisation using dependency pairs [AG97], which can be applied for termination proofs, too.
Reference: [AG96b] <author> T. Arts and J. Giesl. </author> <title> Automatically proving termination where simplification orderings fail. </title> <type> Technical Report UU-CS-1996-44, </type> <institution> Utrecht University, Utrecht, </institution> <month> October </month> <year> 1996, </year> <note> http://www.cs.ruu.nl. </note>
Reference-contexts: This work was partially supported by the Deutsche Forschungsgemeinschaft under grant no. Wa 652/7-1 as part of the focus program `Deduktion'. where termination could not be proved automatically before. For a collection of examples see <ref> [AG96b] </ref>. In Sect. 6 we give some comments on related work followed by a short conclusion in Sect. 7. 2 Dependency Pairs For constructor systems it is common to split the signature into two disjoint sets, the defined symbols and the constructors. <p> The only other complete criterion that has been used for automatic termination proofs (by J. Steinbach [Ste95a]) is the approach of transformation orderings [BL90]. It turns out that the termination of several examples where the automation of Steinbach failed can be proved by our technique automatically, cf. <ref> [AG96b] </ref>. 10 At first sight there seem to be some similarities between our method and forward closures [LM78, DH95]. The idea of forward closures is to restrict the application of rules to that part of a term created by previous rewrites. <p> A collection of 42 such examples, including arithmetical operations (e.g. mod, gcd, logarithm, average), sorting algorithms (such as selection sort, minimum sort, and quicksort), algorithms on graphs and trees, and several other well-known non-simply terminating TRSs (e.g. from [Der87, Ste95a, DH95]), can be found in <ref> [AG96b] </ref>. In 80 % of these examples, methods for the synthesis of path orderings could be applied to generate an ordering satisfying the inequalities resulting from our technique (whereas for the other examples we used polynomial orderings). Acknowledgements. We thank Hans Zantema for helpful hints and comments. 11
Reference: [AG97] <author> T. Arts and J. Giesl. </author> <title> Proving innermost normalisation automatically. </title> <booktitle> In Proceedings of RTA'97, </booktitle> <month> June 2-4, </month> <year> 1997. </year>
Reference-contexts: Moreover, by the introduction of dependency graphs we obtained a considerably more powerful automated technique than the method proposed in [AG96a]. Recently, we also developed a method for proving innermost normalisation using dependency pairs <ref> [AG97] </ref>, which can be applied for termination proofs, too. However, this can only be done for non-overlapping TRSs (where innermost normalisation is sufficient for termination), whereas the technique described in the present paper can be used for arbitrary rewrite systems.
Reference: [Art96] <author> T. </author> <title> Arts. Termination by absence of infinite chains of dependency pairs. </title> <booktitle> In Proceedings of CAAP'96, </booktitle> <volume> LNCS 1059, </volume> <pages> pages 196-210, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: Since the variables in ren (cap (t i )) are disjoint from the variables in ren (cap (t j )) for all i 6= j, ren (cap (t)) also matches v. ut 6 Related Work The concept of dependency pairs was introduced in <ref> [Art96] </ref> and a first method for its automation was proposed in [AG96a]. However, these approaches were restricted to non-overlapping constructor systems without nested recursion, whereas in the present paper we extended the technique to arbitrary TRSs. <p> There is a relation between dependency pairs and semantic labelling [Zan95], because the dependency pairs correspond to the labels of a TRS labelled by the process of self -labelling. But in contrast to the approaches of <ref> [Art96, AG96a] </ref>, our new termination criterion is no longer directly based on semantic labelling. Therefore this new criterion is better suited for automation (as one does not have to construct a suitable semantic interpretation any more) and its soundness can be proved in a much easier and shorter way.
Reference: [BL87] <author> A. Ben Cherifa and P. Lescanne. </author> <title> Termination of rewriting systems by polynomial interpretations and its implementation. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 9 </volume> <pages> 137-159, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction Termination is one of the most fundamental properties of a term rewriting system, cf. e.g. [DJ90]. While in general this problem is undecidable [HL78], several methods for proving termination have been developed (e.g. path order-ings [DH95, Ste95b], forward closures [LM78, DH95], semantic interpretations <ref> [Lan79, BL87, Ste94, Zan94, Gie95] </ref>, transformation orderings [BL90, Ste95a], semantic labelling [Zan95] etc. | for surveys see e.g. [Der87, Ste95b]). In this paper we present a new approach for the automation of termination proofs.
Reference: [BL90] <author> F. Bellegarde and P. Lescanne. </author> <title> Termination by completion. Applicable Algebra in Engineering, </title> <journal> Communication and Computing, </journal> <volume> 1 </volume> <pages> 79-96, </pages> <year> 1990. </year>
Reference-contexts: While in general this problem is undecidable [HL78], several methods for proving termination have been developed (e.g. path order-ings [DH95, Ste95b], forward closures [LM78, DH95], semantic interpretations [Lan79, BL87, Ste94, Zan94, Gie95], transformation orderings <ref> [BL90, Ste95a] </ref>, semantic labelling [Zan95] etc. | for surveys see e.g. [Der87, Ste95b]). In this paper we present a new approach for the automation of termination proofs. <p> The only other complete criterion that has been used for automatic termination proofs (by J. Steinbach [Ste95a]) is the approach of transformation orderings <ref> [BL90] </ref>. It turns out that the termination of several examples where the automation of Steinbach failed can be proved by our technique automatically, cf. [AG96b]. 10 At first sight there seem to be some similarities between our method and forward closures [LM78, DH95].
Reference: [Der81] <author> N. Dershowitz. </author> <title> Termination of linear rewriting systems. </title> <booktitle> In Proceedings of ALP'81, </booktitle> <volume> LNCS 115, </volume> <pages> pages 448-458, </pages> <month> July </month> <year> 1981. </year>
Reference-contexts: Compared to the forward closure approach, the dependency pair technique has the advantage that it can be used for arbitrary TRSs, whereas the absence of infinite forwards closures only implies termination for right-linear <ref> [Der81] </ref> or non-overlapping [Geu89] TRSs. Moreover, in contrast to the dependency pair method, we do not know of any attempt to automate the forward closure approach. 7 Conclusion We have developed a method for automated termination proofs of term rewriting systems.
Reference: [Der87] <author> N. Dershowitz. </author> <title> Termination of rewriting. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 3(1 and </volume> 2):69-116, 1987. 
Reference-contexts: While in general this problem is undecidable [HL78], several methods for proving termination have been developed (e.g. path order-ings [DH95, Ste95b], forward closures [LM78, DH95], semantic interpretations [Lan79, BL87, Ste94, Zan94, Gie95], transformation orderings [BL90, Ste95a], semantic labelling [Zan95] etc. | for surveys see e.g. <ref> [Der87, Ste95b] </ref>). In this paper we present a new approach for the automation of termination proofs. The formal definitions needed are introduced in Sect. 2 and in Sect. 3 we present a new termination criterion and prove its soundness and completeness. <p> l (e.g. sum applied to the list [1; 2; 3] returns [1+2+3]). app (nil; k) ! k sum (x.nil) ! x.nil app (x.l; k) ! x.app (l; k) sum (app (l; x.y.k)) ! sum (app (l; sum (x.y.k))) Unfortunately, most methods for automated termination proofs are restricted to simplification orderings <ref> [Der87, Ste95b] </ref>. These methods cannot prove termination of systems like the TRS above, because the left-hand side of the last sum-rule is homeomorphically embedded in its right-hand side. <p> Proof. As l % r holds for all rules l ! r and as % is weakly monotonic and closed under substitution, we have ! fl R % , i.e. t ! fl R s implies t % s (cf. e.g. <ref> [Der87] </ref>). Suppose there is an infinite R-chain hs 1 ; t 1 ihs 2 ; t 2 i : : : , then there exists a substitution such that t i ! fl R s i+1 holds for all i. <p> A collection of 42 such examples, including arithmetical operations (e.g. mod, gcd, logarithm, average), sorting algorithms (such as selection sort, minimum sort, and quicksort), algorithms on graphs and trees, and several other well-known non-simply terminating TRSs (e.g. from <ref> [Der87, Ste95a, DH95] </ref>), can be found in [AG96b]. In 80 % of these examples, methods for the synthesis of path orderings could be applied to generate an ordering satisfying the inequalities resulting from our technique (whereas for the other examples we used polynomial orderings). Acknowledgements.
Reference: [DH95] <author> N. Dershowitz and C. Hoot. </author> <title> Natural termination. </title> <journal> Theoretical Computer Science, </journal> <volume> 142(2) </volume> <pages> 179-207, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction Termination is one of the most fundamental properties of a term rewriting system, cf. e.g. [DJ90]. While in general this problem is undecidable [HL78], several methods for proving termination have been developed (e.g. path order-ings <ref> [DH95, Ste95b] </ref>, forward closures [LM78, DH95], semantic interpretations [Lan79, BL87, Ste94, Zan94, Gie95], transformation orderings [BL90, Ste95a], semantic labelling [Zan95] etc. | for surveys see e.g. [Der87, Ste95b]). In this paper we present a new approach for the automation of termination proofs. <p> 1 Introduction Termination is one of the most fundamental properties of a term rewriting system, cf. e.g. [DJ90]. While in general this problem is undecidable [HL78], several methods for proving termination have been developed (e.g. path order-ings [DH95, Ste95b], forward closures <ref> [LM78, DH95] </ref>, semantic interpretations [Lan79, BL87, Ste94, Zan94, Gie95], transformation orderings [BL90, Ste95a], semantic labelling [Zan95] etc. | for surveys see e.g. [Der87, Ste95b]). In this paper we present a new approach for the automation of termination proofs. <p> We have presented a sound and complete termination criterion. In contrast to most other complete approaches (semantic path ordering [KL80], general path ordering <ref> [DH95] </ref>, semantic labelling [Zan95] etc.) our method is particularly well suited for automation as has been demonstrated in this paper. The only other complete criterion that has been used for automatic termination proofs (by J. Steinbach [Ste95a]) is the approach of transformation orderings [BL90]. <p> Steinbach [Ste95a]) is the approach of transformation orderings [BL90]. It turns out that the termination of several examples where the automation of Steinbach failed can be proved by our technique automatically, cf. [AG96b]. 10 At first sight there seem to be some similarities between our method and forward closures <ref> [LM78, DH95] </ref>. The idea of forward closures is to restrict the application of rules to that part of a term created by previous rewrites. Similar to our notion of chains, this notion also results in a sequence of terms, but the semantics of these sequences are completely different. <p> A collection of 42 such examples, including arithmetical operations (e.g. mod, gcd, logarithm, average), sorting algorithms (such as selection sort, minimum sort, and quicksort), algorithms on graphs and trees, and several other well-known non-simply terminating TRSs (e.g. from <ref> [Der87, Ste95a, DH95] </ref>), can be found in [AG96b]. In 80 % of these examples, methods for the synthesis of path orderings could be applied to generate an ordering satisfying the inequalities resulting from our technique (whereas for the other examples we used polynomial orderings). Acknowledgements.
Reference: [DJ90] <author> N. Dershowitz and J.-P. Jouannaud. </author> <title> Rewrite systems. </title> <booktitle> In Handbook of Theoretical Computer Science, </booktitle> <volume> volume B, </volume> <pages> pages 243-320, </pages> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction Termination is one of the most fundamental properties of a term rewriting system, cf. e.g. <ref> [DJ90] </ref>. While in general this problem is undecidable [HL78], several methods for proving termination have been developed (e.g. path order-ings [DH95, Ste95b], forward closures [LM78, DH95], semantic interpretations [Lan79, BL87, Ste94, Zan94, Gie95], transformation orderings [BL90, Ste95a], semantic labelling [Zan95] etc. | for surveys see e.g. [Der87, Ste95b]).
Reference: [Geu89] <author> O. Geupel. </author> <title> Overlap closures and termination of term rewriting systems. </title> <type> Technical Report MIP-8922 283, </type> <institution> Universitat Passau, Passau, Germany, </institution> <year> 1989. </year>
Reference-contexts: Compared to the forward closure approach, the dependency pair technique has the advantage that it can be used for arbitrary TRSs, whereas the absence of infinite forwards closures only implies termination for right-linear [Der81] or non-overlapping <ref> [Geu89] </ref> TRSs. Moreover, in contrast to the dependency pair method, we do not know of any attempt to automate the forward closure approach. 7 Conclusion We have developed a method for automated termination proofs of term rewriting systems.
Reference: [Gie95] <author> J. Giesl. </author> <title> Generating polynomial orderings for termination proofs. </title> <booktitle> In Proceedings of RTA-95, </booktitle> <volume> LNCS 914, </volume> <pages> pages 426-431, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Termination is one of the most fundamental properties of a term rewriting system, cf. e.g. [DJ90]. While in general this problem is undecidable [HL78], several methods for proving termination have been developed (e.g. path order-ings [DH95, Ste95b], forward closures [LM78, DH95], semantic interpretations <ref> [Lan79, BL87, Ste94, Zan94, Gie95] </ref>, transformation orderings [BL90, Ste95a], semantic labelling [Zan95] etc. | for surveys see e.g. [Der87, Ste95b]). In this paper we present a new approach for the automation of termination proofs. <p> Methods for the automated generation of polynomial orderings have for instance been developed in <ref> [Ste94, Gie95] </ref>. In this way, termination of this TRS can be proved fully automatically, although a direct termination proof with simplification orderings was not possible.
Reference: [HL78] <author> G. Huet and D. Lankford. </author> <title> On the uniform halting problem for term rewriting systems. </title> <type> Technical Report 283, </type> <institution> INRIA, Le Chesnay, France, </institution> <year> 1978. </year>
Reference-contexts: 1 Introduction Termination is one of the most fundamental properties of a term rewriting system, cf. e.g. [DJ90]. While in general this problem is undecidable <ref> [HL78] </ref>, several methods for proving termination have been developed (e.g. path order-ings [DH95, Ste95b], forward closures [LM78, DH95], semantic interpretations [Lan79, BL87, Ste94, Zan94, Gie95], transformation orderings [BL90, Ste95a], semantic labelling [Zan95] etc. | for surveys see e.g. [Der87, Ste95b]).
Reference: [KL80] <author> S. Kamin and J.-J. Levy. </author> <title> Two generalizations of the recursive path ordering. </title> <institution> Department of Computer Science, University of Illinois, IL, </institution> <year> 1980. </year>
Reference-contexts: The reason is that for all those TRSs where termination could be proved with a simplification ordering directly, this simplification ordering also satisfies the inequalities resulting from our technique. We have presented a sound and complete termination criterion. In contrast to most other complete approaches (semantic path ordering <ref> [KL80] </ref>, general path ordering [DH95], semantic labelling [Zan95] etc.) our method is particularly well suited for automation as has been demonstrated in this paper. The only other complete criterion that has been used for automatic termination proofs (by J. Steinbach [Ste95a]) is the approach of transformation orderings [BL90].
Reference: [Kri95] <author> M. R. K. Krishna Rao. </author> <title> Modular proofs for completeness of hierarchical term rewriting systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 151 </volume> <pages> 487-512, </pages> <year> 1995. </year>
Reference-contexts: The following definition extends these notions to arbitrary term rewriting systems R (F ; R) (with the rules R over a signature F ). Here, the root of a term f (: : :) is the leading function symbol f . Definition 1 (Defined Symbols and Constructors, cf. <ref> [Kri95] </ref>). The set D R of defined symbols of a TRS R (F; R) is defined as froot (l) j l ! r 2 Rg and the set C R of constructor symbols of R (F ; R) is defined as F n D R .
Reference: [Lan79] <author> D. S. Lankford. </author> <title> On proving term rewriting systems are noetherian. </title> <type> Technical Report Memo MTP-3, </type> <institution> Louisiana Tech. University, Ruston, LA, </institution> <year> 1979. </year>
Reference-contexts: 1 Introduction Termination is one of the most fundamental properties of a term rewriting system, cf. e.g. [DJ90]. While in general this problem is undecidable [HL78], several methods for proving termination have been developed (e.g. path order-ings [DH95, Ste95b], forward closures [LM78, DH95], semantic interpretations <ref> [Lan79, BL87, Ste94, Zan94, Gie95] </ref>, transformation orderings [BL90, Ste95a], semantic labelling [Zan95] etc. | for surveys see e.g. [Der87, Ste95b]). In this paper we present a new approach for the automation of termination proofs. <p> app (nil; k) % k app (x.l; k) % x.app (l; k) sum (x.y.l) % sum ((x + y).l) APP (x.l; k) APP (l; k) SUM (app (l; x.y.k)) SUM (x.y.k) SUM (app (l; x.y.k)) SUM (app (l; sum (x.y.k))) For example, these inequalities are satisfied by a polynomial ordering <ref> [Lan79] </ref> where nil is mapped to the constant 0, x.l is mapped to l + 1, (x + y) is mapped to x + y, app (l; k) is mapped to l + k + 1, sum (l) is mapped to the constant 1, and APP (l; k) and SUM (l)
Reference: [LM78] <author> D. S. Lankford and D. R. Musser. </author> <title> A finite termination criterion, </title> <year> 1978. </year>
Reference-contexts: 1 Introduction Termination is one of the most fundamental properties of a term rewriting system, cf. e.g. [DJ90]. While in general this problem is undecidable [HL78], several methods for proving termination have been developed (e.g. path order-ings [DH95, Ste95b], forward closures <ref> [LM78, DH95] </ref>, semantic interpretations [Lan79, BL87, Ste94, Zan94, Gie95], transformation orderings [BL90, Ste95a], semantic labelling [Zan95] etc. | for surveys see e.g. [Der87, Ste95b]). In this paper we present a new approach for the automation of termination proofs. <p> Steinbach [Ste95a]) is the approach of transformation orderings [BL90]. It turns out that the termination of several examples where the automation of Steinbach failed can be proved by our technique automatically, cf. [AG96b]. 10 At first sight there seem to be some similarities between our method and forward closures <ref> [LM78, DH95] </ref>. The idea of forward closures is to restrict the application of rules to that part of a term created by previous rewrites. Similar to our notion of chains, this notion also results in a sequence of terms, but the semantics of these sequences are completely different.
Reference: [Ste94] <author> J. Steinbach. </author> <title> Generating polynomial orderings. </title> <journal> Information Processing Letters, </journal> <volume> 49 </volume> <pages> 85-93, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction Termination is one of the most fundamental properties of a term rewriting system, cf. e.g. [DJ90]. While in general this problem is undecidable [HL78], several methods for proving termination have been developed (e.g. path order-ings [DH95, Ste95b], forward closures [LM78, DH95], semantic interpretations <ref> [Lan79, BL87, Ste94, Zan94, Gie95] </ref>, transformation orderings [BL90, Ste95a], semantic labelling [Zan95] etc. | for surveys see e.g. [Der87, Ste95b]). In this paper we present a new approach for the automation of termination proofs. <p> Methods for the automated generation of polynomial orderings have for instance been developed in <ref> [Ste94, Gie95] </ref>. In this way, termination of this TRS can be proved fully automatically, although a direct termination proof with simplification orderings was not possible.
Reference: [Ste95a] <author> J. Steinbach. </author> <title> Automatic termination proofs with transformation orderings. </title> <booktitle> In Proceedings of RTA-95, </booktitle> <volume> LNCS 914, </volume> <pages> pages 11-25, </pages> <month> April </month> <year> 1995. </year> <note> Long version appeared as Tech. Report SR-92-23, </note> <institution> Univ. Kaiserslautern, Germany, </institution> <year> 1992. </year>
Reference-contexts: While in general this problem is undecidable [HL78], several methods for proving termination have been developed (e.g. path order-ings [DH95, Ste95b], forward closures [LM78, DH95], semantic interpretations [Lan79, BL87, Ste94, Zan94, Gie95], transformation orderings <ref> [BL90, Ste95a] </ref>, semantic labelling [Zan95] etc. | for surveys see e.g. [Der87, Ste95b]). In this paper we present a new approach for the automation of termination proofs. <p> The only other complete criterion that has been used for automatic termination proofs (by J. Steinbach <ref> [Ste95a] </ref>) is the approach of transformation orderings [BL90]. It turns out that the termination of several examples where the automation of Steinbach failed can be proved by our technique automatically, cf. [AG96b]. 10 At first sight there seem to be some similarities between our method and forward closures [LM78, DH95]. <p> A collection of 42 such examples, including arithmetical operations (e.g. mod, gcd, logarithm, average), sorting algorithms (such as selection sort, minimum sort, and quicksort), algorithms on graphs and trees, and several other well-known non-simply terminating TRSs (e.g. from <ref> [Der87, Ste95a, DH95] </ref>), can be found in [AG96b]. In 80 % of these examples, methods for the synthesis of path orderings could be applied to generate an ordering satisfying the inequalities resulting from our technique (whereas for the other examples we used polynomial orderings). Acknowledgements.
Reference: [Ste95b] <author> J. Steinbach. </author> <title> Simplification orderings: history of results. </title> <journal> Fundamenta Infor-maticae, </journal> <volume> 24 </volume> <pages> 47-87, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction Termination is one of the most fundamental properties of a term rewriting system, cf. e.g. [DJ90]. While in general this problem is undecidable [HL78], several methods for proving termination have been developed (e.g. path order-ings <ref> [DH95, Ste95b] </ref>, forward closures [LM78, DH95], semantic interpretations [Lan79, BL87, Ste94, Zan94, Gie95], transformation orderings [BL90, Ste95a], semantic labelling [Zan95] etc. | for surveys see e.g. [Der87, Ste95b]). In this paper we present a new approach for the automation of termination proofs. <p> While in general this problem is undecidable [HL78], several methods for proving termination have been developed (e.g. path order-ings [DH95, Ste95b], forward closures [LM78, DH95], semantic interpretations [Lan79, BL87, Ste94, Zan94, Gie95], transformation orderings [BL90, Ste95a], semantic labelling [Zan95] etc. | for surveys see e.g. <ref> [Der87, Ste95b] </ref>). In this paper we present a new approach for the automation of termination proofs. The formal definitions needed are introduced in Sect. 2 and in Sect. 3 we present a new termination criterion and prove its soundness and completeness. <p> l (e.g. sum applied to the list [1; 2; 3] returns [1+2+3]). app (nil; k) ! k sum (x.nil) ! x.nil app (x.l; k) ! x.app (l; k) sum (app (l; x.y.k)) ! sum (app (l; sum (x.y.k))) Unfortunately, most methods for automated termination proofs are restricted to simplification orderings <ref> [Der87, Ste95b] </ref>. These methods cannot prove termination of systems like the TRS above, because the left-hand side of the last sum-rule is homeomorphically embedded in its right-hand side.
Reference: [Toy87] <author> Y. Toyama. </author> <title> Counterexamples to the termination for the direct sum of term rewriting systems. </title> <journal> Information Processing Letters, </journal> <volume> 25 </volume> <pages> 141-143, </pages> <year> 1987. </year>
Reference-contexts: In order to ensure that t is connectable to u whenever there exists a substitution such that t ! fl R u, before unification we also have to rename multiple occurrences of the same variable. As an example consider the following TRS from <ref> [Toy87] </ref>. f (0; 1; x) ! f (x; x; x) g (x; y) ! y The only dependency pair, viz. hF (0; 1; x); F (x; x; x)i, is on a cycle of the dependency graph, because F (x; x; x) reduces to F (0; 1; x 0 ), if replaces
Reference: [Zan94] <author> H. Zantema. </author> <title> Termination of term rewriting: interpretation and type elimination. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 17 </volume> <pages> 23-50, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction Termination is one of the most fundamental properties of a term rewriting system, cf. e.g. [DJ90]. While in general this problem is undecidable [HL78], several methods for proving termination have been developed (e.g. path order-ings [DH95, Ste95b], forward closures [LM78, DH95], semantic interpretations <ref> [Lan79, BL87, Ste94, Zan94, Gie95] </ref>, transformation orderings [BL90, Ste95a], semantic labelling [Zan95] etc. | for surveys see e.g. [Der87, Ste95b]). In this paper we present a new approach for the automation of termination proofs.
Reference: [Zan95] <author> H. Zantema. </author> <title> Termination of term rewriting by semantic labelling. </title> <journal> Funda-menta Informaticae, </journal> <volume> 24 </volume> <pages> 89-105, </pages> <year> 1995. </year> <month> 12 </month>
Reference-contexts: While in general this problem is undecidable [HL78], several methods for proving termination have been developed (e.g. path order-ings [DH95, Ste95b], forward closures [LM78, DH95], semantic interpretations [Lan79, BL87, Ste94, Zan94, Gie95], transformation orderings [BL90, Ste95a], semantic labelling <ref> [Zan95] </ref> etc. | for surveys see e.g. [Der87, Ste95b]). In this paper we present a new approach for the automation of termination proofs. The formal definitions needed are introduced in Sect. 2 and in Sect. 3 we present a new termination criterion and prove its soundness and completeness. <p> However, these approaches were restricted to non-overlapping constructor systems without nested recursion, whereas in the present paper we extended the technique to arbitrary TRSs. There is a relation between dependency pairs and semantic labelling <ref> [Zan95] </ref>, because the dependency pairs correspond to the labels of a TRS labelled by the process of self -labelling. But in contrast to the approaches of [Art96, AG96a], our new termination criterion is no longer directly based on semantic labelling. <p> We have presented a sound and complete termination criterion. In contrast to most other complete approaches (semantic path ordering [KL80], general path ordering [DH95], semantic labelling <ref> [Zan95] </ref> etc.) our method is particularly well suited for automation as has been demonstrated in this paper. The only other complete criterion that has been used for automatic termination proofs (by J. Steinbach [Ste95a]) is the approach of transformation orderings [BL90].
References-found: 23

