URL: http://www.eecs.umich.edu/~gurevich/Opera/104.ps
Refering-URL: http://www.eecs.umich.edu/~gurevich/annotated.html
Root-URL: http://www.cs.umich.edu
Email: graedel@informatik.rwth-aachen.de  gurevich@umich.edu  
Title: Tailoring recursion for complexity  
Author: Erich Gradel Yuri Gurevich 
Date: August 1994  
Address: RWTH Aachen Ahornstr. 55 D-52074 Aachen Germany  Ann Arbor MI 48109-2122  
Affiliation: Lehrgebiet Math. Grundlagen der Informatik  EECS Department University of Michigan  
Abstract: We design functional algebras that characterize various complexity classes of global functions. For this purpose, classical schemata from recursion theory are tailored for capturing complexity. In particular we present a functional analogue of first-order logic and describe algebras of the functions computable in nondeterministic logarithmic space, deterministic and nondeterministic polynomial time, and for the functions computable by AC 1 -circuits.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul and V. Vianu, </author> <title> Datalog Extensions for Database Queries and Updates, </title> <editor> J. </editor> <booktitle> Computer and System Sciences 43 (1991), </booktitle> <pages> 62-124. </pages>
Reference-contexts: In fact this fixpoint construction is analogous to partial fixed point logic which captures Pspace on ordered structures (see <ref> [1, 28] </ref>).
Reference: [2] <author> J. Balcazar, J. Daz and J. Gabarro, </author> <title> Structural Complexity, vol I and II, </title> <publisher> Springer Verlag 1988/1990. </publisher>
Reference-contexts: It is useful to restate the uniformity condition in circuit complexity (see e.g. <ref> [2] </ref>) in algebraic terms. Note, that L (?) is the algebra of primitive recursive, i.e. logspace-computable, global functions over the empty signature. Thus a function in L (?) depends only on the cardinality of the input structure.
Reference: [3] <author> S. Bellantoni and S. Cook, </author> <title> A New Recursion-Theoretic Characterization of the Polytime Functions, </title> <booktitle> Proceedings of 24th ACM Symposium on the Theory of Computing (1992), </booktitle> <pages> 283-293. </pages>
Reference-contexts: It should be noted that there exists another approach to characterizing complexity using functional algebras. In fact, one of the very first papers on polynomial-time computability, by Cobham [6], constructs an algebra of polynomial-time computable functions. The distinction between the two approaches is this: Cobham and his followers (see <ref> [3, 5] </ref> and references there) deal with algebras of number-theoretic functions over N. One of their goals is to relate complexity theoretic statements to proof-theoretic assertions about weak systems of arithmetic.
Reference: [4] <author> J. Buchi, </author> <title> Weak second-order arithmetic and finite automata, </title> <journal> Z. Math. Logik Grundlagen Math. </journal> <volume> 6 (1960), </volume> <pages> 66-92. </pages>
Reference-contexts: Then L is in NP if and only if there exists an existential second-order sentence such that L is precisely the class of finite models of . But there were earlier relevant results, most noticably, the characterization of the regular languages by means of monadic second-order logic <ref> [4, 27] </ref>. Immerman and Vardi [18, 28] proved that, on ordered structures, the problems solvable in polynomial time are exactly those definable in least fixed-point logic. A similar result was obtained independently by Livchak [23].
Reference: [5] <author> S. Buss, </author> <title> Bounded Arithmetic, </title> <publisher> Bibliopolis, </publisher> <month> Napels </month> <year> 1986. </year>
Reference-contexts: It should be noted that there exists another approach to characterizing complexity using functional algebras. In fact, one of the very first papers on polynomial-time computability, by Cobham [6], constructs an algebra of polynomial-time computable functions. The distinction between the two approaches is this: Cobham and his followers (see <ref> [3, 5] </ref> and references there) deal with algebras of number-theoretic functions over N. One of their goals is to relate complexity theoretic statements to proof-theoretic assertions about weak systems of arithmetic.
Reference: [6] <author> A. Cobham, </author> <title> The intrinsic computational difficulty of functions, </title> <editor> in: Y. Bar-Hillel (Ed.), </editor> <booktitle> Logic, Methodology and Philosophy of Science II, </booktitle> <publisher> North-Holland, </publisher> <address> Amsterdam 1965. </address>
Reference-contexts: Remark. It should be noted that there exists another approach to characterizing complexity using functional algebras. In fact, one of the very first papers on polynomial-time computability, by Cobham <ref> [6] </ref>, constructs an algebra of polynomial-time computable functions. The distinction between the two approaches is this: Cobham and his followers (see [3, 5] and references there) deal with algebras of number-theoretic functions over N.
Reference: [7] <author> K. Compton and C. Laflamme, </author> <title> An Algebra and a Logic for NC 1 , Information and Computation 87 (1990), </title> <type> 241-263. </type>
Reference-contexts: A variant of the latter result was obtained earlier by Sazonov [25] in a different context. Goerdt [9] and Libo Lo [24] extended Gurevich's results to higher complexity classes such as Pspace and Exptime, and Compton and Laflamme <ref> [7] </ref> constructed a functional algebra for NC 1 in the same spirit. This paper develops the functional approach further. We design functional algebras that characterize various complexity classes. <p> We therefore can say, that a sequence (C n ) n2N is log-uniform if the global functions edge, and, or, neg, in, out that characterize (C n ) n2N belong to L (?). We are interested in circuit sequences that compute global functions. The following definition is taken from <ref> [7] </ref>: Definition 8.1 Let be a signature and f a global function on O () of arity r and coarity s.
Reference: [8] <author> R. Fagin, </author> <title> Generalized first-order spectra and polynomial-time recognizable sets, </title> <booktitle> SIAM-AMS Proc. 7 (1974), </booktitle> <pages> 43-73. </pages>
Reference-contexts: 1 Introduction The design and investigation of logical languages that capture the major complexity classes has been (and still is) one of the most important topics in finite model theory. The modern history starts with Fagin's theorem <ref> [8] </ref>: Let L be class of finite structures of some fixed signature which is closed under isomorphisms. Then L is in NP if and only if there exists an existential second-order sentence such that L is precisely the class of finite models of . <p> For instance, logarithmic space complexity classes are captured by various forms of transitive closure logics [19]. The most important results in this field are surveyed in [14, 21]. These logical characterizations of complexity are model theoretic and based either on fragments of second-order logic <ref> [8, 10] </ref> or on extensions of first-order logic by additional means to construct new relations (such as generalized quantifiers or predicate transformers). They are mostly logics of relations.
Reference: [9] <author> A. Goerdt, </author> <title> Characterizing complexity classes by general recursive definitions in higher types, </title> <booktitle> Proceedings of 2nd workshop on Computer Science Logic CSL `88, Lecture Notes in Computer Science Nr. 385, Springer (1989), </booktitle> <pages> 99-117. </pages>
Reference-contexts: Gurevich noticed that interpreting the classical calculus of primitive recursive functions (resp. recursive functions) over finite structures gives precisely the log-space (resp. polynomial time) computable global functions [12, 14]. A variant of the latter result was obtained earlier by Sazonov [25] in a different context. Goerdt <ref> [9] </ref> and Libo Lo [24] extended Gurevich's results to higher complexity classes such as Pspace and Exptime, and Compton and Laflamme [7] constructed a functional algebra for NC 1 in the same spirit. This paper develops the functional approach further. We design functional algebras that characterize various complexity classes.
Reference: [10] <author> E. Gradel, </author> <title> Capturing Complexity Classes by Fragments of Second Order Logic, </title> <booktitle> Theoretical Computer Science 101 (1992), </booktitle> <pages> 35-57. </pages>
Reference-contexts: For instance, logarithmic space complexity classes are captured by various forms of transitive closure logics [19]. The most important results in this field are surveyed in [14, 21]. These logical characterizations of complexity are model theoretic and based either on fragments of second-order logic <ref> [8, 10] </ref> or on extensions of first-order logic by additional means to construct new relations (such as generalized quantifiers or predicate transformers). They are mostly logics of relations.
Reference: [11] <author> E. Gradel and M. Otto, </author> <title> Inductive Definability with Counting on Finite Structures, </title> <booktitle> Proceedings of CSL92, Lecture Notes in Computer Science Nr ??? (1993), </booktitle> <pages> 231-247. 17 </pages>
Reference-contexts: Function symbols may appear in the signature, and may be composed to form terms, but fl partially supported by NSF and ONR 1 the role of terms is very limited: in most model-theoretic languages we can only construct formulae from terms, not vice versa (for an exception, see <ref> [11] </ref>). However, there is a related, but different approach to capturing complexity by logic, which is functional in nature and draws more on recursion theory than model theory.
Reference: [12] <author> Y. Gurevich, </author> <title> Algebras of feasible functions, </title> <booktitle> Proceedings of 24 th IEEE Symposium on Founda--tions of Computer Science 1983, </booktitle> <pages> 210-214. </pages>
Reference-contexts: Gurevich noticed that interpreting the classical calculus of primitive recursive functions (resp. recursive functions) over finite structures gives precisely the log-space (resp. polynomial time) computable global functions <ref> [12, 14] </ref>. A variant of the latter result was obtained earlier by Sazonov [25] in a different context. <p> Indeed the function := max [eq (x; r (x))] evaluates to 1 precisely on the structures of odd cardinality. Since this property is not expressible in first-order logic even on ordered structures [13], cannot be first-order. 5 4 An algebra for F-NLOG Gurevich considered in <ref> [12, 14] </ref> the closure of the initial functions under composition and the well-known schema for primitive recursion: f (x; 0) = g (x) For given signature , we denote this class by L (). Further, L = S L (). <p> Further, L = S L (). Although a slightly different class of initial functions is used in <ref> [12, 14] </ref>, it is easy to see that semantically, the class L remains unchanged. Gurevich proved Theorem 4.1 A global function is logspace computable if and only if it is in L. In this section we present an algebra describing the global functions computable in nondeterministic logspace.
Reference: [13] <author> Y. Gurevich, </author> <title> Toward logic tailord for computational complexity, </title> <editor> in: M. M. Richter et al. (Eds), </editor> <booktitle> Computation and Proof Theory, Springer Lecture Notes in Mathematics Nr. 1104 (1984), </booktitle> <pages> 175-216. </pages>
Reference-contexts: Indeed the function := max [eq (x; r (x))] evaluates to 1 precisely on the structures of odd cardinality. Since this property is not expressible in first-order logic even on ordered structures <ref> [13] </ref>, cannot be first-order. 5 4 An algebra for F-NLOG Gurevich considered in [12, 14] the closure of the initial functions under composition and the well-known schema for primitive recursion: f (x; 0) = g (x) For given signature , we denote this class by L ().
Reference: [14] <author> Y. Gurevich, </author> <title> Logic and the Challenge of Computer Science, </title> <editor> in: E. Borger (Ed), </editor> <booktitle> Trends in Theoretical Computer Science, </booktitle> <publisher> Computer Science Press (1988), </publisher> <pages> 1-57. </pages>
Reference-contexts: For instance, logarithmic space complexity classes are captured by various forms of transitive closure logics [19]. The most important results in this field are surveyed in <ref> [14, 21] </ref>. These logical characterizations of complexity are model theoretic and based either on fragments of second-order logic [8, 10] or on extensions of first-order logic by additional means to construct new relations (such as generalized quantifiers or predicate transformers). They are mostly logics of relations. <p> Gurevich noticed that interpreting the classical calculus of primitive recursive functions (resp. recursive functions) over finite structures gives precisely the log-space (resp. polynomial time) computable global functions <ref> [12, 14] </ref>. A variant of the latter result was obtained earlier by Sazonov [25] in a different context. <p> Indeed the function := max [eq (x; r (x))] evaluates to 1 precisely on the structures of odd cardinality. Since this property is not expressible in first-order logic even on ordered structures [13], cannot be first-order. 5 4 An algebra for F-NLOG Gurevich considered in <ref> [12, 14] </ref> the closure of the initial functions under composition and the well-known schema for primitive recursion: f (x; 0) = g (x) For given signature , we denote this class by L (). Further, L = S L (). <p> Further, L = S L (). Although a slightly different class of initial functions is used in <ref> [12, 14] </ref>, it is easy to see that semantically, the class L remains unchanged. Gurevich proved Theorem 4.1 A global function is logspace computable if and only if it is in L. In this section we present an algebra describing the global functions computable in nondeterministic logspace.
Reference: [15] <author> Y. Gurevich and H. Lewis, </author> <title> A Logic for Constant-Depth Circuits, </title> <booktitle> Information and Control 61 (1984), </booktitle> <pages> 65-74. </pages>
Reference-contexts: The following result is due to Gurevich and Lewis <ref> [15] </ref>: Theorem 8.3 A global function over can be implemented by a log-uniform sequence of constant-depth polynomial-size circuits if and only if it is in S ( + L (?)).
Reference: [16] <author> Y. Gurevich and S. Shelah, </author> <title> Fixed Point Extensions of First Order Logic, </title> <booktitle> Annals of Pure and Applied Logic 32 (1986), </booktitle> <pages> 265-280. </pages>
Reference-contexts: We denote the closure of the first-order function under this schema by IFFP (for inflationary functional fixed points). IFFP is a functional analogue to the inflationary fixed point logic of Gurevich and Shelah <ref> [16] </ref>. On finite structures inflationary fixed point logic has the same expressive power as least fixed point logic [16], even without a built-in order. Therefore, it captures Ptime on ordered structures. It easy to see that this implies the following theorem. <p> IFFP is a functional analogue to the inflationary fixed point logic of Gurevich and Shelah <ref> [16] </ref>. On finite structures inflationary fixed point logic has the same expressive power as least fixed point logic [16], even without a built-in order. Therefore, it captures Ptime on ordered structures. It easy to see that this implies the following theorem.
Reference: [17] <author> N. Immerman, </author> <title> Upper and lower bounds for first-order expressibility, </title> <journal> J. Comput. System Sci. </journal> <volume> 25 (1982), </volume> <pages> 76-98. </pages>
Reference: [18] <author> N. Immerman, </author> <title> Relational queries computable in polynomial time, </title> <booktitle> Information and Control 68 (1986), </booktitle> <pages> 86-104. </pages>
Reference-contexts: But there were earlier relevant results, most noticably, the characterization of the regular languages by means of monadic second-order logic [4, 27]. Immerman and Vardi <ref> [18, 28] </ref> proved that, on ordered structures, the problems solvable in polynomial time are exactly those definable in least fixed-point logic. A similar result was obtained independently by Livchak [23].
Reference: [19] <author> N. Immerman, </author> <title> Languages that Capture Complexity Classes, </title> <journal> SIAM J. Comput. </journal> <volume> 16 (1987), </volume> <pages> 760-778. </pages>
Reference-contexts: A similar result was obtained independently by Livchak [23]. Immerman [17]-[21] systematically studied the problem of capturing complexity classes by logical languages and came up with logical characterizations for most popular complexity classes. For instance, logarithmic space complexity classes are captured by various forms of transitive closure logics <ref> [19] </ref>. The most important results in this field are surveyed in [14, 21].
Reference: [20] <author> N. Immerman, </author> <title> Nondeterministic space is closed under complementation, </title> <journal> SIAM J. Comput. </journal> <volume> 17 (1988), </volume> <pages> 935-939. </pages>
Reference-contexts: Indeed, let M be a nondeterministic machine computing f with logarithmic space according to Definition 2.2. Then the set L = f (A; a; b) j f A (a) bg is in Nlogspace, and by the result of Immerman and Szelepcsenyi <ref> [20, 26] </ref>, so is its complement. Consider the algorithm M 0 , which, given (A; a), guesses b and then decides whether (A; a; b) 2 L and (A; a; b + 1) 62 L. If yes, then M 0 produces output b, otherwise M 0 produces no output.
Reference: [21] <author> N. Immerman, </author> <title> Descriptive and Computational Complexity, </title> <editor> in: J. Hartmanis (Ed.), </editor> <title> Computational Complexity Theory, </title> <journal> Proc. of AMS Symposia in Appl. Math. </journal> <volume> 38 (1989), </volume> <pages> 75-91. </pages>
Reference-contexts: For instance, logarithmic space complexity classes are captured by various forms of transitive closure logics [19]. The most important results in this field are surveyed in <ref> [14, 21] </ref>. These logical characterizations of complexity are model theoretic and based either on fragments of second-order logic [8, 10] or on extensions of first-order logic by additional means to construct new relations (such as generalized quantifiers or predicate transformers). They are mostly logics of relations.
Reference: [22] <author> M. Krentel, </author> <title> The Complexity of Optimizaton Problems, </title> <journal> Journal of Computer and System Sciences 36 (1988), </journal> <pages> 490-509. </pages>
Reference-contexts: The nondeterministic classes are the more challenging for the functional approach. A priori, it is not even clear what the function is computed by agiven nondeterministic algorithm. We have rediscovered a definition first used by Krentel <ref> [22] </ref>: The value of the function in question at a given input is the maximum over all outputs produced by the algorithm on that input. In particular we present an algebra that captures the functions computed in this way in nondeterministic polynomial time. <p> Function classes defined in this way were first investigated by Krentel <ref> [22] </ref>. Note that in the case that M is an acceptor, i.e. produces only outputs 0 and 1, the function f M is the characteristic function of the set accepted by M according to the usual definition. We are particularly interested in global functions computed by nondeterministic algorithms.
Reference: [23] <author> A. Livchak, </author> <title> The Relational Model for Process Control, </title> <booktitle> Automatic Documentation and Mathematical Linguistics 4 (1983), 27-29 (in Russian). </booktitle>
Reference-contexts: Immerman and Vardi [18, 28] proved that, on ordered structures, the problems solvable in polynomial time are exactly those definable in least fixed-point logic. A similar result was obtained independently by Livchak <ref> [23] </ref>. Immerman [17]-[21] systematically studied the problem of capturing complexity classes by logical languages and came up with logical characterizations for most popular complexity classes. For instance, logarithmic space complexity classes are captured by various forms of transitive closure logics [19].
Reference: [24] <author> Libo Lo, </author> <title> Functions and Functionals on Finite Systems, </title> <journal> Journal of Symbolic Logic 57 (1992), </journal> <pages> 118-130. </pages>
Reference-contexts: A variant of the latter result was obtained earlier by Sazonov [25] in a different context. Goerdt [9] and Libo Lo <ref> [24] </ref> extended Gurevich's results to higher complexity classes such as Pspace and Exptime, and Compton and Laflamme [7] constructed a functional algebra for NC 1 in the same spirit. This paper develops the functional approach further. We design functional algebras that characterize various complexity classes.
Reference: [25] <author> V. Sazonov, </author> <title> Polynomial computability and recursivity in finite domains, </title> <journal> Elektronische Daten-verarbeitung und Kybernetik 16 (1980), </journal> <pages> 319-323. </pages>
Reference-contexts: Gurevich noticed that interpreting the classical calculus of primitive recursive functions (resp. recursive functions) over finite structures gives precisely the log-space (resp. polynomial time) computable global functions [12, 14]. A variant of the latter result was obtained earlier by Sazonov <ref> [25] </ref> in a different context. Goerdt [9] and Libo Lo [24] extended Gurevich's results to higher complexity classes such as Pspace and Exptime, and Compton and Laflamme [7] constructed a functional algebra for NC 1 in the same spirit. This paper develops the functional approach further.
Reference: [26] <author> R. Szelepcsenyi, </author> <title> The Method of Forced Enumeration for Nondeterministic Automata, </title> <journal> Acta Informatica 26 (1988), </journal> <pages> 279-284. </pages>
Reference-contexts: Indeed, let M be a nondeterministic machine computing f with logarithmic space according to Definition 2.2. Then the set L = f (A; a; b) j f A (a) bg is in Nlogspace, and by the result of Immerman and Szelepcsenyi <ref> [20, 26] </ref>, so is its complement. Consider the algorithm M 0 , which, given (A; a), guesses b and then decides whether (A; a; b) 2 L and (A; a; b + 1) 62 L. If yes, then M 0 produces output b, otherwise M 0 produces no output.
Reference: [27] <author> B. Trakhtenbrot, </author> <title> Finite automata and the logic of monadic predicates, </title> <journal> Doklady Akademii Nauk SSR 140 (1961), </journal> <pages> 326-329. </pages>
Reference-contexts: Then L is in NP if and only if there exists an existential second-order sentence such that L is precisely the class of finite models of . But there were earlier relevant results, most noticably, the characterization of the regular languages by means of monadic second-order logic <ref> [4, 27] </ref>. Immerman and Vardi [18, 28] proved that, on ordered structures, the problems solvable in polynomial time are exactly those definable in least fixed-point logic. A similar result was obtained independently by Livchak [23].
Reference: [28] <author> M. Vardi, </author> <title> Complexity of Relational Query Languages, </title> <booktitle> Proc. of 14th Symposium on Theory of Computing (1982), </booktitle> <pages> 137-146. 18 </pages>
Reference-contexts: But there were earlier relevant results, most noticably, the characterization of the regular languages by means of monadic second-order logic [4, 27]. Immerman and Vardi <ref> [18, 28] </ref> proved that, on ordered structures, the problems solvable in polynomial time are exactly those definable in least fixed-point logic. A similar result was obtained independently by Livchak [23]. <p> In fact this fixpoint construction is analogous to partial fixed point logic which captures Pspace on ordered structures (see <ref> [1, 28] </ref>).
References-found: 28

