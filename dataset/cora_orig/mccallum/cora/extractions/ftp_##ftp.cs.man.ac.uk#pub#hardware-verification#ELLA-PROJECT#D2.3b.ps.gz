URL: ftp://ftp.cs.man.ac.uk/pub/hardware-verification/ELLA-PROJECT/D2.3b.ps.gz
Refering-URL: http://www.cs.man.ac.uk/fmethods/projects/ELLA-PROJECT/D2.3b-abstract.html
Root-URL: http://www.cs.man.ac.uk
Email: email: howard@cs.man.ac.uk  
Title: FORMAL VERIFICATION SUPPORT FOR ELLA IED 4/1/1357 Deliverable D2.3b A semantics for Core ELLA Version
Author: Howard Barringer Graham Gough Brian Monahan Alan Williams 
Note: Copyright c fl1994. All rights reserved. Reproduction of all or part of this work is permitted for educational or research purposes on condition that (1) this copyright notice is included, (2) proper attribution to the author or authors is made and (3) no commercial gain is involved. Brian Monahan is now with Harlequin Ltd., Alderley Edge Alan Williams acknowledges additional support from  acknowledges support from the SERC via research grant GR/F 38174.  
Date: May 11, 1994  
Address: Oxford Road, Manchester, UK.  
Affiliation: Department of Computer Science University of Manchester  DRA (Malvern) and Harlequin Ltd (Cambridge) The University of Manchester  
Abstract-found: 0
Intro-found: 1
Reference: <institution> References </institution>
Reference: [BGL + 91] <author> H. Barringer, G. Gough, T. Longshaw, B. Monahan, M. Peim, and A. Williams. </author> <title> Semantics and verification for Boolean Kernel ELLA using IO automata. </title> <booktitle> In Advanced Research Workshop on Correct Hardware Design Methodologies (CHARME'91), </booktitle> <address> Turin, Italy, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: any unnecessary identifications (e.g. the constant unitvoid is not identified with any other generated value). 4.3 Automata theoretic semantics We give a semantics for Core ELLA, a well-defined subset of the ELLA language, in terms of input/output automata (or IO automata) in a similar way to our earlier semantics work <ref> [MDED91, BGL + 91] </ref>. Each ELLA function is mapped by the semantics into an IO automaton. Each of these automata defines an IO language as a set of behavioural traces. <p> However, the above general definitions for them makes it unnecessary to depend upon the specific names used for the output. 4.3.1 Representation issues for automata and transitions In our previous semantic descriptions <ref> [MDED91, BGL + 91] </ref>, we have generally separated behaviour objects (e.g. automata) from signal objects (e.g. values in transition mappings). <p> follows: ( is compatible with ) Signature 2 sig 1 is compatible with sig 2 , 8 x 2 (dom sig 1 " dom sig 2 ) . sig 1 (x) = sig 2 (x) The above slightly extends the denotational semantics of the above operators defined in earlier work <ref> [MDED91, BGL + 91] </ref>. 4.3.3 CCS and IO automata We note that the CCS notion of process corresponds to `automaton in a particular state'. Observe that the automaton combinators ( jj ; fi; n ; [ ]) broadly correspond to Milner's static combinators for CCS processes. <p> that in [Mil90], Milner uses the term `Restriction' to mean what we have termed `hiding', although we use the same symbolic notation. 4.4 IO Traces and Languages, Trace Equivalence and Containment The notions of Trace, IO language, Trace Equivalence and Trace Containment are straightforward gen-eralisations of the definitions given in <ref> [MDED91, BGL + 91] </ref>, extended to include the semantic concept of typing, as required by ELLA. A (typed) IO trace is a finite sequence of mappings, each of whose elements conforms to an appropriate input/output signature.
Reference: [BGMW92] <author> H. Barringer, G. Gough, B. Monahan, and A. Williams. </author> <title> A semantic framework for kernel ella. Technical Report D2.3a, Formal Verification Support for Ella, IED project 4/1/1357, </title> <month> September </month> <year> 1992. </year>
Reference-contexts: This work necessarily involved presenting an effective transformation from Core to Kernel ELLA, which resulted in more complexity than would have been necessary if only the static semantics of Core ELLA had been given. An earlier version of this document (defining semantics for Kernel ELLA <ref> [BGMW92] </ref>) has been read by John Morison and Mike Hill of DRA (RSRE), who have provided valuable comments. It should be emphasised, however, that we believe that further discussion is essential before we can have confidence that the semantics presented represents the `understood' semantics of ELLA.
Reference: [HM92] <author> M.G. Hill and J.D. Morison. </author> <title> Semantics and basic laws of ella. Technical Report D1.2, Formal Verification Support for Ella, IED project 4/1/1357, </title> <month> May </month> <year> 1992. </year>
Reference-contexts: However, very similar work on static semantics of Core and Kernel ELLA had already been done by Mike Hill and is contained in <ref> [HM92] </ref>. This work necessarily involved presenting an effective transformation from Core to Kernel ELLA, which resulted in more complexity than would have been necessary if only the static semantics of Core ELLA had been given.
Reference: [MDED91] <institution> University of Manchester and RSRE Malvern DRA Electronics Division. Semantics and Verification Foundations for ELLA. </institution> <note> Technical Report IED 4/1/1357 Deliverable D1.1+D2.1, </note> <month> May </month> <year> 1991. </year>
Reference-contexts: any unnecessary identifications (e.g. the constant unitvoid is not identified with any other generated value). 4.3 Automata theoretic semantics We give a semantics for Core ELLA, a well-defined subset of the ELLA language, in terms of input/output automata (or IO automata) in a similar way to our earlier semantics work <ref> [MDED91, BGL + 91] </ref>. Each ELLA function is mapped by the semantics into an IO automaton. Each of these automata defines an IO language as a set of behavioural traces. <p> However, the above general definitions for them makes it unnecessary to depend upon the specific names used for the output. 4.3.1 Representation issues for automata and transitions In our previous semantic descriptions <ref> [MDED91, BGL + 91] </ref>, we have generally separated behaviour objects (e.g. automata) from signal objects (e.g. values in transition mappings). <p> follows: ( is compatible with ) Signature 2 sig 1 is compatible with sig 2 , 8 x 2 (dom sig 1 " dom sig 2 ) . sig 1 (x) = sig 2 (x) The above slightly extends the denotational semantics of the above operators defined in earlier work <ref> [MDED91, BGL + 91] </ref>. 4.3.3 CCS and IO automata We note that the CCS notion of process corresponds to `automaton in a particular state'. Observe that the automaton combinators ( jj ; fi; n ; [ ]) broadly correspond to Milner's static combinators for CCS processes. <p> that in [Mil90], Milner uses the term `Restriction' to mean what we have termed `hiding', although we use the same symbolic notation. 4.4 IO Traces and Languages, Trace Equivalence and Containment The notions of Trace, IO language, Trace Equivalence and Trace Containment are straightforward gen-eralisations of the definitions given in <ref> [MDED91, BGL + 91] </ref>, extended to include the semantic concept of typing, as required by ELLA. A (typed) IO trace is a finite sequence of mappings, each of whose elements conforms to an appropriate input/output signature.
Reference: [Mil90] <author> R. Milner. </author> <title> Concurrency and Communication. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: A set of defining CCS equations for particular processes corresponds in the GEN-IOA setting to specifications of automata in terms of their transition relations, together with initial state information. Finally, we note that in <ref> [Mil90] </ref>, Milner uses the term `Restriction' to mean what we have termed `hiding', although we use the same symbolic notation. 4.4 IO Traces and Languages, Trace Equivalence and Containment The notions of Trace, IO language, Trace Equivalence and Trace Containment are straightforward gen-eralisations of the definitions given in [MDED91, BGL +
Reference: [Pau87] <author> L.C. Paulson. </author> <title> Logic and Computation: Interactive Proof with Cambridge LCF. </title> <publisher> Cambridge University Press, </publisher> <year> 1987. </year>
Reference: [Qui40] <author> W.B. Quine. </author> <title> Mathematical Logic. </title> <publisher> Harper and Row, </publisher> <year> 1940. </year>
Reference: [Sch86] <author> D.A. Schmidt. </author> <title> Denotational Semantics: A Methodology for Language Development. </title> <publisher> Allyn and Bacon, </publisher> <year> 1986. </year>
Reference: [Sto77] <author> J.E. Stoy. </author> <title> Denotational Semantics: The Scott-Strachey Approach to Programming Language Theory. </title> <publisher> MIT Press, </publisher> <year> 1977. </year> <month> 106 </month>
References-found: 10

