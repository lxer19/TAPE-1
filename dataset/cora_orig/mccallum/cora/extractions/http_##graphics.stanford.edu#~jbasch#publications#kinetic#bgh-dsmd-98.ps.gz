URL: http://graphics.stanford.edu/~jbasch/publications/kinetic/bgh-dsmd-98.ps.gz
Refering-URL: http://graphics.stanford.edu/~jbasch/publications/kinetic/
Root-URL: http://www.cs.stanford.edu
Email: fjbasch,guibasg@cs.stanford.edu  hershberger@mentorg.com  
Title: Data Structures for Mobile Data  
Author: Julien Basch Leonidas J. Guibas John Hershberger john 
Address: Stanford, CA 94305, USA  8005 SW Boeckman Road Wilsonville, OR 97070-7777, USA  
Affiliation: Computer Science Department Stanford University  Mentor Graphics Corp.  
Abstract: A kinetic data structure (KDS) maintains an attribute of interest in a system of geometric objects undergoing continuous motion. In this paper we develop a conceptual framework for kinetic data structures, propose a number of criteria for the quality of such structures, and describe a number of fundamental techniques for their design. We illustrate these general concepts by presenting kinetic data structures for maintaining the convex hull and the closest pair of moving points in the plane; these structures behave well according to the proposed quality criteria for KDSs.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Agarwal, J. Erickson, and L. Guibas. </author> <title> Kinetic binary space partitions for triangles. </title> <booktitle> In Proc. 9th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 107-116, </pages> <month> January </month> <year> 1998. </year>
Reference-contexts: Following the publication of the conference version of this paper [8], several kinetic data structures have been developed for the maintenance of a variety of 8 structures: binary space partitions <ref> [1, 3] </ref>, closest pair and minimum spanning trees in arbitrary dimensions [11], and diameter and width [2]. 2 2-D convex hull In this section, we present an efficient kinetic data structure to maintain the convex hull of a set of moving points in the plane.
Reference: [2] <author> P. K. Agarwal, L. Guibas, J. Hershberger, and E. Veach. </author> <title> Maintaining the extent of a moving point set. </title> <booktitle> In Proceedings of the 5th Workshop on Algorithms and Data Structures, </booktitle> <pages> pages 31-44. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year> <note> Lecture Notes in Computer Science 1272. </note>
Reference-contexts: Following the publication of the conference version of this paper [8], several kinetic data structures have been developed for the maintenance of a variety of 8 structures: binary space partitions [1, 3], closest pair and minimum spanning trees in arbitrary dimensions [11], and diameter and width <ref> [2] </ref>. 2 2-D convex hull In this section, we present an efficient kinetic data structure to maintain the convex hull of a set of moving points in the plane. <p> In the worst case, the convex hull of n points in linear or higher order motion changes (n 2 ) times <ref> [2] </ref>. Hence our KDS is efficient. 2 3 Closest pair in 2-D Not all static algorithms lend themselves to an efficient kinetization. <p> The data structures always reflect the history that would result if the plane sweep algorithm were applied to the current configuration of points. This resulting kinetic data structure has the qualities described in Section 1. 3 The best known bound for this specific problem is tighter <ref> [2] </ref>, but this bound is sufficient for our purposes. 16 3.1 The static plane sweep algorithm The static closest-pair algorithm is based on the idea of dividing the space around each point into six 60 ffi wedges.
Reference: [3] <author> P. K. Agarwal, L. J. Guibas, T. Murali, and J. Vitter. </author> <title> Cylindrical static and kinetic binary space partitions. </title> <booktitle> In Proc. 13th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 39-48, </pages> <year> 1997. </year>
Reference-contexts: Following the publication of the conference version of this paper [8], several kinetic data structures have been developed for the maintenance of a variety of 8 structures: binary space partitions <ref> [1, 3] </ref>, closest pair and minimum spanning trees in arbitrary dimensions [11], and diameter and width [2]. 2 2-D convex hull In this section, we present an efficient kinetic data structure to maintain the convex hull of a set of moving points in the plane.
Reference: [4] <author> P. K. Agarwal, O. Schwarzkopf, and M. Sharir. </author> <title> The overlay of lower envelopes and its applications. </title> <journal> Discrete Comput. Geom., </journal> <volume> 15 </volume> <pages> 1-13, </pages> <year> 1996. </year>
Reference-contexts: We can thus use results proving near-quadratic complexity for the upper envelope of algebraic surfaces [31]. We also make use of the recent result of Agarwal, Schwarzkopf, and Sharir <ref> [4] </ref> about the near-quadratic complexity of the overlay of the projections of two upper-envelopes to obtain sharp bounds on the number of events due to x-certificates. <p> If there are n bivariate algebraic surfaces of bounded degree in total, the complexity of this overlay is also O (n 2+* ) for any * &gt; 0 <ref> [4] </ref>. Hence, there are at most that many x-events. Finally, each pair of lines becomes parallel a constant number of times, so there are O (n 2 ) slope events attached to the node we have been focusing on up to now.
Reference: [5] <author> Pankaj K. Agarwal, M. Sharir, and S. Toledo. </author> <title> Applications of parametric searching in geometric optimization. </title> <journal> J. Algorithms, </journal> <volume> 17 </volume> <pages> 292-318, </pages> <year> 1994. </year>
Reference-contexts: Techniques already developed in parallel computational geometry [6] or in parametric searching <ref> [5] </ref> may prove to be useful. In a real time system, it is possible that there is not sufficient time to process an event completely before the next event appears.
Reference: [6] <author> S. G. Akl and K. A. Lyons. </author> <title> Parallel Computational Geometry. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: Techniques already developed in parallel computational geometry <ref> [6] </ref> or in parametric searching [5] may prove to be useful. In a real time system, it is possible that there is not sufficient time to process an event completely before the next event appears.
Reference: [7] <author> M. J. Atallah. </author> <title> Some dynamic computational geometry problems. </title> <journal> Comput. Math. Appl., </journal> <volume> 11 </volume> <pages> 1171-1181, </pages> <year> 1985. </year>
Reference-contexts: In this respect, the way of analyzing our data structures is akin to the dynamic computational geometry framework introduced by Atallah <ref> [7] </ref> in order to study the number of combinatorially distinct configurations of a given kind (e.g., convex hull or closest pair) that arise during the continuous motion of geometric objects. <p> the relevant events and perform a discrete-time simulation, then the event counts for all the structures described here can be made into run-times with an extra O (log n) factor (the priority queue cost). 1.2 Previous results and summary of the work A number of works in the early eighties <ref> [7, 18, 26] </ref> considered the problem of computing a configuration function of moving points. In all cases, the motion was considered fully known, and the problem was typically cast and solved in one 7 dimension higher.
Reference: [8] <author> J. Basch, L. J. Guibas, and J. Hershberger. </author> <title> Data structure for mobile data. </title> <booktitle> In Proc. 8th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 747-756, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: In Section 4, we take up some further issues generated by this framework for mobile data and present plans for further work. Following the publication of the conference version of this paper <ref> [8] </ref>, several kinetic data structures have been developed for the maintenance of a variety of 8 structures: binary space partitions [1, 3], closest pair and minimum spanning trees in arbitrary dimensions [11], and diameter and width [2]. 2 2-D convex hull In this section, we present an efficient kinetic data structure
Reference: [9] <author> J. Basch, L. J. Guibas, and G.D. Ramkumar. </author> <title> Sweeping lines and line segments with a heap. </title> <booktitle> In Proc. 13th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 469-471, </pages> <year> 1997. </year>
Reference-contexts: when the points move with constant velocities? This question turns out to be surprisingly non-trivial; we can show by a potential argument that the kinetic heap under linear point motions processes O (n log 2 n) events, and thus is a data structure meeting our requirements (the proof appears in <ref> [9] </ref>). To prepare ourselves for the solutions to the other problems we will present below, let us also consider the following fourth solution to the kinetic maximum maintenance problem. Consider first an algorithm that computes the maximum of n (static) numbers.
Reference: [10] <author> J. Basch, L. J. Guibas, C. D. Silverstein, and L. Zhang. </author> <title> A practical evaluation of kinetic data structures. </title> <booktitle> In Proc. 13th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 388-390, </pages> <year> 1997. </year>
Reference-contexts: By working through three examples, we have demonstrated the generality of the kinetization procedure, which transforms a static algorithm into its kinetic counterpart. Moreover, the algorithms described in this paper have been implemented, showing that the framework as well as the algorithms are valuable in practice <ref> [10] </ref>.
Reference: [11] <author> J. Basch, L. J. Guibas, and L. Zhang. </author> <title> Proximity problems on moving points. </title> <booktitle> In Proc. 13th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 344-351, </pages> <year> 1997. </year>
Reference-contexts: Following the publication of the conference version of this paper [8], several kinetic data structures have been developed for the maintenance of a variety of 8 structures: binary space partitions [1, 3], closest pair and minimum spanning trees in arbitrary dimensions <ref> [11] </ref>, and diameter and width [2]. 2 2-D convex hull In this section, we present an efficient kinetic data structure to maintain the convex hull of a set of moving points in the plane.
Reference: [12] <author> J. L. Bentley and T. A. Ottmann. </author> <title> Algorithms for reporting and counting geometric intersections. </title> <journal> IEEE Trans. Comput., </journal> <volume> C-28:643-647, </volume> <year> 1979. </year>
Reference-contexts: When two adjacent points meet, this destroys two old adjacencies and creates two new ones along the sorted list, as in the plane sweep algorithm of Bentley and Ottmann <ref> [12] </ref> modified by Brown [14]. Thus we deschedule (up to) two events and schedule (up to) two new events. In this process we always maintain the sorted list of points, and in particular we always know the topmost one as well.
Reference: [13] <author> Sergei N. Bespamyatnikh. </author> <title> An optimal algorithm for closest pair maintenance. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 152-161, </pages> <year> 1995. </year>
Reference-contexts: We call kinetization the process of transforming an algorithm on static data into a data structure that is valid for continuously changing (moving) data. The problems of convex hull and closest pair maintenance have been exhaustively studied in computational geometry <ref> [13, 15, 20, 23, 24, 27, 29] </ref>, but almost exclusively in the context of static objects with operations like insertion and deletion. Our emphasis instead is on the maintenance of such configuration functions under continuous motion of the given objects.
Reference: [14] <author> K. Q. Brown. </author> <title> Comments on "Algorithms for reporting and counting geometric intersections". </title> <journal> IEEE Trans. Comput., </journal> <volume> C-30:147-148, </volume> <year> 1981. </year>
Reference-contexts: When two adjacent points meet, this destroys two old adjacencies and creates two new ones along the sorted list, as in the plane sweep algorithm of Bentley and Ottmann [12] modified by Brown <ref> [14] </ref>. Thus we deschedule (up to) two events and schedule (up to) two new events. In this process we always maintain the sorted list of points, and in particular we always know the topmost one as well.
Reference: [15] <author> Paul B. Callahan and S. Rao Kosaraju. </author> <title> Algorithms for dynamic closest-pair and n-body potential fields. </title> <booktitle> In Proc. 6th ACM-SIAM Sympos. Discrete Algorithms (SODA '95), </booktitle> <pages> pages 263-272, </pages> <year> 1995. </year>
Reference-contexts: We call kinetization the process of transforming an algorithm on static data into a data structure that is valid for continuously changing (moving) data. The problems of convex hull and closest pair maintenance have been exhaustively studied in computational geometry <ref> [13, 15, 20, 23, 24, 27, 29] </ref>, but almost exclusively in the context of static objects with operations like insertion and deletion. Our emphasis instead is on the maintenance of such configuration functions under continuous motion of the given objects.
Reference: [16] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference-contexts: Sorting the points of S in preparation for sweeping takes O (n log n) time. We store Maxima in a balanced binary tree structure that supports logarithmic-time searches, insertions, deletions, splits, and joins <ref> [16] </ref>. Computing Cands (p) requires two O (log n) time searches on Maxima , since Cands (p) is a consecutive subsequence of Maxima.
Reference: [17] <author> O. Devillers, M. Golin, K. Kedem, and S. Schirra. </author> <title> Revenge of the dog: Queries on Voronoi diagrams of moving points. </title> <booktitle> In Proc. 6th Canad. Conf. Comput. Geom., </booktitle> <pages> pages 122-127, </pages> <year> 1994. </year>
Reference-contexts: More recently, questions concerning the maintenance of the Voronoi diagram of moving points (or its dual, the Delaunay triangulation) have received extensive attention <ref> [17, 19, 21, 30] </ref>. The significance of our work is best understood in comparison. The Delaunay triangulation contains a proof of its correctness involving only four-point certificates for each of the edges of the triangulation. In that sense, it is what we might call a self-certifying structure.
Reference: [18] <author> H. Edelsbrunner and E. Welzl. </author> <title> Constructing belts in two-dimensional arrangements with applications. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 271-284, </pages> <year> 1986. </year>
Reference-contexts: the relevant events and perform a discrete-time simulation, then the event counts for all the structures described here can be made into run-times with an extra O (log n) factor (the priority queue cost). 1.2 Previous results and summary of the work A number of works in the early eighties <ref> [7, 18, 26] </ref> considered the problem of computing a configuration function of moving points. In all cases, the motion was considered fully known, and the problem was typically cast and solved in one 7 dimension higher. <p> In all cases, the motion was considered fully known, and the problem was typically cast and solved in one 7 dimension higher. The method of Edelsbrunner and Welzl <ref> [18] </ref> for computing the k-th order statistic of a set of points moving at constant speed along the x-axis (introduced as a motivation for computing the k-level of an arrangement of lines) is most similar to a KDS.
Reference: [19] <author> J.-J. Fu and R. C. T. Lee. </author> <title> Voronoi diagrams of moving points in the plane. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 1(1) </volume> <pages> 23-32, </pages> <year> 1991. </year>
Reference-contexts: More recently, questions concerning the maintenance of the Voronoi diagram of moving points (or its dual, the Delaunay triangulation) have received extensive attention <ref> [17, 19, 21, 30] </ref>. The significance of our work is best understood in comparison. The Delaunay triangulation contains a proof of its correctness involving only four-point certificates for each of the edges of the triangulation. In that sense, it is what we might call a self-certifying structure.
Reference: [20] <author> M. Golin, R. Raman, C. Schwarz, and M. Smid. </author> <title> Randomized data structures for the dynamic closest-pair problem. </title> <booktitle> In Proc. 4th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 301-310, </pages> <year> 1993. </year>
Reference-contexts: We call kinetization the process of transforming an algorithm on static data into a data structure that is valid for continuously changing (moving) data. The problems of convex hull and closest pair maintenance have been exhaustively studied in computational geometry <ref> [13, 15, 20, 23, 24, 27, 29] </ref>, but almost exclusively in the context of static objects with operations like insertion and deletion. Our emphasis instead is on the maintenance of such configuration functions under continuous motion of the given objects.
Reference: [21] <author> L. Guibas, J. S. B. Mitchell, and T. Roos. </author> <title> Voronoi diagrams of moving points in the plane. </title> <booktitle> In Proc. 17th Internat. Workshop Graph-Theoret. Concepts Comput. Sci., volume 570 of Lecture Notes in Computer Science, </booktitle> <pages> pages 113-125. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: More recently, questions concerning the maintenance of the Voronoi diagram of moving points (or its dual, the Delaunay triangulation) have received extensive attention <ref> [17, 19, 21, 30] </ref>. The significance of our work is best understood in comparison. The Delaunay triangulation contains a proof of its correctness involving only four-point certificates for each of the edges of the triangulation. In that sense, it is what we might call a self-certifying structure. <p> solution has two drawbacks: it is not local (a point can be a vertex of linearly many triangles), nor known to be efficient (the tightest upper bound known on the number of changes to the Delaunay triangulation of points in algebraic motion is roughly cubic in the number of points <ref> [21] </ref>, whereas the convex hull and the closest pair can change roughly a quadratic number of times in the worst case).
Reference: [22] <author> J. Hershberger. </author> <title> Finding the upper envelope of n line segments in O(n log n) time. </title> <journal> Inform. Process. Lett., </journal> <volume> 33 </volume> <pages> 169-174, </pages> <year> 1989. </year>
Reference-contexts: This upper envelope computation can be trivially done in O (n log n) time with a divide and conquer algorithm (this bound holds even if points can appear and disappear at arbitrary times, but then it is not trivial <ref> [22] </ref>). In the worst case, the number of times during the motion that the topmost point changes is fi (n).
Reference: [23] <author> J. Hershberger and S. Suri. </author> <title> Applications of a semi-dynamic convex hull algorithm. </title> <journal> BIT, </journal> <volume> 32 </volume> <pages> 249-267, </pages> <year> 1992. </year>
Reference-contexts: We call kinetization the process of transforming an algorithm on static data into a data structure that is valid for continuously changing (moving) data. The problems of convex hull and closest pair maintenance have been exhaustively studied in computational geometry <ref> [13, 15, 20, 23, 24, 27, 29] </ref>, but almost exclusively in the context of static objects with operations like insertion and deletion. Our emphasis instead is on the maintenance of such configuration functions under continuous motion of the given objects.
Reference: [24] <author> S. Kapoor and M. Smid. </author> <title> New techniques for exact and approximate dynamic closest-point problems. </title> <booktitle> In Proc. 10th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 165-174, </pages> <year> 1994. </year>
Reference-contexts: We call kinetization the process of transforming an algorithm on static data into a data structure that is valid for continuously changing (moving) data. The problems of convex hull and closest pair maintenance have been exhaustively studied in computational geometry <ref> [13, 15, 20, 23, 24, 27, 29] </ref>, but almost exclusively in the context of static objects with operations like insertion and deletion. Our emphasis instead is on the maintenance of such configuration functions under continuous motion of the given objects.
Reference: [25] <author> M. C. Lin and J. F. Canny. </author> <title> Efficient algorithms for incremental distance computation. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom., </booktitle> <volume> volume 2, </volume> <pages> pages 1008-1014, </pages> <year> 1991. </year>
Reference-contexts: In general, one can view the process of kinetization as "sufficiently augmenting a configuration function to make it self-certifying." Algorithms for collision detection in robotics by Lin and Canny <ref> [25] </ref> and Pon-amgi et al. [28] exploit temporal coherence to maintain the minimum distance between all pairs of moving objects, but their approach re-tests the validity of separating planes at every step, and recalculates these separators from scratch when the old ones fail.
Reference: [26] <author> T. Ottmann and D. Wood. </author> <title> Dynamical sets of points. Comput. Vision Graph. </title> <journal> Image Process., </journal> <volume> 27 </volume> <pages> 157-166, </pages> <year> 1984. </year> <month> 27 </month>
Reference-contexts: the relevant events and perform a discrete-time simulation, then the event counts for all the structures described here can be made into run-times with an extra O (log n) factor (the priority queue cost). 1.2 Previous results and summary of the work A number of works in the early eighties <ref> [7, 18, 26] </ref> considered the problem of computing a configuration function of moving points. In all cases, the motion was considered fully known, and the problem was typically cast and solved in one 7 dimension higher.
Reference: [27] <author> M. H. Overmars and J. van Leeuwen. </author> <title> Maintenance of configurations in the plane. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 23 </volume> <pages> 166-204, </pages> <year> 1981. </year>
Reference-contexts: We call kinetization the process of transforming an algorithm on static data into a data structure that is valid for continuously changing (moving) data. The problems of convex hull and closest pair maintenance have been exhaustively studied in computational geometry <ref> [13, 15, 20, 23, 24, 27, 29] </ref>, but almost exclusively in the context of static objects with operations like insertion and deletion. Our emphasis instead is on the maintenance of such configuration functions under continuous motion of the given objects.
Reference: [28] <author> Madhav K. Ponamgi, Ming C. Lin, and Dinesh Manocha. </author> <title> Incremental collision detection for polygonal models. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages V7-V8, </pages> <year> 1995. </year>
Reference-contexts: In general, one can view the process of kinetization as "sufficiently augmenting a configuration function to make it self-certifying." Algorithms for collision detection in robotics by Lin and Canny [25] and Pon-amgi et al. <ref> [28] </ref> exploit temporal coherence to maintain the minimum distance between all pairs of moving objects, but their approach re-tests the validity of separating planes at every step, and recalculates these separators from scratch when the old ones fail.
Reference: [29] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: We call kinetization the process of transforming an algorithm on static data into a data structure that is valid for continuously changing (moving) data. The problems of convex hull and closest pair maintenance have been exhaustively studied in computational geometry <ref> [13, 15, 20, 23, 24, 27, 29] </ref>, but almost exclusively in the context of static objects with operations like insertion and deletion. Our emphasis instead is on the maintenance of such configuration functions under continuous motion of the given objects. <p> Hence our KDS is efficient. 2 3 Closest pair in 2-D Not all static algorithms lend themselves to an efficient kinetization. For instance, consider the following classic algorithm of Shamos <ref> [29] </ref> for finding the closest pair within a set of points in the plane: divide the points into the left half and the right half and recursively compute the closest distances ffi L and ffi R within each half.
Reference: [30] <author> T. Roos. </author> <title> Voronoi diagrams over dynamic scenes. </title> <journal> Discrete Appl. Math., </journal> <volume> 43 </volume> <pages> 243-259, </pages> <year> 1993. </year>
Reference-contexts: More recently, questions concerning the maintenance of the Voronoi diagram of moving points (or its dual, the Delaunay triangulation) have received extensive attention <ref> [17, 19, 21, 30] </ref>. The significance of our work is best understood in comparison. The Delaunay triangulation contains a proof of its correctness involving only four-point certificates for each of the edges of the triangulation. In that sense, it is what we might call a self-certifying structure.
Reference: [31] <author> M. Sharir. </author> <title> Almost tight upper bounds for lower envelopes in higher dimensions. </title> <journal> Discrete Comput. Geom., </journal> <volume> 12 </volume> <pages> 327-345, </pages> <year> 1994. </year>
Reference-contexts: On the other hand, in the dual, the structure described by the upper envelope over time is exactly the upper envelope of the surfaces described by the underlying lines. We can thus use results proving near-quadratic complexity for the upper envelope of algebraic surfaces <ref> [31] </ref>. We also make use of the recent result of Agarwal, Schwarzkopf, and Sharir [4] about the near-quadratic complexity of the overlay of the projections of two upper-envelopes to obtain sharp bounds on the number of events due to x-certificates. <p> A monochromatic vertex corresponds to the appearance/disappearance of an edge triggered by some descendant in the computation tree. As our surfaces are algebraic of bounded degree, their upper envelope has complexity O (n 2+* ) 15 for any * &gt; 0 <ref> [31] </ref>, and therefore the number of events due to y-certificate sign changes is bounded by this quantity 3 . Consider now the events corresponding to the x reordering of two vertices of different colors (called "x-events").
Reference: [32] <author> M. Sharir and P. K. Agarwal. </author> <title> Davenport-Schinzel Sequences and Their Geometric Applications. </title> <publisher> Cambridge University Press, </publisher> <address> New York, </address> <year> 1995. </year> <month> 28 </month>
Reference-contexts: These are functions with the property that each of the certificates involved in the kinetization changes sign at most a bounded number of times|very much in the spirit of situations in which Davenport-Schinzel sequences have been used <ref> [32] </ref> in computational geometry. Most obviously, a KDS 3 is good if the cost of processing a certificate failure is small. <p> exchanges under pseudo-algebraic motions; there are O (n 2 ) changes to lcand () values over the life of the algorithm; the number of vertices on the lower envelope of the (p; lcand (p)) pairs is O (n 2 fi (n)) where fi (n) is an extremely slowly growing function <ref> [32] </ref>; and the kinetic tournament processes only a logarithmic factor more events than appear on the lower envelope of the pairwise distances. Hence the KDS is efficient.
References-found: 32

