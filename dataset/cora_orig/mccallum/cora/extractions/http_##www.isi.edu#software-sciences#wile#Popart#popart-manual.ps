URL: http://www.isi.edu/software-sciences/wile/Popart/popart-manual.ps
Refering-URL: http://www.isi.edu/software-sciences/wile/Popart/popart.html
Root-URL: http://www.isi.edu
Email: wile@isi.edu  
Phone: (310) 822-1511  
Title: POPART: Producer of Parsers and Related Tools System Builders' Manual 1994 edition DRAFT  
Author: David S. Wile 
Date: November 16, 1993  
Address: Marina Del Rey, CA 90292  
Affiliation: USC/Information Sciences Institute  
Abstract: y The work reported herein was sponsored in part by the National Science Foundation under grant MCS-7918792 and in part by the Defense Advanced Research Projects Agency under grants DAHC 15 72C 0308, MDA 903 81 C 0335 and MDA903-87-C-0641. 
Abstract-found: 1
Intro-found: 1
Reference: [BGW76] <author> R. M. Balzer, N. M. Goldman, and D. S. Wile. </author> <title> On the transformational implementation approach to programming. </title> <booktitle> In Proceedings of the Second International Conference on Software En gineering, </booktitle> <pages> pages 337-344, </pages> <month> October </month> <year> 1976. </year>
Reference-contexts: I consider it to be very important that the system designer be allowed to interact via this more concise medium. Second, POPART is committed to supporting the program transformation process <ref> [BGW76, Wil83, Wil86a] </ref>. Hence, all semantic mechanisms attempt to be consistent and supportive of it. For this reason, no attribute grammar mechanism has been provided, but instead a mechanism based on cooperating sets of transformations, called experts [Wil86b].
Reference: [DGKLM84] <author> Veronique Donzeau-Gouge, Gilles Kahn, Bernard Lang, and B. Melese. </author> <title> Document structure and modularity in Mentor. </title> <booktitle> In Proceedings of the ACM SIGSOFT/SIGPLAN Software Symposium on Practical Software Development Environments, </booktitle> <pages> pages 141-148, </pages> <month> April </month> <year> 1984. </year>
Reference-contexts: POPART was originally just a more polished version of some of his ideas; in recent years it has established its own uniqueness with the growth of the transformation and semantic manipulation facilities. Since the mid 1970s several other program manipulation mechanisms have been designed, most notably Mentor <ref> [DGKLM84] </ref>, Gandalf [Hab80], and the Cornell Program Synthesizer Generator [RT84]. Also, elegant formalisms have been invented for describing semantic processing-particularly attribute grammars [Rep82] and action routines [KG87]. And finally, several systems for describing meta-programming activities have arisen, such as MUMPS [?] and LCF [GMM + 78].
Reference: [GMM + 78] <author> M.J.C. Gordon, A.J.R.G. Milner, L. Morris, M. Newey, and C. Wadsworth. </author> <title> A metalanguage for interactive proof in lcf. </title> <booktitle> In Proceedings, 5th ACM POPL Symposium, </booktitle> <address> Tucson, Arizona, </address> <pages> pages 119-130, </pages> <year> 1978. </year>
Reference-contexts: Also, elegant formalisms have been invented for describing semantic processing-particularly attribute grammars [Rep82] and action routines [KG87]. And finally, several systems for describing meta-programming activities have arisen, such as MUMPS [?] and LCF <ref> [GMM + 78] </ref>. Although it is almost impossible to keep up with the advances in this area, it is worth emphasizing the philosophical depature point that POPART takes which establishes it as different from its contemporary systems.
Reference: [Hab80] <author> A. N. Haberman. </author> <title> An overview of the gandalf project. </title> <type> Technical report, </type> <institution> Carnegie-Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1980. </year> <note> Also appears in CMU Computer Science Research Review, 1978-1979. </note>
Reference-contexts: POPART was originally just a more polished version of some of his ideas; in recent years it has established its own uniqueness with the growth of the transformation and semantic manipulation facilities. Since the mid 1970s several other program manipulation mechanisms have been designed, most notably Mentor [DGKLM84], Gandalf <ref> [Hab80] </ref>, and the Cornell Program Synthesizer Generator [RT84]. Also, elegant formalisms have been invented for describing semantic processing-particularly attribute grammars [Rep82] and action routines [KG87]. And finally, several systems for describing meta-programming activities have arisen, such as MUMPS [?] and LCF [GMM + 78].
Reference: [Jr.84] <author> Guy L. Steele Jr. </author> <title> Common Lisp: The Language. </title> <publisher> Digital Press, </publisher> <year> 1984. </year>
Reference-contexts: This manual is intended to be a complete discussion of the theory, design and implementation of the parser and its related tools. 1 2 CHAPTER 1. INTRODUCTION The purpose of POPART is to produce and manipulate parse trees in Common LISP <ref> [Jr.84] </ref> in a data-representation independent way. POPART arose, in part, in reaction to the trend in the mid 1970s for mixing parsing and semantic processing in the same notation and at the same time. <p> Briefly, the only facility of the structures used by POPART is the ability to define and create mappings of field names onto LISP list elements (see <ref> [Jr.84] </ref>, Chapter 19). POPART also assumes that the same named field occurs in the same spot in all structures in which it occurs, i.e. that only one function for the field is defined.
Reference: [KG87] <author> Gail E. Kaiser and David Garlan. </author> <title> Composing software systems from reusable building blocks. </title> <booktitle> In Twentieth Hawaii International Conference on System Sciences, </booktitle> <month> Jan </month> <year> 1987. </year>
Reference-contexts: Since the mid 1970s several other program manipulation mechanisms have been designed, most notably Mentor [DGKLM84], Gandalf [Hab80], and the Cornell Program Synthesizer Generator [RT84]. Also, elegant formalisms have been invented for describing semantic processing-particularly attribute grammars [Rep82] and action routines <ref> [KG87] </ref>. And finally, several systems for describing meta-programming activities have arisen, such as MUMPS [?] and LCF [GMM + 78]. <p> There is a wide spectrum of such tasks: * Symbol table construction * Type checking * Program simplification * Program translation * Program conditioning * Transformation * Optimization Our most primitive facility to support syntax-directed processing is an "action routine" mechanism <ref> [KG87] </ref> whereby users can specify tables of rules whose left hand sides are (abstract syntactic) patterns in the language of interest. The right hand sides are Lisp code that references freely variables bound in the left hand side pattern.
Reference: [Rep82] <author> T. Reps. </author> <title> Optimal-time incremental semantic analysis for syntax-directed editors. </title> <booktitle> In Proceedings of the Symposium on the Principles of Programming Languages. ACM SIGPLAN, </booktitle> <year> 1982. </year>
Reference-contexts: Since the mid 1970s several other program manipulation mechanisms have been designed, most notably Mentor [DGKLM84], Gandalf [Hab80], and the Cornell Program Synthesizer Generator [RT84]. Also, elegant formalisms have been invented for describing semantic processing-particularly attribute grammars <ref> [Rep82] </ref> and action routines [KG87]. And finally, several systems for describing meta-programming activities have arisen, such as MUMPS [?] and LCF [GMM + 78].
Reference: [RT84] <author> T. Reps and T. Teitelbaum. </author> <title> The synthesizer generator. </title> <booktitle> In Software Engineering Symposium on Practical Software Development Environments, </booktitle> <pages> pages 42-48, </pages> <address> Pittsburgh, Pa., </address> <month> May </month> <year> 1984. </year> <note> ACM SIGSOFT/SIGPLAN. </note>
Reference-contexts: Since the mid 1970s several other program manipulation mechanisms have been designed, most notably Mentor [DGKLM84], Gandalf [Hab80], and the Cornell Program Synthesizer Generator <ref> [RT84] </ref>. Also, elegant formalisms have been invented for describing semantic processing-particularly attribute grammars [Rep82] and action routines [KG87]. And finally, several systems for describing meta-programming activities have arisen, such as MUMPS [?] and LCF [GMM + 78].
Reference: [Wil83] <author> D. S. Wile. </author> <title> Program developments: formal explanations of implementations. </title> <journal> CACM, </journal> <volume> 26(11) </volume> <pages> 902-911, </pages> <month> November </month> <year> 1983. </year>
Reference-contexts: I consider it to be very important that the system designer be allowed to interact via this more concise medium. Second, POPART is committed to supporting the program transformation process <ref> [BGW76, Wil83, Wil86a] </ref>. Hence, all semantic mechanisms attempt to be consistent and supportive of it. For this reason, no attribute grammar mechanism has been provided, but instead a mechanism based on cooperating sets of transformations, called experts [Wil86b].
Reference: [Wil86a] <author> D. S. Wile. </author> <title> Local formalisms: Widening the spectrum of wide-spectrum languages. </title> <editor> In L.G.L.T. Meertens, editor, </editor> <booktitle> Proceedings of the IFIP TC2/WG 2.1 Working Conference on Program Specification and Transformation, </booktitle> <address> Bad Toelz, FRG. </address> <publisher> North-Holland, </publisher> <month> April </month> <year> 1986. </year>
Reference-contexts: I consider it to be very important that the system designer be allowed to interact via this more concise medium. Second, POPART is committed to supporting the program transformation process <ref> [BGW76, Wil83, Wil86a] </ref>. Hence, all semantic mechanisms attempt to be consistent and supportive of it. For this reason, no attribute grammar mechanism has been provided, but instead a mechanism based on cooperating sets of transformations, called experts [Wil86b]. <p> Implicit in this problem solver is a subgoaling mechanism which causes subexpressions of the left-hand side patterns to be translated to fit the slots of the right hand side patterns in which they occur. Such automatic translation has been termed "targeted homomorphisms" from the algebraic construct they resemble <ref> [Wil86a] </ref>. This and other metaprogramming issues are the areas within POPART receiving the most active research attention 1 . It has been reported in [Wil86b]. 6.2 User Issues None.
Reference: [Wil86b] <author> D. S. Wile. </author> <title> Organizing programming knowledge into syntax-directed experts. </title> <booktitle> In International Workshop on Advanced Programming Environments, </booktitle> <address> Trondheim, Norway, June 1986. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Second, POPART is committed to supporting the program transformation process [BGW76, Wil83, Wil86a]. Hence, all semantic mechanisms attempt to be consistent and supportive of it. For this reason, no attribute grammar mechanism has been provided, but instead a mechanism based on cooperating sets of transformations, called experts <ref> [Wil86b] </ref>. POPART provides the system builder with programmatic access to the support tools: no user interface to them is provided. <p> Such automatic translation has been termed "targeted homomorphisms" from the algebraic construct they resemble [Wil86a]. This and other metaprogramming issues are the areas within POPART receiving the most active research attention 1 . It has been reported in <ref> [Wil86b] </ref>. 6.2 User Issues None. Facilities built using experts will need to be described to users. 6.3 System Builder Issues Facilities are provided to support all of the types of experts described above as Common LISP macros.
Reference: [Yon75] <author> M.D. Yonke. </author> <title> A knowledgeable, language independent system for program construction and modification. </title> <type> Technical Report ISI/RR-75-42, </type> <institution> USC/Information Sciences Institute, </institution> <month> October </month> <year> 1975. </year> <note> 74 BIBLIOGRAPHY </note>
Reference-contexts: System builders familiar with the stack manipulation languages of the '70s (and YACC [?]) will appreciate the higher level language support for such semantic specifications. Several of these mechanisms were demonstrated to be feasible in a Ph.D. dissertation by Marty Yonke <ref> [Yon75] </ref>. POPART was originally just a more polished version of some of his ideas; in recent years it has established its own uniqueness with the growth of the transformation and semantic manipulation facilities.
References-found: 12

