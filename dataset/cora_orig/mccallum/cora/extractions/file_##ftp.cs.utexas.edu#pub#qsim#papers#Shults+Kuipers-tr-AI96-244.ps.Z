URL: file://ftp.cs.utexas.edu/pub/qsim/papers/Shults+Kuipers-tr-AI96-244.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/qr/abstracts-tl.html
Root-URL: 
Email: bshults@math.utexas.edu  kuipers@cs.utexas.edu  
Title: Qualitative Simulation and Temporal Logic: Proving Properties of Continuous Systems  
Author: Benjamin Shults Benjamin J. Kuipers 
Date: January 17, 1996  
Address: Austin, TX 78712  Austin, TX 78712  
Affiliation: Department of Mathematics University of Texas at Austin  Computer Science Department University of Texas at Austin  
Abstract: We demonstrate an automated method for proving statements in temporal logic about continuous systems, even in the face of incomplete knowledge. The method combines an implemented, on-the-fly, model-checking algorithm for statements in the temporal logic CTL* [3, 4, 5] with the output of the qualitative simulation algorithm QSIM [10, 12]. Based on the QSIM Guaranteed Coverage Theorem, we prove that for certain CTL* statements, , if is true for the qualitative behavior tree produced by QSIM, then a corresponding theorem holds for the solution of any ordinary differential equation consistent with the qualitative differential equation that generated the QSIM behavior tree. We then show that for other CTL* formulas, if the QSIM output satisfies a certain completeness restriction, then conclusions can again be drawn about real-valued functions satisfying the given incomplete description. We also show how the methods can be applied to proving properties of continuous systems in which numeric information is available. fl This work has been supported in part by the National Science Foundation (grant IRI-9216584) and by the Electric Power Research Institute. A preliminary report on this work appeared as [14]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alur and T. Henzinger. </author> <title> Real-time logics: conplexity and expressiveness. </title> <journal> Information and Computation, </journal> <volume> 104(1) </volume> <pages> 35-77, </pages> <year> 1993. </year> <month> 34 </month>
Reference-contexts: Their specific application was to chemical process control. TL makes it possible to apply a more complex temporal logic (CTL*) to continuous-time control systems, and indeed to dynamical systems in general. Alur and Henzinger <ref> [1] </ref> use a logic called Metric Temporal Logic (MTL) to check properties of discrete event systems. Metric Temporal Logic is, strictly speaking, not as expressive as CTL*.
Reference: [2] <author> Daniel Berleant and Benjamin Kuipers. </author> <title> Combined qualitative and numer ical simulation with Q3. </title> <editor> In Boi Faltings and Peter Struss, editors, </editor> <booktitle> Recent Advances in Qualitative Physics. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: The propositional part of the temporal language includes propositions which allow the construction of formulas containing numerical information. This can be used in conjunction with the numerical extensions to QSIM|Q2 [11], Q3 <ref> [2] </ref> and NSIM [9]|in order to prove numerical properties of physical systems. In Section 2 we describe and define the language CTL* and present some basic definitions and facts which will be useful. In Section 3 we describe the QSIM framework. <p> Quantitative Information When strong-cycle matching is used and cross-edge cycles are not allowed, then the QDE and the initial state may be augmented with quantitative information such as numerical interval bounds on the real values denoted by landmarks and other symbolic terms in the behavior prediction <ref> [2, 9, 11, 13] </ref>. In this case, QSIM propogates this quantitative information and uses it to prune branches of the tree which are inconsistent with the information. The most important quantitative information for the purposes of this paper is the information which QSIM derives about the landmarks. <p> For example we may say (eventually (and p t&lt;inf)) to mean that p becomes true in finite time. The proposition in-range is sensible only in the states of behavior trees which have had some type of quantitative extension to QSIM (e.g. Q2 [11], Q3 <ref> [2] </ref> or NSIM [9]) run on them. The numbers referred to in these expressions are extended real numbers: they may be -inf or +inf as well as real values. <p> Evi Gazi and Lyle Ungar also use TL to prove properties of models of chemical reaction controllers [6, 7]. There are three programs|Q2 [11], Q3 <ref> [2] </ref> and NSIM [9]|which extend QSIM to take advantage of numeric information, to prune spurious behaviors and to derive numeric bounds on landmark values and time-points.
Reference: [3] <author> Girish Bhat, Rance Cleaveland, and Orna Grumberg. </author> <title> Efficient on-the-fly model checking for CTL fl . In Proc. </title> <booktitle> Conf. on Logic in Computer Science (LICS-95), </booktitle> <year> 1995. </year>
Reference-contexts: Our implementation (TL) of a model-checking algorithm for CTL* is an "on-the-fly" model-checker based on the algorithm of Bhat, Cleaveland and Grumberg <ref> [3] </ref>. On-the-fly algorithms have the advantage over the more common "global" algorithms of being able to terminate with the correct result before constructing the entire exponentially-large structure. <p> Here we require that implies first be rewritten in terms of not and and or or. Every CTL* formula is equivalent to a formula in positive normal form because all temporal operators can be written in terms of those mentioned above and nots can be propagated inward to propositions <ref> [3] </ref>. Definition 4 (Universal Formula) A CTL* expression is said to be universal if, when the formula is written in positive normal form, there are no occurrences of the path quantifier possibly. We call a path formula a perfect path formula if it contains no path quantifiers. <p> The current implementation replaces the experimental versions described and used in previous publications [12, 14]. The underlying model-checking algorithm is that of Bhat, Cleaveland and Grumberg <ref> [3] </ref>. Bhat, Cleaveland and Grumberg prove that this algorithm has the same complexity as the best known global algorithms for both CTL* and CTL. <p> use may not infringe privately owned rights; or (b) assumes any liabilities with respect to the use of, or for damages resulting from the use of, any information, apparatus, method, or process disclosed in this report. 32 We would like to thank Bhat, Grumberg and Cleaveland for their excellent article <ref> [3] </ref> and Rance Cleaveland for answering our questions about their algorithm. A difficult task in writing a paper which is intended for audiences in two somewhat disjoint disciplines, such as Qualitative Reasoning and Temporal Logic, is to use language which is comfortable to readers in both fields.
Reference: [4] <author> E. M. Clarke, E. A. Emerson, and A. P. Sistla. </author> <title> Automatic verification of finite-state concurrent systems using temporal logic specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Modal logic adds operators for truth-values in alternate possible worlds (i.e., alternate behaviors or paths), such as necessarily and possibly. We have chosen to use the branching-time temporal logic CTL* which is described by Emerson and Clarke <ref> [4, 5] </ref>. Because QSIM is sound, for any CTL* statement which is "universal" in a sense we will define, if is modeled by the structure produced by QSIM, then a corresponding theorem holds for the solution of any ordinary differential equation consistent with the QDE that generated the QSIM structure.
Reference: [5] <author> E. Allen Emerson. </author> <title> Temporal and modal logic. </title> <editor> In J. van Leeuwen, edi tor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <pages> pages 995-1072. </pages> <publisher> Elsevier Science Pub. B. V./MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Modal logic adds operators for truth-values in alternate possible worlds (i.e., alternate behaviors or paths), such as necessarily and possibly. We have chosen to use the branching-time temporal logic CTL* which is described by Emerson and Clarke <ref> [4, 5] </ref>. Because QSIM is sound, for any CTL* statement which is "universal" in a sense we will define, if is modeled by the structure produced by QSIM, then a corresponding theorem holds for the solution of any ordinary differential equation consistent with the QDE that generated the QSIM structure. <p> In Section 6 we describe some applications of the combination of temporal-logic model-checking with qualitative simulation. 2 CTL* Computational Tree Logic (CTL) is a branching-time temporal logic. The theory of branching-time temporal logics is summarized by Emerson in The Handbook of Theoretical Computer Science <ref> [5] </ref>. The popular language, CTL, is a sub-language of CTL*. <p> A set X is fusion closed if, whenever x 1 sy 1 ; x 2 sy 2 2 X, then x 1 sy 2 2 X. See Emerson's survey article for a review of these issues <ref> [5] </ref>. We use the notation hs 0 ; s 1 ; s 2 ; : : :i to denote an infinite or finite totally-ordered set. We let fl (x) denote the cardinality of a finite, totally-ordered set x. <p> Probably the most work in temporal-logic model-checking has been done in applications of CTL and CTL* to computer processes such as parallel computing <ref> [5, 15] </ref>. More closely related work has been done by Moon, et al [16] who checked statements in CTL against state transition graphs in discrete-time systems generated from programmable logic controller ladder diagrams. Their specific application was to chemical process control. <p> Jahanian [8] modeled real time systems in the Modechart language. Statements in Real Time Logic were checked against a Modechart model. Real Time Logic is undecidable in general but certain classes of statements are shown to be decidable. Model-checking CTL* is decidable <ref> [5] </ref>. However, Real Time Logic is especially suited for expressing statements which are useful in time-critical systems, whereas some such statements are more difficult to make in CTL*. Other systems exist which allow temporal-logic sentences to be checked against a structure representing discrete event systems.
Reference: [6] <author> E. Gazi, W. D. Seider, L. H. Ungar, and B.J. Kuipers. </author> <title> Automatic analysis of monte-carlo simulations of dynamic chemical plants. </title> <booktitle> In Proceedings of ESCAPE 4, </booktitle> <year> 1995. </year> <note> (in press). </note>
Reference-contexts: Evi Gazi and Lyle Ungar also use TL to prove properties of models of chemical reaction controllers <ref> [6, 7] </ref>. There are three programs|Q2 [11], Q3 [2] and NSIM [9]|which extend QSIM to take advantage of numeric information, to prune spurious behaviors and to derive numeric bounds on landmark values and time-points.
Reference: [7] <author> E. Gazi, L. H. Ungar, and B. J. Kuipers. </author> <title> Temporal logic for summariz ing monte-carlo simulation: an application to controller verification. </title> <editor> In R. Shoureshi, editor, </editor> <booktitle> Intelligent Control. IEEE, </booktitle> <year> 1996. </year> <note> (submitted). </note>
Reference-contexts: Evi Gazi and Lyle Ungar also use TL to prove properties of models of chemical reaction controllers <ref> [6, 7] </ref>. There are three programs|Q2 [11], Q3 [2] and NSIM [9]|which extend QSIM to take advantage of numeric information, to prune spurious behaviors and to derive numeric bounds on landmark values and time-points.
Reference: [8] <author> Farnam Jahanian and Douglas A. Stewart. </author> <title> A method for verifying prop erties of Modechart specifications. </title> <booktitle> In Proceedings of the Real-time Systems Symposium, </booktitle> <address> Huntsville, AL, </address> <month> December </month> <year> 1988. </year>
Reference-contexts: Metric Temporal Logic is, strictly speaking, not as expressive as CTL*. However, it integrates time information 31 at a higher level of the language, therefore it is easy to express some statements in MTL which are difficult to express in CTL*. Jahanian <ref> [8] </ref> modeled real time systems in the Modechart language. Statements in Real Time Logic were checked against a Modechart model. Real Time Logic is undecidable in general but certain classes of statements are shown to be decidable. Model-checking CTL* is decidable [5].
Reference: [9] <author> Herbert Kay and Benjamin Kuipers. </author> <title> Numerical behavior envelopes for qualitative models. </title> <booktitle> In Proc. 11th National Conf. on Artificial Intelligence, </booktitle> <pages> pages 606-613, </pages> <address> Cambridge, MA, 1993. </address> <publisher> AAAI/MIT Press. </publisher>
Reference-contexts: Quantitative Information When strong-cycle matching is used and cross-edge cycles are not allowed, then the QDE and the initial state may be augmented with quantitative information such as numerical interval bounds on the real values denoted by landmarks and other symbolic terms in the behavior prediction <ref> [2, 9, 11, 13] </ref>. In this case, QSIM propogates this quantitative information and uses it to prune branches of the tree which are inconsistent with the information. The most important quantitative information for the purposes of this paper is the information which QSIM derives about the landmarks. <p> For example we may say (eventually (and p t&lt;inf)) to mean that p becomes true in finite time. The proposition in-range is sensible only in the states of behavior trees which have had some type of quantitative extension to QSIM (e.g. Q2 [11], Q3 [2] or NSIM <ref> [9] </ref>) run on them. The numbers referred to in these expressions are extended real numbers: they may be -inf or +inf as well as real values.
Reference: [10] <author> B. Kuipers. </author> <title> Qualitative simulation. </title> <journal> Artificial Intelligence, </journal> <volume> 29 </volume> <pages> 289-338, </pages> <year> 1986. </year>
Reference-contexts: Our program, TL, makes a formal connection between solutions to real differential equations and temporal-logic model checking. A qualitative simulator, such as QSIM, constructs a tree-like structure whose branches represent the possible behaviors consistent with the qualitative differential equation (QDE) and initial state input to the QSIM algorithm <ref> [10, 13] </ref>. This set of behaviors is expressed as a finite structure of qualitative state descriptions. <p> Theorem 1 (Guaranteed Coverage) Under the conditions above, there is a rooted fullpath x in c M and a specification hx; ci of x such that hx; ci qualitatively describes some splitting hft i g; U i of U . The proof is given by Kuipers <ref> [10, 13] </ref>.
Reference: [11] <author> B. Kuipers and D. Berleant. </author> <title> Using incomplete quantitative knowledge in qualitative reasoning. </title> <booktitle> Proc. 7th National Conf. on Artificial Intelligence (AAAI-88), </booktitle> <year> 1988. </year>
Reference-contexts: The propositional part of the temporal language includes propositions which allow the construction of formulas containing numerical information. This can be used in conjunction with the numerical extensions to QSIM|Q2 <ref> [11] </ref>, Q3 [2] and NSIM [9]|in order to prove numerical properties of physical systems. In Section 2 we describe and define the language CTL* and present some basic definitions and facts which will be useful. In Section 3 we describe the QSIM framework. <p> Quantitative Information When strong-cycle matching is used and cross-edge cycles are not allowed, then the QDE and the initial state may be augmented with quantitative information such as numerical interval bounds on the real values denoted by landmarks and other symbolic terms in the behavior prediction <ref> [2, 9, 11, 13] </ref>. In this case, QSIM propogates this quantitative information and uses it to prune branches of the tree which are inconsistent with the information. The most important quantitative information for the purposes of this paper is the information which QSIM derives about the landmarks. <p> For example we may say (eventually (and p t&lt;inf)) to mean that p becomes true in finite time. The proposition in-range is sensible only in the states of behavior trees which have had some type of quantitative extension to QSIM (e.g. Q2 <ref> [11] </ref>, Q3 [2] or NSIM [9]) run on them. The numbers referred to in these expressions are extended real numbers: they may be -inf or +inf as well as real values. <p> Evi Gazi and Lyle Ungar also use TL to prove properties of models of chemical reaction controllers [6, 7]. There are three programs|Q2 <ref> [11] </ref>, Q3 [2] and NSIM [9]|which extend QSIM to take advantage of numeric information, to prune spurious behaviors and to derive numeric bounds on landmark values and time-points.
Reference: [12] <author> B. J. Kuipers and K. -Astrom. </author> <title> The composition and validation of hetero geneous control laws. </title> <journal> Automatica, </journal> <volume> 30(2) </volume> <pages> 233-249, </pages> <year> 1994. </year>
Reference-contexts: The current implementation replaces the experimental versions described and used in previous publications <ref> [12, 14] </ref>. The underlying model-checking algorithm is that of Bhat, Cleaveland and Grumberg [3]. Bhat, Cleaveland and Grumberg prove that this algorithm has the same complexity as the best known global algorithms for both CTL* and CTL. <p> In these circumstances, the user can learn everything he may need to know about a QSIM behavior tree by evaluating a few carefully chosen CTL* statements. 30 6.3 Proving Properties of Controllers Kuipers & -Astrom <ref> [12] </ref> have used TL and QSIM to prove properties of heterogeneous control laws. A heterogeneous controller is a nonlinear controller created by the composition of local control laws appropriate to different, possibly overlapping, operating regions. <p> By expressing the desired guarantee as a statement in CTL*, the validity of the guarantee can be automatically checked against the set of possible behaviors. Kuipers & -Astrom <ref> [12] </ref> demonstrate the design of heterogeneous controllers, and prove certain useful properties, first for a simple level controller for a water tank, and second for a highly nonlinear chemical reactor. Evi Gazi and Lyle Ungar also use TL to prove properties of models of chemical reaction controllers [6, 7].
Reference: [13] <author> Benjamin Kuipers. </author> <title> Qualitative Reasoning: Modeling and Simulation with Incomplete Knowledge. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1994. </year> <month> 35 </month>
Reference-contexts: Our program, TL, makes a formal connection between solutions to real differential equations and temporal-logic model checking. A qualitative simulator, such as QSIM, constructs a tree-like structure whose branches represent the possible behaviors consistent with the qualitative differential equation (QDE) and initial state input to the QSIM algorithm <ref> [10, 13] </ref>. This set of behaviors is expressed as a finite structure of qualitative state descriptions. <p> Proof: The proof follows easily by induction on the length of by using Lemma 1. 2 3 QSIM In Section 3.1 we briefly describe the QSIM framework. We refer the reader to Kuipers' full description of the QSIM framework <ref> [13] </ref> and to Shults' reformaliza-tion of QSIM [18] for details on the new definition of a reasonable function and other reformalizations of concepts related to the Guaranteed Coverage Theorem. 3.1 The QSIM Framework A qualitative differential equation (QDE) consists of a finite set of variables (each of which is associated with <p> However, by applying the envi-sionment simulation style (no new landmarks, weak cycle-match criterion, and cycle matches anywhere in the behavior tree), every qualitative model has a finite closed behavior tree. (See Chapter 5 of Kuipers' Qualitative Reasoning <ref> [13] </ref>.) The Represented QSIM Structure QSIM may use various matching criteria when it detects cycles. <p> Quantitative Information When strong-cycle matching is used and cross-edge cycles are not allowed, then the QDE and the initial state may be augmented with quantitative information such as numerical interval bounds on the real values denoted by landmarks and other symbolic terms in the behavior prediction <ref> [2, 9, 11, 13] </ref>. In this case, QSIM propogates this quantitative information and uses it to prune branches of the tree which are inconsistent with the information. The most important quantitative information for the purposes of this paper is the information which QSIM derives about the landmarks. <p> Theorem 1 (Guaranteed Coverage) Under the conditions above, there is a rooted fullpath x in c M and a specification hx; ci of x such that hx; ci qualitatively describes some splitting hft i g; U i of U . The proof is given by Kuipers <ref> [10, 13] </ref>. <p> Temporal reasoning may be useful any time QSIM is used. QSIM has been used to simulate controllers, human organs and disease, abstract and real physical systems, electrical circuits, population dynamics, chemical reactions, etc. <ref> [13] </ref> TL can be used to prove that a QSIM tree is closed with the following query (TL R (necessarily (eventually (or (status quiescent) (status cycle) (status transition))))) where R is the root of the tree. (See Appendix A for an explanation of arguments to the status proposition other than quiescent.)
Reference: [14] <author> Benjamin Kuipers and Benjamin Shults. </author> <title> Reasoning in logic about continu ous systems. </title> <editor> In J. Doyle, E. Sandewall, and P. Torasso, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Fourth International Conference (KR-94), </booktitle> <address> San Mateo, CA, 1994. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The current implementation replaces the experimental versions described and used in previous publications <ref> [12, 14] </ref>. The underlying model-checking algorithm is that of Bhat, Cleaveland and Grumberg [3]. Bhat, Cleaveland and Grumberg prove that this algorithm has the same complexity as the best known global algorithms for both CTL* and CTL.
Reference: [15] <author> O. Lichtenstein and A. Pnueli. </author> <title> Checking that finite state concurrent pro grams satisfy thir linear specifications. </title> <booktitle> In Twelfth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 97-107, </pages> <year> 1984. </year>
Reference-contexts: Probably the most work in temporal-logic model-checking has been done in applications of CTL and CTL* to computer processes such as parallel computing <ref> [5, 15] </ref>. More closely related work has been done by Moon, et al [16] who checked statements in CTL against state transition graphs in discrete-time systems generated from programmable logic controller ladder diagrams. Their specific application was to chemical process control.
Reference: [16] <author> I. Moon, G. J. Powers, J. R. Burch, and E. M. Clarke. </author> <title> Automatic verifi cation of sequential control systems using temporal logic. </title> <journal> AIChE Journal, </journal> <volume> 38(1) </volume> <pages> 67-75, </pages> <year> 1992. </year>
Reference-contexts: Probably the most work in temporal-logic model-checking has been done in applications of CTL and CTL* to computer processes such as parallel computing [5, 15]. More closely related work has been done by Moon, et al <ref> [16] </ref> who checked statements in CTL against state transition graphs in discrete-time systems generated from programmable logic controller ladder diagrams. Their specific application was to chemical process control.
Reference: [17] <author> Manny Rayner. </author> <title> On the applicability of nonmonotonic logic to formal rea soning in continuous time. </title> <journal> Artificial Intelligence, </journal> <volume> 49 </volume> <pages> 345-360, </pages> <year> 1991. </year>
Reference-contexts: The former problem is solved by restricting the syntax of the formulas in Theorem 3. This is exactly what the corollary in this section accomplishes. In order to illustrate the need for the corollary, we will construct a simple example with numeric information. Three billiard balls <ref> [17] </ref> start to move with constant velocities and initial positions shown in Figure 2 (a). The QSIM QDE model for this scenario provides quantity spaces for position, velocity, and acceleration in the x and y directions, and constraints for constant-velocity motion.
Reference: [18] <author> Benjamin Shults. </author> <title> Toward a reformalization of QSIM. </title> <institution> University of Texas Artificial Intelligence Laboratory TR AI96-245, </institution> <month> January </month> <year> 1996. </year> <month> 36 </month>
Reference-contexts: Proof: The proof follows easily by induction on the length of by using Lemma 1. 2 3 QSIM In Section 3.1 we briefly describe the QSIM framework. We refer the reader to Kuipers' full description of the QSIM framework [13] and to Shults' reformaliza-tion of QSIM <ref> [18] </ref> for details on the new definition of a reasonable function and other reformalizations of concepts related to the Guaranteed Coverage Theorem. 3.1 The QSIM Framework A qualitative differential equation (QDE) consists of a finite set of variables (each of which is associated with a quantity space which is a totally-ordered <p> Given an ODE, F , there is associated with it a set, F 0 , of simultaneous equations which is derived from F . See Shults' reformalization for more details <ref> [18] </ref>. F 0 is useful because it can be easily abstracted to a QDE and a solution to F 0 can be converted into a solution to F . We will let U denote the solution to F 0 . <p> A fullpath in the QSIM structure is a path which is infinite or terminates in a state which is not a cycle state and has no R-successor. See Shults' reformalization of QSIM <ref> [18] </ref> to see exactly how c M is constructed from M . First we define the set X r of rooted fullpaths. A rooted fullpath is a path starting at the root of the QSIM tree which continues through cycle states in a 10 semantically sensible way. <p> This quantitative information may be different on each QSIM behavior. That is to say that on different QSIM behaviors, a given landmark may name different real numbers. Therefore, if weak-cycle matching is used or cross-edge cycles are detected, then the numeric information loses its sense <ref> [18] </ref>. 3.2 Qualitative Description For the statement of the main theorems, as well as the Guaranteed Coverage Theorem, we need to have a formal way of relating fullpaths in the QSIM structure with the underlying reasonable, extended real valued functions which they are meant to be describing. <p> According to the definition of a reasonable function <ref> [18] </ref>, such a set exists, and may be infinite only if 1 is the supremum of A and A is open on the right. We will call the pair hft i g; U i a splitting of U . <p> This enables the checker to enumerate the rooted fullpaths so that it does not follow paths which are not represented by the QSIM tree. (See Shults' reformalization of the QSIM framework <ref> [18] </ref> for a discussion of this.) 5.4 Completeness Results Given a closed QSIM structure, c M , generated from hC; Ii, we sometimes would like to know whether there is any ODE, F , which abstracts to C whose solution is described by some given temporal formula.
References-found: 18

