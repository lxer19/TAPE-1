URL: http://ballade.cs.ucla.edu:8080/~cong/papers/tvlsi94.ps.gz
Refering-URL: http://ballade.cs.ucla.edu/~cong/publications.html
Root-URL: http://www.cs.ucla.edu
Title: On Area/Depth Trade-off in LUT-Based FPGA Technology Mapping  
Author: Jason Cong and Yuzheng Ding 
Address: Los Angeles, CA 90024  
Affiliation: Department of Computer Science University of California,  
Abstract: In this paper, we study the area and depth trade-off in lookup-table (LUT) based FPGA technology mapping. Starting from a depth-optimal mapping solution, we perform a sequence of depth relaxation operations and area minimization mapping procedures to produce a set of mapping solutions for a given design with smooth area and depth trade-off. As the core of the area minimization step, we have developed a polynomial-time optimal algorithm for computing an area-minimum mapping solution without node duplication for a K-bounded general Boolean network, which makes a significant step towards complete understanding of the general area minimization problem in FPGA technology mapping. The experimental results on MCNC benchmark circuits show that our solution sets outperform the solutions produced by most existing mapping algorithms in terms of both area and depth minimization. Manuscript received hhhhhhhhhhhhhhhhhh. This research is partially supported by a grant from Xilinx Inc. under the State of California MICRO program No.92-030, a grant from Fujitsu America Inc., and the National Science Foundation Young Investigator Award under grant MIP-9357582. The authors are with the Department of Computer Science, University of California, Los Angeles, CA 90024. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bhat, N. and D. Hill, </author> <title> ``Routable Technology Mapping for FPGAs,'' </title> <booktitle> First Int'l ACM/SIGDA Workshop on Field Programmable Gate Arrays, </booktitle> <pages> pp. 143-148, </pages> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: The algorithms in the second category emphasize on minimizing the delay of the mapping solution. These algorithms include Chortle-d [9], MIS-pga (delay) [13], TechMap-L [15], DAG-Map [3], and FlowMap [4]. The algorithms in the third category, including RMap [17] and the algorithm reported in <ref> [1] </ref>, emphasize on maximizing the routability of the mapping result.
Reference: [2] <author> Brayton, R. K., R. Rudell, and A. L. Sangiovanni-Vincentelli, </author> <title> ``MIS: A Multiple-Level Logic Optimization,'' </title> <journal> IEEE Transactions on CAD, </journal> <pages> pp. 1062-1081, </pages> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: In order to make fair comparison with previous algorithms, we used the same initial networks as used by Chortle-crf/Chortle-d [9], DAG-Map [3], and FlowMap [4]. These initial networks are synthesized using a MIS script <ref> [2] </ref> which performs technology independent optimization. Table 1 shows the mapping solution sets computed by FlowMap-r. The time in this table is the CPU time used for the solution of the maximum depth relaxation shown in the table, recorded on a SUN SPARC IPC (14.8MIPS).
Reference: [3] <author> Chen, K. C., J. Cong, Y. Ding, A. B. Kahng, and P. Trajmar, ``DAG-Map: </author> <title> Graph-based FPGA Technology Mapping for Delay Optimization,'' </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <pages> pp. 7-20, </pages> <month> Sep. </month> <year> 1992. </year>
Reference-contexts: These algorithms include Chortle-crf [8], MIS-pga [12, 14], XMap [11], VisMap [18], and TechMap [15]. The algorithms in the second category emphasize on minimizing the delay of the mapping solution. These algorithms include Chortle-d [9], MIS-pga (delay) [13], TechMap-L [15], DAG-Map <ref> [3] </ref>, and FlowMap [4]. The algorithms in the third category, including RMap [17] and the algorithm reported in [1], emphasize on maximizing the routability of the mapping result. <p> For example, the DMIG algorithm in <ref> [3] </ref> transforms a general network of simple gates into a K-bounded network with minimum depth. 2 Node u is a predecessor of node v if there is a directed path from u to v . -6--v is not a PI or PO, the slack of v is D -(L v +P <p> The details of DF-Map will be presented in Section 5. Then, we carry out two post-processing procedures which allow necessary node duplications for further area minimization. The two procedures are MP-Pack, a multi-fanout predecessor packing procedure from the DAG-Map package <ref> [3] </ref>, and Flow-Pack, a flow-based area minimization procedure from the FlowMap package [4]. To generate a set of mapping solutions, we gradually increase the depth bound for the mapping solution and repeat the two-phase process for each depth bound. <p> Since the depth bound is maintained during the depth relaxation, it is still maintained after DF-Map. Moreover, according to the results in <ref> [3, 4] </ref>, the two post-processing procedures MP-Pack and Flow-Pack that are used in FlowMap-r for area minimization with node duplication, will not increase network depth either. Therefore, after the depth relaxation phase in FlowMap-r, the depth of the network will not increase during the area minimization. <p> Experimental Results We have implemented the FlowMap-r algorithm on SUN SPARC workstations and tested it on a set of MCNC benchmark circuits. In order to make fair comparison with previous algorithms, we used the same initial networks as used by Chortle-crf/Chortle-d [9], DAG-Map <ref> [3] </ref>, and FlowMap [4]. These initial networks are synthesized using a MIS script [2] which performs technology independent optimization. Table 1 shows the mapping solution sets computed by FlowMap-r.
Reference: [4] <author> Cong, J. and Y. Ding, </author> <title> ``An Optimal Technology Mapping Algorithm fo Delay Optimization in Lookup-Table Based FPGA Designs,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 48-53, </pages> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: These algorithms include Chortle-crf [8], MIS-pga [12, 14], XMap [11], VisMap [18], and TechMap [15]. The algorithms in the second category emphasize on minimizing the delay of the mapping solution. These algorithms include Chortle-d [9], MIS-pga (delay) [13], TechMap-L [15], DAG-Map [3], and FlowMap <ref> [4] </ref>. The algorithms in the third category, including RMap [17] and the algorithm reported in [1], emphasize on maximizing the routability of the mapping result. <p> Starting from a depth-optimal mapping solution (computed by the FlowMap algorithm <ref> [4] </ref>), we perform a sequence of depth relaxation operations to obtain a new network with bounded increase in depth so that it is advantageous to subsequent re-mapping for area minimization. We then re-map the resulting network to obtain an area-minimized mapping solution with bounded depth. <p> Then, we shall give an overview of our algorithm. We start with a briefly description of the FlowMap algorithm, which will be used to compute a depth-optimal mapping solution as our starting point. 3.1. The FlowMap Algorithm FlowMap <ref> [4] </ref> is an LUT-based FPGA technology mapper that produces depth-optimal mapping solutions for general Boolean networks in polynomial time. The basic idea of the FlowMap algorithm is to find a depth-optimal mapping for each node in the network, according to the topological order starting from the PI nodes. <p> Then, we carry out two post-processing procedures which allow necessary node duplications for further area minimization. The two procedures are MP-Pack, a multi-fanout predecessor packing procedure from the DAG-Map package [3], and Flow-Pack, a flow-based area minimization procedure from the FlowMap package <ref> [4] </ref>. To generate a set of mapping solutions, we gradually increase the depth bound for the mapping solution and repeat the two-phase process for each depth bound. The algorithm stops when no improvement on area is available by further increase of the depth bound. <p> Since the depth bound is maintained during the depth relaxation, it is still maintained after DF-Map. Moreover, according to the results in <ref> [3, 4] </ref>, the two post-processing procedures MP-Pack and Flow-Pack that are used in FlowMap-r for area minimization with node duplication, will not increase network depth either. Therefore, after the depth relaxation phase in FlowMap-r, the depth of the network will not increase during the area minimization. <p> Experimental Results We have implemented the FlowMap-r algorithm on SUN SPARC workstations and tested it on a set of MCNC benchmark circuits. In order to make fair comparison with previous algorithms, we used the same initial networks as used by Chortle-crf/Chortle-d [9], DAG-Map [3], and FlowMap <ref> [4] </ref>. These initial networks are synthesized using a MIS script [2] which performs technology independent optimization. Table 1 shows the mapping solution sets computed by FlowMap-r. <p> For most circuits, as we increase the depth bound, the number of LUTs decreases considerably. We also compared the area-minimum and depth-minimum solutions generated by FlowMap-r with those generated by several existing mapping algorithms. The data for these algorithms are quoted from <ref> [9, 4, 13] </ref> 4 .
Reference: [5] <author> Cong, J. and Y. Ding, </author> <title> ``Beyond the Combinatorial Limit in Depth Minimization for LUT-Based FPGA Designs,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 110-114, </pages> <year> 1993. </year>
Reference-contexts: During depth relaxation, we use only structural information to decompose the LUTs. It is also possible to use Boolean optimization techniques to re-synthesize the LUT network locally to explore more possibilities, at the expense of longer computation time. Such a mapping-directed resynthesis technique was used in <ref> [5] </ref> for further depth optimization, and achieved very promising results. Acknowledgment We thank Dr. K.C. Chen and Dr. Bryan Preas for their helpful discussions. -25-
Reference: [6] <author> Cong, J., Y. Ding, T. Gao, and K. Chen, </author> <title> ``An Optimal Performance-Driven Technology Mapping Algorithm for LUT based FPGAs under Arbitrary Net-Delay Models,'' </title> <booktitle> Proc. 1993 Int'l Conf. on CAD and Computer Graphics, </booktitle> <pages> pp. 599-603, </pages> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: Although the unit delay model is used when describing the algorithm, we can generalize the algorithm to the case where an arbitrary delay is assigned to a net (for example, we can also handle the nominal delay model proposed by [16]). Such a generalization was shown in <ref> [6] </ref>. During depth relaxation, we use only structural information to decompose the LUTs. It is also possible to use Boolean optimization techniques to re-synthesize the LUT network locally to explore more possibilities, at the expense of longer computation time.
Reference: [7] <author> Cormen, T., C. Leiserson, and R. Rivest, </author> <title> Algorithms, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA (1990). </address>
Reference-contexts: Note that in this case, the number of cuts generated according to this equation is bounded by a constant depending only on K . In fact, it can be shown that this constant is bounded by the (K -1)th Catalan number <ref> [7] </ref>, denoted c K -1 , where c K = K +1 1 hhhhh ( K 2K ). For K =5, c K -1 =14.
Reference: [8] <author> Francis, R. J., J. Rose, and Z. Vranesic, ``Chortle-crf: </author> <title> Fast Technology Mapping for Lookup Table-Based FPGAs,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 613-619, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Previous technology mapping algorithms for LUT-based FPGA design can be roughly divided into three categories according to their optimization objectives. The algorithms in the first category emphasize on minimizing the number of LUTs in the mapping solution. These algorithms include Chortle-crf <ref> [8] </ref>, MIS-pga [12, 14], XMap [11], VisMap [18], and TechMap [15]. The algorithms in the second category emphasize on minimizing the delay of the mapping solution. These algorithms include Chortle-d [9], MIS-pga (delay) [13], TechMap-L [15], DAG-Map [3], and FlowMap [4].
Reference: [9] <author> Francis, R. J., J. Rose, and Z. Vranesic, </author> <title> ``Technology Mapping of Lookup Table-Based FPGAs for Performance,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 568-571, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: These algorithms include Chortle-crf [8], MIS-pga [12, 14], XMap [11], VisMap [18], and TechMap [15]. The algorithms in the second category emphasize on minimizing the delay of the mapping solution. These algorithms include Chortle-d <ref> [9] </ref>, MIS-pga (delay) [13], TechMap-L [15], DAG-Map [3], and FlowMap [4]. The algorithms in the third category, including RMap [17] and the algorithm reported in [1], emphasize on maximizing the routability of the mapping result. <p> Experimental Results We have implemented the FlowMap-r algorithm on SUN SPARC workstations and tested it on a set of MCNC benchmark circuits. In order to make fair comparison with previous algorithms, we used the same initial networks as used by Chortle-crf/Chortle-d <ref> [9] </ref>, DAG-Map [3], and FlowMap [4]. These initial networks are synthesized using a MIS script [2] which performs technology independent optimization. Table 1 shows the mapping solution sets computed by FlowMap-r. <p> For most circuits, as we increase the depth bound, the number of LUTs decreases considerably. We also compared the area-minimum and depth-minimum solutions generated by FlowMap-r with those generated by several existing mapping algorithms. The data for these algorithms are quoted from <ref> [9, 4, 13] </ref> 4 .
Reference: [10] <author> Hill, D., </author> <title> ``A CAD System for the Design of Field Programmable Gate Arrays,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 187-192, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: An FPGA chip consists of programmable logic blocks, programmable interconnections, and programmable I/O pads. The lookup table (LUT) based FPGA architecture is produced by several FPGA manufacturers <ref> [19, 10] </ref>, in which the basic programmable logic block is a K-input lookup table. A K-input LUT (K-LUT) can implement any Boolean function of up to K variables. The technology mapping problem for LUT-based FPGA designs is to transform a general Boolean network into a functionally equivalent K-LUT network.
Reference: [11] <author> Karplus, K., ``Xmap: </author> <title> A Technology Mapper for Table-lookup Field-Programmable Gate Arrays,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 240-243, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Previous technology mapping algorithms for LUT-based FPGA design can be roughly divided into three categories according to their optimization objectives. The algorithms in the first category emphasize on minimizing the number of LUTs in the mapping solution. These algorithms include Chortle-crf [8], MIS-pga [12, 14], XMap <ref> [11] </ref>, VisMap [18], and TechMap [15]. The algorithms in the second category emphasize on minimizing the delay of the mapping solution. These algorithms include Chortle-d [9], MIS-pga (delay) [13], TechMap-L [15], DAG-Map [3], and FlowMap [4].
Reference: [12] <author> Murgai, R., Y. Nishizaki, N. Shenay, R. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> ``Logic Synthesis Algorithms for Programmable Gate Arrays,'' </title> <booktitle> Proc. 27th ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 620-625, </pages> <year> 1990. </year> <month> -26- </month>
Reference-contexts: Previous technology mapping algorithms for LUT-based FPGA design can be roughly divided into three categories according to their optimization objectives. The algorithms in the first category emphasize on minimizing the number of LUTs in the mapping solution. These algorithms include Chortle-crf [8], MIS-pga <ref> [12, 14] </ref>, XMap [11], VisMap [18], and TechMap [15]. The algorithms in the second category emphasize on minimizing the delay of the mapping solution. These algorithms include Chortle-d [9], MIS-pga (delay) [13], TechMap-L [15], DAG-Map [3], and FlowMap [4].
Reference: [13] <author> Murgai, R., N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> ``Performance Directed Synthesis for Table Look Up Programmable Gate Arrays,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 572-575, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: These algorithms include Chortle-crf [8], MIS-pga [12, 14], XMap [11], VisMap [18], and TechMap [15]. The algorithms in the second category emphasize on minimizing the delay of the mapping solution. These algorithms include Chortle-d [9], MIS-pga (delay) <ref> [13] </ref>, TechMap-L [15], DAG-Map [3], and FlowMap [4]. The algorithms in the third category, including RMap [17] and the algorithm reported in [1], emphasize on maximizing the routability of the mapping result. <p> For most circuits, as we increase the depth bound, the number of LUTs decreases considerably. We also compared the area-minimum and depth-minimum solutions generated by FlowMap-r with those generated by several existing mapping algorithms. The data for these algorithms are quoted from <ref> [9, 4, 13] </ref> 4 .
Reference: [14] <author> Murgai, R., N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> ``Improved Logic Synthesis Algorithms for Table Look Up Architectures,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 564-567, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: Previous technology mapping algorithms for LUT-based FPGA design can be roughly divided into three categories according to their optimization objectives. The algorithms in the first category emphasize on minimizing the number of LUTs in the mapping solution. These algorithms include Chortle-crf [8], MIS-pga <ref> [12, 14] </ref>, XMap [11], VisMap [18], and TechMap [15]. The algorithms in the second category emphasize on minimizing the delay of the mapping solution. These algorithms include Chortle-d [9], MIS-pga (delay) [13], TechMap-L [15], DAG-Map [3], and FlowMap [4]. <p> Overall, the depth-optimal solutions of FlowMap-r use the same number of levels and 10% fewer LUTs than FlowMap, 8% fewer levels and 9% fewer LUTs than MIS-pga (delay), and 5% fewer levels and 40% fewer LUTs than Chortle-d. The improved version of MIS-pga program, MIS-pga (new) <ref> [14] </ref>, outperforms FlowMap-r in terms of area, but the depths of their solutions were not reported. It is important to point out that FlowMap-r is solely based on combinatorial optimization techniques, therefore runs faster than Boolean optimization based algorithms for large circuits.
Reference: [15] <author> Sawkar, P. and D. Thomas, </author> <title> ``Technology Mapping for Table-Look-Up Based Field Programmable Gate Arrays,'' </title> <booktitle> ACM/SIGDA Workshop on Field Programmable Gate Arrays, </booktitle> <pages> pp. 83-88, </pages> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: The algorithms in the first category emphasize on minimizing the number of LUTs in the mapping solution. These algorithms include Chortle-crf [8], MIS-pga [12, 14], XMap [11], VisMap [18], and TechMap <ref> [15] </ref>. The algorithms in the second category emphasize on minimizing the delay of the mapping solution. These algorithms include Chortle-d [9], MIS-pga (delay) [13], TechMap-L [15], DAG-Map [3], and FlowMap [4]. <p> These algorithms include Chortle-crf [8], MIS-pga [12, 14], XMap [11], VisMap [18], and TechMap <ref> [15] </ref>. The algorithms in the second category emphasize on minimizing the delay of the mapping solution. These algorithms include Chortle-d [9], MIS-pga (delay) [13], TechMap-L [15], DAG-Map [3], and FlowMap [4]. The algorithms in the third category, including RMap [17] and the algorithm reported in [1], emphasize on maximizing the routability of the mapping result.
Reference: [16] <author> Schlag, M., P. Chan, and J. Kong, </author> <title> ``Empirical Evaluation of Multilevel Logic Minimization Tools for a Field Programmable Gate Array Technology,'' </title> <booktitle> Proc. 1st Int'l Workshop on Field Programmable Logic and Applications, </booktitle> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: Although the unit delay model is used when describing the algorithm, we can generalize the algorithm to the case where an arbitrary delay is assigned to a net (for example, we can also handle the nominal delay model proposed by <ref> [16] </ref>). Such a generalization was shown in [6]. During depth relaxation, we use only structural information to decompose the LUTs. It is also possible to use Boolean optimization techniques to re-synthesize the LUT network locally to explore more possibilities, at the expense of longer computation time.
Reference: [17] <author> Schlag, M., J. Kong, and P. K. Chan, </author> <title> ``Routability-Driven Technology Mapping for Lookup Table-Based FPGAs,'' </title> <booktitle> Proc. 1992 IEEE International Conference on Computer Design, </booktitle> <pages> pp. 86-90, </pages> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: The algorithms in the second category emphasize on minimizing the delay of the mapping solution. These algorithms include Chortle-d [9], MIS-pga (delay) [13], TechMap-L [15], DAG-Map [3], and FlowMap [4]. The algorithms in the third category, including RMap <ref> [17] </ref> and the algorithm reported in [1], emphasize on maximizing the routability of the mapping result.
Reference: [18] <author> Woo, N.-S., </author> <title> ``A Heuristic Method for FPGA Technology Mapping Based on the Edge Visibility,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 248-251, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Previous technology mapping algorithms for LUT-based FPGA design can be roughly divided into three categories according to their optimization objectives. The algorithms in the first category emphasize on minimizing the number of LUTs in the mapping solution. These algorithms include Chortle-crf [8], MIS-pga [12, 14], XMap [11], VisMap <ref> [18] </ref>, and TechMap [15]. The algorithms in the second category emphasize on minimizing the delay of the mapping solution. These algorithms include Chortle-d [9], MIS-pga (delay) [13], TechMap-L [15], DAG-Map [3], and FlowMap [4].
Reference: [19] <author> Xilinx, </author> <title> The Programmable Gate Array Data Book, </title> <address> Xilinx, San Jose, CA (1993). </address>
Reference-contexts: An FPGA chip consists of programmable logic blocks, programmable interconnections, and programmable I/O pads. The lookup table (LUT) based FPGA architecture is produced by several FPGA manufacturers <ref> [19, 10] </ref>, in which the basic programmable logic block is a K-input lookup table. A K-input LUT (K-LUT) can implement any Boolean function of up to K variables. The technology mapping problem for LUT-based FPGA designs is to transform a general Boolean network into a functionally equivalent K-LUT network.
References-found: 19

