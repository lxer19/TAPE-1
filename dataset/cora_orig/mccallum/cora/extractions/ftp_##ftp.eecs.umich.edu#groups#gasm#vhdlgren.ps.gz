URL: ftp://ftp.eecs.umich.edu/groups/gasm/vhdlgren.ps.gz
Refering-URL: http://www.eecs.umich.edu/gasm/proglang.html
Root-URL: http://www.eecs.umich.edu
Title: The Semantics of Behavioral VHDL'93 Descriptions  
Author: Egon Borger Uwe Glasser Wolfgang Muller 
Address: I-56125 Pisa, Italy D-33098 Paderborn, Germany D-33102 Paderborn, Germany  
Affiliation: Dipartimento di Informatica Heinz Nixdorf Institut Cadlab Universita di Pisa Universitat-GH Paderborn Universitat-GH Paderborn  
Abstract: We present a rigorous but transparent semantic definition of VHDL'93 covering the complete signal behavior and time model including the various wait statements and signal assignment statements. We present a VHDL interpreter in the form of rules of a concurrent evolving algebra which faithfully reflects and supports the view given in the VHDL'93 standard language reference manual. 
Abstract-found: 1
Intro-found: 1
Reference: [BGM94] <author> E. Borger, U. Glasser and W. Muller. </author> <title> A Formal Specification of the Semantics of Behavioral VHDL'93 Descriptions. </title> <type> Technical Report, </type> <note> 1994 (to appear). </note>
Reference-contexts: In this paper, due to limited space, we did not treat the behavior of shared variables and ports (cf. <ref> [BGM94] </ref>). In a next step we will start to investigate the implementation of adequate tools for machine assisted analysis and verification of EA models. We are also working an UDL/I algebra with the ultimate goal to provide a uniform framework for comparison of VHDL and UDL/I properties.
Reference: [BoPa87] <author> D. Borrione and J.L. Paillet. </author> <title> An approach to the formal verification of VHDL descriptions. </title> <type> Report No. </type> <institution> 683-I, IMAG/ARTEMIS, Grenoble, </institution> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Approaching the definition of a formal semantics of the IEEE Std-1076 hardware description language VHDL'87 as well as of the new VHDL'93 1 [VHDL93] standard is of high interest for the synthesis and the formal verification of VHDL models. Borrione and Paillet <ref> [BoPa87] </ref> have done first investigations defining the semantics of a VHDL'87 subset in terms of a functional model. Further investigations can be found in [Sal92, SaBo93]. The definition of a subset of the VHDL'87 semantics in terms of Booyer-Moore Logic is presented by Read and Ed-wards in [ReEd94].
Reference: [DJS94] <author> W. Damm, B. Josko, and R. Schlor. </author> <title> Specification and Verification of VHDL-based System-Level Hardware Designs. In Specification and Validation Methods, </title> <editor> E. Borger (ed.). OUP, </editor> <address> Oxford, </address> <note> 1994 (to appear). </note>
Reference-contexts: The structural operational semantics of a VHDL'87 subset (Femto-VHDL) for HOL verification is presented by Van Tassel in [VaTa93]. Damm et al. give the detailed structural operational semantics of a VHDL'87 subset based on transition systems in <ref> [DJS94] </ref>. Muller introduces a partly denotational and partly operational approach (High-Level Semantics of fl Published in the Proceedings of EURO-DAC'94/EURO-VHDL'94, Grenoble, September 19-23, IEEE Press, Los Alami-tos, CA, 1994. 1 Some publications refer to this standard as VHDL'92 VHDL'93) in [Mue93].
Reference: [Davis93] <author> K.C. Davis. </author> <title> A Denotational Definition of the VHDL Simulation Kernel. </title> <booktitle> In CHDL'93, </booktitle> <address> Ottawa, May 1993, </address> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1993. </year>
Reference-contexts: Further investigations can be found in [Sal92, SaBo93]. The definition of a subset of the VHDL'87 semantics in terms of Booyer-Moore Logic is presented by Read and Ed-wards in [ReEd94]. Wilsey [Wilsey90] defines the semantics of a small VHDL'87 subset based on interval temporal logic. Davis <ref> [Davis93] </ref> has introduced the denotational semantics of the VHDL simulation cycle by the use of an intermediate language that is derived from a very limited behavioral VHDL'87 subset. The structural operational semantics of a VHDL'87 subset (Femto-VHDL) for HOL verification is presented by Van Tassel in [VaTa93].
Reference: [Gur91] <author> Y. Gurevich. </author> <title> Evolving Algebras ATutorial Introduction. </title> <journal> In Bulletin of the EATCS, </journal> <month> Feb. </month> <year> 1991, </year> <note> No.43, pp.264-284. </note>
Reference-contexts: In this paper we provide a rigorous but simple semantic definition of elaborated VHDL'93 including the new features of postponed processes and pulse rejection limit [VHDL93]. We define the formal semantics of VHDL'93 in terms of Gurevich's concurrent evolving algebras <ref> [Gur91, Gur94] </ref>. The flexibility of this concept allows us to produce our specification following the terminology and the view presented by the standard language reference manual [VHDL93]. The remainder of this paper is organized as follows. In Section 2 we briefly introduce what is needed from concurrent evolving algebras. <p> Section 4 gives a conclusion and future directions. 2 Evolving algebras Evolving algebras (EAs) can be understood as `pseudocode over abstract data', without any particular theoretical prerequisites. Here we list only the basic definitions and refer for a rigorous formalization to <ref> [Gur91, Gur94] </ref>. The abstract data come as elements of (possibly not furthermore specified) sets (domains, universes). The operations allowed on universes will be represented by partial functions, where we write f (x) = undef if f is undefined at x. <p> When P ulse = 0 the statement is equivalent to the VHDL'87 inertial signal assignment. The general intuitive meaning of a signal assignment when carried out by some process P is to schedule future values, on the driver identified through 4 An external function in the sense of <ref> [Gur91] </ref> is a function which is not updated by the rules of the system under consideration; nevertheless such a function might be updated by the environment and thus represents a precise interface for the system. 3 driver (P; S) of process P of signal S.
Reference: [Gur94] <author> Y. Gurevich. </author> <title> Evolving Algebra 1993: Lipari Guide. In Specification and Validation Methods, </title> <editor> E. Borger (ed.). OUP, </editor> <address> Oxford, </address> <note> 1994 (to appear). </note>
Reference-contexts: In this paper we provide a rigorous but simple semantic definition of elaborated VHDL'93 including the new features of postponed processes and pulse rejection limit [VHDL93]. We define the formal semantics of VHDL'93 in terms of Gurevich's concurrent evolving algebras <ref> [Gur91, Gur94] </ref>. The flexibility of this concept allows us to produce our specification following the terminology and the view presented by the standard language reference manual [VHDL93]. The remainder of this paper is organized as follows. In Section 2 we briefly introduce what is needed from concurrent evolving algebras. <p> Section 4 gives a conclusion and future directions. 2 Evolving algebras Evolving algebras (EAs) can be understood as `pseudocode over abstract data', without any particular theoretical prerequisites. Here we list only the basic definitions and refer for a rigorous formalization to <ref> [Gur91, Gur94] </ref>. The abstract data come as elements of (possibly not furthermore specified) sets (domains, universes). The operations allowed on universes will be represented by partial functions, where we write f (x) = undef if f is undefined at x. <p> This intuitive explanation should be sufficient for a correct understanding of our rules; for a rigorous foundation of this so-called lockstep interpretation of sequential EAs see <ref> [Gur94] </ref>. 3 The formal model 3.1 Basic concepts [VHDL93] defines the semantics of the VHDL IEEE standard in terms of a simulator. In our description we adopt this view and also the basic terminology of [VHDL93] as far as possible (see also [OlCo94]).
Reference: [Mue93] <author> W. Mueller. </author> <title> Approaching the Denotational Semantics of Behavioral VHDL92 Descriptions. </title> <booktitle> In 1st APCHDLSA, </booktitle> <address> Brisbane, Australia, </address> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: Muller introduces a partly denotational and partly operational approach (High-Level Semantics of fl Published in the Proceedings of EURO-DAC'94/EURO-VHDL'94, Grenoble, September 19-23, IEEE Press, Los Alami-tos, CA, 1994. 1 Some publications refer to this standard as VHDL'92 VHDL'93) in <ref> [Mue93] </ref>. Therein the dynamic semantics is sketched by partially ordered events defining Petri-Net-like structures. Olcoz and Colom introduce in [OlCo93] a formal model based on elaborated VHDL'87 and its execution in terms of Colored Petri-Nets which covers all basic behavioral properties of VHDL'87.
Reference: [OlCo93] <author> S. Olcoz and J.M. Colom. </author> <title> Toward a Formal Semantics of IEEE Std. VHDL 1076. </title> <booktitle> In EURO-VHDL/EURO-DAC'93, </booktitle> <address> Hamburg, </address> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: Therein the dynamic semantics is sketched by partially ordered events defining Petri-Net-like structures. Olcoz and Colom introduce in <ref> [OlCo93] </ref> a formal model based on elaborated VHDL'87 and its execution in terms of Colored Petri-Nets which covers all basic behavioral properties of VHDL'87. In [OlCo94] they provide a detailed investigation of the VHDL'87 simulation cycle distinguishing three semantical layers: syntax checking and design library building, elaboration, and execution.
Reference: [OlCo94] <author> S. Olcoz and J.M. Colom. </author> <title> The Discrete Event Simulation Semantics of VHDL. </title> <booktitle> In Int. Conf. on Simulation and HDLs, </booktitle> <address> Tempe, Arizona, </address> <publisher> SCS, </publisher> <month> Jan. </month> <year> 1994. </year>
Reference-contexts: Therein the dynamic semantics is sketched by partially ordered events defining Petri-Net-like structures. Olcoz and Colom introduce in [OlCo93] a formal model based on elaborated VHDL'87 and its execution in terms of Colored Petri-Nets which covers all basic behavioral properties of VHDL'87. In <ref> [OlCo94] </ref> they provide a detailed investigation of the VHDL'87 simulation cycle distinguishing three semantical layers: syntax checking and design library building, elaboration, and execution. Almost all of these approaches consider rather restricted subsets of VHDL'87. None of the above approaches covers the new features of VHDL'93 in details. <p> In our description we adopt this view and also the basic terminology of [VHDL93] as far as possible (see also <ref> [OlCo94] </ref>). The model of event driven simulation is based on a finite number of user defined processes P 2 P ROCESS which|under the supervision of the simulation kernel process|concurrently compute new VALUEs for given SIGNALs. These signals may cause events at specified points in T IM E.
Reference: [ReEd94] <author> S. Read and M. Edwards. </author> <title> A Formal Semantics of VHDL in Booyer-Moore Logic. </title> <booktitle> In CEEDA'94, Poole, </booktitle> <address> UK, April 7-8, SCSI, San Diego, </address> <year> 1994. </year>
Reference-contexts: Further investigations can be found in [Sal92, SaBo93]. The definition of a subset of the VHDL'87 semantics in terms of Booyer-Moore Logic is presented by Read and Ed-wards in <ref> [ReEd94] </ref>. Wilsey [Wilsey90] defines the semantics of a small VHDL'87 subset based on interval temporal logic. Davis [Davis93] has introduced the denotational semantics of the VHDL simulation cycle by the use of an intermediate language that is derived from a very limited behavioral VHDL'87 subset.
Reference: [SaBo93] <author> A. Salem and D. Borrione. </author> <title> Formal Semantics of VHDL timing constructs. In VHDL for simulation, synthesis, and formal proof, </title> <editor> J. Mermet (ed.). </editor> <publisher> Kluwer, </publisher> <address> London, </address> <year> 1993. </year>
Reference-contexts: Borrione and Paillet [BoPa87] have done first investigations defining the semantics of a VHDL'87 subset in terms of a functional model. Further investigations can be found in <ref> [Sal92, SaBo93] </ref>. The definition of a subset of the VHDL'87 semantics in terms of Booyer-Moore Logic is presented by Read and Ed-wards in [ReEd94]. Wilsey [Wilsey90] defines the semantics of a small VHDL'87 subset based on interval temporal logic.
Reference: [Sal92] <author> A. Salem. </author> <title> Verification formelle des circuits digi-taux decrits en VHDL. </title> <type> PhD Thesis, </type> <institution> Universite Joseph Fourier, Grenoble, </institution> <month> October </month> <year> 1992. </year>
Reference-contexts: Borrione and Paillet [BoPa87] have done first investigations defining the semantics of a VHDL'87 subset in terms of a functional model. Further investigations can be found in <ref> [Sal92, SaBo93] </ref>. The definition of a subset of the VHDL'87 semantics in terms of Booyer-Moore Logic is presented by Read and Ed-wards in [ReEd94]. Wilsey [Wilsey90] defines the semantics of a small VHDL'87 subset based on interval temporal logic.
Reference: [VaTa93] <author> J. P. Van Tassel. Femto-VHDL: </author> <title> The Semantics of a Subset of VHDL and its Embedding in the HOL Proof Assistant. </title> <type> PhD Thesis, </type> <institution> University of Cambridge, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: Davis [Davis93] has introduced the denotational semantics of the VHDL simulation cycle by the use of an intermediate language that is derived from a very limited behavioral VHDL'87 subset. The structural operational semantics of a VHDL'87 subset (Femto-VHDL) for HOL verification is presented by Van Tassel in <ref> [VaTa93] </ref>. Damm et al. give the detailed structural operational semantics of a VHDL'87 subset based on transition systems in [DJS94].
Reference: [VHDL93] <institution> IEEE Standard VHDL Language Reference Manual. IEEE Std 1076-1993. The Institute of Electrical and Electronics Engineers, </institution> <address> New York, USA, </address> <year> 1994. </year>
Reference-contexts: 1 Introduction Approaching the definition of a formal semantics of the IEEE Std-1076 hardware description language VHDL'87 as well as of the new VHDL'93 1 <ref> [VHDL93] </ref> standard is of high interest for the synthesis and the formal verification of VHDL models. Borrione and Paillet [BoPa87] have done first investigations defining the semantics of a VHDL'87 subset in terms of a functional model. Further investigations can be found in [Sal92, SaBo93]. <p> In this paper we provide a rigorous but simple semantic definition of elaborated VHDL'93 including the new features of postponed processes and pulse rejection limit <ref> [VHDL93] </ref>. We define the formal semantics of VHDL'93 in terms of Gurevich's concurrent evolving algebras [Gur91, Gur94]. The flexibility of this concept allows us to produce our specification following the terminology and the view presented by the standard language reference manual [VHDL93]. <p> new features of postponed processes and pulse rejection limit <ref> [VHDL93] </ref>. We define the formal semantics of VHDL'93 in terms of Gurevich's concurrent evolving algebras [Gur91, Gur94]. The flexibility of this concept allows us to produce our specification following the terminology and the view presented by the standard language reference manual [VHDL93]. The remainder of this paper is organized as follows. In Section 2 we briefly introduce what is needed from concurrent evolving algebras. <p> This intuitive explanation should be sufficient for a correct understanding of our rules; for a rigorous foundation of this so-called lockstep interpretation of sequential EAs see [Gur94]. 3 The formal model 3.1 Basic concepts <ref> [VHDL93] </ref> defines the semantics of the VHDL IEEE standard in terms of a simulator. In our description we adopt this view and also the basic terminology of [VHDL93] as far as possible (see also [OlCo94]). <p> our rules; for a rigorous foundation of this so-called lockstep interpretation of sequential EAs see [Gur94]. 3 The formal model 3.1 Basic concepts <ref> [VHDL93] </ref> defines the semantics of the VHDL IEEE standard in terms of a simulator. In our description we adopt this view and also the basic terminology of [VHDL93] as far as possible (see also [OlCo94]). The model of event driven simulation is based on a finite number of user defined processes P 2 P ROCESS which|under the supervision of the simulation kernel process|concurrently compute new VALUEs for given SIGNALs. <p> As initialization we suppose the kernel to be in phase delta cycle, current time T c to be set to 0, enabled = process, and the initialization of drivers according to the definitions in <ref> [VHDL93] </ref>. <p> We describe this by the function &lt; : DRIVER fi TIME ! DRIVER which yields the driver containing precisely those transactions which have time component &lt; T ime 1 + T c . The further actions are defined in <ref> [VHDL93] </ref> by a 5 step algorithm in terms of marking transactions and removing the unmarked transactions in Step 5. In Step 1, the newly inserted waveform elements (new transactions) are marked.
Reference: [Wilsey90] <author> P.A. Wilsey. </author> <title> Developing a Formal Semantics Description of VHDL. </title> <booktitle> In Proc. of the 1st European Conf. on VHDL, </booktitle> <month> Sept. </month> <pages> 5-7, </pages> <address> IMT, Marseille, </address> <year> 1990. </year> <month> 6 </month>
Reference-contexts: Further investigations can be found in [Sal92, SaBo93]. The definition of a subset of the VHDL'87 semantics in terms of Booyer-Moore Logic is presented by Read and Ed-wards in [ReEd94]. Wilsey <ref> [Wilsey90] </ref> defines the semantics of a small VHDL'87 subset based on interval temporal logic. Davis [Davis93] has introduced the denotational semantics of the VHDL simulation cycle by the use of an intermediate language that is derived from a very limited behavioral VHDL'87 subset.
References-found: 15

