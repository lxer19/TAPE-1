URL: http://www.cs.ucsb.edu/oocsb/self/release/Self-4.0/manuals/progRef.ps.Z
Refering-URL: http://www.cs.ucsb.edu/oocsb/self/language.html
Root-URL: http://www.cs.ucsb.edu
Title: The SELF 4.0 Programmers Reference Manual  
Author: Ole Agesen Lars Bak Craig Chambers Bay-Wei Chang Urs Hlzle John Maloney Randall B. Smith David Ungar Mario Wolczko 
Degree: All Rights Reserved.  
Address: 2550 Garcia Avenue Mountain View, CA 94043 USA  
Affiliation: Sun Microsystems, Inc. and Stanford University.  Sun Microsystems, Inc  
Note: Copyright (c) 1995,  RESTRICTED RIGHTS LEGEND: Use, duplication, or disclosure by the government is subject to restrictions as set forth in subparagraph (c) (1) (ii) of the Rights in Technical Data and Computer Software Clause at DFARS 252.227-7013 (Oct. 1988) and FAR 52.227-19(c) (June 1987). SOFTWARE LICENSE: The software described in this manual may be used internally, modified, copied and distributed to third parties, provided each copy of the software contains both the copyright notice set forth above and the disclaimer below.  
Abstract: DISCLAIMER: Sun Microsystems, Inc. makes no representations about the suitability of this software for any purpose. It is provided to you "AS IS", without express or implied warranties of any kind. Sun Microsystems, Inc. disclaims all implied warranties of merchantability, fitness for a particular purpose and non-infringement of third party rights. Sun Microsystems, Inc.'s liability for claims relating to the software shall be limited to the amount, if any of the fees paid by you for the software. In no event will Sun Microsystems, Inc. be liable for any special, indirect, incidental, consequential or punitive damages in connection with or arising out of this license (including loss of profits, use, data, or other economic advantage), however it arises, whether for breach of warranty or in tort, even if Sun Microsys-tems, Inc. has been advised of the possibility of such damage. 
Abstract-found: 1
Intro-found: 1
Reference: [APS93] <author> Ole Agesen, Jens Palsberg and Michael I. Schwartzbach. </author> <title> Type Inference of SELF. </title> <booktitle> In ECOOP 93 Conference Proceedings, </booktitle> <address> Kaiserslautern, Germany, </address> <month> July </month> <year> 1993. </year> <note> Published as Springer-Verlag LNCS 707, </note> <year> 1993. </year>
Reference: [Age94a] <author> Ole Agesen. Mango: </author> <title> A Parser Generator for SELF. </title> <institution> Sun Microsystems Labs TR SMLI TR-94-27, </institution> <year> 1994. </year>
Reference: [Age94b] <author> Ole Agesen. </author> <title> Constraint Based Type Inference and Parametric Polymorphism. </title> <booktitle> In Proc. International Static Analysis Symposium, </booktitle> <month> Sep 28-30, </month> <year> 1994. </year>
Reference: [CU89] <author> Craig Chambers and David Ungar. </author> <title> Customization: Optimizing Compiler Technology for SELF, a Dynamically-Typed Object-Oriented Programming Language. </title> <booktitle> In Proceedings of the SIGPLAN 89 Conference on Programming Language Design and Implementation, </booktitle> <address> Portland, OR, </address> <month> June, </month> <year> 1989. </year> <note> Published as SIGPLAN Notices 24(7), </note> <month> July, </month> <year> 1989. </year>
Reference-contexts: Actually, this explanation is not entirely accurate: the compiled method is specialized on the type of the receiver. If the same message is later sent to a receiver of different type (e.g., a oat instead of an integer), a new compilation takes place. This technique is called customization; see <ref> [CU89] </ref> for details. Also, the compiled methods are placed into a cache from which they can be ushed for various reasons; therefore, they might be recompiled from time to time.
Reference: [CU90] <author> Craig Chambers and David Ungar. </author> <title> Iterative Type Analysis and Extended Message Splitting: Optimizing Dynamically-Typed Object-Oriented Programs. </title> <booktitle> In Proceedings of the SIGPLAN 90 Conference on Programming Language Design and Implementation, </booktitle> <address> White Plains, NY, </address> <month> June, </month> <year> 1990. </year> <note> Published as SIGPLAN Notices 25(6), June, 1990. Also published in Lisp and Symbolic Computation 4(3), </note> <month> June, </month> <year> 1991. </year>
Reference: [CU91] <author> Craig Chambers and David Ungar. </author> <title> Making Pure Object-Oriented Languages Practical. </title> <booktitle> In OOPSLA 91 Conference Proceedings, </booktitle> <address> Phoenix, AZ, </address> <month> October, </month> <year> 1991. </year> <note> Pub lished as SIGPLAN Notices 26(11), </note> <month> November, </month> <year> 1991. </year>
Reference: [CUC91] <author> Craig Chambers, David Ungar, Bay-Wei Chang, and Urs Hlzle. </author> <title> Parents are Shared Parts of Objects: Inheritance and Encapsulation in SELF. </title> <booktitle> In Lisp and Sym bolic Computation 4(3), </booktitle> <month> June, </month> <year> 1991. </year>
Reference: [CUL89] <author> Craig Chambers, David Ungar, and Elgin Lee. </author> <title> An Efficient Implementation of SELF, a Dynamically-Typed Object-Oriented Language Based on Prototypes. </title> <booktitle> In OOPSLA 89 Conference Proceedings, </booktitle> <address> New Orleans, LA, </address> <month> October, </month> <year> 1989. </year> <note> Published as SIGPLAN Notices 24(10), October, 1989. Also published in Lisp and Symbolic Computation 4(3), </note> <month> June, </month> <year> 1991. </year>
Reference-contexts: Methods have their own behavior which they represent with bytecodes. The bytecodes are the instructions for a very simple virtual processor that understands instructions like push receiver or send the x message. In fact, SELF byte-codes correspond much more closely to source code than, say, Smalltalk-80 bytecodes. (See <ref> [CUL89] </ref> for a list of the SELF byte codes.) The raison dtre of the virtual machine is to pretend that these bytecodes are directly executed by the computer; the programmer can explore the SELF world down to the bytecode level, but no further. <p> The three-way split reduces the working set size of the code cache. The cache represented by the bar labelled PICs contains polymorphic inline caches. The segregation of (the vector of bytes in) byte vectors from other objects is an implementation detail improving scavenging and scanning performance (see [Lee88] and <ref> [CUL89] </ref> for details). 93 SELF Virtual Machine Reference The system monitor Color Meaning black Allocated, residing in real memory. gray Allocated, paged out. white Unallocated memory. The residency information is updated only once a second for efficiency reasons; all other information is updated continuously.
Reference: [Cha92] <author> Craig Chambers. </author> <title> The Design and Implementation of the SELF Compiler, an Optimizing Compiler for Object-Oriented Programming Languages. </title> <publisher> Ph. </publisher> <address> D. disserta tion, </address> <institution> Computer Science Department, Stanford University, </institution> <month> March </month> <year> 1992. </year>
Reference: [CU93] <author> Bay-Wei Chang and David Ungar. </author> <title> Animation: From Cartoons to the User Inter face. </title> <booktitle> In UIST 93 Conference Proceedings, </booktitle> <year> 1993. </year> <note> 99 References </note>
Reference: [DS84] <author> L. Peter Deutsch and Allan M. Schiffman. </author> <title> Efficient Implementation of the Small-talk-80 System. </title> <booktitle> In Proceedings of the 11th Annual ACM Symposium on the Principles of Programming Languages, </booktitle> <address> Salt Lake City, UT, </address> <year> 1984. </year>
Reference: [GR83] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk-80: The Language and Its Implementation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference: [HCU91] <author> Urs Hlzle, Craig Chambers, and David Ungar. </author> <title> Optimizing Dynamically-Typed Object-Oriented Programming Languages with Polymorphic Inline Caches. </title> <booktitle> In ECOOP 91 Conference Proceedings, </booktitle> <address> Geneva, Switzerland, </address> <month> July, </month> <year> 1991. </year> <note> Published as Springer-Verlag LNCS 512, </note> <year> 1991. </year>
Reference-contexts: Furthermore, the current version of the compiler will recompile and reoptimize frequently used code, using information gathered at run-time as to how the code is being used; see <ref> [HCU91] </ref> for details. Dont be misled by the term compiled method if you are familiar with Smalltalk: in Smalltalk terminology it denotes a method in its bytecode form, but in SELF it denotes the native machine code form.
Reference: [HCU92] <author> Urs Hlzle, Craig Chambers, and David Ungar. </author> <title> Debugging Optimized Code with Dynamic Deoptimization. </title> <booktitle> In Proceedings of the ACM SIGPLAN 92 Conference on Programming Language Design and Implementation, </booktitle> <address> San Francisco, </address> <month> June </month> <year> 1992. </year> <note> Published as SIGPLAN Notices 27(7), </note> <month> July, </month> <year> 1992. </year>
Reference: [Hoe94] <author> Urs Hlzle. </author> <title> Adaptive Optimization for SELF: Reconciling High Performance with Exploratory Programming. </title> <type> Ph.D. Thesis, </type> <institution> Stanford University, </institution> <month> August </month> <year> 1994. </year>
Reference: [HU94] <author> Urs Hlzle and David Ungar. </author> <title> A Third-Generation SELF Implementation: Reconciling Responsiveness with Performance. </title> <booktitle> In Proceedings of OOPSLA 94, </booktitle> <month> October </month> <year> 1994. </year>
Reference: [Lee88] <author> Elgin Lee. </author> <title> Object Storage and Inheritance for SELF. </title> <type> Engineers thesis, </type> <institution> Stanford University, </institution> <year> 1988. </year>
Reference-contexts: Indicator What It Means X-compiling Y The X compiler (where X is either nic or sic) is compiling the method named Y into machine code. scavenge The SELF object memory is being scavenged. A scavenge is a fast, partial garbage collection (see [Ung84], [Ung86], <ref> [Lee88] </ref>). <p> The three-way split reduces the working set size of the code cache. The cache represented by the bar labelled PICs contains polymorphic inline caches. The segregation of (the vector of bytes in) byte vectors from other objects is an implementation detail improving scavenging and scanning performance (see <ref> [Lee88] </ref> and [CUL89] for details). 93 SELF Virtual Machine Reference The system monitor Color Meaning black Allocated, residing in real memory. gray Allocated, paged out. white Unallocated memory. The residency information is updated only once a second for efficiency reasons; all other information is updated continuously.
Reference: [Ung84] <author> David Ungar. </author> <title> Generation Scavenging: A Non-Disruptive High Performance Storage Reclamation Algorithm. </title> <booktitle> In Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <address> Pittsburgh, PA, </address> <month> April, </month> <year> 1984. </year> <note> Published as SIGPLAN Notices 19(5), May, 1984 and Software Engineering Notes 9(3), </note> <month> May, </month> <year> 1984. </year>
Reference-contexts: Indicator What It Means X-compiling Y The X compiler (where X is either nic or sic) is compiling the method named Y into machine code. scavenge The SELF object memory is being scavenged. A scavenge is a fast, partial garbage collection (see <ref> [Ung84] </ref>, [Ung86], [Lee88]).
Reference: [Ung86] <author> David Ungar. </author> <title> The Design and Evaluation of a High Performance Smalltalk System. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1987. </year>
Reference-contexts: Indicator What It Means X-compiling Y The X compiler (where X is either nic or sic) is compiling the method named Y into machine code. scavenge The SELF object memory is being scavenged. A scavenge is a fast, partial garbage collection (see [Ung84], <ref> [Ung86] </ref>, [Lee88]).
Reference: [UCC91] <author> David Ungar, Craig Chambers, Bay-Wei Chang, and Urs Hlzle. </author> <title> Organizing Programs without Classes. </title> <booktitle> In Lisp and Symbolic Computation 4(3), </booktitle> <month> June, </month> <year> 1991. </year>
Reference-contexts: The reader is assumed to be acquainted with the SELF language, the use of multiple inheritance, the use of traits objects and prototype objects, and the organizing principles of the SELF world as discussed in <ref> [UCC91] </ref>. 30 The SELF World World Organization 3.1 World Organization 3.1.1 The Lobby The lobby object is thus named because it is where objects enter the SELF world.

References-found: 20

