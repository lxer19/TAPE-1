URL: http://www.iro.umontreal.ca/~feeley/papers/polling.ps.gz
Refering-URL: http://www.iro.umontreal.ca/~feeley/
Root-URL: http://www.iro.umontreal.ca
Email: feeley@iro.umontreal.ca  
Title: Polling Efficiently on Stock Hardware  
Author: Marc Feeley 
Address: C.P. 6128, succ. "A", Montreal, Canada H3C 3J7  
Affiliation: Departement d'Informatique et Recherche Operationnelle Universite de Montreal  
Abstract: Two strategies for supporting asynchronous interrupts are: the use of the processor's hardware interrupt system and the use of polling. The advantages of polling include: portability, simplicity, and low cost for handling interrupts. Unfortunately, polling has an overhead for the explicit interrupt checks inserted in the code. This paper describes balanced polling, a method for placing the interrupt checks which has a low overhead and also guarantees an upper bound on interrupt latency. This method has been used by Gambit (an optimizing native code compiler for Scheme) to support a number of features including multiprocessing and stack overflow detection. The overhead of balanced polling is less than for call-return polling which places interrupt checks at every procedure entry and exit. The overhead of call-return polling is typically 70% larger (but sometimes over 400% larger) than the overhead of balanced polling. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. W. Appel. </author> <title> Allocation without locking. </title> <journal> Software Practice and Experience, </journal> <volume> 19(7) </volume> <pages> 703-705, </pages> <month> July </month> <year> 1989. </year>
Reference: [2] <author> A. W. Appel. </author> <title> Compiling with continuations. </title> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference-contexts: A processor can be interrupted by setting the flag to a value that forces this situation (e.g. 0). The interrupt handler then uses some other flags to discriminate between the possible sources of interrupt. SML/NJ <ref> [2] </ref> uses a similar approach based on the heap allocation pointer. Although it can be done with a single test, the interrupt check may still be relatively expensive. Because all processors must have access to a processor's interrupt flag, it is located in shared memory (which can't be cached easily).
Reference: [3] <author> H. Baker. </author> <title> List processing in real time on a serial computer. </title> <journal> Communications of the ACM, </journal> <volume> 21(4) </volume> <pages> 280-294, </pages> <month> April </month> <year> 1978. </year>
Reference: [4] <author> M. Feeley. </author> <title> An Efficient and General Implementation of Futures on Large Scale Shared Memory Multiprocessors. </title> <type> PhD thesis, </type> <institution> Brandeis University Department of Computer Science, </institution> <year> 1993. </year>
Reference-contexts: The first group contains programs from the Gabriel benchmark suite [6]. The second group contains more realistic applications that have not been designed with benchmarking in mind. They are fairly sizeable with at least 500 lines of code (15,000 for compiler). The last group contains parallel programs taken from <ref> [4] </ref>. These programs are written in Multilisp but were compiled as sequential programs (i.e. with FUTURE and TOUCH operations removed) to factor out the overhead of supporting parallelism. The results show that minimal polling outperforms call-return polling in nearly all cases.
Reference: [5] <author> M. Feeley and J. S. Miller. </author> <title> A parallel virtual machine for efficient Scheme compilation. </title> <booktitle> In Proceedings of the 1990 ACM Conference on Lisp and Functional Programming, </booktitle> <address> Nice, France, </address> <month> June </month> <year> 1990. </year>
Reference: [6] <author> R. P. Gabriel. </author> <title> Performance and Evaluation of Lisp Systems. </title> <booktitle> Research Reports and Notes, Computer Systems Series. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1985. </year>
Reference-contexts: L max would have to be greater than 90 to reduce the overhead to that of minimal polling (at L max = 90 there are two interrupt checks per loop). The other programs are split in three groups. The first group contains programs from the Gabriel benchmark suite <ref> [6] </ref>. The second group contains more realistic applications that have not been designed with benchmarking in mind. They are fairly sizeable with at least 500 lines of code (15,000 for compiler). The last group contains parallel programs taken from [4].
Reference: [7] <author> R. Halstead. </author> <title> Multilisp: A language for concurrent symbolic computation. </title> <journal> In ACM Trans. on Prog. Languages and Systems, </journal> <pages> pages 501-538, </pages> <month> October </month> <year> 1985. </year>
Reference: [8] <author> D. Johnson. </author> <title> Trap architectures for Lisp systems. </title> <booktitle> In Proceedings of the 1990 ACM Conference on Lisp and Functional Programming, </booktitle> <address> Nice, France, </address> <month> June </month> <year> 1990. </year>
Reference: [9] <author> D. Kranz, R. Kelsey, J. Rees, P. Hudak, J. Philbin, and N. Adams. </author> <title> Orbit: An optimizing compiler for Scheme. </title> <booktitle> In ACM SIGPLAN '86 Symposium on Compiler Construction, </booktitle> <pages> pages 219-233, </pages> <month> June </month> <year> 1986. </year>
Reference: [10] <author> H. Lieberman and C. Hewitt. </author> <title> A real-time garbage collector based on the lifetimes of objects. </title> <journal> Communications of the ACM, </journal> <volume> 26(6) </volume> <pages> 419-429, </pages> <month> June </month> <year> 1983. </year>
Reference: [11] <author> J. S. Miller. </author> <title> Implementing a Scheme-based parallel processing system. </title> <journal> International Journal of Parallel Processing, </journal> <volume> 17(5), </volume> <month> October </month> <year> 1988. </year>
Reference: [12] <author> G. J. Rozas. </author> <title> Liar, an Algol-like compiler for Scheme. S. b. </title> <type> thesis, </type> <institution> Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology, </institution> <month> January </month> <year> 1984. </year>
Reference: [13] <author> G. L. Steele Jr. </author> <title> Private Communication, </title> <month> December </month> <year> 1992. </year>
Reference: [14] <author> J. L. White. </author> <title> Private Communication, </title> <month> December </month> <year> 1992. </year>
References-found: 14

