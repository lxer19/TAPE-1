URL: http://www.cs.berkeley.edu/~vandervn/tools_ai.ps
Refering-URL: http://www.cs.berkeley.edu/~vandervn/tools_ai.html
Root-URL: http://www.cs.berkeley.edu
Title: Anytime Reasoning in First-Order Logic  
Author: Keith B. Vanderveen and C.V. Ramamoorthy 
Abstract: We propose a class of algorithms which gives best-efforts answers to problems in first-order logic given a bound on the resources available for reasoning. The algorithms in this class generate and attempt to solve S 1 and S 3 approximations to the input problem, then use the results to determine the most likely solution to the input problem. We show that an algorithm in this class outperforms theorem provers which attempt to solve the problem directly. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D.B.Sturgill A.M.Segre. </author> <title> Using hundreds of workstations to solve first-order logic problems. </title> <booktitle> In Twelfth National Conference on Artifical Intelligence, </booktitle> <address> Cambridge, Massachussets, </address> <month> July-August </month> <year> 1994. </year>
Reference-contexts: 1 Introduction First-order logic is used today in a variety of applications such as verification of hardware and software, solving resource allocation and scheduling problems <ref> [1] </ref>, and answering queries posed to knowledge bases. However, the use of first-order logical reasoning in applications requiring real-time decision making has been inhibited because of the inability to give bounds on the resources needed to solve even very small problems.
Reference: [2] <author> C.B.Suttner and G.Sutcliffe. </author> <title> ATP system results for the TPTP problem library. </title> <type> Technical Report AR-96-02,96/09, </type> <institution> Institut fur Infor-matik,Munchen and Dept. of Computer Science, James Cook University, Australia, </institution> <year> 1996. </year>
Reference-contexts: as currently implemented reserves a portion of the time given to solve a problem for direct consideration of the input sentence. 5 Results We tested the anytime first-order reasoning algorithm on a set of 108 first-order logic problems from the Thousands of Problems for Theorem Provers (TPTP) problem library, v1.2.1 <ref> [2] </ref>. The 108 problems were chosen to provide balance in the number of satisfiable and unsatisfiable problems, with 54 of each.
Reference: [3] <author> A. Klein E. Horvitz. </author> <title> Reasoning, metareasoning, and mathematical truth: Studies of theorem proving under limited resources. </title> <booktitle> In Proceedings of the Eleventh Conference on Uncertainty in Artificial Intelligence, </booktitle> <address> Montreal, Canada, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: As we noted in the introduction, this is a time-sensitive application. Other potential applications include time-sensitive scheduling and resource allocation, and real-time planning. 7 Related Work Horvitz and Klein have explored theorem proving for propositional logic with limited resources <ref> [3] </ref>. If their algorithm has failed to find to prove that a sentence is satisfiable after the time allotted to solve the problem has expired, the algorithm determines the probabilities that the sentence is satisfiable or unsat-isfiable from the portion of the search space explored.
Reference: [4] <author> G. Rutledge E. Horvitz. </author> <title> Time-dependent utility and action under uncertainty. </title> <booktitle> In Proceedings of 6 Seventh Conference on Uncertainty in Artificial Intelligence, </booktitle> <address> Los Angeles, CA, </address> <year> 1991. </year>
Reference-contexts: Work on reasoning about beliefs and actions under resource constraints was done by Horvitz [5]. Horvitz and others have also studied the tradeoff between action and continued reasoning in time-critical systems <ref> [4] </ref>.
Reference: [5] <author> E. Horvitz. </author> <title> Reasoning about beliefs and actions under computational resource constraints. </title> <booktitle> In Proceedings of the Third Workshop on Uncertainty in Artificial Intelligence, </booktitle> <address> Seattle, WA, </address> <year> 1987. </year>
Reference-contexts: The term anytime algorithm was introduced by Dean and Boddy in the context of their study of time-dependent planning algorithms [10]. Work on reasoning about beliefs and actions under resource constraints was done by Horvitz <ref> [5] </ref>. Horvitz and others have also studied the tradeoff between action and continued reasoning in time-critical systems [4].
Reference: [6] <author> D. Kuokka and L. Harada. </author> <title> A communication infrastructure for concurrent engineering. </title> <journal> Journal of Artificial Intelligence in Engineering, Design, Analysis, and Manufacturing, </journal> <year> 1995. </year>
Reference-contexts: Some errors can be tolerated in content-based routing, since it is commonly assumed that the routing process is unreliable anyway due to network problems <ref> [6] </ref>. fl Keith B. Vanderveen and C.V. Ramamoorthy are with the Computer Science Division of the Department of Electrical Engineering and Computer Science at the University of California at Berkeley, Berkeley, CA 94024.
Reference: [7] <author> M.A.Syed M.R.Genesereth, N.P.Singh. </author> <title> A distributed and anonymous knowledge sharing approach to software interoperation. </title> <booktitle> In International Symposium on Fifth Generation Com-pution Systems, </booktitle> <pages> pages 125139, </pages> <year> 1994. </year>
Reference-contexts: We are currently exploring these possibilities. We see broad applicability for algorithms of this type in many time- or resource-constrained applications in which theorem provers are currently used. For example, semantic routing of messages by matchmakers or facilitators is currently accomplished using theorem provers <ref> [7] </ref>. As we noted in the introduction, this is a time-sensitive application. Other potential applications include time-sensitive scheduling and resource allocation, and real-time planning. 7 Related Work Horvitz and Klein have explored theorem proving for propositional logic with limited resources [3].
Reference: [8] <author> S. Russell and P. </author> <title> Norvig. </title> <journal> Artificial Intelligence: </journal>
Reference-contexts: A sentence in first-order logic is an 1 expression in which all of the variables are quantified over. For a more thorough explanation of first-order logic, see <ref> [8] </ref>. Throughout the rest of the paper, we will regard all variables appearing in sentences as being implicitly universally quantified and omit the quantifiers to improve readability. Given a sentence in first-order logic, our algorithm attempts to determine whether or not the sentence is satisfiable. <p> All reasoning in first-order logic can be reduced to determining the satisfiability of sentences, since we can prove that a set of sentences T entails a sentence q (T j= q) by showing that ^T ^ :q is unsatisfiable, where ^T is the conjunction of the sentences in T <ref> [8] </ref>. This method of proof is known as proof by refutation, and is the basis of most automated theorem proving techniques including resolution [8]. <p> sentences T entails a sentence q (T j= q) by showing that ^T ^ :q is unsatisfiable, where ^T is the conjunction of the sentences in T <ref> [8] </ref>. This method of proof is known as proof by refutation, and is the basis of most automated theorem proving techniques including resolution [8]. We say that sentence A is weaker than B if B is satisfiable only if A is, i.e. all models for B are also models for A. <p> Determining S 1 or S 3 approximations for a sentence in first-order logic is greatly simplified if, in addition to being in NNF, the sentence has only universal quantifiers which have the entire sentence as their scope. Any sentence can be put in this form, see <ref> [8] </ref> for details. S 1 and S 3 approximations for first-order sentences are computed in a fashion similar to that for propositional sentences, except that instead of replacing occurrences of propositional letters with `true' or `false', we replace occurrences of predicates. <p> Our present implementation takes input sentences which are in conjunctive normal form (CNF), in which a sentence is a conjunction of disjunctions of literals (the disjunctions are called clauses). Any sentence can be transformed into an equivalent CNF sentence <ref> [8] </ref>. The overall algorithm uses a theorem prover to attempt to determine the satisfiability of the S 1 and S 3 approximations it considers. We have chosen to use a theorem prover based on the partial instantiation technique [11], but any theorem prover for first-order logic would be suitable.
References-found: 8

