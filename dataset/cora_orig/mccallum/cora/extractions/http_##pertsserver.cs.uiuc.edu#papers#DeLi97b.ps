URL: http://pertsserver.cs.uiuc.edu/papers/DeLi97b.ps
Refering-URL: http://pertsserver.cs.uiuc.edu/papers/
Root-URL: http://www.cs.uiuc.edu
Title: Proceedings of 9th Euromicro Workshop on Real-Time Systems A Scheme for Scheduling Hard Real-Time Applications
Author: Z. Deng J. W.-S. Liu J. Sun 
Address: Urbana, IL 61801  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  
Abstract: This paper focuses on the problem of providing run-time support to real-time applications and non-real-time applications in an open system. It describes a two-level hierarchical priority-driven scheme for scheduling independently developed applications. The scheme allows the developer of each real-time application to validate the schedulability of the application independently of other applications. Once a real-time application is created and accepted by the open system, its schedulability is guaranteed regardless of the behaviors of other applications that execute concurrently in the system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. L. Liu and J. W. Layland, </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard Real Time Environment," </title> <journal> in J. Assoc. Comput. Mach., </journal> <volume> vol. 20(1), </volume> <pages> pp. 46-61, </pages> <year> 1973. </year>
Reference: [2] <author> J. Lehoczky, L. Sha, and Y. Ding, </author> <title> "The Rate Monotonic Scheduling Algorithm Exact Characterization and Average Case Behavior," </title> <booktitle> in Proceedings of the IEEE Real-Time System Symposium, </booktitle> <pages> pp. 166-171, </pages> <year> 1989. </year>
Reference: [3] <author> B. Sprunt, L. Sha, and J. P. Lehoczky, </author> <title> "Aperiodic Task Scheduling for Hard Real-Time Systems," Real-Time Systems: </title> <journal> The International Journal of Time-Critical Computing Systems, </journal> <volume> vol. 1, </volume> <pages> pp. 27-60, </pages> <year> 1989. </year>
Reference: [4] <author> L. Sha, R. Rajkumar, and J. P. Lehoczky, </author> <title> "Priority Inheritance Protocols: An Approach to Real-Time Synchronization," </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(9) </volume> <pages> 1175-1185, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: We can account for the effect of nonpreemptivity and resource contention among applications on the schedulability of the applications in the well-known ways <ref> [4, 5] </ref>.
Reference: [5] <author> T. P. Baker, </author> <title> "A Stack-Based Allocation Policy for Realtime Processes," </title> <booktitle> Proceedings of IEEE 11th Real-Time Systems Symposium, </booktitle> <pages> pp. 191-200, </pages> <month> De-cember </month> <year> 1990. </year>
Reference-contexts: We can account for the effect of nonpreemptivity and resource contention among applications on the schedulability of the applications in the well-known ways <ref> [4, 5] </ref>.
Reference: [6] <author> T. M. Ghazalie and T. P. Baker, </author> <title> "Aperiodic Servers in a Deadline Scheduling Environment," </title> <booktitle> Real-Time Systems, </booktitle> <volume> Vol. 9, No. 1, </volume> <month> July </month> <year> 1995. </year>
Reference: [7] <author> M. Spuri and G. Buttazzo, </author> <title> "Scheduling Aperiodic Tasks in Dynamic Priority Systems," </title> <booktitle> Real-Time Systems, </booktitle> <volume> vol. 10, </volume> <pages> pp. 179-210, </pages> <year> 1996. </year>
Reference-contexts: The server behaves like a task with a constant utilization U if its ready queue is never empty, thus the name Constant Utilization Server. This server algorithm is essentially the same as the total bandwidth server algorithm proposed by Spuri and Buttazzo <ref> [7] </ref>. (We will discuss their difference in Section 6.) 2.2 Scheduling Hierarchy The applications are scheduled and executed according to a two-level hierarchical scheme. Again, at the top level, the scheduler provided by the operating system maintains all the servers. <p> Figures 3 and 6, provided that the total server size of other existing servers is no more than 1 k . 8 6 Related Work As mentioned in Section 2, the constant utilization server algorithm is essentially the same as the total bandwidth server algorithm proposed by Spuri and Buttazzo <ref> [7] </ref>.
Reference: [8] <author> L. Zhang, "VirtualClock: </author> <title> A New Traffic Control Algorithm for Packet-Switched Networks," </title> <journal> ACM Transaction on Computer Systems, </journal> <volume> Vol. 9, No. 2, </volume> <pages> pp. 101-124, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: There is no benefit in completing jobs in these applications early, as long as they meet their deadlines. The constant utilization server algorithm is also similar to the preemptive fair queueing and virtual clock algorithms proposed for network traffic scheduling <ref> [8, 9] </ref>. A processor with speed C can be thought of as a communication link with link capacity C, and a constant utilization server S k with server size U k can be thought of as a connection with reserved bandwidth U k C.
Reference: [9] <author> A. Demers, S. Keshav, and S. Shenker, </author> <title> "Analysis and Simulation of a Fair Queueing Algorithm," </title> <booktitle> Proc. ACM SIGCOMM'89, </booktitle> <pages> pp. 3-12. 9 </pages>
Reference-contexts: There is no benefit in completing jobs in these applications early, as long as they meet their deadlines. The constant utilization server algorithm is also similar to the preemptive fair queueing and virtual clock algorithms proposed for network traffic scheduling <ref> [8, 9] </ref>. A processor with speed C can be thought of as a communication link with link capacity C, and a constant utilization server S k with server size U k can be thought of as a connection with reserved bandwidth U k C.
References-found: 9

