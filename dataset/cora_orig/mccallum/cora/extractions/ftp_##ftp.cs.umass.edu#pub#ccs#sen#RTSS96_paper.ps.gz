URL: ftp://ftp.cs.umass.edu/pub/ccs/sen/RTSS96:paper.ps.gz
Refering-URL: http://www-ccs.cs.umass.edu/recpub-rts/index.html
Root-URL: 
Email: e-mail: -kaneko, stankovic, sen, krithi-@cs.umass.edu  
Title: Integrated Scheduling of Multimedia and Hard Real-Time Tasks  
Author: Hiroyuki Kaneko, John A. Stankovic, Subhabrata Sen and Krithi Ramamritham 
Address: Amherst, MA 01003  
Affiliation: Computer Science Department University of Massachusetts  
Abstract: An integrated platform which is capable of meeting the requirements of both traditional real-time control processing and multimedia processing has enormous potential for accommodating various kinds of new applications. However, except for the simplest of situations, few, if any, research or commercial systems successfully provide architectural and OS mechanisms which can efficiently support both hard real-time computation and multimedia soft real-time computation. In this paper, we propose a multimedia server executing on multiprocessor real-time operating systems to provide different classes of guarantee to support both types of processing. The multimedia server supports multiple periodic multimedia streams with a capability for graceful QoS degradation during system overload. In this paper we (i) develop several multimedia server scheduling algorithms, (ii) evaluate the performance of these algorithms, and (iii) discuss realistic system implementation issues on the SGI IRIX/REACT/PRO operating system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. P. Anderson, </author> <title> Metascheduling for Continuous Media, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol. 11, No. 3, </volume> <month> Aug. </month> <year> 1993, </year> <pages> pp. 226-252. </pages>
Reference: [2] <author> J. M. Barton and N. Bitar, </author> <title> A Scalable Multi-Discipline, Multiprocessor Scheduling Framework for IRIX, IPPS'95 Workshop on Job Scheduling Strategies for Parallel Processing, </title> <address> April 25, </address> <year> 1995. </year>
Reference-contexts: There is a 100:1 access speed difference between successive levels of the memory hierarchy. The processors and global main memory are connected via a 1.2 Gigabytes per second processor bus. Details of Scheduling Mechanisms built into SGI's OS. IRIX T M <ref> [3, 2] </ref> is a commercial, UNIX based OS which has been optimized for multiprocessor performance. It offers many interesting features which are useful for supporting real-time applications. <p> To do this, the frame scheduler would have to be paused, its parameters modified and processes reassigned to minor frame queues, before the scheduler can be restarted. This temporary pause in the scheduler would cause unacceptable disruption in service. The Deadline Scheduler <ref> [2] </ref> attempts to guarantee execution rates to sessions. The admission control checks if the total CPU-time allocation for all the processes over a predefined frame interval is below a maximum limit and if so the requesting process is admitted. <p> The processes are arranged in the scheduling queue according to time-to-deadline and are serviced in round-robin order. Although IRIX does implement the basic priority inheritance protocol <ref> [2] </ref> to prevent the unbounded priority inversion problem, blocking by lower priority tasks can still occur. Unless the resources required by the real-time applications are carefully isolated, they may also be delayed due to blocking over a resource held by a process in the time-sharing class. <p> The implementation of the dispatch table can be similar to the one used in the Spring real time kernel [10]. The scheduling queues in IRIX are implemented in a distributed fashion to permit a high level of concurrent access <ref> [2] </ref>. There are local per-processor squeues on which only processes which are restricted to that processor and processes which have affinity for that processor are queued. Other processes are maintained on the central global queue.
Reference: [3] <author> D. Cortesi et. al., </author> <title> REACT (TM) Real-Time Programmer's Guide, Document Number 007-2499-001, </title> <institution> Silicon Graphics Inc., Mountain View, </institution> <address> CA 94043-1389. </address>
Reference-contexts: If Rs + Rr is greater than 100% fi (the number of processors), the incoming request is immediately rejected or a degradation approach is taken, depending on the policy in effect at that time. 2.4. Implementing the scheduling algorithm on an SGI Challenge Multiprocessor The SGI Challenge multiprocessor system <ref> [3] </ref>, Figure 5, is a shared memory, symmetric multiprocessor architecture. This architecture has four levels of memory hierarchy two levels of cache (on-chip cache and cache on the CPU board), main memory and disk. There is a 100:1 access speed difference between successive levels of the memory hierarchy. <p> There is a 100:1 access speed difference between successive levels of the memory hierarchy. The processors and global main memory are connected via a 1.2 Gigabytes per second processor bus. Details of Scheduling Mechanisms built into SGI's OS. IRIX T M <ref> [3, 2] </ref> is a commercial, UNIX based OS which has been optimized for multiprocessor performance. It offers many interesting features which are useful for supporting real-time applications. <p> As long as an isolated CPU executes only processes whose pages are locked into memory, it will receive no broadcast/TLB interrupts from other CPUs as actions by processes in other CPUs cannot change the address space mapping of any process on this CPU <ref> [3] </ref>. Now the system is configured to provide integrated support for multimedia and hard real time tasks. The supervisor running on the SP, executes the server allocation algorithm and the planning-based scheduler on dynamically arriving tasks.
Reference: [4] <author> A. Guha, A. Pavan, J. Liu, A. Rastogi and T. </author> <title> Steeves,Supporting Real-Time and Multimedia Applications on the Mercuri Testbed, </title> <journal> IEEE Journal on Selected Areas In Communications, </journal> <volume> Vol. 13, No. 4, </volume> <month> May </month> <year> 1995, </year> <pages> pp. 749-763. </pages>
Reference-contexts: Accommodating multimedia and traditional real-time applications which have interaction requirements is a challenging research issue. However, little attention has been paid to this issue. For example, the Mercuri system <ref> [4] </ref> is one of the few research projects targeting this objective, where data from remote video cameras are transferred through an ATM network and displayed in X windows, but they fail to provide any guarantees and provide only best effort services.
Reference: [5] <author> K. Jeffay and D. Bennett, </author> <title> A Rate-Based Execution Abstraction For Multimedia Computing, </title> <booktitle> Proc. 5th Intl. Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> Durham, New Hampshire, </address> <month> April 18-21, </month> <year> 1995, </year> <pages> pp. 67-78. </pages>
Reference: [6] <author> H. Kaneko, J. A. Stankovic, S. Sen and K. Ramamritham, </author> <title> Integrated Scheduling of Multimedia and Hard Real-Time Tasks, </title> <type> UMASS CS TR 96-45, </type> <year> 1996. </year>
Reference-contexts: Influence of Context Switch Overhead So far our results were based on the assumption that context switch overheads are negligible. We discuss the effects of context switching in detail in <ref> [6] </ref>. Briefly, the individual allocation scheme allocates an entire multimedia task instance to a single multimedia server instance, and hence does not add any extra context switching overheads.
Reference: [7] <author> D. I. Katcher, K. A. Kettler and J. K. Stronsnider, </author> <title> Real-Time Operating Systems for Multimedia Processing, </title> <booktitle> Fifth Workshop on Hot Topics in Operating Systems (HotOS-V), </booktitle> <month> May 4-5, </month> <year> 1995. </year>
Reference: [8] <author> D. Niehaus, J. A. Stankovic and K. Ramamritham, </author> <title> A Real-Time Systems Description Language, </title> <booktitle> IEEE Real-Time Technology and Applications Symposium, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: The deadline of each task was chosen between (finish time of the task + minimum deadline Min D) and (finish time of the task + maximum deadline Max D). The output of this task set generator is a file written in the Spring System Description Language (SDL) <ref> [8] </ref>. The file describes all the task information such as timing and resource usage specifications needed by the planning sched-uler. It is compiled by the Spring compiler and fed into the simulator. The task generator also places multimedia stream information into this file.
Reference: [9] <author> K. Ramamritham, J. A. Stankovic and P. F. Shiah, </author> <title> Efficient Scheduling Algorithms for Real-time Multiprocessor Systems, </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> Vol. 1, No. 2, </volume> <month> April </month> <year> 1990, </year> <pages> pp. 184-194. </pages>
Reference-contexts: Section 4 presents the simulation results and Section 5 summarizes the work. 2. Multimedia Server 2.1. Background The multimedia server is a periodic task that is dynamically created and scheduled along with hard real-time tasks. We use a planning-based scheduler, as exemplified by the Spring scheduling algorithm <ref> [9] </ref>, to perform this level of scheduling. The server then executes the multimedia tasks themselves. A planning-based scheduler dynamically generates schedules or plans in which every task included in the schedule is guaranteed its required resources (including a processor) for its worst case execution time.
Reference: [10] <author> J. A. Stankovic and K. Ramamritham, </author> <title> The Spring Kernel: A New Paradigm For Real-Time Systems, </title> <journal> IEEE Software, </journal> <month> May </month> <year> 1991, </year> <pages> pp. 62-72. </pages>
Reference-contexts: This avoids race conditions between the master and dispatcher tasks on accesses to the shared dispatch list. The implementation of the dispatch table can be similar to the one used in the Spring real time kernel <ref> [10] </ref>. The scheduling queues in IRIX are implemented in a distributed fashion to permit a high level of concurrent access [2]. There are local per-processor squeues on which only processes which are restricted to that processor and processes which have affinity for that processor are queued.
Reference: [11] <author> J.A. Stankovic, </author> <title> Continuous and Multimedia OS Support In Real-Time Control Applications, </title> <booktitle> Fifth Workshopon Hot Topics in Operating Systems (HotOS-V), </booktitle> <month> May </month> <year> 1995, </year> <pages> pp. 8-11. </pages>
Reference: [12] <author> R. Steinmetz, </author> <title> Analyzing the Multimedia Operating System, </title> <booktitle> IEEE Multimedia, Spring 1995, </booktitle> <pages> pp. 68-84. </pages>
Reference: [13] <author> C. A. Waldspurger and W. E. Weihl, </author> <title> Lottery Scheduling: Flexible Proportional-Share Resource Management, </title> <booktitle> Proceedings of the First Symposium on Operating System Design and Implementation, </booktitle> <month> November </month> <year> 1994. </year>
Reference: [14] <author> R. Yavatkar and K. Lakshman, </author> <title> A CPU Scheduling Algorithm for Continuous Media Applications, </title> <booktitle> Proc. 5th Intl. Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> Durham, New Hampshire, </address> <month> April 18-21, </month> <year> 1995, </year> <pages> pp. 223-226. </pages>
Reference-contexts: The amount of execution time needed to play back a single frame varies a lot and even the average execution time needed over a group of pictures shows considerable variations as a result of changes in scene or video contents <ref> [14] </ref>. The adaptable scheduling introduced by the proportional allocation scheme is well suited for these various application requirements. Another multimedia task assignment approach is to assign each multimedia task instance individually to a server instance. We call this the individual allocation scheme.
References-found: 14

