URL: http://http.cs.berkeley.edu/~daw/keystretch.ps
Refering-URL: http://http.cs.berkeley.edu/~daw/me.html
Root-URL: http://www.cs.berkeley.edu
Email: fkelsey,schneier,hallg@counterpane.com  daw@cs.berkeley.edu  
Title: Secure Applications of Low-Entropy Keys  
Author: John Kelsey Bruce Schneier Chris Hall E. Minnehaha Parkway David Wagner 
Address: MN 55419  Soda Hall,  Berkeley, CA 94720-1776  
Affiliation: Counterpane Systems  Minneapolis,  U.C. Berkeley  C.S. Division  
Abstract: We introduce the notion of key stretching, a mechanism to convert short s-bit keys into longer keys, such that the complexity required to brute-force search a s + t-bit keyspace is the same as the time required to brute-force search a s-bit key stretched by t bits.
Abstract-found: 1
Intro-found: 1
Reference: [Aba97] <author> M. Abadi, </author> <type> personal communication. </type>
Reference-contexts: Manber proposed one simple approach based on hashing a random "salt" with the password; the resulting hash digest is stored, but the salt is securely deleted [Man96]. Abadi, Lomas, and Needham recently independently proposed a scheme for strengthening passwords which is very similar to Manber's <ref> [Aba97] </ref>; Abadi et. al. also show how to apply that approach to communication security in a setting similar to the one we envision for key stretching.
Reference: [BDRSSTW96] <author> M. Blaze, W. Diffie, R. Rivest, B. Schneier, T. Shimomura, E. Thompson, and M. Wiener, </author> <title> "Minimal Key Lengths for Symmetric Ciphers to Provide Adequate Commercial Security," </title> <month> January </month> <year> 1996. </year>
Reference-contexts: For example, we may have a secure key-stretching scheme which stretches 40-bit keys to an effective strength of 56 bits. Unfortunately, it is feasible for a moderately well-funded attacker to build a machine to carry out a 56-bit keysearch of some cipher like DES <ref> [Wie94, BDRSSTW96] </ref>. We would like our key-stretching algorithms to be hard implement on very cheap hardware, the kind that would most likely be used in building a keysearch machine.
Reference: [DBP96] <author> H. Dobbertin, A. Bosselaers, and B. Preneel, "RIPEMD-160: </author> <title> A Strengthened Version of RIPEMD," Fast Software Encryption: </title> <booktitle> Third International Workshop, Cambrdige, UK, February 1996 Proceedings, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996, </year> <pages> pp. 71-82. </pages>
Reference-contexts: Otherwise, we will need to use a salt value as described in Section 2.1. 4 Key Stretching Algorithms 4.1 A Hash-Function-Based Key Stretching Algorithm Let H () be a secure, collision-resistant one-way hash function, such as SHA1 [NIST93] or RIPE-MD160 <ref> [DBP96] </ref>, and let S be a salt value. The basic scheme works as follows: X 0 = H (K short ; S). For i = 1 to 2 t : K long = X 2 t . We are computing the 2 t -th iterate of H ().
Reference: [H80] <author> M.E. Hellman, </author> <title> "A Cryptanalytic Time-Memory Trade Off," </title> <journal> IEEE Transactions on Information Theory, v. </journal> <volume> 26, </volume> <editor> n. </editor> <volume> 4, </volume> <month> Jul </month> <year> 1980, </year> <pages> pp. 401-406. </pages>
Reference-contexts: One observation we have made is that the ability to compute f 2 t () in time faster than 2 t would speed up a time/memory trade-off attack <ref> [H80] </ref>. It will not be a significant speed-up, but a speed-up nonetheless. If we can prove that f 1 () is a strongly-collision resistant hash, then we can apply the analysis from the previous section. However, there is no guarantee that this property will hold.
Reference: [Knu81] <author> D. Knuth, </author> <booktitle> The Art of Computer Programming: Volume 2, Seminumerical Algorithms, </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1981. </year>
Reference: [Man96] <author> U. Manber, </author> <title> "A Simple Scheme to Make Passwords Based on One-Way Functions Much Harder to Crack," Computers & Security, </title> <editor> v. </editor> <volume> 15, </volume> <editor> n. </editor> <volume> 2, </volume> <year> 1996, </year> <pages> pp. 171-176. </pages>
Reference-contexts: Other authors have also independently examined the problem of hardening password-protection schemes based on one-way functions. Manber proposed one simple approach based on hashing a random "salt" with the password; the resulting hash digest is stored, but the salt is securely deleted <ref> [Man96] </ref>. Abadi, Lomas, and Needham recently independently proposed a scheme for strengthening passwords which is very similar to Manber's [Aba97]; Abadi et. al. also show how to apply that approach to communication security in a setting similar to the one we envision for key stretching.
Reference: [MT79] <author> R.H. Morris and K. Thompson, </author> <title> "Unix Password Security," </title> <journal> Communications of the ACM, v. </journal> <volume> 22, </volume> <editor> n. </editor> <volume> 11, </volume> <month> Nov </month> <year> 1979. </year>
Reference-contexts: Also, our techniques are similar in spirit to the technique of using repeated iterations of DES to make Unix password-guessing attacks more expensive <ref> [MT79] </ref>. Other authors have also independently examined the problem of hardening password-protection schemes based on one-way functions. Manber proposed one simple approach based on hashing a random "salt" with the password; the resulting hash digest is stored, but the salt is securely deleted [Man96].
Reference: [NBS77] <institution> National Bureau of Standards, </institution> <note> NBS FIPS PUB 46, "Data Encryption Standard," </note> <institution> National Bureau of Standards, U.S. Department of Commerce, </institution> <month> Jan </month> <year> 1977. </year>
Reference-contexts: For example, in a straightforward brute-force search of DES <ref> [NBS77] </ref> with known plaintext and ciphertexts, an attacker can omit computation of the last round of DES in each trial encryption, optimize the order of the keys searched to minimize the work involved in changing keys, and build massively parallel hardware useful only for DES key searching.
Reference: [NIST93] <institution> National Institute of Standards and Technology, </institution> <type> NIST FIPS PUB 180, "Secure Hash Standard," U.S. </type> <institution> Department of Commerce, </institution> <month> May 93. </month>
Reference-contexts: Otherwise, we will need to use a salt value as described in Section 2.1. 4 Key Stretching Algorithms 4.1 A Hash-Function-Based Key Stretching Algorithm Let H () be a secure, collision-resistant one-way hash function, such as SHA1 <ref> [NIST93] </ref> or RIPE-MD160 [DBP96], and let S be a salt value. The basic scheme works as follows: X 0 = H (K short ; S). For i = 1 to 2 t : K long = X 2 t .
Reference: [QDD86] <author> J.-J. Quisquater, Y. Desmedt, and M. Davio, </author> <title> "The Importance of `Good' Key Schemes (How to Make a Secure DES with 48 Bit Keys?)," </title> <booktitle> Advances in Cryptology|CRYPTO '85 Proceedings, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1986, </year> <pages> pp. 537-542. </pages>
Reference-contexts: The basic purpose of this permutation is to require the availability of 256 32-bit words of RAM and 32-bit arithmetic operations in order to carry out a key-stretching. 6 Related Work Some work on key stretching for block ciphers was independently done by <ref> [QDD86] </ref>. Also, our techniques are similar in spirit to the technique of using repeated iterations of DES to make Unix password-guessing attacks more expensive [MT79]. Other authors have also independently examined the problem of hardening password-protection schemes based on one-way functions.
Reference: [Sch96] <author> B. Schneier, </author> <title> Applied Cryptography, Second Edition, </title> <publisher> John Wiley & Sons, </publisher> <year> 1996. </year>
Reference: [Tre97] <author> Peter Trei, </author> <type> personal communication, </type> <year> 1997. </year>
Reference-contexts: Key stretching only reduces a short key's resistance to certain attacks. If at all possible, system designers should use long keys. Several open questions remain. It would be nice to see an analysis of various key schedules' economies of scale for keysearch attacks. For example, Peter Trei <ref> [Tre97] </ref> has recently demonstrated that a software DES keysearch can step through the DES key schedule in Gray code order, making each new key much cheaper to schedule for the keysearcher than a key is to schedule for an ordinary user.
Reference: [Wie94] <author> M. Wiener, </author> <title> "Efficient DES Key Search," </title> <institution> TR-244, School of Computer Science, Carleton Unversity, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: For example, we may have a secure key-stretching scheme which stretches 40-bit keys to an effective strength of 56 bits. Unfortunately, it is feasible for a moderately well-funded attacker to build a machine to carry out a 56-bit keysearch of some cipher like DES <ref> [Wie94, BDRSSTW96] </ref>. We would like our key-stretching algorithms to be hard implement on very cheap hardware, the kind that would most likely be used in building a keysearch machine.
References-found: 13

