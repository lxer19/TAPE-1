URL: http://www.iro.umontreal.ca/~keller/Layla/chapter.ps.Z
Refering-URL: http://www.iro.umontreal.ca/~keller/publications.html
Root-URL: http://www.iro.umontreal.ca
Title: Layla: A Pattern-based Framework for Network Management Interfaces  
Author: Rudolf K. Keller Jean Tessier* 
Keyword: Application Framework, Network Management Interface, Design Pattern, API (Application Programming Interface), OSI (Open Systems Interconnection).  
Note: Point of Contact: Ruedi Keller  
Address: C.P. 6128, succursale Centre-ville, Montral (Qubec) H3C 3J7, Canada  Holmdel, NJ.  
Affiliation: Dpartement dinformatique et de recherche oprationnelle Universit de Montral  Laboratories, Advanced Technologies Division,  
Email: e-mail: keller@iro.umontreal.ca, Jean.Tessier@att.com  
Phone: voice: (514) 343-6782, fax: (514) 343-5834  
Date: 1 21  
Web: web: http://www.iro.umontreal.ca/~keller/Layla  
Abstract: Developing network management interfaces (NMIs) is a challenging task involving multiple software layers, application programming interfaces (APIs), specification languages and tools. In order to ease the job of NMI developers, we have developed Layla, a prototype application framework supporting Open Systems Interconnection (OSI) NMIs. Layla is based on a heterogeneous yet coherent system of design patterns that comprises previously published patterns, several new and domain-specific patterns taken from NMI standards, as well as a couple of basic patterns relevant in Laylas API. Our research indicates that frameworks can indeed be built for a domain as complex as NMIs, and that they have a positive impact on both the development process and the resulting NMI products. Also, our experience confirms that the expected benefits of using design patterns, such as flexibility, reusability, and documentation value, do hold, yet that building pattern-based frameworks is a highly iterative and demanding activity. In this paper, we discuss APIs for NMIs and the need for application frameworks, detail the Layla framework and its system of patterns, describe NMI development based on Layla, and put our framework into perspective. This work was in part funded by the Ministry of Industry, Commerce, Science and Technology, Quebec, under the IGLOO project organized by the Centre de Recherche Informatique de Montreal, by Teleglobe Canada Inc., and by the National Sciences and Research Council of Canada. * Authors contribution is part of his Master thesis research at Universit de Montral. Authors current affiliation: AT&T 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> AT&T Bell Laboratories. </author> <title> BaseWorX Application Platform (AP): Application Management 21 / 21 Reference Guide, </title> <year> 1994. </year>
Reference-contexts: OVERVIEW OF FRAMEWORK ARCHITECTURE For our framework development, Teleglobe supplied us with two different APIs, both geared towards OSI NMIs as defined by the CMIS standards [16], and providing the low-level functionality required. One of them, used at the beginning of our project, is BaseWorX from AT&T <ref> [1] </ref>, the other one, on top of which the current version of Layla is built, is DM from Hewlett Packard [5].
Reference: [2] <author> Frank Buschmann, Regine Meunier, Hans Rohnert, Peter Sommerlad, and Michael Stal. </author> <title> Pattern-Oriented Software Architecture - A System of Patterns. </title> <publisher> John Wiley and Sons, </publisher> <year> 1996. </year>
Reference-contexts: Layla was built for OSI NMIs and therefore includes provisions for the object-oriented nature of CMIS which are not necessarily found in other protocols for network management. At an early stage in the development of Layla, we decided to take an approach based on design patterns <ref> [2, 4, 11] </ref>. <p> From the outset, we were taking a development approach based on design patterns. Such an approach has the potential of making architectures easier to modify, maintain, and reuse, and to improve system documentation, as has been widely publicized <ref> [2, 4, 11, 14] </ref>. We started by building a simple toolkit containing some utility classes. But as new classes were added that took more and more of the applications main processing, the toolkit was turned into an application framework. <p> The Manager-Agent and Remote Operation patterns, governing a large part of our prototype framework, can be considered key patterns of an NMI pattern system. They are detailed and compared to related patterns (such as the patterns presented in <ref> [2] </ref>) in [18]. The Managed Object, Translator, and Inherited Behavior patterns are further discussed in [17].
Reference: [3] <author> European ATM Pilot project. </author> <title> Xcoop Interface Specification for the ATM Pilot, </title> <month> May </month> <year> 1994. </year>
Reference-contexts: A SAMPLE APPLICATION USING LAYLA One of the practical interests of Teleglobe in the Layla project was the implementation of the Xcoop protocol <ref> [3] </ref>. This protocol supports the reservation and establishment of ATM VPCs. Asynchronous Transfer Mode (ATM) [9] is a transport protocol for high-speed, optic fiber-based integrated networks. It divides a data stream into cells that are then sent on a permanent switched circuit, or on a virtual path connection (VPC).
Reference: [4] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns. Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Layla was built for OSI NMIs and therefore includes provisions for the object-oriented nature of CMIS which are not necessarily found in other protocols for network management. At an early stage in the development of Layla, we decided to take an approach based on design patterns <ref> [2, 4, 11] </ref>. <p> From the outset, we were taking a development approach based on design patterns. Such an approach has the potential of making architectures easier to modify, maintain, and reuse, and to improve system documentation, as has been widely publicized <ref> [2, 4, 11, 14] </ref>. We started by building a simple toolkit containing some utility classes. But as new classes were added that took more and more of the applications main processing, the toolkit was turned into an application framework. <p> They are detailed and compared to related patterns (such as the patterns presented in [2]) in [18]. The Managed Object, Translator, and Inherited Behavior patterns are further discussed in [17]. Template descriptions as suggested in <ref> [4] </ref> of all these five patterns are available on-line at the Layla web site. 3 All other patterns of the system are described in [4], except for Reactor, which is discussed in [13]. <p> The Managed Object, Translator, and Inherited Behavior patterns are further discussed in [17]. Template descriptions as suggested in <ref> [4] </ref> of all these five patterns are available on-line at the Layla web site. 3 All other patterns of the system are described in [4], except for Reactor, which is discussed in [13]. APPLICATION DEVELOPMENT WITH LAYLA Developing a Layla application, whether it is an agent, a manager, or both, is closely tied to the specification of the information to be exchanged. The development procedure consists of five steps. <p> In Layla, top itself inherits its managed object interface from a special class named CMO, which defines how to access a given managed object (a class instance). This interface uses the Template Method pattern <ref> [4] </ref> to provide access methods which in turn call hook methods that are redefined by the subclasses. These hook methods use the Inherited Behavior pattern mentioned above in order to reuse and extend the body of the corresponding inherited method.
Reference: [5] <author> Hewlett Packard. </author> <title> HP OpenView Distributed Management Developers Guide, </title> <month> September </month> <year> 1994. </year>
Reference-contexts: One of them, used at the beginning of our project, is BaseWorX from AT&T [1], the other one, on top of which the current version of Layla is built, is DM from Hewlett Packard <ref> [5] </ref>. We have strived for complete encapsulation of the API into the framework, so that the classes defined for a given NMI can be compiled with one API or the other, thus making the NMI independent of the API that is actually used.
Reference: [6] <author> Hermann Hni, Ralph Johnson, and Robert Engel. </author> <title> A framework for network protocol software. </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming: Systems, Languages and Applications (OOPSLA95), </booktitle> <pages> pages 358369, </pages> <address> Austin, TX, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: We believe, however, that the general structure of the pattern system is now stable. Using Layla, NMIs are built by specializing some of the framework classes and composing them with others (in its current form, Layla is a hybrid of a white box and a black box framework <ref> [6] </ref>), and abstract superclasses take care of the interrelations between the concrete classes. Each major task in Layla is described by a design pattern, many of which come from the literature.
Reference: [7] <author> ITU-T (Intl. </author> <title> Telecom. Union - Telecommunication Standardization Sector). Recommendation M.3100 Generic Network Information Model, </title> <year> 1992. </year>
Reference-contexts: The implementations of the Xcoop example and of other NMIs we have built use the TMN library, a set of generic managed object classes for telecommunication networks <ref> [7] </ref>. Also, we reused parts of DMI, a CMIS library of core managed object classes for the management of distributed systems, which in turn reuses data types from a number of sources [16]. In Table 1, some quantitative data about the Xcoop and a tutorial example is presented.
Reference: [8] <institution> Javasoft (Sun Microsystems Inc.), Mountain View, CA. Java Management API, </institution> <month> May </month> <year> 1997. </year> <title> Alpha Release Documentation. </title>
Reference-contexts: Our experience from using it in some other part of the IGLOO project indicates that it is not well maintained by industrial standards and that it is fairly complex to use, imposing on the programmer constraints that are much stricter than the ones found in Layla. JMAPI <ref> [8] </ref>, developed by Javasoft, is a network management framework for Java applications. Its alpha version has been announced for May 1997. Unfortunately, its beta version, available since early 1997, is so unstable that we were not able to evaluate the system.
Reference: [9] <author> D. E. McDysan and D. L. Spohn. </author> <title> ATM: Theory and Application. </title> <publisher> McGraw-Hill, </publisher> <year> 1995. </year>
Reference-contexts: A SAMPLE APPLICATION USING LAYLA One of the practical interests of Teleglobe in the Layla project was the implementation of the Xcoop protocol [3]. This protocol supports the reservation and establishment of ATM VPCs. Asynchronous Transfer Mode (ATM) <ref> [9] </ref> is a transport protocol for high-speed, optic fiber-based integrated networks. It divides a data stream into cells that are then sent on a permanent switched circuit, or on a virtual path connection (VPC). These VPCs are established between ATM systems prior to the actual connection establishment phase.
Reference: [10] <author> George Pavlou, Graham Knight, Kevin McCarthy, and Saleem Bhatti. </author> <title> The OSIMIS platform: Making OSI management simple. </title> <editor> In Adarshpal Sethi, Yves Raynaud, and Fabienne Faure-Vincent, editors, </editor> <booktitle> Integrated Network Management IV, </booktitle> <pages> pages 480493. </pages> <publisher> Chapman and Hall, </publisher> <year> 1995. </year>
Reference-contexts: At the time of writing, we are only aware of two other (object-oriented) frameworks for CMIS NMIs: OSIMIS and JMAPI. OSIMIS <ref> [10] </ref> is an API providing a C++ interface similar in scope to Layla. OSIMIS is being developed at the University College of London and is not commercially available.
Reference: [11] <author> Wolfgang Pree. </author> <title> Design Patterns for Object-Oriented Software Development. </title> <address> Addison-Wes-ley, </address> <year> 1994. </year>
Reference-contexts: Layla was built for OSI NMIs and therefore includes provisions for the object-oriented nature of CMIS which are not necessarily found in other protocols for network management. At an early stage in the development of Layla, we decided to take an approach based on design patterns <ref> [2, 4, 11] </ref>. <p> From the outset, we were taking a development approach based on design patterns. Such an approach has the potential of making architectures easier to modify, maintain, and reuse, and to improve system documentation, as has been widely publicized <ref> [2, 4, 11, 14] </ref>. We started by building a simple toolkit containing some utility classes. But as new classes were added that took more and more of the applications main processing, the toolkit was turned into an application framework.
Reference: [12] <author> Marshall T. Rose. </author> <title> The Simple Book: An Introduction to Management of TCP/IP-based Inter-nets. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1991. </year>
Reference-contexts: International standardization bodies have produced various tools for defining network management systems and their NMIs. Among the most advanced tools are the Common Management Information Service (CMIS) of Open Systems Interconnection (OSI) [16], and the Simple Network Management Protocol (SNMP) of the Internet <ref> [12] </ref>. Whereas CMIS, along with CMIP, its protocol for information exchange between systems, is based on the object-oriented 3 / 22 paradigm, SNMP uses tables not unlike the tables used in the relational model of databases.
Reference: [13] <author> Douglas C. Schmidt. </author> <title> Reactor: An object behavioral pattern for concurrent event demulti-plexing and event handler dispatching. </title> <editor> In James O. Coplien and Douglas C. Schmidt, editors, </editor> <booktitle> Pattern Languages of Program Design, chapter 29, </booktitle> <pages> pages 529545. </pages> <publisher> Addison-Wesley, </publisher> <year> 1995. </year> <booktitle> (Reviewed Proceedings of the First International Conference on Pattern Languages of Programming (PLoP95), </booktitle> <address> Monticello, IL, </address> <year> 1994). </year>
Reference-contexts: Template descriptions as suggested in [4] of all these five patterns are available on-line at the Layla web site. 3 All other patterns of the system are described in [4], except for Reactor, which is discussed in <ref> [13] </ref>. APPLICATION DEVELOPMENT WITH LAYLA Developing a Layla application, whether it is an agent, a manager, or both, is closely tied to the specification of the information to be exchanged. The development procedure consists of five steps.
Reference: [14] <author> Douglas C. Schmidt. </author> <title> Using design patterns to develop reusable object-oriented communication software. </title> <journal> Communications of the ACM, </journal> <volume> 38(10):6574, </volume> <month> October </month> <year> 1995. </year>
Reference-contexts: From the outset, we were taking a development approach based on design patterns. Such an approach has the potential of making architectures easier to modify, maintain, and reuse, and to improve system documentation, as has been widely publicized <ref> [2, 4, 11, 14] </ref>. We started by building a simple toolkit containing some utility classes. But as new classes were added that took more and more of the applications main processing, the toolkit was turned into an application framework. <p> As the migration to DM was carried out at a relatively early stage in the Layla development, it is difficult to assess the exact effort required. The current release of Layla, version 1.1, is the result of several design iterations, which is quite typical for pattern-based development <ref> [14] </ref>. We believe, however, that by now, the overall system of patterns is stable. Version 1.1 supports exclusively DM and required about two person-years to implement. It contains some 42 classes (plus assorted translation classes) and over 20,000 lines of code. <p> Its development demonstrates that pattern-based frameworks can be built for the demanding NMI domain. Experimentation with Layla makes us believe that pattern benefits such as flexibility, reusability, and documentation value of the framework and the resulting applications can indeed be reaped. And we concur with Schmidt <ref> [14] </ref> that the integration of design patterns together with frameworks will be among the areas of increased attention in the years to come.
Reference: [15] <author> Douglas C. Schmidt. </author> <title> A family of reusable design patterns for application-level gateways. Theory and Practice of Object Systems, 1996. John Wiley and Sons. </title> <journal> Special Issue on Patterns and Pattern Languages. </journal>
Reference-contexts: Two further tasks were considered flexible and generic enough to be applicable to other fields, and were thus described as design patterns, too (Translator and Inherited Behavior in Figure 4). They were then circulated on mailing lists and generated some interesting feedback from the design pattern community. Strategic patterns <ref> [15] </ref> are placed at the top, and the more generic but less critical tactical patterns are shown in the region below the separator line. 2 Arrows stand for use-relationships, indicating that the originating pattern uses the destination pattern for the functionality mentioned on the label of the arrow. <p> Agent NMIs use the Managed Object pattern to model their resources, using Template Method and Inherited Behavior to implement the required call-back methods. The Composite 2 Note that the distinction between strategic and tactical pattern refers to the role of a pattern in a particular context <ref> [15] </ref>. In Figure 4, patterns are grouped into strategic and tactical according to their role in Layla. 11 / 21 pattern can be used to represent complex filters used to screen the targets of operations, with the screening action itself being handled by the Visitor pattern.
Reference: [16] <author> Adrian Tang and S. Scoggins. </author> <title> Open Networking with OSI. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1992. </year>
Reference-contexts: Moreover, the access interface to the components can greatly vary, depending on their nature, type, and manufacturer. We define a network management interface (NMI) as the middle layer of a network management system, situated between the high-level control processes and the low-level components of the system <ref> [16] </ref>. The lower layers, which usually depend heavily on the execution platform at hand, are thus not part of the NMI. consists of two workstations communicating through a switch. <p> Note that the NMI must include a number of communication stacks to access all the various components. International standardization bodies have produced various tools for defining network management systems and their NMIs. Among the most advanced tools are the Common Management Information Service (CMIS) of Open Systems Interconnection (OSI) <ref> [16] </ref>, and the Simple Network Management Protocol (SNMP) of the Internet [12]. Whereas CMIS, along with CMIP, its protocol for information exchange between systems, is based on the object-oriented 3 / 22 paradigm, SNMP uses tables not unlike the tables used in the relational model of databases. <p> Our experience in the project, however, suggests that with careful framework design, performance loss can be kept to a minimum. OVERVIEW OF FRAMEWORK ARCHITECTURE For our framework development, Teleglobe supplied us with two different APIs, both geared towards OSI NMIs as defined by the CMIS standards <ref> [16] </ref>, and providing the low-level functionality required. One of them, used at the beginning of our project, is BaseWorX from AT&T [1], the other one, on top of which the current version of Layla is built, is DM from Hewlett Packard [5]. <p> Implementing the managed objects as subclasses of CMO. For each managed object class in the specification, a corresponding C++ class must be implemented. All managed object classes in GDMO inherit from a special managed object class named top, which is itself defined in GDMO <ref> [16] </ref>. In Layla, top itself inherits its managed object interface from a special class named CMO, which defines how to access a given managed object (a class instance). <p> Also, we reused parts of DMI, a CMIS library of core managed object classes for the management of distributed systems, which in turn reuses data types from a number of sources <ref> [16] </ref>. In Table 1, some quantitative data about the Xcoop and a tutorial example is presented. The tutorial example helps novices to get familiar with Layla. It implements the NMI for a simple network similar to the one presented in Figure 1 [17].
Reference: [17] <author> Jean Tessier. </author> <title> An application framework for OSI network management interfaces. </title> <type> Masters thesis, </type> <institution> Universit de Montral, </institution> <address> Montreal, Quebec, Canada, </address> <month> April </month> <year> 1996. </year> <note> In French. </note>
Reference-contexts: In the IGLOO project, a large, ongoing project on object-oriented software engineering, we are involved in the project part that addresses network management problems. Over the past two years, we have developed Layla 1 <ref> [17, 18] </ref>, a prototype application framework for NMIs. Using Layla, we have built several NMIs to date, in cooperation with Teleglobe Canada Inc., our main industrial partner. <p> They are detailed and compared to related patterns (such as the patterns presented in [2]) in [18]. The Managed Object, Translator, and Inherited Behavior patterns are further discussed in <ref> [17] </ref>. Template descriptions as suggested in [4] of all these five patterns are available on-line at the Layla web site. 3 All other patterns of the system are described in [4], except for Reactor, which is discussed in [13]. <p> In Table 1, some quantitative data about the Xcoop and a tutorial example is presented. The tutorial example helps novices to get familiar with Layla. It implements the NMI for a simple network similar to the one presented in Figure 1 <ref> [17] </ref>. Note that a lot of library code could be used, particularly in the tutorial example, where the application-specific code represents less than 5% of the overall specification code. <p> DISCUSSION AND PERSPECTIVES So far, Layla has been used in a limited number of applications. A broader implementation base is needed in order to validate all the concepts that have been introduced and to truly prove the genericity of the framework. The elaboration of a number of example NMIs <ref> [17] </ref>, however, gave the authors prime examples of the many issues involved, and experimentation at Teleglobe is providing us with further insight. 19 / 21 Layla is quite unique in offering a high-level, object-oriented interface to NMI development.

References-found: 17

