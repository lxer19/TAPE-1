URL: http://www.cs.umn.edu/Users/dept/users/riedl/CS-8103/Papers/Chorus/CS-TR-92-51.ps.Z
Refering-URL: http://www.cs.umn.edu/Users/dept/users/riedl/CS-8103/Papers/Chorus/
Root-URL: http://www.cs.umn.edu
Email: rwd@cs.cmu.edu francois@chorus.fr  
Phone: (412) 268-7654 +33 (1) 30-64-82-00  Fax: (412) 681-5739  
Title: Data Movement in Kernelized Systems  
Author: Randall W. Dean Francois Armand 
Address: 6 Avenue G. Eiffel 5000 Forbes Avenue 78182 ST-QUENTIN-EN-Y Pittsburgh, Pennsylvania 15213 CEDEX-FRANCE  
Affiliation: School of Computer Science CHORUS Systemes Carnegie Mellon University  
Abstract: This paper considers how two kernelized systems, Mach 3.0 with the BSD4.3 Single Server and CHORUS/MiX V.4, move data to and from files under a variety of circumstances. We give an overview of the kernel abstractions and system servers and describe in detail the read() and write() paths of these two systems. We then break down their read() and write() performance and compare them to two monolithic systems, Mach 2.6 MSD(BSD4.3) and System V R4.0. We then describe the compromises each of the two kernelized systems made in order to achieve a goal of performance comparable to the monolithic systems. We conclude with a description of what techniques each system uses that could benefit both each other and traditional monolithic systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abrossimov V., Rozier M., Shapiro M. </author> <title> Generic Virtual Memory Management for Operating System Kernels. </title> <booktitle> In Proceedings of the Twelvth ACM Symposium on Operating Systems Principles. </booktitle> <month> December, </month> <year> 1989. </year>
Reference-contexts: Finally, after having checked the read operation against mandatory locks (if any), the PM invokes the sgRead () CHORUS Nucleus call. 4.3.2. CHORUS Nucleus The CHORUS Nucleus first tries to retrieve the local cache <ref> [1] </ref> associated with the segment being accessed. A local cache is created for the segment upon the first access to the segment. Through the local cache descriptor the Nucleus accesses the pages of the segment that are present in main memory, and their associated access rights whether readable or writable.
Reference: [2] <author> Armand F., Gien M., Herrmann F., Rozier M. </author> <title> Revolution 89: or Distributing Unix brings it back to its Original Virtue. </title> <booktitle> In Proceedings WEDMS I. </booktitle> <month> October, </month> <year> 1989. </year>
Reference-contexts: A kernelized system also allows a developer to mix and match components as needed, minimizing or eliminating unneeded capabilities that are a permanent part of traditional monolithic systems. Kernelized systems have also demonstrated that they are a sound basis on which one can build distributed operating systems <ref> [2, 5] </ref> and/or provide features such as real-time [15, 19] or Object-Oriented environment [16]. For kernelized systems to gain acceptance, they must be binary compatible with and perform comparably to monolithic systems. Many papers have described efforts and experiences towards achieving these goals [6, 13].
Reference: [3] <author> Francois Armand. </author> <title> Give a Process Manager to your drivers! In Proceedings of EurOpen Autumn 1991. </title> <month> September, </month> <year> 1991. </year>
Reference-contexts: However some experiments have been done in the previous release of MiX (MiX V3.2) to measure the additional costs that such a configuration will imply. Further details can be found in <ref> [3] </ref>. One of the key point in the design of CHORUS/MiX V.4 has been the introduction of the message handler mechanism. However, this mechanism should be extended to work whether the receiver of a message is running in supervisor address space or user address space. 6.2. <p> The isolation of the drivers out of the servers as done in Mach would help to solve this issue. This has been experimented in CHORUS/MiX V3.2 and described in <ref> [3] </ref>. 6.3. Final Words Section 5 shows that Mach 3.0 with the BSD4.3 Single Server and CHORUS/MiX V.4 have achieved performance in the movement of data comparable to the monolithic systems which they are compatible with.
Reference: [4] <author> Baron, R.V. et al. </author> <title> MACH Kernel Interface Manual. </title> <type> Technical Report, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> September, </month> <year> 1988. </year>
Reference-contexts: Unfortunately, for historical reasons, the two systems often use different names to describe the same thing. The remainder of this section describes the abstractions of Mach 3.0 and CHORUS relevant for understanding the rest of the paper using either the common name or both when necessary. A Task <ref> [4] </ref> or Actor [8] is an execution environment and the basic unit of resource allocation. Both include virtual memory and threads. The Mach task also includes port rights. An actor includes ports as communication resources. A task or actor can either be in kernel or user space.
Reference: [5] <author> Joseph S. Barrera III. </author> <title> Kernel Support for Distrubted Memory Multiprocessors. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <note> To be published, </note> <year> 1992. </year>
Reference-contexts: A kernelized system also allows a developer to mix and match components as needed, minimizing or eliminating unneeded capabilities that are a permanent part of traditional monolithic systems. Kernelized systems have also demonstrated that they are a sound basis on which one can build distributed operating systems <ref> [2, 5] </ref> and/or provide features such as real-time [15, 19] or Object-Oriented environment [16]. For kernelized systems to gain acceptance, they must be binary compatible with and perform comparably to monolithic systems. Many papers have described efforts and experiences towards achieving these goals [6, 13].
Reference: [6] <author> Bricker, A., Gien, M., Guillemont, M., Lipkis, J., Orr, D., Rozier, </author> <note> M. </note>
Reference-contexts: For kernelized systems to gain acceptance, they must be binary compatible with and perform comparably to monolithic systems. Many papers have described efforts and experiences towards achieving these goals <ref> [6, 13] </ref>. Some authors have asserted that some services, such as, the file system, do not belong outside of the kernel [20]. One of the major fears appears to be the need for costly context switching.
References-found: 6

