URL: http://www.eecs.umich.edu/~aprakash/jaegert/rbac95.ps
Refering-URL: http://www.eecs.umich.edu/~aprakash/csrg_pub.html
Root-URL: http://www.cs.umich.edu
Title: Requirements of Role-based Access Control for Collaborative Systems  
Author: Trent Jaeger and Atul Prakash 
Date: (313) 747-3780  
Note: Primary Contact: jaegert@eecs.umich.edu,  
Address: Ann Arbor  
Affiliation: Software Systems Research Laboratory Department of Electrical Engineering and Computer Science University of Michigan,  
Abstract: In many collaborative systems, users can trigger the execution of commands in a process owned by another user. Unless the access rights of such processes are limited, any user in the collaboration can: (1) gain access to another's private files; (2) execute applications on another user's behalf; or (3) read public system files, such as the password file, on another user's machine. However, some applications require limited sharing of private files, so it may be desirable to grant access to these files for a specific purpose. RBAC models can be used to limit the access rights of processes, but current implementations do not enable users to flexibly control the access rights of a process at runtime. We define a discretionary access control model that enables principals to flexibly control the access rights of a collaborative process. We then specify the requirements of role-based access control models necessary to implement this discretionary access control model. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Frequently asked questions: Applet security, </institution> <note> Version 1.0 Beta 2, 1995. Available at URL http://java.sun.com/sfaq. </note>
Reference-contexts: Historically, access control of mobile agent systems has been implemented using the following techniques: (1) preventing processes from accessing system objects [3]; (2) limiting access to read and write operations in a single public directory [4]; (3) using a global properties file to describe permissible access rights <ref> [1] </ref>; and (4) providing an intersection of the access rights of the collaboration's principals [10]. The restrictive security provided by the first two options, implemented in ATOMICMAIL [3] and Safe-Tcl [4], prevents access to shared data at its normal location and prevents the execution of applications. <p> Moving data to a safe location is time-consuming and can lead to inconsistencies between versions if a crash occurs. The execution of existing applications is also necessary for some applications. For example, we want to use an existing editor in our collaborative editing application. In the third option, Java <ref> [1] </ref> enables agents to read and write files in their normal locations, but the execution of existing applications is still not permitted. In Java, each user defines a properties file that describes the access rights of any agent.
Reference: [2] <author> L. Badger, D. F. Sterne, D. L. Sherman, K. M. Walker, and S. A. Haghighat. </author> <title> Practical domain and type enforcement for UNIX. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 66-77, </pages> <year> 1995. </year>
Reference-contexts: Another important issue in RBAC model implementations is the power of the specification language. In some RBAC model implementations, when a new role is added the access control lists of all the effected system objects must be updated. Unlike other RBAC models, the Domain Type Enforcement (DTE) <ref> [2] </ref> model provides a concise language for specifying process access rights. For example, read access to all the system objects in a directory tree can be specified in a single statement. Currently, DTE is designed for MAC, so users cannot dynamically modify their rights.
Reference: [3] <author> N. S. Borenstein. </author> <title> Computational mail as a network infrastructure for computer-supported cooperative work. </title> <booktitle> In CSCW 92 Proceedings, </booktitle> <pages> pages 67-74, </pages> <year> 1992. </year>
Reference-contexts: Therefore, it is not possible for users or their applications to limit the access rights of their processes. Historically, access control of mobile agent systems has been implemented using the following techniques: (1) preventing processes from accessing system objects <ref> [3] </ref>; (2) limiting access to read and write operations in a single public directory [4]; (3) using a global properties file to describe permissible access rights [1]; and (4) providing an intersection of the access rights of the collaboration's principals [10]. <p> The restrictive security provided by the first two options, implemented in ATOMICMAIL <ref> [3] </ref> and Safe-Tcl [4], prevents access to shared data at its normal location and prevents the execution of applications. Moving data to a safe location is time-consuming and can lead to inconsistencies between versions if a crash occurs. The execution of existing applications is also necessary for some applications.
Reference: [4] <author> N. S. Borenstein. </author> <title> Email with a mind of its own: The Safe-Tcl language for enabled mail. </title> <note> In UL-PAA '94, 1994. Available via anonymous ftp from ics.uci.edu in the file mrose/safe-tcl/safe-tcl.tar.Z. </note>
Reference-contexts: Historically, access control of mobile agent systems has been implemented using the following techniques: (1) preventing processes from accessing system objects [3]; (2) limiting access to read and write operations in a single public directory <ref> [4] </ref>; (3) using a global properties file to describe permissible access rights [1]; and (4) providing an intersection of the access rights of the collaboration's principals [10]. The restrictive security provided by the first two options, implemented in ATOMICMAIL [3] and Safe-Tcl [4], prevents access to shared data at its normal <p> and write operations in a single public directory <ref> [4] </ref>; (3) using a global properties file to describe permissible access rights [1]; and (4) providing an intersection of the access rights of the collaboration's principals [10]. The restrictive security provided by the first two options, implemented in ATOMICMAIL [3] and Safe-Tcl [4], prevents access to shared data at its normal location and prevents the execution of applications. Moving data to a safe location is time-consuming and can lead to inconsistencies between versions if a crash occurs. The execution of existing applications is also necessary for some applications.
Reference: [5] <author> E. Born and H. Stiegler. </author> <title> Discretionary access control by means of usage conditions. </title> <journal> Computers & Security, </journal> <volume> 13(5) </volume> <pages> 437-450, </pages> <year> 1994. </year>
Reference-contexts: As described above, access rights of collaborative applications may not be known until runtime, so DAC models are necessary to enable a user or application to limit access rights. A few RBAC models do enable some dynamic modification of a role's access rights <ref> [5, 14] </ref>. These models permit system administrators to specify rules that can modify the access rights of a process at runtime. Since the access requirements of many collaborative applications are ad hoc, it is unlikely that the rules necessary to control access for these applications have been specified.
Reference: [6] <author> D. Dean and D. Wallach. </author> <title> A security analysis of the hotjava web browser, </title> <note> 1995. Available at URL http://www.cs.princeton.edu/ ddean/java/. </note>
Reference-contexts: Collaborating principals must be able to communicate with one another, but unlimited communication is not possible because there are security loopholes that can result in an agent sending a reader secrets to an attacker <ref> [6] </ref>.
Reference: [7] <author> C. A. Ellis, S. J. Gibbs, and G. Rein. </author> <title> Groupware: Some issues and experiences. </title> <journal> Communications of the ACM, </journal> <pages> pages 38-51, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: 1 Introduction We examine how the access control requirements of collaborative systems affect the design of role-based access control (RBAC) models. A collaborative system or groupware is a computer-based system that supports groups of users engaged in a common task and that provides an interface to a shared environment <ref> [7] </ref>. Examples of collaborative systems include: (1) computer conferencing systems; (2) multi-user editors; (3) group decision support systems; and (4) workflow systems.
Reference: [8] <author> M. Gasser and E. McDermott. </author> <title> An architecture for practical delegation in a distributed system. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 20-30, </pages> <year> 1990. </year>
Reference-contexts: Typically, access rights for a Unix process are restricted using chroot, but chroot requires files to be moved to the safe area at runtime. Current implementations of access control models based on RBAC also are insufficient for collaborative applications. RBAC implementations for file systems (e.g., <ref> [8, 16, 17, 18] </ref>) are designed to provide MAC. Therefore, only system administrators can define the roles that a user can assume.
Reference: [9] <author> J. Gosling and H. McGilton. </author> <title> The Java language environment: </title> <note> A white paper, 1995. Available at URL http://java.sun.com/whitePaper/java-whitepaper-1.html. </note>
Reference-contexts: Current solutions are not suitable for enforcing the access rights of collaborative systems. To enforce access control, mobile agent systems preclude the agents from performing potentially useful types of actions, such as executing existing applications. For example, a Java <ref> [9] </ref> agent (called an applet in Java) cannot execute a non-Java application. Also, these systems use cumbersome approaches to control read and write access. Java's access model forces all concurrent agents to use the same access rights.
Reference: [10] <author> T. Jaeger and A. Prakash. </author> <title> Support for the file system security requirements of computational email systems. </title> <booktitle> In Proceedings of the 2nd ACM Conference on Computer and Communications Security, </booktitle> <pages> pages 1-9, </pages> <year> 1994. </year>
Reference-contexts: the following techniques: (1) preventing processes from accessing system objects [3]; (2) limiting access to read and write operations in a single public directory [4]; (3) using a global properties file to describe permissible access rights [1]; and (4) providing an intersection of the access rights of the collaboration's principals <ref> [10] </ref>. The restrictive security provided by the first two options, implemented in ATOMICMAIL [3] and Safe-Tcl [4], prevents access to shared data at its normal location and prevents the execution of applications. <p> In Java, each user defines a properties file that describes the access rights of any agent. Therefore, the same rights apply to any agents being run by the user at the same time, so it is no possible to run two agents with different rights. In <ref> [10] </ref>, we describe a service that enables a reader to limit the agent's access rights to the intersection of the reader and writer's rights. This service enables trusted users to collaborate while protecting their private system objects from access.
Reference: [11] <author> T. Jaeger and A. Prakash. </author> <title> Implementation of a discretionary access control model for script-based systems. </title> <booktitle> In Proceedings of the 8th IEEE Computer Security Foundations Workshop, </booktitle> <pages> pages 70-84, </pages> <year> 1995. </year>
Reference-contexts: Therefore, users or collaborative applications need to be able to limit access at runtime. We present an access control model that can flexibly control the access rights of a collaborative process. Our model <ref> [11] </ref> is designed to restrict the access rights of a process at runtime. The model is simple because users or application writers need to know only a few common classes of objects to specify the access rights of a collaboration. <p> Thus, the mechanism to create a new domain may be inefficient for large file systems, and it requires that users understand the relationships between domains in order to create a new one. 4 Our Approach In <ref> [11] </ref>, we define a DAC model for specifying the access rights available to a mobile agent. The goal of the DAC model is to enable the reader and writer in a mobile agent computation to flexibly control access to system objects.
Reference: [12] <author> M. Knister and A. Prakash. DistEdit: </author> <title> A distributed toolkit for supporting multiple group editors. </title> <booktitle> In Proceedings of the Third ACM Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 343-355, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: The permissions of a principal to perform operations on system objects are called the access rights of the principal in the system. As an example, consider the DistEdit <ref> [12, 13] </ref> system. DistEdit is a toolkit for building collaborative editors using a replicated process architecture. In a collaborative editing session, each user in the collaboration has an editor process (see Figure 2).
Reference: [13] <author> M. Knister and A. Prakash. </author> <title> Issues in the design of a toolkit for supporting multiple group editors. </title> <journal> Computing Systems The Journal of the Usenix Association, </journal> <volume> 6(2) </volume> <pages> 135-166, </pages> <year> 1993. </year>
Reference-contexts: The permissions of a principal to perform operations on system objects are called the access rights of the principal in the system. As an example, consider the DistEdit <ref> [12, 13] </ref> system. DistEdit is a toolkit for building collaborative editors using a replicated process architecture. In a collaborative editing session, each user in the collaboration has an editor process (see Figure 2).
Reference: [14] <author> I. Mohammed and D. M. Dilts. </author> <title> Design for dynamic user-role-based security. </title> <journal> Computers & Security, </journal> <volume> 13(8) </volume> <pages> 661-671, </pages> <year> 1994. </year>
Reference-contexts: As described above, access rights of collaborative applications may not be known until runtime, so DAC models are necessary to enable a user or application to limit access rights. A few RBAC models do enable some dynamic modification of a role's access rights <ref> [5, 14] </ref>. These models permit system administrators to specify rules that can modify the access rights of a process at runtime. Since the access requirements of many collaborative applications are ad hoc, it is unlikely that the rules necessary to control access for these applications have been specified.
Reference: [15] <author> R. S. Sandhu, E. J. Coyne, H. L. Feinstein, and C. E. Youman. </author> <title> Role-based access control: a multi-dimensional view. </title> <booktitle> In Proceedings of the Tenth Computer Security Applications Conference, </booktitle> <pages> pages 54-62, </pages> <year> 1994. </year>
Reference-contexts: If both are authorized, then the access is permitted. 5 RBAC Requirements In <ref> [15] </ref>, a set of dimensions for RBAC model requirements are proposed. Below, we specify values for these dimensions to implement the DAC model described above. We list values only for the dimensions relevant to the DAC model implementation. 1.
Reference: [16] <author> T. C. Ting, S. A. Demurjian, and M.-Y. Hu. </author> <title> Requirements, capabilities and functionalities of user-role based security for an object-oriented design model. </title> <booktitle> In IFIP Transactions, Database Security V, </booktitle> <pages> pages 275-296, </pages> <year> 1992. </year>
Reference-contexts: Typically, access rights for a Unix process are restricted using chroot, but chroot requires files to be moved to the safe area at runtime. Current implementations of access control models based on RBAC also are insufficient for collaborative applications. RBAC implementations for file systems (e.g., <ref> [8, 16, 17, 18] </ref>) are designed to provide MAC. Therefore, only system administrators can define the roles that a user can assume.
Reference: [17] <author> S. T. Vinter. </author> <title> Extended discretionary access controls. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 39-49, </pages> <year> 1988. </year>
Reference-contexts: Typically, access rights for a Unix process are restricted using chroot, but chroot requires files to be moved to the safe area at runtime. Current implementations of access control models based on RBAC also are insufficient for collaborative applications. RBAC implementations for file systems (e.g., <ref> [8, 16, 17, 18] </ref>) are designed to provide MAC. Therefore, only system administrators can define the roles that a user can assume.
Reference: [18] <author> E. Wobber, M. Abadi, M. Burrows, and B. Lamp-son. </author> <title> Authentication in the Taos operating system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(1) </volume> <pages> 3-32, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: Typically, access rights for a Unix process are restricted using chroot, but chroot requires files to be moved to the safe area at runtime. Current implementations of access control models based on RBAC also are insufficient for collaborative applications. RBAC implementations for file systems (e.g., <ref> [8, 16, 17, 18] </ref>) are designed to provide MAC. Therefore, only system administrators can define the roles that a user can assume.
References-found: 18

