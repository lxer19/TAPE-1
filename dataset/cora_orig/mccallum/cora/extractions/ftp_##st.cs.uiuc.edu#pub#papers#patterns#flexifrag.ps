URL: ftp://st.cs.uiuc.edu/pub/papers/patterns/flexifrag.ps
Refering-URL: http://st-www.cs.uiuc.edu/users/patterns/New.html
Root-URL: http://www.cs.uiuc.edu
Email: Email:fanji,djramg@lotus.iitm.ernet.in  
Title: FlexiFrag: A Design Pattern for Flexible File Sharing in Distributed Collaborative Applications  
Author: Anjaneyulu Pasala D. Janaki Ram 
Keyword: Distributed file systems, CSCW, sharing policies, Design patterns, calendar management.  
Address: Madras, India.  
Affiliation: Department of Computer Science and Engineering Indian Institute of Technology,  
Abstract: The need for flexible file sharing in distributed systems is increasing in applications such as calendar management, collaborative editing of documents, collaborative software developments etc. The file sharing policies required in these applications are often very different from the traditional read/write policies. Hence, a flexible way of specifying and implementing sharing policies on individual files in file systems is required. We propose a distributed object-based system model of constructing file systems. The Object-based system model is based on a pattern called FlexiFrag. We show how a distributed object-based system and in particular distributed file system can be constructed using the pattern in a flexible way. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Andrew S. </author> <title> Tanenbaum Distributed Operating Systems Prentice Hall Inc., </title> <year> 1995. </year>
Reference-contexts: 1 Introduction Traditional file system sharing policies are globally applied to all files in the system and are based on simple read, write, and execute permissions to owner, group and others <ref> [1, 4] </ref>. However, many advanced applications such as collaborative editing require more sophisticated file sharing policies. An example is the calendar management application. In a typical calendar [2, 7], file data can be a schedule, a proposal, a note, or personal data.
Reference: [2] <author> Christine M. Kincaid, Pierre B. Dupont and A. </author> <title> Roger Kaye "Electronic Calendars in the Office: An Assessment of User Needs and Current Technology", </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> Vol. 3, No. 1, </volume> <month> January </month> <year> 1985, </year> <pages> Pages 89 - 102. </pages>
Reference-contexts: However, many advanced applications such as collaborative editing require more sophisticated file sharing policies. An example is the calendar management application. In a typical calendar <ref> [2, 7] </ref>, file data can be a schedule, a proposal, a note, or personal data. The different sections of the calendar file often require different sharing policies (refer to 1 like to have different sharing policies on his program files.
Reference: [3] <author> Dinesh T. </author> <title> Fragmented Objects, Under Graduate's theses, </title> <institution> Dept. of Computer Science and Engineering, Indian Institute of Technology, Madras, India, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: Otherwise a return value is bounced to source object on behalf of its client using bounce operator. 6. Filters can also be nested i.e., a filter can be designed to act as a filter to another filter. 4.2 Fragmented Object Model The Fragmented Object (FO) <ref> [3] </ref> is composed of multiple fragments. A fragment is part of an object which is similar in structure to its constituting object. The fragment also has state, behavior and identity. A fragment's state is made up of the values of its attributes.
Reference: [4] <author> Eliezer Levy and A. </author> <title> Silberschatz "Distributed File Systems: Concepts and Examples", </title> <journal> ACM Computing Surveys, </journal> <volume> Vol. 22, No. 4, </volume> <month> December </month> <year> 1990, </year> <pages> Pages 321 - 374. </pages>
Reference-contexts: 1 Introduction Traditional file system sharing policies are globally applied to all files in the system and are based on simple read, write, and execute permissions to owner, group and others <ref> [1, 4] </ref>. However, many advanced applications such as collaborative editing require more sophisticated file sharing policies. An example is the calendar management application. In a typical calendar [2, 7], file data can be a schedule, a proposal, a note, or personal data. <p> These new requirements can be 20 easily incorporated into our approach. 7 Related Work Several systems have been designed to enable file sharing among a number of users of network of workstations <ref> [4, 10] </ref>. These systems are based on sharing policies of read, write and execute permissions, applied globally to all files. <p> These systems are based on sharing policies of read, write and execute permissions, applied globally to all files. LOCUS, NFS and SPRITE systems use the same file sharing semantics used in UNIX operating system <ref> [4] </ref> to provide upward compatibility with UNIX as these systems designers regard UNIX as a model operating system. Coda file system and its descendant Andrew file systems [9] provide two levels of sharing one based on what can be done and the other based on who can do it.
Reference: [5] <author> Erich Gamma, Richard Helm, </author> <title> Raph Johnson and John vlissides Design Patterns: Elements of reusable Object-Oriented Software, </title> <publisher> Addison-wesley, </publisher> <year> 1995. </year>
Reference-contexts: Since flexibility 5 and migration are generic problems in the context of distributed systems, the proposed design pattern could be considered generic to distributed systems. 3 Design Pattern for Flexible Distributed File System Design patterns achieve reuse of software architectures at a level higher than source code <ref> [5, 15] </ref>. The FlexiFrag pattern has been identified to solve the generic problem of flexibility and migration in the context of distributed systems. <p> The FlexiFrag pattern has been identified to solve the generic problem of flexibility and migration in the context of distributed systems. We describe the FlexiFrag pattern using the format suggested by Gamma et al <ref> [5] </ref>. 3.1 Intent The pattern simplifies the validation and delivery of messages to a particular object in a group of objects which are logically related in a network of workstations environment. 3.2 Motivation In distributed collaborative applications, users collaborate through the use of shared data.
Reference: [6] <author> Grady Booch Object-Oriented Analysis and Design with Applications, </author> <title> Second Edition, </title> <publisher> Benjamin-Cummings publishers company inc., </publisher> <year> 1994. </year>
Reference-contexts: It is required to logically group similar services to provide flexible maintenance * Individual segments of an object require concurrent access * An object is required to be distributed across the network of nodes 3.4 Structure The structure of the FlexiFrag pattern is illustrated in Figure 2 using the Booch <ref> [6] </ref> class diagram.
Reference: [7] <institution> Irene Greif and Sunil Sarin "Data Sharing in Group Work" ACM Transactions on Office Information Systems, </institution> <note> Vol. 5, No. 2, </note> <month> April </month> <year> 1987, </year> <pages> Pages 187 - 211. </pages>
Reference-contexts: However, many advanced applications such as collaborative editing require more sophisticated file sharing policies. An example is the calendar management application. In a typical calendar <ref> [2, 7] </ref>, file data can be a schedule, a proposal, a note, or personal data. The different sections of the calendar file often require different sharing policies (refer to 1 like to have different sharing policies on his program files. <p> This type of electronic calendars provide different types of information shared among several users across the network. The kind of access to a particular type of information depends on the role assumed by the user <ref> [7] </ref> at the time of access. Figure 1 shows the information provided by the calendar along with the types of users and the sharing policies assigned to them.
Reference: [8] <author> Janaki Ram D., Vivekananda N., Srinivas Rao CH., and Krishna Mohan, N. </author> <title> "Constraint Meta-Object: A New Model for Distributed Collaborative Designing", </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> Vol. </volume> <pages> 27, </pages> <note> Part A, Issue 2, </note> <month> March </month> <year> 1997. </year>
Reference-contexts: * The pattern frees the user from objects location management. * The pattern allows fast access to migrated objects. * The pattern provides concurrent access on different parts of an object. * Access policies can be specified independent of the object data. 3.8 Known Uses * The Constraint Meta-Object Model <ref> [8] </ref> was proposed to capture collaborative design activity, where each designer works on his own individual workstation and collaborates with other designers' workstations connected through a local area network. The collaboration in this domain is captured as constraint satisfaction on design spaces and constraint propagation among related design spaces.
Reference: [9] <author> Mahadev Satyanarayanan "Scalable, </author> <title> Secure and Highly Available Distributed File Access", </title> <booktitle> IEEE Computer, </booktitle> <month> May </month> <year> 1990, </year> <pages> Pages 9 - 21. 22 </pages>
Reference-contexts: LOCUS, NFS and SPRITE systems use the same file sharing semantics used in UNIX operating system [4] to provide upward compatibility with UNIX as these systems designers regard UNIX as a model operating system. Coda file system and its descendant Andrew file systems <ref> [9] </ref> provide two levels of sharing one based on what can be done and the other based on who can do it. Venus provides UNIX mode of sharing semantics based on read, write and execute permissions on individual files.
Reference: [10] <institution> Ni Y and Goscinski A "Trader Cooperation to enable object sharing among users of homogeneous distributed systems", Computer Communications, </institution> <note> Vol. 17, No. 3, </note> <month> March </month> <year> 1994, </year> <pages> Pages 218 - 229. </pages>
Reference-contexts: These new requirements can be 20 easily incorporated into our approach. 7 Related Work Several systems have been designed to enable file sharing among a number of users of network of workstations <ref> [4, 10] </ref>. These systems are based on sharing policies of read, write and execute permissions, applied globally to all files. <p> Venus provides UNIX mode of sharing semantics based on read, write and execute permissions on individual files. Where as vice uses access lists mechanism to provide entry into individual directories. Ni and Goscinski <ref> [10] </ref> suggest traders (extension of RHODOS trader) cooperation to enable object sharing among a number of users in homogeneous distributed systems. The owner of object exports it to make it visible to others and sharable by others. While exporting the owner specifies certain conditions.
Reference: [11] <author> Peter William Madany An Object-Oriented Frameworks for File Systems, </author> <type> Ph.D. Thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1992. </year>
Reference-contexts: Further, it may be required to form groups or subgroups among users with separate access permissions. To satisfy the growing needs of such advanced applications, the file systems should be flexible, general, and extensible. Conventional file system designs are neither general nor extensible. Object-oriented frameworks <ref> [11, 14] </ref> were developed to construct file systems to make them easily extensible. The object-oriented frameworks capitalize on the object-oriented techniques of data abstraction, data encapsulation, inheritance and polymorphism. They allow new features of file systems to be incorporated dynamically as and when required without much effort.
Reference: [12] <author> Rushikesh K. Joshi, N. Vivekananda and D. </author> <title> Janaki Ram "Message Filters for Object-Oriented Systems", </title> <type> Technical Report No. </type> <institution> IITM-CSE-DOS-95-08, IIT, Madras, India. </institution> <note> (To appear in Software-Practice & Experience) </note>
Reference-contexts: In the rest of the section, we present the concepts of message filtering, fragmented object and reflector object models to provide insight into the FlexiFrag pattern. 4.1 Filter Object Model We briefly describe the filter object model developed in <ref> [12] </ref>. In the conventional object model, a message generated by an object (called source object) is directly delivered at the target object which invokes the corresponding method. This method consists of both message control code and message processing code.
Reference: [13] <author> Rushikesh K. Joshi, D. Janaki Ram "ShadowObjects: </author> <title> A Programming Model for control Replication in Distributed Systems", </title> <type> Technical Report No. </type> <institution> IITM-CSE-DOS-95-03, IIT, Madras, India. </institution>
Reference-contexts: Replicate object: In fragmented object model every fragment consists of both control interface and data. The fragment as a whole (both control and data) is replicated. It allows parallel accesses to fragments by several users which reduces access time and improves the throughput of the system. A ShadowObject <ref> [13] </ref> also called a replicate object is used to manage the replicas of the fragment. The hide and export constructs are used to export the individual replicas of the fragments or to hide them from external clients.
Reference: [14] <author> Ware Myers "Taligent's CommonPoint: </author> <title> The Promise of Objects", </title> <booktitle> IEEE Computer, </booktitle> <month> March </month> <year> 1995, </year> <pages> Pages 78 - 83. </pages>
Reference-contexts: Further, it may be required to form groups or subgroups among users with separate access permissions. To satisfy the growing needs of such advanced applications, the file systems should be flexible, general, and extensible. Conventional file system designs are neither general nor extensible. Object-oriented frameworks <ref> [11, 14] </ref> were developed to construct file systems to make them easily extensible. The object-oriented frameworks capitalize on the object-oriented techniques of data abstraction, data encapsulation, inheritance and polymorphism. They allow new features of file systems to be incorporated dynamically as and when required without much effort.
Reference: [15] <editor> Wolfgang Pree Design Patterns for Object-Oriented Software Development, </editor> <publisher> Addison-Wesley Publishing company, </publisher> <year> 1995. </year> <month> 23 </month>
Reference-contexts: Since flexibility 5 and migration are generic problems in the context of distributed systems, the proposed design pattern could be considered generic to distributed systems. 3 Design Pattern for Flexible Distributed File System Design patterns achieve reuse of software architectures at a level higher than source code <ref> [5, 15] </ref>. The FlexiFrag pattern has been identified to solve the generic problem of flexibility and migration in the context of distributed systems.
References-found: 15

