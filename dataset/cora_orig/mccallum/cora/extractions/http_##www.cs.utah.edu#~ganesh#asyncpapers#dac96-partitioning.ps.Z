URL: http://www.cs.utah.edu/~ganesh/asyncpapers/dac96-partitioning.ps.Z
Refering-URL: http://www.cs.utah.edu/~ganesh/asyncpapers.html
Root-URL: 
Title: A Technique for Synthesizing Distributed Burst-mode Circuits  
Author: Prabhakar Kudva Ganesh Gopalakrishnan Hans Jacobson 
Affiliation: IBM T.J. Watson Research Center Department of Computer Science Yorktown Heights University of Utah  
Abstract: We offer a technique to partition a centralized control-flow graph to obtain distributed control in the context of asynchronous high-level synthesis. The technique targets Huffman-style asynchronous controllers that are customized to the problem. It solves the key problem of handling signals that are shared between the partitionsa problem due to the incompletely specified nature of asynchronous controllers. We report encouraging experimental results on realistic examples. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> AKELLA, V., AND GOPALAKRISHNAN, G. SHILPA: </author> <title> A high-level synthesis system for self-timed circuits. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. 1992), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 587-591. </pages>
Reference-contexts: Related Work In [10], a technique called process decomposition is proposed. Process decomposition does not involve signal-sharing between incompletely specified machines. Signal-sharing is addressed in macromodule based design systems <ref> [1, 2] </ref> by using additional macromodules such as Toggles [15] and Decision-waits [5] to steer the global input to the correct sub-controller. In [3, 14], a method called contraction has been suggested as a decomposition technique for signal transition graph (STG) specifications. Contraction preserves the global nature of the controller. <p> The underlying control-graph is then obtained by refining each high-level Petri-net action into two-phase handshake actions, using standard approaches <ref> [1, 16] </ref>. The end result is one centralized control graph per sequential process.
Reference: [2] <author> BRUNVAND, E., AND SPROULL, R. F. </author> <title> Translating concurrent programs into delay-insensitive circuits. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. 1989), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 262-265. </pages>
Reference-contexts: Related Work In [10], a technique called process decomposition is proposed. Process decomposition does not involve signal-sharing between incompletely specified machines. Signal-sharing is addressed in macromodule based design systems <ref> [1, 2] </ref> by using additional macromodules such as Toggles [15] and Decision-waits [5] to steer the global input to the correct sub-controller. In [3, 14], a method called contraction has been suggested as a decomposition technique for signal transition graph (STG) specifications. Contraction preserves the global nature of the controller.
Reference: [3] <author> CHU, T.-A. </author> <title> Synthesis of Self-timed VLSI Circuits from Graph Theoretic Specifications. </title> <type> PhD thesis, </type> <institution> Department of EECS, Massachusetts Institute of Technology, </institution> <month> Sept. </month> <year> 1987. </year>
Reference-contexts: Process decomposition does not involve signal-sharing between incompletely specified machines. Signal-sharing is addressed in macromodule based design systems [1, 2] by using additional macromodules such as Toggles [15] and Decision-waits [5] to steer the global input to the correct sub-controller. In <ref> [3, 14] </ref>, a method called contraction has been suggested as a decomposition technique for signal transition graph (STG) specifications. Contraction preserves the global nature of the controller. It does not turn a large-grain controller into many smaller-grain controllers.
Reference: [4] <author> COATES, B., DAVIS, A., AND STEVENS, K. </author> <title> The Post Office experience: Designing a large asynchronous chip. Integration, </title> <journal> the VLSI journal 15, </journal> <month> 3 (Oct. </month> <year> 1993), </year> <pages> 341-366. </pages>
Reference-contexts: However, most macromodule libraries contain only a limited number of macromodule types, and hence distributed control realizations based on macromodules are often inefficient [6]. A class of controllers called burst-mode controllers that are potentially more efficient than macromodules, and can be customized <ref> [4, 11, 17] </ref> have been proposed and widely used in a number of non-trivial designs. However, burst-mode synthesis procedures cannot handle designs beyond a certain input/output (I/O) size, due to the complexity of many of the global optimizations used.
Reference: [5] <author> EBERGEN, J. C. </author> <title> Translating Programs into Delay-Insensitive Circuits, </title> <type> vol. </type> <institution> 56 of CWI Tract. Centre for Mathematics and Computer Science, </institution> <year> 1989. </year>
Reference-contexts: Related Work In [10], a technique called process decomposition is proposed. Process decomposition does not involve signal-sharing between incompletely specified machines. Signal-sharing is addressed in macromodule based design systems [1, 2] by using additional macromodules such as Toggles [15] and Decision-waits <ref> [5] </ref> to steer the global input to the correct sub-controller. In [3, 14], a method called contraction has been suggested as a decomposition technique for signal transition graph (STG) specifications. Contraction preserves the global nature of the controller. It does not turn a large-grain controller into many smaller-grain controllers.
Reference: [6] <author> GOPALAKRISHNAN, G. C., KUDVA, P., BRUNVAND, E. L., AND AKELLA, V. </author> <title> Peephole optimization of asynchronous macromod-ule networks. </title> <booktitle> In Proceedings of the International Conference on Computer Design (ICCD) (1994), </booktitle> <pages> pp. 442-446. </pages>
Reference-contexts: A Verilog front-end is also available for ACK. One way to obtain distributed control circuit realizations is by employing macromodules [15]. However, most macromodule libraries contain only a limited number of macromodule types, and hence distributed control realizations based on macromodules are often inefficient <ref> [6] </ref>. A class of controllers called burst-mode controllers that are potentially more efficient than macromodules, and can be customized [4, 11, 17] have been proposed and widely used in a number of non-trivial designs. <p> To simplify things, we assume that no two bursts labeling transitions contained in two different STS graphs of the same fork/join involve the same wire name. Also, in order to generate legal burst-mode machines [11] from the partitions through burst-mode reduction <ref> [6] </ref>, the original SFJ graphs must obey the following restrictions, in that they are (1) initially quiescent, and attain quiescence infinitely often (a quiescent state is one where no output must be produced be fore consuming at least one input); (2) deterministic, (3) delay insensitive, and (4) obey the subset property <p> At the end of partitioning, the goal is to generate sequential machines where each transition is annotated with input and output bursts. It has been shown <ref> [6] </ref> that such a partitioned machine P can be converted into a burst-mode machine C that has, as its interface traces, the set of traces generated by P when operated in the fundamental mode (P is allowed to attain quiescence after each set of inputs to it). <p> These, then, are internal signal transitions that get sent to the right partition at the right time. Synthesize Final Circuits Each of the controller descriptions can now be synthesized into asynchronous burst-mode circuits following the procedure described in <ref> [6] </ref>. In order to obtain a burst mode controller specification from a two-phase controller specification, we need to know the initial input signal values for each of the controllers. The initial values of all external input signals are specified by the user.
Reference: [7] <author> KESSELS, J., VAN BERKEL, K., BURGESS, R., RONCKEN, M., AND SCHALIJ, F. </author> <title> An error decoder for the compact disc player as an example of VLSI programming. </title> <type> Tech. rep., </type> <institution> Philips Research Laboratories, Eindhoven, </institution> <address> The Netherlands, </address> <year> 1993. </year>
Reference-contexts: Partitioning also often significantly decreases the number of literals in the synthesized design and increases the overall controller performance compared to that of a centralized implementation. In Table 1 we show the partitioning results for a CD Player Error Detector from <ref> [7] </ref>, a barcode reader from the High Level Synthesis Design benchmarks [12] adapted to asynchronous operation, a loop example, a factorial computation unit, and an iterative implementation of the GCD algorithm.
Reference: [8] <author> KUDVA, P. N. </author> <title> High Level Synthesis of Asynchronous Circuits Targeting Finite State Machines. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, University of Utah, </institution> <address> Salt Lake City, UT 84112, </address> <year> 1995. </year>
Reference-contexts: For the algorithm to generate input translators, we assume that any input signal that resolves a choice (appears in the burst labeling the transition immediately following a choice place) occurs in no other partition than the partition that contains the choice. A solution that relaxes this assumption exist <ref> [8] </ref> and proof is in progress. The steps in obtaining input translators are as follows: (1) Create an input set for the input translator. This input set consists of the shared input signal of interest and all the choice signals.
Reference: [9] <author> LIN, B., AND VERCAUTEREN, S. </author> <title> Synthesis of concurrent system interface modules with automatic protocol conversion generation. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. </booktitle> <year> 1994), </year> <pages> pp. 101-108. </pages>
Reference-contexts: All the internal signals that are introduced during partitioning can be initialized to any value due to use of two phase protocol (we initialize them to 0). The resulting description can be synthesized into a burst-mode machine which can then be synthesized using (e.g.) 3D tool [17] or ASSASSIN <ref> [9] </ref>. Results and Conclusions We have conducted comparisons between centralized and partitioned controllers on a large number of examples, some of which are shown in Table 1. Apart from making it possible to synthesize larger designs, partitioning can also decrease synthesis time by several orders of magnitude.
Reference: [10] <author> MARTIN, A. J. </author> <title> Programming in VLSI: From communicating processes to delay-insensitive circuits. </title> <booktitle> In UT Year of Programming Institute on Concurrent Programming (1989), </booktitle> <editor> e. C.A.R. Hoare, Ed., </editor> <publisher> Addison-Wesley. </publisher>
Reference-contexts: For example, suppose an input signal is shared between a collection of partitions. When the environment generates a change on this signal, to which of these partitions must the change be sent to? We provide a method to address this issue. Related Work In <ref> [10] </ref>, a technique called process decomposition is proposed. Process decomposition does not involve signal-sharing between incompletely specified machines. Signal-sharing is addressed in macromodule based design systems [1, 2] by using additional macromodules such as Toggles [15] and Decision-waits [5] to steer the global input to the correct sub-controller.
Reference: [11] <author> NOWICK, S. M., AND DILL, D. L. </author> <title> Synthesis of asynchronous state machines using a local clock. </title> <booktitle> In Proc. International Conf. Computer Design (ICCD) (Oct. 1991), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 192-197. </pages>
Reference-contexts: However, most macromodule libraries contain only a limited number of macromodule types, and hence distributed control realizations based on macromodules are often inefficient [6]. A class of controllers called burst-mode controllers that are potentially more efficient than macromodules, and can be customized <ref> [4, 11, 17] </ref> have been proposed and widely used in a number of non-trivial designs. However, burst-mode synthesis procedures cannot handle designs beyond a certain input/output (I/O) size, due to the complexity of many of the global optimizations used. <p> Transitions in T f and T j are labeled by *. To simplify things, we assume that no two bursts labeling transitions contained in two different STS graphs of the same fork/join involve the same wire name. Also, in order to generate legal burst-mode machines <ref> [11] </ref> from the partitions through burst-mode reduction [6], the original SFJ graphs must obey the following restrictions, in that they are (1) initially quiescent, and attain quiescence infinitely often (a quiescent state is one where no output must be produced be fore consuming at least one input); (2) deterministic, (3) delay <p> the original SFJ graphs must obey the following restrictions, in that they are (1) initially quiescent, and attain quiescence infinitely often (a quiescent state is one where no output must be produced be fore consuming at least one input); (2) deterministic, (3) delay insensitive, and (4) obey the subset property <ref> [11] </ref>. At the end of partitioning, the goal is to generate sequential machines where each transition is annotated with input and output bursts.
Reference: [12] <author> PANDA, P. R., AND DUTT, N. </author> <title> 1995 High level synthesis design repository. </title> <type> Tech. Rep. 95-04, </type> <institution> University of California, Irvine, </institution> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: In Table 1 we show the partitioning results for a CD Player Error Detector from [7], a barcode reader from the High Level Synthesis Design benchmarks <ref> [12] </ref> adapted to asynchronous operation, a loop example, a factorial computation unit, and an iterative implementation of the GCD algorithm. For the CD Player Error Detector and the Barcode Reader the synthesis of the centralized controllers did not complete due to the complexity of the synthesis task.
Reference: [13] <author> PETERSON, J. L. </author> <title> Petri Net Theory and The Modeling Of Systems. </title> <publisher> Prentice-Hall, </publisher> <year> 1981. </year>
Reference-contexts: Note that some places in the Petri-net in Figure 1 have been omitted due to paucity of space. Partitioning Algorithm Centralized control graphs which form the input to the partitioning phase of ACK are state machines <ref> [13] </ref> with fork/joins (SFJ), that is, a single threaded graph with fork/join concurrency.
Reference: [14] <author> PURI, R., AND GU, J. </author> <title> A modular partitioning approach for asynchronous circuit synthesis. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conference (June 1994), </booktitle> <pages> pp. 63-69. </pages>
Reference-contexts: Process decomposition does not involve signal-sharing between incompletely specified machines. Signal-sharing is addressed in macromodule based design systems [1, 2] by using additional macromodules such as Toggles [15] and Decision-waits [5] to steer the global input to the correct sub-controller. In <ref> [3, 14] </ref>, a method called contraction has been suggested as a decomposition technique for signal transition graph (STG) specifications. Contraction preserves the global nature of the controller. It does not turn a large-grain controller into many smaller-grain controllers.
Reference: [15] <author> SUTHERLAND, I. Micropipelines. </author> <note> Communications of the ACM (June 1989). The 1988 ACM Turing Award Lecture. </note>
Reference-contexts: A Verilog front-end is also available for ACK. One way to obtain distributed control circuit realizations is by employing macromodules <ref> [15] </ref>. However, most macromodule libraries contain only a limited number of macromodule types, and hence distributed control realizations based on macromodules are often inefficient [6]. <p> Related Work In [10], a technique called process decomposition is proposed. Process decomposition does not involve signal-sharing between incompletely specified machines. Signal-sharing is addressed in macromodule based design systems [1, 2] by using additional macromodules such as Toggles <ref> [15] </ref> and Decision-waits [5] to steer the global input to the correct sub-controller. In [3, 14], a method called contraction has been suggested as a decomposition technique for signal transition graph (STG) specifications. Contraction preserves the global nature of the controller. <p> Overview of ACK A design entered in ACK is a Petri-net description organized as a collection of sequential processes communicating through CSP-style channels. Each transition of the Petri-net (except fork and join) is annotated with an action, which can be a two-phase <ref> [15] </ref> signal transition on an input or output wire (input transition names are underlined), an assignment statement, a Boolean expression (used for choices), or a CSP-style communication primitive. Fork-join concurrency is allowed within sequential threads. The fork and join transitions are labeled by an * action denoting a no-op.
Reference: [16] <author> VAN BERKEL, C., NIESSEN, C., M.REM, AND R.SAEIJS. </author> <title> Vlsi programming and silicon compilation: a novel approach from phillips research. </title> <booktitle> In Proceedings of IEEE International Conference on Computer Design (ICCD) (1988). </booktitle>
Reference-contexts: The underlying control-graph is then obtained by refining each high-level Petri-net action into two-phase handshake actions, using standard approaches <ref> [1, 16] </ref>. The end result is one centralized control graph per sequential process.
Reference: [17] <author> YUN, K. Y. </author> <title> Synthesis of asynchronous controllers for heterogeneous systems. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: However, most macromodule libraries contain only a limited number of macromodule types, and hence distributed control realizations based on macromodules are often inefficient [6]. A class of controllers called burst-mode controllers that are potentially more efficient than macromodules, and can be customized <ref> [4, 11, 17] </ref> have been proposed and widely used in a number of non-trivial designs. However, burst-mode synthesis procedures cannot handle designs beyond a certain input/output (I/O) size, due to the complexity of many of the global optimizations used. <p> All the internal signals that are introduced during partitioning can be initialized to any value due to use of two phase protocol (we initialize them to 0). The resulting description can be synthesized into a burst-mode machine which can then be synthesized using (e.g.) 3D tool <ref> [17] </ref> or ASSASSIN [9]. Results and Conclusions We have conducted comparisons between centralized and partitioned controllers on a large number of examples, some of which are shown in Table 1. Apart from making it possible to synthesize larger designs, partitioning can also decrease synthesis time by several orders of magnitude.
References-found: 17

