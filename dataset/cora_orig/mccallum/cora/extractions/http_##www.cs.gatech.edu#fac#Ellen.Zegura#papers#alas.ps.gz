URL: http://www.cs.gatech.edu/fac/Ellen.Zegura/papers/alas.ps.gz
Refering-URL: http://www.cs.gatech.edu/fac/Ellen.Zegura/anycast.html
Root-URL: 
Email: fbobby,ammar,ewz,viren,feig@cc.gatech.edu  
Title: Application-Layer Anycasting  
Author: Samrat Bhattacharjee, Mostafa H. Ammar, Ellen W. Zegura Viren Shah, Zongming Fei 
Address: Atlanta, GA 30332  
Affiliation: Networking and Telecommunications Group, College of Computing, Georgia Institute of Technology,  
Abstract: The anycasting communication paradigm is designed to support server replication by allowing applications to easily select and communicate with the "best" server, according to some performance or policy criteria, in a group of content-equivalent servers. We examine the definition and support of the anycasting paradigm at the application layer, providing a service that maps anycast domain names into one or more IP addresses using anycast resolvers. In addition to being independent from network-layer support, our definition includes the notion of filters, functions that are applied to groups of addresses to affect the selection process. We consider both metric-based filters (e.g., server response time) and policy-based filters. An expanded version of this work can be found as a technical report. 1 . 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. B. Danzig, D. Delucia, and K. Obraczka, </author> <title> "Mas sively replicating services in wide-area internetworks." </title> <type> Tech. Rep., </type> <institution> University of Southern California, </institution> <month> Jan-uary </month> <year> 1994. </year>
Reference-contexts: This is often referred to as the scalability of the service. There have been several approaches proposed for improving the scalability of a networked service. These include server replication <ref> [1] </ref>, caching [2, 3], batching of requests at the server [4] and multicasting of server responses over the network [5, 6]. We investigate the anycasting communication paradigm which has been proposed [7] to support server replication.
Reference: [2] <author> P. Danzig, R. Hall, and M. Schwartz, </author> <title> "A case for caching file objects inside internetworks," </title> <booktitle> in Proceedings of SIGCOMM 93, </booktitle> <pages> pp. 239-248, </pages> <year> 1993. </year>
Reference-contexts: This is often referred to as the scalability of the service. There have been several approaches proposed for improving the scalability of a networked service. These include server replication [1], caching <ref> [2, 3] </ref>, batching of requests at the server [4] and multicasting of server responses over the network [5, 6]. We investigate the anycasting communication paradigm which has been proposed [7] to support server replication.
Reference: [3] <author> J. Pitkow and M. Recker, </author> <title> "A simple yet robust caching algorithm based on dynamic access patterns," </title> <booktitle> in Proceedings of 2nd WWW conference, </booktitle> <year> 1994. </year>
Reference-contexts: This is often referred to as the scalability of the service. There have been several approaches proposed for improving the scalability of a networked service. These include server replication [1], caching <ref> [2, 3] </ref>, batching of requests at the server [4] and multicasting of server responses over the network [5, 6]. We investigate the anycasting communication paradigm which has been proposed [7] to support server replication.
Reference: [4] <author> A. Dan, D. Sitaram, and P. Shahabuddin, </author> <title> "Schedul ing policies for an on-demand video server with batch-ing," </title> <booktitle> in Proceedings of ACM Multimedia 94, </booktitle> <pages> pp. 15-23, </pages> <year> 1994. </year>
Reference-contexts: This is often referred to as the scalability of the service. There have been several approaches proposed for improving the scalability of a networked service. These include server replication [1], caching [2, 3], batching of requests at the server <ref> [4] </ref> and multicasting of server responses over the network [5, 6]. We investigate the anycasting communication paradigm which has been proposed [7] to support server replication.
Reference: [5] <author> D. Gifford, </author> <title> "Polychannel systems for mass digi tal communication," </title> <journal> Communications of the ACM, </journal> <volume> vol. 33, </volume> <pages> pp. 1847-1851, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: This is often referred to as the scalability of the service. There have been several approaches proposed for improving the scalability of a networked service. These include server replication [1], caching [2, 3], batching of requests at the server [4] and multicasting of server responses over the network <ref> [5, 6] </ref>. We investigate the anycasting communication paradigm which has been proposed [7] to support server replication.
Reference: [6] <author> R. Clark and M. Ammar, </author> <title> "Providing scalable web ser vice using multicast delivery," </title> <booktitle> in Proceedings of 2nd IEEE Workshop on Services in Distributed and Net-worked Environments, </booktitle> <pages> pp. 19-26, </pages> <year> 1995. </year>
Reference-contexts: This is often referred to as the scalability of the service. There have been several approaches proposed for improving the scalability of a networked service. These include server replication [1], caching [2, 3], batching of requests at the server [4] and multicasting of server responses over the network <ref> [5, 6] </ref>. We investigate the anycasting communication paradigm which has been proposed [7] to support server replication.
Reference: [7] <author> C. Partridge, T. Mendez, and W. Milliken, </author> <title> "Host any casting service," </title> <type> RFC 1546, </type> <month> November </month> <year> 1993. </year>
Reference-contexts: There have been several approaches proposed for improving the scalability of a networked service. These include server replication [1], caching [2, 3], batching of requests at the server [4] and multicasting of server responses over the network [5, 6]. We investigate the anycasting communication paradigm which has been proposed <ref> [7] </ref> to support server replication. As originally defined [7], anycasting provides: "a stateless best effort delivery of an anycast datagram to at least one host, and prefer-1 ftp://ftp.cc.gatech.edu/pub/coc/tech reports/1996/GIT-CC-96-25.ps.Z ably only one host, which serves the anycast address." In this definition, an IP anycast address is used to define a group <p> These include server replication [1], caching [2, 3], batching of requests at the server [4] and multicasting of server responses over the network [5, 6]. We investigate the anycasting communication paradigm which has been proposed <ref> [7] </ref> to support server replication. As originally defined [7], anycasting provides: "a stateless best effort delivery of an anycast datagram to at least one host, and prefer-1 ftp://ftp.cc.gatech.edu/pub/coc/tech reports/1996/GIT-CC-96-25.ps.Z ably only one host, which serves the anycast address." In this definition, an IP anycast address is used to define a group of servers that provide the same service. <p> In our work we adopt a more general view of any-casting as a communication paradigm that is analogous to the unicast, broadcast, multicast communication paradigms. In particular, we differentiate between the anycasting service definition and the protocol layer providing the anycasting service 2 . The original anycasting proposal <ref> [7] </ref> can, therefore, be viewed as providing the anycasting service definition and examining the provision of this service within the IP layer. In this paper we examine the definition and support of the anycasting paradigm at the application layer. <p> This adds a new dimension to the server-finding problem: it is now important to find the "best" server from among many content-equivalent servers. Two notable studies in this area are: 1) the original work by Partridge, Mendez and Milliken <ref> [7] </ref> proposing the idea of anycasting and discussing its network-layer support and 2) a recent study by Guyton and Schwartz [18] which addresses the problem of locating the nearest server. The latter work also presents a classification of "best"-server location schemes. <p> We have experimented with this technique in our implementation [27]. 2. Server Push: It may be advantageous in some cir cumstances to have the replicated servers send (or push) the relevant local performance information onto the anycast servers. The primary advantage 7 The original anycasting proposal <ref> [7] </ref> was primarily concerned with a server distance (hop count) metric; measuring server distance has also been studied extensively by Guyton and Schwartz [18]. FIGURE 4: Performance of Server Push Algorithms Update Max.
Reference: [8] <author> K. Birman and T. Joseph, </author> <title> "Reliable communication in the presence of failures," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 5, </volume> <pages> pp. 47-76, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: The multicast paradigm can be supported using multi-cast routing at the network layer, or it can be supported above a unicast-only network or transport layer by using multiple uni-casts. This latter approach was how many multicast problems were addressed in early system designs (e.g., the original ISIS distributed system <ref> [8] </ref>). There is clearly a distinction between multicast as a communication paradigm and how this paradigm is supported. FIGURE 1: Anycast Name Resolution Query/Response Cycle and forward packets properly.
Reference: [9] <author> R. Hinden and S. Deering, </author> <title> "IP version 6 addressing architecture," </title> <type> RFC 1884, </type> <month> December </month> <year> 1995. </year>
Reference-contexts: For IPv4, several ways to allocate anycast addresses have been suggested [7].These include designating some existing addresses as anycast (e.g., within Class C) or creating a separate class of addresses. IPv6 proposals <ref> [9] </ref> do include a specific address space allocated to anycasting. * The use of anycast addresses requires router sup port. Routers must recognize anycast addresses 2 For example multicasting as a communication paradigm represents a desire to send the same message to a group of receivers.
Reference: [10] <author> J. Bernabeu, M. Ammar, and M. Ahamad, </author> <title> "Optimiz ing a generalized polling protocol for resource finding over a multiple access channel," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> vol. 27, </volume> <pages> pp. 1429-1445, </pages> <year> 1995. </year>
Reference-contexts: Techniques were proposed and investigated, including: 1) the use of multicast or broadcast communication to "touch" all the locations where the resource may reside in an attempt to find it (e.g., <ref> [10, 11] </ref>) , 2) the use of various name server architectures in order to lookup the location of the resource (e.g., [12, 13, 14]), 3) the use of caching of a resource's location (not content) at sites where the resource is frequently accessed [15].
Reference: [11] <author> D. Oppen and Y. Dalal, </author> <title> "The Clearinghouse: A de centralized agent for locating named objects in a distributed environment," </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> vol. 3, </volume> <pages> pp. 230-253, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: Techniques were proposed and investigated, including: 1) the use of multicast or broadcast communication to "touch" all the locations where the resource may reside in an attempt to find it (e.g., <ref> [10, 11] </ref>) , 2) the use of various name server architectures in order to lookup the location of the resource (e.g., [12, 13, 14]), 3) the use of caching of a resource's location (not content) at sites where the resource is frequently accessed [15].
Reference: [12] <author> P. Mockapetris, </author> <title> "Domain names concepts and facil ities," </title> <type> RFC 1034, </type> <month> November </month> <year> 1987. </year>
Reference-contexts: proposed and investigated, including: 1) the use of multicast or broadcast communication to "touch" all the locations where the resource may reside in an attempt to find it (e.g., [10, 11]) , 2) the use of various name server architectures in order to lookup the location of the resource (e.g., <ref> [12, 13, 14] </ref>), 3) the use of caching of a resource's location (not content) at sites where the resource is frequently accessed [15]. The case of a mobile resource was addressed through interesting techniques such as the use of forwarding addresses [16]. <p> FIGURE 2: Anycast Resolver Architecture existing Internet infrastructure. We prefer to view the anycast resolver as logically distinct from other name servers like DNS <ref> [12] </ref>, allowing us to consider issues related to anycast resolver design separately from other name service issues. In reality, the functions of an anycast resolver could be integrated with the operation of DNS. We propose that an anycast domain name (ADN) be of the form &lt;Service&gt;%&lt;Domain Name&gt;. <p> Determining the address of the authoritative anycast resolver for a particular domain can be done using the same technique used for DNS to determine an authoritative name server <ref> [12] </ref>. This hierarchical naming allows users to define their own anycast groups and maintain such groups in local anycast resolvers. Propagating the ADN of a locally-defined anycast group (including the name of the domain in which its authoritative resolver resides) allows others to make use of this anycast group.
Reference: [13] <author> I. Gopal and A. Segall, </author> <title> "Directories for networks with casually connected users," </title> <booktitle> in Proceedings of INFO-COM 88, </booktitle> <pages> pp. 1060-1064, </pages> <year> 1988. </year>
Reference-contexts: proposed and investigated, including: 1) the use of multicast or broadcast communication to "touch" all the locations where the resource may reside in an attempt to find it (e.g., [10, 11]) , 2) the use of various name server architectures in order to lookup the location of the resource (e.g., <ref> [12, 13, 14] </ref>), 3) the use of caching of a resource's location (not content) at sites where the resource is frequently accessed [15]. The case of a mobile resource was addressed through interesting techniques such as the use of forwarding addresses [16].
Reference: [14] <author> A. Birrel, R. Levin, and M. Schroeder, "Grapevine: </author> <title> An exercise in distributed computing," </title> <journal> Communications of the ACM, </journal> <volume> vol. 25, </volume> <pages> pp. 260-274, </pages> <month> April </month> <year> 1982. </year>
Reference-contexts: proposed and investigated, including: 1) the use of multicast or broadcast communication to "touch" all the locations where the resource may reside in an attempt to find it (e.g., [10, 11]) , 2) the use of various name server architectures in order to lookup the location of the resource (e.g., <ref> [12, 13, 14] </ref>), 3) the use of caching of a resource's location (not content) at sites where the resource is frequently accessed [15]. The case of a mobile resource was addressed through interesting techniques such as the use of forwarding addresses [16].
Reference: [15] <author> D. Terry, </author> <title> "Caching hints in distributed systems," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 13, </volume> <pages> pp. 48-54, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: in an attempt to find it (e.g., [10, 11]) , 2) the use of various name server architectures in order to lookup the location of the resource (e.g., [12, 13, 14]), 3) the use of caching of a resource's location (not content) at sites where the resource is frequently accessed <ref> [15] </ref>. The case of a mobile resource was addressed through interesting techniques such as the use of forwarding addresses [16].
Reference: [16] <author> R. Fowler, </author> <title> Decentralized Object Finding Using For warding Addresses. </title> <type> PhD thesis, </type> <institution> University of Wash-ington, </institution> <year> 1985. </year>
Reference-contexts: The case of a mobile resource was addressed through interesting techniques such as the use of forwarding addresses <ref> [16] </ref>. More recently, the Service Location Working Group of the IETF is considering the design of the Service Location Protocol which allows a user to specify a set of service attributes which can be bound to a server's network address in a dynamic fashion [17].
Reference: [17] <author> J. Veizades, E. Guttman, C. Perkins, and S. Kaplan, </author> <title> "Service location protocol," Internet Draft (work in progress) draft-ietf-srvloc-protocol-13.txt, </title> <month> June </month> <year> 1996. </year>
Reference-contexts: More recently, the Service Location Working Group of the IETF is considering the design of the Service Location Protocol which allows a user to specify a set of service attributes which can be bound to a server's network address in a dynamic fashion <ref> [17] </ref>. The Internet has experienced a dramatic growth in the use and provision of information services such as ftp, archie, gopher, and more recently the World Wide Web. This has resulted in heavy demands being placed on servers and the desire to replicate (or mirror) servers.
Reference: [18] <author> J. Guyton and M. Schwartz, </author> <title> "Locating nearby copies of replicated Internet servers," </title> <booktitle> in Proceedings of SIG-COMM 95, </booktitle> <pages> pp. 288-298, </pages> <year> 1995. </year>
Reference-contexts: Two notable studies in this area are: 1) the original work by Partridge, Mendez and Milliken [7] proposing the idea of anycasting and discussing its network-layer support and 2) a recent study by Guyton and Schwartz <ref> [18] </ref> which addresses the problem of locating the nearest server. The latter work also presents a classification of "best"-server location schemes. <p> The primary advantage 7 The original anycasting proposal [7] was primarily concerned with a server distance (hop count) metric; measuring server distance has also been studied extensively by Guyton and Schwartz <ref> [18] </ref>. FIGURE 4: Performance of Server Push Algorithms Update Max.
Reference: [19] <author> C. M. Bowman, P. Danzig, D. Hardy, U. Manber, M. Schwartz, and D. Wessels, "Harvest: </author> <title> A scalable, customizable discovery and access system," </title> <type> Tech. Rep. </type> <institution> CU-CS-732-94, University of Colorado Boulder, </institution> <year> 1995. </year>
Reference-contexts: The latter work also presents a classification of "best"-server location schemes. The work is related to earlier work on the Harvest system <ref> [19] </ref> which provides a set of tools for gathering information from various servers and efficiently indexing and searching through this information. To avoid the scalability problems inherent in prob ing for performance, we explore the idea of having the server "push" onto the network its own locally generated performance observations.
Reference: [20] <author> J. Gwertzman and M. Seltzer, </author> <title> "The case for geograph ical push caching," </title> <type> Tech. Rep. 34-94, </type> <institution> Harvard University, </institution> <year> 1994. </year>
Reference-contexts: To avoid the scalability problems inherent in prob ing for performance, we explore the idea of having the server "push" onto the network its own locally generated performance observations. This is related to the Push Caching idea <ref> [20] </ref> where servers are in charge of pushing the desired information onto remote caches and the server push mechanism [21] implemented in Netscape browsers. Finally, anycasting is related to the technique used to build scalable HTTP servers [22].
Reference: [21] <author> M. Humes, </author> <title> "Netscape's server push, client pull and CGI animation." </title> <address> http://www.emf.net/ mal/animate.html. </address>
Reference-contexts: This is related to the Push Caching idea [20] where servers are in charge of pushing the desired information onto remote caches and the server push mechanism <ref> [21] </ref> implemented in Netscape browsers. Finally, anycasting is related to the technique used to build scalable HTTP servers [22]. In such a scheme multiple servers are clustered and appear to the outside world as a single logical server.
Reference: [22] <author> E. D. Katz, M. Butler, and R. McGrath, </author> <title> "A scalable HTTP server: The NCSA prototype," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> vol. 27, </volume> <pages> pp. 155-164, </pages> <year> 1994. </year>
Reference-contexts: This is related to the Push Caching idea [20] where servers are in charge of pushing the desired information onto remote caches and the server push mechanism [21] implemented in Netscape browsers. Finally, anycasting is related to the technique used to build scalable HTTP servers <ref> [22] </ref>. In such a scheme multiple servers are clustered and appear to the outside world as a single logical server.
Reference: [23] <author> L. Lamport, </author> <title> "The implementation of reliable dis tributed multiprocess systems," </title> <journal> Computer Networks, </journal> <volume> vol. 2, </volume> <pages> pp. 95-114, </pages> <year> 1978. </year>
Reference-contexts: We allow a collection of multicast addresses to form an anycast group in order to support classes of quorum consensus applications <ref> [23, 24, 25, 26] </ref>. For these applications, it makes sense to define multicast groups made up of subsets of the set of all coordinators, assign each subset a multicast address and collect the multicast addresses into an anycast group.
Reference: [24] <author> D. Gifford, </author> <title> "Weighted voting for replicated data," </title> <booktitle> in Proceedings of 7th Symposium on Operating Systems, </booktitle> <pages> pp. 150-162, </pages> <publisher> ACM, </publisher> <year> 1979. </year>
Reference-contexts: We allow a collection of multicast addresses to form an anycast group in order to support classes of quorum consensus applications <ref> [23, 24, 25, 26] </ref>. For these applications, it makes sense to define multicast groups made up of subsets of the set of all coordinators, assign each subset a multicast address and collect the multicast addresses into an anycast group.
Reference: [25] <author> M. Ahamad and M. H. Ammar, </author> <title> "Performance charac terization of quorum-consensus algorithms for replicated data," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 15, </volume> <pages> pp. 492-496, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: We allow a collection of multicast addresses to form an anycast group in order to support classes of quorum consensus applications <ref> [23, 24, 25, 26] </ref>. For these applications, it makes sense to define multicast groups made up of subsets of the set of all coordinators, assign each subset a multicast address and collect the multicast addresses into an anycast group.
Reference: [26] <author> D. Barbara and H. Garcia-Molina, </author> <title> "Mutual exclusion in partitioned distributed systems," </title> <journal> Distributed Computing, </journal> <volume> vol. 1, </volume> <pages> pp. 119-132, </pages> <year> 1986. </year>
Reference-contexts: We allow a collection of multicast addresses to form an anycast group in order to support classes of quorum consensus applications <ref> [23, 24, 25, 26] </ref>. For these applications, it makes sense to define multicast groups made up of subsets of the set of all coordinators, assign each subset a multicast address and collect the multicast addresses into an anycast group.
Reference: [27] <author> S. Bhattacharjee, M. Ammar, E. Zegura, V. Shah, and Z. Fei, </author> <title> "Application level anycasting," </title> <type> Tech. Rep. 96-25, </type> <institution> College of Computing, Georgia Institute of Technology. </institution>
Reference-contexts: Further, the variation in a metric must occur on a time scale that is practical to track using measurement tools. Detailed experiments, results, and perfomance analysis are presented in the technical report <ref> [27] </ref>. 5.2 Metric Collection Techniques We now consider how to efficiently and accurately maintain databases of the metric values. We have identified four possible approaches to maintaining replicated server performance information in anycast servers' database: 1. <p> Each probing agent acts as a proxy for a set of clients. These probes need to be designed to mimic (as much as possible) the parts of the network and the server that the client request will "exercise". We have experimented with this technique in our implementation <ref> [27] </ref>. 2. Server Push: It may be advantageous in some cir cumstances to have the replicated servers send (or push) the relevant local performance information onto the anycast servers.
Reference: [28] <author> E. C. Rosen, </author> <title> "The updating protocol of ARPANET's new routing algorithm," </title> <journal> Computer Networks, </journal> <volume> no. 4, </volume> <pages> pp. 11-19, </pages> <year> 1980. </year>
Reference-contexts: Note that the task of updating link state in a distributed routing environment has precisely the same criteria. We have adopted the link state update algorithm used in the ARPANET <ref> [28] </ref> and experimented with the performance and overhead with a variety of parameters. The update algorithm is parameterized by a measurement interval I, a maximum threshold T and a reduction factor R. The algorithm maintains a current threshold C, initialized to T .
References-found: 28

