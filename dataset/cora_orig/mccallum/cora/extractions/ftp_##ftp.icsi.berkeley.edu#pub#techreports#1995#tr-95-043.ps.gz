URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1995/tr-95-043.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1995.html
Root-URL: http://www.icsi.berkeley.edu
Email: hunger@informatik.uni-rostock.de  bdaene@theoinf.tu-ilmenau.de  
Title: Performance Oriented Specification for Heterogenous Parallel Systems using Graphical Based Specifications  
Phone: (510) 643-9153 FAX (510) 643-7684  
Author: Herwig Unger Bernd Daene 
Address: I 1947 Center St. Suite 600 Berkeley, California 94704-1198  Rostock, Germany;  Ilmenau, Germany;  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  University of  Technical University of  
Pubnum: TR-TR-95-043  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> F. Breant: </author> <title> Rapid Prototyping From Petri Net on a loosly Coupled Parallel Architecture, </title> <booktitle> Applications on Transputers 3, S. </booktitle> <pages> 644-649, </pages> <address> IOS-Press, </address> <year> (1991) </year>
Reference-contexts: In general, the second group of methods generate a more efficiant code, but, in contrast to the first one, it does not apply to all Petri Nets. So in <ref> [1] </ref> an interesting approach can be found using P-Invariants in order to cover a net with state machines. <p> So another transformation is introduced in this report avoiding these problems, giving good possibilities for a good performance of the derived program and allowing an expanded use of the method from <ref> [1] </ref>.
Reference: [2] <author> B. Daene, H. Unger: </author> <title> Problem-oriented Design of Parallel Programs in: </title> <booktitle> Parallel Computing: Trends and Applications, p.597-600 (Proceedings of PARCO '93), G.R. </booktitle> <editor> Joubert, D. Trystram, F.J. Peters and D.J. Evans (Editors), </editor> <publisher> Elsevier Science B.V., </publisher> <year> (1994) </year>
Reference: [3] <author> W. Fengler, I. Phillipow: Entwurf industrieller Microcomputersysteme, Carl-Hanser-Verlag, Muenchen, </author> <year> (1991) </year>
Reference: [4] <author> M. Heiner: </author> <title> Petri Net Based Software Validation, </title> <booktitle> TR-92-022, ICSI, </booktitle> <year> (1992) </year>
Reference-contexts: In such a way a model is needed which can represent these aspects in one description. Petri Nets have proved to be an efficient tool to represent complicated systems, especially because time dependencies and stochastics are included (see <ref> [4] </ref>). Therefore the authors suggest a way basing on a (at least) three level Petri Net modell of the system architecture derived from the results described in [5].
Reference: [5] <author> R. Knorr: </author> <title> Spezifikation, </title> <type> Verifikation, </type> <institution> Leistungsbewertung und Implementierung von Kommunikationsprotokollen mit hierarchischen High-Level-Netzen, TU Ilmenau, Department of Computer Science, Dissertation, </institution> <year> (1994) </year>
Reference-contexts: Petri Nets have proved to be an efficient tool to represent complicated systems, especially because time dependencies and stochastics are included (see [4]). Therefore the authors suggest a way basing on a (at least) three level Petri Net modell of the system architecture derived from the results described in <ref> [5] </ref>. Another advantage should be that during the whole implementation all other problems can be solved in only one software unit based on the language of nets.
Reference: [6] <author> U. Lichtblau: Graphtransformationen zur Erkennung adaaehnlicher Kontrollstruk-turen, Dortmund, DFG-Forschungsbericht, </author> <year> (1980) </year>
Reference: [7] <author> W. Reisig: </author> <title> On a Class of Co-operating Sequential Processes, </title> <booktitle> 1st. European Conference on parallel and distributed processing, </booktitle> <address> Toulouse, </address> <year> (1979) </year>
Reference-contexts: While doing so Petri Nets as one kind of a graphical description language became more and more interesting for modelling parallel software solutions (see <ref> [7] </ref>) and their acceptance will be increasing. At first the needs of implementing Petri Net solutions will be considered by the following definitions.
Reference: [8] <author> W. Reisig, W. Brauer, G. Rozenberg: </author> <title> Petri nets: Applications and Relationships to other Models of Concurrency. In: </title> <publisher> LNCS 255. Springer Verlag, </publisher> <address> Berlin-Heidelberg-New York, </address> <year> (1987) </year>
Reference: [9] <author> G. Hipper, M. Klein, D. Tavangarian: </author> <title> Parallel Computing in Workstation Clusters using a Concurrent Network Architecture, </title> <address> ISSM94, Washington, D.C., </address> <year> (1994) </year>
Reference-contexts: The interfaces between the layers are transitions. In such a way the elements of the second layer contain a refinement and an additional connection of those ones from the first level and so on. As an example we consider the high performance workstation cluster suggested in <ref> [9] </ref>. In order to improve the performance of the ethernet connection a set of workstations is connected with a very efficient hardware construction (see figure 1, 2). When using a concurrent communication structure the transmission will be about two times faster for the two dimensional structure.
Reference: [10] <author> G.S. Thomas: </author> <title> Parallel Simulation of Petri Nets, </title> <type> Technical Report, </type> <institution> University of Wash-ington, </institution> <year> (1991) </year>
Reference-contexts: The first one so called direct type- means to implement one process for every transition (for instance <ref> [10] </ref> or [14]) is closely related to definition -3-. The second, indirect one is to cover ([7]) or to decompose a given Petri Net by state machines, and then to implement one process for every state machine (see definition -2-).
Reference: [11] <author> H. Unger: </author> <title> Moeglichkeiten zur Implementierung von Petri-Netz-Modellen auf Mehrprozessorsystemen, Dissertation A, </title> <institution> TU Ilmenau, </institution> <year> (1994) </year>
Reference-contexts: Examples for the inner structure of such functions can be seen from <ref> [11] </ref>. 5.2 Implementing the Transformed Net The task of implementing the transformed net desribed above comes along with some different requirements than implementing systems of state machines. Implementing 0 means to find out interpretations for special elements of the given Petri Net.
Reference: [12] <author> H. Unger, K. Ben Achour: </author> <title> A method for the design of parallel programs for a multiprocessor system, </title> <booktitle> In: LCNS 634. </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin-Heidelberg-New York, </address> <year> (1992) </year>
Reference-contexts: Using a special transformation one state machine for each token circulating in a given net will be generated with a number of additional places, forming a system of state machines which simulates the original net and can be implemented very easy (for details see <ref> [12] </ref>). The main disadvantage of known approaches is the transformation of a subset of places into global data objects in a shared memory. These data objects normally contain integer values corresponding to the number of tokens in the places.
Reference: [13] <author> S. White, A. Alund, </author> <title> V.S. Sunderam: Performance of the NAS Parallel Benchmarks on PVM based Networks, </title> <publisher> NASA, </publisher> <address> RNR 94-008, </address> <year> (1994) </year>
Reference-contexts: Accessing the data objects by more than one process causes a lot of management problems and aggravates real parallel work of these processes. In the end a lot of technical systems (like transputer systems or PVM implementations 1 , see <ref> [13] </ref>) require a client server relation instead of a shared memory for solving this problem and so the number of parallel working processes is increased.
Reference: [14] <author> J. Winkowsky: </author> <title> A Distributed Implementation of Petri Nets, </title> <institution> ICS PAS-Report518, Polish Academy of Science, Warschau, </institution> <year> (1983) </year> <month> 23 </month>
Reference-contexts: The first one so called direct type- means to implement one process for every transition (for instance [10] or <ref> [14] </ref>) is closely related to definition -3-. The second, indirect one is to cover ([7]) or to decompose a given Petri Net by state machines, and then to implement one process for every state machine (see definition -2-).
References-found: 14

