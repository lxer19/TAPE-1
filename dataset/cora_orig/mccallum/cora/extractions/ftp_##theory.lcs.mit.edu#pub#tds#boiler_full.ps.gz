URL: ftp://theory.lcs.mit.edu/pub/tds/boiler_full.ps.gz
Refering-URL: http://theory.lcs.mit.edu/tds/boiler.html
Root-URL: 
Email: leeb@auto.tuwien.ac.at  lynch@lcs.mit.edu  
Title: Proving Safety Properties of the Steam Boiler Controller Proving Safety Properties of the Steam Boiler
Author: G. Leeb, N. Lynch Gunter Leeb Nancy Lynch 
Address: Treitlstr. 3, A-1040 Vienna, Austria  Technology Square 545, Cambridge, MA  
Affiliation: Vienna University of Technology Department for Automation  Massachusetts Institute for Technology Laboratory for Computer Science  
Note: Page 1 of 37  
Abstract: In this paper we model a hybrid system consisting of a continuous steam boiler and a discrete controller. Our model uses the Lynch-Vaandrager Timed Automata model to show formally that certain safety requirements can be guaranteed under the described assumptions and failure model. We prove incrementally that a simple controller model and a controller model tolerating sensor faults preserve the required safety conditions. The specification of the steam boiler and the failure model follow the specification problem for participants of the Dagstuhl Meeting Methods for Semantics and Specification. 
Abstract-found: 1
Intro-found: 1
Reference: [AS96] <author> Abrial, J.-R.: </author> <title> A B-solution for the steam-boiler problem. Contains: Steam-boiler control specification problem for the meeting Methods for Semantics and Specification, </title> <note> Dagstuhl; See chapter AS in this LNCS volume. </note>
Reference-contexts: Basically, it consists of a discrete control loop where several components may fail. We now give a condensed and informal version of the Steam Boiler Controller specification. The original specification can be found in <ref> [AS96] </ref>. Since even the detailed specification is informal and ambiguous, the following summarizes our interpretation of the described problem. For easier understanding of the following discussion, we include some abbreviations for variables used in the analysis: The physical plant consists of a steam boiler. <p> A formal model describing the controller system and its interface at an abstraction level 3. Formal statements of the properties that the system must satisfy * Most variable names are according to the original specification in <ref> [AS96] </ref>. Capital letters denote constants of the problem. Proving Safety Properties of the Steam Boiler Controller G. Leeb, N. <p> Proving Safety Properties of the Steam Boiler Controller G. Leeb, N. Lynch Page 4 of 37 3 Further Considerations for Our Model For our model, we need to know some more information about the physical behavior. Some of the following assumptions follow the informal specification of <ref> [AS96] </ref> or are intended to resolve some ambiguity. As suggested by [AS96], to simplify reasoning about the model, we ignore second order effects like the volume expansion of water when heated. <p> Leeb, N. Lynch Page 4 of 37 3 Further Considerations for Our Model For our model, we need to know some more information about the physical behavior. Some of the following assumptions follow the informal specification of <ref> [AS96] </ref> or are intended to resolve some ambiguity. As suggested by [AS96], to simplify reasoning about the model, we ignore second order effects like the volume expansion of water when heated. This reasoning implies that a unit of water measured as steam can be replaced by pumping in exactly one unit of water. <p> The delay between reading the sensors and consequently changing the active pumps, denoted with S, is caused mainly by the slow reaction of the physical pumps. As a minor difference to the specification in <ref> [AS96] </ref>, we assume the same delay for the activation and the deactivation of pumps. <p> Even in the case that both sensors break, the controller still may allow the operation of the boiler and guarantee safety. In this respect, our controller definition is better than the one suggested in <ref> [AS96] </ref>, since he suggests to shut down the boiler system whenever both steam rate and water level sensors fail. The various operational modes (normal, degraded and rescue) as specified in [AS96] can be inferred from the variables sr_ok, wl_ok and the difference between pumps and px. <p> In this respect, our controller definition is better than the one suggested in <ref> [AS96] </ref>, since he suggests to shut down the boiler system whenever both steam rate and water level sensors fail. The various operational modes (normal, degraded and rescue) as specified in [AS96] can be inferred from the variables sr_ok, wl_ok and the difference between pumps and px.
Reference: [Arc96] <author> Archer, M.; Heitmeyer, C.: </author> <title> Mechanical Verification of Timed Automata: A Case Study, </title> <note> To appear in the proceedings of RTAS 96, </note> <year> 1996 </year>
Reference-contexts: Ongoing research in our group shows that the timed-automata method provides high potential for automating the generation of the proofs [Sha93], <ref> [Arc96] </ref>. Acknowledgments We thank Anya Pogosyants and Roberto Segala for several useful comments as well as Angelika Leeb and Dave Evans for comments and proofreading.
Reference: [Cle93] <author> Cleaveland, R.; Parrow, J.; Steffen, B.: </author> <title> The concurrency workbench: A semantics-based tool for verification of concurrent systems. </title> <journal> ACM Trans. on Prog. Lang. and Sys., </journal> <volume> 15(1) </volume> <pages> 36-72, </pages> <month> Jan. </month> <year> 1993 </year>
Reference: [Hei93] <author> Heitmeyer, C.; Jeffords, R.; Labaw, B.: </author> <title> A benchmark for comparing different approaches for specifying and verifying real-time systems. </title> <booktitle> In Proc., 10th Intern Workshop on Real-Time Operating Systems and Software, </booktitle> <month> May, </month> <year> 1993 </year>
Reference-contexts: For the purpose of comparison, some problems have been defined or borrowed from real-life applications. One such benchmark problem is the Steam Boiler Controller problem discussed in this paper. Another representative of this kind of problem is the Generalized Railroad Crossing (GRC) <ref> [Hei93] </ref>. Various approaches have been applied to the latter, e.g., [Cle93,Jah86,Sha93,Hoa93].
Reference: [Hei94] <author> Heitmeyer, C.; Lynch, N.: </author> <title> The Generalized Railroad Crossing: A Case Study in Formal Verification of Real-Time Systems. </title> <booktitle> In Proceedings of the 15th IEEE Real-Time Systems Symposium, </booktitle> <address> San Juan, Puerto Rico, </address> <publisher> IEEE Computer Society Press, </publisher> <pages> pages 120 -131, </pages> <month> December </month> <year> 1994 </year>
Reference-contexts: Another representative of this kind of problem is the Generalized Railroad Crossing (GRC) [Hei93]. Various approaches have been applied to the latter, e.g., [Cle93,Jah86,Sha93,Hoa93]. Many steps of the approach described here are similar to the steps described in <ref> [Hei94] </ref>. steam rate (v) water level (q) number of pumps (pr_new) or emergency stop (stop) Controller Pumps (pr) M M Steam Boiler W active pumps (pr) boiler. <p> The system requirements specification describes all acceptable system implementations <ref> [Hei94] </ref>. It has three parts: 1. A formal model describing the environment (e.g., the steam boiler) and its interface 2. A formal model describing the controller system and its interface at an abstraction level 3. <p> Constructing the proofs, though not difficult, requires significant work. The hardest parts were getting the details of the models right and finding the right invariants. Unfortunately, this seems to be an art rather than an automatic procedure. Nevertheless, our experience in this paper and others (e.g., <ref> [Hei94] </ref>) shows that this art is easily learnable even for application engineers. The techniques are very systematic and understandable. The description allows for much flexibility and is very powerful in describing the possible progression of a system. The actual proofs of the invariants were tedious but routine work.
Reference: [Hoa93] <author> Hoare, C.: </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1985 </year>
Reference: [Jah86] <author> Jahanian, F.; Mok, A.: </author> <title> Safety analysis of timing properties in real-time syste ms. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> SE-12(9), </volume> <month> Sep. </month> <year> 1986 </year>
Reference: [Lyn91] <author> Lynch, N.; Vaandrager, F.: </author> <title> Forward and backward simulations for timing-based systems. </title> <booktitle> In Proceedings for REX Workshop: Real-Time: Theory in Practice, vol. 600 of Lecture Notes in Computer Science, p. </booktitle> <pages> 397-446, </pages> <address> Mook, Netherlands, </address> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1991 </year>
Reference-contexts: Leeb, N. Lynch Page 3 of 37 The formal method we used to specify the steam boiler problem and to develop and verify a solution represents both the controller and the system environment as Timed Automata, according to the definition of Lynch and Vaandrager <ref> [Lyn91] </ref>. A Timed Automaton is a very general automaton, i.e., a labeled transition system. It is not finitestate: for example, the state can contain real-valued information, such as the current time or the current steam rate. <p> To prevent the sensor action from happening multiple times, it disables itself by setting do_sensor = false. 4.2 Checking the Model As described formally in Appendix A (the complete definition can be found in <ref> [Lyn91] </ref>), each Timed Automaton has to follow five axioms. We have to show that the Boiler Model satisfies these axioms. Overall, these axioms are used to define the concept of time in Timed Automata.
Reference: [Lyn94] <author> Lynch, N.: </author> <title> Simulation Techniques for Proving Properties of Real-time Systems, </title> <booktitle> In REX Workshop 93, Lecture Notes in Computer Science, Mook, </booktitle> <address> the Netherlands, </address> <publisher> Springer Verlag, </publisher> <year> 1994 </year>
Reference: [Soe93] <author> Soegaard-Anderson, J.; Garland, S.; Guttag, J.; Lynch, N.; Pogosyants, A.: </author> <title> Computer-assisted simulation proofs, In Costas Courcoubetis, Computer-Aided Verification: 5th International Proving Safety Properties of the Steam Boiler Controller G. </title> <editor> Leeb, N. </editor> <booktitle> Lynch Page 34 of 37 Conference, (CAV'93 Elounda, Greece, June/July 1993, Lecture Notes in Computer Science 697, p. </booktitle> <pages> 305-319, </pages> <publisher> Springer-Verlag, </publisher> <year> 1993 </year>
Reference-contexts: Moreover, the characteristics of these techniques make them amenable for mechanical generation and verification of proofs. Related to this, we are currently considering the use of automatic provers such as Larch <ref> [Soe93] </ref> or PVS [Sha93] with the described techniques. The only major disadvantage we encountered while working with Timed Automata and the Simulation Mapping technique is that we could not gain any information or any measurement towards the optimality of parameters of a solution.
Reference: [Seg94] <author> Segala, R.; Lynch, N.: </author> <title> Probabilistic Simulations for Probabilistic Processes. </title> <editor> In J. Parrow, Editor, </editor> <booktitle> Proceedings of CONCUR 94, Lecture Notes in Computer Science, </booktitle> <volume> volume 836, </volume> <pages> pages 481-496, </pages> <institution> Uppsala, Sweden, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: Perfect fault detection and identification are necessary for our model but will not be available in reality. In this aspect our model might need improvement if it is necessary to study such general cases. For example, the techniques developed for probabilistic Timed Automata <ref> [Seg94] </ref> seem to be appropriate for a problem requiring the analysis of such probabilistic properties. Probabilistic Timed Automata would allow one to assign probabilities to certain actions, e.g., for a successful error detection, and to prove the probability of a certain system behavior.
Reference: [Sha93] <author> Shankar, N.: </author> <title> Verification of real-time systems using PVS. </title> <booktitle> in Proc. Computer Aided Verification (CAV93), </booktitle> <pages> pages 280-291. </pages> <publisher> Springer-Verlag 1993 </publisher>
Reference-contexts: Moreover, the characteristics of these techniques make them amenable for mechanical generation and verification of proofs. Related to this, we are currently considering the use of automatic provers such as Larch [Soe93] or PVS <ref> [Sha93] </ref> with the described techniques. The only major disadvantage we encountered while working with Timed Automata and the Simulation Mapping technique is that we could not gain any information or any measurement towards the optimality of parameters of a solution. <p> Ongoing research in our group shows that the timed-automata method provides high potential for automating the generation of the proofs <ref> [Sha93] </ref>, [Arc96]. Acknowledgments We thank Anya Pogosyants and Roberto Segala for several useful comments as well as Angelika Leeb and Dave Evans for comments and proofreading.
Reference: [Wei96] <author> Weinberg, H.: </author> <title> Correctness of a Vehicle Control System: A Case Study, </title> <type> Masters Thesis, </type> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <month> Cambridge, </month> <title> 1996 Proving Safety Properties of the Steam Boiler Controller G. Leeb, N. Lynch Page 35 of 37 APPENDIX A: The Timed Automaton Model This section contains the formal definitions for the Timed Automaton model, taken from [Lyn94]. Timed Automata </title>
Reference-contexts: The Simulation Mapping technique provides a consistent transition between different abstraction layers. This method seems to scale better than other formal verification techniques because of the possibility of applying this method to different abstraction layers, and applying various decomposition techniques <ref> [Wei96] </ref>. A Simulation Mapping can be used to prove that two abstraction layers preserve certain properties. Decomposition techniques provide modular and incremental verification. For instance, suppose that you have proved that a certain implementation of a shared register provides mutual exclusion.
References-found: 13

