URL: http://www.eecs.umich.edu/UMichMP/Publications/nomad.ps
Refering-URL: http://www.eecs.umich.edu/UMichMP/abstracts.html
Root-URL: http://www.eecs.umich.edu
Email: -blj,tnm-@eecs.umich.edu  
Title: Access to Local Resources in a Nomadic Environment  
Author: Bruce L. Jacob and Trevor N. Mudge 
Note: 1.0 Introduction  
Address: Michigan  
Affiliation: Advanced Computer Architecture Lab EECS Department, University of  
Abstract: We propose a standard level of support for nomadic computing in which a mobile client can move into unfamiliar envir onments and obtain services for which it has no corr esponding client RPC stub. W e call this activity service discovery and motivate its importance for mobile computing. This paper describes the general components of service discovery and points out wher e traditional paradigms of distributed computing fall short of its r equirements. We suggest an ar chitecture for an environment which uses SLIP or PPP over modem connections, a directory service based on the ODP trading function, and a dynamic interface mechanism for ad hoc clientserver interaction. The goal of nomadic computing transcends simply making ones envir onment portable; mobile users require the ability to communicate with local servers despite location and the ability to obtain local services despite statically defined service interfaces. To this end, we expect the portable computer or PDA to perform as a universal interactor [51]. There are three fundamental problems that need to be addressed to achieve a minimal level of interaction: 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Asokan. </author> <title> Anonymity in a mobile computing environment. </title> <booktitle> In Proc. 1994 Workshop on Mobile Computing Systems and Applications, </booktitle> <month> December </month> <year> 1994. </year>
Reference: [2] <author> A. Aziz. </author> <title> A scalable and efficient intra-domain tunneling mobile-IP scheme. </title> <journal> Computer Communication Review, </journal> <volume> vol. 24, no. 1, </volume> <month> January </month> <year> 1994. </year>
Reference-contexts: Further complicating the matter is the possibility of malicious servers that do not execute the service but r espond positively, or poorly-written ones that perform the service but forget to respond. Connectivity. Above and beyond the problem of packet routing <ref> [2, 37] </ref>, mobile client systems might need to periodically verify whether they are still connected to the nearest directory object. There are two paradigms for managing nomadic, possibly disconnected, computers.
Reference: [3] <author> S. M. Bellovin. </author> <title> There be Dragons. </title> <type> Tech. Rep., </type> <institution> AT&T Bell Laboratories, </institution> <month> August </month> <year> 1992. </year> <note> ftp://ftp.research.att.com/ dist/internet_security/dragon.ps. </note>
Reference-contexts: Security. The simplest method in a global environment makes every principal responsible for its own security. This is not a bad idea, as A T&Ts experiences show that a server should not necessarily tr ust its port-mapper <ref> [3, 13] </ref>. Similarly, it should not be up to a directory object to provide security for the client and server objects with which it conducts transactions.
Reference: [4] <author> T. Berners-Lee, R. Cailliau, and J.-F. Groff. </author> <title> The World-Wide Web. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> vol. 25, no. </volume> <pages> 4-5, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: One could even go as far as using the Web <ref> [4] </ref> to locate services, as many cataloging and webpage-dir ectory services already exist. Interaction. A client must be able to communicate intelligently with servers that it has never hear d of before. <p> Future systems must not only support but expect a distributed environment similar to a shopping mall, where virtually all computing needs can be met. We have already witnessed the arrival of diverse user-level applications, from information services <ref> [4] </ref> to ordering pizza [39]. The de facto standard of distributed information services is the WorldWide Web [54], primarily because of the ease with which anyone can publish information.
Reference: [5] <author> K. Birman and T. Joseph. </author> <title> Reliable communication in the presence of failures. </title> <journal> ACM Transactions of Computer Systems, </journal> <volume> vol. 5, no. 1, </volume> <month> February </month> <year> 1987. </year>
Reference-contexts: Failure. How should the client detect and respond to failure conditions, including malicious servers? There has been much research in the area of making distributed services fault-tolerant, much of it centered around reliable communications <ref> [5, 27, 31, 32, 38, 47] </ref>. One can detect when a server crashes in an open environment on the global scale much less easily than in a closed system.
Reference: [6] <author> A. D. Birrell. </author> <title> Secure communications using remote procedure calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 3, no. 1, </volume> <month> February </month> <year> 1985. </year>
Reference: [7] <author> A. D. Birrell and B. J. Nelson. </author> <title> Implementing Remote Procedure Calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 2, no. 1, </volume> <pages> pp. 3959, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: Knowing the semantics of the interaction should be sufficient; a mobile client should be able to learn the syntax of the interaction dynamically. 1.2 Service Discovery and RPC The Remote Procedure Call paradigm (RPC) <ref> [7] </ref> has been lar gely responsible for the shape of distributed computing. Operating systems such as the Mach micr okernel [17, 42], Amoeba [33, 50], Spring [19, 28], and V [12] range from being patterned after, to completely centered around RPC.
Reference: [8] <author> CCITT. </author> <title> Recommendation X.208: Specification of Abstract Syntax Notation One (ASN.1). International Telegraph and Telephone Consultative Committee, </title> <year> 1988. </year>
Reference-contexts: A client therefore can learn the syntax and low-level semantics of a pr ocedure call at run time. There are many precedents for such a languagethe Abstract Syntax Notation One (ASN.1) of X.400/X.500 <ref> [8, 9] </ref>, the AI-oriented knowledge representation language KQML [15], or standard IDL languages such as in ILU, DCE, or CORBA.
Reference: [9] <author> CCITT. </author> <title> Recommendations X.500-X.521: The Directory. International Telegraph and Telephone Consultative Committee, </title> <year> 1988. </year>
Reference-contexts: What physical communication is used? The first problem is largely solved. The second is not. The third has a simple short-term solution. Location. A client can locate r esources via a directory. There are several such directories, including the CCITT X.500 Directory <ref> [9] </ref>, CORBAs Interface Repository [35], and the ODP trading function [25]. There are also several academic systems including Prospero [34] and Cygnus [10, 11, 43]. These systems provide methods that enable clients to locate services in a distributed envir onment. <p> A client therefore can learn the syntax and low-level semantics of a pr ocedure call at run time. There are many precedents for such a languagethe Abstract Syntax Notation One (ASN.1) of X.400/X.500 <ref> [8, 9] </ref>, the AI-oriented knowledge representation language KQML [15], or standard IDL languages such as in ILU, DCE, or CORBA.
Reference: [10] <author> R. N. Chang and C. V. Ravishankar. </author> <title> A service acquisition mechanism for the client/service model in Cygnus. </title> <type> Tech. Rep. </type> <institution> CSE-TR-84-91, University of Michigan, </institution> <year> 1991. </year>
Reference-contexts: The third has a simple short-term solution. Location. A client can locate r esources via a directory. There are several such directories, including the CCITT X.500 Directory [9], CORBAs Interface Repository [35], and the ODP trading function [25]. There are also several academic systems including Prospero [34] and Cygnus <ref> [10, 11, 43] </ref>. These systems provide methods that enable clients to locate services in a distributed envir onment. We have previously described the flexibility of the trading function in [26].
Reference: [11] <author> R. N. Chang. </author> <title> A Network Service Acquisition Mechanism for the Client/Service Model. </title> <type> PhD thesis, </type> <institution> University of Michigan, </institution> <year> 1990. </year>
Reference-contexts: The third has a simple short-term solution. Location. A client can locate r esources via a directory. There are several such directories, including the CCITT X.500 Directory [9], CORBAs Interface Repository [35], and the ODP trading function [25]. There are also several academic systems including Prospero [34] and Cygnus <ref> [10, 11, 43] </ref>. These systems provide methods that enable clients to locate services in a distributed envir onment. We have previously described the flexibility of the trading function in [26]. <p> This is an unwieldy model; the pr oblem is that too much of the knowledge is r equired statically; the syntactic information required by RPC at compile time could instead be determined at run time. Ravishankar describes the problem in the preface to <ref> [11] </ref>. He argues that the benefits of an abstract model are undermined by binding too many concrete implementation details: The service notion has evolved into a dominant system structuring paradigm with the growth of distribution. <p> However, as systems get large it is unreasonable to expect clients to have global knowledge. As described before, many systems including Prospero [34], Cygnus <ref> [11] </ref>, CORBA [35], and ODP [24] have solutions for this problem. They allow a client to look up a service based on a general description.
Reference: [12] <author> D. R. Cheriton. </author> <title> The V distributed system. </title> <journal> Communications of the ACM, </journal> <volume> vol. 31, no. 3, </volume> <month> March </month> <year> 1988. </year>
Reference-contexts: Operating systems such as the Mach micr okernel [17, 42], Amoeba [33, 50], Spring [19, 28], and V <ref> [12] </ref> range from being patterned after, to completely centered around RPC.
Reference: [13] <author> B. Cheswick. </author> <title> An evening with Berferd, in which a cracker is lured, endured, and studied. </title> <type> Tech. Rep., </type> <institution> AT&T Bell Laboratories. ftp://ftp.research.att.com/dist/internet_security/berferd.ps. </institution>
Reference-contexts: Security. The simplest method in a global environment makes every principal responsible for its own security. This is not a bad idea, as A T&Ts experiences show that a server should not necessarily tr ust its port-mapper <ref> [3, 13] </ref>. Similarly, it should not be up to a directory object to provide security for the client and server objects with which it conducts transactions.
Reference: [14] <author> R. S. Chin and S. T. Chanson. </author> <title> Distributed object-based programming systems. </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 31, no. 3, </volume> <month> March </month> <year> 1988. </year>
Reference-contexts: It is likewise unacceptable to rely upon a physical serial connection to a projection machine; your laptop may have the wrong connector or no connector whatsoever. Here are two illustrative scenarios: 1. Object is used in the active object sense, as in <ref> [14] </ref>. It is more or less equivalent to the word server. 2. Often known as sneakernet. 6 You want to print something out. You want to project your presentation virtually.
Reference: [15] <author> DARPA Knowledge Sharing Initiative: </author> <title> External Interfaces Working Group. Specification of the KQML agent-communication language. </title> <type> Tech. Rep., </type> <month> June </month> <year> 1993. </year> <note> ftp://ksl.stanford.edu/pub/knowledge-sharing/papers/ kqml-spec.ps. </note>
Reference-contexts: A client therefore can learn the syntax and low-level semantics of a pr ocedure call at run time. There are many precedents for such a languagethe Abstract Syntax Notation One (ASN.1) of X.400/X.500 [8, 9], the AI-oriented knowledge representation language KQML <ref> [15] </ref>, or standard IDL languages such as in ILU, DCE, or CORBA. The rest of this paper describes an environment that supports service discovery, illustrates in more detail the limitations of RPC, and discusses several issues in implementing service discovery. 2.0 What Nomadic Computing Should Look Like You are mobile.
Reference: [16] <author> D. Dean, E. W. Felten, and D. S. Wallach. </author> <title> Java security: From HotJava to Netscape and beyond. </title> <booktitle> In Proc. IEEE Symposium on Security and Privacy, </booktitle> <address> Oakland CA, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: A client in sear ch of a service would need only f ind a Java Virtual Machine willing to execute client code. However , Java has two pr oblems: first, there have been many questions regarding the security of such a service invocation model <ref> [16] </ref>; second, Java does not solve the entir e problema programmer still must know the interfaces of the local r esources that a Java applet might need to use.
Reference: [17] <author> R. P. Draves, M. B. Jones, and M. R. Thompson. </author> <title> MIGThe Mach Interface Generator. </title> <type> Tech. Rep. (CMU unpublished report), </type> <institution> Carnegie Mellon University, </institution> <month> July </month> <year> 1989. </year> <note> ftp://mach.cs.cmu.edu/usr/mach/public/doc/ unpublished/mig.ps. </note>
Reference-contexts: Operating systems such as the Mach micr okernel <ref> [17, 42] </ref>, Amoeba [33, 50], Spring [19, 28], and V [12] range from being patterned after, to completely centered around RPC.
Reference: [18] <author> J. Gosling, B. Joy, and G. Steele. </author> <title> The Java Language Specification. Sun Microsystems, </title> <address> http://java.sun.com/ java.sun.com/newdocs.html#dev, </address> <year> 1996. </year>
Reference-contexts: Clearly, this is only a short-term solution. We argue that 4 it is the responsibility of the client to learn the new interfaces, and the r esponsibility of the servers to make learning them easy. 1.3 Service Discovery and Java Suns network programming language Java <ref> [18] </ref> is a possible candidate for pr oviding service discovery. Whereas RPC is a passive service-invocation mechanism in that clients send servers r equests and some amount of information to allow the server to carry out the r equest, Java supports an active service-invocation mechanism.
Reference: [19] <author> G. Hamilton, M. L. Powell, and J. G. Mitchell. Subcontract: </author> <title> A flexible base for distributed programming. </title> <booktitle> In Proc. Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: Operating systems such as the Mach micr okernel [17, 42], Amoeba [33, 50], Spring <ref> [19, 28] </ref>, and V [12] range from being patterned after, to completely centered around RPC.
Reference: [20] <author> A. Herzberg, H. Krawczyk, and G. Tsudik. </author> <title> On travelling incognito. </title> <booktitle> In Proc. 1994 Workshop on Mobile Computing Systems and Applications, </booktitle> <month> December </month> <year> 1994. </year>
Reference: [21] <author> P. Honeyman, L. Huston, J. Rees, and D. </author> <title> Bachman. The Little Work project. </title> <booktitle> In Proc. Third Workshop on Workstation Operating Systems, </booktitle> <month> April </month> <year> 1992. </year>
Reference-contexts: Alternatively, it can be up to the mobile client to check in with the system periodically, such as when the client changes location or r eestablishes network connectivity, as in the Coda f ile system [29, 45] or Little Work mobile system <ref> [21, 23] </ref>. It seems most r easonable to place the responsibility of location determination on the client. One knows ones location in a cellular envir onment [53], and todays personal digital assistants (PDAs) can be outf itted with an optional global locator attachment.
Reference: [22] <author> Y.-M. Huang. </author> <title> Constructive Specification and Synthesis of Agents for Custom and Cross RPC. </title> <type> PhD thesis, </type> <institution> University of Michigan, </institution> <year> 1994. </year>
Reference-contexts: The ODP standard specifies a trading function [24, 25] in which server objects export service of fers to traders and client object import offers. The recommendation however does not specify how clients and servers are to communicate. There is an implementation similar to the ORB, called RPC agents <ref> [22] </ref>; an RPC agent solves the interface problem by interposing itself between RPC clients and servers and translating between client and server protocols, thus freeing the client from the burden of learning many protocols or interfaces.
Reference: [23] <author> L. B. Huston and P. Honeyman. </author> <title> Disconnected operation for AFS. </title> <booktitle> In Proc. USENIX Mobile & Location-Independent Computing Symposium, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: Alternatively, it can be up to the mobile client to check in with the system periodically, such as when the client changes location or r eestablishes network connectivity, as in the Coda f ile system [29, 45] or Little Work mobile system <ref> [21, 23] </ref>. It seems most r easonable to place the responsibility of location determination on the client. One knows ones location in a cellular envir onment [53], and todays personal digital assistants (PDAs) can be outf itted with an optional global locator attachment.
Reference: [24] <author> ITU. </author> <title> Draft Recommendation X.903: Basic Reference Model of Open Distributed Processing. International Telecommunication Union, </title> <year> 1992. </year>
Reference-contexts: of most standards of distributed computing, including the Open Softwar e Foundations Distributed Computing Environment (OSFs DCE) and its Apollo pr edecessor [36], Suns RPC [49], the Object Management Groups Common Object Request Br oker Architecture (OMGs CORBA) [35], and the International Telecommunication Unions Open Distributed Processing recommendation (ITUs ODP) <ref> [24] </ref>. RPC provides a quick way to turn a monolithic application into a distributed application involving pr ocesses on several different machines. <p> The CORBA standard advocates an intermediary between objects, called the Object Request Br oker, that can translate between protocols. The responsibility of learning service interfaces thus shifts fr om the client object to the ORB. The ODP standard specifies a trading function <ref> [24, 25] </ref> in which server objects export service of fers to traders and client object import offers. The recommendation however does not specify how clients and servers are to communicate. <p> You type: 8 localaccess trader@local.net gif projector Since the location of the server controlling the projector is unknown, you must go through the default server trader@local.net, to which all servers post service advertisements. This server performs the trading function <ref> [24, 25] </ref>, allowing clients to connect to servers based solely on a description of the service they desir e. The trader performs a lookup on whatever keywor d/s is/are provided and returns a list of potential matches. <p> However, as systems get large it is unreasonable to expect clients to have global knowledge. As described before, many systems including Prospero [34], Cygnus [11], CORBA [35], and ODP <ref> [24] </ref> have solutions for this problem. They allow a client to look up a service based on a general description. The lookup returns a (possibly empty) set of servers that can handle the service requested. 3.2 Using Service Interfaces By definition, RPC involves a procedure call.
Reference: [25] <author> ITU. </author> <title> Draft Recommendation X.9tr: ODP Trading Function. International Telecommunication Union, </title> <year> 1994. </year>
Reference-contexts: The second is not. The third has a simple short-term solution. Location. A client can locate r esources via a directory. There are several such directories, including the CCITT X.500 Directory [9], CORBAs Interface Repository [35], and the ODP trading function <ref> [25] </ref>. There are also several academic systems including Prospero [34] and Cygnus [10, 11, 43]. These systems provide methods that enable clients to locate services in a distributed envir onment. We have previously described the flexibility of the trading function in [26]. <p> The CORBA standard advocates an intermediary between objects, called the Object Request Br oker, that can translate between protocols. The responsibility of learning service interfaces thus shifts fr om the client object to the ORB. The ODP standard specifies a trading function <ref> [24, 25] </ref> in which server objects export service of fers to traders and client object import offers. The recommendation however does not specify how clients and servers are to communicate. <p> You type: 8 localaccess trader@local.net gif projector Since the location of the server controlling the projector is unknown, you must go through the default server trader@local.net, to which all servers post service advertisements. This server performs the trading function <ref> [24, 25] </ref>, allowing clients to connect to servers based solely on a description of the service they desir e. The trader performs a lookup on whatever keywor d/s is/are provided and returns a list of potential matches.
Reference: [26] <author> B. L. Jacob and T. N. Mudge. </author> <title> The trading function in action. </title> <booktitle> In Proc. SIGOPS European Workshop, </booktitle> <address> Connemara, Ireland, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: There are also several academic systems including Prospero [34] and Cygnus [10, 11, 43]. These systems provide methods that enable clients to locate services in a distributed envir onment. We have previously described the flexibility of the trading function in <ref> [26] </ref>. Whatever ones choice of dir ectory, the point remains: the ability exists for a client to locate services based solely on descriptions of the service desired, rather than some specific piece of knowledge such as the name of the server or a unique ID r eferencing the service.
Reference: [27] <author> M. F. Kaashoek, A. S. Tanenbaum, S. F. Hummel, and H. E. Bal. </author> <title> An efficient reliable broadcast protocol. </title> <journal> 12 Operating Systems Review, </journal> <volume> vol. 23, no. 4, </volume> <pages> pp. 519, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: Failure. How should the client detect and respond to failure conditions, including malicious servers? There has been much research in the area of making distributed services fault-tolerant, much of it centered around reliable communications <ref> [5, 27, 31, 32, 38, 47] </ref>. One can detect when a server crashes in an open environment on the global scale much less easily than in a closed system.
Reference: [28] <author> Y. A. Khalidi, M. Talluri, M. N. Nelson, and D. Williams. </author> <title> Virtual memory support for multiple page sizes. </title> <booktitle> In Proc. Fourth Workshop on Workstation Operating Systems, </booktitle> <month> October </month> <year> 1993. </year>
Reference-contexts: Operating systems such as the Mach micr okernel [17, 42], Amoeba [33, 50], Spring <ref> [19, 28] </ref>, and V [12] range from being patterned after, to completely centered around RPC.
Reference: [29] <author> J. J. Kistler and M. Satyanarayanan. </author> <title> Disconnected Operation in the Coda File System. </title> <booktitle> In Proceedings of the 1991 Symposium on Operating System Principles, </booktitle> <month> October </month> <year> 1991, </year> <pages> pp. 213225. </pages>
Reference-contexts: Alternatively, it can be up to the mobile client to check in with the system periodically, such as when the client changes location or r eestablishes network connectivity, as in the Coda f ile system <ref> [29, 45] </ref> or Little Work mobile system [21, 23]. It seems most r easonable to place the responsibility of location determination on the client. One knows ones location in a cellular envir onment [53], and todays personal digital assistants (PDAs) can be outf itted with an optional global locator attachment.
Reference: [30] <author> D. M. Kristol, S. H. Low, and N. F. Maxemchuk. </author> <title> Anonymous internet mercantile protocol. </title> <type> Tech. Rep., </type> <institution> AT&T Bell Laboratories, </institution> <year> 1994. </year>
Reference: [31] <author> B. Liskov. </author> <title> Distributed programming in Argus. </title> <journal> Communications of the ACM, </journal> <volume> vol. 31, no. 3, </volume> <month> March </month> <year> 1988. </year>
Reference-contexts: Failure. How should the client detect and respond to failure conditions, including malicious servers? There has been much research in the area of making distributed services fault-tolerant, much of it centered around reliable communications <ref> [5, 27, 31, 32, 38, 47] </ref>. One can detect when a server crashes in an open environment on the global scale much less easily than in a closed system.
Reference: [32] <author> J. E. B. Moss. </author> <title> Nested transactions: An introduction. Concurrency Control and Reliability in Distributed Systems, </title> <year> 1987. </year>
Reference-contexts: Failure. How should the client detect and respond to failure conditions, including malicious servers? There has been much research in the area of making distributed services fault-tolerant, much of it centered around reliable communications <ref> [5, 27, 31, 32, 38, 47] </ref>. One can detect when a server crashes in an open environment on the global scale much less easily than in a closed system.
Reference: [33] <author> S. Mullender, G. v. Rossum, A. Tanenbaum, R. v. Renesse, and H. v. Staveren. </author> <title> Amoeba: A distributed operating system for the 1990s. </title> <journal> IEEE Computer, </journal> <volume> vol. 23, no. 5, </volume> <month> May </month> <year> 1990. </year>
Reference-contexts: Operating systems such as the Mach micr okernel [17, 42], Amoeba <ref> [33, 50] </ref>, Spring [19, 28], and V [12] range from being patterned after, to completely centered around RPC.
Reference: [34] <author> B. C. Neuman, S. S. Augart, and S. Upasani. </author> <title> Using Prospero to support integrated location-independent computing. </title> <booktitle> In Proc. USENIX Mobile & Location-Independent Computing Symposium, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: The third has a simple short-term solution. Location. A client can locate r esources via a directory. There are several such directories, including the CCITT X.500 Directory [9], CORBAs Interface Repository [35], and the ODP trading function [25]. There are also several academic systems including Prospero <ref> [34] </ref> and Cygnus [10, 11, 43]. These systems provide methods that enable clients to locate services in a distributed envir onment. We have previously described the flexibility of the trading function in [26]. <p> However, as systems get large it is unreasonable to expect clients to have global knowledge. As described before, many systems including Prospero <ref> [34] </ref>, Cygnus [11], CORBA [35], and ODP [24] have solutions for this problem. They allow a client to look up a service based on a general description.
Reference: [35] <author> OMG. </author> <title> The Common Object Request Broker: Architecture and Specification, Rev 1.2. </title> <booktitle> Object Management Group, </booktitle> <month> December </month> <year> 1993. </year> <title> OMG Document Number 93-12-43. </title>
Reference-contexts: What physical communication is used? The first problem is largely solved. The second is not. The third has a simple short-term solution. Location. A client can locate r esources via a directory. There are several such directories, including the CCITT X.500 Directory [9], CORBAs Interface Repository <ref> [35] </ref>, and the ODP trading function [25]. There are also several academic systems including Prospero [34] and Cygnus [10, 11, 43]. These systems provide methods that enable clients to locate services in a distributed envir onment. We have previously described the flexibility of the trading function in [26]. <p> Similarly, RPC is the central theme of most standards of distributed computing, including the Open Softwar e Foundations Distributed Computing Environment (OSFs DCE) and its Apollo pr edecessor [36], Suns RPC [49], the Object Management Groups Common Object Request Br oker Architecture (OMGs CORBA) <ref> [35] </ref>, and the International Telecommunication Unions Open Distributed Processing recommendation (ITUs ODP) [24]. RPC provides a quick way to turn a monolithic application into a distributed application involving pr ocesses on several different machines. <p> However, as systems get large it is unreasonable to expect clients to have global knowledge. As described before, many systems including Prospero [34], Cygnus [11], CORBA <ref> [35] </ref>, and ODP [24] have solutions for this problem. They allow a client to look up a service based on a general description. The lookup returns a (possibly empty) set of servers that can handle the service requested. 3.2 Using Service Interfaces By definition, RPC involves a procedure call.
Reference: [36] <author> OSF. </author> <title> DCE Application Development Guide. Open Software Foundation, </title> <year> 1991. </year>
Reference-contexts: However, the current dominant paradigm for distributed computing, RPC, inhibits such fr ee-form interaction. RPC requires static knowledge of a service and its interface. It is impossible, using pr esent RPC implementations such as DCE or Sun RPC <ref> [36, 49] </ref>, to discover and use new services unless they conform exactly to the interfaces expected by the client. A user desiring the use of a newly discovered service has no alternative but to roll up his or her shirtsleeves and start coding. <p> Similarly, RPC is the central theme of most standards of distributed computing, including the Open Softwar e Foundations Distributed Computing Environment (OSFs DCE) and its Apollo pr edecessor <ref> [36] </ref>, Suns RPC [49], the Object Management Groups Common Object Request Br oker Architecture (OMGs CORBA) [35], and the International Telecommunication Unions Open Distributed Processing recommendation (ITUs ODP) [24]. RPC provides a quick way to turn a monolithic application into a distributed application involving pr ocesses on several different machines. <p> We propose the use of a high-level language to r epre-sent service interfaces, similar to most interface description languages like OSFs DCE Interface Description Language <ref> [36] </ref> or Xerox PARCs ILU Interface Specification Language [55]. Interfaces ar e defined by servers and learned by clients at the time of service invocation thr ough a service inquiry on the part of a client.
Reference: [37] <author> C. Perkins, A. Miles, and D. Johnson. IMHP: </author> <title> A mobile host protocol for the Internet. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> vol. 27, no. 3, </volume> <month> December </month> <year> 1994. </year>
Reference-contexts: Further complicating the matter is the possibility of malicious servers that do not execute the service but r espond positively, or poorly-written ones that perform the service but forget to respond. Connectivity. Above and beyond the problem of packet routing <ref> [2, 37] </ref>, mobile client systems might need to periodically verify whether they are still connected to the nearest directory object. There are two paradigms for managing nomadic, possibly disconnected, computers.
Reference: [38] <author> E. Pitoura and B. Bhargava. </author> <title> Revising transaction concepts for mobile computing. </title> <booktitle> In Proc. 1994 Workshop on Mobile Computing Systems and Applications, </booktitle> <month> December </month> <year> 1994. </year>
Reference-contexts: Failure. How should the client detect and respond to failure conditions, including malicious servers? There has been much research in the area of making distributed services fault-tolerant, much of it centered around reliable communications <ref> [5, 27, 31, 32, 38, 47] </ref>. One can detect when a server crashes in an open environment on the global scale much less easily than in a closed system.
Reference: [39] <author> Pizza Hut. </author> <note> http://www.pizzahut.com/. </note>
Reference-contexts: Future systems must not only support but expect a distributed environment similar to a shopping mall, where virtually all computing needs can be met. We have already witnessed the arrival of diverse user-level applications, from information services [4] to ordering pizza <ref> [39] </ref>. The de facto standard of distributed information services is the WorldWide Web [54], primarily because of the ease with which anyone can publish information. In an environment where anyone can simply hang a shingle on the net and begin of fering services, it is likely that everyone will.
Reference: [40] <author> L. </author> <title> Press. Commercialization of the Internet. </title> <journal> Communications of the ACM, </journal> <volume> vol. 37, no. 11, </volume> <pages> pp. 1721, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: but it is as unlikely to be realized on a global scale as standardization of RPC interfaces. 1.4 It Will Become a Problem The rapid commercialization of the Internet and the National Information Infrastr ucture [52] imply that the future of general-purpose computing combines heter ogeneity and ubiquitous computing services <ref> [40] </ref>. Future systems must not only support but expect a distributed environment similar to a shopping mall, where virtually all computing needs can be met. We have already witnessed the arrival of diverse user-level applications, from information services [4] to ordering pizza [39].
Reference: [41] <author> Proximus Corporation. </author> <note> http://www.proximus.com/. </note>
Reference-contexts: Global location is becoming a hot area; for example, Proximus provides a web-based map engine which will produce a map of any area, given an Internet domain name or US mailing address <ref> [41] </ref>. 5.0 Summary Today, nomadic computing is r estricted to merely making ones home envir onment portable; it is fundamentally noninteractive. Making nomadic computing fundamentally interactive has the potential to r evo-lutionize the way portable computers are used, but current paradigms of distributed computing stand in the way.
Reference: [42] <author> R. Rashid, A. Tevanian, M. Young, D. Young, R. Baron, D. Black, W. Bolosky, and J. Chew. </author> <title> Machine-independent virtual memory management for paged uniprocessor and multiprocessor architectures. </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. 37, no. 8, </volume> <pages> pp. 896908, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Operating systems such as the Mach micr okernel <ref> [17, 42] </ref>, Amoeba [33, 50], Spring [19, 28], and V [12] range from being patterned after, to completely centered around RPC.
Reference: [43] <author> C. V. Ravishankar and R. N. Chang. </author> <title> An attribute-based service-request mechanism for heterogeneous distributed systems. </title> <type> Tech. Rep. </type> <institution> CSE-TR-08-88, University of Michigan, </institution> <year> 1988. </year>
Reference-contexts: The third has a simple short-term solution. Location. A client can locate r esources via a directory. There are several such directories, including the CCITT X.500 Directory [9], CORBAs Interface Repository [35], and the ODP trading function [25]. There are also several academic systems including Prospero [34] and Cygnus <ref> [10, 11, 43] </ref>. These systems provide methods that enable clients to locate services in a distributed envir onment. We have previously described the flexibility of the trading function in [26].
Reference: [44] <author> D. Samfat and R. Molva. </author> <title> A method providing identity privacy to mobile users during authentication. </title> <booktitle> In Proc. 1994 Workshop on Mobile Computing Systems and Applications, </booktitle> <month> December </month> <year> 1994. </year>
Reference: [45] <author> M. Satyanarayanan, J. J. Kistler, L. B. Mummert, M. R. Ebling, P. Kuman, and Q. Lu. </author> <title> Experience with Disconnected Operation in a Mobile Computing Environment. </title> <booktitle> In Proceedings of the 1993 USENIX Symposium on Mobile and Location-Independent Computing, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: Alternatively, it can be up to the mobile client to check in with the system periodically, such as when the client changes location or r eestablishes network connectivity, as in the Coda f ile system <ref> [29, 45] </ref> or Little Work mobile system [21, 23]. It seems most r easonable to place the responsibility of location determination on the client. One knows ones location in a cellular envir onment [53], and todays personal digital assistants (PDAs) can be outf itted with an optional global locator attachment.
Reference: [46] <author> B. Schilit, N. Adams, and R. </author> <title> Want. </title> <booktitle> Context-aware computing applications. In Proc. 1994 Workshop on Mobile Computing Systems and Applications, </booktitle> <month> December </month> <year> 1994. </year>
Reference-contexts: There are two paradigms for managing nomadic, possibly disconnected, computers. It can be up to the system to locate the mobile party and pass on information when it suits the central system, as in the Xerox PARCTAB personal communication system <ref> [46, 48] </ref>. Alternatively, it can be up to the mobile client to check in with the system periodically, such as when the client changes location or r eestablishes network connectivity, as in the Coda f ile system [29, 45] or Little Work mobile system [21, 23].
Reference: [47] <author> A. Z. Spector, D. Daniels, D. Duchamp, J. L. Eppinger, and R. Pausch. </author> <title> Distributed transactions for reliable systems. </title> <booktitle> In Proc. Tenth ACM Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1985, </year> <pages> pp. 127146. </pages>
Reference-contexts: Failure. How should the client detect and respond to failure conditions, including malicious servers? There has been much research in the area of making distributed services fault-tolerant, much of it centered around reliable communications <ref> [5, 27, 31, 32, 38, 47] </ref>. One can detect when a server crashes in an open environment on the global scale much less easily than in a closed system.
Reference: [48] <author> M. Spreitzer and M. Theimer. </author> <title> Providing location information in a ubiquitous computing environment. </title> <booktitle> In Proc. Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: There are two paradigms for managing nomadic, possibly disconnected, computers. It can be up to the system to locate the mobile party and pass on information when it suits the central system, as in the Xerox PARCTAB personal communication system <ref> [46, 48] </ref>. Alternatively, it can be up to the mobile client to check in with the system periodically, such as when the client changes location or r eestablishes network connectivity, as in the Coda f ile system [29, 45] or Little Work mobile system [21, 23].
Reference: [49] <author> Sun Microsystems. </author> <title> Sun RPC man pages rpc, </title> <address> rpcinfo, rpcgen, portmap. </address>
Reference-contexts: However, the current dominant paradigm for distributed computing, RPC, inhibits such fr ee-form interaction. RPC requires static knowledge of a service and its interface. It is impossible, using pr esent RPC implementations such as DCE or Sun RPC <ref> [36, 49] </ref>, to discover and use new services unless they conform exactly to the interfaces expected by the client. A user desiring the use of a newly discovered service has no alternative but to roll up his or her shirtsleeves and start coding. <p> Similarly, RPC is the central theme of most standards of distributed computing, including the Open Softwar e Foundations Distributed Computing Environment (OSFs DCE) and its Apollo pr edecessor [36], Suns RPC <ref> [49] </ref>, the Object Management Groups Common Object Request Br oker Architecture (OMGs CORBA) [35], and the International Telecommunication Unions Open Distributed Processing recommendation (ITUs ODP) [24]. RPC provides a quick way to turn a monolithic application into a distributed application involving pr ocesses on several different machines.
Reference: [50] <author> A. S. Tanenbaum, R. v. Renesse, H. v. Staveren, G. J. Sharp, S. J. Mullender, J. Jansen, and G. v. Rossum. </author> <title> Experiences with the Amoeba distributed operating system. </title> <journal> Communications of the ACM, </journal> <volume> vol. 33, no. 12, </volume> <pages> pp. 46 63, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Operating systems such as the Mach micr okernel [17, 42], Amoeba <ref> [33, 50] </ref>, Spring [19, 28], and V [12] range from being patterned after, to completely centered around RPC.
Reference: [51] <author> M. Theimer, A. Demers, and B. Welch. </author> <title> Operating system issues for PDAs. </title> <booktitle> In Proc. Fourth Workshop on Workstation Operating Systems, </booktitle> <address> Napa CA, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: To this end, we expect the portable computer or PDA to perform as a universal interactor <ref> [51] </ref>. There are three fundamental problems that need to be addressed to achieve a minimal level of interaction: 1. How does a mobile client locate an appropriate resource? 2. How does a mobile client interact with the (server providing access to the) resource? 3.
Reference: [52] <author> M. K. Vernon, E. D. Lazowska, and S. D. Personick, Eds. </author> <title> R&D for the NII: </title> <type> Technical Challenges. </type> <institution> Interuniversity Communications Council, Inc., </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: Standardization of interfaces will solve the latter problem, but it is as unlikely to be realized on a global scale as standardization of RPC interfaces. 1.4 It Will Become a Problem The rapid commercialization of the Internet and the National Information Infrastr ucture <ref> [52] </ref> imply that the future of general-purpose computing combines heter ogeneity and ubiquitous computing services [40]. Future systems must not only support but expect a distributed environment similar to a shopping mall, where virtually all computing needs can be met.
Reference: [53] <author> J. Z. Wang. </author> <title> A fully distributed location registration strategy for universal personal communications systems. </title> <journal> IEEE Journal on Selected Areas in Communication, </journal> <volume> vol. 11, no. 6, </volume> <month> August </month> <year> 1993. </year>
Reference-contexts: It seems most r easonable to place the responsibility of location determination on the client. One knows ones location in a cellular envir onment <ref> [53] </ref>, and todays personal digital assistants (PDAs) can be outf itted with an optional global locator attachment.
Reference: [54] <editor> WWW Conference. </editor> <booktitle> Special issue: Selected papers of the first World-Wide Web conference. Computer Networks and ISDN Systems, </booktitle> <volume> vol. 27, no. 2, </volume> <month> November </month> <year> 1994. </year>
Reference-contexts: We have already witnessed the arrival of diverse user-level applications, from information services [4] to ordering pizza [39]. The de facto standard of distributed information services is the WorldWide Web <ref> [54] </ref>, primarily because of the ease with which anyone can publish information. In an environment where anyone can simply hang a shingle on the net and begin of fering services, it is likely that everyone will. Anything one can imagine and far mor e that one cannot will be available.
Reference: [55] <institution> Xerox. </institution> <note> Inter-Langauge Unification. Xerox PARC, ftp://ftp.parc.xerox.com/pub/ilu/ilu.html. </note>
Reference-contexts: We propose the use of a high-level language to r epre-sent service interfaces, similar to most interface description languages like OSFs DCE Interface Description Language [36] or Xerox PARCs ILU Interface Specification Language <ref> [55] </ref>. Interfaces ar e defined by servers and learned by clients at the time of service invocation thr ough a service inquiry on the part of a client. Serv 5 ers are located through a directory service such as the X.500 Directory, CORBAs Interface Repository, or the ODP trading function.
References-found: 55

