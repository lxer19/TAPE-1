URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1996/UM-CS-1996-007.ps
Refering-URL: http://www.cs.umass.edu/~potter/LC/spring96.doc.html
Root-URL: 
Title: CAISARTS: A Tool for Real-Time Scheduling Assistance  
Author: Marty Humphrey and John A. Stankovic 
Abstract: UMass Computer Science Technical Report 96-07 January 19, 1996 Abstract CAISARTS (Conceptual, Analytical, and Implementation Scheduling Advice for Real-Time Systems) is a rule-based system used by real-time application designers to obtain expert assistance for all aspects of the design related to scheduling: granularity of tasks, allocation of tasks, choice and analysis of scheduling paradigm, analysis of overheads of particular operating systems and scheduling paradigms, and code templates for tasks. The rule base is partitioned; subsets of the rule base can be selected for firing, thus enabling the user to ask CAISARTS for advice and analysis relevant for different phases of the design. In contrast to existing real-time tools, CAISARTS attempts to cover the entire design process related to scheduling without focusing on, for example, solely schedulability analysis. A unique feature of CAISARTS is that its rule base is extensible by the usera graphical interface is used to add new rules as new real-time results are identified. Challenges in the design of the initial rule set include how to design and partition the rule base so that it can be both easily modifiable and readily usable by the user in choosing rules to fire; how to encode rules that are inherently contradictory; how to encode ambiguous knowledge; and how to make the rules both comprehensive and precise. The effectiveness of CAISARTS is shown through its use on a representative distributed real-time system scenarioCAISARTS generates analysis and advice that is consistent with existing analysis of this environment. Further capabilities are shown when CAISARTS is applied to this environment after simplifying assumptions have been removed and end-to-end constraints are added. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B.O. Gallmeister. </author> <title> POSIX.4: Programming for the Real World. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> Sebastopol, CA, </address> <year> 1995. </year>
Reference-contexts: Not shown in Figure 1, but accessible by scrolling the window, are POSIX Implementation Approach Container, which contains objects used to specify how POSIX <ref> [1] </ref> services are used to implement the scheduling algorithms; End to End Marker Container, which contains objects used to logically connect a series of tasks or schedulable entities into a single entity; Shared Resource Container, which specify properties of individual objects accessible by schedulable entities or tasks; and Shared Resource User <p> There are Pros and Cons for each situation. For more details, consult page 5-61 of the Handbook of Rate Monotonic Analysis. ADVICE: To implement ComparisonRequest as a hardware interrupt: <ref> [1] </ref> Instantiate a single schedulable entity, and allocate it to Processor CPU2. Fill in the worst-case execution time of the entire response. [2] Assign 11 as the priority of the new schedulable entity. <p> ADVICE: To implement ComparisonRequest with a sporadic server: <ref> [1] </ref> Instantiate two schedulable entities, and allocate them to Processor CPU2. -- the first schedulable entity is the hardware interrupt. Assign a worst-case execution time that is the amount of time needed to service the interrupt. -- the second schedulable entity is the sporadic server. <p> SOURCE: Tindell and Clark. Holistic Schedulability Analysis for Distributed Hard Real-Time Systems. Microprocessing and Microprogramming, 40 (1994), pp. 117-134. ADVICE: To use the holistic approach to the end-to-end constraint EstimateTracksEE, <ref> [1] </ref> Reduce the deadline of Task EstimateTracks1 5 milliseconds. [2] Perform a static-priority scheduling analysis on the system. Pay particular attention to those processors (CPU1) that have their task set attributed modified as a result of the previous steps.
Reference: [2] <author> R.T. Goettge, E. Brehm, C. Palczak, J.A. Stankovic, and M. Humphrey. </author> <title> Knowledge-based assistance for real-time systems. </title> <booktitle> In Proceedings of the 1st IEEE International Conference on Engineering of Complex Computer Systems (ICECCS'95), </booktitle> <address> Ft. Lauderdale, Florida, </address> <month> November </month> <year> 1995. </year>
Reference-contexts: Conceptually, CAISARTS can be used in conjunction with these tools. 3 Overview of CAISARTS CAISARTS is a modular set of functional components that communicate through a common underlying object management system <ref> [2] </ref>. The two primary functional components are the inference engine and the Graphical User Interface (GUI), which provides access to the objects that describe the environment as well as access to rules and rule sets. <p> For more details, consult page 5-61 of the Handbook of Rate Monotonic Analysis. ADVICE: To implement ComparisonRequest as a hardware interrupt: [1] Instantiate a single schedulable entity, and allocate it to Processor CPU2. Fill in the worst-case execution time of the entire response. <ref> [2] </ref> Assign 11 as the priority of the new schedulable entity. <p> If schedulability analysis shows that this is appropriate, then when it comes to coding the sporadic server, the sporadic server replenishment period will be 100 milliseconds, and the execution capacity will be the worst-case execution time of the second schedulable entity, which you also have to specify. <ref> [2] </ref> Make the first schedulable entity point at the second schedulable schedulable entity through its 'MustPrecede' slot. [3] Make the task (ComparisonRequest) point at the FIRST schedulable entity through its 'ImplementedBy' slot. [4] Re-invoke the uniprocessor static priority scheduling rules to the schedulability of Processor CPU2 as a whole. 13 The <p> SOURCE: Tindell and Clark. Holistic Schedulability Analysis for Distributed Hard Real-Time Systems. Microprocessing and Microprogramming, 40 (1994), pp. 117-134. ADVICE: To use the holistic approach to the end-to-end constraint EstimateTracksEE, [1] Reduce the deadline of Task EstimateTracks1 5 milliseconds. <ref> [2] </ref> Perform a static-priority scheduling analysis on the system. Pay particular attention to those processors (CPU1) that have their task set attributed modified as a result of the previous steps.
Reference: [3] <author> R.L. Graham. </author> <title> Bounds on multiprocessor timing anomalies. </title> <journal> SIAM Journal on Applied Mathematics, </journal> <volume> 17, </volume> <year> 1969. </year>
Reference-contexts: For example, a designer may use an algorithm to compute an optimal static real-time schedule for a three-processor multiprocessor. Later, the designer may decide to add a fourth processor and find that the system now misses deadlines. This is due to Richard's anomalies <ref> [3] </ref> an algorithmic level misunderstanding. In Rate Monotonic Analysis [7] it is often quite easy to compute schedulability bounds considering task execution times and periods. <p> Fill in the worst-case execution time of the entire response. [2] Assign 11 as the priority of the new schedulable entity. This is equivalent, for this schedulable entity set, to a hardware interrupt. <ref> [3] </ref> Make the task (ComparisonRequest) point at the new schedulable entity through its 'ImplementedBy' slot. [4] Re-invoke the uniprocessor static priority scheduling rules to determine the schedulability of Processor CPU2 as a whole. <p> the sporadic server, the sporadic server replenishment period will be 100 milliseconds, and the execution capacity will be the worst-case execution time of the second schedulable entity, which you also have to specify. [2] Make the first schedulable entity point at the second schedulable schedulable entity through its 'MustPrecede' slot. <ref> [3] </ref> Make the task (ComparisonRequest) point at the FIRST schedulable entity through its 'ImplementedBy' slot. [4] Re-invoke the uniprocessor static priority scheduling rules to the schedulability of Processor CPU2 as a whole. 13 The Sporadic Server approach is chosen, and reinvoking the schedulability test indicates that timing constraints will be met
Reference: [4] <institution> Introspect Technologies, Inc., Colorado Springs, CO. iRAT Technical Overview, </institution> <year> 1994. </year>
Reference-contexts: In other words, the user of CAISARTS does not need to know the specific optimality conditions of various algorithms. This concept generalizes to other type of advice as well. 2.3 iRAT iRAT <ref> [4] </ref> is a window-based engineering tool formulated on the analytical techniques of fixed priority scheduling theory and Rate Monotonic Analysis. iRAT consists of a schedulability engine, transformation and analysis dialogs, comprehensive diagnostics, and customized reports. <p> Fill in the worst-case execution time of the entire response. [2] Assign 11 as the priority of the new schedulable entity. This is equivalent, for this schedulable entity set, to a hardware interrupt. [3] Make the task (ComparisonRequest) point at the new schedulable entity through its 'ImplementedBy' slot. <ref> [4] </ref> Re-invoke the uniprocessor static priority scheduling rules to determine the schedulability of Processor CPU2 as a whole. ADVICE: To implement ComparisonRequest with a sporadic server: [1] Instantiate two schedulable entities, and allocate them to Processor CPU2. -- the first schedulable entity is the hardware interrupt. <p> capacity will be the worst-case execution time of the second schedulable entity, which you also have to specify. [2] Make the first schedulable entity point at the second schedulable schedulable entity through its 'MustPrecede' slot. [3] Make the task (ComparisonRequest) point at the FIRST schedulable entity through its 'ImplementedBy' slot. <ref> [4] </ref> Re-invoke the uniprocessor static priority scheduling rules to the schedulability of Processor CPU2 as a whole. 13 The Sporadic Server approach is chosen, and reinvoking the schedulability test indicates that timing constraints will be met (the time needed to service the interrupt is assumed to be 0.5 milliseconds).
Reference: [5] <author> K.A. Kettler, D.I. Katcher, and J.K. Strosnider. </author> <title> A modeling methodology for real-time/multimedia operating systems. </title> <booktitle> In Proceedings of the 1st Real-Time Technology and Applications Symposium, </booktitle> <address> Chicago, Illinois, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Schedulability checks are performed by combining the application model with the bus model. If the application is not schedulable, the bus model can be changed, certain parameters in the database can be changed, or the application model can be changed. Similar tools have been developed for real-time/multimedia operating systems <ref> [5] </ref> and networks [10]. The primary difference between CAISARTS and these tools lies in the scope and overall goal of CAISARTS. CAISARTS is designed to provide broad, text-based advice concerning allocation, schedulability and implementation, while these tools provide detailed analysis concerning a particular architectural component.
Reference: [6] <author> K.A. Kettler, J.P. Lehoczky, and J.K. Strosnider. </author> <title> Modeling bus scheduling policies for real-time systems. </title> <booktitle> In Proceedings of the 16th Real-Time Systems Symposium, </booktitle> <pages> pages 242-253, </pages> <address> Pisa, Italy, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: A representative example of these tools models bus scheduling policies <ref> [6] </ref>. This tool provides a formal methodology for the development of bus scheduling models, which can be used by bus designers to improve designs that need to account for real-time traffic. The approach is to specifically account for non-ideal bus behavior that occurs in actual bus implementations.
Reference: [7] <author> M.H. Klein, T. Ralya, B. Pollak, R. Obenza, and M.G. Harbour. </author> <title> A Practitioner's Handbook for Real-Time Analysis: Guide to Rate Monotonic Analysis for Real-Time Systems. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1993. </year>
Reference-contexts: Later, the designer may decide to add a fourth processor and find that the system now misses deadlines. This is due to Richard's anomalies [3] an algorithmic level misunderstanding. In Rate Monotonic Analysis <ref> [7] </ref> it is often quite easy to compute schedulability bounds considering task execution times and periods. <p> allocated are still schedulable after the deadline of the sending task is reduced, then the end-to-end timing constraint will be met. 15 As can be seen from this advice, the focus of scheduling knowledge for distributed end-to-end constraints has been the Holistic Approach [12] and the Distributed Rate Monotonic approach <ref> [7] </ref>. In addition, distributed rate monotonic is only acknowledged as an option for the user to investigate. A future improvement planned for CAISARTS is to replace this temporary, placeholder rule with a set of rules that provide in-depth analysis and advice pertaining to distributed rate monotonic.
Reference: [8] <author> J.W.S. Liu, J.L. Redondo, Z. Deng, T.S. Tia, R. Bettati, A. Silberman, M. Storch, R. Ha, and W.K. Shih. PERTS: </author> <title> A prototyping environment for real-time systems. </title> <institution> Department of Computer Science Technical Report UIUCDCS-R-93-1802, University of Illinois at Urbana-Champaign, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: Also, CAISARTS incorporates multiprocessor and distributed systems. It should be noted that the simulation capability of Scheduler 1-2-3 is currently more extensive than CAISARTS. In the future, simulation techniques will be added to CAISARTS. 2.2 PERTS The originators of PERTS (Prototyping Environment for Real-Time Systems) <ref> [8] </ref> observe that real-time systems are traditionally constructed by first developing the application software, and then validating the timing constraints by using ad hoc techniques and extensive simulation.
Reference: [9] <author> J.J. Molini, S.K. Maimon, and P.H. Watson. </author> <title> Real-time system scenarios. </title> <booktitle> In Proceedings of the 11th Real-time Systems Symposium, </booktitle> <month> December </month> <year> 1990. </year>
Reference-contexts: To illustrate the utility of CAISARTS, we describe its application on a standard real-time benchmark published in the literature <ref> [9] </ref> (see Section 5). Using this benchmark we demonstrate that CAISARTS provides advice and analysis for many stages of a design process; the analysis provided by CAISARTS is consistent with published analysis [9]. <p> illustrate the utility of CAISARTS, we describe its application on a standard real-time benchmark published in the literature <ref> [9] </ref> (see Section 5). Using this benchmark we demonstrate that CAISARTS provides advice and analysis for many stages of a design process; the analysis provided by CAISARTS is consistent with published analysis [9]. In a second part of the validation, the benchmark is extended to produce a workload that includes distributed end-to-end communication and timing constraints. The use of CAISARTS in this environment demonstrates its value for distributed real-time systems. This paper is organized as follows. <p> In this sense, although this advice is not directly required by the user, providing this advice at this point could facilitate a more robust design. 5 Evaluation/Validation As part of the validation of the tool, CAISARTS was applied to the Submarine Passive Sonar scenario described by Molini, Maimon, and Watson <ref> [9] </ref>. This specification and implementation of a Submarine Passive Sonar application was chosen both because it adequately describes a real-time environment in some detail, and because it presents a sample implementation of a real-time distributed system to perform the Submarine Passive Sonar task. <p> The application is complex: there are three nodes with communication across nodes, and there are both aperiodic and periodic tasks. In this section, after describing the environment and application design in more detail, CAISARTS is shown to provide analysis that is consistent with the analysis contained in <ref> [9] </ref>, under the same simplifying assumptions that nodes are independent, and the aperiodics are not included in the analysis. To further illustrate the capabilities of the tool, CAISARTS is shown to extend the schedulability analysis of [9] by performing a schedulability analysis of the sporadic tasks. <p> CAISARTS is shown to provide analysis that is consistent with the analysis contained in <ref> [9] </ref>, under the same simplifying assumptions that nodes are independent, and the aperiodics are not included in the analysis. To further illustrate the capabilities of the tool, CAISARTS is shown to extend the schedulability analysis of [9] by performing a schedulability analysis of the sporadic tasks. This also illustrates implementation advice that is provided by CAISARTS that does not appear in [9]. <p> To further illustrate the capabilities of the tool, CAISARTS is shown to extend the schedulability analysis of <ref> [9] </ref> by performing a schedulability analysis of the sporadic tasks. This also illustrates implementation advice that is provided by CAISARTS that does not appear in [9]. Next, three end-to-end constraints across nodes are added and analyzed, illustrating the ability of CAISARTS to provide advice for a more complex, distributed, real-time system. Again, this represents analysis techniques beyond those in [9]. <p> This also illustrates implementation advice that is provided by CAISARTS that does not appear in <ref> [9] </ref>. Next, three end-to-end constraints across nodes are added and analyzed, illustrating the ability of CAISARTS to provide advice for a more complex, distributed, real-time system. Again, this represents analysis techniques beyond those in [9]. <p> Detected objects are also used to steer additional signal processing. There are eight categories of time-critical functions for Submarine Passive Sonar: signal conditioning, beamforming, detection, tracking, analysis and classification, stabilization, time synchronization, and audio. The particular implementation described in <ref> [9] </ref> consists of a total of 28 tasks. The signal conditioning and the beamforming functions are performed in custom-built hardware (4 tasks), leaving the remaining functions (24 tasks) to be executed on standard hardware. Twenty-two of the tasks are periodic, and 2 tasks are aperiodic with hard deadlines (sporadic tasks). <p> IEEE Trans. on Computers, 39 (9), Sept 1990, pp. 1175-1185. These are the basic results given in <ref> [9] </ref>that static priority scheduling is appropriate. In the next part, we extend the analysis in that paper by adding the two sporadic tasks according to the allocation scheme of [9] and illustrate the analysis of end-to-end scheduling requirements. 5.3 Analysis and Implementation of Sporadic Tasks The two sporadic tasks described in Table 3 are instantiated and allocated. <p> Code generation is not shown here because it is currently under development. 5.4 End-to-end Schedulability To further validate CAISARTS the set of tasks and semantics of the application of <ref> [9] </ref> was extended to include the three end-to-end constraints shown in Figure 5. The description of the first end-to-end 14 constraint, EstimateTracksEE, is that the task EstimateTracks1 now must send a message to EstimateTracks2 before EstimateTracks2 should execute. In addition, there is an end-to-end deadline of 500 milliseconds. <p> Increased productivity, fewer errors, and increased understanding of the system via rationale and explanations are the projected outcomes. We have completed several experiments of using the tool; an extended example is contained in this paper for the passive sonar application reported in <ref> [9] </ref>. In these experiments, the tool's advice was validated by comparing to that implementation and was able to provide solutions beyond what was presented in [9] both for sporadic tasks and end-to-end constraints. <p> We have completed several experiments of using the tool; an extended example is contained in this paper for the passive sonar application reported in <ref> [9] </ref>. In these experiments, the tool's advice was validated by comparing to that implementation and was able to provide solutions beyond what was presented in [9] both for sporadic tasks and end-to-end constraints. However, since the scheduling field is so complex (there is an infinite variety of algorithms and situations) and much research still needs to be done, for many problems only guidance and suggestions may be forthcoming rather than complete solutions.
Reference: [10] <author> S. Sathaye. </author> <title> Scheduling Real-Time Traffic on Packet Switched Networks. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> May </month> <year> 1993. </year> <month> 17 </month>
Reference-contexts: If the application is not schedulable, the bus model can be changed, certain parameters in the database can be changed, or the application model can be changed. Similar tools have been developed for real-time/multimedia operating systems [5] and networks <ref> [10] </ref>. The primary difference between CAISARTS and these tools lies in the scope and overall goal of CAISARTS. CAISARTS is designed to provide broad, text-based advice concerning allocation, schedulability and implementation, while these tools provide detailed analysis concerning a particular architectural component.
Reference: [11] <institution> Software Technology Branch, NASA Johnson Space Center. </institution> <note> CLIPS Reference Manual, version 6.0, </note> <month> January </month> <year> 1994. </year>
Reference-contexts: As CAISARTS develops, these objects will be revised to become more extensive, thus allowing the representation of more implementation details that affect scheduling. The CLIPS system <ref> [11] </ref> provides the language by which to encode expert scheduling knowledge. A rule in CLIPS is a collection of conditions and the actions to take when the conditions are met (an IF-THEN rule). An important feature of CAISARTS is that individual rules can be instantiated or modified by the GUI.
Reference: [12] <author> K. Tindell and J. Clark. </author> <title> Holistic schedulability analysis for distributed hard real-time systems. </title> <journal> Microprocessing and Microprogramming, </journal> <volume> 40 </volume> <pages> 117-134, </pages> <year> 1994. </year>
Reference-contexts: processor on which the sending task is allocated are still schedulable after the deadline of the sending task is reduced, then the end-to-end timing constraint will be met. 15 As can be seen from this advice, the focus of scheduling knowledge for distributed end-to-end constraints has been the Holistic Approach <ref> [12] </ref> and the Distributed Rate Monotonic approach [7]. In addition, distributed rate monotonic is only acknowledged as an option for the user to investigate.
Reference: [13] <author> H. Tokuda and M. Kotera. </author> <title> A real-time tool set for the ARTS kernel. </title> <booktitle> In Proceedings of the 9th IEEE Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1988. </year> <month> 18 </month>
Reference-contexts: not directly the scope of CAISARTS or has not been provided by CAISARTS itself, then rules can be added to CAISARTS that instruct the user to investigate the use of the other tool. 2.1 Scheduler 1-2-3 Important early work with the design and analysis of real-time systems includes Scheduler 1-2-3 <ref> [13] </ref>. As part of a real-time toolset for ARTS and later Real-Time Mach, Scheduler 1-2-3 analyzes the correctness of timing requirements at design time. Scheduler 1-2-3 is a window-based system for describing and analyzing real-time task sets but focuses on fixed priority scheduling under Rate Monotonic priority assignment.
References-found: 13

