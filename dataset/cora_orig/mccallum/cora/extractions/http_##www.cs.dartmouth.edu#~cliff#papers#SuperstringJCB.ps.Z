URL: http://www.cs.dartmouth.edu/~cliff/papers/SuperstringJCB.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~cliff/papers/
Root-URL: http://www.cs.dartmouth.edu
Title: A 2 3 -Approximation Algorithm for the Shortest Superstring Problem  
Author: Chris Armen Clifford Stein 
Note: ShortString, a  
Date: July 16, 1996  2 3  
Address: W. Hartford, CT 06117-1599  Hanover, NH 03755-3510  
Affiliation: University of Hartford  Dartmouth College  
Abstract: Given a collection of strings S = fs 1 ; : : : ; s n g over an alphabet , a superstring ff of S is a string containing each s i as a substring; that is, for each i, 1 i n, ff contains a block of js i j consecutive characters that match s i exactly. The shortest superstring problem is the problem of finding a superstring ff of minimum length. The shortest superstring problem has applications in both data compression and computational biology. It was shown by Blum et al. [5] to be MAX SNP-hard. The first O(1)-approximation algorithm also appeared in [5], which returns a superstring no more than 3 times the length of an optimal solution. Prior to the algorithm described in this paper, there were several published results that improved on the approximation ratio; of these, the best is our algorithm 4 -approximation [1]. We present our new algorithm, G-ShortString, which achieves a ratio of 2 2 3 . Our approach builds on the work in [1], in which we identified classes of strings that have a nested periodic structure, and which must be present in the worst case for our algorithms. We introduced paper we extend this study to strings that exhibit a more relaxed form of the same structure, and we use this understanding to obtain our improved result. 1 Introduction machinery to describe these strings and proved strong structural properties about them. In this
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Armen and C.Stein. </author> <title> Improved length bounds for the shortest superstring problem. </title> <booktitle> In Proceedings of Workshop on Algorithms and Data Structures, </booktitle> <pages> pages 494-505, </pages> <year> 1995. </year>
Reference-contexts: Other algorithms were later shown to produce approximations of 2 8 6 , and slightly better than 2:8 (Teng and Yao [24], Czumaj et al. [7], and Kosaraju et al. [17], respectively). Our result of 2 3 4 <ref> [1, 2] </ref> was the best known until recently, and when combined with the algorithm of [17] achieves an approximation ratio of about 2:725. In this paper we describe our 2 2 3 -approximation algorithm for the shortest superstring problem. <p> In this paper we describe our 2 2 3 -approximation algorithm for the shortest superstring problem. Algorithmically, our approach is a generalization of the one taken in <ref> [1] </ref>, but the analysis is very different. Independently of our work, Jiang et al. [13] have also obtained a 2 2 3 -approximation using similar methods. More recently, Z Sweedyk [23] has obtained a 2 1 2 approximation. <p> So jy ` j; jy r j &gt; 2 3 (d (c) + jj), and we say that is a 2 3 -repeater of z. 1 This is a less general definition than that used in <ref> [1] </ref>. The original definition had a second parameter, which allows for different weights for d (c) and jj in condition 3 of the definition.
Reference: [2] <author> C. Armen and C. Stein. </author> <title> Short superstrings and the structure of overlapping strings. </title> <journal> J. of Computational Biology. </journal> <note> To Appear. </note>
Reference-contexts: Other algorithms were later shown to produce approximations of 2 8 6 , and slightly better than 2:8 (Teng and Yao [24], Czumaj et al. [7], and Kosaraju et al. [17], respectively). Our result of 2 3 4 <ref> [1, 2] </ref> was the best known until recently, and when combined with the algorithm of [17] achieves an approximation ratio of about 2:725. In this paper we describe our 2 2 3 -approximation algorithm for the shortest superstring problem. <p> In Step (6), each representative is fully extended. We show that by more carefully choosing representatives in Step (2), we can combine Steps (4) and (6) to produce a shorter superstring. We now summarize our analysis of Generic; more details can be found in <ref> [2] </ref>. For a cycle fl 2 CC, let ov n fl be the overlap of the edge deleted in Step (4), and let Ext (fl) be the length added in Step (6) to extend each representative in fl to include the rest of the strings in its cycle. <p> We describe the machinery for analyzing 2-cycles developed in <ref> [2] </ref>. Suppose we choose v and t as representatives of two cycles of the first cycle cover C, and they form a 2-cycle fl in CC in which one of ov (v; t) or ov (t; v) is large but the other is small. <p> In order to prove the lemma, we require a proof technique introduced in <ref> [2] </ref>, the shift argument. We describe this technique below. We apply the shift argument to cycles that include two or more repeaters. We are generally interested in proving that some property holds; we assume that it does not, and use the shift argument to derive a contradiction.
Reference: [3] <author> C. Armen and C. Stein. </author> <title> A 2 2 3 -approximation algorithm for the shortest superstring problem. </title> <type> Technical Report PCS-TR95-262, </type> <institution> Dartmouth College, </institution> <month> June </month> <year> 1995. </year>
Reference: [4] <author> Chris Armen. </author> <title> Approximation Algorithms for the Shortest Superstring Problem. </title> <type> PhD thesis, </type> <institution> Dartmouth College, </institution> <month> July </month> <year> 1995. </year>
Reference: [5] <author> A. Blum, T. Jiang, M. Li, J. Tromp, and M. Yannakakis. </author> <title> Linear approximation of shortest superstrings. </title> <journal> Journal of the ACM, </journal> <volume> 41(4) </volume> <pages> 630-647, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: The shortest superstring problem is the problem of finding a superstring ff of minimum length. The shortest superstring problem was shown to be NP-hard by Gallant, Maier and Storer [11]; it was later shown to be MAX SNP-hard <ref> [5] </ref>. The first O (1)-approximations were given by Blum et al. in [5], who showed that a greedy algorithm always returns a string that is no longer than four times optimal; they also give a modified greedy algorithm which returns a string that is no more three times the optimal length. <p> The shortest superstring problem was shown to be NP-hard by Gallant, Maier and Storer [11]; it was later shown to be MAX SNP-hard <ref> [5] </ref>. The first O (1)-approximations were given by Blum et al. in [5], who showed that a greedy algorithm always returns a string that is no longer than four times optimal; they also give a modified greedy algorithm which returns a string that is no more three times the optimal length. <p> The key to our new algorithm is to exploit the periodic structure of the cycles of strings that arise in this problem. In particular, the 3-approximation of <ref> [5] </ref> uses a theorem about infinite periodic functions [9], and the correspondence between periodic functions and strings in cycles. <p> Given this understanding, we will be able to predict the ways in which overlap between certain strings can occur, and thus plan for it algorithmically. 2 Preliminaries For consistency, we use some notation and definitions of <ref> [5] </ref> and [24]. We assume, without loss of generality, that the set S of strings is substring free; i.e., no s j is a substring of s i , i 6= j. <p> Full extension, right extension and left extension each form superstrings that include all of the strings in c, as proved in <ref> [5] </ref>. Left and right extension form shorter superstrings than full extension, though perhaps by only one character. <p> We now describe a generic version of a superstring algorithm from <ref> [5] </ref> that is also used in some form by [24] and [7]. An execution of the algorithm appears as Fig. 2. <p> Let z i = hx; fl i i!. (6) For each r c in ff Let r c = hhr c ; cii. (7) Return the resulting superstring ff. As shown in <ref> [5] </ref>, ff is a superstring of S. The cycle cover formed in Step (1) identifies sets of strings that have large amounts of overlap. Steps (2)-(5) compute a superstring ff that includes one string from each cycle in C. <p> We note three details in anticipation of our algorithm presented in Section 4. In Step (2), Generic chooses representatives arbitrarily; the analysis works with any choice. In Step (4), the algorithm of <ref> [5] </ref> deletes the minimum-overlap edge in each cycle fl 2 CC. In Step (6), each representative is fully extended. We show that by more carefully choosing representatives in Step (2), we can combine Steps (4) and (6) to produce a shorter superstring. <p> Then it can be shown that jffj opt (S) + X fl + Ext (fl) : (4) The following key lemma from <ref> [5] </ref> is essential to this analysis: Lemma 2.1 ([5]) Let c and c 0 be cycles in a minimum cycle cover C with strings s 2 c and s 0 2 c 0 . <p> We define a few terms describing the structure of cycles. The reader is referred to <ref> [5] </ref> for a more complete discussion. We call a string s irreducible if all cyclic shifts of s yield unique strings, and reducible otherwise. We say that s has periodicity x if there exists a string t with jtj = x such that s is substring of t 1 . <p> There is also a gap between the best proven bound on the performance of a simple greedy algorithm for the problem <ref> [5] </ref>, a 4-approximation, and the lower bound of 2 for that algorithm. This gap is of particular interest because the greedy algorithm is simple and fast and therefore is used in practice for DNA sequencing.
Reference: [6] <author> Thomas H. Cormen, Charles E. Leiserson, and Ronald L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press/McGraw-Hill, </publisher> <year> 1990. </year>
Reference: [7] <author> A. Czumaj, L. Gasieniec, M. Piotrow, and W. Rytter. </author> <title> Parallel and sequential approximations of shortest superstrings. </title> <booktitle> In Proceedings of Fourth Scandinavian Workshop on Algorithm Theory, </booktitle> <pages> pages 95-106, </pages> <year> 1994. </year>
Reference-contexts: Other algorithms were later shown to produce approximations of 2 8 6 , and slightly better than 2:8 (Teng and Yao [24], Czumaj et al. <ref> [7] </ref>, and Kosaraju et al. [17], respectively). Our result of 2 3 4 [1, 2] was the best known until recently, and when combined with the algorithm of [17] achieves an approximation ratio of about 2:725. <p> We now describe a generic version of a superstring algorithm from [5] that is also used in some form by [24] and <ref> [7] </ref>. An execution of the algorithm appears as Fig. 2. Generic SuperString Algorithm (1) Find a minimum cost cycle cover C in the distance graph G. (2) For each cycle c 2 C, choose one string to be a representative r c .
Reference: [8] <author> A. </author> <title> Lesk (edited). Computational Molecular Biology, Sources and Methods for Sequence Anal ysis. </title> <publisher> Oxford University Press, </publisher> <year> 1988. </year>
Reference-contexts: 1 Introduction The shortest superstring problem has applications in both computational biology <ref> [8, 18, 20] </ref> and data compression [11, 22]. We begin by briefly describing the former. DNA sequencing is the task of determining the sequence of nucleotides in a molecule of DNA.
Reference: [9] <author> N. Fine and H. Wilf. </author> <title> Uniqueness theorems for periodic functions. </title> <journal> Proceedings of the American Mathematical Society, </journal> <volume> 16 </volume> <pages> 109-114, </pages> <year> 1965. </year>
Reference-contexts: The key to our new algorithm is to exploit the periodic structure of the cycles of strings that arise in this problem. In particular, the 3-approximation of [5] uses a theorem about infinite periodic functions <ref> [9] </ref>, and the correspondence between periodic functions and strings in cycles. However, the particular instances of cycle patching that appear to be difficult actually involve short periodic strings, that is, strings that are periodic, but whose period may repeat only slightly more than once.
Reference: [10] <author> A.M. Frieze, G. Galbiati, and F. Maffoli. </author> <title> On the worst case performance of some algorithms for the asymmetric travelling salesman problem. </title> <journal> Networks, </journal> <volume> 12 </volume> <pages> 23-39, </pages> <year> 1982. </year> <month> 23 </month>
Reference-contexts: Since jpref (s i ; s j )j js i j, we can conclude that opt (T SP ) opt (S), where opt (T SP ) is the optimal solution to TSP defined above. This TSP is directed (sometimes called asymmetric); thus the best known approximation <ref> [10] </ref> is only within a factor of O (log n). Therefore, we must exploit more of the structure of the problem in order to achieve better bounds.
Reference: [11] <author> J. Gallant, D. Maier, and J. Storer. </author> <title> On finding minimal length superstrings. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 20 </volume> <pages> 50-58, </pages> <year> 1980. </year>
Reference-contexts: 1 Introduction The shortest superstring problem has applications in both computational biology [8, 18, 20] and data compression <ref> [11, 22] </ref>. We begin by briefly describing the former. DNA sequencing is the task of determining the sequence of nucleotides in a molecule of DNA. These nucleotides are one of adenine, cytosine, guanine, and thymine, and are typically represented by the alphabet fa; c; g; tg. <p> The shortest superstring problem is the problem of finding a superstring ff of minimum length. The shortest superstring problem was shown to be NP-hard by Gallant, Maier and Storer <ref> [11] </ref>; it was later shown to be MAX SNP-hard [5].
Reference: [12] <author> D. Gusfield, G. Landau, and B. Schieber. </author> <title> An efficient algorithm for the all pairs suffix-prefix problem. </title> <journal> Information Processing Letters, </journal> (41):181-185, March 1992. 
Reference-contexts: Each string is therefore included in the solution ff. G-ShortString runs in polynomial time. The distance graph G can be built in O (jSj + n 2 ) time <ref> [12] </ref>, and the cycle cover computations take O (n 3 ) time [19]. These two results determine the running time of Generic, O (jSj + n 3 ). In addition, our procedure G-FindReps (c) must find all of the 2 3 -repeaters in each cycle c 2 C.
Reference: [13] <author> Tao Jiang, Zhigen Jiang, and Dany Breslauer. </author> <title> Rotation of periodic strings and short super-strings. </title> <booktitle> In Third South American Conference on String Processing, </booktitle> <month> August </month> <year> 1996. </year> <note> To Appear. </note>
Reference-contexts: In this paper we describe our 2 2 3 -approximation algorithm for the shortest superstring problem. Algorithmically, our approach is a generalization of the one taken in [1], but the analysis is very different. Independently of our work, Jiang et al. <ref> [13] </ref> have also obtained a 2 2 3 -approximation using similar methods. More recently, Z Sweedyk [23] has obtained a 2 1 2 approximation. Our approach introduces techniques for the analysis of complex periodic strings that may be of use in attaining subsequent improvements to the approximation ratio.
Reference: [14] <author> Tao Jiang and Ming Li. </author> <title> Approximating shortest superstrings with constraints. </title> <journal> Therotical Computer Science, </journal> (134):473-491, 1994. 
Reference: [15] <author> J.D. Kececioglu and E.W. Myers. </author> <title> Combinatorial algorithms for dna sequence assembly. </title> <journal> Algo-rithmica, </journal> 13(1/2):7-51, 1995. 
Reference: [16] <author> John D. Kececioglu. </author> <title> Exact and approximation algorithms for DNA sequence reconstruction. </title> <type> PhD thesis, </type> <institution> University of Arizona, </institution> <year> 1991. </year>
Reference: [17] <author> R. Kosaraju, J. Park, and C. Stein. </author> <title> Long tours and short superstrings. </title> <booktitle> In Proceedings of the 35th Annual Symposium on Foundations of Computer Science, </booktitle> <month> November </month> <year> 1994. </year>
Reference-contexts: Other algorithms were later shown to produce approximations of 2 8 6 , and slightly better than 2:8 (Teng and Yao [24], Czumaj et al. [7], and Kosaraju et al. <ref> [17] </ref>, respectively). Our result of 2 3 4 [1, 2] was the best known until recently, and when combined with the algorithm of [17] achieves an approximation ratio of about 2:725. In this paper we describe our 2 2 3 -approximation algorithm for the shortest superstring problem. <p> later shown to produce approximations of 2 8 6 , and slightly better than 2:8 (Teng and Yao [24], Czumaj et al. [7], and Kosaraju et al. <ref> [17] </ref>, respectively). Our result of 2 3 4 [1, 2] was the best known until recently, and when combined with the algorithm of [17] achieves an approximation ratio of about 2:725. In this paper we describe our 2 2 3 -approximation algorithm for the shortest superstring problem. Algorithmically, our approach is a generalization of the one taken in [1], but the analysis is very different. <p> A superstring that has minimum length, or distance, also has maximum overlap. However, this correspondence breaks down for approximations; approximating the largest overlap appears to be an easier problem (cf. <ref> [25, 24, 17] </ref>) than approximating the shortest superstring. We use the conventional notation t k to denote the concatentation of k copies of a string t, and t 1 to denote the semi-infinite string ttt : : :.
Reference: [18] <author> M. Li. </author> <title> Towards a DNA sequencing theory (learning a string). </title> <booktitle> In Proceedings of the 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 125-134, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction The shortest superstring problem has applications in both computational biology <ref> [8, 18, 20] </ref> and data compression [11, 22]. We begin by briefly describing the former. DNA sequencing is the task of determining the sequence of nucleotides in a molecule of DNA.
Reference: [19] <author> Christos H. Papadimitriou and Kenneth Steiglitz. </author> <title> Combinatorial Optimization, Algorithms and Complexity. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1982. </year>
Reference-contexts: A minimum-cost cycle cover can be computed in O (n 3 ) time by a well-known reduction to the assignment problem <ref> [19] </ref>. Since a tour is a cycle cover, d (C) opt (T SP ). As noted above, opt (T SP ) opt (S), so the weight of the cycle cover d (C) gives us a lower bound on the length of the optimal solution opt (S). <p> Each string is therefore included in the solution ff. G-ShortString runs in polynomial time. The distance graph G can be built in O (jSj + n 2 ) time [12], and the cycle cover computations take O (n 3 ) time <ref> [19] </ref>. These two results determine the running time of Generic, O (jSj + n 3 ). In addition, our procedure G-FindReps (c) must find all of the 2 3 -repeaters in each cycle c 2 C.
Reference: [20] <author> H. Peltola, H. Soderlund, J. Tarjio, and E. Ukkonen. </author> <title> Algorithms for some string matching problems arising in molecular genetics. </title> <booktitle> In Proceedings of the IFIP Congress, </booktitle> <pages> pages 53-64, </pages> <year> 1983. </year>
Reference-contexts: 1 Introduction The shortest superstring problem has applications in both computational biology <ref> [8, 18, 20] </ref> and data compression [11, 22]. We begin by briefly describing the former. DNA sequencing is the task of determining the sequence of nucleotides in a molecule of DNA.
Reference: [21] <author> Graham A. Stephen. </author> <title> String searching algorithms. </title> <publisher> World Scientific, </publisher> <year> 1994. </year>
Reference: [22] <author> J. Storer. </author> <title> Data compression: methods and theory. </title> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference-contexts: 1 Introduction The shortest superstring problem has applications in both computational biology [8, 18, 20] and data compression <ref> [11, 22] </ref>. We begin by briefly describing the former. DNA sequencing is the task of determining the sequence of nucleotides in a molecule of DNA. These nucleotides are one of adenine, cytosine, guanine, and thymine, and are typically represented by the alphabet fa; c; g; tg.
Reference: [23] <author> Z Sweedyk. </author> <title> A 2-1/2 approximation algorithm for shortest superstring. </title> <type> received 6/94, </type> <month> June </month> <year> 1996. </year>
Reference-contexts: Algorithmically, our approach is a generalization of the one taken in [1], but the analysis is very different. Independently of our work, Jiang et al. [13] have also obtained a 2 2 3 -approximation using similar methods. More recently, Z Sweedyk <ref> [23] </ref> has obtained a 2 1 2 approximation. Our approach introduces techniques for the analysis of complex periodic strings that may be of use in attaining subsequent improvements to the approximation ratio. We now give a brief overview of our approach.
Reference: [24] <author> Shang-Hua Teng and Frances Yao. </author> <title> Approximating shortest superstrings. </title> <booktitle> In Proceedings of the 34th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 158-165, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Other algorithms were later shown to produce approximations of 2 8 6 , and slightly better than 2:8 (Teng and Yao <ref> [24] </ref>, Czumaj et al. [7], and Kosaraju et al. [17], respectively). Our result of 2 3 4 [1, 2] was the best known until recently, and when combined with the algorithm of [17] achieves an approximation ratio of about 2:725. <p> Given this understanding, we will be able to predict the ways in which overlap between certain strings can occur, and thus plan for it algorithmically. 2 Preliminaries For consistency, we use some notation and definitions of [5] and <ref> [24] </ref>. We assume, without loss of generality, that the set S of strings is substring free; i.e., no s j is a substring of s i , i 6= j. <p> A superstring that has minimum length, or distance, also has maximum overlap. However, this correspondence breaks down for approximations; approximating the largest overlap appears to be an easier problem (cf. <ref> [25, 24, 17] </ref>) than approximating the shortest superstring. We use the conventional notation t k to denote the concatentation of k copies of a string t, and t 1 to denote the semi-infinite string ttt : : :. <p> We now describe a generic version of a superstring algorithm from [5] that is also used in some form by <ref> [24] </ref> and [7]. An execution of the algorithm appears as Fig. 2. Generic SuperString Algorithm (1) Find a minimum cost cycle cover C in the distance graph G. (2) For each cycle c 2 C, choose one string to be a representative r c .
Reference: [25] <author> J. Turner. </author> <title> Approximation algorithms for the shortest common superstring problem. </title> <journal> Information and Computation, </journal> <volume> 83 </volume> <pages> 1-20, </pages> <year> 1989. </year> <month> 24 </month>
Reference-contexts: A superstring that has minimum length, or distance, also has maximum overlap. However, this correspondence breaks down for approximations; approximating the largest overlap appears to be an easier problem (cf. <ref> [25, 24, 17] </ref>) than approximating the shortest superstring. We use the conventional notation t k to denote the concatentation of k copies of a string t, and t 1 to denote the semi-infinite string ttt : : :.
References-found: 25

