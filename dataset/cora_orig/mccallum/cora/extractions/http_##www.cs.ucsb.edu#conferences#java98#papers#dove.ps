URL: http://www.cs.ucsb.edu/conferences/java98/papers/dove.ps
Refering-URL: http://www.cs.ucsb.edu/conferences/java98/program.html
Root-URL: http://www.cs.ucsb.edu
Email: fmark, jaing@oce.orst.edu  
Title: DOVE: Distributed Objects based scientific Visualization Environment  
Author: Mark Abbott Lalit Kumar Jain 
Keyword: Distributed Object Computing, Component model, Multi-tier architecture, Scientific data visualization, CORBA, Java IDL, JavaBeans, JDBC, SQL database.  
Address: Corvallis, OR 97331  
Affiliation: College of Oceanic and Atmospheric Sciences Oregon State University  
Abstract: This paper describes the design and performance of a distributed, multi-tier architecture for scientific data visualization. A novel aspect of this framework is its integration of Java IDL, the CORBA distributed object computing mid-dleware with JavaBeans, the Java Component model to provide a flexible, interactive framework for distributed, high-performance scientific data visualization. CORBA server objects running in a distributed collaborative environment provide data acquisition and perform data-intensive computations. Clients as Java Bean components use these server objects for data retrieval and provide an environment for visualization. The server objects use JDBC, the Java application programming interface to SQL databases, to retrieve data from the database. We discuss the system framework and its components and describe an example application and its performance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> James Gosling, Henry McGilton, </author> <title> "The Java Language Environment" , A White Paper, </title> <month> May </month> <year> 1996. </year>
Reference-contexts: Thus, distributed object computing has the ability to improve performance through parallel processing. Blending the flexibility of component-based software development with the power of distributed object computing results in a flexible, efficient distributed computing environment for scientific visualization. Java is a simple, object-oriented, architecture-neutral, portable and multithreaded programming language <ref> [1] </ref>. It is almost the ideal language for writing portable client/server objects. But it needs an intergalactic distributed object infrastructure to complement its capabilities for high-performance, distributed object computing. This is where CORBA comes into picture. CORBA is an emerging standard for distributed object computing sponsored by the OMG [4].
Reference: [2] <author> Jade Goldstein, Steven F. Roth, </author> <title> "A Framework for Knowledge-Based Interactive Data Exploration", </title> <institution> Carnegie Mellon University. </institution>
Reference-contexts: 1 Introduction Two key requirements of an interactive visualization system for scientific data exploration are flexibility and performance. The purpose of a data exploration system is to enable users to uncover and extract relationships hidden in large data sets <ref> [2] </ref>. This usually requires flexible data manipulation mechanisms which provide a complete coverage of operations needed by the users. The tools available to users should enable them to form ad hoc groupings of data so as to facilitate understanding of the relationships latent within the data. <p> Component-based software development is a promising technology which is gaining rapid popularity because it naturally extends the object-oriented paradigm by emphasizing modularity and reusability. Components are self-contained reusable elements of software that can be controlled and assembled dynamically to form applications <ref> [2] </ref>. Components can be customized and interactions between them defined at design or run time providing a flexible framework for custom application development. On the other hand, the distributed computing paradigm brings in the idea of distributing the computation by harnessing geographically-remote resources.
Reference: [3] <author> Robert Englander, </author> <title> "Developing JAVA Beans", The Java Series, </title> <address> O'Reilly, </address> <month> June </month> <year> 1997. </year>
Reference: [4] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <publisher> 2.0. </publisher>
Reference-contexts: It is almost the ideal language for writing portable client/server objects. But it needs an intergalactic distributed object infrastructure to complement its capabilities for high-performance, distributed object computing. This is where CORBA comes into picture. CORBA is an emerging standard for distributed object computing sponsored by the OMG <ref> [4] </ref>. CORBA provides a flexible high-level distributed object computing middleware. Pools of server objects can communicate using the CORBA ORB. These objects can run on multiple servers to provide load-balancing for incoming client requests.
Reference: [5] <author> S.Landis, S.Maffeis, </author> <title> "Building Reliable Distributed Systems with CORBA", Theory and Practice of Object Systems, </title> <publisher> John Wiley Publisher, </publisher> <address> NY, </address> <month> April </month> <year> 1997. </year>
Reference-contexts: Non-availability of Server Objects would result in inaccessibility of the database. One technique for improving Server availability is replication of Server Objects to form an object group <ref> [5] </ref>. In our system, the Dispenser allows multiple Servers Objects of the same type to register with it. 4.2 Reliability Distributed application often require substantial effort to achieve levels of reliability equivalent to those expected from stand-alone applications.
Reference: [6] <institution> Earth Observing System project, </institution> <note> http://eos.nasa.gov </note>
Reference-contexts: reusable software components which can be visually manipulated and dynamically assembled in a wide variety of application builder tools to form working applications. 1 2 Distributed, Three-tier Frame- work for Scientific Visualization 2.1 Example Data Domain This work is being done as part of the Earth Observing System (EOS) project <ref> [6] </ref> at the College of Oceanic and Atmospheric Sciences, Oregon State University. EOS is part of NASA's effort to study global climate change.
Reference: [7] <author> VisiBroker for Java: </author> <title> Programmer's guide, </title> <journal> Visigenic Software </journal>
Reference-contexts: For example, if an object A which uses the Java IDL ORB [9] needs to communicate with an object B which uses the VisiBroker ORB <ref> [7] </ref> and B is registered with the VisiBroker's directory service osagent, the Java IDL object A cannot access the osagent to get a reference to B.
Reference: [8] <author> Sun Microsystems, </author> <title> The JDBC Database Access API specification 1.10 </title>
Reference-contexts: Upon creation, a Server Proxy gets a reference to its Server Object which it will use for further communication with the Server Object. Database Handlers Every Server Object uses a Database Handler for communicating with the database. We use JDBC <ref> [8] </ref> for connecting to the database and querying it. A Database Handler converts Client queries into database specific queries and returns the results back to the Server Object. 2 Computation Server Objects A Computation Server Object assists an Application Server Object in performing computation-intensive tasks.
Reference: [9] <author> Sun Microsystems, </author> <title> The Java IDL via http://java.sun. com/products/jdk/1.2/docs/guide/idl/index.html </title>
Reference-contexts: However, these nameservice implementations are not in-teroperable; that is, objects written using one ORB cannot register with or look into the nameservice of another ORB implementation. For example, if an object A which uses the Java IDL ORB <ref> [9] </ref> needs to communicate with an object B which uses the VisiBroker ORB [7] and B is registered with the VisiBroker's directory service osagent, the Java IDL object A cannot access the osagent to get a reference to B.
Reference: [10] <author> Sun Microsystems, </author> <title> The JavaBeans specification 5 </title>
Reference-contexts: These objects can run on multiple servers to provide load-balancing for incoming client requests. CORBA's distributed object infrastructure makes it easier to write robust networked objects and coupled with Java's built-in multithreading helps achieve high performance. The Java Beans architecture <ref> [10] </ref> brings the much needed component development model to Java. JavaBeans is a platform-neutral architecture which extends Java's "Write Once, Run Everywhere" capability to component development.
References-found: 10

