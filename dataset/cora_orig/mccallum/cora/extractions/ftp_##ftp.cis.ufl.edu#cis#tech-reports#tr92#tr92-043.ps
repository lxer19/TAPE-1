URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr92/tr92-043.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr92-abstracts.html
Root-URL: http://www.cis.ufl.edu
Email: email: fdh2, ted, sharmag@cis.ufl.edu  
Title: Real-Time Transaction Scheduling A Cost Conscious Approach  
Author: D. Hong T. Johnson S. Chakravarthy 
Address: Building  Gainesville, Florida 32611  
Note: UF-CIS-TR-92-043 (Submited for publication) (This work was supported by the National Science Foundation Research Initiation Grant IRI-9011216 and in part by the  
Affiliation: University of Florida Computer and Information Sciences  Florida High Technology and Industry Council.) Department of Computer and Information Sciences Computer Science Engineering  University of Florida  
Abstract-found: 0
Intro-found: 1
Reference: [AGM88a] <author> Robert Abbot and Hector Garcia-Molina. </author> <title> Scheduling real-time transactions. </title> <booktitle> SIGMOD RECORD, </booktitle> <volume> 17(1) </volume> <pages> 71-81, </pages> <year> 1988. </year>
Reference-contexts: Priority scheduling without knowing the data access pattern is presented as a representative of algorithms with incomplete knowledge of resource requirements. The works in <ref> [AGM88a, AGM88b, AGM89, HSRT91, Har91, SZ88] </ref> fall into this category. <p> The works in [AGM88a, AGM88b, AGM89, HSRT91, Har91, SZ88] fall into this category. Earliest Deadline First (EDF), Least Slack First (LSF) priority assignment policy with High Priority (HP) concur-rency control method and Conditional Restart with estimated execution time on the main memory resident databases were proposed in <ref> [AGM88a, AGM88b] </ref>. [AGM89] extends the above to disk 2 resident database environments. An optimistic concurrency control scheme with a deadline and transaction length based priority assignment scheme [HSRT91] and an optimistic concurrency control with Adaptive EDF have also been proposed [Har91]. <p> However, EDF-WP causes too much waiting due to its nonabortive conflict resolution method, furthermore EDF-WP has deadlock problems. Several hybrid methods that use combinations of abortive and nonabortive methods have been proposed <ref> [AGM88a, SZ88] </ref>. These methods make decisions about transaction blocking and rollback using additional information like slack time or estimated execution time. However, they still have deadlock problems. In this paper, we introduce the cost conscious approach (CCA) to real-time transaction processing. <p> They require different scheduling disciplines because of their different restrictions [Har91]. Data conflict If there is a data conflict between two transactions, a priority-based wound-wait strategy [BMH89] is the simplest to implement. The Conditional Restart algorithm with an estimated execution time <ref> [AGM88a] </ref> has been proposed to avoid needless aborts and rollback. The algorithm, however, has unpredictable blocking of high priority transactions due to deadlock, arrival of intermediate priority transactions, and chain blocking. <p> After the peak, it is usually the case that the currently running transaction arrived a long time ago, but could not get system services due to the heavy load on the system. Thus, fewer transactions are preempted and there are fewer opportunities for restarts <ref> [AGM88a] </ref>. The improvement graph of CCA over EDF-HP is almost the same shape as the graph of transaction abort. Before this peak point, CCA makes better decisions about transaction aborts and restarts than EDF-HP, which improves performance.
Reference: [AGM88b] <author> Robert Abbot and Hector Garcia-Molina. </author> <title> Scheduling real-time transactions: a performance evaluation. </title> <booktitle> In Proceedings of the 14th Very Large DataBase Conference, </booktitle> <pages> pages 1-12. </pages> <publisher> ACM, </publisher> <year> 1988. </year>
Reference-contexts: Priority scheduling without knowing the data access pattern is presented as a representative of algorithms with incomplete knowledge of resource requirements. The works in <ref> [AGM88a, AGM88b, AGM89, HSRT91, Har91, SZ88] </ref> fall into this category. <p> The works in [AGM88a, AGM88b, AGM89, HSRT91, Har91, SZ88] fall into this category. Earliest Deadline First (EDF), Least Slack First (LSF) priority assignment policy with High Priority (HP) concur-rency control method and Conditional Restart with estimated execution time on the main memory resident databases were proposed in <ref> [AGM88a, AGM88b] </ref>. [AGM89] extends the above to disk 2 resident database environments. An optimistic concurrency control scheme with a deadline and transaction length based priority assignment scheme [HSRT91] and an optimistic concurrency control with Adaptive EDF have also been proposed [Har91]. <p> Sections 4 and 5 compare our approach to EDF-HP (EDF priority assignment policy with High Priority conflict resolution method <ref> [AGM88b] </ref>) for main memory and disk resident database respectively through a simulation. Section 6 contains conclusion and future research. 3 Cost Conscious Approach (CCA) A static priority assignment is not adequate in a real-time transaction processing system because it cannot consider the urgency of deadline. <p> The system might use different priority assignment policies for different resource types. Whenever a resource conflict occurs, a priority is used to resolve the conflict. In <ref> [AGM88b, SZ88] </ref> they use different priority assignment policies for CPU and data conflict in order to cope with their different restrictions. But if we use different priority assignment policies for different resource types we might have a priority reversal that causes deadlock problems [BMH89]. <p> But if a set of transactions are deadlocked (they access the same data items in different order), the Conditional Restart method can degrade performance. The idea of HP <ref> [AGM88b, AGM89] </ref>, which is the same as the priority-based wound-wait strategy [BMH89], is to resolve a conflict in favor of the transaction with the higher priority. In our approach, whenever a data conflict occurs, the running transaction aborts the conflicting transactions. <p> But in real-time transaction scheduling, the cost incurred at run time to keep the database consistent should be considered as a key factor. EDF-HP and Priority Ceiling Protocol are the extreme methods that use abort and wait respectively in order to solve data conflicts. Even though Conditional Restart method <ref> [AGM88b] </ref> and Stankovic's two protocols [SZ88] have been suggested as a compromise between abort and wait method, they all have deadlock problems. In this paper, we have proposed a new real-time transaction scheduling algorithm that has a cost conscious dynamic priority assignment policy.
Reference: [AGM89] <author> Robert Abbot and Hector Garcia-Molina. </author> <title> Scheduling real-time transactions with disk resident data. </title> <booktitle> In Proceedings of the 15th Very Large DataBase Conference, </booktitle> <pages> pages 385-396. </pages> <publisher> ACM, </publisher> <year> 1989. </year>
Reference-contexts: Priority scheduling without knowing the data access pattern is presented as a representative of algorithms with incomplete knowledge of resource requirements. The works in <ref> [AGM88a, AGM88b, AGM89, HSRT91, Har91, SZ88] </ref> fall into this category. <p> The works in [AGM88a, AGM88b, AGM89, HSRT91, Har91, SZ88] fall into this category. Earliest Deadline First (EDF), Least Slack First (LSF) priority assignment policy with High Priority (HP) concur-rency control method and Conditional Restart with estimated execution time on the main memory resident databases were proposed in [AGM88a, AGM88b]. <ref> [AGM89] </ref> extends the above to disk 2 resident database environments. An optimistic concurrency control scheme with a deadline and transaction length based priority assignment scheme [HSRT91] and an optimistic concurrency control with Adaptive EDF have also been proposed [Har91]. <p> Thus EDF-HP causes too many transaction aborts. In order to solve the problem of too many transaction aborts of EDF-HP, EDF-WP (EDF priority assignment policy with Wait Promote conflict resolution method <ref> [AGM89] </ref>) has been proposed. However, EDF-WP causes too much waiting due to its nonabortive conflict resolution method, furthermore EDF-WP has deadlock problems. Several hybrid methods that use combinations of abortive and nonabortive methods have been proposed [AGM88a, SZ88]. <p> But if a set of transactions are deadlocked (they access the same data items in different order), the Conditional Restart method can degrade performance. The idea of HP <ref> [AGM88b, AGM89] </ref>, which is the same as the priority-based wound-wait strategy [BMH89], is to resolve a conflict in favor of the transaction with the higher priority. In our approach, whenever a data conflict occurs, the running transaction aborts the conflicting transactions. <p> IO conflict If the real-time database contains disk resident data, a transaction might perform many IO waits during its execution. Several real-time IO scheduling methods have been proposed <ref> [AGM89, CBB + 89] </ref> in order to reduce IO wait. Disk IO introduces new problems in real-time transaction scheduling. Consider the following scenario: Transaction T 1 is blocked and is waiting for an IO completion.
Reference: [BMH89] <author> A. Buchmann, D.R. McCarthy, and M. Hsu. </author> <title> Time-critical database scheduling: A framework for integrating real-time scheduling and concurrency control. </title> <booktitle> In Proceedings of the Fifth Conference on Data Engineering, </booktitle> <pages> pages 470-480, </pages> <month> Feb </month> <year> 1989. </year>
Reference-contexts: Optimistic concurrency control scheme, however, shows better performance only for firm real-time transactions. Priority scheduling with transaction pre-analysis is introduced as another approach with more knowledge of resource requirements <ref> [BMH89, Sha88, SRSC91] </ref>. Conflict avoiding nonpreemptive method and Hybrid algorithms which use conflict avoiding scheme in the non-overload case and Conditional Restart conflict resolution method in the overload case have been proposed in [BMH89]. <p> Priority scheduling with transaction pre-analysis is introduced as another approach with more knowledge of resource requirements [BMH89, Sha88, SRSC91]. Conflict avoiding nonpreemptive method and Hybrid algorithms which use conflict avoiding scheme in the non-overload case and Conditional Restart conflict resolution method in the overload case have been proposed in <ref> [BMH89] </ref>. Static priority assignment based Priority Ceiling protocol using priority inheritance with exclusive lock and read/write Priority Ceiling protocol have been proposed in [Sha88] and [SRSC91]. <p> In [AGM88b, SZ88] they use different priority assignment policies for CPU and data conflict in order to cope with their different restrictions. But if we use different priority assignment policies for different resource types we might have a priority reversal that causes deadlock problems <ref> [BMH89] </ref>. <p> The main active resources in real-time database systems are the CPU and disk, and the passive resource is the data. They require different scheduling disciplines because of their different restrictions [Har91]. Data conflict If there is a data conflict between two transactions, a priority-based wound-wait strategy <ref> [BMH89] </ref> is the simplest to implement. The Conditional Restart algorithm with an estimated execution time [AGM88a] has been proposed to avoid needless aborts and rollback. The algorithm, however, has unpredictable blocking of high priority transactions due to deadlock, arrival of intermediate priority transactions, and chain blocking. <p> But if a set of transactions are deadlocked (they access the same data items in different order), the Conditional Restart method can degrade performance. The idea of HP [AGM88b, AGM89], which is the same as the priority-based wound-wait strategy <ref> [BMH89] </ref>, is to resolve a conflict in favor of the transaction with the higher priority. In our approach, whenever a data conflict occurs, the running transaction aborts the conflicting transactions.
Reference: [CBB + 89] <author> Sharma Chakravarthy, Barbara Blaustein, Alejandro Buchmann, Michael Carey, Umeshwar Dayal, David Goldhirsch, Meichun Hsu, Rivka Ladin Rajiv Jauhari, Miron Livny, Dennis McCarthy, Richard McKee, and Arnon Rosenthal. Hipac: </author> <title> A research project in active, time-constrained database management. </title> <note> Final technical report xait-89-02, XEROX, </note> <month> July </month> <year> 1989. </year>
Reference-contexts: IO conflict If the real-time database contains disk resident data, a transaction might perform many IO waits during its execution. Several real-time IO scheduling methods have been proposed <ref> [AGM89, CBB + 89] </ref> in order to reduce IO wait. Disk IO introduces new problems in real-time transaction scheduling. Consider the following scenario: Transaction T 1 is blocked and is waiting for an IO completion.
Reference: [FF91] <author> Borko Furht and Borivoje Furht. </author> <title> Real-time UNIX systems: design and application guide. </title> <publisher> Kluwer Academic, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: CPU conflict If we assume that we have a single CPU system, there are many opportunities for CPU scheduling. Whenever a new transaction arrives or a running transaction finishes, the scheduler is invoked. If the scheduler cannot be invoked immediately for several reasons (e.g Real-time UNIX <ref> [FF91] </ref>), the highest priority transaction can be selected from among 8 transactions that are in the ready queue or are currently running. When a running transaction finishes, all transactions blocked by the resources that currently running transaction hold wake up and move to ready queue.
Reference: [Fis92] <author> Paul A. Fishwick. </author> <title> SIMPACK:C-based Simulation Tool Package Version 2. </title> <institution> University of Florida, </institution> <year> 1992. </year>
Reference-contexts: are aborted by T H then it does not pose any problem for maintaining the priority order either. 11 4 Simulation of main memory database In order to evaluate the performance of the CCA algorithm we wrote a simulation of real-time transaction scheduler using C language and SIMPACK simulation package <ref> [Fis92] </ref>. In this simulation we have single processor and memory resident database. We assume that whenever we assign new priorities we can decide whether the relationship is safe or unsafe with the help of our transaction pre-analysis method.
Reference: [Har91] <author> Jayant Ramaswamy Haritsa. </author> <title> Transaction scheduling in firm real-time database systems. </title> <type> Technical Report TR1036, </type> <institution> University of Wisconsin-Madison, </institution> <year> 1991. </year>
Reference-contexts: A timing constraint is expressed in the form of a deadline, and we schedule soft real-time transactions (i.e, they have timing constraints, but catastrophic results do not occur if the transaction misses its deadline [SZ88]). We assume that the transactions do not have firm deadlines <ref> [Har91] </ref>, so transactions that do not meet their deadlines are not dropped. <p> Priority scheduling without knowing the data access pattern is presented as a representative of algorithms with incomplete knowledge of resource requirements. The works in <ref> [AGM88a, AGM88b, AGM89, HSRT91, Har91, SZ88] </ref> fall into this category. <p> An optimistic concurrency control scheme with a deadline and transaction length based priority assignment scheme [HSRT91] and an optimistic concurrency control with Adaptive EDF have also been proposed <ref> [Har91] </ref>. Optimistic concurrency control scheme, however, shows better performance only for firm real-time transactions. Priority scheduling with transaction pre-analysis is introduced as another approach with more knowledge of resource requirements [BMH89, Sha88, SRSC91]. <p> The weakness of EDF under high level of resource and data contention is that this policy causes most transactions to miss their deadlines since they receive high priority only when they are close to missing their deadline <ref> [Har91] </ref>. If EDF is combined with High Priority (HP) conflict resolution method, the transaction restart and rollback easily makes the system heavily loaded. Thus EDF-HP causes too many transaction aborts. <p> The main active resources in real-time database systems are the CPU and disk, and the passive resource is the data. They require different scheduling disciplines because of their different restrictions <ref> [Har91] </ref>. Data conflict If there is a data conflict between two transactions, a priority-based wound-wait strategy [BMH89] is the simplest to implement. The Conditional Restart algorithm with an estimated execution time [AGM88a] has been proposed to avoid needless aborts and rollback.
Reference: [HCL90] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Livny. </author> <title> On being optimistic about real-time constraints. </title> <booktitle> ACM SIGMOD, </booktitle> <year> 1990. </year>
Reference-contexts: The 20 % miss rate indicates an overload condition <ref> [HCL90] </ref> requiring specialized mechanisms. shows upto 30 % and 20 % improvement in terms of mean lateness and miss percent respectively.
Reference: [HSRT91] <author> Jiandong Hyang, John A. Stankovic, Krithi Ramamritham, and Don Towsley. </author> <title> Experimental evaluation of real-time optimistic concurrency control schemes. </title> <booktitle> In Proceedings of the 17th Very Large DataBase Conference, </booktitle> <pages> pages 35-46. </pages> <publisher> ACM, </publisher> <year> 1991. </year>
Reference-contexts: Priority scheduling without knowing the data access pattern is presented as a representative of algorithms with incomplete knowledge of resource requirements. The works in <ref> [AGM88a, AGM88b, AGM89, HSRT91, Har91, SZ88] </ref> fall into this category. <p> An optimistic concurrency control scheme with a deadline and transaction length based priority assignment scheme <ref> [HSRT91] </ref> and an optimistic concurrency control with Adaptive EDF have also been proposed [Har91]. Optimistic concurrency control scheme, however, shows better performance only for firm real-time transactions. Priority scheduling with transaction pre-analysis is introduced as another approach with more knowledge of resource requirements [BMH89, Sha88, SRSC91].
Reference: [LL73] <author> C.L. Liu and J.W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard real-time environment. </title> <journal> JACM, </journal> <pages> pages 46-61, </pages> <year> 1973. </year>
Reference-contexts: A dynamic priority assignment 7 policy can use a static evaluation method which evaluates the priority only once (e.g. EDF), or a continuous evaluation method which evaluates the priority several times (e.g, LSF) during the execution of a transaction. Even though several static priority assignment policies have been proposed <ref> [LL73] </ref>, they do not capture all the dynamic features of database transactions.
Reference: [Sha88] <author> Lui Sha. </author> <title> Concurrency control for distributed real-time databases. </title> <booktitle> SIGMOD RECORD, </booktitle> <volume> 17(1) </volume> <pages> 82-98, </pages> <year> 1988. </year>
Reference-contexts: Optimistic concurrency control scheme, however, shows better performance only for firm real-time transactions. Priority scheduling with transaction pre-analysis is introduced as another approach with more knowledge of resource requirements <ref> [BMH89, Sha88, SRSC91] </ref>. Conflict avoiding nonpreemptive method and Hybrid algorithms which use conflict avoiding scheme in the non-overload case and Conditional Restart conflict resolution method in the overload case have been proposed in [BMH89]. <p> Static priority assignment based Priority Ceiling protocol using priority inheritance with exclusive lock and read/write Priority Ceiling protocol have been proposed in <ref> [Sha88] </ref> and [SRSC91]. In this paper we propose a new transaction pre-analysis based real-time transaction scheduling algorithm which includes a novel transaction analysis scheme and a cost conscious dynamic priority assignment policy. Our approach overcomes the problems inherent to pessimistic transaction analysis methods and non-adaptive EDF algorithms. <p> The algorithm, however, has unpredictable blocking of high priority transactions due to deadlock, arrival of intermediate priority transactions, and chain blocking. The problem of unpredictable blocking due to arrival of intermediate priority transaction and chain blocking can be solved with priority inheritance <ref> [Sha88] </ref>. But if a set of transactions are deadlocked (they access the same data items in different order), the Conditional Restart method can degrade performance.
Reference: [SRSC91] <author> Lui Sha, Ragunathan Rajkumar, Sang Hyuk Son, and Chun-Hyun Chang. </author> <title> A real-time locking protocol. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(7) </volume> <pages> 793-800, </pages> <year> 1991. </year>
Reference-contexts: Optimistic concurrency control scheme, however, shows better performance only for firm real-time transactions. Priority scheduling with transaction pre-analysis is introduced as another approach with more knowledge of resource requirements <ref> [BMH89, Sha88, SRSC91] </ref>. Conflict avoiding nonpreemptive method and Hybrid algorithms which use conflict avoiding scheme in the non-overload case and Conditional Restart conflict resolution method in the overload case have been proposed in [BMH89]. <p> Static priority assignment based Priority Ceiling protocol using priority inheritance with exclusive lock and read/write Priority Ceiling protocol have been proposed in [Sha88] and <ref> [SRSC91] </ref>. In this paper we propose a new transaction pre-analysis based real-time transaction scheduling algorithm which includes a novel transaction analysis scheme and a cost conscious dynamic priority assignment policy. Our approach overcomes the problems inherent to pessimistic transaction analysis methods and non-adaptive EDF algorithms.
Reference: [SZ88] <author> John A. Stankovic and Wei Zhao. </author> <title> On real-time transactions. </title> <booktitle> SIGMOD RECORD, </booktitle> <volume> 17(1) </volume> <pages> 4-18, </pages> <year> 1988. </year>
Reference-contexts: A timing constraint is expressed in the form of a deadline, and we schedule soft real-time transactions (i.e, they have timing constraints, but catastrophic results do not occur if the transaction misses its deadline <ref> [SZ88] </ref>). We assume that the transactions do not have firm deadlines [Har91], so transactions that do not meet their deadlines are not dropped. <p> Priority scheduling without knowing the data access pattern is presented as a representative of algorithms with incomplete knowledge of resource requirements. The works in <ref> [AGM88a, AGM88b, AGM89, HSRT91, Har91, SZ88] </ref> fall into this category. <p> However, EDF-WP causes too much waiting due to its nonabortive conflict resolution method, furthermore EDF-WP has deadlock problems. Several hybrid methods that use combinations of abortive and nonabortive methods have been proposed <ref> [AGM88a, SZ88] </ref>. These methods make decisions about transaction blocking and rollback using additional information like slack time or estimated execution time. However, they still have deadlock problems. In this paper, we introduce the cost conscious approach (CCA) to real-time transaction processing. <p> The system might use different priority assignment policies for different resource types. Whenever a resource conflict occurs, a priority is used to resolve the conflict. In <ref> [AGM88b, SZ88] </ref> they use different priority assignment policies for CPU and data conflict in order to cope with their different restrictions. But if we use different priority assignment policies for different resource types we might have a priority reversal that causes deadlock problems [BMH89]. <p> EDF-HP and Priority Ceiling Protocol are the extreme methods that use abort and wait respectively in order to solve data conflicts. Even though Conditional Restart method [AGM88b] and Stankovic's two protocols <ref> [SZ88] </ref> have been suggested as a compromise between abort and wait method, they all have deadlock problems. In this paper, we have proposed a new real-time transaction scheduling algorithm that has a cost conscious dynamic priority assignment policy.
Reference: [XP90] <author> Jia Xu and David R. Parnas. </author> <title> Scheduling processes with release times, deadlines, prece-dence, and exclusion relations. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(3) </volume> <pages> 360-369, </pages> <year> 1990. </year>
Reference-contexts: When a transaction arrives, we assume that we know its deadline. 3.2 Motivation Consider the well known real-time priority assignment policies, EDF and LSF. In the context of real-time task scheduling, these policies are known to be acceptable <ref> [XP90, ZRS87b, ZRS87a] </ref>. However, these policies are not acceptable in the context of real-time transaction scheduling.
Reference: [ZRS87a] <author> Wei Zhao, Krithi Ramamritham, and John A. Stankovic. </author> <title> Preemptive scheduling under time and resource constraints. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 36(8) </volume> <pages> 949-960, </pages> <year> 1987. </year>
Reference-contexts: This dual requirement makes real-time transaction scheduling more difficult than task scheduling in real-time systems or transaction scheduling in database systems. Scheduling algorithms <ref> [ZRS87b, ZRS87a] </ref> used in current real-time systems assume apriori knowledge of tasks (arrival time, deadline, resource requirement, worst case execution time). For database applications, however, only part of such knowledge (arrival time, deadline, conservative data access pattern) is available. <p> When a transaction arrives, we assume that we know its deadline. 3.2 Motivation Consider the well known real-time priority assignment policies, EDF and LSF. In the context of real-time task scheduling, these policies are known to be acceptable <ref> [XP90, ZRS87b, ZRS87a] </ref>. However, these policies are not acceptable in the context of real-time transaction scheduling.
Reference: [ZRS87b] <author> Wei Zhao, Krithi Ramamritham, and John A. Stankovic. </author> <title> Scheduling tasks with requirement in hard real-time systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(5) </volume> <pages> 225-236, </pages> <year> 1987. </year> <title> (a) Miss percent of EDF,CCA (b) Improvement of CCA (c) Restart per transaction (d) Effect of high variance (e) Improvement (high variance) (f) Effect of DB size (a) Effect of penalty-weight (b) Miss percent of EDF, CCA (disk resident) (c) Restart per tr (disk resident) (d) Improvement of CCA (disk resident) (e) Effect of DB size (disk resident) (f) Effect of penalty-weight(disk resident) </title>
Reference-contexts: This dual requirement makes real-time transaction scheduling more difficult than task scheduling in real-time systems or transaction scheduling in database systems. Scheduling algorithms <ref> [ZRS87b, ZRS87a] </ref> used in current real-time systems assume apriori knowledge of tasks (arrival time, deadline, resource requirement, worst case execution time). For database applications, however, only part of such knowledge (arrival time, deadline, conservative data access pattern) is available. <p> When a transaction arrives, we assume that we know its deadline. 3.2 Motivation Consider the well known real-time priority assignment policies, EDF and LSF. In the context of real-time task scheduling, these policies are known to be acceptable <ref> [XP90, ZRS87b, ZRS87a] </ref>. However, these policies are not acceptable in the context of real-time transaction scheduling.
References-found: 17

