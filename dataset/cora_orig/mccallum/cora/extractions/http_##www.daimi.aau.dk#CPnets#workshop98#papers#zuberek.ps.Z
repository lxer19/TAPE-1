URL: http://www.daimi.aau.dk/CPnets/workshop98/papers/zuberek.ps.Z
Refering-URL: http://www.daimi.aau.dk/CPnets/workshop98/papers/
Root-URL: http://www.daimi.aau.dk
Title: Timed Colored Petri Net Models of Distributed Memory Multithreaded Multiprocessors  
Author: W.M. Zuberek R. Govindarajan and F. Suciu 
Address: St.John's, Canada A1B 3X5  Bangalore 560 012, India  
Affiliation: Department of Computer Science Memorial University of Newfoundland  Supercomputer Education and Research Center Indian Institute of Science  
Abstract: Distributed-memory multithreaded multiprocessors are composed of a number of (multithreaded) processors, each with its memory, and an interconnecting network. The long memory latencies and synchronization delays are tolerated by context switching, i.e., by suspending the current thread and switching the processor to another `ready' thread provided such a thread is available. Because of very simple representation of concurrency and synchronization, timed Petri net models seem to be well suited for modeling and evaluation of such systems. Colors are used to represent the progress of remote memory access requests in the interconnecting network as well as to fold the models of individual processors. This paper describes timed colored Petri net models of several multithreaded multiprocessor architectures, and presents some performance characteristics obtained by evaluation of these models. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Agrawal, A., Lim, B-H., Kranz, D., Kubiatowicz, J., </author> <month> "April: </month> <title> a processor architecture for multiprocessing"; Proc. </title> <booktitle> 17-th Annual Int. Symp. on Computer Architecture, </booktitle> <address> pp.104-114, </address> <year> 1990. </year>
Reference-contexts: The same hardware mechanisms can be used to synchronize interprocess communication and to alleviate operating system overheads. Several multithreaded architectures have recently been proposed which differ in the implementation of multithreading <ref> [1, 3, 5, 7, 9] </ref>. <p> encounters a load instruction, the processor switches to another thread after that load instruction is issued; the context switch is irrespective of whether the data is local or remote [3]. * Switching on remote load: processor switches to another thread only when current thread encounters an access to remote memory <ref> [1] </ref>. The nodes of a multithreaded multiprocessor are linked by an interconnecting network. This network can be a two-dimensional torus-like network or a hypercube-type connection. It is assumed that all messages in the system are routed along the shortest paths, but in a non-deterministic manner.
Reference: [2] <author> Agrawal, A., </author> <title> "Limits on interconnection network performance"; IEEE Trans. </title> <booktitle> on Parallel and Distributed Systems, vol.2, </booktitle> <address> no.4, pp.398-412, </address> <year> 1991. </year>
Reference-contexts: The performance of multithreaded architectures have been evaluated using discrete-event simulation [9, 12, 7], analytical models | using either queuing networks or Petri nets <ref> [2, 17] </ref>, or using trace-driven simulation [19]. Event-driven simulation of the timed colored net models [21] was used to obtain the results presented in this paper.
Reference: [3] <author> Alverson, R., Callahan, D., Cummings, D., Koblenz, B., Posterfield, A., Smith, B., </author> <booktitle> "The Tera computer system"; Proc. Int. Conf. on Supercomputing, </booktitle> <address> Amsterdam, The Netherlands, pp.1-6, </address> <year> 1990. </year>
Reference-contexts: The same hardware mechanisms can be used to synchronize interprocess communication and to alleviate operating system overheads. Several multithreaded architectures have recently been proposed which differ in the implementation of multithreading <ref> [1, 3, 5, 7, 9] </ref>. <p> Switching on block of instructions: blocks of instructions from different threads are interleaved. * Switching on every load: whenever a thread encounters a load instruction, the processor switches to another thread after that load instruction is issued; the context switch is irrespective of whether the data is local or remote <ref> [3] </ref>. * Switching on remote load: processor switches to another thread only when current thread encounters an access to remote memory [1]. The nodes of a multithreaded multiprocessor are linked by an interconnecting network. This network can be a two-dimensional torus-like network or a hypercube-type connection.
Reference: [4] <author> Boothe, B. and Ranade, A., </author> <title> "Improved multithreading techniques for hiding communication latency in multiprocessors"; Proc. </title> <booktitle> 19-th Annual Int. Symp. on Computer Architecture, </booktitle> <address> pp.214-223, </address> <year> 1992. </year>
Reference-contexts: The same hardware mechanisms can be used to synchronize interprocess communication and to alleviate operating system overheads. Several multithreaded architectures have recently been proposed which differ in the implementation of multithreading [1, 3, 5, 7, 9]. Switching from one thread to another can be performed under different circumstances <ref> [4] </ref>: * Switching on every instruction: one instruction is picked from each of runnable threads and is inserted into the processor's pipeline; if there are many threads, then each stage of the pipeline is executing an instruction from a different thread, and no instruction dependency problems exist [18]. * Switching on
Reference: [5] <author> Culler, D.E., et al., </author> <title> "Fine-grain parallelism with minimal hardware support: a compiler controlled threaded abstract machine"; Proc. </title> <booktitle> 4-th Int. Conf. on Architectural Support of Programming Languages and Operating Systems, </booktitle> <address> Santa Clara, CA, pp.164-175, </address> <year> 1991. </year>
Reference-contexts: The same hardware mechanisms can be used to synchronize interprocess communication and to alleviate operating system overheads. Several multithreaded architectures have recently been proposed which differ in the implementation of multithreading <ref> [1, 3, 5, 7, 9] </ref>.
Reference: [6] <author> Ferrari, D., </author> <booktitle> "Computer systems performance evaluation"; Prentice-Hall 1978. </booktitle>
Reference-contexts: This is a characteristic indication that some other (than processor) component limits the performance of the system, and becomes the bottleneck <ref> [6] </ref>.
Reference: [7] <author> Govindarajan, R., Nemawarkar, S.S., LeNir, P., </author> <title> "Design and performance evaluation of a multithreaded architecture"; Proc. </title> <booktitle> First IEEE Symp. on High-Performance Computer Architecture, </booktitle> <address> Raleigh, NC, pp.298-307, </address> <year> 1995. </year>
Reference-contexts: The same hardware mechanisms can be used to synchronize interprocess communication and to alleviate operating system overheads. Several multithreaded architectures have recently been proposed which differ in the implementation of multithreading <ref> [1, 3, 5, 7, 9] </ref>. <p> The performance of multithreaded architectures have been evaluated using discrete-event simulation <ref> [9, 12, 7] </ref>, analytical models | using either queuing networks or Petri nets [2, 17], or using trace-driven simulation [19]. Event-driven simulation of the timed colored net models [21] was used to obtain the results presented in this paper.
Reference: [8] <author> Govindarajan, R., Suciu, F., Zuberek, W.M., </author> <title> "Timed Petri net models of multithreaded multiprocessor architectures"; Proc. </title> <booktitle> 7-th Int. Workshop on Petri Nets and Performance Models, </booktitle> <address> St. Malo, France, pp.153-162, </address> <year> 1997. </year>
Reference-contexts: Processor utilization (t s = 5; t cs = 1). Further reduction of the switch delay results in even better performance of the system. Many other performance characteristics of multithreaded multiprocessor systems can be obtained in a similar way. Some other results are shown in <ref> [8] </ref>. 5. Concluding remarks It has been shown that a simple colored Petri net model of a fairly complex system can be derived in a systematic way, taking advantage of similarities between components of the system. <p> A throughput-preserving approach to model simplification has been proposed in <ref> [8] </ref>.
Reference: [9] <author> Hirata, H., et al., </author> <title> "An elementary processor architecture with simultaneous instruction issuing from multiple threads"; Proc. </title> <booktitle> 19-th Annual Int. Symp. on Computer Architecture, </booktitle> <address> pp.136-145, </address> <year> 1992. </year>
Reference-contexts: The same hardware mechanisms can be used to synchronize interprocess communication and to alleviate operating system overheads. Several multithreaded architectures have recently been proposed which differ in the implementation of multithreading <ref> [1, 3, 5, 7, 9] </ref>. <p> The performance of multithreaded architectures have been evaluated using discrete-event simulation <ref> [9, 12, 7] </ref>, analytical models | using either queuing networks or Petri nets [2, 17], or using trace-driven simulation [19]. Event-driven simulation of the timed colored net models [21] was used to obtain the results presented in this paper.
Reference: [10] <author> Holliday, M.A., Vernon, </author> <title> M.K., "Exact performance estimates for multiprocessor memory and bus interference"; IEEE Trans. </title> <booktitle> on Computers, </booktitle> <address> vol.36, no.1, pp.76-85, </address> <year> 1987. </year>
Reference-contexts: The conflicting relation is an equivalence relation in the set of transitions, which implies a partition of this set into disjoint classes of conflicting transitions. For each conflicting class, the probabilities of firings can be determined on the basis of relative frequencies of transition firings <ref> [10] </ref>; the probability of firing an enabled transition t is determined as the ratio of t's (relative) frequency to the sum of relative frequencies of all transitions in the conflict class of t.
Reference: [11] <author> Jensen, K., </author> <title> "Coloured Petri nets"; in: </title> <booktitle> "Advanced Course on Petri Nets 1986" (Lecture Notes in Computer Science 254), </booktitle> <editor> Rozenberg, G. (ed.), pp.248-299, </editor> <publisher> Springer Verlag 1987. </publisher>
Reference-contexts: In color nets <ref> [11] </ref>, attributes (called colors) are associated with tokens, so different activities can be assigned to tokens of different types (i.e., colors), within the same structure of the net. For modeling of multithreaded architectures, colors are used for two different purposes. <p> In basic nets, the tokens are indistinguishable, so their distribution can be described by a simple marking function m : P ! f0; 1; :::g. In colored Petri nets <ref> [11] </ref>, tokens have attributes called colors, so a marking function becomes m : P ! C ! f0; 1; :::g where C is a finite set of token colors (or attributes). <p> function a describes the numbers of colored tokens required in input places and deposited to output places for different colors of transitions' firings (or different occurrences of transitions), a : A ! C ! C ! f0; 1; :::g (the definition is slightly different from the one used by Jensen <ref> [11] </ref>, but is consistent with it). It should be observed that if C contains just one color, the colored net reduces to a `standard' place/transition net. The basic idea of colored nets is to `fold' an ordinary place/transition net.
Reference: [12] <author> Keckler, S.W., Dally, W.J., </author> <title> "Processor coupling: integration of compile-time and run-time scheduling for parallelism"; Proc. </title> <booktitle> 19-th Annual Int. Symp. on Computer Architecture, </booktitle> <address> pp.202-213, </address> <year> 1992. </year>
Reference-contexts: The performance of multithreaded architectures have been evaluated using discrete-event simulation <ref> [9, 12, 7] </ref>, analytical models | using either queuing networks or Petri nets [2, 17], or using trace-driven simulation [19]. Event-driven simulation of the timed colored net models [21] was used to obtain the results presented in this paper.
Reference: [13] <editor> King, P.J.B., </editor> <booktitle> "Computer and communication systems performance modelling"; Prentice-Hall 1990. </booktitle>
Reference: [14] <author> Moore, </author> <title> S.W., "Multithreaded processor design"; Kluwer Academic 1996. </title>
Reference-contexts: 1. Introduction Multithreaded processors utilize the simple and efficient sequential execution technique of control-flow combined with data-flow like concurrency <ref> [14] </ref>. This supports the conceptually simple but quite powerful idea of rescheduling rather than blocking when waiting for data, e.g., from large and distributed memories, and thus can be used for tolerating long data transmission latencies.
Reference: [15] <author> Murata, T., </author> <title> "Petri nets: properties, </title> <booktitle> analysis and applications"; Proceedings of IEEE, </booktitle> <address> vol.77, no.4, pp.541-580, </address> <year> 1989. </year>
Reference-contexts: A pair of network interfaces, one for outbound and the second for inbound traffic, connect the network switches with processor nodes. Petri nets have been proposed as a simple and convenient formalism for modeling systems that exhibit parallel and concurrent activities <ref> [16, 15] </ref>. In order to take the durations of these activities into account, several types of Petri nets with time have been proposed by assigning firing times to the transitions or places of a net.
Reference: [16] <editor> Reisig, W., </editor> <booktitle> "Petri nets an introduction" (EATCS Monographs on Theoretical Computer Science 4); Springer Verlag 1985. </booktitle>
Reference-contexts: A pair of network interfaces, one for outbound and the second for inbound traffic, connect the network switches with processor nodes. Petri nets have been proposed as a simple and convenient formalism for modeling systems that exhibit parallel and concurrent activities <ref> [16, 15] </ref>. In order to take the durations of these activities into account, several types of Petri nets with time have been proposed by assigning firing times to the transitions or places of a net.
Reference: [17] <author> Saavedra-Bareera, R.H., Culler, D.E., von Eicken, T., </author> <booktitle> "Analysis of multithreaded architectures for parallel computing"; Proc. 2-nd Annual Symp. on Parallel Algorithms and Architectures, </booktitle> <address> Crete, Greece, </address> <year> 1990. </year>
Reference-contexts: The performance of multithreaded architectures have been evaluated using discrete-event simulation [9, 12, 7], analytical models | using either queuing networks or Petri nets <ref> [2, 17] </ref>, or using trace-driven simulation [19]. Event-driven simulation of the timed colored net models [21] was used to obtain the results presented in this paper.
Reference: [18] <author> Smith, B.J., </author> <booktitle> "Architecture and applications of the HEP multiprocessor computer System"; Proc. SPIE Real-Time Signal Processing IV, </booktitle> <volume> vol. 298, </volume> <pages> pp. 241-248, </pages> <address> San Diego, CA, </address> <year> 1981. </year>
Reference-contexts: under different circumstances [4]: * Switching on every instruction: one instruction is picked from each of runnable threads and is inserted into the processor's pipeline; if there are many threads, then each stage of the pipeline is executing an instruction from a different thread, and no instruction dependency problems exist <ref> [18] </ref>. * Switching on block of instructions: blocks of instructions from different threads are interleaved. * Switching on every load: whenever a thread encounters a load instruction, the processor switches to another thread after that load instruction is issued; the context switch is irrespective of whether the data is local or
Reference: [19] <author> Weber, W.D., Gupta, A., </author> <title> "Exploring the benefits of multiple contexts in a multiproces-sor architecture: preliminary results"; Proc. </title> <booktitle> 16-th Annual Int. Symp. on Computer Architecture, </booktitle> <address> pp.273-280, </address> <year> 1989. </year>
Reference-contexts: The performance of multithreaded architectures have been evaluated using discrete-event simulation [9, 12, 7], analytical models | using either queuing networks or Petri nets [2, 17], or using trace-driven simulation <ref> [19] </ref>. Event-driven simulation of the timed colored net models [21] was used to obtain the results presented in this paper. This paper presents Petri net models of several multithreaded multiprocessor archi-tectures, discusses the development of colored net models and includes some performance results as an illustration of model analysis.
Reference: [20] <author> Zuberek, W.M., </author> <title> "Timed Petri nets definitions, properties and applications"; Microelectronics and Reliability, </title> <journal> vol.31, </journal> <note> no.4, pp.627-644, 1991 (available through anonymous ftp at ftp.cs.mun.ca/pub/publications/91-MaR.ps.Z). </note>
Reference-contexts: In order to take the durations of these activities into account, several types of Petri nets with time have been proposed by assigning firing times to the transitions or places of a net. In timed nets <ref> [20] </ref>, deterministic or stochastic (exponentially distributed) firing times are associated with transitions, and transition firings occur in real-time, i.e., tokens are removed from input places at the beginning of the firing period, and they are deposited to the output places at the end of this period. <p> For nets with deterministic firing times, this graph is a semi-Markov (or embedded Markov) chain. In both cases standard techniques developed for Markov process can be used to find stationary properties of states (if the state space is finite) and then derive performance characteristics from these stationary probabilities <ref> [20] </ref>. 3. Multithreaded processors In the multithreaded execution model, a program is a collection of partially ordered threads, and a thread consists of a sequence of instructions which are executed in the conventional von Neumann model. Scheduling of different threads follows the data-driven approach.
Reference: [21] <author> Zuberek, W.M., </author> <title> "Modeling using timed Petri nets event-driven simulation"; Technical Report #9602, </title> <institution> Department of Computer Science, Memorial Univ. of New-foundland, St. John's, Canada A1B 3X5, </institution> <note> 1996 (available through anonymous ftp at ftp.cs.mun.ca/pub/techreports/tr-9602.ps.Z). </note>
Reference-contexts: The performance of multithreaded architectures have been evaluated using discrete-event simulation [9, 12, 7], analytical models | using either queuing networks or Petri nets [2, 17], or using trace-driven simulation [19]. Event-driven simulation of the timed colored net models <ref> [21] </ref> was used to obtain the results presented in this paper. This paper presents Petri net models of several multithreaded multiprocessor archi-tectures, discusses the development of colored net models and includes some performance results as an illustration of model analysis. <p> Performance results All results presented in this section have been obtained by simulation of the correspond ing net models <ref> [21] </ref>. 0 10 20 0.2 0.6 1 0.2 0.6 1 Processor utilization number of threads prob to access local mem processor utilization Switch delay: 10 units Context switch: 1 unit Runlength: 10 units Fig.5.1.
Reference: [22] <author> Zuberek, W.M., Govindarajan, R. </author> <title> "Performance balancing in multithreaded multiprocessor architectures"; Proc. </title> <booktitle> 4-th Australasian Conf. on Parallel and Real-Time Systems (PART'97), Newcastle, </booktitle> <address> Australia, pp.15-26, </address> <year> 1997. </year>
Reference-contexts: Many less important details are hidden in the descriptions of model elements. Even very simple performance analyses indicate that the system's behavior is quite sensitive to the values, and in fact relations between the values of model parameters <ref> [22] </ref>.
References-found: 22

