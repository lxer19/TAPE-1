URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3628/3628.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Email: flhong, jcpark, millerg@cs.umd.edu  
Title: On Hybrid Synthesis for Hierarchical Structured Petri Nets  
Author: Hong Liu Jun-Cheol Park Raymond E. Miller 
Date: April 23, 1996  
Address: College Park, MD 20742  
Affiliation: Department of Computer Science University of Maryland,  
Abstract: We propose a hybrid method for synthesis of hierarchical structured Petri nets. In a top-down manner, we decompose a system into a set of subsystems at each level of abstraction, each of these is specified as a blackbox Petri net that has multiple inputs and outputs. We stipulate that each subsystem satisfies the following I/O constraints: (1) At any instance of time, at most one of the inputs can be activated; and (2) If one input is activated, then the subsystem must consume the input and produce exactly one output within a finite length of time. We give a stepwise refinement procedure which starts from the initial high-level abstraction of the system and expands an internal place of a blackbox Petri net into a more detailed subnet at each step. By enforcing the I/O constraints of each subsystem in each intermediate abstraction, our refinement maintains the sequencing of transitions prescribed by the initial abstraction of the system. Next, for the bottom-up synthesis, we present interconnection rules for sequential, parallel, and loop structures and prove that each rule maintains the I/O constraints. Thus, by incorporating these interconnection rules into our refinement formulation, our approach can be regarded as a hybrid Petri net synthesis technique that employs both top-down and bottom-up methods. The major advantage of the method is that the modeling details can be introduced incrementally and naturally, while the important logical properties of the resulting Petri net are guaranteed. fl This research was supported by NASA Grant No. NAG 5-2648.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Agerwala and Y. </author> <title> Choed-Amphai A Synthesis Rule for Concurrent Systems Proc. </title> <booktitle> 15th 22 23 24 Design Automation Conference, </booktitle> <pages> pp. 305-311, </pages> <month> June </month> <year> 1978. </year>
Reference-contexts: Top-down synthesis [7, 8, 10] usually begins with an initial model of the system. Then, by expanding places or transitions, refinement is done in a stepwise manner to incorporate a more detailed description of the system into the model. In the bottom-up approaches <ref> [1, 2, 5, 9] </ref>, a system is treated as the composition of independent subsystems which satisfy certain properties. Each subsystem is modeled separately while ignoring interactions with other subsystems. These subsystems are then combined through common places and/or transitions into a larger subsystem at each synthesis step.
Reference: [2] <author> B. H. Krogh and C. L. </author> <title> Beck Synthesis of Place/Transition nets for Simulation and Control of Manufacturing Systems Proc. </title> <booktitle> IFIP Symp. Large Scale Systems, </booktitle> <pages> pp. 661-666, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Top-down synthesis [7, 8, 10] usually begins with an initial model of the system. Then, by expanding places or transitions, refinement is done in a stepwise manner to incorporate a more detailed description of the system into the model. In the bottom-up approaches <ref> [1, 2, 5, 9] </ref>, a system is treated as the composition of independent subsystems which satisfy certain properties. Each subsystem is modeled separately while ignoring interactions with other subsystems. These subsystems are then combined through common places and/or transitions into a larger subsystem at each synthesis step.
Reference: [3] <author> D. Y. Chao, M. C. Zhou and D. T. </author> <title> Wang Extending the Knitting Techniques to Petri net Synthesis of Automated Manufacturing Systems The Computer Journal, </title> <journal> vol. </journal> <volume> 37, no. 1, pp.67-76, </volume> <year> 1994. </year>
Reference-contexts: 1 Introduction Petri nets have been proposed for modeling and analyzing concurrent systems <ref> [3, 4, 6] </ref>. But, most systems that arise from practical applications are very complex and practically unmanageable. For this reason, modular construction methods provide a mechanism to manage the complexities of a large system that can be built out of well understood smaller subsystems.
Reference: [4] <author> T. </author> <title> Murata Petri nets: Properties, Analysis, </title> <journal> and Applications Proc. IEEE, </journal> <volume> vol. 77, </volume> <pages> pp. 541-579, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Petri nets have been proposed for modeling and analyzing concurrent systems <ref> [3, 4, 6] </ref>. But, most systems that arise from practical applications are very complex and practically unmanageable. For this reason, modular construction methods provide a mechanism to manage the complexities of a large system that can be built out of well understood smaller subsystems.
Reference: [5] <author> I. Koh and F. </author> <title> DiCesare Modular Transformation Methods for Generalized Petri nets and their Applications in Manufacturing Automation IEEE Trans. </title> <journal> Sys.,Man,Cybern., </journal> <volume> vol. 21, </volume> <pages> pp. 963-973, </pages> <year> 1991. </year>
Reference-contexts: Top-down synthesis [7, 8, 10] usually begins with an initial model of the system. Then, by expanding places or transitions, refinement is done in a stepwise manner to incorporate a more detailed description of the system into the model. In the bottom-up approaches <ref> [1, 2, 5, 9] </ref>, a system is treated as the composition of independent subsystems which satisfy certain properties. Each subsystem is modeled separately while ignoring interactions with other subsystems. These subsystems are then combined through common places and/or transitions into a larger subsystem at each synthesis step.
Reference: [6] <author> J. L. </author> <booktitle> Peterson Petri nets Computing Surveys, </booktitle> <volume> vol. 9, no. 3, </volume> <pages> pp. 223-252, </pages> <month> September </month> <year> 1977. </year>
Reference-contexts: 1 Introduction Petri nets have been proposed for modeling and analyzing concurrent systems <ref> [3, 4, 6] </ref>. But, most systems that arise from practical applications are very complex and practically unmanageable. For this reason, modular construction methods provide a mechanism to manage the complexities of a large system that can be built out of well understood smaller subsystems. <p> Section 8 gives a conclusion and future direction. The proofs of most lemmas and theorems in section 4 are given in the appendix. 2 The Petri Net Model We give the basic definitions and notation to be used throughout the paper. The reader may refer to <ref> [6] </ref> for a complete treatment of the subject.
Reference: [7] <author> R. </author> <title> Valette Analysis of Petri net by Stepwise Refinement J. </title> <journal> Comput. Syst. Sci., </journal> <volume> vol. 18, </volume> <pages> pp. 35-46, </pages> <year> 1979. </year>
Reference-contexts: One way to do this is through Petri net synthesis based on some prescribed construction rules which preserve certain logical properties as the construction progresses. Petri nets can be constructed in either a top-down or a bottom-up manner. Top-down synthesis <ref> [7, 8, 10] </ref> usually begins with an initial model of the system. Then, by expanding places or transitions, refinement is done in a stepwise manner to incorporate a more detailed description of the system into the model.
Reference: [8] <author> I. Suzuki and T. </author> <title> Murata A Method for Stepwise Refinement and Abstraction of Petri nets J. </title> <journal> Comput. Syst. Sci., </journal> <volume> vol. 27, </volume> <pages> pp. 51-76, </pages> <year> 1983. </year>
Reference-contexts: One way to do this is through Petri net synthesis based on some prescribed construction rules which preserve certain logical properties as the construction progresses. Petri nets can be constructed in either a top-down or a bottom-up manner. Top-down synthesis <ref> [7, 8, 10] </ref> usually begins with an initial model of the system. Then, by expanding places or transitions, refinement is done in a stepwise manner to incorporate a more detailed description of the system into the model.
Reference: [9] <author> M. C. Zhou and F. </author> <title> DiCesare Parallel and Sequential Mutual Exclusions for Petri net Modeling of Manufacturing Systems with Shared Resources IEEE Trans. </title> <journal> Robotics Automat., </journal> <volume> vol. 7, </volume> <pages> pp. 515-527, </pages> <year> 1991. </year>
Reference-contexts: Top-down synthesis [7, 8, 10] usually begins with an initial model of the system. Then, by expanding places or transitions, refinement is done in a stepwise manner to incorporate a more detailed description of the system into the model. In the bottom-up approaches <ref> [1, 2, 5, 9] </ref>, a system is treated as the composition of independent subsystems which satisfy certain properties. Each subsystem is modeled separately while ignoring interactions with other subsystems. These subsystems are then combined through common places and/or transitions into a larger subsystem at each synthesis step.
Reference: [10] <author> M. C. Zhou and F. </author> <title> DiCesare A Hybrid Methodology for Synthesis of Petri nets for Manufacturing Systems IEEE Trans. </title> <journal> Robotics Automat., </journal> <volume> vol. 8, </volume> <pages> pp. 350-361, </pages> <year> 1992. </year>
Reference-contexts: One way to do this is through Petri net synthesis based on some prescribed construction rules which preserve certain logical properties as the construction progresses. Petri nets can be constructed in either a top-down or a bottom-up manner. Top-down synthesis <ref> [7, 8, 10] </ref> usually begins with an initial model of the system. Then, by expanding places or transitions, refinement is done in a stepwise manner to incorporate a more detailed description of the system into the model.
Reference: [11] <author> M. D. Jeng and F. </author> <title> DiCesare A Review of Synthesis Techniques for Petri nets with Applications to Automated Manufacturing Systems IEEE Trans. </title> <journal> Sys.,Man,Cybern., </journal> <volume> vol. 23, </volume> <pages> pp. 301-312, </pages> <year> 1993. </year>
Reference-contexts: Each subsystem is modeled separately while ignoring interactions with other subsystems. These subsystems are then combined through common places and/or transitions into a larger subsystem at each synthesis step. The reader may refer to <ref> [11] </ref> for a detailed summary with synthesis examples for such methods. In this paper, a (sub)system at the current abstraction level is viewed as a blackbox with multiple inputs and outputs that transforms input data into output data.
Reference: [12] <author> D. J. Hei, R. S. Hornstein, H. Liu, F. J. LoPinto and R. E. </author> <title> Miller "Faster, Better, Cheaper" Mission Operations Employing a Reusable Object Methodology Proc. </title> <booktitle> 9th AIAA/Utah State Univ. Conference on Small Satellites, </booktitle> <month> September </month> <year> 1995. </year> <month> 25 </month>
Reference-contexts: We are considering applications to space mission operations, where the Petri net would be used to analyze the overall correctness of sequencing operations. A simple example of this approach, along with an object oriented technology is given in <ref> [12] </ref>. The example in section 7 illustrates how the approach might be useful for manufacturing systems. We believe that this approach allows many behaviors to be modeled naturally by introducing multiple inputs/outputs along with the I/O constraints.
References-found: 12

