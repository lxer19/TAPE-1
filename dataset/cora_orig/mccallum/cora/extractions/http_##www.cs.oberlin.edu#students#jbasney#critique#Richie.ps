URL: http://www.cs.oberlin.edu/students/jbasney/critique/Richie.ps
Refering-URL: http://www.cs.oberlin.edu/students/jbasney/critique/critique.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: dmr@research.att.com  
Title: The Development of the C Language  
Author: Dennis M. Ritchie 
Address: Murray Hill, NJ 07974 USA  
Affiliation: AT&T Bell Laboratories  
Abstract: The C programming language was devised in the early 1970s as a system implementation language for the nascent Unix operating system. Derived from the typeless language BCPL, it evolved a type structure; created on a tiny machine as a tool to improve a meager programming environment, it has become one of the dominant languages of today. This paper studies its evolution. 
Abstract-found: 1
Intro-found: 1
Reference: [ANSI 89] <institution> American National Standards Institute, American National Standard for Information SystemsProgramming Language C, X3.159-1989. </institution>
Reference-contexts: Thus (at the urging of M. D. McIlroy), ANSI established the X3J11 committee under the direction of CBEMA in the summer of 1983, with the goal of producing a C standard. X3J11 produced its report <ref> [ANSI 89] </ref> at the end of 1989, and subsequently this standard was accepted by ISO as ISO/IEC 9899-1990. From the beginning, the X3J11 committee took a cautious, conservative view of language extensions. <p> Much to my satisfaction, they took seriously their goal: `to develop a clear, consistent, and unambiguous Standard for the C programming language which codifies the common, existing definition of C and which promotes the portability of user programs across C language environments.' <ref> [ANSI 89] </ref> The committee realized that mere promulgation of a standard does not make the world change. X3J11 introduced only one genuinely important change to the language itself: it incorporated the types of formal arguments in the type signature of a function, using syntax borrowed from C++ [Stroustrup 86].
Reference: [Anderson 80] <author> B. Anderson, </author> <title> `Type syntax in the language C: an object lesson in syntactic innovation,' </title> <journal> SIGPLAN Notices 15 (3), </journal> <month> March, </month> <year> 1980, </year> <pages> pp. 21-27. </pages>
Reference-contexts: Declarations in languages as expressive as CAlgol 68, for exampledescribe objects equally hard to understand, simply because the objects themselves are complex. A second effect owes to details of the syntax. Declarations in C must be read in an `inside-out' style that many find difficult to grasp <ref> [Anderson 80] </ref>. Sethi [Sethi 81] observed that many of the nested declarations and expressions would become simpler if the indirection operator had been taken as a postfix operator instead of prefix, but by then it was too late to change.
Reference: [Bell 72] <author> J. R. Bell, </author> <title> `Threaded Code,' </title> <editor> C. </editor> <booktitle> ACM 16 (6), </booktitle> <pages> pp. 370-372. </pages>
Reference-contexts: The B compiler on the PDP-7 did not generate machine instructions, but instead `threaded code' <ref> [Bell 72] </ref>, an interpretive scheme in which the compiler's output consists of a sequence of addresses of code fragments that perform the elementary operations. The operations typicallyin particular for Bact on a simple stack machine.
Reference: [Canaday 69] <author> R. H. Canaday and D. M. </author> <type> Ritchie, </type> <institution> `Bell Laboratories BCPL,' AT&T Bell Laboratories internal memorandum, </institution> <month> May, </month> <year> 1969. </year>
Reference-contexts: We became familiar with it because the MIT CTSS system [Corbato 62] on which Richards worked was used for Multics development. The original BCPL compiler was transported both to Multics and to the GE-635 GECOS system by Rudd Canaday and others at Bell Labs <ref> [Canaday 69] </ref>; during the final throes of Multics's life at Bell Labs and immediately after, it was the language of choice among the group of people who would later become involved with Unix.
Reference: [Corbato 62] <author> F. J. Corbato, M. Merwin-Dagget, R. C. Daley, </author> <title> `An Experimental Time-sharing System,' </title> <booktitle> AFIPS Conf. Proc. SJCC, </booktitle> <year> 1962, </year> <pages> pp. 335-344. </pages>
Reference-contexts: We became familiar with it because the MIT CTSS system <ref> [Corbato 62] </ref> on which Richards worked was used for Multics development.
Reference: [Cox 86] <author> B. J. Cox and A. J. Novobilski, </author> <title> Object-Oriented Programming: An Evolutionary Ritchie Development of C 15 Approach, </title> <publisher> Addison-Wesley: </publisher> <address> Reading, Mass., </address> <year> 1986. </year> <note> Second edition, </note> <year> 1991. </year>
Reference-contexts: More recent descendants of C proper include Concurrent C [Gehani 89], Objective C <ref> [Cox 86] </ref>, C* [Thinking 90], and especially C++ [Stroustrup 86]. The language is also widely used as an intermediate representation (essentially, as a portable assembly language) for a wide variety of compilers, both for direct descendents like C++, and independent languages like Modula 3 [Nel-son 91] and Eiffel [Meyer 88].
Reference: [Gehani 89] <author> N. H. Gehani and W. D. Roome, </author> <title> Concurrent C, </title> <publisher> Silicon Press: Summit, </publisher> <address> NJ, </address> <year> 1989. </year>
Reference-contexts: When John-son returned to Bell Labs in 1973, he was disconcerted to find that the language whose seeds he brought to Canada had evolved back home; even his own yacc program had been rewritten in C, by Alan Snyder. More recent descendants of C proper include Concurrent C <ref> [Gehani 89] </ref>, Objective C [Cox 86], C* [Thinking 90], and especially C++ [Stroustrup 86].
Reference: [Jensen 74] <author> K. Jensen and N. Wirth, </author> <title> Pascal User Manual and Report, </title> <publisher> Springer-Verlag: </publisher> <address> New York, Heidelberg, Berlin. </address> <note> Second Edition, </note> <year> 1974. </year>
Reference: [Johnson 73] <author> S. C. Johnson and B. W. Kernighan, </author> <title> `The Programming Language B,' </title> <institution> Comp. Sci. </institution> <type> Tech. Report #8, </type> <institution> AT&T Bell Laboratories (January 1973). </institution>
Reference-contexts: Introduction This paper is about the development of the C programming language, the influences on it, and the conditions under which it was created. For the sake of brevity, I omit full descriptions of C itself, its parent B <ref> [Johnson 73] </ref> and its grandparent BCPL [Richards 79], and instead concentrate on characteristic elements of each language and how they evolved. C came into being in the years 1969-1973, in parallel with the early development of the Unix operating system; the most creative period occurred during 1972.
Reference: [Johnson 78a] <author> S. C. Johnson and D. M. Ritchie, </author> <title> `Portability of C Programs and the UNIX System,' </title> <journal> Bell Sys. Tech. J. </journal> <volume> 57 (6) (part 2), July-Aug, </volume> <year> 1978. </year>
Reference-contexts: Writing the Unix kernel in C had given us enough confidence in the language's usefulness and efficiency that we began to recode the system's utilities and tools as well, and then to move the most interesting among them to the other platforms. As described in <ref> [Johnson 78a] </ref>, we discovered that the hardest problems in propagating Unix tools lay not in the interaction of the C language with new hardware, but in adapting to the existing software of other operating systems.
Reference: [Johnson 78b] <author> S. C. Johnson, </author> <title> `A Portable Compiler: Theory and Practice,' </title> <booktitle> Proc. 5th ACM POPL Symposium (January 1978). </booktitle>
Reference-contexts: Thus Steve Johnson began to work on pcc, a C compiler intended to be easy to retarget to new machines <ref> [Johnson 78b] </ref>, while he, Thompson, and I began to move the Unix system itself to the Interdata 8/32 computer.
Reference: [Johnson 79a] <author> S. C. Johnson, </author> <title> `Yet another compiler-compiler,' in Unix Programmer's Manual, </title> <note> Seventh Edition, Vol. </note> <author> 2A, M. D. McIlroy and B. W. Kernighan, </author> <type> eds. </type> <institution> AT&T Bell Laboratories: </institution> <address> Murray Hill, NJ, </address> <year> 1979. </year>
Reference-contexts: Using assembler was dreary enough that B, despite its performance problems, had been supplemented by a small library of useful service routines and was being used for more and more new programs. Among the more notable results of this period was Steve Johnson's first version of the yacc parser-generator <ref> [Johnson 79a] </ref>. The Problems of B The machines on which we first used BCPL and then B were word-addressed, and these languages' single data type, the `cell,' comfortably equated with the hardware machine word. The advent of the PDP-11 exposed several inadequacies of B's semantic model.
Reference: [Johnson 79b] <author> S. C. Johnson, </author> <title> `Lint, a Program Checker,' in Unix Programmer's Manual, </title> <note> Seventh Edition, Vol. </note> <author> 2B, M. D. McIlroy and B. W. Kernighan, </author> <type> eds. </type> <institution> AT&T Bell Laboratories: </institution> <address> Murray Hill, NJ, </address> <year> 1979. </year>
Reference-contexts: To encourage people to pay more attention to the official language rules, to detect legal but suspicious constructions, and to help find interface mismatches undetectable with simple mechanisms for separate compilation, Steve Johnson adapted his pcc compiler to produce lint <ref> [Johnson 79b] </ref>, which scanned a set of files and remarked on dubious constructions. Growth in Usage The success of our portability experiment on the Interdata 8/32 soon led to another by Tom London and John Reiser on the DEC VAX 11/780.
Reference: [Kernighan 78] <author> B. W. Kernighan and D. M. Ritchie, </author> <title> The C Programming Language, </title> <publisher> Prentice-Hall: </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1978. </year> <note> Second edition, </note> <year> 1988. </year>
Reference-contexts: Another spate of changes peaked between 1977 and 1979, when portability of the Unix system was being demonstrated. In the middle of this second period, the first widely available description of the language appeared: The C Programming Language, often called the `white book' or `K&R' <ref> [Kernighan 78] </ref>. Finally, in the middle 1980s, the language was officially standardized by the ANSI X3J11 committee, which made further changes. <p> In particular, Lesk wrote a `portable I/O package' [Lesk 72] that was later reworked to become the C `standard I/O' routines. In 1978 Brian Kernighan and I published The C Programming Language <ref> [Kernighan 78] </ref>. Although it did not describe some additions that soon became common, this book served as the language reference until a formal standard was adopted more than ten years later.
Reference: [Kernighan 81] <author> B. W. Kernighan, </author> <title> `Why Pascal is not my favorite programming language,' </title> <institution> Comp. Sci. </institution> <type> Tech. Rep. #100, </type> <institution> AT&T Bell Laboratories, </institution> <year> 1981. </year>
Reference-contexts: Arrays in Algol 68 either have fixed bounds, or are `flexible:' considerable mechanism is required both in the language definition, and in compilers, to accommodate flexible arrays (and not all compilers fully implement them.) Original Pascal had only fixed-sized arrays and strings, and this proved confining <ref> [Kernighan 81] </ref>. Later, this was partially fixed, though the resulting language is not yet universally available. C treats strings as arrays of characters conventionally terminated by a marker.
Reference: [Lesk 73] <author> M. E. Lesk, </author> <title> `A Portable I/O Package,' </title> <institution> AT&T Bell Laboratories internal memorandum ca. </institution> <year> 1973. </year>
Reference: [MacDonald 89] <author> T. MacDonald, </author> <title> `Arrays of variable length,' </title> <journal> J. C Lang. </journal> <volume> Trans 1 (3), </volume> <month> Dec. </month> <year> 1989, </year> <pages> pp. 215-233. </pages>
Reference-contexts: Even extensions to permit the declaration and use of multidimensional arrays whose size is determined dynamically are not entirely straightforward <ref> [MacDonald 89] </ref> [Ritchie 90], although they would make it much easier to write numerical libraries in C. Thus, C covers the most important uses of strings and arrays arising in practice by a uniform and simple mechanism, but leaves problems for highly efficient implementations and for extensions.
Reference: [McClure 65] <author> R. M. McClure, </author> <title> `TMGA Syntax Directed Compiler,' </title> <booktitle> Proc. 20th ACM National Conf. </booktitle> <year> (1965), </year> <pages> pp. 262-274. </pages>
Reference-contexts: after the system gained a linker and a means of specifying another name explicitly, it was retained as the default executable result of a compilation.) Not long after Unix first ran on the PDP-7, in 1969, Doug McIlroy created the new system's first higher-level language: an implementation of McClure's TMG <ref> [McClure 65] </ref>. TMG is a language for writing compilers (more generally, TransMoGrifiers) in a top-down, recursive-descent style that combines context-free syntax notation with procedural elements. McIlroy and Bob Morris had used TMG to write the early PL/I compiler for Multics.
Reference: [McIlroy 60] <author> M. D. McIlroy, </author> <title> `Macro Instruction Extensions of Compiler Languages,' </title> <editor> C. </editor> <booktitle> ACM 3 (4), </booktitle> <pages> pp. 214-220. </pages>
Reference: [McIlroy 79] <author> M. D. McIlroy and B. W. Kernighan, eds, </author> <title> Unix Programmer's Manual, Seventh Edition, Vol. I, </title> <institution> AT&T Bell Laboratories: </institution> <address> Murray Hill, NJ, </address> <year> 1979. </year>
Reference-contexts: Still, some utilities written in B appeared, including an early version of the variable-precision calculator dc familiar to Unix users <ref> [McIlroy 79] </ref>. The most ambitious enterprise I undertook was a genuine cross-compiler that translated B to GE-635 machine instructions, not threaded code.
Reference: [Meyer 88] <author> B. Meyer, </author> <title> Object-oriented Software Construction, </title> <publisher> Prentice-Hall: </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1988. </year>
Reference-contexts: The language is also widely used as an intermediate representation (essentially, as a portable assembly language) for a wide variety of compilers, both for direct descendents like C++, and independent languages like Modula 3 [Nel-son 91] and Eiffel <ref> [Meyer 88] </ref>. Critique Two ideas are most characteristic of C among languages of its class: the relationship between arrays and pointers, and the way in which declaration syntax mimics expression syntax. They are also among its most frequently criticized features, and often serve as stumbling blocks to the beginner.
Reference: [Nelson 91] <author> G. Nelson, </author> <title> Systems Programming with Modula-3, </title> <publisher> Prentice-Hall: </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1991. </year>
Reference: [Organick 75] <author> E. I. Organick, </author> <title> The Multics System: An Examination of its Structure, </title> <publisher> MIT Press: </publisher> <address> Cambridge, Mass., </address> <year> 1975. </year>
Reference-contexts: History: the setting The late 1960s were a turbulent era for computer systems research at Bell Telephone Laboratories [Ritchie 78] [Ritchie 84]. The company was pulling out of the Multics project <ref> [Organick 75] </ref>, which had started as a joint venture of MIT, General Electric, and Bell Labs; by 1969, Bell Labs management, and even the researchers, came to believe that the promises of Multics could be fulfilled only too late and too expensively.
Reference: [Richards 67] <author> M. Richards, </author> <title> `The BCPL Reference Manual,' </title> <institution> MIT Project MAC Memorandum M-352, </institution> <month> July </month> <year> 1967. </year>
Reference-contexts: Not every difference between the BCPL language documented in Richards's book [Richards 79] and B was deliberate; we started from an earlier version of BCPL <ref> [Richards 67] </ref>.
Reference: [Richards 79] <author> M. Richards and C. Whitbey-Strevens, </author> <title> BCPL: The Language and its Compiler, </title> <publisher> Cam-bridge Univ. Press: </publisher> <address> Cambridge, </address> <year> 1979. </year>
Reference-contexts: Introduction This paper is about the development of the C programming language, the influences on it, and the conditions under which it was created. For the sake of brevity, I omit full descriptions of C itself, its parent B [Johnson 73] and its grandparent BCPL <ref> [Richards 79] </ref>, and instead concentrate on characteristic elements of each language and how they evolved. C came into being in the years 1969-1973, in parallel with the early development of the Unix operating system; the most creative period occurred during 1972. <p> Not every difference between the BCPL language documented in Richards's book <ref> [Richards 79] </ref> and B was deliberate; we started from an earlier version of BCPL [Richards 67].
Reference: [Ritchie 78] <author> D. M. Ritchie, </author> <title> `UNIX: A Retrospective,' </title> <journal> Bell Sys. Tech. J. </journal> <volume> 57 (6) (part 2), July-Aug, </volume> <year> 1978. </year>
Reference-contexts: History: the setting The late 1960s were a turbulent era for computer systems research at Bell Telephone Laboratories <ref> [Ritchie 78] </ref> [Ritchie 84].
Reference: [Ritchie 84] <author> D. M. Ritchie, </author> <title> `The Evolution of the UNIX Time-sharing System,' </title> <journal> AT&T Bell Labs. Tech. J. </journal> <volume> 63 (8) (part 2), </volume> <month> Oct. </month> <year> 1984. </year>
Reference-contexts: History: the setting The late 1960s were a turbulent era for computer systems research at Bell Telephone Laboratories [Ritchie 78] <ref> [Ritchie 84] </ref>.
Reference: [Ritchie 90] <author> D. M. Ritchie, </author> <title> `Variable-size arrays in C,' </title> <journal> J. C Lang. Trans. </journal> <volume> 2 (2), </volume> <month> Sept. </month> <year> 1990, </year> <pages> pp. 81-86. </pages>
Reference-contexts: Even extensions to permit the declaration and use of multidimensional arrays whose size is determined dynamically are not entirely straightforward [MacDonald 89] <ref> [Ritchie 90] </ref>, although they would make it much easier to write numerical libraries in C. Thus, C covers the most important uses of strings and arrays arising in practice by a uniform and simple mechanism, but leaves problems for highly efficient implementations and for extensions.
Reference: [Sethi 81] <author> R. Sethi, </author> <title> `Uniform syntax for type expressions and declarators,' </title> <journal> Softw. Prac. and Exp. </journal> <volume> 11 (6), </volume> <month> June </month> <year> 1981, </year> <pages> pp. 623-628. </pages>
Reference-contexts: A second effect owes to details of the syntax. Declarations in C must be read in an `inside-out' style that many find difficult to grasp [Anderson 80]. Sethi <ref> [Sethi 81] </ref> observed that many of the nested declarations and expressions would become simpler if the indirection operator had been taken as a postfix operator instead of prefix, but by then it was too late to change.
Reference: [Snyder 74] <author> A. Snyder, </author> <title> A Portable Compiler for the Language C, </title> <publisher> MIT: </publisher> <address> Cambridge, Mass., </address> <year> 1974. </year>
Reference-contexts: Many other changes occurred around 1972-3, but the most important was the introduction of the preprocessor, partly at the urging of Alan Snyder <ref> [Snyder 74] </ref>, but also in recognition of the utility of the the file-inclusion mechanisms available in BCPL and PL/I. Its original version was exceedingly simple, and provided only included files and simple string replacements: #include and #define of parameterless macros.
Reference: [Stoy 72] <author> J. E. Stoy and C. Strachey, </author> <title> `OS6An experimental operating system for a small computer. Part I: General principles and structure,' </title> <journal> Comp J. </journal> <volume> 15, </volume> <month> (Aug. </month> <year> 1972), </year> <pages> pp. </pages> <note> Ritchie Development of C 16 117-124. </note>
Reference-contexts: Origins: the languages BCPL was designed by Martin Richards in the mid-1960s while he was visiting MIT, and was used during the early 1970s for several interesting projects, among them the OS6 operating system at Oxford <ref> [Stoy 72] </ref>, and parts of the seminal Alto work at Xerox PARC [Thacker 79]. We became familiar with it because the MIT CTSS system [Corbato 62] on which Richards worked was used for Multics development.
Reference: [Stroustrup 86] <author> B. Stroustrup, </author> <title> The C++ Programming Language, </title> <publisher> Addison-Wesley: </publisher> <address> Reading, Mass., </address> <year> 1986. </year> <note> Second edition, </note> <year> 1991. </year>
Reference-contexts: X3J11 introduced only one genuinely important change to the language itself: it incorporated the types of formal arguments in the type signature of a function, using syntax borrowed from C++ <ref> [Stroustrup 86] </ref>. In the old style, external functions were declared like this: double sin (); which says only that sin is a function returning a double (that is, double-precision floating-point) value. <p> More recent descendants of C proper include Concurrent C [Gehani 89], Objective C [Cox 86], C* [Thinking 90], and especially C++ <ref> [Stroustrup 86] </ref>. The language is also widely used as an intermediate representation (essentially, as a portable assembly language) for a wide variety of compilers, both for direct descendents like C++, and independent languages like Modula 3 [Nel-son 91] and Eiffel [Meyer 88].
Reference: [Thacker 79] <author> C. P. Thacker, E. M. McCreight, B. W. Lampson, R. F. Sproull, D. R. </author> <title> Boggs, </title> <publisher> `Alto: </publisher>
Reference-contexts: Origins: the languages BCPL was designed by Martin Richards in the mid-1960s while he was visiting MIT, and was used during the early 1970s for several interesting projects, among them the OS6 operating system at Oxford [Stoy 72], and parts of the seminal Alto work at Xerox PARC <ref> [Thacker 79] </ref>. We became familiar with it because the MIT CTSS system [Corbato 62] on which Richards worked was used for Multics development.
References-found: 33

