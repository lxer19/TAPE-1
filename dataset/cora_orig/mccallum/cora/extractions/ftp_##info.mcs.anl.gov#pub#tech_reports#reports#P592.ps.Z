URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P592.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts96.htm
Root-URL: http://www.mcs.anl.gov
Email: @mcs.anl.gov  
Title: An Abstract-Device Interface for Implementing Portable Parallel-I/O Interfaces  
Author: Rajeev Thakur William Gropp Ewing Lusk fthakur, gropp, luskg 
Address: 9700 S. Cass Avenue Argonne, IL 60439, USA  
Affiliation: Mathematics and Computer Science Division Argonne National Laboratory  
Note: Appeared in Proc. of the 6th Symposium on the Frontiers of Massively Parallel Computation, October 1996, pp. 180-187. Copyright 1996 IEEE.  
Abstract: In this paper, we propose a strategy for implementing parallel-I/O interfaces portably and efficiently. We have defined an abstract-device interface for parallel I/O, called ADIO. Any parallel-I/O API can be implemented on multiple file systems by implementing the API portably on top of ADIO, and implementing only ADIO on different file systems. This approach simplifies the task of implementing an API and yet exploits the specific high-performance features of individual file systems. We have used ADIO to implement the Intel PFS interface and subsets of MPI-IO and IBM PI-OFS interfaces on PFS, PIOFS, Unix, and NFS file systems. Our performance studies indicate that the overhead of using ADIO as an implementation strategy is very low. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Bennett, K. Bryant, A. Sussman, R. Das, and J. Saltz. Jovian: </author> <title> A Framework for Optimizing Parallel I/O. </title> <booktitle> In Proceedings of the Scalable Parallel Libraries Conference, </booktitle> <pages> pages 10-20, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: In addition, a number of I/O libraries with special APIs have been developed (e.g., PASSION [25], Panda [21], Chameleon I/O [7], SOLAR [28], Jo-vian <ref> [1] </ref>, and ChemIO [6]). Different APIs are used by systems that support persistent objects (e.g., Ptool [9], ELFS [13], and SHORE [2]). A group within the Scalable I/O Initiative [20] is developing a standard low-level interface for parallel I/O [5].
Reference: [2] <author> M. Carey, D. DeWitt, M. Franklin, N. Hall, M. McAuliffe, J. Naughton, D. Schuh, M. Solomon, C. Tan, O. Tsatalos, S. White, and M. Zwilling. </author> <title> Shoring Up Persistent Applications. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 383-394, </pages> <year> 1994. </year>
Reference-contexts: In addition, a number of I/O libraries with special APIs have been developed (e.g., PASSION [25], Panda [21], Chameleon I/O [7], SOLAR [28], Jo-vian [1], and ChemIO [6]). Different APIs are used by systems that support persistent objects (e.g., Ptool [9], ELFS [13], and SHORE <ref> [2] </ref>). A group within the Scalable I/O Initiative [20] is developing a standard low-level interface for parallel I/O [5]. This low-level interface, however, is not intended to be used directly by application programmers, but instead at the operating-system level by developers of libraries for compilers, run-time systems, and applications.
Reference: [3] <author> J. del Rosario, R. Bordawekar, and A. Choud-hary. </author> <title> Improved Parallel I/O via a Two-Phase Runtime Access Strategy. </title> <booktitle> In Proceedings of the Workshop on I/O in Parallel Computer Systems at IPPS '93, </booktitle> <pages> pages 56-70, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: Several researchers have demonstrated that, for many common access patterns, collective I/O can greatly improve performance <ref> [3, 24, 14, 21] </ref>. To enable the use of collective I/O, ADIO provides collective versions of all read/write routines. A collective routine must be called by all processes in the group that opened the file. <p> For example, noncontiguous requests can either be translated into several contiguous requests separated by seeks or can be implemented by using optimizations such as data sieving [23]. Collective operations can be implemented by using optimizations such as two-phase I/O <ref> [3, 24] </ref>. 4.2.2 ADIO on PIOFS As in the case of PFS, blocking and nonblocking versions of contiguous reads and writes can be implemented by directly using their PIOFS counterparts. Noncontiguous accesses can be implemented, in some cases, by using the logical views supported by PIOFS.
Reference: [4] <author> G. Gibson et al. </author> <title> The Scotch Parallel Storage Systems. </title> <booktitle> In Proceedings of 40th IEEE Computer Society International Conference (COMPCON 95), </booktitle> <pages> pages 403-410, </pages> <month> Spring </month> <year> 1995. </year>
Reference-contexts: Instead of a single standard API, a number of different APIs are supported by different vendors and research projects. Many commercial parallel file systems (e.g., IBM PI-OFS [11] and Intel PFS [12]) and research parallel file systems (e.g., PPFS [10], Galley [18], HFS [15], Scotch <ref> [4] </ref>, and PIOUS [17]) provide their own APIs. In addition, a number of I/O libraries with special APIs have been developed (e.g., PASSION [25], Panda [21], Chameleon I/O [7], SOLAR [28], Jo-vian [1], and ChemIO [6]).
Reference: [5] <author> P. Corbett et al. </author> <title> Proposal for a Com--mon Parallel File System Programming Interface, </title> <note> Version 0.60. On the World-Wide Web at http://www.cs.princeton.edu/sio, June 1996. </note>
Reference-contexts: Different APIs are used by systems that support persistent objects (e.g., Ptool [9], ELFS [13], and SHORE [2]). A group within the Scalable I/O Initiative [20] is developing a standard low-level interface for parallel I/O <ref> [5] </ref>. This low-level interface, however, is not intended to be used directly by application programmers, but instead at the operating-system level by developers of libraries for compilers, run-time systems, and applications.
Reference: [6] <author> I. Foster and J. Nieplocha. </author> <title> ChemIO: High-Performance I/O for Computational Chemistry Applications. </title> <note> World-Wide Web page at http://www.mcs.anl.gov/chemio, February 1996. </note>
Reference-contexts: In addition, a number of I/O libraries with special APIs have been developed (e.g., PASSION [25], Panda [21], Chameleon I/O [7], SOLAR [28], Jo-vian [1], and ChemIO <ref> [6] </ref>). Different APIs are used by systems that support persistent objects (e.g., Ptool [9], ELFS [13], and SHORE [2]). A group within the Scalable I/O Initiative [20] is developing a standard low-level interface for parallel I/O [5].
Reference: [7] <author> N. Galbreath, W. Gropp, and D. Levine. </author> <title> Applications-Driven Parallel I/O. </title> <booktitle> In Proceedings of Supercomputing '93, </booktitle> <pages> pages 462-471, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: In addition, a number of I/O libraries with special APIs have been developed (e.g., PASSION [25], Panda [21], Chameleon I/O <ref> [7] </ref>, SOLAR [28], Jo-vian [1], and ChemIO [6]). Different APIs are used by systems that support persistent objects (e.g., Ptool [9], ELFS [13], and SHORE [2]). A group within the Scalable I/O Initiative [20] is developing a standard low-level interface for parallel I/O [5].
Reference: [8] <author> W. Gropp, E. Lusk, N. Doss, and A. </author> <note> Skjellum. </note>
Reference-contexts: When a standard API emerges, ADIO can be used to implement that API as well. A similar abstract-device-interface approach for communication has been used very successfully in the MPICH implementation of MPI <ref> [8] </ref>. 3 ADIO Design ADIO is designed such that it can exploit the high-performance features of any file system, and any API can be expressed in terms of ADIO. <p> We intend to develop a complete implementation of MPI-IO and track the interface definition as it evolves through the MPI Forum. We also intend to implement ADIO on other file systems for greater portability. We intend to distribute our code freely together with the MPICH implementation of MPI <ref> [8] </ref>. We note that the ADIO interface defined in this paper may change as our implementations and studies reveal the need for providing additional/different functionality at the ADIO level. The latest definition of the interface can always be obtained from http://www.mcs.anl.gov/home/thakur/adio.
References-found: 8

