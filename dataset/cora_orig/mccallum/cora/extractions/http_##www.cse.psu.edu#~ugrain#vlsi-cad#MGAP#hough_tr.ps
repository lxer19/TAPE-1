URL: http://www.cse.psu.edu/~ugrain/vlsi-cad/MGAP/hough_tr.ps
Refering-URL: http://www.cse.psu.edu/~ugrain/publications.html
Root-URL: 
Title: EDGE DETECTION USING FINE-GRAINED PARALLELISM IN VLSI  
Author: Chetana Nagendra Manjit Borah Mohan Vishwanath Robert M. Owens Mary Jane Irwin 
Address: Park, PA 16802  
Affiliation: Department of Computer Science Pennsylvania State University University  
Abstract: This paper demonstrates an optimal time algorithm and architecture for edge detection in real time using fine grained parallelism. Given an image in the form of a two-dimensional array of pixels, this algorithm computes the Sobel and Laplacian operators for skimming lines in the image and then generates the Hough array using thresholding. Hough transforms for M different angles of projection are obtained in a fully systolic manner without using any multiplication or division. An implementation of the algorithm on the MGAP a fine-grained processor array architecture being developed at the Pennsylvania State University, is shown which computes at the rate of approximately 75,000 Hough transforms per second on a 256 fi 256 image using a 25 MHz clock. It is also shown that the algorithm can be easily extended to general case of Radon transforms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K.E. Batcher. </author> <title> Design of a massively parallel processor. </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-29(9):836-840, </volume> <year> 1980. </year>
Reference-contexts: These operations can be done in O (N ) time on the MGAP. The projections are taken in steps of ffi starting from 0. The step size ffi is usually k=4N , where k 2 <ref> [1; N ] </ref>. But in practice the step size is limited by the precision required for tanffi which is the unit of increment of the limit values in our algorithm. <p> For step 4 we assume that each processor has a certain bit that is usually zero. This bit is set when data is received from the South. After step 4, it is reset once again. 3. ARCHITECTURE OF THE MICROGRAIN ARRAY PROCESSOR Recently, fine grained architectures like MPP <ref> [1] </ref> and the Connection Machine [5] have gained popularity since they are specialized for problems that exhibit a high degree of parallelism. The MGAP [6] is a fine grain VLSI processor array suitable for solving image and signal processing problems.
Reference: [2] <author> E.R. Davies. </author> <title> Skimming technique for fast accurate edge detection. </title> <booktitle> Signal Processing, </booktitle> <volume> 26(1) </volume> <pages> 1-16, </pages> <month> Jan </month> <year> 1992. </year>
Reference-contexts: At the highest level, our algorithm consists of first skimming the image for lines and then applying the Hough transform on the binary array thus obtained. 2.1. Line-skimming Algorithm In <ref> [2] </ref>, Davies gives a fast and accurate scheme for skimming lines from a gray scale image which consists of the following steps. 1) A simple Differential Gradient is computed on the pixels using the Sobel masks, which provide sufficiently accurate estimates of the x and y components of the local intensity
Reference: [3] <author> R.C. Gonsalez and R.E. Woods. </author> <title> Digital Image Processing, chapter 7. </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: A reasonable estimate of the gradient is obtained by g = jg x j + jg y j which avoids the expensive square root operation <ref> [3] </ref>. 2) This is followed by the Laplacian operator L which produces the second derivative of the gray level image and thus produces information about the dark and bright sides of an edge at the same time thinning down the line to one pixel. 3) Finally some thresholding function is applied
Reference: [4] <author> C. Guerra and S. Hambrusch. </author> <title> Parallel algorithms for line detection on a mesh. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 6 </volume> <pages> 1-19, </pages> <year> 1989. </year>
Reference-contexts: The idea underlying most edge detection techniques is the computation of a local derivative operator and then taking projection along different contours. Hough transform is a useful tool for obtaining projection data for binary images. A large number of algorithms for edge detection have been developed for mesh architectures <ref> [4] </ref> [7] [9]. However, all these architectures use parallelism at a `macro' level. They assume that each processor has a significant amount of computing power at the same time requiring availability of a large number of processors. Hence they are not ideally suited for VLSI. <p> A comparison of the time complexities of some other algorithms is given below. GAPP [9] O (N M ~)y Cypher et. al. [7] O ((N + M )~)y Guerra et. al. <ref> [4] </ref> O ((N + M )~)y MGAP O ((N + M ) p y Since the first three algorithms do not take into consideration the complexity of the operations at each step, for comparison purposes we assume at least a ~ complexity per step because some of them might possibly require
Reference: [5] <author> W.D. Hillis. </author> <title> The Connection Machine. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass, </address> <year> 1986. </year>
Reference-contexts: This bit is set when data is received from the South. After step 4, it is reset once again. 3. ARCHITECTURE OF THE MICROGRAIN ARRAY PROCESSOR Recently, fine grained architectures like MPP [1] and the Connection Machine <ref> [5] </ref> have gained popularity since they are specialized for problems that exhibit a high degree of parallelism. The MGAP [6] is a fine grain VLSI processor array suitable for solving image and signal processing problems.
Reference: [6] <author> R.M. Owens and M.J. Irwin. </author> <title> A micro-grained vlsi signal processor. </title> <note> Submitted to IEEE Trans. on Computers, </note> . 
Reference-contexts: After step 4, it is reset once again. 3. ARCHITECTURE OF THE MICROGRAIN ARRAY PROCESSOR Recently, fine grained architectures like MPP [1] and the Connection Machine [5] have gained popularity since they are specialized for problems that exhibit a high degree of parallelism. The MGAP <ref> [6] </ref> is a fine grain VLSI processor array suitable for solving image and signal processing problems. It consists of an nfin array of processing cells referred to as digit processors (Fig 4). A digit processor is just a small RAM and some multiplexers.
Reference: [7] <author> J.L.C. Sanz R.E. Cypher and L. Snyder. </author> <title> The hough transform has o(n) complexity on n fi n mesh connected computers. </title> <journal> SIAM Journal of Computing, </journal> <volume> 19(5) </volume> <pages> 805-820, </pages> <month> Oct </month> <year> 1990. </year>
Reference-contexts: Hough transform is a useful tool for obtaining projection data for binary images. A large number of algorithms for edge detection have been developed for mesh architectures [4] <ref> [7] </ref> [9]. However, all these architectures use parallelism at a `macro' level. They assume that each processor has a significant amount of computing power at the same time requiring availability of a large number of processors. Hence they are not ideally suited for VLSI. <p> A comparison of the time complexities of some other algorithms is given below. GAPP [9] O (N M ~)y Cypher et. al. <ref> [7] </ref> O ((N + M )~)y Guerra et. al. [4] O ((N + M )~)y MGAP O ((N + M ) p y Since the first three algorithms do not take into consideration the complexity of the operations at each step, for comparison purposes we assume at least a ~ complexity <p> It can be seen that our algorithm exhibits optimal asymptotic complexity <ref> [7] </ref>. Note that since multiplication is a relatively difficult operation in fine-grained processors, we have avoided it in the computation of the Hough transforms.
Reference: [8] <author> E.B. Sanz, J.L.C. Hinkle and A.K. Jain. </author> <title> Radon and Projection Transform-Based Computer Vision. </title> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: Computing the Hough array is estimated to take about 260 s, and the delay between successive Hough transforms is estimated to be approximately 13 s. 5. ALGORITHM FOR RADON TRANSFORMS The general case of Radon transform is used for representation and manipulation of image data <ref> [8] </ref> and is helpful for efficient detection of shapes and many other applications. Computation of Radon transforms involve taking projections of a gray level image along different linear contours. Hough transform can be seen as a special case of Radon Transforms.
Reference: [9] <author> T.M. Silberberg. </author> <title> The hough transform on the geometric arithmetic parallel processor. </title> <booktitle> Proc. IEEE Workshop on Computer Architecture for Pattern Analysis and Image Data Base Management, </booktitle> <pages> pages 387-391, </pages> <year> 1985. </year>
Reference-contexts: Hough transform is a useful tool for obtaining projection data for binary images. A large number of algorithms for edge detection have been developed for mesh architectures [4] [7] <ref> [9] </ref>. However, all these architectures use parallelism at a `macro' level. They assume that each processor has a significant amount of computing power at the same time requiring availability of a large number of processors. Hence they are not ideally suited for VLSI. <p> Many algorithms for computing the Hough transform exist. An algorithm has been implemented on the GAPP which takes 7 sec to run for a 512 fi 512 image and about 0.3 sec to run for a 100 fi 100 image <ref> [9] </ref>. A comparison of the time complexities of some other algorithms is given below. GAPP [9] O (N M ~)y Cypher et. al. [7] O ((N + M )~)y Guerra et. al. [4] O ((N + M )~)y MGAP O ((N + M ) p y Since the first three algorithms <p> An algorithm has been implemented on the GAPP which takes 7 sec to run for a 512 fi 512 image and about 0.3 sec to run for a 100 fi 100 image <ref> [9] </ref>. A comparison of the time complexities of some other algorithms is given below. GAPP [9] O (N M ~)y Cypher et. al. [7] O ((N + M )~)y Guerra et. al. [4] O ((N + M )~)y MGAP O ((N + M ) p y Since the first three algorithms do not take into consideration the complexity of the operations at each step, for comparison
References-found: 9

