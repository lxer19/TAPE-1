URL: http://www.eecs.umich.edu/~reumann/nossdav98.ps
Refering-URL: http://www.eecs.umich.edu/~reumann/pubs.html
Root-URL: http://www.eecs.umich.edu
Email: fkgshin, reumanng@eecs.umich.edu  
Title: Adaptive Quality-of-Service Session Management for Multimedia Servers  
Author: John Reumann and Kang G. Shin 
Address: Ann Arbor, MI 48109-2122  
Affiliation: Real-Time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: Contemporary multimedia applications usually require servers to provide static QoS (Quality-of-Service), such as constant bit rate or fixed average transfer rate. These requirements do not reflect the application needs, but result from lack of support for adaptive QoS in applications as well as in operating systems. Multimedia servers should provide "acceptable" service under a variety of QoS configurations. When they are ported to systems that do not support explicit QoS guarantees (e.g., the Internet), the exploitation of multimedia's inherent adaptability is an absolute must. We propose a model for server design that addresses the need for adaptive QoS. Using economic theory, the server is designed to allocate resources so as to maximize the weighted sum of clients-perceived QoS. Our model views the QoS defined for a session as a variable that can be changed on-the-fly to improve user-perceived QoS on an aggregated basis. This on-the-fly change capability allows the server to degrade or upgrade the QoS of individual sessions within a pre-specified range, depending on the loading condition and/or resource availability. Simulation of our model showed that it (i) increases the number of clients served by the system between 30 and 130%; (ii) improves clients' perception of the service; and (iii) effectively controls the number of adaptation operations needed for these improvements. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Robin Fairbairns, </author> <title> "Summary Report, Kernel Work Package", </title> <type> Esprit BRA 6865, </type> <institution> University of Cam-bridge Computer Laboratory, </institution> <year> 1993 </year>
Reference-contexts: Section 5 discusses how to integrate the proposed mechanism into off-the-shelf OSs, and performance issues related to the model. The paper concludes with Section 6. 2 Related Work The multimedia architecture developed as part of the Pe-gasus Project at Universities of Twente and Cambridge <ref> [1, 10] </ref> addresses several questions related to the problem treated in this paper. In particular, their focus on adaptive QoS supports our adaptive QoS server architecture. Mullender and Sijben [10] presented an architecture for dynamic QoS multimedia applications. <p> Mullender and Sijben [10] presented an architecture for dynamic QoS multimedia applications. They emphasize the need for adaptive QoS when considering the transmission of continuous media. One of the main motivations for their implementation of the Nemesis kernel <ref> [1] </ref> was to provide resource protection for competing multimedia applications against each other and support for QoS adaptation on-the-fly. The Nemesis kernel implements the desired functionality by offering an easy-to-use thread abstraction that allows external triggers for changes in the main function of a thread. <p> In case of k resources and b service classes, we define the function rescon: f0; 1; : : :; b 1g ! <ref> [0; 1] </ref> k , with rescon (i) = (x 1 ; x 2 ; : : : ; x k ) t , where rescon (i) represents the amount of all resources needed to deliver service to a client in service class i (t represents transposition). <p> When service to the client is degraded, his utility does not drop to zero immediately but decreases according to a relative utility function u with Image (u) ae <ref> [0; 1] </ref> and the domain of all possible service classes. The relative utility helps the provider recognize how the client's utility reacts to changes in the service class. <p> The time per simulation run greatly depended on the frequency at which OptCycle was invoked. This observation is backed up by our time complexity analysis. The complexity of the OptCycle algorithm depends on two parameters: the number of clients, n, and the granularity of the server's resource, g 2 <ref> [0; 1] </ref>. The number g represents the minimal amount of the resource that can be allocated to a client. Since the dynamic programming is used to solve the allocation problem, a table of size O (n=g) must be constructed. <p> Hence there must be a CPU quantum to be allocated to a thread so that it receives its reserved share of the bottleneck resource. Note that this step can be skipped if the node runs an advanced multimedia OS like Nemesis <ref> [1] </ref>.
Reference: [2] <author> Leonard Franken, </author> <title> "Model-Based QoS Management", </title> <type> PhD. Thesis, </type> <institution> Universiteit Twente, </institution> <year> 1995 </year>
Reference-contexts: The thread should therefore be instrumented for efficient monitoring and feedback mechanisms, which will help find the optimal scheduling parameters for a desired level of QoS. Franken's thesis <ref> [2] </ref> presents a model that achieves the needed mapping by monitoring and stochastic modeling.
Reference: [3] <author> Bill Gallmeister, </author> <title> "Posix.4: Programming for the real world", </title> <publisher> O'Reilly & Associates, </publisher> <year> 1995 </year>
Reference-contexts: The amount of cross-resource interference tends to be so significant that no simple solution for resource reservation may be derived and implemented. However, there is an exception: the problem of reserving/allocating CPU cycles is very well understood, solved and implemented in most modern OSs. POSIX <ref> [3, 12] </ref> defines the de facto standard for scheduling threads and enables the programmer to change the time-sharing policy for his threads from user-space. We propose to enhance the scheduling capabilities of POSIX-compliant OSs slightly to provide resource-reservation mechanisms necessary for FluSS, i.e., fair-share scheduling [7].
Reference: [4] <editor> Reinhard John, "Definitionen und Satze zur Vor-lesung Entscheidungstheorie, </editor> <address> Somersemester 1997", Rheinische Friedrich-Wilhelm-Universitat, Bonn, </address> <year> 1997 </year>
Reference-contexts: Multimedia servers should operate under various resource constraints, as they must usually adapt their clients' QoS to changes in resource availability. A client should be able to specify his preference of a particular QoS configuration over others. Under certain constraints these preferences can be translated into utility functions <ref> [4, 11] </ref>. Since utility functions provide a compact representation of preferences, we can use them in making resource-allocation decisions inside a multimedia server in a load-sensitive manner. Evolution of integrated multimedia services will expand the domain of commercial multimedia applications.
Reference: [5] <author> Thomas Leiserson, Charles Cormen, Ronald Rivest, </author> <title> "Introduction to Algorithms", </title> <address> New York, N.Y., </address> <publisher> McGraw-Hill, </publisher> <year> 1994 </year>
Reference-contexts: So, we propose an optimistic approach to solving this problem. 3.4.1 An Optimistic Approach to Solving the Allocation Problem In the one-resource case, the problem is equivalent to the simple knapsack problem. Our algorithm acts just like the dynamic programming solution for this one-dimensional resource problem <ref> [5] </ref>. Unfortunately, its complexity is higher than in the classical case because we have to enforce the additional constraint AC1. OptCycle: 1. Pick the bottleneck resource for which the allocation will be optimized. 2. Pack the resource optimally for the first client under all levels of resource availability.
Reference: [6] <author> Silvano Martello, Paolo Toth, </author> <title> "Knapsack Problems", </title> <address> Chichester, U.K., </address> <publisher> John Wiley & Sons Ltd., </publisher> <year> 1990 </year>
Reference-contexts: The resource-allocation problem turns out to be a slight modification of the well-known knapsack optimization problem <ref> [6] </ref>. Since the knapsack problem is known to be NP-complete, we will relax it somewhat for on-line use.
Reference: [7] <author> Chen Lee, Raj Rajkumar and Cliff Mercer, </author> <title> "Experiences with Processor Reservation and Dynamic QOS in Real-Time Mach" , In Proceedings of IEEE Multimedia Systems, </title> <address> Japan, </address> <year> 1996 </year>
Reference-contexts: POSIX [3, 12] defines the de facto standard for scheduling threads and enables the programmer to change the time-sharing policy for his threads from user-space. We propose to enhance the scheduling capabilities of POSIX-compliant OSs slightly to provide resource-reservation mechanisms necessary for FluSS, i.e., fair-share scheduling <ref> [7] </ref>. Our solution differs from conventional multimedia sever implementations in that, instead of integrating all functionalities into one node (workstation or PC), the service is broken up into functional components that would interfere with each other if they were run on the same node.
Reference: [8] <author> Oracle, Inc., </author> <title> "Oracle Video Cartridge", </title> <type> Technical White Paper, </type> <note> www.oracle.com, 1997 </note>
Reference-contexts: Adaptation to overload, like giving higher-paying clients better service or maximizing the number of clients served, is not implemented. A similar architecture | only for video | is the Oracle video cartridge <ref> [8] </ref>. It avoids the unpredictability caused by a platform that does not support QoS guarantees by running one and only one application on the platform.
Reference: [9] <author> Real Networks, Inc., </author> <title> "Real Networks, the Home of Real Audio, Real Video, Real Flash", </title> <note> http://www.real.com/, 1997 </note>
Reference-contexts: The solution by Real Networks Inc. for streaming continuous media over the Internet is widely deployed in broadcasting live contents over the Internet <ref> [9] </ref>. Their audio and video servers use statistical information about the end-to-end connection between their RealAu-dio server and the client to accomplish a stable continuous media connection. The scheme depends mainly on buffering at the client side to mask the effects of varying network loads on the client-to-server connection. <p> to their highly system-dependent nature, we determined the trend of utility, adaptation operations, and clients-in-service for different choices of system design parameters. 5.2.1 Simulation Parameters To give a rough estimate of the performance of the proposed algorithm in realistic settings, we modeled the server using the information on RealSystem 5.0 <ref> [9] </ref>, Real Network's audio-on-demand server. This widely-used system supports four service classes: 14.4, 28.8, ISDN, and Dual ISDN. According to Real Networks, it is possible to support more than 1,000 sessions per server PC at 14.4 kbps when broadcasting live contents. With individual streams the performance is significantly lower.
Reference: [10] <author> Paul Sijben, Sape Mullender, </author> <title> "An Architecture for Scheduling and QoS management in Multimedia Workstations", </title> <type> Pegasus paper 95-5, </type> <institution> http://www.pegasus.esprit.ec.org/default.html, Universiteit Twente, </institution> <year> 1995 </year>
Reference-contexts: Section 5 discusses how to integrate the proposed mechanism into off-the-shelf OSs, and performance issues related to the model. The paper concludes with Section 6. 2 Related Work The multimedia architecture developed as part of the Pe-gasus Project at Universities of Twente and Cambridge <ref> [1, 10] </ref> addresses several questions related to the problem treated in this paper. In particular, their focus on adaptive QoS supports our adaptive QoS server architecture. Mullender and Sijben [10] presented an architecture for dynamic QoS multimedia applications. <p> In particular, their focus on adaptive QoS supports our adaptive QoS server architecture. Mullender and Sijben <ref> [10] </ref> presented an architecture for dynamic QoS multimedia applications. They emphasize the need for adaptive QoS when considering the transmission of continuous media.
Reference: [11] <author> Hal Varian, </author> <title> "Microeconomic Analysis", 3rd Edition, W.W. </title> <publisher> Norton & Company, </publisher> <address> New York, </address> <year> 1992 </year>
Reference-contexts: Multimedia servers should operate under various resource constraints, as they must usually adapt their clients' QoS to changes in resource availability. A client should be able to specify his preference of a particular QoS configuration over others. Under certain constraints these preferences can be translated into utility functions <ref> [4, 11] </ref>. Since utility functions provide a compact representation of preferences, we can use them in making resource-allocation decisions inside a multimedia server in a load-sensitive manner. Evolution of integrated multimedia services will expand the domain of commercial multimedia applications.
Reference: [12] <author> Fred Zlotnick, </author> <title> "The Posix-1 Standard: A Programmer's Guide", </title> <address> Redwood City, CA, </address> <publisher> Ben-jamin/Cummings Publishers, </publisher> <year> 1991 </year>
Reference-contexts: The amount of cross-resource interference tends to be so significant that no simple solution for resource reservation may be derived and implemented. However, there is an exception: the problem of reserving/allocating CPU cycles is very well understood, solved and implemented in most modern OSs. POSIX <ref> [3, 12] </ref> defines the de facto standard for scheduling threads and enables the programmer to change the time-sharing policy for his threads from user-space. We propose to enhance the scheduling capabilities of POSIX-compliant OSs slightly to provide resource-reservation mechanisms necessary for FluSS, i.e., fair-share scheduling [7].
References-found: 12

