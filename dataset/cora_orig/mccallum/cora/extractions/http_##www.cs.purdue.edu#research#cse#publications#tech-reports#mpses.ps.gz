URL: http://www.cs.purdue.edu/research/cse/publications/tech-reports/mpses.ps.gz
Refering-URL: http://www.cs.purdue.edu/homes/ttd/resume.html
Root-URL: http://www.cs.purdue.edu
Email: email: fttd,joshi,jrr,enh,sawg@cs.purdue.edu  
Title: A MultiAgent Environment for MPSEs  
Author: Tzvetan T. Drashansky, Anupam Joshi, John R. Rice, Elias N. Houstis, Sanjiva Weerawarana 
Address: West Lafayette, IN 47907-1398  
Affiliation: Department of Computer Sciences Purdue University  
Abstract: In this paper we present a paradigm for simulating complex phenomena which may involve multiple physical phenomena and complicated geometry. The computational structure is of cooperating agents and much of the proposed methodology is widely applicable, but the focus in this paper is on phenomena modeled by partial differential equations (PDE). The computational process is to subdivide the physical object into components of simple geometric shapes modeled by a single problem solving environment (PSE). PSEs are viewed as agents which solve the PDE on each component independently. The interfaces between the components must have physical interface conditions satisfied; mediator agents use relaxation techniques for this. An agent-based architecture of an environment for building systems to implement this paradigm is described, using PSEs which are encapsulated into solver agents. This approach is naturally parallel and highly scalable; it is suitable for a wide variety of parallel and distributed high performance computing (HPC) architectures; it allows for the reuse and evolution of existing HPC software, and for a convenient abstraction of the solution process for non-expert users. An implementation of the architecture, named SciAgents , is presented and used to solve an example problem which illustrates this multidisciplinary problem solving environments (MPSE) framework.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Cammarata et al., </author> <title> Strategies of Cooperation in Distributed Problem Solving, </title> <booktitle> Readings in Distributed Artificial Intelligence (Bond and Gasser, </booktitle> <editor> eds.), </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1988, </year> <pages> pp. 102-105. </pages>
Reference-contexts: They reported results using both an hierarchical organization, as well as an "anarchic committee" organization, and found that the latter was as good as, and sometimes better than the former. Cammarata and coauthors <ref> [1] </ref> espouse strategies for cooperation. They analyze the problems faced by the groups of agents involved in distributed problem solving, and infer a set of requirements on information distribution and organizational policies.
Reference: [2] <author> P. Dewan, </author> <title> Principles of Designing Multi-User User Interface Development Environments Languages, </title> <booktitle> Proc. of the IFIP TC2/WG 2.7 Working Conference on Engineering for Human-Computer Interaction (Ellivuori, Finland), IFIP, </booktitle> <month> Aug </month> <year> 1992. </year>
Reference-contexts: It is the first layer to which the users have direct access. To facilitate extensive use of the virtual computing [34] model, and to allow collaboration between more than one users, the user interface of an agent must be separate from its functional core <ref> [2] </ref>. The top layer in our MPSE architecture consists of the global user interface.
Reference: [3] <author> T. Drashansky, A. Joshi, and J.R. Rice, </author> <title> SciAgents AnAgent Based Environment for Distributed, </title> <booktitle> Cooperative Scientific Computing, Proc. IEEE Intl. Conf. Tools with AI ICTAI'95, </booktitle> <year> 1995, </year> <pages> pp. 452-459. </pages>
Reference-contexts: Most physical systems and manufactured artifacts can be modeled as a mathematical network whose nodes represent the physical components in a system or artifact. Each node has a mathematical model of the physics of the component it represents and a solver agent <ref> [3] </ref> for its analysis. Individual components are chosen so that each node corresponds to a simple mathematical problem defined on a regular geometry. There exist many standard, reliable solver systems that can be applied to these local node problems. <p> The analysis of an artifact changes through time, thus some of the interfaces appear and disappear during the analysis session. To solve the global problem, we let these local solvers collaborate with each other to relax (i.e., resolve) the interface conditions. An interface controller or mediator agent <ref> [3] </ref> collects boundary values, dynamic/shape coordinates, and parameters/constraints from neighboring subdomains and adjusts boundary values and dynamic/shape coordinates to better satisfy the interface conditions.
Reference: [4] <author> T. T. Drashansky, </author> <title> A Software Architecture of Collaborating Agents for Solving PDEs, </title> <type> Tech. Report TR-95-010, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1995, </year> <title> (M.S. </title> <type> thesis). </type>
Reference-contexts: Then the main issue is what mediation schemes can be applied in this case | in other words, how to obtain a global solution out of the local solutions produced by the single-domain solvers. To do this, we use the interface relaxation technique <ref> [5, 4, 20, 19] </ref>. Important mathematical questions of the convergence of the method, the behavior of the solution in special cases, etc., are addressed in [20]. <p> Step 4. Iterate steps 2 and 3 until convergence. This mediation scheme is not hard to implement in our MPSE framework, although it requires not single but repetitive solving of the submodels by the solver agents. Its implementation does raise some technical problems which are covered in detail in <ref> [6, 4, 5] </ref>. 5.2 Agent Architecture of SciAgents Since SciAgents comply with the general MPSE architecture we have described, we concentrate here on the implementations details and on the decisions we have made in the agent architecture and the specifics of the interagent communication. 17 In SciAgents at the highest level
Reference: [5] <author> T. T. Drashansky and J. R. Rice, </author> <title> Processing PDE Interface Conditions - II, </title> <type> Tech. Report TR-94-066, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1994. </year>
Reference-contexts: Then the main issue is what mediation schemes can be applied in this case | in other words, how to obtain a global solution out of the local solutions produced by the single-domain solvers. To do this, we use the interface relaxation technique <ref> [5, 4, 20, 19] </ref>. Important mathematical questions of the convergence of the method, the behavior of the solution in special cases, etc., are addressed in [20]. <p> Typically, for second order PDEs, there are two physical or mathematical conditions involving values and normal derivatives of the solutions on the neighboring subdomains. Examples for common interface conditions are given in <ref> [5, 20] </ref>. The interface relaxation technique can be described briefly as follows. Step 1. Choose initial information as boundary conditions to determine the submodel solutions in each subdomain. Step 2. Solve the submodel in each subdomain and obtain a local solution. Step 3. <p> Step 4. Iterate steps 2 and 3 until convergence. This mediation scheme is not hard to implement in our MPSE framework, although it requires not single but repetitive solving of the submodels by the solver agents. Its implementation does raise some technical problems which are covered in detail in <ref> [6, 4, 5] </ref>. 5.2 Agent Architecture of SciAgents Since SciAgents comply with the general MPSE architecture we have described, we concentrate here on the implementations details and on the decisions we have made in the agent architecture and the specifics of the interagent communication. 17 In SciAgents at the highest level
Reference: [6] <author> T. T. Drashansky and J. R. Rice, </author> <title> SciAgents Solving Complex Heterogeneous PDE Models Using Networks of Interacting Problem Solvers, Mathematical Modeling and Scientific Computing 6 (1996), </title> <note> (to appear). 24 </note>
Reference-contexts: Step 4. Iterate steps 2 and 3 until convergence. This mediation scheme is not hard to implement in our MPSE framework, although it requires not single but repetitive solving of the submodels by the solver agents. Its implementation does raise some technical problems which are covered in detail in <ref> [6, 4, 5] </ref>. 5.2 Agent Architecture of SciAgents Since SciAgents comply with the general MPSE architecture we have described, we concentrate here on the implementations details and on the decisions we have made in the agent architecture and the specifics of the interagent communication. 17 In SciAgents at the highest level
Reference: [7] <author> T. Finin et al., </author> <title> KQML as an Agent Communication Language, </title> <booktitle> Proc. III Intl.Conf. on Information and Knowledge Management, ACM, </booktitle> <publisher> ACM Press, </publisher> <year> 1994. </year>
Reference-contexts: the general MPSE architecture we have described, we concentrate here on the implementations details and on the decisions we have made in the agent architecture and the specifics of the interagent communication. 17 In SciAgents at the highest level communication is done using the Knowledge Query and Manipulation Language (KQML <ref> [8, 7] </ref>) from ARPA's knowledge sharing initiative, and particularly using the public domain implementation KAPI by EIT Corp. and Lockheed, Inc. We adhere to the declarative approach in the agent interaction due to the heterogeneous environment of SciAgents .
Reference: [8] <editor> R. Fritzson et. al., </editor> <title> KQML- A Language and Protocol for Knowledge and Information Exchange, </title> <booktitle> Proc. 13th Intl. Distributed Artificial Intelligence Workshop, </booktitle> <month> July </month> <year> 1994. </year>
Reference-contexts: A significant part of this software already exists. An MPSE needs a communication medium which is accessible to all agents and components. Various existing network and transport level protocols and software can be used but they need to be coupled with an agent messaging system (like a KQML <ref> [8] </ref> implementation) and an intelligent controller in order to successfully instantiate and run the agents, and permit inter-agent cooperation. In order to help users build the MPSE from their problem specifications various toolkits are needed such as a database of mediator and PSE (solver) templates, and builders to construct them. <p> the general MPSE architecture we have described, we concentrate here on the implementations details and on the decisions we have made in the agent architecture and the specifics of the interagent communication. 17 In SciAgents at the highest level communication is done using the Knowledge Query and Manipulation Language (KQML <ref> [8, 7] </ref>) from ARPA's knowledge sharing initiative, and particularly using the public domain implementation KAPI by EIT Corp. and Lockheed, Inc. We adhere to the declarative approach in the agent interaction due to the heterogeneous environment of SciAgents .
Reference: [9] <author> E. Gallopoulos, E. Houstis, and J.R. Rice, </author> <title> Computer as Thinker/Doer: Problem-Solving Environments for Computational Science, </title> <booktitle> IEEE Computational Science and Enginerring 1 (1994), </booktitle> <volume> no. 2, </volume> <pages> 11-23. </pages>
Reference-contexts: This mapping can be displayed and modified interactively. All three systems can collect, visualize, and analyze performance data. Other systems that can be included in this category are Vecfem, PDE2D, Deqsol, Alpal etc. For a detailed overview of PSEs and their history we refer the readers to <ref> [9] </ref>. Many agent-based systems have been developed [36, 28, 31, 27], which demonstrate the capabilities of the agent technology. One of their important aspects is their modularity and flexibility.
Reference: [10] <author> M. Girard, </author> <title> An Easy Way to Construct Distributed Software, </title> <booktitle> Proc. of KBUP'95 First Intl. Workshop Knowledge-Based Systems for the (Re)Use of Program Libraries, </booktitle> <institution> INRIA, Sophia Antipolis, </institution> <year> 1995, </year> <pages> pp. 65-74. </pages>
Reference-contexts: The user interactions with the Central Control produce a script in its command language which may invoke the tools and other available programs to convert the output of a tool to the input to another tool. Another similar system has been developed by Girard <ref> [10] </ref> in which the user selects a set of applications (from a list of available ones), the input and the output of the computations (usually a file), and the system provides a program (based on the type of the I/O each application expects, with the user resolving the ambiguities) to invoke
Reference: [11] <author> E. N. Houstis and J. R. Rice, </author> <title> Parallel ELLPACK: A Development and Problem Solving Environment for High Performance Computing Machines, Programming Environments for High Level Scientific Problem Solving, </title> <publisher> North Holland, </publisher> <year> 1992, </year> <pages> pp. 229-243. </pages>
Reference-contexts: The user of the solution might also like to visualize it. The rest of this section assumes some familiarity of the reader with this process. There exist general solvers (PSEs) for this class of problems like //ELLPACK <ref> [11, 26] </ref> which has tools ( graphical and symbolic user interfaces) for defining the problem, a set of discretization methods for various problems, a set of linear equation solvers, and a set of routines for visualization of the solution. It also makes use of HPC hardware.
Reference: [12] <institution> INRIA, Description of Project EDiCA, </institution> <note> http://zenon.inria.fr/safir/SAM/Edica/edica.html#Description. </note>
Reference-contexts: This scheme uses a combination of learning as well as a priori rules relating to scalability of parallel computations [17]. Some attempts to combine several scientific computing applications in a (more or less) single environment have recently been reported in the literature. The project EDiCA <ref> [12] </ref> developed in INRIA, France, incorporates tools like Maple, Macaulay, Alpi, and other by using an integration component called Central Control, equipped with a GUI.
Reference: [13] <author> Anupam Joshi, </author> <title> To Learn or Not to Learn ..., Proc. </title> <booktitle> IJCAI'95 Workshop on Adaptation and Learning in Multiagent Systems, </booktitle> <year> 1995, </year> <note> (to appear). </note>
Reference-contexts: Lesser et al. [16] describes the FA/C (functionally accurate, cooperative) architecture in which agents exchange partial and tentative results in order to converge to a solution. Joshi <ref> [13] </ref> proposes an epistemic utility based approach which allows each agent to dynamically learn about the capabilities of other agents, and respond to the changes in these capabilities. This scheme uses a combination of learning as well as a priori rules relating to scalability of parallel computations [17].
Reference: [14] <editor> A. Joshi et al., </editor> <title> On Learning and Adaptation in Multiaget Systems: A Scientific Computing Perspective, </title> <type> Tech. Report TR-95-040, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1995. </year> <title> [15] , Neural and Nero-Fuzzy Approaches to Support Intelligent Scientific Problem Solving, </title> <journal> IEEE Compputational Science and Engineering (1996), </journal> <note> (to appear). </note>
Reference-contexts: The only global control exercised by the intelligent controller is to terminate all agents in case all mediators report local convergence or one of them reports a failure. The messages used in the interagent communication are given in full detail in <ref> [14] </ref>, we provide a small example in the next section. The above scheme provides a robust mechanism for cooperation among the computing agents. Using only local knowledge, they perform only local computations and communicate only with "neighboring" agents.
Reference: [16] <author> V. R. Lesser, </author> <title> A Retrospective View of FA/C Distributed Problem Solving, </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics 21 (1991), </journal> <volume> no. 6, </volume> <pages> 1347-1363. </pages>
Reference-contexts: They point out that in a DPS scenario, different agents may have different capabilities, limited knowledge and resources, and thus differing appropriateness in solving the problem at hand. Lesser et al. <ref> [16] </ref> describes the FA/C (functionally accurate, cooperative) architecture in which agents exchange partial and tentative results in order to converge to a solution.
Reference: [17] <author> D. Marinescu and J.R. Rice, </author> <title> On the scalability of Asynchronous Parallel Computations, </title> <editor> J. </editor> <booktitle> Parallel and Distributed Computing 22 (1994). </booktitle>
Reference-contexts: Joshi [13] proposes an epistemic utility based approach which allows each agent to dynamically learn about the capabilities of other agents, and respond to the changes in these capabilities. This scheme uses a combination of learning as well as a priori rules relating to scalability of parallel computations <ref> [17] </ref>. Some attempts to combine several scientific computing applications in a (more or less) single environment have recently been reported in the literature.
Reference: [18] <author> S. McFaddin and J. R. Rice, </author> <title> Collaborating PDE Solvers, </title> <journal> Appl. Num. Math 10 (1992), </journal> <pages> 279-295. </pages>
Reference-contexts: Therefore, the network abstraction of a physical system or artifact allows us to build a software system which is a network of collaborating well defined numerical objects through a set of interfaces. Some of the theoretical issues of this methodology have been addressed in <ref> [21, 24, 18] </ref> for the case of collaborating PDE models. The results obtained so far verify the feasibility and potential of network-based prototyping. 2 We see MPSEs as delivering problem solving services over the Net. This viewpoint leads naturally to collaborating, agent based methodologies.
Reference: [19] <author> S. McFaddin and J. R. Rice, RELAX: </author> <title> A Platform for Software Relaxation, Expert Systems for Scientific Computing (Houstis, </title> <editor> Rice, and Vichnevetsky, eds.), </editor> <publisher> North Holland, </publisher> <year> 1992. </year>
Reference-contexts: Then the main issue is what mediation schemes can be applied in this case | in other words, how to obtain a global solution out of the local solutions produced by the single-domain solvers. To do this, we use the interface relaxation technique <ref> [5, 4, 20, 19] </ref>. Important mathematical questions of the convergence of the method, the behavior of the solution in special cases, etc., are addressed in [20].
Reference: [20] <author> Mo Mu and J. R. Rice, </author> <title> Modeling with Collaborating PDE Solvers | Theory and Practice, </title> <type> Tech. Report TR-94-056, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1994. </year> <title> [21] , Modeling with Collaborating PDE Solvers | Theory and Practice, </title> <booktitle> Computing Systems in Engineering 6 (1995), </booktitle> <pages> 87-95. 25 </pages>
Reference-contexts: For example, an engine simulation is estimated to require 100 million variables and the answer (the data set allowing the display of the accurate solution at any point) is 20 gigabytes in size. The problem contains about 10,000 subdomains with 35,000 interfaces <ref> [20] </ref>. Clearly, custom software is required for solving each multiple-domain PDE problem and it is not feasible to build it with the traditional software development technologies. <p> Then the main issue is what mediation schemes can be applied in this case | in other words, how to obtain a global solution out of the local solutions produced by the single-domain solvers. To do this, we use the interface relaxation technique <ref> [5, 4, 20, 19] </ref>. Important mathematical questions of the convergence of the method, the behavior of the solution in special cases, etc., are addressed in [20]. <p> To do this, we use the interface relaxation technique [5, 4, 20, 19]. Important mathematical questions of the convergence of the method, the behavior of the solution in special cases, etc., are addressed in <ref> [20] </ref>. This technique uses physical relations among the parts of the model modeled by mathematical formulas involving the solutions of the submodels in the individual neighboring subdomains and their derivatives. <p> Typically, for second order PDEs, there are two physical or mathematical conditions involving values and normal derivatives of the solutions on the neighboring subdomains. Examples for common interface conditions are given in <ref> [5, 20] </ref>. The interface relaxation technique can be described briefly as follows. Step 1. Choose initial information as boundary conditions to determine the submodel solutions in each subdomain. Step 2. Solve the submodel in each subdomain and obtain a local solution. Step 3.
Reference: [22] <author> T. Oates et al., </author> <title> Cooperative Information Gathering: A Distributed Problem Solving Approach, </title> <type> Tech. Report TR-94-66, </type> <institution> UMASS, </institution> <year> 1994. </year>
Reference-contexts: Agent-based systems can minimize centralized control. We believe that using such systems to handle complex mathematical models is natural and direct. The agent paradigm allows distributed problem solving <ref> [22] </ref> which is distinct from merely using distributed computing. 4 The ability of the agents to autonomously pursue their goals can resolve the problems during the solution process without user intervention. This allows seamless derivation of the global solution.
Reference: [23] <author> J. Purtilo, </author> <title> The POLYLITH Software Bus, </title> <journal> ACM Trans. Prog. Lang. and Systems 16 (1994), </journal> <volume> no. 1, </volume> <pages> 151-174. </pages>
Reference-contexts: There exist component-integration systems like the POLYLITH software bus <ref> [23] </ref> which are oriented toward 5 distributed systems developers and provide decoupling facilities to the programmers in order to successfully interface relatively independent software entities.
Reference: [24] <author> A. Quarteroni, F. Pasquarelli, and A. Valli, </author> <title> Heterogeneous Domain Decomposition: </title> <booktitle> Principles, Algorithms, Applications, Proc. of Fifth Intl. Symp. Domain Decomposition Methods for PDEs (Philadel-phia) (D. </booktitle> <editor> Keyes et al., ed.), </editor> <publisher> SIAM Publications, </publisher> <year> 1992, </year> <pages> pp. 129-150. </pages>
Reference-contexts: Therefore, the network abstraction of a physical system or artifact allows us to build a software system which is a network of collaborating well defined numerical objects through a set of interfaces. Some of the theoretical issues of this methodology have been addressed in <ref> [21, 24, 18] </ref> for the case of collaborating PDE models. The results obtained so far verify the feasibility and potential of network-based prototyping. 2 We see MPSEs as delivering problem solving services over the Net. This viewpoint leads naturally to collaborating, agent based methodologies.
Reference: [25] <author> V. Rego et al., </author> <title> Process Mobility in Distributed Memory Simulation Systems, </title> <booktitle> Proc. Winter Simulation Conference, </booktitle> <year> 1993, </year> <pages> pp. 722-730. </pages>
Reference-contexts: The main issue is then the correct distribution of the solver agents to balance the load. This can be done by the global execution interface in several ways. One is to reassign agents <ref> [25] </ref> to appropriate computing units; another is to split some subdomains further and distribute them to separate computing units.
Reference: [26] <author> J. R. Rice and R. F. Boisvert, </author> <title> Solving Elliptic Problems Using ELLPACK, </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: The user of the solution might also like to visualize it. The rest of this section assumes some familiarity of the reader with this process. There exist general solvers (PSEs) for this class of problems like //ELLPACK <ref> [11, 26] </ref> which has tools ( graphical and symbolic user interfaces) for defining the problem, a set of discretization methods for various problems, a set of linear equation solvers, and a set of routines for visualization of the solution. It also makes use of HPC hardware. <p> The wrapper invokes the //ELLPACK user interface when the agent is instantiated in order to obtain the subproblem definition from the user. After the problem is defined, an //ELLPACK program <ref> [26] </ref> is generated which is then translated into a Fortran program containing the information where (on which hardware platform) the resulting executable will be run. Then the program is compiled and linked to produce an executable, after which the //ELLPACK user interface exits and the wrapper takes over.
Reference: [27] <author> J. C. Schlimmer and L. A. Hermens, </author> <title> Software Agents: Completing Patternsand Constructing User Interfaces, </title> <journal> Journal of Artificial Intelligence Research 1 (1993), </journal> <volume> no. </volume> <pages> 61-89. </pages>
Reference-contexts: All three systems can collect, visualize, and analyze performance data. Other systems that can be included in this category are Vecfem, PDE2D, Deqsol, Alpal etc. For a detailed overview of PSEs and their history we refer the readers to [9]. Many agent-based systems have been developed <ref> [36, 28, 31, 27] </ref>, which demonstrate the capabilities of the agent technology. One of their important aspects is their modularity and flexibility. It is very easy to dynamically add or remove agents, to move agents around the computing network, and to organize the user interface.
Reference: [28] <author> Y. Shoham, </author> <title> Agent-Oriented Programming, </title> <booktitle> Artificial Intelligence 60 (1993), </booktitle> <volume> no. 1, </volume> <pages> 51-92. </pages>
Reference-contexts: All three systems can collect, visualize, and analyze performance data. Other systems that can be included in this category are Vecfem, PDE2D, Deqsol, Alpal etc. For a detailed overview of PSEs and their history we refer the readers to [9]. Many agent-based systems have been developed <ref> [36, 28, 31, 27] </ref>, which demonstrate the capabilities of the agent technology. One of their important aspects is their modularity and flexibility. It is very easy to dynamically add or remove agents, to move agents around the computing network, and to organize the user interface.
Reference: [29] <author> R. G. Smith and R. Davis, </author> <title> Frameworks for Cooperation in Distributed Problem Solving, </title> <booktitle> Readings in Distributed Artificial Intelligence (Bond and Gasser, </booktitle> <editor> eds.), </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1988, </year> <pages> pp. 61-70. </pages>
Reference-contexts: This allows seamless derivation of the global solution. Any multi agent system also needs to have mechanisms for coordinating the activities of various agents. Several researchers have addressed the issue of coordinating multiagent systems. For instance Smith and Davis <ref> [29] </ref> propose two forms of multiagent cooperation, task sharing and result sharing. Task sharing essentially involves creating subtasks, and then farming them off to other agents. In this sense, it is closer to pure distributed computation. Result sharing is more data directed.
Reference: [30] <author> R. Sutor, </author> <note> The OpenMath Consortium, http://wizkids.matematik.su.se/users/leifj/wshop/openmath.html. </note>
Reference-contexts: Such systems may help in resolving some of the integration problems that are faced in developing an MPSE, but many of the problems we have mentioned remain and need to be addressed separately. The development of standards in communicating application-level data in scientific computing, such as OpenMath <ref> [30] </ref>, can be of significant help to developers of MPSEs. OpenMath is an attempt to define a standard for communicating mathematical objects, processable by computers between applications. 3 MPSE as a User Abstraction In this section we propose an approach for building MPSEs.
Reference: [31] <author> L. Z. Varga et. al., </author> <title> Integrating Intelligent Systems into a Cooperating Community for Electricity Distribution Management, </title> <journal> International Journal of Expert Systems with Applications 7 (1994), </journal> <volume> no. </volume> <pages> 4. </pages>
Reference-contexts: All three systems can collect, visualize, and analyze performance data. Other systems that can be included in this category are Vecfem, PDE2D, Deqsol, Alpal etc. For a detailed overview of PSEs and their history we refer the readers to [9]. Many agent-based systems have been developed <ref> [36, 28, 31, 27] </ref>, which demonstrate the capabilities of the agent technology. One of their important aspects is their modularity and flexibility. It is very easy to dynamically add or remove agents, to move agents around the computing network, and to organize the user interface.
Reference: [32] <author> S. Weerawarana, </author> <title> Problem Solving Environments for Partial Differential Equation Based Systems, </title> <type> Ph.D. thesis, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1994. </year>
Reference-contexts: The user's high-level view of the MPSE architecture is shown in Figure 3. The global communication medium used by all entities in the MPSE is called software bus <ref> [32] </ref>. The MPSE constructor communicates with the user through the user interface builder and uses the software bus to communicate with the templates in order to instantiate various agents. Agents communicate with each other through the software bus and have their own local user interfaces to interact with the user. <p> We adhere to the declarative approach in the agent interaction due to the heterogeneous environment of SciAgents . The contents of the messages is in the high-level language S-KIF for scientific computing. This is based on a language we developed for PDE data called PDESpec <ref> [32] </ref>. Using KQML for the inter agent communication in SciAgents ensures portability, compatibility, and better opportunities for extensions and the inclusion of agents built by others.
Reference: [33] <author> S. Weerawarana et al., </author> <title> Using NCSA Mosaic to build notebook interfaces for CS&E applications, </title> <type> Tech. Report CSD-TR-95-006, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <year> 1995, </year> <note> (submitted to IFIP WG2.7 EHCI '95). </note> <month> [34] , Web//ELLPACK: </month> <title> A Networked Computing Service on the World Wide Web, </title> <type> Tech. Report TR 96-011, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1996. </year>
Reference-contexts: In order to help users build the MPSE from their problem specifications various toolkits are needed such as a database of mediator and PSE (solver) templates, and builders to construct them. Finally, the functionality of the user interface requires a number of tools and editors | a "notebook"-like interface <ref> [33] </ref>, tools for monitoring and browsing the computations, and tools for 11 visualizing the different parts or the global solution. Consider now an MPSE built to solve a specific problem. We can group the software components integrated into it into five layers (see Figure 5).
Reference: [35] <author> R. Wesson et al., </author> <title> Network Structures for Distributed Situation Assessment, </title> <booktitle> Readings in Distributed Artificial Intelligence (Bond and Gasser, </booktitle> <editor> eds.), </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1988, </year> <pages> pp. 71-89. </pages>
Reference-contexts: In this sense, it is closer to pure distributed computation. Result sharing is more data directed. Different agents are solving different tasks, and keep on exchanging partial results to cooperate. They also proposed using "contract nets", to distribute tasks. Wesson et al. showed <ref> [35] </ref> how many intelligent sensor devices could pool their knowledge to obtain an accurate overall assessment of the situation. The specific task presented in their work involved detecting moving entities, even though each "sensor agent" saw only a part of the environment.
Reference: [36] <author> M. Wooldridge and N. Jennings, </author> <title> Intelligent Agents: </title> <journal> Theory and Practice, </journal> <note> (submitted to Knowledge Engineering Review), 1994. 26 </note>
Reference-contexts: All three systems can collect, visualize, and analyze performance data. Other systems that can be included in this category are Vecfem, PDE2D, Deqsol, Alpal etc. For a detailed overview of PSEs and their history we refer the readers to [9]. Many agent-based systems have been developed <ref> [36, 28, 31, 27] </ref>, which demonstrate the capabilities of the agent technology. One of their important aspects is their modularity and flexibility. It is very easy to dynamically add or remove agents, to move agents around the computing network, and to organize the user interface.
References-found: 33

