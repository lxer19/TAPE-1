URL: http://www.isi.edu/~gts/paps/ikpj.ps.gz
Refering-URL: http://www.isi.edu/~gts/pubs.html
Root-URL: http://www.isi.edu
Title: Design, Implementation and Deployment of a Secure Account-Based Electronic Payment System  
Author: Mihir Bellare, Juan A. Garay Ralf Hauser, Amir Herzberg, Hugo Krawczyk, Michael Steiner, Gene Tsudik, Els Van Herreweghen, Michael Waidner 
Abstract: This paper discusses the design, implementation and deployment of a secure and practical payment system for electronic commerce on the Internet. The system is based on the iKP family of protocols - iKP (i = 1; 2; 3) developed at IBM Research. The protocols implement credit card-based transactions between buyers and merchants while the existing financial network is used for payment clearing and authorization. The protocols are extensible and can be readily applied to other account-based payment model, such as debit cards. They are based on careful and minimal use of public-key cryptography and can be implemented in either software or hardware. Individual protocols differ in both complexity and degree of security. In addition to being both a pre-cursor and a direct ancestor of the well-known SET standard, iKP-based payment systems have been in continuous operation on the Internet since mid-1996. This longevity as well as the security and relative simplicity of the underlying mechanisms make our experience with iKP unique. For this reason, this paper also reports on, and addresses, a number of practical issues arising in the course of implementation and real-world deployment of a secure payment system. 
Abstract-found: 1
Intro-found: 1
Reference: [AJSW97] <author> N. Asokan, Phil Janson, Michael Steiner, and Michael Waidner. </author> <title> State of the art in electronic payment systems. </title> <journal> IEEE Computer, </journal> <volume> 30(9) </volume> <pages> 28-35, </pages> <month> September </month> <year> 1997. </year> <note> A Japanese translation of the article appeared in pp 195-201, Nikkei Computer (http://nc.nikkeibp.co.jp/jp/) issue of March 30, </note> <year> 1998. </year>
Reference-contexts: All these ancestors were proposed independently of each other but used more or less the same type of cryptographic protocols. From 1994 to 1996 an almost countless number of payment protocols for all kinds of payment models were proposed (see <ref> [AJSW97] </ref> for a survey). One important difference between iKP and most of these proposals is that iKP was not just a paper design: The "Zurich iKP Prototype (ZiP)" is a fully operational prototype of 2KP and 3KP. <p> Typically each model requires its own type of protocols, i.e., one cannot expect that iKP can be applied to payment models 3 - ? Payment System Provider Clearing Payment Acquirer SellerBuyer Issuer that are very different to the credit card model. We refer to <ref> [AJSW97] </ref> for a survey of other payment models and protocols. 3 Payment Model Parties. All iKP protocols are based on the existing credit-card payment system. The parties in the payment system are shown in Figure 1.
Reference: [And94] <author> Ross Anderson. </author> <title> Why cryptosystems fail. </title> <journal> Communications of the ACM, </journal> <volume> 37(11) </volume> <pages> 32-41, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Some consequences of systems where those rules were not appropriately designed are illustrated in <ref> [And94] </ref>. 2 acquirer are introduced in Section 3, and their different security requirements are analyzed in Section 4. The iKP family is described and analyzed in Section 5, and an implementation architecture for it is proposed in Section 6.
Reference: [Aso98] <author> N. Asokan. </author> <title> Fairness in Electronic Commerce. </title> <type> PhD thesis, </type> <institution> University of Waterloo, </institution> <month> May </month> <year> 1998. </year>
Reference-contexts: B4- Receipt from Seller. The buyer wants a proof that the seller who has made the offer has received payment and promised to deliver the goods. This takes the form of an undeniable receipt. 2KP and 3KP will satisfy this requirement, but will not ensure fairness <ref> [ASW98, Aso98] </ref>: The seller can always refuse sending this receipt while already having received the authorization message from the acquirer. In this case, the buyer must take the next statement of account as a replacement for this receipt. Additional possible buyer requirements.
Reference: [ASW98] <author> N. Asokan, Victor Shoup, and Michael Waidner. </author> <title> Asynchronous protocols for optimistic fair exchange. </title> <booktitle> In Proceedings of the IEEE Symposium on Research in Security and Privacy, Research in Security and Privacy, </booktitle> <pages> pages 86-99, </pages> <address> Oakland, CA, </address> <month> May </month> <year> 1998. </year> <note> IEEE Computer Society Press. A minor bug in the proceedings version was fixed. An errata sheet, distributed at the conference, is available at http://www.zurich.ibm.com/Technology/Security/publications/1998/ASW98-errata.ps.gz; A related paper [?] is available as well. </note>
Reference-contexts: B4- Receipt from Seller. The buyer wants a proof that the seller who has made the offer has received payment and promised to deliver the goods. This takes the form of an undeniable receipt. 2KP and 3KP will satisfy this requirement, but will not ensure fairness <ref> [ASW98, Aso98] </ref>: The seller can always refuse sending this receipt while already having received the authorization message from the acquirer. In this case, the buyer must take the next statement of account as a replacement for this receipt. Additional possible buyer requirements.
Reference: [BCK96] <author> Mihir Bellare, Ran Canetti, and Hugo Krawczyk. </author> <title> Keying hash functions for message authentication. </title> <booktitle> In Advances in Cryptology - CRYPTO '96, number 1109 in Lecture Notes in Computer Science, </booktitle> <pages> pages 1-15. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin Germany, </address> <year> 1996. </year>
Reference-contexts: I.e., H k (K; ) should behave like a family of pseudo random functions. (Examples: HMAC <ref> [BCK96, Kra99] </ref>). E X () Public-key encryption using PK X , done in a way to provide not only confi dentiality but also some kind of "message integrity." S X () Signature with respect to SK X . Note the signature of message M does NOT include M .
Reference: [BR94] <author> Mihir Bellare and Phillip Rogaway. </author> <title> Optimal asymmetric encryption how to encrypt with rsa. </title> <editor> In I.B. Damgard, editor, </editor> <booktitle> Advances in Cryptology - EUROCRYPT '94, Lecture Notes in Computer Science, </booktitle> <pages> pages 92-111. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin Germany, </address> <year> 1994. </year> <note> final (revised) version appeared November 19, </note> <year> 1995. </year>
Reference-contexts: Note the signature of message M does NOT include M . We assume the signature function hashes the message before signing. In particular, tampering with ciphertext is detectable. Two practical yet proveably secure schemes to achieve this are Optimal Asymmetric Encryption Padding (OAEP) <ref> [BR94] </ref> and Cramer-Shoup [CS98]. We stress that such encryption does not provide authentication in the manner of a signature, i.e., it does not provide non-repudiation. But it can be made to provide an authentication-like capability between parties sharing a key (such as the BAN or PIN).
Reference: [CB94] <author> William R. Cheswick and Steven M. Bellovin. </author> <title> Firewalls and Internet Security Repelling the Wily Hacker. Professional Computing Series. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year> <note> ISBN 0-201-63357-4. 23 </note>
Reference-contexts: One of the biggest concerns is that of an adversary breaking into an acquirer computer through the Internet connection. Therefore, the acquirer's computer must be protected with the utmost care; including a very limited Internet connection using advanced firewall technology (e.g., <ref> [CB94, CGHK98] </ref>.) Furthermore, the trust in the acquirer's computer must be limited, so that a break-in would have a limited effect only. 4 Security Requirements In this section we consider a range of potential requirements for each party involved in the payment process: issuer/acquirer, merchant, and buyer.
Reference: [CD97] <author> Eui-Suk Chung and Daniel Dardailler. </author> <title> Joint electronic payment initiative (jepi). </title> <type> White paper, </type> <institution> JEPI, </institution> <month> April </month> <year> 1997. </year>
Reference-contexts: to be provided by other means (e.g., the browser), not by iKP. 4 Thus, DESC and PRICE are part of the starting information of seller and buyer. 4 Indeed, the consensus nowadays is that functions that are beyond payment, such as price negotiation, should be separated, and standardized; e.g., JEPI <ref> [CD97] </ref>, SEMPER [Wai96]. 8 * Quantities occuring in all three protocols: SALT B Random number generated by B. Used to salt DESC and thus ensure privacy of order information (DESC) on the S to A link; also used to provide freshness of signatures (Sig S and Sig A ).
Reference: [CGHK98] <author> Pau-Chen Cheng, Juan Garay, Amir Herzberg, and Hugo Krawczyk. </author> <title> A security architecture for the internet protocol. </title> <journal> IBM Systems Journal, Special issue on the Internet, </journal> <volume> 37(1) </volume> <pages> 42-60, </pages> <year> 1998. </year> <note> Updated version of </note> [?]. 
Reference-contexts: One of the biggest concerns is that of an adversary breaking into an acquirer computer through the Internet connection. Therefore, the acquirer's computer must be protected with the utmost care; including a very limited Internet connection using advanced firewall technology (e.g., <ref> [CB94, CGHK98] </ref>.) Furthermore, the trust in the acquirer's computer must be limited, so that a break-in would have a limited effect only. 4 Security Requirements In this section we consider a range of potential requirements for each party involved in the payment process: issuer/acquirer, merchant, and buyer.
Reference: [CS98] <author> Ronald Cramer and Victor Shoup. </author> <title> A practical public key cryptosystem provably secure against adaptive chosen ciphertext attack. </title> <editor> In Hugo Krawczyk, editor, </editor> <booktitle> Advances in Cryptology - CRYPTO '98, number 1462 in Lecture Notes in Computer Science, </booktitle> <pages> pages 13-25. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin Germany, </address> <month> August </month> <year> 1998. </year>
Reference-contexts: Note the signature of message M does NOT include M . We assume the signature function hashes the message before signing. In particular, tampering with ciphertext is detectable. Two practical yet proveably secure schemes to achieve this are Optimal Asymmetric Encryption Padding (OAEP) [BR94] and Cramer-Shoup <ref> [CS98] </ref>. We stress that such encryption does not provide authentication in the manner of a signature, i.e., it does not provide non-repudiation. But it can be made to provide an authentication-like capability between parties sharing a key (such as the BAN or PIN).
Reference: [CTS95] <author> Benjamin Cox, J. D. Tygar, and Marvin Sirbu. </author> <title> NetBill security and transaction protocol. </title> <booktitle> In First USENIX Workshop on Electronic Commerce [USE95]. </booktitle>
Reference-contexts: This protocol supports delayed/separate clearance. (Of course, an acquirer may dictate its policy on this subject to all constituent sellers.) 6 Note that most other micro-payment protocols such as Millicent [GMA + 95] and NetBill <ref> [CTS95] </ref> gain their efficiency through the use of shared-key cryptosystems and therefore require complete trust in the payment system provider 7 The terms "clearance" and "capture" are used interchangeably throughout this document. 18 PFLAGS:SIG B Buyer's signature Sig B in Payment and Auth-Request.
Reference: [DA98] <author> Tim Dierks and Christopher Allen. </author> <title> The TLS protocol version 1.0. </title> <type> Internet Draft, </type> <month> November </month> <year> 1998. </year> <month> Expires May 12, </month> <year> 1999. </year>
Reference-contexts: Finally we designed iKP as a family of protocols, allowing for a gradual deployment. Today only two approaches for secure credit card payments over the Internet are practically relevant: SET, and encryption of credit card data via SSL [FKK96], respectively TLS <ref> [DA98] </ref>. SET and its ancestor iKP, in particular 3KP, are very similar. The main difference is in their complexity: iKP was designed as a lightweight protocol that provides the core payment functionality only, and is therefore relatively simple to understand and to analyze.
Reference: [FKK96] <author> Alan O. Freier, Philip Kariton, and Paul C. Kocher. </author> <title> The SSL protocol: Version 3.0. </title> <type> Technical report, Internet Draft, </type> <year> 1996. </year> <note> Will be eventually replaced by TLS. </note>
Reference-contexts: It does, however, securely link order information into the payment to enable effective dispute handling. The iKP protocols do not explicitly provide encryption of the order information. Such protection is assumed to be provided by other existing mechanisms, e.g., SSL <ref> [FKK96] </ref>. The decoupling of order encryption from the electronic payment protocol is an important design principle of iKP which supports compatibility with different underlying browsing and privacy-protecting mechanisms. It also adds to the simplicity, modularity, and ease of analysis of the protocols. <p> Finally we designed iKP as a family of protocols, allowing for a gradual deployment. Today only two approaches for secure credit card payments over the Internet are practically relevant: SET, and encryption of credit card data via SSL <ref> [FKK96] </ref>, respectively TLS [DA98]. SET and its ancestor iKP, in particular 3KP, are very similar. The main difference is in their complexity: iKP was designed as a lightweight protocol that provides the core payment functionality only, and is therefore relatively simple to understand and to analyze. <p> For example a businessman may be purchasing the latest information on certain stocks and may not want competitors to know which stocks he is interested in. The privacy of order information and amount of payment should be implemented independently of the payment protocol, e.g., based on SSL <ref> [FKK96] </ref>. iKP does provide some privacy: it does not reveal order information to any other party than the seller, at least as long as there is no dispute. But it does not include encryption of these data. <p> Also, if privacy is really a concern, the buyer-to-seller communication may be protected by alternative means (e.g., SSL <ref> [FKK96] </ref>). We stress that provision of privacy is not a primary concern of a payment protocol. However, we wish at least to not give anything away that should not be, and took the chance to add whatever privacy we could add without much cost. <p> Note also that special care has to be taken when hiding the BAN information in the certificate. Order privacy against eavesdroppers could be achieved by applying a secure communication protocol (e.g., SSL <ref> [FKK96] </ref>), or, if desired, the iKP protocols themselves could be extended to provide that protection. Since iKP aims at credit-card-like payments, no anonymity against the payment system is provided.
Reference: [GMA + 95] <author> Steve Glassman, Mark Manasse, Martin Abadi, Paul Gauthier, and Patrick Sobalvarro. </author> <title> The millicent protocol for inexpensive electronic commerce. </title> <booktitle> In Fourth International Conference on the World-Wide Web, </booktitle> <publisher> MIT, </publisher> <address> Boston, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: This protocol supports delayed/separate clearance. (Of course, an acquirer may dictate its policy on this subject to all constituent sellers.) 6 Note that most other micro-payment protocols such as Millicent <ref> [GMA + 95] </ref> and NetBill [CTS95] gain their efficiency through the use of shared-key cryptosystems and therefore require complete trust in the payment system provider 7 The terms "clearance" and "capture" are used interchangeably throughout this document. 18 PFLAGS:SIG B Buyer's signature Sig B in Payment and Auth-Request.
Reference: [HS95] <author> Ralf Hauser and Michael Steiner. </author> <title> Generic extensions of WWW browsers. </title> <booktitle> In First USENIX Workshop on Electronic Commerce [USE95], </booktitle> <pages> pages 147-154. </pages>
Reference-contexts: multiple clearance transactions against the same payment authorization are allowed, the clearance signatures (SigClrn S , SigClrn A ) are further distinguished by CLRN-SEQ. 21 Glue is an optional part that glues the network-independent buyer application to a user application such as a WWW browser, a CD-ROM catalog, etc. (see <ref> [HS95] </ref>) Payment applications, Transaction Layer, Glue, Comm and Safe Storage are all implemented in C++. The lower layers, consisting of the iKP, certificate and crypto libraries, are written in C.
Reference: [HSW96] <author> Ralf Hauser, Michael Steiner, and Michael Waidner. </author> <title> Micro-payments based on iKP. </title> <type> Research Report 2791 (# 89269), </type> <institution> IBM Research, </institution> <month> February </month> <year> 1996. </year>
Reference-contexts: Another avenue for extensions are micro-payments: The relativly high cost of credit card transaction make iKP not directly suitable for payments of very small amounts. However, Hauser et al. <ref> [HSW96] </ref> show how iKP can be extended to support micro-payments without loosing strong multi-party security 6 . The iKP protocols (more specifically, 2KP and 3KP|or a combination thereof) were implemented at the IBM Zurich Research Lab.
Reference: [ISO94] <author> ISO/IEC. </author> <title> Information technology open systems interconnection the directory: Authentication framework, </title> <month> June </month> <year> 1994. </year> <note> same as ITU-T Rec X.509. </note>
Reference-contexts: The Certificate Library implements a simple certificate issuing and verification functionality for certificates and certificate chains in a hierarchical model. The content of the certificates is taken from the X.509 <ref> [ISO94] </ref> specification.
Reference: [Kra99] <author> Hugo Krawczyk. </author> <title> Blinding of credit card numbers in the SET protocol. </title> <booktitle> In Proceedings of the 3rd Conference on Financial Cryptography (FC '99), </booktitle> <address> Anguilla, British West Indies, </address> <month> Feb </month> <year> 1999. </year> <booktitle> International Financial Cryptography Association (IFCA). </booktitle>
Reference-contexts: I.e., H k (K; ) should behave like a family of pseudo random functions. (Examples: HMAC <ref> [BCK96, Kra99] </ref>). E X () Public-key encryption using PK X , done in a way to provide not only confi dentiality but also some kind of "message integrity." S X () Signature with respect to SK X . Note the signature of message M does NOT include M . <p> Similarly CERT B can securely link the BAN to the signing key. This allows the acquirer to efficiently verify that the payer has the necessary authority over BAN contained in the SLIP. See the use of SALT C in the ZiP protocols below and Krawczyk <ref> [Kra99] </ref> for a more indepth study of this issue. The buyer's signature serves as undeniable proof of transaction (A1.b), and enables disputability (B1.b).
Reference: [Lar96] <author> Steen Larsen. </author> <title> Zurich iKP Prototype (ZiP): iKP Transaction Layer Functional Specification. </title> <institution> IBM Zurich Research Laboratory, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: As described in detail in A.3, only SLIP is encrypted, and the data therein is limited to financial information. 6.3 Architecture nodes, access the iKP functionality through the Transaction Layer interface <ref> [Lar96] </ref>. The Transaction Layer provides the payment applications with a high-level (C++) interface using simple payment objects, such as a BuyerTransaction class with methods Initiate (), Pay (), Inquiry (). The Transaction Layer takes care of association management, audit and configuration.
Reference: [MV97] <author> Mastercard and Visa. </author> <title> SET Secure Electronic Transactions Protocol, </title> <note> version 1.0 edition, </note> <month> May </month> <year> 1997. </year> <title> Book One: Business Specifications, Book Two: Technical Specification, Book Three: Formal Protocol Definition. </title> <note> Available from http://www.setco.org/set specifications.html. </note>
Reference-contexts: Subsequently iKP was incorporated into the "Secure Electronic Payment Protocols (SEPP)," a short-lived standardization effort by IBM, MasterCard, Europay and Netscape. SEPP, in turn, was a key starting point for "Secure Electronic Payments (SET)," the joint VISA/MasterCard standard for credit card payments <ref> [MV97] </ref>. In fact, SET still retains some of the iKP-esque features. Other important ancestors of SET are the "CyberCash Credit Card Protocol" by CyberCash, and the "Secure Transaction Technology (STT)" by Microsoft and VISA. <p> Later, Eurocard/Mastercard credit card payments were added to the I-Pay brand. Currently I-Pay is accepted by 80 on-line merchants and has a user base of 17000 users. In line with initial plans to use iKP only for the initial trial and to move to the more standardized SET <ref> [MV97] </ref> technology once available and accepted, a phased transition is currently replacing ZiP technology with SET technology. Acknowledgements We thank Phil Janson and Mark Linehan for helpful discussions, and Jose L. Abad Peiro, Hans Granqvist and Steen Larsen for their contributions to the implementation of iKP/ZiP.
Reference: [NIS95] <institution> NIST National Institute of Standards and Technology (Computer Systems Laboratory). </institution> <note> Secure hash standard. Federal Information Processing Standards Publication FIPS PUB 180-1, </note> <month> April </month> <year> 1995. </year>
Reference-contexts: Think of H () as return ing "random" values. (Examples: MD5 [Riv92], SHA-1 <ref> [NIS95] </ref>) H k (K; ) This one-way hash function requires in addition to collision-resistance that no information is leaked about the other arguments if its first argument K is choosen at random. I.e., H k (K; ) should behave like a family of pseudo random functions. (Examples: HMAC [BCK96, Kra99]).
Reference: [Riv92] <author> Ron Rivest. </author> <title> The MD5 message-digest algorithm. Internet RFC 1321, </title> <month> April </month> <year> 1992. </year>
Reference-contexts: Think of H () as return ing "random" values. (Examples: MD5 <ref> [Riv92] </ref>, SHA-1 [NIS95]) H k (K; ) This one-way hash function requires in addition to collision-resistance that no information is leaked about the other arguments if its first argument K is choosen at random.
Reference: [Ste96] <author> Michael Steiner. </author> <title> Zurich iKP Prototype (ZiP): Cryptographic Library Specification. </title> <institution> IBM Zurich Research Laboratory, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: The lower layers, consisting of the iKP, certificate and crypto libraries, are written in C. The iKP Library [Tsu96] provides the core functionality for composing and verifying iKP protocol messages, using Certificate Library [Van96] for verifying certificates and Crypto <ref> [Ste96] </ref> for accessing cryptographic primitives. The iKP Library allows Buyer, Seller and Acquirer applications to verify received iKP messages against a context kept by the Transaction Layer, and to compose iKP messages to be sent. It returns an updated state to the Transaction Layer after each successful verification or composition.
Reference: [Tsu96] <author> Gene Tsudik. </author> <title> Zurich iKP prototype: Protocol specification document. </title> <type> Research Report RZ 2792, </type> <institution> IBM Research, </institution> <month> February </month> <year> 1996. </year>
Reference-contexts: The lower layers, consisting of the iKP, certificate and crypto libraries, are written in C. The iKP Library <ref> [Tsu96] </ref> provides the core functionality for composing and verifying iKP protocol messages, using Certificate Library [Van96] for verifying certificates and Crypto [Ste96] for accessing cryptographic primitives.
Reference: [USE95] <editor> USENIX. </editor> <booktitle> First USENIX Workshop on Electronic Commerce, </booktitle> <address> New York, </address> <month> July </month> <year> 1995. </year> <month> 24 </month>
Reference: [Van96] <author> Els Van Herreweghen. </author> <title> Zurich iKP Prototype (ZiP): Certificate Library (CERT) Specification. </title> <institution> IBM Zurich Research Laboratory, </institution> <month> February </month> <year> 1996. </year>
Reference-contexts: The lower layers, consisting of the iKP, certificate and crypto libraries, are written in C. The iKP Library [Tsu96] provides the core functionality for composing and verifying iKP protocol messages, using Certificate Library <ref> [Van96] </ref> for verifying certificates and Crypto [Ste96] for accessing cryptographic primitives. The iKP Library allows Buyer, Seller and Acquirer applications to verify received iKP messages against a context kept by the Transaction Layer, and to compose iKP messages to be sent.
Reference: [Wai96] <author> Michael Waidner. </author> <title> Development of a secure electronic marketplace for Europe. </title> <editor> In E. Bertino, H. Kurth, G. Martella, and E. Montolivo, editors, </editor> <booktitle> Proceedings of the Fourth European Symposium on Research in Computer Security (ESORICS), number 1146 in Lecture Notes in Computer Science, </booktitle> <address> Rome, Italy, September 1996. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin Germany. </address> <note> also published in: EDI Forum 9/2 (1996) 98-106, see also http://www.semper.org. </note>
Reference-contexts: provided by other means (e.g., the browser), not by iKP. 4 Thus, DESC and PRICE are part of the starting information of seller and buyer. 4 Indeed, the consensus nowadays is that functions that are beyond payment, such as price negotiation, should be separated, and standardized; e.g., JEPI [CD97], SEMPER <ref> [Wai96] </ref>. 8 * Quantities occuring in all three protocols: SALT B Random number generated by B. Used to salt DESC and thus ensure privacy of order information (DESC) on the S to A link; also used to provide freshness of signatures (Sig S and Sig A ).
References-found: 27

