URL: http://dimacs.rutgers.edu/techps/1994/94-51.ps
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1994.html
Root-URL: http://www.cs.rutgers.edu
Title: Fast and Simple Algorithms for Perfect Phylogeny and Triangulating Colored Graphs  
Author: Richa Agarwala and David Fernandez-Baca 
Abstract: This paper presents an O((r n=m) m rnm) algorithm for determining whether a set of n species has a perfect phylogeny, where m is the number of characters used to describe a species and r is the maximum number of states that a character can be in. The perfect phylogeny algorithm leads to an O((2e=k) k e 2 k) algorithm for triangulating a k-colored graph having e edges.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agarwala, D. Fern andez-Baca, and G. Slutzki, </author> <title> Fast algorithms for inferring evolutionary trees, </title> <note> Submitted to Journal of Computational Biology. This is a corrected version of the paper that appeared in Proceedings of the 30th Allerton Conference on Comm., Control, </note> <institution> and Comput. </institution> <year> (1992), </year> <pages> pp. 594-603. </pages>
Reference-contexts: Supported in part by the National Science Foundation under grant CCR-9211262. 1 for r = 2, the binary character case. Agarwala, Fernandez-Baca, and Slutzki <ref> [1] </ref> have shown that, under a suitable representation of the input, the run time for the binary character case can be reduced to O (C) where C is the number of ones in the matrix. This reference also presents efficient algorithms for dynamic insertion and deletion of species and characters.
Reference: [2] <author> R. Agarwala and D. Fern andez-Baca, </author> <title> A polynomial-time algorithm for the perfect phylogeny problem when the number of character states is fixed, </title> <booktitle> In Proceedings of the 34th Annual Symposium on Foundations of Computer Science (1993), </booktitle> <pages> pp. 140-147. </pages> <note> To appear in SIAM J. on Computing. </note>
Reference-contexts: Dress and Steel [7] devised a O (nm 2 ) algorithm for r 3. Kannan and Warnow [12] gave a O (n 2 m) algorithm for r 4 (quaternary characters). Agarwala and Fernandez-Baca <ref> [2] </ref> gave an O (2 3r (nm 3 + m 4 )) algorithm for the perfect phylogeny problem when the characters are restricted to have at most r states. The line of attack we follow in this paper is to restrict m, the maximum number of characters. <p> Linear time algorithms have been found for m = 3 [5, 13]. Bodlaender, Fellows, and Hallett [3] have shown that the perfect phylogeny problem is hard for the complexity class W <ref> [2] </ref>, implying that it is unlikely to be solved by an algorithm whose running time is of the form O (f (m)p (r; n; m)) where f is an exponential function and p is a polynomial function. <p> Here we present a simpler, and thus more practical, O ((r n=m) m rnm) perfect phylogeny algorithm, which is based on the same structural properties of perfect phylogenies that earlier led us to an algorithm that was exponential only in r <ref> [2] </ref>. The procedure is also asymptotically faster than McMorris et al.'s for certain ranges of the parameter values. Another reason why the new algorithm is of interest has to do with the close relation between perfect phylogeny and the problem of triangulating colored graphs (TCG). <p> Additional properties of c-clusters required to find a perfect phylogeny are studied in Section 3. The perfect phylogeny algorithm is given in Section 4. Section 5 deals with TCG. 2 Preliminaries We now state some definitions and preliminary results. Lemma 1 <ref> [2] </ref> A set of species S has a perfect phylogeny if and only if every subset of S has one. Definition 1 Let T be a perfect phylogeny for S and let p be some vertex in T . <p> We say that (G; G 0 ) is good if there exists an s 2 G such that for all c 2 M (G), s c equals the unique common state between G and G 0 on character c and jG fsgj; jG 0 j 1. Lemma 2 <ref> [2] </ref> If S has no good c-splits, then, in every perfect phylogeny T of S, every species s 2 S is a leaf in T . <p> Node x is referred to as the connection of T G . The next result implies that, in searching for a perfect phylogeny for S, we can restrict our attention to perfect phylogenies constructed entirely from subphylogenies. Lemma 3 <ref> [2] </ref> Suppose S has no good c-splits. Let G be a cluster. <p> Corollary 4 <ref> [2] </ref> Suppose S has no good c-splits. <p> A key observation is that the number of c-clusters is O (2 r m) <ref> [2] </ref>. We shall use Lemma 3 in a different way to obtain an algorithm that is exponential only in m. One of the ideas is the straightforward observation that the number of distinct choices for nodes in a phylogeny is O (r m ). <p> Moreover, the phylogenies for the subproblems (assuming they all have one), can be combined into a phylogeny for the entire set by identifying the nodes for x in the various trees. (More details are given in <ref> [2] </ref>.) Thus, any problem with good splits can be broken down into smaller subproblems. By doing this repeatedly, we will be left with subproblems without good splits. <p> By doing this repeatedly, we will be left with subproblems without good splits. The time needed to do the reduction can be shown to be dominated by the rest of the work done by the algorithm (see <ref> [2] </ref>). The search graph. Our algorithm associates with S a directed search graph W .
Reference: [3] <author> H. Bodlaender, M. Fellows, and M. T. Hallett, </author> <title> The parameterized complexity of DNA mapping, perfect phylogeny and other problems of "bounded width", </title> <type> manuscript. </type>
Reference-contexts: Efficient algorithms for small m are useful since, in practice, character sets tend to be incompatible and a standard tool for molecular biologists is checking small subsets of characters for character compatibility. Linear time algorithms have been found for m = 3 [5, 13]. Bodlaender, Fellows, and Hallett <ref> [3] </ref> have shown that the perfect phylogeny problem is hard for the complexity class W [2], implying that it is unlikely to be solved by an algorithm whose running time is of the form O (f (m)p (r; n; m)) where f is an exponential function and p is a polynomial
Reference: [4] <author> H. Bodlaender, M. Fellows, and T. Warnow, </author> <title> Two strikes against perfect phylogeny, </title> <booktitle> In Proceedings of the 19th International Colloquium on Automata, Languages, and Programming, Springer Verlag, Lecture Notes in Computer Science (1992), </booktitle> <pages> pp. 273-283. </pages>
Reference-contexts: If S admits a perfect phylogeny, the set of characters C is said to be compatible. The perfect phylogeny problem was shown to be NP-complete by Bodlaender et al. <ref> [4] </ref> and, independently, by Steel [18]. This fact suggests two lines of attack: The first is to restrict r, the number of character states.
Reference: [5] <author> H. Bodlaender and T. Kloks, </author> <title> A simple linear time algorithm for triangulating three-colored graphs, </title> <booktitle> In Proceedings of the 9th Annual Symposium on Theoretical Aspects of Computer Science (1992), </booktitle> <pages> pp. 415-423. </pages>
Reference-contexts: Efficient algorithms for small m are useful since, in practice, character sets tend to be incompatible and a standard tool for molecular biologists is checking small subsets of characters for character compatibility. Linear time algorithms have been found for m = 3 <ref> [5, 13] </ref>.
Reference: [6] <author> W. H. E. Day and D. Sankoff, </author> <title> Computational complexity of inferring phylogenies by compatibility, </title> <journal> Syst. Zool., </journal> <volume> Vol. 35, No. 2 (1986), </volume> <pages> pp. 224-229. </pages>
Reference-contexts: T is perfect if for each c 2 C and each state r c of that character, the nodes having state r c on character c form a subtree of T . The perfect phylogeny problem (more commonly known as the character compatibility problem in the biology literature <ref> [6] </ref>) is to determine whether a given set of species S has a perfect phylogeny. If S admits a perfect phylogeny, the set of characters C is said to be compatible. The perfect phylogeny problem was shown to be NP-complete by Bodlaender et al. [4] and, independently, by Steel [18].
Reference: [7] <author> A. Dress and M. Steel, </author> <title> Convex tree realizations of partitions, </title> <journal> Appl. Math. Letters, </journal> <volume> Vol. 5, No. 3 (1992), </volume> <pages> pp. 3-6. </pages>
Reference-contexts: This reference also presents efficient algorithms for dynamic insertion and deletion of species and characters. All of the above results for the binary case are based on an elegant and well-known characterization of the set of "yes" instances [8]. Dress and Steel <ref> [7] </ref> devised a O (nm 2 ) algorithm for r 3. Kannan and Warnow [12] gave a O (n 2 m) algorithm for r 4 (quaternary characters).
Reference: [8] <author> G. F. Estabrook, C. S. Johnson Jr., and F. R. McMorris, </author> <title> An idealized concept of the true cladistic character, </title> <journal> Mathematical Biosciences, </journal> <volume> 23 (1975), </volume> <pages> pp. 263-272. </pages>
Reference-contexts: This reference also presents efficient algorithms for dynamic insertion and deletion of species and characters. All of the above results for the binary case are based on an elegant and well-known characterization of the set of "yes" instances <ref> [8] </ref>. Dress and Steel [7] devised a O (nm 2 ) algorithm for r 3. Kannan and Warnow [12] gave a O (n 2 m) algorithm for r 4 (quaternary characters).
Reference: [9] <author> G. F. Estabrook, </author> <title> Cladistic methodology: A discussion of the theoretical basis for the induction of evolutionary history, </title> <journal> Annual Review of Ecology and Systematics, </journal> <volume> 3 (1972), </volume> <pages> pp. 427-456. </pages>
Reference-contexts: 1 Introduction A fundamental problem in biology is that of inferring the evolutionary history of a set of species S, each of which is specified by the set of traits or characters that it exhibits <ref> [9, 10, 15, 16] </ref>. Information about evolutionary history can be conveniently represented by an evolutionary or phylogenetic tree, often referred to simply as a phylogeny. In one of the standard models, the problem can be expressed mathematically as follows.
Reference: [10] <author> W. M. Fitch, </author> <title> Aspects of molecular evolution, Annual Reviews of Genetics, </title> <booktitle> 7 (1973), </booktitle> <pages> pp. 343-380. </pages>
Reference-contexts: 1 Introduction A fundamental problem in biology is that of inferring the evolutionary history of a set of species S, each of which is specified by the set of traits or characters that it exhibits <ref> [9, 10, 15, 16] </ref>. Information about evolutionary history can be conveniently represented by an evolutionary or phylogenetic tree, often referred to simply as a phylogeny. In one of the standard models, the problem can be expressed mathematically as follows.
Reference: [11] <author> D. Gusfield, </author> <title> Efficient algorithms for inferring evolutionary trees, Networks, </title> <booktitle> 21 (1991), </booktitle> <pages> pp. 19-28. </pages>
Reference-contexts: Algorithms for this version of the problem are important because biomolecular data (such as DNA, RNA, or amino-acid sequences) leads to characters whose number of states is bounded by a small constant (r = 4 for DNA or RNA, and r = 20 for amino-acid sequences). Gusfield <ref> [11] </ref> gave a O (nm) algorithm fl DIMACS (Center for Discrete Mathematics and Theoretical Computer Science), Rutgers University, Piscataway, NJ 08855 (agarwala@dimacs.rutgers.edu).
Reference: [12] <author> S. Kannan and T. Warnow, </author> <title> Inferring evolutionary history from DNA sequences, </title> <note> to appear, SIAM J. on Computing. A preliminary version of this paper appeared in the Proceedings of the 31st Annual Symposium on the Foundations of Computer Science (1990), </note> <institution> St. </institution> <address> Louis, </address> <publisher> Missouri, </publisher> <pages> pp. 362-378. 10 </pages>
Reference-contexts: All of the above results for the binary case are based on an elegant and well-known characterization of the set of "yes" instances [8]. Dress and Steel [7] devised a O (nm 2 ) algorithm for r 3. Kannan and Warnow <ref> [12] </ref> gave a O (n 2 m) algorithm for r 4 (quaternary characters). Agarwala and Fernandez-Baca [2] gave an O (2 3r (nm 3 + m 4 )) algorithm for the perfect phylogeny problem when the characters are restricted to have at most r states.
Reference: [13] <author> S. Kannan and T. Warnow, </author> <title> Triangulating three-colored graphs, </title> <journal> SIAM J. on Discrete Mathematics, </journal> <volume> 5 (1992), </volume> <pages> pp. 249-258. </pages>
Reference-contexts: Efficient algorithms for small m are useful since, in practice, character sets tend to be incompatible and a standard tool for molecular biologists is checking small subsets of characters for character compatibility. Linear time algorithms have been found for m = 3 <ref> [5, 13] </ref>.
Reference: [14] <author> S. Kannan and T. Warnow, </author> <title> A fast algorithm for the computation and enumeration of perfect phylogenies when the number of character states is fixed, </title> <booktitle> To appear in Proceedings of the Symposium on Discrete Algorithms (1995). </booktitle>
Reference-contexts: The other ingredient is the fact that the choice of an internal node in some sense fixes the kinds of subtrees that node may have in a phylogeny. To formalize this, we need a new notion. Given a species x, Kannan and Warnow <ref> [14] </ref> defined an equivalence relation E x as the transitive closure of the following relation R on S fxg: (a; b) 2 R if there exists c 2 C such that a c = b c 6= x c . <p> The set of equivalence classes is denoted by (S fxg)=x and can be computed in O (nm) time <ref> [14] </ref>. Note that if x is an internal node in any perfect phylogeny of S, then j (S fxg)=xj 2. In particular, we make the following remark. Lemma 7 If j (S fxg)=xj = 1 for every x 2 S, then S has no good splits. <p> In particular, we make the following remark. Lemma 7 If j (S fxg)=xj = 1 for every x 2 S, then S has no good splits. We now reformulate and extend a result in <ref> [14] </ref>. Lemma 8 Let G 2 (S fxg)=x. If S [ fxg has a perfect phylogeny, then G is a c-cluster that is compatible with x. 4 Proof From the definition of E x , it follows that G is a cluster compatible with x.
Reference: [15] <author> W. J. Le Quesne, </author> <title> A method of selection of characters in numerical taxonomy, </title> <journal> Syst. Zool., </journal> <volume> 18 (1969), </volume> <pages> pp. 201-205. </pages>
Reference-contexts: 1 Introduction A fundamental problem in biology is that of inferring the evolutionary history of a set of species S, each of which is specified by the set of traits or characters that it exhibits <ref> [9, 10, 15, 16] </ref>. Information about evolutionary history can be conveniently represented by an evolutionary or phylogenetic tree, often referred to simply as a phylogeny. In one of the standard models, the problem can be expressed mathematically as follows.
Reference: [16] <author> W. J. Le Quesne, </author> <title> Further studies based on the uniquely derived character concept, </title> <journal> Syst. Zool., </journal> <volume> 21 (1972), </volume> <pages> pp. 281-288. </pages>
Reference-contexts: 1 Introduction A fundamental problem in biology is that of inferring the evolutionary history of a set of species S, each of which is specified by the set of traits or characters that it exhibits <ref> [9, 10, 15, 16] </ref>. Information about evolutionary history can be conveniently represented by an evolutionary or phylogenetic tree, often referred to simply as a phylogeny. In one of the standard models, the problem can be expressed mathematically as follows.
Reference: [17] <author> F. R. McMorris, T. Warnow, and T. Wimer, </author> <title> Triangulating vertex colored graphs, </title> <booktitle> In Proceedings of the 4th Annual Symposium on Discrete Algorithms (1993), </booktitle> <address> Austin, Texas, </address> <pages> pp. 120-127. </pages>
Reference-contexts: McMorris, Warnow, and Wimer <ref> [17] </ref> showed that the perfect phylogeny problem can be solved in O ((rm) m+1 + nm 2 ) time. <p> McMorris et al.'s perfect phylogeny algorithm is in fact based on a O ((v + e (k 2)) k+1 ) algorithm for TCG <ref> [17] </ref>, where v and e are the number of vertices and edges of the graph. Our algorithm, together with a close examination of the reduction from TCG to perfect phylogeny (which is explained in Section 5) yields an O ((2e=k) k e 2 k) algorithm for TCG.
Reference: [18] <author> M. A. Steel, </author> <title> The complexity of reconstructing trees from qualitative characters and subtrees, </title> <journal> Journal of Classification, </journal> <volume> 9 (1992), </volume> <pages> pp. 91-116. </pages>
Reference-contexts: If S admits a perfect phylogeny, the set of characters C is said to be compatible. The perfect phylogeny problem was shown to be NP-complete by Bodlaender et al. [4] and, independently, by Steel <ref> [18] </ref>. This fact suggests two lines of attack: The first is to restrict r, the number of character states.
Reference: [19] <author> T. J. Warnow, </author> <title> Combinatorial Algorithms for Constructing Phylogenetic Trees, </title> <type> Ph.D. Thesis, </type> <institution> University of California, Berkeley, </institution> <month> May </month> <year> 1991. </year> <month> 11 </month>
Reference-contexts: coloring l : V (G) ! f1; 2; ; kg, find whether G can be triangulated without introducing edges between vertices of the same color. (A coloring is proper if (u; v) 2 E (G) implies l (u) 6= l (v).) TCG and the perfect phylogeny problem are polynomially equivalent <ref> [19] </ref>. McMorris et al.'s perfect phylogeny algorithm is in fact based on a O ((v + e (k 2)) k+1 ) algorithm for TCG [17], where v and e are the number of vertices and edges of the graph. <p> Hence no edge having u as an endpoint needs to be added to triangulate G. Any instance hG; li of TCG (where G is the graph and l the coloring function) can be reduced to an instance of perfect phylogeny with C = f1; ; kg as follows <ref> [19] </ref>. Define a function f : V (G) ! Z such that f (u) 6= f (v) whenever l (u) = l (v). For each edge (u; v) 2 E (G), introduce a species s with s l (u) = f (u) and s l (v) = f (v).
References-found: 19

