URL: http://www.cs.ucsb.edu/conferences/java98/papers/icet.ps
Refering-URL: http://www.cs.ucsb.edu/conferences/java98/program.html
Root-URL: http://www.cs.ucsb.edu
Email: fgray,vssg@mathcs.emory.edu  
Title: Native-Language-Based Distributed Computing Across Network and Filesystem Boundaries BLENDING THE PORTABILITY OF JAVA WITH COMPUTATIONAL
Author: Paul A. Gray and Vaidy S. Sunderam 
Date: February 5, 1998  
Affiliation: Emory University Dept. of Mathematics and Comp. Sci.  
Abstract: This paper discusses how the aspects unique to the Java programming language can be combined with complementary and unique aspects of other languages such as C and Fortran. This combining of the strong features of Java, such as portability and platform independence, with packages and legacy codes written in traditional languages such as C and Fortran results in a program blend which exhibits portability and speed not realizable by any of these languages individually. One area where this confluence of previously-disparate language features has strong potential is in the area of distributed, concurrent computing over heterogeneous platforms and across local network and filesystem boundaries | the setting addressed within this paper. Also addressed in this paper are the pivotal aspects of the Java bytecode representation of a class object which makes the porting of shared libraries across network boundaries, filesystems, and architectures possible.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Carpenter, B., Chang, Y. J., Fox, G., Leskiw, D., and Li, X. </author> <title> Experiments with 'HP Java'. </title> <journal> Concurrency, Experience and Practice 9, </journal> <month> 6 (June </month> <year> 1997), </year> <pages> 633-648. </pages>
Reference: [2] <author> Dongarra, J., Bunch, J., Moler, C., and Stewart, P. </author> <title> The FORTRAN-based LINPACK routines. Available from NAG, </title> <address> Downers Grove, IL. </address>
Reference-contexts: The last two columns show implementations of the matrix multiplication task which mix languages and utilize the well-established numerical codes found in the Fortran-based LINPACK blas 1 <ref> [2] </ref>. The third column shows a Java-based wrapper which utilizes the LINPACK ddot subroutine to perform the column-row dot products of the matrix multiplication. The final column shows an equivalent implementation using C as the wrapper to the LINPACK ddot subroutine.
Reference: [3] <author> Gannon, D., Beckman, P., Johnson, E., Green, T., and Levine, M. </author> <title> HPC++ and the HPC++Lib Toolkit. </title> <type> Tech. Rep. White Paper, </type> <institution> Indiana University, </institution> <month> Nov. </month> <year> 1997. </year>
Reference: [4] <author> Geist, G. A., and Sunderam, V. S. </author> <title> The PVM system: Supercomputer level concurrent computation on a heterogeneous network of workstations. </title> <booktitle> In Proceedings of the Sixth Distributed Memory Computing Conference (1991), IEEE, </booktitle> <pages> pp. 258-261. </pages>
Reference-contexts: The distributed computing paradigm directly supported is a message-passing synchronization amongst cooperating sequential processes which interact via explicit messages. This paradigm is modeled after the successful and established models of message-passing found in the PVM <ref> [4] </ref> and MPI [11] distributed computing environments. 3 Creating Remote Processes In some sense, the fundamentals involved in creating a remote process within the IceT environment share quite a bit of similarity with the manner in which a web browser loads and executes an applet referred to within a given .html
Reference: [5] <author> Gray, P., and Sunderam, V. IceT: </author> <title> Distributed Computing and Java. </title> <journal> Concur-rency, Experience and Practice 9, </journal> <volume> 11 (Nov. </volume> <year> 1997), </year> <pages> 1161-1168. </pages>
Reference-contexts: The results shown in Table 2 show that commensurate speedups are also seen in the parallelization of the task over the IceT environment. Other parallelization benchmarks which compare IceT to PVM are given in <ref> [5] </ref>. # Processors in computation Java-wrapped LINPACK engine (w/ Jit) 4 25.60 Table 2: Benchmarks (in seconds) for distribution of multiplying two 500x500 matrices on a cluster of Sun Sparc20 workstations, using full optimizations.
Reference: [6] <author> Gray, P., and Sunderam, V. </author> <title> The IceT Environment for Parallel and Distributed Computing. </title> <booktitle> In Scientific Computing in Object-Oriented Parallel Environments (New York, </booktitle> <month> Dec. </month> <year> 1997), </year> <editor> Y. Ishikawa, R. R. Oldehoeft, J. V. W. Reyn-ders, and M. Tholburn, Eds., </editor> <volume> no. </volume> <booktitle> 1343 in Lecture Notes in Computer Science, </booktitle> <publisher> Springer Verlag, </publisher> <pages> pp. 275-282. </pages>
Reference-contexts: Finally, one of the most distinguishing characteristics of an IceT process is in its ability to include portable native libraries in the program collective. Assuming that an IceT environment has been established using mechanisms described in <ref> [6] </ref>, Figure 3 gives an illustration of how IceT manages creation of 4 of interfaces, dependency classes and perhaps shared libraries. some entity in the IceT environment (bottom) as a process on the specified host in the IceT environment (top).
Reference: [7] <author> Hummel, J., Azevedo, A., Kolson, D., and Nicolau, A. </author> <title> Annotating the Java bytecodes in support of optimization. </title> <journal> Concurrency, Experience and Practice 9, </journal> <volume> 11 (Nov. </volume> <year> 1997), </year> <pages> 1001-1016. </pages>
Reference-contexts: However, the advancement in a Java program's portability is often at the cost of executional speed. While there are many ongoing projects which aim to promote Java as a high-performance language ([1] and <ref> [7] </ref> for example), its lacking execution speed is arguably a most significant obstacle which must be overcome.
Reference: [8] <author> Lindholm, T., and Yellin, F. </author> <title> The Java Virtual Machine Specification. </title> <publisher> Addison Wesley, </publisher> <year> 1997, </year> <journal> ch. </journal> <volume> 4, </volume> <pages> pp. 83-106. </pages>
Reference-contexts: 1 Blending Existing and Evolving Technologies As a programming language, several effective language-level features of Java lend to it being a highly-portable language. Many of these features are supported by the static representation of a Java program's executable state | its bytecode representation <ref> [8] </ref>. <p> At this point, various characterizations of the methods used by the class can be determined. Methods such as System.load and certain methods of the 3 Refer to the JVM specification for the layout and definition of the bytecode representation of a Java class file, <ref> [8] </ref>. 6 File or Socket class which might pose a security threat can be observed at this stage, and the local daemon can deny the request for process creation.
Reference: [9] <author> Mintchev, S., and Getov, V. </author> <title> Automatic binding of native scientific libraries to Java. </title> <booktitle> In Scientific Computing in Object-Oriented Parallel Environments (New York, </booktitle> <month> Dec. </month> <year> 1997), </year> <editor> Y. Ishikawa, R. R. Oldehoeft, J. V. W. Reynders, and M. Thol-burn, Eds., </editor> <volume> no. </volume> <booktitle> 1343 in Lecture Notes in Computer Science, </booktitle> <publisher> Springer Verlag, </publisher> <pages> pp. 129-136. </pages>
Reference-contexts: to link against which enables the needed locating and local installation of the requisite library 8 prior to creating an instance of the process. 4 Extended Functionality At the present time, there are several projects underway which look to generate Java-bindings to existing scientific packages such as MPI, ScaLAPACK, etc. <ref> [9] </ref>. Consequently, the focus in this section is not on the manner in which native packages can be wrapped to create Java bindings, but rather to demonstrate how the IceT environment can blend Java together with native libraries in a portable manner, and with unmatched computational speed.
Reference: [10] <author> Richardson, H. </author> <title> High Performance Fortran: history, overview and current developments. </title> <institution> 1.4 TMC-261, Thinking Machines Corporation, Bedford, </institution> <address> MA, </address> <month> Apr. </month> <year> 1996. </year>
Reference-contexts: Many scientific packages and communication libraries exist as highly-optimized, system-dependent codes or libraries written in Fortran, C, or variants thereof (such as HPF <ref> [10] </ref> or HPC++[3] for example). Switching to a new programming language would possibly mean abandoning these familiar and established packages for less familiar and perhaps less-stable variants written in the newer language. Table 1 below is given to support to two distinct issues: 1.
Reference: [11] <author> Snir, M., Otto, S. W., Huss-Lederman, S., Walker, D. W., and Don-garra, J. </author> <title> MPI, The Complete Reference. </title> <publisher> MIT Press, </publisher> <month> Nov. </month> <year> 1995. </year> <month> 10 </month>
Reference-contexts: The distributed computing paradigm directly supported is a message-passing synchronization amongst cooperating sequential processes which interact via explicit messages. This paradigm is modeled after the successful and established models of message-passing found in the PVM [4] and MPI <ref> [11] </ref> distributed computing environments. 3 Creating Remote Processes In some sense, the fundamentals involved in creating a remote process within the IceT environment share quite a bit of similarity with the manner in which a web browser loads and executes an applet referred to within a given .html document.
References-found: 11

