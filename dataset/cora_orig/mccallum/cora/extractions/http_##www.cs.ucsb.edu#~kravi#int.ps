URL: http://www.cs.ucsb.edu/~kravi/int.ps
Refering-URL: http://www.cs.ucsb.edu/~kravi/int.html
Root-URL: http://www.cs.ucsb.edu
Title: Indexing Intervals  
Author: K. V. Ravikanth Divyakant Agrawal Amr El Abbadi Ambuj Singh 
Address: Santa Barbara, CA 93106  
Affiliation: University of California at Santa Barbara  
Abstract: Indexing unidimensional interval data has been a critical problem in temporal databases and computational geometry. The difficulty of the problem arises from the lack of total ordering of intervals. As a consequence, most index structures for interval data are not as efficient as the B-tree indices for unidimensional data. In addition, their performance varies with the order of insertion of data. In this paper, we propose an index structure, called the LIB-structure, that achieves total ordering of intervals using their containment relationships . The proposed structure has several advantages: (1) it is insertion independent, (2) it guarantees logarithmic bounds on all operations when the intervals are not nested and (3) it can be easily parallelizable. The superiority of this structure is borne out in our experiments comparing its performance with other index structures like the R fl trees and the Interval B-trees. In addition, this scheme can also be used to improve the performance of conventional index structures like the R fl trees.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Aho, A. V., Hopcroft, J. E., and Ullman, J. D. </author> <title> "The design and analysis of computer algorithms", </title> <publisher> Addison-Wesley, </publisher> <address> MA, </address> <year> 1974. </year>
Reference-contexts: Consequently, interval data give rise to several problems in indexing. Firstly, the notions of total ordering for point data no longer hold. Hence conventional indices like the B-trees <ref> [1] </ref>, which rely on such an ordering, can no longer be used for indexing intervals efficiently. Secondly, the performance of index structures depends on how well they preserve the spatial proximity of intervals.
Reference: [2] <author> Ang, C. H. and Tan, K. P. </author> <title> "The interval B-tree: A new time indexing structure", </title> <booktitle> Proc. of the 5th Australian Database Conference, </booktitle> <address> Christchurch, New Zealand, </address> <year> 1994, </year> <pages> pp 162-178. </pages>
Reference-contexts: Although they achieve a total ordering of indexing points, they lose spatial proximity. Hence the time complexity of insertion, deletion and intersection of intervals is O (n 2 ) and the worst case storage cost is also O (n 2 ). Hence, Ang and Tan <ref> [2] </ref> proposed the Interval B-tree with better complexity measures. In an interval B-tree, data is organized in the form of a B + -tree. The values in the entries of an index node determine how the interval data are organized. <p> This is because the index structures for point data are generally more efficient than those for rectangular data. To relate the theoretical advantages of the LIB structure to practical performance, we compared it with the Interval B-trees <ref> [2] </ref> and the R fl trees. In these experiments, the LIB-structures performed considerably better than other indexing mechanisms for the most usual type of queries like search, containment, intersection. <p> This structure, called the IB-tree stores the possibly overlapping data intervals using their pair of endpoints in its leaf nodes. Unlike the time index [4] or the Interval B-trees of <ref> [2] </ref>, the IB-tree never separates the endpoints of an interval and always treats them as a single entity. This is highly advantageous because it avoids unnecessary processing overheads and possibly minimizes storage space. We now describe the properties of an IB-tree. 1.
Reference: [3] <author> Ang, C. H. and Tan, K. P. </author> <title> "The interval B-tree", </title> <journal> Information Processing Letters, </journal> <volume> Vol. 53, </volume> <year> 1995, </year> <pages> pp 85-89. </pages>
Reference: [4] <author> Elmasri, R., Wuu, G. T. J. and Kim, Y. J. </author> <title> "The time index: An access structure for temporal data", </title> <booktitle> Proc. of 16th VLDB Conf., </booktitle> <address> Brisbane, Australia, </address> <year> 1990, </year> <pages> pp 1-12. </pages>
Reference-contexts: Also, like the R-trees, this structure is insertion dependent and hence its performance may degrade in dynamic environments. fl Work supported in part by a research grant from NSF/ARPA/NASA IRI-9411330. 1 Elmasri et al. <ref> [4] </ref> propose an index structure called the time index for indexing time intervals in temporal databases. They split each time interval into two indexing points its starting time, its ending time and index all indexing points using a regular B + tree. <p> This structure, called the IB-tree stores the possibly overlapping data intervals using their pair of endpoints in its leaf nodes. Unlike the time index <ref> [4] </ref> or the Interval B-trees of [2], the IB-tree never separates the endpoints of an interval and always treats them as a single entity. This is highly advantageous because it avoids unnecessary processing overheads and possibly minimizes storage space. We now describe the properties of an IB-tree. 1. <p> We picked the R fl trees because they do several optimizations to ensure spatial proximity and hence are a popular indexing mechanism for spatial data. We examined Interval based B-trees since the authors compared its performance with a number of other single-dimensional index structures like Time index <ref> [4] </ref> and SR-trees [8], and found them to be more efficient. The data we experimented with consists of 35000 randomly generated intervals. Each of these intervals is associated with a randomly selected data object from a set of 1000 data objects.
Reference: [5] <author> Freeston, M. </author> <title> "The BANG File: a new kind of grid file", </title> <booktitle> Proc. of the ACM SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> pp 260-269, </pages> <year> 1987. </year>
Reference-contexts: Hence conventional indices like the B-trees [1], which rely on such an ordering, can no longer be used for indexing intervals efficiently. Secondly, the performance of index structures depends on how well they preserve the spatial proximity of intervals. Since multidimensional index structures address these issues, the various schemes <ref> [5, 6, 9, 10, 13, 14, 15] </ref> for multidimensional data can also be used for indexing single dimensional intervals. However, most multidimensional index structures are not efficient for arbitrarily nested data due to the possibly high overlap of interval data.
Reference: [6] <author> Guttman, A. </author> <title> "R-trees : A dynamic index structure for spatial searching", </title> <booktitle> Proceedings of the ACM SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> pp 47-57, </pages> <year> 1984. </year>
Reference-contexts: Hence conventional indices like the B-trees [1], which rely on such an ordering, can no longer be used for indexing intervals efficiently. Secondly, the performance of index structures depends on how well they preserve the spatial proximity of intervals. Since multidimensional index structures address these issues, the various schemes <ref> [5, 6, 9, 10, 13, 14, 15] </ref> for multidimensional data can also be used for indexing single dimensional intervals. However, most multidimensional index structures are not efficient for arbitrarily nested data due to the possibly high overlap of interval data.
Reference: [7] <author> Kolovson, C. and Stonebraker, M. </author> <title> "Segment Indexes: Dynamic idexing techniques for multidimensional interval data", </title> <booktitle> Proc. ACM SIGMOD Intl. Conf. on Management of Data, </booktitle> <address> Denver, </address> <year> 1991, </year> <pages> pp 138-147. </pages>
Reference: [8] <author> Kolovson, C. and Stonebraker, M. </author> <title> "Indexing Techniques for Historical Databases ", Proc. </title> <booktitle> of the 5th Intl. Conf. on Data Engg., </booktitle> <address> Los Angeles, CA, </address> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: However, most multidimensional index structures are not efficient for arbitrarily nested data due to the possibly high overlap of interval data. Hence, Kolovson et al. <ref> [8] </ref> extend R-trees to SR-trees to cater to overlapping interval data. <p> We examined Interval based B-trees since the authors compared its performance with a number of other single-dimensional index structures like Time index [4] and SR-trees <ref> [8] </ref>, and found them to be more efficient. The data we experimented with consists of 35000 randomly generated intervals. Each of these intervals is associated with a randomly selected data object from a set of 1000 data objects.
Reference: [9] <author> Lomet, D. B. and Salzberg, B. </author> <title> "The hB-tree: A multiattribute indexing method with good guaranteed performance", </title> <journal> ACM Trans. on Database Systems, </journal> <volume> Vol. 15, No. 4, </volume> <pages> pp 625-658, </pages> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: Hence conventional indices like the B-trees [1], which rely on such an ordering, can no longer be used for indexing intervals efficiently. Secondly, the performance of index structures depends on how well they preserve the spatial proximity of intervals. Since multidimensional index structures address these issues, the various schemes <ref> [5, 6, 9, 10, 13, 14, 15] </ref> for multidimensional data can also be used for indexing single dimensional intervals. However, most multidimensional index structures are not efficient for arbitrarily nested data due to the possibly high overlap of interval data.
Reference: [10] <author> Norbert Beckmann, Hans-Peter Kriegel, Ralf Schneider, Bernhard Seeger. </author> <title> "The R* tree:An Efficient and Robust Access Method for points and rectangles", </title> <booktitle> Proceedings of the ACM SIG-MOD International Conf. on Management of Data, </booktitle> <month> May 23-25, </month> <year> 1990, </year> <pages> pp 322-331, </pages> <address> Atlanta City, USA </address>
Reference-contexts: Hence conventional indices like the B-trees [1], which rely on such an ordering, can no longer be used for indexing intervals efficiently. Secondly, the performance of index structures depends on how well they preserve the spatial proximity of intervals. Since multidimensional index structures address these issues, the various schemes <ref> [5, 6, 9, 10, 13, 14, 15] </ref> for multidimensional data can also be used for indexing single dimensional intervals. However, most multidimensional index structures are not efficient for arbitrarily nested data due to the possibly high overlap of interval data.
Reference: [11] <author> Cormen, Leiserson and Rivest. </author> <title> "Introduction to Algorithms", </title> <publisher> The MIT Press, </publisher> <year> 1990. </year>
Reference: [12] <author> Ravikanth, K. V., Agrawal D., Abbadi, A. E., Ambuj Singh and Terence Smith. </author> <title> "Indexing Hierarchical Data", </title> <booktitle> submitted to Conference on Very Large Databases, 1996, </booktitle> <address> Bombay, India. </address>
Reference-contexts: In such a case, it offers an additional advantage that data at each level can be indexed using an efficient index for the type of data at that level. For example, for the 2-dimensional data of the Alexandria Gazetteer [16], we gained in performance <ref> [12] </ref> by having different structures for rectangle and for point data. This is because the index structures for point data are generally more efficient than those for rectangular data.
Reference: [13] <author> Robinson, J. T. </author> <title> "The K-D-B tree: a search structure for large multidimensional dynamic indexes", </title> <booktitle> Proc. of ACM SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> 10-18, </pages> <year> 1981. </year>
Reference-contexts: Hence conventional indices like the B-trees [1], which rely on such an ordering, can no longer be used for indexing intervals efficiently. Secondly, the performance of index structures depends on how well they preserve the spatial proximity of intervals. Since multidimensional index structures address these issues, the various schemes <ref> [5, 6, 9, 10, 13, 14, 15] </ref> for multidimensional data can also be used for indexing single dimensional intervals. However, most multidimensional index structures are not efficient for arbitrarily nested data due to the possibly high overlap of interval data.
Reference: [14] <author> Seeger B., Kriegel, H. P. </author> <title> "The Buddy Tree: An Efficient and Robust Access method for spatial databases", </title> <booktitle> Proceedings of the Sixteenth VLDB Conference, </booktitle> <address> Brisbane, </address> <year> 1990. </year>
Reference-contexts: Hence conventional indices like the B-trees [1], which rely on such an ordering, can no longer be used for indexing intervals efficiently. Secondly, the performance of index structures depends on how well they preserve the spatial proximity of intervals. Since multidimensional index structures address these issues, the various schemes <ref> [5, 6, 9, 10, 13, 14, 15] </ref> for multidimensional data can also be used for indexing single dimensional intervals. However, most multidimensional index structures are not efficient for arbitrarily nested data due to the possibly high overlap of interval data.
Reference: [15] <author> Sellis, T., Roussopoulos, N., Faloutsos, C. </author> : <title> "The R+ tree: a dynamic index for multidimensional objects", </title> <booktitle> Proc. of 13th Intl. Conf. on Very Large Databases, </booktitle> <pages> pp 507-518, </pages> <year> 1988. </year>
Reference-contexts: Hence conventional indices like the B-trees [1], which rely on such an ordering, can no longer be used for indexing intervals efficiently. Secondly, the performance of index structures depends on how well they preserve the spatial proximity of intervals. Since multidimensional index structures address these issues, the various schemes <ref> [5, 6, 9, 10, 13, 14, 15] </ref> for multidimensional data can also be used for indexing single dimensional intervals. However, most multidimensional index structures are not efficient for arbitrarily nested data due to the possibly high overlap of interval data.
Reference: [16] <author> Smith, T. R. and J. Frew, </author> <title> "Alexandria Digital Library", </title> <journal> Communications of the ACM , 38(4): </journal> <pages> 61-62, </pages> <month> April </month> <year> 1995. </year> <month> 15 </month>
Reference-contexts: In such a case, it offers an additional advantage that data at each level can be indexed using an efficient index for the type of data at that level. For example, for the 2-dimensional data of the Alexandria Gazetteer <ref> [16] </ref>, we gained in performance [12] by having different structures for rectangle and for point data. This is because the index structures for point data are generally more efficient than those for rectangular data.
References-found: 16

