URL: http://trantor.cse.psu.edu/~yoo/publications/icpp95.ps
Refering-URL: http://trantor.cse.psu.edu/~yoo/research.html
Root-URL: http://www.cse.psu.edu
Email: E-mail: fyoo j dasg@cse.psu.edu E-mail: cyu@pc.isl.goldstar.co.kr  
Title: Processor Management Techniques for Mesh-Connected Multiprocessors  
Author: Byung S. Yoo Chita R. Das and Chansu Yu 
Address: Park, PA 16802 Seoul, Korea 137-140  
Affiliation: Dept. Computer Science and Engineering Information Technology R&D Laboratory The Pennsylvania State University GoldStar Company University  
Abstract: This paper investigates various processor management techniques for improving the performance of mesh-connected multiprocessors. Three different techniques are analyzed. First, we use the smallest job first (SJF) policy to improve the spatial parallelism in a mesh. Next, a policy called multitasking and multiprogramming (M 2 ) is introduced. The M 2 scheme allows multiprogramming of jobs on various submeshes. Finally, a novel approach, called "limit allocation" is used for job allocation. With this policy, a job (sub-mesh) size is reduced if the job cannot be allocated. While all of the three approaches are viable alternatives, which in conjunction with any allocation algorithm can improve system performance beyond what is achievable with a complex allocation scheme and the usually assumed FCFS scheduling, the M 2 and limit allocation techniques are especially attractive for providing some additional features. The M 2 policy brings in the concept of time-sharing execution for better efficiency and the limit allocation shows how job size restriction can be beneficial for performance and fault-tolerance in a mesh topology. Moreover, the limit allocation scheme can outperform any other approach even using the simplest allocation policy. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. J. Chuang and N. F. Tzeng, </author> <title> "An Efficient Submesh Allocation Strategy for Mesh Computer Systems," </title> <booktitle> Proc. Int'l Conf. on Distributed Computing Systems, </booktitle> <pages> pp. 256-263, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Therefore, various allocation and scheduling schemes proposed in the literature exhibit a compromise between efficiency and complexity. The focus of this paper is on developing processor management policies for mesh-connected multiprocessors. Almost all prior work on resource management in mesh systems has focused on processor allocation <ref> [1, 2, 6, 7, 11] </ref>. These policies attempt to allocate a required submesh to an incoming job. These space-division multiplexing techniques differ in their submesh recognition ability and use the FCFS scheduling for assigning the incoming jobs.
Reference: [2] <author> J. Ding and L. N. Bhuyan, </author> <title> "An Adaptive Sub-mesh Allocation Strategy for Two-Dimensional Mesh Connected Systems," </title> <booktitle> Proc. Int'l Conf. on Parallel Processing, </booktitle> <volume> Vol. II, </volume> <pages> pp. 193-200, </pages> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: Therefore, various allocation and scheduling schemes proposed in the literature exhibit a compromise between efficiency and complexity. The focus of this paper is on developing processor management policies for mesh-connected multiprocessors. Almost all prior work on resource management in mesh systems has focused on processor allocation <ref> [1, 2, 6, 7, 11] </ref>. These policies attempt to allocate a required submesh to an incoming job. These space-division multiplexing techniques differ in their submesh recognition ability and use the FCFS scheduling for assigning the incoming jobs.
Reference: [3] <author> P. Mohapatra, C. Yu, C. R. Das and J. Kim, </author> <title> "A Lazy Scheduling Scheme for Improving Hypercube Performance," </title> <booktitle> Proc. Int'l Conf. on Parallel Processing, </booktitle> <volume> Vol. I, </volume> <pages> pp. 110-117, </pages> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: No waiting jobs are serviced until it is allocated. A predefined threshold value is useful in imposing deadline for job completion. A heuristic may be used to dynamically derive the value of ffit <ref> [3] </ref>. We use a predefined threshold value in this paper. SJF Scheduling Let J head denote the job at the head of the system queue and Deadline [J i ] denote the deadline of job J i . Job Arrival: 1. Let J i be the incoming job. 2.
Reference: [4] <author> P. Krueger, T. H. Lai and V. A. Radiya, </author> <title> "Processor Allocation vs. Job Scheduling on Hypercube Computers," </title> <booktitle> Proc. Int'l Conf. on Distributed Computing systems, </booktitle> <pages> pp. 394-401, </pages> <year> 1991. </year>
Reference-contexts: These policies attempt to allocate a required submesh to an incoming job. These space-division multiplexing techniques differ in their submesh recognition ability and use the FCFS scheduling for assigning the incoming jobs. While a better allocation policy can improve system performance, an allocation policy alone cannot boost performance significantly <ref> [4] </ref>. Response time behavior of all prior allocation policies support this fact. The FCFS scheduling policy has what is known as the `blocking' property. A request for a large submesh that cannot be allocated may block subsequent smaller sub-mesh requests, which are serviceable.
Reference: [5] <author> F. T. Leighton, </author> <title> Introduction to Parallel Algorithms and Architecture: Arrays Trees Hyper-cubes, </title> <publisher> Morgan Kaufmann Publishers Inc., </publisher> <year> 1992. </year>
Reference-contexts: Reduction in job size is reflected by increasing the job execution time. Since the submesh size is reduced by half in each folding step, the service demand should increase at best by a factor of 2 for each folding operation <ref> [5] </ref>. Thus, the original service demand of a job is linearly increased. For example, a limit-2 reduction results in a four fold increase in the original service time.
Reference: [6] <author> K. Li and K. H. Cheng, </author> <title> "A Two Dimensional Buddy System for Dynamic Resource Allocation in A Partitionable Mesh Connected System," </title> <booktitle> Proc. ACM Computer Science Conf., </booktitle> <pages> pp. 22-28, </pages> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: Therefore, various allocation and scheduling schemes proposed in the literature exhibit a compromise between efficiency and complexity. The focus of this paper is on developing processor management policies for mesh-connected multiprocessors. Almost all prior work on resource management in mesh systems has focused on processor allocation <ref> [1, 2, 6, 7, 11] </ref>. These policies attempt to allocate a required submesh to an incoming job. These space-division multiplexing techniques differ in their submesh recognition ability and use the FCFS scheduling for assigning the incoming jobs.
Reference: [7] <author> D. Das Sharma and D. K. Pradhan, </author> <title> "A Fast and Efficient Strategy for Submesh Allocation in Mesh-Connected Parallel Computers," </title> <booktitle> Proc. 5th IEEE Symp. on Parallel and Distributed Processing, </booktitle> <pages> pp. 682-689, </pages> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: Therefore, various allocation and scheduling schemes proposed in the literature exhibit a compromise between efficiency and complexity. The focus of this paper is on developing processor management policies for mesh-connected multiprocessors. Almost all prior work on resource management in mesh systems has focused on processor allocation <ref> [1, 2, 6, 7, 11] </ref>. These policies attempt to allocate a required submesh to an incoming job. These space-division multiplexing techniques differ in their submesh recognition ability and use the FCFS scheduling for assigning the incoming jobs.
Reference: [8] <author> D. Das Sharma and D. K. Pradhan, </author> <title> "Job Scheduling in Mesh Multicomputers," </title> <booktitle> Proc. Int'l Conf. on Parallel Processing, </booktitle> <volume> Vol. II, </volume> <pages> pp. 251-258, </pages> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: The only reported scheduling policy for mesh-connected system is based on a combination of priority and reservation techniques <ref> [8] </ref>. It is shown that using this policy the average waiting time of a job is reduced considerably from the simple FCFS policy. However, this policy is quite complex and violates the fairness rule.
Reference: [9] <author> C. Yu, </author> <title> "Processor Management Policies for Multiprocessors," </title> <type> Ph.D. Dissertation, </type> <address> The Pennsyl-vania State University, </address> <pages> pp. 25-54, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Therefore, time complexity of the SJF is O (M N ) for an M fi N mesh. 2.3 Multitasking and Multiprogramming (M 2 ) A processor management policy that combines the spatial allocation and temporal scheduling, called multitasking and multiprogramming (M 2 ) policy, has been recently proposed by Yu <ref> [9] </ref> and has been analyzed for hypercubes. The key idea of the M 2 policy is to allocate multiple jobs to a subsystem and run them in a time-sharing fashion. After allocated, the processes of each job are executed in synchronous or asynchronous manner.
Reference: [10] <author> C. Yu and C. R. Das, </author> <title> "Limit Allocation: An Efficient Processor Management Scheme for Hyper-cubes," </title> <booktitle> Proc. Int'l Conf. on Parallel Processing, </booktitle> <volume> Vol. II, </volume> <pages> pp. 143-150, </pages> <month> Aug. </month> <year> 1994. </year>
Reference: [11] <author> Y. Zhu, </author> <title> "Efficient Processor Allocation Strategies for Mesh-Connected Parallel Computers," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> Vol. 16, </volume> <pages> pp. 328-337, </pages> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: Therefore, various allocation and scheduling schemes proposed in the literature exhibit a compromise between efficiency and complexity. The focus of this paper is on developing processor management policies for mesh-connected multiprocessors. Almost all prior work on resource management in mesh systems has focused on processor allocation <ref> [1, 2, 6, 7, 11] </ref>. These policies attempt to allocate a required submesh to an incoming job. These space-division multiplexing techniques differ in their submesh recognition ability and use the FCFS scheduling for assigning the incoming jobs. <p> Such robustness makes the limit allocation highly attractive in fault-prone environment. We simulated a 32 fi 16 mesh to study the proposed schemes. The output parameters obtained were average response time and average processor utilization. All the policies use the first fit (FF) allocation rule <ref> [11] </ref>. The fault-tolerant ability of each scheme is also examined through simulation. Job rejection ratio as well as processor utilization of proposed schemes were obtained for various number of faulty processors. The simulation results indicate that all the three resource management schemes are viable approaches for efficient resource management. <p> In Section 2, the proposed processor management schemes are described. In Section 3, applicability of the limit allocation in fault-tolerant processing is discussed. Simulation results are presented in Section 4. Conclusions are drawn in Section 5. 2 Processor Management Alternatives 2.1 Allocation We use the first fit (FF) <ref> [11] </ref> strategy in this paper for allocation. It is simple and yet very efficient in terms of time complexity and submesh recognition ability. The first fit algorithm tries to find the base of an available submesh for an incoming job. <p> The policy tries to construct such a coverage set by scanning all the processors and returns the first node which does not belong to the coverage set. The allocation algorithm is given below. For detailed discussion, the reader should refer to <ref> [11] </ref>. First Fit Allocation Algorithm: First-fit (J i ) Allocation: 1. Let J i be the current incoming job. 2. Construct a coverage set C J i with respect to J i . Scan all the rows in any order. <p> In our algorithm, a job is dispatched to a virtual mesh based on its form. It has been shown that performance is significantly improved when incoming jobs are small <ref> [11] </ref>. It is because small jobs are more likely to find a free submesh. On the other hand, careful observation indicates that large jobs or jobs with high aspect ratio degrade the system performance when they are allocated.
References-found: 11

