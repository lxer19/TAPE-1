URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-93-1163/CS-TR-93-1163.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-93-1163/
Root-URL: http://www.cs.wisc.edu
Email: wwt@cs.wisc.edu  
Title: Kernel Support for the Wisconsin Wind Tunnel  
Author: Steven K. Reinhardt, Babak Falsafi, and David A. Wood 
Address: 1210 West Dayton Street Madison, WI 53706 USA  
Affiliation: Computer Sciences Department University of Wisconsin-Madison  
Date: September 1993.  
Note: To appear in the proceedings of "Second USENIX Symposium on Microkernels and Other Kernel Architectures",  Reprinted by permission of the USENIX Association.  
Abstract: This paper describes a kernel interface that provides an untrusted user-level process (an executive) with protected access to memory management functions, including the ability to create, manipulate, and execute within subservient contexts (address spaces). Page motion callbacks not only give the executive limited control over physical memory management, but also shift certain responsibilities out of the kernel, greatly reducing kernel state and complexity. The executive interface was motivated by the requirements of the Wisconsin Wind Tunnel (WWT), a system for evaluating cache-coherent shared-memory parallel architectures. WWT uses the executive interface to implement a fine-grain user-level extension of Li's shared virtual memory on a Thinking Machines CM-5, a message-passing multicomputer. However, the interface is sufficiently general that an executive could act as a multipro-grammed operating system, exporting an alternative interface to the threads running in its subservient contexts. The executive interface is currently implemented as an extension to CMOST, the standard operating system for the CM-5. In CMOST, policy decisions are made on a central, distinct control processor (CP) and broadcast to the processing nodes (PNs). The PNs execute a minimal kernel sufficient only to implement the CP's policy. While this structure efficiently supports some parallel application models, the lack of autonomy on the PNs restricts its generality. Adding the executive interface provides limited autonomy to the PNs, creating a structure that supports multiple models of application parallelism. This structure, with autonomy on top of centralization, is in stark contrast to most microkernel-based parallel operating systems in which the nodes are fundamentally autonomous. fl This work is supported in part by NSF PYI Award CCR-9157366, NSF Grant MIP-9225097, a Wisconsin Alumni Research Foundation Fellowship, an A.T.&T. Bell Laboratories Ph.D. Fellowship, and donations from Xerox Corporation, Thinking Machines Corporation, and Digital Equipment Corporation. Our Thinking Machines CM-5 was purchased through NSF Institutional Infrastructure Grant No. CDA-9024618 with matching funding from the Univ. of Wisconsin Graduate School. c fl 1993 USENIX Association. Permission to copy without fee all or part of this material is granted, provided that the copies are not made or distributed for commercial advantage, the USENIX Association copyright notice and the title and date of publication appear, and that notice is given that copying is by permission of the USENIX Association. To copy or republish otherwise requires specific permission from the USENIX Association. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Vadim Abrossimov and Marc Rossier. </author> <title> Generic Virtual Memory Management for Operating System Kernels. </title> <booktitle> In Proceedings of the Twelveth ACM Symposium on Operating System Principles (SOSP), </booktitle> <pages> pages 123-136, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: The interface is simpler and lower-level than the virtual memory interfaces of either Mach [12] or Chorus <ref> [1] </ref>, which both impose significant semantics on the use of memory. To the first order, the executive interface merely exposes the underlying hardware mechanisms to the user in a protected manner. The executive interface is similar to the "inferior spheres of protection", described by Dennis and Van Horn [6].
Reference: [2] <author> Thomas E. Anderson, Brian N. Bershad, Edward D. Lazowska, and Henry M. Levy. </author> <title> Scheduler Activations: Effective Kernel Support for the User-Level Management of Parallelism. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1) </volume> <pages> 53-79, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: First, they allow the kernel and executive to cooperate in physical memory management, similar to the way scheduler activations allow management of physical processors in a shared-memory multiprocessor <ref> [2] </ref>. By explicitly saving and restoring data in response to page going () and page coming () calls, the executive can control exactly which data are resident in physical memory. <p> Using page motion callbacks to manage physical memory allocation is analogous to using scheduler activations to manage physical processor allocation <ref> [2] </ref>. Both provide the user with notification of kernel allocation decisions so that the application can adapt knowledgeably to its new circumstance.
Reference: [3] <author> Andrew W. Appel and Kai Li. </author> <title> Virtual Memory Primitives for User Programs. </title> <booktitle> In Proceedings of the Fourth International Conference on Architectural Support for Programming Languages and Operating Systems (AS-PLOS IV), </booktitle> <pages> pages 96-107, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: However, SPACE is much more general than our interface, allowing different "executives" to manage different parts of a single address space. Appel and Li surveyed the most common uses of user-level virtual memory, and identified the set of primitives needed by these applications <ref> [3] </ref>. The set includes primitives to modify protection on pages and create aliases within an address space; however, they did not include the ability to create new address spaces, nor get callbacks when pages are reclaimed by the kernel.
Reference: [4] <author> David L. Black. </author> <title> Scheduling Support for Concurrency and Parallelism in the Mach Operating System. </title> <journal> IEEE Computer, </journal> <volume> 23(5) </volume> <pages> 35-43, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: permit this, because the kernel cannot clean up secondary mappings itself nor can it permit them to point into another process. 5 6.2 Multiprocessor aspects User control over multiprocessor scheduling with the intent of supporting multiple models of parallelism (including gang-scheduling) is provided in Mach by a processor allocation server <ref> [4] </ref>. In this model, an application requests a certain number of processors to create a "processor set" to which threads can be bound. The binding of actual processors to processor sets is performed by a privileged user-level server.
Reference: [5] <author> M. D. Canon, D. H. Fritz, J. H. Howard, T. D. Howell, M. F. Mitoma, and J. Rodriguez-Rosell. </author> <title> A Virtual Machine Emulator for Performance Evaluation. </title> <journal> Communications of the ACM, </journal> <volume> 23(2) </volume> <pages> 71-80, </pages> <month> February </month> <year> 1980. </year> <month> 16 </month>
Reference-contexts: We call WWT a virtual prototype because it uses direct execution to leverage similarities between the target system and the system on which it executes (the host) <ref> [5] </ref>. This means that the target application executes directly on the host hardware as much as possible|for example, a target floating-point multiply runs as a host floating-point multiply. Software simulation is required only for those features of the target system not provided by the host.
Reference: [6] <author> Jack B. Dennis and Earl C. Van Horn. </author> <title> Programming Semantics for Multiprogrammed Computations. </title> <booktitle> In ACM Programming Languages and Pragmatics Conference, </booktitle> <month> August </month> <year> 1965. </year>
Reference-contexts: To the first order, the executive interface merely exposes the underlying hardware mechanisms to the user in a protected manner. The executive interface is similar to the "inferior spheres of protection", described by Dennis and Van Horn <ref> [6] </ref>. Their execution model allowed processes to create subcontexts, initiate execution within them, and handle any resulting faults. The primary difference is our page orientation rather than their more general segments and capabilities. More recently, Probert, et al, proposed SPACE, an object-oriented operating system [11].
Reference: [7] <author> Dror G. Feitelson and Larry Rudolph. </author> <title> Distributed Hierarchical Control for Parallel Processing. </title> <journal> IEEE Computer, </journal> <volume> 23(5) </volume> <pages> 65-77, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: The fundamental differences are that our model provides gang-scheduling more as the rule than the exception, and allows for multiple executives running simultaneously to support multiple abstractions. The hierarchical integration of time- and space-sharing discussed in Section 5 is similar to Feitelson and Rudolph's distributed hierarchical control <ref> [7] </ref>, except that they assume a hardware hierarchy of control processors, while we believe a software hierarchy of control processes may be just as effective.
Reference: [8] <author> Robert P. Goldberg. </author> <title> Survey of Virtual Machine Research. </title> <journal> IEEE Computer, </journal> <volume> 7(6) </volume> <pages> 34-45, </pages> <month> June </month> <year> 1974. </year>
Reference-contexts: In many ways, WWT behaves like an operating system for shared-memory applications. Alternatively, WWT can be thought as providing a virtual machine abstraction|with a shared-memory MIMD machine atop a message-passing pseudo-SIMD machine|for these applications <ref> [8] </ref>. WWT requires several unusual features from the underlying operating system.
Reference: [9] <author> Charles E. Leiserson, Zahi S. Abuhamdeh, David C. Douglas, Carl R. Feynman, Mahesh N. Ganmukhi, Jeffrey V. Hill, W. Daniel Hillis, Bradley C. Kuszmaul, Margaret A. St. Pierre, David S. Wells, Monica C. Wong, Shaw-Wen Yang, and Robert Zak. </author> <title> The Network Architecture of the Connection Machine CM-5. </title> <booktitle> In Proceedings of the Fifth ACM Symposium on Parallel Algorithms and Architectures (SPAA), </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: In particular, the CM-5 contains a "control network", distinct from the message-passing network, which provides hardware support for global operations such as barriers, reductions, and broadcasts <ref> [9] </ref>. To efficiently utilize this control network, all nodes in a partition must concurrently execute the same user process. <p> Operating systems that fail to efficiently manage global resources will have a particularly difficult time exploiting hardware features such as the CM-5's control network <ref> [9] </ref>, which performs a global barrier or reduction in a few microseconds.
Reference: [10] <author> Kai Li and Paul Hudak. </author> <title> Memory Coherence in Shared Virtual Memory Systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(4) </volume> <pages> 321-359, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: WWT currently runs on the Thinking Machines CM-5 (a message-passing machine) and simulates cache-coherent shared-memory multiprocessors. Shared memory applications execute directly on the CM-5 node processors, with WWT simulating references to remote data. Shared memory functionality is provided using a fine-grain user-level extension of Li's shared virtual memory <ref> [10] </ref>, as described in Section 2.2. WWT uses a separate address space for each simulated (target) node and services all of its exceptions (e.g., MMU faults) and system call requests (e.g., file I/O). In order to study machines larger than the host, several target nodes timeshare a single CM-5 node. <p> Software simulation is required only for those features of the target system not provided by the host. Because WWT executes on a message-passing machine, the primary feature it must simulate is the shared memory abstraction. We do this using a fine-grain extension of Li's shared virtual memory <ref> [10] </ref>. Shared virtual memory constructs a distributed shared memory using standard address translation hardware to control memory access on each node.
Reference: [11] <author> D. Probert, J. Bruno, and M. Karaorman. </author> <title> SPACE: A New Approach to Operating System Abstraction. </title> <booktitle> In Proceedings of the International Workshop on Object Orientation in Operating Systems, </booktitle> <month> October </month> <year> 1991. </year>
Reference-contexts: Their execution model allowed processes to create subcontexts, initiate execution within them, and handle any resulting faults. The primary difference is our page orientation rather than their more general segments and capabilities. More recently, Probert, et al, proposed SPACE, an object-oriented operating system <ref> [11] </ref>. SPACE allows applications to create, manipulate, and execute within spaces, i.e., address spaces, thereby facilitating protected objects. However, SPACE is much more general than our interface, allowing different "executives" to manage different parts of a single address space.
Reference: [12] <author> Richard Rashid, Avadis Tevanian, Michael Young, David Golub, Robert Baron, David Black, William J. Bolosky, and Jonathan Chew. </author> <title> Machine-Independent Virtual Memory Management for Paged Uniprocessor and Multiprocessor Architectures. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(8) </volume> <pages> 896-908, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: The interface is simpler and lower-level than the virtual memory interfaces of either Mach <ref> [12] </ref> or Chorus [1], which both impose significant semantics on the use of memory. To the first order, the executive interface merely exposes the underlying hardware mechanisms to the user in a protected manner.
Reference: [13] <author> Steven K. Reinhardt, Mark D. Hill, James R. Larus, Alvin R. Lebeck, James C. Lewis, and David A. Wood. </author> <title> The Wisconsin Wind Tunnel: Virtual Prototyping of Parallel Computers. </title> <booktitle> In Proceedings of the 1993 ACM Sigmetrics Conference on Measurement and Modeling of Computer Systems, </booktitle> <pages> pages 48-60, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: 1 Introduction This paper describes the kernel interface designed to support the Wisconsin Wind Tunnel (WWT) <ref> [13] </ref>, a system for parallel simulation of parallel computers. WWT currently runs on the Thinking Machines CM-5 (a message-passing machine) and simulates cache-coherent shared-memory multiprocessors. Shared memory applications execute directly on the CM-5 node processors, with WWT simulating references to remote data. <p> The centralized CMOST structure automatically satisfies this condition. 2.2 The Wisconsin Wind Tunnel The Wisconsin Wind Tunnel (WWT) provides a platform for evaluating parallel computer systems|specifically cache-coherent shared-memory computers|by accurately modeling the performance of real workloads on proposed hardware <ref> [13] </ref>. WWT helps computer engineers evaluate computer architectures much like a wind tunnel helps aeronautical engineers design aircraft. WWT uses the execution of a parallel shared-memory application to drive a distributed discrete-event simulation, accurately calculating the execution time of that application on a modeled hardware system (the target).
Reference: [14] <author> S. L. Scott. </author> <type> Personal communication, </type> <month> June </month> <year> 1993. </year>
Reference-contexts: exporting memory-management functions to the user of a uniprocessor; and in conjunction with CMOST, as a means of supporting multiple models of application parallelism on a single machine. 4 The Cray T3D also has hardware support for global barriers; barriers are actually faster than remote memory operations on this machine <ref> [14] </ref>. 14 6.1 Uniprocessor aspects The executive interface provides a complete set of low-level virtual memory functions. The interface is simpler and lower-level than the virtual memory interfaces of either Mach [12] or Chorus [1], which both impose significant semantics on the use of memory.
Reference: [15] <author> Burton J. Smith. </author> <title> Architecture and Applications of the HEP Multiprocessor Computer System. </title> <booktitle> In Proc. of the Int. </booktitle> <publisher> Soc. for Opt. Engr., </publisher> <pages> pages 241-248, </pages> <year> 1982. </year>
Reference-contexts: To achieve this functionality, we have logically extended the CM-5 architecture to support two additional bits of information|writable and invalid|per 32-byte physical memory block. Although memory tags with access semantics have appeared in numerous machines, e.g., the Denelcor HEP <ref> [15] </ref>, most contemporary commercial machines|including the CM-5|do not provide this capability. However, we are able to synthesize an invalid tag on the CM-5 by forcing uncorrectable errors in the memory's error correcting code (ECC) via a diagnostic mode.
Reference: [16] <institution> Thinking Machines Corporation. </institution> <type> Connection Machine CM-5 Technical Summary, </type> <month> October </month> <year> 1991. </year> <month> 17 </month>
Reference-contexts: Section 4 describes our implementation of the interface in CMOST and its performance. Section 5 discusses the implications of this work for the structure of multiprocessor operating systems. Finally, we discuss related work and our conclusions. 2 Background 2.1 Thinking Machines CM-5 and CMOST The Thinking Machines CM-5 <ref> [16] </ref> is a distributed-memory message-passing multiprocessor. Each processing node consists of a 33 MHz SPARC microprocessor with a cache and memory management unit, up to 128 MB of memory, a custom network interface chip, and optional custom vector units.
References-found: 16

