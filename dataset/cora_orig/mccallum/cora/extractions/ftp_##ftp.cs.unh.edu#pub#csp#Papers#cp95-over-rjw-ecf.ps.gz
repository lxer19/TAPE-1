URL: ftp://ftp.cs.unh.edu/pub/csp/Papers/cp95-over-rjw-ecf.ps.gz
Refering-URL: http://www.cs.unh.edu/Personal/ecf.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Heuristic Methods for Over-Constrained Constraint Satisfaction problems  
Author: Richard J. Wallace and Eugene C. Freuder 
Address: Kingsbury Hall Rm208, College Road Durham, NH 03824 USA  
Affiliation: Department of Computer Science University of New Hampshire  
Abstract-found: 0
Intro-found: 1
Reference: [ Freuder and Wallace, 1992 ] <author> E. C. Freuder and R. J. Wallace. </author> <title> Partial constraint satisfaction. </title> <journal> Artificial Intelligence, </journal> <volume> 58 </volume> <pages> 21-70, </pages> <year> 1992. </year>
Reference-contexts: The complete methods used in the present work are branch and bound algorithms developed to solve MAX-CSPs <ref> [ Freuder and Wallace, 1992 ] </ref> [ Wallace, 1995 ] and MAX-SAT problems [ Wallace and Freuder, 1995 ] . These were used to evaluate several important heuristic methods. <p> In the present work branch and bound versions of CSP algorithms were used to determine the optimal number of constraint violations in the problems. These algorithms are described in detail in <ref> [ Freuder and Wallace, 1992 ] </ref> , [ Shapiro and Haralick, 1981 ] , [ Wallace, 1995 ] , [ Wallace and Freuder, 1995 ] . 3 Experimental Methods Random constraint satisfaction problems were generated using a "probability of inclusion" (PI) model of generation (cf. [ Freuder and Wallace, 1992 ] <p> are described in detail in <ref> [ Freuder and Wallace, 1992 ] </ref> , [ Shapiro and Haralick, 1981 ] , [ Wallace, 1995 ] , [ Wallace and Freuder, 1995 ] . 3 Experimental Methods Random constraint satisfaction problems were generated using a "probability of inclusion" (PI) model of generation (cf. [ Freuder and Wallace, 1992 ] ). The number of variables was fixed, as well as the maximum domain size. Each possible domain element, constraint and constraint value pair was then chosen with a specified probability.
Reference: [ Glover, 1990 ] <author> F. Glover. </author> <title> Tabu search: a tutorial. </title> <journal> Interfaces, </journal> <volume> 20 </volume> <pages> 74-94, </pages> <year> 1990. </year>
Reference-contexts: These were used to evaluate several important heuristic methods. For MAX-CSPs, heuristic methods are based on the min-conflicts procedure [ Minton et al., 1992 ] and include versions that incorporate tabu search procedures <ref> [ Glover, 1990 ] </ref> . For MAX-SAT, heuristic methods are variants of GSAT [ Mitchell et al., 1992 ] . The next section gives some background pertaining to CSPs and describes the algorithms. Section 3 describes our experimental methodology. Section 4 gives results for MAX-CSPs and MAX-SAT problems.
Reference: [ Minton et al., 1992 ] <author> S. Minton, M. D. Johnston, A. B. Philips, and P. Laird. </author> <title> Minimizing conflicts: a heuristic repair method for constraint satisfaction and scheduling problems. </title> <journal> Artificial Intelligence, </journal> <volume> 58 </volume> <pages> 161-205, </pages> <year> 1992. </year>
Reference-contexts: These were used to evaluate several important heuristic methods. For MAX-CSPs, heuristic methods are based on the min-conflicts procedure <ref> [ Minton et al., 1992 ] </ref> and include versions that incorporate tabu search procedures [ Glover, 1990 ] . For MAX-SAT, heuristic methods are variants of GSAT [ Mitchell et al., 1992 ] . The next section gives some background pertaining to CSPs and describes the algorithms. <p> In the minconflicts procedure, the first assignment is made by choosing values that minimize the number of constraint violations with values already chosen ( <ref> [ Minton et al., 1992 ] </ref> ). Then random methods are used to choose a variable whose assignment conflicts with another assignment and, from the domain of that variable, a value that has the minimal number of conflicts.
Reference: [ Mitchell et al., 1992 ] <author> D. B. Mitchell, B. Selman, and H. Levesque. </author> <title> Hard and easy distributions of sat problems. </title> <booktitle> In Proceedings AAAI-92, </booktitle> <pages> pages 459-465, </pages> <year> 1992. </year>
Reference-contexts: These were used to evaluate several important heuristic methods. For MAX-CSPs, heuristic methods are based on the min-conflicts procedure [ Minton et al., 1992 ] and include versions that incorporate tabu search procedures [ Glover, 1990 ] . For MAX-SAT, heuristic methods are variants of GSAT <ref> [ Mitchell et al., 1992 ] </ref> . The next section gives some background pertaining to CSPs and describes the algorithms. Section 3 describes our experimental methodology. Section 4 gives results for MAX-CSPs and MAX-SAT problems.
Reference: [ Selman and Kautz, 1993 ] <author> B. Selman and H. A. Kautz. </author> <title> An empirical study of greedy local search for satisfiability testing. </title> <booktitle> In Proceedings AAAI-93, </booktitle> <pages> pages 46-51, </pages> <year> 1993. </year>
Reference-contexts: The anytime curves were similar to those reported in the literature <ref> [ Selman and Kautz, 1993 ] </ref> : a steeper initial descent for the heuristic procedures and eventual convergence. 5 Conclusions This work provides a partial answer to the question posed in the Introduction. <p> The effectiveness of these methods does depend on proper settings of parameter values in the procedure. However, for the most effective strategy the best settings were always within a fairly restricted range. These results also indicate that the random walk strategy of <ref> [ Selman and Kautz, 1993 ] </ref> is superior to a repeated reset strategy. Preliminary results did not suggest any improvement when resetting was combined with the walk strategy or when a version of tabu search was used to avoid local minima.
Reference: [ Selman et al., 1992 ] <author> B. Selman, H. Levesque, and D. Mitchell. </author> <title> A new method for solving hard satis-fiability problems. </title> <booktitle> In Proceedings AAAI-92, </booktitle> <pages> pages 440-446, </pages> <year> 1992. </year>
Reference-contexts: GSAT, a repair procedure for SAT problems, begins with a random truth assignment and then alters ("flips") the assignment of a variable that leads to the greatest net increase in satisfiable clauses. After a certain number of flips, a new random assignment is chosen (called a new "try") ( <ref> [ Selman et al., 1992 ] </ref> ). A variation of GSAT, here called walk-SAT, chooses a variable at random with a probability, p, (the "walk probability") and flips its value, while the normal greedy procedure is followed with probability 1 p.
Reference: [ Shapiro and Haralick, 1981 ] <author> L. Shapiro and R. Har-alick. </author> <title> Structural descriptions and inexact matching. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 3 </volume> <pages> 504-519, </pages> <year> 1981. </year>
Reference-contexts: In the present work branch and bound versions of CSP algorithms were used to determine the optimal number of constraint violations in the problems. These algorithms are described in detail in [ Freuder and Wallace, 1992 ] , <ref> [ Shapiro and Haralick, 1981 ] </ref> , [ Wallace, 1995 ] , [ Wallace and Freuder, 1995 ] . 3 Experimental Methods Random constraint satisfaction problems were generated using a "probability of inclusion" (PI) model of generation (cf. [ Freuder and Wallace, 1992 ] ).
Reference: [ Wallace and Freuder, 1995 ] <author> R. J. Wallace and E. C. Freuder. </author> <title> Comparing constraint satisfaction and davis-putnam algorithms for the maximal satisfia-bility problem. </title> <editor> In D. S. Johnson and M. A. Trick, editors, </editor> <title> Cliques, Coloring and Satisfiability: Second DIMACS Implementation Challenge, (to appear). </title> <publisher> American Mathematical Society, </publisher> <year> 1995. </year>
Reference-contexts: The complete methods used in the present work are branch and bound algorithms developed to solve MAX-CSPs [ Freuder and Wallace, 1992 ] [ Wallace, 1995 ] and MAX-SAT problems <ref> [ Wallace and Freuder, 1995 ] </ref> . These were used to evaluate several important heuristic methods. For MAX-CSPs, heuristic methods are based on the min-conflicts procedure [ Minton et al., 1992 ] and include versions that incorporate tabu search procedures [ Glover, 1990 ] . <p> These algorithms are described in detail in [ Freuder and Wallace, 1992 ] , [ Shapiro and Haralick, 1981 ] , [ Wallace, 1995 ] , <ref> [ Wallace and Freuder, 1995 ] </ref> . 3 Experimental Methods Random constraint satisfaction problems were generated using a "probability of inclusion" (PI) model of generation (cf. [ Freuder and Wallace, 1992 ] ). The number of variables was fixed, as well as the maximum domain size.
Reference: [ Wallace, 1995 ] <author> R. J. Wallace. </author> <title> Directed arc consistency preprocessing as a strategy for maximal constraint satisfaction. </title> <editor> In M. Meyer, editor, </editor> <booktitle> Constraint Processing, volume 923 of Lecture Notes in Computer Science, </booktitle> <pages> pages 121-138. </pages> <publisher> Springer-Verlag, </publisher> <address> Hei-delberg, </address> <year> 1995. </year>
Reference-contexts: The complete methods used in the present work are branch and bound algorithms developed to solve MAX-CSPs [ Freuder and Wallace, 1992 ] <ref> [ Wallace, 1995 ] </ref> and MAX-SAT problems [ Wallace and Freuder, 1995 ] . These were used to evaluate several important heuristic methods. <p> In the present work branch and bound versions of CSP algorithms were used to determine the optimal number of constraint violations in the problems. These algorithms are described in detail in [ Freuder and Wallace, 1992 ] , [ Shapiro and Haralick, 1981 ] , <ref> [ Wallace, 1995 ] </ref> , [ Wallace and Freuder, 1995 ] . 3 Experimental Methods Random constraint satisfaction problems were generated using a "probability of inclusion" (PI) model of generation (cf. [ Freuder and Wallace, 1992 ] ). <p> Each possible domain element, constraint and constraint value pair was then chosen with a specified probability. Some problem sets were generated with a "random parameter value" (RPV) model, using a fixed number of variables and constraints (cf. <ref> [ Wallace, 1995 ] </ref> ).
References-found: 9

