URL: http://euler.mcs.utulsa.edu/~hale/como96.ps
Refering-URL: http://euler.mcs.utulsa.edu/~hale/moose.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Framework for High Assurance Security of Distributed Objects  
Author: John Hale Jody Threet Sujeet Shenoi 
Address: Keplinger Hall,  74104-3189, USA  
Affiliation: Department of Mathematical and Computer Sciences  University of Tulsa Tulsa, Oklahoma  
Abstract: High assurance security is difficult to achieve in distributed computer systems and databases because of their complexity, non-determinism and inherent heterogeneity. The practical application of formal methods is the key to high assurance security in open, distributed environments. This paper proposes the use of formal methods and a special layered architecture to achieve secure interoperation of heterogeneous distributed objects. The foundation is provided by ROC, a process calculus tailored for concurrent objects. Lying above ROC in the layered architecture is a meta-object model for creating object models with various programming constructs, mega-programming facilities and security mechanisms. Successive layers of the architecture represent more sophisticated toolkits for modeling distributed objects. Since each layer inherits ROC's formal foundation, it automatically has an unambiguous semantics and supports verification.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G.A. Agha. </author> <title> ACTORS: A Model of Concurrent Computation in Distributed Systems. </title> <publisher> MIT Press, </publisher> <address> Cam-bridge, Massachusetts, </address> <year> 1986. </year>
Reference-contexts: The foundation for MOOSE is provided by the Robust Object Calculus (ROC), a process calculus tailored to modeling distributed object systems. Upon ROC rests the Meta-Object Model (MOM), an ACTORS-like architecture <ref> [1] </ref> for building concurrent/distributed systems. Any object language or model constructed with MOM inherits ROC's formal semantics which provides a basis for system verification. <p> Therefore, instead of applying ROC directly as a denotational semantics for concur 2 MOOSE Abstract Object Model Meta-Object Model ROC rent programming languages, it is used to define a primitive ACTORS-like <ref> [1] </ref> meta-object model (MOM). MOM can be used to efficiently capture the semantics of existing concurrent object-oriented programming languages. In MOOSE, MOM functions as an abstract common substrate for the interoperation of heterogeneous distributed objects. <p> The Struct rule manifests symmetrical inference rules for Conc and Choice where a & b b & a and a + b b + a. 6 4 Meta-Object Model This section describes the Meta-Object Model (MOM), an ACTORS-like system <ref> [1] </ref> developed for the MOOSE operational framework. The model is defined as a system of ROC agents and, therefore, also serves to illustrate the construction of abstract models with ROC. The underlying principles of ROC, e.g., encapsulation and tuple-based communication, have facilitated the formal design of MOM. <p> Using another process calculus to design MOM is much more difficult, if not impossible. MOM is designed to serve as a primitive object architecture for constructing more sophisticated object models and programming languages. MOM is similar to the ACTORS system <ref> [1] </ref> and Chien's Concurrent Aggregates [4]. It supports core object functionality, including persistence, method invocation, asynchronous message-passing, delegation and aggregation. Virtually any object system can be modeled with this core functionality.
Reference: [2] <author> J. Alves-Foss and K. Levitt. </author> <title> Mechanical verification of secure distributed systems in higher order logic. </title> <booktitle> In Proceedings of the 1991 International Workshop on Higher Order Logic Theorem Proving and its Applications, </booktitle> <pages> pages 263-278, </pages> <year> 1991. </year>
Reference-contexts: Successive layers of the architecture represent more sophisticated toolkits for modeling distributed objects. Since these layers also inherit ROC's formal foundation, they have unambiguous semantics and support verification. Layered architectures have been used by several researchers to construct verification systems for programming languages and distributed systems <ref> [2, 3, 20, 21] </ref>. The Silo Project at the University of California-Davis has applied a layered architecture to the formal verification of secure distributed systems and applications [20, 21]. This work advances Silo by employing a primitive process calculus (ROC) for concurrent objects as a foundation for the semantics hierarchy. <p> If the formal semantics of the service satisfies the policy specification, then the system is proven to be secure. The Silo project [20, 21] presents a useful hierarchical verification methodology for distributed systems based on formal methods <ref> [2, 3] </ref>. The methodology prescribes a semantic layer for each computational substrate, from the hardware level up to the application level. Each layer can be formally specified as an abstract machine defined from the layer beneath it.
Reference: [3] <author> W. R. Bevier, Jr. W. A. Hunt, J. S. Moore, and W. D. Young. </author> <title> An approach to systems verification. </title> <type> Technical Report 41, </type> <institution> Computational Logic Inc., Austin, Texas, </institution> <year> 1989. </year>
Reference-contexts: Successive layers of the architecture represent more sophisticated toolkits for modeling distributed objects. Since these layers also inherit ROC's formal foundation, they have unambiguous semantics and support verification. Layered architectures have been used by several researchers to construct verification systems for programming languages and distributed systems <ref> [2, 3, 20, 21] </ref>. The Silo Project at the University of California-Davis has applied a layered architecture to the formal verification of secure distributed systems and applications [20, 21]. This work advances Silo by employing a primitive process calculus (ROC) for concurrent objects as a foundation for the semantics hierarchy. <p> If the formal semantics of the service satisfies the policy specification, then the system is proven to be secure. The Silo project [20, 21] presents a useful hierarchical verification methodology for distributed systems based on formal methods <ref> [2, 3] </ref>. The methodology prescribes a semantic layer for each computational substrate, from the hardware level up to the application level. Each layer can be formally specified as an abstract machine defined from the layer beneath it.
Reference: [4] <author> A.A. Chien. </author> <title> Concurrent Aggregates. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1993. </year>
Reference-contexts: Using another process calculus to design MOM is much more difficult, if not impossible. MOM is designed to serve as a primitive object architecture for constructing more sophisticated object models and programming languages. MOM is similar to the ACTORS system [1] and Chien's Concurrent Aggregates <ref> [4] </ref>. It supports core object functionality, including persistence, method invocation, asynchronous message-passing, delegation and aggregation. Virtually any object system can be modeled with this core functionality.
Reference: [5] <author> A. Church. </author> <title> A formulation of the simple theory of types. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 5 </volume> <pages> 56-68, </pages> <year> 1940. </year>
Reference-contexts: The HOL system provides a suitable environment for reasoning about computational systems [9]. It uses a higher order logic based on Church's logic of types <ref> [5] </ref> which extends predicate logic by adding types and letting variables range over functions. The axiomatization of ROC semantics into higher order logic is achieved by a mechanization processs.
Reference: [6] <author> A. Diller. </author> <title> Z: An Introduction to Formal Methods. </title> <publisher> John Wiley, </publisher> <address> New York, New York, </address> <year> 1990. </year>
Reference-contexts: One solution is to deliver applications with high assurance that they can operate securely in open, distributed environments. The practical application of formal methods is the key to high assurance computing. Formal methods have been applied to centralized computer systems and traditional programming languages with some success <ref> [6, 11, 19] </ref>. Unambigous formal semantics for these systems created by applying formal methods provides the basis for system/application verification. The view of a security policy as a logical proposition leads to the consideration of verifiably secure computer systems. <p> Formal models of computer security can provide precise semantics for security models, mechanisms and policies. These semantics and their accompanying verification properties are indispensible to realizing the goal of verifiably secure heterogeneous distributed systems. While many research efforts have applied formal methods to high assurance computing <ref> [6, 11, 19] </ref>, a practical application of formal methods to heterogeneous distributed system verification remains elusive. The Meta Object-Oriented Operating System Environment (MOOSE) framework described in this paper employs fl To whom correspondence should be addressed (email: sujeet@euler.mcs.utulsa.edu). Research supported by OCAST Grant AR2-002 and MPO Contract MDA904-94-C-6117.
Reference: [7] <author> Open Systems Foundation. </author> <title> The OSF distributed computing environment. </title> <type> Technical Report OSF-DCE-PD-1090-4, </type> <institution> Open Systems Foundation, Cambridge, Massachusetts, </institution> <year> 1992. </year> <month> 15 </month>
Reference-contexts: Objects provide a clean, realistic model of persistent entities with complex behavior found in most heterogeneous distributed systems. Several architectures, most notably CORBA [10, 16] and DCE <ref> [7, 18] </ref>, have been proposed as standards for distributed object management systems. However, unlike MOOSE, they lack the formal foundation necessary to verify system security and other critical properties of high assurance systems. <p> This example only addresses access control. To achieve secure interoperation, each security service offered by interoperable components must be negotiated to obtain a consensus. The concern for distributed object interoperability has produced various management schemes, including OMG's CORBA [10, 16] and OSF's DCE <ref> [7, 18] </ref>. These schemes allow architecture-compliant objects and systems to interoperate seamlessly. However, the impetus to provide practical solutions has caused security to take a back seat to interoperability. Furthermore, security models and mechanisms for these architectures are hindered by a lack of formal semantics. <p> the major efforts in the areas of distributed object interoperation and verifiably secure distributed systems, and relates them to on-going work in the MOOSE project. 6.1 Distributed Object Architectures The need for secure interoperation has produced various "standard" architectures, the most prominent being OMG's CORBA [10, 16] and OSF's DCE <ref> [7, 18] </ref>. These schemes allow compliant objects and systems to interoperate. Security is considered in CORBA and DCE, but is applied in a somewhat ad hoc manner. CORBA provides a standard architecture for distributed object interaction [10, 16]. However, it is not a panacea for secure distributed object interoperation. <p> However, it is not a panacea for secure distributed object interoperation. While it offers a security policy specification, CORBA lacks a formal semantics. The Distributed Computing Environment (DCE) addresses interoperability using middleware that provides a common environment for heterogeneous computer systems <ref> [7, 18] </ref>. DCE provides security mechanisms, but an inadequate formal foundation. Newer object architectures which are continuing to emerge only make object interoperation more complicated. In fact, they create the new problem of securely interoperable standards.
Reference: [8] <author> L. Gong and X. Qian. </author> <title> Computational issues in secure interoperation. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 32(1), </volume> <year> 1996. </year>
Reference-contexts: In particular, they promote compositional reasoning as a critical technology for efficient distributed system verification. Related research by Gong and Qian at SRI <ref> [8] </ref> has focused on the theoretical implications of secure interoperability between heterogeneous systems. This work also espouses the principle of compositional reasoning for distributed systems and examines the complexity of various reasoning techniques applied to heterogeneous distributed systems.
Reference: [9] <editor> M. Gordon and T.F. Melham, editors. </editor> <title> Introduction to HOL: A Theorem Proving Environment for Higher Order Logic. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, U.K., </address> <year> 1993. </year>
Reference-contexts: Using ROC as the execution model for distributed systems has several advantages. ROC's formal operational semantics facilitates a mechanization (deep embedding) into a more expressive mathematical system, e.g., the higher order logic (HOL) <ref> [9] </ref>. ROC can be used as a semantic algebra for creating denotational semantics for concurrent object-oriented programming languages. Applications written in these languages inherit the formal operational semantics of ROC, allowing reuse of ROC's HOL theorems. <p> The HOL system provides a suitable environment for reasoning about computational systems <ref> [9] </ref>. It uses a higher order logic based on Church's logic of types [5] which extends predicate logic by adding types and letting variables range over functions. The axiomatization of ROC semantics into higher order logic is achieved by a mechanization processs.
Reference: [10] <author> Object Management Group and X/Open. </author> <title> The common object request broker: Architecture and specification. </title> <type> Technical Report OMG Document No. </type> <institution> 91.12.1, Object Management Group and X/Open, Framingham, Massachusetts, </institution> <year> 1991. </year>
Reference-contexts: Objects provide a clean, realistic model of persistent entities with complex behavior found in most heterogeneous distributed systems. Several architectures, most notably CORBA <ref> [10, 16] </ref> and DCE [7, 18], have been proposed as standards for distributed object management systems. However, unlike MOOSE, they lack the formal foundation necessary to verify system security and other critical properties of high assurance systems. <p> This example only addresses access control. To achieve secure interoperation, each security service offered by interoperable components must be negotiated to obtain a consensus. The concern for distributed object interoperability has produced various management schemes, including OMG's CORBA <ref> [10, 16] </ref> and OSF's DCE [7, 18]. These schemes allow architecture-compliant objects and systems to interoperate seamlessly. However, the impetus to provide practical solutions has caused security to take a back seat to interoperability. Furthermore, security models and mechanisms for these architectures are hindered by a lack of formal semantics. <p> This section summarizes the major efforts in the areas of distributed object interoperation and verifiably secure distributed systems, and relates them to on-going work in the MOOSE project. 6.1 Distributed Object Architectures The need for secure interoperation has produced various "standard" architectures, the most prominent being OMG's CORBA <ref> [10, 16] </ref> and OSF's DCE [7, 18]. These schemes allow compliant objects and systems to interoperate. Security is considered in CORBA and DCE, but is applied in a somewhat ad hoc manner. CORBA provides a standard architecture for distributed object interaction [10, 16]. <p> various "standard" architectures, the most prominent being OMG's CORBA <ref> [10, 16] </ref> and OSF's DCE [7, 18]. These schemes allow compliant objects and systems to interoperate. Security is considered in CORBA and DCE, but is applied in a somewhat ad hoc manner. CORBA provides a standard architecture for distributed object interaction [10, 16]. However, it is not a panacea for secure distributed object interoperation. While it offers a security policy specification, CORBA lacks a formal semantics. The Distributed Computing Environment (DCE) addresses interoperability using middleware that provides a common environment for heterogeneous computer systems [7, 18].
Reference: [11] <editor> M. Hinchey and J. Bowen, editors. </editor> <title> Applications of Formal Methods. </title> <publisher> Prentice Hall, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: One solution is to deliver applications with high assurance that they can operate securely in open, distributed environments. The practical application of formal methods is the key to high assurance computing. Formal methods have been applied to centralized computer systems and traditional programming languages with some success <ref> [6, 11, 19] </ref>. Unambigous formal semantics for these systems created by applying formal methods provides the basis for system/application verification. The view of a security policy as a logical proposition leads to the consideration of verifiably secure computer systems. <p> Formal models of computer security can provide precise semantics for security models, mechanisms and policies. These semantics and their accompanying verification properties are indispensible to realizing the goal of verifiably secure heterogeneous distributed systems. While many research efforts have applied formal methods to high assurance computing <ref> [6, 11, 19] </ref>, a practical application of formal methods to heterogeneous distributed system verification remains elusive. The Meta Object-Oriented Operating System Environment (MOOSE) framework described in this paper employs fl To whom correspondence should be addressed (email: sujeet@euler.mcs.utulsa.edu). Research supported by OCAST Grant AR2-002 and MPO Contract MDA904-94-C-6117.
Reference: [12] <author> J. Maclean. </author> <title> The specification and modeling of computer security. </title> <journal> IEEE Computer, </journal> <volume> 23(1), </volume> <year> 1990. </year>
Reference-contexts: Theoretical work on verifiably secure distributed systems explores formalisms for computer security and new methods for reasoning about distributed systems. Researchers at NRL's Center for High Assurance Computer Systems <ref> [12, 13] </ref> have proposed practical methods for formal security model specification based 14 on the formal foundations of computer security. In particular, they promote compositional reasoning as a critical technology for efficient distributed system verification.
Reference: [13] <author> J. Maclean and C. Meadows. </author> <title> Composable security properties. </title> <booktitle> In Proceedings of the Computer Security Workshop, </booktitle> <year> 1989. </year>
Reference-contexts: Theoretical work on verifiably secure distributed systems explores formalisms for computer security and new methods for reasoning about distributed systems. Researchers at NRL's Center for High Assurance Computer Systems <ref> [12, 13] </ref> have proposed practical methods for formal security model specification based 14 on the formal foundations of computer security. In particular, they promote compositional reasoning as a critical technology for efficient distributed system verification.
Reference: [14] <author> T.F. Melham. </author> <title> A mechanized theory of the -calculus in HOL. </title> <type> Technical Report 244, </type> <institution> University of Cambridge Computer Laboratory, </institution> <address> Cambridge, UK, </address> <year> 1992. </year>
Reference-contexts: They are more expressive and better suited to specification and verification. 11 ROC Mechanization into HOL Abstract Object Model Meta-Object Model ROC ROC Theorems MOM Theorems AOM Theorems ROC semantics is easily axiomatized to permit reasoning by an interactive HOL theorem prover <ref> [14] </ref>. The HOL system provides a suitable environment for reasoning about computational systems [9]. It uses a higher order logic based on Church's logic of types [5] which extends predicate logic by adding types and letting variables range over functions.
Reference: [15] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A calculus of mobile processes (Parts I and II). </title> <type> Technical Report ECS-LFCS-89-85,86, </type> <institution> University of Edinburgh, </institution> <year> 1989. </year>
Reference-contexts: ROC is based on Nierstrasz's Object Calculus (OC) [17], and extends it by permitting robust encapsulation of agents, an essential feature of objects. The ease with which ROC models complex message-passing distinguishes it from traditional process calculi (e.g., Milner's -calculus <ref> [15] </ref>). ROC's primary role is to provide primitive but formal semantics to concurrent object systems at all levels in the MOOSE operational framework. Concurrent object models are endowed with ROC semantics through their denotational definitions. <p> The agents will be deployed as middleware resting between the operating system and software components. 3 Robust Object Calculus The Robust Object Calculus (ROC) is designed to supply a formal operational semantics to each layer in the operational framework. ROC advances existing process calculi, e.g., Milner's -calculus <ref> [15] </ref> and Nierstrasz's Object Calculus (OC) [17], by supporting complex message-passing and a robust form of encapsulation for concurrently executing objects. Robust agent encapsulation is critical to object-oriented systems.
Reference: [16] <author> T.J. Mowbray and R. Zahavi. </author> <title> The Essential CORBA: Systems Integration Using Distributed Objects. </title> <publisher> John Wiley, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: Objects provide a clean, realistic model of persistent entities with complex behavior found in most heterogeneous distributed systems. Several architectures, most notably CORBA <ref> [10, 16] </ref> and DCE [7, 18], have been proposed as standards for distributed object management systems. However, unlike MOOSE, they lack the formal foundation necessary to verify system security and other critical properties of high assurance systems. <p> This example only addresses access control. To achieve secure interoperation, each security service offered by interoperable components must be negotiated to obtain a consensus. The concern for distributed object interoperability has produced various management schemes, including OMG's CORBA <ref> [10, 16] </ref> and OSF's DCE [7, 18]. These schemes allow architecture-compliant objects and systems to interoperate seamlessly. However, the impetus to provide practical solutions has caused security to take a back seat to interoperability. Furthermore, security models and mechanisms for these architectures are hindered by a lack of formal semantics. <p> This section summarizes the major efforts in the areas of distributed object interoperation and verifiably secure distributed systems, and relates them to on-going work in the MOOSE project. 6.1 Distributed Object Architectures The need for secure interoperation has produced various "standard" architectures, the most prominent being OMG's CORBA <ref> [10, 16] </ref> and OSF's DCE [7, 18]. These schemes allow compliant objects and systems to interoperate. Security is considered in CORBA and DCE, but is applied in a somewhat ad hoc manner. CORBA provides a standard architecture for distributed object interaction [10, 16]. <p> various "standard" architectures, the most prominent being OMG's CORBA <ref> [10, 16] </ref> and OSF's DCE [7, 18]. These schemes allow compliant objects and systems to interoperate. Security is considered in CORBA and DCE, but is applied in a somewhat ad hoc manner. CORBA provides a standard architecture for distributed object interaction [10, 16]. However, it is not a panacea for secure distributed object interoperation. While it offers a security policy specification, CORBA lacks a formal semantics. The Distributed Computing Environment (DCE) addresses interoperability using middleware that provides a common environment for heterogeneous computer systems [7, 18].
Reference: [17] <author> O. Nierstrasz. </author> <title> Towards an object calculus. </title> <editor> In M. Tokoro, O. Nierstrasz, P. Wegner, and A. Yonezawa, editors, </editor> <booktitle> Proceedings of the ECOOP '91 Workshop on Object-Based Concurrent Computing, </booktitle> <pages> pages 1-20. </pages> <publisher> Springer-Verlag, </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1991. </year>
Reference-contexts: Figure 1 illustrates the layered operational semantics of MOOSE. The special requirements for the concurrency formalism underlying the MOOSE operational framework motivated the development of the Robust Object Calculus (ROC), a process calculus for objects. ROC is based on Nierstrasz's Object Calculus (OC) <ref> [17] </ref>, and extends it by permitting robust encapsulation of agents, an essential feature of objects. The ease with which ROC models complex message-passing distinguishes it from traditional process calculi (e.g., Milner's -calculus [15]). <p> ROC advances existing process calculi, e.g., Milner's -calculus [15] and Nierstrasz's Object Calculus (OC) <ref> [17] </ref>, by supporting complex message-passing and a robust form of encapsulation for concurrently executing objects. Robust agent encapsulation is critical to object-oriented systems. It is achieved by mandating that private services and values in objects be inaccessible to external objects, thereby ensuring that objects have well-defined interfaces. <p> For example, when v# binds to n? in a, each free occurrence of n in a is replaced by v. 3.2 Syntax The ROC syntax is derived from Nierstrasz's Object Calculus (OC) <ref> [17] </ref>. The symbol "#" distinguishes bindable values from unbindable values. The non-deterministic choice operator "+" from -calculus is added.
Reference: [18] <author> W. Rosenberry, D. Kenney, and G. Fisher. </author> <title> Understanding DCE. </title> <publisher> O'Reilly and Associates, Inc., </publisher> <address> Se-bastopal, California, </address> <year> 1993. </year>
Reference-contexts: Objects provide a clean, realistic model of persistent entities with complex behavior found in most heterogeneous distributed systems. Several architectures, most notably CORBA [10, 16] and DCE <ref> [7, 18] </ref>, have been proposed as standards for distributed object management systems. However, unlike MOOSE, they lack the formal foundation necessary to verify system security and other critical properties of high assurance systems. <p> This example only addresses access control. To achieve secure interoperation, each security service offered by interoperable components must be negotiated to obtain a consensus. The concern for distributed object interoperability has produced various management schemes, including OMG's CORBA [10, 16] and OSF's DCE <ref> [7, 18] </ref>. These schemes allow architecture-compliant objects and systems to interoperate seamlessly. However, the impetus to provide practical solutions has caused security to take a back seat to interoperability. Furthermore, security models and mechanisms for these architectures are hindered by a lack of formal semantics. <p> the major efforts in the areas of distributed object interoperation and verifiably secure distributed systems, and relates them to on-going work in the MOOSE project. 6.1 Distributed Object Architectures The need for secure interoperation has produced various "standard" architectures, the most prominent being OMG's CORBA [10, 16] and OSF's DCE <ref> [7, 18] </ref>. These schemes allow compliant objects and systems to interoperate. Security is considered in CORBA and DCE, but is applied in a somewhat ad hoc manner. CORBA provides a standard architecture for distributed object interaction [10, 16]. However, it is not a panacea for secure distributed object interoperation. <p> However, it is not a panacea for secure distributed object interoperation. While it offers a security policy specification, CORBA lacks a formal semantics. The Distributed Computing Environment (DCE) addresses interoperability using middleware that provides a common environment for heterogeneous computer systems <ref> [7, 18] </ref>. DCE provides security mechanisms, but an inadequate formal foundation. Newer object architectures which are continuing to emerge only make object interoperation more complicated. In fact, they create the new problem of securely interoperable standards.
Reference: [19] <author> J. Wing. </author> <title> A specifier's introduction to formal methods. </title> <journal> IEEE Computer, </journal> <volume> 23(9) </volume> <pages> 8-21, </pages> <year> 1990. </year>
Reference-contexts: One solution is to deliver applications with high assurance that they can operate securely in open, distributed environments. The practical application of formal methods is the key to high assurance computing. Formal methods have been applied to centralized computer systems and traditional programming languages with some success <ref> [6, 11, 19] </ref>. Unambigous formal semantics for these systems created by applying formal methods provides the basis for system/application verification. The view of a security policy as a logical proposition leads to the consideration of verifiably secure computer systems. <p> Formal models of computer security can provide precise semantics for security models, mechanisms and policies. These semantics and their accompanying verification properties are indispensible to realizing the goal of verifiably secure heterogeneous distributed systems. While many research efforts have applied formal methods to high assurance computing <ref> [6, 11, 19] </ref>, a practical application of formal methods to heterogeneous distributed system verification remains elusive. The Meta Object-Oriented Operating System Environment (MOOSE) framework described in this paper employs fl To whom correspondence should be addressed (email: sujeet@euler.mcs.utulsa.edu). Research supported by OCAST Grant AR2-002 and MPO Contract MDA904-94-C-6117.
Reference: [20] <author> C. Zhang, B. R. Becker, M. R. Heckman, K. Levitt, and R. A. Olsson. </author> <title> A hierachical method for reasoning about distributed programming languages and its applications. </title> <booktitle> In Proceedings of the 1995 International Workshop on Higher Order Logic Theorem Proving and its Applications, </booktitle> <year> 1995. </year>
Reference-contexts: Successive layers of the architecture represent more sophisticated toolkits for modeling distributed objects. Since these layers also inherit ROC's formal foundation, they have unambiguous semantics and support verification. Layered architectures have been used by several researchers to construct verification systems for programming languages and distributed systems <ref> [2, 3, 20, 21] </ref>. The Silo Project at the University of California-Davis has applied a layered architecture to the formal verification of secure distributed systems and applications [20, 21]. This work advances Silo by employing a primitive process calculus (ROC) for concurrent objects as a foundation for the semantics hierarchy. <p> Layered architectures have been used by several researchers to construct verification systems for programming languages and distributed systems [2, 3, 20, 21]. The Silo Project at the University of California-Davis has applied a layered architecture to the formal verification of secure distributed systems and applications <ref> [20, 21] </ref>. This work advances Silo by employing a primitive process calculus (ROC) for concurrent objects as a foundation for the semantics hierarchy. Using ROC as the execution model for distributed systems has several advantages. <p> This is usually done by modeling security services and execution models of distributed systems with formal semantics and providing formal security policy specifications. If the formal semantics of the service satisfies the policy specification, then the system is proven to be secure. The Silo project <ref> [20, 21] </ref> presents a useful hierarchical verification methodology for distributed systems based on formal methods [2, 3]. The methodology prescribes a semantic layer for each computational substrate, from the hardware level up to the application level.
Reference: [21] <author> C. Zhang, R. Shaw, M. R. Heckman, G. D. Benson, M. Archer, K. Levitt, and R. A. Olsson. </author> <title> Towards a formal verification of a secure distributed system and its applications. </title> <editor> In T. Melham and J. Camilleri, editors, </editor> <booktitle> Supplementary Proceedings of the 7th International Workshop on Higher Order Logic Theorem Proving and its Applications, </booktitle> <year> 1994. </year> <month> 16 </month>
Reference-contexts: Successive layers of the architecture represent more sophisticated toolkits for modeling distributed objects. Since these layers also inherit ROC's formal foundation, they have unambiguous semantics and support verification. Layered architectures have been used by several researchers to construct verification systems for programming languages and distributed systems <ref> [2, 3, 20, 21] </ref>. The Silo Project at the University of California-Davis has applied a layered architecture to the formal verification of secure distributed systems and applications [20, 21]. This work advances Silo by employing a primitive process calculus (ROC) for concurrent objects as a foundation for the semantics hierarchy. <p> Layered architectures have been used by several researchers to construct verification systems for programming languages and distributed systems [2, 3, 20, 21]. The Silo Project at the University of California-Davis has applied a layered architecture to the formal verification of secure distributed systems and applications <ref> [20, 21] </ref>. This work advances Silo by employing a primitive process calculus (ROC) for concurrent objects as a foundation for the semantics hierarchy. Using ROC as the execution model for distributed systems has several advantages. <p> This is usually done by modeling security services and execution models of distributed systems with formal semantics and providing formal security policy specifications. If the formal semantics of the service satisfies the policy specification, then the system is proven to be secure. The Silo project <ref> [20, 21] </ref> presents a useful hierarchical verification methodology for distributed systems based on formal methods [2, 3]. The methodology prescribes a semantic layer for each computational substrate, from the hardware level up to the application level.
References-found: 21

