URL: http://www.cs.berkeley.edu/~adj/cs294-1.s98/projects/reports/prcs2.ps
Refering-URL: http://www.cs.berkeley.edu/~adj/cs294-1.s98/notes13.html
Root-URL: 
Title: The Design and Implementation of Distributed, Disconnected Operation in PRCS  
Author: Josh MacDonald 
Abstract: Traditional client-server version control applications have not addressed the need for disconnected operation. This mode of operation, applied to version control, allows users to use the version control utility to its fullest extent when disconnected from a shared repository. Version control applications demonstrate several features unique to read-only media that virtually eliminates changes to the operational model. The user is presented with the same interface, regardless of network connectivity, and changes in connectivity present themselves as the same 1 Previous Results operation one expects a version control utility to support, merge or update.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Berliner, B. CVS II: </author> <title> Parallelizing software development. </title> <booktitle> In Proceedings of the Winter 1990 USENIX Conference, </booktitle> <pages> January 22-26, </pages> <address> 1990, Washington, DC, USA (Berkeley, CA, USA, </address> <month> Jan. </month> <year> 1990), </year> <editor> USENIX Association, Ed., </editor> <booktitle> USENIX, </booktitle> <pages> pp. 341-352. </pages>
Reference-contexts: It should not be necessary to augment the operation of PRCS with such programs as rsync [16] or CVSup [11], a distribution protocol for CVS <ref> [1] </ref>. * Network communication must be efficient, optimized for the particular problem, and secure. The above requirements suggest several implementation features, which will be discussed in the next section. When available, clients will use local disk to cache data. The use of local caches enables efficient network communication.
Reference: [2] <author> Burns, R. C., and Long, D. D. E. </author> <title> A linear time, constant space differencing algorithm. </title> <type> Master's thesis, </type> <institution> University of California at Santa Cruz, Department of Computer Science, </institution> <year> 1997. </year> <title> 1 The rsync algorithm is a coarse delta algorithm which operates over the network by exchanging checksums on relatively large segments of each file. Xdelta can be easily extended to perform the rsync algorithm. </title> <type> 11 </type>
Reference-contexts: Even the best of such algorithms [10] cannot perform as well as more modern delta algorithms which use techniques similar to file compression, generating a sequence of copy and insert instructions [6] <ref> [2] </ref>. These deltas are a set of instructions that describe how to construct a new file from an old file, rather than describing how to modify the old file into the new file.
Reference: [3] <author> Freier, A., Karlton, P., and Kocher, P. </author> <title> The ssl protocol: </title> <note> Version 3.0, </note> <month> November </month> <year> 1996. </year>
Reference-contexts: Authentication and security must not be tied to operating system privileges, for this limits the effectiveness and participation of replicant, mirrored repositories. Currently, connections are authenticated using the SSL version 3.0 protocol <ref> [3] </ref>. Rather than use the proposed certificate authority infrastructure that comes along with SSL (and seems like quite a lot of baggage), certificate authority will be assumed by each individual server. Authorized users will register a message digest (such as SHA-1 [14]) of their certificate with the repository administrator.
Reference: [4] <author> Horton, M. R. </author> <title> RFC 850: Standard for interchange of USENET messages, </title> <month> June </month> <year> 1983. </year> <title> Obsoleted by RFC1036 [5]. Status: </title> <publisher> UNKNOWN. </publisher>
Reference: [5] <author> Horton, M. R., and Adams, R. </author> <title> RFC 1036: Standard for interchange of USENET messages, </title> <month> Dec. </month> <year> 1987. </year> <title> Obsoletes RFC0850 [4]. Status: </title> <publisher> UNKNOWN. </publisher>
Reference-contexts: Much like the NNTP protocol [7] <ref> [5] </ref>, these servers may be configured to feed neighbors in a logical server network.
Reference: [6] <author> Hunt, J. J., Vo, K.-P., and Tichy, W. F. </author> <title> An empirical study of delta algorithms. </title> <booktitle> Lecture Notes in Computer Science 1167 (July 1996), </booktitle> <pages> 49-66. </pages>
Reference-contexts: Even the best of such algorithms [10] cannot perform as well as more modern delta algorithms which use techniques similar to file compression, generating a sequence of copy and insert instructions <ref> [6] </ref> [2]. These deltas are a set of instructions that describe how to construct a new file from an old file, rather than describing how to modify the old file into the new file.
Reference: [7] <author> Kantor, B., and Lapsley, P. </author> <title> RFC 977: Network news transfer protocol: A proposed standard for the stream-based transmission of news, </title> <month> Feb. </month> <year> 1986. </year> <title> Status: PROPOSED STANDARD. </title>
Reference-contexts: Much like the NNTP protocol <ref> [7] </ref> [5], these servers may be configured to feed neighbors in a logical server network.
Reference: [8] <author> Kistler, J. J., and Satyanarayanan, M. </author> <title> Disconnected operation in the coda file system. </title> <type> SOSP 8, </type> <month> 2 (October </month> <year> 1991), </year> <pages> 213-2251. </pages>
Reference-contexts: One might claim that the application developer should focus on writing applications, and the operating system developer should focus on providing distributed, disconnected file system access, so that the application can operate in a distributed environment. Even assuming users have accepted optimistic concurrency, as found in Coda <ref> [8] </ref>, a distributed file system does not seem to help. A first approach might be to place a PRCS repository on a distributed file system.
Reference: [9] <author> MacDonald, J., Hilfinger, P. N., and Semenzato, L. Prcs: </author> <title> The project revision control system. </title> <note> Lecture Notes in Computer Science (to appear) (1998). </note>
Reference-contexts: 1 Previous Results PRCS <ref> [9] </ref> is a version control application designed for simplicity and ease of use. Much like other systems, PRCS uses an optimistic concurrency model for organizing multiple, concurrent development efforts.
Reference: [10] <author> Myers, E. W. </author> <title> An O(N D) difference algorithm and its variations. </title> <journal> Algorithmica 1, </journal> <volume> 2 (1986), </volume> <pages> 251-266. </pages>
Reference-contexts: LCS-style deltas are useful for a human reader, but have more information than necessary for the reconstruction of a file: LCS computes the shortest sequence of insert and delete edits where RCS should really be using the shortest delta. Even the best of such algorithms <ref> [10] </ref> cannot perform as well as more modern delta algorithms which use techniques similar to file compression, generating a sequence of copy and insert instructions [6] [2].
Reference: [11] <author> Polstra, J. </author> <title> Program source for CVSup. </title> <address> ftp://ftp.cvsup.freebsd.org/pub/CVSup, </address> <year> 1996. </year>
Reference-contexts: It should not be necessary to augment the operation of PRCS with such programs as rsync [16] or CVSup <ref> [11] </ref>, a distribution protocol for CVS [1]. * Network communication must be efficient, optimized for the particular problem, and secure. The above requirements suggest several implementation features, which will be discussed in the next section. When available, clients will use local disk to cache data.
Reference: [12] <author> Rivest, R. </author> <title> RFC 1321: The MD5 message-digest algorithm, </title> <month> Apr. </month> <year> 1992. </year> <title> Status: INFORMATIONAL. </title>
Reference-contexts: The prcs-project component of file-name serves only to group files with their project. The unique-name component serves to group files related by content. All files with the same values of prcs-project and unique-name are treated as related, much like all versions in an RCS archive. The MD5 <ref> [12] </ref> checksum serves to distinguish variants of the same file &lt;prcs-project, unique-name&gt; group. Though file-name contains no sequence number, each server maintains its own, internal record of the order in which each md5-checksum variant was created.
Reference: [13] <author> Salz, R. InterNetNews: </author> <title> Usenet transport for Internet sites. </title> <booktitle> In Proceedings of the Summer 1992 USENIX Conference: </booktitle> <address> June 8-12, 1992, San Antonio, Texas, USA (Berkeley, CA, USA, </address> <month> Summer </month> <year> 1992), </year> <editor> USENIX Association, Ed., </editor> <booktitle> USENIX, </booktitle> <pages> pp. 93-98. </pages>
Reference-contexts: This network of PRCS servers provides a distributed, replicant file repository functionality which supports the following, abstract operations: get (file, branch-name) 9 put (file, branch-name) commit () Though this functionality is could be provided on top of existing NNTP implementations such as INN <ref> [13] </ref>, the effort required to implement the necessary modifications seems as great as the work required to adhere to existing standards. This distribution network is managed separately from and, indeed, unrelated to the semantics of PRCS.
Reference: [14] <author> Schneier, B. </author> <title> Applied Cryptography: Protocols, Algorithms, and Source Code in C, 2 ed. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1996. </year>
Reference-contexts: Rather than use the proposed certificate authority infrastructure that comes along with SSL (and seems like quite a lot of baggage), certificate authority will be assumed by each individual server. Authorized users will register a message digest (such as SHA-1 <ref> [14] </ref>) of their certificate with the repository administrator. Only connections with certificate digests registered with the repository will be accepted. 6 Network Ancestry Since branches are now capable of being available at one site and not another, care must be taken to insure that ancestry relations are properly preserved.
Reference: [15] <author> Tichy, W. F. RCS: </author> <title> A system for version control. </title> <journal> Software|Practice and Experience 15, </journal> <month> 7 (July </month> <year> 1985), </year> <pages> 637-654. </pages>
Reference-contexts: Figure 2 illustrates an illegal configuration, in which a user 4 has merged a local branch L against two network branches M and N . The common ancestor of M:4 and N:4 is L:3, and therefore cannot be admitted. 5 7 Replacing RCS There are three problems with RCS <ref> [15] </ref>, and as a result, it will no longer be used as a back-end for the efficient, versioned storage of files. The first, a pragmatic issue, is that RCS is only available as executable programs, not as a library. This produces slow and inelegant code.
Reference: [16] <author> Tridgell, A., and Mackerras, P. </author> <title> The Rsync algorithm. </title> <type> Tech. Rep. </type> <institution> TR-CS-96-05, The Australian National University, </institution> <month> June </month> <year> 1996. </year> <month> 12 </month>
Reference-contexts: It should not be necessary to augment the operation of PRCS with such programs as rsync <ref> [16] </ref> or CVSup [11], a distribution protocol for CVS [1]. * Network communication must be efficient, optimized for the particular problem, and secure. The above requirements suggest several implementation features, which will be discussed in the next section. When available, clients will use local disk to cache data.
References-found: 16

