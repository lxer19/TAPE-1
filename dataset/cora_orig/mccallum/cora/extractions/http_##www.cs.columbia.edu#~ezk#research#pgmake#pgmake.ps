URL: http://www.cs.columbia.edu/~ezk/research/pgmake/pgmake.ps
Refering-URL: http://www.cs.columbia.edu/~ezk/research/index.html
Root-URL: http://www.cs.columbia.edu
Title: PGMAKE: A Portable Distributed Make System  
Author: Andrew Lih and Erez Zadok 
Note: EXTENDED ABSTRACT  
Affiliation: Computer Science Department, Columbia University  
Abstract: We describe pgmake, which extends the GNU project's make utility to support distributed job execution using the Parallel Virtual Machine (PVM) package from Oak Ridge National Laboratory. These two packages were chosen because of their high level of portability to different architectures, free source code distribution policy and availability to the public. Using medium-sized farms of modest performing workstations, our system has achieved software build times faster than expensive high-speed uni- and multiprocessors. The highly portable code addditions make this implementation easy to port among various platforms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. H. </author> <booktitle> Baalbergen The Design and Implementation of Parallel Make USENIX Computing Systems, Spring 1988, </booktitle> <volume> Volume 1, Number 2, </volume> <pages> pages 135-158. </pages>
Reference-contexts: As a result, many potentially useful CPU cycles pass by unutilized. Several projects have attempted to extend make to utilize these distributed computational resources. However, most of efforts are fairly non-portable, either because they are operating system dependent, rely on specialized transport protocols <ref> [1] </ref>, or require rewriting of configuration files. pgmake consists solely of modifications to the job distribution mechanism within GNU make, and provides the exact same operational semantics with which users of GNu make are already familiar. 2 Background Providing parallel job execution in make is not a new concept.
Reference: [2] <author> A. </author> <title> de Boor Customs A Load Balancing System U.C. </title> <institution> Berkeley, Computer Science 262, </institution> <note> Final Project Paper, Fall 1987. </note>
Reference: [3] <author> A. </author> <title> de Boor Pmake A Parallel Make U.C. </title> <institution> Berkeley, Computer Science 262, </institution> <note> Final Project Paper, Fall 1987. </note>
Reference: [4] <author> S. Feldman. </author> <title> Make A Program for Maintaining Computer Programs. </title> <journal> Software-Practice and Experience, </journal> <pages> pages 255-265, </pages> <month> April </month> <year> 1979. </year>
Reference-contexts: 1 Introduction The make utility was written by Stu Feldman <ref> [4] </ref> in the mid 1970's to automate the process of target generation based on modification of dependency files. Since that time, enhancements to make have been few in number, and limited to rule specification language enhancements.
Reference: [5] <author> G. Fowler. </author> <title> The Fourth Generation Make. </title> <booktitle> Proceedings of the 1985 Summer USENIX Conference, </booktitle> <pages> pages 159-174, </pages> <month> June </month> <year> 1985. </year>
Reference: [6] <author> D. </author> <title> Mills Network Time Protocol (Version 3) Specification, Implementation and Analysis. </title> <type> RFC 1305, </type> <institution> IETF Network Working Group, </institution> <month> March </month> <year> 1992. </year>
Reference: [7] <author> J. Pendry and N. Williams. </author> <title> Amd The 4.4 BSD Automounter. </title> <institution> Imperial College of Science, Technology, and Medicine, </institution> <address> London, 5.3 alpha edition, </address> <month> March </month> <year> 1991. </year>
Reference: [8] <author> E. S. Roberts and J. R. Ellis Parmake and Dp: </author> <title> Experience with a distributed, </title> <booktitle> parallel implementation of make Proceedings 2nd Workshop on Large-Grained Parallelism, </booktitle> <pages> pages 74-76, </pages> <institution> Carnegie Mellon University, </institution> <month> November </month> <year> 1987. </year>
Reference-contexts: Nmake achieves parallelism by issuing commands to a shell co-process.[5] Other make systems with specialized transport protocols include Carnegie-Mellon University parmake with dp <ref> [8] </ref> and Adam de Boor's pmake with Customs.[2, 3] GNU Make. GNU gmake, written by Richard Stallman and Roland McGrath at the Free Software Foundation, was developed as part of the GNU Project to provide free tools familiar to UNIX users.
Reference: [9] <author> R. Sandberg et al. </author> <title> Design and Implementation of the Sun Network Filesystem. </title> <booktitle> In Proc. 1985 Summer USENIX Conf., </booktitle> <pages> pages 119-130, </pages> <month> June </month> <year> 1985. </year>
Reference-contexts: In a networked environment, it is important to be able to "root" the remote execution unit in the correct directory before issuing commands. This brings up the problem of uniform global naming scheme for file hierarchies. The most widely used networked filesystem, ONC-NFS from Sun Microsystems <ref> [9] </ref>, does not enforce a global namespace for filesystems, which presents a problem in our model.
Reference: [10] <author> R. M. Stallman and R. </author> <title> McGrath GNU Make: A Program for Directing Recompilation Free Software Foundation, </title> <note> Version 3.63, </note> <month> January </month> <year> 1993. </year>
Reference: [11] <author> V. S. </author> <title> Sunderam PVM: A Framework for Parallel Distributed Computing Concurrency: </title> <journal> Practice & Experience, </journal> <pages> pages 315-339, </pages> <month> December </month> <year> 1990. </year> <month> 5 </month>
Reference-contexts: Gmake provides a -j N option, where N defines the number of jobs to run on the same host.[10] PVM. PVM, Parallel Virtual Machine, was developed at Oak Ridge National Laboratory in conjunction with researchers at the University of Tennessee, Carnegie Mellon University and Emory University <ref> [11] </ref>. The PVM software package "allows heterogenous networks of parallel and serial computers to appear as one concurrent computational resource." Machines defined within the virtual machine run a daemon called pvmd, which is available to spawn tasks on behalf of the user.
References-found: 11

