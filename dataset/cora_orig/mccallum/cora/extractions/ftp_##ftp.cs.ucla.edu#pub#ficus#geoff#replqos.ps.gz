URL: ftp://ftp.cs.ucla.edu/pub/ficus/geoff/replqos.ps.gz
Refering-URL: http://ficus-www.cs.ucla.edu/project-members/geoff/pubs.html
Root-URL: http://www.cs.ucla.edu
Title: Problems in Detecting Quality of Service in Optimistically Replicated Systems  
Author: Geoffrey H. Kuenning Richard G. Guy Gerald J. Popek Peter L. Reiher An-I Wang 
Date: May 29, 1998  
Abstract: Optimistic replication has become an important tool in modern systems, allowing both read-only and read-write object accesses to continue even in the face of network outages and disconnected mobile computing. The quality of service delivered to a user by an optimistic system has traditionally been measured in terms of the rate of conflicting updates. We show that this measure does not accurately assess the user's requirements, and propose new criteria for evaluating optimistically replicated systems.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Heidemann, A. Goel, and G. Popek. </author> <title> Defining and measuring conflicts in optimistic replication. </title> <type> Technical Report UCLA-CSD-950033, </type> <institution> University of California, </institution> <address> Los Angeles, </address> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: the optimizations done in most practical systems, in which multiple changes to the same object are compressed into a single update to save time and space during reconciliation [3, 5, 6].) A second drawback with conflict counts is the difficulty of measuring conflicts in systems with more than two replicas <ref> [1] </ref>. We have found that the number of measured conflicts can depend on the pattern of both updates and reconciliations. As a simple example, consider four replicas of a single object. Replicas 1 and 3 receive independent updates without any intervening communication, creating a conflict.
Reference: [2] <author> M. Herlihy. </author> <title> Optimistic concurrency control for abstract data types. </title> <booktitle> In Proceedings of the Fifth Annual Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <month> Aug. </month> <year> 1986. </year>
Reference-contexts: 1 Introduction In large-scale distributed systems, data replication is a useful technique for improving the accessibility of information and surviving the unreliability of communication networks. Optimistic replication <ref> [2] </ref> trades off consistency against availability, allowing updates to take place even in the presence of communication failures at a cost of sometimes violating single-copy serializability.
Reference: [3] <author> L. B. Huston and P. Honeyman. </author> <title> Peephole log optimization. </title> <booktitle> In Proceedings of the Workshop on Mobile Computing Systems and Applications 1994, </booktitle> <address> Santa Cruz, CA, </address> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: limit, if reconciliation never occurs, no conflicts will be detected regardless of the degree of concurrent updates! (This effect is exacerbated by the optimizations done in most practical systems, in which multiple changes to the same object are compressed into a single update to save time and space during reconciliation <ref> [3, 5, 6] </ref>.) A second drawback with conflict counts is the difficulty of measuring conflicts in systems with more than two replicas [1]. We have found that the number of measured conflicts can depend on the pattern of both updates and reconciliations.
Reference: [4] <author> P. Kumar and M. Satyanarayanan. </author> <title> Flexible and safe resolution of file conflicts. </title> <booktitle> In Proceedings of the USENIX Conference Proceedings, </booktitle> <address> New Orleans, LA, </address> <month> Jan. </month> <year> 1995. </year> <booktitle> USENIX. </booktitle>
Reference-contexts: In most designs, conflicts are detected during the reconciliation process. Conflicts are undesirable because they generally require automated or manual mechanisms to resolve the difficulty <ref> [4, 7] </ref>. The conflict count quantifies the QoS of a replicated system by counting the number of conflicts observed during a measurement period. The conflict rate expresses the same information as a ratio of the conflict count to time or total operations.
Reference: [5] <author> B. D. Noble and M. Satyanarayanan. </author> <title> An empirical study of a highly available file system. </title> <booktitle> In Proceedings of the 1994 ACM SIGMETRICS Conference on Measurement and Modeling of Computer Systems, </booktitle> <address> Nashville, TN, </address> <month> May </month> <year> 1994. </year> <note> Also available as technical report CMU-CS-94-120, </note> <institution> School of Computer Science, Carnegie Mellon University. </institution>
Reference-contexts: of update quality, in particular those that have been used in past studies of replicated systems, have drawbacks that make them imperfect for characterizing and comparing replication methods. 2.1 Conflict Count The most popular measure of the success of a replicated system has been the conflict count or conflict rate <ref> [5, 6] </ref>. To understand this metric, we must first briefly discuss the structure of practical optimistic replicated systems. Optimistic replicated system allow updates at any node, at any time. Thus, situations will sometimes arise in which some replicas are aware of new data before others. <p> limit, if reconciliation never occurs, no conflicts will be detected regardless of the degree of concurrent updates! (This effect is exacerbated by the optimizations done in most practical systems, in which multiple changes to the same object are compressed into a single update to save time and space during reconciliation <ref> [3, 5, 6] </ref>.) A second drawback with conflict counts is the difficulty of measuring conflicts in systems with more than two replicas [1]. We have found that the number of measured conflicts can depend on the pattern of both updates and reconciliations.
Reference: [6] <author> T. W. Page, R. G. Guy, J. S. Heidemann, D. Ratner, P. Reiher, A. Goel, G. H. Kuenning, and G. J. Popek. </author> <title> Perspectives on optimistically replicated peer-to-peer filing. </title> <journal> Software|Practice and Experience, </journal> <volume> 28(2) </volume> <pages> 155-180, </pages> <month> Feb. </month> <year> 1998. </year>
Reference-contexts: of update quality, in particular those that have been used in past studies of replicated systems, have drawbacks that make them imperfect for characterizing and comparing replication methods. 2.1 Conflict Count The most popular measure of the success of a replicated system has been the conflict count or conflict rate <ref> [5, 6] </ref>. To understand this metric, we must first briefly discuss the structure of practical optimistic replicated systems. Optimistic replicated system allow updates at any node, at any time. Thus, situations will sometimes arise in which some replicas are aware of new data before others. <p> limit, if reconciliation never occurs, no conflicts will be detected regardless of the degree of concurrent updates! (This effect is exacerbated by the optimizations done in most practical systems, in which multiple changes to the same object are compressed into a single update to save time and space during reconciliation <ref> [3, 5, 6] </ref>.) A second drawback with conflict counts is the difficulty of measuring conflicts in systems with more than two replicas [1]. We have found that the number of measured conflicts can depend on the pattern of both updates and reconciliations.
Reference: [7] <author> P. Reiher, J. S. Heidemann, D. Ratner, G. Skinner, and G. J. Popek. </author> <title> Resolving file conflicts in the Ficus file system. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 183-195. </pages> <institution> University of California, Los Angeles, USENIX, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: In most designs, conflicts are detected during the reconciliation process. Conflicts are undesirable because they generally require automated or manual mechanisms to resolve the difficulty <ref> [4, 7] </ref>. The conflict count quantifies the QoS of a replicated system by counting the number of conflicts observed during a measurement period. The conflict rate expresses the same information as a ratio of the conflict count to time or total operations.
Reference: [8] <author> A. A. Wang, P. L. Reiher, and R. Bagrodia. </author> <title> A simulation framework for evaluating replicated filing environments. </title> <type> Technical Report CSD-970018, </type> <institution> University of California, </institution> <address> Los Angeles, </address> <month> June </month> <year> 1997. </year> <month> 4 </month>
Reference-contexts: A system with few conflicts is desirable because it requires little human intervention and usually adheres to single-copy semantics. A system with a high conflict rate, by contrast, is troublesome to the user. However, our research has uncovered serious drawbacks in this metric <ref> [8] </ref>. Since conflicts are detected only during the reconciliation process, the frequency of reconciliation has a direct effect on the number of conflicts observed.
References-found: 8

