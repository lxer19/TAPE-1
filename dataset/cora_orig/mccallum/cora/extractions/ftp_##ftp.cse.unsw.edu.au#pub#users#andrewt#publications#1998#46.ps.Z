URL: ftp://ftp.cse.unsw.edu.au/pub/users/andrewt/publications/1998/46.ps.Z
Refering-URL: http://www.cse.unsw.edu.au/school/publications/1998/SCSE_publications.html
Root-URL: http://www.cse.unsw.edu.au
Title: Updating Logic Programs  
Author: Yan Zhang and Norman N. Foo 
Abstract: It is well known that rule-based knowledge bases are usually realized by logic programs. An update has to be performed to the current knowledge base if some new information occurs. In many applications associated with dynamic domains, however, such new information may occur not only as a set of simple facts but also a set of rules. In this paper, we view knowledge bases as extended logic programs [1] such that defeasible knowledge can be explicitly represented. We then consider the problem of how to update an extended logic program with another extended logic program while the former program represents the current knowledge base and the later one represents the new information that should be added to the current knowledge base. We show how the concept of priority associated with logic programs is employed to achieve our purpose. We also investigate semantical properties of logic program updates in detail. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Gelfond and V. Lifschitz, </author> <title> Classical negation in logic programs and disjunctive databases. </title> <journal> New Generation Computing, </journal> <month> 9 </month> <year> (1991) </year> <month> 365-386. </month>
Reference-contexts: In this paper, we view a knowledge base as an extended logic program <ref> [1] </ref> such that defeasible knowledge can be explicitly represented. <p> If we adopt Gelfond and Lifschitz's answer set semantics for extended logic programs <ref> [1] </ref>, it is clear that implicit facts Access (A; F 1 ), Access (B; F 1 ) and :Access (B; F 2 ) are actually derivable from 0 . <p> Finally, section 5 concludes this paper with some remarks. 2 PRIORITIZED LOGIC PROGRAMS In this section we introduce prioritized logic programs (PLPs) proposed by Zhang and Foo recently [6]. The language L of PLPs is a language of extended logic programs <ref> [1] </ref> with the following augments: Names: N; N 1 ; N 2 ; . A strict partial ordering (i.e. antireflexive, antisymmetric and transitive) &lt; on names. A naming function N , which maps a rule to a name.
Reference: [2] <author> A. Guessoum and J.W. Lloyd, </author> <title> Updating knowledge bases II. </title> <journal> New Generation Computing, </journal> <month> 10 </month> <year> (1991) </year> <month> 73-100. </month>
Reference-contexts: Such knowledge bases, in principle, consist of two components: facts and rules. Traditionally, facts express the current state of the knowledge base and are usually changeable, while rules express constraints about the domain and hence are usually unchangeable <ref> [2, 3] </ref>. However, in many applications associated with dynamic domains, a knowledge base has to be updated not only because some new facts occur, but also because some old rules are no longer suitable to characterize new domain constraints (e.g. the domain is evolved). <p> Clearly, our logic program update is different from those update formulations developed within logic program frameworks previously (e.g. <ref> [3, 2] </ref>), in which an update was simply considered as an insertion/deletion of an atom to/from a logic program. The logic program update is also different from the rule-based update first proposed by Marek and Truszcznski and generalized by the authors recently [5].
Reference: [3] <author> A.C. Kakas and P. Mancarella, </author> <title> Database updates through abduction. </title> <booktitle> In Proceedings of the 16th VLDB Conference, </booktitle> <pages> pp 650-661, </pages> <year> 1990. </year>
Reference-contexts: Such knowledge bases, in principle, consist of two components: facts and rules. Traditionally, facts express the current state of the knowledge base and are usually changeable, while rules express constraints about the domain and hence are usually unchangeable <ref> [2, 3] </ref>. However, in many applications associated with dynamic domains, a knowledge base has to be updated not only because some new facts occur, but also because some old rules are no longer suitable to characterize new domain constraints (e.g. the domain is evolved). <p> Clearly, our logic program update is different from those update formulations developed within logic program frameworks previously (e.g. <ref> [3, 2] </ref>), in which an update was simply considered as an insertion/deletion of an atom to/from a logic program. The logic program update is also different from the rule-based update first proposed by Marek and Truszcznski and generalized by the authors recently [5].
Reference: [4] <author> L.Y. Yuan and J.H. </author> <title> You, Coherence approach to logic program revision. </title> <journal> IEEE Transaction on Knowledge and Data Engineering (to appear). </journal>
Reference: [5] <author> Y. Zhang and N.Y. Foo, </author> <title> Towards generalized rule-based updates. </title> <booktitle> In Proceedings of the 15th International Joint Conference on Artificial Intelligence (IJCAI'97), </booktitle> <pages> pp 82-88. </pages> <publisher> Morgan Kaufmann Publishers Inc., </publisher> <year> 1997. </year>
Reference-contexts: The logic program update is also different from the rule-based update first proposed by Marek and Truszcznski and generalized by the authors recently <ref> [5] </ref>. Basically, the rule-based update addresses the problem of how to update a knowledge base (i.e. a set of ground literals) in terms of a logic program such that the resulting knowledge base satisfies each rule of the logic program. However, we observed that the authors' generalized rule-based update [5] is <p> recently <ref> [5] </ref>. Basically, the rule-based update addresses the problem of how to update a knowledge base (i.e. a set of ground literals) in terms of a logic program such that the resulting knowledge base satisfies each rule of the logic program. However, we observed that the authors' generalized rule-based update [5] is actually a special case of our current logic program update.
Reference: [6] <author> Y. Zhang and N.Y. Foo, </author> <title> Answer sets for prioritized logic programs. </title> <booktitle> In Proceedings of the 1997 International Logic Programming Symposium (ILPS'97), </booktitle> <pages> pp 69-83. </pages> <publisher> MIT Press, </publisher> <year> 1997. </year>
Reference-contexts: Finally, section 5 concludes this paper with some remarks. 2 PRIORITIZED LOGIC PROGRAMS In this section we introduce prioritized logic programs (PLPs) proposed by Zhang and Foo recently <ref> [6] </ref>. The language L of PLPs is a language of extended logic programs [1] with the following augments: Names: N; N 1 ; N 2 ; . A strict partial ordering (i.e. antireflexive, antisymmetric and transitive) &lt; on names.
Reference: [7] <author> Y. Zhang and N.Y. Foo, </author> <title> Prioritized logic programming: Semantics, computations and applications. </title> <type> Manuscript, </type> <month> August </month> <year> 1998. </year> <title> Logic Programming 407 Y. Zhang and N.Y. </title> <type> Foo </type>
Reference-contexts: Finally, we can see that the computation of logic program update is based on computations of the answer set and reduct of corresponding prioritized logic programs. This issue has been investigated in detail in authors' another paper <ref> [7] </ref>.
References-found: 7

