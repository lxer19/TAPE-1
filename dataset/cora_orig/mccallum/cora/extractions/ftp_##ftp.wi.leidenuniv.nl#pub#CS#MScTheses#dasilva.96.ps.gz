URL: ftp://ftp.wi.leidenuniv.nl/pub/CS/MScTheses/dasilva.96.ps.gz
Refering-URL: http://www.wi.leidenuniv.nl/MScThesis/IR96-40.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Go and Genetic Programming Playing Go with Filter Functions  
Author: S.F. da Silva 
Date: November 21, 1996  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Christopher D. Rosin and Richard K. </author> <title> Belew,Methods for Competitive Co-evolution: Finding Opponents Worth Beating, </title> <booktitle> in Proceedings of the Sixth International Conference on Genetic Algorithms. L.J. Eshelman (ed.), </booktitle> <pages> pp. 373-380, </pages> <year> 1995 </year>
Reference-contexts: I have been primarily looking at the 7 fi 7 variant of go so as to be able to compare my results with other efforts in this direction, especially those of C.D. Rosin and R.K. Belew whose studies on co-evolution in genetic algorithms <ref> [1] </ref> included the game go. Another reason I used such a small board is because it makes the runs of the genetic program faster. <p> Wally in different ways once as usual, once by giving Wally the go boards rotated by 90 ffi , etc. - would probably be better. * My fitness functions, best-so-far and tournament evaluation, didn't work, but it would be worth a try using co-evolution as described by Rosin and Belew <ref> [1] </ref> because they used a scheme in which two strategies, one for black and one for white, are co-evolved. Another advantage of this method is the way fitness is assigned: the S-expressions get better fitnesses if they can beat many different opponents or opponents that no-one else can beat. <p> Furthermore between properties you can put as many white-characters as you like. I will explain the semantics of the grammar with the help of an example: (;PB [Wally] PW [individual 1] GM <ref> [1] </ref> SZ [19] KM [5.5] ;B [pd] ; W [dp] ; B [dd] ;W [pp] C [a standard opening]) 39 The PB and PW fields contain the names of the black player and the white player respectively. <p> C contains the comments for the node. The next example shows how good and bad moves can be marked in a game: (;SZ [13] GM <ref> [1] </ref> AB [jd] AW [dd][jj] CR [ek][gc] RG [ek][ma]) Attributes AB and AW tell you to add black and white stones respectively to the board at the coordinates given in the lists, no matter whether there are already stones there or not.
Reference: [2] <author> Koen van der Hauw, </author> <title> Evaluating and Improving Steady State Evolutionary Algorithms on Constraint Satisfaction Problems, </title> <type> Master Thesis, </type> <institution> IR-96-21, </institution> <month> July </month> <year> 1996. </year>
Reference: [3] <author> John Koza, </author> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection, </title> <publisher> The MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: maximum score against. (Maybe I should point out here that Wally is a computer go program and the Wally method is a way of assigning fitness values to S-expressions by letting them play Wally.) 5.4 Explanation of the control parameters Most parameters are described thoroughly in Koza's book Genetic Programming <ref> [3] </ref> and are standard so I won't go into these here, however some less conventional parameters may need some explaining. <p> I used one selection method provided by lil-gp [9] but not mentioned in <ref> [3] </ref> and another I made myself by changing that selection method of lil-gp: * method "best" which takes the best individual of that generation the first time one is selected for reproduction or crossover or mutation; the second time it takes the second best, etc. * method "nth" which takes the
Reference: [4] <author> Martin Muller, </author> <title> Computer Go Test Collection, </title> <address> http://nobi.ethz.ch/martin/special.html </address>
Reference-contexts: Somewhere on WWW I found a collection of test-sets <ref> [4] </ref>. These were SGF-files 3 with special notations for good and bad moves.
Reference: [5] <author> Martin Muller, </author> <title> Smart Game File Format, </title> <address> http://nobi.ethz.ch/martin/sgfspec.html </address>
Reference-contexts: The half point is to prevent ties. B SGF-files SGF stands for Smart Game File Format. It is meant to be a standard file format to exchange machine-readable games, problems, and opening libraries. A more complete 38 ffiffiffiffiffi fi a fi fi description is given by Martin Muller <ref> [5] </ref>. I will give the syntax and semantics of the subset of SGF that I have used. I have used SGF in two ways. One to save the games played by the GP and the other to read test configurations for the GP to play.
Reference: [6] <institution> My Go Teacher,ftp://ftp.pasteur.fr/pub/Go/mgt/* </institution>
Reference-contexts: One to save the games played by the GP and the other to read test configurations for the GP to play. I have used the SGF format because there are many programs available that support it (for go at least), one of which is MGT <ref> [6] </ref>, so I didn't have to write an application to view the games. Below is the syntax of the SGF files in BNF form.
Reference: [7] <author> Bill Newman (newman@tcgould.tn.cornell.edu), wally.c, </author> <month> ftp://ftp.pasteur.fr/pub/Go/comp/wally.sh.Z </month>
Reference-contexts: I used this method anyway because it is fast. It takes about as many games as there are individuals in the pool. 4.2.2 The Wally method Another training method I used was letting each individual in the pool play the program Wally <ref> [7] </ref>. The score against Wally was used as the fitness. The advantage of this method is that, in the beginning, the pressure from the fitness is strong. <p> I used lil-gp [9] for the kernel and my own fitness function made partly from wally.c <ref> [7] </ref>. 5.1 The function set The function set that I used to construct the S-expressions is: f if black ponnuki, f if white ponnuki, f if eq, f if weaker, f near edge, f is type, f add, f invert, I will explain each function. f if black ponnuki This function
Reference: [8] <editor> Hans-Paul Schwefel, </editor> <title> Evolution and Optimum Seeking, </title> <publisher> John Wiley & Sons,inc., </publisher> <year> 1995 </year>
Reference-contexts: Selection method for mutation fitness pro portionate (roulette wheel selection) Type of fitness used for selection Adjusted fitness The results Experiment Fitness value Mutation only 85.20 (1 + 1) with out-of-time score 0 87.30 (1 + 1) with out-of-time score 49 84.06 4 For more information on Evolutionary Strategies see <ref> [8] </ref>. 17 Looking at some of the games in this experiment I noticed that those that ended in a tie were somewhat strange: the individual had found a flaw in Wally so that the same sequence was repeated infinitely.
Reference: [9] <author> Doug Zongker (zongker@isl.cps.msu.edu), lil-gp 1.0, </author> <note> http://isl.cps.msu.edu/GA/software/lil-gp/ 41 </note>
Reference-contexts: So, in the end, I didn't even try this method. 5 The Genetic Program The GP consists of a function set, a selection and reproduction part (the kernel) and an evaluation part (the fitness function). I used lil-gp <ref> [9] </ref> for the kernel and my own fitness function made partly from wally.c [7]. 5.1 The function set The function set that I used to construct the S-expressions is: f if black ponnuki, f if white ponnuki, f if eq, f if weaker, f near edge, f is type, f add, <p> I used one selection method provided by lil-gp <ref> [9] </ref> but not mentioned in [3] and another I made myself by changing that selection method of lil-gp: * method "best" which takes the best individual of that generation the first time one is selected for reproduction or crossover or mutation; the second time it takes the second best, etc. *
References-found: 9

