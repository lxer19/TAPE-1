URL: ftp://ftp.cs.rochester.edu/pub/papers/theory/97.tr666.Robust_reductions.ps.gz
Refering-URL: http://www.cs.rochester.edu/trs/theory-trs.html
Root-URL: 
Title: Robust Reductions  
Author: Jin-Yi Cai Lane A. Hemaspaandra Gerd Wechsung 
Address: Buffalo, NY 14260, USA  Rochester, NY 14627, USA  07740 Jena, Germany  
Affiliation: Department of Computer Science State University of New York at Buffalo  Department of Computer Science University of Rochester  Institut fur Informatik Friedrich-Schiller-Universitat Jena  
Abstract: Univ. of Rochester, Dept. of Computer Science, Technical Report 666 December 10, 1997 Abstract We continue the study of robust reductions initiated by Gavalda and Balcazar. In particular, a 1991 paper of Gavalda and Balcazar [GB91] claimed an optimal separation between the power of robust and nondeterministic strong reductions. Unfortunately, their proof is invalid. We re-establish their theorem. Generalizing robust reductions, we note that robustly strong reductions are built from two restrictions, robust underproductivity and robust overproductivity, both of which have been separately studied before in other contexts. By systematically analyzing the power of these reductions, we explore the extent to which each restriction weakens the power of reductions. We show that one of these reductions yields a new, strong form of the Karp-Lipton Theorem. 
Abstract-found: 1
Intro-found: 1
Reference: [ABHH93] <author> E. Allender, R. Beigel, U. Hertrampf, and S. Homer. </author> <title> Almost-everywhere complexity hierarchies for nondeterministic time. </title> <journal> Theoretical Computer Science, </journal> <volume> 115 </volume> <pages> 225-241, </pages> <year> 1993. </year>
Reference-contexts: N D is said to be underproductive if, for each string x, N D (x) is underproductive. That is, L (N D ) " L rej (N D ) = ;. Underproductive machines were introduced by Buntrock [Bun89]. Allender et al. <ref> [ABHH93] </ref> have shown underproductivity to be very useful in the study of almost-everywhere complexity hierarchies for nondeterministic time classes. A computation N D (x) is called overproductive if out N D (x) 6= f?g.
Reference: [AFK89] <author> M. Abadi, J. Feigenbaum, and J. Kilian. </author> <title> On hiding information from an oracle. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 39 </volume> <pages> 21-50, </pages> <year> 1989. </year> <month> 22 </month>
Reference-contexts: Theorem 5.1 1. [KL80] NP R p T (SPARSE) ! PH p 2. (implicit in [KL80], see [LS86] and the discussion in [HHN + 95]; explicit in <ref> [AFK89, Kam91] </ref>) NP R RS T (SPARSE) ! PH p 3. [KW95] NP R RS T (SPARSE) ! PH ZPP NP : 4. [KS97] If A has self-computable witnesses and A 2 (NP B " coNP B )=poly, then ZPP NP A .
Reference: [Bei89] <author> R. Beigel. </author> <title> On the relativized power of additional accepting paths. </title> <booktitle> In Proceedings of the 4th Structure in Complexity Theory Conference, </booktitle> <pages> pages 216-224. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> June </month> <year> 1989. </year>
Reference: [Bun89] <author> G. Buntrock. Logarithmisch Platzbeschrankte Simulationen. </author> <type> PhD thesis, </type> <address> Tech-nische Universitat Berlin, Berlin, Germany, </address> <year> 1989. </year>
Reference-contexts: N D is said to be underproductive if, for each string x, N D (x) is underproductive. That is, L (N D ) " L rej (N D ) = ;. Underproductive machines were introduced by Buntrock <ref> [Bun89] </ref>. Allender et al. [ABHH93] have shown underproductivity to be very useful in the study of almost-everywhere complexity hierarchies for nondeterministic time classes. A computation N D (x) is called overproductive if out N D (x) 6= f?g.
Reference: [CGH + 89] <author> J. Cai, T. Gundermann, J. Hartmanis, L. Hemachandra, V. Sewelson, K. Wag-ner, and G. Wechsung. </author> <title> The boolean hierarchy II: </title> <journal> Applications. SIAM Journal on Computing, </journal> <volume> 18(1) </volume> <pages> 95-111, </pages> <year> 1989. </year>
Reference: [CS93] <author> P. Crescenzi and R. Silvestri. </author> <title> Sperner's lemma and robust machines. </title> <booktitle> In Proceedings of the 8th Structure in Complexity Theory Conference, </booktitle> <pages> pages 194-199. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1993. </year>
Reference-contexts: Crescenzi and Silvestri <ref> [CS93] </ref> show via Sperner's Lemma that Theorem 2.5 fails when the sparseness condition is removed, and their proof approach will be of use in this paper. It is known that SN reductions and RS reductions have nonuniform characterizations. <p> Not only is the proof of Theorem 4.3 not valid for O T , but indeed the statement of Theorem 4.5 with U T replaced by O T is outright false. This follows as a corollary to a proof of Crescenzi and Silvestri <ref> [CS93, Theorem 3.1] </ref> in which they give a very nice application of Sperner's Lemma. Theorem 4.6 (9A; E)[A O T E ^ A 62 P SATE ]. 14 Proof The proof follows from a close inspection of the proof of [CS93, Theorem 3.1]. <p> as a corollary to a proof of Crescenzi and Silvestri <ref> [CS93, Theorem 3.1] </ref> in which they give a very nice application of Sperner's Lemma. Theorem 4.6 (9A; E)[A O T E ^ A 62 P SATE ]. 14 Proof The proof follows from a close inspection of the proof of [CS93, Theorem 3.1]. Crescenzi and Silvestri prove the existence of a fl -spanning pair (N 0 ; N 1 ) of machines and the existence of an oracle E with the property that (8 0-1 valued function f 2 FP SATE )(9x)[x 62 L (N E f (x) )]. <p> The oracle E is defined by diagonalization such that for the ith deterministic polynomial-time oracle machine T i and a suitably chosen n i it holds that (see <ref> [CS93] </ref> for more details regarding setting the s j 's): 1. T SATE i (0 n i ) = 1 and E " l s n i encodes a c-admissible coloring of a standard trian gulation of suitably large size s n i , or 2. <p> The crucial point is that E is in fact constructed in such a way that it does not encode colorings that both contain a three-colored triangle and are non-c-admissible. The fact that such an E can be constructed follows from <ref> [CS93, Remark 1] </ref>. This has the important consequence that N with oracle E is strong. Thus, defining A = L (N E ), we have A O T E via N , since N is robustly overproductive. Finally, we observe that A 62 P SATE . <p> This contradiction shows A 62 P SATE . As mentioned earlier, Theorem 4.6 follows from the proof of <ref> [CS93, Theorem 3.1] </ref>, but not from the theorem itself. The preceding two theorems have the consequence of showing a deep asymmetry between O T .
Reference: [GB91] <author> R. Gavalda and J. Balcazar. </author> <title> Strong and robustly strong polynomial time re-ducibilities to sparse sets. </title> <journal> Theoretical Computer Science, </journal> <volume> 88(1) </volume> <pages> 1-14, </pages> <year> 1991. </year>
Reference-contexts: In this paper, we continue the investigation of robust reductions started by Gavalda and Balcazar <ref> [GB91] </ref>. We now briefly mention one way of defining strong reduction [Sel78, Lon82] and robustly strong reduction [GB91]. Definition 2.1 provides a formal definition of the same notions in terms of concepts that are central to this paper. <p> In this paper, we continue the investigation of robust reductions started by Gavalda and Balcazar <ref> [GB91] </ref>. We now briefly mention one way of defining strong reduction [Sel78, Lon82] and robustly strong reduction [GB91]. Definition 2.1 provides a formal definition of the same notions in terms of concepts that are central to this paper. <p> This paper is concerned with the relative power of these two reductions, and with reductions whose power is intermediate between theirs. In particular, it is claimed in <ref> [GB91] </ref> that the following strong separation holds with respect to the two reductions: For every recursive set A 62 NP " coNP, there is a recursive set B such that A strong-reduces to B but A does not robustly strong-reduce to B [GB91, Theorem 11]. <p> In particular, it is claimed in [GB91] that the following strong separation holds with respect to the two reductions: For every recursive set A 62 NP " coNP, there is a recursive set B such that A strong-reduces to B but A does not robustly strong-reduce to B <ref> [GB91, Theorem 11] </ref>. Unfortunately, there is a subtle but apparently fatal error in their proof. One of the main contributions of this paper is that we re-establish their sweeping theorem. Note that 2 the zero degrees of these reducibilities are identical, namely the class NP " coNP [GB91]. <p> Unfortunately, there is a subtle but apparently fatal error in their proof. One of the main contributions of this paper is that we re-establish their sweeping theorem. Note that 2 the zero degrees of these reducibilities are identical, namely the class NP " coNP <ref> [GB91] </ref>. Thus, in a certain sense, the above claim of Gavalda and Balcazar is optimal (if it is true, as we prove it is), as if A 2 NP " coNP then A strong-reduces to every B and A also robustly strong-reduces to every B. <p> obtained by limiting the robustness to just the overproductivity or the underproductivity. 1 Definition 2.1 1. [Lon82], see also [Sel78] ("strong reductions") A SN T B if there is an NPTM N such that N B is overproductive, N B is underproductive, and A = L (N B ). 2. <ref> [GB91] </ref> ("robustly strong reductions") A RS T B if A SN T B via an NPTM N , and N is both robustly overproductive and robustly underproductive. 3. ("strong and robustly underproductive reductions" or, for short, "U-reductions") A U T B via an NPTM N that is robustly underproductive. 4. ("strong <p> However, we note that some papers use other notations, such as SN , sn T , and p;NP"coNP T . For the three other reductions we discuss, we replace the SN with a mnemonic abbreviation. For robustly strong we follow Gavalda and Balcazar <ref> [GB91] </ref> and use RS. For brevity, we use O as our abbreviation for our "strong and robustly overproductive" reductions, and we use U as our abbreviation for our "strong and robustly underproductive" reductions. 4 in particular we seek necessary conditions and sufficient conditions for such collapses. <p> It is known that SN reductions and RS reductions have nonuniform characterizations. In particular, for every reducibility b a and every class C, let R b a B]g: Gavalda and Balcazar proved the following result. Theorem 2.6 <ref> [GB91] </ref> 1. R SN T (SPARSE) = NP=poly " coNP=poly. 2. R RS T (SPARSE) = (NP " coNP)=poly. 5 We note in passing that the downward closures of the sparse sets under our two new reductions have analogous characterizations, albeit somewhat stilted ones. <p> This is Theorem 3.4. As noted in Section 1, this claim cannot be generalized to include NP " coNP since NP " coNP is the zero degree of RS T , as has been pointed out by Gavalda and Balcazar <ref> [GB91] </ref>. Theorem 3.4 was first stated in Gavalda and Balcazar's 1991 paper [GB91]. The diagonalization proof given there correctly establishes A 6 RS T B, but it fails to establish A SN T B. <p> As noted in Section 1, this claim cannot be generalized to include NP " coNP since NP " coNP is the zero degree of RS T , as has been pointed out by Gavalda and Balcazar <ref> [GB91] </ref>. Theorem 3.4 was first stated in Gavalda and Balcazar's 1991 paper [GB91]. The diagonalization proof given there correctly establishes A 6 RS T B, but it fails to establish A SN T B. <p> Thus, the condition "(i)" of <ref> [GB91, p. 6] </ref>, which is intended to guarantee A SN T B, is violated. We now turn towards the proof of Theorem 3.4. However, we first prove the following claim. <p> For such a pair, the following is known. Theorem 4.3 [HH90] If (M,N) is a robustly complementary pair of machines, then (8A)[L (M A ) 2 P SATA ]: Gavalda and Balcazar <ref> [GB91] </ref> noted that, in view of the preceding discussion, one gets as an immediate corollary the following. Corollary 4.4 [GB91] (8A; B)[A RS T B ! A 2 P SATB ]. In fact, the proof of Theorem 4.3 still works if M is an underproductive machine reducing A to B. <p> Theorem 4.3 [HH90] If (M,N) is a robustly complementary pair of machines, then (8A)[L (M A ) 2 P SATA ]: Gavalda and Balcazar <ref> [GB91] </ref> noted that, in view of the preceding discussion, one gets as an immediate corollary the following. Corollary 4.4 [GB91] (8A; B)[A RS T B ! A 2 P SATB ]. In fact, the proof of Theorem 4.3 still works if M is an underproductive machine reducing A to B. Thus, we have the following. Theorem 4.5 (8A; B)[A U T B ! A 2 P SATB ]. <p> Proof Assume P = NP and A U T B. By Theorem 4.5 we have A 2 P SATB , and because of our P = NP assumption, this means A p Theorem 4.10 strengthens in two ways the statement, noted by Gavalda and Balcazar <ref> [GB91] </ref>, that if RS T differs from p T anywhere on the recursive sets then P 6= NP. <p> However, we point out that the global-polynomial definition is exactly that of Gavalda and Balcazar <ref> [GB91] </ref>, and that part 2 of Theorem 2.6, Gavalda and Balcazar's [GB91] natural characterization of robustly strong reductions to sparse sets in terms of the complexity class (NP " coNP)=poly, seems to depend crucially on the fact that one's machines are global-polynomial. <p> However, we point out that the global-polynomial definition is exactly that of Gavalda and Balcazar <ref> [GB91] </ref>, and that part 2 of Theorem 2.6, Gavalda and Balcazar's [GB91] natural characterization of robustly strong reductions to sparse sets in terms of the complexity class (NP " coNP)=poly, seems to depend crucially on the fact that one's machines are global-polynomial.
Reference: [Gil77] <author> J. Gill. </author> <title> Computational complexity of probabilistic Turing machines. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6(4) </volume> <pages> 675-695, </pages> <year> 1977. </year>
Reference-contexts: ZPP denotes expected polynomial time <ref> [Gil77] </ref>. It is well-known that NP fi p p It is very natural to ask whether the existence of sparse hard or complete sets with respect to our new reductions would imply collapses of the polynomial hierarchy similar to those that are known to hold for p T .
Reference: [HH90] <author> J. Hartmanis and L. Hemachandra. </author> <title> Robust machines accept easy sets. </title> <journal> Theoretical Computer Science, </journal> <volume> 74(2) </volume> <pages> 217-226, </pages> <year> 1990. </year>
Reference-contexts: Proposition 2.3 p T T T T . Using different terminology, robust underproductivity (though not U T ) has been intro duced into the literature by Beigel ([Bei89], see also <ref> [HH90] </ref>), and the following theorem will be of use in the present paper. Theorem 2.4 ([Bei89], see also [HH90]) If NPTM N is robustly underproductive, then (8A)(9L 2 P SATA )[L rej (N A ) L L (N A )]: Theorem 2.4 says that if a machine is robustly underproductive, then <p> Proposition 2.3 p T T T T . Using different terminology, robust underproductivity (though not U T ) has been intro duced into the literature by Beigel ([Bei89], see also <ref> [HH90] </ref>), and the following theorem will be of use in the present paper. Theorem 2.4 ([Bei89], see also [HH90]) If NPTM N is robustly underproductive, then (8A)(9L 2 P SATA )[L rej (N A ) L L (N A )]: Theorem 2.4 says that if a machine is robustly underproductive, then for every oracle there is a relatively simple set that separates its acceptance set from its L rej <p> Using different terminology, "robust with respect to sparse sets"- overproductivity (though not O T ) has been introduced into the literature by Hartmanis and Hemachandra <ref> [HH90] </ref>, and the following theorem will be of use in the present paper. Theorem 2.5 [HH90] If NPTM N is such that for each sparse set S it holds that N S is overproductive, then for every sparse set S there exists a binary predicate b computable in FP SATS such <p> Using different terminology, "robust with respect to sparse sets"- overproductivity (though not O T ) has been introduced into the literature by Hartmanis and Hemachandra <ref> [HH90] </ref>, and the following theorem will be of use in the present paper. Theorem 2.5 [HH90] If NPTM N is such that for each sparse set S it holds that N S is overproductive, then for every sparse set S there exists a binary predicate b computable in FP SATS such that, for all x, fx j b (x)g L (N S ) and fx j <p> We say A 2 NP=poly " coNP=poly via the pair (M; N ) of NPTMs if there is a sparse set S such that A = L (M S ) and A = L (N S ). Hartmanis and Hemachandra <ref> [HH90] </ref> defined robustly fl - spanning pairs of machines (M; N ) to be pairs having the property L (M X ) [ L (N X ) = fl for every oracle X, and robustly disjoint pairs to be pairs having the property L (M X ) " L (N X <p> If M is robustly strong, we have L (M A ) = L (N A ) for every oracle A. The pair (M; N ) is what Hartmanis and Hemachandra <ref> [HH90] </ref> call a robustly complementary pair of machines. For such a pair, the following is known. Theorem 4.3 [HH90] If (M,N) is a robustly complementary pair of machines, then (8A)[L (M A ) 2 P SATA ]: Gavalda and Balcazar [GB91] noted that, in view of the preceding discussion, one gets <p> If M is robustly strong, we have L (M A ) = L (N A ) for every oracle A. The pair (M; N ) is what Hartmanis and Hemachandra <ref> [HH90] </ref> call a robustly complementary pair of machines. For such a pair, the following is known. Theorem 4.3 [HH90] If (M,N) is a robustly complementary pair of machines, then (8A)[L (M A ) 2 P SATA ]: Gavalda and Balcazar [GB91] noted that, in view of the preceding discussion, one gets as an immediate corollary the following. <p> Proof Assume P = NP and A O T B with a sparse set B. This certainly implicitly gives a robustly fl -spanning pair (N 0 ; N 1 ) of machines and, say, A = L (N B 1 ). By <ref> [HH90, Theorem 2.7] </ref>, there exists a 0-1 function b 2 FP SATB such that (8x)[x 2 L (N B b (x) )]. Since N is strong for B, the sets L (N B 0 ) and L (N B 1 ) are disjoint.
Reference: [HHN + 95] <author> L. Hemaspaandra, A. Hoene, A. Naik, M. Ogiwara, A. Selman, T. Thierauf, and J. Wang. </author> <title> Nondeterministically selective sets. </title> <journal> International Journal of Foundations of Computer Science, </journal> <volume> 6(4) </volume> <pages> 403-416, </pages> <year> 1995. </year>
Reference-contexts: A more careful analysis reveals that the same result applies under the weaker hypothesis that SAT robustly-strong-reduces to some sparse set. In fact, the latter result is simply a relativized version of the former result <ref> [HHN + 95] </ref>, though the first proofs of the latter result were direct and quite complex [AFK89,Kam91]. <p> The classic result in this direction was obtained by Karp and Lipton, and more recent research has yielded three increasingly strong extensions of their result. Theorem 5.1 1. [KL80] NP R p T (SPARSE) ! PH p 2. (implicit in [KL80], see [LS86] and the discussion in <ref> [HHN + 95] </ref>; explicit in [AFK89, Kam91]) NP R RS T (SPARSE) ! PH p 3. [KW95] NP R RS T (SPARSE) ! PH ZPP NP : 4. [KS97] If A has self-computable witnesses and A 2 (NP B " coNP B )=poly, then ZPP NP A .
Reference: [Hop81] <author> J. Hopcroft. </author> <title> Recent directions in algorithmic research. </title> <booktitle> In Proceedings 5th GI Conference on Theoretical Computer Science, </booktitle> <pages> pages 123-134. </pages> <note> Springer-Verlag Lecture Notes in Computer Science #104, </note> <year> 1981. </year>
Reference-contexts: Theorem 5.2 NP R O T (SPARSE) ! PH p 18 Proof Our proof will in effect extend the approach of Hopcroft's <ref> [Hop81] </ref> proof of the Karp-Lipton Theorem (Theorem 5.1, part 1) in a way that allows the proof to work even when the machine involved is one implementing an overproductive reduction.
Reference: [Kad89] <author> J. Kadin. </author> <title> P NP[log n] and sparse Turing-complete sets for NP. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 39(3) </volume> <pages> 282-298, </pages> <year> 1989. </year>
Reference-contexts: In contrast with the above results regarding sparse hard sets for NP, in the case of sparse complete sets for NP we have just as strong a collapse for SN T -reductions as we have for T -reductions. Theorem 5.4 <ref> [Kad89] </ref> NP R SN T (SPARSE " NP) ! PH = fi p Proof Kadin [Kad89] proved: If there exists a set S 2 NP " SPARSE such that coNP NP S , then PH = fi p 2 . <p> Theorem 5.4 <ref> [Kad89] </ref> NP R SN T (SPARSE " NP) ! PH = fi p Proof Kadin [Kad89] proved: If there exists a set S 2 NP " SPARSE such that coNP NP S , then PH = fi p 2 .
Reference: [Kam91] <author> J. Kamper. </author> <title> Non-uniform proof systems: a new framework to describe nonuniform and probabilistic complexity classes. </title> <journal> Theoretical Computer Science, </journal> <volume> 85(2) </volume> <pages> 305-331, </pages> <year> 1991. </year>
Reference-contexts: Theorem 5.1 1. [KL80] NP R p T (SPARSE) ! PH p 2. (implicit in [KL80], see [LS86] and the discussion in [HHN + 95]; explicit in <ref> [AFK89, Kam91] </ref>) NP R RS T (SPARSE) ! PH p 3. [KW95] NP R RS T (SPARSE) ! PH ZPP NP : 4. [KS97] If A has self-computable witnesses and A 2 (NP B " coNP B )=poly, then ZPP NP A .
Reference: [KL80] <author> R. Karp and R. Lipton. </author> <title> Some connections between nonuniform and uniform complexity classes. </title> <booktitle> In Proceedings of the 12th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 302-309, </pages> <month> April </month> <year> 1980. </year> <note> An extended version has also appeared as: Turing machines that take advice, </note> <editor> L'Enseignement Mathematique, </editor> <booktitle> 2nd series, </booktitle> <volume> 28, </volume> <year> 1982, </year> <pages> pages 191-209. </pages>
Reference-contexts: Beyond that, reductions play a central role in countless theorems of complexity theory, and to understand the power of such theorems we must understand the relationships between reductions. For example, Karp and Lipton <ref> [KL80] </ref> proved that if SAT Turing-reduces to some sparse set then the polynomial hierarchy collapses. A more careful analysis reveals that the same result applies under the weaker hypothesis that SAT robustly-strong-reduces to some sparse set. <p> The classic result in this direction was obtained by Karp and Lipton, and more recent research has yielded three increasingly strong extensions of their result. Theorem 5.1 1. <ref> [KL80] </ref> NP R p T (SPARSE) ! PH p 2. (implicit in [KL80], see [LS86] and the discussion in [HHN + 95]; explicit in [AFK89, Kam91]) NP R RS T (SPARSE) ! PH p 3. [KW95] NP R RS T (SPARSE) ! PH ZPP NP : 4. [KS97] If A has <p> The classic result in this direction was obtained by Karp and Lipton, and more recent research has yielded three increasingly strong extensions of their result. Theorem 5.1 1. <ref> [KL80] </ref> NP R p T (SPARSE) ! PH p 2. (implicit in [KL80], see [LS86] and the discussion in [HHN + 95]; explicit in [AFK89, Kam91]) NP R RS T (SPARSE) ! PH p 3. [KW95] NP R RS T (SPARSE) ! PH ZPP NP : 4. [KS97] If A has self-computable witnesses and A 2 (NP B " coNP B )=poly, then
Reference: [KS97] <author> J. Kobler and U. Schoning. </author> <title> High sets for NP. </title> <editor> In D. Zu and K. Ko, editors, </editor> <booktitle> Advances in Algorithms, Languages, and Complexity, </booktitle> <pages> pages 139-156. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1997. </year> <month> 23 </month>
Reference-contexts: Theorem 5.1 1. [KL80] NP R p T (SPARSE) ! PH p 2. (implicit in [KL80], see [LS86] and the discussion in [HHN + 95]; explicit in [AFK89, Kam91]) NP R RS T (SPARSE) ! PH p 3. [KW95] NP R RS T (SPARSE) ! PH ZPP NP : 4. <ref> [KS97] </ref> If A has self-computable witnesses and A 2 (NP B " coNP B )=poly, then ZPP NP A .
Reference: [KW95] <author> J. Kobler and O. Watanabe. </author> <title> New collapse consequences of NP having small circuits. </title> <booktitle> In Proceedings of the 22nd International Colloquium on Automata, Languages, and Programming, </booktitle> <pages> pages 196-207. </pages> <note> Springer-Verlag Lecture Notes in Computer Science #944, </note> <year> 1995. </year>
Reference-contexts: Theorem 5.1 1. [KL80] NP R p T (SPARSE) ! PH p 2. (implicit in [KL80], see [LS86] and the discussion in [HHN + 95]; explicit in [AFK89, Kam91]) NP R RS T (SPARSE) ! PH p 3. <ref> [KW95] </ref> NP R RS T (SPARSE) ! PH ZPP NP : 4. [KS97] If A has self-computable witnesses and A 2 (NP B " coNP B )=poly, then ZPP NP A . <p> To explain why part 4 of this theorem is stronger than part 3, we mention that Kobler and Watanabe <ref> [KW95] </ref> state part 3 in the form NP (NP " coNP)=poly ! PH ZPP NP , which is equivalent to the statement of part 3 in light of Theorem 2.6. <p> The above proof does not work for the case of underproductive reductions, and indeed it remains open whether Theorem 5.2 can in some way be extended to underproductive reductions. An analog for strong nondeterministic reductions is implicitly known, but has a far weaker conclusion. Theorem 5.3 (implicit in <ref> [KW95] </ref>) NP R SN T (SPARSE) ! PH ZPP p 2 : Proof We start out from Yap's theorem [Yap83] in its strengthened form found by Kobler and Watanabe [KW95], namely, coNP NP=poly ! PH ZPP p 2 . <p> An analog for strong nondeterministic reductions is implicitly known, but has a far weaker conclusion. Theorem 5.3 (implicit in <ref> [KW95] </ref>) NP R SN T (SPARSE) ! PH ZPP p 2 : Proof We start out from Yap's theorem [Yap83] in its strengthened form found by Kobler and Watanabe [KW95], namely, coNP NP=poly ! PH ZPP p 2 .
Reference: [Lon82] <author> T. </author> <title> Long. Strong nondeterministic polynomial-time reducibilities. </title> <journal> Theoretical Computer Science, </journal> <volume> 21 </volume> <pages> 1-25, </pages> <year> 1982. </year>
Reference-contexts: In this paper, we continue the investigation of robust reductions started by Gavalda and Balcazar [GB91]. We now briefly mention one way of defining strong reduction <ref> [Sel78, Lon82] </ref> and robustly strong reduction [GB91]. Definition 2.1 provides a formal definition of the same notions in terms of concepts that are central to this paper. <p> Using underproductivity, overproductivity, and robustness, we may now define strong and robustly strong reductions, which have been previously studied. We also introduce two intermediate reductions, obtained by limiting the robustness to just the overproductivity or the underproductivity. 1 Definition 2.1 1. <ref> [Lon82] </ref>, see also [Sel78] ("strong reductions") A SN T B if there is an NPTM N such that N B is overproductive, N B is underproductive, and A = L (N B ). 2. [GB91] ("robustly strong reductions") A RS T B if A SN T B via an NPTM N <p> In this paper we ask whether some edges of the diamond pictured in Figure 1 might collapse, and 1 The literature contains various notations for strong reductions (also known as strong nondeterministic reductions). We adopt the notation of Long's paper <ref> [Lon82] </ref>, i.e., SN T . However, we note that some papers use other notations, such as SN , sn T , and p;NP"coNP T . For the three other reductions we discuss, we replace the SN with a mnemonic abbreviation. <p> set, and thus is certainly not contained in NP"coNP, then for every A 2 R SN T (B) = NP B "coNP B = EXPSPACE we have A p m B and hence A RS T B, i.e., R SN T (B). 4 Comparing the Power of the Reductions Long <ref> [Lon82] </ref> proved that strong and Turing polynomial-time reductions differ. More precisely, he proved the following result. Theorem 4.1 [Lon82] (8 recursive A 62 P)(9 recursive B)[A SN T B ^ A 6 T B]. Consequently, at least one of the edges in Figure 1 must represent a strict inclusion. <p> = NP B "coNP B = EXPSPACE we have A p m B and hence A RS T B, i.e., R SN T (B). 4 Comparing the Power of the Reductions Long <ref> [Lon82] </ref> proved that strong and Turing polynomial-time reductions differ. More precisely, he proved the following result. Theorem 4.1 [Lon82] (8 recursive A 62 P)(9 recursive B)[A SN T B ^ A 6 T B]. Consequently, at least one of the edges in Figure 1 must represent a strict inclusion. Indeed, we can show that strong reductions differ from both overproductive and underpro ductive reductions.
Reference: [LS86] <author> T. Long and A. Selman. </author> <title> Relativizing complexity classes with sparse oracles. </title> <journal> Journal of the ACM, </journal> <volume> 33(3) </volume> <pages> 618-627, </pages> <year> 1986. </year>
Reference-contexts: The classic result in this direction was obtained by Karp and Lipton, and more recent research has yielded three increasingly strong extensions of their result. Theorem 5.1 1. [KL80] NP R p T (SPARSE) ! PH p 2. (implicit in [KL80], see <ref> [LS86] </ref> and the discussion in [HHN + 95]; explicit in [AFK89, Kam91]) NP R RS T (SPARSE) ! PH p 3. [KW95] NP R RS T (SPARSE) ! PH ZPP NP : 4. [KS97] If A has self-computable witnesses and A 2 (NP B " coNP B )=poly, then ZPP NP
Reference: [Sel78] <author> A. Selman. </author> <title> Polynomial time enumeration reducibility. </title> <journal> SIAM Journal on Computing, </journal> <volume> 7(4) </volume> <pages> 440-457, </pages> <year> 1978. </year>
Reference-contexts: In this paper, we continue the investigation of robust reductions started by Gavalda and Balcazar [GB91]. We now briefly mention one way of defining strong reduction <ref> [Sel78, Lon82] </ref> and robustly strong reduction [GB91]. Definition 2.1 provides a formal definition of the same notions in terms of concepts that are central to this paper. <p> Using underproductivity, overproductivity, and robustness, we may now define strong and robustly strong reductions, which have been previously studied. We also introduce two intermediate reductions, obtained by limiting the robustness to just the overproductivity or the underproductivity. 1 Definition 2.1 1. [Lon82], see also <ref> [Sel78] </ref> ("strong reductions") A SN T B if there is an NPTM N such that N B is overproductive, N B is underproductive, and A = L (N B ). 2. [GB91] ("robustly strong reductions") A RS T B if A SN T B via an NPTM N , and N
Reference: [Sto77] <author> L. Stockmeyer. </author> <title> The polynomial-time hierarchy. </title> <journal> Theoretical Computer Science, </journal> <volume> 3 </volume> <pages> 1-22, </pages> <year> 1977. </year>
Reference: [Wag90] <author> K. Wagner. </author> <title> Bounded query classes. </title> <journal> SIAM Journal on Computing, </journal> <volume> 19(5) </volume> <pages> 833-846, </pages> <year> 1990. </year>
Reference-contexts: degrees coincide, so P = NP " coNP: 5 Overproductive Reductions and the Classic Hardness Theorems The polynomial hierarchy is defined as follows: (a) p 0 = P; (b) for each i 0, p NP p i ; (c) for each i 0, p p p p p SATg (see <ref> [Wag90] </ref>), where p tt denotes polynomial-time truth-table reduction. ZPP denotes expected polynomial time [Gil77].
Reference: [Yap83] <author> C. Yap. </author> <title> Some consequences of non-uniform conditions on uniform classes. </title> <journal> Theoretical Computer Science, </journal> <volume> 26 </volume> <pages> 287-300, </pages> <year> 1983. </year> <month> 24 </month>
Reference-contexts: An analog for strong nondeterministic reductions is implicitly known, but has a far weaker conclusion. Theorem 5.3 (implicit in [KW95]) NP R SN T (SPARSE) ! PH ZPP p 2 : Proof We start out from Yap's theorem <ref> [Yap83] </ref> in its strengthened form found by Kobler and Watanabe [KW95], namely, coNP NP=poly ! PH ZPP p 2 .
References-found: 22

