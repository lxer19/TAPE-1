URL: ftp://ftp.ecrc.de/pub/eclipse/ECRC_tech_reports/reports/ECRC-94-15.ps.Z
Refering-URL: http://www.ecrc.de/eclipse/html/CHIC_Methodology.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Conjunto: Constraint Logic Programming with Finite Set Domains  
Author: Carmen Gervet 
Note: ECRC-94-15  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Alexander Aiken and Edward L. Wimmers. </author> <title> Solving Systems of Set Constraints. </title> <booktitle> In IEEE Symposium on Logic in Computer Science, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Various systems of set constraints have been defined for purposes such as axiomatizing a set theory in flogg [4], prototyping combinatorial problems with sets, multisets and sequences in CLPS [16], manipulating strings in CLP ( fl ) [21], analyzing programs [10] <ref> [1] </ref> [2] among others. According to the objectives aimed at, each of these languages proposes a constraint solver for a class of set constraints over a computation domain. <p> The exhaustive set of possible instances of s is computed. As soon as the domain of one x i is modified, the domain of s is recomputed. 2.2 Systems of set constraints A related line of work is program analysis systems [10] <ref> [1] </ref> [2] among others. They handle a larger class of sets (infinite sets) than Conjunto, flogg or CLPS. The set variables are introduced to model a program. The different resolution algorithms are based on transformation algorithms. <p> The set variables are introduced to model a program. The different resolution algorithms are based on transformation algorithms. These transformations preserve consistency either by computing a least model [10] which does not preserve all solutions or by computing a finite set of systems in solved form <ref> [1] </ref>. [2] demonstrated that the latter algorithm is solvable in non-deterministic exponential time. 5 3 Representing sets by lower and upper bounds The related work presented above reflects that to embed sets in a CLP language, there are two alternatives.
Reference: [2] <author> L. Bachmair, H. Ganzinger, and U. Waldmann. </author> <title> Set Constraints are the Monadic Class. </title> <booktitle> In Proceedings of the LICS'93, </booktitle> <year> 1993. </year>
Reference-contexts: 1 Introduction Various systems of set constraints have been defined for purposes such as axiomatizing a set theory in flogg [4], prototyping combinatorial problems with sets, multisets and sequences in CLPS [16], manipulating strings in CLP ( fl ) [21], analyzing programs [10] [1] <ref> [2] </ref> among others. According to the objectives aimed at, each of these languages proposes a constraint solver for a class of set constraints over a computation domain. <p> The exhaustive set of possible instances of s is computed. As soon as the domain of one x i is modified, the domain of s is recomputed. 2.2 Systems of set constraints A related line of work is program analysis systems [10] [1] <ref> [2] </ref> among others. They handle a larger class of sets (infinite sets) than Conjunto, flogg or CLPS. The set variables are introduced to model a program. The different resolution algorithms are based on transformation algorithms. <p> The set variables are introduced to model a program. The different resolution algorithms are based on transformation algorithms. These transformations preserve consistency either by computing a least model [10] which does not preserve all solutions or by computing a finite set of systems in solved form [1]. <ref> [2] </ref> demonstrated that the latter algorithm is solvable in non-deterministic exponential time. 5 3 Representing sets by lower and upper bounds The related work presented above reflects that to embed sets in a CLP language, there are two alternatives.
Reference: [3] <author> M. Dincbas, H. Simonis, P. Van Hentenryck, A. Aggoun, T. Graf, and F. Berthier. </author> <title> The constraint logic programming language CHIP. In FGCS, </title> <address> Japan, </address> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: The elements of the set are called definite elements. The inclusion and disjointness constraints over these domain variables are solved by applying consistency techniques which allow to perform deterministic computations until we reach a fixed point. This approach can be seen as an adaptation of finite domains <ref> [3] </ref> [12] to finite set domains where the number of elements of the domain is no longer linear but exponential in the size of the domain upper bound and where the order relation is not total (&lt;) but partial (). <p> In Conjunto, we propose a specific case of this alternative, by constraining a set variable to belong to a finite set domain. The notion of finite domain has first been used and defined in the constraint logic programming language CHIP <ref> [3] </ref>. Such a computation domain has proved its efficiency in the CLP framework by a powerful use of consistency checking techniques. In Conjunto, a finite set domain (for set inclusion) is defined by a finite set of ground sets 1 .
Reference: [4] <author> A. Dovier and G. Rossi. </author> <title> Embedding extensional finite sets in CLP. </title> <booktitle> In ILPS'93, </booktitle> <year> 1993. </year>
Reference-contexts: 1 Introduction Various systems of set constraints have been defined for purposes such as axiomatizing a set theory in flogg <ref> [4] </ref>, prototyping combinatorial problems with sets, multisets and sequences in CLPS [16], manipulating strings in CLP ( fl ) [21], analyzing programs [10] [1] [2] among others. <p> A scheduling strategy for selecting constraints ensures termination of the satisfiability procedure. The whole language is based on the in constraint symbol which allows efficient string handlings. flogg <ref> [4] </ref> is based on an axiomatized set theory where set terms are constructed using the interpreted functor with, e.g. ; with x with (; with y with z) = ffz,yg,xg. <p> This means that, basic set relation constraints and n-ary constraints are considered only in a given context (where domains are attached to the variables). Having defined the foundations of Conjunto we need to define its operational semantics comprising the consistency algorithms. 1 In flogg <ref> [4] </ref> they do not need to distinguish these constraints from as they can write x 2 S $ fxg S. In Conjunto fxg is not a term (if x is a variable) so we do need to define as a primitive constraint.
Reference: [5] <author> R. Fraiss e. </author> <title> Theory of Relations, </title> <booktitle> volume 118 of Studies in logic and the foundations of mathematics. </booktitle> <publisher> Elsevier Science, </publisher> <year> 1986. </year>
Reference-contexts: If the set object is the basis of the standard set theory and some say the foundation of all mathematics, it also has an important role in relation theory <ref> [5] </ref> as well as in graph theory [8]. Lauri ere first addressed this issue in his seminal language ALICE [15].
Reference: [6] <author> M.R. Garey and D. S. Johnson. </author> <title> Computers and intractability, A guide to the theory of NP-completeness. </title> <editor> Victor Klee, </editor> <year> 1979. </year> <pages> pp 124-130. </pages>
Reference-contexts: The bin packing problem only deals with weight constraints but could be easily extended to handle heterogeneous constraints. Problem description Bin packing problems belong to the class of set partitioning problems <ref> [6] </ref>. A multiset of n integers is given fw 1 ; :::; w n g and specifies the weight elements to partition. Another integer W max is given and represents the weight capacity.
Reference: [7] <author> C. Gervet. </author> <title> Sets and binary relation variables viewed as constrained objects. </title> <booktitle> In Workshop on Logic Programming with Sets, </booktitle> <pages> pages 5-8, </pages> <address> Budapest, Hungary, </address> <month> June </month> <year> 1993. </year> <note> in conjunction with ICLP'93. </note>
Reference-contexts: The values in this domain are the sets f3; ag, f3; a; g (1)g, f3; a; 5g, f3; a; g (1); 5g. In a previous paper <ref> [7] </ref> the notion of invariant was introduced to formalize the process of maintaining the set fS j glb (S) S lub (S)g of possible elements attached to a set variable. Figure 1 gives an intuition on the notion of set domain or set approximation.
Reference: [8] <author> A. Gibbons. </author> <title> Algorithmic graph theory. </title> <publisher> Cambridge University Press, </publisher> <address> Great Britain, Cambridge, </address> <year> 1985. </year>
Reference-contexts: If the set object is the basis of the standard set theory and some say the foundation of all mathematics, it also has an important role in relation theory [5] as well as in graph theory <ref> [8] </ref>. Lauri ere first addressed this issue in his seminal language ALICE [15]. In Conjunto, a finite relation domain constrains a relation variable R S 1 fi S 2 where S 1 and S 2 are respectively the domain and the range of R (ground sets).
Reference: [9] <editor> G. Gierz, K.H. Hofman, K. Keimel, J.D. Lawson, M. Mislove, and D.S. </editor> <address> Scott. </address>
Reference-contexts: A set expression is composed of set domain variables together with set operator symbols. The domain of a set expression is also a finite lattice under inclusion <ref> [9] </ref>. It could be represented by computing its exact bounds at an exponential cost in the size of the largest upper bound invoked. But for efficiency reasons, it is represented in Conjunto by approximating its bounds in terms of the domain bounds of the set variables.
References-found: 9

