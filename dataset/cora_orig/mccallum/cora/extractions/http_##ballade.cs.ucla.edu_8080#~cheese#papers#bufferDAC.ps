URL: http://ballade.cs.ucla.edu:8080/~cheese/papers/bufferDAC.ps
Refering-URL: http://ballade.cs.ucla.edu:8080/~cheese/abstracts.html
Root-URL: http://www.cs.ucla.edu
Title: Wire Segmenting for Improved Buffer Insertion  
Author: Charles Alpert and Anirudh Devgan 
Address: Austin, TX 78758  
Affiliation: IBM Austin Research Laboratory,  
Abstract: Buffer insertion seeks to place buffers on the wires of a signal net to minimize delay. Van Ginneken [14] proposed an optimal dynamic programming solution (with extensions proposed by [7] [8] [9] [12]) such that at most one buffer can be placed on a single wire. This constraint can hurt solution quality, but it may be circumvented by dividing each wire into multiple smaller segments. This work studies the problem of finding the correct number of segments for each wire in the routing tree. Too few segments yields sub-par solutions, but too many segments can lead to excessive run times and memory loads. We derive new theoretical results for computing the appropriate number of buffers (and hence wire segments) which motivate our new wire segmenting algorithm. We show that using wire segmenting as a precursor to buffer insertion produces solutions within a few percent of optimal, while using only seconds of CPU time. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. L. Berman, J. L. Carter, and K. F. Day, </author> <title> The Fanout Problem: From Theory to Practice Advanced Research in VLSI: </title> <booktitle> Proc. 1989 Decennial Caltech Conference, </booktitle> <editor> C. L. Seitz Ed., </editor> <publisher> MIT Press, </publisher> <month> March </month> <year> 1989, </year> <pages> pp. 69-99. </pages>
Reference-contexts: We assume that the tree topology is fixed and that the wire resistances and capacitances have been extracted. Early works in buffer insertion <ref> [1] </ref> [13] sought solutions in which the tree topology was not necessarily fixed. Berman et al. [1] showed that simultaneously constructing a tree and placing buffers at the internal nodes of the tree is NP-Complete. <p> We assume that the tree topology is fixed and that the wire resistances and capacitances have been extracted. Early works in buffer insertion <ref> [1] </ref> [13] sought solutions in which the tree topology was not necessarily fixed. Berman et al. [1] showed that simultaneously constructing a tree and placing buffers at the internal nodes of the tree is NP-Complete. The authors of [13] proposed a heuristic buffer insertion algorithm based on a linear delay model.
Reference: [2] <author> C.-P. Chen, Y.-W. Chang and D. F. Wong, </author> <title> Fast Performance-Driven Optimization for Buffered Clock Trees Based on Lagrangian Relaxation, </title> <booktitle> 33rd IEEE/ACM Design Automation Conference, </booktitle> <year> 1996, </year> <pages> pp. 405-408. </pages>
Reference-contexts: Hedenstierna and Jeppson [5] studied placing consecutive buffers to optimize their SPICE-based delay model. The algorithm of Lowe and Gulak [11] alternates buffer insertion with buffer sizing. Chen et al. <ref> [2] </ref> use Lagrangian relaxation to size pre-placed buffers. Finally, Dhar and Franklin [3] gave closed-form solutions for buffer insertion with multiple sizes on a single uniform line.
Reference: [3] <author> S. Dhar and M. A. Franklin, </author> <title> Optimum Buffer Circuits for Driving Long Uniform Lines IEEE Journal of Solid-State Circuits 26(1), </title> <booktitle> 1991, </booktitle> <pages> pp. 32-40. </pages>
Reference-contexts: Hedenstierna and Jeppson [5] studied placing consecutive buffers to optimize their SPICE-based delay model. The algorithm of Lowe and Gulak [11] alternates buffer insertion with buffer sizing. Chen et al. [2] use Lagrangian relaxation to size pre-placed buffers. Finally, Dhar and Franklin <ref> [3] </ref> gave closed-form solutions for buffer insertion with multiple sizes on a single uniform line. <p> In contrast to Dhar and Franklin <ref> [3] </ref>, we do not allow resizing of the driver and sink, and this assumptions leads to the different conclusion that buffer spacing is non-uniform and depends on the driver size and sink capacitance. * We utilize these results within a new wire segmenting algorithm which has been incorporated into the buffer <p> We can now compute the opti mum number of buffers k for a given wire: 2 Note that our results are similar to <ref> [3] </ref> in that they conclude that buffers should be equally spaced. However, their formulation assumed that the driving and sink buffers were resizable, while we assume a fixed driver and sink in the next theorem. This yields a solution in which all nodes are not equally spaced.
Reference: [4] <author> W. C. </author> <title> Elmore, The Transient Response of Damped Linear Network with Particular Regard to Wideband Amplifiers, </title> <journal> J. Applied Physics 19, </journal> <year> 1948, </year> <pages> pp. 55-63. </pages>
Reference-contexts: We are also given a buffer library B of size m which consists of inverting and non-inverting buffers b 1 ; : : : ; b m . Following [9] [12] [14] , we adopt the Elmore delay model <ref> [4] </ref> for interconnect delays and a linear model for gate delays. For each gate v, let C v denote the input capacitance, R v the intrinsic resistance and K v the intrinsic delay of v.
Reference: [5] <author> N. Hedenstierna and K. O. Jeppson, </author> <title> CMOS Circuit Speed and Buffer Optimization, </title> <journal> IEEE Trans. on Computer-Aided Design 6(2), </journal> <year> 1987, </year> <pages> pp. 270-281. </pages>
Reference-contexts: The authors of [13] proposed a heuristic buffer insertion algorithm based on a linear delay model. The works [6] [10] perform buffer insertion by finding the best location for a single buffer and then recursively applying the algorithm. Hedenstierna and Jeppson <ref> [5] </ref> studied placing consecutive buffers to optimize their SPICE-based delay model. The algorithm of Lowe and Gulak [11] alternates buffer insertion with buffer sizing. Chen et al. [2] use Lagrangian relaxation to size pre-placed buffers.
Reference: [6] <author> L. N. Kannan, P. R. Suaris and H.-G. Fang, </author> <title> A Methodology and Algorithms for Post-Placement Delay Optimization, </title> <booktitle> 31st IEEE/ACM Design Automation Conference, </booktitle> <year> 1994, </year> <pages> pp. 327-332. </pages>
Reference-contexts: Berman et al. [1] showed that simultaneously constructing a tree and placing buffers at the internal nodes of the tree is NP-Complete. The authors of [13] proposed a heuristic buffer insertion algorithm based on a linear delay model. The works <ref> [6] </ref> [10] perform buffer insertion by finding the best location for a single buffer and then recursively applying the algorithm. Hedenstierna and Jeppson [5] studied placing consecutive buffers to optimize their SPICE-based delay model. The algorithm of Lowe and Gulak [11] alternates buffer insertion with buffer sizing.
Reference: [7] <author> J. Lillis, C.-K. Cheng and T.-T. Y. </author> <title> Lin Optimal and Efficient Buffer Insertion and Wire Sizing, </title> <booktitle> IEEE Custom Integrated Circuits Conference, </booktitle> <year> 1995, </year> <pages> pp. 259-262 </pages>
Reference-contexts: Van Ginneken [14] also outlined a non-polynomial extension for minimizing the total number of buffers. The optimality of this algorithm has inspired numerous variants. Lillis et al. <ref> [7] </ref> simultaneously perform wire sizing and buffer insertion using a library that contains both inverting and non-inverting buffers. The works [8] [9] extended these ideas further by integrating slew into the delay model and by minimizing a power function (e.g., the total number of buffers), while retaining optimality.
Reference: [8] <author> J. Lillis, C.-K. Cheng and T.-T. Y. </author> <title> Lin Optimal Wire Sizing and Buffer Insertion for Low Power and a Generalized Delay Model, </title> <booktitle> IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <year> 1995, </year> <pages> pp. 138-143. </pages>
Reference-contexts: Van Ginneken [14] also outlined a non-polynomial extension for minimizing the total number of buffers. The optimality of this algorithm has inspired numerous variants. Lillis et al. [7] simultaneously perform wire sizing and buffer insertion using a library that contains both inverting and non-inverting buffers. The works <ref> [8] </ref> [9] extended these ideas further by integrating slew into the delay model and by minimizing a power function (e.g., the total number of buffers), while retaining optimality. Finally, Okamoto and Cong [12] integrated Van Ginneken's algorithm into a simultaneous Steiner tree and buffer insertion construction.
Reference: [9] <author> J. Lillis, C.-K. Cheng and T.-T. Y. </author> <title> Lin Optimal Wire Sizing and Buffer Insertion for Low Power and a Generalized Delay Model, </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> 31(3), </volume> <year> 1996, </year> <pages> pp. 437-447. </pages>
Reference-contexts: Van Ginneken [14] also outlined a non-polynomial extension for minimizing the total number of buffers. The optimality of this algorithm has inspired numerous variants. Lillis et al. [7] simultaneously perform wire sizing and buffer insertion using a library that contains both inverting and non-inverting buffers. The works [8] <ref> [9] </ref> extended these ideas further by integrating slew into the delay model and by minimizing a power function (e.g., the total number of buffers), while retaining optimality. Finally, Okamoto and Cong [12] integrated Van Ginneken's algorithm into a simultaneous Steiner tree and buffer insertion construction. <p> allow resizing of the driver and sink, and this assumptions leads to the different conclusion that buffer spacing is non-uniform and depends on the driver size and sink capacitance. * We utilize these results within a new wire segmenting algorithm which has been incorporated into the buffer insertion algorithm of <ref> [9] </ref>. * Our experiments show that wire segmenting leads to signif-icantly lower delays than no wire segmenting. <p> The remainder of the paper is as follows. Section 2 defines the buffer insertion problem. Section 3 overviews the basic dynamic programming paradigm <ref> [9] </ref> [14]. Section 4 presents theoretical results that determine the appropriate number of buffers that should be inserted on a given wire. Section 5 describes our wire segmenting algorithm. <p> We are also given a buffer library B of size m which consists of inverting and non-inverting buffers b 1 ; : : : ; b m . Following <ref> [9] </ref> [12] [14] , we adopt the Elmore delay model [4] for interconnect delays and a linear model for gate delays. For each gate v, let C v denote the input capacitance, R v the intrinsic resistance and K v the intrinsic delay of v. <p> The entire solution is revealed by recursively examining the left and right candidate solutions of the returned candidate. Step 1 performs wire segmenting, which is described in Section 5. Step 2 calls Find Cnds (i.e., Find Candidates) which is presented in Figure 3 (see <ref> [9] </ref> [14] for a detailed explanation). 1 It returns a set of possible candidates for the source, but without accounting for driver delay. Hence, Step 3 updates each candidate to include the driver delay, and Step 4 returns the candidate with largest slack. As noted by [9] the complexity of the <p> in Figure 3 (see <ref> [9] </ref> [14] for a detailed explanation). 1 It returns a set of possible candidates for the source, but without accounting for driver delay. Hence, Step 3 updates each candidate to include the driver delay, and Step 4 returns the candidate with largest slack. As noted by [9] the complexity of the buffer optimization algorithm is O (n 2 jBj 2 ). 1 Several enhancements [9] can be made to the Find Cnds procedure: (i) inverters can be incorporated by maintaining two candidate lists, instead of one; (ii) one can optimize some power function of the buffers in <p> Hence, Step 3 updates each candidate to include the driver delay, and Step 4 returns the candidate with largest slack. As noted by <ref> [9] </ref> the complexity of the buffer optimization algorithm is O (n 2 jBj 2 ). 1 Several enhancements [9] can be made to the Find Cnds procedure: (i) inverters can be incorporated by maintaining two candidate lists, instead of one; (ii) one can optimize some power function of the buffers in the solution, e.g., the total number of buffers; (iii) signal slew can be integrated into the gate delay <p> If CPU time is not much of a factor, we suggest using a higher value of M in order to derive a better solution. 7 Conclusions We have proposed integrating wire segmenting into the buffer insertion algorithms of <ref> [9] </ref> [14]. Our approach is motivated by new theoretical results which show the tradeoff between wire length and the optimal number of buffers needed for a 2-pin net. Experiments show that our method yields Elmore delays within 4% of optimal while using much less CPU time.
Reference: [10] <author> S. Lin and M. Marek-Sadowska, </author> <title> A Fast and Efficient Algorithm for Determining Fanout Trees in Large Networks, </title> <booktitle> Proc. of the European Conference on Design Automation, </booktitle> <year> 1991, </year> <pages> pp. 539-544. </pages>
Reference-contexts: Berman et al. [1] showed that simultaneously constructing a tree and placing buffers at the internal nodes of the tree is NP-Complete. The authors of [13] proposed a heuristic buffer insertion algorithm based on a linear delay model. The works [6] <ref> [10] </ref> perform buffer insertion by finding the best location for a single buffer and then recursively applying the algorithm. Hedenstierna and Jeppson [5] studied placing consecutive buffers to optimize their SPICE-based delay model. The algorithm of Lowe and Gulak [11] alternates buffer insertion with buffer sizing.
Reference: [11] <author> K. S. Lowe and P. G. Gulak, </author> <title> Gate Sizing and Buffer Insertion for Optimizing Performance in Power Constrained BiCMOS Circuits, </title> <booktitle> IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <year> 1993, </year> <pages> pp. 216-219. </pages>
Reference-contexts: The works [6] [10] perform buffer insertion by finding the best location for a single buffer and then recursively applying the algorithm. Hedenstierna and Jeppson [5] studied placing consecutive buffers to optimize their SPICE-based delay model. The algorithm of Lowe and Gulak <ref> [11] </ref> alternates buffer insertion with buffer sizing. Chen et al. [2] use Lagrangian relaxation to size pre-placed buffers. Finally, Dhar and Franklin [3] gave closed-form solutions for buffer insertion with multiple sizes on a single uniform line.
Reference: [12] <author> T. Okamoto and J. Cong, </author> <title> Interconnect Layout Optimization by Simultaneous Steiner Tree Construction and Buffer Insertion, </title> <booktitle> Fifth ACM/SIGDA Physical Design Workshop, </booktitle> <year> 1996, </year> <pages> pp. 1-6. </pages>
Reference-contexts: The works [8] [9] extended these ideas further by integrating slew into the delay model and by minimizing a power function (e.g., the total number of buffers), while retaining optimality. Finally, Okamoto and Cong <ref> [12] </ref> integrated Van Ginneken's algorithm into a simultaneous Steiner tree and buffer insertion construction. Works based on Van Ginneken's algorithm are optimal only under the condition that at most one buffer may be placed on each wire. <p> We are also given a buffer library B of size m which consists of inverting and non-inverting buffers b 1 ; : : : ; b m . Following [9] <ref> [12] </ref> [14] , we adopt the Elmore delay model [4] for interconnect delays and a linear model for gate delays. For each gate v, let C v denote the input capacitance, R v the intrinsic resistance and K v the intrinsic delay of v.
Reference: [13] <author> K. J. Singh and A. Sangiovanni-Vincentelli, </author> <title> A Heuristic Algorithm for the Fanout Problem, </title> <booktitle> 27th ACM/IEEE Design Automation Conference, </booktitle> <year> 1990, </year> <pages> pp. 357-360. </pages>
Reference-contexts: We assume that the tree topology is fixed and that the wire resistances and capacitances have been extracted. Early works in buffer insertion [1] <ref> [13] </ref> sought solutions in which the tree topology was not necessarily fixed. Berman et al. [1] showed that simultaneously constructing a tree and placing buffers at the internal nodes of the tree is NP-Complete. The authors of [13] proposed a heuristic buffer insertion algorithm based on a linear delay model. <p> Early works in buffer insertion [1] <ref> [13] </ref> sought solutions in which the tree topology was not necessarily fixed. Berman et al. [1] showed that simultaneously constructing a tree and placing buffers at the internal nodes of the tree is NP-Complete. The authors of [13] proposed a heuristic buffer insertion algorithm based on a linear delay model. The works [6] [10] perform buffer insertion by finding the best location for a single buffer and then recursively applying the algorithm. Hedenstierna and Jeppson [5] studied placing consecutive buffers to optimize their SPICE-based delay model.
Reference: [14] <author> L. P. P. P. van Ginneken, </author> <title> Buffer Placement in Distributed RC-tree Networks for Minimal Elmore Delay, </title> <booktitle> Proc. International Symposium on Circuits and Systems, </booktitle> <year> 1990, </year> <pages> pp. 865-868. </pages>
Reference-contexts: Request permissions from Publications Dept, ACM Inc., fax +1 (212) 869-0481, or permissions@acm.org. 0-89791-847-9/97/0006/$3.50 DAC 97 - 06/97 Anaheim, CA, USA Our work is an extension of Van Ginneken's dynamic programming algorithm <ref> [14] </ref> which performs optimal buffer placement such that only one buffer may be placed on each wire, and the library contains only a single, non-inverting buffer. Van Ginneken [14] also outlined a non-polynomial extension for minimizing the total number of buffers. The optimality of this algorithm has inspired numerous variants. <p> 869-0481, or permissions@acm.org. 0-89791-847-9/97/0006/$3.50 DAC 97 - 06/97 Anaheim, CA, USA Our work is an extension of Van Ginneken's dynamic programming algorithm <ref> [14] </ref> which performs optimal buffer placement such that only one buffer may be placed on each wire, and the library contains only a single, non-inverting buffer. Van Ginneken [14] also outlined a non-polynomial extension for minimizing the total number of buffers. The optimality of this algorithm has inspired numerous variants. Lillis et al. [7] simultaneously perform wire sizing and buffer insertion using a library that contains both inverting and non-inverting buffers. <p> The remainder of the paper is as follows. Section 2 defines the buffer insertion problem. Section 3 overviews the basic dynamic programming paradigm [9] <ref> [14] </ref>. Section 4 presents theoretical results that determine the appropriate number of buffers that should be inserted on a given wire. Section 5 describes our wire segmenting algorithm. <p> We are also given a buffer library B of size m which consists of inverting and non-inverting buffers b 1 ; : : : ; b m . Following [9] [12] <ref> [14] </ref> , we adopt the Elmore delay model [4] for interconnect delays and a linear model for gate delays. For each gate v, let C v denote the input capacitance, R v the intrinsic resistance and K v the intrinsic delay of v. <p> The entire solution is revealed by recursively examining the left and right candidate solutions of the returned candidate. Step 1 performs wire segmenting, which is described in Section 5. Step 2 calls Find Cnds (i.e., Find Candidates) which is presented in Figure 3 (see [9] <ref> [14] </ref> for a detailed explanation). 1 It returns a set of possible candidates for the source, but without accounting for driver delay. Hence, Step 3 updates each candidate to include the driver delay, and Step 4 returns the candidate with largest slack. <p> If CPU time is not much of a factor, we suggest using a higher value of M in order to derive a better solution. 7 Conclusions We have proposed integrating wire segmenting into the buffer insertion algorithms of [9] <ref> [14] </ref>. Our approach is motivated by new theoretical results which show the tradeoff between wire length and the optimal number of buffers needed for a 2-pin net. Experiments show that our method yields Elmore delays within 4% of optimal while using much less CPU time.
References-found: 14

