URL: http://www.daimi.aau.dk/CPnets/workshop98/papers/burns.ps.Z
Refering-URL: http://www.daimi.aau.dk/CPnets/workshop98/papers/
Root-URL: http://www.daimi.aau.dk
Title: Modelling of Superscalar Processor Architectures with Design/CPN  
Author: Frank Burns, Albert Koelmans and Alexandre Yakovlev 
Address: NE1 7RU, UK  
Affiliation: Department of Computing Science University of Newcastle upon Tyne,  
Abstract: We describe aspects of modelling a generic superscalar processor architecture using Coloured Petri nets, for the purpose of analysis of its real-time properties, such as Worst Case Execution Time for a block of instructions. The model can be simulated within the Design/CPN environment. The results of the simulation are displayed using a custom graphics tool written in Tcl/Tk. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D.K. Arvind and V.E.F. Rebello. </author> <title> Instruction-level parallelism in asynchronous processor architectures. </title> <booktitle> Proceedings of the Third Int. Workshop on Algorithms and Parallel VLSI Architectures, </booktitle> <editor> M. Moonen and F. Catthoor (Eds), </editor> <address> Leuven, Belgium, August 1994, </address> <publisher> Elsevier Science Publishers, </publisher> <pages> pp. 203-215. </pages>
Reference-contexts: Structural stalls can be modelled in Petri-nets by using feedback from functional units to indicate that a functional unit is free. 5 Superscalar issues 5.1 Multiple issue Superscalar machines depend on the ability to execute multiple instructions in parallel. This is known as Instruction Level Parallelism <ref> [1] </ref>. Multiple issue exploits instruction level parallelism by fetching and decoding more than one instruction at a time. The use of a fixed length instruction set enhances parallelism. For our multiple issue model we have decided to fetch four fixed length instructions at a time.
Reference: [2] <author> J.B. Dennis. </author> <title> Modular, Asynchronous Control Structures for a High Performance Processor. </title> <booktitle> Proceedings of Project MAC Conference on Concurrent Systems and Parallel Computation, </booktitle> <month> June </month> <year> 1970, </year> <pages> pp. 55-92. </pages>
Reference-contexts: In this paper we present a detailed model of a generic superscalar RISC processor developed using the Design/CPN tool. 2 Why ordinary Petri nets are insufficient Petri nets have traditionally been used for modelling and analysis of digital systems. Processor architectures are no exception <ref> [2] </ref>. In addition to classical "qualitative" properties for verification, like deadlocks and boundedness, the real-time aspect requires ways of obtaining more detailed, "quantitative", analysis, such as worst-case execution time for a block of instructions.
Reference: [3] <author> K. Jensen. </author> <title> Coloured Petri Nets. Basic concepts, analysis methods and practical use. </title> <note> EATCS Monographs on Theoretical Computer Science, Springer-Verlag 1992. </note>
Reference-contexts: We are developing a methodology and an associated set of software tools for the modelling and analysis of timing specifications of hardware platforms, in particular asynchronous RISC processors, based on the use of Coloured Petri Nets (CPNs) <ref> [3] </ref>. Previous work in this area (e.g. [6]) has mainly focused on the use of P/T nets.
Reference: [4] <author> A. Semenov, A.M. Koelmans, L. Lloyd, and A. Yakovlev. </author> <title> Designing an asynchronous processor using Petri nets. </title> <journal> IEEE Micro, </journal> <volume> 17(2) </volume> <pages> 54-64, </pages> <month> March </month> <year> 1997. </year>
Reference-contexts: We believe that this figure is self-explanatory. More details about the use of Place-Transition nets in the design of a processor can be found in <ref> [4] </ref>. At the highest abstraction level, the behaviour of a processor consists of two actions, Instruction Fetching (IF) and Instruction Execution (IE), which alternate and are therefore performed sequentially. These actions can be refined into subactions according to our knowledge about the processor architecture. <p> This part of the design process is described in detail in <ref> [4] </ref>. 3 Basics of processor modelling We model instruction types by first defining a set of predefined identifiers using an enumerated colorset as follows: Color Instr = with INT j FPADD j MUL j DIV j BRA j NOOP; It is then possible to create a record colorset using appropriate fields
Reference: [5] <author> N.C. Paver. </author> <title> The design and implementation of an asynchronous microprocessor. </title> <type> Ph.D. Thesis, </type> <institution> University of Manchester, </institution> <year> 1994. </year>
Reference-contexts: In asynchronous circuits, recovery from an incorrect branch is accomplished by assigning a tag or colour to each instruction (see e.g., <ref> [5] </ref>). When a branch is encountered the tag or colour is changed and instructions which do not have the current tag are considered invalid and are terminated further down the pipeline.
Reference: [6] <author> R.R. Razouk. </author> <title> The Use of Petri Nets for Modeling Pipelined Processors. </title> <type> Technical Report 87-29, </type> <institution> University of California, Department of Information and Computer Science, </institution> <year> 1987. </year>
Reference-contexts: We are developing a methodology and an associated set of software tools for the modelling and analysis of timing specifications of hardware platforms, in particular asynchronous RISC processors, based on the use of Coloured Petri Nets (CPNs) [3]. Previous work in this area (e.g. <ref> [6] </ref>) has mainly focused on the use of P/T nets.
References-found: 6

