URL: http://www.pdos.lcs.mit.edu/papers/tcc-wcsss96.ps
Refering-URL: http://www.pdos.lcs.mit.edu/PDOS-papers.html
Root-URL: 
Email: kaashoekg@lcs.mit.edu  
Title: tcc: A Template-Based Compiler for `C  
Author: Massimiliano Poletto, Dawson R. Engler, and M. Frans Kaashoek fmaxp, engler, 
Address: Cambridge, MA 02139  
Affiliation: Laboratory for Computer Science Massachusetts Institute of Technology  
Abstract: This paper describes tcc, a compiler currently being written for `C. tcc has two objectives: (1) to deliver a complete, solid implementation of `C, and (2) to minimize the run-time costs of dynamic code generation. tcc implements dynamic code generation by emitting templates, segments of binary code which at run time can be combined and completed with the values of registers, stack offsets, and constants. tcc also allows some decisions about storage allocation and instruction selection to occur at run time. This provides flexibility in combining arbitrary pieces of dynamic code, while allowing run-time code generation to occur very efficiently. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer, M. Fiuczyn-ski, D. Becker, S. Eggers, and C. Chambers. </author> <title> Extensibility, safety and performance in the SPIN operating system. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 267-284, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Dynamic code generation improves the performance of software by enabling the use of information unavailable at compile time. It has been widely applied by the language and systems communities to improve the performance of everything from operating systems <ref> [1, 7, 18, 19] </ref> to windowing operations [17], dynamically typed languages [2, 4, 13], simulators [21, 25, 23] and matrix manipulations [8]. `C [5] is a superset of ANSI C that makes dynamic code generation both practical and efficient.
Reference: [2] <author> C. Chambers and D. Ungar. </author> <title> Customization: Optimizing compiler technology for SELF, a dynamically-typed object-oriented programming language. </title> <booktitle> In Proceedings of the SIG-PLAN '89 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 146-160, </pages> <address> Portland, OR, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: It has been widely applied by the language and systems communities to improve the performance of everything from operating systems [1, 7, 18, 19] to windowing operations [17], dynamically typed languages <ref> [2, 4, 13] </ref>, simulators [21, 25, 23] and matrix manipulations [8]. `C [5] is a superset of ANSI C that makes dynamic code generation both practical and efficient. Practicality stems from the ability to specify code in a high-level, machine independent fashion, building on the facilities already available in C.
Reference: [3] <author> C. Consel and F. No el. </author> <title> A general approach for run-time specialization and its application to c. </title> <booktitle> In Conference Record of the 23rd Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 145-156, </pages> <address> St. Petersburg, FL, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: Many languages, such as most Lisp dialects [20, 22], Tcl [16], and Perl [24], provide an eval operation that allows code to be generated dynamically. This approach is flexible but has a high run-time cost, since these languages are dynamically typed. Consel and No el <ref> [3] </ref> describe a technique for specializing programs with respect to run-time invariants. Their system exploits user-annotated run-time constants, using templates to dynamically emit specialized code. Similarly, Leone and Lee [14, 15] use programmer-supplied hints to perform compile-time specialization in a first-order subset of ML, with good results.
Reference: [4] <author> P. Deutsch and A.M. Schiffman. </author> <title> Efficient implementation of the Smalltalk-80 system. </title> <booktitle> In Proceedings of the 11th Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 297-302, </pages> <address> Salt Lake City, UT, </address> <month> January </month> <year> 1984. </year>
Reference-contexts: It has been widely applied by the language and systems communities to improve the performance of everything from operating systems [1, 7, 18, 19] to windowing operations [17], dynamically typed languages <ref> [2, 4, 13] </ref>, simulators [21, 25, 23] and matrix manipulations [8]. `C [5] is a superset of ANSI C that makes dynamic code generation both practical and efficient. Practicality stems from the ability to specify code in a high-level, machine independent fashion, building on the facilities already available in C.
Reference: [5] <author> Dawson R. Engler, Wilson C. Hsieh, and M. Frans Kaashoek. </author> <title> `C: A language for high-level, efficient, and machine-independent dynamic code generation. </title> <booktitle> In Conference Record of the 23rd Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 131-144, </pages> <address> St. Petersburg, FL, </address> <year> 1995. </year>
Reference-contexts: It has been widely applied by the language and systems communities to improve the performance of everything from operating systems [1, 7, 18, 19] to windowing operations [17], dynamically typed languages [2, 4, 13], simulators [21, 25, 23] and matrix manipulations [8]. `C <ref> [5] </ref> is a superset of ANSI C that makes dynamic code generation both practical and efficient. Practicality stems from the ability to specify code in a high-level, machine independent fashion, building on the facilities already available in C. <p> Section 5 presents related work. Section 6 concludes. 2 Overview of `C This section gives a brief overview of the `C language. A complete description can be found in <ref> [5] </ref>. In the following sections, dynamic code refers to dynamically generated code; static code is all other code. In `C, dynamic code is specified at run time; the specifications can then be composed to build larger specifications, or instantiated (compiled at run time) to produce executable code. <p> The functions push and arg help to dynamically create function calls, whereas self returns a pointer to the function that the next invocation of compile will return, enabling the creation of recursive dynamic code. These and other elements of the `C standard library are described in depth in <ref> [5] </ref>. Many library functions (local, param, arg, push, and compile) expect types as arguments. The library provides enumerated types for specifying this information: types are specified by enumeration constants whose names are the the first letter (s) of the types prefixed by TC . <p> Unfortunately, to date most systems for dynamic code generation have been ad-hoc, hard to program and retarget, and sometimes paying considerable run-time overhead. `C promises to make dynamic code generation easier and more practical. tcc will be the first mature implementation of `C <ref> [5] </ref>. `C was initially implemented to make use of DCG [8].
Reference: [6] <author> D.R. Engler. </author> <title> VCODE: A very fast, retargetable, and extensible dynamic code generation substrate. </title> <booktitle> In Proceedings of the ACM SIGPLAN '96 Conference on Programming Language Design and Implementation, </booktitle> <address> Philadelphia, PA, </address> <month> May </month> <year> 1996. </year> <note> (To appear). </note>
Reference-contexts: In order to maximize the efficiency of run-time code generation, tcc employs VCODE <ref> [6] </ref> as a substrate for emitting code at run time. VCODE is a system of templates for dynamic code generation, which presents to its client an interface similar to that of an idealized RISC architecture. <p> That implementation offered several improvements over the original DCG system, among them a high-level code specification interface, and the opportunity to perform static analysis to decrease the overhead of generating code at run time. tcc's contribution is to further lower the cost of code generation. Employing VCODE <ref> [6] </ref> to generate code dynamically, tcc eschews the overhead of maintaining complex data structures such as DCG's intermediate representation (based on the IR of lcc [12]) at run time.
Reference: [7] <author> D.R. Engler, M.F. Kaashoek, and J. O'Toole Jr. Exokernel: </author> <title> an operating system architecture for application-specific resource management. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 251-266, </pages> <address> Copper Mountain, CO, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Dynamic code generation improves the performance of software by enabling the use of information unavailable at compile time. It has been widely applied by the language and systems communities to improve the performance of everything from operating systems <ref> [1, 7, 18, 19] </ref> to windowing operations [17], dynamically typed languages [2, 4, 13], simulators [21, 25, 23] and matrix manipulations [8]. `C [5] is a superset of ANSI C that makes dynamic code generation both practical and efficient.
Reference: [8] <author> D.R. Engler and T.A. Proebsting. </author> <title> DCG: An efficient, retar-getable dynamic code generation system. </title> <booktitle> In 6th International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 263-272, </pages> <address> San Jose, CA, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: It has been widely applied by the language and systems communities to improve the performance of everything from operating systems [1, 7, 18, 19] to windowing operations [17], dynamically typed languages [2, 4, 13], simulators [21, 25, 23] and matrix manipulations <ref> [8] </ref>. `C [5] is a superset of ANSI C that makes dynamic code generation both practical and efficient. Practicality stems from the ability to specify code in a high-level, machine independent fashion, building on the facilities already available in C. <p> VCODE emits code in-place, consuming little space and requiring as few as 30 instructions per generated instruction. This is a significant improvement over many previous dynamic code generation systems, such as DCG <ref> [8] </ref> (used to implement an experimental version of `C), which manipulate relatively complex data structures at run time. By using VCODE's template-based approach, we expect the performance of dynamic code generation to improve significantly. <p> Ignoring these start and end factors, the cost of code generation is approximately 50 instructions per generated instruction. This is about six times faster than the original `C compiler, which was based on DCG <ref> [8] </ref>, but still twice as expensive as the amortized code generation cost of bare VCODE. We expect to obtain improvements by tuning the implementation and improving register allocation. 5 Related Work Dynamic code generation has been used to great advantage in the systems community. <p> most systems for dynamic code generation have been ad-hoc, hard to program and retarget, and sometimes paying considerable run-time overhead. `C promises to make dynamic code generation easier and more practical. tcc will be the first mature implementation of `C [5]. `C was initially implemented to make use of DCG <ref> [8] </ref>. That implementation offered several improvements over the original DCG system, among them a high-level code specification interface, and the opportunity to perform static analysis to decrease the overhead of generating code at run time. tcc's contribution is to further lower the cost of code generation.
Reference: [9] <author> C. W. Fraser and D. R. Hanson. </author> <title> A retargetable C compiler: design and implementation. </title> <publisher> Benjamin/Cummings Publishing Co., </publisher> <address> Redwood City, CA, </address> <year> 1995. </year>
Reference-contexts: This solution can improve the performance of generated code without adding much to run-time costs or the complexity of the code generator. 3 tcc: a Compiler for `C This section describes in some detail the current implementation of tcc. The base on which tcc is being developed is lcc <ref> [12, 9] </ref>. We chose lcc because it is a simple, production-quality C compiler with a relatively large user base. Although it performs no global optimizations, lcc emits code of fair quality by relying on local common subexpression elimination and other peephole optimizations.
Reference: [10] <author> Christopher W. Fraser, David R. Hanson, and Todd A. Proebst-ing. </author> <title> Engineering a simple, efficient code-generator generator. </title> <journal> Letters on Programming Languages and Systems, </journal> <volume> 1(3) </volume> <pages> 213-226, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Target-specific information necessary for instruction selection and code generation is specified in a machine description file which lburg <ref> [10, 11] </ref> uses to generate parts of the back end. tcc follows this general pattern, but extends it by using two back ends: one is for static code, and generates assembly directly, whereas the other is for dynamic code, and generates C code containing VCODE macros.
Reference: [11] <author> Christopher W. Fraser, Robert R. Henry, and Todd A. Proeb-sting. </author> <title> BURG fast optimal instruction selection and tree parsing. </title> <journal> SIGPLAN Notices, </journal> <volume> 27(4) </volume> <pages> 68-76, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Target-specific information necessary for instruction selection and code generation is specified in a machine description file which lburg <ref> [10, 11] </ref> uses to generate parts of the back end. tcc follows this general pattern, but extends it by using two back ends: one is for static code, and generates assembly directly, whereas the other is for dynamic code, and generates C code containing VCODE macros.
Reference: [12] <author> C.W. Fraser and D.R. Hanson. </author> <title> A code generation interface for ANSI C. </title> <type> Technical Report CS-TR-270-90, </type> <institution> Princeton University, Dept. of Computer Science, Princeton, </institution> <address> New Jersey, </address> <month> July </month> <year> 1990. </year>
Reference-contexts: This solution can improve the performance of generated code without adding much to run-time costs or the complexity of the code generator. 3 tcc: a Compiler for `C This section describes in some detail the current implementation of tcc. The base on which tcc is being developed is lcc <ref> [12, 9] </ref>. We chose lcc because it is a simple, production-quality C compiler with a relatively large user base. Although it performs no global optimizations, lcc emits code of fair quality by relying on local common subexpression elimination and other peephole optimizations. <p> Employing VCODE [6] to generate code dynamically, tcc eschews the overhead of maintaining complex data structures such as DCG's intermediate representation (based on the IR of lcc <ref> [12] </ref>) at run time. Many languages, such as most Lisp dialects [20, 22], Tcl [16], and Perl [24], provide an eval operation that allows code to be generated dynamically. This approach is flexible but has a high run-time cost, since these languages are dynamically typed.
Reference: [13] <author> U. H olzle and D. Ungar. </author> <title> Optimizing dynamically-dispatched calls with run-time type feedback. </title> <booktitle> In Proceedings of the SIG-PLAN '94 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 326-335, </pages> <address> Orlando, Florida, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: It has been widely applied by the language and systems communities to improve the performance of everything from operating systems [1, 7, 18, 19] to windowing operations [17], dynamically typed languages <ref> [2, 4, 13] </ref>, simulators [21, 25, 23] and matrix manipulations [8]. `C [5] is a superset of ANSI C that makes dynamic code generation both practical and efficient. Practicality stems from the ability to specify code in a high-level, machine independent fashion, building on the facilities already available in C.
Reference: [14] <author> M. Leone and P. Lee. </author> <title> Lightweight run-time code generation. </title> <booktitle> In Proceedings of the Workshop on Partial Evaluation and Semantics-Based Program Manipulation, </booktitle> <pages> pages 97-106, </pages> <address> Copenhagen, Denmark, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: This approach is flexible but has a high run-time cost, since these languages are dynamically typed. Consel and No el [3] describe a technique for specializing programs with respect to run-time invariants. Their system exploits user-annotated run-time constants, using templates to dynamically emit specialized code. Similarly, Leone and Lee <ref> [14, 15] </ref> use programmer-supplied hints to perform compile-time specialization in a first-order subset of ML, with good results. Like tcc, both of these systems use templates to achieve low code generation costs.
Reference: [15] <author> M. Leone and P. Lee. </author> <title> Optimizing ML with run-time code generation. </title> <booktitle> In Proceedings of the ACM SIGPLAN '96 Conference on Programming Language Design and Implementation, </booktitle> <address> Philadelphia, PA, </address> <month> may </month> <year> 1996. </year> <note> (To appear). </note>
Reference-contexts: This approach is flexible but has a high run-time cost, since these languages are dynamically typed. Consel and No el [3] describe a technique for specializing programs with respect to run-time invariants. Their system exploits user-annotated run-time constants, using templates to dynamically emit specialized code. Similarly, Leone and Lee <ref> [14, 15] </ref> use programmer-supplied hints to perform compile-time specialization in a first-order subset of ML, with good results. Like tcc, both of these systems use templates to achieve low code generation costs.
Reference: [16] <author> J.K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley Professional Computing Series. Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: Employing VCODE [6] to generate code dynamically, tcc eschews the overhead of maintaining complex data structures such as DCG's intermediate representation (based on the IR of lcc [12]) at run time. Many languages, such as most Lisp dialects [20, 22], Tcl <ref> [16] </ref>, and Perl [24], provide an eval operation that allows code to be generated dynamically. This approach is flexible but has a high run-time cost, since these languages are dynamically typed. Consel and No el [3] describe a technique for specializing programs with respect to run-time invariants.
Reference: [17] <author> R. Pike, B.N. Locanthi, and J.F. Reiser. </author> <title> Hardware/software trade-offs for bitmap graphics on the Blit. </title> <journal> SoftwarePractice and Experience, </journal> <volume> 15(2) </volume> <pages> 131-151, </pages> <month> February </month> <year> 1985. </year>
Reference-contexts: 1 Introduction Dynamic code generation improves the performance of software by enabling the use of information unavailable at compile time. It has been widely applied by the language and systems communities to improve the performance of everything from operating systems [1, 7, 18, 19] to windowing operations <ref> [17] </ref>, dynamically typed languages [2, 4, 13], simulators [21, 25, 23] and matrix manipulations [8]. `C [5] is a superset of ANSI C that makes dynamic code generation both practical and efficient.
Reference: [18] <author> C. Pu, T. Autry, A. Black, C. Consel, C. Cowan, J. Inouye, L. Kethana, J. Walpole, and K. Zhang. </author> <title> Optimistic incremental specialization: streamlining a commerical operating system. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <address> Copper Mountain, CO, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Dynamic code generation improves the performance of software by enabling the use of information unavailable at compile time. It has been widely applied by the language and systems communities to improve the performance of everything from operating systems <ref> [1, 7, 18, 19] </ref> to windowing operations [17], dynamically typed languages [2, 4, 13], simulators [21, 25, 23] and matrix manipulations [8]. `C [5] is a superset of ANSI C that makes dynamic code generation both practical and efficient.
Reference: [19] <author> C. Pu, H. Massalin, and J. Ioannidis. </author> <title> The Synthesis kernel. </title> <journal> Computing Systems, </journal> <volume> 1(1) </volume> <pages> 11-32, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction Dynamic code generation improves the performance of software by enabling the use of information unavailable at compile time. It has been widely applied by the language and systems communities to improve the performance of everything from operating systems <ref> [1, 7, 18, 19] </ref> to windowing operations [17], dynamically typed languages [2, 4, 13], simulators [21, 25, 23] and matrix manipulations [8]. `C [5] is a superset of ANSI C that makes dynamic code generation both practical and efficient.
Reference: [20] <editor> J. Rees, W. Clinger (editors), et al. </editor> <title> Revised 4 report on the algorithmic language Scheme. </title> <institution> AIM 848b, MIT AI Lab, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: Employing VCODE [6] to generate code dynamically, tcc eschews the overhead of maintaining complex data structures such as DCG's intermediate representation (based on the IR of lcc [12]) at run time. Many languages, such as most Lisp dialects <ref> [20, 22] </ref>, Tcl [16], and Perl [24], provide an eval operation that allows code to be generated dynamically. This approach is flexible but has a high run-time cost, since these languages are dynamically typed. Consel and No el [3] describe a technique for specializing programs with respect to run-time invariants.
Reference: [21] <author> M. Rosenblum, S. A. Herrod, E. Witchel, and A. Gupta. </author> <title> Complete computer simulation: The SimOS approach. </title> <booktitle> IEEE Parallel and Distributed Technology, </booktitle> <month> Fall </month> <year> 1995. </year>
Reference-contexts: It has been widely applied by the language and systems communities to improve the performance of everything from operating systems [1, 7, 18, 19] to windowing operations [17], dynamically typed languages [2, 4, 13], simulators <ref> [21, 25, 23] </ref> and matrix manipulations [8]. `C [5] is a superset of ANSI C that makes dynamic code generation both practical and efficient. Practicality stems from the ability to specify code in a high-level, machine independent fashion, building on the facilities already available in C.
Reference: [22] <author> G.L. Steele Jr. </author> <title> Common Lisp. </title> <note> Digital Press, second edition, </note> <year> 1990. </year>
Reference-contexts: Employing VCODE [6] to generate code dynamically, tcc eschews the overhead of maintaining complex data structures such as DCG's intermediate representation (based on the IR of lcc [12]) at run time. Many languages, such as most Lisp dialects <ref> [20, 22] </ref>, Tcl [16], and Perl [24], provide an eval operation that allows code to be generated dynamically. This approach is flexible but has a high run-time cost, since these languages are dynamically typed. Consel and No el [3] describe a technique for specializing programs with respect to run-time invariants.
Reference: [23] <author> J.E. Veenstra and R.J. Fowler. MINT: </author> <title> a front end for efficient simulation of shared-memory multiprocessors. </title> <booktitle> In Modeling and Simulation of Computers and Telecommunications Systems, </booktitle> <year> 1994. </year>
Reference-contexts: It has been widely applied by the language and systems communities to improve the performance of everything from operating systems [1, 7, 18, 19] to windowing operations [17], dynamically typed languages [2, 4, 13], simulators <ref> [21, 25, 23] </ref> and matrix manipulations [8]. `C [5] is a superset of ANSI C that makes dynamic code generation both practical and efficient. Practicality stems from the ability to specify code in a high-level, machine independent fashion, building on the facilities already available in C.
Reference: [24] <author> Larry Wall. </author> <title> The Perl Programming Language. </title> <publisher> Prentice Hall Software Series, </publisher> <year> 1994. </year>
Reference-contexts: Employing VCODE [6] to generate code dynamically, tcc eschews the overhead of maintaining complex data structures such as DCG's intermediate representation (based on the IR of lcc [12]) at run time. Many languages, such as most Lisp dialects [20, 22], Tcl [16], and Perl <ref> [24] </ref>, provide an eval operation that allows code to be generated dynamically. This approach is flexible but has a high run-time cost, since these languages are dynamically typed. Consel and No el [3] describe a technique for specializing programs with respect to run-time invariants.
Reference: [25] <author> E. Witchel and M. Rosenblum. Embra: </author> <title> Fast and flexible machine simulation. </title> <booktitle> In SIGMETRICS, </booktitle> <address> Philadelphia, PA, </address> <year> 1996. </year> <note> (To appear). </note>
Reference-contexts: It has been widely applied by the language and systems communities to improve the performance of everything from operating systems [1, 7, 18, 19] to windowing operations [17], dynamically typed languages [2, 4, 13], simulators <ref> [21, 25, 23] </ref> and matrix manipulations [8]. `C [5] is a superset of ANSI C that makes dynamic code generation both practical and efficient. Practicality stems from the ability to specify code in a high-level, machine independent fashion, building on the facilities already available in C.
References-found: 25

