URL: ftp://st.cs.uiuc.edu/pub/papers/frameworks/designing-reusable-classes.ps
Refering-URL: http://st-www.cs.uiuc.edu/users/johnson/frameworks.html
Root-URL: http://www.cs.uiuc.edu
Title: Designing Reuseable Classes  
Author: Ralph E. Johnson Brian Foote 
Date: 1988 August 26, 1991  
Note: Journal of Object-Oriented Programming June/July  
Affiliation: Department of Computer Science University of Illinois, Urbana-Champaign  
Abstract: Object-oriented programming is as much a different way of designing programs as it is a different way of designing programming languages. This paper describes what it is like to design systems in Smalltalk. In particular, since a major motivation for object-oriented programming is software reuse, this paper describes how classes are developed so that they will be reuseable.
Abstract-found: 1
Intro-found: 1
Reference: [AC84] <institution> Inc. Apple Computer. Lisa Toolkit 3.0. Apple Computer, </institution> <address> Cuper-tino, CA, </address> <year> 1984. </year>
Reference: [Ale87] <author> James H. Alexander. </author> <title> Paneless panes for smalltalk windows. </title> <booktitle> In OOPSLA'87, </booktitle> <year> 1987. </year>
Reference: [BC86a] <author> Kent Beck and Ward Cunningham. </author> <title> The Literate Program Browser. </title> <type> Technical Report, </type> <institution> Tektronix, </institution> <year> 1986. </year>
Reference: [BC86b] <author> Kent Beck and Ward Cunningham. </author> <title> Using the Diagramming Debugger. </title> <type> Technical Report, </type> <institution> Tektronix, </institution> <year> 1986. </year>
Reference: [Boo86] <author> Grady Booch. </author> <title> Software Engineering with Ada. </title> <address> Ben-jamin/Cummings, Menlo Park, CA, </address> <year> 1986. </year>
Reference: [Boo87] <author> Grady Booch. </author> <title> Software Components with Ada: Structures, Tools, and Subsystems. </title> <address> Benjamin/Cummings, Menlo Park, CA, </address> <year> 1987. </year>
Reference: [CB86] <author> Ward Cunningham and Kent Beck. </author> <title> ScrollController Explained: An Example of Literate Programming in Smalltalk. </title> <type> Technical Report, </type> <institution> Tektronix, </institution> <year> 1986. </year>
Reference: [Dij82] <author> Edsger W. Dijkstra. </author> <title> How Do We Tell Truths that Might Hurt?, </title> <address> pages 129-131. </address> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1982. </year> <month> 24 </month>
Reference: [Eri87] <author> Stewart Ericson. FOIBLE: </author> <title> A Framework for Object-Oriented In--teractive Box and Line Environments. </title> <type> Master's thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1987. </year>
Reference: [Fis87] <author> Gerhard Fischer. </author> <title> Cognitive view of reuse and redesign. </title> <journal> IEEE Software, </journal> <volume> 4(4) </volume> <pages> 60-72, </pages> <year> 1987. </year>
Reference: [Foo88] <author> Brian Foote. </author> <title> Designing to Facilitate Change with Object-Oriented Frameworks. </title> <type> Master's thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1988. </year>
Reference: [GB81] <author> Ira P. Goldstein and Daniel G. Bobrow. PIE: </author> <title> An Experimental Personal Information Environment. </title> <type> Technical Report CSL-81-4, </type> <institution> Xerox Palo Alto Research Center, </institution> <year> 1981. </year>
Reference: [Gol84] <author> Adele Goldberg. </author> <title> Smalltalk-80: The Interactive Programming Environment. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1984. </year>
Reference: [GR83] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk-80: The Language and its Implementation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1983. </year>
Reference: [HO87] <author> Daniel C. Halbert and Patrick D. O'Brien. </author> <title> Using types and inheritance in object-oriented programs. </title> <journal> IEEE Software, </journal> <note> to appear, </note> <year> 1987. </year>
Reference-contexts: One way this can be 19 done is to access all variables by sending messages. The data representation can be changed by redefining the accessing messages. Rule 8 Subclasses should be specializations. There are several different ways that inheritance can be used <ref> [HO87] </ref>. Specialization is the ideal that is usually described, where the elements of the subclass can all be thought of as elements of the superclass. Usually the subclass will not redefine any of the inherited methods, but will add new methods.
Reference: [Joh86] <author> Ralph E. Johnson. </author> <title> Type-checking Smalltalk. </title> <booktitle> In Proceedings of OOPSLA `86, Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 315-321, </pages> <month> November </month> <year> 1986. </year> <note> printed as SIG-PLAN Notices, 21(11). </note>
Reference: [Lis87] <author> Barbara Liskov Keynote Address. </author> <title> Data Abstraction and Hierarchy. </title> <booktitle> In OOPSLA `87 Addendum to the Proceedings, </booktitle> <pages> pp. </pages> <note> 17-34 October 1987 (printed as SIGPLAN Notices 23(5)). </note>
Reference: [LS80] <author> Ware Meyers. </author> <title> Interview with Wilma Osborne. </title> <booktitle> IEEE Software 5(3): </booktitle> <pages> 104-105, </pages> <year> 1988 </year>
Reference: [OBHS86] <author> Tim O'Shea, Kent Beck, Dan Halbert, and Kurt J. Schmucker. </author> <title> Panel on: the learnability of object-oriented programming systems. </title> <booktitle> In Proceedings of OOPSLA `86, Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 502-504, </pages> <month> November </month> <year> 1986. </year> <journal> printed as SIGPLAN Notices, </journal> <volume> 21(11). </volume> <pages> 25 </pages>
Reference: [Roc86] <author> Roxanna Rochat. </author> <title> In Search of Good Smalltalk Programming Style. </title> <type> Technical Report CR-86-19, </type> <institution> Tektronix, </institution> <year> 1986. </year>
Reference: [SCB*86] <author> Craig Schaffert, Topher Cooper, Bruce Bullis, Mike Kilian, and Carrie Wilpolt. </author> <title> An introduction to trellis/owl. </title> <booktitle> In Proceedings of OOPSLA `86, Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 9-16, </pages> <month> November </month> <year> 1986. </year> <journal> printed as SIGPLAN Notices, </journal> <volume> 21(11). </volume>
Reference-contexts: An abstract definition is that anywhere the superclass is used, the subclass can be used. Thus, a subclass has a superset of the behavior of its superclass. A more concrete definition is given by the subtype compatibility rules of Trellis/Owl <ref> [SCB*86] </ref>. Of course, it is difficult to check type compatibility rules in an untyped language like Smalltalk, but they can be checked by hand. In the middle of a project, it may be useful for a designer to make subclasses that are not specializations of their superclasses.
Reference: [Sch86] <author> Kurt J. Schmucker. </author> <title> Object-Oriented Programming for the Macintosh. </title> <publisher> Hayden Book Company, </publisher> <year> 1986. </year>
Reference: [Sei87] <editor> Ed Seidewitz. </editor> <booktitle> Object-oriented programming in smalltalk and ada. In Proceedings of OOPSLA `87, Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 202-213, </pages> <month> December </month> <year> 1987. </year> <journal> printed as SIGPLAN Notices, </journal> <volume> 22(12). </volume>
Reference: [Smi87] <author> Randall B. Smith. </author> <title> Experience with the alternate reality kit: an example of the tension between literalism and magic. </title> <booktitle> In Proceedings of CHI 87, </booktitle> <pages> pages 61-68, </pages> <month> April </month> <year> 1987. </year>
Reference: [Str86] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, MA, 1986. 26 B </address>
References-found: 25

