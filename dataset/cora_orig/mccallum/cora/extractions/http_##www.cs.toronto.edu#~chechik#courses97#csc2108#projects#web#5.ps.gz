URL: http://www.cs.toronto.edu/~chechik/courses97/csc2108/projects/web/5.ps.gz
Refering-URL: http://www.cs.toronto.edu/~chechik/courses97/csc2108/projects/web/index.html
Root-URL: http://www.cs.toronto.edu
Title: A Survey on Integrating Object-Oriented Analysis and Formal Specifications  
Author: Wei Ding 
Date: March 31, 1998  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> G Booch. </author> <title> Object-Oriented Analysis and Design with Applications. </title> <publisher> Addison-Wesley, </publisher> <address> Menlo Park, CA, </address> <note> second edition, </note> <year> 1993. </year>
Reference-contexts: A useful technique to handle this is that of packages, based on Booch's <ref> [1] </ref> class categories. Package Diagram is not a separate technique; the purpose of this approach is to create a higher-level architectural view of the class interactions. In this technique, each class is put into a single package. A class can use classes in the same package freely. <p> In this Figure, a package Portfolio Application wants to use a class inside the package Scenario Manager, thus drawing dependency to the Scenario Manager is required. How and When to Use Them Effectively Packages are a vital technique for any large scale system. Both the UML [16] and Booch <ref> [1] </ref> do not treat package diagrams as a separate technique. They are more useful in large scale system. 9 2.6 Statecharts Statecharts describe two aspects of object behaviors: how objects communicate and collaborate and how they carry out their own internal behavior.
Reference: [2] <author> Robert H. Bourdeau and Betty H. C. Cheng. </author> <title> A formal semantics for object model diagrams. </title> <journal> IEEE Transactions of Software Engineering, </journal> <month> October </month> <year> 1995. </year>
Reference-contexts: to Formalize Object Model Diagrams Although OMT provides the user with easy to understand graphical notations for expressing a wide variety of concepts central to the presentation of software requirements, it lacks of formality, and thus it cannot be evaluated of completeness, consistency, and content in requirements and design specifications <ref> [2] </ref> . Rumbaugh, et al. [15] defined the semantics of object model in part, by displaying a series of instance diagrams as examples of what a specific object model describes. An instance diagram describes how a particular set of objects relate to each other, and it describes object instances. <p> In this case, object models are formalized as algebraic specifications, and instance diagrams are 18 19 formalized as algebras. OMT semantics Object models Instance Diagrams formalized as Algebras formalized as algebraic semantics Algebraic Specifications indirectly formaliied as The formal semantics for the OMT object model notation <ref> [2] </ref> enables object model diagrams to be treated as formal specifications, and thereby overcomes many of the analytical limitations in this otherwise informal method. The formalization method describes a technique for deriving modular algebraic specifications directly form object model diagrams.
Reference: [3] <author> S Cook and J Daniel. </author> <title> Designing Object Systems: object-oriented modeling with syntropy. </title> <publisher> Prentice Hall International, </publisher> <address> Hemel Hempstead, UK, </address> <year> 1994. </year>
Reference-contexts: However, they are not very good at precise definition of the behavior. If the behavior of a single object across many use-cases is wanted, a state transition diagram might be a better choice. 5 6 2.4 Class Diagrams Class diagrams <ref> [3] </ref> is a central modeling technique that runs through nearly all object-oriented methods. Class diagrams describe types of objects in the system and various kinds of static relationships between them. <p> A type usually includes two parts: attributes and the operations. These operations are the only methods which can be operated on the attributes. Perspectives Cook and Daniels <ref> [3] </ref> suggested three perspectives that users of class diagrams might want: conceptual, specification and implementation diagrams. * Conceptual: In this case, the diagram represents the concepts in the domain under study.
Reference: [4] <author> P. J. Denning, J. B Dennis, and J. E. Qualitz. Mahines, </author> <title> Languages and Computation. </title> <address> NJ: </address> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1978. </year>
Reference-contexts: The figure also shows four many-to-one bidirectional association relationships and two unidirectional ones. 1 Terminal 6 1 ControlcenterPassenger * 1 StopAt 1 1 * 3.2 Objectcharts Objectcharts [8] is an extension to Statecharts. This notation is for specifying the behavior of object classes as state machines <ref> [4] </ref> .
Reference: [5] <author> D.Harel and A.Naamad. </author> <title> The statemate semantics of statecharts. </title> <journal> ACM Trans. Software Eng. Methodology, </journal> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: Important features of OO such as inheritance and polymorphism can be easily modeled in Statecharts. The semantics we use for OO-Statecharts is close to what has been defined in Statemate <ref> [5] </ref>. Reactions to events are step by step: the events and actions generated in one transition do not take effect until the next step, after a stable state has been reached.
Reference: [6] <author> D Harel. Statecharts: </author> <title> A visual formalism for complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <publisher> Springer-Verlag, </publisher> <address> 8 edition, </address> <year> 1987. </year>
Reference-contexts: Line and ClosedShape are varieties of shapes. A polygon consists of an ordered list of vertices, shown as an aggregation of many points. 3.3.2 OMT Dynamic Model The dynamic model of OMT is based upon Harel Statecharts <ref> [6] </ref>. This model represents control information: the sequences of events, states, and operations that occur within the system of objects.
Reference: [7] <author> David Harel and Eran Gery. </author> <title> Executable Object Modeling with Statecharts. </title> <booktitle> Computer, </booktitle> <pages> pages 31-42, </pages> <month> July </month> <year> 1997. </year>
Reference-contexts: These artifacts can only be developed from a formally specified model. Thus, various researchers set out to develop such formalisms. The one that has been used extensively is an OO extension of Statecharts. This technique consists of two parts <ref> [7] </ref> : * " Object-model diagrams specify system structure by identifying object classes and their multiplicities, object relationships and roles, and subclassing relationships.". * " Statecharts describe system behavior. <p> This notation is for specifying the behavior of object classes as state machines [4] . The approach combines object-oriented analysis and design techniques and Harel's Statecharts <ref> [7] </ref> such that it offers a formal and declarative extension to state machines. 12 Informally, an Objectchart specification of an object class can be defined as a Statechart to-gether with a set of transition specifications and a set of invariant specifications.
Reference: [8] <author> Fiona Hayes, Derek Coleman, and S. Bear. </author> <title> Introducing objectcharts or how to use statecharts in object oriented design. </title> <institution> Technical Memo ?, Information Management Lab, Hewlett Packard Laboratories, </institution> <month> November </month> <year> 1989. </year> <month> 25 </month>
Reference-contexts: The other classes contain an asterisk, which means they can have unlimited instances. The figure also shows four many-to-one bidirectional association relationships and two unidirectional ones. 1 Terminal 6 1 ControlcenterPassenger * 1 StopAt 1 1 * 3.2 Objectcharts Objectcharts <ref> [8] </ref> is an extension to Statecharts. This notation is for specifying the behavior of object classes as state machines [4] .
Reference: [9] <author> Jacobson I, Christerson M, Jonsson P., and Overgaard G. </author> <title> Object-Oriented Software Engi--neering: a use case driven approach. </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year> <title> [10] the i-logix. </title> <type> Technical report, </type> <institution> i-Logix Inc., </institution> <address> Three Riverside Drive, Andover, MA 01810. </address>
Reference-contexts: Such a document models the information for their modeling and development, but what should it look like is unclear. Jacobson <ref> [9] </ref> pushed the idea of use-cases to the center of the stage. A use-cases occurs when a user performs "a behaviorally related sequence of transactions in a dialogue with the system" [9]. <p> Jacobson <ref> [9] </ref> pushed the idea of use-cases to the center of the stage. A use-cases occurs when a user performs "a behaviorally related sequence of transactions in a dialogue with the system" [9]. Use-case diagrams provide a way of describing the external view of the system and its interactions with the outside world . The outside world is represented by actors, which are roles played by various people, or other computer systems. <p> The diagrams show a number of example objects and the messages that are passed between these objects within a use-case. Interaction diagrams come in two forms: sequence diagrams <ref> [9] </ref> and collaboration diagrams. In sequence diagram,objects are shown as vertical lines with messages as horizontal lines between them. Figure 3 shows an example of sequence diagram.
Reference: [11] <author> Tomonari Kanba and Osamu Hashimoto. U-face: </author> <title> A user interface design system based on multiview model. </title> <booktitle> In Proceedings of the Fourth International Conference on Human-Computer Interaction, volume 1 of Congress II: Design and Implementation of Interactive Systems: INTERFACE DESIGN; User Interface Design Methodology, </booktitle> <pages> pages 684-688, </pages> <year> 1991. </year>
Reference-contexts: Use cases are valuable if just kept on a database as an unstructured list. Each use-case needs a name and a few paragraphs of description. They are central to planning the evolutionary development process. They should also drive system testing. 2.3 Interaction Diagrams Interaction diagrams <ref> [11] </ref> are models that describe how a group of objects collaborate in some behavior typically a single use-case. The diagrams show a number of example objects and the messages that are passed between these objects within a use-case. Interaction diagrams come in two forms: sequence diagrams [9] and collaboration diagrams.
Reference: [12] <author> K. Lano and H. Haughton, </author> <title> editors. Object-Oriented Specification Case Studies. The Object-Oriented Series. </title> <publisher> Prentice Hall, </publisher> <address> New York, N.Y., </address> <year> 1994. </year> <title> [13] the objecttime. </title> <type> Technical report, </type> <institution> ObjectTime Limited., </institution> <address> 340 March Road Kanata, Ontario. </address>
Reference-contexts: The process model notation is not mathematically precise; it 16 17 can only be used to outline method definitions and to provide a view of the usage dependencies between methods. "It is the least well-developed model in OMT" <ref> [12] </ref> . diagram contains processes that transform data, data flows that move data, actor objects that produce and consume data, and data store objects that store data passively. All processes are drawn as ellipses containing a description of the transformation, usually its name.
Reference: [14] <author> Rational rose. </author> <type> Technical report, </type> <institution> Rational Softwares Corporation. </institution>
Reference-contexts: Each diagram allows the user to focus on a different aspect of the model, simplifying the design process. 5.2 Rational Rose Rational Rose <ref> [14] </ref> is a graphical component modeling and development tool that enables organizations both to model software applications that meet current business needs and to evolve them easily as new requirements emerge.
Reference: [15] <author> J. Rumbaugh, M. Blaha, W. Premerlani, F. Eddy, and W. Lorensen. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1991. </year>
Reference-contexts: Instead, the new approach uses a simple primitive in which service request and complete service execution are treated as a single atomic event. 3.3 The Object Modeling Technique Object Modeling Technique (OMT), developed by J. Rumbaugh <ref> [15] </ref> , can be seen as a a design methodology which consists of a collection of predefined techniques and notational conventions in order to support the process, which consists of several phases (e.g. analysis, design and implementation) for the organized production of software. <p> Of course, it is always possible to create bad designs in which the three models are so intertwined that they cannot be separated, but a good design isolates the different aspects of a system and limits the coupling between them. 3.3.1 OMT Object Model OMT Object model <ref> [15] </ref> describes the static structure of its objects, classes, and their relationships to each another. It is the most fundamental one among the three models, because it provides the essential framework into which the dynamic and functional models can be placed. <p> This model represents control information: the sequences of events, states, and operations that occur within the system of objects. The dynamic model controls which operations are performed and the order in which they are applied. 3.3.3 OMT Functional Model Functional models <ref> [15] </ref> in OMT specify how operations derive output values from their input values, without regard to the order of computation. They consist of data flow diagrams (DFD) with directed named edges linking process nodes to process nodes or linking process and data nodes. <p> Rumbaugh, et al. <ref> [15] </ref> defined the semantics of object model in part, by displaying a series of instance diagrams as examples of what a specific object model describes. An instance diagram describes how a particular set of objects relate to each other, and it describes object instances.
Reference: [16] <institution> Technical report, Rational Software Corporation. </institution> <month> 26 </month>
Reference-contexts: In this Figure, a package Portfolio Application wants to use a class inside the package Scenario Manager, thus drawing dependency to the Scenario Manager is required. How and When to Use Them Effectively Packages are a vital technique for any large scale system. Both the UML <ref> [16] </ref> and Booch [1] do not treat package diagrams as a separate technique. They are more useful in large scale system. 9 2.6 Statecharts Statecharts describe two aspects of object behaviors: how objects communicate and collaborate and how they carry out their own internal behavior. <p> notation of external classes has also been introduced to allow for the incorporation of algebraic specifications that have no graphical specification. 4 Third Generation Modeling Techniques Both UML and ROOM are third-generation modeling methodologies for analyzing and specifying object-oriented systems. 4.1 The Unified Modeling Language The Unified Modeling Language (UML) <ref> [16] </ref> is a third-generation method for specifying, visualizing, and documenting the artifacts of an object-oriented system under development. The first-generation specifying method is called object-oriented analysis and design (OOA & D), and the second-generation specifying method is by Booch and Rumbaugh (e.g. OMT).
References-found: 14

