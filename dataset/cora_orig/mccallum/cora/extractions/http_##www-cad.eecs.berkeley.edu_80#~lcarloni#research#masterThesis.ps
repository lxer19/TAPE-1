URL: http://www-cad.eecs.berkeley.edu:80/~lcarloni/research/masterThesis.ps
Refering-URL: http://www-cad.eecs.berkeley.edu:80/~lcarloni/research/papersIndex.html
Root-URL: 
Title: Negative Thinking In Search Problems  
Author: by Luca P. Carloni Alberto L. Sangiovanni-Vincentelli 
Degree: Advisor Date Professor Robert K. Brayton  
Affiliation: Research  
Note: Professor  Date  
Abstract: Research Project Submitted to the Department of Electrical Engineering and Computer Sciences, University of Cali-fornia at Berkeley, in partial satisfaction of the requirements for the degree of Master of Science, Plan II. Approval for the Report and Comprehensive Examination: Committee: 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> O. Coudert and J. Madre, </author> <title> New ideas for solving covering problems, </title> <booktitle> in The Proceedings of the Design Automation Conference, </booktitle> <pages> pp. 641-646, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: In [8] an example of size O (n 2 ) is given, whose minimal solution has cost O (n), but whose lower bound by independent set is 1. In practice a lower bound by independent set is poor when the covering matrix is dense. 5.2 Limit Lower Bound In <ref> [1] </ref> new rules to prune the search space were introduced. One such rule, called limit lower bound, has been shown of great effectiveness in practice. <p> Experimental results in <ref> [1] </ref> on exact two-level minimization show strong gains by this new pruning technique, resulting in reductions of the search space up to three orders of magnitude. Fig. 5.1 shows the branch-and-bound algorithm of Fig. 2.1 enhanced by the limit lower bound. <p> Coudert. The program SCHERZO is the most effective solver of UCP previously reported. Its main features described in the literature <ref> [1, 8, 6] </ref> include a better heuristic selection of the M SIR, logarithmic lower bound, left hand side lower bound, limit lower bound, and partition-based pruning. <p> This suggests that more powerful lower bounding would speed up the search dramatically, as shown by the introduction of the limit lower bound <ref> [1] </ref>. Our approach is more radical because when we are dealing with a subspace of solutions unlikely to improve the upper bound, we switch the search strategy to a different one geared to raise the lower bound.
Reference: [2] <author> T. Kam, T. Villa, R. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> Synthesis of FSMs: Functional Optimization. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1996. </year>
Reference-contexts: A complete survey of the covering problem from the perspective of the logic synthesis community can be found in the fifth chapter of the book Synthesis of Finite State Machines: Functional Optimization by T. Kam et. al. <ref> [2] </ref>. An exact solution of the covering problem is obtained by a branch-and-bound recursive algorithm, which has been implemented in successful computer programs [3, 4]. Branching is done by columns, i.e., subproblems are generated by considering whether a chosen branching column is or is not in the solution. <p> The parts of text in bold font refer to the incremental solver and will be explained below. For details the reader is referred to <ref> [2] </ref>. Given a matrix A, existing U CP solvers employ column branching to decompose the problem and use a maximal set of independent (non-intersecting) rows (M SI R) to compute a lower bound of U CP (A) (since no column covers two rows from M SI R). <p> A proof can be found in <ref> [2] </ref>. In practice in the common case that all columns have cost 1 if included in a solution, one needs only to check whether A:path + A:lower + 1 A:upper; If so, all the columns that do not intersect rows in the independent set I can be removed 1 .
Reference: [3] <author> R. Rudell, </author> <title> Espresso, </title> <booktitle> Computer Program, </booktitle> <year> 1987. </year>
Reference-contexts: Kam et. al. [2]. An exact solution of the covering problem is obtained by a branch-and-bound recursive algorithm, which has been implemented in successful computer programs <ref> [3, 4] </ref>. Branching is done by columns, i.e., subproblems are generated by considering whether a chosen branching column is or is not in the solution. A run of the algorithm, call it mincov, can be described by its computation tree.
Reference: [4] <editor> J.-K. Rho and F. Somenzi, Stamina, </editor> <booktitle> Computer Program, </booktitle> <year> 1991. </year>
Reference-contexts: Kam et. al. [2]. An exact solution of the covering problem is obtained by a branch-and-bound recursive algorithm, which has been implemented in successful computer programs <ref> [3, 4] </ref>. Branching is done by columns, i.e., subproblems are generated by considering whether a chosen branching column is or is not in the solution. A run of the algorithm, call it mincov, can be described by its computation tree.
Reference: [5] <author> E. I. Goldberg, L. P. Carloni, T. Villa, R. K. Brayton, and A. L. Sangiovanni-Vincentelli, </author> <title> Negative Thinking by Incremental Problem Solving: Application to Unate Covering, </title> <booktitle> in The Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pp. 91-98, </pages> <publisher> IEEE, </publisher> <month> Nov. </month> <year> 1997. </year>
Reference-contexts: The ideas discussed in this dissertation were presented for the first time at the International Conference on Computer-Aided Design (ICCAD) on November 1997 <ref> [5] </ref>. The dissertation is organized as follows. In Chapter 2 we first review briefly how UCP is solved traditionally by branch-and-bound and then we show how an incremental solver is incorporated into the standard branch-and-bound procedure for UCP. Chapter 3 describes how the solutions of UCP are represented and recomputed.
Reference: [6] <author> O. Coudert, </author> <title> Two-level logic minimization: an overview, </title> <journal> Integration, </journal> <volume> vol. </volume> <pages> 17-2, pp. 97-140, </pages> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: Note that improving the lower bound even by a small amount may lead to considerable runtime reductions. For example, in <ref> [6] </ref> a new technique for pruning the search tree called limit lower bound was reported. Sometimes this technique allows one to reduce the search tree size by ten times. <p> Notice that improving the lower bound even by a small amount may lead to considerable runtime reductions. For example, in <ref> [6] </ref> it was reported that the limit lower bound allows the pruning of some or many branches of the search tree. The effect of this modification is to reduce the runtimes for some examples 10 times and even more. <p> Coudert. The program SCHERZO is the most effective solver of UCP previously reported. Its main features described in the literature <ref> [1, 8, 6] </ref> include a better heuristic selection of the M SIR, logarithmic lower bound, left hand side lower bound, limit lower bound, and partition-based pruning.
Reference: [7] <author> R. Rudell and A. Sangiovanni-Vincentelli, </author> <title> Multiple-valued minimization for PLA optimization, </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> vol. CAD-6, </volume> <pages> pp. 727-750, </pages> <month> Sept. </month> <year> 1987. </year>
Reference-contexts: We believe that studying clusters based on different data structures, e.g., binary decision diagrams, will yield interesting results. 16 CHAPTER 3. REPRESENTATION AND RECOMPUTATION OF THE SOLUTIONS As anticipated, we represent the solutions of U CP (A) by sets with a structure of multi-valued cubes <ref> [7] </ref>. We define a cube to be the set C = D 1 fi fi D d where D i " D j = ;, i 6= j and D i Col (A), 1 i; j d. The subsets D i are the domains of cube C.
Reference: [8] <author> O. Coudert, </author> <title> On solving binate covering problems, </title> <booktitle> in The Proceedings of the Design Automation Conference, </booktitle> <pages> pp. 197-202, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Since finding a maximum independent set is an NP-complete problem, in practice a heuristic is used that provides a weaker lower bound. Notice that even the lower bound provided by solving exactly the maximum independent set problem is not sharp. In <ref> [8] </ref> an example of size O (n 2 ) is given, whose minimal solution has cost O (n), but whose lower bound by independent set is 1. <p> Coudert. The program SCHERZO is the most effective solver of UCP previously reported. Its main features described in the literature <ref> [1, 8, 6] </ref> include a better heuristic selection of the M SIR, logarithmic lower bound, left hand side lower bound, limit lower bound, and partition-based pruning.
Reference: [9] <author> T. Villa, </author> <title> Encoding Problems in Logic Synthesis. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, Electronics Research Laboratory, </institution> <month> May </month> <year> 1995. </year> <note> Memorandum No. UCB/ERL M95/41. </note>
Reference-contexts: in Table 6.1 there are difficult cases from the collection of ESPRESSO (we start from the matrix obtained by ESPRESSO after removing the essential primes), in Table 6.2 there are random generated matrices with varying row/column ratios and densities, in Table 6.3 there are matrices encoding constraints satisfaction problems from <ref> [9] </ref>. For each of these matrices, we report in Table 6.4 their size and their sparsity. The experiments were performed with a 2GB 300Mhz Alpha with timeout set to 3 days of cputime.
Reference: [10] <author> S. Liao and S. Devadas, </author> <title> Solving covering problems using LPR-based lower bounds, </title> <booktitle> in The Proceedings of the Design Automation Conference, </booktitle> <month> June </month> <year> 1997. </year> <note> 62 REFERENCES </note>
Reference-contexts: We will report on the study as soon as done. We expect to transfer to AURA the better computation of the M SIR apparently implemented in SCHERZO. We do not have a systematic comparison with the results by BCU, a recent ILP-based covering solver <ref> [10] </ref>. However, the intuition is that an algorithm based on linear programming is better suited for problems with a solution space diversified in the costs, i.e., for problems which are closer to numerical ones. To test the conjecture we asked the authors of [10] to run BCU on saucier.t, whose solution <p> by BCU, a recent ILP-based covering solver <ref> [10] </ref>. However, the intuition is that an algorithm based on linear programming is better suited for problems with a solution space diversified in the costs, i.e., for problems which are closer to numerical ones. To test the conjecture we asked the authors of [10] to run BCU on saucier.t, whose solution space is poorly diversified (a minimum solution has 6 columns, while most of the irredundant solutions cost in the range from 6 to 8).
Reference: [11] <author> M. Garey and D. Johnson, </author> <title> Computers and Intractability: A Guide to the Theory of NP-completeness. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <year> 1979. </year>
Reference-contexts: FUTURE WORK If A is given in product-of-sums form, finding a satisfying assignment is exactly the problem SAT, the prototypical N P -complete problem ( <ref> [11] </ref>). In this case it also possible to write A as an array of cubes (that form a matrix with coefficients from the set f0; 1; 2g).
Reference: [12] <author> A. Grasselli and F. Luccio, </author> <title> A method for minimizing the number of internal states in incompletely specified sequential networks, </title> <journal> IRE Transactions on Electronic Computers, </journal> <volume> vol. EC-14, </volume> <pages> pp. 350-359, </pages> <month> June </month> <year> 1965. </year>
Reference-contexts: A binate covering problem can be set up, where each column of the table is a prime compatible and each row is one of the covering or closure clauses of the problem <ref> [12] </ref>. There are as many covering clauses as states of the original machine and each of them states that a state is covered by any of the prime compatibles in which it is contained.
Reference: [13] <author> R. Brayton and F. Somenzi, </author> <title> An exact minimizer for Boolean relations, </title> <booktitle> in The Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pp. 316-319, </pages> <month> Nov. </month> <year> 1989. </year>
Reference-contexts: In the matrix representation, entry (i; j) is 1 or 0 according to the phase of the literal corresponding to prime j in clause i; if such a literal is absent the entry is 2. Various techniques have been proposed to solve binate covering problems. A class of them <ref> [13, 14] </ref> are branch-and-bound techniques that build explicitly the table of the constraints expressed as product-of-sum expressions and explore in the worst-case all possible solutions, but avoid the generation of some of the suboptimal solutions by a clever use of reduction steps.
Reference: [14] <author> L. Lavagno, </author> <title> Heuristic and exact methods for binate covering, </title> <type> EE290ls Report, </type> <month> May </month> <year> 1989. </year>
Reference-contexts: In the matrix representation, entry (i; j) is 1 or 0 according to the phase of the literal corresponding to prime j in clause i; if such a literal is absent the entry is 2. Various techniques have been proposed to solve binate covering problems. A class of them <ref> [13, 14] </ref> are branch-and-bound techniques that build explicitly the table of the constraints expressed as product-of-sum expressions and explore in the worst-case all possible solutions, but avoid the generation of some of the suboptimal solutions by a clever use of reduction steps.
Reference: [15] <author> B. Lin and F. Somenzi, </author> <title> Minimization of symbolic relations, </title> <booktitle> in The Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pp. 88-91, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: A class of them [13, 14] are branch-and-bound techniques that build explicitly the table of the constraints expressed as product-of-sum expressions and explore in the worst-case all possible solutions, but avoid the generation of some of the suboptimal solutions by a clever use of reduction steps. A second approach <ref> [15] </ref> formulates the problem with Binary Decision Diagrams (BDD's) and reduces finding a minimum cost assignment to a shortest path computation. In that case the number of variables of the BDD is the number of columns of the binate table. 7.1.
Reference: [16] <author> S.-W. Jeong and F. Somenzi, </author> <title> A new algorithm for 0-1 programming based on binary decision diagrams, </title> <booktitle> in Proceedings of ISKIT-92, International symposium on logic synthesis and microprocessor architecture, Iizuka, Japan, </booktitle> <pages> pp. 177-184, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: In that case the number of variables of the BDD is the number of columns of the binate table. 7.1. EXTENSION TO BINATE COVERING 53 A mixed technique has been proposed in <ref> [16] </ref> by Jeong and Somenzi in [16]. It is a branch-and-bound algorithm, where the clauses are represented as a conjunction of BDD's. The usage of BDD's leads to an effective method to compute a lower bound on the cost of the solution. <p> In that case the number of variables of the BDD is the number of columns of the binate table. 7.1. EXTENSION TO BINATE COVERING 53 A mixed technique has been proposed in <ref> [16] </ref> by Jeong and Somenzi in [16]. It is a branch-and-bound algorithm, where the clauses are represented as a conjunction of BDD's. The usage of BDD's leads to an effective method to compute a lower bound on the cost of the solution. Notice that unate covering is a special case of binate covering.
Reference: [17] <author> S. D. Sarkar, A. Basu, and A. Choudhury, </author> <title> Simplification of incompletely specified flow tables with the help of prime closed sets, </title> <journal> IEEE Transactions on Computers, </journal> <pages> pp. 953-956, </pages> <month> Oct. </month> <year> 1969. </year>
Reference-contexts: Therefore techniques for the latter solve also the former. In the other direction, exact state minimization, a problem naturally formulated as a binate covering problem, can be reduced to a unate covering problem, after the generation of irredundant prime closed sets <ref> [17] </ref>.
References-found: 17

