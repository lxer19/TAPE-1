URL: ftp://ftp.isi.edu/isi-pubs/rr-93-388.ps.Z
Refering-URL: http://www.isi.edu/isi-technical-reports.html
Root-URL: http://www.isi.edu
Title: Automatic Placement Tool for Rapid Prototyping of Printed Circuit Boards  
Author: John Granacki and Tauseef Kazi 
Address: 4676 Admiralty Way, Marina del Rey, CA 90292  4676 Admiralty Way Marina del Rey, CA 90292  
Affiliation: University of Southern California Information Science Institute  UNIVERSITY OF SOUTHERN CALIFORNIA INFORMATION SCIENCES INSTITUTE  
Note: An  
Pubnum: ISI/RR-93-388  
Email: Unclassified/Unlimited  
Date: November, 1993  
Abstract: An Automatic Placement Tool for Rapid Prototyping of Printed Circuit Boards 1 ISI Research Report ISI/RR-93-388 November, 1993 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Granacki, John J., </author> <title> Research in Information Science and Technology: Systems Assembly Core Research, </title> <type> Final Technical Report, </type> <institution> USC/Information Sciences Institute, </institution> <month> November, </month> <year> 1992. </year>
Reference-contexts: 1.0 Introduction We developed the nap tool as part of an ARPA-sponsored project <ref> [1] </ref> to fully automate the physical design, fabrication and assembly of a PCB from a user specified netlist, parts list and board description. One of the projects objectives is to use existing commercial and university-developed software whenever possible.
Reference: [2] <author> Spectrum staff, </author> <title> Focus report: </title> <journal> engineering software, Printed-circuit board design, IEEE Spectrum, </journal> <volume> vol. 27, </volume> <pages> pp. 82-85, </pages> <year> November,1990. </year>
Reference-contexts: Most computer-aided design tools commercially available for the physical design of printed circuit boards claim to have automatic placement capability <ref> [2] </ref>- [4]. In fact, few tools offer little more than matrix placement which is usually only useful for memory components [5]. Instead most CAD/CAE vendors emphasize interactive graphical capabilities which require the designer to place the components on the board.
Reference: [3] <author> Losquadro, </author> <title> Michele (Directories Editor), Design Guide Special: Directory of CAE Systems, </title> <journal> High Performance Systems, </journal> <volume> vol. X, </volume> <pages> pp. 92-113, </pages> <month> December, </month> <year> 1989. </year>
Reference: [4] <author> Losquadro, </author> <title> Michele (Directories Editor), Design Guide Special: </title> <journal> PCB Layou Systems, High Performance Systems, </journal> <volume> vol. XI, </volume> <pages> pp. 53-71, </pages> <month> January, </month> <year> 1990. </year>
Reference-contexts: Most computer-aided design tools commercially available for the physical design of printed circuit boards claim to have automatic placement capability [2]- <ref> [4] </ref>. In fact, few tools offer little more than matrix placement which is usually only useful for memory components [5]. Instead most CAD/CAE vendors emphasize interactive graphical capabilities which require the designer to place the components on the board.
Reference: [5] <author> Khaison, Alexander and Wadland, Kenneth R., </author> <title> Next Generation PCB Placement Tools, Printed Circuit Design, </title> <journal> vol. </journal> <volume> 8, </volume> <month> September, </month> <year> 1991 </year>
Reference-contexts: Most computer-aided design tools commercially available for the physical design of printed circuit boards claim to have automatic placement capability [2]- [4]. In fact, few tools offer little more than matrix placement which is usually only useful for memory components <ref> [5] </ref>. Instead most CAD/CAE vendors emphasize interactive graphical capabilities which require the designer to place the components on the board.
Reference: [6] <author> Saia, Michael, </author> <title> Perspectives: Placing Parts, Printed Circuit Design, </title> <journal> vol. </journal> <volume> 9, </volume> <month> March, </month> <year> 1992. </year>
Reference-contexts: Instead most CAD/CAE vendors emphasize interactive graphical capabilities which require the designer to place the components on the board. An Automatic Placement Tool for the Rapid Prototyping of Printed Circuit Boards 3 The lack of emphasis on robust fully automatic placement capabilities <ref> [6] </ref> is basically driven by lack of market demand. Early attempts to automate placement caused most experienced designer to believe that they could generally produce a more compact design with less routing layers than an automatic placement tool in a reasonable amount of time.
Reference: [7] <author> Granacki, John J., </author> <title> Printed Circuit Board Fabrication and Assembly Service: User Guide, </title> <institution> USC/Information Sciences Institute, </institution> <month> November, </month> <year> 1992. </year>
Reference-contexts: To achieve the greatest exibility for interfacing, all data required by the An Automatic Placement Tool for the Rapid Prototyping of Printed Circuit Boards 4 placement tool is stored in individual files as ASCII characters <ref> [7] </ref>. There are five required files and two optional files.
Reference: [8] <author> Shahookar, K., and Mazumder, P., </author> <title> VLSI Cell Placement Techniques, </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 23, no. 2, </volume> <pages> pp. 143-220. </pages> <month> June, </month> <year> 1991. </year>
Reference-contexts: in each are shown in Table 1 for a design identified by the string design-id.If a component/part library and a package library that were CAD-system independent were available the files: design-id.bbx and design-id.ppt would not be required. 3.0 Selection of Heuristics for this Implementation According to a recent survey article <ref> [8] </ref> heuristic algorithms for placement can generally be grouped into one of five classes: simulated annealing, force-directed placement, min-cut placement, placement by numerical optimization, and evolution-based placement.
Reference: [9] <author> Breuer, Melvin, </author> <title> Min-Cut Placement, </title> <journal> Journal Design Automation and Fault Tolerant Computing, </journal> <volume> vol. 1, </volume> <pages> pp. 343-362, </pages> <month> October, </month> <year> 1977. </year>
Reference-contexts: short run times required for most layouts and the ability to produce 100% auto-routable designs with a reasonable number of routing layers. 4.0 Detailed Description of the Implementation The implementation described in this report consists of three phases: an initial constructive phase based on quadrature placement using maximum conjunction/minimum disjunction <ref> [9] </ref> with additional consideration for component area included in the partitioning process, [10]. The initial partition which anchors the partitions to board regions is then used as the seed for an iterative improvement phase based on the Fiduccia-Mattheyses heuristic [11]. <p> It uses the constructive initial partitioning method described by Breuer <ref> [9] </ref>. nap does not have fixed slots but has a grid for the placement of the components. A component could be placed any where on the board and may take a number of grid cells. (A,B,.....,P) and two pre-placed (fixed) components (1 and 2) with zero dimension.
Reference: [10] <author> Lauther, Ulrich, </author> <title> A Min-Cut Placement Algorithm for General Cell Assemblies Based on a Graph Representation, </title> <journal> Journal of Digital Systems, </journal> <volume> vol. IV, </volume> <pages> pp. 21-35, </pages> <year> 1980. </year>
Reference-contexts: 100% auto-routable designs with a reasonable number of routing layers. 4.0 Detailed Description of the Implementation The implementation described in this report consists of three phases: an initial constructive phase based on quadrature placement using maximum conjunction/minimum disjunction [9] with additional consideration for component area included in the partitioning process, <ref> [10] </ref>. The initial partition which anchors the partitions to board regions is then used as the seed for an iterative improvement phase based on the Fiduccia-Mattheyses heuristic [11].
Reference: [11] <author> Fidducia, </author> <title> C.M. and Mattheyses, R.M., A Linear-Time Heuristic for Improving Network Partitions, </title> <booktitle> In Proceedings 19th Design Automation Conference, </booktitle> <pages> pp. 175-181. </pages> <month> ACM/IEEE June, </month> <year> 1982. </year>
Reference-contexts: The initial partition which anchors the partitions to board regions is then used as the seed for an iterative improvement phase based on the Fiduccia-Mattheyses heuristic <ref> [11] </ref>. After the iterative improvement phase is completed, a global improvement phase based on the approach used in GORDIAN [12] is applied to the resulting partitioning. Finally, the components within the globally improved partitioning are placed as close as possible to the location assigned to each partition. <p> We also know exactly which partitions contain the preplaced (fixed components like connectors, etc.) components. 4.2 The Iterative Improvement Phase Once the initial bipartitions are created they are improved using a heuristic method based on Fiduccia-Mattheyses method <ref> [11] </ref>. The method is applied on the two child partitions (left, P L and right, P R ) obtained after partitioning the parent partition. The method used here is outlined below: 1. <p> in Breuers paper does not produce an optimal placement using nap because nap does not preserve the lexical ordering of the cells when it reads in the data, producing a different non-optimal initial placement). 5.2 Comparison to Fiduccia Metheyses approach nap uses the same approach as discussed in the paper <ref> [11] </ref>, but the data structures are not the same as introduced in the paper. Secondly, the notion of a net is replaced by individual connections between chips.
Reference: [12] <author> Klienhans, J. M., Sigl, G., Johannes, F. M., and Antreich, K. J., GORDIAN: </author> <title> VLSI Placement by Quadratic Programming and Slicing Optimization, </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> vol. 10, no. 3, </volume> <pages> pp. 356-364. </pages> <month> March, </month> <year> 1991. </year>
Reference-contexts: The initial partition which anchors the partitions to board regions is then used as the seed for an iterative improvement phase based on the Fiduccia-Mattheyses heuristic [11]. After the iterative improvement phase is completed, a global improvement phase based on the approach used in GORDIAN <ref> [12] </ref> is applied to the resulting partitioning. Finally, the components within the globally improved partitioning are placed as close as possible to the location assigned to each partition.
Reference: [13] <author> Jayakumar, V., </author> <title> A Data Structure for Interactive Placement of Rectangular Objects, </title> <booktitle> In Proceedings 17th Design Automation Conference, </booktitle> <pages> pp. 237-242. </pages> <address> ACM/IEEE, </address> <month> June, </month> <year> 1980. </year>
Reference-contexts: Finally, the components within the globally improved partitioning are placed as close as possible to the location assigned to each partition. The empty spaces on the plane are represented as a set of maximum empty rectangles and the space is managed using the method described by V. Jay-akumar <ref> [13] </ref>. 4.1 The Constructive Initial Partitioning Phase In this phase, the design is bisected horizontally and vertically recursively to obtain 2 n partitions, where n is specified by the user. Constructive initial partitioning is employed here in order to build the initial bipartitions. <p> The empty spaces are represented as a set of maximum empty rectangles and the space is managed using the method similar to one described by V. Jayakumar <ref> [13] </ref>. The empty spaces are basically a set of overlapping rectangular regions. Initially there is one big rectangle equal to the size of the board. When placing a component, all rectangles are searched exhaustively to see which of the them can accommodate the component.
Reference: [14] <author> Knapp, D.W., Fasolt: </author> <title> A Program for Feedback-Driven Data Path Optimization, </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> vol. 11, no. 6, </volume> <pages> pp. 677-695. </pages> <month> June, </month> <year> 1992. </year>
Reference-contexts: We did not randomize any arbitrary choices in our heuristics to determine the noise or scatter produced by arbitrary choices as suggested by Knapp <ref> [14] </ref>. 5.1 Comparison to Breuers mincut placement algorithm nap uses the mincut algorithm to do the initial partitioning. It uses the constructive initial partitioning method described by Breuer [9]. nap does not have fixed slots but has a grid for the placement of the components. <p> Hyperedges have been represented as cliques. 7.0 Conclusions and Future Work The preliminary results presented here indicate that there is some decrease in estimated wirelength when two or more heuristics are used in combination. Due to the noise <ref> [14] </ref> caused by arbitrary choices and the limited number of experiments performed, it is not clear how the heuristics should be combined or what cost functions should be used to obtain better results, consistently over a single heuristic. <p> We think a hybrid approach would be best, that is, one that employs expert systems techniques to solve parts of the problem like grouping class of components and well known heuristics to solve the problem of where to place the group, etc. 7.6 Statistical experiments with appropriate randomization Knapp <ref> [14] </ref> points out that due to arbitrary choices (tie breakers) most heuristics may arrive at a local minimum which is relatively high compared to other local minimums. This can be avoided by using a pseudo random number generator and a different seed to explore the range of solutions.
Reference: [15] <author> Barth, Richard, Monier, Louis and Serlet, Bertrand, PATCHWORK: </author> <title> LAYOUT FROM SCHEMATIC ANNOTATIONS, </title> <booktitle> In Proceedings 25th Design Automation Conference, </booktitle> <pages> pp. 250-255. </pages> <address> ACM/IEEE, </address> <month> June, </month> <year> 1988. </year>
Reference-contexts: For example, experienced circuit designers will often layout the circuit in sections, blocks, on separate schematic sheets or hierarchically. Frequently the layout will reect the signal data ow and the signal control ow, this information could be used to orient the components <ref> [15] </ref> and place groups of components or layout the data ow path. Current PCB layout tools do not use this information. Using this information means that the placement tool must function as a oorplanning [16] tool as well as a placement tool.
Reference: [16] <author> La Potin, David P., and Director, Stephen W., Mason: </author> <title> A Global Floorplanning Approach for VLSI Design, </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> vol. 5, no. 4, </volume> <pages> pp. 477-489. </pages> <month> October, </month> <year> 1986. </year> <title> An Automatic Placement Tool for the Rapid Prototyping of Printed Circuit Boards 21 </title>
Reference-contexts: Current PCB layout tools do not use this information. Using this information means that the placement tool must function as a oorplanning <ref> [16] </ref> tool as well as a placement tool. We plan on building a prototype tool that will use this information to place the components on a printed circuit board. 7.5 Component class information PLEX [17] was an Expert system that attempted to mimic human designers to achieve a better placement.
Reference: [17] <author> Virdhagriswaran, Sankar, Levine, Sam, Fast, Scott, Pitts, Susan, PLEX: </author> <title> A Knowledge Based Placement Program for Printed Wire Boards, </title> <booktitle> In Proceedings The Third Conference on Artificial Intelligence Applications, </booktitle> <pages> pp. 302-305, </pages> <publisher> IEEE, </publisher> <year> 1987. </year>
Reference-contexts: Using this information means that the placement tool must function as a oorplanning [16] tool as well as a placement tool. We plan on building a prototype tool that will use this information to place the components on a printed circuit board. 7.5 Component class information PLEX <ref> [17] </ref> was an Expert system that attempted to mimic human designers to achieve a better placement. PLEX used a constructive approach based on reasoning but did not employ An Automatic Placement Tool for the Rapid Prototyping of Printed Circuit Boards 19 any classical CAD heuristics for placement.
Reference: [18] <author> Razaz, M. and Gan, J., </author> <title> FUZZY ALGORITHMS FOR PLACEMENT OF INTEGRATED CIRCUITS, </title> <booktitle> In Proceedings UK IT 888 Conference, </booktitle> <pages> pp. 460-463, </pages> <publisher> IEE, </publisher> <address> Hitchen, </address> <month> July </month> <year> 1988. </year>
Reference-contexts: Only one paper in the literature <ref> [18] </ref> has explored this approach for gate arrays. These researchers compared their results with a force-directed approach but only published limited comparisons so it is difficult to assess this approach. One interesting feature is the way the cost functions are defined.
References-found: 18

