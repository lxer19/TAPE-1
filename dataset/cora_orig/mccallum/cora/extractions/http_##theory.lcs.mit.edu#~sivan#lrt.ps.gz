URL: http://theory.lcs.mit.edu/~sivan/lrt.ps.gz
Refering-URL: http://theory.lcs.mit.edu/~sivan/papers.html
Root-URL: 
Note: To appear in the Journal of Computer and System Sciences.  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Aggarwal and J. S. Vitter. </author> <title> The input/ouput complexity of sorting and related problems. </title> <journal> Communications of the ACM, </journal> <volume> 31(9) </volume> <pages> 1116-1127, </pages> <year> 1988. </year>
Reference-contexts: Moreover, for many applications, a given step of the relaxation is performed only on a single level of the multigrid or on two adjacent levels. For example, one generic way to solve a discretized version of a parabolic 2-dimensional heat equation in the square domain <ref> [0; 1] </ref> 2 , as well as a wide variety of other time-dependent systems of partial differential equations, such as the Navier-Stokes equations, is to use discrete time steps, and in each time step to solve an elliptic problem on the domain. <p> The arbitrary scheduling allowed in the red-blue pebble game can be effective in reducing I/O as outlined in Section 1 for relaxation on multidimensional meshes. It has also been applied to various other problems (see <ref> [1] </ref> for examples.) Elliptic problems with constant coefficients are often solved using algorithms based on the Fast Fourier Transform rather than multigrid algorithms.
Reference: [2] <author> B. Awerbuch and D. Peleg. </author> <title> Sparse partitions. </title> <booktitle> In 31st Symposium on Foundations of Computer Science, </booktitle> <pages> pages 503-513, </pages> <year> 1990. </year>
Reference-contexts: A -neighborhood-cover <ref> [2] </ref> of G is a sequence of subgraphs G = hG 1 = (V 1 ; E 1 ); : : : ; G k = (V k ; E k )i such that for all v 2 V , there exists a G i 2 G for which N (t)
Reference: [3] <author> W.L. Briggs. </author> <title> A Multigrid Tutorial. </title> <publisher> SIAM, </publisher> <address> Philadeplphia, PA, </address> <year> 1987. </year>
Reference-contexts: Examples of linear relaxation computations include Jacobi relaxation, Gauss-Seidel relaxation, multigrid computations, and many variants of these methods <ref> [3] </ref>. (Iterative processes of the form y (t) = M (t) y (t1) + b can be transformed to an iteration of the form x (t) = A (t) x (t1) using a straightforward linear transformation.) A computer with ample primary memory can perform a linear relaxation computation by simply updating <p> For this class of problems, however, it has been found that more rapid convergence can often be obtained by performing a linear relaxation computation on a multigrid graph <ref> [3] </ref>. A multigrid graph is a hierarchy of progressively coarser meshes, as is shown in Figure 2. <p> (x; y; t i ) u (x; y; t i ) u (x; y; t i1 ) : In a common implementation of this strategy, the elliptic solver is a multigrid algorithm, in which case the entire solver can be described as a linear relaxation algorithm on a multigrid graph <ref> [3] </ref>. This algorithm consists of a number of cycles, where each cycle consists of fi (lg n) steps in which the computation proceeds level-by-level up the multigrid and then back down.
Reference: [4] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press and McGraw-Hill, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: Furthermore, we observe that the system is triangular, in that each x (i) v depends only on November 10, 1994 Out-of-Core Linear Relaxation 10 various x (j) u where j &lt; i. Consequently, we can use the back substitution method <ref> [4, Section 31.4] </ref> to determine the values for all the blocker variables. Phase 3 computes the state variables for the nonblocker vertices by performing linear relaxations in each subgraph as follows.
Reference: [5] <author> J.-W. Hong and H.T. Kung. </author> <title> I/O complexity: the red-blue pebble game. </title> <booktitle> In Proceedings of the 13th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 326-333, </pages> <year> 1981. </year>
Reference-contexts: The k-by-k mesh S is loaded into primary memory, t relaxation steps are performed, and the smaller mesh S 0 is stored to secondary memory. found is due to Pfeifer [11]. Hong and Kung <ref> [5] </ref> analyze a method for a T -step linear relaxation algorithm on a p p n mesh that uses only fi (T n= p M ) I/O's, where the primary memory has size M . The idea is illustrated in Figure 1. <p> Can the number of I/O's be reduced for this multigrid computation? We shall show in Section 5 that in the "red-blue pebble game" model for I/O proposed by Hong and Kung <ref> [5] </ref>, the answer is no, even if redundant computations are allowed. The naive algorithm is optimal. The problem is essentially that information propagates quickly in the multigrid because of its small diameter. <p> We conclude by discussing our results in the context of the "red-blue pebble game" I/O model of Hong and Kung <ref> [5] </ref>. Lemma 7 For any t p M, a 2-dimensional multigrid graph G has a (t; r; M )-blocking-cover, where r = O (t 2 ). <p> We conclude this section with a discussion of Hong and Kung's "red-blue pebble game" <ref> [5] </ref>. This pebble game is a formal model for studying the I/O requirements of out-of-core algorithms. The model assumes that an algorithm is given as a directed acyclic graph (dag) in which nodes represent intermediate values in the computation. <p> It has also been applied to various other problems (see [1] for examples.) Elliptic problems with constant coefficients are often solved using algorithms based on the Fast Fourier Transform rather than multigrid algorithms. Hong and Kung <ref> [5] </ref> showed that under the assumptions of the red-blue pebble game, the reduction in I/O for the FFT is limited to fi (lg M ). We now show that under the assumptions of the red-blue pebble game, the reduction in I/O for the multigrid computation is limited to O (1).
Reference: [6] <author> C. Kaklamanis, D. Krizanc, and S. Rao. </author> <title> New graph decompositions and fast emulations in hypercubes and butterflies. </title> <booktitle> In Proceedings of the 5th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 325-334, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Computing the blocking cover requires O (n 2 =t + nM ) work and I/O's. These theorems follow from the fact that good blocking covers can be found for planar and simplicial graphs by extending the techniques of <ref> [6] </ref> and [12]. We proceed by stating the definition of a cut cover from [6], and then we relate cut covers to blocking covers. We describe recent results from [6] and [12] that describe how to find good cut covers, and thus, how to find good blocking covers for planar and <p> These theorems follow from the fact that good blocking covers can be found for planar and simplicial graphs by extending the techniques of <ref> [6] </ref> and [12]. We proceed by stating the definition of a cut cover from [6], and then we relate cut covers to blocking covers. We describe recent results from [6] and [12] that describe how to find good cut covers, and thus, how to find good blocking covers for planar and simplicial graphs. <p> follow from the fact that good blocking covers can be found for planar and simplicial graphs by extending the techniques of <ref> [6] </ref> and [12]. We proceed by stating the definition of a cut cover from [6], and then we relate cut covers to blocking covers. We describe recent results from [6] and [12] that describe how to find good cut covers, and thus, how to find good blocking covers for planar and simplicial graphs. <p> = (V i ; E i ) of a graph G = (V; E) with vertex and edge weights w : V [ E ! f0; 1g, we define the weight of G i as w (G i ) = P P following definitions are slight modifications of definitions in <ref> [6] </ref>. <p> Kaklamanis, Krizanc, and Rao <ref> [6] </ref> have shown that for every integer `, every n-vertex planar graph has a two-color (t; O (`); t =`)-cut-cover which can be found in O (n) time.
Reference: [7] <author> R. Koch, T. Leighton, B. Maggs, S. Rao, and A. Rosenberg. </author> <title> Work-preserving emulations of fixed-connection networks. </title> <booktitle> In Proceedings of the 21st Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 227-240, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: Any general computation on a multigrid graph, however, requires an average latency of at least (N 1=2 = lg N ) <ref> [7] </ref>. Using ideas similar to the those developed in this paper, we have developed two other out-of-core numerical methods: one for Krylov space algorithms and the other for implicit linear relaxation on a line, a problem that arises from discretization of one-dimensional parabolic partial differential equations.
Reference: [8] <author> Charles E. Leiserson, Satish Rao, and Sivan Toledo. </author> <title> Efficient out-of-core algorithms for linear relaxation using blocking covers. </title> <booktitle> In 34rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 704-713, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: One can show that the lower bound we proved in Theorem 10 holds for these methods as well, and therefore only through the use of specific problem properties can one get an efficient out-of-core implementation. These extensions were discussed in a preliminary version of this paper <ref> [8] </ref>, and we plan to describe them in detail in future papers. November 10, 1994 Out-of-Core Linear Relaxation 25 Acknowledgments We would like to thank one of the referees for his helpful comments.
Reference: [9] <author> G. Miller and W. Thurston. </author> <title> Separators in two and three dimensions. </title> <booktitle> In Proceedings of the 22nd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 300-309, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Linear relaxation algorithms on such graphs can be used to solve differential equations on various d-dimensional structures <ref> [9, 10] </ref>. We begin by defining simplicial graphs formally using definitions from [9]. Definition A k-dimensional simplex, or k-simplex, is the convex hull of k + 1 affinely independent points in &lt; d . <p> Linear relaxation algorithms on such graphs can be used to solve differential equations on various d-dimensional structures [9, 10]. We begin by defining simplicial graphs formally using definitions from <ref> [9] </ref>. Definition A k-dimensional simplex, or k-simplex, is the convex hull of k + 1 affinely independent points in &lt; d . A simplicial complex is a collection of simplices closed under November 10, 1994 Out-of-Core Linear Relaxation 21 subsimplex and intersection.
Reference: [10] <author> G.L. Miller, S.-H. Teng, and S.A. Vavasis. </author> <title> A unified geometric approach to graph separators. </title> <booktitle> In Proceedings of the 32nd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 538-547, </pages> <year> 1991. </year>
Reference-contexts: Linear relaxation algorithms on such graphs can be used to solve differential equations on various d-dimensional structures <ref> [9, 10] </ref>. We begin by defining simplicial graphs formally using definitions from [9]. Definition A k-dimensional simplex, or k-simplex, is the convex hull of k + 1 affinely independent points in &lt; d .
Reference: [11] <author> C. J. Pfeifer. </author> <title> Data flow and storage allocation for the PDQ-5 program on the Philco-2000. </title> <journal> Communications of the ACM, </journal> <volume> 6(7) </volume> <pages> 365-366, </pages> <year> 1963. </year>
Reference-contexts: November 10, 1994 Out-of-Core Linear Relaxation 3 S t p p k p p n mesh. The k-by-k mesh S is loaded into primary memory, t relaxation steps are performed, and the smaller mesh S 0 is stored to secondary memory. found is due to Pfeifer <ref> [11] </ref>. Hong and Kung [5] analyze a method for a T -step linear relaxation algorithm on a p p n mesh that uses only fi (T n= p M ) I/O's, where the primary memory has size M . The idea is illustrated in Figure 1.
Reference: [12] <author> S. Plotkin, S. Rao, and W. Smith. </author> <title> Shallow excluded minors and improved graph decomposition. </title> <booktitle> In Proceedings of the 5th annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 462-470, </pages> <year> 1994. </year> <month> November 10, </month> <year> 1994 </year>
Reference-contexts: Computing the blocking cover requires O (n 2 =t + nM ) work and I/O's. These theorems follow from the fact that good blocking covers can be found for planar and simplicial graphs by extending the techniques of [6] and <ref> [12] </ref>. We proceed by stating the definition of a cut cover from [6], and then we relate cut covers to blocking covers. We describe recent results from [6] and [12] that describe how to find good cut covers, and thus, how to find good blocking covers for planar and simplicial graphs. <p> the fact that good blocking covers can be found for planar and simplicial graphs by extending the techniques of [6] and <ref> [12] </ref>. We proceed by stating the definition of a cut cover from [6], and then we relate cut covers to blocking covers. We describe recent results from [6] and [12] that describe how to find good cut covers, and thus, how to find good blocking covers for planar and simplicial graphs. <p> Kaklamanis, Krizanc, and Rao [6] have shown that for every integer `, every n-vertex planar graph has a two-color (t; O (`); t =`)-cut-cover which can be found in O (n) time. Moreover, Plotkin, Rao, and Smith <ref> [12] </ref> have recently shown that for every `, every n-vertex d-dimensional simplicial graph of constant aspect ratio has a two-color O (t; O (` O (d) lg n); t =`)- cut-cover that can be found in O (n 2 =`) time. 3 These results can be combined with Theorem 13 to
References-found: 12

