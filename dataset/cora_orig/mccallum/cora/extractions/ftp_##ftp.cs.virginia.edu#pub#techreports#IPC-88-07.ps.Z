URL: ftp://ftp.cs.virginia.edu/pub/techreports/IPC-88-07.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A SPECTRUM OF OPTIONS FOR PARALLEL SIMULATION  
Author: Paul F. Reynolds, Jr. 
Note: This research was supported in part by JPL contract 957721  
Address: Charlottesville, VA 22901  
Affiliation: Institute for Parallel Computation School of Engineering and Applied Science University of Virginia  
Date: Sept. 9, 1988  
Pubnum: IPC-TR-88-007  
Abstract-found: 0
Intro-found: 1
Reference: [Bain88] <author> Bain, W. and D. Scott, </author> <title> "An Algorithm for Time Synchronization in Distributed Discrete Event Simulation," </title> <booktitle> Proc., SCS Multi-conference, </booktitle> <address> San Diego, CA, </address> <month> Feb., </month> <year> 1988. </year>
Reference-contexts: A mix of these approaches led to the use of simulation-dependent information in order to enhance methods for advancing LP's simulation times. Nicol and Reynolds first employed this strategy in their appointment protocol [NiRe84]. More recently, Bain <ref> [Bain88] </ref> has proposed variants on this approach. Chandy and Misra have defined a framework based on conditional and unconditional knowledge for reasoning about how simulations can advance simulation time effectively [ChMi87]. Some conservative methods rely on communication topology to ensure CR and deadlock freedom. <p> Identification of acquisition intervals is what makes SRADS rely on embedded knowledge. Appointments [NiRe84] are non-aggressive, accurate and without risk. Knowledge embedding is employed extensively. Two approaches have been proposed, one employing knowledge acquisition and the other employing knowledge dissemination. The more recent protocol of Bain <ref> [Bain88] </ref> is similar. In [Nico88] Nicol discusses an implementation for a combined approach, employing both knowledge acquisition and knowledge dissemination. Moving time window [Soko88] has characteristics that depend on repairs made when out of sequence messages arrive. In essence the method processes messages aggressively within bounds.
Reference: [ChMi79] <author> Chandy, K.M. and J. Misra, </author> <title> "Distributed Simulation: A Case Study in Design and Verification of Distributed Programs," </title> <journal> IEEE Trans on Software Engineering., </journal> <volume> SE-5,5, </volume> <month> May, </month> <year> 1979, </year> <pages> 440-452. </pages>
Reference-contexts: 1. INTRODUCTION Parallel simulation, generally called distributed simulation in the literature, is concerned with the parallel execution of discrete event simulations. Beginning with the research of Chandy and Misra <ref> [ChMi79] </ref> and Peacock et al. [PeWo79], a number of approaches have been described for coordinating cooperating processes so that the outcome of a parallel simulation is the same as would occur in a more conventional sequential simulation. <p> As we shall see below, SRADS and moving time window [Soko88] have features that bridge these characterizations. A partial chronology of approaches to parallel simulation is shown in Figure 1. Parallel simulation was originally named distributed simulation in the early Chandy and Misra paper <ref> [ChMi79] </ref>. More recently distributed simulation has come to be associated with geographically distributed simulations, for example the National Testbed [Word88]. Without attempting to establish formal definitions here, we distinguish distributed simulations from parallel simulations on the basis of inter-process communication times and goals for employing multiple processors. <p> The most straight-forward extension was that proposed by Chandy and Misra [ChMi81] that employed distributed deadlock detection to identify the LP that had enough knowledge (unbeknownst to it) to proceed while not violating CR. The null message <ref> [ChMi79] </ref> and link time [PeWo79] protocols employed non-event messages to prevent deadlock. <p> DV.6: Knowledge dissemination - LP's initiate the transmission of knowledge to other LP's. Knowledge dissemination occurs when an LP sends messages to other LP's that may create the opportunity for them to make progress. Knowledge dissemination appears in a number of protocols, including Chandy and Misra's null messages <ref> [ChMi79] </ref>, Peacock, et al.'s link time algorithm [PeWo79], Nicol and Reynolds' appointments [NiRe84], and others. It can also appear in optimistic methods, e.g. in the form of anti-messages. We distinguish between two important approaches to knowledge dissemination. <p> Knowledge acquisition is not employed. Knowledge dissemination is employed in the form of anti-messages. The degree of risk varies. The variation that delays sending anti-messages [Jeff85] places successors at greater risk because they are more likely to process messages that must be rolled back. Null messages <ref> [ChMi79] </ref> are non-aggressive, accurate and without risk. They do not use knowledge embedding or knowledge acquisition. Knowledge dissemination is employed in the form of null messages. Blocking table [PeMa80] is non-aggressive, accurate and without risk. Knowledge embedding and knowledge dissemination are not employed.
Reference: [ChMi81] <author> Chandy, K.M. and J. Misra, </author> <title> "Asynchronous Distributed Simulation via a Sequence of Parallel Computations," </title> <journal> CACM, </journal> <volume> 24,4, </volume> <month> April, </month> <year> 1981, </year> <pages> 198-205. </pages>
Reference-contexts: A survey of parallel simulation appeared in [Misr86]. Examples of additional approaches generally considered conservative include the blocking table algorithm [PeMa80], deadlock detection <ref> [ChMi81] </ref>, SRADS [Reyn82], appointments [NiRe84], feed-forward [Kuma86], conditional knowledge [ChMi87] and bounded lag [Luba87]. The optimistic approach has its foundation in the time warp method [JeSo82]. Others have explored variations on the optimistic approach including [Jeff85] and [Soko88]. <p> Various approaches have come about as a result of attempting to avoid the deadlock problem. The most straight-forward extension was that proposed by Chandy and Misra <ref> [ChMi81] </ref> that employed distributed deadlock detection to identify the LP that had enough knowledge (unbeknownst to it) to proceed while not violating CR. The null message [ChMi79] and link time [PeWo79] protocols employed non-event messages to prevent deadlock. <p> Blocking table [PeMa80] is non-aggressive, accurate and without risk. Knowledge embedding and knowledge dissemination are not employed. Knowledge acquisition is employed in that LP's request simulation times from predecessors in order to increase knowledge about the future. The deadlock detection approach of <ref> [ChMi81] </ref> is non-aggressive, accurate and without risk. Knowledge embedding is not required. Knowledge dissemination and/or acquisition are employed when necessary to perform distributed deadlock detection and resolution. SRADS [Reyn82] is aggressive, potentially inaccurate and potentially with risk. Knowledge embedding is employed. Knowledge dissemination is not, but knowledge acquisition is.
Reference: [ChMi87] <author> Chandy, K.M. and J. Misra, </author> <title> "Conditional Knowledge as a basis for Distributed Simulation," </title> <type> CalTech Tech report, </type> <institution> 5251:TR:87, </institution> <month> Sept </month> <year> 1987. </year>
Reference-contexts: A survey of parallel simulation appeared in [Misr86]. Examples of additional approaches generally considered conservative include the blocking table algorithm [PeMa80], deadlock detection [ChMi81], SRADS [Reyn82], appointments [NiRe84], feed-forward [Kuma86], conditional knowledge <ref> [ChMi87] </ref> and bounded lag [Luba87]. The optimistic approach has its foundation in the time warp method [JeSo82]. Others have explored variations on the optimistic approach including [Jeff85] and [Soko88]. As we shall see below, SRADS and moving time window [Soko88] have features that bridge these characterizations. <p> Nicol and Reynolds first employed this strategy in their appointment protocol [NiRe84]. More recently, Bain [Bain88] has proposed variants on this approach. Chandy and Misra have defined a framework based on conditional and unconditional knowledge for reasoning about how simulations can advance simulation time effectively <ref> [ChMi87] </ref>. Some conservative methods rely on communication topology to ensure CR and deadlock freedom. The feed-forward approach described in [Kuma86] assumes that networks can have forks and joins but no cycles. This assumption is sufficient to demonstrate deadlock freedom for a conservative protocol. <p> As is always the case, the impact of the choice made is problem dependent. We define risk messages as messages that are the product of actions taken based on incomplete (conditional; see <ref> [ChMi87] </ref>) knowledge, or as a result of processing that leads to the transmission of out of order messages. Recall that messages can be events or information about the simulation state. <p> As an alternative, it can be gathered by a simulation protocol without direct input from the simulation or the simulation author or user. The next design variable addresses this: DV.5: Knowledge embedding Knowledge about LPs' behavioral attributes is embedded in the simulation. Chandy and Misra <ref> [ChMi87] </ref> have recently advocated embedding knowledge about a simulation into the simulation itself in order to make it perform more efficiently. <p> If no rollback occurs then the method becomes potentially inaccurate and at risk. In this sense it is akin to the SRADS protocol [REYN82]. If rollback is employed then it is accurate, in which case it is akin to time warp [JeSo82]. Conditional knowledge <ref> [ChMi87] </ref> is a loosely formed approach that advocates the use of embedded knowledge to advance the determination of unconditional knowledge. As presented, it is an accurate approach.
Reference: [Chan88] <author> Chandy, K.M., </author> <title> Private Communication. </title>
Reference-contexts: There has been some question about flexibility assumptions in these studies as well <ref> [Chan88] </ref>. An alternate method, first proposed in [PeMa80] and later expanded in [Reyn82] uses a "demand" approach, where blocked LP's use non-event messages to acquire information from other LP's, so that they may advance their simulation time (LC) without violating CR.
Reference: [FJLO88] <author> Fox, G., et al., </author> <title> "Solving Problems on Concurrent Processors," </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference: [Fuji88] <author> Fujimoto, </author> <title> R.M., "Performance Studies of Distributed Simulation Strategies," </title> <booktitle> Proc., SCS Multi-conference, </booktitle> <address> San Diego, CA, </address> <month> Feb., </month> <year> 1988. </year>
Reference: [HaDo88] <author> Hartrum, T.C. and B.J. Donlan, </author> <title> "Distributed Battle-management Simulation on a Hypercube," </title> <booktitle> Proc., SCS Multi-conference,, </booktitle> <address> San Diego, CA, </address> <month> Feb., </month> <year> 1988. </year>
Reference-contexts: We find the best view of this table is a macroscopic one. For example, no approach has proposed adaptability. Partitioning has barely been explored. It was first proposed in [NiRE84], and an implementation combining null messages and timestepped simulation was reported in <ref> [HaDo88] </ref>. In both cases partitioning was accomplished through the combination of two existing approaches. The table reflects the fact that no protocol has been designed from the outset with partitioning as a primary goal.
Reference: [JeSo82] <author> Jefferson, D. and H Sowizral, </author> <title> "Fast Concurrent Simulation Using the Time Warp Mechanism," A Rand Note, </title> <publisher> N-1906-AF. </publisher>
Reference-contexts: A survey of parallel simulation appeared in [Misr86]. Examples of additional approaches generally considered conservative include the blocking table algorithm [PeMa80], deadlock detection [ChMi81], SRADS [Reyn82], appointments [NiRe84], feed-forward [Kuma86], conditional knowledge [ChMi87] and bounded lag [Luba87]. The optimistic approach has its foundation in the time warp method <ref> [JeSo82] </ref>. Others have explored variations on the optimistic approach including [Jeff85] and [Soko88]. As we shall see below, SRADS and moving time window [Soko88] have features that bridge these characterizations. A partial chronology of approaches to parallel simulation is shown in Figure 1. <p> If an event message is awaiting processing by $LP sub j$, then $LP sub j$ will process it, even though a message with a smaller timestamp may arrive at a later time. Optimistic methods, most notably, time warp <ref> [JeSo82] </ref> and its variants, assume that rollback can be employed in order to guarantee that ultimately the outcome of the parallel simulation matches the outcome of an equivalent sequential counterpart (with allowances for non-determinism in the parallel simulation). <p> Aggressiveness is the most visible aspect of Jefferson and Sowizral's optimistic approach: time warp <ref> [JeSo82] </ref>. Time warp and optimism have come to be equated with maximal aggressiveness: if a message arrives and an LP has no other events to process, process the message. We mention, without elaboration, that there appear to be at least two interesting forms of aggressiveness: initiating and transfer. <p> SRADS). We add that the design variables are not binary. For example, adaptability has an infinite number of options on which to base decisions affecting adaptations. Similarly, knowledge dissemination has a large number of possible implementations. Optimistic methods such as time warp <ref> [JeSo82] </ref> are aggressive, accurate and with risk. They avoid the use of embedded knowledge; in fact lack of embedded knowledge is regarded as a strength. Knowledge acquisition is not employed. Knowledge dissemination is employed in the form of anti-messages. The degree of risk varies. <p> If no rollback occurs then the method becomes potentially inaccurate and at risk. In this sense it is akin to the SRADS protocol [REYN82]. If rollback is employed then it is accurate, in which case it is akin to time warp <ref> [JeSo82] </ref>. Conditional knowledge [ChMi87] is a loosely formed approach that advocates the use of embedded knowledge to advance the determination of unconditional knowledge. As presented, it is an accurate approach.
Reference: [Jeff85] <author> Jefferson, D., </author> <title> "Virtual Time," </title> <journal> ACM TOPLAS, </journal> <volume> 7,3, </volume> <month> July, </month> <year> 1985, </year> <pages> 404-425. </pages>
Reference-contexts: The optimistic approach has its foundation in the time warp method [JeSo82]. Others have explored variations on the optimistic approach including <ref> [Jeff85] </ref> and [Soko88]. As we shall see below, SRADS and moving time window [Soko88] have features that bridge these characterizations. A partial chronology of approaches to parallel simulation is shown in Figure 1. Parallel simulation was originally named distributed simulation in the early Chandy and Misra paper [ChMi79]. <p> Risk is that design variable that allows inaccurate or out-of-sequence messages to be passed on. A design decision that employs aggressiveness but no risk guarantees that all rollbacks are strictly local. Thus, there would be no need for techniques such as anti-messages <ref> [Jeff85] </ref> to cope with situations where rollbacks are not guaranteed to be contained locally. As is always the case, the impact of the choice made is problem dependent. <p> Optimistic approaches, as traditionally defined in the simulation literature, are aggressive, accurate methods that employ risk. The degree to which LP's can be at risk can vary. For example, time warp with cancellation <ref> [Jeff85] </ref>, [LCUW88] is more likely to put LP's at risk than conventional time warp. We discuss this in more detail in the next section. We note, as an aside, that there appear to be two interesting attributes of aggressiveness and risk. <p> They avoid the use of embedded knowledge; in fact lack of embedded knowledge is regarded as a strength. Knowledge acquisition is not employed. Knowledge dissemination is employed in the form of anti-messages. The degree of risk varies. The variation that delays sending anti-messages <ref> [Jeff85] </ref> places successors at greater risk because they are more likely to process messages that must be rolled back. Null messages [ChMi79] are non-aggressive, accurate and without risk. They do not use knowledge embedding or knowledge acquisition. Knowledge dissemination is employed in the form of null messages.
Reference: [Kuma86] <author> Kumar, D. </author> <title> "Simulating Feed-forward Systems Using a Network of Processors," </title> <booktitle> Annual Simulation Symposium, </booktitle> <month> Dec. </month> <year> 1985, </year> <pages> 127-144. </pages>
Reference-contexts: A survey of parallel simulation appeared in [Misr86]. Examples of additional approaches generally considered conservative include the blocking table algorithm [PeMa80], deadlock detection [ChMi81], SRADS [Reyn82], appointments [NiRe84], feed-forward <ref> [Kuma86] </ref>, conditional knowledge [ChMi87] and bounded lag [Luba87]. The optimistic approach has its foundation in the time warp method [JeSo82]. Others have explored variations on the optimistic approach including [Jeff85] and [Soko88]. As we shall see below, SRADS and moving time window [Soko88] have features that bridge these characterizations. <p> Chandy and Misra have defined a framework based on conditional and unconditional knowledge for reasoning about how simulations can advance simulation time effectively [ChMi87]. Some conservative methods rely on communication topology to ensure CR and deadlock freedom. The feed-forward approach described in <ref> [Kuma86] </ref> assumes that networks can have forks and joins but no cycles. This assumption is sufficient to demonstrate deadlock freedom for a conservative protocol.
Reference: [LCUW88] <author> Lomow, G., et al., </author> <title> "A Performance Study of Time Warp," </title> <booktitle> Proc., SCS Multi-conference,, </booktitle> <address> San Diego, CA, </address> <month> Feb., </month> <year> 1988. </year>
Reference-contexts: Optimistic approaches, as traditionally defined in the simulation literature, are aggressive, accurate methods that employ risk. The degree to which LP's can be at risk can vary. For example, time warp with cancellation [Jeff85], <ref> [LCUW88] </ref> is more likely to put LP's at risk than conventional time warp. We discuss this in more detail in the next section. We note, as an aside, that there appear to be two interesting attributes of aggressiveness and risk.
Reference: [Luba87] <author> Lubachevsky, B., </author> <title> "Bounded Lag Distributed Discrete Event Simulation", </title> <booktitle> Proc., SCS Multi-conference,, </booktitle> <address> San Diego, CA, </address> <month> Feb., </month> <year> 1988. </year>
Reference-contexts: A survey of parallel simulation appeared in [Misr86]. Examples of additional approaches generally considered conservative include the blocking table algorithm [PeMa80], deadlock detection [ChMi81], SRADS [Reyn82], appointments [NiRe84], feed-forward [Kuma86], conditional knowledge [ChMi87] and bounded lag <ref> [Luba87] </ref>. The optimistic approach has its foundation in the time warp method [JeSo82]. Others have explored variations on the optimistic approach including [Jeff85] and [Soko88]. As we shall see below, SRADS and moving time window [Soko88] have features that bridge these characterizations.
Reference: [Misr86] <author> Misra, J., </author> <title> "Distributed Discrete Event Simulation," </title> <journal> ACM Computing Surveys, </journal> <volume> 18,1, </volume> <month> March, </month> <year> 1986, </year> <pages> 39-65. </pages>
Reference-contexts: They are optimistic if processes can act on incomplete information, thus admitting the case where messages may arrive "in the past." Optimistic methods have typically required that some sort of rollback mechanism exist to allow for repair of incorrectly sequenced events. A survey of parallel simulation appeared in <ref> [Misr86] </ref>. Examples of additional approaches generally considered conservative include the blocking table algorithm [PeMa80], deadlock detection [ChMi81], SRADS [Reyn82], appointments [NiRe84], feed-forward [Kuma86], conditional knowledge [ChMi87] and bounded lag [Luba87]. The optimistic approach has its foundation in the time warp method [JeSo82].
Reference: [Nico88] <author> Nicol, </author> <title> D.M., "Parallel Discrete Event Simulation of FCFS Stochastic Queuing Networks," </title> <booktitle> Proceedings of ACM SIGPLAN PPEALS, </booktitle> <institution> Yale University, </institution> <month> July, </month> <year> 1988. </year>
Reference-contexts: Appointments [NiRe84] are non-aggressive, accurate and without risk. Knowledge embedding is employed extensively. Two approaches have been proposed, one employing knowledge acquisition and the other employing knowledge dissemination. The more recent protocol of Bain [Bain88] is similar. In <ref> [Nico88] </ref> Nicol discusses an implementation for a combined approach, employing both knowledge acquisition and knowledge dissemination. Moving time window [Soko88] has characteristics that depend on repairs made when out of sequence messages arrive. In essence the method processes messages aggressively within bounds.
Reference: [NiRe84] <author> Nicol, D.M. and P.F. Reynolds, </author> <title> "Problem Oriented Protocol Design," </title> <booktitle> ACM Winter Simulation Conference, </booktitle> <address> Dallas, Texas, </address> <month> Nov., </month> <year> 1984, </year> <pages> 471-474. </pages>
Reference-contexts: A survey of parallel simulation appeared in [Misr86]. Examples of additional approaches generally considered conservative include the blocking table algorithm [PeMa80], deadlock detection [ChMi81], SRADS [Reyn82], appointments <ref> [NiRe84] </ref>, feed-forward [Kuma86], conditional knowledge [ChMi87] and bounded lag [Luba87]. The optimistic approach has its foundation in the time warp method [JeSo82]. Others have explored variations on the optimistic approach including [Jeff85] and [Soko88]. <p> A mix of these approaches led to the use of simulation-dependent information in order to enhance methods for advancing LP's simulation times. Nicol and Reynolds first employed this strategy in their appointment protocol <ref> [NiRe84] </ref>. More recently, Bain [Bain88] has proposed variants on this approach. Chandy and Misra have defined a framework based on conditional and unconditional knowledge for reasoning about how simulations can advance simulation time effectively [ChMi87]. Some conservative methods rely on communication topology to ensure CR and deadlock freedom. <p> Knowledge dissemination occurs when an LP sends messages to other LP's that may create the opportunity for them to make progress. Knowledge dissemination appears in a number of protocols, including Chandy and Misra's null messages [ChMi79], Peacock, et al.'s link time algorithm [PeWo79], Nicol and Reynolds' appointments <ref> [NiRe84] </ref>, and others. It can also appear in optimistic methods, e.g. in the form of anti-messages. We distinguish between two important approaches to knowledge dissemination. <p> We have summarized the classification of major approaches to parallel simulation in the table in figure 2. We find the best view of this table is a macroscopic one. For example, no approach has proposed adaptability. Partitioning has barely been explored. It was first proposed in <ref> [NiRE84] </ref>, and an implementation combining null messages and timestepped simulation was reported in [HaDo88]. In both cases partitioning was accomplished through the combination of two existing approaches. The table reflects the fact that no protocol has been designed from the outset with partitioning as a primary goal. <p> Knowledge dissemination is not, but knowledge acquisition is. SRADS assumes that acquisition can be performed at periodic intervals such that accuracy is guaranteed, or that inaccuracies can be controlled by adjusting acquisition intervals. Identification of acquisition intervals is what makes SRADS rely on embedded knowledge. Appointments <ref> [NiRe84] </ref> are non-aggressive, accurate and without risk. Knowledge embedding is employed extensively. Two approaches have been proposed, one employing knowledge acquisition and the other employing knowledge dissemination. The more recent protocol of Bain [Bain88] is similar. <p> The method for disseminating or acquiring knowledge could be quite flexible and could even be adaptable. Method: Consider a method, as shown in Figure 4, that is adaptive with respect to knowledge acquisition and knowledge dissemination. The appointments method <ref> [NiRe84] </ref> assumes that LP's exchange knowledge, generated in part from embedded knowledge, for the purpose of allowing LP's to advance their simulation time non-aggressively.
Reference: [PeWo78] <author> Peacock, J.K., Wong, J.W. and E. Manning, </author> <title> "Distributed Simulation Using a Network of Processors," Computer Networks, 3, </title> <publisher> North Holland Pub., </publisher> <year> 1979, </year> <pages> 44-56. 14 </pages>
Reference: [PeMa80] <author> Peacock, J.K., Manning, E. and J.W. Wong, </author> <title> "Synchronization of Distributed Simulation Using Broadcast Algorithms," Computer Networks, </title> <publisher> North Holland Pub., </publisher> <year> 1980, </year> <pages> 3-10. </pages>
Reference-contexts: A survey of parallel simulation appeared in [Misr86]. Examples of additional approaches generally considered conservative include the blocking table algorithm <ref> [PeMa80] </ref>, deadlock detection [ChMi81], SRADS [Reyn82], appointments [NiRe84], feed-forward [Kuma86], conditional knowledge [ChMi87] and bounded lag [Luba87]. The optimistic approach has its foundation in the time warp method [JeSo82]. Others have explored variations on the optimistic approach including [Jeff85] and [Soko88]. <p> There has been some question about flexibility assumptions in these studies as well [Chan88]. An alternate method, first proposed in <ref> [PeMa80] </ref> and later expanded in [Reyn82] uses a "demand" approach, where blocked LP's use non-event messages to acquire information from other LP's, so that they may advance their simulation time (LC) without violating CR. <p> Null messages [ChMi79] are non-aggressive, accurate and without risk. They do not use knowledge embedding or knowledge acquisition. Knowledge dissemination is employed in the form of null messages. Blocking table <ref> [PeMa80] </ref> is non-aggressive, accurate and without risk. Knowledge embedding and knowledge dissemination are not employed. Knowledge acquisition is employed in that LP's request simulation times from predecessors in order to increase knowledge about the future. The deadlock detection approach of [ChMi81] is non-aggressive, accurate and without risk.
Reference: [ReMa87] <author> Reed, D.A., Maloney, </author> <title> A.D. and B.D. McCredie, "Parallel Discrete event Simulation: A Shared Memory Approach," </title> <booktitle> 1987 SIGMETRICS Conf on Measurement and Modeling of Computer Systems, </booktitle> <address> Banff, Alberta, Canada, </address> <month> May, </month> <year> 1987. </year>
Reference-contexts: The null message [ChMi79] and link time [PeWo79] protocols employed non-event messages to prevent deadlock. It is known that non-event messages generated in this manner can proliferate and essentially choke the simulation. (However, this is not always the case.) Studies by Reed <ref> [ReMa87, ReMa88] </ref> indicate that the null message approach is not suitable for the simulation of queuing networks, although generalization of this result is tenuous. There has been some question about flexibility assumptions in these studies as well [Chan88].
Reference: [ReMa88] <author> Reed, M.A., and A.D. Maloney, </author> <title> "Parallel Discrete Event Simulation: The Chandy-Misra Approach", </title> <booktitle> Proc., SCS Multi-conference,, </booktitle> <address> San Diego, CA, </address> <month> Feb., </month> <year> 1988. </year>
Reference-contexts: The null message [ChMi79] and link time [PeWo79] protocols employed non-event messages to prevent deadlock. It is known that non-event messages generated in this manner can proliferate and essentially choke the simulation. (However, this is not always the case.) Studies by Reed <ref> [ReMa87, ReMa88] </ref> indicate that the null message approach is not suitable for the simulation of queuing networks, although generalization of this result is tenuous. There has been some question about flexibility assumptions in these studies as well [Chan88].
Reference: [Reyn82] <author> Reynolds, P.F. </author> <title> "A Shared Resource Algorithm for Distributed Simulation," </title> <booktitle> Proc of the Ninth Annual Int'l Comp Arch Conf, </booktitle> <address> Austin, Texas, </address> <month> April, </month> <year> 1982, </year> <pages> 259-266. </pages>
Reference-contexts: A survey of parallel simulation appeared in [Misr86]. Examples of additional approaches generally considered conservative include the blocking table algorithm [PeMa80], deadlock detection [ChMi81], SRADS <ref> [Reyn82] </ref>, appointments [NiRe84], feed-forward [Kuma86], conditional knowledge [ChMi87] and bounded lag [Luba87]. The optimistic approach has its foundation in the time warp method [JeSo82]. Others have explored variations on the optimistic approach including [Jeff85] and [Soko88]. <p> There has been some question about flexibility assumptions in these studies as well [Chan88]. An alternate method, first proposed in [PeMa80] and later expanded in <ref> [Reyn82] </ref> uses a "demand" approach, where blocked LP's use non-event messages to acquire information from other LP's, so that they may advance their simulation time (LC) without violating CR. <p> The feed-forward approach described in [Kuma86] assumes that networks can have forks and joins but no cycles. This assumption is sufficient to demonstrate deadlock freedom for a conservative protocol. In terms of the variables defined below, conservative methods have traditionally been nonaggressive (SRADS <ref> [Reyn82] </ref> and a variation of moving time window [Soko88] being noted exceptions), accurate, and without risk. They have employed knowledge embedding, knowledge acquisition and knowledge dissemination. <p> If no two events in a simulation can have the same simulation time then this should be the case. There is no requirement that parallel simulation protocols always meet the accuracy definition. To date, only SRADS <ref> [Reyn82] </ref> and moving time window [Soko88] have allowed for inaccuracy to occur, although even in these cases the potential for inaccuracy is regarded as something to be avoided through other actions. However, there are some indications that a strategy employing controlled inaccuracies may produce useful results relatively efficiently [Theo84]. <p> The deadlock detection approach of [ChMi81] is non-aggressive, accurate and without risk. Knowledge embedding is not required. Knowledge dissemination and/or acquisition are employed when necessary to perform distributed deadlock detection and resolution. SRADS <ref> [Reyn82] </ref> is aggressive, potentially inaccurate and potentially with risk. Knowledge embedding is employed. Knowledge dissemination is not, but knowledge acquisition is. SRADS assumes that acquisition can be performed at periodic intervals such that accuracy is guaranteed, or that inaccuracies can be controlled by adjusting acquisition intervals. <p> Moving time window [Soko88] has characteristics that depend on repairs made when out of sequence messages arrive. In essence the method processes messages aggressively within bounds. If no rollback occurs then the method becomes potentially inaccurate and at risk. In this sense it is akin to the SRADS protocol <ref> [REYN82] </ref>. If rollback is employed then it is accurate, in which case it is akin to time warp [JeSo82]. Conditional knowledge [ChMi87] is a loosely formed approach that advocates the use of embedded knowledge to advance the determination of unconditional knowledge. As presented, it is an accurate approach.
Reference: [Soko88] <author> Sokol, L., et al. "MTW: </author> <title> A Strategy for Scheduling Discrete Events for concurrent Execution",Proc of SCS Multi-Conference," February, </title> <booktitle> 1988, </booktitle> <address> San Diego, </address> <pages> 34-42. </pages>
Reference-contexts: The optimistic approach has its foundation in the time warp method [JeSo82]. Others have explored variations on the optimistic approach including [Jeff85] and <ref> [Soko88] </ref>. As we shall see below, SRADS and moving time window [Soko88] have features that bridge these characterizations. A partial chronology of approaches to parallel simulation is shown in Figure 1. Parallel simulation was originally named distributed simulation in the early Chandy and Misra paper [ChMi79]. <p> The optimistic approach has its foundation in the time warp method [JeSo82]. Others have explored variations on the optimistic approach including [Jeff85] and <ref> [Soko88] </ref>. As we shall see below, SRADS and moving time window [Soko88] have features that bridge these characterizations. A partial chronology of approaches to parallel simulation is shown in Figure 1. Parallel simulation was originally named distributed simulation in the early Chandy and Misra paper [ChMi79]. <p> This assumption is sufficient to demonstrate deadlock freedom for a conservative protocol. In terms of the variables defined below, conservative methods have traditionally been nonaggressive (SRADS [Reyn82] and a variation of moving time window <ref> [Soko88] </ref> being noted exceptions), accurate, and without risk. They have employed knowledge embedding, knowledge acquisition and knowledge dissemination. <p> If no two events in a simulation can have the same simulation time then this should be the case. There is no requirement that parallel simulation protocols always meet the accuracy definition. To date, only SRADS [Reyn82] and moving time window <ref> [Soko88] </ref> have allowed for inaccuracy to occur, although even in these cases the potential for inaccuracy is regarded as something to be avoided through other actions. However, there are some indications that a strategy employing controlled inaccuracies may produce useful results relatively efficiently [Theo84]. <p> Knowledge embedding is employed extensively. Two approaches have been proposed, one employing knowledge acquisition and the other employing knowledge dissemination. The more recent protocol of Bain [Bain88] is similar. In [Nico88] Nicol discusses an implementation for a combined approach, employing both knowledge acquisition and knowledge dissemination. Moving time window <ref> [Soko88] </ref> has characteristics that depend on repairs made when out of sequence messages arrive. In essence the method processes messages aggressively within bounds. If no rollback occurs then the method becomes potentially inaccurate and at risk. In this sense it is akin to the SRADS protocol [REYN82].
Reference: [Theo84] <author> Theofanos, </author> <title> "Distributed Simulation of Queueing Networks," </title> <type> Master's Thesis, </type> <institution> The Univ of Virginia, </institution> <month> Jan., </month> <year> 1984. </year>
Reference-contexts: However, there are some indications that a strategy employing controlled inaccuracies may produce useful results relatively efficiently <ref> [Theo84] </ref>. It is important to distinguish accuracy from aggressiveness. Accuracy requires that ultimately all events are processed, or have the effect of having been processed, at the simulation time at which they "should" be processed. Aggressiveness does not really address this issue.
Reference: [Word88] <author> Worden, J. </author> <title> "National Testbed Program," </title> <booktitle> Proc of SCS Multi-Conference: Aerospace Simulation III," February, 1988, </booktitle> <address> San Diego, CA. </address>
Reference-contexts: A partial chronology of approaches to parallel simulation is shown in Figure 1. Parallel simulation was originally named distributed simulation in the early Chandy and Misra paper [ChMi79]. More recently distributed simulation has come to be associated with geographically distributed simulations, for example the National Testbed <ref> [Word88] </ref>. Without attempting to establish formal definitions here, we distinguish distributed simulations from parallel simulations on the basis of inter-process communication times and goals for employing multiple processors.
References-found: 24

