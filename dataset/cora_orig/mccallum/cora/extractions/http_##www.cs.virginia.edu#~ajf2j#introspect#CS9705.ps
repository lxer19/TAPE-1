URL: http://www.cs.virginia.edu/~ajf2j/introspect/CS9705.ps
Refering-URL: http://www.cs.virginia.edu/~ajf2j/research.html
Root-URL: http://www.cs.virginia.edu
Title: 1 Process Introspection: A Heterogeneous Checkpoint/Restart Mechanism Based on Automatic Code Modification  
Author: Adam J. Ferrari Stephen J. Chapin Andrew S. Grimshaw 
Date: March 25, 1997  
Address: Charlottesville, VA 22903  
Affiliation: Department of Computer Science University of Virginia  
Pubnum: Technical Report CS-97-05  
Abstract: Process Introspection is a fundamentally new solution to the process checkpoint/restart problem suitable for use in high-performance heterogeneous distributed systems. A process checkpoint/restart mechanism for such an environment has the primary requirement that it must be platform-independent: process checkpoints produced on a computer system of one architecture or operating system platform must be restartable on a computer system of a different architecture or operating system platform. The central feature of the Process Introspection approach is automatic augmentation of program code to incorporate checkpoint and restart functionality. This program modification is performed at a platform-independent intermediate level of code representation, and preserves the original program semantics. This approach has attractive properties including portability, ease of use, customizability to applicationspecific requirements, and flexibility with respect to basic performance tradeoffs. Our solution is novel in its true platform and runtime-system-independenceno system support or non-portable code is required by our core mechanisms. Recent experimental results obtained using a prototype implementation of the Process Introspection system indicate the overheads introduced by the mechanisms are acceptable for computationally demanding applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Bodin, P. Beckman, D. Gannon, J. Gotwals, S. Narayana, S. Srinivas, and B. Winnicka, Sage++: </author> <title> An ObjectOriented Toolkit and Class Library for Building Fortran and C++ Restructuring Tools, </title> <month> OONSKI , </month> <year> 1994. </year>
Reference-contexts: Fortunately, for platform-independent programs this process can be automated by a source code translator. Using the Sage++ toolkit <ref> [1] </ref>, we have implemented this idea in the APrIL compiler. The model described in section Section 2.2 stated that the input to the translator be in a universal intermediate representation. In the case of APrIL, this intermediate code is simply ANSI C.
Reference: [2] <author> J. Casas, D. L. Clark, P. S. Galbiati, R. Konuru, S. W. Otto, R. M. Prouty, J. Walpole, MIST: </author> <title> PVM with Transparent Migration and Checkpointing, </title> <booktitle> 3rd Annual PVM Users Group Meeting, </booktitle> <address> Pittsburgh, PA, </address> <month> May 7-9, </month> <year> 1995. </year>
Reference-contexts: Case 1, System Support In some cases, it is desirable or convenient for the processs environment (either operating system or metasystem) to provide some system support for checkpointing with respect to external state. For example, the MIST <ref> [2] </ref> system provides system support for checkpointing sets of processes communicating via the PVM interface. Case 2, Wrapper Modules In many environments, system support is neither available nor convenient to implement. In these cases it is desirable to embed the ability to checkpoint external state in the process itself.
Reference: [3] <author> F.B. Dubach, </author> <title> R.M. Rutherford, and C.M. Shub, ProcessOriginated Migration in a Heterogeneous Environment, </title> <booktitle> Proceedings of the ACM Computer Science Conference, </booktitle> <address> pp.98-102, </address> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: In our model, these compatible well defined states are present in the form of process states when poll points are encountered. Related implementation work done by this group integrated a limited form of heterogeneous process migration into the V system <ref> [3] </ref>. As is typical in existing approaches, this implementation relied on the operating system to examine and translate the state of the process. A novel approach to the heterogeneous state capture/restore problem was proposed by Theimer and Hayes [16].
Reference: [4] <author> R.F. Freund and D. S. Cornwell, Superconcurrency: </author> <title> A Form of Distributed Heterogeneous Supercomputing, </title> <journal> Supercomputing Review , Vol. </journal> <volume> 3, </volume> <pages> pp. 47-50, </pages> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: Despite the added complexity and challenges involved in heterogeneous distributed computing, the promise of increased performance afforded by a larger hardware base, along with the ability to increase performance by mapping subtasks of a computation to the most appropriate available hardware, called superconcurrency in Freund and Cornwell <ref> [4] </ref>, make heterogeneous computing an active and promising area of research.
Reference: [5] <author> A. Geist, A Beguelin, J. Dongarra, W. Jiang, R. Manchek, </author> <title> and V.S. Sunderam, PVM: Parallel Virtual Machine, </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: This precludes special purpose toolkits such as those appropriate only for scientific problems of a certain nature (e.g. stencil algorithms). Furthermore, the mechanism should be usable in a variety of different heteroge neous environments (e.g., a PVM environment <ref> [5] </ref>, a Condor-like system [10], etc.). 2 The Process Introspection Model We now describe the Process Introspection approach to constructing a heterogeneous process checkpoint/restart mechanism. <p> Furthermore, our mechanism is generalwe believe it could be utilized in a variety of different distributed system environments. For example, we are currently working on adapting the system for use in the Legion [9] wide-area, objectoriented distributed system, and are also investigating integration into a PVM <ref> [5] </ref> or MPI [7] system. This adaptability is explicitly supported by our PIL API which provides a medium for APrIL-transformed modules and hand-coded system-interface wrapper modules to interoperate.
Reference: [6] <author> A.S. Grimshaw, J.B.Weissman, E.A. West, and E. Loyot, </author> <title> Meta Systems: An Approach Combining Parallel Processing And Heterogeneous Distributed Computing Systems, </title> <journal> Journal of Parallel and Distributed Computing , pp. </journal> <volume> 257-270, Vol. 21, No. 3, </volume> <month> June </month> <year> 1994. </year>
Reference-contexts: Systems such as Time Warp [8] that rely on the ability to roll back a local computation to provide semantic guarantees, such as the causal ordering of message delivery, require a checkpoint/restart facility. A distributed system such as Legion <ref> [6] </ref> can use checkpoint/ restart for resource management: if the number of active entities in a system becomes greater than can be efficiently supported, the system could temporarily preempt the execution of some processes by checkpointing and destroying the processes, then later restarting them 1 .
Reference: [7] <author> W. Gropp, E. Lusk, and A. Skjellum, </author> <title> Using MPI: Portable Parallel Programming with the Message-Passing Interface, </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Furthermore, our mechanism is generalwe believe it could be utilized in a variety of different distributed system environments. For example, we are currently working on adapting the system for use in the Legion [9] wide-area, objectoriented distributed system, and are also investigating integration into a PVM [5] or MPI <ref> [7] </ref> system. This adaptability is explicitly supported by our PIL API which provides a medium for APrIL-transformed modules and hand-coded system-interface wrapper modules to interoperate.
Reference: [8] <author> D.R. Jefferson, </author> <title> Virtual Time, </title> <journal> ACM Transaction on Programming Languages and Systems , Vol. </journal> <volume> 7, No. 3, pp.404-425, </volume> <month> July </month> <year> 1985. </year>
Reference-contexts: A substantial body of research demonstrates the utility and desirability of such a mechanism. Process or object migration policies supporting load sharing and/or fault tolerance can use a process state capture facility. Systems such as Time Warp <ref> [8] </ref> that rely on the ability to roll back a local computation to provide semantic guarantees, such as the causal ordering of message delivery, require a checkpoint/restart facility.
Reference: [9] <author> M.J. Lewis, </author> <title> A.S. Grimshaw, The Core Legion Object Model, </title> <booktitle> Proceedings of IEEE High Performance Distributed Computing 5 , pp. </booktitle> <address> 551-561 Syracuse, NY, </address> <month> August 6-9, </month> <year> 1996. </year>
Reference-contexts: Furthermore, our mechanism is generalwe believe it could be utilized in a variety of different distributed system environments. For example, we are currently working on adapting the system for use in the Legion <ref> [9] </ref> wide-area, objectoriented distributed system, and are also investigating integration into a PVM [5] or MPI [7] system. This adaptability is explicitly supported by our PIL API which provides a medium for APrIL-transformed modules and hand-coded system-interface wrapper modules to interoperate.
Reference: [10] <author> M.J. Litzkow, M. Livny, and M.W. </author> <title> Mutka, CondorA Hunter of Idle Workstations, </title> <booktitle> Proceedings of the Eighth International Conference on Distributed Computing Systems , pp. </booktitle> <pages> 104-111, </pages> <year> 1988. </year>
Reference-contexts: This precludes special purpose toolkits such as those appropriate only for scientific problems of a certain nature (e.g. stencil algorithms). Furthermore, the mechanism should be usable in a variety of different heteroge neous environments (e.g., a PVM environment [5], a Condor-like system <ref> [10] </ref>, etc.). 2 The Process Introspection Model We now describe the Process Introspection approach to constructing a heterogeneous process checkpoint/restart mechanism. <p> Using wrapper routines to capture a processs external state is a technique that has been demonstrated as effective in projects such as Condor <ref> [10] </ref> and other such loadsharing tools used in homogeneous systems. 3 Implementation 3.1 Overview We have constructed a prototype implementation of the Process Introspection system consisting of a Process Introspection Library (PIL), which provides the programmer and compiler an interface for writing checkpointable modules, and a source code translator called APrIL
Reference: [11] <author> J. Robinson, S.H. Russ, B. Flachs, and B. Heckel, </author> <title> A Task Migration Implementation for the Message Passing Interface, </title> <booktitle> Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Systems , Syracuse, </booktitle> <address> NY, </address> <month> August, </month> <year> 1995. </year>
Reference: [12] <author> P. Smith and N.C. Hutchinson, </author> <title> Heterogeneous Process Migration: The Tui System, </title> <type> Technical Report, </type> <institution> University of British Columbia, </institution> <month> Feb. 28, </month> <year> 1996. </year>
Reference-contexts: Our current implementation requires only that the system interface be accessible from C code, and that it be possible to construct a checkpointable wrapper interface for system services that maintain external state for processes. A similar approach to that of heterogeneous Emerald called Tui <ref> [12] </ref> has been proposed by Smith and Hutchin-son. This approach also involves the use of compiler-generated state mapping information in the form of the symbol table typically used by symbolic debuggers. The Tui implementation has the additional desirable feature of supporting programs written in C.
Reference: [13] <author> Sun Microsystems, </author> <title> External Data Representation Reference Manual , Sun Microsystems, </title> <month> Jan. </month> <year> 1985. </year>
Reference-contexts: Sun XDR <ref> [13] </ref>). Because we stated in Section 2.2 that low-level implementations of the program may be arbitrarily optimized (with the constraint that they preserve the meaning of the program), it might seem that the correctness of our state capture mechanism is suspect.
Reference: [14] <author> Sun Microsystems, </author> <title> Java Object Serialization Specification, Revision 0.9, </title> <year> 1996. </year>
Reference-contexts: One straightforward approach is to use an interpreted language, as in the case of Java object serialization <ref> [14] </ref>. In such cases, the inter 1. This is roughly equivalent to a uniprocessor system swapping out a process to decrease the page fault rate. - 3 - preter acts as a virtual machine which can artificially homogenize a system composed of heterogeneous elements.
Reference: [15] <author> B. Steensgaard and E. </author> <month> Jul, </month> <title> Object and Native Code Thread Mobility Among Heterogeneous Computers, </title> <booktitle> SOSP 1995. </booktitle>
Reference-contexts: The first key modification to the intermediate program is the addition of poll points: points in the code at which the process determines if a checkpoint should be produced (analogous to Bus Stops in Heterogeneous Emerald <ref> [15] </ref>). At a poll point, a process can create a checkpoint if one has been requested. <p> Our approach extends this desirable feature of autonomy to include state capture as well as state restore. A more recent and fully implemented approach to the heterogeneous state capture problem was presented by Steensgaard and Jul in <ref> [15] </ref>. In this paper, the authors describe an extension of the thread and object-mobility capability of the heterogeneous Emerald distributed system to allow native code migration among heterogeneous hosts (previous implementations supported native code mobility for homogeneous hosts).
Reference: [16] <author> M.M. Theimer, and B. Hayes, </author> <title> Heterogeneous Process Migration by Recompilation, </title> <booktitle> Proceedings of the 11th International. Conference on Distributed Computing Systems , Arlington, TX, </booktitle> <pages> pp. 18-25, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: As is typical in existing approaches, this implementation relied on the operating system to examine and translate the state of the process. A novel approach to the heterogeneous state capture/restore problem was proposed by Theimer and Hayes <ref> [16] </ref>. In their proposed solution, the state of a process is examined and captured using compiler-generated symbol mapping information.
Reference: [17] <author> D.G. von Bank, C.M. Shub, and R.W. Sebesta, </author> <title> A Unified Model of Pointwise Equivalence of Procedural Computations, </title> <journal> ACM Transactions on Programming Languages and Systems , Vol. </journal> <volume> 16, No. 6, </volume> <pages> pp. 1842-1874, </pages> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: Perhaps the most general coverage of this topic is presented by von Bank, Shub, and Sebesta in <ref> [17] </ref>.
Reference: [18] <author> H. Zhou and A. </author> <title> Geist Receiver Makes Right Data Conversion in PVM, </title> <booktitle> Proceedings of 14th International Conference on Computers and Communications , Phoenix, </booktitle> <pages> pp. 458-464, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: When checkpointing memory blocks using the PIL interface, the library automatically includes in the checkpoint a description of the data formats used. Later, when the checkpoint is restored, the data format can be converted to the restarting processors representation, a protocol known as receiver-makes-right <ref> [18] </ref>. Given this approach, the library must contain routines to translate the set of basic data types from every available format to every other available format.
References-found: 18

