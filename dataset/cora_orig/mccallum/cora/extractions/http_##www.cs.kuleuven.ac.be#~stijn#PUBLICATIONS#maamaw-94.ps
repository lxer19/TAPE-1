URL: http://www.cs.kuleuven.ac.be/~stijn/PUBLICATIONS/maamaw-94.ps
Refering-URL: http://www.cs.kuleuven.ac.be/~henk/DPS/publications.html
Root-URL: 
Email: e-mail: Stijn.Bijnens@cs.kuleuven.ac.be  
Title: Language Constructs for Coordination in an Agent Space  
Author: Stijn Bijnens, Wouter Joosen, and Pierre Verbaeten 
Address: Celestijnenlaan 200A B-3001 Leuven (Belgium)  
Affiliation: Dept. of Computer Science, K.U.Leuven,  
Abstract: This paper describes an open language framework based on concurrent object-oriented programming. In this computational model, autonomous active objects are used to specify interacting agents. Although many researcher indicated the suitability of concurrent object-oriented programming as a base for multi-agent languages[Pog94, Sho93], we claim that powerful coordination constructs are needed to achieve better expressive power in the language. Our language framework supports two kinds of semantics for coordination in the agent space: 
Abstract-found: 1
Intro-found: 1
Reference: [AC93] <author> Gul Agha and Christian Callsen. ActorSpace: </author> <title> An Open Distributed Programming Paradigm. </title> <booktitle> In PPOPP'93: Principles and Practice of Parallel Programming, </booktitle> <pages> pages 23-32. </pages> <publisher> ACM Press, </publisher> <month> May </month> <year> 1993. </year>
Reference: [Agh86] <author> G. Agha. </author> <title> ACTORS: A Model of Concurrent Computation in Distributed Systems. </title> <booktitle> The MIT Press series in artificial intelligence, </booktitle> <year> 1986. </year>
Reference-contexts: Some concurrent object oriented languages keep the concept of a "process" as a separate entity (like in Emerald [RTL91] or Ada [ANSI83]); other models <ref> [Ame87, Agh86, Yon90] </ref> integrate objects and processes into one concept: active objects. This is a natural approach since objects and processes have a lot in common: encapsulation, communication through message passing, protection of private data, etc. In our computational model an agent is modelled as an autonomous active object. <p> Asynchronous object invocation. In order to maximise concurrency, the model support asynchronous object invocation by avoiding the sender to wait for the operation to complete. Many of the concurrent object-oriented computational models state asynchronous message passing as the fundamental communication model (Actors <ref> [Agh86] </ref>). Synchronisation is needed to manage concurrent activities -that is acceptance and computation of requests- within an object. A concurrent object interface can be considered as a set of correlated operations with only a subset available for execution at a particular moment [Nie93].
Reference: [Ame87] <author> Pierre America. Pool-T: </author> <title> A Parallel Object-Oriented Language. </title> <editor> In M. Tokoro and A. Yonezawa, editors, </editor> <booktitle> Object-Oriented Concurrent Programming, </booktitle> <pages> pages 199-220. </pages> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1987. </year>
Reference-contexts: Some concurrent object oriented languages keep the concept of a "process" as a separate entity (like in Emerald [RTL91] or Ada [ANSI83]); other models <ref> [Ame87, Agh86, Yon90] </ref> integrate objects and processes into one concept: active objects. This is a natural approach since objects and processes have a lot in common: encapsulation, communication through message passing, protection of private data, etc. In our computational model an agent is modelled as an autonomous active object.
Reference: [ANSI83] <author> Inc. </author> <title> American National Standards Institute. The Programming Language Ada Reference Manual. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> 155, </volume> <year> 1983. </year>
Reference-contexts: Some concurrent object oriented languages keep the concept of a "process" as a separate entity (like in Emerald [RTL91] or Ada <ref> [ANSI83] </ref>); other models [Ame87, Agh86, Yon90] integrate objects and processes into one concept: active objects. This is a natural approach since objects and processes have a lot in common: encapsulation, communication through message passing, protection of private data, etc.
Reference: [Bij94] <author> S. Bijnens. </author> <title> The Correlate Language Definition and Architecture. </title> <type> Technical Report 94-4SB, </type> <institution> Dept. of Computer Science, KULeuven, </institution> <year> 1994. </year>
Reference-contexts: These laws are expressed in terms of forces between particles. We summarise the forces below to illustrate the complexity of the interaction patterns between the communicating agents. 3 The resulting language framework is called Correlate <ref> [Bij94] </ref>; an acronym for Concurrent Object-oRiented Reflective LAnguage TEchnology. 4 1. Short ranged forces: These forces which act between any pair of atoms are actually the combination of very short-ranged repulsions which prevent overlap of atoms and van der Waals attractions.
Reference: [BJB + 94] <author> Bob Bywater, Wouter Joosen, Stijn Bijnens, Pierre Verbaeten, Thomas Larsen, and John Perram. </author> <title> Object-Oriented Simulation Software for Drug Design. </title> <booktitle> In HPCN Europe 94 (High Performance Computing and Networking). Lecture Notes in Computer Science, </booktitle> <publisher> Springer Ver-lag, </publisher> <year> 1994. </year>
Reference-contexts: These constructs result in a flexible framework to specify dynamic interaction schemes between cooperating autonomous agents. To indicate the expressive power of the language constructs for coordination, we model a complex application in the area of molecular dynamic simulation <ref> [BJB + 94] </ref>. Indeed, this application domain is an excellent example: particles are modelled as autonomous agents that have to obey the laws of Newtonian mechanics. The interaction patterns between these agents are highly dynamic. This paper is structured as follows: section 2 introduces the computational model of our language. <p> This will finally result in unreadable code which will most likely contain bugs. This study indicates that coordination primitives are required. The expression of other types of forces are even more complicated. For example, in protein simulation, atoms make chemical bonds. Typically, in drug design <ref> [BJB + 94] </ref> such molecules can consist of thousands of atoms. Chemical bonds are modelled as constraint forces between atoms. A large molecule can curl (folding) dynamically during simulation. This results in an enormous change in the members of a neighbour-list.
Reference: [BJMV91] <author> Y. Berbers, W. Joosen, H. Moons, and P. Verbaeten. </author> <title> The XENOOPS Project. </title> <booktitle> In Proceedings of the 1991 International Workshop on Object-Orientation in Operating Systems, </booktitle> <pages> pages 144-146, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: The reference objects realize: location independent invocation, transparent group invocation, and transparent object migration and replication. An application programmer can specialise the reference class hierarchy to add new functionality. 5 The Correlate language run-time uses the Xenoops <ref> [BJMV91] </ref> execution environment for issues like distribution and load balancing.
Reference: [BJV94] <author> Stijn Bijnens, Wouter Joosen, and Pierre Verbaeten. </author> <title> A Reflective Invocation Scheme to realise Advanced Object Management. </title> <booktitle> In ECOOP'93 Workshop on Object-Based Distributed Programming, </booktitle> <pages> pages 142-154. </pages> <booktitle> Lecture Notes in Computer Science Vol. </booktitle> <volume> 791, </volume> <publisher> Springer Verlag, </publisher> <year> 1994. </year>
Reference-contexts: At the meta-level computations about other computations can be specified. For example, the membership computation of a pattern is a meta-computation. The problem domain of the membership-computation is the (application) object-computation itself. Basically, the implementation is based on the concepts presented in <ref> [BJV94] </ref>. In this paper a class hierarchy of Reference objects was presented. These reference objects reify the interaction [Fer89] between objects and reside in the meta-level of the run-time system. The reference objects realize: location independent invocation, transparent group invocation, and transparent object migration and replication.
Reference: [CG89] <author> Nicholas Carriero and David Gelernter. </author> <title> Linda in Context. </title> <journal> Communications of the ACM, </journal> <volume> 32(4) </volume> <pages> 444-458, </pages> <month> April </month> <year> 1989. </year>
Reference: [Chi93] <author> Andrew Chien. </author> <title> Concurrent Aggregates: Supporting Modularity in Massively Parallel Programs. </title> <publisher> The MIT Press, </publisher> <year> 1993. </year>
Reference: [FA93] <author> Svend Frolund and Gul Agha. </author> <title> A Language Framework for Multi-Object Coordination. </title> <booktitle> In ECOOP'93, </booktitle> <pages> pages 346-360. </pages> <booktitle> Lecture Notes in Computer Science Vol. </booktitle> <volume> 707, </volume> <publisher> Springer Verlag, </publisher> <month> July </month> <year> 1993. </year>
Reference: [Fer89] <author> Jacques Ferber. </author> <title> Computational Reflection in class-based object-oriented languages. </title> <booktitle> In Proceedings of OOPSLA'89, </booktitle> <pages> pages 317-326. </pages> <booktitle> ACM Sigplan Notices, </booktitle> <month> October </month> <year> 1989. </year>
Reference-contexts: The problem domain of the membership-computation is the (application) object-computation itself. Basically, the implementation is based on the concepts presented in [BJV94]. In this paper a class hierarchy of Reference objects was presented. These reference objects reify the interaction <ref> [Fer89] </ref> between objects and reside in the meta-level of the run-time system. The reference objects realize: location independent invocation, transparent group invocation, and transparent object migration and replication.
Reference: [Ish92] <author> Yutaka Ishikawa. </author> <title> Communication Mechanism on Autonomous Objects. </title> <booktitle> In Proceedings of OOPSLA'92, </booktitle> <pages> pages 303-314. </pages> <booktitle> ACM Sigplan Notices, </booktitle> <year> 1992. </year>
Reference: [MWY91] <author> Satoshi Matsuoka, Takuo Watanabe, and Akinori Yonezawa. </author> <title> Hybrid group reflective architecture for object-oriented concurrent reflective programming. </title> <booktitle> In Proceedings of ECOOP'91, </booktitle> <pages> pages 231-250. </pages> <booktitle> Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [Nie93] <author> Oscar Nierstrasz. </author> <title> Regular Types for Active Objects. </title> <booktitle> In Proceedings of OOPSLA'93, </booktitle> <pages> pages 1-15. </pages> <booktitle> ACM Sigplan Notices, </booktitle> <month> October </month> <year> 1993. </year>
Reference-contexts: Synchronisation is needed to manage concurrent activities -that is acceptance and computation of requests- within an object. A concurrent object interface can be considered as a set of correlated operations with only a subset available for execution at a particular moment <ref> [Nie93] </ref>. In a sequential environment, the sequence of operation invocations is under the programmer's control. In a parallel environment, an object may be operated upon by different active objects, which may invoke arbitrary operations at arbitrary times. In this context, simple sequential control becomes inadequate.
Reference: [PdLP90] <author> J.W. Perram, S.W. de Leeuw, and H.G. Petersen. </author> <title> Hamilton's Equations for Constrained Dynamical Systems. </title> <journal> J. Stat. Phys., </journal> <volume> 61 </volume> <pages> 1203-1222, </pages> <year> 1990. </year> <month> 12 </month>
Reference: [Pog94] <author> A. Poggi. </author> <title> Agents and Resources Management with CUBL. </title> <booktitle> In Proceedings of the 27th Hawaii International Conference on System Sciences, </booktitle> <pages> pages 112-121. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1994. </year>
Reference-contexts: But, this paper introduces powerful language constructs to specify coordinated object interaction 2 . Both pattern-based group communication and multi-object 1 These issues are extensively described by Shoham [Sho93] and Poggi <ref> [Pog94] </ref>. 2 In our opinion, the language constructs for expressing agent interaction are orthogonal to the language constructs for expressing individual agent behaviour. 1 synchronization constraints are supported by the language.
Reference: [RTL91] <author> Rajendra K. Ray, Ewan Tempero, and Henry M. Levy. </author> <title> Emerald: A General-Purpose Programming Language. </title> <journal> Software: Practice and Experience, </journal> <volume> 21(1) </volume> <pages> 91-92, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: The next paragraph gives a detailed overview of the computational view of our programming environment. 2.1 Computational View Programming languages that support the notion of autonomous behaviour are inherently concurrent. Some concurrent object oriented languages keep the concept of a "process" as a separate entity (like in Emerald <ref> [RTL91] </ref> or Ada [ANSI83]); other models [Ame87, Agh86, Yon90] integrate objects and processes into one concept: active objects. This is a natural approach since objects and processes have a lot in common: encapsulation, communication through message passing, protection of private data, etc.
Reference: [Sho93] <author> Y. Shoham. </author> <title> Agent-Oriented Programming. </title> <journal> Artificial Intelligence, </journal> (60):51-92, 1993. 
Reference-contexts: Message are pieces of information exchanged among agents, and are treated as stimuli by the receiving agent. Different types of messages can be exchanged [ST90] (e.g. action messages, observation messages,...). Concurrent object-oriented programming is a powerful paradigm to model autonomous agents that interact with each other. Agent-oriented programming <ref> [Sho93] </ref> specializes the object-oriented notions by fixing the state (now called mental state) of the objects (now called agents) to consist of instance variables such as beliefs (including beliefs about the world, about themselves, and about one another), capabilities, and decisions. <p> But, this paper introduces powerful language constructs to specify coordinated object interaction 2 . Both pattern-based group communication and multi-object 1 These issues are extensively described by Shoham <ref> [Sho93] </ref> and Poggi [Pog94]. 2 In our opinion, the language constructs for expressing agent interaction are orthogonal to the language constructs for expressing individual agent behaviour. 1 synchronization constraints are supported by the language.
Reference: [ST90] <author> T. Sueyoshi and M. Tokoro. </author> <title> Dynamic Modeling of Agents for Coordination. </title> <booktitle> In Proceedings of the European Workshop on Modeling Autonomous Agents in a Multi-Agent World (MAAMAW'90), </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: Agents interact by sending messages to each other. Message are pieces of information exchanged among agents, and are treated as stimuli by the receiving agent. Different types of messages can be exchanged <ref> [ST90] </ref> (e.g. action messages, observation messages,...). Concurrent object-oriented programming is a powerful paradigm to model autonomous agents that interact with each other.
Reference: [Weg87] <author> Peter Wegner. </author> <title> Dimensions of Object-Based Language Design. </title> <booktitle> In Proceedings of OOPSLA'87, </booktitle> <pages> pages 168-182. </pages> <booktitle> ACM Sigplan Notices, </booktitle> <month> December </month> <year> 1987. </year>
Reference: [Yon90] <author> A. Yonezawa. </author> <title> ABCL: An Object Oriented Concurrent System. </title> <booktitle> The MIT Press series in artificial intelligence, </booktitle> <year> 1990. </year> <month> 13 </month>
Reference-contexts: Some concurrent object oriented languages keep the concept of a "process" as a separate entity (like in Emerald [RTL91] or Ada [ANSI83]); other models <ref> [Ame87, Agh86, Yon90] </ref> integrate objects and processes into one concept: active objects. This is a natural approach since objects and processes have a lot in common: encapsulation, communication through message passing, protection of private data, etc. In our computational model an agent is modelled as an autonomous active object.
References-found: 22

