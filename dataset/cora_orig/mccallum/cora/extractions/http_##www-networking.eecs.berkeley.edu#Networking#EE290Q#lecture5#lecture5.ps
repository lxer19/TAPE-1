URL: http://www-networking.eecs.berkeley.edu/Networking/EE290Q/lecture5/lecture5.ps
Refering-URL: http://www-networking.eecs.berkeley.edu/Networking/EE290Q/course.html
Root-URL: http://www.cs.berkeley.edu
Title: Lecture 5: Implementation Schemes for GPS  
Author: Pramod Viswanath 
Date: 30 January 1996  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Abhay K. Parekh and Robert G. Gallager, </author> <title> "A Generalized Processor Sharing Approach to flow control in Integrated Services Networks, Part I", </title> <journal> IEEE/ACM Transactions on Networking, Vol.1, </journal> <volume> No.3, </volume> <month> June </month> <year> 1993. </year>
Reference-contexts: 1 Introduction This lecture focusses on the implementation aspects of the Generalised Processor Sharing (henceforth abbreviated to GPS) scheme. Two major implementations Packet-by-Packet GPS scheme (PGPS) <ref> [1] </ref>, and Self Clocked Fair Queueing Scheme (SCFQ) [2] are described and the advantages and disadvantages of each are discussed. We concentrate on the former scheme and mention some implementation advantages of the latter while noting the performance degradation as a tradeoff. <p> Then, packet p will also complete service prior to ~p for any pattern of arrivals after time t . Proof The sessions to which p adn ~p belong are both backlogged upto time t and by the definition of GPS <ref> [1] </ref>, the ratio of service received by these sessions is independent of future arrivals. Thus only the departure order is independent of future arrivals, but it is to be borne in mind that the actual departure times are clearly dependent on the future arrival pattern. <p> Proof The proof is as in Theorem 1 of <ref> [1] </ref>. Here we comment on the ideas involved in the proof. Since both GPS and PGPS are non-idling, their busy periods coincide and it is thus sufficient to derive the bound over each busy period. <p> If m = 0, then all the packets packets indeed leave the PGPS server in the same order as GPS, and hence u k t k . Suppose m 6= 0. Then, it is seen in <ref> [1] </ref> that t k u k + r This proof is based on Lemma 1 above. It should be noted that we are only bounding the extra delay a packet will face in PGPS as compared to GPS. <p> With this in the background it shouldnt be surprising to expect the following result:(Theorem 2, <ref> [1] </ref>). S i (0; t ) ^ S i (0; t ) L max ; 8 times t and sessions i (3) Thus in any time interval the amount served for any session i by PGPS can differ from that by PGPS by utmost the maximum size of one packet.
Reference: [2] <author> S.Jamaloddin Golestani, </author> <title> "A Self-Clocked fair queueing scheme for broadband applications", </title> <institution> BellCore, AT&T Research Labs. </institution> <month> 4 </month>
Reference-contexts: 1 Introduction This lecture focusses on the implementation aspects of the Generalised Processor Sharing (henceforth abbreviated to GPS) scheme. Two major implementations Packet-by-Packet GPS scheme (PGPS) [1], and Self Clocked Fair Queueing Scheme (SCFQ) <ref> [2] </ref> are described and the advantages and disadvantages of each are discussed. We concentrate on the former scheme and mention some implementation advantages of the latter while noting the performance degradation as a tradeoff. <p> This motivates the development of a scheme that reduces this computational burden. One such scheme is the focus of the next section. 4 Self Clocked Fair Queueing Scheme SCFQ This scheme, as outlined in <ref> [2] </ref> uses an approximation of the virtual time function v () and escapes the computational burden of maintaining the set of busy sessions. Here, the virtual time is defined as a piecewise constant function. <p> ^v a k 2. ^v (t) is the virtual time under SCFQ computed as ^v (t) = ^ F l j &lt; t &lt; d l where s l j and d l j are the starting and finishing times of service of the l th packet of session j. <ref> [2] </ref> demonstrates the fairness of this scheme in a different setting.
References-found: 2

