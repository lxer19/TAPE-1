URL: http://www-cad.eecs.berkeley.edu/HomePages/shaz/iccd96.redundant.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/shaz/publications.html
Root-URL: http://www.cs.berkeley.edu
Email: fshaz,braytong@eecs.berkeley.edu vigyan@cadence.com carl pixley@email.mot.com  
Title: Latch Redundancy Removal Without Global Reset  
Author: Shaz Qadeer Robert K. Brayton Vigyan Singhal Carl Pixley 
Address: MD F30B  Berkeley 1919 Addison St. 5918 W. Courtyard Dr. Berkeley, CA 94720 Berkeley, CA 94704 Austin, TX 78735  
Affiliation: Dept. of EECS Cadence Berkeley Labs Motorola Inc.,  University of California at  
Abstract: For circuits where there may be latches with no reset line, we show how to replace some of them with combinational logic. All previous work in sequential optimization by latch removal assumes a designated initial state. Without this assumption, the design can power up in any state and earlier techniques are not applicable. We present an algorithm for identifying and replacing redundant latches by combinational logic such that no environment of the design can detect the change. The new design preserves the steady state behavior as well as all initializing sequences of the old design. We report experimental results on benchmark circuits and demonstrate savings in area without adverse impact on delay. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Lin, H. J. Touati, and A. R. </author> <title> Newton, Don't Care Minimization of Multi-level Sequential Logic Networks, </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <address> (Santa Clara, CA), </address> <pages> pp. 414-417, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: We call this the DIS (designated initial state) assumption. Under this assumption, a design can safely replace another if the two global reset states are equivalent. Many sequential optimization techniques use don't cares resulting from unreachable states. Minimization of sequential logic <ref> [1] </ref>, redundant latch removal [2], sequential redundancy removal [3] and equivalence net detection [4] rely on these don't cares. However, many practical designs avoid having a reset line to each latch. <p> Given a set of initial states S, extract the set of states reachable from S (see <ref> [1] </ref> for example). Let C (~x) be the characteristic function of the set of reachable states, where ~x = fx 1 ; x 2 ; : : : ; x t g represent the t latches in the design.
Reference: [2] <author> C. Berthet, O. Coudert, and J. C. Madre, </author> <title> New Ideas on Symbolic Manipulation of Finite State Machines, </title> <booktitle> in Proc. Intl. Conf. on Computer Design, </booktitle> <address> (Cambridge, MA), </address> <pages> pp. 224-227, </pages> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: We call this the DIS (designated initial state) assumption. Under this assumption, a design can safely replace another if the two global reset states are equivalent. Many sequential optimization techniques use don't cares resulting from unreachable states. Minimization of sequential logic [1], redundant latch removal <ref> [2] </ref>, sequential redundancy removal [3] and equivalence net detection [4] rely on these don't cares. However, many practical designs avoid having a reset line to each latch. <p> This notion of n-delay replacement has been used in [6, 7]. We use it also for identifying latch redundancy. The latch removal problem has been tackled in <ref> [2, 8, 4] </ref> using the DIS assumption. Reachable states are computed and latches unnecessary for distinguishing between the reachable states are removed and replaced by combinational logic. In addition, the combinational logic used for generating the next state functions of those latches can be removed. <p> For example, the set of states f000; 010; 100g constitute a tSCC of Design D in Figure 1. Notice that every tSCC of a design must be contained inside its outer-envelope. 3 Removing redundant latches under the DIS as sumption We briefly review the techniques, earlier presented in <ref> [2, 8, 4] </ref> for reducing latches in circuits assuming DIS. Given a set of initial states S, extract the set of states reachable from S (see [1] for example).
Reference: [3] <author> H. Cho, G. D. Hachtel, and F. Somenzi, </author> <title> Redundancy Identification and Removal Based on Implicit State Enumeration, </title> <booktitle> in Proc. Intl. Conf. on Computer Design, </booktitle> <address> (Cambridge, MA), </address> <pages> pp. 77-80, </pages> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: We call this the DIS (designated initial state) assumption. Under this assumption, a design can safely replace another if the two global reset states are equivalent. Many sequential optimization techniques use don't cares resulting from unreachable states. Minimization of sequential logic [1], redundant latch removal [2], sequential redundancy removal <ref> [3] </ref> and equivalence net detection [4] rely on these don't cares. However, many practical designs avoid having a reset line to each latch.
Reference: [4] <author> G. Berry and H. J. Touati, </author> <title> Optimized Controller Synthesis Using Esterel, </title> <booktitle> in Workshop Notes of Intl. Workshop on Logic Synthesis, </booktitle> <address> (Tahoe City, CA), </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Under this assumption, a design can safely replace another if the two global reset states are equivalent. Many sequential optimization techniques use don't cares resulting from unreachable states. Minimization of sequential logic [1], redundant latch removal [2], sequential redundancy removal [3] and equivalence net detection <ref> [4] </ref> rely on these don't cares. However, many practical designs avoid having a reset line to each latch. This implies that each such latch can non-deterministically power up either as a 0 or as a 1, leading to 2 t initial states, where t is the number of such latches. <p> This notion of n-delay replacement has been used in [6, 7]. We use it also for identifying latch redundancy. The latch removal problem has been tackled in <ref> [2, 8, 4] </ref> using the DIS assumption. Reachable states are computed and latches unnecessary for distinguishing between the reachable states are removed and replaced by combinational logic. In addition, the combinational logic used for generating the next state functions of those latches can be removed. <p> For example, the set of states f000; 010; 100g constitute a tSCC of Design D in Figure 1. Notice that every tSCC of a design must be contained inside its outer-envelope. 3 Removing redundant latches under the DIS as sumption We briefly review the techniques, earlier presented in <ref> [2, 8, 4] </ref> for reducing latches in circuits assuming DIS. Given a set of initial states S, extract the set of states reachable from S (see [1] for example).
Reference: [5] <author> C. Pixley, V. Singhal, A. Aziz, and R. K. Brayton, </author> <title> Multi-level Synthesis for Safe Replaceability, </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <address> (San Jose, CA), </address> <pages> pp. 442-449, </pages> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: Hence none of these states can be considered unreachable and methods based on the DIS assumption will not find any flexibility. These concerns led to a notion of design replacement, called safe replaceability <ref> [5] </ref>, where the DIS assumption is not made. Loosely speaking, a safe replacement of a design preserves the steady-state behavior as well as all initializing sequencesof the old design.
Reference: [6] <author> V. Singhal, C. Pixley, A. Aziz, and R. K. Brayton, </author> <title> Exploiting Power-up Delay for Sequential Optimization, </title> <booktitle> in Proc. European Design Automation Conf., </booktitle> <address> (Brighton, Great Britain), </address> <pages> pp. 54-59, </pages> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: This allows additional flexibility for design replacement since the states that cannot be reached after the first n clock cycles, (for a given n) are of no interest. This notion of n-delay replacement has been used in <ref> [6, 7] </ref>. We use it also for identifying latch redundancy. The latch removal problem has been tackled in [2, 8, 4] using the DIS assumption. Reachable states are computed and latches unnecessary for distinguishing between the reachable states are removed and replaced by combinational logic. <p> For this design D, the various n-delayed designs are: D 0 = D = f011; 101; 001; 110; 111; 000; 010; 100g, D 1 = f111; 000; 010; 100g. For latch removal, we will use the following condition for replacement. This has earlier been used in <ref> [7, 6] </ref>. <p> In fact, 0 0 initializes A but does not initialize D 0 ; on the other hand, if D is an n-delay replacement for A, every initializing sequence for A is one for D n <ref> [6] </ref>. Definition 4 A terminal strongly connected component (tSCC) of a design is a minimal subset of states which is closed under all inputs. For example, the set of states f000; 010; 100g constitute a tSCC of Design D in Figure 1. <p> because the new design always starts in state 00, and can never reach state 11. 4 Removing redundant latches without the DIS assumption It is known that a necessary condition for n-delay replacement is that every tSCC in the replacement design must be isomorphic to one in the original design <ref> [6] </ref>. To satisfy this necessary condition for safe replacement, we could try to choose a tSCC of the original design as C (~x) (to replace the notion of reachable states). In practice, most real designs have exactly one tSCC; all example circuits we have analyzed had one tSCC each. <p> It is conceivable that such an operation could increase the delay of the paths between the latches. 2 In this table, circuit sizes are expressed in number of literals in factored form (see [18]). 3 In the last step of script.rugged, we used the sequential optimization procedure from <ref> [6] </ref> instead of full simplify because we wanted to exploit the sequential flexibility in addition to the combinational flexibility. Computation of core Orig. Final circuit Ckt.
Reference: [7] <author> M. A. Iyer, D. E. Long, and M. Abramovici, </author> <title> Identifying Sequential Redundancies Without Search, </title> <booktitle> in Proc. of the Design Automation Conf., </booktitle> <address> (Las Vegas, NV), </address> <month> June </month> <year> 1996. </year>
Reference-contexts: This allows additional flexibility for design replacement since the states that cannot be reached after the first n clock cycles, (for a given n) are of no interest. This notion of n-delay replacement has been used in <ref> [6, 7] </ref>. We use it also for identifying latch redundancy. The latch removal problem has been tackled in [2, 8, 4] using the DIS assumption. Reachable states are computed and latches unnecessary for distinguishing between the reachable states are removed and replaced by combinational logic. <p> For this design D, the various n-delayed designs are: D 0 = D = f011; 101; 001; 110; 111; 000; 010; 100g, D 1 = f111; 000; 010; 100g. For latch removal, we will use the following condition for replacement. This has earlier been used in <ref> [7, 6] </ref>.
Reference: [8] <author> B. Lin and A. R. </author> <title> Newton, Exact Redundant State Registers Removal Based on Binary Decision Diagrams, </title> <booktitle> in Proc. of the MCNC Intl. Workshop on Logic Synthesis, </booktitle> <volume> vol. 1, </volume> <month> May </month> <year> 1991. </year>
Reference-contexts: This notion of n-delay replacement has been used in [6, 7]. We use it also for identifying latch redundancy. The latch removal problem has been tackled in <ref> [2, 8, 4] </ref> using the DIS assumption. Reachable states are computed and latches unnecessary for distinguishing between the reachable states are removed and replaced by combinational logic. In addition, the combinational logic used for generating the next state functions of those latches can be removed. <p> For example, the set of states f000; 010; 100g constitute a tSCC of Design D in Figure 1. Notice that every tSCC of a design must be contained inside its outer-envelope. 3 Removing redundant latches under the DIS as sumption We briefly review the techniques, earlier presented in <ref> [2, 8, 4] </ref> for reducing latches in circuits assuming DIS. Given a set of initial states S, extract the set of states reachable from S (see [1] for example). <p> Most algorithms for solving this problem heuristically generate an ordering of the latches. The latches are tested for redundancy and removed in that order. The heuristic used by Lin and Newton <ref> [8] </ref> (to maximize the number of latches chosen as redundant), orders latches by decreasing unateness. The unateness of a variable x i is the absolute value of the difference between the number of minterms in C (~x) x i =0 and C (~x) x i =1 .
Reference: [9] <author> K. L. McMillan, </author> <title> Symbolic Model Checking. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: Another application of replacing latches by combinational logic is improving the effectiveness of FSM traversal, which is a crucial sub-step in many algorithms, especially those in formal verification <ref> [9] </ref>. For implicit FSM traversal using BDDs, the number of variables is directly affected by the number of latches. Selecting relatively smaller subcircuits and reducing the number of latches in it could be a good strategy for speeding up the verification of a large design. <p> Our experiments indicate that our method is very effective in reducing the area of circuits and does not affect the performance (delay) adversely. Reducing the number of latches should be useful also for algorithms which require state traversal, for example, formal verification via symbolic model checking <ref> [9] </ref>. The replacement condition allows optimizations on random pieces of sequential logic allowing applications to large circuits by making such optimizations on small subcircuits. We plan to pursue this aspect of our method in the future.
Reference: [10] <author> R. K. Ranjan, A. Aziz, B. Plessier, C. Pixley, and R. K. Brayton, </author> <title> Efficient Formal Design Verification: Data Structure + Algorithms, </title> <booktitle> in Workshop Notes of the Intl. Workshop on Logic Synthesis, </booktitle> <address> (Tahoe City, CA), </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Selecting relatively smaller subcircuits and reducing the number of latches in it could be a good strategy for speeding up the verification of a large design. Under the DIS assumption, Ranjan et. al. <ref> [10] </ref> reduce the number of latches to make verification more tractable; our goal is similar but without making this assumption. We first present an outline of the work on latch redundancy removal using the DIS assumption. We then present our algorithm based on safe replacement.
Reference: [11] <author> A. El-Maleh, T. E. Marchok, J. Rajski, and W. Maly, </author> <title> On Test Set Preservation of Retimed Circuits, </title> <booktitle> in Proc. of the Design Automation Conf., </booktitle> <address> (San Francisco, CA), </address> <pages> pp. 176-182, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Such a number n can usually be determined from the system specification (for example, in a 20MHz design, a stabilizing time of 0.1ms amounts to 2000 clock cycles). Also, note that many commonly used synthesis operations, such as forward retiming <ref> [11, 12] </ref>, cause delay replacements for a non-zero n. Consider design A of Figure 2. It can be seen that design D of Figure 1 is a 1-delay replacement for design A (i.e.
Reference: [12] <author> V. Singhal, C. Pixley, R. L. Rudell, and R. K. Brayton, </author> <title> The Validity of Retiming Sequential Circuits, </title> <booktitle> in Proc. of the Design Automation Conf., </booktitle> <address> (San Francisco, CA), </address> <pages> pp. 316-321, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Such a number n can usually be determined from the system specification (for example, in a 20MHz design, a stabilizing time of 0.1ms amounts to 2000 clock cycles). Also, note that many commonly used synthesis operations, such as forward retiming <ref> [11, 12] </ref>, cause delay replacements for a non-zero n. Consider design A of Figure 2. It can be seen that design D of Figure 1 is a 1-delay replacement for design A (i.e.
Reference: [13] <author> H. Savoj and R. K. Brayton, </author> <title> Observability Relations and Observability Don't Cares, </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <address> (Santa Clara, CA), </address> <pages> pp. 518-521, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: This can be solved in two steps. First, we obtain any arbitrary multi-level network representing some F which is compatible with S. Then, one approach would be to use the techniques in <ref> [13] </ref> to optimize this network maintaining compatibility with S. However, our experiments (presented later) show that the size of F is relatively small compared to the given circuit sizes and that the greedy approach described by procedure greedy-function-set in Figure 7 worked well.
Reference: [14] <author> B. Lin, </author> <title> Efficient Symbolic Support Manipulation, </title> <booktitle> in Proc. Intl. Conf. on Computer Design, </booktitle> <address> (Cambridge, MA), </address> <pages> pp. 513-516, </pages> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: Since all the Boolean quantities are represented as BDDs, we use a BDD minimization procedure, which heuristically finds an implementation which has the smallest support (we use a simpler version of the algorithm in <ref> [14] </ref>); alternately, we could have used bdd-generalized-cofactor (due to [15]) or any of many other BDD minimization algorithms with respect to a don't care set (see [16]).
Reference: [15] <author> O. Coudert and J. C. Madre, </author> <title> A Unified Framework for the Formal Verification of Sequential Circuits, </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <address> (Santa Clara, CA), </address> <pages> pp. 126-129, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: Since all the Boolean quantities are represented as BDDs, we use a BDD minimization procedure, which heuristically finds an implementation which has the smallest support (we use a simpler version of the algorithm in [14]); alternately, we could have used bdd-generalized-cofactor (due to <ref> [15] </ref>) or any of many other BDD minimization algorithms with respect to a don't care set (see [16]).
Reference: [16] <author> T. R. Shiple, R. Hojati, A. L. Sangiovanni-Vincentelli, and R. K. Brayton, </author> <title> Heuristic Minimization of BDDs Using Don't Cares, </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <address> (San Diego, CA), </address> <pages> pp. 225-231, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: use a BDD minimization procedure, which heuristically finds an implementation which has the smallest support (we use a simpler version of the algorithm in [14]); alternately, we could have used bdd-generalized-cofactor (due to [15]) or any of many other BDD minimization algorithms with respect to a don't care set (see <ref> [16] </ref>). The minimized BDD is converted to a similar looking network whose nodes are multiplexors controlled by the variable of the corresponding BDD node and then the SIS commands collapse and full simplify are run on the network.
Reference: [17] <author> E. M. Sentovich, K. J. Singh, C. Moon, H. Savoj, R. K. Brayton, and A. L. Sangiovanni-Vincentelli, </author> <title> Sequential Circuit Design Using Synthesis and Optimization, </title> <booktitle> in Proc. Intl. Conf. on Computer Design, </booktitle> <address> (Cambridge, MA), </address> <pages> pp. 328-333, </pages> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: On the other hand, the parameter n could be easily specified as an input to the procedure. We implemented this algorithm in SIS <ref> [17] </ref> and experimented with ISCAS89 circuits. All the experiments were performed on a DEC workstation based on Alpha21064. To make our BDD-based algorithm tractable we chose circuits with fewer than 30 latches.
Reference: [18] <author> R. K. Brayton, G. D. Hachtel, and A. L. Sangiovanni-Vincentelli, </author> <title> Multilevel Logic Synthesis, </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 78, </volume> <pages> pp. 264-300, </pages> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: So far we have removed latches and replaced them by a combinational function of other latches. It is conceivable that such an operation could increase the delay of the paths between the latches. 2 In this table, circuit sizes are expressed in number of literals in factored form (see <ref> [18] </ref>). 3 In the last step of script.rugged, we used the sequential optimization procedure from [6] instead of full simplify because we wanted to exploit the sequential flexibility in addition to the combinational flexibility. Computation of core Orig. Final circuit Ckt.
References-found: 18

