URL: http://www.cs.columbia.edu/~hgs/InternetTC/GlobalInternet98/Tzen9811_Longest.ps.gz
Refering-URL: http://www.cs.columbia.edu/~hgs/InternetTC/GlobalInternet98/
Root-URL: http://www.cs.columbia.edu
Title: Longest Prefix Search Using Compressed Trees  
Author: Henry Hong-Yi Tzeng 
Address: 101 Crawfords Corner Road, Holmdel, NJ 07733, USA  
Affiliation: High-Speed Networks Research Department Bell Laboratories, Lucent Technologies  
Abstract: A router uses the destination address of every incoming packet to decide the proper next-hop information of the packet. High-speed routers are required to make these decisions at the speed of several million packets per second. Each search finds the longest prefix match of the destination address among all stored prefixes in the router. We proposed the use of prefix trees to represent the set of prefixes to be searched. An efficient data structure is introduced to compress any prefix tree structure such that the number of memory access to find the longest prefix for any address is independent of the stored prefixes, but the length of the address. The memory requirement of the compressed trees is shown to be almost optimal. Further reduction on the memory access and the search time can be achieved by increasing the memory requirement of the tree structure. In particular, we proposed a novel algorithm that requires only four 64-bit memory accesses to find the longest prefix match for each IPv4 address in the worst case, while only 3 Mbytes are required to store a 128K-entry routing table. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Fuller, T. Li, J. Yu, and K. Varadhan. </author> <title> Classless Inter-Domain Routing (CIDR): an Address Assignment and Aggregation Strategy, </title> <type> RFC 1519. </type> <institution> Internet Engineering Task Force, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: Therefore a route is always defined by the prefix of the corresponding address. In the early days of the Internet, the IPv4 unicast addressing has only three different prefixes: 8, 16, and 24 bits. The Classless Inter-Domain Routing (CIDR) were introduced to allow prefixes with any lengths <ref> [1] </ref>. Several approaches have been proposed to support IP rout ing table lookup. A special form of radix tree, called Patricia tree [2], is introduced to represent the IP routing tables in both Net/3 [3], FreeBSD and many existing high-end routers.
Reference: [2] <author> D. R. Morrison. </author> <title> Patricia Practical Algorithm to Retrieve Information Coded in Alphanumeric. </title> <journal> Journal of ACM, </journal> <volume> 15(4):515534, </volume> <month> Oct </month> <year> 1968. </year>
Reference-contexts: The Classless Inter-Domain Routing (CIDR) were introduced to allow prefixes with any lengths [1]. Several approaches have been proposed to support IP rout ing table lookup. A special form of radix tree, called Patricia tree <ref> [2] </ref>, is introduced to represent the IP routing tables in both Net/3 [3], FreeBSD and many existing high-end routers. This algorithm supports any prefix length and can be used to search the longest matched prefix.
Reference: [3] <author> G. R. Wright and W. R. </author> <title> Stevens. </title> <journal> TCP/IP Illustrated, </journal> <volume> Volume 2. </volume> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1995. </year>
Reference-contexts: The Classless Inter-Domain Routing (CIDR) were introduced to allow prefixes with any lengths [1]. Several approaches have been proposed to support IP rout ing table lookup. A special form of radix tree, called Patricia tree [2], is introduced to represent the IP routing tables in both Net/3 <ref> [3] </ref>, FreeBSD and many existing high-end routers. This algorithm supports any prefix length and can be used to search the longest matched prefix. The algorithm may require backtracking during the search of an address, where backtracking means some nodes in the tree are visited more than once.
Reference: [4] <author> H.-Y. Tzeng. </author> <title> An Efficient IP Routing Table Lookup Algorithm. </title> <type> Technical report, </type> <institution> Bell Labs, Lucent Technologies, </institution> <month> July </month> <year> 1997. </year> <note> Also filed to the U.S. Patent and Trademark Office. </note>
Reference-contexts: Without the assistance of other methods, a CAM supports only a small number of entries. A novel approach has been proposed to improve the speed of IP routing table look-up, called Hashed Radix Trie <ref> [4] </ref>. Each IP destination address is represented as a 32-bit number, and is divided into two parts, the first K bits and the remaining (32 K) bits. The first K bits of the IP address are treated as an index into an array 1 .
Reference: [5] <author> M. Degermark, A. Brodnik, S. Carlsson, and S. Pink. </author> <title> Small Forwarding Tables for Fast Routing Lookups. </title> <booktitle> In Proceedings of ACM SIGCOMM'97 Conference, </booktitle> <volume> volume 27, </volume> <pages> pages 314, </pages> <address> Cannes, France, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: The search time is independent of the number of route entries. Therefore it can support a large number of routes. Degermark et al proposed the use of hierarchical encoding scheme to compress a routing table <ref> [5] </ref>. The address space is partitioned into three levels. Each level uses a separate encoding scheme to compress the tree structure.
Reference: [6] <author> M. Waldvogel, G. Varghese, J. Turner, and B. Plattner. </author> <title> Scalable High Speed IP Routing Lookups. </title> <booktitle> In Proceedings of ACM SIGCOMM'97 Conference, </booktitle> <volume> volume 27, </volume> <pages> pages 2535, </pages> <address> Cannes, France, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: Since the table is reasonably small, it can fit into the data cache of a high-end processor. Waldvogel et al employ novel ideas to use binary search on hash tables organized by the prefix lengths <ref> [6] </ref>. Instead of searching from the longest prefixes or the shortest prefixes, the proposed scheme starts the search at the prefixes of median length, says M. <p> Then, the search continues on different prefix lengths as if it is traversing a binary tree. The number of prefix lengths to be considered is reduced by half after each hash lookup. As pointed out by the authors of <ref> [6] </ref>, insertion and deletion of route entries in the hash tables (while maintaining the proposed search time) may incur the change of major part of the tables. This paper is organized as follows. The next section introduces the prefix trees, which will be employed to perform high-speed longest prefix search.
Reference: [7] <author> D.A. Huffman. </author> <title> A Method for the Construction of Minimum-redundancy Codes. </title> <booktitle> Proceedings of the IRE, </booktitle> <address> 40(9):10981101, </address> <year> 1952. </year>
Reference-contexts: With additional knowledge, one can compress a prefix tree more efficiently than the result presented here. For example, if we know the statistical distribution of all sub-trees in a given prefix tree, we can obtain an optimal numbering of all subtrees based on the technique similar to the Huffman-coding <ref> [7] </ref>. It is easy to show that the resulting binary representation of this prefix tree is also optimal.
References-found: 7

