URL: ftp://ic.eecs.berkeley.edu/pub/HWSW/publications/CODES97_Periph.ps.gz
Refering-URL: http://www-cad.eecs.berkeley.edu/research/hsc/publications.html
Root-URL: 
Title: Modeling micro-controller peripherals for high-level co-simulation and synthesis efficiently simulate and evaluate a particular implementation
Author: Harry Hsieh Luciano Lavagno Claudio Passerone Claudio Sansoe Alberto Sangiovanni-Vincentelli 
Note: to  
Abstract: Mapping a behavior on an embedded system involves hardware-software partitioning and assignment of software and hardware tasks to different components. In particular, software tasks in embedded controllers are mostly assigned to a micro-controller. However, some micro-controller peripherals are implemented with partly programmable componentsthat can be regarded as very simple co-processors with limited instruction sets and capabilities. Embedded system designers are used to mapping some simple software tasks onto these simple co-processors, obtaining overall performances that can be orders of magnitude superior to the ones obtained mapping all software tasks to the micro-controller itself. In this paper, we propose a methodology to specify, simulate, and partition tasks that can be implemented on programmable micro-controller peripherals such as Timing Processing Units (TPUs). Following our general philosophy, we let the designer propose a partition, and we provide an environment 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Balarin, H. Hsieh, A. Jurecska, L. Lavagno, and A. Sangiovanni-Vincentelli. </author> <title> Formal verification of embedded systems based on CFSM networks. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <year> 1996. </year>
Reference: [2] <author> G. Berry, P. Couronne, and G. Gonthier. </author> <title> The synchronous approach to reactive and real-time systems. </title> <journal> IEEE Proceedings, </journal> <volume> 79, </volume> <month> September </month> <year> 1991. </year>
Reference-contexts: CFSMs can be derived automatically from a range of high level languages such as ESTEREL <ref> [2] </ref>. A CFSM is a Finite State Machine operating on a set of integer variables with arithmetic, relational and logical operators. CFSMs communicate asynchronously via events. An event is a uni-directional buffered communication primitive.
Reference: [3] <author> S. Cardelli, M. Chiodo, P. Giusto, A. Jurecska, L. Lavagno, and A. Sangiovanni-Vincentelli. </author> <title> Rapid-prototyping of embedded systems via reprogrammable devices. </title> <booktitle> In 7th IEEE International Workshop on Rapid System Prototyping, </booktitle> <year> 1996. </year>
Reference: [4] <author> M. Chiodo, P. Giusto, H. Hsieh, A. Jurecska, L. Lavagno, and A. Sangiovanni-Vincentelli. </author> <title> Hardware/software codesign of embedded systems. </title> <journal> IEEE Micro, </journal> <volume> 14(4) </volume> <pages> 26-36, </pages> <month> August </month> <year> 1994. </year>
Reference: [5] <author> P. Chou, E.A. Walkup, and G. Borriello. </author> <title> Scheduling for reactive real-time systems. </title> <journal> IEEE Micro, </journal> <volume> 14(4) </volume> <pages> 37-47, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: We also provide a behavioral model for simulating the peripherals when a more precise but more costly RTL model is not required for the simulation pattern at hand. The approach of <ref> [5] </ref> and [8] to synthesize interfaces between hardware and software is complementary to our work: it proposes a scheduling-based algorithm for interface partitioning, based on a graph model derived from a formalized timing diagram that describes the peripheral interface protocol.
Reference: [6] <author> Motorola Inc. M68HC11, </author> <title> Reference Manual, </title> <year> 1991. </year>
Reference: [7] <author> C. Passerone, M. Chiodo, W. Gosti, L. Lavagno, and A. Sangiovanni-Vincentelli. </author> <title> Evaluation of trade-offs in the design of embedded systems via co-simulation. </title> <type> Technical Report UCB/ERL M96/12, </type> <institution> U.C. Berkeley, </institution> <year> 1996. </year>
Reference: [8] <author> E. Walkup and G. Borriello. </author> <title> Automatic synthesis of device drivers for hardware-software codesign. </title> <booktitle> In Proceedings of the International Workshop on Hardware-Software Codesign, </booktitle> <month> October </month> <year> 1993. </year> <month> 4 </month>
Reference-contexts: We also provide a behavioral model for simulating the peripherals when a more precise but more costly RTL model is not required for the simulation pattern at hand. The approach of [5] and <ref> [8] </ref> to synthesize interfaces between hardware and software is complementary to our work: it proposes a scheduling-based algorithm for interface partitioning, based on a graph model derived from a formalized timing diagram that describes the peripheral interface protocol.
References-found: 8

