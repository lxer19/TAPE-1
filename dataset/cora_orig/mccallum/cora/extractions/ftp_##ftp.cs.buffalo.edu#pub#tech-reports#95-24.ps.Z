URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/95-24.ps.Z
Refering-URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/README.html
Root-URL: 
Email: zaionc@cs.buffalo.edu  
Title: Lambda definability is decidable for second order types and for regular third order types 1  
Author: Marek Zaionc 
Address: 226 Bell Hall, Buffalo, NY 14260  
Affiliation: Department of Computer Science, State University of New York at Buffalo  
Abstract: It has been proved by Loader [1] that Statman-Plotkin conjecture (see [4] and [2]) fails. The Loader proof was done by encoding the word problem in the full type hierarchy based on the domain with 7 elements. The aim of this paper is to show that the lambda definability problem limited for second order types and regular third order types is decidable in any finite domain. Obviously definability is decidable for 0 and 1 order types. As an additional effect of the result described we may observe that for certain types there is no finite grammar generating all closed terms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ralph Loader. </author> <title> The Undecidability of - Definability, private communication, </title> <note> will be published in forthcoming Alonzo Church Festschrift book. </note>
Reference-contexts: Theorem 3.2. For every type t such that rank (t ) 2 there is a finite grammar with one type t nonterminal variable which generates all closed type t terms. Proof: Let t = t <ref> [1] </ref>; t [2]; :::; t [n] ! O. It will be proved that the following grammar (fyg; P; y) produces all closed type t terms. <p> An illustration of this case is presented in the example 3.1. Proof: Let t = t <ref> [1] </ref>; t [2]; :::; t [n] ! O. Every t [i] is one of the following types: O, O ! O or (O; :::; O ! O) ! O. Let us assume that t [r] = O for some r n. <p> 1 :::z p :S) for some term S 2 Cl (O; fx 1 :::x n ; z 1 :::z p g) where x i has type (O p ! O) ! O then x 1 :::x n z 1 :::z p :S is the closed term with regular type t <ref> [1] </ref>; t [2]; :::; t [n]; O p ! O. <p> Theorem 3.4. (see Zaionc [6] ) For every regular rank 3 type, such that there is no such i arg (t ) that t [i] = O, there is a finite grammar with two nonterminal variables generating all type t closed terms. Proof. Let t = t <ref> [1] </ref>; t [2]; :::; t [n] ! O. Let us define t 0 = t [1]; t [2]; :::; t [n]; O ! O. <p> Proof. Let t = t <ref> [1] </ref>; t [2]; :::; t [n] ! O. Let us define t 0 = t [1]; t [2]; :::; t [n]; O ! O. The type t 0 satisfies the assumption of theorem 3.3, therefore there exists a grammar with one nonterminal type t 0 variable y 0 , generating all closed terms of t 0 . <p> The definability problem for t is decidable in full type hierarchy built up from any finite set D O . Proof. Given is an object f 2 D t . Suppose t = t <ref> [1] </ref>; :::; t [n] ! O. Let us define a new type t 0 as t [1]; :::; t [n]; O ! O. <p> Proof. Given is an object f 2 D t . Suppose t = t <ref> [1] </ref>; :::; t [n] ! O. Let us define a new type t 0 as t [1]; :::; t [n]; O ! O. Type t 0 satisfies assumptions of theorem 3.3 and therefore there is a finite grammar with exactly one nonterminal variable y 0 generating all closed type t 0 terms. <p> The object a 0 is the interpretation of Church's zero. Observation. As a side effect of the result described in theorem 4.1 we may observe that there is no finite grammar generating all closed terms for certain types. In Loader paper <ref> [1] </ref> we have seen that certain types have been used for encoding of the word problem. For those types the definability problem is undecidable. Therefore there is no finite grammar for those types. Otherwise the problem would be decidable.
Reference: [2] <author> G. D. Plotkin. </author> <title> definability and logical relations, </title> <institution> Memorandum SAI-RM-4, School of Artificial Intelligence, University of Edinburgh, </institution> <month> Ocober </month> <year> 1973 </year>
Reference-contexts: Theorem 3.2. For every type t such that rank (t ) 2 there is a finite grammar with one type t nonterminal variable which generates all closed type t terms. Proof: Let t = t [1]; t <ref> [2] </ref>; :::; t [n] ! O. It will be proved that the following grammar (fyg; P; y) produces all closed type t terms. <p> An illustration of this case is presented in the example 3.1. Proof: Let t = t [1]; t <ref> [2] </ref>; :::; t [n] ! O. Every t [i] is one of the following types: O, O ! O or (O; :::; O ! O) ! O. Let us assume that t [r] = O for some r n. <p> p :S) for some term S 2 Cl (O; fx 1 :::x n ; z 1 :::z p g) where x i has type (O p ! O) ! O then x 1 :::x n z 1 :::z p :S is the closed term with regular type t [1]; t <ref> [2] </ref>; :::; t [n]; O p ! O. <p> Theorem 3.4. (see Zaionc [6] ) For every regular rank 3 type, such that there is no such i arg (t ) that t [i] = O, there is a finite grammar with two nonterminal variables generating all type t closed terms. Proof. Let t = t [1]; t <ref> [2] </ref>; :::; t [n] ! O. Let us define t 0 = t [1]; t [2]; :::; t [n]; O ! O. <p> Proof. Let t = t [1]; t <ref> [2] </ref>; :::; t [n] ! O. Let us define t 0 = t [1]; t [2]; :::; t [n]; O ! O. The type t 0 satisfies the assumption of theorem 3.3, therefore there exists a grammar with one nonterminal type t 0 variable y 0 , generating all closed terms of t 0 .
Reference: [3] <author> R. Statman. </author> <title> On the existence of closed terms in the typed -calculus. </title> <editor> In: R. Hind-ley and J. Seldin, eds. </editor> <title> Combinatory Logic, Lambda Calculus and Formalism (Academic Press, </title> <address> New York, </address> <year> 1980). </year>
Reference-contexts: Long normal forms exist and are unique for fi conversions (compare <ref> [3] </ref>). A closed term is a term without free variables. By Cl (t ) we mean a set of all closed type t terms. Let Y be a set of typed variables.
Reference: [4] <author> R. Statman. </author> <title> Equality of functionals revisited, in L.A. </title> <editor> Harrington et al. (Eds.), </editor> <booktitle> Harvey Friedman's Research on the Foundations of Mathematics, </booktitle> <address> North- Holland, Amsterdam, </address> <year> 1985, </year> <pages> 331-338. </pages>
Reference: [5] <author> D.A. Wolfram. </author> <title> The Clausual Theory of Types, </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 21, </booktitle> <publisher> Cambridge University Press 1993. </publisher>
Reference-contexts: For more detailed treatment of typed lambda calculus see <ref> [5] </ref>. 2. Model of simple typed lambda calculus A full type hierarchy fD t g t2T Y P ES is a collection of finite domains, one for each type. The whole hierarchy is determined by D O . <p> In the case when the system is complete, the closure D i 0 L consists of all definable objects in D t . 3. Term grammars Term grammars have been introduced in [6]. A more detailed treatment of term grammars can be found in <ref> [5] </ref> or [7].
Reference: [6] <author> M. Zaionc. </author> <title> The set of unifiers in typed calculus as regular expression, Rewriting techniques and Applications, </title> <booktitle> Lecture Notes in Computer Science 202, Springer 1985, </booktitle> <pages> 430-440. </pages>
Reference-contexts: In the case when the system is complete, the closure D i 0 L consists of all definable objects in D t . 3. Term grammars Term grammars have been introduced in <ref> [6] </ref>. A more detailed treatment of term grammars can be found in [5] or [7]. <p> It is easy to prove that this grammar generates all closed terms of type t (compare <ref> [6] </ref> or theorem 3.3). Theorem 3.2. For every type t such that rank (t ) 2 there is a finite grammar with one type t nonterminal variable which generates all closed type t terms. Proof: Let t = t [1]; t [2]; :::; t [n] ! O. <p> Therefore by induction closed terms T 1 ; :::; T k are to be generated by the grammar G. The term T can be obtained from T 1 ; :::; T k by production (2). Theorem 3.3. (see Zaionc <ref> [6] </ref> ) For every regular rank 3 type, such that there is i arg (t ) such t [i] = O, there is a finite grammar with one nonterminal variable generating all closed type t terms. An illustration of this case is presented in the example 3.1. <p> Hence our term x 1 :::x n :T can be obtained by production l r i;s from the term x 1 :::x r z s x r+1 :::x n :S. Theorem 3.4. (see Zaionc <ref> [6] </ref> ) For every regular rank 3 type, such that there is no such i arg (t ) that t [i] = O, there is a finite grammar with two nonterminal variables generating all type t closed terms. Proof.
Reference: [7] <author> M. Zaionc. </author> <title> Word Operations Definable in the Typed calculus, </title> <note> Theoretical Computer Science 52, (1987 ) pp 1- 14. 8 </note>
Reference-contexts: In the case when the system is complete, the closure D i 0 L consists of all definable objects in D t . 3. Term grammars Term grammars have been introduced in [6]. A more detailed treatment of term grammars can be found in [5] or <ref> [7] </ref>.
References-found: 7

