URL: ftp://ftp.cs.kun.nl/pub/CSI/SoftwEng.FunctLang/papers/plar91-CleanMac.ps.gz
Refering-URL: http://www.cs.kun.nl/~clean/Clean.Papers.html
Root-URL: 
Email: Email: clean@cs.kun.nl.  
Title: The Concurrent Clean System Functional Programming on the Macintosh important features of Concurrent Clean are:
Author: M.J. Plasmeijer, M.C.J.D. van Eekelen, E.G.J.M.H. Ncker, J.E.W. Smetsers, (Barendregt et al. ()). 
Keyword: FUNCTIONAL PROGRAMMING LANGUAGES CONCURRENT CLEAN  
Note: The most  
Address: Toernooiveld 1 6525 ED Nijmegen  
Affiliation: University of Nijmegen Department of Computer Science  
Abstract: Functional programming languages are general purpose, high-level languages based on the mathematical notion of functions. A functional program consists of a set of (possibly recursive) function definitions. The execution of a program consists of the evaluation of an indicated function application. Programs written in a functional language are generally very compact and also very elegant. This is mainly due to the availability of pattern matching, guards and higher-order functions. Modern functional languages use lazy evaluation which means that expressions are only evaluated when their values are actually needed in a calculation. This makes it possible to define infinite data structures. A programmer never has to worry about memory management or pointers. There is no assignment statement. As a consequence, there are no side-effects possible such that one can reason about functional programs using traditional mathematical proof techniques like induction and symbolic substitution. The expressive power is the same as with ordinary languages such as C. Another property of a functional program is that the order in which functions are evaluated cannot change the outcome of a computation. This makes functional programs also very suited for parallel execution. For all these reasons an increasing number of universities use functional languages in introductory programming courses. Functional languages are also very suited for rapid prototyping. A disadvantage of functional languages was that programs ran very, very slow and that they consumed a large amount of memory. At several universities much attention has been paid to improve the compilation techniques which has led to good compilers for several languages (Hope (Burstall et al. 1980), Lml (Johnson (1984), Haskell (Hudak et al. (1990)). However, good compilers for personal computers such as the Macintosh were not available until now. The University of Nijmegen developed Concurrent Clean: (Brus et al. (1987), Ncker et al. (1991)) an experimental, higher order lazy functional programming language suited for evaluation on a range of computer architectures varying from personal computers to parallel machine architectures. 
Abstract-found: 1
Intro-found: 0
References-found: 0

