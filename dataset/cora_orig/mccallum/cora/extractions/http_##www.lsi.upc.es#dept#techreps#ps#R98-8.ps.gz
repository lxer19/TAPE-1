URL: http://www.lsi.upc.es/dept/techreps/ps/R98-8.ps.gz
Refering-URL: http://www.lsi.upc.es/dept/techreps/1998.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: fcastell,ahernandezg@lsi.upc.es  
Title: The use of SAREL to control the correspondence between Specification Documents  
Author: Nuria Castell Angels Hernandez 
Keyword: Software Specifications, Software Quality Control, Intelligent Assistance, Natural Language  
Address: Jordi Girona 1-3. Modul C6. Barcelona, Spain  
Affiliation: Departament de Llenguatges i Sistemes Informatics  
Abstract: This paper aims to describe an extension of the SAREL system (Assistance System for Writing Software Specification in Natural Language) whose main goal is to improve the specification phase. The initial purpose of SAREL was to assist engineers in the creation of software specification written in natural language. At present the functionality of the system is twofold: vertical processing and horizontal processing. In vertical processing the input is a software specification written in natural language and the output is the conceptual representation associated. In this case the system validates every requirement taking into account the writing norms and the quality properties. The conceptual representation can be used to check the software quality factors. Working in horizontal processing the input is two different conceptual representations and the output is the information about the correspondence between them. 
Abstract-found: 1
Intro-found: 1
Reference: [Alvarez&Castell94] <author> Alvarez, J. & Castell, N. </author> <title> An Approach to the Control of Completeness Based on MetaKnowledge, </title> <type> Technical report, </type> <institution> LSI-94-50-R Dept. of LSI, Universitat Politecnica de Catalunya, </institution> <year> 1994. </year>
Reference-contexts: The Conceptual Refinement Module validates the requirement in relation to the Requirements Base. At first it obtains a conceptual representation using the Knowledge Base and after that detects duplicated information. The Software Quality Control Module carries out a series of optional analyses which validate <ref> [Alvarez&Castell94] </ref>, [Castell&Slavkova93], [Castell&Slavkova95] the global Requirements Base incremented with the new requirement. The goal is to offer information about the software quality properties which have been considered most relevant in LESD [Borillo et al.,91], [Borillo et al.,92](completeness, traceability, consistency, verifiability and modifiability).
Reference: [ANSI83] <institution> ANSI/IEEE Std 729-1983: </institution> <note> IEEE Guide to Software Requirements Specifications 1983. </note>
Reference-contexts: Documentation writing is guided by the norms which define the linguistic restrictions re-quired to satisfy the specifications. These norms are of two types: those relating to the use of natural language in general (for example, <ref> [ANSI83] </ref> and [AECMA89]), and those that are based on terminological restrictions related to a particular domain (for example, the ESA - European Space Agency norms). <p> A preliminary version of this system was described in [Hernandez94]. The assistance process, split into several steps, validates every requirement introduced by the engineer taking into account the writing norms (for instance <ref> [ANSI83] </ref>), [AECMA89]) and the quality properties [Castell et al.,94]. This process incrementally constructs a conceptual representation of the specification. The controls, shown in figure 1, can be grouped into three modules: the Style Refinement Module, the Conceptual Refinement Module and the Software Quality Control Module.
Reference: [AECMA89] <author> Association Europeene des Constructeurs de Materiel Aeronautique AECMA Simplified English, </author> <title> A Guide for the preparation of aircraft maintenance documentation in the international aerospace maintenance language, </title> <month> December </month> <year> 1989. </year>
Reference-contexts: Documentation writing is guided by the norms which define the linguistic restrictions re-quired to satisfy the specifications. These norms are of two types: those relating to the use of natural language in general (for example, [ANSI83] and <ref> [AECMA89] </ref>), and those that are based on terminological restrictions related to a particular domain (for example, the ESA - European Space Agency norms). <p> A preliminary version of this system was described in [Hernandez94]. The assistance process, split into several steps, validates every requirement introduced by the engineer taking into account the writing norms (for instance [ANSI83]), <ref> [AECMA89] </ref>) and the quality properties [Castell et al.,94]. This process incrementally constructs a conceptual representation of the specification. The controls, shown in figure 1, can be grouped into three modules: the Style Refinement Module, the Conceptual Refinement Module and the Software Quality Control Module.
Reference: [Bernth96] <author> Bernth, A. EasyEnglish: </author> <title> A Tool for Improving Document Quality. </title> <booktitle> In Proceedings of the Fifth Conference on Applied Natural Language Processing (ANLP'96). </booktitle> <pages> pages 159-165. </pages>
Reference-contexts: In this work frame there are other systems which tackle the problems associated with the specification phase like RA [Reubenstein&Waters91], NATURE [Jarke et al.,93] or with the quality of documents in general like EasyEnglish <ref> [Bernth96] </ref>, ACE [Fuchs&Schwitter96]. Documentation writing is guided by the norms which define the linguistic restrictions re-quired to satisfy the specifications.
Reference: [Borillo et al.,91] <author> Borillo, M. & Toussaint, Y. & Borillo, A. </author> <title> Motivations du project LESD. </title> <booktitle> In Conference on Linguistic Engineering'91, </booktitle> <address> Versailles, France, </address> <month> January </month> <year> 1991. </year>
Reference-contexts: The Software Quality Control Module carries out a series of optional analyses which validate [Alvarez&Castell94], [Castell&Slavkova93], [Castell&Slavkova95] the global Requirements Base incremented with the new requirement. The goal is to offer information about the software quality properties which have been considered most relevant in LESD <ref> [Borillo et al.,91] </ref>, [Borillo et al.,92](completeness, traceability, consistency, verifiability and modifiability). Once a requirement has been checked and seen to be correct, its conceptual representation is added to the Requirements Base. This base uses a frame-based formalism [Toussaint92].
Reference: [Borillo et al.,92] <author> Borillo, M. & Borillo, A. & Castell, N. & Latour, D. & Toussaint, Y. & Verdejo, M.F. </author> <title> Applying Linguistic Engineering to Software Engineering: The traceability problem. </title> <booktitle> In Proceedings of the European Conference on Artificial Intelligence (ECAI92), </booktitle> <pages> pages 593-595, </pages> <address> Viena, Austria, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: The Software Quality Control Module carries out a series of optional analyses which validate [Alvarez&Castell94], [Castell&Slavkova93], [Castell&Slavkova95] the global Requirements Base incremented with the new requirement. The goal is to offer information about the software quality properties which have been considered most relevant in LESD [Borillo et al.,91], <ref> [Borillo et al.,92] </ref>(completeness, traceability, consistency, verifiability and modifiability). Once a requirement has been checked and seen to be correct, its conceptual representation is added to the Requirements Base. This base uses a frame-based formalism [Toussaint92].
Reference: [Briscoe et al.,87] <author> Briscoe, T. & Grover, C. & Boguraev, B. & Carroll, J. </author> <title> The ALVEY Natural Language Tools Project Grammar: A Large Computational Grammar. </title> <type> Technical report, ALVEY Documents, </type> <institution> Cambridge Univ., Computer Laboratory, UK, </institution> <year> 1987. </year>
Reference-contexts: The first module controls the requirement according to the writing norms and it is split into four steps: (1) the lexical analysis verifies that the words belong to the application domain lexicon; (2) the syntactic-semantic analysis is produced using ALVEY tools <ref> [Briscoe et al.,87] </ref> a tree-like semantic representation; (3) the ambiguity control helps the engineer to identify the correct representation between the possible interpretations; (4) the simplicity control detects whether the structure of the sentence is simple or compound.
Reference: [Castell&Hernandez95] <author> Castell, N. & Hernandez, A. </author> <title> Filtering Software Specifications Written in Natural Language, </title> <booktitle> In Proceedings of the 7th Portuguese Conference on Artificial Intelligence (EPIA'95), </booktitle> <pages> pages 447-455, </pages> <address> Funchal, Madeira Island, Portugal 1995. </address>
Reference-contexts: Once a requirement has been checked and seen to be correct, its conceptual representation is added to the Requirements Base. This base uses a frame-based formalism [Toussaint92]. A more precise description of this system can be found in <ref> [Castell&Hernandez95] </ref>. 3 THE SOFTWARE SPECIFICATIONS. The first question is what kind of preliminary specifications can be found in the software specification phase. At present we have identified two different situations depending on the participants in the specifications phase.
Reference: [Castell et al.,94] <author> Castell, N. & Slavkova, O. & Toussaint, Y. & Tuells, A. </author> <title> Quality Control of Software Specifications written in Natural Language. </title> <booktitle> In Proceedings of the Seventh International Conference on Industrial and Engineering Applications of Artificial Intelligence and Expert Systems (IEA/AIE'94), </booktitle> <address> Austin, Texas, USA, </address> <year> 1994. </year>
Reference-contexts: A preliminary version of this system was described in [Hernandez94]. The assistance process, split into several steps, validates every requirement introduced by the engineer taking into account the writing norms (for instance [ANSI83]), [AECMA89]) and the quality properties <ref> [Castell et al.,94] </ref>. This process incrementally constructs a conceptual representation of the specification. The controls, shown in figure 1, can be grouped into three modules: the Style Refinement Module, the Conceptual Refinement Module and the Software Quality Control Module.
Reference: [Castell&Slavkova93] <author> Castell, N. & Slavkova, O. </author> <title> The Modifiability Factor in the LESD Project: Definition and Practical Results, </title> <type> Technical report, </type> <institution> LSI-95-7-R Dept. of LSI, Uni-versitat Politecnica de Catalunya, </institution> <year> 1993. </year>
Reference-contexts: The Conceptual Refinement Module validates the requirement in relation to the Requirements Base. At first it obtains a conceptual representation using the Knowledge Base and after that detects duplicated information. The Software Quality Control Module carries out a series of optional analyses which validate [Alvarez&Castell94], <ref> [Castell&Slavkova93] </ref>, [Castell&Slavkova95] the global Requirements Base incremented with the new requirement. The goal is to offer information about the software quality properties which have been considered most relevant in LESD [Borillo et al.,91], [Borillo et al.,92](completeness, traceability, consistency, verifiability and modifiability).
Reference: [Castell&Slavkova95] <author> Castell, N. & Slavkova, O. </author> <title> Metrics for Quality Factors in the LESD Project. </title> <booktitle> In 5th European Software Engineering Conference (ESEC'95), </booktitle> <address> Sitges, Spain, </address> <year> 1995. </year>
Reference-contexts: The Conceptual Refinement Module validates the requirement in relation to the Requirements Base. At first it obtains a conceptual representation using the Knowledge Base and after that detects duplicated information. The Software Quality Control Module carries out a series of optional analyses which validate [Alvarez&Castell94], [Castell&Slavkova93], <ref> [Castell&Slavkova95] </ref> the global Requirements Base incremented with the new requirement. The goal is to offer information about the software quality properties which have been considered most relevant in LESD [Borillo et al.,91], [Borillo et al.,92](completeness, traceability, consistency, verifiability and modifiability).
Reference: [Fuchs&Schwitter96] <author> Fuchs, E. & Schwitter, R. </author> <title> Attempto Controlled English (ACE). </title> <booktitle> In Proceedings of The First International Workshop On Controlled Language Applications. Katholieke Universiteit Leuven, </booktitle> <pages> pages 124-136, </pages> <address> Belgium, </address> <year> 1996. </year>
Reference-contexts: In this work frame there are other systems which tackle the problems associated with the specification phase like RA [Reubenstein&Waters91], NATURE [Jarke et al.,93] or with the quality of documents in general like EasyEnglish [Bernth96], ACE <ref> [Fuchs&Schwitter96] </ref>. Documentation writing is guided by the norms which define the linguistic restrictions re-quired to satisfy the specifications.
Reference: [Hernandez94] <author> Hernandez A. SAREL: </author> <title> An assistance system for writing software specifications in natural language. </title> <booktitle> In Proceedings of the IBERAMIA'94, </booktitle> <address> ISBN 980-6168-16-X Cara-cas, Venezuela, </address> <year> 1994. </year>
Reference-contexts: The conclusions are presented in section 5. 2 THE SAREL SYSTEM. The main goal of SAREL is to assist an engineer in the creation of software specifications written in natural language. A preliminary version of this system was described in <ref> [Hernandez94] </ref>. The assistance process, split into several steps, validates every requirement introduced by the engineer taking into account the writing norms (for instance [ANSI83]), [AECMA89]) and the quality properties [Castell et al.,94]. This process incrementally constructs a conceptual representation of the specification.
Reference: [Jarke et al.,93] <author> Jarke, M. & Bubenko, J. & Rolland, C. & Sutcliffe, A. & and Vassiliou, J. </author> <title> Theory Underlying Requirement Engineering: An Overview of NATURE at Genesis. </title> <booktitle> In Proceedings of the IEEE International Symposium on Requirements Engineering (RE'93) San Diego, </booktitle> <address> California, USA, </address> <year> 1993. </year>
Reference-contexts: Therefore it is important to control the writing of these documents because many mistakes can be detected if the writing is clear and concise. In this work frame there are other systems which tackle the problems associated with the specification phase like RA [Reubenstein&Waters91], NATURE <ref> [Jarke et al.,93] </ref> or with the quality of documents in general like EasyEnglish [Bernth96], ACE [Fuchs&Schwitter96]. Documentation writing is guided by the norms which define the linguistic restrictions re-quired to satisfy the specifications.
Reference: [Reubenstein&Waters91] <author> Reubenstein, H.B. & Waters, </author> <title> R.C. The Requirements Apprentice: Automated Assistance for Requirements Acquisition. </title> <journal> IEEE Transactions on Software Engineering 17 </journal> <month> 226-240 </month> <year> 1991. </year>
Reference-contexts: Therefore it is important to control the writing of these documents because many mistakes can be detected if the writing is clear and concise. In this work frame there are other systems which tackle the problems associated with the specification phase like RA <ref> [Reubenstein&Waters91] </ref>, NATURE [Jarke et al.,93] or with the quality of documents in general like EasyEnglish [Bernth96], ACE [Fuchs&Schwitter96]. Documentation writing is guided by the norms which define the linguistic restrictions re-quired to satisfy the specifications.
Reference: [Romesburg84] <author> Romesburg, H. C. </author> <title> Cluster analysis for researchers. Belmont, </title> <publisher> Calif.:Lifetime Learning Publications, </publisher> <year> 1984. </year>
Reference-contexts: In any case the system will give a correspondence measure based on similarity analyses <ref> [Romesburg84] </ref> applied over the components (entities and relations) of the requirements. * Document correspondence: the correspondence between documents will be defined in terms of the correspondence between the requirements contained into the documents.
Reference: [Toussaint92] <author> Toussaint, Y. </author> <title> Methodes Informatiques et Linguistiques pour l'Aide a la Specification de Logiciel. </title> <type> PhD thesis, </type> <institution> Universidad Paul Sabatier, Toulouse, </institution> <year> 1992. </year>
Reference-contexts: Once a requirement has been checked and seen to be correct, its conceptual representation is added to the Requirements Base. This base uses a frame-based formalism <ref> [Toussaint92] </ref>. A more precise description of this system can be found in [Castell&Hernandez95]. 3 THE SOFTWARE SPECIFICATIONS. The first question is what kind of preliminary specifications can be found in the software specification phase. At present we have identified two different situations depending on the participants in the specifications phase.
References-found: 17

