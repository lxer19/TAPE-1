URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1996/tr-96-023.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1996.html
Root-URL: http://www.icsi.berkeley.edu
Title: Structural Classification A Preliminary Report  
Author: Jana Koehler Kilian Stoffel James A. Hendler 
Address: Stuhlsatzenhausweg 3, D-66123 Saarbrucken, Germany,  College Park, MD 20742, USA,  College Park, MD 20742, USA,  
Affiliation: Center for AI (DFKI),  University of Maryland Department of Computer Science  University of Maryland Department of Computer Science  
Note: On leave from German Research  
Pubnum: TR-96-023  
Email: e-mail: koehler@dfki.uni-sb.de  e-mail: stoffel@cs.umd.edu  e-mail: hendler@cs.umd.edu  
Date: July 1996  
Abstract: A new type of classification algorithm is introduced that works on the folded representation of concepts. The algorithm comprises two phases: a preprocessing phase working on the normal-form representation of concepts to test for unsatisfiability and tautology, and a structural classifier that generates predecessors and successors of concepts by exploiting new optimization techniques not available to standard classifiers. Working on the folded terminology instead of its expanded and normalized representation allows to significantly reduce the number of subsumptions tests that are necessary to correctly classify a concept. We describe the algorithm, and prove it sound and complete for two different languages. It can be extended to more expressive languages when combined with a new method for reasoning about number restrictions over role hierarchies based on diophantine equations. The algorithm is very fast and very well parallelizable taking less than 4 hours for the classification of a terminology of 100,000 concepts on an SP2. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> J.A. Allen, R. Fikes, and E. Sandewall, editors. </editor> <booktitle> Proceedings of the 2nd International Conference on Principles of Knowledge Representation and Reasoning. </booktitle> <publisher> Morgan Kauf-mann, </publisher> <address> San Mateo, </address> <year> 1991. </year>
Reference: [2] <author> F. Baader and B. Hollunder. KRIS: </author> <title> Knowledge representation and inference system. </title> <journal> SIGART Bulletin, </journal> <volume> 2(2) </volume> <pages> 8-15, </pages> <year> 1991. </year>
Reference-contexts: The informal definition of classification as given above suggests that one can classify a concept by computing its subsumption relationships to all other concepts. This idea of classification through subsumption is a de facto standard in current descriptive reasoning systems such as CLASSIC [4], KRIS <ref> [2] </ref>, and LOOM [8]. In a preparatory step, all concept descriptions of a given terminology are expanded by replacing defined concepts through their definitions. Subsequently, the expanded descriptions are transformed into a normal form that is required by a specific subsumption algorithm.
Reference: [3] <editor> F. Baader, B. Hollunder, B. Nebel, H.-J. Profitlich, and E. Franconi. </editor> <title> An empirical analysis of optimization techniques for terminological representation systems, or making KRIS get a move on. </title> <editor> In B. Nebel, W. Swartout, and C. Rich, editors, </editor> <booktitle> Proceedings of the 3rd International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 270-281. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, </address> <year> 1992. </year>
Reference-contexts: There is common agreement that the cost for a single subsumption test is less critical to the overall performance of a classifier than the number of subsumption tests that are necessary to correctly classify a concept [6]. Optimization techniques therefore try to minimize these tests <ref> [3] </ref>. A standard classifier traverses the taxonomy both from the top down and the bottom up to find both the immediate predecessors and successors of a concept in the taxonomy. <p> A standard classifier when searching successors in its bottom phase as described in <ref> [3] </ref> tests all black nodes first and discards all but the middle one. Then the grey nodes are tested and since they are not a successor of c, it concludes that c must be placed above the middle black node. <p> In particular, the preprocessing phase, during which a fully expanded normal-form representation of value restrictions is computed needs further improval. Besides this, we work on a detailed comparison of the structural approach with the optimization techniques discussed in <ref> [3] </ref>. A classifier for an extension of the language T F allowing for arbitrary role hierarchies and set operations on roles that combines the structural approach with an arithmetic problem solver in order to achieve completeness for number restrictions over role hierarchies [11] is currently under development.
Reference: [4] <author> A. Borgida and P. Patel-Schneider. </author> <title> A semantics and complete algorithm for subsumption in the CLASSIC description logic. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 1 </volume> <pages> 277-308, </pages> <year> 1994. </year>
Reference-contexts: The informal definition of classification as given above suggests that one can classify a concept by computing its subsumption relationships to all other concepts. This idea of classification through subsumption is a de facto standard in current descriptive reasoning systems such as CLASSIC <ref> [4] </ref>, KRIS [2], and LOOM [8]. In a preparatory step, all concept descriptions of a given terminology are expanded by replacing defined concepts through their definitions. Subsequently, the expanded descriptions are transformed into a normal form that is required by a specific subsumption algorithm. <p> Roles are restricted to be primitive and can only be introduced through terminological specializations. But in contrast to CLASSIC <ref> [4] </ref> for example, we allow subroles in the language. The role hierarchy forms a tree structure, since each subrole is restricted to be a subrole of exactly one role.
Reference: [5] <author> F. M. Donini, M. Lenzerini, D. Nardi, and W. Nutt. </author> <title> The complexity of concept languages. </title> <editor> In Allen et al. </editor> <volume> [1], </volume> <pages> pages 151-162. </pages> <note> extended version available as DFKI report RR-95-07. </note>
Reference-contexts: The interaction of the subrole hierarchy, number restrictions, and value restrictions makes the satisfiability problem PSPACE-complete <ref> [5, 7] </ref>. The availability of subroles and number restrictions allows for the formulation of disjoint concepts, which seems to be of interest for practical applications. <p> and immediate predecessors PREC (c) of the concept c in the taxonomy are known. 4.1 Testing for Unsatisfiability and Tautologies In principle, in order to deal with the two special cases c &gt; and c ? any available satisfiability and tautology checkers, for example methods based on constraint solving techniques <ref> [5] </ref> or tableaux calculi [12], can be implemented here. In the following, we describe the specific tests used in parka. Normal-Form Representations The preprocessing begins with the standard transformation of the terminology into a normal form, see for example [10].
Reference: [6] <author> J. Heinsohn, D. Kudenko, B. Nebel, and H.-J. Profitlich. </author> <title> An empirical analysis of terminological representation systems. </title> <journal> Artificial Intelligence, </journal> <volume> 68(2) </volume> <pages> 367-397, </pages> <year> 1994. </year>
Reference-contexts: There is common agreement that the cost for a single subsumption test is less critical to the overall performance of a classifier than the number of subsumption tests that are necessary to correctly classify a concept <ref> [6] </ref>. Optimization techniques therefore try to minimize these tests [3]. A standard classifier traverses the taxonomy both from the top down and the bottom up to find both the immediate predecessors and successors of a concept in the taxonomy.
Reference: [7] <editor> B. Hollunder and F. Baader. </editor> <title> Qualifying number restrictions in concept languages. </title> <editor> In Allen et al. </editor> <volume> [1]. </volume>
Reference-contexts: The interaction of the subrole hierarchy, number restrictions, and value restrictions makes the satisfiability problem PSPACE-complete <ref> [5, 7] </ref>. The availability of subroles and number restrictions allows for the formulation of disjoint concepts, which seems to be of interest for practical applications.
Reference: [8] <author> R. MacGregor. </author> <title> A description classifier for the predicate calculus. </title> <booktitle> In Proceedings of the 12th National Conference of the American Association for Artificial Intelligence. </booktitle> <publisher> AAAI Press, MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: The informal definition of classification as given above suggests that one can classify a concept by computing its subsumption relationships to all other concepts. This idea of classification through subsumption is a de facto standard in current descriptive reasoning systems such as CLASSIC [4], KRIS [2], and LOOM <ref> [8] </ref>. In a preparatory step, all concept descriptions of a given terminology are expanded by replacing defined concepts through their definitions. Subsequently, the expanded descriptions are transformed into a normal form that is required by a specific subsumption algorithm.
Reference: [9] <author> B. Nebel. </author> <title> Computational complexity of terminological reasoning in BACK. </title> <journal> Artificial Intelligence, </journal> <volume> 34 </volume> <pages> 371-383, </pages> <year> 1988. </year>
Reference-contexts: and t 2 are equivalent in T (written t 1 t 2 ) if and only if E [t 1 ] = E [t 2 ] in all interpretations I = hD; exti of T . 6 The subsumption problem of this language has been proven to be co-NP-hard in <ref> [9] </ref>. The interaction of the subrole hierarchy, number restrictions, and value restrictions makes the satisfiability problem PSPACE-complete [5, 7]. The availability of subroles and number restrictions allows for the formulation of disjoint concepts, which seems to be of interest for practical applications.
Reference: [10] <author> B. Nebel. </author> <title> Reasoning and Revision in Hybrid Representation Systems. </title> <booktitle> Lecture Notes in Artificial Intelligence 422. </booktitle> <publisher> Springer, </publisher> <year> 1990. </year>
Reference-contexts: This enables us to define one classification algorithm instead of presenting several versions of the classifier for each sublanguage. The superset of all these languages corresponds to the concept description language T F defined in <ref> [10] </ref>. (parka also offers an assertional representation formalism, multiple inheritance, transitive closure of roles, role composition, exceptions, and an expressive query language but these are not considered in this paper.) In the following, we very briefly review the syntax and semantics of T F and define only the notation that we <p> The availability of subroles and number restrictions allows for the formulation of disjoint concepts, which seems to be of interest for practical applications. Problems in computing subsumption have already been illustrated in <ref> [10] </ref> (see also Section 4.1), but no solution has been devised until today that would scale to real-world applications and common practice is to live with an "almost" complete algorithm. <p> The term d is an immediate predecessor of c (written d T c) if and only if for all terms b holds: If c v T b then either d b or b 6v T d. Again, this treatment has been necessarily brief, and the reader is directed to <ref> [10] </ref> for further details and discussion. 4 The generative Classifier Given a terminology consisting of a fixed set of terminological axioms c : terminological specializations c : u i c i , the general process of classification proceeds as usual. <p> In the following, we describe the specific tests used in parka. Normal-Form Representations The preprocessing begins with the standard transformation of the terminology into a normal form, see for example <ref> [10] </ref>. Primitive concepts that are introduced through a concept specialization are transformed into defined concepts using auxiliary concepts (usually called primitive components) that remain completely undefined in the terminology, i. e. if c : d then c : = d u c. <p> For details and a proof we refer again to <ref> [10] </ref>. Based on the normal-form terminology, all concepts are expanded, i. e. defined concepts are replaced by their definition, which makes all restrictions explicit that a concept inherits.
Reference: [11] <author> H. J. Ohlbach and J. Koehler. </author> <title> Reasoning about sets via atomic decomposition. </title> <note> Research report, ICSI, 1996. In Preparation. 46 </note>
Reference-contexts: Section 4.1. The new approach to reasoning about number restrictions over role hierarchies based on diophantine equations that has been developed in <ref> [11] </ref> would overcome this deficiency, but has not yet been integrated into the classifier. In discussing classification, we will also need the notion of the immediate successor and the immediate predecessor of a term in a taxonomy. <p> A classifier for an extension of the language T F allowing for arbitrary role hierarchies and set operations on roles that combines the structural approach with an arithmetic problem solver in order to achieve completeness for number restrictions over role hierarchies <ref> [11] </ref> is currently under development. We are also working on improving the performance of the classifier to allow scaling to significantly larger knowledge bases.
Reference: [12] <author> H. J. Ohlbach, R. Schmidt, and U. Hustadt. </author> <title> Translating graded modalities into predi-cate logic. </title> <institution> Research Report MPI-I-95-2-008, Max-Planck-Institute of Computer Science, </institution> <year> 1995. </year> <note> To appear in H. </note> <editor> Wansing (ed), </editor> <title> Proof Theory for Modal Logic, </title> <publisher> Oxford Univ. Press. </publisher>
Reference-contexts: (c) of the concept c in the taxonomy are known. 4.1 Testing for Unsatisfiability and Tautologies In principle, in order to deal with the two special cases c &gt; and c ? any available satisfiability and tautology checkers, for example methods based on constraint solving techniques [5] or tableaux calculi <ref> [12] </ref>, can be implemented here. In the following, we describe the specific tests used in parka. Normal-Form Representations The preprocessing begins with the standard transformation of the terminology into a normal form, see for example [10].
Reference: [13] <author> K. Stoffel, W. Anderson, and J. Hendler. PARKA: </author> <title> Support for extremely large knowledge bases. </title> <booktitle> In Proceedings of the KRUSE Symposium on Knowledge Retrieval, Use and Storage for Efficiency, </booktitle> <year> 1995. </year>
Reference-contexts: In addition, parka is being used to support applications including case-based planning, defense transport logistics, and medical informatics supporting reasoning in knowledge bases ranging from tens of thousands to millions of logical assertions <ref> [14, 13, 15] </ref>. However, although previous work has focused on developing a powerful language including exception handling during inheritance, a graphical query interface, and tools for browsing and editing very large knowledge bases, until recently little work has gone into examining the underlying formal properties of the system.
Reference: [14] <editor> K. Stoffel and J. Hendler. </editor> <booktitle> PARKA on MIMD-supercomputers. Parallel Processing for Artificial Intelligence, </booktitle> <pages> pages 132-142, </pages> <year> 1995. </year>
Reference-contexts: In addition, parka is being used to support applications including case-based planning, defense transport logistics, and medical informatics supporting reasoning in knowledge bases ranging from tens of thousands to millions of logical assertions <ref> [14, 13, 15] </ref>. However, although previous work has focused on developing a powerful language including exception handling during inheritance, a graphical query interface, and tools for browsing and editing very large knowledge bases, until recently little work has gone into examining the underlying formal properties of the system.
Reference: [15] <author> K. Stoffel, S. Sharma, J. Hendler, and J. Saltz. </author> <title> Integrating task-parallel computations into data-parallel applications. </title> <booktitle> In Proceedings of the SIPAR-95 Workshop, </booktitle> <year> 1995. </year> <month> 47 </month>
Reference-contexts: In addition, parka is being used to support applications including case-based planning, defense transport logistics, and medical informatics supporting reasoning in knowledge bases ranging from tens of thousands to millions of logical assertions <ref> [14, 13, 15] </ref>. However, although previous work has focused on developing a powerful language including exception handling during inheritance, a graphical query interface, and tools for browsing and editing very large knowledge bases, until recently little work has gone into examining the underlying formal properties of the system.
References-found: 15

