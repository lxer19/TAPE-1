URL: http://www.cs.nyu.edu/phd_students/deepak/publications/lrcs.ps
Refering-URL: http://www.cs.nyu.edu/phd_students/deepak/index.html
Root-URL: http://www.cs.nyu.edu
Email: email: fdeepak,paigeg@cs.nyu.edu  
Title: The Formal Reconstruction and Speedup Of The Linear Time Fragment Of Willard's Relational Calculus Subset  
Author: Deepak Goyal and Robert Paige 
Note: This research was partially supported by Office of Naval Research Grant No. N00014-93-1-0924, and National Science Foundation grant CCR-9616993. Part of this work was done while Paige was visiting  
Address: 251 Mercer Street, NY, NY-10012  
Affiliation: Department of Computer Science, New York University  DIKU at the University of Copenhagen.  
Abstract: We demonstrate how several programming language concepts and methods can be used economically to obtain an improved solution to a difficult algorithmic problem. The problem is to compile a subset RCS of Relational Calculus defined by Willard (1978) in a novel way so that efficient run-time query performance is guaranteed. Willard gives an algorithm to compile each query q belonging to RCS so that it executes in O(n log d n + o) steps and O(n) space, where n and o are respectively the input and output set sizes, and d is a parameter associated with the syntax of query q. Willard's time bounds are based on the assumption that hashing unit-space data takes unit time. In this paper we use a set-theoretic complexity measure and formal transformational techniques to reconstruct the linear time fragment of RCS in a simplified way. In doing this, we show how complexity can be determined by language abstraction and algebraic reasoning without resorting to low level counting arguments. This approach shortens Willard's proofs considerably, and facilitates an implementation. Finally, we show that the implementation can be typed in a restricted form of a set-theoretic type system based on Cai et. al. (1991) and Keller and Paige (1995), which guarantees that each hash operation used to implement RCS can be simulated in real-time on a pointer machine model of computation. This improves Willard's linear expected time result to linear worst case time, and demonstrates for the first time how type theory can be used as a tool to obtain an order of magnitude algorithmic speedup. 
Abstract-found: 1
Intro-found: 1
Reference: <author> H. R. </author> <title> Anderson (1994). Model checking and boolean graphs. </title> <journal> Theoretical Computer Science, </journal> <volume> 126(1) </volume> <pages> 3-30. </pages>
Reference: <author> A. Arnold and P. </author> <month> Crubille </month> <year> (1988). </year> <title> A linear algorithm to solve fixed point equations on transition systems. </title> <journal> In Information Processing Letters, </journal> <volume> volume 29, </volume> <pages> pages 57-66. </pages>
Reference: <author> J. Cai, P. Facon, F. Henglein, R. Paige, and E. </author> <title> Schonberg (1991). Type transformation and data structure choice. </title> <editor> In B. Moeller, editor, </editor> <booktitle> Constructing Programs From Specifications, </booktitle> <pages> pages 126-164. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam. </address> <note> 24 Formal Reconstruction and Speedup of Willard's RCS J. </note> <author> Cai and R. </author> <title> Paige (1987). Binding performance at language design time. </title> <booktitle> In Proc. Fourteenth ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 85 - 97. </pages>
Reference: <author> J. Cai and R. </author> <title> Paige (1992). Languages polynomial in the input plus output. </title> <editor> In M. Nivat, C. Rat-tray, T. Rus, and G. Scollo, editors, </editor> <booktitle> Algebraic Methodology and Software Technology, Workshops in Computing, </booktitle> <pages> pages 287-302. </pages> <editor> Springer-Verlag. </editor> <booktitle> Conference Record of the Second AMAST. </booktitle>
Reference: <author> J. Cai and R. </author> <title> Paige (1995). Using multiset discrimination to solve language processing problems without hashing. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 145(1-2):189-228. URL http://cs.nyu.edu/cs/faculty/paige/papers/hash.ps. </address>
Reference: <author> R. Cleavaland and B. </author> <title> Steffen (1992). A linear-time model-checking algorithm for the alternation-free modal-calculus. </title> <type> Technical report, </type> <institution> Computer Science Dept., North Carolina University. </institution>
Reference: <author> E. F. </author> <title> Codd (1970). A relational model of data for large shared data banks. </title> <journal> CACM, </journal> <volume> 13(6) </volume> <pages> 377-387. </pages>
Reference-contexts: Willard's result is algorithmic rather than complexity-theoretic, since no lower bound is implied for any problem that cannot be expressed in RCS. Our interest in Willard's fascinating work is motivated by a number of issues. RCS is a rare comprehensive investigation of query translation for the Relational Calculus <ref> (Codd 1970) </ref>, which is regarded as more difficult to implement than the Relational Algebra (Codd 1970). Willard's work is one of the earliest investigations that link a substantial language to low order run-time query complexity for a main memory model. <p> Our interest in Willard's fascinating work is motivated by a number of issues. RCS is a rare comprehensive investigation of query translation for the Relational Calculus <ref> (Codd 1970) </ref>, which is regarded as more difficult to implement than the Relational Algebra (Codd 1970). Willard's work is one of the earliest investigations that link a substantial language to low order run-time query complexity for a main memory model. Willard's investigation is also one of the earliest nontrivial examples of output-sensitive algorithmic analysis.
Reference: <author> H. B. Hunt-III, T. G. Szymanski, and J. D. </author> <title> Ullman (1977). Operations on sparse relations. </title> <journal> CACM, </journal> <volume> 20(3) </volume> <pages> 127-132. </pages>
Reference: <author> J. Keller and R. </author> <title> Paige (1995). Program derivation with verified transformations a case study. </title> <journal> CPAM, </journal> <pages> 48(9-10). </pages>
Reference: <author> D. E. </author> <title> Knuth (1973). </title> <booktitle> The Art of Computer Programming, </booktitle> <volume> Vol 1: </volume> <booktitle> Fundamental Algorithms. </booktitle> <publisher> Addison-Wesley. </publisher>
Reference: <author> H. R. </author> <title> Nielson (1984). Hoare Logic's for Run-time Analysis of Programs. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, </institution> <address> Scotland. </address>
Reference: <author> H. R. </author> <title> Nielson (1987). A Hoare-like Proof System for Run-time Analysis of Programs. </title> <booktitle> Science of Computer Programming, </booktitle> <pages> 9. </pages>
Reference: <author> R. </author> <title> Paige (1989). Real-time simulation of a set machine on a ram. </title> <editor> In N. Janicki and W. Koczkodaj, editors, </editor> <booktitle> Computing and Information, </booktitle> <volume> volume II, </volume> <pages> pages 69-73. </pages> <publisher> Canadian Scholars' Press, Toronto. </publisher>
Reference: <author> R. </author> <title> Paige (1994). Efficient translation of external input in a dynamically typed language. </title> <editor> In B. Pehrson and I. Simon, editors, </editor> <booktitle> Technology and Foundations Information Processing 94, volume 1 of IFIP Transactions A-51, </booktitle> <pages> pages 603-608. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam. </address> <booktitle> Conference Record of IFIP Congress 94. </booktitle>
Reference: <author> R. Paige and Z. </author> <title> Yang (1997). High level reading and data structure compilation. </title> <booktitle> 24th Annual ACM SIGPLAN-SIGACT Symposium on Principle of Programming Languages, </booktitle> <pages> pages 456-469. </pages>
Reference: <author> J. </author> <title> Schwartz (1974). On Programming: An Interim Report on the SETL Project, Installments I and II. </title> <address> New York University, New York. </address>
Reference: <author> J. </author> <title> Schwartz (1975a). Automatic data structure choice in a language of very high level. </title> <journal> CACM, </journal> <volume> 18(12) </volume> <pages> 722-728. </pages>
Reference: <author> J. </author> <title> Schwartz (1975b). Optimization of very high level languages, parts i, ii. </title> <journal> J. of Computer Languages, </journal> <volume> 1(2, </volume> 3):161-218. 
Reference: <author> J. Schwartz, R. Dewar, E. Dubinsky, and E. </author> <title> Schonberg (1986). Programming with Sets: An Introduction to SETL. </title> <publisher> Springer-Verlag, </publisher> <address> New York. </address>
Reference: <author> K. </author> <title> Snyder (1990). The SETL2 programming language. </title> <type> Technical Report 490, </type> <institution> Courant Insititute, New York University. </institution>
Reference: <author> P. </author> <title> Suppes (1972). Axiomatic Set Theory. </title> <publisher> Dover. </publisher>
Reference: <author> R. </author> <title> Tarjan (1979). A class of algorithms which require nonlinear time to maintain disjoint sets. </title> <journal> Journal of computer and System Sciences, </journal> <volume> 18 </volume> <pages> 110-127. </pages>
Reference: <author> D. E. </author> <title> Willard (1978). Predicate Oriented Database Search Algorithms. </title> <type> PhD thesis, </type> <institution> Harvard. </institution>
Reference: <author> D. E. </author> <title> Willard (1983). Predicate retrieval theory. </title> <type> Technical Report 83-3, </type> <institution> SUNY Albany. </institution>

References-found: 24

