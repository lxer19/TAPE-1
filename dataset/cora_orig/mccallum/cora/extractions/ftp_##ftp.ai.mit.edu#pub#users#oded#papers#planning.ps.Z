URL: ftp://ftp.ai.mit.edu/pub/users/oded/papers/planning.ps.Z
Refering-URL: http://www.ai.mit.edu/people/oded/
Root-URL: 
Email: oded@ai.mit.edu  tlp@ai.mit.edu  
Title: Visible Decomposition: Real-Time Path Planning in Large Planar Environments  
Author: Oded Maron Tomas Lozano-Perez 
Address: NE43-755  Cambridge, MA 02139  NE43-836a  Cambridge, MA 02139  
Affiliation: Artificial Intelligence Lab  Massacusetts Institute of Technology  Artificial Intelligence Lab  Massacusetts Institute of Technology  
Abstract: We describe a method called Visible Decomposition for computing collision-free paths in real time through a planar environment with a large number of obstacles. This method divides space into local visibility graphs, ensuring that all operations are local. The search time is kept low since the number of regions is proved to be small. We analyze the computational demands of the algorithm and the quality of the paths it produces. In addition, we show test results on a large simulation testbed. 
Abstract-found: 1
Intro-found: 1
Reference: [ Asano et al., 1986 ] <author> Takao Asano, Tetsuo Asano, Leonidas Guibas, John Hershberger, and Hiroshi Imai. </author> <title> Visibility of disjoint polygons. </title> <journal> Algorithmica, </journal> <volume> 1 </volume> <pages> 49-63, </pages> <year> 1986. </year> <month> 16 </month>
Reference-contexts: Then, computing the entire static graph is O (n 3 ) since we need to insert all n points, each of which takes O (n 2 ). This is the naive implementation, and there are methods which are theoretically faster <ref> [ Asano et al., 1986 ] </ref> . However, they tend to be complicated and are slower in practice than the naive method. For the analysis of the Visible Decomposition approach, we assume that the points are on average uniformly distributed through the configuration space.
Reference: [ Brock et al., 1992 ] <author> D.L. Brock, D.J. Montana, and A.Z. Ceranowicz. </author> <title> Coordination and Control of Multiple Autonomous Vehicles. </title> <booktitle> In Proc. of IEEE International Conference on Robotics and Automation. IEEE, </booktitle> <year> 1992. </year>
Reference-contexts: The particular problem we faced was to create a real-time motion planning mechanism for the simulated forces (ModSAF) in the SIMNET military simulation environment <ref> [ Brock et al., 1992 ] </ref> . Because this is a simulation system, the problems of uncertainty in sensing and control so prominent in robotic motion planning are essentially non-existent. Also, in our case, it is sufficient to consider translational motion in the plane.
Reference: [ Brooks and Lozano-Perez, 1985 ] <author> R. A. Brooks and T. Lozano-Perez. </author> <title> A subdivision algorithm in configuration space for findpath with rotation. </title> <journal> "IEEE Transacations on Systems, Man and Cybernetics", </journal> <volume> SMC-15(2):224-233, </volume> <year> 1985. </year>
Reference-contexts: Another (smaller) disadvantage is that the algorithms for updating the generalized Voronoi diagram when obstacles change are a bit complex and numerically sensitive. * The other classic approach to motion planning in the plane (and elsewhere) is the cell-decomposition approach <ref> [ Brooks and Lozano-Perez, 1985 ] </ref> where the space outside of the C-space obstacles is divided into (usually) convex cells that are completely outside the obstacles and which are then connected into a graph. Many versions of this approach exist, some based on hierarchic decompositions and others on line-scanning methods.
Reference: [ Canny and Donald, 1988 ] <author> J. Canny and B. Donald. </author> <title> Simplified voronoi diagrams. </title> <journal> Discrete and Computational Geometry, </journal> <volume> 3 </volume> <pages> 219-236, </pages> <year> 1988. </year>
Reference-contexts: Furthermore, the cost of changing the obstacles in the optimal algorithms is empirically very high. * Another class of methods is based on the "generalized" Voronoi diagram <ref> [ O'Dunlaing and Yap, 1982, Canny and Donald, 1988 ] </ref> . These methods can support very fast path planning since they produce small graphs and, although more difficult to implement than simple visibility graph methods, are quite practical.
Reference: [ Latombe, 1991 ] <author> Jean-Claude Latombe. </author> <title> Robot motion planning. </title> <publisher> Kluwer Academic, </publisher> <year> 1991. </year>
Reference-contexts: Since the first and third steps are well understood <ref> [ Latombe, 1991 ] </ref> , the variability among path-planning methods is limited to the second step.
Reference: [ Lozano-Perez and Wesley, 1979 ] <author> Tomas Lozano-Perez and M. Wesley. </author> <title> An algorithm for planning collision-free paths among polyhedral obstacles. </title> <journal> Communications of the ACM, </journal> <volume> 22 </volume> <pages> 560-570, </pages> <year> 1979. </year>
Reference: [ Nilsson, 1984 ] <author> Nils J. Nilsson. </author> <title> Shakey the robot. </title> <institution> SRI TN-323, SRI International, </institution> <year> 1984. </year>
Reference: [ O'Dunlaing and Yap, 1982 ] <author> C. O. O'Dunlaing and C. K. Yap. </author> <title> A retraction method for planning the motion of a disc. </title> <journal> Journal of Algorithms, </journal> <volume> 6(1) </volume> <pages> 104-111, </pages> <year> 1982. </year>
Reference-contexts: Furthermore, the cost of changing the obstacles in the optimal algorithms is empirically very high. * Another class of methods is based on the "generalized" Voronoi diagram <ref> [ O'Dunlaing and Yap, 1982, Canny and Donald, 1988 ] </ref> . These methods can support very fast path planning since they produce small graphs and, although more difficult to implement than simple visibility graph methods, are quite practical.
Reference: [ Santalo, 1976 ] <author> L. A. Santalo. </author> <title> Integral Geometry and Geometric Probability. Encyclopedia of Mathematics and its applications. </title> <publisher> Addison-Wesley, </publisher> <year> 1976. </year> <month> 17 </month>
Reference-contexts: However, the basic results hold on a non-empty world as well. With no partitioning, the average distance between two points in a square with sides of length s is <ref> [ Santalo, 1976 ] </ref> OP T = s 2 + 2 + 5 log (1 + 2) (1) We would like to compare this to the average distance between two points in a unit square with the following restriction: there is a k fi k grid imposed on the square and
References-found: 9

