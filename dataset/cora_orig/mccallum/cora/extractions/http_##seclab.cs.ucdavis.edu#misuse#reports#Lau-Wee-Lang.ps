URL: http://seclab.cs.ucdavis.edu/misuse/reports/Lau-Wee-Lang.ps
Refering-URL: http://arch.cs.ucdavis.edu/~chong/student97/proceedings.html
Root-URL: http://www.cs.ucdavis.edu
Email: maria@ece.ucdavis.edu, wee@cs.ucdavis.edu, lang@cs.ucdavis.edu  
Title: Instruction Usage in Evolving Polymorphic Viruses  
Author: Maria Lau, Christopher Wee, Julie Lang 
Affiliation: University of California, Davis  
Abstract: 1 This research sponsored under grant F96-F154000-000NC, Office of Research and Development, CIA. Maria is an undergraduate (Junior) pursuing a BSEE in the Department of Electrical Engineering. Her research mentored by Dr. Wee, under the Womens Engineering Link Mentorship program. Dr. Matt Bishop is her faculty sponsor. Christopher is a postdoctoral researcher in the Computer Security Laboratory. Julie is a graduate student pursuing a MSCS; her thesis concerns polymorphic virus detection. Address: 2245 EUII, Dept. of Computer Science, UC Davis. http://seclab.cs.ucdavis.edu/misuse. Abstract This paper summarizes ongoing research on polymorphic viruses and their detection. Our basic hypothesis is that polymorphic viruses that use a codesubstitution mutation method (e.g. the Mutation Engine), the distribution of various instruction types (moves, branches, arithmetic, etc.) changes with each succeeding generation of the virus. Hence, it may be possible to detect the existence of a polymorphic virus by detecting shifts in instruction distributions in programs stored in a computer. 
Abstract-found: 1
Intro-found: 1
Reference: [Coh87] <author> Fred Cohen, </author> <title> Computer Viruses Theory and Experiments, </title> <journal> IFIP TC11 Computers and Security, </journal> <volume> Vol. 6. </volume> <pages> pp. </pages> <month> 22-35 </month> <year> (1987). </year>
Reference-contexts: 1. Introduction A computer virus is a program that can replicate and infect other programs by modifying them to include a, possibly evolved, version of itself <ref> [Coh87] </ref>. A virus infects another file by attaching a copy of itself (its replicate) onto another (uninfected) file. That replicated virus and its parent may continue to infect other files. The rate of infection may grow exponentially.
Reference: [Man+92] <author> Nowhere Man and [NuKE] WaReZ. </author> <title> Documentation for Nowhere Man's VCL. </title> <note> Version 1.00, </note> <year> 1992. </year>
Reference-contexts: The resulting timeseries, instruction frequency distributions versus virus generation, are analyzed statistically to detect trends. These trends are the basis of polymorphic virus detection techniques. 2. Experiment We use virus-generation tool, the Virus Creation Laboratory <ref> [Man+92] </ref>, to create a regular, non-polymorphic, virus which appends itself to COM files. To transform this virus into a polymorphic variant, we link it with the Dark Avenger's polymorphic engine called MtE: Mutation Engine [Yet92] [Yet93]. This polymorphic virus is the ancestor virus for our experiment.
Reference: [Pol+95] <editor> W. Timothy Polk et al. </editor> <booktitle> AntiVirus Tools and Techniques for Computer Systems. </booktitle> <address> Park Ridge, New Jersey. </address> <year> 1995. </year>
Reference-contexts: The timeseries of instruction distributions over virus generations (see Figure 1) indicate that instruction usage changes linearly with each generation while the arithmetic, memory, and "other" instruction divisions remain unchanged. 4. Conclusions Popular antivirus tools utilize signature scanning and algorithmic detection <ref> [Pol+95] </ref>. However, polymorphic viruses defeat many scanners by encrypting itself. The results from this experiment will be useful to improve scanners so that they can better detect polymorphic viruses by means of the instruction distribution in the mutated virus's code.
Reference: [Yet92] <author> Tarkan Yetiser. </author> <title> "Mutation Engine Report". </title> <address> Baltimore, MD, </address> <month> June 22, </month> <year> 1992. </year> <note> http://www.chibacity.com/chiba/files /vtext/anote.1 </note>
Reference-contexts: Experiment We use virus-generation tool, the Virus Creation Laboratory [Man+92], to create a regular, non-polymorphic, virus which appends itself to COM files. To transform this virus into a polymorphic variant, we link it with the Dark Avenger's polymorphic engine called MtE: Mutation Engine <ref> [Yet92] </ref> [Yet93]. This polymorphic virus is the ancestor virus for our experiment. In a closely controlled environment, we allow the ancestor virus to execute and mutate into fifty new generations. Thus, each mutant is a variant of the previous generation.
Reference: [Yet93] <author> Tarkan Yetiser. </author> <title> "Polymorphic Viruses: Implementation, Detection, and Protection". </title> <address> Baltimore, MD, </address> <month> January 24, </month> <year> 1993. </year> <title> http://www.bocklabs.wisc. edu/~janda/polymorf.html Instruction counts of Ancestor virus Arithmetic 6% Logical 5% Branches 29% Moves 60% Other 0% Arithmetic Logical Branches Moves Other </title> . 
Reference-contexts: Experiment We use virus-generation tool, the Virus Creation Laboratory [Man+92], to create a regular, non-polymorphic, virus which appends itself to COM files. To transform this virus into a polymorphic variant, we link it with the Dark Avenger's polymorphic engine called MtE: Mutation Engine [Yet92] <ref> [Yet93] </ref>. This polymorphic virus is the ancestor virus for our experiment. In a closely controlled environment, we allow the ancestor virus to execute and mutate into fifty new generations. Thus, each mutant is a variant of the previous generation.
References-found: 5

