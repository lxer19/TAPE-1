URL: http://www.cs.wisc.edu/~shoup/papers/detfac.ps.Z
Refering-URL: http://www.cs.wisc.edu/~shoup/papers/
Root-URL: 
Title: On the Deterministic Complexity of Factoring Polynomials over Finite Fields  
Author: Victor Shoup 
Keyword: factorization, finite fields, irreducible polynomials.  
Note: This research was supported by NSF grants DCR-8504485 and DCR-8552596. Appeared in Information Processing Letters 33, pp.  
Date: February 21, 1989  261-267, 1990.  
Address: Madison, WI 53706  
Affiliation: Computer Sciences Department University of Wisconsin-Madison  
Abstract: We present a new deterministic algorithm for factoring polynomials over Z p of degree n. We show that the worst-case running time of our algorithm is O(p 1=2 (log p) 2 n 2+* ), which is faster than the running times of previous deterministic algorithms with respect to both n and p. We also show that our algorithm runs in polynomial time for all but at most an exponentially small fraction of the polynomials of degree n over Z p . Specifically, we prove that the fraction of polynomials of degree n over Z p for which our algorithm fails to halt in time O((log p) 2 n 2+* ) is O((n log p) 2 =p). Consequently, the average-case running time of our algorithm is polynomial in n and log p. An preliminary version of this paper appeared as University of Wisconsin-Madison, Computer Sciences Department Technical Report #782, July 1988. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> A. Aho, J. Hopcroft and J. Ullman. </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison-Wesley (1974). </publisher>
Reference-contexts: Munro [6, p. 100]). (3) follows from (1) by a Newton iteration scheme (see Borodin and Munro [6, p. 95]). (4) follows from (3) by a divide and conquer method (see Borodin and Munro [6, p. 100]). (5) follows from (1) by an algorithm described in Aho, Hopcroft and Ullman <ref> [1, pp. 303-308] </ref>. Let f be the polynomial of degree n in Z p [X] to be factored. The distinct degree factorization of f can be performed using O ((log p)n 2+* ) operations in Z p (see, for example, Ben-Or [4] for more details).
Reference: 2. <author> E. Bach. </author> <title> "Realistic analysis of some randomized algorithms," </title> <booktitle> in Proc. 19th Annual ACM Symp. on Theory of Computing, </booktitle> <pages> pp. </pages> <month> 453-461 </month> <year> (1987). </year>
Reference-contexts: The worst-case and average-case analysis of the dependence on p in the running time of our algorithm makes use of estimates of the number of solutions to equations over finite fields; similar techniques have been previously used in the analysis of various probabilistic algorithms <ref> [2, 3, 4] </ref>. The rest of this paper is organized as follows: Section 2 describes our new factoring algorithm, Section 3 analyzes its worst-case complexity, and Section 4 analyzes its average-case complexity.
Reference: 3. <author> E. Bach and V. Shoup. </author> <title> "Factoring polynomials using fewer random bits," </title> <note> Computer Sciences Technical Report No. 757, University of Wisconsin-Madison; Journal of Symbolic Computation, to appear (1988). </note>
Reference-contexts: The worst-case and average-case analysis of the dependence on p in the running time of our algorithm makes use of estimates of the number of solutions to equations over finite fields; similar techniques have been previously used in the analysis of various probabilistic algorithms <ref> [2, 3, 4] </ref>. The rest of this paper is organized as follows: Section 2 describes our new factoring algorithm, Section 3 analyzes its worst-case complexity, and Section 4 analyzes its average-case complexity.
Reference: 4. <author> M. Ben-Or. </author> <title> "Probabilistic algorithms in finite fields," </title> <booktitle> in Proc. 22nd Annual Symp. on Foundations of Computer Science, </booktitle> <pages> pp. </pages> <month> 394-398 </month> <year> (1981). </year>
Reference-contexts: In this paper, the expression n * denotes a fixed, but unspecified, polynomial in log n. There are also many probabilistic algorithms for this problem whose expected running time is polynomial, i.e. polynomial in n and log p. One of the asymptotically fastest probabilistic algorithms is due to Ben-Or <ref> [4] </ref>. Ben-Or's algorithm uses O ((log p)n 2+* ) expected operations in Z p . The running time of a different probabilistic algorithm due to Cantor and Zassenhaus [9] is also O ((log p)n 2+* ). <p> The worst-case and average-case analysis of the dependence on p in the running time of our algorithm makes use of estimates of the number of solutions to equations over finite fields; similar techniques have been previously used in the analysis of various probabilistic algorithms <ref> [2, 3, 4] </ref>. The rest of this paper is organized as follows: Section 2 describes our new factoring algorithm, Section 3 analyzes its worst-case complexity, and Section 4 analyzes its average-case complexity. <p> A New Factoring Method In this section, we describe a new algorithm for factoring polynomials over Z p . Let f 2 Z p [X] be a polynomial of degree n that we wish to factor. As in Ben-Or <ref> [4] </ref> and Cantor and Zassenhaus [9], we first perform distinct degree factorization. That is, we construct polynomials f (1) ; : : : ; f (n) where f (d) (1 d n) is the product of all the distinct monic irreducible polynomials of degree d that divide f . <p> Let f be the polynomial of degree n in Z p [X] to be factored. The distinct degree factorization of f can be performed using O ((log p)n 2+* ) operations in Z p (see, for example, Ben-Or <ref> [4] </ref> for more details). Consider factoring g = f (d) for a fixed 1 d n.
Reference: 5. <author> E. Berlekamp. </author> <title> "Factoring polynomials over large finite fields," </title> <journal> Mathematics of Computation, </journal> <volume> Vol. 24, No. 111, </volume> <pages> pp. </pages> <month> 713-735 </month> <year> (1970). </year>
Reference-contexts: There are several deterministic algorithms for this problem whose running time is polynomial for small p, i.e. polynomial in n and p. One of the asymptotically fastest deterministic algorithms is that of Berlekamp <ref> [5] </ref> as refined by von zur Gathen [12]. The Berlekamp-von zur Gathen algorithm uses O (M (n) + pn 2+* ) arithmetic operations in Z p , where M (n) is the number of operations required to multiply two n by n matrices. <p> Following Camion [7], we call a subset S B a separating set if for any 1 i &lt; j k there exists s 2 S such that i (s) 6= j (s). Many factoring algorithms, including those of Berlekamp <ref> [5] </ref> and Camion [7], involve the computation of a separating set. <p> The idea of factoring a polynomial by examining the elements of the form (s + z) (p1)=2 where s is in the Berlekamp subalgebra and z = 0; 1; 2, etc., originates with Berlekamp <ref> [5, p. 732] </ref>. However, prior to this research, apparently no analysis has been done on the worst-case or average-case complexity of algorithms based on this idea. Remark 2.
Reference: 6. <author> A. Borodin and I. Munro. </author> <title> The Computational Complexity of Algebraic and Numeric Problems, </title> <publisher> Amer--ican Elsevier (1975). </publisher>
Reference-contexts: We note that the results of Schonhage [17] would actually be sufficient for our purposes. (2) follows from (1) by a divide and conquer method (see Borodin and Munro <ref> [6, p. 100] </ref>). (3) follows from (1) by a Newton iteration scheme (see Borodin and Munro [6, p. 95]). (4) follows from (3) by a divide and conquer method (see Borodin and Munro [6, p. 100]). (5) follows from (1) by an algorithm described in Aho, Hopcroft and Ullman [1, pp. <p> We note that the results of Schonhage [17] would actually be sufficient for our purposes. (2) follows from (1) by a divide and conquer method (see Borodin and Munro [6, p. 100]). (3) follows from (1) by a Newton iteration scheme (see Borodin and Munro <ref> [6, p. 95] </ref>). (4) follows from (3) by a divide and conquer method (see Borodin and Munro [6, p. 100]). (5) follows from (1) by an algorithm described in Aho, Hopcroft and Ullman [1, pp. 303-308]. <p> for our purposes. (2) follows from (1) by a divide and conquer method (see Borodin and Munro <ref> [6, p. 100] </ref>). (3) follows from (1) by a Newton iteration scheme (see Borodin and Munro [6, p. 95]). (4) follows from (3) by a divide and conquer method (see Borodin and Munro [6, p. 100]). (5) follows from (1) by an algorithm described in Aho, Hopcroft and Ullman [1, pp. 303-308]. Let f be the polynomial of degree n in Z p [X] to be factored.
Reference: 7. <author> P. Camion. </author> <title> "Improving an algorithm for factoring polynomials over a finite field and constructing large irreducible polynomials," </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> Vol. 29, No. 3, </volume> <pages> pp. </pages> <month> 378-385 </month> <year> (1983). </year>
Reference-contexts: The well-known Berlekamp subalgebra B of R is defined by B = fff 2 R : ff p = ffg. Equivalently, we have B = fff 2 R : i (ff) 2 Z p for each i = 1; : : : ; kg. Following Camion <ref> [7] </ref>, we call a subset S B a separating set if for any 1 i &lt; j k there exists s 2 S such that i (s) 6= j (s). Many factoring algorithms, including those of Berlekamp [5] and Camion [7], involve the computation of a separating set. <p> Following Camion <ref> [7] </ref>, we call a subset S B a separating set if for any 1 i &lt; j k there exists s 2 S such that i (s) 6= j (s). Many factoring algorithms, including those of Berlekamp [5] and Camion [7], involve the computation of a separating set.
Reference: 8. <author> D. Cantor and E. Kaltofen. </author> <title> "Fast multiplication of polynomials over arbitrary rings," </title> <institution> Department of Computer Science Technical Report No. 87-35, Rensselaer Polytechnic Institute (1987). </institution>
Reference-contexts: Then the greatest common divisor of f and g can be computed using O (nL (n)(log n)) operations in F . 4 (1) is proved in Cantor and Kaltofen <ref> [8] </ref>.
Reference: 9. <author> D. Cantor and H. Zassenhaus. </author> <title> "A new algorithm for factoring polynomials over finite fields," </title> <journal> Mathematics of Computation, </journal> <volume> Vol. 36, No. 154, </volume> <pages> pp. </pages> <month> 587-592 </month> <year> (1981). </year>
Reference-contexts: One of the asymptotically fastest probabilistic algorithms is due to Ben-Or [4]. Ben-Or's algorithm uses O ((log p)n 2+* ) expected operations in Z p . The running time of a different probabilistic algorithm due to Cantor and Zassenhaus <ref> [9] </ref> is also O ((log p)n 2+* ). This state of affairs suggests that there may be a significant gap between the deterministic and probabilistic complexity of this problem. <p> A New Factoring Method In this section, we describe a new algorithm for factoring polynomials over Z p . Let f 2 Z p [X] be a polynomial of degree n that we wish to factor. As in Ben-Or [4] and Cantor and Zassenhaus <ref> [9] </ref>, we first perform distinct degree factorization. That is, we construct polynomials f (1) ; : : : ; f (n) where f (d) (1 d n) is the product of all the distinct monic irreducible polynomials of degree d that divide f .
Reference: 10. <author> G. Collins. </author> <title> "Factoring univariate integral polynomials in polynomial average time." </title> <booktitle> Eurosam '79: Springer-Verlag Lecture Notes in Computer Science #72, </booktitle> <pages> pp. </pages> <month> 317-329 </month> <year> (1979). </year>
Reference-contexts: There are very few problems in computational number theory whose average-case complexity have been analyzed. For example, Knuth and Trabb Pardo [14] and Hafner and McCurley [13] have analyzed the average-case complexity of factoring over the integers; Collins <ref> [10] </ref> has analyzed the average-case complexity of an algorithm for factoring polynomials over the rationals. We are unaware of any previous work analyzing the average-case complexity of factoring polynomials over finite fields. Our algorithm is fairly simple, and the space requirement of our algorithm is polynomial.
Reference: 11. <author> D. Coppersmith and S. Winograd. </author> <title> "Matrix multiplication via Behrend's method," </title> <booktitle> Proc. 19th Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pp. </pages> <month> 1-6 </month> <year> (1987). </year>
Reference-contexts: The Berlekamp-von zur Gathen algorithm uses O (M (n) + pn 2+* ) arithmetic operations in Z p , where M (n) is the number of operations required to multiply two n by n matrices. Currently, the best known upper-bound on M (n) is approximately O (n 2:4 ) <ref> [11] </ref>. In this paper, the expression n * denotes a fixed, but unspecified, polynomial in log n. There are also many probabilistic algorithms for this problem whose expected running time is polynomial, i.e. polynomial in n and log p.
Reference: 12. <author> J. von zur Gathen. </author> <title> "Factoring polynomials and primitive elements for special primes," </title> <journal> Theoretical Computer Science, </journal> <volume> Vol. 52, </volume> <pages> pp. </pages> <month> 77-89 </month> <year> (1987). </year>
Reference-contexts: There are several deterministic algorithms for this problem whose running time is polynomial for small p, i.e. polynomial in n and p. One of the asymptotically fastest deterministic algorithms is that of Berlekamp [5] as refined by von zur Gathen <ref> [12] </ref>. The Berlekamp-von zur Gathen algorithm uses O (M (n) + pn 2+* ) arithmetic operations in Z p , where M (n) is the number of operations required to multiply two n by n matrices.
Reference: 13. <author> J. Hafner and K. McCurley. </author> <title> "On the distribution of running times of certain integer factoring algorithms," </title> <note> preprint (1987). </note>
Reference-contexts: There are very few problems in computational number theory whose average-case complexity have been analyzed. For example, Knuth and Trabb Pardo [14] and Hafner and McCurley <ref> [13] </ref> have analyzed the average-case complexity of factoring over the integers; Collins [10] has analyzed the average-case complexity of an algorithm for factoring polynomials over the rationals. We are unaware of any previous work analyzing the average-case complexity of factoring polynomials over finite fields.
Reference: 14. <author> D. Knuth and L. Trabb Pardo. </author> <title> "Analysis of a simple factorization algorithm," </title> <journal> Theoretical Computer Science, </journal> <volume> Vol. 3, </volume> <pages> pp. </pages> <month> 321-348 </month> <year> (1976). </year>
Reference-contexts: There are very few problems in computational number theory whose average-case complexity have been analyzed. For example, Knuth and Trabb Pardo <ref> [14] </ref> and Hafner and McCurley [13] have analyzed the average-case complexity of factoring over the integers; Collins [10] has analyzed the average-case complexity of an algorithm for factoring polynomials over the rationals. We are unaware of any previous work analyzing the average-case complexity of factoring polynomials over finite fields.
Reference: 15. <author> M. Rabin. </author> <title> "Probabilistic algorithms in finite fields," </title> <journal> SIAM J. Comput., </journal> <volume> Vol. 9, No. 2, </volume> <pages> pp. </pages> <month> 273-280 </month> <year> (1980). </year>
Reference-contexts: From Lemma 4.1, we see that I (d) (p (log p) 2 ) d . Let N (d) be the number of monic irreducible polynomials of degree d. As is well known (see, e.g., Rabin <ref> [15, Lemma 2] </ref>), N (d) = fi (p d =d). Then B 0 = I (d)=(N (d)) 2 = O (((log p) 2 =p) d d 2 ) = O ((log p) 2 =p). (2) now follows immediately, and so Theorem 2 is proved.
Reference: 16. <author> W. Schmidt. </author> <title> Equations over Finite Fields, </title> <note> Springer-Verlag Lecture Notes in Mathematics No. 536 (1976). </note>
Reference-contexts: But this implies that la = lb, and since 0 &lt; l &lt; p, we can cancel, obtaining a = b, a contradiction. Therefore, (X) is not a perfect square. From Weil's Theorem (see Schmidt <ref> [16, p. 43] </ref>), for any monic polynomial in Z p [X] that is not a perfect square, we have fi fi X ((x)) fi fi (r 1)p 1=2 ; where r is the number of distinct roots of in its splitting field.
Reference: 17. <author> A. Schonhage. </author> <title> "Schnelle Multiplikation von Polynomen uber Korpern der Charakteristik 2," </title> <journal> Acta In-formatica, </journal> <volume> Vol. 7, </volume> <pages> pp. </pages> <month> 395-398 </month> <year> (1977). </year> <month> 10 </month>
Reference-contexts: Then the greatest common divisor of f and g can be computed using O (nL (n)(log n)) operations in F . 4 (1) is proved in Cantor and Kaltofen [8]. We note that the results of Schonhage <ref> [17] </ref> would actually be sufficient for our purposes. (2) follows from (1) by a divide and conquer method (see Borodin and Munro [6, p. 100]). (3) follows from (1) by a Newton iteration scheme (see Borodin and Munro [6, p. 95]). (4) follows from (3) by a divide and conquer method
References-found: 17

