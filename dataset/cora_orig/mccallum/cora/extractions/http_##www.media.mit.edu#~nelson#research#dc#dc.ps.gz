URL: http://www.media.mit.edu/~nelson/research/dc/dc.ps.gz
Refering-URL: http://www.media.mit.edu/~nelson/research/dc/
Root-URL: http://www.media.mit.edu
Email: &lt;nelson@media.mit.edu&gt;  
Title: COMPUTATIONAL MEDIA FOR MOBILE AGENTS FOR MAS737: SOFTWARE AGENTS SEMINAR  
Author: Nelson Minar 
Date: December 31, 1996  
Web: http://nelson.www.media.mit.edu/people/nelson/  
Abstract: Exploration of issues of using mobile agents to access computational resources distributed on the Internet. The design of mobile agent systems in which no central controller orchestrates computations is considered with an emphasis on practical deployment and safety. Java and aglets are examined as potential technologies for enabling mobile agent environments; Java's capabilities are analyzed and briefly compared with other mobile agent systems.
Abstract-found: 1
Intro-found: 1
Reference: [Act96] <institution> ActiveX home page. </institution> <note> http://www.microsoft.com/intdev/, December 1996. </note>
Reference-contexts: In general, Inferno is too new to know what impact it will have on mobile agents. 4.3 ActiveX Microsoft's ActiveX could also be useful technology for building mobile agents <ref> [Act96] </ref>. ActiveX is essentially a version of the OLE distributed object system with some enhancements to allow controls (ActiveX objects) loaded over the Internet. The major limitation of ActiveX is that it contains absolutely no physical security provisions: ActiveX controls are pure object code with no restrictions.
Reference: [AG96] <author> Ken Arnold and James Gosling. </author> <title> The Java Programming Language. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year> <note> ISBN: 0201634554. </note>
Reference-contexts: Selecting the technology is not a small task: it needs to fulfill all the characteristics discussed above and it needs to be real, deployable. No system perfectly meets all the requirements, but the Java system from Sun Microsystems <ref> [AG96] </ref> is the best available system today. Java is a combination language and operating system that has working implementations and a large degree of market acceptance.
Reference: [AGLL94] <author> Derek Atkins, Michael Graff, Arjen Lenstra, and Paul Leyland. </author> <title> The magic words are squeamish ossifrage. </title> <note> In AsiaCrypt '94, </note> <year> 1994. </year>
Reference-contexts: CPU time from around the net has successfully been used to perform large computations, particularly in the specific domain of number theory and cryptosystems. The factoring of RSA-129 was carried out almost entirely by volunteers on the Internet who processed parts of the work and emailed back results <ref> [AGLL94] </ref>. RSA-130 was also factored in part by contributions that came in via Web submissions [RSA96].
Reference: [CL95] <author> Daniel Chang and Danny Lange. </author> <title> Mobile agents: A new paradigm for distributed object computing on the WWW. http://www.trl.ibm.co.jp/aglets/ma.html, December 1995. </title> <note> Submitted to OOPSLA '96. </note>
Reference-contexts: But there are many different reasons mobile software agents can be useful, enough that the approach has merit [HCK95]. Mobile agents provide a fresh, compelling way to organize the use of distributed resources on the Internet <ref> [CL95] </ref>. Software agents are a sort of super-object-oriented paradigm. Traditional object-oriented programming collect data and code in one (typically small) object. Software agents wrap up a large amount of data and code into one package; in this sense, a software agent is like a large object.
Reference: [Cle96] <author> Scott H. Clearwater. </author> <title> Market-Based Control, A Paradigm for Distributed Resource Allocation. </title> <publisher> World Scientific Publishing Co., </publisher> <year> 1996. </year> <note> ISBN: 9810222548. </note>
Reference-contexts: Without a central coordinator how can a computer network be made to function effectively? There is a growing literature that suggests that economic incentive can be useful in controlling and optimizing complex distributed systems [DM88] <ref> [Cle96] </ref>. In the particular realm of efficient allocation of CPU time, the Enterprise [MFGH88] and Challenger [CMM97] systems make compelling cases for using a market based approach to distribute batch-level computations.
Reference: [CMM97] <author> Anthony Chavez, Alexandros Moukas, and Pattie Maes. Challenger: </author> <title> A multi-agent system for distributed resource allocation. </title> <booktitle> In Proceedings of the International Conference on Autonomous Agents. ACM, </booktitle> <year> 1997. </year> <note> Also available from http://moux.www.media.mit.edu/people/moux/papers/challenger.ps. </note>
Reference-contexts: In the particular realm of efficient allocation of CPU time, the Enterprise [MFGH88] and Challenger <ref> [CMM97] </ref> systems make compelling cases for using a market based approach to distribute batch-level computations. Agoric computation [MD88] suggests a more radical vision of distributed computation, one in which individual parts of one task can be distributed across multiple machines with the exchange of money controlling and optimizing the computation.
Reference: [DM88] <author> K. Eric Drexler and Mark S. Miller. </author> <title> Incentive engineering for computational resource management. </title> <editor> In B. A. Huberman, editor, </editor> <booktitle> The Ecology of Computation, </booktitle> <pages> pages 231266. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1988. </year> <note> Also available from http://www.webcom.com/agorics/agorpapers.html. </note>
Reference-contexts: Without a central coordinator how can a computer network be made to function effectively? There is a growing literature that suggests that economic incentive can be useful in controlling and optimizing complex distributed systems <ref> [DM88] </ref> [Cle96]. In the particular realm of efficient allocation of CPU time, the Enterprise [MFGH88] and Challenger [CMM97] systems make compelling cases for using a market based approach to distribute batch-level computations.
Reference: [E96] <author> E: </author> <title> Extensions to Java. </title> <note> http://www.communities.com/e/index.html, September 1996. </note>
Reference-contexts: With the addition of class signatures it will be possible to selectively give access to certain resources depending on how much the server trusts the particular agent it is executing. A third party implementation is already available in E, a Java extension <ref> [E96] </ref>. Java 1.1 includes access control lists [Jav96c] that could form the basis of a system to define specific security policy for agents depending on trust level. 3.1.5 Agent Security Java does not address the issue of security guarantees for agent code running on a Java virtual machine.
Reference: [Fla96] <author> David Flanagan. </author> <title> Java in a Nutshell. </title> <publisher> O'Reilly & Associates, </publisher> <year> 1996. </year> <note> ISBN: 156592 1836. </note>
Reference: [FM96] <author> J. Steven Fritzinger and Marianne Mueller. </author> <title> Java security. </title> <type> Technical report, </type> <institution> Sun Mi-crosystems, Inc., </institution> <year> 1996. </year> <note> http://java.sun.com/security/whitepaper.ps. </note>
Reference-contexts: Remote method invocation [Jav96a] allows object methods to be called over the network. These packages are already available in the Java 1.1 beta release. 3.1.4 Server Security Java 1.0 takes an entirely physical-security approach to protecting machines from hostile programs <ref> [FM96] </ref>. A special object, a security manager, defines which resources a Java program is allowed 6 to access.
Reference: [HCK95] <author> Colin G. Harrison, David M. Chess, and Aaron Kershenbaum. </author> <title> Mobile agents: Are they a good idea? Technical report, </title> <institution> IBM T.J. Watson, </institution> <year> 1995. </year> <note> http://www.research.ibm.com/massive/mobag.ps. </note>
Reference-contexts: Mobility for software agents is more controversial, in large part because of the complexity and security risks mobility implies. But there are many different reasons mobile software agents can be useful, enough that the approach has merit <ref> [HCK95] </ref>. Mobile agents provide a fresh, compelling way to organize the use of distributed resources on the Internet [CL95]. Software agents are a sort of super-object-oriented paradigm. Traditional object-oriented programming collect data and code in one (typically small) object.
Reference: [Inf96] <institution> Inferno: la Commedia Interattiva. </institution> <note> http://inferno.lucent.com/inferno/infernosum.html, December 1996. </note>
Reference-contexts: Even if Telescript is as good as their papers indicate, it will not matter if no one ever uses it. 8 4.2 Inferno Lucent Technologies has recently entered the distributed computation arena with Inferno, a network operating system based on Plan 9 <ref> [Inf96] </ref>. Beta versions of Inferno are now shipping for several operating systems under a restricted test license. Limbo, the language developed for Inferno, resembles a version of C augmented with abstract data types. Limbo itself seems unnecessarily limited in not supporting inheritance.
Reference: [Jav96a] <institution> RMI Remote Method Invocation. </institution> <note> http://java.sun.com/products/JDK/1.1/docs/guide/rmi/, December 1996. </note>
Reference-contexts: Ad hoc solutions are currently possible, but Java 1.1 adds two new standard facilities to make distributed objects easy. Object serialization [Jav96b] allows objects to be sent via byte streams for network transmission. Remote method invocation <ref> [Jav96a] </ref> allows object methods to be called over the network. These packages are already available in the Java 1.1 beta release. 3.1.4 Server Security Java 1.0 takes an entirely physical-security approach to protecting machines from hostile programs [FM96].
Reference: [Jav96b] <institution> Object serialization. </institution> <note> http://java.sun.com/products/JDK/1.1/docs/guide/serialization/, December 1996. 11 </note>
Reference-contexts: Ad hoc solutions are currently possible, but Java 1.1 adds two new standard facilities to make distributed objects easy. Object serialization <ref> [Jav96b] </ref> allows objects to be sent via byte streams for network transmission. Remote method invocation [Jav96a] allows object methods to be called over the network.
Reference: [Jav96c] <institution> Security in JDK 1.1. </institution> <note> http://java.sun.com/products/JDK/1.1/docs/guide/security/, December 1996. </note>
Reference-contexts: With the addition of class signatures it will be possible to selectively give access to certain resources depending on how much the server trusts the particular agent it is executing. A third party implementation is already available in E, a Java extension [E96]. Java 1.1 includes access control lists <ref> [Jav96c] </ref> that could form the basis of a system to define specific security policy for agents depending on trust level. 3.1.5 Agent Security Java does not address the issue of security guarantees for agent code running on a Java virtual machine.
Reference: [Jee96] <institution> Jeeves home page. </institution> <note> http://www.javasoft.com/products/java-server/, December 1996. </note>
Reference-contexts: One limited application is found in servlets, Java code that runs on Web servers (analogous to applets running on a browser). JavaSoft's Jeeves <ref> [Jee96] </ref> is the most active servlet platform under development now. Jeeves is an HTTP server written in Java; it can be extended by loading in new Java classes from either the local disk or the network.
Reference: [Jol96] <institution> Java open language toolkit. </institution> <note> http://www.redhat.com/linux-info/jolt/, December 1996. </note>
Reference-contexts: More importantly, Sun has been mostly open about the Java technology, publishing specifications and APIs and giving away development tools. The Java design is unhampered by restrictions on distribution; free Java implementations are even underway <ref> [Jol96] </ref>. The actual use of Java so far has largely been in the very limited environment of applets for Web browsers. Applet environments are unsuitable for distributed computation; most browsers do not stay running very long and the applet security model does not allow enough resource access.
Reference: [LC96] <author> Danny B. Lange and Daniel T. Chang. </author> <title> IBM Aglets workbench: Programming mobile agents in Java. </title> <note> http://www.trl.ibm.co.jp/aglets/whitepaper.htm, September 1996. </note>
Reference-contexts: These systems are of interest in their different design approaches but probably will not be contenders for serious world-wide deployment. Finally, a promising mobile agents project called aglets is under development at IBM <ref> [LC96] </ref>. Aglets relies on two basic specifications: an API for aglets (J-AAPI) and the Agent Transport Protocol (ATP). IBM has explicitly stated their intention to make aglets ubiquitous. ATP and J-AAPI have been put forward as standards.
Reference: [LM96] <author> Weiyi Li and David G. Messerschmitt. Java-To-Go. </author> <note> http://ptolemy.eecs.berkeley.edu/dgm/javatools/java-to-go/, December 1996. </note>
Reference-contexts: Servlets are not commonly expected to travel multiple times. Several preliminary efforts are under way to create full mobile agents in Java. Implemented packages include Mole from the University of Stuttgart [Mol96] and Java2Go from Berkeley <ref> [LM96] </ref>. The SAIC also has published an API for mobile agents [SAI96]. All of these systems are based on Java 1.0: they use some sort of ad hoc implementation of object serialization and remote method invocation to create mobile agents.
Reference: [MD88] <author> Mark S. Miller and K. Eric Drexler. </author> <title> Markets and computation: Agoric open systems. </title> <editor> In B. A. Huberman, editor, </editor> <booktitle> The Ecology of Computation, </booktitle> <pages> pages 133176. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1988. </year> <note> Also available from http://www.webcom.com/agorics/agorpapers.html. </note>
Reference-contexts: In the particular realm of efficient allocation of CPU time, the Enterprise [MFGH88] and Challenger [CMM97] systems make compelling cases for using a market based approach to distribute batch-level computations. Agoric computation <ref> [MD88] </ref> suggests a more radical vision of distributed computation, one in which individual parts of one task can be distributed across multiple machines with the exchange of money controlling and optimizing the computation.
Reference: [Mer96] <institution> The great Internet Mersenne prime search. </institution> <note> http://ourworld.compuserve.com/homepages/justforfun/prime.htm, December 1996. </note>
Reference-contexts: RSA-130 was also factored in part by contributions that came in via Web submissions [RSA96]. The largest currently known prime number was found via a Web-based Mersenne prime checker <ref> [Mer96] </ref>, and an effort is underway to use CPU time from all over the Internet to finally demonstrate the insecurity of the small key size of the DES cryptosystem [Tre96].
Reference: [MFGH88] <author> Thomas W. Malone, Richard E. Fikes, Kenneth R. Grant, and Michael T. Howard. </author> <title> Enterprise: A market-like task scheduler for distributed computing environments. </title> <editor> In B. A. Huberman, editor, </editor> <booktitle> The Ecology of Computation, </booktitle> <pages> pages 177206. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1988. </year>
Reference-contexts: Without a central coordinator how can a computer network be made to function effectively? There is a growing literature that suggests that economic incentive can be useful in controlling and optimizing complex distributed systems [DM88] [Cle96]. In the particular realm of efficient allocation of CPU time, the Enterprise <ref> [MFGH88] </ref> and Challenger [CMM97] systems make compelling cases for using a market based approach to distribute batch-level computations.
Reference: [Mol96] <institution> Project Mole mobile agents. </institution> <address> http://www.informatik.uni-stuttgart.de/ipvr/vs/projekte/mole.html, March 1996. </address>
Reference-contexts: Servlets are not commonly expected to travel multiple times. Several preliminary efforts are under way to create full mobile agents in Java. Implemented packages include Mole from the University of Stuttgart <ref> [Mol96] </ref> and Java2Go from Berkeley [LM96]. The SAIC also has published an API for mobile agents [SAI96]. All of these systems are based on Java 1.0: they use some sort of ad hoc implementation of object serialization and remote method invocation to create mobile agents.
Reference: [RSA96] <institution> RSA factoring by Web. </institution> <note> http://www.npac.syr.edu/factoring/, December 1996. </note>
Reference-contexts: The factoring of RSA-129 was carried out almost entirely by volunteers on the Internet who processed parts of the work and emailed back results [AGLL94]. RSA-130 was also factored in part by contributions that came in via Web submissions <ref> [RSA96] </ref>. The largest currently known prime number was found via a Web-based Mersenne prime checker [Mer96], and an effort is underway to use CPU time from all over the Internet to finally demonstrate the insecurity of the small key size of the DES cryptosystem [Tre96].
Reference: [SAI96] <institution> Autonomous agent programming using Java. </institution> <note> http://riz.saic.com/AIT/agentref.html, December 1996. </note>
Reference-contexts: Servlets are not commonly expected to travel multiple times. Several preliminary efforts are under way to create full mobile agents in Java. Implemented packages include Mole from the University of Stuttgart [Mol96] and Java2Go from Berkeley [LM96]. The SAIC also has published an API for mobile agents <ref> [SAI96] </ref>. All of these systems are based on Java 1.0: they use some sort of ad hoc implementation of object serialization and remote method invocation to create mobile agents. These systems are of interest in their different design approaches but probably will not be contenders for serious world-wide deployment.
Reference: [SLE96] <author> Erik Selber, Greg Lauckhart, and Oren Etzioni. Metacrawler. </author> <note> http://metacrawler.cs.washington.edu:8080/, December 1996. </note>
Reference-contexts: Web search engines provide other examples of distributed resource usage on the Internet. Anyone can make use of AltaVista's service by sending their server a query; a search uses Al-taVista's CPU time, memory, and specialized database. Second-level search engines such as the Metacrawler <ref> [SLE96] </ref> are closer to a mobile agent paradigm. When Metacrawler receives a search query it takes that request, sends it off to other servers, collects the replies and returns them.
Reference: [Tel96] <author> Telescript technology: </author> <title> The foundation for the electronic marketplace. </title> <note> http://www.genmagic.com/Telescript/Whitepapers/wp1/whitepaper-1.html, 1996. </note>
Reference-contexts: As the software becomes more mature aglets looks to be the most likely platform for future mobile agent research. 4 Other Technologies for Mobile Agents 4.1 Telescript Java is not unique in supporting mobile agents. General Magic's Telescript <ref> [Tel96] </ref> as one of the first mobile agent platforms. Many of the more complicated issues of mobile agents have been carefully considered in the design of Telescript. The Telescript language handles portability and network communication. Server security is implemented both physically (restricted execution environments) and socially (signed code).
Reference: [Tre96] <author> Peter Trei. </author> <note> Communications on coderpunks@toad.com, news://nntp.hks.net/hks.lists.coderpunks, </note> <month> December </month> <year> 1996. </year>
Reference-contexts: The largest currently known prime number was found via a Web-based Mersenne prime checker [Mer96], and an effort is underway to use CPU time from all over the Internet to finally demonstrate the insecurity of the small key size of the DES cryptosystem <ref> [Tre96] </ref>. All of these computations are simple in that the tasks are easily distributable and only data needs to be transmitted during the computation, not code. Furthermore, deployment is relatively easy as the software is special-purpose and installed by volunteers personally motivated to see the computation succeed. <p> Worse, servers might have an incentive to subvert the computation of a visiting agent. In the Internet-based DES cracking effort currently under design a major concern is protecting the computation from sites that pretend to do pieces of the problem but return false answers <ref> [Tre96] </ref>. Physical security answers to this problem are difficult. Secure, trusted hardware on the server could guarantee agent safety but is unlikely to be widely deployed.
Reference: [Way95] <author> Peter Wayner. </author> <title> Agents Unleashed, A Public Domain Look at Agent Technology. </title> <publisher> Academic Press, </publisher> <year> 1995. </year> <note> ISBN: 012738765X. 12 </note>
References-found: 29

