URL: http://www.cse.ucsc.edu/~panzer/th/techreport.ps
Refering-URL: http://www.cse.ucsc.edu/~panzer/th/index.html
Root-URL: http://www.cse.ucsc.edu
Title: An Experimental Comparison of New Property List Designs  
Author: John Panzer and Linda Werner 
Keyword: Property sheet, property list, split list, categories, grouping  
Note: panzer@cse.ucsc.edu and  
Address: Santa Cruz CA 95060 USA  
Affiliation: Dept. of Computer and Information Sciences University of California Santa Cruz  
Pubnum: UCSC-CRL-95-43  
Email: linda@cse.ucsc.edu  
Date: December, 1995  
Abstract: Property lists are a common way to display and edit object attributes. They are often organized alphabetically, which can lead to usability problems when the number of properties grows large. Two alternative property list designs, categorical lists and split lists, are presented. An experimental comparison found that categorical lists can reduce selection times by 62% for novice users, while split lists show potential for a 43% reduction. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <editor> Delphi Users Guide. </editor> <booktitle> Borland International, </booktitle> <year> 1995. </year>
Reference: 2. <institution> Microsoft Visual Basic Programmer s Reference. Microsoft Press, </institution> <year> 1993. </year>
Reference: 3. <author> Paap, K., and Roske-Hofstrand, R. </author> <title> The optimal number of menu options per panel. </title> <booktitle> Human Factors 28, 4 (1986), </booktitle> <pages> 377-85. </pages>
Reference-contexts: A standard way to organize items on menus is to group conceptually related items together. The same can be done for property lists. A sorting experiment with existing Visual Tcl users revealed a common set of natural categories <ref> [3] </ref> for the properties. These were used to create a categorical list (Figure 2) in which properties are grouped according to meaning and function. The list is implemented as an expandable two level hierarchical outline. The first level contains category names, while the second level contains individual properties.
Reference: 4. <author> Panzer, J. </author> <title> Property Lists: An Experimental Comparison of New Property Editor Designs. A M.S. </title> <type> thesis, </type> <institution> University of California at Santa Cruz. </institution> <note> Available at &lt;http://www.cse.ucsc.edu/~panzer/th/&gt;. </note>
Reference-contexts: ALTERNATIVE LIST DESIGNS Prior to Vibe, SCO used a script based programming environment for creating Visual Tcl applications. Because of this, it was possible to look at existing usage patterns for Visual Tcl object properties. Both of the new property list designs were based on this information <ref> [4] </ref>. A standard way to organize items on menus is to group conceptually related items together. The same can be done for property lists. A sorting experiment with existing Visual Tcl users revealed a common set of natural categories [3] for the properties.
Reference: 5. <author> Pausch, R., Young II, N., and DeLine, R. Suit: </author> <title> The pascal of user interface toolkits. </title> <booktitle> In UIST 91 (1991), </booktitle> <pages> 117-125. </pages>
Reference: 6. <author> Sears, A. and Shneiderman, B. </author> <title> Split menus: Effectively using selection frequency to organize menus. </title> <journal> ACM Transactions on Computer-Human Interaction (March 1994), </journal> <pages> 27-51. </pages>
Reference-contexts: parts of the category tree they are currently working with, or to rapidly search the properties by expanding and collapsing categories. (Other property lists [1,2] categorize properties by providing separate lists which the user may view one at a time through a set of tabs similar to a notebook.) Sears <ref> [6] </ref> suggests split menus as a way to cache frequently accessed menu items near the top of a long menu. A search through existing script source code found that a small subset of the properties accounted for roughly 50% of property usage.
Reference: 7. <author> Young, D. </author> <title> SCO Visual Tcl: A new tool to crack the Motif barrier! Draft for SCO World Magazine, </title> <month> November </month> <year> 1994. </year>
Reference-contexts: This would be difficult to do with other kinds of property editors such as specialized dialogs. Applications often organize property lists alphabetically by property name (Figure 1). This was initially the case with Vibe, an interface builder tool for The Santa Cruz Operation (SCO) Visual Tcl scripting language <ref> [7] </ref>. Preliminary usability testing of Vibe revealed several problems with its alphabetical property list. For example, users often wanted to edit Width and Height properties as part of the same task, but the alphabetical list kept these related properties far apart.
References-found: 7

