URL: http://www.cs.caltech.edu/~eric/papers/tsp.ps
Refering-URL: http://www.cs.caltech.edu/~eric/papers/papers.html
Root-URL: http://www.cs.caltech.edu
Title: A Finite-Difference Algorithm for the Traveling Salesman Problem  
Author: Eric Bax and Joel Franklin 
Keyword: Key words algorithms, combinatorial optimization, traveling salesman prob lem, NP-hard  
Address: ifornia, 91125  217-50, Pasadena, California, 91125  
Affiliation: Computer Science Department, California Institute of Technology 256-80, Pasadena, Cal  Department of Applied Mathematics, California Institute of Technology  
Note: AMS subject classifications 05,68  
Email: (eric@cs.caltech.edu).  (jnf@ama.caltech.edu)  
Date: December 11, 1997  
Abstract: We develop an algorithm for the traveling salesman problem by applying finite differences to a generating function. This algorithm requires polynomial space. In comparison, a dynamic programming algorithm requires exponential space. Also, the finite-difference algorithm requires less space than a similar inclusion and exclusion algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Bax, </author> <title> Finite-difference algorithms for counting problems, CalTech-CS-TR-97-23. </title> <type> (PhD Thesis) </type>
Reference-contexts: Bellman [4] developed a dynamic programming algorithm for the problem. The algorithm requires exponential space. Also, there are many cross-references among terms, so we do not know how to achieve good speedup by implementing the algorithm on a message-passing parallel computer <ref> [1] </ref>. In contrast, the finite-difference algorithm requires only polynomial space, and there are no cross-references among its terms. However, the finite-difference algorithm requires integer edge distances, while the dynamic programming algorithm does not. The finite-difference algorithm is similar to an inclusion and exclusion algorithm by Karp [6]. <p> Hence, D 1 D n P () counts multilinear terms in P (). Finite differences can also count non-multilinear terms. Define the kth finite difference operator with respect to x j as follows. D j P () = k! (u j v j ) k m=0 k In <ref> [1] </ref>, it is shown that for c constant with respect to x j , D j cx j = 0 if p &lt; k (6) It is also shown that if P () is a polynomial in x 1 ; : : : ; x n with every term of degree <p> One opportunity for future research is to find settings for these parameters that allow reductions in computation. The proper choice of finite-difference parameters allows computational reductions for a similar problem the 0-1 matrix permanent [3]. There is a framework for the development of reductions in <ref> [1] </ref>, Ch. 4. Finite-difference formulas for multilinear terms have been used in algorithms for several problems, including counting paths and cycles by length [2], sequencing, bin packing, and deadlock avoidance [1]. <p> There is a framework for the development of reductions in <ref> [1] </ref>, Ch. 4. Finite-difference formulas for multilinear terms have been used in algorithms for several problems, including counting paths and cycles by length [2], sequencing, bin packing, and deadlock avoidance [1]. In some of these algorithms, finite-difference formulas for non-multilinear terms have been used to reduce computation for problem instances with symmetry. The algorithm developed in this paper is the first use of a finite-difference formula with an indicator variable to measure the quantity being optimized.
Reference: [2] <author> E. Bax and J. Franklin, </author> <title> A finite-difference sieve to count paths and cycles by length, </title> <journal> Inform. Process. Lett., </journal> <month> 60 </month> <year> (1996) </year> <month> 171-176. </month>
Reference-contexts: There is a framework for the development of reductions in [1], Ch. 4. Finite-difference formulas for multilinear terms have been used in algorithms for several problems, including counting paths and cycles by length <ref> [2] </ref>, sequencing, bin packing, and deadlock avoidance [1]. In some of these algorithms, finite-difference formulas for non-multilinear terms have been used to reduce computation for problem instances with symmetry.
Reference: [3] <author> E. Bax and J. Franklin, </author> <title> A permanent formula with many zero-valued terms, </title> <journal> Inform. Process. Lett., </journal> <month> 63 </month> <year> (1997) </year> <month> 33-39. </month>
Reference-contexts: One opportunity for future research is to find settings for these parameters that allow reductions in computation. The proper choice of finite-difference parameters allows computational reductions for a similar problem the 0-1 matrix permanent <ref> [3] </ref>. There is a framework for the development of reductions in [1], Ch. 4. Finite-difference formulas for multilinear terms have been used in algorithms for several problems, including counting paths and cycles by length [2], sequencing, bin packing, and deadlock avoidance [1].
Reference: [4] <author> R. Bellman, </author> <title> Dynamic programming treatment of the traveling salesman problem, </title> <journal> J. Assoc. Comput. Mach., </journal> <month> 9 </month> <year> (1962) </year> <month> 61-63. </month>
Reference-contexts: The length of a tour is the sum of distances over edges in the tour. The solution is the minimum tour length. The TSP is NP-hard [5]. There are many variations of the problem, and several restricted versions are also NP-hard [5]. Bellman <ref> [4] </ref> developed a dynamic programming algorithm for the problem. The algorithm requires exponential space. Also, there are many cross-references among terms, so we do not know how to achieve good speedup by implementing the algorithm on a message-passing parallel computer [1].
Reference: [5] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability A Guide to the Theory of NP-Completeness, </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: Each directed edge has a nonnegative distance d ij . A tour is an s-t Hamiltonian path. The length of a tour is the sum of distances over edges in the tour. The solution is the minimum tour length. The TSP is NP-hard <ref> [5] </ref>. There are many variations of the problem, and several restricted versions are also NP-hard [5]. Bellman [4] developed a dynamic programming algorithm for the problem. The algorithm requires exponential space. <p> A tour is an s-t Hamiltonian path. The length of a tour is the sum of distances over edges in the tour. The solution is the minimum tour length. The TSP is NP-hard <ref> [5] </ref>. There are many variations of the problem, and several restricted versions are also NP-hard [5]. Bellman [4] developed a dynamic programming algorithm for the problem. The algorithm requires exponential space. Also, there are many cross-references among terms, so we do not know how to achieve good speedup by implementing the algorithm on a message-passing parallel computer [1].
Reference: [6] <author> R. M. Karp, </author> <title> Dynamic programming meets the principle of inclusion and exclusion, </title> <journal> Oper. Res. Lett., </journal> <note> 1 (2) (1982) 49-51. </note>
Reference-contexts: In contrast, the finite-difference algorithm requires only polynomial space, and there are no cross-references among its terms. However, the finite-difference algorithm requires integer edge distances, while the dynamic programming algorithm does not. The finite-difference algorithm is similar to an inclusion and exclusion algorithm by Karp <ref> [6] </ref>. Both algorithms sieve tours from a larger set of walks. In addition, the finite-difference algorithm sieves tours by length. This reduces the space requirement by eliminating the need for vectors associated with the interior cities that are used to count walks by length in the inclusion and exclusion algorithm. <p> Each evaluation requires O (n 3 ) operations. (This can be reduced to O (nE), where E is the number of edges, by using a dynamic programming procedure similar to the one in <ref> [6] </ref>.) We need to find the minimum L 2 f0; : : : ; (n + 1)M g such that the corresponding formula is positive. Note that the values of P (x) are the same in all formulas.
References-found: 6

