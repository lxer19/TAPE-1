URL: http://www.cs.utexas.edu/users/dahlin/Classes/WebOS/Fall-1996/usenix97.ps
Refering-URL: http://www.cs.utexas.edu/users/dahlin/Classes/WebOS/Fall-1996/reading.html
Root-URL: 
Title: Using Smart Clients to Build Scalable Services  
Author: Chad Yoshikawa, Brent Chun, Paul Eastham, Amin Vahdat, Thomas Anderson, and David Culler 
Address: Berkeley, CA 94720  
Affiliation: Computer Science Division University of California  
Abstract: Individual machines are no longer sufficient to handle the offered load to many Internet sites. To use multiple machines for scalable performance, load balancing, fault tolerance, and backward compatibility with URL naming must be addressed. A number of server-side approaches have been developed to provide transparent access to multi-server Internet services including HTTP redirect, DNS aliasing, Magic Routers, and Active Networks. In this paper, we will argue that in many instances, a client-side approach to providing transparent access to Internet services provides increased flexibility and performance. We describe the design and implementation of Smart Clients and show how our system can be used to provide transparent access to scalable and/or highly available network services. The services built include: telnet, FTP, and an Internet chat application. 
Abstract-found: 1
Intro-found: 1
Reference: [Anderson et al. 1995a] <author> T. E. Anderson, D. E. Culler, D. A. Patterson, </author> <title> and the NOW Team. A Case for NOW (Networks of Workstations). </title> <booktitle> IEEE Micro, </booktitle> <month> February </month> <year> 1995. </year>
Reference: [Anderson et al. 1995b] <author> T. E. Anderson, M. D. Dahlin, J. M. Neefe, D. A. Patterson, D. S. Roselli, and R. Y. Wang. </author> <title> Serverless Network File Systems. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 109-126, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: File systems have used server-side replication of volumes and servers to provide fault tolerance in systems such as Deceit [Marzullo et al. 1990], AFS [Howard et al. 1988], and HA-NFS [Bhide et al. 1991]. More recently, systems such as xFS <ref> [Anderson et al. 1995b] </ref> and Petal [Lee & Thekkath 1996] use client-side techniques to improve overall file system performance.
Reference: [Anderson et al. 1996] <author> E. Anderson, D. Patterson, and E. Brewer. </author> <title> The Magicrouter, an Application of Fast Packet Interposing. </title> <month> May </month> <year> 1996. </year> <note> Submitted For Publication. Also see http://HTTP.CS.Berkeley.EDU/eanders /magicrouter/. </note>
Reference: [Berners-Lee 1995] <author> T. Berners-Lee. </author> <title> Hypertext Transfer Protocol HTTP/1.0, October 1995. HTTP Working Group Internet Draft. </title>
Reference-contexts: We present our conclusions in section 7. 2 Alternative Solutions In this section, we will describe approaches for adding transparent fault tolerance and load balancing to Web services. Popular approaches currently include DNS Aliasing [Brisco 1995, Katz et al. 1994], HTTP redirect <ref> [Berners-Lee 1995] </ref>, Magic Routers [Ander-son et al. 1996], fail-safe TCP [Goldstein & Dale 1995], and Active Networks [Wetherall & Tennen-house 1995]. Figure 1 describes how Smart Clients fits in the space of existing solutions.
Reference: [Bhide et al. 1991] <author> A. Bhide, E. N. Elnozahy, and S. P. Morgan. </author> <title> A Highly Available Network File Server. </title> <booktitle> In Proceedings of the 1991 USENIX Winter Conference, </booktitle> <pages> pp. 199-205, </pages> <year> 1991. </year>
Reference-contexts: File systems have used server-side replication of volumes and servers to provide fault tolerance in systems such as Deceit [Marzullo et al. 1990], AFS [Howard et al. 1988], and HA-NFS <ref> [Bhide et al. 1991] </ref>. More recently, systems such as xFS [Anderson et al. 1995b] and Petal [Lee & Thekkath 1996] use client-side techniques to improve overall file system performance.
Reference: [Birman 1993] <author> K. P. Birman. </author> <title> The Proecss Group Ap-praoch to Reliable Distributed Computing. </title> <journal> Communications of the ACM, </journal> <volume> 36(12) </volume> <pages> 36-53, </pages> <year> 1993. </year>
Reference-contexts: This caching model allows for out of order message delivery, but we deemed such semantics to shows delivered aggregate bandwidth as a function of number of clients making simultaneous requests. be acceptable for a chat application. If it is determined that such semantics are insufficient, well-known distributed techniques <ref> [Ladin et al. 1992, Birman 1993] </ref> can be used to provide strong ordering of updates. A preliminary prototype of the chat application is up and running. Initial measurements of the system indicate that the system is indeed scalable. <p> Once again, all these systems implement server-side solutions for load balancing and require client intervention to spread jobs among cluster machines. Perhaps most closely related to our systems are ISIS <ref> [Birman 1993] </ref> and so-called gossip architectures [Ladin et al. 1992] which provide a substrate for developing distributed applications. ISIS reliable group communication to support the type of applications we envision. Gossip architectures use front-ends analogous to Smart Clients to access replicated servers which kept consistent through lazy updates.
Reference: [Bricker et al. 1991] <author> A. Bricker, M. Litzkow, and M. Livny. </author> <title> Condor Technical Summary. </title> <type> Technical Report 1069, </type> <institution> University of Wisconsin Madison, Computer Science Department, </institution> <month> October </month> <year> 1991. </year>
Reference: [Brisco 1995] <author> T. Brisco. </author> <title> DNS Support for Load Balancing, </title> <month> April </month> <year> 1995. </year> <title> Network Working Group RFC 1794. </title>
Reference-contexts: We present our conclusions in section 7. 2 Alternative Solutions In this section, we will describe approaches for adding transparent fault tolerance and load balancing to Web services. Popular approaches currently include DNS Aliasing <ref> [Brisco 1995, Katz et al. 1994] </ref>, HTTP redirect [Berners-Lee 1995], Magic Routers [Ander-son et al. 1996], fail-safe TCP [Goldstein & Dale 1995], and Active Networks [Wetherall & Tennen-house 1995]. Figure 1 describes how Smart Clients fits in the space of existing solutions.
Reference: [Dig 1995] <institution> Digital Equipment Corporation. Alta Vista, </institution> <year> 1995. </year> <note> http://www.altavista.digital.com/. </note>
Reference-contexts: This model of wide area distribution is common for the a number of popular Web services such as Netscape's home page [Net 1994] or Alta Vista <ref> [Dig 1995] </ref>. * Scalable Services To Legacy Servers Smart Clients allows the creation of scalable services from legacy servers, such as the FTP. Scalable services can be created from existing server code without server code modification. <p> For the ser vice name space, the browser contacts one of many well-known search engines with a query. Currently, the browser contacts Altavista <ref> [Dig 1995] </ref> with a query requesting an HTML page whose title matches the service name, e.g. now chat service. Thus, Smart Clients leverages highly-available search engines to provide translation of well-known service name to a URL. The URL points to a page that we call the service certificate.
Reference: [Douglis & Ousterhout 1991] <author> F. Douglis and J. Ouster-hout. </author> <title> Transparent Process Migration: Design Alternatives and the Sprite Implementation. </title> <journal> Software Practice and Experience, </journal> <volume> 21(8) </volume> <pages> 757-85, </pages> <month> August </month> <year> 1991. </year>
Reference: [Ghormley et al. 1995] <author> D. Ghormley, A. Vahdat, and T. Anderson. GLUnix: </author> <title> A Global Layer UNIX for NOW. </title> <note> See http://now.cs.berkeley.edu /Glunix/glunix.html, </note> <year> 1995. </year>
Reference-contexts: The telnet web page contains Smart Clients applets, and can be viewed by Java-compliant browsers such as Netscape Navigator [Net 1994] or Hotjava [Sun 1995]. The router is instantiated as an active thread which periodically polls the NOW's operating system, GLUnix <ref> [Ghormley et al. 1995] </ref>, to retrieve the load averages of machines in the cluster through a simple Common Gateway Interface (CGI) program.
Reference: [Goldstein & Dale 1995] <author> I. Goldstein and P. Dale. </author> <title> A Sacalable, Fault Resilient Server for the WWW. OSF ARPA Project Proposal, </title> <year> 1995. </year>
Reference-contexts: Popular approaches currently include DNS Aliasing [Brisco 1995, Katz et al. 1994], HTTP redirect [Berners-Lee 1995], Magic Routers [Ander-son et al. 1996], fail-safe TCP <ref> [Goldstein & Dale 1995] </ref>, and Active Networks [Wetherall & Tennen-house 1995]. Figure 1 describes how Smart Clients fits in the space of existing solutions. We will describe each of the existing solutions in turn and then describe the advantages of Smart Clients.
Reference: [Gosling & McGilton 1995] <author> J. Gosling and H. McGilton. </author> <title> The Java(tm) Language Environment: A White Paper. </title> <address> http://java.dimensionx.com /whitePaper/java-whitepaper-1.html, </address> <year> 1995. </year>
Reference-contexts: We will demonstrate how the system can be specialized to provide transparently scalable, fault-tolerant access to a number of simple network services: telnet, ftp, and an Internet chat application 2 . By implementing the Smart Clients API in Java <ref> [Gosling & McGilton 1995] </ref>, we allow network services to provide applets (client software) to mediate access to the service. Thus, client code running on an end-user's host can be viewed as an extension of the server.
Reference: [Gray & Reuter 1993] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Mor-gan Kaufmann, </publisher> <year> 1993. </year>
Reference: [Howard et al. 1988] <author> J. Howard, M. Kazar, S. Menees, D. Nichols, M. Satyanarayanan, R. Sidebotham, and M. West. </author> <title> Scale and Performance in a Distributed File System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-82, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: File systems have used server-side replication of volumes and servers to provide fault tolerance in systems such as Deceit [Marzullo et al. 1990], AFS <ref> [Howard et al. 1988] </ref>, and HA-NFS [Bhide et al. 1991]. More recently, systems such as xFS [Anderson et al. 1995b] and Petal [Lee & Thekkath 1996] use client-side techniques to improve overall file system performance.
Reference: [Jav 1996] <author> JavaSoft. </author> <title> Java RMI Specification, Revision 1.1, </title> <note> 1996. See http://chatsubo.javasoft.com/- current/doc/rmi-spec/rmiTOC.doc.html. </note>
Reference: [Katz et al. 1994] <author> E. D. Katz, M. Butler, and R. </author> <note> McGrath. </note>
Reference-contexts: We present our conclusions in section 7. 2 Alternative Solutions In this section, we will describe approaches for adding transparent fault tolerance and load balancing to Web services. Popular approaches currently include DNS Aliasing <ref> [Brisco 1995, Katz et al. 1994] </ref>, HTTP redirect [Berners-Lee 1995], Magic Routers [Ander-son et al. 1996], fail-safe TCP [Goldstein & Dale 1995], and Active Networks [Wetherall & Tennen-house 1995]. Figure 1 describes how Smart Clients fits in the space of existing solutions.
References-found: 17

