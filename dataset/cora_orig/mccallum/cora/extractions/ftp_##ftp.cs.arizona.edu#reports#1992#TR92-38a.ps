URL: ftp://ftp.cs.arizona.edu/reports/1992/TR92-38a.ps
Refering-URL: http://www.cs.arizona.edu/research/reports.html
Root-URL: http://www.cs.arizona.edu
Title: Supporting Heterogeneity and Distribution in the Numerical Propulsion System Simulation Project  
Author: Patrick T. Homer Richard D. Schlichting TR -a 
Address: Tucson, Arizona 85721  
Affiliation: Department of Computer Science The University of Arizona  
Date: 31, 1992 revised: December 1, 1993  
Note: December  This work supported in part by the National Science Foundation under grant ASC-9204021. Homer is supported by the National Aeronautics and Space Administration under GSRP grant NGT-50966.  
Abstract: The Numerical Propulsion System Simulation (NPSS) project has been initiated by NASA to explore the use of computer simulation in the development of new aircraft propulsion technology. With this approach, each engine component is modeled by a separate computational code, with a simulation executive connecting the codes and modeling component interactions. Since each code potentially executes on a different machine in a network, a simulation run is a heterogeneous distributed program in which diverse software and hardware elements are incorporated into a single computation. In this paper, a prototype simulation executive that supports this type of programming is described. The two components of this executive are the AVS scientific visualization system and the Schooner heterogeneous remote procedure call (RPC) facility. In addition, the match between Schooner's capabilities and the needs of NPSS is evaluated based on our experience with a collection of test codes. The basic conclusion is that, while Schooner fared well in general, it exhibited certain deficiencies that dictated changes in its design and implementation. This discussion not only documents the evolution of Schooner, but also serves to highlight the practical problems that can be encountered when dealing with heterogeneity and distribution in such applications. 
Abstract-found: 1
Intro-found: 1
Reference: [Almes85] <author> Almes, G.T., Black, A.P., Lazowska, E.D., and Noe, J.D. </author> <title> The Eden system: A technical review. </title> <journal> IEEE Trans. on Softw. Eng. </journal> <volume> SE-11, </volume> <month> 1 (Jan. </month> <year> 1985), </year> <pages> 43-59. </pages>
Reference-contexts: Specifically, Schooner deals with connecting together coarse-grained computations and exploiting long-distance networks, whereas other efforts are focusing on detecting and exploiting fine-grain heterogeneity, and improving communication among closely-coupled processors. Schooner's use of an external data representation, a specification language, and stub compilers is similar to other RPC systems <ref> [Almes85, Birrell84, Sun90, Xerox81] </ref>. Several of these systems also emphasize heterogeneity, including Matchmaker [Jones85], Horus [Gibbons87], and HRPC (Heterogeneous RPC) [Bershad87]. Schooner differs from these systems mainly in its orientation toward designing applications in a distributed environment, rather than as a client-server operating system mechanism. 3.2.
Reference: [AVS92] <author> Advanced Visual Systems Inc. </author> <title> AVS Developer's Guide (Release 4.0), Part number: 320-0013-02, Rev B, Advanced Visual Systems Inc., </title> <address> Waltham, Mass., </address> <month> May </month> <year> 1992. </year> <month> -16 </month>
Reference-contexts: Work on the simulation executive is also underway. The focus in this effort is on providing sophisticated capabilities to interact with codes, as well as the ability to substitute different codes at varying degrees of fidelity. A scientific visualization system such as AVS <ref> [AVS92] </ref> or Khoros [Rasure91, Mercurio92] will likely form a major component of the finished product. The nature of the NPSS project makes it imperative that the simulation executive support heterogeneous distributed processing, in which diverse software and hardware elements on local-or wide-area networks are incorporated into a single simulation.
Reference: [Bershad87] <author> Bershad, B.N., Ching, D.T., Lazowska, E.D., Sanislo, J., and Schwartz, M. </author> <title> A remote procedure call facility for interconnecting heterogeneous computer systems. </title> <journal> IEEE Trans. on Softw. Eng. </journal> <volume> SE-13, </volume> <month> 8 (Aug. </month> <year> 1987), </year> <pages> 880-894. </pages>
Reference-contexts: Schooner's use of an external data representation, a specification language, and stub compilers is similar to other RPC systems [Almes85, Birrell84, Sun90, Xerox81]. Several of these systems also emphasize heterogeneity, including Matchmaker [Jones85], Horus [Gibbons87], and HRPC (Heterogeneous RPC) <ref> [Bershad87] </ref>. Schooner differs from these systems mainly in its orientation toward designing applications in a distributed environment, rather than as a client-server operating system mechanism. 3.2. The Prototype Executive A prototype NPSS executive has been constructed by combining the capabilities of the AVS scientific visualization system and Schooner.
Reference: [Birrell84] <author> Birrell, A. D. and Nelson, B. J. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Trans. on Computer Systems 2, </journal> <month> 1 (Feb. </month> <year> 1984), </year> <pages> 39-59. </pages>
Reference-contexts: Specifically, Schooner deals with connecting together coarse-grained computations and exploiting long-distance networks, whereas other efforts are focusing on detecting and exploiting fine-grain heterogeneity, and improving communication among closely-coupled processors. Schooner's use of an external data representation, a specification language, and stub compilers is similar to other RPC systems <ref> [Almes85, Birrell84, Sun90, Xerox81] </ref>. Several of these systems also emphasize heterogeneity, including Matchmaker [Jones85], Horus [Gibbons87], and HRPC (Heterogeneous RPC) [Bershad87]. Schooner differs from these systems mainly in its orientation toward designing applications in a distributed environment, rather than as a client-server operating system mechanism. 3.2.
Reference: [Black87] <author> Black, A., Hutchinson, N., Jul, E., Levy, H. and Carter, L. </author> <title> Distribution and abstract types in Emerald. </title> <journal> IEEE Trans. on Softw. Eng. </journal> <volume> SE-13, 1 (Jan. 87), </volume> <pages> 65-76. </pages>
Reference-contexts: Schooner currently supports C and Fortran, while the predecessor MLP system [Hayes87, Hayes89] also incorporated languages as diverse as Pascal, Icon [Griswold90], and Emerald <ref> [Black87] </ref>. The Schooner runtime system consists of a communication library and two types of system processes. The communication library is linked with every procedure to handle the sending and receiving of messages implicit in RPC. The system processes are the Schooner Manager and Schooner Servers, respectively.
Reference: [Butler92] <author> Butler, R. and Lusk, E. </author> <title> User's guide to the p4 parallel programming system, </title> <institution> Argonne National Laboratory, Argonne, IL, </institution> <month> August </month> <year> 1992. </year>
Reference-contexts: There is one such process per executing program. The Servers are used by Manager processes to start processes on remote machines. There is one Server per machine involved in a given computation. Systems such as PVM, p4 <ref> [Butler92] </ref>, and APPL [Quealy92] also support heterogeneous distributed processing. However, these systems are oriented primarily towards exploiting clusters of workstations and/or parallel machines to achieve affordable parallel speedup, and as such, support a general message passing paradigm.
Reference: [Chen93] <author> Chen, S., Eshaghian, M., Khokhar, A., and Shaaban, M. </author> <title> A selection theory and methodology for heterogeneous supercomputing. </title> <booktitle> Proc. Workshop on Heterogeneous Processing, </booktitle> <address> Newport Beach, CA (Apr. </address> <year> 1993), </year> <pages> 15-22. </pages>
Reference-contexts: Also, as compared with these other systems, the availability of UTS simplifies the task of generating the library calls needed to convert and transmit data between machines. Heterogeneity in scientific applications is also being addressed in several other research projects <ref> [Chen93, Freund93, Khokhar93, Wang92] </ref>. These projects seek to exploit inherent heterogeneity in the application by automatically partitioning the algorithm to run on a collection of heterogeneous processors.
Reference: [Claus92] <author> Claus, R.W., Evans, A.L., and Follen, G.J. </author> <title> Multidisciplinary propulsion simulation using NPSS. </title> <booktitle> 4th AIAA/USAF/NASA/OAI Symposium on Multi-disciplinary Analysis and Optimization, </booktitle> <address> Cleveland, Ohio, </address> <month> September 21-23, </month> <year> 1992. </year>
Reference-contexts: 1. Introduction The Numerical Propulsion System Simulation (NPSS) project, sponsored by NASA Lewis Research Center, aims to reduce the high cost of designing and implementing new propulsion technologies by using computer simulation <ref> [Claus92, Claus91] </ref>. Specifically, the project, which is part of the High Performance Computing and Communications (HPCC) initiative, involves developing both computational codes to model various engine components, and a simulation executive to control the simulation and model component interactions.
Reference: [Claus91] <author> Claus, R.W., Evans, A.L., Lylte, J.K., and Nichols, L.D. </author> <title> Numerical Propulsion System Simulation. </title> <booktitle> Computing Systems in Engineering 2, </booktitle> <month> 4 (Apr. </month> <year> 1991), </year> <pages> 357-364. </pages>
Reference-contexts: 1. Introduction The Numerical Propulsion System Simulation (NPSS) project, sponsored by NASA Lewis Research Center, aims to reduce the high cost of designing and implementing new propulsion technologies by using computer simulation <ref> [Claus92, Claus91] </ref>. Specifically, the project, which is part of the High Performance Computing and Communications (HPCC) initiative, involves developing both computational codes to model various engine components, and a simulation executive to control the simulation and model component interactions.
Reference: [Freund93] <author> Freund, R. F., and Siegel, H. J. </author> <title> Heterogeneous processing. </title> <booktitle> Computer 26, </booktitle> <month> 6 (June </month> <year> 1993), </year> <pages> 13-17. </pages>
Reference-contexts: Also, as compared with these other systems, the availability of UTS simplifies the task of generating the library calls needed to convert and transmit data between machines. Heterogeneity in scientific applications is also being addressed in several other research projects <ref> [Chen93, Freund93, Khokhar93, Wang92] </ref>. These projects seek to exploit inherent heterogeneity in the application by automatically partitioning the algorithm to run on a collection of heterogeneous processors.
Reference: [Gibbons87] <author> Gibbons, P.B. </author> <title> A stub generator for multi-language RPC in heterogeneous environments. </title> <journal> IEEE Trans. on Softw. Eng. </journal> <volume> SE-13, </volume> <month> 1 (Jan. </month> <year> 1987), </year> <pages> 77-87. </pages>
Reference-contexts: Schooner's use of an external data representation, a specification language, and stub compilers is similar to other RPC systems [Almes85, Birrell84, Sun90, Xerox81]. Several of these systems also emphasize heterogeneity, including Matchmaker [Jones85], Horus <ref> [Gibbons87] </ref>, and HRPC (Heterogeneous RPC) [Bershad87]. Schooner differs from these systems mainly in its orientation toward designing applications in a distributed environment, rather than as a client-server operating system mechanism. 3.2.
Reference: [Griswold90] <author> Griswold, R. and Griswold, M. </author> <title> The Icon Programming Language, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1990. </year>
Reference-contexts: Specifically, it handles the marshaling and unmarshaling of arguments through calls to the UTS library, and utilizes the Schooner library to locate and communicate with the remote procedures. Schooner currently supports C and Fortran, while the predecessor MLP system [Hayes87, Hayes89] also incorporated languages as diverse as Pascal, Icon <ref> [Griswold90] </ref>, and Emerald [Black87]. The Schooner runtime system consists of a communication library and two types of system processes. The communication library is linked with every procedure to handle the sending and receiving of messages implicit in RPC. The system processes are the Schooner Manager and Schooner Servers, respectively.
Reference: [Hayes87] <author> Hayes, R. and Schlichting, R.D. </author> <title> Facilitating mixed language programming in distributed systems. </title> <journal> IEEE Trans. on Softw. Eng. </journal> <volume> SE-13, </volume> <month> 12 (December </month> <year> 1987), </year> <pages> 1254-1264. </pages>
Reference-contexts: Specifically, it handles the marshaling and unmarshaling of arguments through calls to the UTS library, and utilizes the Schooner library to locate and communicate with the remote procedures. Schooner currently supports C and Fortran, while the predecessor MLP system <ref> [Hayes87, Hayes89] </ref> also incorporated languages as diverse as Pascal, Icon [Griswold90], and Emerald [Black87]. The Schooner runtime system consists of a communication library and two types of system processes. The communication library is linked with every procedure to handle the sending and receiving of messages implicit in RPC.
Reference: [Hayes88] <author> Hayes, R., Manweiler, S., and Schlichting, R.D. </author> <title> A simple system for constructing distributed, mixed-language programs. </title> <journal> SoftwarePractice and Experience 18, </journal> <month> 7 (July </month> <year> 1988), </year> <pages> 641-660. </pages>
Reference: [Hayes89] <author> Hayes, R. UTS: </author> <title> A Type System for Facilitating Data Communication, </title> <type> Ph.D. Dissertation, </type> <institution> Dept. of Computer Science, Univ. of Arizona, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: To carry out its task of connecting components and masking heterogeneity, Schooner provides three largely orthogonal services: the Universal Type System (UTS) <ref> [Hayes89] </ref>, which includes a type specification language and intermediate data format, a collection of stub compilers, and a runtime system. The UTS type specification language uses a Pascal-like syntax to describe the parameters that are expected for each procedure. <p> Specifically, it handles the marshaling and unmarshaling of arguments through calls to the UTS library, and utilizes the Schooner library to locate and communicate with the remote procedures. Schooner currently supports C and Fortran, while the predecessor MLP system <ref> [Hayes87, Hayes89] </ref> also incorporated languages as diverse as Pascal, Icon [Griswold90], and Emerald [Black87]. The Schooner runtime system consists of a communication library and two types of system processes. The communication library is linked with every procedure to handle the sending and receiving of messages implicit in RPC.
Reference: [Hayes90] <author> Hayes, R., Hutchinson, </author> <title> N.C., and Schlichting, R.D. Integrating Emerald into a system for mixed-language programming. </title> <booktitle> Computer Languages 15, 2 (1990), </booktitle> <pages> 95-108. </pages>
Reference: [Homer92a] <author> Homer, P.T., and Schlichting, R.D. </author> <title> Adapting AVS to support scientific applications as heterogeneous, distributed programs (extended abstract). </title> <booktitle> Proc. Workshop on Heterogeneous Processing, </booktitle> <address> Beverly Hills, CA (Mar. </address> <year> 1992), </year> <pages> 50-53. </pages>
Reference-contexts: This paper describes how heterogeneous distributed processing is supported in a prototype version of the NPSS simulation executive. The key to this capability is the Schooner interconnection system <ref> [Homer92a, Homer92b] </ref>, an application-level remote procedure call (RPC) facility that includes a simple specification language, an intermediate data representation, a collection of stub compilers, and a run-time system implementing cross-machine control transfer.
Reference: [Homer92b] <author> Homer, P.T., and Schlichting, R.D. </author> <title> A software platform for constructing scientific applications from heterogeneous resources. </title> <type> Tech. Report 92-30, </type> <institution> Dept. of Computer Science, Univ. of Arizona, </institution> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: This paper describes how heterogeneous distributed processing is supported in a prototype version of the NPSS simulation executive. The key to this capability is the Schooner interconnection system <ref> [Homer92a, Homer92b] </ref>, an application-level remote procedure call (RPC) facility that includes a simple specification language, an intermediate data representation, a collection of stub compilers, and a run-time system implementing cross-machine control transfer.
Reference: [Jones85] <author> Jones, </author> <title> M.B., Rashid, R.F., Thompson, M.R. Matchmaker: An interface specification language for distributed processing. </title> <booktitle> Proc. 12th Symp. on Prin. of Prog. </booktitle> <address> Lang, New Orleans, LA (Jan. </address> <year> 1985), </year> <pages> 225-235. </pages>
Reference-contexts: Schooner's use of an external data representation, a specification language, and stub compilers is similar to other RPC systems [Almes85, Birrell84, Sun90, Xerox81]. Several of these systems also emphasize heterogeneity, including Matchmaker <ref> [Jones85] </ref>, Horus [Gibbons87], and HRPC (Heterogeneous RPC) [Bershad87]. Schooner differs from these systems mainly in its orientation toward designing applications in a distributed environment, rather than as a client-server operating system mechanism. 3.2.
Reference: [Kernighan88] <author> Kernighan, B.W., and Ritchie, </author> <title> D.M. The C Programming Language, second edition, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1988. </year>
Reference-contexts: The second incremental change was expanding the UTS type system to include both single-and double-precision floating point types instead of just double-precision. The original decision to include only double-precision was in keeping with the Kernighan and Ritchie C specification <ref> [Kernighan88] </ref>, which requires that values of both float and double types passed as arguments be coerced to double for the call. With the addition of Fortran to Schooner and the development of the ANSI C specification, this practice is no longer adequate.
Reference: [Khokhar93] <author> Khokhar, A. A., Prasanna, V. K., Shaaban, M. E., and Wang, C. </author> <title> Heterogeneous computing: Challenges and opportunities. </title> <booktitle> Computer 26, </booktitle> <month> 6 (Jun. </month> <year> 1993), </year> <pages> 18-27. </pages>
Reference-contexts: Also, as compared with these other systems, the availability of UTS simplifies the task of generating the library calls needed to convert and transmit data between machines. Heterogeneity in scientific applications is also being addressed in several other research projects <ref> [Chen93, Freund93, Khokhar93, Wang92] </ref>. These projects seek to exploit inherent heterogeneity in the application by automatically partitioning the algorithm to run on a collection of heterogeneous processors.
Reference: [Mercurio92] <editor> Mercurio, P.J. Khoros. </editor> <volume> Pixel 3, 2 (Mar./Apr. </volume> <year> 1992), </year> <pages> 28-33. </pages>
Reference-contexts: Work on the simulation executive is also underway. The focus in this effort is on providing sophisticated capabilities to interact with codes, as well as the ability to substitute different codes at varying degrees of fidelity. A scientific visualization system such as AVS [AVS92] or Khoros <ref> [Rasure91, Mercurio92] </ref> will likely form a major component of the finished product. The nature of the NPSS project makes it imperative that the simulation executive support heterogeneous distributed processing, in which diverse software and hardware elements on local-or wide-area networks are incorporated into a single simulation.
Reference: [Quealy92] <author> Quealy, A., Cole, J., and Blech, R. </author> <title> Portable programming on parallel/networked computers using the Application Portable Parallel Library (APPL), </title> <type> NASA Technical Manual, </type> <year> 1992. </year> <month> -17 </month>
Reference-contexts: There is one such process per executing program. The Servers are used by Manager processes to start processes on remote machines. There is one Server per machine involved in a given computation. Systems such as PVM, p4 [Butler92], and APPL <ref> [Quealy92] </ref> also support heterogeneous distributed processing. However, these systems are oriented primarily towards exploiting clusters of workstations and/or parallel machines to achieve affordable parallel speedup, and as such, support a general message passing paradigm.
Reference: [Rasure91] <author> Rasure, J. and Williams, C. </author> <title> An integrated visual language and software development environment. </title> <booktitle> Jour. of Visual Languages and Computing 2 (1991), </booktitle> <pages> 217-246. </pages>
Reference-contexts: Work on the simulation executive is also underway. The focus in this effort is on providing sophisticated capabilities to interact with codes, as well as the ability to substitute different codes at varying degrees of fidelity. A scientific visualization system such as AVS [AVS92] or Khoros <ref> [Rasure91, Mercurio92] </ref> will likely form a major component of the finished product. The nature of the NPSS project makes it imperative that the simulation executive support heterogeneous distributed processing, in which diverse software and hardware elements on local-or wide-area networks are incorporated into a single simulation.
Reference: [Reed93] <author> Reed, John A. </author> <title> Development of an interactive graphical aircraft propulsion system simulator. </title> <institution> Master of Science Thesis, University of Toledo, </institution> <month> August </month> <year> 1993. </year>
Reference-contexts: Schooner, in turn, provides the ability to perform the actual computation associated with a modulethat is, the simulation code itselfon a remote, potentially heterogeneous, machine. The executive is being tested using the Turbofan Engine System Simulator (TESS) <ref> [Reed93] </ref>, a complete, one-dimensional engine simulation. TESS represents each of the principal components of an engine as an AVS module. An engine is constructed in the AVS Network Editor by connecting the modules to represent the airflow through the engine.
Reference: [Sun90] <author> Sun Microsystems, Inc. </author> <title> Network Programming Guide (Revision A), Part number 800-3850-10, Sun Microsystems, </title> <publisher> Inc., </publisher> <address> Mountain View, CA, </address> <month> March </month> <year> 1990. </year>
Reference-contexts: Specifically, Schooner deals with connecting together coarse-grained computations and exploiting long-distance networks, whereas other efforts are focusing on detecting and exploiting fine-grain heterogeneity, and improving communication among closely-coupled processors. Schooner's use of an external data representation, a specification language, and stub compilers is similar to other RPC systems <ref> [Almes85, Birrell84, Sun90, Xerox81] </ref>. Several of these systems also emphasize heterogeneity, including Matchmaker [Jones85], Horus [Gibbons87], and HRPC (Heterogeneous RPC) [Bershad87]. Schooner differs from these systems mainly in its orientation toward designing applications in a distributed environment, rather than as a client-server operating system mechanism. 3.2.
Reference: [Sunderam90] <author> Sunderam, V. S. </author> <title> PVM: A framework for parallel distributed computing. Concurrency Practice and Experience 2 (Dec. </title> <booktitle> 1990), </booktitle> <pages> 315-339. </pages>
Reference-contexts: This allows the use of, for example, a particular hardware platform's native parallel library, or the incorporation of a computation in which a system such as PVM <ref> [Sunderam90] </ref> is used to achieve parallel execution on a cluster of workstations.
Reference: [Wang92] <author> Wang, M., Kim, S., Nichols, M., Freund, R., Seigel, H., and Nation, W. </author> <title> Augmenting the optimal selection theory for superconcurrency. </title> <booktitle> Proc. Workshop on Heterogeneous Processing, </booktitle> <address> Beverly Hills, CA (Mar. </address> <year> 1992), </year> <pages> 13-22. </pages>
Reference-contexts: Also, as compared with these other systems, the availability of UTS simplifies the task of generating the library calls needed to convert and transmit data between machines. Heterogeneity in scientific applications is also being addressed in several other research projects <ref> [Chen93, Freund93, Khokhar93, Wang92] </ref>. These projects seek to exploit inherent heterogeneity in the application by automatically partitioning the algorithm to run on a collection of heterogeneous processors.
Reference: [Xerox81] <institution> Xerox Corp. </institution> <month> Courier: </month> <title> The Remote Procedure Call Protocol. Xerox System Integration Standard XSIS 038112, </title> <institution> Xerox Corp., Stamford, Conn., </institution> <month> Dec. </month> <year> 1981. </year> <month> -18 </month>
Reference-contexts: Specifically, Schooner deals with connecting together coarse-grained computations and exploiting long-distance networks, whereas other efforts are focusing on detecting and exploiting fine-grain heterogeneity, and improving communication among closely-coupled processors. Schooner's use of an external data representation, a specification language, and stub compilers is similar to other RPC systems <ref> [Almes85, Birrell84, Sun90, Xerox81] </ref>. Several of these systems also emphasize heterogeneity, including Matchmaker [Jones85], Horus [Gibbons87], and HRPC (Heterogeneous RPC) [Bershad87]. Schooner differs from these systems mainly in its orientation toward designing applications in a distributed environment, rather than as a client-server operating system mechanism. 3.2.
References-found: 29

