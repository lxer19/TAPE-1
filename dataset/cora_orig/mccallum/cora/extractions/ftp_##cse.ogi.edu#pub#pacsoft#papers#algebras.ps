URL: ftp://cse.ogi.edu/pub/pacsoft/papers/algebras.ps
Refering-URL: http://www.cse.ogi.edu/~dick/dick.html
Root-URL: http://www.cse.ogi.edu
Title: Programming with Algebras  
Author: Richard B. Kieburtz and Jeffrey Lewis 
Web: http://www.cse.ogi.edu/PacSoft/  
Address: P.O. Box 91000 Portland, OR 97291-1000 USA  
Affiliation: Pacific Software Research Center Oregon Graduate Institute of Science Technology  
Abstract-found: 0
Intro-found: 1
Reference: [B + 94] <author> Jeffrey Bell et al. </author> <title> Software design for reliability and reuse: A proof-of-concept demonstration. </title> <booktitle> In TRI-Ada '94 Proceedings, </booktitle> <pages> pages 396-404. </pages> <publisher> ACM, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: ADL is an implemented language. Its initial implementation has been built as an extension to Standard ML, and supports interactive use. The initial application for ADL has been in a system that calculates program generators from specifications given in a domain-specific mini-language <ref> [B + 94, KB + 95] </ref>. The concept of algebras as they are used in ADL is discussed informally in Section 2. The concepts are more rigorously defined in Section 3, which provides the mathematical background for the rest of the chapter.
Reference: [Bir86] <author> Richard S. Bird. </author> <title> An introduction to the theory of lists. </title> <editor> In M. Broy, editor, </editor> <booktitle> Logic of Programming and Calculi of Discrete Design, volume 36 of NATO Series F. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference-contexts: Some of the techniques are already familiar in functional programming|the higher-order functions fold, reduce or catamorphisms defined by various authors construct homomorphisms of structure algebras. The algebra of lists <ref> [Bir86] </ref> is actually a class a structure algebras. There are several important advantages to specifying functions in terms of structure algebras, rather than recursive equations: Patterns of control can be formally specified and explicit, rather than infor mal and implicit. Control is derived from a specified signature. <p> There are related studies of the use of higher-order combinators (including catamorphism) in theoretical programming [MFP91, Fok92], however, none has previously been incorporated into a practical system for program development. The origin of such techniques appears to lie in the work of the Squiggol school <ref> [Bir86, Bir88, Mee86] </ref>, subsequently influenced by a thesis by Hagino [Hag87] in which morphisms of data types are generalized in a categorical framework. A categorical programming language called Charity [CS92] embodies inductive and coinductive control structures based upon a categorical framework.
Reference: [Bir88] <author> Richard S. Bird. </author> <title> Lectures on constructive functional programming. </title> <editor> In M. Broy, editor, </editor> <booktitle> Constructive Methods in Computing Science, volume 52 of NATO Series F. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: There are related studies of the use of higher-order combinators (including catamorphism) in theoretical programming [MFP91, Fok92], however, none has previously been incorporated into a practical system for program development. The origin of such techniques appears to lie in the work of the Squiggol school <ref> [Bir86, Bir88, Mee86] </ref>, subsequently influenced by a thesis by Hagino [Hag87] in which morphisms of data types are generalized in a categorical framework. A categorical programming language called Charity [CS92] embodies inductive and coinductive control structures based upon a categorical framework.
Reference: [CS92] <author> Robin Cockett and Dwight Spencer. </author> <title> Strong categorical datatypes. </title> <editor> In R. A. G. Seely, editor, </editor> <booktitle> International Meeting on Category Theory, 1991. AMS, </booktitle> <year> 1992. </year>
Reference-contexts: The origin of such techniques appears to lie in the work of the Squiggol school [Bir86, Bir88, Mee86], subsequently influenced by a thesis by Hagino [Hag87] in which morphisms of data types are generalized in a categorical framework. A categorical programming language called Charity <ref> [CS92] </ref> embodies inductive and coinductive control structures based upon a categorical framework.
Reference: [Fok92] <author> Maarten M. Fokkinga. </author> <title> Law and Order in Algorithmics. </title> <type> PhD thesis, </type> <institution> University of Twente, Twente, </institution> <address> The Netherlands, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: Section 8 demonstrates how monads fit naturally into an algebraic framework. The chapter concludes by illustrating the formulation of an algorithm for contraction of lambda-calculus terms. There are related studies of the use of higher-order combinators (including catamorphism) in theoretical programming <ref> [MFP91, Fok92] </ref>, however, none has previously been incorporated into a practical system for program development.
Reference: [Gog80] <author> Joseph A. Goguen. </author> <title> How to prove inductive hypotheses without induction. </title> <editor> In W. Bibel and R. Kowalski, editors, </editor> <booktitle> Proc. 5th Conference on Automated Deduction, volume 87 of Lecture Notes in Computer Science, </booktitle> <pages> pages 356-373. </pages> <publisher> Springer-Verlag, </publisher> <year> 1980. </year>
Reference-contexts: Rules for the varieties introduced in Section 2.1 are summarized below. Notice that induction is not a structural rule of the logic. Rather, an inductive proof rule is introduced for each algebraic variety to account for the computational content of its catamorphisms. This has been noted previously by Goguen <ref> [Gog80] </ref> and others. In the following rules, t designates a type expression.
Reference: [GT79] <author> Joseph A. Goguen and Joseph Tardo. </author> <title> An introduction to )BJ: A language for writing and testing software specifications. </title> <booktitle> In Proc. of Conference on Specification of Reliable Software, </booktitle> <pages> pages 170-189. </pages> <publisher> IEEE Press, </publisher> <year> 1979. </year>
Reference-contexts: Signature algebras have been thoroughly explored as a basis for the OBJ family of languages <ref> [GT79, GW88] </ref>. However, signatures can also be modeled abstractly by a particular class of functors in the category of sets. These functors have fixed points which are objects in the same category, i.e. sets.
Reference: [GTW78] <author> Joseph A. Goguen, James Thatcher, and Eric Wagner. </author> <title> An initial algebra approach to the specification, classification, correctness and implementation of abstract data types. </title> <editor> In Raymond Yeh, editor, </editor> <booktitle> Current Trends in Programming Methodology IV, </booktitle> <pages> pages 80-149. </pages> <publisher> Prentice-Hall, </publisher> <year> 1978. </year>
Reference-contexts: The algebras we learn in school, however, are usually those derived from number theory and programs are more diverse, if not richer, than operations on numbers. A somewhat more abstract notion, called signature algebras, has been used for some time to to model abstract data types <ref> [GTW78] </ref>. A signature defines a set of typed operator symbols without specifying functions that would be the actual operators. Thus a signature defines a class of algebras, namely the algebras whose operators conform to the typing constraints imposed by the signature.
Reference: [GW88] <author> Joseph A. Goguen and Timothy Winkler. </author> <title> Introducing OBJ3. </title> <type> Technical Report SRI-CSL-88-9, </type> <institution> SRI International, </institution> <month> August </month> <year> 1988. </year>
Reference-contexts: Signature algebras have been thoroughly explored as a basis for the OBJ family of languages <ref> [GT79, GW88] </ref>. However, signatures can also be modeled abstractly by a particular class of functors in the category of sets. These functors have fixed points which are objects in the same category, i.e. sets.
Reference: [Hag87] <author> T. Hagino. </author> <title> A Categorical Programming Language. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, </institution> <year> 1987. </year>
Reference-contexts: The origin of such techniques appears to lie in the work of the Squiggol school [Bir86, Bir88, Mee86], subsequently influenced by a thesis by Hagino <ref> [Hag87] </ref> in which morphisms of data types are generalized in a categorical framework. A categorical programming language called Charity [CS92] embodies inductive and coinductive control structures based upon a categorical framework.
Reference: [KB + 95] <author> Richard B. Kieburtz, Francoise Bellegarde, Jef Bell James Hook, Jeffrey Lewis, Dina Oliva, Tim Sheard Lisa Walton, and Tong Zhou. </author> <title> Calculating software generators from solution specifications. </title> <booktitle> In TAPSOFT'95, volume 915 of Lecture Notes in Computer Science, </booktitle> <pages> pages 546-560. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: ADL is an implemented language. Its initial implementation has been built as an extension to Standard ML, and supports interactive use. The initial application for ADL has been in a system that calculates program generators from specifications given in a domain-specific mini-language <ref> [B + 94, KB + 95] </ref>. The concept of algebras as they are used in ADL is discussed informally in Section 2. The concepts are more rigorously defined in Section 3, which provides the mathematical background for the rest of the chapter.
Reference: [KL94] <author> Richard B. Kieburtz and Jeffrey Lewis. </author> <title> Algebraic Design Language| Preliminary definition. </title> <type> Technical report, </type> <institution> Pacific Software Research Center, Oregon Graduate Institute of Science & Technology, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: ADL is based upon the categorical notion of structure algebras and coalgebras, although only the algebraic part is discussed here <ref> [KL94] </ref>. Data types in ADL are the carriers of its free algebras. They correspond closely to the data types of conventional functional programming languages such as ML, Haskell or Miranda.
Reference: [Mac71] <author> Saunders MacLane. </author> <title> Categories for the Working Mathematician. </title> <publisher> Springer-Verlag, </publisher> <year> 1971. </year>
Reference-contexts: A categorical programming language called Charity [CS92] embodies inductive and coinductive control structures based upon a categorical framework. The characterization of data types as structure algebras (and coalgebras) <ref> [Mac71] </ref> can be attributed to Hagino. 2 Algebras, Types and signatures ADL is a higher-order, typed functional language whose type system is inspired by concepts from the theory of order-sorted algebras, from Martin-Lof's type theory and from the Girard-Reynolds second-order lambda calculus. <p> Structure algebras comprise varieties whose structure is induced by a functor on the category Set <ref> [Mac71] </ref>. The functor determines the structure. The following definitions have been specialized, for simplicity, to the case of single-sorted algebras. Definition 3. Structure algebra Let t be a functor on the category S et.
Reference: [Mal90] <author> Grant Malcolm. </author> <title> Algebraic Data Types and Program Transformation. </title> <type> PhD thesis, </type> <institution> University of Groningen, </institution> <year> 1990. </year>
Reference-contexts: A bifunctor is a multi-functor of rank 2, for instance. 7 2 An important fact is that a sum-of-products functor has a fixed point in Set <ref> [Mal90] </ref>. That is, given a sum-of-products functor E s , there is a set s 0 such that E s (s 0 ) ~ = s 0 , where ( ~ = ) denotes the relation of (natural) isomorphism 5 .
Reference: [Mee86] <author> Lambert Meertens. </author> <title> Algorithmics|towards programming as a mathematical activity. </title> <booktitle> In Proc. of the CWI Symbposium on Mathematics and Computer Science, </booktitle> <pages> pages 289-334. </pages> <publisher> North-Holland, </publisher> <year> 1986. </year>
Reference-contexts: There are related studies of the use of higher-order combinators (including catamorphism) in theoretical programming [MFP91, Fok92], however, none has previously been incorporated into a practical system for program development. The origin of such techniques appears to lie in the work of the Squiggol school <ref> [Bir86, Bir88, Mee86] </ref>, subsequently influenced by a thesis by Hagino [Hag87] in which morphisms of data types are generalized in a categorical framework. A categorical programming language called Charity [CS92] embodies inductive and coinductive control structures based upon a categorical framework.
Reference: [MFP91] <author> Erik Meijer, Maarten Fokkinga, and Ross Paterson. </author> <title> Functional programming with bananas, lenses, envelopes and barbed wire. </title> <booktitle> In Proc. of 5th ACM Conf. on Functional Programming Languages and Computer Architecture, volume 523 of Lecture Notes in Computer Science, </booktitle> <pages> pages 124-144. </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1991. </year>
Reference-contexts: Section 8 demonstrates how monads fit naturally into an algebraic framework. The chapter concludes by illustrating the formulation of an algorithm for contraction of lambda-calculus terms. There are related studies of the use of higher-order combinators (including catamorphism) in theoretical programming <ref> [MFP91, Fok92] </ref>, however, none has previously been incorporated into a practical system for program development. <p> A function whose domain is the free term algebra of a signature is called a catamorphism, borrowing the prefix "cata"="down" from Greek <ref> [MFP91] </ref>. ADL defines a combinator, red, that takes an algebra specification to a catamorphism 6 of the algebraic variety. The red combinator obeys a homomorphism condition for each algebra on which it is instantiated. For the algebras we have considered, the homomorphism equations are given below. <p> Examples of list-algebra catamorphisms Here are some examples of List-algebra catamorphisms constructed with red [list] and the algebra specifications given in Example 3: 6 Other authors <ref> [MFP91] </ref> have used "banana" brackets, (j j), to designate the cata morphism combinator. 12 sum_list = red [list] List (int)-c := int; $Nil := 0, $Cons := (+)- length = red [list] List (a)-c := int; $Nil := 0, $Cons := "(x,y) 1+y-append = red [list] List (a)-c := list (a)
Reference: [Mog91] <author> Eugenio Moggi. </author> <title> Notions of computations and monads. </title> <journal> Information and Com--putation, </journal> <volume> 93(1) </volume> <pages> 55-92, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Common examples are monads of exceptions (we take for granted that exceptions are propagated, and shall only express unexceptional terms) and mon-ads of state transformers (we take for granted that state is threaded through computations in a deterministic order). 28 Monads have been found useful in computer science relatively recently <ref> [Mog91, Wad90] </ref>. Monads have been used to explain control constructs such as exceptions [Spi90] and advocated as a basis for formulating reusable modules [Wad92]. A variety of monads cannot be specified with the sorted signature declarations available in ADL.
Reference: [Pey87] <editor> Simon Peyton Jones. </editor> <booktitle> The Implementation of Functional Programming Languages. </booktitle> <publisher> Prentice-Hall, </publisher> <year> 1987. </year>
Reference-contexts: To weak-head-normalize a deBruijn term, the contraction step must be iterated along the normal-order spine of a term <ref> [Pey87] </ref>. An iterative control construct could be programmed in the coalgebraic part of ADL, although that topic is outside the scope of this chapter. However, we note that to verify that an iteration was well defined in ADL, one would be required to furnish a proof of its termination.
Reference: [SF93] <author> Tim Sheard and Leonidas Fegaras. </author> <title> A fold for all seasons. </title> <booktitle> In Proceedings of the conference on Functional Programming and Computer Architecture, </booktitle> <address> Copen-hagen, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: When the underlying control structure is manifest, less costly program analysis is needed to determine when transformation strategies may apply. Many transformations are in fact, simply directed instances of theorems provable by parametricity <ref> [SF93] </ref>. There are many opportunities that have not yet been exploited. Acknowledgements We would like to thank our colleagues, Jeff Bell, Jim Hook, Tim Sheard and Lisa Walton who have served as guinea-pigs in programming experiments with ADL and have delivered valuable criticism and valued encouragement.
Reference: [Spi90] <author> Mike Spivey. </author> <title> A functional theory of exceptions. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 14 </volume> <pages> 25-42, </pages> <year> 1990. </year>
Reference-contexts: Monads have been used to explain control constructs such as exceptions <ref> [Spi90] </ref> and advocated as a basis for formulating reusable modules [Wad92]. A variety of monads cannot be specified with the sorted signature declarations available in ADL.
Reference: [Wad90] <author> Philip Wadler. </author> <title> Comprehending monads. </title> <booktitle> In Proc. 1990 ACM Conference on Lisp and Functional Programming, </booktitle> <pages> pages 61-78, </pages> <year> 1990. </year>
Reference-contexts: Common examples are monads of exceptions (we take for granted that exceptions are propagated, and shall only express unexceptional terms) and mon-ads of state transformers (we take for granted that state is threaded through computations in a deterministic order). 28 Monads have been found useful in computer science relatively recently <ref> [Mog91, Wad90] </ref>. Monads have been used to explain control constructs such as exceptions [Spi90] and advocated as a basis for formulating reusable modules [Wad92]. A variety of monads cannot be specified with the sorted signature declarations available in ADL.
Reference: [Wad92] <editor> Philip Wadler. </editor> <booktitle> The essence of functional programming. In Conference Record of the Nineteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 1-14. </pages> <publisher> ACM Press, </publisher> <month> January </month> <year> 1992. </year> <title> This article was processed using the L A T E X macro package with LLNCS style 41 </title>
Reference-contexts: Monads have been used to explain control constructs such as exceptions [Spi90] and advocated as a basis for formulating reusable modules <ref> [Wad92] </ref>. A variety of monads cannot be specified with the sorted signature declarations available in ADL.
References-found: 22

