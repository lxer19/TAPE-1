URL: http://www.mcs.anl.gov/~thakur/papers/splc94_passion_runtime.ps.gz
Refering-URL: http://www.mcs.anl.gov/~thakur/papers.html
Root-URL: http://www.mcs.anl.gov
Email: @npac.syr.edu  
Title: Scalable Parallel Libraries Conference, Oct. 1994 PASSION Runtime Library for Parallel I/O  
Author: Rajeev Thakur Rajesh Bordawekar Alok Choudhary Ravi Ponnusamy Tarvinder Singh thakur, rajesh, choudhar, ravi, tpsingh 
Address: Syracuse, NY 13244  
Affiliation: Dept. of Electrical and Computer Eng. and Northeast Parallel Architectures Center Syracuse University,  
Abstract: We are developing a compiler and runtime support system called PASSION: Parallel And Scalable Software for Input-Output. PASSION provides software support for I/O intensive out-of-core loosely synchronous problems. This paper gives an overview of the PASSION Runtime Library and describes two of the optimizations incorporated in it, namely Data Prefetching and Data Sieving. Performance improvements provided by these optimizations on the Intel Touchstone Delta are discussed, together with an out-of-core Median Filtering application. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Bordawekar, A. Choudhary, and R. Thakur. </author> <title> Data Access Reorganizations in Compiling Out-of-core Data Parallel Programs on Distributed Memory Machines. </title> <type> Technical Report SCCS-622, </type> <institution> NPAC, Syracuse University, </institution> <month> September </month> <year> 1994. </year>
Reference-contexts: At Syracuse University, we consider the I/O problem from a language, compiler and runtime support point of view. We are developing a compiler and run-time support system called PASSION: Parallel And Scalable Software for Input-Output [4]. PASSION provides support for compiling out-of-core data parallel programs <ref> [16, 1] </ref>, parallel input-output of data [2], communication of out-of-core data, redistribution of data stored on disks, many optimizations including data prefetching from disks, data sieving, data reuse etc., as well as support at the operating system level.
Reference: [2] <author> R. Bordawekar, J. del Rosario, and A. Choud-hary. </author> <title> Design and Evaluation of Primitives for Parallel I/O. </title> <booktitle> In Proceedings of Supercomputing '93, </booktitle> <pages> pages 452-461, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: We are developing a compiler and run-time support system called PASSION: Parallel And Scalable Software for Input-Output [4]. PASSION provides support for compiling out-of-core data parallel programs [16, 1], parallel input-output of data <ref> [2] </ref>, communication of out-of-core data, redistribution of data stored on disks, many optimizations including data prefetching from disks, data sieving, data reuse etc., as well as support at the operating system level. We have also developed an initial framework for run-time support for out-of-core irregular problems [4]. <p> The performance is best when the data distribution on disks conforms to the data distribution on processors. Other distributions give much lower performance. To alleviate this problem, the Two Phase Access Strategy has been proposed in <ref> [8, 2] </ref>. In the Two Phase Approach, data is first read in a manner conforming to the distribution on disks and then redistributed among the processors. This is found to give consistently good performance for all distributions [8, 2]. <p> To alleviate this problem, the Two Phase Access Strategy has been proposed in <ref> [8, 2] </ref>. In the Two Phase Approach, data is first read in a manner conforming to the distribution on disks and then redistributed among the processors. This is found to give consistently good performance for all distributions [8, 2]. The PASSION runtime library uses this Two Phase Approach for parallel I/O. In the first phase, data is accessed using the data distribution, stripe size, and set of reading nodes (possibly a subset of the computational array) which conforms with the distribution of data over the disks. <p> All PASSION routines involving array sections use Data Sieving for greater efficiency. 6 Related Work There has been some related research in software support for high performance parallel I/O. The Two-phase I/O read/write strategy was first proposed by Bordawekar et al <ref> [8, 2] </ref>. The effects of prefetching blocks of a file in a multiprocessor file system are studied in [11]. Prefetching for in-core problems is discussed in [13, 3]. Vesta is a parallel file system designed and developed at IBM T. J.
Reference: [3] <author> D. Callahan, K. Kennedy, and A. Porterfield. </author> <title> Software Prefetching. </title> <booktitle> In Proceedings of ASPLOS 91, </booktitle> <pages> pages 40-52, </pages> <year> 1991. </year>
Reference-contexts: The Two-phase I/O read/write strategy was first proposed by Bordawekar et al [8, 2]. The effects of prefetching blocks of a file in a multiprocessor file system are studied in [11]. Prefetching for in-core problems is discussed in <ref> [13, 3] </ref>. Vesta is a parallel file system designed and developed at IBM T. J. Watson Research Center [7, 5, 6] which supports logical partitioning of files. File declustering, where different blocks of a file are stored on distinct disks is suggested in [12].
Reference: [4] <author> A. Choudhary, R. Bordawekar, M. Harry, R. Krishnaiyer, R. Ponnusamy, T. Singh, and R. Thakur. </author> <title> PASSION: Parallel and Scalable Software for Input-Output. </title> <type> Technical Report SCCS-636, </type> <institution> NPAC, Syracuse University, </institution> <month> Septem-ber </month> <year> 1994. </year>
Reference-contexts: Access to this facility was provided by CRPC. At Syracuse University, we consider the I/O problem from a language, compiler and runtime support point of view. We are developing a compiler and run-time support system called PASSION: Parallel And Scalable Software for Input-Output <ref> [4] </ref>. PASSION provides support for compiling out-of-core data parallel programs [16, 1], parallel input-output of data [2], communication of out-of-core data, redistribution of data stored on disks, many optimizations including data prefetching from disks, data sieving, data reuse etc., as well as support at the operating system level. <p> We have also developed an initial framework for run-time support for out-of-core irregular problems <ref> [4] </ref>. This paper gives an overview of PASSION and describes some of the main features of the PASSION Runtime Library. We explain the basic model of computation and I/O used by the runtime library. The runtime routines supported by PASSION are discussed. <p> Instead, a program written in a high-level data parallel language like HPF can be translated into efficient code using the PASSION compiler and runtime system. A detailed description of all the features of PASSION is given in <ref> [4] </ref>. 2.1 Model for Computation and I/O In the SPMD (Single Program Multiple Data) programming model, each processor has a local array associated with it. In an in-core program, the local array resides in the local memory of the processor.
Reference: [5] <author> P. Corbett, S. Baylor, and D. Feitelson. </author> <title> Overview of the Vesta Parallel File System. </title> <booktitle> In Proceedings of the Workshop on I/O in Parallel Computer Systems at IPPS '93, </booktitle> <pages> pages 1-16, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: The effects of prefetching blocks of a file in a multiprocessor file system are studied in [11]. Prefetching for in-core problems is discussed in [13, 3]. Vesta is a parallel file system designed and developed at IBM T. J. Watson Research Center <ref> [7, 5, 6] </ref> which supports logical partitioning of files. File declustering, where different blocks of a file are stored on distinct disks is suggested in [12]. This is used in the Bridge File System [10], in Intel's Concurrent File System (CFS) [15] and in various RAID schemes [14].
Reference: [6] <author> P. Corbett and D. Feitelson. </author> <title> Overview of the Vesta Parallel File System. </title> <booktitle> In Proceedings of the Scalable High Performance Computing Conference, </booktitle> <pages> pages 63-70, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: The effects of prefetching blocks of a file in a multiprocessor file system are studied in [11]. Prefetching for in-core problems is discussed in [13, 3]. Vesta is a parallel file system designed and developed at IBM T. J. Watson Research Center <ref> [7, 5, 6] </ref> which supports logical partitioning of files. File declustering, where different blocks of a file are stored on distinct disks is suggested in [12]. This is used in the Bridge File System [10], in Intel's Concurrent File System (CFS) [15] and in various RAID schemes [14].
Reference: [7] <author> P. Corbett, D. Feitelson, J. Prost, and S. Baylor. </author> <title> Parallel Access to Files in the Vesta File System. </title> <booktitle> In Proceedings of Supercomputing '93, </booktitle> <pages> pages 472-481, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: The effects of prefetching blocks of a file in a multiprocessor file system are studied in [11]. Prefetching for in-core problems is discussed in [13, 3]. Vesta is a parallel file system designed and developed at IBM T. J. Watson Research Center <ref> [7, 5, 6] </ref> which supports logical partitioning of files. File declustering, where different blocks of a file are stored on distinct disks is suggested in [12]. This is used in the Bridge File System [10], in Intel's Concurrent File System (CFS) [15] and in various RAID schemes [14].
Reference: [8] <author> J. del Rosario, R. Bordawekar, and A. Choud-hary. </author> <title> A Two-Phase Strategy for Achieving High-Performance Parallel I/O. </title> <type> Technical Report SCCS-408, </type> <institution> NPAC, Syracuse University, </institution> <month> October </month> <year> 1992. </year>
Reference-contexts: The performance is best when the data distribution on disks conforms to the data distribution on processors. Other distributions give much lower performance. To alleviate this problem, the Two Phase Access Strategy has been proposed in <ref> [8, 2] </ref>. In the Two Phase Approach, data is first read in a manner conforming to the distribution on disks and then redistributed among the processors. This is found to give consistently good performance for all distributions [8, 2]. <p> To alleviate this problem, the Two Phase Access Strategy has been proposed in <ref> [8, 2] </ref>. In the Two Phase Approach, data is first read in a manner conforming to the distribution on disks and then redistributed among the processors. This is found to give consistently good performance for all distributions [8, 2]. The PASSION runtime library uses this Two Phase Approach for parallel I/O. In the first phase, data is accessed using the data distribution, stripe size, and set of reading nodes (possibly a subset of the computational array) which conforms with the distribution of data over the disks. <p> All PASSION routines involving array sections use Data Sieving for greater efficiency. 6 Related Work There has been some related research in software support for high performance parallel I/O. The Two-phase I/O read/write strategy was first proposed by Bordawekar et al <ref> [8, 2] </ref>. The effects of prefetching blocks of a file in a multiprocessor file system are studied in [11]. Prefetching for in-core problems is discussed in [13, 3]. Vesta is a parallel file system designed and developed at IBM T. J.
Reference: [9] <author> J. del Rosario and A. Choudhary. </author> <title> High Performance I/O for Parallel Computers: Problems and Prospects. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 59-68, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: This is used in the Bridge File System [10], in Intel's Concurrent File System (CFS) [15] and in various RAID schemes [14]. An overview of the various issues involved in high performance I/O is given in <ref> [9] </ref>. 7 Conclusions The PASSION Runtime Library provides high-level runtime support for loosely synchronous out-of-core computations on distributed memory parallel comput ers. The routines perform efficient parallel I/O as well as interprocessor communication.
Reference: [10] <author> P. Dibble, M. Scott, and C. Ellis. </author> <title> Bridge: A High Performance File System for Parallel Processors. </title> <booktitle> In Proceedings of the 8 th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 154-161, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: J. Watson Research Center [7, 5, 6] which supports logical partitioning of files. File declustering, where different blocks of a file are stored on distinct disks is suggested in [12]. This is used in the Bridge File System <ref> [10] </ref>, in Intel's Concurrent File System (CFS) [15] and in various RAID schemes [14]. An overview of the various issues involved in high performance I/O is given in [9]. 7 Conclusions The PASSION Runtime Library provides high-level runtime support for loosely synchronous out-of-core computations on distributed memory parallel comput ers.
Reference: [11] <author> D. Kotz and C. Ellis. </author> <title> Prefetching in File Systems for MIMD Multiprocessors. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <pages> pages 218-230, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: The Two-phase I/O read/write strategy was first proposed by Bordawekar et al [8, 2]. The effects of prefetching blocks of a file in a multiprocessor file system are studied in <ref> [11] </ref>. Prefetching for in-core problems is discussed in [13, 3]. Vesta is a parallel file system designed and developed at IBM T. J. Watson Research Center [7, 5, 6] which supports logical partitioning of files.
Reference: [12] <author> M. Livny, S. Khoshafian, and H. Boral. </author> <title> Multi-Disk Management Algorithms. </title> <booktitle> In Proceedings of the 1987 ACM SIGMETRICS Conference on Measurement and Modeling of Computer Systems, </booktitle> <pages> pages 69-77, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: Vesta is a parallel file system designed and developed at IBM T. J. Watson Research Center [7, 5, 6] which supports logical partitioning of files. File declustering, where different blocks of a file are stored on distinct disks is suggested in <ref> [12] </ref>. This is used in the Bridge File System [10], in Intel's Concurrent File System (CFS) [15] and in various RAID schemes [14].
Reference: [13] <author> T. Mowry, M. Lam, and A. Gupta. </author> <title> Design and Evaluation of a Compiler Algorithm for Prefetch-ing. </title> <booktitle> In Proceedings of ASPLOS 92, </booktitle> <pages> pages 62-73, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: The Two-phase I/O read/write strategy was first proposed by Bordawekar et al [8, 2]. The effects of prefetching blocks of a file in a multiprocessor file system are studied in [11]. Prefetching for in-core problems is discussed in <ref> [13, 3] </ref>. Vesta is a parallel file system designed and developed at IBM T. J. Watson Research Center [7, 5, 6] which supports logical partitioning of files. File declustering, where different blocks of a file are stored on distinct disks is suggested in [12].
Reference: [14] <author> D. Patterson, G. Gibson, and R. Katz. </author> <title> A Case for Redundant Arrays of Inexpensive Disks. </title> <booktitle> In Proceedings of ACM SIGMOD International Conference on Management of Data, </booktitle> <month> June </month> <year> 1988. </year>
Reference-contexts: File declustering, where different blocks of a file are stored on distinct disks is suggested in [12]. This is used in the Bridge File System [10], in Intel's Concurrent File System (CFS) [15] and in various RAID schemes <ref> [14] </ref>. An overview of the various issues involved in high performance I/O is given in [9]. 7 Conclusions The PASSION Runtime Library provides high-level runtime support for loosely synchronous out-of-core computations on distributed memory parallel comput ers. The routines perform efficient parallel I/O as well as interprocessor communication.
Reference: [15] <author> P. Pierce. </author> <title> A Concurrent File System for a Highly Parallel Mass Storage Subsystem. </title> <booktitle> In Proceedings of 4 th Conference on Hypercubes, Concurrent Computers and Applications, </booktitle> <pages> pages 155-160, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: J. Watson Research Center [7, 5, 6] which supports logical partitioning of files. File declustering, where different blocks of a file are stored on distinct disks is suggested in [12]. This is used in the Bridge File System [10], in Intel's Concurrent File System (CFS) <ref> [15] </ref> and in various RAID schemes [14]. An overview of the various issues involved in high performance I/O is given in [9]. 7 Conclusions The PASSION Runtime Library provides high-level runtime support for loosely synchronous out-of-core computations on distributed memory parallel comput ers.
Reference: [16] <author> R. Thakur, R. Bordawekar, and A. Choud-hary. </author> <title> Compiler and Runtime Support for Out-of-Core HPF Programs. </title> <booktitle> In Proceedings of the 8 th ACM International Conference on Supercomputing, </booktitle> <pages> pages 382-391, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: At Syracuse University, we consider the I/O problem from a language, compiler and runtime support point of view. We are developing a compiler and run-time support system called PASSION: Parallel And Scalable Software for Input-Output [4]. PASSION provides support for compiling out-of-core data parallel programs <ref> [16, 1] </ref>, parallel input-output of data [2], communication of out-of-core data, redistribution of data stored on disks, many optimizations including data prefetching from disks, data sieving, data reuse etc., as well as support at the operating system level. <p> storage format etc. is passed to the routines using a Array Management Routines PASSION Routine Function 1 PASSION read section Read a regular section from LAF to ICLA 2 PASSION write section Write a regular section from ICLA to LAF 3 PASSION read with reuse read section with data reuse <ref> [16] </ref> 4 PASSION prefetch read Asynchronous (non-blocking) read of a regular section 5 PASSION prefetch wait Wait for a prefetch to complete Array Communication Routines PASSION Routine Function 6 PASSION oc shift Shift type collective communication on out-of-core data 7 PASSION oc multicast Multicast communication on out-of-core data Mapping Routines PASSION <p> to processors 9 PASSION oc file map Generate local files from global files Generic Routines PASSION Routine Function 10 PASSION oc transpose Transpose an out-of-core array 11 PASSION oc matmul Perform out-of-core matrix multiplication Table 1: Some of the PASSION Runtime Routines data structure called the Out-of-Core Array Descriptor (OCAD) <ref> [16] </ref>. The Data Sieving Method described in Section 5 is used for improved performance. 3.1.2 Communication Routines The Communication Routines perform collective communication of data in the OCLA. We use the Explicit Communication Method described in [16]. <p> Some of the PASSION Runtime Routines data structure called the Out-of-Core Array Descriptor (OCAD) <ref> [16] </ref>. The Data Sieving Method described in Section 5 is used for improved performance. 3.1.2 Communication Routines The Communication Routines perform collective communication of data in the OCLA. We use the Explicit Communication Method described in [16]. The communication is done for the entire OCLA, i.e. all the off-processor data needed by the OCLA is fetched during the communication. This requires inter-processor communication as well as disk accesses. 3.1.3 Mapping Routines The Mapping Routines perform data and processor/disk mappings. <p> Read Read ReadComp Comp CompWrite Write Write (A) Without Prefetch Read Read Read Comp Comp Comp WriteWriteWrite (B) With Prefetch 3.3 Optimizations A number of optimizations have been incorporated in the PASSION runtime library to reduce the I/O cost. One optimization called Data Reuse <ref> [16] </ref> reduces the amount of I/O by reusing data already fetched into main memory instead of reading it again from disk. Two other optimizations, Data Prefetching and Data Sieving, are described in Sections 4 and 5 respectively.
References-found: 16

