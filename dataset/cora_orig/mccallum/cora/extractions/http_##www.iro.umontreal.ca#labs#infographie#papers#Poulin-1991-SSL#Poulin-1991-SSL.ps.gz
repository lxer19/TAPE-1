URL: http://www.iro.umontreal.ca/labs/infographie/papers/Poulin-1991-SSL/Poulin-1991-SSL.ps.gz
Refering-URL: http://www.iro.umontreal.ca/labs/infographie/papers/Poulin-1991-SSL/
Root-URL: http://www.iro.umontreal.ca
Email: poulin@cs.ubc.ca amana@yetti.yorku.ca  
Phone: (604) 228-2218 (416) 736-5053  
Title: Shading and Shadowing with Linear Light Sources  
Author: Pierre Pouliny and John Amanatidesz 
Address: 4700 Keele St. Vancouver, British Columbia North York, Ontario Canada V6T 1W5 Canada M3J 1P3  
Affiliation: yImager, zDepartment of Computer Science Department of Computer Science, York University University of British Columbia,  
Abstract: In virtually all rendering systems, linear light sources are modeled with a series of point light sources that require considerable computing resources to produce realistic looking results. A general solution for shading surfaces illuminated by a linear light source is proposed. A formulation allowing for faster computation of the diffuse component of light reflection is derived. By assuming Phong's specular component, simple, inexpensive and convincing results are produced with the use of a Chebyshev approximation. A shadowing algorithm is also presented. As shadowing from linear light sources is expensive, two acceleration schemes, extended from ray tracing, are evaluated. 
Abstract-found: 1
Intro-found: 1
Reference: [Aman84] <author> Amanatides, J., </author> <title> "Ray Tracing with Cones", </title> <booktitle> Computer Graphics, (Proc. SIGGRAPH 84), </booktitle> <volume> Vol. 18, No. 3, </volume> <month> July </month> <year> 1984, </year> <pages> pp. 129-135. </pages>
Reference-contexts: They allow the user to specify the shape of the intensity distribution by drawing goniometric diagrams 2 . Other kinds of light sources have also been defined. For instance in cone tracing <ref> [Aman84] </ref>, spherical lights have been simulated. In various attempts to solve the global illumination with the radiosity algorithm [Gora84] [Cohe85], lights are formed of polygons. In another rendering algorithm driven by light propagation [Four89], any type of light can be simulated.
Reference: [Aman87] <author> Amanatides, J. and Woo, A., </author> <title> "A Fast Voxel Traversal Algorithm for Ray Tracing", </title> <address> Euro-graphics 87, </address> <month> August </month> <year> 1987, </year> <pages> pp. 1-10. </pages>
Reference-contexts: Avoiding to compute unnecessary and expensive projections onto the light source becomes primordial. We present two different schemes we implemented to achieve this goal. First, we use the regular grid traversal described in Amanatides and Woo <ref> [Aman87] </ref>. Once an intersection point is found, a light triangle is formed. This light triangle is then scan-converted in the 3D grid of the scene. The objects occupying a same voxel than the light triangle are gathered and tested for uniqueness.
Reference: [Blin77] <author> Blinn, J., </author> <title> "Models of Light Reflection for Computer Synthesized Pictures", </title> <booktitle> Computer Graphics, (Proc. SIGGRAPH 77), </booktitle> <volume> Vol. 11, No. 2, </volume> <month> July </month> <year> 1977, </year> <pages> pp. 192-198. </pages>
Reference-contexts: A possible explanation is that a real surface is never perfectly flat but contains microscopic deformations. Popular models of the specular component have been proposed by Phong [Phon75], Blinn <ref> [Blin77] </ref> and Cook and Torrance [Cook81].
Reference: [Cabr87] <author> Cabral, B., Max, N. and Springmeyer, R., </author> <title> "Bidirectional Reflection Functions from Surface Bump Maps", </title> <booktitle> Computer Graphics, (Proc. SIGGRAPH 87), </booktitle> <volume> Vol. 21, No. 4, </volume> <month> July </month> <year> 1987, </year> <pages> pp. 273-281. </pages>
Reference-contexts: In fact, highly diffuse or specular material are closely approximated by this subdivision. However it is important to mention that reflection off some surfaces cannot adequately be represented this way. The more general bidirectional reflection functions <ref> [Cabr87] </ref> should be used to characterise these surfaces. examples of specular surfaces. A physical explanation of the difference between these two components is that light bounces off a specular surface while for a diffuse surface, light penetrates the surface and is scattered internally before emerging again.
Reference: [Cohe85] <author> Cohen, M.F. and Greenberg, </author> <title> D.P., "The Hemi-Cube, A Radiosity Solution for Complex Environments", </title> <booktitle> Computer Graphics, (Proc. SIGGRAPH 85), </booktitle> <volume> Vol. 19, No. 3, </volume> <month> July </month> <year> 1985, </year> <pages> pp. 31-40. </pages>
Reference-contexts: Other kinds of light sources have also been defined. For instance in cone tracing [Aman84], spherical lights have been simulated. In various attempts to solve the global illumination with the radiosity algorithm [Gora84] <ref> [Cohe85] </ref>, lights are formed of polygons. In another rendering algorithm driven by light propagation [Four89], any type of light can be simulated. However in all these approaches, lights are inherent to a particular rendering algorithm and as such, cannot easily be generalised to other common rendering techniques.
Reference: [Cook81] <author> Cook, R., Torrance, K., </author> <title> "A Reflectance Model for Computer Graphics", </title> <booktitle> Computer Graphics, (Proc. SIGGRAPH 81), </booktitle> <volume> Vol. 15, No. 3, </volume> <month> August </month> <year> 1981, </year> <pages> pp. 307-316. </pages>
Reference-contexts: A possible explanation is that a real surface is never perfectly flat but contains microscopic deformations. Popular models of the specular component have been proposed by Phong [Phon75], Blinn [Blin77] and Cook and Torrance <ref> [Cook81] </ref>.
Reference: [Fole82] <author> Foley, J.D. and Van Dam, A., </author> <title> Fundamentals of Interactive Computer Graphics, </title> <publisher> Addison-Wesley, </publisher> <year> 1982. </year>
Reference-contexts: To compute ~ L we subtract the position of the surface we are shading from the point source position and normalise the resulting vector. The intensity of this light source is proportional to 1 r 2 though confusion on exactly how to apply this formula has been reported <ref> [Fole82] </ref>. Some people include the distance from a surface to the eye in the intensity calculation. This is not necessary. As a surface moves further away from the viewer, the increased distance is compensated by the increase surface area that now occupies the pixel.
Reference: [Four89] <author> Fournier, A., Fiume, E., Ouellette, M. and Chee, C., "FIAT: </author> <title> Light Driven Global Illumination", DGP Technical Memo DGP89-1, Dynamic Graphics Project, </title> <institution> University of Toronto, </institution> <year> 1990. </year>
Reference-contexts: Other kinds of light sources have also been defined. For instance in cone tracing [Aman84], spherical lights have been simulated. In various attempts to solve the global illumination with the radiosity algorithm [Gora84] [Cohe85], lights are formed of polygons. In another rendering algorithm driven by light propagation <ref> [Four89] </ref>, any type of light can be simulated. However in all these approaches, lights are inherent to a particular rendering algorithm and as such, cannot easily be generalised to other common rendering techniques. Linear light sources simulating neon-like lights open a new dimension to the effects that can be produced.
Reference: [Gora84] <author> Goral, C.M., Torrance, K.E., Greenberg, D.P. and Battaile, B., </author> <title> "Modeling the Interaction of Light Between Diffuse Surfaces", </title> <booktitle> Computer Graphics, (Proc. SIGGRAPH 84), </booktitle> <volume> Vol. 18, No. 3, </volume> <month> July </month> <year> 1984, </year> <pages> pp. 213-222. </pages>
Reference-contexts: Other kinds of light sources have also been defined. For instance in cone tracing [Aman84], spherical lights have been simulated. In various attempts to solve the global illumination with the radiosity algorithm <ref> [Gora84] </ref> [Cohe85], lights are formed of polygons. In another rendering algorithm driven by light propagation [Four89], any type of light can be simulated. However in all these approaches, lights are inherent to a particular rendering algorithm and as such, cannot easily be generalised to other common rendering techniques.
Reference: [Grad65] <author> Gradshteyn, </author> <title> I.S. and Ryzhik, I.M., Table of Integrals, Series and Products, </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1965. </year>
Reference-contexts: By substituting the light source line equation into the integral, we have an integral of the following form that can be solved analytically <ref> [Grad65] </ref> as: Z 1 Dt + E At 2 + Bt + C 2 (D (Bt + 2C) E (2At + B)) p fi fi fi 0 4 The Specular Integral To lay the groundwork for the solution of the specular integral we will redevelop the diffuse integral in a different
Reference: [Hain87] <author> Haines, </author> <title> E.A., "A Proposal for Standard Graphics Environments", </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> Vol. 7, No. 11, </volume> <month> November </month> <year> 1987, </year> <month> pp.3-5. </month>
Reference-contexts: 3 25 3 50 3 flakes Inactive 1.0000 0.9059 0.9022 0.8863 0.8742 0.8629 Active 1.2342 0.7969 0.9722 0.8245 0.8696 1.5742 tetrahedron Inactive 1.0000 0.8926 0.8719 0.8657 0.8615 0.8642 Active 1.2532 0.5239 0.2925 0.2689 0.2385 0.3740 5 These two scenes, the sphere flakes and the tetrahedron, have been suggested by Haines <ref> [Hain87] </ref> in an attempt to help benchmarking rendering techniques. The sphere flakes consists of 91 spheres defined recursively above a square while the tetrahedron is represented by 4096 triangles forming a pyramid. To test our algorithms, a linear light source is located above each scene.
Reference: [Kauf81] <author> Kaufman, J.E. and Haynes, H., </author> <title> IES Lighting Handbook, </title> <institution> Illuminating Engineering Society of North America, </institution> <address> New York, </address> <year> 1981. </year>
Reference-contexts: In this coordinate system, ~ N ~ L l can be replaced by z l r l and thus the diffuse integral is transformed to: 2 Goniometric diagrams specify relative intensity as a function of direction. See the IES Lighting Handbook <ref> [Kauf81] </ref> for a good source of lighting definitions. Note: the user must exercise care when drawing these diagrams since sharp discontinuities in the resulting curves are a source of aliasing artifacts.
Reference: [Nish85] <author> Nishita, T., Okamura, I. and Nakamae, E., </author> <title> "Shading Models for Point and Linear Sources", </title> <journal> ACM Transaction on Graphics, </journal> <volume> Vol. 4, No. 2, </volume> <month> April </month> <year> 1985, </year> <pages> pp. 124-146. </pages>
Reference-contexts: His extensions include making the intensity of the light source a function of direction (to produce spotlights) and providing flaps that can cut off the light in certain directions. Verbeck and Greenberg [Verb84] and Nishita et al. <ref> [Nish85] </ref> continue Warn's work by providing more sophisticated lighting design tools. They allow the user to specify the shape of the intensity distribution by drawing goniometric diagrams 2 . Other kinds of light sources have also been defined. For instance in cone tracing [Aman84], spherical lights have been simulated. <p> These problems will be related to the shading of a surface as well as the shadowing within the penumbra region. Since shading and shadowing computations are very important parts of the rendering process, this approach can be very expensive. Nishita et al. <ref> [Nish85] </ref> use a slightly different formulation than the one introduced in this paper. They derive an analytic solution for the diffuse component if the light source is parallel or perpendicular to the surface. However, multiple point sources are used to approximate the specular integral. <p> The solution of simulating the linear light by a series of collinear points is still an alternative but as mentioned earlier, the shadowing would be subject to sampling problems. Nishita et al. <ref> [Nish85] </ref> describe an algorithm for a scene made exclusively of polygons. Given a linear light source and a polygon casting a shadow on a surface, the polygon vertices are projected onto the surface, taking as center of projection the two end points of the light.
Reference: [Phon75] <author> Phong, B., </author> <title> "Illumination for Computer Generated Pictures", </title> <journal> Communications of the ACM, </journal> <volume> Vol. 18, No. 6, </volume> <month> June </month> <year> 1975, </year> <pages> pp. 311-317. </pages>
Reference-contexts: A possible explanation is that a real surface is never perfectly flat but contains microscopic deformations. Popular models of the specular component have been proposed by Phong <ref> [Phon75] </ref>, Blinn [Blin77] and Cook and Torrance [Cook81]. <p> This vector, in fact, defines the directional light source. Because the vector ~ L is constant, the shading computation for polygons can be simplified as many computations can be removed from the inner loops <ref> [Phon75] </ref>. Also, the intensity of the light source is constant and independent of the position of an object in space. The second most popular light source is the point light source, which is defined geometrically by a point in space.
Reference: [Verb84] <author> Verbeck, C.P. and Greenberg, </author> <title> D.P., "A Comprehensive Light-Source Description for Computer Graphics", </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> Vol. 4, No. 7, </volume> <month> July </month> <year> 1984, </year> <pages> pp. 66-75. </pages>
Reference-contexts: Warn [Warn83] attempts to create more realistic light sources by mimicking the lights used by photographers. His extensions include making the intensity of the light source a function of direction (to produce spotlights) and providing flaps that can cut off the light in certain directions. Verbeck and Greenberg <ref> [Verb84] </ref> and Nishita et al. [Nish85] continue Warn's work by providing more sophisticated lighting design tools. They allow the user to specify the shape of the intensity distribution by drawing goniometric diagrams 2 . Other kinds of light sources have also been defined. <p> integral can also be broken down into diffuse and specular components: I pixel = Ik d Z length ( ~ N ~ L l ) l Z length R s ( ~ E; ~ N ; ~ L l ) l The linear sources were modeled by Verbeck and Greenberg <ref> [Verb84] </ref> by a series of collinear point sources. Area sources were similarly modeled. There are some problems associated with this approach to model linear light sources. For instance, a large number of point sources must be used or sampling problems will ensue.
Reference: [Warn83] <author> Warn, </author> <title> D.R., "Lighting Controls for Synthetic Images", </title> <journal> Computer Graphics, (Proc. </journal> <volume> SIG-GRAPH 83), Vol. 17, No. 3, </volume> <month> July </month> <year> 1983, </year> <pages> pp. </pages> <month> 13-21. </month> <title> Plate 1: A sphere under 7 point light sources Plate 2: A sphere under a linear light source Plate 3: A typical cafeteria lit by 12 linear light sources Plate 4: A desk under a linear light source </title>
Reference-contexts: Unfortunately, they are difficult to use creatively. Researchers have introduced modifications to the intensity distribution of point sources that give the designer more creative freedom. We outline some of these attempts below. Warn <ref> [Warn83] </ref> attempts to create more realistic light sources by mimicking the lights used by photographers. His extensions include making the intensity of the light source a function of direction (to produce spotlights) and providing flaps that can cut off the light in certain directions.
References-found: 16

