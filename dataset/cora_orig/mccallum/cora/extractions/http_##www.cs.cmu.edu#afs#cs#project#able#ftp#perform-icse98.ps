URL: http://www.cs.cmu.edu/afs/cs/project/able/ftp/perform-icse98.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs/project/able/www/paper_abstracts/perform-icse98.html
Root-URL: 
Email: sprite+@cs.cmu.edu  garlan+@cs.cmu.edu  
Phone: (412) 268-8101  (412) 268-5056  
Title: Architecture-Based Performance Analysis  
Author: Bridget Spitznagel David Garlan 
Keyword: Software architecture, software performance, queueing networks, design analysis, architecture analysis tools  
Address: 5000 Forbes Ave. Pittsburgh, PA 15213 USA  5000 Forbes Ave. Pittsburgh, PA 15213 USA  
Affiliation: School of Computer Science Carnegie Mellon University  School of Computer Science Carnegie Mellon University  
Abstract: A software architecture should expose important system properties for consideration and analysis. Performance-related properties are frequently of interest in determining the acceptability of a given software design. In this paper we show how queueing network modeling can be adapted to support performance analysis of software architectures. We also describe a tool for transforming a software architecture in a particular style into a queueing network and analyzing its performance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Abd-Allah. </author> <title> Extending reliability block diagrams to software architectures. </title> <type> Technical Report USC-CSE-97-501, </type> <institution> University of Southern Califor-nia, </institution> <month> March? </month> <year> 1997. </year>
Reference-contexts: As we have noted, several issues must be resolved in order to do this. The second area is architecture-based analysis. Architecture-based static analysis is an important and growing area. Types of analyses include real-time systems in Unicon [10] and Aesop [3], component-connector protocol compatibility [2], reliability block diagrams <ref> [1] </ref>, and adaptability in SAAM [6, 7]. Our adaptation of queueing network modeling adds to the repertoire of available static analysis tools, complementing the growing body of architecture-based notations and toolsets.
Reference: [2] <author> R. Allen and D. Garlan. </author> <title> A formal basis for architectural connection. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <month> July </month> <year> 1997. </year>
Reference-contexts: As we have noted, several issues must be resolved in order to do this. The second area is architecture-based analysis. Architecture-based static analysis is an important and growing area. Types of analyses include real-time systems in Unicon [10] and Aesop [3], component-connector protocol compatibility <ref> [2] </ref>, reliability block diagrams [1], and adaptability in SAAM [6, 7]. Our adaptation of queueing network modeling adds to the repertoire of available static analysis tools, complementing the growing body of architecture-based notations and toolsets.
Reference: [3] <author> D. Garlan, R. Allen, and J. Ockerbloom. </author> <title> Exploiting style in architectural design environments. </title> <booktitle> In Proceedings of SIGSOFT'94: The Second ACM SIG-SOFT Symposium on the Foundations of Software Engineering, </booktitle> <pages> pages 179-185. </pages> <publisher> ACM Press, </publisher> <month> Decem-ber </month> <year> 1994. </year>
Reference-contexts: From a performance standpoint, the second option appears to be the better choice; other factors such as expense may also be important in making the final de cision. (cf. Section 4.3) 6 IMPLEMENTATION STATUS The distributed message passing style described above has been implemented as a style in Aesop <ref> [3] </ref>. The basic component type is a Process, and the connector type is a MessageStream. MessageStreams are directional. <p> As we have noted, several issues must be resolved in order to do this. The second area is architecture-based analysis. Architecture-based static analysis is an important and growing area. Types of analyses include real-time systems in Unicon [10] and Aesop <ref> [3] </ref>, component-connector protocol compatibility [2], reliability block diagrams [1], and adaptability in SAAM [6, 7]. Our adaptation of queueing network modeling adds to the repertoire of available static analysis tools, complementing the growing body of architecture-based notations and toolsets.
Reference: [4] <author> D. Garlan, R. Monroe, and D. Wile. </author> <title> ACME : An architecture description interchange language. </title> <booktitle> In Proceedings of CASCON' 97, </booktitle> <month> November </month> <year> 1997. </year>
Reference-contexts: An example with three Processes (a client, one overloaded server and one server replicated four times) and one MessageStream is shown in Figure 5. The analysis tool automatically performs the transformations described above. It reads in a text file containing an architecture described in Acme <ref> [4] </ref>, and outputs an Acme description annotated with the results of the performance analysis. Aesop exports and imports these Acme descriptions (Figure 4). In a typical scenario, the user begins the iterative design process by constructing the top level design.
Reference: [5] <author> R. Jain. </author> <title> The art of computer systems performance analysis. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, NY, </address> <year> 1991. </year>
Reference-contexts: The first area is classical results in queueing theory. A great deal of work has been done in queueing theory, and many texts are available (e.g., Lazowska [8], Sauer [9], Jain <ref> [5] </ref>). We build on this work by applying it in a different domain and interpreting the results in the software design world. As we have noted, several issues must be resolved in order to do this. The second area is architecture-based analysis.
Reference: [6] <author> R. Kazman, G. Abowd, L. Bass, and P. Clements. </author> <title> Scenario-based analysis of software architecture. </title> <journal> IEEE Software, </journal> <pages> pages 47-55, </pages> <month> November </month> <year> 1996. </year>
Reference-contexts: The second area is architecture-based analysis. Architecture-based static analysis is an important and growing area. Types of analyses include real-time systems in Unicon [10] and Aesop [3], component-connector protocol compatibility [2], reliability block diagrams [1], and adaptability in SAAM <ref> [6, 7] </ref>. Our adaptation of queueing network modeling adds to the repertoire of available static analysis tools, complementing the growing body of architecture-based notations and toolsets.
Reference: [7] <author> R. Kazman, L. Bass, G. Abowd, and M. Webb. </author> <title> SAAM : A method for analyzing the properties of software architectures. </title> <booktitle> In Proceedings of the 16th International Conference on Software Engineering, </booktitle> <pages> pages 81-90, </pages> <address> Sorrento, Italy, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: The second area is architecture-based analysis. Architecture-based static analysis is an important and growing area. Types of analyses include real-time systems in Unicon [10] and Aesop [3], component-connector protocol compatibility [2], reliability block diagrams [1], and adaptability in SAAM <ref> [6, 7] </ref>. Our adaptation of queueing network modeling adds to the repertoire of available static analysis tools, complementing the growing body of architecture-based notations and toolsets.
Reference: [8] <author> E. D. Lazowska et al. </author> <title> Quantitative system performance : Computer system analysis using queueing network models. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1984. </year>
Reference-contexts: A service center provides some necessary service. Examples include a bank teller, hardware device, or database. Each service center has an associated 1 For a more detailed treatment see Lazowska <ref> [8] </ref> or Sauer [9]. queue containing jobs to be processed by that service center. A service center may also be "replicated" with degree m. A replicated service center represents m identical providers of service, which draw their jobs from a single queue. <p> The first area is classical results in queueing theory. A great deal of work has been done in queueing theory, and many texts are available (e.g., Lazowska <ref> [8] </ref>, Sauer [9], Jain [5]). We build on this work by applying it in a different domain and interpreting the results in the software design world. As we have noted, several issues must be resolved in order to do this. The second area is architecture-based analysis.
Reference: [9] <author> C. H. Sauer and K. M. Chandy. </author> <title> Computer systems performance modeling. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1981. </year>
Reference-contexts: A service center provides some necessary service. Examples include a bank teller, hardware device, or database. Each service center has an associated 1 For a more detailed treatment see Lazowska [8] or Sauer <ref> [9] </ref>. queue containing jobs to be processed by that service center. A service center may also be "replicated" with degree m. A replicated service center represents m identical providers of service, which draw their jobs from a single queue. <p> The first area is classical results in queueing theory. A great deal of work has been done in queueing theory, and many texts are available (e.g., Lazowska [8], Sauer <ref> [9] </ref>, Jain [5]). We build on this work by applying it in a different domain and interpreting the results in the software design world. As we have noted, several issues must be resolved in order to do this. The second area is architecture-based analysis.
Reference: [10] <author> M. Shaw, R. DeLine, D. V. Klein, T. L. Ross, D. M. Young, and G. Zelesnik. </author> <title> Abstractions for software architecture and tools to support them. </title> <journal> IEEE Transactions on Software Engineering, Special Issue on Software Architecture, </journal> <volume> 21(4) </volume> <pages> 314-335, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: As we have noted, several issues must be resolved in order to do this. The second area is architecture-based analysis. Architecture-based static analysis is an important and growing area. Types of analyses include real-time systems in Unicon <ref> [10] </ref> and Aesop [3], component-connector protocol compatibility [2], reliability block diagrams [1], and adaptability in SAAM [6, 7]. Our adaptation of queueing network modeling adds to the repertoire of available static analysis tools, complementing the growing body of architecture-based notations and toolsets.
References-found: 10

