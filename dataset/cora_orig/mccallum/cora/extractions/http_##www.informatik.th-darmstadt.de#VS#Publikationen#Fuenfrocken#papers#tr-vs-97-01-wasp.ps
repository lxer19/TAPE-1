URL: http://www.informatik.th-darmstadt.de/VS/Publikationen/Fuenfrocken/papers/tr-vs-97-01-wasp.ps
Refering-URL: http://www.informatik.th-darmstadt.de/~fuenf/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: fuenf@informatik.th-darmstadt.de  
Title: Infrastructure for Web-Agent-based Service Providing  
Author: Stefan Funfrocken 
Keyword: mobile agents, service providing, World Wide Web, security, infrastructure, mobile agents application  
Address: Alexanderstr. 10, D 64283 Darmstadt, Germany  
Affiliation: Department of Computer Science, Darmstadt University of Technology,  
Note: An  
Abstract: Technical Report TR-VS-97-01 Abstract. Mobile agents are a new paradigm in distributed computing. In this paper we describe a platform, which supports Web agents | mobile agents that live in web servers and communicate with users through web browsers. Our belief is that this World Wide Web scenario identifies an application area for which the mobile agent abstraction which is well-suited. We present the state of implementation, and we give an outlook on our future work. 
Abstract-found: 1
Intro-found: 1
Reference: [Arn96] <author> Arnold K., Gosling J., </author> <title> The Java Programming Language, </title> <publisher> Addison-Wesley, </publisher> <address> 1996 (ISBN 0-201-63455-4) </address>
Reference-contexts: With this in mind, the Web agent abstraction (i.e., mobile agents that live in web servers) is most apporpriate. As an implementation language for our system and for agent-programming, we chose Sun's web language Java <ref> [Arn96] </ref>, which already provides code shipping by the way of applets and persistent, movable objects by the means of object serialization. Because of this, we found that it is very easy to implement a system that provides rudimentary mobile agent functionality.
Reference: [Bai96] <author> Baird-Smith A., </author> <title> Jigsaw Java HTTP Server, by World Wide Web Consortium, </title> <address> http://www.w3.org/pub/WWW/Jigsaw/ </address>
Reference-contexts: In this way, the code of web servers does not need to be changed. Of course this implies that the server has to provide a well-defined interface like CGI, Jeeves' serveletts [Jee96], or Jigsaw's filter interface <ref> [Bai96] </ref>, which is able to pass all relevant information to the SAE 2 . Figure 1 shows the overall architecture of the WASP infrastructure which consists of the user's web browser, the web server, and the server's SAE. <p> Our web server supports the servelett interface as well. Additionally, serveletts can also be sent to the server over the network. Compared to Jigsaw <ref> [Bai96] </ref>, our server has a more fine granular access restriction scheme which originates from the needs for web-services and is enhanced by the Web agent server module.
Reference: [Bor93] <author> Borenstein N., Freed N., </author> <title> MIME (Multipurpose Internet Mail Extensions), Network Working Group, </title> <address> RFC1521, </address> <year> 1993 </year>
Reference-contexts: In this way, foreign agents interact with the local system through a trusted third party. Currently there is only one language which was designed for use as an agent language: Telescript by General Magic [Whi94]. There are several interpreted languages which offer a so-called `secure interpreter', like safe-tcl <ref> [Bor93] </ref> or safe-python [Maj96]. Most of them, however, lack agent-related language constructs and concepts (e.g. a language-provided command to initiate agent transportation, or security concepts) and depend on external libraries for such functionality. <p> The agent programmer has to fill this method in such a way that its agent will execute the correct code depending on its internal state. Inside the post request, Web agents are transported as MIME <ref> [Bor93] </ref> message. If the server requires any authentication to perform the post request, the agent has to provide that information at the time it is sent (i.e., when the post request is constructed).
Reference: [Bor93] <author> Borenstein, N., </author> <title> EMail with a Mind of Its Own: The Safe-Tcl Language for Enabled Mail, </title> <publisher> ftp://ftp.fv.com/pub/code/other/safe-tc.tar </publisher>
Reference-contexts: In this way, foreign agents interact with the local system through a trusted third party. Currently there is only one language which was designed for use as an agent language: Telescript by General Magic [Whi94]. There are several interpreted languages which offer a so-called `secure interpreter', like safe-tcl <ref> [Bor93] </ref> or safe-python [Maj96]. Most of them, however, lack agent-related language constructs and concepts (e.g. a language-provided command to initiate agent transportation, or security concepts) and depend on external libraries for such functionality. <p> The agent programmer has to fill this method in such a way that its agent will execute the correct code depending on its internal state. Inside the post request, Web agents are transported as MIME <ref> [Bor93] </ref> message. If the server requires any authentication to perform the post request, the agent has to provide that information at the time it is sent (i.e., when the post request is constructed).
Reference: [Gen92] <author> Gensereth M.R, Ketchpel S.P., </author> <title> Software Agents, </title> <journal> Communications of the ACM, Vol.37, </journal> <volume> No.7, </volume> <pages> pp 48|53, </pages> <month> July </month> <year> 1994 </year>
Reference: [Gra96] <author> Gray R.S., </author> <title> Agent Tcl: A flexible and secure mobile-agent system, </title> <booktitle> Proceedings of the Fourth Annual Tcl/Tk Workshop, </booktitle> <address> Monteray CA, </address> <year> 1996, </year> <note> http://www.cs.dartmouth.edu/agent/papers.html </note>
Reference-contexts: Interfaces to emerging electronic cash systems will be provided through Java's electronic commerce API, which will be available soon. 5 Related Work There are several research projects that deal with the implementation of general purpose agent systems [Pei95] [Joh95] [Lin95] <ref> [Gra96] </ref>, some of them are using Java as an implementation language [Hoh95] [Lan96] [Mil96]. All these systems have a different focus: they aim at a platform supporting agents in general, which includes agent communication and agent control.
Reference: [Hoh95] <author> Hohl F., </author> <title> Konzeption eines einfachen Agentensystems und Implementation eines Prototyps, </title> <type> Diploma Thesis, </type> <institution> Universitat Stuttgart, Fakultat Informatik, Diplomarbeit Nr. </institution> <month> 1267 </month> <year> (1995) </year>
Reference-contexts: Because of this, we found that it is very easy to implement a system that provides rudimentary mobile agent functionality. This is also supported by the fact that there are several other research projects that deal with Java-based mobile agent systems like Mole <ref> [Hoh95] </ref>, Aglets [Lan96], Java-to-go [Wei96], and MOA [Mil96]. <p> We consider this not to be a conceptual drawback 6 , although this puts some burden on the programmer of the Web agent. As other systems that use this scheme of migration (Mole <ref> [Hoh95] </ref>, Aglets [Lan96], FFM [Lin95], Tacoma [Joh95]), we provide a special method which is called by the target SAE when it restarts the flow of control for a migrated Web agent. <p> to emerging electronic cash systems will be provided through Java's electronic commerce API, which will be available soon. 5 Related Work There are several research projects that deal with the implementation of general purpose agent systems [Pei95] [Joh95] [Lin95] [Gra96], some of them are using Java as an implementation language <ref> [Hoh95] </ref> [Lan96] [Mil96]. All these systems have a different focus: they aim at a platform supporting agents in general, which includes agent communication and agent control. So far, this is of minor interest to us, although it represents a general concern in our project.
Reference: [Jee96] <author> Jeeves Team, </author> <title> Overview of the Java Http Server Architecture, Part of the Jeeves Alpha2 distribution, Sun Microsystems, </title> <year> 1996 </year>
Reference-contexts: In this way, the code of web servers does not need to be changed. Of course this implies that the server has to provide a well-defined interface like CGI, Jeeves' serveletts <ref> [Jee96] </ref>, or Jigsaw's filter interface [Bai96], which is able to pass all relevant information to the SAE 2 . Figure 1 shows the overall architecture of the WASP infrastructure which consists of the user's web browser, the web server, and the server's SAE. <p> We are currently investigating what type of agents that come from other Java based agent systems could be integrated in our system. Concerning our Web server implementation, there exist several other Web servers based on Java. The Jeeves <ref> [Jee96] </ref> project currently aims at the development of a server-side-include interface called `serveletts' which enables servers to load and execute CGI-like Java programs directly into the Java virtual machine executing the server code.
Reference: [Joh95] <author> Johanson D., van Renesse R., Schneider F., </author> <title> An Introduction to the TACOMA Distributed System, </title> <institution> University of Tromso, Institute of Mathematical and Physical Science, Department of Computer Science, </institution> <type> CS Technical Report 95-23, </type> <month> June </month> <year> 1995 </year>
Reference-contexts: We consider this not to be a conceptual drawback 6 , although this puts some burden on the programmer of the Web agent. As other systems that use this scheme of migration (Mole [Hoh95], Aglets [Lan96], FFM [Lin95], Tacoma <ref> [Joh95] </ref>), we provide a special method which is called by the target SAE when it restarts the flow of control for a migrated Web agent. The agent programmer has to fill this method in such a way that its agent will execute the correct code depending on its internal state. <p> Interfaces to emerging electronic cash systems will be provided through Java's electronic commerce API, which will be available soon. 5 Related Work There are several research projects that deal with the implementation of general purpose agent systems [Pei95] <ref> [Joh95] </ref> [Lin95] [Gra96], some of them are using Java as an implementation language [Hoh95] [Lan96] [Mil96]. All these systems have a different focus: they aim at a platform supporting agents in general, which includes agent communication and agent control.
Reference: [Lan96] <author> Lange D., Chang D.T., </author> <title> IBM Aglets Workbench Programming Mobile Agents in Java, </title> <type> White Paper, </type> <institution> IBM Corporation, </institution> <address> Japan, </address> <month> August </month> <year> 1996, </year> <note> http://www.trl.ibm.co.jp/aglets/ </note>
Reference-contexts: Because of this, we found that it is very easy to implement a system that provides rudimentary mobile agent functionality. This is also supported by the fact that there are several other research projects that deal with Java-based mobile agent systems like Mole [Hoh95], Aglets <ref> [Lan96] </ref>, Java-to-go [Wei96], and MOA [Mil96]. <p> We consider this not to be a conceptual drawback 6 , although this puts some burden on the programmer of the Web agent. As other systems that use this scheme of migration (Mole [Hoh95], Aglets <ref> [Lan96] </ref>, FFM [Lin95], Tacoma [Joh95]), we provide a special method which is called by the target SAE when it restarts the flow of control for a migrated Web agent. <p> emerging electronic cash systems will be provided through Java's electronic commerce API, which will be available soon. 5 Related Work There are several research projects that deal with the implementation of general purpose agent systems [Pei95] [Joh95] [Lin95] [Gra96], some of them are using Java as an implementation language [Hoh95] <ref> [Lan96] </ref> [Mil96]. All these systems have a different focus: they aim at a platform supporting agents in general, which includes agent communication and agent control. So far, this is of minor interest to us, although it represents a general concern in our project.
Reference: [Lin95] <author> Lingnau A., Drobnik O., Domel P., </author> <title> An HTTP-based Infrastructure for Mobile Agents, </title> <booktitle> World Wide Web Journal Fourth International World Wide Web Conference Proceedings, </booktitle> <address> Boston, MA, </address> <month> Dec 11-14, </month> <year> 1995 </year>
Reference-contexts: We consider this not to be a conceptual drawback 6 , although this puts some burden on the programmer of the Web agent. As other systems that use this scheme of migration (Mole [Hoh95], Aglets [Lan96], FFM <ref> [Lin95] </ref>, Tacoma [Joh95]), we provide a special method which is called by the target SAE when it restarts the flow of control for a migrated Web agent. <p> Interfaces to emerging electronic cash systems will be provided through Java's electronic commerce API, which will be available soon. 5 Related Work There are several research projects that deal with the implementation of general purpose agent systems [Pei95] [Joh95] <ref> [Lin95] </ref> [Gra96], some of them are using Java as an implementation language [Hoh95] [Lan96] [Mil96]. All these systems have a different focus: they aim at a platform supporting agents in general, which includes agent communication and agent control.
Reference: [Maj96] <author> Majewski S.D., </author> <title> Distributed Programming: Agentware, Componentware, Distributed Objects, </title> <booktitle> Notes for the discussion on Safe-Python at the NIST Python Workshop, </booktitle> <year> 1994, </year> <note> http://minsky.med.virginia.edu/sdm7g/Projects/Python/SafePython.html </note>
Reference-contexts: Currently there is only one language which was designed for use as an agent language: Telescript by General Magic [Whi94]. There are several interpreted languages which offer a so-called `secure interpreter', like safe-tcl [Bor93] or safe-python <ref> [Maj96] </ref>. Most of them, however, lack agent-related language constructs and concepts (e.g. a language-provided command to initiate agent transportation, or security concepts) and depend on external libraries for such functionality.
Reference: [Mil96] <author> Milojicic D., Condict M., Reynolds, F., Bolinger D., Dale P., </author> <title> Mobile Objects and Agents (MOA) Project, OSF, position paper, </title> <booktitle> "Distributed Object Computing on the Internet" Advanced Topics Workshop, Second USENIX Conference on Object Oriented Technologies and Systems (COOTS), </booktitle> <address> http://www.osf.org/RI/DMO/dmo.htm </address>
Reference-contexts: This is also supported by the fact that there are several other research projects that deal with Java-based mobile agent systems like Mole [Hoh95], Aglets [Lan96], Java-to-go [Wei96], and MOA <ref> [Mil96] </ref>. <p> electronic cash systems will be provided through Java's electronic commerce API, which will be available soon. 5 Related Work There are several research projects that deal with the implementation of general purpose agent systems [Pei95] [Joh95] [Lin95] [Gra96], some of them are using Java as an implementation language [Hoh95] [Lan96] <ref> [Mil96] </ref>. All these systems have a different focus: they aim at a platform supporting agents in general, which includes agent communication and agent control. So far, this is of minor interest to us, although it represents a general concern in our project.
Reference: [Net96] <institution> Network Wizards, Internet Domaine Survey http://www.nw.com/zone/WWW/report.html </institution>
Reference-contexts: Without any reasonable dissemination of mobile agent systems, mobile agent technology will not have the chance of proving its power. On the other hand, the World Wide Web is still growing at an exponential rate <ref> [Net96] </ref>, and buzzwords like `web centric computing' or `Intranet' promote traditional Internet technology everywhere. There we have a widespread, well-accepted architecture, to which more and more existing, traditional data processing systems and applications (e.g. databases, newspapers, financial portfolio applications) are adapted and integrated.
Reference: [Pei95] <author> Peine H., </author> <title> The Ara Projekt, </title> <institution> University of Kaiserslautern, </institution> <note> http://www.uni-kl.de/AG-Nehmer/Ara/ara.html </note>
Reference-contexts: Since we use object serialization, the migration of Web agents is not transparent to the agent as for example in Telescript [Whi94] or ARA <ref> [Pei95] </ref>: the flow of control cannot directly be reestablished to that point in the code of the Web agent where it executed the go method. We consider this not to be a conceptual drawback 6 , although this puts some burden on the programmer of the Web agent. <p> Interfaces to emerging electronic cash systems will be provided through Java's electronic commerce API, which will be available soon. 5 Related Work There are several research projects that deal with the implementation of general purpose agent systems <ref> [Pei95] </ref> [Joh95] [Lin95] [Gra96], some of them are using Java as an implementation language [Hoh95] [Lan96] [Mil96]. All these systems have a different focus: they aim at a platform supporting agents in general, which includes agent communication and agent control.
Reference: [Sch94] <author> Schneier B., </author> <title> Applied Cryptograhpy, </title> <publisher> Wiley & Sons, </publisher> <year> 1994 </year>
Reference: [Wei96] <author> Weiyi L., Messerschmitt D., Java-To-Go, </author> <title> Itinerative Computing Using Java, </title> <institution> University of California at Berkeley, Department of Electrical Engineering and Computer Sciences, </institution> <note> http://ptolemy.eecs.berkeley.edu/dgm/javatools/java-to-go/ </note>
Reference-contexts: Because of this, we found that it is very easy to implement a system that provides rudimentary mobile agent functionality. This is also supported by the fact that there are several other research projects that deal with Java-based mobile agent systems like Mole [Hoh95], Aglets [Lan96], Java-to-go <ref> [Wei96] </ref>, and MOA [Mil96].
Reference: [Whi94] <author> White J.E., </author> <title> Telescript Technology: The Foundation for the Electronic Marketplace, Whitepaper by General Magic, </title> <publisher> Inc, </publisher> <address> Sunnyvale, CA, USA </address>
Reference-contexts: In this way, foreign agents interact with the local system through a trusted third party. Currently there is only one language which was designed for use as an agent language: Telescript by General Magic <ref> [Whi94] </ref>. There are several interpreted languages which offer a so-called `secure interpreter', like safe-tcl [Bor93] or safe-python [Maj96]. Most of them, however, lack agent-related language constructs and concepts (e.g. a language-provided command to initiate agent transportation, or security concepts) and depend on external libraries for such functionality. <p> Most of them, however, lack agent-related language constructs and concepts (e.g. a language-provided command to initiate agent transportation, or security concepts) and depend on external libraries for such functionality. When the mobile agent concept first was promoted by General Magic <ref> [Whi94] </ref> with its Tele-script Language, there was much hype about the new paradigm. Since General Magic had a very restrictive policy about implementation information of their system, several research groups began to build their own agent systems providing a general infrastructure for mobile-agent-enhanced applications. <p> Since we use object serialization, the migration of Web agents is not transparent to the agent as for example in Telescript <ref> [Whi94] </ref> or ARA [Pei95]: the flow of control cannot directly be reestablished to that point in the code of the Web agent where it executed the go method.
References-found: 18

