URL: http://www.cis.ohio-state.edu/~ren/heusea.ps
Refering-URL: http://www.cis.ohio-state.edu/~ren/
Root-URL: http://www.cis.ohio-state.edu
Title: Fast Search Algorithms for Weight-partitioned Signature Files  
Author: Liming Ren Dik Lun Lee 
Keyword: General Terms: Partitioning, Performance, Signature Additional Key words and Phrases: Access method, information retrieval, superimposed, weight-partitioned.  
Date: April 29, 1998  
Affiliation: The Ohio State University  University of Science and Technology, Hong Kong  
Abstract: This paper is a continuation of work started in [7]. We try two approaches to improve the response time of weight-partitioned signature files. In the first approach, we propose several fast heuristic search algorithms to reduce the percentage of signatures that needs to be searched. On average they achieve search reduction ratios in the range of 40% to 65% without sacrificing any precision and recall for top documents. In the second approach, we try to reduce the total size of the signature files, since space is speed. We establish a coarse ranking by first searching signature files; then we do exact text matching on the top documents obtained. Our results show that comparable precision can be achieved with at least 37% less storage overhead. For long document collection, we achieve the same precision and recall with 75% less of storage overhead. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Buckley, C., and Lewit, A. F. </author> <title> Optimization of inverted vector searches. </title> <booktitle> In Proceedings of the ACM SIGIR Conference (1985), </booktitle> <pages> pp. 97-110. </pages>
Reference-contexts: If the search can be terminated early, we have better response time since short postings lists are processes first and the unprocessed lists are long. It has been found <ref> [1, 16] </ref> that the upperbound search algorithm is too conservative to yield any significant performance gain for inverted files. <p> 0.3 0.4 0.5 percentage of signatures skipped storage overhead (%) OPT (HL) EXP (HL) 0 0.1 0.2 0.3 0.4 0.5 percentage of signatures skipped storage overhead (%) OPT (HL) EXP (HL) Some variations of the upperbound search algorithm have been proposed to improve retrieval efficiency by relaxing the stopping criterion <ref> [1] </ref>, or applying probability on the upper bound computation [9, 15] Again it has been found [16] that those modified upperbound search algorithms fail to yield any real performance gain and the extra computation overhead induced to calculate probabilities is very expensive.
Reference: [2] <author> CROFT, W. B., and SAVINO, P. </author> <title> Implementing ranking strategies using text signatures. </title> <journal> ACM Trans. Off. Inf. Syst. </journal> <volume> 6, </volume> <month> 1 (Jan., </month> <year> 1988), </year> <pages> 42-62. </pages>
Reference-contexts: A signature encodes the presence of terms in a text. Therefore, it can easily support the Boolean retrieval model. However, in order to support document ranking, term frequencies must be stored; this is difficult to do on signatures, which are simple bit vectors. Croft and Savino <ref> [2] </ref> provide a ranking technique that combines the inverse document frequency with an estimated term frequency. The retrieval effectiveness suffers because of the approximation of the term frequency.
Reference: [3] <author> HARMAN, D. </author> <title> Overview of the first text retrieval conference. </title> <booktitle> In Proceedings of the 16th Annual International ACM/SIGIR Conference on Research and Development in Information Retrieval (Pittsburgh, </booktitle> <address> Pa, </address> <month> June) </month> <year> (1993a), </year> <booktitle> ACM, </booktitle> <pages> pp. 36-47. </pages>
Reference: [4] <author> HARMAN, D. </author> <title> Overview of the second text retrieval conference (trec-2). </title> <booktitle> In Proceedings of the 2nd Text Retrieval Conference (Gaithersburg, </booktitle> <address> Md., </address> <month> Aug., </month> <year> 1993b), </year> <pages> pp. 1-20. 20 </pages>
Reference-contexts: They will be introduced when they are used. In our research, we use two data collections, to test and verify our results. The two data collections are the CACM collection and a document subset extracted from the TREC collection <ref> [4] </ref>. A short description of the two collections are given in the appendix. 2 Fast Heuristic Search Algorithms There have been extensive research done on how to improve the search reduction ratio. Most notable ones are key based partitioning methods like the Floating-key Partitioning [5, 6] and Quick Filter [10].
Reference: [5] <author> LEE, D. L., and LENG, C.-W. </author> <title> Partitioned signature files: Design issues and performance evaluation. </title> <booktitle> ACM TOIS 7, </booktitle> <month> 2 (April, </month> <year> 1989), </year> <pages> 158-180. </pages>
Reference-contexts: A short description of the two collections are given in the appendix. 2 Fast Heuristic Search Algorithms There have been extensive research done on how to improve the search reduction ratio. Most notable ones are key based partitioning methods like the Floating-key Partitioning <ref> [5, 6] </ref> and Quick Filter [10]. These methods have achieved remarkable search space reduction ratios with little overhead. The reduction ratio ranges anywhere between 15% to 85% depending on query signature. Many partitions are filtered out by the key comparison during search. <p> However, there are still many interesting and promising research areas that could be investigated to extend the current work. The key-based partition methods developed by Lee and Leng <ref> [5] </ref> and several search algorithms 17 0 0.1 0.2 0.3 0.4 average precision storage overhead (%) no search search top 50 search top 100 search top 200 zero false drop 0 0.1 0.2 0.3 0.4 average precision storage overhead (%) no search search top 50 search top 100 search top 200 <p> Interestingly, Lee and Leng's methods <ref> [5, 6] </ref> and our new fast search algorithms are not mutually exclusive. We are investigating heuristics to integrate them together to improve search performance and reduce the effect of false drops. A possible scenario is described as follows.
Reference: [6] <author> LEE, D. L., and LENG, C.-W. </author> <title> A partitioned signature for multi-attribute and text retrieval. </title> <booktitle> In Proceedings of 6 th international conference on data engineering (Los Angeles, </booktitle> <address> CA, </address> <month> Feb., </month> <year> 1990), </year> <pages> pp. 389-397. </pages>
Reference-contexts: A short description of the two collections are given in the appendix. 2 Fast Heuristic Search Algorithms There have been extensive research done on how to improve the search reduction ratio. Most notable ones are key based partitioning methods like the Floating-key Partitioning <ref> [5, 6] </ref> and Quick Filter [10]. These methods have achieved remarkable search space reduction ratios with little overhead. The reduction ratio ranges anywhere between 15% to 85% depending on query signature. Many partitions are filtered out by the key comparison during search. <p> Interestingly, Lee and Leng's methods <ref> [5, 6] </ref> and our new fast search algorithms are not mutually exclusive. We are investigating heuristics to integrate them together to improve search performance and reduce the effect of false drops. A possible scenario is described as follows.
Reference: [7] <author> LEE, D. L., and Ren, L. </author> <title> Document ranking on weight-partitioned signature files. </title> <journal> ACM Transactions on Information Systems 14, </journal> <month> 2 (April, </month> <year> 1996), </year> <pages> 109-137. </pages>
Reference-contexts: text database word signatures: text 001 000 110 010 database 000 010 101 001 block signature (_) 001 010 111 011 Queries Query Signatures Results 1) retrieval 010 001 000 011 no match 2) database 000 010 101 001 match 3) information 001 000 111 000 false drop research result <ref> [7, 16] </ref> enables successful encoding of term weigh in the signature files. Signature file based systems are able to achieve retrieval effectiveness comparable to inverted file based systems with far less memory overhead. Signature file will play an important role in information retrieval as it gets better with new improvements. <p> Therefore, the time spent on searching the signature file is proportional to the database size, and performance becomes a major concern for large databases. 1.3 Weight-partitioned Signature files Some recent research on signature files has addressed these problems. Lee et al. <ref> [7, 17] </ref> proposed a method to represent the exact values of term frequencies by using a separate signature file for terms with the same term frequency. It is done by first grouping terms with the same term frequency in a document. <p> The exponential method uses significant long signature lengths for high tf groups. And the optimal generation method may use different (m; s; w) values for different term frequency groups. It has been shown that the optimal signature generation method <ref> [7] </ref> utilizes the space more efficiently 4 D i i th document in the database. <p> U (D) Upperbound of S (D). w (w i ) Number of bits set to 1 for a word (in tf i ). w Q;j Weight of term j in query Q. Table 1: Main symbols used in this paper when signature lengths are selected properly. Just as in <ref> [7] </ref>, these three methods will be referred to as optimal method (OPT), uniform method (U) and exponential method (EXP). Lee and Ren also showed that the HL (high to low) search strategy consistently out perform LH (low to high). It yielded less false drops and thus better performance. <p> Lee and Ren also showed that the HL (high to low) search strategy consistently out perform LH (low to high). It yielded less false drops and thus better performance. Details about these methods and proofs can be found in <ref> [7] </ref>. In this paper, we study search algorithms which target weight-partitioned signature files. We want to speed up the search process by either reducing the percentage of signatures searched or reducing the total size of the signature file. For convenience, we collect notations used in this paper into table 1. <p> Small signature files mean fast response time, even though there is little need to squeeze for storage saving now days. It is safe to say size is speed. From the performance figures presented in <ref> [7] </ref>, we can see that the average precisions at low storage overhead (e.g., 10-20%) are unacceptably low. The average precision is less than 60% of the false drop free precision when storage overhead is between 10-20%. <p> The difference (degradation) for average precision is less than 1%, which is a small trade-off. Thus searching signature files from SF n to SF 2 plus searching top documents yields good precision with low storage overhead. From <ref> [7] </ref>, we know that it takes 40% of space overhead to achieve the precision and recall level of false drop free searching. The storage overhead difference between 10% and 40% represents a 75% search space reduction.
Reference: [8] <author> Mohan, K. C., and Willett, P. </author> <title> Nearest neighbor searching in serial files using text signatures. </title> <journal> Journal of Info. Science 11 (1985), </journal> <pages> 31-39. </pages>
Reference-contexts: In this section, we introduce an upperbound search algorithm which achieves good reduction ratio consistently. The concept of upperbound search algorithm <ref> [8, 9, 13, 15, 16] </ref> has been employed in inverted file based systems with various degrees of success. <p> To be a viable document retrieval model, fast search algorithms have to be studied and significantly better search reduction ratio has to be achieved. 2.2 Upperbound Search Algorithm in Inverted File First we present brief review of upperbound search algorithm in inverted file. Detailed information can be found in <ref> [8, 9, 15, 13, 16] </ref>. The upperbound search algorithm is used to search for certain prespecified, say top T , top documents in a document collection.
Reference: [9] <author> Perry, S. A, and Willett, P. </author> <title> A review of the use of inverted files for best match searching in information retrieval system. </title> <journal> Journal of Info. Science 6 (1983), </journal> <pages> 59-66. </pages>
Reference-contexts: In this section, we introduce an upperbound search algorithm which achieves good reduction ratio consistently. The concept of upperbound search algorithm <ref> [8, 9, 13, 15, 16] </ref> has been employed in inverted file based systems with various degrees of success. <p> To be a viable document retrieval model, fast search algorithms have to be studied and significantly better search reduction ratio has to be achieved. 2.2 Upperbound Search Algorithm in Inverted File First we present brief review of upperbound search algorithm in inverted file. Detailed information can be found in <ref> [8, 9, 15, 13, 16] </ref>. The upperbound search algorithm is used to search for certain prespecified, say top T , top documents in a document collection. <p> (%) OPT (HL) EXP (HL) 0 0.1 0.2 0.3 0.4 0.5 percentage of signatures skipped storage overhead (%) OPT (HL) EXP (HL) Some variations of the upperbound search algorithm have been proposed to improve retrieval efficiency by relaxing the stopping criterion [1], or applying probability on the upper bound computation <ref> [9, 15] </ref> Again it has been found [16] that those modified upperbound search algorithms fail to yield any real performance gain and the extra computation overhead induced to calculate probabilities is very expensive.
Reference: [10] <author> RABITTI, F., Z., and TIBERIO, P. </author> <title> Dynamic partitioning of signature files. </title> <journal> ACM Trans. Inf. Syst. </journal> <volume> 9, </volume> <month> 4 (Oct., </month> <year> 1991), </year> <pages> 336-339. </pages>
Reference-contexts: A short description of the two collections are given in the appendix. 2 Fast Heuristic Search Algorithms There have been extensive research done on how to improve the search reduction ratio. Most notable ones are key based partitioning methods like the Floating-key Partitioning [5, 6] and Quick Filter <ref> [10] </ref>. These methods have achieved remarkable search space reduction ratios with little overhead. The reduction ratio ranges anywhere between 15% to 85% depending on query signature. Many partitions are filtered out by the key comparison during search.
Reference: [11] <author> ROBERTS, C. S. </author> <title> Partial-match retrieval via the method of superimposed codes. </title> <booktitle> In Proceedings of the IEEE (Dec., 1979), </booktitle> <volume> vol. 67, </volume> <pages> pp. 1624-1642. </pages>
Reference-contexts: The third case is a false drop. False drops are text blocks which the signature file identifies as containing the query terms (i.e., a match) but indeed they don't. They can be eliminated by further comparing the query terms with the text blocks. C. S. Roberts <ref> [11] </ref> proved that the false drop probability is minimized when the probability of any bit position set to 1 is 0.5. Compared to inverted files, the signature file approach has two major advantages. Its storage overhead can be controlled easily and in general is very low.
Reference: [12] <author> SALTON, G. </author> <title> Automatic Text Processing: The transformation, analysis, and retrieval of information by computer. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1989. </year>
Reference-contexts: This undoubtedly results in better performance. It is interesting to see how much performance gain we get. In the following discussion, I i (D) is used to denote the number of terms in document D with term frequency i. The Zipf Law can be mathematically approximated as <ref> [12] </ref> I i (D) = i (i + 1) From formula (1), we can get I n (D) n For simplicity, we assume that all signatures in [ n j=i S j are searched if a match is found in SF i , even though the match may occur at the
Reference: [13] <author> Smeaton, A. F., and C. J. van Rijsbergen. </author> <title> The nearest neighbor problem in information retrieval. an algorithm using upperbounds. </title> <booktitle> ACM SIGIR Forum 16 (1981), </booktitle> <pages> 83-87. </pages>
Reference-contexts: In this section, we introduce an upperbound search algorithm which achieves good reduction ratio consistently. The concept of upperbound search algorithm <ref> [8, 9, 13, 15, 16] </ref> has been employed in inverted file based systems with various degrees of success. <p> To be a viable document retrieval model, fast search algorithms have to be studied and significantly better search reduction ratio has to be achieved. 2.2 Upperbound Search Algorithm in Inverted File First we present brief review of upperbound search algorithm in inverted file. Detailed information can be found in <ref> [8, 9, 15, 13, 16] </ref>. The upperbound search algorithm is used to search for certain prespecified, say top T , top documents in a document collection.
Reference: [14] <author> STANFILE, C., and KAHLE, B. </author> <title> Parallel free-text search on the connection machine system. </title> <journal> Commun. ACM 29, </journal> <month> 12 (Dec., </month> <year> 1986), </year> <pages> 1229-1239. </pages>
Reference-contexts: Its structure is very simple. Thus, it has low processing overhead on insertion. Since signatures are conceptually organized as a sequential file, it is easy to partition a signature file for parallel processing <ref> [14] </ref>. 2 1.2 Problems with Signature Files However, the signature file method has some serious drawbacks which prevent it to be used in large and advanced IR systems effectively. Encoding Term Frequency in Signature Files First it is not easy to implement document ranking in signature files.
Reference: [15] <author> Weiss, S. F. </author> <title> A probabilistic algorithm for nearest neighbour searching. </title> <editor> R.N. Oddy, S. E. Robertson, C. J. van Rijsbergen and P. W. Williams, </editor> <publisher> Butterworths, </publisher> <address> London, </address> <year> 1981, </year> <pages> pp. 325-333. </pages>
Reference-contexts: In this section, we introduce an upperbound search algorithm which achieves good reduction ratio consistently. The concept of upperbound search algorithm <ref> [8, 9, 13, 15, 16] </ref> has been employed in inverted file based systems with various degrees of success. <p> To be a viable document retrieval model, fast search algorithms have to be studied and significantly better search reduction ratio has to be achieved. 2.2 Upperbound Search Algorithm in Inverted File First we present brief review of upperbound search algorithm in inverted file. Detailed information can be found in <ref> [8, 9, 15, 13, 16] </ref>. The upperbound search algorithm is used to search for certain prespecified, say top T , top documents in a document collection. <p> (%) OPT (HL) EXP (HL) 0 0.1 0.2 0.3 0.4 0.5 percentage of signatures skipped storage overhead (%) OPT (HL) EXP (HL) Some variations of the upperbound search algorithm have been proposed to improve retrieval efficiency by relaxing the stopping criterion [1], or applying probability on the upper bound computation <ref> [9, 15] </ref> Again it has been found [16] that those modified upperbound search algorithms fail to yield any real performance gain and the extra computation overhead induced to calculate probabilities is very expensive.
Reference: [16] <author> WONG, W. Y. P. </author> <title> Design And Performance Evaluation Of Access Method And Heuristic Techniques For Implementing Document Ranking Strategies. </title> <type> Ph.D. dissertation, </type> <institution> The Ohio State University, </institution> <year> 1991. </year>
Reference-contexts: text database word signatures: text 001 000 110 010 database 000 010 101 001 block signature (_) 001 010 111 011 Queries Query Signatures Results 1) retrieval 010 001 000 011 no match 2) database 000 010 101 001 match 3) information 001 000 111 000 false drop research result <ref> [7, 16] </ref> enables successful encoding of term weigh in the signature files. Signature file based systems are able to achieve retrieval effectiveness comparable to inverted file based systems with far less memory overhead. Signature file will play an important role in information retrieval as it gets better with new improvements. <p> In this section, we introduce an upperbound search algorithm which achieves good reduction ratio consistently. The concept of upperbound search algorithm <ref> [8, 9, 13, 15, 16] </ref> has been employed in inverted file based systems with various degrees of success. <p> To be a viable document retrieval model, fast search algorithms have to be studied and significantly better search reduction ratio has to be achieved. 2.2 Upperbound Search Algorithm in Inverted File First we present brief review of upperbound search algorithm in inverted file. Detailed information can be found in <ref> [8, 9, 15, 13, 16] </ref>. The upperbound search algorithm is used to search for certain prespecified, say top T , top documents in a document collection. <p> If the search can be terminated early, we have better response time since short postings lists are processes first and the unprocessed lists are long. It has been found <ref> [1, 16] </ref> that the upperbound search algorithm is too conservative to yield any significant performance gain for inverted files. <p> 0.2 0.3 0.4 0.5 percentage of signatures skipped storage overhead (%) OPT (HL) EXP (HL) Some variations of the upperbound search algorithm have been proposed to improve retrieval efficiency by relaxing the stopping criterion [1], or applying probability on the upper bound computation [9, 15] Again it has been found <ref> [16] </ref> that those modified upperbound search algorithms fail to yield any real performance gain and the extra computation overhead induced to calculate probabilities is very expensive.
Reference: [17] <author> WONG, W. Y. P., and LEE, D. L. </author> <title> Signature file methods for implementing a ranking strategy. </title> <institution> Inf. Process. Manage. </institution> <address> 26, 5 (Sept., </address> <year> 1990), </year> <pages> 641-653. </pages> .[] 
Reference-contexts: Therefore, the time spent on searching the signature file is proportional to the database size, and performance becomes a major concern for large databases. 1.3 Weight-partitioned Signature files Some recent research on signature files has addressed these problems. Lee et al. <ref> [7, 17] </ref> proposed a method to represent the exact values of term frequencies by using a separate signature file for terms with the same term frequency. It is done by first grouping terms with the same term frequency in a document.
References-found: 17

