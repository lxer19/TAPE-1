URL: http://www.media.mit.edu/~nelson/research/masters-thesis/thesis.ps.gz
Refering-URL: http://www.media.mit.edu/~nelson/research/masters-thesis/
Root-URL: http://www.media.mit.edu
Title: DESIGNING AN ECOLOGY OF DISTRIBUTED AGENTS  
Author: by Nelson Minar Nelson Minar Stephen A. Benton 
Note: Submitted to the Program in  c fl1998  Program in  
Address: (1994) Reed College  
Affiliation: B.A. Mathematics  Media Arts and Sciences, School of Architecture and Planning,  Media Arts and Sciences at the Massachusetts Institute of Technology  Massachusetts Institute of Technology.  Department of Media Arts and Sciences  MIT Media Lab  Media Arts and Sciences  
Email: &lt;nelson@media.mit.edu&gt;  
Degree: in partial fulfillment of the requirements for the degree of Master of Science in  All rights reserved. Author  Certified by Pattie Maes Associate Professor of Media Arts and Sciences  Accepted by  Professor of Media Arts and Sciences Chair, Departmental Committee on Graduate Students  
Date: September 1998  August 7, 1998  
Web: http://www.media.mit.edu/nelson/  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> Ross J. Anderson. </author> <title> The Eternity Service. </title> <booktitle> In Proceedings of PragoCrypt '96. </booktitle> <publisher> Czech Technical University Publishing House, </publisher> <year> 1996. </year> <note> http://www.cl.cam.ac.uk/users/rja14/ eternity/eternity.html </note>
Reference-contexts: Similarly, networked computers can also provide raw storage capacity, allowing documents to be published literally forever <ref> [1] </ref>. Desktop computers are currently the most ubiquitous networked devices, with the familiar interface of a bitmapped screen, a keyboard, and a mouse. But all sorts of other computers are also part of the digital ther, devices with interesting ways of interacting with people.
Reference: [2] <author> Ken Arnold and James Gosling. </author> <title> The Java Programming Language. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year> <note> ISBN: 0201634554. </note>
Reference-contexts: In many ways the Straum server is analogous to an operating system for agents, an OS written for the Java virtual machine. 4.1.1 Technology Base Most of Straum's capability derives from its base in Java <ref> [2] </ref>. Java is more than another computer language, it is an entire environment, a virtual machine architecture. The language aspects of Java make it quite suitable for designing a project such as Straum: the object oriented model is quite clean and the language has good support for Internet programming.
Reference: [3] <author> Derek Atkins, Michael Graff, Arjen Lenstra, and Paul Leyland. </author> <title> The Magic Words are Squeamish Ossifrage. </title> <note> In AsiaCrypt '94, </note> <year> 1994. </year>
Reference-contexts: What can we do with all of the power of this network? As the Internet grows larger the capability of the system increases. The most obvious increase is in CPU power: thousands of computers crunching numbers together can perform impressive tasks such as breaking cryptosystems <ref> [3] </ref> [22] [59] solving number theory problems [68], or processing huge volumes of radio signals [72]. Similarly, networked computers can also provide raw storage capacity, allowing documents to be published literally forever [1].
Reference: [4] <author> Mario Baldi, Silvano Gai, and Gian Pietro Picco. </author> <title> Exploiting Code Mobility in Decentralized and Flexible Network Management. </title> <booktitle> In Proceedings of the First International Workshop on Mobile Agents, </booktitle> <address> Berlin, </address> <month> April </month> <year> 1997. </year> <note> http://www.polito.it/picco/papers/ ma97.ps.gz </note>
Reference: [5] <author> Kenneth P. Birman. </author> <title> Building Secure and Reliable Network Applications. </title> <publisher> Manning Publishing Company, </publisher> <year> 1996. </year> <note> ISBN: 0137195842. http://www.browsebooks.com/Birman/ index.html </note>
Reference-contexts: In historical order, they are message passing systems, remote procedure call, and distributed object systems <ref> [5] </ref>. Each of these technologies builds on the last. (Discussion of a fourth emerging methodology, state-space systems such as Linda [18] or JavaSpaces [66], will be deferred to the chapter 5.) Straum is built as an extension of distributed objects, distributed software agents.
Reference: [6] <author> Jon Bosak. XML, </author> <title> Java, and the Future of the Web, </title> <month> March </month> <year> 1997. </year> <note> http://sunsite.unc.edu/ pub/sun-info/standards/xml/why/xmlapps.html </note>
Reference-contexts: Guidance for solving this problem can be taken from work done towards using XML for enabling active applications <ref> [6] </ref> as well as from KQML research, in particular the Ontolingua system [16]. 5.3.6 Distributed Agent Construction Kits Straum's visual interface to agents strongly suggests graphical programming environments where programmers can build applications by simply drawing wires between components. However, Straum's view is currently read-only.
Reference: [7] <author> Tim Bray, Jean Paoli, and C. M. Sperberg-McQueen. </author> <title> Extensible Markup Language (XML). </title> <type> Technical Report PR-xml-971208, </type> <institution> W3C, </institution> <month> December </month> <year> 1997. </year> <note> http://www.w3.org/ TR/PRxml-971208 </note>
Reference-contexts: This approach is not entirely unprecedented. For example, XML has an equivalent ontological problem in the proliferation of document type definitions (DTDs) <ref> [7] </ref>. 5.3. FUTURE DESIGN WORK 75 It remains to be seen whether XML will result in a Tower of Babel of millions of different kinds of documents, or whether developers will converge on a common, ad-hoc ontology.
Reference: [8] <author> G. Di Caro and M. Dorigo. </author> <title> Mobile Agents for Adaptive Routing. </title> <booktitle> In Proceedings of the 31st Hawaii International Conference on Systems, </booktitle> <month> January </month> <year> 1998. </year> <note> ftp://iridia.ulb.ac. be/pub/dorigo/conferences/IC.22-HICSS31.ps.gz 87 88 BIBLIOGRAPHY </note>
Reference: [9] <author> Patrick Chan, Rosanna Less, and Douglas Kramer. </author> <title> The Java Class Libraries, volume 1. </title> <publisher> Addison Wesley, </publisher> <address> 2nd edition, </address> <year> 1998. </year>
Reference-contexts: AGENT BESTIARY Appendix B Class Hierarchies Figure B.1 is a diagram of the class hierarchy for the Straum server and system information packages. Figure B.2 is a diagram of the class hierarchy for Straum agents. The diagrams follow the convention of the Java Class Libraries documentation <ref> [9] </ref>. A square box represents a class, a rounded box represents an interface. A small circle on the right side of a class box indicates the class is abstract. Solid lines show the inheritance hierarchy, dotted lines represent implementation of an interface.
Reference: [10] <author> K. Mani Chandy, Joseph Kiniry, Adam Rifkin, and Daniel Zimmerman. </author> <title> Framework for Structured Distributed Object Computing. </title> <note> 1997. http://www.infospheres.caltech. edu/papers/framework/framework.html </note>
Reference-contexts: This approach would also allow experimentation 4 There is an OMG mobile agents facility proposal underway. 62 CHAPTER 4. STRAUM IMPLEMENTATION AND EVALUATION with different implementations of mobile code and might help lead the way towards solving problems such as class versioning. Caltech's Infospheres project <ref> [10] </ref> [11] also starts with a Java distributed object model. Out of the base of distributed objects, Infospheres adds composable component, allowing a user to publish active objects as part of their information sphere on the Internet.
Reference: [11] <author> K. Mani Chandy, Adam Rifkin, Paolo A.G. Sivilotti, Jacob Mandelson, Matthew Richardson, Wesley Tanaka, and Luke Weisman. </author> <title> A World-Wide Distributed System Using Java and the Internet. </title> <type> Technical report, </type> <institution> Caltech Computer Science, </institution> <year> 1996. </year> <note> Caltech CS Technical Report CS-TR-96-0. http://www.infospheres.caltech.edu/papers/ chandy etal/hpdc.html </note>
Reference-contexts: This approach would also allow experimentation 4 There is an OMG mobile agents facility proposal underway. 62 CHAPTER 4. STRAUM IMPLEMENTATION AND EVALUATION with different implementations of mobile code and might help lead the way towards solving problems such as class versioning. Caltech's Infospheres project [10] <ref> [11] </ref> also starts with a Java distributed object model. Out of the base of distributed objects, Infospheres adds composable component, allowing a user to publish active objects as part of their information sphere on the Internet.
Reference: [12] <author> D. Chess, C. Harrison, and A. Kershenbaum. </author> <title> Mobile Agents: Are they a Good Idea? In Jan Vitek and Christian Tschudin, editors, Mobile Object Systems: Towards the Programmable Internet, </title> <booktitle> volume 1222 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1997. </year> <note> http://www.research.ibm.com/massive/mobag.ps </note>
Reference: [13] <author> Scott H. Clearwater. </author> <title> Market-Based Control, A Paradigm for Distributed Resource Allocation. </title> <publisher> World Scientific Publishing Co., </publisher> <year> 1996. </year> <note> ISBN: 9810222548. </note>
Reference-contexts: A new agent that could perform a service more efficiently could step in and offer its services. A marketplace of agents would be quite a dynamic system. Existing research in market based control <ref> [13] </ref>, in particular conceptions such as Agoric computing [33], point to how economics can help coordinate a complex computational system. Straum could be an excellent platform on which to test these ideas. 5.3.8 Evolving Agents Straum uses mobile agents to aid configurability of the system.
Reference: [14] <author> Judith Donath. </author> <title> Inhabiting the Virtual City: The Design of Social Environments for Electronic Communities. </title> <type> PhD thesis, </type> <institution> MIT Media Arts and Sciences, </institution> <year> 1997. </year> <note> http://judith. www.media.mit.edu/Thesis/ </note>
Reference-contexts: This kind of information could be used by a manager who wants to improve efficiency or by the participants themselves as a way to become self-aware about the social dynamics of their group. Sometimes the patterns of communication between users is as interesting as what they are actually communicating <ref> [14] </ref>. A group of programmers working closely together might also form the nexus of an interesting community of Straum developers. For example, suppose one of the programmers gets bored one day with the project and hacks up a nifty new kind of display agent.
Reference: [15] <author> Judith Donath, Karrie Karahalios, and Fernanda Viegas. </author> <title> Visualizing Conversations. </title> <booktitle> In Proceedings of the 32nd Hawaii International Conference on Systems, </booktitle> <month> January </month> <year> 1999. </year> <note> http://www.media.mit.edu/fviegas/circles/new/index.html </note>
Reference-contexts: It listens for events; every time it receives an event (indicating a web hit) the agent draws a circle with random color and placement. Over time the circles shrink and disappear, reflecting 3.3. WEB SERVER STATUS 39 the age of the data (a device borrowed from the ChatCircles project <ref> [15] </ref>). Straum's user interface displays a one-way arrow from the file growth agent on the remote host to the random dot agent on the localhost to indicate that information only flows in one direction; from information agent to display agent. <p> Creates a blank canvas. When an event is received, the agent draws a dot with random placement and colour. The agent slowly fades dots over time until they disappear. This display is closely modeled after the display in ChatCircles <ref> [15] </ref>. RunningGraphAgent INPUT: Events. OUTPUT: None. BEHAVIOR: Finds a source of floating point numbers on the remote host. Creates a canvas for a graph. Periodically asks the remote agent for a floating point number and plots it on the graph. 82 APPENDIX A.
Reference: [16] <author> A. Farquhar, R. Fikes, and J. Rice. </author> <title> The Ontolingua Server: A Tool for Collaborative Ontology Construction. </title> <type> Technical Report KSL-96-26, </type> <institution> Knowledge Systems Laboratory, Stanford University, </institution> <month> September </month> <year> 1996. </year> <note> ftp://ksl.stanford.edu/pub/KSL Reports/ KSL96-26.ps </note>
Reference-contexts: Guidance for solving this problem can be taken from work done towards using XML for enabling active applications [6] as well as from KQML research, in particular the Ontolingua system <ref> [16] </ref>. 5.3.6 Distributed Agent Construction Kits Straum's visual interface to agents strongly suggests graphical programming environments where programmers can build applications by simply drawing wires between components. However, Straum's view is currently read-only.
Reference: [17] <author> Message Passing Interface Forum. </author> <title> MPI: A Message-Passing Interface Standard, </title> <month> June </month> <year> 1995. </year> <note> http://www.mpi-forum.org/docs/docs.html </note>
Reference-contexts: This methodology will be shown to be a natural way of building distributed computation, and particularly well-suited to the open environment of the Internet. 2.1 Distributed Object Systems The first model of distributed programming is the message passing model <ref> [17] </ref>. The idea is very simple and literal: if one program wishes to communicate with another, it does so by simply sending a message, a packet on the network, to the other program. Message passing 19 20 CHAPTER 2.
Reference: [18] <author> David Gelernter. </author> <title> Mirror Worlds. </title> <publisher> Oxford University Press, </publisher> <year> 1991. </year>
Reference-contexts: In historical order, they are message passing systems, remote procedure call, and distributed object systems [5]. Each of these technologies builds on the last. (Discussion of a fourth emerging methodology, state-space systems such as Linda <ref> [18] </ref> or JavaSpaces [66], will be deferred to the chapter 5.) Straum is built as an extension of distributed objects, distributed software agents. <p> Another group communication paradigm that could be useful in Straum is the notion of tuplespaces, developed initially by Gelernter in his Linda system <ref> [18] </ref> and implemented recently by Sun as JavaSpaces [66]. A JavaSpace is like an abstract distributed database, a place where arbitrary objects can be placed and associated with each other. JavaSpaces provide a very elegant abstraction for relationships between objects.
Reference: [19] <author> Li Gong. </author> <title> Java Security Architecture (JDK 1.2), </title> <month> June </month> <year> 1998. </year> <note> http://java.sun.com/ products/jdk/1.2/docs/guide/security/spec/security-spec.doc.html BIBLIOGRAPHY 89 </note>
Reference-contexts: The Concordia project notes that code signing is not enough and that one needs user authentication, since often one wants to know who the agent belongs to, not who wrote the code [53]. Using pieces of code signing and user authentication, combined with the upcoming Java 1.2 policy architecture <ref> [19] </ref>, it will be possible to give individual agents specific capabilities depending on what user they represent. Sandbox techniques will allow the Straum server to limit what information resources an agent has access to: what monitors, what display capabilities.
Reference: [20] <author> Robert Gray. </author> <title> Agent Tcl: A Flexible and Secure Mobile-Agent System. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, Dartmouth College, </institution> <month> June </month> <year> 1997. </year> <note> Available as Dartmouth Computer Science Technical Report TR98-327. http://www.cs.dartmouth.edu/agent </note>
Reference-contexts: But most systems develop some sort of model of computation that particularly addresses location and security. In the past mobile agent systems were developed in any language that has a runtime environment (most notably Dartmouth's Agent TCL, now a multi-language system called D'Agents <ref> [20] </ref>) but current research is mostly focussed on Java. Active mobile agent systems include the University of Stuttgart's Mole [69], IBM's Aglets [26], Mitsubishi's Concordia [57], General Magic's Odyssey [71], and ObjectSpace's Voyager [74]. All of the mobile agent systems implemented have some sort of notion of location of computation.
Reference: [21] <author> David Halls. </author> <title> Applying Mobile Code to Distributed Systems. </title> <type> PhD thesis, </type> <institution> Computer Laboratory, University of Cambridge, </institution> <month> June </month> <year> 1997. </year> <note> http://www.cl.cam.ac.uk/users/dah28/ </note>
Reference: [22] <author> Brian Hayes. </author> <title> Computing Science: Collective Wisdom. </title> <journal> American Scientist, </journal> <note> 1998. http://www.amsci.org/amsci/issues/Comsci98/compsci1998-03.html </note>
Reference-contexts: What can we do with all of the power of this network? As the Internet grows larger the capability of the system increases. The most obvious increase is in CPU power: thousands of computers crunching numbers together can perform impressive tasks such as breaking cryptosystems [3] <ref> [22] </ref> [59] solving number theory problems [68], or processing huge volumes of radio signals [72]. Similarly, networked computers can also provide raw storage capacity, allowing documents to be published literally forever [1]. <p> There are a huge number of possible applications for active distributed computation ranging from cluster computing <ref> [22] </ref>, to interactive shared environments, to science-fiction-sounding visions of intelligence emerging in the network [25]. This thesis focuses on the possibilities implied by the presence of computational devices in our everyday environment.
Reference: [23] <author> B. A. Huberman, </author> <title> editor. The Ecology of Computation. </title> <publisher> Elsevier Science Publishers, </publisher> <year> 1988. </year>
Reference-contexts: There is a strong similarity between the complex interaction of organisms in a natural ecosystem and the complex interaction of software components in a networked system. The word ecology is also meant to specifically refer to the field of artificial life and other complex systems computer science work [27] <ref> [23] </ref>. In a computational ecology software agents have a specific lifecycle. Every agent is born in a particular environment, on a particular computer.
Reference: [24] <author> Hiroshi Ishii and Brygg Ullmer. </author> <title> Tangible Bits: Towards Seamless Interfaces between People, Bits and Atoms. </title> <booktitle> In Proceedings of the Conference on Human Factors in Computing Systems (CHI '97), </booktitle> <pages> pages 234241. </pages> <publisher> ACM Press, </publisher> <month> March </month> <year> 1997. </year> <note> http://tangible.media.mit.edu/ullmer/papers/tangible-bits.pdf </note>
Reference-contexts: As a simple example, consider the work of Hiroshi Ishii and Brygg Ullmer to represent accesses to a web server as the sound of rain falling <ref> [24] </ref>. The simplest way to implement this would be to run a long speaker wire from the web server to the speaker. But wires are ugly and slow, and a specific installation would limit what that speaker could be used for.
Reference: [25] <author> Kevin Kelley. </author> <title> Out of Control. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: There are a huge number of possible applications for active distributed computation ranging from cluster computing [22], to interactive shared environments, to science-fiction-sounding visions of intelligence emerging in the network <ref> [25] </ref>. This thesis focuses on the possibilities implied by the presence of computational devices in our everyday environment.
Reference: [26] <author> Danny B. Lange and Daniel T. Chang. </author> <title> IBM Aglets Workbench: Programming Mobile Agents in Java, </title> <month> September </month> <year> 1996. </year> <note> http://www.trl.ibm.co.jp/aglets/whitepaper.htm </note>
Reference-contexts: In the past mobile agent systems were developed in any language that has a runtime environment (most notably Dartmouth's Agent TCL, now a multi-language system called D'Agents [20]) but current research is mostly focussed on Java. Active mobile agent systems include the University of Stuttgart's Mole [69], IBM's Aglets <ref> [26] </ref>, Mitsubishi's Concordia [57], General Magic's Odyssey [71], and ObjectSpace's Voyager [74]. All of the mobile agent systems implemented have some sort of notion of location of computation.
Reference: [27] <editor> Chris Langton, editor. </editor> <booktitle> Artificial Life (Proceedings of the First International Conference. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1987. </year> <note> ISBN: 0201093561. </note>
Reference-contexts: There is a strong similarity between the complex interaction of organisms in a natural ecosystem and the complex interaction of software components in a networked system. The word ecology is also meant to specifically refer to the field of artificial life and other complex systems computer science work <ref> [27] </ref> [23]. In a computational ecology software agents have a specific lifecycle. Every agent is born in a particular environment, on a particular computer.
Reference: [28] <author> Steve Lawrence and C. Lee Giles. </author> <title> Searching the World Wide Web. </title> <booktitle> Science, </booktitle> <address> 280(5360):98100, </address> <month> April </month> <year> 1998. </year> <note> http://www.neci.nj.nec.com/homepages/lawrence/ papers/search-science98/index.html </note>
Reference-contexts: The Web was started only in 1990, but in just eight years it has grown to an enormous size, encompassing some 320 million documents <ref> [28] </ref>. The Web has literally transformed our notion of distributing information. Not only can anyone publish documents (and anyone does!), those documents are available instantaneously anywhere in the world at an incredibly low cost, and exist in a rich interactive document context.
Reference: [29] <author> Andrew Leonard. Bots: </author> <title> The Origin of New Species. </title> <type> Hardwired, </type> <year> 1997. </year>
Reference-contexts: Another (more useful) example of the complicated interactions between distributed software are the various bots that inhabit chat systems, MUDs, Usenet, and the Internet at large. In his book Bots: The Origin of New Species <ref> [29] </ref>, Andrew Leonard gives case studies of the complex and often surprising interactions between software agents in a variety of distributed systems.
Reference: [30] <editor> Pattie Maes. </editor> <title> Agents that Reduce Work and Information Overload. </title> <journal> Communications of the ACM, </journal> <volume> 37(7):3140, </volume> <month> July </month> <year> 1994. </year> <note> http://pattie.www.media.mit.edu/people/pattie/ CACM-94/CACM-94.p1.html </note>
Reference-contexts: Almost anything that is a program has been called an agent, from web robots that filter information to software help systems to large artificial intelligence constructions. If there is a consensus in software agent research, it is that agents are autonomous, proactive, and adaptive <ref> [30] </ref>. Straum's distributed agents make the most use of the first two characteristics of agents, autonomy and proactivity. Straum agents are autonomous: they are identifiable units of computation, executing independently, with their own set of goals partially independent of their larger environment.
Reference: [31] <author> Thomas W. Malone, Richard E. Fikes, Kenneth R. Grant, and Michael T. Howard. </author> <title> Enterprise: A Market-like Task Scheduler for Distributed Computing Environments. </title> <editor> In B. A. Huberman, editor, </editor> <booktitle> The Ecology of Computation, </booktitle> <pages> pages 177206. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1988. </year> <note> 90 BIBLIOGRAPHY </note>
Reference-contexts: Straum will eventually need to 72 CHAPTER 5. CONCLUSIONS AND FUTURE WORK implement these sorts of restrictions to prevent denial of service attacks on servers. It might even enable a marketplace for spare CPU cycles such as the Enterprise system <ref> [31] </ref>; when a computer is idle, its Straum server could advertise to allow paying agents to run CPU intensive operations.
Reference: [32] <author> Network Working Group Sun Microsystems. </author> <title> RPC: Remote Procedure Call Protocol Specification. </title> <type> RFC 1057, </type> <month> June </month> <year> 1988. </year> <note> http://info.internet.isi.edu:80/in-notes/rfc/files/ rfc1057.txt </note>
Reference-contexts: The Internet itself is a large message passing system, with extensions such as long-lived connections and address resolution. Many Internet applications such as FTP, the Web, or email are based on simple message passing. Remote procedure call (RPC) was the first successful abstraction on top of message passing architectures <ref> [32] </ref>. If message passing systems are analogous to assembly language programming, RPC is like procedural programming, adding the abstraction of the function call to distributed systems.
Reference: [33] <author> Mark S. Miller and K. Eric Drexler. </author> <title> Markets and Computation: Agoric Open Systems. </title> <editor> In B. A. Huberman, editor, </editor> <booktitle> The Ecology of Computation, </booktitle> <pages> pages 133176. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1988. </year> <note> http://www.webcom.com/agorics/agorpapers.html </note>
Reference-contexts: A new agent that could perform a service more efficiently could step in and offer its services. A marketplace of agents would be quite a dynamic system. Existing research in market based control [13], in particular conceptions such as Agoric computing <ref> [33] </ref>, point to how economics can help coordinate a complex computational system. Straum could be an excellent platform on which to test these ideas. 5.3.8 Evolving Agents Straum uses mobile agents to aid configurability of the system.
Reference: [34] <author> Kazuhiro Minami and Toshihiro Suzuki. </author> <title> Java-Based Moderator Templates for Multi-Agent Planning, </title> <month> October </month> <year> 1997. </year> <title> Presented at OOPSLA '97 Workshop on Java-based Paradigms for Agent Facilities. </title> <address> http://www.trl.ibm.co.jp/aglets/jmt/oopsla97/ jmt-oopsla97.html </address>
Reference-contexts: Designing this properly will take more research in programming paradigms, per 76 CHAPTER 5. CONCLUSIONS AND FUTURE WORK haps borrowing component assembly like JavaBeans [64] or workflow templates for assembling agent plans <ref> [34] </ref>. 5.3.7 Economic Coordination Straum creates a system that enables agents to find each other and enter into relationships. But Straum does not say anything about why agents would want to communicate, what the motivations and agreements are that prompted users to create communicating agents in the first place.
Reference: [35] <author> Alexandros Moukas, Kostas Chandrinos, and Pattie Maes. Trafficopter: </author> <title> A Distributed Collection System for Traffic Information. </title> <booktitle> In Proceedings of Cooperative Information Agents '98, volume 1435 of Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1998. </year> <note> http://lcs.www.media.mit.edu/projects/trafficopter/ </note>
Reference-contexts: Working out the details of these algorithms is not trivial, but the Trafficopter project points to the possibilities of distributed data collection for traffic patterns <ref> [35] </ref>. 3.4.5 Automated Trading One final example application that highlights the applicability of Straum in an open network is the possibility of agent-mediated trading of commodities.
Reference: [36] <author> Scott Oaks. </author> <title> Java Security. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <year> 1998. </year> <note> ISBN: 1565924037. </note>
Reference-contexts: This simplistic security mechanism is quite helpful and very easy to implement. The second level of security to implement is a custom Java security manager that creates a sandbox for remote agents <ref> [36] </ref>. This security system will restrict what any agent coming into the system can do. For example, it would allow communication from the agent to the Server object but prevent an agent from directly accessing the hard drive.
Reference: [37] <editor> Object Management Group (OMG). </editor> <title> The Common Object Request Broker: Architecture and Specification (CORBA), revision 2.0. Object Management Group (OMG), </title> <address> 2.0 edition. </address>
Reference-contexts: In essence, distributed objects add a concept of thing to the concept of function from RPC. Distributed objects are the current state of the art in building distributed systems. The major standard is OMG CORBA, a language-neutral specification for communicating object systems <ref> [37] </ref>. Competitors to CORBA include Microsoft's DCOM architecture [45] and the various distributed object systems layered on top of Java [65] [74]. These architectures all share the basic underlying paradigm of distributed objects but handle specific subtleties such as mobility, typing, synchronicity, and language independence differently. <p> Other distributed object systems provide a better match. 4.3.2 Distributed Object Systems The grand dame of distributed object systems is CORBA <ref> [37] </ref>. CORBA is quite large and complicated, providing a huge variety of different distributed object services.
Reference: [38] <author> Alex P. Pentland. </author> <title> Smart Rooms. </title> <publisher> Scientific American, </publisher> <month> April </month> <year> 1996. </year> <note> http://www.sciam. com/0496issue/0496pentland.html </note>
Reference-contexts: The potential applications of Straum become much more exciting when we consider integrating it with objects in people's everyday environments. The various research programs in ubiquitous computing [54], smart rooms <ref> [38] </ref>, and Things That Think [73] all point to a host of ways of bringing computational devices into our everyday world.
Reference: [39] <author> Rosalind W. Picard and Jennifer Healye. </author> <title> Affective Wearables. </title> <type> Personal Technologies, </type> <institution> 1(4):231240, 1997. MIT Media Lab Vismod tech report 467. ftp://whitechapel.media. mit.edu/pub/techreports/TR-467.ps.Z </institution>
Reference-contexts: But all sorts of other computers are also part of the digital ther, devices with interesting ways of interacting with people. Wrist watches, automobiles, coffee machines [70], even people's bodies [46] <ref> [39] </ref> are all be 11 12 CHAPTER 1. COMPUTATION IN THE NETWORK coming networked. As networked devices infiltrate our physical world, we will see more and more applications of computer networks in our daily lives.
Reference: [40] <author> Tom S. Ray. </author> <title> A Proposal to Create a Network-wide Biodiversity Reserve for Digital Organisms. </title> <type> Technical report, </type> <institution> ATR, </institution> <year> 1995. </year> <note> http://www.hip.atr.co.jp/ray/pubs/reserves/ reserves.html </note>
Reference-contexts: Ideas for managing the complexity of these systems are presented in chapter 5. 2.3.4 Existing Software Ecologies This vision of flexible, mobile distributed computing is similar to other systems we see in the Internet. Tom Ray's NetTierra project <ref> [40] </ref> is one of the main precursors to the ideas in Straum. <p> Straum currently has no security implemented at all, although the intended design closely resembles Concordia (section 5.2.4). Finally, Straum seems to largely be alone in using an ecological model to describe a group of interacting agents. This idea was partly inspired by the NetTierra system <ref> [40] </ref>, but that system is well outside the mainstream of mobile agents research. Instead, most mobile agent system examples work with a predefined set of agent interactions in the context of particular applications.
Reference: [41] <author> Maria Redin. </author> <title> Marathon Man. </title> <type> Master's thesis, </type> <institution> MIT Department of Electrical Engineering, </institution> <year> 1998. </year> <note> http://ttt.www.media.mit.edu/SF/ </note>
Reference-contexts: COMPUTATION IN THE NETWORK coming networked. As networked devices infiltrate our physical world, we will see more and more applications of computer networks in our daily lives. Smart objects can bring in data from our physical environments, such as biosensors carrying in information about a runner's heartrate <ref> [41] </ref>. They can also express data, communicating information in more intimate and immediate ways [47].
Reference: [42] <author> Mitchel Resnick. Turtles, Turmites, </author> <title> and Traffic Jams. </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [43] <author> Marshall T. Rose. </author> <title> The Simple Book: An Introduction to Networking Management. </title> <publisher> Prentice Hall, </publisher> <year> 1996. </year> <note> ISBN: 0134516591. BIBLIOGRAPHY 91 </note>
Reference-contexts: A notable exception are tools based on SNMP, the Simple 3.3. WEB SERVER STATUS 37 Network Management Protocol; these are explicitly distributed and somewhat more flexible than typical system monitoring tools <ref> [43] </ref>. Like user presence applications, system monitoring applications also tend towards the monolithic. Adding a new type of instrument is often tantamount to upgrading the entire program. But installing a new version of a program is expensive.
Reference: [44] <author> Jeffrey S. Rosenschein and Gilad Zlotkin. </author> <title> Rules of Encounter. </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [45] <author> Roger Sessions. COM and DCOM: </author> <title> Microsoft's Vision for Distributed Objects. </title> <publisher> John Wiley & Sons, </publisher> <year> 1997. </year> <note> ISBN: 041719381X. </note>
Reference-contexts: Distributed objects are the current state of the art in building distributed systems. The major standard is OMG CORBA, a language-neutral specification for communicating object systems [37]. Competitors to CORBA include Microsoft's DCOM architecture <ref> [45] </ref> and the various distributed object systems layered on top of Java [65] [74]. These architectures all share the basic underlying paradigm of distributed objects but handle specific subtleties such as mobility, typing, synchronicity, and language independence differently.
Reference: [46] <author> Thad Starner, Steve Mann, Bradley Rhodes, Jeffrey Levine, Jennifer Healey, Dana Kirsch, Rosalind W. Picard, and Alex Pentland. </author> <title> Augmented Reality Through Wearable Computing,. Presence, 1997. </title> <type> MIT Media Lab Vismod tech report 397. </type> <note> http: //wearables.www.media.mit.edu/projects/wearables/ </note>
Reference-contexts: But all sorts of other computers are also part of the digital ther, devices with interesting ways of interacting with people. Wrist watches, automobiles, coffee machines [70], even people's bodies <ref> [46] </ref> [39] are all be 11 12 CHAPTER 1. COMPUTATION IN THE NETWORK coming networked. As networked devices infiltrate our physical world, we will see more and more applications of computer networks in our daily lives.
Reference: [47] <author> Hong Z. Tan and Alex Pentland. </author> <title> Tactual Displays for Wearable Computing. </title> <booktitle> In The First International Symposium on Wearable Computers, </booktitle> <pages> pages 8489. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1997. </year> <note> ISBN: 0818681926. </note>
Reference-contexts: Smart objects can bring in data from our physical environments, such as biosensors carrying in information about a runner's heartrate [41]. They can also express data, communicating information in more intimate and immediate ways <ref> [47] </ref>. The question is, how do we make all of these devices work together? The growth of the Internet means that the network itself will become more active, with more programs and processes operating and interacting on the network. Key enablers of this transformation are low-cost computers and wireless networks.
Reference: [48] <author> D. Tennenhouse, J. Smith, W. Sincoskie, D. Wetherall, and G. Minden. </author> <title> A Survey of Active Network Research. </title> <journal> IEEE Communications Magazine, </journal> <note> 35(1):8086, January 1997. http://www.tns.lcs.mit.edu/publications/ieeecomms97.html </note>
Reference: [49] <author> Vernor Vinge. </author> <title> A Fire Upon the Deep. </title> <publisher> Tor Books, </publisher> <year> 1993. </year> <note> ISBN: 0812515285. </note>
Reference-contexts: These processes are encapsulated as software agents; the natural environment of these agents is the network of Straum systems in the Internet. Every computer 3 The name is taken from Vernor Vinge's novel Fire Upon the Deep <ref> [49] </ref>. Straum is the place where a particularly virulent form of network activity started. 16 CHAPTER 1. COMPUTATION IN THE NETWORK system participating in the Straum system runs a server, a program that has two main tasks: running agents and providing access to information resources in the local environment.
Reference: [50] <author> Jan Vitek and Christian Tschudin, </author> <title> editors. Mobile Object Systems: Towards the Programmable Internet. </title> <publisher> Springer-Verlag, </publisher> <month> April </month> <year> 1997. </year> <note> Lecture Notes in Computer Science No. 1222. http://cuiwww.unige.ch/ecoopws/tpi </note>
Reference-contexts: It must be defined with respect to another ontology, an ontology of meanings. One final aspect of distributed agents that can be useful in building systems is the concept of mobility. Mobile agents are agents that can move from one computer to another [55] <ref> [50] </ref>. More specifically, a mobile agent is capable of stopping its execution, transmitting its current state and its executable code to another computer, and then resuming its execution on the other computer. 1 Mobility is a controversial technology for agent systems as it adds considerable complexity and security issues.
Reference: [51] <author> Jim Waldo. </author> <title> Jini Architecture Overview. </title> <type> Technical report, </type> <institution> Sun Microsystems, Inc., </institution> <year> 1998. </year> <note> http://java.sun.com/products/jini/ </note>
Reference-contexts: The models are different, but there is enough overlap that a combination might be fruitful. 4.3.5 Jini In the last month this thesis was being written, Sun made a big announcement about Jini, a new distributed systems architecture being built for Java <ref> [51] </ref>. Jini is not yet released and information is still a bit sketchy, but what they have explained so far looks very promising as a way of building flexible distributed systems. The available white papers and specifications give enough information for a preliminary comparison between Jini and Straum.
Reference: [52] <author> Jim Waldo, Geoff Wyant, Ann Wollrath, and Sam Kendall. </author> <title> A Note on Distributed Computing. </title> <editor> In Jan Vitek and Christian Tschudin, editors, </editor> <title> Mobile Object Systems: Towards the Programmable Internet, </title> <booktitle> volume 1222 of Lecture Notes in Computer Science, </booktitle> <pages> pages 4964. </pages> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, </address> <month> April </month> <year> 1997. </year> <note> http://www.sunlabs.com/ techrep/1994/abstract-29.html </note>
Reference-contexts: On the face of it, transparency is ideal in distributed systems; if you can just hide all that network mess underneath the hood then programmers can write distributed code without having to work very hard. However, in an influential paper <ref> [52] </ref> Jim Waldo argues that transparency in distributed systems is often dangerous and misleading. Waldo points out that the semantics of messaging remote computers is often quite different than local ones: there are additional failure modes and issues of concurrency, asynchrony, and consistency.
Reference: [53] <author> Tom Walsh, Noemi Paciorek, and David Wong. </author> <title> Security and Reliability in Concordia. </title> <booktitle> In Proceedings of the 31st Hawaii International Conference on Systems, </booktitle> <month> January </month> <year> 1998. </year> <note> http://www.meitca.com/HSL/Projects/Concordia/HICSS98 Final.htm </note>
Reference-contexts: The Concordia project notes that code signing is not enough and that one needs user authentication, since often one wants to know who the agent belongs to, not who wrote the code <ref> [53] </ref>. Using pieces of code signing and user authentication, combined with the upcoming Java 1.2 policy architecture [19], it will be possible to give individual agents specific capabilities depending on what user they represent.
Reference: [54] <author> Mark Weiser. </author> <title> The Computer for the Twenty-First Century. </title> <publisher> Scientific American, </publisher> <pages> pages 94101, </pages> <month> September </month> <year> 1991. </year> <note> http://www.ubiq.com/hypertext/weiser/SciAmDraft3.html 92 BIBLIOGRAPHY </note>
Reference-contexts: Similarly, computer screens are also fairly rigid ways to display information, limiting the presentation to graphical displays in little windows. The potential applications of Straum become much more exciting when we consider integrating it with objects in people's everyday environments. The various research programs in ubiquitous computing <ref> [54] </ref>, smart rooms [38], and Things That Think [73] all point to a host of ways of bringing computational devices into our everyday world.
Reference: [55] <author> James E. White. </author> <title> Telescript Technology: Mobile Agents. </title> <editor> In Jeffrey Bradshaw, editor, </editor> <booktitle> Software Agents. </booktitle> <publisher> AAAI Press/MIT Press, </publisher> <year> 1996. </year> <note> http://www.genmagic.com/agents/ Whitepaper/whitepaper.html </note>
Reference-contexts: It must be defined with respect to another ontology, an ontology of meanings. One final aspect of distributed agents that can be useful in building systems is the concept of mobility. Mobile agents are agents that can move from one computer to another <ref> [55] </ref> [50]. More specifically, a mobile agent is capable of stopping its execution, transmitting its current state and its executable code to another computer, and then resuming its execution on the other computer. 1 Mobility is a controversial technology for agent systems as it adds considerable complexity and security issues.
Reference: [56] <editor> AOL Instant Messenger. </editor> <address> http://www.aol.com/aim/home.html </address>
Reference-contexts: The contemporary equivalents to these services, tools such as ICQ [62], Ding! [58], and AOL Instant Messenger <ref> [56] </ref> are more reliable and better designed for the distributed nature of the Internet. They all share a common architecture every user runs a client program that notifies a central server when they are online. The server then manages putting individual users into contact with each other.
Reference: [57] <institution> Concordia Java Mobile Agent Technology. http://www.meitca.com/HSL/Projects/ Concordia/ </institution>
Reference-contexts: Active mobile agent systems include the University of Stuttgart's Mole [69], IBM's Aglets [26], Mitsubishi's Concordia <ref> [57] </ref>, General Magic's Odyssey [71], and ObjectSpace's Voyager [74]. All of the mobile agent systems implemented have some sort of notion of location of computation.
Reference: [58] <institution> Ding! http://www.activerse.com/ding/dingintro.html [59] distributed.net: </institution> <note> The Fastest Computer on Earth. http://www.distributed.net/ [60] dist-obj FAQ and mailing list archives. http://www.infospheres.caltech.edu/mailing lists/dist-obj/distobjgroup.html [61] iBus: The Java Multicast Object Bus. http://www.softwired.ch/ibus/ </note>
Reference-contexts: The contemporary equivalents to these services, tools such as ICQ [62], Ding! <ref> [58] </ref>, and AOL Instant Messenger [56] are more reliable and better designed for the distributed nature of the Internet. They all share a common architecture every user runs a client program that notifies a central server when they are online.
Reference: [62] <author> ICQ. </author> <note> http://www.icq.com/ </note>
Reference-contexts: The contemporary equivalents to these services, tools such as ICQ <ref> [62] </ref>, Ding! [58], and AOL Instant Messenger [56] are more reliable and better designed for the distributed nature of the Internet. They all share a common architecture every user runs a client program that notifies a central server when they are online.
Reference: [63] <institution> Japhar The Hungry Java Runtime. </institution> <note> http://www.hungry.com/products/japhar/ </note>
Reference-contexts: Sun's Java is fairly good at giving access for security restriction, the well known sandbox model, but currently provides no hooks for CPU accounting and the like. As open Java VM implementations such as Kaffe [67] and Japhar <ref> [63] </ref> mature it will be possible to have more fine-grained control over agents behavior in the servers. Specific ideas for this are discussed in chapter 5. Java has excellent support for Internet programming.
Reference: [64] <institution> Java Beans home page. </institution> <note> http://java.sun.com/beans/ </note>
Reference-contexts: It is up to the agents to handle the failure to find a particular resource. The monitors themselves are application specific and their implementation is not particularly interesting to the design of the ecology. Briefly, the sysinfo library provides JavaBeans style <ref> [64] </ref> access to low-level system information such as keystroke events and system load average. <p> Designing this properly will take more research in programming paradigms, per 76 CHAPTER 5. CONCLUSIONS AND FUTURE WORK haps borrowing component assembly like JavaBeans <ref> [64] </ref> or workflow templates for assembling agent plans [34]. 5.3.7 Economic Coordination Straum creates a system that enables agents to find each other and enter into relationships.
Reference: [65] <author> RMI: </author> <title> Remote Method Invocation. </title> <address> http://java.sun.com:80/products/jdk/rmi/index.html </address>
Reference-contexts: Distributed objects are the current state of the art in building distributed systems. The major standard is OMG CORBA, a language-neutral specification for communicating object systems [37]. Competitors to CORBA include Microsoft's DCOM architecture [45] and the various distributed object systems layered on top of Java <ref> [65] </ref> [74]. These architectures all share the basic underlying paradigm of distributed objects but handle specific subtleties such as mobility, typing, synchronicity, and language independence differently. For completeness, it should be noted that there are many subtleties and variations in distributed programming systems. <p> Specific ideas for this are discussed in chapter 5. Java has excellent support for Internet programming. The low-level socket libraries make message passing easy and the RMI and Serialization libraries <ref> [65] </ref> make it relatively straightforward to do distributed object computation. However for this project a different distributed object system, ObjectSpace's Voyager 1.0 [74] was selected. Voyager was chosen because it seemed to provide a simpler, more powerful, more transparent interface to distributed objects and mobile agents. <p> It is not clear how language independence would even operate with true mobile code. There are many other Java distributed object systems available. One attractive alternative to Voyager is Java's own remote method invocation, RMI <ref> [65] </ref>. On its face RMI provides much the same basic functionality as Voyager, the ability to call a method on an object on another computer. But there is an important difference: classes that wish to be called remotely have to explicitly tag the individual methods they wish to be exported.
Reference: [66] <author> JavaSpaces White Paper. </author> <note> http://java.sun.com/products/javaspaces/ </note>
Reference-contexts: In historical order, they are message passing systems, remote procedure call, and distributed object systems [5]. Each of these technologies builds on the last. (Discussion of a fourth emerging methodology, state-space systems such as Linda [18] or JavaSpaces <ref> [66] </ref>, will be deferred to the chapter 5.) Straum is built as an extension of distributed objects, distributed software agents. In this chapter, the idea of an ecology of distributed agents will be introduced: the notion of a population of agents existing together in an environment of server computers. <p> Another group communication paradigm that could be useful in Straum is the notion of tuplespaces, developed initially by Gelernter in his Linda system [18] and implemented recently by Sun as JavaSpaces <ref> [66] </ref>. A JavaSpace is like an abstract distributed database, a place where arbitrary objects can be placed and associated with each other. JavaSpaces provide a very elegant abstraction for relationships between objects. Straum could simply add JavaSpaces as another service, maintaining a JavaSpace on each service for objects to share.
Reference: [67] <author> Kaffe OpenVM. </author> <note> http://www.transvirtual.com/kaffe.html </note>
Reference-contexts: Sun's Java is fairly good at giving access for security restriction, the well known sandbox model, but currently provides no hooks for CPU accounting and the like. As open Java VM implementations such as Kaffe <ref> [67] </ref> and Japhar [63] mature it will be possible to have more fine-grained control over agents behavior in the servers. Specific ideas for this are discussed in chapter 5. Java has excellent support for Internet programming.
Reference: [68] <institution> The Great Internet Mersenne Prime Search. </institution> <note> http://www.mersenne.org/prime.htm </note>
Reference-contexts: The most obvious increase is in CPU power: thousands of computers crunching numbers together can perform impressive tasks such as breaking cryptosystems [3] [22] [59] solving number theory problems <ref> [68] </ref>, or processing huge volumes of radio signals [72]. Similarly, networked computers can also provide raw storage capacity, allowing documents to be published literally forever [1]. Desktop computers are currently the most ubiquitous networked devices, with the familiar interface of a bitmapped screen, a keyboard, and a mouse.
Reference: [69] <author> Project Mole Mobile Agents, </author> <month> March </month> <year> 1996. </year> <note> http://www.informatik.uni-stuttgart.de/ ipvr/vs/projekte/mole.html </note>
Reference-contexts: In the past mobile agent systems were developed in any language that has a runtime environment (most notably Dartmouth's Agent TCL, now a multi-language system called D'Agents [20]) but current research is mostly focussed on Java. Active mobile agent systems include the University of Stuttgart's Mole <ref> [69] </ref>, IBM's Aglets [26], Mitsubishi's Concordia [57], General Magic's Odyssey [71], and ObjectSpace's Voyager [74]. All of the mobile agent systems implemented have some sort of notion of location of computation.
Reference: [70] <author> Mr. </author> <title> Java. </title> <address> http://mrjava.media.mit.edu/ </address>
Reference-contexts: Desktop computers are currently the most ubiquitous networked devices, with the familiar interface of a bitmapped screen, a keyboard, and a mouse. But all sorts of other computers are also part of the digital ther, devices with interesting ways of interacting with people. Wrist watches, automobiles, coffee machines <ref> [70] </ref>, even people's bodies [46] [39] are all be 11 12 CHAPTER 1. COMPUTATION IN THE NETWORK coming networked. As networked devices infiltrate our physical world, we will see more and more applications of computer networks in our daily lives.
Reference: [71] <institution> General Magic's Odyssey. </institution> <note> http://www.genmagic.com/technology/odyssey.html </note>
Reference-contexts: Active mobile agent systems include the University of Stuttgart's Mole [69], IBM's Aglets [26], Mitsubishi's Concordia [57], General Magic's Odyssey <ref> [71] </ref>, and ObjectSpace's Voyager [74]. All of the mobile agent systems implemented have some sort of notion of location of computation. This model seems implicit in mobile agent research: if an agent is going to move from one place to another, the system needs to have a concept of place.
Reference: [72] <author> SETI@Home. </author> <note> http://setiathome.ssl.berkeley.edu/ </note>
Reference-contexts: The most obvious increase is in CPU power: thousands of computers crunching numbers together can perform impressive tasks such as breaking cryptosystems [3] [22] [59] solving number theory problems [68], or processing huge volumes of radio signals <ref> [72] </ref>. Similarly, networked computers can also provide raw storage capacity, allowing documents to be published literally forever [1]. Desktop computers are currently the most ubiquitous networked devices, with the familiar interface of a bitmapped screen, a keyboard, and a mouse.
Reference: [73] <institution> Things That Think MIT Media Lab. </institution> <note> http://ttt.www.media.mit.edu/ </note>
Reference-contexts: The potential applications of Straum become much more exciting when we consider integrating it with objects in people's everyday environments. The various research programs in ubiquitous computing [54], smart rooms [38], and Things That Think <ref> [73] </ref> all point to a host of ways of bringing computational devices into our everyday world.
Reference: [74] <institution> Objectspace Voyager Core Package Version 1.0 Technical Overview, </institution> <year> 1997. </year> <note> http://www. objectspace.com/voyager/whitepapers/VoyagerTechOview.pdf </note>
Reference-contexts: Distributed objects are the current state of the art in building distributed systems. The major standard is OMG CORBA, a language-neutral specification for communicating object systems [37]. Competitors to CORBA include Microsoft's DCOM architecture [45] and the various distributed object systems layered on top of Java [65] <ref> [74] </ref>. These architectures all share the basic underlying paradigm of distributed objects but handle specific subtleties such as mobility, typing, synchronicity, and language independence differently. For completeness, it should be noted that there are many subtleties and variations in distributed programming systems. <p> Straum derives most of its functionality, particularly its portability and clean design, from Sun's Java language and runtime environment. Support for distributed object programming comes from Objectspace's Voyager library <ref> [74] </ref>. Everything else the system monitors, the graphical interface, and the server and agents themselves is implemented in the Straum libraries.. Straum's Java classes are broadly split into two categories: server code and agent code. <p> Java has excellent support for Internet programming. The low-level socket libraries make message passing easy and the RMI and Serialization libraries [65] make it relatively straightforward to do distributed object computation. However for this project a different distributed object system, ObjectSpace's Voyager 1.0 <ref> [74] </ref> was selected. Voyager was chosen because it seemed to provide a simpler, more powerful, more transparent interface to distributed objects and mobile agents. Voyager provides a very direct model of distributed objects. In addition to a normal Java 4.1. <p> Active mobile agent systems include the University of Stuttgart's Mole [69], IBM's Aglets [26], Mitsubishi's Concordia [57], General Magic's Odyssey [71], and ObjectSpace's Voyager <ref> [74] </ref>. All of the mobile agent systems implemented have some sort of notion of location of computation. This model seems implicit in mobile agent research: if an agent is going to move from one place to another, the system needs to have a concept of place.
References-found: 71

