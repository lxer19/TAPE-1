URL: http://theory.lcs.mit.edu/~harchol/Papers/mostrecent.ps
Refering-URL: http://theory.lcs.mit.edu/~harchol/Papers/papers.html
Root-URL: 
Email: fharchol downeyg@cs.berkeley.edu  
Title: Exploiting Process Lifetime Distributions for Dynamic Load Balancing  
Author: Mor Harchol-Balter Allen B. Downey 
Address: Berkeley  
Affiliation: University of California at  
Abstract: We measure the distribution of lifetimes for UNIX processes and propose a functional form that fits this distribution well. We use this functional form to derive a policy for preemptive migration, and then use a trace-driven simulator to compare our proposed policy with other preemptive migration policies, and with a non-preemptive load balancing strategy. We find that, contrary to previous reports, the performance benefits of preemptive migration are significantly greater than those of non-preemptive migration, even when the memory-transfer cost is high. Using a model of migration costs representative of current systems, we find that preemptive migration reduces the mean delay (queueing and migration) by 35 - 50%, compared to non-preemptive migration. 
Abstract-found: 1
Intro-found: 1
Reference: [AE87] <author> Rakesh Agrawal and Ahmed Ezzet. </author> <title> Location independent remote execution in NEST. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(8) </volume> <pages> 905-912, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: few use preemptive migration. (The following taxonomy is based in large part on [Nut94].) The following systems have implemented explicit remote execution and/or explicit preemptive migration; that is, both forms of migration are only performed at the user's request: Accent [Zay87], Locus [Thi91], Utopia [ZWZD93], DEMOS/MP [PM83], V [TLC85], NEST <ref> [AE87] </ref>, and MIST [CCK + 95]. Some other systems provide implicit remote execution, but perform preemptive migration only at the request of a user or for reasons other than load balancing (such as preserving autonomy): Amoeba [TvRaHvSS90], Charlotte [AF89], Sprite [DO91], Condor [LLM88], and Mach [Mil93].
Reference: [AF89] <author> Y. Artsy and R. Finkel. </author> <title> Designing a process migration facility: </title> <booktitle> The Charlotte experience. IEEE Computer, </booktitle> <pages> pages 47-56, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Some other systems provide implicit remote execution, but perform preemptive migration only at the request of a user or for reasons other than load balancing (such as preserving autonomy): Amoeba [TvRaHvSS90], Charlotte <ref> [AF89] </ref>, Sprite [DO91], Condor [LLM88], and Mach [Mil93]. Although these systems are capable of migrating active processes (with varying degrees of transparency), none have implemented a policy that specifies which processes should be preempted for purposes of load balancing.
Reference: [BF81] <author> Raymond M. Bryant and Raphael A. Finkel. </author> <title> A stable distributed scheduling algorithm. </title> <booktitle> In 2nd International Conference on Distributed Computing Systems, </booktitle> <pages> pages 314-323, </pages> <year> 1981. </year>
Reference-contexts: The workload we observed, and used in our trace-driven simulations, exhibits serial correlation; i.e. it is more bursty than a Poisson process. Also, our migration policy differs from [KL88] in that our proposed migration policy uses preemptive migration exclusively, rather than in addition to, remote execution. Like us, <ref> [BF81] </ref> discuss the distribution of process lifetimes and its effect on preemptive migration policy, but their hypothetical distributions are not based on system measurements.
Reference: [BK90] <author> Flavio Bonomi and Anurag Kumar. </author> <title> Adaptive optimal load balancing in a nonhomogeneous multiserver system with a central job scheduler. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(10) </volume> <pages> 1232-1250, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Thus, the median remaining lifetime of a process is equal to its current age. Despite the [LO86] study, many researchers have continued to assume an exponential process lifetime distribution in their analysis of migration strategies (e.g., [MTS90], <ref> [BK90] </ref> [EB93], [LR93]). The reasons for assuming an exponential lifetime distribution include: (1) analytic tractability, and (2) the belief that the exponential distribution is close enough to real distributions that the results of the analyses are not affected.
Reference: [Bra95] <author> Avner Braverman, </author> <year> 1995. </year> <type> Personal Communication. </type>
Reference-contexts: By implementing migration at the kernel level (on a cluster of Pentium-90 and i486/DX66 workstations), MOSIX reduces the fixed cost, f , to only 6 ms; the inverse memory transfer bandwidth, 1=b, is :44 seconds per megabyte <ref> [Bra95] </ref>. The MIST system ([CCK + 95]) is implemented on a network of HP9000/720 workstations running HP-UX 9.03 and connected by a 10Mb/second Ethernet.
Reference: [BSW93] <author> Amnon Barak, Guday Shai, and Richard G. Wheeler. </author> <title> The MOSIX Distributed Operating System:Load Balancing for UNIX. </title> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: But simulation studies (which can use more realistic workload descriptions) and implemented systems have shown greater benefits for preemptive migration ([KL88] and <ref> [BSW93] </ref>). This paper uses a measured distribution of process lifetimes and a trace-driven simulation to investigate these conflicting results. 1.1 Load balancing taxonomy On a network of shared processors, load balancing is the idea of migrating processes across the network from hosts with high loads to hosts with lower loads. <p> Although these systems are capable of migrating active processes (with varying degrees of transparency), none have implemented a policy that specifies which processes should be preempted for purposes of load balancing. Only a few systems have implemented automated load balancing policies with preemptive migration: MOSIX <ref> [BSW93] </ref> and RHODOS [GGI + 91]. The MOSIX load balancing scheme is similar to the strategies recommended in this paper; our results support their claim that their scheme is effective and robust. <p> We found that current (instantaneous) load is the best single predictor, and that using several predictive variables in combination did not greatly improve the accuracy of prediction. These results are in accord with Zhou's thesis, [Zho87] and with [Kun91]. The MOSIX migration policy <ref> [BSW93] </ref> is based on a restriction that is similar to the criterion we are proposing: the age of the process must exceed the migration cost. Thus, the slowdown imposed on the migrant process (due to migration) must be less than 2.0.
Reference: [CCK + 95] <author> Jeremy Casas, Dan L. Clark, Ravi Konuru, Steve W. Otto, Robert M. Prouty, and Jonathan Walpole. Mpvm: </author> <title> A migration transparent version of pvm. </title> <journal> Computing Systems, </journal> <volume> 8(2) </volume> <pages> 171-216, </pages> <month> Spring </month> <year> 1995. </year>
Reference-contexts: migration. (The following taxonomy is based in large part on [Nut94].) The following systems have implemented explicit remote execution and/or explicit preemptive migration; that is, both forms of migration are only performed at the user's request: Accent [Zay87], Locus [Thi91], Utopia [ZWZD93], DEMOS/MP [PM83], V [TLC85], NEST [AE87], and MIST <ref> [CCK + 95] </ref>. Some other systems provide implicit remote execution, but perform preemptive migration only at the request of a user or for reasons other than load balancing (such as preserving autonomy): Amoeba [TvRaHvSS90], Charlotte [AF89], Sprite [DO91], Condor [LLM88], and Mach [Mil93].
Reference: [CK87] <author> Thomas L. Casavant and Jon G. Kuhl. </author> <title> Analysis of three dynamic distributed load-balancing strategies with varying global information requirements. </title> <booktitle> In 7th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 185-192, </pages> <month> September </month> <year> 1987. </year>
Reference-contexts: Some of these studies have focused on load balancing by remote execution ([LM82], [WM85], <ref> [CK87] </ref>, [Zho87], [PTS88], [Kun91], [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration ([ELZ88], [KL88]).
Reference: [DHB95] <author> Allen B. Downey and Mor Harchol-Balter. </author> <title> A note on "The limited performance benefits of migrating active processes for load sharing". </title> <type> Technical Report UCB//CSD-95-888, </type> <institution> University of California, Berke-ley, </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: Also, [ELZ88] use a degenerate hyperexponential distribution of lifetimes that includes many jobs with zero lifetime, and far fewer short jobs (0 - 1 seconds) than we observed. For a more detailed explanation of this distribution and its effect on the study, see <ref> [DHB95] </ref>. [KL88] use a hyperexponential lifetime distribution that approximates closely the distribution we observed; as a result, their findings are largely in accord with ours. One difference between their work and ours is that they used a synthetic workload with Poisson arrivals.
Reference: [DO91] <author> Fred Douglis and John Ousterhout. </author> <title> Transparent process migration: Design alternatives and the sprite implementation. </title> <journal> Software Practice and Experience, </journal> <volume> 21(8) </volume> <pages> 757-785, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Some other systems provide implicit remote execution, but perform preemptive migration only at the request of a user or for reasons other than load balancing (such as preserving autonomy): Amoeba [TvRaHvSS90], Charlotte [AF89], Sprite <ref> [DO91] </ref>, Condor [LLM88], and Mach [Mil93]. Although these systems are capable of migrating active processes (with varying degrees of transparency), none have implemented a policy that specifies which processes should be preempted for purposes of load balancing. <p> In general, non-preemptive load balancing strategies depend on a priori information about processes; e.g., explicit knowledge about the runtimes of processes or user-provided lists of migratable processes ([AE87], [LL90], <ref> [DO91] </ref>, [ZWZD93]). fit. To the right: the same distribution shown on a log-log scale. <p> thus: cost of remote execution = r cost of preemptive migration = f + m=b We refer to the quotient m=b as the memory transfer cost. 4.1 Memory transfer costs The amount of a process' memory that must be transferred during preemptive migration depends on properties of the distributed system. <ref> [DO91] </ref> have an excellent discussion of this issue, and we borrow from them here. At the most, it might be necessary to transfer a process' entire memory. <p> The cost of remote execution, r, on a typical UNIX workstation connected to an Ethernet is 1 - 4 seconds. Systems that use remote execution for load sharing have made an effort to reduce this cost. On Sprite <ref> [DO91] </ref> r :33 seconds. Similarly for GLUNIX [VGA94], an operating system designed for networks of workstations connected by an ATM network, r = :25 - :5 seconds [Vah95].
Reference: [EB93] <author> D. J. Evans and W. U. N. Butt. </author> <title> Dynamic load balancing using task-transfer probablilites. </title> <journal> Parallel Computing, </journal> <volume> 19 </volume> <pages> 897-916, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Thus, the median remaining lifetime of a process is equal to its current age. Despite the [LO86] study, many researchers have continued to assume an exponential process lifetime distribution in their analysis of migration strategies (e.g., [MTS90], [BK90] <ref> [EB93] </ref>, [LR93]). The reasons for assuming an exponential lifetime distribution include: (1) analytic tractability, and (2) the belief that the exponential distribution is close enough to real distributions that the results of the analyses are not affected.
Reference: [ELZ86] <author> Derek L. Eager, Edward D. Lazowska, and John Za-horjan. </author> <title> Adaptive load sharing in homogeneous distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 12(5) </volume> <pages> 662-675, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: Some of these studies have focused on load balancing by remote execution ([LM82], [WM85], [CK87], [Zho87], [PTS88], [Kun91], [HJ90], <ref> [ELZ86] </ref>); others have compared the performance of systems with and without preemptive migration ([ELZ88], [KL88]).
Reference: [ELZ88] <author> Derek L. Eager, Edward D. Lazowska, and John Za-horjan. </author> <title> The limited performance benefits of migrating active processes for load sharing. </title> <booktitle> In SIGMETRICS, </booktitle> <pages> pages 662-675, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Some of these studies have focused on load balancing by remote execution ([LM82], [WM85], [CK87], [Zho87], [PTS88], [Kun91], [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration (<ref> [ELZ88] </ref>, [KL88]). Our work differs from [ELZ88] in both system model and workload description. [ELZ88] model a server farm in which incoming jobs have no affinity for a particular processor, and thus the cost of initial placement (remote execution) is free. <p> Some of these studies have focused on load balancing by remote execution ([LM82], [WM85], [CK87], [Zho87], [PTS88], [Kun91], [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration (<ref> [ELZ88] </ref>, [KL88]). Our work differs from [ELZ88] in both system model and workload description. [ELZ88] model a server farm in which incoming jobs have no affinity for a particular processor, and thus the cost of initial placement (remote execution) is free. <p> This is different from our model, a network of workstations, in which incoming jobs arrive at a particular host and the cost of moving them away, even by remote execution, is significant. Also, <ref> [ELZ88] </ref> use a degenerate hyperexponential distribution of lifetimes that includes many jobs with zero lifetime, and far fewer short jobs (0 - 1 seconds) than we observed.
Reference: [GGI + 91] <author> G.W. Gerrity, A. Goscinski, J. Indulska, W. Toomey, and W. Zhu. </author> <title> RHODOS-a testbed for studying design issues in distributed operating systems. In Towards Network Globalization (SICON 91): </title> <booktitle> 2nd International Conference on Networks, </booktitle> <pages> pages 268-274, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Although these systems are capable of migrating active processes (with varying degrees of transparency), none have implemented a policy that specifies which processes should be preempted for purposes of load balancing. Only a few systems have implemented automated load balancing policies with preemptive migration: MOSIX [BSW93] and RHODOS <ref> [GGI + 91] </ref>. The MOSIX load balancing scheme is similar to the strategies recommended in this paper; our results support their claim that their scheme is effective and robust.
Reference: [HJ90] <author> Anna Hac and Xiaowei Jin. </author> <title> Dynamic load balancing in a distributed system using a sender-initiated algorithm. </title> <journal> Journal of Systems Software, </journal> <volume> 11 </volume> <pages> 79-94, </pages> <year> 1990. </year>
Reference-contexts: Some of these studies have focused on load balancing by remote execution ([LM82], [WM85], [CK87], [Zho87], [PTS88], [Kun91], <ref> [HJ90] </ref>, [ELZ86]); others have compared the performance of systems with and without preemptive migration ([ELZ88], [KL88]).
Reference: [HP90] <author> John L. Hennessy and David A. Patterson. </author> <title> Computer Architecture A Quantitative Approach. </title> <publisher> Mor-gan Kaufmann Publishers, </publisher> <address> San Mateo, CA, </address> <year> 1990. </year>
Reference-contexts: For each run, we then take the ratio of the means (standard deviations) of the two strategies. Lastly we take the geometric mean <ref> [HP90] </ref> of the eight ratios. The two axes in Figure 4 represent the two components of the cost of preemptive migration, namely the fixed cost (f ) and the MMTC (m=b). As mentioned above, the cost of non-preemptive migration (r) is fixed at :3 seconds.
Reference: [KL88] <author> Phillip Krueger and Miron Livny. </author> <title> A comparison of preemptive and non-preemptive load distributing. </title> <booktitle> In 8th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 123-130, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Some of these studies have focused on load balancing by remote execution ([LM82], [WM85], [CK87], [Zho87], [PTS88], [Kun91], [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration ([ELZ88], <ref> [KL88] </ref>). Our work differs from [ELZ88] in both system model and workload description. [ELZ88] model a server farm in which incoming jobs have no affinity for a particular processor, and thus the cost of initial placement (remote execution) is free. <p> Also, [ELZ88] use a degenerate hyperexponential distribution of lifetimes that includes many jobs with zero lifetime, and far fewer short jobs (0 - 1 seconds) than we observed. For a more detailed explanation of this distribution and its effect on the study, see [DHB95]. <ref> [KL88] </ref> use a hyperexponential lifetime distribution that approximates closely the distribution we observed; as a result, their findings are largely in accord with ours. One difference between their work and ours is that they used a synthetic workload with Poisson arrivals. <p> One difference between their work and ours is that they used a synthetic workload with Poisson arrivals. The workload we observed, and used in our trace-driven simulations, exhibits serial correlation; i.e. it is more bursty than a Poisson process. Also, our migration policy differs from <ref> [KL88] </ref> in that our proposed migration policy uses preemptive migration exclusively, rather than in addition to, remote execution. Like us, [BF81] discuss the distribution of process lifetimes and its effect on preemptive migration policy, but their hypothetical distributions are not based on system measurements. <p> The motivation for this model is that by using more than one exponential distribution, it is possible to match an observed distribution more closely. In cases where the hyperexponential distribution has enough branches to fit the observed distribution well, as in <ref> [KL88] </ref>, this model has been successful. The remainder of this section focuses on our distribution measurements. We observed that long processes (with lifetimes greater than 1 second) have a predictable and consistent distribution. Section 2.1 describes this distribution. <p> We chose a threshold on mean duration that is empirically optimal (for this set of 7 In our informal study of processes in our department, we did not detect any correlations between memory size and process CPU usage. <ref> [KL88] </ref> make the same observation in their department. runs). Adding more names to the list detracts from the performance of the system, as it allows more short-lived processes to be migrated. <p> Although this age threshold offers a strict limit on the slowdown seen by a migrant process, it imposes greater slowdowns on the processes that would have benefited if a younger process were allowed to migrate away. A previous simulation study <ref> [KL88] </ref> chose a lower value for this parameter (ff = 0:1), but did not explain how it was chosen. best fixed parameter varies considerably from run to run, and appears to be roughly correlated with the average load during the run (the runs are sorted in increasing order of total load).
Reference: [Kun91] <author> Thomas Kunz. </author> <title> The influence of different workload descriptions on a heuristic load balancing scheme. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(7) </volume> <pages> 725-730, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Since processes may be delayed while on the run queue or while migrating, the slowdown imposed on a process is 1 The other half of a load balancing strategy is the location policy | the selection a new host for the migrated process. Previous work ([Zho87] and <ref> [Kun91] </ref>), has suggested that choosing the target host with the shortest CPU run queue is both simple and effective. Our work confirms the relative unimportance of location policy. <p> Some of these studies have focused on load balancing by remote execution ([LM82], [WM85], [CK87], [Zho87], [PTS88], <ref> [Kun91] </ref>, [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration ([ELZ88], [KL88]). <p> We found that current (instantaneous) load is the best single predictor, and that using several predictive variables in combination did not greatly improve the accuracy of prediction. These results are in accord with Zhou's thesis, [Zho87] and with <ref> [Kun91] </ref>. The MOSIX migration policy [BSW93] is based on a restriction that is similar to the criterion we are proposing: the age of the process must exceed the migration cost. Thus, the slowdown imposed on the migrant process (due to migration) must be less than 2.0.
Reference: [LL90] <author> M. Litzkow and M. Livny. </author> <title> Experience with the Condor distributed batch system. </title> <booktitle> In IEEE Workshop on Experimental Distributed Systems, </booktitle> <pages> pages 97-101, </pages> <year> 1990. </year>
Reference-contexts: In general, non-preemptive load balancing strategies depend on a priori information about processes; e.g., explicit knowledge about the runtimes of processes or user-provided lists of migratable processes ([AE87], <ref> [LL90] </ref>, [DO91], [ZWZD93]). fit. To the right: the same distribution shown on a log-log scale.
Reference: [LLM88] <author> M.J. Litzkow, M. Livny, and M.W. </author> <title> Mutka. Condor ahunter of idle workstations. </title> <booktitle> In 8th International Conference on Distributed Computing Systems, </booktitle> <month> June </month> <year> 1988. </year>
Reference-contexts: Some other systems provide implicit remote execution, but perform preemptive migration only at the request of a user or for reasons other than load balancing (such as preserving autonomy): Amoeba [TvRaHvSS90], Charlotte [AF89], Sprite [DO91], Condor <ref> [LLM88] </ref>, and Mach [Mil93]. Although these systems are capable of migrating active processes (with varying degrees of transparency), none have implemented a policy that specifies which processes should be preempted for purposes of load balancing.
Reference: [LM82] <author> Miron Livny and Myron Melman. </author> <title> Load balancing in homogeneous broadcast distributed systems. </title> <booktitle> In ACM Computer Network Performance Symposium, </booktitle> <pages> pages 47-55, </pages> <month> April </month> <year> 1982. </year>
Reference: [LO86] <author> W. E. Leland and T. J. Ott. </author> <title> Load-balancing heuristics and process behavior. </title> <booktitle> In Proceedings of Performance and ACM Sigmetrics, </booktitle> <volume> volume 14, </volume> <pages> pages 54-69, </pages> <year> 1986. </year>
Reference-contexts: As a rule of thumb, the probability that a process with CPU age of one second uses more than T seconds of total CPU time is 1=T (see Figure 1). Our measurements are consistent with the results of <ref> [LO86] </ref>, but this prior work has been incorporated in few subsequent analytic and simulator load balancing studies. This omission is unfortunate, since the results of these load balancing studies are quite sensitive to the lifetime model. <p> In 1986 <ref> [LO86] </ref> proposed a functional form for the process lifetime distribution, based on measurements of the lifetimes of 9.5 million UNIX processes between 1984 and 1985. Leland and Ott concluded that process lifetimes have a UBNE (used-better-than-new-in-expectation) type of distribution. <p> In contrast to <ref> [LO86] </ref>, Rommel ([Rom91]) claimed that his measurements show that "long processes have exponential service times." Because of the importance of the process lifetime distribution to load balancing policies, we performed an independent study of this distribution, which we describe in Section 2.1. 2 In contrast, the exponential distribution is memoryless; the <p> Porsche is a less frequently-used machine, used primarily for research on scientific computing. Bugs is a heavily-used machine, used primarily for multimedia research. Faith is an infrequently-used machine, used both for video applications and system administration. In our study the functional form proposed by <ref> [LO86] </ref> fits all our observed distributions well, for processes with lifetimes greater than 1 second. <p> The probability that a process with age T seconds uses at least an additional T seconds of CPU time is about 1=2. Thus, the median remaining lifetime of a process is equal to its current age. Despite the <ref> [LO86] </ref> study, many researchers have continued to assume an exponential process lifetime distribution in their analysis of migration strategies (e.g., [MTS90], [BK90] [EB93], [LR93]). <p> For example, the distributions we observed all have a tail of long-lived jobs (i.e., the distributions have high variance). An exponential distribution with the same mean would have lower variance; it lacks the tail of long lived jobs. * Although the alternate functional form that we (and <ref> [LO86] </ref>) propose cannot be used in queueing models as easily as an exponential distribution, it nevertheless lends itself to some forms of analysis, as we show in Section 3.2. <p> According to our process lifetime measurements (Section 2), typically fewer than 3:5% of processes live longer than 2 seconds, yet these processes make up more than 60% of the total CPU load. This is due to the long tail of the process lifetime distribution (see Figure 2). <ref> [LO86] </ref> make a similar observation.
Reference: [LR93] <author> Hwa-Chun Lin and C.S. Raghavendra. </author> <title> A state-aggregation method for analyzing dynamic load-balancing policies. </title> <booktitle> In IEEE 13th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 482-489, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Thus, the median remaining lifetime of a process is equal to its current age. Despite the [LO86] study, many researchers have continued to assume an exponential process lifetime distribution in their analysis of migration strategies (e.g., [MTS90], [BK90] [EB93], <ref> [LR93] </ref>). The reasons for assuming an exponential lifetime distribution include: (1) analytic tractability, and (2) the belief that the exponential distribution is close enough to real distributions that the results of the analyses are not affected.
Reference: [Mil93] <author> Dejan S. Milojicic. </author> <title> Load Distribution: Implementation for the Mach Microkernel. </title> <type> PhD Dissertation, </type> <institution> University of Kaiserslautern, </institution> <year> 1993. </year>
Reference-contexts: Some other systems provide implicit remote execution, but perform preemptive migration only at the request of a user or for reasons other than load balancing (such as preserving autonomy): Amoeba [TvRaHvSS90], Charlotte [AF89], Sprite [DO91], Condor [LLM88], and Mach <ref> [Mil93] </ref>. Although these systems are capable of migrating active processes (with varying degrees of transparency), none have implemented a policy that specifies which processes should be preempted for purposes of load balancing.
Reference: [MTS90] <author> Ravi Mirchandaney, Don Towsley, and John A. Stankovic. </author> <title> Adaptive load sharing in heterogeneous distributed systems. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 9 </volume> <pages> 331-346, </pages> <year> 1990. </year>
Reference-contexts: Thus, the median remaining lifetime of a process is equal to its current age. Despite the [LO86] study, many researchers have continued to assume an exponential process lifetime distribution in their analysis of migration strategies (e.g., <ref> [MTS90] </ref>, [BK90] [EB93], [LR93]). The reasons for assuming an exponential lifetime distribution include: (1) analytic tractability, and (2) the belief that the exponential distribution is close enough to real distributions that the results of the analyses are not affected.
Reference: [Nut94] <author> Mark Nuttall. </author> <title> Survey of systems providing process or object migration. </title> <type> Technical Report DoC94/10, </type> <institution> Imperial College Research Report, </institution> <year> 1994. </year>
Reference-contexts: Of the ones that do, the majority are based on implicit remote execution of newborn processes; few use preemptive migration. (The following taxonomy is based in large part on <ref> [Nut94] </ref>.) The following systems have implemented explicit remote execution and/or explicit preemptive migration; that is, both forms of migration are only performed at the user's request: Accent [Zay87], Locus [Thi91], Utopia [ZWZD93], DEMOS/MP [PM83], V [TLC85], NEST [AE87], and MIST [CCK + 95].
Reference: [PM83] <editor> M.L. Powell and B.P. Miller. </editor> <booktitle> Process migrations in DEMOS/MP. In ACM-SIGOPS 6th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 110-119, </pages> <month> November </month> <year> 1983. </year>
Reference-contexts: execution of newborn processes; few use preemptive migration. (The following taxonomy is based in large part on [Nut94].) The following systems have implemented explicit remote execution and/or explicit preemptive migration; that is, both forms of migration are only performed at the user's request: Accent [Zay87], Locus [Thi91], Utopia [ZWZD93], DEMOS/MP <ref> [PM83] </ref>, V [TLC85], NEST [AE87], and MIST [CCK + 95]. Some other systems provide implicit remote execution, but perform preemptive migration only at the request of a user or for reasons other than load balancing (such as preserving autonomy): Amoeba [TvRaHvSS90], Charlotte [AF89], Sprite [DO91], Condor [LLM88], and Mach [Mil93].
Reference: [PTS88] <author> Spiridon Pulidas, Don Towsley, and John A. Stankovic. </author> <title> Imbedding gradient estimators in load balancing algorithms. </title> <booktitle> In 8th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 482-490, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Some of these studies have focused on load balancing by remote execution ([LM82], [WM85], [CK87], [Zho87], <ref> [PTS88] </ref>, [Kun91], [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration ([ELZ88], [KL88]).
Reference: [Rom91] <author> C. Gary Rommel. </author> <title> The probability of load balancing success in a homogeneous network. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17 </volume> <pages> 922-933, </pages> <year> 1991. </year>
Reference: [Ros65] <author> Robert F. Rosin. </author> <title> Determining a computing center en vironment. </title> <journal> Communications of the ACM, </journal> <volume> 8(7), </volume> <year> 1965. </year>
Reference-contexts: Thus, in our estimates of slowdown, we will assume that the future load on a host is equal to the current load. 2 Distribution of lifetimes The general shape of the distribution of process lifetimes in an academic environment has been known for a long time <ref> [Ros65] </ref>: there are many short jobs and a few long jobs, and the variance of the distribution is greater than that of an exponential distribution.
Reference: [SPG94] <author> A. Silberschatz, J.L. Peterson, and P.B. Galvin. </author> <title> Operating System Concepts, 4th Edition. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: Most processes suffer small slowdowns, but the processes in the tail of the distribution are more noticeable and annoying to users. Therefore, we will also consider the following two metrics: variance of slowdown : This metric is often cited as a measure of the unpredictability of response time <ref> [SPG94] </ref>, which is a nuisance for users trying to schedule tasks.
Reference: [Sve90] <author> Anders Svensson. </author> <title> History, an intelligent load sharing filter. </title> <booktitle> In IEEE 10th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 546-553, </pages> <year> 1990. </year>
Reference-contexts: Since the cost of remote execution is usually significant relative to the average lifetime of processes, implicit non-preemptive policies require some a priori information about job lifetimes. This information is often implemented as an eligibility list (e.g. <ref> [Sve90] </ref>) that specifies (by process name) which processes may be migrated. In contrast, most preemptive migration policies do not use a priori information, since this it is often difficult to maintain and preemptive strategies can perform well without it. <p> We compare two migration strategies: our proposed age-based preemptive migration strategy (Section 3.2) and a non-preemptive strategy that migrates newborn processes according to the process name (similar to strategies proposed by [WZKL93] and <ref> [Sve90] </ref>). Although we use a simple name-based strategy, we give it the benefit of several unfair advantages; for example, the name-lists are derived from the same trace data used by the simulator. Section 5.1 describes the simulator and the two strategies in more detail.
Reference: [Thi91] <author> G. Thiel. </author> <title> Locus operating system, a transparent system. </title> <journal> Computer Communications, </journal> <volume> 14(6) </volume> <pages> 336-346, </pages> <year> 1991. </year>
Reference-contexts: based on implicit remote execution of newborn processes; few use preemptive migration. (The following taxonomy is based in large part on [Nut94].) The following systems have implemented explicit remote execution and/or explicit preemptive migration; that is, both forms of migration are only performed at the user's request: Accent [Zay87], Locus <ref> [Thi91] </ref>, Utopia [ZWZD93], DEMOS/MP [PM83], V [TLC85], NEST [AE87], and MIST [CCK + 95].
Reference: [TLC85] <author> Marvin M. Theimer, Keith A. Lantz, and David R Cheriton. </author> <title> Preemptable remote execution facilities for the V-System. </title> <booktitle> In ACM-SIGOPS 10th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 2-12, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: newborn processes; few use preemptive migration. (The following taxonomy is based in large part on [Nut94].) The following systems have implemented explicit remote execution and/or explicit preemptive migration; that is, both forms of migration are only performed at the user's request: Accent [Zay87], Locus [Thi91], Utopia [ZWZD93], DEMOS/MP [PM83], V <ref> [TLC85] </ref>, NEST [AE87], and MIST [CCK + 95]. Some other systems provide implicit remote execution, but perform preemptive migration only at the request of a user or for reasons other than load balancing (such as preserving autonomy): Amoeba [TvRaHvSS90], Charlotte [AF89], Sprite [DO91], Condor [LLM88], and Mach [Mil93]. <p> When the process is restarted at the target host, it will retrieve these pages. In this case the cost of migration is proportional to the size of the resident set rather than the size of memory. In systems that use precopying (such as the V <ref> [TLC85] </ref> system), pages are transferred while the program continues to run at the source host. When the job stops execution at the source, it will have to transfer again any pages that have become dirty during the precopy.
Reference: [TvRaHvSS90] <author> A.S. Tanenbaum, R. van Renesse adn H. van Staveren, and G.J. Sharp. </author> <title> Experiences with the Amoeba distributed operating system. </title> <journal> Communications of the ACM, </journal> <pages> pages 336-346, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Some other systems provide implicit remote execution, but perform preemptive migration only at the request of a user or for reasons other than load balancing (such as preserving autonomy): Amoeba <ref> [TvRaHvSS90] </ref>, Charlotte [AF89], Sprite [DO91], Condor [LLM88], and Mach [Mil93]. Although these systems are capable of migrating active processes (with varying degrees of transparency), none have implemented a policy that specifies which processes should be preempted for purposes of load balancing.
Reference: [Vah95] <author> Amin Vahdat, </author> <year> 1995. </year> <type> Personal Communication. </type>
Reference-contexts: Systems that use remote execution for load sharing have made an effort to reduce this cost. On Sprite [DO91] r :33 seconds. Similarly for GLUNIX [VGA94], an operating system designed for networks of workstations connected by an ATM network, r = :25 - :5 seconds <ref> [Vah95] </ref>. The Utopia System takes ~ 1:0 seconds to establish a connection between source and target hosts, but once this is done, subsequent remote executions can take as little as :1 seconds [ZWZD93]. Sprite was implemented on a network of SPARCstation 1 workstations connected by a 10Mb/second Ethernet.
Reference: [VGA94] <author> Amin M. Vahdat, Douglas P. Ghormley, and Thomas E. Anderson. </author> <title> Efficient, portable, and robust extension of operating system functionality. </title> <type> Technical Report UCB//CSD-94-842, </type> <institution> University of California, Berkeley, </institution> <year> 1994. </year>
Reference-contexts: The cost of remote execution, r, on a typical UNIX workstation connected to an Ethernet is 1 - 4 seconds. Systems that use remote execution for load sharing have made an effort to reduce this cost. On Sprite [DO91] r :33 seconds. Similarly for GLUNIX <ref> [VGA94] </ref>, an operating system designed for networks of workstations connected by an ATM network, r = :25 - :5 seconds [Vah95].
Reference: [WM85] <author> Yung-Terng Wang and Robert J.T. Morris. </author> <title> Load sharing in distributed systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> c-94(3):204-217, </volume> <month> March </month> <year> 1985. </year>
Reference-contexts: Some of these studies have focused on load balancing by remote execution ([LM82], <ref> [WM85] </ref>, [CK87], [Zho87], [PTS88], [Kun91], [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration ([ELZ88], [KL88]).
Reference: [WZKL93] <author> J. Wang, S. Zhou, K.Ahmed, and W. Long. LS-BATCH: </author> <title> A distributed load sharing batch system. </title> <type> Technical Report CSRI-286, </type> <institution> Computer Systems Research Institute, University of Toronto, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: We compare two migration strategies: our proposed age-based preemptive migration strategy (Section 3.2) and a non-preemptive strategy that migrates newborn processes according to the process name (similar to strategies proposed by <ref> [WZKL93] </ref> and [Sve90]). Although we use a simple name-based strategy, we give it the benefit of several unfair advantages; for example, the name-lists are derived from the same trace data used by the simulator. Section 5.1 describes the simulator and the two strategies in more detail.
Reference: [Zay87] <author> E. R. Zayas. </author> <title> Attacking the process migration bottleneck. </title> <booktitle> In ACM-SIGOPS 11th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 13-24, </pages> <year> 1987. </year>
Reference-contexts: majority are based on implicit remote execution of newborn processes; few use preemptive migration. (The following taxonomy is based in large part on [Nut94].) The following systems have implemented explicit remote execution and/or explicit preemptive migration; that is, both forms of migration are only performed at the user's request: Accent <ref> [Zay87] </ref>, Locus [Thi91], Utopia [ZWZD93], DEMOS/MP [PM83], V [TLC85], NEST [AE87], and MIST [CCK + 95].
Reference: [Zho87] <author> Songnian Zhou. </author> <title> Performance studies for dynamic load balancing in distributed systems. </title> <type> PhD Dissertation, </type> <institution> University of California, Berkeley, </institution> <year> 1987. </year>
Reference-contexts: Some of these studies have focused on load balancing by remote execution ([LM82], [WM85], [CK87], <ref> [Zho87] </ref>, [PTS88], [Kun91], [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration ([ELZ88], [KL88]). <p> We found that current (instantaneous) load is the best single predictor, and that using several predictive variables in combination did not greatly improve the accuracy of prediction. These results are in accord with Zhou's thesis, <ref> [Zho87] </ref> and with [Kun91]. The MOSIX migration policy [BSW93] is based on a restriction that is similar to the criterion we are proposing: the age of the process must exceed the migration cost. Thus, the slowdown imposed on the migrant process (due to migration) must be less than 2.0.
Reference: [ZWZD93] <author> S. Zhou, J. Wang, X. Zheng, and P. Delisle. </author> <title> Utopia: a load-sharing facitlity for large heterogeneous distributed computing systems. </title> <journal> Software Practice and Expeience, </journal> <volume> 23(2) </volume> <pages> 1305-1336, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: implicit remote execution of newborn processes; few use preemptive migration. (The following taxonomy is based in large part on [Nut94].) The following systems have implemented explicit remote execution and/or explicit preemptive migration; that is, both forms of migration are only performed at the user's request: Accent [Zay87], Locus [Thi91], Utopia <ref> [ZWZD93] </ref>, DEMOS/MP [PM83], V [TLC85], NEST [AE87], and MIST [CCK + 95]. <p> In general, non-preemptive load balancing strategies depend on a priori information about processes; e.g., explicit knowledge about the runtimes of processes or user-provided lists of migratable processes ([AE87], [LL90], [DO91], <ref> [ZWZD93] </ref>). fit. To the right: the same distribution shown on a log-log scale. <p> The Utopia System takes ~ 1:0 seconds to establish a connection between source and target hosts, but once this is done, subsequent remote executions can take as little as :1 seconds <ref> [ZWZD93] </ref>. Sprite was implemented on a network of SPARCstation 1 workstations connected by a 10Mb/second Ethernet. On Sprite preemptive migrations took f = :33 seconds plus 1=b = 2:0 seconds per megabyte of memory transferred.
References-found: 42

