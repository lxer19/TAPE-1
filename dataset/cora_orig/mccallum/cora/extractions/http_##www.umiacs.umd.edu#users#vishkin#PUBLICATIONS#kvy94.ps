URL: http://www.umiacs.umd.edu/users/vishkin/PUBLICATIONS/kvy94.ps
Refering-URL: http://www.umiacs.umd.edu/users/vishkin/PUBLICATIONS/papers.html
Root-URL: 
Title: A Primal-Dual Parallel Approximation Technique Applied to Weighted Set and Vertex Cover  
Author: Samir Khuller Uzi Vishkin Neal Young 
Keyword: set cover, vertex cover, parallel algorithms, approximation algorithms.  
Abstract: We give an efficient deterministic parallel approximation algorithm for the minimum-weight vertex- and set-cover problems and their duals (edge/element packing). The algorithm is simple and suitable for distributed implementation. It fits no existing paradigm for fast, efficient parallel algorithms | it uses only "local" information at each step, yet is deterministic. (Generally, such algorithms have required randomization.) The result demonstrates that linear-programming primal-dual approximation techniques can lead to fast, efficient parallel algorithms. The presentation does not assume knowledge of such techniques.
Abstract-found: 1
Intro-found: 1
Reference: [ABI86] <author> N. Alon, L. Babai and A. Itai. </author> <title> A fast and simple randomized parallel algorithm for the maximal independent set problem. </title> <journal> Journal of Algorithms, </journal> <volume> 7 </volume> <pages> 567-583, </pages> <year> 1986. </year>
Reference-contexts: Also with Tel-Aviv University. Partially supported by NSF grants CCR-8906949 and CCR-9111348. Email: vishkin@umiacs.umd.edu. z Institute for Advanced Computer Studies (UMIACS), University of Maryland, College Park, MD 20742. Partially supported by NSF grants CCR-8906949 and CCR-9111348. Email: young@umiacs.umd.edu. 1 deterministic. Generally, such algorithms have required randomization (e.g., <ref> [II86, ABI86, Lu86] </ref>). Given an n-vertex, m-edge graph G = (V; E) with vertex weights and an * &gt; 0, our algorithm returns a vertex cover of weight at most 2=(1 *) times the minimum. <p> The intuition behind our complexity analysis relies on a lemma of general interest for parallel graph algorithms (Lemma 6). The lemma has previously found application in the analyses of randomized parallel graph algorithms: Israeli and Itai's maximum-matching algorithm [II86] and Alon, Babai and Itai's maximal-independent-set algorithm <ref> [ABI86] </ref>. In concurrent independent work, Cohen gives a parallel approximation algorithm for maximum flow in shallow networks [Co92]. If network flows are viewed as packings of source-to-sink paths, then maximal packings correspond to blocking flows. <p> This, intuitively, is why the algorithm makes progress. This lemma is of independent interest: it drives the analyses of the running times of Israeli and Itai's randomized maximal matching algorithm [II86] and of Alon, Babai, and Itai's randomized maximal independent set algorithm <ref> [ABI86] </ref>. <p> Subsequently all operations involve only integer arithmetic on smaller, non-negative integers. Acknowledgments: We would like to thank Michael Luby and an anonymous referee for pointing out connections to the randomized algorithms of <ref> [ABI86, Lu86] </ref> and to the work by Hochbaum [Ho82], respectively.
Reference: [BRS89] <author> B. Berger, J. Rompel, and P. Shor. </author> <title> Efficient NC algorithms for set cover with applications to learning and geometry. </title> <booktitle> In Proc. 30th Annual Symp. on Foundations of Computer Science, </booktitle> <pages> pages 54-59, </pages> <month> October </month> <year> 1989. </year> <institution> Research Triangle Park, NC. </institution> <note> To appear in Journal of Algorithms (Special issue on FOCS-89). 8 </note>
Reference-contexts: Chvatal's weighted-set-cover algorithm guarantees a set cover of weight at most ln times the minimum, where is the maximum set size [Ch79, Lo75, Jo74]. Berger, Rompel, and Shor <ref> [BRS89] </ref> give a parallel algorithm that guarantees a factor of (1 + *) ln . Their algorithm uses a linear number of processors and runs in polylogarithmic time with some restrictions on the weights.
Reference: [BE81] <author> R. Bar-Yehuda and S. </author> <title> Even. A linear-time approximation algorithm for the weighted vertex cover problem. </title> <journal> Journal of Algorithms, </journal> <volume> 2 </volume> <pages> 198-203, </pages> <year> 1981. </year>
Reference-contexts: Since an optimal dual solution can be found in polynomial time by solving the linear program, Hochbaum obtained a polynomial-time algorithm. Bar-Yehuda and Even <ref> [BE81] </ref> observed that sequentially raising the edge-packing weights as much as possible yields a maximal edge packing, thus obtaining a linear-time algorithm. <p> The size M is the sum of the set sizes. The dual problems are also equivalent. 2 Reduction of Vertex Cover to *-Maximal Packing We first reduce our problem to the problem of finding what we call an *-maximal packing. This reduction generalizes <ref> [Ho82, BE81] </ref>, who considered * = 0. Lemma 1 (Duality) Let C be an arbitrary vertex cover and p an arbitrary edge packing. Then p (E) w (C).
Reference: [BE85] <author> R. Bar-Yehuda and S. </author> <title> Even. A local-ratio theorem for approximating the weighted vertex cover problem. </title> <journal> Annals of Discrete Math., </journal> <volume> 25 </volume> <pages> 27-45, </pages> <year> 1985. </year>
Reference-contexts: According to Motwani's lecture notes on approximation algorithms [Mot92], which contain a survey of results on vertex cover, the best approximation ratio known is 2 log log n 2 log n , due to Bar-Yehuda and Even <ref> [BE85] </ref> and to Monien and Speckenmeyer [MS85]. In [Ho83], Hochbaum gives a (2 2=k)- approximation algorithm, where k is the maximum vertex degree, and she conjectures that 2 there is no polynomial-time c-approximation algorithm for any c &lt; 2 unless P=NP.
Reference: [Ch79] <author> V. Chvatal. </author> <title> A greedy heuristic for the set-covering problem. </title> <journal> Mathematics of Operations Research, </journal> <volume> 4(3) </volume> <pages> 233-235, </pages> <year> 1979. </year>
Reference-contexts: 1 Introduction The linear-programming primal-dual method for obtaining sequential algorithms for exact optimization problems is well studied [Ch83]. Primal-dual techniques have also been used to obtain sequential approximation algorithms (e.g., for NP-hard problems <ref> [Ch79, Ho82, etc.] </ref> and for on-line problems [You]). In this paper, we apply primal-dual techniques to obtain a deterministic parallel approximation algorithm for the minimum-weight vertex- and set-cover problems and their duals, maximum-weight edge and element packing. <p> Chvatal's weighted-set-cover algorithm guarantees a set cover of weight at most ln times the minimum, where is the maximum set size <ref> [Ch79, Lo75, Jo74] </ref>. Berger, Rompel, and Shor [BRS89] give a parallel algorithm that guarantees a factor of (1 + *) ln . Their algorithm uses a linear number of processors and runs in polylogarithmic time with some restrictions on the weights.
Reference: [Ch83] <author> V. Chvatal. </author> <title> Linear Programming. </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <year> 1983. </year>
Reference-contexts: 1 Introduction The linear-programming primal-dual method for obtaining sequential algorithms for exact optimization problems is well studied <ref> [Ch83] </ref>. Primal-dual techniques have also been used to obtain sequential approximation algorithms (e.g., for NP-hard problems [Ch79, Ho82, etc.] and for on-line problems [You]).
Reference: [Cl83] <author> K. Clarkson. </author> <title> A modification of the greedy algorithm for vertex cover. </title> <journal> Information Processing Letters, </journal> <volume> 16 </volume> <pages> 23-25, </pages> <year> 1983. </year>
Reference-contexts: In <ref> [Cl83] </ref>, Clarkson showed that in a restricted class of graphs, approximation ratios better than 2 could be obtained for vertex cover. Clarkson gave the first parallel approximation algorithm | a relatively complicated randomized algorithm [Cl91].
Reference: [Cl91] <author> K. Clarkson. </author> <title> A randomized parallel algorithm for weighted vertex cover. </title> <type> Unpublished manuscript, </type> <month> October </month> <year> 1991. </year>
Reference-contexts: In [Cl83], Clarkson showed that in a restricted class of graphs, approximation ratios better than 2 could be obtained for vertex cover. Clarkson gave the first parallel approximation algorithm | a relatively complicated randomized algorithm <ref> [Cl91] </ref>. According to Motwani's lecture notes on approximation algorithms [Mot92], which contain a survey of results on vertex cover, the best approximation ratio known is 2 log log n 2 log n , due to Bar-Yehuda and Even [BE85] and to Monien and Speckenmeyer [MS85].
Reference: [Co92] <author> E. Cohen. </author> <title> Approximate max flow on small depth networks. </title> <booktitle> In Proc. 33rd Annual Symp. on Foundations of Computer Science, </booktitle> <pages> pages 648-658, </pages> <month> October </month> <year> 1992. </year> <institution> Pittsburgh, </institution> <address> PA. </address>
Reference-contexts: The lemma has previously found application in the analyses of randomized parallel graph algorithms: Israeli and Itai's maximum-matching algorithm [II86] and Alon, Babai and Itai's maximal-independent-set algorithm [ABI86]. In concurrent independent work, Cohen gives a parallel approximation algorithm for maximum flow in shallow networks <ref> [Co92] </ref>. If network flows are viewed as packings of source-to-sink paths, then maximal packings correspond to blocking flows. Cohen gives an *-blocking flow algorithm that is similar in spirit to our algorithm, although a number of different issues arise.
Reference: [GPST92] <author> A. Goldberg, S. Plotkin, D. Shmoys, E. Tardos. </author> <title> Interior point methods in parallel computation. </title> <journal> SIAM Journal on Computing, </journal> <volume> 21(1) </volume> <pages> 140-150, </pages> <year> 1992. </year>
Reference-contexts: Hochbaum's original algorithm can be parallelized by employing Luby and Nisan's algorithm; the resulting algorithm would obtain an approximation ratio comparable to ours and have an incomparable running time (growing linearly with 1=*, but not with r). Previously, Goldberg et al. <ref> [GPST92] </ref> gave a parallel primal-dual algorithm to find (exactly) maximum-weight bipartite matchings.
Reference: [Ho82] <author> D. Hochbaum. </author> <title> Approximation algorithms for set covering and vertex cover problems. </title> <journal> SIAM J. Computing, </journal> <volume> 11 </volume> <pages> 555-556, </pages> <year> 1982. </year>
Reference-contexts: 1 Introduction The linear-programming primal-dual method for obtaining sequential algorithms for exact optimization problems is well studied [Ch83]. Primal-dual techniques have also been used to obtain sequential approximation algorithms (e.g., for NP-hard problems <ref> [Ch79, Ho82, etc.] </ref> and for on-line problems [You]). In this paper, we apply primal-dual techniques to obtain a deterministic parallel approximation algorithm for the minimum-weight vertex- and set-cover problems and their duals, maximum-weight edge and element packing. <p> If the weights are integers and 1=* is less than the sum of the vertex (resp. set) weights, then the weight of the cover is at most 2 (resp. r) times the minimum. 1.1 Related Work The first r-approximation algorithm for weighted vertex/set cover was due to Hochbaum <ref> [Ho82] </ref>. She considered the relaxation of the natural integer linear program for the problem. The dual of this program is maximum edge packing. <p> The size M is the sum of the set sizes. The dual problems are also equivalent. 2 Reduction of Vertex Cover to *-Maximal Packing We first reduce our problem to the problem of finding what we call an *-maximal packing. This reduction generalizes <ref> [Ho82, BE81] </ref>, who considered * = 0. Lemma 1 (Duality) Let C be an arbitrary vertex cover and p an arbitrary edge packing. Then p (E) w (C). <p> Subsequently all operations involve only integer arithmetic on smaller, non-negative integers. Acknowledgments: We would like to thank Michael Luby and an anonymous referee for pointing out connections to the randomized algorithms of [ABI86, Lu86] and to the work by Hochbaum <ref> [Ho82] </ref>, respectively.
Reference: [Ho83] <author> D. Hochbaum. </author> <title> Efficient bounds for the stable set, vertex cover, and set packing problems. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 6 </volume> <pages> 243-254, </pages> <year> 1983. </year>
Reference-contexts: According to Motwani's lecture notes on approximation algorithms [Mot92], which contain a survey of results on vertex cover, the best approximation ratio known is 2 log log n 2 log n , due to Bar-Yehuda and Even [BE85] and to Monien and Speckenmeyer [MS85]. In <ref> [Ho83] </ref>, Hochbaum gives a (2 2=k)- approximation algorithm, where k is the maximum vertex degree, and she conjectures that 2 there is no polynomial-time c-approximation algorithm for any c &lt; 2 unless P=NP.
Reference: [II86] <author> A. Israeli and A. Itai. </author> <title> A fast and simple randomized parallel algorithm for maximal matching. </title> <journal> Information Processing Letters, </journal> <volume> 22 </volume> <pages> 77-80, </pages> <month> January </month> <year> 1986. </year>
Reference-contexts: Also with Tel-Aviv University. Partially supported by NSF grants CCR-8906949 and CCR-9111348. Email: vishkin@umiacs.umd.edu. z Institute for Advanced Computer Studies (UMIACS), University of Maryland, College Park, MD 20742. Partially supported by NSF grants CCR-8906949 and CCR-9111348. Email: young@umiacs.umd.edu. 1 deterministic. Generally, such algorithms have required randomization (e.g., <ref> [II86, ABI86, Lu86] </ref>). Given an n-vertex, m-edge graph G = (V; E) with vertex weights and an * &gt; 0, our algorithm returns a vertex cover of weight at most 2=(1 *) times the minimum. <p> The intuition behind our complexity analysis relies on a lemma of general interest for parallel graph algorithms (Lemma 6). The lemma has previously found application in the analyses of randomized parallel graph algorithms: Israeli and Itai's maximum-matching algorithm <ref> [II86] </ref> and Alon, Babai and Itai's maximal-independent-set algorithm [ABI86]. In concurrent independent work, Cohen gives a parallel approximation algorithm for maximum flow in shallow networks [Co92]. If network flows are viewed as packings of source-to-sink paths, then maximal packings correspond to blocking flows. <p> This, intuitively, is why the algorithm makes progress. This lemma is of independent interest: it drives the analyses of the running times of Israeli and Itai's randomized maximal matching algorithm <ref> [II86] </ref> and of Alon, Babai, and Itai's randomized maximal independent set algorithm [ABI86].
Reference: [Ja92] <author> J. JaJa. </author> <title> An Introduction to Parallel Algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: Consequently, the correctness and the approximation ratio of the algorithm are established by Lemmas 2 and 3. Using standard techniques <ref> [Ja92] </ref>, each iteration of the while loop beginning with q remaining edges can be done in O (ln q) time and O (r q) operations on an EREW-PRAM. 5 4 Complexity Analysis In this section, we prove our main theorem: Main Theorem The algorithm requires O (r ln 2 m ln <p> This is m + M ln 1 * . Hence there are O (r M ln 1 * ) operations. Processors. Using standard techniques, the operations can be efficiently scheduled with out increasing the time or the operations by more than a constant, so by the Work-Time Scheduling Principle <ref> [Ja92] </ref>, the number of processors required is M= ln 2 m | the work divided by the time.
Reference: [Jo74] <author> D. Johnson. </author> <title> Approximation algorithms for combinatorial problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 9 </volume> <pages> 256-278, </pages> <year> 1974. </year>
Reference-contexts: Chvatal's weighted-set-cover algorithm guarantees a set cover of weight at most ln times the minimum, where is the maximum set size <ref> [Ch79, Lo75, Jo74] </ref>. Berger, Rompel, and Shor [BRS89] give a parallel algorithm that guarantees a factor of (1 + *) ln . Their algorithm uses a linear number of processors and runs in polylogarithmic time with some restrictions on the weights.
Reference: [Lo75] <author> L. Lovasz. </author> <title> On the ratio of optimal integral and fractional covers. </title> <journal> Discrete Mathematics, </journal> <volume> 13 </volume> <pages> 383-390, </pages> <year> 1975. </year>
Reference-contexts: Chvatal's weighted-set-cover algorithm guarantees a set cover of weight at most ln times the minimum, where is the maximum set size <ref> [Ch79, Lo75, Jo74] </ref>. Berger, Rompel, and Shor [BRS89] give a parallel algorithm that guarantees a factor of (1 + *) ln . Their algorithm uses a linear number of processors and runs in polylogarithmic time with some restrictions on the weights.
Reference: [Lu86] <author> M. Luby. </author> <title> A simple parallel algorithm for the maximal independent set problem. </title> <journal> SIAM J. Computing, </journal> <volume> 15(4) </volume> <pages> 1036-1053, </pages> <month> November </month> <year> 1986. </year>
Reference-contexts: Also with Tel-Aviv University. Partially supported by NSF grants CCR-8906949 and CCR-9111348. Email: vishkin@umiacs.umd.edu. z Institute for Advanced Computer Studies (UMIACS), University of Maryland, College Park, MD 20742. Partially supported by NSF grants CCR-8906949 and CCR-9111348. Email: young@umiacs.umd.edu. 1 deterministic. Generally, such algorithms have required randomization (e.g., <ref> [II86, ABI86, Lu86] </ref>). Given an n-vertex, m-edge graph G = (V; E) with vertex weights and an * &gt; 0, our algorithm returns a vertex cover of weight at most 2=(1 *) times the minimum. <p> Subsequently all operations involve only integer arithmetic on smaller, non-negative integers. Acknowledgments: We would like to thank Michael Luby and an anonymous referee for pointing out connections to the randomized algorithms of <ref> [ABI86, Lu86] </ref> and to the work by Hochbaum [Ho82], respectively.
Reference: [LN93] <author> M. Luby and N. Nisan. </author> <title> A parallel approximation algorithm for positive linear programming. </title> <booktitle> In Proc. 25th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 448-457, </pages> <address> May 1993. San Diego, CA. </address> <month> 9 </month>
Reference-contexts: Cohen gives an *-blocking flow algorithm that is similar in spirit to our algorithm, although a number of different issues arise. In a more recent work, Luby and Nisan give a parallel primal-dual approximation algorithm for positive linear programming <ref> [LN93] </ref>. Hochbaum's original algorithm can be parallelized by employing Luby and Nisan's algorithm; the resulting algorithm would obtain an approximation ratio comparable to ours and have an incomparable running time (growing linearly with 1=*, but not with r).
Reference: [MS85] <author> B. Monien and E. Speckenmeyer. </author> <title> Ramsey numbers and an approximation algorithm for the vertex cover problem. </title> <journal> Acta Informatica, </journal> <volume> 22 </volume> <pages> 115-123, </pages> <year> 1985. </year>
Reference-contexts: According to Motwani's lecture notes on approximation algorithms [Mot92], which contain a survey of results on vertex cover, the best approximation ratio known is 2 log log n 2 log n , due to Bar-Yehuda and Even [BE85] and to Monien and Speckenmeyer <ref> [MS85] </ref>. In [Ho83], Hochbaum gives a (2 2=k)- approximation algorithm, where k is the maximum vertex degree, and she conjectures that 2 there is no polynomial-time c-approximation algorithm for any c &lt; 2 unless P=NP.
Reference: [Mot92] <author> R. Motwani. </author> <title> Lecture notes on approximation algorithms. </title> <type> Technical report #STAN-CS-92-1435. </type> <institution> Dept. of Computer Science, Stanford University, </institution> <year> 1992. </year>
Reference-contexts: In [Cl83], Clarkson showed that in a restricted class of graphs, approximation ratios better than 2 could be obtained for vertex cover. Clarkson gave the first parallel approximation algorithm | a relatively complicated randomized algorithm [Cl91]. According to Motwani's lecture notes on approximation algorithms <ref> [Mot92] </ref>, which contain a survey of results on vertex cover, the best approximation ratio known is 2 log log n 2 log n , due to Bar-Yehuda and Even [BE85] and to Monien and Speckenmeyer [MS85].
Reference: [You] <author> N. Young. </author> <title> The k-server dual and loose competitiveness for paging. </title> <note> To appear in Algorithmica, (Special issue on on-line algorithms). 10 </note>
Reference-contexts: 1 Introduction The linear-programming primal-dual method for obtaining sequential algorithms for exact optimization problems is well studied [Ch83]. Primal-dual techniques have also been used to obtain sequential approximation algorithms (e.g., for NP-hard problems [Ch79, Ho82, etc.] and for on-line problems <ref> [You] </ref>). In this paper, we apply primal-dual techniques to obtain a deterministic parallel approximation algorithm for the minimum-weight vertex- and set-cover problems and their duals, maximum-weight edge and element packing. The result demonstrates that linear-programming primal-dual techniques can lead to fast, efficient parallel algorithms.
References-found: 21

