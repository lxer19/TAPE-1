URL: ftp://ftp.eecs.umich.edu/people/marcush/uai94.ps
Refering-URL: http://ai.eecs.umich.edu/diag/PR/PR.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: @engin.umich.edu  
Title: The Automated Mapping of Plans for Plan Recognition  
Author: Marcus J. Huber, Edmund H. Durfee, Michael P. Wellman f marcush, durfee, wellman g 
Address: 1101 Beal Avenue Ann Arbor, Michigan 48109-2110  
Affiliation: Artificial Intelligence Laboratory The University of Michigan  
Abstract: To coordinate with other agents in its environment, an agent needs models of what the other agents are trying to do. When communication is impossible or expensive, this information must be acquired indirectly via plan recognition. Typical approaches to plan recognition start with a specification of the possible plans the other agents may be following, and develop special techniques for discriminating among the possibilities. Perhaps more desirable would be a uniform procedure for mapping plans to general structures supporting inference based on uncertain and incomplete observations. In this paper, we describe a set of methods for converting plans represented in a flexible procedural language to observation models represented as proba bilistic belief networks.
Abstract-found: 1
Intro-found: 1
Reference: [AFH89] <author> J. Azarewicz, G. Fala, and C. Heithecker. </author> <title> Template-based multi-agent plan recognition for tactical situation assessment. </title> <booktitle> In Proceedings of the Sixth Conference on Artificial Intelligence Applications, </booktitle> <pages> pages 247-254, </pages> <year> 1989. </year>
Reference-contexts: Many different plan structures have been utilized, including hierarchies of varying forms (plan spaces [CLM84], action taxonomies [KA86], AND/OR trees [Cal89], context models [Car90], plan libraries [LG91]), associative networks [CC91], Shared-Plans [LGS90], plan schemas [GL90], and multi-agent templates <ref> [AFH89] </ref>. All of these structures were de-signed specifically to support the plan recognition task. The direct output of a planning system, in contrast, is an object designed to be executed, not recognized.
Reference: [Bre92] <author> John Breese. </author> <title> Construction of belief and decision networks. </title> <journal> Computational Intelligence, </journal> <volume> 8(4) </volume> <pages> 624-647, </pages> <year> 1992. </year>
Reference-contexts: We believe these approaches are complementary, both in addressing separate sets of plan-language issues, and in emphasizing different forms of dynamism in model generation. Finally, this work is related to a growing body of other work in the the dynamic generation of belief networks <ref> [Bre92, WBG92] </ref>.
Reference: [Cal89] <author> Randall J. Calistri. </author> <title> A modified A* algorithm for robust plan recognition. </title> <booktitle> In IEEE Workshop on Tools for AI Architectures, Languages, and Algorithms, </booktitle> <pages> pages 36-42, </pages> <address> Fairfax, VA, </address> <month> October </month> <year> 1989. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Many different plan structures have been utilized, including hierarchies of varying forms (plan spaces [CLM84], action taxonomies [KA86], AND/OR trees <ref> [Cal89] </ref>, context models [Car90], plan libraries [LG91]), associative networks [CC91], Shared-Plans [LGS90], plan schemas [GL90], and multi-agent templates [AFH89]. All of these structures were de-signed specifically to support the plan recognition task. The direct output of a planning system, in contrast, is an object designed to be executed, not recognized.
Reference: [Car90] <author> Sandra Carberry. </author> <title> Incorporating default inferences into plan recognition. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 471-478, </pages> <address> Boston, MA, </address> <month> July </month> <year> 1990. </year>
Reference-contexts: Many different plan structures have been utilized, including hierarchies of varying forms (plan spaces [CLM84], action taxonomies [KA86], AND/OR trees [Cal89], context models <ref> [Car90] </ref>, plan libraries [LG91]), associative networks [CC91], Shared-Plans [LGS90], plan schemas [GL90], and multi-agent templates [AFH89]. All of these structures were de-signed specifically to support the plan recognition task. The direct output of a planning system, in contrast, is an object designed to be executed, not recognized.
Reference: [CC91] <author> Glenn Carroll and Eugene Charniak. </author> <title> A probabilistic analysis of marker-passing techniques for plan-recognition. </title> <booktitle> In Proceedings of the Seventh Conference on Uncertainty in Artificial Intelligence, </booktitle> <pages> pages 69-76, </pages> <address> Los Angeles, CA, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: Many different plan structures have been utilized, including hierarchies of varying forms (plan spaces [CLM84], action taxonomies [KA86], AND/OR trees [Cal89], context models [Car90], plan libraries [LG91]), associative networks <ref> [CC91] </ref>, Shared-Plans [LGS90], plan schemas [GL90], and multi-agent templates [AFH89]. All of these structures were de-signed specifically to support the plan recognition task. The direct output of a planning system, in contrast, is an object designed to be executed, not recognized.
Reference: [CG93] <author> E. Charniak and R. P. Goldman. </author> <title> A Bayesian model of plan recognition. </title> <journal> Artificial Intelligence, </journal> <volume> 64(1) </volume> <pages> 53-79, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: model we generate is in the form of a probabilistic belief network (henceforth: belief network) [Pea88], which expresses probabilistically the causal relations among underlying goals, intentions, and the resulting observable actions. 2 Our research bears the strongest resemblance to Gold-man and Charniak's prior work on plan recognition using belief networks <ref> [CG93] </ref>. Like ours, their system generates a belief network dynamically to solve a plan recognition problem. There are several significant differences, however. First, the plan language they employ is a predicate-calculas-like representation based on collections of actions with slot fillers with hierarchical action descriptions.
Reference: [CLM84] <author> Norman F. Carver, Victor R. Lesser, and Daniel L. McCue. </author> <title> Focusing in plan recognition. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 42-48, </pages> <address> Austin, Texas, </address> <month> August </month> <year> 1984. </year>
Reference-contexts: Many different plan structures have been utilized, including hierarchies of varying forms (plan spaces <ref> [CLM84] </ref>, action taxonomies [KA86], AND/OR trees [Cal89], context models [Car90], plan libraries [LG91]), associative networks [CC91], Shared-Plans [LGS90], plan schemas [GL90], and multi-agent templates [AFH89]. All of these structures were de-signed specifically to support the plan recognition task.
Reference: [GL90] <author> Bradley A. Goodman and Diane J. Litman. </author> <title> Plan recognition for intelligent interfaces. </title> <booktitle> In Proceedings of the Sixth Conference on Artificial Intelligence Applications, </booktitle> <pages> pages 297-303, </pages> <year> 1990. </year>
Reference-contexts: Many different plan structures have been utilized, including hierarchies of varying forms (plan spaces [CLM84], action taxonomies [KA86], AND/OR trees [Cal89], context models [Car90], plan libraries [LG91]), associative networks [CC91], Shared-Plans [LGS90], plan schemas <ref> [GL90] </ref>, and multi-agent templates [AFH89]. All of these structures were de-signed specifically to support the plan recognition task. The direct output of a planning system, in contrast, is an object designed to be executed, not recognized.
Reference: [HD93] <author> Marcus J. Huber and Edmund H. Durfee. </author> <title> Observational uncertainty in plan recognition among interating robots. </title> <booktitle> In Working Notes: Workshop on Dynamically Interacting Robots, </booktitle> <pages> pages 68-75, </pages> <address> Chambery, France, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: these actions in this particular sequence. 3 To model the temporal relationship between move to viapt and find cover, we create an arc between these variables. 4 Because we are constructing the belief network in order to perform plan recognition, it is important to model the uncertainty associated with observations <ref> [HD93] </ref>. For example, detecting the exact movements of another agent might be error-prone, while it might be easy to ascertain when the agent enters a grove of trees. Yet whether this entry represents a concealment action may be relatively less certain.
Reference: [IG90] <author> Francois. F. Ingrand and Michael P. Georgeff. </author> <title> Managing deliberation and reasoning in real-time AI systems. </title> <booktitle> In Proceedings of the 1990 DARPA Workshop on Innovative Approaches to Planning, Scheduling, and Control, </booktitle> <pages> pages 284-291, </pages> <address> Santa Diego, CA, </address> <month> November </month> <year> 1990. </year>
Reference-contexts: In our research, we start from a language designed (not by us) for plan specification, as opposed to plan recognition. The particular language we have adopted is PRS <ref> [IGR92, IG90] </ref>, though any standard plan language would serve just as well. PRS was chosen for a number of reasons, including that it supports all of the standard planning constructs such as conditional branching, context, iteration 1 , subgoaling, etc. <p> Although our methods are specifically geared to plan recognition (like Goldman and Charniak's), techniques for generating probabilistic models from other forms of knowledge may have wider applicability. 3 PRS and Belief Networks The Procedural Reasoning System (PRS) <ref> [IGR92, IG90] </ref> specifies plans as collections of actions organized into Knowledge Areas, or KAs. PRS KAs specify how plans are selected given the current goal (its purpose) and situation (its context). <p> KA actions may also assert facts (!), or retract them ( ). Branches in the graph may be of type AND or OR, indicating, respectively, that all or only one of the branches must be completed successfully in order to satisfy the KA's purpose. See the PRS papers <ref> [IGR92, IG90] </ref> for a more detailed description. A belief network is a directed acyclic graph (F; X) representing the dependencies F among a set of random variables X.
Reference: [IGR92] <author> Francois Ingrand, Michael Georgeff, and Anand Rao. </author> <title> An architecture for real-time reasoning and system control. </title> <journal> IEEE Expert, </journal> <volume> 7(6) </volume> <pages> 34-44, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: In our research, we start from a language designed (not by us) for plan specification, as opposed to plan recognition. The particular language we have adopted is PRS <ref> [IGR92, IG90] </ref>, though any standard plan language would serve just as well. PRS was chosen for a number of reasons, including that it supports all of the standard planning constructs such as conditional branching, context, iteration 1 , subgoaling, etc. <p> Although our methods are specifically geared to plan recognition (like Goldman and Charniak's), techniques for generating probabilistic models from other forms of knowledge may have wider applicability. 3 PRS and Belief Networks The Procedural Reasoning System (PRS) <ref> [IGR92, IG90] </ref> specifies plans as collections of actions organized into Knowledge Areas, or KAs. PRS KAs specify how plans are selected given the current goal (its purpose) and situation (its context). <p> KA actions may also assert facts (!), or retract them ( ). Branches in the graph may be of type AND or OR, indicating, respectively, that all or only one of the branches must be completed successfully in order to satisfy the KA's purpose. See the PRS papers <ref> [IGR92, IG90] </ref> for a more detailed description. A belief network is a directed acyclic graph (F; X) representing the dependencies F among a set of random variables X.
Reference: [KA86] <author> H.A. Kautz and J.F. Allen. </author> <title> Generalized plan recognition. </title> <booktitle> In Proceedings of the Fifth National Conference on Artificial Intelligence, </booktitle> <pages> pages 32-37, </pages> <address> Philadelphia, PA, </address> <month> August </month> <year> 1986. </year>
Reference-contexts: Many different plan structures have been utilized, including hierarchies of varying forms (plan spaces [CLM84], action taxonomies <ref> [KA86] </ref>, AND/OR trees [Cal89], context models [Car90], plan libraries [LG91]), associative networks [CC91], Shared-Plans [LGS90], plan schemas [GL90], and multi-agent templates [AFH89]. All of these structures were de-signed specifically to support the plan recognition task.
Reference: [KHW93] <author> Nicholas Kushmerick, Steve Hanks, and Daniel Weld. </author> <title> An algorithm for probabilistic planning. </title> <type> Technical Report 93-06-3, </type> <institution> The University of Washington, </institution> <address> Seattle, Wash-ington, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: It is these instantiated rules from which they dynamically generate a belief network for a given sequence of observations 1 Our methodology does not currently support iteration, although this is being investigated. 2 The issue of probabilistic plan recognition is orthogonal to the issue of probabilistic planning (cf. BURI-DAN <ref> [KHW93] </ref>, for example) and hence the representations created for planning under uncertainty are not inherently any more conducive to the plan recognition process. (i.e. bottom-up). Our system, on the other hand, generates a belief network from the plan representation itself, and before receiving any observations (i.e. top-down).
Reference: [LG91] <author> Dekang Lin and Randy Goebel. </author> <title> A message passing algorithm for plan recognition. </title> <booktitle> In Proceedings of the Twelth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 280-285, </pages> <address> Sydney, Australia, </address> <month> August </month> <year> 1991. </year>
Reference-contexts: Many different plan structures have been utilized, including hierarchies of varying forms (plan spaces [CLM84], action taxonomies [KA86], AND/OR trees [Cal89], context models [Car90], plan libraries <ref> [LG91] </ref>), associative networks [CC91], Shared-Plans [LGS90], plan schemas [GL90], and multi-agent templates [AFH89]. All of these structures were de-signed specifically to support the plan recognition task. The direct output of a planning system, in contrast, is an object designed to be executed, not recognized.
Reference: [LGS90] <author> K. Lochbaum, B. Grosz, and C. Sidner. </author> <title> Models of plans to support communication: An initial report. </title> <booktitle> In Proceedings Eighth National Conference on Artificial Intelligence, </booktitle> <address> Boston, MA, 1990. </address> <publisher> AAAI. </publisher>
Reference-contexts: Many different plan structures have been utilized, including hierarchies of varying forms (plan spaces [CLM84], action taxonomies [KA86], AND/OR trees [Cal89], context models [Car90], plan libraries [LG91]), associative networks [CC91], Shared-Plans <ref> [LGS90] </ref>, plan schemas [GL90], and multi-agent templates [AFH89]. All of these structures were de-signed specifically to support the plan recognition task. The direct output of a planning system, in contrast, is an object designed to be executed, not recognized.
Reference: [Nea90] <author> Richard E. </author> <title> Neapolitan. Probabilistic Reasoning in Expert Systems. </title> <publisher> John Wiley and Sons, </publisher> <year> 1990. </year>
Reference-contexts: For a more thorough account of belief networks, see, for example, [Pea88] or <ref> [Nea90] </ref>.
Reference: [Pea88] <author> Judea Pearl. </author> <title> Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: From a PRS plan, we generate a model that directly serves plan recognition by relating potential observations to the candidate plans. The model we generate is in the form of a probabilistic belief network (henceforth: belief network) <ref> [Pea88] </ref>, which expresses probabilistically the causal relations among underlying goals, intentions, and the resulting observable actions. 2 Our research bears the strongest resemblance to Gold-man and Charniak's prior work on plan recognition using belief networks [CG93]. <p> For a more thorough account of belief networks, see, for example, <ref> [Pea88] </ref> or [Nea90].
Reference: [WBG92] <author> Michael P. Wellman, John S. Breese, and Robert P. Goldman. </author> <title> From knowledge bases to decision models. </title> <journal> Knowledge Engineering Review, </journal> <volume> 7(1) </volume> <pages> 35-53, </pages> <year> 1992. </year>
Reference-contexts: We believe these approaches are complementary, both in addressing separate sets of plan-language issues, and in emphasizing different forms of dynamism in model generation. Finally, this work is related to a growing body of other work in the the dynamic generation of belief networks <ref> [Bre92, WBG92] </ref>.
References-found: 18

