URL: http://tahoe.inesc.pt/~aml/publications/alt96.ps.gz
Refering-URL: http://tahoe.inesc.pt/~aml/
Root-URL: 
Title: Limits of Exact Algorithms For Inference of Minimum Size Finite State Machines  
Author: Arlindo L. Oliveira and Stephen Edwards 
Address: European Laboratories/INESC-IST, 1000 Lisboa, Portugal 2 UC Berkeley, Berkeley CA 94720, USA  
Affiliation: 1 Cadence  
Abstract: We address the problem of selecting the minimum sized finite state machine consistent with given input/output samples. The problem can be solved by computing the minimum finite state machine equivalent to a finite state machine without loops obtained from the training set. We compare the performance of four algorithms for this task: two algorithms for incompletely specified finite state machine reduction, an algorithm based on a well known explicit search procedure and an algorithm based on a new implicit search procedure that is introduced in this paper. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> D. Angluin. </author> <title> On the complexity of minimum inference of regular sets. </title> <journal> Inform. Control, </journal> <volume> 39(3) </volume> <pages> 337-350, </pages> <year> 1978. </year>
Reference-contexts: The problem can be solved in time polynomial on the input size if all strings of length n or less are given [13], but remains NP-complete if a small fixed fraction of these strings are missing <ref> [1] </ref>. The problem becomes easier if the algorithm is allowed to make queries or experiment with the unknown machine. Angluin [2] and Schapire [14] proposed algorithms that solve the problem in polynomial time by allowing the algorithm to ask membership queries.
Reference: 2. <author> D. Angluin. </author> <title> Learning regular sets from queries and counterexamples. </title> <journal> Inform. Comput., </journal> <volume> 75(2) </volume> <pages> 87-106, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: The problem becomes easier if the algorithm is allowed to make queries or experiment with the unknown machine. Angluin <ref> [2] </ref> and Schapire [14] proposed algorithms that solve the problem in polynomial time by allowing the algorithm to ask membership queries. Bierman et al. [3, 4] proposed the best algorithm known to the authors for the specific problem addressed here, where the learner has no control over the training set.
Reference: 3. <author> A. W. Biermann and R. Krishnaswamy. </author> <title> Constructing programs from example computations. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> SE-2:141-153, </volume> <year> 1976. </year>
Reference-contexts: The problem becomes easier if the algorithm is allowed to make queries or experiment with the unknown machine. Angluin [2] and Schapire [14] proposed algorithms that solve the problem in polynomial time by allowing the algorithm to ask membership queries. Bierman et al. <ref> [3, 4] </ref> proposed the best algorithm known to the authors for the specific problem addressed here, where the learner has no control over the training set. This algorithm is briefly described in section 3.
Reference: 4. <author> A. W. B. R. I. Biermann and F. E. Petry. </author> <title> Speeding up the synthesis of programs from traces. </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-24:122-136, </volume> <year> 1975. </year>
Reference-contexts: The problem becomes easier if the algorithm is allowed to make queries or experiment with the unknown machine. Angluin [2] and Schapire [14] proposed algorithms that solve the problem in polynomial time by allowing the algorithm to ask membership queries. Bierman et al. <ref> [3, 4] </ref> proposed the best algorithm known to the authors for the specific problem addressed here, where the learner has no control over the training set. This algorithm is briefly described in section 3. <p> This lower bound is used as the starting point for both the explicit and the implicit enumeration algorithms described below. 3 The Explicit Search Algorithm The explicit search algorithm implemented for the purpose of comparison is based on the algorithm proposed by Bierman et al. <ref> [4] </ref>. It builds a finite state machine and a mapping function F by fitting transitions from the TFSM T into the machine M , one by one, forcing the transition (2) and output requirements (1) to be satisfied for all the transitions considered.
Reference: 5. <author> R. E. Bryant. </author> <title> Graph-based algorithms for Boolean function manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 35 </volume> <pages> 677-691, </pages> <year> 1986. </year>
Reference-contexts: A decision diagram is called reduced if no two nodes exist that branch exactly in the same way and it is never the case that all outgoing edges of a given node terminate in the same node <ref> [5] </ref>. A decision diagram that is both reduced and ordered is called a reduced ordered decision diagram. For a given variable ordering, reduced, ordered MDDs are canonical representations for functions defined over that domain.
Reference: 6. <author> M.R. Garey and D.S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: This algorithm is briefly described in section 3. Algorithms for the reduction of incompletely specified finite state machines (ISFSMs) can also be used to solve the problem addressed here. The reduction of incompletely specified finite state machines is a more general problem and is also known to be NP-complete <ref> [6] </ref>. This problem has been the subject of extensive research and several implementations of the best known algorithms are available. <p> By definition, pairs of incompatible states cannot be mapped to the same state and therefore, a clique in this graph corresponds to a group of states that must map to different states in the resulting machine. Indentifying the largest clique in a graph is in itself an NP-complete problem <ref> [6] </ref>. A large clique (not necessarily the maximum one) can be identified using a simple branch and bound algorithm with an extra stopping condition. The size of the clique provides a lower bound on the number of states needed in the resulting machine.
Reference: 7. <author> E. M. Gold. </author> <title> Complexity of automaton identification from given data. </title> <journal> Inform. Control, </journal> <volume> 37 </volume> <pages> 302-320, </pages> <year> 1978. </year>
Reference-contexts: This problem is equivalent to the problem of determining if there exists a k-state DFA consistent with a set of labeled strings. This problem is known to be NP-complete <ref> [7] </ref>. Finding an approximate solution, within any polynomial factor, is also an NP-hard problem [12].
Reference: 8. <author> G. Hachtel, J.-K. Rho, F. Somenzi, and R. </author> <title> Jacoby. Exact and heuristic algorithms for the minimization of incompletely specified state machines. </title> <booktitle> In The Proceedings of the European Design Automation Conference, </booktitle> <year> 1991. </year>
Reference-contexts: This problem has been the subject of extensive research and several implementations of the best known algorithms are available. The results section compares the performance of two special purpose algorithms with two algorithms for ISFSM reduction: stamina <ref> [8] </ref>, the most popular program for the simplification of finite state machines and ism [10], an implementation of a similar algorithm that uses implicit enumeration techniques. 2 Definitions The algorithms described in this chapter can be used with minor modifications to induce either Mealy or Moore machines.
Reference: 9. <author> T. Kam and R.K. Brayton. </author> <title> Multi-valued decision diagrams. </title> <type> Tech. Report No. </type> <institution> UCB/ERL M90/125, </institution> <month> December </month> <year> 1990. </year>
Reference-contexts: A full description of this technique is outside the scope of this work and only a brief introduction is made here. The reader is referred to the work by Kam and Brayton <ref> [9] </ref> for a complete treatment of the subject. <p> A decision diagram that is both reduced and ordered is called a reduced ordered decision diagram. For a given variable ordering, reduced, ordered MDDs are canonical representations for functions defined over that domain. Packages for the manipulation of discrete functions using MDDs <ref> [9] </ref> allow the user to realize, amongst others, the following operations: 1) Creation of a function from an arithmetic relation.
Reference: 10. <author> T. Kam, T. Villa, R. K. Brayton, and A. Sangiovanni Vincentelli. </author> <title> A fully implicit algorithm for exact state minimization. </title> <booktitle> Proc. Design Automat. Conf., </booktitle> <year> 1994. </year>
Reference-contexts: The results section compares the performance of two special purpose algorithms with two algorithms for ISFSM reduction: stamina [8], the most popular program for the simplification of finite state machines and ism <ref> [10] </ref>, an implementation of a similar algorithm that uses implicit enumeration techniques. 2 Definitions The algorithms described in this chapter can be used with minor modifications to induce either Mealy or Moore machines. Due to space limitations, we will describe only the more general case, the induction of Mealy machines.
Reference: 11. <author> Arlindo L. Oliveira and Stephen A. Edwards. </author> <title> Inference of state machines from examples of behavior. </title> <type> Technical report, UCB/ERL Technical Report M95/12, </type> <institution> Berkeley, </institution> <address> CA, </address> <year> 1995. </year>
Reference-contexts: For each randomly generated machine, the minimum equivalent finite state machine was identified using standard logic synthesis techniques <ref> [11] </ref> and used to label the training sets. In total, 575 training sets were generated from 115 different machines. Each training set contained twenty strings of length 30. The original finite state machines were reduced and unreachable states were removed before the experiments were run.
Reference: 12. <author> L. Pitt and M. Warmuth. </author> <title> The minimum consistent DFA problem cannot be approximated within any polynomial. </title> <journal> J. ACM, </journal> <volume> 40(1) </volume> <pages> 95-142, </pages> <year> 1993. </year>
Reference-contexts: This problem is equivalent to the problem of determining if there exists a k-state DFA consistent with a set of labeled strings. This problem is known to be NP-complete [7]. Finding an approximate solution, within any polynomial factor, is also an NP-hard problem <ref> [12] </ref>. The problem can be solved in time polynomial on the input size if all strings of length n or less are given [13], but remains NP-complete if a small fixed fraction of these strings are missing [1].
Reference: 13. <author> S. Porat and J. A. Feldman. </author> <title> Learning automata from ordered examples. </title> <booktitle> In Proc. 1st Annu. Workshop on Comput. Learning Theory, </booktitle> <pages> pages 386-396, </pages> <address> San Mateo, CA, 1988. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: This problem is known to be NP-complete [7]. Finding an approximate solution, within any polynomial factor, is also an NP-hard problem [12]. The problem can be solved in time polynomial on the input size if all strings of length n or less are given <ref> [13] </ref>, but remains NP-complete if a small fixed fraction of these strings are missing [1]. The problem becomes easier if the algorithm is allowed to make queries or experiment with the unknown machine.
Reference: 14. <author> R. E. Schapire. </author> <title> The Design and Analysis of Efficient Learning Algorithms. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: The problem becomes easier if the algorithm is allowed to make queries or experiment with the unknown machine. Angluin [2] and Schapire <ref> [14] </ref> proposed algorithms that solve the problem in polynomial time by allowing the algorithm to ask membership queries. Bierman et al. [3, 4] proposed the best algorithm known to the authors for the specific problem addressed here, where the learner has no control over the training set.
References-found: 14

