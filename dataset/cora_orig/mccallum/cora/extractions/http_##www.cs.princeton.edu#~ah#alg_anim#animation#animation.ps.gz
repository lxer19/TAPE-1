URL: http://www.cs.princeton.edu/~ah/alg_anim/animation/animation.ps.gz
Refering-URL: http://www.cs.princeton.edu/~ah/alg_anim/animation/index.html
Root-URL: http://www.cs.princeton.edu
Email: email: fah,dpdg@cs.princeton.edu  
Title: Making Geometry Visible: An introduction to the Animation of Geometric Algorithms  
Author: Alejo Hausner and David P. Dobkin 
Date: May 15, 1996  
Address: Princeton, NJ 08544 U.S.A.  
Affiliation: Computer Science Department Princeton University  
Abstract: This chapter surveys the field of geometric algorithm animation, which has flourished in the past five years. Algorithm animation uses moving pictures to explain a computer algorithm to students learning programming, to algorithm researchers, or to programmers involved in debugging. The chapter surveys systems used to create animations of algorithms, focusing on those that specialize in geometry. It considers a selection of animation, pointing out some useful techniques. It continues with some consideration of general design issues and specific animation techniques, and closes with a look at the future. 
Abstract-found: 1
Intro-found: 1
Reference: [AR93] <editor> R.V. Amorin and P.J. Rezende, "Compreens~ao de Algoritmos atraves de Ambientes Dedicados a Anima c~ao" (in Portuguese, </editor> <title> English title: Algorithm Understanding through Dedicated Animation Environments), </title> <type> Technical Report DCC-25/93, </type> <institution> State University of Campinas, </institution> <address> Brazil 1993. </address>
Reference-contexts: AnimA is a system for algorithm animation, and it is written using the facilities of GeoLab, a system for geometric computation. AnimA <ref> [AR93] </ref> runs within GeoLab [RJ93], and both were developed by P.J. Rezende and others in the early 1990's. AnimA is a general purpose algorithm animation system, and implements many of the features of BALSA, such as renderers, adapters, and input generators. The facilities of GeoLab give users flexibility.
Reference: [Ba81] <author> R.M. Baecker, </author> <title> "Sorting out Sorting" (video), </title> <note> in Siggraph Video Review 7, </note> <year> 1981. </year>
Reference-contexts: Algorithm animation has its roots in educational film and in mathematical visualization. It has also been influenced by recent developments in scientific data visualization, which is at present an extremely diverse and active field. Early efforts in algorithm animation in the late 1970's resulted in an educational film <ref> [Ba81] </ref> which is still used today. The middle 1980's saw the development of systems [Br88b][LD85] which allow a user to run algorithms and see animations interactively. Recent efforts have added color and sound [Br91n][Dg92], as well as the use of object-oriented programming [Br91a][AR93][Sc92][EK94]. <p> Finally, section 6 presents some techniques which can be used in an algorithm animation to convey ideas more clearly. 2 General systems 2.1 Sorting out Sorting The most well-known example of an early algorithm animation is the film "Sorting out Sorting", created by Ronald Baecker <ref> [Ba81] </ref> and presented at Siggraph '81. It explains concepts involved in sorting an array of numbers, illustrating comparisons and swaps. The film ends with a race among nine algorithms, all sorting the same large random array of numbers. <p> These can range from special-purpose to general, and can be: * Single-purpose: Hand-crafted code that illustrates one algorithm or a group of algorithms in detail (examples: <ref> [Ba81] </ref>, [VR2a]). * Specialized: A system that specializes in algorithms from a field of computer science, such as computational geometry (examples: [RJ93], [TD95]). * General-purpose: Systems that can, in principle, animate any algo rithm (example: [Br88b]). <p> Ideally, the final user should be able to interact with an animation. Degrees of interactivity can range along the following scale: 1. None: The system produces stills, [BK91a] or a movie which the viewer must watch passively <ref> [Ba81] </ref>. 22 2. Some: The user can stop and start the animation, or change its speed. Most systems support this level of interaction. 3. More: The user can choose the input data for the algorithm being animated [Br88b]. 4. <p> Ideally, all the detail should be accessible to the user if he/she needs to see it. This is called semantic zooming. Sometimes, of course, it may be desirable to present the viewer with large amounts of information. This occurs when several sorts are simultaneously compared in <ref> [Ba81] </ref>. Although the screen is filled with information, the means of presentation lets the user's visual system grasp the difference both in running time and behavior of the sorting algorithms.
Reference: [BK91a] <author> J.L. Bentley and B.W. Kernighan, </author> <title> "A System for Algorithm Animation", </title> <booktitle> Computing Systems (Winter 1991) 4(1) pp. </booktitle> <pages> 5-31. </pages>
Reference-contexts: Recently, Stasko has made his system accessible interactively through the internet [St94], for anyone with a web browser and X-windows. Movie and Stills An interesting approach to algorithm animation appears in Movie and Stills <ref> [BK91a] </ref>, programs developed by Bentley and Kernighan. These authors use the Unix text-filter paradigm. In this system, a program is animated by inserting output statements, and not function calls. Each output statement produces a textual description of the changes in the state of the program. <p> Because an algorithm has inputs, its animation can be different each time the algorithm runs. Ideally, the final user should be able to interact with an animation. Degrees of interactivity can range along the following scale: 1. None: The system produces stills, <ref> [BK91a] </ref> or a movie which the viewer must watch passively [Ba81]. 22 2. Some: The user can stop and start the animation, or change its speed. Most systems support this level of interaction. 3. More: The user can choose the input data for the algorithm being animated [Br88b]. 4.
Reference: [BK91b] <author> J.L. Bentley and B.W. Kernighan, </author> <title> "A System for Algorithm Animation: Tutorial and User Manual", </title> <type> Technical Report 132, </type> <institution> AT&T Bell Labs, </institution> <year> 1991. </year>
Reference: [BS84] <author> M.H. Brown and R. Sedgewick, </author> <title> "A System for Algorithm Animation", </title> <journal> ACM Computer Graphics (July 1984) 18(3) pp. </journal> <pages> 177-186. 30 </pages>
Reference: [BS85] <author> M.H. Brown and R. Sedgewick, </author> <title> "Techniques for Algorithm Anima--tion", </title> <note> IEEE Computer (January 1985) pp. 28-39. </note>
Reference: [Br88a] <author> M.H. Brown, </author> <title> "Exploring Algorithms Using Balsa-II", </title> <journal> IEEE Computer (May 1998) pp. </journal> <pages> 14-36. </pages>
Reference-contexts: Fair: The user can rewind the animation, and replay parts which were not understood on previous runs [TD95]. 6. Good: The user choose data while the algorithm is running, such as selecting a starting node for an all-points shortest path algorithm <ref> [Br88a] </ref>. 7. Excellent: The user can change the data while the algorithm runs, for example by dragging a data point to a different location and watching the effect of this change.. [VR2a]. The possibility of this last feature raises many interesting questions.
Reference: [Br88b] <author> M.H. Brown, </author> <title> "Algorithm Animation", </title> <type> PhD. Thesis, </type> <institution> Brown University, </institution> <year> 1988. </year>
Reference-contexts: Single-purpose: Hand-crafted code that illustrates one algorithm or a group of algorithms in detail (examples: [Ba81], [VR2a]). * Specialized: A system that specializes in algorithms from a field of computer science, such as computational geometry (examples: [RJ93], [TD95]). * General-purpose: Systems that can, in principle, animate any algo rithm (example: <ref> [Br88b] </ref>). Obviously, the greater the number of algorithms that can be animated, the more desirable the result. However, with increased flexibility comes increased complexity. A general-purpose system will often require much more work from the programmer than a specialized system. This occurs because of the gap between abstraction and representation. <p> Some: The user can stop and start the animation, or change its speed. Most systems support this level of interaction. 3. More: The user can choose the input data for the algorithm being animated <ref> [Br88b] </ref>. 4. More: The user can pan and zoom to see different parts of the dis play [Br88b],[St90a]. 5. Fair: The user can rewind the animation, and replay parts which were not understood on previous runs [TD95]. 6.
Reference: [Br91a] <author> M.H. Brown, "Zeus: </author> <title> A System for Algorithm Animation and Multi-View Editing", </title> <booktitle> Proceedings, 1991 IEEE Workshop on Visual Languages pp 4-9. </booktitle>
Reference-contexts: An example is a generator which produces a nearly-sorted array of numbers, which can be used with several sorting algorithms to see which one best handles this nearly-degenerate case. Zeus After completing his work on BALSA, Marc Brown and others developed Zeus <ref> [Br91a] </ref>, an object-oriented algorithm animation system similar to BALSA. Aware of the difficult task of building renderers, Brown added several features to Zeus that make implementation easier.
Reference: [Br91n] <author> M.H. Brown, </author> <title> "Color and Sound in Algorithm Animation", </title> <booktitle> Proceedings, 1991 IEEE Workshop on Visual Languages pp 10-17. </booktitle>
Reference-contexts: Whether these facilities are used effectively or abused depends, of course, on the programmer's discretion. A good system should give the expert programmer control of: * Color. 21 * Sound. <ref> [Br91n] </ref> * Time. In some systems [TD95][St90a], the programmer can describe the way transitions in the algorithm are presented: they may be sudden or gradual. * Three dimensionality. Most animation systems represent algorithms in a two-dimensional way.
Reference: [BN93] <author> M.H. Brown and M.A. Najork, </author> <title> "Algorithm Animation Using 3D Interactive Graphics", </title> <type> Technical Report 110a, </type> <institution> DEC Systems Research Center, </institution> <year> 1993. </year>
Reference: [BN94] <author> M.H. Brown and M.A. Najork, </author> <title> "A Library for Visualizing Combinatorial Structures", </title> <type> Technical Report 128a, </type> <institution> DEC Systems Research Center, </institution> <year> 1994. </year>
Reference: [Dg92] <author> C.J. DiGiano, </author> <title> "Visualizing Program Behavior Using Non-speech Audio", M.S. </title> <type> Thesis, </type> <institution> University of Toronto, </institution> <year> 1992. </year>
Reference: [Du86] <author> R.A. Duisberg, </author> <title> "Animated Graphical Interfaces", </title> <booktitle> ACM SIG CHI 86 Conference on Human Factors in Computing Systems, </booktitle> <pages> pp 131-136. </pages>
Reference: [EK94] <author> P. Epstein, J. Kavanagh, A. Knight, J. May, T. Nguyen and J.-R. Sack, </author> <title> "A Workbench for Computational Geometry", </title> <note> Algorithmica (1994) 11 pp. 404-428. </note>
Reference: [FK95] <author> G. Fowler, D. Korn, E. Koutsofios, S. North and K-P. Vo, </author> <title> "Libraries and File System Architecture; Intertool Connections", in Practical Reusable Unix Software John Wiley & Sons, </title> <note> 1995. [Ge95] http://www.geom.umn.edu/software/download/geomview.html 31 </note>
Reference-contexts: It is not clear if non-intrusive animation of a general program is easy (or even possible). Nevertheless, there are systems that can help to visualize the flow of control within a program in an over-all, module-by-module fashion <ref> [FK95] </ref> [NK94]. 5.3 Expressiveness A useful system should have as many facilities as possible for expressing the idea behind an animation. Whether these facilities are used effectively or abused depends, of course, on the programmer's discretion.
Reference: [HH89] <author> E. Helttula, A. Hyrskykari and K.-J. Raiha, </author> <title> "Graphical Specifi--cation of Algorithm Animations with ALADINN", </title> <booktitle> Hawaii International Conference on System Sciences (22nd, </booktitle> <pages> Volume 2) pp. 892-901. </pages>
Reference: [Ko91] <author> K. Konstantinides, </author> <title> "Algorithm Visualization Using Tree Graphs", </title> <booktitle> The Visual Computer (1991) 7 </booktitle> <pages> 220-228 </pages>
Reference-contexts: The third dimension can be used in many ways, such as [St92] to represent an extra dimension in the data, such as the size of data items or some other attribute of the data, to illustrate the passage of time, or the algorithm's progress <ref> [Ko91] </ref> for aesthetic effect (as in the "USA-Today" graphs) to represent objects which are inherently three-dimensional. [TD95] It would seem obvious that more cues available to the reader would translate into greater understanding. However, too much color and sound can also be distracting.
Reference: [LD85] <author> R.L. London and R.A. Duisberg, </author> <title> "Animating Programs Using Smalltalk", </title> <note> IEEE Computer (August 1985) pp 61-71. </note>
Reference: [My86] <author> B.A. Myers, </author> <title> "Visual Programming, Programming by Example and Program Visualization: A Taxonomy", </title> <booktitle> ACM SIG CHI 86, Proceedings, Conference on Human Factors in Computing Systems, </booktitle> <pages> pp. 59-66. </pages>
Reference: [NK94] <author> S.C. North and E. Koutsofios, </author> <booktitle> "Applications of Graph Visualization" Graphics Interface '94, </booktitle> <pages> pp 235-245. </pages>
Reference-contexts: It is not clear if non-intrusive animation of a general program is easy (or even possible). Nevertheless, there are systems that can help to visualize the flow of control within a program in an over-all, module-by-module fashion [FK95] <ref> [NK94] </ref>. 5.3 Expressiveness A useful system should have as many facilities as possible for expressing the idea behind an animation. Whether these facilities are used effectively or abused depends, of course, on the programmer's discretion.
Reference: [Pa91] <author> S. Palmiteer and J. Elkerton, </author> <title> "An Evaluation of Animated Demonstrations for Learning Computer-based Tasks", </title> <booktitle> Proceedings of the ACM SIGCHI '91 Conference on Human Factors in Computing Systems, </booktitle> <pages> pp. 257-263. </pages>
Reference-contexts: Moreover, some in the second group complained 28 that they "knew" how the algorithm worked, but when pressed couldn't ex-plain it. Other studies <ref> [Pa91] </ref> reported that students exposed to animations retained less understanding after a week's time had elapsed. Some of the most effective animations discussed in section 4 are those that combine text and images.
Reference: [PP92] <author> M. Petre and B.A. Price, </author> <title> "Why Computer Interfaces are not Like Paintings: The user as a Deliberate Reader", </title> <booktitle> Proceedings of East-West HCI 92: The St. Petersburg International Conference on Human-Computer Interaction, </booktitle> <volume> Vol I. </volume> <pages> pp. 217-224. </pages>
Reference: [Pr90] <author> B.A. Price, </author> <title> "A Framework for the Automatic Animation of Concurrent Programs", </title> <type> M.S Thesis, </type> <institution> University of Toronto, </institution> <year> 1990. </year>
Reference: [PS93] <author> B.A. Price, </author> <title> I.S. Small and R.M. Baecker, "A Taxonomy of Software Visualization", </title> <booktitle> Proceedings of the 25th Hawaii International Conference on System Sciences, </booktitle> <volume> Vol II, </volume> <pages> pp. 597-606. </pages>
Reference: [PB93] <author> B.A. Price, </author> <title> R.M. Baecker and I.S. Small, "A Principled Taxonomy of Software Visualization", </title> <journal> Journal of Visual Languages and Computing (1993), </journal> <volume> 4(3). </volume> <pages> 32 </pages>
Reference: [RJ93] <author> P.J. Rezende and W.R. Jacometti, "Geolab: </author> <title> An Environment for Development of Algorithms in Computational Geometry", </title> <type> Technical Report DCC-26/93, </type> <institution> State University of Campinas, </institution> <address> Brazil 1993. </address>
Reference-contexts: AnimA is a system for algorithm animation, and it is written using the facilities of GeoLab, a system for geometric computation. AnimA [AR93] runs within GeoLab <ref> [RJ93] </ref>, and both were developed by P.J. Rezende and others in the early 1990's. AnimA is a general purpose algorithm animation system, and implements many of the features of BALSA, such as renderers, adapters, and input generators. The facilities of GeoLab give users flexibility. <p> These can range from special-purpose to general, and can be: * Single-purpose: Hand-crafted code that illustrates one algorithm or a group of algorithms in detail (examples: [Ba81], [VR2a]). * Specialized: A system that specializes in algorithms from a field of computer science, such as computational geometry (examples: <ref> [RJ93] </ref>, [TD95]). * General-purpose: Systems that can, in principle, animate any algo rithm (example: [Br88b]). Obviously, the greater the number of algorithms that can be animated, the more desirable the result. However, with increased flexibility comes increased complexity.
Reference: [Sc92] <author> P. Schorn, </author> <title> "The XYZ GeoBench for the Experimental Evaluation of Geometric Algorithms", in Computational Support for Discrete Mathematics: </title> <booktitle> DIMACS Workshop (March 1992), </booktitle> <pages> pp. 137-152. </pages>
Reference-contexts: For these reasons, since about 1990 several systems have evolved that try to satisfy the needs of computational geometers. This section examines them. 3.1 Two-dimensional Systems XYZ Geobench Peter Schorn's XYZ Geobench <ref> [Sc92] </ref>, created around 1990, provides tools for writing and testing geometric algorithms. It provides a library of geometric abstract data types. The Geobench emphasizes robust computation. For example, a poorly-implemented algorithm for segment intersections may not detect points where more than two segments coincide.
Reference: [St90a] <author> J.T. Stasko, </author> <title> "Tango: A Framework and System for Algorithm Animation", </title> <booktitle> IEEE Computer (September 1990), </booktitle> <pages> pp. 27-39. </pages>
Reference-contexts: A dispatcher takes care of the task of extracting the pure data from the user's choice, sending it to the program, then adding the graphic data to the program's pure output. This feature is used in AnimA. Tango Tango <ref> [St90a] </ref> was developed by John Stasko in the late 1980's, and is a general purpose system for algorithm animation. One of the novel features of Tango is its emphasis on smooth animation.
Reference: [St90b] <author> J.T. Stasko, </author> <title> "The Path-transition Paradigm: a Practical Methodology for Adding Animation to Program Interfaces", </title> <booktitle> Journal of Visual Languages and Computing (1990) 1, </booktitle> <pages> pp. 213-236. </pages>
Reference-contexts: One of the novel features of Tango is its emphasis on smooth animation. Human audiences find it difficult to keep track of events if they occur suddenly and discontinuously, and can understand gradual changes more easily. Tango provides path transitions <ref> [St90b] </ref>, which make it easier for the programmer to specify gradual changes that correspond to program events. The programmer can give the path an object will follow as it moves from one place to another.
Reference: [St92] <author> J.T. Stasko, </author> <title> "Three-Dimensional Computation Visualization", </title> <type> Technical Report GIT-GVU-92-20, </type> <institution> Georgia Institute of Technology, </institution> <address> Atlanta, GA, </address> <year> 1992. </year> <note> [St94] http://www.cc.gatech.edu/stasko/cgi-bin/animation </note>
Reference-contexts: Hence the animation of the tree insertion must be carefully prepared to minimize distracting and irrelevant movement <ref> [ST92] </ref>. Thus, a teacher will probably be willing to tolerate a greater deal of learning and programming effort, in exchange for a clearer animation. A programmer developing a large piece of software will, most likely, use animation tools for debugging. <p> In some systems [TD95][St90a], the programmer can describe the way transitions in the algorithm are presented: they may be sudden or gradual. * Three dimensionality. Most animation systems represent algorithms in a two-dimensional way. The third dimension can be used in many ways, such as <ref> [St92] </ref> to represent an extra dimension in the data, such as the size of data items or some other attribute of the data, to illustrate the passage of time, or the algorithm's progress [Ko91] for aesthetic effect (as in the "USA-Today" graphs) to represent objects which are inherently three-dimensional. [TD95] It
Reference: [SB93] <author> J.T. Stasko, A. Badre and C. Lewis, </author> <title> "Do Algorithm Animations Assist Learning? An Empirical Study and Analysis", </title> <booktitle> INTERCHI '93 Proceedings, Conference on Human Factors in Computing Systems (April 1993) pp 61-66. </booktitle>
Reference-contexts: It may be wise to warn the reader that, in fact, even well-crafted algorithm animations by themselves may not help some people understand an algorithm. Stasko and others have tried to experimentally asses the effectiveness of algorithm animation for instruction. One report <ref> [SB93] </ref> describes an experiment where a group of computer-science graduate students were taught a new algorithm in two ways: one group read a research paper describing the algorithm, and the other divided its time between reading the paper and interacting with an animation of the algorithm.
Reference: [ST92] <author> J.T. Stasko and C.R. Turner, </author> <title> "Tidy Animations of Tree Algorithms", </title> <type> Technical Report GIT-GVU-92-11, </type> <institution> Georgia Institute of Technology, </institution> <address> Atlanta, GA, </address> <year> 1992. </year>
Reference-contexts: Hence the animation of the tree insertion must be carefully prepared to minimize distracting and irrelevant movement <ref> [ST92] </ref>. Thus, a teacher will probably be willing to tolerate a greater deal of learning and programming effort, in exchange for a clearer animation. A programmer developing a large piece of software will, most likely, use animation tools for debugging. <p> In some systems [TD95][St90a], the programmer can describe the way transitions in the algorithm are presented: they may be sudden or gradual. * Three dimensionality. Most animation systems represent algorithms in a two-dimensional way. The third dimension can be used in many ways, such as <ref> [St92] </ref> to represent an extra dimension in the data, such as the size of data items or some other attribute of the data, to illustrate the passage of time, or the algorithm's progress [Ko91] for aesthetic effect (as in the "USA-Today" graphs) to represent objects which are inherently three-dimensional. [TD95] It
Reference: [Ta95] <author> A.Y. Tal, </author> <title> "Animation and Visualization of Geometric Algorithms", </title> <type> Ph.D. thesis, </type> <institution> Princeton University, </institution> <year> 1995. </year>
Reference: [TD95] <author> A.Y. </author> <title> Tal and D.P. Dobkin, "Visualization of Geometric Algorithms", </title> <journal> IEEE Transactions on Visualization and Computer Graphics (TVCG) Volume 1, </journal> <volume> Number 2. </volume>
Reference-contexts: Of course, with all that versatility comes complexity: not only is Geomview a very large piece of software, but also users may take some time to learn its special features. GASP GASP <ref> [TD95] </ref> aims to provide high-quality animations of geometric algorithms with minimal programmer effort. It tries to achieve the high-quality renderings of three-dimensional objects that Geomview provides, while minimizing the effort needed to create them. The spirit of GASP is to separate geometry from animation. <p> These can range from special-purpose to general, and can be: * Single-purpose: Hand-crafted code that illustrates one algorithm or a group of algorithms in detail (examples: [Ba81], [VR2a]). * Specialized: A system that specializes in algorithms from a field of computer science, such as computational geometry (examples: [RJ93], <ref> [TD95] </ref>). * General-purpose: Systems that can, in principle, animate any algo rithm (example: [Br88b]). Obviously, the greater the number of algorithms that can be animated, the more desirable the result. However, with increased flexibility comes increased complexity. <p> The author will necessarily be a programmer, while the audience may or may not. Authors can fall into several categories: 1. A researcher in a field, who wishes to explain his/her new algorithm to colleagues in the field, perhaps at a research conference, and finds a printed description inadequate. <ref> [TD95] </ref> 2. A teacher, who must create an animation to explain some fundamental algorithm to students, who in turn will be seeing the algorithm for the first time. [Br88b][St90a] 3. <p> Corresponding to these categories, the audience will consist of: 1. A researcher at a conference, who wishes to learn about a colleague's new approach, or needs further understanding of a printed journal ar ticle. <ref> [TD95] </ref> 20 2. A student learning an algorithm for the first time. [Br88a][St90a] 3. A programmer, examining the animation he/she just created. Each situation demands a different kind of animation system, and it is difficult to build a system that satisfies them all. <p> as [St92] to represent an extra dimension in the data, such as the size of data items or some other attribute of the data, to illustrate the passage of time, or the algorithm's progress [Ko91] for aesthetic effect (as in the "USA-Today" graphs) to represent objects which are inherently three-dimensional. <ref> [TD95] </ref> It would seem obvious that more cues available to the reader would translate into greater understanding. However, too much color and sound can also be distracting. Here we must follow Tufte's [Tu83] principle, which is that a graphic's excellence is a measure of its information density. <p> More: The user can choose the input data for the algorithm being animated [Br88b]. 4. More: The user can pan and zoom to see different parts of the dis play [Br88b],[St90a]. 5. Fair: The user can rewind the animation, and replay parts which were not understood on previous runs <ref> [TD95] </ref>. 6. Good: The user choose data while the algorithm is running, such as selecting a starting node for an all-points shortest path algorithm [Br88a]. 7.
Reference: [Tu83] <author> Tufte, Edward R., </author> <title> "The Visual display of quantitative information", </title> <journal> Cheshire, Conn, Graphics Press, c1983. </journal> <volume> 33 </volume>
Reference-contexts: However, too much color and sound can also be distracting. Here we must follow Tufte's <ref> [Tu83] </ref> principle, which is that a graphic's excellence is a measure of its information density. By this he means that a good graph will contain only elements that communicate information, and no extraneous ones. By this principle, the overuse of three-dimensionality for two-dimensional objects should be avoided. <p> This occurs when several sorts are simultaneously compared in [Ba81]. Although the screen is filled with information, the means of presentation lets the user's visual system grasp the difference both in running time and behavior of the sorting algorithms. This scene confirms Tufte's <ref> [Tu83] </ref> principle of high information density. 6.2 A Few Animation Techniques In this section, we draw attention to some methods used to convey meaning in animation. Relatedness: Sometimes it is necessary to associate two or more objects in the user's mind.
Reference: [Wh94] <author> G. Whale, "DRUIDS: </author> <title> Tools for Understanding Data Structures and Algorithms", </title> <booktitle> 1994 IEEE First International Conference on MultiMedia Engineering Education: Proceedings (1994) pp. </booktitle> <month> 403-407. </month> <title> Videos [VR1] "Animation of Geometric Algorithms: A Video Review", Edited by Marc H. </title> <institution> Brown and John Hershberger, Digital Equipment Corporation's Systems Research Center (DEC SRC), </institution> <year> 1992. </year> <note> This video tape contains the following animations: </note>
Reference: [VR1a] <author> Simon Kahan, </author> <title> "Real-Time Closest Pairs of Moving Points". </title>
Reference: [VR1b] <author> Peter Schorn, Adrian Brungger and Michele De Lorenzi, </author> <title> "The XYZ GeoBench: Animation of Geometric Algorithms". </title>
Reference-contexts: Through this simple trick of timing, the burden of referring back and forth between proof and diagram is avoided. Another simple trick is used when two triangles are shown to have equal areas. One triangle is smoothly deformed into the other. 15 4.2 Demonstrations Several of the video segments <ref> [VR1b] </ref> [VR1h] [VR2f] [VR3d] contain animations of algorithms, but are primarily intended to demonstrate the capabilities of an algorithm animation system. To enable the viewer to concentrate on the capabilities of the system, these demonstrations tend to animate well-known algorithms, e.g. Graham's scan.
Reference: [VR1c] <author> Herbert Edelsbrunner and Roman Waupotitsch, </author> <title> "Optimal Two-Dimensional Triangulations". </title>
Reference-contexts: To enable the viewer to concentrate on the capabilities of the system, these demonstrations tend to animate well-known algorithms, e.g. Graham's scan. For this reason, they will not be considered here. 4.3 Algorithm Animations Optimal Two-Dimensional Triangulations <ref> [VR1c] </ref> shows a typical use of color. The video animates versions of an algorithm that computes optimal 2-d triangulations. Each triangle is colored according to some measure, such as maximum vertex angle. Optimal triangulations minimize that measure.
Reference: [VR1d] <author> John Hershberger and Marc H. Brown, </author> <title> "Boolean Formulae for Simple Polygons". </title>
Reference-contexts: Each triangle is colored according to some measure, such as maximum vertex angle. Optimal triangulations minimize that measure. As the algorithm runs and the triangulation is improved, its overall color approaches the optimal one. Boolean Formulae for Simple Polygons <ref> [VR1d] </ref> uses color and also multiple views to convey information. The algorithm computes the boolean formula for a polygon: Given the half-planes determined by each edge of the polygon, the boolean formula is the combination of OR's and AND's of these halfplanes that defines its interior.
Reference: [VR1e] <author> Chandrajit L. Bajaj, "SHASTRA: </author> <title> A Distributed and Collaborative Design Environment". </title>
Reference: [VR1f] <author> Leonidas Palios and Mark Phillips, </author> <note> "Tetrahedral Break-Up". </note>
Reference: [VR1g] <author> Joseph Friedman, </author> <title> "Compliant Motion in a Simple Polygon". </title>
Reference: [VR1h] <author> P. Epstein, J. Kavanagh, A. Knight, J. May, T. Nguyen and J.-R. Sack, </author> <title> "Workbench for Computational Geometry". </title>
Reference-contexts: Another simple trick is used when two triangles are shown to have equal areas. One triangle is smoothly deformed into the other. 15 4.2 Demonstrations Several of the video segments [VR1b] <ref> [VR1h] </ref> [VR2f] [VR3d] contain animations of algorithms, but are primarily intended to demonstrate the capabilities of an algorithm animation system. To enable the viewer to concentrate on the capabilities of the system, these demonstrations tend to animate well-known algorithms, e.g. Graham's scan.
Reference: [VR1i] <author> Marc H. Brown and Harald Rosenberger, </author> <title> "Topologically Sweeping an Arrangement: A Parallel Implementation". </title>
Reference: [VR1j] <editor> Ayellet Tal, Bernard Chazelle and David Dobkin, </editor> <address> "The New Jersey Line-Segment-Saw Massacre". </address> <note> 34 [VR2] "The Second Annual Video Review of Computational Geometry", </note> <author> Edited by Marc H. Brown and John Hershberger, </author> <note> DEC SRC, 1993. This video tape contains the following animations: </note>
Reference-contexts: Each view corresponds to a way of abstracting the information being processed by the algorithm. Like the previous animation, The New Jersey Line-Segment-Saw Massacre <ref> [VR1j] </ref> uses multiple views to explain an algorithm, this time Chazelle and Edelsbrunner's optimal sweepline algorithm for general line-segment intersections. As the sweepline advances, a separate view shows the red-black tree holding partially-processed segments. The video is difficult to understand, mostly because the algorithm itself is very complicated.
Reference: [VR2a] <author> Seth Teller, </author> <title> "Visualizing Fortune's Sweepline Algorithm for Planar Voronoi Diagrams" </title>
Reference-contexts: By contrast, most algorithm animations show the viewer an algorithm's behavior. With an interactive visualization, the user can change some graphical data interactively, and immediately see the resulting structure produced by the (usually geometric) algorithm under consideration. Visualizing Fortune's Sweepline Algorithm for Planar Voronoi Diagrams <ref> [VR2a] </ref> does animate that algorithm for building a Voronoi diagram, but primarily it showcases an interactive tool for exploring the properties of Voronoi diagrams. Given a set of points in the plane, the user can turn several structures on and off. <p> These can range from special-purpose to general, and can be: * Single-purpose: Hand-crafted code that illustrates one algorithm or a group of algorithms in detail (examples: [Ba81], <ref> [VR2a] </ref>). * Specialized: A system that specializes in algorithms from a field of computer science, such as computational geometry (examples: [RJ93], [TD95]). * General-purpose: Systems that can, in principle, animate any algo rithm (example: [Br88b]). <p> Excellent: The user can change the data while the algorithm runs, for example by dragging a data point to a different location and watching the effect of this change.. <ref> [VR2a] </ref>. The possibility of this last feature raises many interesting questions. Clearly, the amount of interactivity is related to the type of algorithm being animated, as much as it is to the system being used.
Reference: [VR2b] <author> David Dobkin and Ayellet Tal, </author> <title> "Building and Using Polyhedral Hierarchies" </title>
Reference-contexts: Perhaps many 16 more views would have shown in detail what was going on, but the authors may have feared overloading the viewer's ability to keep track of too many simultaneous changes. The time limitations of the video also preclude the necessary drawn-out explanation. Building and Using Polyhedral Hierarchies <ref> [VR2b] </ref> shows that often multiple views are not needed. It shows a polyhedron being simplified as certain vertices and their incident edges are removed. Implicitly, a hierarchy of simpler polygons is built, although the viewer does not need a visualization of it to understand it.
Reference: [VR2c] <author> Stefan Schirra, </author> <title> "Moving a Disc between Polygons" </title>
Reference: [VR2d] <author> John Hershberger, </author> <title> "Compliant Motion in a Simple Polygon" </title>
Reference: [VR2e] <institution> Estarose Wolfson and Micha Sharir "Implementation of a Motion Planning System in Three Dimensions" </institution>
Reference: [VR2f] <author> P.J. de Rezende and W.R. </author> <title> Jacometti "Animation of Geometric Algorithms using GeoLab" </title>
Reference-contexts: Another simple trick is used when two triangles are shown to have equal areas. One triangle is smoothly deformed into the other. 15 4.2 Demonstrations Several of the video segments [VR1b] [VR1h] <ref> [VR2f] </ref> [VR3d] contain animations of algorithms, but are primarily intended to demonstrate the capabilities of an algorithm animation system. To enable the viewer to concentrate on the capabilities of the system, these demonstrations tend to animate well-known algorithms, e.g. Graham's scan.
Reference: [VR2g] <author> Michael Murphy and Steven S. Skiena "Ranger: </author> <title> A Tool for Nearest Neighbor Search in High Dimensions" </title>
Reference: [VR2h] <institution> Jack Snoeyink "Objects That Cannot Be Taken Apart With Two Hands" [VR3] "The Third Annual Video Review of Computational Geometry", </institution> <note> Edited by Marc H. </note> <author> Brown and John Hershberger, </author> <note> DEC SRC, 1994. This video tape contains the following animations: </note>
Reference-contexts: In theory, the systems described above can be used to visualize a new idea, with the visualization appearing simultaneously with the research paper that presents the new concept. In practice, however, most algorithm animations describe ideas which are already well-known. Objects that Cannot be Taken Apart With Two Hands <ref> [VR2h] </ref>, is remarkable for appearing at the same time as the discovery it explains. An Animation of a Fixed-Radius All-Nearest Neighbors Algorithm [VR3c] is an excellent video.
Reference: [VR3a] <author> John Hershberger and Jack Snoeyink, </author> <title> "An O(n log n) Implementation of the Douglas-Peucker Algorithm for Line Simplification" </title>
Reference: [VR3b] <author> David Dobkin and Dimitrios Gunopulos, </author> <title> "Computing the Rectangle Discrepancy' </title>
Reference: [VR3c] <author> Hans-Peter Lenhof and Michiel Smid, </author> <title> "An Animation of a Fixed-Radius All-Nearest Neighbors Algorithm" 35 </title>
Reference-contexts: In practice, however, most algorithm animations describe ideas which are already well-known. Objects that Cannot be Taken Apart With Two Hands [VR2h], is remarkable for appearing at the same time as the discovery it explains. An Animation of a Fixed-Radius All-Nearest Neighbors Algorithm <ref> [VR3c] </ref> is an excellent video. The algorithm described here solves the following problem: Given a set of points and a distance ffi, find groups of points where each member of the group is within ffi of the others. <p> Other studies [Pa91] reported that students exposed to animations retained less understanding after a week's time had elapsed. Some of the most effective animations discussed in section 4 are those that combine text and images. For example, An Animation of a Fixed-Radius All-Nearest Neighbors Algorithm <ref> [VR3c] </ref> uses both these modes of expression very effectively. In fact, the second part of this video has no text, and (not coincidentally) is harder to understand. Perhaps the lesson to be learned here is that thinking in images involves a different part of human consciousness from understanding mathematical symbols.
Reference: [VR3d] <author> Ayellet Tal and David P. Dobkin, </author> <title> "GASP-A System to Facilitate Animating Geometric Algorithms" </title>
Reference-contexts: Another simple trick is used when two triangles are shown to have equal areas. One triangle is smoothly deformed into the other. 15 4.2 Demonstrations Several of the video segments [VR1b] [VR1h] [VR2f] <ref> [VR3d] </ref> contain animations of algorithms, but are primarily intended to demonstrate the capabilities of an algorithm animation system. To enable the viewer to concentrate on the capabilities of the system, these demonstrations tend to animate well-known algorithms, e.g. Graham's scan.
Reference: [VR3e] <author> Adrian Mariano and Linus Upson, </author> <title> "Penumbral Shadows" </title>
Reference: [VR3f] <author> J.D. Cohen, M.C. Lin, D. Manocha, </author> <title> and M.K. Ponamgi, "Exact Collision Detection for Interactive Environments" </title>
Reference-contexts: Nevertheless, the video shows the advantage of giving the user the ability to turn aspects of a visualization on and off. Exact Collision Detection for Interactive Environments <ref> [VR3f] </ref> presents a real-time system that detects collisions between polyhedral objects. If two features like a vertex and an edge are close together, the system displays a line between them, indicating that those two features are being tested for collision.
Reference: [VR3g] <author> Herve Bronnimann, </author> <title> "Almost Optimal Polyhedral Separators" </title>
Reference: [VR3h] <author> A. Varshney, F.P. Brooks, Jr., and W.V. Wright, </author> <title> "Interactive Visualization of Weighted Three-dimensional ff-Hulls" [VR4] "The Fourth Annual Video Review of Computational Geometry", Edited David Dobkin, </title> <journal> Association for Computing Machinery (ACM) 1995. </journal> <note> This video tape contains the following animations: </note>
Reference: [VR4a] <author> Leo Loskowitz and Elisha Sacks, "HIPAIR: </author> <title> Interactive Mechanism Analysis and Design Using Configuration Space". </title>
Reference: [VR4b] <author> Bernard Geiger, </author> <title> "3-D Modeling Using the Delaunay Triangulation". </title>
Reference: [VR4c] <author> Mahav K. Ponamgi, Ming C. Lin and Dinesh Manocha, </author> <title> "Incremental Collision Detection for Polygonal Models". </title>
Reference: [VR4d] <author> B. Chazelle, D. Dobkin H. Shouraboura and A. Tal, </author> <title> "Convex Surface Decomposition". </title>
Reference: [VR4e] <author> Fredo Durand and Claude Puech, </author> <title> "The Visibility Complex Made Visibly Simple". </title>
Reference: [VR4f] <author> Steve Glassman and Greg Nelson, </author> <title> "An Animation of Euclid's Proposition 47: The Pythagoras Theorem". </title> <note> Videos from the Geometry Center 36 </note>
Reference-contexts: Even with proper tools, the need to make the film accessible to novices required additional effort. If a concept taxes the audience's geometric imagination, then its explanation will tax the film-maker's imagination. A short video, Animating Proofs <ref> [VR4f] </ref> uses a couple of techniques to effectively illustrate Pythagoras' Theorem. The narrator reads the proof of the theorem from Euclid's Elements, and whenever a geometric object such as a line or point is mentioned, the corresponding graphical element is highlighted.
Reference: [EG91] <author> David Epstein, Charlie Gunn, et al, "Not-Knot", </author> <title> distributed by A K Peters, </title> <address> Wellesley MA, </address> <year> 1991. </year>
Reference-contexts: Geomview's versatility is shown in the wonderful movies <ref> [EG91] </ref> [LM94] [LM95] that have been made with its help. Of course, with all that versatility comes complexity: not only is Geomview a very large piece of software, but also users may take some time to learn its special features. <p> As a result, we find in these videos examples not only of algorithm animation [VR1a,c,d,f,g,i,j, 2b,c,d,e,h, 3a,b,c,g, 4b,d], but also mathematical visualizations [VR3e,4e,4f] and interactive visualizations [VR1e,2a,3f,h,4a,c]. In addition to the Video Review, we will also briefly discuss three films from the Geometry Center <ref> [EG91] </ref> [LM94] [LM95]. This section does not aim at a thorough review of all the videos extant, but rather seeks to present specific animation techniques which are used in some of them. These techniques (i.e. tricks used twice!) turn a video into more than simply "dancing data". <p> They were all produced with Geomview, as well as other software. Not Knot <ref> [EG91] </ref> introduces the viewer to knot theory, by considering the complement of a knot. Visualizing the complement of the Borromean rings leads to a brief excursion into hyperbolic geometry.
Reference: [LM94] <author> Silvio Levy, Delle Maxwell and Tamara Munzner. </author> <title> "Outside In", distributed by A K Peters, </title> <address> Wellesley MA, </address> <year> 1994. </year>
Reference-contexts: Geomview's versatility is shown in the wonderful movies [EG91] <ref> [LM94] </ref> [LM95] that have been made with its help. Of course, with all that versatility comes complexity: not only is Geomview a very large piece of software, but also users may take some time to learn its special features. <p> As a result, we find in these videos examples not only of algorithm animation [VR1a,c,d,f,g,i,j, 2b,c,d,e,h, 3a,b,c,g, 4b,d], but also mathematical visualizations [VR3e,4e,4f] and interactive visualizations [VR1e,2a,3f,h,4a,c]. In addition to the Video Review, we will also briefly discuss three films from the Geometry Center [EG91] <ref> [LM94] </ref> [LM95]. This section does not aim at a thorough review of all the videos extant, but rather seeks to present specific animation techniques which are used in some of them. These techniques (i.e. tricks used twice!) turn a video into more than simply "dancing data". <p> They were all produced with Geomview, as well as other software. Not Knot [EG91] introduces the viewer to knot theory, by considering the complement of a knot. Visualizing the complement of the Borromean rings leads to a brief excursion into hyperbolic geometry. Outside In <ref> [LM94] </ref> visualizes the remarkable theorem which states that a sphere in three-space can be smoothly everted, in other words, turned inside out. The Shape of Space [LM95] visualizes toroidal space. It explains, in more detail, some concepts that were brought up in Not Knot.
Reference: [LM95] <author> Stuart Levy, Tamara Munzner, Lori Thomson et al, </author> <title> "The Shape of Space". </title> <note> (To be released) 37 </note>
Reference-contexts: Geomview's versatility is shown in the wonderful movies [EG91] [LM94] <ref> [LM95] </ref> that have been made with its help. Of course, with all that versatility comes complexity: not only is Geomview a very large piece of software, but also users may take some time to learn its special features. <p> As a result, we find in these videos examples not only of algorithm animation [VR1a,c,d,f,g,i,j, 2b,c,d,e,h, 3a,b,c,g, 4b,d], but also mathematical visualizations [VR3e,4e,4f] and interactive visualizations [VR1e,2a,3f,h,4a,c]. In addition to the Video Review, we will also briefly discuss three films from the Geometry Center [EG91] [LM94] <ref> [LM95] </ref>. This section does not aim at a thorough review of all the videos extant, but rather seeks to present specific animation techniques which are used in some of them. These techniques (i.e. tricks used twice!) turn a video into more than simply "dancing data". <p> Visualizing the complement of the Borromean rings leads to a brief excursion into hyperbolic geometry. Outside In [LM94] visualizes the remarkable theorem which states that a sphere in three-space can be smoothly everted, in other words, turned inside out. The Shape of Space <ref> [LM95] </ref> visualizes toroidal space. It explains, in more detail, some concepts that were brought up in Not Knot. All three films show that a great deal of effort went into their production. They achieve the difficult task of explaining problems in topology to novices.
References-found: 72

