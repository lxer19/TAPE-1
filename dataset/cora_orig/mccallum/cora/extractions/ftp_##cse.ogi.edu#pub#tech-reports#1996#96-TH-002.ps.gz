URL: ftp://cse.ogi.edu/pub/tech-reports/1996/96-TH-002.ps.gz
Refering-URL: ftp://cse.ogi.edu/pub/tech-reports/README.html
Root-URL: http://www.cse.ogi.edu
Title: Local Register Allocation Spanning Basic Blocks  
Author: by Lynn Thompson 
Degree: 1983 A thesis submitted to the faculty of the Oregon Graduate Institute of Science Technology in partial fulfillment of the requirements for the degree Master of Science in Computer Science and Engineering  
Date: April 1996  
Affiliation: B.S., Portland State University,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Aho, A.V., Sethi, R., Ullman, J.D., </author> <booktitle> Compilers, Principles, Techniques, and Tools, </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading Ma.,1986. </address>
Reference: [2] <author> Bernstein, D., et. al., </author> <title> Spill Code Minimization Techniques for Optimizing Compilers, </title> <booktitle> ACM SIGPLAN 89 Conference on Programming Language Design and Implementation, </booktitle> <pages> pp. 258-263, </pages> <year> 1989. </year>
Reference: [3] <author> Briggs, P., et. al., </author> <title> Coloring Heuristics for Register Allocation, </title> <booktitle> ACM SIGPLAN 89 Conference on Programming Language Design and Implementation, </booktitle> <pages> pp. 275-284, </pages> <year> 1989. </year>
Reference: [4] <author> Callahan, D., Koblenz, B., </author> <title> Register Allocation via Hierarchical Graph Coloring, </title> <booktitle> Proceedings of the ACM SIGPLAN 91 Conference on Programming Language Design and Implementation, </booktitle> <address> pp.192-203, </address> <year> 1991. </year>
Reference: [5] <author> Chaitin, G., et. al., </author> <title> Register Allocation via Coloring, </title> <journal> Computer Languages, </journal> <volume> Vol. 6, </volume> <pages> pp. 47-57, </pages> <year> 1981. </year>
Reference: [6] <author> Chaitin, G., </author> <title> Register Allocation & Spilling Via Graph Coloring, </title> <booktitle> Proceedings of the ACM SIGPLAN 82 Symposium on Compiler Construction, </booktitle> <pages> pp. 98-105, </pages> <year> 1982. </year>
Reference: [7] <author> Chow, F., Hennessey, J., </author> <title> Register Allocation by Priority-Based Coloring, </title> <booktitle> ACM SIGPLAN 84 Symposium on Compiler Construction, </booktitle> <pages> pp. 222-232, </pages> <year> 1984. </year>
Reference: [8] <author> Deo, N., </author> <title> Graph Theory, </title> <booktitle> Prentice-Hall of India, </booktitle> <address> New Dehli, India, </address> <year> 1987. </year>
Reference: [9] <author> Golumbic, C., </author> <title> Algorithmic Graph Theory and Perfect Graphs, </title> <publisher> Academic Press, </publisher> <address> New York, NY., </address> <year> 1980. </year>
Reference: [10] <author> Golumbic, C., </author> <title> Interval Graphs and Related Topics, </title> <journal> Discrete Mathematics, </journal> <volume> No. 55, </volume> <pages> pp. 113-121, </pages> <year> 1985. </year>
Reference: [11] <author> Gupta, R., Soffa, M.L., Steele, T., </author> <title> Register Allocation Via Clique Separators, </title> <booktitle> ACM SIGPLAN 89 Conference on Programming Language Design and Implementation, </booktitle> <pages> pp. 264-274, </pages> <year> 1989. </year> <month> 81 </month>
Reference: [12] <author> Gupta, U.I., Lee, D.T., Leung, </author> <title> Y.T.,Efficient Algorithms for Interval Graphs and Circular-Arc Graphs, </title> <journal> Networks, </journal> <volume> Vol. 12, </volume> <pages> pp. 459-467, </pages> <year> 1982. </year>
Reference: [13] <author> Hendren, L., Gao, G., Altman, E., Mukerji, C., </author> <title> A Register Allocation Framework Based on Hierarchical Cyclic Interval Graphs, </title> <journal> Journal of Programming Languages, </journal> <volume> Vol. 1, No. 3, </volume> <pages> pp. 155-185, </pages> <year> 1993. </year>
Reference: [14] <author> W. -m, Hwu, W., et. al., </author> <title> The Superblock: An Effective Technique for VLIW and Superscalar Compilation, </title> <journal> The Journal of Supercomputing, </journal> <volume> Vol. 7, No. 1, </volume> <pages> pp. 229-248, </pages> <year> 1993. </year>
Reference: [15] <author> Nickerson, B., </author> <title> Graph Coloring Register Allocation for Processors with Multi-Register Operands, </title> <booktitle> Proceedings of the ACM SIGPLAN 90 Conference on Programming Language Design and Implementation, </booktitle> <pages> pp. 40-52, </pages> <year> 1990. </year>
Reference-contexts: The loop is unrolled until block count *2 approaches block limit . Basic Block Cloning 68 Cloning is the duplication of basic blocks in a flow graph that have more than one predecessor. This process is similar to tail duplication <ref> [15] </ref>. Each predecessor branches to a copy of the cloned basic block. An example of a basic block with more than one predecessor is the basic block at the confluence point for an if-then-else statement.
Reference: [16] <author> Shimon, E., </author> <title> Graph Algorithms, </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Mo., </address> <year> 1979. </year>
Reference: [17] <author> Wolfe, M., </author> <title> Analysis and Optimizations for Modern Architectures, </title> <institution> Oregon Graduate Institute, Beaverton, </institution> <address> Or., </address> <year> 1993. </year> <note> 82 BIOGRAPHICAL INFORMATION Lynn Thompson was born in Portland Oregon on November 29, </note> <year> 1959. </year> <title> Lynn graduated from Portland State University, in the Spring of 1983 with Bachelor of Science degree in Sociology. Studies in computer science, and mathematics continued at Portland Community College from 1984 to 1986 leading to an Associates degree in Computer Science. Employment at Intel Corporation provided incentive and means to pursue a Masters Degree in Computer Science. Lynn is employed as a Software Engineer in the Microcomputer Software Labs at Intel. </title>
References-found: 17

