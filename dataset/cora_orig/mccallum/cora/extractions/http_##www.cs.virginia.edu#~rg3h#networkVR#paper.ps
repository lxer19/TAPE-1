URL: http://www.cs.virginia.edu/~rg3h/networkVR/paper.ps
Refering-URL: http://www.cs.virginia.edu/~rg3h/networkVR/paper.html
Root-URL: http://www.cs.virginia.edu
Email: (rich|rjl2b|mlk4v|pausch@virginia.edu)  
Title: An Introductory Tutorial for Developing Multi-User Virtual Environments  
Author: Rich Gossweiler, Robert J. Laferriere, Michael L. Keller, Randy Pausch Randy Pausch 
Address: Charlottesville, Va 22903  
Affiliation: Computer Science Department University of Virginia  
Note: Page 1 of 18  contact author:  
Abstract: This paper is an introductory level tutorial describing how to implement a distributed multi-participant virtual environment (VE). This tutorial is intended for students who are competent programmers and who now wish to implement a distributed multi-participant application. We describe the fundamental concepts of distributed computing for multi-player simulations and provide a concrete example, including C source code available via the Internet. The template program demonstrates a simple multi-player, distributed application, where each player controls the position of a space ship, and communicates the ships position data over the network. The template uses broadcast communication and a technique called dead-reckoning to improve performance. We give detailed instructions on how to obtain and modify the template, so that students can quickly create their own distributed applications. We conclude by briey discussing advanced issues which are important when constructing more sophisticated multi-participant VEs. 
Abstract-found: 1
Intro-found: 1
Reference: [Blau92] <author> Brian Blau, Charles Hughes, Michael Moshell and Curtis Lisle, </author> <title> Networked Virtual Environments, </title> <booktitle> Computer Graphics, Special Issue on 1992 Symposium on Interactive Computer Graphics, </booktitle> <month> March </month> <year> 1992, </year> <pages> pp. 157-160. </pages>
Reference-contexts: VEs come in many avors, ranging from a single person on a single computer, to many people running in parallel across a distributed set of machines. One potential use for a VE is to allow several people, or players <ref> [Blau92] </ref>, to interact in a single simulation; for example, several students sitting at different computers connected over a network.
Reference: [Carlsson93] <author> Chirster Carlsson and Olof Hagsand, </author> <title> DIVE A Platform for Multi-User Virtual Environments, </title> <journal> Computers and Graphics, </journal> <volume> 6, </volume> <year> 1993. </year>
Reference-contexts: As an example, Moshell [Moshell94] developed a complex model for dynamic terrains that involves numerical methods to solve Page 15 of 18 complex models of Newtonian objects. For interested readers, there are VE development platforms such as VEOS [Coco] and DIVE <ref> [Carlsson93] </ref>, with more advanced primitives to simplify virtual environment development. Reliability As the distributed programs become more complicated, the chances for a process to fail increases.
Reference: [Coco] <author> Geoffrey P. Coco, </author> <title> and Dav Lion, Experiences with Asynchronous Communication Models in VEOS, A Distributed Programming Facility for Uniprocessor LANs, </title> <type> Technical Report FJ-15, </type> <institution> University of Washington. </institution>
Reference-contexts: As an example, Moshell [Moshell94] developed a complex model for dynamic terrains that involves numerical methods to solve Page 15 of 18 complex models of Newtonian objects. For interested readers, there are VE development platforms such as VEOS <ref> [Coco] </ref> and DIVE [Carlsson93], with more advanced primitives to simplify virtual environment development. Reliability As the distributed programs become more complicated, the chances for a process to fail increases.
Reference: [DeLine93] <author> Robert DeLine, Alice: </author> <title> A Rapid Prototyping System for Three-Dimensional Interactive Graphical Environments, </title> <type> Masters Thesis, </type> <institution> University of Virginia, </institution> <month> May, </month> <year> 1993. </year>
Reference-contexts: This initiated the desire to produce an introductory tutorial. We thank the 1994 computer graphics class at the University of Virginia, especially Jim Durbin, David Shiett, and Jeff White, and we give special thanks to the Virginia User Interface Group for their work on the Alice system <ref> [DeLine93] </ref>, which was used to rapidly prototype the simulation. We would also like to thank the reviewers, who greatly improved the quality of this paper through their detailed comments. Page 18 of 18
Reference: [Garca94] <author> Alejandro Garca-Alonso, Nicols Serrano and Jaun Flaquer, </author> <title> Solving the Collision Detection Problem, </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 14(3), </volume> <month> May </month> <year> 1994, </year> <pages> pp. 36-43, </pages> <address> T385.I13 (ISSN 0272-1716). </address>
Reference-contexts: Collision detection quickly becomes more complicated as the number of objects in the environment increases, and the accuracy with which the checking is performed. The issue of collision detection is discussed in several references [Uchiki83] <ref> [Garca94] </ref>. Physically Correct Modeling Physically correct modelling is a complex topic. In order to perform realistic smooth updating, state variable characteristics of the object being modelled need to be considered.
Reference: [IEEE93] <institution> Institute of Electrical and Electronics Engineers, International Standard, ANSI/ IEEE Std 1278-1993, Standard for Information Technology, Protocols for Distributed Interactive Simulation, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: One way to reduce the amount of messages being sent is to use an algorithm called dead-reckoning. Dead-reckoning is at the heart of popular simulation mechanisms, such as DIS (the Distributed Interactive Simulation protocol) <ref> [IEEE93] </ref>, and is used in SIMNET [Pope89] and NPSNET [Macedonia95]. player playerplayerplayer network Page 7 of 18 Consider a distributed space dogfight game with n player-processes, each controlling its own space ship.
Reference: [Macedonia95] <author> Michael R. Macedonia, Michael J. Zyda, David R. Pratt, Paul T. Barham and Steven Zeswitz. NPSNET: </author> <title> A Network Software Architecture for Large Scale Virtual Environments, </title> <note> submitted to the special issue of PRESENCE on Networked VE & Teleoperation. </note>
Reference-contexts: One way to reduce the amount of messages being sent is to use an algorithm called dead-reckoning. Dead-reckoning is at the heart of popular simulation mechanisms, such as DIS (the Distributed Interactive Simulation protocol) [IEEE93], and is used in SIMNET [Pope89] and NPSNET <ref> [Macedonia95] </ref>. player playerplayerplayer network Page 7 of 18 Consider a distributed space dogfight game with n player-processes, each controlling its own space ship. <p> UDP Broadcast has one distinct disadvantage. It only executes over a single segment of the Local Area network. An alternative model, Internet Protocol Multicast, or IP-Multicast, provides unreliable service which is routable over the whole internet <ref> [Macedonia95] </ref>, but since this protocol is not as widely available as UDP broadcast, we use with the more available UDP broadcast protocol for our tutorial implementation. Sockets and Ports The underlying abstraction that UNIX provides for process communication is called a socket.
Reference: [Moshell94] <author> Michael Moshell, Brian Blau, Xin Li and Curtis Lisle, </author> <title> Dynamic Terrain, </title> <journal> Simulation, </journal> <volume> 62(1), </volume> <pages> pages 29-40, </pages> <address> TA34.S54, (ISSN 0037-5497). </address>
Reference-contexts: The issue of collision detection is discussed in several references [Uchiki83] [Garca94]. Physically Correct Modeling Physically correct modelling is a complex topic. In order to perform realistic smooth updating, state variable characteristics of the object being modelled need to be considered. As an example, Moshell <ref> [Moshell94] </ref> developed a complex model for dynamic terrains that involves numerical methods to solve Page 15 of 18 complex models of Newtonian objects. For interested readers, there are VE development platforms such as VEOS [Coco] and DIVE [Carlsson93], with more advanced primitives to simplify virtual environment development.
Reference: [Pope89] <author> Pope, Arthur, </author> <title> BBN Report No. 7102, The SIMNET Network and Protocols, BBN Systems and Technologies, </title> <address> Cambridge, Massachusetts, </address> <month> July </month> <year> 1989. </year>
Reference-contexts: One way to reduce the amount of messages being sent is to use an algorithm called dead-reckoning. Dead-reckoning is at the heart of popular simulation mechanisms, such as DIS (the Distributed Interactive Simulation protocol) [IEEE93], and is used in SIMNET <ref> [Pope89] </ref> and NPSNET [Macedonia95]. player playerplayerplayer network Page 7 of 18 Consider a distributed space dogfight game with n player-processes, each controlling its own space ship.
Reference: [Stevens90] <author> Richard W. Stevens, </author> <title> UNIX Network Programming, </title> <publisher> Prentice-Hall, </publisher> <address> N.J., </address> <year> 1990, </year> <note> QA76.76.063S755, (ISBN 0-13-949876-1). </note>
Reference-contexts: The trade-off is that, while TCP provides a guarantee, applications using it may run as much as ten times slower than those written using UDP. For more information and example code supporting these protocols, we recommend Stevens Unix Network Programming book <ref> [Stevens90] </ref>. Factors Involved in Reliability If a message is sent across a wire from one computer to another, how can it get lost, misdirected or corrupted? There are several factors which may contribute to the reliability of a network.
Reference: [Uchiki83] <author> T. Uchiki, T. Ohashi and M. Tokoro, </author> <title> Collision Detection in Motion Simulation, </title> <journal> Computers and Graphics, </journal> <pages> 7(3-4), </pages> <year> 1983, </year> <pages> pages 285-293. </pages>
Reference-contexts: Collision detection quickly becomes more complicated as the number of objects in the environment increases, and the accuracy with which the checking is performed. The issue of collision detection is discussed in several references <ref> [Uchiki83] </ref> [Garca94]. Physically Correct Modeling Physically correct modelling is a complex topic. In order to perform realistic smooth updating, state variable characteristics of the object being modelled need to be considered.
References-found: 11

