URL: http://www.cs.brown.edu/research/ddg/papers/bdupdates.ps.gz
Refering-URL: http://www.cs.brown.edu/research/ddg/publications.html
Root-URL: http://www.cs.brown.edu
Email: sa@cs.brown.edu  franklin@cs.umd.edu  sbz@cs.brown.edu  
Title: Disseminating Updates on Broadcast Disks  
Author: Swarup Acharya Michael Franklin Stanley Zdonik 
Affiliation: Brown University  University of Maryland  Brown University  
Abstract: Lately there has been increasing interest in the use of data dissemination as a means for delivering data from servers to clients in both wired and wireless environments. Using data dissemination, the transfer of data is initiated by servers, resulting in a reversal of the traditional relationship between clients and servers. In previous papers, we have proposed Broadcast Disks as a model for structuring the repetitive transmission of data in a broadcast medium. Broadcast Disks are intended for use in environments where, for either physical or application-dependent reasons, there is asymmetry in the communication capacity between clients and servers. Examples of such environments include wireless networks with mobile clients, cable and direct satellite broadcast, and information dispersal applications. Our initial studies of Broadcast Disks focused on the performance of the mechanism when the data being broadcast did not change. In this paper, we extend those results to incorporate the impact of updates. We first propose several alternative models for updates and examine the fundamental tradeoff that arises between the currency of data and performance. We then propose and analyze mechanisms for implementing these various models. The performance results show that, even in a model where updates must be transmitted immediately, the performance of the Broadcast Disks technique can be made quite robust through the use of simple tech niques for propagating and prefetching data items.
Abstract-found: 1
Intro-found: 1
Reference: [Acha95a] <author> S. Acharya, R. Alonso, M. Franklin, S. Zdonik, </author> <title> Broadcast Disks: Data Management for Asymmetric Communications Environments, </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> San Jose, CA, </address> <month> May, </month> <year> 1995. </year>
Reference-contexts: The client-side storage management policies take into account both the local access probability (using heuristics such as LRU or usage frequency) and the expected latency of a data item; items that reside on slower disks have higher average latencies. The caching policies <ref> [Acha95a] </ref> favor slow-disk data items, allowing clients to use their local storage resources to retain pages which are important locally, but are not sufficiently popular across all clients to warrant placement on a faster disk. <p> Multiple disks can be simulated on a single broadcast channel by broadcasting some pages more frequently than others. Each disk corresponds to those pages that have the same broadcast frequency. The desirable characteristics for a broadcast program have been outlined in <ref> [Acha95a] </ref>. Briefly, a good broadcast program is periodic, has fixed (or nearly fixed) inter-arrival times for repeated occurrences of a page, and allocates bandwidth to pages in accordance with their access probabilities. <p> In this paper we explain the process using a simple example. For a detailed description of the algorithm, the reader is referred to <ref> [Acha95a] </ref>. of similar access probabilities. Each of these ranges will be a separate disk in the broadcast. In the example, pages of the first disk are to be broadcast twice as often as those in the second and four times as often as those of the slowest disk. <p> In the Broadcast Disk model, the best broadcast program for clients in the warm-up phase is different than the best program for clients in steady state. As described in <ref> [Acha95a] </ref>, once a client has warmed up its cache, it is wasteful of bandwidth to frequently broadcast pages that are highly likely to be in the cache. To address this issue, the Broadcast Disk model includes the notion of offset. <p> In the system studied here, a propagation list contains the values of all pages that have been updated since the last propagation list was broadcast. 4 Modeling the Broadcast Environment Our model of the broadcast environment has been described previously <ref> [Acha95a, Acha96] </ref>. The results presented in this paper are based on the same underlying model, extended to include updates. We briefly describe the model in this section. In the broadcast environment, the performance of a single client for a given broadcast program is independent of the presence of other clients. <p> Similar to earlier models of skewed access [Dan90], we partitioned the pages into regions of RegionSize pages each, such that the probability of accessing any page within a region is uniform; the Zipf distribution is applied to these regions. 4.1.1 Client Cache Management We use the LIX <ref> [Acha95a, Acha96] </ref> algorithm to maintain the client cache. LIX is a constant time implementation of the pure cost-based algorithm PI X . <p> Cost-based caching strategies like LIX (and PIX ) have been shown to perform significantly better in a broadcast environment than strategies like LRU which just use probability information <ref> [Acha95a] </ref>. LIX is a modification of LRU that takes into account the broadcast frequency. LRU maintains the cache as a single linked-list of pages. When a cache-resident page is accessed, it is moved to the top of the list. <p> Noise determines the percentage of pages for which there may be a mismatch between the client and the server. As the noise increases, the client's performance can be expected to degrade. For further implementation details, the reader is referred to <ref> [Acha95a] </ref>. 4.2.2 The Update Model The parameters that describe the update model are shown in Table 3. Updates are generated in the system by simulating a writer process at the server. The writer process is a simple two-step write-wait loop.
Reference: [Acha95b] <author> S. Acharya, M. Franklin, S. Zdonik, </author> <title> Dissemination-based Data Delivery Using Broadcast Disks, </title> <journal> IEEE Personal Communications, </journal> <volume> 2(6), </volume> <month> December, </month> <year> 1995. </year>
Reference-contexts: In previous work, we proposed and analyzed the Broadcast Disks model for disseminating data in a broadcast environment <ref> [Zdon94, Acha95b] </ref>. Specifically, Broadcast Disks are intended for environments where the communication channel among clients and servers is asymmetric. In an asymmetric communication environment, there is typically more communication capacity available from servers to clients than in the opposite direction.
Reference: [Acha96] <author> S. Acharya, M. Franklin, S. Zdonik, </author> <title> Prefetching from a Broadcast Disk, </title> <booktitle> 12th International Conference on Data Engineering, </booktitle> <address> New Orleans, LA, </address> <month> February, </month> <year> 1996. </year>
Reference-contexts: Such policies allow clients to exploit their local resources in those cases where their access patterns differ from the average client population, while taking advantage of the improved delivery rate of globally popular items on the broadcast. The prefetching policies <ref> [Acha96] </ref> are more dynamic in the sense that they take into consideration not just the average latency for a data item, but rather, the time-to-arrival for items at a given instant. <p> If offset is used, the performance penalty can be tremendous, as the most important pages have been placed on the slowest disks. This problem, however, can be easily addressed in the Broadcast Disk environment through the use of a technique we call auto-prefetching. As demonstrated in <ref> [Acha96] </ref>, the broadcast medium is in general, highly conducive to data prefetching; data pages continually flow past clients so the clients can choose to prefetch passing pages without imposing any additional load on shared resources (only the local client resources are impacted). <p> In the system studied here, a propagation list contains the values of all pages that have been updated since the last propagation list was broadcast. 4 Modeling the Broadcast Environment Our model of the broadcast environment has been described previously <ref> [Acha95a, Acha96] </ref>. The results presented in this paper are based on the same underlying model, extended to include updates. We briefly describe the model in this section. In the broadcast environment, the performance of a single client for a given broadcast program is independent of the presence of other clients. <p> Similar to earlier models of skewed access [Dan90], we partitioned the pages into regions of RegionSize pages each, such that the probability of accessing any page within a region is uniform; the Zipf distribution is applied to these regions. 4.1.1 Client Cache Management We use the LIX <ref> [Acha95a, Acha96] </ref> algorithm to maintain the client cache. LIX is a constant time implementation of the pure cost-based algorithm PI X . <p> LIX performs a constant number of operations per page replacement (proportional to the number of disks) which is the same order as that of LRU. LIX evaluates the lix value of a page by dividing an estimated probability value of this page by its frequency of broadcast. Similar to <ref> [Acha96] </ref>, we assume the client develops this probability model for each page by sampling its own requests over a period of time. We count the number of accesses for a page and divide this number by the total number of accesses to compute the page's probability. <p> We have shown that with some very simple enhancements it is possible to produce results that closely track the read-only case. Thus, all of our intuitions and results that were observed for the read-only case ([Acha95a], <ref> [Acha96] </ref>) are still valid in the update setting. In the future, we intend to extend this work by considering some of the alternative models of consistency that were listed in Section 2.
Reference: [Alon90] <author> R. Alonso, D. Barbara, H. Garcia-Molina, </author> <title> Data Caching Issues in an Information Retrieval System, </title> <journal> ACM TODS, </journal> <volume> 15(3), </volume> <month> September, </month> <year> 1990. </year>
Reference-contexts: As is discussed in Section 6, schemes for providing consistency in dissemination-based environments have been studied previously <ref> [Alon90, Bowe92, Barb94, Jing95, Wu96] </ref>. Our techniques differ from previous work due to the unique characteristics of the Broadcast Disks approach, which arise due to the combination of repetitive, multi-disk broadcast of data and associated client-side cache management protocols. The key contributions of this work are twofold. <p> Note that this model, although often used in dissemination-based and/or mobile database work, is far weaker than serializability there is no notion of mutual consistency among groups of items. * Quasi-caching <ref> [Alon90] </ref> Consistency can be defined on a per-client basis using constraints that specify a tolerance of slack compared to Latest Value. <p> Our work differs from these in that we consider multi-level disks and their relationship to cache management. Influence of updates on performance in dissemination-based environments has been studied in <ref> [Alon90, Bowe92, Barb94, Jing95, Wu96] </ref>. In [Alon90], the notion of quasi-copies was introduced where a replica was allowed to deviate from the original copy in a controlled fashion. In this environment, consistency could be defined on a per-client basis. <p> Our work differs from these in that we consider multi-level disks and their relationship to cache management. Influence of updates on performance in dissemination-based environments has been studied in [Alon90, Bowe92, Barb94, Jing95, Wu96]. In <ref> [Alon90] </ref>, the notion of quasi-copies was introduced where a replica was allowed to deviate from the original copy in a controlled fashion. In this environment, consistency could be defined on a per-client basis.
Reference: [Amma85] <author> M. Ammar, J. Wong, </author> <title> The Design of Teletext Broadcast Cycles, Perf. Evaluation, </title> <month> 5 </month> <year> (1985). </year>
Reference-contexts: Repetitive broadcast has been investigated in several previous projects <ref> [Amma85, Wong88, Bowe92, Imie94a] </ref>.
Reference: [Arch86] <author> J. Archibald, J. Baer, </author> <title> Cache Coherence Protocols: Evaluation Using a Multiprocessor Simulation Model, </title> <journal> ACM TOCS, </journal> <volume> 4(4), </volume> <month> November, </month> <year> 1986. </year>
Reference-contexts: Problems related to consistency arise in most other systems where client caching is used, such as multi-processor architectures <ref> [Arch86] </ref>, distributed file systems [Levy90], distributed shared memory [Nitz91], and client-server database systems [Fran96]. In such systems, there are two basic techniques for communicating consistency information: invalidation (also called Write-Invalidate) and propagation (also called Write-Broadcast). For invalidation, the server sends out messages to inform the client of modified pages. <p> Finally, a discussion and comparison of the caching algorithms (and techniques to cope with updates) in client-server systems is available in [Fran96]. For similar surveys in other areas the reader is referred to [Levy90] (distributed file systems), [Nitz91] (distributed shared memory) and <ref> [Arch86] </ref> (multi-processor architectures). 7 Conclusions In this paper, we have examined the way in which updates affect the performance of Broadcast Disks. As in our previous work, the design considerations divide into client-side and server-side issues.
Reference: [Barb94] <author> D. Barbara, T. Imielinski, Sleepers and Workaholics: </author> <title> Caching Strategies in Mobile Environments, </title> <booktitle> Proc. ACM SIG-MOD Conf., </booktitle> <address> Minneapolis, MN, </address> <month> May, </month> <year> 1994. </year>
Reference-contexts: As is discussed in Section 6, schemes for providing consistency in dissemination-based environments have been studied previously <ref> [Alon90, Bowe92, Barb94, Jing95, Wu96] </ref>. Our techniques differ from previous work due to the unique characteristics of the Broadcast Disks approach, which arise due to the combination of repetitive, multi-disk broadcast of data and associated client-side cache management protocols. The key contributions of this work are twofold. <p> We assume an environment such as CNN-at-Work, in which active clients can constantly monitor the broadcast. If a client stops monitoring the broadcast, then it can no longer trust the contents of its cache. Techniques for implementing cache consistency for intermittently connected clients have been studied in <ref> [Barb94, Jing95, Wu96] </ref>. 4. Clients remain active for significant periods of time. Once a client begins monitoring the broadcast, it does so for a period of time sufficient for its cache to fill and reach a steady state. That is, we focus on the steady state behavior of connected clients. <p> Our work differs from these in that we consider multi-level disks and their relationship to cache management. Influence of updates on performance in dissemination-based environments has been studied in <ref> [Alon90, Bowe92, Barb94, Jing95, Wu96] </ref>. In [Alon90], the notion of quasi-copies was introduced where a replica was allowed to deviate from the original copy in a controlled fashion. In this environment, consistency could be defined on a per-client basis. <p> For queries spanning over multiple cycles, the client used an optimistic protocol and the server broadcast a log of changes which was used to detect conflicts. This periodic consistency guarantee is similar to our once-a-major-cycle update technique. <ref> [Barb94] </ref> addressed the problem of updates and consequently, stale data in a client's cache in a mobile setting where clients could be disconnected for long periods of time. <p> Among other ideas, they proposed periodic broadcast of invalidations using signature based schemes. [Jing95] and [Wu96] are recent papers which improve upon the algorithms proposed in <ref> [Barb94] </ref>. These papers differ significantly from ours, however, because they assume a pull-based system where the client fetches data by making explicit requests to the server via the back channel; only the invalidations are disseminated.
Reference: [Bere95] <author> H. Berenson, P. Bernstein, J. Gray, J. Melton, B. O'Neil, P. O'Neil, </author> <title> A Critique of ANSI SQL Isolation Levels, </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> San Jose, CA, </address> <month> June, </month> <year> 1995. </year>
Reference-contexts: The notion of data consistency is, of course, application-dependent. In database systems data consistency is traditionally tied to the notion of transaction serializability. In practice, however, few applications demand or even want full se-rializability, and much effort has gone into defining weaker forms of correctness (e.g., <ref> [Bere95, Kort95] </ref>). Because dissemination-based information systems are only now beginning to emerge, the notion of data consistency for applications in such systems is even less well-understood. <p> Such an approach was used in the Datacycle system [Bowe92]. * Serializability If client reads and server updates are performed within the context of transactions, then serializability (or some reduced degrees of isolation <ref> [Bere95] </ref>) may be an appropriate notion of consistency.
Reference: [Bowe92] <author> T. Bowen, G. Gopal, G. Herman, T. Hickey, K. Lee, W. Mansfield, J. Raitz, A. Weinrib, </author> <title> The Datacycle Architecture, </title> <journal> CACM, </journal> <volume> 35(12), </volume> <month> December, </month> <year> 1992. </year>
Reference-contexts: Dissemination-based information systems have been proposed and/or implemented for both wired and wireless networks for a wide range of applications. Some examples include: stock quotation and trading systems [Oki93], advanced traveler information systems (ATIS) [Shek94], wireless classrooms [Katz94], fast database lookup <ref> [Herm87, Bowe92] </ref>, and news delivery in both wireless [Giff90] and wired [Inte96] environments. In previous work, we proposed and analyzed the Broadcast Disks model for disseminating data in a broadcast environment [Zdon94, Acha95b]. Specifically, Broadcast Disks are intended for environments where the communication channel among clients and servers is asymmetric. <p> Repetitive broadcast has been investigated in several previous projects <ref> [Amma85, Wong88, Bowe92, Imie94a] </ref>. <p> As is discussed in Section 6, schemes for providing consistency in dissemination-based environments have been studied previously <ref> [Alon90, Bowe92, Barb94, Jing95, Wu96] </ref>. Our techniques differ from previous work due to the unique characteristics of the Broadcast Disks approach, which arise due to the combination of repetitive, multi-disk broadcast of data and associated client-side cache management protocols. The key contributions of this work are twofold. <p> If clients are allowed to cache data, then they are guaranteed that such data will remain valid for the remainder of the interval during which the data was initially read. Such an approach was used in the Datacycle system <ref> [Bowe92] </ref>. * Serializability If client reads and server updates are performed within the context of transactions, then serializability (or some reduced degrees of isolation [Bere95]) may be an appropriate notion of consistency. <p> Our work differs from these in that we consider multi-level disks and their relationship to cache management. Influence of updates on performance in dissemination-based environments has been studied in <ref> [Alon90, Bowe92, Barb94, Jing95, Wu96] </ref>. In [Alon90], the notion of quasi-copies was introduced where a replica was allowed to deviate from the original copy in a controlled fashion. In this environment, consistency could be defined on a per-client basis. <p> Based on the constraints supplied, the client would be guaranteed to have the access to a value which was up-to date within the last t minutes of the most recent value or within n% of the current value (for scalar variables) and so on. The Datacycle Project <ref> [Bowe92] </ref> at Bellcore was intended to exploit high bandwidth, optical communication technology and employed custom VLSI data filters for performing associative searches in parallel on the broadcast data. The clients could execute queries or transactions locally and use the upstream network to send updates back to the server.
Reference: [Dan90] <author> A. Dan, D. M. Dias, P. Yu, </author> <title> The Effect of Skewed Access on Buffer Hits and Data Contention in a Data Sharing Environment, </title> <booktitle> Proc. 16th VLDB Conf., </booktitle> <month> Aug., </month> <year> 1990. </year>
Reference-contexts: Within the range, the access probabilities follow a Zipf [Knut81] distribution. The Zipf distribution with a parameter is frequently used to model non-uniform access. It produces access patterns that become increasingly skewed as increases. Similar to earlier models of skewed access <ref> [Dan90] </ref>, we partitioned the pages into regions of RegionSize pages each, such that the probability of accessing any page within a region is uniform; the Zipf distribution is applied to these regions. 4.1.1 Client Cache Management We use the LIX [Acha95a, Acha96] algorithm to maintain the client cache.
Reference: [Fran92] <author> M. Franklin, M. Carey, </author> <title> Client-Server Caching Revisited, </title> <booktitle> in Proceedings of the International Workshop on Distributed Object Management, </booktitle> <address> Edmonton, Canada, </address> <month> August, </month> <year> 1992, </year> <note> (Published as Distributed Object Management, </note> <editor> Ozsu, Dayal, Vaduriez, eds., </editor> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1994). </year>
Reference: [Fran96] <author> M. Franklin, </author> <title> Client Data Caching: A Foundation for High Performance Object Database Systems, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <month> February, </month> <year> 1996. </year>
Reference-contexts: Problems related to consistency arise in most other systems where client caching is used, such as multi-processor architectures [Arch86], distributed file systems [Levy90], distributed shared memory [Nitz91], and client-server database systems <ref> [Fran96] </ref>. In such systems, there are two basic techniques for communicating consistency information: invalidation (also called Write-Invalidate) and propagation (also called Write-Broadcast). For invalidation, the server sends out messages to inform the client of modified pages. The client removes these pages from its cache. <p> The techniques developed in this area, however, may be useful for supporting intermittent connectivity in the Broadcast Disk environment as well. Finally, a discussion and comparison of the caching algorithms (and techniques to cope with updates) in client-server systems is available in <ref> [Fran96] </ref>. For similar surveys in other areas the reader is referred to [Levy90] (distributed file systems), [Nitz91] (distributed shared memory) and [Arch86] (multi-processor architectures). 7 Conclusions In this paper, we have examined the way in which updates affect the performance of Broadcast Disks.
Reference: [Giff90] <author> D. Gifford, </author> <title> Polychannel Systems for Mass Digital Communication, </title> <journal> CACM, </journal> <volume> 33(2), </volume> <month> February, </month> <year> 1990. </year>
Reference-contexts: Dissemination-based information systems have been proposed and/or implemented for both wired and wireless networks for a wide range of applications. Some examples include: stock quotation and trading systems [Oki93], advanced traveler information systems (ATIS) [Shek94], wireless classrooms [Katz94], fast database lookup [Herm87, Bowe92], and news delivery in both wireless <ref> [Giff90] </ref> and wired [Inte96] environments. In previous work, we proposed and analyzed the Broadcast Disks model for disseminating data in a broadcast environment [Zdon94, Acha95b]. Specifically, Broadcast Disks are intended for environments where the communication channel among clients and servers is asymmetric.
Reference: [Herm87] <author> G. Herman, G. Gopal, K. Lee, A. Weinrib, </author> <title> The Dat-acycle Architecture for Very High Throughput Database Systems, </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> San Francisco, CA, </address> <month> May, </month> <year> 1987. </year>
Reference-contexts: Dissemination-based information systems have been proposed and/or implemented for both wired and wireless networks for a wide range of applications. Some examples include: stock quotation and trading systems [Oki93], advanced traveler information systems (ATIS) [Shek94], wireless classrooms [Katz94], fast database lookup <ref> [Herm87, Bowe92] </ref>, and news delivery in both wireless [Giff90] and wired [Inte96] environments. In previous work, we proposed and analyzed the Broadcast Disks model for disseminating data in a broadcast environment [Zdon94, Acha95b]. Specifically, Broadcast Disks are intended for environments where the communication channel among clients and servers is asymmetric.
Reference: [Imie94a] <author> T. Imielinski, B. Badrinath, </author> <title> Mobile Wireless Computing: Challenges in Data Management, </title> <journal> CACM, </journal> <volume> 37(10), Oc-tober, </volume> <year> 1994. </year>
Reference-contexts: Repetitive broadcast has been investigated in several previous projects <ref> [Amma85, Wong88, Bowe92, Imie94a] </ref>. <p> Requiring that the clients monitor the broadcast continually or for extended periods of time may have deleterious effects on performance especially when the broadcast is through a very high speed channel (e.g., satellite) or if external constraints such as battery life <ref> [Imie94a] </ref> are an issue.
Reference: [Imie94b] <author> T. Imielinski, S. Viswanathan, B. Badrinath, </author> <title> Energy Efficient Indexing on Air, </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Min-neapolis, MN, </address> <month> May, </month> <year> 1994. </year>
Reference-contexts: The 1 We assume that data items are self identifying. Alternatively, an indexing scheme can be used to locate and identify items, as proposed in <ref> [Imie94b] </ref>. metrics used by the caching and prefetching algorithms include information about the latency of data items. Thus, changes due to Item Placement and/or Disk Structure may cause the relative values of data items to be incorrect, resulting in sub-optimal usage of the client storage resources.
Reference: [Imie94c] <author> T. Imielinski, S. Viswanathan, B. Badrinath, </author> <title> Power Efficient Filtering of Data on Air, </title> <booktitle> Proc. Conf on EDBT, </booktitle> <year> 1994. </year>
Reference: [Inte96] <author> Intel Corp., CNN-at-work, </author> <title> (description of product that supports continuous broadcast and filtering of CNN news stories over a departmental ethernet), </title> <address> http://www.intel.com/comm-net/cnn work/index.html </address>
Reference-contexts: Some examples include: stock quotation and trading systems [Oki93], advanced traveler information systems (ATIS) [Shek94], wireless classrooms [Katz94], fast database lookup [Herm87, Bowe92], and news delivery in both wireless [Giff90] and wired <ref> [Inte96] </ref> environments. In previous work, we proposed and analyzed the Broadcast Disks model for disseminating data in a broadcast environment [Zdon94, Acha95b]. Specifically, Broadcast Disks are intended for environments where the communication channel among clients and servers is asymmetric.
Reference: [Jing95] <author> J. Jing, O. Bukhres, A. Elmargarmid, R. Alonso" Bit-Sequences: </author> <title> A New Cache Invalidation Method in Mobile Environments, </title> <type> Technical Report CSD-TR-94-074, </type> <institution> Computer Sciences Department, Purdue University, </institution> <note> revised May 1995. </note>
Reference-contexts: As is discussed in Section 6, schemes for providing consistency in dissemination-based environments have been studied previously <ref> [Alon90, Bowe92, Barb94, Jing95, Wu96] </ref>. Our techniques differ from previous work due to the unique characteristics of the Broadcast Disks approach, which arise due to the combination of repetitive, multi-disk broadcast of data and associated client-side cache management protocols. The key contributions of this work are twofold. <p> We assume an environment such as CNN-at-Work, in which active clients can constantly monitor the broadcast. If a client stops monitoring the broadcast, then it can no longer trust the contents of its cache. Techniques for implementing cache consistency for intermittently connected clients have been studied in <ref> [Barb94, Jing95, Wu96] </ref>. 4. Clients remain active for significant periods of time. Once a client begins monitoring the broadcast, it does so for a period of time sufficient for its cache to fill and reach a steady state. That is, we focus on the steady state behavior of connected clients. <p> Our work differs from these in that we consider multi-level disks and their relationship to cache management. Influence of updates on performance in dissemination-based environments has been studied in <ref> [Alon90, Bowe92, Barb94, Jing95, Wu96] </ref>. In [Alon90], the notion of quasi-copies was introduced where a replica was allowed to deviate from the original copy in a controlled fashion. In this environment, consistency could be defined on a per-client basis. <p> Among other ideas, they proposed periodic broadcast of invalidations using signature based schemes. <ref> [Jing95] </ref> and [Wu96] are recent papers which improve upon the algorithms proposed in [Barb94]. These papers differ significantly from ours, however, because they assume a pull-based system where the client fetches data by making explicit requests to the server via the back channel; only the invalidations are disseminated.
Reference: [Katz94] <author> R. Katz, </author> <title> Adaption and Mobility in Wireless Information Systems, </title> <journal> IEEE Personal Communications, 1st Quarter, </journal> <year> 1994. </year>
Reference-contexts: Dissemination-based information systems have been proposed and/or implemented for both wired and wireless networks for a wide range of applications. Some examples include: stock quotation and trading systems [Oki93], advanced traveler information systems (ATIS) [Shek94], wireless classrooms <ref> [Katz94] </ref>, fast database lookup [Herm87, Bowe92], and news delivery in both wireless [Giff90] and wired [Inte96] environments. In previous work, we proposed and analyzed the Broadcast Disks model for disseminating data in a broadcast environment [Zdon94, Acha95b].
Reference: [Knut81] <author> D. Knuth, </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> Vol II, </volume> <publisher> Addison Wesley, </publisher> <year> 1981. </year>
Reference-contexts: The client accesses pages from the range 1 to AccessRange, which can be a subset of the pages that are broadcast. All pages outside of this range have a zero probability of access at the client. Within the range, the access probabilities follow a Zipf <ref> [Knut81] </ref> distribution. The Zipf distribution with a parameter is frequently used to model non-uniform access. It produces access patterns that become increasingly skewed as increases.
Reference: [Kort95] <author> H. Korth, </author> <title> The Double Life of the Transaction Abstraction: Fundamental Principle and Evolving System Concept, </title> <booktitle> Proc. 21th VLDB Conf., </booktitle> <address> Zurich, </address> <month> September, </month> <year> 1995. </year>
Reference-contexts: The notion of data consistency is, of course, application-dependent. In database systems data consistency is traditionally tied to the notion of transaction serializability. In practice, however, few applications demand or even want full se-rializability, and much effort has gone into defining weaker forms of correctness (e.g., <ref> [Bere95, Kort95] </ref>). Because dissemination-based information systems are only now beginning to emerge, the notion of data consistency for applications in such systems is even less well-understood.
Reference: [Levy90] <author> E. Levy, A. Silbershatz, </author> <title> Distributed File Systems: Concepts and Examples, </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4), De-cember, </volume> <year> 1990. </year>
Reference-contexts: Problems related to consistency arise in most other systems where client caching is used, such as multi-processor architectures [Arch86], distributed file systems <ref> [Levy90] </ref>, distributed shared memory [Nitz91], and client-server database systems [Fran96]. In such systems, there are two basic techniques for communicating consistency information: invalidation (also called Write-Invalidate) and propagation (also called Write-Broadcast). For invalidation, the server sends out messages to inform the client of modified pages. <p> Finally, a discussion and comparison of the caching algorithms (and techniques to cope with updates) in client-server systems is available in [Fran96]. For similar surveys in other areas the reader is referred to <ref> [Levy90] </ref> (distributed file systems), [Nitz91] (distributed shared memory) and [Arch86] (multi-processor architectures). 7 Conclusions In this paper, we have examined the way in which updates affect the performance of Broadcast Disks. As in our previous work, the design considerations divide into client-side and server-side issues.
Reference: [Nitz91] <author> B. Nitzberg, V. Lo, </author> <title> Distributed Shared Memory: A Survey of Issues and Algorithms, </title> <journal> IEEE Computer, </journal> <volume> 24(8), </volume> <month> August, </month> <year> 1991. </year>
Reference-contexts: Problems related to consistency arise in most other systems where client caching is used, such as multi-processor architectures [Arch86], distributed file systems [Levy90], distributed shared memory <ref> [Nitz91] </ref>, and client-server database systems [Fran96]. In such systems, there are two basic techniques for communicating consistency information: invalidation (also called Write-Invalidate) and propagation (also called Write-Broadcast). For invalidation, the server sends out messages to inform the client of modified pages. The client removes these pages from its cache. <p> Finally, a discussion and comparison of the caching algorithms (and techniques to cope with updates) in client-server systems is available in [Fran96]. For similar surveys in other areas the reader is referred to [Levy90] (distributed file systems), <ref> [Nitz91] </ref> (distributed shared memory) and [Arch86] (multi-processor architectures). 7 Conclusions In this paper, we have examined the way in which updates affect the performance of Broadcast Disks. As in our previous work, the design considerations divide into client-side and server-side issues.
Reference: [Oki93] <author> B. Oki, M. Pfluegl, A. Siegel, D. Skeen, </author> <title> The Information Bus An Architecture for Extensible Distributed Systems, </title> <booktitle> Proc. 14th SOSP, </booktitle> <address> Ashville, NC, </address> <month> December, </month> <year> 1993. </year>
Reference-contexts: Dissemination-based information systems have been proposed and/or implemented for both wired and wireless networks for a wide range of applications. Some examples include: stock quotation and trading systems <ref> [Oki93] </ref>, advanced traveler information systems (ATIS) [Shek94], wireless classrooms [Katz94], fast database lookup [Herm87, Bowe92], and news delivery in both wireless [Giff90] and wired [Inte96] environments. In previous work, we proposed and analyzed the Broadcast Disks model for disseminating data in a broadcast environment [Zdon94, Acha95b].
Reference: [Shek94] <author> S. Shekhar, D. Liu, </author> <title> Genesis and Advanced Traveler Information Systems (ATIS): Killer Applications for Mobile Computing, </title> <institution> MOBIDATA Wkshp, Rutgers Univ., NJ, </institution> <year> 1994. </year>
Reference-contexts: Dissemination-based information systems have been proposed and/or implemented for both wired and wireless networks for a wide range of applications. Some examples include: stock quotation and trading systems [Oki93], advanced traveler information systems (ATIS) <ref> [Shek94] </ref>, wireless classrooms [Katz94], fast database lookup [Herm87, Bowe92], and news delivery in both wireless [Giff90] and wired [Inte96] environments. In previous work, we proposed and analyzed the Broadcast Disks model for disseminating data in a broadcast environment [Zdon94, Acha95b].
Reference: [Wong88] <author> J. Wong, </author> <title> Broadcast Delivery, </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 76(12), </volume> <month> December, </month> <note> 1988. </note> <author> [Wu96] , K. Wu, P. S. Yu, M. Chen, </author> <title> Energy-Efficient Caching for Wirless Mobile Computing, </title> <booktitle> Proc. of ICDE, </booktitle> <address> New Orleans, </address> <month> Feb. </month> <year> 1996. </year>
Reference-contexts: Repetitive broadcast has been investigated in several previous projects <ref> [Amma85, Wong88, Bowe92, Imie94a] </ref>.
Reference: [Zdon94] <author> S. Zdonik, M. Franklin, R. Alonso, S. Acharya, </author> <title> Are 'Disks in the Air' Just Pie in the Sky?, </title> <booktitle> IEEE Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> December, </month> <year> 1994. </year> <pages> Page 12 </pages>
Reference-contexts: In previous work, we proposed and analyzed the Broadcast Disks model for disseminating data in a broadcast environment <ref> [Zdon94, Acha95b] </ref>. Specifically, Broadcast Disks are intended for environments where the communication channel among clients and servers is asymmetric. In an asymmetric communication environment, there is typically more communication capacity available from servers to clients than in the opposite direction.
References-found: 28

