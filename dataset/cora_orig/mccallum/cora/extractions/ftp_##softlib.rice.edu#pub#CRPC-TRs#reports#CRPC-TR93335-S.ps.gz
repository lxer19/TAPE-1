URL: ftp://softlib.rice.edu/pub/CRPC-TRs/reports/CRPC-TR93335-S.ps.gz
Refering-URL: http://www.crpc.rice.edu/CRPC/softlib/TRs_online.html
Root-URL: 
Title: Compositional Oil Reservoir Simulation in Fortran D: A Feasibility Study on Intel iPSC/860  
Author: Ulrich Kremer Marcelo Rame 
Address: P.O. Box 1892 Houston, TX 77251-1892  
Affiliation: Rice University  
Note: Center for Research on Parallel Computation  To be pulished in the International Journal of Su percomputer Applications (IJSA).  
Date: September, 1993  
Pubnum: CRPC-TR93335  
Abstract-found: 0
Intro-found: 1
Reference: [Bri92] <author> P. Briggs. </author> <title> Register Allocation via Graph Coloring. </title> <type> PhD thesis, </type> <institution> Rice University, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: Node compilers may perform optimizations to exploit the memory hierarchy and instruction-level parallelism available on the target node processor <ref> [Car92, Wol92, Bri92] </ref>.
Reference: [Car92] <author> S. Carr. </author> <title> Memory-Hierarchy Management. </title> <type> PhD thesis, </type> <institution> Rice University, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: Node compilers may perform optimizations to exploit the memory hierarchy and instruction-level parallelism available on the target node processor <ref> [Car92, Wol92, Bri92] </ref>.
Reference: [Cha90] <author> Y. Chang. </author> <title> Development and Application of an Equation of State Compositional Simulator. </title> <type> PhD thesis, </type> <address> UT Austin, </address> <year> 1990. </year>
Reference-contexts: The prototype performs a variety of advanced compile time optimizations. 3 The simulator used in this study is UTCOMP, developed at the Petroleum Engineering Department at the University of Texas, Austin <ref> [Cha90, CLPS91, CPS90] </ref>. The code is a equation-of-state compositional miscible gas flood simulator in three space dimensions. The range of physical processes modeled include tracer floods, hydrocarbon miscible floods and carbon dioxide floods (developed miscibility). The numerical model can handle both horizontal and vertical wells and four distinct phases.
Reference: [CLPS91] <author> Y. Chang, M.T. Lim, G.A. Pope, and K. Sepehrnoori. </author> <title> Carbon dioxide flow patterns under multiphase flow, heterogeneous, field scale conditions. </title> <booktitle> In SPE 66th Annual Technical Conference and Exhibition, </booktitle> <address> Dallas, Texas, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: The prototype performs a variety of advanced compile time optimizations. 3 The simulator used in this study is UTCOMP, developed at the Petroleum Engineering Department at the University of Texas, Austin <ref> [Cha90, CLPS91, CPS90] </ref>. The code is a equation-of-state compositional miscible gas flood simulator in three space dimensions. The range of physical processes modeled include tracer floods, hydrocarbon miscible floods and carbon dioxide floods (developed miscibility). The numerical model can handle both horizontal and vertical wells and four distinct phases.
Reference: [CMZ92] <author> B. Chapman, P. Mehrotra, and H. Zima. </author> <title> Vienna Fortran a Fortran language extension for distributed memory multiprocessors. </title> <editor> In J. Saltz and P. Mehrotra, editors, </editor> <title> Languages, Compilers, and Run-Time Environments for Distributed Memory Machines. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1992. </year>
Reference-contexts: As a result, it should be easy to use by computational scientists. In addition, we believe that the two-phase strategy for specifying data decomposition is natural and conducive to writing modular and portable code. Fortran D bears similarities to HPF [Hig93], CM Fortran [TMC89], Kali [KM91], and Vienna Fortran <ref> [CMZ92] </ref>. The complete language is described in detail elsewhere [FHK + 90]. 2.2 The Compilation System A Fortran D compilation system translates a Fortran D program into a Fortran 77 SPMD (single program multiple data) node program that contains calls to library primitives for interprocessor communication.
Reference: [CPS90] <author> Y. Chang, G.A. Pope, and K. Sepehrnoori. </author> <title> A higher-order finite-difference compositional simulator. </title> <journal> J. Pet. Sci. Eng., </journal> <volume> 5(35), </volume> <year> 1990. </year>
Reference-contexts: The prototype performs a variety of advanced compile time optimizations. 3 The simulator used in this study is UTCOMP, developed at the Petroleum Engineering Department at the University of Texas, Austin <ref> [Cha90, CLPS91, CPS90] </ref>. The code is a equation-of-state compositional miscible gas flood simulator in three space dimensions. The range of physical processes modeled include tracer floods, hydrocarbon miscible floods and carbon dioxide floods (developed miscibility). The numerical model can handle both horizontal and vertical wells and four distinct phases.
Reference: [FHK + 90] <author> G. Fox, S. Hiranandani, K. Kennedy, C. Koelbel, U. Kremer, C. Tseng, and M. Wu. </author> <title> Fortran D language specification. </title> <type> Technical Report TR90-141, </type> <institution> Dept. of Computer Science, Rice University, </institution> <month> December </month> <year> 1990. </year>
Reference-contexts: In addition, we believe that the two-phase strategy for specifying data decomposition is natural and conducive to writing modular and portable code. Fortran D bears similarities to HPF [Hig93], CM Fortran [TMC89], Kali [KM91], and Vienna Fortran [CMZ92]. The complete language is described in detail elsewhere <ref> [FHK + 90] </ref>. 2.2 The Compilation System A Fortran D compilation system translates a Fortran D program into a Fortran 77 SPMD (single program multiple data) node program that contains calls to library primitives for interprocessor communication.
Reference: [HHKT91] <author> M. W. Hall, S. Hiranandani, K. Kennedy, and C. Tseng. </author> <title> Interprocedural compilation of Fortran D for MIMD distributed-memory machines. </title> <type> Technical Report TR91-169, </type> <institution> Dept. of Computer Science, Rice University, </institution> <month> November </month> <year> 1991. </year>
Reference-contexts: Procedure cloning or inlining may be applied under certain conditions to improve context for optimization. A Fortran D compiler may relax the owner computes rule for reductions and parallel prefix operations, and for scalars or arrays that are recognized to be temporaries <ref> [HKT91, HKT92, HHKT91, Tse93] </ref>. Node compilers may perform optimizations to exploit the memory hierarchy and instruction-level parallelism available on the target node processor [Car92, Wol92, Bri92].
Reference: [Hig93] <author> High Performance Fortran Forum. </author> <title> High Performance Fortran language specification, version 1.0. </title> <type> Technical Report CRPC-TR92225, </type> <institution> Center for Research on Parallel Computation, Rice University, Houston, TX, </institution> <month> May </month> <year> 1993. </year> <note> To appear in Scientific Programming, vol. 2, no. 1. </note>
Reference-contexts: As a result, it should be easy to use by computational scientists. In addition, we believe that the two-phase strategy for specifying data decomposition is natural and conducive to writing modular and portable code. Fortran D bears similarities to HPF <ref> [Hig93] </ref>, CM Fortran [TMC89], Kali [KM91], and Vienna Fortran [CMZ92].
Reference: [HJ89] <author> R.W. Hockney and C.R. Jesshope. </author> <title> Parallel Computers 2, </title> <booktitle> chapter 1, </booktitle> <pages> pages 111-116. </pages> <address> Adam Hilger, Bristol-Philadelphia, </address> <year> 1989. </year>
Reference-contexts: Expressing the speed-up, S, as the ratio of the serial elapsed time to the elapsed time in parallel, and the communication overhead as the ratio of the communication time to the total time <ref> [HJ89] </ref>, respectively, i.e., S = t t t m ; one can extract the communication overhead from knowing only the speed-up and the number of CPU's, i.e., S : In the procedure analyzed here, the incidence of serial computations is negligible, and, therefore, the estimated and measured communication overhead figures agree
Reference: [HKT91] <author> S. Hiranandani, K. Kennedy, and C. Tseng. </author> <title> Compiler optimizations for Fortran D on MIMD distributed-memory machines. </title> <booktitle> In Proceedings of Supercomputing '91, </booktitle> <address> Albu-querque, NM, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: Procedure cloning or inlining may be applied under certain conditions to improve context for optimization. A Fortran D compiler may relax the owner computes rule for reductions and parallel prefix operations, and for scalars or arrays that are recognized to be temporaries <ref> [HKT91, HKT92, HHKT91, Tse93] </ref>. Node compilers may perform optimizations to exploit the memory hierarchy and instruction-level parallelism available on the target node processor [Car92, Wol92, Bri92].
Reference: [HKT92] <author> S. Hiranandani, K. Kennedy, and C. Tseng. </author> <title> Evaluation of compiler optimizations for Fortran D on MIMD distributed-memory machines. </title> <booktitle> In Proceedings of the 1992 ACM International Conference on Supercomputing, </booktitle> <address> Washington, DC, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: Procedure cloning or inlining may be applied under certain conditions to improve context for optimization. A Fortran D compiler may relax the owner computes rule for reductions and parallel prefix operations, and for scalars or arrays that are recognized to be temporaries <ref> [HKT91, HKT92, HHKT91, Tse93] </ref>. Node compilers may perform optimizations to exploit the memory hierarchy and instruction-level parallelism available on the target node processor [Car92, Wol92, Bri92].
Reference: [KM91] <author> C. Koelbel and P. Mehrotra. </author> <title> Compiling global name-space parallel loops for distributed execution. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 2(4) </volume> <pages> 440-451, </pages> <month> Oc-tober </month> <year> 1991. </year>
Reference-contexts: As a result, it should be easy to use by computational scientists. In addition, we believe that the two-phase strategy for specifying data decomposition is natural and conducive to writing modular and portable code. Fortran D bears similarities to HPF [Hig93], CM Fortran [TMC89], Kali <ref> [KM91] </ref>, and Vienna Fortran [CMZ92]. The complete language is described in detail elsewhere [FHK + 90]. 2.2 The Compilation System A Fortran D compilation system translates a Fortran D program into a Fortran 77 SPMD (single program multiple data) node program that contains calls to library primitives for interprocessor communication.
Reference: [LK93] <author> L. Liebrock and K. Kennedy. </author> <title> Parallelization of linearized applications in Fortran D. </title> <type> Technical Report CRPC-TR93-342-S, </type> <institution> Center for Research on Parallel Computation, 16 Rice University, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: To address some aspects of the latter problem, Liebrock and Kennedy have investigated compiler directives that will allow 14 the compiler to perform delinearization of linearized arrays in `long vector style' codes with-out actually modifying the source code. Preliminary results of their research can be found in <ref> [LK93] </ref>. Another option that might be worthwile to explore is to use compilation techniques for irregular problems in the context of `long vector style' programs with array indirection.
Reference: [TMC89] <institution> Thinking Machines Corporation, </institution> <address> Cambridge, MA. </address> <note> CM Fortran Reference Manual, version 5.2-0.6 edition, </note> <month> September </month> <year> 1989. </year>
Reference-contexts: As a result, it should be easy to use by computational scientists. In addition, we believe that the two-phase strategy for specifying data decomposition is natural and conducive to writing modular and portable code. Fortran D bears similarities to HPF [Hig93], CM Fortran <ref> [TMC89] </ref>, Kali [KM91], and Vienna Fortran [CMZ92].
Reference: [Tse93] <author> C. Tseng. </author> <title> An Optimizing Fortran D Compiler for MIMD Distributed-Memory Machines. </title> <type> PhD thesis, </type> <institution> Rice University, Houston, TX, </institution> <month> January </month> <year> 1993. </year> <institution> Rice COMP TR93-199. </institution>
Reference-contexts: The feasibility study presented in this paper is based on the current prototype implementation of the Fortran D compiler <ref> [Tse93] </ref>. The prototype performs a variety of advanced compile time optimizations. 3 The simulator used in this study is UTCOMP, developed at the Petroleum Engineering Department at the University of Texas, Austin [Cha90, CLPS91, CPS90]. The code is a equation-of-state compositional miscible gas flood simulator in three space dimensions. <p> Procedure cloning or inlining may be applied under certain conditions to improve context for optimization. A Fortran D compiler may relax the owner computes rule for reductions and parallel prefix operations, and for scalars or arrays that are recognized to be temporaries <ref> [HKT91, HKT92, HHKT91, Tse93] </ref>. Node compilers may perform optimizations to exploit the memory hierarchy and instruction-level parallelism available on the target node processor [Car92, Wol92, Bri92]. <p> Node compilers may perform optimizations to exploit the memory hierarchy and instruction-level parallelism available on the target node processor [Car92, Wol92, Bri92]. At present, the principal target of the prototype Fortran D compilation system <ref> [Tse93] </ref> is the Intel iPSC/860. 3 The Test Subroutine For the purpose of this feasibility study, one routine of the reservoir simulator UTCOMP was chosen (procedure DISPER), which displays some of the most typical features of the computations in the whole code. <p> The data layout specifications for the data-parallel programming style version of DISPER are shown in Figure 4. The specifications are inserted after the array declarations. We compiled the resulting Fortran D program using the current Fortran D prototype compiler <ref> [Tse93] </ref>. The prototype requires the specification of the number of processors available on the distributed-memory target machine. The message-passing code generated for eight processors and problem size (8x256x8) is shown in Figure 5 and Figure 6. The compiler was able to perform several communication optimizations.
Reference: [vH93] <author> R. von Hanxleden. </author> <title> Handling irregular problems with Fortran D | a preliminary report. </title> <booktitle> In Proceedings of the Fourth Workshop on Compilers for Parallel Computers, </booktitle> <address> Delft, The Netherlands, </address> <month> December </month> <year> 1993. </year> <note> Also available as technical report CRPC-TR93-339-S, </note> <institution> Rice University. </institution>
Reference-contexts: Another option that might be worthwile to explore is to use compilation techniques for irregular problems in the context of `long vector style' programs with array indirection. Von Hanxleden discusses such state-of-the-art compilation techniques for irregular problems for the Fortran D language <ref> [vH93] </ref>. 4 Summary Our feasibility study shows that data-parallel languages such as Fortran D can express the parallelism available in computations considered typical for oil reservoir simulations.

References-found: 17

