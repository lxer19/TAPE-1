URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1996/tr-96-043.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1996.html
Root-URL: http://www.icsi.berkeley.edu
Email: fgaede,guentherg@wiwi.hu-berlin.de  
Title: Multidimensional Access Methods  
Author: Volker Gaede and Oliver Gunther 
Keyword: multidimensional access methods, data structures, spatial databases  
Note: This work was partially supported by the Sonderforschungsbereich 373 and by the ESPRIT Working Group CONTESSA (8666).  
Address: Spandauer Str. 1 10178 Berlin, Germany  
Affiliation: Institut fur Wirtschaftsinformatik Humboldt-Universitat zu Berlin  
Abstract: Search operations in databases require some special support at the physical level. This is true for conventional databases as well as for spatial databases, where typical search operations include the point query (find all objects that contain a given search point) and the region query (find all objects that overlap a given search region). More than ten years of spatial database research have resulted in a great variety of multidimensional access methods to support such operations. This paper gives an overview of that work. After a brief survey of spatial data management in general, we first present the class of point access methods, which are used to search sets of points in two or more dimensions. The second part of the paper is devoted to spatial access methods, which are able to manage extended objects (such as rectangles or polyhedra). We conclude with a discussion of theoretical and experimental results concerning the relative performance of the various approaches. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Abel, D. J. and D. M. </author> <title> Mark (1990). A comparative analysis of some two-dimensional orderings. </title> <booktitle> Int. J. Geographical Information Systems 4 (1), </booktitle> <pages> 21-31. </pages>
Reference: <author> Abel, D. J. and J. L. </author> <title> Smith (1983). A data structure and algorithm based on a linear key for a rectangle retrieval problem. </title> <booktitle> Computer Vision 24, </booktitle> <pages> 1-13. </pages>
Reference-contexts: That is, the way we label the cells determines how clustered adjacent cells are stored on secondary memory. enumeration of the cells (Samet 1989). Figure 25b shows the cell enumeration imposed by the Peano curve (Morton 1966), also called quad codes (Finkel and Bentley 1974), locational codes <ref> (Abel and Smith 1983) </ref>, or z-ordering (Orenstein and Merrett 1984). by interleaving the Gray codes of the x- and y-coordinates in a bitwise manner.
Reference: <author> Aref, W. G. and H. </author> <title> Samet (1994). The spatial filter revisited. </title> <booktitle> In Proc. 6th Int. Symp. on Spatial Data Handling, </booktitle> <pages> pp. 190-208. </pages>
Reference: <author> Bayer, R. and E. M. </author> <title> McCreight (1972). Organization and maintenance of large ordered indices. </title> <journal> Acta Informatica 1 (3), </journal> <pages> 173-189. </pages>
Reference-contexts: Examples for such one-dimensional access methods (also called single key structures, although that term is somewhat misleading) include the B-Tree <ref> (Bayer and McCreight 1972) </ref> and extendible hashing (Fagin et al. 1979); see Section 3.1 for a brief discussion. A natural approach to handle multidimensional search queries consists in the consecutive application of such single key structures, one per dimension. Unfortunately, this approach can be very inefficient (Kriegel 1984). <p> Once this limit is reached while inserting new items, bounded index extendible hashing starts doubling the data bucket size rather than the index size. 3.1.3 The B-Tree <ref> (Bayer and McCreight 1972) </ref> Other than hashing schemes, the B-tree and its variants (Comer 1979) organize the data in a hierarchical manner. B-trees are balanced trees that correspond to a nesting of intervals. Each node corresponds to a disk page D (-) and an interval I ().
Reference: <author> Becker, B., P. Franciosa, S. Gschwind, T. Ohler, F. Thiem, and P. </author> <title> Widmayer (1992). Enclosing many boxes by an optimal pair of boxes. </title> <editor> In A. Finkel and M. Jantzen (Eds.), </editor> <booktitle> Proc. STACS'92 , Number 525 in LNCS, </booktitle> <address> Berlin/Heidelberg/New York, </address> <pages> pp. 475-486. </pages> <publisher> Springer-Verlag. </publisher>
Reference-contexts: For a theoretical analysis of the grid file and some of its variants see (Regnier 1985) or <ref> (Becker 1992) </ref>. Regnier shows in particular that the average space occupancy of the data buckets is about 69 % (ln 2) for uniformly distributed data. 4.1.2 EXCELL (Tamminen 1982) Closely related to the grid file is the EXCELL method (EXtendible CELL) proposed by Tamminen (1982).
Reference: <author> Becker, L. </author> <year> (1992). </year> <title> A New Algorithm and a Cost Model for Join Processing with the Grid File. </title> <editor> Ph. D. </editor> <booktitle> thesis, </booktitle> <address> Universitat-Gesamthochschule Siegen, Germany. </address>
Reference-contexts: For a theoretical analysis of the grid file and some of its variants see (Regnier 1985) or <ref> (Becker 1992) </ref>. Regnier shows in particular that the average space occupancy of the data buckets is about 69 % (ln 2) for uniformly distributed data. 4.1.2 EXCELL (Tamminen 1982) Closely related to the grid file is the EXCELL method (EXtendible CELL) proposed by Tamminen (1982).
Reference: <author> Beckmann, N., H.-P. Kriegel, R. Schneider, and B. </author> <title> Seeger (1990). The R fl -tree: An efficient and robust access method for points and rectangles. </title> <booktitle> In Proc. ACM SIG-MOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 322-331. </pages>
Reference-contexts: base type grid cell interval (box) sphere polyhedron transfor mation zkdB + -tree (Oren-stein 1986), BANG file (Free-ston 1987), hB-tree (Lomet and Salzberg 1989) all PAMs described in Section 4 except of the BANG file and the hB-tree P-tree (Ja-gadish 1990c) overlapping regions R-tree (Guttman 1984), R fl - tree <ref> (Beckmann et al. 1990) </ref>, skd-tree (Ooi et al. 1987), GBD-tree (Ohsawa and Sakauchi 1990), Hilbert R-tree (Kamel and Faloutsos 1994), buddy tree with overlapping (Seeger 1991) sphere tree (Oosterom 1990) P-tree (Schi-wietz 1993), KD2B-tree (Oosterom 1990) clipping EXCELL (Tamminen 1982), extended k-d-tree (Mat-suyama et al. 1984), R + -tree (Sellis et <p> Ng and Kameda (1993, 1994) discuss how to support concurrency and recovery in R-trees. 5.3.2 The R fl -Tree <ref> (Beckmann, Kriegel, Schneider, and Seeger 1990) </ref> Based on a careful study of the R-tree behavior under different data distributions, Beckmann et al. (1990) identified several weaknesses of the original algorithms. In particular, they confirmed the observation of Roussopoulos and Leifker (1985) that the insertion phase is critical for search performance. <p> Besides measurements on the number of page faults, CPU time measurements are also given. Gunther and Gaede (1996) compare the original cell tree as presented in (Gunther 1989) with the cell tree with oversize shelves (Gunther and Noltemeier 1991), the R fl - tree <ref> (Beckmann et al. 1990) </ref> and the hB-tree (Lomet and Salzberg 1989) for some real cartographic data. There is a slight performance advantage of the cell tree with oversize shelves compared to the R fl -tree and the hB-tree, but a major difference to the original cell tree. <p> alphabetical order): * buddy (hash) tree (Seeger and Kriegel 1990) * cell tree with oversize shelves (Gunther and Gaede 1996) * Hilbert R-tree (Kamel and Faloutsos 1994) * KD2B-tree (Oosterom 1990) * PMR-quadtree (Nelson and Samet 1987) * R + -tree (Sellis, Roussopoulos, and Faloutsos 1987) * R fl -tree <ref> (Beckmann, Kriegel, Schneider, and Seeger 1990) </ref> It cannot be emphasized enough, however, that any such "hit list" needs to be used with great care. Clever programming can often make up for inherent deficiencies of an access method. <p> Among other things, their model reveals the importance of the perimeter as a criterion for node splitting, which has been intuitively anticipated by the inventors of the R fl -tree <ref> (Beckmann, Kriegel, Schneider, and Seeger 1990) </ref>. The central formula of Pagel et al. (1993) to compute the number of disk accesses in an R-tree has been found independently by Kamel and Faloutsos (1993). Faloutsos and Kamel (1994) later refined this formula by using properties of the data set.
Reference: <author> Belussi, A. and C. </author> <title> Faloutsos (1995). Estimating the selectivity of spatial queries using the `correlation' fractal dimension. </title> <booktitle> In Proc. 21st Int. Conf. on Very Large Data Bases, </booktitle> <pages> pp. 299-310. </pages>
Reference: <author> Bentley, J. L. </author> <year> (1975). </year> <title> Multidimensional binary search trees used for associative searching. </title> <booktitle> Communications of the ACM 18 (9), </booktitle> <pages> 509-517. </pages>
Reference: <author> Bentley, J. L. </author> <year> (1979). </year> <title> Multidimensional binary search in database applications. </title> <journal> IEEE Trans. Software Eng. </journal> <volume> 4 (5), </volume> <pages> 333-340. </pages>
Reference-contexts: One disadvantage of the k-d-tree is that the structure is sensitive to the order in which the points are inserted. Another one is that data points are scattered all over the tree. The adaptive k-d-tree <ref> (Bentley and Friedman 1979) </ref> mitigates these problems by choosing a split such that one finds about the same number of elements on both sides. <p> For SAMs this is not necessarily true; as we will see in Section 5, overlapping regions and partial coverage are important techniques to improve the search performance of SAMs. 4.2.1 The K-D-B-Tree (Robinson 1981) The k-d-B-tree combines the properties of the adaptive k-d-tree <ref> (Bentley and Friedman 1979) </ref> and the B-tree (Comer 1979) to handle multidimensional points. It partitions the universe in the manner of an adaptive k-d-tree and associates the resulting subspaces with tree nodes. Each interior node corresponds to an interval-shaped region.
Reference: <author> Bentley, J. L. and J. H. </author> <title> Friedman (1979). Data structures for range searching. </title> <booktitle> ACM Computing Surveys 11 (4), </booktitle> <pages> 397-409. </pages>
Reference-contexts: One disadvantage of the k-d-tree is that the structure is sensitive to the order in which the points are inserted. Another one is that data points are scattered all over the tree. The adaptive k-d-tree <ref> (Bentley and Friedman 1979) </ref> mitigates these problems by choosing a split such that one finds about the same number of elements on both sides. <p> For SAMs this is not necessarily true; as we will see in Section 5, overlapping regions and partial coverage are important techniques to improve the search performance of SAMs. 4.2.1 The K-D-B-Tree (Robinson 1981) The k-d-B-tree combines the properties of the adaptive k-d-tree <ref> (Bentley and Friedman 1979) </ref> and the B-tree (Comer 1979) to handle multidimensional points. It partitions the universe in the manner of an adaptive k-d-tree and associates the resulting subspaces with tree nodes. Each interior node corresponds to an interval-shaped region.
Reference: <author> Berchtold, S., D. Keim, and H.-P. </author> <title> Kriegel (1996). The X-tree: An index structure for high-dimensional data. </title> <booktitle> In Proc. 22nd Int. Conf. on Very Large Data Bases. </booktitle>
Reference: <author> Blanken, H., A. Ijbema, P. Meek, and B. van den Akker (1990). </author> <title> The generalized grid file: Description and performance aspects. </title> <booktitle> In Proc. 6th IEEE Int. Conf. on Data Eng., </booktitle> <pages> pp. 380-388. </pages>
Reference: <author> Brinkhoff, T. </author> <year> (1994). </year> <title> Der Spatial Join in Geo-Datenbanksystemen. </title> <type> Ph. D. thesis, </type> <institution> Ludwig-Maximilians-Universitat Munchen, Germany. </institution> <note> In German. 74 Brinkhoff, </note> <author> T. and H.-P. </author> <title> Kriegel (1994). The impact of global clustering on spatial database systems. </title> <booktitle> In Proc. 20th Int. Conf. on Very Large Data Bases, </booktitle> <pages> pp. 168-179. </pages>
Reference: <author> Brinkhoff, T., H.-P. Kriegel, and R. </author> <title> Schneider (1993). Comparison of approximations of complex objects used for approximation-based query processing in spatial database systems. </title> <booktitle> In Proc. 9th IEEE Int. Conf. on Data Eng., </booktitle> <pages> pp. 40-49. </pages>
Reference: <author> Brinkhoff, T., H.-P. Kriegel, R. Schneider, and B. </author> <title> Seeger (1994). Multi-step processing of spatial joins. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 197-208. </pages>
Reference: <author> Brinkhoff, T., H.-P. Kriegel, and B. </author> <title> Seeger (1993). Efficient processing of spatial joins using R-trees. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 237-246. </pages>
Reference: <author> Burkhard, W. </author> <year> (1984). </year> <title> Index maintenance for non-uniform record distributions. </title> <booktitle> In Proc. 3rd ACM SIGACT-SIGMOD Symp. on Principles of Database Systems, </booktitle> <pages> pp. 173-180. </pages>
Reference-contexts: According to their experimental results, MOLHPE outperforms its competitors for uniformly distributed data. It fails, however, for non-uniform distributions, mostly because the hashing function does not adapt gracefully to the given distribution. To solve this problem, the same authors later applied a stochastic technique <ref> (Burkhard 1984) </ref> to determine the split points. Because of the name of that technique (ff-quantiles), the access method was called quantile hashing (Kriegel and Seeger 1987; Kriegel and Seeger 1989).
Reference: <author> Burkhard, W. A. </author> <year> (1983). </year> <note> Interpolation-based index maintainance. BIT 23, 274-294. </note>
Reference-contexts: The goal of all 22 property point access method intervals complete disjoint fi fi fi quadtree (Finkel and Bentley 1974; Samet 1984), k-d-B tree (Robinson 1981), EX-CELL (Tamminen 1982), interpolation hashing <ref> (Burkhard 1983) </ref>, multidimensional extendible hashing (Otoo 1984), grid file (Niev-ergelt, Hinterberger, and Sevcik 1984), balanced multidimensional two-level grid file (Hin-richs 1985), interpolation-based grid file (Ouk-sel 1985), extendible hash tree (Otoo 1986), MOLHPE (Kriegel and Seeger 1986), PLOP-hashing (Kriegel and Seeger 1988), quantile hashing (Kriegel and Seeger 1989), LSD-tree (Henrich, Six, and
Reference: <author> Chen, L., R. Drach, M. Keating, S. Louis, D. Rotem, and A. </author> <title> Shoshani (1995). Access to multidimensional datasets on tertiary storage systems. </title> <booktitle> Information Systems 20 (2), </booktitle> <pages> 155-183. </pages>
Reference-contexts: Third, spatial databases tend to be large. Geographic maps, for example, typically occupy several gigabytes of storage. The integration of secondary and tertiary memory is therefore essential for efficient processing <ref> (Chen et al. 1995) </ref>. Fourth, there is no standard algebra defined on spatial data, although several proposals have been made in the past (Scholl and Voisard 1989; Guting 1989; Guting and Schneider 1993). This means in particular that there is no standardized set of base operators.
Reference: <author> Comer, D. </author> <year> (1979). </year> <title> The ubiquitous B-tree. </title> <booktitle> ACM Computing Surveys 11 (2), </booktitle> <pages> 121-138. </pages>
Reference-contexts: Once this limit is reached while inserting new items, bounded index extendible hashing starts doubling the data bucket size rather than the index size. 3.1.3 The B-Tree (Bayer and McCreight 1972) Other than hashing schemes, the B-tree and its variants <ref> (Comer 1979) </ref> organize the data in a hierarchical manner. B-trees are balanced trees that correspond to a nesting of intervals. Each node corresponds to a disk page D (-) and an interval I (). <p> For SAMs this is not necessarily true; as we will see in Section 5, overlapping regions and partial coverage are important techniques to improve the search performance of SAMs. 4.2.1 The K-D-B-Tree (Robinson 1981) The k-d-B-tree combines the properties of the adaptive k-d-tree (Bentley and Friedman 1979) and the B-tree <ref> (Comer 1979) </ref> to handle multidimensional points. It partitions the universe in the manner of an adaptive k-d-tree and associates the resulting subspaces with tree nodes. Each interior node corresponds to an interval-shaped region.
Reference: <author> Dandamudi, S. P. and P. G. </author> <title> Sorenson (1991). Improved partial-match search algorithms for BD-trees. </title> <journal> The Computer Journal 34 (5), </journal> <pages> 415-422. </pages>
Reference: <author> Egenhofer, M. </author> <year> (1994). </year> <title> Spatial SQL: A query and presentation language. </title> <journal> IEEE Trans. Knowledge and Data Eng. </journal> <volume> 6 (1). </volume>
Reference: <author> Evangelidis, G. </author> <year> (1994). </year> <title> The hB -Tree: A Concurrent and Recoverable Multi-Attribute Index Structure. </title> <type> Ph. D. thesis, </type> <institution> Northeastern University, </institution> <address> Boston, MA. </address>
Reference-contexts: In summary, the leaf nodes of the internal k-d-trees are used to * reference a collection of data records; * reference other hB-tree nodes; * indicate that a part of this tree has been extracted. 37 In a recent Ph.D. thesis <ref> (Evangelidis 1994) </ref>, the hB-tree has been extended to allow for concurrency and recovery by modifying the hB-tree in such a way that it becomes a special case of the -tree (Lomet and Salzberg 1992). Consequently, the new structure is called hB tree (Evangelidis, Lomet, and Salzberg 1995).
Reference: <author> Evangelidis, G., D. Lomet, and B. </author> <title> Salzberg (1995). The hB -tree: A modified hB-tree supporting concurrency, recovery and node consolidation. </title> <booktitle> In Proc. 21st Int. Conf. on Very Large Data Bases, </booktitle> <pages> pp. 551-561. </pages>
Reference-contexts: Consequently, the new structure is called hB tree <ref> (Evangelidis, Lomet, and Salzberg 1995) </ref>. As a result of these modifications, the new structure can immediately take advantage of the -tree node consolidation algorithm. The lack of such an algorithm has been one of the major weaknesses of the hB-tree. <p> While the number of nodes may in principle expose a growth behavior that is superlinear in the number of regions, this observation seems of mainly theoretical interest. According to the authors of the hB -tree <ref> (Evangelidis, Lomet, and Salzberg 1995) </ref>, it is quite rare that more than one leaf of the underlying k-d tree refers to any given child.
Reference: <author> Fagin, R., J. Nievergelt, N. Pippenger, and R. </author> <title> Strong (1979). Extendible hashing: A fast access method for dynamic files. </title> <journal> ACM Trans. Database Systems 4 (3), </journal> <pages> 315-344. </pages>
Reference-contexts: Examples for such one-dimensional access methods (also called single key structures, although that term is somewhat misleading) include the B-Tree (Bayer and McCreight 1972) and extendible hashing <ref> (Fagin et al. 1979) </ref>; see Section 3.1 for a brief discussion. A natural approach to handle multidimensional search queries consists in the consecutive application of such single key structures, one per dimension. Unfortunately, this approach can be very inefficient (Kriegel 1984). <p> Although the survey on hashing functions by Knott (1975) is somewhat dated, it represents a good coverage of the different approaches. In practice, the most common one-dimensional structures include linear hashing (Litwin 1980; Larson 1980), extendible hashing <ref> (Fagin et al. 1979) </ref>, and the B-tree (Bayer and McCreight 1972; Comer 1979). Hierarchical access methods such as the B-tree are scalable and behave well in the case of skewed input; they are nearly independent of the distribution of the input data. <p> When t = B, the file has doubled and all intervals 14 have the same length (B A)=2 k+1 . In this case we reset the pointer t to A and resume the split procedure for the smaller intervals. 3.1.2 Extendible Hashing <ref> (Fagin et al. 1979) </ref> As linear hashing, extendible hashing organizes the data in binary intervals, here called cells. Overflow pages are avoided in extendible hashing by using a central directory. Each cell has an index entry in that directory; it initially corresponds to one bucket.
Reference: <author> Faloutsos, C. </author> <year> (1986). </year> <title> Multiattribute hashing using Gray-codes. </title> <booktitle> In Proc. ACM SIG-MOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 227-238. </pages> <address> 75 Faloutsos, C. </address> <year> (1988). </year> <title> Gray-codes for partial match and range queries. </title> <journal> IEEE Trans. Software Eng. </journal> <volume> 14, </volume> <pages> 1381-1393. </pages>
Reference: <author> Faloutsos, C. and V. </author> <title> Gaede (1996). Analysis of n-dimensional quadtrees using the Hausdorff fractal dimension. </title> <booktitle> In Proc. 22nd Int. Conf. on Very Large Data Bases. </booktitle>
Reference: <author> Faloutsos, C. and I. </author> <title> Kamel (1994). Beyond uniformity and independence: Analysis of R-trees using the concept of fractal dimension. </title> <booktitle> In Proc. 13th ACM SIGACT-SIGMOD-SIGART Symp. on Principles of Database Systems, </booktitle> <pages> pp. 4-13. </pages>
Reference-contexts: file (Free-ston 1987), hB-tree (Lomet and Salzberg 1989) all PAMs described in Section 4 except of the BANG file and the hB-tree P-tree (Ja-gadish 1990c) overlapping regions R-tree (Guttman 1984), R fl - tree (Beckmann et al. 1990), skd-tree (Ooi et al. 1987), GBD-tree (Ohsawa and Sakauchi 1990), Hilbert R-tree <ref> (Kamel and Faloutsos 1994) </ref>, buddy tree with overlapping (Seeger 1991) sphere tree (Oosterom 1990) P-tree (Schi-wietz 1993), KD2B-tree (Oosterom 1990) clipping EXCELL (Tamminen 1982), extended k-d-tree (Mat-suyama et al. 1984), R + -tree (Sellis et al. 1987), buddy tree with clipping (Seeger 1991) cell tree (Gunther 1988) multiple layers multi-layer grid <p> of Abel and Mark (1990) In trying to summarize all those experimental comparisons, the following multidimensional access methods seem to be among the best performing ones (in alphabetical order): * buddy (hash) tree (Seeger and Kriegel 1990) * cell tree with oversize shelves (Gunther and Gaede 1996) * Hilbert R-tree <ref> (Kamel and Faloutsos 1994) </ref> * KD2B-tree (Oosterom 1990) * PMR-quadtree (Nelson and Samet 1987) * R + -tree (Sellis, Roussopoulos, and Faloutsos 1987) * R fl -tree (Beckmann, Kriegel, Schneider, and Seeger 1990) It cannot be emphasized enough, however, that any such "hit list" needs to be used with great care.
Reference: <author> Faloutsos, C. and Y. </author> <title> Rong (1991). DOT: A spatial access method using fractals. </title> <booktitle> In Proc. 7th IEEE Int. Conf. on Data Eng., </booktitle> <pages> pp. 152-159. </pages>
Reference: <author> Faloutsos, C. and S. </author> <month> Roseman </month> <year> (1989). </year> <title> Fractals for secondary key retrieval. </title> <booktitle> In Proc. 8th ACM SIGACT-SIGMOD Symp. on Principles of Database Systems, </booktitle> <pages> pp. 247-252. </pages>
Reference: <author> Faloutsos, C., T. Sellis, and N. </author> <title> Roussopoulos (1987). Analysis of object oriented spatial access methods. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 426-439. </pages>
Reference-contexts: Second, depending on the chosen mapping, the distribution of points in dual space may be highly non-uniform even though the original data is uniformly distributed. With the endpoint transformation, for example, there are no image points below the main diagonal <ref> (Faloutsos et al. 1987) </ref>. Third, the images of two objects that are close in original space may be arbitrarily far apart from each other in dual space. <p> seem to be among the best performing ones (in alphabetical order): * buddy (hash) tree (Seeger and Kriegel 1990) * cell tree with oversize shelves (Gunther and Gaede 1996) * Hilbert R-tree (Kamel and Faloutsos 1994) * KD2B-tree (Oosterom 1990) * PMR-quadtree (Nelson and Samet 1987) * R + -tree <ref> (Sellis, Roussopoulos, and Faloutsos 1987) </ref> * R fl -tree (Beckmann, Kriegel, Schneider, and Seeger 1990) It cannot be emphasized enough, however, that any such "hit list" needs to be used with great care. Clever programming can often make up for inherent deficiencies of an access method.
Reference: <author> Finkel, R. and J. L. </author> <title> Bentley (1974). Quad trees: A data structure for retrieval of composite keys. </title> <journal> Acta Informatica 4 (1), </journal> <pages> 1-9. </pages>
Reference-contexts: That is, the way we label the cells determines how clustered adjacent cells are stored on secondary memory. enumeration of the cells (Samet 1989). Figure 25b shows the cell enumeration imposed by the Peano curve (Morton 1966), also called quad codes <ref> (Finkel and Bentley 1974) </ref>, locational codes (Abel and Smith 1983), or z-ordering (Orenstein and Merrett 1984). by interleaving the Gray codes of the x- and y-coordinates in a bitwise manner.
Reference: <author> Frank, A. and R. </author> <month> Barrera </month> <year> (1989). </year> <title> The fieldtree: A data structure for geographic information systems. </title> <editor> In A. Buchmann, O. Gunther, T. R. Smith, and Y.-F. Wang (Eds.), </editor> <title> Design and Implementation of Large Spatial Database Systems, </title> <booktitle> Number 409 in LNCS, </booktitle> <address> Berlin/Heidelberg/New York, </address> <pages> pp. 29-44. </pages> <publisher> Springer-Verlag. </publisher>
Reference: <author> Freeston, M. </author> <year> (1987). </year> <title> The BANG file: A new kind of grid file. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 260-269. </pages>
Reference-contexts: (Kriegel and Seeger 1989), LSD-tree (Henrich, Six, and Widmayer 1989) fi fi twin grid file (Hutflesz, Six, and Widmayer 1988b) fi fi multilevel grid file (Whang and Krishnamurthy 1985), buddy tree (Seeger and Kriegel 1990) fi fi BSP-tree (Fuchs, Kedem, and Naylor 1980), BD-tree (Ohsawa and Sakauchi 1983), BANG file <ref> (Freeston 1987) </ref>, hB-tree (Lomet and Salzberg 1989) Table 1: Classification of PAMs according to Seeger and Kriegel (1990) these heuristics is that objects that are located close to each other in original space should be stored close together on the disk with high probability. <p> Seeger (1991) later showed that the buddy tree can be easily modified to handle spatially extended objects by using one of the techniques presented in Section 5.1. 4.2.4 The BANG File <ref> (Freeston 1987) </ref> To obtain a better adaption to the given data points, Freeston (1987) proposed a structure called the BANG (Balanced And Nested Grid) file, even though it differs from the grid file in many aspects. Similar to the grid file, it partitions the universe into intervals (boxes). <p> However, the BV-tree manages to achieve the 33% lower bound suggested by Lomet and Salzberg (1989). To achieve a guaranteed worst-case search performance, the BV-tree combines the excision concept <ref> (Freeston 1987) </ref> with a technique called promotion. Here, intervals from lower levels of the tree are moved up the tree, i.e., closer to the root. To keep track of the resulting changes, with each promoted region we store a level number (called a guard) that denotes the region's original level.
Reference: <author> Freeston, M. </author> <year> (1990a). </year> <title> Advances in the design of the BANG file. </title> <booktitle> In Proc. 3rd Int. Conf. on Foundations of Data Organization and Algorithms, Number 367 in LNCS, </booktitle> <address> Berlin/Heidelberg/New York, </address> <pages> pp. 322-338. </pages> <publisher> Springer-Verlag. </publisher>
Reference: <author> Freeston, M. </author> <year> (1990b). </year> <title> A well-behaved structure for the storage of geometric objects. </title>
Reference-contexts: As a result, a point search may require in the worst case the traversal of the entire directory in a depth-first manner. To address this problem, Freeston (1990a) later proposed different splitting strategies which avoid the spanning problem at the expense of a potentially very low storage utilization. In <ref> (Freeston 1990b) </ref>, the same author proposes an extension to the BANG file to handle extended objects. As often found in PAM extensions, the centroid is used to determine the bucket where to place a given object. <p> Among the approaches similar to the GBD-tree are an extension of the buddy tree by Seeger (1991), and the extension of the BANG file to handle extended spatial objects <ref> (Freeston 1990b) </ref>. 5.3.7 PLOP-Hashing (Kriegel and Seeger 1988; Seeger and Kriegel 1988) Piecewise linear order preserving (PLOP) hashing (Seeger and Kriegel 1988) is a variant of hashing that allows the storage of extended objects without transforming them to points.
Reference: <author> In A. Buchmann, O. Gunther, T. R. Smith, and Y.-F. Wang (Eds.), </author> <title> Design and Implementation of Large Spatial Database Systems, </title> <booktitle> Number 409 in LNCS, </booktitle> <address> Berlin/Heidelberg/New York, </address> <pages> pp. 287-300. </pages> <publisher> Springer-Verlag. </publisher>
Reference: <author> Freeston, M. </author> <year> (1995). </year> <title> A general solution of the n-dimensional B-tree problem. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 80-91. </pages>
Reference-contexts: In their experiments, more than 95% of the index nodes had only one reference and all of the data nodes had only one reference. 4.2.7 The BV-Tree <ref> (Freeston 1995) </ref> The BV-tree represents a recent attempt to solve the d-dimensional B-tree problem, i.e., to find a generic generalization of the B-tree to higher dimensions. The BV-tree is not meant to be a concrete access method.
Reference: <author> Fuchs, H., G. D. Abram, and E. D. </author> <title> Grant (1983). Near real-time shaded display of rigid objects. </title> <booktitle> Computer Graphics 17 (3), </booktitle> <pages> 65-72. </pages> <note> 76 Fuchs, </note> <author> H., Z. Kedem, and B. </author> <title> Naylor (1980). On visible surface generation by a priori tree structures. </title> <booktitle> Computer Graphics 14 (3). </booktitle>
Reference: <author> Gaede, V. </author> <year> (1995a). </year> <title> Geometric information makes spatial query processing more efficient. </title> <booktitle> In Proc. 3rd ACM International Workshop on Advances in Geographic Information Systems (ACM-GIS'95), </booktitle> <address> Baltimore, Maryland, USA, </address> <pages> pp. 45-52. </pages>
Reference-contexts: By enhancing the z-ordering encoding with a single bit that reflects for each Peano region whether it is enclosed in the extended object or not, it is possible to improve the performance of z-ordering even further <ref> (Gaede 1995a) </ref>. Figure 27 shows the Peano regions for the running example. 5.3 Methods Based on Overlapping Regions 5.3.1 The R-Tree (Guttman 1984) An R-tree corresponds to a hierarchy of nested d-dimensional intervals (boxes).
Reference: <author> Gaede, V. </author> <year> (1995b). </year> <title> Optimal redundancy in spatial database systems. </title> <note> In M. J. </note>
Reference-contexts: For a detailed discussion of this problem, see (Orenstein 1989a), (Orenstein 1989b), and <ref> (Gaede 1995b) </ref>. By enhancing the z-ordering encoding with a single bit that reflects for each Peano region whether it is enclosed in the extended object or not, it is possible to improve the performance of z-ordering even further (Gaede 1995a).
Reference: <editor> Egenhofer and J. R. Herring (Eds.), </editor> <booktitle> Proc. 4th Int. Symp. on Spatial Databases (SSD'95), Number 951 in LNCS, </booktitle> <address> Berlin/Heidelberg/New York, </address> <pages> pp. 96-116. </pages> <publisher> Springer-Verlag. </publisher>
Reference: <author> Gaede, V. and W.-F. </author> <month> Riekert </month> <year> (1994). </year> <title> Spatial access methods and query processing in the object-oriented GIS GODOT. </title> <booktitle> In Proc. of the AGDM'94 Workshop, </booktitle> <address> Delft, The Netherlands, </address> <pages> pp. 40-52. </pages> <address> Netherlands Geodetic Commission. </address>
Reference-contexts: with fi 2 f=; ; &lt;; ; &gt;g and q 2 E 1 * northwest () * adjacent () 13 * meets () A closer inspection of these spatial predicates shows that the intersection join R 1 intersects S plays a crucial role for the computation in virtually all cases <ref> (Gaede and Riekert 1994) </ref>. <p> The Peano region corresponding to 00, for example, encloses the regions corresponding to 0001 and 000. Leading 0's are therefore significant. This is an important observation, since it can be used for query processing <ref> (Gaede and Riekert 1994) </ref>. As z-ordering is based on an underlying grid, the resulting set of Peano regions is usually only an approximation of the original object. The termination criterion depends on the accuracy or granularity (maximum number of bits) desired.
Reference: <author> Garg, A. K. and C. C. </author> <title> Gotlieb (1986). Order-preserving key transformation. </title> <journal> ACM Trans. Database Systems 11 (2), </journal> <pages> 213-234. </pages>
Reference: <author> Greene, D. </author> <year> (1989). </year> <title> An implementation and performance analysis of spatial data access methods. </title> <booktitle> In Proc. 5th IEEE Int. Conf. on Data Eng., </booktitle> <pages> pp. 606-615. </pages>
Reference: <author> Gunther, O. </author> <year> (1988). </year> <title> Efficient Structures for Geometric Data Management. </title> <booktitle> Number 337 in LNCS. </booktitle> <address> Berlin/Heidelberg/New York: </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: and Sakauchi 1990), Hilbert R-tree (Kamel and Faloutsos 1994), buddy tree with overlapping (Seeger 1991) sphere tree (Oosterom 1990) P-tree (Schi-wietz 1993), KD2B-tree (Oosterom 1990) clipping EXCELL (Tamminen 1982), extended k-d-tree (Mat-suyama et al. 1984), R + -tree (Sellis et al. 1987), buddy tree with clipping (Seeger 1991) cell tree <ref> (Gunther 1988) </ref> multiple layers multi-layer grid file (Six and Widmayer 1988), R-file (Hutflesz et al. 1990) Table 2: Classification of SAMs Based on Kriegel et al. (1991) 4-dimensional points, which can then be managed by one of the PAMs discussed in the previous section. <p> If storage utilization drops below a given threshold, we try to merge the affected node with its siblings or to reorganize the tree. This is not always possible, which is the reason why the R + -tree cannot guarantee a minimum space utilization. 5.4.3 The Cell Tree <ref> (Gunther 1988) </ref> The main goal during the design of the cell tree (Gunther 1988; Gunther 1989) was to facilitate searches on data objects of arbitrary shapes, i.e., especially on data objects that are not intervals themselves.
Reference: <author> Gunther, O. </author> <year> (1989). </year> <title> The cell tree: An object-oriented index structure for geometric databases. </title> <booktitle> In Proc. 5th IEEE Int. Conf. on Data Eng., </booktitle> <pages> pp. 598-605. </pages>
Reference-contexts: The first observation can be explained by the used data and does not hold in general. Besides measurements on the number of page faults, CPU time measurements are also given. Gunther and Gaede (1996) compare the original cell tree as presented in <ref> (Gunther 1989) </ref> with the cell tree with oversize shelves (Gunther and Noltemeier 1991), the R fl - tree (Beckmann et al. 1990) and the hB-tree (Lomet and Salzberg 1989) for some real cartographic data.
Reference: <author> Gunther, O. </author> <year> (1991). </year> <title> Evaluation of spatial access methods with oversize shelves. </title> <editor> In G. Gambosi, M. Scholl, and H.-W. Six (Eds.), </editor> <booktitle> Geographic Database Management Systems, </booktitle> <pages> pp. 177-193. </pages> <address> Berlin/Heidelberg/New York: </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Because overlap is not allowed, we have to redesign the region structure, which can become very complicated. It may in particular cause further bucket overflows and insertions, which can lead to a chain reaction and, in the worst case, a complete breakdown of the structure <ref> (Gunther and Bilmes 1991) </ref>. Access methods partitioning the complete data space do not suffer from this problem. A final problem concerns the splitting of buckets. <p> The solution consists of those objects that contain at least one of the cells that qualify. A similar algorithm exists for range searches. A performance evaluation of the cell tree <ref> (Gunther and Bilmes 1991) </ref> shows that it is competitive with other popular spatial access methods. them stored in the interior nodes. Even though the partitioning by means of the BSP-tree offers more flexibility compared to rectilinear hyperplanes, it may be inevitable to clip objects. <p> Besides measurements on the number of page faults, CPU time measurements are also given. Gunther and Gaede (1996) compare the original cell tree as presented in (Gunther 1989) with the cell tree with oversize shelves <ref> (Gunther and Noltemeier 1991) </ref>, the R fl - tree (Beckmann et al. 1990) and the hB-tree (Lomet and Salzberg 1989) for some real cartographic data. <p> There is a slight performance advantage of the cell tree with oversize shelves compared to the R fl -tree and the hB-tree, but a major difference to the original cell tree. An earlier comparison using artificially generated data can be found in <ref> (Gunther 1991) </ref>. Both studies suggest that oversize shelves may lead to significant improvements for access methods with clipping. Oosterom (1990) compares the query times of his KD2B-tree and the sphere tree with the R-tree for different queries.
Reference: <author> Gunther, O. </author> <year> (1993). </year> <title> Efficient computation of spatial joins. </title> <booktitle> In Proc. 9th IEEE Int. Conf. on Data Eng., </booktitle> <pages> pp. 50-59. </pages>
Reference-contexts: Common distance functions for points include the Euclidean and the Manhattan distance. Besides spatial selections, as exemplified by Queries 1 through 8, the spatial join is one of the most important spatial operations and can be defined as follows <ref> (Gunther 1993) </ref>: Query 9 (Spatial Join) Given two collections R and S of spatial objects and a spatial predicate , find all pairs of objects (o; o 0 ) 2 R fi S where (o:G; o 0 :G) evaluates to true.
Reference: <author> Gunther, O. and J. </author> <title> Bilmes (1991). Tree-based access methods for spatial databases: Implementation and performance evaluation. </title> <journal> IEEE Trans. Knowledge and Data Eng. </journal> <volume> 3 (3), </volume> <pages> 342-356. </pages>
Reference-contexts: Because overlap is not allowed, we have to redesign the region structure, which can become very complicated. It may in particular cause further bucket overflows and insertions, which can lead to a chain reaction and, in the worst case, a complete breakdown of the structure <ref> (Gunther and Bilmes 1991) </ref>. Access methods partitioning the complete data space do not suffer from this problem. A final problem concerns the splitting of buckets. <p> The solution consists of those objects that contain at least one of the cells that qualify. A similar algorithm exists for range searches. A performance evaluation of the cell tree <ref> (Gunther and Bilmes 1991) </ref> shows that it is competitive with other popular spatial access methods. them stored in the interior nodes. Even though the partitioning by means of the BSP-tree offers more flexibility compared to rectilinear hyperplanes, it may be inevitable to clip objects. <p> Besides measurements on the number of page faults, CPU time measurements are also given. Gunther and Gaede (1996) compare the original cell tree as presented in (Gunther 1989) with the cell tree with oversize shelves <ref> (Gunther and Noltemeier 1991) </ref>, the R fl - tree (Beckmann et al. 1990) and the hB-tree (Lomet and Salzberg 1989) for some real cartographic data. <p> There is a slight performance advantage of the cell tree with oversize shelves compared to the R fl -tree and the hB-tree, but a major difference to the original cell tree. An earlier comparison using artificially generated data can be found in <ref> (Gunther 1991) </ref>. Both studies suggest that oversize shelves may lead to significant improvements for access methods with clipping. Oosterom (1990) compares the query times of his KD2B-tree and the sphere tree with the R-tree for different queries.
Reference: <author> Gunther, O. and A. </author> <title> Buchmann (1990). Research issues in spatial databases. </title> <booktitle> ACM SIGMOD Record 19 (4), </booktitle> <pages> 61-68. </pages>
Reference-contexts: While the main motivation originated in the geosciences and mechanical CAD, the range of possible applications has now expanded to areas such as robotics, visual perception and autonomous navigation, environmental protection, and medical imaging <ref> (Gunther and Buchmann 1990) </ref>. Just as broad as the range of applications is the range of interpretations given to the term spatial data management . In VLSI CAD and cartography this term refers to applications that rely mostly on two-dimensional or layered two-dimensional data.
Reference: <author> Gunther, O. and V. </author> <title> Gaede (1996). Oversize shelves: A storage management technique for large spatial data objects. </title> <note> Int. J. Geographical Information Systems 10 (8). </note>
Reference-contexts: These results are in accordance with those of Abel and Mark (1990) In trying to summarize all those experimental comparisons, the following multidimensional access methods seem to be among the best performing ones (in alphabetical order): * buddy (hash) tree (Seeger and Kriegel 1990) * cell tree with oversize shelves <ref> (Gunther and Gaede 1996) </ref> * Hilbert R-tree (Kamel and Faloutsos 1994) * KD2B-tree (Oosterom 1990) * PMR-quadtree (Nelson and Samet 1987) * R + -tree (Sellis, Roussopoulos, and Faloutsos 1987) * R fl -tree (Beckmann, Kriegel, Schneider, and Seeger 1990) It cannot be emphasized enough, however, that any such "hit list"
Reference: <author> Gunther, O., R. Koerstein, R. Muller, and P. </author> <title> Schmidt (1995). The MMM project: Access to algorithms via WWW. In Proc. Third International World Wide Web Conference. </title> <note> URL http://www.igd.fhg.de/www95.html. 77 Gunther, </note> <author> O. and H. </author> <title> Noltemeier (1991). Spatial database indices for large extended objects. </title> <booktitle> In Proc. 7th IEEE Int. Conf. on Data Eng., </booktitle> <pages> pp. 520-526. </pages>
Reference-contexts: In order to make such comparative evaluations both easier to perform and easier to verify, it is essential to provide platform-independent access to the implementations of a broad variety of access methods. Some extensions of the World Wide Web, including our own MMM project <ref> (Gunther et al. 1995) </ref>, may provide the right technological base for such a paradigm change. Once every published paper includes a URL (Uniform Resource Locator), i.e., an Internet address that points to an implementation, possibly with a standardized user interface, transparency will increase substantially.
Reference: <author> Guting, R. H. </author> <year> (1989). </year> <title> Gral: An extendible relational datebase system for geometric applications. </title> <booktitle> In Proc. 15th Int. Conf. on Very Large Data Bases, </booktitle> <pages> pp. 33-44. </pages>
Reference: <author> Guting, R. H. and M. Schneider (1993). Realms: </author> <title> A foundation for spatial data types in database systems. </title> <editor> In D. Abel and B. C. Ooi (Eds.), </editor> <booktitle> Advances in Spatial Databases, Number 692 in LNCS, </booktitle> <address> Berlin/Heidelberg/New York. </address> <publisher> Springer-Verlag. </publisher>
Reference: <author> Guttman, A. </author> <year> (1984). </year> <title> R-trees: A dynamic index structure for spatial searching. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 47-54. </pages>
Reference-contexts: onto a database of 40 technique base type grid cell interval (box) sphere polyhedron transfor mation zkdB + -tree (Oren-stein 1986), BANG file (Free-ston 1987), hB-tree (Lomet and Salzberg 1989) all PAMs described in Section 4 except of the BANG file and the hB-tree P-tree (Ja-gadish 1990c) overlapping regions R-tree <ref> (Guttman 1984) </ref>, R fl - tree (Beckmann et al. 1990), skd-tree (Ooi et al. 1987), GBD-tree (Ohsawa and Sakauchi 1990), Hilbert R-tree (Kamel and Faloutsos 1994), buddy tree with overlapping (Seeger 1991) sphere tree (Oosterom 1990) P-tree (Schi-wietz 1993), KD2B-tree (Oosterom 1990) clipping EXCELL (Tamminen 1982), extended k-d-tree (Mat-suyama et al. <p> Figure 27 shows the Peano regions for the running example. 5.3 Methods Based on Overlapping Regions 5.3.1 The R-Tree <ref> (Guttman 1984) </ref> An R-tree corresponds to a hierarchy of nested d-dimensional intervals (boxes). Each node of the R-tree corresponds to a disk page and a d-dimensional interval I d (-). If is an interior node then the intervals corresponding to the descendants i of are contained in I d (-). <p> If is a leaf node, I d (-) is the d-dimensional minimum bounding box (MBB) of the objects stored in -. For each object in turn, only stores its MBB and a reference to the complete object description. Other properties of the R-tree include <ref> (Guttman 1984) </ref>: 49 * Every node contains between m and M entries unless it is the root. The lower bound m prevents the degeneration of trees and ensures an efficient storage utilization.
Reference: <author> Henrich, A. </author> <year> (1995). </year> <title> Adapting the Transformation Technique to Maintain MultiDimensional Non-Point Objects in k-d-Tree Based Access Structures. </title> <booktitle> In Proceedings of the 3rd ACM Workshop on Advances in Geographic Information Systems, </booktitle> <address> Baltimore, Maryland. </address>
Reference: <author> Henrich, A. and J. </author> <title> Moller (1995). Extending a spatial access structure to support additional standard attributes. </title> <editor> In M. J. Egenhofer and J. R. Herring (Eds.), </editor> <booktitle> Proc. 4th Int. Symposium on Advances in Spatial Databases (SSD'95), Volume 951 of LNCS, </booktitle> <pages> pp. 132-151. </pages> <publisher> Springer. </publisher>
Reference: <author> Henrich, A. and H.-W. </author> <title> Six (1991). How to split buckets in spatial data structures. </title> <editor> In G. Gambosi, M. Scholl, and H.-W. Six (Eds.), </editor> <booktitle> Geographic Database Management Systems, </booktitle> <pages> pp. 212-244. </pages> <address> Berlin/Heidelberg/New York: </address> <publisher> Springer-Verlag. </publisher>
Reference: <author> Henrich, A., H.-W. Six, and P. </author> <title> Widmayer (1989). The LSD tree: Spatial access to multidimensional point and non-point objects. </title> <booktitle> In Proc. 15th Int. Conf. on Very Large Data Bases, </booktitle> <pages> pp. 45-53. </pages>
Reference-contexts: interpolation hashing (Burkhard 1983), multidimensional extendible hashing (Otoo 1984), grid file (Niev-ergelt, Hinterberger, and Sevcik 1984), balanced multidimensional two-level grid file (Hin-richs 1985), interpolation-based grid file (Ouk-sel 1985), extendible hash tree (Otoo 1986), MOLHPE (Kriegel and Seeger 1986), PLOP-hashing (Kriegel and Seeger 1988), quantile hashing (Kriegel and Seeger 1989), LSD-tree <ref> (Henrich, Six, and Widmayer 1989) </ref> fi fi twin grid file (Hutflesz, Six, and Widmayer 1988b) fi fi multilevel grid file (Whang and Krishnamurthy 1985), buddy tree (Seeger and Kriegel 1990) fi fi BSP-tree (Fuchs, Kedem, and Naylor 1980), BD-tree (Ohsawa and Sakauchi 1983), BANG file (Freeston 1987), hB-tree (Lomet and Salzberg <p> The union of data pages results in the deletion of at least one hyperplane in the parent index node. If an underflow occurs, the deletion has to be propagated up the tree. 4.2.2 The LSD-Tree <ref> (Henrich, Six, and Widmayer 1989) </ref> We list the LSD (Local Split Decision) tree as a point access method although it has been emphasized by the authors that the structure can also be used for managing extended objects. <p> To overcome some of these problems, Henrich et al. (1989), Faloutsos and Rong (1991), as well as Pagel et al. (1993) have proposed special transformation and split strategies. A structure that was designed explicitly to be used in connection with the transformation technique is the LSD-tree <ref> (Henrich et al. 1989) </ref> described in Section 4.2.2. Performance studies by Henrich and Six (1991) confirm the claim that the LSD-tree adapts well to non-uniform distributions, which is of particular relevance in this context.
Reference: <author> Hinrichs, K. </author> <year> (1985). </year> <title> Implementation of the grid file: Design concepts and experience. </title> <journal> BIT 25, </journal> <pages> 569-592. </pages>
Reference-contexts: Depending on the current partitioning of space, it may then be possible to merge this page with a neighbor page and to drop the partitioning hyperplane from the corresponding scale. Depending on the implementation of the grid directory, merging may require a complete directory scan <ref> (Hinrichs 1985) </ref>. Hinrichs discusses several methods for finding candidates with which a given data bucket can merge, including the neighbor system 25 and the multidimensional buddy system. The neighbor system allows to merge two adjacent regions if the result is a rectangular region again. <p> To alleviate this problem, Tamminen (1983) later suggested a hierarchical method, similar to the multilevel grid file of Whang and Krishnamurthy (1985). Overflow pages are introduced to limit the depth of the hierarchy. 4.1.3 The Two-Level Grid File <ref> (Hinrichs 1985) </ref> The basic idea of the two-level grid file is to use a second grid file to manage the grid directory. The first of the two levels is called the root directory, which is a coarsened version of the second level, the actual grid directory.
Reference: <author> Hoel, E. G. and H. </author> <title> Samet (1992). A qualitative comparison study of data structures for large segment databases. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 205-214. </pages>
Reference: <author> Hoel, E. G. and H. </author> <title> Samet (1995). Benchmarking spatial join operations with spatial output. </title> <booktitle> In Proc. 21st Int. Conf. on Very Large Data Bases, </booktitle> <pages> pp. 606-618. </pages>
Reference: <author> Hutflesz, A., H.-W. Six, and P. </author> <title> Widmayer (1988a). Globally order preserving multidimensional linear hashing. </title> <booktitle> In Proc. 4th IEEE Int. Conf. on Data Eng., </booktitle> <pages> pp. 572-579. </pages>
Reference-contexts: On the other hand, z-hashing allows to read three to four buckets in a row on the average before a seek is required, whereas MOLHPE manages to read only one <ref> (Hutflesz et al. 1988a) </ref>. <p> They also provide some performance results for the R-tree, which uses their splitting strategy in comparison to the otherwise unchanged R-tree. An empirical performance comparison of the R-tree with an improved variant of z-hashing, called layered z-hashing or lz-hashing <ref> (Hutflesz et al. 1988a) </ref>, can be found in (Hutflesz, Widmayer, and Zimmermann 1991). The proposed structure needs significantly less seek operations than the R-tree; average storage utilization is higher. Jagadish (1990a) studies the properties of different space-filling curves (z-ordering, Gray-coding, and Hilbert-curve).
Reference: <author> Hutflesz, A., H.-W. Six, and P. </author> <title> Widmayer (1988b). Twin grid files: Space optimizing access schemes. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 78 183-190. </pages>
Reference-contexts: file (Niev-ergelt, Hinterberger, and Sevcik 1984), balanced multidimensional two-level grid file (Hin-richs 1985), interpolation-based grid file (Ouk-sel 1985), extendible hash tree (Otoo 1986), MOLHPE (Kriegel and Seeger 1986), PLOP-hashing (Kriegel and Seeger 1988), quantile hashing (Kriegel and Seeger 1989), LSD-tree (Henrich, Six, and Widmayer 1989) fi fi twin grid file <ref> (Hutflesz, Six, and Widmayer 1988b) </ref> fi fi multilevel grid file (Whang and Krishnamurthy 1985), buddy tree (Seeger and Kriegel 1990) fi fi BSP-tree (Fuchs, Kedem, and Naylor 1980), BD-tree (Ohsawa and Sakauchi 1983), BANG file (Freeston 1987), hB-tree (Lomet and Salzberg 1989) Table 1: Classification of PAMs according to Seeger and <p> Figure 16 shows a two-level grid file for the running example. Each cell in the root directory has a pointer to the corresponding entries in the subdirectory, which have their own scales in turn. 4.1.4 The Twin Grid File <ref> (Hutflesz, Six, and Widmayer 1988b) </ref> The twin grid file tries to increase space utilization compared to the original grid file by introducing a second grid file.
Reference: <author> Hutflesz, A., H.-W. Six, and P. </author> <title> Widmayer (1990). The R-file: An efficient access structure for proximity queries. </title> <booktitle> In Proc. 6th IEEE Int. Conf. on Data Eng., </booktitle> <pages> pp. 372-379. </pages>
Reference-contexts: overlapping (Seeger 1991) sphere tree (Oosterom 1990) P-tree (Schi-wietz 1993), KD2B-tree (Oosterom 1990) clipping EXCELL (Tamminen 1982), extended k-d-tree (Mat-suyama et al. 1984), R + -tree (Sellis et al. 1987), buddy tree with clipping (Seeger 1991) cell tree (Gunther 1988) multiple layers multi-layer grid file (Six and Widmayer 1988), R-file <ref> (Hutflesz et al. 1990) </ref> Table 2: Classification of SAMs Based on Kriegel et al. (1991) 4-dimensional points, which can then be managed by one of the PAMs discussed in the previous section. Search operations can be expressed as point and region queries in this dual space. <p> The performance results reported by Six and Widmayer (1988) suggest that the multi-layer grid file is superior to the conventional grid file, using clipping to handle extended objects. Possible disadvantages of the multi-layer grid file include low storage utilization and expensive directory maintenance. 5.5.2 The R-File <ref> (Hutflesz, Six, and Widmayer 1990) </ref> To overcome some of the problems of the multi-layer grid file, Hutflesz et al. (1990) proposed an alternative structure for managing sets of rectangles, called the R-file; see grid file, the R-file uses a single directory.
Reference: <author> Hutflesz, A., P. Widmayer, and C. </author> <title> Zimmermann (1991). Global order makes spatial access faster. </title> <editor> In G. Gambosi, M. Scholl, and H.-W. Six (Eds.), </editor> <booktitle> Geographic Database Management Systems, </booktitle> <pages> pp. 161-176. </pages> <address> Berlin/Heidelberg/New York: </address> <publisher> Springer-Verlag. Illustra Inc. </publisher> <year> (1996). </year> <note> URL http://www.illustra.com. </note>
Reference-contexts: They also provide some performance results for the R-tree, which uses their splitting strategy in comparison to the otherwise unchanged R-tree. An empirical performance comparison of the R-tree with an improved variant of z-hashing, called layered z-hashing or lz-hashing (Hutflesz et al. 1988a), can be found in <ref> (Hutflesz, Widmayer, and Zimmermann 1991) </ref>. The proposed structure needs significantly less seek operations than the R-tree; average storage utilization is higher. Jagadish (1990a) studies the properties of different space-filling curves (z-ordering, Gray-coding, and Hilbert-curve).
Reference: <author> Jagadish, H. V. </author> <year> (1990a). </year> <title> Linear clustering of objects with multiple attributes. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 332-342. </pages>
Reference: <author> Jagadish, H. V. </author> <year> (1990b). </year> <title> On indexing line segments. </title> <booktitle> In Proc. 16th Int. Conf. on Very Large Data Bases, </booktitle> <pages> pp. 614-625. </pages>
Reference: <author> Jagadish, H. V. </author> <year> (1990c). </year> <title> Spatial search with polyhedra. </title> <booktitle> In Proc. 6th IEEE Int. Conf. on Data Eng., </booktitle> <pages> pp. 311-319. </pages>
Reference-contexts: In order to find a suitable split, the X-tree also maintains the history of previous splits. 5.3.3 The P-Tree <ref> (Jagadish 1990c) </ref> In many applications, intervals are not a good approximation of the data objects enclosed. In order to combine the flexibility of polygon-shaped containers with the simplicity of the R-tree, Jagadish (1990c) and Schiwietz (1993) independently proposed different variations of polyhedral trees or P-trees.
Reference: <author> Kamel, I. and C. </author> <title> Faloutsos (1992). </title> <booktitle> Parallel R-trees. In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 195-204. </pages>
Reference: <author> Kamel, I. and C. </author> <title> Faloutsos (1993). On packing R-trees. </title> <booktitle> In Proc. 2nd Int. Conf. on Information and Knowledge Management, </booktitle> <pages> pp. 490-499. </pages>
Reference: <author> Kamel, I. and C. </author> <title> Faloutsos (1994). Hilbert R-tree: An improved R-tree using fractals. </title> <booktitle> In Proc. 20th Int. Conf. on Very Large Data Bases, </booktitle> <pages> pp. 500-509. </pages>
Reference-contexts: file (Free-ston 1987), hB-tree (Lomet and Salzberg 1989) all PAMs described in Section 4 except of the BANG file and the hB-tree P-tree (Ja-gadish 1990c) overlapping regions R-tree (Guttman 1984), R fl - tree (Beckmann et al. 1990), skd-tree (Ooi et al. 1987), GBD-tree (Ohsawa and Sakauchi 1990), Hilbert R-tree <ref> (Kamel and Faloutsos 1994) </ref>, buddy tree with overlapping (Seeger 1991) sphere tree (Oosterom 1990) P-tree (Schi-wietz 1993), KD2B-tree (Oosterom 1990) clipping EXCELL (Tamminen 1982), extended k-d-tree (Mat-suyama et al. 1984), R + -tree (Sellis et al. 1987), buddy tree with clipping (Seeger 1991) cell tree (Gunther 1988) multiple layers multi-layer grid <p> of Abel and Mark (1990) In trying to summarize all those experimental comparisons, the following multidimensional access methods seem to be among the best performing ones (in alphabetical order): * buddy (hash) tree (Seeger and Kriegel 1990) * cell tree with oversize shelves (Gunther and Gaede 1996) * Hilbert R-tree <ref> (Kamel and Faloutsos 1994) </ref> * KD2B-tree (Oosterom 1990) * PMR-quadtree (Nelson and Samet 1987) * R + -tree (Sellis, Roussopoulos, and Faloutsos 1987) * R fl -tree (Beckmann, Kriegel, Schneider, and Seeger 1990) It cannot be emphasized enough, however, that any such "hit list" needs to be used with great care.
Reference: <author> Kemper, A. and M. </author> <month> Wallrath </month> <year> (1987). </year> <title> An analysis of geometric modeling in database systems. </title> <booktitle> ACM Computing Surveys 19 (1), </booktitle> <pages> 47-91. </pages>
Reference-contexts: Common operations include spatial searches, map overlay, as well as distance-related operations. In mechanical CAD, on the other hand, data objects are usually three-dimensional solids. They may be represented in a variety of data formats, including cell decomposition schemes, constructive solid geometry (CSG), and boundary representations <ref> (Kemper and Wallrath 1987) </ref>. Yet other applications emphasize the processing of unanalyzed images, such as X-rays and satellite imagery, from which features are extracted. In those areas, the terms spatial database and image database are sometimes even used interchangeably.
Reference: <author> Klinger, A. </author> <year> (1971). </year> <title> Pattern and search statistics. </title> <editor> In S. Rustagi (Ed.), </editor> <booktitle> Optimizing Methods in Statistics, </booktitle> <pages> pp. 303-337. </pages>
Reference: <author> Knott, G. </author> <year> (1975). </year> <title> Hashing functions. </title> <journal> The Computer Journal 18 (3), </journal> <pages> 265-278. </pages>
Reference: <author> Kolovson, C. </author> <year> (1990). </year> <title> Indexing Techniques for Multi-Dimensional Spatial Data and Historical Data in Database Management Systems. </title> <type> Ph. D. thesis, </type> <institution> University of California at Berkeley. </institution>
Reference: <author> Kolovson, C. and M. </author> <title> Stonebraker (1991). Segment indexes: Dynamic indexing techniques for multi-dimensional interval data. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 138-147. </pages>
Reference: <author> Kriegel, H.-P. </author> <year> (1984). </year> <title> Performance comparison of index structures for multikey retrieval. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 186-196. </pages> <note> 79 Kriegel, </note> <author> H.-P., P. Heep, S. Heep, and M. S. R. </author> <title> Schneider (1991). An access method based query processor for spatial database systems. </title> <editor> In G. Gambosi, M. Scholl, and H.-W. Six (Eds.), </editor> <booktitle> Geographic Database Management Systems, </booktitle> <pages> pp. 273-292. </pages> <address> Berlin/Heidelberg/New York: </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: A natural approach to handle multidimensional search queries consists in the consecutive application of such single key structures, one per dimension. Unfortunately, this approach can be very inefficient <ref> (Kriegel 1984) </ref>. Since each index is traversed independently of the others, we cannot exploit the possibly high selectivity in one dimension for narrowing down the search in the remaining dimensions. In general, there is no easy and obvious way to extend single key structures in order to handle multidimensional data.
Reference: <author> Kriegel, H.-P., M. Schiwietz, R. Schneider, and B. </author> <title> Seeger (1990). Performance comparison of point and spatial access methods. </title> <editor> In A. Buchmann, O. Gunther, T. </editor> <publisher> R. </publisher>
Reference-contexts: (Ouk-sel 1985), extendible hash tree (Otoo 1986), MOLHPE (Kriegel and Seeger 1986), PLOP-hashing (Kriegel and Seeger 1988), quantile hashing (Kriegel and Seeger 1989), LSD-tree (Henrich, Six, and Widmayer 1989) fi fi twin grid file (Hutflesz, Six, and Widmayer 1988b) fi fi multilevel grid file (Whang and Krishnamurthy 1985), buddy tree <ref> (Seeger and Kriegel 1990) </ref> fi fi BSP-tree (Fuchs, Kedem, and Naylor 1980), BD-tree (Ohsawa and Sakauchi 1983), BANG file (Freeston 1987), hB-tree (Lomet and Salzberg 1989) Table 1: Classification of PAMs according to Seeger and Kriegel (1990) these heuristics is that objects that are located close to each other in original <p> In order to improve the search performance for non-point data and range queries, Henrich and Moller (1995) suggest to store auxiliary information on the existing data regions along with the index entries of the LSD-tree. 4.2.3 The Buddy Tree <ref> (Seeger and Kriegel 1990) </ref> The buddy tree is a dynamic hashing scheme with a tree-structured directory. The tree is constructed by consecutive insertion, cutting the universe recursively into two parts of equal size with iso-oriented hyperplanes. <p> Ng and Kameda (1993, 1994) discuss how to support concurrency and recovery in R-trees. 5.3.2 The R fl -Tree <ref> (Beckmann, Kriegel, Schneider, and Seeger 1990) </ref> Based on a careful study of the R-tree behavior under different data distributions, Beckmann et al. (1990) identified several weaknesses of the original algorithms. In particular, they confirmed the observation of Roussopoulos and Leifker (1985) that the insertion phase is critical for search performance. <p> These results are in accordance with those of Abel and Mark (1990) In trying to summarize all those experimental comparisons, the following multidimensional access methods seem to be among the best performing ones (in alphabetical order): * buddy (hash) tree <ref> (Seeger and Kriegel 1990) </ref> * cell tree with oversize shelves (Gunther and Gaede 1996) * Hilbert R-tree (Kamel and Faloutsos 1994) * KD2B-tree (Oosterom 1990) * PMR-quadtree (Nelson and Samet 1987) * R + -tree (Sellis, Roussopoulos, and Faloutsos 1987) * R fl -tree (Beckmann, Kriegel, Schneider, and Seeger 1990) It <p> alphabetical order): * buddy (hash) tree (Seeger and Kriegel 1990) * cell tree with oversize shelves (Gunther and Gaede 1996) * Hilbert R-tree (Kamel and Faloutsos 1994) * KD2B-tree (Oosterom 1990) * PMR-quadtree (Nelson and Samet 1987) * R + -tree (Sellis, Roussopoulos, and Faloutsos 1987) * R fl -tree <ref> (Beckmann, Kriegel, Schneider, and Seeger 1990) </ref> It cannot be emphasized enough, however, that any such "hit list" needs to be used with great care. Clever programming can often make up for inherent deficiencies of an access method. <p> Among other things, their model reveals the importance of the perimeter as a criterion for node splitting, which has been intuitively anticipated by the inventors of the R fl -tree <ref> (Beckmann, Kriegel, Schneider, and Seeger 1990) </ref>. The central formula of Pagel et al. (1993) to compute the number of disk accesses in an R-tree has been found independently by Kamel and Faloutsos (1993). Faloutsos and Kamel (1994) later refined this formula by using properties of the data set.
Reference: <author> Smith, and Y.-F. Wang (Eds.), </author> <title> Design and Implementation of Large Spatial Database Systems, </title> <booktitle> Number 409 in LNCS, </booktitle> <address> Berlin/Heidelberg/New York, </address> <pages> pp. 89-114. </pages> <publisher> Springer-Verlag. </publisher>
Reference: <author> Kriegel, H.-P. and B. </author> <title> Seeger (1986). Multidimensional order preserving linear hashing with partial expansions. </title> <booktitle> In Proc. Int. Conf. on Database Theory, Number 243 in LNCS, </booktitle> <address> Berlin/Heidelberg/New York. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: fi fi quadtree (Finkel and Bentley 1974; Samet 1984), k-d-B tree (Robinson 1981), EX-CELL (Tamminen 1982), interpolation hashing (Burkhard 1983), multidimensional extendible hashing (Otoo 1984), grid file (Niev-ergelt, Hinterberger, and Sevcik 1984), balanced multidimensional two-level grid file (Hin-richs 1985), interpolation-based grid file (Ouk-sel 1985), extendible hash tree (Otoo 1986), MOLHPE <ref> (Kriegel and Seeger 1986) </ref>, PLOP-hashing (Kriegel and Seeger 1988), quantile hashing (Kriegel and Seeger 1989), LSD-tree (Henrich, Six, and Widmayer 1989) fi fi twin grid file (Hutflesz, Six, and Widmayer 1988b) fi fi multilevel grid file (Whang and Krishnamurthy 1985), buddy tree (Seeger and Kriegel 1990) fi fi BSP-tree (Fuchs, Kedem,
Reference: <author> Kriegel, H.-P. and B. </author> <title> Seeger (1987). Multidimensional quantile hashing is very efficient for non-uniform record distributions. </title> <booktitle> In Proc. 3rd IEEE Int. Conf. on Data Eng., </booktitle> <pages> pp. 10-17. </pages>
Reference: <author> Kriegel, H.-P. and B. </author> <title> Seeger (1988). PLOP-hashing: A grid file without directory. </title> <booktitle> In Proc. 4th IEEE Int. Conf. on Data Eng., </booktitle> <pages> pp. 369-376. </pages>
Reference-contexts: Bentley 1974; Samet 1984), k-d-B tree (Robinson 1981), EX-CELL (Tamminen 1982), interpolation hashing (Burkhard 1983), multidimensional extendible hashing (Otoo 1984), grid file (Niev-ergelt, Hinterberger, and Sevcik 1984), balanced multidimensional two-level grid file (Hin-richs 1985), interpolation-based grid file (Ouk-sel 1985), extendible hash tree (Otoo 1986), MOLHPE (Kriegel and Seeger 1986), PLOP-hashing <ref> (Kriegel and Seeger 1988) </ref>, quantile hashing (Kriegel and Seeger 1989), LSD-tree (Henrich, Six, and Widmayer 1989) fi fi twin grid file (Hutflesz, Six, and Widmayer 1988b) fi fi multilevel grid file (Whang and Krishnamurthy 1985), buddy tree (Seeger and Kriegel 1990) fi fi BSP-tree (Fuchs, Kedem, and Naylor 1980), BD-tree (Ohsawa <p> Since the region boundaries are not necessarily simple binary intervals, a small directory is needed. In exchange, skewed input data can be maintained as efficiently as uniformly distributed data. PLOP (piecewise linear order-preserving) hashing has been proposed by the same authors one year later <ref> (Kriegel and Seeger 1988) </ref>. Because this structure can also be used as an access method for extended objects, we delay its discussion until Section 5.3.7. Another variant that has better order-preserving properties than MOLHPE has been reported by Hutflesz, Six, and Widmayer (1988a). <p> Among the approaches similar to the GBD-tree are an extension of the buddy tree by Seeger (1991), and the extension of the BANG file to handle extended spatial objects (Freeston 1990b). 5.3.7 PLOP-Hashing (Kriegel and Seeger 1988; Seeger and Kriegel 1988) Piecewise linear order preserving (PLOP) hashing <ref> (Seeger and Kriegel 1988) </ref> is a variant of hashing that allows the storage of extended objects without transforming them to points. An earlier version of this structure (Kriegel and Seeger 1988) was only capable of handling multidimensional point data. We shall focus on the former proposal. <p> An earlier version of this structure <ref> (Kriegel and Seeger 1988) </ref> was only capable of handling multidimensional point data. We shall focus on the former proposal. PLOP-hashing partitions the universe similarly to the grid file; extended objects may 58 span more than one directory cell. Hyperplanes extend along the axes of the data space. <p> It should further be noted that PLOP-hashing can easily be modified so that it supports clipping rather than overlapping regions. Analytical experiments indicate that PLOP-hashing is superior to the R-tree and R + -tree for uniform data distributions <ref> (Seeger and Kriegel 1988) </ref>. 5.4 Methods Based on Clipping 5.4.1 The Extended K-D-Tree (Matsuyama, Hao, and Nagao 1984) One of the earliest extensions of the adaptive k-d-tree that was capable of handling extended objects was the extended k-d-tree.
Reference: <author> Kriegel, H.-P. and B. </author> <title> Seeger (1989). Multidimensional quantile hashing is very efficient for non-uniform distributions. </title> <booktitle> Information Sciences 48, </booktitle> <pages> 99-117. </pages>
Reference-contexts: (Robinson 1981), EX-CELL (Tamminen 1982), interpolation hashing (Burkhard 1983), multidimensional extendible hashing (Otoo 1984), grid file (Niev-ergelt, Hinterberger, and Sevcik 1984), balanced multidimensional two-level grid file (Hin-richs 1985), interpolation-based grid file (Ouk-sel 1985), extendible hash tree (Otoo 1986), MOLHPE (Kriegel and Seeger 1986), PLOP-hashing (Kriegel and Seeger 1988), quantile hashing <ref> (Kriegel and Seeger 1989) </ref>, LSD-tree (Henrich, Six, and Widmayer 1989) fi fi twin grid file (Hutflesz, Six, and Widmayer 1988b) fi fi multilevel grid file (Whang and Krishnamurthy 1985), buddy tree (Seeger and Kriegel 1990) fi fi BSP-tree (Fuchs, Kedem, and Naylor 1980), BD-tree (Ohsawa and Sakauchi 1983), BANG file (Freeston
Reference: <author> Kumar, A. </author> <year> (1994a). </year> <title> G-tree: A new data structure for organizing multidimensional data. </title> <journal> IEEE Trans. Knowledge and Data Eng. </journal> <volume> 6 (2), </volume> <pages> 341-347. </pages>
Reference-contexts: Unfortunately, the authors do not describe how the directory is maintained on disk. Detailed algorithms to paginate the BD-tree as well as several other proposals for improvement were later presented by Dandamudi and Sorenson (1986, 1991). A structure closely related to the BD-tree is the G-tree or grid tree <ref> (Kumar 1994a) </ref>. The structure differs in the way the partitions are mapped into buckets.
Reference: <author> Kumar, A. </author> <year> (1994b). </year> <title> A study of spatial clustering techniques. </title> <editor> In D. Karagiannis (Ed.), </editor> <booktitle> Proc. 5th Conf. on Database and Expert Systems Applications (DEXA'94), Number 856 in LNCS, </booktitle> <pages> pp. 57-70. </pages> <publisher> Springer-Verlag. </publisher>
Reference: <author> Larson, P. A. </author> <year> (1980). </year> <title> Linear hashing with partial expansions. </title> <booktitle> In Proc. 6th Int. Conf. on Very Large Data Bases, </booktitle> <pages> pp. 224-232. </pages>
Reference: <author> Lin, K.-I., H. Jagadish, and C. </author> <title> Faloutsos (1994). The TV-tree: An index structure for high-dimensional data. </title> <journal> The VLDB J. </journal> <volume> 3 (4), </volume> <pages> 517-543. </pages>
Reference: <author> Litwin, W. </author> <year> (1980). </year> <title> Linear hashing: A new tool for file and table addressing. </title> <booktitle> In Proc. 6th Int. Conf. on Very Large Data Bases, </booktitle> <pages> pp. 212-223. </pages>
Reference: <author> Lo, M. and C. </author> <title> Ravishankar (1994). Spatial joins using seeded trees. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 209-220. </pages>
Reference-contexts: file (Free-ston 1987), hB-tree (Lomet and Salzberg 1989) all PAMs described in Section 4 except of the BANG file and the hB-tree P-tree (Ja-gadish 1990c) overlapping regions R-tree (Guttman 1984), R fl - tree (Beckmann et al. 1990), skd-tree (Ooi et al. 1987), GBD-tree (Ohsawa and Sakauchi 1990), Hilbert R-tree <ref> (Kamel and Faloutsos 1994) </ref>, buddy tree with overlapping (Seeger 1991) sphere tree (Oosterom 1990) P-tree (Schi-wietz 1993), KD2B-tree (Oosterom 1990) clipping EXCELL (Tamminen 1982), extended k-d-tree (Mat-suyama et al. 1984), R + -tree (Sellis et al. 1987), buddy tree with clipping (Seeger 1991) cell tree (Gunther 1988) multiple layers multi-layer grid <p> of Abel and Mark (1990) In trying to summarize all those experimental comparisons, the following multidimensional access methods seem to be among the best performing ones (in alphabetical order): * buddy (hash) tree (Seeger and Kriegel 1990) * cell tree with oversize shelves (Gunther and Gaede 1996) * Hilbert R-tree <ref> (Kamel and Faloutsos 1994) </ref> * KD2B-tree (Oosterom 1990) * PMR-quadtree (Nelson and Samet 1987) * R + -tree (Sellis, Roussopoulos, and Faloutsos 1987) * R fl -tree (Beckmann, Kriegel, Schneider, and Seeger 1990) It cannot be emphasized enough, however, that any such "hit list" needs to be used with great care.
Reference: <author> Lomet, D. B. </author> <year> (1983). </year> <title> Boundex index exponential hashing. </title> <journal> ACM Trans. </journal> <note> Database Systems 8 (1), 136-165. 80 Lomet, </note> <author> D. B. </author> <year> (1991). </year> <title> Grow and post index trees: Role, techniques and future poten-tial. </title> <editor> In O. Gunther and H. Schek (Eds.), </editor> <booktitle> Proc. 2nd Int. Symposium on Spatial Databases (SSD'91), Number 525 in LNCS, </booktitle> <address> Berlin/Heidelberg/New York, </address> <pages> pp. 183-206. </pages> <publisher> Springer-Verlag. </publisher>
Reference: <author> Lomet, D. B. and B. </author> <title> Salzberg (1989). The hB-tree: A robust multiattribute search structure. </title> <booktitle> In Proc. 5th IEEE Int. Conf. on Data Eng., </booktitle> <pages> pp. 296-304. </pages>
Reference-contexts: In the remainder of this paper, we shall encounter several other structures that are based on this kind of partitioning. A disadvantage common to all k-d-trees is that for certain distributions no hyper-plane can be found which splits the data points evenly <ref> (Lomet and Salzberg 1989) </ref>. By introducing a more flexible partitioning scheme, the BSP-tree presented subsequently avoids this problem completely. 3.2.2 The BSP-Tree (Fuchs, Kedem, and Naylor 1980; Fuchs, Abram, and Grant 1983) Splitting the universe only along iso-oriented hyperplanes is a severe restriction in the schemes presented so far. <p> Tree-based access methods are usually a generalization of the B-tree to higher dimensions, such as the k-d-B-tree (Robinson 1981) or the hB-tree <ref> (Lomet and Salzberg 1989) </ref>. In the remainder of this section, we first discuss the approaches based on hashing, then continue with hierarchical (tree-based) access methods. <p> 1989), LSD-tree (Henrich, Six, and Widmayer 1989) fi fi twin grid file (Hutflesz, Six, and Widmayer 1988b) fi fi multilevel grid file (Whang and Krishnamurthy 1985), buddy tree (Seeger and Kriegel 1990) fi fi BSP-tree (Fuchs, Kedem, and Naylor 1980), BD-tree (Ohsawa and Sakauchi 1983), BANG file (Freeston 1987), hB-tree <ref> (Lomet and Salzberg 1989) </ref> Table 1: Classification of PAMs according to Seeger and Kriegel (1990) these heuristics is that objects that are located close to each other in original space should be stored close together on the disk with high probability. <p> Any such transformation maps a database of rectangles onto a database of 40 technique base type grid cell interval (box) sphere polyhedron transfor mation zkdB + -tree (Oren-stein 1986), BANG file (Free-ston 1987), hB-tree <ref> (Lomet and Salzberg 1989) </ref> all PAMs described in Section 4 except of the BANG file and the hB-tree P-tree (Ja-gadish 1990c) overlapping regions R-tree (Guttman 1984), R fl - tree (Beckmann et al. 1990), skd-tree (Ooi et al. 1987), GBD-tree (Ohsawa and Sakauchi 1990), Hilbert R-tree (Kamel and Faloutsos 1994), buddy <p> Gunther and Gaede (1996) compare the original cell tree as presented in (Gunther 1989) with the cell tree with oversize shelves (Gunther and Noltemeier 1991), the R fl - tree (Beckmann et al. 1990) and the hB-tree <ref> (Lomet and Salzberg 1989) </ref> for some real cartographic data. There is a slight performance advantage of the cell tree with oversize shelves compared to the R fl -tree and the hB-tree, but a major difference to the original cell tree.
Reference: <author> Lomet, D. B. and B. </author> <title> Salzberg (1990). The hB-tree: A multiattribute indexing method with good guaranteed performance. </title> <journal> ACM Trans. </journal> <note> Database Systems 15 (4), 625-658. Reprinted in (Stonebraker 1994). </note>
Reference: <author> Lomet, D. B. and B. </author> <title> Salzberg (1992). Access method concurrency with recovery. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 351-360. </pages>
Reference-contexts: other hB-tree nodes; * indicate that a part of this tree has been extracted. 37 In a recent Ph.D. thesis (Evangelidis 1994), the hB-tree has been extended to allow for concurrency and recovery by modifying the hB-tree in such a way that it becomes a special case of the -tree <ref> (Lomet and Salzberg 1992) </ref>. Consequently, the new structure is called hB tree (Evangelidis, Lomet, and Salzberg 1995). As a result of these modifications, the new structure can immediately take advantage of the -tree node consolidation algorithm.
Reference: <author> Matsuyama, T., L. V. Hao, and M. </author> <title> Nagao (1984). A file organization for geographic information systems based on spatial proximity. </title> <booktitle> Int. J. Comp. Vision, Graphics and Image Processing 26 (3), </booktitle> <pages> 303-318. </pages>
Reference-contexts: Analytical experiments indicate that PLOP-hashing is superior to the R-tree and R + -tree for uniform data distributions (Seeger and Kriegel 1988). 5.4 Methods Based on Clipping 5.4.1 The Extended K-D-Tree <ref> (Matsuyama, Hao, and Nagao 1984) </ref> One of the earliest extensions of the adaptive k-d-tree that was capable of handling extended objects was the extended k-d-tree. In contrast to the skd-tree (Section 5.3.5), the extended k-d-tree is based on clipping.
Reference: <author> Morton, G. </author> <year> (1966). </year> <title> A computer oriented geodetic data base and a new technique in file sequencing. </title> <publisher> IBM Ltd. </publisher>
Reference-contexts: That is, the way we label the cells determines how clustered adjacent cells are stored on secondary memory. enumeration of the cells (Samet 1989). Figure 25b shows the cell enumeration imposed by the Peano curve <ref> (Morton 1966) </ref>, also called quad codes (Finkel and Bentley 1974), locational codes (Abel and Smith 1983), or z-ordering (Orenstein and Merrett 1984). by interleaving the Gray codes of the x- and y-coordinates in a bitwise manner.
Reference: <author> Nelson, R. and H. </author> <title> Samet (1987). A population analysis for hierachical data structures. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 270-277. </pages>
Reference-contexts: The KD2B-tree outperforms the R-tree for all queries, whereas the sphere tree is inferior to the R-tree. Hoel and Samet (1992) compare the performance of the PMR-quadtree <ref> (Nelson and Samet 1987) </ref>, the R fl -tree, and the R + -tree for indexing line segments. The R + -tree shows the best insertion performance, whereas the R fl -tree occupies the least space. <p> those experimental comparisons, the following multidimensional access methods seem to be among the best performing ones (in alphabetical order): * buddy (hash) tree (Seeger and Kriegel 1990) * cell tree with oversize shelves (Gunther and Gaede 1996) * Hilbert R-tree (Kamel and Faloutsos 1994) * KD2B-tree (Oosterom 1990) * PMR-quadtree <ref> (Nelson and Samet 1987) </ref> * R + -tree (Sellis, Roussopoulos, and Faloutsos 1987) * R fl -tree (Beckmann, Kriegel, Schneider, and Seeger 1990) It cannot be emphasized enough, however, that any such "hit list" needs to be used with great care.
Reference: <author> Ng, R. T. and J. </author> <title> Han (1994). Efficient and effective clustering methods for spatial data mining. </title> <booktitle> In Proc. 20th Int. Conf. on Very Large Data Bases, </booktitle> <pages> pp. 144-154. </pages>
Reference-contexts: In summary, the leaf nodes of the internal k-d-trees are used to * reference a collection of data records; * reference other hB-tree nodes; * indicate that a part of this tree has been extracted. 37 In a recent Ph.D. thesis <ref> (Evangelidis 1994) </ref>, the hB-tree has been extended to allow for concurrency and recovery by modifying the hB-tree in such a way that it becomes a special case of the -tree (Lomet and Salzberg 1992). Consequently, the new structure is called hB tree (Evangelidis, Lomet, and Salzberg 1995).
Reference: <author> Ng, V. and T. </author> <title> Kameda (1993). Concurrent accesses to R-trees. </title> <editor> In D. Abel and B. C. Ooi (Eds.), </editor> <booktitle> Advances in Spatial Databases, Number 692 in LNCS, </booktitle> <address> Berlin/Heidelberg/New York, </address> <pages> pp. 142-161. </pages> <publisher> Springer-Verlag. </publisher>
Reference: <author> Nievergelt, J. </author> <year> (1989). </year> <title> 72 criteria for assessing and comparing spatial data structures. </title>
Reference: <author> In A. Buchmann, O. Gunther, T. R. Smith, and Y.-F. Wang (Eds.), </author> <title> Design and Implementation of Large Spatial Database Systems, </title> <booktitle> Number 409 in LNCS, </booktitle> <address> Berlin/Heidelberg/New York, </address> <pages> pp. 3-27. </pages> <publisher> Springer-Verlag. </publisher>
Reference: <author> Nievergelt, J. and K. </author> <title> Hinrichs (1987). Storage and access structures for geometric data bases. </title> <editor> In S. Ghosh, Y. Kambayashi, and K. Tanaka (Eds.), </editor> <booktitle> Proc. Int. Conf. on Foundations of Data Organization 1985 , New York. </booktitle> <publisher> Plenum Press. </publisher>
Reference-contexts: Figure 24c gives an example with p as the (one-dimensional) query point. Despite its conceptual elegance, this approach has several disadvantages. First, as the examples above already indicate, the formulation of point and range queries in dual space is usually much more complicated than in original space <ref> (Nievergelt and Hinrichs 1987) </ref>. Finite search regions may map into infinite search regions in dual space, and some more complex queries involving spatial predicates may not be expressible at all anymore (Henrich et al. 1989; Orenstein 1990; Pagel et al. 1993).
Reference: <author> Nievergelt, J., H. Hinterberger, and K. </author> <title> Sevcik (1981). The grid file: An adaptable, symmetric multikey file structure. </title> <editor> In A. Duijvestijn and P. Lockemann (Eds.), </editor> <booktitle> Proc. 3rd ECI Conf., Number 123 in LNCS, </booktitle> <address> Berlin/Heidelberg/New York, </address> <pages> pp. 236-251. </pages> <note> Springer-Verlag. 81 Nievergelt, </note> <author> J., H. Hinterberger, and K. C. </author> <title> Sevcik (1984). The grid file: An adaptable, symmetric multikey file structure. </title> <journal> ACM Trans. Database Systems 9 (1), </journal> <pages> 38-71. </pages>
Reference-contexts: We begin our presentation with several structures based on extendible hashing. Structures based on linear hashing are discussed in Section 4.1.5. The discussion of two hybrid methods, the BANG file and the buddy tree, is postponed until Section 4.2. 4.1.1 The Grid File <ref> (Nievergelt, Hinterberger, and Sevcik 1981) </ref> As a typical representative for an access method based on hashing, we will first discuss the grid file and some of its variants (Hinrichs 1985; Ouksel 1985; Whang and Krishnamurthy 1985; Six and Widmayer 1988; Blanken et al. 1990).
Reference: <author> Ohsawa, Y. and M. </author> <month> Sakauchi </month> <year> (1983). </year> <title> BD-tree: A new n-dimensional data structure with efficient dynamic characteristics. </title> <booktitle> In Proc. 9th World Computer Congress, IFIP 1983, </booktitle> <pages> pp. 539-544. </pages>
Reference-contexts: (Kriegel and Seeger 1988), quantile hashing (Kriegel and Seeger 1989), LSD-tree (Henrich, Six, and Widmayer 1989) fi fi twin grid file (Hutflesz, Six, and Widmayer 1988b) fi fi multilevel grid file (Whang and Krishnamurthy 1985), buddy tree (Seeger and Kriegel 1990) fi fi BSP-tree (Fuchs, Kedem, and Naylor 1980), BD-tree <ref> (Ohsawa and Sakauchi 1983) </ref>, BANG file (Freeston 1987), hB-tree (Lomet and Salzberg 1989) Table 1: Classification of PAMs according to Seeger and Kriegel (1990) these heuristics is that objects that are located close to each other in original space should be stored close together on the disk with high probability. <p> By doing so, Ouksel and Mayer improved the worst-case bounds from linear (as in the case of the BANG file) to logarithmic. 4.2.5 The BD-Tree <ref> (Ohsawa and Sakauchi 1983) </ref> The BD-tree (Ohsawa and Sakauchi 1983) is an early precursor of the BANG file. It stores binary encodings (called DZ-expressions) of excised data regions in a binary tree. Unfortunately, the authors do not describe how the directory is maintained on disk. <p> By doing so, Ouksel and Mayer improved the worst-case bounds from linear (as in the case of the BANG file) to logarithmic. 4.2.5 The BD-Tree <ref> (Ohsawa and Sakauchi 1983) </ref> The BD-tree (Ohsawa and Sakauchi 1983) is an early precursor of the BANG file. It stores binary encodings (called DZ-expressions) of excised data regions in a binary tree. Unfortunately, the authors do not describe how the directory is maintained on disk. <p> All affected entries are reinserted. According to the results reported in (Ooi 1990; Ooi et al. 1991) the skd-tree is competitive to the R-tree both in storage utilization and search efficiency. 5.3.6 The GBD-Tree (Ohsawa and Sakauchi 1990) The GBD-tree (generalized BD-tree) is an extension of the BD-tree <ref> (Ohsawa and Sakauchi 1983) </ref> that allows for secondary storage management and supports the management of extended objects. While the BD-tree is a binary tree, the GBD-tree is a balanced multiway tree that stores spatial objects as a hierarchy of minimum bounding 57 boxes.
Reference: <author> Ohsawa, Y. and M. </author> <month> Sakauchi </month> <year> (1990). </year> <title> A new tree type data structure with homogeneous node suitable for a very large spatial database. </title> <booktitle> In Proc. 6th IEEE Int. Conf. on Data Eng., </booktitle> <pages> pp. 296-303. </pages>
Reference-contexts: zkdB + -tree (Oren-stein 1986), BANG file (Free-ston 1987), hB-tree (Lomet and Salzberg 1989) all PAMs described in Section 4 except of the BANG file and the hB-tree P-tree (Ja-gadish 1990c) overlapping regions R-tree (Guttman 1984), R fl - tree (Beckmann et al. 1990), skd-tree (Ooi et al. 1987), GBD-tree <ref> (Ohsawa and Sakauchi 1990) </ref>, Hilbert R-tree (Kamel and Faloutsos 1994), buddy tree with overlapping (Seeger 1991) sphere tree (Oosterom 1990) P-tree (Schi-wietz 1993), KD2B-tree (Oosterom 1990) clipping EXCELL (Tamminen 1982), extended k-d-tree (Mat-suyama et al. 1984), R + -tree (Sellis et al. 1987), buddy tree with clipping (Seeger 1991) cell tree <p> All affected entries are reinserted. According to the results reported in (Ooi 1990; Ooi et al. 1991) the skd-tree is competitive to the R-tree both in storage utilization and search efficiency. 5.3.6 The GBD-Tree <ref> (Ohsawa and Sakauchi 1990) </ref> The GBD-tree (generalized BD-tree) is an extension of the BD-tree (Ohsawa and Sakauchi 1983) that allows for secondary storage management and supports the management of extended objects. <p> The latter point enables the GBD-tree to perform an insertion along a single path from the root to a leaf. However, no apparent advantage is gained with respect to search performance. The reported performance experiments <ref> (Ohsawa and Sakauchi 1990) </ref> compare only storage utilization and insertion performance with the R-tree. The most important comparison, that of search performance, is omitted. hand side shows the minimum bounding boxes (dotted or dashed) and the underlying intervals (Peano regions).
Reference: <author> Ooi, B. C. </author> <year> (1990). </year> <title> Efficient Query Processing in Geographic Information Systems. </title> <booktitle> Number 471 in LNCS. </booktitle> <address> Berlin/Heidelberg/New York: </address> <publisher> Springer-Verlag. </publisher>
Reference: <author> Ooi, B. C., R. Sacks-Davis, and K. J. </author> <month> McDonell </month> <year> (1987). </year> <title> Spatial k-d-tree: An indexing mechanism for spatial databases. </title> <booktitle> In Proc. IEEE COMPSAC Conf. </booktitle>
Reference-contexts: (box) sphere polyhedron transfor mation zkdB + -tree (Oren-stein 1986), BANG file (Free-ston 1987), hB-tree (Lomet and Salzberg 1989) all PAMs described in Section 4 except of the BANG file and the hB-tree P-tree (Ja-gadish 1990c) overlapping regions R-tree (Guttman 1984), R fl - tree (Beckmann et al. 1990), skd-tree <ref> (Ooi et al. 1987) </ref>, GBD-tree (Ohsawa and Sakauchi 1990), Hilbert R-tree (Kamel and Faloutsos 1994), buddy tree with overlapping (Seeger 1991) sphere tree (Oosterom 1990) P-tree (Schi-wietz 1993), KD2B-tree (Oosterom 1990) clipping EXCELL (Tamminen 1982), extended k-d-tree (Mat-suyama et al. 1984), R + -tree (Sellis et al. 1987), buddy tree with
Reference: <author> Ooi, B. C., R. Sacks-Davis, and K. J. </author> <month> McDonell </month> <year> (1991). </year> <title> Spatial indexing by binary decomposition and spatial bounding. </title> <journal> Information Systems J. </journal> <volume> 16 (2), </volume> <pages> 211-237. </pages>
Reference: <author> Oosterom, P. </author> <year> (1990). </year> <title> Reactive Data Structures for Geographic Information Systems. </title>
Reference-contexts: Section 4 except of the BANG file and the hB-tree P-tree (Ja-gadish 1990c) overlapping regions R-tree (Guttman 1984), R fl - tree (Beckmann et al. 1990), skd-tree (Ooi et al. 1987), GBD-tree (Ohsawa and Sakauchi 1990), Hilbert R-tree (Kamel and Faloutsos 1994), buddy tree with overlapping (Seeger 1991) sphere tree <ref> (Oosterom 1990) </ref> P-tree (Schi-wietz 1993), KD2B-tree (Oosterom 1990) clipping EXCELL (Tamminen 1982), extended k-d-tree (Mat-suyama et al. 1984), R + -tree (Sellis et al. 1987), buddy tree with clipping (Seeger 1991) cell tree (Gunther 1988) multiple layers multi-layer grid file (Six and Widmayer 1988), R-file (Hutflesz et al. 1990) Table 2: <p> file and the hB-tree P-tree (Ja-gadish 1990c) overlapping regions R-tree (Guttman 1984), R fl - tree (Beckmann et al. 1990), skd-tree (Ooi et al. 1987), GBD-tree (Ohsawa and Sakauchi 1990), Hilbert R-tree (Kamel and Faloutsos 1994), buddy tree with overlapping (Seeger 1991) sphere tree <ref> (Oosterom 1990) </ref> P-tree (Schi-wietz 1993), KD2B-tree (Oosterom 1990) clipping EXCELL (Tamminen 1982), extended k-d-tree (Mat-suyama et al. 1984), R + -tree (Sellis et al. 1987), buddy tree with clipping (Seeger 1991) cell tree (Gunther 1988) multiple layers multi-layer grid file (Six and Widmayer 1988), R-file (Hutflesz et al. 1990) Table 2: Classification of SAMs Based on Kriegel <p> trying to summarize all those experimental comparisons, the following multidimensional access methods seem to be among the best performing ones (in alphabetical order): * buddy (hash) tree (Seeger and Kriegel 1990) * cell tree with oversize shelves (Gunther and Gaede 1996) * Hilbert R-tree (Kamel and Faloutsos 1994) * KD2B-tree <ref> (Oosterom 1990) </ref> * PMR-quadtree (Nelson and Samet 1987) * R + -tree (Sellis, Roussopoulos, and Faloutsos 1987) * R fl -tree (Beckmann, Kriegel, Schneider, and Seeger 1990) It cannot be emphasized enough, however, that any such "hit list" needs to be used with great care.
Reference: <author> Ph. D. </author> <type> thesis, </type> <institution> University of Leiden, The Netherlands. Oracle Inc. </institution> <year> (1995). </year> <title> Oracle 7 multidimension: Advances in relational database technology for spatial data management. </title> <type> White Paper. </type>
Reference: <author> Orenstein, J. </author> <year> (1982). </year> <title> Multidimensional tries used for associative searching. </title> <booktitle> Information Processing Letters 14 (4), </booktitle> <pages> 150-157. </pages>
Reference-contexts: Property 2 tries to achieve a high selectivity at the directory level. Properties 1 and 3 make sure that the growth of the directory remains linear. To avoid the deadlock problem of the grid file, the buddy tree uses k-d-tries <ref> (Orenstein 1982) </ref> to partition the universe. Only a restricted number of buddies are admitted, namely those that could have been obtained by some recursive halving of the universe.
Reference: <author> Orenstein, J. </author> <year> (1983). </year> <title> A dynamic file for random and sequential accessing. </title> <booktitle> In Proc. 9th Int. Conf. on Very Large Data Bases, </booktitle> <pages> pp. 132-141. </pages>
Reference: <author> Orenstein, J. </author> <year> (1989a). </year> <title> Redundancy in spatial databases. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 294-305. </pages>
Reference-contexts: Second, the accuracy of the approximation should be high, since this reduces the expected number of false drops (i.e., objects that are paged in from secondary memory, only to find out that they do not satisfy the search predicate). For a detailed discussion of this problem, see <ref> (Orenstein 1989a) </ref>, (Orenstein 1989b), and (Gaede 1995b). By enhancing the z-ordering encoding with a single bit that reflects for each Peano region whether it is enclosed in the extended object or not, it is possible to improve the performance of z-ordering even further (Gaede 1995a).
Reference: <author> Orenstein, J. </author> <year> (1989b). </year> <title> Strategies for optimizing the use of redundancy in spatial databases. </title> <editor> In A. Buchmann, O. Gunther, T. R. Smith, and Y.-F. Wang (Eds.), </editor> <title> Design and Implementation of Large Spatial Database Systems, </title> <booktitle> Number 409 in LNCS, </booktitle> <address> Berlin/Heidelberg/New York, </address> <pages> pp. 115-134. </pages> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Second, the accuracy of the approximation should be high, since this reduces the expected number of false drops (i.e., objects that are paged in from secondary memory, only to find out that they do not satisfy the search predicate). For a detailed discussion of this problem, see (Orenstein 1989a), <ref> (Orenstein 1989b) </ref>, and (Gaede 1995b). By enhancing the z-ordering encoding with a single bit that reflects for each Peano region whether it is enclosed in the extended object or not, it is possible to improve the performance of z-ordering even further (Gaede 1995a).
Reference: <author> Orenstein, J. </author> <year> (1990). </year> <title> A comparison of spatial query processing techniques for native and parameter space. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 343-352. </pages>
Reference: <author> Orenstein, J. and T. H. </author> <title> Merrett (1984). A class of data structures for associative searching. </title> <booktitle> In Proc. 3rd ACM SIGACT-SIGMOD Symp. on Principles of Database Systems, </booktitle> <pages> pp. 181-190. </pages> <note> 82 Orenstein, </note> <author> J. A. </author> <year> (1986). </year> <title> Spatial query processing in an object-oriented database system. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 326-333. </pages>
Reference-contexts: Because this structure can also be used as an access method for extended objects, we delay its discussion until Section 5.3.7. Another variant that has better order-preserving properties than MOLHPE has been reported by Hutflesz, Six, and Widmayer (1988a). Their dynamic z-hashing uses a space-filling technique called z-ordering <ref> (Orenstein and Merrett 1984) </ref> to guarantee that points that are located close to each other are also stored close together on the disk. Z-ordering will be described in detail in Section 5.2.1. <p> Figure 25b shows the cell enumeration imposed by the Peano curve (Morton 1966), also called quad codes (Finkel and Bentley 1974), locational codes (Abel and Smith 1983), or z-ordering <ref> (Orenstein and Merrett 1984) </ref>. by interleaving the Gray codes of the x- and y-coordinates in a bitwise manner. <p> In particular, Oracle has adapted and integrated the technique into its database system (Oracle Inc. 1995). 5.2.1 Z-Ordering <ref> (Orenstein and Merrett 1984) </ref> A simple algorithm to obtain the z-ordering representation of a given extended object can be described as follows. Starting from the (fixed) universe containing the data object, space is split recursively into two subspaces of equal size by (d 1)-dimensional hyperplanes.
Reference: <author> Otoo, E. J. </author> <year> (1984). </year> <title> A mapping function for the directory of a multidimensional extendible hashing. </title> <booktitle> In Proc. 10th Int. Conf. on Very Large Data Bases, </booktitle> <pages> pp. 493-506. </pages>
Reference-contexts: The goal of all 22 property point access method intervals complete disjoint fi fi fi quadtree (Finkel and Bentley 1974; Samet 1984), k-d-B tree (Robinson 1981), EX-CELL (Tamminen 1982), interpolation hashing (Burkhard 1983), multidimensional extendible hashing <ref> (Otoo 1984) </ref>, grid file (Niev-ergelt, Hinterberger, and Sevcik 1984), balanced multidimensional two-level grid file (Hin-richs 1985), interpolation-based grid file (Ouk-sel 1985), extendible hash tree (Otoo 1986), MOLHPE (Kriegel and Seeger 1986), PLOP-hashing (Kriegel and Seeger 1988), quantile hashing (Kriegel and Seeger 1989), LSD-tree (Henrich, Six, and Widmayer 1989) fi fi twin
Reference: <author> Otoo, E. J. </author> <year> (1985). </year> <title> Symmetric dynamic index maintenance scheme. </title> <booktitle> In Proc. Int. Conf. on Foundations of Data Organization, </booktitle> <pages> pp. 283-296. </pages>
Reference: <author> Otoo, E. J. </author> <year> (1986). </year> <title> Balanced multidimensional extendible hash tree. </title> <booktitle> In Proc. 5th ACM SIGACT-SIGMOD Symp. on Principles of Database Systems, </booktitle> <pages> pp. 100-113. </pages>
Reference-contexts: complete disjoint fi fi fi quadtree (Finkel and Bentley 1974; Samet 1984), k-d-B tree (Robinson 1981), EX-CELL (Tamminen 1982), interpolation hashing (Burkhard 1983), multidimensional extendible hashing (Otoo 1984), grid file (Niev-ergelt, Hinterberger, and Sevcik 1984), balanced multidimensional two-level grid file (Hin-richs 1985), interpolation-based grid file (Ouk-sel 1985), extendible hash tree <ref> (Otoo 1986) </ref>, MOLHPE (Kriegel and Seeger 1986), PLOP-hashing (Kriegel and Seeger 1988), quantile hashing (Kriegel and Seeger 1989), LSD-tree (Henrich, Six, and Widmayer 1989) fi fi twin grid file (Hutflesz, Six, and Widmayer 1988b) fi fi multilevel grid file (Whang and Krishnamurthy 1985), buddy tree (Seeger and Kriegel 1990) fi fi
Reference: <author> Ouksel, M. </author> <year> (1985). </year> <title> The interpolation based grid file. </title> <booktitle> In Proc. 4th ACM SIGACT-SIGMOD Symp. on Principles of Database Systems, </booktitle> <pages> pp. 20-27. </pages>
Reference-contexts: Z-ordering will be described in detail in Section 5.2.1. One disadvantage of z-hashing is that a number of useless data blocks will be generated, similar as in the interpolation-based grid file <ref> (Ouksel 1985) </ref>. On the other hand, z-hashing allows to read three to four buckets in a row on the average before a seek is required, whereas MOLHPE manages to read only one (Hutflesz et al. 1988a).
Reference: <author> Ouksel, M. and P. </author> <title> Scheuermann (1983). Storage mappings for multidimensional linear dynamic hashing. </title> <booktitle> In Proc. 2th ACM SIGACT-SIGMOD Symp. on Principles of Database Systems, </booktitle> <pages> pp. 90-105. </pages>
Reference-contexts: It therefore occupies relatively little storage compared to extendible hashing, and it is usually possible to keep all relevant information in main memory. 28 Several different strategies have been proposed to perform the required address computation. While early proposals <ref> (Ouksel and Scheuermann 1983) </ref> failed to support range queries, Kriegel and Seeger (1986) later proposed a variant of linear hashing called multidimensional order-preserving linear hashing with partial expansions (MOLHPE). This structure is based on the idea of partially extending the buckets without expanding the file size at the same time.
Reference: <author> Ouksel, M. A. and O. </author> <title> Mayer (1992). A robust and efficient spatial data structure. </title> <journal> Acta Informatica 29, </journal> <pages> 335-373. </pages>
Reference: <author> Overmars, M. H., M. H. Smid, T. Berg, and M. J. van Kreveld (1990). </author> <title> Maintaining range trees in secondary memory: Part I: Partitions. </title> <journal> Acta Informatica 27, </journal> <pages> 423-452. </pages>
Reference: <author> Pagel, B. U., H.-W. Six, and H. </author> <month> Toben </month> <year> (1993). </year> <title> The transformation technique for spatial objects revisited. </title> <editor> In D. Abel and B. C. Ooi (Eds.), </editor> <booktitle> Advances in Spatial Databases, Number 692 in LNCS, </booktitle> <address> Berlin/Heidelberg/New York, </address> <pages> pp. 73-88. </pages> <publisher> Springer-Verlag. </publisher>
Reference-contexts: A minor problem with overlapping regions concerns ambiguities during insertion. If we insert a new object, we could in principle enlarge any subspace to accommodate it. To optimize performance, there exist several strategies <ref> (Pagel, Six, Toben, and Widmayer 1993) </ref>. For example, we could try to find the subspace that causes minimal additional overlap, or the one that requires the least enlargement. If it takes too long to compute the optimal strategy for every insertion, some heuristic may be used.
Reference: <author> Pagel, B. U., H.-W. Six, H. Toben, and P. </author> <title> Widmayer (1993). Towards an analysis of range query performance in spatial data structures. </title> <booktitle> In Proc. 12th ACM SIGACT-SIGMOD Symp. on Principles of Database Systems, </booktitle> <pages> pp. 214-221. </pages>
Reference-contexts: A minor problem with overlapping regions concerns ambiguities during insertion. If we insert a new object, we could in principle enlarge any subspace to accommodate it. To optimize performance, there exist several strategies <ref> (Pagel, Six, Toben, and Widmayer 1993) </ref>. For example, we could try to find the subspace that causes minimal additional overlap, or the one that requires the least enlargement. If it takes too long to compute the optimal strategy for every insertion, some heuristic may be used.
Reference: <author> Pagel, B. U., H.-W. Six, and M. </author> <month> Winter </month> <year> (1995). </year> <title> Window query optimal clustering of spatial objects. </title> <booktitle> In Proc. 14th ACM SIGACT-SIGMOD Symp. on Principles of Database Systems, </booktitle> <pages> pp. 86-94. </pages>
Reference: <author> Papadias, D., Y. Theodoridis, T. Sellis, and M. J. </author> <title> Egenhofer (1995). Topological relations in the world of minimum bounding rectangles: A study with R-trees. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 92-103. </pages> <note> 83 Peloux, </note> <author> J., G. R. de St Michel, and M. </author> <title> Scholl (1994). Evaluation of spatial indices implemented with the O 2 DBMS. </title> <institution> Ingenierie des systemes d'information 6. </institution>
Reference: <author> Preparata, F. P. and M. I. </author> <title> Shamos (1985). Computational geometry. </title> <address> New York, NY: </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The most preferable rectangle is the square, since this is the most compact rectangular representation. * Storage utilization should be maximized. The improved splitting algorithm of Beckmann et al. (1990) is based on the plane-sweep paradigm <ref> (Preparata and Shamos 1985) </ref>. In d dimensions, its time complexity is O (d n log n) for a node with n intervals. In summary, the R fl -tree differs from the R-tree mainly in the insertion algorithm; deletion and searching are essentially unchanged.
Reference: <author> Regnier, M. </author> <year> (1985). </year> <title> Analysis of the grid file algorithms. </title> <journal> BIT 25, </journal> <pages> 335-357. </pages>
Reference-contexts: Both systems are not able to eliminate completely the possibility of a deadlock, in which case no merging is feasible because the resulting bucket region would not be box-shaped (Hinrichs 1985; Seeger and Kriegel 1990). For a theoretical analysis of the grid file and some of its variants see <ref> (Regnier 1985) </ref> or (Becker 1992). Regnier shows in particular that the average space occupancy of the data buckets is about 69 % (ln 2) for uniformly distributed data. 4.1.2 EXCELL (Tamminen 1982) Closely related to the grid file is the EXCELL method (EXtendible CELL) proposed by Tamminen (1982).
Reference: <author> Robinson, J. T. </author> <year> (1981). </year> <title> The K-D-B-tree: A search structure for large multidimensional dynamic indexes. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 10-18. </pages>
Reference-contexts: Tree-based access methods are usually a generalization of the B-tree to higher dimensions, such as the k-d-B-tree <ref> (Robinson 1981) </ref> or the hB-tree (Lomet and Salzberg 1989). In the remainder of this section, we first discuss the approaches based on hashing, then continue with hierarchical (tree-based) access methods. <p> The goal of all 22 property point access method intervals complete disjoint fi fi fi quadtree (Finkel and Bentley 1974; Samet 1984), k-d-B tree <ref> (Robinson 1981) </ref>, EX-CELL (Tamminen 1982), interpolation hashing (Burkhard 1983), multidimensional extendible hashing (Otoo 1984), grid file (Niev-ergelt, Hinterberger, and Sevcik 1984), balanced multidimensional two-level grid file (Hin-richs 1985), interpolation-based grid file (Ouk-sel 1985), extendible hash tree (Otoo 1986), MOLHPE (Kriegel and Seeger 1986), PLOP-hashing (Kriegel and Seeger 1988), quantile hashing (Kriegel <p> For SAMs this is not necessarily true; as we will see in Section 5, overlapping regions and partial coverage are important techniques to improve the search performance of SAMs. 4.2.1 The K-D-B-Tree <ref> (Robinson 1981) </ref> The k-d-B-tree combines the properties of the adaptive k-d-tree (Bentley and Friedman 1979) and the B-tree (Comer 1979) to handle multidimensional points. It partitions the universe in the manner of an adaptive k-d-tree and associates the resulting subspaces with tree nodes. <p> If it is not full, the entry is inserted. Otherwise, it is split and about half of the entries are shifted to the new data node. In order to find an optimal split, various heuristics are available <ref> (Robinson 1981) </ref>. If the parent index node does not have enough space left to accommodate the new entries, a new page is allocated and the index node is split by a hyperplane.
Reference: <author> Rotem, D. </author> <year> (1991). </year> <title> Spatial join indices. </title> <booktitle> In Proc. 7th IEEE Int. Conf. on Data Eng., </booktitle> <pages> pp. 10-18. </pages>
Reference: <author> Roussopoulos, N. and D. </author> <month> Leifker </month> <year> (1984). </year> <title> An introduction to PSQL: A pictoral structured query language. </title> <booktitle> In Proc. IEEE Workshop on Visual Languages. </booktitle>
Reference: <author> Roussopoulos, N. and D. </author> <month> Leifker </month> <year> (1985). </year> <title> Direct spatial search on pictorial databases using packed R-trees. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 17-31. </pages>
Reference-contexts: A well-known example where this degenerate behavior has been observed is the R-tree (Guttman 1984; Greene 1989). Several modifications have been presented to mitigate these problems, including a technique to minimize the overlap <ref> (Roussopoulos and Leifker 1985) </ref>; see Section 5.3.1 for a detailed discussion. A minor problem with overlapping regions concerns ambiguities during insertion. If we insert a new object, we could in principle enlarge any subspace to accommodate it. To optimize performance, there exist several strategies (Pagel, Six, Toben, and Widmayer 1993). <p> For node splitting, for example, Guttman suggests several algorithms, including a simpler one with linear time complexity and a more elaborate one with quadratic complexity. Later work by other researchers led to the development of more sophisticated policies. The packed R-tree <ref> (Roussopoulos and Leifker 1985) </ref>, for example, computes an optimal partitioning of the universe and a corresponding minimal R-tree for a given scenario. However, it requires all data to be known a priori.
Reference: <author> Sagan, H. </author> <year> (1994). </year> <title> Space-Filling Curves. </title> <address> Berlin/Heidelberg/New York: </address> <publisher> Springer - Verlag. </publisher>
Reference-contexts: Performance studies by Henrich and Six (1991) confirm the claim that the LSD-tree adapts well to non-uniform distributions, which is of particular relevance in this context. It also contains a mechanism to avoid searching large empty query spaces, which may occur as a result of the transformation. Space-filling curves <ref> (Sagan 1994) </ref>, on the other hand, are a very different type of transformation approach that seems to suffer less from some of these drawbacks. <p> For the organization of this total order one could then use a one-dimensional access method (such as a B + -tree), which may provide good performance at least for some spatial queries. Research on the underlying mapping problem goes back well into the last century; see <ref> (Sagan 1994) </ref> for a survey. With regard to its relevance for spatial searching, Samet (1989) provides a good overview of the subject. One thing all proposals have in common is that they first partition the universe with a grid.
Reference: <author> Samet, H. </author> <year> (1984). </year> <title> The quadtree and related hierachical data structure. </title> <booktitle> ACM Computing Surveys 16 (2), </booktitle> <pages> 187-260. </pages>
Reference-contexts: The deletion of a point requires the restructuring of the subtree below the corresponding quadtree node. A simple way to achieve this is to reinsert all points into the subtree. Figure 13 shows a two-dimensional point quadtree for the running example. 20 Another popular variant is the region quadtree <ref> (Samet 1984) </ref>. Region quadtrees are based on a regular decomposition of the universe, i.e., the 2 d subspaces resulting from a partition are always of equal size. This greatly facilitates searches. For the running example, Figure 14 shows how region quadtrees can be used to represent sets of points.
Reference: <author> Samet, H. </author> <year> (1988). </year> <title> Hierarchical representation of collections of small rectangles. </title> <booktitle> ACM Computing Surveys 20 (4), </booktitle> <pages> 271-309. </pages>
Reference-contexts: These edges or vertices (which together form an exact description of the data objects) are then attached to the leaves of the tree. Another class of quadtree structures has been designed for the management of collections of rectangles; see <ref> (Samet 1988) </ref> for a survey. 4 Point Access Methods The multidimensional data structures presented in the previous section do not take secondary storage management explicitly into account. They have originally been designed for main memory applications where all the data is available without accessing the disk.
Reference: <author> Samet, H. </author> <year> (1989). </year> <title> The design and analysis of spatial data structures. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley. </publisher>
Reference-contexts: Note that while the labeling is independent of the given data, it is obviously critical for the preservation of proximity in one-dimensional address space. That is, the way we label the cells determines how clustered adjacent cells are stored on secondary memory. enumeration of the cells <ref> (Samet 1989) </ref>. Figure 25b shows the cell enumeration imposed by the Peano curve (Morton 1966), also called quad codes (Finkel and Bentley 1974), locational codes (Abel and Smith 1983), or z-ordering (Orenstein and Merrett 1984). by interleaving the Gray codes of the x- and y-coordinates in a bitwise manner.
Reference: <author> Samet, H. </author> <year> (1990). </year> <title> Applications of Spatial Data Structures. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley. </publisher>
Reference: <author> Samet, H. and R. E. </author> <title> Webber (1985). Storing a collection of polygons using quadtrees. </title> <journal> ACM Trans. </journal> <volume> Graphics 4 (3), </volume> <pages> 182-222. </pages>
Reference-contexts: For the running example, Figure 14 shows how region quadtrees can be used to represent sets of points. Here the threshold for the number of points in any given subspace was set to one. In more complex versions of the region quadtree, such as the PM quadtree <ref> (Samet and Webber 1985) </ref>, it is also possible to store polygonal data directly. PM quadtrees divide the quadtree regions (and the data objects in them) until they contain only a small number of polygon edges or vertices.
Reference: <author> Schiwietz, M. </author> <year> (1993). </year> <institution> Speicherung und Anfragebearbeitung komplexer Geo-Objekte. </institution>
Reference-contexts: Storing a 10-dimensional interval, on the other hand, requires 20 numbers, i.e., five times as much. Another drawback of the JP-tree is the fixed orientation of the hyperplanes. Figure 30 shows the running example for m = 4. 5.3.4 The P-Tree <ref> (Schiwietz 1993) </ref> The P-Tree by Schiwietz, here called SP-tree, chooses a slightly different approach for storing polygonal objects. It tries to combine the advantages of the cell tree and the R fl -tree for the two-dimensional case, while avoiding the drawbacks of both methods.
Reference: <author> Ph. D. </author> <type> thesis, </type> <institution> Ludwig-Maximilians-Universitat Munchen, Germany. </institution> <note> In German. </note>
Reference: <author> Schneider, R. and H.-P. </author> <title> Kriegel (1992). The TR fl -tree: A new representation of polygonal objects supporting spatial queries and operations. </title> <booktitle> In Proc. 7th Workshop on Computational Geometry, Number 553 in LNCS, </booktitle> <address> Berlin/Heidelberg/New York, </address> <pages> pp. 249-264. </pages> <note> Springer-Verlag. 84 Scholl, </note> <author> M. and A. </author> <month> Voisard </month> <year> (1989). </year> <title> Thematic map modeling. </title> <editor> In A. Buchmann, O. Gunther, T. R. Smith, and Y.-F. Wang (Eds.), </editor> <title> Design and Implementation of Large Spatial Database Systems, </title> <booktitle> Number 409 in LNCS, </booktitle> <address> Berlin/Heidelberg/New York. </address> <publisher> Springer-Verlag. </publisher>
Reference: <author> Seeger, B. </author> <year> (1991). </year> <title> Performance comparison of segment access methods implemented on top of the buddy-tree. </title> <booktitle> In Advances in Spatial Databases, Number 525 in LNCS, </booktitle> <address> Berlin/Heidelberg/New York, </address> <pages> pp. 277-296. </pages> <publisher> Springer-Verlag. </publisher>
Reference-contexts: all PAMs described in Section 4 except of the BANG file and the hB-tree P-tree (Ja-gadish 1990c) overlapping regions R-tree (Guttman 1984), R fl - tree (Beckmann et al. 1990), skd-tree (Ooi et al. 1987), GBD-tree (Ohsawa and Sakauchi 1990), Hilbert R-tree (Kamel and Faloutsos 1994), buddy tree with overlapping <ref> (Seeger 1991) </ref> sphere tree (Oosterom 1990) P-tree (Schi-wietz 1993), KD2B-tree (Oosterom 1990) clipping EXCELL (Tamminen 1982), extended k-d-tree (Mat-suyama et al. 1984), R + -tree (Sellis et al. 1987), buddy tree with clipping (Seeger 1991) cell tree (Gunther 1988) multiple layers multi-layer grid file (Six and Widmayer 1988), R-file (Hutflesz et <p> al. 1987), GBD-tree (Ohsawa and Sakauchi 1990), Hilbert R-tree (Kamel and Faloutsos 1994), buddy tree with overlapping <ref> (Seeger 1991) </ref> sphere tree (Oosterom 1990) P-tree (Schi-wietz 1993), KD2B-tree (Oosterom 1990) clipping EXCELL (Tamminen 1982), extended k-d-tree (Mat-suyama et al. 1984), R + -tree (Sellis et al. 1987), buddy tree with clipping (Seeger 1991) cell tree (Gunther 1988) multiple layers multi-layer grid file (Six and Widmayer 1988), R-file (Hutflesz et al. 1990) Table 2: Classification of SAMs Based on Kriegel et al. (1991) 4-dimensional points, which can then be managed by one of the PAMs discussed in the previous section.
Reference: <author> Seeger, B. and H.-P. </author> <title> Kriegel (1988). Techniques for design and implementation of spatial access methods. </title> <booktitle> In Proc. 14th Int. Conf. on Very Large Data Bases, </booktitle> <pages> pp. 360-371. </pages>
Reference-contexts: Bentley 1974; Samet 1984), k-d-B tree (Robinson 1981), EX-CELL (Tamminen 1982), interpolation hashing (Burkhard 1983), multidimensional extendible hashing (Otoo 1984), grid file (Niev-ergelt, Hinterberger, and Sevcik 1984), balanced multidimensional two-level grid file (Hin-richs 1985), interpolation-based grid file (Ouk-sel 1985), extendible hash tree (Otoo 1986), MOLHPE (Kriegel and Seeger 1986), PLOP-hashing <ref> (Kriegel and Seeger 1988) </ref>, quantile hashing (Kriegel and Seeger 1989), LSD-tree (Henrich, Six, and Widmayer 1989) fi fi twin grid file (Hutflesz, Six, and Widmayer 1988b) fi fi multilevel grid file (Whang and Krishnamurthy 1985), buddy tree (Seeger and Kriegel 1990) fi fi BSP-tree (Fuchs, Kedem, and Naylor 1980), BD-tree (Ohsawa <p> Since the region boundaries are not necessarily simple binary intervals, a small directory is needed. In exchange, skewed input data can be maintained as efficiently as uniformly distributed data. PLOP (piecewise linear order-preserving) hashing has been proposed by the same authors one year later <ref> (Kriegel and Seeger 1988) </ref>. Because this structure can also be used as an access method for extended objects, we delay its discussion until Section 5.3.7. Another variant that has better order-preserving properties than MOLHPE has been reported by Hutflesz, Six, and Widmayer (1988a). <p> Among the approaches similar to the GBD-tree are an extension of the buddy tree by Seeger (1991), and the extension of the BANG file to handle extended spatial objects (Freeston 1990b). 5.3.7 PLOP-Hashing (Kriegel and Seeger 1988; Seeger and Kriegel 1988) Piecewise linear order preserving (PLOP) hashing <ref> (Seeger and Kriegel 1988) </ref> is a variant of hashing that allows the storage of extended objects without transforming them to points. An earlier version of this structure (Kriegel and Seeger 1988) was only capable of handling multidimensional point data. We shall focus on the former proposal. <p> An earlier version of this structure <ref> (Kriegel and Seeger 1988) </ref> was only capable of handling multidimensional point data. We shall focus on the former proposal. PLOP-hashing partitions the universe similarly to the grid file; extended objects may 58 span more than one directory cell. Hyperplanes extend along the axes of the data space. <p> It should further be noted that PLOP-hashing can easily be modified so that it supports clipping rather than overlapping regions. Analytical experiments indicate that PLOP-hashing is superior to the R-tree and R + -tree for uniform data distributions <ref> (Seeger and Kriegel 1988) </ref>. 5.4 Methods Based on Clipping 5.4.1 The Extended K-D-Tree (Matsuyama, Hao, and Nagao 1984) One of the earliest extensions of the adaptive k-d-tree that was capable of handling extended objects was the extended k-d-tree.
Reference: <author> Seeger, B. and H.-P. </author> <title> Kriegel (1990). The buddy-tree: An efficient and robust access method for spatial data base systems. </title> <booktitle> In Proc 16th Int. Conf. on Very Large Data Bases, </booktitle> <pages> pp. 590-601. </pages>
Reference-contexts: (Ouk-sel 1985), extendible hash tree (Otoo 1986), MOLHPE (Kriegel and Seeger 1986), PLOP-hashing (Kriegel and Seeger 1988), quantile hashing (Kriegel and Seeger 1989), LSD-tree (Henrich, Six, and Widmayer 1989) fi fi twin grid file (Hutflesz, Six, and Widmayer 1988b) fi fi multilevel grid file (Whang and Krishnamurthy 1985), buddy tree <ref> (Seeger and Kriegel 1990) </ref> fi fi BSP-tree (Fuchs, Kedem, and Naylor 1980), BD-tree (Ohsawa and Sakauchi 1983), BANG file (Freeston 1987), hB-tree (Lomet and Salzberg 1989) Table 1: Classification of PAMs according to Seeger and Kriegel (1990) these heuristics is that objects that are located close to each other in original <p> In order to improve the search performance for non-point data and range queries, Henrich and Moller (1995) suggest to store auxiliary information on the existing data regions along with the index entries of the LSD-tree. 4.2.3 The Buddy Tree <ref> (Seeger and Kriegel 1990) </ref> The buddy tree is a dynamic hashing scheme with a tree-structured directory. The tree is constructed by consecutive insertion, cutting the universe recursively into two parts of equal size with iso-oriented hyperplanes. <p> Ng and Kameda (1993, 1994) discuss how to support concurrency and recovery in R-trees. 5.3.2 The R fl -Tree <ref> (Beckmann, Kriegel, Schneider, and Seeger 1990) </ref> Based on a careful study of the R-tree behavior under different data distributions, Beckmann et al. (1990) identified several weaknesses of the original algorithms. In particular, they confirmed the observation of Roussopoulos and Leifker (1985) that the insertion phase is critical for search performance. <p> These results are in accordance with those of Abel and Mark (1990) In trying to summarize all those experimental comparisons, the following multidimensional access methods seem to be among the best performing ones (in alphabetical order): * buddy (hash) tree <ref> (Seeger and Kriegel 1990) </ref> * cell tree with oversize shelves (Gunther and Gaede 1996) * Hilbert R-tree (Kamel and Faloutsos 1994) * KD2B-tree (Oosterom 1990) * PMR-quadtree (Nelson and Samet 1987) * R + -tree (Sellis, Roussopoulos, and Faloutsos 1987) * R fl -tree (Beckmann, Kriegel, Schneider, and Seeger 1990) It <p> alphabetical order): * buddy (hash) tree (Seeger and Kriegel 1990) * cell tree with oversize shelves (Gunther and Gaede 1996) * Hilbert R-tree (Kamel and Faloutsos 1994) * KD2B-tree (Oosterom 1990) * PMR-quadtree (Nelson and Samet 1987) * R + -tree (Sellis, Roussopoulos, and Faloutsos 1987) * R fl -tree <ref> (Beckmann, Kriegel, Schneider, and Seeger 1990) </ref> It cannot be emphasized enough, however, that any such "hit list" needs to be used with great care. Clever programming can often make up for inherent deficiencies of an access method. <p> Among other things, their model reveals the importance of the perimeter as a criterion for node splitting, which has been intuitively anticipated by the inventors of the R fl -tree <ref> (Beckmann, Kriegel, Schneider, and Seeger 1990) </ref>. The central formula of Pagel et al. (1993) to compute the number of disk accesses in an R-tree has been found independently by Kamel and Faloutsos (1993). Faloutsos and Kamel (1994) later refined this formula by using properties of the data set.
Reference: <author> Sellis, T., N. Roussopoulos, and C. </author> <title> Faloutsos (1987). The R + -tree: A dynamic index for multi-dimensional objects. </title> <booktitle> In Proc. 13th Int. Conf. on Very Large Data Bases, </booktitle> <pages> pp. 507-518. </pages>
Reference-contexts: tree (Beckmann et al. 1990), skd-tree (Ooi et al. 1987), GBD-tree (Ohsawa and Sakauchi 1990), Hilbert R-tree (Kamel and Faloutsos 1994), buddy tree with overlapping (Seeger 1991) sphere tree (Oosterom 1990) P-tree (Schi-wietz 1993), KD2B-tree (Oosterom 1990) clipping EXCELL (Tamminen 1982), extended k-d-tree (Mat-suyama et al. 1984), R + -tree <ref> (Sellis et al. 1987) </ref>, buddy tree with clipping (Seeger 1991) cell tree (Gunther 1988) multiple layers multi-layer grid file (Six and Widmayer 1988), R-file (Hutflesz et al. 1990) Table 2: Classification of SAMs Based on Kriegel et al. (1991) 4-dimensional points, which can then be managed by one of the PAMs <p> seem to be among the best performing ones (in alphabetical order): * buddy (hash) tree (Seeger and Kriegel 1990) * cell tree with oversize shelves (Gunther and Gaede 1996) * Hilbert R-tree (Kamel and Faloutsos 1994) * KD2B-tree (Oosterom 1990) * PMR-quadtree (Nelson and Samet 1987) * R + -tree <ref> (Sellis, Roussopoulos, and Faloutsos 1987) </ref> * R fl -tree (Beckmann, Kriegel, Schneider, and Seeger 1990) It cannot be emphasized enough, however, that any such "hit list" needs to be used with great care. Clever programming can often make up for inherent deficiencies of an access method.
Reference: <author> Six, H. and P. </author> <title> Widmayer (1988). Spatial searching in geometric databases. </title> <booktitle> In Proc. 4th IEEE Int. Conf. on Data Eng., </booktitle> <pages> pp. 496-503. </pages>
Reference-contexts: Faloutsos 1994), buddy tree with overlapping (Seeger 1991) sphere tree (Oosterom 1990) P-tree (Schi-wietz 1993), KD2B-tree (Oosterom 1990) clipping EXCELL (Tamminen 1982), extended k-d-tree (Mat-suyama et al. 1984), R + -tree (Sellis et al. 1987), buddy tree with clipping (Seeger 1991) cell tree (Gunther 1988) multiple layers multi-layer grid file <ref> (Six and Widmayer 1988) </ref>, R-file (Hutflesz et al. 1990) Table 2: Classification of SAMs Based on Kriegel et al. (1991) 4-dimensional points, which can then be managed by one of the PAMs discussed in the previous section. <p> Performance results of Gunther and Gaede (1996) show substantial improvements compared to the cell tree without oversize shelves. 5.5 Methods Based on Multiple Layers 5.5.1 The Multi-Layer Grid File <ref> (Six and Widmayer 1988) </ref> Yet another variant of the grid file capable of handling extended objects is the multilayer grid file (not to be confused with the multilevel grid file of Whang and Krishna-murthy (1985)). The multi-layer grid file consists of an ordered sequence of grid layers.
Reference: <author> Smid, M. H. and M. H. </author> <month> Overmars </month> <year> (1990). </year> <title> Maintaining range trees in secondary memory part II: Lower bounds. </title> <journal> Acta Informatica 27, </journal> <pages> 453-480. </pages>
Reference: <author> Smith, T. R. and P. </author> <title> Gao (1990). Experimental performance evaluations on spatial access methods. </title> <booktitle> In Proc. 4th Int. Symp. on Spatial Data Handling, </booktitle> <address> Zurich, </address> <pages> pp. 991-1002. </pages>
Reference: <author> Stonebraker, M. (Ed.) </author> <year> (1994). </year> <booktitle> Readings in Database Systems. </booktitle> <address> San Mateo: </address> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Stonebraker, M., T. Sellis, and E. </author> <title> Hanson (1986). An analysis of rule indexing implementations in data base systems. </title> <booktitle> In Proc. 1st Int. Conf. on Expert Data Base Systems. </booktitle>
Reference: <author> Tamminen, M. </author> <year> (1982). </year> <title> The extendible cell method for closest point problems. </title> <journal> BIT 22, </journal> <pages> 27-41. </pages>
Reference-contexts: The goal of all 22 property point access method intervals complete disjoint fi fi fi quadtree (Finkel and Bentley 1974; Samet 1984), k-d-B tree (Robinson 1981), EX-CELL <ref> (Tamminen 1982) </ref>, interpolation hashing (Burkhard 1983), multidimensional extendible hashing (Otoo 1984), grid file (Niev-ergelt, Hinterberger, and Sevcik 1984), balanced multidimensional two-level grid file (Hin-richs 1985), interpolation-based grid file (Ouk-sel 1985), extendible hash tree (Otoo 1986), MOLHPE (Kriegel and Seeger 1986), PLOP-hashing (Kriegel and Seeger 1988), quantile hashing (Kriegel and Seeger 1989), <p> For a theoretical analysis of the grid file and some of its variants see (Regnier 1985) or (Becker 1992). Regnier shows in particular that the average space occupancy of the data buckets is about 69 % (ln 2) for uniformly distributed data. 4.1.2 EXCELL <ref> (Tamminen 1982) </ref> Closely related to the grid file is the EXCELL method (EXtendible CELL) proposed by Tamminen (1982). In contrast to the grid file, where the partitioning hyperplanes may be spaced arbitrarily, the EXCELL method decomposes the universe regularly; all grid cells are of equal size. <p> P-tree (Ja-gadish 1990c) overlapping regions R-tree (Guttman 1984), R fl - tree (Beckmann et al. 1990), skd-tree (Ooi et al. 1987), GBD-tree (Ohsawa and Sakauchi 1990), Hilbert R-tree (Kamel and Faloutsos 1994), buddy tree with overlapping (Seeger 1991) sphere tree (Oosterom 1990) P-tree (Schi-wietz 1993), KD2B-tree (Oosterom 1990) clipping EXCELL <ref> (Tamminen 1982) </ref>, extended k-d-tree (Mat-suyama et al. 1984), R + -tree (Sellis et al. 1987), buddy tree with clipping (Seeger 1991) cell tree (Gunther 1988) multiple layers multi-layer grid file (Six and Widmayer 1988), R-file (Hutflesz et al. 1990) Table 2: Classification of SAMs Based on Kriegel et al. (1991) 4-dimensional
Reference: <author> Tamminen, M. </author> <year> (1983). </year> <title> Performance analysis of cell based geometric file organisations. </title>
Reference-contexts: Furthermore, they report the various times for index traversal, loading polygons, etc. Besides showing that the R + -tree and a quadtree variant based on Hierarchical EXCELL <ref> (Tamminen 1983) </ref> outperform the R fl -tree for point queries, they clearly demonstrate that the database system must provide some means for physical clustering. Otherwise reading a single index page may induce several page faults.
Reference: <editor> Int. J. </editor> <booktitle> Comp. Vision, Graphics and Image Processing 24, </booktitle> <pages> 160-181. </pages>
Reference: <author> Tamminen, M. </author> <year> (1984). </year> <title> Comment on quad- and octrees. </title> <booktitle> Communications of the ACM 30 (3), </booktitle> <pages> 204-212. </pages> <note> 85 Theodoridis, </note> <author> Y. and T. K. </author> <title> Sellis (1996). A model for the prediction of R-tree perfor-mance. </title> <booktitle> In Proc. 15th ACM SIGACT-SIGMOD Symp. on Principles of Database Systems. </booktitle>
Reference-contexts: The structure works best if all the data is known a priori and if updates are rare. Figure 11 shows an adaptive k-d-tree for the running example. Note that the tree still depends on the order of insertion. Another variant of the k-d-tree is the bintree <ref> (Tamminen 1984) </ref>. This structure partitions the universe recursively into d-dimensional boxes of equal size until each one contains only a certain number of points. Even though this kind of partitioning is less adaptive, it has several advantages, such as the implicit knowledge of the partitioning hyperplanes.
Reference: <author> Whang, K.-Y. and R. </author> <title> Krishnamurthy (1985). Multilevel grid files. </title> <institution> Yorktown Heights, NY: IBM Research Laboratory. </institution>
Reference-contexts: file (Hin-richs 1985), interpolation-based grid file (Ouk-sel 1985), extendible hash tree (Otoo 1986), MOLHPE (Kriegel and Seeger 1986), PLOP-hashing (Kriegel and Seeger 1988), quantile hashing (Kriegel and Seeger 1989), LSD-tree (Henrich, Six, and Widmayer 1989) fi fi twin grid file (Hutflesz, Six, and Widmayer 1988b) fi fi multilevel grid file <ref> (Whang and Krishnamurthy 1985) </ref>, buddy tree (Seeger and Kriegel 1990) fi fi BSP-tree (Fuchs, Kedem, and Naylor 1980), BD-tree (Ohsawa and Sakauchi 1983), BANG file (Freeston 1987), hB-tree (Lomet and Salzberg 1989) Table 1: Classification of PAMs according to Seeger and Kriegel (1990) these heuristics is that objects that are located
Reference: <author> Widmayer, P. </author> <year> (1991). </year> <editor> Datenstrukturen fur Geodatenbanken. In G. Vossen and K.- U. Witt (Eds.), Entwicklungstendenzen bei Datenbank-Systemen, </editor> <volume> Chapter 9, </volume> <pages> pp. 317-361. </pages> <address> Munich: Oldenbourg-Verlag. </address> <note> In German. 86 </note>
Reference-contexts: In the case of skewed data this may lead to a situation where numerous directory entries exist for the same data region (and therefore the same disk page). Even in the case of uniformly distributed data, the directory growth may be superlinear <ref> (Widmayer 1991) </ref>. Exact match searches take no more than two page accesses: one for the directory and one for the bucket with the data. This is more than the best-case performance of linear hashing, but better than the worst case. <p> They also provide some performance results for the R-tree, which uses their splitting strategy in comparison to the otherwise unchanged R-tree. An empirical performance comparison of the R-tree with an improved variant of z-hashing, called layered z-hashing or lz-hashing (Hutflesz et al. 1988a), can be found in <ref> (Hutflesz, Widmayer, and Zimmermann 1991) </ref>. The proposed structure needs significantly less seek operations than the R-tree; average storage utilization is higher. Jagadish (1990a) studies the properties of different space-filling curves (z-ordering, Gray-coding, and Hilbert-curve).
References-found: 159

