URL: ftp://ftp.cs.jhu.edu/pub/barequet/papers/cap-socg98.ps.gz
Refering-URL: http://www.cs.jhu.edu/~barequet/papers.html
Root-URL: http://www.cs.jhu.edu
Email: E-mail: [barequet|goodrich]@cs.jhu.edu  E-mail: [chen|odaescu]@cse.nd.edu  E-mail: snoeyink@cs.ubc.ca  
Title: Efficiently Approximating Polygonal Paths in Three and Higher Dimensions  
Author: Gill Barequet Danny Z. Chen Ovidiu Daescu Michael T. Goodrich Jack Snoeyink 
Address: Baltimore, MD 21218.  IN 46556.  201-2366 Main Mall, Vancouver, B.C., Canada V6T 1Z4.  
Affiliation: Center for Geometric Computing, Dept. of Computer Science, Johns Hopkins University,  Dept. of Computer Science and Engineering, University of Notre Dame, Notre Dame,  Dept. of Computer Science, The University of British Columbia,  
Abstract: We present efficient algorithms for solving polygonal-path approximation problems in three and higher dimensions. Given an n-vertex polygonal curve P in IR d , d 3, we approximate P by another polygonal curve P 0 of m n vertices in IR d such that the vertex sequence of P 0 is an ordered subsequence of the vertices of P . The goal is to either minimize the size m of P 0 for a given error tolerance " (called the min-# problem), or to minimize the deviation error " between P and P 0 for a given size m of P 0 (called the min" problem). Our techniques enable us to develop efficient near-quadratic-time algorithms in 3-D and sub-cubic-time algorithms in 4-D for solving the min-# and min" problems. We discuss extensions of our solutions to d-dimensional space, where d &gt; 4. fl Work on this paper by the first and the fourth authors has been supported in part by the U.S. Army Research Office under Grant DAAH04-96-1-0013. Work by the second and third authors has been supported in part by the National Science Foundation under Grant CCR-9623585. Work by the fourth author has been supported also by NSF grant CCR-96-25289. Work by the fifth author has been supported by NSERC, CIES, and by the Geometry Center at Johns Hopkins University. Copyright c fl1998 by the Association for Computing Machinery, Inc. Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, to republish, to post on servers, or to redistribute to lists, requires prior specific permission and/or a fee. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Alt and M. Godau, </author> <title> Measuring the resemblance of polygonal curves, </title> <booktitle> Proc. 8th Ann. ACM Symp. on Computational Geometry, </booktitle> <address> Berlin, Germany, 102-109, </address> <year> 1992. </year>
Reference-contexts: There has been other less-related, but still significant, work done on other metrics for comparing 2-dimensional polygonal paths [18] that do not necessarily use the same set of vertices. Arkin et al. [2], Alt and Godau <ref> [1] </ref>, and Rote [25] describe several metrics for comparing polygonal curves. Guibas et al. [15] study different error measures for the min # problem, with an eye toward those that could be implemented in O (n log n) time by greedy algo-rithms.
Reference: [2] <author> E.M. Arkin, L.P. Chew, D.P. Huttenlocher, K. Kedem, and J.S.B. Mitchell, </author> <title> An efficiently computable metric for comparing polygonal shapes, </title> <journal> IEEE Trans. on Pattern Analysis and Machine Intelligence, </journal> <volume> 13(3) </volume> <pages> 209-216, </pages> <year> 1991. </year>
Reference-contexts: There has been other less-related, but still significant, work done on other metrics for comparing 2-dimensional polygonal paths [18] that do not necessarily use the same set of vertices. Arkin et al. <ref> [2] </ref>, Alt and Godau [1], and Rote [25] describe several metrics for comparing polygonal curves. Guibas et al. [15] study different error measures for the min # problem, with an eye toward those that could be implemented in O (n log n) time by greedy algo-rithms.
Reference: [3] <author> B. Buttenfield, </author> <title> Treatment of the cartographic line, </title> <journal> Cartographica, </journal> <volume> 22 </volume> <pages> 1-26, </pages> <year> 1985. </year>
Reference: [4] <author> W.S. Chan and F. Chin, </author> <title> Approximation of polygonal curves with minimum number of line segments or minimum error, </title> <journal> Int. J. of Computational Geometry and Applications, </journal> <volume> 6(1) </volume> <pages> 59-77, </pages> <year> 1996. </year>
Reference-contexts: Using the tolerance zone measure of error, as defined above, they achieve algorithms whose running times are O (n 2 log n) and O (n 2 log 2 n), respectively, and using O (n 2 ) space, for the two problems. Chan and Chin <ref> [4] </ref> reduce the time complexity of both results by a logarithmic factor. Chen and Daescu [7] further show that the algorithms of [4] can use only O (n) space without increasing their running times. <p> Chan and Chin <ref> [4] </ref> reduce the time complexity of both results by a logarithmic factor. Chen and Daescu [7] further show that the algorithms of [4] can use only O (n) space without increasing their running times. Varadarajan [27] studies the min-# and min" problems for 2-D polygonal paths that are monotone, i.e., any line parallel to the y axis intersects a path in a point. <p> We summarize the running times of our methods in Table 1. Note that all of our bounds are sub-cubic (if not nearly quadratic). Fairly straightforward bounds of O (n 3 ) for min-# and O (n 3 log n) for min" follow by adapting previous 2-dimensional results <ref> [4, 17, 18, 22] </ref>. Even so, our approach still follows the general framework of these earlier algorithms. <p> To solve the min" problem we perform a "binary-search-like" computation using the min-# algorithm as a "probe." Our algorithms differ from previous approaches in some important ways, however. One of the most fundamental differences is that we develop a d-dimensional generalization of the 2-dimensional approach of Chan and Chin <ref> [4] </ref> for constructing the "shortcut" graph G. Rather than constructing this graph directly, we instead construct it as the intersection of two other graphs, ! G , which respectively define tolerance zones in terms of "semi-infinite" beams (pointing in opposite directions).
Reference: [5] <author> B. Chazelle and L.J. Guibas, Fractional cascading: I. </author> <title> A data structuring technique, </title> <journal> Algorithmica, </journal> <volume> 1 </volume> <pages> 133-162, </pages> <year> 1986. </year>
Reference-contexts: In the full version of this paper we use this observation, together with the fractional cascading technique of Chazelle and Guibas <ref> [5, 6] </ref>, to answer each inside query in in O (log n) time. This gives us the following: Theorem 3 Given a sequence of n disk insert updates and point inside queries, one can answer all the inside queries in in O (n log n) time.
Reference: [6] <author> B. Chazelle and L.J. Guibas, </author> <title> Fractional cascading: II. </title> <journal> Applications, Algorithmica, </journal> <volume> 1 </volume> <pages> 163-191, </pages> <year> 1986. </year>
Reference-contexts: In the full version of this paper we use this observation, together with the fractional cascading technique of Chazelle and Guibas <ref> [5, 6] </ref>, to answer each inside query in in O (log n) time. This gives us the following: Theorem 3 Given a sequence of n disk insert updates and point inside queries, one can answer all the inside queries in in O (n log n) time.
Reference: [7] <author> D.Z. Chen and O. Daescu, </author> <title> Space-efficient algorithms for approximating polygonal curves in two-dimensional space. </title> <type> Manuscript, </type> <year> 1997. </year>
Reference-contexts: Chan and Chin [4] reduce the time complexity of both results by a logarithmic factor. Chen and Daescu <ref> [7] </ref> further show that the algorithms of [4] can use only O (n) space without increasing their running times. Varadarajan [27] studies the min-# and min" problems for 2-D polygonal paths that are monotone, i.e., any line parallel to the y axis intersects a path in a point. <p> Note that the reduction to a number of 2-D problems allows us to use only O (n) space, as in <ref> [7] </ref>. <p> Instead, we make use of the sampling technique of <ref> [7] </ref>, which allows us to store only O (n) errors of ERR (P ), while still being able to perform binary search on the O (n 2 ) errors.
Reference: [8] <author> D.H. Douglas and T.K. Peucker, </author> <title> Algorithms for the reduction of the number of points required to represent a digitized line or its caricature, </title> <journal> Canadian Cartographer, </journal> <volume> 10(2) </volume> <pages> 112-122, </pages> <year> 1973. </year>
Reference-contexts: However, those algorithms cannot be extended to the 3-D version of the problem or to the tolerance zone error criterion in 2-D. The recursive simplification heuristic of Douglas and Peucker <ref> [8] </ref>, which is popular in GIS, does extend to curves in 3 dimensions in O (n 2 ) worst-case time, but solves neither the min-# nor the min" problems.
Reference: [9] <author> J. Erickson, </author> <title> Space-time tradeoffs for emptiness queries, </title> <booktitle> Proc. 13th Ann. ACM Symp. on Computational Geometry, Nice, France, </booktitle> <pages> 304-313, </pages> <year> 1997. </year>
Reference-contexts: Thus, to solve one instance of off-line ball inclusion, we build a static data structure for answering ray-shooting queries (see <ref> [9, 19] </ref>), using a parameter s to control a tradeoff between query time and space/preprocessing time.
Reference: [10] <author> D. Eu and G.T. Toussaint, </author> <title> On approximation polygonal curves in two and three dimensions, CVGIP: Graphical Models and Image Processing, </title> <booktitle> 56(3) </booktitle> <pages> 231-246, </pages> <year> 1994. </year>
Reference-contexts: The only work on the general problem, that we are aware of, achieves super-cubic algorithms for the 3-D path-approximation problem. Ihm and Naylor [16] give an O (n 3 log m) algorithm for the min" problem. Eu and Toussaint <ref> [10] </ref> restrict the polygonal chains to be monotonic with respect to one of the three coordinate axes, and define the approximation in terms of an infinite beam measure of error.
Reference: [11] <author> R. Fleischer, K. Mehlhorn, G. Rote, E. Welzl, and C.-K. Yap, </author> <title> Simultaneous inner and outer approximation of shapes, </title> <journal> Algorithmica, </journal> <volume> 8 </volume> <pages> 365-389, </pages> <year> 1992. </year>
Reference-contexts: Guibas et al. [15] study different error measures for the min # problem, with an eye toward those that could be implemented in O (n log n) time by greedy algo-rithms. Fleischer et al. <ref> [11] </ref> approximate polygonal shapes by inner and outer polygons and show their applications to the problems of polygon containment and of planar motion planning. The only work on the general problem, that we are aware of, achieves super-cubic algorithms for the 3-D path-approximation problem.
Reference: [12] <author> M.T. Goodrich, </author> <title> Using approximation algorithms to design parallel algorithms that may ignore processor allocation. </title> <booktitle> Proc. 32nd Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <address> San Juan, Puerto Rico, 711-722, </address> <year> 1991. </year>
Reference-contexts: Our algorithm is based on Goodrich's paradigm <ref> [12] </ref> for computing the upper envelope of n surfaces in the k-intersecting class. The algorithm is sketched below. We first build an n-leaf complete binary tree T . The ith leaf of T stores d i and a i . <p> The information for the points in A (v) can be maintained and pipe-lined in a similar fashion as for I (v). These structures at every node v can be maintained in O (1) time per stage. By using the techniques of <ref> [12] </ref> we can show that the problem of checking whether a j 2 j for every j is solvable in O (log n) time using n processors in the parallel comparison model. More details our found in the full version of the paper.
Reference: [13] <author> M.T. Goodrich and R.Tamassia, </author> <title> Dynamic ray shooting and shortest paths via balanced geodesic triangulations, </title> <booktitle> Proc. 9th Ann. ACM Symp. on Computational Geometry, </booktitle> <address> San Francisco, CA, 318-327, </address> <year> 1993. </year>
Reference-contexts: For the min" problem in 4-D, we need only observe (as for the 3-D version of the problem) that we have to parallelize only the steps in the sequential min-# algorithm that depend on ". For this purpose we use the ray-shooting data structure of <ref> [13, 14] </ref>. With some preprocessing, the construction of this data structure does not depend on the value of ". In this data structure the points are sorted according to their respective coordinates in parallel.
Reference: [14] <author> M.T. Goodrich and R. Tamassia, </author> <title> Dynamic trees and dynamic point location, </title> <journal> SIAM J. Computing, </journal> <note> to appear. </note>
Reference-contexts: For the min" problem in 4-D, we need only observe (as for the 3-D version of the problem) that we have to parallelize only the steps in the sequential min-# algorithm that depend on ". For this purpose we use the ray-shooting data structure of <ref> [13, 14] </ref>. With some preprocessing, the construction of this data structure does not depend on the value of ". In this data structure the points are sorted according to their respective coordinates in parallel.
Reference: [15] <author> L.J. Guibas, J.E. Hershberger, J.S.B. Mitchell, and J.S. Snoeyink, </author> <title> Approximating polygons and subdivisions with minimum link paths, </title> <journal> Int. J. of Computational Geometry and Applications, </journal> <volume> 3(4) </volume> <pages> 383-415, </pages> <year> 1993. </year>
Reference-contexts: Arkin et al. [2], Alt and Godau [1], and Rote [25] describe several metrics for comparing polygonal curves. Guibas et al. <ref> [15] </ref> study different error measures for the min # problem, with an eye toward those that could be implemented in O (n log n) time by greedy algo-rithms.
Reference: [16] <author> I. Ihm and B. Naylor, </author> <title> Piecewise linear approximations of digitized space curves with applications, </title> <editor> in N. M. Patrikalakis (ed.), </editor> <title> Scientific Visualization of Physical Phenomina, </title> <publisher> Springer-Verlag, </publisher> <address> Tokyo, 545-569, </address> <year> 1991. </year>
Reference-contexts: The only work on the general problem, that we are aware of, achieves super-cubic algorithms for the 3-D path-approximation problem. Ihm and Naylor <ref> [16] </ref> give an O (n 3 log m) algorithm for the min" problem. Eu and Toussaint [10] restrict the polygonal chains to be monotonic with respect to one of the three coordinate axes, and define the approximation in terms of an infinite beam measure of error.
Reference: [17] <author> H. Imai and M. Iri, </author> <title> Computational-geometric methods for polygonal approximations of a curve, Computer Vision, </title> <journal> Graphics, and Image Processing, </journal> <volume> 36 </volume> <pages> 31-41, </pages> <year> 1986. </year>
Reference-contexts: We summarize the running times of our methods in Table 1. Note that all of our bounds are sub-cubic (if not nearly quadratic). Fairly straightforward bounds of O (n 3 ) for min-# and O (n 3 log n) for min" follow by adapting previous 2-dimensional results <ref> [4, 17, 18, 22] </ref>. Even so, our approach still follows the general framework of these earlier algorithms.
Reference: [18] <author> H. Imai and M. Iri, </author> <title> Polygonal approximations of a curve-formulations and algorithms, Computational Morphology, </title> <address> 71-86, </address> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1988. </year>
Reference-contexts: There has been other less-related, but still significant, work done on other metrics for comparing 2-dimensional polygonal paths <ref> [18] </ref> that do not necessarily use the same set of vertices. Arkin et al. [2], Alt and Godau [1], and Rote [25] describe several metrics for comparing polygonal curves. <p> We summarize the running times of our methods in Table 1. Note that all of our bounds are sub-cubic (if not nearly quadratic). Fairly straightforward bounds of O (n 3 ) for min-# and O (n 3 log n) for min" follow by adapting previous 2-dimensional results <ref> [4, 17, 18, 22] </ref>. Even so, our approach still follows the general framework of these earlier algorithms.
Reference: [19] <author> J. Matou sek and O. Schwarzkopf, </author> <title> On ray shooting in convex polytopes, </title> <journal> Discrete & Computational Geometry, </journal> <volume> 10 </volume> <pages> 215-232, </pages> <year> 1993. </year>
Reference-contexts: Thus, to solve one instance of off-line ball inclusion, we build a static data structure for answering ray-shooting queries (see <ref> [9, 19] </ref>), using a parameter s to control a tradeoff between query time and space/preprocessing time.
Reference: [20] <author> M. McAllister and J. Snoeyink, </author> <title> Medial axis generalisation of hydrology networks, </title> <booktitle> AutoCarto 13: ACSM/ASPRS Ann. Convention Technical Papers, </booktitle> <address> Seattle, WA, 164-173, </address> <year> 1997. </year>
Reference: [21] <author> N. Megiddo, </author> <title> Applying parallel computation algorithms in the design of serial algorithms, </title> <journal> J. of the ACM, </journal> <volume> 30 </volume> <pages> 852-865, </pages> <year> 1983. </year>
Reference-contexts: More details our found in the full version of the paper. We then use this parallel algorithm to drive a parametric-search algorithm <ref> [21] </ref>. We simulate each step of this parallel algorithm sequentially, noting that some of the computations in this step depend upon whether the optimal value " fl falls in specific intervals [" 1 ; " 2 ].
Reference: [22] <author> A. Melkman and J. O'Rourke, </author> <title> On polygonal chain approximation. Computational Morphology, </title> <address> 87-95, </address> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1988. </year>
Reference-contexts: introduction how to reduce the general problem to the restricted version of it. 1.1 Related Previous Work Imai and Iri [17,18] and Melkman and O'Rourke <ref> [22] </ref> study the 2-D min-# and min" polygonal-path approximation problems. <p> We summarize the running times of our methods in Table 1. Note that all of our bounds are sub-cubic (if not nearly quadratic). Fairly straightforward bounds of O (n 3 ) for min-# and O (n 3 log n) for min" follow by adapting previous 2-dimensional results <ref> [4, 17, 18, 22] </ref>. Even so, our approach still follows the general framework of these earlier algorithms.
Reference: [23] <author> B.K. Natarajan, </author> <title> On comparing and compressing piecewise linear curves, </title> <type> Technical Report, </type> <institution> Hewlett Packard, </institution> <year> 1991. </year>
Reference: [24] <author> B.K. Natarajan and J. Ruppert, </author> <title> On sparse approximations of curves and functions, </title> <booktitle> Proc. 4th Canadian Conf. on Computational Geometry, </booktitle> <pages> 250-256, </pages> <year> 1992. </year>
Reference: [25] <author> G. </author> <title> Rote, A new metric between polygons, and how to compute it, </title> <booktitle> Proc. 19th Int. Colloq. Automata Lang. Program., Lecture Notes in Computer Science, </booktitle> <volume> 623 </volume> <pages> 404-415, </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: There has been other less-related, but still significant, work done on other metrics for comparing 2-dimensional polygonal paths [18] that do not necessarily use the same set of vertices. Arkin et al. [2], Alt and Godau [1], and Rote <ref> [25] </ref> describe several metrics for comparing polygonal curves. Guibas et al. [15] study different error measures for the min # problem, with an eye toward those that could be implemented in O (n log n) time by greedy algo-rithms.
Reference: [26] <author> M. Sharir, </author> <title> A near-linear algorithm for the planar 2-center problem, </title> <booktitle> Proc. 12th Ann. ACM Symp. on Computational Geometry, </booktitle> <address> Philadelphia, PA, 106-112, </address> <year> 1996. </year>
Reference-contexts: In this section we show how to determine the answers to all the inside (p i ) queries in O (n log n) total time. Before we provide our solution we remark that Sharir <ref> [26] </ref> gives a data structure for maintaining the on-line intersection of a collection of equal-radius disks. This data structure cannot be applied to our disk-inclusion problem, however, as the disks in our problem do not in general have equal radii. Let us sketch our solution to the off-line disk-inclusion problem.
Reference: [27] <author> K.R. Varadarajan, </author> <title> Approximating monotone polygonal curves using the uniform metric, </title> <booktitle> Proc. 12th Ann. ACM Symp. on Computational Geometry, </booktitle> <address> Philadel-phia, PA, 106-112, </address> <year> 1996. </year>
Reference-contexts: Chan and Chin [4] reduce the time complexity of both results by a logarithmic factor. Chen and Daescu [7] further show that the algorithms of [4] can use only O (n) space without increasing their running times. Varadarajan <ref> [27] </ref> studies the min-# and min" problems for 2-D polygonal paths that are monotone, i.e., any line parallel to the y axis intersects a path in a point. <p> Under the Euclidean (L 2 ) metric, they consider the 3-dimensional version of the problem in <ref> [27] </ref> and give algorithms that run in O (n 3 ) and O (n 3 log n) time, respectively, for the min-# and min" problems on monotone 3-D polygonal paths. 1.2 Our Results In this paper we give the first efficient algorithms for the d-dimensional path approximation problem, where d 3,
References-found: 27

