URL: ftp://ftp.cse.ucsc.edu/pub/nemesis/manual.ps
Refering-URL: http://sctest.cse.ucsc.edu/nemesis/nemesis.html
Root-URL: http://www.cse.ucsc.edu
Title: The Nemesis User's Manual  
Author: Craig Hall Brian Chess Tracy Larrabee 
Address: Santa Cruz 95064  
Affiliation: Computer Engineering University of California,  
Abstract-found: 0
Intro-found: 1
Reference: [BBK89] <author> F. Brglez, D. Bryan, and K. Kozminski. </author> <title> Combinational profiles of sequential circuit benchmarks. </title> <booktitle> In Proceedings of the IEEE International Symposium on Circuits and Systems, </booktitle> <year> 1989. </year>
Reference: [BF85] <author> F. Brglez and H. Fujiwara. </author> <title> A neutral netlist of 10 combinational benchmark circuits and a target translator in fortran. </title> <booktitle> In Proceedings of the IEEE International Symposium on Circuits and Systems, </booktitle> <year> 1985. </year>
Reference: [CL93] <author> B. Chess and T. Larrabee. </author> <title> Bridge fault simulation strategies for cmos integrated circuits. </title> <booktitle> In Proceedings of Design Automation Conference, </booktitle> <pages> pages 458-462, </pages> <year> 1993. </year>
Reference-contexts: This is the Nemesis User's Manual. It is designed to quickly and effectively allow users to exploit the features available in Nemesis. Much of the detailed information concerning actual design and implementation has been left to more technically oriented papers <ref> [FTL90, FL91b, FL91a, CL93, CL94] </ref>. This manual includes: Definitions: A quick reference for basic terms used throughout the Nemesis manual. Installation: A step by step procedure for installing Nemesis. Tutorial: A brief tutorial on how to put Nemesis to immediate use. <p> Bridge Fault: A bridge fault is a short between two signal wires in the circuit which are interconnected with a logical behavior specified by a PTbridge tta file [FL91b]. There are several existing test pattern generation systems that produce tests for bridge faults <ref> [CL93, CL94, MG91, RP93, MA93] </ref>. BridgeIDDQ Test: For a bridge fault, any test that causes the two bridged wires to take on opposite logic values in the fault free circuit is an IDDQ test for that fault [FL91a].
Reference: [CL94] <author> B. Chess and T. Larrabee. </author> <title> Generating test patterns for bridge faults in CMOS ICs. </title> <booktitle> In Proceedings of European Test Conference, </booktitle> <year> 1994. </year>
Reference-contexts: This is the Nemesis User's Manual. It is designed to quickly and effectively allow users to exploit the features available in Nemesis. Much of the detailed information concerning actual design and implementation has been left to more technically oriented papers <ref> [FTL90, FL91b, FL91a, CL93, CL94] </ref>. This manual includes: Definitions: A quick reference for basic terms used throughout the Nemesis manual. Installation: A step by step procedure for installing Nemesis. Tutorial: A brief tutorial on how to put Nemesis to immediate use. <p> Bridge Fault: A bridge fault is a short between two signal wires in the circuit which are interconnected with a logical behavior specified by a PTbridge tta file [FL91b]. There are several existing test pattern generation systems that produce tests for bridge faults <ref> [CL93, CL94, MG91, RP93, MA93] </ref>. BridgeIDDQ Test: For a bridge fault, any test that causes the two bridged wires to take on opposite logic values in the fault free circuit is an IDDQ test for that fault [FL91a].
Reference: [FL91a] <author> F. J. Ferguson and T. Larrabee. </author> <title> Test pattern generation for current testable faults in static CMOS circuits. </title> <booktitle> In Proceedings of the 1991 VLSI Test Symposium, </booktitle> <pages> pages 297-302. </pages> <publisher> IEEE, </publisher> <year> 1991. </year>
Reference-contexts: This is the Nemesis User's Manual. It is designed to quickly and effectively allow users to exploit the features available in Nemesis. Much of the detailed information concerning actual design and implementation has been left to more technically oriented papers <ref> [FTL90, FL91b, FL91a, CL93, CL94] </ref>. This manual includes: Definitions: A quick reference for basic terms used throughout the Nemesis manual. Installation: A step by step procedure for installing Nemesis. Tutorial: A brief tutorial on how to put Nemesis to immediate use. <p> BridgeIDDQ Test: For a bridge fault, any test that causes the two bridged wires to take on opposite logic values in the fault free circuit is an IDDQ test for that fault <ref> [FL91a] </ref>. Logical Test: A logical test for a fault creates a discrepancy between the primary circuit output in the presence of the fault and the primary circuit output in the absence of the fault.
Reference: [FL91b] <author> F. J. Ferguson and T. Larrabee. </author> <title> Test pattern generation for realistic bridge faults in CMOS ICs. </title> <booktitle> In Proceedings of International Test Conference, </booktitle> <pages> pages 492-499. </pages> <publisher> IEEE, </publisher> <year> 1991. </year>
Reference-contexts: This is the Nemesis User's Manual. It is designed to quickly and effectively allow users to exploit the features available in Nemesis. Much of the detailed information concerning actual design and implementation has been left to more technically oriented papers <ref> [FTL90, FL91b, FL91a, CL93, CL94] </ref>. This manual includes: Definitions: A quick reference for basic terms used throughout the Nemesis manual. Installation: A step by step procedure for installing Nemesis. Tutorial: A brief tutorial on how to put Nemesis to immediate use. <p> Bridge Fault: A bridge fault is a short between two signal wires in the circuit which are interconnected with a logical behavior specified by a PTbridge tta file <ref> [FL91b] </ref>. There are several existing test pattern generation systems that produce tests for bridge faults [CL93, CL94, MG91, RP93, MA93].
Reference: [FS83] <author> H. Fujiwara and T. Shimono. </author> <title> On the acceleration of test-generation algorithms. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-32(12):1137-1144, </volume> <month> December </month> <year> 1983. </year>
Reference-contexts: There are many existing test pattern generation systems <ref> [FS83, Goe81, Rot66, STS88] </ref>. Test Simulation Test simulation is the process of simulating a potential test against a list of faults.
Reference: [FTL90] <author> F. J. Ferguson, M. Taylor, and T. Larrabee. </author> <title> Testing for parametric faults in static CMOS circuits. </title> <booktitle> In Proceedings of International Test Conference, </booktitle> <pages> pages 436-443. </pages> <publisher> IEEE, </publisher> <year> 1990. </year>
Reference-contexts: This is the Nemesis User's Manual. It is designed to quickly and effectively allow users to exploit the features available in Nemesis. Much of the detailed information concerning actual design and implementation has been left to more technically oriented papers <ref> [FTL90, FL91b, FL91a, CL93, CL94] </ref>. This manual includes: Definitions: A quick reference for basic terms used throughout the Nemesis manual. Installation: A step by step procedure for installing Nemesis. Tutorial: A brief tutorial on how to put Nemesis to immediate use. <p> IDDQ Test: An IDDQ test for a fault causes the circuit to draw excessive quiescent current in the presence of the fault <ref> [FTL90] </ref>.
Reference: [Goe81] <author> P. Goel. </author> <title> An implicit enumeration algorithm to generate tests for combinational logic circuits. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-30:215-222, </volume> <month> March </month> <year> 1981. </year>
Reference-contexts: There are many existing test pattern generation systems <ref> [FS83, Goe81, Rot66, STS88] </ref>. Test Simulation Test simulation is the process of simulating a potential test against a list of faults.
Reference: [Jee91] <author> A. Jee. </author> <title> Carafe user's manual. </title> <type> Technical Report UCSC-CRL-90-61, </type> <institution> University of Califor-nia at Santa Cruz, Computer Engineering Department, </institution> <month> February </month> <year> 1991. </year>
Reference-contexts: Files are in hierarchical Carafe format. Carafe is fully described by Ferguson and Jee <ref> [Jee91, JF93b, JF93a] </ref>. Also see the Appendixes for a complete description of hierarchical Carafe format. bridge tta dir string: The directory containing truth tables for fault blocks. See the Definitions chapter for a complete description of logical testing for bridge faults.
Reference: [JF93a] <author> A. Jee and F. J. Ferguson. Carafe: </author> <title> A software tool for failure analysis. </title> <booktitle> In Proceedings of International Symposium for Testing and Fault Analysis, </booktitle> <pages> pages 143-149, </pages> <year> 1993. </year>
Reference-contexts: Files are in hierarchical Carafe format. Carafe is fully described by Ferguson and Jee <ref> [Jee91, JF93b, JF93a] </ref>. Also see the Appendixes for a complete description of hierarchical Carafe format. bridge tta dir string: The directory containing truth tables for fault blocks. See the Definitions chapter for a complete description of logical testing for bridge faults.
Reference: [JF93b] <author> A. Jee and F. Joel Ferguson. Carafe: </author> <title> An inductive fault analysis tool for CMOS VLSI circuits. </title> <booktitle> In Proceedings of the IEEE VLSI Test Symposium, </booktitle> <pages> pages 92-98, </pages> <year> 1993. </year>
Reference-contexts: Files are in hierarchical Carafe format. Carafe is fully described by Ferguson and Jee <ref> [Jee91, JF93b, JF93a] </ref>. Also see the Appendixes for a complete description of hierarchical Carafe format. bridge tta dir string: The directory containing truth tables for fault blocks. See the Definitions chapter for a complete description of logical testing for bridge faults.
Reference: [Lar92] <author> T. Larrabee. </author> <title> Test pattern generation using boolean satisfiability. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <pages> pages 4-15, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: Nemesis generates tests for stuck-at and bridge-IDDQ faults in combinational circuits and simulates tests for stuck-at, bridge, and bridgeIDDQ faults in combinational circuits. In addition, Nemesis simulates tests for stuck-at and bridgeIDDQ faults in sequential circuits. The test patterns which Nemesis generates are done using the Boolean satisfiability method <ref> [Lar92] </ref>. This is the Nemesis User's Manual. It is designed to quickly and effectively allow users to exploit the features available in Nemesis. Much of the detailed information concerning actual design and implementation has been left to more technically oriented papers [FTL90, FL91b, FL91a, CL93, CL94].
Reference: [MA93] <author> P. </author> <title> Maxwell and R.C. Aitken. Biased voting: a method for simulating CMOS bridging faults in the presence of variable gate logic thresholds. </title> <booktitle> In Proceedings of International Test Conference, </booktitle> <pages> pages 63-72. </pages> <publisher> IEEE, </publisher> <year> 1993. </year> <month> 9 </month>
Reference-contexts: Bridge Fault: A bridge fault is a short between two signal wires in the circuit which are interconnected with a logical behavior specified by a PTbridge tta file [FL91b]. There are several existing test pattern generation systems that produce tests for bridge faults <ref> [CL93, CL94, MG91, RP93, MA93] </ref>. BridgeIDDQ Test: For a bridge fault, any test that causes the two bridged wires to take on opposite logic values in the fault free circuit is an IDDQ test for that fault [FL91a].
Reference: [MG91] <author> S.D. Millman and J.P. Garvey. </author> <title> An accurate bridging fault test pattern generator. </title> <booktitle> In Proceedings of International Test Conference, </booktitle> <pages> pages 411-418. </pages> <publisher> IEEE, </publisher> <year> 1991. </year>
Reference-contexts: Bridge Fault: A bridge fault is a short between two signal wires in the circuit which are interconnected with a logical behavior specified by a PTbridge tta file [FL91b]. There are several existing test pattern generation systems that produce tests for bridge faults <ref> [CL93, CL94, MG91, RP93, MA93] </ref>. BridgeIDDQ Test: For a bridge fault, any test that causes the two bridged wires to take on opposite logic values in the fault free circuit is an IDDQ test for that fault [FL91a].
Reference: [NCP92] <author> T. Niermann, W.-T. Cheng, and J. Patel. </author> <title> Proofs: A fast, memory-efficient sequential circuit fault simulator. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <pages> pages 198-207, </pages> <year> 1992. </year>
Reference-contexts: There are many existing test pattern generation systems [FS83, Goe81, Rot66, STS88]. Test Simulation Test simulation is the process of simulating a potential test against a list of faults. Nemesis uses parallel fault simulation a la PROOFS <ref> [NCP92] </ref>. 1 Stuck-At Fault: A stuck-at fault is an abstraction wherein the faulty circuit behaves as if one line were permanently tied to a logic 1 or logic 0 instead of varying as a function of the circuit inputs.
Reference: [Rot66] <author> J. P. Roth. </author> <title> Diagnosis of automata failures: A calculus and a method. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 10 </volume> <pages> 278-291, </pages> <year> 1966. </year>
Reference-contexts: There are many existing test pattern generation systems <ref> [FS83, Goe81, Rot66, STS88] </ref>. Test Simulation Test simulation is the process of simulating a potential test against a list of faults.
Reference: [RP93] <author> J. Rearick and J. Patel. </author> <title> Fast and accurate CMOS bridging fault simulation. </title> <booktitle> In Proceedings of International Test Conference, </booktitle> <pages> pages 54-62. </pages> <publisher> IEEE, </publisher> <year> 1993. </year>
Reference-contexts: Bridge Fault: A bridge fault is a short between two signal wires in the circuit which are interconnected with a logical behavior specified by a PTbridge tta file [FL91b]. There are several existing test pattern generation systems that produce tests for bridge faults <ref> [CL93, CL94, MG91, RP93, MA93] </ref>. BridgeIDDQ Test: For a bridge fault, any test that causes the two bridged wires to take on opposite logic values in the fault free circuit is an IDDQ test for that fault [FL91a].
Reference: [STS88] <author> M.H. Schulz, E. Trischler, and T.M. Sarfert. SOCRATES: </author> <title> a highly efficient ATPG system. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> CAD-7(1):126-137, </volume> <month> January </month> <year> 1988. </year> <month> 10 </month>
Reference-contexts: There are many existing test pattern generation systems <ref> [FS83, Goe81, Rot66, STS88] </ref>. Test Simulation Test simulation is the process of simulating a potential test against a list of faults.
References-found: 19

