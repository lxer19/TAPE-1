URL: http://www.cs.washington.edu/homes/tiwary/workshop/john.dilley.ps
Refering-URL: http://www.cs.washington.edu/homes/tiwary/workshop/contacts.html
Root-URL: 
Date: September 1, 1995 12:54 pm  
Note: DDI-OOPSLA.fm *DRAFT*  
Abstract: This paper discusses a project exploring the design, construction, and deployment of object-oriented large-scale widely-distributed (and excessively-hyphenated) systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Distributed Name Servers: </author> <title> Naming and Caching in Large Distributed Computing Environments. D.B. </title> <type> Terry. Ph.D. thesis, </type> <institution> Computer Science, University of California, Berkeley, </institution> <year> 1995. </year> <note> Xerox PARC Technical Report </note>
Reference: [2] <institution> Epidemic Algorithms for Replicated Database Maintenance. </institution> <note> Alan Demers, </note> <author> Mark Gealy, Dan Greene, Carl Hauser, Wes Irish, John Larson, Sue Manning, Scott Shenker, Howard Sturgis, Dan Swinehart, Doug Terry, Don Woods. </author> <note> Xerox PARC Technical Report CSL-89-1, </note> <month> January </month> <year> 1989. </year>
Reference: [3] <editor> Domain names - concepts and facilities. P.V. Mockapetris. </editor> <title> Internet Request for Comments 1034. </title> <month> November, </month> <year> 1987. </year>
Reference: [4] <author> Domain names - implementation and specification. P.V. Mockapetris. </author> <title> Internet Request for Comments 1035. </title> <month> November, </month> <year> 1987. </year>
Reference: [5] <institution> CCITT 1988 X.500 Series Recommendations and ISO 9594 Standard. </institution>
Reference: [6] <editor> X/Open Directory Service API Specification. X.400 API Association, </editor> <publisher> X/Open Company Limited, </publisher> <year> 1990. </year> <title> Building Dynamic Large-Scale Widely-Distributed Systems Authors Information September 1, </title> <year> 1995 </year> <month> 5 </month>
Reference: [7] <institution> OSF DCE Application Development Guide. Open Software Foundation, </institution> <year> 1991. </year>
Reference: [8] <institution> OSF DCE Application Development Reference. Open Software Foundation, </institution> <year> 1991. </year>
Reference: [9] <institution> OMG COSS Volume 1? </institution>
Reference-contexts: Pre-vious work in the area has led to the creation of dynamic directory services including: Grapevine/ Clearinghouse [1][2], BIND/DNS [3][4], X.500 [5][6], DCE Cell Directory Service and Global Directory Service [7][8], OMG Object Naming Ser-vice <ref> [9] </ref>, and ODP Trader [10]. These directory ser-vices generally provide redundancy of both data and service; their information spaces are designed into a hierarchical structure, with the top of the hierarchy typically remaining relatively fixed (see, for example, [11]). There are some problems with a hierarchical approach, however.
Reference: [10] <author> ISO/IEC xxxxx-x: </author> <title> 1994/Draft ODP Trading Function. </title>
Reference-contexts: Pre-vious work in the area has led to the creation of dynamic directory services including: Grapevine/ Clearinghouse [1][2], BIND/DNS [3][4], X.500 [5][6], DCE Cell Directory Service and Global Directory Service [7][8], OMG Object Naming Ser-vice [9], and ODP Trader <ref> [10] </ref>. These directory ser-vices generally provide redundancy of both data and service; their information spaces are designed into a hierarchical structure, with the top of the hierarchy typically remaining relatively fixed (see, for example, [11]). There are some problems with a hierarchical approach, however.
Reference: [11] <author> Domain Name System Structure and Delegation. J. Postel. </author> <title> Internet Request for Comments 1591. </title> <month> March, </month> <year> 1994. </year>
Reference-contexts: These directory ser-vices generally provide redundancy of both data and service; their information spaces are designed into a hierarchical structure, with the top of the hierarchy typically remaining relatively fixed (see, for example, <ref> [11] </ref>). There are some problems with a hierarchical approach, however. For one thing, hierarchy can cause a performance bottleneck at or near the top in large, highly dynamic network environments [12].
Reference: [12] <editor> Resource Location in Very Large Networks. Partha Dasgupta. </editor> <booktitle> IEEE Workshop on Services for Distributed and Networked Environments, </booktitle> <year> 1994. </year>
Reference-contexts: There are some problems with a hierarchical approach, however. For one thing, hierarchy can cause a performance bottleneck at or near the top in large, highly dynamic network environments <ref> [12] </ref>. Another problem presented by hierarchy is that of administrative control: to manage an admin istrative domain requires an understanding (mea-surement) of what is in that domain, and typically also requires activity to keep the systems within the domain consistent with respect to some system con-trol information.
Reference: [13] <institution> DNS Support for Load Balancing. T. Brisco. Internet Request for Comments 1794. </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: At this time no suffi-ciently powerful global directory service is deployed on all (or even a significant fraction) of the systems on HPs Internet. BIND/DNS is deployed, but does not provide the dynamic object location and relocation facilities we desire (see <ref> [13] </ref> for a discussion on some impacts of rapidly updat-ing the DNS database).
Reference: [14] <institution> Distributed Epidemic Algorithms for Replicated Tuple Spaces. Richard Golding. Hewlett-Packard Technical Report HPL-CSP-91-15. </institution> <month> June, </month> <year> 1991. </year>
Reference-contexts: A client will contact the Location Service to identify a set of potential (nearby) servers and then contact that sub-set until a suitable server is identified. The Location Service uses rumor mongering to propagate location hints, building upon the algo-rithms presented in [1][2] and <ref> [14] </ref>. The location servers form a web of peers, each one exchanging hints equally with the others (no form of proximity has been implemented at this time, though that is being considered for a future deployment).
Reference: [15] <author> OODCE: </author> <title> A C++ Framework for the OSF Distributed Computing Environment. </title> <booktitle> Winter `95 Usenix. </booktitle> <month> January, </month> <year> 1995. </year> <institution> 5 Authors Information John Dilley Hewlett-Packard Laboratories 1501 Page Mill Road MS 1U-19 Palo Alto, </institution> <address> CA 94304 // USA (415) 857-8146 (phone) (415) 857-8526 (fax) &lt;jad@hpl.hp.com&gt; </address>
Reference-contexts: nodes to come up. (In this regard the root or distin-guished servers are not as dynamic or autonomous as the others; but as there are few distinguished servers scalability is not as much of an issue.) The communication platform used is a blend between OMG CORBA, OSF DCE and OODCE <ref> [15] </ref>, using components from both to create a truly heterogeneous system (heterogeneous in terms of hardware as well as distributed software platform, or middleware if you prefer). Both of these tech-nologies are RPC-based (client-server) systems.
References-found: 15

