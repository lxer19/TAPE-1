URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR398.ps.Z
Refering-URL: http://www.cs.indiana.edu/trindex.html
Root-URL: 
Title: Specification and Synthesis of Bounded Indirection  
Author: Kamlesh Rath, M. Esen Tuna, and Steven D. Johnson 
Date: 398  february 1994  
Affiliation: indiana university computer science department  
Pubnum: technical report no.  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> K. Rath, M. E. Tuna, and S. D. Johnson, </author> <title> "Behavior tables: A basis for system representation and transformational system synthesis," </title> <booktitle> in Proceedings of the International Conference on Computer Aided Design (ICCAD), IEEE, </booktitle> <month> Nov. </month> <year> 1993. </year> <note> to appear. </note>
Reference-contexts: Indirection blurs the distinction between behavior and structure by modeling behavior as structural descriptions. To model indirection effectively, we need a framework to represent both behavioral and structural facets of a design. Behavior tables <ref> [1] </ref> provide us with such a framework. In addition to behavior and structure, behavior tables can also model protocol and data abstraction aspects of a design in a unified framework. 1.1 Related Work In recent years there has been substantial work in improving hardware description languages. <p> Transformations on bounded indirection constructs are 2 also presented. The research reported here grew out of our design derivation methodology, which is based on first order functional algebra [9]. We present three substantial examples to illustrate the different uses of bounded indirection. 2 Behavior Tables Behavior tables <ref> [1] </ref> are an extension of register transfer tables that can model control, data-path, protocol, and data abstraction facets of a system. A behavior table is a representation of a finite state machine that models system behavior. <p> Details about the derivation and synthesis of an implementation of the FM9001 can be 10 found in <ref> [1, 12] </ref>. 5 Net Indirection Using the basic mechanisms developed in the previous sections, we will now define a powerful construct that can be used to selectively connect ports between behavior tables.
Reference: [2] <author> S. </author> <title> 1076, IEEE Standard VHDL Language Reference Manual. </title> <publisher> IEEE, </publisher> <year> 1987. </year>
Reference-contexts: Starting with register-transfer level descriptions, today a designer can choose from a variety of languages. As system synthesis continues to evolve, new features are being added to HDLs to model systems at higher levels of abstraction. VHDL <ref> [2] </ref> is emerging as a standard among HDLs, with a large number of language constructs, many of which are not synthesizable. With the addition of new features in the recent enhancement of VHDL [3], the simulation environment will be greatly improved.
Reference: [3] <author> Berge, Fonfoua, Maginot, and Rouillard, </author> <title> VHDL 92. </title> <publisher> Kluwer, </publisher> <year> 1992. </year> <note> in press. 13 </note>
Reference-contexts: VHDL [2] is emerging as a standard among HDLs, with a large number of language constructs, many of which are not synthesizable. With the addition of new features in the recent enhancement of VHDL <ref> [3] </ref>, the simulation environment will be greatly improved. Unfortunately, the synthesizable subset of the language is still lagging far behind. Access type and selected name constructs in VHDL are similar to the bounded indirection construct discussed in this paper.
Reference: [4] <author> R. Vemuri, P. Mamtora, P. Sinha, N. Kumar, J. Roy, and R. Vutukuru, </author> <title> "Experiences in functional validation of a high level synthesis system," </title> <booktitle> in Proceedings of the 30th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 194-201, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Unfortunately, the synthesizable subset of the language is still lagging far behind. Access type and selected name constructs in VHDL are similar to the bounded indirection construct discussed in this paper. But, these and other pointer constructs in VHDL can not be synthesized by most tools <ref> [4, 5] </ref>. The Verilog R fl [6] hardware description language lacks many of the constructs in VHDL, but has been quite popular due to its simplicity and availability of synthesis tools.
Reference: [5] <author> W. Ecker and S. Marz, </author> <title> "System-level specification and design using VHDL: A case study," </title> <booktitle> in Proceedings of IFIP Conference on Hardware Description Languages and their Applications (CHDL), </booktitle> <year> 1993. </year>
Reference-contexts: Unfortunately, the synthesizable subset of the language is still lagging far behind. Access type and selected name constructs in VHDL are similar to the bounded indirection construct discussed in this paper. But, these and other pointer constructs in VHDL can not be synthesized by most tools <ref> [4, 5] </ref>. The Verilog R fl [6] hardware description language lacks many of the constructs in VHDL, but has been quite popular due to its simplicity and availability of synthesis tools.
Reference: [6] <author> D. E. Thomas and P. Moorby, </author> <title> The Verilog R fl Hardware Description Language. </title> <publisher> Kluwer, </publisher> <year> 1991. </year>
Reference-contexts: Access type and selected name constructs in VHDL are similar to the bounded indirection construct discussed in this paper. But, these and other pointer constructs in VHDL can not be synthesized by most tools [4, 5]. The Verilog R fl <ref> [6] </ref> hardware description language lacks many of the constructs in VHDL, but has been quite popular due to its simplicity and availability of synthesis tools.
Reference: [7] <author> K.-T. Cheng and A. S. Krishnakumar, </author> <title> "Automatic functional test generation using the extended finite state machine model," </title> <booktitle> in Proceedings of the 30th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 86-91, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: The Verilog R fl [6] hardware description language lacks many of the constructs in VHDL, but has been quite popular due to its simplicity and availability of synthesis tools. Some aspects of behavior tables are similar to Cheng and Krishnakumar's extended finite state machine model <ref> [7] </ref>, and Drusinsky and Harel's statecharts [8], but these finite state machine models do not support indirection. Bounded indirection is a synthesizable structural construct, that can be added to any HDL to enhance the expressiveness of the synthesizable language. We describe a method for synthesizing bounded indirection.
Reference: [8] <author> D. Drusinsky and D. Harel, </author> <title> "Using statecharts for hardware description and synthesis," </title> <journal> Transactions on CAD, </journal> <volume> vol. 8, </volume> <pages> pp. 798-807, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: Some aspects of behavior tables are similar to Cheng and Krishnakumar's extended finite state machine model [7], and Drusinsky and Harel's statecharts <ref> [8] </ref>, but these finite state machine models do not support indirection. Bounded indirection is a synthesizable structural construct, that can be added to any HDL to enhance the expressiveness of the synthesizable language. We describe a method for synthesizing bounded indirection. Transformations on bounded indirection constructs are 2 also presented.
Reference: [9] <author> S. D. Johnson, </author> <title> Synthesis of Digital Designs from Recursion Equations. </title> <publisher> Cambridge: MIT Press, </publisher> <year> 1984. </year> <note> ACM Distinguished Dissertation 1984. </note>
Reference-contexts: We describe a method for synthesizing bounded indirection. Transformations on bounded indirection constructs are 2 also presented. The research reported here grew out of our design derivation methodology, which is based on first order functional algebra <ref> [9] </ref>. We present three substantial examples to illustrate the different uses of bounded indirection. 2 Behavior Tables Behavior tables [1] are an extension of register transfer tables that can model control, data-path, protocol, and data abstraction facets of a system.
Reference: [10] <author> E. M. Sentovich, K. J. Singh, C. Moon, H. Savoj, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> "Sequential circuit design using synthesis and optimization," </title> <booktitle> in Proceedings of International Conference on Computer Design, </booktitle> <pages> pp. 328-333, </pages> <publisher> IEEE, </publisher> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: The rest of the behavior table can be synthesized using sequential synthesis techniques <ref> [10] </ref>. 4 Value Indirection A simple construct in behavior tables can be used to specify that the value to be assigned to some register/signal is selected from a bounded set of signals based on the indirection value in a register/signal.
Reference: [11] <author> W. A. Hunt, </author> <title> "A formal HDL and its use in the FM9001 verification," in Mechanized Reasoning in Hardware Design (C. </title> <editor> Hoare and M. Gordon, eds.), </editor> <publisher> Prentice-Hall, </publisher> <year> 1992. </year>
Reference-contexts: d 2 (t a 1 ) = i The equivalent transition set must have a transition with every possible dereference value as a decision, and all other values of the corresponding transitions must be equivalent. 4.2 Example: FM9001 microprocessor Let us consider a behavior table description of Hunt's FM9001 microprocessor <ref> [11] </ref> with instances of value indirection. The FM9001 is a 32-bit microprocessor and mechanically verified at the gate level using the Nqthm theorem prover. It has an internal register file 9 with 16 general purpose registers any one of which can be used as the pc.
Reference: [12] <author> B. Bose and S. D. Johnson, "DDD-FM9001: </author> <title> Derivation of a verified microprocessor. an exercise in integrating verification with formal derivation," </title> <booktitle> in Proceedings of IFIP Conference on Correct Hardware Design and Verification Methods, </booktitle> <publisher> Springer, </publisher> <year> 1993. </year> <month> 14 </month>
Reference-contexts: Details about the derivation and synthesis of an implementation of the FM9001 can be 10 found in <ref> [1, 12] </ref>. 5 Net Indirection Using the basic mechanisms developed in the previous sections, we will now define a powerful construct that can be used to selectively connect ports between behavior tables.
References-found: 12

