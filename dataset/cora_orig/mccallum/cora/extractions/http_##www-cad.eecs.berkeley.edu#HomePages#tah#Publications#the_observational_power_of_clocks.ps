URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/the_observational_power_of_clocks.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/the_observational_power_of_clocks.html
Root-URL: http://www.cs.berkeley.edu
Title: The Observational Power of Clocks  
Author: Rajeev Alur Costas Courcoubetis Thomas A. Henzinger 
Abstract: We develop a theory of equivalences for timed systems. Two systems are equivalent iff external observers cannot observe differences in their behavior. The notion of equivalence depends, therefore, on the distinguishing power of the observers. The power of an observer to measure time results in untimed, clock, and timed equivalences: an untimed observer cannot measure the time difference between events; a clock observer uses a clock to measure time differences with finite precision; a timed observer is able to measure time differences with arbitrary precision. We show that the distinguishing power of clock observers grows with the number of observers, and approaches, in the limit, the distinguishing power of a timed observer. More precisely, given any equivalence for untimed systems, two timed systems are k-clock congruent, for a nonnegative integer k, iff their compositions with every environment that uses k clocks are untimed equivalent. Both k-clock bisimulation congruence and k-clock trace congruence form strict decidable hierarchies that converge towards the corresponding timed equivalences. Moreover, k-clock bisimulation congruence and k-clock trace congruence provide an adequate and abstract semantics for branching-time and linear-time logics with k clocks. Our results impact on the verification of timed systems in two ways. First, our decision procedure for k-clock bisimulation congruence leads to a new, symbolic, decision procedure for timed bisimilarity. Second, timed trace equivalence is known to be undecidable. If the number of environment clocks is bounded, however, then our decision procedure for k-clock trace congruence allows the verification of timed systems in a trace model. fl A preliminary version of this paper appeared in the Proceedings of the International Conference on Concurrency Theory (CONCUR 94), Lecture Notes in Computer Science 836, Springer-Verlag, 1994, pp. 162-177. y AT&T Bell Laboratories, Murray Hill, NJ. z Department of Computer Science, University of Crete, Greece. Supported in part by the BRA ESPRIT project REACT. x Department of Computer Science, Cornell University, Ithaca, NY. Supported in part by the National Science Foundation under grant CCR-9200794 and by the United States Air Force Office of Scientific Research under contract F49620-93-1-0056. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alur, C. Courcoubetis, and D. Dill. </author> <title> Model checking in dense real time. </title> <journal> Information and Computation, </journal> <volume> 104 </volume> <pages> 2-34, </pages> <year> 1993. </year>
Reference-contexts: Each automaton transition may compare some of the clock values with integer constants and reset some of the clocks. This model of timed automata has been widely and successfully used for the specification and verification of real-time systems <ref> [1, 3, 4, 6, 7, 9, 11, 12] </ref>. Our results on bisimulation equivalences in Section 3 are obtained by studying bisimulation games. We define time-abstract (or untimed ), k-clock, and timed bisimulation games. Suppose that Player I attempts to distinguish two systems, while Player II tries to show bisimilarity. <p> Region equivalence Emptiness checking and model checking algorithms for timed automata are based on an equivalence relation that partitions the states of a timed automaton A into so-called regions <ref> [1, 4] </ref>. Two clock mappings and -0 for A are region equivalent, written - r -0 , iff 1. <p> We obtain the bounded k-clock transition system ^ S k u (A) with the state set Q A fi <ref> [0; 1] </ref> k and with the bounded k-clock *-moves as labels. The following lemma shows that this modification of the k-clock transition system for A does not change the induced bisimulation. <p> The following lemma shows that this modification of the k-clock transition system for A does not change the induced bisimulation. Lemma 2 For all k 0, all states q and q 0 of a timed automaton A, and all k-tuples -; -0 2 <ref> [0; 1] </ref> k such that and- 0 are region equivalent, the augmented states (q; -) and (q 0 ; -0 ) are bisimilar with respect to the bounded k-clock transition system ^ S k u (A) iff they are bisimilar with respect to the k-clock transition system S k u (A). <p> In this section, we give a logical characterization of both k-clock congruence and untimed bisimulation congruence. For this purpose, we extend CTL with clock variables, thus obtaining the real-time logic TCTL <ref> [1] </ref>. The clock variables are bound by reset quantifiers, and they can be compared with nonnegative integer constants (the original definition of TCTL uses a freeze quantifier, which is equivalent to the reset quantifier). <p> We prove that TCTL ffi -equivalence and TCTL - equivalence coincide with each other and with untimed bisimulation congruence. First we observe that the equivalence induced by TCTL is weaker than region equivalence <ref> [1] </ref>: if two augmented states (q; -) and (q 0 ; -0 ) are region equivalent, then for all TCTL -formulas , q j= iff q 0 j= -0 .
Reference: [2] <author> R. Alur, C. Courcoubetis, N. Halbwachs, D. Dill, and H. Wong-Toi. </author> <title> Minimization of timed transition systems. </title> <booktitle> In 3rd CONCUR, </booktitle> <pages> 340-354. </pages> <publisher> Springer LNCS 630, </publisher> <year> 1992. </year>
Reference-contexts: Alternatively, if every process has one clock, then the distinguishing power of an environment increases with the number of environment processes. Decision procedures are known for time-abstract and timed bisimilarity and for time-abstract trace equivalence <ref> [2, 4, 14, 15, 17] </ref>. We present algorithms for 2 deciding the k-clock congruences. <p> Two states ffi and ffi 0 of Example 1 are untimed bisimilar iff either both ffi; ffi 0 1 or both ffi; ffi 0 &gt; 1. Indeed, untimed bisimilarity always has finitely many equivalence classes, and each equivalence class is a union of regions <ref> [2, 10] </ref>. It follows that region equivalence is an untimed bisimulation ( r ub ). Moreover, every timed bisimulation is an untimed bisimulation ( tb ub ).
Reference: [3] <author> R. Alur, C. Courcoubetis, and T. Henzinger. </author> <title> Computing accumulated delays in real-time systems. </title> <booktitle> In 5th CAV, </booktitle> <pages> 181-193. </pages> <publisher> Springer LNCS 697, </publisher> <year> 1993. </year>
Reference-contexts: Each automaton transition may compare some of the clock values with integer constants and reset some of the clocks. This model of timed automata has been widely and successfully used for the specification and verification of real-time systems <ref> [1, 3, 4, 6, 7, 9, 11, 12] </ref>. Our results on bisimulation equivalences in Section 3 are obtained by studying bisimulation games. We define time-abstract (or untimed ), k-clock, and timed bisimulation games. Suppose that Player I attempts to distinguish two systems, while Player II tries to show bisimilarity.
Reference: [4] <author> R. Alur and D. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: This paper studies the relationship between several equivalences on timed systems that are induced by different capabilities of an observer to measure time. A timed system always proceeds in one of two ways|by performing an action or by letting a certain amount of real time pass (see, for example, <ref> [4, 8, 12, 16] </ref>). The observability of actions and time delays are orthogonal issues, and as we are interested in the latter, we settle the former by studying the common untimed equivalences of bisimilarity (Section 3) and trace equivalence (Section 4). <p> Alternatively, if every process has one clock, then the distinguishing power of an environment increases with the number of environment processes. Decision procedures are known for time-abstract and timed bisimilarity and for time-abstract trace equivalence <ref> [2, 4, 14, 15, 17] </ref>. We present algorithms for 2 deciding the k-clock congruences. <p> Via automata, games, and logics Clocks provide a clean and general paradigm for specifying timed systems: clocks have been added to such diverse languages as temporal logic [5], !-automata <ref> [4] </ref>, and process algebra [11]. We develop our results using the model of timed automata (Section 2). A timed automaton operates with finite control|a finite set of control locations and a finite set of real-valued clocks. <p> Each automaton transition may compare some of the clock values with integer constants and reset some of the clocks. This model of timed automata has been widely and successfully used for the specification and verification of real-time systems <ref> [1, 3, 4, 6, 7, 9, 11, 12] </ref>. Our results on bisimulation equivalences in Section 3 are obtained by studying bisimulation games. We define time-abstract (or untimed ), k-clock, and timed bisimulation games. Suppose that Player I attempts to distinguish two systems, while Player II tries to show bisimilarity. <p> Region equivalence Emptiness checking and model checking algorithms for timed automata are based on an equivalence relation that partitions the states of a timed automaton A into so-called regions <ref> [1, 4] </ref>. Two clock mappings and -0 for A are region equivalent, written - r -0 , iff 1. <p> While timed trace equivalence is a congruence, it is computation-ally intractable. The undecidability proof for tt follows the proof that the language inclusion problem for timed automata over infinite words is undecidable <ref> [4] </ref>. Theorem 7 The problem of deciding if two initial states of a timed automaton are timed trace equivalent is undecidable. <p> Untimed trace equivalence is strictly weaker than region equivalence. Indeed, for all states q, the untimed language L (S u (A); q) can be characterized as a regular set over regions <ref> [4] </ref>. The problem of deciding untimed trace equivalence can then be reduced to the problem of deciding the language equivalence of two finite automata over regions. Theorem 8 There is an EXPSPACE algorithm that decides if two states of a timed automaton are untimed trace equivalent. <p> Corresponding relations can, of course, be defined for any equivalence relation on labeled transition systems, say, failures equivalence. (2) We restricted ourselves to finite behaviors of systems, thus omitting liveness constraints. In the context of trace equivalences in particular, one typically considers automata on infinite words with acceptance conditions <ref> [4] </ref>, and the full temporal logic TPTL [5]. We expect our results to generalize in a straightforward way. (3) Our subject was the distinguishing power of clocks as observers. A complementary topic is the expressive power of clocks as specifiers.
Reference: [5] <author> R. Alur and T. Henzinger. </author> <title> A really temporal logic. </title> <journal> J. ACM, </journal> <volume> 41 </volume> <pages> 181-204, </pages> <year> 1994. </year>
Reference-contexts: Via automata, games, and logics Clocks provide a clean and general paradigm for specifying timed systems: clocks have been added to such diverse languages as temporal logic <ref> [5] </ref>, !-automata [4], and process algebra [11]. We develop our results using the model of timed automata (Section 2). A timed automaton operates with finite control|a finite set of control locations and a finite set of real-valued clocks. <p> Linear-time logics with clocks If we extend linear temporal logic with clock variables, we obtain the real-time logic TPTL <ref> [5] </ref>. Since we consider only finite words, we omit the temporal operator 2. The formulas of TPTL ffi are defined inductively as ::= x c j c x j : j 1 ^ 2 j fl: j (x := 0): for clocks x, nonnegative integers c, and input symbols . <p> In the context of trace equivalences in particular, one typically considers automata on infinite words with acceptance conditions [4], and the full temporal logic TPTL <ref> [5] </ref>. We expect our results to generalize in a straightforward way. (3) Our subject was the distinguishing power of clocks as observers. A complementary topic is the expressive power of clocks as specifiers.
Reference: [6] <author> R. Alur, T. Henzinger, and M. Vardi. </author> <title> Parametric real-time reasoning. </title> <booktitle> In 25th ACM STOC, </booktitle> <pages> 592-601, </pages> <year> 1993. </year>
Reference-contexts: Each automaton transition may compare some of the clock values with integer constants and reset some of the clocks. This model of timed automata has been widely and successfully used for the specification and verification of real-time systems <ref> [1, 3, 4, 6, 7, 9, 11, 12] </ref>. Our results on bisimulation equivalences in Section 3 are obtained by studying bisimulation games. We define time-abstract (or untimed ), k-clock, and timed bisimulation games. Suppose that Player I attempts to distinguish two systems, while Player II tries to show bisimilarity.
Reference: [7] <author> C. Courcoubetis and M. Yannakakis. </author> <title> Minimum and maximum delay problems in real-time systems. </title> <booktitle> In 3rd CAV, </booktitle> <pages> 399-409. </pages> <publisher> Springer LNCS 575, </publisher> <year> 1991. </year>
Reference-contexts: Each automaton transition may compare some of the clock values with integer constants and reset some of the clocks. This model of timed automata has been widely and successfully used for the specification and verification of real-time systems <ref> [1, 3, 4, 6, 7, 9, 11, 12] </ref>. Our results on bisimulation equivalences in Section 3 are obtained by studying bisimulation games. We define time-abstract (or untimed ), k-clock, and timed bisimulation games. Suppose that Player I attempts to distinguish two systems, while Player II tries to show bisimilarity.
Reference: [8] <author> T. Henzinger, Z. Manna, and A. Pnueli. </author> <title> Temporal proof methodologies for real-time systems. </title> <booktitle> In 18th ACM POPL, </booktitle> <pages> 353-366, </pages> <year> 1991. </year>
Reference-contexts: This paper studies the relationship between several equivalences on timed systems that are induced by different capabilities of an observer to measure time. A timed system always proceeds in one of two ways|by performing an action or by letting a certain amount of real time pass (see, for example, <ref> [4, 8, 12, 16] </ref>). The observability of actions and time delays are orthogonal issues, and as we are interested in the latter, we settle the former by studying the common untimed equivalences of bisimilarity (Section 3) and trace equivalence (Section 4).
Reference: [9] <author> T. Henzinger, X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> Symbolic model checking for real-time systems. </title> <booktitle> In 7th IEEE LICS, </booktitle> <pages> 394-406, </pages> <year> 1992. </year>
Reference-contexts: Each automaton transition may compare some of the clock values with integer constants and reset some of the clocks. This model of timed automata has been widely and successfully used for the specification and verification of real-time systems <ref> [1, 3, 4, 6, 7, 9, 11, 12] </ref>. Our results on bisimulation equivalences in Section 3 are obtained by studying bisimulation games. We define time-abstract (or untimed ), k-clock, and timed bisimulation games. Suppose that Player I attempts to distinguish two systems, while Player II tries to show bisimilarity.
Reference: [10] <author> K. Laren and Y. Wang. </author> <title> Time-abstracting bisimulation: implicit specifications and decidability. </title> <booktitle> In Mathematical Foundations of Programming Semantics, </booktitle> <year> 1993. </year>
Reference-contexts: Related work The relationship between timed bisimilarity and untimed bisim-ulation congruence is studied also in <ref> [10] </ref>. There, it is shown that timed bisim-ilarity coincides with untimed bisimulation congruence provided that the observer can compare clock values with arbitrary rational constants; indeed, in 3 this scenario a single observer clock suffices. <p> Two states ffi and ffi 0 of Example 1 are untimed bisimilar iff either both ffi; ffi 0 1 or both ffi; ffi 0 &gt; 1. Indeed, untimed bisimilarity always has finitely many equivalence classes, and each equivalence class is a union of regions <ref> [2, 10] </ref>. It follows that region equivalence is an untimed bisimulation ( r ub ). Moreover, every timed bisimulation is an untimed bisimulation ( tb ub ).
Reference: [11] <author> N. Lynch and F. Vaandrager. </author> <title> Action transducers and timed automata. </title> <booktitle> In 3rd CONCUR, </booktitle> <pages> 436-455. </pages> <publisher> Springer LNCS 630, </publisher> <year> 1992. </year>
Reference-contexts: Via automata, games, and logics Clocks provide a clean and general paradigm for specifying timed systems: clocks have been added to such diverse languages as temporal logic [5], !-automata [4], and process algebra <ref> [11] </ref>. We develop our results using the model of timed automata (Section 2). A timed automaton operates with finite control|a finite set of control locations and a finite set of real-valued clocks. <p> Each automaton transition may compare some of the clock values with integer constants and reset some of the clocks. This model of timed automata has been widely and successfully used for the specification and verification of real-time systems <ref> [1, 3, 4, 6, 7, 9, 11, 12] </ref>. Our results on bisimulation equivalences in Section 3 are obtained by studying bisimulation games. We define time-abstract (or untimed ), k-clock, and timed bisimulation games. Suppose that Player I attempts to distinguish two systems, while Player II tries to show bisimilarity.
Reference: [12] <author> X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> From ATP to timed graphs and hybrid systems. In Real Time: </title> <booktitle> Theory in Practice, </booktitle> <pages> 549-572. </pages> <publisher> Springer LNCS 600, </publisher> <year> 1991. </year>
Reference-contexts: This paper studies the relationship between several equivalences on timed systems that are induced by different capabilities of an observer to measure time. A timed system always proceeds in one of two ways|by performing an action or by letting a certain amount of real time pass (see, for example, <ref> [4, 8, 12, 16] </ref>). The observability of actions and time delays are orthogonal issues, and as we are interested in the latter, we settle the former by studying the common untimed equivalences of bisimilarity (Section 3) and trace equivalence (Section 4). <p> Each automaton transition may compare some of the clock values with integer constants and reset some of the clocks. This model of timed automata has been widely and successfully used for the specification and verification of real-time systems <ref> [1, 3, 4, 6, 7, 9, 11, 12] </ref>. Our results on bisimulation equivalences in Section 3 are obtained by studying bisimulation games. We define time-abstract (or untimed ), k-clock, and timed bisimulation games. Suppose that Player I attempts to distinguish two systems, while Player II tries to show bisimilarity.
Reference: [13] <author> R. van Glabbeek. </author> <title> Comparative Concurrency Semantics and Refinement of Actions. </title> <type> PhD thesis, </type> <institution> Vrije Universiteit te Amsterdam, </institution> <year> 1990. </year>
Reference-contexts: In the case of untimed systems, a variety of equivalences have been promoted|most notably, perhaps, bisimilarity and trace equivalence|and although there may be no agreement as to which equivalence is most appropriate, the relationship between different equivalences is well understood (see, for example, <ref> [13] </ref>). This is not the case for timed systems, where the introduction of time as a continuous quantity makes the question of what is observable even more subtle.
Reference: [14] <author> K. Cerans. </author> <title> Decidability of bisimulation equivalence for parallel timer processes. </title> <booktitle> In 4th CAV, </booktitle> <pages> 302-315. </pages> <publisher> Springer LNCS 663, </publisher> <year> 1992. </year>
Reference-contexts: Alternatively, if every process has one clock, then the distinguishing power of an environment increases with the number of environment processes. Decision procedures are known for time-abstract and timed bisimilarity and for time-abstract trace equivalence <ref> [2, 4, 14, 15, 17] </ref>. We present algorithms for 2 deciding the k-clock congruences. <p> We present algorithms for 2 deciding the k-clock congruences. In the bisimulation world, where the k-clock hierarchy collapses at 2n + 1 clocks for a given pair of systems with n clocks, we obtain a new algorithm for deciding timed bisimilarity; unlike the decision procedure of <ref> [14] </ref>, our algorithm can be executed symbolically. In the trace world, where the timed equivalence is undecidable, we obtain an algorithm for checking the correctness of substitutions in a hierarchical verification process. <p> Indeed, the relations tb and r are incomparable; none is weaker than the other. Second, timed bisimilarity is a congruence. Third, timed bisimilarity is decidable: there is an EXPTIME algorithm to decide if two given states of a timed automaton are timed bisimi-lar <ref> [14] </ref>. 3.2 Untimed bisimilarity Two states q and q 0 of a timed automaton A are untimed bisimilar, written q ub q 0 , iff q and q 0 are bisimilar with respect to the untimed transition system S u (A). <p> Since the iterative approximation algorithm can be executed symbolically, by representing equivalence classes as formulas, we expect it to be more practical and flexible than the algorithm of <ref> [14] </ref>. 3.4 Branching-time logics with clocks The bisimilarity of states of a labeled transition system can be characterized by a modal next-state logic called Hennessy-Milner logic or, equivalently, by the branching-time temporal logic CTL: two states are bisimilar iff they satisfy the same CTL formulas.
Reference: [15] <author> K. Cerans, J. Godskesen, and K. Larsen. </author> <title> Timed modal specification: </title> <booktitle> theory and tools. In 5th CAV, </booktitle> <pages> 253-267. </pages> <publisher> Springer LNCS 697, </publisher> <year> 1993. </year>
Reference-contexts: Alternatively, if every process has one clock, then the distinguishing power of an environment increases with the number of environment processes. Decision procedures are known for time-abstract and timed bisimilarity and for time-abstract trace equivalence <ref> [2, 4, 14, 15, 17] </ref>. We present algorithms for 2 deciding the k-clock congruences.
Reference: [16] <author> Y. Wang. </author> <title> Real-time behavior of asynchronous agents. </title> <booktitle> In 1st CONCUR, </booktitle> <pages> 502-520. </pages> <publisher> Springer LNCS 458, </publisher> <year> 1990. </year>
Reference-contexts: This paper studies the relationship between several equivalences on timed systems that are induced by different capabilities of an observer to measure time. A timed system always proceeds in one of two ways|by performing an action or by letting a certain amount of real time pass (see, for example, <ref> [4, 8, 12, 16] </ref>). The observability of actions and time delays are orthogonal issues, and as we are interested in the latter, we settle the former by studying the common untimed equivalences of bisimilarity (Section 3) and trace equivalence (Section 4).
Reference: [17] <author> M. Yannakakis and D. Lee. </author> <title> An efficient algorithm for minimizing real-time transition systems. </title> <booktitle> In 5th CAV, </booktitle> <pages> 210-224. </pages> <publisher> Springer LNCS 697, </publisher> <year> 1993. </year> <month> 18 </month>
Reference-contexts: Alternatively, if every process has one clock, then the distinguishing power of an environment increases with the number of environment processes. Decision procedures are known for time-abstract and timed bisimilarity and for time-abstract trace equivalence <ref> [2, 4, 14, 15, 17] </ref>. We present algorithms for 2 deciding the k-clock congruences.
References-found: 17

