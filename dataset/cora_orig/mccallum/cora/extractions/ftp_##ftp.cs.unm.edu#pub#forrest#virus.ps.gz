URL: ftp://ftp.cs.unm.edu/pub/forrest/virus.ps.gz
Refering-URL: http://www.cs.unm.edu/~forrest/papers.html
Root-URL: http://www.cs.unm.edu
Email: asp@santafe.edu forrest@cs.unm.edu  raj@cs.unm.edu  
Title: Self-Nonself Discrimination in a Computer  
Author: Stephanie Forrest Alan S. Perelson Lawrence Allen Rajesh Cherukuri 
Address: 820 Los Arboles Ln.  New Mexico Santa Fe, N.M. 87501 Albuquerque, N.M. 87131-1386  Albuquerque, N.M. 87131-1386 Albuquerque, N.M. 87131-1386  
Affiliation: Dept. of Computer Science  University of  Dept. of Computer Science Dept. of Computer Science University of New Mexico University of New Mexico  
Abstract: The problem of protecting computer systems can be viewed generally as the problem of learning to distinguish self from other. We describe a method for change detection which is based on the generation of T cells in the immune system. Mathematical analysis reveals computational costs of the system, and preliminary experiments illustrate how the method might be applied to the problem of computer viruses. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. J. De Boer and A. S. Perelson. </author> <title> How diverse should the immune system be? In Proc. </title> <journal> Roy. Soc. London B, </journal> <volume> volume 252, </volume> <pages> pages 171-175, </pages> <address> London, </address> <year> 1993. </year>
Reference-contexts: This section describes how we make our predictions. The following analysis is taken from <ref> [1] </ref>. Suppose that we have some string that we want to protect. As we mentioned before, this string could be an application program, some data, or any other element of a computer system that is stored in memory.
Reference: [2] <author> J. D. Farmer, N. H. Packard, and A. S. Perelson. </author> <title> The immune system, adaptation, and machine learning. </title> <editor> In D. Farmer, A. Lapedes, N. Packard, and B. Wendroff, editors, </editor> <booktitle> Evolution, games and learning, </booktitle> <pages> pages 187-204. </pages> <publisher> North-Holland, </publisher> <address> Amster-dam, </address> <year> 1986. </year> <note> (Reprinted from Physica, 22D, 187-204). </note>
Reference-contexts: The algorithm presented here is related to earlier immune-system models based on a universe in which antigens (foreign material) and antibodies (the cells that perform the recognition) are represented by binary strings <ref> [2, 11, 4, 3] </ref>. The complex chemistry of antibody/antigen recognition is highly simplified in these binary immune systems, being modeled as string matching.
Reference: [3] <author> S. Forrest, B. Javornik, R. Smith, and A. S. Perel-son. </author> <title> Using genetic algorithms to explore pattern recognition in the immune system. </title> <journal> Evolutionary Computation, </journal> <volume> 1(3) </volume> <pages> 191-211, </pages> <year> 1993. </year>
Reference-contexts: The algorithm presented here is related to earlier immune-system models based on a universe in which antigens (foreign material) and antibodies (the cells that perform the recognition) are represented by binary strings <ref> [2, 11, 4, 3] </ref>. The complex chemistry of antibody/antigen recognition is highly simplified in these binary immune systems, being modeled as string matching. <p> The complex chemistry of antibody/antigen recognition is highly simplified in these binary immune systems, being modeled as string matching. These binary models have been used to study several different aspects of the immune system, including its ability to detect common patterns in noisy environments <ref> [3] </ref>, its ability to discover and maintain coverage of diverse pattern classes [10], and its ability to learn effectively, even when not all antibodies are expressed and not all antigens are presented [5].
Reference: [4] <author> S. Forrest and A. S. Perelson. </author> <title> Genetic algorithms and the immune system. </title> <editor> In H. Schwefel and R. Maenner, editors, </editor> <title> Parallel Problem Solving from Nature, </title> <address> Berlin, </address> <year> 1991. </year> <note> Springer-Verlag (Lecture Notes in Computer Science). </note>
Reference-contexts: The algorithm presented here is related to earlier immune-system models based on a universe in which antigens (foreign material) and antibodies (the cells that perform the recognition) are represented by binary strings <ref> [2, 11, 4, 3] </ref>. The complex chemistry of antibody/antigen recognition is highly simplified in these binary immune systems, being modeled as string matching.
Reference: [5] <author> R. Hightower, S. Forrest, and A. S. Perelson. </author> <title> The evolution of secondary organization in immune system gene libraries. </title> <booktitle> In Proceedings of the Second European Conference on Artificial Life, </booktitle> <publisher> (in press). </publisher>
Reference-contexts: study several different aspects of the immune system, including its ability to detect common patterns in noisy environments [3], its ability to discover and maintain coverage of diverse pattern classes [10], and its ability to learn effectively, even when not all antibodies are expressed and not all antigens are presented <ref> [5] </ref>. In the current algorithm, we logically split the self string into equal-size segments to generate valid antibodies (detectors), providing a collection of strings analogous to internal cells and molecules in the body.
Reference: [6] <author> G. H. Kim and E. H. Spafford. </author> <title> The design and implementation of tripwire: a file system integrity checker. </title> <type> Technical Report CSD-TR-93-071, </type> <institution> Pur-due University, Dept. of Cmputer Sciences, Pur-due University, West Lafayette, </institution> <note> IN 47907-1398, </note> <year> 1993. </year>
Reference-contexts: As with other authentication methods, our method relies on the guarantee that the data to be protected are uncorrupted at the time that the detectors are generated. There are several change-detection tools available which employ a variety of change-detection methods and signature functions, e.g., Tripwire <ref> [6] </ref>. Tools such as Tripwire devote considerable attention to the important problems of administration, portability, and reporting. Our work is properly viewed as an algo-rithm, comparable in nature to a signature function, which might be incorporated into a tool like Trip-wire.
Reference: [7] <author> M. Ludwig. </author> <title> The little black book of computer viruses. </title> <publisher> American Eagle Publishers, </publisher> <year> 1991. </year>
Reference-contexts: The rightmost column, labeled (P F ) 5 , shows the dramatic improvement that is obtained if only five copies of the detection algorithm are present (i.e., five independent sites). A final set of experiments tested a simple file-infector virus. As an example, consider the TIMID virus, described in <ref> [7] </ref>. This virus modifies the first five bytes of a COM file and appends 300 bytes of code to the end of the file.
Reference: [8] <author> J. K. Percus, O. Percus, and A. S. Perelson. </author> <title> Predicting the size of the antibody combining region from consideration of efficient self/non-self discrimination. </title> <booktitle> Proceedings of the National Academy of Science, </booktitle> <volume> 90 </volume> <pages> 1691-1695, </pages> <year> 1993. </year>
Reference-contexts: If: m = the number of alphabet symbols, l = the number of symbols in a string (length of the string), and r =the number of contiguous matches re quired for a match, then <ref> [9, 8] </ref>, P M m r [(l r)(m 1)=m + 1]: The approximation is only good if m r &lt;< 1, so we use the exact formula for the cases in which the approximation fails [12].
Reference: [9] <author> J. K. Percus, O. E. Percus, </author> <title> and A.S. Perelson. Probability of self-nonself discrimination. </title> <editor> In A. S. Perelson and G. Weisbuch, editors, </editor> <title> Theoretical and Experimental Insights into Immunology, </title> <publisher> NY, in press. Springer-Verlag. </publisher>
Reference-contexts: If: m = the number of alphabet symbols, l = the number of symbols in a string (length of the string), and r =the number of contiguous matches re quired for a match, then <ref> [9, 8] </ref>, P M m r [(l r)(m 1)=m + 1]: The approximation is only good if m r &lt;< 1, so we use the exact formula for the cases in which the approximation fails [12].
Reference: [10] <author> R. Smith, S. Forrest, and A. S. Perelson. </author> <title> Searching for diverse, cooperative populations with genetic algorithms. </title> <journal> Evolutionary Computation, </journal> <volume> 1(2) </volume> <pages> 127-149, </pages> <year> 1993. </year>
Reference-contexts: These binary models have been used to study several different aspects of the immune system, including its ability to detect common patterns in noisy environments [3], its ability to discover and maintain coverage of diverse pattern classes <ref> [10] </ref>, and its ability to learn effectively, even when not all antibodies are expressed and not all antigens are presented [5].
Reference: [11] <author> I. Stadnyk. </author> <title> Schema recombination in pattern recognition problems. </title> <booktitle> In Proceedings of the Second International Conference on Genetic Algorithms, </booktitle> <pages> pages 27-35, </pages> <address> Hillsdale, NJ, 1992. </address> <publisher> Lawrence Erlbaum Associates. </publisher>
Reference-contexts: The algorithm presented here is related to earlier immune-system models based on a universe in which antigens (foreign material) and antibodies (the cells that perform the recognition) are represented by binary strings <ref> [2, 11, 4, 3] </ref>. The complex chemistry of antibody/antigen recognition is highly simplified in these binary immune systems, being modeled as string matching.
Reference: [12] <author> J. V. Uspensky. </author> <title> Introduction to Mathematical Probability. </title> <publisher> McGraw-Hill Book Co., </publisher> <address> NY, N.Y., </address> <year> 1937. </year> <pages> pp. 77-79. </pages>
Reference-contexts: the string), and r =the number of contiguous matches re quired for a match, then [9, 8], P M m r [(l r)(m 1)=m + 1]: The approximation is only good if m r &lt;< 1, so we use the exact formula for the cases in which the approximation fails <ref> [12] </ref>. Table 1 illustrates the effect of varying r and l on P M for different values of m. The first row shows the configuration we have used in most of our experiments. Setting r = 8 corresponds to a one-byte change.
References-found: 12

