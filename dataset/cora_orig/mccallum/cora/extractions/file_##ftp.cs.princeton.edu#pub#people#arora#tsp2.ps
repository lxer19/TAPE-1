URL: file://ftp.cs.princeton.edu/pub/people/arora/tsp2.ps
Refering-URL: http://www.cs.princeton.edu/~arora/publist.html
Root-URL: http://www.cs.princeton.edu
Title: Nearly Linear Time Approximation Schemes for Euclidean TSP and other Geometric Problems including Steiner Tree,
Author: Sanjeev Arora k. 
Keyword: p  
Note: The algorithm generalizes to the same set of Eu-clidean problems handled by the previous algorithm,  in N C 2  
Affiliation: Princeton University  
Abstract: We present a randomized polynomial time approximation scheme for Euclidean TSP in &lt; 2 that is substantially more efficient than our earlier scheme in [2] (and the scheme of Mitchell [21]). For any fixed c &gt; 1 and any set of n nodes in the plane, the new scheme finds a (1+ 1 c )-approximation to the optimum traveling salesman tour in O(n(log n) O(c) ) time. (Our earlier ) time. This time is polynomial (actually nearly linear) for every fixed c; d. Designing such a polynomial-time algorithm was an open problem (our earlier algorithm in [2] ran in superpolynomial time for d 3). We also use our ideas to design nearly-linear time approximation schemes for Euclidean versions of problems that are known to be in P, such as Minimum Spanning Tree and Min Cost Perfect Matching. All our algorithms can be derandomized, though the running time then increases by O(n d ) in &lt; d . They also have simple parallel implementations (say, scheme ran in n O(c) time.) For points in &lt; d the algorithm runs in O(n(log n) (O(
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Agarwal, H. Edelsbrunner, O. Schwarzkopf and E. Welzl. </author> <title> Euclidean MST and bichromatic closest pairs. </title> <journal> Discrete and Comp. Geo. </journal> <volume> 6 </volume> <pages> 407-422, </pages> <year> 1991. </year>
Reference-contexts: Geometric versions of problems such as Euclidean MST and Perfect Matching have been studied before, with an aim to exploit geometric structure and derive algorithms that are faster than the corresponding algorithms for general graphs. For any fixed dimension d, Agarwal et al. <ref> [1] </ref> have designed a ~ O (n 4=3 )-algorithm for Euclidean MST and Vaidya [26] has designed a ~ O (n 2:5 )-algorithm for matching.
Reference: [2] <author> S. Arora. </author> <title> Polynomial-time approximation schemes for Euclidean TSP and other geometric problems. </title> <booktitle> Proc. 37th IEEE FOCS 3 , pages 2-12, </booktitle> <year> 1996. </year> <note> Preliminary manuscript (with "quasipoly-nomial" in the title), January 20, </note> <year> 1996. </year>
Reference-contexts: However, until recently, we knew of no polynomial-time algorithm better than the Christofides algorithm from 1976 [7], which provably computes a tour of cost at most 1:5 times the optimum. Recently, Euclidean TSP was shown to have a polynomial time approximation scheme or PTAS (Arora <ref> [2] </ref> and some time later, Mitchell [21]). For any fixed c &gt; 1 and any n points in &lt; 2 , this algorithm in n O (c) time finds a tour of cost at most (1 + 1=c) times the optimum. <p> We regret, however, that the "poly (log n)" term grows as something like (log n) 40c even for points in &lt; 2 , so finding a practical version of this algorithm remains an open problem. Our new algorithm is similar to our earlier algorithm in <ref> [2] </ref>. That algorithm relied on the fact that the plane can be recursively partitioned such that some (1 + 1=c)-approximate salesman tour crosses each line of the partition at most r = O (c log n) times. <p> The approximation scheme of this paper relies on a similar result about (1 + 1=c)-approximate salesman tours, except we show that the parameter "r" needs to be only O (1=c). 2 This result|shown using a "cut-and-patch" on the optimum tour similar to that in <ref> [2] </ref>| relies on a new "charging" argument that looks at all levels in the partition simultaneously. <p> We suspect that our charging argument will find other uses in computational geometry. As shown in <ref> [2] </ref>, our "cut-and patch" approach gen eralizes to many other NP-hard problems such as Min-of cost (2 + 1=c)OP T in case of double-MST, then the running time reduces to O (poly (c)n log 3 n) and if one is willing to settle for solutions of cost (1:5 + 1=c)OP T <p> Euclidean Mincost Perfect Matching (EMCPM) : Given n points in &lt; 2 (or &lt; d in general), find the minimum cost set of nonadjacent edges that cover all vertices. A PTAS was described for the first three problems in <ref> [2] </ref>; prior to that they had constant factor approximation algorithms (see the survey by Bern and Epp stein [5]). <p> Thus it is reminiscent of the algorithm we described in <ref> [2] </ref>. However, the geometric partitioning in this paper is very simple: it is a variant of the familiar quadtree. Our algorithm starts with an O (n log n)-time "perturbation" of the instance that makes it well-rounded. <p> while entering and exiting, then this enumeration could have required as much as n 2 =2 time (since the number of edges among n nodes is n 2 n 2 =2), instead of m O (r) . 2.1 Proof of Structure Theorem The following simple lemma (which also appeared in <ref> [2] </ref>, but is a folk-theorem) will be important. When we later use this lemma, the "closed path" of the hypothesis will be a salesman path on some set of nodes.
Reference: [3] <institution> Polynomial-time approximation schemes for Euclidean TSP and other geometric problems. </institution> <note> Journal submission, 1997. Available from http://www.cs.princeton.edu/ arora. </note>
Reference-contexts: The theorem's proof is analogous to the &lt; 2 case but uses the &lt; d version of the Patching Lemma. See <ref> [3] </ref> for details. Other geometric norms. <p> The proof of this algorithm's correctness uses a charging argument and the fact that the Patching Lemma and Lemma 4 (suitably modified) holds for all of our problems (see <ref> [3] </ref> for details). Now we mention the problem-specific features of the algorithm. <p> The reason is that for each square it has to "guess" how many of the input nodes from each square are included in the final tour/spanning tree, and the number of choices for this is k. (For a detailed analsis see <ref> [3] </ref>.) Min Cost Perfect Matching The perturbation at the start of the algorithm requires some care, but otherwise the algorithm is similar to the TSP case. How to make the instance well-rounded. The procedure to make TSP instances well-rounded does not generalize to k-TSP, k-MST and EMCPM.
Reference: [4] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> Proof verification and intractability of approximation problems. </title> <booktitle> In Proc. 33rd IEEE FOCS, </booktitle> <pages> pages 13-22, </pages> <year> 1992. </year>
Reference: [5] <author> M. Bern and D. Eppstein. </author> <title> Approximation Algorithms for Geometric Problems. In Approximation Algorithms for NP-hard Problems, </title> <editor> editor D. Hochbaum, </editor> <publisher> PWS Publishing, </publisher> <year> 1996. </year>
Reference-contexts: A PTAS was described for the first three problems in [2]; prior to that they had constant factor approximation algorithms (see the survey by Bern and Epp stein <ref> [5] </ref>).
Reference: [6] <author> M. Bern, D. Eppstein, and S.-H.Teng. </author> <title> Parallel construction of quadtree and quality triangulations. </title> <booktitle> In Proc. 3rd WADS, </booktitle> <pages> pp 188-199. </pages> <publisher> Springer Verlar LNCS 709, </publisher> <year> 1993. </year>
Reference-contexts: In general the shifted quadtree has a very different structure than the original quadtree. However, since both have depth O (log n), they can be constructed very efficiently using a sorting-based algorithm in O (n log 2 n) time (even faster algorithms exist <ref> [6] </ref>). Our algorithm picks a random shift and constructs the corresponding shifted quadtree. Our Structure Theorem below guarantees that with high probability (over the choice of the random shifts), there exists a (1 + 1=c)-approximate tour that crosses each square in the shifted quadtree O (c) times. <p> Now suppose A &lt; L=n 2 . We pick random shifts as before and construct a shifted quadtree (this can be done in O (n log n) time <ref> [6] </ref>).
Reference: [7] <author> N. Christofides. </author> <title> Worst-case analysis of a new heuristic for the traveling salesman problem. </title> <type> Report 388, </type> <institution> Grad School of Industrial Administration, </institution> <address> CMU, </address> <year> 1976. </year>
Reference-contexts: Thus one could hope to resolve the above-mentioned paradox by designing an excellent approximation algorithm for geometric TSP. However, until recently, we knew of no polynomial-time algorithm better than the Christofides algorithm from 1976 <ref> [7] </ref>, which provably computes a tour of cost at most 1:5 times the optimum. Recently, Euclidean TSP was shown to have a polynomial time approximation scheme or PTAS (Arora [2] and some time later, Mitchell [21]).
Reference: [8] <author> W.Fernandez de la Vega and G.S.Lueker. </author> <title> Bin packing can be solved within 1+* in linear time. </title> <booktitle> Combinatorica:1(4), </booktitle> <pages> 349-355, </pages> <year> 1981. </year>
Reference-contexts: n for every fixed c; d. (Mitchell's algorithm seems to work only in &lt; 2 .) With the discovery of this algorithm, Eu-clidean TSP joined a select group of NP-hard problems that have PTAS's, a group that includes Subset-Sum (Ibarra and Kim [12]) and Bin-Packing (de la Vega and Lueker <ref> [8] </ref>; see also Karmarkar and Karp [14]) Though theoretically significant, the recent PTAS for Euclidean TSP is impractical. The constant inside the big-O is about 15, implying a running time n 30 for 1.5-approximation (that is, when c = 2).
Reference: [9] <author> D. Eppstein and J. Erickson. </author> <title> Iterated Nearest Neighbors and Finding Minimal Polytopes. </title> <journal> Discrete Comp. Geo., </journal> <volume> 11: </volume> <pages> 321-350, </pages> <year> 1994. </year>
Reference-contexts: First it computes in nearly-linear time a crude approximation to OP T that is correct within a factor n. (Algorithms to compute such approximations were known before our work; see [27] for matching and <ref> [9] </ref> for k-MST and k-TSP. The latter algorithm runs in O (nk log n) time.) Let A OP T n be this approximation. The procedure lays a grid of granularity A=8cn 2 in the plane and moves every node to its nearest gridpoint.
Reference: [10] <author> H. Gabow. </author> <title> Data Structures for weighted matching and nearest common ancestors with linking. </title> <booktitle> Proc. 1st ACM SODA, </booktitle> <pages> pages 434-443, </pages> <year> 1990. </year>
Reference: [11] <author> M. R. Garey, R. L. Graham, and D. S. Johnson. </author> <title> Some NP-complete geometric problems. </title> <booktitle> In Proc. ACM STOC, </booktitle> <pages> pp 10-22, </pages> <year> 1976. </year>
Reference-contexts: log n will be crossed by any edge of the optimum solution, in which case our decision to treat those squares as independent in stances is justified! 4 Conclusions Can the running time of our algorithm be improved? Since Euclidean TSP is strongly NP-hard (this follows from the reductions in <ref> [11, 22] </ref>, for example), any algorithm that computes (1 + c)- approximations must have a running time with some exponential dependence on c (unless of course, NP-complete problems can be solved in subexponential time).
Reference: [12] <author> O. H. Ibarra and C. E. Kim. </author> <title> Fast approximation algorithms for the knapsack and sum of subsets problems. </title> <journal> JACM, </journal> <volume> 22(4) </volume> <pages> 463-468, </pages> <year> 1975. </year>
Reference-contexts: log n)) d2 , which is quasipolynomial in n for every fixed c; d. (Mitchell's algorithm seems to work only in &lt; 2 .) With the discovery of this algorithm, Eu-clidean TSP joined a select group of NP-hard problems that have PTAS's, a group that includes Subset-Sum (Ibarra and Kim <ref> [12] </ref>) and Bin-Packing (de la Vega and Lueker [8]; see also Karmarkar and Karp [14]) Though theoretically significant, the recent PTAS for Euclidean TSP is impractical. The constant inside the big-O is about 15, implying a running time n 30 for 1.5-approximation (that is, when c = 2).
Reference: [13] <author> D. S. Johnson and Lyle A. McGeoch. </author> <title> The Traveling Salesman Problem: A Case Study in Local Optimization. </title> <booktitle> Chapter in Local Search in 3 FOCS= Foundations of Computer Science, STOC =Symposium on Theory of Computing, SODA = Symposium on Discrete Algorithms Combinatorial Optimization, </booktitle> <editor> E.H.L. Aarts and J.K. Lenstra (eds.), </editor> <publisher> John Wiley and Sons, </publisher> <address> NY. </address> <note> (To appear.) </note>
Reference-contexts: Versions of the Lin Kernighan heuristic [19] run |after careful tuning| fl Supported by NSF CAREER award NSF CCR-9502747 and an Alfred Sloan Fellowship. Email: arora@cs.princeton.edu in nearly linear time and often produce tours whose cost is within a few percent of the optimum (Johnson and McGeoch <ref> [13] </ref>). Potentially, this paradox could have a simple explanation since many "real-life" instances are geometric (see for example the TSPLIB library [24], a testbed for much experimental work on the TSP), and complexity-theoretic results may not apply to them.
Reference: [14] <author> N. Karmarkar and R.M. Karp. </author> <title> An efficient approximation scheme for the one-dimensional bin-packing problem. </title> <booktitle> In Proc. 23 rd IEEE FOCS, </booktitle> <pages> pages 312-320, </pages> <year> 1982. </year>
Reference-contexts: (Mitchell's algorithm seems to work only in &lt; 2 .) With the discovery of this algorithm, Eu-clidean TSP joined a select group of NP-hard problems that have PTAS's, a group that includes Subset-Sum (Ibarra and Kim [12]) and Bin-Packing (de la Vega and Lueker [8]; see also Karmarkar and Karp <ref> [14] </ref>) Though theoretically significant, the recent PTAS for Euclidean TSP is impractical. The constant inside the big-O is about 15, implying a running time n 30 for 1.5-approximation (that is, when c = 2).
Reference: [15] <author> R. M. Karp. </author> <title> Reducibility among combinatorial problems. </title> <editor> In R. E. Miller and J. W. Thatcher, editors, </editor> <booktitle> Complexity of Computer Computations, Advances in Computing Research, </booktitle> <pages> pages 85-103. </pages> <publisher> Plenum Press, </publisher> <year> 1972. </year>
Reference: [16] <author> R. M. Karp. </author> <title> Probabilistic analysis of partitioning algorithms for the TSP in the plane. </title> <journal> Math. Oper. Res. </journal> <volume> 2 (1977), </volume> <pages> 209-224. </pages>
Reference: [17] <author> E. Koutsoupias, M. Grigni, and C. H. Papadim-itriou. </author> <title> An Approximation Scheme for Planar Graph TSP. </title> <booktitle> In Proc. IEEE FOCS, </booktitle> <pages> pp 640-645, </pages> <year> 1995. </year>
Reference-contexts: For exam ple, a running time of O (n log 2 n+2 O (c) ) is conceivable in &lt; 2 . Finally, it would be nice to reduce the runtime of the PTAS for planar graph TSP <ref> [17] </ref> to near-linear from n O (c) . Acknowledgements I thank Tom Leighton for useful discussions at the start of this project, and Mihalis Yannakakis for helpful comments. I also thank Pankaj Agarwal, David Eppstein, and Jeff Erickson for their pointers to existing work in computational geometry.
Reference: [18] <author> E. L. Lawler, J. K. Lenstra, A. H. G. Rinnooy Kan, D. B. Shmoys. </author> <title> The traveling salesman problem. </title> <publisher> John Wiley, </publisher> <year> 1985 </year>
Reference-contexts: 1 Introduction The quest to understand the Traveling Salesman Problem has motivated research in many areas | such as linear programming, polyhedral theory, NP-completeness, probabilistic analysis of algorithms, approximation algorithms, and MAX SNP-completeness (see <ref> [18] </ref>). However, one paradox about the TSP remains unexplained: even though most theoretical results point to the problem's computational nastiness, in practice heuristics solve it quite well.
Reference: [19] <author> S. Lin and B. W. Kernighan. </author> <title> An effective heuristic algorithm for the traveling salesman problem. </title> <journal> Operations Research 21 </journal> <pages> 498-516, </pages> <year> 1973. </year>
Reference-contexts: However, one paradox about the TSP remains unexplained: even though most theoretical results point to the problem's computational nastiness, in practice heuristics solve it quite well. Versions of the Lin Kernighan heuristic <ref> [19] </ref> run |after careful tuning| fl Supported by NSF CAREER award NSF CCR-9502747 and an Alfred Sloan Fellowship. Email: arora@cs.princeton.edu in nearly linear time and often produce tours whose cost is within a few percent of the optimum (Johnson and McGeoch [13]).
Reference: [20] <author> J. Mitchell. </author> <title> Guillotine subdivisions approximate polygonal subdivisions: A simple new method for the geometric k-MST problem. </title> <booktitle> In Proc. ACM-SIAM SODA, </booktitle> <pages> pp. 402-208, </pages> <year> 1996. </year>
Reference: [21] <author> J. Mitchell. </author> <title> Guillotine subdivisions approximate polygonal subdivisions: Part II- A simple PTAS for geometric k-MST, TSP, and related problems. </title> <type> Preliminary manuscript, </type> <month> April 30, </month> <year> 1996. </year>
Reference-contexts: Recently, Euclidean TSP was shown to have a polynomial time approximation scheme or PTAS (Arora [2] and some time later, Mitchell <ref> [21] </ref>). For any fixed c &gt; 1 and any n points in &lt; 2 , this algorithm in n O (c) time finds a tour of cost at most (1 + 1=c) times the optimum.
Reference: [22] <author> C. H. Papadimitriou. </author> <title> Euclidean TSP is NP-complete. </title> <journal> TCS, </journal> <volume> 4, </volume> <pages> pp 237-244, </pages> <year> 1977. </year>
Reference-contexts: log n will be crossed by any edge of the optimum solution, in which case our decision to treat those squares as independent in stances is justified! 4 Conclusions Can the running time of our algorithm be improved? Since Euclidean TSP is strongly NP-hard (this follows from the reductions in <ref> [11, 22] </ref>, for example), any algorithm that computes (1 + c)- approximations must have a running time with some exponential dependence on c (unless of course, NP-complete problems can be solved in subexponential time).
Reference: [23] <author> C. Papadimitriou and M. Yannakakis. </author> <title> Optimization, approximation and complexity classes. </title> <journal> JCSS 43, </journal> <pages> pp. 425-440, </pages> <year> 1991. </year>
Reference-contexts: For example, Euclidean TSP | the version in which the nodes lie in &lt; 2 and distance is measured using the Euclidean or ` 2 norm| is not known to be MAX-SNP-hard, in contrast to Metric TSP (Papadimitriou and Yannakakis <ref> [23] </ref>). Thus one could hope to resolve the above-mentioned paradox by designing an excellent approximation algorithm for geometric TSP. However, until recently, we knew of no polynomial-time algorithm better than the Christofides algorithm from 1976 [7], which provably computes a tour of cost at most 1:5 times the optimum.
Reference: [24] <author> G. Reinelt. </author> <title> TSPLIB-A travelling salesman problem library. </title> <journal> ORSA J. Computing, </journal> <volume> 3, </volume> <pages> pp 376-384, </pages> <year> (1991). </year>
Reference-contexts: Email: arora@cs.princeton.edu in nearly linear time and often produce tours whose cost is within a few percent of the optimum (Johnson and McGeoch [13]). Potentially, this paradox could have a simple explanation since many "real-life" instances are geometric (see for example the TSPLIB library <ref> [24] </ref>, a testbed for much experimental work on the TSP), and complexity-theoretic results may not apply to them.
Reference: [25] <author> L. Trevisan. </author> <title> When Hamming meets Euclid: the approximability of geometric TSP and MST. </title> <booktitle> In Proc. 29th ACM STOC, </booktitle> <pages> pp 21-39, </pages> <year> 1997. </year>
Reference-contexts: Likewise, Trevisan <ref> [25] </ref> has presented evidence that every approximation scheme for &lt; d must have a running time with a doubly exponential dependence on d. He shows for some c &gt; 1 that finding a (1+1=c)- approximate solution in &lt; O (log n) is NP-hard.
Reference: [26] <author> P. </author> <title> Vaidya Geometry helps in matching. </title> <journal> SIAM J. Comp., </journal> <volume> 18 </volume> <pages> 1201-1225, </pages> <year> 1988. </year>
Reference-contexts: For any fixed dimension d, Agarwal et al. [1] have designed a ~ O (n 4=3 )-algorithm for Euclidean MST and Vaidya <ref> [26] </ref> has designed a ~ O (n 2:5 )-algorithm for matching. Vaidya [27] has also designed approximation schemes that compute (1 + 1=c)-approximations for MST and Euclidean Matching in ~ O (cn2 O (d) ) and ~ O (n 1:5 (2c) O (d) ) time respectively.
Reference: [27] <author> P. </author> <title> Vaidya Approximate minimum weight matching on k-dimensional spaces. </title> <journal> Algorithmica, </journal> <volume> 4: </volume> <pages> 569-583, </pages> <year> 1989. </year>
Reference-contexts: T in case of double-MST, then the running time reduces to O (poly (c)n log 3 n) and if one is willing to settle for solutions of cost (1:5 + 1=c)OP T in case of Christofides then its running time reduces to O (poly (c)n 1:5 log 3 n) (Vaidya <ref> [27] </ref>). 2 I originally conjectured that the "r" parameter needs to be (log n). I thank Karen Wang, whose failure to construct any instance demonstrating this [28] motivated me to abandon that conjecture. imum Steiner Tree, k-MST and k-TSP. <p> For any fixed dimension d, Agarwal et al. [1] have designed a ~ O (n 4=3 )-algorithm for Euclidean MST and Vaidya [26] has designed a ~ O (n 2:5 )-algorithm for matching. Vaidya <ref> [27] </ref> has also designed approximation schemes that compute (1 + 1=c)-approximations for MST and Euclidean Matching in ~ O (cn2 O (d) ) and ~ O (n 1:5 (2c) O (d) ) time respectively. <p> First it computes in nearly-linear time a crude approximation to OP T that is correct within a factor n. (Algorithms to compute such approximations were known before our work; see <ref> [27] </ref> for matching and [9] for k-MST and k-TSP. The latter algorithm runs in O (nk log n) time.) Let A OP T n be this approximation. The procedure lays a grid of granularity A=8cn 2 in the plane and moves every node to its nearest gridpoint.
Reference: [28] <author> K. Wang. </author> <title> Is the m parameter in Arora's TSP algorithm the best possible? Junior project, </title> <institution> Princeton University, </institution> <month> Fall </month> <year> 1996. </year>
Reference-contexts: I thank Karen Wang, whose failure to construct any instance demonstrating this <ref> [28] </ref> motivated me to abandon that conjecture. imum Steiner Tree, k-MST and k-TSP.
References-found: 28

