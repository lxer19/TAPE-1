URL: http://krr.irst.itc.it:1024/dl/course/articles/dl-vs-fol.ps.gz
Refering-URL: http://krr.irst.itc.it:1024/dl/course/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: On the relative expressiveness of description logics and predicate logics  
Author: Alex Borgida 
Address: New Brunswick, NJ 08903, USA  
Affiliation: Department of Computer Science, Rutgers University,  
Date: 82 (1996) 353-367  Received June 1995; revised January 1996  
Note: Artificial Intelligence  
Pubnum: 9600004-5 Research Note  
Abstract: It is natural to view concept and role definitions in description logics as expressing monadic and dyadic predicates in predicate calculus. We show that the descriptions built using the constructors usually considered in the DL literature are characterized exactly as the predicates definable by formulas in L 3 , the subset of first-order predicate calculus with monadic and dyadic predicates which allows only three variable symbols. In order to handle "number bounds", we allow numeric quantifiers, and for transitive closure of roles we use infinitary disjunction. Using previous results in the literature concerning languages with limited numbers of variables, we get as corollaries the existence of formulas of FOPC which cannot be expressed as descriptions. We also show that by omitting role composition, descriptions express exactly the formulas in L 2 , which is known to be decidable. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Andreka, J. van Benthem and I. Nemeti, </author> <title> Back and forth between modal logic and classical logic, </title> <journal> J. </journal> <note> Int. Gp. Pure Appl. Logic 3 (5) (1995) 685-720. </note>
Reference-contexts: The same referee points to a connection between description logics and L 2 via results concerning modal logics: the description logic ALC is a notational variant of modal logic [20]; modal logic can be expressed in L 2 <ref> [1] </ref>; L 2 can be expressed by an appropriate modal logic [10]. 2 In addition to their intrinsic interest, the results presented here have several relevant consequences for research on DLs and their application, because, as corollaries of previous results from the logical literature on L k , we have pointed
Reference: [2] <author> F. Baader, </author> <title> A formal definition for expressive power of Knowledge Representation Languages, </title> <booktitle> in: Proceedings ECAI-90, </booktitle> <address> Stockholm (1990) 53-58. </address>
Reference-contexts: Surprisingly, such a question has not been generally addressed in the knowledge representation literature (but 0004-3702/96/$15.00 c fl 1996 Elsevier Science B.V. All rights reserved SSDI ARTINT 1379 354 A. Borgida / Artificial Intelligence 82 (1996) 353-367 see <ref> [2] </ref>), although in databases there has been considerable work on comparing the "expressive power" of various query languages. <p> For example, without this precaution, the 1 For alternate techniques for comparing the "expressive power" of languages, see <ref> [2, 23] </ref>. 358 A.
Reference: [3] <editor> F. Baader, H-J. Burckert, J. Heinsohn, B. Hollunder, J. Muller, B. Nebel, W. Nutt and H. </editor> <title> Profitlich, Terminological knowledge representation: a proposal for a terminological logic, </title> <note> DFKI Report, DFKI, Saarbrucken (1992). </note>
Reference-contexts: Over the years, a considerable variety of DLs have been proposed, studied and implemented. Table 1 presents the language DL, which contains a comprehensive list of the constructors based on recent survey papers <ref> [3, 19, 24] </ref>. (Clearly, the set of constructors in DL is not minimal; this is intentional, since considerable work in the field is devoted to finding subsets of constructors for which various decision problems have good computational properties.) In the table, and elsewhere, we use the symbols A, B, C to
Reference: [4] <author> A. Borgida, </author> <title> Description logics in data management, </title> <journal> IEEE Trans. Knowledge Data Eng. </journal> <month> 7 </month> <year> (1995) </year> <month> 671-682. </month>
Reference-contexts: Borgida / Artificial Intelligence 82 (1996) 353-367 above kinds of formulas. In such cases, one must look for entirely new kinds of concept constructors. Second, in applications where DLs are used as query languages for existing data or knowledge bases (see <ref> [4] </ref> for a survey), one is very likely going to need an extended query language, since even the full DL cannot express the so-called "conjunctive queries"|the least powerful query languages considered in the relational database literature, and for which, incidentally, subsumption is definitely decidable.
Reference: [5] <author> A. Borgida and R.J. Brachman, </author> <title> Loading data into description reasoners, </title> <booktitle> in: Proceedings ACM SIGMOD Conference on Data Management, </booktitle> <address> Washington, DC (1993) 217-226. </address>
Reference-contexts: These limitations are all the more significant since, recently, there have been a number of proposals for using DLs as query languages for accessing data in databases (e.g., <ref> [5, 7] </ref>). It is in fact this practical question that motivated the present research. The equivalences established in this paper also offer, as incidental corollaries, alternate proofs of decidability and undecidability for several subsets of description constructors, using previously known results about predicate calculus. 2.
Reference: [6] <author> R.J. Brachman, </author> <title> A structural paradigm for representing knowledge, </title> <type> Ph.D. Thesis, </type> <institution> Division of Engineering and Applied Physics, Harvard University, </institution> <address> Cambridge, MA (1977). </address>
Reference-contexts: 1. Overview Description languages (DLs) are descendants of the kl-one <ref> [6] </ref> knowledge representation system, and have been the object of intensive theoretical study in the past decade, as well as forming the basis of several widely used implemented systems.
Reference: [7] <author> M. Buchheit, M. Jeusfeld, W. Nutt and M. Staudt, </author> <title> Subsumption between queries in object-oriented databases, </title> <institution> Inf. Syst. </institution> <month> 19 (1) </month> <year> (1994) </year> <month> 33-54. </month>
Reference-contexts: These limitations are all the more significant since, recently, there have been a number of proposals for using DLs as query languages for accessing data in databases (e.g., <ref> [5, 7] </ref>). It is in fact this practical question that motivated the present research. The equivalences established in this paper also offer, as incidental corollaries, alternate proofs of decidability and undecidability for several subsets of description constructors, using previously known results about predicate calculus. 2. <p> Parallel arguments apply in case the knowledge base contains additional kinds of axioms, dealing for example with the disjointness of certain descriptions. 5. Numeric quantifiers and transitive closure The translation of descriptions involving counting, such as at-least <ref> [7; players] </ref> into standard FOPC would seem to require seven distinct variables, which would put us outside the bounds of languages with limited variables.
Reference: [8] <author> J. Cai, M. Furer and N. Immerman, </author> <title> An optimal lower bound on the number of variables for graph identification, </title> <booktitle> in: Proceedings 30th IEEE Symposium on Foundations of Computer Science (1989) 612-617. A. Borgida / Artificial Intelligence 82 (1996) 353-367 367 </booktitle>
Reference-contexts: Note that L k does not limit the number of nested quantifiers in a formula since the same variable may be reused in nested subformulas, as in 8x; y:P (x; y) ) 9x:Q (y; x). Properties of such language families have been studied, among others, in <ref> [8, 11, 16] </ref>. In our case, since we are dealing with roles and concepts, we will be interested only in those formulas that (i) have one or two free variables (though they may have closed subformulas), and (ii) have only monadic and dyadic predicates. <p> In the former case, L 3 CNT could be replaced by the more general C 3 in the statement of the preceding theorem. The importance of this characterization lies in the fact that in a more recent paper <ref> [8] </ref>, Cai et al. present examples of the expressive limitations of C k . In particular, they describe pairs of graphs that cannot be distinguished using formulas of C k . These graphs can again be easily distinguished using only existential quantifiers and conjunction in FOPC. <p> In this case we get the equivalent of Theorem 1, but not the converse, since there are of course many formulas involving infinite disjunction that cannot be expressed as transitive closure. The inexpressibility results in <ref> [8, 11] </ref> are obtained using variants of Ehrenfeucht-Frasse pebbling games, which are shown to characterize L k and C k . <p> The inexpressibility results in [8, 11] are obtained using variants of Ehrenfeucht-Frasse pebbling games, which are shown to characterize L k and C k . Kolaitis and Vardi [13] present a modified pebbling game that characterizes C k extended with infinitary disjunction, and the proofs in <ref> [8] </ref> go through for this case, establishing that transitive closure will not be helpful in expressing the relevant formulas in [8]. As a result, we continue to have formulas in the FOPC with only existential quantification and conjunction that cannot be expressed as descriptions in the full DL. 6. <p> Kolaitis and Vardi [13] present a modified pebbling game that characterizes C k extended with infinitary disjunction, and the proofs in <ref> [8] </ref> go through for this case, establishing that transitive closure will not be helpful in expressing the relevant formulas in [8]. As a result, we continue to have formulas in the FOPC with only existential quantification and conjunction that cannot be expressed as descriptions in the full DL. 6. Conclusions We have compared the "expressive power" of two different kinds of knowledge representation languages: description logics and predicate calculus.
Reference: [9] <author> F.M. Donini, M. Lenzerini, D. Nardi and A. Schaerf, </author> <title> A hybrid system with Datalog and concept languages, </title> <booktitle> in: Trends in Artificial Intelligence, Lecture Notes in Artificial Intelligence 549 (Springer, </booktitle> <address> Berlin, </address> <year> 1991) </year> <month> 88-97. </month>
Reference-contexts: For example, in Loom [15] FOPC formulas may be given as arguments to the :satisfies concept constructor. Another approach is to integrate descriptions and Horn formulas, as in <ref> [9] </ref>. Alternatively, one can consider ways of presenting queries that can create new objects or relationships (like relational algebra in databases). Finally, an open question remaining in this work is to examine the expressive power of DLs with recursive concept definitions, where recursion is defined by some fixed point semantics.
Reference: [10] <author> D. Gabbay, </author> <title> Expressive functional completeness in tense logic, </title> <editor> in: U. Monnich, ed., </editor> <booktitle> Aspects of Philosophical Logic (Reidel, </booktitle> <address> Dordrecht, Netherlands, </address> <year> 1981) </year> <month> 91-117. </month>
Reference-contexts: E-mail: borgida@cs.rutgers.edu. and [ all [venue; STADIUM] at-most <ref> [10; players] </ref> all [players; fills [hometown; Toronto]] Fig. 1. Composite description for a concept. A. Borgida / Artificial Intelligence 82 (1996) 353-367 355 2.1. <p> The same referee points to a connection between description logics and L 2 via results concerning modal logics: the description logic ALC is a notational variant of modal logic [20]; modal logic can be expressed in L 2 [1]; L 2 can be expressed by an appropriate modal logic <ref> [10] </ref>. 2 In addition to their intrinsic interest, the results presented here have several relevant consequences for research on DLs and their application, because, as corollaries of previous results from the logical literature on L k , we have pointed to the existence of certain FOPC formulas, built only with conjunction
Reference: [11] <author> N. Immerman, </author> <title> Upper and lower bounds for first-order expressibility, </title> <institution> J. Comput. Syst. Sci. </institution> <month> 25 </month> <year> (1982) </year> <month> 76-98. </month>
Reference-contexts: Note that L k does not limit the number of nested quantifiers in a formula since the same variable may be reused in nested subformulas, as in 8x; y:P (x; y) ) 9x:Q (y; x). Properties of such language families have been studied, among others, in <ref> [8, 11, 16] </ref>. In our case, since we are dealing with roles and concepts, we will be interested only in those formulas that (i) have one or two free variables (though they may have closed subformulas), and (ii) have only monadic and dyadic predicates. <p> Borgida / Artificial Intelligence 82 (1996) 353-367 cription in DL ftrans; at-least; at-mostg. This is true for any conjunctive formula that is expressible in FOL but not in L 3 . For example, Immerman <ref> [11] </ref> shows, among others, that for the schema hfN ODEg; fEdgeg; ;i, which can be used to represent a graph, L k1 does not allow the expression of such graph-theoretic properties as the existence of a k-subclique. <p> In this case we get the equivalent of Theorem 1, but not the converse, since there are of course many formulas involving infinite disjunction that cannot be expressed as transitive closure. The inexpressibility results in <ref> [8, 11] </ref> are obtained using variants of Ehrenfeucht-Frasse pebbling games, which are shown to characterize L k and C k .
Reference: [12] <author> N. Immerman, </author> <title> Relational queries computable in polynomial time, </title> <journal> Inf. </journal> <note> Control 68 (1986) 86-104. </note>
Reference-contexts: We proceed however by extending the syntax of FOPC to allow numeric/counting quantifiers, as in <ref> [12] </ref>; for example, 9 7 y:players (x; y) predicates the existence of seven distinct values for which the formula is satisfied.
Reference: [13] <author> P. Kolaitis and M. Vardi, </author> <title> On the expressive power of Datalog: tools and a case study, </title> <booktitle> in: Proceedings 9th ACM Symposium on Principles of Database Systems, </booktitle> <address> Nashville, TN (1990) 61-71. </address>
Reference-contexts: The inexpressibility results in [8, 11] are obtained using variants of Ehrenfeucht-Frasse pebbling games, which are shown to characterize L k and C k . Kolaitis and Vardi <ref> [13] </ref> present a modified pebbling game that characterizes C k extended with infinitary disjunction, and the proofs in [8] go through for this case, establishing that transitive closure will not be helpful in expressing the relevant formulas in [8].
Reference: [14] <author> H.R. Lewis, </author> <title> Unsolvable Classes of Quantificational Formulas (Addison-Wesley, </title> <address> Reading, MA, </address> <year> 1979). </year>
Reference-contexts: The second result follows from the undecidability of validity for the class of formulas with quantifier prefix 898, shown in <ref> [14] </ref>: the formula exhibited in Lewis' proof only has monadic and dyadic predicates, and given a closed formula () in L 3 , its validity can be determined by verifying that the formula 0 (x), defined as (x = x) ^ is true for every substitution for x; by Theorem 3,
Reference: [15] <author> R.M. MacGregor, </author> <title> A deductive pattern matcher, </title> <booktitle> in: Proceedings AAAI-87, </booktitle> <address> Seattle, WA (1987) 403-408. </address>
Reference-contexts: The obvious route to follow in this direction is to add formulas with variables, or their equivalent (e.g., relational algebra expressions), into description languages. For example, in Loom <ref> [15] </ref> FOPC formulas may be given as arguments to the :satisfies concept constructor. Another approach is to integrate descriptions and Horn formulas, as in [9]. Alternatively, one can consider ways of presenting queries that can create new objects or relationships (like relational algebra in databases).
Reference: [16] <author> M. Mortimer, </author> <title> On languages with two variables, </title> <journal> Z. Math. Logik Grundl. Math. </journal> <month> 21 </month> <year> (1975) </year> <month> 135-140. </month>
Reference-contexts: Note that L k does not limit the number of nested quantifiers in a formula since the same variable may be reused in nested subformulas, as in 8x; y:P (x; y) ) 9x:Q (y; x). Properties of such language families have been studied, among others, in <ref> [8, 11, 16] </ref>. In our case, since we are dealing with roles and concepts, we will be interested only in those formulas that (i) have one or two free variables (though they may have closed subformulas), and (ii) have only monadic and dyadic predicates. <p> Corollary 7. (Mortimer) Subsumption is decidable for DLfcompose; trans; at-least; at-mostg. (Lewis) Subsumption is undecidable for DL ftrans; at-least; at-mostg. The first result follows from the decidability of validity in the logic L 2 with equality, proven in <ref> [16] </ref>: the subsumption problem D=)E can be posed as the validity of the formula 8x:T x hDi ) T x hEi, which by Theorem 1, is in L 2 .
Reference: [17] <author> B. Nebel, </author> <title> Terminological cycles: semantics and computational properties, </title> <editor> in: J. Sowa, ed., </editor> <booktitle> Principles of Semantic Networks (Morgan Kaufmann, </booktitle> <address> Los Altos, CA, </address> <year> 1991) </year> <month> 331-362. </month>
Reference-contexts: consider only those interpretations I which are "models" of the axioms, in the sense that D I E I . (In this case definitions C =D, even ones involving cycles, can be replaced by axioms CvE and EvC, if we are content to capture the so-called "descriptive semantics" for recursion <ref> [17] </ref>.) Therefore, given a knowledge base KB of axioms fE i vF i g, the meaning of a description is now redefined as M [D; KB](I)=D I for interpretation I if for every i, E I i F I and is ; otherwise.
Reference: [18] <author> P.F. Patel-Schneider, </author> <title> Undecidability of subsumption in NIKL, </title> <booktitle> Artif. Intell. </booktitle> <month> 39 </month> <year> (1989) </year> <month> 263-272. </month>
Reference: [19] <author> P.F. Patel-Schneider and B. Swartout, </author> <title> Description logic knowledge representation system specification from the KRSS group of the ARPA knowledge sharing effort, </title> <institution> AT&T Bell Laboratories Report, </institution> <address> Murray Hill, NJ (1994). </address>
Reference-contexts: Over the years, a considerable variety of DLs have been proposed, studied and implemented. Table 1 presents the language DL, which contains a comprehensive list of the constructors based on recent survey papers <ref> [3, 19, 24] </ref>. (Clearly, the set of constructors in DL is not minimal; this is intentional, since considerable work in the field is devoted to finding subsets of constructors for which various decision problems have good computational properties.) In the table, and elsewhere, we use the symbols A, B, C to
Reference: [20] <author> K. Schild, </author> <title> A correspondence theory for terminologic logics, </title> <booktitle> in: Proceedings IJCAI-91, </booktitle> <address> Sydney, Australia (1991). </address>
Reference-contexts: The same referee points to a connection between description logics and L 2 via results concerning modal logics: the description logic ALC is a notational variant of modal logic <ref> [20] </ref>; modal logic can be expressed in L 2 [1]; L 2 can be expressed by an appropriate modal logic [10]. 2 In addition to their intrinsic interest, the results presented here have several relevant consequences for research on DLs and their application, because, as corollaries of previous results from the
Reference: [21] <author> K. Schild, </author> <title> The role of domain-closure axioms and complete knowledge in enabling decidable and tractable reasoning in description logics, </title> <editor> in: K.R. Apt and E. Marchiori, eds., </editor> <booktitle> Deliverables for Year 3 of ESPRIT BRA Compulog 2 (1995). </booktitle>
Reference-contexts: Since the equations of this algebra can be expressed as axioms for descriptions in DL, this provides an alternative path to proving that all of L 3 can be expressed by DL (see <ref> [21] </ref>).
Reference: [22] <author> J.G. Schmolze and D. Israel, </author> <title> KL-ONE: semantics and classification, in: Research in Knowledge Representation for NL Understanding, </title> <type> Tech. </type> <institution> Rept. 5421, BBN Laboratories (1983). </institution>
Reference-contexts: Relating descriptions to predicate calculus There is an obvious similarity between concepts (respectively roles) in DLs, and monadic (respectively dyadic) predicates in predicate calculus. Such a similarity was already exploited by Schmolze and Israel <ref> [22] </ref> to give a semantics for the original kl-one language using the -calculus. Our aim is to compare the "expressive power" of various sublanguages of descriptions and predicate calculus. To do so we need to set up a common framework for the two formalisms. 3.1. <p> Two languages are equally expressive if each is as expressive as the other. For example, Schmolze and Israel <ref> [22] </ref> show that FOPC is as expressive as DL ftransg by essentially defining a translation function t hi, which maps concepts to formulas with free variable x, and roles to formulas with free variables x and y.
Reference: [23] <author> A. Tarski and S. Givant, </author> <title> A Formalization of Set Theory without Variables, </title> <publisher> AMS Colloquium Publications (American Mathematical Society, </publisher> <address> Providence, RI, </address> <year> 1987). </year>
Reference-contexts: For example, without this precaution, the 1 For alternate techniques for comparing the "expressive power" of languages, see <ref> [2, 23] </ref>. 358 A. <p> While we have obtained our results essentially by "direct simulation", it has been pointed out that several other results in the logical literature are relevant, and can be used to obtain alternative proofs in some cases. First, Tarski and Givant <ref> [23] </ref> have investigated a variable-free algebra for binary relations, for which they prove that it is "equipolent" with L 3 .
Reference: [24] <author> W.A. Woods and J.G. Schmolze, </author> <title> The KL-ONE family, </title> <journal> Comput. Math. Appl. </journal> <note> 23 (2-5) Special Issue on Semantic Networks in Artificial Intelligence. </note>
Reference-contexts: Over the years, a considerable variety of DLs have been proposed, studied and implemented. Table 1 presents the language DL, which contains a comprehensive list of the constructors based on recent survey papers <ref> [3, 19, 24] </ref>. (Clearly, the set of constructors in DL is not minimal; this is intentional, since considerable work in the field is devoted to finding subsets of constructors for which various decision problems have good computational properties.) In the table, and elsewhere, we use the symbols A, B, C to
References-found: 24

