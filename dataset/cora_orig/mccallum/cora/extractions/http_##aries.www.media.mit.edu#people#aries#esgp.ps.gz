URL: http://aries.www.media.mit.edu/people/aries/esgp.ps.gz
Refering-URL: http://aries.www.media.mit.edu/people/aries/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: rosca@cs.rochester.edu  aries@media.mit.edu  pattie@media.mit.edu  
Title: Evolutionary Speciation for Problem Decomposition  
Author: Justinian Rosca Michael Patrick Johnson Pattie Maes 
Affiliation: University of Rochester Dept. of Computer Science  Massachusetts Institute of Technology Media Laboratory  Massachusetts Institute of Technology Media Laboratory  
Abstract: Modular problem decomposition is often employed to cope with complex real-world problems. An intelligent decomposition can efficiently lead to compact and general solutions but is, in most cases, the result of laborious domain analysis and engineering. Little has been done to automatically discover natural decompositions of complex problems while simultaneously solving the sub-problems; usually, a decomposition architecture must be specified in advance. This paper presents the Evolutionary Speciation Genetic Programming (ESGP) framework which evolves a problem decomposition as an ensemble of species whose members collectively solve the problem. Problem decomposition emerges as a result of speci-ation and specialization within each species. Spe-ciation is facilitated by the symbiotic representation of individuals. Cooperation among species emerges through coevolution. We present experiments on complex, multi-regime function approximation problems to demonstrate and analyze the basic concepts of the ESGP framework.
Abstract-found: 1
Intro-found: 1
Reference: <author> Booker, L. B. </author> <year> (1995). </year> <title> Improving the performance of genetic algorithms in classifier systems. </title> <editor> In Grefenstette, J. J., editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the First International Conference, </booktitle> <address> Pittsburgh, PA. </address> <publisher> Lawrence Erlbaum Associates. </publisher>
Reference-contexts: Most applications are for function optimization. Parallel GAs explicitly divide the population into smaller subpopulations using 9 geometrical patterns aiming both to parallelize compu-tation and to maintain diversity. The techniques used to create subpopulations are explicit. For instance, mating is restricted to functionally similar individuals <ref> (Booker, 1995) </ref> or to local individuals (Hillis, 1990). In ESGP the division into subpopulations (species) is dynamic. Many similarities exists between our approach and classifier systems. In order to facilitate comparisons, we have intentionally named the two symbiotic components of the GP representation as condition and output.
Reference: <author> Brooks, R. A. </author> <year> (1991). </year> <title> Intelligence without reason, </title> <booktitle> computers and thought lecture. In Proceedings of IJCAI-91, </booktitle> <address> Sydney, Aus-tralia. </address>
Reference: <author> Gershenfeld, N. </author> <year> (1997). </year> <booktitle> The Nature of Mathematical Modeling. </booktitle> <address> Cambridge University Press. </address> <note> to be published. </note>
Reference-contexts: We do need to locate the niches in a population, however, for fitness calculation and mating. We use a clustering algorithm which does not assume the number of clusters, but rather discovers some number of groups of individuals within some distance of each other <ref> (Gershenfeld, 1997) </ref>. The only parameter is this distance, which is a soft constraint. Since normal GAs have a powerful tendency to converge to homogeneous populations due to crossover and competition, care must be taken to allow several species to coexist in a population.
Reference: <author> Hillis, W. D. </author> <year> (1990). </year> <title> Co-evolving parasites improve simulated evolution as an optimization procedure. </title> <editor> In Forrest, S., editor, </editor> <booktitle> Proceedings of the Ninth Annual International Conference of the Center for Nonlinear Studies on Self-organizing, Collective, and Cooperative Phenomena in Natural and Artificial Computing Networks, </booktitle> <pages> pages 228-234. </pages> <publisher> North Holland. </publisher>
Reference-contexts: This effect is analogous the coevolution of parasites in <ref> (Hillis, 1990) </ref> but acts at a cluster level. Again there is no effect on the relative ranking within a cluster. A second diversity term drives the coevolving clusters into different directions of the decomposition search space by penalizing individuals that are very similar to the representatives of other clusters. <p> Parallel GAs explicitly divide the population into smaller subpopulations using 9 geometrical patterns aiming both to parallelize compu-tation and to maintain diversity. The techniques used to create subpopulations are explicit. For instance, mating is restricted to functionally similar individuals (Booker, 1995) or to local individuals <ref> (Hillis, 1990) </ref>. In ESGP the division into subpopulations (species) is dynamic. Many similarities exists between our approach and classifier systems. In order to facilitate comparisons, we have intentionally named the two symbiotic components of the GP representation as condition and output.
Reference: <author> Jacobs, R. A., Jordan, M. I., Nowlan, S. J., and Hinton, G. E. </author> <year> (1991). </year> <title> Adaptive mixture of experts. </title> <journal> Neural Computation, </journal> <volume> 3 </volume> <pages> 79-87. </pages>
Reference-contexts: In our system no special seeding is necessary, and more importantly, we do not provide any help on how the problem can be decomposed. The adaptive mixture of experts (ME) <ref> (Jacobs et al., 1991) </ref> is a modular neural network approach which is the closest in spirit to our problem decomposition approach.
Reference: <author> Kitano, H. </author> <year> (1993). </year> <title> Challanges of massive parallelism. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 813-834. </pages> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference: <author> Koza, J. R. </author> <year> (1992). </year> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <publisher> MIT Press. </publisher> <address> 10 Maes, P. </address> <year> (1993). </year> <booktitle> Behavior-based artificial intelligence. In Proceed--ings of the Second Conference on Simulated and Adaptive Behavior. </booktitle> <publisher> MIT Press. </publisher>
Reference: <author> Mahadevan, S. and Connell, J. </author> <year> (1990). </year> <title> Automatic programming of behavior-based robots using reinforcement learning. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <address> Boston. </address> <publisher> MIT Press. </publisher>
Reference: <author> Mahfoud, S. W. </author> <year> (1995). </year> <title> A comparison of parallel and sequential niching methods. </title> <editor> In Eshelman, L., editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 136-143, </pages> <address> San Francisco, CA, USA. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: This claim will have to be proven in future experiments on harder problems. 6 Related Work The GA literature is rich in methods designed to promote the evolution of multiple subpopulations, also called niching methods (see <ref> (Mahfoud, 1995) </ref> for a comparison). It is assumed that the maintenance of stable and diverse subpopulations combats premature convergence and improves the search capabilities of GAs. Most applications are for function optimization.
Reference: <author> Potter, M. A., DeJong, K. A., and Greffenstette, J. J. </author> <year> (1995). </year> <title> A co-evolutionary approach to learning sequantial decision rules. </title> <editor> In Eshelman, L., editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 366-372, </pages> <address> San Francisco, CA, USA. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Classifiers to be deleted and replaced by new individuals in the GA step are taken from the least fit ones of the largest match sets, in order to balance the size of niches. Potter <ref> (Potter et al., 1995) </ref> suggests that explicit notions of modularity need to be introduced in a GA-based system in order to evolve a problem decomposition. In their system, which evolves co-adapted rule sets, subspecies are encouraged by seeding the initial population with particular forms of rules.
Reference: <author> Rosca, J. P. and Ballard, D. H. </author> <year> (1996). </year> <title> Discovery of subroutines in genetic programming. </title> <editor> In Angeline, P. and Kinnear, Jr., K. E., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 9. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA. </address>
Reference-contexts: In ZCS (Wilson, 1994), conditions are given by fixed length bit strings. In contrast, in ESGP both conditions and outputs are implicit representations in their respective domains. An implicit representation has the desirable properties of generality and compactness (see also <ref> (Rosca and Ballard, 1996) </ref>). For instance, the ESGP individual conditions specify a partitioning of the input space regardless of the number of dimensions.
Reference: <author> Wilson, S. W. </author> <year> (1994). </year> <title> Zcs: A zeroth level classifier system. </title> <journal> Evolutionary Computation, </journal> <volume> 2(1) </volume> <pages> 1-18. 11 </pages>
Reference-contexts: In ESGP the division into subpopulations (species) is dynamic. Many similarities exists between our approach and classifier systems. In order to facilitate comparisons, we have intentionally named the two symbiotic components of the GP representation as condition and output. In ZCS <ref> (Wilson, 1994) </ref>, conditions are given by fixed length bit strings. In contrast, in ESGP both conditions and outputs are implicit representations in their respective domains. An implicit representation has the desirable properties of generality and compactness (see also (Rosca and Ballard, 1996)).
References-found: 12

