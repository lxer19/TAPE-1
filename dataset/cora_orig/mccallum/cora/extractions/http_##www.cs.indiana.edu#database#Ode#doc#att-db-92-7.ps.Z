URL: http://www.cs.indiana.edu/database/Ode/doc/att-db-92-7.ps.Z
Refering-URL: http://www.cs.indiana.edu/database/Ode/doc/
Root-URL: http://www.cs.indiana.edu
Title: Composite Event Specification in Active Databases: Model Implementation  
Author: N. H. Gehani H. V. Jagadish O. Shmueli 
Address: Murray Hill, New Jersey 07974  
Affiliation: AT&T Bell Laboratories  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> C. Beeri, S. Naqvi, R. Ramakrishnan, O. Shmueli and S. Tsur, </author> <title> ``Sets and Negation in a Logic Database Language'', </title> <booktitle> Proc. 6th Symp. Principles of Database Systems, </booktitle> <address> San Diego, Calif., </address> <month> March </month> <year> 1987, </year> <pages> 21-37. </pages>
Reference-contexts: Event expressions can also be incorporated into query languages such as SQL [4] or LDL <ref> [1] </ref> by using a relation to record the event and the event order [7]. - 21 - APPENDIX 1.
Reference: [2] <author> C. Beeri and T. Milo, </author> <title> ``A Model for Active Object Oriented Database'', </title> <booktitle> Proc. of the 17th Int'l Conf. on Very Large Databases, </booktitle> <address> Barcelona, Spain, </address> <month> Sept. </month> <year> 1991, </year> <pages> 337-349. </pages>
Reference-contexts: 1. INTRODUCTION Of late, there has been a surge of interest in active databases <ref> [5, Dayal Ladin Hsu Jauhari HiPAC, 2, 8, 12, 14-16] </ref>. In an active database, a trigger fires when an event of interest happens and some condition is satisfied. Most efforts have focussed on the trigger firing mechanism and the execution of the triggered action.
Reference: [3] <author> S. Chakravarthy and D. Mishra, </author> <title> ``An Event Specification Language (Snoop) for Active Databases and its Detection'', </title> <institution> University of Florida CIS Tech. Rep.-91-23, </institution> <month> September </month> <year> 1991. </year>
Reference-contexts: In an active database, a trigger fires when an event of interest happens and some condition is satisfied. Most efforts have focussed on the trigger firing mechanism and the execution of the triggered action. However, recent work <ref> [3, 6, 9] </ref>, has recognized the importance of event specification. Of special interest is the specification of composite events, which are constructed from (simpler) primitive events [ Dayal Ladin Hsu Jauhari HiPAC]. We propose a language for composite event specification.
Reference: [4] <author> C. J. Date, </author> <title> A Guide to the SQL Standard, </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: Event expressions can also be incorporated into query languages such as SQL <ref> [4] </ref> or LDL [1] by using a relation to record the event and the event order [7]. - 21 - APPENDIX 1.
Reference: [5] <author> U. Dayal, B. Blaustein, A. Buchmann, U. Chakravarthy, M. Hsu, R. Ladin, D. McCarthy, A. Rosenthal and S. Sarin, </author> <title> ``The HiPAC Project: Combining Active Databases and Timing Constraints'', </title> <booktitle> ACM-SIGMOD Record 17, </booktitle> <month> 1 (March </month> <year> 1988), </year> <pages> 51-70. </pages>
Reference-contexts: 1. INTRODUCTION Of late, there has been a surge of interest in active databases <ref> [5, Dayal Ladin Hsu Jauhari HiPAC, 2, 8, 12, 14-16] </ref>. In an active database, a trigger fires when an event of interest happens and some condition is satisfied. Most efforts have focussed on the trigger firing mechanism and the execution of the triggered action.
Reference: [6] <author> U. Dayal, M. Hsu and R. Ladin, </author> <title> ``A Transaction Model for Long-Running Activities'', </title> <booktitle> Proc. of the 17th Int'l Conf. on Very Large Databases, </booktitle> <address> Barcelona, Spain, </address> <month> Sept. </month> <year> 1991, </year> <pages> 113-122. </pages>
Reference-contexts: In an active database, a trigger fires when an event of interest happens and some condition is satisfied. Most efforts have focussed on the trigger firing mechanism and the execution of the triggered action. However, recent work <ref> [3, 6, 9] </ref>, has recognized the importance of event specification. Of special interest is the specification of composite events, which are constructed from (simpler) primitive events [ Dayal Ladin Hsu Jauhari HiPAC]. We propose a language for composite event specification.
Reference: [7] <author> D. Gabbay and P. McBrien, </author> <title> ``Temporal Logic & Historical Databases'', </title> <booktitle> Proc. 17th Int'l Conf. Very Large Data Bases, </booktitle> <address> Barcelona, Spain, </address> <year> 1991, </year> <pages> 423-430. </pages>
Reference-contexts: Event expressions can also be incorporated into query languages such as SQL [4] or LDL [1] by using a relation to record the event and the event order <ref> [7] </ref>. - 21 - APPENDIX 1.
Reference: [8] <author> N. H. Gehani and H. V. Jagadish, </author> <title> ``Ode as an Active Database: Constraints and Triggers'', </title> <booktitle> Proc. 17th Int'l Conf. Very Large Data Bases, </booktitle> <address> Barcelona, Spain, </address> <year> 1991, </year> <pages> 327-336. </pages>
Reference-contexts: 1. INTRODUCTION Of late, there has been a surge of interest in active databases <ref> [5, Dayal Ladin Hsu Jauhari HiPAC, 2, 8, 12, 14-16] </ref>. In an active database, a trigger fires when an event of interest happens and some condition is satisfied. Most efforts have focussed on the trigger firing mechanism and the execution of the triggered action.
Reference: [9] <author> N. H. Gehani, H. V. Jagadish and O. Shmueli, </author> <title> ``Event Specification in an Active Object-Oriented Database'', </title> <booktitle> Proc. ACM-SIGMOD 1992 Int'l Conf. on Management of Data, </booktitle> <address> San Diego, CA, </address> <year> 1992. </year>
Reference-contexts: In an active database, a trigger fires when an event of interest happens and some condition is satisfied. Most efforts have focussed on the trigger firing mechanism and the execution of the triggered action. However, recent work <ref> [3, 6, 9] </ref>, has recognized the importance of event specification. Of special interest is the specification of composite events, which are constructed from (simpler) primitive events [ Dayal Ladin Hsu Jauhari HiPAC]. We propose a language for composite event specification. <p> We shall use primitive events as the basis of our __________________ 1. Primitive events are referred to as logical events in <ref> [9] </ref>. - 3 - discussion of composite event specification. We assume that primitive events are mutually exclusive and that their number is finite. 2.1 EVENT OCCURRENCES AND EVENT HISTORIES An event occurrence (informally referred to as an event) is a tuple of the form (primitive event, event-identifier). <p> Regular expressions are widely used for specifying sequences The above event expression language has the same expressive power as regular expressions <ref> [9] </ref>. 2 It can be shown that the operators andsign, !, relative, and relative + constitute a minimal operator set; reducing it will make the expressive power less than that of regular expressions. 2.3 MORE OPERATORS FOR EVENT EXPRESSIONS We present some additional operators (connectives) that make composite events easier to <p> These operators do not add to the expressive power provided by the operators introduced in the previous section. __________________ 2. In <ref> [9] </ref> operator orsign is used instead of operator andsign but the proof is similar. - 5 - Let h denote a non null history, and E, F, and E i denote event expressions. The new operators are a. <p> Clearly, it is impractical to perform a complete check for each composite event every time a primitive event occurs in a database. We present an incremental detection technique in this section. Since event expressions are equivalent to regular expressions, except for e which is not expressible using event expressions <ref> [9] </ref>, it is possible to ``implement'' event expressions using finite automata. The history in the context of which an event expression is evaluated provides the sequence of input symbols to the automaton implementing the event expression.
Reference: [10] <author> D. Harel, ``Statecharts: </author> <title> A Visual Formalism for Complex Systems'', </title> <booktitle> Science of Computer Programming 8, </booktitle> <year> (1988), </year> <pages> 231-274. </pages>
Reference-contexts: This facilitates coordination of sub-events within a composite event. One can think of them as ``pointers'' to specific history events, as free variables in a logic program, or a communication mechanism as in statecharts <ref> [10] </ref>. Events have attributes. For primitive events, these could be parameters of the activity that caused the event, selected parts of the database state, or functions computed therefrom. For composite events, attributes are derived from the attributes of the constituent primitive events. <p> The composite event specified by the expression does not occur unless the specified condition on attributes, if any, is satisfied. We note a similarity between events with attributes and parametrized states in statecharts <ref> [10] </ref>. - 2 - Event expressions have the same expressive power as regular expressions. As such, any mapping from histories to histories that can be specified by an event expression can be executed by a finite automaton. We show explicitly how to construct such an automaton for an event expression.
Reference: [11] <author> B. Krishnamurthy and D. S. Rosenblum, </author> <title> ``An Event-Action Model of Computer-Supported Cooperative Work: </title> <booktitle> Design and Implementation'', Proceedings of the International Workshop on Computer Supported Cooperative Work, </booktitle> <month> April </month> <year> 1991, </year> <month> 132--145. </month>
Reference-contexts: Although our motivation in investigating composite events is triggers in active databases, event specifications can be used in other contexts. For example, event specifications are used for software configuration management and cooperative work <ref> [11, 13] </ref>, they can be used for sophisticated text searching (where the events are the various characters in the text), and they can also be used to examine histories in the context of historical databases.
Reference: [12] <author> G. M. Lohman, B. Lindsay, H. Pirahesh and K. B. Schiefer, </author> <title> ``Extensions to Starburst: Objects, Types, Functions, and Rules'', </title> <journal> Comm. ACM 34, </journal> <month> 10 (October </month> <year> 1991), </year> <pages> 94-109. </pages>
Reference-contexts: 1. INTRODUCTION Of late, there has been a surge of interest in active databases <ref> [5, Dayal Ladin Hsu Jauhari HiPAC, 2, 8, 12, 14-16] </ref>. In an active database, a trigger fires when an event of interest happens and some condition is satisfied. Most efforts have focussed on the trigger firing mechanism and the execution of the triggered action.
Reference: [13] <author> D. S. Rosenblum and B. Krishnamurthy, </author> <title> ``An Event-Based Model of Software Configuration Management'', </title> <booktitle> Proceedings of the 3rd International Workshop on Software Configuration Management, </booktitle> <month> June </month> <year> 1991, </year> <month> 94--97. </month>
Reference-contexts: Although our motivation in investigating composite events is triggers in active databases, event specifications can be used in other contexts. For example, event specifications are used for software configuration management and cooperative work <ref> [11, 13] </ref>, they can be used for sophisticated text searching (where the events are the various characters in the text), and they can also be used to examine histories in the context of historical databases.
Reference: [14] <author> U. Schreier, H. Pirahesh, R. Agrawal and C. Mohan, ``Alert: </author> <title> An Architecture for Transforming a Passive DBMS into an Active DBMS'', </title> <booktitle> Proc. of the 17th Int'l Conf. on Very Large Databases, </booktitle> <address> Barcelona, Spain, </address> <month> Sept. </month> <year> 1991, </year> <pages> 469-478. </pages>
Reference: [15] <author> A. Silberschatz, M. Stonebraker and J. Ullman, </author> <title> ``Database Systems: Achievements and Opportunities'', </title> <journal> Comm. ACM 34, </journal> <month> 10 (October </month> <year> 1991), </year> <pages> 110-120. </pages>

References-found: 15

