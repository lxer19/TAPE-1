URL: http://ai.eecs.umich.edu/people/mullen/papers/mobileICE.ps.Z
Refering-URL: http://ai.eecs.umich.edu/people/mullen/pubs.html
Root-URL: http://www.cs.umich.edu
Email: mullen@umich.edu  breese@microsoft.com  
Title: Experiments in Designing Computational Economies for Mobile Users  
Author: Tracy Mullen Jack Breese 
Address: Ann Arbor, MI 48109-2110 USA  Redmond WA 98052-6399 USA  
Affiliation: Artificial Intelligence Laboratory University of Michigan  Microsoft Research  
Abstract: Distributed operating systems provide users with transparent access to network-wide resources. As changes occur to network resources or as user locations and preferences evolve, the system must be able to adapt by reallocating, replicating, or moving its resources. Since a market price system is essentially solving a distributed optimization problem for multiple resource allocation, it provides a natural framework for addressing resource allocation in a distributed computing framework. In this paper, we describe our initial experiments in designing and building computational economies that allocate distributed operating system resources. In particular, we focus on the problem of redistributing network file allocations for a mobile user population in order to improve locality and accessibility. After specifying initial assumptions about network setup and users' locations and preferences, we experimented with different market configurations by modifying initial endowments, incorporating brokers, and changing the role of producers. Results indicate that for small examples, auction-based price mechanisms exhibit desirable allocations for mobile users, and adjusting endowments (income) for users provide additional control over the overall behavior of the system. The benefits of an auction-based system increase as the proportion of mobile users increase in our test economy. We examine both fixed capacity and variable producers, and show how price signals can inform decisions about network infrastructure. Additional considerations of market design, including use of brokers to simplify markets, auction design, and frequency of auctions also have an impact on results. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> William P. Birmingham, Karen M. Drabenstott, Car-olyn O. Frost, Amy J. Warner, and Katherine Willis. </author> <title> The University of Michigan Digital Library: This is not your father's library. </title> <booktitle> In Proceedings of Digital Libraries '94, </booktitle> <pages> pages 53-60, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: In other words, each agent is potentially interested in combinations or bundles of goods (resources, services), rather than a single type. As computational and information networks acquire significant scope, such as digital libraries <ref> [1] </ref> or distributed databases [16], it appears inevitable that considering the allocation of multiple resources and services at once will be necessary. Our approach in these experiments derives from market-oriented programming [21].
Reference: [2] <author> Nathaniel Rockwood Bogan. </author> <title> Economic allocation of computation time with computation markets. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, Department of Electrical Engineering and Computer Science, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: Areas where market-oriented programming has been applied to date include transporta tion planning [20], distributed engineering design [22], and allocation of computational resources <ref> [2, 6, 13] </ref>. In the next section, we describe the computational economy configuration used in our experiments.
Reference: [3] <author> William J. Bolosky, Richard P. Draves, Robert P. Fitzgerald, Christopher W. Fraser, Michael B. Jones, Todd B. Knoblock, and Rick Rashid. </author> <title> Operating system directions for the next millennium. </title> <type> Technical report, </type> <institution> Microsoft Research. </institution> <address> http://research.microsoft.- com/os/. </address>
Reference-contexts: 1 Introduction As computing becomes more ubiquitous, distributed operating systems must deal with a user population that is increasingly distributed and mobile. Hiding the complexity of such a computing environment from the user requires the operating system to support more location transparent, adaptable and self-tuning services <ref> [3] </ref>. In this paper, we examine a market-based approach to allocating network-wide files to a mobile user population based on locality and accessibility. Through markets, individual user preferences regarding latency and cost, as well as the scarcity and quality, of various network resources are summarized and communicated in global prices.
Reference: [4] <author> John Q. Cheng. </author> <title> Essays on designing economic mechanisms. </title> <type> PhD thesis, </type> <institution> University of Michigan, Economics Department, </institution> <year> 1998. </year>
Reference-contexts: With discrete goods, pareto optimality or even equilibrium is no longer guaranteed. Therefore, to simplify our economic setup, we choose to consider all our resources as being continuous. However, numerous auctions support discrete goods (including second-price auctions [17]), and there is ongoing work in extending the general equilibrium framework <ref> [4, 19] </ref>. 2.2 Agents: Producers and Consumers Producer agents are associated with a technology, which specifies an ability to transform some goods into other goods. The sole objective of producers is to choose an activity within their technology so as to maximize profits.
Reference: [5] <author> Scott H. Clearwater, </author> <title> editor. Market-Based Control: A Paradigm for Distributed Resource Allocation. </title> <publisher> World Scientific, </publisher> <year> 1996. </year>
Reference: [6] <author> Jon Doyle. </author> <title> A reasoning economy for planning and re-planning. </title> <booktitle> In Technical Papers of the ARPA Planning Initiative Workshop, </booktitle> <month> February </month> <year> 1994. </year>
Reference-contexts: Areas where market-oriented programming has been applied to date include transporta tion planning [20], distributed engineering design [22], and allocation of computational resources <ref> [2, 6, 13] </ref>. In the next section, we describe the computational economy configuration used in our experiments.
Reference: [7] <author> Donald F. Ferguson, Christos Nikolaou, Jakka Sairamesh, and Yechiam Yemini. </author> <title> Economic models for allocating resources in computer systems. </title> <booktitle> In Clearwa-ter [5]. </booktitle>
Reference-contexts: allocating multiple interrelated resources and extends to adding other operating system resources, such as signal or graphics processing, or to offering resources under different qualities of service. 1.2 Related Work Market or market-like mechanisms have been considered previously for allocating computational resources of various kinds in a distributed computing environment <ref> [8, 7, 18, 9] </ref>. Generally, these applications are centered about a global model for the resource, from which each agent or module calculates the marginal value of resource for itself. By using this value for bidding, the market allocates goods efficiently according to marginal value.
Reference: [8] <author> Kieran Harty and David Cheriton. </author> <title> A market approach to operating system memory allocation. </title> <booktitle> In Clearwater [5]. </booktitle>
Reference-contexts: allocating multiple interrelated resources and extends to adding other operating system resources, such as signal or graphics processing, or to offering resources under different qualities of service. 1.2 Related Work Market or market-like mechanisms have been considered previously for allocating computational resources of various kinds in a distributed computing environment <ref> [8, 7, 18, 9] </ref>. Generally, these applications are centered about a global model for the resource, from which each agent or module calculates the marginal value of resource for itself. By using this value for bidding, the market allocates goods efficiently according to marginal value.
Reference: [9] <author> James F. Kurose and Rahul Simha. </author> <title> A microeconomic approach to optimal resource allocation in distributed computer systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 38(5) </volume> <pages> 705-717, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: allocating multiple interrelated resources and extends to adding other operating system resources, such as signal or graphics processing, or to offering resources under different qualities of service. 1.2 Related Work Market or market-like mechanisms have been considered previously for allocating computational resources of various kinds in a distributed computing environment <ref> [8, 7, 18, 9] </ref>. Generally, these applications are centered about a global model for the resource, from which each agent or module calculates the marginal value of resource for itself. By using this value for bidding, the market allocates goods efficiently according to marginal value.
Reference: [10] <author> Jeffrey K. MacKie-Mason, Scott Shenker, and Hal R. </author> <title> Varian. Service architecture and content provision: the network provider as editor. </title> <journal> Telecommunications Policy, </journal> <volume> 20(3) </volume> <pages> 203-217, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: Using market-based methods, we can allocate disk space based both on user preferences as well as current system constraints|optimizing economic, rather than network, efficiency. Economic efficiency <ref> [10] </ref> incorporates end user preferences so that users may get higher perceived value or utility as a result of a system's awareness of individual application needs.
Reference: [11] <author> Jeffrey K. MacKie-Mason and Hal R. </author> <title> Varian. Pricing congestible resources. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 13(7) </volume> <pages> 1141-1149, </pages> <year> 1995. </year>
Reference-contexts: If instead, we use a second price auction, all files will priced at the highest amount of the denied files, as in the internet smart market approach <ref> [11] </ref>. Files would get bumped by higher paying, and therefore higher valued files, and have to relocate to more inexpensive disk space.
Reference: [12] <author> R. Preston McAfee and John McMillan. </author> <title> Auctions and bidding. </title> <journal> Journal of Economic Literature, </journal> <volume> 25 </volume> <pages> 699-738, </pages> <year> 1987. </year>
Reference-contexts: Auctions are simply a set of rules for determining a price and/or allocation based on a bidding protocol <ref> [12] </ref> and provide a very flexible market framework|different auction types can have a large effect on the resultant resource allocation properties.
Reference: [13] <author> Tracy Mullen and Michael P. Wellman. </author> <title> A simple computational market for network information services. </title> <booktitle> In First International Conference on Multiagent Systems, </booktitle> <pages> pages 283-289, </pages> <address> San Francisco, CA, </address> <year> 1995. </year>
Reference-contexts: Areas where market-oriented programming has been applied to date include transporta tion planning [20], distributed engineering design [22], and allocation of computational resources <ref> [2, 6, 13] </ref>. In the next section, we describe the computational economy configuration used in our experiments.
Reference: [14] <author> Tracy Mullen and Michael P. Wellman. </author> <title> Market-based negotiation for digital library services. </title> <booktitle> In Second USENIX Workshop on Electronic Commerce, </booktitle> <month> Novem-ber </month> <year> 1996. </year>
Reference-contexts: Information about the different auction rules and protocols can be captured in a compact, reusable manner through the use of parameterized auction components <ref> [14, 24] </ref>, where auction parameters can be tuned to reflect the type of good being sold, timing requirements or mechanism properties desired. For example, disk space might be sold differently depending on how it is bundled (e.g., per-hour, per-day), characteristics (size, reliability), or to whom it is sold (individual, project).
Reference: [15] <author> J. Sairamesh, D. Ferguson, and Yemini Y. </author> <title> An approach to pricing, optimal allocations, and quality of service provisioning in high-speed networks. </title> <booktitle> In Proceedings of the INFOCOM'95, </booktitle> <year> 1995. </year>
Reference-contexts: Finally, auctions themselves could be optimized for particular utility or bidding forms [25]. * Reduce agent decision complexity costs: Since many applications will tend to have stereotypical values, a broker can provide different quality of service mappings <ref> [15] </ref> per application. For example, if email is classified as a rapid-access application, then its parameter could be automatically set to 0.01 unless overridden. * Enforce constraints, provide value-added information: Application and system constraints regarding minimum disk space size can be monitored and enforced by the broker.
Reference: [16] <author> Michael Stonebraker, Aoki M., Avi Pfeffer, Adam Sah, Jeff Sidell, Carl Staelin, and Andrew Yu. Mariposa: </author> <title> A wide-area distributed database system. </title> <booktitle> VLDB, </booktitle> <volume> 5 </volume> <pages> 48-63, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: In other words, each agent is potentially interested in combinations or bundles of goods (resources, services), rather than a single type. As computational and information networks acquire significant scope, such as digital libraries [1] or distributed databases <ref> [16] </ref>, it appears inevitable that considering the allocation of multiple resources and services at once will be necessary. Our approach in these experiments derives from market-oriented programming [21].
Reference: [17] <author> W. Vickrey. </author> <title> Counter speculation, </title> <journal> auctions, and competitive sealed tenders. Journal of Finance, </journal> <volume> 16 </volume> <pages> 8-37, </pages> <year> 1961. </year>
Reference-contexts: With discrete goods, pareto optimality or even equilibrium is no longer guaranteed. Therefore, to simplify our economic setup, we choose to consider all our resources as being continuous. However, numerous auctions support discrete goods (including second-price auctions <ref> [17] </ref>), and there is ongoing work in extending the general equilibrium framework [4, 19]. 2.2 Agents: Producers and Consumers Producer agents are associated with a technology, which specifies an ability to transform some goods into other goods.
Reference: [18] <author> Carl A. Waldspurger, Tad Hogg, Bernardo A. Huber-man, Jeffrey O. Kephart, and Scott Stornetta. Spawn: </author> <title> A distributed computational economy. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18 </volume> <pages> 103-117, </pages> <year> 1992. </year>
Reference-contexts: allocating multiple interrelated resources and extends to adding other operating system resources, such as signal or graphics processing, or to offering resources under different qualities of service. 1.2 Related Work Market or market-like mechanisms have been considered previously for allocating computational resources of various kinds in a distributed computing environment <ref> [8, 7, 18, 9] </ref>. Generally, these applications are centered about a global model for the resource, from which each agent or module calculates the marginal value of resource for itself. By using this value for bidding, the market allocates goods efficiently according to marginal value.
Reference: [19] <author> W. E. Walsh, M. P. Wellman, P. R. Wurman, and MacKie-Mason J. K. </author> <title> Some economics of market-based distributed scheduling. </title> <booktitle> In Eighteenth International Conference on Distributed Computing Systems (ICDCS-98), </booktitle> <month> May </month> <year> 1998. </year>
Reference-contexts: With discrete goods, pareto optimality or even equilibrium is no longer guaranteed. Therefore, to simplify our economic setup, we choose to consider all our resources as being continuous. However, numerous auctions support discrete goods (including second-price auctions [17]), and there is ongoing work in extending the general equilibrium framework <ref> [4, 19] </ref>. 2.2 Agents: Producers and Consumers Producer agents are associated with a technology, which specifies an ability to transform some goods into other goods. The sole objective of producers is to choose an activity within their technology so as to maximize profits.
Reference: [20] <author> Michael P. Wellman. </author> <title> A market-oriented programming environment and its application to distributed multi-commodity flow problems. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 1 </volume> <pages> 1-22, </pages> <year> 1993. </year>
Reference-contexts: This arrangement is extremely modular, as agents need not expressly consider the preferences or capabilities of others, and communication consists exclusively of offers to exchange goods at various prices. Areas where market-oriented programming has been applied to date include transporta tion planning <ref> [20] </ref>, distributed engineering design [22], and allocation of computational resources [2, 6, 13]. In the next section, we describe the computational economy configuration used in our experiments.
Reference: [21] <author> Michael P. Wellman. </author> <title> A computational market model for distributed configuration design. AI for Engineering, Design, </title> <journal> and Manufacturing (AI EDAM), </journal> <volume> 9 </volume> <pages> 125-133, </pages> <year> 1995. </year>
Reference-contexts: As computational and information networks acquire significant scope, such as digital libraries [1] or distributed databases [16], it appears inevitable that considering the allocation of multiple resources and services at once will be necessary. Our approach in these experiments derives from market-oriented programming <ref> [21] </ref>. The idea of market-oriented programming is to solve a distributed resource allocation problem by formulating a computational economy and finding its competitive equilibrium. Since these computational economies are instances of general-equilibrium systems, the analytical tools and results of general equilibrium theory are directly applicable.
Reference: [22] <author> Michael P. Wellman. </author> <title> Market-oriented programming: Some early lessons. </title> <booktitle> In Clearwater [5]. </booktitle>
Reference-contexts: This arrangement is extremely modular, as agents need not expressly consider the preferences or capabilities of others, and communication consists exclusively of offers to exchange goods at various prices. Areas where market-oriented programming has been applied to date include transporta tion planning [20], distributed engineering design <ref> [22] </ref>, and allocation of computational resources [2, 6, 13]. In the next section, we describe the computational economy configuration used in our experiments.
Reference: [23] <author> Michael P. Wellman, Jeffrey K. MacKie-Mason, and Sugih Jamin. </author> <title> Market-based adaptive architectures for information survivability. </title> <address> http://www personal.umich.edu/ ~ jmm/papers/darpa/Surv Proposal.html, </address> <year> 1997. </year>
Reference-contexts: However, the users only need to know their own preferences between disk space and latency. Additionally, once network transportation is priced, a natural extension would be for brokers to own the network links and then provide admission control <ref> [23] </ref>. 6.2.2 Transacting out of equilibrium Another assumption made in these experiments was that disk space was allocated statically once a day, after all the markets had converged to an equilibrium, as opposed to dynamically, as needed.
Reference: [24] <author> Peter R. Wurman, Michael P. Wellman, and William E. Walsh. </author> <title> The Michigan Internet AuctionBot: A configurable auction server for human and software agents. </title> <booktitle> In Second International Conference on Autonomous Agents, </booktitle> <month> May </month> <year> 1998. </year>
Reference-contexts: Information about the different auction rules and protocols can be captured in a compact, reusable manner through the use of parameterized auction components <ref> [14, 24] </ref>, where auction parameters can be tuned to reflect the type of good being sold, timing requirements or mechanism properties desired. For example, disk space might be sold differently depending on how it is bundled (e.g., per-hour, per-day), characteristics (size, reliability), or to whom it is sold (individual, project).
Reference: [25] <author> Fredrik Ygge and Hans Akkermans. </author> <title> Power load management as a computational market. </title> <booktitle> In Proceedings of International Conference on Multi-Agent Systems, </booktitle> <pages> pages 393-400, </pages> <year> 1996. </year>
Reference-contexts: Another transaction cost improvement includes consolidating bids from a given site to both reduce network traffic and cut down on auction processing time (since it only has to handle one bid instead of n). Finally, auctions themselves could be optimized for particular utility or bidding forms <ref> [25] </ref>. * Reduce agent decision complexity costs: Since many applications will tend to have stereotypical values, a broker can provide different quality of service mappings [15] per application.
References-found: 25

