URL: http://www.tns.lcs.mit.edu/~djw/library/sigcomm96/banerjea.ps.gz
Refering-URL: http://www.tns.lcs.mit.edu/~djw/library/sigcomm96/program.html
Root-URL: 
Title: Simulation study of the capacity effects of dispersity routing for fault tolerant realtime channels  
Author: Anindo Banerjea 
Address: Berkeley CA 94720.  
Affiliation: The Tenet Group University of California,  
Abstract: The paper presents a simulation study of the use of disper-sity routing to provide fault tolerance on top of a connection oriented realtime service such as that provided by the Tenet scheme. A framework to study the dispersity schemes is presented. The simulations show that the dispersity schemes, by dividing the connection's traffic among multiple paths in the network, have a beneficent effect on the capacity of the network. Thus, for certain classes of disper-sity schemes, we obtain a small improvement in fault tolerance as well as an improvement in the number of connections that the network can support. For other classes of dis-persity schemes, greater improvement in service may be purchased at the cost of decrease in capacity. The paper explores the tradeoffs available through exhaustive simulations. We conclude that dispersity routing is a exible approach to increasing the fault tolerance of realtime connections, which can provide a range of improvements in service with a corresponding range of costs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Banerjea, </author> <title> ``A taxonomy of dispersity routing schemes for fault tolerant realtime channels'', </title> <booktitle> European Conference on Multimedia Applications, Services and Techniques (ECMAST'96), </booktitle> <address> Louvain la-Neuve, Belgium, </address> <month> May </month> <year> 1996. </year> <title> 6 Restricted to failure of the unshared links in an (N , N - 1, 2) system. </title>
Reference-contexts: Government or any of the sponsoring organizations. The author is now at Philips Research Laboratories, 1070 Arastradero Road, Palo Alto, CA 94304. Email: banerjea@prpa.philips.com service provided and the associated cost in terms of decreased capacity of the network to support realtime connections. In <ref> [1] </ref>, we presented the idea of providing dispersity routing at the application layer, on top of a connection oriented realtime communication service. <p> However, advances in workstation speeds and encoding techniques [3] have made it possible to perform the necessary computation in software at high enough speeds to move this function up to the application layer. <ref> [1] </ref> discussed the benefits of this approach, such as a cheaper and more exible service, as well as some of the difficulties introduced by this approach, such as the need to perform the route computation for the dispersity systems on a per session basis. <p> The primary objective of the dispersity mechanisms are to handle network failures. However, tolerance to errors is also provided as a side-benefit of using FEC to control loss due to faults. This paper extends the work of <ref> [1] </ref> by presenting a simulation study, which explores the service provided by the dispersity schemes, and the cost to the network in terms of resources used. In particular, we are interested in the reduction in the network's capacity to support realtime channels. <p> Section 4 presents the simulation results. Section 5 describes some related work. Section 6 summarizes the results and concludes the paper. 2. Framework In this section, we will present a framework for our experiments by classifying fault tolerance schemes along four dimensions. This framework was developed in <ref> [1] </ref> but is summarized here for completeness. More details, such as the equations to compute the performance parameters of the sub-channels or the buffer requirement at the destination, can be found in [1]. <p> This framework was developed in <ref> [1] </ref> but is summarized here for completeness. More details, such as the equations to compute the performance parameters of the sub-channels or the buffer requirement at the destination, can be found in [1]. The schemes for fault tolerance dealt with in this paper can be characterized by three variables: dispersity, redundancy, and disjointness. Finally, the schemes with redundancy may be hot or cold. <p> If the message is fragmented, transmission time is reduced to approximately 1/N th of its single-path value. This is less important in high-speed networks. Note that this system is not transparently fault-tolerant. It merely reduces the effect of the failure on the client. <ref> [1] </ref> describes some video coding schemes that allow the application to continue without interruption, with a reduced quality of service, in the presence of network failures. <p> When a fault tolerant connection is requested by the client, the network computes the traffic and performance parameters for the sub-channels, based on the parameters of the requested dispersity system and using the equations presented in <ref> [1] </ref>. It then routes the sub-channels belonging to a dispersity system on paths subject to the disjointness constraints specified in the request. Routing for the sub-channels of a dispersity system is performed one by one. The first sub-channel is routed as a normal realtime channel. <p> Since redundancy must exist in the network to support rerouting, we should expose it to the application layer 2 , in order to allow the application to provide higher degrees of fault tolerance, when it is needed. <ref> [1] </ref> presents some of these arguments, as well as issues regarding the appropriate application-network interface, in more detail. 4.1. <p> The net 2 We are not suggesting that the network topology be exposed to the application layer. Rather an appropriate interface should exist between the application and the network to specify the disjointness and dispersity requirements, and the network should be responsible for the routing. 3 See <ref> [1] </ref> for an analysis of the buffer requirement and the factors it depends on. work load was created by establishing varying numbers of simple realtime channels in the network, before starting the observation of the fault-tolerant system. <p> Most of the assumptions if these works, such as statistical arrival processes, are not applicable in our network model. In <ref> [1] </ref>, we developed a framework for the study of fault tolerance schemes for realtime channels based on dis-persity routing, and analyzed the benefits and costs which could be expected from such systems. <p> Much research has been done in the area of of erasure and error correcting codes to combat packet loss or bit errors in computer networks [3, 9, 20, 21]. <ref> [1] </ref> discusses some of the relevant ones in more detail. Most works in the area of fault tolerance for computer networks focus on the issue of maintaining connectivity, not of maintaining performance bounds, in the face of network failures. <p> In contrast, the dispersity routing schemes require the network to perform the route computation, with an appropriate interface to allow the application to specify its fault-tolerance requirements to the network <ref> [1] </ref>. An additional argument against the use of source routing to provide dispersity on the Internet is that current routers do not handle source routed packets efficiently, because source routing is an Internet Protocol (IP) option, which is not implemented on the fast path of commercial routers.
Reference: [2] <author> N. F. Maxemchuk, </author> <title> ``Dispersity Routing'', </title> <booktitle> Proceedings of ICC'75, </booktitle> <address> San Francisco, California, </address> <month> June </month> <year> 1975, </year> <month> 41.10-41.13. </month>
Reference-contexts: In [1], we presented the idea of providing dispersity routing at the application layer, on top of a connection oriented realtime communication service. While the idea of dispersity routing has been around for many years <ref> [2] </ref>, the traditional uses of dispersity routing have been at the physical layer of network communication, using hardware to perform the necessary encoding and decoding. <p> The schemes for fault tolerance dealt with in this paper can be characterized by three variables: dispersity, redundancy, and disjointness. Finally, the schemes with redundancy may be hot or cold. Dispersity Dispersity is the idea, proposed by Maxemchuk in <ref> [2] </ref>, of sending the information across a number of paths (N ) in the network. In a realtime network, we also make reservations on each of the paths to guarantee performance on the dispersity system. <p> Related work The idea of dispersity routing was first presented in <ref> [2] </ref>.
Reference: [3] <author> A. Albanese, J. Bloemer, J. Edmonds and M. Luby, </author> <title> ``Priority Encoding Transmission'', </title> <booktitle> 35th Annual Symposium on Foundations of Computer Science, </booktitle> <year> 1994. </year>
Reference-contexts: While the idea of dispersity routing has been around for many years [2], the traditional uses of dispersity routing have been at the physical layer of network communication, using hardware to perform the necessary encoding and decoding. However, advances in workstation speeds and encoding techniques <ref> [3] </ref> have made it possible to perform the necessary computation in software at high enough speeds to move this function up to the application layer. [1] discussed the benefits of this approach, such as a cheaper and more exible service, as well as some of the difficulties introduced by this approach, <p> Moreover, these approaches are not exible, since they each only offer a single level of fault tolerance at a fixed cost. Much research has been done in the area of of erasure and error correcting codes to combat packet loss or bit errors in computer networks <ref> [3, 9, 20, 21] </ref>. [1] discusses some of the relevant ones in more detail. Most works in the area of fault tolerance for computer networks focus on the issue of maintaining connectivity, not of maintaining performance bounds, in the face of network failures.
Reference: [4] <author> A. Banerjea, D. Ferrari, B. Mah, M. Moran, D. Verma and H. Zhang, </author> <title> ``The Tenet Real-Time Protocol Suite: Design, Implementation, and Experiences'', </title> <journal> IEEE/ACM Transactions on Networking 4, </journal> <volume> 1 (February, </volume> <year> 1996), </year> <pages> 1-10. </pages> <note> Also available as Tech. </note> <institution> Rep.-94-059, International Computer Science Institute, Berkeley, California November 1994.. </institution>
Reference-contexts: The dispersity schemes work on top of a connection oriented realtime communication service, such as that defined by the Tenet scheme <ref> [4] </ref>. The underlying network provides a mechanism for per-session resource reservation, based on the traffic specifications and performance requirements of the network clients, in order to establish connections with end-to-end performance guarantees through the network.
Reference: [5] <author> I. Cidon, I. Gopal and R. Guerin, </author> <title> ``Bandwidth Management and Congestion Control in PlaNET'', </title> <journal> IEEE Communications Magazine, </journal> <month> October </month> <year> 1991, </year> <pages> 54-64. </pages>
Reference: [6] <author> D. P. Anderson, R. G. Herrtwich and C. Schaefer, ``SRP: </author> <title> A Resource Reservation Protocol for Guaranteed Performance Communication in Internet'', </title> <type> Tech. </type> <institution> Rep.-90-006, International Computer Science Institute, Berkeley, California, </institution> <month> February </month> <year> 1990. </year>
Reference: [7] <author> C. Vogt, R. Herrtwich and R. Nagaragan, </author> <title> ``HeiRAT The Heidelberg Resource and Administration Technique: Design Philosophy and Goals'', </title> <type> IBM Tech. Rep. </type> <institution> 43.9243 , IBM ENC, </institution> <address> Heidelberg, Germany, </address> <year> 1992. </year>
Reference: [8] <author> J. Hyman and A. Lazar, </author> <title> ``MARS: The Magnet II Real-Time Scheduling algorithm'', </title> <booktitle> Proceedings of ACM SIGCOMM'91 Conference, </booktitle> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1991, </year> <pages> 285-293. </pages>
Reference: [9] <author> F. J. MacWilliams and N. J. A. Sloane, </author> <title> The theory of error correcting codes, </title> <publisher> North-Holland, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: If any one of the sub-messages is lost, the destination can compute its value from the remaining sub-messages and the parity sub-message. Error correction codes which work for arbitrary N and K exist <ref> [9] </ref>. In the case of maximum distance separable codes, if any N - K of the sub-messages are received, the message can be recovered. The variable K in relation to N defines the degree of redundancy. <p> Moreover, these approaches are not exible, since they each only offer a single level of fault tolerance at a fixed cost. Much research has been done in the area of of erasure and error correcting codes to combat packet loss or bit errors in computer networks <ref> [3, 9, 20, 21] </ref>. [1] discusses some of the relevant ones in more detail. Most works in the area of fault tolerance for computer networks focus on the issue of maintaining connectivity, not of maintaining performance bounds, in the face of network failures.
Reference: [10] <author> A. Banerjea, C. Parris and D. Ferrari, </author> <title> ``Recovering Guaranteed Performance Service Connections from Single and Multiple Faults'', </title> <booktitle> Proceedings of Globecom'94, </booktitle> <address> San Francisco, </address> <month> November </month> <year> 1994, </year> <pages> 162-168. </pages> <note> Also available as Tech. </note> <institution> Rep.-93-066, International Computer Science Institute, Berkeley, </institution> <address> CA. </address>
Reference-contexts: However, the capacity is guaranteed to be there, unlike what happens in the reactive fault recovery mechanisms described in <ref> [10] </ref>, where the recovery may fail due to existing reservations in the network. 3. Simulator design The simulator used for the experiments is based on a simulator for realtime channels written at the University of California, Berkeley. <p> The simulator models the connection management as well as the data transfer phase of realtime communication. This simulator was modified to support the simulation of failure recovery and fault tolerance. When a failure is simulated, the failure recovery module simulates the connection management necessary to reroute the affected channels <ref> [10] </ref>. The simulator also supports fault tolerant channels, based on the ideas presented in the preceding section. <p> The simulator kept track of the number of packets dropped, the number of messages decoded, the buffers used, and so on. When a fault was simulated, all packets on the failed link were lost. The fault recovery process described <ref> [10] </ref> was activated, and the affected channels rerouted. Unlike the experiments in [10], data transmission across a link could also fail randomly with a probability determined by a parameter of the experiment, simulating losses due to transmission errors. <p> When a fault was simulated, all packets on the failed link were lost. The fault recovery process described <ref> [10] </ref> was activated, and the affected channels rerouted. Unlike the experiments in [10], data transmission across a link could also fail randomly with a probability determined by a parameter of the experiment, simulating losses due to transmission errors. At simulated time equal to 39 seconds, the measurements were written out to a file. <p> This index was first presented in <ref> [10] </ref>. capacity is much larger than the requirement of a single realtime channel.
Reference: [11] <author> C. Parris, </author> <title> Dynamic Channel Management, </title> <institution> University of California at Berkeley. </institution> <type> PhD Thesis. </type>
Reference-contexts: We do not change the end-to-end delay on any path by this replacement process; thus, we are guaranteed to find all paths eventually. 1 We use this algorithm to minimize the resource usage while meeting the delay constraints. The details are given in <ref> [11] </ref>. The simulator models the behavior of the dispersity system during data transfer at the level of detail of individual packets. Thus, the encoding and decoding operations, which occur at the bit-level, are not simulated.
Reference: [12] <author> N. F. Maxemchuk, </author> <title> ``Dispersity Routing in High Speed Networks'', </title> <booktitle> Computer Networks and ISDN Systems 25, </booktitle> <month> 6 (January </month> <year> 1993), </year> <pages> 645-661. </pages>
Reference-contexts: Related work The idea of dispersity routing was first presented in [2]. This work used statistical analysis, under Poisson arrival and steady state assumptions, to compute the reduction in transmission times and the load balancing effect of dispersity routing. <ref> [12] </ref> studied the use of dispersity routing for a medical image retrieval application on a circuit switched network, assuming on demand call placement with retries and a statistical limit on the tolerable delay, using similar analytical techniques. [13] studied queue buildup analytically assuming bulk arrival processes and the loss behaviour through
Reference: [13] <author> Q. Ding and S. C. Liew, </author> <title> ``A Performance Analysis of a Parallel Communications Scheme for ATM Networks'', </title> <booktitle> Proceedings of the IEEE GLOBECOMM'95, </booktitle> <address> Singapore, </address> <month> November, </month> <year> 1995, </year> <pages> 898-902. </pages>
Reference-contexts: the reduction in transmission times and the load balancing effect of dispersity routing. [12] studied the use of dispersity routing for a medical image retrieval application on a circuit switched network, assuming on demand call placement with retries and a statistical limit on the tolerable delay, using similar analytical techniques. <ref> [13] </ref> studied queue buildup analytically assuming bulk arrival processes and the loss behaviour through simulation with on-off sources. Most of the assumptions if these works, such as statistical arrival processes, are not applicable in our network model.
Reference: [14] <author> L. Zhang, R. Braden, D. Estrin, S. Herzog and S. Jamin, </author> <title> Resource ReSerVation Protocol (RSVP) -- Version 1 Functional Specification, </title> <type> Internet Draft, </type> <month> May, </month> <year> 1996. </year> <note> available from ftp://ds.internic.net/internet-drafts/draft-ietf-rsvp spec-12.txt. </note>
Reference-contexts: We also compared our approach to the work in progress in the Integrated Services and ReSerVation Protocol (RSVP) Working Groups of the Internet Engineering Task Force (IETF) to extend the Internet service model to include realtime services <ref> [14, 15] </ref>.
Reference: [15] <author> C. Partridge and S. Shenker, </author> <title> Specification of Guaranteed Quality of Service, </title> <type> Internet Draft, </type> <month> December, </month> <year> 1995. </year> <note> available from ftp://ds.internic.net/internet-drafts/draft-ietf-intserv guaranteed-svc-03.txt. </note>
Reference-contexts: We also compared our approach to the work in progress in the Integrated Services and ReSerVation Protocol (RSVP) Working Groups of the Internet Engineering Task Force (IETF) to extend the Internet service model to include realtime services <ref> [14, 15] </ref>.
Reference: [16] <author> A. Banerjea, </author> <title> Fault Management for Realtime Networks, </title> <institution> University of California at Berkeley, </institution> <month> December </month> <year> 1994. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: exists, the long time intervals associated with the route update protocols and the reservation refresh process (due to the requirements of stability and scalability) lead us to the conclusion that the recovery times of this approach would be significantly slower than the recovery times of explicit connection rerouting described in <ref> [16] </ref>. In addition, the connectionless routing paradigm 5 of the Internet makes it difficult to apply dispersity routing to provide fault tolerant communication [17]. On the other hand, the Internet approach leads to a very scalable design for a large and heterogeneous network.
Reference: [17] <author> S. Chiou and V. O. K. Li, </author> <title> ``Diversity Transmissions in a Communication network with Unreliable Components'', </title> <booktitle> Proceedings of ICC'87, </booktitle> <address> Seattle, Washington, </address> <month> June </month> <year> 1987, </year> <pages> 968-973. </pages>
Reference-contexts: In addition, the connectionless routing paradigm 5 of the Internet makes it difficult to apply dispersity routing to provide fault tolerant communication <ref> [17] </ref>. On the other hand, the Internet approach leads to a very scalable design for a large and heterogeneous network. It seems likely that future networks will have both paradigms coexisting, such as ATM backbones connecting together non-ATM as well as ATM LANs, and the Internet protocols providing end-to-end connectivity.
Reference: [18] <author> Q. Zheng and K. G. Shin, </author> <title> ``Fault-tolerant real-time communication in distributed computing systems'', </title> <booktitle> Proceedings of the 22nd International Symposium on Fault-Tolerant Computing, </booktitle> <address> Boston, MA, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: The ``core'' topology of Figure 1 fits this model; nodes seven through seventeen represent switches connected to LANs, and we only simulated the ATM portion of the network. Another approach to connection oriented fault tolerant realtime networks is the Single Failure Immune (SFI) <ref> [18] </ref> channel. SFI channels are also extensions to the basic realtime channels, but they only protect against single failures, and use more resources and require more support from the underlying realtime network than our approach.
Reference: [19] <author> Q. Zheng and K. G. Shin, </author> <title> ``Establishment of Isolated Failure Immune Real-Time Channels in HARTS'', </title> <journal> IEEE Transactions on Parallel and Distributed Systems 6, </journal> <volume> 2 (Febrary 1995), </volume> <pages> 113-119. </pages>
Reference-contexts: SFI channels are also extensions to the basic realtime channels, but they only protect against single failures, and use more resources and require more support from the underlying realtime network than our approach. Isolated Failure Immune (IFI) <ref> [19] </ref> channels protect against multiple failures, but are only usable in special network topologies (e.g., hexagonal mesh network). In addition, they still use more resources and require more network support than our approach.
Reference: [20] <author> A. J. McAuley, </author> <title> ``Reliable Broadband Communication Using a Burst Erasure Correcting Code'', </title> <booktitle> Proceedings of ACM SIGCOMM '90, </booktitle> <address> Philadelhia, PA, </address> <month> September, </month> <year> 1990, </year> <pages> 297-306. </pages>
Reference-contexts: Moreover, these approaches are not exible, since they each only offer a single level of fault tolerance at a fixed cost. Much research has been done in the area of of erasure and error correcting codes to combat packet loss or bit errors in computer networks <ref> [3, 9, 20, 21] </ref>. [1] discusses some of the relevant ones in more detail. Most works in the area of fault tolerance for computer networks focus on the issue of maintaining connectivity, not of maintaining performance bounds, in the face of network failures.

References-found: 20

