URL: ftp://ftp.cs.brown.edu/pub/techreports/92/cs92-15.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-92-15.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Agarwal and J. Park, </author> <title> "Notes on Searching Multidimensional Monotone Arrays," </title> <booktitle> Proc. ACM Symp. on Foundations of Computer Science (1988), </booktitle> <pages> 496-512. </pages>
Reference-contexts: The problem of determining the value of fi was formalized by Agarwal and Park as the Tube minima problem and has many applications in computational geometry <ref> [1] </ref>. Atallah [4] has recently given an efficient parallel algorithm for determining the tube minima of an n fi n fi n totally monotone matrix using O (n 2 = log log n) processors which runs in time O (log log n) in a CRCW PRAM.
Reference: [2] <author> N. Alon and Z. Galil, </author> <title> "On the Exponent of the All Pairs Shortest Path Problem," </title> <booktitle> Proceedings of the 32nd Symposium on Foundations of Computer Science (1991), </booktitle> <pages> 569-575. </pages>
Reference-contexts: For general digraphs, the best algorithm runs in O (log 2 n) time with n 3 processors (using the naive algorithm for matrix multiplication) [11]. Recently Alon and Galil <ref> [2] </ref> have given an algorithm which uses fast matrix multiplication techniques to solve the all-pairs shortest paths problem. The work done by their algorithm is O ((M n) 3+! 2 log 3 n) if the edges have integral weights which are bounded above by M .
Reference: [3] <author> A. Apostolico, M. J. Atallah, L. Larmore, and H. S. Mcfaddin, </author> <title> "Efficient Parallel algorithms for String Editing and Related Problems ," SIAM J. </title> <booktitle> Computing 19 (1990), </booktitle> <pages> 968-988. </pages>
Reference-contexts: In such a digraph the shortest path between any two vertices can be determined in O (log 2 n) time with O (n) processors <ref> [3] </ref>. The shortest path problem on grid digraphs has applications in text processing, biological research, tomography and medical diagnosis. In this work we consider a class of digraphs that extends grid digraphs, namely, planar layered digraphs. <p> We call X a one-way separator if any directed path p between two vertices in G crosses X at most once. Grid digraphs for instance have one-way separators of size p n that 1=2-split the graph. In fact the shortest path algorithm in <ref> [3] </ref> uses such separators to construct a divide and conquer solution. <p> This can be done in constant time with n x processors in a CRCW PRAM. However, a little thought reveals that such a naive approach would require too many processors. Assume without loss of generality that n s n t . We now use an idea from <ref> [3] </ref> to show that the all-pairs shortest paths from vertices in S to vertices in T can be computed in polylogarithmic time with n s n t + n s n x processors. Later we reduce the processors count to n s (n t + n x )= log n).
Reference: [4] <author> M.J. Atallah, </author> <title> "A Faster Parallel Algorithm for a Matrix Searching Problem," </title> <booktitle> Proc. 2nd Scandinavian Workshop on Algorithm Theory (1990), </booktitle> <pages> 193-200. </pages>
Reference-contexts: The problem of determining the value of fi was formalized by Agarwal and Park as the Tube minima problem and has many applications in computational geometry [1]. Atallah <ref> [4] </ref> has recently given an efficient parallel algorithm for determining the tube minima of an n fi n fi n totally monotone matrix using O (n 2 = log log n) processors which runs in time O (log log n) in a CRCW PRAM.
Reference: [5] <author> R. Bellman, </author> <title> "On a routing problem," </title> <booktitle> Quarterly of Applied Mathematics 16 (1958), </booktitle> <pages> 87-90. </pages>
Reference: [6] <author> R. Cole and U. Vishkin, </author> <title> "Optimal parallel algorithms for expression tree evaluation and list ranking ," Procedings of the third Agean Workshop on Computing: </title> <booktitle> (1988), </booktitle> <pages> 91-100. </pages>
Reference-contexts: series-parallel 1 digraph the weight of a shortest path between the source and the sink is obtained by evaluating an arithmetic expression with operators + (associated with series compositions) and min (associated with parallel compositions), which can be done optimally in O (log n) time with n= log n processors <ref> [6] </ref>. A grid digraph has the vertices arranged in a rectangular grid and the edges directed from left to right and from bottom to top (an example is shown in Figure 1).
Reference: [7] <author> G. Di Battista and E. Nardelli, </author> <title> "An Algorithm for Testing Planarity of Hierarchical Graphs," </title> <booktitle> Proc. In. Workshop WG 86, </booktitle> <address> Bernierd, </address> <month> June </month> <year> 1986. (1987), </year> <pages> 277-289. </pages>
Reference-contexts: G is a planar layered digraph if it admits a planar k-line embedding. Figure 2 gives an example of a layered graph with a planar 5-line embedding. Layered graphs have been studied under the name of proper hierarchies in [25]. Di Battista and Nardelli <ref> [7] </ref> give efficient algorithms to test if a layered digraph with only one source is planar. Recently Kosaraju [13] has developed an efficient parallel algorithm to evaluate planar layered circuits.
Reference: [8] <author> E. W. Dijkstra, </author> <title> "A note on two problems in connexion with graphs," </title> <booktitle> Numerische Mathematik 1 (1959), </booktitle> <pages> 269-271. </pages>
Reference-contexts: Among the well known sequential algorithms for this problem is the classical Dijkstra's algorithm <ref> [8] </ref>, based on a dynamic programming approach. Its time complexity is O ((n + m)) log n) if elementary data structures are used, and O (n log n + m) when implemented with Fibonacci heaps [9].
Reference: [9] <author> M.L. Fredman and R.E. Tarjan, </author> <title> "Fibonacci Heaps and their Uses in Improved Network Optimization Algorithms," </title> <editor> J. </editor> <booktitle> ACM 34 (1987), </booktitle> <pages> 596-615. </pages>
Reference-contexts: Among the well known sequential algorithms for this problem is the classical Dijkstra's algorithm [8], based on a dynamic programming approach. Its time complexity is O ((n + m)) log n) if elementary data structures are used, and O (n log n + m) when implemented with Fibonacci heaps <ref> [9] </ref>. For the important class of acyclic digraphs, a simple variation of Dijkstra's algorithm runs in time O (n + m) . Here n and m denote the number of vertices and edges of G, respectively.
Reference: [10] <author> H. Gazit and G. Miller, </author> <title> "A parallel algorithm for finding a seperator in planar graphs," </title> <booktitle> Proc. FOCS,1987 (1987), </booktitle> <pages> 238-248. </pages>
Reference-contexts: A parallel algorithm for finding a cycle separator for biconnected graphs was given by Miller [17] which uses n processors if the breadth first search tree of the graph is already known, an improved version of the algorithm was given by Gazit and Miller <ref> [10] </ref>, which uses randomization to find a cycle separator with n 1+* processors. Randomized parallel algorithms to find small separators for more general undirected graphs are given in [18].
Reference: [11] <author> M. Gondran and M. Minoux, </author> <title> in Graphs and Algorithms, </title> <address> Wily InterScience New York, </address> <year> 1984. </year>
Reference-contexts: Developing a parallel shortest path algorithm that runs in polylogarithmic time with a linear number of processors is an outstanding open problem. Indeed, all the known polylog-time parallel techniques for this problem are based on matrix multiplication <ref> [11] </ref> and are therefore far from optimal in terms of the total work done, especially when the digraph is sparse. For general digraphs, the best algorithm runs in O (log 2 n) time with n 3 processors (using the naive algorithm for matrix multiplication) [11]. <p> problem are based on matrix multiplication <ref> [11] </ref> and are therefore far from optimal in terms of the total work done, especially when the digraph is sparse. For general digraphs, the best algorithm runs in O (log 2 n) time with n 3 processors (using the naive algorithm for matrix multiplication) [11]. Recently Alon and Galil [2] have given an algorithm which uses fast matrix multiplication techniques to solve the all-pairs shortest paths problem.
Reference: [12] <author> R.M. Karp and V. Ramachandran, </author> <title> "A Survey of Parallel Algorithms for Shared Memory Machines," </title> <booktitle> in Handbook of Theoretical Computer Science, </booktitle> <publisher> North Holland, </publisher> <year> 1990. </year>
Reference-contexts: This transformation can be done in O (log n) with n processors using techniques in <ref> [12] </ref>. A planar layered digraph with exactly one source s (on the first layer) and one sink t ( on the last layer) is called a planar layered st-graph. <p> Proof : Steps 1 through 4 can be done using standard techniques (see <ref> [12] </ref>). Steps 5 and 6 can be completed in O (log n) time using techniques given in [22]. 2 We now use X to construct a divide and conquer solution for the shortest path problem.
Reference: [13] <author> S. </author> <title> Kosaraju, </title> <type> Personal Communication, </type> <year> 1991. </year>
Reference-contexts: Figure 2 gives an example of a layered graph with a planar 5-line embedding. Layered graphs have been studied under the name of proper hierarchies in [25]. Di Battista and Nardelli [7] give efficient algorithms to test if a layered digraph with only one source is planar. Recently Kosaraju <ref> [13] </ref> has developed an efficient parallel algorithm to evaluate planar layered circuits.
Reference: [14] <author> E. Lawler, </author> <title> Combinatorial Optimization, </title> <publisher> Holt, Rinehart and Winston, </publisher> <year> 1976. </year>
Reference: [15] <author> A. Lempel, S. Even, and I. Cederbaum, </author> <title> "An Algorithm for Planarity Testing of Graphs," Theory of Graphs, </title> <booktitle> Int. Symposium (1966), </booktitle> <pages> 215-232. </pages>
Reference-contexts: These graphs were first introduced in the planarity testing algorithm of Lempel et al. <ref> [15] </ref>. We now define the concept of a left ordering of the vertices in a planar st-graph, which will prove useful in our algorithm. This ordering was introduced by Tamassia and Preparata [21].
Reference: [16] <author> R. J. Lipton and R. E. Tarjan, </author> <title> "Applications of a Planar Separator Theorem," </title> <journal> SIAM J. Computing 9 (1980), </journal> <pages> 615-627. </pages>
Reference-contexts: A k g such that there are no edges between any two sets A i and A j and for all A i we have jA i j ffin. Lipton and Tarjan <ref> [16] </ref> proved that any planar graph with n vertices has a p 8n-separator that 2=3-splits. This result and other extensions to it have paved the way to divide and conquer solutions for many problems in planar graphs. <p> We use this separator to solve the shortest path problem for the graph G by recursively solving the subproblems in the four pieces and patching the solutions along X. To show the existence of such a separator we need the following lemma, which follows directly from the arguments in <ref> [16] </ref>: Lemma 1 Let G be any n-vertex planar layered st-graph containing layers 1 through k. Let S i denote the set of vertices in the ith layer, and let n i denote the size of the set S i . <p> We still have to show that the number of all pairs subproblems at any stage is not too much to handle with just n processors since we are aiming for a linear processor solution. We use the following lemma which follows from the arguments in <ref> [16] </ref> to show that the total number of source-sink pairs at any level in the recursion is O (n log n). Lemma 2 Let G be an n-vertex planar layered st-graph, and let 0 * 1.
Reference: [17] <author> G. Miller, </author> <title> "Finding small simple cycle seperators for 2-connected planar graphs," </title> <journal> Journal of Computer and System Sciences 32 (1986), </journal> <pages> 265-279. </pages>
Reference-contexts: This result and other extensions to it have paved the way to divide and conquer solutions for many problems in planar graphs. A parallel algorithm for finding a cycle separator for biconnected graphs was given by Miller <ref> [17] </ref> which uses n processors if the breadth first search tree of the graph is already known, an improved version of the algorithm was given by Gazit and Miller [10], which uses randomization to find a cycle separator with n 1+* processors.
Reference: [18] <author> G. Miller and W. Thurston, </author> <title> "Seperators in Two and Three Dimensions," </title> <booktitle> Proc. STOC, </booktitle> <year> 1990 (1990), </year> <pages> 300-309. </pages>
Reference-contexts: Randomized parallel algorithms to find small separators for more general undirected graphs are given in <ref> [18] </ref>. Recently Shannon and Wan [20] have given the first linear-processor deterministic algorithm to find O ( p n) separators in planar graphs.
Reference: [19] <author> V. Pan and J. Reif, </author> <title> "Extension of the Parallel Nested Dissection Algorithm to the Path Algebra Problems," </title> <institution> Aiken Computation Lab, Harvard University, </institution> <type> Technical Report TR-15-85, </type> <year> 1985. </year>
Reference-contexts: However, for calculating single-source shortest paths or for the single-pair shortest path problem even this algorithm is far from optimal. For planar digraphs the number of processors for the single source problem can be reduced to n 1:5 = log n <ref> [19] </ref> while keeping the parallel time down to O (log 3 n). To our knowledge, efficient parallel algorithms for computing shortest paths have been devised only for two special classes of digraphs: series-parallel digraphs and grid digraphs.
Reference: [20] <author> G. Shannon and F. Wan, </author> <title> "Subdividing Planar Graphs in Prallel," </title> <institution> Department of Computer Science Indiana University, Bloomington, </institution> <type> Technical Report, </type> <year> 1991. </year>
Reference-contexts: Randomized parallel algorithms to find small separators for more general undirected graphs are given in [18]. Recently Shannon and Wan <ref> [20] </ref> have given the first linear-processor deterministic algorithm to find O ( p n) separators in planar graphs. However, these separators seem unsuitable for use in solving problems on directed planar graphs because they do not take into account the direction of edges, while separating the graph.
Reference: [21] <author> R. Tamassia and F.P. Preparata, </author> <title> "Dynamic Maintenance of Planar Digraphs, with Applications," </title> <booktitle> Algorithmica 5 (1990), </booktitle> <pages> 509-527. </pages>
Reference-contexts: These graphs were first introduced in the planarity testing algorithm of Lempel et al. [15]. We now define the concept of a left ordering of the vertices in a planar st-graph, which will prove useful in our algorithm. This ordering was introduced by Tamassia and Preparata <ref> [21] </ref>. We do this by making use of the dual graph of G (labeled G fl ) defined as follows: 1. Every internal face f in G corresponds to a vertex in G fl . 2.
Reference: [22] <author> R. Tamassia and J.S. Vitter, </author> <title> "Parallel Transitive Closure and Point Location in Planar Structures," </title> <note> SIAM J. Computing 20 (1991 (to appear)). 14 </note>
Reference-contexts: Proof : All the steps can be done in O (log n) time using techniques in <ref> [22] </ref>. 2 A planar layered st-graph is a special case of a planar st-graph which is defined as a planar acyclic digraph with exactly one source, s, and exactly one sink, t, embedded in the plane so that s and t are on the boundary of the external face. <p> Proof : Steps 1 through 4 can be done using standard techniques (see [12]). Steps 5 and 6 can be completed in O (log n) time using techniques given in <ref> [22] </ref>. 2 We now use X to construct a divide and conquer solution for the shortest path problem. <p> To determine the processor and time complexity we note that the left ordering of the any planar st-graph with n vertices can be determined in O (log n) time with n processors <ref> [22] </ref>. Thus we can determine the orderings of S and T in O (log n p ) time with n p processors. The time complexity of the various steps are as follows: 11 1.
Reference: [23] <author> J. Valdes, R.E. Tarjan, and E.L. Lawler, </author> <title> "The Recognition of Series Parallel Digraphs," </title> <journal> SIAM J. on Computing 11 (1982), </journal> <pages> 298-313. </pages>
Reference-contexts: To our knowledge, efficient parallel algorithms for computing shortest paths have been devised only for two special classes of digraphs: series-parallel digraphs and grid digraphs. A series-parallel digraph <ref> [23] </ref> is an acyclic digraph with exactly one source and exactly one sink that is recursively constructed by series and parallel compositions.
Reference: [24] <author> L. Valiant, </author> <title> "Parallelism in Comparison Problems," </title> <journal> SIAM Journal of Computing 4 (1975), </journal> <pages> 348-355. </pages>
Reference-contexts: Such an algorithm would also give the fastest possible algorithm for the row minima problem (which is the same as the tube minima problem but applied to a two-dimensional array), in light of the (log log n) lower bound by Valiant <ref> [24] </ref> for finding the minimum of n integers with O (n) work by using only comparisons. 5 Conclusions We have given a linear processor CREW algorithm for determining the shortest paths in a planar layered digraph which runs in time O (log 2 n).
Reference: [25] <author> S. Whitesides, </author> <title> "Forms of hierarchy: A selected bibliography," </title> <type> Gen. </type> <institution> Syst. </institution> <month> 14 </month> <year> (1969), </year> <pages> 3-15. 15 </pages>
Reference-contexts: G is a planar layered digraph if it admits a planar k-line embedding. Figure 2 gives an example of a layered graph with a planar 5-line embedding. Layered graphs have been studied under the name of proper hierarchies in <ref> [25] </ref>. Di Battista and Nardelli [7] give efficient algorithms to test if a layered digraph with only one source is planar. Recently Kosaraju [13] has developed an efficient parallel algorithm to evaluate planar layered circuits.
References-found: 25

