URL: http://www.cs.indiana.edu/l/www/pub/pmaciel/THESIS/thesis.ps.gz
Refering-URL: http://www.cs.indiana.edu/l/www/pub/pmaciel/THESIS/
Root-URL: http://www.cs.indiana.edu
Title: VISUAL NAVIGATION OF LARGE ENVIRONMENTS USING TEXTURED CLUSTERS  
Author: by Paulo William Cardoso Maciel 
Degree: Submitted to the faculty of the University Graduate School in partial fulfillment of the requirements for the degree Doctor of Philosophy in the  
Date: April 1995  
Affiliation: Department of Computer Science Indiana University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> John M. Airey, John H. Rohlf, and Jr Frederick P. Brooks. </author> <title> Towards image realism with interactive update rates in complex virtual building environments. </title> <booktitle> Computer Graphics (1990 Symposium on Interactive Computer Graphics), </booktitle> <pages> pages 41-50, </pages> <year> 1990. </year>
Reference-contexts: Unfortunately, the complexity of the scene inside the viewing frustum can still be beyond the interactive capacity of the hardware. Examples of this technique can be found in <ref> [36, 16, 1] </ref>. Funkhouser et al. [16] describe a technique for managing large amounts of data during an interactive walkthrough of an architectural model that uses spatial subdivision, visibility analysis, and objects at multiple levels-of-detail to reduce the number of polygons to render per scene.
Reference: [2] <author> Kurt Akeley. </author> <title> Reality engine graphics. </title> <journal> Computer Graphics, </journal> <pages> pages 109-116, </pages> <year> 1993. </year>
Reference-contexts: Introduction Computer-generated visual simulations are used in many areas such as flight simulation, building walkthroughs, computational fluid dynamics and video games, with the purpose of training, evaluation, education, and entertainment. Since current general-purpose graphics workstations allow the interactive display of tens of thousands 1 of 3D polygons <ref> [2] </ref>, these simulations have become more common and accessible to a variety of users such as scientists and educators. Visual simulations will ultimately reach mainstream users at their homes using the information superhighway [17] and interactive television [8]. <p> they simulate. 1.1 Problem Statement The reason that the criteria mentioned above are mutually incompatible is that while an interactive system needs to achieve interactive frame rates 2 , realistic-looking models can contain hundreds of millions of polygons, far more than currently available workstations can render in an interactive fashion <ref> [2, 20, 33] </ref>. A balance between realism and interactivity is required. Deering [11] writes: Initial results show the expected: many industrial virtual reality applications need one to two orders of magnitude of improvement in display performance. This is actually a conservative statement. <p> Not only state-of-the-art hardware such as the SGI Reali-tyEngine <ref> [2] </ref> workstations (and graphics systems from other vendors such as Sun [12]) use this pipelined architecture, but also highly parallel architectures such as UNC's PixelFlow [33] use the same pipeline concept.
Reference: [3] <author> Peter K. Allen. </author> <title> A framework for implementing multi-sensor robotic tasks. </title> <booktitle> Proceedings of the Image Understanding Workshop, </booktitle> <volume> 1 </volume> <pages> 392-398, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: Although this same idea also applies to a group of objects (cluster), the details of how clusters are used are left to Chapter 6. 56 In Section 5.1 we develop an extensible object-oriented framework as in <ref> [27, 3, 25] </ref> within which objects (or groups of objects) can have multiple drawable representations, which we have been calling impostors, that can be drawn by a graphics hardware.
Reference: [4] <author> D. H. Ballard and Christopher M. Brown. </author> <title> Computer Vision. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1982. </year>
Reference-contexts: This assumes the center of the screen to be the focus of attention and takes into consideration that objects in the periphery of the field of view are not seen by the eyes with full detail compared to the ones close to the line of sight (See <ref> [4] </ref>). * The object's relative speed with respect to the viewpoint. <p> If, for all possible times `t', our selection strategy resulted in the global minimum of the error function, we can be confident about its use. 6 This metric is sensitive to properties of the image such as brightness, and slight changes in shape and size of objects (See <ref> [4] </ref>). 97 Time Selection t = 6 (3,3) t = 4 (3,1), (2,2), (1,3) t = 2 (2,0), (1,1) (0,2) Table 6.1: Possible set of representations that achieve a particular rendering time.
Reference: [5] <author> James F. Blinn and Martin E. Newell. </author> <title> Texture and reflection in computer generated images. </title> <journal> Communications of the ACM, </journal> <pages> pages 542-554, </pages> <month> October </month> <year> 1976. </year>
Reference-contexts: This increases the number of polygons that need to be sent through the graphics subsystem. One attempt to circumvent this problem presented in [35] is to use texture maps <ref> [5] </ref> to simulate the shading of surfaces in regions of very complex distribution of illumination. According to the authors, this substitution works fine for moderately complex environments but is not efficient for very complex models due to the inefficiency of texture memory management.
Reference: [6] <author> S. Bryson and S. K. </author> <title> Feiner. </title> <booktitle> Research frontiers in virtual reality. Computer Graphics, </booktitle> <pages> pages 473-474, </pages> <year> 1994. </year> <note> Siggraph Panel. 140 </note>
Reference-contexts: at approximately constant high frame rates so that the user has the feeling of actual immersion in the virtual 1 The Freedom Series of graphics accelerators from Evans & Sutherland can display up to 4 million meshed triangles per second and are available on many general purpose workstations. 1 world <ref> [32, 6] </ref>. User requirements will, for the foreseeable future, be ahead of what can be de-livered by graphics workstations and therefore software solutions that extract the maximum performance from the still very expensive graphics subsystems should be explored [6]. <p> User requirements will, for the foreseeable future, be ahead of what can be de-livered by graphics workstations and therefore software solutions that extract the maximum performance from the still very expensive graphics subsystems should be explored <ref> [6] </ref>. In this dissertation we describe the design of a system for a particular kind of visual simulation, namely, visual navigation of complex environments. With this system a user can navigate inside a virtual environment by using a device such as a mouse.
Reference: [7] <author> Kenneth Chiu and Peter Shirley. </author> <title> Rendering, complexity and perception. </title> <type> Eurographics' 94, </type> <month> June 94. </month>
Reference-contexts: The main issue regarding a visual navigation system is that its effectiveness is intimately connected to two key concepts: the realism with which it portrays the environment and the way the user interacts with it. "Realism" here is used in the sense of Chiu et al. <ref> [7] </ref>, in which the mental image formed by the user running the simulation of the virtual environment is similar to the image he would form by interacting with the real environment in such a way that the user becomes "convinced" that his experience running the simulation is real.
Reference: [8] <author> Jim Clark. </author> <title> A telecomputer. </title> <journal> Computer Graphics, </journal> <pages> pages 19-23, </pages> <year> 1992. </year>
Reference-contexts: Visual simulations will ultimately reach mainstream users at their homes using the information superhighway [17] and interactive television <ref> [8] </ref>. As graphics performance increases and its cost decreases, the new generation of users will demand more complex and more realistic animations.
Reference: [9] <author> Michael F. Cohen and Donald P. Greenberg. </author> <title> The hemi-cube a radiosity solution for complex environments. </title> <journal> Computer Graphics, </journal> <pages> pages 31-40, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Such a model takes into account how light leaving one surface interacts with all other surfaces in the environment and models the indirect "ambient" illumination component on the scene. The most known method to achieve global illumination is the radiosity method <ref> [9] </ref>. With this method, the shading and shadows of objects can accurately be computed if the surfaces of objects are meshes with fine enough resolution in places of high gradient of the intensity of illumination.
Reference: [10] <author> C. Cruz-Neira, </author> <title> D.J. Sandin, and T.A. Defanti. Surround-screen projection-based virtual reality: </title> <booktitle> The design and implementation of the cave. Computer Graphics, </booktitle> <pages> pages 135-142, </pages> <year> 1993. </year>
Reference-contexts: The forms of user interaction with the system can vary from a simple mouse/keyboard interface to more sophisticated ones such as data gloves [14] and enclosures such as those used in flight simulation [51] and in virtual reality applications <ref> [10] </ref>. Regardless of the way 2 this interaction takes place, the key to good user interaction is real-time response, that is, how fast the system responds to user requests.
Reference: [11] <author> Michael F. Deering. </author> <title> Making virtual reality more real: Experience with the virtual portal. </title> <booktitle> Graphics Interface, </booktitle> <pages> pages 219-225, </pages> <year> 1993. </year>
Reference-contexts: A balance between realism and interactivity is required. Deering <ref> [11] </ref> writes: Initial results show the expected: many industrial virtual reality applications need one to two orders of magnitude of improvement in display performance. This is actually a conservative statement.
Reference: [12] <author> Michael F. Deering and Scott R. Nelson. Leo: </author> <title> A system for cost effective 3D shaded graphics. </title> <journal> Computer Graphics, </journal> <pages> pages 101,108, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Not only state-of-the-art hardware such as the SGI Reali-tyEngine [2] workstations (and graphics systems from other vendors such as Sun <ref> [12] </ref>) use this pipelined architecture, but also highly parallel architectures such as UNC's PixelFlow [33] use the same pipeline concept. <p> This mathematical mapping is ideally suited for hardware implementation and many current workstations have this feature implemented in hardware. As memory prices go down and CPU power goes up, we can expect to see more low cost machines (such as <ref> [12] </ref>) providing hardware textures. For those machines that already have this capability, we can expect increases in texture memory size 1 and rendering speeds. However, texture maps need to be used judiciously.
Reference: [13] <editor> Martin A. Fischler and Oscar Firschein, editors. </editor> <booktitle> Readings in Computer Vision: Issues, problems, principles and paradigms. </booktitle> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> Los Altos, California, </address> <year> 1987. </year>
Reference-contexts: This blurring is accomplished by first shrinking the images by convolving them with a Gaussian operator and then expanding them to their original sizes. A Gaussian pyramid <ref> [13] </ref> can be used to achieve several degrees of blurring. 4. In the last step, we do a pixel by pixel comparison of the two resulting images.
Reference: [14] <author> James D. Foley, Andries van Dam, Steven K. Feiner, and John F. Hughes. </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <note> second edition, </note> <year> 1990. </year>
Reference-contexts: The forms of user interaction with the system can vary from a simple mouse/keyboard interface to more sophisticated ones such as data gloves <ref> [14] </ref> and enclosures such as those used in flight simulation [51] and in virtual reality applications [10]. Regardless of the way 2 this interaction takes place, the key to good user interaction is real-time response, that is, how fast the system responds to user requests. <p> This also applies to objects that move relative to the viewpoint since sampling problems <ref> [50, 14] </ref> will cause aliasing in the image depending on the object's position from frame to frame, that is, depending on the sampling method used a small feature of an object can appear in a frame and disappear in the subsequent frame. <p> in the future in terms of the speed of their components, it seems unlikely that the pipelined architecture of the graphics engine of these machines will cease to exist in the near future since it is based on the classic conceptual rendering pipeline that has been used for two decades <ref> [14, 50] </ref>. Not only state-of-the-art hardware such as the SGI Reali-tyEngine [2] workstations (and graphics systems from other vendors such as Sun [12]) use this pipelined architecture, but also highly parallel architectures such as UNC's PixelFlow [33] use the same pipeline concept. <p> In order to obtain formulas to compute the rendering cost of each stage of the pipeline in Section 3.1, we examine what happens when a triangle is sent through the corresponding conceptual pipeline <ref> [14] </ref>. This conceptual pipelines is shown in Figure 3.2. Entering the geometry stage at A, a triangle is first transformed from object coordinates to world coordinates in B and then to eye coordinates in C by a model and viewing transformations. <p> In fact, since each representation has a cost associated to it, we can select the one with the best accuracy/cost ratio to render. 49 4.4 Benefit of Clusters In this Section we examine visual organization rules that have been used by graphics designers for centuries <ref> [14] </ref> and codified by Gestalt psychologists (see [18]) in terms of "Laws of Organization" that appear to account for how humans perceive groups of objects and consider how the benefit of objects change when they are viewed as a whole.
Reference: [15] <author> Thomas A. Funkhouser and Carlo H. Sequin. </author> <title> Adaptive display algorithm for interactive frame rates during visualization of complex virtual environmnets. </title> <journal> Computer Graphics, </journal> <pages> pages 247-254, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: As we shall see in the background Chapter 2, Funkhouser et al. <ref> [15] </ref> adapted these techniques for building walkthroughs by determining in a preprocessing phase sets of objects that are potentially visible from partitions of the model and giving high rendering priority to objects that "contribute" the most to the scene. <p> Since our system architecture uses the system developed by Funkhouser et al. <ref> [15] </ref> as a base model we explain their system in detail. Their system maintains an approximately constant frame-rate by selectively rendering objects at varying degrees of geometrical complexity including no geometry at all, that is, a visible object may not be rendered. <p> Although this strategy reduces the number of polygons that have to be rendered in a scene, since the selection of LODs is static, the frame time can be arbitrarily large <ref> [15] </ref>. As the observer moves, many more objects can be visible than the machine hardware can render in real-time. This static selection mechanism is also not good in situations where lots of objects become visible/larger/slower, as happens in an aircraft landing simulation. <p> Because of this it too can present oscillatory behavior as the complexity of the scene changes as the user moves through the environment. To correct the problems caused by static and feedback LOD selection mechanisms, namely, arbitrarily large and non-uniform frame rates, Funkhouser <ref> [15] </ref> presented an algorithm that adjusts image quality adaptively to maintain a user specified frame rate based on heuristics that estimate the computational "Cost" of rendering a scene versus its "Benefit" (the "quality" of the picture). <p> If this value is bigger than the stored value then it is in shadow and is colored appropriately. 21 2.4 Rendering Model described in the previous Sections are put together into a single system and reflects the work done by Funkhouser et al. <ref> [15] </ref>. In a pre-processing phase, viewer independent visibility and illumination computations are performed and stored in a display database. In the visibility phase the structure that records the spatial relationship of objects in the model is built. These structures are later used to cull away hidden geometry in real-time. <p> Based on the Graphics Library Programming Tools and Techniques [42] document from Silicon Graphics Inc., and similar work by Funkhouser et at. <ref> [15] </ref>, we present a model of a generalized rendering system that this research is based on. This rendering system is represented as a pipeline with three functional stages as shown in Figure 3.1. 25 The first stage runs the application program that sends graphics requests to the graphics subsystem. <p> While the perception of the object (or its contribution to the feel of the simulation) varies during the visual navigation its importance is established prior to the simulation. The benefit of an object, as in the work by Funkhouser et al. <ref> [15] </ref>, should incorporate 40 factors such as: * The projected size of the object onto the screen (its image space size), since large objects seem to contribute more to the image. * The importance of the object to the simulation. <p> Each of these parameters can be computed to lie in the zero to one range and the benefit of an object can be computed in ways that can range from a simple multiplication <ref> [15] </ref> of all the above factors to their weighted average. <p> If levels of detail are used, a formula that takes into consideration the number of polygons present in the representation and the rendering algorithm used to draw it can be used as in <ref> [15] </ref>. If however view-dependent representations are used, then more elaborate accuracy measures are required. This is the topic of Section 4.3. 4.3 View Angle Dependent Benefit Calculation The benefit heuristic in Section 4.2, does not incorporate the view dependent nature of an object and its representations. <p> Although this heuristic is very similar to the one used by Funkhouser et. al. <ref> [15] </ref> they differ conceptually. The difference is that we regard the benefit of an object to be some property intrinsic to the object that is determined dynamically while accuracy is a property associated to one of the object's representations and is statically determined. <p> arbitrarily reducing its complexity our simulation will never, in a sense, disregard any piece of the model as in the previous approach 1 This would increase the memory requirements for the walkthrough program and a strategy to swap objects in and out of memory may be required 76 described in <ref> [15] </ref>. During the interactive phase of the navigation system the model hierarchy is traversed and the selected nodes are sent to the graphics pipeline. As we shall see in Section 6.4 this will be done in two steps.
Reference: [16] <author> Thomas A. Funkhouser, Carlo H. Sequin, and Seth Teller. </author> <title> Management of large amounts of data in interactive building walkthroughs. 1990 Symposium on Interactive 3D Graphics, </title> <journal> Computer Graphics, </journal> <pages> pages 11-20, </pages> <year> 1992. </year>
Reference-contexts: Unfortunately, the complexity of the scene inside the viewing frustum can still be beyond the interactive capacity of the hardware. Examples of this technique can be found in <ref> [36, 16, 1] </ref>. Funkhouser et al. [16] describe a technique for managing large amounts of data during an interactive walkthrough of an architectural model that uses spatial subdivision, visibility analysis, and objects at multiple levels-of-detail to reduce the number of polygons to render per scene. <p> Unfortunately, the complexity of the scene inside the viewing frustum can still be beyond the interactive capacity of the hardware. Examples of this technique can be found in [36, 16, 1]. Funkhouser et al. <ref> [16] </ref> describe a technique for managing large amounts of data during an interactive walkthrough of an architectural model that uses spatial subdivision, visibility analysis, and objects at multiple levels-of-detail to reduce the number of polygons to render per scene. <p> In this Section we present the main LOD selection paradigms: static, feedback and predictive. In <ref> [16] </ref> the criterion used to select a given object LOD is static, i.e., based on a predetermined size and speed threshold that are compared against the size in screen pixels of an average face of the object and the object's relative speed to the observer, respectively. <p> Two transition methods have been used: one uses morphing (or geometric interpolation) as in [37, 26, 49] and the other uses hardware dependent color blending as described in <ref> [37, 41, 16, 51] </ref>. Both approaches present problems. While morphing may not be feasible in real-time if the number of vertices on the object is too large, color blending has to be used with care since when one object fades in the other has to gradually fade out.
Reference: [17] <author> Branko J. Gerovac. </author> <title> Implications of merging digital television, </title> <journal> communications and computing. Computer Graphics, </journal> <pages> pages 393-394, </pages> <year> 1992. </year> <note> Siggraph Panel. </note>
Reference-contexts: Visual simulations will ultimately reach mainstream users at their homes using the information superhighway <ref> [17] </ref> and interactive television [8]. As graphics performance increases and its cost decreases, the new generation of users will demand more complex and more realistic animations.
Reference: [18] <author> E. Bruce Goldstein. </author> <title> Sensation and Perception. </title> <publisher> Wadsworth Publishing Co., </publisher> <address> Belmont, California, </address> <year> 1980. </year>
Reference-contexts: since each representation has a cost associated to it, we can select the one with the best accuracy/cost ratio to render. 49 4.4 Benefit of Clusters In this Section we examine visual organization rules that have been used by graphics designers for centuries [14] and codified by Gestalt psychologists (see <ref> [18] </ref>) in terms of "Laws of Organization" that appear to account for how humans perceive groups of objects and consider how the benefit of objects change when they are viewed as a whole. <p> Nearness, states that objects near to each other appear to be grouped together. In 50 not some complex figure. Adapted from <ref> [18] </ref>. they are close to each other they appear to be grouped in the same row. 4. Good continuation, states that points that form a straight or smooth contour when connected to each other seem to belong together.
Reference: [19] <author> Roy Hall, Mimi Bussan, Priamos Georgiades, and Donald P. Greenberg. </author> <title> A testbed for architectural modelling. </title> <booktitle> Eurographics' 91, </booktitle> <pages> pages 47-57, 91. </pages>
Reference-contexts: Schneider et al. [39] describes an interactive walkthrough system that automatically simplifies objects directly designed as polyhedral models. They used an algorithm that collapses vertices in a 3D grid to obtain several simplified versions of an object. Hall et al. <ref> [19] </ref> describe a modeling system that is capable of generating objects at 14 multiple levels-of-detail based on a user specified shape accuracy parameter. The number of accuracy levels depend on the type of the object.
Reference: [20] <author> Chandlee B. Harrell and Farhad Fouladi. </author> <title> Graphics rendering architecture for a high performance desktop workstation. </title> <journal> Computer Graphics, </journal> <pages> pages 93-100, </pages> <year> 1993. </year>
Reference-contexts: they simulate. 1.1 Problem Statement The reason that the criteria mentioned above are mutually incompatible is that while an interactive system needs to achieve interactive frame rates 2 , realistic-looking models can contain hundreds of millions of polygons, far more than currently available workstations can render in an interactive fashion <ref> [2, 20, 33] </ref>. A balance between realism and interactivity is required. Deering [11] writes: Initial results show the expected: many industrial virtual reality applications need one to two orders of magnitude of improvement in display performance. This is actually a conservative statement.
Reference: [21] <author> Donald Hearn and M. Pauline Baker. </author> <title> Computer Graphics. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <note> second edition, </note> <year> 1994. </year>
Reference-contexts: In this way, we can select the representation that best fits the image quality requirements and the amount of rendering time we have available at each frame. Based on the discussion above, the tree structure that we decided to use a variant of an octree <ref> [21] </ref> in which instead of having actual objects associated to its nodes we have sets of hardware drawable representations for the objects that it spatially subsumes.
Reference: [22] <author> Hughes Hopper, Tony DeRose, Tom Duchamp, John McDonald, and Werner Stuetsle. </author> <title> Surface reconstruction from unorganized points. </title> <journal> Computer Graphics, </journal> <pages> pages 71-78, </pages> <year> 1992. </year>
Reference-contexts: For generation of polygonal representations at different LODs of a real object from sample points obtained from a laser range scanner, Hoppe et al. devised a mesh generation method that can fit a mesh of arbitrary topological type to a set of data points <ref> [22] </ref>, and a mesh optimization method [23] that improves the fit of the mesh and reduces its number of faces, recovering sharp edges and corners common in objects such as machine parts.
Reference: [23] <author> Hughes Hopper, Tony DeRose, Tom Duchamp, John McDonald, and Werner Stuetsle. </author> <title> Mesh optimization. </title> <journal> Computer Graphics, </journal> <pages> pages 19-26, </pages> <year> 1993. </year>
Reference-contexts: In cases like this, an initial mesh has to be formed from the set of sampled 3D points, and then simplified using mesh simplification techniques <ref> [23] </ref>. A technique devised by Turk [49] is appropriate for generating curved surfaces. <p> For generation of polygonal representations at different LODs of a real object from sample points obtained from a laser range scanner, Hoppe et al. devised a mesh generation method that can fit a mesh of arbitrary topological type to a set of data points [22], and a mesh optimization method <ref> [23] </ref> that improves the fit of the mesh and reduces its number of faces, recovering sharp edges and corners common in objects such as machine parts. This optimization method can also be used to simplify an arbitrary mesh obtained by sampling data points from an initial mesh.
Reference: [24] <author> Silicon Graphics Inc. </author> <title> React In Irix: A description of real-time capabilities of Irix v5.3 on Onyx/Challenge multiprocessor systems., </title> <year> 1994. </year>
Reference-contexts: A more detailed description of real-time mechanisms specific to Silicon Graphics hardware, such as processor isolation, interrupts redirection, processor locking and so on can be found in a technical report in the bibliography <ref> [24] </ref>. 3.4 Rendering Cost Metric The success of any visual navigation system that attempts to maintain a fixed frame rate using the predictive approach described in Section 2.2.2 depends on an accurate and efficient rendering time (cost) heuristics.
Reference: [25] <author> Taligent Inc. </author> <title> Taligent Guide to Designing Programs: Well-mannered object oriented design in C++. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: Although this same idea also applies to a group of objects (cluster), the details of how clusters are used are left to Chapter 6. 56 In Section 5.1 we develop an extensible object-oriented framework as in <ref> [27, 3, 25] </ref> within which objects (or groups of objects) can have multiple drawable representations, which we have been calling impostors, that can be drawn by a graphics hardware.
Reference: [26] <author> Wayne E. Carlson James R. Kent and Richard E. Parent. </author> <title> Shape transformation for polyhedral objects. </title> <journal> Computer Graphics, </journal> <pages> pages 47-54, </pages> <year> 1992. </year>
Reference-contexts: Two transition methods have been used: one uses morphing (or geometric interpolation) as in <ref> [37, 26, 49] </ref> and the other uses hardware dependent color blending as described in [37, 41, 16, 51]. Both approaches present problems.
Reference: [27] <author> Ralph E. Johnson and Brian Foote. </author> <title> Designing reuseable classes. </title> <journal> Journal of Object-Oriented Programming, </journal> <month> August </month> <year> 1991. </year>
Reference-contexts: Although this same idea also applies to a group of objects (cluster), the details of how clusters are used are left to Chapter 6. 56 In Section 5.1 we develop an extensible object-oriented framework as in <ref> [27, 3, 25] </ref> within which objects (or groups of objects) can have multiple drawable representations, which we have been calling impostors, that can be drawn by a graphics hardware.
Reference: [28] <author> Stanley B. Lippman. </author> <title> C++ Primer. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <note> second edition, </note> <year> 1993. </year>
Reference: [29] <author> Paulo W. C. Maciel. </author> <title> Interactive rendering of complex 3D environments with pipelined graphics architectures. </title> <type> Technical Report TR403, </type> <month> May </month> <year> 1994. </year>
Reference-contexts: A technique to preprocess a complex environment (one that has the potential for more unoccluded objects inside the viewing frustum than the state-of-the-art hardware can draw in real-time) and produces an interactive walkthrough at approximately constant and high-frame rates (Chapter 6). 5 In a technical report <ref> [29] </ref> we present the initial algorithms that were used to decide what to render, their flaws and the motivation to design the framework presented in Chapter 5. 6 More specifically, an extensible object-oriented framework was implemented in C++[28, 46, 47, 31] within which both objects/groups of objects can have multiple representations
Reference: [30] <author> Paulo W. C. Maciel and Peter Shirley. </author> <title> Visual navigation of large environments using textured clusters. To appear in the 1995 Symposium on Interactive 3D Graphics, </title> <journal> Computer Graphics, </journal> <year> 1995. </year>
Reference: [31] <author> Scott Meyers. </author> <title> Effective C++: 50 Specific Ways to Improve Your Programs and Designs. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <year> 1993. </year> <month> 143 </month>
Reference: [32] <author> A. Mitchel. </author> <title> Determinants of immersivity in virtual reality: Graphics vs. action. </title> <journal> Com--puter Graphics, </journal> <note> page 496, 1994. Siggraph Panel. </note>
Reference-contexts: at approximately constant high frame rates so that the user has the feeling of actual immersion in the virtual 1 The Freedom Series of graphics accelerators from Evans & Sutherland can display up to 4 million meshed triangles per second and are available on many general purpose workstations. 1 world <ref> [32, 6] </ref>. User requirements will, for the foreseeable future, be ahead of what can be de-livered by graphics workstations and therefore software solutions that extract the maximum performance from the still very expensive graphics subsystems should be explored [6].
Reference: [33] <author> Steven Molnar, John Eyles, and John Poulton. Pixelflow: </author> <title> High-speed rendering using image composition. </title> <journal> Computer Graphics, </journal> <pages> pages 231-240, </pages> <year> 1992. </year>
Reference-contexts: they simulate. 1.1 Problem Statement The reason that the criteria mentioned above are mutually incompatible is that while an interactive system needs to achieve interactive frame rates 2 , realistic-looking models can contain hundreds of millions of polygons, far more than currently available workstations can render in an interactive fashion <ref> [2, 20, 33] </ref>. A balance between realism and interactivity is required. Deering [11] writes: Initial results show the expected: many industrial virtual reality applications need one to two orders of magnitude of improvement in display performance. This is actually a conservative statement. <p> Not only state-of-the-art hardware such as the SGI Reali-tyEngine [2] workstations (and graphics systems from other vendors such as Sun [12]) use this pipelined architecture, but also highly parallel architectures such as UNC's PixelFlow <ref> [33] </ref> use the same pipeline concept. Based on the Graphics Library Programming Tools and Techniques [42] document from Silicon Graphics Inc., and similar work by Funkhouser et at. [15], we present a model of a generalized rendering system that this research is based on.
Reference: [34] <author> Robert B. Murray. </author> <title> C++ Strategies and Tactics. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <year> 1993. </year>
Reference-contexts: This meta object contains a visibility flag and the data required to implement the temporal coherence and representation switching mechanism described in Sections 6.4.3 and 7.3.2, respectively. The `drawable representations' component of the meta object class in Figure 6.1, is actually a handle <ref> [34] </ref>, i.e. a pointer to an array of drawable representations class that contains pointers to instances of a `Drawable' class. A `current representation' field of the meta object indicates which representation in the array will be rendered at each frame.
Reference: [35] <author> Karol Myszkowski and Tosiyasy L. Kunii. </author> <title> Texture mapping as as alternative for meshing during walkthrough animation. </title> <type> Eurographics' 94, </type> <month> June 94. </month>
Reference-contexts: This method is the most used for interactive walkthroughs, but if light is to be simulated 20 precisely then very fine meshes are needed. This increases the number of polygons that need to be sent through the graphics subsystem. One attempt to circumvent this problem presented in <ref> [35] </ref> is to use texture maps [5] to simulate the shading of surfaces in regions of very complex distribution of illumination. According to the authors, this substitution works fine for moderately complex environments but is not efficient for very complex models due to the inefficiency of texture memory management.
Reference: [36] <author> Michael Kass Ned Greene and Gavin Miller. </author> <title> Hierarchical z-buffer visibility. </title> <journal> Computer Graphics, </journal> <pages> pages 231-238, </pages> <year> 1993. </year>
Reference-contexts: Unfortunately, the complexity of the scene inside the viewing frustum can still be beyond the interactive capacity of the hardware. Examples of this technique can be found in <ref> [36, 16, 1] </ref>. Funkhouser et al. [16] describe a technique for managing large amounts of data during an interactive walkthrough of an architectural model that uses spatial subdivision, visibility analysis, and objects at multiple levels-of-detail to reduce the number of polygons to render per scene. <p> By further using objects represented at different LODs, they were able to reduce this number even further to a total of 1:2% of the entire model, i.e. around 3K polygons out of the 250K. The technique described by Greene et al. <ref> [36] </ref> combines three types of coherence inherent in the visibility computation, namely, object-space, image-space, and temporal coherence.
Reference: [37] <author> John Rohlf and James Helman. Iris performer: </author> <title> A high performance multiprocessing toolkit for real-time 3D graphics. </title> <journal> Computer Graphics, </journal> <pages> pages 381-394, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: The second term penalizes meshes with many vertices. The third is a regularizing term that amounts to placing on each edge of the mesh a spring of rest length zero and some spring constant. This guarantees the existence of a minimum for the energy function. A more recent toolkit <ref> [37] </ref> provides an LOD generation function that probably incorporates techniques similar to those described above. 16 2.2.2 LOD Selection Given objects represented at different levels of geometric complexity we need criteria to decide which of them we will render at a certain point in the visual navigation. <p> Iris Performer <ref> [37] </ref>, which is a programming library with which programmers can hierarchically organize a model to improve culling, also automatically renders objects at different 17 levels-of-detail. <p> Two transition methods have been used: one uses morphing (or geometric interpolation) as in <ref> [37, 26, 49] </ref> and the other uses hardware dependent color blending as described in [37, 41, 16, 51]. Both approaches present problems. <p> Two transition methods have been used: one uses morphing (or geometric interpolation) as in [37, 26, 49] and the other uses hardware dependent color blending as described in <ref> [37, 41, 16, 51] </ref>. Both approaches present problems. While morphing may not be feasible in real-time if the number of vertices on the object is too large, color blending has to be used with care since when one object fades in the other has to gradually fade out. <p> This type can be used in machines that do not support texture mapping or in cases where the texture maps in the system are causing excessive page faults to happen thus disturbing the interactivity of the system. 1 This type is also known as billboard in <ref> [37] </ref> 2 It is around 4 times faster to draw than triangles on the RealityEngine 62 5.2.1.2 View-independent Impostors. * LODs: These impostors are the conventional levels-of-detail that are used to represent objects. * AvColorBox: This impostor is a representation for an object which is just a box with average areas <p> We have not tested the navigation of this environment with a toolkit like Performer <ref> [37] </ref>. 7.5 Limitations One phenomenon missing is the illumination of the environment. The illumination of a complex environment can be pre-precomputed using the radiosity method in a view-independent fashion and the shading attributes of objects and clusters would need to be incorporated to their representations.
Reference: [38] <author> Harvey R. Schiffman. </author> <title> Sensation and Perception an Integrated Approach. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: Good continuation, states that points that form a straight or smooth contour when connected to each other seem to belong together. Lines tend to be seen in such a way as to follow the smoothest path as illustrated on Figure 4.8. Schifman <ref> [38] </ref> generalizes the good continuation law by saying that it is a special case of the general configuration principle that states an organizing tendency that encompasses other characteristics such as common fate, closure and symmetry.
Reference: [39] <author> B. Schneider, P. Borrel, J. Menon, J. Mittelman, and J. Rossignac. </author> <title> Brush as a walk-through system for architectural models. </title> <type> Eurographics' 94, </type> <month> June 94. </month>
Reference-contexts: Some of these techniques and tools are presented in this Section. Schneider et al. <ref> [39] </ref> describes an interactive walkthrough system that automatically simplifies objects directly designed as polyhedral models. They used an algorithm that collapses vertices in a 3D grid to obtain several simplified versions of an object. <p> Portions of the database may simply "disappear" rather than being geometrically "blurred". The walkthrough system described by Schneider et al. <ref> [39] </ref> also attempts to keep a user-specified frame rate by sending to the graphics engine a user-specified number of triangles but presents the same problem as in the Funkhouser et al.'s system, where visible objects might not be rendered. 2.2.3 LOD Switching An important issue of LOD management is the selection
Reference: [40] <author> Mark Segal, Carl Korobkin, Rolf van Widenfelt, Jim Foran, and Paul Haeberli. </author> <title> Fast shadows and lighting effects using texture mapping. </title> <journal> Computer Graphics, </journal> <pages> pages 249-252, </pages> <month> July </month> <year> 1992. </year> <month> 144 </month>
Reference-contexts: This is easily achieved by obtaining a projection matrix, transforming the object by this matrix and drawing the object in the shadow color. To compute shadows of arbitrary objects onto arbitrary surfaces a special kind of texture map known as shadow maps <ref> [40] </ref> can be used. The scene is first rendered from the point of view of the light source and the Z-buffer associated with that scene, the shadow map, is grabbed.
Reference: [41] <author> Silicon Graphics, Inc. </author> <title> Graphics Library Programming Guide, Volumes I and II, </title> <year> 1992. </year>
Reference-contexts: Two transition methods have been used: one uses morphing (or geometric interpolation) as in [37, 26, 49] and the other uses hardware dependent color blending as described in <ref> [37, 41, 16, 51] </ref>. Both approaches present problems. While morphing may not be feasible in real-time if the number of vertices on the object is too large, color blending has to be used with care since when one object fades in the other has to gradually fade out. <p> Due to the local nature of this lighting computation (involving the object, the light source and the viewpoint) however, they are usually implemented in graphics libraries <ref> [41] </ref> and are computed in real-time. If we assume that objects in the environment are composed only of diffuse objects, i.e., objects that reflect light with equal brightness in all directions, then a more complex global illumination model can be used. <p> In addition to these measures, for the specific case of SGI machines, a number of other strategies to improve performance when rendering texture maps is recommended in <ref> [41, 42] </ref>. 3.3 Real-Time Features In order to maintain a user-specified frame rate the CPU in which the application is running has to be relatively free of interrupts. Since interrupts are essential, they can only be disabled in multi-processor systems. <p> The first two programs are executed in a pre-processing phase while visual navigation is done in real-time. The platform used was a four processor 1 SGI Onyx workstation with a RealityEngineII graphics board. All programs are implemented in C++ and use GL <ref> [41] </ref> for rendering and implement the framework described in Chapter 5.
Reference: [42] <author> Silicon Graphics, Inc. </author> <title> Graphics Library Programming Tools and Techniques, </title> <year> 1992. </year>
Reference-contexts: Not only state-of-the-art hardware such as the SGI Reali-tyEngine [2] workstations (and graphics systems from other vendors such as Sun [12]) use this pipelined architecture, but also highly parallel architectures such as UNC's PixelFlow [33] use the same pipeline concept. Based on the Graphics Library Programming Tools and Techniques <ref> [42] </ref> document from Silicon Graphics Inc., and similar work by Funkhouser et at. [15], we present a model of a generalized rendering system that this research is based on. <p> In addition to these measures, for the specific case of SGI machines, a number of other strategies to improve performance when rendering texture maps is recommended in <ref> [41, 42] </ref>. 3.3 Real-Time Features In order to maintain a user-specified frame rate the CPU in which the application is running has to be relatively free of interrupts. Since interrupts are essential, they can only be disabled in multi-processor systems.
Reference: [43] <institution> Silicon Graphics, Inc. </institution> <note> IRIS Power C User's Guide, </note> <year> 1993. </year>
Reference-contexts: Using interprocess communication synchronization primitives like semaphores or by inserting directives (pragmas) for the multi-processing compiler and using tools that analyze and parallelize code such as <ref> [43] </ref>, the program can be easily parallelized.
Reference: [44] <institution> Silicon Graphics, Inc. </institution> <note> IRIX System Programming Guide, </note> <year> 1993. </year>
Reference-contexts: Using interprocess communication synchronization primitives like semaphores or by inserting directives (pragmas) for the multi-processing compiler and using tools that analyze and parallelize code such as [43], the program can be easily parallelized. By using utilities such as those available for the IRIX operating system <ref> [44] </ref> (sysmp, systune, runon, etc.) 2 , a real-time program can be locked alone into a relatively interrupt free processor while the work to compute the list of objects to be rendered under the control of this CPU 2 Sysmp (sysadmi) is a system call (command) that provides multiprocessing control and
Reference: [45] <author> Paul S. Strauss. </author> <title> A realistic model for computer animators. </title> <journal> Computer Graphics and Applications, </journal> <pages> pages 56-64, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: This can be achieved in part, in a view-dependent and in a view-independent way. In the case of simulating environments that can contain objects composed of specular materials, i.e., reflect light differently in different directions, a local illumination model <ref> [45] </ref> can be used. These models account neither for the interreflection of light among objects in the scene nor for the shadows cast by objects obstructing light sources.
Reference: [46] <author> Bjarne Stroustrup. </author> <title> C++ Programming Language. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <note> second edition, </note> <year> 1993. </year>
Reference: [47] <author> Bjarne Stroustrup and Margaret A. Ellis. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <year> 1991. </year>
Reference: [48] <author> Andrew S. Tanenbaum. </author> <title> Operating Systems Design and Implementation. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1987. </year>
Reference-contexts: The pseudo-code for the rendering process is given in Figure 7.2 and that of the selection process in Figure 7.3. Synchronization primitives like semaphores or barriers (Irix specific) were used to achieve the synchronism between these two processes in a consumer/producer <ref> [48] </ref> fashion (the selection process produces a rendering list which is then consumed by the rendering process). In these algorithms two semaphores are used: `ds' and `cs', the draw and compute semaphores in a shared memory environment.
Reference: [49] <author> Greg Turk. </author> <title> Re-tiling polygonal surfaces. </title> <journal> Computer Graphics, </journal> <pages> pages 55-64, </pages> <year> 1992. </year>
Reference-contexts: In cases like this, an initial mesh has to be formed from the set of sampled 3D points, and then simplified using mesh simplification techniques [23]. A technique devised by Turk <ref> [49] </ref> is appropriate for generating curved surfaces. <p> Two transition methods have been used: one uses morphing (or geometric interpolation) as in <ref> [37, 26, 49] </ref> and the other uses hardware dependent color blending as described in [37, 41, 16, 51]. Both approaches present problems.
Reference: [50] <author> Allan Watt and Mark Watt. </author> <title> Computer Graphics Animation and Rendering Techniques. </title> <publisher> Addison-Wesley, </publisher> <address> first edition, </address> <year> 1992. </year>
Reference-contexts: This also applies to objects that move relative to the viewpoint since sampling problems <ref> [50, 14] </ref> will cause aliasing in the image depending on the object's position from frame to frame, that is, depending on the sampling method used a small feature of an object can appear in a frame and disappear in the subsequent frame. <p> in the future in terms of the speed of their components, it seems unlikely that the pipelined architecture of the graphics engine of these machines will cease to exist in the near future since it is based on the classic conceptual rendering pipeline that has been used for two decades <ref> [14, 50] </ref>. Not only state-of-the-art hardware such as the SGI Reali-tyEngine [2] workstations (and graphics systems from other vendors such as Sun [12]) use this pipelined architecture, but also highly parallel architectures such as UNC's PixelFlow [33] use the same pipeline concept.
Reference: [51] <author> Johnson K. Yan. </author> <title> Advances in computer-generated imagery for flight simulation. </title> <journal> Computer Graphics and Applications, </journal> <volume> 5 </volume> <pages> 37-51, </pages> <month> August </month> <year> 1985. </year> <title> 145 Paulo William Cardoso Maciel was born on April 27, 1958 in Rio de Janeiro, Brazil. He graduated with a Bachelor of Science in Electrical Engineering, with a double major in Electronics and Power Systems, </title> <institution> and a Master of Science in Informatics from the Catholic University of Rio de Janeiro, Brazil, </institution> <note> in 1981 and 1986, respectively. 146 </note>
Reference-contexts: The forms of user interaction with the system can vary from a simple mouse/keyboard interface to more sophisticated ones such as data gloves [14] and enclosures such as those used in flight simulation <ref> [51] </ref> and in virtual reality applications [10]. Regardless of the way 2 this interaction takes place, the key to good user interaction is real-time response, that is, how fast the system responds to user requests. <p> As the observer moves, many more objects can be visible than the machine hardware can render in real-time. This static selection mechanism is also not good in situations where lots of objects become visible/larger/slower, as happens in an aircraft landing simulation. Commercial flight simulators <ref> [51] </ref> minimize this problem by means of computing a size threshold prior to rendering each frame based on the time needed to render the previous scene in an adaptive fashion. <p> Two transition methods have been used: one uses morphing (or geometric interpolation) as in [37, 26, 49] and the other uses hardware dependent color blending as described in <ref> [37, 41, 16, 51] </ref>. Both approaches present problems. While morphing may not be feasible in real-time if the number of vertices on the object is too large, color blending has to be used with care since when one object fades in the other has to gradually fade out.
References-found: 51

