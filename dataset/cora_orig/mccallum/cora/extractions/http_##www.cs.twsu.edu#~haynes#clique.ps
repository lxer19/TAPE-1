URL: http://www.cs.twsu.edu/~haynes/clique.ps
Refering-URL: http://adept.cs.twsu.edu/~thomas/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: [haynes,dschoen]@euler.mcs.utulsa.edu  
Phone: (918) 631-[3234,3140]  
Title: Clique Detection via Genetic Programming  
Author: Thomas Haynes Dale Schoenefeld 
Keyword: Category: Genetic Programming  
Address: 600 South College Avenue Tulsa, OK 74104-3189  
Affiliation: Department of Mathematical Computer Sciences The University of Tulsa  
Abstract: Genetic programming is applied to the task of finding all of the cliques in a graph. Nodes in the graph are represented as tree structures, which are then manipulated to form candidate cliques. The intrinsic properties of clique detection complicates the design of a good fitness evaluation. We analyze those properties, and show the clique detector is found to be better at finding the maximum clique in the graph, not the set of all cliques. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Mihir Bellare and Madhu Sudan. </author> <title> Improved non-approximability results. </title> <booktitle> In Proceedings of the 26th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 184-193. </pages> <publisher> ACM, </publisher> <year> 1994. </year>

Reference: [3] <author> R. Chandraasekharam, S. Subhramanian, and S. Chaudhury. </author> <title> Genetic algorithm for node partioning problem and applications in VLSI design. </title> <booktitle> IEE Proceedings, Part E: Computers and Digital Techniques, </booktitle> <volume> 140(5) </volume> <pages> 255-260, </pages> <month> Sep </month> <year> 1993. </year>
Reference: [4] <editor> Lawrence Davis, editor. </editor> <booktitle> Handbook of genetic algorithms. </booktitle> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, NY, </address> <year> 1991. </year>
Reference-contexts: Though GAs are not guaranteed to find optimal solutions, they still possess some nice provable properties (optimal allocation of trials to substrings, evaluating exponential number of schemas with linear number of string evaluations, etc.), and have been found to be useful in a number of practical applications <ref> [4] </ref>. Koza's work on Genetic Programming [10] was motivated by the representational constraint, i.e. fixed length encodings, in traditional GAs.
Reference: [5] <author> Anthony Hunter Dixon. </author> <title> On the Efficiency of Clique Detection in Graphs. </title> <type> PhD thesis, </type> <institution> The University of British Columbia (Canada), </institution> <year> 1973. </year>
Reference: [6] <author> Thomas Haynes. </author> <title> Clique detection via genetic programming. </title> <type> Technical Report UTULSA-MCS-95-02, </type> <institution> The University of Tulsa, </institution> <month> April 24, </month> <year> 1995. </year>
Reference-contexts: By generation 500, it is evident that a plateau has been reached, and that the average fitness is only increasing slightly. S-expressions for the candidate maximal cliques corresponding to generations 0, 100, 200, 300, and 400 can be found in <ref> [6] </ref>. The resultant maximal cliques for generations 0, 100, 200, 300, and 400 are shown in Table 2. Notice the steady addition of cliques of cardinality three. Clearly by generation 400, all of the maximal cliques have been found. 5.2 Example Graph II detection.
Reference: [7] <author> Thomas Haynes, Roger Wainwright, Sandip Sen, and Dale Schoenefeld. </author> <title> Strongly typed genetic programming in evolving cooperation strategies. </title> <editor> In Larry Eshelman, editor, </editor> <booktitle> 9 Proceedings of the Sixth International Conference on Genetic Algorithms, pages 271--278, </booktitle> <address> San Francisco, CA, 1995. </address> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference-contexts: four and four connected sets of cardinality three, for different fi. chromosome is: C = ff6g; f2g; f4; 7; 8gg: With ff = 50 and fi = 10 the fitness for this chromosome is 1050. 5 Experimental Results The clique detection problem was implemented in a modified version of GPengine <ref> [7] </ref>, a Strongly Typed Genetic Programming system. Specifically, the problem of ExtCon functions having to have either a parent which is an ExtCon function or be the root, was addressed. In the next subsections, we will present some contrived graphs to illustrate properties of our maximal clique detector.
Reference: [8] <author> John H. Holland. </author> <booktitle> Adpatation in Natural and Artificial Systems. </booktitle> <publisher> University of Michigan Press, </publisher> <address> Ann Arbor, MI, </address> <year> 1975. </year>
Reference-contexts: We refer to a maximal complete subgraph of G as a maximal clique. Figure 2 shows a graph with 6 nodes. The maximal cliques are f1,2,3,4,6g and f3,4,5g. 2 Genetic Programming Holland's work on adaptive systems <ref> [8] </ref> produced a class of biologically inspired algorithms known as genetic algorithms (GAs) that can manipulate and develop solutions to optimization, learning, and other types of problems.
Reference: [9] <editor> Kenneth E. Kinnear, Jr., editor. </editor> <booktitle> Advances in Genetic Programming. </booktitle> <publisher> MIT Press, </publisher> <address> Cam-bridge, MA, </address> <year> 1994. </year>
Reference-contexts: The representation language used in GPs are computer programs represented as Lisp S-expressions. GPs have attracted a large number of researchers because of the wide range of applicability of this paradigm, and the easily interpretable form of the solutions that are produced by these algorithms <ref> [9, 11] </ref>. 3 Encoding of the Problem 3.1 Representation Scheme Each S-expression in a GP pool will represent sets of candidate maximal cliques. The function and terminal sets are F = fExtCon, IntCong and T = f1: : : #nodesg.
Reference: [10] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction Determining whether an undirected graph contains a clique of size k is NP complete. In this paper, Genetic Programming (GP) <ref> [10] </ref> techniques are utilized to find cliques in a graph. A pure Genetic Algorithm (GA) approach was considered, but natural encodings resulted in variable length chromosomes. GPs are ideal for representing variable length chromosomes. <p> Koza's work on Genetic Programming <ref> [10] </ref> was motivated by the representational constraint, i.e. fixed length encodings, in traditional GAs.
Reference: [11] <author> John R. Koza. </author> <title> Genetic Programming II, Automatic Discovery of Reusable Programs. </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: The representation language used in GPs are computer programs represented as Lisp S-expressions. GPs have attracted a large number of researchers because of the wide range of applicability of this paradigm, and the easily interpretable form of the solutions that are produced by these algorithms <ref> [9, 11] </ref>. 3 Encoding of the Problem 3.1 Representation Scheme Each S-expression in a GP pool will represent sets of candidate maximal cliques. The function and terminal sets are F = fExtCon, IntCong and T = f1: : : #nodesg.
Reference: [12] <author> Thomas Lengauer. </author> <title> Combinatorial Algorithms for Integrated Circuit Layout. </title> <publisher> Wiley, </publisher> <year> 1990. </year>
Reference: [13] <author> Ammanamanchi Srinivasa Murthy, Guturu Parthasarthy, and V. U. K. Sastry. </author> <title> Clique finding a genetic approach. </title> <booktitle> In Proceedings of the First IEEE Conference on Evolutionary Computation, </booktitle> <pages> pages 18-21, </pages> <address> Piscataway, NJ, 1995. </address> <publisher> IEEE. </publisher>
Reference: [14] <institution> DIMACS Repository. dimacs.rutgers.edu. ftp://dimacs.rutgers.edu/pub/challenge/graph/doc/ccformat.dvi. </institution>
Reference-contexts: The function and terminal sets are F = fExtCon, IntCong and T = f1: : : #nodesg. ExtCon "separates" two candidate maximal cliques, while IntCon "joins" two candidate cliques to create a larger candidate clique. Graphs are encoded in the DIMACS Challenge file format, which can be found at <ref> [14] </ref>. 3.2 Fitness Measure The fitness evaluation will be composed of two parts: a reward for clique size and a reward for the number of cliques in the tree. <p> In the next subsections, we will present some contrived graphs to illustrate properties of our maximal clique detector. We have performed experiments with sample test cases from the DIMACS repository <ref> [14] </ref>. For the johnson16-2-4.clq graph, with 120 nodes and a largest clique of size 8, we were able to detect cliques of size 7. For the hamming8-2.clq graph, with 64 nodes and a largest clique of size 4, we were able to detect cliques of size 4.
Reference: [15] <author> David Lindsay Springer. </author> <title> Coloring and Clique Partitioning for Data Path Allocation. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <month> Sep </month> <year> 1991. </year>
Reference: [16] <author> N. Sriram. </author> <title> Clique Optimization: An Approach to Parsimonious, Near-Optimal Ultrmet-ric Hierarchies. </title> <type> PhD thesis, </type> <institution> University of Oregon, </institution> <month> Sep </month> <year> 1990. </year> <month> 10 </month>
References-found: 15

