URL: http://www.research.att.com/library/articles/std95.ps
Refering-URL: http://www.research.att.com/library/articles/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Perspective on ISO C  
Author: Bjarne Stroustrup 
Address: Murray Hill, New Jersey 07974  
Affiliation: AT&T Bell Laboratories  
Abstract-found: 0
Intro-found: 1
Reference: [Ellis,1989] <author> Margaret A. Ellis and Bjarne Stroustrup: </author> <title> The Annotated C ++ Reference Manual. </title> <publisher> Addison-Wesley. </publisher> <address> Reading, Massachusetts. </address> <year> 1990. </year>
Reference-contexts: 1 Introduction As C ++ programmers, we already feel the impact of the work of the ANSI/ISO C ++ standards committee. Yet the ink is hardly dry on the first official draft of the standard. Already, we can use language features only hinted at in the ARM <ref> [Ellis,1989] </ref> and ``The C ++ Programming Language (second edition),'' [Strous-trup,1991], compilers are beginning to show improved compatibility, implementations of the new standard library are appearing, and the recent relative stability of the language definition is allowing extra effort to be spent on implementation quality and tools.
Reference: [Kernighan,1988] <author> Brian W. Kernighan and Dennis M. Ritchie: </author> <title> The C Programming Language. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey. </address> <year> 1978. </year> <note> Second edition 1988. </note>
Reference-contexts: C compatibility has been slightly strengthened, and the remaining incompatibilities documented in detail. Basically, if you are a practical programmer rather than a conformance tester, and if you use function prototypes consistently, C appears to be a subset of C ++ . The fact that every example in K&R2 <ref> [Kernighan,1988] </ref> is (also) a C ++ program is no fluke. 2.1 Coherence ISO C ++ is not just a more powerful language than the C ++ presented in ``The C ++ Programming Language (second edition);'' it is also more coherent and a better approximation of my original view of what C
Reference: [Koenig,1989] <author> Andrew Koenig and Bjarne Stroustrup: </author> <note> As Close as Possible to Cbut no Closer The C++ Report. Vol 1 No 7 July 1989. </note>
Reference-contexts: The minute changes and clarifications also consumed a large majority of the committee's efforts. That is, I believe, also the way things ought to be. For good and bad, the principle of C ++ being ``as close to C as possible and no closer <ref> [Koenig,1989] </ref>'' was repeatedly re-affirmed. C compatibility has been slightly strengthened, and the remaining incompatibilities documented in detail. Basically, if you are a practical programmer rather than a conformance tester, and if you use function prototypes consistently, C appears to be a subset of C ++ .
Reference: [Koenig,1995] <author> Andrew Koenig (editor): </author> <note> The Working Papers for the ANSI-X3J16 /ISO-SC22 WG21 C ++ standards committee. </note>
Reference: [Stroustrup,1991] <author> Bjarne Stroustrup: </author> <title> The C ++ Programming Language (2nd Edition) Addison Wesley, </title> <address> ISBN 0-201-53992-6. </address> <month> June </month> <year> 1991. </year>
Reference: [Stroustrup,1994] <author> Bjarne Stroustrup: </author> <title> The Design and Evolution of C ++ Addison Wesley, </title> <address> ISBN 0 201-54330-3. </address> <month> March </month> <year> 1994. </year>
Reference-contexts: A description of the new features and some of the reasoning that led to their adoption can be found in D&E <ref> [Stroustrup,1994] </ref>. So can discussions of older features and of features that were considered but - 2 - didn't make it into C ++ . The new features are the most visible changes to the language. <p> It is one answer to __________________ Borrowed with minor changes (and with permission from the author :-) from D&E <ref> [Stroustrup,1994] </ref>. - 3 - the common question ``how can I read objects from a stream, determine that they are of acceptable types, and then use them?'' For example: void user (istream& ss) - io_obj* p = get_obj (ss); // read object from stream if (Shape* sp = dynamic_cast&lt;Shape*&gt;(p)) - // is
Reference: [Stepanov,1994] <author> Alexander Stepanov and Meng Lee: </author> <title> The Standard Template Library. ISO Programming language C ++ project. Doc No: </title> <address> X3J16/94-0095, WG21/N0482. </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Essentially, the C ++ standard library provides the most common fundamental data structures together with the fundamental algorithms used on them. The standard library is described elsewhere <ref> [Stepanov,1994] </ref> [Vilot,1994] so let me just give a short - but complete example of its use: #include &lt;string&gt; // get the string facilities #include &lt;fstream&gt; // get the I/I facilities #include &lt;vector&gt; // get the vector #include &lt;algorithms&gt; // get the operations on containers int main () - string from, to; <p> The word used for `place' in this context is iterator. The standard library's notion of containers, iterators, and algorithms is based on work by Alex Stepanov and others <ref> [Stepanov,1994] </ref>. 4 The Standards Process Initially, I feared that the standardization effort would lead to confusion and instability.
Reference: [Vilot,1994] <author> Michael J Vilot: </author> <title> An Introduction to the STL Library. The C ++ Report. </title> <month> October </month> <year> 1994. </year>
Reference-contexts: Essentially, the C ++ standard library provides the most common fundamental data structures together with the fundamental algorithms used on them. The standard library is described elsewhere [Stepanov,1994] <ref> [Vilot,1994] </ref> so let me just give a short - but complete example of its use: #include &lt;string&gt; // get the string facilities #include &lt;fstream&gt; // get the I/I facilities #include &lt;vector&gt; // get the vector #include &lt;algorithms&gt; // get the operations on containers int main () - string from, to; //
References-found: 8

