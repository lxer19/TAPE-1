URL: http://www.cs.purdue.edu/research/cse/publications/tr/92/92-032.ps.gz
Refering-URL: http://www.cs.purdue.edu/research/cse/pses/publications/tr/92.html
Root-URL: http://www.cs.purdue.edu
Title: in Problem Solving Environments for Computational Science  
Author: E. Gallopoulos E. Houstis and J.R. Rice 
Address: 1308 West Main Street Urbana, Illinois 61801  Building West Lafayette, IN 47907-1398  
Affiliation: Center for Supercomputing Research and Development University of Illinois at Urbana-Champaign  Department of Computer Sciences Purdue University 1398 Computer Science  
Date: October 1992  
Note: Future Research Directions  
Pubnum: CSRD Report No. 1259  
Abstract: Report of a Workshop on Research Directions in Integrating Numerical Analysis, Symbolic Computing, Computational Geometry, and Artificial Intelligence for Computational Science held in Washington, D.C., on April 11-12, 1991. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. C. Abbott. </author> <title> Problem solving using Mathematica. </title> <booktitle> In Gaffney and Houstis [81], </booktitle> <pages> pages 33-43. </pages> <year> 1992. </year>
Reference-contexts: commonplace, and expert systems help (which this community of users needs particularly badly) was being developed and introduced. 3.3 Component Areas 3.3.1 Symbolic and Algebraic Computing Examples of symbolic and algebraic computing systems (SACs) are MACSYMA [70], [132], REDUCE [97], [98], Maple [37], Scratchpad II [115], DERIVE [181], and Mathematica <ref> [1] </ref>, [197]. Reference 13 [99] provides several interesting observations on the development of SAC systems in relation to other areas of computer science. A recent important report summarizes a wealth of information about current and future applications of SAC technology [100].
Reference: [2] <author> H. Abelson, M. Eisenberg, M. Halfant, J. Katzenelson, E. Sacks, G. J. Sussman, J. Wisdom, and K. </author> <title> Yip. </title> <journal> Intelligence in scientific computing. Comm. Assoc. Comput. Machin., </journal> <volume> 32(5) </volume> <pages> 546-562, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: Expert systems have been developed for differential equations. We note references [18], [118], [131], [149]; Elliptic Expert [62] for the XELLPACK environment [27]; ATHENA for //ELLPACK [105]. Successful use of AI techniques for automatic preparation, execution, and control of numerical experiments has been reported in <ref> [2] </ref>; other useful references include [32], [38], [44], [95], [187], [81], [106], [107]. It must be noted, however, that the feasibility of constructing systems able to handle general PDEs has still to be demonstrated. 3.3.4 Computational Geometry Geometry is a critical component for most applications.
Reference: [3] <author> M. Abramowitz and I. </author> <title> Stegun. Handbook of Mathematical Functions, </title> <booktitle> volume 55 of Applied Mathematics Series. </booktitle> <institution> National Bureau of Standards, </institution> <address> Washington, D.C., </address> <year> 1964. </year>
Reference-contexts: Computational science has a long tradition of handbooks that collect important formulas and results for convenient use. Computers have made tables of function values nearly obsolete, but there still remains an enormous body of knowledge that is hard to access. For example, the Handbook of Mathematical Functions <ref> [3] </ref> and the three volumes Higher Transcendental Functions [66] are monumental works of this type whose content should be reorganized and made easily available to the computational science community. Computational science, like all other sciences, should have online search facilities for the published literature.
Reference: [4] <editor> ACM. </editor> <booktitle> Proc. International Symposium on Symbolic and Algebraic Computing (ISSAC'89), </booktitle> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1989. </year>
Reference: [5] <editor> ACM. </editor> <booktitle> Proc. International Symposium on Symbolic and Algebraic Computing (ISSAC'90), </booktitle> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1990. </year>
Reference: [6] <editor> Comm. </editor> <booktitle> ACM, </booktitle> <volume> 34(12), </volume> <month> Dec. </month> <year> 1991. </year> <note> Special Issue: Collaborative Computing. </note>
Reference-contexts: The proposed National Research and Education Network (NREN) component of the Federal High Performance Computing and Communications Initiative (HPCC) addresses these areas as it is designed to support the bandwidth required for interactive visualization, file and image transfers, multi-media database access, teleconferencing, and collaboration technology [109], <ref> [6] </ref>. Some examples relevant to the previous discussion on SAC and numerical systems are the electronic dissemination of information (source code, bibliographies, news) for REDUCE (organized by A.
Reference: [7] <editor> Comm. </editor> <booktitle> ACM, </booktitle> <volume> 33(9), </volume> <month> Sept. </month> <year> 1990. </year> <title> Special Issue: Object-Oriented Design. </title>
Reference-contexts: As managers of complexity, PSEs, their component subsystems, and their design targets are also expected to be large and complex. The software infrastructure needs to be developed and complemented in case current techniques are inadequate. Object-Oriented Design. Object-oriented techniques will be useful for rendering PSEs comprehensible and manageable [31], <ref> [7] </ref>. P SE components are expected to cooperate in problem solving and would benefit from research in concurrent object-oriented programming [8]. In particular, object-oriented programming techniques are gradually becoming more common in computational science [35], [129], [138], [145], [149], [160]. Software Interconnection Technologies.
Reference: [8] <author> G. Agha. </author> <title> Concurrent object-oriented programming. </title> <booktitle> In Comm. ACM [7], </booktitle> <pages> pages 125-141. </pages> <note> Special Issue: Object-Oriented Design. </note>
Reference-contexts: The software infrastructure needs to be developed and complemented in case current techniques are inadequate. Object-Oriented Design. Object-oriented techniques will be useful for rendering PSEs comprehensible and manageable [31], [7]. P SE components are expected to cooperate in problem solving and would benefit from research in concurrent object-oriented programming <ref> [8] </ref>. In particular, object-oriented programming techniques are gradually becoming more common in computational science [35], [129], [138], [145], [149], [160]. Software Interconnection Technologies. The integration of complex numerical and symbolic systems needs appropriate software interconnection technology and module interconnection languages for the efficient description and control of problem solving.
Reference: [9] <author> T. J. Aird and J. R. Rice. </author> <title> PROTRAN: Problem solving software. </title> <journal> Adv. Engin. Software, </journal> <volume> 5 </volume> <pages> 202-206, </pages> <year> 1983. </year>
Reference: [10] <author> J. L. Alty, C. D. McCartney, and M. Zalloco. </author> <title> A multimedia interface support tool for process control interface design. </title> <type> Technical Report Tech. Report ESPRIT P2397, </type> <institution> University of Loughborough, </institution> <month> November </month> <year> 1991. </year>
Reference-contexts: To use these new technologies we must support research and development in the design construction and evaluation of a multi-media tool set which provides facilities for constructing, executing, and emulating multimedia interfaces. There are already some examples of such tool sets <ref> [10] </ref> especially for process control applications. 3.4.4 Software Infrastructure PSEs must enable the computational scientist to program in the large. As managers of complexity, PSEs, their component subsystems, and their design targets are also expected to be large and complex.
Reference: [11] <author> F. L. Alvarado. </author> <title> The Sparse Matrix Manipulation System. </title> <type> Technical Report ECE-89-1, </type> <institution> Dept. of Elec. and Comp. Eng. , Univ. of Wisc., Madison, WI, </institution> <year> 1989. </year>
Reference-contexts: Public depositories (e.g., NETLIB [57]) provide ready access to good quality numerical and other scientific software. Currently, there is intense research and development activity in algorithms and libraries for direct and iterative sparse computations <ref> [11] </ref>, [14], [15], [52], [53], [54], [60], [82], [144], [172], [171], [175]. Some libraries are developed even further into complete environments, (for example, using graphics and interface languages), bringing them closer to PSE s. <p> That these efforts are of importance to the scientific community is evidenced by the success of matrix laboratory tools such as those described in Section 3.2.1; see also <ref> [11] </ref>, [171]. As argued by B. Parlett in [147], numerical analysis research, is not only directed toward solving state-of-the-art problems but also toward re-evaluation of existing solution methods in light of new developments.
Reference: [12] <author> S. Amarel. </author> <title> Problems of representation in heuristic problem solving. </title> <editor> In Jernigan et al. </editor> <volume> [116], </volume> <pages> pages 11-32. </pages>
Reference-contexts: PSE to be reliable, and indicates the importance of current research in error estimation and control, adaptive algorithms and software for the complex problems to which PSEs will be applied [68], [77], [143]. 3.3.3 Artificial Intelligence Techniques for efficient problem solving constitute an important topic of artificial intelligence (AI) research <ref> [12] </ref>. Expert systems constitute a major aspect of AI with respect to problem solving tasks. From early on, polyalgorithms and automatic algorithm selection procedures were recognized as important to the development of efficient and reliable numerical software [164].
Reference: [13] <author> E. Anderson, Z. Bai, C. Bischof, J. Demmel, J. J. Dongarra, J. Du Croz, A. Greenbaum, S. Hammerling, A. McKenney, S. Ostrouchov, and D. Sorensen. </author> <title> LAPACK Users' Guide. </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1992. </year>
Reference-contexts: For example, novel computer systems have triggered research in algorithmic techniques to exploit vector and parallel computational resources, hierarchical and distributed memories, etc. See [82]. Libraries based on such techniques are already under construction and standardization; see for example <ref> [13] </ref>. It is hoped that PSEs will significantly reduce the present delay in applying and testing novel numerical algorithms in the context of real applications as well as simplifying the design of appropriate test problems.
Reference: [14] <author> S. F. Ashby and M. K. Seager. </author> <title> A proposed standard for interative linear solvers. Version 1.0. </title> <type> Technical Report UCRL-102860, </type> <institution> Lawrence Livermore National Laboratory, Livermore, </institution> <month> Jan. </month> <year> 1990. </year>
Reference-contexts: Public depositories (e.g., NETLIB [57]) provide ready access to good quality numerical and other scientific software. Currently, there is intense research and development activity in algorithms and libraries for direct and iterative sparse computations [11], <ref> [14] </ref>, [15], [52], [53], [54], [60], [82], [144], [172], [171], [175]. Some libraries are developed even further into complete environments, (for example, using graphics and interface languages), bringing them closer to PSE s.
Reference: [15] <author> C. C. Ashcraft, R. G. Grimes, J. G. Lewis, B. W. Peyton, and H. D. Simon. </author> <title> Progress in sparse matrix methods for large linear systems on vector supercomputers. </title> <journal> Int'l. J. Supercomput. Appl., </journal> <volume> 1(4) </volume> <pages> 10-30, </pages> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: Public depositories (e.g., NETLIB [57]) provide ready access to good quality numerical and other scientific software. Currently, there is intense research and development activity in algorithms and libraries for direct and iterative sparse computations [11], [14], <ref> [15] </ref>, [52], [53], [54], [60], [82], [144], [172], [171], [175]. Some libraries are developed even further into complete environments, (for example, using graphics and interface languages), bringing them closer to PSE s.
Reference: [16] <author> N. C. Baker and S. J. Fenves. </author> <title> Towards a grammar of structural design. </title> <editor> In T. O. Barnwell, Jr., editor, </editor> <booktitle> Computing in Civil Engineering, </booktitle> <pages> pages 178-185. </pages> <address> ASCE, New York, </address> <year> 1989. </year> <month> 36 </month>
Reference-contexts: See [25] for a review of one such project (GAMS) and references to others (NAXPERT, NEXUS, SLADOC). In areas such as civil engineering, knowledge based systems are combined with CAD tools to improve the overall design process; see <ref> [16] </ref> and [24]. Expert systems have been developed for differential equations. We note references [18], [118], [131], [149]; Elliptic Expert [62] for the XELLPACK environment [27]; ATHENA for //ELLPACK [105].
Reference: [17] <author> D. Balaban, J. Garbarini, W. Greiman, and M. Durst. </author> <title> Knowledge representation for the automatic generation of numerical simulators for PDEs. </title> <journal> Math. Comput. Simul., </journal> <volume> 31 </volume> <pages> 383-393, </pages> <year> 1989. </year>
Reference-contexts: Some environments are specialized to particular problem domains: for example, in the areas of industrial engineering design [186] and structural mechanics, combining solid modeling, finite element mesh generation, solution, and postprocessing in [73], [148]. P SEs have also been created for pure mathematics (group theory [34]); partial differential equations <ref> [17] </ref>, [139]; general relativity (SHEEP [80]); and numerical analysis and control of precision of arithmetic calculations (ACRITH [125], AQUARELS [67]). EVE [18] is an object-centered knowledge-based PDE solver, constructed around the MODULEF environment.
Reference: [18] <author> P. Baras, J. Blum, J. C. Paumier, P. Witomski, and F. Rechenmann. EVE: </author> <title> An object-centered knowledge based PDE solver. </title> <editor> In Houstis et al. </editor> <volume> [107], </volume> <pages> pages 1-18. </pages>
Reference-contexts: In areas such as civil engineering, knowledge based systems are combined with CAD tools to improve the overall design process; see [16] and [24]. Expert systems have been developed for differential equations. We note references <ref> [18] </ref>, [118], [131], [149]; Elliptic Expert [62] for the XELLPACK environment [27]; ATHENA for //ELLPACK [105]. Successful use of AI techniques for automatic preparation, execution, and control of numerical experiments has been reported in [2]; other useful references include [32], [38], [44], [95], [187], [81], [106], [107]. <p> They are already available commercially and shortly they will become inexpensive enough to be readily available. Some interface system requirements for problem expression, automatic programming, visualization, computational steering, and concurrent computing are discussed in <ref> [18] </ref>, [150]. It is expected that the future P SEs will not only assist the modeling and simulation of a particular application but will be used as job simulators or components of process control systems. <p> P SEs have also been created for pure mathematics (group theory [34]); partial differential equations [17], [139]; general relativity (SHEEP [80]); and numerical analysis and control of precision of arithmetic calculations (ACRITH [125], AQUARELS [67]). EVE <ref> [18] </ref> is an object-centered knowledge-based PDE solver, constructed around the MODULEF environment. A system, built on top of Mathematica and automating several problem solving steps from specification to code generation, is SINAPSE [119].
Reference: [19] <author> T. J. Barnes, D. Harrison, A. R. Newton, and R. L. Spickelmier. </author> <title> Electronic CAD Frameworks. </title> <publisher> Kluwer Academic Pub., </publisher> <address> Boston, </address> <year> 1992. </year>
Reference-contexts: Indeed, as of this writing, PSEs are not common in science and engineering except in limited areas, such as computer-aided design (CAD) systems for structural engineering and electronics; see for example <ref> [19] </ref>. Still, the success of Mathematica [197] and Matlab [138] shows that some other science PSE markets, such as computational science and engineering education, are large enough to justify the requisite investments. For a view of current developments, see recent conference proceedings [106], [107], [81] as well as Section 3. <p> Much progress has been made in the area of PSE s for electronic CAD. See for example <ref> [19] </ref> for a discussion of CAD Frameworks, a term which means ... all of the underlying facilities provided to the CAD tool developer, the CAD system integrator, and the end user (IC or system designer) which are necessary to facilitate their tasks. <p> It is critical for the PSE to be be designed so that it matches the users' various levels of ability. The desirability of this feature for future PSEs has been mentioned in the literature; see [124] and <ref> [19] </ref>. In addition, environments must be able to support adaptation to the user's changing needs and resources. Some important problems and a vision for future environments are described in [124]. The design and development of the appropriate software infrastructure to create such soft laboratories is an important future research direction.
Reference: [20] <author> L. Bass and J. Coutaz. </author> <title> Developing Software for the User Interface. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: This is expanding rapidly, an expansion which is largely due to the increasing expectations and demands from the users, the availability of generic software platforms for the development of user interfaces, and the emergence of new input/output technologies <ref> [20] </ref>. 18 A great many engineers, scientists, and students are familiar with the sophisticated iconic interfaces such as that of the Macintosh and various window systems. These users expect such interfaces to be readily available to engineering and scientific software systems.
Reference: [21] <editor> H. H. Bau, T. Herbert, and M. M. Yovanovich, editors. </editor> <booktitle> Symbolic Computation in Fluid Mechanics and Heat Transfer, The American Society of Mechanical Engineers, </booktitle> <address> New York, </address> <year> 1988. </year>
Reference: [22] <author> A. Bellen. </author> <title> ODE test problems, </title> <booktitle> Oct. 1991. NA Digest 91(42), </booktitle> <address> C. </address> <publisher> Moler ed. </publisher>
Reference-contexts: Indeed, the lack of adequate real data sets and good reporting procedures has been recognized as a serious impediment to research in many subfields of numerical analysis <ref> [22] </ref>, [114]. Although efforts are being made to construct collections of test data, PSEs offer a natural solution to this problem. Reliability of results is another important concern.
Reference: [23] <author> M. Benantar, R. Biswas, J. E. Flaherty, and M. S. Shephard. </author> <title> Parallel computation with adaptive methods for elliptic and hyperbolic systems. </title> <journal> Comput. Meth. Appl. Mech. Engin., </journal> <volume> 82 </volume> <pages> 73-93, </pages> <year> 1990. </year>
Reference-contexts: Still, the effective use of parallel computers for several computations is an active research topic. For example, many numerical computations deal with sparse data structures, incorporate adaptive algorithms, etc. The efficient implementation of such algorithms on parallel architectures is a hard problem <ref> [23] </ref>, [139], [196]. Some of the difficulties are similar to those encountered when dealing with the parallelization of symbolic computations. As massively parallel architectures mature, studies of scalability for mathematical and scientific libraries, software tools, and communication and I/O libraries should also intensify [130].
Reference: [24] <author> A. Bijl. </author> <title> AI in architectural CAD. Kogan Page, </title> <address> London, </address> <year> 1986. </year>
Reference-contexts: See [25] for a review of one such project (GAMS) and references to others (NAXPERT, NEXUS, SLADOC). In areas such as civil engineering, knowledge based systems are combined with CAD tools to improve the overall design process; see [16] and <ref> [24] </ref>. Expert systems have been developed for differential equations. We note references [18], [118], [131], [149]; Elliptic Expert [62] for the XELLPACK environment [27]; ATHENA for //ELLPACK [105].
Reference: [25] <author> R. F. Boisvert. </author> <title> The guide to available mathematical software advisory systems. </title> <journal> Math. Comput. Simul., </journal> <volume> 31 </volume> <pages> 453-463, </pages> <year> 1989. </year>
Reference-contexts: From early on, polyalgorithms and automatic algorithm selection procedures were recognized as important to the development of efficient and reliable numerical software [164]. With the proliferation of solution methods, it becomes clear that the selection process should be largely automated. See <ref> [25] </ref> for a review of one such project (GAMS) and references to others (NAXPERT, NEXUS, SLADOC). In areas such as civil engineering, knowledge based systems are combined with CAD tools to improve the overall design process; see [16] and [24]. Expert systems have been developed for differential equations. <p> Several environments which incorporate some of the characteristics outlined above were already reviewed in Section 3.2; see also <ref> [25] </ref> for some comparisons. Some environments are specialized to particular problem domains: for example, in the areas of industrial engineering design [186] and structural mechanics, combining solid modeling, finite element mesh generation, solution, and postprocessing in [73], [148].
Reference: [26] <author> R. F. Boisvert and D. K. Kahaner. DEQSOL and ELLPACK: </author> <title> Problem solving environments for partial differential equations. </title> <journal> Office of Naval Research Asian Office Scientific Information Bulletin (NAVSO P-3580), </journal> <volume> 16(1) </volume> <pages> 7-19, </pages> <year> 1991. </year>
Reference-contexts: There exists mathematical software to deal with the solution of specific classes of PDEs <ref> [26] </ref>. A number of software packages exist that are used exclusively to simulate specific applications in structural mechanics, weather prediction, and climate simulation. A partial list of major engineering packages for structural analysis and their capabilities can be found in [79].
Reference: [27] <author> J. Bonomo and W. R. Dyksen. XELLPACK: </author> <title> An interactive problem-solving environment for elliptic partial differential equations. </title> <editor> In Houstis et al. </editor> <volume> [106], </volume> <pages> pages 331-341. </pages>
Reference-contexts: It follows a modular programming paradigm which is supported by a domain-specific PDE language and a variety of elliptic PDE solvers. The PDE language interface allows the user to develop high-level programs that can be used to solve nonlinear and time dependent PDEs. XELLPACK <ref> [27] </ref> and Parallel (//) ELLPACK [104] are recent extensions of ELLPACK based on the X windowing environment. XELLPACK provides graphical input for constructing grids, pop-up menus for selecting solution techniques, and color graphics output for analyzing solutions. <p> In areas such as civil engineering, knowledge based systems are combined with CAD tools to improve the overall design process; see [16] and [24]. Expert systems have been developed for differential equations. We note references [18], [118], [131], [149]; Elliptic Expert [62] for the XELLPACK environment <ref> [27] </ref>; ATHENA for //ELLPACK [105]. Successful use of AI techniques for automatic preparation, execution, and control of numerical experiments has been reported in [2]; other useful references include [32], [38], [44], [95], [187], [81], [106], [107].
Reference: [28] <author> T. I. Boubez, A. M. Froncioni, and R. L. Peskin. </author> <title> A prototyping environment for differential equations. </title> <journal> ACM Trans. Math. Softw., </journal> <volume> 18(1) </volume> <pages> 1-10, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: An important recent advance includes the use of visualization tools to depict sparse matrices in the context of matrix laboratories or other numerical libraries [87], [146], [188]. Often, there is a need to observe and steer the computation during run-time; see for example <ref> [28] </ref> and [94] and articles in [183]. Furthermore, the introduction of parallel computing and its realization on varied parallel architectures has necessitated the collection of run-time data that show the performance and flow of parallel computations; see for example [183].
Reference: [29] <author> J. C. </author> <title> Boudreaux. Problem solving and the evolution of programming languages. </title> <editor> In Jernigan et al. </editor> <volume> [116], </volume> <pages> pages 103-126. </pages>
Reference-contexts: There exist several projects for interconnecting SACs with numerical software libraries (e.g., IRENA and INTERCALL to link REDUCE and Mathematica with the NAG library [33], [50], [51]). Language and Compiler Technology. The important role of language in the problem solving process is widely recognized <ref> [29] </ref>, [179]. Some of the systems described earlier already provide their own language. New languages are also being proposed, some specifically directed toward scientific computation while object-oriented languages such as C++ gain currency in the scientific computation area [59], [101], [128], [133], [134], [63], [169], [198].
Reference: [30] <author> K.W. Brodlie, M. Berzins, P.M. Dew, A. Poon, and H. Wright. </author> <title> Visualization and its use in scientific computations. </title> <booktitle> In Gaffney and Houstis [81], </booktitle> <pages> pages 293-304. </pages>
Reference-contexts: The case for a visualization initiative was made in [39] so that advances in numerical simulation software/hardware environments can be matched by an improved ability to assimilate the results. For a review of recent activities in the area see <ref> [30] </ref> and [111]. E. J. Farrell's preface to the latter collection summarizes the importance of visualization in scientific computing. It is noted that graphics, images and presentation of information in image form are essential in the development of science and engineering.
Reference: [31] <author> F. P. Brooks, Jr. </author> <title> No silver bullet: </title> <journal> Essence and accidents of software engineering. IEEE Comput., </journal> <volume> 20 </volume> <pages> 10-19, </pages> <month> Apr. </month> <year> 1987. </year>
Reference-contexts: Their design, maintenance, and evolution will require the application of software engineering techniques such as modularization, decomposability, and information hiding, captured, for example in the context of object-oriented programming, hierarchical representation, and software reuse <ref> [31] </ref>, [180]. In the next sections we discuss a few examples of PSEs and their infrastructure components. 3.2 Three Scientific Problem Solving Environments One thesis of this report is that problem solving environments can and will revolutionize many scientific computing activities. <p> As managers of complexity, PSEs, their component subsystems, and their design targets are also expected to be large and complex. The software infrastructure needs to be developed and complemented in case current techniques are inadequate. Object-Oriented Design. Object-oriented techniques will be useful for rendering PSEs comprehensible and manageable <ref> [31] </ref>, [7]. P SE components are expected to cooperate in problem solving and would benefit from research in concurrent object-oriented programming [8]. In particular, object-oriented programming techniques are gradually becoming more common in computational science [35], [129], [138], [145], [149], [160]. Software Interconnection Technologies.
Reference: [32] <author> K. Broughan. </author> <title> SENAC: Lisp as a platform for constructing a problem solving environment. </title> <booktitle> In Gaffney and Houstis [81], </booktitle> <pages> pages 351-360. </pages>
Reference-contexts: We note references [18], [118], [131], [149]; Elliptic Expert [62] for the XELLPACK environment [27]; ATHENA for //ELLPACK [105]. Successful use of AI techniques for automatic preparation, execution, and control of numerical experiments has been reported in [2]; other useful references include <ref> [32] </ref>, [38], [44], [95], [187], [81], [106], [107]. It must be noted, however, that the feasibility of constructing systems able to handle general PDEs has still to be demonstrated. 3.3.4 Computational Geometry Geometry is a critical component for most applications.
Reference: [33] <author> K. A. Broughan, G. Keady, T. D. Robb, M. G. Richardson, and M. C. Dewar. </author> <title> Some symbolic computing links to the NAG numeric library. </title> <journal> SIGSAM Bulletin, </journal> <volume> 25(3) </volume> <pages> 28-37, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Tremendous power is added as it becomes possible to link the systems with numerical libraries written in Fortran or C. There exist several projects for interconnecting SACs with numerical software libraries (e.g., IRENA and INTERCALL to link REDUCE and Mathematica with the NAG library <ref> [33] </ref>, [50], [51]). Language and Compiler Technology. The important role of language in the problem solving process is widely recognized [29], [179]. Some of the systems described earlier already provide their own language.
Reference: [34] <author> G. Butler and J. Cannon. </author> <title> The design of Cayley a language for modern algebra. </title> <booktitle> In Miola [135], </booktitle> <pages> pages 10-19. 37 </pages>
Reference-contexts: Some environments are specialized to particular problem domains: for example, in the areas of industrial engineering design [186] and structural mechanics, combining solid modeling, finite element mesh generation, solution, and postprocessing in [73], [148]. P SEs have also been created for pure mathematics (group theory <ref> [34] </ref>); partial differential equations [17], [139]; general relativity (SHEEP [80]); and numerical analysis and control of precision of arithmetic calculations (ACRITH [125], AQUARELS [67]). EVE [18] is an object-centered knowledge-based PDE solver, constructed around the MODULEF environment.
Reference: [35] <author> G. Carey, J. Schmidt, V. Singh, and D. Yelton. </author> <title> A scalable, object-oriented finite element solver for partial differential equations on multicomputers. </title> <booktitle> In Proc. 6th ACM International Conference on Supercomputing, </booktitle> <pages> pages 387-396, </pages> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: Object-Oriented Design. Object-oriented techniques will be useful for rendering PSEs comprehensible and manageable [31], [7]. P SE components are expected to cooperate in problem solving and would benefit from research in concurrent object-oriented programming [8]. In particular, object-oriented programming techniques are gradually becoming more common in computational science <ref> [35] </ref>, [129], [138], [145], [149], [160]. Software Interconnection Technologies. The integration of complex numerical and symbolic systems needs appropriate software interconnection technology and module interconnection languages for the efficient description and control of problem solving.
Reference: [36] <author> B. W. Char. </author> <title> Progress report on a system for general-purpose symbolic algebraic computation. </title> <booktitle> In Proc. </booktitle> <volume> ISSAC'90 [5], </volume> <pages> pages 96-103. </pages>
Reference-contexts: There have also been efforts to provide implementations of Lisp-based systems such as REDUCE in C by building a translator from REDUCE source to C [74]. See also <ref> [36] </ref> and [195] for additional work on the multiprocessing of SACs. As most scientific/numeric processing is done with Fortran, much time in symbolic systems is spent in special functions (e.g. GENTRAN) to generate Fortran code.
Reference: [37] <author> B. W. Char, K. O Geddes, G. H. Gonnet, M. B. Monagan, and S. M. Watt. </author> <title> MAPLE Reference Manual. </title> <address> Waterloo, </address> <year> 1988. </year>
Reference-contexts: complete PSEs, the use of elaborate graphics was commonplace, and expert systems help (which this community of users needs particularly badly) was being developed and introduced. 3.3 Component Areas 3.3.1 Symbolic and Algebraic Computing Examples of symbolic and algebraic computing systems (SACs) are MACSYMA [70], [132], REDUCE [97], [98], Maple <ref> [37] </ref>, Scratchpad II [115], DERIVE [181], and Mathematica [1], [197]. Reference 13 [99] provides several interesting observations on the development of SAC systems in relation to other areas of computer science. A recent important report summarizes a wealth of information about current and future applications of SAC technology [100].
Reference: [38] <author> M. Clarkson. </author> <title> Expert systems as an intelligent user interface for symbolic algebra. </title> <booktitle> In Gaffney and Houstis [81], </booktitle> <pages> pages 205-213. </pages>
Reference-contexts: We note references [18], [118], [131], [149]; Elliptic Expert [62] for the XELLPACK environment [27]; ATHENA for //ELLPACK [105]. Successful use of AI techniques for automatic preparation, execution, and control of numerical experiments has been reported in [2]; other useful references include [32], <ref> [38] </ref>, [44], [95], [187], [81], [106], [107]. It must be noted, however, that the feasibility of constructing systems able to handle general PDEs has still to be demonstrated. 3.3.4 Computational Geometry Geometry is a critical component for most applications.
Reference: [39] <institution> Comput. Graph., </institution> <month> 21(6), Nov. </month> <year> 1987. </year> <note> Special issue on Visualization in Scientific Computing, </note> <editor> edited by B. H. McCormick, T. A. DeFanti and M. D. </editor> <publisher> Brown. </publisher>
Reference-contexts: It is argued that future architectural PSEs could free CAD from its current restrictions [141] and enable users to explore completely innovative designs [136], [137]. 3.3.5 Visualization and Graphics Visualization is an integral part of PSEs. The case for a visualization initiative was made in <ref> [39] </ref> so that advances in numerical simulation software/hardware environments can be matched by an improved ability to assimilate the results. For a review of recent activities in the area see [30] and [111]. E. J. Farrell's preface to the latter collection summarizes the importance of visualization in scientific computing.
Reference: [40] <author> G. O. Cook, Jr. </author> <title> ALPAL: A program to generate physics simulation codes from natural descriptions. </title> <journal> Int'l. J. Modern Phys., </journal> <volume> 1(1) </volume> <pages> 1-51, </pages> <year> 1990. </year>
Reference-contexts: It includes a very high level specification language, an interactive/visual user interface for PDE problem specification, automatic generation of sequential or vector code, debugging, diagnosis, and visualization of numerical simulation of PDE problems; see also [123], [173], [189]. ALPAL is a P SE for several PDE-based computations <ref> [40] </ref>. Given the very high level specification of the equations to be solved and the numerical methods to be used, ALPAL generates sequential or vector code to solve nonlinear integro-differential equations, ALPAL is designed to handle the sort of complicated mathematical models used in very large scientific simulation codes.
Reference: [41] <author> G. O. Cook, Jr. and J. F. Painter. </author> <title> ALPAL: A tool to generate simulation codes from natural descriptions. </title> <editor> In Houstis et al. </editor> <volume> [107], </volume> <pages> pages 401-419. </pages>
Reference-contexts: An important use of SACs is in the generation and manipulation of Jacobian matrices during the solution of nonlinear systems of equations. Hence SACs as well as recent automatic differentiation techniques can replace error-prone hand manipulation or finite difference oriented schemes contaminated by roundoff 2 ; see <ref> [41] </ref>, [139], [191] plus articles and references in [91]. By providing the framework for specifying the mathematical problem in a manner close to the standard scientific notation, SACs approach satisfying an important PSE function, that is, providing communication in the user's own terms. <p> The data structures and computations used by SAC systems are very demanding of the computer system, so that the potential of parallel computation should be exploited. In the same 2. In the words of Painter and Cook in <ref> [41] </ref>, Before ALPAL, 100% accurate Jacobians were unheard of at LLNL. 3.
Reference: [42] <author> G. O. Cook, Jr., J. F. Painter, and S. A. Brown. </author> <title> How symbolic computation boosts productivity in the simulation of partial differential equations. </title> <type> Technical Report UCRL-JC-106442, </type> <institution> Lawrence Livermore National Laboratory, Livermore, </institution> <month> Feb. </month> <year> 1991. </year>
Reference-contexts: The integration of complex numerical and symbolic systems needs appropriate software interconnection technology and module interconnection languages for the efficient description and control of problem solving. When code modules are written to solve PDEs, interfaces must be written to link with general purpose numerical software and application codes <ref> [42] </ref>. A software bus could provide the appropriate connecting infrastructure [157], [156],[158].
Reference: [43] <author> W. R. Cowell, </author> <title> editor. Sources and Development of Mathematical Software. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1984. </year>
Reference-contexts: that need to be solved for the realization of PSEs. 3.3.2 Numerical Analysis The primary contributions of numerical analysis consist in the development of efficient and robust algorithms and their realization into numerical libraries whose fundamental role has been advocated since the early days of scientific computing; see articles in <ref> [43] </ref> and [56], [152], [162], [165], [166]. As problems increase in complexity, the presence of reliable, efficient and easily assembled software parts becomes essential [168]. High-quality numerical libraries allow the user to concentrate on the higher level issues instead of rewriting software [103], [112], [142].
Reference: [44] <author> C.W. Cryer. </author> <title> The ESPRIT project FOCUS. </title> <booktitle> In Gaffney and Houstis [81], </booktitle> <pages> pages 371-380. </pages>
Reference-contexts: We note references [18], [118], [131], [149]; Elliptic Expert [62] for the XELLPACK environment [27]; ATHENA for //ELLPACK [105]. Successful use of AI techniques for automatic preparation, execution, and control of numerical experiments has been reported in [2]; other useful references include [32], [38], <ref> [44] </ref>, [95], [187], [81], [106], [107]. It must be noted, however, that the feasibility of constructing systems able to handle general PDEs has still to be demonstrated. 3.3.4 Computational Geometry Geometry is a critical component for most applications.
Reference: [45] <author> G.J. Culler and B.D. Fried. </author> <title> An on-line computing center for scientific problems. </title> <booktitle> In Proc. 1963 Pacific Computer Conf., </booktitle> <pages> pages 221-242. </pages> <publisher> IEEE, </publisher> <year> 1963. </year>
Reference-contexts: The proceedings of the 1967 ACM conference, Interactive Systems for Experimental Applied Mathematics [121], provides an overview of early work. The title of Culler and Fried's paper, An On-Line Computing Center for Scientific Problems <ref> [45] </ref> indicates the high ambition for PSEs at a time when Fortran and Algol were still novelties. These early efforts at PSEs failed primarily because of the lack of computing power. It was not until the late 1970's that interactive P SEs reappeared in another context, software for personal computers.
Reference: [46] <editor> J. H. Davenport, editor. EUROCAL'87: </editor> <booktitle> European Conference on Computer Algebra, Leipzig, </booktitle> <address> GDR, </address> <month> June </month> <year> 1987, </year> <booktitle> number 378 in Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1989. </year>
Reference: [47] <editor> J. H. Davenport. </editor> <booktitle> Current problems in computer algebra systems design. In Miola [135], </booktitle> <pages> pages 1-9. </pages>
Reference-contexts: This is a very worrying result, given the current use of SACs to produce extremely long mathematical expressions, translate them into Fortran, and use them with floating-point arguments. 14 time, current research tries to address the issues of computational efficiency, expressiveness, and friendliness of SACs <ref> [47] </ref>, [69].
Reference: [48] <author> J. Della Dora and J. Fitch, </author> <title> editors. Computer Algebra and Parallelism. </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1989. </year>
Reference-contexts: Parallel and distributed computation will affect research in most areas, and with true multiprocessing and large memories, it also becomes possible to attempt the parallelization of symbolic computations <ref> [48] </ref>. Still, the effective use of parallel computers for several computations is an active research topic. For example, many numerical computations deal with sparse data structures, incorporate adaptive algorithms, etc. The efficient implementation of such algorithms on parallel architectures is a hard problem [23], [139], [196].
Reference: [49] <author> P. J. Denning. </author> <title> Massive parallelism in the future of science. </title> <journal> American Scientist, </journal> <volume> 77(1) </volume> <pages> 16-18, </pages> <address> Jan./Feb. </address> <year> 1989. </year>
Reference-contexts: It is counterproductive to build a house by having the builder bring truckloads of materials, letting the future occupants decide if they are appropriate; see <ref> [49] </ref>, [90]. 21 3.6 Professional Infrastructure The educational infrastructure for scientific problem solving environments is not strong. We use the term Computational Engineering and Science (CES) to denote this discipline and area of work.
Reference: [50] <author> M. C. Dewar. </author> <title> IRENA an integrated symbolic and numerical computation environment. </title> <booktitle> In Proc. </booktitle> <volume> ISSAC'89 [4], </volume> <pages> pages 171-179. </pages>
Reference-contexts: Tremendous power is added as it becomes possible to link the systems with numerical libraries written in Fortran or C. There exist several projects for interconnecting SACs with numerical software libraries (e.g., IRENA and INTERCALL to link REDUCE and Mathematica with the NAG library [33], <ref> [50] </ref>, [51]). Language and Compiler Technology. The important role of language in the problem solving process is widely recognized [29], [179]. Some of the systems described earlier already provide their own language.
Reference: [51] <author> M. C. Dewar and M. G. Richardson. </author> <title> Reconciling symbolic and numeric computation in a practical setting. </title> <booktitle> In Miola [135], </booktitle> <pages> pages 195-204. </pages>
Reference-contexts: Tremendous power is added as it becomes possible to link the systems with numerical libraries written in Fortran or C. There exist several projects for interconnecting SACs with numerical software libraries (e.g., IRENA and INTERCALL to link REDUCE and Mathematica with the NAG library [33], [50], <ref> [51] </ref>). Language and Compiler Technology. The important role of language in the problem solving process is widely recognized [29], [179]. Some of the systems described earlier already provide their own language.
Reference: [52] <author> D. S. Dodson, R. G. Grimes, and J. G. Lewis. </author> <title> Sparse extensions to the Fortran basic linear algebra subprograms. </title> <journal> ACM Trans. Math. Softw., </journal> <volume> 17(2) </volume> <pages> 253-263, </pages> <year> 1991. </year> <month> 38 </month>
Reference-contexts: Public depositories (e.g., NETLIB [57]) provide ready access to good quality numerical and other scientific software. Currently, there is intense research and development activity in algorithms and libraries for direct and iterative sparse computations [11], [14], [15], <ref> [52] </ref>, [53], [54], [60], [82], [144], [172], [171], [175]. Some libraries are developed even further into complete environments, (for example, using graphics and interface languages), bringing them closer to PSE s.
Reference: [53] <author> D. S. Dodson and J. G. Lewis. </author> <title> Issues related to extension of the basic linear algebra subprograms. </title> <journal> ACM SIGNUM Newsletter, </journal> <volume> 20(1) </volume> <pages> 19-22, </pages> <year> 1985. </year>
Reference-contexts: Public depositories (e.g., NETLIB [57]) provide ready access to good quality numerical and other scientific software. Currently, there is intense research and development activity in algorithms and libraries for direct and iterative sparse computations [11], [14], [15], [52], <ref> [53] </ref>, [54], [60], [82], [144], [172], [171], [175]. Some libraries are developed even further into complete environments, (for example, using graphics and interface languages), bringing them closer to PSE s.
Reference: [54] <author> D. S. Dodson and J. G. Lewis. </author> <title> Proposed sparse extensions to the basic linear algebra subprograms. </title> <journal> ACM SIGNUM Newsletter, </journal> <volume> 20(1) </volume> <pages> 22-25, </pages> <year> 1985. </year>
Reference-contexts: Public depositories (e.g., NETLIB [57]) provide ready access to good quality numerical and other scientific software. Currently, there is intense research and development activity in algorithms and libraries for direct and iterative sparse computations [11], [14], [15], [52], [53], <ref> [54] </ref>, [60], [82], [144], [172], [171], [175]. Some libraries are developed even further into complete environments, (for example, using graphics and interface languages), bringing them closer to PSE s.
Reference: [55] <author> Y. Doleh and P. S. Wang. SUI: </author> <title> A system independent user interface for an integrated scientific computing environment. </title> <booktitle> In Proc. </booktitle> <volume> ISSAC'90 [5], </volume> <pages> pages 88-95. </pages>
Reference-contexts: Some design goals for the bus are to allow programs to be described and manipulated in terms of minimum specifications and to provide a language for describing module interfaces in 19 a manner that is independent of the application's implementation language; see <ref> [55] </ref>, [155], [157], [158]. Recent systems have begun to address the interconnection problem. As noted in Section 3.2.1 matrix laboratories are built on top of sophisticated mathematical software libraries. Tremendous power is added as it becomes possible to link the systems with numerical libraries written in Fortran or C.
Reference: [56] <author> J. J. Dongarra, J. R. Bunch, C. B. Moler, and G. W. Stewart. </author> <title> LINPACK User's Guide. </title> <publisher> SIAM Pub., </publisher> <address> Philadelphia, PA, </address> <year> 1978. </year>
Reference-contexts: to be solved for the realization of PSEs. 3.3.2 Numerical Analysis The primary contributions of numerical analysis consist in the development of efficient and robust algorithms and their realization into numerical libraries whose fundamental role has been advocated since the early days of scientific computing; see articles in [43] and <ref> [56] </ref>, [152], [162], [165], [166]. As problems increase in complexity, the presence of reliable, efficient and easily assembled software parts becomes essential [168]. High-quality numerical libraries allow the user to concentrate on the higher level issues instead of rewriting software [103], [112], [142].
Reference: [57] <author> J. J. Dongarra and E. Grosse. </author> <title> Distribution of mathematical software via electronic mail. </title> <journal> Comm. ACM, </journal> <volume> 30 </volume> <pages> 403-407, </pages> <year> 1987. </year>
Reference-contexts: As problems increase in complexity, the presence of reliable, efficient and easily assembled software parts becomes essential [168]. High-quality numerical libraries allow the user to concentrate on the higher level issues instead of rewriting software [103], [112], [142]. Public depositories (e.g., NETLIB <ref> [57] </ref>) provide ready access to good quality numerical and other scientific software. Currently, there is intense research and development activity in algorithms and libraries for direct and iterative sparse computations [11], [14], [15], [52], [53], [54], [60], [82], [144], [172], [171], [175].
Reference: [58] <author> J. J. Dongarra and T. Rowan. </author> <note> Test version of Xnetlib available, Dec. 1991. NA Digest 91(49), C. Moler ed. </note>
Reference-contexts: Some examples relevant to the previous discussion on SAC and numerical systems are the electronic dissemination of information (source code, bibliographies, news) for REDUCE (organized by A. Hearn at RAND), the use of X window technology and Unix tools for ready access to NETLIB <ref> [58] </ref>, and the proliferation of resources accessible via anonymous file transfer over Internet. 3.4.3 User Interface An area of great importance for the creation of successful and usable PSEs is the field of user interfaces.
Reference: [59] <author> Y. Dubois-Pelerin, T. Zimmermann, and P. Bomme. </author> <title> Object-oriented finite element programming: II. A prototype program in Smalltalk. </title> <journal> Comput. Meth. Appl. Mech. Engrg., </journal> <volume> 98(3) </volume> <pages> 361-397, </pages> <year> 1992. </year>
Reference-contexts: Some of the systems described earlier already provide their own language. New languages are also being proposed, some specifically directed toward scientific computation while object-oriented languages such as C++ gain currency in the scientific computation area <ref> [59] </ref>, [101], [128], [133], [134], [63], [169], [198]. The development of compilers and other tools for these languages and their implementation on target architectures is another important activity; see [120] and articles in [85]. One criticism of symbolic systems is that they are slow. The reasons for this are manifold.
Reference: [60] <author> I. S. Duff, A. M. Erisman, and J. K. Reid. </author> <title> Direct Methods for Sparse Matrices. </title> <publisher> Clarendon Press, Oxford, </publisher> <year> 1989. </year>
Reference-contexts: Public depositories (e.g., NETLIB [57]) provide ready access to good quality numerical and other scientific software. Currently, there is intense research and development activity in algorithms and libraries for direct and iterative sparse computations [11], [14], [15], [52], [53], [54], <ref> [60] </ref>, [82], [144], [172], [171], [175]. Some libraries are developed even further into complete environments, (for example, using graphics and interface languages), bringing them closer to PSE s.
Reference: [61] <author> D. Duval and F. Jung. </author> <title> Examples of problem solving using computer algebra. </title> <booktitle> In Gaffney and Houstis [81], </booktitle> <pages> pages 133-141. </pages>
Reference-contexts: They can perform analytical manipulations before the application of numerical techniques; these manipulations are useful but also tedious and error prone if done manually. This preprocessing leads to better understanding of the mathematical problem and important simplifications ([84], [174]) and selection of proper solution procedures <ref> [61] </ref>. SAC systems provide the framework for describing equations and translating them into a suitable format for manipulation in subsequent phases.
Reference: [62] <author> W. R. Dyksen and C. R. Gritter. </author> <title> Scientific computing and the algorithm selection problem. </title> <editor> In Houstis et al. </editor> <volume> [107], </volume> <pages> pages 19-32. </pages>
Reference-contexts: In areas such as civil engineering, knowledge based systems are combined with CAD tools to improve the overall design process; see [16] and [24]. Expert systems have been developed for differential equations. We note references [18], [118], [131], [149]; Elliptic Expert <ref> [62] </ref> for the XELLPACK environment [27]; ATHENA for //ELLPACK [105]. Successful use of AI techniques for automatic preparation, execution, and control of numerical experiments has been reported in [2]; other useful references include [32], [38], [44], [95], [187], [81], [106], [107].
Reference: [63] <author> R. Eigenmann, J. Hoeflinger, G. Jaxon, and D. Padua. </author> <title> Cedar Fortran and Its Compiler. </title> <booktitle> In Proc. of the Joint Conf. on Vector and Parallel Processing, Z urich, Switzerland, volume 457 of Lecture Notes in Computer Science, </booktitle> <pages> pages 288-300. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference-contexts: Some of the systems described earlier already provide their own language. New languages are also being proposed, some specifically directed toward scientific computation while object-oriented languages such as C++ gain currency in the scientific computation area [59], [101], [128], [133], [134], <ref> [63] </ref>, [169], [198]. The development of compilers and other tools for these languages and their implementation on target architectures is another important activity; see [120] and articles in [85]. One criticism of symbolic systems is that they are slow. The reasons for this are manifold.
Reference: [64] <author> B. Engquist and T. Smedsaas. </author> <title> Automatic computer code generation for hyperbolic and parabolic differential equations. </title> <journal> SIAM J. Sci. Stat. Comput., </journal> <volume> 1 </volume> <pages> 249-259, </pages> <year> 1980. </year>
Reference-contexts: SAC systems provide the framework for describing equations and translating them into a suitable format for manipulation in subsequent phases. Systems have been built for automatically writing code to solve elliptic differential equations in general coordinates based on finite-difference/finite-volume approximation; for time dependent problems <ref> [64] </ref>, and for generating finite element code [76], [184], [193]. Another use of symbolic algebra tools for P SEs is in stability investigations of finite-difference approximations to differential equations [65], [83], [185].
Reference: [65] <author> B. Engquist and T. Smedsaas. </author> <title> Automatic analysis in PDE software. </title> <editor> In B. Engquist and T. Smedsaas, editors, </editor> <title> PDE Software: Modules, </title> <booktitle> Interfaces and Systems, </booktitle> <pages> pages 399-409. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1984. </year>
Reference-contexts: Another use of symbolic algebra tools for P SEs is in stability investigations of finite-difference approximations to differential equations <ref> [65] </ref>, [83], [185]. An important use of SACs is in the generation and manipulation of Jacobian matrices during the solution of nonlinear systems of equations.
Reference: [66] <author> A. Erdelyi, W. Magnus, F. Oberhettinger, and F. </author> <title> Tricomi. Higher Transcendental Functions, volumes 1-3. </title> <publisher> McGraw Hill, </publisher> <address> New York, </address> <pages> 1953-55. </pages>
Reference-contexts: Computers have made tables of function values nearly obsolete, but there still remains an enormous body of knowledge that is hard to access. For example, the Handbook of Mathematical Functions [3] and the three volumes Higher Transcendental Functions <ref> [66] </ref> are monumental works of this type whose content should be reorganized and made easily available to the computational science community. Computational science, like all other sciences, should have online search facilities for the published literature. These encyclopedia should have algorithms more general than mathematical formulas.
Reference: [67] <author> J. Erhel and B. Philippe. Aquarels: </author> <title> A problem-solving environment for numerical quality. </title> <editor> In R. Vichnevetsky and J.J.H. Miller, editors, </editor> <booktitle> Proc. IMACS Conf., </booktitle> <pages> pages 45-46, </pages> <address> Dublin, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: P SEs have also been created for pure mathematics (group theory [34]); partial differential equations [17], [139]; general relativity (SHEEP [80]); and numerical analysis and control of precision of arithmetic calculations (ACRITH [125], AQUARELS <ref> [67] </ref>). EVE [18] is an object-centered knowledge-based PDE solver, constructed around the MODULEF environment. A system, built on top of Mathematica and automating several problem solving steps from specification to code generation, is SINAPSE [119].
Reference: [68] <author> R. E. Ewing. </author> <title> A posteriori error estimation. </title> <journal> Comput. Meth. Appl. Mech. Engin., </journal> <volume> 82 </volume> <pages> 59-72, </pages> <year> 1990. </year>
Reference-contexts: the environment; this assumes a high degree of confidence for these routines, demonstrates the necessity for numerical algorithms in a PSE to be reliable, and indicates the importance of current research in error estimation and control, adaptive algorithms and software for the complex problems to which PSEs will be applied <ref> [68] </ref>, [77], [143]. 3.3.3 Artificial Intelligence Techniques for efficient problem solving constitute an important topic of artificial intelligence (AI) research [12]. Expert systems constitute a major aspect of AI with respect to problem solving tasks.
Reference: [69] <author> R. J. Fateman. </author> <booktitle> Advances and trends in the design and construction of algebraic manipulation systems. In Proc. </booktitle> <volume> ISSAC'90 [5], </volume> <pages> pages 60-67. 39 </pages>
Reference-contexts: As SACs accumulate mathematical knowledge, they can also replace mathematical handbooks, and even more ambitiously, to become the mathematician's assistant. Significant research questions remain in the development of good SAC systems; see <ref> [69] </ref>. Several issues must be addressed before SACs can fulfill their role as components of PSEs, namely increased speed of operation by exploiting multiprocessing technology; reliability; and design of the user interface. <p> This is a very worrying result, given the current use of SACs to produce extremely long mathematical expressions, translate them into Fortran, and use them with floating-point arguments. 14 time, current research tries to address the issues of computational efficiency, expressiveness, and friendliness of SACs [47], <ref> [69] </ref>.
Reference: [70] <author> R. J. Fateman. </author> <title> A review of Macsyma. </title> <journal> IEEE Trans. Knowledge and Data Eng., </journal> <volume> 1(1) </volume> <pages> 133-145, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: 1991 these systems were evolving into complete PSEs, the use of elaborate graphics was commonplace, and expert systems help (which this community of users needs particularly badly) was being developed and introduced. 3.3 Component Areas 3.3.1 Symbolic and Algebraic Computing Examples of symbolic and algebraic computing systems (SACs) are MACSYMA <ref> [70] </ref>, [132], REDUCE [97], [98], Maple [37], Scratchpad II [115], DERIVE [181], and Mathematica [1], [197]. Reference 13 [99] provides several interesting observations on the development of SAC systems in relation to other areas of computer science. <p> Overall, we note that by their very nature, SACs come very close to the PSE idea; see for example <ref> [70] </ref>, [182, Section 8.2.5].
Reference: [71] <author> R. J. Fateman and W. Kahan. </author> <title> Improving exact integrals from symbolic algebra systems. Unpublished note, </title> <month> Aug. </month> <year> 1987. </year>
Reference-contexts: Several issues must be addressed before SACs can fulfill their role as components of PSEs, namely increased speed of operation by exploiting multiprocessing technology; reliability; and design of the user interface. Regarding reliability, we note the potential dangers, convincingly demonstrated in <ref> [71] </ref>, with an example in which variables in SAC-generated formulas were substituted with floating-point numbers, producing numerical values less accurate than if one were to use approximate methods from the start. 3 Furthermore there is a need for SAC software libraries.
Reference: [72] <author> S. J. Fenves, M. L. Maher, and D. Sriram. </author> <title> Expert systems: C.E. potential. </title> <journal> Civil Engineering, </journal> <volume> 54 </volume> <pages> 44-48, </pages> <month> Oct. </month> <year> 1984. </year>
Reference-contexts: Success on this level will require melding different research communities. Architects and civil engineers have been investigating CAD environments, combining knowledge-based engineering, computer graphics [89], geometry and solid modeling, and design optimization, for some time <ref> [72] </ref>, [159]. It is argued that future architectural PSEs could free CAD from its current restrictions [141] and enable users to explore completely innovative designs [136], [137]. 3.3.5 Visualization and Graphics Visualization is an integral part of PSEs.
Reference: [73] <author> D. A. </author> <title> Field. From solid modeling to finite element analysis. </title> <editor> In T. L. Kunii, editor, </editor> <booktitle> Application Development Systems, </booktitle> <pages> pages 220-249. </pages> <publisher> Springer-Verlag, </publisher> <address> Tokyo, </address> <year> 1986. </year>
Reference-contexts: The almost exclusive use of single rectangular or circular slopes in textbooks clouds the fact that most applications really involve somewhat more complicated shapes. For example, computer-aided design in structural engineering is based on interaction of solid modeling, finite element mesh generation, solution and postprocessing <ref> [73] </ref>. The structural engineering community has developed a methodology for a wide range of shapes, the building block approach (i.e., finite elements or constructive solid geometry), which is quite effective for many applications. On the other hand, it is not as effective when smooth shapes are essential to the applications. <p> Some environments are specialized to particular problem domains: for example, in the areas of industrial engineering design [186] and structural mechanics, combining solid modeling, finite element mesh generation, solution, and postprocessing in <ref> [73] </ref>, [148]. P SEs have also been created for pure mathematics (group theory [34]); partial differential equations [17], [139]; general relativity (SHEEP [80]); and numerical analysis and control of precision of arithmetic calculations (ACRITH [125], AQUARELS [67]). EVE [18] is an object-centered knowledge-based PDE solver, constructed around the MODULEF environment.
Reference: [74] <author> J. Fitch. </author> <title> A delivery system for REDUCE. </title> <booktitle> In Proc. </booktitle> <volume> ISSAC'90 [5], </volume> <pages> pages 76-81. </pages>
Reference-contexts: There have also been efforts to provide implementations of Lisp-based systems such as REDUCE in C by building a translator from REDUCE source to C <ref> [74] </ref>. See also [36] and [195] for additional work on the multiprocessing of SACs. As most scientific/numeric processing is done with Fortran, much time in symbolic systems is spent in special functions (e.g. GENTRAN) to generate Fortran code.
Reference: [75] <author> J. P. Fitch. </author> <title> Can REDUCE be run in parallel? In Proc. </title> <booktitle> ISSAC '89 [4], </booktitle> <pages> pages 155-162. </pages>
Reference-contexts: While research for the discovery of better SAC algorithms is continuing, improvements in speed and usability are expected as good compilers for the underlying languages become available [153], [154]; examples are the parallelizing compiler for sequential Scheme [96]; multiprocessing extensions for Lisp [88], [199]; the effort of <ref> [75] </ref> for constructing a compilation-driven parallel REDUCE system for loosely coupled, distributed architectures. There have also been efforts to provide implementations of Lisp-based systems such as REDUCE in C by building a translator from REDUCE source to C [74].
Reference: [76] <author> J. P. Fitch and R. G. Hall. </author> <title> Symbolic computation and the finite element method. </title> <booktitle> In Davenport [46], </booktitle> <pages> pages 95-96. </pages>
Reference-contexts: Systems have been built for automatically writing code to solve elliptic differential equations in general coordinates based on finite-difference/finite-volume approximation; for time dependent problems [64], and for generating finite element code <ref> [76] </ref>, [184], [193]. Another use of symbolic algebra tools for P SEs is in stability investigations of finite-difference approximations to differential equations [65], [83], [185]. An important use of SACs is in the generation and manipulation of Jacobian matrices during the solution of nonlinear systems of equations. <p> Another important topic is that of the interface of SACs with users and other systems. Examples include sophisticated graphics, output of Fortran code or L A T E X expressions, and connections with foreign environments <ref> [76] </ref>, [117], [182], [184], [193]. The data structures and computations used by SAC systems are very demanding of the computer system, so that the potential of parallel computation should be exploited. In the same 2.
Reference: [77] <author> J. E. Flaherty, P. Paslow, M. S. Shephard, and J. D. Vasilakis, </author> <title> editors. Adaptive Methods for Partial Differential Equations. </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1989. </year>
Reference-contexts: environment; this assumes a high degree of confidence for these routines, demonstrates the necessity for numerical algorithms in a PSE to be reliable, and indicates the importance of current research in error estimation and control, adaptive algorithms and software for the complex problems to which PSEs will be applied [68], <ref> [77] </ref>, [143]. 3.3.3 Artificial Intelligence Techniques for efficient problem solving constitute an important topic of artificial intelligence (AI) research [12]. Expert systems constitute a major aspect of AI with respect to problem solving tasks.
Reference: [78] <author> D. E. Foulser and W. D. Gropp. </author> <title> CLAM and CLAMShell: A system for building user interfaces. </title> <editor> In E. N. Houstis, J. R. Rice, and R. Vichnevetsky, editors, </editor> <booktitle> Pre-proceedings Second Int'l. Conf. Expert Systems Numer. Comput., </booktitle> <pages> pages 22-25, </pages> <address> West Lafayette, </address> <month> March </month> <year> 1990. </year> <note> Extended abstract. </note>
Reference-contexts: A recent example is the interfacing of PC-MATLAB with the SLICOT Fortran library (produced by NAG) 9 for automatic control [161], [190]. Second, it is possible to use mature compiler technology for code optimization of these modules in order to obtain high performance on the underlying computing platform <ref> [78] </ref>. Two-way interconnection is a recent enhancement which allows MATLAB to be used as a computational engine from a C program. Other tools can be envisaged, for example, that will automatically create Fortran or C output from the PSE language level.
Reference: [79] <author> B. Frederickson and J. Mackerle. </author> <title> Partial list of major finite element programs and description of some of their capabilities. In A.K. </title> <editor> Noor and W.D. Pikley, editors, </editor> <booktitle> State of the Art Surveys on Finite Element Technology, </booktitle> <pages> pages 363-403. </pages> <booktitle> The American Society of Mechanical Engineers, </booktitle> <year> 1983. </year>
Reference-contexts: A number of software packages exist that are used exclusively to simulate specific applications in structural mechanics, weather prediction, and climate simulation. A partial list of major engineering packages for structural analysis and their capabilities can be found in <ref> [79] </ref>. These packages implement the finite element method, not on the PDE describing the physical problem but on the physical principles governing it. The software for the other applications mentioned above is very often based on special efficient techniques that cannot be used easily to simulate other applications.
Reference: [80] <author> I. Frick. </author> <title> SHEEP and classification in general relativity. </title> <editor> In B. Buchberger and B. F. Caviness, editors, </editor> <booktitle> Proc. EUROCAL'85, </booktitle> <volume> vol. 2, </volume> <booktitle> number 204 in Lecture Notes in Computer Science, </booktitle> <pages> pages 161-162, </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1985. </year>
Reference-contexts: P SEs have also been created for pure mathematics (group theory [34]); partial differential equations [17], [139]; general relativity (SHEEP <ref> [80] </ref>); and numerical analysis and control of precision of arithmetic calculations (ACRITH [125], AQUARELS [67]). EVE [18] is an object-centered knowledge-based PDE solver, constructed around the MODULEF environment. A system, built on top of Mathematica and automating several problem solving steps from specification to code generation, is SINAPSE [119].
Reference: [81] <author> P. Gaffney and E. N. Houstis, </author> <title> editors. Programming Environments for High-Level Scientific Problem Solving. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1992. </year>
Reference-contexts: Still, the success of Mathematica [197] and Matlab [138] shows that some other science PSE markets, such as computational science and engineering education, are large enough to justify the requisite investments. For a view of current developments, see recent conference proceedings [106], [107], <ref> [81] </ref> as well as Section 3. <p> For the impact of computational science PSEs on science and engineering, see <ref> [81] </ref>, [107]. <p> We note references [18], [118], [131], [149]; Elliptic Expert [62] for the XELLPACK environment [27]; ATHENA for //ELLPACK [105]. Successful use of AI techniques for automatic preparation, execution, and control of numerical experiments has been reported in [2]; other useful references include [32], [38], [44], [95], [187], <ref> [81] </ref>, [106], [107]. It must be noted, however, that the feasibility of constructing systems able to handle general PDEs has still to be demonstrated. 3.3.4 Computational Geometry Geometry is a critical component for most applications.
Reference: [82] <author> K. A. Gallivan, M. T. Heath, E. Ng, J. M. Ortega, B. W. Peyton, R. J. Plemmons, C. H. Romine, A. H. Sameh, and R. G. Voigt. </author> <title> Parallel Algorithms for Matrix Computations. </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1990. </year>
Reference-contexts: Public depositories (e.g., NETLIB [57]) provide ready access to good quality numerical and other scientific software. Currently, there is intense research and development activity in algorithms and libraries for direct and iterative sparse computations [11], [14], [15], [52], [53], [54], [60], <ref> [82] </ref>, [144], [172], [171], [175]. Some libraries are developed even further into complete environments, (for example, using graphics and interface languages), bringing them closer to PSE s. <p> For example, novel computer systems have triggered research in algorithmic techniques to exploit vector and parallel computational resources, hierarchical and distributed memories, etc. See <ref> [82] </ref>. Libraries based on such techniques are already under construction and standardization; see for example [13]. It is hoped that PSEs will significantly reduce the present delay in applying and testing novel numerical algorithms in the context of real applications as well as simplifying the design of appropriate test problems.
Reference: [83] <author> V. Ganzha and R. Liska. </author> <title> Application of the REDUCE computer algebra system to stability analysis of difference schemes. </title> <editor> In E. Kaltofen and S. M. Watt, editors, </editor> <booktitle> Proc. Computers and Mathematics '89, </booktitle> <pages> pages 119-129. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: Another use of symbolic algebra tools for P SEs is in stability investigations of finite-difference approximations to differential equations [65], <ref> [83] </ref>, [185]. An important use of SACs is in the generation and manipulation of Jacobian matrices during the solution of nonlinear systems of equations.
Reference: [84] <author> M. Garbey, H. G. Kaper, and M. K. Kwong. </author> <title> Symbolic manipulation software and the study of differential equations. </title> <editor> In H. G. Kaper and M. Garbey, editors, </editor> <title> Asymptotic Analysis and the Numerical Solution of Partial Differential Equations, </title> <booktitle> volume 130 of Lecture Notes in Pure and Applied Mathematics, </booktitle> <pages> pages 241-265. </pages> <publisher> Marcel Dekker, Inc., </publisher> <address> New York, </address> <year> 1991. </year>
Reference: [85] <editor> D. Gelernter, A. Nicolau, and D. Padua, editors. </editor> <booktitle> Languages and Compilers for Parallel Computing. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year> <month> 40 </month>
Reference-contexts: The development of compilers and other tools for these languages and their implementation on target architectures is another important activity; see [120] and articles in <ref> [85] </ref>. One criticism of symbolic systems is that they are slow. The reasons for this are manifold.
Reference: [86] <author> A. Genz, Z. Lin, C. Jones, D. Luo, and T. Prenzel. </author> <title> Fast Givens goes slow in MATLAB. </title> <journal> ACM SIGNUM Newsletter, </journal> <volume> 26(2) </volume> <pages> 11-16, </pages> <month> Apr. </month> <year> 1991. </year>
Reference-contexts: Matrix laboratories can be used now for rapid prototyping of algorithms and experiments with industrial-strength data, thus better fulfilling their PSE role. In conjunction with these developments, close attention must be paid to performance issues of matrix laboratories <ref> [86] </ref>. Indeed, the engineering workstation which is the common platform for the matrix laboratory may be inadequate for large industrial problems and may necessitate running at least portions of the code on very high performance platforms.
Reference: [87] <author> J. R. Gilbert, C. Moler, and R. Schreiber. </author> <title> Sparse matrices in MATLAB: Design and implementation. </title> <journal> SIAM J. Matrix Anal. Appl., </journal> <volume> 13(1) </volume> <pages> 333-356, </pages> <year> 1992. </year>
Reference-contexts: Matrix laboratories for sparse data structures have been slow in coming, reflecting the less-developed state of the numerical library technology for sparse computations. Fortunately, as discussed in Section 3.3.2, progress has been made in that area recently to the benefit of matrix laboratories <ref> [87] </ref>. Matrix laboratories can be used now for rapid prototyping of algorithms and experiments with industrial-strength data, thus better fulfilling their PSE role. In conjunction with these developments, close attention must be paid to performance issues of matrix laboratories [86]. <p> Traditionally, visualization techniques are primarily applied in the pre- or post-processing of the solution process. An important recent advance includes the use of visualization tools to depict sparse matrices in the context of matrix laboratories or other numerical libraries <ref> [87] </ref>, [146], [188]. Often, there is a need to observe and steer the computation during run-time; see for example [28] and [94] and articles in [183].
Reference: [88] <author> R. Goldman and R. P. Gabriel. </author> <title> Qlisp: Parallel processing in Lisp. </title> <journal> IEEE Software, </journal> <volume> 6(4) </volume> <pages> 51-59, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: While research for the discovery of better SAC algorithms is continuing, improvements in speed and usability are expected as good compilers for the underlying languages become available [153], [154]; examples are the parallelizing compiler for sequential Scheme [96]; multiprocessing extensions for Lisp <ref> [88] </ref>, [199]; the effort of [75] for constructing a compilation-driven parallel REDUCE system for loosely coupled, distributed architectures. There have also been efforts to provide implementations of Lisp-based systems such as REDUCE in C by building a translator from REDUCE source to C [74].
Reference: [89] <author> D. P. Greenberg. </author> <title> Computers and architecture. </title> <publisher> Scientific American, </publisher> <pages> pages 104-109, </pages> <month> Feb. </month> <year> 1991. </year>
Reference-contexts: Success on this level will require melding different research communities. Architects and civil engineers have been investigating CAD environments, combining knowledge-based engineering, computer graphics <ref> [89] </ref>, geometry and solid modeling, and design optimization, for some time [72], [159]. It is argued that future architectural PSEs could free CAD from its current restrictions [141] and enable users to explore completely innovative designs [136], [137]. 3.3.5 Visualization and Graphics Visualization is an integral part of PSEs.
Reference: [90] <author> D. Gries, T. Walker, and P. Young. </author> <title> 1988 Snowbird report: A discipline matures. </title> <journal> IEEE Comput., </journal> <volume> 22(2) </volume> <pages> 72-75, </pages> <year> 1989. </year>
Reference-contexts: It is counterproductive to build a house by having the builder bring truckloads of materials, letting the future occupants decide if they are appropriate; see [49], <ref> [90] </ref>. 21 3.6 Professional Infrastructure The educational infrastructure for scientific problem solving environments is not strong. We use the term Computational Engineering and Science (CES) to denote this discipline and area of work.
Reference: [91] <author> A. Griewank and G. F. Corliss, </author> <title> editors. Automatic Differentiation of Algorithms: Theory, Implementation and Application. </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1991. </year>
Reference-contexts: Hence SACs as well as recent automatic differentiation techniques can replace error-prone hand manipulation or finite difference oriented schemes contaminated by roundoff 2 ; see [41], [139], [191] plus articles and references in <ref> [91] </ref>. By providing the framework for specifying the mathematical problem in a manner close to the standard scientific notation, SACs approach satisfying an important PSE function, that is, providing communication in the user's own terms.
Reference: [92] <author> W. D. Gropp, D. E. Foulser, and S. Chang. </author> <title> CLAM User's Guide. </title> <publisher> Scientific Computing Associates, Inc., </publisher> <address> New Haven, </address> <year> 1989. </year>
Reference-contexts: We present in some detail three scientific activities where P SEs are being developed. 3.2.1 Matrix Laboratories Matrix laboratories are good examples of the potential benefits of problem solving environments for numerical scientific computation. Systems such as MATLAB (MATrix LABoratory) [138] and CLAM <ref> [92] </ref> allow rapid prototyping and testing of new ideas. The success of matrix laboratories is due to a combination of the following characteristics: 1.
Reference: [93] <author> L. Gross, P. Sternercker, and W. Schonauer. </author> <title> The finite element tool package, VECFEM (version 1.1). </title> <type> Technical Report 45/91, </type> <institution> University of Karlsruhe, </institution> <year> 1991. </year>
Reference-contexts: This mapping can be displayed and modified interactively. Currently //ELLPACK provides PDE solvers based on the domain decomposition methodology, that generate code for MIMD architectures. All three systems have a facility for collecting, visualizing, and analyzing performance data. The VECFEM system <ref> [93] </ref> solves multidimensional elliptic, parabolic, and eigenvalue functional equations on vector machines. The equations are approximated using finite elements in space (thus allowing irregular domains), and finite differences with self-adapted step size and order control in time.
Reference: [94] <author> R. Haber, B. Bliss, D. Jablonowski, and C. Jog. </author> <title> A Distributed Environment for Run-Time Visualization and Application Steering in Computational Mechanics. </title> <journal> Computer Systems Engineering Journal, </journal> <note> (to appear). </note>
Reference-contexts: An important recent advance includes the use of visualization tools to depict sparse matrices in the context of matrix laboratories or other numerical libraries [87], [146], [188]. Often, there is a need to observe and steer the computation during run-time; see for example [28] and <ref> [94] </ref> and articles in [183]. Furthermore, the introduction of parallel computing and its realization on varied parallel architectures has necessitated the collection of run-time data that show the performance and flow of parallel computations; see for example [183].
Reference: [95] <author> S.J. Hague. </author> <title> Using FOCUS technology to build front ends. </title> <booktitle> In Gaffney and Houstis [81], </booktitle> <pages> pages 383-392. </pages>
Reference-contexts: We note references [18], [118], [131], [149]; Elliptic Expert [62] for the XELLPACK environment [27]; ATHENA for //ELLPACK [105]. Successful use of AI techniques for automatic preparation, execution, and control of numerical experiments has been reported in [2]; other useful references include [32], [38], [44], <ref> [95] </ref>, [187], [81], [106], [107]. It must be noted, however, that the feasibility of constructing systems able to handle general PDEs has still to be demonstrated. 3.3.4 Computational Geometry Geometry is a critical component for most applications.
Reference: [96] <author> W. L. Harrison III and D. A. Padua. </author> <title> PARCEL: Project for the automatic restructuring and concurrent evaluation of Lisp. </title> <booktitle> In Proc. 1988 Int'l. Conf. Supercomput., </booktitle> <pages> pages 527-538, </pages> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: While research for the discovery of better SAC algorithms is continuing, improvements in speed and usability are expected as good compilers for the underlying languages become available [153], [154]; examples are the parallelizing compiler for sequential Scheme <ref> [96] </ref>; multiprocessing extensions for Lisp [88], [199]; the effort of [75] for constructing a compilation-driven parallel REDUCE system for loosely coupled, distributed architectures. There have also been efforts to provide implementations of Lisp-based systems such as REDUCE in C by building a translator from REDUCE source to C [74].
Reference: [97] <author> A. C. Hearn. </author> <title> Reduce 2: A system and language for algebraic manipulation. </title> <booktitle> In Petrick [151], </booktitle> <pages> pages 128-133. </pages>
Reference-contexts: were evolving into complete PSEs, the use of elaborate graphics was commonplace, and expert systems help (which this community of users needs particularly badly) was being developed and introduced. 3.3 Component Areas 3.3.1 Symbolic and Algebraic Computing Examples of symbolic and algebraic computing systems (SACs) are MACSYMA [70], [132], REDUCE <ref> [97] </ref>, [98], Maple [37], Scratchpad II [115], DERIVE [181], and Mathematica [1], [197]. Reference 13 [99] provides several interesting observations on the development of SAC systems in relation to other areas of computer science.
Reference: [98] <author> A. C. Hearn. </author> <title> REDUCE User's Manual. </title> <publisher> The Rand Corporation, </publisher> <address> Los Angeles, </address> <year> 1987. </year>
Reference-contexts: evolving into complete PSEs, the use of elaborate graphics was commonplace, and expert systems help (which this community of users needs particularly badly) was being developed and introduced. 3.3 Component Areas 3.3.1 Symbolic and Algebraic Computing Examples of symbolic and algebraic computing systems (SACs) are MACSYMA [70], [132], REDUCE [97], <ref> [98] </ref>, Maple [37], Scratchpad II [115], DERIVE [181], and Mathematica [1], [197]. Reference 13 [99] provides several interesting observations on the development of SAC systems in relation to other areas of computer science.
Reference: [99] <author> A. C. Hearn. </author> <title> Algebraic computation: The quiet revolution. </title> . <editor> In V. Lifschitz, editor, </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation. Papers in Honor of John McCarthy, </booktitle> <pages> pages 177-186. </pages> <publisher> Academic Press, </publisher> <address> San Diego, </address> <year> 1991. </year>
Reference-contexts: Reference 13 <ref> [99] </ref> provides several interesting observations on the development of SAC systems in relation to other areas of computer science. A recent important report summarizes a wealth of information about current and future applications of SAC technology [100].
Reference: [100] <author> A. C. Hearn, A. Boyle, and B. </author> <title> F Caviness. Symbolic computation: Directions for future research. report of a worshop on symbolic and algebraic computation. </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1989. </year>
Reference-contexts: Reference 13 [99] provides several interesting observations on the development of SAC systems in relation to other areas of computer science. A recent important report summarizes a wealth of information about current and future applications of SAC technology <ref> [100] </ref>. SACs can help in the early problem solving steps of specification and model creation. They can perform analytical manipulations before the application of numerical techniques; these manipulations are useful but also tedious and error prone if done manually.
Reference: [101] <author> P. N. Hilfinger and P. Collela. FIDIL: </author> <title> A language for scientific programming. </title> <editor> In R. Grossman, editor, </editor> <booktitle> Symbolic Computation: Applications to Scientific Computing, </booktitle> <pages> pages 97-138. </pages> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1989. </year>
Reference-contexts: Some of the systems described earlier already provide their own language. New languages are also being proposed, some specifically directed toward scientific computation while object-oriented languages such as C++ gain currency in the scientific computation area [59], <ref> [101] </ref>, [128], [133], [134], [63], [169], [198]. The development of compilers and other tools for these languages and their implementation on target architectures is another important activity; see [120] and articles in [85]. One criticism of symbolic systems is that they are slow. The reasons for this are manifold.
Reference: [102] <author> C. Hoffmann. </author> <title> Geometric and Solid Modeling: An Introduction. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1989. </year>
Reference-contexts: This task requires efforts on several layers. Beginning at the infrastructure level, geometric modeling systems pose many research problems in the integration of numerical and symbolic computation and in the practical application of theories 16 from geometry and algebra <ref> [102] </ref>. On the systems integration level, geometric modeling systems need to be restructured into open systems that give freely access to infrastructure functionalities and provide tools for interfacing with complex interval data structures.
Reference: [103] <author> M. J. Hopper. </author> <title> Harwell subroutine library. A catalogue of subroutines. </title> <address> HMSO, London, </address> <year> 1978. </year> <month> 41 </month>
Reference-contexts: As problems increase in complexity, the presence of reliable, efficient and easily assembled software parts becomes essential [168]. High-quality numerical libraries allow the user to concentrate on the higher level issues instead of rewriting software <ref> [103] </ref>, [112], [142]. Public depositories (e.g., NETLIB [57]) provide ready access to good quality numerical and other scientific software. Currently, there is intense research and development activity in algorithms and libraries for direct and iterative sparse computations [11], [14], [15], [52], [53], [54], [60], [82], [144], [172], [171], [175].
Reference: [104] <author> E. N. Houstis, T. S. Papatheodorou, and J. R. Rice. </author> <title> Parallel ELLPACK: An expert system for the parallel processing of partial differential equations. </title> <editor> In Houstis et al. </editor> <volume> [106], </volume> <pages> pages 63-73. </pages>
Reference-contexts: It follows a modular programming paradigm which is supported by a domain-specific PDE language and a variety of elliptic PDE solvers. The PDE language interface allows the user to develop high-level programs that can be used to solve nonlinear and time dependent PDEs. XELLPACK [27] and Parallel (//) ELLPACK <ref> [104] </ref> are recent extensions of ELLPACK based on the X windowing environment. XELLPACK provides graphical input for constructing grids, pop-up menus for selecting solution techniques, and color graphics output for analyzing solutions.
Reference: [105] <author> E. N. Houstis, J. R. Rice, N. P. Chrisochoides, H. C. Karathanasis, P. N. Papachiou, M. K. Samartzis, E. A. Vavalis, K.-Y. Wang, and S. Weerawana. </author> <title> //Ellpack: A numerical simulation programming environment for parallel MIMD machines. </title> <booktitle> In Proc. 1990 Int'l Conf. Supercomput., </booktitle> <pages> pages 96-107, </pages> <address> Amsterdam, </address> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: A user can interface with XELLPACK from any X workstation while an XELLPACK client solves an elliptic problem on any machine or machines on the network. //ELLPACK is a parallel version of ELLPACK [108], originally designed for hypercube architectures <ref> [105] </ref>, [108]. It acts as an interface to various libraries of parallel elliptic PDE solvers. <p> Expert systems have been developed for differential equations. We note references [18], [118], [131], [149]; Elliptic Expert [62] for the XELLPACK environment [27]; ATHENA for //ELLPACK <ref> [105] </ref>. Successful use of AI techniques for automatic preparation, execution, and control of numerical experiments has been reported in [2]; other useful references include [32], [38], [44], [95], [187], [81], [106], [107].
Reference: [106] <editor> E. N. Houstis, J. R. Rice, and R. Vichnevetsky, editors. </editor> <booktitle> Intelligent Mathematical Software Systems. </booktitle> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: Still, the success of Mathematica [197] and Matlab [138] shows that some other science PSE markets, such as computational science and engineering education, are large enough to justify the requisite investments. For a view of current developments, see recent conference proceedings <ref> [106] </ref>, [107], [81] as well as Section 3. <p> We note references [18], [118], [131], [149]; Elliptic Expert [62] for the XELLPACK environment [27]; ATHENA for //ELLPACK [105]. Successful use of AI techniques for automatic preparation, execution, and control of numerical experiments has been reported in [2]; other useful references include [32], [38], [44], [95], [187], [81], <ref> [106] </ref>, [107]. It must be noted, however, that the feasibility of constructing systems able to handle general PDEs has still to be demonstrated. 3.3.4 Computational Geometry Geometry is a critical component for most applications.
Reference: [107] <author> E. N. Houstis, J. R. Rice, and R. Vichnevetsky, </author> <title> editors. Expert Systems for Scientific Computing. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1992. </year>
Reference-contexts: Still, the success of Mathematica [197] and Matlab [138] shows that some other science PSE markets, such as computational science and engineering education, are large enough to justify the requisite investments. For a view of current developments, see recent conference proceedings [106], <ref> [107] </ref>, [81] as well as Section 3. <p> For the impact of computational science PSEs on science and engineering, see [81], <ref> [107] </ref>. <p> We note references [18], [118], [131], [149]; Elliptic Expert [62] for the XELLPACK environment [27]; ATHENA for //ELLPACK [105]. Successful use of AI techniques for automatic preparation, execution, and control of numerical experiments has been reported in [2]; other useful references include [32], [38], [44], [95], [187], [81], [106], <ref> [107] </ref>. It must be noted, however, that the feasibility of constructing systems able to handle general PDEs has still to be demonstrated. 3.3.4 Computational Geometry Geometry is a critical component for most applications.
Reference: [108] <author> E. N. Houstis and J. R. Rice. </author> <title> Parallel ELLPACK, a development environment and problem solving environment for high performance computing machines. </title> <booktitle> In Gaffney and Houstis [81], </booktitle> <pages> pages 229-241. </pages>
Reference-contexts: A user can interface with XELLPACK from any X workstation while an XELLPACK client solves an elliptic problem on any machine or machines on the network. //ELLPACK is a parallel version of ELLPACK <ref> [108] </ref>, originally designed for hypercube architectures [105], [108]. It acts as an interface to various libraries of parallel elliptic PDE solvers. <p> A user can interface with XELLPACK from any X workstation while an XELLPACK client solves an elliptic problem on any machine or machines on the network. //ELLPACK is a parallel version of ELLPACK <ref> [108] </ref>, originally designed for hypercube architectures [105], [108]. It acts as an interface to various libraries of parallel elliptic PDE solvers.
Reference: [109] <author> Grand Challenges: </author> <title> High Performance Computing and Communications. A report by the committee on Physical, </title> <institution> Mathematical, and Engineering Sciences. Office of Science and Technology Policy, </institution> <address> Washington, D.C., </address> <year> 1991. </year>
Reference-contexts: For the impact of PSEs on economic industrial activity, see [140], [163], [186]. 2.4 Grand Challenges and Petty Challenges The High Performance Computing and Communications Initiative has popularized the concept of grand challenges for computer science <ref> [109] </ref>, and it is natural to relate PSEs for computational science to these challenges. Because PSE s facilitate science in general, they will be expected to contribute to meeting these challenges in many ways. <p> The proposed National Research and Education Network (NREN) component of the Federal High Performance Computing and Communications Initiative (HPCC) addresses these areas as it is designed to support the bandwidth required for interactive visualization, file and image transfers, multi-media database access, teleconferencing, and collaboration technology <ref> [109] </ref>, [6]. Some examples relevant to the previous discussion on SAC and numerical systems are the electronic dissemination of information (source code, bibliographies, news) for REDUCE (organized by A.
Reference: [110] <author> M. A. Hussain, L. F. Coffin, and K. A. Zaleski. </author> <title> Three-dimensional singular element. </title> <type> Technical report, </type> <institution> Corporate Research and Development, General Electric, Schenectady, </institution> <address> NY, </address> <month> Dec. </month> <year> 1980. </year>
Reference-contexts: Currently, several companies are relying on SAC systems for complicated industrial tasks ranging from the design of three-dimensional elements to simulate singular behavior in stress fields <ref> [110] </ref>, to studying seismic wave propagation [119], conducting reliability analysis for off-shore oil rigs and nuclear reactors, and complementing finite element methods in the design of wind turbines and next-generation engines.
Reference: [111] <institution> IBM J. Res. Dev., </institution> <address> 35(1/2), Jan./Mar. </address> <year> 1991. </year> <title> Special Issue on Visual Interpretation of Complex Data. </title>
Reference-contexts: The case for a visualization initiative was made in [39] so that advances in numerical simulation software/hardware environments can be matched by an improved ability to assimilate the results. For a review of recent activities in the area see [30] and <ref> [111] </ref>. E. J. Farrell's preface to the latter collection summarizes the importance of visualization in scientific computing. It is noted that graphics, images and presentation of information in image form are essential in the development of science and engineering.
Reference: [112] <institution> IMSL, Houston, TX. Math/Library, Stat/Library, and SFUN/Library, </institution> <year> 1987. </year>
Reference-contexts: As problems increase in complexity, the presence of reliable, efficient and easily assembled software parts becomes essential [168]. High-quality numerical libraries allow the user to concentrate on the higher level issues instead of rewriting software [103], <ref> [112] </ref>, [142]. Public depositories (e.g., NETLIB [57]) provide ready access to good quality numerical and other scientific software. Currently, there is intense research and development activity in algorithms and libraries for direct and iterative sparse computations [11], [14], [15], [52], [53], [54], [60], [82], [144], [172], [171], [175].
Reference: [113] <institution> IMSL, Houston, TX. </institution> <note> User's Manual: PDE/PROTRAN, </note> <year> 1989. </year>
Reference: [114] <author> R. H. F. Jackson, P. T. Boggs, S. G. Nash, and S. Powell. </author> <title> Guidelines for reporting results of computational experiments. Report of the ad hoc committee. </title> <journal> Math. Progr., </journal> <volume> 49 </volume> <pages> 413-425, </pages> <year> 1991. </year>
Reference-contexts: Indeed, the lack of adequate real data sets and good reporting procedures has been recognized as a serious impediment to research in many subfields of numerical analysis [22], <ref> [114] </ref>. Although efforts are being made to construct collections of test data, PSEs offer a natural solution to this problem. Reliability of results is another important concern.
Reference: [115] <author> R. D. Jenks, R. S. Sutor, and S. M. Watt. Skratchpad II: </author> <title> An abstract datatype system for mathematical computation. </title> <editor> In J. R. Rice, editor, </editor> <booktitle> Mathematical Aspects of Scientific Software, volume 14 of The IMA Volumes in Mathematics and its Applications, </booktitle> <pages> pages 157-182. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: use of elaborate graphics was commonplace, and expert systems help (which this community of users needs particularly badly) was being developed and introduced. 3.3 Component Areas 3.3.1 Symbolic and Algebraic Computing Examples of symbolic and algebraic computing systems (SACs) are MACSYMA [70], [132], REDUCE [97], [98], Maple [37], Scratchpad II <ref> [115] </ref>, DERIVE [181], and Mathematica [1], [197]. Reference 13 [99] provides several interesting observations on the development of SAC systems in relation to other areas of computer science. A recent important report summarizes a wealth of information about current and future applications of SAC technology [100].
Reference: [116] <author> R. Jernigan, B. W. Hamill, and D. W. Weintraub, </author> <title> editors. The Role of Language in Problem Solving, volume I. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1985. </year>
Reference: [117] <author> N. Kajler. </author> <title> Building graphic user interfaces for computer algebra systems. </title> <booktitle> In Miola [135], </booktitle> <pages> pages 235-244. </pages>
Reference-contexts: Another important topic is that of the interface of SACs with users and other systems. Examples include sophisticated graphics, output of Fortran code or L A T E X expressions, and connections with foreign environments [76], <ref> [117] </ref>, [182], [184], [193]. The data structures and computations used by SAC systems are very demanding of the computer system, so that the potential of parallel computation should be exploited. In the same 2.
Reference: [118] <author> M. Kamel and W. H. Enright. ODEXPERT: </author> <title> A knowledge based system for automatic selection of initial value ODE system solvers. </title> <editor> In Houstis et al. </editor> <volume> [107], </volume> <pages> pages 33-54. </pages>
Reference-contexts: In areas such as civil engineering, knowledge based systems are combined with CAD tools to improve the overall design process; see [16] and [24]. Expert systems have been developed for differential equations. We note references [18], <ref> [118] </ref>, [131], [149]; Elliptic Expert [62] for the XELLPACK environment [27]; ATHENA for //ELLPACK [105]. Successful use of AI techniques for automatic preparation, execution, and control of numerical experiments has been reported in [2]; other useful references include [32], [38], [44], [95], [187], [81], [106], [107].
Reference: [119] <author> E. Kant, F. Daube, W. MacGregor, and J. Wald. </author> <title> Automated synthesis of finite difference programs. </title> <editor> In Noor et al. </editor> <volume> [140], </volume> <pages> pages 45-61. 42 </pages>
Reference-contexts: Currently, several companies are relying on SAC systems for complicated industrial tasks ranging from the design of three-dimensional elements to simulate singular behavior in stress fields [110], to studying seismic wave propagation <ref> [119] </ref>, conducting reliability analysis for off-shore oil rigs and nuclear reactors, and complementing finite element methods in the design of wind turbines and next-generation engines. Overall, we note that by their very nature, SACs come very close to the PSE idea; see for example [70], [182, Section 8.2.5]. <p> EVE [18] is an object-centered knowledge-based PDE solver, constructed around the MODULEF environment. A system, built on top of Mathematica and automating several problem solving steps from specification to code generation, is SINAPSE <ref> [119] </ref>. The primary application domain of SINAPSE is seismic wave propagation using finite differences and explicit or implicit time stepping.
Reference: [120] <author> K. Kennedy, K. S. McKinley, and C.-W. Tseng. </author> <title> Analysis and transformation in the ParaScope editor. </title> <booktitle> In Proc. ACM Int'l. Conf. Supercomput. held in Cologne, </booktitle> <address> Germany, </address> <month> June </month> <year> 1991, </year> <pages> pages 433-447. </pages> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: The development of compilers and other tools for these languages and their implementation on target architectures is another important activity; see <ref> [120] </ref> and articles in [85]. One criticism of symbolic systems is that they are slow. The reasons for this are manifold.
Reference: [121] <author> M. Klerer and J. Reinfelds. </author> <title> Interactive Systems for Experimental Applied Mathematics. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1968. </year>
Reference-contexts: Less than a decade after Fortran was introduced, there were many projects aimed at developing various aspects of P SEs. The proceedings of the 1967 ACM conference, Interactive Systems for Experimental Applied Mathematics <ref> [121] </ref>, provides an overview of early work. The title of Culler and Fried's paper, An On-Line Computing Center for Scientific Problems [45] indicates the high ambition for PSEs at a time when Fortran and Algol were still novelties.
Reference: [122] <author> C. Konno, Y. Umetani, M. Igai, and T. Ohta. Interactive/visual DEQSOL: </author> <title> Interactive creation, debugging, diagnosis, and visualization of numerical simulation. </title> <editor> In Houstis et al. </editor> <volume> [106], </volume> <pages> pages 301-317. </pages>
Reference-contexts: The system uses PROTRAN ([9],[113]) to drive the computations and to input/output the PDE data. DEQSOL supports finite difference and finite element discretizations of time-dependent PDEs 12 <ref> [122] </ref>. It includes a very high level specification language, an interactive/visual user interface for PDE problem specification, automatic generation of sequential or vector code, debugging, diagnosis, and visualization of numerical simulation of PDE problems; see also [123], [173], [189]. ALPAL is a P SE for several PDE-based computations [40].
Reference: [123] <author> C. Konno, M. Yamabe, M. Saji, N. Sagawa, Y. Umetani, H. Hirayama, and T. Ohta. </author> <title> Automatic code generation method of DEQSOL. </title> <journal> J. Inform. Proc., </journal> <volume> 11(1) </volume> <pages> 15-21, </pages> <year> 1987. </year>
Reference-contexts: DEQSOL supports finite difference and finite element discretizations of time-dependent PDEs 12 [122]. It includes a very high level specification language, an interactive/visual user interface for PDE problem specification, automatic generation of sequential or vector code, debugging, diagnosis, and visualization of numerical simulation of PDE problems; see also <ref> [123] </ref>, [173], [189]. ALPAL is a P SE for several PDE-based computations [40].
Reference: [124] <author> D. J. Kuck. </author> <title> A user's view of high-performance scientific and engineering software systems in the mid-21st century. </title> <editor> In Houstis et al. </editor> <volume> [107], </volume> <pages> pages 69-87. </pages>
Reference-contexts: Performance, portability, and extensibility are issues of which the PSEs must be cognizant. It is critical for the PSE to be be designed so that it matches the users' various levels of ability. The desirability of this feature for future PSEs has been mentioned in the literature; see <ref> [124] </ref> and [19]. In addition, environments must be able to support adaptation to the user's changing needs and resources. Some important problems and a vision for future environments are described in [124]. <p> The desirability of this feature for future PSEs has been mentioned in the literature; see <ref> [124] </ref> and [19]. In addition, environments must be able to support adaptation to the user's changing needs and resources. Some important problems and a vision for future environments are described in [124]. The design and development of the appropriate software infrastructure to create such soft laboratories is an important future research direction. Expert systems for problem solving. Applications will no longer be supported by single-minded, deterministic algorithms that require several parameters to be specified by the user.
Reference: [125] <author> U.W. Kulisch. </author> <title> Computer Arithmetic in Theory and Practice. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1981. </year>
Reference-contexts: P SEs have also been created for pure mathematics (group theory [34]); partial differential equations [17], [139]; general relativity (SHEEP [80]); and numerical analysis and control of precision of arithmetic calculations (ACRITH <ref> [125] </ref>, AQUARELS [67]). EVE [18] is an object-centered knowledge-based PDE solver, constructed around the MODULEF environment. A system, built on top of Mathematica and automating several problem solving steps from specification to code generation, is SINAPSE [119].
Reference: [126] <author> A. Laub. </author> <title> Numerical linear algebra aspects of control design computations. </title> <journal> IEEE Trans. Automat. Control, </journal> <volume> AC-30:97-108, </volume> <year> 1985. </year>
Reference-contexts: For example, automatic control, where the matrix algebra content is well defined and small-scale problems are interesting and realistic <ref> [126] </ref>, is one of the first areas where the tools are used successfully. Matrix laboratories are expected to gain enormously as their design incorporates tools for one-or two-way interconnection with other systems.
Reference: [127] <author> A. Laub. </author> <title> Invariant subspace methods for the numerical solution of Riccati equations. </title> <editor> In S. Bittanti, A. Laub, and J. Willems, editors, </editor> <booktitle> The Riccati equation, </booktitle> <pages> pages 163-196. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1991. </year>
Reference-contexts: This is certainly true for areas such as computational fluid dynamics, where resolution requirements demand sparse direct or iterative solvers, and is gradually becoming necessary in areas such as automatic control <ref> [127] </ref>, [170]. Matrix laboratories for sparse data structures have been slow in coming, reflecting the less-developed state of the numerical library technology for sparse computations. Fortunately, as discussed in Section 3.3.2, progress has been made in that area recently to the benefit of matrix laboratories [87].
Reference: [128] <author> B. Leasure, </author> <title> editor. PCF Fortran: Language Definition, version 3.1. </title> <booktitle> The Parallel Computing Forum, </booktitle> <address> Champaign, IL, </address> <month> Aug. </month> <year> 1990. </year>
Reference-contexts: Some of the systems described earlier already provide their own language. New languages are also being proposed, some specifically directed toward scientific computation while object-oriented languages such as C++ gain currency in the scientific computation area [59], [101], <ref> [128] </ref>, [133], [134], [63], [169], [198]. The development of compilers and other tools for these languages and their implementation on target architectures is another important activity; see [120] and articles in [85]. One criticism of symbolic systems is that they are slow. The reasons for this are manifold.
Reference: [129] <author> J. K. Lee and D. Gannon. </author> <title> Object-oriented parallel programming experiments and results. </title> <booktitle> Proc. Supercomputing'91, </booktitle> <pages> pages 273-282. </pages> <publisher> IEEE Computer Soc. Press, Los Alamitos, </publisher> <address> Calif. </address> <year> 1991 </year>
Reference-contexts: Object-Oriented Design. Object-oriented techniques will be useful for rendering PSEs comprehensible and manageable [31], [7]. P SE components are expected to cooperate in problem solving and would benefit from research in concurrent object-oriented programming [8]. In particular, object-oriented programming techniques are gradually becoming more common in computational science [35], <ref> [129] </ref>, [138], [145], [149], [160]. Software Interconnection Technologies. The integration of complex numerical and symbolic systems needs appropriate software interconnection technology and module interconnection languages for the efficient description and control of problem solving.
Reference: [130] <author> M. R. Leuze, </author> <title> editor. Scalable parallel libraries workshop report. </title> <institution> Preproceedings of a workshop conducted at Oak Ridge National Laboratory, </institution> <month> September </month> <year> 1990. </year>
Reference-contexts: Some of the difficulties are similar to those encountered when dealing with the parallelization of symbolic computations. As massively parallel architectures mature, studies of scalability for mathematical and scientific libraries, software tools, and communication and I/O libraries should also intensify <ref> [130] </ref>. As the user searches for the best algorithm for his particular application, he will be faced with algorithms that tackle the same problem but perform differently, depending on the input data.
Reference: [131] <author> M. Lucks and I. Gladwell. </author> <title> Automated selection of mathematical software. </title> <journal> ACM Trans. Math. Softw., </journal> <volume> 18(1) </volume> <pages> 11-34, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: In areas such as civil engineering, knowledge based systems are combined with CAD tools to improve the overall design process; see [16] and [24]. Expert systems have been developed for differential equations. We note references [18], [118], <ref> [131] </ref>, [149]; Elliptic Expert [62] for the XELLPACK environment [27]; ATHENA for //ELLPACK [105]. Successful use of AI techniques for automatic preparation, execution, and control of numerical experiments has been reported in [2]; other useful references include [32], [38], [44], [95], [187], [81], [106], [107].
Reference: [132] <author> W. A. Martin and R. J. Fateman. </author> <title> The MACSYMA system. </title> <booktitle> In Petrick [151], </booktitle> <pages> pages 59-75. </pages>
Reference-contexts: these systems were evolving into complete PSEs, the use of elaborate graphics was commonplace, and expert systems help (which this community of users needs particularly badly) was being developed and introduced. 3.3 Component Areas 3.3.1 Symbolic and Algebraic Computing Examples of symbolic and algebraic computing systems (SACs) are MACSYMA [70], <ref> [132] </ref>, REDUCE [97], [98], Maple [37], Scratchpad II [115], DERIVE [181], and Mathematica [1], [197]. Reference 13 [99] provides several interesting observations on the development of SAC systems in relation to other areas of computer science.
Reference: [133] <author> P. Mehrotra and J. van Rosendale. </author> <title> The BLAZE language: A parallel language for scientific programming. </title> <journal> Parallel Comput., </journal> <volume> 5 </volume> <pages> 339-361, </pages> <year> 1987. </year>
Reference-contexts: Some of the systems described earlier already provide their own language. New languages are also being proposed, some specifically directed toward scientific computation while object-oriented languages such as C++ gain currency in the scientific computation area [59], [101], [128], <ref> [133] </ref>, [134], [63], [169], [198]. The development of compilers and other tools for these languages and their implementation on target architectures is another important activity; see [120] and articles in [85]. One criticism of symbolic systems is that they are slow. The reasons for this are manifold.
Reference: [134] <author> P. Mehrotra and J. van Rosendale. </author> <title> Programming distributed memory architectures using Kali. </title> <type> Technical Report 90-69, </type> <institution> ICASE, </institution> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: Some of the systems described earlier already provide their own language. New languages are also being proposed, some specifically directed toward scientific computation while object-oriented languages such as C++ gain currency in the scientific computation area [59], [101], [128], [133], <ref> [134] </ref>, [63], [169], [198]. The development of compilers and other tools for these languages and their implementation on target architectures is another important activity; see [120] and articles in [85]. One criticism of symbolic systems is that they are slow. The reasons for this are manifold.
Reference: [135] <editor> A. Miola, editor. DISCO'90: </editor> <booktitle> Design and Implementation of Symbolic Computation Systems. Number 429 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference: [136] <author> W. J. Mitchell. Afterword: </author> <title> The design studio of the future. </title> <editor> In M. McCullough, W. J. Mitchell, and P. Purcell, editors, </editor> <booktitle> The Electronic Design Studio, </booktitle> <pages> pages 479-494. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: It is argued that future architectural PSEs could free CAD from its current restrictions [141] and enable users to explore completely innovative designs <ref> [136] </ref>, [137]. 3.3.5 Visualization and Graphics Visualization is an integral part of PSEs. The case for a visualization initiative was made in [39] so that advances in numerical simulation software/hardware environments can be matched by an improved ability to assimilate the results.
Reference: [137] <author> W. J. Mitchell and M. McCullough. </author> <title> Digital Design Media. A Handbook for Architects & Design Professionals. </title> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: It is argued that future architectural PSEs could free CAD from its current restrictions [141] and enable users to explore completely innovative designs [136], <ref> [137] </ref>. 3.3.5 Visualization and Graphics Visualization is an integral part of PSEs. The case for a visualization initiative was made in [39] so that advances in numerical simulation software/hardware environments can be matched by an improved ability to assimilate the results.
Reference: [138] <author> C. Moler, J. Little, and S. Bangert. </author> <title> PRO-MATLAB for Sun Workstations: User's Guide. The MathWorks, </title> <publisher> Inc., </publisher> <address> Sherborn, MA, </address> <year> 1990. </year>
Reference-contexts: Indeed, as of this writing, PSEs are not common in science and engineering except in limited areas, such as computer-aided design (CAD) systems for structural engineering and electronics; see for example [19]. Still, the success of Mathematica [197] and Matlab <ref> [138] </ref> shows that some other science PSE markets, such as computational science and engineering education, are large enough to justify the requisite investments. For a view of current developments, see recent conference proceedings [106], [107], [81] as well as Section 3. <p> We present in some detail three scientific activities where P SEs are being developed. 3.2.1 Matrix Laboratories Matrix laboratories are good examples of the potential benefits of problem solving environments for numerical scientific computation. Systems such as MATLAB (MATrix LABoratory) <ref> [138] </ref> and CLAM [92] allow rapid prototyping and testing of new ideas. The success of matrix laboratories is due to a combination of the following characteristics: 1. <p> Object-oriented techniques will be useful for rendering PSEs comprehensible and manageable [31], [7]. P SE components are expected to cooperate in problem solving and would benefit from research in concurrent object-oriented programming [8]. In particular, object-oriented programming techniques are gradually becoming more common in computational science [35], [129], <ref> [138] </ref>, [145], [149], [160]. Software Interconnection Technologies. The integration of complex numerical and symbolic systems needs appropriate software interconnection technology and module interconnection languages for the efficient description and control of problem solving.
Reference: [139] <author> P. K. Moore, C. Ozturan, and J. E. Flaherty. </author> <title> Towards the automatic numerical solution of partial differential equations. </title> <journal> Math. Comput. Simul., </journal> <volume> 31 </volume> <pages> 325-332, </pages> <year> 1989. </year>
Reference-contexts: The RPI system <ref> [139] </ref> is a mathematical software package for the adaptive solution of parabolic PDEs in one- and two-space dimensions by finite element procedures that automatically refine and coarsen computational meshes, vary the degree of the piecewise polynomials basis, and, in one dimension, move the computational mesh. <p> An important use of SACs is in the generation and manipulation of Jacobian matrices during the solution of nonlinear systems of equations. Hence SACs as well as recent automatic differentiation techniques can replace error-prone hand manipulation or finite difference oriented schemes contaminated by roundoff 2 ; see [41], <ref> [139] </ref>, [191] plus articles and references in [91]. By providing the framework for specifying the mathematical problem in a manner close to the standard scientific notation, SACs approach satisfying an important PSE function, that is, providing communication in the user's own terms. <p> Still, the effective use of parallel computers for several computations is an active research topic. For example, many numerical computations deal with sparse data structures, incorporate adaptive algorithms, etc. The efficient implementation of such algorithms on parallel architectures is a hard problem [23], <ref> [139] </ref>, [196]. Some of the difficulties are similar to those encountered when dealing with the parallelization of symbolic computations. As massively parallel architectures mature, studies of scalability for mathematical and scientific libraries, software tools, and communication and I/O libraries should also intensify [130]. <p> P SEs have also been created for pure mathematics (group theory [34]); partial differential equations [17], <ref> [139] </ref>; general relativity (SHEEP [80]); and numerical analysis and control of precision of arithmetic calculations (ACRITH [125], AQUARELS [67]). EVE [18] is an object-centered knowledge-based PDE solver, constructed around the MODULEF environment.
Reference: [140] <editor> A. Noor, I. Elishakoff, and G. Hulbert, editors. </editor> <booktitle> Symbolic Computations and their Impact on Mechanics, volume PVP-205. The American Society of Mechanical Engineers, </booktitle> <address> New York, </address> <year> 1990. </year>
Reference-contexts: For the impact of computational science PSEs on science and engineering, see [81], [107]. For the impact of PSEs on economic industrial activity, see <ref> [140] </ref>, [163], [186]. 2.4 Grand Challenges and Petty Challenges The High Performance Computing and Communications Initiative has popularized the concept of grand challenges for computer science [109], and it is natural to relate PSEs for computational science to these challenges.
Reference: [141] <editor> B. J. Novitski. CADD holdouts. </editor> <booktitle> Architecture, </booktitle> <volume> 80(8) </volume> <pages> 97-99, </pages> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: Architects and civil engineers have been investigating CAD environments, combining knowledge-based engineering, computer graphics [89], geometry and solid modeling, and design optimization, for some time [72], [159]. It is argued that future architectural PSEs could free CAD from its current restrictions <ref> [141] </ref> and enable users to explore completely innovative designs [136], [137]. 3.3.5 Visualization and Graphics Visualization is an integral part of PSEs.
Reference: [142] <institution> Numerical Algorithms Group, </institution> <address> Oxford, England. NAG Library Manual, </address> <year> 1988. </year>
Reference-contexts: As problems increase in complexity, the presence of reliable, efficient and easily assembled software parts becomes essential [168]. High-quality numerical libraries allow the user to concentrate on the higher level issues instead of rewriting software [103], [112], <ref> [142] </ref>. Public depositories (e.g., NETLIB [57]) provide ready access to good quality numerical and other scientific software. Currently, there is intense research and development activity in algorithms and libraries for direct and iterative sparse computations [11], [14], [15], [52], [53], [54], [60], [82], [144], [172], [171], [175].
Reference: [143] <author> J. T. Oden. </author> <title> Smart algorithms and adaptive methods for compressible and incompressible flow: Optimization of the computational process. </title> <editor> In J. P. Mesirov, editor, </editor> <booktitle> Very Large Scale Computation in the 21st Century, </booktitle> <pages> pages 87-99. </pages> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1991. </year>
Reference-contexts: this assumes a high degree of confidence for these routines, demonstrates the necessity for numerical algorithms in a PSE to be reliable, and indicates the importance of current research in error estimation and control, adaptive algorithms and software for the complex problems to which PSEs will be applied [68], [77], <ref> [143] </ref>. 3.3.3 Artificial Intelligence Techniques for efficient problem solving constitute an important topic of artificial intelligence (AI) research [12]. Expert systems constitute a major aspect of AI with respect to problem solving tasks.
Reference: [144] <author> T. C. Oppe, W. D. Joubert, and D. R. Kincaid. </author> <title> An overview of NSPCG: A nonsymmetric preconditioned conjugate gradient package. </title> <journal> Comput. Phys. Commun., </journal> <volume> 53 </volume> <pages> 283-293, </pages> <year> 1989. </year>
Reference-contexts: Public depositories (e.g., NETLIB [57]) provide ready access to good quality numerical and other scientific software. Currently, there is intense research and development activity in algorithms and libraries for direct and iterative sparse computations [11], [14], [15], [52], [53], [54], [60], [82], <ref> [144] </ref>, [172], [171], [175]. Some libraries are developed even further into complete environments, (for example, using graphics and interface languages), bringing them closer to PSE s.
Reference: [145] <author> E. M. Paalvast, A. J. van Gemund, and H. J. Sips. </author> <title> A method for parallel program generation with an application to the Booster language. </title> <booktitle> In Proc. 1990 Int'l. Conf. Supercomput., </booktitle> <pages> pages 457-469, </pages> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: Object-oriented techniques will be useful for rendering PSEs comprehensible and manageable [31], [7]. P SE components are expected to cooperate in problem solving and would benefit from research in concurrent object-oriented programming [8]. In particular, object-oriented programming techniques are gradually becoming more common in computational science [35], [129], [138], <ref> [145] </ref>, [149], [160]. Software Interconnection Technologies. The integration of complex numerical and symbolic systems needs appropriate software interconnection technology and module interconnection languages for the efficient description and control of problem solving.
Reference: [146] <author> G. V. Paolini and P. Santangelo. </author> <title> An interactive graphic tool to plot the structure of large sparse matrices. </title> <journal> In IBM J. Res. Dev. </journal> <volume> [111], </volume> <pages> pages 231-237. </pages> <booktitle> Special Issue on Visual Interpretation of Complex Data. </booktitle>
Reference-contexts: Traditionally, visualization techniques are primarily applied in the pre- or post-processing of the solution process. An important recent advance includes the use of visualization tools to depict sparse matrices in the context of matrix laboratories or other numerical libraries [87], <ref> [146] </ref>, [188]. Often, there is a need to observe and steer the computation during run-time; see for example [28] and [94] and articles in [183].
Reference: [147] <author> B. N. Parlett. </author> <title> Progress in numerical analysis. </title> <journal> SIAM Rev., </journal> <volume> 20(3) </volume> <pages> 443-455, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: That these efforts are of importance to the scientific community is evidenced by the success of matrix laboratory tools such as those described in Section 3.2.1; see also [11], [171]. As argued by B. Parlett in <ref> [147] </ref>, numerical analysis research, is not only directed toward solving state-of-the-art problems but also toward re-evaluation of existing solution methods in light of new developments. For example, novel computer systems have triggered research in algorithmic techniques to exploit vector and parallel computational resources, hierarchical and distributed memories, etc. See [82].
Reference: [148] <author> A. Perronnet. MODULEF: </author> <title> A library of subroutines for finite element analysis. </title> <editor> In R. Glowin-ski and J. L. Lions, editors, </editor> <booktitle> Computing Methods in Applied Sciences and Engineering, 1977, 1, volume 704 of Lecture Notes in Mathematics, </booktitle> <pages> pages 127-153. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1979. </year>
Reference-contexts: Some environments are specialized to particular problem domains: for example, in the areas of industrial engineering design [186] and structural mechanics, combining solid modeling, finite element mesh generation, solution, and postprocessing in [73], <ref> [148] </ref>. P SEs have also been created for pure mathematics (group theory [34]); partial differential equations [17], [139]; general relativity (SHEEP [80]); and numerical analysis and control of precision of arithmetic calculations (ACRITH [125], AQUARELS [67]). EVE [18] is an object-centered knowledge-based PDE solver, constructed around the MODULEF environment.
Reference: [149] <author> R. L. Peskin. </author> <title> Symbolic manipulation in engineering user interface systems. </title> <editor> In Noor et al. </editor> <volume> [140], </volume> <pages> pages 97-111. </pages>
Reference-contexts: In areas such as civil engineering, knowledge based systems are combined with CAD tools to improve the overall design process; see [16] and [24]. Expert systems have been developed for differential equations. We note references [18], [118], [131], <ref> [149] </ref>; Elliptic Expert [62] for the XELLPACK environment [27]; ATHENA for //ELLPACK [105]. Successful use of AI techniques for automatic preparation, execution, and control of numerical experiments has been reported in [2]; other useful references include [32], [38], [44], [95], [187], [81], [106], [107]. <p> P SE components are expected to cooperate in problem solving and would benefit from research in concurrent object-oriented programming [8]. In particular, object-oriented programming techniques are gradually becoming more common in computational science [35], [129], [138], [145], <ref> [149] </ref>, [160]. Software Interconnection Technologies. The integration of complex numerical and symbolic systems needs appropriate software interconnection technology and module interconnection languages for the efficient description and control of problem solving.
Reference: [150] <author> R. L. Peskin, S. S. Walther, and A. M. Froncioni. </author> <title> SMALLTALK The next generation scientific computing interface? In Houstis et al. </title> <booktitle> [106], </booktitle> <pages> pages 257-267. </pages>
Reference-contexts: They are already available commercially and shortly they will become inexpensive enough to be readily available. Some interface system requirements for problem expression, automatic programming, visualization, computational steering, and concurrent computing are discussed in [18], <ref> [150] </ref>. It is expected that the future P SEs will not only assist the modeling and simulation of a particular application but will be used as job simulators or components of process control systems. In any case single-media interfaces have already begun to show serious shortcomings in effective information display.
Reference: [151] <editor> S. R. Petrick, editor. </editor> <booktitle> Proc. Second Symposium on Symbolic and Algebraic Manipulation. </booktitle> <address> Los Angeles, California, </address> <publisher> ACM SIGSAM, ACM Press, </publisher> <address> New York, </address> <year> 1971. </year>
Reference: [152] <author> R. Piessens, E. de Doncker-Kapenga, C. W. Uberhuber, and D. K. Kahaner. Quadpack, </author> <title> A subroutine package for automatic integration. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1983. </year>
Reference-contexts: be solved for the realization of PSEs. 3.3.2 Numerical Analysis The primary contributions of numerical analysis consist in the development of efficient and robust algorithms and their realization into numerical libraries whose fundamental role has been advocated since the early days of scientific computing; see articles in [43] and [56], <ref> [152] </ref>, [162], [165], [166]. As problems increase in complexity, the presence of reliable, efficient and easily assembled software parts becomes essential [168]. High-quality numerical libraries allow the user to concentrate on the higher level issues instead of rewriting software [103], [112], [142].
Reference: [153] <author> C. G. Ponder. </author> <title> Evaluation of Performance Enhancements in algebraic manipulation systems. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <month> August </month> <year> 1988. </year> <note> Also Tech. Rep. UCB 88/438. </note>
Reference-contexts: In addition, SACs are frequently written on Lisp-type languages for which restructuring compiler technology is much less developed. While research for the discovery of better SAC algorithms is continuing, improvements in speed and usability are expected as good compilers for the underlying languages become available <ref> [153] </ref>, [154]; examples are the parallelizing compiler for sequential Scheme [96]; multiprocessing extensions for Lisp [88], [199]; the effort of [75] for constructing a compilation-driven parallel REDUCE system for loosely coupled, distributed architectures.
Reference: [154] <author> C. G. Ponder. </author> <title> Parallel processors and systems for algebraic manipulation: Current work. </title> <booktitle> ACM-SIGSAM, </booktitle> <address> 22(3):21, </address> <year> 1988. </year> <month> 44 </month>
Reference-contexts: In addition, SACs are frequently written on Lisp-type languages for which restructuring compiler technology is much less developed. While research for the discovery of better SAC algorithms is continuing, improvements in speed and usability are expected as good compilers for the underlying languages become available [153], <ref> [154] </ref>; examples are the parallelizing compiler for sequential Scheme [96]; multiprocessing extensions for Lisp [88], [199]; the effort of [75] for constructing a compilation-driven parallel REDUCE system for loosely coupled, distributed architectures.
Reference: [155] <author> J. M. Purtilo. </author> <title> Dynamic software reconfiguration supports scientific problem solving activites. </title> <booktitle> In Gaffney and Houstis [81], </booktitle> <pages> pages 245-254. </pages>
Reference-contexts: Some design goals for the bus are to allow programs to be described and manipulated in terms of minimum specifications and to provide a language for describing module interfaces in 19 a manner that is independent of the application's implementation language; see [55], <ref> [155] </ref>, [157], [158]. Recent systems have begun to address the interconnection problem. As noted in Section 3.2.1 matrix laboratories are built on top of sophisticated mathematical software libraries. Tremendous power is added as it becomes possible to link the systems with numerical libraries written in Fortran or C.
Reference: [156] <author> J. M. Purtilo. </author> <title> A software interconnection technology to support specification of computational environments. </title> <type> Technical Report R-86-1269, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> Sept. </month> <year> 1986. </year>
Reference: [157] <author> J. M. Purtilo. </author> <title> The Polylith software bus. </title> <journal> ACM Trans. Progr. Lang. Syst., </journal> <note> to appear. </note>
Reference-contexts: When code modules are written to solve PDEs, interfaces must be written to link with general purpose numerical software and application codes [42]. A software bus could provide the appropriate connecting infrastructure <ref> [157] </ref>, [156],[158]. Some design goals for the bus are to allow programs to be described and manipulated in terms of minimum specifications and to provide a language for describing module interfaces in 19 a manner that is independent of the application's implementation language; see [55], [155], [157], [158]. <p> the appropriate connecting infrastructure <ref> [157] </ref>, [156],[158]. Some design goals for the bus are to allow programs to be described and manipulated in terms of minimum specifications and to provide a language for describing module interfaces in 19 a manner that is independent of the application's implementation language; see [55], [155], [157], [158]. Recent systems have begun to address the interconnection problem. As noted in Section 3.2.1 matrix laboratories are built on top of sophisticated mathematical software libraries. Tremendous power is added as it becomes possible to link the systems with numerical libraries written in Fortran or C.
Reference: [158] <author> J. M. Purtilo, D. A. Reed, and D. C. Grunwald. </author> <title> Environments for prototyping parallel algorithms. </title> <journal> J. Paral. Dist. Comput., </journal> <volume> 5 </volume> <pages> 421-437, </pages> <year> 1988. </year>
Reference-contexts: appropriate connecting infrastructure [157], [156],<ref> [158] </ref>. Some design goals for the bus are to allow programs to be described and manipulated in terms of minimum specifications and to provide a language for describing module interfaces in 19 a manner that is independent of the application's implementation language; see [55], [155], [157], [158]. Recent systems have begun to address the interconnection problem. As noted in Section 3.2.1 matrix laboratories are built on top of sophisticated mathematical software libraries. Tremendous power is added as it becomes possible to link the systems with numerical libraries written in Fortran or C.
Reference: [159] <author> A. Radford and G. Stevens. </author> <title> CADD Made Easy: A Comprehensive Guide for Architects & Designers. </title> <publisher> McGraw-Hill Book Co., </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: Success on this level will require melding different research communities. Architects and civil engineers have been investigating CAD environments, combining knowledge-based engineering, computer graphics [89], geometry and solid modeling, and design optimization, for some time [72], <ref> [159] </ref>. It is argued that future architectural PSEs could free CAD from its current restrictions [141] and enable users to explore completely innovative designs [136], [137]. 3.3.5 Visualization and Graphics Visualization is an integral part of PSEs.
Reference: [160] <author> F. Rechenmann and B. Rousseau. </author> <title> A development shell for knowledge based systems in scientific computing. </title> <editor> In Houstis et al. </editor> <volume> [107], </volume> <pages> pages 157-173. </pages>
Reference-contexts: P SE components are expected to cooperate in problem solving and would benefit from research in concurrent object-oriented programming [8]. In particular, object-oriented programming techniques are gradually becoming more common in computational science [35], [129], [138], [145], [149], <ref> [160] </ref>. Software Interconnection Technologies. The integration of complex numerical and symbolic systems needs appropriate software interconnection technology and module interconnection languages for the efficient description and control of problem solving.
Reference: [161] <author> W. Renes, M. Vanbegin, P. Van Dooren, and J. </author> <title> Beckers. The MATLAB gateway compiler. A tool for automatic linking of Fortran routines to MATLAB. </title> <booktitle> In IFAC Symp. on CADCS, </booktitle> <pages> pages 95-100, </pages> <address> Swansea, UK, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: The benefits are substantial: first, one has access to an enormous resource of existing Fortran scientific libraries. A recent example is the interfacing of PC-MATLAB with the SLICOT Fortran library (produced by NAG) 9 for automatic control <ref> [161] </ref>, [190]. Second, it is possible to use mature compiler technology for code optimization of these modules in order to obtain high performance on the underlying computing platform [78]. Two-way interconnection is a recent enhancement which allows MATLAB to be used as a computational engine from a C program.
Reference: [162] <author> J. R. Rice. </author> <title> Mathematical Software. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1971. </year>
Reference-contexts: solved for the realization of PSEs. 3.3.2 Numerical Analysis The primary contributions of numerical analysis consist in the development of efficient and robust algorithms and their realization into numerical libraries whose fundamental role has been advocated since the early days of scientific computing; see articles in [43] and [56], [152], <ref> [162] </ref>, [165], [166]. As problems increase in complexity, the presence of reliable, efficient and easily assembled software parts becomes essential [168]. High-quality numerical libraries allow the user to concentrate on the higher level issues instead of rewriting software [103], [112], [142].
Reference: [163] <author> J. R. Rice. </author> <title> Statistical computing: The vanguard of the revolution in education. In D.C. Hoaglin and R.E. Welsh, </title> <editor> editors, </editor> <booktitle> Ninth Interface Symposium on Computer Science and Statistics, </booktitle> <pages> pages 1-4. </pages> <editor> Prindle, Weber & Schmidt, </editor> <address> Boston, </address> <year> 1976. </year>
Reference-contexts: Although the statistical systems of the 1970's seem primitive to us now, they were such an improvement over traditional programming that these PSE s captured the statistical computing market <ref> [163] </ref>. The personal computers and workstations of the 1980's finally provided the computing power to realize the hopes of the early 1960's. <p> For the impact of computational science PSEs on science and engineering, see [81], [107]. For the impact of PSEs on economic industrial activity, see [140], <ref> [163] </ref>, [186]. 2.4 Grand Challenges and Petty Challenges The High Performance Computing and Communications Initiative has popularized the concept of grand challenges for computer science [109], and it is natural to relate PSEs for computational science to these challenges. <p> Examples of such software came from SPSS, SAS, Minitab, BMD, and Pstat; the languages were initially user-friendly interfaces to a library of Fortran statistical subprograms. This software created considerable controversy in statistical education <ref> [163] </ref>, where it was viewed as allowing students to use statistics without understanding it.
Reference: [164] <author> J. R. Rice. </author> <title> Mathematical aspects of scientific software. </title> <editor> In J. R. Rice, editor, </editor> <booktitle> Mathematical Aspects of Scientific Software, volume 14 of The IMA Volumes in Mathematics and its Applications, </booktitle> <pages> pages 1-40. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: Expert systems constitute a major aspect of AI with respect to problem solving tasks. From early on, polyalgorithms and automatic algorithm selection procedures were recognized as important to the development of efficient and reliable numerical software <ref> [164] </ref>. With the proliferation of solution methods, it becomes clear that the selection process should be largely automated. See [25] for a review of one such project (GAMS) and references to others (NAXPERT, NEXUS, SLADOC).
Reference: [165] <author> J. R. Rice. </author> <title> Mathematical software and ACM publications. </title> <editor> In S. G. Nash, editor, </editor> <booktitle> A History of Scientific Computing, </booktitle> <pages> pages 217-227. </pages> <publisher> ACM Press, Addison Wesley, </publisher> <address> Reading, Mass., </address> <year> 1990. </year>
Reference-contexts: for the realization of PSEs. 3.3.2 Numerical Analysis The primary contributions of numerical analysis consist in the development of efficient and robust algorithms and their realization into numerical libraries whose fundamental role has been advocated since the early days of scientific computing; see articles in [43] and [56], [152], [162], <ref> [165] </ref>, [166]. As problems increase in complexity, the presence of reliable, efficient and easily assembled software parts becomes essential [168]. High-quality numerical libraries allow the user to concentrate on the higher level issues instead of rewriting software [103], [112], [142].
Reference: [166] <author> J. R. Rice. </author> <title> Numerical Methods, Software and Analysis. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <note> second edition, </note> <year> 1992. </year>
Reference-contexts: the realization of PSEs. 3.3.2 Numerical Analysis The primary contributions of numerical analysis consist in the development of efficient and robust algorithms and their realization into numerical libraries whose fundamental role has been advocated since the early days of scientific computing; see articles in [43] and [56], [152], [162], [165], <ref> [166] </ref>. As problems increase in complexity, the presence of reliable, efficient and easily assembled software parts becomes essential [168]. High-quality numerical libraries allow the user to concentrate on the higher level issues instead of rewriting software [103], [112], [142].
Reference: [167] <author> J. R. Rice and R. F. Boisvert. </author> <title> Solving Elliptic Problems using ELLPACK. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: Temporal integration, within a method-of-lines framework, uses either backward difference methods or a variant of the singly implicit Runge-Kutta methods. A high-level user interface facilitates the use of this system. Another well-known PDE system is ELLPACK <ref> [167] </ref>. The system was designed to solve second-order elliptic PDEs in two and three dimensions and to evaluate software for such computations. It follows a modular programming paradigm which is supported by a domain-specific PDE language and a variety of elliptic PDE solvers.
Reference: [168] <author> J. R. Rice and H. D. Schwetman. </author> <title> Interface issues in a software parts technology. </title> <booktitle> In ITT Proc. Workshop on Reusability in Programming, </booktitle> <pages> pages 129-137, </pages> <year> 1983. </year> <note> Reprinted in Software Reusability, </note> <editor> (P. Freeman, ed.), </editor> <publisher> IEEE Tutorial, Computer Soc. Press, </publisher> <year> 1987, </year> <pages> pp. 96-104. </pages> <note> Revised version in Software Reusability, </note> <editor> (T. Biggerstaff and A. J. Perlis, eds.), </editor> <publisher> ACM Press, </publisher> <year> 1989, </year> <pages> pp. 125-139. </pages>
Reference-contexts: As problems increase in complexity, the presence of reliable, efficient and easily assembled software parts becomes essential <ref> [168] </ref>. High-quality numerical libraries allow the user to concentrate on the higher level issues instead of rewriting software [103], [112], [142]. Public depositories (e.g., NETLIB [57]) provide ready access to good quality numerical and other scientific software.
Reference: [169] <author> M. Rosing and R. Schnabel. </author> <title> An overview of DINO anew language for numerical computation on distributed memory multiprocessors. </title> <editor> In G. Rodrigue, editor, </editor> <booktitle> Proc. Third SIAM Conf. Parallel Processing for Sci. Comput., </booktitle> <pages> pages 312-316, </pages> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1987. </year>
Reference-contexts: Some of the systems described earlier already provide their own language. New languages are also being proposed, some specifically directed toward scientific computation while object-oriented languages such as C++ gain currency in the scientific computation area [59], [101], [128], [133], [134], [63], <ref> [169] </ref>, [198]. The development of compilers and other tools for these languages and their implementation on target architectures is another important activity; see [120] and articles in [85]. One criticism of symbolic systems is that they are slow. The reasons for this are manifold.
Reference: [170] <author> Y. Saad. </author> <title> An overview of Krylov subspace methods with applications to control problems. </title> <editor> In M. A. Kaashoek, J. H. van Schuppen, and A. C. Ran, editors, </editor> <title> Signal Processing, Scatter 45 ing, Operator Theory, and Numerical Methods. </title> <booktitle> Proceedings of the international symposium MTNS-89, </booktitle> <volume> vol III, </volume> <pages> pages 401-410, </pages> <address> Boston, 1990. </address> <publisher> Birkhauser. </publisher>
Reference-contexts: This is certainly true for areas such as computational fluid dynamics, where resolution requirements demand sparse direct or iterative solvers, and is gradually becoming necessary in areas such as automatic control [127], <ref> [170] </ref>. Matrix laboratories for sparse data structures have been slow in coming, reflecting the less-developed state of the numerical library technology for sparse computations. Fortunately, as discussed in Section 3.3.2, progress has been made in that area recently to the benefit of matrix laboratories [87].
Reference: [171] <author> Y. Saad. SPARSKIT: </author> <title> A basic tool kit for sparse matrix computation. </title> <type> Technical Report 1029, </type> <institution> Center for Supercomputing Research and Development, University of Illinois at Urbana-Champaign, </institution> <month> August </month> <year> 1990. </year>
Reference-contexts: Public depositories (e.g., NETLIB [57]) provide ready access to good quality numerical and other scientific software. Currently, there is intense research and development activity in algorithms and libraries for direct and iterative sparse computations [11], [14], [15], [52], [53], [54], [60], [82], [144], [172], <ref> [171] </ref>, [175]. Some libraries are developed even further into complete environments, (for example, using graphics and interface languages), bringing them closer to PSE s. <p> That these efforts are of importance to the scientific community is evidenced by the success of matrix laboratory tools such as those described in Section 3.2.1; see also [11], <ref> [171] </ref>. As argued by B. Parlett in [147], numerical analysis research, is not only directed toward solving state-of-the-art problems but also toward re-evaluation of existing solution methods in light of new developments.
Reference: [172] <author> Y. Saad. </author> <title> Krylov subspace methods for supercomputers. </title> <journal> SIAM J. Sci. Stat. Comput., </journal> <volume> 10(6) </volume> <pages> 1200-1232, </pages> <month> Nov. </month> <year> 1989. </year>
Reference-contexts: Public depositories (e.g., NETLIB [57]) provide ready access to good quality numerical and other scientific software. Currently, there is intense research and development activity in algorithms and libraries for direct and iterative sparse computations [11], [14], [15], [52], [53], [54], [60], [82], [144], <ref> [172] </ref>, [171], [175]. Some libraries are developed even further into complete environments, (for example, using graphics and interface languages), bringing them closer to PSE s.
Reference: [173] <author> N. Sagawa, D.P. Rinn, and N.J. Hurley. </author> <title> An integrated problem solving environment for numerical simulation of engineering problems. </title> <booktitle> In Gaffney and Houstis [81], </booktitle> <pages> pages 191-199. </pages>
Reference-contexts: DEQSOL supports finite difference and finite element discretizations of time-dependent PDEs 12 [122]. It includes a very high level specification language, an interactive/visual user interface for PDE problem specification, automatic generation of sequential or vector code, debugging, diagnosis, and visualization of numerical simulation of PDE problems; see also [123], <ref> [173] </ref>, [189]. ALPAL is a P SE for several PDE-based computations [40].
Reference: [174] <author> F. Schwarz. </author> <title> Symmetries of differential equations: From Sophus Lie to Computer Algebra. </title> <journal> SIAM Review, </journal> <volume> 30(3) </volume> <pages> 450-481, </pages> <month> Sept. </month> <year> 1988. </year>
Reference-contexts: They can perform analytical manipulations before the application of numerical techniques; these manipulations are useful but also tedious and error prone if done manually. This preprocessing leads to better understanding of the mathematical problem and important simplifications ([84], <ref> [174] </ref>) and selection of proper solution procedures [61]. SAC systems provide the framework for describing equations and translating them into a suitable format for manipulation in subsequent phases.
Reference: [175] <author> M. K. Seager. </author> <title> A SLAP for the masses. </title> <editor> In G. F. Carey, editor, </editor> <booktitle> Parallel Supercomputing: Methods, Algorithms and Applications, </booktitle> <pages> pages 135-155. </pages> <publisher> John Wiley & Sons, </publisher> <address> Chichester, </address> <year> 1989. </year>
Reference-contexts: Public depositories (e.g., NETLIB [57]) provide ready access to good quality numerical and other scientific software. Currently, there is intense research and development activity in algorithms and libraries for direct and iterative sparse computations [11], [14], [15], [52], [53], [54], [60], [82], [144], [172], [171], <ref> [175] </ref>. Some libraries are developed even further into complete environments, (for example, using graphics and interface languages), bringing them closer to PSE s.
Reference: [176] <author> G. Sewell. </author> <title> Analysis of Finite Element Method-PDE/PROTRAN. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: The architecture of the system is based on a finite element kernel defined through well-known finite element data structures and interfaces. The PDE2D system <ref> [176] </ref> is for the numerical solution of nonlinear elliptic, parabolic, and eigenvalue PDE problems in two dimensions using the Galerkin method with adaptive meshes. The system uses PROTRAN ([9],[113]) to drive the computations and to input/output the PDE data.
Reference: [177] <author> N. Sharma. </author> <title> Generating finite element programs for Warp machine. </title> <editor> In Bau et al. </editor> <volume> [21], </volume> <pages> pages 93-102. </pages>
Reference-contexts: Another important effort, spanning many years of development, is in building P-FINGER, as system for automating finite element analysis using symbolic and numerical techniques and mapping onto shared and distributed memory multiprocessors <ref> [177] </ref>, [178], [194]. Much progress has been made in the area of PSE s for electronic CAD.
Reference: [178] <author> N. Sharma and P. S. Wang. </author> <title> Generating finite element programs for shared memory multiprocessors. </title> <editor> In Noor et al. </editor> <volume> [140], </volume> <pages> pages 63-79. </pages>
Reference-contexts: Another important effort, spanning many years of development, is in building P-FINGER, as system for automating finite element analysis using symbolic and numerical techniques and mapping onto shared and distributed memory multiprocessors [177], <ref> [178] </ref>, [194]. Much progress has been made in the area of PSE s for electronic CAD.
Reference: [179] <author> B. Shneiderman. </author> <title> Overcoming limitations imposed by current programming languages. </title> <editor> In Jernigan et al. </editor> <volume> [116], </volume> <pages> pages 253-275. </pages>
Reference-contexts: There exist several projects for interconnecting SACs with numerical software libraries (e.g., IRENA and INTERCALL to link REDUCE and Mathematica with the NAG library [33], [50], [51]). Language and Compiler Technology. The important role of language in the problem solving process is widely recognized [29], <ref> [179] </ref>. Some of the systems described earlier already provide their own language. New languages are also being proposed, some specifically directed toward scientific computation while object-oriented languages such as C++ gain currency in the scientific computation area [59], [101], [128], [133], [134], [63], [169], [198].
Reference: [180] <editor> H. A. Simon. </editor> <booktitle> The Sciences of the Artificial. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <note> second edition, </note> <year> 1981. </year>
Reference-contexts: Their design, maintenance, and evolution will require the application of software engineering techniques such as modularization, decomposability, and information hiding, captured, for example in the context of object-oriented programming, hierarchical representation, and software reuse [31], <ref> [180] </ref>. In the next sections we discuss a few examples of PSEs and their infrastructure components. 3.2 Three Scientific Problem Solving Environments One thesis of this report is that problem solving environments can and will revolutionize many scientific computing activities.
Reference: [181] <author> Soft Waterhouse, Inc., </author> <title> Honolulu. DERIVE User Manual, </title> <booktitle> 3rd edition, </booktitle> <year> 1989. </year>
Reference-contexts: elaborate graphics was commonplace, and expert systems help (which this community of users needs particularly badly) was being developed and introduced. 3.3 Component Areas 3.3.1 Symbolic and Algebraic Computing Examples of symbolic and algebraic computing systems (SACs) are MACSYMA [70], [132], REDUCE [97], [98], Maple [37], Scratchpad II [115], DERIVE <ref> [181] </ref>, and Mathematica [1], [197]. Reference 13 [99] provides several interesting observations on the development of SAC systems in relation to other areas of computer science. A recent important report summarizes a wealth of information about current and future applications of SAC technology [100].
Reference: [182] <author> N. M. Soiffer. </author> <title> The design of a user interface for computer algebra systems. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <address> CA, </address> <year> 1991. </year>
Reference-contexts: Another important topic is that of the interface of SACs with users and other systems. Examples include sophisticated graphics, output of Fortran code or L A T E X expressions, and connections with foreign environments [76], [117], <ref> [182] </ref>, [184], [193]. The data structures and computations used by SAC systems are very demanding of the computer system, so that the potential of parallel computation should be exploited. In the same 2. <p> Overall, we note that by their very nature, SACs come very close to the PSE idea; see for example [70], <ref> [182, Section 8.2.5] </ref>.
Reference: [183] <author> F. Szelenyi and V. Zecca. </author> <title> Visualizing parallel execution of FORTRAN programs. </title> <journal> In IBM J. Res. Dev. </journal> <volume> [111], </volume> <pages> pages 270-282. </pages> <booktitle> Special Issue on Visual Interpretation of Complex Data. </booktitle>
Reference-contexts: An important recent advance includes the use of visualization tools to depict sparse matrices in the context of matrix laboratories or other numerical libraries [87], [146], [188]. Often, there is a need to observe and steer the computation during run-time; see for example [28] and [94] and articles in <ref> [183] </ref>. Furthermore, the introduction of parallel computing and its realization on varied parallel architectures has necessitated the collection of run-time data that show the performance and flow of parallel computations; see for example [183]. Graphical representation of these data is the only way to perceive changes and take appropriate actions. <p> to observe and steer the computation during run-time; see for example [28] and [94] and articles in <ref> [183] </ref>. Furthermore, the introduction of parallel computing and its realization on varied parallel architectures has necessitated the collection of run-time data that show the performance and flow of parallel computations; see for example [183]. Graphical representation of these data is the only way to perceive changes and take appropriate actions. We predict that future PSEs will allow users to visualize their computation. The symbolic representation of three dimensional post-processing input data is impractical.
Reference: [184] <author> H. Tan. </author> <title> Symbolic derivation of material property matrices in finite element analysis. </title> <editor> In Bau et al. </editor> <volume> [21], </volume> <pages> pages 111-116. </pages>
Reference-contexts: Systems have been built for automatically writing code to solve elliptic differential equations in general coordinates based on finite-difference/finite-volume approximation; for time dependent problems [64], and for generating finite element code [76], <ref> [184] </ref>, [193]. Another use of symbolic algebra tools for P SEs is in stability investigations of finite-difference approximations to differential equations [65], [83], [185]. An important use of SACs is in the generation and manipulation of Jacobian matrices during the solution of nonlinear systems of equations. <p> Another important topic is that of the interface of SACs with users and other systems. Examples include sophisticated graphics, output of Fortran code or L A T E X expressions, and connections with foreign environments [76], [117], [182], <ref> [184] </ref>, [193]. The data structures and computations used by SAC systems are very demanding of the computer system, so that the potential of parallel computation should be exploited. In the same 2.
Reference: [185] <author> M. Thune. </author> <title> Automatic GKS stability analysis. </title> <journal> SIAM J. Sci. Stat. Comput., </journal> <volume> 7(3) </volume> <pages> 959-977, </pages> <month> July </month> <year> 1986. </year>
Reference-contexts: Another use of symbolic algebra tools for P SEs is in stability investigations of finite-difference approximations to differential equations [65], [83], <ref> [185] </ref>. An important use of SACs is in the generation and manipulation of Jacobian matrices during the solution of nonlinear systems of equations.
Reference: [186] <author> S.-S. Tong. </author> <title> Coupling symbolic manipulation and numerical simulation for complex engineering designs. </title> <journal> Math. Comput. Simul., </journal> <volume> 31 </volume> <pages> 419-430, </pages> <year> 1989. </year>
Reference-contexts: For the impact of computational science PSEs on science and engineering, see [81], [107]. For the impact of PSEs on economic industrial activity, see [140], [163], <ref> [186] </ref>. 2.4 Grand Challenges and Petty Challenges The High Performance Computing and Communications Initiative has popularized the concept of grand challenges for computer science [109], and it is natural to relate PSEs for computational science to these challenges. <p> Several environments which incorporate some of the characteristics outlined above were already reviewed in Section 3.2; see also [25] for some comparisons. Some environments are specialized to particular problem domains: for example, in the areas of industrial engineering design <ref> [186] </ref> and structural mechanics, combining solid modeling, finite element mesh generation, solution, and postprocessing in [73], [148].
Reference: [187] <author> S.-S. Tong. </author> <title> Integration of symbolic and numerical methods for optimizing complex engineering systems. </title> <booktitle> In Gaffney and Houstis [81], </booktitle> <pages> pages 3-18. </pages>
Reference-contexts: We note references [18], [118], [131], [149]; Elliptic Expert [62] for the XELLPACK environment [27]; ATHENA for //ELLPACK [105]. Successful use of AI techniques for automatic preparation, execution, and control of numerical experiments has been reported in [2]; other useful references include [32], [38], [44], [95], <ref> [187] </ref>, [81], [106], [107]. It must be noted, however, that the feasibility of constructing systems able to handle general PDEs has still to be demonstrated. 3.3.4 Computational Geometry Geometry is a critical component for most applications.
Reference: [188] <author> A. Tuchman and M. Berry. </author> <title> Matrix Visualization in the Design of Numerical Algorithms. </title> <journal> ORSA Journal of Computing, </journal> <volume> 2(1) </volume> <pages> 84-92, </pages> <year> 1990. </year> <month> 46 </month>
Reference-contexts: Traditionally, visualization techniques are primarily applied in the pre- or post-processing of the solution process. An important recent advance includes the use of visualization tools to depict sparse matrices in the context of matrix laboratories or other numerical libraries [87], [146], <ref> [188] </ref>. Often, there is a need to observe and steer the computation during run-time; see for example [28] and [94] and articles in [183].
Reference: [189] <author> Y. Umetani, C. Konno, and T. Ohta. </author> <title> Visual PDEQSOL: A visual and interactive environment for numerical simulation. </title> <booktitle> In Gaffney and Houstis [81], </booktitle> <pages> pages 259-267. </pages>
Reference-contexts: It includes a very high level specification language, an interactive/visual user interface for PDE problem specification, automatic generation of sequential or vector code, debugging, diagnosis, and visualization of numerical simulation of PDE problems; see also [123], [173], <ref> [189] </ref>. ALPAL is a P SE for several PDE-based computations [40].
Reference: [190] <author> A. van den Boom, A. Brown, F. Dumortier, A. Geurts, S. Hammarling, R. Kool, M. Vanbegin, P. Van Dooren, and S. Van Huffel. SLICOT, </author> <title> a subroutine library for control and system theory. </title> <booktitle> In Preprints IFAC Symp. on CADCS, </booktitle> <pages> pages 89-94, </pages> <address> Swansea, UK, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: The benefits are substantial: first, one has access to an enormous resource of existing Fortran scientific libraries. A recent example is the interfacing of PC-MATLAB with the SLICOT Fortran library (produced by NAG) 9 for automatic control [161], <ref> [190] </ref>. Second, it is possible to use mature compiler technology for code optimization of these modules in order to obtain high performance on the underlying computing platform [78]. Two-way interconnection is a recent enhancement which allows MATLAB to be used as a computational engine from a C program.
Reference: [191] <author> P. van den Heuvel, J. A. van Hulzen, and V. V. Goldman. </author> <title> Automatic generation of FORTRAN-coded Jacobians and Hessians. </title> <booktitle> In Davenport [46], </booktitle> <pages> pages 120-131. </pages>
Reference-contexts: An important use of SACs is in the generation and manipulation of Jacobian matrices during the solution of nonlinear systems of equations. Hence SACs as well as recent automatic differentiation techniques can replace error-prone hand manipulation or finite difference oriented schemes contaminated by roundoff 2 ; see [41], [139], <ref> [191] </ref> plus articles and references in [91]. By providing the framework for specifying the mathematical problem in a manner close to the standard scientific notation, SACs approach satisfying an important PSE function, that is, providing communication in the user's own terms.
Reference: [192] <author> G. Vanecek. Protosolid: </author> <title> An inside look. </title> <type> Technical Report CAPO-89-26, </type> <institution> Dept. Comput. Sci., Purdue University, </institution> <month> Nov. </month> <year> 1989. </year>
Reference-contexts: More distressing to those trying to build versatile systems, is that most of the geometry manipulation capability is deeply buried within massive software systems. There have been efforts recently to create geometry systems that can interface naturally with various levels of application, for example, the Protosolid system <ref> [192] </ref>. There are also important efforts to provide design shells for large structural analysis systems (e.g., the commercial products IDEAS and Adams), which provide more natural and simple-to-use geometry as well as other benefits.
Reference: [193] <author> P. Wang. </author> <title> Finger: A symbolic system for automatic generation of numerical programs in finite element analysis. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 2 </volume> <pages> 305-316, </pages> <year> 1986. </year>
Reference-contexts: Systems have been built for automatically writing code to solve elliptic differential equations in general coordinates based on finite-difference/finite-volume approximation; for time dependent problems [64], and for generating finite element code [76], [184], <ref> [193] </ref>. Another use of symbolic algebra tools for P SEs is in stability investigations of finite-difference approximations to differential equations [65], [83], [185]. An important use of SACs is in the generation and manipulation of Jacobian matrices during the solution of nonlinear systems of equations. <p> Another important topic is that of the interface of SACs with users and other systems. Examples include sophisticated graphics, output of Fortran code or L A T E X expressions, and connections with foreign environments [76], [117], [182], [184], <ref> [193] </ref>. The data structures and computations used by SAC systems are very demanding of the computer system, so that the potential of parallel computation should be exploited. In the same 2.
Reference: [194] <author> P. S. Wang. </author> <title> Applying advanced computing techniques in finite element analysis. </title> <editor> In Noor et al. </editor> <volume> [140], </volume> <pages> pages 45-61. </pages>
Reference-contexts: Another important effort, spanning many years of development, is in building P-FINGER, as system for automating finite element analysis using symbolic and numerical techniques and mapping onto shared and distributed memory multiprocessors [177], [178], <ref> [194] </ref>. Much progress has been made in the area of PSE s for electronic CAD.
Reference: [195] <author> S. M. Watt. </author> <title> Bounded parallelism and computer algebra. </title> <type> PhD thesis, </type> <institution> Univ. Waterloo, 1986. Avail. Univ. Waterloo CS dept. </institution> <type> tech. rep. </type> <institution> CS-86-12. </institution>
Reference-contexts: There have also been efforts to provide implementations of Lisp-based systems such as REDUCE in C by building a translator from REDUCE source to C [74]. See also [36] and <ref> [195] </ref> for additional work on the multiprocessing of SACs. As most scientific/numeric processing is done with Fortran, much time in symbolic systems is spent in special functions (e.g. GENTRAN) to generate Fortran code.
Reference: [196] <author> H. A. G. Wijshoff. </author> <title> Implementing sparse BLAS primitives on concurrent/vector processors: A case study. </title> <type> Technical Report 843, </type> <institution> Center for Supercomputing Research and Development, University of Illinois at Urbana-Champaign, </institution> <month> Jan. </month> <year> 1989. </year>
Reference-contexts: Still, the effective use of parallel computers for several computations is an active research topic. For example, many numerical computations deal with sparse data structures, incorporate adaptive algorithms, etc. The efficient implementation of such algorithms on parallel architectures is a hard problem [23], [139], <ref> [196] </ref>. Some of the difficulties are similar to those encountered when dealing with the parallelization of symbolic computations. As massively parallel architectures mature, studies of scalability for mathematical and scientific libraries, software tools, and communication and I/O libraries should also intensify [130].
Reference: [197] <author> S. Wolfram. </author> <title> Mathematica: A System for Doing Mathematics by Computer. </title> <publisher> Addison-Wesley, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: Indeed, as of this writing, PSEs are not common in science and engineering except in limited areas, such as computer-aided design (CAD) systems for structural engineering and electronics; see for example [19]. Still, the success of Mathematica <ref> [197] </ref> and Matlab [138] shows that some other science PSE markets, such as computational science and engineering education, are large enough to justify the requisite investments. For a view of current developments, see recent conference proceedings [106], [107], [81] as well as Section 3. <p> and expert systems help (which this community of users needs particularly badly) was being developed and introduced. 3.3 Component Areas 3.3.1 Symbolic and Algebraic Computing Examples of symbolic and algebraic computing systems (SACs) are MACSYMA [70], [132], REDUCE [97], [98], Maple [37], Scratchpad II [115], DERIVE [181], and Mathematica [1], <ref> [197] </ref>. Reference 13 [99] provides several interesting observations on the development of SAC systems in relation to other areas of computer science. A recent important report summarizes a wealth of information about current and future applications of SAC technology [100].
Reference: [198] <author> T. Zimmermann, Y. Dubois-Pelerin, and P. Bomme. </author> <title> Object-oriented finite element programming: I. Governing principles. </title> <journal> Comput. Meth. Appl. Mech. Engrg., </journal> <volume> 98 </volume> <pages> 291-303, </pages> <year> 1992. </year>
Reference-contexts: Some of the systems described earlier already provide their own language. New languages are also being proposed, some specifically directed toward scientific computation while object-oriented languages such as C++ gain currency in the scientific computation area [59], [101], [128], [133], [134], [63], [169], <ref> [198] </ref>. The development of compilers and other tools for these languages and their implementation on target architectures is another important activity; see [120] and articles in [85]. One criticism of symbolic systems is that they are slow. The reasons for this are manifold.
Reference: [199] <author> B. Zorn, K. Ho, H. Larus, L. Semenzato, and P. Hilfinger. </author> <title> Multiprocessing extensions in Spur Lisp. </title> <journal> IEEE Software, </journal> <volume> 6(4) </volume> <pages> 41-49, </pages> <month> July </month> <year> 1989. </year> <month> 47 </month>
Reference-contexts: While research for the discovery of better SAC algorithms is continuing, improvements in speed and usability are expected as good compilers for the underlying languages become available [153], [154]; examples are the parallelizing compiler for sequential Scheme [96]; multiprocessing extensions for Lisp [88], <ref> [199] </ref>; the effort of [75] for constructing a compilation-driven parallel REDUCE system for loosely coupled, distributed architectures. There have also been efforts to provide implementations of Lisp-based systems such as REDUCE in C by building a translator from REDUCE source to C [74].
References-found: 199

