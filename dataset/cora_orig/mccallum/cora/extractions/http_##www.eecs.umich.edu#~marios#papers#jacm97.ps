URL: http://www.eecs.umich.edu/~marios/papers/jacm97.ps
Refering-URL: http://www.eecs.umich.edu/~marios/pubs.html
Root-URL: http://www.cs.umich.edu
Title: Optimizing Two-Phase, Level-Clocked Circuitry proper timing: O(V E) time. minimizing the clock period by clock
Author: Alexander T. Ishii Charles E. Leiserson Marios C. Papaefthymiou 
Note: verifying  This research was supported in part by the Defense Advanced Research Projects Agency under Grant N00014-91-J-1698. Alexander Ishii is currently with NEC USA C&C Research Laboratories, Princeton, NJ 08540. Marios Papaefthymiou is currently with the Advanced  
Date: September 10, 1996  
Address: Cambridge, Massachusetts 02139  Ann Arbor, MI 48109-2122.  
Affiliation: MIT Laboratory for Computer Science  Computer Architecture Laboratory, Department of Electrical Engineering and Computer Science, University of Michigan,  
Abstract: We investigate two strategies for reducing the clock period of a two-phase, level-clocked circuit: clock tuning, which adjusts the waveforms that clock the circuit, and retiming, which relocates circuit latches. These methods can be used to convert a circuit with edge-triggered latches into a faster level-clocked one. We model a two-phase circuit as a graph G = (V; E) whose vertex set V is a collection of combinational logic blocks, and whose edge set E is a set of interconnections. Each interconnection passes through zero or more latches, where each latch is clocked by one of two periodic, nonoverlapping waveforms, or phases. We give efficient polynomial-time algorithms for problems involving the timing verification and optimization of two-phase circuitry. Included are algorithms for We give fully polynomial-time approximation schemes for clock period minimization, within any given relative error * &gt; 0, by We generalize most of the results for two-phase clocking schemes to simple multiphase clocking disciplines, including ones with overlapping phases. Typically, the algorithms to verify and optimize the timing of k-phase circuitry are at most a factor of k slower than the corresponding algorithms for two-phase circuitry. Our algorithms have been implemented in Tim, a timing package for two-phase, level-clocked circuitry developed at MIT. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> McGraw-Hill, MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Lemma 3 Algorithm TV terminates in O (V E) time. Proof. The circuit transformation of lines 1-3 runs in O (E) time. The ordering in line 4 can be computed in O (E) time using a topological sort <ref> [1, Section 23.4] </ref>. Lines 4-10 run in O (V E) time, lines 11-16 run in O (V 2 ) time, and lines 17-19 can be performed in O (V E) time using the Bellman-Ford algorithm [1, Section 25.3]. Thus, the total running time of Algorithm TV is O (V E). <p> Lines 4-10 run in O (V E) time, lines 11-16 run in O (V 2 ) time, and lines 17-19 can be performed in O (V E) time using the Bellman-Ford algorithm <ref> [1, Section 25.3] </ref>. Thus, the total running time of Algorithm TV is O (V E). We prove the correctness of Algorithm TV in three lemmas. <p> Define R (v) for all v 2 V H as the length of a shortest (least-weight) path in H from v to t, which is well-defined if H contains no negative-weight cycles <ref> [1, Chapter 25] </ref>, a fact that we shall prove shortly. Assuming that H contains no negative-weight cycles, we can prove Inequalities (22), (23), and (24) by relying on the following basic inequality of shortest paths [1, Chapter 25]: R (u) R (v) + w H (e) (25) for every edge u <p> in H from v to t, which is well-defined if H contains no negative-weight cycles <ref> [1, Chapter 25] </ref>, a fact that we shall prove shortly. Assuming that H contains no negative-weight cycles, we can prove Inequalities (22), (23), and (24) by relying on the following basic inequality of shortest paths [1, Chapter 25]: R (u) R (v) + w H (e) (25) for every edge u e ! v in E H . <p> Proof. To compute the constraints in line 1 of the algorithm, we need to compute the shortest-paths between every pair of vertices in G. This computation can be performed in O (V E + V 2 lg V ) time using Johnson's algorithm for all-pairs shortest-paths <ref> [1, Section 26.3] </ref>. To implement the set Q, we can use a FIFO queue and a flag for each constraint that indicates whether the constraint is in the queue. <p> The running time of Algorithm Retime follows from Lemma 22. 28 7 Approximation schemes for minimum-period retiming In this section we present "fully polynomial-time approximation schemes" for three problems related to both retiming and tuning. A fully polynomial-time approximation scheme <ref> [1] </ref> is an optimization algorithm that takes, in addition to its other input parameters, a parameter * &gt; 0 specifying a relative error. <p> computational expansion that appears in [9]. 42 Unlike the simplified definition presented above, the definition of G CX from [9] makes ref-erence to a base-step function b B that maps pairs (v; k), where v 2 V and k = 1; 0; 1; 2; : : :, to the integers <ref> [1; 0; 1; 2; : : :] </ref>. The integer argument k and the integer result are indexes into the infinite sequence of maximal time intervals over which the clocks of the circuit maintain a constant value.
Reference: [2] <author> M. R. Dagenais and N. C. Rumin. </author> <title> Automatic determination of optimal clocking parameters in synchronous MOS VLSI circuits. </title> <booktitle> In Advanced Research in VLSI: Proc. of the 5th MIT Conference, </booktitle> <pages> pages 19-33, </pages> <year> 1988. </year>
Reference-contexts: We give an O (V E)-time algorithm to solve the tuning problem. Previous algorithms for tuning have either addressed other types of clocking methodologies [4, 28, 32], or been uncharacterized with respect to worst-case running time <ref> [2, 29] </ref>. Another way to optimize a circuit is by retiming: a method for relocating latches within the circuit without affecting the functionality of the circuit. <p> computational expansion that appears in [9]. 42 Unlike the simplified definition presented above, the definition of G CX from [9] makes ref-erence to a base-step function b B that maps pairs (v; k), where v 2 V and k = 1; 0; 1; 2; : : :, to the integers <ref> [1; 0; 1; 2; : : :] </ref>. The integer argument k and the integer result are indexes into the infinite sequence of maximal time intervals over which the clocks of the circuit maintain a constant value.
Reference: [3] <author> G. B. Dantzig, W. Blattner, and M. R. Rao. </author> <title> Finding a cycle in a graph with minimum cost to times ratio with application to a ship routing problem. Theory of Graphs, 1967. </title> <editor> P. Rosenstiehl, editor, Dunod, Paris, and Gordon and Breach, </editor> <address> New York, </address> <pages> pp. 77-84. </pages>
Reference-contexts: This lower bound can be found by solving a "tramp steamer" problem. The tramp steamer problem (also known as the minimum cost-to-time ratio cycle problem) was formulated in <ref> [3] </ref> as follows.
Reference: [4] <author> J. P. Fishburn. </author> <title> Clock skew optimization. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(7) </volume> <pages> 945-951, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: We assume that the gaps fl 0 and fl 1 must be kept fixed and only the duty cycles of the phases can be adjusted. We give an O (V E)-time algorithm to solve the tuning problem. Previous algorithms for tuning have either addressed other types of clocking methodologies <ref> [4, 28, 32] </ref>, or been uncharacterized with respect to worst-case running time [2, 29]. Another way to optimize a circuit is by retiming: a method for relocating latches within the circuit without affecting the functionality of the circuit.
Reference: [5] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability. </title> <editor> W. H. </editor> <publisher> Freeman and Co., </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: This contradiction completes the proof. The set of constraints defined in Lemma 14 form a mixed-integer linear programming problem. Although mixed-integer linear programming is in general NP-hard <ref> [5] </ref>, the simple form of the constraints in the lemma allows the problem to be solved efficiently. In particular, Inequalities (21), (22), (23), and (24) constitute a mixed-integer linear programming problem of the following form.
Reference: [6] <author> L. A. Glasser and D. W. Dobberpuhl. </author> <title> The Design and Analysis of VLSI Circuits. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1985. </year>
Reference-contexts: of time between a falling edge of the first phase and the next rising edge of the second phase, which generally must be long enough to overcome various engineering constraints, such as setup and hold times, the nonzero durations required for clock signals to rise and fall, and clock skew <ref> [6, 33] </ref>. The duty cycle and gap of the second phase are, similarly, denoted by 1 and fl 1 , respectively. The ratio = 1 = 0 is the duty ratio of the clocking scheme. <p> In this paper we give an efficient algorithm to verify the proper timing of circuits that employ two-phase clocking schemes, and we present several other algorithms for optimizing their clock periods. Since an edge-triggered latch can be implemented by two back-to-back level-clocked latches <ref> [6] </ref> our algorithms also provide an automatic way to take edge-triggered circuits and transform them into faster level-clocked ones. In addition, most of our algorithms 1 can be generalized to level-clocked circuits that employ more than two clock phases. <p> The assumption that the minimum propagation delay of a functional element is zero is a common conservative assumption among digital circuit designers. Faster circuits can be designed if minimum propagation delays are allowed to be positive <ref> [6, 29] </ref>, but in this case, computing solutions to the problems addressed in this paper appear to be more difficult.
Reference: [7] <author> M. Hartmann and J. Orlin. </author> <title> Finding minimum cost to time ratio cycles with small integral transit times. </title> <type> Technical Report UNC/OR/TR/91-19, </type> <institution> University of North Carolina, Chapel Hill, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: If t (e) 0 for all e 2 E, then the algorithm from <ref> [7] </ref> can solve the tramp steamer problem in O (T E) time, where T = u2V maxft (e) : u e The following lemma relates the constraints determined by Inequality (8) to the tramp steamer problem. 15 Lemma 11 In O (V E) time, the constraints defined by Inequality (8) can <p> By Inequality (8), we have d (c) (w (c)=2), and hence w (c) P P = 2 e2c s (e) e2c t (e) The proof for the other direction of the claim is similar. Using the algorithm for the tramp steamer problem given in <ref> [7] </ref>, the cycle constraints can be checked in O (V E) time. In order to obtain this running time, we must guarantee that the transit time of any path with jV j edges is O (V ).
Reference: [8] <author> A. T. Ishii. </author> <title> Timing in Level-Clocked Circuits. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1991. </year> <note> Available as MIT/LCS/TR-522. </note>
Reference-contexts: Each latch is clocked either by 0 or 1 . A general framework for the timing verification of level-clocked circuits appears in <ref> [8, 9] </ref>. An example of a two-phase, level-clocked circuit is shown in Figure 2 (a). The integers in the vertices signify propagation delays. <p> This notion of proper timing is "structural", in the sense that we require that a circuit operate correctly regardless of the functions computed by the functional elements. This requirement avoids potential difficulties with computational intractability. The semantics of proper timing are studied in <ref> [8] </ref>. Ishii and Leiserson [9] give a set of "-constraints" that serve as necessary and sufficient conditions for the proper timing of a general class of level-clocked circuits. For two-phase circuits, this general formulation reduces to a much simpler set of necessary and sufficient conditions.
Reference: [9] <author> A. T. Ishii and C. E. Leiserson. </author> <title> A timing analysis of level-clocked circuitry. </title> <booktitle> In Advanced Research in VLSI: Proceedings of the Sixth MIT Conference, </booktitle> <pages> pages 113-130, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Each latch is clocked either by 0 or 1 . A general framework for the timing verification of level-clocked circuits appears in <ref> [8, 9] </ref>. An example of a two-phase, level-clocked circuit is shown in Figure 2 (a). The integers in the vertices signify propagation delays. <p> We give an O (V E)-time algorithm that verifies whether a level-clocked circuit is properly timed by a given two-phase clocking scheme. This result improves the O (E 2 ) bound obtained when the general algorithm from <ref> [9] </ref> is applied to the special case of two-phase, level-clocked circuits. (The bound in [9] is also O (V E), but the circuit model used in that paper represented both functional elements and latches as vertices, and interconnections between them as edges. <p> This result improves the O (E 2 ) bound obtained when the general algorithm from <ref> [9] </ref> is applied to the special case of two-phase, level-clocked circuits. (The bound in [9] is also O (V E), but the circuit model used in that paper represented both functional elements and latches as vertices, and interconnections between them as edges. Translating to the model presented here yields the O (E 2 ) bound. The algorithm in [9] applies to more general circuits and <p> two-phase, level-clocked circuits. (The bound in <ref> [9] </ref> is also O (V E), but the circuit model used in that paper represented both functional elements and latches as vertices, and interconnections between them as edges. Translating to the model presented here yields the O (E 2 ) bound. The algorithm in [9] applies to more general circuits and timing methodologies than the ones considered here, however.) Our next result deals with modifying, or "tuning", the clocking scheme of a circuit|that is, providing the circuit with new clocking waveforms. <p> The section begins with a formal definition of the set of level-clocked circuits to which our results can be applied. We then precisely characterize the timing constraints that need to be satisfied by a properly timed circuit. These constraints are based on the general formulation from <ref> [9] </ref>, but they are substantially simpler due to the additional structure inherent in two-phase, level-clocked circuits. 5 Since we represent circuits in terms of graphs, we first define some graph notations. <p> This notion of proper timing is "structural", in the sense that we require that a circuit operate correctly regardless of the functions computed by the functional elements. This requirement avoids potential difficulties with computational intractability. The semantics of proper timing are studied in [8]. Ishii and Leiserson <ref> [9] </ref> give a set of "-constraints" that serve as necessary and sufficient conditions for the proper timing of a general class of level-clocked circuits. For two-phase circuits, this general formulation reduces to a much simpler set of necessary and sufficient conditions. <p> Figure 4 gives an O (V E)-time algorithm TV for the timing verification problem. This bound improves the O (E 2 ) bound that one obtains by applying the general verification algorithm in <ref> [9] </ref> to two-phase circuits. We analyze the running time of Algorithm TV and then prove its correctness. We first prove a bound on the running time of Algorithm TV. Lemma 3 Algorithm TV terminates in O (V E) time. Proof. <p> Nonsimple multiphase circuits also exhibit many subtleties. A path in such circuits may pass through latches in an arbitrary order, rather than the canonical order assumed in a simple multiphase circuit. Though the proper timing of such circuits can be verified using the analysis and algorithms from <ref> [9] </ref>, the timing optimization of such circuits is possibly more complex. Whether these problems have efficient solutions is a topic for further research. A Appendix In this appendix we prove Proposition 1, the fundamental premise of the algorithms in this paper. The proof is based on the results in [9], and <p> from <ref> [9] </ref>, the timing optimization of such circuits is possibly more complex. Whether these problems have efficient solutions is a topic for further research. A Appendix In this appendix we prove Proposition 1, the fundamental premise of the algorithms in this paper. The proof is based on the results in [9], and a complete understanding of the proof requires familiarity with those results. For convenience, however, we give a brief description of the notions of "computational expansions," "proper timing," and "-constraints" that are the basis of the proof. In this appendix, we adopt the circuit representation of [9]. <p> the results in <ref> [9] </ref>, and a complete understanding of the proof requires familiarity with those results. For convenience, however, we give a brief description of the notions of "computational expansions," "proper timing," and "-constraints" that are the basis of the proof. In this appendix, we adopt the circuit representation of [9]. In that representation, a circuit is a graph G = hV; Ei, where each vertex v 2 V represents either a functional element or a level-clocked latch, and each functional element and level-clocked latch is represented by a distinct element of V . <p> We generally 40 denote by v t a copy of v 2 V that exists due to a change in the output of v, that is caused by a clock transition that occurs at time t. The results of <ref> [9] </ref> are based on the observation that there exists a strong correlation between the operation of G and the operation of the corresponding computational expansion G CX . <p> Furthermore, each v t 2 V CX has associated with it an up-time of t and a down-time of t + (v) . This definition of G CX differs from the definition that appears in <ref> [9] </ref>. The two definitions are equivalent for two-phase circuits, however, as we show later in Lemma 29. <p> Intuitively, a level-clocked circuit is properly timed if whenever a latch holds a value (i.e., whenever its clock input is Low), it holds the same value it would in an identical circuit in which all functional elements have zero propagation delay. Ishii and Leiserson <ref> [9] </ref> show that a level-clocked circuit is properly timed if and only if its computational expansion is properly timed. <p> Conversely, they show that if, for all paths between latches in the computational expansion, the propagation time does not exceed this "up-to-down" time, then the circuit is properly timed (see Theorem 4.1 of <ref> [9] </ref>). The infinite set of linear inequalities that compare up-to-down times with propagation delays is called the set of -constraints for the circuit. <p> Proof. Since there is a one-to-one correspondence between circuit components in a two-phase, level-clocked circuit and vertices in the graph representation from <ref> [9] </ref>, and t (p) is exactly equal to the value denoted by the expression "t 00 t" in Lemma 28, the proposition follows from Lemma 28 and Theorem 4.1 from [9]. <p> there is a one-to-one correspondence between circuit components in a two-phase, level-clocked circuit and vertices in the graph representation from <ref> [9] </ref>, and t (p) is exactly equal to the value denoted by the expression "t 00 t" in Lemma 28, the proposition follows from Lemma 28 and Theorem 4.1 from [9]. All that remains to be shown is that the definition of G CX is, in fact, equivalent to the definition of the computational expansion that appears in [9]. 42 Unlike the simplified definition presented above, the definition of G CX from [9] makes ref-erence to a base-step function b B <p> the value denoted by the expression "t 00 t" in Lemma 28, the proposition follows from Lemma 28 and Theorem 4.1 from <ref> [9] </ref>. All that remains to be shown is that the definition of G CX is, in fact, equivalent to the definition of the computational expansion that appears in [9]. 42 Unlike the simplified definition presented above, the definition of G CX from [9] makes ref-erence to a base-step function b B that maps pairs (v; k), where v 2 V and k = 1; 0; 1; 2; : : :, to the integers [1; 0; 1; 2; : : <p> follows from Lemma 28 and Theorem 4.1 from <ref> [9] </ref>. All that remains to be shown is that the definition of G CX is, in fact, equivalent to the definition of the computational expansion that appears in [9]. 42 Unlike the simplified definition presented above, the definition of G CX from [9] makes ref-erence to a base-step function b B that maps pairs (v; k), where v 2 V and k = 1; 0; 1; 2; : : :, to the integers [1; 0; 1; 2; : : :]. <p> If b B (v; i) &lt; i, then the value output by v changes because of a clock transition that occured at a step earlier than i. Given a circuit G = hV; Ei, the computational expansion <ref> [9] </ref> is defined to be hV CX ; E CX i, where V CX = fv k : v 2 V and b B (v; k) = kg, and 8 &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; <p> The definition is somewhat complex, due to the fact that the definition from <ref> [9] </ref> applies to a more general class of circuits. The following lemma shows, however, that for two-phase, level-clocked circuits, this definition is equivalent to the definition presented in the beginning of this appendix.
Reference: [10] <author> A. T. Ishii, C. E. Leiserson, and M. C. Papaefthymiou. </author> <title> Optimizing two-phase, </title> <booktitle> level-clocked circuitry. In Advanced Research in VLSI and Parallel Systems: Proc. of the 1992 Brown/MIT Conference, </booktitle> <pages> pages 245-264. </pages> <publisher> MIT Press, </publisher> <month> March </month> <year> 1992. </year>
Reference-contexts: They use this algorithm as a subroutine to solve the retiming and symmetric tuning problem. They also determine a set of constraints for the retiming problem, and they describe a Bellman-Ford-like algorithm for solving the constraints. Early versions of our work appear in <ref> [10, 25] </ref>. 2 Constraints for proper timing In this section we give necessary and sufficient conditions for a two-phase, level-clocked circuit to be properly timed by a given clocking scheme. The section begins with a formal definition of the set of level-clocked circuits to which our results can be applied.
Reference: [11] <author> A. T. Ishii, C. E. Leiserson, and M. C. Papaefthymiou. </author> <title> Polynomial-time algorithms for optimizing two-phase, level-clocked circuitry. </title> <type> Unpublished manuscript, </type> <institution> MIT, </institution> <year> 1992. </year>
Reference-contexts: These results are based on a characterization of the feasible clock periods of retimed level-clocked circuits and are described in <ref> [11, 23] </ref>. Because these results are primarily theoretical, we do not present them here, but rather, we focus instead on the more practical approximation algorithms. In independent work, Lockyear and Ebeling [16] have also obtained algorithms for retiming multiphase, level-clocked circuits. <p> Fully polynomial-time algorithms for the exact solution of these two problems and the problem of general retiming and tuning, without any integrality constraint on the propagation delays, are presented in <ref> [11, 23] </ref>. 39 An important extension of our work is the incorporation of precharged gates, nonuniform propagation delays, and nonzero minimum propagation delays to our circuit model.
Reference: [12] <author> C. E. Leiserson, F. M. Rose, and J. B. Saxe. </author> <title> Optimizing synchronous circuitry by retiming. </title> <booktitle> 3rd Caltech Conference on VLSI, </booktitle> <year> 1983. </year> <editor> R. Bryant, </editor> <publisher> ed., </publisher> <pages> pp. 87-116. </pages>
Reference-contexts: Another way to optimize a circuit is by retiming: a method for relocating latches within the circuit without affecting the functionality of the circuit. Retiming has been well studied in the context of edge-triggered circuits <ref> [12, 13, 15, 24] </ref> and has been the subject of study in the context of single-phase, level-clocked circuits [17, 30]. We extend the retiming technique to encompass the optimization of two-phase, level-clocked circuits. We consider two problems related to retiming.
Reference: [13] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Optimizing synchronous systems. </title> <journal> Journal of VLSI and Computer Systems, </journal> <volume> 1(1) </volume> <pages> 41-67, </pages> <year> 1983. </year>
Reference-contexts: Another way to optimize a circuit is by retiming: a method for relocating latches within the circuit without affecting the functionality of the circuit. Retiming has been well studied in the context of edge-triggered circuits <ref> [12, 13, 15, 24] </ref> and has been the subject of study in the context of single-phase, level-clocked circuits [17, 30]. We extend the retiming technique to encompass the optimization of two-phase, level-clocked circuits. We consider two problems related to retiming. <p> Like several previous retiming algorithms <ref> [13, 30] </ref>, our algorithm casts retiming for a symmetric clocking scheme as a mixed-integer linear program. The retiming transformation relocates the latches in a circuit G without changing the functionality of the circuit.
Reference: [14] <author> C. E. Leiserson and J. B. Saxe. </author> <title> A mixed-integer programming problem which is efficiently solvable. </title> <journal> Journal of Algorithms, </journal> <volume> 9 </volume> <pages> 114-128, </pages> <year> 1988. </year>
Reference-contexts: Problem MI can be solved in O (V E + V 2 lg V ) time by applying Algorithm MILP from <ref> [14] </ref>. Thus, we obtain the following theorem. <p> Proof. Algorithm RwSCS in Figure 6 solves the retiming problem with symmetric phases. It simply applies Algorithm MILP from <ref> [14] </ref> to the constraints in Lemma 14. <p> constraints described by Inequalities (21), (22), (23), and (24): r (u) r (v) w (e) for all u ! v 2 E R (u) R (v) w (e) k e r (v) R (v) k As with the two-phase constraints, these constraints can be solved using the algorithm MILP from <ref> [14] </ref>. Retiming (with arbitrary clocking schemes). Even when clock phases are not symmetric, we can retime to achieve a given simple k-phase clocking scheme in O (kV 3 ) time. For simple multiphase circuits, inequalities analogous to Inequalities (29) and (30) can be formulated as simple summations.
Reference: [15] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Retiming synchronous circuitry. </title> <journal> Algorithmica, </journal> <volume> 6(1), </volume> <year> 1991. </year> <note> Also available as MIT/LCS/TM-372. 45 </note>
Reference-contexts: Another way to optimize a circuit is by retiming: a method for relocating latches within the circuit without affecting the functionality of the circuit. Retiming has been well studied in the context of edge-triggered circuits <ref> [12, 13, 15, 24] </ref> and has been the subject of study in the context of single-phase, level-clocked circuits [17, 30]. We extend the retiming technique to encompass the optimization of two-phase, level-clocked circuits. We consider two problems related to retiming. <p> With precharged gates, retiming and clock tuning still have efficient algorithmic solutions, but there are many subtleties that arise in the formulation of the constraints. The incorporation of functional elements where the propagation delay may differ for different input-output pairs (the "nonuniform propagation delay" model from <ref> [15] </ref>) changes the time complexities of our algorithms, but the essential algorithms remain unchanged. When minimum propagation delays (sometimes called "contamination" delays) are incorporated in the model, the output of a functional element does not become invalid until some specified minimum amount of time after an input changes.
Reference: [16] <author> B. Lockyear and C. Ebeling. </author> <title> Optimal retiming of multi-phase level-clocked circuits. </title> <booktitle> In Advanced Research in VLSI and Parallel Systems: Proc. of the 1992 Brown/MIT Conference, </booktitle> <pages> pages 265-280. </pages> <publisher> MIT Press, </publisher> <month> March </month> <year> 1992. </year> <note> Also available as TR 91-10-01, </note> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: Because these results are primarily theoretical, we do not present them here, but rather, we focus instead on the more practical approximation algorithms. In independent work, Lockyear and Ebeling <ref> [16] </ref> have also obtained algorithms for retiming multiphase, level-clocked circuits. Their results include a polynomial-time algorithm for the symmetric retiming problem. They use this algorithm as a subroutine to solve the retiming and symmetric tuning problem. <p> The approximation scheme for the simultaneous clock tuning and retiming of two-phase circuits can also be generalized, but the resulting polynomial running time is impractically large. Some of the results in this section are similar to results obtained independently by Lockyear and Ebeling <ref> [16] </ref>.
Reference: [17] <author> S. Malik, E. Sentovich, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Retiming and resynthesis: Optimizing sequential networks with combinational techniques. </title> <booktitle> In Proceedings of the Hawaii International Conference on System Sciences, </booktitle> <year> 1990. </year>
Reference-contexts: Retiming has been well studied in the context of edge-triggered circuits [12, 13, 15, 24] and has been the subject of study in the context of single-phase, level-clocked circuits <ref> [17, 30] </ref>. We extend the retiming technique to encompass the optimization of two-phase, level-clocked circuits. We consider two problems related to retiming. The retiming problem for two-phase circuits asks whether, for a given two-phase circuit 2 Part (a) of the figure shows a simple level-clocked circuit.
Reference: [18] <author> C. A. Mead and L. A. Conway. </author> <title> Introduction to VLSI Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1980. </year>
Reference-contexts: In order to avoid problems with race conditions, it is common for level-clocked circuits to adopt clocking disciplines which involve multiple clock waveforms, or "phases". In a two-phase clocking scheme <ref> [18] </ref>, two clocking waveforms, or phases, denoted 0 and 1 , are employed, as is shown in Figure 1. Formally, we denote a two-phase clocking scheme by a 4-tuple = h 0 ; fl 0 ; 1 ; fl 1 i of strictly positive real numbers.
Reference: [19] <author> N. Megiddo. </author> <title> Linear programming in linear time when the dimension is fixed. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 31(1):114 - 127, </volume> <year> 1984. </year>
Reference-contexts: If the number of phases is assumed to be fixed, then the problem can be solved in O (kV 2 ) steps, that is, in a number of steps proportional to the number of constraints for proper timing <ref> [19] </ref>. Certain special cases can be handled without resorting to general linear programming. For example, a circuit with a three-phase, nonoverlapping clock can be tuned in O (V E) time using the three-dimensional linear programming algorithm of Megiddo [20]. 37 Retiming with symmetric clocking schemes.
Reference: [20] <author> N. Megiddo. </author> <title> Partitioning with two lines in the plane. </title> <journal> Journal of Algorithms, </journal> <volume> 6:430 - 433, </volume> <year> 1985. </year>
Reference-contexts: By linear programming theory [21], the optimal clock period fl can be obtained at a point ( fl 0 ; fl ) corresponding to the intersection of these O (V ) constraints. Megiddo's algorithm <ref> [20] </ref> can solve such a two-dimensional linear program in O (V ) time. Alternatively, one can first compute the O (V 2 ) intersections among Inequalities (13) and (14), 0 0, and fl 0 fl 1 0 0 (the nonhorizontal constraints). <p> Certain special cases can be handled without resorting to general linear programming. For example, a circuit with a three-phase, nonoverlapping clock can be tuned in O (V E) time using the three-dimensional linear programming algorithm of Megiddo <ref> [20] </ref>. 37 Retiming with symmetric clocking schemes. When clock phases are symmetric, simple k-phase circuits can be retimed to achieve a given clock period in O (V E + V 2 lg V ) time, independent of k.
Reference: [21] <author> C. Papadimitriou and K. Steiglitz. </author> <title> Combinatorial Optimization, Algorithms and Complexity. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1982. </year>
Reference-contexts: Thus, all the constraints can be phrased as linear inequalities in 0 and , as is shown in Figure 5. By linear programming theory <ref> [21] </ref>, the optimal clock period fl can be obtained at a point ( fl 0 ; fl ) corresponding to the intersection of these O (V ) constraints. Megiddo's algorithm [20] can solve such a two-dimensional linear program in O (V ) time. <p> Linear programming still suffices to solve the problem, however. Each i becomes a variable in a linear program, which can be solved with standard techniques <ref> [21] </ref>. If the number of phases is assumed to be fixed, then the problem can be solved in O (kV 2 ) steps, that is, in a number of steps proportional to the number of constraints for proper timing [19].
Reference: [22] <author> M. C. Papaefthymiou. </author> <title> On retiming synchronous circuitry and mixed-integer optimization. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> September </month> <year> 1990. </year> <note> Available as MIT/LCS/TR-486. </note>
Reference: [23] <author> M. C. Papaefthymiou. </author> <title> A Timing Analysis and Optimization System for Level-Clocked Circuitry. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1993. </year> <note> Available as MIT/LCS/TR-605. </note>
Reference-contexts: As testimony to the additional power gained by level-clocking, observe that no edge-triggered retiming of the circuit from Figure 2 (d) improves upon its period of 36. Our algorithms for two-phase circuitry have been implemented in Tim, a timing package developed at MIT <ref> [23, 27] </ref>. In addition to the timing optimization algorithms described in this paper, Tim includes algorithms for other kinds of optimizations, such as state minimization and sensitivity analysis of critical paths. A preliminary report of this research appears in [26, 27]. The remainder of this paper is organized as follows. <p> These results are based on a characterization of the feasible clock periods of retimed level-clocked circuits and are described in <ref> [11, 23] </ref>. Because these results are primarily theoretical, we do not present them here, but rather, we focus instead on the more practical approximation algorithms. In independent work, Lockyear and Ebeling [16] have also obtained algorithms for retiming multiphase, level-clocked circuits. <p> The practical efficiency of Algorithm GR&T can be improved by updating ffi in the then clause of line 22 immediately after has been updated with its new value <ref> [23] </ref>. As increases, the resolution ffi of the linear search decreases, and thus, fewer points are checked. The worst-case running time of the algorithm does not change, however. Although the linear search is inefficient, we do not know how to replace it by a more efficient binary search. <p> We conclude by discussing generalizations of our algorithms to handle gated clocks and nonsimple multiphase clocking disciplines. Tim is a timing analysis and optimization package for two-phase, level-clocked circuitry developed at MIT <ref> [23, 27] </ref>. We have already used Tim to compare empirically two-phase, level-clocked circuits and edge-triggered circuits in terms of speed and number of storage elements [26]. Most of the algorithms described in this paper have been implemented in Tim. In addition to these algorithms, Tim provides interactive feedback to designers. <p> Fully polynomial-time algorithms for the exact solution of these two problems and the problem of general retiming and tuning, without any integrality constraint on the propagation delays, are presented in <ref> [11, 23] </ref>. 39 An important extension of our work is the incorporation of precharged gates, nonuniform propagation delays, and nonzero minimum propagation delays to our circuit model.
Reference: [24] <author> M. C. Papaefthymiou. </author> <title> Understanding retiming through maximum average-delay cycles. </title> <journal> Mathematical Systems Theory, </journal> <volume> 27 </volume> <pages> 65-84, </pages> <year> 1994. </year> <note> A preliminary version of the paper appeared in the proceedings of the 3rd ACM Symposium on Parallel Algorithms and Architectures, </note> <month> July </month> <year> 1991. </year>
Reference-contexts: Another way to optimize a circuit is by retiming: a method for relocating latches within the circuit without affecting the functionality of the circuit. Retiming has been well studied in the context of edge-triggered circuits <ref> [12, 13, 15, 24] </ref> and has been the subject of study in the context of single-phase, level-clocked circuits [17, 30]. We extend the retiming technique to encompass the optimization of two-phase, level-clocked circuits. We consider two problems related to retiming.
Reference: [25] <author> M. C. Papaefthymiou, C. E. Leiserson, and A. T. Ishii. </author> <title> Optimizing two-phase, </title> <booktitle> level-clocked circuitry. In Proceedings of the 1991 MIT Student Workshop on VLSI and Parallel Systems, </booktitle> <month> July </month> <year> 1991. </year>
Reference-contexts: They use this algorithm as a subroutine to solve the retiming and symmetric tuning problem. They also determine a set of constraints for the retiming problem, and they describe a Bellman-Ford-like algorithm for solving the constraints. Early versions of our work appear in <ref> [10, 25] </ref>. 2 Constraints for proper timing In this section we give necessary and sufficient conditions for a two-phase, level-clocked circuit to be properly timed by a given clocking scheme. The section begins with a formal definition of the set of level-clocked circuits to which our results can be applied.
Reference: [26] <author> M. C. Papaefthymiou and K. H. Randall. </author> <title> Edge-triggering vs. two-phase level-clocking. </title> <booktitle> In Research on Integrated Systems: Proceedings of the 1993 Symposium, </booktitle> <month> March </month> <year> 1993. </year>
Reference-contexts: In addition to the timing optimization algorithms described in this paper, Tim includes algorithms for other kinds of optimizations, such as state minimization and sensitivity analysis of critical paths. A preliminary report of this research appears in <ref> [26, 27] </ref>. The remainder of this paper is organized as follows. Section 2 describes necessary and sufficient conditions for a two-phase, level-clocked cir 4 cuit to be properly timed. Section 3 then simplifies these conditions and uses them in an O (V E)-time algorithm that solves the timing verification problem. <p> Tim is a timing analysis and optimization package for two-phase, level-clocked circuitry developed at MIT [23, 27]. We have already used Tim to compare empirically two-phase, level-clocked circuits and edge-triggered circuits in terms of speed and number of storage elements <ref> [26] </ref>. Most of the algorithms described in this paper have been implemented in Tim. In addition to these algorithms, Tim provides interactive feedback to designers.
Reference: [27] <author> M. C. Papaefthymiou and K. H. Randall. Tim: </author> <title> a timing package for two-phase, </title> <booktitle> level-clocked circuitry. In Proceedings of the 30th ACM/IEEE Design Automation Conference, </booktitle> <month> June </month> <year> 1993. </year> <note> Also available as an MIT VLSI Memo 92-693, </note> <month> October </month> <year> 1992. </year>
Reference-contexts: As testimony to the additional power gained by level-clocking, observe that no edge-triggered retiming of the circuit from Figure 2 (d) improves upon its period of 36. Our algorithms for two-phase circuitry have been implemented in Tim, a timing package developed at MIT <ref> [23, 27] </ref>. In addition to the timing optimization algorithms described in this paper, Tim includes algorithms for other kinds of optimizations, such as state minimization and sensitivity analysis of critical paths. A preliminary report of this research appears in [26, 27]. The remainder of this paper is organized as follows. <p> In addition to the timing optimization algorithms described in this paper, Tim includes algorithms for other kinds of optimizations, such as state minimization and sensitivity analysis of critical paths. A preliminary report of this research appears in <ref> [26, 27] </ref>. The remainder of this paper is organized as follows. Section 2 describes necessary and sufficient conditions for a two-phase, level-clocked cir 4 cuit to be properly timed. Section 3 then simplifies these conditions and uses them in an O (V E)-time algorithm that solves the timing verification problem. <p> We conclude by discussing generalizations of our algorithms to handle gated clocks and nonsimple multiphase clocking disciplines. Tim is a timing analysis and optimization package for two-phase, level-clocked circuitry developed at MIT <ref> [23, 27] </ref>. We have already used Tim to compare empirically two-phase, level-clocked circuits and edge-triggered circuits in terms of speed and number of storage elements [26]. Most of the algorithms described in this paper have been implemented in Tim. In addition to these algorithms, Tim provides interactive feedback to designers.
Reference: [28] <author> N. Park and A. C. Parker. </author> <title> Theory of clocking for maximum execution overlap of high-speed digital systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(6) </volume> <pages> 678-690, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: We assume that the gaps fl 0 and fl 1 must be kept fixed and only the duty cycles of the phases can be adjusted. We give an O (V E)-time algorithm to solve the tuning problem. Previous algorithms for tuning have either addressed other types of clocking methodologies <ref> [4, 28, 32] </ref>, or been uncharacterized with respect to worst-case running time [2, 29]. Another way to optimize a circuit is by retiming: a method for relocating latches within the circuit without affecting the functionality of the circuit.
Reference: [29] <author> K. A. Sakallah, T. N. Mudge, and O. A. Olukotun. </author> <title> Optimal clocking of synchronous digital circuits. </title> <booktitle> In Technical Digest of the 1990 IEEE International Conference on CAD, </booktitle> <pages> pages 552-555, </pages> <month> November </month> <year> 1990. </year> <month> 46 </month>
Reference-contexts: We give an O (V E)-time algorithm to solve the tuning problem. Previous algorithms for tuning have either addressed other types of clocking methodologies [4, 28, 32], or been uncharacterized with respect to worst-case running time <ref> [2, 29] </ref>. Another way to optimize a circuit is by retiming: a method for relocating latches within the circuit without affecting the functionality of the circuit. <p> The assumption that the minimum propagation delay of a functional element is zero is a common conservative assumption among digital circuit designers. Faster circuits can be designed if minimum propagation delays are allowed to be positive <ref> [6, 29] </ref>, but in this case, computing solutions to the problems addressed in this paper appear to be more difficult.
Reference: [30] <author> N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Retiming of circuits with single phase level-sensitive latches. </title> <booktitle> In International Conference on Computer Design, </booktitle> <year> 1991. </year>
Reference-contexts: Retiming has been well studied in the context of edge-triggered circuits [12, 13, 15, 24] and has been the subject of study in the context of single-phase, level-clocked circuits <ref> [17, 30] </ref>. We extend the retiming technique to encompass the optimization of two-phase, level-clocked circuits. We consider two problems related to retiming. The retiming problem for two-phase circuits asks whether, for a given two-phase circuit 2 Part (a) of the figure shows a simple level-clocked circuit. <p> Like several previous retiming algorithms <ref> [13, 30] </ref>, our algorithm casts retiming for a symmetric clocking scheme as a mixed-integer linear program. The retiming transformation relocates the latches in a circuit G without changing the functionality of the circuit.
Reference: [31] <author> T. G. Szymanski and N. Shenoy. </author> <title> Verifying clock schedules. </title> <booktitle> In Digest of Technical Papers of the 1992 IEEE/ACM International Conference on CAD, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: Faster circuits can be designed if minimum propagation delays are allowed to be positive [6, 29], but in this case, computing solutions to the problems addressed in this paper appear to be more difficult. Szymanski and Shenoy <ref> [31] </ref> give an O (V 3 )-time verification algorithm for level-clocked circuits with positive minimum propagation delays, compared with our O (V E)-time algorithm for the same problem when all minimum delays are zero. <p> A polynomial-time algorithm for the timing verification problem when positive minimum propagation delays are included in the circuit model has appeared in <ref> [31] </ref>. We believe that many of our optimization algorithms can be generalized to handle such circuits in polynomial time. This is a topic of current research. Two generalizations of our work which seem more problematic are the handling of gated clocks and nonsimple multiphase clocking disciplines.
Reference: [32] <author> S. H. Unger and C. J. Tan. </author> <title> Clocking schemes for high speed digital systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35(10):880-895, </volume> <month> October </month> <year> 1986. </year>
Reference-contexts: We assume that the gaps fl 0 and fl 1 must be kept fixed and only the duty cycles of the phases can be adjusted. We give an O (V E)-time algorithm to solve the tuning problem. Previous algorithms for tuning have either addressed other types of clocking methodologies <ref> [4, 28, 32] </ref>, or been uncharacterized with respect to worst-case running time [2, 29]. Another way to optimize a circuit is by retiming: a method for relocating latches within the circuit without affecting the functionality of the circuit.
Reference: [33] <author> S. A. Ward and Jr. R. H. Halstead. </author> <title> Computation Structures. </title> <publisher> McGraw-Hill, MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: of time between a falling edge of the first phase and the next rising edge of the second phase, which generally must be long enough to overcome various engineering constraints, such as setup and hold times, the nonzero durations required for clock signals to rise and fall, and clock skew <ref> [6, 33] </ref>. The duty cycle and gap of the second phase are, similarly, denoted by 1 and fl 1 , respectively. The ratio = 1 = 0 is the duty ratio of the clocking scheme.
References-found: 33

