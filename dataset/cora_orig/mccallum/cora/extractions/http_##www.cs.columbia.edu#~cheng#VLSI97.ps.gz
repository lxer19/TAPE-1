URL: http://www.cs.columbia.edu/~cheng/VLSI97.ps.gz
Refering-URL: http://www.cs.columbia.edu/~cheng/Resume.html
Root-URL: http://www.cs.columbia.edu
Title: Delay-Insensitive Carry-Lookahead Adders  
Author: Fu-Chiung Cheng Stephen H. Unger Michael Theobald Wen-Chung Cho 
Address: New York, NY 10027  
Affiliation: Department of Computer Science Columbia University  
Abstract: Integer addition is one of the most important operations in digital computer systems because the performance of processors is significantly influenced by the speed of their adders. This paper proposes a delay-insensitive, carry-lookahead adder in which the logic complexity is a linear function of n, the number of inputs, and the average computation time is proportional to the logarithm of the logarithm of n. We also show an economic implementation of this adder in CMOS technology. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> O. J. Bedrij. </author> <title> Carry-select adder. </title> <journal> IRE Transactions on Elec tronic Computers, </journal> <volume> 11(6) </volume> <pages> 340-346, </pages> <month> June </month> <year> 1962. </year>
Reference-contexts: This is not a severe problem either, except for a very large n. 6. Comparisons of Adders In this section we compare the logic and time complexity for both synchronous and asynchronous adders. They are Ripple Carry Adder (RCA), Carry-Select Adder (CSA1) <ref> [1] </ref>, Conditional-Sum Adder (CSA2) [18], Carry-Skip Adder (CSA3) [12], Carry-Completion Sensing Adder (CCSA) [8], Delay-Insensitive Ripple Carry Adder (DI-CLA) [14], Conditional-Sum Completion-Sensing Adder (CSCSA) [15], Carry-Lookahead Adder (CLA) [2], and, our DICLA and DICLASP.
Reference: [2] <author> R. P. Brent and H. T. Kung. </author> <title> A regular layout for parallel adders. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 31(3) </volume> <pages> 260-264, </pages> <month> Mar. </month> <year> 1982. </year>
Reference-contexts: How ever, the carry-lookahead scheme can be built in the form of a tree-like circuit, which has a simple, regular structure <ref> [6, 20, 2, 10] </ref>, by reformulating Equation (9) into P i;k = P i;j P j1;k (blockcarrypropagate) (10) G i;k = G i;j + P i;j G j1;k (blockcarrygenerate)(11) C j = G j1;k + P j1;k C k (12) where i j &gt; k, G i;i = g i and <p> They are Ripple Carry Adder (RCA), Carry-Select Adder (CSA1) [1], Conditional-Sum Adder (CSA2) [18], Carry-Skip Adder (CSA3) [12], Carry-Completion Sensing Adder (CCSA) [8], Delay-Insensitive Ripple Carry Adder (DI-CLA) [14], Conditional-Sum Completion-Sensing Adder (CSCSA) [15], Carry-Lookahead Adder (CLA) <ref> [2] </ref>, and, our DICLA and DICLASP. <p> DICLASP) in which the logic complexity is a linear function of n and the average computation time is proportional to the logarithm of the logarithm of n. To the best of our knowledge, our adder has better area-time efficiency than any other adders <ref> [16, 7, 2, 14] </ref> have. The proposed delay-insensitive carry-lookahead tree adders are suitable for VLSI implementation because of their regular structure. We also presented an economic CMOS implementation of the proposed adders. We believe this work can be applied in the design of high speed processors.
Reference: [3] <author> B. Briley. </author> <title> Some new results on average worst case carry. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 22(5) </volume> <pages> 459-463, </pages> <month> May </month> <year> 1973. </year>
Reference-contexts: n-bit ripple-carry adders (RCA), which are synchronous, have worst case computation time Q (n), whereas n-bit carry-completion sensing fl The research on which this paper was based was supported in part by a grant from the AT&T Foundation. adders (CCSA), which are asynchronous, have average computation time Q (log n) <ref> [8, 11, 3] </ref>. Delay-insensitive (DI) circuits [5] are a subclass of asynchronous circuits. The defining property of pure DI circuits is that their correctness is insensitive to delays in both gate elements and connection wires. The class of pure DI circuits is quite limited [13].
Reference: [4] <author> F.-C. Cheng. </author> <title> Delay-insensitive carry-lookahead adders. </title> <type> Tech nical report, </type> <institution> Department of Computer Science, Columbia University, </institution> <year> 1996. </year>
Reference-contexts: The CCSA is not a DI circuit. It must meet the bundling constraint [19]. One way to meet this constraint is to put a delay in the control path <ref> [4] </ref>. It is impossible to meet the bundling constraint if there is no way to control delay in control and data paths. Thus, the design of DI circuits is very interesting. <p> The behaviors of gates can be represented through a set of production rules; and then they can be directly implemented in CMOS. Here we just show the CMOS circuits of DIRCA and DICLASP. For more detail, see <ref> [14, 4] </ref>. The CMOS implementation of DIRCA cell is shown in The improvement is due to factoring out subexpressions as much as possible. That is, some of the transistors may be shared.
Reference: [5] <author> J. C. Ebergen. </author> <title> From functional specification to a delay insensitive circuit. </title> <type> Technical Report CS-89-44, </type> <institution> University of Waterloo, </institution> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: Delay-insensitive (DI) circuits <ref> [5] </ref> are a subclass of asynchronous circuits. The defining property of pure DI circuits is that their correctness is insensitive to delays in both gate elements and connection wires. The class of pure DI circuits is quite limited [13].
Reference: [6] <author> I. Flores. </author> <title> The Logic of Computer Arithmetic. </title> <publisher> Prentice-Hall, </publisher> <year> 1963. </year>
Reference-contexts: How ever, the carry-lookahead scheme can be built in the form of a tree-like circuit, which has a simple, regular structure <ref> [6, 20, 2, 10] </ref>, by reformulating Equation (9) into P i;k = P i;j P j1;k (blockcarrypropagate) (10) G i;k = G i;j + P i;j G j1;k (blockcarrygenerate)(11) C j = G j1;k + P j1;k C k (12) where i j &gt; k, G i;i = g i and
Reference: [7] <author> M. A. Franklin and T. Pan. </author> <title> Performance comparison of asynchronous adders. </title> <booktitle> In Proc. International Symposium on Advanced Research in Asynchronous Circuits and Systems, </booktitle> <pages> pages 117-125, </pages> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: 1. Introduction Integer addition is one of the most important operations in digital computer systems. In addition to explicit arithmetic (such as addition, subtraction, multiplication and division) performed in a program, additions are performed to increment the program counter and to calculate the effective address [10]. Statistics presented in <ref> [10, 7] </ref> show that in a prototypical RISC machine (DLX) 72% of the instructions perform additions (or subtractions) in the data path. Thus, the performance of processors is significantly influenced by the speed of their adders. Circuits may be classified as synchronous and asynchronous circuits. <p> DICLASP) in which the logic complexity is a linear function of n and the average computation time is proportional to the logarithm of the logarithm of n. To the best of our knowledge, our adder has better area-time efficiency than any other adders <ref> [16, 7, 2, 14] </ref> have. The proposed delay-insensitive carry-lookahead tree adders are suitable for VLSI implementation because of their regular structure. We also presented an economic CMOS implementation of the proposed adders. We believe this work can be applied in the design of high speed processors.
Reference: [8] <author> B. Gilchrist, J. H. Pomerene, and S. Y. Wong. </author> <title> Fast carry logic for digital computers. </title> <journal> IRE Transactions on Electronic Computers, </journal> <volume> EC-4(4):133-136, </volume> <month> Dec. </month> <year> 1955. </year>
Reference-contexts: n-bit ripple-carry adders (RCA), which are synchronous, have worst case computation time Q (n), whereas n-bit carry-completion sensing fl The research on which this paper was based was supported in part by a grant from the AT&T Foundation. adders (CCSA), which are asynchronous, have average computation time Q (log n) <ref> [8, 11, 3] </ref>. Delay-insensitive (DI) circuits [5] are a subclass of asynchronous circuits. The defining property of pure DI circuits is that their correctness is insensitive to delays in both gate elements and connection wires. The class of pure DI circuits is quite limited [13]. <p> Comparisons of Adders In this section we compare the logic and time complexity for both synchronous and asynchronous adders. They are Ripple Carry Adder (RCA), Carry-Select Adder (CSA1) [1], Conditional-Sum Adder (CSA2) [18], Carry-Skip Adder (CSA3) [12], Carry-Completion Sensing Adder (CCSA) <ref> [8] </ref>, Delay-Insensitive Ripple Carry Adder (DI-CLA) [14], Conditional-Sum Completion-Sensing Adder (CSCSA) [15], Carry-Lookahead Adder (CLA) [2], and, our DICLA and DICLASP.
Reference: [9] <author> M. Greenstreet. </author> <title> Private Communication. </title> <year> 1995. </year>
Reference-contexts: The computation time of an adder is sensitive to the numbers to be added. The upper and lower bound proofs of the time complexity are an extension of the proofs for CCSAs <ref> [9] </ref>. Theorem 1 For any input configuration, the carry propa gation time is proportional to the logarithm of the length of the longest carry chain. Proof: Consider a carry chain with length x in an input config uration where 2 l1 &lt; x 2 l .
Reference: [10] <author> J. L. Hennessy and D. A. Patterson. </author> <title> Computer Architec ture: A Quantitative Approach. </title> <publisher> Morgan Kaufmann Publish ers, </publisher> <year> 1990. </year>
Reference-contexts: 1. Introduction Integer addition is one of the most important operations in digital computer systems. In addition to explicit arithmetic (such as addition, subtraction, multiplication and division) performed in a program, additions are performed to increment the program counter and to calculate the effective address <ref> [10] </ref>. Statistics presented in [10, 7] show that in a prototypical RISC machine (DLX) 72% of the instructions perform additions (or subtractions) in the data path. Thus, the performance of processors is significantly influenced by the speed of their adders. Circuits may be classified as synchronous and asynchronous circuits. <p> 1. Introduction Integer addition is one of the most important operations in digital computer systems. In addition to explicit arithmetic (such as addition, subtraction, multiplication and division) performed in a program, additions are performed to increment the program counter and to calculate the effective address [10]. Statistics presented in <ref> [10, 7] </ref> show that in a prototypical RISC machine (DLX) 72% of the instructions perform additions (or subtractions) in the data path. Thus, the performance of processors is significantly influenced by the speed of their adders. Circuits may be classified as synchronous and asynchronous circuits. <p> g i1 + ::: + p i p i1 :::p 1 g 0 + p i p i1 :::p 0 C 0 (9) For large i, it is impractical to build a full carry-lookahead adder because of the practical limitations on fan-in and fanout, irregular structure, and many long wires <ref> [16, 10] </ref>. <p> How ever, the carry-lookahead scheme can be built in the form of a tree-like circuit, which has a simple, regular structure <ref> [6, 20, 2, 10] </ref>, by reformulating Equation (9) into P i;k = P i;j P j1;k (blockcarrypropagate) (10) G i;k = G i;j + P i;j G j1;k (blockcarrygenerate)(11) C j = G j1;k + P j1;k C k (12) where i j &gt; k, G i;i = g i and
Reference: [11] <author> K. Hwang. </author> <title> Computer Arithmetic: </title> <booktitle> Principles, Architecture, and Design. </booktitle> <publisher> John Wiley & Sons, </publisher> <year> 1979. </year>
Reference-contexts: n-bit ripple-carry adders (RCA), which are synchronous, have worst case computation time Q (n), whereas n-bit carry-completion sensing fl The research on which this paper was based was supported in part by a grant from the AT&T Foundation. adders (CCSA), which are asynchronous, have average computation time Q (log n) <ref> [8, 11, 3] </ref>. Delay-insensitive (DI) circuits [5] are a subclass of asynchronous circuits. The defining property of pure DI circuits is that their correctness is insensitive to delays in both gate elements and connection wires. The class of pure DI circuits is quite limited [13].
Reference: [12] <author> M. Lehman and N. Burla. </author> <title> Skip techniques for high-speed carry-propagation in binary arithmetic units. </title> <journal> IRE Transac tions on Electronic Computers, </journal> <volume> 10(12) </volume> <pages> 691-698, </pages> <month> Dec. </month> <year> 1961. </year>
Reference-contexts: Comparisons of Adders In this section we compare the logic and time complexity for both synchronous and asynchronous adders. They are Ripple Carry Adder (RCA), Carry-Select Adder (CSA1) [1], Conditional-Sum Adder (CSA2) [18], Carry-Skip Adder (CSA3) <ref> [12] </ref>, Carry-Completion Sensing Adder (CCSA) [8], Delay-Insensitive Ripple Carry Adder (DI-CLA) [14], Conditional-Sum Completion-Sensing Adder (CSCSA) [15], Carry-Lookahead Adder (CLA) [2], and, our DICLA and DICLASP.
Reference: [13] <author> A. J. Martin. </author> <title> The limitations to delay-insensitivity in asyn chronous circuits. </title> <editor> In W. J. Dally, editor, </editor> <booktitle> Sixth MIT Conference on Advanced Research in VLSI, </booktitle> <pages> pages 263-278. </pages> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Delay-insensitive (DI) circuits [5] are a subclass of asynchronous circuits. The defining property of pure DI circuits is that their correctness is insensitive to delays in both gate elements and connection wires. The class of pure DI circuits is quite limited <ref> [13] </ref>. However, extending pure DI circuits with isochronic forks is sufficient to construct any circuit of interest. (Such circuits are sometimes called quasi-DI.) For this paper we assume isochronic forks. The CCSA is not a DI circuit. It must meet the bundling constraint [19].
Reference: [14] <author> A. J. Martin. </author> <title> Asynchronous datapaths and the design of an asynchronous adder. </title> <booktitle> Formal Methods in System Design, </booktitle> <volume> 1(1) </volume> <pages> 119-137, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: An n-bit DIRCA is shown in Martin <ref> [14] </ref> proposed a very good design of the DIRCA adder by using CMOS technology. The transistor count per DIRCA cell is 42. <p> Comparisons of Adders In this section we compare the logic and time complexity for both synchronous and asynchronous adders. They are Ripple Carry Adder (RCA), Carry-Select Adder (CSA1) [1], Conditional-Sum Adder (CSA2) [18], Carry-Skip Adder (CSA3) [12], Carry-Completion Sensing Adder (CCSA) [8], Delay-Insensitive Ripple Carry Adder (DI-CLA) <ref> [14] </ref>, Conditional-Sum Completion-Sensing Adder (CSCSA) [15], Carry-Lookahead Adder (CLA) [2], and, our DICLA and DICLASP. <p> Our DICLASP has the best area-time efficiency among these adders. 7. CMOS Implementation To implement economic DICLASPs in CMOS technology, Martin's method to design economic delay-insensitive datapath circuits can be applied <ref> [14] </ref>. The behaviors of gates can be represented through a set of production rules; and then they can be directly implemented in CMOS. Here we just show the CMOS circuits of DIRCA and DICLASP. For more detail, see [14, 4]. <p> The behaviors of gates can be represented through a set of production rules; and then they can be directly implemented in CMOS. Here we just show the CMOS circuits of DIRCA and DICLASP. For more detail, see <ref> [14, 4] </ref>. The CMOS implementation of DIRCA cell is shown in The improvement is due to factoring out subexpressions as much as possible. That is, some of the transistors may be shared. <p> DICLASP) in which the logic complexity is a linear function of n and the average computation time is proportional to the logarithm of the logarithm of n. To the best of our knowledge, our adder has better area-time efficiency than any other adders <ref> [16, 7, 2, 14] </ref> have. The proposed delay-insensitive carry-lookahead tree adders are suitable for VLSI implementation because of their regular structure. We also presented an economic CMOS implementation of the proposed adders. We believe this work can be applied in the design of high speed processors.
Reference: [15] <author> N. M. Martin and S. P. Hufnagel. </author> <title> Conditional-sum early completion adder logic. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 29(8) </volume> <pages> 753-756, </pages> <month> Aug. </month> <year> 1980. </year>
Reference-contexts: They are Ripple Carry Adder (RCA), Carry-Select Adder (CSA1) [1], Conditional-Sum Adder (CSA2) [18], Carry-Skip Adder (CSA3) [12], Carry-Completion Sensing Adder (CCSA) [8], Delay-Insensitive Ripple Carry Adder (DI-CLA) [14], Conditional-Sum Completion-Sensing Adder (CSCSA) <ref> [15] </ref>, Carry-Lookahead Adder (CLA) [2], and, our DICLA and DICLASP.
Reference: [16] <author> T.-F. Ngai and M. J. Irwin. </author> <title> Regular, area-time efficient carry lookahead adders. </title> <booktitle> In Proc. IEEE Symp. on Computer Arith metic, </booktitle> <pages> pages 9-15. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1985. </year>
Reference-contexts: g i1 + ::: + p i p i1 :::p 1 g 0 + p i p i1 :::p 0 C 0 (9) For large i, it is impractical to build a full carry-lookahead adder because of the practical limitations on fan-in and fanout, irregular structure, and many long wires <ref> [16, 10] </ref>. <p> DICLASP) in which the logic complexity is a linear function of n and the average computation time is proportional to the logarithm of the logarithm of n. To the best of our knowledge, our adder has better area-time efficiency than any other adders <ref> [16, 7, 2, 14] </ref> have. The proposed delay-insensitive carry-lookahead tree adders are suitable for VLSI implementation because of their regular structure. We also presented an economic CMOS implementation of the proposed adders. We believe this work can be applied in the design of high speed processors.
Reference: [17] <author> C. L. Seitz. </author> <title> System timing. </title> <editor> In C. A. Mead and L. A. Conway, editors, </editor> <title> Introduction to VLSI Systems, chapter 7. </title> <publisher> Addison Wesley, </publisher> <year> 1980. </year>
Reference-contexts: It is impossible to meet the bundling constraint if there is no way to control delay in control and data paths. Thus, the design of DI circuits is very interesting. DI circuits may be implemented by using dual-rail signaling <ref> [17, 21] </ref>: For each data bit, two separate signals are used; A 0 i A 1 i = 01 (10) denotes that the data bit is one (zero). To implement DI adders, we may use dual-rail signaling for input bits, sum bits as well as carry bits.
Reference: [18] <author> J. Sklansky. </author> <title> Conditional-sum addition logic. </title> <journal> IRE Transac tions on Electronic Computers, </journal> <volume> 9(6) </volume> <pages> 226-231, </pages> <month> June </month> <year> 1960. </year>
Reference-contexts: This is not a severe problem either, except for a very large n. 6. Comparisons of Adders In this section we compare the logic and time complexity for both synchronous and asynchronous adders. They are Ripple Carry Adder (RCA), Carry-Select Adder (CSA1) [1], Conditional-Sum Adder (CSA2) <ref> [18] </ref>, Carry-Skip Adder (CSA3) [12], Carry-Completion Sensing Adder (CCSA) [8], Delay-Insensitive Ripple Carry Adder (DI-CLA) [14], Conditional-Sum Completion-Sensing Adder (CSCSA) [15], Carry-Lookahead Adder (CLA) [2], and, our DICLA and DICLASP.
Reference: [19] <author> I. E. Sutherland. </author> <title> Micropipelines. </title> <journal> Communications of the ACM, </journal> <volume> 32(6) </volume> <pages> 720-738, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: However, extending pure DI circuits with isochronic forks is sufficient to construct any circuit of interest. (Such circuits are sometimes called quasi-DI.) For this paper we assume isochronic forks. The CCSA is not a DI circuit. It must meet the bundling constraint <ref> [19] </ref>. One way to meet this constraint is to put a delay in the control path [4]. It is impossible to meet the bundling constraint if there is no way to control delay in control and data paths. Thus, the design of DI circuits is very interesting.
Reference: [20] <author> S. H. Unger. </author> <title> Tree realizations of iterative circuits. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 26(4) </volume> <pages> 365-393, </pages> <month> Apr. </month> <year> 1977. </year>
Reference-contexts: How ever, the carry-lookahead scheme can be built in the form of a tree-like circuit, which has a simple, regular structure <ref> [6, 20, 2, 10] </ref>, by reformulating Equation (9) into P i;k = P i;j P j1;k (blockcarrypropagate) (10) G i;k = G i;j + P i;j G j1;k (blockcarrygenerate)(11) C j = G j1;k + P j1;k C k (12) where i j &gt; k, G i;i = g i and
Reference: [21] <author> C. H. K. van Berkel, C. Niessen, M. Rem, and R. W. J. J. Saeijs. </author> <title> VLSI programming and silicon compilation. </title> <booktitle> In Proc. International Conf. Computer Design (ICCD), </booktitle> <pages> pages 150 166, </pages> <address> Rye Brook, New York, 1988. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: It is impossible to meet the bundling constraint if there is no way to control delay in control and data paths. Thus, the design of DI circuits is very interesting. DI circuits may be implemented by using dual-rail signaling <ref> [17, 21] </ref>: For each data bit, two separate signals are used; A 0 i A 1 i = 01 (10) denotes that the data bit is one (zero). To implement DI adders, we may use dual-rail signaling for input bits, sum bits as well as carry bits.
References-found: 21

