URL: ftp://ftp.cs.columbia.edu/reports/reports-1992/cucs-049-92.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1992.html
Root-URL: http://www.cs.columbia.edu
Email: dany@cwi.nl  colussi@pdmat1.unipd.it  toniolo@pdmat1.unipd.it  
Title: Tight Comparison Bounds for the String Prefix-Matching Problem  
Author: Dany Breslauer Livio Colussi Laura Toniolo 
Web: CUCS-049-92  
Address: Amsterdam, The Netherlands  Via Belzoni 7, Padova, Italy  Via Belzoni 7, Padova, Italy  
Affiliation: CWI  Universita di Padova Dipartimento di Matematica Pura ed Applicata  Universita di Padova Dipartimento di Matematica Pura ed Applicata  
Abstract: In the string prefix-matching problem one is interested in finding the longest prefix of a pattern string of length m that occurs starting at each position of a text string of length n. This is a natural generalization of the string matching problem where only occurrences of the whole pattern are sought. The Knuth-Morris-Pratt string matching algorithm can be easily adapted to solve the string prefix-matching problem without making additional comparisons. In this paper we study the exact complexity of the string prefix-matching problem in the deterministic sequential comparison model. Our bounds do not account for comparisons made in a pattern preprocessing step. The following results are presented: 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. S. Boyer and J. S. Moore. </author> <title> A fast string searching algorithm. </title> <journal> Comm. of the ACM, </journal> <volume> 20 </volume> <pages> 762-772, </pages> <year> 1977. </year>
Reference-contexts: The string prefix-matching problem is obviously harder than the standard string matching problem since each text symbol must be either compared directly to the first symbol of the pattern or compared successfully to another symbol, while in the string matching problem some text symbols might not be compared at all <ref> [1] </ref>. Interestingly, this "hardness" introduces more structure that makes the analysis of the string prefix-matching problem easier. This paper presents matching lower and upper bounds for the string prefix matching problem. In particular we give: 1. <p> Further, assume that A may compare P <ref> [ 1 ] </ref> only last. Then, A makes at most b 2m1 m nc comparisons. <p> 1)c: When A reaches text position = n + 1, the number of comparisons satisfies, b m 2m 1 nc: The Knuth-Morris-Pratt [7] algorithm can be trivially modified to compare P [ * ] in in creasing order of * starting from * = 2 and only then compare P <ref> [ 1 ] </ref>. This gives a linear time on-line prefix-matching algorithm that makes only b 2m1 m nc comparisons and uses the same pattern preprocessing as the Knuth-Morris-Pratt algorithm. The following theorem has a more general claim.
Reference: [2] <author> D. Breslauer and Z. Galil. </author> <title> Closing the Gap in the Exact Complexity of String Matching. </title> <type> manuscript, </type> <year> 1992. </year>
Reference-contexts: In this paper we study the exact number of comparisons performed by algorithms that have access to the input strings by pairwise symbol comparisons that test for equality. This work was motivated by recent results on the exact comparison complexity of the string matching problem <ref> [2, 4, 5, 6, 8] </ref>: Colussi [4] optimized the Knuth-Morris-Pratt [7] string matching algorithm, which makes 2n m comparisons, using program correctness proof techniques and presented an algorithm that makes n + 1 2 (n m) comparisons. <p> His algorithm was later improved by Galil and Giancarlo [6] and further by Breslauer and Galil <ref> [2] </ref>. Recently, Cole and Hariharan [3] discovered a different algorithm that makes only n + c m (n m) comparisons, but requires an expensive pattern preprocessing 2 . <p> Then, except possibly the step which chooses the order according to which the P [ * ]'s are compared, A can be implemented in linear time with a linear preprocessing step. Proof: The data structures that are used by Breslauer and Galil <ref> [2] </ref> to implement a family of string matching algorithms can be used to implement A in linear time with a linear preprocessing step that makes at most 2m 1 comparisons. 2 3 Lower Bounds In this section we show a lower bound on the number of comparisons required by any string
Reference: [3] <author> R. Cole and R. Hariharan. </author> <title> Tighter Bounds on The Exact Complexity of String Matching. </title> <booktitle> In Proc. 33rd IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1992. </year> <note> to appear. 7 </note>
Reference-contexts: His algorithm was later improved by Galil and Giancarlo [6] and further by Breslauer and Galil [2]. Recently, Cole and Hariharan <ref> [3] </ref> discovered a different algorithm that makes only n + c m (n m) comparisons, but requires an expensive pattern preprocessing 2 . Cole and Hariharan [3] also gave a lower bound of n + c m (n m) comparisons improving lower bounds given by Galil and Giancarlo [5] and Zwick <p> His algorithm was later improved by Galil and Giancarlo [6] and further by Breslauer and Galil [2]. Recently, Cole and Hariharan <ref> [3] </ref> discovered a different algorithm that makes only n + c m (n m) comparisons, but requires an expensive pattern preprocessing 2 . Cole and Hariharan [3] also gave a lower bound of n + c m (n m) comparisons improving lower bounds given by Galil and Giancarlo [5] and Zwick and Paterson [8]. However, there is still a small gap between the lower and upper bounds for string matching. <p> complexity of the string prefix-matching problem approaches 2n. * The lower bound proofs of the two problems require different arguments: the pattern string that we use for the lower bound is `ab m1 ' while the lower bounds for the string matching problem require patterns with more complex periodicity structures <ref> [3, 8] </ref>. Finally, we consider the special case when the text and the pattern strings are the same string and all comparisons are accounted.
Reference: [4] <author> L. Colussi. </author> <title> Correctness and efficiency of string matching algorithms. </title> <journal> Inform. and Control, </journal> <volume> 95 </volume> <pages> 225-251, </pages> <year> 1991. </year>
Reference-contexts: In this paper we study the exact number of comparisons performed by algorithms that have access to the input strings by pairwise symbol comparisons that test for equality. This work was motivated by recent results on the exact comparison complexity of the string matching problem <ref> [2, 4, 5, 6, 8] </ref>: Colussi [4] optimized the Knuth-Morris-Pratt [7] string matching algorithm, which makes 2n m comparisons, using program correctness proof techniques and presented an algorithm that makes n + 1 2 (n m) comparisons. <p> This work was motivated by recent results on the exact comparison complexity of the string matching problem [2, 4, 5, 6, 8]: Colussi <ref> [4] </ref> optimized the Knuth-Morris-Pratt [7] string matching algorithm, which makes 2n m comparisons, using program correctness proof techniques and presented an algorithm that makes n + 1 2 (n m) comparisons. His algorithm was later improved by Galil and Giancarlo [6] and further by Breslauer and Galil [2].
Reference: [5] <author> Z. Galil and R. Giancarlo. </author> <title> On the exact complexity of string matching: lower bounds. </title> <journal> SIAM J. Comput., </journal> <volume> 20(6) </volume> <pages> 1008-1020, </pages> <year> 1991. </year>
Reference-contexts: In this paper we study the exact number of comparisons performed by algorithms that have access to the input strings by pairwise symbol comparisons that test for equality. This work was motivated by recent results on the exact comparison complexity of the string matching problem <ref> [2, 4, 5, 6, 8] </ref>: Colussi [4] optimized the Knuth-Morris-Pratt [7] string matching algorithm, which makes 2n m comparisons, using program correctness proof techniques and presented an algorithm that makes n + 1 2 (n m) comparisons. <p> Cole and Hariharan [3] also gave a lower bound of n + c m (n m) comparisons improving lower bounds given by Galil and Giancarlo <ref> [5] </ref> and Zwick and Paterson [8]. However, there is still a small gap between the lower and upper bounds for string matching. <p> We describe an adversary that can force such an algorithm to make at least b 2m1 m nc comparisons. The techniques we use are somewhat similar to those used by Galil and Giancarlo <ref> [5] </ref> and Zwick and Paterson [8]. However, the pattern string that is used for the lower bound has a very simple periodicity structure. Theorem 3.1 Any prefix-matching algorithm must make at least b 2m1 m nc comparisons.
Reference: [6] <author> Z. Galil and R. Giancarlo. </author> <title> The exact complexity of string matching: upper bounds. </title> <journal> SIAM J. Comput., </journal> <volume> 21(3) </volume> <pages> 407-437, </pages> <year> 1992. </year>
Reference-contexts: In this paper we study the exact number of comparisons performed by algorithms that have access to the input strings by pairwise symbol comparisons that test for equality. This work was motivated by recent results on the exact comparison complexity of the string matching problem <ref> [2, 4, 5, 6, 8] </ref>: Colussi [4] optimized the Knuth-Morris-Pratt [7] string matching algorithm, which makes 2n m comparisons, using program correctness proof techniques and presented an algorithm that makes n + 1 2 (n m) comparisons. <p> His algorithm was later improved by Galil and Giancarlo <ref> [6] </ref> and further by Breslauer and Galil [2]. Recently, Cole and Hariharan [3] discovered a different algorithm that makes only n + c m (n m) comparisons, but requires an expensive pattern preprocessing 2 .
Reference: [7] <author> D. E. Knuth, J. H. Morris, and V. R. Pratt. </author> <title> Fast pattern matching in strings. </title> <journal> SIAM J. Comput., </journal> <volume> 6 </volume> <pages> 322-350, </pages> <year> 1977. </year>
Reference-contexts: The string prefix-matching problem is a natural generalization of the standard string matching problem where only complete occurrences of the pattern are sought. The classical linear time string matching algorithm of Knuth, Morris and Pratt <ref> [7] </ref> can be easily adapted to solve the string prefix-matching problem in the same time bounds without making additional comparisons 1 . In this paper we study the exact number of comparisons performed by algorithms that have access to the input strings by pairwise symbol comparisons that test for equality. <p> This work was motivated by recent results on the exact comparison complexity of the string matching problem [2, 4, 5, 6, 8]: Colussi [4] optimized the Knuth-Morris-Pratt <ref> [7] </ref> string matching algorithm, which makes 2n m comparisons, using program correctness proof techniques and presented an algorithm that makes n + 1 2 (n m) comparisons. His algorithm was later improved by Galil and Giancarlo [6] and further by Breslauer and Galil [2]. <p> In particular we give: 1. A family of linear-time string prefix-matching algorithms that make at most b 2m1 m nc com parisons. The pattern preprocessing step of these algorithms is almost identical to that of the string matching algorithm of Knuth, Morris and Pratt <ref> [7] </ref>. This upper bound improves on the 2n 1 comparisons made by the adapted string matching algorithm of Knuth, Morris and Pratt [7]. 2. A lower bound of b 2m1 m nc comparisons for any string prefix-matching algorithm. <p> The pattern preprocessing step of these algorithms is almost identical to that of the string matching algorithm of Knuth, Morris and Pratt <ref> [7] </ref>. This upper bound improves on the 2n 1 comparisons made by the adapted string matching algorithm of Knuth, Morris and Pratt [7]. 2. A lower bound of b 2m1 m nc comparisons for any string prefix-matching algorithm. <p> Finally, we consider the special case when the text and the pattern strings are the same string and all comparisons are accounted. This problem, which we call the string self-prefix problem, is similar to the failure function 3 that is computed in the pattern preprocessing of the Knuth-Morris-Pratt <ref> [7] </ref> string matching algorithm using 2n 1 comparisons. We give the following lower bound: 3. 2m d2 me comparisons are required by any algorithm that solves the self-prefix problem for a string of length m. This paper is organized as follows. <p> Therefore, A makes at most 2n 1 comparisons. 2 The adapted Knuth-Morris-Pratt <ref> [7] </ref> prefix-matching algorithm satisfies the conditions of Lemma 2.1 and makes at most 2n 1 comparisons. There are cases in which it would actually make 2n 1 comparisons; e.g. P [1::2] = `ab' and T [1::n] = `a n '. <p> But l m and by simple arithmetic, b m 2m 1 ( 1 1)c: When A reaches text position = n + 1, the number of comparisons satisfies, b m 2m 1 nc: The Knuth-Morris-Pratt <ref> [7] </ref> algorithm can be trivially modified to compare P [ * ] in in creasing order of * starting from * = 2 and only then compare P [ 1 ]. <p> This problem is solved in the preprocessing step of the Knuth-Morris-Pratt <ref> [7] </ref> string matching algorithm in linear time and 2m 1 comparisons. Theorem 4.1 Fix a positive integer constant k. Then, any algorithm that solves the self-prefix problem for a string of length m, such that m k, must make at least b 2k1 k mc k comparisons.
Reference: [8] <author> U. Zwick and M. S. Paterson. </author> <title> Lower bounds for string matching in the sequential comparison model. </title> <type> manuscript, </type> <year> 1991. </year> <month> 8 </month>
Reference-contexts: In this paper we study the exact number of comparisons performed by algorithms that have access to the input strings by pairwise symbol comparisons that test for equality. This work was motivated by recent results on the exact comparison complexity of the string matching problem <ref> [2, 4, 5, 6, 8] </ref>: Colussi [4] optimized the Knuth-Morris-Pratt [7] string matching algorithm, which makes 2n m comparisons, using program correctness proof techniques and presented an algorithm that makes n + 1 2 (n m) comparisons. <p> Cole and Hariharan [3] also gave a lower bound of n + c m (n m) comparisons improving lower bounds given by Galil and Giancarlo [5] and Zwick and Paterson <ref> [8] </ref>. However, there is still a small gap between the lower and upper bounds for string matching. <p> complexity of the string prefix-matching problem approaches 2n. * The lower bound proofs of the two problems require different arguments: the pattern string that we use for the lower bound is `ab m1 ' while the lower bounds for the string matching problem require patterns with more complex periodicity structures <ref> [3, 8] </ref>. Finally, we consider the special case when the text and the pattern strings are the same string and all comparisons are accounted. <p> We describe an adversary that can force such an algorithm to make at least b 2m1 m nc comparisons. The techniques we use are somewhat similar to those used by Galil and Giancarlo [5] and Zwick and Paterson <ref> [8] </ref>. However, the pattern string that is used for the lower bound has a very simple periodicity structure. Theorem 3.1 Any prefix-matching algorithm must make at least b 2m1 m nc comparisons.
References-found: 8

