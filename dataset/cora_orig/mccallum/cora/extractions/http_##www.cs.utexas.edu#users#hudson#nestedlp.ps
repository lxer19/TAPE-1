URL: http://www.cs.utexas.edu/users/hudson/nestedlp.ps
Refering-URL: http://www.cs.utexas.edu/users/hudson/papers.html
Root-URL: 
Title: Nested Expressions in Logic Programs As an example, if not were declared as a prefix
Author: Vladimir Lifschitz, Lappoon R. Tang and Hudson Turner 
Note: DRAFT flfl  
Address: Austin  
Affiliation: University of Texas at  
Abstract: We extend the answer set semantics to a class of programs with nested expressions permitted in the bodies and heads of rules. These expressions are formed from literals using negation as failure, conjunction (,) and disjunction (;) that can be nested arbitrarily. Conditional expressions are introduced as abbreviations. The study of equivalent transformations of programs with nested expressions shows that any such program is equivalent to a set of disjunctive rules, possibly with negation as failure in the heads. The generalized answer set semantics is related to the Lloyd-Topor generalization of Clark's completion and to the logic of minimal belief and negation as failure.
Abstract-found: 1
Intro-found: 1
Reference: [ Apt et al., 1988 ] <author> Krzysztof Apt, Howard Blair, and Adrian Walker. </author> <title> Towards a theory of declarative knowledge. </title> <editor> In Jack Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 89-148. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: First, it is restricted to the propositional case. Second, it is stated in terms of "supported models" <ref> [ Apt et al., 1988 ] </ref> instead of completion, which allows us to extend the theory to infinite programs. For finite programs, the two definitions are equivalent. A (propositional) Lloyd-Topor rule is an expression of the form p F where p is an atom and F is a propositional formula.
Reference: [ Clark, 1978 ] <author> Keith Clark. </author> <title> Negation as failure. </title> <editor> In Herve Gallaire and Jack Minker, editors, </editor> <booktitle> Logic and Data Bases, </booktitle> <pages> pages 293-322. </pages> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1978. </year>
Reference-contexts: In Section 5, we study the relation of our proposal to the system of Lloyd and Topor [1984], who extended the completion semantics of <ref> [ Clark, 1978 ] </ref> to programs with arbitrary first-order formulas in the bodies of rules.
Reference: [ Fages, 1994 ] <author> Fran~cois Fages. </author> <title> Consistency of Clark's completion and existence of stable models. </title> <journal> Journal of Methods of Logic in Computer Science, </journal> <volume> 1 </volume> <pages> 51-60, </pages> <year> 1994. </year>
Reference-contexts: This is not surprising in view of the fact that the result of this replacement is a tight program (see [ Lifschitz, 1996 ] , and the result from <ref> [ Fages, 1994 ] </ref> reproduced there as Proposition 3.5). 6 Relation to MBNF In the propositional fragment of the logic of minimal belief and negation as failure (MBNF) [ Lifschitz, 1994 ] , formulas are built from atoms using propositional connectives and two modal operators: B ("minimal belief") and not .
Reference: [ Gelfond and Lifschitz, 1991 ] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> Classical negation in logic programs and disjunctive databases. </title> <journal> New Generation Computing, </journal> <volume> 9 </volume> <pages> 365-385, </pages> <year> 1991. </year> <month> 24 </month>
Reference-contexts: not (q; not r) as well? And while we are at it, we can also include disjunctions and conditional expressions, and thus extend the semantics to rules like p q; not r p (q ! r; s) : In this note we propose an extension of the answer set semantics <ref> [ Gelfond and Lifschitz, 1991 ] </ref> to a class of programs with nested expressions permitted in the rules. These expressions are formed from literals (atoms possibly preceded by the classical negation sign :) using the operators ; ; not (1) that can be nested arbitrarily. <p> bar is used instead of the semicolon to separate literals in the head of a rule. 2 This feature was found to be useful in abductive logic programming [ Inoue and Sakama, 1994 ] . 3 This definition of a rule generalizes the syntax of rules in the sense of <ref> [ Gelfond and Lifschitz, 1991 ] </ref> , and even of "disjunctive rules" (3). (We understand the head of (3) as ? if l = 0, and understand the body as &gt; if n = l.) For any formulas F , G and H, F ! G; H stands for the formula <p> For instance, the result of replacing the first occurrence of p in (4) by (q; r) is a formula, but the result of applying the same operation to the second occurrence is not. 3 Semantics Recall that the definition of an answer set <ref> [ Gelfond and Lifschitz, 1991 ] </ref> consists of two parts. First this concept is defined for the "basic" case of programs that do not contain negation as failure.
Reference: [ Herre and Wagner, 1997 ] <author> Heinrich Herre and Gerd Wagner. </author> <title> Stable models are generated by a stable chain. </title> <journal> Journal of Logic Programming, </journal> <volume> 30 </volume> <pages> 165-177, </pages> <year> 1997. </year>
Reference: [ Inoue and Sakama, 1994 ] <author> Katsumi Inoue and Chiaki Sakama. </author> <title> On positive occurrences of negation as failure. </title> <booktitle> In Proc. Fourth Int'l Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 293-304, </pages> <year> 1994. </year>
Reference-contexts: and G are formulas, called the head and the body of the rule. 1 In [ Lifschitz, 1996 ] , the vertical bar is used instead of the semicolon to separate literals in the head of a rule. 2 This feature was found to be useful in abductive logic programming <ref> [ Inoue and Sakama, 1994 ] </ref> . 3 This definition of a rule generalizes the syntax of rules in the sense of [ Gelfond and Lifschitz, 1991 ] , and even of "disjunctive rules" (3). (We understand the head of (3) as ? if l = 0, and understand the body
Reference: [ Lifschitz and Woo, 1992 ] <author> Vladimir Lifschitz and Thomas Woo. </author> <title> Answer sets in general nonmonotonic reasoning (preliminary report). </title> <editor> In Bernhard Nebel, Charles Rich, and William Swartout, editors, </editor> <booktitle> Proc. Third Int'l Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 603-614, </pages> <year> 1992. </year>
Reference-contexts: The translation of any program is an MBNF theory of the special type studied in <ref> [ Lifschitz and Woo, 1992 ] </ref> |a "theory with protected literals." This means that every occurrence of an atom in an axiom of this theory is a part of an expression of the form BL or not L, where L is a literal.
Reference: [ Lifschitz, 1994 ] <author> Vladimir Lifschitz. </author> <title> Minimal belief and negation as failure. </title> <journal> Artificial Intelligence, </journal> <volume> 70 </volume> <pages> 53-72, </pages> <year> 1994. </year>
Reference-contexts: the fact that the result of this replacement is a tight program (see [ Lifschitz, 1996 ] , and the result from [ Fages, 1994 ] reproduced there as Proposition 3.5). 6 Relation to MBNF In the propositional fragment of the logic of minimal belief and negation as failure (MBNF) <ref> [ Lifschitz, 1994 ] </ref> , formulas are built from atoms using propositional connectives and two modal operators: B ("minimal belief") and not . <p> As an example, note that, in application to (2), gives the formula :not p ^ not ? Bp : This translation is essentially an extension of the translation from Section 5 of <ref> [ Lifschitz, 1994 ] </ref> to programs with nested expressions. <p> Recall that models of a propositional MBNF theory are defined as the pairs (I; S), where I is an interpretation and S is a set of interpretations, that satisfy a certain fixpoint condition ( <ref> [ Lifschitz, 1994 ] </ref> , Section 4). The following theorem establishes a correspondence between the answer sets for a program and the models of the MBNF theory . For any set X of literals, by Mod (X) we denote the set of interpretations that satisfy all members of X.
Reference: [ Lifschitz, 1996 ] <author> Vladimir Lifschitz. </author> <title> Foundations of logic programming. </title> <editor> In Gerhard Brewka, editor, </editor> <booktitle> Principles of Knowledge Representation, </booktitle> <pages> pages 69-128. </pages> <publisher> CSLI Publications, </publisher> <year> 1996. </year>
Reference-contexts: In Section 4 we study equivalent transformations 2 of programs with nested expressions, and show that any such program can be equivalently transformed into a set of "disjunctive rules" in the sense of Section 5.1 of <ref> [ Lifschitz, 1996 ] </ref> |expressions of the form L 1 ; : : : ; L k ; not L k+1 ; : : : ; not L l L l+1 ; : : : ; L m ; not L m+1 ; : : : ; not L n (3) <p> Formulas are built from elementary formulas using the unary connective not and the binary connectives ; (conjunction) and ; (disjunction). A rule is an expression of the form F G where F and G are formulas, called the head and the body of the rule. 1 In <ref> [ Lifschitz, 1996 ] </ref> , the vertical bar is used instead of the semicolon to separate literals in the head of a rule. 2 This feature was found to be useful in abductive logic programming [ Inoue and Sakama, 1994 ] . 3 This definition of a rule generalizes the syntax <p> Proposition 1. For a program whose rules have the form (3), the definition of an answer set given above is equivalent to the definition from <ref> [ Lifschitz, 1996 ] </ref> . 4 Equivalent Transformations In this section we describe several equivalent transformations of programs with nested expressions. <p> This is not surprising in view of the fact that the result of this replacement is a tight program (see <ref> [ Lifschitz, 1996 ] </ref> , and the result from [ Fages, 1994 ] reproduced there as Proposition 3.5). 6 Relation to MBNF In the propositional fragment of the logic of minimal belief and negation as failure (MBNF) [ Lifschitz, 1994 ] , formulas are built from atoms using propositional connectives and <p> Proofs of Theorems A.1 Proof of Proposition 1 Proposition 1. For a program whose rules have the form (3), the definition of an answer set given in Section 3 is equivalent to the definition from <ref> [ Lifschitz, 1996 ] </ref> . The definition of an answer set in [ Lifschitz, 1996 ] differs from the one given in Section 3 above in two ways: the definition of closure under a basic program is different, and the definition of the reduct is different. <p> Proofs of Theorems A.1 Proof of Proposition 1 Proposition 1. For a program whose rules have the form (3), the definition of an answer set given in Section 3 is equivalent to the definition from <ref> [ Lifschitz, 1996 ] </ref> . The definition of an answer set in [ Lifschitz, 1996 ] differs from the one given in Section 3 above in two ways: the definition of closure under a basic program is different, and the definition of the reduct is different. Proposition 1 follows from two lemmas: Lemma 1. <p> X is closed under in the sense of Section 3 iff X is closed under in the sense of <ref> [ Lifschitz, 1996 ] </ref> . Lemma 2. Let be a program whose rules have the form (3), and let X, Y be logically closed sets of literals. Y is closed under X iff Y is closed under the reduct of relative to X in the sense of [ Lifschitz, 1996 ] <p> the sense of <ref> [ Lifschitz, 1996 ] </ref> . Lemma 2. Let be a program whose rules have the form (3), and let X, Y be logically closed sets of literals. Y is closed under X iff Y is closed under the reduct of relative to X in the sense of [ Lifschitz, 1996 ] . (According to the first lemma, there is no need to distinguish between the two meanings of "closed under" in the statement of the second lemma.) The proofs of both lemmas use the following observation: for any logically closed set X of literals and for any literal <p> On the other hand, X is closed under in the sense of <ref> [ Lifschitz, 1996 ] </ref> iff, for every rule (14) in , X includes at least one of the literals L 1 ; : : : ; L k provided that X includes L k+1 ; : : : ; L m . <p> On the other hand, the reduct of relative to X in the sense of <ref> [ Lifschitz, 1996 ] </ref> is defined as the program obtained from by 13 * deleting every rule (3) such that at least one of L k+1 ; : : : ; L l is not in X, or at least one of L m+1 ; : : : ; L n
Reference: [ Lin and Shoham, 1992 ] <author> Fangzhen Lin and Yoav Shoham. </author> <title> A logic of knowledge and justified assumptions. </title> <journal> Artificial Intelligence, </journal> <volume> 57 </volume> <pages> 271-289, </pages> <year> 1992. </year>
Reference: [ Lloyd and Topor, 1984 ] <author> John Lloyd and Rodney Topor. </author> <title> Making Prolog more expressive. </title> <journal> Journal of Logic Programming, </journal> <volume> 3 </volume> <pages> 225-240, </pages> <year> 1984. </year>
Reference-contexts: Program (2) does not satisfy condition (ii), and one of its two answer sets is a subset of the other. 5 Relation to the Lloyd-Topor Semantics The review of the Lloyd-Topor semantics below differs from its description in <ref> [ Lloyd and Topor, 1984 ] </ref> in two ways. First, it is restricted to the propositional case. Second, it is stated in terms of "supported models" [ Apt et al., 1988 ] instead of completion, which allows us to extend the theory to infinite programs.
Reference: [ Pearce, 1997 ] <author> David Pearce. </author> <title> A new logical characterization of stable models and answer sets. </title> <editor> In Jurgen Dix, Luis Pereira, and Teodor Przymusinski, editors, </editor> <booktitle> Non-Monotonic Extensions of Logic Programming (Lecture Notes in Artificial Intelligence 1216), </booktitle> <pages> pages 57-70. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year> <month> 25 </month>
References-found: 12

