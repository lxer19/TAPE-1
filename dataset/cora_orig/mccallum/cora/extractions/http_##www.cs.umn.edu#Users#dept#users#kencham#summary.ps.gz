URL: http://www.cs.umn.edu/Users/dept/users/kencham/summary.ps.gz
Refering-URL: http://www.cs.umn.edu/Users/dept/users/kencham/
Root-URL: http://www.cs.umn.edu
Title: Multi-Media Data Management  
Author: Deepak R. Kenchammana-Hosekote Jaideep Srivastava Duminda Wijesekara 
Date: March 25, 1994  
Address: Minneapolis, MN 55455  
Affiliation: University of Minnesota  Department of Computer Science University of Minnesota  
Note: Research at the  
Pubnum: (612)625-4012  
Abstract: This document gives an overview of our research effort in developing a digital shared (multi-user) integrated environment with multi-media data management at the University of Minnesota.
Abstract-found: 1
Intro-found: 1
Reference: [KHS93] <author> Deepak Kenchammana-Hosekote and Jaideep Srivastava. </author> <title> Data Placement for Continuous Media. </title> <type> Technical Report TR93-80, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <month> December </month> <year> 1993. </year> <note> Submitted for publication. </note>
Reference-contexts: This is because existing approaches to their design have not been able to support real-time retrieval, and maintain composition of such data stored on a disk. <ref> [KHS93] </ref> proposes a two step approach to designing the physical placement of CM streams. The first step describes the problem of allocating a sequence of blocks on the storage surface with the aim of providing the maximum rate during retrieval. This is the problem of the stream placement map computation.
Reference: [KHS94a] <author> Deepak Kenchammana-Hosekote and Jaideep Srivastava. </author> <title> Handling stream operations in a continuous media server. </title> <type> Technical report, </type> <institution> Department of Computer Science, University Of Min-nesota, </institution> <address> 200, Union Street, Minneapolis, MN 55455, </address> <month> March </month> <year> 1994. </year> <note> Submitted for Publication. </note>
Reference-contexts: The solution from such a model cannot be implemented because of the discrete nature of various schedulers, e.g. disk I/O, network, etc. We discuss transformation of this solution into a discrete one while ensuring deterministic servicing. 4.2 Stream Operations <ref> [KHS94a] </ref> discusses a model for scheduling storage devices to guarantee rate requirements for continuous media and implement VCR-like operations on such streams like SlowMotion, FastForward , ReversePlay , etc. It builds on a scheduling model detailed in [KHS94b] by classifying stream operations and analyzing their effect on this scheduling model.
Reference: [KHS94b] <author> Deepak Kenchammana-Hosekote and Jaideep Srivastava. </author> <title> Scheduling Continuous Media on a Video-On-Demand Server. </title> <booktitle> In International Conference on Multi-media Computing Systems, </booktitle> <address> Boston, MA, </address> <month> April </month> <year> 1994. </year> <note> IEEE. To appear. </note>
Reference-contexts: In <ref> [KHS94b] </ref> we discuss a model for deterministic schedulers, i.e. schedulers that guarantee rate requirements, for continuous media. By modelling such schedulers as a control system, significant design equations are derived. A simple, yet powerful, feasibility condition is deduced. <p> It builds on a scheduling model detailed in <ref> [KHS94b] </ref> by classifying stream operations and analyzing their effect on this scheduling model. The notion of the state of a scheduler is defined and the effect of stream operations on the state is discussed. <p> Problems associated with changing states are discussed with a focus on safe state changes, i.e. changing state such that no stream starves during the transition. The uniform safe toggling algorithm (USTA), proposed in <ref> [KHS94b] </ref> as a solution to the problem of VOD scheduling with integral quanta, is modified to effect state change. However, this algorithm is shown to be slow in changing states.
Reference: [KHWS93] <author> Deepak Kenchammana-Hosekote, Duminda Wijesekara, and Jaideep Srivastava. </author> <title> Fuzzy Intervals : A Framework for Modelling Approximate Synchronization in Multi-Media. </title> <type> Technical Report TR93-01, </type> <institution> Department of Computer Science, University of Minnesota, Minneapolis, MN, </institution> <month> January </month> <year> 1993. </year>
Reference-contexts: With the emergence of multi-media the notion of synchronization previously strict (in the sense that simultaneity, parallelism or sequencing of two streams of activity was describable by specifying time points in their execution histories), due to the grossness of human perception, can be relaxed. In <ref> [KHWS93] </ref>, [WKHS93] we investigate consequences of this new notion of synchrony and develop a hierarchical specification model based on [KKHLS92]. Relaxing synchronization points to time intervals make other known synchronization models special cases in this model. Algorithms to compile such multi-media specifications into service requirements have been developed.
Reference: [KKHLS92] <author> Woosaeng Kim, Deepak Kenchammana-Hosekote, Ee-Peng Lim, and Jaideep Srivastava. </author> <title> Synchronization Relation Tree : A Model for Temporal Synchronization in Multi-Media Presentations. </title> <type> Technical Report TR92-42(Revised), </type> <institution> University Of Minnesota, </institution> <year> 1992. </year>
Reference-contexts: This map is termed the stream composition map and we demonstrate its application in storing complex multi-media objects whose temporal synchronization is specified using the synchronization relation tree (SRT) model <ref> [KKHLS92] </ref>. The two mappings are proposed in the continuous domain. However, storage devices handle data in discrete units, e.g. disk blocks. To provide the transformation between continuous and discrete domains, we provide two discretizing transforms, namely the binary toggling algorithm and the adaptive toggling algorithm. <p> Their aim is to place data to minimize buffer requirement at retrieval time. 4 4.4 Synchronization Models and Media Mixing Schemes for specifying synchronization relations between multi-media data have important ramifications from user level specification to system level schedule generation. In <ref> [KKHLS92] </ref> we examine the problems of synchronizing multi-media objects in a multi-media presentation. We present a scheme to handle the general problem of temporal relationship specification and scheduling. The scheme proposes a two phased approach with a specification phase and a scheduling phase. <p> In [KHWS93], [WKHS93] we investigate consequences of this new notion of synchrony and develop a hierarchical specification model based on <ref> [KKHLS92] </ref>. Relaxing synchronization points to time intervals make other known synchronization models special cases in this model. Algorithms to compile such multi-media specifications into service requirements have been developed.
Reference: [WKHS93] <author> Duminda Wijesekara, Deepak Kenchammana-Hosekote, and Jaideep Srivastava. </author> <title> Specification and Use of Approximate Synchronization in multi-Media Presentations. </title> <institution> Technical Report ?, Department of Computer Science, University of Minnesota, </institution> <address> 200, Union Street, Minneapolis, MN 55455, </address> <month> December </month> <year> 1993. </year> <month> 5 </month>
Reference-contexts: With the emergence of multi-media the notion of synchronization previously strict (in the sense that simultaneity, parallelism or sequencing of two streams of activity was describable by specifying time points in their execution histories), due to the grossness of human perception, can be relaxed. In [KHWS93], <ref> [WKHS93] </ref> we investigate consequences of this new notion of synchrony and develop a hierarchical specification model based on [KKHLS92]. Relaxing synchronization points to time intervals make other known synchronization models special cases in this model. Algorithms to compile such multi-media specifications into service requirements have been developed.
References-found: 6

