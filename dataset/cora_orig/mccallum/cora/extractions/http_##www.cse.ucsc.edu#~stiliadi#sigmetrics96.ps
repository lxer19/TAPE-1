URL: http://www.cse.ucsc.edu/~stiliadi/sigmetrics96.ps
Refering-URL: http://www.cse.ucsc.edu/~stiliadi/projects.html
Root-URL: http://www.cse.ucsc.edu
Title: Design and Analysis of Frame-based Fair Queueing: A New Traffic Scheduling Algorithm for Packet-Switched Networks  
Author: Dimitrios Stiliadis and Anujan Varma 
Address: Santa Cruz, CA 95064  
Affiliation: Computer Engineering Department University of California  
Abstract: In this paper we introduce and analyze frame-based fair queueing, a novel traffic scheduling algorithm for packet-switched networks. The algorithm provides end-to-end delay bounds identical to those of PGPS (packet-level generalized processor sharing), without the complexity of simulating the fluid-model system in the background as required in PGPS. The algorithm is therefore ideally suited for implementation in packet switches supporting a large number of sessions. We present a simple implementation of the algorithm for a general packet switch. In addition, we prove that the algorithm is fair in the sense that sessions are not penalized for excess bandwidth they received while other sessions were idle. Frame-based fair queueing belongs to a general class of scheduling algorithms, which we call Rate-Proportional Servers. This class of algorithms provides the same end-to-end delay and burstiness bounds as PGPS, but allows more flexibility in the design and implementation of the algorithm. We provide a systematic analysis of this class of schedulers and obtain bounds on their fairness. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. K. Parekh and R. G. Gallager, </author> <title> "A generalized processor sharing approach to flow control the single node case," </title> <booktitle> in Proc. of INFOCOM '92, </booktitle> <volume> vol. 2, </volume> <pages> pp. 915-924, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: A backlogged session in the VirtualClock server can be starved for an arbitrary period of time as a result of excess bandwidth it received from the server when other sessions were idle <ref> [1] </ref>. Frame-based fair queueing (FFQ) is a sorted-priority algorithm, and therefore uses timestamps to order packet transmissions. However, it requires only O (1) time for the timestamp calculation independent of the number of sessions sharing the server. <p> However, PGPS also has the highest implementation complexity. VirtualClock has the same latency as PGPS, but is not a fair algorithm [3], <ref> [1] </ref>. Notice, however, that none of the other algorithms suffers from such a high level of unfairness. In SCFQ as well as the round-robin schedulers, the latency is a function of the number of connections that share the output link. <p> Let us assume that the kth packet leaves the system under the PRPS service discipline at time t P k . The same packet leaves the RPS server at time t F k . Using a similar approach as the one used for GPS servers <ref> [1] </ref>, we can prove the fol lowing lemma: Lemma 3: For all packets in a packet-by-packet rate proportional server, t k t k + r If we include the partial service received by packets in trans mission, the maximum lag in service for a session i in the packet-by-packet server occurs
Reference: [2] <author> A. Demers, S. Keshav, and S. Shenker, </author> <title> "Analysis and simulation of a fair queueing algorithm," Internetworking: </title> <journal> Research and Experience, </journal> <volume> vol. 1, no. 1, </volume> <pages> pp. 3-26, </pages> <year> 1990. </year>
Reference: [3] <author> L. Zhang, "VirtualClock: </author> <title> a new traffic control algorithm for packet switching networks," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 9, </volume> <pages> pp. 101-124, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Self-Clocked Fair Queueing (SCFQ) [4] enables timestamp computations to be performed in O (1) time and has fairness comparable to that of PGPS, but results in increased end-to-end delay bounds [11], [12]. The VirtualClock scheduling algorithm <ref> [3] </ref> provides the same end-to-end delay bound as that of PGPS with a simple timestamp computation algorithm, but the price paid is in terms of fairness. <p> However, PGPS also has the highest implementation complexity. VirtualClock has the same latency as PGPS, but is not a fair algorithm <ref> [3] </ref>, [1]. Notice, however, that none of the other algorithms suffers from such a high level of unfairness. In SCFQ as well as the round-robin schedulers, the latency is a function of the number of connections that share the output link.
Reference: [4] <author> S. Golestani, </author> <title> "A self-clocked fair queueing scheme for broadband applications," </title> <booktitle> in Proc. of INFOCOM '94, </booktitle> <pages> pp. 636-646, </pages> <publisher> IEEE, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: Timestamp computations in PGPS have a time-complexity of O (V ), where V is the number of sessions sharing the outgoing link. Self-Clocked Fair Queueing (SCFQ) <ref> [4] </ref> enables timestamp computations to be performed in O (1) time and has fairness comparable to that of PGPS, but results in increased end-to-end delay bounds [11], [12]. <p> Thus, if we represent the total amount of service received by each session by a function, then these functions can be seen to grow at the same rate for each backlogged session. Golestani <ref> [4] </ref> introduced such a function and called it virtual time. The virtual time of a backlogged session is a function whose rate of growth at each instant is exactly the rate of normalized service provided to it by the scheduler at that instant.
Reference: [5] <author> D. Ferrari and D. Verma, </author> <title> "A scheme for real-time channel establishment in wide-area networks," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 8, </volume> <pages> pp. 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference: [6] <author> M. Katevenis, S. Sidiropoulos, and C. Courcoubetis, </author> <title> "Weighted round-robin cell multiplexing in a general-purpose ATM switch chip," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 9, </volume> <pages> pp. 1265-79, </pages> <month> October </month> <year> 1991. </year>
Reference: [7] <author> M. Shreedhar and G. Varghese, </author> <title> "Efficient Fair Queueing using Deficit Round Robin," </title> <booktitle> in Proc. </booktitle> <address> SIGCOMM'95, pp.231-242, </address> <month> September </month> <year> 1995. </year>
Reference: [8] <author> H. Zhang and S. Keshav, </author> <title> "Comparison of rate based service disciplines," </title> <booktitle> in Proc. of ACM SIGCOMM '91, </booktitle> <pages> pp. 113-122, </pages> <year> 1991. </year>
Reference: [9] <author> C. Kalmanek, H. Kanakia, and S. Keshav, </author> <title> "Rate controlled servers for very high-speed networks," </title> <booktitle> in IEEE Global Telecommunications Conference, </booktitle> <pages> pp. </pages> <address> 300.3.1-300.3.9, </address> <month> December </month> <year> 1990. </year>
Reference: [10] <author> S. Golestani, </author> <title> "A framing strategy for congestion management," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 9, </volume> <pages> pp. 1064-1077, </pages> <month> September </month> <year> 1991. </year>
Reference: [11] <author> D. Stiliadis and A. Varma, </author> <title> "Latency-rate servers: A general model for analysis of traffic scheduling algorithms," </title> <booktitle> in Proc. of IEEE INFOCOM '96, </booktitle> <month> March </month> <year> 1996, </year> <note> also (http://www.cse.ucsc.edu/research/hsnlab/publications/). </note>
Reference-contexts: Self-Clocked Fair Queueing (SCFQ) [4] enables timestamp computations to be performed in O (1) time and has fairness comparable to that of PGPS, but results in increased end-to-end delay bounds <ref> [11] </ref>, [12]. The VirtualClock scheduling algorithm [3] provides the same end-to-end delay bound as that of PGPS with a simple timestamp computation algorithm, but the price paid is in terms of fairness. <p> Thus, a busy period may contain intervals during which the actual backlog of session i traffic in the system is zero; this occurs when the session receives an instantaneous service rate of more than i during the busy period. In <ref> [11] </ref>, we introduced a general model for traffic scheduling algorithms, called Latency-Rate (LR) servers. Any server in this class is characterized by two parameters: latency fi i and minimum allocated rate i . Let us assume that the jth busy period of connection i starts at time t . <p> That is, A i (t; t) i + i (t t ) during any time interval (t; t]. Also, we assume that session i is allocated a minimum rate of i in the network. We state without proof the following key result from <ref> [11] </ref>. <p> Note, that the maximum delay observed under SCFQ is even higher than this upper bound. A large value of the maximum delay may lead to increased burstiness and buffer requirements within the network, if the session is going through multiple hops. This is consistent with <ref> [11] </ref>, [12] where it was shown that the maximum delay for SCFQ increases with the number of connections sharing the outgoing link. The delays of sessions 2-7 are also lower in the FFQ server. The higher delays experienced in the SCFQ server are a result of its different fairness properties.
Reference: [12] <author> S. Golestani, </author> <title> "Network delay analysis of a class of fair queueing algorithms," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 13, </volume> <pages> pp. 1057-70, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: Self-Clocked Fair Queueing (SCFQ) [4] enables timestamp computations to be performed in O (1) time and has fairness comparable to that of PGPS, but results in increased end-to-end delay bounds [11], <ref> [12] </ref>. The VirtualClock scheduling algorithm [3] provides the same end-to-end delay bound as that of PGPS with a simple timestamp computation algorithm, but the price paid is in terms of fairness. <p> Note, that the maximum delay observed under SCFQ is even higher than this upper bound. A large value of the maximum delay may lead to increased burstiness and buffer requirements within the network, if the session is going through multiple hops. This is consistent with [11], <ref> [12] </ref> where it was shown that the maximum delay for SCFQ increases with the number of connections sharing the outgoing link. The delays of sessions 2-7 are also lower in the FFQ server. The higher delays experienced in the SCFQ server are a result of its different fairness properties.
Reference: [13] <author> J. Turner, </author> <title> "New directions in communications (or which way to the information age?)," </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 24, </volume> <pages> pp. 8-15, </pages> <month> October </month> <year> 1986. </year>
Reference-contexts: Only in the case of a fluid-server, packets can be arbitrarily small and thus W S i;j (t; t) may be continuous. To determine end-to-end delay bounds, we assume that traffic from session i at the source is leaky-bucket shaped <ref> [13] </ref>. That is, A i (t; t) i + i (t t ) during any time interval (t; t]. Also, we assume that session i is allocated a minimum rate of i in the network. We state without proof the following key result from [11].
Reference: [14] <author> D. Stiliadis and A. Varma, </author> <title> "Frame-based fair queueing:a new traffic scheduling algorithm for packet-switched networks," </title> <type> Tech. Rep. </type> <institution> UCSC-CRL-95-39, U.C. </institution> <address> Santa Cruz, http://www.cse.ucsc.edu/research/hsnlab/publications/. </address>
Reference-contexts: Lemma 1: If t is the beginning of a session-i busy period in a rate-proportional server, then t is also the beginning of an active period for session i. A proof of this and subsequent lemmas and theorems can be found in <ref> [14] </ref>. When connection i becomes active, its potential is the minimum among all backlogged connections, enabling it to receive service immediately. <p> Then, at any time t &gt; t that belongs in the same active period, the service offered to connection i is W i (t; t) i (t t ): This lemma is proved in <ref> [14] </ref>. Intuitively, this result asserts that the service of a backlogged connection is suspended only if it has received more service than its allocated rate earlier during the active period. A session busy period may actually consist of multiple session active periods. <p> By Lemma 2, the connection can receive less than its allocated bandwidth only during an inactive period. However, since no packets are waiting to be serviced in an inactive period, the connection busy period must have ended by then. The formal proof can be found in <ref> [14] </ref>. Thus, the definition of rate-proportional servers provides us a tool to design scheduling algorithms with zero latency. Since both GPS and VirtualClock can be considered as rate-proportional servers, by Theorem 2, they have the same worst-case delay behavior. A. <p> Then there is another session j, with P j (t) P i (t), that received more service in the fluid server than in the packet-by-packet server during the interval (0; t]. A proof of this lemma can be found in <ref> [14] </ref>. We will now use the above lemma and a method similar to the one presented in [15] for the PGPS server to find an upper bound for the amount of service a session may receive in PRPS as compared to that in the fluid server. <p> A formal proof of the lemma is given in <ref> [14] </ref>. B. Delay Analysis Based on the bounds on the discrepancy between the service offered by the packet-by-packet server and that by the fluid server at any time during a session busy period, we can bound the performance of the PRPS system using the worst-case performance of the fluid-system. <p> is, if P &lt; 1, then for all i; j 2 B (t 1 ; t 2 ) during the interval (t 1 ; t 2 ], fi fi ^ W i (t 1 ; t 2 ) j fi fi P: A proof of this theorem is given in <ref> [14] </ref>. The theorem applies to the fluid system. A real system can only use a packet-by-packet rate-proportional server. We will now expand the above theorem to prove that a similar relationship holds for the packet-by-packet version of the algorithm. <p> rate-proportional server, for every time interval (t 1 ; t 2 ] after time t that both connections became greedy, j j ^ W i (t 1 ; t 2 ) j L max + j L max + i (3.6) A proof of this theorem can be found in <ref> [14] </ref>. Since PGPS is a packet-by-packet rate proportional server with P = 0, we obtain the following result on the fairness of a PGPS scheduler by setting P = 0 in Eq. (3.6). <p> This flexibility in updating the frame will allow us to provide a simple implementation for the packet-by-packet version of the algorithm. We now state sequence of two lemmas to classify frame-based fair queueing as a rate-proportional server. Formal proofs can be found in <ref> [14] </ref>. <p> B. Fairness of Frame-based Fair Queueing Since frame-based fair queueing is a rate-proportional server, in order to analyze its fairness it is sufficient to prove that the difference between the system potential and the potential of any backlogged connection is always bounded. In <ref> [14] </ref>, we prove the following Lemma: Lemma 8: For every connection i that is backlogged at time t, P i (t) P (t) 2T r Note that the fastest way for the potential of a connection to reach the value P i (t) from the time that the frame was last <p> If this approach is used, the priority list implementation can be simplified as well by using the techniques described in [16]. The interested reader is referred to <ref> [14] </ref> for a correctness proof of the algorithm, and more details on its implementation. VI. Simulation Results The analysis in the previous sections showed that Frame-based Fair Queueing provides the same end-to-end delay bound as PGPS and bounded unfairness.
Reference: [15] <author> J. Rexford, A. Greenberg, and F. Bonomi, </author> <title> "A fair leaky-bucket shaper for ATM networks." </title> <type> AT&T unpublished report. </type>
Reference-contexts: A proof of this lemma can be found in [14]. We will now use the above lemma and a method similar to the one presented in <ref> [15] </ref> for the PGPS server to find an upper bound for the amount of service a session may receive in PRPS as compared to that in the fluid server.
Reference: [16] <author> J. L. Rexford, A. Greenberg, and F. Bonomi, </author> <title> "Hardware efficient fair queueing architectures for high-speed networks," </title> <booktitle> in Proc. of IEEE INFOCOM 96, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: Forcing the frame size to be a power of two enables the multiplication step to be implemented as a shift operation over b = log 2 F bits. If this approach is used, the priority list implementation can be simplified as well by using the techniques described in <ref> [16] </ref>. The interested reader is referred to [14] for a correctness proof of the algorithm, and more details on its implementation. VI. Simulation Results The analysis in the previous sections showed that Frame-based Fair Queueing provides the same end-to-end delay bound as PGPS and bounded unfairness.
Reference: [17] <author> O. Yaron and M. Sidi, </author> <title> "Performance and stability of communication networks via robust exponential bounds," </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> vol. 1, </volume> <pages> pp. 372-385, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: It is hoped that this framework will lead to the development of other algorithms in the future. Further work will include the analysis of frame-based fair queueing under probabilistic input traffic models, such as the exponentially-bounded-burstiness model <ref> [17] </ref>. We also plan to implement the algorithm in hardware using our FPGA-based ATM Simulation Testbed [18]. A network of switches will be simulated in order to evaluate the performance of the algorithm in conjunction with variable-bit-rate traffic.
Reference: [18] <author> D. Stiliadis and A. Varma, </author> <title> "FAST: an FPGA-based simulation testbed for ATM Networks," </title> <booktitle> in Proc. </booktitle> <volume> ICC '96, </volume> <month> June </month> <year> 1996. </year>
Reference-contexts: Further work will include the analysis of frame-based fair queueing under probabilistic input traffic models, such as the exponentially-bounded-burstiness model [17]. We also plan to implement the algorithm in hardware using our FPGA-based ATM Simulation Testbed <ref> [18] </ref>. A network of switches will be simulated in order to evaluate the performance of the algorithm in conjunction with variable-bit-rate traffic. Acknowledgments The authors would like to acknowledge the anonymous reviewers for their helpful comments.
References-found: 18

