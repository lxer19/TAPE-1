URL: ftp://cse.ogi.edu/pub/tech-reports/1998/98-013.ps.gz
Refering-URL: ftp://cse.ogi.edu/pub/tech-reports/README.html
Root-URL: http://www.cse.ogi.edu
Email: (crispin@cse.ogi.edu)  
Title: 1 Adaptation Space: Surviving Non-Maskable Failures  
Author: Crispin Cowan, Lois Delcambre, Anne-Francoise Le Meur, Ling Liu, David Maier, Dylan McNamee, Michael Miller, Calton Pu, Perry Wagle, and Jonathan Walpole 
Web: http://www.cse.ogi.edu/DISC/projects/heterodyne  
Affiliation: Department of Computer Science and Engineering Oregon Graduate Institute of Science Technology  
Abstract: Some failures cannot be masked by redundancies, because an unanticipated situation occurred, because fault-tolerance measures were not adequate, or because there was a security breach (which is not amenable to replication). Applications that wish to continue to offer some service despite non-maskable failure must adapt to the loss of resources. When numerous combinations of non-maskable failure modes are considered, the set of possible adaptations becomes complex. This paper presents adaptation spaces , a formalism for navigating among combinations of adaptations. An adaptation space describes a collection of possible adaptations of a software component or system, and provides a uniform way of viewing a group of alternative software adaptations. Adaptation spaces describe the different means for monitoring the conditions that different adaptations depend on, and the particular configurations through which an adaptive application navigate. Our goal is to use adaptation spaces to provide survivable services to applications despite non-maskable failures such as malicious attacks. We present the basic concepts concerning adaptation spaces, with examples. We then present a formal model for reasoning about and selecting alternative adaptations, allowing developers of survivable application to automate their systems adaptive behavior.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> AUSCERT. </author> <title> overflow_wrapper.c Wrap Programs to Prevent Command Line Argument Buffer Overrun Vulnerabilities. </title> <month> ftp://ftp.auscert.org.au/pub/ auscert/tools/overflow_wrapper , May </month> <year> 1997. </year>
Reference-contexts: Adaptation cases are the individual negotiated regions, and the use cases are the contract transition rules in the client callbacks. 3. Hardening of Components: A software component can be modified or wrapped <ref> [31, 1, 33] </ref> in order to check for out-of-range behavior, such as induced in an attack [13]. Such changes will generally be at the of expense efficiency, so they are candidates for adaptation spaces to manage these tradeoffs.
Reference: [2] <author> Veronica Baiceanu, Crispin Cowan, Dylan McNamee, Calton Pu, and Jonathan Walpole. </author> <title> Multimedia Applications Require Adaptive CPU Scheduling. In Workshop on Resource Allocation Problems in Multimedia Systems , Washington, </title> <address> DC, </address> <month> December </month> <year> 1996. </year>
Reference: [3] <author> Andrew P. Black. </author> <title> Object Identity. </title> <booktitle> In Proc. International Workshop on ObjectOriented Operating Systems , Asheville, </booktitle> <address> NC, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: While specialization classes could be employed in a non-object-oriented setting, they fit the object paradigm nicely, so we will explain them in those terms. A specialization plan is collection of specialization classes all implementing the same type. By type here we mean an interface composed of operation signatures <ref> [3, 17] </ref>. Each specialization class is described by giving the a specialization context, which is a predicate over the program state that must hold for the specialization class to function correctly. Some example predicates are: instance_variable_x == value instance_variable_y == instance_variable_z Specialization class predicates are conjunctions of these expressions.
Reference: [4] <author> Jeremy Casas, Ravi Konuru, Steve W. Otto, Robert M. Prouty, and Jonathan Walpole. </author> <title> Adaptive Load Migration Systems for PVM. </title> <booktitle> In Proceedings of Supercomputing 94 , pages 390399, </booktitle> <address> Washington, D.C., </address> <month> November </month> <year> 1994. </year>
Reference: [5] <author> Shanwei Cen, Calton Pu, Richard Staehli, Crispin Cowan, and Jonathan Walpole. </author> <title> A Distributed Real-Time MPEG Video Audio Player. </title> <booktitle> In Proceedings of the 1995 International Workshop on Network and Operating System Support for Digital Audio and Video (NOSSDAV95) , pages 151162, </booktitle> <address> New Hampshire, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: It might be some form of dynamic replugging of code used for specialization of a monolithic kernel [10], or it might be adjustment of configuration parameters, replanning a query, externalizing a programs state then reinitializing a different program from that state, turning on a software feedback loop <ref> [5] </ref>, and so forth. It might even be that no explicit change is needed when changing cases. <p> We also consider new kinds of adaptations that might enhance application survivability. 1. Quality of Service : Much of the current work in distributed multimedia systems looks at ways to intelligently manage quality of service, as seen at the application interface <ref> [5, 12, 28, 34] </ref>. Adaptation cases can represent tradeoffs between quality of service and resource consumption, such as video frame rate versus available bandwidth, or tradeoffs between different quality dimensions, such as frame rate versus spatial resolution.
Reference: [6] <author> Craig Chambers. </author> <title> Predicate Classes. </title> <booktitle> In Proceedings of the European Conference on Object-Oriented Programming (ECOOP93) , Kaiserstautern, </booktitle> <address> Germany, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: Finally, some cases provide properties that are so weak that the case is judged unacceptable by the designer. 3 2.1 Specialization Classes Adaptation spaces are a generalization of specialization classes [11, 32], which in turn generalize on predicate classes <ref> [6] </ref>. We begin by describing an example using specialization classes, and then expand the concepts to include the other capabilities of adaptation spaces. While specialization classes could be employed in a non-object-oriented setting, they fit the object paradigm nicely, so we will explain them in those terms.
Reference: [7] <author> C. Consel and O. Danvy. </author> <title> Tutorial notes on partial evaluation. </title> <booktitle> In ACM Symposium on Principles of Programming Languages , pages 493501, </booktitle> <year> 1993. </year>
Reference-contexts: Each specialization class indicates which of its methods should be specialized relative to its specialization context, exploiting the predicate to make the specialized methods more efficient than in the general case. Often specialization using predicates can be automated using partial evaluation <ref> [9, 8, 7] </ref>. For example, consider the read () operating system call. The general case handles numerous conditions, such as various kinds of files (including sockets and NFS file systems), concurrent writers, etc.
Reference: [8] <author> Charles Consel, Luke Hornoff, Jacque Noye, Francois Nol, </author> <note> and Eugen-Nicolae Volanschi. </note>
Reference-contexts: Each specialization class indicates which of its methods should be specialized relative to its specialization context, exploiting the predicate to make the specialized methods more efficient than in the general case. Often specialization using predicates can be automated using partial evaluation <ref> [9, 8, 7] </ref>. For example, consider the read () operating system call. The general case handles numerous conditions, such as various kinds of files (including sockets and NFS file systems), concurrent writers, etc.
References-found: 8

