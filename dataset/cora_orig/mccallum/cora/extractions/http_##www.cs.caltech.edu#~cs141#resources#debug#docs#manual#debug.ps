URL: http://www.cs.caltech.edu/~cs141/resources/debug/docs/manual/debug.ps
Refering-URL: http://www.cs.caltech.edu/~cs141/resources/debug/index.html
Root-URL: http://www.cs.caltech.edu
Title: IDebug: An Advanced Debugging Framework for Java  
Author: Joseph R. Kiniry 
Date: October 8, 1998  
Address: Mailstop 256-80, Pasadena, CA 91125  
Affiliation: Department of Computer Science, California Institute of Technology,  
Abstract: IDebug, the Infosphere's Debugging framework is an advanced debugging package for Java. This framework provides the standard core debugging and specification constructs such as assertions, debug levels, call stacks, and specialized exceptions. Additionally, the framework provides support for debugging distributed object systems via currying call stacks across virtual machine contexts and debug information logging with a variety of networking mediums including unicast, multicast, RMI, distributed events, and JavaSpaces. Finally, the framework supports debugging of mobile agent systems by providing mobile debug logs. Debugging functionality can be fine-tuned to a per-thread and/or a per-class basis, debugging contexts can be stored and recovered from persistent store, and several aspects of the debugging run-time are configurable at the meta level.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Graham Hamilton, Michael L. Powell, and James G. Mitchell. Subcontract: </author> <title> A flexible base for distributed programming. </title> <booktitle> In Proceeings of the 14th Symposium on Operating Systems Principles. </booktitle> <publisher> Sun Microsystems, Inc., </publisher> <month> December </month> <year> 1993. </year>
Reference-contexts: Because most object models enforce modularity and encapsulation, one must test both the implementation and the interface of a class. A specification of an interface is called a Contract <ref> [2, 3, 4, 1] </ref>. A class's contract specifies the externally visible behavior that a class fulfills. Contracts are typically specified via three constructs: preconditions and post-conditions on methods, and class invariants.
Reference: [2] <author> Richard Helm, Ian M. Holland, and Dipayan Gangopadhyay. </author> <title> Contracts: Specifying behavioral compositions in object-oriented systems. </title> <booktitle> In European Conference on Object-Oriented Programming/ACM Conference on Object-Oriented Programming Systems, Languages, and Applications, volume 25/10 of ACM SIGPLAN Notices, </booktitle> <pages> pages 169-180. </pages> <booktitle> ACM SIGPLAN: Programming Languages, </booktitle> <publisher> ACM Press and Addison-Wesley Publishing Company, </publisher> <month> October </month> <year> 1990. </year>
Reference-contexts: Because most object models enforce modularity and encapsulation, one must test both the implementation and the interface of a class. A specification of an interface is called a Contract <ref> [2, 3, 4, 1] </ref>. A class's contract specifies the externally visible behavior that a class fulfills. Contracts are typically specified via three constructs: preconditions and post-conditions on methods, and class invariants.
Reference: [3] <author> Ian M. Holland. </author> <title> Specifying reusable components using contracts. </title> <booktitle> In ACM Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 287-308. </pages> <booktitle> ACM SIGPLAN: Programming Languages, </booktitle> <publisher> ACM Press and Addison-Wesley Publishing Company, </publisher> <year> 1992. </year>
Reference-contexts: Because most object models enforce modularity and encapsulation, one must test both the implementation and the interface of a class. A specification of an interface is called a Contract <ref> [2, 3, 4, 1] </ref>. A class's contract specifies the externally visible behavior that a class fulfills. Contracts are typically specified via three constructs: preconditions and post-conditions on methods, and class invariants.
Reference: [4] <author> Bertrand Meyer. </author> <title> Object-Oriented Software Construction. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> 2nd edition, </address> <year> 1988. </year>
Reference-contexts: Because most object models enforce modularity and encapsulation, one must test both the implementation and the interface of a class. A specification of an interface is called a Contract <ref> [2, 3, 4, 1] </ref>. A class's contract specifies the externally visible behavior that a class fulfills. Contracts are typically specified via three constructs: preconditions and post-conditions on methods, and class invariants.
Reference: [5] <author> Bertrand Meyer. </author> <booktitle> Advances in Object-Oriented Software Engineering, chapter Design by Contract. </booktitle> <publisher> Prentice-Hall, Inc., </publisher> <year> 1992. </year>
Reference-contexts: application called JPP, the Java PreProcessor, that solves just this problem 6 . 6 The first version of JPP will be made available via the Infospheres Group releases web page in November, 1998 9 In short, JPP performs transformations of embedded program specification, in the form of design by contract <ref> [5] </ref> (DBC) predicates in documentation comments, into IDebug test code at compile time. Future versions of JPP will also perform code beautification, code standard conformance checking, code metric analysis, and documentation generation. 5 Conclusion IDebug is the most advanced debugging framework available today.
Reference: [6] <author> Daniel M. Zimmerman. UberNet: </author> <title> The Infospheres Network Layer User Guide, </title> <note> version 1.0a1 edition, February 1998. 11 </note>
Reference-contexts: Finally, we are investigating integrating IDebug with Dan Zimmerman's UberNet distributed messaging infrastructure <ref> [6] </ref>. Our primary goal is to support the currying of call stacks across execution contexts. This would mean that assertions and exceptions on remote (receiver) machines would have access to the call stack of the sending thread. 10 Thanks.
References-found: 6

