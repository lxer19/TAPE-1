URL: http://actor.cs.vt.edu/~vanmetre/symphony/papers/jpaper.ps
Refering-URL: http://actor.cs.vt.edu/~vanmetre/symphony/papers.html
Root-URL: http://www.cs.vt.edu
Title: Symphony: A Java-based Composition and Manipulation Framework for Distributed Legacy Resources  
Author: Ashish Shah Dennis Kafura 
Abstract: A problem solving environment (PSE) provides all computational facilities necessary for solving a target class of problems efficiently. PSEs are used primarily for domain-specific problem-solving in science and engineering and aim to ease the burden of advanced scientific computing. Scientific problem solving, however, often involves the use of legacy resources which are difficult to modify or port, and may be distributed on different machines. Existing PSEs provide little support for solving such problems in a generic framework. This thesis investigates the design of a platform-independent system that enables problem solving using legacy resources without having to modify legacy code. It presents Symphony, an open and extensible Java-based framework for composition and manipulation of distributed legacy resources. Symphony allows users to compose visually a collection of programs and data by specifying data-flow relationships among them and provides a client/server framework for transparently executing the composed application. Additionally, the framework is web-aware and helps integrate web-based resources with legacy resources. It also enables programmers to provide a graphical interface to legacy applications and to write visualization components. Symphony uses Sun Microsystems' JavaBeans component architecture for providing components that represent legacy resources. These components can be customized and composed in any standard JavaBeans builder tool. Executable components communicate with a server, implemented using Java Remote Method Invocation mechanism, for executing remote legacy applications. Symphony enables extensibility by providing abstract components which can be extended by implementing simple interfaces. Beans implemented from the abstract beans can act as data producers, consumers or filters.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ken Arnold and James Gosling. </author> <title> The Java Programming Language. </title> <publisher> Addison Wesley, </publisher> <address> MA, </address> <year> 1996. </year>
Reference-contexts: The software framework that allows composition and manipulation of these components is called a component architecture. Different components interact using standard client/server interaction models such as event notifications [17]. The Java programming language <ref> [1] </ref> and the JavaBeans component architecture [18] were used to implement Symphony components.
Reference: [2] <author> Craig Upson, Thomas Faulhaber, David Kamins, Davin Laidlaw, David Schlegel, Jeffrey Vroom, Robert Gurwitz, and Andries van Dam. </author> <title> The Application Visualization System: a Computational Environment for Scientific Visualization. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 30-42, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: Much of the design for Symphony's data-flow model draws from numerous earlier data-flow based systems such as Khoros [14] and AVS <ref> [2] </ref>. Khoros provides a visual programming environment called Cantata for specifying the flow of data to create a program for image-processing. Symphony borrows heavily from the Cantata data-flow architecture, but there are several differences between the two that must be noted.
Reference: [3] <institution> Department of Computer Sciences, Purdue University. </institution> <note> Problem Solving Environments. URL: http://www.cs.purdue.edu/research/cse/pses/, 1998. </note>
Reference-contexts: The need for a PSE increases with the complexity and heterogeneity of the application. Most existing PSEs are focused on providing problem-solving facilities for narrow application domains, such as solving partial differential equations (PDEs), data visualization, numerical analysis and others <ref> [3] </ref>. These PSEs are built around software libraries which are either modified or rewritten to adapt to the architecture of the PSE. Although these PSEs function very well in their own domain, they do not attempt to provide a generic framework for solving general-purpose science and engineering problems.
Reference: [4] <author> Dimple Bhatia, Vanco Burzevski, Maja Camuseva, Geoffrey Fox, Wojtek Furmanski and Girish Prem-chandran. </author> <title> Webflow a visual programming paradigm for web/java based coarse grain distributed computing. </title> <journal> Concurrency: Practice and Experience, </journal> <pages> pages 555-577, </pages> <month> June </month> <year> 1997. </year>
Reference-contexts: The first, named WebWork, aims at developing a collaboratory, multi-server problem solving environment on the Internet and integrating the field of high performance computing with Web technology [8, 7]. WebFlow, which is a part of the WebWork project, is a general-purpose Web-based visual programming environment for coarse-grained distributed computing <ref> [4] </ref>. The biggest difference between Symphony and WebFlow is that in WebFlow problem-solving modules have to be implemented in Java and it does not provide support for executing remote legacy applications. Symphony, on the other hand, provides remote access to legacy applications without requiring any modifications to these applications.
Reference: [5] <author> E. Houstis, J. Rice, S. Weerawarana, A. Catlin, P. Papachiou, K.-W. Wang and M. Gaitatzes. </author> <title> Parallel ELLPACK: A Problem-Solving Environment for PDE Based Applications on Multicomputer Platforms. </title> <journal> ACM Transactions on Mathematical Software, </journal> <note> (To Appear) 1998. </note>
Reference-contexts: Consider the example of Parallel ELLPACK (//ELLPACK), which is a problem solving environment for partial differential equations (PDEs) <ref> [5] </ref>. The //ELLPACK system consists of about one million lines of C, Lisp, and Fortran code. It's easy to see how complex it must be just to install a copy of the PSE on a new machine.
Reference: [6] <author> Efstratois Gallopoulos, Elias Houstis and John Rice. </author> <title> Computer as a Thinker/Doer: Problem Solving Environments for Computational Sciences. </title> <journal> IEEE Computational Science and Engineering, </journal> <pages> pages 11-23, </pages> <year> 1994. </year>
Reference-contexts: Some properties shared by all PSEs are that they allow a user to formulate a problem solution in a language suitable for the target class of problems and to view or assess the correctness of the solution through analysis or visualization tools <ref> [6] </ref>. Depending on the problem domain, different features are desired in a PSE. Some of these features are: collaboration, distributed computation, persistence of problem-solving sessions, user and server security, and automatic or semi-automatic selection of solution methods.
Reference: [7] <author> Geoffrey Fox and Wojtek Furmanski. </author> <title> Towards web/java-based high performance distributed computing an evolving virtual machine. </title> <booktitle> In Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing, </booktitle> <pages> pages 308-317, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: The first, named WebWork, aims at developing a collaboratory, multi-server problem solving environment on the Internet and integrating the field of high performance computing with Web technology <ref> [8, 7] </ref>. WebFlow, which is a part of the WebWork project, is a general-purpose Web-based visual programming environment for coarse-grained distributed computing [4].
Reference: [8] <author> Geoffrey Fox and Wojtek Furmanski. Petaops and exaops: </author> <title> Supercomputing on the web. </title> <booktitle> IEEE Internet Computing, </booktitle> <pages> pages 38-46, </pages> <year> 1997. </year> <month> 24 </month>
Reference-contexts: The first, named WebWork, aims at developing a collaboratory, multi-server problem solving environment on the Internet and integrating the field of high performance computing with Web technology <ref> [8, 7] </ref>. WebFlow, which is a part of the WebWork project, is a general-purpose Web-based visual programming environment for coarse-grained distributed computing [4].
Reference: [9] <author> Henri Casanova, Jack Dongarra and Keith Moore. </author> <title> Network Enabled Solvers and the NetSolve Project. </title> <journal> SIAM News, Society for Industrial and Applied Mathematics, </journal> <month> January-February </month> <year> 1998. </year>
Reference-contexts: Javamatic does not provide such extensibility. NetSolve is a system that provides C, Fortran and Java APIs and Matlab and Java interfaces to scientific software libraries for solving computational science problems in a fault-tolerant environment on distributed computing resources <ref> [9] </ref>. A numerical library on a compute server is described using the NetSolve descriptive language in a machine-independent way. The description file can be compiled into an executable program on any Unix platform.
Reference: [10] <author> Philip Isenhour. </author> <title> Sieve: A Java-Based Framework for Collaborative Component Composition. </title> <type> Master's thesis, </type> <institution> Virginia Tech, Blacksburg, VA, </institution> <year> 1998. </year>
Reference-contexts: The Program bean does not have to be aware of the underlying differences in the communication mechanisms used. 7.4 Collaborative Composition in Sieve This section describes how the Symphony beans were adapted for collaborative composition the Sieve <ref> [10] </ref> environment. Sieve provides a JavaBeans-based shared workspace where multiple users can collaboratively add, edit, and link components to build a network of components. It provides an ability for existing JavaBeans-based applications, like Symphony, that adhere to standard beans mechanisms to be used in a collaborative manner.
Reference: [11] <author> John Ambrosiano, Steve Fines and Mladen Vouk. </author> <booktitle> Problem-Solving Environments in the Year 2000 and Beyond, </booktitle> <year> 1995. </year>
Reference-contexts: In fact, hardly any existing PSE or PSE-like system includes many of the features described above. Problem solving environments have predominantly focused on science and engineering applications <ref> [11, 16] </ref>. In this paper too, the term PSE will be interpreted with this application domain in mind.
Reference: [12] <author> K. Mani Chandy, Adam Rifkin, Paolo Sivilotti, Jacob Mandelson, Matthew Richardson, Wesley Tanaka and Luke Weisman. </author> <title> A world-wide distributed system using java and the internet. </title> <booktitle> In Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing, </booktitle> <pages> pages 11-18, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: The Infospheres Infrastructure, being developed at Caltech by Chandy et. al is a distributed system framework implemented in Java that provides mechanisms for programmers to develop distributed system components from which distributed applications can be created <ref> [12, 13, 20] </ref>. It provides a variety of messaging models, including asynchronous, synchronous, and remote procedure/method calls and a variety of distributed system services, including local and global naming, object instance control, object persistence, and others.
Reference: [13] <author> K. Mani Chandy, Joseph Kiniry, Adam Rifkin and Daniel Zimmerman. </author> <title> A Framework for Structured Distributed Object Computing. </title> <type> Technical Report 256-80, </type> <year> 1997. </year>
Reference-contexts: The Infospheres Infrastructure, being developed at Caltech by Chandy et. al is a distributed system framework implemented in Java that provides mechanisms for programmers to develop distributed system components from which distributed applications can be created <ref> [12, 13, 20] </ref>. It provides a variety of messaging models, including asynchronous, synchronous, and remote procedure/method calls and a variety of distributed system services, including local and global naming, object instance control, object persistence, and others.
Reference: [14] <institution> Khoral Research, Inc. </institution> <note> What is khoros? URL: http://www.khoral.com/khoros/whatis.html, 1998. </note>
Reference-contexts: Much of the design for Symphony's data-flow model draws from numerous earlier data-flow based systems such as Khoros <ref> [14] </ref> and AVS [2]. Khoros provides a visual programming environment called Cantata for specifying the flow of data to create a program for image-processing. Symphony borrows heavily from the Cantata data-flow architecture, but there are several differences between the two that must be noted.
Reference: [15] <author> Constantinos Phanouriou and Marc Abrams. </author> <title> Transforming Command-line Driven Systems to Web Applications. </title> <booktitle> In Proceedings of the Sixth International World Wide Web Conference, </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: Often times, the user has to go through a lengthy process of obtaining accounts on the remote servers, logging in, setting up the required software for execution, and manually collecting the 7 results. Javamatic is a system for providing a Web-based interface to a remote command-line application <ref> [15] </ref>. It generates a user interface (UI) in the form of a Java applet from a high-level description of the application and a set of UI mapping rules. The Javamatic server obtains the parameter string from the applet and invokes the legacy application.
Reference: [16] <author> John Rice and Ronald Boisvert. </author> <title> From Scientific Software Libraries to Problem-Solving Environments. </title> <journal> IEEE Computational Science and Engineering, </journal> <pages> pages 44-53, </pages> <year> 1996. </year>
Reference-contexts: In fact, hardly any existing PSE or PSE-like system includes many of the features described above. Problem solving environments have predominantly focused on science and engineering applications <ref> [11, 16] </ref>. In this paper too, the term PSE will be interpreted with this application domain in mind.
Reference: [17] <author> Robert Orfali, Dan Harkey and Jeri Edwards. </author> <title> The Essential Distributed Objects Survival Guide. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, NY, </address> <year> 1996. </year>
Reference-contexts: The software framework that allows composition and manipulation of these components is called a component architecture. Different components interact using standard client/server interaction models such as event notifications <ref> [17] </ref>. The Java programming language [1] and the JavaBeans component architecture [18] were used to implement Symphony components.
Reference: [18] <author> Sun Microsystems, Inc. </author> <title> The JavaBeans (tm) API Specification. </title> <address> URL: http://www.javasoft.com/- beans/docs/beans.101.pdf, </address> <year> 1997. </year>
Reference-contexts: The software framework that allows composition and manipulation of these components is called a component architecture. Different components interact using standard client/server interaction models such as event notifications [17]. The Java programming language [1] and the JavaBeans component architecture <ref> [18] </ref> were used to implement Symphony components. Since JavaBeans is an open, published API for developing components in Java and is supported by a large number of Java development tools and Java runtime environments, beans that conform to the API can be composed and manipulated within any such beans container. <p> Cantata allows workspaces to be saved as stand-alone applications which can be executed from the commandline. This is not yet possible in Symphony because of the limitations of the current JavaBeans architecture. It is expected that the next version of the beans architecture code-named "Glasgow" <ref> [18] </ref>, will open up a new set of capabilities for bean aggregation which enable this capability. 3.2 Systems for Remote Access to Legacy Resources: Legacy software applications are applications that are generally run from the command-line, have limited user interaction, and communicate using specially formatted files.
Reference: [19] <author> Sun Microsystems, Inc. </author> <title> The JDBC Database Access API. </title> <address> URL: http://www.javasoft.com/products/- jdbc/, </address> <year> 1998. </year>
Reference-contexts: The decision to use unformatted byte streams simplifies the data-flow interface between beans, but also entails extra work in the source and sink beans if the data to be transferred must has a structured format. For example, if the data is obtained as a result of a JDBC query <ref> [19] </ref> on a remote SQL database (obtained as a java.sql.ResultSet object), it must first be encapsulated by the source bean into a byte stream represented by an InputStream object.
Reference: [20] <author> The Infospheres Research Group. </author> <title> The Infospheres Infrastructure User Guide. </title> <address> URL: http://www.- infospheres.caltech.edu/, </address> <year> 1998. </year> <month> 25 </month>
Reference-contexts: The Infospheres Infrastructure, being developed at Caltech by Chandy et. al is a distributed system framework implemented in Java that provides mechanisms for programmers to develop distributed system components from which distributed applications can be created <ref> [12, 13, 20] </ref>. It provides a variety of messaging models, including asynchronous, synchronous, and remote procedure/method calls and a variety of distributed system services, including local and global naming, object instance control, object persistence, and others.
References-found: 20

