URL: http://www.cs.dartmouth.edu/~brd/f/algorithmica-2.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~brd/www/
Root-URL: http://www.cs.dartmouth.edu
Title: Provably Good Approximation Algorithms for Optimal Kinodynamic Planning for Cartesian Robots and Open Chain Manipulators 1  
Author: Bruce R. Donald Patrick G. Xavier 
Keyword: robot motion planning, optimal control, polynomial-time *-approximation algorithm, time-optimal trajectory, full dynamics, shortest path, kinodynamics, polyhedral obstacles and the geometric complexity.  
Address: Ithaca NY 14853-7501  Albuquerque NM 87185-0951  
Affiliation: Department of Computer Science, Cornell University,  Sandia National Laboratories,  
Abstract: In optimal kinodynamic planning, given a robot system, we must find a minimal-time trajectory that goes from a start state to a goal state while avoiding obstacles by a speed-dependent safety-margin and respecting dynamics bounds. With Canny and Reif [1], we approached this problem from an *-approximation standpoint and introduced a provably-good approximation algorithm for optimal kinodynamic planning for a robot obeying particle dynamics. If a solution exists, this algorithm returns a trajectory *-close to optimal in time polynomial in both ( 1 We extend [1, 2] to d-link 3D robots with full rigid-body dynamics amidst obstacles. Specifically, we describe polynomial-time approximation algorithms for Cartesian robots obeying L 2 dynamics bounds and for open-kinematic-chain manipulators with revolute and prismatic joints. The latter class includes many industrial manipulators. The correctness and complexity of these 1 This paper describes research done at the Computer Science Robotics Laboratory at Cornell University. algorithms rely on new trajectory tracking lemmas for robots with coupled dynamics bounds.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Canny, B. Donald, J. Reif, and P. Xavier. </author> <title> On the complexity of kinodynamic planning. </title> <booktitle> In Proceedings of the 29 th Annual Symposium on the Foundations of Computer Science, </booktitle> <pages> pages 306-316, </pages> <address> White Plains, New York, </address> <year> 1988. </year>
Reference-contexts: Generalizing the early results and relaxing these assumptions are essential if algorithmic analysis is to have an impact in the theory and practice of robotics, particularly in motion planning. As described in our companion paper, [3], the kinodynamic planning problem 2 <ref> [1, 2] </ref> is to synthesize a robot motion subject to simultaneous kinematic constraints and dynamics constraints, including the dynamics laws that govern the motion. A kinodynamic solution is a trajectory specification, such as a start state and a mapping from time to generalized forces or accelerations. <p> Furthermore, the running time of the algorithm is polynomial in both 1 * and the geometric complexity of the problem. <ref> [1] </ref> provided a provably-good polynomial-time approximation algorithm for 2- and 3-dimensional optimal kinodynamic planning in the restricted case of particle dynamics. [3, 5] modify this algorithm to improve the accuracy and complexity. <p> Our algorithms find two types of trajectories: ones that obey piecewise-constant extremal controls, and ones that obey piecewise-constant near-extremal accelerations. The algorithms have asymptotic complexity bounds and branching factors (in the search) lower than those for the approximation algorithm of [6-8], which also generalizes the results of <ref> [1] </ref> to d-link open-chain manipulators. 2 [2] is the journal revision of [1]. 1 2 Kinodynamic Motion Planning for Robots With Coupled Dynamics Bounds 2.1 A More General Kinodynamic Planning Problem We now reformulate the optimal and *-optimal kinodynamic planning problems to accommodate a wider class of robots than covered by <p> The algorithms have asymptotic complexity bounds and branching factors (in the search) lower than those for the approximation algorithm of [6-8], which also generalizes the results of <ref> [1] </ref> to d-link open-chain manipulators. 2 [2] is the journal revision of [1]. 1 2 Kinodynamic Motion Planning for Robots With Coupled Dynamics Bounds 2.1 A More General Kinodynamic Planning Problem We now reformulate the optimal and *-optimal kinodynamic planning problems to accommodate a wider class of robots than covered by our companion paper [3]. <p> In a further simplification, all the dynamics bounds are sometimes given in an L p -norm, e.g., for p = 2 ka (t)k 2 a: We consider the L 2 -norm in this paper, whereas in <ref> [1, 3] </ref> we used the L 1 -norm. The dynamics laws and dynamics bounds that apply to a robot are its dynamics constraints. <p> Together, the kinodynamic bounds and M are the kinodynamic specifications of the robot. As before <ref> [1, 3] </ref>, the quality of a solution is measured in terms of an approximation parameter *. <p> Our algorithms are *-approximation schemes that are fully polynomial in the combinatorial complexity of the geometry and pseudo-polynomial in the kinodynamic specifications. As in <ref> [1] </ref>, a key intuition is to reduce the problem to searching a graph whose edges correspond to "primitive" trajectory segments. Formally stated, we show the following: Theorem 2.1 Let a and v be velocity and acceleration bounds, respectively. <p> Finally, we note that the True Extremal Algorithm is more theoretical than the Near-Extremal Algorithm, and that for a given robot it yields a larger c D or c E . 5 2.3 Previous and Related Work <ref> [1, 2] </ref> address the problem of kinodynamic planning for a point robot with L 1 -norm velocity bound v and acceleration bound a in an environment with polyhedral obstacles. [1] provide the first formulation of kinodynamic planning as an approximation problem and obtain the first provable polynomial-time approximation algorithm for kinodynamic <p> that for a given robot it yields a larger c D or c E . 5 2.3 Previous and Related Work [1, 2] address the problem of kinodynamic planning for a point robot with L 1 -norm velocity bound v and acceleration bound a in an environment with polyhedral obstacles. <ref> [1] </ref> provide the first formulation of kinodynamic planning as an approximation problem and obtain the first provable polynomial-time approximation algorithm for kinodynamic planning in more than one dimension. <p> A review of the body of previous and related work on planning robotic motions subject to dynamics constraints and obstacle avoidance can be found in [3] and in <ref> [1] </ref> itself. The key innovation that differentiates [1] from previous graph-search-based algorithms for motion planning is that the parameters of the reachability graph guarantee that if the kinodynamic planning problem instance is solvable, then the shortest path in the graph from the root vertex to some vertex approximating the problem goal <p> A review of the body of previous and related work on planning robotic motions subject to dynamics constraints and obstacle avoidance can be found in [3] and in <ref> [1] </ref> itself. The key innovation that differentiates [1] from previous graph-search-based algorithms for motion planning is that the parameters of the reachability graph guarantee that if the kinodynamic planning problem instance is solvable, then the shortest path in the graph from the root vertex to some vertex approximating the problem goal will yield an *-optimal kinodynamic trajectory. <p> Through a coordinate transformation, all these algorithms can be applied to kinodynamic planning for a Cartesian robot with L 1 -norm dynamics bounds and polyhedral C-space obstacles. Jacobs, et al. [6-8] 3 built on the methods in <ref> [1] </ref> to obtain the first polynomial-time approximation algorithm for optimal kinodynamic planning for open chain manipulators | the first for robot systems with state-dependent dynamics. <p> The second uses piecewise-constant, near-extremal accelerations, and we call it "the Near-Extremal Algorithm". 3.1.1 The Basic Idea Our algorithms transform the problem of finding an approximately optimal trajectory to that of finding the shortest path in a directed graph. In a general sense, we follow the technique from <ref> [1] </ref>: (a) the vertices of the graph are states in T C; (b) the graph is a reachability graph, whose root vertex approximates the start state and whose edges are (1 *)ffi v (c 0 ; c 1 )-safe trajectory segments; (c) these (1 *)ffi v (c 0 ; c 1 <p> Since we will use the notion of a "slowed-down" trajectory often, we now formalize two definitions, as in <ref> [1] </ref>. Definition 3.1 Let r : [0; T f ] ! T C, and suppose that * 0. <p> Then the *-time-rescaled state X 0 = (x 0 ; _ x 0 ) is defined by: x 0 = x 1+* _ x: These two definitions are important because our proofs extensively utilize dynamical properties associated with states in rescaled trajectories. As in the algorithm of <ref> [1] </ref>, in our new algorithms the root vertex of the reachability graph will approximate the *-time-rescaled start state in the kinodynamic planning problem instance. <p> The basic idea is that if there exists a solution r to the problem instance, then some graph trajectory will track 0 r closely enough to be *-optimal. The algorithms presented here differ from the <ref> [1, 2] </ref> and [3] algorithms in three important ways. First, the control primitives our new algorithms use to generate the reachability graph correspond to extremal or near-extremal accelerations that differ from their "neighbors" 7 by O (*). <p> Thus, a -grid, a timestep t , and a choice of origin in C induce an underlying regular T C-grid. If S fl is the root vertex of a reachability graph, then the number of its vertices is bounded above by the number of T C-gridpoints. (See <ref> [1, 2] </ref> and ensuing work such as [3, 6, 17, 18].) For Cartesian robots, the sets b A X are easily computed, and hence the Near-Extremal Algorithm for Cartesian robots uses (; t )-bangs as described above to generate a reacha bility graph. (; t )-bangs are defined formally in the <p> For example, if a (; t )-bang results in the transition from state, X to state Y, we say there is (; t )-bang from X to Y. 3.2 Key Concepts To show the correctness of our algorithms, we will follow the general technique from <ref> [1] </ref>. <p> We will formalize the notion of an acceleration advantage and generalize it to sets of acceleration functions, and we will use and prove two tracking lemmas that are more general than the ones in <ref> [1, 3, 6, 8, 18] </ref> and yield tighter complexity bounds for our algorithms than those obtained in [6, 8, 18]. 3.2.1 Overview As in [1], tracking is a key concept. <p> advantage and generalize it to sets of acceleration functions, and we will use and prove two tracking lemmas that are more general than the ones in [1, 3, 6, 8, 18] and yield tighter complexity bounds for our algorithms than those obtained in [6, 8, 18]. 3.2.1 Overview As in <ref> [1] </ref>, tracking is a key concept. Definition 3.3 Let a and b be trajectories, and suppose that for all t 2 [0; T ] kp a (t) p b (t)k 1 x ; and (14) Then we say that a tracks b to tolerance ( x ; v ). <p> Furthermore, for all t 2 [0; T ], a (t) approximates b (t) to tolerance ( x ; v ). 13 The Safe Tracking Lemma <ref> [1] </ref> relates c 0 , c 1 , and * to a family of tracking tolerances. <p> Since * &lt; 1, S 0 and G 0 are within O (*) of S and G. It follows that q (0) and q ((1 + *)T opt ) will also be within O (*) of S and G. Following an analysis similar to that found in <ref> [1] </ref>, we observe that if a Cartesian robot trajectory r respects L 2 dynamics bounds a and v, then the *-time-rescaled trajectory 0 r will respect bounds a 0 and v 0 that are smaller than a and v by an fi (*) factor. <p> This is also true for open-chain manipulators as long as the force bound f is great enough to overcome gravity in all configurations when the robot is stationary. At this point, we introduce techniques that significantly extend those in <ref> [1] </ref>. In Sections 3.2.3 and 3.2.4 we generalize from feasible instantaneous accelerations to state-dependent sets of acceleration functions and formalize an appropriate notion of acceleration advantage over a time interval. <p> Lemma 3.1 (The Safe Tracking Lemma <ref> [1] </ref>) Suppose that ffi v is specified by c 0 and c 1 and that r is a ffi v -safe trajectory relative to the C-space obstacles. Let 0 &lt; * &lt; 1, and let 14 ffi v 0 = (1 *)ffi v . <p> Furthermore, for any positive fi, the following choices suffice: v c 0 * x fi v : The lemma is independent of norm, as long as a particular norm is consistently used, and distances and velocities are in T C. A proof is found in <ref> [1] </ref>. If we wish the safety margin to correspond to the distance between the physical robot and the obstacles, then x can be divided by the maximum modulus of the forward kinematic map. <p> any d-vector of 1's and -1's there is a d-vector ^ of 1's and -1's such that if ka (t)k 1 a (1+*) 2 , then for each dimension i i (^ i a a i (t)) (1 + *) 2 : Therefore, a trajectory obeying (a; t )-bang control <ref> [1, 3] </ref> can always out-accelerate the *- time-rescaled trajectory 0 r by an (1+*) 2 margin in any direction over the entirety of a timestep, as long as this would not violate the velocity bound. <p> Specifically, v c 0 * x fi v : It is simplest to choose fi = 1, which implies x = v . However, by using a technique from <ref> [1] </ref> we show how to choose fi to minimize the bound on the possible size of the reachability graph searched by the Near-Extremal Algorithm applied to a Cartesian robot with L 2 acceleration and velocity bounds a and v. <p> is checked by affinely growing the workspace obstacles and checking for intersections along the trajectory. (Recall the discussion of ffi v -safety in Section 2.1.) We describe a C-space obstacle representation and a robot-obstacle collision detection method that can be generalized to a safety-checking method similar to that described in <ref> [1, 3] </ref> and reviewed above. <p> (c d N (d + log N ) 1 * ) 6d1 ) bound is derived by arguing that p (N; *; d) = O (N (d + log N )). 6 Conclusions In this paper we obtained provably good approximation algorithms for kinodynamic planning that extend the results of <ref> [1] </ref> to open kinematic chains and to Cartesian robots obeying L 2 -norm dynamics bounds. These algorithms find trajectories that are approximately optimal with respect to a possibly speed-dependent safety margin. We presented algorithms that find near-extremal trajectories and algorithms that find truly extremal trajectories. <p> For many robot systems with non-holonomic constraints, such as wheeled mobile robots, this is not so. A tracking lemma for such robots would allow us to extend the general <ref> [1] </ref> approach to them. 4. We have so far used a single parameter * to characterize closeness to optimality. In a finer analysis, we would use parameters * T and * S to separately describe closeness to optimality in execution time and in observance of the safety margin. <p> Support for our robotics research there is provided in part by the National Science Foundation under grants No. IRI-8802390, IRI-9000532 and by a Presidential Young Investigator award, and in part by the Mathematical Sciences Institute, Intel Corporation, and AT&T Bell laboratories. 2. [2] is the journal revision of <ref> [1] </ref>. 3. We will refer to this body of work as [6, 8]. 4. The [6, 8] result preceded the [16, 17] result. 5. Recall equation (23). 6.
Reference: [2] <author> B. Donald, P. Xavier, J. Canny, and J. Reif. </author> <title> Kinodynamic motion planning. </title> <journal> Journal of the ACM, </journal> <volume> 40(5), </volume> <month> November </month> <year> 1993. </year> <note> Journal version of [1]. </note>
Reference-contexts: Generalizing the early results and relaxing these assumptions are essential if algorithmic analysis is to have an impact in the theory and practice of robotics, particularly in motion planning. As described in our companion paper, [3], the kinodynamic planning problem 2 <ref> [1, 2] </ref> is to synthesize a robot motion subject to simultaneous kinematic constraints and dynamics constraints, including the dynamics laws that govern the motion. A kinodynamic solution is a trajectory specification, such as a start state and a mapping from time to generalized forces or accelerations. <p> The algorithms have asymptotic complexity bounds and branching factors (in the search) lower than those for the approximation algorithm of [6-8], which also generalizes the results of [1] to d-link open-chain manipulators. 2 <ref> [2] </ref> is the journal revision of [1]. 1 2 Kinodynamic Motion Planning for Robots With Coupled Dynamics Bounds 2.1 A More General Kinodynamic Planning Problem We now reformulate the optimal and *-optimal kinodynamic planning problems to accommodate a wider class of robots than covered by our companion paper [3]. <p> Finally, we note that the True Extremal Algorithm is more theoretical than the Near-Extremal Algorithm, and that for a given robot it yields a larger c D or c E . 5 2.3 Previous and Related Work <ref> [1, 2] </ref> address the problem of kinodynamic planning for a point robot with L 1 -norm velocity bound v and acceleration bound a in an environment with polyhedral obstacles. [1] provide the first formulation of kinodynamic planning as an approximation problem and obtain the first provable polynomial-time approximation algorithm for kinodynamic <p> The basic idea is that if there exists a solution r to the problem instance, then some graph trajectory will track 0 r closely enough to be *-optimal. The algorithms presented here differ from the <ref> [1, 2] </ref> and [3] algorithms in three important ways. First, the control primitives our new algorithms use to generate the reachability graph correspond to extremal or near-extremal accelerations that differ from their "neighbors" 7 by O (*). <p> Thus, a -grid, a timestep t , and a choice of origin in C induce an underlying regular T C-grid. If S fl is the root vertex of a reachability graph, then the number of its vertices is bounded above by the number of T C-gridpoints. (See <ref> [1, 2] </ref> and ensuing work such as [3, 6, 17, 18].) For Cartesian robots, the sets b A X are easily computed, and hence the Near-Extremal Algorithm for Cartesian robots uses (; t )-bangs as described above to generate a reacha bility graph. (; t )-bangs are defined formally in the <p> Support for our robotics research there is provided in part by the National Science Foundation under grants No. IRI-8802390, IRI-9000532 and by a Presidential Young Investigator award, and in part by the Mathematical Sciences Institute, Intel Corporation, and AT&T Bell laboratories. 2. <ref> [2] </ref> is the journal revision of [1]. 3. We will refer to this body of work as [6, 8]. 4. The [6, 8] result preceded the [16, 17] result. 5. Recall equation (23). 6.
Reference: [3] <author> B. Donald and P. Xavier. </author> <title> Provably good approximation algorithms for optimal ki-nodynamic plans: Robots with decoupled dynamics bounds. </title> <note> Companion paper in Algorithmica, ? 199? </note>
Reference-contexts: Optimization issues|such as finding the "fastest" path|are often ignored. Generalizing the early results and relaxing these assumptions are essential if algorithmic analysis is to have an impact in the theory and practice of robotics, particularly in motion planning. As described in our companion paper, <ref> [3] </ref>, the kinodynamic planning problem 2 [1, 2] is to synthesize a robot motion subject to simultaneous kinematic constraints and dynamics constraints, including the dynamics laws that govern the motion. <p> This margin is incorporated into the kinodynamic constraints. An important problem is to synthesize time-optimal kinodynamic solutions, which require minimal time with respect to the kino-dynamic constraints. This problem is NP-hard in three dimensions <ref> [3, 4] </ref>, and thus it is reasonable to develop approximation algorithms. A provably-good polynomial-time approximation algorithm for kinodynamic planning is guaranteed to find a solution that is provably close to optimal when a solution exists. <p> A provably-good polynomial-time approximation algorithm for kinodynamic planning is guaranteed to find a solution that is provably close to optimal when a solution exists. Suppose an optimal trajectory that avoids obstacles by the speed-dependent margin ffi v (as in our companion paper <ref> [3] </ref>; also see equation (6)) takes time T opt . <p> Furthermore, the running time of the algorithm is polynomial in both 1 * and the geometric complexity of the problem. [1] provided a provably-good polynomial-time approximation algorithm for 2- and 3-dimensional optimal kinodynamic planning in the restricted case of particle dynamics. <ref> [3, 5] </ref> modify this algorithm to improve the accuracy and complexity. <p> manipulators. 2 [2] is the journal revision of [1]. 1 2 Kinodynamic Motion Planning for Robots With Coupled Dynamics Bounds 2.1 A More General Kinodynamic Planning Problem We now reformulate the optimal and *-optimal kinodynamic planning problems to accommodate a wider class of robots than covered by our companion paper <ref> [3] </ref>. We will again denote robot configuration space by C, and its phase space, the robot state space, by T C. A robot motion taking time T f can be specified by a twice-differentiable map p : [0; T f ] ! C, called the path of the motion. <p> In a further simplification, all the dynamics bounds are sometimes given in an L p -norm, e.g., for p = 2 ka (t)k 2 a: We consider the L 2 -norm in this paper, whereas in <ref> [1, 3] </ref> we used the L 1 -norm. The dynamics laws and dynamics bounds that apply to a robot are its dynamics constraints. <p> The dynamics laws and dynamics bounds that apply to a robot are its dynamics constraints. Note that in this paper that we use "Cartesian" only to describe the dynamics laws obeyed by the robot, whereas in <ref> [3, 4] </ref> the "Cartesian Kinodynamic Planning Problem" refers to a point robot obeying L 1 -norm dynamics bounds. The problem parameters must include an encoding M of the robot's dynamics equation. <p> Together, the kinodynamic bounds and M are the kinodynamic specifications of the robot. As before <ref> [1, 3] </ref>, the quality of a solution is measured in terms of an approximation parameter *. <p> A review of the body of previous and related work on planning robotic motions subject to dynamics constraints and obstacle avoidance can be found in <ref> [3] </ref> and in [1] itself. <p> By improving the algorithm and its complexity analysis, we obtained the better accuracy and complexity results in our companion paper, <ref> [3] </ref>, which were initially reported in [5, 15]. Through a coordinate transformation, all these algorithms can be applied to kinodynamic planning for a Cartesian robot with L 1 -norm dynamics bounds and polyhedral C-space obstacles. <p> The basic idea is that if there exists a solution r to the problem instance, then some graph trajectory will track 0 r closely enough to be *-optimal. The algorithms presented here differ from the [1, 2] and <ref> [3] </ref> algorithms in three important ways. First, the control primitives our new algorithms use to generate the reachability graph correspond to extremal or near-extremal accelerations that differ from their "neighbors" 7 by O (*). <p> If S fl is the root vertex of a reachability graph, then the number of its vertices is bounded above by the number of T C-gridpoints. (See [1, 2] and ensuing work such as <ref> [3, 6, 17, 18] </ref>.) For Cartesian robots, the sets b A X are easily computed, and hence the Near-Extremal Algorithm for Cartesian robots uses (; t )-bangs as described above to generate a reacha bility graph. (; t )-bangs are defined formally in the section below, which also covers the non-Cartesian <p> We will formalize the notion of an acceleration advantage and generalize it to sets of acceleration functions, and we will use and prove two tracking lemmas that are more general than the ones in <ref> [1, 3, 6, 8, 18] </ref> and yield tighter complexity bounds for our algorithms than those obtained in [6, 8, 18]. 3.2.1 Overview As in [1], tracking is a key concept. <p> any d-vector of 1's and -1's there is a d-vector ^ of 1's and -1's such that if ka (t)k 1 a (1+*) 2 , then for each dimension i i (^ i a a i (t)) (1 + *) 2 : Therefore, a trajectory obeying (a; t )-bang control <ref> [1, 3] </ref> can always out-accelerate the *- time-rescaled trajectory 0 r by an (1+*) 2 margin in any direction over the entirety of a timestep, as long as this would not violate the velocity bound. <p> Hence the solution trajectory q is piecewise algebraic: p q is quadratic, and _p q is linear in time t. Therefore, when the C-space obstacles are polyhedral, we can check for safety violations exactly as in the L 1 dynamics bounds case (Cartesian Kinodynamic Planning) in <ref> [3] </ref>. The C-space obstacles can be "grown" affinely with trajectory speed (kvk 2 R) to obtain expanded C-space obstacles in C fi R. Safety-checking for a single (a; t )-bang or (; t )-bang can be accomplished by intersecting the (quadratic) time-parameterized trajectory with these surfaces. <p> For d 3, this can be done in time O (N ). In higher dimensions, the basic technique could be extended, but a good complexity bound would require a tight bound on the complexity of computing the Minkowski sum of convex d-polytopes and a d-cube. See <ref> [3] </ref> for discussion. 43 5.4.2 Non-Polyhedral C-Space Obstacles For kinematic chains, and in cases when the C-space obstacles are non-polyhedral, safety is checked by affinely growing the workspace obstacles and checking for intersections along the trajectory. (Recall the discussion of ffi v -safety in Section 2.1.) We describe a C-space obstacle <p> is checked by affinely growing the workspace obstacles and checking for intersections along the trajectory. (Recall the discussion of ffi v -safety in Section 2.1.) We describe a C-space obstacle representation and a robot-obstacle collision detection method that can be generalized to a safety-checking method similar to that described in <ref> [1, 3] </ref> and reviewed above. <p> When the real-space obstacles (polyhedra) are grown affinely with speed, the overlap predicate has the same structure as (57). (See <ref> [3] </ref>.) The signs of the C ijkl (x) correspond exactly to spatial relationships among the vertices, edges, and faces of the possibly overlapping polyhedra. The zeros of the C ijkl are surfaces that contain faces of C-space obstacles, so we call them C-space obstacle surface functions.
Reference: [4] <author> P. Xavier. </author> <title> Provably-good approximation algorithms for optimal kinodynamic robot motion plans. </title> <type> CS Dept. Tech. Rep. </type> <institution> CUCS-TR92-1279, Cornell University, </institution> <address> Ithaca, New York, </address> <month> April </month> <year> 1992. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: This margin is incorporated into the kinodynamic constraints. An important problem is to synthesize time-optimal kinodynamic solutions, which require minimal time with respect to the kino-dynamic constraints. This problem is NP-hard in three dimensions <ref> [3, 4] </ref>, and thus it is reasonable to develop approximation algorithms. A provably-good polynomial-time approximation algorithm for kinodynamic planning is guaranteed to find a solution that is provably close to optimal when a solution exists. <p> The dynamics laws and dynamics bounds that apply to a robot are its dynamics constraints. Note that in this paper that we use "Cartesian" only to describe the dynamics laws obeyed by the robot, whereas in <ref> [3, 4] </ref> the "Cartesian Kinodynamic Planning Problem" refers to a point robot obeying L 1 -norm dynamics bounds. The problem parameters must include an encoding M of the robot's dynamics equation. <p> This would imply a provably good polynomial-time approximation algorithm for kinodynamic planning using (approximately) bang-bang controls. See <ref> [4] </ref>. 2. Since the tracking lemmas do not require the force bounds be state-invariant, it should be possible to extend the results to relax this requirement. 3. <p> We expect that such an analysis would lead to algorithms that allow one to trade-off among time-optimality, safety, and running time. Furthermore, while a worst-case analysis is necessary when considering safety, an expected case analysis would be appropriate for measuring time-optimality versus algorithmic complexity. See [26] and <ref> [4] </ref>. We have presented provably good approximation algorithms for optimal kinodynamic planning with the lowest known complexity for robots obeying coupled dynamics bounds. While optimal kinodynamic planning has an optimization flavor, our algorithms and proof techniques draw on several branches of computer science and robotics.
Reference: [5] <author> B. Donald and P. Xavier. </author> <title> A provably good approximation algorithm for optimal-time trajectory planning. </title> <booktitle> In Proceedings of the 1989 IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 958-963, </pages> <address> Scottsdale, Arizona, </address> <year> 1989. </year>
Reference-contexts: Furthermore, the running time of the algorithm is polynomial in both 1 * and the geometric complexity of the problem. [1] provided a provably-good polynomial-time approximation algorithm for 2- and 3-dimensional optimal kinodynamic planning in the restricted case of particle dynamics. <ref> [3, 5] </ref> modify this algorithm to improve the accuracy and complexity. <p> By improving the algorithm and its complexity analysis, we obtained the better accuracy and complexity results in our companion paper, [3], which were initially reported in <ref> [5, 15] </ref>. Through a coordinate transformation, all these algorithms can be applied to kinodynamic planning for a Cartesian robot with L 1 -norm dynamics bounds and polyhedral C-space obstacles.
Reference: [6] <author> P. Jacobs, G. Heinzinger, J. Canny, and B. Paden. </author> <title> Planning guaranteed near-time-optimal planning in a cluttered workspace. </title> <type> Technical Report ESRC 89-20/RAMP 89-15, </type> <institution> Engineering Systems Research Center, University of California, Berkeley, Cali-fornia, </institution> <month> October </month> <year> 1989. </year>
Reference-contexts: algorithms and describe the key concepts used in obtaining our results. 3.1 Algorithms Overview We describe the basic ideas behind two general algorithms for finding near-optimal kinody-namic trajectories for Cartesian robots with L 2 -norm dynamics bounds and for open-chain 3 We will refer to this body of work as <ref> [6, 8] </ref>. 4 The [6, 8] result preceded the [16, 17] result. 6 manipulators. The first algorithm searches a reachability graph corresponding to piecewise--constant, extremal forces and torques, and we will refer to it as "the True-Extremal Algorithm". <p> key concepts used in obtaining our results. 3.1 Algorithms Overview We describe the basic ideas behind two general algorithms for finding near-optimal kinody-namic trajectories for Cartesian robots with L 2 -norm dynamics bounds and for open-chain 3 We will refer to this body of work as <ref> [6, 8] </ref>. 4 The [6, 8] result preceded the [16, 17] result. 6 manipulators. The first algorithm searches a reachability graph corresponding to piecewise--constant, extremal forces and torques, and we will refer to it as "the True-Extremal Algorithm". <p> Under the less restrictive dynamics model we use here, this generally excludes piecewise constant accelerations. The use of a grid of O (*)-spaced accelerations as control primitives is shared by [18] and <ref> [6, 8] </ref>. Our use of near-extremal and extremal accelerations as control primitives dis tinguishes our algorithm from the latter work and, with our proof techniques, contributes to our lower complexity bound. <p> If S fl is the root vertex of a reachability graph, then the number of its vertices is bounded above by the number of T C-gridpoints. (See [1, 2] and ensuing work such as <ref> [3, 6, 17, 18] </ref>.) For Cartesian robots, the sets b A X are easily computed, and hence the Near-Extremal Algorithm for Cartesian robots uses (; t )-bangs as described above to generate a reacha bility graph. (; t )-bangs are defined formally in the section below, which also covers the non-Cartesian <p> We will formalize the notion of an acceleration advantage and generalize it to sets of acceleration functions, and we will use and prove two tracking lemmas that are more general than the ones in <ref> [1, 3, 6, 8, 18] </ref> and yield tighter complexity bounds for our algorithms than those obtained in [6, 8, 18]. 3.2.1 Overview As in [1], tracking is a key concept. <p> will formalize the notion of an acceleration advantage and generalize it to sets of acceleration functions, and we will use and prove two tracking lemmas that are more general than the ones in [1, 3, 6, 8, 18] and yield tighter complexity bounds for our algorithms than those obtained in <ref> [6, 8, 18] </ref>. 3.2.1 Overview As in [1], tracking is a key concept. <p> IRI-8802390, IRI-9000532 and by a Presidential Young Investigator award, and in part by the Mathematical Sciences Institute, Intel Corporation, and AT&T Bell laboratories. 2. [2] is the journal revision of [1]. 3. We will refer to this body of work as <ref> [6, 8] </ref>. 4. The [6, 8] result preceded the [16, 17] result. 5. Recall equation (23). 6. <p> IRI-8802390, IRI-9000532 and by a Presidential Young Investigator award, and in part by the Mathematical Sciences Institute, Intel Corporation, and AT&T Bell laboratories. 2. [2] is the journal revision of [1]. 3. We will refer to this body of work as <ref> [6, 8] </ref>. 4. The [6, 8] result preceded the [16, 17] result. 5. Recall equation (23). 6.
Reference: [7] <author> P. Jacobs, G. Heinzinger, J. Canny, and B. Paden. </author> <title> Planning guaranteed near-time-optimal planning in a cluttered workspace. </title> <booktitle> In Proceedings of the International Workshop on Sensorial Integration for Industrial Robots: Architectures & Applications, </booktitle> <address> Zaragoza, Spain, </address> <year> 1989. </year>
Reference: [8] <author> G. Heinzinger, P. Jacobs, J. Canny, and B. Paden. </author> <title> Time-optimal trajectories for a robot manipulator: A provably good approximation algorithm. </title> <booktitle> In Proceedings ot the 1990 IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 150-155, </pages> <address> Cincinnati, Ohio, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: algorithms and describe the key concepts used in obtaining our results. 3.1 Algorithms Overview We describe the basic ideas behind two general algorithms for finding near-optimal kinody-namic trajectories for Cartesian robots with L 2 -norm dynamics bounds and for open-chain 3 We will refer to this body of work as <ref> [6, 8] </ref>. 4 The [6, 8] result preceded the [16, 17] result. 6 manipulators. The first algorithm searches a reachability graph corresponding to piecewise--constant, extremal forces and torques, and we will refer to it as "the True-Extremal Algorithm". <p> key concepts used in obtaining our results. 3.1 Algorithms Overview We describe the basic ideas behind two general algorithms for finding near-optimal kinody-namic trajectories for Cartesian robots with L 2 -norm dynamics bounds and for open-chain 3 We will refer to this body of work as <ref> [6, 8] </ref>. 4 The [6, 8] result preceded the [16, 17] result. 6 manipulators. The first algorithm searches a reachability graph corresponding to piecewise--constant, extremal forces and torques, and we will refer to it as "the True-Extremal Algorithm". <p> Under the less restrictive dynamics model we use here, this generally excludes piecewise constant accelerations. The use of a grid of O (*)-spaced accelerations as control primitives is shared by [18] and <ref> [6, 8] </ref>. Our use of near-extremal and extremal accelerations as control primitives dis tinguishes our algorithm from the latter work and, with our proof techniques, contributes to our lower complexity bound. <p> We will formalize the notion of an acceleration advantage and generalize it to sets of acceleration functions, and we will use and prove two tracking lemmas that are more general than the ones in <ref> [1, 3, 6, 8, 18] </ref> and yield tighter complexity bounds for our algorithms than those obtained in [6, 8, 18]. 3.2.1 Overview As in [1], tracking is a key concept. <p> will formalize the notion of an acceleration advantage and generalize it to sets of acceleration functions, and we will use and prove two tracking lemmas that are more general than the ones in [1, 3, 6, 8, 18] and yield tighter complexity bounds for our algorithms than those obtained in <ref> [6, 8, 18] </ref>. 3.2.1 Overview As in [1], tracking is a key concept. <p> IRI-8802390, IRI-9000532 and by a Presidential Young Investigator award, and in part by the Mathematical Sciences Institute, Intel Corporation, and AT&T Bell laboratories. 2. [2] is the journal revision of [1]. 3. We will refer to this body of work as <ref> [6, 8] </ref>. 4. The [6, 8] result preceded the [16, 17] result. 5. Recall equation (23). 6. <p> IRI-8802390, IRI-9000532 and by a Presidential Young Investigator award, and in part by the Mathematical Sciences Institute, Intel Corporation, and AT&T Bell laboratories. 2. [2] is the journal revision of [1]. 3. We will refer to this body of work as <ref> [6, 8] </ref>. 4. The [6, 8] result preceded the [16, 17] result. 5. Recall equation (23). 6.
Reference: [9] <author> H. Asada and J. J. Slotine. </author> <title> Robot Analysis and Control. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1986. </year>
Reference-contexts: However, we now allow the dynamics constraints to be more general than in our previous work. The robot motion is governed by a dynamics law, which relates applied generalized forces f to states, accelerations, and forces G (p) induced by gravity. For open kinematic chains <ref> [9, 10] </ref>: f (t) = M (p (t))a (t) + [ _p T (t)C (p (t)) _p (t)] + G (p (t)): (1) M (p (t)); the robot inertia tensor, is orthogonal, symmetric, and positive-definite. <p> of rank three, and [ _p T (t)C (p (t)) _p (t)] denotes the column vector in which [ _p T (t)C (p (t)) _p (t)] i = _p T (t)C i (p (t)) _p (t); where C i (p (t)) j;k = @p k 2 @p i : (See <ref> [9] </ref> for a derivation.) It is important to note that each component of M (p) and G (p) is a sum of products of components of p and their sines and cosines (e.g., p i , cos (p j ), etc.). <p> _p F (f ; p; _p) + M 1 (p) @F @ _p a fl h q1 ( x ; v ) max fl h @p p F (f ; p; _p) + M 1 (p) @F @ _p _p fl (54) Now, recall a derivation of (1), say from <ref> [9] </ref>, and recall that [ _p T (t)C (p (t)) _p (t)] i = _p T (t)C i (p (t)) _p (t); where C i (p (t)) jk = @p k 2 @p i (2) Now, M (p) is simply the inertia tensor, and G (p) = @p where U G <p> Given M (p) and U G (p) (or G (p)), it is possible to bound their derivatives by inspection, because each of their components is a sum of products of components of p and their sines and cosines. In particular, following any derivation of (1), say from <ref> [9] </ref>, one notes the close relationship to the kinematic map and Jacobian of the robot.
Reference: [10] <author> J. M. Hollerbach. </author> <title> Dynamic scaling of manipulator trajectories. MIT A.I. </title> <type> Memo 700, </type> <institution> Massachusetts Institute of Technology, Cambridge, Massachusetts, </institution> <year> 1983. </year>
Reference-contexts: However, we now allow the dynamics constraints to be more general than in our previous work. The robot motion is governed by a dynamics law, which relates applied generalized forces f to states, accelerations, and forces G (p) induced by gravity. For open kinematic chains <ref> [9, 10] </ref>: f (t) = M (p (t))a (t) + [ _p T (t)C (p (t)) _p (t)] + G (p (t)): (1) M (p (t)); the robot inertia tensor, is orthogonal, symmetric, and positive-definite. <p> Recall that the robot motion obeys the following equation f (t) = M (p (t))a (t) + [ _p T (t)C (p (t)) _p (t)] + G (p (t)): (1) Suppose a trajectory r obeys the bounds f . Recall that 0 r is r *-time-rescaled (8). We find <ref> [10] </ref> that at time (1 + *)t: f 0 f r (t) 2* + * 2 This immediately means that 0 r obeys some tighter bounds f 0 if the robot is Cartesian or if there is no gravity.
Reference: [11] <author> T. Lozano-Perez. </author> <title> Spatial planning: A configuration space approach. </title> <journal> IEEE Transactions on Computers, </journal> <note> C-32(2):108-120, 1983. Also MIT A.I. Memo 605, </note> <month> December </month> <year> 1982. </year>
Reference-contexts: Free space is the complement of the C-space obstacles in C. For a polyhedral robot of geometric complexity m and a set of polyhedral obstacles with geometric complexity n, the number of configuration space constraints N = O (m (m + n)), since an arm must avoid self collisions <ref> [11] </ref>. Finally, we assume that all linear (i.e., non-revolute) degrees of freedom are bounded from above by a length l.
Reference: [12] <author> J. Canny. </author> <title> Collision detection for moving polyhedra. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 8(2) </volume> <pages> 200-209, </pages> <year> 1986. </year>
Reference-contexts: As we discuss there, for non-Cartesian open-chain manipulators amidst polyhedral real-space obstacles, exact collision detection for quadratic paths requires the solution of mixed trignometric equations that cannot be transformed into algebraic equations using the usual substitution methods, such as <ref> [12] </ref>. Furthermore, for these manipulators, trajectory segments corresponding to constant extremal controls are solutions to systems of ordinary trignometric differential equations, and the trajectories found by the corresponding algorithm are extremal to the accuracy of the solution method; see Section 3.1.2. <p> It would be convenient if we could apply an algebraic collision detection predicate such as that described by Canny <ref> [12, 24] </ref>. (We shall soon describe why we cannot.) In fact, our ffi v -safety predicate uses the structure of his predicate and the same logical evaluation method for each pair of polyhedra that could possibly collide. <p> The non-overlap condition for two convex polyhedra is given by the non-overlap predicate ^ i j k l (C ijkl (x) &gt; 0) (57) described in [14], with the exact form of constraint functions C ijkl : C ! R given in <ref> [12] </ref>. When the real-space obstacles (polyhedra) are grown affinely with speed, the overlap predicate has the same structure as (57). (See [3].) The signs of the C ijkl (x) correspond exactly to spatial relationships among the vertices, edges, and faces of the possibly overlapping polyhedra. <p> To detect collisions along a path p : time ! T C, one substitutes p (t) for x in (57) and "merges" the sign intervals of the resulting functions in time <ref> [12] </ref>. While the exact form of the C ijkl found in [12] for a robot polyhedron uses quaternions to represent orientation, we can use other C-space representations and obstacle surface functions that yield the same sign invariant sets in C-space. <p> To detect collisions along a path p : time ! T C, one substitutes p (t) for x in (57) and "merges" the sign intervals of the resulting functions in time <ref> [12] </ref>. While the exact form of the C ijkl found in [12] for a robot polyhedron uses quaternions to represent orientation, we can use other C-space representations and obstacle surface functions that yield the same sign invariant sets in C-space. <p> Thus, if we set r = 2, * r will be O (* 2 ), and thus the error of the safety-checking approximation will be smaller than O (*). Since the structure of our ffi v -safety violation predicate is similar to that of <ref> [12] </ref>, it contains O (N ) polynomials in t and requires O (N log N ) time to evaluate, once the sign-intervals of the polynomials are known.
Reference: [13] <author> B. Donald. </author> <title> A search algorithm for motion planning with six degrees of freedom. </title> <journal> Artificial Intelligence, </journal> <volume> 31(3) </volume> <pages> 295-353, </pages> <year> 1987. </year>
Reference-contexts: When the graph search finds a vertex in a voxel in which another vertex has previously been found, the edges from the new vertex are simply not explored, and we say they are pruned from the search. (Compare this to the search in <ref> [13] </ref>, O (() (d1) ) branching factor, the size of the subgraph searched is O (() (d1) (b x b v ) d ). We note that for non-Cartesian open-chain manipulators, (10) generally has no closed-form solution. <p> Consequently, edges from X pr are pruned from the search. (Compare to <ref> [13] </ref>, Fig. 31 on p. 315.) In Section 4.3 we show that the True-Extremal Algorithm still has the desired completeness with this search pruning. 10 coordinate axes so that the origin 0 is a gridpoint; i.e., it lies at one of the interstices of the grid. <p> For an open kinematic chain, one set of natural C-space obstacle surface functions would be mixed trignomet-ric polynomials | the sums of products of C-space coordinates and their cosines and/or sines <ref> [13] </ref>. In [24], Canny represents these surfaces algebraically by using quarternion and half-angle substitutions. Unfortunately, algebraic collision detection requires a C-space coordinate system in which the surfaces of the C-space obstacles are algebraic and in which the robot path is algebraic in time.
Reference: [14] <author> J. Canny and B. Donald. </author> <title> Simplified Voronoi diagrams. </title> <journal> Discrete and Computational Geometry, </journal> <volume> 3(3) </volume> <pages> 219-236, </pages> <year> 1988. </year>
Reference-contexts: The non-overlap condition for two convex polyhedra is given by the non-overlap predicate ^ i j k l (C ijkl (x) &gt; 0) (57) described in <ref> [14] </ref>, with the exact form of constraint functions C ijkl : C ! R given in [12].
Reference: [15] <author> B. Donald and P. Xavier. </author> <title> Provably good approximation algorithms for optimal kino-dynamic planning for cartesian robots and open chain manipulators. </title> <booktitle> In Proceedings of the Sixth Annual Symposium on Computational Geometry, </booktitle> <pages> pages 290-300, </pages> <address> Berkeley, California, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: By improving the algorithm and its complexity analysis, we obtained the better accuracy and complexity results in our companion paper, [3], which were initially reported in <ref> [5, 15] </ref>. Through a coordinate transformation, all these algorithms can be applied to kinodynamic planning for a Cartesian robot with L 1 -norm dynamics bounds and polyhedral C-space obstacles.
Reference: [16] <author> B. Donald and P. Xavier. </author> <title> Near-optimal kinodynamic planning for robots with coupled dynamics bounds. </title> <editor> In A. C. Sanderson, A. A. Derochers, and K. Valvanis, editors, </editor> <booktitle> Proceedings of the Fourth IEEE International Symposium on Intelligent Control, </booktitle> <pages> pages 354-359, </pages> <address> Albany, New York, </address> <year> 1989. </year>
Reference-contexts: our results. 3.1 Algorithms Overview We describe the basic ideas behind two general algorithms for finding near-optimal kinody-namic trajectories for Cartesian robots with L 2 -norm dynamics bounds and for open-chain 3 We will refer to this body of work as [6, 8]. 4 The [6, 8] result preceded the <ref> [16, 17] </ref> result. 6 manipulators. The first algorithm searches a reachability graph corresponding to piecewise--constant, extremal forces and torques, and we will refer to it as "the True-Extremal Algorithm". <p> We will refer to this body of work as [6, 8]. 4. The [6, 8] result preceded the <ref> [16, 17] </ref> result. 5. Recall equation (23). 6.
Reference: [17] <author> B. Donald and P. Xavier. </author> <title> Provably good approximation algorithms for optimal ki-nodynamic planning for cartesian robots and open chain manipulators. </title> <institution> Department of Computer Science Technical Report TR-1095, Cornell University Department of Computer Science, </institution> <address> Ithaca, New York, </address> <month> February </month> <year> 1990. </year> <note> Supercedes TR-971. </note>
Reference-contexts: our results. 3.1 Algorithms Overview We describe the basic ideas behind two general algorithms for finding near-optimal kinody-namic trajectories for Cartesian robots with L 2 -norm dynamics bounds and for open-chain 3 We will refer to this body of work as [6, 8]. 4 The [6, 8] result preceded the <ref> [16, 17] </ref> result. 6 manipulators. The first algorithm searches a reachability graph corresponding to piecewise--constant, extremal forces and torques, and we will refer to it as "the True-Extremal Algorithm". <p> If S fl is the root vertex of a reachability graph, then the number of its vertices is bounded above by the number of T C-gridpoints. (See [1, 2] and ensuing work such as <ref> [3, 6, 17, 18] </ref>.) For Cartesian robots, the sets b A X are easily computed, and hence the Near-Extremal Algorithm for Cartesian robots uses (; t )-bangs as described above to generate a reacha bility graph. (; t )-bangs are defined formally in the section below, which also covers the non-Cartesian <p> We will refer to this body of work as [6, 8]. 4. The [6, 8] result preceded the <ref> [16, 17] </ref> result. 5. Recall equation (23). 6.
Reference: [18] <author> J. Reif and S. Tate. </author> <title> Approximate kinodynamic planning using l 2 -norm dynamics bounds. </title> <type> Technical Report CS-1990-13, </type> <institution> Duke University Department of Computer Science, Durham, North Carolina, </institution> <year> 1990. </year>
Reference-contexts: Our approach (see the early description in [15-17]) toward state-dependent dynamics is similar, but we obtain better complexity results. 4 In concurrent work, Reif and Tate <ref> [18] </ref> used a parameter-dependent acceleration-space discretization implicitly to obtain a polynomial-time approximation algorithm for robots with decoupled dynamics, L 2 dynamics bounds, and polyhedral C-space obstacles. <p> Among other things, they imply that such an algorithm would have to include piecewise extremal trajectories in its search. Under the less restrictive dynamics model we use here, this generally excludes piecewise constant accelerations. The use of a grid of O (*)-spaced accelerations as control primitives is shared by <ref> [18] </ref> and [6, 8]. Our use of near-extremal and extremal accelerations as control primitives dis tinguishes our algorithm from the latter work and, with our proof techniques, contributes to our lower complexity bound. <p> If S fl is the root vertex of a reachability graph, then the number of its vertices is bounded above by the number of T C-gridpoints. (See [1, 2] and ensuing work such as <ref> [3, 6, 17, 18] </ref>.) For Cartesian robots, the sets b A X are easily computed, and hence the Near-Extremal Algorithm for Cartesian robots uses (; t )-bangs as described above to generate a reacha bility graph. (; t )-bangs are defined formally in the section below, which also covers the non-Cartesian <p> We will formalize the notion of an acceleration advantage and generalize it to sets of acceleration functions, and we will use and prove two tracking lemmas that are more general than the ones in <ref> [1, 3, 6, 8, 18] </ref> and yield tighter complexity bounds for our algorithms than those obtained in [6, 8, 18]. 3.2.1 Overview As in [1], tracking is a key concept. <p> will formalize the notion of an acceleration advantage and generalize it to sets of acceleration functions, and we will use and prove two tracking lemmas that are more general than the ones in [1, 3, 6, 8, 18] and yield tighter complexity bounds for our algorithms than those obtained in <ref> [6, 8, 18] </ref>. 3.2.1 Overview As in [1], tracking is a key concept.
Reference: [19] <author> Leitman. </author> <title> An Introduction to Optimal Control. </title> <publisher> McGraw-Hill, Inc., </publisher> <address> New York, </address> <year> 1966. </year>
Reference-contexts: Although the main purpose of our algorithms is only to guarantee *-approximately optimal trajectories, it would be desirable for an algorithm to possibly find a truly optimal trajectory with respect ffi 0 v -safety, even for a "nearby" problem (as in numerical analysis). In robotics and control theory <ref> [19] </ref> there is a family of results (e.g., [20-22]) on the feasibility of planning and approximating optimal trajectories using only piecewise-extremal controls; these results are often called "bang-bang" theorems. Among other things, they imply that such an algorithm would have to include piecewise extremal trajectories in its search.
Reference: [20] <author> H. M. </author> <title> Schaettler. </title> <journal> On the optimality of bang-bang trajectories in R 3 . Bulletin of the American Mathematical Society, </journal> <volume> 16(1) </volume> <pages> 113-116, </pages> <year> 1987. </year>
Reference: [21] <author> E. Sontag and H. Sussmann. </author> <title> Remarks on the time-optimal control of two-link manipulators. </title> <booktitle> In Proceedings of the 24 th Conference on Decision and Control, </booktitle> <address> Ft. Lauderdale, Florida, </address> <year> 1985. </year>
Reference: [22] <author> E. Sontag and H. Sussmann. </author> <title> Time-optimal control of manipulators. </title> <type> Technical report, </type> <institution> Department of Mathematics, Rutgers University, </institution> <address> New Brunswick, New Jersey, </address> <year> 1986. </year>
Reference: [23] <author> G. Heinzinger and B. Paden. </author> <title> Bounds on robot dynamics. </title> <booktitle> In Proceedings 1989 IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 1227-1232, </pages> <address> Scottsdale, Arizona, </address> <year> 1989. </year>
Reference-contexts: This can be done loosely by inspection because all terms are bounded. However, simple expressions bounding the tensor norms have been calculated by <ref> [23] </ref>, and derivations of C r , C q0 , C q1 , and C q2 can be found 42 in Appendix A. <p> i J L (p) T J L (p) + J A (p) T I i (p)J A (p) ; where m i is the mass of the i th link, I i (p) is its inertia tensor, and J (i) (i) A are its linear velocity and angular velocity Jacobians. <ref> [23] </ref> exploit similar relationships to bound the general derivatives of M (p) and G (p). We will use their results to show one way to derive the desired bounds . <p> A.2 Acceleration Bounds and Perturbations We first review a notation for tensor-valued functions, as used by <ref> [23] </ref>. M is a smooth tensor field, and M (p) is a tensor of rank 2. For x 2 C, M (x)(v 1 ; v 2 ) denotes the tensor acting on (v 1 ; v 2 ) 2 T x C fi T x C. <p> The second and third terms on the right side are equivalent to the [ _p T C (p) _p] term in (1) We will use four inequalities ((65) through (68)) that are results from <ref> [23] </ref>. Let M i denote the mass of link i, L i its maximum length from the near joint axis, and L i the greatest 49 distance of its centroid from the first joint axis of the manipulator.
Reference: [24] <author> J. Canny. </author> <title> The Complexity of Robot Motion Planning. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mas-sachusetts, </address> <year> 1988. </year> <note> Book version of Canny's 1986 Ph.D. thesis. 58 </note>
Reference-contexts: It would be convenient if we could apply an algebraic collision detection predicate such as that described by Canny <ref> [12, 24] </ref>. (We shall soon describe why we cannot.) In fact, our ffi v -safety predicate uses the structure of his predicate and the same logical evaluation method for each pair of polyhedra that could possibly collide. <p> For an open kinematic chain, one set of natural C-space obstacle surface functions would be mixed trignomet-ric polynomials | the sums of products of C-space coordinates and their cosines and/or sines [13]. In <ref> [24] </ref>, Canny represents these surfaces algebraically by using quarternion and half-angle substitutions. Unfortunately, algebraic collision detection requires a C-space coordinate system in which the surfaces of the C-space obstacles are algebraic and in which the robot path is algebraic in time.
Reference: [25] <author> W. Press, B. Flannery, S. Teukolsky, and W. Vetterling. </author> <title> Numerical Recipes in C. </title> <publisher> Cambridge University Press, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: right-hand side of (58) is C 1 and its time-derivative can be bounded globally, standard integration techniques (e.g., Runge-Kutta) can be used to approximate the image of a (; t )-bang to arbitrary precision for time t 2 [0; t ], with computation time growing 45 sub-linearly with the accuracy <ref> [25] </ref>.
Reference: [26] <author> B. Donald and P. Xavier. </author> <title> Time-safety trade-offs and a bang-bang algorithm for ki-nodynamic planning. </title> <booktitle> In Proceedings of the 1991 IEEE International Conference on Robotics and Automation, </booktitle> <address> Sacramento, California, </address> <year> 1991. </year> <month> 59 </month>
Reference-contexts: We expect that such an analysis would lead to algorithms that allow one to trade-off among time-optimality, safety, and running time. Furthermore, while a worst-case analysis is necessary when considering safety, an expected case analysis would be appropriate for measuring time-optimality versus algorithmic complexity. See <ref> [26] </ref> and [4]. We have presented provably good approximation algorithms for optimal kinodynamic planning with the lowest known complexity for robots obeying coupled dynamics bounds. While optimal kinodynamic planning has an optimization flavor, our algorithms and proof techniques draw on several branches of computer science and robotics.
References-found: 26

