URL: ftp://ftp.cs.utexas.edu/pub/lam/info98b.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/lam/NRL/network_security.html
Root-URL: 
Email: woo@research.bell-labs.com  lam@cs.utexas.edu  
Title: Designing a Distributed Authorization Service  
Author: Thomas Y.C. Woo Simon S. Lam 
Address: Austin  
Affiliation: Networking Software Research Department Bell Laboratories  Department of Computer Sciences The University of Texas at  
Abstract: We present the design of a distributed authorization service which parallels existing authentication services for distributed systems. Such a service would operate on top of an authentication substrate. There are two distinct ideas underlying our design: (1) The use of a language, called generalized access control list (GACL), as a common representation of authorization requirements. (2) The use of authenticated delegation to effect authorization offloading from an end server to an authorization server. We present the syntax and semantics of GACL, and illustrate how it can be used to specify authorization requirements that cannot be easily specified by ordinary ACL. We also describe the protocols in our design. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abadi, M. Burrows, B.W. Lampson, and G. Plotkin. </author> <title> A calculus for access control in distributed systems. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(4):706734, </volume> <month> September </month> <year> 1993. </year>
Reference-contexts: Moreover, the semantics of GACL is more procedural, as opposed to the declarative nature of the semantics of the language of policy base. The use of a declaration section also adds to the practicality of GACL. Authenticated delegation has been used and studied in other works <ref> [1, 2, 5, 7, 10] </ref>. Most of these, with the notable exception of Neuman's [10], concentrate on the authentication and operational aspects of delegation rather than its application. The work reported in [1, 5] presents a formal understanding of authenticated delegation. <p> Authenticated delegation has been used and studied in other works [1, 2, 5, 7, 10]. Most of these, with the notable exception of Neuman's [10], concentrate on the authentication and operational aspects of delegation rather than its application. The work reported in <ref> [1, 5] </ref> presents a formal understanding of authenticated delegation. In particular, it introduces a handoff rule that can be used to formally explain protocols for authenticated delegation. Gasser and McDermott [2] discuss how to carry out delegation in various contexts (e.g., user-host, process-process).
Reference: [2] <author> M. Gasser and E. McDermott. </author> <title> An architecture for practical delegation in a distributed system. </title> <booktitle> In RSP90 [11], </booktitle> <month> pages </month> <year> 2030. </year>
Reference-contexts: Moreover, the semantics of GACL is more procedural, as opposed to the declarative nature of the semantics of the language of policy base. The use of a declaration section also adds to the practicality of GACL. Authenticated delegation has been used and studied in other works <ref> [1, 2, 5, 7, 10] </ref>. Most of these, with the notable exception of Neuman's [10], concentrate on the authentication and operational aspects of delegation rather than its application. The work reported in [1, 5] presents a formal understanding of authenticated delegation. <p> The work reported in [1, 5] presents a formal understanding of authenticated delegation. In particular, it introduces a handoff rule that can be used to formally explain protocols for authenticated delegation. Gasser and McDermott <ref> [2] </ref> discuss how to carry out delegation in various contexts (e.g., user-host, process-process). The work by Neuman [10] is most relevant to ours. He describes a proxy-based method for performing authorization and accounting. A proxy is essentially an authenticated delegation.
Reference: [3] <author> J. Kahan. </author> <title> A distributed authorization model for WWW. In Proceedings of INET'95, </title> <year> 1995. </year>
Reference-contexts: This protocol is based on a concept of proxy delegation, which as we pointed out above, is in the same spirit as our authenticated delegation. In <ref> [3] </ref>, a distributed authorization model for WWW was proposed.
Reference: [4] <author> J.T. Kohl, </author> <title> B.C. Neuman, and T.Y. Ts'o. The evolution of the Kerberos authentication system. </title> <editor> In F. Brazier and D. Johansen, editors, </editor> <booktitle> Distributed Open Systems, </booktitle> <pages> pages 7894. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: Among these functions, getid is the most generic. Specifically, there exist notions of identity 4 that are applicable to most services. Indeed, much success has been achieved in abstracting getid and isolating it as a separate authentication service (e.g., <ref> [4] </ref>). There is even a proposal to standardize an application program interface for authentication services [8]. Progress on abstracting the other functions has been much slower. This may be attributed to the perception that these functions are not as generic. <p> The choice of which authentication protocol to use depends on many factors. We have structured our design in a modular way. Thus, any mutual authentication protocol that provides an authenticated, integrity-protected, secret channel would suffice. Indeed, any of the existing authentication systems could have been used (e.g., <ref> [4, 9] </ref>). 4.2 Authenticated Delegation The basic idea of an authenticated delegation is fairly straightforward. Consider two processes P and Q.
Reference: [5] <author> B. Lampson, M. Abadi, M. Burrows, and T. Wobber. </author> <title> Authentication in distributed systems: </title> <journal> Theory and practice. ACM Transactions on Computer Systems, </journal> <volume> 10(4):265310, </volume> <month> November </month> <year> 1992. </year>
Reference-contexts: The expressiveness of GACL allows authorization requirements to be succinctly and uniformly specified. Authenticated delegation allows a server to securely delegate its authorization functions to specialized authorization servers. The concept of authenticated delegation is not new. For example, it has been discussed in one form or another in <ref> [5, 7, 10] </ref>. However, most of these works, with the notable exception of [10], concentrate on the authentication aspect. Our study of authenticated delegation is for authorization purposes, and is similar to the notion of proxy in [10]. <p> Moreover, the semantics of GACL is more procedural, as opposed to the declarative nature of the semantics of the language of policy base. The use of a declaration section also adds to the practicality of GACL. Authenticated delegation has been used and studied in other works <ref> [1, 2, 5, 7, 10] </ref>. Most of these, with the notable exception of Neuman's [10], concentrate on the authentication and operational aspects of delegation rather than its application. The work reported in [1, 5] presents a formal understanding of authenticated delegation. <p> Authenticated delegation has been used and studied in other works [1, 2, 5, 7, 10]. Most of these, with the notable exception of Neuman's [10], concentrate on the authentication and operational aspects of delegation rather than its application. The work reported in <ref> [1, 5] </ref> presents a formal understanding of authenticated delegation. In particular, it introduces a handoff rule that can be used to formally explain protocols for authenticated delegation. Gasser and McDermott [2] discuss how to carry out delegation in various contexts (e.g., user-host, process-process).
Reference: [6] <author> H.M. Levy. </author> <title> Capability-Based Computer Systems. </title> <publisher> Digital Press, </publisher> <year> 1984. </year>
Reference-contexts: For example, if cached group certificates are not invalidated when group membership changes, there may be incorrect grant or denial. Similarly, an unexpired authorization certificate should be invalidated when the particular authorization has been revoked. These issues are similar to those in the use of capabilities <ref> [6] </ref>, and are beyond the scope of this paper. 6 This is similar to a zone transfer in DNS, except that authorization data are involved here. 7 Such redirection is similar to the use of MX records for mail exchanges in DNS.
Reference: [7] <author> J. Linn. </author> <title> Practical authentication for distributed computing. </title> <booktitle> In RSP90 [11], </booktitle> <pages> pages 3140. </pages>
Reference-contexts: The expressiveness of GACL allows authorization requirements to be succinctly and uniformly specified. Authenticated delegation allows a server to securely delegate its authorization functions to specialized authorization servers. The concept of authenticated delegation is not new. For example, it has been discussed in one form or another in <ref> [5, 7, 10] </ref>. However, most of these works, with the notable exception of [10], concentrate on the authentication aspect. Our study of authenticated delegation is for authorization purposes, and is similar to the notion of proxy in [10]. <p> Moreover, the semantics of GACL is more procedural, as opposed to the declarative nature of the semantics of the language of policy base. The use of a declaration section also adds to the practicality of GACL. Authenticated delegation has been used and studied in other works <ref> [1, 2, 5, 7, 10] </ref>. Most of these, with the notable exception of Neuman's [10], concentrate on the authentication and operational aspects of delegation rather than its application. The work reported in [1, 5] presents a formal understanding of authenticated delegation.
Reference: [8] <author> J. Linn. </author> <title> Generic Security Service Application Program Interface, </title> <note> Version 2. RFC 2078, </note> <month> January </month> <year> 1997. </year>
Reference-contexts: Specifically, there exist notions of identity 4 that are applicable to most services. Indeed, much success has been achieved in abstracting getid and isolating it as a separate authentication service (e.g., [4]). There is even a proposal to standardize an application program interface for authentication services <ref> [8] </ref>. Progress on abstracting the other functions has been much slower. This may be attributed to the perception that these functions are not as generic.
Reference: [9] <author> R. Molva, G. Tsudik, E. Van Herreweghen, and S. Zatti. </author> <title> Kryp-toKnight authentication and key distribution system. </title> <booktitle> In Proceedings of 2nd European Symposium on Research in Computer Security, </booktitle> <pages> pages 155174, </pages> <address> Toulouse, France, November 2325 1992. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: The choice of which authentication protocol to use depends on many factors. We have structured our design in a modular way. Thus, any mutual authentication protocol that provides an authenticated, integrity-protected, secret channel would suffice. Indeed, any of the existing authentication systems could have been used (e.g., <ref> [4, 9] </ref>). 4.2 Authenticated Delegation The basic idea of an authenticated delegation is fairly straightforward. Consider two processes P and Q.
Reference: [10] <author> B.C. Neuman. </author> <title> Proxy-based authorization and accounting for distributed systems. </title> <booktitle> In Proceedings of 13th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 283291, </pages> <address> Pittsburgh, Pennsylvania, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: The expressiveness of GACL allows authorization requirements to be succinctly and uniformly specified. Authenticated delegation allows a server to securely delegate its authorization functions to specialized authorization servers. The concept of authenticated delegation is not new. For example, it has been discussed in one form or another in <ref> [5, 7, 10] </ref>. However, most of these works, with the notable exception of [10], concentrate on the authentication aspect. Our study of authenticated delegation is for authorization purposes, and is similar to the notion of proxy in [10]. <p> Authenticated delegation allows a server to securely delegate its authorization functions to specialized authorization servers. The concept of authenticated delegation is not new. For example, it has been discussed in one form or another in [5, 7, 10]. However, most of these works, with the notable exception of <ref> [10] </ref>, concentrate on the authentication aspect. Our study of authenticated delegation is for authorization purposes, and is similar to the notion of proxy in [10]. Our goal is to construct an authorization service which parallels existing authentication services. <p> For example, it has been discussed in one form or another in [5, 7, 10]. However, most of these works, with the notable exception of <ref> [10] </ref>, concentrate on the authentication aspect. Our study of authenticated delegation is for authorization purposes, and is similar to the notion of proxy in [10]. Our goal is to construct an authorization service which parallels existing authentication services. Since our focus is on authorization, we will discuss accounting and auditing issues only to the extent that they are relevant to authorization. The balance of this paper is organized as follows. <p> to obtain as an end service; and a server implementing such a service as an end server. 2 1 A preliminary overview of our architecture and protocols, together with an informal introduction to the GACL language, have been presented in an extended abstract [16]. 2 This terminology is adapted from <ref> [10] </ref>, where the notion of an end server is defined in the context of a proxy, and is much more specific. <p> Knowledge of k a is used by C to demonstrate to E that the authorization certificate was indeed obtained from A. This method is what we call authenticated delegation. A similar method but with the name proxy is used in <ref> [10] </ref>. See Section 6 for a comparison of the two methods. Server A issues the appropriate authorization certificate to C only after it has determined from spec that C can be granted access to E. <p> Moreover, the semantics of GACL is more procedural, as opposed to the declarative nature of the semantics of the language of policy base. The use of a declaration section also adds to the practicality of GACL. Authenticated delegation has been used and studied in other works <ref> [1, 2, 5, 7, 10] </ref>. Most of these, with the notable exception of Neuman's [10], concentrate on the authentication and operational aspects of delegation rather than its application. The work reported in [1, 5] presents a formal understanding of authenticated delegation. <p> The use of a declaration section also adds to the practicality of GACL. Authenticated delegation has been used and studied in other works [1, 2, 5, 7, 10]. Most of these, with the notable exception of Neuman's <ref> [10] </ref>, concentrate on the authentication and operational aspects of delegation rather than its application. The work reported in [1, 5] presents a formal understanding of authenticated delegation. In particular, it introduces a handoff rule that can be used to formally explain protocols for authenticated delegation. <p> In particular, it introduces a handoff rule that can be used to formally explain protocols for authenticated delegation. Gasser and McDermott [2] discuss how to carry out delegation in various contexts (e.g., user-host, process-process). The work by Neuman <ref> [10] </ref> is most relevant to ours. He describes a proxy-based method for performing authorization and accounting. A proxy is essentially an authenticated delegation. He describes several applications of proxies (e.g., capabilities, group servers) that are applicable in our design as well.
Reference: [11] <institution> IEEE Symposium on Research in Security and Privacy, Oak-land, California, </institution> <month> May 79 </month> <year> 1990. </year>
Reference: [12] <author> J.T. Trostle and B.C. Neuman. </author> <title> A flexible distributed authorization protocol. </title> <booktitle> In Proceedings of Symposium on Network and Distributed Systems Security, </booktitle> <year> 1996. </year>
Reference-contexts: Also, Neuman's focus is more on applications of proxies; the representation and evaluation issues involved in constructing a complete authorization service were not discussed. On the more practical side, <ref> [12] </ref> studies a flexible authorization protocol for delegation, and discusses how it supports existing authorization models such as OSF DCE and SESAME. This protocol is based on a concept of proxy delegation, which as we pointed out above, is in the same spirit as our authenticated delegation.
Reference: [13] <author> C.K. Wong and S.S. Lam. </author> <title> GACL language manual (44 pages). </title> <type> Technical report, </type> <institution> Department of Computer Sciences, The University of Texas at Austin, </institution> <month> August </month> <year> 1996. </year>
Reference-contexts: Specifically, it enhances the overall security of a system by providing a well-defined, security-tested, basic building block to a service implementor. A prototype implementation of a GACL interpreter has been finished, and is reported in <ref> [13] </ref>. It has an X-window user interface, and allows evaluation of GACL specifications. The current prototype has traded off the full generality of GACL (e.g., only acyclic specifications are allowed) for more efficient evaluation.
Reference: [14] <author> T.Y.C. Woo, R. Bindignavle, S. Su, and S.S. Lam. SNP: </author> <title> An interface for secure network programming. </title> <booktitle> In Proceedings of USENIX Summer Technical Conference, </booktitle> <address> Boston, Massachusetts, </address> <month> June 610 </month> <year> 1994. </year> <note> Available from http://www.cs.utexas.edu/users/lam/NRL/. </note>
Reference-contexts: We prefer to use a public key based system. 9 Since the initial sign-on procedure is dependent on specific hardware configurations, we present only our client-server mutual authentication protocol here. The following shows the basic client-server mutual authentication protocol from <ref> [14, 17] </ref>, where C denotes a client, E a server, and S an authentication server.
Reference: [15] <author> T.Y.C. Woo and S.S. Lam. </author> <title> Authorization in distributed systems: A new approach. </title> <journal> Journal of Computer Security, </journal> <volume> 2(2,3):107 136, </volume> <year> 1993. </year>
Reference-contexts: GACL is much more expressive than ordinary ACL. The main features of GACL include the following: * It provides constructs that can express in a straightforward way most commonly encountered authorization requirements. For example, the structural properties, clo sure, inheritance and defaults, identified in <ref> [15] </ref>, can be directly expressed in GACL. * It allows incomplete authorization to be specified. That is, it is possible that for some request, neither grant nor denial can be determined. A failure is returned in this case. <p> GACL can be viewed as a practical approximation of the logical language of policy base introduced in <ref> [15] </ref>. We defer a comparison of the two to Section 6. In the following, we provide a rigorous specification of the syntax and semantics of the GACL langugage. <p> An authorization specification is a finite set of gacl's. We note that the GACL language allows direct expression of closure, default and inheritance properties <ref> [15] </ref> via the use of its ), default and inherit constructs respectively. 5.2 Semantics A gacl specifies a set of authorizations. To define a semantics for GACL, we need to define what is an authorization and how to construct the set of authorizations specified by a gacl. <p> The use of a declaration section is novel. It provides directives for choosing the most efficient evaluation strategy. For example, an unordered gacl can potentially make use of direct hashing in its evaluation, while an ordered gacl allows a partial evaluation strategy. The language of policy base proposed in <ref> [15] </ref> is more general than GACL (in particular, it subsumes first-order logic) and has a much more abstract semantics. The GACL language is intended to be practical, and can indeed express the basic structural properties identified in [15], though not in their full generality. <p> The language of policy base proposed in <ref> [15] </ref> is more general than GACL (in particular, it subsumes first-order logic) and has a much more abstract semantics. The GACL language is intended to be practical, and can indeed express the basic structural properties identified in [15], though not in their full generality. Moreover, the semantics of GACL is more procedural, as opposed to the declarative nature of the semantics of the language of policy base. The use of a declaration section also adds to the practicality of GACL.
Reference: [16] <author> T.Y.C. Woo and S.S. Lam. </author> <title> A framework for distributed authorization (extended abstract). </title> <booktitle> In Proceedings of 1st ACM Conference on Computer and Communications Security, </booktitle> <pages> pages 112118, </pages> <address> Fairfax, Virginia, </address> <month> November 35 </month> <year> 1993. </year>
Reference-contexts: service that a client would ultimately like to obtain as an end service; and a server implementing such a service as an end server. 2 1 A preliminary overview of our architecture and protocols, together with an informal introduction to the GACL language, have been presented in an extended abstract <ref> [16] </ref>. 2 This terminology is adapted from [10], where the notion of an end server is defined in the context of a proxy, and is much more specific.
Reference: [17] <author> T.Y.C. Woo and S.S. Lam. </author> <title> Authentication for distributed systems. </title> <editor> In Dorothy Denning and Peter Denning, editors, Internet Besieged: Countering Cyberspace Scofflaws. </editor> <publisher> ACM Press and Addison-Wesley, </publisher> <year> 1997. </year>
Reference-contexts: These considerations give rise to the problems of authentication, authorization, accounting, and auditing. Among these problems, authentication is the most basic, as well as the most studied <ref> [17] </ref>. On the other hand, the problems of authorization, accounting and auditing have remained relatively unexplored. In this paper, we examine the major issues involved in implementing an authorization service for distributed systems, and propose a specific design that addresses these issues. <p> We prefer to use a public key based system. 9 Since the initial sign-on procedure is dependent on specific hardware configurations, we present only our client-server mutual authentication protocol here. The following shows the basic client-server mutual authentication protocol from <ref> [14, 17] </ref>, where C denotes a client, E a server, and S an authentication server.
References-found: 17

