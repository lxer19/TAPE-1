URL: http://cs.jhu.edu/~baruch/FLOW/karger-plotkin.ps
Refering-URL: http://cs.jhu.edu/~baruch/FLOW/index.html
Root-URL: http://www.cs.jhu.edu
Title: Adding Multiple Cost Constraints to Combinatorial Optimization Problems, with Applications to Multicommodity Flows  
Author: David Karger Serge Plotkin 
Abstract: Minimum cost multicommodity flow is an instance of a simpler problem (multicommodity flow) to which a cost constraint has been added. In this paper we present a general scheme for solving a large class of such "cost-added" problems|even if more than one cost is added. One of the main applications of this method is a new deterministic algorithm for approximately solving the minimum-cost multicommodity flow problem. Our algorithm finds a (1 + *) approximation to the minimum cost flow in ~ O(* 3 kmn) time, where k is the number of commodities, m is the number of edges, and n is the number vertices in the input problem. This improves the previous best deterministic bounds of O(* 4 kmn 2 ) [9] and ~ O(* 2 k 2 m 2 ) [15] by factors of n=* and *km=n respectively. In fact, it even dominates the best randomized bound of ~ O(* 2 km 2 ) [15]. The algorithm presented in this paper efficiently solves several other interesting generalizations of min-cost flow problems, such as one in which each commodity can have its own distinct shipping cost per edge, or one in which there is more than one cost measure on the flows and all costs must be kept small simultaneously. Our approach is based on an extension of the approximate packing techniques in [15] and a generalization of the round-robin approach of [16] to multicommodity flow without costs.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R.K. Ahuja, T.L. Magnanti, and J.B. Orlin. </author> <title> Network Flows. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: We can also use this oracle to solve a generalization of multicommodity flow in which the cost of shipping each commodity can be different from the cost of shipping the others|in other words, where there are k different cost vectors, one for each commodity. As discussed in <ref> [1, Reference notes to Chapter 17] </ref>, this generalization has many applications in practice, such as multivehicle tanker scheduling, racial balancing of schools, routing of multiple commodities, and warehousing of seasonal products. We approximately solve this problem in the same ~ O (kmn) time bound for constant *. <p> This generalized version of the problem has many practical applications to which the original version does not seem to apply <ref> [1, References in Chapter 17] </ref>. We have the following: Theorem 3.4 Multicommodity flow with per-commodity costs can be approximated within a (1 + *)-factor in ~ O (kmn) time for constant *.
Reference: [2] <author> B. Awerbuch and T. Leighton. </author> <title> Improved approximation algorithms for the multi-commodity flow problem and local competitive routing in dynamic networks. </title> <booktitle> In Proc. 26th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 487-495, </pages> <year> 1994. </year>
Reference-contexts: Multicommodity flow arises naturally in many contexts, including virtual circuit routing in communication networks, VLSI layout, scheduling, and transportation, and hence has been studied extensively <ref> [7, 10, 14, 17, 12, 13, 18, 2, 16] </ref>. Since multicommodity flow algorithms based on general interior-point methods for linear programming are slow [10, 19, 8], recent emphasis was on designing fast combinatorial algorithms that relied on problem structure. One successful approach has been to develop approximation algorithms.
Reference: [3] <author> A. V. Goldberg. </author> <title> A natural randomization strategy for multicommodity flow and related algorithms. </title> <journal> Information Processing Let., </journal> <volume> 42 </volume> <pages> 249-256, </pages> <year> 1992. </year>
Reference-contexts: This is essentially the main reason that let [13] and then <ref> [3] </ref> solve the no-cost multicommodity flow problem in expected ~ O (* 2 kmn) time. Radzik [16] showed that randomization step in these algorithms can be removed, leading to a deterministic ~ O (* 2 kmn) algorithm. The same approach does not seem to work directly in the min-cost case. <p> The basic idea involved in making the above algorithm deterministic is to use the approach of Radzik [16], who showed how to modify the no-cost mul-ticommodity flow algorithms in <ref> [13, 3] </ref> by replacing the random sampling with the following round robin strategy: instead of picking a random polytope to improve at each iteration, simply go through the polytopes in order, using P 1 in the first iteration, P 2 in the second iteration, and so on, as long as does
Reference: [4] <author> A. V. Goldberg and R. E. Tarjan. </author> <title> Solving minimum-cost flow problems by successive approximation. </title> <booktitle> In Proc. 19th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 7-18, </pages> <year> 1987. </year>
Reference-contexts: The desired oracle (2) corresponds to approximately solving k independent single commodity minimum cost flow problems. This can be done by adapting the Goldberg-Tarjan cost-scaling min-cost flow algorithm <ref> [4] </ref>, as in Leighton et al. [13]. (The adaptation is needed because the costs are exponential.) The resulting oracle runs in ~ O (kmn) time. Applying Theorem 2.5, we get an ~ O (* 3 k 2 mn) running time for solving the problem.
Reference: [5] <author> A. V. Goldberg and R. E. Tarjan. </author> <title> Finding minimum-cost circulations by successive approximation. </title> <journal> Math. of Oper. Res., </journal> <volume> 15 </volume> <pages> 430-466, </pages> <year> 1990. </year>
Reference-contexts: For multicommodity flow the points in P are sums of flows, so the problem of minimizing a linear potential function is simply the problem of computing several single-commodity min-cost flows|a problem which can be approximately solved in ~ O (mn) time per commodity <ref> [5] </ref>.
Reference: [6] <author> M. D. Grigoriadis and L. G. Khachiyan. </author> <title> Fast approximation schemes for convex programs with many blocks and coupling constraints. </title> <type> Technical Report DCS-TR-273, </type> <institution> Rutgers University, </institution> <year> 1991. </year>
Reference-contexts: A general approach to approximately solving such problems was studied by Plotkin, Shmoys and Tar-dos [15] and Grigoriadis and Khachiyan <ref> [6] </ref>. They assumed that there was an oracle that, given a linear cost function over P , could find a point in P of minimum cost. They then assigned to each point in P a potential based on how much that solution violated the added constraints A.
Reference: [7] <author> T. C. Hu. </author> <title> Multi-Commodity Network Flows. </title> <journal> J. ORSA, </journal> <volume> 11 </volume> <pages> 344-360, </pages> <year> 1963. </year>
Reference-contexts: Multicommodity flow arises naturally in many contexts, including virtual circuit routing in communication networks, VLSI layout, scheduling, and transportation, and hence has been studied extensively <ref> [7, 10, 14, 17, 12, 13, 18, 2, 16] </ref>. Since multicommodity flow algorithms based on general interior-point methods for linear programming are slow [10, 19, 8], recent emphasis was on designing fast combinatorial algorithms that relied on problem structure. One successful approach has been to develop approximation algorithms.
Reference: [8] <author> A. Kamath and O. Palmon. </author> <title> Improved interior-point algorithms for exact and approximate solutions of multicommodity flow problems. </title> <booktitle> In Proc. 6th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1995. </year>
Reference-contexts: Multicommodity flow arises naturally in many contexts, including virtual circuit routing in communication networks, VLSI layout, scheduling, and transportation, and hence has been studied extensively [7, 10, 14, 17, 12, 13, 18, 2, 16]. Since multicommodity flow algorithms based on general interior-point methods for linear programming are slow <ref> [10, 19, 8] </ref>, recent emphasis was on designing fast combinatorial algorithms that relied on problem structure. One successful approach has been to develop approximation algorithms. <p> Even better running times were achieved for special cases of the no-cost problem [12]. It is interesting to note that adding costs does not significantly affect the running time of the interior-point based algorithms <ref> [8, 19] </ref>. The main contribution of this paper is a deterministic minimum-cost multicommodity flow algorithm that runs in ~ O (* 3 kmn) time, essentially matching the bound for the unweighted case.
Reference: [9] <author> A. Kamath, O. Palmon, and S. Plotkin. </author> <title> Fast approximation algorithm for min-cost multicommod-ity flow. </title> <booktitle> In Proc. 6th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1995. </year>
Reference-contexts: The deterministic bound was improved for dense graphs by Kamath, Palmon, and Plotkin, <ref> [9] </ref> who gave an ~ O (* 4 kmn 2 ) algorithm, where n is the number of nodes. This is more than n times slower than Radzik's deterministic algorithm [16] for the no cost version of the problem.
Reference: [10] <author> S. Kapoor and P. M. Vaidya. </author> <title> Fast algorithms for convex quadratic programming and multicommod-ity flows. </title> <booktitle> In Proc. 18th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 147-159, </pages> <year> 1986. </year>
Reference-contexts: Multicommodity flow arises naturally in many contexts, including virtual circuit routing in communication networks, VLSI layout, scheduling, and transportation, and hence has been studied extensively <ref> [7, 10, 14, 17, 12, 13, 18, 2, 16] </ref>. Since multicommodity flow algorithms based on general interior-point methods for linear programming are slow [10, 19, 8], recent emphasis was on designing fast combinatorial algorithms that relied on problem structure. One successful approach has been to develop approximation algorithms. <p> Multicommodity flow arises naturally in many contexts, including virtual circuit routing in communication networks, VLSI layout, scheduling, and transportation, and hence has been studied extensively [7, 10, 14, 17, 12, 13, 18, 2, 16]. Since multicommodity flow algorithms based on general interior-point methods for linear programming are slow <ref> [10, 19, 8] </ref>, recent emphasis was on designing fast combinatorial algorithms that relied on problem structure. One successful approach has been to develop approximation algorithms.
Reference: [11] <author> R.M. Karp. </author> <title> Probabilistic recurrence relations. </title> <booktitle> In Proc. 23rd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 190-197, </pages> <year> 1991. </year>
Reference-contexts: But now our oracle runs k times faster for the same improvement. Using an analysis technique due to Karp <ref> [11] </ref>, this leads to a conclusion that the algorithm will terminate in expected ~ O (* 3 k) iterations, where the running time of each iteration is dominated by the computation of a single commodity minimum-cost flow.
Reference: [12] <author> P. Klein, S. Plotkin, C. Stein, and E. Tardos. </author> <title> Faster approximation algorithms for the unit capacity concurrent flow problem with applications to routing and finding sparse cuts. </title> <journal> SIAM Journal on Computing, </journal> <month> June </month> <year> 1994. </year>
Reference-contexts: Multicommodity flow arises naturally in many contexts, including virtual circuit routing in communication networks, VLSI layout, scheduling, and transportation, and hence has been studied extensively <ref> [7, 10, 14, 17, 12, 13, 18, 2, 16] </ref>. Since multicommodity flow algorithms based on general interior-point methods for linear programming are slow [10, 19, 8], recent emphasis was on designing fast combinatorial algorithms that relied on problem structure. One successful approach has been to develop approximation algorithms. <p> This is more than n times slower than Radzik's deterministic algorithm [16] for the no cost version of the problem. Even better running times were achieved for special cases of the no-cost problem <ref> [12] </ref>. It is interesting to note that adding costs does not significantly affect the running time of the interior-point based algorithms [8, 19].
Reference: [13] <author> T. Leighton, F. Makedon, S. Plotkin, C. Stein, E. Tardos, and S. Tragoudas. </author> <title> Fast approximation algorithms for multicommodity flow problem. </title> <institution> J. Comp. and Syst. Sci., </institution> <year> 1992. </year>
Reference-contexts: Multicommodity flow arises naturally in many contexts, including virtual circuit routing in communication networks, VLSI layout, scheduling, and transportation, and hence has been studied extensively <ref> [7, 10, 14, 17, 12, 13, 18, 2, 16] </ref>. Since multicommodity flow algorithms based on general interior-point methods for linear programming are slow [10, 19, 8], recent emphasis was on designing fast combinatorial algorithms that relied on problem structure. One successful approach has been to develop approximation algorithms. <p> If P consists of k flows that individually obey the capacity constraints, then the sum of those flows can violate the capacity constraints by a factor of at most k, meaning that the width of P is only k. This is essentially the main reason that let <ref> [13] </ref> and then [3] solve the no-cost multicommodity flow problem in expected ~ O (* 2 kmn) time. Radzik [16] showed that randomization step in these algorithms can be removed, leading to a deterministic ~ O (* 2 kmn) algorithm. <p> The desired oracle (2) corresponds to approximately solving k independent single commodity minimum cost flow problems. This can be done by adapting the Goldberg-Tarjan cost-scaling min-cost flow algorithm [4], as in Leighton et al. <ref> [13] </ref>. (The adaptation is needed because the costs are exponential.) The resulting oracle runs in ~ O (kmn) time. Applying Theorem 2.5, we get an ~ O (* 3 k 2 mn) running time for solving the problem. <p> The basic idea involved in making the above algorithm deterministic is to use the approach of Radzik [16], who showed how to modify the no-cost mul-ticommodity flow algorithms in <ref> [13, 3] </ref> by replacing the random sampling with the following round robin strategy: instead of picking a random polytope to improve at each iteration, simply go through the polytopes in order, using P 1 in the first iteration, P 2 in the second iteration, and so on, as long as does
Reference: [14] <author> T. Leighton and S. Rao. </author> <title> An approximate max-flow min-cut theorem for uniform multicommodity flow problems with applications to approximation algorithms. </title> <booktitle> In Proc. 29th IEEE Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 422-431, </pages> <year> 1988. </year>
Reference-contexts: Multicommodity flow arises naturally in many contexts, including virtual circuit routing in communication networks, VLSI layout, scheduling, and transportation, and hence has been studied extensively <ref> [7, 10, 14, 17, 12, 13, 18, 2, 16] </ref>. Since multicommodity flow algorithms based on general interior-point methods for linear programming are slow [10, 19, 8], recent emphasis was on designing fast combinatorial algorithms that relied on problem structure. One successful approach has been to develop approximation algorithms.
Reference: [15] <author> S. Plotkin, D. Shmoys, and E. Tardos. </author> <title> Fast approximation algorithms for fractional packing and covering problems. </title> <journal> Math of Oper. </journal> <note> Research, 1994. To appear. </note>
Reference-contexts: The addition of a cost function to the unweighted (no-cost) multicommodity flow problem has until now strongly impacted the performance of approximation algorithms. The minimum-cost multicommodity flow algorithm given by Plotkin, Shmoys, and Tardos <ref> [15] </ref>, runs in ~ O (* 2 km 2 ) expected time [15]; their deterministic version of this algorithm is slower by a factor of k, running in ~ O (* 2 k 2 m 2 ) time. <p> The addition of a cost function to the unweighted (no-cost) multicommodity flow problem has until now strongly impacted the performance of approximation algorithms. The minimum-cost multicommodity flow algorithm given by Plotkin, Shmoys, and Tardos <ref> [15] </ref>, runs in ~ O (* 2 km 2 ) expected time [15]; their deterministic version of this algorithm is slower by a factor of k, running in ~ O (* 2 k 2 m 2 ) time. <p> A general approach to approximately solving such problems was studied by Plotkin, Shmoys and Tar-dos <ref> [15] </ref> and Grigoriadis and Khachiyan [6]. They assumed that there was an oracle that, given a linear cost function over P , could find a point in P of minimum cost. <p> The running time of the algorithm in <ref> [15] </ref> depends on the width of the convex set P relative to A, defined as = max max a i x: That is, the width measures the extent by which any constraint in A can be "overflowed" by a point in P . <p> The optimization problem over P now becomes: find a flow of minimum cost under one cost metric without exceeding a given budget in some entirely different cost metric|a sort of "two cost" min-cost flow problem, for which no fast algorithm was previously known. The solution proposed in <ref> [15] </ref> was to move more of the complexity of the problem into A, and use a sophisticated width-reduction technique that results in a polytope P whose width with respect to A is m and whose optimization oracle involves ~ O (k) shortest path computations. <p> We will also assume that we have a starting point x 0 with corresponding 0 2. The reduction to this situation is relatively straightforward and changes the running time of our algorithm by at most a polylogarithmic factor <ref> [15] </ref>. As in [15], the running time of our approximation algorithm will depend on the width of the polytope P with respect to the matrix A, defined as = max max a i x:(3) The key difference between this definition and the one in [15] is that our width is independent <p> We will also assume that we have a starting point x 0 with corresponding 0 2. The reduction to this situation is relatively straightforward and changes the running time of our algorithm by at most a polylogarithmic factor <ref> [15] </ref>. As in [15], the running time of our approximation algorithm will depend on the width of the polytope P with respect to the matrix A, defined as = max max a i x:(3) The key difference between this definition and the one in [15] is that our width is independent of fi. <p> by at most a polylogarithmic factor <ref> [15] </ref>. As in [15], the running time of our approximation algorithm will depend on the width of the polytope P with respect to the matrix A, defined as = max max a i x:(3) The key difference between this definition and the one in [15] is that our width is independent of fi. The algorithm of [15] uses the width of P with respect to A fi , which might be significantly larger than its width with respect to A. Thus our algorithm will be much faster than that of [15] when the width of <p> time of our approximation algorithm will depend on the width of the polytope P with respect to the matrix A, defined as = max max a i x:(3) The key difference between this definition and the one in <ref> [15] </ref> is that our width is independent of fi. The algorithm of [15] uses the width of P with respect to A fi , which might be significantly larger than its width with respect to A. Thus our algorithm will be much faster than that of [15] when the width of P with respect to A is relatively small, while its width with <p> and the one in <ref> [15] </ref> is that our width is independent of fi. The algorithm of [15] uses the width of P with respect to A fi , which might be significantly larger than its width with respect to A. Thus our algorithm will be much faster than that of [15] when the width of P with respect to A is relatively small, while its width with respect to fi is very large. 2.2 Algorithm Denote u i (x) = a i x, u (x) = (u 1 (x); : : : u m (x)), and let f (z) = e <p> Therefore, we would like to be as large is possible. It turns out that we can make this approach work if we take proportional to the inverse of the width of the problem. In <ref> [15] </ref>, this width is the width of P with respect to A fi , which could be unbounded in our case. Our improvement is to replace this parameter with the width of P with respect to A, which we assume to be relatively small. <p> It is easy to check that the width of P with respect to A is bounded by k, the number of commodities. However, the width of P with respect to A fi may be unbounded, and thus it is not possible to apply the packing algo rithm of <ref> [15] </ref> to this representation of the problem. The desired oracle (2) corresponds to approximately solving k independent single commodity minimum cost flow problems. <p> Applying Theorem 2.5, we get an ~ O (* 3 k 2 mn) running time for solving the problem. To improve the running time we can use an approach that is similar to the one developed in <ref> [15] </ref>. The idea is to use the fact that the current point x can be represented as (x 1 ; x 2 ; : : : ; x k ) 2 P 1 fi P 2 fi P k , where x i 2 P i . <p> Just as for the constraints on capacities, we can now deduce that the sum of the flows will have cost at most k times the budget. Therefore, the budget constraint now has width k just like the capacity constraints, so we can apply the original algorithm of <ref> [15] </ref>. But now the oracle has changed: the oracle for P i is given a linear potential function and must find a minimum potential feasible flow of commodity i that does not have cost exceeding the budget. <p> Thus, applying our width bounding techniques, we can solve the two-cost flow problem to within (1 +*) in ~ O (* 3 mn) time. Using this approximation algorithm as the oracle in the original algorithm of <ref> [15] </ref> lets us restrict the width to O (k) and thus solve the min-cost multicommodity flow problem using ~ O (k) calls to the oracle, for a total running time of ~ O (kmn) time for constant *. <p> problem to be a natural problem in its own right, and therefore state: Lemma 3.3 A (1+ *)-approximation to the minimum two-cost flow problem can be computed in ~ O (* 3 mn) time. 3.3 Per-Commodity Costs Using our two-cost flow algorithm as the oracle in the packing algorithm of <ref> [15] </ref>), we can solve the following generalized version of min-cost multicommodity flow. Rather than just taking the cost contribution on an edge to be proportional to the total flow on that edge, we can make it dependent on which commodities are flowing on that edge.
Reference: [16] <author> T. Radzik. </author> <title> Fast deterministic approximation for the multicommodity flow problem. </title> <booktitle> In Proc. 6th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1995. </year>
Reference-contexts: Multicommodity flow arises naturally in many contexts, including virtual circuit routing in communication networks, VLSI layout, scheduling, and transportation, and hence has been studied extensively <ref> [7, 10, 14, 17, 12, 13, 18, 2, 16] </ref>. Since multicommodity flow algorithms based on general interior-point methods for linear programming are slow [10, 19, 8], recent emphasis was on designing fast combinatorial algorithms that relied on problem structure. One successful approach has been to develop approximation algorithms. <p> The deterministic bound was improved for dense graphs by Kamath, Palmon, and Plotkin, [9] who gave an ~ O (* 4 kmn 2 ) algorithm, where n is the number of nodes. This is more than n times slower than Radzik's deterministic algorithm <ref> [16] </ref> for the no cost version of the problem. Even better running times were achieved for special cases of the no-cost problem [12]. It is interesting to note that adding costs does not significantly affect the running time of the interior-point based algorithms [8, 19]. <p> This is essentially the main reason that let [13] and then [3] solve the no-cost multicommodity flow problem in expected ~ O (* 2 kmn) time. Radzik <ref> [16] </ref> showed that randomization step in these algorithms can be removed, leading to a deterministic ~ O (* 2 kmn) algorithm. The same approach does not seem to work directly in the min-cost case. <p> For example, to find a minimum-cost multicommod-ity flow, we add the additional budget-constraint row to the matrix A, and then use our technique to get a randomized algorithm with an ~ O (* 3 kmn) expected running time. Replacing randomization by the round-robin technique of <ref> [16] </ref> allows us to achieve the same time bound deterministically, thus matching the natural bound of " ~ O (mn) per commodity". In other words, we show that approximately computing a k-commodity min-cost flow is not much harder than approximately computing k single-commodity no-cost flows. <p> Thus, we have the following: Theorem 3.1 Min-cost multicommodity flow can be (1 + *)-approximately solved in ~ O (* 3 kmn) expected time. The basic idea involved in making the above algorithm deterministic is to use the approach of Radzik <ref> [16] </ref>, who showed how to modify the no-cost mul-ticommodity flow algorithms in [13, 3] by replacing the random sampling with the following round robin strategy: instead of picking a random polytope to improve at each iteration, simply go through the polytopes in order, using P 1 in the first iteration, P
Reference: [17] <author> F. Shahrokhi and D. W. Matula. </author> <title> The maximum concurrent flow problem. </title> <type> Technical Report CSR-183, </type> <institution> Department of Computer Science, New Mex-ico Tech., </institution> <year> 1988. </year>
Reference-contexts: Multicommodity flow arises naturally in many contexts, including virtual circuit routing in communication networks, VLSI layout, scheduling, and transportation, and hence has been studied extensively <ref> [7, 10, 14, 17, 12, 13, 18, 2, 16] </ref>. Since multicommodity flow algorithms based on general interior-point methods for linear programming are slow [10, 19, 8], recent emphasis was on designing fast combinatorial algorithms that relied on problem structure. One successful approach has been to develop approximation algorithms.
Reference: [18] <author> C. Stein. </author> <title> Approximation algorithms for multicom-modity flow and scheduling problems. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <year> 1992. </year>
Reference-contexts: Multicommodity flow arises naturally in many contexts, including virtual circuit routing in communication networks, VLSI layout, scheduling, and transportation, and hence has been studied extensively <ref> [7, 10, 14, 17, 12, 13, 18, 2, 16] </ref>. Since multicommodity flow algorithms based on general interior-point methods for linear programming are slow [10, 19, 8], recent emphasis was on designing fast combinatorial algorithms that relied on problem structure. One successful approach has been to develop approximation algorithms.
Reference: [19] <author> P. M. Vaidya. </author> <title> Speeding up linear programming using fast matrix multiplication. </title> <booktitle> In Proc. 30th IEEE Annual Symposium on Foundations of Computer Science, </booktitle> <year> 1989. </year>
Reference-contexts: Multicommodity flow arises naturally in many contexts, including virtual circuit routing in communication networks, VLSI layout, scheduling, and transportation, and hence has been studied extensively [7, 10, 14, 17, 12, 13, 18, 2, 16]. Since multicommodity flow algorithms based on general interior-point methods for linear programming are slow <ref> [10, 19, 8] </ref>, recent emphasis was on designing fast combinatorial algorithms that relied on problem structure. One successful approach has been to develop approximation algorithms. <p> Even better running times were achieved for special cases of the no-cost problem [12]. It is interesting to note that adding costs does not significantly affect the running time of the interior-point based algorithms <ref> [8, 19] </ref>. The main contribution of this paper is a deterministic minimum-cost multicommodity flow algorithm that runs in ~ O (* 3 kmn) time, essentially matching the bound for the unweighted case.
References-found: 19

