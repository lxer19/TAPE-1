URL: http://www.cs.nyu.edu/phd_students/fuchs/sgml.ps
Refering-URL: http://www.cs.nyu.edu/phd_students/fuchs/index.html
Root-URL: http://www.cs.nyu.edu
Title: The User Interface as Document: SGML and Distributed Applications  
Author: Matthew Fuchs 
Keyword: SGML, User Interfaces, Active Documents, Distributed Systems, Script ing Languages, Information Browsing  
Date: March 4, 1996  
Abstract: Multi-user distributed applications running on heterogeneous networks must be able to display user interface components on several platforms. In wide-area public networks, such as the Internet, the mix of platforms and participants in an application will occur dynamically; the user interface will need to coexist with environments completely uncontrolled by the designer. We have dealt with this issue by considering user interfaces as a kind of document specifying the application's requirements and adopting SGML technology to process them locally. This approach provides new flexibility, with implications for the design of network browsers, such as those of the World Wide Web, and leads to an interesting class of active documents. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Denis Arnon. Scrimshaw: </author> <title> a language for document queries and transormation. </title> <booktitle> In 5th Int'l Conference on Electronic Publishing, Document Manipulation, and Typography, </booktitle> <year> 1994. </year>
Reference-contexts: In terms of this taxonomy, we are proposing a suite of special purpose languages, which can be linked to a general purpose language, for event driven processing of SGML documents. 21 A number of other SGML processing architectures have been proposed, such as DSSSL, Scrimshaw <ref> [1] </ref>, the Amsterdam SGML Parser (ASP), and Simon [3], as well as other proprietary systems. Our architecture, in the enlarged form, has certain fundamental features which distinguish it from these competing systems.
Reference: [2] <author> Tim Berners-Lee and Daniel Connolly. </author> <title> Hypertext Markup Language: A representation of textual information and metainformation for retrieval and interchange. </title> <type> Technical report. 24 </type>
Reference: [3] <author> An Feng and Toshiro Wakayama. Simon: </author> <title> a grammar based transformation system for structured documents. </title> <booktitle> In 5th Int'l Conference on Electronic Publishing, Document Manipulation, and Typography, </booktitle> <year> 1994. </year>
Reference-contexts: this taxonomy, we are proposing a suite of special purpose languages, which can be linked to a general purpose language, for event driven processing of SGML documents. 21 A number of other SGML processing architectures have been proposed, such as DSSSL, Scrimshaw [1], the Amsterdam SGML Parser (ASP), and Simon <ref> [3] </ref>, as well as other proprietary systems. Our architecture, in the enlarged form, has certain fundamental features which distinguish it from these competing systems. In particular, none of them has a facility corresponding to nesting tag maps, which we have found very useful.
Reference: [4] <author> Dan Heller. </author> <title> MOTIF Programming Manual. </title> <editor> O'Reilly and Assocs., </editor> <year> 1994. </year>
Reference-contexts: Motif <ref> [4] </ref>, for example, uses the User Interface Language (UIL) for this purpose. Developers can specify all the widgets of an applications and their event bindings in UIL. The UIL file is compiled and used to create the actual application widgets at run time.
Reference: [5] <author> ISO/IEC. </author> <title> DIS 10179.2 Document Style Semantics and Specification Language. </title>
Reference-contexts: Our approach attempts to support all these by considering them as aspects of the mobility of information. 3 3 Documents are programs: linking the document to the application The SGML standard, and associated standards such as DSSSL <ref> [5] </ref> and HyTime [6], are explicitly application independent; no constraints are made on the structure of the application. Our applications, however, need to be as transportable as documents. We also anticipate a proliferation of document types, so applications should be easy to construct.
Reference: [6] <author> ISO/IEC. </author> <title> IS 10744 Hypermedia/Time-based Structuring Language (HyTime), </title> <year> 1992. </year>
Reference-contexts: Our approach attempts to support all these by considering them as aspects of the mobility of information. 3 3 Documents are programs: linking the document to the application The SGML standard, and associated standards such as DSSSL [5] and HyTime <ref> [6] </ref>, are explicitly application independent; no constraints are made on the structure of the application. Our applications, however, need to be as transportable as documents. We also anticipate a proliferation of document types, so applications should be easy to construct.
Reference: [7] <author> Brad Myers. </author> <title> Why are human-computer interfaces difficult to design and implement. </title> <type> Technical Report CMU-CS-93-183, </type> <institution> Carnegie Mellon University, </institution> <year> 1993. </year>
Reference-contexts: This section discusses these in turn, with an emphasis on graphical applications. Controlling events in a non-distributed, single-user GUI-driven application is difficult <ref> [7] </ref>, and is even more so in a multi-user, distributed 14 application, where several users with different views may be interacting with the system at cross purposes simultaneously.
Reference: [8] <author> John K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Interpreters of type tkmap take a document and convert it to a set of widgets using the Tk <ref> [8] </ref> toolkit. This is a weakness of our current implementation, but we are examining parts of the DSSSL proposal as a means of specifying a more independent geometry.
Reference: [9] <author> C. M Sperberg-McQueen and Robert F. Goldstein. </author> <title> HTML to the max. </title> <booktitle> In Second International World Wide Web Conference, </booktitle> <year> 1994. </year>
Reference-contexts: For a particular content model to be processed in two different ways, it would have to appear twice in the DTD. Each appearance would require different names for the elements. This is acceptable if there is only one application which will process the documents, but not for multiple applications. <ref> [9] </ref> presents a proposal for including SGML support in World Wide Web browsers. This proposal is based on style-sheets, which would be much weaker than our general purpose application architecture.
Reference: [10] <author> J. Warmer and H. VanVleit. </author> <title> Processing SGML Documents. </title> <publisher> Electronic Publishing, </publisher> <year> 1991. </year> <month> 25 </month>
Reference-contexts: Any document may be a UI, given the right SGML application (so there is no special GUI DTD), and any UI can be a document (so interfaces can be manipulated and queried locally). We have also presented a particular SGML application architecture. <ref> [10] </ref> divides SGML application architectures into three categories: 1. Simple mappings between tags and particular text strings. 2. Special purpose languages for processing SGML documents. 3. Systems using general purpose programming languages to process the document.
References-found: 10

