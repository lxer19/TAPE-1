URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/project/ozone/www/object-systems/pork.ps.Z
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/project/ozone/www/icll-pubs.html
Root-URL: 
Title: PORK Object System Programmers' Guide  
Author: Ora Lassila 
Note: c 1995 Ora Lassila This research has been supported in part by the Advanced Research Projects Agency under contract F30602-90-C-0119 "Flexible Multi-Agent Coordination" (as part of the ARPA/Rome Labs Planning Initiative) and under contract F30602-91-C-0014 (under subcontract to BBN Systems and Technologies), by the National Aeronautics and Space Administration (NASA) under contract NCC 2-531, and by the CMU Robotics Institute.  
Date: April 1995  
Address: Pittsburgh, PA 15213  
Affiliation: The Robotics Institute Carnegie Mellon University  
Pubnum: CMU-RI-TR-95-12  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Richard Fikes and Tom Kehler, </author> <year> 1985. </year> <title> "The Role of Frame-Based Representation in Reasoning", </title> <journal> CACM, </journal> <pages> 28(9) 904-920. </pages>
Reference-contexts: In an attempt to make it easier to use frame systems in a normal programming context, designers of frame systems have often added features that add "object-oriented" programming capabilities 1 to frame systems (examples of systems like this are KEE <ref> [1, 18] </ref>, CRL [19] and BEEF [3, 9, 10]). There are differences between "real" object-oriented programming and the frame-based flavor of object programming.
Reference: [2] <author> Adele Goldberg and David Robson, </author> <year> 1983. </year> <title> Smalltalk-80: The Language and its Implementation, </title> <address> Reading (MA), </address> <publisher> Addison-Wesley. </publisher>
Reference-contexts: These differences in inheritance are closely related to differences in program access to the type hierarchy. In an object-oriented programming system, only instances are objects of the system. Systems that offer facilities for metaprogramming <ref> [2, 17] </ref> also allow the type hierarchy to be accessed. In some frame systems types do not fundamentally differ from instances, and program access to the type hierarchy is possible without any meta level.
Reference: [3] <author> Juha Hynynen and Ora Lassila, </author> <year> 1989. </year> <title> "On the Use of Object-Oriented Paradigm in a Distributed Problem Solver", </title> <journal> AI Communications, </journal> <pages> 2(3) 142-151. </pages>
Reference-contexts: From the design standpoint PORK has its heritage in the "well done BEEF" efforts [11] undertaken at the end of the BEEF project <ref> [3, 9, 10] </ref>. 1.1 Motivation The concept of frames [12] and the idea of a frame system have been very popular as an easy-to-understand paradigm for representing complex data. <p> In an attempt to make it easier to use frame systems in a normal programming context, designers of frame systems have often added features that add "object-oriented" programming capabilities 1 to frame systems (examples of systems like this are KEE [1, 18], CRL [19] and BEEF <ref> [3, 9, 10] </ref>). There are differences between "real" object-oriented programming and the frame-based flavor of object programming. First, there are definite differences between inheritance mechanisms: In object-oriented programming systems, types usually form a taxonomy, and inheritance is understood as the propagation of functional and structural information in this hierarchy.
Reference: [4] <author> Mark Kantrowitz, </author> <year> 1991. </year> <title> Portable Utilities for Common Lisp, User Guide and Implementation Notes, </title> <type> Report CMU-CS-91-143, </type> <institution> Pittsburgh (PA), School of Computer Science, Carnegie Mellon University. </institution>
Reference-contexts: PORK is intended to be constructed using the make-system tool written by Mark Kantrowitz at CMU <ref> [4] </ref>, but since PORK only consists of very few source files even manual system construction is very easy. 50 5.6 Reliance on Common Lisp MOP The reliance on the CLOS MOP [6] has been minimized in the current version of PORK.
Reference: [5] <author> Sonya E. Keene, </author> <year> 1989. </year> <title> Object Oriented Programming in Common Lisp: A Programmer's Guide to CLOS, </title> <address> Reading (MA), </address> <publisher> Addison-Wesley. </publisher>
Reference-contexts: This manual is not an introductory text to programming with CLOS. Readers unfamiliar with CLOS programming techniques are first encouraged to study some CLOS programming textbook, for example <ref> [5] </ref>. 2.1 Mixing PORK and "Plain" CLOS Since PORK is just an extension of CLOS, mixing PORK and CLOS programming is possible without trouble. For example, one can define ordinary slots to frame classes, and these will behave exactly like they would in "plain" CLOS.
Reference: [6] <author> Gregor Kiczales, Jim des Rivieres and Daniel G. Bobrow, </author> <year> 1991. </year> <title> The Art of the Metaobject Protocol, </title> <address> Cambridge (MA), </address> <publisher> MIT Press. </publisher>
Reference-contexts: Otherwise PORK behaves exactly like standard CLOS, thus allowing PORK and CLOS code to be freely mixed. PORK also has a metaobject protocol to allow the system to be extended (for an introduction of metaobject programming we recommend the book "The Art of the Metaobject Protocol" <ref> [6] </ref> which explains the philosophy of metaobject protocols as well as documents the proposed standard MOP for CLOS). PORK, as an extension of CLOS, adheres to the class-instance paradigm. <p> Use the :fragile option with extreme care. It should be mentioned that class allocation of relation slots is not allowed in PORK (specifying the value :class for :allocation). Ordinary CLOS slots can use class allocation. 19 2.7 Extending the System Terminology note: According to <ref> [6] </ref>, metaobjects (i.e., classes, generic functions, methods etc.) can be divided into three categories: those defined in CLOS MOP are called specified, those defined by an implementation (of CLOS) are called implementation-specific, and those defined by a portable program are called portable. <p> Sometimes extending requires the programmer to write her own subclasses to specified classes or to define her own methods to specified generic functions. In order to avoid clashes with specified methods, one should observe the following rules (adapted from <ref> [7, 6] </ref>): * Redefinition of specified metaobjects (classes, generic functions, etc.) is forbidden. * User-defined metaobjects must be named in a user-defined package. * When defining a method for a specified generic function, at least one of the specializers must be a user-defined class or an eql-specializer whose associated value is <p> Some changes introduced by the ANSI Common Lisp have been anticipated and the source code "read conditioned" using #+:x3j13. * The implementation needs to be compatible with a subset of the proposed Common Lisp Object System Metaobject Protocol (CLOS MOP) <ref> [6] </ref>. Re liance on concepts defined in this proposal is described in section 5.6. Since PORK is an extension of CLOS it really makes little sense to provide full "CLtL1" support. <p> PORK is intended to be constructed using the make-system tool written by Mark Kantrowitz at CMU [4], but since PORK only consists of very few source files even manual system construction is very easy. 50 5.6 Reliance on Common Lisp MOP The reliance on the CLOS MOP <ref> [6] </ref> has been minimized in the current version of PORK. The CLOS MOP is not an official part of the Common Lisp standard proposal [17], thus variations in details and completeness of implementations exist between different Common Lisp systems. <p> has to be made separately. * The function compute-class-precedence-list was implemented by "sand wiching" the internal function ccl::compute-cpl. * The function class-finalized-p was implemented as follows: (defmethod class-finalized-p ((class class)) (not (null (slot-value class 'ccl::own-wrapper)))) * The function validate-superclass was written according to the specifica tion in the CLOS MOP <ref> [6] </ref>. MCL has no counterpart. A more detailed account on the implementation of the MOP extension of MCL is given in [11]. 52 5.6.2 MOP and Other Common Lisps To make PORK run on TI Explorer Common Lisp (TICL), certain additional definitions were required.
Reference: [7] <author> Gregor Kiczales and John Lamping, </author> <year> 1992. </year> <title> "Issues in the Design and Specification of Class Libraries", </title> <booktitle> in OOPSLA'92 Conference Proceedings, ACM Sigplan Notices 27(10) 435-451. </booktitle>
Reference-contexts: Sometimes extending requires the programmer to write her own subclasses to specified classes or to define her own methods to specified generic functions. In order to avoid clashes with specified methods, one should observe the following rules (adapted from <ref> [7, 6] </ref>): * Redefinition of specified metaobjects (classes, generic functions, etc.) is forbidden. * User-defined metaobjects must be named in a user-defined package. * When defining a method for a specified generic function, at least one of the specializers must be a user-defined class or an eql-specializer whose associated value is
Reference: [8] <author> Ora Lassila, </author> <year> 1990. </year> <title> "Frames or Objects, or Both?", </title> <booktitle> in Workshop Notes from the 8th National Conference on Artificial Intelligence (AAAI-90): Object-Oriented Programming in AI, </booktitle> <address> Boston (MA), </address> <note> AAAI. [Report HTKK-TKO-B67, </note> <institution> Otaniemi (Finland), Department of Computer Science, Helsinki University of Technology]. </institution>
Reference-contexts: Object-oriented programming systems in general are not adequate for knowledge-based systems programming. For a more detailed discussion on frame systems vs. object-oriented programming systems, see for example <ref> [8] </ref>. Many attempts have been made to bring frame-based programming closer to mainstream programming by adding object-oriented programming features. On the other hand, PORK brings some of the features of frame systems into the realm of mainstream object-oriented programming.
Reference: [9] <author> Ora Lassila, </author> <year> 1991. </year> <title> BEEF Reference Manual A Programmer's Guide to the BEEF Frame System (second version), </title> <type> Report HTKK-TKO-C46, </type> <institution> Otaniemi 55 (Finland), Department of Computer Science, Helsinki University of Technol--ogy. </institution>
Reference-contexts: From the design standpoint PORK has its heritage in the "well done BEEF" efforts [11] undertaken at the end of the BEEF project <ref> [3, 9, 10] </ref>. 1.1 Motivation The concept of frames [12] and the idea of a frame system have been very popular as an easy-to-understand paradigm for representing complex data. <p> In an attempt to make it easier to use frame systems in a normal programming context, designers of frame systems have often added features that add "object-oriented" programming capabilities 1 to frame systems (examples of systems like this are KEE [1, 18], CRL [19] and BEEF <ref> [3, 9, 10] </ref>). There are differences between "real" object-oriented programming and the frame-based flavor of object programming. First, there are definite differences between inheritance mechanisms: In object-oriented programming systems, types usually form a taxonomy, and inheritance is understood as the propagation of functional and structural information in this hierarchy.
Reference: [10] <author> Ora Lassila, </author> <year> 1992. </year> <title> The Design and Implementation of a Frame System, </title> <institution> Otaniemi (Finland), Faculty of Technical Physics, Helsinki University of Technology, </institution> <type> Master's Thesis. </type>
Reference-contexts: From the design standpoint PORK has its heritage in the "well done BEEF" efforts [11] undertaken at the end of the BEEF project <ref> [3, 9, 10] </ref>. 1.1 Motivation The concept of frames [12] and the idea of a frame system have been very popular as an easy-to-understand paradigm for representing complex data. <p> In an attempt to make it easier to use frame systems in a normal programming context, designers of frame systems have often added features that add "object-oriented" programming capabilities 1 to frame systems (examples of systems like this are KEE [1, 18], CRL [19] and BEEF <ref> [3, 9, 10] </ref>). There are differences between "real" object-oriented programming and the frame-based flavor of object programming. First, there are definite differences between inheritance mechanisms: In object-oriented programming systems, types usually form a taxonomy, and inheritance is understood as the propagation of functional and structural information in this hierarchy. <p> The design of PORK draws from experience with frame systems like CRL and KEE, and from the insight into frame system design gained during the BEEF project <ref> [10] </ref>. PORK is implemented as a portable extension of the Common Lisp Object System (CLOS, [17, pp.770-864]).
Reference: [11] <author> Ora Lassila, </author> <year> 1992. </year> <title> "Oliojarjestelman laajentaminen metaobjektiprotokollan avulla" ("Extending an Object System using a Metaobject Protocol", in Finnish), </title> <type> unpublished report, </type> <institution> Otaniemi (Finland), Department of Computer Science, Helsinki University of Technology. </institution>
Reference-contexts: The name PORK stands for "Programmable Objects for Representing Knowledge." (earlier the system was called "Parsifal" but because of a conflict with the name of an existing system this name had to be dropped). From the design standpoint PORK has its heritage in the "well done BEEF" efforts <ref> [11] </ref> undertaken at the end of the BEEF project [3, 9, 10]. 1.1 Motivation The concept of frames [12] and the idea of a frame system have been very popular as an easy-to-understand paradigm for representing complex data. <p> MCL has no counterpart. A more detailed account on the implementation of the MOP extension of MCL is given in <ref> [11] </ref>. 52 5.6.2 MOP and Other Common Lisps To make PORK run on TI Explorer Common Lisp (TICL), certain additional definitions were required. TICL treats generic function objects differently, thus the method of no-applicable-method specialized for relation-generic-function would never get called.
Reference: [12] <author> Marvin Minsky, </author> <year> 1975. </year> <title> "A Framework for Representing Knowledge", in The Psychology of Computer Vision, </title> <editor> Patrick Henry Winston (ed.), </editor> <address> New York (NY), </address> <publisher> McGraw-Hill. </publisher>
Reference-contexts: From the design standpoint PORK has its heritage in the "well done BEEF" efforts [11] undertaken at the end of the BEEF project [3, 9, 10]. 1.1 Motivation The concept of frames <ref> [12] </ref> and the idea of a frame system have been very popular as an easy-to-understand paradigm for representing complex data. The fundamental idea is simple: frames are the system's basic objects, they represent real-world concepts and phenomena; frames have named attributes, slots, and slots can be assigned values.
Reference: [13] <author> Smith, S.F., </author> <year> 1993. </year> <title> "OPIS: A Methodology and Architecture for Reactive Scheduling", in Intelligent Scheduling, </title> <editor> (eds. M. Fox and M. Zweben), </editor> <publisher> Morgan Kaufmann Publishers. </publisher>
Reference-contexts: Introduction Initially, PORK was designed for use in the re-engineering of a large knowledge-based system, the OPIS/DITOPS scheduling system <ref> [13, 14, 15, 16] </ref>. The purpose of the re-engineering effort was to move from an old frame-based implementation to a more maintainable object-oriented version. This chapter introduces PORK and provides some background for the motivation of its design.
Reference: [14] <author> Stephen F. Smith and Katia P. Sycara, </author> <year> 1993. </year> <title> "A Constraint-Based Framework for Multi-Level Management of Transportation Schedules", </title> <address> San Antonio (TX), </address> <note> DARPA Planning Workshop. </note>
Reference-contexts: Introduction Initially, PORK was designed for use in the re-engineering of a large knowledge-based system, the OPIS/DITOPS scheduling system <ref> [13, 14, 15, 16] </ref>. The purpose of the re-engineering effort was to move from an old frame-based implementation to a more maintainable object-oriented version. This chapter introduces PORK and provides some background for the motivation of its design.
Reference: [15] <author> Stephen F. Smith and Ora Lassila, </author> <year> 1994. </year> <title> "Configurable Systems for Reactive Production Management", in Knowledge-Based Reactive Scheduling, </title> <booktitle> IFIP Transactions B-15, </booktitle> <address> Amsterdam (The Netherlands), </address> <publisher> Elsevier Science Publishers. </publisher>
Reference-contexts: Introduction Initially, PORK was designed for use in the re-engineering of a large knowledge-based system, the OPIS/DITOPS scheduling system <ref> [13, 14, 15, 16] </ref>. The purpose of the re-engineering effort was to move from an old frame-based implementation to a more maintainable object-oriented version. This chapter introduces PORK and provides some background for the motivation of its design.
Reference: [16] <author> Stephen F. Smith and Ora Lassila, </author> <year> 1994. </year> <title> "Toward the Development of Flexible Mixed-Initiative Scheduling Tools", in ARPA/Rome Laboratory Knowledge-Based Planning and Scheduling Initiative Workshop Proceedings, </title> <address> Tucson (AZ), </address> <publisher> Morgan Kaufmann, pp.145-154. </publisher>
Reference-contexts: Introduction Initially, PORK was designed for use in the re-engineering of a large knowledge-based system, the OPIS/DITOPS scheduling system <ref> [13, 14, 15, 16] </ref>. The purpose of the re-engineering effort was to move from an old frame-based implementation to a more maintainable object-oriented version. This chapter introduces PORK and provides some background for the motivation of its design.

References-found: 16

