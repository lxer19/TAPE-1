URL: http://www.cs.utexas.edu/users/mfkb/papers/aij94.ps
Refering-URL: http://www.cs.utexas.edu/users/mfkb/papers/
Root-URL: 
Email: brad@bert.eecs.uic.edu  porter@cs.utexas.edu  
Title: Analysis and Empirical Studies of Derivational Analogy  
Author: Brad Blumenthal Bruce Porter 
Note: Support for this research was provided by the National Science Foundation under grant IRI-8620052, Apple Computer Corporation, Hughes Corporation, Digital Equipment Corporation, and GTE Research. This research was conducted in the  Additional support has been provided by the Medical Research Council of Great Britain.  
Date: October 18, 1994  
Address: Chicago, IL 60680  Austin, Texas 78712  Austin.  
Affiliation: Department of Electrical Engineering and Computer Science University of Illinois at Chicago  Department of Computer Sciences University of Texas at Austin  Department of Computer Sciences, University of Texas at  
Abstract: Derivational analogy is a technique for reusing problem solving experience to improve problem solving performance. This research addresses an issue common to all problem solvers that use derivational analogy: overcoming the mismatches between past experiences and new problems that impede reuse. First, this research describes the variety of mismatches that can arise and proposes a new approach to derivational analogy that uses appropriate adaptation strategies for each. Second, it compares this approach with seven others in a common domain. This empirical study shows that derivational analogy is almost always more efficient than problem solving from scratch, but the amount it contributes depends on its ability to overcome mismatches 
Abstract-found: 1
Intro-found: 1
Reference: [Bax90] <author> Ira D. Baxter. </author> <title> Transformational maintenance by reuse of design histories. </title> <booktitle> In Proceedings of Fourth International Workshop on Computer-Aided Software Engineering. IEEE Computer Society, </booktitle> <month> December </month> <year> 1990. </year>
Reference-contexts: Since its proposal [Car83, Car86], it has been applied to a number of domains, including circuit design, matrix manipulation, non-linear planning, and more recently, computer program transformations, DC circuit problem solving, and the design of human-computer interfaces <ref> [Mos89, MB87, MF89, HA87, Kam89a, CV88, Bax90, HL90, Blu90a] </ref>. While this diversity shows that derivational analogy is widely applicable, it makes it difficult to determine how and why derivational analogy works. The goal of the research described here is to examine derivational analogy in two ways.
Reference: [BH91] <author> S. Bhansali and M. Harandi. </author> <title> Synthesizing unix shell scripts using derivational analogy: An empirical assessment. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <pages> pages 521-526, </pages> <year> 1991. </year>
Reference-contexts: Second, a derivational analogy algorithm must select one of its recorded experiences based on features of the new problem. The recording, indexing, and retrieval of experience is a difficult problem, and some preliminary solutions have been suggested in the derivational analogy research <ref> [BH91, Kam90b, Vel90] </ref> and in the knowledge acquisition and case-based reasoning literature [PBH90, Ham90, Kol87]. Third, the derivational analogy algorithm must adapt the selected recorded experience for reuse on a new problem that is similar, but not identical, to the original problem.
Reference: [Blu90a] <author> Brad Blumenthal. </author> <title> Applying Design Replay to the Domain of Metaphoric Human Interface Design. </title> <type> PhD thesis, </type> <institution> University of Texas Artificial Intelligence Lab, Austin, TX, </institution> <year> 1990. </year> <note> (Available as Technical Report AI-90-145). </note>
Reference-contexts: Since its proposal [Car83, Car86], it has been applied to a number of domains, including circuit design, matrix manipulation, non-linear planning, and more recently, computer program transformations, DC circuit problem solving, and the design of human-computer interfaces <ref> [Mos89, MB87, MF89, HA87, Kam89a, CV88, Bax90, HL90, Blu90a] </ref>. While this diversity shows that derivational analogy is widely applicable, it makes it difficult to determine how and why derivational analogy works. The goal of the research described here is to examine derivational analogy in two ways. <p> Alternatively, instead of working with a person, a derivational analogy algorithm might record the actions taken by a from-scratch problem solver (e.g., a non-linear planner [Kam89b, Vel90], a system for solving circuit analysis problems [HL90], or an automatic human-interface design system <ref> [Blu90a] </ref>). Second, a derivational analogy algorithm must select one of its recorded experiences based on features of the new problem. <p> A second advantage of the interface design domain is that the quality of the solutions produced in this domain is sensitive to the order in which goals are addressed. The reasons for this sensitivity are discussed more fully elsewhere <ref> [Blu90a] </ref>; however, one example involves the design of direct manipulation interfaces [HHN86]. If an operation in an interface acts on an entity that is displayed on the screen, it is often desirable to implement the gesture for that operation as a direct manipulation action on that entity. <p> For example, the spindle in the Rolodex corresponds to the spine 3 MAID is an acronym for Metaphoric Application Interface Designer. It is described more fully elsewhere <ref> [Blu90b, Blu90a, Blu90c] </ref>. 4 Rolodex is a trademark of the Rolodex Company. 7 mouse-sensitive regions. using the Rolodex metaphor. 8 on the notepad, but the Rolodex frame does not correspond to anything in the notepad. <p> Metaphoric mappings are either given by the designer as part of the initial problem statement, or established by the MAID design rules (for a detailed discussion of how MAID automatically establishes new mappings see <ref> [Blu90c, Blu90b, Blu90a] </ref>. 2.2.1 Detours When a new problem contains goals that do not correspond to anything in the recorded experience, these goals are referred to as detours. <p> However, depending on the nature of the domain, this strategy of ignoring horizontal detours may have adverse effects on the quality of the resulting problem solution (as described briefly in section 5 and in detail elsewhere <ref> [Blu90a] </ref>). A more troublesome kind of detour is the vertical detour. Like a horizontal detour, this sort of detour occurs when there are some extra goals in the new problem that do not correspond to anything in the recorded experience. <p> The fifth one is the REMAID 7 system for reusing human interface design experience <ref> [Blu90a] </ref> and is one of the results of the research described here. REMAID embodies three novel approaches to the problem of adaptation and recovery. First, it was designed to distinguish the various kinds of topology mismatches described in section 2 and to use different adaptation strategies for each. <p> LASH uses the same adaptation and recovery strategies as the REMAID system (described in the next section). 3.5 REMAID Unlike the other algorithms described and implemented here, REMAID was designed with topology mismatches in mind; where possible, its strategies distinguish the various mismatches and adapt to them appropriately <ref> [Blu90a] </ref>. REMAID's capability to distinguish and adjust to detours, pre-tours, and combinations allows it to efficiently continue reuse when mismatches between the recorded experience and the new problem are found. <p> As a result, the experiments determine just how much adaptation is required for the flexibility of the REMAID program to make up for the additional overhead of that algorithm. 4.5 Experimental conclusions The data from the experiments using the reservation application are described in detail elsewhere <ref> [Blu90a] </ref>. This section summarizes the main capable of detecting horizontal detours, it is also slightly more expensive than the other approaches. Generally, REMAID's efficiency at adapting to mismatches outweighs this expense. 33 conclusions. <p> This section focuses on a fundamental, inherent limitation of the derivational analogy technique as it is currently being pursued in the research. Simply put, the problem is how to integrate innovation with the reuse of experience <ref> [Blu90a] </ref>. This is not an implementation problem, but rather a problem with the fundamental behavior of derivational analogy. <p> However, it is unclear whether the increase outweighs the extra effort. In any case, this technique cannot be used when the domain includes rules with consequents conditional on their antecedents as described elsewhere <ref> [Blu90a] </ref>. 37 back up to difference links between the problem specification for the re-corded experience and the problem specification for the new problem.
Reference: [Blu90b] <author> Brad Blumenthal. </author> <title> Incorporating metaphor in automated interface designs. </title> <booktitle> In Proceedings of the Third IFIP Conference on Human-Computer Interaction, </booktitle> <address> Cambridge, England, </address> <year> 1990. </year>
Reference-contexts: For example, the spindle in the Rolodex corresponds to the spine 3 MAID is an acronym for Metaphoric Application Interface Designer. It is described more fully elsewhere <ref> [Blu90b, Blu90a, Blu90c] </ref>. 4 Rolodex is a trademark of the Rolodex Company. 7 mouse-sensitive regions. using the Rolodex metaphor. 8 on the notepad, but the Rolodex frame does not correspond to anything in the notepad. <p> Metaphoric mappings are either given by the designer as part of the initial problem statement, or established by the MAID design rules (for a detailed discussion of how MAID automatically establishes new mappings see <ref> [Blu90c, Blu90b, Blu90a] </ref>. 2.2.1 Detours When a new problem contains goals that do not correspond to anything in the recorded experience, these goals are referred to as detours.
Reference: [Blu90c] <author> Brad Blumenthal. </author> <title> Strategies for automatically incorporating metaphoric attributes in interface designs. </title> <booktitle> In Proceedings of the Third User Interface Software and Technology Workshop, </booktitle> <address> Snowbird, Utah, </address> <year> 1990. </year>
Reference-contexts: For example, the spindle in the Rolodex corresponds to the spine 3 MAID is an acronym for Metaphoric Application Interface Designer. It is described more fully elsewhere <ref> [Blu90b, Blu90a, Blu90c] </ref>. 4 Rolodex is a trademark of the Rolodex Company. 7 mouse-sensitive regions. using the Rolodex metaphor. 8 on the notepad, but the Rolodex frame does not correspond to anything in the notepad. <p> Metaphoric mappings are either given by the designer as part of the initial problem statement, or established by the MAID design rules (for a detailed discussion of how MAID automatically establishes new mappings see <ref> [Blu90c, Blu90b, Blu90a] </ref>. 2.2.1 Detours When a new problem contains goals that do not correspond to anything in the recorded experience, these goals are referred to as detours.
Reference: [Car83] <author> Jamie G. Carbonell. </author> <title> Derivational analogy and its role in problem solving. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 64-69, </pages> <address> Washington, DC, </address> <year> 1983. </year>
Reference-contexts: 1 The derivational analogy technique Derivational analogy is a technique for reusing problem solving experience to improve problem solving performance. Since its proposal <ref> [Car83, Car86] </ref>, it has been applied to a number of domains, including circuit design, matrix manipulation, non-linear planning, and more recently, computer program transformations, DC circuit problem solving, and the design of human-computer interfaces [Mos89, MB87, MF89, HA87, Kam89a, CV88, Bax90, HL90, Blu90a].
Reference: [Car86] <author> Jamie G. Carbonell. </author> <title> Derivational analogy: A theory of reconstructive problem solving. </title> <editor> In R. S. Michalski, Jamie G. Car-bonell, and T. M. Mitchell, editors, </editor> <booktitle> Machine Learning: An Artificial Intelligence Approach, volume II, chapter 14. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1986. </year>
Reference-contexts: 1 The derivational analogy technique Derivational analogy is a technique for reusing problem solving experience to improve problem solving performance. Since its proposal <ref> [Car83, Car86] </ref>, it has been applied to a number of domains, including circuit design, matrix manipulation, non-linear planning, and more recently, computer program transformations, DC circuit problem solving, and the design of human-computer interfaces [Mos89, MB87, MF89, HA87, Kam89a, CV88, Bax90, HL90, Blu90a]. <p> In some task domains, such as matrix manipulation, all correct answers are of equal quality. However, in other task domains, such as human interface design, the path a designer takes to a solution directly affects the quality of that solution. To address this fundamental problem with derivational analogy, Car-bonell <ref> [Car86] </ref> suggests pursuing an optimizing approach (as opposed to the satisficing approach described in section 3.2) by having the derivational analogy algorithm attend to the justifications for the decisions in the recorded experience.
Reference: [CV88] <author> Jamie G. Carbonell and Manuela Veloso. </author> <title> Integrating derivational analogy into a general problem solving architecture. </title> <booktitle> In Proceedings of the First Workshop on Case-Based Reasoning, </booktitle> <year> 1988. </year>
Reference-contexts: Since its proposal [Car83, Car86], it has been applied to a number of domains, including circuit design, matrix manipulation, non-linear planning, and more recently, computer program transformations, DC circuit problem solving, and the design of human-computer interfaces <ref> [Mos89, MB87, MF89, HA87, Kam89a, CV88, Bax90, HL90, Blu90a] </ref>. While this diversity shows that derivational analogy is widely applicable, it makes it difficult to determine how and why derivational analogy works. The goal of the research described here is to examine derivational analogy in two ways. <p> and therefore do not explicitly include a separate recovery strategy. 18 The first four programs have been described in the literature and all use the recorded experience to guide local adaptation and recovery: the BOGART/VEXED system of Mostow and Barley [MB87], the extensions to PRODIGY done by Carbonell and Veloso <ref> [CV88, Vel90] </ref>, the PRIAR system of Kambhampati [Kam89b], and the work on internal analogy in the context of the RFermi system done by Hickman [HL90]. <p> Carbonell and Veloso's extensions to the PRODIGY system <ref> [CV88] </ref> reuse a recorded experience that includes information about each goal that was selected, such as 8 Hobart is a registered trademark of the Hobart Food Machinery Company.
Reference: [DM86] <author> Gerald DeJong and Raymond Mooney. </author> <title> Explanation-based learning: An alternative view. </title> <journal> Machine Learning, </journal> <volume> 1(2), </volume> <year> 1986. </year>
Reference-contexts: This ability to adapt to differences between a recorded experience and a new problem during the course of problem solving is what distinguishes derivational analogy from other methods for reusing recorded experience. Compared to derivational analogy, most other methods concentrate on reusing groups of steps without adaptation <ref> [LRN86, MKKC86, DM86] </ref> or on doing adaptation after all of the recorded experience has been applied [Ham90]. This is not to say that the other parts of the derivational analogy algorithm do not present formidable problems.
Reference: [Gen83] <author> Dedre Gentner. </author> <title> Structure mapping: A theoretical framework for analogy. </title> <journal> Cognitive Science, </journal> <volume> 7, </volume> <year> 1983. </year>
Reference-contexts: implementation that has the recovery strategy (select and address one goal with a problem solving system) is called "POSSIBLY." The implementation with both the adaptation strategy and the recovery strategy is called "PROBABLY." 3.3 PRIAR Technically, Kambhampati's PRIAR system [Kam89b] is closer to an implementation of Gentner's structural analogy ideas <ref> [Gen83] </ref> than to an implementation of a derivational analogy algorithm. In particular, PRIAR tries to determine what part of the recorded solution, rather than the solution process, is applicable and tries to modify the solution to fit the new problem. However, it exhibits a relevant recovery strategy.
Reference: [HA87] <author> Michael N. Huhns and Ramon D. Acosta. Argo: </author> <title> An analogical reasoning system for solving design problems. </title> <type> Technical Report AI/CAD-092-87, </type> <institution> Microelectronics and Computer Technology Corporation, Austin, TX, </institution> <year> 1987. </year>
Reference-contexts: Since its proposal [Car83, Car86], it has been applied to a number of domains, including circuit design, matrix manipulation, non-linear planning, and more recently, computer program transformations, DC circuit problem solving, and the design of human-computer interfaces <ref> [Mos89, MB87, MF89, HA87, Kam89a, CV88, Bax90, HL90, Blu90a] </ref>. While this diversity shows that derivational analogy is widely applicable, it makes it difficult to determine how and why derivational analogy works. The goal of the research described here is to examine derivational analogy in two ways.
Reference: [Ham90] <author> Kristian Hammond. </author> <title> Explaining and repairing plans that fail. </title> <booktitle> Artificial Intelligence, </booktitle> <pages> 45(1-2), </pages> <year> 1990. </year>
Reference-contexts: The recording, indexing, and retrieval of experience is a difficult problem, and some preliminary solutions have been suggested in the derivational analogy research [BH91, Kam90b, Vel90] and in the knowledge acquisition and case-based reasoning literature <ref> [PBH90, Ham90, Kol87] </ref>. Third, the derivational analogy algorithm must adapt the selected recorded experience for reuse on a new problem that is similar, but not identical, to the original problem. <p> Compared to derivational analogy, most other methods concentrate on reusing groups of steps without adaptation [LRN86, MKKC86, DM86] or on doing adaptation after all of the recorded experience has been applied <ref> [Ham90] </ref>. This is not to say that the other parts of the derivational analogy algorithm do not present formidable problems. However, the better a derivational analogy algorithm is at adaptation, the less important it is to select just the right recorded experience.
Reference: [HHN86] <author> Edwin L. Hutchins, James D. Hollan, and Donald A. Nor-man. </author> <title> Direct manipulation interfaces. </title> <editor> In Donald A. Norman and Stephen W. Draper, editors, </editor> <booktitle> User-Centered System Design. </booktitle> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale, NJ, </address> <year> 1986. </year>
Reference-contexts: The reasons for this sensitivity are discussed more fully elsewhere [Blu90a]; however, one example involves the design of direct manipulation interfaces <ref> [HHN86] </ref>. If an operation in an interface acts on an entity that is displayed on the screen, it is often desirable to implement the gesture for that operation as a direct manipulation action on that entity.
Reference: [HL90] <author> Angela Kennedy Hickman and Jill Larkin. </author> <title> Internal analogy: A model of transfer within problems. </title> <booktitle> In Proceedings of the Twelfth Annual Conference of the Cognitive Science Society, </booktitle> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: Since its proposal [Car83, Car86], it has been applied to a number of domains, including circuit design, matrix manipulation, non-linear planning, and more recently, computer program transformations, DC circuit problem solving, and the design of human-computer interfaces <ref> [Mos89, MB87, MF89, HA87, Kam89a, CV88, Bax90, HL90, Blu90a] </ref>. While this diversity shows that derivational analogy is widely applicable, it makes it difficult to determine how and why derivational analogy works. The goal of the research described here is to examine derivational analogy in two ways. <p> Alternatively, instead of working with a person, a derivational analogy algorithm might record the actions taken by a from-scratch problem solver (e.g., a non-linear planner [Kam89b, Vel90], a system for solving circuit analysis problems <ref> [HL90] </ref>, or an automatic human-interface design system [Blu90a]). Second, a derivational analogy algorithm must select one of its recorded experiences based on features of the new problem. <p> the recorded experience to guide local adaptation and recovery: the BOGART/VEXED system of Mostow and Barley [MB87], the extensions to PRODIGY done by Carbonell and Veloso [CV88, Vel90], the PRIAR system of Kambhampati [Kam89b], and the work on internal analogy in the context of the RFermi system done by Hickman <ref> [HL90] </ref>. The fifth one is the REMAID 7 system for reusing human interface design experience [Blu90a] and is one of the results of the research described here. REMAID embodies three novel approaches to the problem of adaptation and recovery. <p> recovery strategies: halt, use a from-scratch problem solver for one goal then restart reuse, or use a from-scratch problem solver for all remaining goals. 3.4 Internal analogy The work of Hickman and her colleagues uses techniques from derivational analogy to improve performance without having to resort to a previous problem <ref> [HL90] </ref>. This approach is referred to as internal analogy and depends on regularities within the problems in a domain to allow solutions to sub-problems to be reused during the course of solving a single larger problem.
Reference: [HL91] <author> Angela Kennedy Hickman and M.C. Lovett. </author> <title> Partial match and search control via internal analogy. </title> <booktitle> In Proceedings of the Thirteenth Annual Conference of the Cognitive Science Society, </booktitle> <address> Evanston, IL, </address> <year> 1991. </year>
Reference-contexts: Such modifications may involve changes to the features used for indexing the recorded experience [VC89] or improvements to the adaptation process <ref> [HL91] </ref>. Because of its crucial role in derivational analogy, the ability of a derivational analogy algorithm to adapt a recorded experience or a new problem to enable reuse is the focus of this research. We will measure this ability in two ways. <p> and an AND operation in the new problem specification, and you encounter a use of the NOT-DECOMP rule involving that EQUAL in the recorded solution, then you should consider using the NOT-AND-DECOMP rule instead." Some first steps have been made in this direction in the work of Hick-man and Lovett <ref> [HL91] </ref> and Veloso [Vel90]. Hickman and Lovett's approach to derivational analogy relaxes the constraint for considering the recorded experience to be appropriate to reuse. Veloso's approach learns to select the most appropriate recorded experience.
Reference: [Kam89a] <author> Subbarao Kambhampati. </author> <title> Control of refitting during plan reuse. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence, </booktitle> <address> Detroit, MI, </address> <year> 1989. </year>
Reference-contexts: Since its proposal [Car83, Car86], it has been applied to a number of domains, including circuit design, matrix manipulation, non-linear planning, and more recently, computer program transformations, DC circuit problem solving, and the design of human-computer interfaces <ref> [Mos89, MB87, MF89, HA87, Kam89a, CV88, Bax90, HL90, Blu90a] </ref>. While this diversity shows that derivational analogy is widely applicable, it makes it difficult to determine how and why derivational analogy works. The goal of the research described here is to examine derivational analogy in two ways. <p> The from-scratch problem solver for PRIAR is a non-linear planner. The reuse component uses a validation structure to formally determine which steps from the recorded plan are needed, and which goal conditions in the new problem must be solved by new steps added by the PRIAR recovery mechanism <ref> [Kam89a] </ref>. This recovery mechanism repairs the recorded plan by taking any goal conditions in the new problem that are left unsatisfied by the plan in the recorded experience and posting them as new goals. These new goals are then addressed by the same non-linear planner that produced the recorded plan.
Reference: [Kam89b] <author> Subbarao Kambhampati. </author> <title> Flexible Reuse and Modification in Hierarchical Planning: A Validation Structure Based Approach. </title> <type> PhD thesis, </type> <institution> Computer Vision Laboratory, Center for Automation Research, University of Maryland, College Park, MD, </institution> <year> 1989. </year>
Reference-contexts: A more automatic way is to have the algorithm record the actions of a person solving solving a problem. Alternatively, instead of working with a person, a derivational analogy algorithm might record the actions taken by a from-scratch problem solver (e.g., a non-linear planner <ref> [Kam89b, Vel90] </ref>, a system for solving circuit analysis problems [HL90], or an automatic human-interface design system [Blu90a]). Second, a derivational analogy algorithm must select one of its recorded experiences based on features of the new problem. <p> separate recovery strategy. 18 The first four programs have been described in the literature and all use the recorded experience to guide local adaptation and recovery: the BOGART/VEXED system of Mostow and Barley [MB87], the extensions to PRODIGY done by Carbonell and Veloso [CV88, Vel90], the PRIAR system of Kambhampati <ref> [Kam89b] </ref>, and the work on internal analogy in the context of the RFermi system done by Hickman [HL90]. The fifth one is the REMAID 7 system for reusing human interface design experience [Blu90a] and is one of the results of the research described here. <p> adaptation strategy (alternate problem solving rules) is called "PROBART." The 21 implementation that has the recovery strategy (select and address one goal with a problem solving system) is called "POSSIBLY." The implementation with both the adaptation strategy and the recovery strategy is called "PROBABLY." 3.3 PRIAR Technically, Kambhampati's PRIAR system <ref> [Kam89b] </ref> is closer to an implementation of Gentner's structural analogy ideas [Gen83] than to an implementation of a derivational analogy algorithm.
Reference: [Kam90a] <author> Subbarao Kambhampati. </author> <booktitle> Personal communication at the Eighth Annual National Conference on Artificial Intelligence, </booktitle> <year> 1990. </year> <month> 41 </month>
Reference-contexts: The problems with pursuing the optimizing approach are twofold. First, in many domains optimality is a global characteristic of a problem solution; it cannot be preserved by simply attending to decision criteria that are local to each step <ref> [Kam90a] </ref>. Even if a derivational analogy algorithm is given optimal recorded experience, any changes to that experience (such as the changes necessary for adaptation to a new problem) may violate the global optimality criteria, regardless of what local criteria are attended to.
Reference: [Kam90b] <author> Subbarao Kambhampati. </author> <title> Mapping and retrieval during plan reuse: A validation structure based approach. </title> <booktitle> In Proceedings of the Eighth Annual National Conference on Artificial Intelligence, </booktitle> <address> Boston, MA, </address> <year> 1990. </year>
Reference-contexts: Second, a derivational analogy algorithm must select one of its recorded experiences based on features of the new problem. The recording, indexing, and retrieval of experience is a difficult problem, and some preliminary solutions have been suggested in the derivational analogy research <ref> [BH91, Kam90b, Vel90] </ref> and in the knowledge acquisition and case-based reasoning literature [PBH90, Ham90, Kol87]. Third, the derivational analogy algorithm must adapt the selected recorded experience for reuse on a new problem that is similar, but not identical, to the original problem.
Reference: [Kol87] <author> Janet Kolodner. </author> <title> Extending problem solver capabilities through case-based inference. </title> <booktitle> In Proceedings of the Fourth International Workshop on Machine Learning, </booktitle> <pages> pages 167-178, </pages> <year> 1987. </year>
Reference-contexts: The recording, indexing, and retrieval of experience is a difficult problem, and some preliminary solutions have been suggested in the derivational analogy research [BH91, Kam90b, Vel90] and in the knowledge acquisition and case-based reasoning literature <ref> [PBH90, Ham90, Kol87] </ref>. Third, the derivational analogy algorithm must adapt the selected recorded experience for reuse on a new problem that is similar, but not identical, to the original problem.
Reference: [LRN86] <author> John Laird, Paul Rosenbloom, and Alan Newell. </author> <title> Chunking in soar: The anatomy of a general learning mechanism. </title> <journal> Machine Learning, </journal> <volume> 1(1), </volume> <year> 1986. </year>
Reference-contexts: This ability to adapt to differences between a recorded experience and a new problem during the course of problem solving is what distinguishes derivational analogy from other methods for reusing recorded experience. Compared to derivational analogy, most other methods concentrate on reusing groups of steps without adaptation <ref> [LRN86, MKKC86, DM86] </ref> or on doing adaptation after all of the recorded experience has been applied [Ham90]. This is not to say that the other parts of the derivational analogy algorithm do not present formidable problems.
Reference: [MB87] <author> J. Mostow and M. Barley. </author> <title> Automated reuse of design plans. </title> <booktitle> In Proceedings of the 1987 International Conference on Engineering Design, </booktitle> <pages> pages 632-647, </pages> <year> 1987. </year> <note> (Available as Rutgers University Technical Report ML-TR-14). </note>
Reference-contexts: Since its proposal [Car83, Car86], it has been applied to a number of domains, including circuit design, matrix manipulation, non-linear planning, and more recently, computer program transformations, DC circuit problem solving, and the design of human-computer interfaces <ref> [Mos89, MB87, MF89, HA87, Kam89a, CV88, Bax90, HL90, Blu90a] </ref>. While this diversity shows that derivational analogy is widely applicable, it makes it difficult to determine how and why derivational analogy works. The goal of the research described here is to examine derivational analogy in two ways. <p> and the linear order imposed during sequential problem solving collapses a number of different solution tree mismatches into the categories described in the next sections. 9 In the discussion of mismatches, and in the implementations of replay algorithms described in section 4, the match criteria is loosely based on BOGART's <ref> [MB87] </ref>. Two goals match if: 1) the goals are of the same type, 2) the goals address the same or similar entities, and 3) the super-goals of the two goals satisfy conditions 1) and 2). Determining whether the two entities being addressed are similar is a domain-specific problem. <p> described here assume that their local adaptation strategies are sufficient, and therefore do not explicitly include a separate recovery strategy. 18 The first four programs have been described in the literature and all use the recorded experience to guide local adaptation and recovery: the BOGART/VEXED system of Mostow and Barley <ref> [MB87] </ref>, the extensions to PRODIGY done by Carbonell and Veloso [CV88, Vel90], the PRIAR system of Kambhampati [Kam89b], and the work on internal analogy in the context of the RFermi system done by Hickman [HL90]. <p> Conversely, the more sensitive the derivational analogy algorithm is to such mismatches, the less efficient it will be in reusing its experience. An example might make this problem a bit clearer. In the BOGART/VEXED system for circuit design <ref> [MB87] </ref>, if the previous experience includes a goal specification like (NOT (EQUAL A B)), a designer might have chosen to use the NOT-DECOMP rule to decompose this into a module implementing (EQUAL A B) and an inverter that takes the the output of that module as input.
Reference: [MF89] <author> J. Mostow and G. Fisher. </author> <title> Replaying transformational derivations of heuristic search algorithms in DIOGENES. </title> <booktitle> In Proceedings of the Second Workshop on Case-Based Reasoning, </booktitle> <pages> pages 94-99, </pages> <address> Pensacola, FL, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: Since its proposal [Car83, Car86], it has been applied to a number of domains, including circuit design, matrix manipulation, non-linear planning, and more recently, computer program transformations, DC circuit problem solving, and the design of human-computer interfaces <ref> [Mos89, MB87, MF89, HA87, Kam89a, CV88, Bax90, HL90, Blu90a] </ref>. While this diversity shows that derivational analogy is widely applicable, it makes it difficult to determine how and why derivational analogy works. The goal of the research described here is to examine derivational analogy in two ways.
Reference: [MKKC86] <author> Tom M. Mitchell, Richard M. Keller, and Smadar T. Kedar-Cabelli. </author> <title> Explanation-based generalization: A unifying view. </title> <journal> Machine Learning, </journal> <volume> 1(1), </volume> <year> 1986. </year>
Reference-contexts: This ability to adapt to differences between a recorded experience and a new problem during the course of problem solving is what distinguishes derivational analogy from other methods for reusing recorded experience. Compared to derivational analogy, most other methods concentrate on reusing groups of steps without adaptation <ref> [LRN86, MKKC86, DM86] </ref> or on doing adaptation after all of the recorded experience has been applied [Ham90]. This is not to say that the other parts of the derivational analogy algorithm do not present formidable problems.
Reference: [Mos89] <author> Jack Mostow. </author> <title> Design by derivational analogy: Issues in the automated replay of design plans. </title> <booktitle> Artificial Intelligence, </booktitle> <pages> 40(1-3), </pages> <year> 1989. </year>
Reference-contexts: Since its proposal [Car83, Car86], it has been applied to a number of domains, including circuit design, matrix manipulation, non-linear planning, and more recently, computer program transformations, DC circuit problem solving, and the design of human-computer interfaces <ref> [Mos89, MB87, MF89, HA87, Kam89a, CV88, Bax90, HL90, Blu90a] </ref>. While this diversity shows that derivational analogy is widely applicable, it makes it difficult to determine how and why derivational analogy works. The goal of the research described here is to examine derivational analogy in two ways. <p> Problem solving in these three areas typically proceeds by top-down decomposition of the problem combined with instantiation of atomic solution steps. Design reuse is representative of the domain areas that derivational analogy has been applied to, and following Mostow <ref> [Mos89] </ref>, the two terms are used interchangeably.
Reference: [PBH90] <author> Bruce Porter, E. Ray Bareiss, and Robert Holte. </author> <title> Concept learning and heuristic classification in weak-theory domains. </title> <journal> Artificial Intelligence Journal, </journal> <volume> 45(1-2):229-263, </volume> <year> 1990. </year>
Reference-contexts: The recording, indexing, and retrieval of experience is a difficult problem, and some preliminary solutions have been suggested in the derivational analogy research [BH91, Kam90b, Vel90] and in the knowledge acquisition and case-based reasoning literature <ref> [PBH90, Ham90, Kol87] </ref>. Third, the derivational analogy algorithm must adapt the selected recorded experience for reuse on a new problem that is similar, but not identical, to the original problem.
Reference: [VC89] <author> Manuela Veloso and Jamie G. Carbonell. </author> <title> Learning anologies by anology the closed loop of memory organization and problem solving. </title> <booktitle> In Proceedings of the Second Workshop on Case-Based Reasoning, </booktitle> <year> 1989. </year>
Reference-contexts: The last step in the basic derivational analogy algorithm is to analyze the results of reusing the experience and to use that analysis to change the performance of the derivational analogy algorithm in subsequent problems. Such modifications may involve changes to the features used for indexing the recorded experience <ref> [VC89] </ref> or improvements to the adaptation process [HL91]. Because of its crucial role in derivational analogy, the ability of a derivational analogy algorithm to adapt a recorded experience or a new problem to enable reuse is the focus of this research. We will measure this ability in two ways.
Reference: [Vel90] <author> Manuela Veloso. </author> <title> Replaying past experience within a general problem solving and learning architecture. </title> <type> Technical report, </type> <institution> Carnegie-Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1990. </year> <month> 42 </month>
Reference-contexts: A more automatic way is to have the algorithm record the actions of a person solving solving a problem. Alternatively, instead of working with a person, a derivational analogy algorithm might record the actions taken by a from-scratch problem solver (e.g., a non-linear planner <ref> [Kam89b, Vel90] </ref>, a system for solving circuit analysis problems [HL90], or an automatic human-interface design system [Blu90a]). Second, a derivational analogy algorithm must select one of its recorded experiences based on features of the new problem. <p> Second, a derivational analogy algorithm must select one of its recorded experiences based on features of the new problem. The recording, indexing, and retrieval of experience is a difficult problem, and some preliminary solutions have been suggested in the derivational analogy research <ref> [BH91, Kam90b, Vel90] </ref> and in the knowledge acquisition and case-based reasoning literature [PBH90, Ham90, Kol87]. Third, the derivational analogy algorithm must adapt the selected recorded experience for reuse on a new problem that is similar, but not identical, to the original problem. <p> and therefore do not explicitly include a separate recovery strategy. 18 The first four programs have been described in the literature and all use the recorded experience to guide local adaptation and recovery: the BOGART/VEXED system of Mostow and Barley [MB87], the extensions to PRODIGY done by Carbonell and Veloso <ref> [CV88, Vel90] </ref>, the PRIAR system of Kambhampati [Kam89b], and the work on internal analogy in the context of the RFermi system done by Hickman [HL90]. <p> operation in the new problem specification, and you encounter a use of the NOT-DECOMP rule involving that EQUAL in the recorded solution, then you should consider using the NOT-AND-DECOMP rule instead." Some first steps have been made in this direction in the work of Hick-man and Lovett [HL91] and Veloso <ref> [Vel90] </ref>. Hickman and Lovett's approach to derivational analogy relaxes the constraint for considering the recorded experience to be appropriate to reuse. Veloso's approach learns to select the most appropriate recorded experience.
References-found: 28

