URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR496.ps.Z
Refering-URL: http://www.cs.indiana.edu/trindex.html
Root-URL: 
Title: FPGA based Hardware Unix-Encription using Iterated Codesign Methods  
Author: by Ingo Cyliax Steven D. Johnson Bhaskar Bose, 
Date: October 1997  
Address: Carlsbad CA  Bloomington, Indiana 47405-4101  
Affiliation: Derivation Systems, Inc.,  Computer Science Department Indiana University  
Note: Arriving at  
Abstract: Technical Report No. 496 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Eli Biham. </author> <title> A fast new des implementation in software. </title> <type> Technical report, </type> <institution> Israel Institute of Technology, Haifa, Isreal, </institution> <year> 1996. </year>
Reference-contexts: We are investigating a PCI or ISAbus implementation of this design. The implementation described in this paper is very straightforward and naive. We would like to investigate how techniques such as floor planning and new parallel bit serial algorithms as presented in <ref> [1] </ref> effect the cost of Unix-crypt and other password encryption or hash algorithms on FPGA implementations. This will also present us with more case studies to use in our research and classroom.
Reference: [2] <author> Bhaskar Bose. </author> <title> DDD/FM9001 derivation of a verified microprocessor. </title> <type> Technical Report 456, </type> <institution> Indiana University Computer Science Department, Bloomington, Indiana, </institution> <month> April </month> <year> 1996. </year> <type> PhD. dissertation, </type> <note> accessable via www.cs.indiana.edu. </note>
Reference-contexts: These tools have been used to synthesize object as complex as a 32-bit RISC CPU <ref> [2, 3] </ref>. Derivation Systems Inc, is currently working on derivations of this chip as well as PCI cores using their formal derivation system, DRS. For this application, the SRAM based FPGA may represent a more secure implementation than a hard-wire implementation or the software implementation.
Reference: [3] <author> Bhaskar Bose and Steven D. Johnson. </author> <title> DDD-FM9001 derivation of a verified microprocessor. </title> <type> Technical Report 380, </type> <institution> Indiana University Computer Science Department, Bloomington, Indiana, </institution> <month> April </month> <year> 1996. </year>
Reference-contexts: These tools have been used to synthesize object as complex as a 32-bit RISC CPU <ref> [2, 3] </ref>. Derivation Systems Inc, is currently working on derivations of this chip as well as PCI cores using their formal derivation system, DRS. For this application, the SRAM based FPGA may represent a more secure implementation than a hard-wire implementation or the software implementation.
Reference: [4] <author> Dan Farmer. </author> <note> Cops version 1.04+ readme file, </note> <year> 1991. </year>
Reference-contexts: Source code for the Unix-crypt function (in C language) can be found in the source distributions of Linux, FreeBSD and NetBSD. Also, an optimized version of Unix-crypt (fcrypt) [5] is available in several security packages such as COPS <ref> [4] </ref> and Crack [9]. A responsible Unix system and network administrator uses dictionary attacks to scan stored password files for weak passwords. These scans are run periodically, but can take a long time when a large number of passwords are involved [4, 9]. <p> A responsible Unix system and network administrator uses dictionary attacks to scan stored password files for weak passwords. These scans are run periodically, but can take a long time when a large number of passwords are involved <ref> [4, 9] </ref>. For example, 32000 accounts, a typical number of accounts at a medium sized university, may take 40 hours to check against 500,000 plain texts on a 200Mhz Pentium-Pro based system.
Reference: [5] <author> Michael Glad. UFC-Crypt readme file, </author> <year> 1992. </year>
Reference-contexts: The standard Unix-crypt function available in the Unix standard C library (lib-c) on domestically distributed Unix systems. Source code for the Unix-crypt function (in C language) can be found in the source distributions of Linux, FreeBSD and NetBSD. Also, an optimized version of Unix-crypt (fcrypt) <ref> [5] </ref> is available in several security packages such as COPS [4] and Crack [9]. A responsible Unix system and network administrator uses dictionary attacks to scan stored password files for weak passwords.
Reference: [6] <author> Daniel V. Klein. </author> <title> `foiling the cracker': A survey of, and improvements to, password security. </title> <type> Technical report, </type> <institution> Software Engineering Institute, Carnege Mellon University, </institution> <year> 1990. </year>
Reference-contexts: A common attack on Unix systems is to obtain the system's password file and use a plaintext dictionary key search to attack passwords. Once weak password have been discovered, the attacker can use this knowledge to launch an attack on more secure systems on which users may have accounts <ref> [6] </ref>. Using a dictionary password key search attack is one of the methods which the Internet Worm of 1988 used to gain access to other systems [10]. The standard Unix-crypt function available in the Unix standard C library (lib-c) on domestically distributed Unix systems. <p> Typical scanning runs may use dictionaries of up to 1 Million plaintext words, which are tried with different capitalizations, and sometimes substitutions for expressions like "to","too" and "2", and combinations of smaller words. Large dictionary scans may take months of compute time <ref> [6] </ref>. Administrators are reluctant to run password scanning on high end research computing facilities, whose 2 facilities are typically charged for the CPU time they, themselves, consume. In a nutshell, it takes valuable resources for system administrators to run password scans.
Reference: [7] <author> Philip Leong and Chris Tham. </author> <title> Unix password encryption considered insecure. </title> <booktitle> In USENIX, </booktitle> <month> Winter </month> <year> 1991. </year>
Reference-contexts: This machine cost about $2000 to build and was able to run 166Kcrypt/sec. This is compared to a software implementation running on an RS/6000, which runs at 830crypt/sec but costs $10,000|a typical high end workstation that a system administrator would have had access to in 1991 <ref> [7] </ref>. In this paper we will use the metric cps$ = crypts seconds fi dollars to make cost-performance comparisons of various Unix-crypt implementations. The RS/6000 mentioned above measures 0.083cps$, compared to the ECL implementation at 83cps$. <p> Figure 4 shows the salt box. In addition to the salted permutation, the Unix-crypt algorithm iterates the standard DES algorithm 25 times, i.e. 400 rounds total <ref> [8, 7] </ref>. Our initial implementation of the Unix-crypt, based on the DES algorithm described by Tanenbaum [11], was done in VHDL using high level RTL form.
Reference: [8] <author> Robert T. Morris and Ken Thompson. </author> <title> Password security: A case history. </title> <journal> Communications of the ACM, </journal> <volume> 22(11) </volume> <pages> 594-597, </pages> <month> November </month> <year> 1979. </year>
Reference-contexts: The function is also salted in one of 4096 ways to prevent the use of commercial off the shelf (COTS) DES chips to implement hardware password crackers and make it expensive to precompute plaintext to encoded text dictionaries <ref> [8] </ref>. A common attack on Unix systems is to obtain the system's password file and use a plaintext dictionary key search to attack passwords. <p> Figure 4 shows the salt box. In addition to the salted permutation, the Unix-crypt algorithm iterates the standard DES algorithm 25 times, i.e. 400 rounds total <ref> [8, 7] </ref>. Our initial implementation of the Unix-crypt, based on the DES algorithm described by Tanenbaum [11], was done in VHDL using high level RTL form.
Reference: [9] <author> Alec D.E. Muffett. </author> <title> A sensible password checker for unix. </title> <type> Technical report, </type> <institution> Computer Unit, University College of Wales, </institution> <year> 1992. </year>
Reference-contexts: Source code for the Unix-crypt function (in C language) can be found in the source distributions of Linux, FreeBSD and NetBSD. Also, an optimized version of Unix-crypt (fcrypt) [5] is available in several security packages such as COPS [4] and Crack <ref> [9] </ref>. A responsible Unix system and network administrator uses dictionary attacks to scan stored password files for weak passwords. These scans are run periodically, but can take a long time when a large number of passwords are involved [4, 9]. <p> A responsible Unix system and network administrator uses dictionary attacks to scan stored password files for weak passwords. These scans are run periodically, but can take a long time when a large number of passwords are involved <ref> [4, 9] </ref>. For example, 32000 accounts, a typical number of accounts at a medium sized university, may take 40 hours to check against 500,000 plain texts on a 200Mhz Pentium-Pro based system.
Reference: [10] <author> Eugene H. Spafford. </author> <title> The Internet Worm program: An analysis. </title> <type> Technical Report CSD-TR-823, </type> <institution> Purdue University, </institution> <month> November </month> <year> 1988. </year>
Reference-contexts: Using a dictionary password key search attack is one of the methods which the Internet Worm of 1988 used to gain access to other systems <ref> [10] </ref>. The standard Unix-crypt function available in the Unix standard C library (lib-c) on domestically distributed Unix systems. Source code for the Unix-crypt function (in C language) can be found in the source distributions of Linux, FreeBSD and NetBSD.
Reference: [11] <author> Andrew S. Tanenbaum. </author> <title> Computer Networks. </title> <publisher> Prentice-Hall, </publisher> <year> 1981. </year> <month> 14 </month>
Reference-contexts: On each round, the 2 28-bit key halves are merged into a 56-bit string and reduced to a 48-bit subkey using the key2 permutation <ref> [11] </ref>. Several chip level implementation of DES exist commercially. To prevent the use of COTS DES chips, the Unix-crypt algorithm introduces a salted permutation for the expanded input in each round. <p> Figure 4 shows the salt box. In addition to the salted permutation, the Unix-crypt algorithm iterates the standard DES algorithm 25 times, i.e. 400 rounds total [8, 7]. Our initial implementation of the Unix-crypt, based on the DES algorithm described by Tanenbaum <ref> [11] </ref>, was done in VHDL using high level RTL form. Several VHDL implementations of various Unix-crypt configurations (sequential vs. pipelined) were successfully simulated against test vectors derived by running a program based on the C library version of Unix-crypt which calculated encrypted strings based on random keys.
Reference: [12] <author> Tom Truscott, </author> <year> 1995. </year> <title> crypt(3) routine from NetBSD 1.1 distribution, based on algorithms from Robert W. </title> <publisher> Baldwin and James Gillogly. </publisher>
Reference-contexts: We have extracted timing estimates for a variety of Xilinx chips of different speed ratings for the XC4000E technology. Table 2 shows a comparison of the various chips compared to their cost. We have run reference software implementation <ref> [12] </ref> on a variety of CPUs and list their performance and cost in Table 3. While the design provides adequate performance, a significant speedup can be achieved when the salt function is implemented statically.
Reference: [13] <author> Robert M. Wehrmeister. </author> <title> Logic Engine user's manual. Laboratory manual, </title> <institution> Indiana University Computer Science Department, </institution> <year> 1991. </year> <note> http://www.cs.indiana.edu/classes/p442/man/le manual. 15 </note>
Reference-contexts: The XC4010PC191-10 was interfaced to an Intel 486DX2 based workstation running BSDi, a commercial BSD Unix implementation, through it's parallel port. The protocol used for this design is based on the Logic Engine protocol <ref> [13] </ref> which we use in our instructional and research prototyping system. The appliction interface enables a C (or Scheme) program to read and write the X, K, and S registers as well as the control and status register in the chip.
References-found: 13

