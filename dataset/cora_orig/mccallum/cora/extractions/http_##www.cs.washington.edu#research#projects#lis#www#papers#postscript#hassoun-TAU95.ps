URL: http://www.cs.washington.edu/research/projects/lis/www/papers/postscript/hassoun-TAU95.ps
Refering-URL: http://www.cs.washington.edu/research/projects/lis/www/papers/
Root-URL: 
Email: fsoha,ebelingg@cs.washington.edu  
Title: Architectural Retiming: An Overview  
Author: Soha Hassoun and Carl Ebeling 
Address: Seattle, WA  
Affiliation: Department of Computer Science and Engineering University of Washington,  
Abstract: Pipelining and retiming are two related techniques for improving the performance of synchronous circuits by reducing the clock period. Unfortunately these techniques are unable to improve many circuits encountered in practice because the clock cycle is limited by a critical cycle which neither technique can change. We present in this paper a new optimization technique that we call architectural retiming which is able to improve the performance of circuits for which both pipelining and retiming fail. Architectural retiming achieves this by increasing the number of registers on the critical cycle while preserving the functionality and perceived latency of the circuit. We have used the name architectural retiming because it both reschedules operations in time and modifies the structure of the circuit to preserve its functionality. This concept generalizes several ad hoc techniques such as precomputation and branch prediction that have been applied to synchronous circuits. We first describe the basic ideas behind architectural retiming and then give two examples of applying it to real circuits. Finally, we outline some of the issues that must be addressed to automate the architectural retiming process.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Alidina, J. Monteiro, S. Devadas, A. Ghosh, and M. Papaefthymiou. </author> <title> Precomputation-Based Sequential Logic Optimization for Low Power. </title> <booktitle> In Proc. of the 1994 IEEE International Conf on CAD, </booktitle> <pages> pages 74 -81, </pages> <year> 1994. </year>
Reference-contexts: Their predictions are based on data gathered from a program profile. Their technique is applied to a program description and thus, it only predicts explicit if-then control points in the description. Alidina et al. use precomputation to restructure circuits to consume less power <ref> [1] </ref>. They propose precomputing a stage's output values based on a subset of input conditions. The original stage is turned off in the following cycle to avoid any switching activity. The choice of the input conditions determines whether the precomputation logic will have less power dissipation than the original stage.
Reference: [2] <author> K. Barlett, W. Cohen, A. de Geus, and G. Hachtel. </author> <title> Synthesis and Optimization of Multilevel Logic Under Timing Constraints. </title> <journal> IEEE Transactions on Computers, </journal> <volume> CAD-5(4):582-595, </volume> <month> October </month> <year> 1986. </year>
Reference-contexts: As was illustrated in Section 3.1, the new function is represented as a combination of Boolean and arithmetic functions. The function must be optimized to enable synthesizing a circuit with the shortest possible delay. Current optimization techniques that restructure critical paths are based either on optimizing Boolean functions <ref> [7, 2, 19, 11] </ref> or on exclusively manipulating arithmetic expressions [20, 15, 17, 6]. Optimizing arithmetic and Boolean functions concurrently yields better results than can be achieved by arithmetic optimization followed by Boolean optimization. We present a small example to illustrate the benefits of concurrently optimizing Boolean and arithmetic functions.
Reference: [3] <author> K. Bolding, S.-C. Cheung, S.-E. Choi, C. Ebeling, S. Hassoun, T. A. Ngo, and R. Wille. </author> <title> The Chaos Router Chip: Design and Implementation of an Adaptive Router. </title> <booktitle> In Proceedings of VLSI '93, </booktitle> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: register has been added along the critical path and a bypass path allows the data from the memory to the cache to maintain a one-cycle latency. 3.2 Chaos Router The second example is taken from the chaos router, a two-dimensional, random, non-minimal adaptive packet router for implementing multicomputer interconnection networks <ref> [3] </ref>. Multi-flit packets from the network enter the router generating a bypass path. None of the new synthesized paths violate the specified clock period (16ns).
Reference: [4] <author> S. T. Chakradhar, S. Dey, M. Potkonjak, and S. Rothweiler. </author> <title> Sequential Circuit Delay Optimization Using Global Path Delays. </title> <booktitle> In Proc. 30th ACM-IEEE Design Automation Conf., </booktitle> <pages> pages 483 -489, </pages> <year> 1993. </year>
Reference-contexts: Dey et al. resorted to circuit partitioning to identify subcircuits with equal-weight reconvergent paths (petals) to which peripheral retiming can be applied [9]. Chakardhar et al. took a more timing-driven approach to sequential optimization that results in applying combinational optimization techniques to each stage in the circuit <ref> [4] </ref>. The technique identifies the least stringent set of arrival and required timing constraints which are passed to the combinational delay optimizer along with the circuit. Recently, the research community has shown interest in various forms of pre-execution, speculation, and precom-putation to achieve improvements in performance.
Reference: [5] <author> A. Chandrakasan, S. Sheng, and R. Brodersen. </author> <title> Low-Power CMOS Digital Design.. </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> 27(4) </volume> <pages> 473-84, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: For example, performance can be traded for cost via time-multiplexing and it has been shown that trading away excess performance by reducing the supply voltage is an easy way to reduce power consumption <ref> [5] </ref>. In this paper we present a new technique for increasing the performance of a synchronous circuit based on pipelin-ing and retiming. This technique, called architectural retiming, can be used when neither pipelining nor retiming are applicable.
Reference: [6] <author> L. F. Chao. </author> <title> Optimizing Cyclic Data-Flow Graphs via Associativity. </title> <booktitle> In Proceedings of the Fourth Great Lakes Symposium on VLSI, </booktitle> <pages> pages 6 -10, </pages> <year> 1994. </year>
Reference-contexts: The function must be optimized to enable synthesizing a circuit with the shortest possible delay. Current optimization techniques that restructure critical paths are based either on optimizing Boolean functions [7, 2, 19, 11] or on exclusively manipulating arithmetic expressions <ref> [20, 15, 17, 6] </ref>. Optimizing arithmetic and Boolean functions concurrently yields better results than can be achieved by arithmetic optimization followed by Boolean optimization. We present a small example to illustrate the benefits of concurrently optimizing Boolean and arithmetic functions.
Reference: [7] <author> J. Darringer, D. Brand, J. Gerbi, W. Joyner, and L. Trevillyan. LSS: </author> <title> A System for Production Logic Synthesis. </title> <journal> IBM Journal of Research Development, </journal> <volume> 28(5) </volume> <pages> 326-8, </pages> <month> September </month> <year> 1984. </year>
Reference-contexts: As was illustrated in Section 3.1, the new function is represented as a combination of Boolean and arithmetic functions. The function must be optimized to enable synthesizing a circuit with the shortest possible delay. Current optimization techniques that restructure critical paths are based either on optimizing Boolean functions <ref> [7, 2, 19, 11] </ref> or on exclusively manipulating arithmetic expressions [20, 15, 17, 6]. Optimizing arithmetic and Boolean functions concurrently yields better results than can be achieved by arithmetic optimization followed by Boolean optimization. We present a small example to illustrate the benefits of concurrently optimizing Boolean and arithmetic functions.
Reference: [8] <author> G. De Micheli. </author> <title> Synchronous Logic Synthesis: Algorithms for Cycle-Time Minimization. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 10(1) </volume> <pages> 63-73, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: Architectural retiming performs sequential logic optimization by exposing adjacent pipeline stages along critical paths for combinational optimization, an approach which is not used by current sequential optimization techniques. De Micheli applies local algebraic transformations across latch boundaries <ref> [8] </ref>. Peripheral retiming [16] allowed negative weights on peripheral edges to allow the whole circuit to be optimized using combinational optimization. The optimized circuit is then retimed using conventional retiming [14].
Reference: [9] <author> S. Dey, F. Brglez, and G. Kedem. </author> <title> Partitioning Sequential Circuits for Logic Optimization.. </title> <booktitle> In IEEE International Conference on Computer Design, </booktitle> <pages> pages 70-6, </pages> <year> 1991. </year>
Reference-contexts: The optimized circuit is then retimed using conventional retiming [14]. Dey et al. resorted to circuit partitioning to identify subcircuits with equal-weight reconvergent paths (petals) to which peripheral retiming can be applied <ref> [9] </ref>. Chakardhar et al. took a more timing-driven approach to sequential optimization that results in applying combinational optimization techniques to each stage in the circuit [4].
Reference: [10] <editor> C. Ebeling and B. Lockyear. </editor> <booktitle> On the Performance of Level-Clocked Circuits. In Advanced Research in VLSI, </booktitle> <pages> pages 242-356, </pages> <year> 1995. </year>
Reference-contexts: Retiming, while an important transformation, yields only modest improvements and only for a limited class of circuits <ref> [10] </ref>. In particular, retiming cannot improve the performance of circuits whose clock period is determined by a critical cycle, a cycle whose total delay divided by the number of registers equals the clock period. Critical cycles are 1 Execution time is also referred to as latency.
Reference: [11] <author> J. Fishburn. </author> <title> A Depth-Decreasing Heuristic for Combinational Logic; or How to Convert a Ripple-Carry Adder into a Carry-Lookahead Adder or Anything in-between.. </title> <booktitle> In Proc. 31th ACM-IEEE Design Automation Conf., </booktitle> <pages> pages 361 -4, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: As was illustrated in Section 3.1, the new function is represented as a combination of Boolean and arithmetic functions. The function must be optimized to enable synthesizing a circuit with the shortest possible delay. Current optimization techniques that restructure critical paths are based either on optimizing Boolean functions <ref> [7, 2, 19, 11] </ref> or on exclusively manipulating arithmetic expressions [20, 15, 17, 6]. Optimizing arithmetic and Boolean functions concurrently yields better results than can be achieved by arithmetic optimization followed by Boolean optimization. We present a small example to illustrate the benefits of concurrently optimizing Boolean and arithmetic functions.
Reference: [12] <author> M. Hartmann and J. Orlin. </author> <title> Finding Minimum Cost to Time Ratio Cycles With Small Integral Transit Times. </title> <type> Technical Report UNC/OR/TR/91-19, </type> <institution> University of North Carolina, Chapel Hill, </institution> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: Critical cycles are 1 Execution time is also referred to as latency. For clarity, however, we will reserve the term latency to refer to the number of clock cycles between the start and completion of a computation. also known as max-ratio-cycles, which can be determined efficiently <ref> [12] </ref>. Note that in retiming, the critical cycle may be the cycle formed by connecting the outputs of the circuit to its inputs via a register in order to preserve the the relative timing and thus the latency of interface signals.
Reference: [13] <author> U. Holtmann and R. Ernst. </author> <title> Experiments with Low-Level Speculative Computation Based on Multiple Branch Prediction. </title> <journal> IEEE Transactions on VLSI Systems, </journal> <volume> 1(3) </volume> <pages> 262-267, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Recently, the research community has shown interest in various forms of pre-execution, speculation, and precom-putation to achieve improvements in performance. Holtmann and Ernst describe four examples for which they explore applying a speculative technique that is modeled after multiple branch prediction in a processor <ref> [13] </ref>. Their methodology is to ignore control dependencies during scheduling and then add register sets to restore the state in case of prediction error. Their predictions are based on data gathered from a program profile.
Reference: [14] <author> C. E. Leiserson, F. Rose, and J. B. Saxe. </author> <title> Optimizing Synchronous Circuitry by Retiming. </title> <booktitle> In Proc. of the 3rd Caltech Conference on VLSI, </booktitle> <month> Mar. </month> <year> 1983. </year>
Reference-contexts: Throughput is improved by simply reducing the clock period, which can be accomplished by many techniques including technology improvements, circuit techniques, logic optimizations, and algorithm improvements. We focus here on two general techniques for reducing the clock period, retiming and pipelining. Retiming is a well-known technique <ref> [14] </ref> that minimizes the clock period by rescheduling the operations of the computation performed by a circuit, spreading them out optimally over the number of cycles available to the computation. <p> Adding the register thus increases the latency from one clock period to two clock periods but throughput cannot be increased. Thus there is no advantage to adding a register to the cycle unless there is some way to maintain the latency of the original cycle. Those familiar with c-slowing <ref> [14] </ref> will recognize that we have c-slowed the circuit by a factor of two and we can gain a performance advantage in a straightforward way if we can process two unrelated data sets in parallel. <p> De Micheli applies local algebraic transformations across latch boundaries [8]. Peripheral retiming [16] allowed negative weights on peripheral edges to allow the whole circuit to be optimized using combinational optimization. The optimized circuit is then retimed using conventional retiming <ref> [14] </ref>. Dey et al. resorted to circuit partitioning to identify subcircuits with equal-weight reconvergent paths (petals) to which peripheral retiming can be applied [9]. Chakardhar et al. took a more timing-driven approach to sequential optimization that results in applying combinational optimization techniques to each stage in the circuit [4].
Reference: [15] <author> F. Maciel, Y. Miyanaga, and K. Tochinai. </author> <title> Optimizing and Scheduling DSP Programs for High Performance VLSI Designs.. </title> <journal> IEICE Transactions on Fundamentals of Electronics, Communications and Computer Science, </journal> <volume> E57-A(1):1191-201, </volume> <year> 1992. </year>
Reference-contexts: The function must be optimized to enable synthesizing a circuit with the shortest possible delay. Current optimization techniques that restructure critical paths are based either on optimizing Boolean functions [7, 2, 19, 11] or on exclusively manipulating arithmetic expressions <ref> [20, 15, 17, 6] </ref>. Optimizing arithmetic and Boolean functions concurrently yields better results than can be achieved by arithmetic optimization followed by Boolean optimization. We present a small example to illustrate the benefits of concurrently optimizing Boolean and arithmetic functions.
Reference: [16] <author> S. Malik, E. M. Sentovich, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Retiming and Resynthesis: Optimizing Sequential Networks with Combinational Techniques. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 10(1) </volume> <pages> 74-84, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: Such modification of the circuit behavior might be acceptable especially if the clock period of the overall system is reduced. 5 Related Work Architectural retiming is an optimization technique that encompasses and overlaps with others. The term negative register was used in peripheral retiming <ref> [16] </ref>, an optimization technique for sequential circuits. Negative registers were only allowed on peripheral edges which connect the circuit with it environment. Unlike architectural retiming's definition of negative registers which allows them to have different implementations, peripheral retiming specifically uses the term to signify borrowing registers from the environment. <p> Architectural retiming performs sequential logic optimization by exposing adjacent pipeline stages along critical paths for combinational optimization, an approach which is not used by current sequential optimization techniques. De Micheli applies local algebraic transformations across latch boundaries [8]. Peripheral retiming <ref> [16] </ref> allowed negative weights on peripheral edges to allow the whole circuit to be optimized using combinational optimization. The optimized circuit is then retimed using conventional retiming [14].
Reference: [17] <author> M. Potkonjak and J. Rabaey. </author> <title> Maximally Fast and Arbitrarily Fast Implementation of Linear Computations. </title> <booktitle> In Proc. of the 1992 IEEE International Conf on CAD, </booktitle> <pages> pages 304 - 08, </pages> <year> 1992. </year>
Reference-contexts: The function must be optimized to enable synthesizing a circuit with the shortest possible delay. Current optimization techniques that restructure critical paths are based either on optimizing Boolean functions [7, 2, 19, 11] or on exclusively manipulating arithmetic expressions <ref> [20, 15, 17, 6] </ref>. Optimizing arithmetic and Boolean functions concurrently yields better results than can be achieved by arithmetic optimization followed by Boolean optimization. We present a small example to illustrate the benefits of concurrently optimizing Boolean and arithmetic functions.
Reference: [18] <author> I. Radivojevic and F. Brewer. </author> <title> Incorporating Speculative Execution in Exact Control-Dependent Scheduling. </title> <booktitle> In Proc. 31th ACM-IEEE Design Automation Conf., </booktitle> <pages> pages 479 -484, </pages> <year> 1994. </year>
Reference-contexts: The choice of the input conditions determines whether the precomputation logic will have less power dissipation than the original stage. Alidina et al. present a method for synthesizing the precomputation logic and selecting the input conditions. Radivojevic et al. describe a scheduling technique that employs pre-execution <ref> [18] </ref>. All operations possible after a branch point are precomputed before the branch condition is determined.
Reference: [19] <author> K. Singh, A. Wang, R. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Timing Optimization of Combinational Logic. </title> <booktitle> In Proc. of the 1988 IEEE International Conf on CAD, </booktitle> <pages> pages 282-5, </pages> <month> Nov. </month> <year> 1988. </year>
Reference-contexts: As was illustrated in Section 3.1, the new function is represented as a combination of Boolean and arithmetic functions. The function must be optimized to enable synthesizing a circuit with the shortest possible delay. Current optimization techniques that restructure critical paths are based either on optimizing Boolean functions <ref> [7, 2, 19, 11] </ref> or on exclusively manipulating arithmetic expressions [20, 15, 17, 6]. Optimizing arithmetic and Boolean functions concurrently yields better results than can be achieved by arithmetic optimization followed by Boolean optimization. We present a small example to illustrate the benefits of concurrently optimizing Boolean and arithmetic functions.
Reference: [20] <author> H. Trickey. Flamel: </author> <title> A High-Level Hardware Compiler. </title> <journal> IEEE Transactions on Computer-Aided Design, CAD-6(2):259 -269, </journal> <month> March </month> <year> 1987. </year>
Reference-contexts: The function must be optimized to enable synthesizing a circuit with the shortest possible delay. Current optimization techniques that restructure critical paths are based either on optimizing Boolean functions [7, 2, 19, 11] or on exclusively manipulating arithmetic expressions <ref> [20, 15, 17, 6] </ref>. Optimizing arithmetic and Boolean functions concurrently yields better results than can be achieved by arithmetic optimization followed by Boolean optimization. We present a small example to illustrate the benefits of concurrently optimizing Boolean and arithmetic functions.
References-found: 20

