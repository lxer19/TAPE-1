URL: ftp://ftp.cs.kun.nl/pub/CSI/SoftwEng.FunctLang/papers/kesm94-CopyUnique.ps.gz
Refering-URL: http://www.cs.kun.nl/~clean/Clean.Papers.html
Root-URL: 
Title: Uniqueness and Lazy Graph Copying Copyright for the Unique  
Author: Marco Kesseler 
Date: September, 1994  
Address: Toernooiveld 1, 6525 ED Nijmegen, The Netherlands  
Affiliation: Faculty of Mathematics and Computer Science University of Nijmegen  
Abstract: The uniqueness type system and lazy graph copying are important techniques to efficiently implement functional languages. Unfortunately combination of both in one system may lead to conflicts. Until recently, parallel Concurrent Clean programs could not take advantage of the uniqueness type system, because the lazy graph copying method that Concurrent Clean employed was able to invalidate derived uniqueness information. This paper will address this problem and present a solution that is based on a new copying method with different semantics, called lazy normal form copying.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Plasmeijer M.J., Eekelen M.C.J.D. </author> <title> van (1993). Functional Programming and Parallel Graph Rewriting. </title> <publisher> Addison Wesley, </publisher> <year> 1993. </year>
Reference: [2] <author> Ncker E.G.J.M.H., Smetsers J.E.W., Eekelen M.C.J.D. van, Plasmeijer M.J., </author> <year> (1991). </year> <title> 'Concurrent Clean', </title> <booktitle> In proceedings of Parallel Architectures and Languages Europe (PARLE'91). Springer LNCS 505, </booktitle> <volume> Vol. II, </volume> <pages> page 202-219. </pages>
Reference: [3] <author> Eekelen M.C.J.D. van, Plasmeijer M.J., Smetsers J.E.W., </author> <year> (1990). </year> <title> 'Parallel Graph Rewriting on Loosely Coupled Machine Architectures' In proceedings of the workshop on CTRS'90. Montreal Canada. Uniqueness and Lazy Graph Copying 4-12 </title>
Reference: [4] <author> S. Smetsers, E. Barendsen, M. van Eekelen, R. </author> <title> Plasmeijer (1993). Guaranteeing Safe Destructive Updates through a Type System with Uniqueness Information for Graphs. </title> <booktitle> In Graph Transformations in Computer Science. </booktitle> <address> Dagstuhl Castle, Germany, </address> <publisher> Springer LNCS 776, </publisher> <pages> pages 358-379. </pages>
Reference: [5] <author> M. </author> <month> Kesseler </month> <year> (1994). </year> <title> Reducing Graph Copying Costs - Time to Wrap it up. </title> <booktitle> In Proceedings of the First International Symposium on Parallel Symbolic Computation (PASCO 94), </booktitle> <institution> Linz, Austria, World Scientific International Co. </institution> <note> To Appear. </note>
Reference-contexts: This will automatically create a separate message for such a structure, which can be more efficient than packing it in a message along with the other nodes of the copied graph <ref> [5] </ref>. Clearly, this cannot be done for unique objects, as they would become deferred. One has to detect and avoid this during runtime, because the compiler cannot detect such introductions of temporarily deferred nodes. <p> If one does not care about speed of execution and just wants to evaluate the sieve in a distributed lazy manner, no -I-annotations are needed in the filter function either. Using a special list buffering function to control communication and synchronisation <ref> [5] </ref> the definition of the sieve would become as follows. The filter function does not require any annotations in this case, because now the buffer function drives evaluation.
References-found: 5

