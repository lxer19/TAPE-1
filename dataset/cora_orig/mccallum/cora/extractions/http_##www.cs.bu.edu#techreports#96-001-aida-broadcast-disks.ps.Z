URL: http://www.cs.bu.edu/techreports/96-001-aida-broadcast-disks.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: (best@cs.bu.edu)  
Title: AIDA-based Real-Time Fault-Tolerant Broadcast Disks  
Author: Azer Bestavros 
Keyword: Broadcast disks; real-time, fault-tolerant, and secure commu nication; mobile computing; information dispersal and retrieval.  
Note: This work has been partially supported by NSF (grant CCR-9308344).  
Address: Boston, MA 02215  
Affiliation: Computer Science Department Boston University  
Abstract: The proliferation of mobile computers and wireless networks requires the design of future distributed real-time applications to recognize and deal with the significant asymmetry between downstream and upstream communication capacities, and the significant disparity between server and client storage capacities. Recent research work proposed the use of Broadcast Disks as a scalable mechanism to deal with this problem. In this paper, we propose a new broadcast disks protocol, based on our Adaptive Information Dispersal Algorithm (AIDA). Our protocol is different from previous broadcast disks protocols in that it improves communication timeliness, fault-tolerance, and security, while allowing for a finer control of multiplexing of prioritized data (broadcast frequencies). We start with a general introduction of broadcast disks. Next, we propose broadcast disk organizations that are suitable for real-time applications. Next, we present AIDA and show its fault-tolerance and security properties. We conclude the paper with the description and analysis of AIDA-based broadcast disks organizations that achieve both timeliness and fault-tolerance, while preserving downstream communication capacity. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Acharya, R. Alonso, M. Franklin, and S. Zdonik. </author> <title> Broadcast disks: Data management for asymmetric communications environments. </title> <booktitle> In Proceedings of ACM SIGMOD conference, </booktitle> <address> San Jose, CA, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: On the client side, this hierarchy gives rise to cache management and prefetching issues (e.g. cache replacement strategies to improve the hit ratio or reduce miss penalty). In [3], Acharya, Franklin and Zdonik discuss broadcast disks organization issues, including client cache management <ref> [1] </ref>, and client-initiated prefetching to improve the communication latency for database access systems [2].
Reference: [2] <author> S. Acharya, M. Franklin, and S. Zdonik. </author> <title> Prefetching from a broadcast disk. </title> <booktitle> In Proceedings of ICDE'96: The 1996 International Conference on Data Engineering, </booktitle> <address> New Orleans, Louisiana, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: In [3], Acharya, Franklin and Zdonik discuss broadcast disks organization issues, including client cache management [1], and client-initiated prefetching to improve the communication latency for database access systems <ref> [2] </ref>.
Reference: [3] <author> Swarup Acharya, Michael Franklin, and Stanley Zdonik. </author> <title> Dissemination-based data delivery using broadcast disks. </title> <journal> IEEE Personal Communications, </journal> <volume> 2(6), </volume> <month> December </month> <year> 1995. </year>
Reference-contexts: On the client side, this hierarchy gives rise to cache management and prefetching issues (e.g. cache replacement strategies to improve the hit ratio or reduce miss penalty). In <ref> [3] </ref>, Acharya, Franklin and Zdonik discuss broadcast disks organization issues, including client cache management [1], and client-initiated prefetching to improve the communication latency for database access systems [2]. <p> This regimen has been termed as the flat broadcast program <ref> [3] </ref>. With a flat broadcast, the worst-case latency is the same for all data and is equal to the broadcast period. This leads to the following lemma about downstream bandwidth requirement.
Reference: [4] <author> Azer Bestavros. </author> <title> IDA-based disk arrays. </title> <type> Technical Memorandum 45312-890707-01TM, </type> <institution> AT&T, Bell Laboratories, Department 45312, </institution> <address> Holmdel, NJ, </address> <month> July </month> <year> 1989. </year> <month> 19 </month>
Reference-contexts: AIDA is an elaboration on the Information Dispersal Algorithm of Michael O. Rabin [19], which we have previously shown to be a sound mechanism that considerably improves the performance of I/O systems and parallel/distributed storage devices <ref> [4, 9] </ref>. The use of IDA for efficient routing in parallel architectures has also been investigated [18]. 3.1 Information Dispersal and Retrieval Let F represent the original data object (hereinafter referred to as the file) to be communicated (or retrieved).
Reference: [5] <author> Azer Bestavros. SETH: </author> <title> A VLSI chip for the real-time information dispersal and retrieval for secu-rity and fault-tolerance. </title> <booktitle> In Proceedings of ICPP'90, The 1990 International Conference on Parallel Processing, </booktitle> <address> Chicago, Illinois, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Figure 1 illustrates the dispersal, communication, and reconstruction of an object using IDA. Both the dispersal and reconstruction operations can be performed in real-time. This was demonstrated in <ref> [5] </ref>, where we presented an architecture and a CMOS implementation of a VLSI chip 6 that implements IDA. 5 In this paper we assume that all transmission failures are manifested as communication errors that are detected by clients (e.g. through the generation of a checksum/parity error). 6 The chip (called SETH) <p> This is necessary so that clients could relate blocks to objects, and more importantly, to allow clients to correctly choose the inverse transformation [y ij ] mfim when using IDA. 7 For more details, we refer the reader to Rabin's paper [19] on IDA and our paper on IDA implementation <ref> [5] </ref>. 8 Another alternative is to broadcast a directory (or index [15]) at the beginning of each broadcast period.
Reference: [6] <author> Azer Bestavros. </author> <title> An adaptive information dispersal algorithm for time-critical reliable communication. </title> <editor> In Ivan Frisch, Manu Malek, and Shivendra Panwar, editors, </editor> <title> Network Management and Control, Volume II. </title> <publisher> Plenum Publishing Corporation, </publisher> <address> New York, New York, </address> <year> 1994. </year>
Reference-contexts: In this paper, we show how to allocate data items to broadcast disks so as to mask (or otherwise minimize) the impact of intermittent failures. In that respect, we use the Adaptive Information Dispersal Algorithm (AIDA) <ref> [6] </ref>, which allows for a controllable and efficient tradeoff of bandwidth for reliability. This paper is organized as follows. In section 2, we present three different broadcast disks organizations|namely flat, rate monotonic, and slotted rate monotonic|that are suitable for use with real-time applications. <p> The IDA approach is radically different in that redundancy is added uniformly; there is simply no distinction between data and parity. It is this feature that makes it possible to scale the amount of redundancy used in IDA. Indeed, this is the basis for the adaptive IDA (AIDA) <ref> [6] </ref>. Using AIDA, a bandwidth allocation operation is inserted after the dispersal operation but prior to transmission as shown in figure 3. This bandwidth allocation step allows the system to scale the amount of redundancy used in the transmission.
Reference: [7] <author> Azer Bestavros. </author> <title> Speculative data dissemination and service to reduce server load, network traffic and service time for distributed information systems. </title> <booktitle> In Proceedings of ICDE'96: The 1996 International Conference on Data Engineering, </booktitle> <address> New Orleans, Louisiana, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: Other related issues include client-initiated caching and prefetching strategies. The selection of "what data to locate" on broadcast disks and "how frequently to broadcast it" are interesting problems, reminiscent of the specualtive data dissemination protocols <ref> [7] </ref> we proposed and evaluated for the WWW. The use of broadcast disks, however, poses new challenges for the implementation of these protocols. In particular, when broadcast disks are used, servers cannot keep track of the access patterns necessary for data dissemination.
Reference: [8] <author> Azer Bestavros and Spyridon Braoudakis. </author> <title> Value-cognizant speculative concurrency control for real-time databases. </title> <journal> Information Systems: </journal> <note> Special Issue on Real-Time Databases, (To Appear in 1996). </note>
Reference-contexts: Delays from such restarts could be fatal in a real-time environment. Techniques that allow for very frequent broadcasting of invalidation messages (or incremental updates) coupled with speculative client processing policies <ref> [8] </ref> could be useful in alleviating this problem. Other related issues include real-time database concurrency control and indexing. Broadcast disks are likely to be used by clients in retrieving information from a large body of data.
Reference: [9] <author> Azer Bestavros, Danny Chen, and Wing Wong. </author> <title> The reliability and performance of parallel disks. </title> <type> Technical Memorandum 45312-891206-01TM, </type> <institution> AT&T, Bell Laboratories, Department 45312, </institution> <address> Holmdel, NJ, </address> <month> December </month> <year> 1989. </year>
Reference-contexts: AIDA is an elaboration on the Information Dispersal Algorithm of Michael O. Rabin [19], which we have previously shown to be a sound mechanism that considerably improves the performance of I/O systems and parallel/distributed storage devices <ref> [4, 9] </ref>. The use of IDA for efficient routing in parallel architectures has also been investigated [18]. 3.1 Information Dispersal and Retrieval Let F represent the original data object (hereinafter referred to as the file) to be communicated (or retrieved).
Reference: [10] <author> D. Ferrari. </author> <title> Design and application of a delay jitter control scheme for packet-switching internetworks. </title> <booktitle> In Proceedings of the second International Conference on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> Heidelberg, Germany, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: This, however, may not be feasible if the system is running close to capacity. One possible approach to deal with such a situation is to allow the quality of service to degrade gracefully. The integration of AIDA with best-effort techniques such as those presented in <ref> [10, 13] </ref> and imprecise computation techniques such as those suggested in [17] is an interesting research problem yet to be pursued. The question of propagating updates to data stored on broadcast disks is an interesting topic that received no attention from the research community.
Reference: [11] <author> Garth Gibson, Lisa Hellerstein, Richard Karp, Randy Katz, and David Patterson. </author> <title> Coding techniques for handling failures in large disk arrays. </title> <type> Technical Report UCB/CSD 88/477, </type> <institution> Computer Science Division, University of California, </institution> <month> July </month> <year> 1988. </year>
Reference-contexts: In most of these protocols, redundancy is injected in the form of parity blocks, which are only used for error detection and/or correction purposes <ref> [11] </ref>. The IDA approach is radically different in that redundancy is added uniformly; there is simply no distinction between data and parity. It is this feature that makes it possible to scale the amount of redundancy used in IDA. Indeed, this is the basis for the adaptive IDA (AIDA) [6].
Reference: [12] <author> David Gifford. </author> <title> Ploychannel systems for mass digital communication. </title> <journal> Communications of the ACM, </journal> <volume> 33, </volume> <month> February </month> <year> 1990. </year>
Reference-contexts: continuously and repeatedly broadcasting data to clients, thus in effect making the broadcast channel act as a set of disks (hence the term "Broadcast Disks") from which clients could fetch data "as it goes by." Work on broadcast disks is different from previous work in both wired and wireless networks <ref> [12, 14] </ref> in that several sources of data are multiplexed and broadcast to clients, thus creating a hierarchy of broadcast disks with different sizes and speeds. On the server side, this hierarchy gives rise to memory management issues (e.g. allocation of data to broadcast disks based on priority/urgency).
Reference: [13] <author> M. Gilge and R. Gussella. </author> <title> Motion video coding for packet-switching networks an integrated approach. </title> <booktitle> In Proceedings of the SPIE Conference on Visual Communications and Image Processing, </booktitle> <address> Boston, MA, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: This, however, may not be feasible if the system is running close to capacity. One possible approach to deal with such a situation is to allow the quality of service to degrade gracefully. The integration of AIDA with best-effort techniques such as those presented in <ref> [10, 13] </ref> and imprecise computation techniques such as those suggested in [17] is an interesting research problem yet to be pursued. The question of propagating updates to data stored on broadcast disks is an interesting topic that received no attention from the research community.
Reference: [14] <author> T. Imielinski and B. Badrinath. </author> <title> Mobile wireless computing: Challenges in data management. </title> <journal> Communications of the ACM, </journal> <volume> 37, </volume> <month> October </month> <year> 1994. </year>
Reference-contexts: continuously and repeatedly broadcasting data to clients, thus in effect making the broadcast channel act as a set of disks (hence the term "Broadcast Disks") from which clients could fetch data "as it goes by." Work on broadcast disks is different from previous work in both wired and wireless networks <ref> [12, 14] </ref> in that several sources of data are multiplexed and broadcast to clients, thus creating a hierarchy of broadcast disks with different sizes and speeds. On the server side, this hierarchy gives rise to memory management issues (e.g. allocation of data to broadcast disks based on priority/urgency).
Reference: [15] <author> T. Imielinski, S. Viswanathan, and B. Badrinath. </author> <title> Energy efficient indexing on air. </title> <booktitle> In Proceedings of ACM SIGMOD Conference, </booktitle> <address> Minneapolis, MN, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: and more importantly, to allow clients to correctly choose the inverse transformation [y ij ] mfim when using IDA. 7 For more details, we refer the reader to Rabin's paper [19] on IDA and our paper on IDA implementation [5]. 8 Another alternative is to broadcast a directory (or index <ref> [15] </ref>) at the beginning of each broadcast period. This approach is less desirable because it does not lend itself to a clean fault-tolerant organization. 9 3.2 Adaptive Information Dispersal and Retrieval Several fault-tolerant redundancy-injecting protocols (similar to IDA) have been suggested in the literature.
Reference: [16] <author> C. L. Liu and J. Layland. </author> <title> Scheduling algorithms for multiprogramming in hard real-time environments. </title> <journal> Journal of the Assocation of Computing Machinery, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: Next, the broadcast program is constructed by stepping through the sorted list of data items, and allocating time slots for each block in D i within each T i minor cycle of T lcm . 2 2 This process is similar to CPU Rate Monotonic Scheduling algorithms <ref> [16] </ref>. 5 Despite the fact that it achieves an optimal utilization of downstream bandwidth, the rate monotonic organization of broadcast disks is not practical in a large system with thousands of data items, each with a different timing constraint.
Reference: [17] <author> Jane Liu and Victor Lopez-Millan. </author> <title> A congestion control scheme for a real-time traffic switching element using the imprecise computations technique. </title> <booktitle> In Proceedings of the IEEE IPPS 1st Workshop on Parallel and Distributed Real-Time Systems, </booktitle> <pages> pages 89-93, </pages> <address> Newport Beach, CA, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: One possible approach to deal with such a situation is to allow the quality of service to degrade gracefully. The integration of AIDA with best-effort techniques such as those presented in [10, 13] and imprecise computation techniques such as those suggested in <ref> [17] </ref> is an interesting research problem yet to be pursued. The question of propagating updates to data stored on broadcast disks is an interesting topic that received no attention from the research community.
Reference: [18] <author> Yuh-Dauh Lyuu. </author> <title> Fast fault-tolerant parallel communication and on-line maintenance using information dispersal. </title> <type> Technical Report TR-19-1989, </type> <institution> Harvard University, Cambridge, Massachusetts, </institution> <month> October </month> <year> 1989. </year>
Reference-contexts: Rabin [19], which we have previously shown to be a sound mechanism that considerably improves the performance of I/O systems and parallel/distributed storage devices [4, 9]. The use of IDA for efficient routing in parallel architectures has also been investigated <ref> [18] </ref>. 3.1 Information Dispersal and Retrieval Let F represent the original data object (hereinafter referred to as the file) to be communicated (or retrieved). Furthermore, assume that file F is to be communicated by sending N independent messages (or N independent transmissions).
Reference: [19] <author> Michael O. Rabin. </author> <title> Efficient dispersal of information for security, load balancing and fault tolerance. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 36(2) </volume> <pages> 335-348, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: AIDA is a novel technique for dynamic bandwidth allocation, which makes use of minimal, controlled redundancy to guarantee timeliness and fault-tolerance up to any degree of confidence. AIDA is an elaboration on the Information Dispersal Algorithm of Michael O. Rabin <ref> [19] </ref>, which we have previously shown to be a sound mechanism that considerably improves the performance of I/O systems and parallel/distributed storage devices [4, 9]. <p> This is necessary so that clients could relate blocks to objects, and more importantly, to allow clients to correctly choose the inverse transformation [y ij ] mfim when using IDA. 7 For more details, we refer the reader to Rabin's paper <ref> [19] </ref> on IDA and our paper on IDA implementation [5]. 8 Another alternative is to broadcast a directory (or index [15]) at the beginning of each broadcast period.
Reference: [20] <author> A. Shamir. </author> <title> How to share a secret? Communication of the ACM, </title> <booktitle> 22 </booktitle> <pages> 612-613, </pages> <month> November </month> <year> 1979. </year>
Reference-contexts: A common technique to ensure communication security is to store and communicate information using some form of encryption, where only authorized clients are enabled to decrypt the information through the use of appropriate secret keys <ref> [20] </ref>. The proven difficulty of decrypting the 13 information without knowing the secret key guarantees a high level of security. The main disad-vantage of this technique is that the information (although encrypted) is available as a whole to unauthorized clients.
Reference: [21] <author> S. Zdonik, M. Franklin, R. Alonso, and S. Acharya. </author> <booktitle> Are `disks in the air' just pie in the sky? In Proceedings of the IEEE Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> December </month> <year> 1994. </year> <month> 20 </month>
Reference-contexts: The notion of Broadcast Disks was introduced by Zdonik et al. in <ref> [21] </ref> as a mechanism that uses communication bandwidth to emulate a storage device (or a memory hierarchy in general).
References-found: 21

