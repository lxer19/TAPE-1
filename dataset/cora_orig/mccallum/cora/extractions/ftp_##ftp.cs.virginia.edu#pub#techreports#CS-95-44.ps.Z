URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-95-44.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: mark@virginia.edu jwd@virginia.edu  
Title: TargetSensitive Construction of Diagnostic Programs for Procedure Calling Sequence Generators  
Author: Mark W. Bailey Jack W. Davidson 
Address: Charlottesville, VA 22903 USA  
Affiliation: Department of Computer Science University of Virginia  
Note: Page 1 of 13  late 8 bugs in heavily used production-quality compilers. These bugs cause more than 700 test cases to fail.  
Abstract: Building compilers that generate correct code is difficult. In this paper we present a compiler testing technique that closes the gap between actual compiler implementations and correct compilers. Using formal specifications of procedure calling conventions, we have built a targetsensitive test suite generator that builds test cases for a specific aspect of compiler code generators: the procedure calling sequence generator. By exercising compilers with these targetspecific test suites, our automated testing tool has been able to expose and iso 
Abstract-found: 1
Intro-found: 1
Reference: [ADLU91] <author> Alfred V. Aho, Anton T. Dahbura, David Lee, and M. Uyar. </author> <title> An optimization technique for protocol conformance test generation based on uio sequences and rural chinese postman tours. </title> <journal> IEEE Transactions on Communications , 39(11):16041615, </journal> <month> November, </month> <year> 1991. </year>
Reference-contexts: In many cases, the protocol specification is provided in the form of a finite-state machine. This has resulted in many methods of test selection including the Transition tour, Partial W-method [FBK+91], Distinguishing Sequence Method [Koh78], and Unique-Input-Output method <ref> [ADLU91] </ref>. These methods are derivatives of the checking experiment problem where an implementation is checked against specification FSM [YL95]. What distinguishes these methods from ours is that a bound on the number of states in the implementation FSM is assumed.
Reference: [BD88] <author> Manuel E. Benitez and Jack W. Davidson. </author> <title> A portable global optimizer and linker. </title> <booktitle> In Proceedings of the ACM SIGPLAN ' 88 Conference on Programming Language Design and Implementation , pages 329338, </booktitle> <month> July </month> <year> 1988. </year>
Reference-contexts: This language, called CCL, has been used to automatically generate the calling sequence generator for a compiler [BD95]. The compiler, called vpcc/ vpo , is a retargetable optimizing compiler for the C language that has been targeted to over 10 different architectures <ref> [BD88, BD94] </ref>. The procedure calling convention for a target machine is described using CCL. The resulting specification is processed by a CCL interpreter. The interpreter can generate tables that can be used in the calling-convention-specific portion of vpcc/vpo , or in a test suite generator.
Reference: [BD94] <author> Manuel E. Benitez and Jack W. Davidson. </author> <title> The advantages of machinedependent global optimization. </title> <booktitle> In Proceedings of the 1994 Conference on Programming Languages and Systems Architectures , pages 105124, </booktitle> <month> March </month> <year> 1994. </year>
Reference-contexts: This language, called CCL, has been used to automatically generate the calling sequence generator for a compiler [BD95]. The compiler, called vpcc/ vpo , is a retargetable optimizing compiler for the C language that has been targeted to over 10 different architectures <ref> [BD88, BD94] </ref>. The procedure calling convention for a target machine is described using CCL. The resulting specification is processed by a CCL interpreter. The interpreter can generate tables that can be used in the calling-convention-specific portion of vpcc/vpo , or in a test suite generator.
Reference: [BD95] <author> Mark W. Bailey and Jack W. Davidson. </author> <title> A formal model and specification language for procedure calling conventions. </title> <booktitle> In Proceedings of the 22nd SIGPLAN-SIGACT Symposium on Principles of Programming Languages , pages 298310, </booktitle> <month> January </month> <year> 1995. </year>
Reference-contexts: One aspect of a compiler that has traditionally been hand-coded is the portion that generates calling sequences that implement procedure calls. We have developed a language, called CCL, for specifying procedure calling conventions. We have used CCL specifications to automatically generate calling sequences for a retargetable optimizing compiler <ref> [BD95] </ref>. In doing so, we realized that CCL descriptions could be used to make other compilers more robust without requiring that the compiler implementation use CCL. In this paper, we describe how CCL specifications can be used to generate tests for hand-coded calling sequence generators in other compilers. <p> This language, called CCL, has been used to automatically generate the calling sequence generator for a compiler <ref> [BD95] </ref>. The compiler, called vpcc/ vpo , is a retargetable optimizing compiler for the C language that has been targeted to over 10 different architectures [BD88, BD94]. The procedure calling convention for a target machine is described using CCL. The resulting specification is processed by a CCL interpreter.
Reference: [FBK+91] <author> Susumu Fujiwara, Gregor v. Bochmann, Ferhat Khendek, Mokhtar Amalou, and Abderrazak Ghedamsi. </author> <title> Test selection based on finite state models. </title> <journal> IEEE Transactions on Software Engineering , 17(6):591603, </journal> <month> June </month> <year> 1991. </year>
Reference-contexts: In many cases, the protocol specification is provided in the form of a finite-state machine. This has resulted in many methods of test selection including the Transition tour, Partial W-method <ref> [FBK+91] </ref>, Distinguishing Sequence Method [Koh78], and Unique-Input-Output method [ADLU91]. These methods are derivatives of the checking experiment problem where an implementation is checked against specification FSM [YL95]. What distinguishes these methods from ours is that a bound on the number of states in the implementation FSM is assumed.
Reference: [FH91] <author> Christopher W. Fraser and David R. Hanson. </author> <title> A code generation interface for ansi-c. </title> <journal> SoftwarePrac-tice and Experience , 21(9), </journal> <year> 1991. </year>
Reference-contexts: Several errors were found in C compilers on the MIPS. In this section, we present these results. We selected several C compilers that generate code for the MIPS architecture (a DECStation Model 5000/ 125). These included the native compiler supplied by DEC, a version of Fraser and Hansons lcc <ref> [FH91] </ref> compiler, several versions of GNUs gcc [Sta92], and a previous version of our own C compiler that used a hand-coded calling sequence generator.
Reference: [Hen64] <author> F. C. Hennie. </author> <title> Fault detecting experiments for sequential circuits. </title> <booktitle> In Proceedings of the Fifth Annual Symposium on Switching Theory and Logical Design , pages 95110, </booktitle> <month> November </month> <year> 1964. </year>
Reference-contexts: The problem of confirming that an implementation properly places procedure arguments is equivalent to experimentally determining if the implementation behaves as described by the P-FSA state table. This problem is known as the checking experiment problem from finite-automata theory <ref> [Hen64, Koh78] </ref>. There are numerous approaches to this problem, most of them are based on transition testing. Transition testing forces the implementation to undergo all the transitions that are specified in the specification FSA. <p> Because we have no practical bound on the number of states in the implementation, their work is not applicable. Finally, a similarly related field is the automatic verification of digital circuits <ref> [Hen64, HYHD95] </ref>. 8 Summary Building compilers that generate correct code continues to be a difficult problem. Using automated compiler tools and testing, one can significantly increase the robustness of a compiler.
Reference: [HYHD95] <author> Richard C. Ho, C. Han Yang, Mark A. Horowitz, and David L. Dill. </author> <title> Architecture validation for processors. </title> <booktitle> In ISCA95 , pages 404413, </booktitle> <year> 1995. </year>
Reference-contexts: Because we have no practical bound on the number of states in the implementation, their work is not applicable. Finally, a similarly related field is the automatic verification of digital circuits <ref> [Hen64, HYHD95] </ref>. 8 Summary Building compilers that generate correct code continues to be a difficult problem. Using automated compiler tools and testing, one can significantly increase the robustness of a compiler.
Reference: [Joh] <author> S. C. Johnson. </author> <title> A tour through the portable c compiler. TargetSensitive Construction of Diagnostic Programs for Procedure Calling Sequence Generators Page 12 of 13 </title>
Reference-contexts: The calling convention is machinedependent because the rules for passing values from one procedure to another depend on machinespecific features such as memory alignment restrictions and register usage conventions. The code that implements the calling convention, known as the calling sequence <ref> [Joh] </ref>, must be generated by the code generator.
Reference: [Koh78] <author> Zvi Kohavi. </author> <title> Switching and Finite Automata Theory. </title> <publisher> McGraw-Hill, </publisher> <address> second edition, </address> <year> 1978. </year>
Reference-contexts: The problem of confirming that an implementation properly places procedure arguments is equivalent to experimentally determining if the implementation behaves as described by the P-FSA state table. This problem is known as the checking experiment problem from finite-automata theory <ref> [Hen64, Koh78] </ref>. There are numerous approaches to this problem, most of them are based on transition testing. Transition testing forces the implementation to undergo all the transitions that are specified in the specification FSA. <p> In many cases, the protocol specification is provided in the form of a finite-state machine. This has resulted in many methods of test selection including the Transition tour, Partial W-method [FBK+91], Distinguishing Sequence Method <ref> [Koh78] </ref>, and Unique-Input-Output method [ADLU91]. These methods are derivatives of the checking experiment problem where an implementation is checked against specification FSM [YL95]. What distinguishes these methods from ours is that a bound on the number of states in the implementation FSM is assumed.
Reference: [Mea55] <author> G. H. Mealy. </author> <title> A method for synthesizing sequential circuits. </title> <journal> Bell System Technical Journal , 35(5):10451079, </journal> <year> 1955. </year>
Reference-contexts: So, each state is labeled by a string from the language -0, 1-4 -0, 1-3 . The output of M is a string s P , where , which contains the placement information. Since the P-FSA produces output on transitions, we have a Mealy machine <ref> [Mea55] </ref>.
Reference: [SL89] <author> Deepinder P. Sidhu and Ting-Kau Leung. </author> <title> Formal methods for protocol testing: A detailed study. </title> <journal> IEEE Transactions of Software Engineering , 15(4):413426, </journal> <month> April </month> <year> 1989. </year>
Reference-contexts: TargetSensitive Construction of Diagnostic Programs for Procedure Calling Sequence Generators Page 11 of 13 7 Related Work The automatic generation of test suites has receive much attention recently in the area of conformance testing of network protocols <ref> [SL89] </ref>. The purpose of the suite is to determine if the implementation of a communication protocol adheres to the protocols specification. In many cases, the protocol specification is provided in the form of a finite-state machine.
Reference: [Sta92] <author> Richard M. Stallman. </author> <title> Using and Porting GNU CC (Version 2.0). Free Software Foundation, </title> <publisher> Inc., </publisher> <month> Feb-ruary </month> <year> 1992. </year>
Reference-contexts: In this section, we present these results. We selected several C compilers that generate code for the MIPS architecture (a DECStation Model 5000/ 125). These included the native compiler supplied by DEC, a version of Fraser and Hansons lcc [FH91] compiler, several versions of GNUs gcc <ref> [Sta92] </ref>, and a previous version of our own C compiler that used a hand-coded calling sequence generator. Although we feel that this technique is extremely valuable throughout the compiler development cycle, we believe that it would be fairest to evaluate its effectiveness in finding errors in young implementations of compilers.
Reference: [YL95] <author> Mihalis Yannakakis and David Lee. </author> <title> Testing finite state machines: Fault detection. </title> <journal> Journal of Computer and System Sciences , 50:209227, </journal> <year> 1995. </year>
Reference-contexts: This has resulted in many methods of test selection including the Transition tour, Partial W-method [FBK+91], Distinguishing Sequence Method [Koh78], and Unique-Input-Output method [ADLU91]. These methods are derivatives of the checking experiment problem where an implementation is checked against specification FSM <ref> [YL95] </ref>. What distinguishes these methods from ours is that a bound on the number of states in the implementation FSM is assumed. Because we have no practical bound on the number of states in the implementation, their work is not applicable.
References-found: 14

