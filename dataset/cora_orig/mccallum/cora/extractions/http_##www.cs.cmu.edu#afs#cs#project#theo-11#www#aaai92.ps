URL: http://www.cs.cmu.edu/afs/cs/project/theo-11/www/aaai92.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs/project/theo-11/www/publications.html
Root-URL: 
Email: Lisa.Dent@cs.cmu.edu Tom.Mitchell@cs.cmu.edu  
Title: A Personal Learning Apprentice even if its performance in initial field tests, and more general
Author:  Lisa Dent Jesus Boticario John McDermott Tom Mitchell, and David Zabowski 
Keyword: personalized knowledge-based software agents  
Note: difficult because (1) specifying the appropriate program is the first instance of a fielded learning apprentice in unambitious definition of "appropriate", (2)  are not  
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Abstract: requesting certain types of meetings. In order to be effective, such an agent would need considerable Personalized knowledge-based systems have not yet knowledge regarding the scheduling preferences and become widespread, despite their potential for valuable constraints of the individual faculty member (e.g., that assistance in many daily tasks. This is due, in part, to the meetings with graduate students are typically located in the high cost of developing and maintaining customized faculty member's office, that meetings with knowledge bases. The construction of personal assistants undergraduates during office hours are typically allocated as learning apprentices -- interactive assistants that learn 30 minutes), as well as knowledge of various individuals continually from their users -- is one approach which could within the environment (e.g., that Jon is an undergraduate dramatically reduce the cost of knowledge-based advisors. majoring in computer science, that Raj is the Dean of We present one such personal learning apprentice, called computer science). CAP, which assists in managing a meeting calendar. CAP While such a knowledge-based assistant would be has been used since June 1991 by a secretary in our work action at design time is possible only for a very routine use. This paper describes the organization of CAP, even if one could specify the task and implement a Keywords: learning apprentice, knowledge-based program, maintaining the system in the face of an evolving assistants, office automation world is costly. For these reasons, we believe that practical using standard software technology. Instead, we helpful, developing and maintaining such a system is place to manage a faculty member's meeting calendar, and
Abstract-found: 1
Intro-found: 1
Reference: <author> Jourdan, J., Dent, L., McDermott, J., Mitchell, T., and Zabowski, D. </author> <year> (1991). </year> <title> Interfaces that Learn: A Learning Apprentice for Calendar Management (Tech. </title> <type> Rep.) </type> <institution> CMU-CS-91-135. Carnegie Mellon University. </institution>
Reference: <editor> Kodratoff, Y., and Tecuci, G. </editor> <year> (1986). </year> <title> DISCIPLE : An Iterative Approach to Learning Apprentice Systems (Tech. </title> <type> Rep.) </type> <institution> UPS-293. Laboratoire de Recherche en Informatique, Universite de PARIS-SUD. </institution>
Reference: <author> Kozierok, R. & Maes, P. </author> <year> (1992). </year> <title> Intelligent Groupware for Scheduling Meetings. </title> <note> Submitted to CSCW-92. </note> . 
Reference: <author> Mitchell, T.M., Mahadevan, S., and L. Steinberg. </author> <month> (August </month> <year> 1985). </year> <title> LEAP: A Learning Apprentice for VLSI Design. </title> <booktitle> Proceedings of the Ninth International Joint Conference on Artificial Intelligence. </booktitle> , <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: 1. Introduction explore here the feasibility of learning apprentice systems, Personal knowledge-based assistants have the potential as defined in <ref> (Mitchell et al., 1985) </ref>: to assist with many daily tasks.
Reference: <author> Mitchell, T. M., J. Allen, P. Chalasani, J. Cheng, O. Etzioni, M. Ringuette, and J. Schlimmer. </author> <year> (1991). </year> <title> Theo: A Framework for Self-improving Systems. </title> <editor> In VanLehn, K. (Ed.), </editor> <booktitle> Architectures for Intelligence. </booktitle> <publisher> Erlbaum. </publisher>
Reference: <author> Nakauchi, Y., Okada, T., and Anzai, Y. </author> <month> (May </month> <year> 1991). </year> <title> Groupware that Learns. </title> <booktitle> Proceedings of the IEEE Pacific Rim Communications, Computers and Signal Processing. </booktitle> , <publisher> IEEE Press. </publisher>
Reference-contexts: These editing commands communicate with a Tecuci, 1986), <ref> (Nakauchi et al., 1991) </ref>, (Kozierok & Maes, Common Lisp subprocess running THEO (Mitchell et al., 1992)) no previous system has passed the threshold of 1991), a framework for learning and problem solving, on successful deployment within a real user community. We which the core of the system is based.
Reference: <author> Quinlan, J.R. </author> <year> (1986). </year> <title> Induction of Decision Trees. </title> <journal> Machine Learning, </journal> <volume> 1(1), </volume> <pages> 81-106. </pages>
Reference-contexts: The learning component is invoked offline, to avoid delay in user response time. CAP currently utilizes two competing learning methods which are provided by the THEO framework: a decision tree learning method similar to ID3 <ref> (Quinlan, 1986, Quinlan, 1987) </ref>, and a neural network learning method, Backpropagation (Rumelhart et al., 1986).
Reference: <author> Quinlan, J.R. </author> <month> (August </month> <year> 1987). </year> <title> Generating Production Rules from Decision Trees. </title> <booktitle> Proceedings of the International Joint Conference on Artificial Intelligence. </booktitle> , <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Rumelhart,D. E.,G. E. Hinton, & R. J. Williams. </author> <year> (1986). </year>
References-found: 9

