URL: http://www.cs.clemson.edu/~malloy/papers/simulation/oosc93.ps
Refering-URL: http://www.cs.clemson.edu/~malloy/simulation_papers.html
Root-URL: http://www.cs.clemson.edu
Email: malloy@cs.clemson.edu harrold@cs.clemson.edu johnmc@cs.clemson.edu  
Title: The Implementation of a Simulation Language using Dynamic Binding  
Author: Brian Malloy Mary Jean Harrold John D. McGregor 
Address: Clemson, SC 29634-1906 Clemson, SC 29634-1906 Clemson, SC 29634-1906  
Affiliation: Clemson University Clemson University Clemson University  
Abstract: We present our new technique to incorporate simulation constructs into C ++ to produce a new language called SimPOL (Simulation Process-driven Object-oriented Language). Sim-POL is an extension of C ++ that permits the user to construct a simulation model using simulation primitives like those of Simula. The actions in each entity in the model are encoded in a class that we translate into a simulation process. Our implementation of a process incorporates the retention of control and data into the process class using procedure calls and the state of objects. We simulate time by maintaining an event list where the currently executing process is at the head of the event list. Through the use of dynamic binding, we activate the process at the head of the event list and thereby avoid stack growth due to additional procedure calls. The main benefit of our approach is the ease of simulation programming that it provides to the user because the simulation primitives required to model processes can be learned quickly by any C ++ programmer. Another important benefit of our approach over previous approaches is that our preprocessor can be used with any existing C ++ compiler and is therefore, truly portable. Since C ++ is the most widely used object-oriented language, SimPOL will be of use to a large portion of the object-oriented community. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <institution> ``AT&T C++ Language System Library Manual,'' Saber Software, Inc., </institution> <year> 1989. </year>
Reference-contexts: SIMCAL, however, does not provide inheritance nor does it offer the advantages of an object-oriented approach. One object-oriented approach provides a framework of classes for simulation modeling [7] that utilizes the coroutine facility included in the task library provided with some compilers <ref> [1] </ref>. However, the task library is not easily ported to new machines and is currently only included with compilers licensed through AT&T [1, 8]. Thus, existing techniques that model the behavior of a system using a general-purpose language are inadequate and new techniques are needed. <p> One object-oriented approach provides a framework of classes for simulation modeling [7] that utilizes the coroutine facility included in the task library provided with some compilers [1]. However, the task library is not easily ported to new machines and is currently only included with compilers licensed through AT&T <ref> [1, 8] </ref>. Thus, existing techniques that model the behavior of a system using a general-purpose language are inadequate and new techniques are needed.
Reference: 2. <author> O. </author> <title> Balci, ``The Implementation of Four Conceptual Frameworks for Simulation Modeling in High-Level Languages,'' </title> <booktitle> Proceedings of the 1988 Winter Simulation Conference , pp. </booktitle> <pages> 287-295, </pages> <address> Piscataway NJ, </address> <year> 1988. </year>
Reference-contexts: Thus, general-purpose languages may be more appropriate for simulation programming <ref> [2] </ref> as long as the underlying system can be modeled with the language. rrrrrrrrrrrrrrrrrr This work was partially supported by NSF under grant CCR-9109531 to Clemson University.
Reference: 3. <author> J. Ferrante, K. J. Ottenstein, and J. D. Warren, </author> <title> ``The program dependence graph and its use in optimization,'' </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> vol. 9, no. 3, </volume> <pages> pp. 319-349, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: Our technique translates each simulation class into a process class with multiple entry and exit points that can be compiled by any C compiler. To translate a simulation class to a process class, we first identify the points of departure in the simulation class using a program dependence graph <ref> [3] </ref> to expose the control dependencies in the class. Then, we partition the code into procedures using these points of departure, and incorporate the partitioned code into a hierarchy of classes.
Reference: 4. <author> M. J. Harrold and B. Malloy, </author> <title> ``Performing data ow analysis on the PDG,'' </title> <type> Technical Report #92-108 Clem-son University, </type> <month> March </month> <year> 1992 </year> . 
Reference: 5. <author> M. J. Harrold and B. Malloy, </author> <title> ``Data ow testing of par-allelized code,'' </title> <booktitle> Proceedings of Conference on Software Maintenance '92, </booktitle> <month> November </month> <year> 1992. </year>
Reference: 6. <author> B. Malloy and M. L. Soffa, </author> <title> ``Conversion of Simulation Processes to Pascal Constructs,'' </title> <journal> Software Practice and Experience, </journal> <volume> vol. 20(2), </volume> <pages> pp. 191-207, </pages> <month> Feb </month> <year> 1990. </year>
Reference-contexts: One approach to modeling a system that exploits the ``generality'' provided by a general-purpose language is to extend an existing language to include simulation facilities. In SIMCAL <ref> [6] </ref>, Pascal is extended to include process oriented simulation facilities like those of Simula. SIMCAL, however, does not provide inheritance nor does it offer the advantages of an object-oriented approach.
Reference: 7. <author> B. Malloy and J. McGregor, </author> <title> ``A Framework of Classes for Object Oriented Simulation,'' </title> <booktitle> Proceedings of the Twenty-Third Conference on Modeling and Simulation, </booktitle> <address> Pittsburgh, PA, </address> <month> April, </month> <year> 1992. </year>
Reference-contexts: In SIMCAL [6], Pascal is extended to include process oriented simulation facilities like those of Simula. SIMCAL, however, does not provide inheritance nor does it offer the advantages of an object-oriented approach. One object-oriented approach provides a framework of classes for simulation modeling <ref> [7] </ref> that utilizes the coroutine facility included in the task library provided with some compilers [1]. However, the task library is not easily ported to new machines and is currently only included with compilers licensed through AT&T [1, 8].
Reference: 8. <author> B. Stroustrup, </author> <title> ``A set of C++ classes for coroutine style programming,'' </title> <institution> AT&T Bell Laboratories Computing Science Research Center, </institution> <note> vol. CSTR-90, </note> <month> July </month> <year> 1982. </year>
Reference-contexts: One object-oriented approach provides a framework of classes for simulation modeling [7] that utilizes the coroutine facility included in the task library provided with some compilers [1]. However, the task library is not easily ported to new machines and is currently only included with compilers licensed through AT&T <ref> [1, 8] </ref>. Thus, existing techniques that model the behavior of a system using a general-purpose language are inadequate and new techniques are needed.
References-found: 8

