URL: ftp://www.cs.rutgers.edu/pub/technical-reports/lcsr-tr-184.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: 
Title: The complexity of computing maximal word functions  
Author: Eric Allender Danilo Bruschi Giovanni Pighizzini 
Address: New Brunswick, New Jersey  Milano, Italy  Milano, Italy  
Affiliation: Rutgers University  Universita degli Studi  Universita degli Studi  
Abstract: connections with ranking problems, which in turn were first investigated in relation to data compression [GS]. By the "maximal word function" of a language L fl , we mean the problem of finding, on input x, the lexicographically largest word belonging to L that is smaller than or equal to x. In this paper we present a parallel algorithm for computing maximal word functions for languages recognized by one-way nondeterministic auxiliary pushdown automata (and hence for the class of context-free languages). This paper is a continuation of a stream of research focusing on the problem of identifying properties others than membership which are easily computable for certain classes of languages. For a survey, see [He2]. 
Abstract-found: 1
Intro-found: 1
Reference: [AU] <author> A. V. Aho, J.D. Ullman, </author> <title> The Theory of Parsing, Translation and Compiling, Volume I: Parsing, </title> <publisher> Prentice-Hall, </publisher> <year> 1972. </year>
Reference: [Al1] <author> E. Allender, </author> <title> Invertible functions, </title> <type> Ph.D thesis, </type> <institution> Georgia Institute of Technology, </institution> <year> 1985. </year>
Reference: [Al2] <author> E. Allender, </author> <title> "P-Uniform Circuit Complexity," </title> <journal> JACM 36 </journal> <pages> 912-928, </pages> <year> 1989. </year>
Reference-contexts: The following proposition indicates that this is unlikely. 15 Proposition 5.1 There is a 1-NAuxPDA M such that NC is equal to P--uniform NC if and only if the maximal word function for M is computable by logspace-uniform NC circuits. Proof. It was shown in <ref> [Al2] </ref> that there is a tally set T 2 P such that T is in NC if and only if P-uniform NC is equal to NC; and it was also observed there that every tally set in P is accepted by a 1-NAuxPDA.
Reference: [AR] <author> E. Allender and R. Rubinstein, </author> <title> "P-printable sets," </title> <journal> SIAM J 17: </journal> <pages> 1193-1202, </pages> <year> 1988. </year>
Reference-contexts: Also, it is easy to see that if a set L is sparse, then L has a ranking function computable in polynomial time if and only if its maximum word function is feasible; it was noted in <ref> [AR] </ref> that a sparse set has a feasible ranking function if and only if it is P-printable, and any P-printable set clearly has an easy-to-compute maximum word function.
Reference: [AJ1] <author> C. Alvarez and B. Jenner, </author> <title> "Logarithmic space counting classes," </title> <booktitle> Proc. Structure Conference: </booktitle> <pages> 154-168, </pages> <year> 1990. </year>
Reference-contexts: Maximal word functions were considered earlier in <ref> [AJ1] </ref>, where they were used in characterizing the complexity class Opt-L (a subset of NC 2 ). More precisely, in [AJ1] it was proved that the problem of computing the maximal word function for nondeterministic finite automata is complete for the class Opt-L. <p> Maximal word functions were considered earlier in <ref> [AJ1] </ref>, where they were used in characterizing the complexity class Opt-L (a subset of NC 2 ). More precisely, in [AJ1] it was proved that the problem of computing the maximal word function for nondeterministic finite automata is complete for the class Opt-L. <p> Proof. A very slight modification of the circuits Q n constructed above will yield a circuit that will produce the lexicographically minimal element of L =n if L =n 6= ;. It was shown in <ref> [AJ1] </ref> that the class of functions Opt-L is contained in NC 2 . Subsequently, they were able to improve this result to show inclusion in AC 1 [AJ2]. Our main theorem yields this inclusion as a corollary. Corollary 4.2 [AJ2] Opt-L AC 1 Proof. It was shown in [AJ1] that the <p> shown in <ref> [AJ1] </ref> that the class of functions Opt-L is contained in NC 2 . Subsequently, they were able to improve this result to show inclusion in AC 1 [AJ2]. Our main theorem yields this inclusion as a corollary. Corollary 4.2 [AJ2] Opt-L AC 1 Proof. It was shown in [AJ1] that the following problem is complete for Opt-L: take as input a nondeterministic finite automaton M and a string x, and find the largest string w x such that M accepts w. <p> That is, one might wish to make the 1-NAuxPDA M be part of the input (as, for example, the NFA is part of the input to the maximum word problem for NFAs shown to complete for Opt-L in <ref> [AJ1] </ref>). As stated here, the problem is not even in P, because the 1-NAuxPDA M is required only to use space c log n for some c that depends only on M and thus c can be jxj for an input instance M; x.
Reference: [AJ2] <author> C. Alvarez and B. Jenner, </author> <booktitle> Lecture by B. Jenner at Dagstuhl-Seminar on Structure and Complexity Theory, </booktitle> <year> 1992. </year> <month> 17 </month>
Reference-contexts: This yields an improvement of an NC 3 algorithm for the lexicographic constructor function presented in [Hu2]. It also yields as a corollary that Opt-L is contained in AC 1 ; this was proved earlier by Alvarez and Jenner <ref> [AJ2] </ref>. The results of Section 3 indicate that this class of languages cannot be enlarged significantly without encountering languages for which the maximal word function is intractable. In Section 4 we discuss other possible improvements to the results presented here. <p> It was shown in [AJ1] that the class of functions Opt-L is contained in NC 2 . Subsequently, they were able to improve this result to show inclusion in AC 1 <ref> [AJ2] </ref>. Our main theorem yields this inclusion as a corollary. Corollary 4.2 [AJ2] Opt-L AC 1 Proof. <p> It was shown in [AJ1] that the class of functions Opt-L is contained in NC 2 . Subsequently, they were able to improve this result to show inclusion in AC 1 <ref> [AJ2] </ref>. Our main theorem yields this inclusion as a corollary. Corollary 4.2 [AJ2] Opt-L AC 1 Proof. It was shown in [AJ1] that the following problem is complete for Opt-L: take as input a nondeterministic finite automaton M and a string x, and find the largest string w x such that M accepts w.
Reference: [BDG] <author> J. Balcazar, J. Daz and J. Gabarro, </author> <title> Structural Complexity I, </title> <publisher> Springer Verlag, </publisher> <address> New York, </address> <year> 1987. </year>
Reference-contexts: We also discuss relationships between maximum word functions and other related notions that have appeared in the literature. 2 Basic Definitions It is expected that the reader is familiar with basic concepts from formal language theory and complexity theory (see for example [HU], <ref> [BDG] </ref>). In the following we briefly describe the conventions adopted throughout the paper.
Reference: [BIS] <author> D. A. Mix Barrington, N. Immerman, and H. Straubing, </author> <title> "On uniformity within N C 1 ," JCSS 41: </title> <type> 274-306, </type> <year> 1990. </year>
Reference-contexts: Using the characterizations of AC 0 in terms of alternating Turing machines or in terms of first-order logic (as presented, for example in <ref> [BIS] </ref>), it is easy to see that this computation can be carried out inside AC 0 . As pointed out in [Hu1], the language L considered in the proof of Proposition 3.1 can be accepted by a deterministic two-way pushdown automaton. Thus the following corollary is immediate.
Reference: [BBG] <author> A. Bertoni, D. Bruschi and M. Goldwurm, </author> <title> "Ranking and formal power series," </title> <journal> TCS 79: </journal> <pages> 25-35, </pages> <year> 1991. </year>
Reference-contexts: This led for example to the complexity class ]P introduced by Valiant [Va] for dealing with combinatorial enumeration problems. Other examples are given by the notions of ranking and census functions (investigated in [GS], [Hu1],[Al1], <ref> [BBG] </ref> and [BGS] in connection with data compression), and detector, constructor and lexicographic constructor functions considered in [SF], [Hu2].
Reference: [BGS] <author> A. Bertoni, M. Goldwurm and N. Sabadini, </author> <title> "The complexity of computing the number of strings of given length in context free languages," </title> <journal> TCS 86: </journal> <pages> 325-342, </pages> <year> 1991. </year>
Reference-contexts: This led for example to the complexity class ]P introduced by Valiant [Va] for dealing with combinatorial enumeration problems. Other examples are given by the notions of ranking and census functions (investigated in [GS], [Hu1],[Al1], [BBG] and <ref> [BGS] </ref> in connection with data compression), and detector, constructor and lexicographic constructor functions considered in [SF], [Hu2].
Reference: [BCDRT] <author> A. Borodin, S. Cook, P. Dymond, W. Ruzzo, and M. Tompa, </author> <title> "Two applications of inductive counting for complementation problems," </title> <journal> SIAM J 18: </journal> <pages> 559-578, </pages> <year> 1989. </year>
Reference-contexts: We recall that the class of languages accepted by 1-NAuxPDA p s is equal to the class of languages logspace-reducible to context-free languages; for references and recent results relating to this class see <ref> [BCDRT] </ref>. A pushdown automaton (PDA) is a 1-NAuxPDA without the logspace-bounded auxiliary worktape. If the input head of a PDA is allowed to move left also, then it is a 2PDA.
Reference: [CSV] <author> A. Chandra, L. Stockmeyer, and U. Vishkin, </author> <title> "Constant Depth Reducibility," </title> <journal> SIAM J 13: </journal> <pages> 423-439, </pages> <year> 1984. </year>
Reference-contexts: Thus matrix multiplication over this semiring is easier than over the integers; integer matrix multiplication can easily be seen to be constant-depth reducible to integer multiplication (see <ref> [CSV, Co2] </ref>), and thus cannot be done with AC 0 circuits.) It is not difficult to see that circuits Q 1 ; : : : ; Q n have O (n 3 ) nodes and linear degree over R.
Reference: [Co1] <author> S. Cook, </author> <title> "Characterization of pushdown machines in terms of time-bounded computers," </title> <journal> JACM 18: </journal> <pages> 4-18, </pages> <year> 1971. </year>
Reference-contexts: will show how it is possible to efficiently compute the maximal word function for the language accepted by M using these two algorithms. 7 4.1 Phase 1 To define this phase of the algorithm we will make use of the notions of surface configurations and realizable pairs as introduced in <ref> [Co1] </ref>. <p> Using a simple variant of the algorithm presented in <ref> [Co1] </ref> the following theorem can be proved: Theorem 4.1 For every 1-NAuxPDA M , the set n defined above can be computed from input 1 n in time polynomial in n.
Reference: [Co2] <author> S. Cook, </author> <title> "A Taxonomy of Problems which have a Fast Parallel Algorithm," </title> <journal> Inf. and Comp. </journal> <volume> 64: </volume> <pages> 2-22, </pages> <year> 1985. </year>
Reference-contexts: Thus matrix multiplication over this semiring is easier than over the integers; integer matrix multiplication can easily be seen to be constant-depth reducible to integer multiplication (see <ref> [CSV, Co2] </ref>), and thus cannot be done with AC 0 circuits.) It is not difficult to see that circuits Q 1 ; : : : ; Q n have O (n 3 ) nodes and linear degree over R.
Reference: [GS] <author> A. Goldberg and M. Sipser, </author> <title> "Compression and ranking," </title> <booktitle> Proc. 17-th STOC: </booktitle> <pages> 59-68, </pages> <year> 1985. </year>
Reference-contexts: This led for example to the complexity class ]P introduced by Valiant [Va] for dealing with combinatorial enumeration problems. Other examples are given by the notions of ranking and census functions (investigated in <ref> [GS] </ref>, [Hu1],[Al1], [BBG] and [BGS] in connection with data compression), and detector, constructor and lexicographic constructor functions considered in [SF], [Hu2].
Reference: [Go] <author> L. Goldschlager, </author> <title> "*-productions in context-free grammars," </title> <journal> Acta In-formatica 16: </journal> <pages> 303-318, </pages> <year> 1981. </year>
Reference-contexts: Thus we do not get a fast parallel algorithm. This seems to be unavoidable. Recall that the problem of deciding, for a CFG G, if the empty string is in L (G), is complete for P under logspace reductions <ref> [Go] </ref>. Given a CFG G, one can in logspace construct a 1-NAuxPDA M such that L (M ) = f*g if * 2 L (G), and otherwise L (M ) = ;.
Reference: [He1] <author> L. Hemachandra, </author> <title> "On ranking", </title> <booktitle> Proc. Structure Conference: </booktitle> <pages> 103-117, </pages> <year> 1987. </year>
Reference-contexts: N is the set of variables, is the set of terminals, S 2 N the initial symbol and P N fi (N [ ) + the finite set of productions. 1 More precisely, such a definition of ranking function corresponds to the definition of strong ranking function as given in <ref> [He1] </ref>. 3 We briefly recall that a one-way nondeterministic auxiliary pushdown au-tomaton (1-NAuxPDA) is a nondeterministic Turing machine having a one way, end-marked, read-only input tape, a pushdown tape, and one two-way, read/write work tape. (For more formal definitions, see, e.g, [HU].) "Space" on an 1-NAuxPDA means space on the work <p> Conversely, if L has a feasible maximum word function f and is sparse, then the sequence f (1 n ); f (f (1 n )); : : : will produce a list of all elements of L of length at most n, and hence L is P-printable. In <ref> [He1] </ref> Hemachandra introduces two interesting notions of ranking: namely strong-ranking and p-ranking.
Reference: [He2] <author> L. Hemachandra, </author> <title> "Algorithms from complexity theory: polynomial-time operations for complex sets", </title> <booktitle> Proc. SIGAL Conference,Lecture Notes in Computer Science 450: </booktitle> <pages> 221-231, </pages> <year> 1991. </year>
Reference: [HU] <author> J. Hopcroft and J. Ullman, </author> <title> Introduction to automata theory, languages and computations, </title> <publisher> Addison-Wesley, </publisher> <year> 1979. </year>
Reference-contexts: We also discuss relationships between maximum word functions and other related notions that have appeared in the literature. 2 Basic Definitions It is expected that the reader is familiar with basic concepts from formal language theory and complexity theory (see for example <ref> [HU] </ref>, [BDG]). In the following we briefly describe the conventions adopted throughout the paper. <p> the definition of strong ranking function as given in [He1]. 3 We briefly recall that a one-way nondeterministic auxiliary pushdown au-tomaton (1-NAuxPDA) is a nondeterministic Turing machine having a one way, end-marked, read-only input tape, a pushdown tape, and one two-way, read/write work tape. (For more formal definitions, see, e.g, <ref> [HU] </ref>.) "Space" on an 1-NAuxPDA means space on the work tape only (excluding the pushdown). <p> The algorithm we present consists of defining and evaluating an arithmetic circuit over a suitable commutative semiring that will be defined subsequently. The definition of the circuit is based on the well-known Cocke-Kasami Younger recognition algorithm (CYK, for brevity) (see, e.g., <ref> [HU] </ref>). The arithmetic circuit Q n (Q, when n is understood), is defined in the following way.
Reference: [HKP] <author> H. Hoover, M. Klawe and N. Pippenger, </author> <title> "Bounding fan-out in logical networks," </title> <journal> JACM 31: </journal> <pages> 13-18, </pages> <year> 1984. </year>
Reference: [Hu1] <author> D. Huynh, </author> <title> "The complexity of ranking simple languages," </title> <journal> Math. Systems Theory 23 </journal> <pages> 1-20, </pages> <year> 1990. </year> <month> 18 </month>
Reference-contexts: It was observed in <ref> [Hu1] </ref> that L is in co-NTIME (log n). <p> Using the characterizations of AC 0 in terms of alternating Turing machines or in terms of first-order logic (as presented, for example in [BIS]), it is easy to see that this computation can be carried out inside AC 0 . As pointed out in <ref> [Hu1] </ref>, the language L considered in the proof of Proposition 3.1 can be accepted by a deterministic two-way pushdown automaton. Thus the following corollary is immediate.
Reference: [Hu2] <author> D. Huynh, </author> <title> "Efficient detectors and constructors for simple lan-guages," </title> <booktitle> International J. of Foundations of Computer Science 2 </booktitle> <pages> 183-205, </pages> <year> 1991. </year>
Reference-contexts: Other examples are given by the notions of ranking and census functions (investigated in [GS], [Hu1],[Al1], [BBG] and [BGS] in connection with data compression), and detector, constructor and lexicographic constructor functions considered in [SF], <ref> [Hu2] </ref>. This broadening of scope turns out to be useful not only in providing a basis for theoretical investigations of applied problems, but they also help in drawing distinctions among sets that, when considering only membership problems, are computationally equivalent. <p> This yields an improvement of an NC 3 algorithm for the lexicographic constructor function presented in <ref> [Hu2] </ref>. It also yields as a corollary that Opt-L is contained in AC 1 ; this was proved earlier by Alvarez and Jenner [AJ2]. The results of Section 3 indicate that this class of languages cannot be enlarged significantly without encountering languages for which the maximal word function is intractable. <p> It is in logspace-uniform AC 1 for all languages accepted by 1-NAuxPDA running in polynomial time. The following corollary improves an NC 3 algorithm that was presented in <ref> [Hu2] </ref>. Corollary 4.1 For all languages accepted by 1-NAuxPDA (1-NAuxPDA p ) the lexicographic constructor function is computable in P-uniform (logspace-uniform) AC 1 . Proof.
Reference: [JVV] <author> M. Jerrum, G. Valiant and V. Vazirani, </author> <title> "Random generation of combinatorial structures from a uniform distribution," </title> <journal> TCS 43: </journal> <pages> 169-188, </pages> <year> 1986. </year>
Reference: [KR] <author> R. Karp and V. Ramachandran, </author> <title> "A survey of parallel algorithms for shared-memory machines," </title> <booktitle> in Handbook of Theoretical Computer Science, </booktitle> <volume> vol. I, </volume> <publisher> North Holland, </publisher> <year> 1990. </year>
Reference-contexts: Proof. )) It can be easily shown that the maximal word function for each language in P is in Opt-P. However, if P=NP, then Theorem 2.1 of <ref> [Kr] </ref> shows that all Opt-P functions are computable in polynomial time. () Let M be a machine accepting some NP-complete set, running in time p (n), and let L be the set of all valid accepting computations of M encoded as strings of the form x]! 0 ]! 1 : :
Reference: [Kr] <author> M. Krentel, </author> <title> "The complexity of optimization problems," </title> <journal> JCSS 36: </journal> <pages> 490-509, </pages> <year> 1988. </year>
Reference-contexts: Proof. )) It can be easily shown that the maximal word function for each language in P is in Opt-P. However, if P=NP, then Theorem 2.1 of <ref> [Kr] </ref> shows that all Opt-P functions are computable in polynomial time. () Let M be a machine accepting some NP-complete set, running in time p (n), and let L be the set of all valid accepting computations of M encoded as strings of the form x]! 0 ]! 1 : :
Reference: [MRK] <author> G.L. Miller, V. Ramachandran, E. Kaltofen, </author> <title> "Efficient Parallel Evaluation of Straight-Line Code and Arithmetic Circuits," </title> <journal> SIAM J 17: </journal> <pages> 687-695, </pages> <year> 1988. </year>
Reference-contexts: The computation of Q 1 ; : : : ; Q n (steps 1,2,3) depends only on n = jxj, and can be done uniformly. The most expensive step is 1, whose complexity was given in Theorem 4.1. We now wish to apply Theorem 5.3 of <ref> [MRK] </ref>, showing how to evaluate the circuits Q 1 ; : : : ; Q n efficiently in parallel. However, in order to apply those results, we have to define a suitable commutative semiring representing the set fl [ f?g with operations M AX and CON CAT . <p> Thus we can make use of the algorithm of <ref> [MRK] </ref> for evaluation of these circuits. The algorithm presented in [MRK] consists of O (log n) applications of a routine called Phase, where a single application of Phase consists of nothing more complicated than matrix multiplication over the semiring R. <p> Thus we can make use of the algorithm of <ref> [MRK] </ref> for evaluation of these circuits. The algorithm presented in [MRK] consists of O (log n) applications of a routine called Phase, where a single application of Phase consists of nothing more complicated than matrix multiplication over the semiring R. <p> Since we have observed above that, for the particular choice of R we are using, matrix multiplication can be done in constant depth, it follows that the algorithm of <ref> [MRK] </ref> can be implemented in logarithmic depth with unbounded fan-in AND and OR circuits.
Reference: [SF] <author> L. Sanchis and M. Fulk, </author> <title> "On the efficient generation of languages instances," </title> <journal> SIAM J 19(2): </journal> <pages> 281-295, </pages> <year> 1990. </year>
Reference-contexts: Other examples are given by the notions of ranking and census functions (investigated in [GS], [Hu1],[Al1], [BBG] and [BGS] in connection with data compression), and detector, constructor and lexicographic constructor functions considered in <ref> [SF] </ref>, [Hu2]. This broadening of scope turns out to be useful not only in providing a basis for theoretical investigations of applied problems, but they also help in drawing distinctions among sets that, when considering only membership problems, are computationally equivalent.
Reference: [Va] <author> L. Valiant, </author> <title> "The complexity of enumeration and reliability problems," </title> <journal> SIAM J 8: </journal> <pages> 410-412, </pages> <year> 1979. </year>
Reference-contexts: This led for example to the complexity class ]P introduced by Valiant <ref> [Va] </ref> for dealing with combinatorial enumeration problems. Other examples are given by the notions of ranking and census functions (investigated in [GS], [Hu1],[Al1], [BBG] and [BGS] in connection with data compression), and detector, constructor and lexicographic constructor functions considered in [SF], [Hu2].
Reference: [Ve] <author> H. Venkateswaran, </author> <title> "Properties that characterize LOGCFL," </title> <journal> JCSS 42: </journal> <pages> 380-404, </pages> <year> 1991. </year>
Reference-contexts: M runs in polynomial time can be seen to follow from the fact that the set f1 n ; ff : ff 2 n g can easily be recognized by a 1-NAuxPDA p , and the class of languages accepted by 1-NAuxPDA p s is a subclass of AC 1 <ref> [Ve] </ref>.) Now we will show how to construct a context-free grammar G n = ( = f0; 1g; V n ; P n ; S n ) generating exactly the strings of length n accepted by M , using M 's surface configurations and the set n .
References-found: 29

