URL: ftp://ftp.cs.washington.edu/homes/chambers/cascon95.ps.Z
Refering-URL: http://www.cs.washington.edu/research/projects/cecil/www/Papers/cascon95.html
Root-URL: 
Title: The Impact of Interprocedural Class Analysis on Optimization  
Author: David Grove 
Affiliation: Department of Computer Science and Engineering University of Washington  
Note: Published in CASCOM95  
Abstract: The runtime performance of object-oriented languages often suffers due to the overhead of dynamic dispatching. In order to make these languages competitive with traditional languages, optimizing compilers attempt to eliminate as many of the dynamic dispatches as possible. A variety of local and intraprocedural techniques have been developed to do this, but they can be ineffective when they are unable to statically bind and inline a message send. To enable better analysis across non-inlined message sends, interprocedural analysis is required. In this paper we describe a simple algorithm for interprocedural class analysis and empirically evaluate its effectiveness as a tool for program optimization. We demonstrate that interprocedural class analysis can substantially decrease application execution times when compared to applications optimized with only intraprocedural techniques. * 
Abstract-found: 1
Intro-found: 1
Reference: [Agesen & Hlzle 95] <author> Ole Agesen and Urs Hlzle. </author> <title> Type Feedback vs. Concrete Type Analysis: </title>
Reference-contexts: Agesen and Hlzle compare the effectiveness of interprocedural class analysis and profile-guided receiver class prediction for the optimization of Self programs, but do not report on the impact of combining the two techniques <ref> [Agesen & Hlzle 95] </ref>. 6 Conclusions We have presented a simple algorithm for interprocedural class analysis and have empirically evaluated its impact on compile time and the execution time of optimized code.
References-found: 1

