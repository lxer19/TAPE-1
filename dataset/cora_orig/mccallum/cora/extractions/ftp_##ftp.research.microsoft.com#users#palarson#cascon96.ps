URL: ftp://ftp.research.microsoft.com/users/palarson/cascon96.ps
Refering-URL: http://www.research.microsoft.com/~palarson/publications.htm
Root-URL: http://www.research.microsoft.com
Email: fw2zhang, palarsong@bluebox.uwaterloo.ca  
Title: A Memory-Adaptive Sort (MASORT) for Database Systems  
Author: Weiye Zhang and Per -Ake Larson 
Address: Waterloo, Ontario, Canada N2L 3G1  
Affiliation: Department of Computer Science University of Waterloo  
Abstract: A memory-adaptive sort is able to dynamically change the amount of memory used during sorting. The method described in this paper adjusts memory usage according to input size and memory requirements of other sorts running in a database system. It saves memory space for small sorts, reduces sort time for large sorts, and balances memory usage among concurrent sorts. Overall system performance is improved when several sorts are running concurrently. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Diane L. Davison and Goetz Graefe. </author> <title> Memory-contention responsive hash joins. </title> <booktitle> In Proc. of Int. Conf. on Very Large Data Bases, </booktitle> <pages> pages 379-390, </pages> <year> 1994. </year>
Reference-contexts: Then a memory adjustment mechanism can be added into the algorithm quite easily. The idea of memory-adjustment in MA-SORT can also be applied to other memory intensive algorithms, such as join. [6] and <ref> [1] </ref> have studied memory-adaptive joins. Unlike MASORT, they did not take into account the memory requirement of a join in its different stages and the cooperation between concurrent joins.
Reference: [2] <author> Goetz Graefe. </author> <title> Query evaluation techniques for large databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 25(2) </volume> <pages> 73-170, </pages> <month> Jun </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Sorting is a time consuming and frequently used operation in database systems. It is used not only for producing sorted output, but also in many sort-based algorithms for query processing, such as merge-join, grouping, and duplicate elimination <ref> [2] </ref>. Sorting is both memory intensive and CPU intensive. The amount of available memory may affect sort time dramatically. In a database system the free memory space available to the system changes continuously. A large sort may experience fluctuations of available memory space during the sort period.
Reference: [3] <author> Donald E. Knuth. </author> <title> Sorting and Searching, </title> <booktitle> volume 3 of The Art of Computer Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, Mas-sachusetts, </address> <note> second edition, </note> <year> 1973. </year>
Reference-contexts: [check/adjust memory] go to the in-memory sort phase External merge phase: if there are multiple runs in tmp table [check/adjust memory] merge them to produce the final results for multiple pass merge, [check/adjust memory] before each merge The data in the buffers can be sorted using any internal sorting algorithm <ref> [3] </ref>. Therefore, many sort algorithms can be modified to produce memory-adaptive versions. 3.2 Memory adjustment mecha nism 3.2.1 In-memory sort phase During this phase, the sort process collects data into buffers and sorts each buffer using some in-memory sort algorithm.
Reference: [4] <author> Chris Nyberg, Tom Barclay, Zarka Cve-tanovic, J. Gray, and Dave Lomet. Alpha-sort: </author> <title> A risc machine sort. </title> <booktitle> In Proc. of the 1994 ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 233-242, </pages> <year> 1994. </year>
Reference-contexts: MASORT makes use of the memory more efficiently by changing memory usage dynamically. Although MASORT is implemented based on the DB2 sort, all the ideas are applicable to other sorts. For example, AlphaSort <ref> [4] </ref> uses quicksort to sort each small buffer and then does an in-memory merge. If AlphaSort also considers data larger than available memory, an external merge phase should be added into the algorithm. Then a memory adjustment mechanism can be added into the algorithm quite easily.
Reference: [5] <author> HweeHwa Pang, Michael J. Carey, and Miron Livny. </author> <title> Memory-adaptive external sorting. </title> <booktitle> In Proc. of Int. Conf. on Very Large Data Bases, </booktitle> <pages> pages 618-629, </pages> <year> 1993. </year>
Reference-contexts: If the sort does not change its memory usage dynamically, space will be wasted when the actual input size is much smaller than estimated; or the sort is unnecessarily slow when the actual input is larger than estimated. <ref> [5] </ref> first studied memory adjustment for sorting. They proposed a set of memory-adjustment strategies for external mergesort. For the run formation phase, they compared quicksort and replacement selection. For the merge phase, they focused on multi-pass merge and studied memory adjustment policies that change merge patterns between merge passes. <p> By dynamically changing memory usage, the available memory is used more efficiently, thereby improving the overall performance (system throughput, average response time). When the input size is unknown or poorly estimated, MASORT can also improve system performance even if there are no memory fluctuations. Unlike the method proposed by <ref> [5] </ref>, MA-SORT sorts small buffers and does an in-memory merge during run formation. This makes it easier to adjust the amount of memory than when using a single quicksort or replace ment selection.
Reference: [6] <author> Hansjorg Zeller and Jim Gray. </author> <title> An adaptive hash join algorithm for multiuser environments. </title> <booktitle> In Proc. of Int. Conf. on Very Large Data Bases, </booktitle> <pages> pages 186-197, </pages> <year> 1990. </year>
Reference-contexts: Then a memory adjustment mechanism can be added into the algorithm quite easily. The idea of memory-adjustment in MA-SORT can also be applied to other memory intensive algorithms, such as join. <ref> [6] </ref> and [1] have studied memory-adaptive joins. Unlike MASORT, they did not take into account the memory requirement of a join in its different stages and the cooperation between concurrent joins.
References-found: 6

