URL: ftp://ftp.research.microsoft.com/users/viveknar/vldb97.ps
Refering-URL: http://www.research.microsoft.com/~surajitc/
Root-URL: http://www.research.microsoft.com
Email: -surajitc, viveknar-@microsoft.com  
Title: 146 An Efficient, Cost-Driven Index Selection Tool for Microsoft SQL Server  
Author: Surajit Chaudhuri Vivek Narasayya 
Address: One Microsoft Way, Redmond, WA, 98052.  
Affiliation: Microsoft Research,  
Abstract: In this paper we describe novel techniques that make it possible to build an industrialstrength tool for automating the choice of indexes in the physical design of a SQL database. The tool takes as input a workload of SQL queries, and suggests a set of suitable indexes. We ensure that the indexes chosen are effective in reducing the cost of the workload by keeping the index selection tool and the query optimizer "in step". The number of index sets that must be evaluated to find the optimal configuration is very large. We reduce the complexity of this problem using three techniques. First, we remove a large number of spurious indexes from consideration by taking into account both query syntax and cost information. Second, we introduce optimizations that make it possible to cheaply evaluate the goodness of an index set. Third, we describe an iterative approach to handle the complexity arising from multi-column indexes. The tool has been implemented on Microsoft SQL Server 7.0. We performed extensive experiments over a range of workloads, including TPC-D. The results indicate that the tool is efficient and its choices are close to optimal. 
Abstract-found: 1
Intro-found: 1
Reference: [CBC] <author> Choenni S., Blanken H. M., Chang T., </author> <booktitle> On the Automation of Physical Database Design , Proc. of ACM-SAC, </booktitle> <year> 1993. </year>
Reference-contexts: The framework by Rozen and Shasha [RS91] suggests generation of a set of candidate configurations for each query based on a knowledge-based approach. The set of configurations explored is the union of only those configurations. This idea has been further pursued by <ref> [CBC, CBC93] </ref> who propose a rule-based framework. The knowledge-based approach has also been taken in the commercial product RdbExpert [HE 91]. Our approach to candidate index selection (Section 4) is distinct from these approaches. <p> First, a cost function to characterize the goodness of a configuration is needed. In our approach and in [FST88], optimizer-cost driven estimates are used. An approximate standalone cost model is used in <ref> [HC76, CBC] </ref>. Next, an efficient search technique that does not compromise the quality of the solution is needed. Several greedy-like search algorithms have been proposed in the past. More recently, several variants of greedy algorithms have also been recommended in the context of the materialized view and index selection problem.
Reference: [CBC93] <author> Choenni S., Blanken H. M., Chang T., </author> <title> Index Selection in Relational Databases, </title> <booktitle> Proc. of 5 th IEEE ICCI 1993. </booktitle>
Reference-contexts: The framework by Rozen and Shasha [RS91] suggests generation of a set of candidate configurations for each query based on a knowledge-based approach. The set of configurations explored is the union of only those configurations. This idea has been further pursued by <ref> [CBC, CBC93] </ref> who propose a rule-based framework. The knowledge-based approach has also been taken in the commercial product RdbExpert [HE 91]. Our approach to candidate index selection (Section 4) is distinct from these approaches.
Reference: [CG93] <author> Peter C., Gurry M., </author> <title> ORACLE Performance Tuning, </title> <publisher> OReilly & Associates, Inc. </publisher> <year> 1993. </year>
Reference-contexts: Despite a long history of work in this area, there are few research prototypes and commercial products that are widely deployed. Three basic approaches have been taken to the index selection problem. The textbook solutions <ref> [CG93] </ref> take semantic information such as uniqueness, reference constraints and rudimentary statistics (small vs. big tables) and produce a database design. Such designs may perform poorly because they ignore valuable workload information.
Reference: [CN97] <author> Chaudhuri S., Narasayya V., </author> <title> Physical Database Design Assistant and Wizard for SQL Server, </title> <note> Microsoft Research Technical report, in preparation, </note> <year> 1997 </year>
Reference-contexts: Only indexes chosen in the first phase are considered in the second phase but no restrictions on atomic configurations are imposed during this phase. Due to space constraints, we dont discuss experimental results of this two-tier search strategy <ref> [CN97] </ref>. Example 2. Single-join Atomic Configurations Consider a SELECT query with conditions T 1 .A &lt; 20, T 1 .A = T 2 .B, T 3 .C BETWEEN [30,50], T 3 .C = T 2 .B. <p> Therefore, for the algorithm to perform well, choosing an appropriate value of x is important. Due to space constraints, we are unable to provide details on how to choose x; we defer this discussion and the experimental results to <ref> [CN97] </ref>. 3.3 Reducing the Cost of Evaluating Atomic Configurations When evaluating an atomic configuration, substantial savings are possible in the number of optimizer calls by the following optimization. <p> The indexable columns of Q 2 are Similar arguments apply for Insert/Delete queries. Details are available in <ref> [CN97] </ref>. Atomic Configurations. 1. n = 2; A = -atomic configurations of size &lt;= 2-. 2. A=; Evaluate all configurations in A. 3. For each configuration C in A, determine if the indexes in C interact strongly. <p> In such a case, the enumeration exhibits near greedy behavior. The value of m relative to k reflects the desired degree of completeness of enumeration. The issue of heuristically determining an appropriate value of m depending on the index interactions among queries in the workload is discussed in <ref> [CN97] </ref>. This measure can also be adjusted by the user of the tool explicitly to vary the nature of enumeration from quick and heuristic to exhaustive. Despite the fact that a greedy algorithm can be in principle arbitrarily bad for configuration enumeration [CN97], our experimental results seem to indicate that a <p> among queries in the workload is discussed in <ref> [CN97] </ref>. This measure can also be adjusted by the user of the tool explicitly to vary the nature of enumeration from quick and heuristic to exhaustive. Despite the fact that a greedy algorithm can be in principle arbitrarily bad for configuration enumeration [CN97], our experimental results seem to indicate that a relatively low value of m produces near-optimal results. <p> Subsequently, configurations are enumerated exhaustively with the constraint that the cost of each partial configuration 4 must be within a certain factor of the cost of the corresponding partial configuration of the first-cut (greedy) solution. This algorithm is explained in more details and compared with Greedy (m, k) in <ref> [CN97] </ref> 6. Multi-Column Index Generation Index selection tools of the past have failed to take into account the complexity arising from the inclusion of For a configuration consisting of a set S of indexes, all subsets of S are its partial configurations multi-column indexes. <p> In such cases, while considering M (a, b) above, b need not be an indexable column, but may be part of a projection list in the workload that is strongly correlated with the column a. These details are presented in <ref> [CN97] </ref>. 7. Implementation and Experiments 7.1 Implementation We have implemented our index selection tool for Microsoft SQL Server 7.0. The tool takes as input a workload of SQL DML statements (generated using the SQLTrace utility), and generates a set of indexes as output. <p> The tool must be run with administrator privileges since it needs to update system catalogs. The index selection tool is accompanied by a design assistant tool which can be used to analyze the current design using cost based techniques similar to those used by the index selection tool <ref> [CN97] </ref>. 7.2 Experimental Setup We have tested our tool on several schemas and workloads including synthetically generated schemas and workloads. Due to space constraints, we report results of our experiments on five representative workloads of the TPC-D schema only. Table 1 summarizes relevant characteristics of the workloads.
Reference: [FON92] <author> Frank M., Omiecinski E., Navathe S., </author> <title> Adaptive and Automative Index Selection in RDBMS, </title> <booktitle> Proc. of EDBT 92. </booktitle>
Reference-contexts: The problem of identifying a set of possible indexes has been looked at from two angles. Syntactic analysis of the workload is used to identify potentially useful indexes. This is the approach taken in [FST88, HC76]. In <ref> [FON92] </ref>, an alternative approach is to generate the set of all configurations for each query that may be potentially used by the optimizer and then choose among the union of all such configurations over the queries in the workload. This technique is not scalable for large workloads.
Reference: [FST88] <author> Finkelstein S, Schkolnick M, </author> <title> Tiberio P.Physical Database Design for Relational Databases, </title> <journal> ACM TODS, </journal> <month> Mar </month> <year> 1988. </year>
Reference-contexts: In the third approach, the index selection tool uses the optimizers cost estimates to compare goodness of alternative hypothetical designs. This approach avoids asynchrony between the index selection tool and the query optimizer. This is the approach we have adopted (also adopted in <ref> [FST88] </ref>). 1.1 Our Contributions The AutoAdmin index selection tool that we describe in this paper is significant in several ways. First, we have recognized that index selection is more than just a difficult search problem. <p> The problem of identifying a set of possible indexes has been looked at from two angles. Syntactic analysis of the workload is used to identify potentially useful indexes. This is the approach taken in <ref> [FST88, HC76] </ref>. In [FON92], an alternative approach is to generate the set of all configurations for each query that may be potentially used by the optimizer and then choose among the union of all such configurations over the queries in the workload. This technique is not scalable for large workloads. <p> First, a cost function to characterize the goodness of a configuration is needed. In our approach and in <ref> [FST88] </ref>, optimizer-cost driven estimates are used. An approximate standalone cost model is used in [HC76, CBC]. Next, an efficient search technique that does not compromise the quality of the solution is needed. Several greedy-like search algorithms have been proposed in the past.
Reference: [GHRU97] <author> Gupta H., Harinarayan V., Rajaramana A., Ullman J.D., </author> <title> Index Selection for OLAP, </title> <booktitle> Proc. of ICDE97. </booktitle>
Reference-contexts: Several greedy-like search algorithms have been proposed in the past. More recently, several variants of greedy algorithms have also been recommended in the context of the materialized view and index selection problem. In particular, <ref> [HRU96, GHRU97] </ref> show bounds on the deviation of the greedy from the optimal. However, their results assume monotonicity, i.e., inclusion of one index does not have any impact on the effectiveness of another.
Reference: [HC76] <author> Hammer M., Chan A., </author> <title> Index Selection in a Self-Adaptive Data Base Management System, </title> <booktitle> Proc. of SIGMOD 76. </booktitle>
Reference-contexts: The problem of identifying a set of possible indexes has been looked at from two angles. Syntactic analysis of the workload is used to identify potentially useful indexes. This is the approach taken in <ref> [FST88, HC76] </ref>. In [FON92], an alternative approach is to generate the set of all configurations for each query that may be potentially used by the optimizer and then choose among the union of all such configurations over the queries in the workload. This technique is not scalable for large workloads. <p> First, a cost function to characterize the goodness of a configuration is needed. In our approach and in [FST88], optimizer-cost driven estimates are used. An approximate standalone cost model is used in <ref> [HC76, CBC] </ref>. Next, an efficient search technique that does not compromise the quality of the solution is needed. Several greedy-like search algorithms have been proposed in the past. More recently, several variants of greedy algorithms have also been recommended in the context of the materialized view and index selection problem.
Reference: [HE91] <author> Hobbs L., England K., </author> <title> Rdb/VMS A Comprehensive Guide, </title> <publisher> Digital Press, </publisher> <year> 1991. </year>
Reference-contexts: The second class of tools adopt an expert system like approach, where the knowledge of good designs are encoded as rules and are used to come up with a design. Such tools can take into account workload information but suffer from being disconnected from the query optimizer <ref> [HE91] </ref>. This has adverse ramifications for two reasons. First, a selection of indexes is only as good as the optimizer that uses it. In other words, if the optimizer does not consider a particular index for a query, then its presence in the database does not benefit that query.
Reference: [RSS96] <author> Ross K. A., Srivastava D., Sudarshan S., </author> <title> Materialized View Maintenance and Integrity Constraint Checking: Trading Space for Time, </title> <booktitle> Proc. of SIGMOD 96. </booktitle>
Reference: [HRU96] <author> Harinarayan V., Rajaramana A., Ullman J.D., </author> <title> Implementing Data Cubes Efficiently, </title> <booktitle> Proc. of SIGMOD 96. </booktitle>
Reference-contexts: Several greedy-like search algorithms have been proposed in the past. More recently, several variants of greedy algorithms have also been recommended in the context of the materialized view and index selection problem. In particular, <ref> [HRU96, GHRU97] </ref> show bounds on the deviation of the greedy from the optimal. However, their results assume monotonicity, i.e., inclusion of one index does not have any impact on the effectiveness of another.
Reference: [LQA97] <author> Labio W.J., Quass D., Adelberg B., </author> <title> Physical Database Design for Data Warehouses, </title> <booktitle> Proc. of ICDE97. </booktitle>
Reference: [RS91] <author> Rozen S., Shasha D. </author> <title> A Framework for Automating Physical Database Design, </title> <booktitle> Proc. of VLDB 1991. </booktitle>
Reference-contexts: This technique is not scalable for large workloads. The framework by Rozen and Shasha <ref> [RS91] </ref> suggests generation of a set of candidate configurations for each query based on a knowledge-based approach. The set of configurations explored is the union of only those configurations. This idea has been further pursued by [CBC, CBC93] who propose a rule-based framework.
References-found: 13

