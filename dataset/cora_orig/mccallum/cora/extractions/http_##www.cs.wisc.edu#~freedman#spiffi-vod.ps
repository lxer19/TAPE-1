URL: http://www.cs.wisc.edu/~freedman/spiffi-vod.ps
Refering-URL: http://www.cs.wisc.edu/shore/shore.papers.html
Root-URL: 
Email: ffreedman,dewittg@cs.wisc.edu  
Title: The SPIFFI Scalable Video-on-Demand System  
Author: Craig S. Freedman David J. DeWitt 
Address: Madison, WI 53706  
Affiliation: Computer Sciences Department University of Wisconsin  
Abstract: This paper presents a simulation study of a video-on-demand system. We present video server algorithms for real-time disk scheduling, prefetching, and buffer pool management. The performance of these algorithms is compared against the performance of simpler algorithms such as elevator and round-robin disk scheduling and global LRU buffer pool management. We show that the SPIFFI video-on-demand system scales nearly linearly as the number of disks, videos, and terminals is increased. Finally, techniques for further improving the performance of a video server are presented and evaluated.
Abstract-found: 1
Intro-found: 1
Reference: [Ande91] <author> D. P. Anderson and G. Homsy, </author> <title> A Continuous Media I/O Server and Its Synchronization Mechanism, </title> <journal> IEEE Computer, </journal> <volume> vol. 24, no. 10, </volume> <pages> pp. 51-57, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: However, they only compare elevator and FCFS algorithms. FCFS is naive, does not optimize seek times, and does not process requests in any real-time order. <ref> [Ande91] </ref> describes the overall design of a multimedia server, ACME, and presents a mechanism for synchronizing several media streams (e.g., audio and video). If a stream becomes out-of-sync, it is resynchronized either by pausing it or by skipping data.
Reference: [Ande92] <author> D. P. Anderson, Y. Osawa, and R. Govindan, </author> <title> A File System for Continuous Media, </title> <journal> ACM Transactions on Computing Systems, </journal> <volume> vol. 10, no. 4, </volume> <pages> pp. 311-337, </pages> <month> November </month> <year> 1992. </year> <month> 23 </month>
Reference-contexts: If a stream becomes out-of-sync, it is resynchronized either by pausing it or by skipping data. Other multimedia and continuous media systems include the Continuous Media File System (CMFS) <ref> [Ande92] </ref>, the Continuous Media Storage Server (CMSS) [Loug92], and the IBM Shark Continuous Media File Server [Hask93]. CMFS and CMSS are based on analytical designs. Some limited simulation results on CMFS performance are included in [Ande92]. <p> Other multimedia and continuous media systems include the Continuous Media File System (CMFS) <ref> [Ande92] </ref>, the Continuous Media Storage Server (CMSS) [Loug92], and the IBM Shark Continuous Media File Server [Hask93]. CMFS and CMSS are based on analytical designs. Some limited simulation results on CMFS performance are included in [Ande92].
Reference: [Bers94] <author> S. Berson, S. Ghandeharizadeh, R. Muntz, and X. Ju, </author> <title> Staggered Striping in Multimedia Information Systems, </title> <booktitle> Proceedings of the 1994 International Conference on the Management of Data, </booktitle> <pages> pp. 79-90, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Furthermore, this system suffers from the drawback that it cannot quickly adapt to changes in the movie access patterns. 3 <ref> [Bers94] </ref> introduces a file layout technique called staggered striping that is suitable for the storage of high-bandwidth video objects such as medical or scientific data. As mentioned above, these data must not be compressed using lossy compression algorithms.
Reference: [Care89] <author> M. J. Carey, R. Jauhari, and M. Livny, </author> <title> Priority in DBMS Resource Scheduling, </title> <booktitle> Proceedings of the Fifteenth International Conference on Very Large Data Bases, </booktitle> <pages> pp. 397-410, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: This algorithm is popular because it combines nearly minimal seek times and fairness. 8 The real-time disk scheduling algorithm is an extension of an existing priority disk scheduling algorithm which is itself an extension of the elevator algorithm <ref> [Care89] </ref>. First, terminals assign each disk access a deadline by which it must be completed to avoid a glitch. This deadline is used to assign each pending disk access to one of a fixed set of priority classes. There are many ways to map deadlines into priorities.
Reference: [Chan94] <author> E. Chang and A. Zakhor, </author> <title> Scalable Video Data Placement on Parallel Disk Arrays, </title> <booktitle> Proceedings of Storage and Retrieval for Image and Video Databases II, </booktitle> <pages> pp. 208-221, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: CMFS and CMSS are based on analytical designs. Some limited simulation results on CMFS performance are included in [Ande92]. There is no performance information on CMSS. [Hask93] includes some limited performance data on the Shark implementation. <ref> [Chan94] </ref> compares various strategies for allocating video data on disk arrays such that the video can be efficiently retrieved at differing quality levels. [Chen93] uses an analytical study to develop a disk layout strategy for multiple related multimedia streams such as video, audio, and text (e.g., closed captioning). [Tetz94] uses an
Reference: [Chen93] <author> H.-J. Chen and T.D.C. Little, </author> <title> Physical Storage Organizations for Time-Dependent Multimedia Data, </title> <booktitle> Pro ceedings of the Fourth International Conference on the Foundations of Data Organizations and Algorithms, </booktitle> <pages> pp. 19-34, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: There is no performance information on CMSS. [Hask93] includes some limited performance data on the Shark implementation. [Chan94] compares various strategies for allocating video data on disk arrays such that the video can be efficiently retrieved at differing quality levels. <ref> [Chen93] </ref> uses an analytical study to develop a disk layout strategy for multiple related multimedia streams such as video, audio, and text (e.g., closed captioning). [Tetz94] uses an analytical study to discuss the effects of various parameters and technology trends on a video-on-demand system. 4 4 Our Work This paper simulates
Reference: [Fede94] <author> C. Federighi and L. A. Rowe, </author> <title> A Distributed Hierarchical Storage Manager for a Video-on-Demand System, </title> <booktitle> Proceedings of Storage and Retrieval for Image and Video Databases II, </booktitle> <pages> pp. 185-197, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: As will be shown in Section 7, striping videos alleviates this problem and drastically improves the overall utilization of the disks. Rowe <ref> [Fede94, Rowe92] </ref> is in the process of building a comprehensive video-on-demand system including a video file server, a continuous media player, and a large library of digitized videos.
Reference: [Free94] <author> C. S. Freedman, J. Burger, and D. J. DeWitt, </author> <title> SPIFFI A Scalable Parallel File System for the Intel Paragon, </title> <note> submitted to Transactions on Parallel and Distributed Systems, available on the WWW URL: http://www.cs.wisc.edu/freedman/spiffi.ps. </note>
Reference-contexts: This strategy increases the duration of the glitch but reduces the likelihood of a second glitch occuring immediately after the first. 5.2 The Video Server The video server software is based on SPIFFI, a high-performance, scalable parallel file system that we developed for and implemented on an Intel Paragon <ref> [Free94] </ref>. SPIFFI provides much of the necessary I/O functionality needed 6 to build a video server. Some of the features that were particularly important were file striping, decentralized file accesses, and buffering and prefetching. SPIFFI automatically stripes files across all the disks in the video server [Ries78]. <p> of time between a prefetch's deadline and when it may be issued is referred to as the maximum advance prefetch time. 10 6 Simulator Description Our video-on-demand simulator is based on an existing SPIFFI simulator that was validated against an actual SPIFFI implementation on a 64 node/64 disk Intel Paragon <ref> [Free94] </ref>. The event-driven simulator is written in the CSIM/C++ process-oriented simulation language [Schw90]. We are primarily interested in the performance of the system when all the terminals are actively viewing movies. Furthermore, in a real system videos will be started at random intervals.
Reference: [Gall91] <author> D. Le Gall, </author> <title> MPEG: A Video Compression Standard for Multimedia Applications, </title> <journal> Communications of the ACM, </journal> <volume> vol. 34, no. 4, </volume> <pages> pp. 47-58, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: HDTV videos will require even more bandwidth and storage. Thus, most multimedia and video-on-demand systems will have to use some form of data compression to be both feasible and cost-effective. This study assumes that all movies are compressed using the MPEG video compression standard <ref> [Gall91] </ref>. MPEG uses a lossy compression algorithm. In other words, a decompressed MPEG video stream will not be identical to the original video before compression. <p> Although it is high, the video server is still completely I/O bound. 11 For this study, the I:P:B frame frequency ratio was 1:4:10 and the I:P:B frame size ratio was 10:5:2 with an overall frame rate of 4 Mbits/second (NTSC broadcast quality) <ref> [Gall91] </ref>. The specific sizes of frames of the same type can and do vary depending on the contents of the uncompressed frames. An analysis of several MPEG videos showed that frame sizes typically are exponentially distributed.
Reference: [Gray93] <author> J. Gray, </author> <title> Transaction Processing: Concepts and Techniques, </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference-contexts: Finally, disk utilization remains above 95% as the system is scaled. As part of this study, we considered the disk-memory tradeoff and attempted to find a video server analogy to Gray's five minute rule for database systems <ref> [Gray93] </ref>. This rule states that database systems can achieve optimal price-performance by keeping those objects in memory which are accessed at least once every five minutes.
Reference: [Hari94] <author> J. R. Haritsa and M. B. Karthikeyan, </author> <title> Disk Scheduling for Multimedia Database Applications, </title> <address> COMAD '94. </address>
Reference-contexts: The intent of this algorithm is to minimize both the disk access time and the amount of buffer space. Section 7 of this paper includes results using GSS. <ref> [Hari94] </ref> presents an the results of an analytical and simulation study comparing the memory requirements of disk scheduling algorithms. However, they only compare elevator and FCFS algorithms.
Reference: [Hask93] <author> R. L. Haskin, </author> <title> The Shark Continuous-Media File Server, </title> <booktitle> Proceedings of the IEEE Computer Conference Spring '93, </booktitle> <pages> pp. 12-15, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: If a stream becomes out-of-sync, it is resynchronized either by pausing it or by skipping data. Other multimedia and continuous media systems include the Continuous Media File System (CMFS) [Ande92], the Continuous Media Storage Server (CMSS) [Loug92], and the IBM Shark Continuous Media File Server <ref> [Hask93] </ref>. CMFS and CMSS are based on analytical designs. Some limited simulation results on CMFS performance are included in [Ande92]. There is no performance information on CMSS. [Hask93] includes some limited performance data on the Shark implementation. [Chan94] compares various strategies for allocating video data on disk arrays such that the <p> include the Continuous Media File System (CMFS) [Ande92], the Continuous Media Storage Server (CMSS) [Loug92], and the IBM Shark Continuous Media File Server <ref> [Hask93] </ref>. CMFS and CMSS are based on analytical designs. Some limited simulation results on CMFS performance are included in [Ande92]. There is no performance information on CMSS. [Hask93] includes some limited performance data on the Shark implementation. [Chan94] compares various strategies for allocating video data on disk arrays such that the video can be efficiently retrieved at differing quality levels. [Chen93] uses an analytical study to develop a disk layout strategy for multiple related multimedia streams such as
Reference: [Hsie94] <author> J. Hsieh, M. Lin, C. L. Liu, D. H. C. Du, and T. M. Ruwart, </author> <title> Performance of a Mass Storage System for Video-on-Demand, </title> <note> submitted to Journal of Parallel and Distributed Computing. </note>
Reference-contexts: As a result, it is not surprising that the CScan algorithm outperformed the others for real-time I/Os. Finally, this study does not consider a complete system including processors, network, and video terminals and does not address disk layout strategies such as striping. <ref> [Hsie94] </ref> studies the performance of an actual video server consisting of a Silicon Graphics Onyx computer system with 12 to 20 processors, up to 8 RAID level 3 disk systems (each with 8 data disks and 1 parity disk), up to 23 simulated RAIDs (for a total of 279 real and
Reference: [Laur94] <author> A. Laursen, J. Olkin, and M. Porter, </author> <title> Oracle Media Server: Providing Consumer Based Interactive Access to Multimedia Data, </title> <booktitle> Proceedings of the 1994 International Conference on the Management of Data, </booktitle> <pages> pp. 470-477, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: The SPIFFI video-on-demand system is designed to be built out of inexpensive commodity components (e.g., PCs or workstations with SCSI disks and plug-in network devices). This approach differs from the one taken by some vendors <ref> [Laur94] </ref> who are building systems based around costly massively parallel processors. Our results in Section 7 show that it is not necessary to spend a great deal of money to build a viable video-on-demand system.
Reference: [Loug92] <author> P. Lougher and D. Shepherd, </author> <title> The Design and Implementation of a Continuous Media Storage Server, </title> <booktitle> Proceedings of the Third International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <pages> pp. 69-80, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: If a stream becomes out-of-sync, it is resynchronized either by pausing it or by skipping data. Other multimedia and continuous media systems include the Continuous Media File System (CMFS) [Ande92], the Continuous Media Storage Server (CMSS) <ref> [Loug92] </ref>, and the IBM Shark Continuous Media File Server [Hask93]. CMFS and CMSS are based on analytical designs. Some limited simulation results on CMFS performance are included in [Ande92].
Reference: [Munt95] <author> R. Muntz, S. Berson, and L. Golubchik, </author> <title> Fault Tolerant Design of Multimedia Servers, </title> <booktitle> to appear in Proceedings of the 1995 International Conference on the Management of Data, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: Nonetheless, in a video-on-demand system in which a single disk can support the simultaneous retrieval of multiple video streams, staggered striping is less likely to be needed. <ref> [Munt95] </ref> compares a variety of schemes for achieving fault-tolerance in a multimedia system.
Reference: [ Ozde94] <author> B. Ozden, A. Biliris, R. Rastogi, and A. Silberschatz, </author> <title> A Low-Cost Storage Server for Movie on Demand Databases, </title> <booktitle> Proceedings of the Twentieth International Conference on Very Large Data Bases, </booktitle> <pages> pp. 594-605, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: For instance, children's selections are likely to be popular early in the evening or on Saturday mornings, but less popular late at night. Thus, a video-on-demand system must be able to handle and adapt rapidly to a widely varying and highly dynamic workload. 3 Related Work <ref> [ Ozde94] </ref> proposes a movie-on-demand system in which each movie is stored on a separate, dedicated disk. Each movie is divided into several phases of identical length. These phases are interleaved on disk so that a single contiguous read operation can always retrieve one block from each phase. <p> size of the video files (2 hours equals 4 Gbytes) and the strictly sequential access pattern, it is impossible to cache a significant portion of a video in memory for reuse and the likelihood that a stripe block in the buffer pool will be referenced more than once is low <ref> [ Ozde94] </ref>. The love prefetch page replacement algorithm takes advantage of this fact and breaks the global LRU chain into two separate LRU chains: one for prefetched pages and one for referenced pages [Teng84]. <p> provide extra features that have not yet been discussed including functions such as pause, rewind, and fast-forward. 8.1 Delayed Start and Terminal Disks Although the video server does not explicitly try to improve performance by synchronizing two terminals that are watching the same movie (e.g., in a manner similar to <ref> [ Ozde94] </ref>), it is possible for two terminals to start the same video at approximately the same time and inadvertently share pages and I/Os. <p> This scheme does not require any extra resources at the video server or terminals, but does result in a somewhat choppy picture as the terminal skips over portions of the video. Alternatively, a completely separate version of each movie may be stored for supporting rewind and fast-forward searches <ref> [ Ozde94] </ref>. When a user presses rewind or fast-forward, the terminal simply switches from the normal version of the movie to the appropriate position within the appropriate search version. When the user presses play again, the 22 terminal switches back to the normal version again.
Reference: [Redd94] <author> A. L. N. Reddy and J. C. Wyllie, </author> <title> I/O Issues in a Multimedia System, </title> <journal> IEEE Computer, </journal> <volume> vol. 27, no. 3, </volume> <pages> pp. 69-74, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: In addition to providing access to a library of videos, this system will include a database of information about the videos and will support ad-hoc queries against this database. Little or no performance data are currently available on the video file server component of this system. <ref> [Redd94] </ref> simulates a real-time I/O subsystem including a SCSI bus and disks and compares the performance of three disk scheduling algorithms with varying amounts of memory.
Reference: [Ries78] <author> D. Ries and R. Epstein, </author> <title> Evaluation of Distribution Criteria for Distributed Database Systems, </title> <type> UCB/ERL Technical Report M78/22, </type> <institution> Berkeley, </institution> <month> May </month> <year> 1978. </year>
Reference-contexts: SPIFFI provides much of the necessary I/O functionality needed 6 to build a video server. Some of the features that were particularly important were file striping, decentralized file accesses, and buffering and prefetching. SPIFFI automatically stripes files across all the disks in the video server <ref> [Ries78] </ref>. As Figure 3 illustrates, when SPIFFI declusters a file, it first alternates between the nodes and then between the disks at each node.
Reference: [Rowe92] <author> L. A. Rowe and B. C. Smith, </author> <title> A Continuous Media Player, </title> <booktitle> Proceedings of the Third International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <pages> pp. 376-386, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: As will be shown in Section 7, striping videos alleviates this problem and drastically improves the overall utilization of the disks. Rowe <ref> [Fede94, Rowe92] </ref> is in the process of building a comprehensive video-on-demand system including a video file server, a continuous media player, and a large library of digitized videos.
Reference: [Schw90] <author> H. Schwetman, </author> <title> CSIM Users' Guide, </title> <type> MCC Technical Report No. </type> <institution> ACT-126-90, Microelectronics and Com puter Technology Corporation, Austin, TX, </institution> <month> March </month> <year> 1990. </year> <month> 24 </month>
Reference-contexts: The event-driven simulator is written in the CSIM/C++ process-oriented simulation language <ref> [Schw90] </ref>. We are primarily interested in the performance of the system when all the terminals are actively viewing movies. Furthermore, in a real system videos will be started at random intervals. To capture this behavior, at the beginning of a simulation, the terminals start movies at random intervals.
Reference: [Silb94] <author> A. Silberschatz and P. B. Galvin, </author> <title> Operating Systems Concepts, 4th edition, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: Finally, SPIFFI provides a buffer pool that includes a highly effective prefetching mechanism. The basic SPIFFI buffer pool uses a global LRU (least recently used) page replacement algorithm and the well-known elevator disk scheduling algorithm that balances minimizing seek times against fairness <ref> [Silb94] </ref>. After servicing an I/O request for a terminal, SPIFFI issues a background prefetch request for the next stripe block of the video file. <p> Finally, we added two new prefetching strategies, real-time prefetching and delayed prefetching. The details of each of these algorithms is described in the following sections. 5.2.1 Buffer Pool Page Replacement Algorithms The global LRU algorithm <ref> [Silb94] </ref> simply places newly referenced pages (i.e., stripe blocks) onto the end of a single queue. When a new page is needed, the buffer pool searches for the first available page starting from the head of the queue. <p> If there are no available pages on the referenced-pages LRU chain, the buffer pool takes a page from the prefetched-pages LRU chain. 5.2.2 Disk Scheduling Algorithms The elevator disk scheduling algorithm <ref> [Silb94] </ref> scans the disk cylinders starting with the innermost cylinder and working outward. When it reaches the outermost cylinder, the algorithm reverses and begins scanning inward. An I/O request is serviced when the disk head reaches its cylinder.
Reference: [Suzu94] <author> H. Suzuki, K. Nishimura, A. Uemori, and H. Sakamoto, </author> <title> Storage Hierarchy for Video-on-Demand Systems, </title> <booktitle> Proceedings of Storage and Retrieval for Image and Video Databases II, </booktitle> <pages> pp. 198-207, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: This study does not compare the performance of alternative disk scheduling or memory management algorithms and it appears that no real-time scheduling algorithms were employed to improve performance. In addition, they used a constant video frame size of 32 Kbytes which is unrealistic with video compression. <ref> [Suzu94] </ref> describes a video-on-demand system in which frequently referenced movies are stored on disk while infrequently referenced movies are stored in an optical jukebox system. To speed access to movies stored in the optical jukebox, the first few seconds of these movies may also be stored on disk.
Reference: [Teng84] <author> J. Z. Teng and R. A. Gumaer, </author> <title> Managing IBM Database 2 Buffers to Maximize Performance, </title> <journal> IBM Systems Journal, </journal> <volume> vol. 23, no. 2, </volume> <pages> pp. 211-218, </pages> <year> 1984. </year>
Reference-contexts: By prefetching, SPIFFI takes advantage of idle time at the disks to do useful work. 7 As part of this project, we enhanced the SPIFFI buffer pool by adding a new page replacement algorithm, love prefetch, that favors prefetched pages over already referenced pages <ref> [Teng84] </ref>. We augmented the disk scheduler with a real-time disk scheduling algorithm and with an implementation of the group sweeping scheme (GSS) proposed in [Yu92]. Finally, we added two new prefetching strategies, real-time prefetching and delayed prefetching. <p> The love prefetch page replacement algorithm takes advantage of this fact and breaks the global LRU chain into two separate LRU chains: one for prefetched pages and one for referenced pages <ref> [Teng84] </ref>. As Figure 4 illustrates, when a stripe block is first prefetched, it is placed on the prefetched-pages LRU chain.
Reference: [Tetz94] <author> W. Tetzlaff, M. Kienzle, and D. Sitaram, </author> <title> A Methodology for Evaluating Storage Systems in Distributed and Hierarchical Video Servers, </title> <booktitle> Proceedings of the IEEE Computer Conference Spring '94, </booktitle> <pages> pp. 430-439, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: Shark implementation. [Chan94] compares various strategies for allocating video data on disk arrays such that the video can be efficiently retrieved at differing quality levels. [Chen93] uses an analytical study to develop a disk layout strategy for multiple related multimedia streams such as video, audio, and text (e.g., closed captioning). <ref> [Tetz94] </ref> uses an analytical study to discuss the effects of various parameters and technology trends on a video-on-demand system. 4 4 Our Work This paper simulates a variety of video server hardware configurations and algorithms to determine how such a server should be designed and configured to minimize cost and maximize
Reference: [Vin93] <author> H. M. Vin and P. V. Rangan, </author> <title> Designing a Multiuser HDTV Storage Server, </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 11, no. 1, </volume> <pages> pp. 152-164, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: These schemes use the careful placement of parity blocks along with extra buffering of data to ensure that disk failures do not lead to interruptions in the video streams sent to users. <ref> [Vin93] </ref> performs a detailed analytical study of the design and operation of a video server including disk layout and admission control constraints intended to guarantee the on-time delivery of video data to clients. However, the paper only considers a limited set of experiments.
Reference: [Yu92] <author> P. S. Yu, M.-S. Chen, and D. D. Kandlur, </author> <title> Design and Analysis of a Grouped Sweeping Scheme for Multimedia Storage Management, </title> <booktitle> Proceedings of the Third International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <pages> pp. 44-55, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: If they are initiated at random times, the disk arm will generally have to seek between the blocks of the two videos regardless of what layout is used. <ref> [Yu92] </ref> presents a disk scheduling algorithm referred to as the group sweeping scheme (GSS). The intent of this algorithm is to minimize both the disk access time and the amount of buffer space. <p> We augmented the disk scheduler with a real-time disk scheduling algorithm and with an implementation of the group sweeping scheme (GSS) proposed in <ref> [Yu92] </ref>. Finally, we added two new prefetching strategies, real-time prefetching and delayed prefetching. <p> After each disk access, priorities are recomputed using the current time. Thus, continuing the example, request 1 is now within 2 seconds of its deadline, is promoted to priority 1, and is serviced next. For comparison, we also implemented the group sweeping scheme (GSS) described in <ref> [Yu92] </ref>. This algorithm assigns each terminal to one of a fixed set of groups. These groups are processed repeatedly in round-robin order. To process a group, up to one request from each terminal within that group is selected and serviced using the elevator algorithm.
Reference: [Zipf49] <author> G. K. Zipf, </author> <title> Human Behavior and the Principle of Least Effort, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1949. </year> <month> 25 </month>
Reference-contexts: As discussed in Section 2, in any video-on-demand system certain popular movies will be accessed frequently while other less popular selections will be requested less frequently. This access pattern corresponds to a Zipfian distribution (see Figure 8) <ref> [Zipf49] </ref>. The parameter, z, determines how skewed the distribution is. For most of our experiments, except where otherwise noted, z was set to 1. 6.2 Disks and Network The disks are based on the Seagate ST15150N SCSI-2 disk (5 Gbyte capacity) which is currently a state-of-the-art high-performance model.
References-found: 28

