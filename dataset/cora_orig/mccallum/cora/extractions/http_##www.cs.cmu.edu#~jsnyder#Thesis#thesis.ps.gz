URL: http://www.cs.cmu.edu/~jsnyder/Thesis/thesis.ps.gz
Refering-URL: http://www.cs.cmu.edu/afs/cs/user/jsnyder/www/phd.html
Root-URL: 
Title: Conceptual Modeling and Application Integration in CAD: The Essential Elements  
Author: James Daniel Snyder II 
Degree: Submitted to the  in partial fulfillment of the requirements for the degree of Doctor of Philosophy  Advisory Committee: Professor Ulrich Flemming, Department of Architecture (Chair) Professor Steven Fenves, Department of Civil and Environmental Engineering Doctor Duvvuru Sriram, National Institute of  
Date: May 1998  
Address: University  
Affiliation: School of Architecture of Carnegie Mellon University  School of Architecture Carnegie Mellon  Standards and Technology  
Abstract-found: 0
Intro-found: 0
Reference: [Amor and Hosking 1995] <author> Amor, R. W. and J. </author> <title> Hosking (1995). Mappings: The Glue in an Integrated System in Proceedings of ECPPM 94 - The First European Conference on Product and Process Modelling in the Building Industry R. </title> <editor> J. Scherer (ed.), </editor> <address> Dresden, Germany, </address> <month> October 5-7, </month> <year> 1994, </year> <editor> Rotterdam: A. A. </editor> <publisher> Balkema. </publisher>
Reference-contexts: While this view is also shared by Eastman, the details of how this is achieved are not presented. It should also be pointed out that this issue is different from knowl edge sharing or concept mapping as found in ([Gruber et al. 1992], [Khedro 1995]) or <ref> [Amor and Hosking 1995] </ref> respectively. Motivation 16 Research Areas in CAAD developed from an overall system perspective, rather than a bottom-up approach, allowing the modeling of diverse design information. 2. Develop application integration requirements Once the modeling requirements are gathered, the requirements for application integration will be defined.
Reference: [Augenbroe and Winkelmann 1990] <author> Augenbroe, G. and F. </author> <month> Winkelmann </month> <year> (1990). </year> <title> Integration of Simulation Into the Building Design Process . TU Delft Research Report, </title> <publisher> TU Delft, Holland. </publisher>
Reference-contexts: Research shows that this technique is not sufficient in conceptual modeling. PhD Thesis Spring 1998 43 The Information Exchange Problem integration and the promise of product models has also been observed by the building performance and evaluation community as stated by <ref> [Augenbroe and Winkelmann 1990] </ref>: A building project requires generating, updating, and communicating an enormous amount of data... Traditionally this description is stored and displayed in analog, causing numerous problems due to ambiguity, incompleteness and inconsistency of information.
Reference: [Barr and Feigenbaum 1981] <editor> Barr, A. and E. A. Feigenbaum (eds.) </editor> <booktitle> (1981). The Handbook of Artificial Intelligence (Vol I) . Los Altos: </booktitle> <publisher> William Kaufmann, Inc. </publisher>
Reference-contexts: As a result, constructing a general query mechanism can be difficult; standardized search procedures as well as generalized naming conventions were added after some experience was gained <ref> [Barr and Feigenbaum 1981] </ref>. PhD Thesis Spring 1998 25 Knowledge Representation and Programming 2.2.2 Frames Frames were introduced by Minsky as a generalized form for representing knowledge in vision perception and natural language dialogues [Minsky 1975]. <p> Common to most action centered representations is a fact base and a relationship representation methodology (e.g. predicate logic). FIGURE 1. Example Semantic Network isa owner ownee OWN1 CLYDE SHIP OWNER ROBIN BIRD NEST1 SITUATION NEST S OURCE : <ref> [Barr and Feigenbaum 1981] </ref> Contributions from Computer Science 26 KL-ONE Language Family OPS Language Family The OPS series of languages uses a forward chaining reasoning system that matches new information ( facts ) against a set of rules ( rule-base ).
Reference: [Barr and Feigenbaum 1982] <editor> Barr, A. and E. A. Feigenbaum (eds.) </editor> <booktitle> (1982). The Handbook of Artificial Intelligence (Vol I) . Los Altos: </booktitle> <publisher> William Kaufmann, Inc. </publisher>
Reference: [Barr et al. 1989] <editor> Barr, A., Cohen, P. R. and E. A. Feigenbaum (eds.) </editor> <booktitle> (1989). The Handbook of Artificial Intelligence (Vol IV) . Reading: </booktitle> <publisher> Addision Wesley, Inc. </publisher>
Reference-contexts: By definition, all the properties of the vehicle are said to be inherited by the automobile . A precise definition of required capabilities of objectoriented languages can be found in <ref> [Barr et al. 1989] </ref> Chapters one to four. <p> Central to most AI applications is the need to represent knowledge in a computable form. Knowledge representation can generally be classified as action-centered or object-centered <ref> [Barr et al. 1989] </ref>. 2.2.1 Semantic Networks Semantic networks were developed to represent psychological models of associative memory [Quillian 1968]. The basic mechanism of representation is a node/link data structure, where the nodes present an object or concept and the links are relations between objects.
Reference: [Barsalou and Weiderhold 1990] <author> Barsalou, T. and G. </author> <booktitle> Weiderhold (199). Complex Objects for Relational Databases Computer-Aided Design 22 (8). </booktitle> <pages> pp 458-468. </pages>
Reference-contexts: The contract data-space contains information about the agents performance and the task distribution process. The constraint data-space is used by the development process manager to consider redirection of control flow. Product Model Representation To represent objects, IBDE uses the concept of a view object as defined by <ref> [Barsalou and Weiderhold 1990] </ref>. Essentially, the data exchange manager creates a meta-schema of the facility description schema within a relational database. The meta-schema maps descriptions in the facility description schema to database relations during runtime.
Reference: [Bjrk 1992a] <author> Bjrk, B. C. </author> <year> (1992). </year> <title> A conceptual model of spaces, </title> <booktitle> space boundaries and enclosing structures Automation and Construction , 1 (3), </booktitle> <pages> pp. 193-214. </pages>
Reference: [Bjrk 1992b] <author> Bjrk, B. C. </author> <year> (1992). </year> <title> A Unified Approach for Modeling Construction Information Building and Environment , 27 (2), pp. </title> <type> 173-194. References 150 PhD Thesis Spring 1998 </type>
Reference-contexts: Conceptual modeling techniques have been identified explicitly by <ref> [Bjrk 1992b] </ref>: A typical use of conceptual modeling techniques in construction IT 4 research and development has been for structuring the information about the design artifact itself (product data models).
Reference: [Borgida et al. 1989] <institution> Borgida et al (1989). </institution>
Reference-contexts: The CLASSIC authors acknowledge the need for integrating knowledge systems with other software tools and have provided a test construct as stated in <ref> [Borgida et al. 1989] </ref>. As an aside, note that the TEST constructor is an entirely procedural black box, so that complete reasoning cannot be done about the relationships between such concepts. In this way, TEST concepts act just like primitive ones. <p> Figure 23 shows example classifications of a spatial design element. A literature survey revealed that the work most relevant to the capabilities needed for multiple classifications is the CLASSIC knowledge representation system <ref> [Borgida et al. 1989] </ref>. CLASSIC was chosen as a reference model because its definition of classification fits the requirements, and it has algorithms that are known to be tractable. CLASSIC supports capabilities as defined in [Brachman et al. 1991]. <p> The CLASSIC authors acknowledge the need for integrating such systems via the provided test construct as stated in <ref> [Borgida et al. 1989] </ref>. As an aside, note that the TEST constructor is an entirely procedural black box, so that complete reasoning cannot be done about the relationships between such concepts. In this way, TEST concepts act just like primitive ones.
Reference: [Brachman et al. 1991] <author> Brachman, R. J., McGuiness, D. L., Patel-Schneider, P. F., and L. A. Resnick. </author> <title> (1991) Living With CLASSIC: When and How to Use a KL-ONE-Like Language in Principles of Semantic Networks: Explorations in the Represtation of Knowledge J. </title> <editor> Sowa (ed.) </editor> <address> San Mateo: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Also, we see a certain resemblance between admitting external agents such as tests in CLASSIC, and the adoption of abstract data types as domains for the formerly pure relational data model. In a complementary manner, <ref> [Brachman et al. 1991] </ref> elaborate the place CLASSIC holds within a complex software system. Clearly, the authors do not view classification as the silver bullet of software development. <p> CLASSIC was chosen as a reference model because its definition of classification fits the requirements, and it has algorithms that are known to be tractable. CLASSIC supports capabilities as defined in <ref> [Brachman et al. 1991] </ref>. It concentrates on the definition of structured concepts, their organization into taxonomies, the creation and manipulation of individual instances of concepts, and the key inferences of subsumption and classification. The definition of subsumption, taxonomy, inheritance, and classification, defined by [Woods 1991], is restated here for convenience. <p> The deductive capabilities of the knowledge representation implementation must support the basic capabilities of completion, classification and subsumption, and rule application, all of which are described below following <ref> [Brachman et al. 1991] </ref>. Completion Logical consequences of assertions about individuals and descriptions of concepts that are computed; there a number of completion inferences that CLASSIC can make: 1. Inheritance Restrictions that apply to instances of a concept must also apply to instances of specializations of that concept. <p> Also, we see a certain resemblance between admitting external agents such as tests in CLASSIC, and the adoption of abstract data types as domains for the formerly pure relational data model. In a complementary manner, <ref> [Brachman et al. 1991] </ref> elaborate the place CLASSIC holds within a complex software system. Clearly, the authors do not view classification as the silver bullet of software development. <p> Other modules in the system would be responsible for the more complicated inferences relating to the particular domain and task. CLASSIC is not intended to work with complex data models as indicated in <ref> [Brachman et al. 1991] </ref>: Because of its object-centered nature, CLASSIC is likely to be cumbersome to use in cases where mathematical entities such as tuples, sequences, and geometric entities, etc. are the center of attention. <p> In particular, description logic coupled with an object model provides the ability to define behavior independently of orthogonal classifications. To support this kind of classification, SPROUT uses the CLASSIC knowledge representation system developed by AT&T Bell Labs (recently spun-off as Lucent Technology) as the implementation reference model <ref> [Brachman et al. 1991] </ref>. Application Frameworks Application frameworks are recurring software components and provide a software development infrastructure for well-defined application areas and user interface capabilities by employing design pattern software engineering principles [Gamma et al. 1995].
Reference: [Brownston et al. 1985] <editor> Brownston et al . (1995). </editor> <title> Programming expert systems in OPS5 : An Introduction to Rule-Based Programming. </title> <publisher> Reading : Addison-Wesley. </publisher>
Reference-contexts: The most famous languages in this series are the original OPS [Forgy and McDermott 1976], OPS5 <ref> [Brownston et al. 1985] </ref>, and CLIPS [Giarratano and Riley 1989]. These systems utilize rules to express the relationships between facts.
Reference: [CADRE 1996] <institution> CADRE Analytic, </institution> <address> 2035 201st Ave. S.E., Issaquah, WA. 98029 (http:// Slicenet.futuris.net/Official/CADRE). </address>
Reference: [Carlson et al. 1990] <author> Carlson, C., R. McKelvey, and R.F. </author> <month> Woodbury </month> <year> (1990). </year> <title> An Introduction to Structure and Structure Grammars. </title> <type> Technical Report EDRC-48-20-90, </type> <institution> Engineering Design Research Center, Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference-contexts: This is not an exhaustive list of systems. However, several important and wellstudied ones are listed here. Not listed are Structure Grammars <ref> [Carlson et al. 1990] </ref>, Boundary Solid Grammars [Heisserman 1991], Graph Gram mars [Meyer and Fenves 1993]. PhD Thesis Spring 1998 13 Summary 2. Layout Grammars (Loosely Packed Arrangements of Rectangles) LPARs allow the synthesis of schematic layouts in rectilinear configurations.
Reference: [Chomsky 1956] <author> Chomsky, N. </author> <year> (1956). </year> <title> Three Model for the Description of Language IRE Transactions on Information Theory . IT-2:3, </title> <journal> pp. </journal> <pages> 113-124. </pages>
Reference-contexts: In principle, generative systems manipulate and generate design descriptions using rigorous and formalized mechanisms, and they are a form of the more general production systems . Production systems can be viewed as a formal grammar where elements (or terms) are changed using rewrite rules <ref> [Chomsky 1956] </ref>. As a reference, [Gips and Stiny 1980] describe a uniform characterization of grammars and production systems, while [Paakki 1995] characterizes grammars in the more strict attribute grammars. Using a production system as the underlying mechanism, several kinds of generative systems have emerged in the literature 9 : 1.
Reference: [Coyne and Flemming 1990] <author> Coyne, R. F. and U. </author> <title> Flemming (1990). Planning in design synthesis: </title> <booktitle> Abstraction-based LOOS in Artificial Intelligence in Engineering , J. </booktitle> <address> Gero (ed.). New York: </address> <publisher> Springer (Computational Mechanics Publications), </publisher> <pages> pp. 91-111. </pages>
Reference-contexts: As stated in ([Fenves et al. 1994] p. 44) ... rectangles that can have holes or an irregular boundary; but densely packed arrangements are included as a special case. LPARs have been used in the LOOS/ABLOOS systems ([Flemming 1986], <ref> [Coyne and Flemming 1990] </ref>) as well as the more recent SEED-Layout [Flemming and Chien 1995]. Current CAD systems have not supported generative systems for two important reasons. First, generative mechanisms require significantly more robust and formal representations.
Reference: [Coyne et al. 1991] <author> Coyne, R.D., Rosenman, M. A., Radford, A. D., Balachandran, M., and J. S. </author> <month> Gero </month> <year> (1990). </year> <title> Knowledge-Based Design Systems. </title> <address> Reading, Mass. </address> : <publisher> Addison-Wesley. </publisher> <editor> [de Vries and Somers 1995] de Vries, B. and L. J. </editor> <booktitle> Somers (1995). Message Exchange in the Building Industry Automation in Construction , 4 (2), </booktitle> <pages> pp. 91-100. </pages>
Reference-contexts: Several significant, and successful expert systems, such as HI-RISE [Maher 1984], focused research efforts towards multiple experts working together. The buzz words knowledge-based or intelligent CAD systems refer to systems of this nature. Standard text books (such as <ref> [Coyne et al. 1991] </ref>) have been produced covering the different approaches as applied to design as well as the regularly held international conference AI in Design [Gero 1991].
Reference: [Dubois et al. 1995] <author> Dubois, A. M., Flynn, J., Verheof, M. H. G., and G. L. M. </author> <month> Auguenbroe </month> <year> (1995). </year> <title> Conceptual Modelling Approaches in the COMBINE Project in Proceedings of ECPPM 94 - The First European Conference on Product and Process Modelling in the Building Industry R. </title> <editor> J. Scherer (ed.), </editor> <address> Dresden, Germany, </address> <month> October 5-7, </month> <year> 1994, </year> <note> Rotterdam: </note> <author> A. A. </author> <title> Balkema. </title> <type> PhD Thesis Spring 1998 151 References </type>
Reference-contexts: STEP-Based Extensions Several research projects have made extensive use of EXPRESS and reported their results in the literature. In particular, the COMBINE project has published extensively with respect to information exchange. Integrating an application is still a manual programming task as stated by <ref> [Dubois et al. 1995] </ref>: Research, Systems, and Products 60 DICE Basically each entity in the EXPRESS schema mapped to a C++ class definition and each entity instance in the STEP file will be mapped to an instance of the corresponding C++ class. <p> This experience has also been observed by other research groups as stated in <ref> [Dubois et al. 1995] </ref> 2 : For the time being, too much is still dependent on individual skills and inspiration. Proofs that a resulting model is somewhere near a desired optimum or even semantically correct are still outside of our reach. <p> A pervasive software architecture and programming technique to carry out the mapping process are clearly identified in <ref> [Dubois et al. 1995] </ref> 3 : An EXPRESS subschema can be used directly by a design tool developer to create a C++ interface by using the COMBINE parser-kit as it is currently being developed (Plokker and Augenbroe 1994).
Reference: [Duckworth 1994] <author> Duckworth, S. </author> <year> (1994). </year> <note> Course Notes, </note> <institution> Design Economics (48-420, Fall Semester) , Department of Architecture, Carnegie Mellon University, Pittsburg, </institution> <address> PA. </address>
Reference-contexts: Traditionally, product models were specified and represented independently from the process models that utilized them. However, a homogeneous representation should support both representations simultaneously. 3.1.3 Example Economic Model To illustrate the differences between programming languages and modeling languages, an example problem is given from the domain of building economics <ref> [Duckworth 1994] </ref>. The model calculates the total assessed value of a building based on several factors including the floor area of new construction. The model in this example is first given as a network flow, then as a spreadsheet, and finally in a modeling language representation.
Reference: [Eastman 1991] <author> Eastman, </author> <title> C.M. </title> <booktitle> (1991). The Evolution of Architectural CAD: Integrating Multiple Representations Building and Environment . 26 (1), </booktitle> <pages> pp. 17-23 </pages>
Reference-contexts: Because the information is stored in several different formats, sharing data between applications is virtually impossible unless all parties use exactly the same versions of the same software. This problem has been identified by <ref> [Eastman 1991] </ref> as the coordination of multiple representations; recent literature continues to bring up this issue as in [Liebich 1995]. <p> The four areas presented are a combination and adaptation of reviews presented by [Pohl et al. 1992], <ref> [Eastman 1991] </ref>, and [Eastman 1994b]. 1. Some might argue that this result is not surprising. 2. DOE-2 is an energy simulation package developed by the Department of Energy at the Lawrence Berkeley Labo ratories. <p> Current research efforts are focusing on the most appropriate ways to achieve these goals with promising results. The majority of the research in this area tries to construct a model of the building information or a building model <ref> [Eastman 1991] </ref> 5 . Distributed Collaboration Frameworks The process of building design generates large amounts of information that must be shared between different design teams and organizations. The CAD systems 4. The subsection "Artificial Intelligence Approaches" address the issue of reuse. 5.
Reference: [Eastman 1994a] <author> Eastman, </author> <title> C.M. (1994), A Data Model for Design Knowledge in Knowledge-Based Computer-Aided Architectural Design G. </title> <editor> Carrera and Y. E. Kalay (eds.), </editor> <publisher> Elsevier Science B.V., </publisher> <address> Amsterdam, The Netherlands. </address> <pages> pp. 95-122. </pages>
Reference-contexts: Develop information modeling requirements The requirements for a comprehensive modeling environment within the context of building design will be gathered. These requirements will be 11. The possible exception would be EDM2 <ref> [Eastman 1994a] </ref>. While this view is also shared by Eastman, the details of how this is achieved are not presented. <p> This approach is related to the idea of open systems. In contrast to the above perspective, most building industry research and commercial systems make use of a shared schema at some level (see [Pohl et al. 1992], [Wright et al. 1992], [Sriram and Logcher 1993], <ref> [Eastman 1994a] </ref>, and [Fenves et al. 1994]), while some systems use a federated approach [Khedro 1995]. These issues are addressed in more detail in the sections that follow. 4. Information Technology 5. The authors are referring to distributed software architectures. <p> In other words, correctness can be tested only in the presence of fully defined data; this issue has been termed partial integrity in <ref> [Eastman 1994a] </ref>. For the remainder of this document, the terms process and product modeling will be used within the context of the building industry. <p> However, an abstract notion of a polygon may in fact be sufficient to accommodate relevant exchanges. <ref> [Eastman 1994a] </ref> identifies a kind of formal description called transduction where logical rules define bidirectional translation between types .
Reference: [Eastman 1994b] <author> Eastman, C. M. </author> <year> (1994). </year> <title> Research Issues Regarding Integrated Building Product Models in Bridging the Generations: </title> <booktitle> International Workshop on the Future Directions of Computer-Aided Engineering (position papers submitted to the workshop) D. </booktitle> <editor> Rehak (ed.), </editor> <month> July 18-19, </month> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference-contexts: The four areas presented are a combination and adaptation of reviews presented by [Pohl et al. 1992], [Eastman 1991], and <ref> [Eastman 1994b] </ref>. 1. Some might argue that this result is not surprising. 2. DOE-2 is an energy simulation package developed by the Department of Energy at the Lawrence Berkeley Labo ratories.
Reference: [Eastman and Fereshetian 1994] <author> Eastman, C. M. and N. </author> <month> Fereshetian </month> <year> (1994). </year> <title> Information models for use in product design: a comparison Computer-Aided Design 26 , pp. </title> <type> 551-572 </type>
Reference-contexts: Rather, specific features, relevant to the discussion developed in Chapter 3, are presented. PhD Thesis Spring 1998 59 Second Generation Systems EXPRESS was initially designed to facilitate file-based exchange mechanisms using a neutral file format, and several syntactic mechanisms are available to support this type of exchange <ref> [Eastman and Fereshetian 1994] </ref>. The three most prevalent constructs are: 1. ONEOF This operator restricts the subtypes to being mutually exclusive.
Reference: [Eastman and Siabiris 1995] <author> Eastman, C. M. and A. </author> <month> Siabiris </month> <year> (1995). </year> <title> A Generic Building Product Model Incorporating Building Type Information Automation in Construction , 4 (4), </title> <journal> pp. </journal> <pages> 283-304. </pages>
Reference-contexts: Differences with domain independent modeling will not be discussed unless a significant research issue is present. 3.2.2 Product Models A generally accepted abstract definition of a product model can be found in <ref> [Eastman and Siabiris 1995] </ref>: The central product model for architecture and construction is a building model. A building model is a representation of the building over all its life stages that is adequate for most (if not all) uses. <p> viewed an as implementation framework for shared workspaces and not a conceptual modeling environment because concepts are defined in the implementation language, not in a programming language independent way. 4.2.3 EDM The Engineering Data Model ( EDM ) is a modeling environment that is not based on the objectoriented paradigm <ref> [Eastman and Siabiris 1995] </ref>. Instead, Functional Entities (FE) aggregate values, constraints , and other FE s using composition or accumulation relationships.
Reference: [Eastman et al. 1993] <author> Eastman, C. M., Chase, </author> <title> S.C., </title> <booktitle> andH. Assal (1993), System Architecture for Computer Integration of Design and Construction Knowledge Automation in Construction , 2 (2), </booktitle> <pages> pp. 95-107. </pages>
Reference: [Eastman et al. 1995] <author> Eastman, C., Cho, M. S., Jeng, T.S., and H. H. </author> <month> Assal </month> <year> (1995). </year> <title> A Data Model and Database Supporting Integrity Management in Computing in Civil Engineering J. </title> <editor> P. Mohsen (ed.), </editor> <booktitle> volume 1 of 2, </booktitle> <pages> pp. 517-524, </pages> <booktitle> Proceedings of the Second Congress held in conjunction with the A/E/C Systems `95, </booktitle> <address> Atlanta, GA, June 5-8, New York: </address> <publisher> American Society of Civil Engineers. </publisher>
Reference-contexts: While this model is formally robust, it has several limitations that lead the authors to develop EDM -2 <ref> [Eastman et al. 1995] </ref>; this model does have a notion of a class called a Design Entity ( DE ). The two object structuring techniques available in EDM -2 are the specialization lattice and the composition hierarchy.
Reference: [Enercalc 1996] <institution> ENERCALC Engineering Software, Post Office Box 188, Corona del Mar, </institution> <address> California 92625 (http://www.enercalc.com). </address>
Reference: [Fenves et al. 1994] <author> Fenves, S., Flemming, U., Hendrickson, C.,Maher, M. L.,Quadrel, R.,Terk, M., and R. </author> <month> Woodbury </month> <year> (1994). </year> <title> Concurrent Computer-Aided Building Design , Englewood Cliffs, NJ: </title> <type> Prentice-Hall. References 152 PhD Thesis Spring 1998 </type>
Reference-contexts: Distributed AI was employed as a method of dealing with these issues. Experimental third generation systems include the Intelligent Computer Aided Design System (ICADS) [Myers et al. 1991] and the Integrated Building Design Environment (IBDE) <ref> [Fenves et al. 1994] </ref> 3 . 3. CAD software for building design is severely disjoint. The information in one type of CAD tool cannot be directly used within another tool. <p> This approach is related to the idea of open systems. In contrast to the above perspective, most building industry research and commercial systems make use of a shared schema at some level (see [Pohl et al. 1992], [Wright et al. 1992], [Sriram and Logcher 1993], [Eastman 1994a], and <ref> [Fenves et al. 1994] </ref>), while some systems use a federated approach [Khedro 1995]. These issues are addressed in more detail in the sections that follow. 4. Information Technology 5. The authors are referring to distributed software architectures. <p> a class description did not exist in any ICADS system until the work presented in [Snyder 1993]. 4.1.2 IBDE The Integrated Building Design Environment (IBDE) project, developed at Carnegie Mellon University, was a multidisciplinary research project investigating the potential of an integrated computer-based design environment; it is best summarized by <ref> [Fenves et al. 1994] </ref>: ... the subject of this monograph is not even a prototype. <p> Brief Description IBDE can be categorized as a third generation computer-aided design system as defined in Section 1.1.3. References to IBDE are directed at capabilities found in the IBDE-2 system described in <ref> [Fenves et al. 1994] </ref>. IBDE integrated several existing expert systems tools using a problem-centered approach to integration. To solve problems, this approach requires tool-independent representation of the processes and information used to solve those problems. <p> ACTIVATOR ACTIVATOR ACTIVATOR ACTIVATOR ACTIVATOR ACTIVATOR ACTIVATOR TOOL SET DATA EXCHANGE MANAGER FACILITY DESCRIPTION GLOBAL USER INTERFACE preprocessor preprocessor preprocessor preprocessor preprocessor preprocessor preprocessor postprocessor postprocessor postprocessor postprocessor postprocessor postprocessor postprocessor D EVELOPMENT P ROCESS M ANAGER CONSTRAINT DATA SPACE CONTRACT DATA SPACE CONTROL FLOW INFORMATION FLOW S OURCE : <ref> [Fenves et al. 1994] </ref> ARCHPLAN STRYPES STANLAY FOOTER SPEX PLANEX DEVELOPMENT PROCESS DESCRIPTION GRID PhD Thesis Spring 1998 57 First Generation Systems 2. Scheduling stage - problem definition Task and aspect hierarchies are established to describe the possible problem partitioning strategies and information requirements of the tasks. <p> To facilitate this process, a planner is provided that matches problem partitions with the granularity of the tasks and aspects best suited the demands of the user. A detailed description of this planning process is given in <ref> [Fenves et al. 1994] </ref> pages. 135-144. 4. Execution stage - task distribution Once a problem description is formulated, the task distribution mechanisms identify what tools can solve the posed problems. Specifically, IBDE uses the contract net protocol to negotiate what agent will solve a particular subproblem. 5. <p> Consequently, a more complex object model can be built by fusing these components. However, these mechanisms are too difficult to implement by hand and can only be resolved in an automated way. Note that many of these issues were described as the hubs and spokes method found in <ref> [Fenves et al. 1994] </ref>. However, an information modeling language needs to support automatic code generation and not code written by hand. Lastly, the communication infrastructure assumptions must be minimal. The only capability that should be assumed is the ability to transmit a data structure over a reliable communication mechanism (e.g.
Reference: [Flemming 1986] <author> Flemming, U. </author> <year> (1986). </year> <title> On the representation and generation of loosely packed arrangements of rectangles Environment and Planning B: </title> <journal> Planning and Design 13 , pp. </journal> <pages> 189-205. </pages>
Reference: [Flemming 1994a] <author> Flemming, U. </author> <title> (1994) Case-Based Design in the SEED System in Knowledge-Based Computer-Aided Architectural Design , G. </title> <editor> Carrara and Y. E. Kalay (eds.).Amsterdam: </editor> <publisher> Elsevier, </publisher> <pages> pp. 69-91. </pages>
Reference-contexts: Motivation 12 Research Areas in CAAD 4. Case-Based Design The AI field of Case-Based Reasoning attempts to directly address the reuse of previous solutions to problems rather than compute a solution from scratch ([Kolodner 1993], <ref> [Flemming 1994a] </ref>). However, not all of the issues addressed by the pure AI approach are relevant; a slightly variant approach to this problem is described in [Flemming et al. 1994] and [Flemming et al. 1995].
Reference: [Flemming 1994b] <author> Flemming, U. </author> <year> (1994). </year> <title> Arificial Intelligence in Design: A MidTerm Review in Knowledge-Based Computer-Aided Architectural Design G. </title> <editor> Carrera and Y. E. Kalay (eds.), </editor> <publisher> Elsevier Science B.V., </publisher> <address> Amsterdam, The Netherlands. </address> <pages> pp. 1-24. </pages>
Reference-contexts: Standard text books (such as [Coyne et al. 1991]) have been produced covering the different approaches as applied to design as well as the regularly held international conference AI in Design [Gero 1991]. An inventory, justification, and critique of AI approaches in design are given in <ref> [Flemming 1994b] </ref> as well as a position statement regarding research directions in AI-based design. Several approaches have emerged in the literature: 1. Distributed Artificial Intelligence As computing hardware and networks became abundant, Distributed Artificial Intelligence (DAI) approaches became more common 6 .
Reference: [Flemming and Chien 1995] <author> Flemming, U. and Chien, S. F. </author> <year> (1995). </year> <title> Schematic Layout Design in SEED Environment Journal of Architectural Engineering , 121 (4), </title> <address> New York: </address> <publisher> American Society of Civil Engineers. </publisher> <pages> pp. 162-169. </pages>
Reference-contexts: LPARs have been used in the LOOS/ABLOOS systems ([Flemming 1986], [Coyne and Flemming 1990]) as well as the more recent SEED-Layout <ref> [Flemming and Chien 1995] </ref>. Current CAD systems have not supported generative systems for two important reasons. First, generative mechanisms require significantly more robust and formal representations. These representations are still few in number and require significantly more research to develop than computational geometry-based representations.
Reference: [Flemming and Snyder 1997] <author> Flemming, U. and J. </author> <title> Snyder (1997) Buildings and Databases: The SEED Experience Internationales Kolloquium ber Anwendungen der Informatik und Mathematik in Architektur und Bauwesen - IKM, </title> <editor> Bauhaus-Universitt Weimar, 26.2. - 1.3. </editor> <year> 1997, </year> <title> document number 102. </title>
Reference-contexts: Multiple Classifications of a Spatial Element public Spatial FU private interior Spatial FU exterior commercial Spatial FU residential office retail S OURCE : <ref> [Flemming and Snyder 1997] </ref> Information Modeling Environment Requirements 90 Multiple Classifications can be inherited). Such links have been variously named is a, kind of, subset of, member of, subconcept of, subkind of, superconcept, ako, etc. Such links are used to organize concepts into a hierarchy or some other partial ordering.
Reference: [Flemming and Woodbury 1995] <author> Flemming, U. and R. </author> <month> Woodbury </month> <year> (1995). </year> <title> Software Environment to Support Early Phases in Building Design (SEED): Overview Journal of Architectural Engineering , 121 (4), </title> <address> New York: </address> <publisher> American Society of Civil Engineers. </publisher> <pages> pp. 147-152. </pages>
Reference-contexts: The overall goals of the PhD Thesis Spring 1998 63 Second Generation Systems project are summarized below by <ref> [Flemming and Woodbury 1995] </ref>; note that the SEED project is the context for the research described in later chapters. The SEED project intends to develop the prototype of a software environment to support the early phases in building design.
Reference: [Flemming et al. 1994] <author> Flemming U., R. Coyne, J. </author> <title> Snyder (1994). </title> <booktitle> Case-Based Design in the SEED System in Computing in Civil Engineering Khalil Khozeimeh (ed.) , volume 1 of 2, </booktitle> <pages> pp. 446-453, </pages> <booktitle> Proceedings of the First Congress held in conjunction with the A/E/C Systems `94, </booktitle> <address> Washington, DC, June 20-22, New York: </address> <publisher> American Society of Civil Engineers. </publisher>
Reference-contexts: However, not all of the issues addressed by the pure AI approach are relevant; a slightly variant approach to this problem is described in <ref> [Flemming et al. 1994] </ref> and [Flemming et al. 1995]. Generative Design Systems CAD systems can play an active part in the construction of internal design descriptions that are both well-formed and sufficiently detailed to support analysis, simulation, and visualization.
Reference: [Flemming et al. 1995] <author> Flemming U., R. Coyne, J. </author> <title> Snyder (1995). Functional Units, Design Units, </title> <booktitle> Technologies: The Compoenents of Case-Based Design in the SEED System in Computing in Civil Engineering J. </booktitle> <editor> P. Mohsen (ed.), </editor> <booktitle> volume 1 of 2, </booktitle> <pages> pp. 17-24, </pages> <booktitle> Proceedings of the Second Congress held in conjunction with the A/E/C Systems `95, </booktitle> <address> Atlanta, GA, June 5-8, New York: </address> <publisher> American Society of Civil Engineers. </publisher>
Reference-contexts: However, not all of the issues addressed by the pure AI approach are relevant; a slightly variant approach to this problem is described in [Flemming et al. 1994] and <ref> [Flemming et al. 1995] </ref>. Generative Design Systems CAD systems can play an active part in the construction of internal design descriptions that are both well-formed and sufficiently detailed to support analysis, simulation, and visualization.
Reference: [Flemming et al. 1996] <author> Flemming, U., Aygen, Z., Snyder, J. and J. </author> <title> Tsai (1996). A2: An Architectural Agent in a Collaborative Engineering Environment. </title> <type> PhD Thesis Spring 1998 153 References Technical Report EDRC-48-38-96, </type> <institution> Engineering Design Research Center, Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference-contexts: S. Army Construction Engineering Research Labs ( USACERL ), was a multi-institutional research effort aimed at investigating concurrent engineering ( CE ) technologies to support collaboration between participants in the facility design and delivery process [Khedro 1995], <ref> [Flemming et al. 1996] </ref>. USACERL organized a team of researchers representing four major universities: the Massachusetts Institute of Technology, Stanford University, the University of Illinois at Urbana-Champaign, and Carnegie Mellon University ( CMU ). <p> An important advantage of this architecture is that it can be formally specified in a computable model and therefore formally verified. The OML Experiments 70 The Agent Communication Language Project Important Findings A detailed summary of the research results of the ACL project can be found in [Khedro 1995]. <ref> [Flemming et al. 1996] </ref> provides a SEEDspecific summary of the research results of the ACL project and was a critical source of direction for the investigation of the overall research; a summary of the findings is provided in the following extended quotation: Successful Project Aspects We believe that to the projects
Reference: [Forgy and McDermott 1976] <author> Forgy, C. L. and J. </author> <title> McDermott (1976). Production system conflict resolution strategies. </title> <type> Technical Report C28R 76-56, </type> <institution> Department of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference-contexts: The most famous languages in this series are the original OPS <ref> [Forgy and McDermott 1976] </ref>, OPS5 [Brownston et al. 1985], and CLIPS [Giarratano and Riley 1989]. These systems utilize rules to express the relationships between facts.
Reference: [Galle 1995] <author> Galle, P. </author> <year> (1995). </year> <title> Towards Integrated, </title> <booktitle> Intelligent, and Compliant Computer Models of Buildings Automation in Construction , 4 (3), </booktitle> <pages> pp. 189-211. </pages>
Reference-contexts: However, many other researchers have pointed out that this approach is not the complete answer, nor does this problem seem to be solved as stated by <ref> [Galle 1995] </ref>: Despite the considerable results achieved so far, it seems fair to conclude that the ideal integrated system as characterized in Section 2 of the present paper is still a goal, rather than a reality.
Reference: [Gamma et al. 1995] <author> Gamma, E., Helm,R., Johnson, R. and J. </author> <title> Vlissides (1995). Design Patterns: Elements of Reusable Object Oriented Software . Reading: </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: The ability to overload a method (function) name with differing argument lists is referred to as polymorphic types, and this capability coupled with the object structuring techniques composition and delegation have shown the power and flexibility of the approach <ref> [Gamma et al. 1995] </ref> and account for its longevity. The benefit of objectoriented languages became apparent, and they soon overshadowed the modular languages. In fact, many modular languages tried to move in the direction of object orientation as in the example of objectoriented Fortran and Cobol. 5 4. <p> If a programming language approach were used, some expensive software engineering technique would have to be used to make the integration occur, for example, reengineering the class hierarchy to inherit from a common parent or creating bridge design patterns to connect systems <ref> [Gamma et al. 1995] </ref>. PhD Thesis Spring 1998 85 Schematic Elements 6.1.2 Managing Versions, Configurations, and Alternatives The management of large and changing compositions of information is an important part of an information modeling environment. <p> The only capability that should be assumed is the ability to transmit a data structure over a reliable communication mechanism (e.g. TCP/IP sockets or disk files). Information Modeling Environment Requirements 98 Design Patterns for Product/Process Modeling 6.3.3 Design Patterns for Product/Process Modeling The rapid emergence of design patterns <ref> [Gamma et al. 1995] </ref> has yet to impact the way in which product and process models are designed. <p> Application Frameworks Application frameworks are recurring software components and provide a software development infrastructure for well-defined application areas and user interface capabilities by employing design pattern software engineering principles <ref> [Gamma et al. 1995] </ref>. The ET++ public domain application framework is available on UNIX and Windows platforms and was used to develop several components in the SPROUT environment. By using this kind of framework, development of multi-platform applications without platformspecific source code becomes possible.
Reference: [Garlan 1995] <author> Garlan, D. </author> <year> (1995). </year> <booktitle> Research Directions in Software Architecture ACM Computing Surveys 27 (2) June. </booktitle> <pages> pp 257-261. </pages> <publisher> ACM Press: </publisher> <address> New York, NY. </address>
Reference-contexts: Any binding technique, including formal and automated ones, must provide mechanisms to overcome these types of pragmatic software engineering issues. Ideally, any technique should provide explicit constructs to handle such cases. 6.3 Software Architecture A commonly accepted definition of a software architecture is given by <ref> [Garlan 1995] </ref> and is used for the purposes of this discussion. A software architecture is: ...a modularization of a system as a graph, or configuration, of components and connectors. Components define the application-level computations and data stores. Examples include clients, servers, filters, databases, and objects.
Reference: [Garrett et al. 1995] <author> Garrett, J., Killiccote, H., and B. </author> <title> Choi (1995). Providing Formal Support for Standards Usage within SEED Journal of Architectural Enginnering , 1 (4), </title> <journal> pp. </journal> <pages> 187-194. </pages>
Reference: [Gero 1988] <author> J.S. Gero, M.L. Maher and W. </author> <title> Zhang (1988). Chunking Structural Design Knowledge as Prototypes. </title> <institution> Technical Report EDRC-12-25-88 2 , Engineering Design Research Center, Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference-contexts: Design Prototypes Additionally, formalizations heavily borrowing from AI research were proposed such as Design Prototypes <ref> [Gero 1988] </ref> 8 . Design prototypes allow the structuring of design knowledge into chunks classified as structure/ behavior/function; this was one of the first attempts to overtly use a highly structured knowledge representation to capture design knowledge. 6. DAI is covered in more detail in the next chapter.
Reference: [Gero 1991] <author> Gero, J.S. </author> <year> (1991). </year> <booktitle> Artificial Intelligence in Design 91, </booktitle> <publisher> Oxford: Butterworth-Heinemann. </publisher>
Reference-contexts: The buzz words knowledge-based or intelligent CAD systems refer to systems of this nature. Standard text books (such as [Coyne et al. 1991]) have been produced covering the different approaches as applied to design as well as the regularly held international conference AI in Design <ref> [Gero 1991] </ref>. An inventory, justification, and critique of AI approaches in design are given in [Flemming 1994b] as well as a position statement regarding research directions in AI-based design. Several approaches have emerged in the literature: 1.
Reference: [Gips and Stiny 1980] <author> Gips, J. and G. </author> <month> Stiny </month> <year> (1980). </year> <title> Production systems and grammars: a uniform characterization Environment and Planning B: </title> <journal> Planning and Design , 7 , pp. </journal> <pages> 399-408. </pages>
Reference-contexts: In principle, generative systems manipulate and generate design descriptions using rigorous and formalized mechanisms, and they are a form of the more general production systems . Production systems can be viewed as a formal grammar where elements (or terms) are changed using rewrite rules [Chomsky 1956]. As a reference, <ref> [Gips and Stiny 1980] </ref> describe a uniform characterization of grammars and production systems, while [Paakki 1995] characterizes grammars in the more strict attribute grammars. Using a production system as the underlying mechanism, several kinds of generative systems have emerged in the literature 9 : 1.
Reference: [Giarratano and Riley 1989] <author> Giarratano, J. C. and G. </author> <title> Riley (1989). </title> <booktitle> Expert Systems: Principles and Programming. </booktitle> <publisher> Boston : PWS Pub. Co. </publisher> <year> 1989. </year>
Reference-contexts: The most famous languages in this series are the original OPS [Forgy and McDermott 1976], OPS5 [Brownston et al. 1985], and CLIPS <ref> [Giarratano and Riley 1989] </ref>. These systems utilize rules to express the relationships between facts.
Reference: [Gorti and Sriram 1993] <author> Gorti, S, R. and Sriram, D. </author> <year> (1993). </year> <title> CONGEN: An Integrated Approach to Conceptual Design. </title> <journal> International Journal of CAD/CAM and Computer Graphics , 8 (2):135150. Special AI issue. </journal> <note> References 154 PhD Thesis Spring 1998 </note>
Reference-contexts: Process modeling has received far less research attention than product modeling. Current research has reached a consensus that the product and process models should be integrated into a single representational framework [Wong and Sriram 1994a], <ref> [Gorti and Sriram 1993] </ref>, [Howard 1994], [de Vries and Somers 1995], and [Lawrence et al. 1995]. 3.3 The Information Exchange Problem Product and process modeling languages are believed to be the unifying mechanism to solve the information exchange problem . 7 Essentially, integration between CAD software systems cannot occur until information <p> The above experience has been repeatedly reported in the data exchange literature. 4.2.2 DICE The Distributed and Integrated Environment for Computer Aided Engineering ( DICE ) project is a broad research effort of the Intelligent Engineering Research Laboratory at MIT. The project objectives are summarized by <ref> [Gorti and Sriram 1993] </ref>: 1. Facilitate effective coordination and communication in various disciplines involved in engineering. 2. Capture the process by which individual designers make decisions, that is, what infor mation was used, how it was used, and what did it create. 3.
Reference: [Gosling et al. 1996] <author> Gosling, J. Joy, B., and G. </author> <title> Steele (1996). The Java Language Specification , Reading: </title> <address> MA </address>
Reference-contexts: As such, important differences in use and implementation exist between SPROUT and Eiffel. 7.1.1 Packages Unlike Eiffel, SPROUT supports qualified schematic element naming via a package naming, thereby defining a package scope in a manner similar to but not identical to the Java programming language <ref> [Gosling et al. 1996] </ref>. Specifically, element names in SPROUT are either automatically fully qualified by the current package name, or they must be explicitly fully qualified. By convention, all built-in SPROUT elements are qualified by the package sprout.lang . For example, the fully qualified domain Integer would be sprout.lang.Integer .
Reference: [Gruber et al. 1992] <author> Gruber, T. R., Tenenbaum, J. M., and J.C. </author> <title> Weber (1992) Toward a knowledge medium for collaborative product development in: </title> <editor> J. S. Gero (ed.) </editor> <booktitle> Artificial Intelligence in Design 92 . Boston: </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <pages> pp. 413-432. </pages>
Reference: [Hannus et al. 1995] <author> Hannus, M., Karstila, K. and V. </author> <month> Tarandi </month> <year> (1995). </year> <title> Requirements on Standardised Building Product Data Models in Proceedings of ECPPM 94 - The First European Conference on Product and Process Modelling in the Building Industry R. </title> <editor> J. Scherer (ed.), </editor> <address> Dresden, Germany, </address> <month> October 5-7, </month> <year> 1994, </year> <editor> Rotterdam: A. A. </editor> <publisher> Balkema. </publisher>
Reference-contexts: Conceptual (Information) Modeling 44 The Scope and Scale of Information Exchange and reliably exchanged. What is currently being debated in the research community is the scope and scale of this information exchange. Many approaches to exchanging information have been identified and are summarized in <ref> [Hannus et al. 1995] </ref> where it is argued that generic data structures should be the focus of research not application-dependent definitions.
Reference: [Hayes-Roth 1979] <institution> Blackboard reference. </institution>
Reference-contexts: DAI research addresses the issues that arise when multiple knowledge-based and traditional CAD systems are used together. 2. Blackboard Systems Blackboard systems are another form of DAI; however, the distinguishing capability is the planning aspect of blackboards <ref> [Hayes-Roth 1979] </ref>. All agents share information via a shared structure (referred to as the blackboard) with a planning agent controlling when other agents are scheduled to contribute and what specific items they are to produce. 7 3.
Reference: [Heiler 1995] <author> Heiler, S. </author> <year> (1995). </year> <booktitle> Semantic Interoperability ACM Computing Surveys , 27 (2), </booktitle> <address> New York: </address> <publisher> ACM Press, </publisher> <pages> pp. 271-273. </pages>
Reference-contexts: Research in object repositories specifically for metadata attempt to overcome this problem by agreeing on the semantic interoperation of exchanges based on explicit and shared semantic repositories <ref> [Heiler 1995] </ref>. Motivation 18 Research Areas in CAAD domain models are not directly addressed because they can be supported once a comprehensive framework and a set of abstract models are established.
Reference: [Heisserman 1991] <author> Heisserman, J. A. </author> <year> (1991). </year> <title> Generative Geometric Design and Boundary Solid Grammars Ph.D. </title> <type> Dissertation, </type> <institution> Department of Architecture, Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference-contexts: This is not an exhaustive list of systems. However, several important and wellstudied ones are listed here. Not listed are Structure Grammars [Carlson et al. 1990], Boundary Solid Grammars <ref> [Heisserman 1991] </ref>, Graph Gram mars [Meyer and Fenves 1993]. PhD Thesis Spring 1998 13 Summary 2. Layout Grammars (Loosely Packed Arrangements of Rectangles) LPARs allow the synthesis of schematic layouts in rectilinear configurations.
Reference: [Howard 1986] <author> Howard, H. C. </author> <year> (1986). </year> <title> Interfacing databases and knowledge based systems for structural engineering applications . Ph.D. </title> <type> Thesis, </type> <institution> Department of Civil Engineering, Carnegie Mellon University, </institution> <address> Pittsbugh, PA. </address>
Reference: [Howard 1994] <author> Howard, H. C. </author> <year> (1994). </year> <title> A Decomposition of the Integration Problem for the AEC Industry in Bridging the Generations: </title> <booktitle> International Workshop on the Future Directions of Computer-Aided Engineering (position papers submitted to the workshop) D. </booktitle> <editor> Rehak (ed.), </editor> <month> July 18-19, </month> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference-contexts: Process modeling has received far less research attention than product modeling. Current research has reached a consensus that the product and process models should be integrated into a single representational framework [Wong and Sriram 1994a], [Gorti and Sriram 1993], <ref> [Howard 1994] </ref>, [de Vries and Somers 1995], and [Lawrence et al. 1995]. 3.3 The Information Exchange Problem Product and process modeling languages are believed to be the unifying mechanism to solve the information exchange problem . 7 Essentially, integration between CAD software systems cannot occur until information can be correctly 7.
Reference: [ISO 10303 Part 11] <author> ISO 10303 Committee. </author> <title> Part 11 The EXPRESS Language and Reference Manual. </title>
Reference-contexts: STEP is multinational and quite large. Readers not familiar with STEP s scope are referred to STEP on a Page [Nell 1996]. To facilitate the definition of product data models, the EXPRESS language was developed and continues to evolve <ref> [ISO 10303 Part 11] </ref>. EXPRESS has a Pascal-flavored syntax for defining schematic representations of data models. Because both STEP and EXPRESS are quite large, a comprehensive description is not given here. Rather, specific features, relevant to the discussion developed in Chapter 3, are presented.
Reference: [Kelly et al. 1995] <author> Kelly, W., Gala, S., Kim, W., Reyes, T., and Grahm, B. </author> <year> (1995). </year> <title> Schema architecture of the UniSQL/M multidatabase system. in Modern Database Systems: The Object model, Interoperability, </title> <publisher> and Beyond , ACM Press, </publisher> <address> New York, NY, </address> <month> 621-648. </month> <type> PhD Thesis Spring 1998 155 References </type>
Reference-contexts: For example, many object database systems require the use of a specific programming language such as C++, a constraint that directly violates our requirements for programming language independence. The UniSQL object/relational database system is a reference implementation that meets all the stated capabilities <ref> [Kelly et al. 1995] </ref>. Object/relational databases provide full PhD Thesis Spring 1998 123 Software Processes and Assumptions object implementations, while allowing the incorporation of existing relational databases as a static class within the object system.
Reference: [Khedro 1995] <author> Khedro, T., Case, M. P. , Flemming,U. , Genesereth, M. R., Logcher,R. , Pedersen, C. , Snyder, J. ,Sriram,R. D. and P. M. </author> <month> Teicholz </month> <year> (1995). </year> <title> Development of a Multi-Institutional Testbed for Collaborative Facility Engineering Infrastructure in J. </title> <editor> P. Mohsen (Ed.) </editor> <booktitle> Computing in Civil Engineering : volume 2: Proceedings of the Second Congress held in conjunction with the A/E/C Systems `95 , Atlanta, </booktitle> <address> GA, June 5-8, New York: </address> <publisher> American Society of Civil Engineers. </publisher> <pages> pp. 1308-1315. </pages>
Reference-contexts: While this view is also shared by Eastman, the details of how this is achieved are not presented. It should also be pointed out that this issue is different from knowl edge sharing or concept mapping as found in ([Gruber et al. 1992], <ref> [Khedro 1995] </ref>) or [Amor and Hosking 1995] respectively. Motivation 16 Research Areas in CAAD developed from an overall system perspective, rather than a bottom-up approach, allowing the modeling of diverse design information. 2. <p> In contrast to the above perspective, most building industry research and commercial systems make use of a shared schema at some level (see [Pohl et al. 1992], [Wright et al. 1992], [Sriram and Logcher 1993], [Eastman 1994a], and [Fenves et al. 1994]), while some systems use a federated approach <ref> [Khedro 1995] </ref>. These issues are addressed in more detail in the sections that follow. 4. Information Technology 5. The authors are referring to distributed software architectures. <p> S. Army Construction Engineering Research Labs ( USACERL ), was a multi-institutional research effort aimed at investigating concurrent engineering ( CE ) technologies to support collaboration between participants in the facility design and delivery process <ref> [Khedro 1995] </ref>, [Flemming et al. 1996]. USACERL organized a team of researchers representing four major universities: the Massachusetts Institute of Technology, Stanford University, the University of Illinois at Urbana-Champaign, and Carnegie Mellon University ( CMU ). <p> The sponsor had established at the outset that the cooperation of these systems was to be based on the agent-based Federation Architecture developed by Stanford, which intends to allow independent software agents to exchange information by communicating with facilitators through appropriately designed APIs <ref> [Khedro 1995] </ref>. During the course of the project, the team members also realized that each team had its own internal agent architecture, and some kind of unifying syntax and semantics of object descriptions was needed to allow message exchanges to occur. <p> An important advantage of this architecture is that it can be formally specified in a computable model and therefore formally verified. The OML Experiments 70 The Agent Communication Language Project Important Findings A detailed summary of the research results of the ACL project can be found in <ref> [Khedro 1995] </ref>. [Flemming et al. 1996] provides a SEEDspecific summary of the research results of the ACL project and was a critical source of direction for the investigation of the overall research; a summary of the findings is provided in the following extended quotation: Successful Project Aspects We believe that to
Reference: [Kiloccote 1996] <author> Kiloccote, H. </author> <year> (1996). </year> <title> A Standards Processing Framework PhD Thesis. </title> <institution> Dept.of Civil and Environmental Engineering. Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference-contexts: The benefit and added capability of having formal methods has been demonstrated in other research areas such as standards usage ([Garrett et al. 1995], <ref> [Kiloccote 1996] </ref>). Given the ability to adequately model information, integrating existing applications within the information model becomes a critical issue. For practical implementation, the broad range of existing software systems cannot be reimplemented or redesigned. However, the information available in them is essential if true integration is to occur. 3. <p> Each kind should support a specific representational capability that facilitates representing design objects of interest. 6.1.5 Multiple Classifications Part of the experimentation with OML framework focused on the organization of classes with the inheritance hierarchy. This experimentation, coupled with a literature survey (see <ref> [Kiloccote 1996] </ref> for a complete discussion), found that inheritance is many times inappropriately used to classify objects in different ways that have nothing or very little to do with the behavioral aspects of a class. Figure 23 shows example classifications of a spatial design element.
Reference: [Kolodner 1993] <author> Kolodner, J. L. </author> <year> (1993). </year> <title> Case-Based Reasoning , San Mateo, </title> <address> CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [Krishnamurti 1992] <author> Krishnamurti, R. </author> <year> (1992). </year> <title> The Maximal Representation of a Shape Environment and Planning B: </title> <journal> Planning and Design 19 , pp. </journal> <pages> 267-288. </pages>
Reference-contexts: They attempt to define syntactic transformations of shapes with a formalized set of rewrite rules. The basic grammatical element is a shape which in turn is defined as a set of maximal lines (see <ref> [Krishnamurti 1992] </ref> for a description of an implementation). 9. This is not an exhaustive list of systems. However, several important and wellstudied ones are listed here. Not listed are Structure Grammars [Carlson et al. 1990], Boundary Solid Grammars [Heisserman 1991], Graph Gram mars [Meyer and Fenves 1993].
Reference: [Lawrence et al. 1995] <author> Lawrence, P., Brucker, B., Case, M., Ganeshan, R., Golish, M., Griffith, E. and J. Heckel. </author> <year> (1995). </year> <title> Application of Integrated Product and Process Development in the Facility Delivery in in J. </title> <editor> P. Mohsen (Ed.) </editor> <booktitle> Computing in Civil Engineering : volume 1: Proceedings of the Second Congress held in conjunction with the A/E/C Systems `95 , Atlanta, </booktitle> <address> GA, June 5-8, New York: </address> <publisher> American Society of Civil Engineers. </publisher> <pages> pp. 139-146. </pages>
Reference-contexts: Process modeling has received far less research attention than product modeling. Current research has reached a consensus that the product and process models should be integrated into a single representational framework [Wong and Sriram 1994a], [Gorti and Sriram 1993], [Howard 1994], [de Vries and Somers 1995], and <ref> [Lawrence et al. 1995] </ref>. 3.3 The Information Exchange Problem Product and process modeling languages are believed to be the unifying mechanism to solve the information exchange problem . 7 Essentially, integration between CAD software systems cannot occur until information can be correctly 7.
Reference: [Levesque and Brachman 1985] <author> Levesque, H. J. and R. J. </author> <title> Brachman (1985). A Fundamental Tradeoff in Knowledge Representation and Reasoning in Readings in Knowledge Representation , R. </title> <editor> J. Brachman and H. J. Levesque (eds). </editor> <address> San Mateo: </address> <publisher> Morgan Kaufmann Publishers. </publisher>
Reference-contexts: An example Prolog rule is show in Figure 3 with the equivalent logic representation. In this example, the rule base would be capable proving that fluffy is an apartment pet. 2.2.4 KL-ONE Language Family The KL-ONE language family is described in <ref> [Levesque and Brachman 1985] </ref>: PhD Thesis Spring 1998 27 Knowledge Representation and Programming It concentrates on the definition of structured concepts, their organization into taxonomies, the creation and manipulation of individual instances of concepts, and the key inferences of subsumption and classification.
Reference: [Liebich 1995] <author> Liebich, T. </author> <year> (1995). </year> <title> Managing Design Data: Including CAD in Integrated Environments in Proceedings of ECPPM 94 - The First European Conference on Product and Process Modelling in the Building Industry R. </title> <editor> J. Scherer (ed.), </editor> <address> Dresden, Germany, </address> <month> October 5-7, </month> <year> 1994, </year> <editor> Rotterdam: A. A. </editor> <publisher> Balkema. </publisher>
Reference-contexts: This problem has been identified by [Eastman 1991] as the coordination of multiple representations; recent literature continues to bring up this issue as in <ref> [Liebich 1995] </ref>.
Reference: [Lindholm and Yellin 1997] <author> Lindholm, T. and Yellin, F. </author> <year> (1997). </year> <title> The Java Virtual Machine Specification , Reading, </title> <address> MA. </address>
Reference-contexts: If traditional development techniques were used, an application would have to be developed for each needed hardware platform leading to extensive redevelopment. A good example environment is the Java virtual machine as a platform-independent runtime system <ref> [Lindholm and Yellin 1997] </ref>.
Reference: [Lockley et al. 1995] <author> Lockley, S.R., W. Rombouts, W. </author> <month> Plokker </month> <year> (1995). </year> <title> The COMBINE Data Exchange System in Proceedings of ECPPM 94 - The First European Conference on Product and Process Modelling in the Building Industry R. </title> <editor> J. Scherer (ed.), </editor> <address> Dresden, Germany, </address> <month> October 5-7, </month> <year> 1994, </year> <note> Rotterdam: </note> <author> A. A. </author> <title> Balkema. </title> <type> References 156 PhD Thesis Spring 1998 </type>
Reference-contexts: This is a time consuming task which moreover can lead to a false conclusion depending on the completeness of the chosen examples. The COMBINE project also noted that application integration is difficult when the internal representation must be mapped to and from a shared model as stated in <ref> [Lockley et al. 1995] </ref>. In COMBINE the IDM development is driven by the data communication requirements of the design tools. The IDM, whilst trying to be generic, aims to integrate these data exchange requirements. Each of the design tools has its own internal data model. <p> The objectoriented formal specification approach helps to manage the complexity as discovered in both the ACL and COMBINE approaches; <ref> [Lockley et al. 1995] </ref> cites a typical example of these difficulties: An example of the mapping needed is that between the geometric and topological entities in the IDM and the area of a wall. i.e.
Reference: [Loucopoulos 1992] <author> Loucopoulos, P. </author> <year> (1992). </year> <title> Introduction: Section One: Conceptual Modeling in Conceptual Modeling, Databases, and CASE: An Integrated View of Infromation System Development P. </title> <editor> Loucopoulos and R. Zicari (eds). </editor> <address> New York: </address> <publisher> John Wiley & Sons, Inc. </publisher> <pages> pp. 1-26. </pages>
Reference-contexts: As a result, a new research area, called conceptual modeling , has emerged as a cross-discipline way of dealing with this complexity. This emergence is described in <ref> [Loucopoulos 1992] </ref> page 1: The growing demand for information systems of ever-increasing size, scope, and complexity has caused the introduction of various high-level modeling languages, by which functional application requirements and information system components may be modeled at a conceptual level.
Reference: [Mahdavi 1998] <author> Mahdavi, A. </author> <year> (1998): </year> <title> "A Middle Way to Integration", </title> <booktitle> Proceedings of the 4th international conference on design and decision support systems in architecture and urban planning , Maastrict, </booktitle> <address> the Netherlands, </address> <note> July 1998 (to be published). </note>
Reference-contexts: In fact, the authors point out that integration with CAD and simulation is an necessary step for active designer participation. An important contribution from the SEMPER project is the manner in which they developed and describe their shared representation <ref> [Mahdavi 1998] </ref>.
Reference: [Mahdavi et al. 1996] <author> Mahdavi, A., Mathew, P., Lee, S., Brahme, R., Kumar, S., Liu, G., Ries, R., Wong, </author> <booktitle> N-H (1996a): "On the Structure and Elements of SEMPER" Proceedings of the the Association for Computer Aided Design in Architecture (ACADIA) 1996 Conference , Tucson, </booktitle> <address> AZ, </address> <year> 1996, </year> <pages> pp. 71-84. </pages>
Reference-contexts: The authors noted that current CAD support for performance simulation tools is lacking because 1) simplified performance models are used, 2) a lack of integration between CAD tools and performance simulation tools, and 3) simulation tools do not support design in an active way <ref> [Mahdavi et al. 1996] </ref>. Within their context, the SEMPER project is developing solutions to solve the above problems, and in particular, have pointed out that a shared object model is an important part of achieving integration performance simulation tools.
Reference: [Mahdavi et al. 1997] <author> Mahdavi, A., Mathew, P., Kumar, S., Wong, </author> <month> N-H </month> <year> (1997): </year> <title> BiDirectional Computational Design Support in the SEMPER Environment", </title> <booktitle> Automation in Construction 6 (1997) pp. </booktitle> <pages> 353-373. </pages>
Reference-contexts: These issues will be elaborated in the chapters to come. 4.2.6 SEMPER The Department of Architecture at Carnegie Mellon University is developing a computational environment, called SEMPER, for multi-domain building design support <ref> [Mahdavi et al. 1997] </ref>.
Reference: [Maher 1984] <author> Maher, M.L, and S. J. </author> <month> Fenves </month> <year> (1984) </year> <month> HI-RISE: </month> <title> An expert system for the preliminary structural design of high rise buildings . Technical Report R-85-146, </title> <institution> Department of Civil Engineering, Carnegie Mellon University, Pittsburgh. </institution>
Reference-contexts: PhD Thesis Spring 1998 11 Computer Support for Architectural Design Artificial Intelligence Approaches A significant body of research in CAD has been directed toward Artificial Intelligence (AI) approaches. Several significant, and successful expert systems, such as HI-RISE <ref> [Maher 1984] </ref>, focused research efforts towards multiple experts working together. The buzz words knowledge-based or intelligent CAD systems refer to systems of this nature.
Reference: [Marcotty and Ledgard 1986] <author> Marcotty, M. and H. F. </author> <title> Ledgard (1986). Programming Language Landscape: Syntax/Semantics/Implementation (Second Edition) . Chicago: </title> <publisher> Science Research Associates, Inc. </publisher>
Reference-contexts: Contributions from Computer Science 20 Machine and Assembly Languages hour which made them quite difficult to use. However, stored program computers became available and are very much like the computers we use today. 2.1.1 Machine and Assembly Languages The history of computing until 1954 is best summarized by <ref> [Marcotty and Ledgard 1986] </ref> page 1: Before 1954 almost all programming was done in machine language. Solving a problem on a computer required the detailed encoding of a long sequences of instructions into numbers in binary or octal form. <p> pointed out that each computer manufacturer had a proprietary assembler language, and quite often, a separate one for each computer model; a program was in no way portable. 2.1.2 Structured Programming Languages Interestingly, many people resisted automating computer program writing because they believed that only humans could write code efficiently <ref> [Marcotty and Ledgard 1986] </ref>. However, others believed that computing would become economical and widespread in the scientific community if programs could be developed faster. 2 In 1954, John Backus formed the F OR mula T RAN slator (Fortran) group with the purpose of translating mathematical formulas into machine language.
Reference: [Meyer 1988] <author> Meyer, B. </author> <year> (1988). </year> <booktitle> Object Oriented Software Construction . Prentice-Hall, </booktitle> <address> Englewood-Cliffs, NJ. </address>
Reference-contexts: The most appropriate formal representation for well-formed data is abstract data types ( ADT s) as defined by <ref> [Meyer 1988] </ref>. From a modeling language perspective, we must point out differences between abstract data type implementations and programming language implementations. <p> For a complete and formal syntactic definition of any element introduced see Appendix D. Additionally, a complete example of a SPROUT schema is given at the end of this chapter. 7.1 Notation and Conventions As briefly described previously, the SPROUT syntax is heavily influenced by the Eiffel objectoriented language <ref> [Meyer 1988] </ref>. Eiffel embodies good language design principles and has the added benefit of having abstract data types at the core of its language design. It was therefore a natural and important reference work. <p> However, domains provide additional capability not found in databases and also have a close relationship with abstract data types (ADTs) found in objectoriented programming <ref> [Meyer 1988] </ref>. In particular, domains have axioms associated with them that define the well-formedness conditions for the domain values. Domains are either simple or complex. <p> Function A domain function defines a computation and a resulting value associated with a domain. Functions have optional named arguments having domains as their types. If a function has no arguments, it can be treated as an attribute of the domain value; this feature is described in <ref> [Meyer 1988] </ref>. In other words, there is no syntax to define an empty argument list. The syntax for function bodies is very similar to the Eiffel language [Meyer 1988]; Eiffel heavily influenced the structure of the code. <p> If a function has no arguments, it can be treated as an attribute of the domain value; this feature is described in <ref> [Meyer 1988] </ref>. In other words, there is no syntax to define an empty argument list. The syntax for function bodies is very similar to the Eiffel language [Meyer 1988]; Eiffel heavily influenced the structure of the code. Functions can be overloaded (polymorphism and dynamic binding) and inherited as found in traditional objectoriented languages. However, unlike C++, there are no virtual functions. <p> The arguments and return type of a method must belong to either a previously specified domain or a class. In addition, any function or arithmetic expression stated within a method must resolve to a domain or class. Methods provide for orderly exception handling in the same manner as Eiffel <ref> [Meyer 1988] </ref>. Failing operations occur when some condition that must be preserved is violated, for example a precondition or postcondition.
Reference: [Meyer and Fenves 1993] <author> Meyer, S. and S. </author> <month> Fenves </month> <year> (1993). </year> <title> Adjacency structures as Mappings Between Funtion and Structure in Discrete Static Systems in CAAD Futures 93: </title> <booktitle> Proceedings of the Fifth International Conference on Computer-Aded Architectural Design Futures U. </booktitle> <editor> Flemming and S. Van Wyk (eds.) </editor> <publisher> Amsterdam: North-Holland, </publisher> <pages> pp. 175-193. </pages>
Reference-contexts: This is not an exhaustive list of systems. However, several important and wellstudied ones are listed here. Not listed are Structure Grammars [Carlson et al. 1990], Boundary Solid Grammars [Heisserman 1991], Graph Gram mars <ref> [Meyer and Fenves 1993] </ref>. PhD Thesis Spring 1998 13 Summary 2. Layout Grammars (Loosely Packed Arrangements of Rectangles) LPARs allow the synthesis of schematic layouts in rectilinear configurations.
Reference: [Myers et al. 1991] <author> Myers, L., Pohl, J. and A. </author> <title> Chapman (1991) The ICADS expert design advisor: concepts and directions in: </title> <editor> J. S. Gero (ed.) </editor> <booktitle> Artificial Intelligence in Design 91 . Butterworth-Heinenmann, </booktitle> <pages> pp. 897-920. </pages> <note> PhD Thesis Spring 1998 157 References </note>
Reference-contexts: Because the second generation tools have no notion of cooperative reasoning, cooperative, distributed design systems were developed. Distributed AI was employed as a method of dealing with these issues. Experimental third generation systems include the Intelligent Computer Aided Design System (ICADS) <ref> [Myers et al. 1991] </ref> and the Integrated Building Design Environment (IBDE) [Fenves et al. 1994] 3 . 3. CAD software for building design is severely disjoint. The information in one type of CAD tool cannot be directly used within another tool.
Reference: [Myers et al. 1992] <author> Myers, L., Snyder, J. and L. </author> <title> Chirica (1992). Database Usage in a Knowledgebase Environment for Building Design Building and Environment, </title> <type> 27(2), </type> <institution> pp.231-241. </institution>
Reference-contexts: Examples of this kind of integration can be seen in the integration of expert systems with relational database systems ([Howard 1986], [Snyder and Chrica 1990], and <ref> [Myers et al. 1992] </ref>). Because the information is stored in several different formats, sharing data between applications is virtually impossible unless all parties use exactly the same versions of the same software. <p> Its overall goal is best stated by <ref> [Myers et al. 1992] </ref>: Research, Systems, and Products 52 ICADS The ICADS project has the goal of developing a system which understands the language of architectural design and converses with the designer throughout the entire design life cycle as a team of intelligent assistants. <p> IDT DESIGN INTERFACE GEOMETRY INTERPRETER CONTROL IDT ( CONFLICT RESOLVER ) MESSAGE ROUTER BUILDING TYPE DB SITE DB DESIGN PROGRAM REFERENCE DB GEOMETRIC DB EXISTING CAD DRAWING SYSTEM PREDESIGN MODULE PROTOTYPE DATABASE USER INTERFACE BLACKBOARD IDT S OURCE : <ref> [Myers et al. 1992] </ref> Research, Systems, and Products 54 ICADS each expert system to suggest solutions to design problems such as material selection and door or window placement. 5. <p> Programmers can in essence define objects on the fly. Once the database representation became available, tools were developed that automatically checked the expert systems rules for invalid or undefined pattern constructs <ref> [Myers et al. 1992] </ref>. The database representation of product models was only marginally better than the expert system representation. The object descriptions were based on object-attribute-value (OAV) triples and stored in three database tables. Essentially, objects could be synthesized on demand.
Reference: [Minsky 1975] <author> Minsky, M. </author> <year> (1975). </year> <title> A Framework for Representing Knowledge in The Psychology of Computer Vision , P. </title> <editor> H. Winston (ed.), </editor> <address> New York: </address> <publisher> McGraw-Hill, </publisher> <pages> pp. 211-277. </pages>
Reference-contexts: Design prototypes are, in reality, a specialized form of a frame-based semantic network as defined by [Quillian 1968] and <ref> [Minsky 1975] </ref>, and as such were not new to AI but was new to CAD; semantic networks are covered in a later chapter. Motivation 12 Research Areas in CAAD 4. <p> PhD Thesis Spring 1998 25 Knowledge Representation and Programming 2.2.2 Frames Frames were introduced by Minsky as a generalized form for representing knowledge in vision perception and natural language dialogues <ref> [Minsky 1975] </ref>. As with other AI techniques, the original concept utilized object-attribute-value (OAV) triples where attributes have values associated with them. Attribute values can have defaults or be constrained via facets.
Reference: [Nell 1996] <author> Nell, J. </author> <year> (1996). </year> <note> Step on a Page Technical Report. </note> <institution> National Instititues of Standards and Technology. Gaithersburg, MD. </institution> <note> (see STEP Web site at http://www.nist.gov/sc4 </note> ). 
Reference-contexts: The Product Data Exchange Using STEP ( PDES ) project is a U.S. project that provides industrial input to the ISO committee. STEP is multinational and quite large. Readers not familiar with STEP s scope are referred to STEP on a Page <ref> [Nell 1996] </ref>. To facilitate the definition of product data models, the EXPRESS language was developed and continues to evolve [ISO 10303 Part 11]. EXPRESS has a Pascal-flavored syntax for defining schematic representations of data models. Because both STEP and EXPRESS are quite large, a comprehensive description is not given here.
Reference: [Paakki 1995] <author> Paakki, J. </author> <year> (1995). </year> <title> Attribute Grammar Paradigms: </title> <booktitle> A High-Level Methodology in Language Implementation ACM Computing Surveys , 27 (2), </booktitle> <address> New York: </address> <publisher> ACM Press, </publisher> <pages> pp. 196-255. </pages>
Reference-contexts: Production systems can be viewed as a formal grammar where elements (or terms) are changed using rewrite rules [Chomsky 1956]. As a reference, [Gips and Stiny 1980] describe a uniform characterization of grammars and production systems, while <ref> [Paakki 1995] </ref> characterizes grammars in the more strict attribute grammars. Using a production system as the underlying mechanism, several kinds of generative systems have emerged in the literature 9 : 1. Shape Grammars Shape grammars, introduced by [Stiny 1980], are a formal grammar much like string grammar.
Reference: [Parent and Spaccapeitra 1992] <author> Parent, C. and S. </author> <month> Spaccapierta </month> <year> (1992). </year> <title> ERC+: An Object-Based Entity Relationship Approach in Conceptual Modeling, Databases, and CASE: An Integrated View of Infromation System Development P. </title> <editor> Loucopoulos and R. Zicari (eds). </editor> <address> New York: </address> <publisher> John Wiley & Sons, Inc. </publisher> <pages> pp. 69-86. </pages>
Reference-contexts: Therefore, a more consistent and uniform mechanism can be employed to address relationship management. In fact, several authors suggest that relationships can be generalized with their own properties and definitions ([Rumbaugh 1987], <ref> [Parent and Spaccapeitra 1992] </ref>); they are not , however, objects (or specializations of objects) in their own right; that is, inheritance for relationships is not the same as for objects.
Reference: [Pohl et al. 1992] <author> Pohl J., L. Myers, J. Cotton, A. Chapman, J. Snyder, H. Chauvet, K. Pohl, J. </author> <title> La Porta (1992). A Computer-Based Design Environment: Implemented and Planned Extensions of the ICADS Model . Technical Report, </title> <institution> CADRU-06-92, CAD Research Center, Design Institute, Cal Poly, </institution> <address> San Luis Obispo, CA, </address> <month> 93407. </month>
Reference-contexts: The four areas presented are a combination and adaptation of reviews presented by <ref> [Pohl et al. 1992] </ref>, [Eastman 1991], and [Eastman 1994b]. 1. Some might argue that this result is not surprising. 2. DOE-2 is an energy simulation package developed by the Department of Energy at the Lawrence Berkeley Labo ratories. <p> This approach is related to the idea of open systems. In contrast to the above perspective, most building industry research and commercial systems make use of a shared schema at some level (see <ref> [Pohl et al. 1992] </ref>, [Wright et al. 1992], [Sriram and Logcher 1993], [Eastman 1994a], and [Fenves et al. 1994]), while some systems use a federated approach [Khedro 1995]. These issues are addressed in more detail in the sections that follow. 4. Information Technology 5. <p> Existing tools, particularly knowledge-based ones, were used as a starting point in the integration process. 4.1.1 ICADS The Intelligent Computer Aided Design System (ICADS) was a project in the Computer Aided Design (CAD) Research Unit, Cal Poly, San Luis Obispo <ref> [Pohl et al. 1992] </ref>.
Reference: [Quillian 1968] <author> Quillian, M. R. </author> <year> (1968). </year> <title> Semantic Memory in Semantic Information Processing , M. </title> <editor> Minsky (ed.), </editor> <publisher> Cambridge: MIT Press, </publisher> <pages> pp. 216-270. </pages>
Reference-contexts: Design prototypes are, in reality, a specialized form of a frame-based semantic network as defined by <ref> [Quillian 1968] </ref> and [Minsky 1975], and as such were not new to AI but was new to CAD; semantic networks are covered in a later chapter. Motivation 12 Research Areas in CAAD 4. <p> Central to most AI applications is the need to represent knowledge in a computable form. Knowledge representation can generally be classified as action-centered or object-centered [Barr et al. 1989]. 2.2.1 Semantic Networks Semantic networks were developed to represent psychological models of associative memory <ref> [Quillian 1968] </ref>. The basic mechanism of representation is a node/link data structure, where the nodes present an object or concept and the links are relations between objects. Semantic networks are quite general and as such can be implemented in several ways. The example semantic network in and class membership.
Reference: [Ramscar 1995] <author> Ramscar M. </author> <year> (1995). </year> <title> Static Models and Dynamic Designs: An Empirical Impasse vs An Inductive Solution in Proceedings of ECPPM 94 - The First European Conference on Product and Process Modelling in the Building Industry R. </title> <editor> J. Scherer (ed.), </editor> <address> Dresden, Germany, </address> <month> October 5-7, </month> <year> 1994, </year> <editor> Rotterdam: A. A. </editor> <publisher> Balkema. </publisher> <pages> pp 69-76. </pages>
Reference-contexts: Information Technology 5. The authors are referring to distributed software architectures. Conceptual (Information) Modeling 42 Product Models The second area of divergence is information consistency ; that is, conceptual modeling approaches do not allow for data to be in incomplete states <ref> [Ramscar 1995] </ref>. Consistency can be truly maintained only if all pertinent data is present at the time information needs to be changed. If viewed as a state machine, the information to transition from one valid state to another must be present. <p> However, the universally common claim within product modeling research is that once a model is discovered (or defined) integrated systems can be built; that is, some notion of an application and implementation-independent product model is a necessary prerequisite for integration in CAD <ref> [Ramscar 1995] </ref>. The need for 6. I suspect that researchers in conceptual modeling will eventually come to this conclusion as well. Software engi neering has many parallels with building design and as such can benefit from the mature domain of building construction.
Reference: [Rich and Knight 1991] <author> Rich, E. and K. </author> <title> Knight (1991). </title> <booktitle> Artificial Intelligence (2nd Ed.) </booktitle> <address> New York: </address> <publisher> McGraw-Hill, Inc. </publisher>
Reference-contexts: However, inheritance in this case encompasses much more than the popular objectoriented programming notion of inheritance. Frame-based semantic networks are a more structured version of the original as defined by Quillian and have become quite common in AI research <ref> [Rich and Knight 1991] </ref>. 2.2.3 Rule-Based Systems Action-centered knowledge representation focuses on how to perform a reasoning process and the actions that should be taken. Common to most action centered representations is a fact base and a relationship representation methodology (e.g. predicate logic). FIGURE 1.
Reference: [Rolland and Cauvet 1992] <author> Rolland, C. and C. </author> <title> Cauvet (1992). Trends and Perspectives in Conceptual Modeling in Conceptual Modeling, Databases, and CASE: An Integrated View of Infromation System Development P. </title> <editor> Loucopoulos and R. Zicari (eds). </editor> <address> New York: </address> <publisher> John Wiley & Sons, Inc. </publisher> <pages> pp. 27-48. </pages> <note> References 158 PhD Thesis Spring 1998 </note>
Reference-contexts: All three areas have developed a notion of an object-centered representation independently, and work now focuses on how these three areas can be combined within the context of an object-centered paradigm as stated by <ref> [Rolland and Cauvet 1992] </ref> page 35: In the past, programming languages, artificial intelligence and databases areas have contributed independently to the development of conceptual modeling. Further advances in conceptual modeling require the integration of the concepts, tools, and techniques that were developed in these fields for system specification. <p> However, it must be pointed out that domain independent research and building related research may not be converging entirely on the same principles, specifically with respect to distributed systems as stated in <ref> [Rolland and Cauvet 1992] </ref> pages 39 and 40: In order to take into account the future computer applications based on distributed architectures 5 , conceptual modeling must address the problem of cooperation of information systems. Two approaches can be explored at the conceptual level: 1.
Reference: [Rumbaugh 1987] <author> Rumbaugh, J. </author> <year> (1987). </year> <booktitle> Relations as Semantic Constructs in an ObjectOriented Language OOPSLA 87 as ACM SIGPLAN 22 (12). </booktitle> <pages> pp. 466-481. </pages>
Reference: [Rumbaugh et al. 1991] <author> Rumbaugh, J., Blaha, M., Premerlani, W., Eddy, F., & Lorensen, W. </author> <year> (1991). </year> <title> ObjectOriented Modeling and Design . Englewood Cliffs: </title> <publisher> Prentice-Hall. </publisher>
Reference-contexts: FIGURE 36. SPROUT Runtime MetaClass Hierarchy Implemented in Java PhD Thesis Spring 1998 135 Prototype Application Integration Framework A notational description of the above definition is provided in Figure 37. The descriptions are given using the OMT notation as defined by <ref> [Rumbaugh et al. 1991] </ref>. 8.3.1 Prototype Neutral Object Representation Given the above workspace definition, neutral object instances can be represented as an ordered collection of values that are either a primitive or an object reference. The values are ordered based on the associated ordering of the object instances type description.
Reference: [Smithers 1989] <author> Smithers, T. </author> <title> (1989) AI-Based Design versus Geometry-Based Design: or Why Design Cannot Be Suppoted by Geometry Alone Computer Aided Design 21 (3) pp. </title> <type> 141-150. </type>
Reference-contexts: Once this linkage was established, the integration of different software systems could happen. CAD systems currently in use by-and-large belong to this second generation. Third Generation CAD Systems The shortcomings of the previous generations of CAD were being researched by many researchers, but <ref> [Smithers 1989] </ref> is one of the most widely cited references pertaining to deficiencies of previous generations. Presented below are three important shortcomings of second generation systems that led to experimental third generation systems based specifically on advances in the field of distributed artificial intelligence (DAI). 1.
Reference: [Snyder 1993] <author> Snyder, J. </author> <year> (1993). </year> <title> A Semantic Modeling System for CAD , M.S. </title> <type> Thesis, </type> <institution> Department of Architecture, Cal Poly, </institution> <address> San Luis Obispo, CA. </address>
Reference-contexts: Product Model Representation The formal representation of the ICADS product model was not an issue until late in the development of the software prototype <ref> [Snyder 1993] </ref>. The product data is represented as a distributed semantic network of frames. The frames are instantiated in the expert systems by pattern matching on a specific fact structures that, taken together, represented the information for the object as shown in Figure 13. 4 3. <p> Essentially, objects could be synthesized on demand. This had severe performance and maintenance problems; in general this is not a scalable approach. It should also be noted that the notion of a class description did not exist in any ICADS system until the work presented in <ref> [Snyder 1993] </ref>. 4.1.2 IBDE The Integrated Building Design Environment (IBDE) project, developed at Carnegie Mellon University, was a multidisciplinary research project investigating the potential of an integrated computer-based design environment; it is best summarized by [Fenves et al. 1994]: ... the subject of this monograph is not even a prototype. <p> It was also discovered that many issues could not be clearly formulated until indepth software implementations were attempted, thereby bringing a degree of clarity to more general issues. To facilitate a more orderly approch to investigating research questions, the Object Modeling Language (OML) <ref> [Snyder 1993] </ref> was extended and developed into an experimental product modeling environment. OML was selected for the following reasons: 1. Neutral Object-Centered Representation The initial literature surveys clearly concluded that some kind of object centered schematic representation approach was necessary.
Reference: [Snyder and Chrica 1990] <author> Snyder J. and L. </author> <title> Chirica (1990). An SQL Query Generator for CLIPS Proc. </title> <booktitle> First CLIPS Users Conf. </booktitle> , <institution> Johnson Space Center, NASA, Houston, TX. </institution>
Reference-contexts: As a result, other types of tools are employed, such as relational database systems and spread sheets, to overcome the limitations of geometry-based representations. Examples of this kind of integration can be seen in the integration of expert systems with relational database systems ([Howard 1986], <ref> [Snyder and Chrica 1990] </ref>, and [Myers et al. 1992]). Because the information is stored in several different formats, sharing data between applications is virtually impossible unless all parties use exactly the same versions of the same software.
Reference: [Snyder and Flemming 1994a] <author> Snyder, J. and U. </author> <title> Flemming (1994). The Object Modeling Language (OML) Specification . Internal Techincal Report (URL: </title> <address> http:// seed.edrc.cmu.edu/ACL). </address>
Reference-contexts: The data in the spreadsheet is somewhat unstructured, which is both a benefit and drawback to spreadsheet representations. Modeling Language Representation Object Modeling Language (OML) <ref> [Snyder and Flemming 1994a] </ref>. Its essential elements are classes , relationships , values , derived values , and triggers . Two important FIGURE 6. Example Economic Model in Spreadsheet Form - Variables S x PhD Thesis Spring 1998 37 Information and Modeling Languages FIGURE 7. <p> Research, Systems, and Products 64 SEMPER The CMU team contributed the Object Modeling Language ( OML ) that provides an object description schema with execution semantics, messaging protocol, and an associated language binding complier that generates data structure mapping code from a formal specification <ref> [Snyder and Flemming 1994a] </ref>, [Snyder and Flemming 1994b]. The research results of this project strongly suggest that a robust, programming language-independent conceptual modeling language is needed for information exchange techniques to be scalable.
Reference: [Snyder and Flemming 1994b] <author> Snyder, J. and U. </author> <title> Flemming (1994). The Object Modeling Language (OML) Language Binding Specification . Internal Techincal Report (URL: </title> <address> http://seed.edrc.cmu.edu/ACL). </address>
Reference-contexts: Research, Systems, and Products 64 SEMPER The CMU team contributed the Object Modeling Language ( OML ) that provides an object description schema with execution semantics, messaging protocol, and an associated language binding complier that generates data structure mapping code from a formal specification [Snyder and Flemming 1994a], <ref> [Snyder and Flemming 1994b] </ref>. The research results of this project strongly suggest that a robust, programming language-independent conceptual modeling language is needed for information exchange techniques to be scalable.
Reference: [Sriram and Logcher 1993] <author> Sriram, D. and R. </author> <booktitle> Logcher (1993) The MIT Dice Project IEEE Computer (Jan), </booktitle> <pages> pp. 64-65. </pages>
Reference-contexts: This approach is related to the idea of open systems. In contrast to the above perspective, most building industry research and commercial systems make use of a shared schema at some level (see [Pohl et al. 1992], [Wright et al. 1992], <ref> [Sriram and Logcher 1993] </ref>, [Eastman 1994a], and [Fenves et al. 1994]), while some systems use a federated approach [Khedro 1995]. These issues are addressed in more detail in the sections that follow. 4. Information Technology 5. The authors are referring to distributed software architectures.
Reference: [Sriram et al. 1994] <author> Sriram, D., Logcher, R., and A. </author> <title> Wong (1994). Computer Supported Collaborative Engineering: Research Issues in Product Modeling in Bridging the Generations: </title> <booktitle> International Workshop on the Future Directions of Computer-Aided Engineering (position papers submitted to the workshop) D. </booktitle> <editor> Rehak (ed.), </editor> <month> July 18-19, </month> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference-contexts: SHARED also provides database capabilities such as version and alternative management as well as transaction management. As part of the definition of the system, several built-in classes provide an abstract engineering application framework and support an integrated approach to both product and process modeling. <ref> [Sriram et al. 1994] </ref> view the shared approach ... as a first cut in developing a semantic vocabulary for design, where the constraints (through behavior) implicitly define the grammar for checking valid designs.
Reference: [Stiny 1980] <author> Stiny, G. </author> <title> (1980) Introduction to shape and shape grammars Environment and Planning B , 7 pp. </title> <type> 343-351. </type>
Reference-contexts: Using a production system as the underlying mechanism, several kinds of generative systems have emerged in the literature 9 : 1. Shape Grammars Shape grammars, introduced by <ref> [Stiny 1980] </ref>, are a formal grammar much like string grammar. They attempt to define syntactic transformations of shapes with a formalized set of rewrite rules.
Reference: [Stiny 1990] <author> Stiny, G. </author> <title> (1990) What Designers Do That Computers Should in The Electronic Design Studio: </title> <booktitle> Architectural Knowledge and Media in the PhD Thesis Spring 1998 159 References Computer Era M. </booktitle> <editor> McCullough, W. Mitchell, and P. Purcell (eds.), </editor> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts. </address>
Reference: [Stoker 1992] <author> Stoker, D. </author> <year> (1992). </year> <title> CAD and Practice Building and Environment , 27 (2). </title>
Reference: [Sun 1997a] <author> Sun Micro Systems (1997). </author> <title> Java Object Serialization Specification. </title>
Reference-contexts: After researching the literature on this matter, the most flexible and widely used representation of this kind is the Java Object Serialization Protocol <ref> [Sun 1997a] </ref>. Java serialization meets the previously stated requirement of transmitting a data structure across a minimal operating system resource such as disk file or a TCP / IP socket.
Reference: [Sun 1997b] <author> Sun Micro Systems (1997). </author> <title> Java Server Toolkit. </title>
Reference-contexts: TIME RELATION J AVA /U NI SQL J AVA S ERVER FRAMEWORK N ATIVE M ETHODS The SPROUT Software Architecture 130 JavaServer Overview 8.2.1 JavaServer Overview The prototype target environment consists of a three-tier, mediated, middleware server software architecture, and the JavaServer Toolkit is used to build the middle tier <ref> [Sun 1997b] </ref>. The JavaServer Toolkit can run anywhere a Java Virtual Machine (VM) can run, which currently includes most Unix and Windows NT platforms. The object database system used is UniSQL and is integrated into the JavaServer via the Java Native Interface (JNI).
Reference: [Wiederhold 1995] <author> Wiederhold, G. </author> <year> (1995). </year> <booktitle> Mediation in Information Systems ACM Computing Surveys , 27 (2), </booktitle> <address> New York: </address> <publisher> ACM Press, </publisher> <pages> pp. 265-267. </pages>
Reference-contexts: More importantly, the internal model of the above finite element example is specifically not to be exchanged; a transformation of the internal model should be exchanged. This perspective is receiving some attention from computer science as illustrated by <ref> [Wiederhold 1995] </ref>: A logical evolution of clientserver architecture is provided by mediated architectures. In mediation, an extra software layer is inserted between the client and the server. This layer breaks the coupling. The intermediate modules, mediators, bring source information into a common form.
Reference: [Weinand and Gamma 1994] <author> Weinand A, </author> <title> Gamma E: ET++ a Portable, Homogenous Class Library and Application Framework . Computer Science Research at Ubilab.Konstanz:Universittsverlag Konstanz, </title> <year> 1994 </year>
Reference-contexts: The host workspace environment is defined using the C++-based application framework ET++ <ref> [Weinand and Gamma 1994] </ref>. Although the target application programming language is C++, applications do not have to be written again the ET++ The SPROUT Software Architecture 134 SPROUT Runtime MetaClass Framework framework even though, in some cases, it may simplifies things for developers to some degree.
Reference: [Wong and Sriram 1994a] <author> Wong, A. and D. </author> <title> Sriram (1994). Shared Workspaces for Computer-Aided Collaborative Engineering. </title> <type> Technical Report. </type> <institution> Intelligent Engineering Systems Laboratory, Dept. of Civil and Environmental Engineering, Massachusetts Institute of Technology, </institution> <address> Cambridge, MA. </address>
Reference-contexts: Process modeling has received far less research attention than product modeling. Current research has reached a consensus that the product and process models should be integrated into a single representational framework <ref> [Wong and Sriram 1994a] </ref>, [Gorti and Sriram 1993], [Howard 1994], [de Vries and Somers 1995], and [Lawrence et al. 1995]. 3.3 The Information Exchange Problem Product and process modeling languages are believed to be the unifying mechanism to solve the information exchange problem . 7 Essentially, integration between CAD software systems <p> Develop a few design agents for illustrating our approach. Essentially, DICE can be envisioned as a network of collaborating design agents where the communication and coordination is achieved through a global database and control mechanism. The product and processing modeling component of DICE is SHARED <ref> [Wong and Sriram 1994a] </ref>; the DICE architecture, from the perspective of SHARED , is presented in Figure 15. Because DICE is quite extensive, a complete description of the system is not given here; [Wong and Sriram 1994a] provide a detailed description, and [Wong and Sriram 1994b] summarize the system. <p> The product and processing modeling component of DICE is SHARED <ref> [Wong and Sriram 1994a] </ref>; the DICE architecture, from the perspective of SHARED , is presented in Figure 15. Because DICE is quite extensive, a complete description of the system is not given here; [Wong and Sriram 1994a] provide a detailed description, and [Wong and Sriram 1994b] summarize the system. The present chapter restricts is restricted to SHARED . <p> SHARED does not support the integration of existing applications readily because its implementation is heavily tied to a programming language (i.e. C++) as well as its database mechanism (i.e. ObjectStore, a C++ OODBMS ). FIGURE 15. DICE System Architecture S OURCE : <ref> [Wong and Sriram 1994a] </ref> GEOMETRIC MODELING CLASSES ( GNOMES ) INFERENCE ENGINE CLASS ( COSMOS ) GENERIC UI CLIENT APPLICATIONS CLIENT APPLICATIONS SPECIALIZED SHARED CLASSES SPECIALIZED SHARED CLASSES SHARED FUNCTIONAL ABSTRACTIONS GEOMETRIC ABSTRACTIONS INTEGRITY CHECKING COORDINATION FACILITIES QUERY FACILITIES C M U I C N A C A E O T
Reference: [Wong and Sriram 1994b] <author> Wong, A. and D. </author> <title> Sriram (1994). SHARED: An Information Model for Cooperative Product Development Technical Report. </title> <institution> Intelligent Engineering Systems Laboratory, Dept. of Civil and Environmental Engineering, Massachusetts Institute of Technology, </institution> <address> Cambridge, MA. </address>
Reference-contexts: Because DICE is quite extensive, a complete description of the system is not given here; [Wong and Sriram 1994a] provide a detailed description, and <ref> [Wong and Sriram 1994b] </ref> summarize the system. The present chapter restricts is restricted to SHARED .
Reference: [Woods 1991] <author> W. A. </author> <title> Woods (1991). Understanding Subsumption and Taxonomy in Principles of Semantic Networks: Explorations in the Represtation of Knowledge J. </title> <editor> Sowa (ed.) </editor> <address> San Mateo: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The definition of subsumption, taxonomy, inheritance, and classification are best defined by Woods in <ref> [Woods 1991] </ref>. In virtually every semantic network formalism, there is at least one link that relates more specific concepts to more general concepts (from which generic information can be inherited). <p> CLASSIC supports capabilities as defined in [Brachman et al. 1991]. It concentrates on the definition of structured concepts, their organization into taxonomies, the creation and manipulation of individual instances of concepts, and the key inferences of subsumption and classification. The definition of subsumption, taxonomy, inheritance, and classification, defined by <ref> [Woods 1991] </ref>, is restated here for convenience. In virtually every semantic network formalism, there is at least one link that relates more specific concepts to more general concepts (from which generic information FIGURE 23.


References-found: 103

