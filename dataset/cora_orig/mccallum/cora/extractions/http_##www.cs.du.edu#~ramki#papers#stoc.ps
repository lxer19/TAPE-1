URL: http://www.cs.du.edu/~ramki/papers/stoc.ps
Refering-URL: http://www.cs.du.edu/~ramki/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Fast Algorithms for k-Shredders and k-Node Connectivity Augmentation  with the running time for testing k-node connectivity.  
Author: Joseph Cheriyan Ramakrishna Thurimella 
Note: running time compares favorably  
Date: 16 December 1996  
Abstract: A k-separator (k-shredder) of an undirected graph is a set of k nodes whose removal results in two or more (three or more) connected components. Let the given (undirected) graph be k-node connected, and let n denote the number of nodes. Solving an open question, we show that the problem of counting the number of k-separators is #P-complete. However, we present an O(k 2 n 2 + k 3 n 1:5 )-time (deterministic) algorithm for finding all the k-shredders. This solves an open question: efficiently find a k-separator whose removal maximizes the number of connected components. For k 4, our running time is within a factor of k of the fastest algorithm known for testing k-node connectivity. One application of shredders is in increasing the node connectivity from k to (k + 1) by efficiently adding an (approximately) minimum number of new edges. Jordan [JCT(B) 1995] gave an O(n 5 )-time augmentation algorithm such that the number of new edges is within an additive term of (k 2) from a lower bound. We improve the running time to O(min(k; n)k 2 n 2 + (log n)kn 2 ), while achieving the same performance guarantee. For k 4, the
Abstract-found: 1
Intro-found: 1
Reference: [BBM 90] <author> D. Bienstock, E. F. Brickell and C. L. Monma, </author> <title> "On the structure of minimum-weight k-connected spanning networks," </title> <journal> SIAM J. Discrete Math. </journal> <volume> 3 (1990), </volume> <pages> 320-329. </pages>
Reference-contexts: Other expositions of these three results may be found in [F 92a], [F 92b] and [F 93, FJ 95a], respectively. To the best of our knowledge, the earliest splitting-off theorem for node connectivity is due to Bienstock, Brickell and Monma <ref> [BBM 90, Theorem 3] </ref>. A different proof of a variant of this theorem is given by Jordan [J 95, Theorem 3.1]. Jordan gave a splitting-off theorem for the node connectivity of directed graphs [J 93, Theorem 2]. Another proof appears in [FJ 95b]. <p> Another proof appears in [FJ 95b]. Splitting-off theorems for node connectivity hold only under appropriate conditions. Here are three examples (violating the appropriate conditions) such that splitting off any (or all) edge pair (s) incident to s decreases the connectivity. These examples are due to Bienstock et al <ref> [BBM 90, p. 324] </ref>, and to Hsu [H 92]. Example (1): Start with the complete bipartite graph G = K 3;3 , and obtain the 4-connected graph e G by adding a new node s and all the edges fsv : v 2 V (G)g. <p> possibility that e Gns = G is the complete bipartite graph K k;k . (The only use of this condition in [J 95, Theorem 3.1] is to show that e Gns 6= K k;k .) The difference between our version of the splitting-off theorem and Bienstock et al's splitting-off theorem <ref> [BBM 90, Theorem 3] </ref> is that a new condition (see (3) in Theorem 5.1) has been added. This guarantees that the connectivity can be preserved by a single splitting-off operation, whereas in [BBM 90, Theorem 3] one or two splitting-off operations are required to preserve the connectivity. <p> K k;k .) The difference between our version of the splitting-off theorem and Bienstock et al's splitting-off theorem <ref> [BBM 90, Theorem 3] </ref> is that a new condition (see (3) in Theorem 5.1) has been added. This guarantees that the connectivity can be preserved by a single splitting-off operation, whereas in [BBM 90, Theorem 3] one or two splitting-off operations are required to preserve the connectivity. Our proof hinges on the notions of superleafs and the maximal tight sets W ij (defined below), and follows immediately from Lemmas 5.6-5.8. <p> If fv i ; v j g is not saturating, then G has a tight set W ij containing v i or v j (or both) and satisfying case (i), (ii) or (iii) above. The proof of Lemma 5.6 follows the proof of Step 3.4, Theorem 3 of <ref> [BBM 90] </ref> and the proof of Claim II (a)!(b), Theorem 3.1 of [J 95]. For the sake of completeness, a proof is included in the appendix. Lemma 5.6 Let G = (V; E) be a k-connected graph (k 1) with t (G) k + 3.
Reference: [CKT 93] <author> J. Cheriyan, M. Y. Kao and R. Thurimella, </author> <title> "Scan-first search and sparse certificates: An improved parallel algorithm for k-vertex connectivity," </title> <journal> SIAM J. Computing 22 (1993), </journal> <pages> 157-174. </pages>
Reference-contexts: Thus, Step 6 can be implemented in linear time. 2 The time bound in the above theorem can be improved by precomputing a sparse certificate for (k + 1)-connectivity, G 0 = (V; E 0 ); E 0 E, see <ref> [NI 92, CKT 93, FIN 93] </ref>. G 0 has jE 0 j (k + 1)(n 1) = O (kn), and if G is (k + 1)-connected, then G 0 is (k + 1)-connected. Moreover, G 0 can be computed in linear time, [NI 92]. <p> Also, we need an extension of <ref> [CKT 93, Corollary 2.17] </ref> and [FIN 93, Corollary 2.3]. <p> At the start of the algorithm, we replace the k-connected input graph G = (V; E) by (V; ^ E), where ^ E E is a sparse certificate for the (k + 1)-connectivity of G, see <ref> [NI 92, CKT 93, FIN 93] </ref>. The cardinality of ^ E is &lt; (k + 1)n = O (kn), and ^ E can be computed in linear time by finding a so-called legal ordering of the nodes.
Reference: [CLR 90] <author> T. H. Cormen, C. E. Leiserson and R. L. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: At the start, we run our algorithm for finding all k-shredders of G (if there are no k-shredders, then b (G) = 2). Next, using the lexicographically sorted list L of all k-shredders, we insert each S 2 L into a (max) heap, see <ref> [CLR 90] </ref>, using the value #c (GnS) as the key. (Our heap is organized by 8 maximum key values, and each insertion or deletion takes O (log jLj) = O (log n) time.) Whenever an edge xy is added to (or deleted from) G, we update the list L and the
Reference: [E 79] <author> S. </author> <title> Even, Graph Algorithms, </title> <publisher> Computer Science Press, </publisher> <address> Potomac, MD, </address> <year> 1979. </year>
Reference-contexts: The basic steps can be implemented to run in time O (min (k; p p n)kn) using standard network flow techniques, see <ref> [E 79] </ref>. Focus on the overall algorithm. The initial computation of b (G 0 ) takes time O (k 2 n 2 + k 3 n 1:5 ), by Theorem 3.5.
Reference: [ET 76] <author> K. P. Eswaran and R. E. Tarjan, </author> <title> "Augmentation problems," </title> <journal> SIAM J. Computing 5 (1976), </journal> <pages> 653-665. </pages>
Reference-contexts: Let us focus on node connectivity augmentation problems: given a graph, increase the node connectivity to k 0 by adding the minimum number of new edges. The case k 0 = 2 was solved by Eswaran & Tarjan <ref> [ET 76] </ref>, and later Hsu & Ramachandran [HR 93] gave a linear-time algorithm. The case k 0 = 3 was solved by Watanabe & Nakamura [WN 90], and a linear-time algorithm was given by Hsu & Ramachandran [HR 91].
Reference: [FIN 93] <author> A. Frank, T. Ibaraki and H. Nagamochi, </author> <title> "On sparse subgraphs preserving connectivity properties," </title> <editor> J. </editor> <booktitle> Graph Theory 17 (1993), </booktitle> <pages> 275-281. </pages>
Reference-contexts: Thus, Step 6 can be implemented in linear time. 2 The time bound in the above theorem can be improved by precomputing a sparse certificate for (k + 1)-connectivity, G 0 = (V; E 0 ); E 0 E, see <ref> [NI 92, CKT 93, FIN 93] </ref>. G 0 has jE 0 j (k + 1)(n 1) = O (kn), and if G is (k + 1)-connected, then G 0 is (k + 1)-connected. Moreover, G 0 can be computed in linear time, [NI 92]. <p> Also, we need an extension of [CKT 93, Corollary 2.17] and <ref> [FIN 93, Corollary 2.3] </ref>. <p> In the legal ordering for finding G 0 , let v = v i and w = v j , i &lt; j, and note that jfv ` : v ` v j 2 E; ` igj &gt; k + 1. But then the main lemma in <ref> [FIN 93] </ref> gives the desired contradiction, jS"fv 1 ; : : : ; v i1 gj jfv ` v j 2 E 0 : ` = 1; : : : ; i 1gj k + 1. 2 This gives an improvement on the previous theorem: By precomputing a sparse certificate G <p> At the start of the algorithm, we replace the k-connected input graph G = (V; E) by (V; ^ E), where ^ E E is a sparse certificate for the (k + 1)-connectivity of G, see <ref> [NI 92, CKT 93, FIN 93] </ref>. The cardinality of ^ E is &lt; (k + 1)n = O (kn), and ^ E can be computed in linear time by finding a so-called legal ordering of the nodes.
Reference: [F 92a] <author> A. Frank, </author> <title> "Augmenting graphs to meet edge-connectivity requirements," </title> <journal> SIAM J. Disc. Math. </journal> <volume> 5 (1992), </volume> <pages> 25-53. </pages>
Reference-contexts: Mader [Ma 78] gave a deep generalization. Mader [Ma 82] also gave a splitting-off theorem for the edge connectivity of directed multigraphs. Other expositions of these three results may be found in <ref> [F 92a] </ref>, [F 92b] and [F 93, FJ 95a], respectively. To the best of our knowledge, the earliest splitting-off theorem for node connectivity is due to Bienstock, Brickell and Monma [BBM 90, Theorem 3].
Reference: [F 92b] <author> A. Frank, </author> <title> "On a theorem of Mader," </title> <journal> Annals of Discrete Math. </journal> <volume> 101 (1992), </volume> <pages> 49-57. </pages>
Reference-contexts: Mader [Ma 78] gave a deep generalization. Mader [Ma 82] also gave a splitting-off theorem for the edge connectivity of directed multigraphs. Other expositions of these three results may be found in [F 92a], <ref> [F 92b] </ref> and [F 93, FJ 95a], respectively. To the best of our knowledge, the earliest splitting-off theorem for node connectivity is due to Bienstock, Brickell and Monma [BBM 90, Theorem 3]. A different proof of a variant of this theorem is given by Jordan [J 95, Theorem 3.1].
Reference: [F 93] <author> A. Frank, </author> <title> "Submodular functions in graph theory," </title> <journal> Discrete Math. </journal> <volume> 111 (1993), </volume> <pages> 231-243. </pages>
Reference-contexts: Mader [Ma 78] gave a deep generalization. Mader [Ma 82] also gave a splitting-off theorem for the edge connectivity of directed multigraphs. Other expositions of these three results may be found in [F 92a], [F 92b] and <ref> [F 93, FJ 95a] </ref>, respectively. To the best of our knowledge, the earliest splitting-off theorem for node connectivity is due to Bienstock, Brickell and Monma [BBM 90, Theorem 3]. A different proof of a variant of this theorem is given by Jordan [J 95, Theorem 3.1].
Reference: [F 94] <author> A. Frank, </author> <title> "Connectivity augmentation problems in network design," </title> <booktitle> in Mathematical Programming: State of the Art 1994, </booktitle> <editor> (Eds. J. R. Birge and K. G. </editor> <title> Murty), </title> <institution> The University of Michigan, </institution> <address> Ann Arbor, MI, </address> <year> 1994, </year> <pages> 34-63. </pages>
Reference-contexts: Readers interested in network design with arbitrary edge costs are referred to [GW 95] and [RW 95], and readers interested in edge/node connectivity augmentation problems for both graphs and directed graphs are referred to <ref> [F 94] </ref>. Let us focus on node connectivity augmentation problems: given a graph, increase the node connectivity to k 0 by adding the minimum number of new edges. <p> First, we describe a lower bound on the number of new edges required to increase the node connectivity from k to (k + 1). Several recent algorithms for edge/node connectivity augmentation problems are based on splitting-off theorems, see the survey paper <ref> [F 94] </ref>. In particular, Jordan's algorithm is based on a key theorem for splitting off edges while preserving node connectivity. We state and prove a simpler version of this theorem in Section 5.2 (Theorem 5.1).
Reference: [FJ 95a] <author> A. Frank and T. Jordan, </author> <title> "Minimal edge-coverings of pairs of sets," </title> <editor> J. </editor> <booktitle> Combinatorial Theory Series B 65 (1995), </booktitle> <pages> 73-110. </pages>
Reference-contexts: Mader [Ma 78] gave a deep generalization. Mader [Ma 82] also gave a splitting-off theorem for the edge connectivity of directed multigraphs. Other expositions of these three results may be found in [F 92a], [F 92b] and <ref> [F 93, FJ 95a] </ref>, respectively. To the best of our knowledge, the earliest splitting-off theorem for node connectivity is due to Bienstock, Brickell and Monma [BBM 90, Theorem 3]. A different proof of a variant of this theorem is given by Jordan [J 95, Theorem 3.1].
Reference: [FJ 95b] <author> A. Frank and T. Jordan, </author> <title> "How to make a strongly connected digraph two-connected," </title> <booktitle> Proc. 4th I.P.C.O., </booktitle> <editor> Egon Balas and Jens Clausen (Eds.), </editor> <publisher> LNCS 920, Springer-Verlag, </publisher> <address> Berlin, </address> <year> (1995), </year> <pages> 414-425, </pages>
Reference-contexts: A different proof of a variant of this theorem is given by Jordan [J 95, Theorem 3.1]. Jordan gave a splitting-off theorem for the node connectivity of directed graphs [J 93, Theorem 2]. Another proof appears in <ref> [FJ 95b] </ref>. Splitting-off theorems for node connectivity hold only under appropriate conditions. Here are three examples (violating the appropriate conditions) such that splitting off any (or all) edge pair (s) incident to s decreases the connectivity.
Reference: [G 80] <author> Z. Galil, </author> <title> "Finding the vertex connectivity of graphs," </title> <journal> SIAM J. Computing 9 (1980), </journal> <pages> 197-199. </pages>
Reference-contexts: To handle the second possibility, our algorithm adds a new root node z and the edges zy 1 ; : : : ; zy k (cf. <ref> [G 80] </ref>), and then finds all the k-shredders separating z and v, for each node v 2 V nfz; y 1 ; : : : ; y k g. Focus on subroutine Shredders (r,v) (see Algorithm 2 in the box on page 6).
Reference: [GW 95] <author> M. X. Goemans and D. P. Williamson, </author> <title> "The primal-dual method for approximation algorithms and its application to network design problems," In Approximation Algorithms for NP-hard Problems, </title> <editor> (Ed. D. S. Hochbaum), </editor> <publisher> PWS Publishing Co., </publisher> <address> Boston, MA, </address> <year> 1995. </year>
Reference-contexts: For instance, given a tree, one may want to add the minimum number of new edges to achieve 3-node connectivity. Readers interested in network design with arbitrary edge costs are referred to <ref> [GW 95] </ref> and [RW 95], and readers interested in edge/node connectivity augmentation problems for both graphs and directed graphs are referred to [F 94]. Let us focus on node connectivity augmentation problems: given a graph, increase the node connectivity to k 0 by adding the minimum number of new edges.
Reference: [HRG 96] <author> M. R. Henzinger, S. Rao and H. N. Gabow, </author> <title> "Computing vertex connectivity: new bounds from old techniques," </title> <booktitle> Proc. 37th IEEE F.O.C.S. </booktitle> <year> (1996), </year> <pages> 462-471. </pages>
Reference-contexts: For k 3, linear-time algorithms are known for testing k-node connectivity, while for k 4, the fastest algorithm runs in time O (min [kn 2 + k 4 n; k 2 n 2 ]) <ref> [HRG 96] </ref>. We also describe a dynamic algorithm for maintaining the set of all the k-shredders of a k-node connected graph over a sequence of edge insertions/deletions.
Reference: [HR 91] <author> T. Hsu and V. Ramachandran, </author> <title> "A linear time algorithm for triconnectivity augmentation," </title> <booktitle> Proc. 32nd IEEE F.O.C.S. </booktitle> <year> (1991), </year> <pages> 548-559. </pages>
Reference-contexts: The case k 0 = 2 was solved by Eswaran & Tarjan [ET 76], and later Hsu & Ramachandran [HR 93] gave a linear-time algorithm. The case k 0 = 3 was solved by Watanabe & Nakamura [WN 90], and a linear-time algorithm was given by Hsu & Ramachandran <ref> [HR 91] </ref>. The case k 0 = 4 was solved by Hsu [H 95] using an O (jEj + n log n)-time algorithm, and earlier Hsu [H 92] gave an almost linear-time algorithm to increase the node connectivity from three to four.
Reference: [H 92] <author> T. Hsu, </author> <title> "On four-connecting a triconnected graph," </title> <booktitle> Proc. 33rd IEEE F.O.C.S. </booktitle> <year> (1992), </year> <pages> 70-79. </pages>
Reference-contexts: The case k 0 = 4 was solved by Hsu [H 95] using an O (jEj + n log n)-time algorithm, and earlier Hsu <ref> [H 92] </ref> gave an almost linear-time algorithm to increase the node connectivity from three to four. Whether there is an efficient algorithm for the node connectivity augmentation problem for arbitrary k 0 is an outstanding open question. <p> Splitting-off theorems for node connectivity hold only under appropriate conditions. Here are three examples (violating the appropriate conditions) such that splitting off any (or all) edge pair (s) incident to s decreases the connectivity. These examples are due to Bienstock et al [BBM 90, p. 324], and to Hsu <ref> [H 92] </ref>. Example (1): Start with the complete bipartite graph G = K 3;3 , and obtain the 4-connected graph e G by adding a new node s and all the edges fsv : v 2 V (G)g.
Reference: [HR 93] <author> T. Hsu and V. Ramachandran, </author> <title> "Finding a smallest augmentation to biconnect a graph," </title> <journal> SIAM J. Computing 22 (1993), </journal> <pages> 889-912. </pages>
Reference-contexts: Let us focus on node connectivity augmentation problems: given a graph, increase the node connectivity to k 0 by adding the minimum number of new edges. The case k 0 = 2 was solved by Eswaran & Tarjan [ET 76], and later Hsu & Ramachandran <ref> [HR 93] </ref> gave a linear-time algorithm. The case k 0 = 3 was solved by Watanabe & Nakamura [WN 90], and a linear-time algorithm was given by Hsu & Ramachandran [HR 91].
Reference: [H 95] <author> T. Hsu, </author> <title> "Undirected vertex-connectivity structure and smallest four-vertex-connectivity augmentation," </title> <booktitle> Proc. 6th ISAAC (1995). </booktitle>
Reference-contexts: The case k 0 = 3 was solved by Watanabe & Nakamura [WN 90], and a linear-time algorithm was given by Hsu & Ramachandran [HR 91]. The case k 0 = 4 was solved by Hsu <ref> [H 95] </ref> using an O (jEj + n log n)-time algorithm, and earlier Hsu [H 92] gave an almost linear-time algorithm to increase the node connectivity from three to four.
Reference: [J 93] <author> T. Jordan, </author> <title> "Increasing the vertex-connectivity in directed graphs," </title> <booktitle> Proc. Algorithms | ESA'93, 1st Annual European Symposium, </booktitle> <publisher> LNCS 726, Springer, </publisher> <address> New York (1993), </address> <pages> 236-247. </pages>
Reference-contexts: A different proof of a variant of this theorem is given by Jordan [J 95, Theorem 3.1]. Jordan gave a splitting-off theorem for the node connectivity of directed graphs <ref> [J 93, Theorem 2] </ref>. Another proof appears in [FJ 95b]. Splitting-off theorems for node connectivity hold only under appropriate conditions. Here are three examples (violating the appropriate conditions) such that splitting off any (or all) edge pair (s) incident to s decreases the connectivity.
Reference: [J 95] <author> T. Jordan, </author> <title> "On the optimal vertex-connectivity augmentation," </title> <editor> J. </editor> <booktitle> Combinatorial Theory, Series B 63 (1995), </booktitle> <pages> 8-20. </pages> <note> Preliminary version in Proc. 3rd I.P.C.O. </note> <year> (1993), </year> <pages> 75-88. </pages>
Reference-contexts: Supported in part by NSF Research Initiation Award grant CCR-9210604. email: ramki@cs.du.edu URL: http://www.cs.du.edu/~ramki 1 We present an O (k 2 n 2 + k 3 n 1:5 )-time (deterministic) algorithm for finding all the k-shredders of a k-node connected graph. This solves an open question raised by Jordan <ref> [J 95] </ref>: efficiently find a k-separator of a k-node connected graph whose removal maximizes the number of connected components. <p> Whether there is an efficient algorithm for the node connectivity augmentation problem for arbitrary k 0 is an outstanding open question. Jordan <ref> [J 95] </ref> recently presented an O (n 5 )-time approximation algorithm for the problem of adding the minimum number of new edges to a k-node connected graph to make it (k + 1)-node connected. <p> The difference between the number of new edges added by Jordan's algorithm and a lower bound on the number of new edges is at most k 2. We present an improved version of Jordan's algorithm <ref> [J 95] </ref> that runs in time O (min (k; p n)k 2 n 2 + (log n)kn 2 ) and achieves the same performance guarantee. For k 4, the running time of our algorithm compares favorably with that of the fastest algorithm known for testing k-node connectivity. <p> The proof of correctness of our algorithm is based on Jordan's proof <ref> [J 95] </ref>, but is simpler. Jordan also has a simpler proof in [J]. Moreover, for n (2k + 1), Jordan [J 96] 2 improves the performance guarantee of his algorithm in [J 95] to show a slack of roughly k=2. The rest of the paper is organized as follows. <p> The proof of correctness of our algorithm is based on Jordan's proof <ref> [J 95] </ref>, but is simpler. Jordan also has a simpler proof in [J]. Moreover, for n (2k + 1), Jordan [J 96] 2 improves the performance guarantee of his algorithm in [J 95] to show a slack of roughly k=2. The rest of the paper is organized as follows. Section 2 has definitions, notation and basic results. <p> In other words, separators S and T mesh if T has nonempty intersections with at least two components of GnS. A family (i.e., set) of separators is called nonmeshing if it is pairwise nonmeshing. Variants of the next lemma have appeared before. Lemma 2.2 of <ref> [J 95] </ref> implies a special case of the lemma. Lemma 2.1 If S and T are (not necessarily minimum) separators of a (not necessarily k-connected) graph G such that S and T mesh, then every component of GnT (or GnS) has a node of S (or T ). <p> See Section 5.1 for examples and an application. The next lemma on tight sets is used often in Section 5. The proof follows from the submodularity of jN (Q)j over Q V . Also, see <ref> [J 95, Lemma 1.2] </ref>. <p> Then by Lemma 4.3, there is a component either of GnS or of GnT that contains both v and z. Contradiction. 2 5 Augmenting node connectivity by one Our algorithm for augmenting the node connectivity of a graph by one is a variant of Jordan's algorithm <ref> [J 95] </ref> but is significantly faster. First, we describe a lower bound on the number of new edges required to increase the node connectivity from k to (k + 1). Several recent algorithms for edge/node connectivity augmentation problems are based on splitting-off theorems, see the survey paper [F 94]. <p> Since G has t (G) pairwise disjoint tight sets, we must add dt (G)=2e edges. Unfortunately, the lower bound is not tight and there may be a slack of (k 2), as shown by the following example due to Jordan <ref> [J 95] </ref>: consider the complete bipartite graph K k;k , and note that the minimum number of new edges required is 2k2, but our lower bound is k, since b (K k;k ) = k and t (K k;k ) = 2k. <p> To the best of our knowledge, the earliest splitting-off theorem for node connectivity is due to Bienstock, Brickell and Monma [BBM 90, Theorem 3]. A different proof of a variant of this theorem is given by Jordan <ref> [J 95, Theorem 3.1] </ref>. Jordan gave a splitting-off theorem for the node connectivity of directed graphs [J 93, Theorem 2]. Another proof appears in [FJ 95b]. Splitting-off theorems for node connectivity hold only under appropriate conditions. <p> Take s to be one of the nodes of the copy of K k1 . Our version of the splitting-off theorem is weaker than the splitting-off theorem in <ref> [J 95, Theorem 3.1] </ref>: we add the condition deg e G (s) 2k. This allows us to simplify the proof. <p> Also, our theorem omits the condition jV ( e G)j 2 (k + 1), consequently it has to allow the possibility that e Gns = G is the complete bipartite graph K k;k . (The only use of this condition in <ref> [J 95, Theorem 3.1] </ref> is to show that e Gns 6= K k;k .) The difference between our version of the splitting-off theorem and Bienstock et al's splitting-off theorem [BBM 90, Theorem 3] is that a new condition (see (3) in Theorem 5.1) has been added. <p> satisfying (ii) and the other satisfying (iii), but then we take W ij to be either of these two sets.) Case (i) is crucial for our proof of the splitting-off theorem; we will avoid cases (ii) and (iii) altogether. (These three cases correspond to cases (ff), (fi) and (fl) in <ref> [J 95, p. 13] </ref>.) Let G be a k-connected graph. We call an (inclusionwise) minimal tight set of G a leaf, and denote the leafs by D i ; i = 1; 2; : : :. <p> The resulting graph is 3-connected. Consider the 3-separators that isolate f and g, fa; b; gg and fc; d; f g, and note that the leafs fa; b; eg and fc; d; eg intersect.) The next result is from <ref> [J 95] </ref>. Recall from Section 5.1 that t (G) denotes the maximum number of pairwise disjoint tight sets in G. Fact 5.3 (Lemma 2.1 [J 95]) If a k-connected graph H has t (H) k + 1, then all the leafs are pairwise disjoint, and the number of leafs is t <p> fa; b; gg and fc; d; f g, and note that the leafs fa; b; eg and fc; d; eg intersect.) The next result is from <ref> [J 95] </ref>. Recall from Section 5.1 that t (G) denotes the maximum number of pairwise disjoint tight sets in G. Fact 5.3 (Lemma 2.1 [J 95]) If a k-connected graph H has t (H) k + 1, then all the leafs are pairwise disjoint, and the number of leafs is t (H). Fact 5.4 Let e G be a (k + 1)-connected graph, and let s be a node of e G. <p> The notion of superleafs is used in the proofs of all the splitting-off theorems for node connectivity cited above. The next result is essentially from <ref> [J 95] </ref> (see Claim I in Theorem 3.1) and summarizes some useful properties of superleafs. Fact 5.5 Let G be a k-connected graph with t = t (G) k + 3. Let D 1 ; : : :; D t be the (pairwise disjoint) leafs of G. <p> The proof of Lemma 5.6 follows the proof of Step 3.4, Theorem 3 of [BBM 90] and the proof of Claim II (a)!(b), Theorem 3.1 of <ref> [J 95] </ref>. For the sake of completeness, a proof is included in the appendix. Lemma 5.6 Let G = (V; E) be a k-connected graph (k 1) with t (G) k + 3. <p> Throughout the algorithm G 0 denotes e Gns. Let t = deg e G (s) = j e N (s)j. While t 2k do (main loop) If b &gt; dt=2e then use Jordan's Theorem 2.4 <ref> [J 95] </ref> to augment the connectivity of G 0 to (k + 1) by adding a minimum-cardinality edge set, and stop. End (If). Let Q i be an arbitrary superleaf of G 0 . <p> End (If). Decrease t by 2 (since we want t = deg e G (s)), and use the dynamic algorithm (Section 3.1, page 8) to update b = b (G 0 ). End (While). Augment G 0 (suboptimally) using Phase 5 of Jordan's algorithm <ref> [J 95] </ref> and stop. End The proof is given in two parts. The first part proves the correctness and the performance guarantee, and the second part analyzes the running time. The first part follows from similar results for Jordan's algorithm [J 95], but for the sake of completeness, we include the <p> Augment G 0 (suboptimally) using Phase 5 of Jordan's algorithm <ref> [J 95] </ref> and stop. End The proof is given in two parts. The first part proves the correctness and the performance guarantee, and the second part analyzes the running time. The first part follows from similar results for Jordan's algorithm [J 95], but for the sake of completeness, we include the proof in the appendix. <p> This takes time O (min (k; p n)kn 2 ), since we need O (n) maximum flow computations. Consider an iteration of the while loop. If b (G 0 ) &gt; dt=2e k, then we use the construction in Theorem 2.4 of <ref> [J 95] </ref>. This takes linear time. Otherwise, we take an arbitrary neighbor v i of s in e G, and compute the superleaf Q i containing v i . If N 0 (Q i ) is not a shredder, then we apply Lemma 5.6. <p> Updating b (G 0 ) takes time O ((min (k; p n) + log n)kn), by Theorem 3.6. Summarizing, the O (n) iterations of the while loop take time O (min (k; p n)k 2 n 2 + (log n)kn 2 ) altogether. Phase 5 of Jordan's algorithm <ref> [J 95] </ref> takes time O (min (k; p n)k 3 n), since it essentially consists of t = O (k 2 ) maximum flow computations. <p> If the current graph G 0 in an execution of the while loop has b (G 0 ) &gt; dt (G 0 )=2e k, then a minimum-cardinality augmenting set for G 0 is easily found by Theorem 2.4 of <ref> [J 95] </ref>: Suppose that a k-connected graph G has b (G) k + 1 and b (G) &gt; dt (G)=2e. Then there is an augmenting set of cardinality b (G) 1. In this case, the overall augmenting set for the original graph G is optimal. <p> As shown in <ref> [J 95] </ref>, a well-known result of Mader implies that F 0 contains no cycles. Mader's result is: In a (k + 1)-connected graph, a cycle consisting of critical edges must be incident to at least one node of degree k + 1. Hence, jF 0 j (t 1). <p> t (k + 1), then possibly t (G 0 ) &lt; t, but we may assume t (G 0 ) 3, so the slack is (k) d3=2e (k 2). (The algorithm can easily recognize the special case t (G 0 ) = 2, and find a one-edge augmenting set by <ref> [J 95, Lemma 3.2] </ref>.) 2
Reference: [J] <author> T. Jordan, Ph. D. </author> <type> thesis. </type>
Reference-contexts: The proof of correctness of our algorithm is based on Jordan's proof [J 95], but is simpler. Jordan also has a simpler proof in <ref> [J] </ref>. Moreover, for n (2k + 1), Jordan [J 96] 2 improves the performance guarantee of his algorithm in [J 95] to show a slack of roughly k=2. The rest of the paper is organized as follows. Section 2 has definitions, notation and basic results.
Reference: [J 96] <author> T. Jordan, </author> <type> Personal communication, </type> <month> February </month> <year> 1996. </year>
Reference-contexts: The proof of correctness of our algorithm is based on Jordan's proof [J 95], but is simpler. Jordan also has a simpler proof in [J]. Moreover, for n (2k + 1), Jordan <ref> [J 96] </ref> 2 improves the performance guarantee of his algorithm in [J 95] to show a slack of roughly k=2. The rest of the paper is organized as follows. Section 2 has definitions, notation and basic results.
Reference: [J 96b] <author> T. Jordan, </author> <title> "On the number of shredders," </title> <type> manuscript, </type> <month> November </month> <year> 1996. </year>
Reference-contexts: Totaling up, the running time of the algorithm is O (min (k; p 2 6 Conclusions Very recently, Jordan showed that in a k-connected graph G = (V; E) with jV j 3k 1, there are at most jV j k-shredders, <ref> [J 96b] </ref>. Except for the case jV j &lt; 3k 1, this solves one of the open questions in a preliminary version of this paper. Let T (n; k) denote the running time for testing an n-node graph for k-connectivity.
Reference: [K 95] <author> D. Karger, </author> <title> "A randomized fully polynomial time approximation scheme for the all terminal network reliability problem," </title> <booktitle> Proc. 27th ACM S.T.O.C. </booktitle> <year> (1995), </year> <pages> 11-17. </pages>
Reference-contexts: The time per edge update is O (jEj + (min (k; p Counting the number of k-separators of a k-node connected graph is a fundamental problem. For example, the recent approximation scheme of Karger <ref> [K 95] </ref> for estimating network reliability with respect to edge failures is based on counting (and generating) all the minimum-cardinality edge separators in polynomial time. Karger's work raised the question whether this method extends to approximating network reliability w.r.t. node failures.
Reference: [Lo 74] <author> L. Lovasz, </author> <booktitle> Lecture at Conference in Graph Theory, </booktitle> <address> Prague, </address> <year> 1974. </year>
Reference-contexts: If we succeed, then the resulting graph G 0 (without node s) will be a (k + 1)-connected augmentation of G. The earliest splitting-off theorem is due to Lovasz <ref> [Lo 74] </ref> and concerns the edge connectivity of multigraphs: If s is a node of even degree in a multigraph e G, and there are at least k 2 edge-disjoint paths between any two nodes of V ( e G)ns, then all edges incident to s can be paired up and
Reference: [Ma 78] <author> W. Mader, </author> <title> "A reduction method for edge-connectivity in graphs," </title> <journal> Annals of Discrete Math. </journal> <volume> 3 (1978), </volume> <pages> 145-164. </pages>
Reference-contexts: Mader <ref> [Ma 78] </ref> gave a deep generalization. Mader [Ma 82] also gave a splitting-off theorem for the edge connectivity of directed multigraphs. Other expositions of these three results may be found in [F 92a], [F 92b] and [F 93, FJ 95a], respectively.
Reference: [Ma 82] <editor> W. Mader, "Konstruktion aller n-fach kantenzusammenhangenden Digraphen," </editor> <booktitle> European J. Combinatorics 3 (1982), </booktitle> <pages> 63-67. </pages>
Reference-contexts: Mader [Ma 78] gave a deep generalization. Mader <ref> [Ma 82] </ref> also gave a splitting-off theorem for the edge connectivity of directed multigraphs. Other expositions of these three results may be found in [F 92a], [F 92b] and [F 93, FJ 95a], respectively.
Reference: [NI 92] <author> H. Nagamochi and T. Ibaraki, </author> <title> "A linear-time algorithm for finding a sparse k-connected spanning subgraph of a k-connected graph," </title> <booktitle> Algorithmica 7 (1992), </booktitle> <pages> 583-596. </pages>
Reference-contexts: Thus, Step 6 can be implemented in linear time. 2 The time bound in the above theorem can be improved by precomputing a sparse certificate for (k + 1)-connectivity, G 0 = (V; E 0 ); E 0 E, see <ref> [NI 92, CKT 93, FIN 93] </ref>. G 0 has jE 0 j (k + 1)(n 1) = O (kn), and if G is (k + 1)-connected, then G 0 is (k + 1)-connected. Moreover, G 0 can be computed in linear time, [NI 92]. <p> G 0 has jE 0 j (k + 1)(n 1) = O (kn), and if G is (k + 1)-connected, then G 0 is (k + 1)-connected. Moreover, G 0 can be computed in linear time, <ref> [NI 92] </ref>. <p> At the start of the algorithm, we replace the k-connected input graph G = (V; E) by (V; ^ E), where ^ E E is a sparse certificate for the (k + 1)-connectivity of G, see <ref> [NI 92, CKT 93, FIN 93] </ref>. The cardinality of ^ E is &lt; (k + 1)n = O (kn), and ^ E can be computed in linear time by finding a so-called legal ordering of the nodes.
Reference: [PB 83] <author> J. S. Provan and M. O. Ball, </author> <title> "The complexity of counting cuts and of computing the probability that a graph is connected," </title> <journal> SIAM J. Computing 12 (1983), </journal> <pages> 777-788. </pages>
Reference-contexts: We give a reduction to our problem from the problem of counting the number of minimum node covers in a bipartite graph H such that H has a perfect matching. The latter problem is well known to be #P-complete, see <ref> [PB 83, Problem 4, page 783] </ref> (note that the bipartite graph there has a perfect matching). Let the bipartition of V (H) be given by P; Q (so V (H) = P [ Q), and let k = jP j = jQj.
Reference: [RW 95] <author> R. Ravi and D. P. Williamson, </author> <title> "An approximation algorithm for minimum-cost vertex-connectivity problems," </title> <note> Preliminary version in Proc. 6th ACM-SIAM S.O.D.A. (1995), 332-341. To appear in Algorithmica. </note>
Reference-contexts: For instance, given a tree, one may want to add the minimum number of new edges to achieve 3-node connectivity. Readers interested in network design with arbitrary edge costs are referred to [GW 95] and <ref> [RW 95] </ref>, and readers interested in edge/node connectivity augmentation problems for both graphs and directed graphs are referred to [F 94]. Let us focus on node connectivity augmentation problems: given a graph, increase the node connectivity to k 0 by adding the minimum number of new edges.
Reference: [WN 90] <author> T. Watanabe and A. Nakamura, </author> <title> "A smallest augmentation to 3-connect a graph," </title> <journal> Discrete Appl. Math. </journal> <volume> 28 (1990), </volume> <pages> 183-186. 25 </pages>
Reference-contexts: The case k 0 = 2 was solved by Eswaran & Tarjan [ET 76], and later Hsu & Ramachandran [HR 93] gave a linear-time algorithm. The case k 0 = 3 was solved by Watanabe & Nakamura <ref> [WN 90] </ref>, and a linear-time algorithm was given by Hsu & Ramachandran [HR 91].
References-found: 32

