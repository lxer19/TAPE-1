URL: ftp://theory.cs.uni-bonn.de/pub/reports/cs-reports/1996/85151-cs.ps.gz
Refering-URL: http://cs.uni-bonn.de/info5/publications/CS-1996-en.html
Root-URL: http://cs.uni-bonn.de
Email: email: blum@cs.uni-bonn.de  
Title: Greibach Normal Form Transformation, Revisited  
Author: Robert Koch Norbert Blum 
Address: Romerstr. 164, D-53117 Bonn, Germany  
Affiliation: Informatik IV, Universitat Bonn  
Abstract: We develop a direct method for placing a given context-free grammar into Greibach normal form with only polynomial increase of its size; i.e., we don't use any algebraic concept like formal power series. Starting with a cfg G in Chomsky normal form, we will use standard methods for the construction of an equivalent context-free grammar from a finite automaton and vice versa for transformation of G into an equivalent cfg G 0 in Greibach normal form. The size of G 0 will be O(jGj 3 ), where jGj is the size of G. Moreover, we show that it would be more efficient to apply the algorithm to a context-free grammar in canonical two form, obtaining a context-free grammar where, up to chain rules, the productions fulfill the Greibach normal form properties, and then to use the standard method for chain rule elimination for the transformation of this grammar into Greibach normal form. The size of the constructed grammar is O(jGj 4 ) instead of O(jGj 6 ), which we would obtain if we transform G into Chomsky normal form and then into Greibach normal form. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. V. Aho, and J. D. Ullman, </author> <title> The Theory of Parsing, Translation, and Compiling, Vol. I: Parsing, </title> <publisher> Prentice-Hall (1972). </publisher>
Reference-contexts: 1 Introduction and definitions We assume that the reader is familiar with the elementary theory of finite automata and context-free grammars as written in standard text books, e.g. <ref> [1, 4, 6, 9] </ref>. First, we will review the notations used in the subsequence.
Reference: [2] <author> N. Blum, </author> <title> More on the power of chain rules in context-free grammars, </title> <booktitle> TCS 27 (1983), </booktitle> <pages> 287-295. </pages>
Reference-contexts: Corollary 1 Let G = (V; ; P; S) be a cfg. Then there exists a cfg G 0 = (V 0 ; ; P 0 ; S) in 2-Gnf such that L (G 0 ) = L (G) and jG 0 j = O (jGj 6 ). In <ref> [2] </ref>, it is shown that for all * &gt; 0 and sufficiently large n there is a context-free language CL n with the following properties: a) CL n has a cfg of size O (n). b) Each chain rule free cfg for CL n has size O (* 3 n 3=2*
Reference: [3] <author> S. A. Greibach, </author> <title> A new normal-form theorem for context-free, phrase-structure grammars, </title> <booktitle> JACM 12 (1965), </booktitle> <pages> 42-52. </pages>
Reference-contexts: Given an arbritrary cfg G = (V; ; P; S), it is well known that G can be transformed into an equivalent cfg G 0 which is in Gnf <ref> [3, 4, 6, 9] </ref>. But the usual algorithms possibly construct a cfg G 0 , where the size of G 0 is exponential in the size of G (see [4], pp. 113-115 for an example).
Reference: [4] <author> M. A. Harrison, </author> <title> Introduction to Formal Language Theory, </title> <publisher> Addison-Wesley (1978). </publisher> <pages> 9 </pages>
Reference-contexts: 1 Introduction and definitions We assume that the reader is familiar with the elementary theory of finite automata and context-free grammars as written in standard text books, e.g. <ref> [1, 4, 6, 9] </ref>. First, we will review the notations used in the subsequence. <p> Given an arbritrary cfg G = (V; ; P; S), it is well known that G can be transformed into an equivalent cfg G 0 which is in Gnf <ref> [3, 4, 6, 9] </ref>. But the usual algorithms possibly construct a cfg G 0 , where the size of G 0 is exponential in the size of G (see [4], pp. 113-115 for an example). <p> But the usual algorithms possibly construct a cfg G 0 , where the size of G 0 is exponential in the size of G (see <ref> [4] </ref>, pp. 113-115 for an example). Given a cfg G without "- rules and without chain rules, Rosenkrantz [8] has given an algorithm which produces an equivalent cfg G 0 in Gnf such that jG 0 j = O (jGj 3 ). <p> Rosenkrantz gave no analysis of the size of G 0 . For an analysis, see <ref> [4] </ref>, pp. 129-130 or [7]. Rosenkrantz's algorithm uses formal power series. We will develop a direct method for placing a given cfg into Gnf with only polynomial increase of its size; i.e., we don't use any algebraic concept like formal power series. <p> Let L R i.e., L R B is L B reversed. First, we will construct a nfa M B = (Q; V; ffi; B B ; S B ) with L (M B ) = L R B . Using a standard method (see <ref> [4] </ref>, pp. 55-56), it is easy to construct from M B a nfa M 0 B with L (M 0 B ) = L B . <p> Using the standard method for the construction of an equivalent cfg from a given nfa (see <ref> [4] </ref>, pp. 61-62), we obtain the cfg G 0 B . (3) Define G 0 B = (V B ; V; P 0 V B = fA B j A 2 N n fSgg [ fS B g [ V; and P 0 (C B 6= B B or ffi 0 <p> S) in 2-Gnf such that L (G 0 ) = L (G) and jG 0 j = O (jGj 3 ). 6 Given an arbitrary cfg G = (V; ; P; S), the usual algorithm for the trans-formation of G into Cnf can square the size of the grammar (see <ref> [4] </ref>, pp. 102 for an example). No better algorithm is known. This observation leads directly to the following corollary. Corollary 1 Let G = (V; ; P; S) be a cfg.
Reference: [5] <author> M. A. Harrison, and A. Yehudai, </author> <title> Eliminating null rules in linear time, </title> <journal> The Computer Journal 24 (1981), </journal> <pages> 156-161. </pages>
Reference-contexts: n there is a context-free language CL n with the following properties: a) CL n has a cfg of size O (n). b) Each chain rule free cfg for CL n has size O (* 3 n 3=2* ). 3 Improving the size of the Gnf grammar Harrison and Yehudai <ref> [5] </ref> have developed an algorithm which eliminates for a given cfg G = (V; ; P; S) the "-rules in linear time. Moreover, the constructed cfg G 0 = (V 0 ; ; P 0 ; S) is in canonical two form and jG 0 j 12jGj.
Reference: [6] <author> J. E. Hopcroft, and J. D. Ullman, </author> <title> Introduction to Autmata Theory, Languages, and Computation, </title> <publisher> Addison-Wesley (1979). </publisher>
Reference-contexts: 1 Introduction and definitions We assume that the reader is familiar with the elementary theory of finite automata and context-free grammars as written in standard text books, e.g. <ref> [1, 4, 6, 9] </ref>. First, we will review the notations used in the subsequence. <p> Given an arbritrary cfg G = (V; ; P; S), it is well known that G can be transformed into an equivalent cfg G 0 which is in Gnf <ref> [3, 4, 6, 9] </ref>. But the usual algorithms possibly construct a cfg G 0 , where the size of G 0 is exponential in the size of G (see [4], pp. 113-115 for an example).
Reference: [7] <author> A. Kelemenova, </author> <title> Complexity of normal form grammars, </title> <booktitle> TCS 28 (1984), </booktitle> <pages> 299-314. </pages>
Reference-contexts: Rosenkrantz gave no analysis of the size of G 0 . For an analysis, see [4], pp. 129-130 or <ref> [7] </ref>. Rosenkrantz's algorithm uses formal power series. We will develop a direct method for placing a given cfg into Gnf with only polynomial increase of its size; i.e., we don't use any algebraic concept like formal power series.
Reference: [8] <author> D. J. Rosenkrantz, </author> <title> Matrix equations and normal forms for context-free grammers, </title> <booktitle> JACM 14 (1967), </booktitle> <pages> 501-507. </pages>
Reference-contexts: But the usual algorithms possibly construct a cfg G 0 , where the size of G 0 is exponential in the size of G (see [4], pp. 113-115 for an example). Given a cfg G without "- rules and without chain rules, Rosenkrantz <ref> [8] </ref> has given an algorithm which produces an equivalent cfg G 0 in Gnf such that jG 0 j = O (jGj 3 ). Rosenkrantz gave no analysis of the size of G 0 . For an analysis, see [4], pp. 129-130 or [7]. Rosenkrantz's algorithm uses formal power series.
Reference: [9] <author> D. Wood, </author> <title> Theory of Computation, </title> <publisher> Harper & Row (1987). </publisher> <pages> 10 </pages>
Reference-contexts: 1 Introduction and definitions We assume that the reader is familiar with the elementary theory of finite automata and context-free grammars as written in standard text books, e.g. <ref> [1, 4, 6, 9] </ref>. First, we will review the notations used in the subsequence. <p> Given an arbritrary cfg G = (V; ; P; S), it is well known that G can be transformed into an equivalent cfg G 0 which is in Gnf <ref> [3, 4, 6, 9] </ref>. But the usual algorithms possibly construct a cfg G 0 , where the size of G 0 is exponential in the size of G (see [4], pp. 113-115 for an example).
References-found: 9

