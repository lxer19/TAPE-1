URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3382/3382.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: High Performance Spatial Indexing for Parallel I/O and Centralized Architectures  
Author: Ibrahim M. Kamel, 
Degree: Doctor of Philosophy, 1994 Dissertation directed by: Associate Professor Christos Faloutsos  
Affiliation: Department of Computer Science  
Note: Abstract Title of Dissertation:  
Abstract: Recently, spatial databases have attracted increasing interest in the database field. Because of the volume of the data with which they deal with, the performance of spatial database systems' is important. The R-tree is an efficient spatial access method. It is a generalization of the B-tree in multidimensional space. This thesis investigates how to improve the performance of R-trees. We consider both parallel I/O and centralized architectures. For a parallel I/O environment we propose an R-tree design for a server with one CPU and multiple disks. On this architecture, the nodes of the R-tree are distributed between the different disks with cross-disk pointers (`Multiplexed R-tree'). When a new node is created we have to decide on which disk it will be stored. We propose and examine several criteria for choosing a disk for a new node. The most successful one, termed 'Proximity Index' or PI, estimates the 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Abel and J. Smith. </author> <title> A data structure and algorithm based on a linear key for a rectangle retrieval problem. Computer Vision Graph. </title> <journal> Image Process., </journal> <volume> 24(1) </volume> <pages> 1-13, </pages> <month> October </month> <year> 1983. </year>
Reference-contexts: Quadtrees are used for points, as in the point quadtree [23], the MX quadtree, and the PR quadtree [57, 65]; for rectangles, as in the MX-CIF <ref> [45, 1] </ref>; and for lines, as in the PMR quadtree. <p> A detailed survey of the quadtree and its variants can be found in [67]. Gargantini [28] proposed a disk-resident quadtree called the linear quadtree. Spatial objects are divided into quadtree blocks, whose z-order (Morton key) is used as the primary key for a B + -tree <ref> [1] </ref> organization. Equivalently, Oren-stein [60, 58] proposed the Z-order which divide the spatial object into rectangular blocks and store them in any PAM. <p> N 0 and disk A (= 0.15 in this example). 30 N N Disk A N 5 8 N father 0.15 0.15 The numbers next to the solid arrows show the proximity measure. 3.3.2 Observations As we can see, the proximity measure can take any real value in the range <ref> [0; 1] </ref> with its value increasing with the similarity between the two rectangles. Next, we present some arithmetic examples to illustrate that the proximity measure behaves as intuitively expected. As before, a one-dimensional segment X is represented by its starting and ending coordinate [x start ; x end ]. <p> Next, we present some arithmetic examples to illustrate that the proximity measure behaves as intuitively expected. As before, a one-dimensional segment X is represented by its starting and ending coordinate [x start ; x end ]. In the one-dimensional case we have * proximity ([0; 0]; <ref> [1; 1] </ref>)=0, which says that the two extreme points have the minimum possible proximity. 31 R S Proximity Index x 10 -3 50.00 150.00 250.00 350.00 450.00 -200.00 0.00 200.00 400.00 600.00 -3 distance x 10 (a) (b) each other (b) Proximity index (R, S) values as a function of their
Reference: [2] <author> W. Aref. </author> <title> Query processing and optimization in spatial databases. </title> <type> PhD thesis, </type> <institution> Computer Vision Lab., Center for Automation Research, University of Maryland at College Park, </institution> <month> August </month> <year> 1993. </year> <note> Also available as Technical Report CAR-TR-676, CS-TR-3097. </note>
Reference-contexts: Moreover we provided an analytical formula (Eq. 4.3) to estimate the response time of an already built R-tree. From a practical point of view, it can help a query optimizer <ref> [33, 2] </ref> give a good estimate for the cost of an R-tree index.
Reference: [3] <author> W. Aref and H. Samet. </author> <title> Optimization strategies for spatial query processing. </title> <booktitle> In Proc. of VLDB Conf., </booktitle> <pages> pages 81-90, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: original space into the point space may result in a skewed point distribution and may thus adversely affect the search performance. 2) Methods for spatial objects `Spatial Access Method' or (SAM) : Other in 4 dexes are designed to store points as well as non-point objects - e.g., Quadtree [28] <ref> [3] </ref>, R-tree [32, 7, 44, 41, 16], Z-order [60], R + -tree [70], and Cell tree [31]. In this thesis, we concentrate on R-tree like-structures. 2.1 Point Access Methods (PAMS) PAM are designed to handle multidimensional points. <p> Notice that the resulting nodes have smaller perimeters. * Eq. 4.3 has theoretical as well as practical value: From a practical point of view, it can assist with the cost estimation and query optimization for spatial queries <ref> [3] </ref>: Maintaining only a few numbers about the R-tree (total area, total perimeter), a query optimizer can make a good estimate of the cost of a range query. Moreover, researchers working on R-trees can use 73 Eq 4.3 to avoid issuing queries in their simulation studies.
Reference: [4] <author> M. Arya, W. Cody, C. Faloutsos, J. Richardson, and A. Toga. QBISM: </author> <title> a prototype 3-D medical image database system. </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 16(1) </volume> <pages> 38-42, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: Introduction Databases of the near future will be required to support non-traditional data types, such as spatial objects [71]. Multimedia databases [54], Geographical Information Systems (GIS) [66], and medical databases <ref> [4] </ref> are examples of databases receiving increasing attention. Handling spatial and multidimensional objects is a common requirement among these databases. For example, in multimedia databases we should be able to store images [5], voice [56], video [62] etc.
Reference: [5] <author> M. Arya, W. Cody, and I. Kamel. </author> <title> Integrating visualization and database systems: A statement of direction. Workshop on Database Issues for Data Visualization, </title> <address> Visualization'93, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: Multimedia databases [54], Geographical Information Systems (GIS) [66], and medical databases [4] are examples of databases receiving increasing attention. Handling spatial and multidimensional objects is a common requirement among these databases. For example, in multimedia databases we should be able to store images <ref> [5] </ref>, voice [56], video [62] etc. In GIS, maps contain multidimensional points, lines, and polygons all of which are new data types. Another example of such non-traditional data types can be found in medical databases which contain 3-dimensional brain scans (e.g.
Reference: [6] <author> F. Aurenhammer. </author> <title> Voronoi diagrams a survey of a fundamental geometric data structure. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(3) </volume> <pages> 345-405, </pages> <month> September </month> <year> 1991. </year> <month> 101 </month>
Reference-contexts: For example, consider two spatial relations that define the borders of lakes and counties. The query "give me a list of counties and all the lakes in them" is an example of a spatial join query. Other queries of interest include the nearest neighbor queries <ref> [6] </ref>. The query "find the nearest lake to Prince Georges county" is an example of a nearest neighbor query. Several spatial access methods approximate objects with, for example, their minimum bounding rectangle (MBR), (or circle, or ellipse, etc.).
Reference: [7] <author> N. Beckmann, H. Kriegel, R. Schneider, and B. Seeger. </author> <title> The R*-tree: an efficient and robust access method for points and rectangles. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <pages> pages 322-331, </pages> <address> Atlantic City, NJ, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: into the point space may result in a skewed point distribution and may thus adversely affect the search performance. 2) Methods for spatial objects `Spatial Access Method' or (SAM) : Other in 4 dexes are designed to store points as well as non-point objects - e.g., Quadtree [28] [3], R-tree <ref> [32, 7, 44, 41, 16] </ref>, Z-order [60], R + -tree [70], and Cell tree [31]. In this thesis, we concentrate on R-tree like-structures. 2.1 Point Access Methods (PAMS) PAM are designed to handle multidimensional points. Non-point objects can be transformed to points in higher dimensional space before being stored. <p> Also, a non-leaf node split in the R + -tree might cause a downward split propagation. When splits propagate downwards, there is no way to guarantee a minimum number of entries per node. Beckman et al: proposed the R fl -tree <ref> [7] </ref>. Their experiment showed that it gives better performance than other R-tree variants. The main idea in their proposal is the concept of forced re-insert, which is analogous to the deferred-splitting in B-trees. <p> A new data rectangle is inserted into the tree according to its place on the Hilbert curve that passes through all the data in the space. Unlike other dynamic R-tree variants which have about 70% space utilization <ref> [7] </ref>, the Hilbert R-tree can demonstrate much higher space utilization. When a node overflows, it refrains from splitting. If the left sibling is not full, the overflowing node pushes some of its entries to it. If the left sibling is full, the two nodes are split into three nodes. <p> d y ) 2Dz-c sorts on the z-value of the center (c x ; c y ) lowx packed R-tree [64] sorts on the x coordinate of the lower left corner linear-split R-tree [32] Guttman's R-tree with linear split quadratic-split R-tree [32] Guttman's R-tree with quadratic split R fl -tree <ref> [7] </ref> R-tree variant, better packing, forced reinsert Table 4.1: List of methods the proposed ones are in italics. We assume that the data are static, or that the frequency of modification is low. <p> The exponential-split R-tree was very slow in building the tree, and it was not used. For the R fl -tree, the percentage of nodes to be deleted in case of node overflow in the forced reinsert algorithm is set to the recommended value of 30% <ref> [7] </ref>. To avoid cluttering the plots, we only plot the best of our proposed algorithms, namely the one using the `2D-c' heuristic. The detailed results for the other Hilbert-based packing algorithms are presented in the next subsection.
Reference: [8] <author> J. Bentley. </author> <title> Multidimensional binary search trees used for associative searching. </title> <journal> Comm. of ACM, </journal> <volume> 18(9) </volume> <pages> 509-517, </pages> <month> September </month> <year> 1975. </year>
Reference-contexts: Non-point objects can be transformed to points in higher dimensional space before being stored. Several PAM have been proposed. We can divide them into hierarchical structures such as the K-D-B tree [63] and non-hierarchical structures such as Grid files [55] and their variants. 2.1.1 Hierarchical Structures The k-d tree <ref> [8] </ref> is a generalization of the binary search tree for multi-dimensional points. At each level a different attribute (or key) value is tested to determine the direction in which a branch is to be made. <p> The k-d tree is a main memory-based structure; it was the inspiration of several disk-based data structures such as the K-D-B tree and the LSD tree. Henrich et al: [34] proposed the Local Split Decision (LSD) tree. Its directory structure is similar to that of the k-d tree <ref> [8] </ref>. It partitions the data space into pairwise disjoint cells. The cutting boundaries may occur at arbitrary positions. Henrich also introduced an algorithm for paging a multi-dimensional binary tree. The LSD tree can store only multi-dimensional points. K-dimensional intervals are transformed into points in a 2k-dimensional space. <p> The LSD tree can store only multi-dimensional points. K-dimensional intervals are transformed into points in a 2k-dimensional space. The K-D-B tree of Robinson [63] is one of the first multidimensional indexes 5 proposed for secondary storage. It combines the properties of the k-d tree <ref> [8] </ref> and the B + -tree. Each time an overflow occurs, the search space is partitioned into two disjoint rectangular subspaces along one axis. Like the B-tree, the K-D-B tree is a balanced tree; that is, all paths to leaves of the tree are equal in length.
Reference: [9] <author> T. Bially. </author> <title> Space-filling curves: Their generation and their application to bandwidth reduction. </title> <journal> IEEE Trans. on Information Theory, </journal> <volume> IT-15(6):658-664, </volume> <month> November </month> <year> 1969. </year>
Reference-contexts: The Hilbert curve can be generalized for higher dimensionalities. Algorithms for drawing the two-dimensional curve of a given order can be found in [30], [40]. An algorithm for higher dimensionalities is given in <ref> [9] </ref>. The path of a space-filling curve imposes a linear ordering on the grid points; this path may be calculated by starting at one end of the curve and following the path to the other end. The actual coordinate values of each point can be calculated.
Reference: [10] <author> T. Brinkhoff, R. Schneider H. Kriegel, and B. Seeger. </author> <title> Multi-step processing of spatial joins. </title> <booktitle> In In Proc. of ACM SIGMOD, </booktitle> <address> Minneapolis, MN, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: He showed that the benefit, in terms of better selectivity due to improved bounding, is significant for the first few dimensions; however, the incremental benefit of an added dimension goes down as more dimensions are added. R-trees can also be used for spatial join queries. Brinkhoff et al: <ref> [11, 10] </ref> studied spatial join processing when two R-trees are available. Their primary idea is the use of several (typically three) filter steps. In the first step, the spatial join is performed on the minimum bounding rectangles (MBR's) of the objects.
Reference: [11] <author> T. Brinkhoff, H. Kriegel, and B. Seeger. </author> <title> Efficient processing of spatial joins using R-trees. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <pages> pages 237-246, </pages> <address> Washington, D.C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: He showed that the benefit, in terms of better selectivity due to improved bounding, is significant for the first few dimensions; however, the incremental benefit of an added dimension goes down as more dimensions are added. R-trees can also be used for spatial join queries. Brinkhoff et al: <ref> [11, 10] </ref> studied spatial join processing when two R-trees are available. Their primary idea is the use of several (typically three) filter steps. In the first step, the spatial join is performed on the minimum bounding rectangles (MBR's) of the objects.
Reference: [12] <author> M. Dillencourt, H. Samet, and M. Tamminen. </author> <title> A general approach to connected-component labeling for arbitrary image representations. </title> <journal> Journal of ACM, </journal> <volume> 39(2), </volume> <month> April </month> <year> 1992. </year>
Reference-contexts: cost of reversing the code and 84 query area Hilbert Z-order Q area 2D-c 2Dz-c 0.000000 3.74 5.98 0.001111 8.22 11.48 0.111111 169.76 183.56 Table 4.5: Schema that uses Hilbert order vs. one that uses z-order (disk accesses/query). other properties which are important for image processing algorithms (such as admissibility <ref> [12] </ref>), which are out of the scope of this thesis. In our application, the cost of calculating the Hilbert value is small. Also, we only need to compute the Hilbert value ONCE on insertion; and NEVER on search.
Reference: [13] <author> H. Du and J. Sobolewski. </author> <title> Disk allocation for cartesian product files on multiple disk systems. </title> <journal> ACM Trans. Database Systems (TODS), </journal> <volume> 7(1) </volume> <pages> 82-101, </pages> <month> March </month> <year> 1982. </year>
Reference-contexts: A large number of methods have been proposed to decluster the Cartesian product files (i.e. Grid files). These methods can be grouped into two classes: In the first class, the methods are designed for partial match queries. Methods in this class include the Disk Modulo family <ref> [13] </ref>, the field-wise exclusive OR (FX) method [46], methods using error correcting codes (ECC) [17], and methods using minimum spanning trees [22]. In the second class, the methods are designed for range queries: e.g., HCAM [15] and MAGIC [29].
Reference: [14] <author> C. Faloutsos. </author> <title> Gray codes for partial match and range queries. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 14(10) </volume> <pages> 1381-1393, </pages> <month> October </month> <year> 1988. </year> <note> early version available as UMIACS-TR-87-4, also CS-TR-1796. 102 </note>
Reference-contexts: A space-filling curve visits all the points in a k-dimensional grid exactly once and never crosses itself. The Z-order (or Morton key order, or bit-interleaving, or Peano curve), the Hilbert curve, and the Gray-code curve <ref> [14] </ref> are examples of space-filling curves. In [21], it was shown experimentally that the Hilbert curve achieves the best clustering of the above three methods. We now provide a brief introduction to the Hilbert curve.
Reference: [15] <author> C. Faloutsos and P. Bhagwat. </author> <title> Declustering using fractals. </title> <booktitle> In 2nd Int. Conference on Parallel and Distributed Information Systems (PDIS), </booktitle> <pages> pages 18-25, </pages> <address> San Diego, CA, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: Methods in this class include the Disk Modulo family [13], the field-wise exclusive OR (FX) method [46], methods using error correcting codes (ECC) [17], and methods using minimum spanning trees [22]. In the second class, the methods are designed for range queries: e.g., HCAM <ref> [15] </ref> and MAGIC [29]. In HCAM [15] the Hilbert curve is used to impose linear order on the buckets in a multi-dimensional space, and then to traverse this sorted list of buckets, assigning each bucket to the disk in round-robin fashion. <p> In the second class, the methods are designed for range queries: e.g., HCAM <ref> [15] </ref> and MAGIC [29]. In HCAM [15] the Hilbert curve is used to impose linear order on the buckets in a multi-dimensional space, and then to traverse this sorted list of buckets, assigning each bucket to the disk in round-robin fashion.
Reference: [16] <author> C. Faloutsos and I. Kamel. </author> <title> High performance R-trees. </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 16(3) </volume> <pages> 28-33, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: into the point space may result in a skewed point distribution and may thus adversely affect the search performance. 2) Methods for spatial objects `Spatial Access Method' or (SAM) : Other in 4 dexes are designed to store points as well as non-point objects - e.g., Quadtree [28] [3], R-tree <ref> [32, 7, 44, 41, 16] </ref>, Z-order [60], R + -tree [70], and Cell tree [31]. In this thesis, we concentrate on R-tree like-structures. 2.1 Point Access Methods (PAMS) PAM are designed to handle multidimensional points. Non-point objects can be transformed to points in higher dimensional space before being stored.
Reference: [17] <author> C. Faloutsos and D. Metaxas. </author> <title> Declustering using error correcting codes. </title> <booktitle> In Proc. of ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems (PODS), </booktitle> <pages> pages 253-258, </pages> <address> Philadelphia, PA, </address> <month> March </month> <year> 1989. </year> <note> Also available as UMIACS-TR-88-91 and CS-TR-2157. </note>
Reference-contexts: Grid files). These methods can be grouped into two classes: In the first class, the methods are designed for partial match queries. Methods in this class include the Disk Modulo family [13], the field-wise exclusive OR (FX) method [46], methods using error correcting codes (ECC) <ref> [17] </ref>, and methods using minimum spanning trees [22]. In the second class, the methods are designed for range queries: e.g., HCAM [15] and MAGIC [29].
Reference: [18] <author> C. Faloutsos, M. Ranganathan, and Y. Manolopoulos. </author> <title> Fast subsequence matching in time-series databases. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <pages> pages 419-429, </pages> <address> Minneapolis, MN, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: For example, in multimedia databases with audio (voice, music), video, etc., users might want to retrieve similar objects, such as music scores or video clips. One way to handle the problem is to map the objects into some feature space as multi-dimensional 99 points <ref> [18, 42] </ref>, and subsequently to organize them in a SAM. 100
Reference: [19] <author> C. Faloutsos and W. Rego. Tri-cell: </author> <title> a data structure for spatial objects. </title> <journal> Information Systems, </journal> <volume> 14(2) </volume> <pages> 131-139, </pages> <year> 1989. </year> <note> early version available as UMIACS-TR-87-15, CS-TR-1829. </note>
Reference-contexts: Hinrichs and Nievergelt [35] suggested using the grid file after a rotation of the axes. The rotation is necessary in order to avoid non-uniform distribution of points, which would lead to poor grid file performance. Faloutsos and Rego <ref> [19] </ref> proposed dividing the address space into triangular cells (as opposed to rectangular one as in the grid files) in order to better handle the correlated data and non-point geometric objects. The standard grid files achieve about 70% storage utilization.
Reference: [20] <author> C. Faloutsos and Y. Rong. </author> <title> DOT: a spatial access method using fractals. </title> <booktitle> In Proc. of Int. Conf. on Data Engineering (ICDE), </booktitle> <pages> pages 152-159, </pages> <address> Kobe, Japan, </address> <month> April </month> <year> 1991. </year> <note> early version available as UMIACS-TR-89-31, CS-TR-2214. </note>
Reference-contexts: For the purpose of this dissertation, we provide the following mean of classifying the structures. 1) Methods that are designed for storing multidimensional points only. These methods are called Point Access Methods (PAM) - e.g., Grid files [35], LSD tree [34], buddy tree [68], and DOT <ref> [20] </ref>. One way to use PAM for storing non-point objects is to transform the objects to points in higher-dimensional space [35]. For example, rectangles in two-dimensional space can be transformed to points in four-dimensional space by using the x,y coordinates of two opposite corners.
Reference: [21] <author> C. Faloutsos and S. Roseman. </author> <title> Fractals for secondary key retrieval. </title> <booktitle> In Proc. of ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems (PODS), </booktitle> <pages> pages 247-252, </pages> <address> Philadelphia, PA, </address> <month> March </month> <year> 1989. </year> <note> also available as UMIACS-TR-89-47 and CS-TR-2242. 103 </note>
Reference-contexts: One of their characteristics is to pass by every point in the space exactly once. Other space-filling curves such as the Hilbert and Gray codes can be used to linearize the multi-dimensional space and to store the data in a PAM <ref> [21] </ref>. In [21, 40] they experimentally showed that the Hilbert curve achieves the best clustering among other methods. 9 2.2.2 R-tree-based Methods One of the most characteristic approaches in spatial access methods is the R-tree proposed originally by Guttman [32]. It is an extension of the B-tree for multi-dimensional objects. <p> One of their characteristics is to pass by every point in the space exactly once. Other space-filling curves such as the Hilbert and Gray codes can be used to linearize the multi-dimensional space and to store the data in a PAM [21]. In <ref> [21, 40] </ref> they experimentally showed that the Hilbert curve achieves the best clustering among other methods. 9 2.2.2 R-tree-based Methods One of the most characteristic approaches in spatial access methods is the R-tree proposed originally by Guttman [32]. It is an extension of the B-tree for multi-dimensional objects. <p> A space-filling curve visits all the points in a k-dimensional grid exactly once and never crosses itself. The Z-order (or Morton key order, or bit-interleaving, or Peano curve), the Hilbert curve, and the Gray-code curve [14] are examples of space-filling curves. In <ref> [21] </ref>, it was shown experimentally that the Hilbert curve achieves the best clustering of the above three methods. We now provide a brief introduction to the Hilbert curve. The basic Hilbert curve on a 2x2 grid, denoted by H 1 , is shown in Figure 4.3. <p> For the sake of comparison, we also examined a method that uses the Peano curve, or `z-ordering', despite the fact that the z-ordering achieves inferior clustering compared to the Hilbert curve <ref> [21] </ref>. The z-value of a point is computed by bit-interleaving the binary representation of its x and y coordinates. For example, in Figure 4.5, the point (0,0) has a z-value of 0, while the point (1,3) has a z-value of 7.
Reference: [22] <author> M. Fang, R. Lee, and C. Chang. </author> <title> The idea of de-clustering and its appli-cations. </title> <booktitle> In Proc. of VLDB Conf., </booktitle> <pages> pages 181-188, </pages> <address> Kyoto, Japan, </address> <month> August </month> <year> 1986. </year>
Reference-contexts: Methods in this class include the Disk Modulo family [13], the field-wise exclusive OR (FX) method [46], methods using error correcting codes (ECC) [17], and methods using minimum spanning trees <ref> [22] </ref>. In the second class, the methods are designed for range queries: e.g., HCAM [15] and MAGIC [29].
Reference: [23] <author> R. Finkel and J. Bentley. </author> <title> Quad Trees: a data structure for retrieval on composite keys. </title> <journal> ACTA Informatica, </journal> <volume> 4(1) </volume> <pages> 1-9, </pages> <year> 1974. </year>
Reference-contexts: as fast as in the standard grid file. 2.2 Spatial Access Methods In this section we present spatial access methods that are designed to handle point as well as non-point spatial objects. 2.2.1 Quadtree-based Methods The quadtree is a hierarchical data structure based on a recursive decomposition of the space <ref> [23] </ref>. Quadtrees are used for points, as in the point quadtree [23], the MX quadtree, and the PR quadtree [57, 65]; for rectangles, as in the MX-CIF [45, 1]; and for lines, as in the PMR quadtree. <p> Methods In this section we present spatial access methods that are designed to handle point as well as non-point spatial objects. 2.2.1 Quadtree-based Methods The quadtree is a hierarchical data structure based on a recursive decomposition of the space <ref> [23] </ref>. Quadtrees are used for points, as in the point quadtree [23], the MX quadtree, and the PR quadtree [57, 65]; for rectangles, as in the MX-CIF [45, 1]; and for lines, as in the PMR quadtree.
Reference: [24] <author> M. Freeston. </author> <title> The BANG file: a new kind of Grid file. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <pages> pages 260-269, </pages> <address> San Francisco, CA, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: Because of this, hB-trees can avoid the downward split propagation that occurs in K-D-B tree. The hB-tree guarantees at least 33% node utilization. The BANG file <ref> [24] </ref> of Freeston is a grid file type (Grid files are explained in the next section), but its directory is organized as a tree structure (as opposed to a multi-dimensional array as in Grid files).
Reference: [25] <author> H. Fuchs, G. D. Abram, and E. D. Grant. </author> <title> Near real-time shaded display of rigid objects. </title> <journal> Computer Graphics, </journal> <volume> 17(3), </volume> <month> July </month> <year> 1983. </year>
Reference-contexts: Beckman et al: also introduced a new splitting and a new insertion algorithm. These algorithms take into consideration not only the area as in Guttman's R-tree, but also the perimeter and the overlap of the directory rectangles. Gunther's Cell tree [31] is an extension of the BSP tree <ref> [26, 25] </ref> for secondary storage. It divides the search space into disjoint polyhedron cells. The data are organized in a hierarchical structure. The interior nodes correspond to nested 12 hierarchy of convex polyhedra. Jagadish [41] suggested the use of polygonal bounding instead of rectangular bounding of the spatial objects.
Reference: [26] <author> H. Fuchs, Z. Kedem, and B. Naylor. </author> <title> On visible surface generation by a prior tree structures. </title> <journal> Computer Graphics, </journal> <volume> 14(3), </volume> <month> July </month> <year> 1980. </year>
Reference-contexts: Beckman et al: also introduced a new splitting and a new insertion algorithm. These algorithms take into consideration not only the area as in Guttman's R-tree, but also the perimeter and the overlap of the directory rectangles. Gunther's Cell tree [31] is an extension of the BSP tree <ref> [26, 25] </ref> for secondary storage. It divides the search space into disjoint polyhedron cells. The data are organized in a hierarchical structure. The interior nodes correspond to nested 12 hierarchy of convex polyhedra. Jagadish [41] suggested the use of polygonal bounding instead of rectangular bounding of the spatial objects.
Reference: [27] <author> H. Garcia-Molina and K. Salem. </author> <title> The impact of disk striping on reliability. </title> <journal> IEEE Database Engineering, </journal> <volume> 11(1) </volume> <pages> 26-39, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: To retrieve a node from the R-tree, we read in parallel all d pages that constitute this node. In other words, we `stripe' the super-node on the d disks, using page-striping <ref> [27] </ref>. Almost identical performance will be obtained with bit- or byte-level striping. This scheme can work both with synchronized and unsynchronized disks.
Reference: [28] <author> I. </author> <title> Gargantini. An effective way to represent quadtrees. </title> <journal> Comm. of ACM, </journal> <volume> 25(12) </volume> <pages> 905-910, </pages> <month> December </month> <year> 1982. </year>
Reference-contexts: the original space into the point space may result in a skewed point distribution and may thus adversely affect the search performance. 2) Methods for spatial objects `Spatial Access Method' or (SAM) : Other in 4 dexes are designed to store points as well as non-point objects - e.g., Quadtree <ref> [28] </ref> [3], R-tree [32, 7, 44, 41, 16], Z-order [60], R + -tree [70], and Cell tree [31]. In this thesis, we concentrate on R-tree like-structures. 2.1 Point Access Methods (PAMS) PAM are designed to handle multidimensional points. <p> Orenstein [57] proposed a k-d trie which is similar to the PR quadtree but uses binary trees instead of quadtrees. Octrees [37, 39] are the extension of quadtrees in three-dimensional space. A detailed survey of the quadtree and its variants can be found in [67]. Gargantini <ref> [28] </ref> proposed a disk-resident quadtree called the linear quadtree. Spatial objects are divided into quadtree blocks, whose z-order (Morton key) is used as the primary key for a B + -tree [1] organization.
Reference: [29] <author> S. Ghandeharizadeh, D. DeWitt, and W. Qureshi. </author> <title> A performance analysis of alternative multi-attribute declustering strategies. </title> <booktitle> In Proc. of SIGMOD Conf., </booktitle> <pages> pages 29-38, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Methods in this class include the Disk Modulo family [13], the field-wise exclusive OR (FX) method [46], methods using error correcting codes (ECC) [17], and methods using minimum spanning trees [22]. In the second class, the methods are designed for range queries: e.g., HCAM [15] and MAGIC <ref> [29] </ref>. In HCAM [15] the Hilbert curve is used to impose linear order on the buckets in a multi-dimensional space, and then to traverse this sorted list of buckets, assigning each bucket to the disk in round-robin fashion. In MAGIC [29], it is assumed that the access pattern is known, and <p> are designed for range queries: e.g., HCAM [15] and MAGIC <ref> [29] </ref>. In HCAM [15] the Hilbert curve is used to impose linear order on the buckets in a multi-dimensional space, and then to traverse this sorted list of buckets, assigning each bucket to the disk in round-robin fashion. In MAGIC [29], it is assumed that the access pattern is known, and the size of the bucket is calculated in order to balance the loads at the units.
Reference: [30] <author> J. Griffiths. </author> <title> An algorithm for displaying a class of space-filling curves. </title> <journal> Software-Practice and Experience, </journal> <volume> 16(5) </volume> <pages> 403-411, </pages> <month> May </month> <year> 1986. </year> <month> 104 </month>
Reference-contexts: When the order of the curve tends to infinity, like other space-filling curve, the resulting curve is a fractal, with a fractal dimension of two [53]. The Hilbert curve can be generalized for higher dimensionalities. Algorithms for drawing the two-dimensional curve of a given order can be found in <ref> [30] </ref>, [40]. An algorithm for higher dimensionalities is given in [9]. The path of a space-filling curve imposes a linear ordering on the grid points; this path may be calculated by starting at one end of the curve and following the path to the other end.
Reference: [31] <author> O. Gunther. </author> <title> The design of the cell tree: an object-oriented index structure for geometric databases. </title> <booktitle> In Proc. of Int. Conf. on Data Engineering (ICDE), </booktitle> <pages> pages 598-605, </pages> <address> Los Angeles, CA, </address> <month> February </month> <year> 1989. </year>
Reference-contexts: adversely affect the search performance. 2) Methods for spatial objects `Spatial Access Method' or (SAM) : Other in 4 dexes are designed to store points as well as non-point objects - e.g., Quadtree [28] [3], R-tree [32, 7, 44, 41, 16], Z-order [60], R + -tree [70], and Cell tree <ref> [31] </ref>. In this thesis, we concentrate on R-tree like-structures. 2.1 Point Access Methods (PAMS) PAM are designed to handle multidimensional points. Non-point objects can be transformed to points in higher dimensional space before being stored. Several PAM have been proposed. <p> Beckman et al: also introduced a new splitting and a new insertion algorithm. These algorithms take into consideration not only the area as in Guttman's R-tree, but also the perimeter and the overlap of the directory rectangles. Gunther's Cell tree <ref> [31] </ref> is an extension of the BSP tree [26, 25] for secondary storage. It divides the search space into disjoint polyhedron cells. The data are organized in a hierarchical structure. The interior nodes correspond to nested 12 hierarchy of convex polyhedra.
Reference: [32] <author> A. Guttman. R-trees: </author> <title> a dynamic index structure for spatial searching. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <pages> pages 47-57, </pages> <address> Boston, MA, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: into the point space may result in a skewed point distribution and may thus adversely affect the search performance. 2) Methods for spatial objects `Spatial Access Method' or (SAM) : Other in 4 dexes are designed to store points as well as non-point objects - e.g., Quadtree [28] [3], R-tree <ref> [32, 7, 44, 41, 16] </ref>, Z-order [60], R + -tree [70], and Cell tree [31]. In this thesis, we concentrate on R-tree like-structures. 2.1 Point Access Methods (PAMS) PAM are designed to handle multidimensional points. Non-point objects can be transformed to points in higher dimensional space before being stored. <p> In [21, 40] they experimentally showed that the Hilbert curve achieves the best clustering among other methods. 9 2.2.2 R-tree-based Methods One of the most characteristic approaches in spatial access methods is the R-tree proposed originally by Guttman <ref> [32] </ref>. It is an extension of the B-tree for multi-dimensional objects. The R-tree is a balanced structure, and it maintains at least 50% space utilization. A geometric object is represented by its minimum bounding rectangle (MBR). <p> We used both the linear and the quadratic splitting algorithm of Guttman <ref> [32] </ref>. The quadratic algorithm resulted in better R-trees, i.e., R-trees with smaller father nodes. The exponential algorithm was very slow and was not used. Unless otherwise stated, all the results we present are based on R-trees that used the quadratic split algorithm. <p> Hilbert value of the center and diameters, i.e., (c x ; c y ; d x ; d y ) 2Dz-c sorts on the z-value of the center (c x ; c y ) lowx packed R-tree [64] sorts on the x coordinate of the lower left corner linear-split R-tree <ref> [32] </ref> Guttman's R-tree with linear split quadratic-split R-tree [32] Guttman's R-tree with quadratic split R fl -tree [7] R-tree variant, better packing, forced reinsert Table 4.1: List of methods the proposed ones are in italics. We assume that the data are static, or that the frequency of modification is low. <p> (c x ; c y ; d x ; d y ) 2Dz-c sorts on the z-value of the center (c x ; c y ) lowx packed R-tree [64] sorts on the x coordinate of the lower left corner linear-split R-tree <ref> [32] </ref> Guttman's R-tree with linear split quadratic-split R-tree [32] Guttman's R-tree with quadratic split R fl -tree [7] R-tree variant, better packing, forced reinsert Table 4.1: List of methods the proposed ones are in italics. We assume that the data are static, or that the frequency of modification is low.
Reference: [33] <author> L. Haas, J. Freytag, G. Lohman, and H. Pirahesh. </author> <title> Extensible query processing in Starburst. </title> <booktitle> In Proc. of ACM SIGMOD Conf., </booktitle> <pages> pages 377-388, </pages> <address> Portland, OR, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: Moreover we provided an analytical formula (Eq. 4.3) to estimate the response time of an already built R-tree. From a practical point of view, it can help a query optimizer <ref> [33, 2] </ref> give a good estimate for the cost of an R-tree index.
Reference: [34] <author> A. Henrich, H. Six, and P. Widmayer. </author> <title> The LSD tree: spatial access to multidimentional point and non point objects. </title> <booktitle> In Proc. of VLDB Conf., </booktitle> <pages> pages 45-53, </pages> <address> Amsterdam, Netherlands, </address> <month> August </month> <year> 1989. </year>
Reference-contexts: Several spatial access methods have been proposed. For the purpose of this dissertation, we provide the following mean of classifying the structures. 1) Methods that are designed for storing multidimensional points only. These methods are called Point Access Methods (PAM) - e.g., Grid files [35], LSD tree <ref> [34] </ref>, buddy tree [68], and DOT [20]. One way to use PAM for storing non-point objects is to transform the objects to points in higher-dimensional space [35]. For example, rectangles in two-dimensional space can be transformed to points in four-dimensional space by using the x,y coordinates of two opposite corners. <p> The k-d tree is a main memory-based structure; it was the inspiration of several disk-based data structures such as the K-D-B tree and the LSD tree. Henrich et al: <ref> [34] </ref> proposed the Local Split Decision (LSD) tree. Its directory structure is similar to that of the k-d tree [8]. It partitions the data space into pairwise disjoint cells. The cutting boundaries may occur at arbitrary positions. Henrich also introduced an algorithm for paging a multi-dimensional binary tree.
Reference: [35] <author> K. Hinrichs and J. Nievergelt. </author> <title> The Grid file: a data structure to support proximity queries on spatial objects. </title> <editor> In M. Nagl and J. Perl, editors, </editor> <booktitle> Proc. of the WG'83 (Intern. Workshop on Graph Theoretic Concepts in Computer Science), </booktitle> <pages> pages 100-113, </pages> <address> Linz, Austria, </address> <year> 1983. </year>
Reference-contexts: Several spatial access methods have been proposed. For the purpose of this dissertation, we provide the following mean of classifying the structures. 1) Methods that are designed for storing multidimensional points only. These methods are called Point Access Methods (PAM) - e.g., Grid files <ref> [35] </ref>, LSD tree [34], buddy tree [68], and DOT [20]. One way to use PAM for storing non-point objects is to transform the objects to points in higher-dimensional space [35]. <p> These methods are called Point Access Methods (PAM) - e.g., Grid files <ref> [35] </ref>, LSD tree [34], buddy tree [68], and DOT [20]. One way to use PAM for storing non-point objects is to transform the objects to points in higher-dimensional space [35]. For example, rectangles in two-dimensional space can be transformed to points in four-dimensional space by using the x,y coordinates of two opposite corners. Other transformations are also possible, such as using the coordinate of the center and the extent values along the x and y axes. <p> Hinrichs and Nievergelt <ref> [35] </ref> suggested using the grid file after a rotation of the axes. The rotation is necessary in order to avoid non-uniform distribution of points, which would lead to poor grid file performance. <p> Consider two line segments R and S where R=(r start , r end ) and S=(s start , s end ). 26 If we represent each segment X as the point (x start , x end ), the segments R and S are transformed into two-dimensional points <ref> [35] </ref> as shown in Figure 3.6.
Reference: [36] <author> E. Hoel and H. Samet. </author> <title> A qualitative comparison study of data structures for large line segment databases. </title> <booktitle> In Proc. of ACM SIGMOD Conf., </booktitle> <pages> pages 205-214, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference: [37] <author> G. Hunter. </author> <title> Efficient computation and data structures for graphics. </title> <type> In Ph.D. dissertation, </type> <institution> Department of Electrical Engineering and Computer Science, Princeton University, Princeton, NJ, </institution> <year> 1978. </year> <month> 105 </month>
Reference-contexts: In "regular" decomposition, the space is decomposed into quadrants of the same size. Orenstein [57] proposed a k-d trie which is similar to the PR quadtree but uses binary trees instead of quadtrees. Octrees <ref> [37, 39] </ref> are the extension of quadtrees in three-dimensional space. A detailed survey of the quadtree and its variants can be found in [67]. Gargantini [28] proposed a disk-resident quadtree called the linear quadtree.
Reference: [38] <author> A. Hutflesz, H. Six, and P. Widmayer. </author> <title> Twin grid files: space optimizing access schemes. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <pages> pages 183-190, </pages> <address> Chicago, IL, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: Faloutsos and Rego [19] proposed dividing the address space into triangular cells (as opposed to rectangular one as in the grid files) in order to better handle the correlated data and non-point geometric objects. The standard grid files achieve about 70% storage utilization. Hutflesz et al: <ref> [38] </ref> proposed the `Twin Grid File' which achieves roughly 90% storage utilization. The basic idea is to use two grid files instead of one as in the standard Grid file.
Reference: [39] <author> C. Jackins and S. Tanimoto. Quad-trees, oct-trees, </author> <title> and k-trees a generalized approach to recursive decomposition of Euclidean space. </title> <journal> IEEE Transaction on Pattern Analysis and Machine Intelligence, </journal> <volume> 5(5) </volume> <pages> 533-539, </pages> <month> September </month> <year> 1983. </year>
Reference-contexts: In "regular" decomposition, the space is decomposed into quadrants of the same size. Orenstein [57] proposed a k-d trie which is similar to the PR quadtree but uses binary trees instead of quadtrees. Octrees <ref> [37, 39] </ref> are the extension of quadtrees in three-dimensional space. A detailed survey of the quadtree and its variants can be found in [67]. Gargantini [28] proposed a disk-resident quadtree called the linear quadtree.
Reference: [40] <author> H. Jagadish. </author> <title> Linear clustering of objects with multiple attributes. </title> <booktitle> In Proc. of ACM SIGMOD Conf., </booktitle> <pages> pages 332-342, </pages> <address> Atlantic City, NJ, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: One of their characteristics is to pass by every point in the space exactly once. Other space-filling curves such as the Hilbert and Gray codes can be used to linearize the multi-dimensional space and to store the data in a PAM [21]. In <ref> [21, 40] </ref> they experimentally showed that the Hilbert curve achieves the best clustering among other methods. 9 2.2.2 R-tree-based Methods One of the most characteristic approaches in spatial access methods is the R-tree proposed originally by Guttman [32]. It is an extension of the B-tree for multi-dimensional objects. <p> The Hilbert curve can be generalized for higher dimensionalities. Algorithms for drawing the two-dimensional curve of a given order can be found in [30], <ref> [40] </ref>. An algorithm for higher dimensionalities is given in [9]. The path of a space-filling curve imposes a linear ordering on the grid points; this path may be calculated by starting at one end of the curve and following the path to the other end.
Reference: [41] <author> H. Jagadish. </author> <title> Spatial search with polyhedra. </title> <booktitle> In Proc. of Int. Conf. on Data Engineering (ICDE), </booktitle> <pages> pages 311-319, </pages> <address> Los Angeles, CA, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: into the point space may result in a skewed point distribution and may thus adversely affect the search performance. 2) Methods for spatial objects `Spatial Access Method' or (SAM) : Other in 4 dexes are designed to store points as well as non-point objects - e.g., Quadtree [28] [3], R-tree <ref> [32, 7, 44, 41, 16] </ref>, Z-order [60], R + -tree [70], and Cell tree [31]. In this thesis, we concentrate on R-tree like-structures. 2.1 Point Access Methods (PAMS) PAM are designed to handle multidimensional points. Non-point objects can be transformed to points in higher dimensional space before being stored. <p> Gunther's Cell tree [31] is an extension of the BSP tree [26, 25] for secondary storage. It divides the search space into disjoint polyhedron cells. The data are organized in a hierarchical structure. The interior nodes correspond to nested 12 hierarchy of convex polyhedra. Jagadish <ref> [41] </ref> suggested the use of polygonal bounding instead of rectangular bounding of the spatial objects.
Reference: [42] <author> H. Jagadish. </author> <title> A retrieval technique for similar shapes. </title> <booktitle> In Proc. of ACM SIGMOD Conf., </booktitle> <pages> pages 208-217, </pages> <address> Denver, CO, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: For example, in multimedia databases with audio (voice, music), video, etc., users might want to retrieve similar objects, such as music scores or video clips. One way to handle the problem is to map the objects into some feature space as multi-dimensional 99 points <ref> [18, 42] </ref>, and subsequently to organize them in a SAM. 100
Reference: [43] <author> I. Kamel and C. Faloutsos. </author> <title> Parallel R-Trees. </title> <booktitle> In Proc. of ACM SIGMOD Conf., </booktitle> <pages> pages 195-204, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year> <note> Also available as Tech. Report UMIACS TR 92-1, CS-TR-2820. </note>
Reference-contexts: Also, the data itself eventually will not fit on one disk. One way to relieve these problems is to distribute the data carefully on more than one unit so that the data can be retrieved and searched in parallel (e.g. <ref> [43, 69] </ref>). The remainder of the thesis is organized as follows: Chapter 2 presents some of the related work on spatial indexing. In Chapter 3, we present the Multiplexed I/O R-tree. In Chapter 4, we present two new R-tree designs based on the Hilbert 2 curve for a centralized environment.
Reference: [44] <author> I. Kamel and C. Faloutsos. Hilbert R-tree: </author> <title> An improved R-tree using fractals. </title> <booktitle> In Proc. of VLDB Conf., </booktitle> <address> Santiago, Chile, </address> <month> September </month> <year> 1994. </year> <note> Also available as Tech. Report UMIACS TR 93-12.1, CS-TR-3032.1. </note>
Reference-contexts: into the point space may result in a skewed point distribution and may thus adversely affect the search performance. 2) Methods for spatial objects `Spatial Access Method' or (SAM) : Other in 4 dexes are designed to store points as well as non-point objects - e.g., Quadtree [28] [3], R-tree <ref> [32, 7, 44, 41, 16] </ref>, Z-order [60], R + -tree [70], and Cell tree [31]. In this thesis, we concentrate on R-tree like-structures. 2.1 Point Access Methods (PAMS) PAM are designed to handle multidimensional points. Non-point objects can be transformed to points in higher dimensional space before being stored.
Reference: [45] <author> G. Kedem. </author> <title> The quad-CIF tree: a data structure for hierarical on-line algorithms. </title> <booktitle> In Proc. of the 19th Design Automation Conference, </booktitle> <pages> pages 352-357, </pages> <address> Las Vegas, NV, </address> <month> June </month> <year> 1982. </year> <month> 106 </month>
Reference-contexts: Quadtrees are used for points, as in the point quadtree [23], the MX quadtree, and the PR quadtree [57, 65]; for rectangles, as in the MX-CIF <ref> [45, 1] </ref>; and for lines, as in the PMR quadtree.
Reference: [46] <author> M. Kim and S. Pramanik. </author> <title> Optimal file distribution for partial match re-trieval. </title> <booktitle> In Proc. ACM SIGMOD Conf., </booktitle> <pages> pages 173-182, </pages> <address> Chicago, IL, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: Grid files). These methods can be grouped into two classes: In the first class, the methods are designed for partial match queries. Methods in this class include the Disk Modulo family [13], the field-wise exclusive OR (FX) method <ref> [46] </ref>, methods using error correcting codes (ECC) [17], and methods using minimum spanning trees [22]. In the second class, the methods are designed for range queries: e.g., HCAM [15] and MAGIC [29].
Reference: [47] <author> D. Knuth. </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> Vol. </volume> <month> 3: </month> <title> Sorting and Searching. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass, </address> <year> 1973. </year>
Reference-contexts: Seeger and Kriegel [68] proposed the Buddy tree, which is similar to the K-D-B tree [63]. They avoided some of the drawbacks of the K-D-B tree, such as the downward split, by using a partitioning schema similar to the buddy system <ref> [47] </ref>. The buddy tree stores the MBR of the data in each node in order to better prune the search space. Lomet and Salzberg [52] suggested a variant of the K-D-B tree called the hB-tree, which exhibts the following distinctions. <p> When a node overflows, it refrains from splitting. If the left sibling is not full, the overflowing node pushes some of its entries to it. If the left sibling is full, the two nodes are split into three nodes. This idea is known as local rotation <ref> [47] </ref>. Moreover, the overflowing node can refrain from splitting unless s of the sibling nodes are full. Thus, by varying the parameter `s' (splitting policy), the Hilbert R-tree trade off insertion cost for search speed and higher utilization. The rest of this chapter is organized as follows.
Reference: [48] <author> C. Kolovson and M. Stonebraker. </author> <title> Segment indexes: dynamic indexing techniques for multi-dimensional interval data. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <pages> pages 138-147, </pages> <address> Denver, CO, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Temporal databases fit easily in the framework, since time can be considered as one more dimension <ref> [48, 50] </ref>. Multidimensional objects appear even in traditional databases, where a record with k attributes corresponds to a point in the k-d space.
Reference: [49] <author> N. Koudas, C. Faloutsos, and I. Kamel. </author> <title> Declustering r-trees on multi-computer architectures. </title> <type> Technical Report CS-TR-3276, </type> <institution> Univ. of Maryland, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: As a corollary, queries that retrieve much data should activate as many disks as possible. The proposed hardware architecture consists of one processor with several disks attached to it. Multi-processor architectures are still under study <ref> [49] </ref> On this architecture, we will distribute the nodes of a traditional R-tree. We propose and study several heuristics in order to determine how to choose a disk on which to place a newly created R-tree node.
Reference: [50] <author> V. Kouramajian, I. Kamel, R. Elmasri, and S. Waheed. </author> <title> The Time Index+: An incremental access structure for temporal databases. </title> <booktitle> Proc. of 3rd International Conference on Information and Knowledge Management(CIKM-94), </booktitle> <month> December </month> <year> 1994. </year>
Reference-contexts: Temporal databases fit easily in the framework, since time can be considered as one more dimension <ref> [48, 50] </ref>. Multidimensional objects appear even in traditional databases, where a record with k attributes corresponds to a point in the k-d space.
Reference: [51] <author> M. Lo and C. Ravishankar. </author> <title> Spatial joins using seeded trees. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <pages> pages 209-220, </pages> <address> Minneapolis, MN, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: For the case in which we have one dataset with an R-tree index and another dataset without such an index, Lo and Ravishankar <ref> [51] </ref> suggested to build an R-tree like structure called a seeded tree for the second data set at the join time.
Reference: [52] <author> D. Lomet and B. Salzberg. </author> <title> The hB-Tree: a multiattribute indexing method with good guaranteed performance. </title> <journal> ACM TODS, </journal> <volume> 15(4) </volume> <pages> 625-658, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: The internal nodes containing only entries which direct the search. When a non-leaf node is split, the split may propagate downwards; the structure thus does not guarantee minimum space utilization. To avoid this problem several variants have been proposed, including the Buddy tree [68] and the hB-tree <ref> [52] </ref>. Seeger and Kriegel [68] proposed the Buddy tree, which is similar to the K-D-B tree [63]. They avoided some of the drawbacks of the K-D-B tree, such as the downward split, by using a partitioning schema similar to the buddy system [47]. <p> They avoided some of the drawbacks of the K-D-B tree, such as the downward split, by using a partitioning schema similar to the buddy system [47]. The buddy tree stores the MBR of the data in each node in order to better prune the search space. Lomet and Salzberg <ref> [52] </ref> suggested a variant of the K-D-B tree called the hB-tree, which exhibts the following distinctions. Index nodes are organized as a k-d tree to improve the intra-node search response.
Reference: [53] <author> B. Mandelbrot. </author> <title> Fractal Geometry of Nature. W.H. </title> <publisher> Freeman, </publisher> <address> NY, </address> <year> 1977. </year>
Reference-contexts: Figure 4.3 also shows the Hilbert curves of order two and three. When the order of the curve tends to infinity, like other space-filling curve, the resulting curve is a fractal, with a fractal dimension of two <ref> [53] </ref>. The Hilbert curve can be generalized for higher dimensionalities. Algorithms for drawing the two-dimensional curve of a given order can be found in [30], [40]. An algorithm for higher dimensionalities is given in [9].
Reference: [54] <author> A. Narasimhalu and S. Christodoulakis. </author> <title> Multimedia information systems: the unfolding of a reality. </title> <journal> IEEE Computer, </journal> <volume> 24(10) </volume> <pages> 6-8, </pages> <month> October </month> <year> 1991. </year> <month> 107 </month>
Reference-contexts: Introduction Databases of the near future will be required to support non-traditional data types, such as spatial objects [71]. Multimedia databases <ref> [54] </ref>, Geographical Information Systems (GIS) [66], and medical databases [4] are examples of databases receiving increasing attention. Handling spatial and multidimensional objects is a common requirement among these databases. For example, in multimedia databases we should be able to store images [5], voice [56], video [62] etc.
Reference: [55] <author> J. Nievergelt, H. Hinterberger, and K. Sevcik. </author> <title> The Grid File: an adaptable, symmetric multikey file structure. </title> <journal> ACM TODS, </journal> <volume> 9(1) </volume> <pages> 38-71, </pages> <month> March </month> <year> 1984. </year>
Reference-contexts: Non-point objects can be transformed to points in higher dimensional space before being stored. Several PAM have been proposed. We can divide them into hierarchical structures such as the K-D-B tree [63] and non-hierarchical structures such as Grid files <ref> [55] </ref> and their variants. 2.1.1 Hierarchical Structures The k-d tree [8] is a generalization of the binary search tree for multi-dimensional points. At each level a different attribute (or key) value is tested to determine the direction in which a branch is to be made. <p> As in the B-tree, the updates and splits propagate upwards through the tree, thus balancing the tree. 6 2.1.2 Non-hierarchical Structures Nievergelt's Grid file <ref> [55] </ref> is a non-hierarchical index structure for data characterized by several keys or attributes. The records can be represented as points in a multi-dimensional space formed by the Cartesian product of the domains of the keys.
Reference: [56] <author> E. Oomoto and K. Tanaka. OVID: </author> <title> Design and implementation of a video-object database system. </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 5(4) </volume> <pages> 629-643, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Multimedia databases [54], Geographical Information Systems (GIS) [66], and medical databases [4] are examples of databases receiving increasing attention. Handling spatial and multidimensional objects is a common requirement among these databases. For example, in multimedia databases we should be able to store images [5], voice <ref> [56] </ref>, video [62] etc. In GIS, maps contain multidimensional points, lines, and polygons all of which are new data types. Another example of such non-traditional data types can be found in medical databases which contain 3-dimensional brain scans (e.g.
Reference: [57] <author> J. Orenstein. </author> <title> Multidimensional tries used for associative searching. </title> <journal> Information Processing Letters, </journal> <volume> 14(4) </volume> <pages> 150-157, </pages> <month> June </month> <year> 1982. </year>
Reference-contexts: Quadtrees are used for points, as in the point quadtree [23], the MX quadtree, and the PR quadtree <ref> [57, 65] </ref>; for rectangles, as in the MX-CIF [45, 1]; and for lines, as in the PMR quadtree. <p> In "regular" decomposition, the space is decomposed into quadrants of the same size. Orenstein <ref> [57] </ref> proposed a k-d trie which is similar to the PR quadtree but uses binary trees instead of quadtrees. Octrees [37, 39] are the extension of quadtrees in three-dimensional space. A detailed survey of the quadtree and its variants can be found in [67].
Reference: [58] <author> J. Orenstein. </author> <title> Spatial query processing in an object-oriented database system. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <pages> pages 326-336, </pages> <address> Washington D.C., </address> <month> May </month> <year> 1986. </year>
Reference-contexts: Gargantini [28] proposed a disk-resident quadtree called the linear quadtree. Spatial objects are divided into quadtree blocks, whose z-order (Morton key) is used as the primary key for a B + -tree [1] organization. Equivalently, Oren-stein <ref> [60, 58] </ref> proposed the Z-order which divide the spatial object into rectangular blocks and store them in any PAM.
Reference: [59] <author> J. Orenstein. </author> <title> Redundancy in spatial databases. </title> <booktitle> In Proc. of ACM SIGMOD Conf., </booktitle> <pages> pages 294-304, </pages> <address> Portland, OR, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: In order to avoid an excessive number of elements, Orenstein also studied the trade-off between the number of elements that cover the spatial object (amount of redundancy introduced) and the amount of extra space they cover <ref> [59] </ref>. The Z-order is a member of a family of curves called `space-filling curves'. One of their characteristics is to pass by every point in the space exactly once.
Reference: [60] <author> J. Orenstein and T. Merrett. </author> <title> A class of data structures for associative searching. </title> <booktitle> In Proc. of ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems (PODS), </booktitle> <pages> pages 181-190, </pages> <address> Waterloo, Ontario, Canada, </address> <month> April </month> <year> 1984. </year>
Reference-contexts: in a skewed point distribution and may thus adversely affect the search performance. 2) Methods for spatial objects `Spatial Access Method' or (SAM) : Other in 4 dexes are designed to store points as well as non-point objects - e.g., Quadtree [28] [3], R-tree [32, 7, 44, 41, 16], Z-order <ref> [60] </ref>, R + -tree [70], and Cell tree [31]. In this thesis, we concentrate on R-tree like-structures. 2.1 Point Access Methods (PAMS) PAM are designed to handle multidimensional points. Non-point objects can be transformed to points in higher dimensional space before being stored. Several PAM have been proposed. <p> Gargantini [28] proposed a disk-resident quadtree called the linear quadtree. Spatial objects are divided into quadtree blocks, whose z-order (Morton key) is used as the primary key for a B + -tree [1] organization. Equivalently, Oren-stein <ref> [60, 58] </ref> proposed the Z-order which divide the spatial object into rectangular blocks and store them in any PAM.
Reference: [61] <author> S. Pramanik and M. Kim. </author> <title> Parallel processing of large node B-trees. </title> <journal> IEEE Trans on Computers, </journal> <volume> 39(9) </volume> <pages> 1208-1212, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: For the B-tree, Pramanic and Kim proposed the PNB-tree <ref> [61] </ref>, which uses a `super-node' (`super-page') scheme on synchronized disks. Seeger and Larson [69] proposed an algorithm to distribute the nodes of the B-tree on different disks. Their algorithm takes into account not only the response time of the individual query but also the throughput of the system.
Reference: [62] <author> P. Rangan and H. Vin. </author> <title> Efficient storage techniques for digital continous multimedia. </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 5(4) </volume> <pages> 565-573, </pages> <month> August </month> <year> 1993. </year> <month> 108 </month>
Reference-contexts: Multimedia databases [54], Geographical Information Systems (GIS) [66], and medical databases [4] are examples of databases receiving increasing attention. Handling spatial and multidimensional objects is a common requirement among these databases. For example, in multimedia databases we should be able to store images [5], voice [56], video <ref> [62] </ref> etc. In GIS, maps contain multidimensional points, lines, and polygons all of which are new data types. Another example of such non-traditional data types can be found in medical databases which contain 3-dimensional brain scans (e.g.
Reference: [63] <author> J. Robinson. </author> <title> The k-d-B-tree: a search structure for large multidimensional dynamic indexes. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <pages> pages 10-18, </pages> <address> Ann Arbor, MI, </address> <month> April </month> <year> 1981. </year>
Reference-contexts: Non-point objects can be transformed to points in higher dimensional space before being stored. Several PAM have been proposed. We can divide them into hierarchical structures such as the K-D-B tree <ref> [63] </ref> and non-hierarchical structures such as Grid files [55] and their variants. 2.1.1 Hierarchical Structures The k-d tree [8] is a generalization of the binary search tree for multi-dimensional points. <p> The cutting boundaries may occur at arbitrary positions. Henrich also introduced an algorithm for paging a multi-dimensional binary tree. The LSD tree can store only multi-dimensional points. K-dimensional intervals are transformed into points in a 2k-dimensional space. The K-D-B tree of Robinson <ref> [63] </ref> is one of the first multidimensional indexes 5 proposed for secondary storage. It combines the properties of the k-d tree [8] and the B + -tree. Each time an overflow occurs, the search space is partitioned into two disjoint rectangular subspaces along one axis. <p> To avoid this problem several variants have been proposed, including the Buddy tree [68] and the hB-tree [52]. Seeger and Kriegel [68] proposed the Buddy tree, which is similar to the K-D-B tree <ref> [63] </ref>. They avoided some of the drawbacks of the K-D-B tree, such as the downward split, by using a partitioning schema similar to the buddy system [47]. The buddy tree stores the MBR of the data in each node in order to better prune the search space.
Reference: [64] <author> N. Roussopoulos and D. Leifker. </author> <title> Direct spatial search on pictorial databases using packed r-trees. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <pages> pages 17-31, </pages> <address> Austin, TX, </address> <month> May </month> <year> 1985. </year>
Reference-contexts: Their names reflect their complexity; among the three, the quadratic split is the one that achieves the best trade-off between splitting time and search performance. The R-tree inspired much subsequent work, the main focus of which was to improve the search time. A packing technique proposed by Roussopoulos <ref> [64] </ref> minimizes the overlap between different nodes in the R-tree for static data. That is their R-tree does not support insertion nor deletion; once the R-tree is built, it is breezed. <p> This heuristic consistently outperforms all the known R-tree variants, namely, the quadratic-split R-tree and the R fl -tree, as well as the method proposed by Roussopoulos and Leifker <ref> [64] </ref>, which is the only method of R-tree packing known up to now. <p> low y ; high x ; high y ) 4D-cd sorts on 4-d Hilbert value of the center and diameters, i.e., (c x ; c y ; d x ; d y ) 2Dz-c sorts on the z-value of the center (c x ; c y ) lowx packed R-tree <ref> [64] </ref> sorts on the x coordinate of the lower left corner linear-split R-tree [32] Guttman's R-tree with linear split quadratic-split R-tree [32] Guttman's R-tree with quadratic split R fl -tree [7] R-tree variant, better packing, forced reinsert Table 4.1: List of methods the proposed ones are in italics. <p> Our goal is to design a simple heuristic for constructing an R-tree with 100% space utilization, which, at the same time, will have as good response time as possible. For a static environment, Roussopoulos and Leifker <ref> [64] </ref> proposed a method for building a packed R-tree that achieves (almost) 100% space utilization. The idea is to sort the data on the x or y coordinate of one of the corners 53 of the rectangles.
Reference: [65] <author> H. Samet. </author> <title> The quadtree and related hierarchical data structures. </title> <journal> ACM Computer Surveys, </journal> <volume> 16(2) </volume> <pages> 187-260, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: Quadtrees are used for points, as in the point quadtree [23], the MX quadtree, and the PR quadtree <ref> [57, 65] </ref>; for rectangles, as in the MX-CIF [45, 1]; and for lines, as in the PMR quadtree.
Reference: [66] <author> H. Samet. </author> <title> Applications of Spatial Data Structures Computer Graphics, Image Processing and GIS. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: Introduction Databases of the near future will be required to support non-traditional data types, such as spatial objects [71]. Multimedia databases [54], Geographical Information Systems (GIS) <ref> [66] </ref>, and medical databases [4] are examples of databases receiving increasing attention. Handling spatial and multidimensional objects is a common requirement among these databases. For example, in multimedia databases we should be able to store images [5], voice [56], video [62] etc.
Reference: [67] <author> H. Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: Chapter 5 gives some concluding remarks and directions for future research. 3 Chapter 2 Survey In this chapter we present a classification of older spatial access methods, a survey of declustering methods, and a survey of analysis of R-trees. A recent survey can be found in <ref> [67] </ref>. Several spatial access methods have been proposed. For the purpose of this dissertation, we provide the following mean of classifying the structures. 1) Methods that are designed for storing multidimensional points only. <p> Orenstein [57] proposed a k-d trie which is similar to the PR quadtree but uses binary trees instead of quadtrees. Octrees [37, 39] are the extension of quadtrees in three-dimensional space. A detailed survey of the quadtree and its variants can be found in <ref> [67] </ref>. Gargantini [28] proposed a disk-resident quadtree called the linear quadtree. Spatial objects are divided into quadtree blocks, whose z-order (Morton key) is used as the primary key for a B + -tree [1] organization.
Reference: [68] <author> B. Seeger and H. Kriegel. </author> <title> The Buddy-Tree: an efficient and robust access method for spatial data base systems. </title> <booktitle> In Proc. of VLDB Conf., </booktitle> <pages> pages 590-601, </pages> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: For the purpose of this dissertation, we provide the following mean of classifying the structures. 1) Methods that are designed for storing multidimensional points only. These methods are called Point Access Methods (PAM) - e.g., Grid files [35], LSD tree [34], buddy tree <ref> [68] </ref>, and DOT [20]. One way to use PAM for storing non-point objects is to transform the objects to points in higher-dimensional space [35]. For example, rectangles in two-dimensional space can be transformed to points in four-dimensional space by using the x,y coordinates of two opposite corners. <p> The internal nodes containing only entries which direct the search. When a non-leaf node is split, the split may propagate downwards; the structure thus does not guarantee minimum space utilization. To avoid this problem several variants have been proposed, including the Buddy tree <ref> [68] </ref> and the hB-tree [52]. Seeger and Kriegel [68] proposed the Buddy tree, which is similar to the K-D-B tree [63]. They avoided some of the drawbacks of the K-D-B tree, such as the downward split, by using a partitioning schema similar to the buddy system [47]. <p> When a non-leaf node is split, the split may propagate downwards; the structure thus does not guarantee minimum space utilization. To avoid this problem several variants have been proposed, including the Buddy tree <ref> [68] </ref> and the hB-tree [52]. Seeger and Kriegel [68] proposed the Buddy tree, which is similar to the K-D-B tree [63]. They avoided some of the drawbacks of the K-D-B tree, such as the downward split, by using a partitioning schema similar to the buddy system [47].
Reference: [69] <author> B. Seeger and P. Larson. </author> <title> Multi-disk B-trees. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <pages> pages 436-445, </pages> <address> Denver, CO, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Also, the data itself eventually will not fit on one disk. One way to relieve these problems is to distribute the data carefully on more than one unit so that the data can be retrieved and searched in parallel (e.g. <ref> [43, 69] </ref>). The remainder of the thesis is organized as follows: Chapter 2 presents some of the related work on spatial indexing. In Chapter 3, we present the Multiplexed I/O R-tree. In Chapter 4, we present two new R-tree designs based on the Hilbert 2 curve for a centralized environment. <p> For the B-tree, Pramanic and Kim proposed the PNB-tree [61], which uses a `super-node' (`super-page') scheme on synchronized disks. Seeger and Larson <ref> [69] </ref> proposed an algorithm to distribute the nodes of the B-tree on different disks. Their algorithm takes into account not only the response time of the individual query but also the throughput of the system. A large number of methods have been proposed to decluster the Cartesian product files (i.e.
Reference: [70] <author> T. Sellis, N. Roussopoulos, and C. Faloutsos. </author> <title> The R+-Tree: a dynamic index for multi-dimensional objects. </title> <booktitle> In Proc. 13th International Conference on VLDB, </booktitle> <pages> pages 507-518, </pages> <address> England, </address> <month> September </month> <year> 1987. </year> <note> also available as SRC-TR-87-32, UMIACS-TR-87-3, CS-TR-1795. 109 </note>
Reference-contexts: distribution and may thus adversely affect the search performance. 2) Methods for spatial objects `Spatial Access Method' or (SAM) : Other in 4 dexes are designed to store points as well as non-point objects - e.g., Quadtree [28] [3], R-tree [32, 7, 44, 41, 16], Z-order [60], R + -tree <ref> [70] </ref>, and Cell tree [31]. In this thesis, we concentrate on R-tree like-structures. 2.1 Point Access Methods (PAMS) PAM are designed to handle multidimensional points. Non-point objects can be transformed to points in higher dimensional space before being stored. Several PAM have been proposed. <p> The utilization is thus 100%. Their experimental results on point data showed that their packed R-tree performs much better than does the linear split R-tree for point queries. Sellis et al: <ref> [70] </ref> proposed the R + - tree that avoids the overlap between non-leaf nodes of the tree by clipping data rectangles that cross node boundaries. In this model there is therefore only one path to the data in a given region as opposed to the multiple paths of Guttman's R-tree.
Reference: [71] <author> A. Silberschatz, M. Stonebraker, and J. Ullman. </author> <title> Database systems: Achievements and opportunities. </title> <journal> Comm. of ACM (CACM), </journal> <volume> 34(10) </volume> <pages> 110-120, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Introduction Databases of the near future will be required to support non-traditional data types, such as spatial objects <ref> [71] </ref>. Multimedia databases [54], Geographical Information Systems (GIS) [66], and medical databases [4] are examples of databases receiving increasing attention. Handling spatial and multidimensional objects is a common requirement among these databases. For example, in multimedia databases we should be able to store images [5], voice [56], video [62] etc.
Reference: [72] <author> M. Tamminen. </author> <title> The EXCELL method for efficient geometric access to data. </title> <booktitle> In Proc. of Design Automation Conference, </booktitle> <pages> pages 345-351, </pages> <address> Las Vegas, NV, </address> <month> June </month> <year> 1982. </year> <month> 110 </month>
Reference-contexts: Similarly, when deletions occur, grid cells can be merged. The grid file guarantees that any record can be retrieved (exact match query) with two disk accesses, one for the directory and one for the data. Tamminen's EXCELL <ref> [72] </ref> is similar to the grid file. It is based on a regular decomposition of the space, and it requires a grid directory; however, all grid cells are of the same size.
References-found: 72

