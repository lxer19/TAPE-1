URL: http://www.cs.colostate.edu/~ftppub/TechReports/1998/tr98-104.ps.Z
Refering-URL: http://www.cs.colostate.edu/~ftppub/
Root-URL: 
Email: malaiya|denton@cs.colostate.edu  
Phone: Phone: (970) 491-5792 Fax: (970) 491-2466  
Title: Estimating Defect Density Using Test Coverage  
Author: Yashwant K. Malaiya Jason Denton 
Web: WWW: http://www.cs.colostate.edu  
Address: Fort Collins, CO 80523  Fort Collins, CO 80523-1873  
Affiliation: Computer Science  Computer Science Dept. Colorado State University  Computer Science Department Colorado State University  
Pubnum: Technical Report  Technical Report CS-98-104  
Abstract-found: 0
Intro-found: 1
Reference: [bin97] <author> Robert V. Binder, </author> <title> Six Sigma: Hardware Si, </title> <note> Software No!, http://www.rbsc.com/pages/sixsig.html, 1997. </note>
Reference-contexts: This suggests that the number of defects is often used as a major acceptance criterion. Leading edge software development organizations typically achieve a defect density of about 2.0 defects/KLOC <ref> [bin97] </ref>. The NASA Space Shuttle Avionics software with an estimated defect density of 0.1 defects /KLOC is regarded to be an example of what can be currently achieved by the best methods [hat97].
Reference: [but93] <author> R.W. Butler, and G.B. Finelli, </author> <title> The Infeasibility of Quantifying the Reliability of Life-Critical Real-Time Software. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 19, no. 1, Jan.1993, </volume> <pages> pp. 3-12. </pages>
Reference-contexts: One conceivable way of knowing the exact defect density of a program is to actually find all remaining defects. This is obviously infeasible for any commercial product. Even if there are resources available, it will take a prohibitive amount of time to find all bugs in a large program <ref> [but93] </ref>. Sampling based methods have been suggested for estimating the number of remaining defects. McConnell [mcc97] has given a method that involves using two independent testing activities, perhaps by two different teams of testers.
Reference: [che97] <author> Mei-Hwa Chen, Michael R. Lyu and W. Eric Wong, </author> <title> An Empirical Study of the Correlation between Coverage and Reliability Estimation IEEE Third Int. </title> <booktitle> Symposium on Software Metrics, </booktitle> <month> Mar. </month> <pages> 25-26, </pages> <address> Berlin, Germany, </address> <year> 1996. </year>
Reference-contexts: The relationship between test coverage and the number of defects found has been investigated by Piwowarski, Ohba and Caruso [poc93], Hutchins, Goradia and Ostrand [hfgo94], Malaiya et al [mali94], Lyu, Horgan and London [lyu93] and Chen, Lyu and Wong <ref> [che97] </ref>. 2 In the next section, a model for defect density in terms of test coverage is introduced and its applicability is demonstrated using test data. Section 3 presents an interpretation of the model parameters and a two-parameter approximation of the model.
Reference: [ebr97] <author> Nader B. Ebrahimi, </author> <title> On the Statistical Analysis of the Number of Errors Remaining in a Software Design Document after Inspection IEEE Trans. </title> <journal> on Software Engineering, </journal> <volume> Vol. 23, No. 8, </volume> <month> August </month> <year> 1997, </year> <pages> pp. 529-532. </pages>
Reference-contexts: However, in actual practice, the faults not found represent faults that are harder to find [mal84]. Thus equation 2 is likely to yield an estimate of faults that are relatively easier to find, which will be less than the true number. Ebrahimi <ref> [ebr97] </ref> has suggested a sampling based method to estimate the number of defects during the inspection phase. Fault seeding is another sampling method that estimates the total number of faults based on the number of seeeded faults [mcc97].
Reference: [hat97] <author> L. Hatton, </author> <title> N-version Design Versus One Good Design IEEE Software, </title> <address> Nov./Dec. </address> <year> 1997. </year> <pages> pp. 71-76. </pages>
Reference-contexts: Leading edge software development organizations typically achieve a defect density of about 2.0 defects/KLOC [bin97]. The NASA Space Shuttle Avionics software with an estimated defect density of 0.1 defects /KLOC is regarded to be an example of what can be currently achieved by the best methods <ref> [hat97] </ref>. A low defect density can be quite expensive to achieve, the Space Shuttle code has been reported to have cost about $1,000 per line of code.
Reference: [hfgo94] <author> M. Hutchings, T. Goradia and T. </author> <title> Ostrand, Experiments on the effectiveness of data-flow and control-flow based test data adequacy criteria International Conf. </title> <journal> Software Engineering, </journal> <year> 1994, </year> <pages> pp. 191-200. </pages>
Reference-contexts: Thus we can expect that a suitably chosen test coverage measure can correlate better with the number of defects encountered. The relationship between test coverage and the number of defects found has been investigated by Piwowarski, Ohba and Caruso [poc93], Hutchins, Goradia and Ostrand <ref> [hfgo94] </ref>, Malaiya et al [mali94], Lyu, Horgan and London [lyu93] and Chen, Lyu and Wong [che97]. 2 In the next section, a model for defect density in terms of test coverage is introduced and its applicability is demonstrated using test data.
Reference: [lak97] <author> P. Lakey, A. Neufelder, </author> <title> System and Software Reliability Assurance Notebook, </title> <institution> Rome Laboratory, </institution> <year> 1997. </year>
Reference-contexts: Again seeded faults are likely to be defects with higher testability resulting in underestimation of the number of faults. It is possible to estimate the defect density based on past experience using empirical models like the Rome Lab model <ref> [lak97] </ref> or the model proposed by Malaiya and Denton [mal97]. The estimates obtained by such models can be very useful for initial planning, however these models are not expected to be accurate enough to compare with methods involving actual test data.
Reference: [li96] <author> N. Li and Y.K. Malaiya, </author> <title> Fault Exposure Ratio: </title> <booktitle> Estimation and Applications Proc. IEEE Int. Symp. Software Reliability Engineering 1996 pp. </booktitle> <month> 372-381. </month> <title> 13 4 6 8 10 0 100 200 300 400 500 600 700 800 e e t Test Cases Data Set: Vouk 3 b 0 b b b b Defects Found s s s s s </title>
Reference: [lyu93] <author> M.R. Lyu, J.R. Horgan and S. </author> <title> London, A Coverage Analysis Tool for the Effectiveness of Software Testing IEEE Int. </title> <booktitle> Symp. on Software Reliability Engineering, </booktitle> <year> 1993, </year> <pages> pp. 25-34. </pages>
Reference-contexts: The relationship between test coverage and the number of defects found has been investigated by Piwowarski, Ohba and Caruso [poc93], Hutchins, Goradia and Ostrand [hfgo94], Malaiya et al [mali94], Lyu, Horgan and London <ref> [lyu93] </ref> and Chen, Lyu and Wong [che97]. 2 In the next section, a model for defect density in terms of test coverage is introduced and its applicability is demonstrated using test data. Section 3 presents an interpretation of the model parameters and a two-parameter approximation of the model.
Reference: [mal84] <author> Y.K. Malaiya and S. Yang, </author> <title> The Coverage Problem for Random Testing, </title> <booktitle> Proc. International Test Conference, </booktitle> <month> October </month> <year> 1984, </year> <pages> pp. 237-245. </pages>
Reference-contexts: In other words it assumes that the faults found have the same testability as the faults not found. However, in actual practice, the faults not found represent faults that are harder to find <ref> [mal84] </ref>. Thus equation 2 is likely to yield an estimate of faults that are relatively easier to find, which will be less than the true number. Ebrahimi [ebr97] has suggested a sampling based method to estimate the number of defects during the inspection phase.
Reference: [mvs93] <author> Y. K. Malaiya, A. von Mayrhauser and P. Srimani, </author> <title> An examination of Fault Exposure Ratio, </title> <journal> IEEE Trans. Software Engineering, </journal> <month> Nov. </month> <year> 1993, </year> <pages> pp. 1087-1094. </pages>
Reference-contexts: 1 is harder to estimate, however we can see that it can be estimated using the estimates of the other two parameters. 7 3.2 Direct Interpretation through the Logarithmic SRGM An interpretation of the logarithmic model parameters can be obtained by considering the vari ation in the fault exposure ratio <ref> [mvs93, mal97] </ref>, b 0 = I s D min (23) K min r e D min (24) where D O is the initial defect density, K min is the minimum value of K and Dmin is the defect density at which K = K min .
Reference: [mali94] <author> Y.K. Malaiya, N. Li, J. Bieman, R. Karcich and B. Skibbe, </author> <title> The Relationship between Test Coverage and Reliability Proc. </title> <booktitle> Int. Symp. Software Reliability Engineering, </booktitle> <month> Nov. </month> <year> 1994, </year> <month> pp.186-195. </month>
Reference-contexts: Thus we can expect that a suitably chosen test coverage measure can correlate better with the number of defects encountered. The relationship between test coverage and the number of defects found has been investigated by Piwowarski, Ohba and Caruso [poc93], Hutchins, Goradia and Ostrand [hfgo94], Malaiya et al <ref> [mali94] </ref>, Lyu, Horgan and London [lyu93] and Chen, Lyu and Wong [che97]. 2 In the next section, a model for defect density in terms of test coverage is introduced and its applicability is demonstrated using test data. <p> Finally we present some observations on this new approach. 2 Coverage model for Defect Density Recently a model was presented by Malaiya et al that relates the density of residual defects with test coverage measures <ref> [mali94] </ref>. This model assumes that the logarithmic SRGM is applicable to the total number of defects found, as well as the number of test enumerables (e.g. branches or p-uses). Here we use the superscript 0 for defects and i = 1,2,.. for various test enumerables.
Reference: [mal97] <author> Y. K. Malaiya and J. </author> <title> Denton, What Do the Software Reliability Growth Model Parameters Represent? Int. </title> <booktitle> Symp. on Software Reliability Engineering, </booktitle> <year> 1997. </year> <pages> pp. 124-135. </pages>
Reference-contexts: Again seeded faults are likely to be defects with higher testability resulting in underestimation of the number of faults. It is possible to estimate the defect density based on past experience using empirical models like the Rome Lab model [lak97] or the model proposed by Malaiya and Denton <ref> [mal97] </ref>. The estimates obtained by such models can be very useful for initial planning, however these models are not expected to be accurate enough to compare with methods involving actual test data. Another possible way to estimate the number of faults is by using the exponential SRGM. <p> Equations 7,8, and 9 relate the parameters of the coverage model to the logarithmic SRGM parameters. The parameters of the logarithmic model can be interpreted in two different ways, as shown by Malaiya and Denton <ref> [mal97] </ref>. Let us consider both approaches here. 3.1 Indirect Interpretation through the Exponential SRGM This approach views the exponential model to be an approximation of the logarithmic model. Let us assume that at the end of test both models project the same total number of faults. <p> 1 is harder to estimate, however we can see that it can be estimated using the estimates of the other two parameters. 7 3.2 Direct Interpretation through the Logarithmic SRGM An interpretation of the logarithmic model parameters can be obtained by considering the vari ation in the fault exposure ratio <ref> [mvs93, mal97] </ref>, b 0 = I s D min (23) K min r e D min (24) where D O is the initial defect density, K min is the minimum value of K and Dmin is the defect density at which K = K min . <p> Thus the dependence of D 0 0 variation on a 0 0 may be small. Example 2: Here we will obtain preliminary estimates of the parameters using the direct interpretation. In <ref> [mal97] </ref> it has been observed that D 0 min can often be estimated as D 0 =3.
Reference: [mcc97] <author> Steve McConnell, </author> <title> Gauging Software Readiness with Defect Tracking IEEE Software, </title> <journal> Vol. </journal> <volume> 14, No. 3, </volume> <month> May / June </month> <year> 1997. </year> <pages> pp. </pages>
Reference-contexts: This is obviously infeasible for any commercial product. Even if there are resources available, it will take a prohibitive amount of time to find all bugs in a large program [but93]. Sampling based methods have been suggested for estimating the number of remaining defects. McConnell <ref> [mcc97] </ref> has given a method that involves using two independent testing activities, perhaps by two different teams of testers. <p> Ebrahimi [ebr97] has suggested a sampling based method to estimate the number of defects during the inspection phase. Fault seeding is another sampling method that estimates the total number of faults based on the number of seeeded faults <ref> [mcc97] </ref>. Again seeded faults are likely to be defects with higher testability resulting in underestimation of the number of faults. It is possible to estimate the defect density based on past experience using empirical models like the Rome Lab model [lak97] or the model proposed by Malaiya and Denton [mal97].
Reference: [mus87] <author> J.D. Musa, A Iannino, K. Okumoto, </author> <title> Software Reliability, Measurement, Prediction, Application, </title> <publisher> McGraw-Hill, </publisher> <year> 1987. </year>
Reference-contexts: We can then show that b 0 a 0 1 b E 1 = ln (a 0 ) 1 (11) where b E 0 and b E 1 are the parameters of the exponential models. Using the interpretation of the exponential model from <ref> [mus87] </ref>, we have b 0 a 0 1 N 0 and 0 10 20 30 40 50 D f c s Branch Coverage Data Set: Pasquini Coverage Data Model b 0 a 0 1 K 0 r (13) where K 0 is the fault exposure ratio, I s is the software
Reference: [pas97] <author> A. Pasquini,A.N. Crespo and P. Matrella, </author> <title> Sensitivity of Reliability Growth Models to Operational Profile Errors IEEE Trans. Reliability, </title> <month> Dec. </month> <year> 1996, </year> <pages> pp. 531-540. </pages>
Reference-contexts: The value around which the curve exhibits a knee has a significance as we will see below. Applicability of this model is illustrated by the plots in figures 2, 3, and 4. This data was collected experimentally by Pasquini et al <ref> [pas97] </ref>. They tested a 6100 line C program by applying 20,000 test cases. The test coverage data was collected using the ATAC tool. Figure 2 shows a screen in ROBUST, an integrated software reliability evaluation tool [rob97] that has been developed at CSU.
Reference: [poc93] <author> P. Piwowarski, M. Ohba and J. Caruso, </author> <title> Coverage measurement experience during function test, </title> <booktitle> Proc. 15th Int. Conf. Software Engineering, </booktitle> <month> May </month> <year> 1993, </year> <pages> pp. 287-300 </pages>
Reference-contexts: Thus we can expect that a suitably chosen test coverage measure can correlate better with the number of defects encountered. The relationship between test coverage and the number of defects found has been investigated by Piwowarski, Ohba and Caruso <ref> [poc93] </ref>, Hutchins, Goradia and Ostrand [hfgo94], Malaiya et al [mali94], Lyu, Horgan and London [lyu93] and Chen, Lyu and Wong [che97]. 2 In the next section, a model for defect density in terms of test coverage is introduced and its applicability is demonstrated using test data.
Reference: [rob97] <author> ROBUST, </author> <title> An integrated Software Reliability tool. </title> <note> Manual available at http://www.cs.colostate.edu/testing/robust/manual.pdf. </note>
Reference-contexts: This data was collected experimentally by Pasquini et al [pas97]. They tested a 6100 line C program by applying 20,000 test cases. The test coverage data was collected using the ATAC tool. Figure 2 shows a screen in ROBUST, an integrated software reliability evaluation tool <ref> [rob97] </ref> that has been developed at CSU. Further development of this tool is underway to include additional capabilities. For the 20,000 tests, these were the coverage values obtained: block coverage : 82.31% of 2970 blocks, decision cover : 70.71% of 1171 decisions, and p-use coverage 61.51% of 2546 p-uses.
Reference: [rev97] <institution> Revision Labs' Survey (April 1 to August 2, </institution> <year> 1997), </year> <journal> http://www.revlabs.com/surresult.html Rev. </journal> <volume> 8/9/97. 14 12 14 16 18 0 100 200 300 400 500 600 700 800 e e t Test Cases Estimated Defects b b b b </volume>
Reference-contexts: Fifty-four percent of the participants mentioned a defect count based measure, total defects classified by severity, defects per KLOC (1000 lines of code) or defects per function point <ref> [rev97] </ref>. This suggests that the number of defects is often used as a major acceptance criterion. Leading edge software development organizations typically achieve a defect density of about 2.0 defects/KLOC [bin97].
Reference: [vou92] <author> M.A. </author> <title> Vouk Using Reliability Models During Testing With Non-operational Profiles, </title> <booktitle> Proc. 2nd Bellcore/Purdue workshop on issues in Software Reliability Estimation, </booktitle> <month> Oct. </month> <year> 1992, </year> <pages> pp. 103-111 15 </pages>
Reference-contexts: It should be noted that C-use coverage does not fit in the subsumption hierarchy and therefore it is hard to interpret the values obtained by using C-use coverage data. Further application of this new method is illustrated by examining the data provided by Vouk <ref> [vou92] </ref>. These three data sets were obtained by testing three separate implementations of a sensor management program for an inertial navigation system. Each program is about five thousand lines of code. In the first program, 1196 tests found 9 defects.
References-found: 20

