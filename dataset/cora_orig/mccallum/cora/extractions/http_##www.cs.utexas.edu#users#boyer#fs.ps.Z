URL: http://www.cs.utexas.edu/users/boyer/fs.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/moore/publications/index.html
Root-URL: 
Phone: TEL: +1 512 322 9951  
Title: Functional Instantiation in First Order Logic  
Author: R. S. Boyer, D. M. Goldschlag,M. Kaufmann, and J S. Moore 
Address: 1717 West Sixth Street, Suite 290 Austin, Texas 78703-4776  
Affiliation: Computational Logic, Inc.  
Date: 44 Revised January, 1991  
Pubnum: Technical Report  
Abstract: 1 This work was supported in part at Computational Logic, Inc., by the Defense Advanced Research Projects Agency, ARPA Orders 6082, 9151 and 7406. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of Computational Logic, Inc., the Defense Advanced Research Projects Agency or the U.S. Government. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Robert S. Boyer and J Strother Moore (1988): </author> <title> A Computational Logic Handbook. </title> <publisher> Academic Press. </publisher>
Reference: [2] <author> R. M. Burstall and J. A. </author> <title> Goguen (1981): An Informal Introduction to Specification using Clear. </title> <editor> In: Robert S. Boyer and J Strother Moore, eds.: </editor> <booktitle> The Correctness Problem in Computer Science. </booktitle> <publisher> Academic Press. </publisher>
Reference-contexts: Joe Goguen (private communication) has observed that the legitimacy of functional instantiation is a consequence of the "theorem on constants." In fact, the idea of functional instantiation is related to ideas in Clear <ref> [2] </ref>. We thank Dianne King for editorial assistance. And we thank the Defense Advanced Research Projects Agency, which has supported in part the Functional Instantiation in First Order Logic Technical Report #44 35 research reported here.
Reference: [3] <author> D. </author> <month> Goldschlag </month> <year> (1990): </year> <title> Mechanizing Unity. </title> <editor> In: M. Broy and C. B. Jones, eds.: </editor> <booktitle> Programming Concepts and Methods. </booktitle> <publisher> North-Holland Publishing Co. </publisher>
Reference-contexts: This sort of constraint is used in Goldschlag's NQTHM formalization of Unity <ref> [3] </ref>. (DEFN EVEN (X) Functional Instantiation in First Order Logic Technical Report #44 32 (IF (ZEROP X) T (IF (EQUAL X 1) F (NOT (EVEN (SUB1 X)))))) (CONSTRAIN FAIR-INTRO (REWRITE) (AND (FAIR (FAIR-TRUE-WITNESS N)) (NOT (FAIR (FAIR-FALSE-WITNESS N))) (NOT (LESSP (FAIR-TRUE-WITNESS N) N)) (NOT (LESSP (FAIR-FALSE-WITNESS N) N))) ((FAIR EVEN) (FAIR-TRUE-WITNESS
Reference: [4] <author> R. L. </author> <month> Goodstein </month> <year> (1964): </year> <title> Recursive Number Theory. </title> <publisher> North-Holland Publishing Company. </publisher>
Reference-contexts: realistic interpreter, they can be inferred by functional instantiation at the cost only of proving that the constraint on STATEP and STEP is satisfied, i.e., proving that the realistic step function preserves realistic good states. 0.6.4 The Associativity of APPEND without Induction Here we follow the lead of Goodstein in <ref> [4] </ref> and of McCarthy with his recursion induction [5]. We show, using FUNCTIONALLY-INSTANTIATE, that the associativity of APPEND can be proved without explicit appeal to induction.
Reference: [5] <author> John McCarthy (1963): </author> <title> A Basis for a Mathematical Theory of Computation. </title> <editor> In: P. Braffort and D. Hershberg, eds.: </editor> <booktitle> Computer Programming and Formal Systems. </booktitle> <publisher> North-Holland Publishing Company. </publisher>
Reference-contexts: instantiation at the cost only of proving that the constraint on STATEP and STEP is satisfied, i.e., proving that the realistic step function preserves realistic good states. 0.6.4 The Associativity of APPEND without Induction Here we follow the lead of Goodstein in [4] and of McCarthy with his recursion induction <ref> [5] </ref>. We show, using FUNCTIONALLY-INSTANTIATE, that the associativity of APPEND can be proved without explicit appeal to induction. Of course there are inductions hidden all over the place, e.g., in the typeset analysis for TRUE-REC and in the proof of the metatheorem that justifies FUNCTIONALLY-INSTANTIATE.
Reference: [6] <author> J S. Moore (1988): Piton: </author> <title> A Verified Assembly Level Language. </title> <type> Technical Report 22, </type> <institution> Computational Logic, Inc., </institution> <address> 1717 West Sixth Street, Suite 290, Austin, TX 78703. </address>
Reference: [7] <author> J S. </author> <title> Moore (1989): A Mechanically Verified Language Implementation. </title> <journal> Journal of Automated Reasoning 5(4), </journal> <pages> 461-492. </pages>
Reference: [8] <author> J. R. </author> <title> Shoenfield (1967): Mathematical Logic. </title> <publisher> Addison-Wesley. </publisher>
Reference: [9] <author> Richard M. </author> <title> Stallman (1987): GNU Emacs Manual, Sixth Edition, Version 18. Free Software Foundation, </title> <address> 1000 Massachusetts Avenue, Cambridge, MA 02138. </address>
Reference: [10] <author> N. </author> <title> Shankar (1986): Proof Checking Metamathematics. </title> <type> Ph. D. Thesis. </type> <institution> University of Texas at Austin. </institution>
Reference: [11] <author> D. A. </author> <title> Turner (1979): A New Implementation Technique for Applicative Languages. </title> <journal> Software Practice and Experience 9, </journal> <pages> 31-49. 36 </pages>
References-found: 11

