URL: http://www.cs.ucl.ac.uk/staff/jon/hipparch/gevros.ps.gz
Refering-URL: http://www.cs.ucl.ac.uk/staff/jon/hipparch/program.html
Root-URL: http://www.cs.ucl.ac.uk
Email: P.Gevros@cs.ucl.ac.uk  
Title: TCP Throughput Differentiation  
Author: Panos Gevros 
Date: June 8, 1998  
Abstract: Experimental Results on Weighted Proportional Abstract Recently there has been increasing interest in providing differentiated services on the Internet. Differentiation can be achieved by scheduling and queue management mechanisms within the network, there are also attempts to provide end to end mechanisms for differentiated services. MulTCP is one of these mechanisms, attempting to provide differntial end to end service by modifying TCP's start up behavior. MulTCP has been simulated and proved to be able to provided weighted proportional service differentiation to TCP connections which have the same RTTs and share the same bottleneck link. However in the Internet the widely variable traffic and congestion conditions make it worthwhile and interesting to support theoretical analysis and simulation based results by experiments in the field. We have implemented the MulTCP algorithm on FreeBSD, a 4.4 BSD derivative, and here we present the outcome of these experiments. We used both Reno TCP and Reno TCP with SACK. We investigate whether MulTCP actually provides, to what extent and under which circumstances weighted proportional fair sharing and what is the impact of MulTCP behavior to other TCP connections sharing the same path. Our findings confirm the fact that SACK TCP makes MulTCP differentiation possible. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Borman, B. Braden, and V. Jacobson. </author> <title> TCP extensions for high performance. Request for Comments (Proposed Standard) 1323, </title> <year> 1992. </year>
Reference-contexts: It has long been realised that the performance of large window TCPs will remain handicapped until the SACK option is added to TCP <ref> [1] </ref> and the simulations using ns in [2] were promising about using SACK with MulTCP, the experiments indeed proved it. <p> For efficiency reasons it is pre-calculated as N0:5 N (following the analysis in Section 2) and the values are used to initialise the multcp cwdecr [] lookup table indexed by N -value which means that a conformant TCP with multcp cwdecr <ref> [1] </ref> equal to 0:5 halves the congestion window. The above parameters control MulTCP operation and the values they take for various N s are shown in Figure 11.
Reference: [2] <author> Jon Crowcroft and Philippe Oechslin. </author> <title> Differentiated End to End Internet Services using a Weighted Proportional Fair Sharing TCP, </title> <year> 1997. </year>
Reference-contexts: Solutions for differentiated services in the Internet have been proposed and they aim at providing a small number of service classes implemented by multiple queues in the routers (one per service class). MulTCP <ref> [2] </ref> is an alternative approach which aims in behaving as if it were an aggregation of multiple virtual TCPs. <p> It has long been realised that the performance of large window TCPs will remain handicapped until the SACK option is added to TCP [1] and the simulations using ns in <ref> [2] </ref> were promising about using SACK with MulTCP, the experiments indeed proved it. <p> The simulation results in <ref> [2] </ref> showed that SACK MulTCP can increase its rate proportionally to N up to a factor of 10, from our experiments the maximum factor appeared to be smaller although we believe that this value is affected by the bandwidth delay product of the Internet path.
Reference: [3] <author> Van Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> Proceedings of the Sigcomm '88 Symposium in Stanford, </booktitle> <address> CA, </address> <month> August, </month> <year> 1988. </year>
Reference-contexts: The goal is to provide controlled weighted-proportional differentiation in terms of average throughput between TCP connections which share the same bottleneck link (s) and have about the same round trip times 1 . This is achieved by modififactions at the TCP congestion control algorithm <ref> [3] </ref> based on a factor N and results in a TCP connection getting theoretically the same share of the congested gateways' bandwidth as N standard TCP connections would get. 2 MulTCP Behavior A TCP connection goes through different phases when it starts up, experiences losses or gets at equilibrium (steady state).
Reference: [4] <author> Frank Kelly, Aman Maulloo, and David Tan. </author> <title> Rate control for communication networks: shadow prices, proportional fairness and stability, </title> <note> 1997. http://www.statslab.cam.ac.uk/frank/rate.html. </note>
Reference-contexts: 1 Overview According to results recently published <ref> [4] </ref> rate control based on additive increase and multiplicative decrease as in TCP achieve proportional fairness.
Reference: [5] <author> M. Mathis, J. Mahdavi, S. Floyd, and A. Romanow. </author> <title> TCP selective acknowledgment options. Request for Comments (Proposed Standard) 2018, </title> <institution> Internet Engineering Task Force, </institution> <year> 1996. </year>
Reference-contexts: There seems to be a trade off between unnecessary retransmissions of segments that have already being received and unnecessary delays in useful retransmissions of actually lost segments. With Selective Acknowledgements (SACK) <ref> [5] </ref> we can overcome these problems.
Reference: [6] <author> Luigi Rizzo. </author> <title> Issues in the implementation of selective acknowledgements for TCP, </title> <booktitle> 1996. </booktitle> <pages> 12 </pages>
Reference-contexts: The SACK messages arrive in the sender and are inserted in the SACKed queue sorted by sequence number and when retransmissions are performed the sender skips blocks of data that have already been SACKed (placed in the SACKed queue) more details on the retransmission strategy in <ref> [6] </ref>. 6 SACK information is carried in OPTIONS field of the TCP header and the 40 bytes available there allow a 7 maximum of 4 SACK blocks, each block being two 32-bit sequence numbers denoting the Left and Right Edge of Block respectively. 8 active, 2-TCP gets approximatelly double the bandwidth <p> Also from Figure 6, 2-TCP manages to increase it's congestion window without experiencing timeouts and recovering from losses using the selective retransmission strategy described in <ref> [6] </ref> and better shown in 6.
References-found: 6

