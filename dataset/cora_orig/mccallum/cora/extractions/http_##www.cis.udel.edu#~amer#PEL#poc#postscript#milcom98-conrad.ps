URL: http://www.cis.udel.edu/~amer/PEL/poc/postscript/milcom98-conrad.ps
Refering-URL: http://www.cis.udel.edu/~amer/PEL/poc/
Root-URL: http://www.cis.udel.edu
Email: Email: conrad@acm.org  Email: famer,taube,sezen,iren,acarog@cis.udel.edu  
Title: TESTING ENVIRONMENT FOR INNOVATIVE TRANSPORT PROTOCOLS  
Author: Phillip T. Conrad Paul D. Amer Mason Taube Gul Sezen Sami Iren Armando Caro 
Address: Philadelphia, PA 19122 USA  19716 USA  
Affiliation: Computer and Information Science Department Temple University,  Computer and Information Science Department University of Delaware, Newark, DE  
Abstract: This paper describes the development of a test environment for innovative transport protocols. Central to this work is the development of a Universal Transport Library (UTL). UTL is a library of transport protocols that provides application programmers the ability to write to a single Application Programming Interface (API), then test their application with many different transport protocols. UTL also allows for rapid prototyping of transport protocols at user level. UTL has been incoporated into two multimedia communication systems designed to provide better performance over lossy networks by using innovative transport protocol features: NETCICATS (a Network-Conscious Image Compression and Transmission System) and ReMDoR (a Remote Multimedia Document Retrieval system). These three tools facilitate the evaluation of flexible transport protocols and compression techniques for multimedia communications over lossy battlefield networks. 1 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Amer, C. Chassot, T. Connolly, M. Diaz, and P. Con-rad. </author> <title> Partial order transport service for multimedia and other applications. </title> <journal> IEEE/ACM Trans on Networking, </journal> <volume> 2(5) </volume> <pages> 440-456, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: A PO/PR service allows the application to make tradeoffs between order/reliability and delay/throughput on a message-by-message basis (see for example, RFC1693) <ref> [1, 4, 6] </ref>.
Reference: [2] <author> P. Amer, S. Iren, G. Sezen, P. Conrad, M. Taube, and A. Caro. </author> <title> Network-conscious GIF image transmission over the Internet. </title> <booktitle> In 4th International Workshop on High Performance Protocol Architectures (HIP-PARCH'98), </booktitle> <month> June </month> <year> 1998. </year>
Reference-contexts: to rapidly prototype new transport services. 2 OVERVIEW OF NETCICATS AND ReMDoR GOALS 2.1 NETCICATS NETCICATS is an approach to image compression that seeks not solely to maximize compression, but rather to optimize overall performance when compressed images are transmitted over a lossy packet-switched network such as a battlefield network <ref> [2, 9, 10, 11] </ref>. Using an Application Level Framing philosophy, an image is compressed into path MTU-size Application Data Units (ADUs) at the application layer.
Reference: [3] <author> A. Caro. Remdor 2.0: </author> <title> Remote multimedia document retrieval over partially-ordered, partially-reliable transport protocols, </title> <month> May </month> <year> 1998. </year> <type> BS Thesis, </type> <institution> CIS Dept., University of Delaware. </institution>
Reference-contexts: It has capabilities that support experimentation with innovative protocols and data compression techniques, such as (1) the ability to easily incorporate new image formats, and (2) the ability to record the "response-time" of the application on an object-by-object basis <ref> [3] </ref>. 2.3 Shared Requirements The underlying hypothesis of both NETCICATS and ReMDoR is that PO/PR transport protocols allow the application to deliver more information to the user sooner than would be the case with traditional protocols. As such, the experiments planned for both systems involve some common elements.
Reference: [4] <author> T. Connolly, P. Amer, and P. Conrad. </author> <title> An extension to TCP: Partial order service. </title> <type> RFC 1693, </type> <month> November </month> <year> 1994. </year>
Reference-contexts: A PO/PR service allows the application to make tradeoffs between order/reliability and delay/throughput on a message-by-message basis (see for example, RFC1693) <ref> [1, 4, 6] </ref>.
Reference: [5] <author> P. Conrad. </author> <title> Order, reliability, and synchronization in transport layer protocols for multimedia document retrieval. </title> <type> PhD Dissertation, </type> <institution> CIS Dept. University of Delaware, </institution> <note> (in progress). </note>
Reference-contexts: This could be accomplished using UTL by running a test application over POCv2 with "total order, everything reliable" or "no order, everything unreliable" as the service profile, and then comparing the performance to that of the same application running over UC (no ordering layer), and SP (total ordering layer) <ref> [5] </ref>. * comparing PO/PR service (POCv2) to ordered/reliable service (TX, SP) in terms of de lay, reliability trade-offs. It is easy to see that PO/PR service provides no benefit if the network has no loss or reordering.
Reference: [6] <author> P. Conrad, P. Amer, E. Golden, S. Iren, R. Marasli, and A. Caro. </author> <title> Transport qos over unreliable networks: No guarantees, </title> <booktitle> no free lunch! In IFIP Fifth International Workshop on Quality of Service (IWQOS '97), </booktitle> <address> New York, NY, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: A PO/PR service allows the application to make tradeoffs between order/reliability and delay/throughput on a message-by-message basis (see for example, RFC1693) <ref> [1, 4, 6] </ref>.
Reference: [7] <author> P. Conrad, E. Golden, P. Amer, and R. Marasli. </author> <title> A multimedia document retrieval system using partially-ordered/partially-reliable transport service. </title> <booktitle> In Multimedia Computing and Networking 1996, </booktitle> <address> San Jose, CA, </address> <month> Jan-uary </month> <year> 1996. </year>
Reference-contexts: Therefore, each piece of independent information can be delivered out-of-order to the receiving application, thereby enabling faster progressive display of images. 2.2 ReMDoR ReMDoR is a multimedia document retrieval system that allows authors to specify synchronization requirements and varying degrees of reliability for multimedia elements <ref> [7] </ref>. The basic model is similar to that of the World Wide Web; documents are available on a server and are retrieved via a browser. Unlike Web documents, however, ReMDoR documents are temporal|they have a time dimension requiring synchronization of elements such as audio, video, still-images, text, pauses, and interactions. <p> As an example of a fallback, consider the notion of a "service profile." The UTL API allows an application to specify a service profile, which is a data structure defining a partial order and reliability vector <ref> [7] </ref>. The service profile is only used when the underlying protocol supports partial order and partial reliability. If the application has no need to take advantage of such features, it can ignore the parts of the API which allow the service profile to be specified. <p> This feature is used with partial-order to simulate petri-net based syn chronization of multimedia documents <ref> [7] </ref>. 4 CONCLUSIONS We have described how the Universal Transport Library and improved ReMDoR browser will provide an effective test environment for the evaluation of innovative transport protocols for multimedia applications over lossy networks, such as battlefield networks and congested networks.
Reference: [8] <author> E. Golden. TRUMP: </author> <title> Timed-reliability unordered message protocol, </title> <month> December </month> <year> 1997. </year> <type> MS Thesis, </type> <institution> CIS Dept., University of Delaware. </institution>
Reference-contexts: this problem: * short-term, we plan to develop an in-house ordered/reliable protocol without TCP flow control and compare this protocol with POCv2, thus allowing a fair "Apples and Apples" com parison, * long-term, we plan to add TCP-compatible congestion avoidance features into the protocols developed at UD (k-XP, POCv2, TRUMP <ref> [8] </ref>), and compare these protocols directly with TCP. We determined that the best way to approach both of these projects was to first develop a framework for the rapid prototyping and efficient development of usable transport protocols.
Reference: [9] <author> S. Iren, P. Amer, A. Caro, G. Sezen, M. Taube, and P. Conrad. </author> <title> Network-conscious compressed image transmission over battlefield networks. </title> <booktitle> In MILCOM '98, </booktitle> <address> Bed-ford, MA, </address> <month> October </month> <year> 1998. </year>
Reference-contexts: to rapidly prototype new transport services. 2 OVERVIEW OF NETCICATS AND ReMDoR GOALS 2.1 NETCICATS NETCICATS is an approach to image compression that seeks not solely to maximize compression, but rather to optimize overall performance when compressed images are transmitted over a lossy packet-switched network such as a battlefield network <ref> [2, 9, 10, 11] </ref>. Using an Application Level Framing philosophy, an image is compressed into path MTU-size Application Data Units (ADUs) at the application layer.
Reference: [10] <author> S. Iren, P. Amer, and P. Conrad. NETCICATS: </author> <title> network-conscious image compression and transmission system. </title> <booktitle> In Fourth International Workshop on Multimedia Information Systems (MIS'98), Istanbul, Turkey, </booktitle> <month> September </month> <year> 1998. </year>
Reference-contexts: to rapidly prototype new transport services. 2 OVERVIEW OF NETCICATS AND ReMDoR GOALS 2.1 NETCICATS NETCICATS is an approach to image compression that seeks not solely to maximize compression, but rather to optimize overall performance when compressed images are transmitted over a lossy packet-switched network such as a battlefield network <ref> [2, 9, 10, 11] </ref>. Using an Application Level Framing philosophy, an image is compressed into path MTU-size Application Data Units (ADUs) at the application layer.
Reference: [11] <author> S. Iren, P. Amer, and P. Conrad. </author> <title> Network-conscious compressed images over wireless networks. </title> <booktitle> In 5th International Workshop on Interactive Distributed Multimedia Systems and Telecommunication Services (IDMS'98), </booktitle> <address> Oslo, Norway, </address> <month> September </month> <year> 1998. </year>
Reference-contexts: to rapidly prototype new transport services. 2 OVERVIEW OF NETCICATS AND ReMDoR GOALS 2.1 NETCICATS NETCICATS is an approach to image compression that seeks not solely to maximize compression, but rather to optimize overall performance when compressed images are transmitted over a lossy packet-switched network such as a battlefield network <ref> [2, 9, 10, 11] </ref>. Using an Application Level Framing philosophy, an image is compressed into path MTU-size Application Data Units (ADUs) at the application layer.
Reference: [12] <author> W. Stevens. </author> <title> UNIX Network Programming. </title> <publisher> Prentice-Hall, </publisher> <year> 1990. </year>
Reference-contexts: Figure 1 illustrates how UTL is used by client/server applications, such as ReMDoR and NETCICATS. The various services available to applications via the UTL API are presented in Table 1. The UTL API is similar to the Berkeley Sockets described in many texts on Unix network programming <ref> [12] </ref>. What all UTL services have in common is that they are connection-oriented, message services. Where they differ is in order, reliability, and other features (see Table 1). For each feature of UTL, there is a "fall-back" position to a reasonable default. <p> Another advantage of the UTL approach is that it allows for rapid prototyping of protocols. Within 2 select () is part of most Unix implementations of the sockets API; see <ref> [12] </ref> for more details on the select () method of I/O multiplexing/demultiplexing. UTL, transport protocol development is done at the "user level", not in the kernel. New transport services are layered on top of UDP or TCP. This makes code easier to write and debug, and more portable.
References-found: 12

