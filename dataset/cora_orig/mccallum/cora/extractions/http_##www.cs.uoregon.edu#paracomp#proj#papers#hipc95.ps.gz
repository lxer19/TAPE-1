URL: http://www.cs.uoregon.edu/paracomp/proj/papers/hipc95.ps.gz
Refering-URL: http://www.cs.uoregon.edu/paracomp/proj/tau/papers.html
Root-URL: http://www.cs.uoregon.edu
Email: mohrg@cs.uoregon.edu  
Title: Language-Based Parallel Program Interaction: The Breezy Approach a language system facilitating an implementation of a
Author: Darryl I. Brown Allen D. Malony Bernd Mohr fdarrylb, malony, 
Note: There are two main conclusions from this work. First, interaction support should be integrated with  
Address: 97403  
Affiliation: Department of Computer And Information Science University of Oregon Eugene, Oregon  
Abstract: This paper presents a general architecture for run-time interaction with a data-parallel program. We have applied this architecture in the development of the Breezy tool for the pC++ language. Breezy grants application programs convenient and efficient access to higher-level external services (e.g., databases, visualization systems, and distributed resources) and allows external access to the application's state (e.g., for program state display or computational steering). Although such support can be developed on an ad-hoc basis for each application, a general approach to the problem of parallel program interaction is preferred. A general approach makes tools more portable and retargetable to different language systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Topol, J. T. Stasko, </author> <title> Integrating Visualization Support Into Distributed Computing Systems, </title> <institution> Georgia Institute of Technology, </institution> <type> Tech. Rep. </type> <institution> GIT-GVU-94-38, </institution> <month> Oct., </month> <year> 1994. </year>
Reference-contexts: However, these interface examples are rudimentary relative to the support required for application programs to access higher-level external services (e.g., databases, visualization systems <ref> [1] </ref>, and distributed resources) and to allow external access to the application's state (e.g., for program state display or computational steering [2]). Although such support can be developed on an ad-hoc basis for each application, a general approach to the problem of parallel program interaction is preferred.
Reference: [2] <author> W. Gu, G. Eisenhauer, E. Kraemer, K. Schwan, J. Stasko, J. Vetter, N. Mallavarupu, </author> <title> Falcon: Online Monitoring and Steering of Large-Scale Parallel Programs, </title> <booktitle> Proc. Frontiers of Massively Parallel Computation, </booktitle> <pages> pp. 442-429, </pages> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: However, these interface examples are rudimentary relative to the support required for application programs to access higher-level external services (e.g., databases, visualization systems [1], and distributed resources) and to allow external access to the application's state (e.g., for program state display or computational steering <ref> [2] </ref>). Although such support can be developed on an ad-hoc basis for each application, a general approach to the problem of parallel program interaction is preferred.
Reference: [3] <author> F. Bodin, P. Beckman, D. Gannon, S. Yang, S. Kesavan, A. Malony, B. Mohr, </author> <title> Implementing a Parallel C++ Runtime System for Scalable Parallel Systems, </title> <booktitle> Proc. 1993 Supercomputing Conference, Portland, </booktitle> <pages> pp. 588-597, </pages> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: For structures, these type descriptions can be used to specify a particular field of interest. Note that nested structures can be accessed this way also. A small example will help explain. Let's assume Breezy gives the client application the following type information: class valAttributes - char *color; float threeDPosition <ref> [3] </ref>; - class simpleElem - int i; class valAttributes *attr; float vals [100][100]; - Assume the client further finds that there is a variable myDistArray that is a distributed two-dimensional array of simpleElem elements (by retrieving program state information using Breezy).
Reference: [4] <author> High Performance Fortran Forum. </author> <title> High Performance Language Specification (Version 1.0). </title> <institution> Rice University, </institution> <month> May 3, </month> <year> 1993. </year>
Reference-contexts: The basic concept behind pC++ is the notion of a distributed collection, a structured set of objects which are distributed across the processing elements of the computer in a manner designed to be consistent with HPF <ref> [4] </ref>. To accomplish this, pC++ provides a very simple mechanism to build collections of objects from a base element class. Member functions of this element class can be applied to the entire collection (or a subset) in parallel.
Reference: [5] <author> D. Brown, S. Hackstadt, A. Malony, B. Mohr, </author> <title> Program Analysis Environments for Parallel Language Systems: The TAU Environment, </title> <booktitle> Proc. 2nd Workshop on Environments and Tools For Parallel Scientific Computing, Townsend, Tennessee, </booktitle> <pages> pp. 162-171, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Space limitation limit their descriptions here; more information can be found at [11]. The first use of Breezy was a simple parallel debugger <ref> [5] </ref>. This consisted of building a GUI on top of the Breezy Access module. This interface allows basic control of the program and access to data and type information.
Reference: [6] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <note> Version 1.2. </note>
Reference-contexts: There are several features that make Breezy a unique tool for its purpose in data-parallel comput ing analysis. * It has a high level interface, practical and intu itive to use. * Its modular design allows for reuse of components, and clean substitution of new technologies (such as substituting CORBA/IDL <ref> [6] </ref> for the transport layer). * It can be used as is with minimal effort, or it could be built on to achieve much more complex functionality, such as computational steering. * It allows the programmer to make functions available to be called by the client (via the Breezy API), giving <p> The network communication of Breezy has been implemented using sockets. A new version of Breezy will use CORBA/IDL <ref> [6] </ref> for its transportation layer. The Breakpoint Executive module will be a CORBA compliant object, from which clients can request data from the program. This data will be encoded as IDL structures. Our research team is currently working to develop program analysis tools for HPF.
Reference: [7] <author> F. Bodin, P. Beckman, D. Gannon, J. Gotwals, S. Narayana, S. Srinivas, B. Winnicka, Sage++: </author> <title> An Object Oriented Toolkit and Class Library for Building Fortran and C++ Restructuring Tools, </title> <booktitle> Proc. </booktitle> <address> Oonski `94, Oregon, </address> <year> 1994. </year>
Reference: [8] <author> E. Gallesio, </author> <note> STk Reference Manual, version 2.1.6. </note> <institution> Universite de Nice, </institution> <month> Feb. </month> <year> 1995. </year> <title> [9] "Distributed Array Query and Visualization," Parallel Tools Consortium Working Document, </title> <month> December 14, </month> <year> 1994. </year>
Reference-contexts: The next application of Breezy was as a utility for extracting data from a specific parallel pC++ program for visualization. The parallel application dealt with objects in three dimensional space. These objects were visualized using a visualization language, VIZ, which is a STk <ref> [8] </ref> based language designed for building visualization tools and prototyping application specific visualizations. The latest project applying Breezy is a Distributed Array Visualizer Environment (DAVE)[9][10]. DAVE acts as a database front-end to program data and information. DAVE, in turn, relies on Breezy to actually retrieve that data.
Reference: [10] <institution> Parallel Tools Consortium Working Group on Distributed Array Visualization, </institution> <note> URL: http:// www.llnl.gov/ptools/. </note>
Reference: [11] <author> Breezy: </author> <title> A Tool for Runtime Program Interaction With Data Parallel Programs, </title> <note> URL: http:// www.cs.uoregon.edu/paracomp/tau/breezy/. </note>
Reference-contexts: The result is a high-level interface based on the language and the program itself. 5 Example Applications of Breezy The following are three applications that used Breezy as a basis for parallel program interaction. Space limitation limit their descriptions here; more information can be found at <ref> [11] </ref>. The first use of Breezy was a simple parallel debugger [5]. This consisted of building a GUI on top of the Breezy Access module. This interface allows basic control of the program and access to data and type information.
References-found: 10

