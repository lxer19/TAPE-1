URL: http://www.cs.pitt.edu/~suew/chawathe.ps
Refering-URL: http://www.cs.pitt.edu/~suew/dbwshop2.html
Root-URL: 
Email: fchaw,abitebou,widomg@cs.stanford.edu  
Title: Representing and Querying Changes in Semistructured Data  
Author: Sudarshan S. Chawathe Serge Abiteboul Jennifer Widom 
Address: 94305  
Affiliation: Computer Science Department, Stanford University, Stanford, California  
Abstract: Semistructured data may be irregular and incomplete and does not necessarily conform to a fixed schema. As with structured data, it is often desirable to maintain a history of changes to data, and to query over both the data and the changes. Representing and querying changes in semistructured data is more difficult than in structured data due to the irregularity and lack of schema. We present a model for representing changes in semistructured data and a language for querying over these changes. An important feature of our approach is that we represent and query changes directly as annotations on the affected data, instead of indirectly as the difference between database states. We describe the implementation of our model and query language. We also describe the design and implementation of a query subscription service that permits users to subscribe to changes in semistructured information sources. 
Abstract-found: 1
Intro-found: 1
Reference: [Abi97] <author> S. Abiteboul. </author> <title> Querying semistructured data. </title> <booktitle> In Proceedings of the International Conference on Database Theory, Delphi, </booktitle> <address> Greece, </address> <month> January </month> <year> 1997. </year>
Reference-contexts: 1 Introduction Semistructured data is data that has some structure, but it may be irregular and incomplete and does not necessarily conform to a fixed schema (e.g, HTML documents). Recently, there has been increased interest in data models and query languages for semistructured data <ref> [Abi97, BDHS96, CACS94, CGMH + 94, QWG + 96] </ref>. We also see increased interest in change management in relational and object data [GHJ96, DHR96], and in the related problem of temporal databases [SA86, Soo91].
Reference: [ACT96] <author> ACT-NET. </author> <title> The active database management system manifesto: A rulebase of ADBMS features. </title> <journal> ACM SIGMOD Record, </journal> <volume> 25(3) </volume> <pages> 20-49, </pages> <month> September </month> <year> 1996. </year>
Reference-contexts: According to this view, we obtain various states of the database by starting with a single snapshot and applying some sequence of deltas to it. An early, simple example of this approach is the idea of delta relations, used in active databases <ref> [ACT96, WC96] </ref> and trigger languages [ISO94], which represent a set of changes to a relation R using two relations R + and R , where R + = R new R old , and R = R old R new .
Reference: [AQM + 96] <author> S. Abiteboul, D. Quass, J. McHugh, J. Widom, and J. Wiener. </author> <title> The Lorel query language for semistructured data. </title> <journal> Journal of Digital Libraries, </journal> <volume> 1(1) </volume> <pages> 68-88, </pages> <month> November </month> <year> 1996. </year>
Reference-contexts: The basic change operations in such a graph-based model are node insertion, update of node values, and addition and removal of labeled arcs. (Node deletion is implicit by unreachabil-ity <ref> [AQM + 96] </ref>.) Our change representation model, DOEM (for Delta-OEM), uses annotations on the nodes and arcs of an OEM graph to represent changes. Intuitively, the set of annotations on a node or arc represents the history of that node or arc. <p> Intuitively, the set of annotations on a node or arc represents the history of that node or arc. For querying over changes we use a language based on the Lorel language for querying semistructured data <ref> [AQM + 96] </ref>. In our language, called Chorel (for Change Lorel), we extend the concept of Lorel path expressions to allow us to refer to the annotations in a DOEM database. The result is an intuitive and convenient language for expressing change queries in semistructured data. <p> Note that there is no explicit object deletion operation. In OEM, persistence is by reach ability from the distinguished root node <ref> [AQM + 96] </ref>. Thus, to delete an object it suffices to remove all arcs leading to it. A subtlety is that sometimes we need to allow objects to be temporarily unreachable. <p> Thus, when we consider sequences of changes in Section 2.2, we want to permit the result of atomic changes to (temporarily) contain unreachable objects. The issue is discussed further in Section 2.2 below. Note that users will typically request higher-level changes based on the Lorel update language <ref> [AQM + 96] </ref>; the basic change operations defined here reflect the actual changes at the database level. Example 2.2 Let us consider some modifications to the OEM database in Example 2.1. We will use these modifications as a running example in the rest of the paper. <p> In this section, we describe how DOEM databases are queried. We introduce a query language called Chorel for this purpose. Chorel is similar to the Lorel language <ref> [AQM + 96] </ref> used to query OEM databases. <p> Lorel also provides a number of syntactic conveniences such as the possibility of omitting the from clause. Due to space limitations, we do not describe Lorel in detail here (see <ref> [AQM + 96] </ref>), but only present through a simple example those features that are needed to understand Chorel. Example 4.1 Consider again the (modified) OEM database depicted in Figure 1. <p> The label name is chosen by Chorel using the method described in <ref> [AQM + 96] </ref>. For time and data variables whose labels are not specified by the query, Chorel chooses the default labels create-time, add-time, remove-time, update-time, new-value, and old-value. 2 4.3 Chorel Semantics We now make the semantics of Chorel queries more precise. <p> Above, we have illustrated how variables introduced in the from clause are interpreted. Variables may be introduced in the where clause as well. They are treated by introducing existential quantification in the where clause, extending the treatment of such variables in Lorel <ref> [AQM + 96] </ref>. Consider the following example: Example 4.5 Consider again the DOEM database of Figure 2. Suppose we want the names of restaurants to which a moderate price subobject was added since January 1st, 1997.
Reference: [BDHS96] <author> P. Buneman, S. Davidson, G. Hillebrand, and D. Suciu. </author> <title> A query language and optimization techniques for unstructured data. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 505-516, </pages> <address> Montreal, Quebec, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Semistructured data is data that has some structure, but it may be irregular and incomplete and does not necessarily conform to a fixed schema (e.g, HTML documents). Recently, there has been increased interest in data models and query languages for semistructured data <ref> [Abi97, BDHS96, CACS94, CGMH + 94, QWG + 96] </ref>. We also see increased interest in change management in relational and object data [GHJ96, DHR96], and in the related problem of temporal databases [SA86, Soo91]. <p> The result is an intuitive and convenient language for expressing change queries in semistructured data. Although the work in this paper is founded on the OEM data model and the Lorel language, the principal concepts are applicable to any graph-based data model (semistructured or otherwise), e.g., <ref> [BDHS96, Cat94] </ref>. Our implementation of DOEM and Chorel uses a method that encodes DOEM databases as OEM databases and translates Chorel queries into equivalent Lorel queries over the OEM encoding. <p> In addition to being more modular than a direct implementation approach that builds a Chorel database engine from scratch, this approach can also be adapted easily to other graph-based data models, e.g., those in <ref> [BDHS96, Cat94] </ref>. 5.1 Encoding DOEM in OEM Let D be a DOEM database. We encode D as an OEM database O D defined as follows. For each object o in D, there is a corresponding object o 0 in O D .
Reference: [C3] <institution> Overview of the Stanford C 3 project. </institution> <note> Available at http://www-db.stanford.edu/c3/. </note>
Reference-contexts: Our htmldiff system allows users to browse the marked-up web page to view the changes, and to travel back and forth between the old and new versions of the document [CRGMW96]. Please see <ref> [C3] </ref> for details, including some sample output from htmldiff . For reasonably small documents, browsing the marked-up HTML files produced by htmldiff to view the changes of interest is a feasible option. <p> Returning the DOEM object enables a user interface to access both the value and the history of an object. We have implemented a DOEM database system, called CORE, based on the above ideas; please see <ref> [C3] </ref> for a description. 6 A Query Subscription Service In Section 1, we mentioned an important application of change management: being able to notify subscribers of changes in (semistructured) information sources of interest to them. <p> The frequency specification implies a sequence of time instants (t 1 ; t 2 ; t 3 ; : : :), which we call polling times. These times are the times when we obtain a new snapshot of the data. (In the actual system <ref> [C3] </ref>, we also consider two other modes: one in which the snapshots are obtained following explicit user requests, and the other in which snapshots are obtained as a result of a trigger on the source database firing, if the source provides such a triggering mechanism. <p> Therefore the result of the query Q c over the modified DOEM database contains the new restaurant object Hakata, and the user is notified of this result. 2 We have implemented our QSS prototype based on the above ideas, and interfaced it with Tsimmis wrappers over various information sources <ref> [C3] </ref>. 7 Conclusion and Future Work We have motivated the need for a uniform representation scheme for changes in semistructured data, and for a query language that allows direct access to changes.
Reference: [CACS94] <author> V. Christophides, S. Abiteboul, S. Cluet, and M. Scholl. </author> <title> From structured documents to novel query facilities. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <year> 1994. </year>
Reference-contexts: 1 Introduction Semistructured data is data that has some structure, but it may be irregular and incomplete and does not necessarily conform to a fixed schema (e.g, HTML documents). Recently, there has been increased interest in data models and query languages for semistructured data <ref> [Abi97, BDHS96, CACS94, CGMH + 94, QWG + 96] </ref>. We also see increased interest in change management in relational and object data [GHJ96, DHR96], and in the related problem of temporal databases [SA86, Soo91].
Reference: [Cat94] <author> R. Cattell. </author> <title> The Object Database Standard: ODMG-93. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1994. </year>
Reference-contexts: The result is an intuitive and convenient language for expressing change queries in semistructured data. Although the work in this paper is founded on the OEM data model and the Lorel language, the principal concepts are applicable to any graph-based data model (semistructured or otherwise), e.g., <ref> [BDHS96, Cat94] </ref>. Our implementation of DOEM and Chorel uses a method that encodes DOEM databases as OEM databases and translates Chorel queries into equivalent Lorel queries over the OEM encoding. <p> We begin with a brief overview of Lorel, followed by a description of the syntax and semantics of Chorel. 4.1 Lorel Overview Lorel uses the familiar select-from-where syntax, and can be thought of as an extension of OQL <ref> [Cat94] </ref> in two major ways. First, Lorel encourages the use of path expressions. For instance, one can use the path expression guide.restaurant.address.street to specify the streets of all addresses of restaurant entries in the Guide database. Second, in contrast to OQL, Lorel has a very forgiving type system. <p> In addition to being more modular than a direct implementation approach that builds a Chorel database engine from scratch, this approach can also be adapted easily to other graph-based data models, e.g., those in <ref> [BDHS96, Cat94] </ref>. 5.1 Encoding DOEM in OEM Let D be a DOEM database. We encode D as an OEM database O D defined as follows. For each object o in D, there is a corresponding object o 0 in O D .
Reference: [CAW97] <author> S. Chawathe, S. Abiteboul, and J. Widom. </author> <title> Representing and querying changes in semistructured data (extended version). </title> <note> Available at http://www-db.stanford.edu, 1997. </note>
Reference-contexts: Section 6 describes the query subscription system we have implemented based on the material in Sections 3-5. We conclude in Section 7. Due to space constraints, we have omitted details from some sections of this paper; we refer the reader to the extended version <ref> [CAW97] </ref> for these details. 2 The Object Exchange Model The Object Exchange Model (OEM) is a simple, flexible model for representing heterogeneous, semistructured data. (Recall that semistructured data is data that may be irregular or incomplete, and that does not necessarily conform to a fixed schema, e.g., HTML documents describing restaurants.) <p> removed parking arc from the Janta restaurant object to the Lytton lot 2 parking object is not actually removed from the DOEM database; instead it bears a rem annotation. 2 3.2 Properties of DOEM Databases We now summarize the desirable properties of the DOEM representation of OEM database histories. (See <ref> [CAW97] </ref> for details.) Given a DOEM database D, it is easy to obtain the original snapshot, O 0 (D), the snapshot at time t, O t (D), and, the current snapshot, O c (D). It is also easy to obtain the encoded history H (D) from a DOEM database D. <p> Note that a DOEM database does not explicitly store the new value of an updated object, however this information is available implicitly, and can be determined easily <ref> [CAW97] </ref>. Example 4.3 Consider the DOEM database in Figure 2. <p> If o is complex, there is a &val-labeled arc from o 0 to itself. (This extra edge simplifies the translation of Chorel queries to equivalent Lorel queries over the encoding <ref> [CAW97] </ref>.) * &cre: If o has a create annotation cre (t), then o 0 has a &cre-labeled atomic subobject with value t. * &upd: For each update annotation upd (t; ov) attached to o, o 0 has an &upd-labeled complex subobject with the following structure: a &time-labeled subobject with value t, <p> Due to space constraints, we do not present the details here, referring the reader to <ref> [CAW97] </ref> instead. The following example intuitively presents the basis of the translation scheme. Example 5.1 Consider the Chorel query in Example 4.5. In Section 4.3, we considered the OQL-like rewriting of this query.
Reference: [CGM97] <author> S. Chawathe and H. Garcia-Molina. </author> <title> Meaningful change detection in structured data. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 26-37, </pages> <address> Tuscon, Arizona, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: Therefore, we are often forced to infer changes based on a sequence of data snapshots. We have studied this problem in <ref> [CRGMW96, CGM97] </ref>, which describe algorithms for inferring changes from snapshots of semistructured data; we therefore do not discuss component (1) further in this paper. This paper addresses the problems associated with components (2) and (3). <p> We obtain snapshots of relevant portions of the data, and use differencing techniques based on <ref> [CRGMW96, CGM97] </ref> to infer changes based on these snapshots. Finally, we use DOEM to represent the changes, and Chorel to specify the changes of interest. We describe our approach in more detail next. A subscription consists of three main components. <p> Each R i (a Tsimmis query result) is a tree-structured OEM database. Using differencing techniques described in <ref> [CRGMW96, CGM97] </ref>, QSS obtains a history H = (t 1 ; U 1 ); (t 2 ; U 2 ); : : : corresponding to the sequence of OEM databases (R 0 ; R 1 ; R 2 ; : : :).
Reference: [CGMH + 94] <author> S. Chawathe, H. Garcia-Molina, J. Hammer, K. Ire-land, Y. Papakonstantinou, J. Ullman, and J. Widom. </author> <title> The Tsimmis project: Integration of heterogeneous information sources. </title> <booktitle> In Proceedings of 100th Anniversary Meeting of the Information Processing Society of Japan, </booktitle> <pages> pages 7-18, </pages> <address> Tokyo, Japan, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Semistructured data is data that has some structure, but it may be irregular and incomplete and does not necessarily conform to a fixed schema (e.g, HTML documents). Recently, there has been increased interest in data models and query languages for semistructured data <ref> [Abi97, BDHS96, CACS94, CGMH + 94, QWG + 96] </ref>. We also see increased interest in change management in relational and object data [GHJ96, DHR96], and in the related problem of temporal databases [SA86, Soo91]. <p> This paper addresses the problems associated with components (2) and (3). Since our goal is to represent changes in semistructured data, we use as a starting point the Object Exchange Model (OEM) [PGMW95], designed at Stanford as part of the Tsim-mis project <ref> [CGMH + 94] </ref>. OEM is a simple graph-based data model, with objects as nodes and object-subobject relationships represented by labeled arcs.
Reference: [CRGMW96] <author> S. Chawathe, A. Rajaraman, H. Garcia-Molina, and J. Widom. </author> <title> Change detection in hierarchically structured information. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 493-504, </pages> <address> Montreal, Quebec, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: For example, we are interested in finding out which restaurants were recently added, which restaurants were seen as improving, degrading, etc. These changes can be captured by a tool that we have implemented, called htmldiff <ref> [CRGMW96] </ref>. The htmldiff program takes two versions of a web page as input, and produces as output a marked-up copy of the web page that highlights the differences between the two versions based on their semistruc-tured contents. <p> Our htmldiff system allows users to browse the marked-up web page to view the changes, and to travel back and forth between the old and new versions of the document <ref> [CRGMW96] </ref>. Please see [C3] for details, including some sample output from htmldiff . For reasonably small documents, browsing the marked-up HTML files produced by htmldiff to view the changes of interest is a feasible option. <p> Therefore, we are often forced to infer changes based on a sequence of data snapshots. We have studied this problem in <ref> [CRGMW96, CGM97] </ref>, which describe algorithms for inferring changes from snapshots of semistructured data; we therefore do not discuss component (1) further in this paper. This paper addresses the problems associated with components (2) and (3). <p> We obtain snapshots of relevant portions of the data, and use differencing techniques based on <ref> [CRGMW96, CGM97] </ref> to infer changes based on these snapshots. Finally, we use DOEM to represent the changes, and Chorel to specify the changes of interest. We describe our approach in more detail next. A subscription consists of three main components. <p> Each R i (a Tsimmis query result) is a tree-structured OEM database. Using differencing techniques described in <ref> [CRGMW96, CGM97] </ref>, QSS obtains a history H = (t 1 ; U 1 ); (t 2 ; U 2 ); : : : corresponding to the sequence of OEM databases (R 0 ; R 1 ; R 2 ; : : :).
Reference: [DHR96] <author> M. Doherty, R. Hull, and M. Rupawalla. </author> <title> Structures for manipulating proposed updates in object-oriented databases. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Montreal, Quebec, </address> <year> 1996. </year>
Reference-contexts: Recently, there has been increased interest in data models and query languages for semistructured data [Abi97, BDHS96, CACS94, CGMH + 94, QWG + 96]. We also see increased interest in change management in relational and object data <ref> [GHJ96, DHR96] </ref>, and in the related problem of temporal databases [SA86, Soo91]. However, we are not aware of any work that addresses the problem of representing and querying changes in semistructured data. <p> More recently, this approach has been used by the Heraclitus/H2O project to represent changes in relational and object data <ref> [DHR96, GHJ92, GHJ96] </ref>. Our work differs from the Hera-clitus/H20 work in two respects. First, we represent changes in semistructured data, not just relational and object data.
Reference: [GHJ92] <author> S. Ghandeharizadeh, R. Hull, and D. Jacobs. </author> <title> Implementation of delayed updates in Heraclitus. </title> <booktitle> In Advances in Database TechnologyEDBT '92, Lecture Notes in Computer Science 580, </booktitle> <pages> pages 261-276. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <month> March </month> <year> 1992. </year>
Reference-contexts: More recently, this approach has been used by the Heraclitus/H2O project to represent changes in relational and object data <ref> [DHR96, GHJ92, GHJ96] </ref>. Our work differs from the Hera-clitus/H20 work in two respects. First, we represent changes in semistructured data, not just relational and object data.
Reference: [GHJ96] <author> S. Ghandeharizadeh, R. Hull, and D. Jacobs. Heracli-tus: </author> <title> Elevating deltas to be first-class citizens in a database programming language. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 21(3) </volume> <pages> 370-426, </pages> <month> September </month> <year> 1996. </year>
Reference-contexts: Recently, there has been increased interest in data models and query languages for semistructured data [Abi97, BDHS96, CACS94, CGMH + 94, QWG + 96]. We also see increased interest in change management in relational and object data <ref> [GHJ96, DHR96] </ref>, and in the related problem of temporal databases [SA86, Soo91]. However, we are not aware of any work that addresses the problem of representing and querying changes in semistructured data. <p> More recently, this approach has been used by the Heraclitus/H2O project to represent changes in relational and object data <ref> [DHR96, GHJ92, GHJ96] </ref>. Our work differs from the Hera-clitus/H20 work in two respects. First, we represent changes in semistructured data, not just relational and object data.
Reference: [ISO94] <institution> ISO-ANSI working draft: Database language SQL3 (X3H2/94/080 and SOU/003), </institution> <year> 1994. </year>
Reference-contexts: According to this view, we obtain various states of the database by starting with a single snapshot and applying some sequence of deltas to it. An early, simple example of this approach is the idea of delta relations, used in active databases [ACT96, WC96] and trigger languages <ref> [ISO94] </ref>, which represent a set of changes to a relation R using two relations R + and R , where R + = R new R old , and R = R old R new .
Reference: [PAGM96] <author> Y. Papakonstantinou, S. Abiteboul, and H. Garcia-Molina. </author> <title> Object fusion in mediator systems. </title> <booktitle> In Proceedings of the International Conference on Very Large Data Bases, </booktitle> <pages> pages 413-424, </pages> <address> Bombay, India, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: Second, there is often no way to access historical circulation information, so that we cannot check whether the book being returned was checked out two or more times recently. In this application too, the data may be semistructured, especially if the library system merges information from multiple sources <ref> [PAGM96] </ref>. Thus, we again need a method to compute, represent, and query changes in the context of semistructured data. 1.2 Overview We are interested in the three components of a change management system, in the context of semistructured data: (1) detecting changes; (2) representing changes; and (3) querying changes.
Reference: [PAW] <institution> The Palo Alto Weekly online edition. Embarcadero Publishing Company, Palo Alto, California. </institution> <note> Available at http://www.service.com/PAW/. </note>
Reference-contexts: We also introduce a facility that allows users to subscribe to changes in semistructured data, and we describe its design and implementation based on DOEM and Chorel. 1.1 Motivating Examples The Palo Alto Weekly, a local newspaper, maintains a Web site providing information about restaurants in the Bay Area <ref> [PAW] </ref>. Most of the data in the restaurant guide is fl This work was supported by the Air Force Rome Laboratories under DARPA Contract F30602-95-C-0119and by an equipment grant from IBM Corporation. relatively static.
Reference: [PGGMU95] <author> Y. Papakonstantinou, A. Gupta, H. Garcia-Molina, and J. Ullman. </author> <title> A query translation scheme for rapid implementation of wrappers. </title> <booktitle> In Proceedings of the International Conference on Deductive and Object-Oriented Databases, </booktitle> <pages> pages 161-186, </pages> <address> Singapore, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Briefly, our approach to constructing a query subscription service over semistructured, possibly legacy information sources is as follows: We access the information sources using Tsimmis wrappers or mediators <ref> [PGGMU95, PGMU96] </ref>, which present a uniform OEM view of one or more data sources. We obtain snapshots of relevant portions of the data, and use differencing techniques based on [CRGMW96, CGM97] to infer changes based on these snapshots.
Reference: [PGMU96] <author> Y. Papakonstantinou, H. Garcia-Molina, and J. Ull-man. MedMaker: </author> <title> A mediation system based on declarative specifications. </title> <booktitle> In Proceedings of the International Conference on Data Engineering, </booktitle> <pages> pages 132-141, </pages> <address> New Orleans, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: Briefly, our approach to constructing a query subscription service over semistructured, possibly legacy information sources is as follows: We access the information sources using Tsimmis wrappers or mediators <ref> [PGGMU95, PGMU96] </ref>, which present a uniform OEM view of one or more data sources. We obtain snapshots of relevant portions of the data, and use differencing techniques based on [CRGMW96, CGM97] to infer changes based on these snapshots.
Reference: [PGMW95] <author> Y. Papakonstantinou, H. Garcia-Molina, and J. Widom. </author> <title> Object exchange across heterogeneous information sources. </title> <booktitle> In Proceedings of the International Conference on Data Engineering, </booktitle> <pages> pages 251-260, </pages> <address> Taipei, Taiwan, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: This paper addresses the problems associated with components (2) and (3). Since our goal is to represent changes in semistructured data, we use as a starting point the Object Exchange Model (OEM) <ref> [PGMW95] </ref>, designed at Stanford as part of the Tsim-mis project [CGMH + 94]. OEM is a simple graph-based data model, with objects as nodes and object-subobject relationships represented by labeled arcs.
Reference: [QWG + 96] <author> D. Quass, J. Widom, R. Goldman, K. Haas, Q. Luo, J. McHugh, S. Nestorov, A. Rajaraman, H. Rivero, S. Abite-boul, J. Ullman, and J. Wiener. </author> <title> LORE: A Lightweight Object REpository for semistructured data. </title> <booktitle> In Proceedings of ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Montreal, Canada, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Semistructured data is data that has some structure, but it may be irregular and incomplete and does not necessarily conform to a fixed schema (e.g, HTML documents). Recently, there has been increased interest in data models and query languages for semistructured data <ref> [Abi97, BDHS96, CACS94, CGMH + 94, QWG + 96] </ref>. We also see increased interest in change management in relational and object data [GHJ96, DHR96], and in the related problem of temporal databases [SA86, Soo91].
Reference: [SA86] <author> R. Snodgrass and I. Ahn. </author> <title> Temporal databases. </title> <journal> IEEE Computer, </journal> <volume> 19(9) </volume> <pages> 35-42, </pages> <month> September </month> <year> 1986. </year>
Reference-contexts: Recently, there has been increased interest in data models and query languages for semistructured data [Abi97, BDHS96, CACS94, CGMH + 94, QWG + 96]. We also see increased interest in change management in relational and object data [GHJ96, DHR96], and in the related problem of temporal databases <ref> [SA86, Soo91] </ref>. However, we are not aware of any work that addresses the problem of representing and querying changes in semistructured data. <p> The states are ordered, usually linearly, based on time. In addition to querying the present database state, such systems allow any other state of the database to be queried. This is the approach taken by temporal databases <ref> [SA86, Soo91] </ref>. The second approach, which we call the snapshot-delta approach, views the history of the database as a combination of a single database snapshot and a collection of deltas.
Reference: [SL90] <author> A. Sheth and J.A. Larson. </author> <title> Federated database systems for managing distributed, heterogeneous, and autonomous databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 183-236, </pages> <year> 1990. </year>
Reference-contexts: Below, we describe how subscription queries are specified and implemented in our system. Supporting subscription queries introduces the following challenges. First, as discussed earlier, many information sources that we are interested in (e.g., library information systems, Web sites, etc.) are autonomous <ref> [SL90] </ref> and typical database approaches based on triggering mechanisms are not usable. Second, these information sources typically do not keep track of historical information in a format that is accessible to the outside user.
Reference: [Soo91] <author> M.D. Soo. </author> <title> Bibliography on temporal databases. </title> <journal> SIG-MOD Record, </journal> <volume> 20(1) </volume> <pages> 14-24, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: Recently, there has been increased interest in data models and query languages for semistructured data [Abi97, BDHS96, CACS94, CGMH + 94, QWG + 96]. We also see increased interest in change management in relational and object data [GHJ96, DHR96], and in the related problem of temporal databases <ref> [SA86, Soo91] </ref>. However, we are not aware of any work that addresses the problem of representing and querying changes in semistructured data. <p> The states are ordered, usually linearly, based on time. In addition to querying the present database state, such systems allow any other state of the database to be queried. This is the approach taken by temporal databases <ref> [SA86, Soo91] </ref>. The second approach, which we call the snapshot-delta approach, views the history of the database as a combination of a single database snapshot and a collection of deltas.
Reference: [WC96] <author> J. Widom and S. Ceri. </author> <title> Active database systems: Triggers and rules for advanced database processing. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1996. </year>
Reference-contexts: According to this view, we obtain various states of the database by starting with a single snapshot and applying some sequence of deltas to it. An early, simple example of this approach is the idea of delta relations, used in active databases <ref> [ACT96, WC96] </ref> and trigger languages [ISO94], which represent a set of changes to a relation R using two relations R + and R , where R + = R new R old , and R = R old R new .
References-found: 25

