URL: http://www.tns.lcs.mit.edu/~djw/library/sigops96/lakshman.ps.gz
Refering-URL: http://www.tns.lcs.mit.edu/~djw/library/sigops96/index.html
Root-URL: 
Email: lakshman,madan@dcs.uky.edu yavatkar@ibeam.intel.com  
Title: Adding Realtime Applets and Quality of Service Support to the World Wide Web  
Author: K. Lakshman, Madan Manoharan Raj Yavatkar 
Affiliation: University of Kentucky Intel Corporation  
Abstract: Predictable Quality of Service (QoS) in terms of controlled response time and guaranteed bandwidth is increasingly important in World Wide Web. We propose a variety of enhancements and extensions to the existing Web infrastructure so that Web applications and applets can provide predictable quality of service. The proposed extensions include addition of the notion of QoS to the HTML/HTTP/Java syntax, QoS negotiation and adaptation mechanisms in Java classes and threads, QoS reservation support at the socket and transport protocol layers, and ATM signaling extensions for dynamic QoS re-negotiation over persistent HTTP connections. Our ongoing work includes implementation of these extensions and an evaluation over a testbed consisting of a network of Unix workstations and ATM switches. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Buddhikot, G. Parulkar, and R. Goplakrishnan. </author> <title> Scalable Multimedia-On-Demand via World-Wide-Web (WWW) with QoS Guarantees. </title> <booktitle> In Proc. 6th Intl. Workshop on Network and Operating System Support for Digital Audio and Video(NOSSDAV), </booktitle> <address> Zushi, Japan, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: We are currently investigating alternatives for adding QoS support to the Web infrastructure. While a considerable amount of work has been done in the area of OS support for multimedia [3, 4, 5, 6], very little work has been reported <ref> [1] </ref> in the area of creating the necessary infrastructure for providing real-time support to the Web-based applications. Our current work grew out of the AQUA [11] (Adaptive QUality of service Architecture) project at the University of Kentucky. <p> QoS extensions to HTTP: QoS-based extensions to HTPP are necessary to allow specification of QoS requirements to the underlying transport as part of a get request. Extensions to HTTP proposed in <ref> [1] </ref> allow content-based searches and interactive control over playback operations. We have modified the HTTP protocol so that a Web client can optionally specify that a particular HTML document be fetched with a QoS reservation. We have implemented our modifications using the Web server available from the Web (W3C) Consortium.
Reference: [2] <author> Douglas E. Comer and John C. Lin. </author> <title> TCP Buffering And Performance Over An ATM Network. </title> <journal> Journal of Internetworking: Research and Experience, </journal> <volume> 6(1) </volume> <pages> 1-13, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: Most of the present approaches for mapping IP over ATM [12] involve transparent, on-demand establishment of ATM virtual circuits to a destination host with no explicit input on QoS requirements from applications. Our experiments over an ATM testbed consisting of five ATM switches and results reported by others <ref> [2] </ref> indicate that end-to-end TCP and UDP performance can suffer severe degradation under this approach. Early Packet Discard [14] and per-VC packet queuing improve TCP performance, but fail to ensure that a particular TCP/UDP flow will receive a desired fraction of available bandwidth.
Reference: [3] <author> G. Coulson, A. Campbell, P. Robin, G. Blair, M. Papathomous, and D. Shepard. </author> <title> The Design of a QoS-Controlled ATM-Based Communications System in Chorus. </title> <journal> IEEE JSAC, </journal> <volume> 13(4) </volume> <pages> 686-699, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: We are currently investigating alternatives for adding QoS support to the Web infrastructure. While a considerable amount of work has been done in the area of OS support for multimedia <ref> [3, 4, 5, 6] </ref>, very little work has been reported [1] in the area of creating the necessary infrastructure for providing real-time support to the Web-based applications. Our current work grew out of the AQUA [11] (Adaptive QUality of service Architecture) project at the University of Kentucky.
Reference: [4] <author> Q-Thread: </author> <title> A New Execution Model for Dynamic QOS control of Continous-Media Processing. </title> <editor> Kiyokuni kawachiya and hideyuki tokuda. </editor> <booktitle> In 6th International NOSSDAV Workshop, </booktitle> <month> April </month> <year> 1996. </year>
Reference-contexts: We are currently investigating alternatives for adding QoS support to the Web infrastructure. While a considerable amount of work has been done in the area of OS support for multimedia <ref> [3, 4, 5, 6] </ref>, very little work has been reported [1] in the area of creating the necessary infrastructure for providing real-time support to the Web-based applications. Our current work grew out of the AQUA [11] (Adaptive QUality of service Architecture) project at the University of Kentucky. <p> Our goal is to introduce the notion of real-time execution in the Java run-time environment and define an OS interface for dynamic adaptation and negotiation of predictable QoS with a host OS <ref> [4, 11] </ref>. Our proposal is based on the AQUA (Adaptive QUality of service Architecture)[11] architecture that has been implemented in the Sun Solaris 2.4 operating system.
Reference: [5] <author> Raman Gopalakrishna and Guru Parulkar. </author> <title> Real-Time Signals: A Mechanism to provide Real-Time Processing Guarantees. </title> <type> Technical Report WUCS-95-06, </type> <institution> Washington Univeristy- Dept. of Computer Science, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: We are currently investigating alternatives for adding QoS support to the Web infrastructure. While a considerable amount of work has been done in the area of OS support for multimedia <ref> [3, 4, 5, 6] </ref>, very little work has been reported [1] in the area of creating the necessary infrastructure for providing real-time support to the Web-based applications. Our current work grew out of the AQUA [11] (Adaptive QUality of service Architecture) project at the University of Kentucky.
Reference: [6] <author> Ramesh Govindan and David P. Anderson. </author> <title> Scheduling and IPC mechanisms for continuous media. </title> <booktitle> In Proceedings of 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 68-80, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: We are currently investigating alternatives for adding QoS support to the Web infrastructure. While a considerable amount of work has been done in the area of OS support for multimedia <ref> [3, 4, 5, 6] </ref>, very little work has been reported [1] in the area of creating the necessary infrastructure for providing real-time support to the Web-based applications. Our current work grew out of the AQUA [11] (Adaptive QUality of service Architecture) project at the University of Kentucky.
Reference: [7] <author> JavaSoft Inc. </author> <title> Java. </title> <note> Technical Report http://java.sun.com, 1996. </note>
Reference-contexts: Predictable Quality of Service (QoS) in terms of both controlled response time and guaranteed bandwidth is increasingly important for ensuring high-quality delivery of rich media content. Furthermore, addition of Java-based applets <ref> [7] </ref> to the Web content imposes new demands on management of OS resources.
Reference: [8] <author> C Kindel et al. </author> <title> Inserting multimedia objects into HTML3. </title> <address> W3C-Draft, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Similar extensions have been proposed in [16]. 3 Provision for alternate forms of content to accommodate heterogeneous networks Recently, two new elements, namely, embed and insert elements, have been proposed to be added to HTML for supporting overlays <ref> [8] </ref> and are very useful for supporting alternate forms of content. However, the syntax needs to be further extended to describe choices of multiple formats and to specify hierarchical encoding of embedded objects.
Reference: [9] <author> K Lakshman. </author> <title> AQUA: Aqdaptive Quality of Service Architecture. </title> <type> PhD thesis, </type> <institution> Univeristy of Kentucky, </institution> <year> 1996. </year> <note> In preparation. </note>
Reference-contexts: We have applied the framework to the problem of managing a variety of host resources such as CPU time, network interface bandwidth, and display color map <ref> [9] </ref>. We will use here an example of CPU scheduling for the purpose of describing QoS management in Java threads.
Reference: [10] <author> K. Lakshman and R. Yavatkar. </author> <title> An Empirical Evaluation of Adaptive QOS Renegotation in an ATM Network. </title> <booktitle> In Proc. 6th Intl. NOSSDAV Workshop, </booktitle> <address> Zushi, Japan, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: We have incorporated our extensions into a prototype implementation over a network of five Fore ATM switches and Sun Sparc workstations and used the prototype to evaluate the benefits of dynamic QoS renegotiation. More details on our signaling extensions and experimental results can be found in <ref> [10] </ref>. 1 Currently, we have focused only on exploiting ATM functionality for adding QoS capability to the Web-based applications due to lack of widespread availability of RSVP support in Internet routers.
Reference: [11] <author> K. Lakshman and R. Yavatkar. </author> <title> AQUA: An Adaptive End-System Quality of Service Architecture. </title> <editor> In W. Ef-felsberg, O. Spaniol, A. Danthine, and D. Ferrari, editors, </editor> <title> High-Speed Networking for Multimedia Applications. </title> <publisher> Kluwer Academic, </publisher> <year> 1996. </year>
Reference-contexts: Our current work grew out of the AQUA <ref> [11] </ref> (Adaptive QUality of service Architecture) project at the University of Kentucky. AQUA provides an OS framework for managing host resources (such as CPU, memory, and bus bandwidth) so that an OS can provide predictable service to applications. <p> Our goal is to introduce the notion of real-time execution in the Java run-time environment and define an OS interface for dynamic adaptation and negotiation of predictable QoS with a host OS <ref> [4, 11] </ref>. Our proposal is based on the AQUA (Adaptive QUality of service Architecture)[11] architecture that has been implemented in the Sun Solaris 2.4 operating system.
Reference: [12] <author> M. Laubach. </author> <title> Classical IP and ARP over ATM. </title> <institution> Internet RFC-1577, </institution> <month> Januray </month> <year> 1994. </year>
Reference-contexts: For example, the transport protocols (TCP and UDP) must map these QoS requirements onto appropriate network-level resource reservations. Most of the present approaches for mapping IP over ATM <ref> [12] </ref> involve transparent, on-demand establishment of ATM virtual circuits to a destination host with no explicit input on QoS requirements from applications.
Reference: [13] <author> Jeffrey C. Mogul. </author> <title> The Case for Persistent-Connection HTTP. In Proceedings of SIGCOMM'95, </title> <month> August </month> <year> 1995. </year>
Reference-contexts: Appropriate QoS API must be added to the transport layer interfaces [16] and/or transport protocol implementations should be extended to transparently establish QoS reservations on behalf of the applications. Dynamic QoS re-negotiation over persistent HTTP connections: Recently, it has been proposed that HTTP use persistent connections <ref> [13] </ref> to carry multiple requests to the same server for efficient usage of network resources and to reduce latency. <p> The details of our implementation and results of a performance evaluation are presented elsewhere [19]. 6 Dynamic QoS Renegotiation for persistent HTTP connections HTTP makes inefficient use of network resources by creating a new TCP connection for each request <ref> [13] </ref> and modifications to HTTP have been proposed to transport multiple requests over a persistent HTTP connection. However, use of a persistent connection poses an interesting new problem. The QoS requirements of each request would vary depending on the kind of document to be transferred.
Reference: [14] <author> A Romanow and S Floyd. </author> <title> The Dynamics of TCP Traffic over ATM Networks. </title> <journal> IEEE JSAC, </journal> <month> May </month> <year> 1995. </year>
Reference-contexts: Our experiments over an ATM testbed consisting of five ATM switches and results reported by others [2] indicate that end-to-end TCP and UDP performance can suffer severe degradation under this approach. Early Packet Discard <ref> [14] </ref> and per-VC packet queuing improve TCP performance, but fail to ensure that a particular TCP/UDP flow will receive a desired fraction of available bandwidth.
Reference: [15] <author> H. Schulzrinne and S. Casner. RTP: </author> <title> A Transport Protcol for Real-Time Applications. </title> <institution> IETF RFC1889, </institution> <year> 1996. </year>
Reference-contexts: Moreover, bandwidth requirements of a single request (such as transfer of a MPEG video) can vary dynamically within a transfer. Thus, an ability to dynamically re-negotiate the QoS reservation of an ongoing connection is necessary. In addition, a Web client using RTP <ref> [15] </ref> for transfer of an audio or video stream receives feedback from its associated control protocol (RTCP) about the current end-to-end performance in terms of observed delay and losses. Such feedback can (and should) be used to change the QoS reservations to improve the playback quality of an ongoing transfer.
Reference: [16] <author> Stardust Technologies. </author> <title> Windows Sockets 2 API, Revision 2.1.0. </title> <type> Technical report, </type> <month> January </month> <year> 1996. </year>
Reference-contexts: However, currently, these protocols rely on best-effort datagram delivery and do not allow applications to explicitly specify resource requirements and take advantage of QoS guarantees supported by underlying link and network layer technologies (e.g., ATM or RSVP). Appropriate QoS API must be added to the transport layer interfaces <ref> [16] </ref> and/or transport protocol implementations should be extended to transparently establish QoS reservations on behalf of the applications. <p> HTTP protocol handler adds the QoS attribute to its GetWithQoS request. In addition, we have extended the BSD socket interface with a new setsockopt (socket, IPPROTO_IP, SET_QOS, QoSSpec) option that allows resource reservations using both RSVP and TCP/UDP protocols. Similar extensions have been proposed in <ref> [16] </ref>. 3 Provision for alternate forms of content to accommodate heterogeneous networks Recently, two new elements, namely, embed and insert elements, have been proposed to be added to HTML for supporting overlays [8] and are very useful for supporting alternate forms of content.
Reference: [17] <author> Hideyuki Tokuda and et al. </author> <title> Real-Time Mach: Towards Predictable Real-Time System. </title> <booktitle> In Proc. USENIX Mach Workshop, </booktitle> <pages> pages 73-82, </pages> <year> 1993. </year>
Reference-contexts: The RAP implementation separates policy from mechanism: CPU scheduling mechanism is built into the kernel while admission control and adaptation mechanisms are implemented by the RAP server in the user space (similar to microkernel approaches <ref> [17] </ref>). All processes communicate with the RAP server using the AQUA's negotiation library. The RAP adaptation library and the server share RAP kernel data structures and information on execution statistics using shared memory.
Reference: [18] <author> R. Yavatkar and K. Lakshman. </author> <title> A CPU Scheduling Algorithm for Continuous Media Applications. </title> <booktitle> In Proc. 5th Intl. NOSSDAV Workshop, </booktitle> <address> Durham, New Hampshire, </address> <pages> pages 223-226, </pages> <month> April </month> <year> 1995. </year>
Reference: [19] <author> R. Yavatkar, M. Manoharan, and K. Lakshman. </author> <title> QoS support for TCP/UDP and IP over ATM. </title> <type> Technical report, </type> <institution> University of Kentucky, </institution> <month> July </month> <year> 1996. </year>
Reference-contexts: For instance, in a native ATM environment, a separate VC with appropriate QoS is established for a TCP connection in response to a setsockopt request 1 . The details of our implementation and results of a performance evaluation are presented elsewhere <ref> [19] </ref>. 6 Dynamic QoS Renegotiation for persistent HTTP connections HTTP makes inefficient use of network resources by creating a new TCP connection for each request [13] and modifications to HTTP have been proposed to transport multiple requests over a persistent HTTP connection.
References-found: 19

