URL: http://www.cs.chalmers.se/pub/cs-reports/techreports/TR-68.ps.Z
Refering-URL: http://www.cs.chalmers.se/pub/cs-reports/techreports/
Root-URL: 
Email: sydow@cs.chalmers.se  
Title: A machine-assisted proof of the fundamental theorem of arithmetic  
Author: Bjorn von Sydow 
Date: June 5, 1992  
Address: S-412 96 Goteborg, Sweden  
Affiliation: Dept. of Computer Sciences Chalmers University of Technology  
Abstract: This paper describes a formal proof of the fundamental theorem of arithmetic. The theorem was formalized in Martin-Lof's monomorphic set theory and the proof was checked by the ALF system.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Augustsson, T. Coquand, B. Nordstrom. </author> <title> A short description of Another Logical Framework. </title> <booktitle> Proceedings of the First workshop on Logical Frameworks, </booktitle> <address> pp.39-42. </address>
Reference-contexts: I would not be surprised if proofs have been developed also using other systems, but I am unaware of that. This paper presents another machine-assisted proof of the very same theorem. The proof was developed using the ALF system <ref> [1] </ref>. This is an implementation of a logical framework where it is possible to represent theories like Martin-Lof's set theory, which is the setting of the proofs presented here. In addition, ALF provides 1 a nice window interface, which makes the user's task much easier and more fun.
Reference: [2] <author> Robert S. Boyer, J. Strother Moore. </author> <title> A Computational logic, </title> <publisher> Academic Press, </publisher> <year> 1979. </year>
Reference-contexts: This makes the theorem also an interesting challenge for mechanical theorem provers and proof checkers. I know of at least two published formal, machine-checked proofs. The fundamental theorem of arithmetic was the foremost achievement of the Boyer-Moore theorem prover at the time of the publication of <ref> [2] </ref> and the last chapter of the book is devoted to a description of the proof. (Since then, the Boyer-Moore system has been used to prove far more difficult results.) This theorem is also the main example given in the reference manual for PL/CV2 [3] and a forty page appendix is
Reference: [3] <author> R.L.Constable, S.D. Johnson, </author> <title> C.D. Eichenlaub. An Introduction to the PL/CV2 Programming Logic, </title> <publisher> Springer, </publisher> <year> 1982. </year>
Reference-contexts: the time of the publication of [2] and the last chapter of the book is devoted to a description of the proof. (Since then, the Boyer-Moore system has been used to prove far more difficult results.) This theorem is also the main example given in the reference manual for PL/CV2 <ref> [3] </ref> and a forty page appendix is devoted to a listing of the programs that compute the proof. I would not be surprised if proofs have been developed also using other systems, but I am unaware of that. This paper presents another machine-assisted proof of the very same theorem.
Reference: [4] <author> P. Dybjer. </author> <title> An Inversion Principle for Martin-Lof's Type Theory . Proceedings of the Workshop on Programming Logic, </title> <institution> pp.177-190, Chalmers University of Technology 1989. </institution>
Reference-contexts: In particular, one will want to be able to reason by induction on elements of P ermutation in order to prove e.g. that two ordered permutations are identical. The definition of P ermutation does indeed fall inside recently proposed schemas <ref> [4] </ref> for which a structural induction 13 principle follows by inversion. A problem seems to be the use of the concatenation operator @ in the inductive clause, which gives non-constructor patterns involving @ in the equality rules.
Reference: [5] <author> B. Nordstrom, K. Petersson, J. Smith. </author> <title> Programming in Martin-Lof 's Type Theory, </title> <publisher> Oxford University Press, </publisher> <year> 1990. </year> <month> 16 </month>
Reference-contexts: In particular, Thierry Coquand gave helpful comments. I also benefitted from an earlier partial formalization in ALF by Karlis Cerans. 2 The logic and the proof checker The proof was developed using Martin-Lof's monomorphic set theory as presented in <ref> [5] </ref>, using the propositions as sets paradigm. I will not go into detail of the type system of ALF, but it enables the user to introduce typed constants and equalities representing all the standard sets of [5]; it turns out that most of them are needed in the proof. <p> proof checker The proof was developed using Martin-Lof's monomorphic set theory as presented in <ref> [5] </ref>, using the propositions as sets paradigm. I will not go into detail of the type system of ALF, but it enables the user to introduce typed constants and equalities representing all the standard sets of [5]; it turns out that most of them are needed in the proof. In addition, the following primitive constants were used.
References-found: 5

