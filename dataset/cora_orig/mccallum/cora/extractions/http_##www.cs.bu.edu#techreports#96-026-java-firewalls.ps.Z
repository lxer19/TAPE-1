URL: http://www.cs.bu.edu/techreports/96-026-java-firewalls.ps.Z
Refering-URL: http://www.rstcorp.com/javasecurity/links.html
Root-URL: 
Email: dm@cs.bu.edu  sraj@bellcore.com  rubin@bellcore.com  
Title: Blocking Java Applets at the Firewall  
Author: David M. Martin Jr. Sivaramakrishnan Rajagopalan Aviel D. Rubin 
Address: 111 Cummington Street Boston, MA 02215  445 South St. Morristown, NJ 07960  445 South St. Morristown, NJ 07960  
Affiliation: Department of Computer Science Boston University  Bellcore  Bellcore  
Abstract: This paper explores the problem of protecting a site on the Internet against hostile external Java applets while allowing trusted internal applets to run. With careful implementation, a site can be made resistant to current Java security weaknesses as well as those yet to be discovered. In addition, we describe a new attack on certain sophisticated firewalls that is most effectively realized as a Java applet. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Avolio and M. Ranum. </author> <title> A network perimeter with secure external access. </title> <booktitle> In Proceedings of the Internet Society Symposium on Network and Distributed System Security, </booktitle> <year> 1994. </year>
Reference-contexts: Section 6 briefly describes the authors' experimental implementation of a Java-blocking firewall. 2. Firewall Design A firewall is an intentional bottleneck between two networks designed to prohibit certain types of internetwork communication such as login attempts and network file system access <ref> [6, 5, 1, 3, 10, 15, 16, 20] </ref>. The firewall hardware typically consists of one or more computers, routers, or special-purpose machines. <p> While strong authentication is often required for inbound FTP connections, some designers reason that since inside users are already authenticated, no separate authentication should be required for outbound connections. See <ref> [1] </ref> for an example of a high-security environment in which this reasoning was used. (Note that this paper predates Java-enabled browsers.) Currently susceptible firewalls can be strengthened by modifying them to ignore PORT commands that announce transfers to any well-known ports [18] (including ports less than 1024, the so-called privileged ports),
Reference: [2] <author> S. </author> <title> Bellovin. </title> <type> Personal communication. </type>
Reference-contexts: See Figures 2 and 3. The applet is written in perfectly legal Java, and the server is a simple Perl script. Our applet can bypass susceptible firewalls to penetrate any TCP port on the client. 3.4. Discussion of the Attack This attack has been independently discovered by other researchers <ref> [2, 8] </ref> and was alluded to in section 5.1 of [8]. Indeed, the fundamental weakness being exploited in the attackFTP's use of inbound TCP connections for receiving fileshas long been recognized as a special problem for firewalls [6, 5, 3]. <p> If the FTP proxy is not transparent, then the FTP clients on the local hosts will have to be modified (or the users retrained to use the existing clients in a different way) so that communication with the proxy is possible. 3.6. Variants of the Attack Bellovin <ref> [2] </ref> points out that the attack may even be possible without the use of Java.
Reference: [3] <author> S. Bellovin. </author> <note> Firewall-friendly FTP, 1994. RFC 1579. </note>
Reference-contexts: Section 6 briefly describes the authors' experimental implementation of a Java-blocking firewall. 2. Firewall Design A firewall is an intentional bottleneck between two networks designed to prohibit certain types of internetwork communication such as login attempts and network file system access <ref> [6, 5, 1, 3, 10, 15, 16, 20] </ref>. The firewall hardware typically consists of one or more computers, routers, or special-purpose machines. <p> Indeed, the fundamental weakness being exploited in the attackFTP's use of inbound TCP connections for receiving fileshas long been recognized as a special problem for firewalls <ref> [6, 5, 3] </ref>. Before the advent of portable executable formats, every process running inside the firewall was seen to be authenticated (albeit weakly) as an insider, so permitting unrestricted outbound FTP didn't conflict with the security policy stating that which is not explicitly permitted is forbidden. <p> Of course the firewall must be also made aware of any sensitive local applications listening on non-well-known ports. Another method of decreasing vulnerability is to allow only passive mode FTP across the packet filter <ref> [17, 3] </ref>.
Reference: [4] <author> T. Berners-Lee, R. Fielding, and H. Frystyk. </author> <title> Hypertext transfer protocol, </title> <note> 1996. RFC 1945. </note>
Reference-contexts: That is, the browser trusts that the proxy did what it was supposed to do. See <ref> [4] </ref> for details on proxying in HTTP/1.0. Our attack fails when explicit proxying is used, because the SecurityManager prevents the applet from opening a TCP connection to any host other than evil.com, but the site's packet filter prevents the browser from directly connecting to that host. <p> But at least one Web browser lies about its identity on its User-agent: line in order to receive special treatment from servers [9]! Part 2 can be difficult as well. HTTP version 1.0 servers identify the type of their transmissions using a Content-encoding: header line <ref> [4] </ref>. However, HTTP 0.9, FTP, and gopher servers simply deliver the file, leaving the browser to decide how to interpret the transmission. When the transfer protocol does not identify the file type, browsers examine the extension of the requested file name in order to determine a type. <p> For instance, the returned page might include a link to http://www.cern.ch/; this would have to be written as http://firewall.xxx.com/www.cern.ch/ to be useful to the client application. HTTP version 1.0 <ref> [4] </ref> defined a way for client programs to knowingly communicate with a proxy, making the above user adjustment and link rewriting unnecessary; most modern browsers now support HTTP 1.0. Http-gw proxies HTTP 0.9, HTTP 1.0, FTP, and gopher, all with URL rewriting as required by relevant protocols.
Reference: [5] <author> D. B. Chapman and E. </author> <title> Zwicky. Building Internet Firewalls. </title> <publisher> O'Reilly & Associates Inc., </publisher> <year> 1995. </year>
Reference-contexts: Section 6 briefly describes the authors' experimental implementation of a Java-blocking firewall. 2. Firewall Design A firewall is an intentional bottleneck between two networks designed to prohibit certain types of internetwork communication such as login attempts and network file system access <ref> [6, 5, 1, 3, 10, 15, 16, 20] </ref>. The firewall hardware typically consists of one or more computers, routers, or special-purpose machines. <p> The particulars of the firewall's network connectivity, such as screened host versus screened subnet architecture <ref> [5] </ref>, precise location of the decision-making host, etc., are not crucial to the line of reasoning we wish to pursue, so we leave these details unspecified. <p> Indeed, the fundamental weakness being exploited in the attackFTP's use of inbound TCP connections for receiving fileshas long been recognized as a special problem for firewalls <ref> [6, 5, 3] </ref>. Before the advent of portable executable formats, every process running inside the firewall was seen to be authenticated (albeit weakly) as an insider, so permitting unrestricted outbound FTP didn't conflict with the security policy stating that which is not explicitly permitted is forbidden.
Reference: [6] <author> W. Cheswick and S. Bellovin. </author> <title> Firewalls and Internet Security. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Section 6 briefly describes the authors' experimental implementation of a Java-blocking firewall. 2. Firewall Design A firewall is an intentional bottleneck between two networks designed to prohibit certain types of internetwork communication such as login attempts and network file system access <ref> [6, 5, 1, 3, 10, 15, 16, 20] </ref>. The firewall hardware typically consists of one or more computers, routers, or special-purpose machines. <p> Indeed, the fundamental weakness being exploited in the attackFTP's use of inbound TCP connections for receiving fileshas long been recognized as a special problem for firewalls <ref> [6, 5, 3] </ref>. Before the advent of portable executable formats, every process running inside the firewall was seen to be authenticated (albeit weakly) as an insider, so permitting unrestricted outbound FTP didn't conflict with the security policy stating that which is not explicitly permitted is forbidden.
Reference: [7] <author> C. Claunch. </author> <title> Java, JavaScript and ActiveX Screening Modification, </title> <note> 1996. Available at http://www.hdshq.com/ fixes/fwtk/. </note>
Reference-contexts: In this paper, we discuss a compromise. We describe various techniques to block Java applets at a site's firewall so that internal applications can run Java in their browsers, but untrusted applets from the outside cannot penetrate. These techniques are already partially available in the public domain <ref> [7] </ref>, and commercial firewall developers are rapidly releasing products that offer the techniques in various combinations. Section 2 contains a review of basic firewall concepts. Section 3 describes an applet attack on certain firewalls. <p> When rewriting the enabling document, the firewall can insert appropriate HTML text explaining that an applet has been blocked. Claunch <ref> [7] </ref> has extended Trusted Information Systems' free firewall toolkit [12] with this strategy. This strategy works well in many situations and does prevent most ordinary applets from reaching a victim host. <p> Implementation We have extended Claunch's &lt;applet&gt;-blocker <ref> [7] </ref> to block CA FE BA BE as well. This proxy was able to block every method we know of passing an applet through the firewall for immediate execution in Netscape versions that were then available.
Reference: [8] <author> D. Dean, E. Felten, and D. Wallach. </author> <title> Java Security: From HotJava to Netscape and Beyond. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <year> 1996. </year>
Reference-contexts: It is inevitable that this trend will not only continue, but that the acceptance and use of Java will grow. In spite of the many security concerns about using Java within browsers <ref> [8, 11] </ref>, the momentum that has resulted from the convenience and functionality of downloadable executables has taken the Internet by storm. 1 Copyright (c) 1997 Institute of Electrical and Electronics Engineers. Reprinted from The Proceedings of the 1997 Symposium on Network and Distributed Systems Security. <p> See Figures 2 and 3. The applet is written in perfectly legal Java, and the server is a simple Perl script. Our applet can bypass susceptible firewalls to penetrate any TCP port on the client. 3.4. Discussion of the Attack This attack has been independently discovered by other researchers <ref> [2, 8] </ref> and was alluded to in section 5.1 of [8]. Indeed, the fundamental weakness being exploited in the attackFTP's use of inbound TCP connections for receiving fileshas long been recognized as a special problem for firewalls [6, 5, 3]. <p> Our applet can bypass susceptible firewalls to penetrate any TCP port on the client. 3.4. Discussion of the Attack This attack has been independently discovered by other researchers [2, 8] and was alluded to in section 5.1 of <ref> [8] </ref>. Indeed, the fundamental weakness being exploited in the attackFTP's use of inbound TCP connections for receiving fileshas long been recognized as a special problem for firewalls [6, 5, 3]. <p> In each case we assume that the attacker's goal is to get a Java applet running on the victim's host, where the applet can then exploit existing Java bugs <ref> [8, 11] </ref> or firewall weaknesses to mount a more serious attack.
Reference: [9] <author> E. Felten. </author> <type> Personal communication. </type>
Reference-contexts: Even worse, supporting &lt;applet&gt; tag blocking for multiple browser types means detecting the kind of browser that is requesting a transfer. But at least one Web browser lies about its identity on its User-agent: line in order to receive special treatment from servers <ref> [9] </ref>! Part 2 can be difficult as well. HTTP version 1.0 servers identify the type of their transmissions using a Content-encoding: header line [4]. However, HTTP 0.9, FTP, and gopher servers simply deliver the file, leaving the browser to decide how to interpret the transmission.
Reference: [10] <author> R. Ganesan. Bafirewall: </author> <title> A modern design. </title> <booktitle> In Proceedings of the Internet Society Symposium on Network and Distributed System Security, </booktitle> <year> 1994. </year>
Reference-contexts: Section 6 briefly describes the authors' experimental implementation of a Java-blocking firewall. 2. Firewall Design A firewall is an intentional bottleneck between two networks designed to prohibit certain types of internetwork communication such as login attempts and network file system access <ref> [6, 5, 1, 3, 10, 15, 16, 20] </ref>. The firewall hardware typically consists of one or more computers, routers, or special-purpose machines.
Reference: [11] <author> D. Hopwood. </author> <title> Security bugs in Java. </title> <note> Available at http:// ferret.lmh.ox.ac.uk/~david/java/. </note>
Reference-contexts: It is inevitable that this trend will not only continue, but that the acceptance and use of Java will grow. In spite of the many security concerns about using Java within browsers <ref> [8, 11] </ref>, the momentum that has resulted from the convenience and functionality of downloadable executables has taken the Internet by storm. 1 Copyright (c) 1997 Institute of Electrical and Electronics Engineers. Reprinted from The Proceedings of the 1997 Symposium on Network and Distributed Systems Security. <p> In each case we assume that the attacker's goal is to get a Java applet running on the victim's host, where the applet can then exploit existing Java bugs <ref> [8, 11] </ref> or firewall weaknesses to mount a more serious attack.
Reference: [12] <institution> Http-gw, a gateway for HTTP. Part of the fwtk firewall toolkit by Trusted Information Systems Inc. </institution> <note> Available at http://www.tis.com. </note>
Reference-contexts: When rewriting the enabling document, the firewall can insert appropriate HTML text explaining that an applet has been blocked. Claunch [7] has extended Trusted Information Systems' free firewall toolkit <ref> [12] </ref> with this strategy. This strategy works well in many situations and does prevent most ordinary applets from reaching a victim host. <p> Our implementation does not look for Java class files hidden in Zip archives, but it could be extended to do so. The base program for both blocking strategies, http-gw (HTTP Gateway), was made available by Trusted Information Systems in 1994 <ref> [12] </ref>. It was originally written so that 3 Andrew File System, a product of Transarc Corp. 9 existing client applications could use it without requiring modification, although the user would have to use the applications differently.
Reference: [13] <institution> The Java Virtual Machine Specification Version 1:0 (beta). </institution> <note> Available at http://java.sun.com/doc/ language vm specification.html. </note>
Reference-contexts: There is no second line of defense for these formats; if they are to be blocked, they must be blocked in the enabling document. 5.3. Blocking CA FE BA BE As seen in Figure 5 and required by the Java Virtual Machine Specification <ref> [13] </ref>, all Java class files begin with the 4-byte hex signature CA,FE,BA,BE. This immediately suggests an applet-blocking strategy: prevent all inbound files beginning with the CA FE BA BE signature from crossing the firewall. By proxying HTTP, FTP, and gopher, such transfers can be detected and blocked. <p> This strategy once enjoyed most of the advantages of the CA FE BA BE-blocker, even though there was never any requirement in the Java Virtual Machine Specification <ref> [13] </ref> that class file names have the suffix .class. Still, we did not find a way to convince versions of Netscape earlier than 3.0 beta 7 to request a class file name that is not so named. Things have changed.
Reference: [14] <author> E. Messmer. </author> <title> Corporations to pave streets with Java gold? Network World, </title> <address> June 10, </address> <year> 1996. </year>
Reference-contexts: While Java presents security concerns to users who download applets from the Internet, it is nonetheless very useful as a programming language. Java applets are being developed and deployed for internal use in corporate and other networks at a rapid pace <ref> [14] </ref>. There are many reasons why people want to run Java within their protected network. Java is platform independent, so multi-platform demos can be built with relative ease.
Reference: [15] <author> J. Mogul. </author> <title> Simple and flexible datagram access controls for Unix-based gateways. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <year> 1989. </year>
Reference-contexts: Section 6 briefly describes the authors' experimental implementation of a Java-blocking firewall. 2. Firewall Design A firewall is an intentional bottleneck between two networks designed to prohibit certain types of internetwork communication such as login attempts and network file system access <ref> [6, 5, 1, 3, 10, 15, 16, 20] </ref>. The firewall hardware typically consists of one or more computers, routers, or special-purpose machines.
Reference: [16] <author> R. Ranum. </author> <title> A network firewall. </title> <booktitle> In Proc. World Conference on System Administration and Security, </booktitle> <year> 1992. </year>
Reference-contexts: Section 6 briefly describes the authors' experimental implementation of a Java-blocking firewall. 2. Firewall Design A firewall is an intentional bottleneck between two networks designed to prohibit certain types of internetwork communication such as login attempts and network file system access <ref> [6, 5, 1, 3, 10, 15, 16, 20] </ref>. The firewall hardware typically consists of one or more computers, routers, or special-purpose machines.
Reference: [17] <author> J. Reynolds and J. Postel. </author> <title> File transfer protocol (ftp), 1985. </title> <type> RFC 959. </type>
Reference-contexts: FTP and PORT To explain the attack, we first review how FTP ordinarily works <ref> [17] </ref>. A local user connects to a remote FTP server (port 21) and is authenticated, say as the anonymous user. To retrieve the file /file.txt, the user's FTP client first chooses an arbitrary TCP port where it will wait for the file to arrive. <p> Of course the firewall must be also made aware of any sensitive local applications listening on non-well-known ports. Another method of decreasing vulnerability is to allow only passive mode FTP across the packet filter <ref> [17, 3] </ref>.
Reference: [18] <author> J. Reynolds and J. Postel. </author> <title> Assigned numbers, 1994. </title> <type> RFC 1700. </type>
Reference-contexts: See [1] for an example of a high-security environment in which this reasoning was used. (Note that this paper predates Java-enabled browsers.) Currently susceptible firewalls can be strengthened by modifying them to ignore PORT commands that announce transfers to any well-known ports <ref> [18] </ref> (including ports less than 1024, the so-called privileged ports), at the risk of colliding with FTP sessions that innocently happen to choose one of these ports for a file transfer. <p> One social-engineering solution is to use the packet filter to prevent outbound connections to port 80, the official <ref> [18] </ref> and most commonly used HTTP port, thus rendering most Web sites inaccessible. Users will soon seek assistance, at which point the administrator can configure the appropriate proxies in their browsers.
Reference: [19] <author> C. Stoll. </author> <title> The Cuckoo's Egg. </title> <publisher> Doubleday, </publisher> <year> 1989. </year>
Reference-contexts: In fact, detecting CA FE BA BE after the &lt;applet&gt;-blocker failed is an excellent sign that someone is trying very hard to sneak in an applet, a condition conceivably worth interrupting a leisurely shower <ref> [19] </ref>. 5.4. Blocking by Requested Filename Another commonly-suggested strategy is to reject all browser requests via HTTP, FTP, and gopher for files with names ending in .class.
Reference: [20] <author> W. Treese and A. Wolman. </author> <title> X through the firewall, and other application relays. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <year> 1993. </year> <institution> Internet RFCs are published by the USC Information Sci ences Institute at Marina Del Rey, CA, </institution> <note> and can be obtained from http://www.isi.edu/publications.html. 11 </note>
Reference-contexts: Section 6 briefly describes the authors' experimental implementation of a Java-blocking firewall. 2. Firewall Design A firewall is an intentional bottleneck between two networks designed to prohibit certain types of internetwork communication such as login attempts and network file system access <ref> [6, 5, 1, 3, 10, 15, 16, 20] </ref>. The firewall hardware typically consists of one or more computers, routers, or special-purpose machines.
References-found: 20

