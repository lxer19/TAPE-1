URL: http://pertsserver.cs.uiuc.edu/papers/HuLH96.ps
Refering-URL: http://pertsserver.cs.uiuc.edu/papers/
Root-URL: http://www.cs.uiuc.edu
Title: A Method for Bounding the Effect of DMA I/O Interference on Program Execution Time  
Author: Tai-Yi Huang, Jane W.-S. Liu, and David Hull 
Keyword: worst-case execution time, cycle-stealing DMA I/O, hard-real-time systems  
Address: 1304 W Springfield Ave. Urbana, IL 61801, USA  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  
Note: Submitted to Real-Time Systems Symposium, Washington, D. C.,  
Email: fthuang, janeliu, hullg@cs.uiuc.edu  
Phone: (217) 244-0432  
Date: December 1996  May 6, 1996  
Abstract: A DMA controller that operates in cycle-stealing mode transfers data by "stealing" bus cycles from an executing program. This cycle stealing operation retards the progress of the executing program and extends its execution time. In this paper we first present a method that bounds the worst-case execution time of a program executing concurrently with a cycle-stealing DMA I/O operation in the simple case where the execution time of each machine instruction is fixed. We next extend this method to deal with the case of instruction-cache architectures. We demonstrate the effectiveness of our methods by the results of simulations of several programs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Rukmin Prasanna Amerasinghe. </author> <title> A comprehensive compiler based timing analysis tool for real time software. </title> <type> Master's thesis, </type> <institution> The University of Texas at Austin, </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: We present our experimental results in Section 6. Finally, Section 7 concludes the paper and discusses future work. 2 Related Work All previous studies on bounding WCET of programs assume that the iteration count of each loop structure in the program being analyzed is bounded <ref> [1, 2, 5, 11, 14-16] </ref>. We also make this assumption here. Both methods described in this paper use the integer linear programming formulation developed by Li and Malik [5].
Reference: [2] <author> R. Gupta and P. Gopinath. </author> <title> Correlation analysis techniques for refining execution time estimates of real-time applications. </title> <booktitle> In Proceedings of the IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <pages> pages 54-58, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: This knowledge enables the designers to analyze the schedulability of each task of the system [4, 8, 9]. For this reason, the problem of bounding the WCET of a program has received a great deal of attention in recent years <ref> [2, 5, 11, 15] </ref>. This paper addresses the problem of how to bound the WCET of a program when it executes concurrently with a cycle-stealing DMA I/O operation. A DMA controller (DMAC) transfers data between the main memory and I/O devices with minimal CPU involvement. <p> We present our experimental results in Section 6. Finally, Section 7 concludes the paper and discusses future work. 2 Related Work All previous studies on bounding WCET of programs assume that the iteration count of each loop structure in the program being analyzed is bounded <ref> [1, 2, 5, 11, 14-16] </ref>. We also make this assumption here. Both methods described in this paper use the integer linear programming formulation developed by Li and Malik [5].
Reference: [3] <author> Tai-Yi Huang and Jane W.-S. Liu. </author> <title> Predicting the worst-case execution time of the concurrent execution of instructions and cycle-stealing DMA I/O operations. </title> <booktitle> In ACM SIGPLAN Workshop on Languages, Compilers and Tools for Real-Time Systems, </booktitle> <pages> pages 1-6, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: In a previous paper, we analyzed the effect of concurrently executing cycle-stealing DMA I/O on the WCETs of machine instructions on such an architecture <ref> [3] </ref>. Our method incorporates this analysis with the implicit path-enumeration method developed by Li and Malik [5], which bounds the WCET of a program when it executes alone. We then consider the case where there is an on-chip instruction cache.
Reference: [4] <author> J. Lehoczky, L. Sha, and Y. Ding. </author> <title> The rate monotonic scheduling algorithm: Exact characterization and average case behavior. </title> <booktitle> In Proceedings of 10th IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 166-171, </pages> <year> 1989. </year>
Reference-contexts: In such a system, it is essential for the worse-case execution time (WCET) of each program to be known in advance. This knowledge enables the designers to analyze the schedulability of each task of the system <ref> [4, 8, 9] </ref>. For this reason, the problem of bounding the WCET of a program has received a great deal of attention in recent years [2, 5, 11, 15].
Reference: [5] <author> Yau-Tsun Steven Li and Sharad Malik. </author> <title> Performance analysis of embedded software using implicit path enumeration. </title> <booktitle> In Proceedings of the 32nd ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 456-461, </pages> <month> June </month> <year> 1995. </year> <month> 20 </month>
Reference-contexts: This knowledge enables the designers to analyze the schedulability of each task of the system [4, 8, 9]. For this reason, the problem of bounding the WCET of a program has received a great deal of attention in recent years <ref> [2, 5, 11, 15] </ref>. This paper addresses the problem of how to bound the WCET of a program when it executes concurrently with a cycle-stealing DMA I/O operation. A DMA controller (DMAC) transfers data between the main memory and I/O devices with minimal CPU involvement. <p> In a previous paper, we analyzed the effect of concurrently executing cycle-stealing DMA I/O on the WCETs of machine instructions on such an architecture [3]. Our method incorporates this analysis with the implicit path-enumeration method developed by Li and Malik <ref> [5] </ref>, which bounds the WCET of a program when it executes alone. We then consider the case where there is an on-chip instruction cache. <p> We present our experimental results in Section 6. Finally, Section 7 concludes the paper and discusses future work. 2 Related Work All previous studies on bounding WCET of programs assume that the iteration count of each loop structure in the program being analyzed is bounded <ref> [1, 2, 5, 11, 14-16] </ref>. We also make this assumption here. Both methods described in this paper use the integer linear programming formulation developed by Li and Malik [5]. <p> We also make this assumption here. Both methods described in this paper use the integer linear programming formulation developed by Li and Malik <ref> [5] </ref>. When a program executes on a simple architecture, the execution time c i of a basic block B i (i.e., a straight-line sequence of instructions) is equal to the sum of the execution times of all instructions in the block. Li and Malik [5] observed that the execution time of <p> formulation developed by Li and Malik <ref> [5] </ref>. When a program executes on a simple architecture, the execution time c i of a basic block B i (i.e., a straight-line sequence of instructions) is equal to the sum of the execution times of all instructions in the block. Li and Malik [5] observed that the execution time of a program can be computed by summing the products of the execution counts of the basic blocks in the program and their corresponding execution times. <p> Lim et al. [7] extended the method developed by Park and Shaw [14] to account for the effect of caching and pipelining. Li, Malik, and Wolfe [6] extended their implicit path-enumeration method <ref> [5] </ref> to bound the WCETs of programs on direct-mapped instruction-cache architectures. This method partitions each basic block into l-blocks. An l-block is a sequence of contiguous instructions within the same basic block that are mapped to the same cache line. <p> We denote this value by W (I). We can use this new instruction timing information for every instruction with the integer linear programming formulation developed by Li and Malik <ref> [5] </ref> to bound the WCET of a program executing concurrently with DMA I/O.
Reference: [6] <author> Yau-Tsun Steven Li, Sharad Malik, and Andrew Wolfe. </author> <title> Efficient microarchitecture modeling and path analysis for real-time software. </title> <booktitle> In Proceedings of the IEEE Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: Lim et al. [7] extended the method developed by Park and Shaw [14] to account for the effect of caching and pipelining. Li, Malik, and Wolfe <ref> [6] </ref> extended their implicit path-enumeration method [5] to bound the WCETs of programs on direct-mapped instruction-cache architectures. This method partitions each basic block into l-blocks. An l-block is a sequence of contiguous instructions within the same basic block that are mapped to the same cache line. <p> In contrast, the cache-miss instruction cycle begins with a B-cycle to fetch the instruction and the subsequent instructions in the l-block from the main memory. We extend the method developed by Li, Malik, and Wolfe <ref> [6] </ref>, which we discussed in Section 2, to bound the WCET of a program executing concurrently with DMA I/O on an instruction-cache architecture.
Reference: [7] <author> Sung-Soo Lim, Young Hyun Bae, Gyu Tae Jang, Byung-Do Rhee, Sang Jyul Min, Chang Yun Park, Heonshik Shin, Kunsoo Park, and Chong Sang Kim. </author> <title> An accurate worst case timing analysis technique for RISC processor. </title> <booktitle> In Proceedinngs of Real-Time Systems Symposium, </booktitle> <pages> pages 97-108. </pages> <publisher> IEEE, </publisher> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: To bound the WCET of a program to be executed on such a machine, Mueller, Whalley, and Harmon [12, 13] used control-flow information to identify potential cache conflicts in a direct-mapped instruction cache and to estimate the worst-case cache performance in a non-preemptive environment. Lim et al. <ref> [7] </ref> extended the method developed by Park and Shaw [14] to account for the effect of caching and pipelining. Li, Malik, and Wolfe [6] extended their implicit path-enumeration method [5] to bound the WCETs of programs on direct-mapped instruction-cache architectures. This method partitions each basic block into l-blocks.
Reference: [8] <author> C. L. Liu and J. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard real-time environment. </title> <journal> Journal of the ACM, </journal> <volume> 10(1) </volume> <pages> 46-61, </pages> <year> 1973. </year>
Reference-contexts: In such a system, it is essential for the worse-case execution time (WCET) of each program to be known in advance. This knowledge enables the designers to analyze the schedulability of each task of the system <ref> [4, 8, 9] </ref>. For this reason, the problem of bounding the WCET of a program has received a great deal of attention in recent years [2, 5, 11, 15].
Reference: [9] <author> J. W. S. Liu, J. L. Redondo, Z. Deng, T. S. Tia, R. Bettati, A. Silberman, M. Storch, R. Ha, and W. K. Shih. PERTS: </author> <title> A prototyping environment for real-time systems. </title> <booktitle> In Proceedings of the 14th IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 184-188, </pages> <address> Raleigh-Durham, North Carolina, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: In such a system, it is essential for the worse-case execution time (WCET) of each program to be known in advance. This knowledge enables the designers to analyze the schedulability of each task of the system <ref> [4, 8, 9] </ref>. For this reason, the problem of bounding the WCET of a program has received a great deal of attention in recent years [2, 5, 11, 15].
Reference: [10] <institution> MC68030 Enhanced 32-bit Microprocessor: </institution> <note> User's Manual. </note> <institution> Motorola, </institution> <year> 1987. </year>
Reference-contexts: We obtained the timing information of each instruction from the Motorola 68030 manual <ref> [10] </ref>. The clock frequency of the microprocessor was 20 MHz, and the period of a clock cycle T c was 50 ns. A 0-wait memory was used, and each DMA transfer took two clock cycles. Hence, we set DT to 100 ns. Finally, BMT was 5 ns.
Reference: [11] <author> Aloysius K. Mok, Prasanna Amerasinghe, Moyer Chen, and Kamtorn Tantisirivat. </author> <title> Evaluating tight execution time bounds of programs by annotations. </title> <booktitle> In Proceedings of the Sixth IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <pages> pages 272-279, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: This knowledge enables the designers to analyze the schedulability of each task of the system [4, 8, 9]. For this reason, the problem of bounding the WCET of a program has received a great deal of attention in recent years <ref> [2, 5, 11, 15] </ref>. This paper addresses the problem of how to bound the WCET of a program when it executes concurrently with a cycle-stealing DMA I/O operation. A DMA controller (DMAC) transfers data between the main memory and I/O devices with minimal CPU involvement. <p> We present our experimental results in Section 6. Finally, Section 7 concludes the paper and discusses future work. 2 Related Work All previous studies on bounding WCET of programs assume that the iteration count of each loop structure in the program being analyzed is bounded <ref> [1, 2, 5, 11, 14-16] </ref>. We also make this assumption here. Both methods described in this paper use the integer linear programming formulation developed by Li and Malik [5].
Reference: [12] <author> Frank Mueller. </author> <title> Static Cache Simulation and its Applications. </title> <type> PhD thesis, </type> <institution> Florida State University, Tallahassee, </institution> <address> FL, </address> <month> July </month> <year> 1994. </year>
Reference-contexts: The assumption that the execution time of each instruction is fixed does not hold on an instruction-cache architecture. To bound the WCET of a program to be executed on such a machine, Mueller, Whalley, and Harmon <ref> [12, 13] </ref> used control-flow information to identify potential cache conflicts in a direct-mapped instruction cache and to estimate the worst-case cache performance in a non-preemptive environment. Lim et al. [7] extended the method developed by Park and Shaw [14] to account for the effect of caching and pipelining.
Reference: [13] <author> Frank Mueller, David Whalley, and Marion Harmon. </author> <title> Predicting instruction cache behavior. </title> <booktitle> In ACM SIGPLAN Workshop on Language, Compiler, and Tool Support for Real-Time Systems, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: The assumption that the execution time of each instruction is fixed does not hold on an instruction-cache architecture. To bound the WCET of a program to be executed on such a machine, Mueller, Whalley, and Harmon <ref> [12, 13] </ref> used control-flow information to identify potential cache conflicts in a direct-mapped instruction cache and to estimate the worst-case cache performance in a non-preemptive environment. Lim et al. [7] extended the method developed by Park and Shaw [14] to account for the effect of caching and pipelining.
Reference: [14] <author> Chang Yun Park and Alan C. Shaw. </author> <title> Experiments with a program timing tool based on source-level timing schema. </title> <booktitle> In Proceedings of Real-Time Systems Symposium, </booktitle> <address> Orlando, Florida, </address> <month> March </month> <year> 1990. </year> <note> IEEE. </note>
Reference-contexts: Lim et al. [7] extended the method developed by Park and Shaw <ref> [14] </ref> to account for the effect of caching and pipelining. Li, Malik, and Wolfe [6] extended their implicit path-enumeration method [5] to bound the WCETs of programs on direct-mapped instruction-cache architectures. This method partitions each basic block into l-blocks.
Reference: [15] <author> Chang Yun Park and Alan C. Shaw. </author> <title> Experiments with a program timing tool based on source-level timing schema. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 48-57, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: This knowledge enables the designers to analyze the schedulability of each task of the system [4, 8, 9]. For this reason, the problem of bounding the WCET of a program has received a great deal of attention in recent years <ref> [2, 5, 11, 15] </ref>. This paper addresses the problem of how to bound the WCET of a program when it executes concurrently with a cycle-stealing DMA I/O operation. A DMA controller (DMAC) transfers data between the main memory and I/O devices with minimal CPU involvement.
Reference: [16] <author> P. Puschner and C. Koza. </author> <title> Calculating the maximum execution time of real-time programs. </title> <journal> Journal of Real-Time Systems, </journal> <volume> 1 </volume> <pages> 159-176, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: We compared W with S to see how much DMA I/O slows down the execution of the trace. In addition, we 2 This is the example used in <ref> [16] </ref>. 17 Name % of long W=S W p =S R in % instructions Qsort 1% 1.12 1.37 82% Scheduler 2% 1.13 1.37 82% Gaussian 6% 1.09 1.51 73% Calcenter 6% 1.08 1.55 70% Mtxmul 11% 1.07 1.68 64% Tdsim 15% 1.07 1.72 62% Correlate 17% 1.08 1.75 62% Mtxmul2 22%
Reference: [17] <institution> The VMEbus Specification. Motorola, </institution> <year> 1985. </year> <month> 21 </month>
Reference-contexts: In contrast, during E-cycles, the CPU does not use the bus. In general, there may be several consecutive E-cycles in an instruction cycle. For the sake of concreteness, we assume that bus contention between the CPU and the DMAC is regulated according to the VMEbus <ref> [17] </ref> bus access protocol. This protocol is sufficiently general that our analysis may be easily applied to many other commonly-used bus protocols. To access the bus, a device (e.g., the DMAC) asserts the bus request line.
References-found: 17

