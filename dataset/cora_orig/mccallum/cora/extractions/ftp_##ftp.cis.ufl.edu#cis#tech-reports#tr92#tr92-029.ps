URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr92/tr92-029.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr92-abstracts.html
Root-URL: http://www.cis.ufl.edu
Title: Approximate Analysis of Reader/Writer Queues  
Author: Theodore Johnson 
Keyword: Performance Analysis, Queuing System, Concurrent System, Reader/Writer, Lock Queue.  
Date: September 3, 1992  
Address: Gainesville, Fl 32611-2024  
Affiliation: Dept. of CIS University of Florida  
Abstract: We analyze the performance of queues that serve readers and writers. Readers are served concurrently, while writers require exclusive service. We approximately analyze a first-come-first-serve (FCFS) reader/writer queue, and derive simple formulae for computing waiting times and capacity under the assumption of Poisson arrivals and exponential service. We extend the analysis to handle a one-writer queue, and a queue that includes write-intention locks. The simple analyses that we present can be used as rules-of-thumb for designing concurrent systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Baccelli, C.A. Courcoubetis, and M.I. Reiman. </author> <title> Construction of the stationary regime of queues with locking. Stochastic Processes and their Applications, </title> <booktitle> 26 </booktitle> <pages> 257-265, </pages> <year> 1987. </year>
Reference-contexts: This analysis requires an iteration step that involves multiplication of k by k matrices. Courcoubetis et al. <ref> [10, 1] </ref> analyze queuing systems of k queues in which ordinary customers require service from only one queue, while locking customers require service from all queues simultaneously. Thomasian and Nicola [24, 26, 25] use the vacationing server model to study the optimal control of a reader/writer queue.
Reference: [2] <author> F. Baccelli and E.G. Coffman Jr. </author> <title> A data base replication analysis using an M/M/m queue with service interruptions. </title> <journal> SIGMETRICS Performance Evaluation Review, </journal> <volume> 11(4) </volume> <pages> 102-107, 1982-1983. </pages>
Reference-contexts: Coffman et al. [7] analyze a saturated queue in which a write request preempts all current readers. In [8], Coffman, Gelenbe, and Plateau analyze the same queue, except that readers may begin reading a copy of the file as soon as it has been written. Baccelli and Coffman <ref> [2] </ref> analyze a preemptive queue that has Poisson arrivals. Nelson and Iyer [18] analyze a non-preemptive queue in which the job arrivals are Poisson and are processed in FCFS order.
Reference: [3] <author> R. Bayer and M. Schkolnick. </author> <title> Concurrency of operations on B-trees. </title> <journal> Acta Informatica, </journal> <volume> 9 </volume> <pages> 1-21, </pages> <year> 1977. </year> <month> 19 </month>
Reference-contexts: R locks are compatible both with each other and with U locks, but U locks are not compatible with each other. U locks occasionally upgrade to W locks, which are exclusive. The R/U/W queue can model write-intention locks, which are often used for concurrent data structures <ref> [3] </ref> and for multigranularity locking [4]. The model that we develop predicts the expected waiting time for R, W and U locks. In addition, the model can predict the probability that a W lock is in the queue, and determine whether the resource can serve the offered load. <p> The result is that r w , and that writer arrivals are rare. Because of the assumptions, the results of the previous section apply. (The assumptions are safe when the queue is applied to concurrent B-tree algorithms, for example <ref> [3, 11] </ref>). The R locks will be blocked only by a W lock. A U lock may be blocked by a W lock or by another U lock.
Reference: [4] <author> P.A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: U locks occasionally upgrade to W locks, which are exclusive. The R/U/W queue can model write-intention locks, which are often used for concurrent data structures [3] and for multigranularity locking <ref> [4] </ref>. The model that we develop predicts the expected waiting time for R, W and U locks. In addition, the model can predict the probability that a W lock is in the queue, and determine whether the resource can serve the offered load.
Reference: [5] <author> T.J. Bromwich. </author> <title> An Introduction to the Theory of Infinite Series. </title> <publisher> MacMillian and Co., </publisher> <year> 1926. </year>
Reference-contexts: Then, from Corollary 1, E [W w (n)] = 1 P n Combining (17) and Corollary 1, the unconditional distribution of W w is: E [W w ] = e r = r P 1 ( r = r ) k P n In <ref> [5] </ref>, we find the formula: 1 X x n n X 1=i = e x P 1 (1) n1 x n = e x R x = e x G 1 (x) (19) The exponential integral can be algebraically obtained from G 1 (x), so we can't expect to simplify G
Reference: [6] <author> A. Chesnais, E. Gelenbe, and I. Mitrani. </author> <title> On the modeling of parallel access to shared data. </title> <journal> Communications of the ACM, </journal> <volume> 26(3) </volume> <pages> 196-202, </pages> <year> 1983. </year>
Reference-contexts: In addition, the model can predict the probability that a W lock is in the queue, and determine whether the resource can serve the offered load. Several analyses of read and write access to a shared resource have been in the context of database performance <ref> [23, 17, 6] </ref>. For example, Tay [23] handles read-only requests by modifying the formulae for the probability of a lock conflict and assumes that queuing for shared data is rare. The problem of queuing for shared data has been modeled in the context of replicated databases.
Reference: [7] <author> E. Coffman and et al. </author> <title> An analysis of parallel-read sequential-write systems. Performance Evaluation, </title> <booktitle> 1 </booktitle> <pages> 62-69, </pages> <year> 1981. </year>
Reference-contexts: The problem of queuing for shared data has been modeled in the context of replicated databases. It is assumed that there are k copies of a file, and two different copies of a file may be read simultaneously. Coffman et al. <ref> [7] </ref> analyze a saturated queue in which a write request preempts all current readers. In [8], Coffman, Gelenbe, and Plateau analyze the same queue, except that readers may begin reading a copy of the file as soon as it has been written.
Reference: [8] <author> E. Coffman, E. Gelenbe, and B. </author> <title> Plateau. Optimization of the number of copies in a distributed database. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 7(1) </volume> <pages> 78-84, </pages> <year> 1981. </year>
Reference-contexts: It is assumed that there are k copies of a file, and two different copies of a file may be read simultaneously. Coffman et al. [7] analyze a saturated queue in which a write request preempts all current readers. In <ref> [8] </ref>, Coffman, Gelenbe, and Plateau analyze the same queue, except that readers may begin reading a copy of the file as soon as it has been written. Baccelli and Coffman [2] analyze a preemptive queue that has Poisson arrivals.
Reference: [9] <author> C.A. Courcoubetis and M.I. Reiman. </author> <title> Optimal control of a queuing system with simultaneous service requirements. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> AC-32(8):717-727, </volume> <year> 1987. </year>
Reference-contexts: Thomasian and Nicola [24, 26, 25] use the vacationing server model to study the optimal control of a reader/writer queue. Courcoubetis and Reiman <ref> [9] </ref> use a system of k queues with ordinary and locking customers to study the optimal control of a reader/writer queue. 2 Reiman and Wright [20, 19] provide an exact analysis of the stability of the first queueing system described in this paper, permit arbitrary reader and writer service times, and
Reference: [10] <author> C.A. Courcoubetis, M.I. Reiman, and B. Simon. </author> <title> Stability of a queuing system with concurrent service and locking. </title> <journal> SIAM J. Computing, </journal> <volume> 16(1) </volume> <pages> 169-178, </pages> <year> 1987. </year>
Reference-contexts: This analysis requires an iteration step that involves multiplication of k by k matrices. Courcoubetis et al. <ref> [10, 1] </ref> analyze queuing systems of k queues in which ordinary customers require service from only one queue, while locking customers require service from all queues simultaneously. Thomasian and Nicola [24, 26, 25] use the vacationing server model to study the optimal control of a reader/writer queue.
Reference: [11] <author> T. Johnson. </author> <title> The Performance of Concurrent Data Structure Algorithms. </title> <type> PhD thesis, </type> <institution> NYU Dept. of Computer Science, </institution> <year> 1990. </year>
Reference-contexts: This paper has two main contributions. The first contribution is the simple formulae for predicting the capacity and the waiting times of the FCFS R/W queuing system. These formulae can provide simple rules of thumb for designing concurrent systems <ref> [12, 11] </ref>. The second contribution of this paper is the analysis of the one-writer queue and the R/U/W queue. <p> The result is that r w , and that writer arrivals are rare. Because of the assumptions, the results of the previous section apply. (The assumptions are safe when the queue is applied to concurrent B-tree algorithms, for example <ref> [3, 11] </ref>). The R locks will be blocked only by a W lock. A U lock may be blocked by a W lock or by another U lock. <p> We extend the analyses to handle one-writer queues, and write-upgrade locks. We present formulae to predict lock waiting times, and an estimate of the capacity of the shared resource. The locking queues analyzed in this paper are used in many areas, such as concurrent data structures <ref> [11] </ref> and communications channels [15].
Reference: [12] <author> T. Johnson and D. Shasha. </author> <title> A framework for the performance analysis of concurrent B-tree algorithms. </title> <booktitle> In ACM SIGACT/SIGMOD/SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 273-287, </pages> <year> 1990. </year>
Reference-contexts: This paper has two main contributions. The first contribution is the simple formulae for predicting the capacity and the waiting times of the FCFS R/W queuing system. These formulae can provide simple rules of thumb for designing concurrent systems <ref> [12, 11] </ref>. The second contribution of this paper is the analysis of the one-writer queue and the R/U/W queue.
Reference: [13] <author> L. Kleinrock. </author> <title> Queueing Systems, volume 1. </title> <publisher> John Wiley, </publisher> <address> New York, </address> <year> 1975. </year>
Reference-contexts: If we model the aggregate queue as an M/M/1 queue, then we know that the service period distribution (waiting time and service time) is <ref> [13] </ref>: Pr [S (t) t] = 1 e a (1 w )t The probability that the previous writer has not been served in t seconds is 1 S (t), so we have: d Pr [T w t] = K w e w t Using this distribution for T w , we <p> If W locks arrive rarely, the distribution of the number of R locks in the queue will approach a steady-state M=M=1 distribution. If N r is the number of R locks in the queue when a W lock arrives, then, from <ref> [13] </ref>: Pr [N r = k] = k! Let W w (n) be the waiting time for a W lock if n R locks are in the queue when the W lock enters. <p> The R lock will have to wait for the service time of the W lock (1= W ) plus the remaining time to serve the readers ahead of the W lock. This is the renewal time of the W waiting time distribution. From <ref> [13] </ref>, this is given by r 1 = 2m 1 where m 1 is the first moment of the waiting time distribution and m 2 is the second moment. <p> n U + E [W w ] + 1= W ) U + P c (T c Therefore, the utilization of the U lock queue is: U = U = U U + P c (T c If we model the U lock queue as a M/M/1 queue then, from <ref> [13] </ref>, Theorem 4 The expected waiting time for a U lock in the R/U/W queue is E [W U ] = ( U A U )=(1 U ) (30) Since W locks are generated from U locks, the throughput of the R/U/W queue is limited by the service of the U
Reference: [14] <author> C.G. Van Der Laan and N.M. Temme. </author> <title> Calculation of Special Functions: The Gamma Function, the Exponential Integral and Error-like Functions. </title> <publisher> Cenrtum foor Wiskunde en Informatica, </publisher> <year> 1984. </year>
Reference-contexts: Fortunately, both G 1 and G 2 have simple asymptotic representations. The function G 1 (x) is related to the exponential integral by G 1 (x) = ln (x) + fl + E 1 (x) where E 1 (x) is the exponential integral <ref> [14] </ref>, E 1 (x) = x t E 1 has the following asymptotic expansion [14]: E 1 (x) = x where R n (x) = (1) n+1 (n + 1)!x n1 n (x) 0 n (x) 1 If we use the first asymptotic expansion (use R 0 (x)), we can bound <p> The function G 1 (x) is related to the exponential integral by G 1 (x) = ln (x) + fl + E 1 (x) where E 1 (x) is the exponential integral <ref> [14] </ref>, E 1 (x) = x t E 1 has the following asymptotic expansion [14]: E 1 (x) = x where R n (x) = (1) n+1 (n + 1)!x n1 n (x) 0 n (x) 1 If we use the first asymptotic expansion (use R 0 (x)), we can bound E 1 (x) by E 1 (x) e x =x Therefore we can approximate
Reference: [15] <author> Ian Heavens, </author> <title> Spider Systems Ltd. Experiences in fine grain parallelisation of streams-based communications drivers. </title> <booktitle> In OpenForum '92, </booktitle> <address> Utrecht, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: In the variation, which we call the one-writer queue, there is at most one writer in the queue at a time, and the reader arrival rate is much larger than the writer arrival rate. The one-writer queue has many applications (for example, in the analysis of a communications driver <ref> [15] </ref>). We use the one-writer queue to model queues with write-intention locks, or R/U/W queues. In a R/U/W queue, the incoming stream consists of R and U locks. R locks are compatible both with each other and with U locks, but U locks are not compatible with each other. <p> We present formulae to predict lock waiting times, and an estimate of the capacity of the shared resource. The locking queues analyzed in this paper are used in many areas, such as concurrent data structures [11] and communications channels <ref> [15] </ref>.
Reference: [16] <author> R. Mickens. </author> <title> Difference Equations. </title> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, </address> <year> 1987. </year> <month> 20 </month>
Reference: [17] <author> D. Mitre and P.J. Weinberger. </author> <title> Probabilistic models of database locking: Solutions, computational algorithms and asymptotics. </title> <journal> Journal of the ACM, </journal> <volume> 31(4) </volume> <pages> 855-878, </pages> <year> 1984. </year>
Reference-contexts: In addition, the model can predict the probability that a W lock is in the queue, and determine whether the resource can serve the offered load. Several analyses of read and write access to a shared resource have been in the context of database performance <ref> [23, 17, 6] </ref>. For example, Tay [23] handles read-only requests by modifying the formulae for the probability of a lock conflict and assumes that queuing for shared data is rare. The problem of queuing for shared data has been modeled in the context of replicated databases.
Reference: [18] <author> R. Nelson and B. Iyer. </author> <title> Analysis of a replicated database. Performance Evaluation, </title> <booktitle> 5(3) </booktitle> <pages> 133-148, </pages> <year> 1985. </year>
Reference-contexts: In [8], Coffman, Gelenbe, and Plateau analyze the same queue, except that readers may begin reading a copy of the file as soon as it has been written. Baccelli and Coffman [2] analyze a preemptive queue that has Poisson arrivals. Nelson and Iyer <ref> [18] </ref> analyze a non-preemptive queue in which the job arrivals are Poisson and are processed in FCFS order.
Reference: [19] <author> M.I. Reiman and P.E. Wright. </author> <title> The stability and latency of concurrent-x exclusive-y. </title> <note> Submitted to the Journal of the ACM. </note>
Reference-contexts: Thomasian and Nicola [24, 26, 25] use the vacationing server model to study the optimal control of a reader/writer queue. Courcoubetis and Reiman [9] use a system of k queues with ordinary and locking customers to study the optimal control of a reader/writer queue. 2 Reiman and Wright <ref> [20, 19] </ref> provide an exact analysis of the stability of the first queueing system described in this paper, permit arbitrary reader and writer service times, and permit the writer arrival process to be an arbitrary renewal process. <p> At the maximum throughput, w , r , w and r satisfy r = w e r (1= w 1= w ) 1 (15) Proof: Set w = 1 in Theorem 1 and solve for r * We note that this stability condition is the same as that derived in <ref> [20, 19] </ref>. As an application, we can find the maximum throughput of the queue when the proportion of readers to writers is constant.
Reference: [20] <author> M.I. Reiman and P.E. Wright. </author> <title> Performance analysis of concurrent-read exclusive-write. </title> <booktitle> In Proc. ACM Sigmetrics Conference on Measuring and Modeling of COmputer SYstems, </booktitle> <pages> pages 168-177, </pages> <year> 1991. </year>
Reference-contexts: Thomasian and Nicola [24, 26, 25] use the vacationing server model to study the optimal control of a reader/writer queue. Courcoubetis and Reiman [9] use a system of k queues with ordinary and locking customers to study the optimal control of a reader/writer queue. 2 Reiman and Wright <ref> [20, 19] </ref> provide an exact analysis of the stability of the first queueing system described in this paper, permit arbitrary reader and writer service times, and permit the writer arrival process to be an arbitrary renewal process. <p> At the maximum throughput, w , r , w and r satisfy r = w e r (1= w 1= w ) 1 (15) Proof: Set w = 1 in Theorem 1 and solve for r * We note that this stability condition is the same as that derived in <ref> [20, 19] </ref>. As an application, we can find the maximum throughput of the queue when the proportion of readers to writers is constant.
Reference: [21] <author> J. Riordan. </author> <title> Combinatorial Identities. </title> <editor> Robert E. Kreiger, Huntington, </editor> <address> NY, </address> <year> 1979. </year>
Reference-contexts: i=1 Proof: E [S r (n)] = 0 tn r i=1 i1 (1) i1 e i r t dt P n n1 R 1 P n n1 = 1 P n n = 1 P n where the last step is just the application of the combinatorial identity found in <ref> [21] </ref>, page 4. * 5 With these tools, we can calculate the expected time needed to serve all readers in front of a writer, W, if another writer is in the queue when W enters. <p> From <ref> [21] </ref>, the second sum is just H (n) = P n Therefore: g n = g n1 + 1 P n 1 = i=1 1 P i 1 Our problem reduces to finding a simpler form of V (x) = i=1 n! i=1 i j=1 1=j P 1 x n The
Reference: [22] <author> G. Simmons. </author> <title> Differential Equations with Applications and Historical Notes. </title> <publisher> McGraw-Hill, </publisher> <year> 1972. </year>
Reference-contexts: n! n=1 g n n! P 1 n! P 1 n+1 i=1 i x n = 1 P 1 P n 1 x n = e x V (x) satisfies a first-order linear differential equation, so we can apply the formula for the solution of first order linear differential equations <ref> [22] </ref>, dV + P (x)V (x) = Q (x) ) V (x) = e P dx Qe P dx dx + c Since P (x) = 1, R P (x) dx = x.
Reference: [23] <author> Y.C. Tay, R. Suri, and N. Goodman. </author> <title> Locking performance in centralized databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 10(4) </volume> <pages> 415-462, </pages> <year> 1985. </year>
Reference-contexts: In addition, the model can predict the probability that a W lock is in the queue, and determine whether the resource can serve the offered load. Several analyses of read and write access to a shared resource have been in the context of database performance <ref> [23, 17, 6] </ref>. For example, Tay [23] handles read-only requests by modifying the formulae for the probability of a lock conflict and assumes that queuing for shared data is rare. The problem of queuing for shared data has been modeled in the context of replicated databases. <p> Several analyses of read and write access to a shared resource have been in the context of database performance [23, 17, 6]. For example, Tay <ref> [23] </ref> handles read-only requests by modifying the formulae for the probability of a lock conflict and assumes that queuing for shared data is rare. The problem of queuing for shared data has been modeled in the context of replicated databases.
Reference: [24] <author> A. Thomasian and V. Nicola. </author> <title> Analysis of a threshold policy for scheduling readers and writers. </title> <type> Technical Report RC 14252, </type> <institution> IBM Research Division, </institution> <year> 1988. </year>
Reference-contexts: This analysis requires an iteration step that involves multiplication of k by k matrices. Courcoubetis et al. [10, 1] analyze queuing systems of k queues in which ordinary customers require service from only one queue, while locking customers require service from all queues simultaneously. Thomasian and Nicola <ref> [24, 26, 25] </ref> use the vacationing server model to study the optimal control of a reader/writer queue.
Reference: [25] <author> A. Thomasian and V. Nicola. </author> <title> Analysis of a threshold policy for scheduling readers and writers. </title> <booktitle> In ACM SIGMETRICS Conference on Measuring and Modeling of Computer Systems, </booktitle> <year> 1989. </year>
Reference-contexts: This analysis requires an iteration step that involves multiplication of k by k matrices. Courcoubetis et al. [10, 1] analyze queuing systems of k queues in which ordinary customers require service from only one queue, while locking customers require service from all queues simultaneously. Thomasian and Nicola <ref> [24, 26, 25] </ref> use the vacationing server model to study the optimal control of a reader/writer queue.

References-found: 25

