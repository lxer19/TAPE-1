URL: http://www.dkuug.dk/JTC1/SC22/open/n2620/n2620.ps
Refering-URL: http://www.lysator.liu.se/c/index.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Programming languages C language execution library. Annexes summarize aspects of both of them, and enumerate
Note: Clauses are included that detail the C language itself and the contents of the C  Although this International Standard is intended to guide knowledgeable C language programmers as well as implementors of C language translation systems, the document itself is not designed to serve as a tutorial.  
Abstract: This International Standard specifies the form and establishes the interpretation of programs expressed in the programming language C. Its purpose is to promote portability, reliability, maintainability, and efficient execution of C language programs on a variety of computing systems. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> ``The C Reference Manual'' by Dennis M. Ritchie, </author> <title> a version of which was published in The C Programming Language by Brian W. </title> <editor> Kernighan and Dennis M. Ritchie, </editor> <publisher> Prentice-Hall, Inc., </publisher> <year> (1978). </year> <title> Copyright owned by AT&T. 2. 1984 /usr/group Standard by the /usr/group Standards Committee, </title> <address> Santa Clara, California, USA, </address> <month> November </month> <year> 1984. </year>
Reference-contexts: If the value of argc is greater than one, the strings pointed to by argv <ref> [1] </ref> through argv [argc-1] represent the program parameters . <p> provide one extra byte (which may overlap another object in the program) just after the end of the object in order to satisfy the ``one past the last element'' requirements. 86 Language -- -- Working Draft, 1997-11-21, WG14/N794 J11/97-158 - int a [n][m]; p += 1; // p == &a <ref> [1] </ref> n = p - a; // n == 1 12 If array a in the above example is declared to be an array of known constant size, and pointer p is declared to be a pointer to an array of the same know constant size that points to a, the <p> Examples 16 After the declarations: struct s - int n; double d []; -; struct ss - int n; double d <ref> [1] </ref>; -; the three expressions: sizeof (struct s) offsetof (struct s, d) offsetof (struct ss, d) have the same value. <p> [5]; - *s2; 18 Following the further successful assignments: s1 = malloc (sizeof (struct s) + 10); s2 = malloc (sizeof (struct s) + 6); 106 Language -- -- Working Draft, 1997-11-21, WG14/N794 J11/97-158 they then behave as if they had been declared as: struct - int n; double d <ref> [1] </ref>; - *s1, *s2; and: double *dp; dp = &(s1-&gt;d [0]); // Permitted *dp = 42; // Permitted dp = &(s2-&gt;d [0]); // Permitted *dp = 42; // Undefined behavior Forward references: tags (6.5.2.3). 6.5.2.2 Enumeration specifiers Syntax 1 enum-specifier: enum identifier opt - enumerator-list - enum identifier opt - enumerator-list <p> For example, if identifier p has type (int **restrict), then the pointer expressions p and p+1 are based on the restricted pointer object designated by p, but the pointer expressions *p and p <ref> [1] </ref> are not.) Note that ``based'' is defined only for expressions with pointer types. 4 During each execution of B, let A be the array object that is determined dynamically by all references through pointer expressions based on P. <p> The cost is that the programmer must examine all of those calls to ensure that none give undefined behavior. For example, the second call of f in g has undefined behavior because each of d <ref> [1] </ref> through d [49] is referenced through both p and q. void g (void) - extern float d [100]; f (50, d + 50, d); // ok f (50, d + 1, d); // undefined behavior - 3. <p> declaration int y [4][3] = - - 2, 4, 6 -, -; is a definition with a fully bracketed initialization: 1, 3, and 5 initialize the first row of y (the array object y [0]), namely y [0][0], y [0]<ref> [1] </ref>, and y [0][2]. Likewise the next two lines initialize y [1] and y [2]. The initializer ends early, so y [3] is initialized with zeros. Precisely the same effect could have been achieved by _ ______________ 112. <p> Likewise the next three are taken successively for y <ref> [1] </ref> and y [2]. 3. The declaration int z [4][3] = - -; initializes the first column of z as specified and initializes the rest with zeros. 4. <p> v*v))*i where the programmer can determine they are safe. 250 Library -- -- Working Draft, 1997-11-21, WG14/N794 J11/97-158 7.8.2.2 The cacos function Synopsis 1 #include &lt;complex.h&gt; double complex cacos (double complex z); Description 2 The cacos function computes the complex arc cosine of z, with branch cuts outside the interval <ref> [-1, 1] </ref> along the real axis. <p> a strip mathematically unbounded along the imaginary axis and in the interval [0, p] along the real axis. 7.8.2.3 The casin function Synopsis 1 #include &lt;complex.h&gt; double complex casin (double complex z); Description 2 The casin function computes the complex arc sine of z, with branch cuts outside the interval <ref> [-1, 1] </ref> along the real axis. <p> the interval [-ip/2, ip/2] along the imaginary axis. 7.8.2.10 The catanh function Synopsis 1 #include &lt;complex.h&gt; double complex catanh (double complex z); Library 253 -- -- Working Draft, 1997-11-21, WG14/N794 J11/97-158 Description 2 The catanh function computes the complex arc hyperbolic tangent of z, with branch cuts outside the interval <ref> [-1, 1] </ref> along the real axis. <p> 1997-11-21, WG14/N794 J11/97-158 semantics of the members and their normal ranges are expressed in the comments. 236 int tm_sec; // seconds after the minute [0, 60] int tm_min; // minutes after the hour [0, 59] int tm_hour; // hours since midnight [0, 23] int tm_mday; // day of the month <ref> [1, 31] </ref> int tm_mon; // months since January [0, 11] int tm_year; // years since 1900 int tm_wday; // days since Sunday [0, 6] int tm_yday; // days since January 1 [0, 365] int tm_isdst; // Daylight Saving Time flag The value of tm_isdst is positive if Daylight Saving Time is
Reference: 3. <editor> ANSI X3/TR-1-82 (1982), </editor> <booktitle> American National Dictionary for Information Processing Systems , Information Processing Systems Technical Report. </booktitle>
Reference-contexts: Likewise the next two lines initialize y [1] and y [2]. The initializer ends early, so y <ref> [3] </ref> is initialized with zeros. Precisely the same effect could have been achieved by _ ______________ 112. In particular, the evaluation order need not be the same as the order of subobject initialization. 134 Language -- -- Working Draft, 1997-11-21, WG14/N794 J11/97-158 int y [4][3] = - -; The initializer for <p> Likewise the next three are taken successively for y [1] and y [2]. 3. The declaration int z [4]<ref> [3] </ref> = - -; initializes the first column of z as specified and initializes the rest with zeros. 4. The declaration struct - int a [3], b; - w [] = - - 1 -, 2 -; is a definition with an inconsistently bracketed initialization. It defines an array with two element structures: w [0].a [0] is 1 and w [1].a [0] is 2; all the other elements are zero. 5. The declaration short q [4][3][2] <p> The declaration char s [] = "abc", t <ref> [3] </ref> = "abc"; defines ``plain'' char array objects s and t whose elements are initialized with character string literals. <p> Structure members can be initialized to nonzero values without depending on their order: div_t answer = - .quot = 2, .rem = -1 -; 10. Designators can be used to provide explicit initialization when unadorned initializer lists might be misunderstood: struct - int a <ref> [3] </ref>, b; - w [] = - [0].a = -1-, [1].a [0] = 2 -; 11.
Reference: 4. <author> ANSI/IEEE 754-1985, </author> <title> American National Standard for Binary Floating-Point Arithmetic </title> . 
Reference: 5. <author> ANSI/IEEE 854-1987, </author> <title> American National Standard for Radix-Independent Floating-Point Arithmetic </title> . 
Reference-contexts: s1 = malloc (sizeof (struct s) + 64); s2 = malloc (sizeof (struct s) + 46); and assuming that the calls to malloc succeed, s1 and s2 behave as if they had been declared as: struct - int n; double d [8]; - *s1; struct - int n; double d <ref> [5] </ref>; - *s2; 18 Following the further successful assignments: s1 = malloc (sizeof (struct s) + 10); s2 = malloc (sizeof (struct s) + 6); 106 Language -- -- Working Draft, 1997-11-21, WG14/N794 J11/97-158 they then behave as if they had been declared as: struct - int n; double d [1]; <p> an uppercase letter. 17 Given the following wide string with length seven, static wchar_t wstr [] = L"$0X$0Yabc$0Z$0W"; 18 the seven calls fprintf (stdout, "|1234567890123|"n"); fprintf (stdout, "|%13ls|"n", wstr); fprintf (stdout, "|%-13.9ls|"n", wstr); fprintf (stdout, "|%13.10ls|"n", wstr); fprintf (stdout, "|%13.1ls|"n", wstr); fprintf (stdout, "|%13.15ls|"n", &wstr [2]); fprintf (stdout, "|%13lc|"n", wstr <ref> [5] </ref>); 19 will print the following seven lines: |1234567890123| | $0X$0Yabc$0Z$0W| |$0X$0Yabc$0Z | | $0X$0Yabc$0Z| | $0X$0Yabc$0Z$0W| | abc$0Z$0W| 20 Forward references: conversion state (7.19.7), the wcrtomb function (7.19.7.3.3). 7.13.6.2 The fscanf function Synopsis 1 #include &lt;stdio.h&gt; int fscanf (FILE * restrict stream, const char * restrict format, ...); 294 Library
Reference: 6. <author> IEC 559:1993, </author> <title> Binary floating-point arithmetic for microprocessor systems, </title> <note> second edition </note> . 
Reference-contexts: the minute [0, 60] int tm_min; // minutes after the hour [0, 59] int tm_hour; // hours since midnight [0, 23] int tm_mday; // day of the month [1, 31] int tm_mon; // months since January [0, 11] int tm_year; // years since 1900 int tm_wday; // days since Sunday <ref> [0, 6] </ref> int tm_yday; // days since January 1 [0, 365] int tm_isdst; // Daylight Saving Time flag The value of tm_isdst is positive if Daylight Saving Time is in effect, zero if Daylight Saving Time is not in effect, and negative if the information is not available. 5 The tmx
Reference: 7. <author> ISO 646:1983, </author> <title> Information processing ISO 7-bit coded character set for information interchange </title> . 
Reference: 8. <author> ISO/IEC 2382-1:1993, </author> <title> Information technology Vocabulary Part 1: Fundamental terms </title> . 
Reference-contexts: code is executed: struct s *s1; struct s *s2; s1 = malloc (sizeof (struct s) + 64); s2 = malloc (sizeof (struct s) + 46); and assuming that the calls to malloc succeed, s1 and s2 behave as if they had been declared as: struct - int n; double d <ref> [8] </ref>; - *s1; struct - int n; double d [5]; - *s2; 18 Following the further successful assignments: s1 = malloc (sizeof (struct s) + 10); s2 = malloc (sizeof (struct s) + 6); 106 Language -- -- Working Draft, 1997-11-21, WG14/N794 J11/97-158 they then behave as if they had been
Reference: 9. <author> ISO 4217:1995, </author> <title> Codes for the representation of currencies and funds </title> . 
Reference: 10. <author> ISO 8601:1988, </author> <title> Data elements and interchange formats Information interchange Representation of dates and times </title> . 
Reference: 11. <author> ISO/IEC 9945-2:1993, </author> <title> Information technology Portable Operating System Interface (POSIX) Part 2: Shell and Utilities </title> . 
Reference-contexts: If the two array types are used in a context which requires them to be compatible, it is undefined behavior if the two size specifiers evaluate to unequal values. Examples 5 1. float fa <ref> [11] </ref>, *afp [17]; declares an array of float numbers and an array of pointers to float numbers. 2. <p> their normal ranges are expressed in the comments. 236 int tm_sec; // seconds after the minute [0, 60] int tm_min; // minutes after the hour [0, 59] int tm_hour; // hours since midnight [0, 23] int tm_mday; // day of the month [1, 31] int tm_mon; // months since January <ref> [0, 11] </ref> int tm_year; // years since 1900 int tm_wday; // days since Sunday [0, 6] int tm_yday; // days since January 1 [0, 365] int tm_isdst; // Daylight Saving Time flag The value of tm_isdst is positive if Daylight Saving Time is in effect, zero if Daylight Saving Time is
Reference: 12. <author> ISO/IEC 9899:1993, </author> <title> Programming languages C </title> . 
Reference: 13. <author> ISO/IEC TR 10176, </author> <title> Information technology Guidelines for the preparation of programming language standards </title> . 
Reference: 14. <author> ISO/IEC 10646-1:1993, </author> <title> Information technology Universal Multiple-Octet Coded Character Set (UCS) Part 1: Architecture and Basic Multilingual Plane </title> .

References-found: 13

