URL: ftp://ftp.di.unito.it/pub/portinal/ais97.ps
Refering-URL: http://www.di.unito.it/WWW/KR/portinal/papers.html
Root-URL: 
Title: Case-Based Probability Factoring in Bayesian Belief Networks  
Author: Luigi Portinale 
Address: C.so Svizzera 185 10149 Torino (Italy)  
Affiliation: Dipartimento di Informatica Universita' di Torino  
Abstract: Bayesian network inference can be formulated as a combinatorial optimization problem, concerning in the computation of an optimal factoring for the distribution represented in the net. Since the determination of an optimal factoring is a computationally hard problem, heuristic greedy strategies able to find approximations of the optimal factoring are usually adopted. In the present paper we investigate an alternative approach based on a combination of genetic algorithms (GA) and case-based reasoning (CBR). We show how the use of genetic algorithms can improve the quality of the computed factoring in case a static strategy is used (as for the MPE computation), while the combination of GA and CBR can still provide advantages in the case of dynamic strategies. Some preliminary results on different kinds of nets are then reported. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.S. Breese and D. Heckermann. </author> <title> Decision-theoretic case-based reasoning. </title> <booktitle> In Proc. 5th International Workshop on AI and Statistics, </booktitle> <address> Fort Lauderdale, FL, </address> <year> 1995. </year>
Reference-contexts: This can be done by considering the set of nodes relevant to a given query and evidence (through the computation of d-connecting paths [10]) and by enlarging such a set in ways similar to the one described in <ref> [1] </ref>. Regarding the issue of factoring adaptation, in the present work we assume to directly apply the retrieved factorings to the current case. The problem of adaptation is left to future works and will probably involve the study of more specific genetic operators.
Reference: [2] <author> A.L. Corcoran and R.L. Wainwright. LibGA: </author> <title> A user-friendly workbench for order-based genetic algorithm research. </title> <booktitle> In Proc. 1993 ACM/SIGAPP Symposium on Applied Computing" (SAC 93), </booktitle> <address> Indianapolis, </address> <year> 1993. </year>
Reference-contexts: To implement our genetic algorithm, we have exploited the LibGA library of genetic operators <ref> [2] </ref>. In the current set of experiments, we used a roulette selection and a pmx crossover.
Reference: [3] <author> B.R. Fox and M.B. McMahon. </author> <title> Genetic operators for sequencing problems. </title> <editor> In G.J.E. Rawlins, editor, </editor> <booktitle> Foundations of Genetic Algorithms, </booktitle> <pages> pages 284-300. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: chromosomes are picked from the population using a roulette wheel having slots sized according to fitness (i.e. chromosomes with higher fitness have higher probability of selection), while the pmx is one of the best crossover methods on problems that, like the factoring problem, can be formulated as sequencing problems (see <ref> [3] </ref> for more details). We also assume a fixed rate of mutation of 0:6 with a swap type mutation (i.e. two alleles are swapped with probability 0:6) 2 . 2 More accurate experiments varying both mutation and cross-over rate are planned in order to determine how Net N. Nodes N.
Reference: [4] <author> D.E. Goldberg. </author> <title> Genetic Algorithms in Search Optimisation and Machine Learning. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: In the present paper we investigate an alternative way of addressing the trade-off mentioned above; we consider a search factoring strategy based on a genetic algorithm (GA) <ref> [4] </ref>, combined with a case-based reasoning methodology [7] which is able to exploit factorings computed by the genetic algorithm for cases similar to the current one. The task of interest is then the computation of joint-conditional probability for conjunctive queries, having the MPE computation task as a special case. <p> use of a GA for factoring computation can be integrated in a CBR perspective, for the implementation of dynamic factoring strategies. 2 A Genetic Approach to Factoring The genetic approach we have investigated in the current stage of the work is essentially a plain application of standard genetic methodologies (see <ref> [4] </ref>). This means that we did not developed specialized genetic operators for this task, leaving this possibility open to further research. First of all we have chosen an integer-based representation of chromosomes.
Reference: [5] <author> D. Heckermann and M.P. Wellman. </author> <title> Bayesian networks. </title> <journal> Communications of the ACM, </journal> <volume> 38(3) </volume> <pages> 27-30, </pages> <year> 1995. </year>
Reference-contexts: Results are summarized in table 1; in this batch of experiments we considered 4 real-world nets namely ADDER (a four-component full adder), CAR (a net for car engine fault detection), PRINTER (a net for printing problems troubleshooting developed at Microsoft Corp. and illustrated in <ref> [5] </ref>) and CHILD ( a net for congenital condition leading to a "blue baby" and described in [12]), together with 4 randomly generated nets (RANDOM1 through RANDOM4).
Reference: [6] <author> T.C. Hu. </author> <title> Combinatorial Algorithms. </title> <publisher> Addison Wesley, </publisher> <year> 1982. </year>
Reference-contexts: This fitness function can be easily implemented by a classical dynamic programming algorithm for determining minimal cost alphabetic trees <ref> [6] </ref>. A chromosome together with the optimal parenthesization represents a factoring. The GA's task is then to determine a near-to-optimum factoring by repeatedly applying a set of genetic operators (classically selection, crossover and mutation) to a population of chromosomes, in order to generate a new population.
Reference: [7] <author> J.L. Kolodner. </author> <title> Case-Based Reasoning. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: In the present paper we investigate an alternative way of addressing the trade-off mentioned above; we consider a search factoring strategy based on a genetic algorithm (GA) [4], combined with a case-based reasoning methodology <ref> [7] </ref> which is able to exploit factorings computed by the genetic algorithm for cases similar to the current one. The task of interest is then the computation of joint-conditional probability for conjunctive queries, having the MPE computation task as a special case. <p> Case-Based Reasoning (CBR) <ref> [7] </ref> deals exactly with this kind of problem: exploiting past problem-solving experiences for solving new cases.
Reference: [8] <author> Z. Li and B. D'Ambrosio. </author> <title> An efficient approach for finding the MPE in belief networks. </title> <booktitle> In Proc. 9 Conference on Uncertainty in Artificial Intelligence, </booktitle> <pages> pages 342-349, </pages> <address> Washington, </address> <year> 1993. </year>
Reference-contexts: Recent works <ref> [8, 9] </ref> have shown that general inference on Bayesian networks can be considered as a factoring problem on the probability distributions explicitly represented in the net. <p> The subnet identifies the probability distributions that must be factorized, while the set of queried variables is used to determine which variables must be summed over during the application of the factoring (see the algorithm in <ref> [8] </ref>). <p> Such a function will obviously depend also from the set of queried variables Q. For instance, in the example above, by considering Q = fag and if the algorithm described in <ref> [8] </ref> is applied and we assume all nodes to represent binary variables, the optimal parenthesization for the chromosome ff is (P (bja)(P (a)(P (djbc)P (cja)))), resulting in 16 multiplications (i.e. f (ff) = 16).
Reference: [9] <author> Z. Li and B. D'Ambrosio. </author> <title> Efficient inference in bayesian networks as a combinatorial optimization problem. </title> <journal> International Journal of Approximate Reasoning, </journal> <volume> 11(1) </volume> <pages> 55-81, </pages> <year> 1994. </year>
Reference-contexts: Recent works <ref> [8, 9] </ref> have shown that general inference on Bayesian networks can be considered as a factoring problem on the probability distributions explicitly represented in the net. <p> There is then a trade-off between computational effort and quality of the result that is very important for dynamic factoring strategies. Since determining an optimal factoring appears to be a hard problem 1 , in <ref> [9] </ref> a particular greedy algorithm for dynamic factoring called set factoring has been proposed. Experimental results have shown a 1 To the best of our knowledge, there is evidence that the problem could be N P -hard [9], but there is no proof yet. good performance of the set-factoring heuristic and <p> determining an optimal factoring appears to be a hard problem 1 , in <ref> [9] </ref> a particular greedy algorithm for dynamic factoring called set factoring has been proposed. Experimental results have shown a 1 To the best of our knowledge, there is evidence that the problem could be N P -hard [9], but there is no proof yet. good performance of the set-factoring heuristic and its computational complexity has been proved to be O (m 3 ), where m is the number of nodes of the subnet S N (Q; E) determined on the original belief network N by the set of
Reference: [10] <author> J. Pearl. </author> <title> Probabilistic Reasoning in Intelligent Systems. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction The goal of inference on Bayesian belief networks <ref> [10] </ref> is in general to compute the posterior probability of some nodes in the network, given that a set of nodes has been observed as evidence; this might be either the computation of some marginal posteriors or the determination of the most probable explanation (MPE) or the computation of specific joint-conditional <p> It is possible to devise methods allowing us to "enlarge" the subnet to be considered, producing then more cases to be stored. This can be done by considering the set of nodes relevant to a given query and evidence (through the computation of d-connecting paths <ref> [10] </ref>) and by enlarging such a set in ways similar to the one described in [1]. Regarding the issue of factoring adaptation, in the present work we assume to directly apply the retrieved factorings to the current case.
Reference: [11] <author> B. Smyth and M.T. Keane. </author> <title> Remembering to forget. </title> <booktitle> In Proc. 14th IJCAI, </booktitle> <pages> pages 377-382, </pages> <address> Montreal, </address> <year> 1995. </year>
Reference-contexts: Learning problems concern the definition of specific strategies for adding (and/or deleting) cases to memory; solutions to such problems should involve the utility and the competence of cases and are still an open problem <ref> [11] </ref>. Acknowledgments I would like to thank Filippo Neri for his help in the preliminary stage of this research. This work has been supported by grant MURST 60%.
Reference: [12] <author> D.J. Spiegelhalter, A.P. Dawid, S.L. Lauritzen, and R.G. Cowell. </author> <title> Bayesian analysis in expert systems. </title> <journal> Statistical Science, </journal> <volume> 8(3) </volume> <pages> 153-219, </pages> <year> 1993. </year>
Reference-contexts: we considered 4 real-world nets namely ADDER (a four-component full adder), CAR (a net for car engine fault detection), PRINTER (a net for printing problems troubleshooting developed at Microsoft Corp. and illustrated in [5]) and CHILD ( a net for congenital condition leading to a "blue baby" and described in <ref> [12] </ref>), together with 4 randomly generated nets (RANDOM1 through RANDOM4).
Reference: [13] <author> S. Srinivas and J.S. Breese. </author> <title> IDEAL: a software package for analysis of influence diagrams. </title> <booktitle> In Proc. 6th Conf. on Uncertainty in Artificial Intelligence, </booktitle> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: The next section illustrates how by combining these parameters can influence the overall performance of the algorithm. 3 The random net generator of the Ideal system <ref> [13] </ref> has been used for the second class of nets. the genetic approach in a case-based framework we can address the trade-off underlying static vs dynamic factoring strategies. 3 Case-Based Factoring To obviate the problem of slow convergence of the genetic approach with respect to set factoring, we have chosen to
References-found: 13

