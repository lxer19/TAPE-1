URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1995/tr-95-059.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1995.html
Root-URL: http://www.icsi.berkeley.edu
Email: famit,rothermelg@icsi.berkeley.edu  
Title: Fault handling for multiparty real-time communication  
Phone: (510) 643-9153 FAX (510) 643-7684  
Author: Amit Gupta and Kurt Rothermel 
Note: Now with University of Stuttgart, Institute of Parallel and Distributed High-Performance Systems(IPVR), Breitwiesenstr. 20-22, D-70565 Stuttgart, Germany  
Date: October 1995  
Address: I 1947 Center St. Suite 600 Berkeley, California 94704-1198  TR-95-059  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  The Tenet Group University of California at Berkeley, and International Computer Science Institute  
Abstract: For real-time communication services to achieve widespread usage, it is important that the network services behave gracefully if any component(s) fail. While other researchers have previously considered failure-handling for non-real-time communication as well as for unicast real-time communication, these failure-recovery techniques must be reexamined in the light of the changes introduced by the new protocols and services for supporting multi-party real-time communication. In this report, we describe techniques and mechanisms for maintaining network services for multi-party real-time communication in the face of failures that may make parts of the network inaccessible. The key goal is that the protocols should provide high performance in the common case (i.e., in absence of failed components) and the network performance should gracefully degrade in face of network failures; e.g., in the presence of network faults, the routes selected may not be as good, the connection set-up may take a little more time, or resource allocation may be less efficient. We describe appropriate policies for storing state in the network, as well as the mechanisms for re-establishing connectivity for previously established connections and to permit setting up new connections to existing conferences. We also describe a redundancy-based approach, using forward error correction (FEC), and dispersing the FEC'ed data among disjoint routes. With these mechanisms, we can make multi-party real-time communication protocols robust to single and/or multiple failures in the network, without diluting the 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Hosame Abu-Amara and Jahnavi Lokre. </author> <title> Election in asynchronous complete networks with intermittent link failures. </title> <journal> IEEE Transactions on Communications, </journal> <year> 1994. </year>
Reference-contexts: If the "cache" becomes unavailable (for example, due to a network partition) the cache can be recreated using standard distributed leader election protocols <ref> [1, 38] </ref>. * Channel object: In the current Suite 2 implementation, the Channel object is "co-located" with the Target Set object, i.e., the Channel Object for a channel resides on the same network node that the Target Set object for the corresponding Target Set resides.
Reference: [2] <author> Tony Ballardine, Paul Francis, and Jon Crowcroft. </author> <title> Core Based Trees (CBT): an architecture for scalable inter-domain multicast routing. </title> <booktitle> In Proceedings of SIGCOMM 93, </booktitle> <address> San Francisco, CA, </address> <month> September </month> <year> 1993. </year>
Reference: [3] <author> Anindo Banerjea. </author> <title> Fault management for real-time networks. </title> <type> PhD dissertation, </type> <institution> University of California at Berkeley, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: cross-connect layer where the units of communication and recovery are trunks (e.g., T1 or T3) where the recovery action is to reroute remaining trunks around the faults so as to meet the bandwidth requirements of the flows and the recovery mechanisms are based on pre-computation, and running dynamic distributed algorithms <ref> [4, 34, 3] </ref>. The ST family of protocols (ST, ST-II, ST2+) provide connection-oriented multicast-based real-time communication service [24, 11, 12, 13, 14, 15, 36, 40]; the latest protocol specification (ST2+) is described in [10]. <p> For Tenet Protocol Suite 1, <ref> [4, 34, 3] </ref> describe fault-handling and recovery mechanisms for simplex, unicast channels with performance guarantees. The unicast nature of communication considerably simplified their task; they did not have to consider multiple destinations; nor did they have any multicast group or resource sharing group information to recover. <p> With these soft-state mechanisms, failure-handling becomes completely transparent; however, it is possible that the failure-handling mechanisms' performance may be degraded due to the same synchronization and competition phenomena as observed in <ref> [3, 4, 34] </ref>.
Reference: [4] <author> Anindo Banerjea, Colin Parris, and Domenico Ferrari. </author> <title> Recovering guaranteed performance service connections from single and multiple faults. </title> <type> Technical Report TR-93-066, </type> <institution> International Computer Science Institute, Berkeley, California, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: Also, the proposed solutions suffers from one or more of several drawbacks: * They may assume a very limited communication model. For example, <ref> [4, 34, 33, 35, 32] </ref> limit the treatment to simplex, unicast channels. * They may dilute the level of performance guarantees. For example, RSVP [25, 29, 28, 42] uses a soft-state mechanism that provides a "best-effort" approach to failure-handling. <p> Also, we limit this discussion to mechanisms that recover one single channel from an already detected failure 3 . <ref> [4, 34] </ref> describe some interesting interactions when the network attempts to repair several unicast channels in parallel, and we expect similar interactions with multicast trees. However, such discussion is outside the scope of this report; we plan to investigate these interactions in the near future. <p> cross-connect layer where the units of communication and recovery are trunks (e.g., T1 or T3) where the recovery action is to reroute remaining trunks around the faults so as to meet the bandwidth requirements of the flows and the recovery mechanisms are based on pre-computation, and running dynamic distributed algorithms <ref> [4, 34, 3] </ref>. The ST family of protocols (ST, ST-II, ST2+) provide connection-oriented multicast-based real-time communication service [24, 11, 12, 13, 14, 15, 36, 40]; the latest protocol specification (ST2+) is described in [10]. <p> For Tenet Protocol Suite 1, <ref> [4, 34, 3] </ref> describe fault-handling and recovery mechanisms for simplex, unicast channels with performance guarantees. The unicast nature of communication considerably simplified their task; they did not have to consider multiple destinations; nor did they have any multicast group or resource sharing group information to recover. <p> With these soft-state mechanisms, failure-handling becomes completely transparent; however, it is possible that the failure-handling mechanisms' performance may be degraded due to the same synchronization and competition phenomena as observed in <ref> [3, 4, 34] </ref>.
Reference: [5] <author> Riccardo Bettati, Domenico Ferrari, Amit Gupta, Wendy Heffner, Wingwai Howe, Quyen Nguyen, Mark Moran, and Raj Yavatkar. </author> <title> Connection establishment for multi-party real-time communication. </title> <booktitle> In Proceedings of Fifth International Workshop on Network and Operating Systems Support for Distributed Audio and Video, </booktitle> <address> Durham, NH, </address> <month> April </month> <year> 1994. </year>
Reference-contexts: Our previous paper <ref> [5] </ref> describes the relevant aspects of the Tenet protocols; in this discussion, we limit ourselves to discussing a few of their salient features. We first describe the Tenet approach to real-time communication and follow the discussion with a description of key issues that arise in multi-party settings.
Reference: [6] <author> Robert Braden, David Clark, and Scott Shenker. </author> <title> Integrated services in the internet architecture: an overview. Request for Comments (Informational) RFC 1633, </title> <institution> Internet Engineering Task Force, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: soft-state nature, and there are no mechanisms by which an end-user can determine if the network is still supporting the performance that it requested, or if, due to the failure re-routing algorithm followed, the required resources were not available. * They may design and optimize the system for handling failures <ref> [42, 6, 8, 7] </ref>. The common-case (i.e., with all components working correctly) performance may suffer as a consequence.
Reference: [7] <author> David Clark. </author> <title> The design philosophy of the DARPA internet protocols. </title> <booktitle> In Proceedings of ACM SIGCOMM'88, </booktitle> <pages> pages 106-114, </pages> <address> Stanford, CA, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: soft-state nature, and there are no mechanisms by which an end-user can determine if the network is still supporting the performance that it requested, or if, due to the failure re-routing algorithm followed, the required resources were not available. * They may design and optimize the system for handling failures <ref> [42, 6, 8, 7] </ref>. The common-case (i.e., with all components working correctly) performance may suffer as a consequence. <p> Two key ideas comprise our approach to designing failure-handling techniques for multi-party real-time communication: fate-sharing, and the principle of optimality. 3.1 Fate-sharing The fate-sharing principle was first described in <ref> [7] </ref>. The fate-sharing principle says that it is acceptable to lose the state information associated with an entity if the entity itself is lost at the same time; this principle can be used to make decisions about the nodes where state information should be placed.
Reference: [8] <author> David Clark, Scott Shenker, and Lixia Zhang. </author> <title> Supporting real-time applications in an integrated services packet network: Architecture and mechanism. </title> <booktitle> In Proceedings of ACM SIGCOMM'92, </booktitle> <pages> pages 14-26, </pages> <address> Baltimore, Maryland, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: 1 Introduction The increasing speed of computer networks and the improvement of workstation capabilities are enabling a new class of distributed applications, those involving multimedia data. It is widely believed that these applications should be supported in the general framework of real-time communication <ref> [8, 17, 30, 31, 36, 37] </ref>, which provides predictable performance (e.g., end-to-end delay bounds for data delivery); typically, the clients negotiate with the network service provider to obtain a desired Quality of Service (QoS), which the provider guarantees. <p> A number of schemes and protocols have been proposed to provide real-time communication services. Most of the schemes are connection-oriented, and reserve resources (bandwidth, buffers, and so on) along the route of a real-time connection <ref> [8, 17, 26] </ref>. While failure handling and recovery for computer networks has been well-researched for non-real-time communication, there is very little research in handling failure in case of real-time communication. <p> soft-state nature, and there are no mechanisms by which an end-user can determine if the network is still supporting the performance that it requested, or if, due to the failure re-routing algorithm followed, the required resources were not available. * They may design and optimize the system for handling failures <ref> [42, 6, 8, 7] </ref>. The common-case (i.e., with all components working correctly) performance may suffer as a consequence.
Reference: [9] <author> Stephan E. Deering. </author> <title> Multicast routing in a datagram internetwork. </title> <type> PhD dissertation, </type> <institution> Stanford University, </institution> <month> December </month> <year> 1991. </year>
Reference: [10] <author> L. Delgrossi and L. Berger. </author> <title> Internet stream protocol version 2 (ST2) protocol specification version ST2+. Request for Comments (Standard) RFC 1819, </title> <institution> Internet Engineering Task Force, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: The ST family of protocols (ST, ST-II, ST2+) provide connection-oriented multicast-based real-time communication service [24, 11, 12, 13, 14, 15, 36, 40]; the latest protocol specification (ST2+) is described in <ref> [10] </ref>.
Reference: [11] <author> Luca Delgrossi, Christian Halstrick, Ralf Guido Herrtwich, and Heinrich Stuttgen. HeiTP: </author> <title> a transport protocol for ST-II. </title> <booktitle> In Proceedings of GLOBECOMM, </booktitle> <pages> pages 1369-1373 (40.02), </pages> <address> Orlando, Florida, </address> <month> December </month> <year> 1992. </year> <journal> IEEE. </journal> <volume> 20 </volume>
Reference-contexts: The ST family of protocols (ST, ST-II, ST2+) provide connection-oriented multicast-based real-time communication service <ref> [24, 11, 12, 13, 14, 15, 36, 40] </ref>; the latest protocol specification (ST2+) is described in [10].
Reference: [12] <author> Luca Delgrossi, Ralf Guido Herrtwich, and Frank Oliver Hoffmann. </author> <title> An imple-mentation of ST-II for the Heidelberg transport system. </title> <journal> Journal of Internet-working Research and Experience, </journal> <month> September </month> <year> 1993. </year>
Reference-contexts: The ST family of protocols (ST, ST-II, ST2+) provide connection-oriented multicast-based real-time communication service <ref> [24, 11, 12, 13, 14, 15, 36, 40] </ref>; the latest protocol specification (ST2+) is described in [10].
Reference: [13] <author> Luca Delgrossi, Ralf Guido Herrtwich, Frank Oliver Hoffmann, and Sibylle Schaller. </author> <title> Receiver-initiated communication with ST-II. </title> <note> preliminary version, </note> <month> September </month> <year> 1993. </year>
Reference-contexts: The ST family of protocols (ST, ST-II, ST2+) provide connection-oriented multicast-based real-time communication service <ref> [24, 11, 12, 13, 14, 15, 36, 40] </ref>; the latest protocol specification (ST2+) is described in [10].
Reference: [14] <author> Luca Delgrossi, Ralf Guido Herrtwich, Carsten Vogt, and Lars C. Wolf. </author> <title> Reservation protocols for internetworks: a comparison of ST-II and RSVP extended abstract. </title> <booktitle> In Fourth International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <year> 1993. </year>
Reference-contexts: The ST family of protocols (ST, ST-II, ST2+) provide connection-oriented multicast-based real-time communication service <ref> [24, 11, 12, 13, 14, 15, 36, 40] </ref>; the latest protocol specification (ST2+) is described in [10].
Reference: [15] <author> Luca Delgrossi, Ralf Guido Herrtwich, Carsten Vogt, and Lars C. Wolf. </author> <title> Reservation protocols for internetworks: A comparison of ST-II and RSVP. </title> <booktitle> In Proceedings of the 4th International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <pages> pages 199-207, </pages> <address> Lancaster, U.K., </address> <month> November </month> <year> 1993. </year> <institution> Lancaster University. </institution>
Reference-contexts: The ST family of protocols (ST, ST-II, ST2+) provide connection-oriented multicast-based real-time communication service <ref> [24, 11, 12, 13, 14, 15, 36, 40] </ref>; the latest protocol specification (ST2+) is described in [10].
Reference: [16] <author> Robert Doverspike. </author> <title> A multi-layered model for survivability in inter-LATA transport networks. </title> <booktitle> In Proceedings of GLOBECOMM, </booktitle> <address> Phoenix, AZ, </address> <month> December </month> <year> 1991. </year> <note> IEEE. </note>
Reference-contexts: After sending this message, M releases all resources and state information associated with the corresponding channel. By appropriately setting StartLevel and RetryLevel, we can support a wide variety of policies. 7 Related work Fault-handling has been extensively investigated in telecommunication networks. <ref> [16] </ref> discusses fault-recovery in telecommunication networks against a layered model: the highest is the switched layer where the unit of communication and fault-recovery is the call and the recovery action is to simply update the routing tables around the faults, with existing calls redialed by the end-systems; the next layer is
Reference: [17] <author> Domenico Ferrari, Anindo Banerjea, and Hui Zhang. </author> <title> Network support for multimedia: a discussion of the Tenet approach. </title> <booktitle> Computer Networks and ISDN Systems, </booktitle> <pages> pages 1267-1280, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: 1 Introduction The increasing speed of computer networks and the improvement of workstation capabilities are enabling a new class of distributed applications, those involving multimedia data. It is widely believed that these applications should be supported in the general framework of real-time communication <ref> [8, 17, 30, 31, 36, 37] </ref>, which provides predictable performance (e.g., end-to-end delay bounds for data delivery); typically, the clients negotiate with the network service provider to obtain a desired Quality of Service (QoS), which the provider guarantees. <p> A number of schemes and protocols have been proposed to provide real-time communication services. Most of the schemes are connection-oriented, and reserve resources (bandwidth, buffers, and so on) along the route of a real-time connection <ref> [8, 17, 26] </ref>. While failure handling and recovery for computer networks has been well-researched for non-real-time communication, there is very little research in handling failure in case of real-time communication. <p> We describe a hybrid mechanism in Section 6 and then conclude this paper with a brief review of related work in Section 7. 2 Tenet protocols for multi-party real-time communication In this paper, we illustrate our approach to failure-handling in the framework of the Tenet multi-party real-time communication protocols <ref> [17] </ref>; though this discussion is limited to the Tenet protocols, the underlying ideas and techniques are equally applicable to other multi-party real-time communication protocols. Our previous paper [5] describes the relevant aspects of the Tenet protocols; in this discussion, we limit ourselves to discussing a few of their salient features. <p> In this manner, the Target sets support the decoupling between the senders and the receivers and also provide the rendezvous among them. Resource sharing: Traditional real-time network systems (e.g., <ref> [17] </ref>) treat traffic on different connections independently when determining their resource requirements; for multi-party real-time communication, this results in inefficient over-allocation of resources [22]. For example, consider an audio-conference of one hundred persons.
Reference: [18] <author> Domenico Ferrari and Amit Gupta. </author> <title> Resource partitioning in real-time communication. </title> <booktitle> In Proceedings of IEEE Symposium on Global Data Networking, </booktitle> <pages> pages 128-135, </pages> <address> Cairo, Egypt, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: established route and resource allocation information at the corresponding channel source; this copy is then available as long as the channel source is available. * Advance reservations: As mentioned in Section 2.2, the Tenet Protocol Suite 2 supports advance reservation of network resources; these mechanisms are based on resource partitioning <ref> [18, 20] </ref>. The connection establishment signaling is the same for advance channels as for non-advance reserved channels, with the only difference being in the the Local Resource Managers (LRMs); these changes are described in [19, 21].
Reference: [19] <author> Domenico Ferrari, Amit Gupta, and Giorgio Ventre. </author> <title> Distributed advance reservation of real-time connections. </title> <booktitle> In Proceedings of Fifth International Workshop on Network and Operating Systems Support for Distributed Audio and Video, </booktitle> <address> Durham, NH, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: The Tenet Scheme 2 provides its users with the ability to book network resources (far) in advance of their use <ref> [19, 21] </ref>; this advance booking requires long-lived state in the network and it thus raises some interesting questions. <p> The connection establishment signaling is the same for advance channels as for non-advance reserved channels, with the only difference being in the the Local Resource Managers (LRMs); these changes are described in <ref> [19, 21] </ref>.
Reference: [20] <author> Amit Gupta and Domenico Ferrari. </author> <title> Resource partitioning for multi-party real-time communication. </title> <type> Technical Report TR-94-061, </type> <institution> International Computer Science Institute, Berkeley, California, </institution> <month> November </month> <year> 1994. </year> <note> Also to appear in IEEE/ACM Transactions on Networking, </note> <month> October </month> <year> 1995. </year>
Reference-contexts: established route and resource allocation information at the corresponding channel source; this copy is then available as long as the channel source is available. * Advance reservations: As mentioned in Section 2.2, the Tenet Protocol Suite 2 supports advance reservation of network resources; these mechanisms are based on resource partitioning <ref> [18, 20] </ref>. The connection establishment signaling is the same for advance channels as for non-advance reserved channels, with the only difference being in the the Local Resource Managers (LRMs); these changes are described in [19, 21].
Reference: [21] <author> Amit Gupta and Domenico Ferrari. </author> <title> Admission control for advance-reserved real-time connections. </title> <booktitle> In Proceedings of IEEE HPCS 95, </booktitle> <address> Mystic, CT, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: The Tenet Scheme 2 provides its users with the ability to book network resources (far) in advance of their use <ref> [19, 21] </ref>; this advance booking requires long-lived state in the network and it thus raises some interesting questions. <p> The connection establishment signaling is the same for advance channels as for non-advance reserved channels, with the only difference being in the the Local Resource Managers (LRMs); these changes are described in <ref> [19, 21] </ref>.
Reference: [22] <author> Amit Gupta, Winnie Howe, Mark Moran, and Quyen Nguyen. </author> <title> Resource sharing in multi-party realtime communication. </title> <booktitle> In Proceedings of INFOCOM 95, </booktitle> <address> Boston, MA, </address> <month> April </month> <year> 1995. </year> <month> 21 </month>
Reference-contexts: Resource sharing: Traditional real-time network systems (e.g., [17]) treat traffic on different connections independently when determining their resource requirements; for multi-party real-time communication, this results in inefficient over-allocation of resources <ref> [22] </ref>. For example, consider an audio-conference of one hundred persons. In the strawman proposal, the conference is set up by establishing one hundred multicast channels, one from each speaker (sender) to all listeners (destinations). It is reasonable to expect that only one person speak at any time.
Reference: [23] <author> Amit Gupta and Mark Moran. </author> <title> Channel groups: A unifying abstraction for specifying inter-stream relationships. </title> <type> Technical Report TR-93-015, </type> <institution> International Computer Science Institute, Berkeley, California, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: The resource allocation can be reduced (and the allocation efficiency increases) if the network clients can specify these resource sharing properties to the network and if the network can use such information to reduce the resource allocation along common sub-paths. 4 The Tenet Scheme 2 provides channels groups <ref> [23] </ref>; the resource sharing channel groups allow the network clients to specify these resource sharing relationships to the network. In the above example, the application would: (a) create a new channel group, and (b) inform the network to include the hundred audio channels in this channel group. <p> For such disjoint routing to work, the client has to inform the network that these different channels are all due to the same FEC'ed data stream. The clients can use the channel groups <ref> [23] </ref> to pass this information to the network service. The network can then use this information to obtain mutually disjoint routes. We now present a simple example to illustrate this mechanism.
Reference: [24] <author> Ralf Guido Herrtwich and Luca Delgrossi. </author> <title> Beyond ST-II: fulfilling the requirements of multimedia communication. </title> <booktitle> In Third International Workshop on network and operating system support for digital audio and video, </booktitle> <pages> pages 23-29, </pages> <address> San Diego, California, </address> <month> November </month> <year> 1992. </year> <journal> IEEE Computer and Communications Societies. </journal>
Reference-contexts: The ST family of protocols (ST, ST-II, ST2+) provide connection-oriented multicast-based real-time communication service <ref> [24, 11, 12, 13, 14, 15, 36, 40] </ref>; the latest protocol specification (ST2+) is described in [10].
Reference: [25] <author> Sugih Jamin, Peter Dantzig, Scott Shenker, and Lixia Zhang. </author> <title> A measurement-based admission control algorithm for integrated services packet networks. </title> <booktitle> In Proceedings of SIGCOMM 95, </booktitle> <address> Cambridge, MA, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: Also, the proposed solutions suffers from one or more of several drawbacks: * They may assume a very limited communication model. For example, [4, 34, 33, 35, 32] limit the treatment to simplex, unicast channels. * They may dilute the level of performance guarantees. For example, RSVP <ref> [25, 29, 28, 42] </ref> uses a soft-state mechanism that provides a "best-effort" approach to failure-handling.
Reference: [26] <author> A. Lazar and C. Pacifici. </author> <title> Control of resources in broadband networks with quality of service guarantees. </title> <journal> IEEE Communication Magazine, </journal> <pages> pages 66-73, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: A number of schemes and protocols have been proposed to provide real-time communication services. Most of the schemes are connection-oriented, and reserve resources (bandwidth, buffers, and so on) along the route of a real-time connection <ref> [8, 17, 26] </ref>. While failure handling and recovery for computer networks has been well-researched for non-real-time communication, there is very little research in handling failure in case of real-time communication.
Reference: [27] <author> K. Marzullo and F. Schmuck. </author> <title> Supplying high availability with a standard network file system. </title> <booktitle> In Proceedings of DCS, </booktitle> <pages> pages 447-455, </pages> <address> San Jose, Calif., </address> <month> June </month> <year> 1988. </year>
Reference-contexts: An error is that part of the system state which, unless appropriately corrected, is liable to lead to subsequent failure. The cause of an error is a fault. In this discussion, 1 and failures <ref> [39, 27, 41] </ref>. Also, though our algorithms are optimized for high perfor-mance under the common case that the components work correctly (as the failures are rare events), the network should be able to gracefully handle multiple failures. The paper is organized as follows.
Reference: [28] <author> Danny Mitzel, Deborah Estrin, Scott Shenker, and Lixia Zhang. </author> <title> An architectural comparison of ST-II and RSVP. </title> <booktitle> In Proceedings of INFOCOM 94, </booktitle> <address> Toronto, CANADA, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Also, the proposed solutions suffers from one or more of several drawbacks: * They may assume a very limited communication model. For example, [4, 34, 33, 35, 32] limit the treatment to simplex, unicast channels. * They may dilute the level of performance guarantees. For example, RSVP <ref> [25, 29, 28, 42] </ref> uses a soft-state mechanism that provides a "best-effort" approach to failure-handling.
Reference: [29] <author> Danny Mitzel and Scott Shenker. </author> <title> Asymptotic resource consumption in multicast reservation styles. </title> <booktitle> In Proceedings of SIGCOMM 94, </booktitle> <address> London, UK, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: Also, the proposed solutions suffers from one or more of several drawbacks: * They may assume a very limited communication model. For example, [4, 34, 33, 35, 32] limit the treatment to simplex, unicast channels. * They may dilute the level of performance guarantees. For example, RSVP <ref> [25, 29, 28, 42] </ref> uses a soft-state mechanism that provides a "best-effort" approach to failure-handling.
Reference: [30] <author> Mark Moran and Riccardo Gusella. </author> <title> System support for efficient dynamically-configurable multi-party interactive multimedia applications. </title> <booktitle> In Proceedings of Third International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <pages> pages 143-156, </pages> <address> San Diego, CA, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: 1 Introduction The increasing speed of computer networks and the improvement of workstation capabilities are enabling a new class of distributed applications, those involving multimedia data. It is widely believed that these applications should be supported in the general framework of real-time communication <ref> [8, 17, 30, 31, 36, 37] </ref>, which provides predictable performance (e.g., end-to-end delay bounds for data delivery); typically, the clients negotiate with the network service provider to obtain a desired Quality of Service (QoS), which the provider guarantees.
Reference: [31] <author> Abhay Kumar J. Parekh. </author> <title> A Generalized Processor Sharing Approach to Flow Control in Integrated Services Networks. </title> <type> PhD dissertation, </type> <institution> Massachusetts Institute of Technology, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: 1 Introduction The increasing speed of computer networks and the improvement of workstation capabilities are enabling a new class of distributed applications, those involving multimedia data. It is widely believed that these applications should be supported in the general framework of real-time communication <ref> [8, 17, 30, 31, 36, 37] </ref>, which provides predictable performance (e.g., end-to-end delay bounds for data delivery); typically, the clients negotiate with the network service provider to obtain a desired Quality of Service (QoS), which the provider guarantees.
Reference: [32] <author> Colin Paris, Hui Zhang, and Domenico Ferrari. </author> <title> A mechanism for dynamic reroute of real-time channels. </title> <type> Technical Report TR-92-053, </type> <institution> International Computer Science Institute, Berkeley, California, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: Also, the proposed solutions suffers from one or more of several drawbacks: * They may assume a very limited communication model. For example, <ref> [4, 34, 33, 35, 32] </ref> limit the treatment to simplex, unicast channels. * They may dilute the level of performance guarantees. For example, RSVP [25, 29, 28, 42] uses a soft-state mechanism that provides a "best-effort" approach to failure-handling.
Reference: [33] <author> Colin Parris. </author> <title> Dynamic connection management for real-time networks. </title> <type> PhD dissertation, </type> <institution> University of California at Berkeley, </institution> <month> August </month> <year> 1994. </year> <month> 22 </month>
Reference-contexts: Also, the proposed solutions suffers from one or more of several drawbacks: * They may assume a very limited communication model. For example, <ref> [4, 34, 33, 35, 32] </ref> limit the treatment to simplex, unicast channels. * They may dilute the level of performance guarantees. For example, RSVP [25, 29, 28, 42] uses a soft-state mechanism that provides a "best-effort" approach to failure-handling.
Reference: [34] <author> Colin Parris and Anindo Banerjea. </author> <title> An investigation into fault recovery in guaran-teed performance service connections. </title> <type> Technical Report TR-93-054, </type> <institution> International Computer Science Institute, Berkeley, California, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: Also, the proposed solutions suffers from one or more of several drawbacks: * They may assume a very limited communication model. For example, <ref> [4, 34, 33, 35, 32] </ref> limit the treatment to simplex, unicast channels. * They may dilute the level of performance guarantees. For example, RSVP [25, 29, 28, 42] uses a soft-state mechanism that provides a "best-effort" approach to failure-handling. <p> Also, we limit this discussion to mechanisms that recover one single channel from an already detected failure 3 . <ref> [4, 34] </ref> describe some interesting interactions when the network attempts to repair several unicast channels in parallel, and we expect similar interactions with multicast trees. However, such discussion is outside the scope of this report; we plan to investigate these interactions in the near future. <p> cross-connect layer where the units of communication and recovery are trunks (e.g., T1 or T3) where the recovery action is to reroute remaining trunks around the faults so as to meet the bandwidth requirements of the flows and the recovery mechanisms are based on pre-computation, and running dynamic distributed algorithms <ref> [4, 34, 3] </ref>. The ST family of protocols (ST, ST-II, ST2+) provide connection-oriented multicast-based real-time communication service [24, 11, 12, 13, 14, 15, 36, 40]; the latest protocol specification (ST2+) is described in [10]. <p> For Tenet Protocol Suite 1, <ref> [4, 34, 3] </ref> describe fault-handling and recovery mechanisms for simplex, unicast channels with performance guarantees. The unicast nature of communication considerably simplified their task; they did not have to consider multiple destinations; nor did they have any multicast group or resource sharing group information to recover. <p> With these soft-state mechanisms, failure-handling becomes completely transparent; however, it is possible that the failure-handling mechanisms' performance may be degraded due to the same synchronization and competition phenomena as observed in <ref> [3, 4, 34] </ref>.
Reference: [35] <author> Colin Parris, Hui Zhang, and Domenico Ferrari. </author> <title> Dynamic management of guaranteed performance multimedia connections, </title> <month> April </month> <year> 1993. </year> <note> to appear in ACM Journal of Multimedia Systems. </note>
Reference-contexts: Also, the proposed solutions suffers from one or more of several drawbacks: * They may assume a very limited communication model. For example, <ref> [4, 34, 33, 35, 32] </ref> limit the treatment to simplex, unicast channels. * They may dilute the level of performance guarantees. For example, RSVP [25, 29, 28, 42] uses a soft-state mechanism that provides a "best-effort" approach to failure-handling.
Reference: [36] <author> Craig Partridge and Stephen Pink. </author> <title> An implementation of the revised internet stream protocol (ST-2). </title> <journal> In Journal of Internetworking Research and Experience, </journal> <pages> pages 27-54, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction The increasing speed of computer networks and the improvement of workstation capabilities are enabling a new class of distributed applications, those involving multimedia data. It is widely believed that these applications should be supported in the general framework of real-time communication <ref> [8, 17, 30, 31, 36, 37] </ref>, which provides predictable performance (e.g., end-to-end delay bounds for data delivery); typically, the clients negotiate with the network service provider to obtain a desired Quality of Service (QoS), which the provider guarantees. <p> The ST family of protocols (ST, ST-II, ST2+) provide connection-oriented multicast-based real-time communication service <ref> [24, 11, 12, 13, 14, 15, 36, 40] </ref>; the latest protocol specification (ST2+) is described in [10].
Reference: [37] <author> Jean Ramaekers and Giorgio Ventre. </author> <title> Client-network interaction in a real-time communication environment. </title> <booktitle> In Proceedings of GLOBECOMM '92, </booktitle> <pages> pages 1140-1144, </pages> <address> Orlando, Florida, </address> <month> December </month> <year> 1992. </year>
Reference-contexts: 1 Introduction The increasing speed of computer networks and the improvement of workstation capabilities are enabling a new class of distributed applications, those involving multimedia data. It is widely believed that these applications should be supported in the general framework of real-time communication <ref> [8, 17, 30, 31, 36, 37] </ref>, which provides predictable performance (e.g., end-to-end delay bounds for data delivery); typically, the clients negotiate with the network service provider to obtain a desired Quality of Service (QoS), which the provider guarantees.
Reference: [38] <author> K. V. S. Ramarao. </author> <title> Commitment in a partitioned distributed database. </title> <editor> In H. Bo-ral and P.-A. Larson, editors, </editor> <booktitle> Proceedings of SIGMOD 1988, </booktitle> <pages> pages 371-378, </pages> <address> Chicago, Illinois, June 1988. </address> <publisher> ACM Press. </publisher>
Reference-contexts: If the "cache" becomes unavailable (for example, due to a network partition) the cache can be recreated using standard distributed leader election protocols <ref> [1, 38] </ref>. * Channel object: In the current Suite 2 implementation, the Channel object is "co-located" with the Target Set object, i.e., the Channel Object for a channel resides on the same network node that the Target Set object for the corresponding Target Set resides.
Reference: [39] <author> R. Schlichting and F. Schneider. </author> <title> Fail stop processors: An approach to designing fault-tolerant computing systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 1(3) </volume> <pages> 222-238, </pages> <year> 1983. </year>
Reference-contexts: An error is that part of the system state which, unless appropriately corrected, is liable to lead to subsequent failure. The cause of an error is a fault. In this discussion, 1 and failures <ref> [39, 27, 41] </ref>. Also, though our algorithms are optimized for high perfor-mance under the common case that the components work correctly (as the failures are rare events), the network should be able to gracefully handle multiple failures. The paper is organized as follows.
Reference: [40] <author> Claudio Topolcic. </author> <title> Experimental internet stream protocol, </title> <note> version 2 (ST-II), October 1990. RFC 1190. </note>
Reference-contexts: The ST family of protocols (ST, ST-II, ST2+) provide connection-oriented multicast-based real-time communication service <ref> [24, 11, 12, 13, 14, 15, 36, 40] </ref>; the latest protocol specification (ST2+) is described in [10].
Reference: [41] <author> Yih-Kuen Tsay and Rajive L. Bagrodia. </author> <title> Fault-tolerant algorithms for fair inter-process synchronization. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 5(6), </volume> <month> June </month> <year> 1994. </year>
Reference-contexts: An error is that part of the system state which, unless appropriately corrected, is liable to lead to subsequent failure. The cause of an error is a fault. In this discussion, 1 and failures <ref> [39, 27, 41] </ref>. Also, though our algorithms are optimized for high perfor-mance under the common case that the components work correctly (as the failures are rare events), the network should be able to gracefully handle multiple failures. The paper is organized as follows.
Reference: [42] <author> Lixia Zhang, Steve Deering, Deborah Estrin, Scott Shenker, and Daniel Zappala. RSVP: </author> <title> A new resource reservation protocol. </title> <journal> IEEE Networks Magazine, </journal> <volume> 31(9) </volume> <pages> 8-18, </pages> <month> September </month> <year> 1993. </year> <month> 23 </month>
Reference-contexts: Also, the proposed solutions suffers from one or more of several drawbacks: * They may assume a very limited communication model. For example, [4, 34, 33, 35, 32] limit the treatment to simplex, unicast channels. * They may dilute the level of performance guarantees. For example, RSVP <ref> [25, 29, 28, 42] </ref> uses a soft-state mechanism that provides a "best-effort" approach to failure-handling. <p> soft-state nature, and there are no mechanisms by which an end-user can determine if the network is still supporting the performance that it requested, or if, due to the failure re-routing algorithm followed, the required resources were not available. * They may design and optimize the system for handling failures <ref> [42, 6, 8, 7] </ref>. The common-case (i.e., with all components working correctly) performance may suffer as a consequence. <p> Of course, this task is considerably simplified because these protocols do not provide any performance guarantees. For providing performance guarantees, the IETF researchers designed Resource reSerVation Protocol (RSVP) <ref> [42] </ref>. The fate-sharing principle is also used extensively in RSVP design; RSVP also uses a soft-state approach to make the protocol robust against network faults.
References-found: 42

