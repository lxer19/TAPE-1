URL: http://www.daimi.aau.dk/~bromille/Papers/gridsub.ps
Refering-URL: http://www.daimi.aau.dk/~bromille/Papers/index.html
Root-URL: http://www.daimi.aau.dk
Title: Searching constant width mazes captures the AC 0 hierarchy  
Author: David A. Mix Barrington Chi-Jen Lu Peter Bro Miltersen Sven Skyum 
Date: September 11, 1997  
Abstract: We show that searching a width k maze is complete for k , i.e., for the k'th level of the AC 0 hierarchy. Equivalently, st-connectivity for width k grid graphs is complete for k . As an application, we show that there is a data structure solving dynamic st-connectivity for constant width grid graphs with time bound O(log log n) per operation on a random access machine. The dynamic algorithm is derived from the parallel one in an indirect way using algebraic tools.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. A. M. Barrington, N. Immerman and H. Straubing. </author> <title> On uniformity within N C 1 Journal of Computer and System Sciences, </title> <booktitle> 41(3) </booktitle> <pages> 274-306. </pages>
Reference-contexts: Non-uniform k is defined analogously, but with the output gate being an AND-gate. Following <ref> [1] </ref>, we define a uniform version of the hiearchy as follows: Uniform k ( k ) is the class of languages accepted by alternating Turing machines running in logarithmic time and making exactly k alternations, the first being universal (existential). <p> Construct the width k 1 graphs C (G i ) corresponding to the C i 's and let G (C) be the width k + 1 graph of Figure 5. The correctness of the construction is easily checked. 2 5 Uniformity considerations As in Barrington, Immerman, and Straubing <ref> [1] </ref>, we define a log-time Turing machine to have a read-only input tape of length n, a constant number of read-write work tapes of total length O (log n), and a read-write input address tape of length log n. <p> Furthermore, the alternating machine queries its input only once in a computation, in its last step. We now define uniform k as the class of languages accepted by alternating log-time Turing machines, making exactly k alternations, the first being universal. It is shown in <ref> [1] </ref> that this hierarchy is in fact a uniform version of the AC 0 circuit hierarchy, where specific questions about the circuit family can be answered by a DLOGTIME Turing machine. <p> A very intuitive way of viewing G k is as follows. An elements of G k is a collection of plane blobs inside the <ref> [1; 2] </ref> fi [1; k] rectangle in the plane, where a blob is identified with the set of grid points it contains. In the resulting picture by a factor of two on the x-axis. <p> A very intuitive way of viewing G k is as follows. An elements of G k is a collection of plane blobs inside the [1; 2] fi <ref> [1; k] </ref> rectangle in the plane, where a blob is identified with the set of grid points it contains. In the resulting picture by a factor of two on the x-axis. In Figure 6, (a) and (b) are concatenated to form (c) and then scaled down to (d).
Reference: [2] <author> D. A. M. Mix Barrington and D. Therien. </author> <title> Finite monoids and the fine structure of NC 1 . Journal of the ACM, </title> <booktitle> 35(4) </booktitle> <pages> 941-952, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: We derive the dynamic algorithm from the parallel one in an indirect, and rather unusual way: We note that the existence of the parallel algorithm implies that a certain monoid, G k , associated with the width-k problem is aperiodic by results of Barrington and Therien <ref> [2] </ref>. Combining this with a result of Thomas [16], we in fact show that G k has dot-depth exactly k, providing a (rather) natural example of such a monoid. Such examples are not encountered too often, so this may be of independent interest. <p> A very intuitive way of viewing G k is as follows. An elements of G k is a collection of plane blobs inside the <ref> [1; 2] </ref> fi [1; k] rectangle in the plane, where a blob is identified with the set of grid points it contains. In the resulting picture by a factor of two on the x-axis. <p> But if G k has dot-depth k 1 or less, this product can be evaluated by a circuit of depth k 1 and size polynomial in s, using a construction of Barrington and Therien <ref> [2] </ref>. Since C was arbitrary, we have collapsed two distinct levels of the AC 0 hierarchy, contradicting a theorem of Sipser [14]. 2 In Section 7, we only use the aperiodicity of G k , not its dot-depth.
Reference: [3] <author> P. Beame and F. Fich. </author> <title> On searching sorted lists: A near-optimal lower bound. </title> <type> Manuscript, </type> <year> 1997. </year>
Reference-contexts: We then use results on dynamic word problems by Frandsen, Miltersen and Skyum [7] to derive the dynamic algorithm. Similar algebraic and language-theoretic tools gives us the lower bound as a corollary to work of Beame and Fich <ref> [3] </ref>. <p> There is no solution to the dynamic connectivity problem for width k grid graphs with time bound o (log n log n= log log log n) on a RAM with word size O (log n). Proof We shall use a result by Beame and Fich <ref> [3] </ref>. First some terminology. Call a regular language L fl indecisive if and only if for all x 2 fl , there exist z and z 0 such that xz 2 L and xz 0 62 L. <p> As we pointed out, our upper bound is 2 2 O (m) log log n. This improves the general bound only for m o log log log n. From Beame and Fich <ref> [3] </ref> follows a lower bound of (log log n= log log log n), provided m 2.
Reference: [4] <author> M. Blum and D. Kozen. </author> <title> On the power of the compass (or why mazes are easier to search than graphs). </title> <booktitle> In 19th Annual Symposium on the Foundations of Computer Science, </booktitle> <pages> pages 132-142, </pages> <month> October </month> <year> 1978. </year>
Reference-contexts: 1 Introduction Blum and Kozen <ref> [4] </ref> considered the problem of searching a maze.
Reference: [5] <author> D. Eppstein. </author> <title> Dynamic connectivity in digital images. </title> <type> Technical Report 96-13, </type> <institution> Univ. of California, Irvine, Department of Information and Computer Science, </institution> <year> 1996. </year>
Reference-contexts: If the width is a free parameter m, with the restriction 2 m n, the following is known: Eppstein et al [6] construct a data structure with a time bound of O (log n) per operation and Eppstein <ref> [5] </ref> shows a lower bound of (log m= log log m). This lower bound is improved by Husfeldt and Rauhe [8] to (m), provided m log n= log log n. As we pointed out, our upper bound is 2 2 O (m) log log n.
Reference: [6] <author> D. Eppstein, G. Italiano, R. Tamassia, R. E. Tarjan, J. Westbrook, and M. Yung. </author> <title> Maintenance of a minimum spanning forest in a dynamic planar graph. </title> <journal> Journal of Algorithms, </journal> <volume> 13 </volume> <pages> 33-54, </pages> <year> 1992. </year>
Reference-contexts: For non-constant width m n, Eppstein et al provide a solution to this problem with a time bound O (log n) per operation <ref> [6] </ref>. We show: 2 Theorem 2 For any constant k, there is a solution to the dynamic connectivity problem for width k grid graphs with time complexity O (log log n) per operation. <p> If the width is a free parameter m, with the restriction 2 m n, the following is known: Eppstein et al <ref> [6] </ref> construct a data structure with a time bound of O (log n) per operation and Eppstein [5] shows a lower bound of (log m= log log m). This lower bound is improved by Husfeldt and Rauhe [8] to (m), provided m log n= log log n.
Reference: [7] <author> G. S. Frandsen, P. B. Miltersen, and S. Skyum. </author> <title> Dynamic word problems. </title> <journal> Journal of the ACM 44 </journal> <pages> 257-271, </pages> <year> 1997. </year>
Reference-contexts: Such examples are not encountered too often, so this may be of independent interest. We then use results on dynamic word problems by Frandsen, Miltersen and Skyum <ref> [7] </ref> to derive the dynamic algorithm. Similar algebraic and language-theoretic tools gives us the lower bound as a corollary to work of Beame and Fich [3]. <p> The constant in the big-O is 2 2 O (k) . Proof We shall use a result of Frandsen, Miltersen, and Skyum <ref> [7] </ref>. First some terminology. Let S be a finite monoid.
Reference: [8] <author> T. Husfeldt and T. Rauhe. </author> <title> Hardness of dynamic computation. </title> <type> Manuscript, </type> <year> 1997. </year>
Reference-contexts: This lower bound is improved by Husfeldt and Rauhe <ref> [8] </ref> to (m), provided m log n= log log n. As we pointed out, our upper bound is 2 2 O (m) log log n. This improves the general bound only for m o log log log n.
Reference: [9] <author> N. Immerman. </author> <title> Languages that capture complexity classes. </title> <journal> SIAM Journal on Computing, </journal> <volume> 16(4) </volume> <pages> 760-778, </pages> <year> 1987. </year>
Reference: [10] <author> N. Immerman and S. Landau. </author> <title> The complexity of iterated multiplication. </title> <journal> Information and Computation, </journal> <volume> 116(1) </volume> <pages> 103-116, </pages> <month> January </month> <year> 1995. </year>
Reference: [11] <author> A. Itai, C. H. Papadimitriou, and J. L. Szwarcfiter. </author> <title> Hamilton paths in grid graphs. </title> <journal> SIAM Journal on Computing, </journal> <volume> 11(4) </volume> <pages> 676-686, </pages> <year> 1982. </year>
Reference-contexts: As far as we know, this is the first example of natural complete problems for the levels of the AC 0 hierarchy. There is a close correspondence between mazes and grid graphs, as defined by Itai et al. <ref> [11] </ref>.
Reference: [12] <author> J. E. Pin. </author> <title> Varieties of Formal Languages. </title> <address> New York: </address> <publisher> Plenum Press, </publisher> <year> 1986. </year>
Reference-contexts: It is star-free (meaning that it can be formed from one-letter languages by concatenation and boolean operations including complementation), and has dot-depth k (meaning that the optimal depth of nesting of concatenation operations is k). See, for example, <ref> [12] </ref> for further background on algebraic automata theory. Lemma 8 G k is an aperiodic monoid with dot-depth exactly k. Proof (sketch) We first show that the dot-depth is at most k.
Reference: [13] <author> A. A. Razborov. </author> <title> Lower Bounds for deterministic and nondeterministic branching programs. </title> <editor> In L. Bu-dach, ed., </editor> <booktitle> Fundamentals of Computation Theory, 8th International Conference: FCT '91. Lecture Notes in Computer Science 529, </booktitle> <pages> 47-60. </pages> <address> Berlin, </address> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: An nfik switching network is a undirected labelled graph whose vertices form a rectangular array with k rows and n columns and whose edges are restricted to be between vertices in adjacent columns. (Switching networks are also called "contact schemes" | see the survey of Razborov <ref> [13] </ref> for further background.) Each edge is labelled by an input variable, its negation, or the value 1, and the network accepts a given input string iff there is a path from a fixed vertex s to another fixed vertex t such that the label of each edge on the path <p> This completes the reduction. 2 8 Generalization to directed graphs In a directed grid graph, each edge present has one or both of the two possible orientations, and we consider finding directed paths from s to t. (Such graphs correspond to planar nondeterministic branching programs 9 or planar "switching-and-rectifier networks" <ref> [13] </ref>, except that a directed grid graph need not have horizontal arrows in only one direction.
Reference: [14] <author> M. Sipser. </author> <title> Borel sets and circuit complexity. </title> <booktitle> In Proceedings, 15th ACM Symposium on the Theory of Computing, </booktitle> <year> 1983, </year> <pages> 61-69. </pages>
Reference-contexts: Since C was arbitrary, we have collapsed two distinct levels of the AC 0 hierarchy, contradicting a theorem of Sipser <ref> [14] </ref>. 2 In Section 7, we only use the aperiodicity of G k , not its dot-depth.
Reference: [15] <author> S. Skyum and L. G. Valiant. </author> <title> A complexity theory based on Boolean algebra. </title> <journal> Journal of the ACM, </journal> <volume> 32(2) </volume> <pages> 484-502, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: An appropriate class of reductions to use for the non-uniform classes in the AC 0 hierarchy is the class of (non-uniform) p-projections <ref> [15] </ref>; all the non-uniform classes mentioned above are closed under those.
Reference: [16] <author> W. Thomas. </author> <title> Classifying regular events in symbolic logic. </title> <journal> J. Comput. System Sci. </journal> <volume> 25, </volume> <year> 1982, </year> <pages> 360-376. 11 </pages>
Reference-contexts: Combining this with a result of Thomas <ref> [16] </ref>, we in fact show that G k has dot-depth exactly k, providing a (rather) natural example of such a monoid. Such examples are not encountered too often, so this may be of independent interest. <p> By a theorem of Thomas <ref> [16] </ref>, any language so describable has a syntactic monoid that is aperiodic with dot-depth k. But this syntactic monoid is G k itself, since G k was designed to exactly capture this connectivity information.
References-found: 16

