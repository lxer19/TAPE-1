URL: ftp://ftp.cag.lcs.mit.edu/pub/raw/documents/fccm97.ps.Z
Refering-URL: http://cag-www.lcs.mit.edu/~mtaylor/paper.html
Root-URL: 
Title: The RAW Benchmark Suite: Computation Structures for General Purpose Computing  
Author: Jonathan Babb, Matthew Frank, Victor Lee, Elliot Waingold, Rajeev Barua, Michael Taylor, Jang Kim, Srikrishna Devabhaktuni, Anant Agarwal 
Web: www.cag.lcs.mit.edu  
Address: Cambridge, MA 02139  
Affiliation: MIT Laboratory for Computer Science  
Abstract: To establish initial benchmark ratings, we have targeted a commercial logic emulation system based on virtual wires technology to automatically generate designs up to millions of gates (14 to 379 FPGAs). Because the virtual wires techniques abstract away machine-level details like FPGA capacity and interconnect, our hardware target for this system is an abstract reconfigurable logic fabric with memory-mapped host I/O. We report initial speeds in the range of 2X to 1800X faster than a 2.82 SPECint95 SparcStation 20 and encourage others in the field to run these benchmarks on other systems to provide a standard comparison. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Amerson, R. Carter, B. Culbertson, P. Kuekes, and G. Snider. </author> <title> Teramac-configurable custom computing. </title> <editor> In D. A. Buell and K. L. Pocek, editors, </editor> <booktitle> Proceedings of IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <pages> pages 32-38, </pages> <address> Napa, CA, </address> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: Iseli and Sanchez implemented the Life benchmark on the Spyder architecture [14]. Sorting algorithms have been investigated by Luk et al [17], Carrera et al [7], Amer-son et al <ref> [1] </ref> and Hauser and Wawrzynek [13]. Priority queues have been examined by Luk [16]. Lew and Halver-son [15] have used data dependency information to specify algorithms for the discrete cosine and dynamic programming solutions for the shortest path problem.
Reference: [2] <author> J. Babb, M. Frank, and A. Agarwal. </author> <title> Solving graph problems with dynamic computation structures. In SPIE Photonics East: Reconfigurable Technology for Rapid Product Development & Computing, </title> <address> Boston, MA, </address> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: Specifically, the generators for the shortest path and transitive closure graph problems also specialize an input graph topology. Dynamic computation structures are described in more detail in <ref> [2] </ref>. While, in our current implementation, the generate programs are hand-coded by application of known compilation techniques such as partial evaluation, loop unrolling, and speculative parallelization, a high-level compiler can automate this task. <p> For the transitive closure problem the computation element is an AND function across its inputs. With the exception of ssp64-mesh, each of the graph benchmark cases is randomly generated with a maximum node in-degree of eight, and an average in-degree of four. See <ref> [2] </ref> for more details. 4.1 Limitations Our current benchmark suite has several limitations. First, the designs are not multiplexed and thus require gate counts proportional to problem size. In addition, none of the applications have significant memory requirements. Also, all applications have very small code size.
Reference: [3] <author> J. Babb, R. Tessier, and A. Agarwal. </author> <title> Virtual Wires: Overcoming pin limitations in FPGA-based logic emulators. </title> <booktitle> In Proceedings IEEE Workshop on FPGA-based Custom Computing Machines, </booktitle> <pages> pages 142-151, </pages> <address> Napa, CA, </address> <month> April </month> <year> 1993. </year> <note> IEEE. Also as MIT/LCS TM-491, </note> <month> January </month> <year> 1993. </year>
Reference-contexts: Using raw computation structures (RawCS) we have synthesized, partitioned and mapped these applications to a reconfigurable computing architecture. The RAW system leverages previous multi-FPGA work, virtual wires <ref> [3] </ref>, in conjunction with behavioral compilation technology, to view an array of FPGAs as a machine-independent computing fabric. Given this viewpoint, we have developed a new software system which generates computation structures based on the data dependence graph of an application. <p> The programming paradigm on these machines, however, prohibits the development of automatically-compiled, architecture-independent applications because the programmer must explicitly account for machine-level details such as FPGA capacity and interconnect. The development and commercial availability of virtual wires compiler technology <ref> [3] </ref> enables the efficient combining of multiple FPGAs for use as a single, giant sea of gates by higher-level synthesis compilation steps.
Reference: [4] <author> T. Bauer. </author> <title> The Design of an Efficient Hardware Subroutine Protocol for FPGAs. </title> <type> Master's thesis, </type> <institution> EECS Deptartment, MIT, Department of Electrical Engineering and Computer Science, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: has primarily been applied to in-circuit emulation and logic simulation acceleration, it has also been applied effectively to reconfigurable computing of hardware subroutines, where an FPGA array implements a Verilog version of a subroutine in a C program and connects to the software by remote calls from a host workstation <ref> [4] </ref>. 3 Raw Computation Structures To support compilation of the RAW benchmark suite to reconfigurable architectures, we have developed a common framework based on raw computation structures (RawCS). RawCS supports user-level hardware by dynamically modifying the underlying architecture as a function of each application.
Reference: [5] <author> P. Betrin and H. Touati. </author> <title> Pam programming environments: </title> <journal> Practice and experience. </journal> <volume> Napa, </volume> <pages> pages 133-138, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: and Section 8 describe related and future work in this area and Section 9 makes concluding remarks. 2 Background Configurable computers based on Field Programmable Gate Arrays (FPGAs) are capable of accelerating suitable applications by several orders of magnitude when compared to traditional processor-based architectures (see Splash [12] and PAM <ref> [5] </ref>). This performance is achieved by mapping a user application into a gate-level netlist that may be downloaded onto programmable hardware. The programming paradigm on these machines, however, prohibits the development of automatically-compiled, architecture-independent applications because the programmer must explicitly account for machine-level details such as FPGA capacity and interconnect. <p> Bittner and Athanas [6] have implemented vector dot product. Yeh, Feygin and Chow [21] implemented a Viterbi decoder which has a similar structure to the Raw shortest path benchmark. A 3D heat equation solver, with a structure similar to the Jacobi benchmark has been implemented for the PAM architecture <ref> [5] </ref>. 8 Future Work Many of the gains in application performance found in Section 6 were offset by the additional overhead of using an exclusively fine grain medium (FPGAs) for computing.
Reference: [6] <author> R. A. Bittner, Jr. and P. M. Athanas. </author> <title> Computing Kernels Implemented with a Wormhole RTR CCM. </title> <booktitle> In Proceedings of IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: Priority queues have been examined by Luk [16]. Lew and Halver-son [15] have used data dependency information to specify algorithms for the discrete cosine and dynamic programming solutions for the shortest path problem. The discrete cosine has also been investigated by Ebeling et al [10]. Bittner and Athanas <ref> [6] </ref> have implemented vector dot product. Yeh, Feygin and Chow [21] implemented a Viterbi decoder which has a similar structure to the Raw shortest path benchmark.
Reference: [7] <author> J. M. Carrera, E. J. Martinez, S. A. Fernandez, and J. M. Chaus. </author> <title> Architecture of a FPGA-based coprocessor: The PAR-1. </title> <editor> In D. A. Buell and K. L. Pocek, editors, </editor> <booktitle> Proceedings of IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <pages> pages 20-29, </pages> <address> Napa, CA, </address> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: Iseli and Sanchez implemented the Life benchmark on the Spyder architecture [14]. Sorting algorithms have been investigated by Luk et al [17], Carrera et al <ref> [7] </ref>, Amer-son et al [1] and Hauser and Wawrzynek [13]. Priority queues have been examined by Luk [16]. Lew and Halver-son [15] have used data dependency information to specify algorithms for the discrete cosine and dynamic programming solutions for the shortest path problem.
Reference: [8] <author> D. Thomas and P. Moorby. </author> <title> The Verilog Hardware Description Language. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction One goal of MIT's Reconfigurable Architecture Workstation (RAW) project is to provide the performance of reconfigurable computing in a software environment with the traditional languages and development tools available on a workstation. We have developed a suite of twelve general purpose computing benchmarks, written in architecture-independent Behavioral Verilog <ref> [8] </ref>, with which to examine issues of compiling to reconfigurable architectures. Using raw computation structures (RawCS) we have synthesized, partitioned and mapped these applications to a reconfigurable computing architecture.
Reference: [9] <author> DAWN VME Products. </author> <title> SLIC Evaluation Board User's Guide for DAWN VME PRODUCTS SLIC EB-1 Version 1.0, </title> <month> June </month> <year> 1993. </year>
Reference-contexts: Each reconfigurable architecture is then expected to implement a system-specific transport layer that maps communication from this bus to the address space of the host. For example, in our experiments with the IKOS emulator, we used the SLIC EB-1 SBus card <ref> [9] </ref> and a device driver for the transport layer. Section 5 discusses our IKOS host interface in more detail. 4 Benchmark Applications The RAW benchmarks consist of twelve programs representative of a variety of algorithms including sorting, matrix operations, combinatorial search and graph problems. <p> Initially, we are targeting a prototype hardware system consisting of a VirtuaLogic Emulator (VLE) from IKOS Systems coupled with a Sun SparcStation 10/51 via a SLIC S-bus interface card <ref> [9] </ref> (Figure 3). Not shown is a SCSI interface to the emulator for downloading configurations and controlling clock speed. We are currently using a production VLE system consisting of five arrays of 64 Xilinx 4013 FPGAs each.
Reference: [10] <author> C. Ebeling, D. C. Cronquist, P. Franklin, J. Secosky, and S. G. Berg. </author> <title> Mapping applications to the rapid configurable architecture. </title> <booktitle> In Proceedings of IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: Priority queues have been examined by Luk [16]. Lew and Halver-son [15] have used data dependency information to specify algorithms for the discrete cosine and dynamic programming solutions for the shortest path problem. The discrete cosine has also been investigated by Ebeling et al <ref> [10] </ref>. Bittner and Athanas [6] have implemented vector dot product. Yeh, Feygin and Chow [21] implemented a Viterbi decoder which has a similar structure to the Raw shortest path benchmark.
Reference: [11] <author> D. R. Engler. </author> <title> VCODE: A retargetable, extensible, very fast dynamic code generation system. </title> <booktitle> In PLDI '96, </booktitle> <year> 1996. </year>
Reference-contexts: In other cases, such as the transitive closure benchmark, where these modifications are also a function of some of the input data for the application, RawCS compilation can be viewed as an extreme case of generation of dynamic code <ref> [11] </ref>, where new processor instructions are dynamically generated based on the input data-set. Dynamic code generation is a software technique that allows specialization and optimization of code based on program input.
Reference: [12] <author> M. Gokhale, W. Holmes, A. Kopser, S. Lucas, R. Minnich, D. Sweeney, and D. Lopresti. </author> <title> Building and using a highly parallel programmable logic array. </title> <journal> Computer, </journal> <volume> 24(1), </volume> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: Finally, Section 7 and Section 8 describe related and future work in this area and Section 9 makes concluding remarks. 2 Background Configurable computers based on Field Programmable Gate Arrays (FPGAs) are capable of accelerating suitable applications by several orders of magnitude when compared to traditional processor-based architectures (see Splash <ref> [12] </ref> and PAM [5]). This performance is achieved by mapping a user application into a gate-level netlist that may be downloaded onto programmable hardware.
Reference: [13] <author> J. R. Hauser and J. Wawrzynek. Garp: </author> <title> A MIPS Processor with a Reconfigurable Coprocessor. </title> <booktitle> In Proceedings of IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: Iseli and Sanchez implemented the Life benchmark on the Spyder architecture [14]. Sorting algorithms have been investigated by Luk et al [17], Carrera et al [7], Amer-son et al [1] and Hauser and Wawrzynek <ref> [13] </ref>. Priority queues have been examined by Luk [16]. Lew and Halver-son [15] have used data dependency information to specify algorithms for the discrete cosine and dynamic programming solutions for the shortest path problem. The discrete cosine has also been investigated by Ebeling et al [10].
Reference: [14] <author> C. Iseli and E. Sanchez. Spyder: </author> <title> A reconfigurable VLIW processor using FPGAs. </title> <editor> In D. A. Buell and K. L. Pocek, editors, </editor> <booktitle> Proceedings of IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <pages> pages 17-24, </pages> <address> Napa, CA, </address> <month> Apr. </month> <year> 1993. </year>
Reference-contexts: Iseli and Sanchez implemented the Life benchmark on the Spyder architecture <ref> [14] </ref>. Sorting algorithms have been investigated by Luk et al [17], Carrera et al [7], Amer-son et al [1] and Hauser and Wawrzynek [13]. Priority queues have been examined by Luk [16].
Reference: [15] <author> A. Lew and R. Halverson, Jr. </author> <title> A FCCM for Dataflow (Spreadsheet) Programs. </title> <booktitle> In Proceedings of IEEE Workshop on FP-GAs for Custom Computing Machines, </booktitle> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: Iseli and Sanchez implemented the Life benchmark on the Spyder architecture [14]. Sorting algorithms have been investigated by Luk et al [17], Carrera et al [7], Amer-son et al [1] and Hauser and Wawrzynek [13]. Priority queues have been examined by Luk [16]. Lew and Halver-son <ref> [15] </ref> have used data dependency information to specify algorithms for the discrete cosine and dynamic programming solutions for the shortest path problem. The discrete cosine has also been investigated by Ebeling et al [10]. Bittner and Athanas [6] have implemented vector dot product.
Reference: [16] <author> W. Luk. </author> <title> A declarative approach to incremental custom computing. </title> <editor> In D. A. Buell and K. L. Pocek, editors, </editor> <booktitle> Proceedings of IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <pages> pages 164-172, </pages> <address> Napa, CA, </address> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: Iseli and Sanchez implemented the Life benchmark on the Spyder architecture [14]. Sorting algorithms have been investigated by Luk et al [17], Carrera et al [7], Amer-son et al [1] and Hauser and Wawrzynek [13]. Priority queues have been examined by Luk <ref> [16] </ref>. Lew and Halver-son [15] have used data dependency information to specify algorithms for the discrete cosine and dynamic programming solutions for the shortest path problem. The discrete cosine has also been investigated by Ebeling et al [10]. Bittner and Athanas [6] have implemented vector dot product.
Reference: [17] <author> W. Luk, V. Lok, and I. </author> <title> Page. Hardware acceleration of divide-and-conquer paradigms: a case study. </title> <editor> In D. A. Buell and K. L. Pocek, editors, </editor> <booktitle> Proceedings of IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <pages> pages 192-201, </pages> <address> Napa, CA, </address> <month> Apr. </month> <year> 1993. </year>
Reference-contexts: Iseli and Sanchez implemented the Life benchmark on the Spyder architecture [14]. Sorting algorithms have been investigated by Luk et al <ref> [17] </ref>, Carrera et al [7], Amer-son et al [1] and Hauser and Wawrzynek [13]. Priority queues have been examined by Luk [16]. Lew and Halver-son [15] have used data dependency information to specify algorithms for the discrete cosine and dynamic programming solutions for the shortest path problem.
Reference: [18] <author> C. P. Pfleeger. </author> <title> Security in Computing. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> New Jersey, </address> <year> 1989. </year>
Reference-contexts: In contrast, by parallelizing exchanges, the RawCS parallel hardware version sorts elements in a number of clock cycles that is linear with n, and requires an amount of hardware on the order of n. DES The Data Encryption Standard <ref> [18] </ref> (DES) is a system developed for the U.S. government for use by the general public. The DES algorithm, a combination of substitution and permutation, derives its strength from repeated application of these two techniques, one on top of the other, for a total of 16 cycles.
Reference: [19] <author> W. Press et al. </author> <title> Fast Fourier Transform (FFT), </title> <address> pages 504-510. </address> <publisher> Cambridge University Press, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: As a result, an individual hardware DES module is expected to achieve performance similar to the best software solution and thus achieve an O (n) speedup. FFT The Fast Fourier Transform (FFT) over the field of complex numbers <ref> [19] </ref> is a common signal processing applications with inherent parallelism. An FFT of size N can be performed in hardware in a loop of length log N where each iteration of the loop permits N=2 computations to run in parallel.
Reference: [20] <author> E. Waingold, M. Taylor, V. Sarkar, W. Lee, V. Lee, J. Kim, M. Frank, P. Finch, S. Devabhaktuni, R. Barua, J. Babb, S. Amarasinghe, and A. Agarwal. </author> <title> Baring it all to Software: The Raw Machine. </title> <type> Technical Report TR-709, </type> <institution> MIT LCS, </institution> <month> Mar. </month> <year> 1997. </year>
Reference-contexts: We estimate that our applications could have achieved yet another order of magnitude speed improvement if our system could be run at the clock rates (e.g. 500MHz) of modern processors. Our future work involves the development of an architecture and compiler for a Raw microprocessor (RawP) <ref> [20] </ref> which provides the benefits found in reconfigurable computing environments without the costs of using only FPGA logic.
Reference: [21] <author> D. Yeh, G. Geygin, and P. Chow. RACER: </author> <title> A Reconfigurable Constraint-Length 14 Viterbi Decoder. </title> <booktitle> In Proceedings of IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <month> Apr. </month> <year> 1996. </year>
Reference-contexts: The discrete cosine has also been investigated by Ebeling et al [10]. Bittner and Athanas [6] have implemented vector dot product. Yeh, Feygin and Chow <ref> [21] </ref> implemented a Viterbi decoder which has a similar structure to the Raw shortest path benchmark.
References-found: 21

