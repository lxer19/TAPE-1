URL: http://www.research.digital.com/SRC/personal/monika/papers/connectivity1.ps.gz
Refering-URL: http://www.research.digital.com/SRC/personal/monika/papers.html
Root-URL: http://www.research.digital.com
Title: Faster Vertex Connectivity Algorithms  
Author: Monika Rauch Henzinger Satish Rao 
Abstract: We present a preflow-push algorithm for determining the vertex connectivity of an n-node, m-edge graph with positive vertex capacities. We give a deterministic algorithm that computes (u) = min v6=u (u; v) in time O(mn log n), where (u; v) is the capacity of the minimum vertex cut between u and v. This leads to a deterministic algorithm for computing in time O(knm log n) and a Monte-Carlo algorithm with expected time O(nm log 2 n), where k is the number of nodes in a minimum vertex cut. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Ahuja, J. Orlin, C. Stein, and R. Tarjan. </author> <title> Improved algorithms for bipartite network flow problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 23(5) </volume> <pages> 906-933, </pages> <year> 1994. </year>
Reference-contexts: We use this fact in one of our applications. We note that our analysis is similar to that in <ref> [1] </ref> and [9] which respectively contain improved and parallel pre-flow push algorithms for unbalanced bipartite graphs; unbalanced bipartite graphs being bipartite graphs where one side is significantly smaller than the other. Global vertex connectivity.
Reference: [2] <author> M. Becker, W. Degenhardt, J. Doenhardt, S. Hertel, G. Kaninke, W. Keber, K. Mehlhorn, S. Naher, H. Rohnert, and T. Winter. </author> <title> A probabilistic algorithm for vertex connectivity of graphs. </title> <journal> Information Processing Letters, </journal> <volume> 15 (3), </volume> <year> 1982, </year> <pages> 135-136. </pages>
Reference-contexts: Let k denote the number of nodes in a minimum vertex cut. We summarize our results and previous results in tables 1 and 2. Here we briefly describe how to obtain a Monte-Carlo algorithm for vertex connectivity. The approach taken in <ref> [2] </ref> is to choose l points at random and to find the minimum vertex connectivity of each of the l nodes. They show that this procedure finds the cut with failure probability &lt; 1=n, when l &gt; (log n)=(log n log k). <p> modification that they use is exactly the well-known gap heuristic used by practitioners to speed up the performance of maximum flow implementations. 2 deterministic randomized (M-C) Previous Results O (kn 2 m log (n 2 =m)) [10] O (n 2 m log n=(log n log k) log (n 2 =m)) <ref> [2] </ref> This Paper O (knm log n) O (nm log C min (log n; log n=(log n log k))) of nodes in a minimum vertex cut and C denotes the maximum capacity. deterministic randomized (M-C) randomized (L-V) Previous Results O ((n + k 2 )kn min (k; p This Paper O <p> Thus, when the number of the running time of the vertex connectivity algorithm for node u is O ((n k)m log n). When k = (1 *)n, this becomes O (*nm log n). Thus, the randomized approach of <ref> [2] </ref> can always be made to run in time O ((*nm log n) log n=*) = O (nm log 2 n) time using our algorithm. Maximal minimum vertex connectivity. <p> Without fast matrix multiplication, the Monte-Carlo algorithm derived from <ref> [2, 3, 16] </ref> runs in time O (kn 2:5 log n=(log n log k)). # Our algorithm actually runs in slightly faster; i.e.
Reference: [3] <author> J. Cheriyan, M. Y. Kao, and R. Thurimella, </author> <title> Scan-first search and sparse certificates|an improved parallel algorithm for k-vertex connectivity, </title> <journal> SIAM Journal on Computing, </journal> <volume> 22, </volume> <year> 1993, </year> <pages> 157-174. </pages>
Reference-contexts: Without fast matrix multiplication, the Monte-Carlo algorithm derived from <ref> [2, 3, 16] </ref> runs in time O (kn 2:5 log n=(log n log k)). # Our algorithm actually runs in slightly faster; i.e.
Reference: [4] <author> G.B. Dantzig and D. R. Fulkerson. </author> <title> On the max-flow min-cut theorem of networks. Linear Ineuql-ities and Related Systems, </title> <journal> Annals of Math. </journal> <volume> Study 38, </volume> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1956, </year> <pages> 215-221. </pages>
Reference-contexts: We describe next the high-level algorithm for computing (u). We assume that V = fv 1 ; v 2 ; : : : ; v n g and that u = v 1 . As pointed out in <ref> [4] </ref>, (u; v) = jf (u 00 ; v 0 )j in G 0 .
Reference: [5] <author> S. </author> <title> Even, An algorithm for determining whether the connectivity of a graph is at least k. </title> <journal> SIAM Journal on Computing, </journal> <volume> 4, </volume> <year> 1975, </year> <pages> 393-396. </pages>
Reference: [6] <author> S. Even and R. E. </author> <title> Tarjan Network flow and testing graph connectivity, </title> <journal> SIAM Journal on Computing, </journal> <volume> 4, </volume> <year> 1975, </year> <pages> 507-518. </pages>
Reference-contexts: We proceed in this section by discussing our techniques. Then we describe applications of the basic algorithms. We conclude this section by discussing some related work. Techniques. Consider the following reduction (see <ref> [6] </ref>) from vertex connectivity to edge connectivity in directed graphs; replace each vertex v with two vertices v 0 and v 00 connected by a directed arc fl Systems Research Center, Digital Equipment Corporation, 130 Lytton Ave, Palo Alto, CA 94301. Email: monika@src.dec.com.
Reference: [7] <author> H. N. Gabow. </author> <title> A matroid approach to finding edge connectivity and packing arborescences. </title> <booktitle> In Proc. 23rd Symp. on Theory of Computing, </booktitle> <year> 1991, </year> <pages> 112-122. </pages>
Reference-contexts: We can use this procedure to approximately determine in our deterministic vertex connectivity algorithm. Very recently, Karger [13] gave a randomized algorithm for computing the edge connectivity of a graph in time O (m log 3 n). The best deterministic time is O (m + 2 n log (n=)) <ref> [7] </ref> in uncapacitated graphs, and O (n 2 ) otherwise [15].
Reference: [8] <author> Z. Galil. </author> <title> Finding the vertex connectivity of graphs. </title> <journal> SIAM J. Comput., </journal> <volume> 9, </volume> <year> 1980, </year> <pages> 197-199. 12 </pages>
Reference: [9] <author> A. V. Goldberg, S. A. Plotkin, and P. M. Vaidya. </author> <title> Sublinear-Time Parallel Algorithms for Matching and Related Problems. </title> <journal> Journal of Algorithms, </journal> <volume> 14 </volume> <pages> 180-213, </pages> <year> 1993. </year>
Reference-contexts: We use this fact in one of our applications. We note that our analysis is similar to that in [1] and <ref> [9] </ref> which respectively contain improved and parallel pre-flow push algorithms for unbalanced bipartite graphs; unbalanced bipartite graphs being bipartite graphs where one side is significantly smaller than the other. Global vertex connectivity.
Reference: [10] <author> A. Goldberg and R. E. Tarjan. </author> <title> A New Approach to the Maximum Flow Problem. </title> <journal> Journal of the ACM, </journal> <volume> 35 (4), </volume> <year> 1988, </year> <pages> 921-940. </pages>
Reference-contexts: n k nodes of the form 1 It is interesting to note that the modification that they use is exactly the well-known gap heuristic used by practitioners to speed up the performance of maximum flow implementations. 2 deterministic randomized (M-C) Previous Results O (kn 2 m log (n 2 =m)) <ref> [10] </ref> O (n 2 m log n=(log n log k) log (n 2 =m)) [2] This Paper O (knm log n) O (nm log C min (log n; log n=(log n log k))) of nodes in a minimum vertex cut and C denotes the maximum capacity. deterministic randomized (M-C) randomized (L-V) <p> When the end of L (x 0 ) is reached, no admissible edge incident to x 0 exists (see <ref> [10] </ref>), and the algorithm either relabels x 0 or makes x 0 dormant. In either case, p (x 0 ) is reinitialized to point to the start of L (x 0 ).
Reference: [11] <author> J. Hao and J. Orlin. </author> <title> A Faster Algorithm for Finding the Minimum Cut in a Directed Graph. </title> <journal> Journal of Algorithms, </journal> <volume> 17, </volume> <year> 1994, </year> <pages> 424-446. </pages>
Reference-contexts: The proof of correctness and the analysis of the running time of the algorithm in <ref> [11] </ref> depends on the fact that the label of nodes never decreases and their specific "cut heuristic" (Cases (A) and (B) in the split procedure below). <p> Lemma 2.4 The algorithm maintains a W -valid distance labeling. Proof: See Appendix. Lemma 2.5 The distance labeling of nodes in V 0 are non-decreasing. Lemma 2.6 The algorithm maintains the following extended dormancy property <ref> [11] </ref>: (a) The node v 0 belongs to W . (b) For i &lt; j max, there is no edge of G 0 r in D i fi D j . (c) For each a 2 D there is no edge (a; b) in G 0 r with b 2 W <p> Lemma 2.7 If the algorithm for computing the maximum flow f (S; v 0 ) terminates, then f is maximum S-v 0 -flow. Proof: The proof of Property 1 <ref> [11] </ref> applies since it only relies on the extended dormancy property. 9 2.2.6 Running Time Analysis We call a set of integers 2-consecutive if in any sorted ordering of the integers the difference between two consecutive integers is at most 2.
Reference: [12] <author> M. R. Henzinger. </author> <title> Approximating Minimum Cuts under Insertions. </title> <booktitle> Proc. 22nd International Colloquium on Automata, Languages, and Programming, </booktitle> <publisher> LNCS 944, Springer-Verlag, </publisher> <year> 1995, </year> <pages> pages 280-291. </pages>
Reference-contexts: Recently, however, it was shown that vertex connectivity in uncapacitated graphs could be 2-approximated in time O (n 2 min (; p n)) by repeatedly determining =2-connected subgraphs of the graph and replacing them by complete subgraphs <ref> [12] </ref>. We can use this procedure to approximately determine in our deterministic vertex connectivity algorithm. Very recently, Karger [13] gave a randomized algorithm for computing the edge connectivity of a graph in time O (m log 3 n).
Reference: [13] <author> D. Karger. </author> <title> Minimum Cuts in Near-Linear Time. </title> <note> to appear in Proc. 28th Symp. on Theory of Comput., </note> <year> 1996. </year>
Reference-contexts: We can use this procedure to approximately determine in our deterministic vertex connectivity algorithm. Very recently, Karger <ref> [13] </ref> gave a randomized algorithm for computing the edge connectivity of a graph in time O (m log 3 n). The best deterministic time is O (m + 2 n log (n=)) [7] in uncapacitated graphs, and O (n 2 ) otherwise [15].
Reference: [14] <author> N. Linial, L. Lovasz, and A. Wigderson. </author> <title> Rubber Bands, Convex Embeddings and Graph Connectivity. </title> <journal> Combinatorica, </journal> <volume> 8 (1), </volume> <year> 1988, </year> <pages> 91-102. </pages>
Reference: [15] <author> D. Matula. </author> <title> Determining Edge Connectivity in O(nm). </title> <booktitle> Proc. 28th Symp. on Foundations of Com-put. Sci., </booktitle> <year> 1987, </year> <pages> 249-251. </pages>
Reference-contexts: Very recently, Karger [13] gave a randomized algorithm for computing the edge connectivity of a graph in time O (m log 3 n). The best deterministic time is O (m + 2 n log (n=)) [7] in uncapacitated graphs, and O (n 2 ) otherwise <ref> [15] </ref>.
Reference: [16] <author> H. Nagamochi and T. Ibaraki. </author> <title> Linear time algorithms for finding a sparse k-connected spanning subgraph of a k-connected graph. </title> <journal> Algorithmica, </journal> <volume> 7, </volume> <year> 1992, </year> <pages> 583-596. </pages>
Reference-contexts: Without fast matrix multiplication, the Monte-Carlo algorithm derived from <ref> [2, 3, 16] </ref> runs in time O (kn 2:5 log n=(log n log k)). # Our algorithm actually runs in slightly faster; i.e.

References-found: 16

