URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-96-1319/CS-TR-96-1319.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-96-1319/
Root-URL: http://www.cs.wisc.edu
Email: praveen,miron,raghu@cs.wisc.edu  
Title: The Case for Enhanced Abstract Data Types  
Author: Praveen Seshadri Miron Livny Raghu Ramakrishnan 
Address: U.Wisconsin, Madison WI  
Affiliation: Computer Sciences Department  
Abstract: This paper is based on the thesis that the current notions of abstract data types in object-relational systems fall short of their potential in terms of usability, functionality and performance. We make the case that the ADT mechanisms in current O-R systems actually provide only limited support for complex data. Instead, we propose an enhanced notion of ADTs (E-ADTs ), by permitting each E-ADT to define a declarative language, query optimizer, execution engine, catalog management and storage management for data objects of that particular type. These extensions are in addition to the existing ADT functionality (which provides methods/functions over objects). E-ADTs can be significantly easier to use, can provide greater functionality to the user, and can lend themselves to much more efficient implementations. Further, the E-ADT paradigm results in a plug-and-play system in which complex data types can be developed and can function independently of each other. The proposed architecture has been used in the PREDAT OR database system to integrate relational data with sequence data in an extensible yet efficient manner. We use our experience from this implementation to describe the system-level interfaces needed, as well as possible migration paths that existing database systems can use to adopt the E-ADT paradigm.
Abstract-found: 1
Intro-found: 1
Reference: [BDK92] <author> F. Bancilhon, C. Delobel, and P. Kanellakis. </author> <title> Building an Object-Oriented Database System: The Story of O2. </title> <publisher> Morgan-Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: The issues regarding support for ADTs in database systems were first explored in [Sto86]. There has been extensive work on nested data models (especially nested relational models [Hul87]), and there is even a commercial database system, UniData [Uni93], based on such a model. Object-oriented systems like O2 <ref> [BDK92] </ref> also support a nested model with composite objects. The recently proposed OQL query language [Cat94] for OO databases allows collection types to be nested, and permits nested queries over them. The idea of enhancing ADTs with query language and query processing capabilities seems to be unique to PREDAT OR.
Reference: [Cat94] <author> R.G.G. Cattell. </author> <title> The Object Database Standard:ODMB-93. </title> <address> Morgan-Kaufman, </address> <year> 1994. </year>
Reference-contexts: There has been extensive work on nested data models (especially nested relational models [Hul87]), and there is even a commercial database system, UniData [Uni93], based on such a model. Object-oriented systems like O2 [BDK92] also support a nested model with composite objects. The recently proposed OQL query language <ref> [Cat94] </ref> for OO databases allows collection types to be nested, and permits nested queries over them. The idea of enhancing ADTs with query language and query processing capabilities seems to be unique to PREDAT OR.
Reference: [CCH + 95] <author> M. Carey, W. Cody, L. Haas, W. Niblack, M. Arya, R. Fagin, M. Flickner, D. Lee, D. Petkovic, P. Schwarz, J. Thomas, M. Tork-Roth, J. Williams, and E. Wimmers. </author> <title> Querying Multimedia Data From Multiple Repositories By Content: The Garlic Project. </title> <booktitle> Proceedings of the IFIP Working Conference on Visual Database Systems, </booktitle> <address> Lausanne, Switzerland, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: Within the system, the queries may be mapped into subexpressions belonging to the various component systems and expressed in the corresponding languages. We observe that this approach contrasts with the popular approach of providing heterogeneity by writing "wrappers" <ref> [CGMH + 94, CCH + 95] </ref>. In the wrapper-based approach to integrating diverse systems, each system provides a common abstraction of its data, usually using an object-oriented model. This common abstraction is provided by implementing a wrapper around each system.
Reference: [CDF + 93] <author> M.J. Carey, D.J. DeWitt, M.J. Franklin, N.E. Hall, M. McAuliffe, J.F. Naughton, D.T. Schuh, M.H. Solomon, C.K. Tan, O. Tsatalos, S. White, and M.J. Zwilling. </author> <title> Shoring up persistent objects. </title> <booktitle> In Proceedings of ACM SIGMOD '94 International Conference on Management of Data, </booktitle> <address> Minneapolis, MN, </address> <pages> pages 526-541, </pages> <year> 1993. </year>
Reference-contexts: The server is built on top of a layer of common database utilities that all E-ADTs can use. Code to handle arithmetic and boolean expressions, constant values and functions is part of this layer. The primary portion of the utility layer is the SHORE Storage Manager <ref> [CDF + 93] </ref>. SHORE provides facilities for concurrency control, recovery and buffer management for large volumes of data. It also provides a threads package that interacts with the rest of the storage management layers; PREDAT OR uses this package to build a multi-threaded server.
Reference: [CGMH + 94] <author> S. Chawathe, H. Garcia-Molina, J. Hammer, K. Ireland, Y. Papakonstantinou, J. Ullman, and J. Widom. </author> <title> The TSIMMIS Project: Integration of Heterogeneous Information Sources. </title> <booktitle> In "Proceedings of the IPSJ Conference, </booktitle> <address> Tokyo, Japan", </address> <month> October </month> <year> 1994. </year>
Reference-contexts: Within the system, the queries may be mapped into subexpressions belonging to the various component systems and expressed in the corresponding languages. We observe that this approach contrasts with the popular approach of providing heterogeneity by writing "wrappers" <ref> [CGMH + 94, CCH + 95] </ref>. In the wrapper-based approach to integrating diverse systems, each system provides a common abstraction of its data, usually using an object-oriented model. This common abstraction is provided by implementing a wrapper around each system.
Reference: [CW85] <author> Luca Cardelli and Peter Wegner. </author> <title> On Understanding Types, Data Abstraction, and Polymorphism. </title> <journal> ACM Computing Surveys, </journal> <volume> 17(4) </volume> <pages> 471-522, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: This is totally analogous to thinking of all tables in an RDBMS as relations, with meta-information for each relation specifying the schema and other properties. The term "parametric types" <ref> [CW85] </ref> has also been used in this context to describe a type which is parameterized by additional meta-information. 2.2 Storing the Matrix There may be several different implementations of a matrix.
Reference: [DKL + 94] <author> D.J. DeWitt, N. Kabra, J. Luo, J.M. Patel, and J. Yu. </author> <title> Client-server paradise. </title> <booktitle> In Proceedings of the Twentieth International Conference on Very Large Databases (VLDB), </booktitle> <address> Santiago, Chile, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: Relational databases that support such type extensibility are called "object-relational" or OR for short (examples include Illustra [Ill94], Paradise <ref> [DKL + 94] </ref>, and Postgres [SRH90]). For the sake of concreteness, most of our arguments be restricted in this paper to OR databases, but we will extend them to OODBs as well.
Reference: [DKS92] <author> W. Du, R. Krishnamurthy, and M.C. Shan. </author> <title> Query Optimization in Heterogeneous Database Management Systems. </title> <booktitle> In Proceedings of the Eighteenth International Conference on Very Large Databases (VLDB), Van-couver, Canada, </booktitle> <pages> pages 277-291, </pages> <year> 1992. </year>
Reference-contexts: Consequently, strict transaction semantics may not be possible (we note that this is a difficult problem anyway in heterogeneous systems [Moh95]). Finding a common cost model across multiple database systems is a difficult research area <ref> [DKS92] </ref>, and some approximate cost model must be used.
Reference: [Hul87] <author> Richard Hull. </author> <title> A Survey of Theoretic Research on Typed Complex Database Objects. </title> <editor> In J. Paradeans, editor, </editor> <booktitle> Databases, </booktitle> <pages> pages 193-256. </pages> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1987. </year>
Reference-contexts: The issues regarding support for ADTs in database systems were first explored in [Sto86]. There has been extensive work on nested data models (especially nested relational models <ref> [Hul87] </ref>), and there is even a commercial database system, UniData [Uni93], based on such a model. Object-oriented systems like O2 [BDK92] also support a nested model with composite objects.
Reference: [Ill94] <institution> Illustra Information Technologies, Inc, </institution> <address> 1111 Broadway, Suite 2000, Oakland, CA 94607. </address> <note> Illustra User's Guide, </note> <month> June </month> <year> 1994. </year>
Reference-contexts: Relational databases that support such type extensibility are called "object-relational" or OR for short (examples include Illustra <ref> [Ill94] </ref>, Paradise [DKL + 94], and Postgres [SRH90]). For the sake of concreteness, most of our arguments be restricted in this paper to OR databases, but we will extend them to OODBs as well. <p> However, for important types of complex data (like images, time-series, matrixes, arrays, etc.), the ADT functionality is implemented by database system developers and is provided as a library (often called a "datablade" <ref> [Ill94] </ref>). We should therefore make the distinction between "user-defined ADTs" and "developer-defined datablade ADTs". The user-defined ADTs are usually relatively simple (for example, a user may define a "line" ADT as a struct containing two fl Praveen Seshadri was supported by IBM Research Grant 93-F153900-000 and an IBM Cooperative Fellowship. <p> The choice of implementation may be specified by the user or decided automatically by code provided as part of the ADT. This functionality is already present in the Illustra database system <ref> [Ill94] </ref>. Of course, there may be some ADTs for which a single implementation may suffice.
Reference: [ISO93] <author> ISO-ANSI. </author> <note> ISO-ANSI Working Draft: Database Language SQL2 and SQL3, 1993. X3H2; ISO/IEC JTC1/SC21/WG3. </note>
Reference-contexts: This approach suffers from a lack of both efficiency and extensibility. The other approach is to try to "flatten" all complex data into tables which can then be manipulated using SQL. Since SQL is becoming a computationally complete language <ref> [ISO93] </ref>, this approach has the potential to provide the desired functionality without dramatic changes to the relational database. Unfortunately, queries may be very awkward to pose, and extremely inefficient to evaluate. The ADT approach has gradually gained acceptance as being superior to these two earlier approaches.
Reference: [LMW96] <author> Leonid Libkin, Rona Machlin, and Limsoon Wong. </author> <title> A Query Language for Multidimensional Arrays: Design, Implementation, and Optimization Techniques. </title> <booktitle> In Proceedings of ACM SIGMOD '96 International Conference on Management of Data, </booktitle> <address> Montreal, Canada, </address> <year> 1996. </year> <month> 18 </month>
Reference-contexts: We will also assume for simplicity that the query language for matrices is called MQL, and has a functional syntax exactly as is used in the query. We note that there have been other query languages proposed for multi-dimensional arrays ( <ref> [LMW96] </ref>), and any of these could be used instead. We now modify the syntax of the query, so that the matrix sub-expression is "marked" as belonging to the MQL query language. <p> Optimization techniques for operations in this domain are discussed in [SLR94], and we have shown that they can result in performance improvements of a couple of orders of magnitude [SLR96]. Recent work dealing with multi-dimensional arrays <ref> [LMW96] </ref> has suggested optimization techniques for array operations. There has also been work on optimizing manipulations of images, chemical molecules, genome sequences, lists, etc. Our contribution in this paper is a mechanism to combine these contributions together under a common systems framework.
Reference: [MDZ93] <author> Gail Mitchell, Umeshwar Dayal, and Stanley Zdonik. </author> <title> Control of an Extensible Query Optimizer: A Planning--Based Approach. </title> <booktitle> In Proceedings of the Nineteenth International Conference on Very Large Databases (VLDB), Dublin, Ireland, </booktitle> <pages> pages 517-528, </pages> <year> 1993. </year>
Reference-contexts: The loosely-coupled architecture with multiple top-level collection types with different query languages also appears to be novel. The notion of breaking a query into regions, each of which is optimized separately is similar in flavor to the "blackboard" architecture for relational query optimizers proposed in <ref> [MDZ93] </ref>; however, that work was not directed at supporting operations on complex data types. As an interesting counterpoint to the approach taken here, there have been efforts that try to find a holistic solution to the problem of querying new data types.
Reference: [Moh95] <author> C. Mohan. </author> <title> An Overview of the Exotica Research Project on Workflow Management Systems. </title> <booktitle> In Proceedings of the 6th International Workshop on High Performance Transaction Systems, Asilomar, </booktitle> <month> September </month> <year> 1995. </year>
Reference-contexts: Consequently, strict transaction semantics may not be possible (we note that this is a difficult problem anyway in heterogeneous systems <ref> [Moh95] </ref>). Finding a common cost model across multiple database systems is a difficult research area [DKS92], and some approximate cost model must be used.
Reference: [PHH92] <author> Hamid Pirahesh, Joseph Hellerstein, and Waqar Hasan. </author> <title> Extensible/Rule Based Query Rewrite Optimization in Starburst. </title> <booktitle> In Proceedings of ACM SIGMOD '92 International Conference on Management of Data, </booktitle> <address> San Diego, CA, </address> <year> 1992. </year>
Reference-contexts: It might be possible to recognize that it is the very same E-ADT on both sides of the expression interface, and merge the two expressions. The resulting merged expression might result in more efficient performance (possibly using techniques like those suggested in <ref> [PHH92] </ref>). Extrapolating from this, if there are two similar E-ADTs like relations and sequences involved in a query, it might be possible to propagate information from one E-ADT expression to the other. For example, a selection condition might be pushed across the interface.
Reference: [SHR + 96] <author> P. Seshadri, J. Hellerstein, R. Ramakrishnan, H. Pirahesh, T.Y.C. Leung, D. Srivastava, S. Sudarshan, and P. Stuckey. </author> <title> Cost-Based Optimization for Magic: Algebra and Implementation. </title> <booktitle> In Proceedings of ACM SIGMOD '96 International Conference on Management of Data, </booktitle> <address> Montreal, Canada, </address> <year> 1996. </year>
Reference-contexts: If each expression also provides a "set-at-a-time" plan (i.e., given a set of arguments, instead of a single one, evaluate the expression for each of the arguments), then this provides a set-oriented interface across E-ADTs . Recent work <ref> [SHR + 96] </ref> has described how cost-based optimization can be used by a database system to determine how best to utilize set-oriented plans. The same techniques can be applied to E-ADT queries as well.
Reference: [SLR94] <author> Praveen Seshadri, Miron Livny, and Raghu Ramakrishnan. </author> <title> Sequence Query Processing. </title> <booktitle> In Proceedings of ACM SIGMOD '94 International Conference on Management of Data, </booktitle> <address> Minneapolis, MN, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: There has been much recent work on database techniques to support and optimize manipulations of complex data types. We have extensively studied support for sequence data (which can be used to model time-series and event streams). Optimization techniques for operations in this domain are discussed in <ref> [SLR94] </ref>, and we have shown that they can result in performance improvements of a couple of orders of magnitude [SLR96]. Recent work dealing with multi-dimensional arrays [LMW96] has suggested optimization techniques for array operations. There has also been work on optimizing manipulations of images, chemical molecules, genome sequences, lists, etc. <p> It is reasonable to expect that optimizations of expressions involving other kinds of complex 12 data will also require rules of similar complexity. In fact, our experience with optimizing sequence queries bears out this expectation <ref> [SLR94] </ref>. The other limitation arises due to the fact that these rules are applied as heuristics, and not in a cost-based manner.
Reference: [SLR96] <author> Praveen Seshadri, Miron Livny, and Raghu Ramakrishnan. </author> <title> The Design and Implementation of a Sequence Database System. </title> <booktitle> In Proceedings of the Twenty Second International Conference on Very Large Databases (VLDB), </booktitle> <address> Bombay, India, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: At least in the context of sequence data (which is one specific kind of complex data), the merits of this approach over the ADT-method approach have been clearly demonstrated in a quantitative manner <ref> [SLR96] </ref>. The ability to name objects belonging to different E-ADTs allows any E-ADT to be the top-level type. Relations are modeled on par with other E-ADTs . <p> We have extensively studied support for sequence data (which can be used to model time-series and event streams). Optimization techniques for operations in this domain are discussed in [SLR94], and we have shown that they can result in performance improvements of a couple of orders of magnitude <ref> [SLR96] </ref>. Recent work dealing with multi-dimensional arrays [LMW96] has suggested optimization techniques for array operations. There has also been work on optimizing manipulations of images, chemical molecules, genome sequences, lists, etc. Our contribution in this paper is a mechanism to combine these contributions together under a common systems framework. <p> With this as a basic enhancement, it is not very difficult to now permit any suitable language syntax for the string argument that denotes the query expression. For example, when implementing support for sequences, we found it convenient to use the Sequin query language for the sequence query subexpressions <ref> [SLR96] </ref>. 14 5.3.6 Multiple Top-Level Types So far, we have still assumed that SQL is the top-level query language, and there are various subexpressions within an SQL query that manipulate objects of other complex data types.
Reference: [SLVZ95] <author> Bharati Subramaniam, Theodore Leung, Scott Vandenberg, and Stanley Zdonik. </author> <title> The AQUA Approach to Querying Lists and Trees in Object-Oriented Databases. </title> <booktitle> In Proceedings of the Eleventh IEEE Conference on Data Engineering, </booktitle> <address> Taipei, Taiwan, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: A system based on this model would require a single unified algebra that can represent all operations over the various types of data (one such proposal is the Aqua algebra <ref> [SLVZ95] </ref>). While in this scenario, the entire query expression can be declarative, the important question is whether such a system is extensible, and whether it is practical. <p> Instead of breaking a query into many parts with local query optimization, these approaches try to find a global integrated solution. Obviously, this requires that the entire query be modeled somehow in an integrated framework. AQUA <ref> [SLVZ95] </ref> is an algebraic framework that has been proposed for this purpose, while CPL/Kleisli [Won94] is a framework based on monoid theory. The primary difficulty is that the integrated solution must be capable of modeling all possible queries and query processing strategies for all possible data types.
Reference: [SM95] <author> Michael Stonebraker and Dorothy Moore. </author> <title> Object-Relational DBMSs: The Next Great Wave. ISBN 1-55860-397-2. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1995. </year>
Reference-contexts: This paper concerns itself with the datablade ADTs. Supporting new kinds of complex data is arguably one of the biggest challenges facing the database research community today. The datablade ADT paradigm has been promoted as the best approach to take in meeting this challenge <ref> [SM95] </ref>. To its credit, the ADT technology of O-R systems is a lot more efficient than the "blob" technology used by purely relational systems to support complex data (in which complex data objects are byte extents that are interpreted solely by the application).
Reference: [SRH90] <author> Michael Stonebraker, Lawrence Rowe, and Michael Hirohama. </author> <title> The Implementation of POSTGRES. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1) </volume> <pages> 125-142, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Relational databases that support such type extensibility are called "object-relational" or OR for short (examples include Illustra [Ill94], Paradise [DKL + 94], and Postgres <ref> [SRH90] </ref>). For the sake of concreteness, most of our arguments be restricted in this paper to OR databases, but we will extend them to OODBs as well.
Reference: [SS94] <author> Sunita Sarawagi and Michael Stonebraker. </author> <title> Efficient Organization of Large Multidimensional Arrays. </title> <booktitle> In Proceedings of the Tenth IEEE Conference on Data Engineering, </booktitle> <year> 1994. </year>
Reference-contexts: For example, there is the issue of whether the matrix is stored in a row-major or a column-major format (in fact for multi-dimensional matrices, there are many more possibilities), or whether it is broken into tiles <ref> [SS94] </ref>. Further, different implementation techniques may be used depending on the size of the matrix. Depending on the sparseness of the matrix, compression may be used. How can one specify what storage implementation is to be used? The ADT solution is to add this information to the type constructor.
Reference: [Sto86] <author> Michael Stonebraker. </author> <title> Inclusion of New Types in Relational Data Base Systems. </title> <booktitle> In Proceedings of the Second IEEE Conference on Data Engineering, </booktitle> <pages> pages 262-269, </pages> <year> 1986. </year>
Reference-contexts: For the sake of concreteness, most of our arguments be restricted in this paper to OR databases, but we will extend them to OODBs as well. The move towards database type extensibility began in the early 80's, notably through work by Stonebraker on the Ingres database system <ref> [Sto86] </ref>, leading to the the development of the Postgres system. A dozen years later, similar ideas have moved from research proposals to the forefront of today's object-relational (OR) technology. The current OR notion of Abstract Data Types (ADTs) permits users to define their own types using compositions of basic types. <p> The issues regarding support for ADTs in database systems were first explored in <ref> [Sto86] </ref>. There has been extensive work on nested data models (especially nested relational models [Hul87]), and there is even a commercial database system, UniData [Uni93], based on such a model. Object-oriented systems like O2 [BDK92] also support a nested model with composite objects.
Reference: [Uni93] <institution> UniData Inc., </institution> <address> Denver, CO. </address> <note> UniSQL User's Guide (Release 2.1), </note> <year> 1993. </year>
Reference-contexts: The issues regarding support for ADTs in database systems were first explored in [Sto86]. There has been extensive work on nested data models (especially nested relational models [Hul87]), and there is even a commercial database system, UniData <ref> [Uni93] </ref>, based on such a model. Object-oriented systems like O2 [BDK92] also support a nested model with composite objects. The recently proposed OQL query language [Cat94] for OO databases allows collection types to be nested, and permits nested queries over them.
Reference: [Won94] <author> Limsoon Wong. </author> <title> Querying Nested Collections. </title> <type> PhD thesis, </type> <institution> U.Pennsylvania, </institution> <year> 1994. </year>
Reference-contexts: Obviously, this requires that the entire query be modeled somehow in an integrated framework. AQUA [SLVZ95] is an algebraic framework that has been proposed for this purpose, while CPL/Kleisli <ref> [Won94] </ref> is a framework based on monoid theory. The primary difficulty is that the integrated solution must be capable of modeling all possible queries and query processing strategies for all possible data types.
References-found: 25

