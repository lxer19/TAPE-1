URL: ftp://claude.ifi.unizh.ch/pub/techreports/TR-94/ifi-94.16.ps.gz
Refering-URL: http://www.cs.gatech.edu/people/home/jmankoff/collab-immers-env.html
Root-URL: 
Title: The SAMOS Active DBMS Prototype  
Author: Stella Gatziu, Andreas Geppert, Klaus R. Dittrich 
Date: 94.16  
Address: fr Informatik, Universitt Zrich 1  
Affiliation: Institut  
Pubnum: Technical Report  
Abstract: We describe SAMOS, an active object-oriented database management system prototype. SAMOS offers a powerful rule definition language, including a small yet powerful set of event definition facilities. It is able to detect primitive and composite events automatically and efficiently. Upon event detection, SAMOS executes rules attached to the occurred events.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> U. Dayal: </author> <title> Active Database Management Systems. </title> <booktitle> Proc. 3 rd Int. Conf. on Data and Knowledge Bases, </booktitle> <address> Jerusalem, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction Active database management systems (aDBMSs) <ref> [1] </ref> have recently found great interest as a topic of database research, and restricted aDBMS-functionality is even offered by some commercial relational systems. An aDBMS implements reactive behavior in that it is able to detect situations in the database and to perform corresponding actions specified by the user.
Reference: 2. <author> S. Gatziu, A. Geppert, K.R. Dittrich: </author> <title> Integrating Active Mechanisms into an Object-Oriented Database System. </title> <booktitle> Proc. of the 3 rd Intl. Workshop on Database Programming Languages (DBPL), </booktitle> <address> Nafplion, Greece, </address> <month> August </month> <year> 1991. </year>
Reference-contexts: Applications that require such reactive behavior are thus freed from performing polling in order to detect interesting situations and from encoding reactions (possibly redundantly) in applications. SAMOS 2 <ref> [2, 3] </ref> is our home-grown active object-oriented database management system whose development has been started in 1991. To a large extent, SAMOS is operational now and thus is among the first demonstratable active object-oriented DBMSs. The prototype implementation of SAMOS is characterized by a layered architecture. <p> Active features have been integrated into an object-oriented data model. Concepts like classes, object identity, modelling of behavior, inheritance, have been exploited <ref> [2] </ref>. In addition to the data definition language of ObjectStore, SAMOS provides a rule definition language as a means to specify Event-Condition-Action-rules (ECA-rules). It provides constructors for the definition of events, conditions, and actions. <p> In this case, priorities specify the order to be imposed on the execution of the rules. Priorities form a partial order on rules. Rules that are not ordered (transitively) by priorities are executed in an arbitrary (system-determined) order. More details on rule specification in SAMOS can be found in <ref> [2] </ref>, details of the event definition part of the rule definition language are described in [4]. 3 The SAMOS Prototype 3.1 Overview The SAMOS prototype consists of three building blocks (Figure 1): the object-oriented DBMS ObjectStore, a layer on top of ObjectStore implementing the active functionality, and a set of tools.
Reference: 3. <author> S. Gatziu, K.R. Dittrich: SAMOS: </author> <title> An Active, Object-Oriented Database System. </title> <journal> Bulletin of the IEEE TC on Data Engineering 15 </journal> <pages> 1-4, </pages> <year> 1992. </year>
Reference-contexts: Applications that require such reactive behavior are thus freed from performing polling in order to detect interesting situations and from encoding reactions (possibly redundantly) in applications. SAMOS 2 <ref> [2, 3] </ref> is our home-grown active object-oriented database management system whose development has been started in 1991. To a large extent, SAMOS is operational now and thus is among the first demonstratable active object-oriented DBMSs. The prototype implementation of SAMOS is characterized by a layered architecture.
Reference: 4. <author> S. Gatziu, K.R. Dittrich: </author> <title> Events in an Active Object-Oriented Database System. </title> <editor> In N.W. Paton, H.W. Williams (eds): </editor> <booktitle> Proc. Workshop on Rules in Database Systems, </booktitle> <address> Edinburgh, UK, </address> <note> September 1993 (Workshops in Computing, Springer-Verlag, </note> <year> 1994). </year>
Reference-contexts: Priorities form a partial order on rules. Rules that are not ordered (transitively) by priorities are executed in an arbitrary (system-determined) order. More details on rule specification in SAMOS can be found in [2], details of the event definition part of the rule definition language are described in <ref> [4] </ref>. 3 The SAMOS Prototype 3.1 Overview The SAMOS prototype consists of three building blocks (Figure 1): the object-oriented DBMS ObjectStore, a layer on top of ObjectStore implementing the active functionality, and a set of tools. <p> To make this information persistent, it has to be a part of the rulebase. The structure of the rulebase is described by the rule schema. Since SAMOS is an object-oriented database system, event descriptions and rules are represented as objects <ref> [4] </ref>. Thus, for such an object, all object-oriented characteristics are available. Since all these objects are stored in ObjectStore, atomicity and durability is supported for operations on the rulebase. <p> All user-defined event descriptions are objects of the class event_description (Figure 3). Henceforth, these objects are called event objects. A detailed description of the class hierarchy starting with event_description can be found in <ref> [4] </ref>. The attribute list_of_rules de Compiler Rule/Event Definitions ObjectStore Data/Rulebase SAMOS Runtime Components Analyzer 6 termines the rules (i.e., references to objects of the class rule) that have to be executed when this event has occurred.
Reference: 5. <author> S. Gatziu, K.R. Dittrich: </author> <title> Detecting Composite Events in an Active Database Systems Using Petri Nets. </title> <booktitle> Proc. of the 4 th Intl. Workshop on Research Issues in Data Engineering: Active Database Systems, </booktitle> <address> Houston, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: Based on these types, we can build the Petri net instance for each user-defined composite event description. All these Petri net instances together form the event detector for composite events. A detailed description of the detection of composite events can be found in <ref> [5] </ref>. 3.3.2 Activities Upon Primitive Event Detection Given the facilities to define events and rules and to compile these definitions, we now turn towards the activities upon the occurrence of a primitive event. These activities comprise the composite event detection and rule execution.
Reference: 6. <author> A. Geppert, K.R. Dittrich: </author> <title> Specification and Implementation of Consistency Constraints in Object-Oriented Database Systems: Applying Programming-by-Contract. </title> <type> Technical Report 94.14, </type> <institution> Computer Science Department, University of Zurich, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: One objec tive of the developed benchmark is to identify and to repair performance weaknesses in SAMOS. 11 We are also looking into some potential applications for active database systems. These application domains include DBMS-internal tasks such as consistency maintenance <ref> [6] </ref> as well as applications on top of DBMSs, such as banking, workow management, and soft ware engineering environments.
Reference: 7. <author> A. Geppert, S. Gatziu, K.R. Dittrich: </author> <title> 007 Meets the Beast: Performance Evaluation of an Active Object-Oriented Database Management System. </title> <type> Technical Report, </type> <institution> Institut fuer Informatik, Universitt Zrich, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: The prototype demonstration will illustrate rule definition, event detection, and rule execution in SAMOS with a sample application. We are currently investigating performance of active object-oriented DBMSs <ref> [7] </ref> and are comparing SAMOS with other aDBMSs from a performance point of view. One objec tive of the developed benchmark is to identify and to repair performance weaknesses in SAMOS. 11 We are also looking into some potential applications for active database systems.
Reference: 8. <author> C. Lamb, G. Landis, J. Orenstein, D. Weinreb: </author> <title> The ObjectStore Database System. </title> <journal> CACM 34:10, </journal> <year> 1991. </year>
Reference-contexts: Authors address: Institut fr Informatik, Universitt Zrich, Winterthurerstr. 190, CH-8057 Zurich, Switzerland. Fax: +41-1-363 0035, Email: -gatziu | geppert| dittrich-@ifi.unizh.ch 2. Swiss Active-Mechanism based Object-oriented database System 2 The prototype implementation of SAMOS uses ObjectStore <ref> [8] </ref> as the underlying passive DBMS. ObjectStore is a commercial object-oriented database management system developed by Object Design as a persistent extension of C++. SAMOS currently runs on SUN machines under UNIX. The remainder of this paper is organized as follows.
References-found: 8

