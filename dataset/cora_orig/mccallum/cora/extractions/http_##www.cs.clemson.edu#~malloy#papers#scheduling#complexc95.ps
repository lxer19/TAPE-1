URL: http://www.cs.clemson.edu/~malloy/papers/scheduling/complexc95.ps
Refering-URL: http://www.cs.clemson.edu/~malloy/scheduling_papers.html
Root-URL: http://www.cs.clemson.edu
Title: 3.2.5 Equivalence of a solution for X3C and that for COP T of cache misses,
Author: q). n j n j Michael R. Garey and David S. Johnson. W.H. Freeman And Company, B. A. Malloy, E.L. Lloyd, and M.L. Soffa. 
Address: 1979.  
Affiliation: Computer And  Reading, Bell Laboratories,  
Date: [2]  May 1994.  
Note: C i 7! i, 1 i n 3.2.4 Complexity of the transformation Lemma 3 The construction presented is polynomial. Proof: omitted. The proof can be found in [2]  Lemma 4 The number  Proof: omitted. The proof can be found in  Proof: omitted. The proof can be found in [2] 3.2.6 NP-completeness of COP T Lemma 6 COP T is in NPc. Proof: Proof is immediate from lemmae 1, 2, 3, 4 and 5 and the definition of NP-completeness[1].  1.  3.  will be scheduled as late as possible, or 4. n i has maximum precedence successors. 5 Conclusion References [1]  [3]  4  
Pubnum: 5(5):498-508,  
Abstract: In the last step we add a cache with n lines, n = jCj. We define the mapping from the vertices in G to the cache lines that the operands of these vertices reference as : We restrict the memory locations for the operand of these vertices such that no two C vertices or no two M vertices are allocated within the same memory line. No M vertex shares a memory line in common with a C vertex. Thus the operands of all the vertices labeled C and the vertices labeled M are assigned distinct memory locations. We thus obtain an instance of COP T by transformation of an arbitrary instance of X3C. We now show that the construction presented in section 3.2.3 is polynomial. From the construction presented in section 3.2.3 we know that we can transform an arbitrary instance of X3C to an instance of COP T in polynomial time. Now we show that such a transformation guarantees that the the COP T instance is a YES instance if and only if the corresponding X3C instance is a YES instance (and similarly for a NO instance). Lemma 5 An instance of X3C has an exact cover if the number of cache misses, k, in the constructed instance of COP T is given by k = 2 n + m q . scheduling problem that we address is NP-complete, we now present the the design of a heuristic for producing good schedules. The heuristic, a version of list scheduling, is a greedy approach where we try to schedule consecutively, grouping together wherever possible, all those statements containing operands that map to the same line both in memory and in the cache The heuristic is illustrated in Figure 4. We maintain a ready list of instructions whose precedence constraints have been satisfied. In each iteration, a node n i is chosen to be scheduled such that : 2. scheduling of n i will result in a hit for some n j , In this paper, we have presented a program representation, the schedule graph, that can be used to reorder instructions for improved data cache performance. Using the schedule graph, we have proven that the problem of data cache miss minimization is NP-complete. Finally, we have presented a heuristic that improves data cache performance in most cases[2]. [2] Devidas Gupta, Alice McRae, and Brian Malloy. Scheduling techniques for improving data cache performance. Technical Report 94-106, Department of Computer Science, Clemson University, Clemson, SC 29634, May 1994. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Michael R. Garey and David S. Johnson. </author> <title> Computer And Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman And Company, </publisher> <address> Reading, </address> <institution> Bell Laboratories, </institution> <year> 1979. </year>
Reference: [2] <author> Devidas Gupta, Alice McRae, and Brian Malloy. </author> <title> Scheduling techniques for improving data cache performance. </title> <type> Technical Report 94-106, </type> <institution> Department of Computer Science, Clemson University, Clemson, </institution> <address> SC 29634, </address> <month> May </month> <year> 1994. </year>

References-found: 2

