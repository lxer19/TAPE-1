URL: http://www.research.digital.com/SRC/personal/Martin_Abadi/Papers/srcact_revised.ps
Refering-URL: http://www.research.digital.com/SRC/personal/Martin_Abadi/allpapers.html
Root-URL: http://www.research.digital.com
Title: An Axiomatization of Lamport's Temporal Logic of Actions  
Author: Martin Abadi 
Date: October 12, 1990 revised March 4, 1993  
Abstract-found: 0
Intro-found: 1
Reference: [BK90] <editor> J. C. M. Baeten and J. W. Klop, editors. </editor> <title> CONCUR `90, Theories of Concurrency: Unification and Extension, </title> <booktitle> volume 458 of Lecture Notes in Computer Science, </booktitle> <address> Berlin, 1990. </address> <publisher> Springer-Verlag. </publisher>
Reference: [Gol87] <author> Robert Goldblatt. </author> <title> Logics of Time and Computation. </title> <booktitle> Number 7 in CSLI Lecture Notes. </booktitle> <publisher> CSLI, Stanford, </publisher> <address> California, </address> <year> 1987. </year>
Reference-contexts: Accordingly, we are going to base our axiomatization on a usual one, a system known as D (in [HC68]) or S4.3Dum (in <ref> [Gol87] </ref>). The axioms and rules for D are: 1. ` 2 (F ) G) ) (2F ) 2G) 2. ` 2F ) F 4. ` 2 (2F ) G) _ 2 (2G ) F ) 6. If ` F then ` 2F . 7. <p> Thus, a model is obtained from the balloon by linearizing the bag in any way whatsoever. This and similar constructions appear in <ref> [Gol87] </ref>. A formula holds at a state s in a behavior if it holds in the suffixes of the behavior that start with s. A formula holds at a state s in a balloon if it holds at s in all linearizations of the balloon.
Reference: [GPSS80] <author> D. Gabbay, A. Pnueli, S. Shelah, and Y. Stavi. </author> <title> On the temporal analysis of fairness. </title> <booktitle> In Seventh Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 163-173. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1980. </year>
Reference-contexts: All the other axioms are rather straightforward. Our axiomatization could perhaps be simplified. It is worth recalling, however, that a less expressive logic does not always have a simpler proof system. For instance, the system for temporal logic with "next" is simpler than D <ref> [GPSS80] </ref>, yet the "next" modality increases the expressiveness of the logic and its complexity (from coNP-complete to PSPACE-complete [SC85]). 8 4.2 Some Consequences of the Axioms Some interesting consequences of the axioms are important in our complete ness proof.
Reference: [HC68] <author> G. E. Hughes and M. J. Cresswell. </author> <title> An Introduction to Modal Logic. </title> <publisher> Methuen Inc., </publisher> <address> New York, </address> <year> 1968. </year>
Reference-contexts: Finally, we prove the completeness of the axioms. 4.1 The System The temporal logic of actions is an extension of the common temporal logic with the single modality 2. Accordingly, we are going to base our axiomatization on a usual one, a system known as D (in <ref> [HC68] </ref>) or S4.3Dum (in [Gol87]). The axioms and rules for D are: 1. ` 2 (F ) G) ) (2F ) 2G) 2. ` 2F ) F 4. ` 2 (2F ) G) _ 2 (2G ) F ) 6. If ` F then ` 2F . 7. <p> If ` F and ` F ) G then ` G. Axiom 4 is a classical way to express that time is linear|that any two instants in the future are ordered. Axiom 5, indirectly attributed to Geach in <ref> [HC68] </ref>, is a simplification of the original 2 (2 (F ) 2F ) ) F ) ) (32F ) 2F ), due to Dummett and Lemmon; Axiom 5 expresses the discreteness of time.
Reference: [HM85] <author> Matthew Hennessy and Robin Milner. </author> <title> Algebraic laws for nonde-terminism and concurrency. </title> <journal> Journal of the ACM, </journal> <volume> 32(1) </volume> <pages> 137-161, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: The dual notation is hAi, which means that the computation has not halted and that the first action is an A action. (Notice that [A] and hAi are formulas, and not modalities as in dynamic logic [Pra76] and in Hennessy-Milner logic <ref> [HM85] </ref>.) In addition, the language includes the temporal operators 2 ("always") and 3 ("eventually"), and thus it is easy to write both safety and liveness properties [Pnu77]. However, the temporal logic of actions is not very expressive in some respects (just expressive enough).
Reference: [INM84] <author> INMOS. </author> <title> Occam Programming Manual. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Engle-wood Cliffs, New Jersey, </address> <year> 1984. </year>
Reference-contexts: In a CSP-like notation, this program is: [S :: fl [ [R ! true 2 R ! false] ; R ? ANY ] ] jj [R :: fl [S ? x ; S ! ANY ] ] (Here ANY is used as in Occam, for synchronization without message-passing <ref> [INM84] </ref> 1 .) We take a program, such as this one, to denote the set of behaviors that it generates. In the logic of actions, a behavior is a sequence of states. It may help to view a state as a snapshot of a device that executes the program.
Reference: [Lam89] <author> Leslie Lamport. </author> <title> A simple approach to specifying concurrent systems. </title> <journal> Communications of the ACM, </journal> <volume> 32(1) </volume> <pages> 32-45, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: One cannot define the "next" and the "until" operators of many previous temporal logics [Pnu81]. This is actually deliberate; formulas with nested occurrences of "until" are too often incomprehensible, and "next" violates the principle of invariance under stuttering, which is important for hierarchical and compositional reasoning <ref> [Lam89] </ref>. A proof system for the logic of actions might be obtained by translating into previous, richer formalisms. In this translation we forfeit the logic and two of its main advantages, understandable formulas and the possibility of reducing many arguments to simple calculations on actions.
Reference: [Lam90] <author> Leslie Lamport. </author> <title> A temporal logic of actions. </title> <type> Research Report 57, </type> <institution> Digital Equipment Corporation, Systems Research Center, </institution> <month> April </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Lamport recently invented a temporal logic of actions suitable for expressing concurrent programs and for reasoning about their computations <ref> [Lam90] </ref>. In this logic, actions have syntactic representations, which can be combined and analyzed. Lamport views an action as a state transition, and a computation as a sequence of states. <p> This logic, although not introduced in <ref> [Lam90] </ref>, is a formalization of Lamport's approach in a propositional setting. 3.1 Syntax We have a countably infinite collection of proposition symbols P 0 ; P 1 ; P 2 ; : : : and a countably infinite collection of action symbols A 0 ; A 1 ; A 2 ;
Reference: [Pnu77] <author> A. Pnueli. </author> <title> The temporal logic of programs. </title> <booktitle> In Proceedings of the 18th Symposium on the Foundations of Computer Science. IEEE, </booktitle> <month> November </month> <year> 1977. </year>
Reference-contexts: action is an A action. (Notice that [A] and hAi are formulas, and not modalities as in dynamic logic [Pra76] and in Hennessy-Milner logic [HM85].) In addition, the language includes the temporal operators 2 ("always") and 3 ("eventually"), and thus it is easy to write both safety and liveness properties <ref> [Pnu77] </ref>. However, the temporal logic of actions is not very expressive in some respects (just expressive enough). One cannot define the "next" and the "until" operators of many previous temporal logics [Pnu81].
Reference: [Pnu81] <author> A. Pnueli. </author> <title> The temporal semantics of concurrent programs. </title> <journal> Theoretical Computer Science, </journal> <volume> 13 </volume> <pages> 45-60, </pages> <year> 1981. </year>
Reference-contexts: However, the temporal logic of actions is not very expressive in some respects (just expressive enough). One cannot define the "next" and the "until" operators of many previous temporal logics <ref> [Pnu81] </ref>. This is actually deliberate; formulas with nested occurrences of "until" are too often incomprehensible, and "next" violates the principle of invariance under stuttering, which is important for hierarchical and compositional reasoning [Lam89]. A proof system for the logic of actions might be obtained by translating into previous, richer formalisms.
Reference: [Pra76] <author> Vaughan R. Pratt. </author> <title> Semantical considerations on Floyd-Hoare logic. </title> <booktitle> In 17th Symposium on Foundations of Computer Science, </booktitle> <pages> pages 109-121. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1976. </year> <month> 17 </month>
Reference-contexts: The dual notation is hAi, which means that the computation has not halted and that the first action is an A action. (Notice that [A] and hAi are formulas, and not modalities as in dynamic logic <ref> [Pra76] </ref> and in Hennessy-Milner logic [HM85].) In addition, the language includes the temporal operators 2 ("always") and 3 ("eventually"), and thus it is easy to write both safety and liveness properties [Pnu77]. However, the temporal logic of actions is not very expressive in some respects (just expressive enough).
Reference: [SC85] <author> A. P. Sistla and E. M. Clarke. </author> <title> The complexity of propositional linear temporal logic. </title> <journal> Journal of the ACM, </journal> <volume> 32(3) </volume> <pages> 733-749, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: It is worth recalling, however, that a less expressive logic does not always have a simpler proof system. For instance, the system for temporal logic with "next" is simpler than D [GPSS80], yet the "next" modality increases the expressiveness of the logic and its complexity (from coNP-complete to PSPACE-complete <ref> [SC85] </ref>). 8 4.2 Some Consequences of the Axioms Some interesting consequences of the axioms are important in our complete ness proof.
References-found: 12

