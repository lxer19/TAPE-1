URL: ftp://ftp.cs.rochester.edu/pub/papers/ai/95.tr570rev.Accelerating_partial_order_planners.ps.gz
Refering-URL: http://www.cs.rochester.edu/trs/ai-trs.html
Root-URL: 
Email: email: schubert@cs.rochester.edu  email: gerevini@irst.it  
Phone: tel.: 716-275-8845 fax: 716-461-2018 2  tel.: +39-461-314333 fax: +39-461-314591  
Title: Accelerating Partial Order Planners by Improving Plan and Goal Choices  
Author: Lenhart Schubert and Alfonso Gerevini 
Keyword: Improving Planning Efficiency, Planning Strategies, Partial Order Planning, Least Commitment Planning  
Note: The work of the first author was supported by Rome Lab contract F30602-91-C-0010.  
Address: Rochester, NY 14627-0226, USA  IRST, 38050 Povo, Trento, Italy  
Affiliation: 1 Dept. of Computer Science, University of Rochester  
Abstract: We describe some simple domain-independent improvements to plan-refinement strategies for well-founded partial order planning that promise to bring this style of planning closer to practicality. One suggestion concerns the strategy for selecting plans for refinement among the current (incomplete) candidate plans. We propose an A* heuristic that counts only steps and open conditions, while ignoring "unsafe conditions" (threats). A second suggestion concerns the strategy for selecting open conditions (goals) to be established next in a selected incomplete plan. Here we propose a variant of a strategy suggested by Peot & Smith and studied by Joslin & Pollack; the variant gives top priority to unmatchable open conditions (enabling the elimination of the plan), second-highest priority to goals that can only be achieved uniquely, and otherwise uses LIFO prioritization. The preference for uniquely achievable goals is a "zero-commitment" strategy in the sense that the corresponding plan refinements are a matter of deductive certainty, involving no guesswork. In experiments based on modifications of UCPOP, we have obtained improvements by factors ranging from 5 to several hundred for a variety of problems that are nontrivial for the unmodified version. Crucially, the hardest problems give the greatest improvements. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Barrett, K. Golden, S. Penberthy, and D. Weld. </author> <title> UCPOP user's manual. </title> <type> Technical Report 93-09-06, </type> <institution> Dept. of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, WA 98105, </address> <year> 1994. </year>
Reference-contexts: Thus we begin with a sketch of this algorithm, referring the reader to <ref> [1, 20] </ref> for details. In essence, UCPOP explores a space of partially specified plans, each paired with an agenda of goals still to be satisfied and threats still to be averted. <p> We have therefore chosen to stay with UCPOP's LIFO strategy whenever there are no unachievable or forced open conditions. This has led to very substantial improvements over LCFR in our experiments. 3 Experiments Using UCPOP In order to test our ideas we have modified version 2.0 of UCPOP <ref> [1] </ref>, replacing its default plan-selection strategy (S+OC+UC) and goal-selection strategy (LIFO) to incorporate strategies discussed in the previous sections.
Reference: [2] <author> A. Barrett and D. S. Weld. </author> <title> Partial-order planning: evaluating possible efficiency gains. </title> <journal> Artificial Intelligence, </journal> <volume> 67 </volume> <pages> 71-112, </pages> <year> 1994. </year>
Reference-contexts: These efforts have gained considerable momentum in recent years, leading both to extensions of earlier approaches, such as UCPOP [20] and BURIDAN [17], and systematic comparative performance evaluations (e.g., <ref> [2, 15] </ref>). Despite these efforts, it seems fair to say that well-founded planners still perform dismally in practical terms.
Reference: [3] <author> W.A. Bibel. </author> <title> A deductive solution for plan generation. </title> <journal> New Generation Computing, </journal> <volume> 4(2) </volume> <pages> 115-132, </pages> <year> 1986. </year>
Reference-contexts: This led to a renewal of efforts in the 80's to find viable approaches to well-founded planning, exemplified by novel algorithms such as BIGRESS [22, 16] (based on dynamic logic), Bibel's linear connection method for plan generation <ref> [3] </ref>, TWEAK [4] (Chapman's partial-order planner based on his "modal truth criterion") and SNLP [18] (another systematic partial-order planner using propositional STRIPS operators).
Reference: [4] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32(3) </volume> <pages> 333-377, </pages> <year> 1987. </year>
Reference-contexts: This led to a renewal of efforts in the 80's to find viable approaches to well-founded planning, exemplified by novel algorithms such as BIGRESS [22, 16] (based on dynamic logic), Bibel's linear connection method for plan generation [3], TWEAK <ref> [4] </ref> (Chapman's partial-order planner based on his "modal truth criterion") and SNLP [18] (another systematic partial-order planner using propositional STRIPS operators).
Reference: [5] <author> K. Currie and A. Tate. O-Plan: </author> <title> The open planning architecture. </title> <journal> Artificial Intelligence, </journal> <volume> 51(1), </volume> <year> 1991. </year>
Reference: [6] <editor> J. Dalton, B. Drabble, and A. Tate. </editor> <booktitle> The O-Plan constraint associator. In Thirtheenth workshop of the UK Planning Special Interest Group, </booktitle> <address> Glas-gow, UK, </address> <year> 1994. </year>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language [13, 24], STRIPS [8], and NOAH [23], and some familiar later examples are NONLIN [25], DEVISER [26], SIPE [27], PRS [9], FORBIN [7], and O-Plan <ref> [6] </ref>. The emphasis in well-founded planning is on constructing planners that can be proved to have certain desirable properties, such as soundness and completeness for their intended class of problems, or the ability to find optimal or near-optimal solutions. The first well-founded planner was probably C.
Reference: [7] <author> T. Dean, R. J. Firby, and D. Miller. </author> <title> Hierarchical planning involving deadlines, travel time, and resources. </title> <journal> Computational Intelligence, </journal> <volume> 4 </volume> <pages> 381-398, </pages> <year> 1988. </year>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language [13, 24], STRIPS [8], and NOAH [23], and some familiar later examples are NONLIN [25], DEVISER [26], SIPE [27], PRS [9], FORBIN <ref> [7] </ref>, and O-Plan [6]. The emphasis in well-founded planning is on constructing planners that can be proved to have certain desirable properties, such as soundness and completeness for their intended class of problems, or the ability to find optimal or near-optimal solutions. The first well-founded planner was probably C.
Reference: [8] <author> R.E. Fikes and N.J. Nilsson. </author> <title> STRIPS: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 189-208, </pages> <year> 1971. </year>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language [13, 24], STRIPS <ref> [8] </ref>, and NOAH [23], and some familiar later examples are NONLIN [25], DEVISER [26], SIPE [27], PRS [9], FORBIN [7], and O-Plan [6].
Reference: [9] <editor> M.P. Georgeff and A.L Lansky. </editor> <title> Reactive reasoning and planning. </title> <booktitle> In Proc. of the 6th National Conference of the American Association for Artificial Intelligence, </booktitle> <pages> pages 677-682, </pages> <address> Seattle, WA, 1987. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language [13, 24], STRIPS [8], and NOAH [23], and some familiar later examples are NONLIN [25], DEVISER [26], SIPE [27], PRS <ref> [9] </ref>, FORBIN [7], and O-Plan [6]. The emphasis in well-founded planning is on constructing planners that can be proved to have certain desirable properties, such as soundness and completeness for their intended class of problems, or the ability to find optimal or near-optimal solutions.
Reference: [10] <author> A. Gerevini and L.K. Schubert. </author> <title> An efficient method for managing disjunctions in qualitative temporal reasoning. </title> <booktitle> In Principles of Knowledge Representation and Reasoning: Proc. of the 4th Int. Conf. (KR-94), </booktitle> <pages> pages 215-225, </pages> <address> San Francisco, CA, 1994. </address> <publisher> Morgan-Kaufmann. </publisher>
Reference-contexts: Though this problem is in principle NP-hard, algorithms that are very efficient on average are described in <ref> [10, 11] </ref>. This could be far more efficient than trying each possible promotion and demotion, checking in isolation for consistency with ordering constraints.
Reference: [11] <author> A. Gerevini and L.K. Schubert. </author> <title> Efficient algorithms for qualitative reasoning about time. </title> <journal> Artificial Intelligence, </journal> <note> 1995. To appear. Also available as: </note> <institution> IRST Tech. </institution> <type> Rep. 9307-44, </type> <institution> Istituto per la Ricerca Scientifica e Tec-nologica, 38050 Povo, Trento Italy; Tech. </institution> <type> Rep. 496, </type> <institution> Computer Science Dept., University of Rochester, Rochester, </institution> <address> NY 14627, USA. </address>
Reference-contexts: Though this problem is in principle NP-hard, algorithms that are very efficient on average are described in <ref> [10, 11] </ref>. This could be far more efficient than trying each possible promotion and demotion, checking in isolation for consistency with ordering constraints.
Reference: [12] <author> C. Green. </author> <title> Application of theorem proving to problem solving. </title> <booktitle> In Proceedings of the First International Joint Conference on Artificial Intelligence (IJCAI-69), </booktitle> <pages> pages 219-239, </pages> <year> 1969. </year> <month> 16 </month>
Reference-contexts: The emphasis in well-founded planning is on constructing planners that can be proved to have certain desirable properties, such as soundness and completeness for their intended class of problems, or the ability to find optimal or near-optimal solutions. The first well-founded planner was probably C. Green's QA3 <ref> [12] </ref>, offering sound and complete planning within the expressively quite rich situation calculus. However, its performance was impractical, and this provided some of the impetus behind the development of STRIPS and its descendants. <p> Green's QA3, reportedly solved some (carefully formulated) versions of this problem rather easily <ref> [12] </ref>. <p> repeated here. 5 We thought it important to test more than one version of T of H, since this was the hardest problem for UCPOP (as well as other algorithms we tried before focusing on UCPOP), and its difficulty has long been known to be sensitive to the formalization (e.g., <ref> [12] </ref>).
Reference: [13] <author> C. Hewitt. </author> <title> Planner: A language for proving theorems in robots. </title> <booktitle> In Pro--ceedings of the First International Joint Conference on Artificial Intelligence (IJCAI-69), </booktitle> <pages> pages 295-301, </pages> <address> Bedford, MA, 1969. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language <ref> [13, 24] </ref>, STRIPS [8], and NOAH [23], and some familiar later examples are NONLIN [25], DEVISER [26], SIPE [27], PRS [9], FORBIN [7], and O-Plan [6].
Reference: [14] <author> D. Joslin and M.E. Pollack. </author> <title> Least-cost flaw repair: a plan refinement strategy for partial-order planning. </title> <booktitle> In Proc.of the 12th Nat. Conf. of the American Association for Artificial Intelligence (AAAI-94), </booktitle> <pages> pages 1004-1009, </pages> <address> Seattle WA, </address> <year> 1994. </year>
Reference-contexts: Thus it entails the priorities for unachievable and uniquely achievable goals above (while also entailing a certain prioritization of nonuniquely achievable goals). Joslin and Pollack <ref> [14] </ref> studied the uniform application of such a strategy to both threats and open 8 conditions in UCPOP, terming this strategy "least cost flaw repair" (LCFR). 3 Combining this with UCPOP's default plan selection strategy, they obtained significant search reductions (though less significant running time reductions, for implementation reasons) for a
Reference: [15] <author> S. Kambhampati, C. A. Knoblock, and Q. Yang. </author> <title> Planning as refinement search: A unified framework for evaluating design tradeoff in partial-order planning. </title> <journal> Artificial Intelligence. Special Issue on Planning and Scheduling, </journal> <note> 1995. To appear; also available as Tech. Rep. ASU-CSE-TR 94-002, </note> <institution> Dept. of Computer Science and Engineering, Arizona State Univ., Temple, AZ. </institution>
Reference-contexts: These efforts have gained considerable momentum in recent years, leading both to extensions of earlier approaches, such as UCPOP [20] and BURIDAN [17], and systematic comparative performance evaluations (e.g., <ref> [2, 15] </ref>). Despite these efforts, it seems fair to say that well-founded planners still perform dismally in practical terms. <p> Despite these efforts, it seems fair to say that well-founded planners still perform dismally in practical terms. For example, when we tried to apply the programs evaluated in <ref> [15] </ref> to the standard UCPOP suite of test problems, we found that none achieve reasonable performance on the 3-disk Towers of Hanoi (T of H) puzzle (requiring 7 moves for its solution), or on some other simple problems. <p> that arise in such areas as connecting railroad cars into trains (with use of sidetracks) and pallet management in automated warehouses. (Some of the other problems in the test suite, such as the "ferry domain", are more directly evocative of real-world applications.) Some recent studies of partial-order planning strategies (e.g., <ref> [15] </ref>) could be interpreted as implying that the level of planning performance achieved so far is about the best that is possible for domain-independent planners; any real improvements from this point on will have to come from exploiting domain-specific information. Our outlook on well-founded, domain-independent planning is more optimistic. <p> We have also included one of the two artificial domains (ART-# est -# clob ) that served as a testbed for Kambhampati et al.'s extensive study of the behavior of various planning strategies as a function of problem parameters <ref> [15] </ref>. 4 The experiments were conducted on a SUN 10. <p> Figure 3 supplies a UCPOP formalization of ART-# est -# clob . 3 We would find "least commitment flaw repair" more accurate. 4 This domain was chosen since absolute performance data are provided for it in <ref> [15] </ref>. 5 The formalizations of these domains except the 3-operator version of the T oh H and the artificial domain from [15] are available along with UCPOP via anonymous FTP from cs.washington.edu 9 (define (operator move-disk) :parameters ((disk ?disk) ?below-disk ?new-below-disk) :precondition (:and (smaller ?disk ?new-below-disk) ;handles pegs (:neq ?new-below-disk ?below-disk) <p> ART-# est -# clob . 3 We would find "least commitment flaw repair" more accurate. 4 This domain was chosen since absolute performance data are provided for it in <ref> [15] </ref>. 5 The formalizations of these domains except the 3-operator version of the T oh H and the artificial domain from [15] are available along with UCPOP via anonymous FTP from cs.washington.edu 9 (define (operator move-disk) :parameters ((disk ?disk) ?below-disk ?new-below-disk) :precondition (:and (smaller ?disk ?new-below-disk) ;handles pegs (:neq ?new-below-disk ?below-disk) (:neq ?new-below-disk ?disk) (:neq ?below-disk ?disk) (on ?disk ?below-disk) (clear ?disk) (clear ?new-below-disk)) :effect (:and (clear ?below-disk) (on ?disk ?new-below-disk) (:not <p> Concerning ART-# est -# clob , note that the performance we obtained with un-enhanced UCPOP (624 plans generated for ART-3-6 and 985 for ART-6-3) was much the same as (just marginally better than) reported in <ref> [15] </ref> for the best planners considered there (700 - 1500 plans generated for ART-3-6, and 1000-2000 for ART-6-3). This is to be expected, since UCPOP is a generalization of the earlier partial-order planners. Relative to standard UCPOP and its predecessors, our "accelerated" planner is thus an order of magnitude faster.
Reference: [16] <author> H.A. Kautz. </author> <title> Planning within first-order dynamic logic. </title> <booktitle> In 4th Bienn. Conf. of the Can. Soc. for Computational Stud. of Intelligence (CSCSI-82), </booktitle> <pages> pages 19-26, </pages> <institution> niv. of Saskatchewan, Saskatoon, Sask., </institution> <year> 1982. </year>
Reference-contexts: This led to a renewal of efforts in the 80's to find viable approaches to well-founded planning, exemplified by novel algorithms such as BIGRESS <ref> [22, 16] </ref> (based on dynamic logic), Bibel's linear connection method for plan generation [3], TWEAK [4] (Chapman's partial-order planner based on his "modal truth criterion") and SNLP [18] (another systematic partial-order planner using propositional STRIPS operators).
Reference: [17] <author> N. Kushmerick, S. Hanks, and D. Weld. </author> <title> An algorithm for probabilistic least-commitment planning. </title> <booktitle> In Proc.of the 12th Nat. Conf. of the American Association for Artificial Intelligence (AAAI-94), </booktitle> <pages> pages 1073-1078, </pages> <address> Seattle WA, </address> <year> 1994. </year>
Reference-contexts: These efforts have gained considerable momentum in recent years, leading both to extensions of earlier approaches, such as UCPOP [20] and BURIDAN <ref> [17] </ref>, and systematic comparative performance evaluations (e.g., [2, 15]). Despite these efforts, it seems fair to say that well-founded planners still perform dismally in practical terms.
Reference: [18] <author> D. McAllester and Rosenblitt D. </author> <title> Systematic nonlinear planning. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence (AAAI-91), </booktitle> <pages> pages 634-639, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: led to a renewal of efforts in the 80's to find viable approaches to well-founded planning, exemplified by novel algorithms such as BIGRESS [22, 16] (based on dynamic logic), Bibel's linear connection method for plan generation [3], TWEAK [4] (Chapman's partial-order planner based on his "modal truth criterion") and SNLP <ref> [18] </ref> (another systematic partial-order planner using propositional STRIPS operators). These efforts have gained considerable momentum in recent years, leading both to extensions of earlier approaches, such as UCPOP [20] and BURIDAN [17], and systematic comparative performance evaluations (e.g., [2, 15]).
Reference: [19] <author> N.J. Nilsson. </author> <booktitle> Principles of Artificial Intelligence. </booktitle> <publisher> Tioga Pub. Co., </publisher> <address> Palo Alto, CA, </address> <year> 1980. </year>
Reference-contexts: There are two points of which the reader should be reminded. First, in order for A* to guarantee discovery of an optimal plan (i.e., the "admissibility" condition), h (p) should not overestimate the remaining solution cost <ref> [19] </ref>. Second, if the aim is not necessarily to find an optimal solution but to find a satisfactory solution quickly, then f (p) can be augmented to include a term that estimates the remaining cost of finding a solution. <p> Thus we will prefer to pursue a plan p 0 that seems closer to being complete to a plan p further 5 from completion, even though the overall complexity estimate for p 0 may be greater than for p <ref> [19] </ref> (pages 87-88). Alternatively, we could add a heuristic estimate of the remaining cost of finding a solution to f (p) that is more or less independent of the estimate h (p).
Reference: [20] <author> J.S. Penberthy and D.S. Weld. UCPOP: </author> <title> A sound, complete, partial order planner for ADL. </title> <editor> In B. Nebel, C. Rich, and W. Swartout, editors, </editor> <booktitle> Proc. of the 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning (KR-92), </booktitle> <pages> pages 103-114, </pages> <address> Boston, MA, 1992. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: These efforts have gained considerable momentum in recent years, leading both to extensions of earlier approaches, such as UCPOP <ref> [20] </ref> and BURIDAN [17], and systematic comparative performance evaluations (e.g., [2, 15]). Despite these efforts, it seems fair to say that well-founded planners still perform dismally in practical terms. <p> Thus we begin with a sketch of this algorithm, referring the reader to <ref> [1, 20] </ref> for details. In essence, UCPOP explores a space of partially specified plans, each paired with an agenda of goals still to be satisfied and threats still to be averted.
Reference: [21] <author> M. A. Peot and D. E. Smith. </author> <title> Threat-removal strategies for partial-order planning. </title> <booktitle> In Proc. of the 11th Nat. Conf. of the American Association for Artificial Intelligence (AAAI-93), </booktitle> <pages> pages 492-499, </pages> <address> Washington, D.C.,1993. </address>
Reference-contexts: UCPOP did best on T of H but still took over 3 minutes of CPU time on a SUN 10, generating tens of thousands of partial plans. (This was with the "delay separation" switch on <ref> [21] </ref>; 1 with this switch off, performance 1 i.e., delaying the use of "promotion" and "demotion" to avert threats until all variables appearing in the conflict conditions are bound; and disabling altogether the use of inequations to block unification of threatening effects with threatened causal links 2 was typically several times <p> This emphasis appears to give the S+OC measure considerable advantages in some domains. Because of its nearly uniform experimental superiority to the CL+OC measure, we will not further consider the latter here. The S+OC heuristic was in fact previously considerd by Peot and Smith <ref> [21] </ref>, but because their focus was on threat-removal strategies neither they nor other researchers appear to have fully recognized the advantages of this measure. 2.3 The goal selection strategy An important opportunity for improving planning performance independently of the domain lies in identifying "forced refinements", i.e., refinements that can be made <p> For unique refinements this narrowing-down is monotonic, never needing revocation. In short, the strategy cuts down the search space without loss of access to viable solutions. Peot and Smith <ref> [21] </ref> studied the strategy of preferring forced threats to unforced threats, and also suggested possible use of a "least commitment" strategy for handling open conditions. "Least commitment" always selects an open condition which generates the fewest refined plans.
Reference: [22] <author> S. Rosenschein. </author> <title> Plan synthesis: a logical perspective. </title> <booktitle> In Proceedings of the Seventh International Joint Conference on Artificial Intelligence (IJCAI-81), </booktitle> <pages> pages 331-337, </pages> <year> 1981. </year>
Reference-contexts: This led to a renewal of efforts in the 80's to find viable approaches to well-founded planning, exemplified by novel algorithms such as BIGRESS <ref> [22, 16] </ref> (based on dynamic logic), Bibel's linear connection method for plan generation [3], TWEAK [4] (Chapman's partial-order planner based on his "modal truth criterion") and SNLP [18] (another systematic partial-order planner using propositional STRIPS operators).
Reference: [23] <author> E. D. Sacerdoti. </author> <title> The nonlinear nature of plans. </title> <booktitle> In Proceedings of the Fourth International Joint Conference on Artificial Intelligence (IJCAI-75), </booktitle> <pages> pages 206-214, </pages> <address> Tbilisi, Georgia, USSR, </address> <month> September </month> <year> 1975. </year> <month> 17 </month>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language [13, 24], STRIPS [8], and NOAH <ref> [23] </ref>, and some familiar later examples are NONLIN [25], DEVISER [26], SIPE [27], PRS [9], FORBIN [7], and O-Plan [6].
Reference: [24] <author> G. Sussman, T. Winograd, and E. Charniak. </author> <title> Micro-planner reference manual. </title> <type> AI Memo 203, </type> <institution> AI Lab, MIT, </institution> <year> 1970. </year>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language <ref> [13, 24] </ref>, STRIPS [8], and NOAH [23], and some familiar later examples are NONLIN [25], DEVISER [26], SIPE [27], PRS [9], FORBIN [7], and O-Plan [6].
Reference: [25] <author> A. Tate. </author> <title> Generating project networks. </title> <booktitle> In Proceedings of the Fifth International Joint Conference on Artificial Intelligence (IJCAI-77), </booktitle> <pages> pages 888-889, </pages> <address> Cambridge, MA, 1977. </address> <publisher> MIT. </publisher>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language [13, 24], STRIPS [8], and NOAH [23], and some familiar later examples are NONLIN <ref> [25] </ref>, DEVISER [26], SIPE [27], PRS [9], FORBIN [7], and O-Plan [6]. The emphasis in well-founded planning is on constructing planners that can be proved to have certain desirable properties, such as soundness and completeness for their intended class of problems, or the ability to find optimal or near-optimal solutions.
Reference: [26] <author> S.A. Vere. </author> <title> Planning in time: Windows and durations for activities and goals. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 5(3) </volume> <pages> 246-267, </pages> <year> 1983. </year>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language [13, 24], STRIPS [8], and NOAH [23], and some familiar later examples are NONLIN [25], DEVISER <ref> [26] </ref>, SIPE [27], PRS [9], FORBIN [7], and O-Plan [6]. The emphasis in well-founded planning is on constructing planners that can be proved to have certain desirable properties, such as soundness and completeness for their intended class of problems, or the ability to find optimal or near-optimal solutions.
Reference: [27] <author> D.E. Wilkins. </author> <title> Practical Planning: Extending the Classical AI Planning Paradigm. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language [13, 24], STRIPS [8], and NOAH [23], and some familiar later examples are NONLIN [25], DEVISER [26], SIPE <ref> [27] </ref>, PRS [9], FORBIN [7], and O-Plan [6]. The emphasis in well-founded planning is on constructing planners that can be proved to have certain desirable properties, such as soundness and completeness for their intended class of problems, or the ability to find optimal or near-optimal solutions.
Reference: [28] <author> Q. Yang. </author> <title> A theory a conflict resolution in planning. </title> <booktitle> Artificial Intelligence 58, </booktitle> <pages> pages 361-392, </pages> <year> 1992. </year> <month> 18 </month>
Reference-contexts: Though this problem is in principle NP-hard, algorithms that are very efficient on average are described in [10, 11]. This could be far more efficient than trying each possible promotion and demotion, checking in isolation for consistency with ordering constraints. A similar idea was previously explored in <ref> [28] </ref> using arc consistency techniques, but we think further gains are possible with the algorithms mentioned above, which are more general than arc-consistency testing and employ intelligent backtracking for efficient search.
References-found: 28

