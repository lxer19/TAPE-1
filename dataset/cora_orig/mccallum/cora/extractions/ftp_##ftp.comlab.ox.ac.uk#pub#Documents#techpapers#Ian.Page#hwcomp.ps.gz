URL: ftp://ftp.comlab.ox.ac.uk/pub/Documents/techpapers/Ian.Page/hwcomp.ps.gz
Refering-URL: http://www.csd.uu.se/~bjornfot/r1.html
Root-URL: 
Title: Compiling occam into Field-Programmable Gate Arrays  
Author: Ian Page and Wayne Luk 
Address: 11 Keble Road, Oxford England OX1 3QD  
Affiliation: Programming Research Group, Oxford University Computing Laboratory,  
Abstract: We describe a compiler which maps programs expressed in a subset of occam into netlist descriptions of parallel hardware. Using Field-Programmable Gate Arrays to implement such netlists, problem-specific hardware can be generated entirely by a software process. Inner loops of time-consuming programs can be implemented as hardware and the less intensively-used parts of the program can be mapped into machine code by a conventional compiler. Software investment is protected since the same program can run entirely in software, entirely in hardware, or in a mixture of both. A single program can thus result in many implementations across a potentially wide cost-performance range. The compilation system has been used to generate inner-loops, hardware interfaces to real-world devices, systolic arrays, and complete microprocessors. In the near future we hope to have a proven version of the compiler, enabling us automatically to generate provably correct hardware implementations, including microprocessors, from higher-level specifications. 
Abstract-found: 1
Intro-found: 1
Reference: <institution> Algotronix Ltd., CAL1024 Datasheet, Edinburgh EH9 3JL, UK, </institution> <year> 1990. </year> <editor> van Berkel, C. H. and Saeijs R.W.J.J., </editor> <title> Compilation of communicating processes into delay-insensitive circuits, </title> <booktitle> in Proc. </booktitle> <address> ICCD88, Rye Brook, New York, </address> <month> October </month> <year> 1988. </year>
Reference-contexts: Current examples of large-scale FPGAs in this style are the Xilinx 3000 and 4000 series (Xilinx, 1991 and 1990), the Electrically Reconfigurable Array (Plessey 1990) and the Logic Cell Array <ref> (Algotronix 1990) </ref> devices. Vendor-provided CAD software creates device configuration data from user-provided circuit schematics, Boolean equations, state-machine descriptions, or other higher level descriptions. Recently, dynamically reconfigurable FPGAs with equivalent complexity of 10,000 to 20,000 gates have become available, and denser devices are being developed.
Reference: <author> Bertin, P. et. al., </author> <title> Introduction to programmable active memories, in Systolic Array Processors, </title> <editor> J. McCanny et. al., Eds., </editor> <booktitle> Prentice-Hall International, </booktitle> <year> 1989, </year> <pages> pp. 301-309. </pages>
Reference: <author> Brown, G. M., </author> <title> Towards truly delay-insensitive circuit realisation of process algebras, in Designing Correct Circuits, </title> <editor> G. Jones and M. Sheeran, Eds., </editor> <publisher> Springer-Verlag, </publisher> <year> 1991, </year> <pages> pp. </pages> <month> 120--131. </month>
Reference: <author> Goldsmith, M.H., </author> <title> Occam transformation at Oxford, </title> <booktitle> in Proc. 7th Occam User Group Technical Meeting, Muntean, </booktitle> <publisher> Ed., IOS B.V., </publisher> <year> 1987. </year>
Reference-contexts: It may be possible to make use of these in deriving more optimal implementations of programs using formal transformation tools such as the Oxford Oc-cam Transformation System <ref> (Goldsmith 1987) </ref>. Control Strategy As well as generating all necessary datapaths, the compiler generates fully distributed control hardware for the program. Each statement in the program results in the generation of hardware which controls the activation of the corresponding parts of the datapath (i.e. the execution of the statement).
Reference: <author> Harper, P. et. al., </author> <title> Standard ML, </title> <type> Report ECS-LFCS-86-2, </type> <institution> Laboratory for Foundation of Computer Science, University of Edinburgh, </institution> <year> 1986. </year>
Reference-contexts: ALGORITHM DESCRIPTION LANGUAGE For the reasons given above, a simple subset of occam1, with a few minor extensions appropriate to its current use, was chosen for the input language. As the current compiler is a prototype written in SML <ref> (Harper 1986) </ref>, it has proved convenient to supply the input programs in the form of an abstract syntax. This has obviated the need to build a parser for the language, but at the cost of writing programs in a slightly verbose form.
Reference: <author> Hoare, C. A. R., </author> <title> Communicating Sequential Processes, </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1985. </year> <title> Inmos Ltd., The Transputer and IQ Systems Databook, </title> <editor> 1991 Jones, G., </editor> <booktitle> Programming in occam, Prentice-Hall International, </booktitle> <year> 1987. </year>
Reference: <author> Knapp, S., </author> <title> Accelerate FPGA Macros with One Hot Approach, Electronic Design, </title> <address> Sept 13, </address> <year> 1990. </year>
Reference-contexts: There is usually one ip-op corresponding to each primitive statement in the user program which is set only when the statement is being executed. This is basically the one-hot approach to control state encoding and has been demonstrated to be space-efficient in particular on Xilinx FPGAs <ref> (Knapp 1990 and Schlag et al 1990) </ref>. It is perfectly possible to adopt alternative encoding schemes which may be preferable in other circumstances. We have developed provably equivalent control state encoding schemes which will later be integrated into the compiler as optional optimisa-tions.
Reference: <author> Leeser, M. et. al., </author> <title> The BEDROC high level synthesis system, in ASIC91, </title> <journal> IEEE, </journal> <note> Sep-tember 1991, to appear. </note>
Reference: <author> Luk, W. and Page, I., </author> <title> Parametrising designs for Field-Programmable Gate Arrays, this volume. </title>
Reference: <author> May, D., </author> <title> Compiling occam into silicon, in Developments in Concurrency and Communication, </title> <editor> C. A. R. Hoare, Ed., </editor> <publisher> Addison-Wesley, </publisher> <year> 1990, </year> <pages> pp. 87-129. </pages>
Reference: <author> Page, I. and He J. </author> <title> Provably Correct Hardware Compilation, </title> <type> PRG internal report, </type> <year> 1991. </year> <title> Plessey Semiconductors Ltd., ERA60100 Electrically Reconfigurable Array Data Sheet, </title> <address> Swindon SN2 2QW, UK., </address> <note> 1990 Roscoe, </note> <author> A. W. and Hoare, C. A. R., </author> <title> The laws of occam programming, </title> <journal> Theoretical Computer Science, </journal> <volume> vol. 60, </volume> <pages> pp. 177-229, </pages> <year> 1988. </year>
Reference-contexts: Due to the array architecture of these chips, they are especially appropriate for systolic implementations of algorithms. We design such systolic arrays using a declarative language with a set of correctness-preserving transformations. A companion paper <ref> (Luk and Page 1991) </ref> describes our approach to the specification, transformation and implementation of systolic algorithms. <p> Application of the laws of occam are then sufficient to demonstrate that the second program refines the first. PROOF OF CORRECTNESS We are currently working on a proof of correctness of a compiler based on the principles outlined in this paper <ref> (Page and He, 1991) </ref>. Using only the algebraic semantics of oc-cam, we show equivalences between user programs and a stylized normal form program, also written in occam. It is further shown that a variety of interpretations of these normal form programs is possible.
Reference: <author> Schlag D.F., Chan P.K., Kong J., </author> <title> An Empirical Study of the Performance of Multilevel Logic Minimization Tools for a Field-Programmable Gate Array Technology, </title> <institution> University of California at Santa Cruz, Computer Engineering Departmental Report UCSC-CRL-90-60, </institution> <note> 1990 Shepherd, </note> <author> D. and Wilson, G., </author> <title> Making chips that work, in New Scientist, 13May1989,- pp.61-64. Xilinx, Technical data book, XC4000 series Logic Cell Array Family, </title> <publisher> Xilinx Inc., </publisher> <address> San Jose, Ca. </address> <month> 95124, </month> <title> 1990 Xilinx Inc., The Programmable Gate Array Data Book, 1991. Xilinx Inc., XACT Reference Manual, </title> <address> San Jose, Ca. 95124, </address> <year> 1990. </year>
Reference-contexts: There is usually one ip-op corresponding to each primitive statement in the user program which is set only when the statement is being executed. This is basically the one-hot approach to control state encoding and has been demonstrated to be space-efficient in particular on Xilinx FPGAs <ref> (Knapp 1990 and Schlag et al 1990) </ref>. It is perfectly possible to adopt alternative encoding schemes which may be preferable in other circumstances. We have developed provably equivalent control state encoding schemes which will later be integrated into the compiler as optional optimisa-tions.
References-found: 12

