URL: http://www.eecs.umich.edu/~marios/papers/mst94.ps
Refering-URL: http://www.eecs.umich.edu/~marios/pubs.html
Root-URL: http://www.cs.umich.edu
Email: e-mail: marios@theory.lcs.mit.edu  
Title: Understanding Retiming through Maximum Average-Delay Cycles  
Author: Marios C. Papaefthymiou 
Note: 1 Supported in part by the Defense Advanced Research Projects Agency under contract N00014-87-K-0825.  
Address: Cambridge, MA 02139  
Affiliation: Laboratory for Computer Science Massachusetts Institute of Technology  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> McGraw-Hill, MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: In Steps 1 and 2, the algorithm computes the maximum delay-to-registers ratio dR (C fl (G 0 ))e of the circuit G 0 = (V; E; d; w 0 ) with w 0 (e) jV jd max . This ratio equals the smallest integer n in the interval <ref> [1; jV jd max ] </ref> of possible ratios that does not induce negative edge-weight cycles in the graph G 0 d=n = (V; E; w 0 d=n) with edge-weight w 0 (e) d (v)=n for each edge u e ! v 2 E [5]. <p> Our Algorithm MPP for minimum clock period pipelining of combinational circuitry is illustrated in Figure 7. Step 1 of the algorithm computes the delay of the longest path v in ; v out in O (E) steps by traversing the vertices of G in topological sort order <ref> [1] </ref>. Step 2 binary searches an interval of d max + 1 integers for the minimum achievable clock period min (G). In each iteration of the search, the O (E)-time Algorithm MLP generates a pipelined circuit that achieves the clock period under consideration with the minimum possible latency.
Reference: [2] <author> S. Even and A. Litman. </author> <title> On the capabilities of systolic systems. </title> <booktitle> 3rd ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <month> July </month> <year> 1991. </year>
Reference-contexts: As a special case of these general bounds we have that the maximum delay-to-register ratio in any unit-delay circuit characterizes exactly the minimum clock period achievable by retiming. (The result for the special case of unit-delay circuitry has been claimed independently in <ref> [2] </ref>.) Our tight bounds yield asymptotically more efficient algorithms for several important problems related to retiming, such as minimum clock-period retiming, retiming for approximately minimum clock-period, and minimum clock-period pipelining. The remainder of the paper has six sections.
Reference: [3] <author> H. N. Gabow and R. E. Tarjan. </author> <title> Faster scaling algorithms for network problems. </title> <journal> SIAM J. Computing, </journal> <month> October </month> <year> 1989. </year>
Reference-contexts: This result improves the O (V E lg V ) bound from [10]. Our algorithm is based on the exact characterization of min (G) as well as on scaling algorithms for finding single-source shortest-paths and the minimum cycle-mean in a graph <ref> [11, 3] </ref>. In Section 5, we present algorithms for non unit-delay circuitry. Specifically, Section 5.1 describes an O (V E lg d max )-time algorithm for minimum clock period retiming. <p> The shortest-paths lengths in Step 3 can also be computed in O (V 1=2 E lg V ) time, using an O (V 1=2 E lg (V W ))-time algorithm for shortest-paths by Gabow and Tarjan <ref> [3] </ref>. <p> Gabow and Tarjan have given an O (V 1=2 E lg 2 (V W ))- time algorithm for the single-source shortest-paths problem, where W is the maximum edge-weight in the graph <ref> [3] </ref>. Thus, the binary search in Step 2 can be performed in O (V 1=2 E lg 2 (V d max )) time, since w 0 (e) jV jd max for every edge e 2 E. <p> Steps 2 and 3 complete in O (V 1=2 E lg 2 (V d max )) time, since negative edge-weight cycles can be detected in O (V 1=2 E lg (V d max )) time using the single-source shortest-paths algo rithm by Gabow and Tarjan <ref> [3] </ref>.
Reference: [4] <author> R. M. Karp. </author> <title> A characterization of the minimum cycle mean in a digraph. </title> <journal> Discrete Mathematics, </journal> <volume> 23 </volume> <pages> 309-311, </pages> <year> 1978. </year>
Reference: [5] <author> E. L. Lawler. </author> <title> Combinatorial Optimization, Networks and Matroids. </title> <publisher> Holt, Rinehart and Winston, </publisher> <address> New York, </address> <year> 1976. </year>
Reference-contexts: Determine a set of integer feasible values for the unknowns x (u) or determine that no such set exists. 2 The following theorem is classic in the field of combinatorial optimization <ref> [5, 12] </ref>, and provides a method for solving Problem DC. <p> Theorem 2 implies that a retimed circuit with clock period no greater than c can be computed in O (V 3 ) steps by applying the O (V E)-time shortest-paths algorithm by Bellman and Ford <ref> [5, page 74] </ref> on the dense constraint graph G c . <p> the smallest integer n in the interval [1; jV jd max ] of possible ratios that does not induce negative edge-weight cycles in the graph G 0 d=n = (V; E; w 0 d=n) with edge-weight w 0 (e) d (v)=n for each edge u e ! v 2 E <ref> [5] </ref>. Step 3 of the algorithm binary searches the integers in the interval [dR (C fl (G 0 ))e ; dR (C fl (G 0 ))e + d max 1] for the minimum achievable clock period min (G). <p> Algorithm Opt-Retiming runs in O (V E lg d max ) time. Step 1 completes in O (E) time. Negative-weight cycles in Step 2 can be detected by solving a single-source shortest-paths problem on the edge-weighted graph G 0 d=n <ref> [5] </ref>. Gabow and Tarjan have given an O (V 1=2 E lg 2 (V W ))- time algorithm for the single-source shortest-paths problem, where W is the maximum edge-weight in the graph [3].
Reference: [6] <author> F. T. Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays, Trees and Hypercubes. </title> <publisher> Morgan Kaufman, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction The semisystolic model of computation affords great flexibility and ease in designing parallel algorithms, and it can be implemented by synchronous circuits built of functional elements and globally clocked registers <ref> [6] </ref>. Retiming, which was introduced in [7, 8, 9] and treated in [10], is a well-known design automation technique which transforms a given synchronous circuit into a faster circuit, that is, one with a shorter clock period, by relocating the registers of the given circuit while preserving its functionality.
Reference: [7] <author> C. E. Leiserson. </author> <title> Area-efficient VLSI Computation. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <year> 1981. </year> <title> Published in book form by the MIT Press, </title> <address> Cambridge, Massachusetts, </address> <year> 1983. </year>
Reference-contexts: 1 Introduction The semisystolic model of computation affords great flexibility and ease in designing parallel algorithms, and it can be implemented by synchronous circuits built of functional elements and globally clocked registers [6]. Retiming, which was introduced in <ref> [7, 8, 9] </ref> and treated in [10], is a well-known design automation technique which transforms a given synchronous circuit into a faster circuit, that is, one with a shorter clock period, by relocating the registers of the given circuit while preserving its functionality. <p> We exploit these bounds to obtain asymptotically improved algorithms for several important problems related to retiming. We model a synchronous circuit according to <ref> [7, 8, 9] </ref> by a circuit graph G = (V; E; d; w). A vertex v 2 V corresponds to a functional element of the circuit, and an edge u e corresponds to a wire between the functional elements u and v.
Reference: [8] <author> C. E. Leiserson, F. M. Rose, and J. B. Saxe. </author> <title> Optimizing synchronous circuitry by retiming. </title> <booktitle> 3rd Caltech Conference on VLSI, </booktitle> <year> 1983. </year> <editor> R. Bryant, </editor> <publisher> ed., </publisher> <pages> pp. 87-116. 16 </pages>
Reference-contexts: 1 Introduction The semisystolic model of computation affords great flexibility and ease in designing parallel algorithms, and it can be implemented by synchronous circuits built of functional elements and globally clocked registers [6]. Retiming, which was introduced in <ref> [7, 8, 9] </ref> and treated in [10], is a well-known design automation technique which transforms a given synchronous circuit into a faster circuit, that is, one with a shorter clock period, by relocating the registers of the given circuit while preserving its functionality. <p> We exploit these bounds to obtain asymptotically improved algorithms for several important problems related to retiming. We model a synchronous circuit according to <ref> [7, 8, 9] </ref> by a circuit graph G = (V; E; d; w). A vertex v 2 V corresponds to a functional element of the circuit, and an edge u e corresponds to a wire between the functional elements u and v.
Reference: [9] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Optimizing synchronous systems. </title> <journal> Journal of VLSI and Computer Systems, </journal> <volume> 1(1) </volume> <pages> 41-67, </pages> <year> 1983. </year>
Reference-contexts: 1 Introduction The semisystolic model of computation affords great flexibility and ease in designing parallel algorithms, and it can be implemented by synchronous circuits built of functional elements and globally clocked registers [6]. Retiming, which was introduced in <ref> [7, 8, 9] </ref> and treated in [10], is a well-known design automation technique which transforms a given synchronous circuit into a faster circuit, that is, one with a shorter clock period, by relocating the registers of the given circuit while preserving its functionality. <p> We exploit these bounds to obtain asymptotically improved algorithms for several important problems related to retiming. We model a synchronous circuit according to <ref> [7, 8, 9] </ref> by a circuit graph G = (V; E; d; w). A vertex v 2 V corresponds to a functional element of the circuit, and an edge u e corresponds to a wire between the functional elements u and v.
Reference: [10] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Retiming synchronous circuitry. </title> <journal> Algorithmica, </journal> <volume> 6(1), </volume> <year> 1991. </year> <note> Also available as MIT/LCS/TM-372. </note>
Reference-contexts: 1 Introduction The semisystolic model of computation affords great flexibility and ease in designing parallel algorithms, and it can be implemented by synchronous circuits built of functional elements and globally clocked registers [6]. Retiming, which was introduced in [7, 8, 9] and treated in <ref> [10] </ref>, is a well-known design automation technique which transforms a given synchronous circuit into a faster circuit, that is, one with a shorter clock period, by relocating the registers of the given circuit while preserving its functionality. <p> In Section 4, we give an O (V 1=2 E lg V )-time algorithm that retimes any unit-delay circuit to achieve the minimum possible clock period min (G). This result improves the O (V E lg V ) bound from <ref> [10] </ref>. Our algorithm is based on the exact characterization of min (G) as well as on scaling algorithms for finding single-source shortest-paths and the minimum cycle-mean in a graph [11, 3]. In Section 5, we present algorithms for non unit-delay circuitry. <p> Assuming that the maximum propagation delay d max of the circuit components grows subpolynomially with the size of the circuit, our algorithm is asymptotically more efficient than the previously known schemes <ref> [10] </ref>. Section 5.2 presents an O (V 1=2 E lg 2 (V d max ))-time procedure for retiming a circuit with a clock period that does not exceed the minimum by more than an additive factor of d max 1. <p> This result improves the O (V E lg V ) bound that can be obtained by applying the general algorithms from <ref> [10] </ref>, and it is optimal within a constant multiplicative factor for circuitry with unit-delay functional elements. Section 7 concludes the paper with an interesting open problem. 4 2 Retiming and Shortest Paths In this section we define some notation and terminology needed in the rest of the paper. <p> Section 7 concludes the paper with an interesting open problem. 4 2 Retiming and Shortest Paths In this section we define some notation and terminology needed in the rest of the paper. We formulate retiming according to <ref> [10] </ref> as a set of difference constraints, and we introduce the notion of the constraint graph. Finally, we exhibit the relation between retiming and the existence of single-source shortest-paths in the constraint graph. <p> There are potentially O (V 2 ) inequalities of the form (2), one for each pair of vertices in G, and they can be computed in O (V E + V 2 lg V ) steps <ref> [10] </ref>. 5 The constraints (1) and (2) in Theorem 1 are linear inequalities involving only differences of the unknowns r (v). Therefore, the retiming problem can be expressed in the following general form. <p> An asymptotically faster algorithm which runs in O (V E) time appears in <ref> [10] </ref>. 3 Characterization of Minimum Clock Period min (G) 3.1 Bounds on min (G) In this section we characterize the minimum clock period min (G) that can be obtained by retiming a given circuit G = (V; E; d; w) in terms of the maximum delay-to-register ratio of the cycles in <p> optimal retiming of G 0 , since a retiming that achieves a given clock period c can be computed for any unit-delay circuit G by rounding-up the shortest-paths lengths in the graph G 1=c = (V; E; w 1=c) with edge-weight w (e) 1=c for each edge e 2 E <ref> [10] </ref>. Now, since w 0 (e) w (e) for every edge e 2 E, a retiming of G 0 with clock period (G 0 r ) is also a retiming of G with clock period (G r ) = (G 0 r ). <p> An O (V E lg V ) algorithm that binary searches the O (V 2 )-size set of all possible clock periods for the minimum feasible one appears in <ref> [10] </ref>. Our procedure binary searches an interval with only d max possible clock periods, and it is more efficient than that in [10], under the assumption that d max grows subpolynomially with respect to the number of functional elements in the circuit. Our algorithm Opt-Retiming is illustrated in Figure 5. <p> O (V E lg V ) algorithm that binary searches the O (V 2 )-size set of all possible clock periods for the minimum feasible one appears in <ref> [10] </ref>. Our procedure binary searches an interval with only d max possible clock periods, and it is more efficient than that in [10], under the assumption that d max grows subpolynomially with respect to the number of functional elements in the circuit. Our algorithm Opt-Retiming is illustrated in Figure 5. <p> Thus, the binary search in Step 2 can be performed in O (V 1=2 E lg 2 (V d max )) time, since w 0 (e) jV jd max for every edge e 2 E. Step 3 utilizes the O (V E) retiming algorithm by Leiserson and Saxe <ref> [10] </ref> to test whether a potential clock period is feasible. Thus, a retiming that achieves min (G) is computed in O (V E lg d max ) time, and the optimally retimed circuit is computed in Step 4 in O (E) time. <p> This result improves the O (V E lg V ) bound that can be obtained by applying the general retiming algorithm from <ref> [10] </ref>, and it is optimal within a constant multiplicative factor for unit-delay circuitry. In contrast to the algorithm in [10] that computes all possible clock periods, our algorithm exploits the special structure of a combinational circuit to identify an interval of d max integers that contains the optimal period. <p> This result improves the O (V E lg V ) bound that can be obtained by applying the general retiming algorithm from <ref> [10] </ref>, and it is optimal within a constant multiplicative factor for unit-delay circuitry. In contrast to the algorithm in [10] that computes all possible clock periods, our algorithm exploits the special structure of a combinational circuit to identify an interval of d max integers that contains the optimal period.
Reference: [11] <author> J. B. Orlin and R. K. Ahuja. </author> <title> New scaling algorithms for the assignment and minimum cycle mean problem. </title> <type> Technical Report 2019-88, </type> <institution> MIT Sloan School of Management, </institution> <year> 1988. </year>
Reference-contexts: This result improves the O (V E lg V ) bound from [10]. Our algorithm is based on the exact characterization of min (G) as well as on scaling algorithms for finding single-source shortest-paths and the minimum cycle-mean in a graph <ref> [11, 3] </ref>. In Section 5, we present algorithms for non unit-delay circuitry. Specifically, Section 5.1 describes an O (V E lg d max )-time algorithm for minimum clock period retiming. <p> Ahuja and Orlin <ref> [11] </ref> have presented an algorithm for computing the minimum cycle-mean of a graph in O (V 1=2 E lg (V W )) steps, where W is the maximum edge-weight in the graph. 2 Since w 0 (e) jV j for every edge e 2 E, we can use this algorithm in
Reference: [12] <author> C. Papadimitriou and K. Steiglitz. </author> <title> Combinatorial Optimization, Algorithms and Complexity. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1982. </year>
Reference-contexts: Determine a set of integer feasible values for the unknowns x (u) or determine that no such set exists. 2 The following theorem is classic in the field of combinatorial optimization <ref> [5, 12] </ref>, and provides a method for solving Problem DC.
Reference: [13] <author> M. C. Papaefthymiou. </author> <title> On retiming synchronous circuitry and mixed-integer optimization. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> September </month> <year> 1990. </year> <note> Available as MIT/LCS/TR-486. </note>

References-found: 13

