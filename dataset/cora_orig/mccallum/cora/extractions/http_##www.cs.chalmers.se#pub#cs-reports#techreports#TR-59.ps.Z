URL: http://www.cs.chalmers.se/pub/cs-reports/techreports/TR-59.ps.Z
Refering-URL: http://www.cs.chalmers.se/pub/cs-reports/techreports/
Root-URL: 
Title: A CALCULUS OF BROADCASTING SYSTEMS  
Author: K. V. S. PRASAD 
Date: January 20, 1991  
Abstract: Local area networks (LANs) and everyday speech inspire a model of communication by unbuffered broadcast. Computation proceeds by a sequence of messages, each transmitted by one agent and received by zero or more others. Transmission is autonomous, but reception is not. Each message is received instantaneously by all agents except the transmitter, but is read only by those who were monitoring it at the time; others discard it. As in CCS, agents learn about the environment only through the messages they read. Programming such a system is hard because we have to ensure that messages are read. Testing resembles a viva-voce examination. Observation, restriction and hidden actions differ from their CCS counterparts, as does testing equivalence. We capture this model in a Calculus of Broadcasting Systems (CBS). We use transition systems with transmit, read and discard actions. Discards are self-loops, and only auxiliary. We have some results on strong bisimulation and testing, but much work remains to make CBS tractable. 
Abstract-found: 1
Intro-found: 1
Reference: [Abr70] <author> Norman Abramson. </author> <title> The Aloha system|another alternative for computer communications. </title> <booktitle> In FJCC, </booktitle> <pages> pages 281-285, </pages> <year> 1970. </year>
Reference-contexts: 1. Preliminaries The setting. The natural means of communication in local area networks (LANs) has always been broadcast <ref> [Abr70, MB76] </ref>, not point-to-point message passing. But theories like CSP [Hoa85] and CCS [Hen88, Mil89] deal only with the latter, even though they developed at the same time as LANs [Hoa78, Mil80], and are best suited to running on such architectures.
Reference: [BA90] <author> M. Ben-Ari. </author> <title> Principles of Concurrent and Distributed Programming. </title> <publisher> Prentice-Hall, </publisher> <year> 1990. </year>
Reference-contexts: Previous semantic studies of broadcast programming. include an informal study [Geh84], and denotational semantics for broadcasting [SNP87, Bro88]. ESTEREL [BCG86] is an imperative, synchronous, deterministic language with broadcast as a programming primitive. LINDA (Chap. 8 of <ref> [BA90] </ref> gives a description) is in effect Author's address: Department of Computing Science, Chalmers University of Technology, S-412 96 Goteborg, Sweden. E-mail: prasad@cs.chalmers.se. The research reported here was done partly during a visit to the Indian Institute of Science, Bangalore, in January and February 1990, on leave from Chalmers University.
Reference: [BCG86] <author> G. Berry, P. Couronne, and G. Gonthier. </author> <title> Synchronous programming of reactive systems: An introduction to ESTEREL. </title> <type> Technical Report 647, </type> <institution> INRIA, </institution> <year> 1986. </year>
Reference-contexts: Previous semantic studies of broadcast programming. include an informal study [Geh84], and denotational semantics for broadcasting [SNP87, Bro88]. ESTEREL <ref> [BCG86] </ref> is an imperative, synchronous, deterministic language with broadcast as a programming primitive. LINDA (Chap. 8 of [BA90] gives a description) is in effect Author's address: Department of Computing Science, Chalmers University of Technology, S-412 96 Goteborg, Sweden. E-mail: prasad@cs.chalmers.se.
Reference: [BIM88] <author> Bard Bloom, Sorin Istrail, and Albert R. Meyer. </author> <title> Bisimulation can't be traced. </title> <booktitle> In 15th Symposium on Principles of Programming Languages. ACM, </booktitle> <year> 1988. </year>
Reference-contexts: V. S. PRASAD Proof. By adapting the corresponding proof in [Mil89]. There are also general theorems from which we can conclude this proposition. The rules in CBS are both in the well-founded pure tyft format of [VG89], and in the GSOS format of <ref> [BIM88] </ref>. These papers prove that for calculi whose rules are in their respective formats, ~ is a congruence. We can now quotient P by ~. Definition 9.
Reference: [BKT84] <author> J. A. Bergstra, J. W. Klop, and J. V. Tucker. </author> <title> Process algebra with asynchronous communication mechanisms. </title> <booktitle> In Seminar on Concurrency, </booktitle> <pages> pages 76-95. </pages> <institution> Carnegie-Mellon University, </institution> <address> July 1984. </address> <publisher> Springer Verlag LNCS 197. </publisher>
Reference-contexts: Audibility. t ! and a! are both autonomous, but a! is audible, while t ! is silent. CBS captures this by the fact that t ! can only synchronise with discards, which never absorb information. 6.2. Synchrony and asynchrony. <ref> [BKT84] </ref> classify models of concurrency into synchronous or asynchronous along two dimensions, cooperation and communication. CCS has asynchronous cooperation and synchronous communication. CBS is hard to classify. Cooperation. Synchronous cooperation is typified by SCCS, MEIJE and ASSCS: every agent has to act at every step.
Reference: [Bro88] <author> Manfred Broy. </author> <title> Broadcasting buffering communication. </title> <journal> Comput. Lang., </journal> <volume> 13(1) </volume> <pages> 31-47, </pages> <year> 1988. </year>
Reference-contexts: That it might also throw away simple solutions to some programming problems is suggested by the several algorithms that use broadcast, and the great interest [CNL89] in implementations of (reliable) broadcasting. Previous semantic studies of broadcast programming. include an informal study [Geh84], and denotational semantics for broadcasting <ref> [SNP87, Bro88] </ref>. ESTEREL [BCG86] is an imperative, synchronous, deterministic language with broadcast as a programming primitive. LINDA (Chap. 8 of [BA90] gives a description) is in effect Author's address: Department of Computing Science, Chalmers University of Technology, S-412 96 Goteborg, Sweden. E-mail: prasad@cs.chalmers.se. <p> V. S. PRASAD a programming model using broadcast. ESTEREL has been given a behavioural semantics. I know of no theory of broadcast communication giving equivalences, etc., in the process calculus tradition. Buffered and unbuffered broadcast. Both <ref> [Bro88] </ref> and LINDA are buffered broadcast systems, like mass mailing: receivers can read messages any time after they have been broadcast. Unbuffered broadcast, the topic of this paper, is like radio communication, or even speech in formal situations. Each message has one transmitter, and zero or more receivers. <p> More importantly, they do not reflect the experience of the listener. Hearing is silent, but that is no reason to deny that it is an activity. No discards. Agents would be always prepared to listen, and explicitly discard uninteresting messages. This is more natural with buffered broadcast <ref> [Bro88] </ref>, where uninteresting buffers need never be looked at. More parallelism?. t ! ffit ! = t ! is the extent to which we could relax the single channel assumption and allow more parallelism, allowing subsystems to proceed independently.
Reference: [CM88] <author> K. Mani Chandy and Jayadev Misra. </author> <title> Parallel Program Design|A Foundation. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: The rest follows . Thus the strong bisimulation laws previously listed hold also for '. 5.3. Example: Towards conversing philosophers. The dining philosophers problem usually concerns philosophers who eat, think, and have lively discussions with forks. We use a more abstract version <ref> [CM88] </ref>. There are five philosophers around a table. Each has three states, thinking, hungry and eating, and cycles between these states. A transition from hungry to eating is permitted only if neighbours are not eating; so neighbours do not eat simultaneously. Table 6 shows how to model this in CBS.
Reference: [CNL89] <author> S. T. Chanson, G. W. Neufeld, and L. Liang. </author> <title> A bibliography on multicast and group communication. </title> <journal> Operating Systems Review, </journal> <volume> 23(4), </volume> <month> October </month> <year> 1989. </year>
Reference-contexts: This mismatch would appear firstly to throw away a lot of the communication bandwidth. That it might also throw away simple solutions to some programming problems is suggested by the several algorithms that use broadcast, and the great interest <ref> [CNL89] </ref> in implementations of (reliable) broadcasting. Previous semantic studies of broadcast programming. include an informal study [Geh84], and denotational semantics for broadcasting [SNP87, Bro88]. ESTEREL [BCG86] is an imperative, synchronous, deterministic language with broadcast as a programming primitive.
Reference: [dNH84] <author> Rocco de Nicola and Matthew Hennessy. </author> <title> Testing equivalences for processes. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 34:83, </address> <year> 1984. </year>
Reference-contexts: Testing Strong bisimulation is too strong to be an observational equivalence. For example, a? 0 6~ b? 0, and yet we do not expect to tell such agents apart, since they say nothing. In this section, we take a first look at testing equivalence, using the ideas of <ref> [dNH84] </ref>. In the informal model, tests are just conversations between a tester and an agent, like viva-voce examinations held in public. The agent passes if the tester is satisfied by the conversation. a? 0 and b? 0 cannot make their presence felt.
Reference: [Geh84] <author> Narain Gehani. </author> <title> Broadcasting sequential processes. </title> <journal> IEEE Trans. on Software Engg., </journal> <volume> 10(4):343, </volume> <month> July </month> <year> 1984. </year>
Reference-contexts: That it might also throw away simple solutions to some programming problems is suggested by the several algorithms that use broadcast, and the great interest [CNL89] in implementations of (reliable) broadcasting. Previous semantic studies of broadcast programming. include an informal study <ref> [Geh84] </ref>, and denotational semantics for broadcasting [SNP87, Bro88]. ESTEREL [BCG86] is an imperative, synchronous, deterministic language with broadcast as a programming primitive. LINDA (Chap. 8 of [BA90] gives a description) is in effect Author's address: Department of Computing Science, Chalmers University of Technology, S-412 96 Goteborg, Sweden. E-mail: prasad@cs.chalmers.se.
Reference: [Gro90] <author> J.F. Groote. </author> <title> Transition system specifications with negative premises. </title> <booktitle> In CONCUR '90, 1990. </booktitle> <publisher> Springer Verlag LNCS 458. </publisher>
Reference-contexts: This premise and the negative premise a (v)? =! are both equivalent to "not monitoring a". With negative premises, we would expect to be able to derive them first, independently of the positive transitions. (For an explanation of this "stratification" technique and other details see <ref> [Gro90] </ref>). So we expect to be able to derive discards independently of other transitions. Synchronisation algebra. The eight rules in Table 2 can be compressed into the single rule of Table 4, using a synchronisation algebra [Win84] of actions. This is the advantage of discards over negative premises.
Reference: [Hen88] <author> Matthew Hennessy. </author> <title> Algebraic Theory of Processes. </title> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: 1. Preliminaries The setting. The natural means of communication in local area networks (LANs) has always been broadcast [Abr70, MB76], not point-to-point message passing. But theories like CSP [Hoa85] and CCS <ref> [Hen88, Mil89] </ref> deal only with the latter, even though they developed at the same time as LANs [Hoa78, Mil80], and are best suited to running on such architectures. Most books on distributed systems, too, [SK88] for example, treat broadcast only as a hardware feature, not as a programming primitive.
Reference: [Hen90] <author> Matthew Hennessy. </author> <title> CSP with value-passing. </title> <type> Technical Report HPL-ISC-TM-90-025, </type> <institution> Hewlett Packard Ltd., </institution> <year> 1990. </year>
Reference-contexts: Even in handshake communication, value-passing causally distinguishes sender from hearer. So theories of asynchronous communication [Jon90, JJH90, JU90] are of interest, as are theories of value-passing [HI90], and <ref> [Hen90] </ref> which adds value-passing to CSP. This last has a notion of broadcasting, with a! ffia? = a!. The intuition is very different from ours, however, because transmitters can synchronise, but listeners may not. 16 K. V. S. PRASAD 6.4. Alternative design choices. Without receptions.
Reference: [HI90] <author> Matthew Hennessy and Anna Ingolfsdottir. </author> <title> A theory of communicating processes with value-passing. </title> <publisher> In Springer Verlag LNCS 443. ICALP, </publisher> <year> 1990. </year>
Reference-contexts: Most of the theory of process calculi abstracts from input and output to uninterpreted actions, and is not directly applicable to CBS. Even in handshake communication, value-passing causally distinguishes sender from hearer. So theories of asynchronous communication [Jon90, JJH90, JU90] are of interest, as are theories of value-passing <ref> [HI90] </ref>, and [Hen90] which adds value-passing to CSP. This last has a notion of broadcasting, with a! ffia? = a!. The intuition is very different from ours, however, because transmitters can synchronise, but listeners may not. 16 K. V. S. PRASAD 6.4. Alternative design choices. Without receptions.
Reference: [Hoa78] <author> C. A. R. Hoare. </author> <title> Communicating sequential processes. </title> <journal> Communications of the ACM, </journal> <volume> 21(8) </volume> <pages> 666-677, </pages> <month> August </month> <year> 1978. </year>
Reference-contexts: 1. Preliminaries The setting. The natural means of communication in local area networks (LANs) has always been broadcast [Abr70, MB76], not point-to-point message passing. But theories like CSP [Hoa85] and CCS [Hen88, Mil89] deal only with the latter, even though they developed at the same time as LANs <ref> [Hoa78, Mil80] </ref>, and are best suited to running on such architectures. Most books on distributed systems, too, [SK88] for example, treat broadcast only as a hardware feature, not as a programming primitive. This mismatch would appear firstly to throw away a lot of the communication bandwidth.
Reference: [Hoa85] <author> C. A. R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference-contexts: 1. Preliminaries The setting. The natural means of communication in local area networks (LANs) has always been broadcast [Abr70, MB76], not point-to-point message passing. But theories like CSP <ref> [Hoa85] </ref> and CCS [Hen88, Mil89] deal only with the latter, even though they developed at the same time as LANs [Hoa78, Mil80], and are best suited to running on such architectures.
Reference: [JJH90] <author> He Jifeng, Mark Josephs, </author> <title> and C.A.R. Hoare. A theory of synchrony and asynchrony. </title> <type> Technical report, </type> <institution> Programming Research Group, Oxford University Computing Laboratory, </institution> <month> January </month> <year> 1990. </year>
Reference-contexts: But [SNP87] argue that broadcast communication is asynchronous since the sender of a message does not wait for the receiver. CBS (everyday speech!) thus uses synchronous communication by one criterion, and asynchronous by another. CBS makes more distinctions than truly asynchronous calculi. Those in <ref> [JJH90] </ref> and [JU90] have the results a! b! P ' b! a! P and a? b? P ' b? a? P , neither of which hold in CBS. A CALCULUS OF BROADCASTING SYSTEMS 15 6.3. Differences between the CBS and CCS models. t ! vs. t . <p> Most of the theory of process calculi abstracts from input and output to uninterpreted actions, and is not directly applicable to CBS. Even in handshake communication, value-passing causally distinguishes sender from hearer. So theories of asynchronous communication <ref> [Jon90, JJH90, JU90] </ref> are of interest, as are theories of value-passing [HI90], and [Hen90] which adds value-passing to CSP. This last has a notion of broadcasting, with a! ffia? = a!. The intuition is very different from ours, however, because transmitters can synchronise, but listeners may not. 16 K. V.
Reference: [Jon90] <author> Bengt Jonsson. </author> <title> A hierarchy of compositional models of I/O automata. </title> <type> Technical report, </type> <institution> Swedish Institute of Computer Science, </institution> <year> 1990. </year>
Reference-contexts: Most of the theory of process calculi abstracts from input and output to uninterpreted actions, and is not directly applicable to CBS. Even in handshake communication, value-passing causally distinguishes sender from hearer. So theories of asynchronous communication <ref> [Jon90, JJH90, JU90] </ref> are of interest, as are theories of value-passing [HI90], and [Hen90] which adds value-passing to CSP. This last has a notion of broadcasting, with a! ffia? = a!. The intuition is very different from ours, however, because transmitters can synchronise, but listeners may not. 16 K. V.
Reference: [JU90] <author> Mark Josephs and Jan Udding. </author> <title> Delay-insensitive circuits: an algebraic approach to their design. </title> <booktitle> In CONCUR '90, 1990. </booktitle> <publisher> Springer Verlag LNCS 458. </publisher>
Reference-contexts: But [SNP87] argue that broadcast communication is asynchronous since the sender of a message does not wait for the receiver. CBS (everyday speech!) thus uses synchronous communication by one criterion, and asynchronous by another. CBS makes more distinctions than truly asynchronous calculi. Those in [JJH90] and <ref> [JU90] </ref> have the results a! b! P ' b! a! P and a? b? P ' b? a? P , neither of which hold in CBS. A CALCULUS OF BROADCASTING SYSTEMS 15 6.3. Differences between the CBS and CCS models. t ! vs. t . <p> Most of the theory of process calculi abstracts from input and output to uninterpreted actions, and is not directly applicable to CBS. Even in handshake communication, value-passing causally distinguishes sender from hearer. So theories of asynchronous communication <ref> [Jon90, JJH90, JU90] </ref> are of interest, as are theories of value-passing [HI90], and [Hen90] which adds value-passing to CSP. This last has a notion of broadcasting, with a! ffia? = a!. The intuition is very different from ours, however, because transmitters can synchronise, but listeners may not. 16 K. V.
Reference: [MB76] <author> R. M. Metcalfe and D. R. Boggs. </author> <title> Ethernet: Distributed packet switching for local computer networks. </title> <journal> Communications of the ACM, </journal> <volume> 19(7), </volume> <month> July </month> <year> 1976. </year>
Reference-contexts: 1. Preliminaries The setting. The natural means of communication in local area networks (LANs) has always been broadcast <ref> [Abr70, MB76] </ref>, not point-to-point message passing. But theories like CSP [Hoa85] and CCS [Hen88, Mil89] deal only with the latter, even though they developed at the same time as LANs [Hoa78, Mil80], and are best suited to running on such architectures.
Reference: [Mil80] <author> Robin Milner. </author> <title> A Calculus of Communicating Systems. </title> <booktitle> Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1980. </year>
Reference-contexts: 1. Preliminaries The setting. The natural means of communication in local area networks (LANs) has always been broadcast [Abr70, MB76], not point-to-point message passing. But theories like CSP [Hoa85] and CCS [Hen88, Mil89] deal only with the latter, even though they developed at the same time as LANs <ref> [Hoa78, Mil80] </ref>, and are best suited to running on such architectures. Most books on distributed systems, too, [SK88] for example, treat broadcast only as a hardware feature, not as a programming primitive. This mismatch would appear firstly to throw away a lot of the communication bandwidth.
Reference: [Mil89] <author> Robin Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: 1. Preliminaries The setting. The natural means of communication in local area networks (LANs) has always been broadcast [Abr70, MB76], not point-to-point message passing. But theories like CSP [Hoa85] and CCS <ref> [Hen88, Mil89] </ref> deal only with the latter, even though they developed at the same time as LANs [Hoa78, Mil80], and are best suited to running on such architectures. Most books on distributed systems, too, [SK88] for example, treat broadcast only as a hardware feature, not as a programming primitive. <p> Proposition 8. ~ is a congruence for CBS, i.e., P ~ Q implies C [P ] ~ C [Q] for any CBS context C. 10 K. V. S. PRASAD Proof. By adapting the corresponding proof in <ref> [Mil89] </ref>. There are also general theorems from which we can conclude this proposition. The rules in CBS are both in the well-founded pure tyft format of [VG89], and in the GSOS format of [BIM88].
Reference: [Pnu85] <author> Amir Pnueli. </author> <title> Linear and branching structures in the semantics and logics of reactive systems. </title> <publisher> In Springer Verlag LNCS 194. ICALP, </publisher> <year> 1985. </year>
Reference-contexts: Each message has one transmitter, and zero or more receivers. It is received instantaneously by all receivers. These can choose whether to read or ignore the message, but the transmitter determines what is received and when. Broadcast in process calculus. The following "broadcast" operator due to Harel <ref> [Pnu85] </ref> cannot describe broadcast because actions are not divided into transmissions and receptions. Note the symmetric role played by the participants.
Reference: [SK88] <author> M. Sloman and J. Kramer. </author> <title> Distributed Systems and Computer Networks. </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: But theories like CSP [Hoa85] and CCS [Hen88, Mil89] deal only with the latter, even though they developed at the same time as LANs [Hoa78, Mil80], and are best suited to running on such architectures. Most books on distributed systems, too, <ref> [SK88] </ref> for example, treat broadcast only as a hardware feature, not as a programming primitive. This mismatch would appear firstly to throw away a lot of the communication bandwidth.
Reference: [SNP87] <author> R. K. Shyamasundar, K. T. Narayana, and T. Pitassi. </author> <title> Semantics for nondeterministic asynchronous broadcast networks. </title> <type> Technical report, </type> <institution> Pennsylvania State Univ., </institution> <month> March </month> <year> 1987. </year>
Reference-contexts: That it might also throw away simple solutions to some programming problems is suggested by the several algorithms that use broadcast, and the great interest [CNL89] in implementations of (reliable) broadcasting. Previous semantic studies of broadcast programming. include an informal study [Geh84], and denotational semantics for broadcasting <ref> [SNP87, Bro88] </ref>. ESTEREL [BCG86] is an imperative, synchronous, deterministic language with broadcast as a programming primitive. LINDA (Chap. 8 of [BA90] gives a description) is in effect Author's address: Department of Computing Science, Chalmers University of Technology, S-412 96 Goteborg, Sweden. E-mail: prasad@cs.chalmers.se. <p> But since t ! P 6' P , CBS is still "more synchronous" than CCS! Communication. In synchronous communication, actions communicate only if performed simultaneously. CBS would thus appear to use synchronous communication. But <ref> [SNP87] </ref> argue that broadcast communication is asynchronous since the sender of a message does not wait for the receiver. CBS (everyday speech!) thus uses synchronous communication by one criterion, and asynchronous by another. CBS makes more distinctions than truly asynchronous calculi.
Reference: [VG89] <author> Frits Vaandrager and Jan Groote. </author> <title> Structured operational semantics and bisimulation as a congruence. </title> <publisher> In Springer Verlag LNCS 372, </publisher> <pages> pages 423-438. </pages> <note> ICALP, </note> <year> 1989. </year>
Reference-contexts: V. S. PRASAD Proof. By adapting the corresponding proof in [Mil89]. There are also general theorems from which we can conclude this proposition. The rules in CBS are both in the well-founded pure tyft format of <ref> [VG89] </ref>, and in the GSOS format of [BIM88]. These papers prove that for calculi whose rules are in their respective formats, ~ is a congruence. We can now quotient P by ~. Definition 9.
Reference: [Win84] <author> Glynn Winskel. </author> <title> Synchronization trees. </title> <journal> Theoretical Computer Science, </journal> <volume> 34 </volume> <pages> 33-82, </pages> <year> 1984. </year>
Reference-contexts: We have a binary parallel composition, rather than one of arbitrary arity, that simulates broadcast. We need the rule Join-read to make j associative. 3.4.1. Discards and the parallel combinator. In <ref> [Win84] </ref>, the interleaving actions of CCS are expressed as synchronous actions by both components, but with one idling. This is exactly what we do in the interleaving rule, except that instead of a general idling we have a selective discard of the message named. <p> So we expect to be able to derive discards independently of other transitions. Synchronisation algebra. The eight rules in Table 2 can be compressed into the single rule of Table 4, using a synchronisation algebra <ref> [Win84] </ref> of actions. This is the advantage of discards over negative premises. Since there can only be one message at a time, we do not define multiplication between actions unless they refer to the same message. The product of two transmissions is always undefined. <p> The latter is easy to check because there is a ranking: a (v) ! first, then a (v) ? and a (v) : last. To multiply two actions is to pick the higher ranking of the two. <ref> [Win84] </ref> shows that if the synchronisation algebra is commutative and associative, so is j. We went the other way. 3.5. Sum and recursion.
References-found: 27

