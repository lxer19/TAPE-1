URL: http://www.cs.sunysb.edu/~astiwari/RPE.ps
Refering-URL: http://www.cs.sunysb.edu/~astiwari/
Root-URL: http://www.cs.sunysb.edu
Title: Decision Procedures in Automated Deduction  
Author: Ashish Tiwari 
Date: December 3, 1997  
Abstract: This report is a survey of some major work in the broad area of integration of decision procedures with theorem provers. The discussion is spread over four sections. The first section is a brief overview of theorem proving methods and decision procedures. The second section discusses mathematical reasoning systems that can be benefited if integrated with theorem provers. The third section deals with several important application theorem provers which incorporate some decision procedures. The final section is a summary of the current state of research in this area and possible future directions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bachmair, Leo, and Ganzinger, H., </author> <title> Ordered chaining for total orderings, </title> <editor> CADE-12, Alan Bundy, ed., </editor> <address> Nancy, France, June/July 1994, </address> <publisher> LNAI 814, pp435-450, Springer Verlag. </publisher>
Reference-contexts: Rather, the equality axioms are encoded as inference rules, which can be subject to certain ordering conditions. Other transitive relations can be handled by related rewriting techniques yielding chaining calculi (see <ref> [1] </ref>). More often than not, the decision procedures for theories in this class are suitable modifications or restrictions of general theorem proving strategies.
Reference: [2] <author> Boyer, R. S., and Moore, J. S., </author> <title> Integrating decision procedures into heuristic theorem provers: A case study of linear arithmetic, Logic and Acquisition of Knowledge, </title> <booktitle> Machine Intelligence; 11, </booktitle> <pages> pp 83-124. </pages>
Reference-contexts: Each of the above six processes in that sequence draw out a goal and replace it by new subgoals in the pool (if applicable). The first two process preserve equivalence and the next three strenthen the formula in anticipation of the use of induction. In <ref> [2] </ref>, the specific problems associated with the issue of integrating a decision procedure within a theorem prover are addressed.
Reference: [3] <author> Buchberger, B. and Loos, R., </author> <title> Algebraic Simplification, Computer Algebra Symbolic and Algebraic Computation, Second Edition, </title> <editor> B. Buch-berger, G.E.Collins, and R.Loos (eds.), </editor> <publisher> Springer-Verlag, </publisher> 1982 11-44. 
Reference: [4] <author> Calmet, J., van Hulzen, J. A., </author> <title> Computer Algebra Applications, Computer Algebra Symbolic and Algebraic Computation, Second Edition, </title> <editor> B. Buch-berger, G.E.Collins, and R.Loos (eds.), </editor> <publisher> Springer-Verlag, </publisher> 1982 245-258. 
Reference-contexts: There has also been work in biology, chemistry, physics and computer science, thus confirming that applications have both engineering and scientific aspects. For a survey on computer algebra applications in different domains, see <ref> [4] </ref>. There have been attempts to incorporate such algebraic decision procedures by building a more general purpose theorem prover over such a computer algebra system. Analytica, discussed in detail later, is such an example.
Reference: [5] <author> Chou, Shang-Ching, </author> <title> Mechanical Geometry Theorem Proving, </title> <address> D. </address> <publisher> Reidel Publishing Company, Kluwer Academic Publishing Group, </publisher> <year> 1988. </year>
Reference: [6] <author> Clark, Edmund., and Zhao, Xudong., </author> <title> Analytica An experiment in combining theorem proving and symbolic computation, </title> <type> Tech. Report CMU-CS-92-17, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1992. </year>
Reference: [7] <author> Guard, J.R., Oglesby, F.C., Bennett, J.H., and Settle, L.G., </author> <note> Semi-automated Mathematics, J. ACM 18 (1969) 49-62. </note>
Reference: [8] <author> J. Jaffar and M. Maher, </author> <title> Constraint Logic Programming: A Survey, </title> <journal> The Journal of Logic Programming 1994:19,20:503-581. </journal>
Reference-contexts: Based on a abstract definition of a constraint language, [9] develops a framework for first-order constrained deduction. Constrained deduction rules are given for equational logic and for first-order logic with equality. In <ref> [8] </ref>, it has been pointed out that constraints can be merged very naturally with logic programming. All the nice properties of logic programming carry over to constraint logic programming.
Reference: [9] <author> C. Kirchner, H. Kirchner and M. Rusinowitch, </author> <title> Deduction with Symbolic Constraints. </title>
Reference-contexts: A lot of work has already been done in the area of constraint logic programming which involves the incorporation of constraints and constraint "solving" methods in a logic-based language. Based on a abstract definition of a constraint language, <ref> [9] </ref> develops a framework for first-order constrained deduction. Constrained deduction rules are given for equational logic and for first-order logic with equality. In [8], it has been pointed out that constraints can be merged very naturally with logic programming.
Reference: [10] <author> Miller, D., Cohen, E., and Andrews, P.B., </author> <title> A look at TPS, </title> <booktitle> Proceedings of the 6th Conference on Automated Deduction, </booktitle> <editor> D.W.Loveland, ed., </editor> <volume> LNCS vol. 138, </volume> <publisher> Springer Verlag, </publisher> <pages> pp. 50-69. 18 </pages>
Reference: [11] <author> Nelson, G., and Oppen, </author> <title> D.C., Fast Decision Procedures based on Con--gruence Closure, </title> <journal> J. ACM, </journal> <volume> vol 27, No. 2, </volume> <month> Apr </month> <year> 1980, </year> <pages> pp. 356-364. </pages>
Reference-contexts: Certain restricted unification problems too are decidable. There has also been work on deciding combination of decidable theories, for example see [15] and <ref> [11] </ref>. This report is a survey of some of the major projects that involved an integration of decision procedures with theorem provers. There are certainly some similarities amongst most of these endeavours. For one, there is a lot of emphasis on simplification and rewriting techniques in these provers.
Reference: [12] <author> Plaisted, David A., </author> <title> Mechanical theorem proving, </title> <booktitle> Formal Techniques in Artificial Intelligence, </booktitle> <editor> R. B. Banerji (ed.), </editor> <year> 1990. </year>
Reference: [13] <author> Rushby, John., </author> <title> Automated Deduction and Formal Methods, </title> <booktitle> Proceedings of CAV '96, </booktitle> <publisher> Springer Verlag LNCS 1102, </publisher> <pages> pp. 169-183, </pages> <month> July </month> <year> 1996. </year>
Reference-contexts: Rushby, <ref> [13] </ref>, points out the directions in which theorem provers should be developed so that they are more useful for dealing with formal methods, i.e. the techniques for the specification and analysis of computational systems.
Reference: [14] <author> Shankar, N., Owre, S., amd Rushby, J. M., </author> <title> The PVS Proof Checker: </title>
References-found: 14

