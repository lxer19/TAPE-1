URL: http://geyer.lcs.mit.edu/~jchapin/6853/Papers/mach-vmm.ps
Refering-URL: http://geyer.lcs.mit.edu/~jchapin/6853/readinglist.html
Root-URL: 
Title: Machine-Independent Virtual Memory Management for Paged Uniprocessor and Multiprocessor Architectures  
Author: Richard Rashid, Avadis Tevanian, Michael Young, David Golub, Robert Baron, David Black, William Bolosky, and Jonathan Chew 
Date: October, 1987.  
Note: This research was sponsored by the Defense Advanced Research Projects Agency (DOD), ARPA Order No. 4864, monitored by the Space and Naval Warfare Systems Command under contract N00039-85-C-1034. This paper was presented at the 2nd Symposium on Architectural Support for Programming Languages and Operating Systems, ACM  
Address: Pittsburgh, Pennsylvania 15213  
Affiliation: Department of Computer Science Carnegie Mellon University  
Abstract: This paper describes the design and implementation of virtual memory management within the CMU Mach Operating System and the experiences gained by the Mach kernel group in porting that system to a variety of architectures. As of this writing, Mach runs on more than half a dozen uniprocessors and multiprocessors including the VAX family of uniprocessors and multiprocessors, the IBM RT PC, the SUN 3, the Encore MultiMax, the Sequent Balance 21000 and several experimental computers. Although these systems vary considerably in the kind of hardware support for memory management they provide, the machine-dependent portion of Mach virtual memory consists of a single code module and its related header file. This separation of software memory management from hardware support has been accomplished without sacrificing system performance. In addition to improving portability, it makes possible a relatively unbiased examination of the pros and cons of various hardware memory management schemes, especially as they apply to the support of multiprocessors. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association of Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Mike Accetta, Robert Baron, William Bolosky, David Golub, Richard Rashid, Avadis Tevanian, Michael Young. </author> <title> Mach: A New Kernel Foundation for UNIX Development. </title> <booktitle> In Proceedings of Summer Usenix. </booktitle> <month> July, </month> <year> 1986. </year>
Reference-contexts: Mach provides complete UNIX 4.3bsd compatibility while significantly extending UNIX notions of virtual memory management and interprocess communication <ref> [1] </ref>. Mach supports: large, sparse virtual address spaces, copy-on-write virtual copy operations, copy-on-write and read-write memory sharing between tasks, memory mapped files and user-provided backing store objects and pagers. This has been accomplished without patterning Mach's internal memory representation after any specific architecture.
Reference: [2] <author> Bisiani, R., Alleva, F., Forin, A. and R. Lerner. </author> <title> Agora: A Distributed System Architecture for Speech Recognition. </title> <booktitle> In International Conference on Acoustics, Speech and Signal Processing. IEEE, </booktitle> <month> April, </month> <year> 1986. </year>
Reference-contexts: designers of Mach are (in alphabetical order): Mike Accetta, Bob Baron, Bob Beck (Sequent), David Black, Bill Bolosky, Jonathan Chew, David Golub, Glenn Marcy, Fred Olivera (Encore), Rick Rashid, Avie Tevanian, Jim Van Schiver (Encore) and Mike Young. 4 e.g. for transaction processing, database management [9] and AI knowledge representation <ref> [2, 3] </ref> 14
Reference: [3] <author> Bisiani,R. and Forin,A. </author> <title> Architectural Support for Multilanguage Parallel Programming on Heterogeneous Systems. </title> <booktitle> In 2nd International Conference on Architectural Support for Programming Languages and Operating Systems. IEEE, </booktitle> <address> Palo Alto , October, </address> <year> 1987. </year>
Reference-contexts: designers of Mach are (in alphabetical order): Mike Accetta, Bob Baron, Bob Beck (Sequent), David Black, Bill Bolosky, Jonathan Chew, David Golub, Glenn Marcy, Fred Olivera (Encore), Rick Rashid, Avie Tevanian, Jim Van Schiver (Encore) and Mike Young. 4 e.g. for transaction processing, database management [9] and AI knowledge representation <ref> [2, 3] </ref> 14
Reference: [4] <institution> Sequent Computer Systems, Inc. Dynix Programmer's Manual Sequent Computer Systems, Inc., </institution> <year> 1986. </year>
Reference-contexts: Obvious parallels can also be made between Mach and systems such as Apollo's Aegis [6], IBM's System/38 [5] and CMU's Hydra [11] -- all of which deal primarily in memory mapped objects. Sequent's Dynix <ref> [4] </ref> and Encore's Umax [10] are multiprocessor UNIX systems which have both provided some form of shared virtual memory. 13 Overall Compilation Peformance: Mach vs. 4.3bsd VAX 8650: 400 buffers Operation Mach 4.3bsd 13 programs 23sec 28sec Mach kernel 19:58min 23:38min VAX 8650: Generic configuration Operation Mach 4.3bsd 13 programs 19sec
Reference: [5] <author> French, R.E., R.W. Collins and L.W. </author> <title> Loen. System/38 Machine Storage Management. </title> <institution> IBM System/38 Technical Developments, IBM General Systems Division :63-66, </institution> <year> 1978. </year>
Reference-contexts: Accent also provided the ability to efficiently transfer large regions of virtual memory in memory between protected address spaces. Obvious parallels can also be made between Mach and systems such as Apollo's Aegis [6], IBM's System/38 <ref> [5] </ref> and CMU's Hydra [11] -- all of which deal primarily in memory mapped objects.
Reference: [6] <author> Leach, P.L., P.H. Levine, B.P. Douros, J.A. Hamilton, D.L. Nelson and B.L. Stumpf. </author> <title> The Architecture of an Integrated Local Network. </title> <journal> IEEE Journal on Selected Areas in Communications SAC-1(5):842-857, </journal> <month> November, </month> <year> 1983. </year>
Reference-contexts: Accent also provided the ability to efficiently transfer large regions of virtual memory in memory between protected address spaces. Obvious parallels can also be made between Mach and systems such as Apollo's Aegis <ref> [6] </ref>, IBM's System/38 [5] and CMU's Hydra [11] -- all of which deal primarily in memory mapped objects.
Reference: [7] <author> Organick, E.I. </author> <title> The Multics System: An Examination of Its Structure. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1972. </year>
Reference-contexts: Relation to Previous Work Mach provides a relatively rich set of virtual memory management functions compared to system such as 4.3bsd UNIX or System V, but most of its features derive from earlier operating systems. Accent [8] and Multics <ref> [7] </ref>, for example, provided the ability to create segments within a virtual address space that corresponded to files or other permanent data. Accent also provided the ability to efficiently transfer large regions of virtual memory in memory between protected address spaces.
Reference: [8] <author> Rashid, R. F. and Robertson, G. </author> <title> Accent: A Communication Oriented Network Operating System Kernel. </title> <booktitle> In Proc. 8th Symposium on Operating Systems Principles, </booktitle> <pages> pages 64-75. </pages> <month> December, </month> <year> 1981. </year>
Reference-contexts: Relation to Previous Work Mach provides a relatively rich set of virtual memory management functions compared to system such as 4.3bsd UNIX or System V, but most of its features derive from earlier operating systems. Accent <ref> [8] </ref> and Multics [7], for example, provided the ability to create segments within a virtual address space that corresponded to files or other permanent data. Accent also provided the ability to efficiently transfer large regions of virtual memory in memory between protected address spaces.
Reference: [9] <author> Alfred Z. Spector, Jacob Butcher, Dean S. Daniels, Daniel J. Duchamp, Jeffrey L. Eppinger, Charles E. Fineman, Abdelsalam Heddaya, Peter M. Schwarz. </author> <title> Support for Distributed Transactions in the TABS Prototype. </title> <booktitle> In Proceedings of the 4th Symposium on Reliability In Distributed Software and Database Systems. </booktitle> <month> October, </month> <year> 1984. </year> <note> Also available as Carnegie-Mellon Report CMU-CS-84-132, </note> <month> July </month> <year> 1984. </year>
Reference-contexts: Acknowledgements The implementors and designers of Mach are (in alphabetical order): Mike Accetta, Bob Baron, Bob Beck (Sequent), David Black, Bill Bolosky, Jonathan Chew, David Golub, Glenn Marcy, Fred Olivera (Encore), Rick Rashid, Avie Tevanian, Jim Van Schiver (Encore) and Mike Young. 4 e.g. for transaction processing, database management <ref> [9] </ref> and AI knowledge representation [2, 3] 14
Reference: [10] <institution> Encore Computing Corporation. UMAX 4.2 Programmer's Reference Manual Encore Computing Corporation, </institution> <year> 1986. </year>
Reference-contexts: Obvious parallels can also be made between Mach and systems such as Apollo's Aegis [6], IBM's System/38 [5] and CMU's Hydra [11] -- all of which deal primarily in memory mapped objects. Sequent's Dynix [4] and Encore's Umax <ref> [10] </ref> are multiprocessor UNIX systems which have both provided some form of shared virtual memory. 13 Overall Compilation Peformance: Mach vs. 4.3bsd VAX 8650: 400 buffers Operation Mach 4.3bsd 13 programs 23sec 28sec Mach kernel 19:58min 23:38min VAX 8650: Generic configuration Operation Mach 4.3bsd 13 programs 19sec 1:16sec Mach kernel 15:50min
Reference: [11] <author> Wulf, W.A., R. Levin and S.P. Harbison. Hydra/C.mmp: </author> <title> An Experimental Computer System. </title> <publisher> McGraw-Hill, </publisher> <year> 1981. </year>
Reference-contexts: Accent also provided the ability to efficiently transfer large regions of virtual memory in memory between protected address spaces. Obvious parallels can also be made between Mach and systems such as Apollo's Aegis [6], IBM's System/38 [5] and CMU's Hydra <ref> [11] </ref> -- all of which deal primarily in memory mapped objects.
Reference: [12] <author> Young, M. W. et. al. </author> <title> The Duality of Memory and Communication in Mach. </title> <booktitle> In Proc. 11th Symposium on Operating Systems Principles, pages . ACM, </booktitle> <month> November, </month> <year> 1987. </year>
Reference-contexts: Experimentation with this approach, which offers the possibility of integrating loosely and tightly coupled multiprocessor computing, is underway. A complete description of this work is currently being written up in <ref> [12] </ref>. Implementations of Mach on more loosely coupled multiprocessors are in progress. 7.
Reference: [13] <author> Zayas, Edward. </author> <title> Process Migration. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Carnegie-Mellon University, </institution> <month> January, </month> <year> 1987. </year>
Reference-contexts: In a tightly coupled multiprocessor, Mach implements efficient message passing through the use of memory management "tricks" which allow lazy-evaluation of by-value data transmission. It is likewise possible to implement shared copy-on-reference <ref> [13] </ref> or read/write data in a network or loosely coupled multiprocessor. Tasks may map into their address spaces references to memory objects which can be implemented by pagers anywhere on the network or within a multiprocessor.
References-found: 13

