URL: http://www-eksl.cs.umass.edu/papers/aips96-sda.ps
Refering-URL: http://eksl-www.cs.umass.edu/publications.html
Root-URL: 
Title: On-line Planning Simulation  
Author: Scott D. Anderson Paul R. Cohen 
Keyword: Simulation, On-line, Real-Time  
Note: Submitted to  
Address: Atlanta, GA 30314-4399  Amherst, MA 01003-4610  
Affiliation: Spelman College  Experimental Knowledge Systems Laboratory University of Massachusetts  
Email: anderson@auc.edu  cohen@cs.umass.edu  
Web: AIPS-96  
Abstract: Mess is a substrate for building simulation environments suitable for testing plans and on-line or real-time planners. The article describes the design of Mess, how simulations are built and how on-line planners integrate with the substrate. Mess supports activities, defined as processes over some time interval, and interactions between activities and other simulation events. Mess interfaces with TCL, which is a portable, extensible definition of computation time, enabling Mess to be used for platform-independent simulations of real-time planning. Mess has been used to re-implement the Phoenix testbed, which simulates forest fires and planning for fire-fighting agents. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Scott D. Anderson. </author> <title> A Simulation Substrate for Real-Time Planning. </title> <type> PhD thesis, </type> <institution> University of Massachusetts at Amherst, </institution> <month> February </month> <year> 1995. </year> <note> Also available as Computer Science Department Technical Report 95-80. </note>
Reference-contexts: Because of these many design decisions, these testbeds are often not as easily shared as their authors intended. This article describes our work on Mess <ref> [1] </ref>, which we believe captures the best of the common, domain-independent aspects of these simulators, and improves the representation of thinking agents and the measurement of time. Mess (Multiple Event Stream Simulator) is best described as a simulation substrate, rather than a simulated environment in itself. <p> In practice, in the simulators implemented using Mess, most of the objects in the PEL are event streams. Let's look briefly at the pseudo-code to see how Mess works. (A more detailed description is available in the first author's dissertation <ref> [1] </ref>.) The primary objective of the engine is to realize events, which we see in the center of the algorithm. <p> In fact, a 8 simulation will behave differently from run to run even if none of these factors change, due simply to variability in CPU time. (Indeed, this variability can be quite striking <ref> [1] </ref>.) One of the few simulators to avoid CPU time is TileWorld, and it's instructive to see why they abandoned it: The noise in the data comes, we believe, largely from our decision to use actual CPU-time measurements to determine reasoning time.
Reference: [2] <author> Mark Boddy and Thomas Dean. </author> <title> Solving time-dependent planning problems. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 979-984, </pages> <address> 1989. Detroit, Michigan. </address>
Reference-contexts: The :length model is used for a number of list-manipulation functions. Many other duration models are implemented in TCL, and this set is extensible by the user, so that domain-specific duration models can be defined, say for anytime algorithms <ref> [2] </ref> or deliberation scheduling [12, 13]. Of course, not every constant-time function takes the same amount of time, and similarly for other duration models. Therefore, the database entry includes a proportionality constant, to be multiplied by the value of the duration model to yield a duration.
Reference: [3] <author> Paul Bratley, Bennett L. Fox, and Linus E. </author> <title> Schrage. A Guide to Simulation. </title> <publisher> Springer-Verlag, </publisher> <year> 1983. </year>
Reference-contexts: The hierarchy of event classes can be used to group kinds of events, such as all the movement events or all the fire events, so that they can be controlled and modified as a group. Mess is a process-oriented simulator <ref> [3, p. 13] </ref>, which means that each event is produced by a process, and that process determines subsequent events. For example, things like fire, weather, and particularly an agent's thinking might each be separate processes in the simulation. The representations of processes are called event streams.
Reference: [4] <author> Paul R. Cohen, Michael L. Greenberg, David M. Hart, and Adele E. Howe. </author> <title> Trial by fire: Understanding the design requirements for agents in complex environments. </title> <journal> AI Magazine, </journal> <volume> 10(3) </volume> <pages> 32-48, </pages> <month> Fall </month> <year> 1989. </year>
Reference-contexts: A number of simulation environments already exist to support research in on-line and real-time planning [7]. Some of these simulators are quite domain-specific, such as our own Phoenix testbed <ref> [4] </ref>, which simulates forest fires in Yellowstone National Park. Other examples are Truckworld [6] and Trains [10], where trucks or trains move cargo in a graph of depots, cities and towns.
Reference: [5] <author> Edmund H. Durfee and T. A. Montgomery. </author> <title> MICE: A flexible testbed for intelligent coordination experiments. </title> <editor> In L. Erman, editor, </editor> <title> Intelligent Real-Time Problem Solving: </title> <booktitle> Workshop Report, </booktitle> <address> Palo Alto, CA, </address> <year> 1990. </year> <institution> Cimflex Teknowledge Corp. </institution> <month> 12 </month>
Reference-contexts: Other examples are Truckworld [6] and Trains [10], where trucks or trains move cargo in a graph of depots, cities and towns. Other testbeds are much more domain-independent, such as the Mice testbed <ref> [5] </ref>, in which agents move in a generic gridworld. With such a plethora of testbeds, there have been many good ideas and much duplication of effort.
Reference: [6] <author> Steve Hanks, Dat Nguyen, and Chris Thomas. </author> <title> The new Truckworld manual. </title> <type> Technical report, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <year> 1992. </year> <note> Forthcoming. Contact truckworld-request@cs.washington.edu. </note>
Reference-contexts: A number of simulation environments already exist to support research in on-line and real-time planning [7]. Some of these simulators are quite domain-specific, such as our own Phoenix testbed [4], which simulates forest fires in Yellowstone National Park. Other examples are Truckworld <ref> [6] </ref> and Trains [10], where trucks or trains move cargo in a graph of depots, cities and towns. Other testbeds are much more domain-independent, such as the Mice testbed [5], in which agents move in a generic gridworld.
Reference: [7] <author> Steve Hanks, Martha E. Pollack, and Paul R. Cohen. </author> <title> Benchmarks, testbeds, controlled experimentation, and the design of agent architectures. </title> <journal> AI Magazine, </journal> <volume> 13(4) </volume> <pages> 17-42, </pages> <year> 1993. </year>
Reference-contexts: If the thinking time of the planner is limited, so that there is time pressure on its thinking, the on-line planning becomes real-time planning. A number of simulation environments already exist to support research in on-line and real-time planning <ref> [7] </ref>. Some of these simulators are quite domain-specific, such as our own Phoenix testbed [4], which simulates forest fires in Yellowstone National Park. Other examples are Truckworld [6] and Trains [10], where trucks or trains move cargo in a graph of depots, cities and towns.
Reference: [8] <author> Adele E. Howe. </author> <title> Accepting the Inevitable: The Role of Failure Recovery in the Design of Planners. </title> <type> PhD thesis, </type> <institution> University of Massachusetts at Amherst, </institution> <month> February </month> <year> 1993. </year> <note> Also available as Computer Science Department Technical Report 93-40. </note>
Reference-contexts: Furthermore, simulators enable the planner to be on-line: it can be an agent in an ongoing environment, monitoring the progress of the plan and making additions or corrections as necessary. An on-line planner can even scrap a failing plan or sub-plan and replan <ref> [8] </ref>. If the thinking time of the planner is limited, so that there is time pressure on its thinking, the on-line planning becomes real-time planning. A number of simulation environments already exist to support research in on-line and real-time planning [7].
Reference: [9] <author> David Joslin, Arthur Nunes, and Martha E. Pollack. </author> <title> TileWorld user's manual. </title> <type> Technical Report 93-12, </type> <institution> Department of Computer Science, University of Pittsburgh, </institution> <year> 1993. </year> <note> Contact tileworld-request@cs.pitt.edu. </note>
Reference-contexts: For example, the ignition of a firecell is an event in Phoenix, the appearance of a tile is a TileWorld event <ref> [9, 11] </ref>, and a train traversing a route is an event in Trains. Events are defined in Mess using Clos, where the user supplies code that determines when the event occurs and how it modifies the representation of the world.
Reference: [10] <author> Nathaniel G. Martin and Gregory J. Mitchell. </author> <title> A transportation domain simulation for debugging plans. Obtained from the author, </title> <address> martin@cs.rochester.edu, </address> <year> 1994. </year>
Reference-contexts: A number of simulation environments already exist to support research in on-line and real-time planning [7]. Some of these simulators are quite domain-specific, such as our own Phoenix testbed [4], which simulates forest fires in Yellowstone National Park. Other examples are Truckworld [6] and Trains <ref> [10] </ref>, where trucks or trains move cargo in a graph of depots, cities and towns. Other testbeds are much more domain-independent, such as the Mice testbed [5], in which agents move in a generic gridworld.
Reference: [11] <author> Martha E. Pollack and Marc Ringuette. </author> <title> Introducing the Tileworld: Experimentally evaluating agent architectures. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 183-189. </pages> <booktitle> American Association for Artificial Intelligence, </booktitle> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: For example, the ignition of a firecell is an event in Phoenix, the appearance of a tile is a TileWorld event <ref> [9, 11] </ref>, and a train traversing a route is an event in Trains. Events are defined in Mess using Clos, where the user supplies code that determines when the event occurs and how it modifies the representation of the world. <p> If we wish to get the cleanest trials possible, we may need to use a time estimate that does not depend on the vagaries of the underlying machine and Lisp system. <ref> [11] </ref> Later implementations of TileWorld incremented the simulation clock by a fixed quantity for each iteration of the IRMA agent architecture. Mess also abandons the CPU time approach, but our solution makes no commitment to an agent architecture. Instead, it interfaces with agents implemented in Timed Common Lisp (TCL).
Reference: [12] <author> Stuart Russell and Eric Wefald. </author> <title> Decision-theoretic control of reasoning: General theory and an application to game playing. </title> <type> Technical Report UCB/CSD 88/435, </type> <institution> UC Berkeley, </institution> <month> October </month> <year> 1988. </year>
Reference-contexts: The :length model is used for a number of list-manipulation functions. Many other duration models are implemented in TCL, and this set is extensible by the user, so that domain-specific duration models can be defined, say for anytime algorithms [2] or deliberation scheduling <ref> [12, 13] </ref>. Of course, not every constant-time function takes the same amount of time, and similarly for other duration models. Therefore, the database entry includes a proportionality constant, to be multiplied by the value of the duration model to yield a duration.
Reference: [13] <author> Stuart J. Russell and Eric H. Wefald. </author> <title> On optimal game-tree search using rational meta-reasoning. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 334-340, </pages> <address> 1989. Detroit, Michigan. </address> <month> 13 </month>
Reference-contexts: The :length model is used for a number of list-manipulation functions. Many other duration models are implemented in TCL, and this set is extensible by the user, so that domain-specific duration models can be defined, say for anytime algorithms [2] or deliberation scheduling <ref> [12, 13] </ref>. Of course, not every constant-time function takes the same amount of time, and similarly for other duration models. Therefore, the database entry includes a proportionality constant, to be multiplied by the value of the duration model to yield a duration.
References-found: 13

