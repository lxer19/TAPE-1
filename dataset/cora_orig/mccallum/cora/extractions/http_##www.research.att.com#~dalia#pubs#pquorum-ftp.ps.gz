URL: http://www.research.att.com/~dalia/pubs/pquorum-ftp.ps.gz
Refering-URL: http://www.research.att.com/~dalia/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fdalia,reiter,rwrightg@research.att.com  
Title: Probabilistic Quorum Systems  
Author: Dahlia Malkhi Michael Reiter Rebecca Wright 
Address: 180 Park Avenue, Florham Park, NJ 07932-0971  
Affiliation: AT&T Labs|Research  
Abstract: Services replicated using a quorum system allow operations to be performed at only a subset (quorum) of the servers, and ensure consistency among operations by requiring that any two quorums intersect. In this paper we explore the consequences of requiring this intersection property to hold only with very high probability. We show that doing so can offer dramatic improvements in the performance and availability of the service, both for services tolerant of benign server failures and services tolerant of arbitrary (Byzantine) ones. We also prove a lower bound on the performance that can be achieved with this technique. 
Abstract-found: 1
Intro-found: 1
Reference: [AE91] <author> D. Agrawal and A. El Abbadi. </author> <title> An efficient and fault-tolerant solution for distributed mutual exclusion. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(1) </volume> <pages> 1-20, </pages> <year> 1991. </year>
Reference: [AR92] <author> Y. Aumann and M. Rabin. </author> <title> Clock construction in fully asynchronous parallel systems and PRAM simulation. </title> <booktitle> In Proceedings of the 33rd IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 147-156, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Two examples of this are used to efficiently simulate a PRAM using an asynchronous system <ref> [KPRR92, AR92] </ref>. Specifically, Kedem et al. [KPRR92] use a replicated variable in a way that a correct copy can be reliably identified and probably exists. <p> They then use these variables to create a global counter that processors use to determine whether they are roughly synchronized with other processors, and behave appropriately if they are not. Aumann and Rabin <ref> [AR92] </ref> exhibit a clock construction in an asynchronous system with multiple processors that use shared memory to create an object that correctly behaves as a clock with high probability. They use the clock to ensure that processors stay synchronized throughout the computation.
Reference: [CP96] <author> R. Caceres and V. Padmanabhan. </author> <title> Fast and scalable hand-offs for wireless internetworks. </title> <booktitle> In Proceedings of the 2nd ACM/IEEE International Conference on Mobile Computing and Networking (MobiCom '96), </booktitle> <pages> pages 56-66, </pages> <month> November </month> <year> 1996. </year>
Reference-contexts: Lampson [Lam83] describes this kind of mechanism as hints, and describes several systems that use such hints [LS79, MW77, Smi81]. More recently, hints have been used in mobile systems to find more direct routes to the current location of a mobile device <ref> [JP96, CP96] </ref>. 1.1 Related Work Though ours is the first work to study probabilistic quorum systems as such, the use of replicated variables to give probably correct results has proved useful in other contexts.
Reference: [BG87] <author> D. Barbara and H. Garcia-Molina. </author> <title> The reliability of voting mechanisms. </title> <journal> In IEEE Transactions on Computers, </journal> <volume> 36(10) </volume> <pages> 1197-1208, </pages> <month> October </month> <year> 1987. </year> <month> 6 </month>
Reference-contexts: Quorum systems have been extensively studied and measured (cf., [Gif79, Tho79, Mae85, GB85, Her86, BG87, ET89, CAA90, AE91, NW94, PW95a, PW95b]). Three measures of a quorum system will be of particular interest in this paper: load [NW94], fault tolerance <ref> [BG87] </ref>, and failure probability (see [BG87, PW95b]). The load of a quorum system is a measure of its efficiency. Intuitively, the load is the rate at which the busiest server will be accessed. <p> Quorum systems have been extensively studied and measured (cf., [Gif79, Tho79, Mae85, GB85, Her86, BG87, ET89, CAA90, AE91, NW94, PW95a, PW95b]). Three measures of a quorum system will be of particular interest in this paper: load [NW94], fault tolerance [BG87], and failure probability (see <ref> [BG87, PW95b] </ref>). The load of a quorum system is a measure of its efficiency. Intuitively, the load is the rate at which the busiest server will be accessed. The fault tolerance, also called the availability, of a system is the number of servers that can fail without disabling the system. <p> Therefore, for any p 1 ` p n , the failure probability of W (n; l) is asymptotically optimal. Moreover, if 1 2 p 1 ` p n , this probability is provably better than any strict quorum system. in terms of failure probabilities <ref> [BG87, PW95b] </ref>). The figure plots the failure probability of majority and singleton 4 against W (n; `), for n = 100 and n = 900, respectively.
Reference: [CAA90] <author> S. Y. Cheung, M. H. Ammar, and M. Ahamad. </author> <title> The grid protocol: A high performance scheme for maintaining replicated data. </title> <booktitle> In Proceedings of the 6th IEEE International Conference on Data Engineering, </booktitle> <pages> pages 438-445, </pages> <year> 1990. </year>
Reference: [CLR89] <author> T. Cormen, C. Leiserson, and R. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press. </publisher> <year> 1989. </year>
Reference-contexts: This is somewhat similar to the well-known birthday paradox <ref> [CLR89] </ref>: Given two quorums, the probability that any given element in one quorum is also in the second quorum is quite small ( ` p n ), but the probability that some element appears in both quorums is quite high (at least 1 e ` 2 , as we shall prove
Reference: [ET89] <author> A. El Abbadi and S. Toueg. </author> <title> Maintaining availability in partitioned replicated databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 14(2) </volume> <pages> 264-290, </pages> <month> June </month> <year> 1989. </year>
Reference: [GB85] <author> H. Garcia-Molina and D. Barbara. </author> <title> How to assign votes in a distributed system. </title> <journal> Journal of the ACM, </journal> <volume> 32(4) </volume> <pages> 841-860, </pages> <month> October </month> <year> 1985. </year>
Reference: [Gif79] <author> D. K. Gifford. </author> <title> Weighted voting for replicated data. </title> <booktitle> In Proceedings of the 7th Symposium on Operating Systems Principles, </booktitle> <pages> pages 150-162, </pages> <year> 1979. </year>
Reference: [Her86] <author> M. Herlihy. </author> <title> A quorum-consensus replication method for abstract data types. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 4(1) </volume> <pages> 32-53, </pages> <month> February </month> <year> 1986. </year>
Reference: [JP96] <author> D. Johnson and C. Perkins. </author> <title> Route optimization in Mobile IP, </title> <type> Internet Draft, </type> <institution> Internet Engineering Task Force, </institution> <month> February </month> <year> 1996. </year>
Reference-contexts: Lampson [Lam83] describes this kind of mechanism as hints, and describes several systems that use such hints [LS79, MW77, Smi81]. More recently, hints have been used in mobile systems to find more direct routes to the current location of a mobile device <ref> [JP96, CP96] </ref>. 1.1 Related Work Though ours is the first work to study probabilistic quorum systems as such, the use of replicated variables to give probably correct results has proved useful in other contexts.
Reference: [KPRR92] <author> Z. Kedem, K. Palem, M. Rabin, and A. Raghunathan. </author> <title> Efficient program transformations for resilient parallel computation via randomization. </title> <booktitle> In Proceedings of the 24th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 306-317, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Two examples of this are used to efficiently simulate a PRAM using an asynchronous system <ref> [KPRR92, AR92] </ref>. Specifically, Kedem et al. [KPRR92] use a replicated variable in a way that a correct copy can be reliably identified and probably exists. <p> Two examples of this are used to efficiently simulate a PRAM using an asynchronous system [KPRR92, AR92]. Specifically, Kedem et al. <ref> [KPRR92] </ref> use a replicated variable in a way that a correct copy can be reliably identified and probably exists. They then use these variables to create a global counter that processors use to determine whether they are roughly synchronized with other processors, and behave appropriately if they are not.
Reference: [Lam83] <author> B. Lampson. </author> <title> Hints for computer system design. </title> <journal> Operating Systems Review, </journal> <volume> 17(5) </volume> <pages> 33-48, </pages> <year> 1983. </year>
Reference-contexts: For example, probabilistic quorum systems could be useful wherever quick access to an answer that is likely to be correct can greatly improve efficiency in the normal case, and the cost of dealing with incorrect answers when they do occur is not too high. Lampson <ref> [Lam83] </ref> describes this kind of mechanism as hints, and describes several systems that use such hints [LS79, MW77, Smi81].
Reference: [LS79] <author> B. Lampson and R. Sproul. </author> <title> An open operating system for a single-user machine. </title> <journal> Operating Systems Review, </journal> <volume> 13(5) </volume> <pages> 98-105, </pages> <year> 1979. </year>
Reference-contexts: Lampson [Lam83] describes this kind of mechanism as hints, and describes several systems that use such hints <ref> [LS79, MW77, Smi81] </ref>.
Reference: [Mae85] <author> M. Maekawa. </author> <title> A p n algorithm for mutual exclusion in decentralized systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 3(2) </volume> <pages> 145-159, </pages> <year> 1985. </year>
Reference: [MMR97] <author> D. Malkhi, M. Merritt and O. Rodeh. </author> <title> Secure multicast in a WAN. </title> <booktitle> The International Conference on Distributed Computing Systems (ICDCS), </booktitle> <address> Baltimore, </address> <month> May </month> <year> 1997, </year> <note> to be published. </note>
Reference-contexts: Malkhi et al. use essentially a hybrid construction of quorums, combining randomized and deterministic choice of members, to solve the problem of secure reliable multicast in a large network with many components <ref> [MMR97] </ref>. Their work focuses on a protocol that enforces random choice of members by involving a set of deterministically chosen processes, whose size is constant, in every operation.
Reference: [MR97] <author> D. Malkhi and M. Reiter. </author> <title> Byzantine quorum systems. </title> <booktitle> In Proceedings of the 29th ACM Symposium on Theory of Computing (STOC), </booktitle> <month> May </month> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Therefore, stronger requirements are necessary in order to use quorums in Byzantine environments. For such environments, Malkhi and Reiter defined (strict) dissemination quorum systems <ref> [MR97] </ref> to support replicated servers that store self-verifying data, i.e., data that servers can suppress but not undetectably alter (e.g., digitally signed data). Briefly, in a t-dissemination quorum system, any two quorums intersect in t + 1 servers. <p> As discussed in Section 1, quorum systems are generally insufficient to guarantee consistency in case of Byzantine server failures. A t-dissemination quorum system increases quorum overlap to t + 1 servers, which suffices to mask faulty server behavior for some types of data <ref> [MR97] </ref>. 1 Definition: A quorum system Q is a t-dissemination quorum system if for every Q 1 ; Q 2 2 Q, jQ 1 " Q 2 j t + 1. <p> The load of a quorum system, defined in [NW94], captures the probability of accessing the busiest server in the best case. Load is a measure of efficiency; all other things equal, systems with lower load can process more requests than those with higher load. 1 The original definition of <ref> [MR97] </ref> treats dissemination quorum systems more generally than we do here. The simplified definition pre sented here suffices for our purposes. 2 Definition: Let w be a strategy for a set system Q = fQ 1 ; : : : ; Q m g over a universe U . <p> This is because two quorums may intersect in a set containing faulty servers only, which may deviate arbitrarily and undetectably from their assigned protocol. Malkhi and Reiter <ref> [MR97] </ref> defined (strict) dissemination quorum systems that can be used to construct Byzantine-fault-tolerant replicated services that store certain types of data. <p> probabilistic t-dissemination quorum system if for all B U such that jBj = t, X w (Q)w (Q ) 1 *: Probabilistic dissemination quorum systems can be used to implement Byzantine fault-tolerant services for the same types of data that strict ones can, using identical protocols to access them (see <ref> [MR97] </ref>). Note that, given a t-dissemination probabilistic quorum system Q, t is the number of Byzantine failures that can be tolerated, while A (Q) is the number of crash failures that can be tolerated. <p> Since servers that fail arbitrarily can always opt to send no messages, A (Q) t. 4.1 A probabilistic n 3 -dissemination quorum construction In this section we present a probabilistic t-dissemination quorum construction for t = n 3 , the resiliency bound for strict dissemination quorum systems <ref> [MR97] </ref>. Our construction exhibits much better load and fault tolerance than strict constructions for this resiliency. We use a construction similar to W (n; `), and show that for an appropriate choice of the parameter `, this construction ensures consistency with any desired probability for sufficiently large universes.
Reference: [MW77] <author> M. McQuillan and D. Walden. </author> <title> The ARPA network design decisions. </title> <booktitle> In Proceedings of Computer Networks 1, </booktitle> <pages> pages 243-289, </pages> <month> August </month> <year> 1977. </year>
Reference-contexts: Lampson [Lam83] describes this kind of mechanism as hints, and describes several systems that use such hints <ref> [LS79, MW77, Smi81] </ref>.
Reference: [NW94] <author> M. Naor and A. Wool. </author> <title> The load, capacity, and availability of quorum systems. </title> <booktitle> In Proceedings of the 35th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 214-225, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Quorum systems have been extensively studied and measured (cf., [Gif79, Tho79, Mae85, GB85, Her86, BG87, ET89, CAA90, AE91, NW94, PW95a, PW95b]). Three measures of a quorum system will be of particular interest in this paper: load <ref> [NW94] </ref>, fault tolerance [BG87], and failure probability (see [BG87, PW95b]). The load of a quorum system is a measure of its efficiency. Intuitively, the load is the rate at which the busiest server will be accessed. <p> That is, w : Q ! [0; 1] satisfies P In this paper we consider several measures of quorum systems, including the load, fault tolerance, and failure probability of the system. The load of a quorum system, defined in <ref> [NW94] </ref>, captures the probability of accessing the busiest server in the best case. <p> The failure probability F p (Q) of Q is the probability that every Q 2 Q contains at least one faulty server. A good failure probability F p (Q) for a strict quorum system Q has lim n!1 F p (Q) = 0 when p &lt; 1 2 <ref> [NW94] </ref>. <p> There is a tradeoff between load and fault tolerance in strict quorum systems. It is known that for any strict quorum system Q over n servers, L (Q) maxf 1 c (Q) c (Q) n g where c (Q) is the size of the smallest quorum in Q <ref> [NW94] </ref>. In particular, this implies that for any strict quorum system Q, L (Q) 1 p n .
Reference: [PW95a] <author> D. Peleg and A. Wool. Crumbling walls: </author> <title> A class of high availability quorum systems. </title> <booktitle> In Proceedings of the 14th ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 120-129, </pages> <month> August </month> <year> 1995. </year>
Reference: [PW95b] <author> D. Peleg and A. Wool. </author> <title> The availability of quorum systems. </title> <booktitle> Information and Computation 123(2) </booktitle> <pages> 210-233, </pages> <year> 1995. </year>
Reference-contexts: Quorum systems have been extensively studied and measured (cf., [Gif79, Tho79, Mae85, GB85, Her86, BG87, ET89, CAA90, AE91, NW94, PW95a, PW95b]). Three measures of a quorum system will be of particular interest in this paper: load [NW94], fault tolerance [BG87], and failure probability (see <ref> [BG87, PW95b] </ref>). The load of a quorum system is a measure of its efficiency. Intuitively, the load is the rate at which the busiest server will be accessed. The fault tolerance, also called the availability, of a system is the number of servers that can fail without disabling the system. <p> Using Chernoff's bound, this probability is at most F p (W (n; l)) = P (#fail &gt; n ` p e 2 (n) n . Peleg and Wool showed that the failure probability of any quorum system whose fault tolerance is f is at least e (f) <ref> [PW95b] </ref>. Therefore, for any p 1 ` p n , the failure probability of W (n; l) is asymptotically optimal. Moreover, if 1 2 p 1 ` p n , this probability is provably better than any strict quorum system. in terms of failure probabilities [BG87, PW95b]). <p> Therefore, for any p 1 ` p n , the failure probability of W (n; l) is asymptotically optimal. Moreover, if 1 2 p 1 ` p n , this probability is provably better than any strict quorum system. in terms of failure probabilities <ref> [BG87, PW95b] </ref>). The figure plots the failure probability of majority and singleton 4 against W (n; `), for n = 100 and n = 900, respectively.
Reference: [Sch90] <author> F. B. Schneider. </author> <title> Implementing fault-tolerant services using the state machine approach: A tutorial. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 299-319, </pages> <month> December </month> <year> 1990. </year>
Reference: [Smi81] <author> J. Smith. </author> <title> A study of branch prediction strategies. </title> <booktitle> In Proceedings of the 8th Symposium on Computer Architecture, </booktitle> <pages> pages 135-148, </pages> <month> May </month> <year> 1981. </year>
Reference-contexts: Lampson [Lam83] describes this kind of mechanism as hints, and describes several systems that use such hints <ref> [LS79, MW77, Smi81] </ref>.
Reference: [Tho79] <author> R. H. Thomas. </author> <title> A majority consensus approach to concur-rency control for multiple copy databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 4(2) </volume> <pages> 180-209, </pages> <year> 1979. </year> <month> 7 </month>
References-found: 24

