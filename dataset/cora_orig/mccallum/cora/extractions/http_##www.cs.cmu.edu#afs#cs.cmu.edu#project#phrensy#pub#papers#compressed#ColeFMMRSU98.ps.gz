URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/project/phrensy/pub/papers/compressed/ColeFMMRSU98.ps.gz
Refering-URL: http://www.cs.cmu.edu/~bmm/ColeFMMRSU98.html
Root-URL: 
Title: On Balls and Bins with Deletions  
Author: Richard Cole Alan Frieze Bruce M. Maggs Michael Mitzenmacher Andrea W. Richa Ramesh K. Sitaraman k Eli Upfal flfl 
Abstract: We consider the problem of extending the analysis of balls and bins processes where a ball is placed in the least loaded of d randomly chosen bins to cover deletions. In particular, we are interested in the case where the system maintains a fixed load, and deletions are determined by an adversary before the process begins. We show that with high probability the load in any bin is O(log log n). In fact, this result follows from recent work by Cole et al. concerning a more difficult problem of routing in a butterfly network. The main contribution of this paper is to give a different proof of this bound, which follows the lines of the analysis of Azar, Broder, Karlin, and Upfal for the corresponding static load balancing problem. We also give a specialized (and hence simpler) version of the argument from the paper by Cole et al. for the balls and bins scenario. Finally, we provide an alternative analysis also based on the approach of Azar, Broder, Karlin, and Upfal for the special case where items are deleted according to their age. Although this analysis does not yield better bounds than our argument for the general case, it is interesting because it utilizes a two-dimensional family of random variables in order to account for the age of the items. This technique may be of more general use.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Adler, P. Berenbrink, and K. Schroder. </author> <title> Analyzing an infinite parallel job allocation process. </title> <note> To appear in ESA 98. </note>
Reference-contexts: This work has led to a number papers analyzing related load balancing schemes, including for example <ref> [1, 2, 5, 6, 7, 8, 9, 11, 12] </ref>. Note that the above result applies to a static problem, where a fixed number of balls are distributed. <p> Indeed, the original paper by Azar, Broder, Karlin, and Upfal examines the dynamic situation where at each step a random ball is deleted and re-inserted in the system [4]. Related work by, for example, Mitzenmacher [8, 9, 11] and Adler et al. <ref> [1] </ref> examines deletions via connections with queueing theoretical models. Here we focus on a model where an adversary may specify a deletion sequence in advance.
Reference: [2] <author> M. Adler, S. Chakrabarti, M. Mitzenmacher, and L. Rasmussen. </author> <title> Parallel randomized load balancing. </title> <booktitle> In Proceedings of the 27th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1995, </year> <pages> pp. 238-247. </pages>
Reference-contexts: This work has led to a number papers analyzing related load balancing schemes, including for example <ref> [1, 2, 5, 6, 7, 8, 9, 11, 12] </ref>. Note that the above result applies to a static problem, where a fixed number of balls are distributed.
Reference: [3] <author> N. Alon and J. H. Spencer. </author> <title> The Probabilistic Method. </title> <publisher> John Wiley and Sons, </publisher> <year> 1992. </year>
Reference-contexts: (:E i+1 j E i ) Pr (E i ) + Pr (:E i ); we have Pr (:E i+1 ) T Pr (B (n; p i ) k) + Pr (:E i ): (3) We can bound large deviations in the binomial distribution with the formula (see for instance <ref> [3] </ref>, Appendix A.) Pr (B (n; p i ) ep i n) e p i n : (4) We may then set fi 6 = n 2e , and subsequently fi i = i1 Note that the fi i are chosen so that Pr (B (n; p i ) fi i+1
Reference: [4] <author> Y. Azar, A. Z. Broder, A. R. Karlin, and E. Upfal. </author> <title> Balanced allocations. </title> <booktitle> In Proceedings of the 26th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1994, </year> <pages> pp. 593-602. </pages>
Reference-contexts: The seminal paper of Azar, Broder, Karlin, and Upfal asked a related question: suppose the balls are placed sequentially, and each ball is placed in the least loaded of d bins chosen independently and uniformly at random <ref> [4] </ref>. In this case, they find that the maximum load is log log n= log d + O (1) with high probability; more detailed analysis of the distribution in this case is undertaken in [10]. <p> Indeed, the original paper by Azar, Broder, Karlin, and Upfal examines the dynamic situation where at each step a random ball is deleted and re-inserted in the system <ref> [4] </ref>. Related work by, for example, Mitzenmacher [8, 9, 11] and Adler et al. [1] examines deletions via connections with queueing theoretical models. Here we focus on a model where an adversary may specify a deletion sequence in advance. Our first and main result is to extend the proof of [4] <p> <ref> [4] </ref>. Related work by, for example, Mitzenmacher [8, 9, 11] and Adler et al. [1] examines deletions via connections with queueing theoretical models. Here we focus on a model where an adversary may specify a deletion sequence in advance. Our first and main result is to extend the proof of [4] to handle a polynomial length sequence of insertions and deletions, where the maximum load in the system is always at most n balls. <p> We restate this proof for the balls and bins setting, where it becomes significantly simpler. Finally, we consider a special case in which deletions are always of the item that has been longest in the system. We again use 1 a variant of the two-choice argument from <ref> [4] </ref>, this time making use of a two-dimensional family of random variables, similar in spirit to the work of [11]. <p> We emphasize that the interest of this work lies in the techniques used rather than the result, which is already implicit in the work of [6]. 2 Adversarial deletions: polynomially many steps In this section, we demonstrate that the original proof of Azar, Broder, Karlin, and Upfal in <ref> [4] </ref> can be extended to handle deletions under an appropriate adversarial model for polynomially many steps. We first define the underlying process. <p> Otherwise ~v is arbitrary, although we emphasize that it is chosen before the process begins and does not depend on the random choices made during the process. We adopt some of the notation of <ref> [4] </ref>. Each ball is assigned a fixed height upon entry, where the height is the number of balls in the bin, including itself. The height of the ball placed at time t is denoted by h (t). <p> Establishing the proper conditioning between the number of bins with i and i + 1 balls makes the proof challenging. A key idea is to avoid seeking a direct bound on the number of bins containing at least i balls. Rather, following <ref> [4] </ref>, we use the fact that the number of balls of height at least i bounds the number of bins containing at least i balls. This leads us to obtain bounds on the distribution of ball heights which, with high probability, hold for polynomially many steps. <p> On the other hand, the adversary is constrained, for the full sequence of deletions must be chosen up front, and this allows the result. The key difference between our result on that of <ref> [4] </ref> is that they find a dominating distribution of heights on one set of n balls, whereas we use a distribution that applies to every set of n balls present in the system as it evolves. <p> at least 1 o (1=n c 1 ) the maximum load of a bin achieved by process P d (~v) over T = n c 2 steps is log log n= log d + O ((c 1 + c 2 )=d) Proof: The argument extends the original Theorem 4 of <ref> [4] </ref>, by determining a distribution on the heights of the balls that holds for polynomially many steps, regardless of which n balls are in the 2 system at any point in time. <p> Then X Y t = i=1 that is, the summation over I (t 0 ) is implicitly over the values of Y t for the balls in the system at time t 0 . (This statement differs from the result of <ref> [4] </ref>; the important point here is that we can bound P regardless of what n balls are in the system.
Reference: [5] <editor> P. Berenbrink, F. Meyer auf der Heide, and K. </editor> <title> Schroder. Allocating weighted jobs in parallel. </title> <booktitle> In Proceedings of the 9th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <year> 1997, </year> <pages> pp. 302-310. </pages>
Reference-contexts: This work has led to a number papers analyzing related load balancing schemes, including for example <ref> [1, 2, 5, 6, 7, 8, 9, 11, 12] </ref>. Note that the above result applies to a static problem, where a fixed number of balls are distributed.
Reference: [6] <author> R. Cole, B. M. Maggs, F. Meyer auf der Heide, M. Mitzenmacher, A. W. Richa, K. Schroder, R. K. Sitaraman, and B. Vocking. </author> <title> Randomized Protocols for Low-Congestion Circuit Routing in Multistage Interconnection Networks. </title> <booktitle> In Proceedings of the 30th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1998, </year> <pages> pp. 378-388. </pages>
Reference-contexts: This work has led to a number papers analyzing related load balancing schemes, including for example <ref> [1, 2, 5, 6, 7, 8, 9, 11, 12] </ref>. Note that the above result applies to a static problem, where a fixed number of balls are distributed. <p> We then note that an even more general result, in which re-insertions can occur, is already essentially contained in the results of <ref> [6] </ref> (a re-insertion causes a ball to choose among the same bins as on its first insertion). This work considered a similar problem related to routing on a butterfly network. We restate this proof for the balls and bins setting, where it becomes significantly simpler. <p> We emphasize that the interest of this work lies in the techniques used rather than the result, which is already implicit in the work of <ref> [6] </ref>. 2 Adversarial deletions: polynomially many steps In this section, we demonstrate that the original proof of Azar, Broder, Karlin, and Upfal in [4] can be extended to handle deletions under an appropriate adversarial model for polynomially many steps. We first define the underlying process. <p> A similar argument appears in <ref> [6] </ref> for the more difficult problem of routing circuits in a butterfly network. Therefore, our result is not new, in that it follows naturally from the argument in [6]. Rather, our goal is to present a self-contained and simplified version of the proof for the simpler balls-and-bins situation. <p> A similar argument appears in <ref> [6] </ref> for the more difficult problem of routing circuits in a butterfly network. Therefore, our result is not new, in that it follows naturally from the argument in [6]. Rather, our goal is to present a self-contained and simplified version of the proof for the simpler balls-and-bins situation. For convenience, we focus on the case d = 2. We consider a variation Q d (~v; ~w) of the process P d (~v).
Reference: [7] <author> A. Czumaj and V. Stemann. </author> <title> Randomized allocation processes. </title> <booktitle> In Proceedings of the 38th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1997, </year> <pages> pp. 194-203. 10 </pages>
Reference-contexts: This work has led to a number papers analyzing related load balancing schemes, including for example <ref> [1, 2, 5, 6, 7, 8, 9, 11, 12] </ref>. Note that the above result applies to a static problem, where a fixed number of balls are distributed.
Reference: [8] <author> M. Mitzenmacher. </author> <title> Density dependent jump markov processes and applications to load balancing. </title> <booktitle> In Proceedings of the 37th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1996, </year> <pages> pp. 213-223. </pages>
Reference-contexts: This work has led to a number papers analyzing related load balancing schemes, including for example <ref> [1, 2, 5, 6, 7, 8, 9, 11, 12] </ref>. Note that the above result applies to a static problem, where a fixed number of balls are distributed. <p> Indeed, the original paper by Azar, Broder, Karlin, and Upfal examines the dynamic situation where at each step a random ball is deleted and re-inserted in the system [4]. Related work by, for example, Mitzenmacher <ref> [8, 9, 11] </ref> and Adler et al. [1] examines deletions via connections with queueing theoretical models. Here we focus on a model where an adversary may specify a deletion sequence in advance.
Reference: [9] <author> M. Mitzenmacher. </author> <title> On the analysis of randomized load balancing schemes. </title> <booktitle> In Proceedings of the 9th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <year> 1997, </year> <pages> pp. 292-301. </pages>
Reference-contexts: This work has led to a number papers analyzing related load balancing schemes, including for example <ref> [1, 2, 5, 6, 7, 8, 9, 11, 12] </ref>. Note that the above result applies to a static problem, where a fixed number of balls are distributed. <p> Indeed, the original paper by Azar, Broder, Karlin, and Upfal examines the dynamic situation where at each step a random ball is deleted and re-inserted in the system [4]. Related work by, for example, Mitzenmacher <ref> [8, 9, 11] </ref> and Adler et al. [1] examines deletions via connections with queueing theoretical models. Here we focus on a model where an adversary may specify a deletion sequence in advance.
Reference: [10] <author> M. Mitzenmacher. </author> <title> Studying balanced allocations with differential equations. </title> <type> Technical Note 1997-024, </type> <institution> Digital Equipment Corporation Systems Research Center, </institution> <address> Palo Alto, CA, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: In this case, they find that the maximum load is log log n= log d + O (1) with high probability; more detailed analysis of the distribution in this case is undertaken in <ref> [10] </ref>. This work has led to a number papers analyzing related load balancing schemes, including for example [1, 2, 5, 6, 7, 8, 9, 11, 12]. Note that the above result applies to a static problem, where a fixed number of balls are distributed.
Reference: [11] <author> M. </author> <title> Mitzenmacher, </title> <booktitle> How useful is old information? In Proceedings of the 16th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <year> 1997, </year> <pages> pp. 83-91. </pages> <note> Extended version available as Digital Systems Research Center Technical Note 1998-003. </note>
Reference-contexts: This work has led to a number papers analyzing related load balancing schemes, including for example <ref> [1, 2, 5, 6, 7, 8, 9, 11, 12] </ref>. Note that the above result applies to a static problem, where a fixed number of balls are distributed. <p> Indeed, the original paper by Azar, Broder, Karlin, and Upfal examines the dynamic situation where at each step a random ball is deleted and re-inserted in the system [4]. Related work by, for example, Mitzenmacher <ref> [8, 9, 11] </ref> and Adler et al. [1] examines deletions via connections with queueing theoretical models. Here we focus on a model where an adversary may specify a deletion sequence in advance. <p> We again use 1 a variant of the two-choice argument from [4], this time making use of a two-dimensional family of random variables, similar in spirit to the work of <ref> [11] </ref>. <p> Such two-dimensional models have previously proven useful for dynamic variations of load balancing problems <ref> [11] </ref>. We prove bounds for this phased-based system; for convenience we consider only the case d = 2.
Reference: [12] <author> V. Stemann. </author> <title> Parallel balanced allocations. </title> <booktitle> In Proceedings of the 8th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <year> 1996, </year> <pages> pp. 261-269. 11 </pages>
Reference-contexts: This work has led to a number papers analyzing related load balancing schemes, including for example <ref> [1, 2, 5, 6, 7, 8, 9, 11, 12] </ref>. Note that the above result applies to a static problem, where a fixed number of balls are distributed.
References-found: 12

