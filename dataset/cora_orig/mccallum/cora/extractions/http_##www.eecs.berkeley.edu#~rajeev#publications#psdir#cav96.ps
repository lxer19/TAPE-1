URL: http://www.eecs.berkeley.edu/~rajeev/publications/psdir/cav96.ps
Refering-URL: http://www.eecs.berkeley.edu/~rajeev/publications/publications.html
Root-URL: http://www.cs.berkeley.edu
Email: E-mail: rajeev@eecs.Berkeley.EDU  
Phone: Telephone: (510) 642-3234 FAX: (510) 643-5052  
Title: Conference on Computer-Aided Verification 96 Title: VIS A System for Verification and Synthesis Authors:  
Author: Robert K. Brayton Alberto Sangiovanni-Vincentelli Adnan Aziz Szu-Tsung Cheng Stephen Edwards Sunil Khatri Yuji Kukimoto Shaz Qadeer Rajeev K. Ranjan Thomas R. Shiple Gitanjali Swamy Tiziano Villa Gary D. Hachtel Fabio Somenzi Abelardo Pardo Shaker Sarwary Rajeev K. Ranjan 
Note: Corresponding author:  Category: B Intended for publication in the formal proceedings.  
Address: Berkeley, CA 94720  Boulder, CO 80309  CA 95035  193-275 Cory Hall, #1772 Berkeley, CA 94720 U.S.A.  
Affiliation: Department of Electrical Engineering and Computer Sciences, University of California,  Department of Electrical and Computer Engineering, University of Colorado,  Lattice Semiconductor, Milpitas,  University of California, Berkeley Dept. of Electrical Engineering and Computer Sciences  
Abstract: All appropriate clearances for the publication of this paper have been obtained, and if accepted the author will prepare the final manuscript in time for inclusion in the Conference Proceedings and will present the paper at the conference. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aziz, S. Tasiran, and R. K. Brayton. </author> <title> BDD Variable Ordering for Interacting Finite State Machines. </title> <booktitle> In Proc. of the Design Automation Conf., </booktitle> <pages> pages 283-288, </pages> <address> San Diago, CA, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: The combinational input variables are ordered by doing a depth-first traversal of the logic that generates the combinational outputs. The order in which the output logic cones are visited is determined using the algorithm of Aziz et al. <ref> [1] </ref>. This algorithm orders the latches to decrease a communication complexity bound (where backward edges are more expensive than forward edges) on the latch communication graph.
Reference: [2] <author> R. K. Brayton, G. D. Hachtel, A. Sangiovanni-Vincentelli, F. Somenzi, A. Aziz, S. T. Cheng, S. Edwards, S. Khatri, Y. Kukimoto, A. Pardo, S. Qadeer, R. K. Ranjan, S. Sarwary, T. R. Shiple, G. Swamy, and T. Villa. </author> <title> VIS: A System for Verification and Synthesis. </title> <type> Technical Report UCB/ERL M95, </type> <institution> Electronics Research Lab, Univ. of California, Berkeley, </institution> <address> CA 94720, </address> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: VIS has both an interactive command interface and a batch mode. For a detailed description of the full functionality of VIS, with examples of usage, refer to the VIS Manual <ref> [2] </ref>. Verilog front end VIS operates on an intermediate format called BLIF-MV, which is an extension of BLIF, the intermediate format for logic synthesis accepted by SIS [7]. VIS includes a stand-alone compiler from Verilog to BLIF-MV, called VL2MV, which supports a synthesizable subset of Verilog.
Reference: [3] <author> E. M. Clarke, O. Grumberg, K. L. McMillan, and X. Zhao. </author> <title> Efficient generation of counterexamples and witnesses in symbolic model checking. </title> <booktitle> In Proc. 32nd Design Automat. Conf., </booktitle> <pages> pages 427-432, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Simplification of the transition relation T (~x; ~u; ~y), by taking the generalized cofactor with respect to R k (~y) (we care only about the transitions to the set of states not reached thus far). Model checking and debugging We use the algorithms presented in <ref> [3] </ref> as the basis for fair CTL model checking and debugging. In addition, a special algorithm has been implemented to improve the efficiency of checking invariants. Also, a structural pruning technique is used to eliminate those parts of the network that cannot affect the formula being checked.
Reference: [4] <author> S. Edwards. </author> <title> The Ext System, </title> <note> 1995. http://www.eecs.berkeley.edu/sedwards/ext. </note>
Reference-contexts: This makes it easy for other researchers to plug in their algorithms for performing a particular task, and then evaluate their algorithm within the context of VIS. Extensive user and programmer documentation exists for VIS. The creation of this documentation was aided by the tool ext <ref> [4] </ref>, which extracts documentation embedded in the source code. For each function, the programmer provides a synopsis and a complete description, and ext automatically extracts this information, along with the function name and argument types, into an HTML file that can be viewed on the World Wide Web.
Reference: [5] <author> H. Fujii, G. Ootomo, and C. Hori. </author> <title> Interleaving based variable ordering methods for ordered binary decision diagrams. </title> <booktitle> In Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 38-41, </pages> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: The traversal of an output logic cone is done in such a way that the combinational inputs farthest from the outputs appear earlier in the ordering. We use the merging technique of Fujii et al. to handle those variables that appear in multiple cones of logic <ref> [5] </ref>. Finally, each next state variable is inserted into the variable ordering immediately after the corresponding present state variable. If the user has some knowledge of a good ordering, then a partial or total ordering on the variables can be read in. In addition, dynamic variable ordering is supported.
Reference: [6] <author> R. K. Ranjan, A. Aziz, B. Plessier, C. Pixley, and R. K. Brayton. </author> <title> Efficient Formal Design Verification: Data Structure + Algorithms. </title> <type> Technical Report UCB/ERL M94/100, </type> <institution> Electronics Research Lab, Univ. of California, Berkeley, </institution> <address> CA 94720, </address> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: In general, intermediate variables can be introduced to represent the functionality of a cluster of nodes in the original network. This flexibility allows very large designs to be represented and manipulated. Image/Pre-image computation Our image/pre-image computation technique is based on an early quantification heuristic <ref> [6] </ref>. The initialization process consists of creating a bit-level relation for the next state function of each latch in the network. These bit-level relations are then ordered to optimally exploit early quantification.
Reference: [7] <author> E. M. Sentovich, K. J. Singh, L. Lavagno, C. Moon, R. Murgai, A. Saldanha, H. Savoj, P. R. Stephan, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. </author> <title> SIS: A System for Sequential Circuit Synthesis. </title> <type> Technical Report UCB/ERL M92/41, </type> <institution> Electronics Research Lab, Univ. of California, Berkeley, </institution> <address> CA 94720, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: For a detailed description of the full functionality of VIS, with examples of usage, refer to the VIS Manual [2]. Verilog front end VIS operates on an intermediate format called BLIF-MV, which is an extension of BLIF, the intermediate format for logic synthesis accepted by SIS <ref> [7] </ref>. VIS includes a stand-alone compiler from Verilog to BLIF-MV, called VL2MV, which supports a synthesizable subset of Verilog. VL2MV extracts a set of interacting finite state machines that preserves the behavior of the source Verilog program defined in terms of simulated results.
Reference: [8] <author> The VIS Group. </author> <title> VIS: Verification Interacting with Synthesis, </title> <note> 1995. http://www-cad.eecs.berkeley.edu/Respep/Research/vis. 4 </note>
Reference-contexts: In particular, we want to explore the synergy between verification and synthesis. For more information about VIS or to get a copy, visit the VIS home page <ref> [8] </ref>. Acknowledgments We would like to thank Adrian Isles, Sriram Rajamani, and Serdar Tasiran for their assistance in developing VIS.
References-found: 8

