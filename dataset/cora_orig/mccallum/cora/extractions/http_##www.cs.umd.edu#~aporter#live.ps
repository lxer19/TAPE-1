URL: http://www.cs.umd.edu/~aporter/live.ps
Refering-URL: http://www.cs.umd.edu/~aporter/html/references.html
Root-URL: 
Title: An Experiment to Assess the Cost-Benefits of Code Inspections in Large Scale Software Development  
Author: A. A. Porter C. A. Toman H. P. Siy L. G. Votta 
Keyword: Software Inspection, Controlled Experiments, Industrial Experimentation, ANOVA, Power Analysis.  
Address: College Park, Maryland 20742  aporter@cs.umd.edu Naperville, Illinois 60566  
Note: Department  
Affiliation: Global Data Development Department Computer Science  University of Maryland Software Production Research Department  Bell Laboratories, Lucent Technologies  
Email: harvey@cs.umd.edu ctoman@lucent.com votta@research.bell-labs.com  
Date: May 16, 1997  
Abstract: We conducted a long-term experiment to compare the costs and benefits of several different software inspection methods. These methods were applied by professional developers to a commercial software product they were creating. Because the laboratory for this experiment was a live development effort, we took special care to minimize cost and risk to the project, while maximizing our ability to gather useful data. This article has several goals: (1) to describe the experiment's design and show how we used simulation techniques to optimize it, (2) to present our results and discuss their implications for both software practitioners and researchers, and (3) to discuss several new questions raised by our findings. For each inspection we randomly assigned 3 independent variables: (1) the number of reviewers on each inspection team (1, 2 or 4), (2) the number of teams inspecting the code unit (1 or 2), and (3) the requirement that defects be repaired between the first and second team's inspections. The reviewers for each inspection were randomly selected without replacement from a pool of 11 experienced software developers. The dependent variables for each inspection included inspection interval (elapsed time), total effort, and the defect detection rate. Our results showed that these treatments did not significantly influence the defect detection effectiveness, but that certain combinations of changes dramatically increased the inspection interval. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Karla Ballman and Lawrence G. Votta. </author> <title> Organizational congestion in large scale software development. </title> <booktitle> In Third International Conference on Software Process, </booktitle> <pages> pages 123-134, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Mr. Siy was also partly supported by AT&T 's Summer Employment Program 1 As developer's calendars fill up, it becomes increasingly difficult to schedule meetings. This pushes meeting dates farther and farther into the future, increasing the development interval <ref> [1] </ref>. 1 We hypothesized that different inspection approaches create different tradeoffs between minimum interval, minimum effort and maximum effectiveness. But until now there have been no controlled experiments to identify the mechanisms that drive these tradeoffs. <p> The selection probabilities were weighted as shown in Table 1. These probabilities changed during the experiment because we discontinued some of the poorly performing or excessively expensive treatments. In this article particular treatments are denoted [1,or 2] sessions X <ref> [1, 2, or 4] </ref> persons [No-repair, Repair], so, for example, the label 2sX1pN indicates a two-session, one-person, without-repair inspection. The 1sX4p treatment is the standard inspection process in this software organization. There are many ways in which inspections might be beneficial. The most obvious is defect detection.
Reference: [2] <author> David B. Bisant and James R. Lyle. </author> <title> A two-person inspection method to improve programming productivity. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> 15(10) </volume> <pages> 1294-1304, </pages> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: The research literature shows that several variants of this approach have been proposed in order to improve inspection performance. These include Fagan Inspections [8], Active Design Reviews [16], N-Fold Inspections [19], Phased Inspections [13], and Two-Person Inspections <ref> [2] </ref>. Each of these is created by restructuring the basic process, e.g., rearranging the steps, changing the number of people working on each step, or the number of times each step is executed. Several also require the use of special defect detection methods. <p> The selection probabilities were weighted as shown in Table 1. These probabilities changed during the experiment because we discontinued some of the poorly performing or excessively expensive treatments. In this article particular treatments are denoted [1,or 2] sessions X <ref> [1, 2, or 4] </ref> persons [No-repair, Repair], so, for example, the label 2sX1pN indicates a two-session, one-person, without-repair inspection. The 1sX4p treatment is the standard inspection process in this software organization. There are many ways in which inspections might be beneficial. The most obvious is defect detection.
Reference: [3] <author> F. O. Buck. </author> <title> Indicators of quality inspections. </title> <type> Technical Report 21.802, </type> <institution> IBM Systems Products Division, Kingston, </institution> <address> NY, </address> <month> September </month> <year> 1981. </year>
Reference-contexts: Team Size: Inspections are usually carried out by a team of four to six reviewers. Buck <ref> [3] </ref> provides data (from an uncontrolled experiment) that showed no difference in the effectiveness of three, four, and five-person teams. However, no studies have measured the effect of team size on inspection interval (calendar time to complete inspection). Single-Session vs.
Reference: [4] <author> K P Burnham and W S Overton. </author> <title> Estimation of the size of a closed population when capture probabilities vary among animals. </title> <journal> Biometrika, </journal> <volume> 65 </volume> <pages> 625-633, </pages> <year> 1978. </year>
Reference-contexts: This was always available, but is inaccurate. * Partial estimation of detection ratio: We tried capture-recapture methods to estimate pre-inspection defect content <ref> [4, 6, 7, 17, 22] </ref>. This estimation can be performed when there are at least two reviewers and they discover some defects in common. Under these conditions this method is more accurate than the observed defect density and is available immediately after every inspection.
Reference: [5] <author> John M. Chambers, William S. Cleveland, Beat Kleiner, and Paul A. Tukey. </author> <title> Graphical Methods for Data Analysis. </title> <booktitle> Wadsworth International Group, </booktitle> <address> Belmont, California, </address> <year> 1983. </year>
Reference: [6] <author> Stephen G. Eick, Clive R. Loader, M. David Long, Scott A. Vander Wiel, and Lawrence G. Votta. </author> <title> Estimating software fault content before coding. </title> <booktitle> In Proceedings of the 14th International Conference on Software Engineering, </booktitle> <pages> pages 59-65, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: This was always available, but is inaccurate. * Partial estimation of detection ratio: We tried capture-recapture methods to estimate pre-inspection defect content <ref> [4, 6, 7, 17, 22] </ref>. This estimation can be performed when there are at least two reviewers and they discover some defects in common. Under these conditions this method is more accurate than the observed defect density and is available immediately after every inspection.
Reference: [7] <author> Stephen G Eick, Clive R Loader, M. David Long, Scott A Vander Wiel, and Lawrence G Votta. </author> <title> Capture-recapture and other statistical methods for software inspection data. </title> <booktitle> In Computing Science and Statistics: Proceedings of the 25th Symposium on the Interface, </booktitle> <address> San Diego, California, </address> <month> March </month> <year> 1993. </year> <title> Interface Foundation of North America. </title>
Reference-contexts: This was always available, but is inaccurate. * Partial estimation of detection ratio: We tried capture-recapture methods to estimate pre-inspection defect content <ref> [4, 6, 7, 17, 22] </ref>. This estimation can be performed when there are at least two reviewers and they discover some defects in common. Under these conditions this method is more accurate than the observed defect density and is available immediately after every inspection.
Reference: [8] <author> M. E. Fagan. </author> <title> Design and code inspections to reduce errors in program development. </title> <journal> IBM Systems Journal, </journal> <volume> 15(3) </volume> <pages> 182-211, </pages> <year> 1976. </year>
Reference-contexts: They are then sent to the artifact's author for repair. Under some conditions the entire process may be repeated one or more times. The research literature shows that several variants of this approach have been proposed in order to improve inspection performance. These include Fagan Inspections <ref> [8] </ref>, Active Design Reviews [16], N-Fold Inspections [19], Phased Inspections [13], and Two-Person Inspections [2]. Each of these is created by restructuring the basic process, e.g., rearranging the steps, changing the number of people working on each step, or the number of times each step is executed.
Reference: [9] <author> M. E. Fagan. </author> <title> Design and code inspections to reduce errors in program development. </title> <journal> IBM Systems Journal, </journal> <volume> 15(3) </volume> <pages> 216-245, </pages> <year> 1976. </year>
Reference-contexts: Group-centered vs. Individual-centered Inspections: It is widely believed that most defects are first identified during the collection meeting as a result of group interaction <ref> [9] </ref>. Consequently, most research has focused on streamlining the collection meeting by determining who should attend, what roles they should play, how long the meeting should last, etc. On the other hand, several recent studies have concluded that most defects are actually found by individuals prior to the collection meeting.
Reference: [10] <author> Watts Humphrey. </author> <title> Managing the Software Process. </title> <publisher> Addison-Wesley, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: On the other hand, several recent studies have concluded that most defects are actually found by individuals prior to the collection meeting. Humphrey <ref> [10] </ref> claims that the percentage of defects first discovered at the collection meeting ("meeting gain rate") averages about 25%. In an industrial case study of 50 design inspections, Votta [23] found far lower meeting gain rates (about 5%). <p> Meeting Gains. 30% of defects were meeting gains. These meeting gain rates are higher than those reported by Votta [23] (5%) but are consistent with Humphrey <ref> [10] </ref> (25%). Since meetings are expensive it's important for researchers to better understand this issue. Also, it is extremely important that contradictory findings be examined and resolved.
Reference: [11] <institution> IEEE Standard for software reviews and audits. Soft. Eng. Tech. Comm. of the IEEE Computer Society, </institution> <year> 1989. </year> <note> IEEE Std 1028-1988. </note>
Reference-contexts: Below, we review the relevant research literature, describe the various inspection approaches we examined, and present our experimental design, analysis, and conclusions. 1.1 Inspection Process Summary and Literature Review To eliminate defects, many organizations use an iterative, three-step inspection procedure: Preparation, Collection, Repair <ref> [11] </ref>. First, a team of reviewers each reads the artifact separately, detecting as many defects as possible. Next, these newly discovered defects are collected, usually at a team meeting. They are then sent to the artifact's author for repair.
Reference: [12] <author> Charles M. Judd, Eliot R. Smith, and Louise H. Kidder. </author> <title> Research Methods in Social Relations. </title> <publisher> Holt, Rinehart and Winston, Inc., </publisher> <address> Fort Worth, TX, sixth edition, </address> <year> 1991. </year>
Reference-contexts: Each study participant was given a simple "bill of rights", reminding them of their right to withdraw from the study at anytime with no recriminations from the researchers or his/her management <ref> [12] </ref>. Each participant acknowledged this right at the beginning of the experiment by signing a release form. <p> Experiments that use professional developers who are creating professional products are desirable for their strong external validity, but can put the participating project at risk. A similar problem confronts medical researchers when assessing the efficacy of drug treatments for diseases <ref> [12] </ref>.
Reference: [13] <author> John C. Knight and E. Ann Meyers. </author> <title> An improved inspection technique. </title> <journal> Communications of the ACM, </journal> <volume> 36(11) </volume> <pages> 50-61, </pages> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: Under some conditions the entire process may be repeated one or more times. The research literature shows that several variants of this approach have been proposed in order to improve inspection performance. These include Fagan Inspections [8], Active Design Reviews [16], N-Fold Inspections [19], Phased Inspections <ref> [13] </ref>, and Two-Person Inspections [2]. Each of these is created by restructuring the basic process, e.g., rearranging the steps, changing the number of people working on each step, or the number of times each step is executed. Several also require the use of special defect detection methods.
Reference: [14] <author> John C. Knight and E. Ann Myers. </author> <title> An improved inspection technique. </title> <journal> Communications of the ACM, </journal> <volume> 36(11) </volume> <pages> 51-61, </pages> <month> November </month> <year> 1993. </year>
Reference: [15] <author> K.E. Martersteck and A.E. Spencer. </author> <title> Introduction to the 5ESS(TM) switching system. </title> <journal> AT&T Technical Journal, </journal> <volume> 64(6 part </volume> 2):1305-1314, July-August 1985. 
Reference-contexts: However, this argument is simplistic for example, it doesn't consider the effect inspections have on schedule [23]. We have observed that a typical release of Lucent Technologies' 5ESS R fl switch <ref> [15] </ref> ( .5M lines of added and changed code per release on a base of 5M lines) can require roughly 1500 inspections, each with four, five or even more participants.
Reference: [16] <author> Dave L. Parnas and David M. Weiss. </author> <title> Active design reviews: </title> <booktitle> principles and practices. In Proceedings of the 8th International Conference on Software Engineering, </booktitle> <pages> pages 215-222, </pages> <month> Aug. </month> <year> 1985. </year>
Reference-contexts: Under some conditions the entire process may be repeated one or more times. The research literature shows that several variants of this approach have been proposed in order to improve inspection performance. These include Fagan Inspections [8], Active Design Reviews <ref> [16] </ref>, N-Fold Inspections [19], Phased Inspections [13], and Two-Person Inspections [2]. Each of these is created by restructuring the basic process, e.g., rearranging the steps, changing the number of people working on each step, or the number of times each step is executed.
Reference: [17] <author> Kenneth H. Pollock. </author> <title> Modeling capture, recapture, and removal statistics for estimation of demographic parameters for fish and wildlife populations: Past, present, and future. </title> <journal> Journal of the American Statistical Association, </journal> <volume> 86(413) </volume> <pages> 225-238, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: This was always available, but is inaccurate. * Partial estimation of detection ratio: We tried capture-recapture methods to estimate pre-inspection defect content <ref> [4, 6, 7, 17, 22] </ref>. This estimation can be performed when there are at least two reviewers and they discover some defects in common. Under these conditions this method is more accurate than the observed defect density and is available immediately after every inspection.
Reference: [18] <author> Adam A. Porter and Lawrence G. Votta. </author> <title> An experiment to assess different defect detection methods for software requirements inspections. </title> <booktitle> In Sixteenth International Conference on Software Engineering, </booktitle> <address> Sorrento, Italy, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: For researchers this suggests that developing better defect detection techniques may be much more important than any of the organizational issues discussed in this article <ref> [18] </ref>. Meeting Gains. 30% of defects were meeting gains. These meeting gain rates are higher than those reported by Votta [23] (5%) but are consistent with Humphrey [10] (25%). Since meetings are expensive it's important for researchers to better understand this issue.
Reference: [19] <author> G. Michael Schnieder, Johnny Martin, and W. T. Tsai. </author> <title> An experimental study of fault detection in user requirements. </title> <journal> ACM Trans. on Software Engineering and Methodology, </journal> <volume> 1(2) </volume> <pages> 188-204, </pages> <month> April </month> <year> 1992. </year> <month> 24 </month>
Reference-contexts: Under some conditions the entire process may be repeated one or more times. The research literature shows that several variants of this approach have been proposed in order to improve inspection performance. These include Fagan Inspections [8], Active Design Reviews [16], N-Fold Inspections <ref> [19] </ref>, Phased Inspections [13], and Two-Person Inspections [2]. Each of these is created by restructuring the basic process, e.g., rearranging the steps, changing the number of people working on each step, or the number of times each step is executed. Several also require the use of special defect detection methods.
Reference: [20] <author> G. Michael Schnieder, Johnny Martin, and W. T. Tsai. </author> <title> An experimental study of fault detection in user requirements. </title> <journal> ACM Trans. on Software Engineering and Methodology, </journal> <volume> 1(2) </volume> <pages> 188-204, </pages> <month> April </month> <year> 1992. </year>
Reference: [21] <author> Sidney Siegel and Jr. N. John Castellan. </author> <title> Nonparametric Statistics For the Behavioral Sciences. </title> <publisher> McGraw-Hill Inc., </publisher> <address> New York, NY, </address> <note> second edition, </note> <year> 1988. </year>
Reference-contexts: Thus we use nonparametric techniques which only require that the distribution be randomly sampled <ref> [21] </ref>. This decision has several implications. We considered two data distributions to be significantly different only if the Wilcoxon rank sum test [21] rejects the null hypothesis that the observations are drawn from the same population with a confidence level :9. Medians, not means, summarize the data. <p> Thus we use nonparametric techniques which only require that the distribution be randomly sampled <ref> [21] </ref>. This decision has several implications. We considered two data distributions to be significantly different only if the Wilcoxon rank sum test [21] rejects the null hypothesis that the observations are drawn from the same population with a confidence level :9. Medians, not means, summarize the data. Therefore, care must be used when making inferences from the data presented in this article.
Reference: [22] <author> Scott A. Vander Wiel and Lawrence G. Votta. </author> <title> Assessing software design using capture-recapture methods. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> SE-19:1045-1054, </volume> <month> November </month> <year> 1993. </year>
Reference-contexts: This was always available, but is inaccurate. * Partial estimation of detection ratio: We tried capture-recapture methods to estimate pre-inspection defect content <ref> [4, 6, 7, 17, 22] </ref>. This estimation can be performed when there are at least two reviewers and they discover some defects in common. Under these conditions this method is more accurate than the observed defect density and is available immediately after every inspection.
Reference: [23] <author> Lawrence G. Votta. </author> <booktitle> Does every inspection need a meeting? In Proceedings of ACM SIGSOFT '93 Symposium on Foundations of Software Engineering, </booktitle> <pages> pages 107-114. </pages> <institution> Association for Computing Machinery, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: However, this argument is simplistic for example, it doesn't consider the effect inspections have on schedule <ref> [23] </ref>. We have observed that a typical release of Lucent Technologies' 5ESS R fl switch [15] ( .5M lines of added and changed code per release on a base of 5M lines) can require roughly 1500 inspections, each with four, five or even more participants. <p> Humphrey [10] claims that the percentage of defects first discovered at the collection meeting ("meeting gain rate") averages about 25%. In an industrial case study of 50 design inspections, Votta <ref> [23] </ref> found far lower meeting gain rates (about 5%). Porter et al.[18] conducted a controlled experiment in which graduate students in computer science inspected several requirements specifications. Their results show meeting gain rates consistent with Votta's. <p> For researchers this suggests that developing better defect detection techniques may be much more important than any of the organizational issues discussed in this article [18]. Meeting Gains. 30% of defects were meeting gains. These meeting gain rates are higher than those reported by Votta <ref> [23] </ref> (5%) but are consistent with Humphrey [10] (25%). Since meetings are expensive it's important for researchers to better understand this issue. Also, it is extremely important that contradictory findings be examined and resolved.
Reference: [24] <author> Alexander L. Wolf and David S. Rosenblum. </author> <title> A study in software process data capture and analysis. </title> <booktitle> In Proceedings of the Second International Conference on Software Process, </booktitle> <pages> pages 115-124, </pages> <month> February </month> <year> 1993. </year> <month> 25 </month>
Reference-contexts: In order to measure inspection interval and its various subintervals, we devised an inspection time model based on visible inspection events <ref> [24] </ref>.
References-found: 24

