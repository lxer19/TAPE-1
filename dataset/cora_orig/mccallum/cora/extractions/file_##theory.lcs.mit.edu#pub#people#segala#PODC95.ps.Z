URL: file://theory.lcs.mit.edu/pub/people/segala/PODC95.ps.Z
Refering-URL: http://theory.lcs.mit.edu/~segala/PS95.html
Root-URL: 
Email: email: anya,segala@theory.lcs.mit.edu  
Title: Formal Verification of Timed Properties of Randomized Distributed Algorithms  
Author: Anna Pogosyants and Roberto Segala 
Keyword: bound statements of the form U t  
Note: p U 0 which mean that  
Address: Cambridge, MA 02139 USA  
Affiliation: Laboratory for Computer Science Massachusetts Institute of Technology  
Abstract: whenever the algorithm begins in a state in set U , it will reach a state in set U 0 within time t with probability at least p . However, [11] does not provide a formal methodology to prove the validity of a specific probabilistic time bound statement from scratch: each statement is proved by means of ad hoc operational arguments. Unfortunately, operational reasoning is generally error-prone and difficult to check. In this paper we overcome the problem by developing a new technique to prove probabilistic time bound statements, which consists of reducing the analysis of a time bound statement to the analysis of a statement that does not involve probability. As a consequence, several existing techniques for non-randomized algorithms can be applied, and correctness proofs can be verified mechanically. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Aggarwal. </author> <title> Time optimal self-stabilizing spanning tree algorithms. </title> <type> Technical Report MIT/LCS/TR-632, </type> <institution> MIT Laboratory for Computer Science, </institution> <year> 1994. </year>
Reference-contexts: is a triplet (; F ; P ) where is a set, also called the sample space, F is a collection of subsets of that is closed under complement and countable union and such that 2 F , also called a field, and P is a function from F to <ref> [0; 1] </ref> such that P [] = 1 and such that for any collection fC i g i of at most countably many pairwise disjoint elements of F , P [[ i C i ] = P A probability space (; F ; P ) is discrete if F = 2 <p> then Res i free; pc i E R output rem i Pre: pc i = E R Classes: T i = fflip i ; wait i ; second i ; drop i ; crit i ; dropf i ; drops i ; rem i g: [0; l] try i : <ref> [0; 1] </ref> exit i : [0; 1] We assume that processes are numbered clockwise from 1 to n. We also assume that resource Res i is between processes i and i + 1. Labels are identified modulo n so that, e.g., process n + 1 coincides with process 1. <p> i E R output rem i Pre: pc i = E R Classes: T i = fflip i ; wait i ; second i ; drop i ; crit i ; dropf i ; drops i ; rem i g: [0; l] try i : <ref> [0; 1] </ref> exit i : [0; 1] We assume that processes are numbered clockwise from 1 to n. We also assume that resource Res i is between processes i and i + 1. Labels are identified modulo n so that, e.g., process n + 1 coincides with process 1. <p> We believe that the method can be applied also to the randomized self-stabilizing spanning tree algorithm by Sudhanshu Aggarwal and Shay Kut-ten [2]. In <ref> [1] </ref> the algorithm is verified using time bound statements and inference rules, but the individual basic time bound statements are justified by long operational arguments, which can be eliminated using our method.
Reference: [2] <author> S. Aggarwal and S. Kutten. </author> <title> Time optimal self stabilizing spanning tree algorithms. In R.K. Shyamasundar, editor, </title> <booktitle> 13th International Conference on Foundations of Software Technology and Theoretical Computer Science, LNCS 761, </booktitle> <year> 1993 </year>
Reference-contexts: We believe that the method can be applied also to the randomized self-stabilizing spanning tree algorithm by Sudhanshu Aggarwal and Shay Kut-ten <ref> [2] </ref>. In [1] the algorithm is verified using time bound statements and inference rules, but the individual basic time bound statements are justified by long operational arguments, which can be eliminated using our method.
Reference: [3] <author> J. Aspnes and M.P. Herlihy. </author> <title> Fast randomized consensus using shared memory. </title> <journal> Journal of Algorithms, </journal> <volume> 15(1) </volume> <pages> 441-460, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Randomization is a useful tool for the solution of problems in distributed computation (e.g., <ref> [3, 4, 9] </ref>), but even simple randomized algorithms are sometimes hard to verify and analyze. As a result, many randomized algorithms are presented with only informal proofs, and even when formal proofs are presented, they are often ad hoc; mistakes are common.
Reference: [4] <author> M. Ben-Or. </author> <title> Another advantage of free choice: completely asynchronous agreement protocols. </title> <booktitle> In Proceedings of the 2 nd Annual ACM PODC, </booktitle> <year> 1983 </year>
Reference-contexts: 1 Introduction Randomization is a useful tool for the solution of problems in distributed computation (e.g., <ref> [3, 4, 9] </ref>), but even simple randomized algorithms are sometimes hard to verify and analyze. As a result, many randomized algorithms are presented with only informal proofs, and even when formal proofs are presented, they are often ad hoc; mistakes are common. <p> We carried out the proofs in full detail and automated the routine parts of the proofs using the Larch Prover [7]. The complete proof (hand and automatic) can be found in [15]. We sketched the proof of correctness of the randomized algorithm for consensus with stopping faults of Ben-Or <ref> [4] </ref>, and, based on the experience that we gained, we are confident that our methodology applies to most of the standard randomized distributed algorithms as well. Previous work on verification of randomized distributed algorithms appears in [6, 8, 11, 14, 16]. <p> We have carried out and verified automatically the complete proof for the algorithm of Lehmann and Rabin, and we have done some work in applying the method to prove the correctness of Ben Or's randomized agreement protocol <ref> [4] </ref>. We believe that the method can be applied also to the randomized self-stabilizing spanning tree algorithm by Sudhanshu Aggarwal and Shay Kut-ten [2].
Reference: [5] <author> K.M. Chandi and J. Misra. </author> <title> Parallel Program Design: </title>
Reference-contexts: Previous work on verification of randomized distributed algorithms appears in [6, 8, 11, 14, 16]. The work of [14] presents a technique, based on ranking functions defined on states, for establishing liveness properties for randomized algorithms; the work of [16] extends UNITY <ref> [5] </ref> to handle probability, and provides a completeness result for some properties that hold with probability 1; the work of [6, 8] presents model checking techniques; the work of [11] presents a technique based on probabilistic time bound statements, where each statement is proved by means of ad hoc operational arguments.
References-found: 5

