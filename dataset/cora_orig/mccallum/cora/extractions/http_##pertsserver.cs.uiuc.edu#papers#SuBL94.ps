URL: http://pertsserver.cs.uiuc.edu/papers/SuBL94.ps
Refering-URL: http://pertsserver.cs.uiuc.edu/papers/
Root-URL: http://www.cs.uiuc.edu
Title: An End-to-End Approach to Schedule Tasks with Shared Resources in Multiprocessor Systems  
Author: Jun Sun Riccardo Bettati Jane W.-S. Liu 
Address: Urbana, IL 61801  
Affiliation: Department of Computer Science University of Illinois, Urbana-Champaign  
Note: Appeared in the Proceedings of 11th IEEE Workshop on Real-Time Operating Systems and Software, 1994.  
Abstract: In this paper we propose an end-to-end approach to scheduling tasks that share resources in a multiprocessor or distributed systems. In our approach, each task is mapped into a chain of subtasks, depending on its resource accesses. After each subtask is assigned a proper priority, its worst-case response time can be bounded. Consequently the worst-case response time of each task can be obtained and the schedulability of each task can be verified by comparing the worst-case response time with its relative deadline. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Sha, R. Rajkumar and J. P. Lehoczky, </author> <title> "Priority Inheritance Protocols: An Approach to Real-Time Synchronization". </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. 39, No. 9, </volume> <month> September </month> <year> 1990. </year>
Reference-contexts: A previous study shows that careless use of semaphore operations can cause uncontrolled priority inversion, which occurs when a high-priority task is blocked by some low-priority tasks for an unpredictable amount of time <ref> [1] </ref>. We refer to the total length of time a task is delayed by lower-priority tasks due to resource contention as its blocking time. To ensure predictability, it is imperative to bound the blocking time of each task, as shown in [2]. <p> To ensure predictability, it is imperative to bound the blocking time of each task, as shown in [2]. Several effective solutions have been proposed for single processor systems; two well-known examples are the Priority Ceiling Protocol (PCP) <ref> [1] </ref> and the Stack Based Protocol (SBP) [3]. In multiprocessor and distributed systems concur-rency and distribution complicate the resource contention problem.
Reference: [2] <author> R. Rajkumar, </author> <title> Task Synchronization In Real-Time Systems, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston 1991. </address>
Reference-contexts: We refer to the total length of time a task is delayed by lower-priority tasks due to resource contention as its blocking time. To ensure predictability, it is imperative to bound the blocking time of each task, as shown in <ref> [2] </ref>. Several effective solutions have been proposed for single processor systems; two well-known examples are the Priority Ceiling Protocol (PCP) [1] and the Stack Based Protocol (SBP) [3]. In multiprocessor and distributed systems concur-rency and distribution complicate the resource contention problem.
Reference: [3] <author> T. P. Baker, </author> <title> "A Stack-Based Resource Allocation Policy for Real-Time Processes". </title> <booktitle> Proceeding of the 11th Real-Time Systems Symposium, </booktitle> <pages> pp. 191-200, </pages> <year> 1990. </year>
Reference-contexts: To ensure predictability, it is imperative to bound the blocking time of each task, as shown in [2]. Several effective solutions have been proposed for single processor systems; two well-known examples are the Priority Ceiling Protocol (PCP) [1] and the Stack Based Protocol (SBP) <ref> [3] </ref>. In multiprocessor and distributed systems concur-rency and distribution complicate the resource contention problem.
Reference: [4] <author> R. Rajkumar, L. Sha and J. P. Lehoczky, </author> <title> "Real-Time Synchronization Protocols for Multiprocessors". </title> <booktitle> Proceeding: Real-Time Systems Symposium, </booktitle> <pages> pp. 259-269, </pages> <year> 1988. </year>
Reference-contexts: A task T i can be blocked not only by a local task on the same processor due to local resource contentions, but also by a remote task that needs some global resources also needed by T i . Rajku-mar, et al. <ref> [4] </ref> extended PCP for single processor systems to multiprocessor systems and provided an initial solution for this problem. The extended protocol is known as the Multiprocessor Priority Ceiling Protocol (MPCP).
Reference: [5] <author> R. Bettati, </author> <title> "End-to-End Scheduling to Meet Deadlines in Distributed Systems". </title> <type> Ph.D. thesis, </type> <institution> Department of Computer Science, University of Illi-nois at Urbana-Champaign, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: If task T i is a periodic task, this precedence relation holds for every instance of T i . The precedence relation among the subtasks of each task can be easily satisfied by using the phase-modification method proposed in <ref> [5] </ref>. Let c i;j be the worst-case response time of T i;j . According to the phase-modification method, once we know c i;k for k = 1; 2; : : :; j 1, we postpone the phase of the subtask T i;j by P j1 k=1 c i;k . <p> This modification allows us to enforce the precedence relation between subtasks while treating the subtasks in each task as if there is no precedence relation between them. We will return to discuss how to bound the worst-case response times of subtasks on each processor using the schedulability condition in <ref> [5] </ref>, provided that the subtasks are assigned fixed priorities and some single-processor synchronization protocol is used to control priority inversion. By summing up the worst-case response times of all its subtasks, we can determine the worst-case response time of each task, and therefore whether the task can meet its deadline. <p> Furthermore, we can obtain the worst-case blocking time fi i;j for each subtask T i;j . Consequently the worst-case response time c i;j for each subtask can be computed according to the following equation. The derivation for this equation can be found in <ref> [5] </ref>. c i;j = T k;l 2H i;j t k;l + fi i;j P i;j (1) In this equation H i;j is the set of subtasks that (1) are on the same processor as T i;j , (2) are of different tasks than T i , and (3) have priorities equal
Reference: [6] <author> M. G. Harbour, M. H. Klein, and J. P. Lehoczky, </author> <title> "Timing Analysis for Fixed-Priority Scheduling of Hard Real-Time Systems", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 20, No. 1, </volume> <pages> pp. 13 - 28, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: An alternative way to map tasks to subtasks is to map all critical sections, both for local resources and for remote resources, into subtasks. The resultant task system has end-to-end processing not only across processors but also within each processor. A study in <ref> [6] </ref> has shown that schedulability analysis for end-to-end processing within a processor is possible and promising. We are currently studying the schedulability analysis for such systems. In this paper we assume that all resources accessed in one nested critical section must be on the same processor.
References-found: 6

