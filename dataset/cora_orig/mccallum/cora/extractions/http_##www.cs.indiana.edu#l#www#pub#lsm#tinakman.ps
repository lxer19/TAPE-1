URL: http://www.cs.indiana.edu/l/www/pub/lsm/tinakman.ps
Refering-URL: http://www.cs.indiana.edu/l/www/pub/lsm/
Root-URL: http://www.cs.indiana.edu
Email: E-mail: tin@cs.bilkent.edu.tr  
Title: Situated Nonmonotonic Inference with BABY-SIT  
Author: Erkan Tn and Varol Akman 
Address: 06533, Turkey  
Affiliation: Department of Computer Engineering and Information Science Faculty of Engineering, Bilkent University Bilkent, Ankara  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> V. Akman and M. Surav. </author> <title> Contexts, Oracles, and Relevance. </title> <editor> In S. Buva~c and R. Fikes, editors, </editor> <booktitle> Working Notes of the AAAI-95 Fall Symposium on "Formalizing Context", </booktitle> <pages> pages 23-30. </pages> <publisher> AAAI Press, </publisher> <address> Cambridge, MA, </address> <year> 1995. </year>
Reference-contexts: Consider the seeing relation. If we would like it to be an infonic relation with at most two arguments, the former being of type individual and the latter being of type either a situation or an individual, we can write: I&gt; &lt;sees j ~IND, f~SIT, ~INDg&gt; <ref> [1] </ref> The number in square brackets indicates the minimum number of arguments that can be used with the relation. Hence, tsees, bob, 1, for example, is considered to be a valid (unsaturated) infon in the system. Infons are categorized as `labeled' and `unlabeled'. <p> The type of all situations that Bob sees can be defined in BABY-SIT as follows: I&gt; ~SITALL = <ref> [SIT1 j w j= tsees, bob, SIT1, 1] </ref> Hence, ~SITALL is seen as an object of type ~TYP in BABY-SIT and can be used as a type specifier for declaration of new objects in the environment. <p> Rather than measuring the degree of relevance of an infon for the oracle of an object, we apply a restricted form of the notion of `contextual effect' and accordingly determine if an infon is relevant or not to the current context <ref> [1, 12] </ref>. Objects in the environment and the attainment of information flow in BABY-SIT are 4 compatible with the ontology of situation theory. Computation is context-sensitive and type--theoretic. The basic computation regime is unification.
Reference: [2] <author> A. W. Black. </author> <title> An Approach to Computational Situation Semantics. </title> <type> PhD thesis, </type> <institution> Department of Artificial Intelligence, University of Edinburgh, Edinburgh, U.K., </institution> <year> 1993. </year>
Reference-contexts: The primary motivation underlying BABY-SIT is to facilitate the development and testing of programs in domains ranging from linguistics to AI within a unified framework built upon situation-theoretic constructs [14, 18, 17, 12]. BABY-SIT accommodates the basic features of situation theory, and compared to the existing approaches <ref> [2, 3, 9] </ref>, enhances these features [16, 19]. Devlin's fine book [4] has been extensively used in designing the formal skeleton of BABY-SIT. Situation theory provides a collection of basic types that can be used for individuating or discriminating uniformities of the real world.
Reference: [3] <author> J. Borota, M. Frank, J. Fry, A. Ito, H. Nakashima, S. Peters, M. Reilly, and H. Schutze. </author> <title> The PROSIT Language, version v1.0. Manuscript, Center for the Study of Language and Information, </title> <publisher> Stanford, </publisher> <address> CA, </address> <year> 1994. </year>
Reference-contexts: The primary motivation underlying BABY-SIT is to facilitate the development and testing of programs in domains ranging from linguistics to AI within a unified framework built upon situation-theoretic constructs [14, 18, 17, 12]. BABY-SIT accommodates the basic features of situation theory, and compared to the existing approaches <ref> [2, 3, 9] </ref>, enhances these features [16, 19]. Devlin's fine book [4] has been extensively used in designing the formal skeleton of BABY-SIT. Situation theory provides a collection of basic types that can be used for individuating or discriminating uniformities of the real world.
Reference: [4] <author> K. Devlin. </author> <title> Logic and Information. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, U.K., </address> <year> 1991. </year>
Reference-contexts: BABY-SIT accommodates the basic features of situation theory, and compared to the existing approaches [2, 3, 9], enhances these features [16, 19]. Devlin's fine book <ref> [4] </ref> has been extensively used in designing the formal skeleton of BABY-SIT. Situation theory provides a collection of basic types that can be used for individuating or discriminating uniformities of the real world. <p> In addition to querying which situation supports what, it is also possible to ask which (particular) situation does not support an infon or a set of infons. The query mechanism also enables the user to issue oracle queries <ref> [4] </ref>. These are queries that collect information about a single object in the system. By associating an issue set with the oracle query, it is possible to retrieve information about particular aspects of the oracle object.
Reference: [5] <author> S. Hanks and D. V. McDermott. </author> <title> Nonmonotonic Logic and Temporal Projection. </title> <journal> Artificial Intelligence, </journal> <volume> 33 </volume> <pages> 379-412, </pages> <year> 1987. </year> <month> 9 </month>
Reference-contexts: Situation calculus [8] has initially been used to reason about the effects of actions. Hanks and McDermott <ref> [5] </ref> describe what they call temporal projection in the framework of situation calculus as follows. <p> Given a description of the current situation, some descriptions of the effects of possible actions, and a sequence of actions to be performed, how do we predict the properties of the world in the resulting situation? Hanks and McDermott <ref> [5] </ref> applied some of the existing logics (e.g., Reiter's default logic [10]) to scenarios to see whether the expected results are indeed produced. The Yale Shooting Problem (YSP) is one of these scenarios posed by Hanks and McDermott [5] as a paradigm to show how the temporal projection problem arises in <p> the properties of the world in the resulting situation? Hanks and McDermott <ref> [5] </ref> applied some of the existing logics (e.g., Reiter's default logic [10]) to scenarios to see whether the expected results are indeed produced. The Yale Shooting Problem (YSP) is one of these scenarios posed by Hanks and McDermott [5] as a paradigm to show how the temporal projection problem arises in logical frameworks. At some point in time, a person (Fred) is alive. A loaded gun, after waiting for a while, is fired at Fred. <p> A loaded gun, after waiting for a while, is fired at Fred. What are the results of this action? One expects that Fred would die and the gun would be unloaded after the firing of the gun. But Hanks and McDermott <ref> [5] </ref> demonstrate, in the framework of circumscription [7], that unintended minimal models are obtained; the gun gets unloaded during the waiting stage and firing the gun does not kill Fred.
Reference: [6] <institution> KEE T M . (Knowledge Engineering Environment) Software Development System, </institution> <note> Version 4.1. </note> <institution> IntelliCorp, Inc., Mountain View, </institution> <address> CA, </address> <year> 1993. </year>
Reference-contexts: We consider a well-known AI puzzle, the Yale Shooting Problem, which seems to be a suitable test-bed for nonmonotonic theories. 2 BABY-SIT BABY-SIT [12] is a computational medium based on situations and has been developed in KEE T M (Knowledge Engineering Environment) <ref> [6] </ref>. The implementation language is Common Lisp and the BABY-SIT desktop is based on X Windows running on a SPARCStation.
Reference: [7] <author> J. McCarthy. </author> <title> Applications of Circumscription to Formalizing Commonsense Knowledge. </title> <journal> Artificial Intelligence, </journal> <volume> 28(1) </volume> <pages> 89-116, </pages> <year> 1986. </year>
Reference-contexts: A loaded gun, after waiting for a while, is fired at Fred. What are the results of this action? One expects that Fred would die and the gun would be unloaded after the firing of the gun. But Hanks and McDermott [5] demonstrate, in the framework of circumscription <ref> [7] </ref>, that unintended minimal models are obtained; the gun gets unloaded during the waiting stage and firing the gun does not kill Fred.
Reference: [8] <author> J. McCarthy and P. J. Hayes. </author> <title> Some Philosophical Problems from the Standpoint of Artificial Intelligence. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence, </booktitle> <pages> pages 463-502. </pages> <publisher> Edinburgh University Press, Edinburgh, </publisher> <address> U.K., </address> <year> 1969. </year>
Reference-contexts: User interfaces and menu-driven operations ease the tasks of the programmer. Various types of model-based reasoning such as data-driven reasoning, goal-driven reasoning, and nonmonotonic reasoning are possible in BABY-SIT. 3 The Yale Shooting Problem Various nonmonotonic formal systems have been proposed to facilitate commonsense reasoning. Situation calculus <ref> [8] </ref> has initially been used to reason about the effects of actions. Hanks and McDermott [5] describe what they call temporal projection in the framework of situation calculus as follows.
Reference: [9] <author> H. Nakashima, H. Suzuki, P.-K. Halvorsen, and S. Peters. </author> <title> Towards a Computational Interpretation of Situation Theory. </title> <booktitle> In Proceedings of the International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 489-498, </pages> <institution> Institute for New Generation Computer Technology, </institution> <address> Tokyo, Japan, </address> <year> 1988. </year>
Reference-contexts: The primary motivation underlying BABY-SIT is to facilitate the development and testing of programs in domains ranging from linguistics to AI within a unified framework built upon situation-theoretic constructs [14, 18, 17, 12]. BABY-SIT accommodates the basic features of situation theory, and compared to the existing approaches <ref> [2, 3, 9] </ref>, enhances these features [16, 19]. Devlin's fine book [4] has been extensively used in designing the formal skeleton of BABY-SIT. Situation theory provides a collection of basic types that can be used for individuating or discriminating uniformities of the real world.
Reference: [10] <author> R. Reiter. </author> <title> A Logic for Default Reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 13 </volume> <pages> 81-132, </pages> <year> 1980. </year>
Reference-contexts: Given a description of the current situation, some descriptions of the effects of possible actions, and a sequence of actions to be performed, how do we predict the properties of the world in the resulting situation? Hanks and McDermott [5] applied some of the existing logics (e.g., Reiter's default logic <ref> [10] </ref>) to scenarios to see whether the expected results are indeed produced. The Yale Shooting Problem (YSP) is one of these scenarios posed by Hanks and McDermott [5] as a paradigm to show how the temporal projection problem arises in logical frameworks.
Reference: [11] <author> Y. Shoham. </author> <title> Reasoning About Change: Time and Causation from the Standpoint of Artificial Intelligence. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1988. </year>
Reference-contexts: But Hanks and McDermott [5] demonstrate, in the framework of circumscription [7], that unintended minimal models are obtained; the gun gets unloaded during the waiting stage and firing the gun does not kill Fred. Shoham's causal theories and preference criteria <ref> [11] </ref> provides a satisfactory solution to the temporal projection problem. 1 Causal theories contain axioms to reason about the effects of actions. Proceeding in time, knowledge about the future is obtained from what is known and what is not known about the past.
Reference: [12] <author> E. </author> <title> Tn. Computational Situation Theory with BABY-SIT. </title> <type> PhD thesis, </type> <institution> Department of Computer Engineering and Information Science, Bilkent University, Ankara, Turkey, </institution> <year> 1995. </year>
Reference-contexts: We consider a well-known AI puzzle, the Yale Shooting Problem, which seems to be a suitable test-bed for nonmonotonic theories. 2 BABY-SIT BABY-SIT <ref> [12] </ref> is a computational medium based on situations and has been developed in KEE T M (Knowledge Engineering Environment) [6]. The implementation language is Common Lisp and the BABY-SIT desktop is based on X Windows running on a SPARCStation. <p> The implementation language is Common Lisp and the BABY-SIT desktop is based on X Windows running on a SPARCStation. The primary motivation underlying BABY-SIT is to facilitate the development and testing of programs in domains ranging from linguistics to AI within a unified framework built upon situation-theoretic constructs <ref> [14, 18, 17, 12] </ref>. BABY-SIT accommodates the basic features of situation theory, and compared to the existing approaches [2, 3, 9], enhances these features [16, 19]. Devlin's fine book [4] has been extensively used in designing the formal skeleton of BABY-SIT. <p> Rather than measuring the degree of relevance of an infon for the oracle of an object, we apply a restricted form of the notion of `contextual effect' and accordingly determine if an infon is relevant or not to the current context <ref> [1, 12] </ref>. Objects in the environment and the attainment of information flow in BABY-SIT are 4 compatible with the ontology of situation theory. Computation is context-sensitive and type--theoretic. The basic computation regime is unification.
Reference: [13] <author> E. Tn and V. Akman. </author> <title> Computing with Causal Theories. </title> <journal> International Journal of Pattern Recognition and Artificial Intelligence, </journal> <volume> 6(4) </volume> <pages> 699-730, </pages> <year> 1992. </year> <month> 10 </month>
Reference-contexts: We provide a possible axiomatization in causal theories of Shoham where the gun is loaded at time 0 and fired at 2: 1. 2 (0,loads,mary,gun) 1 While Shoham's causal theories have computationally simple model-theoretic properties, they are not very efficient <ref> [13] </ref> and have some technical limitations [15].
Reference: [14] <author> E. Tn and V. Akman. BABY-SIT: </author> <title> A Computational Medium Based on Situations. </title> <editor> In P. Dekker and M. Stokhof, editors, </editor> <booktitle> Proceedings of the 9th Amsterdam Colloquium, </booktitle> <pages> pages 665-681. </pages> <booktitle> Institute for Logic, Language, and Computation, </booktitle> <address> University of Amsterdam, Amsterdam, Holland, </address> <year> 1993. </year>
Reference-contexts: The implementation language is Common Lisp and the BABY-SIT desktop is based on X Windows running on a SPARCStation. The primary motivation underlying BABY-SIT is to facilitate the development and testing of programs in domains ranging from linguistics to AI within a unified framework built upon situation-theoretic constructs <ref> [14, 18, 17, 12] </ref>. BABY-SIT accommodates the basic features of situation theory, and compared to the existing approaches [2, 3, 9], enhances these features [16, 19]. Devlin's fine book [4] has been extensively used in designing the formal skeleton of BABY-SIT.
Reference: [15] <author> E. Tn and V. </author> <title> Akman. </title> <journal> The Logic of Counteraction. Elektrik: Turkish Journal of Electrical Engineering and Computer Sciences, </journal> <volume> 1(3) </volume> <pages> 167-181, </pages> <year> 1993. </year>
Reference-contexts: We provide a possible axiomatization in causal theories of Shoham where the gun is loaded at time 0 and fired at 2: 1. 2 (0,loads,mary,gun) 1 While Shoham's causal theories have computationally simple model-theoretic properties, they are not very efficient [13] and have some technical limitations <ref> [15] </ref>.
Reference: [16] <author> E. Tn and V. Akman. </author> <title> Computational Situation Theory. </title> <journal> ACM Sigart Bulletin, </journal> <volume> 5(4) </volume> <pages> 4-17, </pages> <year> 1994. </year>
Reference-contexts: BABY-SIT accommodates the basic features of situation theory, and compared to the existing approaches [2, 3, 9], enhances these features <ref> [16, 19] </ref>. Devlin's fine book [4] has been extensively used in designing the formal skeleton of BABY-SIT. Situation theory provides a collection of basic types that can be used for individuating or discriminating uniformities of the real world.
Reference: [17] <author> E. Tn and V. Akman. </author> <title> Situated Processing of Pronominal Anaphora. </title> <editor> In H. Trost, editor, </editor> <booktitle> KONVENS '94, 2. Konferenz, Verarbeitung naturlicher Sprache, Informatik Xpress 6, </booktitle> <pages> pages 369-378. </pages> <publisher> Springer Produktions-Gesellschaft, </publisher> <address> Berlin, Germany, </address> <year> 1994. </year>
Reference-contexts: The implementation language is Common Lisp and the BABY-SIT desktop is based on X Windows running on a SPARCStation. The primary motivation underlying BABY-SIT is to facilitate the development and testing of programs in domains ranging from linguistics to AI within a unified framework built upon situation-theoretic constructs <ref> [14, 18, 17, 12] </ref>. BABY-SIT accommodates the basic features of situation theory, and compared to the existing approaches [2, 3, 9], enhances these features [16, 19]. Devlin's fine book [4] has been extensively used in designing the formal skeleton of BABY-SIT.
Reference: [18] <author> E. Tn and V. Akman. </author> <title> Information-Oriented Computation with BABY-SIT. </title> <editor> In D. West-erst-ahl and J. Seligman, editors, </editor> <booktitle> Language, Logic, and Computation: The 1994 Moraga Proceedings, CSLI Lecture Notes. Center for the Study of Language and Information, </booktitle> <address> Stanford, CA, </address> <year> 1996. </year> <note> to appear. </note>
Reference-contexts: The implementation language is Common Lisp and the BABY-SIT desktop is based on X Windows running on a SPARCStation. The primary motivation underlying BABY-SIT is to facilitate the development and testing of programs in domains ranging from linguistics to AI within a unified framework built upon situation-theoretic constructs <ref> [14, 18, 17, 12] </ref>. BABY-SIT accommodates the basic features of situation theory, and compared to the existing approaches [2, 3, 9], enhances these features [16, 19]. Devlin's fine book [4] has been extensively used in designing the formal skeleton of BABY-SIT.
Reference: [19] <author> E. Tn, V. Akman, and M. Ersan. </author> <title> Towards Situation-Oriented Programming Languages. </title> <journal> ACM Sigplan Notices, </journal> <volume> 30(1) </volume> <pages> 27-36, </pages> <year> 1995. </year> <month> 11 </month>
Reference-contexts: BABY-SIT accommodates the basic features of situation theory, and compared to the existing approaches [2, 3, 9], enhances these features <ref> [16, 19] </ref>. Devlin's fine book [4] has been extensively used in designing the formal skeleton of BABY-SIT. Situation theory provides a collection of basic types that can be used for individuating or discriminating uniformities of the real world.
References-found: 19

