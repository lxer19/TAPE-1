URL: http://www.cs.wisc.edu/~pmd/docs/DataCube.ps
Refering-URL: http://www.cs.wisc.edu/~pmd/olapreferences.html
Root-URL: 
Title: Data Cube: A Relational Aggregation Operator Generalizing Group-By, Cross-Tab, and SubTotals  
Author: Jim Gray Adam Bosworth Andrew Layman Hamid Pirahesh 
Address: One Microsoft Way Redmond, WA 98052  
Affiliation: Microsoft Research Advanced Technology Division Microsoft Corporation  
Date: 5 February 1995, Revised 15 November 1995  
Abstract: Technical Report MSR-TR-95-22 
Abstract-found: 1
Intro-found: 1
Reference: [Access] <editor> Microsoft Access Relational Database Management System for Windows, </editor> <title> Language Reference - Functions, Statements, Methods, Properties, </title> <booktitle> and Actions, </booktitle> <address> DB26142, Microsoft, Redmond, WA, </address> <year> 1994. </year>
Reference-contexts: Most report writers build in a cross-tabs feature, building the report up from the underlying tabular data such as Table 4 and its extension. See for example the TRANSFORM-PIVOT operator of Microsoft Access <ref> [Access] </ref>. 3. The Data CUBE Operator The generalization of these ideas seems obvious: Figure 2 shows the concept for aggregation up to 3-dimensions. The traditional GROUP BY can generate the core of the N-dimensional data cube.
Reference: [Essbase] <institution> Method and apparatus for storing and retrieving multidimensional data in computer memory, Inventor: Earle; Robert J., Assignee: Arbor Software Corporation, </institution> <type> US Patent 05359724, </type> <month> October </month> <year> 1994, </year>
Reference-contexts: It is possible that the core of the cube is sparse. In that case, only the non-null elements of the core and of the super-aggregates should be represented. This suggests a hashing or a B-tree be used as the indexing scheme for aggregation values <ref> [Essbase] </ref>. 6. Summary: The cube operator generalizes and unifies several common and popular concepts: aggregates, group by, histograms, roll-ups and drill-downs and, cross tabs. The cube is based on a relational representation of aggregate data using the ALL value to denote the set over which each aggregation is computed.
Reference: [Illustra] <editor> Illustra DataBlade Developer's Kit 1.1., </editor> <booktitle> Illustra Information Technologies, </booktitle> <address> Oakland, CA, </address> <year> 1994. </year>
Reference-contexts: Some systems allow users to add new aggregation functions. The Illustra system, for example, allows users to add aggregate functions by adding a program with the following three callbacks to the database system <ref> [Illustra] </ref>: Init (&handle): Allocates the handle and initializes the aggregate computation. Iter (&handle, value): Aggregates the next value into the current aggregate. value = Final (&handle): Computes and returns the resulting aggregate by using data saved in the handle. This invocation deallocates the handle. Consider implementing the Average () function.
Reference: [Melton & Simon] <author> Jim Melton and Alan Simon, </author> <title> Understanding the New SQL: A Complete Guide, </title> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, CA, </address> <year> 1993. </year>
Reference: [Red Brick] <author> RISQL Reference Guide, </author> <title> Red Brick Warehouse VPT Version 3, Part no: </title> <type> 401530, </type> <institution> Red Brick Systems, Los Gatos, </institution> <address> CA, </address> <year> 1994 </year>
Reference-contexts: Red Brick systems added some interesting aggregate functions that enhance the GROUP BY mechanism <ref> [Red Brick] </ref>: Rank (expression): returns the expressions rank in the set of all values of this domain of the table. If there are N values in the column, and this is the highest value, the rank is N, if it is the lowest value the rank is 1.
Reference: [TPC] <institution> The Benchmark Handbook for Database and Transaction Processing Systems - 2nd edition, </institution> <note> J. </note> <editor> Gray (ed.), </editor> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, CA, 1993. Or http://www.tpc.org/ </address>
Reference-contexts: Paradoxically, the TPC-A and TPC-B benchmark transactions spend most of their energies maintaining aggregates dynamically: they maintain the summary bank account balance, teller cash-drawer balance, and branch balance. All these can be computed as aggregates from the history table <ref> [TPC] </ref>.
References-found: 6

