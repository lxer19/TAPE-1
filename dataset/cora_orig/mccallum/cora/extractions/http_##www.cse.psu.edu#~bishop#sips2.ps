URL: http://www.cse.psu.edu/~bishop/sips2.ps
Refering-URL: http://www.cse.psu.edu/~bishop/
Root-URL: http://www.cse.psu.edu
Title: RE-EVALUATING MPEG MOTION COMPENSATION SEARCH CRITERIA  
Author: Benjamin Bishop, Thomas P. Kelliher, Robert M. Owens, Mary Jane Irwin 
Address: Park, PA 16802  
Affiliation: Department of Computer Science and Engineering The Pennsylvania State University University  
Abstract: As processors evolve from simple scalar machines to more advanced designs using dynamic instruction scheduling, speed critical algorithms should be re-examined to ensure that the optimal strategy is being used. One important example of this class of algorithms is MPEG encoding. Although the Mean Absolute Distance approach is recognized in the literature as more efficient in terms of speed, our research indicates that the Mean Square Error approach becomes much more attractive as instruction level parallelism increases. In a machine that can exploit a high degree of instruction level parallelism, the Mean Square Error approach yields better performance. In addition, the Mean Square Error approach achieves better compression quality than the Mean Absolute Distance method. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K.L. Gong and L.A. Rowe, </author> <title> "Parallel MPEG-1 Video Encoding", 1994 Picture Coding Symposium, </title> <address> Sacramento, CA, </address> <month> September </month> <year> 1994. </year> <month> 7 </month>
Reference-contexts: Although there has been a great deal of work targeted at improving MPEG encoding delay, 1 these works accept the conclusion that MAD is a more efficient search criterion than MSE <ref> [1, 3, 4] </ref>. On typical scalar machines, it is believed that MAD is the more efficient choice since it requires no time-consuming multiplication. However, MSE yields slightly higher quality compression. <p> Gong et al. <ref> [1] </ref> provides a more detailed description of these techniques. MPEG compression makes use of spatial and temporal locality since similarities tend to exist between the same subsections of nearby frames. The algorithm searches for portions of a given frame which are closely repeated in later frames.
Reference: [2] <author> B. Bishop, R. Owens, M. Irwin, </author> <title> "Aggressive Dynamic Execution of Decoded Traces", </title> <booktitle> 1997 IEEE Workshop on Signal Processing Systems, Leicester, </booktitle> <address> UK, </address> <month> November </month> <year> 1997. </year>
Reference-contexts: On a scalar machine this stall will effect only one functional unit. On a highly parallel DIS machine, however, this stall could halt all functional units. 3 Simulation and Test Results We had reported previously that the dynamic execution of decoded traces <ref> [2] </ref> could be applied to particular advantage in the execution of multimedia kernels. In later simulations, we found that an implementation of the MSE algorithm outperformed that of the MAD algorithm for our highly parallel simulated DIS processor.
Reference: [3] <author> B. Liu and A. Zaccarin, </author> <title> "Fast Algorithms for Estimation of Block Motion Vectors", </title> <journal> IEEE Trans. Video Technology. </journal> <month> April </month> <year> 1993. </year>
Reference-contexts: Although there has been a great deal of work targeted at improving MPEG encoding delay, 1 these works accept the conclusion that MAD is a more efficient search criterion than MSE <ref> [1, 3, 4] </ref>. On typical scalar machines, it is believed that MAD is the more efficient choice since it requires no time-consuming multiplication. However, MSE yields slightly higher quality compression.
Reference: [4] <author> H.G. Musmann, P. Pirsch, H.J. Gralleer, </author> <title> "Advances in Picture Coding", </title> <journal> Proc. IEEE, </journal> <volume> vol. 73, no. 4, </volume> <pages> pp. 523-548, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: Although there has been a great deal of work targeted at improving MPEG encoding delay, 1 these works accept the conclusion that MAD is a more efficient search criterion than MSE <ref> [1, 3, 4] </ref>. On typical scalar machines, it is believed that MAD is the more efficient choice since it requires no time-consuming multiplication. However, MSE yields slightly higher quality compression.
Reference: [5] <author> M. Slater, </author> <title> "The Land Beyond Benchmarks", </title> <journal> Comput. Commun. OEM, Mag. </journal> <volume> 4, 31, </volume> <pages> pp. 64-77. </pages> <month> September </month> <year> 1996. </year>
Reference-contexts: 1 Introduction MPEG is certainly one of the most widely used forms of video compression. The importance of MPEG can be seen by the inclusion of MPEG routines in the Intel Media Benchmark <ref> [5] </ref>. In addition to its current uses, MPEG compression has applications in the areas of HDTV and Video on Demand. In MPEG encoding, the compression algorithm relies on the comparison of motion vector errors. These errors are typically measured using one of two techniques.
Reference: [6] <editor> L. Rowe et al., </editor> <booktitle> "Berkeley MPEG Tools" ftp://mm-ftp.cs.berkeley.edu/pub/ multimedia/mpeg/bmt1r1.tar.gz & ftp://bmrc.berkeley.edu/pub//pub/mpeg/EncodeData/ 8 </booktitle>
Reference-contexts: Tests on current processor families showed that the gap between MSE and MAD performance narrows as machines become better at exploiting instruction level parallelism (ILP). These results, presented in Table 1, were generated by compressing the Berkeley "flower" and "tennis" movies <ref> [6] </ref> on three machine families. Typically, the high ILP machines (UltraSPARC, R10000, Cyrix 686 and Pentium II) had a significantly lower performance gap between the MSE and MAD techniques than did the low ILP machines (TurboSPARC, R5000 and Pentium). <p> In the issue stage, the machine can use a variable number of functional units for testing purposes. A series of simulations was performed in order to measure the performance of each architecture with different search criteria. For this purpose, the Berkeley MPEG tool set <ref> [6] </ref> was adapted for the simulator. Figure 1 shows the results of various search criteria, in terms of instructions completed per cycle, on a 4-way issue machine. Figure 2 shows these results for an 8-way machine.
References-found: 6

