URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1991/tr-91-073.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1991.html
Root-URL: http://www.icsi.berkeley.edu
Title: Connectionist Layered Object-Oriented Network Simulator (CLONES): User's Manual minimize the learning curve for using CLONES,
Phone: 1-510-642-4274 FAX 1-510-643-7684  
Author: Phil Kohn 
Note: 1.  
Date: 3 March 1992  
Address: I 1947 Center Street Suite 600 Berkeley, California 94704  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  
Pubnum: TR-91-073  
Abstract: CLONES is a object-oriented library for constructing, training and utilizing layered connectionist networks. The CLONES library contains all the object classes needed to write a simulator with a small amount of added source code (examples are included). The size of experimental ANN programs is greatly reduced by using an object-oriented library; at the same time these programs are easier to read, write and evolve. The library includes database, network behavior and training procedures that can be customized by the user. It is designed to run efficiently on data parallel computers (such as the RAP [6] and SPERT [1]) as well as uniprocessor workstations. While efficiency and portability to parallel computers are the primary goals, there are several secondary design goals: 3. allow heterogeneous algorithms and training procedures to be interconnected and trained together. Within these constraints we attempt to maximize the variety of artificial neural net work algorithms that can be supported. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Asanovic, J. Beck, B. Kingsbury, P. Kohn, N. Morgan, and J. Wawrzynek. SPERT: </author> <title> A VLIW/SIMD microprocessor for artificial neural network computations. </title> <type> Technical Report TR-91-072, </type> <institution> International Computer Science Institute, </institution> <year> 1991. </year>
Reference-contexts: Our ANN research currently encompasses two hardware platforms and several languages, shown in Figure 1. Two new hardware platforms, the SPERT board <ref> [1] </ref> and the CNS-1 system are in design (unfilled check marks). The SPERT design is a custom VLSI parallel processor installed on an SBUS card plugged into a SPARC workstation.
Reference: [2] <author> J. Beck. </author> <title> The ring array processor (RAP): Hardware. </title> <type> Technical Report TR-90-048, </type> <institution> International Computer Science Institute, </institution> <year> 1990. </year>
Reference-contexts: Ideally we would like to implement and test ideas at about the same rate that we come up with them. We have approached this goal both by developing application specific parallel hardware, the Ring Array Processor (RAP) <ref> [6, 2, 5] </ref>, and by building an object-oriented software environment, the Connectionist Layered Object-oriented Network Simulator (CLONES). By using an object-oriented library, the size of experimental ANN programs can be greatly reduced while making them easier to read, write and modify.
Reference: [3] <author> H. Bourlard and N. Morgan. </author> <title> Connectionist approaches to the use of Markov models for continuous speech recognition. </title> <editor> In David S. Touretzky, editor, </editor> <booktitle> Advances in Neural Information Processing Systems, </booktitle> <volume> volume 3. </volume> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo CA, </address> <year> 1991. </year>
Reference: [4] <author> D. S. Broomhead and D. Lowe. </author> <title> Multi-variable functional interpolation and adaptive networks. </title> <journal> Complex Systems, </journal> <volume> 2 </volume> <pages> 321-355, </pages> <year> 1988. </year>
Reference-contexts: This is used by algorithms that need to use the database to initialize the network for training. For example, an RBF <ref> [4] </ref> network might calculate the covariance matrix during the PRE TRAIN epoch. 3. Call reset learning rate to initialize the learning control parameters or tem perature schedule. 4. Inside the main training loop, call run epoch for each Database until the next learning rate function returns FALSE.
Reference: [5] <author> N. Morgan, J. Beck, P. Kohn, and J. Bilmes. </author> <title> Neurocomputing on the RAP. </title> <editor> In K. W. Przytula and V. K. Prasanna, editors, </editor> <title> Digital Parallel Implementations of Neural Networks. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs NJ, </address> <year> 1992. </year>
Reference-contexts: Ideally we would like to implement and test ideas at about the same rate that we come up with them. We have approached this goal both by developing application specific parallel hardware, the Ring Array Processor (RAP) <ref> [6, 2, 5] </ref>, and by building an object-oriented software environment, the Connectionist Layered Object-oriented Network Simulator (CLONES). By using an object-oriented library, the size of experimental ANN programs can be greatly reduced while making them easier to read, write and modify.
Reference: [6] <author> N. Morgan, J. Beck, P. Kohn, J. Bilmes, E. Allman, and J. Beer. </author> <title> The RAP: a ring array processor for layered network calculations. </title> <booktitle> In Proceedings IEEE International Conference on Application Specific Array Processors, </booktitle> <pages> pages 296-308, </pages> <address> Princeton NJ, </address> <year> 1990. </year> <month> 39 </month>
Reference-contexts: Ideally we would like to implement and test ideas at about the same rate that we come up with them. We have approached this goal both by developing application specific parallel hardware, the Ring Array Processor (RAP) <ref> [6, 2, 5] </ref>, and by building an object-oriented software environment, the Connectionist Layered Object-oriented Network Simulator (CLONES). By using an object-oriented library, the size of experimental ANN programs can be greatly reduced while making them easier to read, write and modify.
Reference: [7] <author> H. Schmidt and B. Gomes. ICSIM: </author> <title> An object-oriented connectionist simulator. </title> <type> Technical Report TR-91-048, </type> <institution> International Computer Science Institute, </institution> <year> 1991. </year>
Reference-contexts: CLONES currently runs on UNIX workstations and the RAP. The four most important priorities of the CLONES design were: 1. Preserve the efficiency of the hardware. Making efficiency a primary goal differentiates this design from many others <ref> [7] </ref> where flexibility, generality and ease of representation are the most important design goals. However, there are other new designs that do provide a significant increase in efficiency over previous simulators [8, 9]. 3 2.
Reference: [8] <author> D. van Camp, T. Plate, and Geoffrey Hinton. Xerion. </author> <type> Technical Report TR-??, </type> <institution> University of Toronto, </institution> <year> 1991. </year>
Reference-contexts: Preserve the efficiency of the hardware. Making efficiency a primary goal differentiates this design from many others [7] where flexibility, generality and ease of representation are the most important design goals. However, there are other new designs that do provide a significant increase in efficiency over previous simulators <ref> [8, 9] </ref>. 3 2. Allow the same CLONES source code to utilize uniprocessor workstations and single program data parallel machines (such as RAP or SPERT), and perhaps other vector processing, systolic array or SIMD (Single Instruction stream, multiple data streams) machines.
Reference: [9] <author> A. Wieland, R. Leighton, and W. Morgart. </author> <title> Aspirin for migraines. </title> <booktitle> In Proceedings of the 1988 International Neural Network Society Conference, </booktitle> <year> 1988. </year> <month> 40 </month>
Reference-contexts: Preserve the efficiency of the hardware. Making efficiency a primary goal differentiates this design from many others [7] where flexibility, generality and ease of representation are the most important design goals. However, there are other new designs that do provide a significant increase in efficiency over previous simulators <ref> [8, 9] </ref>. 3 2. Allow the same CLONES source code to utilize uniprocessor workstations and single program data parallel machines (such as RAP or SPERT), and perhaps other vector processing, systolic array or SIMD (Single Instruction stream, multiple data streams) machines.
References-found: 9

