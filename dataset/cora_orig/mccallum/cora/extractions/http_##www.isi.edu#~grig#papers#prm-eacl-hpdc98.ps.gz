URL: http://www.isi.edu/~grig/papers/prm-eacl-hpdc98.ps.gz
Refering-URL: http://www.isi.edu/~grig/publications.html
Root-URL: http://www.isi.edu
Email: grig, tryutov, bcn@isi.edu  
Phone: (310)822-1511 (voice) (310)823-6714 (fax)  
Title: Authorization for Metacomputing Applications  
Author: G. Gheorghiu, T. Ryutov and B.C. Neuman 
Address: 4676 Admiralty Way suite 1001 Marina del Rey, CA 90292  
Affiliation: Information Sciences Institute University of Southern California  
Abstract: One of the most difficult problems to be solved by meta-computing systems is to ensure strong authentication and authorization. The problem is complicated since the hosts involved in a metacomputing environment often span multiple administrative domains, each with its own security policy. This paper presents a distributed authorization model used by our resource allocation system, the Prospero Resource Manager [8]. The main components of our design are Extended Access Control Lists, EACLs, and a General Authorization and Access API, GAA API. EACLs extend conventional ACLs to allow conditional restrictions on access rights. In the case of the Prospero Resource Manager, specific restrictions include limits on the computational resources to be consumed and on the characteristics of the applications to be executed by the system, such as name, version or endorser. The GAA API provides a general framework for applications to access the EACLs. We have built a prototype of the system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Belani, A. Vahdat, T. Anderson, and M. Dahlin. </author> <title> The CRISIS wide area security architecture. </title> <booktitle> Proceedings of the 7th USENIX Security Symposium, </booktitle> <address> San Antonio, Texas, </address> <month> January </month> <year> 1998. </year>
Reference-contexts: These mechanisms can be readily integrated with the authorization model presented here: the restrictions or conditions caried in the proxy or certificate are evaluated by the GAA API in addition to the restrictions in the matching EACL entry. The CRISIS architecture <ref> [1] </ref> provides ACLs that are related to the type of the protected object. For example, file ACLs list principals allowed read, write or execute access to the file, whereas node ACLs contain principals allowed to run jobs on the node.
Reference: [2] <author> I. Foster and C. Kesselman. Globus: </author> <title> A metacomputing infrastructure toolkit. </title> <journal> International Journal of Supercomputer Applications, </journal> <month> Summer </month> <year> 1997. </year>
Reference-contexts: 1. Introduction Metacomputing is sometimes defined as the abstraction of geographically dispersed computing and communication resources (e.g. supercomputers and high-speed networks) into a single metacomputer <ref> [2] </ref>. Ideally, the user of the system is presented with a consistent and familiar interface that hides the geographic scale, the complexity and the heterogeneity. A metacomputing system usually crosses administrative domains and involves a very large number of computing resources. Such systems have particularly sensitive requirements for security.
Reference: [3] <institution> IBM. TME 10 security management. </institution> <note> http://www.tivoli.com/redbooks/html/sg242021/2021fm.htm, October 1997. </note>
Reference-contexts: Our model provides a uniform authorization mechanism that is capable of supporting different operations and different kinds of protected objects. The Tivoli Management Environment (TME 10) is a commercially available system from IBM which takes a role-based approach to security <ref> [3] </ref>. TME roles are named capabilities, containing a list of objects and access permissions to those objects. Objects can have default access and can be associated with more than one role. Each role will have a different level of access to the object.
Reference: [4] <author> W. Johnston and C. Larsen. </author> <title> A use-condition centered approach to authenticated global capabilities: Security architectures for large-scale distributed collaboratory environments. </title> <type> LBNL Report 38850. </type>
Reference-contexts: This may not be sufficient for distributed applications. Our model allows fine-grained control over the conditions. Both restricted proxies [6] and the use-condition model <ref> [4] </ref> allow conditions and privilege attributes to be embedded in authorization credentials or certificates.
Reference: [5] <author> N. Nagaratnam and S. Byrne. </author> <title> Resource access control for an Internet user agent. </title> <booktitle> Proceedings of the third USENIX Conference on Object-Oriented Technologies and Systems, </booktitle> <address> Portland, Oregon, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: During the execution of tasks on a particular host, the node manager periodically checks whether the task is abiding to the limits imposed on the local resources. If it is not, then the task is interrupted and the job manager is notified. 7. Related Work Nagaratnam and Byrne <ref> [5] </ref> present a model for Internet user agents to control access to client resources. This model protects client machines from hostile downloadable content and allows the client to selectively grant access to trusted agents. The authenticity of the code is based on digital signatures of principals certifying it.
Reference: [6] <author> B. C. Neuman. </author> <title> Proxy-based authorization and accounting for distributed systems. </title> <booktitle> Proceedings of the 13th International Conference on Distributed Computing Systems, Pitts burgh, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: Authorization Attributes Verified authorization credentials, such as group membership, group non membership and proxies. Delegated Credentials Delegation is supported through inclusion of delegated credentials, such as those sup ported by restricted proxies <ref> [6] </ref>. Evaluation and Retrieval Functions for Upcalls These functions are called to evaluate application-specific conditions; request additional credentials and verify them. 5. <p> The GACL model supports only system state-related conditions within which rights are granted, such as current system load and maximum number of copies of a program to be run concurrently. This may not be sufficient for distributed applications. Our model allows fine-grained control over the conditions. Both restricted proxies <ref> [6] </ref> and the use-condition model [4] allow conditions and privilege attributes to be embedded in authorization credentials or certificates.
Reference: [7] <author> B. C. Neuman, S. Augart, and S. Upasani. </author> <title> Using Pros-pero to support integrated location-independent computing. </title> <booktitle> Proc. Symp.on Mobile and Location-Independent Computing, </booktitle> <address> Cambridge, MA, </address> <pages> pages 2934, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Our goal in designing a mechanism for the management of the EACL files was to enable easy sharing of a default authorization policy among node managers, while allowing customization of the policy at the level of individual hosts. We use the Prospero Directory Service <ref> [7] </ref> to store the information associated with the EACL files. The EACL files themselves are objects stored in the Prospero directory service. The following scenario shows how the management of the files is accomplished: 1.
Reference: [8] <author> B. C. Neuman and S. Rao. </author> <title> The Prospero Resource Manager: A scalable framework for processor allocation in distributed systems. </title> <journal> Concurrency: Practice and Experience, </journal> <month> June </month> <year> 1994. </year>
Reference-contexts: The problem is complicated by the variety of representations and by the application of access control policies across multiple administrative domains. This paper describes the authentication and authorization mechanisms and policies used by the Prospero Resource Manager (PRM <ref> [8] </ref>), a scalable resource allocation system that manages processing resources in metacomputing environments. PRM uses Kerberos [9] to achieve strong authentication and integrates a new distributed authorization model. Because different administrative domains might use different security services for authentication of principals (e.g. <p> Section 7 discusses related work. 2. The Prospero Resource Manager The design of the Prospero Resource Manager was guided by the concept of the Virtual System Model, in which resources of interest are readily accessible and those of less interest are hidden from view <ref> [8] </ref>. PRM applies this concept to the problem of allocating resources in large scale systems by dividing the functions of resource management between three types of managers: the system manager, the job manager and the node manager.
Reference: [9] <author> B. C. Neuman and T. Ts'o. </author> <title> Kerberos: An authentication service for computer networks. </title> <journal> IEEE Communications Magazine, </journal> <pages> pages 3338, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: This paper describes the authentication and authorization mechanisms and policies used by the Prospero Resource Manager (PRM [8]), a scalable resource allocation system that manages processing resources in metacomputing environments. PRM uses Kerberos <ref> [9] </ref> to achieve strong authentication and integrates a new distributed authorization model. Because different administrative domains might use different security services for authentication of principals (e.g. <p> Different administrative domains might use different authentication mechanisms, each having a particular syntax for specification of principals. For example, an application may use Kerberos V5 <ref> [9] </ref> as an authentication service. Kerberos V5 provides secret-key based authentication and the format of the Kerberos V5 principal name is user name/instance@realm. Other domains may use DCE to obtain the user's identity credentials, usually identified by a User ID and Group ID.
Reference: [10] <author> T. Woo and S. Lam. </author> <title> A framework for distributed authoriza tion. </title> <booktitle> Proc. ACM Conference on Computer and Communications Security, </booktitle> <address> Fairfax, Virginia, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: The certificates are placed into the GAA API security context and checked by the GAA API when making authorization decisions. There is no need for each user to maintain authentication and group specification databases locally. The Generalized Access Control List framework described by Woo and Lam <ref> [10] </ref> presents a language-based approach for specifying authorization policies. The GACL model supports only system state-related conditions within which rights are granted, such as current system load and maximum number of copies of a program to be run concurrently. This may not be sufficient for distributed applications.
References-found: 10

