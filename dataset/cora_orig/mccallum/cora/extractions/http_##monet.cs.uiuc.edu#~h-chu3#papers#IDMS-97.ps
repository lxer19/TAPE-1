URL: http://monet.cs.uiuc.edu/~h-chu3/papers/IDMS-97.ps
Refering-URL: http://monet.cs.uiuc.edu/~h-chu3/
Root-URL: http://www.cs.uiuc.edu
Title: IDMS '97 (European Workshop on Interactive Distributed Multimedia Systems and Telecommunication Services) A Soft Real
Author: Hao-hua Chu and Klara Nahrstedt 
Address: Urbana Champaign, Urbana IL 61801, USA  
Affiliation: University of Illinois at  
Abstract: We present a soft real-time CPU server for Continuous Media processing in the UNIX environment. The server is a daemon process from which applications can request and acquire soft real-time QoS (Quality of Service) Guarantees. Our server architecture addresses in addition to other multimedia CPU scheduling extensions properties such as fairness, QoS brokerage and enforcement, and security. Overall it provides (1) protection among real-time(RT) processes, (2) fairness among RT and non-RT processes, (3) rate monotonic scheduling, and (4) a fix to the UNIX security problem. We have implemented our soft real-time CPU server in the SUN Solaris 2.5 Operating System, and we have shown through experiments that our soft RT server provides predictable QoS for continuous media applications. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Chen Lee, Ragunathan Rajkumar, and Cliff Mercer. </author> <title> "Experience with Processor Reservation and Dynamic QOS in Real-Time Mach". </title> <booktitle> Multimedia Japan, </booktitle> <year> 1996. </year>
Reference-contexts: Fair sharing also does not translate directly into applications QoS guarantees that require a specific amount of CPU allocation and a constant periodicity. Mercer, Savage, and Tokuda [4] implemented the Processor Capacity Reserves abstraction for the RT-threads in the RT Mach Operating System. A recent version <ref> [1] </ref> supports dynamic Quality adjustment policy. A new thread must first request its CPU QoS in the form of period, and requested CPU usage in percentage during the reservation phase. Once it is accepted, a reserve of CPU processing time is setup and it is bound to this new thread.
Reference: 2. <author> Pawan Goyal, Xingang Guo, and Harrick Vin. </author> <title> "A Hierarchical CPU Scheduler for Multimedia Operating System". </title> <booktitle> The proceedings of Second Usenix Symposium on Operating System Design and Implementation. </booktitle>
Reference-contexts: Goyal, Guo, and Vin <ref> [2] </ref> implemented the Hierarchical CPU Scheduler in the SUN Solaris 2.4. The CPU resource is partitioned into hierarchical classes, such as Real-time and Best-Effort classes, in a tree-like structure. A class can further partition its resource into subclasses.
Reference: 3. <author> Bill O. Gallmeister. </author> <title> "Programming for the Real World: POSIX.4". </title> <publisher> O'Reilly & Associates, INC. </publisher> <year> 1995. </year>
Reference-contexts: This fixed priority mechanism provides a convenient way to implement the rate monotonic (RM) algorithm because the ordering of priorities between the RT processes depends on the ordering of the process rates (the length of their periods) as shown in the Table 1. Under this RM schedule <ref> [3] </ref>, the RT processes with smaller periods are executed first, followed by RT processes with larger periods, and then non-RT processes.
Reference: 4. <author> Clifford W. Mercer, Stefan Savage, and Hideyuki Tokuda. </author> <title> "Processor Capacity Reserves: Operating System Support for Multimedia Applications". </title> <booktitle> IEEE International Conference on Multimedia Computing and Systems. </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: The major disadvantage of this approach is that their implementation requires modifications to the Solaris kernel scheduler. Fair sharing also does not translate directly into applications QoS guarantees that require a specific amount of CPU allocation and a constant periodicity. Mercer, Savage, and Tokuda <ref> [4] </ref> implemented the Processor Capacity Reserves abstraction for the RT-threads in the RT Mach Operating System. A recent version [1] supports dynamic Quality adjustment policy. A new thread must first request its CPU QoS in the form of period, and requested CPU usage in percentage during the reservation phase. <p> The UNIX command rusage will not give an accurate system time because some of the system threads execution times may not be accounted, as described in the Process Reserves Model in the RT Mach <ref> [4] </ref>. The user can get a good estimation by a few trial-and-error runs of the client programs. The execution time also depends on the state of memory contention and the resulting number of page faults.
Reference: 5. <author> Jason Nieh, James G. Hanko, J. Duane Northcutt, and Gerard A. Wall. </author> <title> "SVR4 UNIX Scheduler Unacceptable for Multimedia Applications". </title> <booktitle> Fourth International Workshop on Network and Operating System Support for Digital Audio and Video. </booktitle> <month> Nov </month> <year> 1993. </year>
Reference: 6. <author> Jun Kamada, Masanobu Yuhara, Etsuo Ono. </author> <title> "User-level Realtime Scheduler Exploiting Kernel-level Fixed Priority Scheduler". </title> <booktitle> Multimedia Japan, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: It is called rate adaptation. Table 2. URsched priority structure Priority Process RT class highest URsched scheduler 2nd highest Running RT process .. Not used TS class any Any TS processes RT Class lowest Waiting RT processes Kamada, Yuhara, and Ono <ref> [6] </ref> implemented the User-level RT Scheduler (URsched) in the SUN Solaris 2.4. The URsched approach is based on the POSIX.4 fixed priority extension and its priority scheduling rule.
Reference: 7. <author> Sandeep Khana, Michael Sebree, and John Zolnowsky. </author> <title> "Realtime Scheduling in SunOS 5.0". </title> <booktitle> USENIX Winter 1992 Technical Conference. </booktitle>
Reference: 8. <author> David K.Y. Yau and Simon S. Lam. </author> <title> "Adaptive Rate-Controlled Scheduling for Multi--media Applications". </title> <booktitle> ACM Multimedia Conference '96, </booktitle> <address> Boston, MA, </address> <month> Nov </month> <year> 1996. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: It requires non-trivial modifications and computation overhead inside the UNIX kernel to support this abstraction, such as keeping track of the reserves database, and passing the client process's reserve to and between system threads. Yau and Lam <ref> [8] </ref> implemented the Adaptive Rate-Controlled Scheduling, which is a modification of the Virtual Clock Algorithm. Each process specifies a reserve rate and a period for its admission control phase.
References-found: 8

