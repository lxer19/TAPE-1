URL: http://www.cs.wisc.edu/~cs740-1/papers/java-security2.ps
Refering-URL: 
Root-URL: 
Email: ddean@cs.princeton.edu felten@cs.princeton.edu dwallach@cs.princeton.edu balfanz@cs.princeton.edu  
Title: Java Security: Web Browsers and Beyond  
Author: Drew Dean Edward W. Felten Dan S. Wallach Dirk Balfanz 
Date: February 24, 1997  
Address: Princeton, NJ 08544  
Affiliation: Department of Computer Science Princeton University  
Abstract: The introduction of Java applets has taken the World Wide Web by storm. Java allows web creators to embellish their content with arbitrary programs which execute in the web browser, whether for simple animations or complex front-ends to other services. We examined the Java language and the Sun HotJava, Netscape Navigator, and Microsoft Internet Explorer browsers which support it, and found a significant number of flaws which compromise their security. These flaws arise for several reasons, including implementation errors, unintended interactions between browser features, differences between the Java language and bytecode semantics, and weaknesses in the design of the language and the bytecode format. On a deeper level, these flaws arise because of weaknesses in the design methodology used in creating Java and the browsers. In addition to the flaws, we discuss the underlying tension between the openness desired by web application writers and the security needs of their users, and we suggest how both might be accommodated.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Stanley R. Ames, Jr., Morrie Gasser, and Roger G. Schell. </author> <title> Security kernel design and implementation: An introduction. </title> <booktitle> Computer, </booktitle> <pages> pages 1422, </pages> <month> July </month> <year> 1983. </year> <title> Reprinted in Tutorial: Computer and Network Security, </title> <editor> M. D. Abrams and H. J. Podell, editors, </editor> <publisher> IEEE Computer Society Press, </publisher> <year> 1987, </year> <pages> pp. 142157. </pages>
Reference-contexts: While many of the specific flaws have been patched, the overall structure of the systems leads us to believe that flaws will continue to be found <ref> [1] </ref>. The absence of a well-defined, formal security policy prevents the verification of an implementation. We conclude that the Java system in its current form cannot easily be made secure.
Reference: [2] <author> James P. Anderson. </author> <title> Computer security technology planning study. </title> <type> Technical Report ESD-TR-73-51, U.S. </type> <institution> Air Force, Electronic Systems Division, Deputy for Command and Management Systems, HQ Electronic Systems Division (AFSC), L. G. Hanscom Field, Bedford, </institution> <address> MA 01730 USA, </address> <month> October </month> <year> 1972. </year> <booktitle> Volume 2, </booktitle> <pages> pages 5869. </pages>
Reference-contexts: Finally, the system must manage system calls and other methods which allow applets to affect each other as well as the environment beyond the browser. Many systems in the past have attempted to use language-based protection. The Anderson report <ref> [2] </ref> describes an early attempt to build a secure subset of Fortran. This effort was a failure because the implementors failed to consider all of the consequences of the implementation of one construct: assigned GOTO. This subtle flaw resulted in a complete break of the system.
Reference: [3] <author> Thomas E. Anderson, Henry M. Levy, Brian N. Bershad, and Edward D. Lazowska. </author> <title> The interaction of architecture and operating system design. </title> <booktitle> In Proceedings of the Fourth ACM Symposium on Architectural Support for Programming Languages and Operating Systems, </booktitle> <year> 1991. </year>
Reference-contexts: If Java's type system is sound, then the security manager should be tamperproof. By using types instead of separate address spaces for protection, Java is more easily embeddable in other software, and potentially performs better because protection boundaries can be crossed without a context switch <ref> [3] </ref>. 3 Taxonomy of Java Bugs We now present a taxonomy of known Java bugs, past and present.
Reference: [4] <author> Steven M. Bellovin. </author> <title> Using the domain name system for system break-ins. </title> <booktitle> In Proceedings of the Fifth Usenix UNIX Security Symposium, pages 199208, </booktitle> <address> Salt Lake City, Utah, June 1995. </address> <publisher> Usenix. </publisher>
Reference-contexts: The applet then asks to connect to foo.attacker.com, which is resolved by the DNS server for attacker.com to be mail server inside victim.org which can then be attacked. creating a DNS server that lies <ref> [4] </ref>. In particular, it may claim that any name for which it is responsible has any given set of addresses. Using the attacker's DNS server to provide a pair of addresses (machine-to-connect-to, machine-applet-came-from), the applet could connect to any desired machine on the Internet.
Reference: [5] <author> Steven M. Bellovin, </author> <month> July </month> <year> 1996. </year> <type> Personal communication. 17 </type>
Reference-contexts: However, with untrusted applets, this is no longer true. Steven Bellovin independently rediscovered this problem, and noted that it is an instance of the general problem of security policies not composing <ref> [5] </ref>. 15 continue running after the web browser is viewing a new page, there should be a mechanism for users to be aware that they running, and to selectively kill them 13 . 5.3 User Interface The security user interface is critical for helping the average user choose and live with
Reference: [6] <author> Nathaniel S. Borenstein. </author> <title> Email with a mind of its own: The Safe-Tcl language for enabled mail. </title> <booktitle> In IFIP International Working Conference on Upper Layer Protocols, Architectures and Applications, </booktitle> <year> 1994. </year>
Reference-contexts: Such remote code raises serious security issues; a casual web reader should not be concerned about malicious side-effects from visiting a web page. Languages such as Java [21], Safe-Tcl <ref> [6] </ref>, Phantom [10], Juice [14] and Telescript [16] have been proposed for running untrusted code, and each has varying ideas of how to thwart malicious programs. After several years of development inside Sun Microsystems, the Java language was released in mid-1995 as part of Sun's HotJava web browser.
Reference: [7] <author> Giuseppe Castagna. </author> <title> Covariance and contravariance: Conflict without a cause. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 17(3):431447, </volume> <month> May </month> <year> 1995. </year>
Reference-contexts: The Java documentation claims that the safety of Java bytecodes can be statically determined at load time. This is not entirely true: the type system uses a covariant <ref> [7] </ref> rule for subtyping arrays, so array stores require run time type checks 5 in addition to the normal array bounds checks. Cast expressions also require runtime checks.
Reference: [8] <institution> CERT Coordination Center. Syslog vulnerability a workaround for sendmail. CERT Advisory CA-95:13, </institution> <month> October </month> <year> 1995. </year> <note> ftp://ftp.cert.org/pub/cert_advisories/CA-95%3A13.syslog. vul. </note>
Reference-contexts: Because sprintf () does not check for buffer overflows, an attacker could overwrite the execution stack, thereby transferring control to arbitrary code. Attackers have exploited the same bug in the Unix syslog () library routine (via sendmail) to take over machines from across the network <ref> [8] </ref>. In later Java releases, all of these calls were fixed in the Java runtime. However, the bytecode disassembler was overlooked all the way through the JDK 1.0 release.
Reference: [9] <author> William R. Cheswick and Steven M. Bellovin. </author> <title> Firewalls and Internet Security: Repelling the Wily Hacker. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Repeated DNS calls by the applet establish a channel between the applet and the attacker's DNS server. This channel also passes through a number of firewalls <ref> [9] </ref>. In HotJava-Alpha, the DNS channel was available even with the security mode set to no network access, although this was fixed in later Java versions. DNS has other security implications; see section 3.5.1 for details. Another third-party channel is available with the URL redirect feature.
Reference: [10] <author> Antony Courtney. Phantom: </author> <title> An interpreted language for distributed programming. </title> <booktitle> In Usenix Conference on Object-Oriented Technologies, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: Such remote code raises serious security issues; a casual web reader should not be concerned about malicious side-effects from visiting a web page. Languages such as Java [21], Safe-Tcl [6], Phantom <ref> [10] </ref>, Juice [14] and Telescript [16] have been proposed for running untrusted code, and each has varying ideas of how to thwart malicious programs. After several years of development inside Sun Microsystems, the Java language was released in mid-1995 as part of Sun's HotJava web browser.
Reference: [11] <author> Drew Dean. </author> <title> The security of static typing with dynamic linking. </title> <booktitle> In Fourth ACM Conference on Computer Communications Security, </booktitle> <address> Zurich, Switzerland, </address> <month> April </month> <year> 1997. </year> <note> http://www.cs.princeton.edu/sip/ pub/ccs4.html. </note>
Reference-contexts: Fundamentally, the job of a ClassLoader is to resolve names to classes as part of Java's dynamic linking. Dynamic linking has subtle interactions with static typechecking. For a formal analysis of this process and some necessary conditions for correctness, see Dean <ref> [11] </ref> for details. 3.7.3 Attacking the SecurityManager Unfortunately, a ClassLoader can load a new SecurityManager that redeclares the SecurityManager's variables as public, violating the requirement that reference monitors be tamperproof. There are four interesting variables in the JDK AppletSecurity class: readACL, writeACL, initACL, and networkMode.
Reference: [12] <author> Sophia Drossopoulou and Susan Eisenbach. </author> <booktitle> Is the Java type system sound? In Proceedings of the Fourth International Workshop on Foundations of Object-Oriented Languages, </booktitle> <address> Paris, </address> <month> January </month> <year> 1997. </year>
Reference-contexts: In Java bytecode, the verifier must show that all possible execution paths lead to the same virtual 9 such as readACL and writeACL, see section 3.7.3. 10 Drossopoulou and Eisenbach are developing a formal semantics for Java <ref> [12] </ref>. 11 A formal definition of the bytecode is under development by Computational Logic, Inc. Similar work is also being done at Digital's Systems Research Center. 12 machine configuration a much more complicated problem, and thus more prone to error.
Reference: [13] <author> Edward W. Felten. </author> <title> Inside risks: Webware security. </title> <journal> Communications of the ACM, </journal> <volume> 40(4), </volume> <month> April </month> <year> 1997. </year>
Reference-contexts: This signature acts as an endorsement of the code. While a complete description of Authenticode is beyond the scope of this paper (see Felten <ref> [13] </ref> or Garfinkel and Spafford [15] for more information), several issues are worth discussing here. Authenticode allows only a binary trust model.
Reference: [14] <author> Michael Franz and Thomas Kistler. </author> <title> A tree-based alternative to Java byte-codes. </title> <booktitle> In Proceedings of the International Workshop on Security and Efficiency Aspects of Java '97, </booktitle> <year> 1997. </year> <note> Also appears as Technical Report 96-58, </note> <institution> Department of Information and Computer Science, University of California, Irvine, </institution> <month> December </month> <year> 1996. </year>
Reference-contexts: Such remote code raises serious security issues; a casual web reader should not be concerned about malicious side-effects from visiting a web page. Languages such as Java [21], Safe-Tcl [6], Phantom [10], Juice <ref> [14] </ref> and Telescript [16] have been proposed for running untrusted code, and each has varying ideas of how to thwart malicious programs. After several years of development inside Sun Microsystems, the Java language was released in mid-1995 as part of Sun's HotJava web browser. <p> Type checking normally occurs in the front end of a compiler, where it is a traversal of the abstract syntax tree [39]. (The Juice system <ref> [14] </ref> works in the same way.) In the traditional case, type checking is compositional: the type correctness of a construct depends upon the current typing context, the type correctness of its subexpressions, and whether the current construct is typable by one of a finite set of rules.
Reference: [15] <author> Simson Garfinkel and Gene Spafford. </author> <title> Web Security and Commerce. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <year> 1997. </year>
Reference-contexts: This signature acts as an endorsement of the code. While a complete description of Authenticode is beyond the scope of this paper (see Felten [13] or Garfinkel and Spafford <ref> [15] </ref> for more information), several issues are worth discussing here. Authenticode allows only a binary trust model.
Reference: [16] <institution> General Magic, Inc., 420 North Mary Ave., </institution> <address> Sunnyvale, CA 94086 USA. </address> <note> The Telescript Language Reference, June 1996. http://www.genmagic.com/Telescript/Documentation/TRM/index.html. </note>
Reference-contexts: Such remote code raises serious security issues; a casual web reader should not be concerned about malicious side-effects from visiting a web page. Languages such as Java [21], Safe-Tcl [6], Phantom [10], Juice [14] and Telescript <ref> [16] </ref> have been proposed for running untrusted code, and each has varying ideas of how to thwart malicious programs. After several years of development inside Sun Microsystems, the Java language was released in mid-1995 as part of Sun's HotJava web browser.
Reference: [17] <author> Steve Gibbons. </author> <type> Personal communication, </type> <month> February </month> <year> 1996. </year>
Reference-contexts: At this point, a rogue applet can exploit a whole legion of known network security problems to break into other nearby machines. This problem was postulated independently by Steve Gibbons <ref> [17] </ref> and by us. To demonstrate this flaw, we produced an applet that exploits an old sendmail hole to run arbitrary Unix commands as user daemon.
Reference: [18] <author> Joseph A. Goguen and Jose Meseguer. </author> <title> Security policies and security models. </title> <booktitle> In Proceedings of the 1982 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 1120, </pages> <year> 1982. </year>
Reference-contexts: Otherwise, an attacker's applet could deliberately sabotage a third-party's applet. More formally, the Java runtime should maintain non-interference <ref> [18, 19] </ref> between unrelated applets. In many environments, it would be unacceptable for an applet to even learn of the existence of another applet. In Netscape Navigator, AppletContext.getApplets () is careful to only return handles to applets on the same web page as the caller.
Reference: [19] <author> Joseph A. Goguen and Jose Meseguer. </author> <title> Unwinding and inference control. </title> <booktitle> In Proceedings of the 1984 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 7586, </pages> <year> 1984. </year>
Reference-contexts: Otherwise, an attacker's applet could deliberately sabotage a third-party's applet. More formally, the Java runtime should maintain non-interference <ref> [18, 19] </ref> between unrelated applets. In many environments, it would be unacceptable for an applet to even learn of the existence of another applet. In Netscape Navigator, AppletContext.getApplets () is careful to only return handles to applets on the same web page as the caller.
Reference: [20] <author> James Gosling. </author> <type> Personal communication, </type> <month> October </month> <year> 1995. </year>
Reference-contexts: Alice views Bob's web page and Charlie's applet establishes a covert channel to Charlie. The applet leaks Alice's information to Charlie. No collusion with Bob is necessary. Sun has said that they consider denial of service attacks to be low-priority problems <ref> [20] </ref>. 3.2 Two vs. Three Party Attacks It is useful to distinguish between two different kinds of attack, which we shall call two-party and three-party. A two-party attack requires that the web server the applet resides on participate in the attack.
Reference: [21] <author> James Gosling, Bill Joy, and Guy Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: Such remote code raises serious security issues; a casual web reader should not be concerned about malicious side-effects from visiting a web page. Languages such as Java <ref> [21] </ref>, Safe-Tcl [6], Phantom [10], Juice [14] and Telescript [16] have been proposed for running untrusted code, and each has varying ideas of how to thwart malicious programs. After several years of development inside Sun Microsystems, the Java language was released in mid-1995 as part of Sun's HotJava web browser. <p> As long as the applet can figure out the file names used by Navigator in its cache, it can execute arbitrary machine code without even needing prior access to the victim's file system. 3.7.2 Superclass Constructors The Java language <ref> [21] </ref> requires that all constructors call either another constructor of the same class, or a superclass constructor as their first action. The system classes ClassLoader, SecurityManager, and FileInputStream all rely on this behavior for their security. <p> The separation of object creation and initialization poses problems. We believe the system could be stronger if it had been designed differently. Language Weaknesses The Java language definition <ref> [21] </ref> has neither a formal semantics nor a formal description of its type system. We do not know what a Java program means, in a formal sense, so we cannot formally reason about Java and the security properties of the Java libraries written in Java.
Reference: [22] <author> James Gosling and Henry McGilton. </author> <title> The Java Language Environment. Sun Microsystems Computer Company, </title> <type> 2550 Garcia Avenue, </type> <institution> Mountain View, </institution> <address> CA 94043 USA, </address> <month> May </month> <year> 1996. </year> <note> http://java.sun. com/doc/language_environment.html. </note>
Reference-contexts: In support of this downloaded code, Java distinguishes remote code from local code. Separate sources 2 of Java bytecode are loaded in separate name spaces to prevent both accidental and malicious name clashes. Bytecode loaded from the local file system is visible to all applets. The documentation <ref> [22] </ref> says the system name space has two special properties: 1. It is shared by all name spaces. 2. <p> Unless otherwise noted, HotJava-Alpha refers to the 1.0 alpha 3 release of the HotJava web browser from Sun Microsystems, Netscape Navigator refers to Netscape Navigator 2.0, Internet Explorer refers to Microsoft Internet Explorer 3.0, and JDK refers to the Java Development Kit, version 1.0, from Sun. 2 While the documentation <ref> [22] </ref> does not define source, it appears to mean the URL prefix of origin. Sun and Netscape have announced plans to include support for digital signatures in future versions of their products. Microsoft has some support for digital signatures. <p> ClassLoaders are the most interesting class to instantiate, as any code loaded by a ClassLoader asks its ClassLoader to resolve any classes it references. This is contrary to the documentation <ref> [22] </ref> that claims the system name space is always searched first; we have verified this difference experimentally. Fortunately for an attacker, ClassLoaders did not have any instance variables, and the ClassLoader constructor only needs to run once, to initialize a variable in the runtime system.
Reference: [23] <author> Lee Hasiuk. </author> <type> Personal communication, </type> <month> February </month> <year> 1996. </year>
Reference-contexts: The language has neither a formal semantics nor a formal description of its type system. 10 The module system is weak, the scoping rules are too liberal, and methods may be called on partially initialized objects <ref> [23] </ref>. The bytecode is in linear form rather than a tree representation, has no formal semantics 11 , has unnaturally typed constructors, and does not enforce the private modifier on code loaded from the local file system. The separation of object creation and initialization poses problems. <p> With properly nested modules, a programmer could limit the visibility of security-critical components. In the present Java system, only access to variables is controlled, not their visibility. Java also allows methods to be called from constructors: these methods may see a partially initialized object instance <ref> [23] </ref>. One nice feature of Java is that an object reference is roughly equivalent to a traditional capability [32]. Because pointers cannot be forged, the possession of an object instance (such as an open file) represents the capability to use that file.
Reference: [24] <author> David Hopwood. </author> <title> Java security bug (applets can load native methods). </title> <journal> RISKS Forum, </journal> <volume> 17(83), </volume> <month> March </month> <year> 1996. </year> <month> ftp://ftp.sri.com/risks/risks-17.83. </month>
Reference-contexts: There are significant differences between the semantics of the Java language and the semantics of the bytecode. First, we discuss David Hopwood's attack <ref> [24] </ref> based on package names. Next, we present our attack that runs arbitrary machine code after compromising the type system. Several flaws in the type system are examined, including two first noted by Tom Cargill. 8 3.7.1 Illegal Package Names Java packages are normally named java.io, java.net, etc. <p> David Hopwood found that if the first character of a package name was /, the Java runtime system would attempt to load code from an absolute path <ref> [24] </ref>, since absolute pathnames begin with a / character on Unix or Windows.
Reference: [25] <author> Wei-Ming Hu. </author> <title> Reducing timing channels with fuzzy time. </title> <booktitle> In Proceedings of the 1991 IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 820, </pages> <year> 1991. </year>
Reference-contexts: Java allows applets to read the system clock, making it possible to benchmark the user's machine. As a Java-enabled web browser may well run on pre-release hardware and/or software, an attacker could learn valuable information. Timing information is also needed for the exploitation of covert timing channels. Fuzzy time <ref> [25] </ref> should be investigated to see if it can mitigate these problems. 3.5 Implementation Errors Some bugs arise from fairly localized errors in the implementation of the browser or the Java subsystem. 3.5.1 DNS Weaknesses A significant problem appeared in the JDK and Netscape Navigator implementation of the policy that an
Reference: [26] <author> Anita K. Jones and Barbara H. Liskov. </author> <title> A language extension for controlling access to shared data. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-2(4):277285, </volume> <month> December </month> <year> 1976. </year> <month> 18 </month>
Reference-contexts: This effort was a failure because the implementors failed to consider all of the consequences of the implementation of one construct: assigned GOTO. This subtle flaw resulted in a complete break of the system. Jones and Liskov describe language support for secure dataflow <ref> [26] </ref>. Rees describes a modern capability system built on top of Scheme [40]. The remainder of this paper is structured as follows.
Reference: [27] <author> Paul A. Karger. </author> <title> Limiting the damage potential of discretionary Trojan horses. </title> <booktitle> In Proceedings of the 1987 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 3237, </pages> <year> 1987. </year>
Reference-contexts: An untrusted applet could call a trusted File Save dialog with no default choice which returns an open handle to the file chosen by the user. This would allow the user to grant authorization for a specific file access without exposing the full file system to an untrusted applet <ref> [27] </ref>. A similar trusted dialog could be used for initiating network connections, as might be used in chat systems or games.
Reference: [28] <author> Mark LaDue. </author> <title> Hostile applets home page. </title> <address> http://www.prism.gatech.edu/gt8830a/ HostileApplets.html. </address>
Reference-contexts: Another attack, first implemented by Mark LaDue, is to open a large number of windows on the screen. This will sometimes crash the machine. LaDue has a web page with many other denial of service attacks <ref> [28] </ref>. There are two twists that can make denial of service attacks more difficult to cope with. First, an attack can be programmed to occur after some time delay, causing the failure to occur when the user is viewing a different web page, thereby masking the source of the attack.
Reference: [29] <author> Butler W. Lampson. </author> <title> Protection. </title> <booktitle> In Proceedings of the Fifth Princeton Symposium on Information Sciences and Systems, </booktitle> <pages> pages 437443, </pages> <institution> Princeton University, </institution> <month> March </month> <year> 1971. </year> <note> Reprinted in Operating Systems Review, 8(1):1824, </note> <month> Jan. </month> <year> 1974. </year>
Reference-contexts: This condition cannot be checked statically. 3 2.1 Java Security Mechanisms In HotJava-Alpha, all of the access controls were done on an ad hoc basis which was clearly insufficient. The beta release of JDK introduced the SecurityManager class, meant to be a reference monitor <ref> [29] </ref>. The SecurityManager defines and implements a security policy, centralizing all access control decisions. All potentially dangerous methods first consult the security manager before executing. Netscape and Microsoft also use this architecture. When the Java runtime system starts up, there is no security manager installed. <p> Web applets, however, cannot be trusted with the full authority granted to a given user, and so require that Java define and implement a protected subsystem with an appropriate security policy. 4.2 Enforcement The Java SecurityManager is intended to be a reference monitor <ref> [29] </ref>. Recall that a reference monitor has three important properties: 1. It is always invoked. 2. It is tamperproof. 3. It is verifiable. Unfortunately, the Java SecurityManager design has weaknesses in all three areas.
Reference: [30] <author> Butler W. Lampson and David D. Redell. </author> <title> Experience with processes and monitors in Mesa. </title> <journal> Communications of the ACM, </journal> <volume> 23(2):105117, </volume> <month> February </month> <year> 1980. </year>
Reference-contexts: Java supplies each class and object with a lock, and provides the synchronized keyword so each class (or instance of a class, as appropriate) can operate as a Mesa-style monitor <ref> [30] </ref>. Java compilers produce a machine-independent bytecode, which may be transmitted across a network and then interpreted or compiled to native code by the Java runtime system. In support of this downloaded code, Java distinguishes remote code from local code.
Reference: [31] <author> Carl E. Landwehr. </author> <title> Formal models for computer security. </title> <journal> Computing Surveys, </journal> <volume> 13(3):247278, </volume> <month> September </month> <year> 1981. </year>
Reference-contexts: This contradicts the first of the Orange Book's Fundamental Computer Security Requirements, namely that There must be an explicit and well-defined security policy enforced by the system.[38] Without such a policy, it is unclear how a secure implementation is supposed to behave <ref> [31] </ref>. In fact, Java has two entirely different uses: as a general purpose programming language, like C++, and as a system for developing untrusted applets on the web. These roles will require vastly different security policies for Java.
Reference: [32] <author> Henry M. Levy. </author> <title> Capability-Based Computer Systems. </title> <publisher> Digital Press, </publisher> <year> 1984. </year>
Reference-contexts: Java also allows methods to be called from constructors: these methods may see a partially initialized object instance [23]. One nice feature of Java is that an object reference is roughly equivalent to a traditional capability <ref> [32] </ref>. Because pointers cannot be forged, the possession of an object instance (such as an open file) represents the capability to use that file. However, the Java runtime libraries are not generally structured around using objects as capabilities.
Reference: [33] <author> Tim Lindholm and Frank Yellin. </author> <title> The Java Virtual Machine Specification. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: While Java does not guarantee a memory layout for objects <ref> [33] </ref>, the current implementations lay out objects in the obvious way: instance variables are in consecutive memory addresses, and packed as in C.
Reference: [34] <author> Gary E. McGraw and Edward W. Felten. </author> <title> Java Security: Hostile Applets, Holes, and Antidotes. </title> <publisher> John Wiley and Sons, </publisher> <year> 1996. </year>
Reference-contexts: A more complete discussion of some of these issues can be found in McGraw and Felten's book <ref> [34] </ref>. 2 Java Semantics Java is similar in many ways to C++[42]. Both provide support for object-oriented programming, share many keywords and other syntactic elements, and can be used to develop standalone applications.
Reference: [35] <author> Robin Milner, Mads Tofte, and Robert Harper. </author> <title> The Definition of Standard ML. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: Java programmers can combine related classes into a package. These packages are similar to name spaces in C++[43], modules in Modula-2 [44], or structures in Standard ML <ref> [35] </ref>. While package names consist of components separated by dots, the package name space is actually flat: scoping rules are not related to the apparent name hierarchy. <p> By having multiple interfaces to a module, a module could declare a richer interface for trusted clients, and a more restrictive interface for untrusted clients. The introduction of parameterized modules, like Standard ML's functors <ref> [35] </ref>, should also be investigated.
Reference: [36] <author> Marianne Mueller. </author> <title> Regarding Java security. </title> <journal> RISKS Forum, </journal> <volume> 17(45), </volume> <month> November </month> <year> 1995. </year> <note> ftp://ftp.sri. com/risks/risks-17.45. </note>
Reference-contexts: Normally, an applet may instruct the browser to load any page on the web. An attacker's server could record the URL as a message, then redirect the browser to the original destination. When we notified Sun about these channels, they said the DNS channel would be fixed <ref> [36] </ref>, but in fact it was still available in JDK and Netscape Navigator. Netscape has since issued a patch (incorporated into 6 Without using digitally signed code. 5 Netscape Navigator 2.01) to fix this problem.
Reference: [37] <author> Marianne Mueller. </author> <type> Personal communication, </type> <month> January </month> <year> 1996. </year>
Reference-contexts: void SetFoo (Foo obj) - obj.x = 1; - // Illegal void SetBar (Bar obj) - obj.x = 1; - // Legal - The definition of protected was the same as C++ in some early versions of Java; it was changed during the beta-test period to patch a security problem <ref> [37] </ref> (see also section 4.2). The Java bytecode runtime system is designed to enforce the language's access semantics. Unlike C++, programs are not permitted to forge a pointer to a function and invoke it directly, nor to forge a pointer to data and access it directly.
Reference: [38] <institution> National Computer Security Center. Department of Defense Trusted Computer System Evaluation Criteria. National Computer Security Center, </institution> <year> 1985. </year>
Reference: [39] <editor> Simon L. Peyton Jones. </editor> <booktitle> The Implementation of Functional Programming Languages. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1987. </year>
Reference-contexts: Type checking normally occurs in the front end of a compiler, where it is a traversal of the abstract syntax tree <ref> [39] </ref>. (The Juice system [14] works in the same way.) In the traditional case, type checking is compositional: the type correctness of a construct depends upon the current typing context, the type correctness of its subexpressions, and whether the current construct is typable by one of a finite set of rules.
Reference: [40] <author> Jonathan A. Rees. </author> <title> A security kernel based on the lambda-calculus. </title> <type> Technical Report A.I. Memo No. 1564, </type> <institution> Massachusetts Institute of Technology, Artificial Intelligence Labortory, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: This subtle flaw resulted in a complete break of the system. Jones and Liskov describe language support for secure dataflow [26]. Rees describes a modern capability system built on top of Scheme <ref> [40] </ref>. The remainder of this paper is structured as follows.
Reference: [41] <author> Jim Roskind. </author> <title> Java and security. In Netscape Internet Developer Conference, Netscape Communications Corp., 501 E. </title> <address> Middlefield Road, Mountain View, CA 94043 USA, </address> <month> March </month> <year> 1996. </year> <note> http://developer. netscape.com/misc/developer/conference/proceedings/j4/index.html. </note>
Reference-contexts: The integrity of the runtime system can also be compromised by applets. To compound these problems, no audit trail exists to reconstruct an attack afterward. In short, the Java runtime system is not a high assurance system. 13 4.1 Policy The present documents on Netscape Navigator <ref> [41] </ref>, Microsoft Internet Explorer, and HotJava do not formally define a security policy.
Reference: [42] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Langauge. </title> <publisher> Addison-Wesley, </publisher> <address> 2nd edition, </address> <year> 1991. </year>
Reference: [43] <author> Bjarne Stroustrup. </author> <title> The Design and Evolution of C++. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference: [44] <author> Niklaus Wirth. </author> <title> Programming in Modula-2. </title> <publisher> Springer-Verlag, </publisher> <address> 2nd edition, </address> <year> 1983. </year>
Reference-contexts: This nesting depth is then used to make access control decisions in JDK 1.0.x and derived systems (including Netscape Navigator and Internet Explorer). Java programmers can combine related classes into a package. These packages are similar to name spaces in C++[43], modules in Modula-2 <ref> [44] </ref>, or structures in Standard ML [35]. While package names consist of components separated by dots, the package name space is actually flat: scoping rules are not related to the apparent name hierarchy.

References-found: 44

