URL: http://www.isi.edu/teamcore/tambe/papers/95/AT/icmas2.ps
Refering-URL: http://www.isi.edu/teamcore/tambe/agent.html
Root-URL: http://www.isi.edu
Email: tambe@isi.edu  
Title: Recursive Agent and Agent-group Tracking in a Real-time, Dynamic Environment  
Author: Milind Tambe 
Web: WWW:http://www.isi.edu/soar/tambe  
Address: 4676 Admiralty Way, Marina del Rey, CA 90292  
Affiliation: Information Sciences Institute and Computer Science Department University of Southern California  
Date: 1995 1  
Note: International Conf. on Multi-agent Systems  
Abstract: Agent tracking is an important capability an intelligent agent requires for interacting with other agents. It involves monitoring the observable actions of other agents as well as inferring their unobserved actions or high-level goals and behaviors. This paper focuses on a key challenge for agent tracking: recursive tracking of individuals or groups of agents. The paper first introduces an approach for tracking recursive agent models. To tame the resultant growth in the tracking effort and aid real-time performance, the paper then presents model sharing, an optimization that involves sharing the effort of tracking multiple models. Such shared models are dynamically unshared as needed | in effect, a model is selectively tracked if it is dissimilar enough to require unsharing. The paper also discusses the application of recursive modeling in service of deception, and the impact of sensor imperfections. This investigation is based on our on-going effort to build intelligent pilot agents for a real-world synthetic air-combat environment. 1 
Abstract-found: 1
Intro-found: 1
Reference: <author> Anderson, J. R.; Boyle, C. F.; Corbett, A. T.; and Lewis, M. W. </author> <year> 1990. </year> <title> Cognitive modeling and intelligent tutoring. </title> <booktitle> Artificial Intelligence 42 </booktitle> <pages> 7-49. </pages>
Reference: <author> Azarewicz, J.; Fala, G.; Fink, R.; and Heithecker, C. </author> <year> 1986. </year> <title> Plan recognition for airborne tactical decision making. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> 805-811. </pages> <address> Menlo Park, Calif.: </address> <publisher> AAAI press. </publisher>
Reference: <author> Bates, J.; Loyall, A. B.; and Reilly, W. S. </author> <year> 1992. </year> <title> Integrating reactivity, goals and emotions in a broad agent. </title> <type> Technical Report CMU-CS-92-142, </type> <institution> School of Computer Science, Carnegie Mellon University. </institution>
Reference: <author> Calder, R. B.; Smith, J. E.; Courtemanche, A. J.; Mar, J. M. F.; and Ceranowicz, A. Z. </author> <year> 1993. </year> <title> Modsaf behavior simulation and control. </title> <booktitle> In Proceedings of the Conference on Computer Generated Forces and Behavioral Representation. </booktitle>
Reference-contexts: Our investigation is based on an on-going effort to build intelligent pilot agents for simulated air-combat (Tambe et al. 1995). These pilot agents execute missions in a simulation environment called ModSAF, that is being commercially developed for the military <ref> (Calder et al. 1993) </ref>. ModSAF provides a synthetic yet real-world setting for studying a broad range of challenging issues in agent tracking.
Reference: <author> Gmytrasiewicz, P. J.; Durfee, E. H.; and Wehe, D. K. </author> <year> 1991. </year> <title> A decision theoretic approach to co-ordinating multi-agent interactions. </title> <booktitle> In Proceedings of International Joint Conference on Artificial Intelligence. </booktitle>
Reference: <author> Hill, R., and Johnson, W. L. </author> <year> 1994. </year> <title> Situated plan attribution for intelligent tutoring. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence. </booktitle> <address> Menlo Park, Calif.: </address> <publisher> AAAI press. </publisher>
Reference-contexts: Previous work on optimizations for agent tracking has mostly focused on intra-model (within a single model) optimizations, e.g., heuristic pruning of irrelevant operators (Ward 1991) restricted backtrack search (Tambe & Rosenbloom 1995), and abstraction <ref> (Hill & Johnson 1994) </ref>. In contrast, this paper proposes inter-model (across multiple models) optimizations. It introduces an inter-model optimization called model sharing, which involves sharing the effort of tracking multiple models. Shared models are dynamically unshared when required.
Reference: <author> Kautz, A., and Allen, J. F. </author> <year> 1986. </year> <title> Generalized plan recognition. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> 32-37. </pages> <address> Menlo Park, Calif.: </address> <publisher> AAAI press. </publisher>
Reference: <author> Kuniyoshi, Y.; Rougeaux, S.; Ishii, M.; Kita, N.; Sakane, S.; and Kakikura, M. </author> <year> 1994. </year> <title> Cooperation by observation the framework and the basic task pattern. </title> <booktitle> In Proceedings of the IEEE International Conference on Robotics and Automation. </booktitle>
Reference: <author> Newell, A. </author> <year> 1990. </year> <title> Unified Theories of Cognition. </title> <address> Cam-bridge, Mass.: </address> <publisher> Harvard Univ. Press. </publisher>
Reference: <author> Rosenbloom, P. S.; Laird, J. E.; Newell, A.; ; and McCarl, R. </author> <year> 1991. </year> <title> A preliminary analysis of the soar architecture as a basis for general intelligence. </title> <journal> Artificial Intelligence 47(1-3):289-325. </journal>
Reference-contexts: State L will denote the global state shared by all these operators. Together, state L and the operator L hierarchy constitute L's model of its present dynamic self, referred to as model L . Model L supports L's flexible/reactive behaviors, given Soar's architectural apparatus for operator selection and termination <ref> (Rosenbloom et al. 1991) </ref>. L reuses this apparatus in tracking its opponents' behaviors. Thus, L uses a hierarchy such as the one in represents L's model of D's current operators in the situation in Figure 1-d. These operators are denoted with the subscript LD.
Reference: <author> Shapiro, S. C., and Rapaport, W. J. </author> <year> 1991. </year> <title> Models and minds: knowledge representation for natural language competence. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Figure 3 shows the resulting shared models with an unshared missile range. Such sharing among models is related to the sharing of belief spaces in the SNePS belief representation system <ref> (Shapiro & Rapaport 1991) </ref>. One key difference is dynamic model unsharing. In particular, while some of aspects of the models are static (e.g., the statically unshared missile ranges above), other aspects, particularly those relating to operators, are highly dynamic.
Reference: <author> Tambe, M., and Rosenbloom, P. S. </author> <year> 1995. </year> <title> Resc: An approach to agent tracking in a real-time, dynamic environment. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI). </booktitle>
Reference-contexts: Agent tracking, in contrast, can involve tracking a broader mix of goal-driven and reactive behaviors <ref> (Tambe & Rosenbloom 1995) </ref>. This capability is important for dynamic environments where agents do not rigidly follow plans. This paper focuses on the issues of recursive agent and agent-group tracking. Our investigation is based on an on-going effort to build intelligent pilot agents for simulated air-combat (Tambe et al. 1995). <p> This capability is important for dynamic environments where agents do not rigidly follow plans. This paper focuses on the issues of recursive agent and agent-group tracking. Our investigation is based on an on-going effort to build intelligent pilot agents for simulated air-combat <ref> (Tambe et al. 1995) </ref>. These pilot agents execute missions in a simulation environment called ModSAF, that is being commercially developed for the military (Calder et al. 1993). ModSAF provides a synthetic yet real-world setting for studying a broad range of challenging issues in agent tracking. <p> Thus, for executing recursive models (and for a practical investigation of recursive tracking), optimizations for real-time performance are critical. Previous work on optimizations for agent tracking has mostly focused on intra-model (within a single model) optimizations, e.g., heuristic pruning of irrelevant operators (Ward 1991) restricted backtrack search <ref> (Tambe & Rosenbloom 1995) </ref>, and abstraction (Hill & Johnson 1994). In contrast, this paper proposes inter-model (across multiple models) optimizations. It introduces an inter-model optimization called model sharing, which involves sharing the effort of tracking multiple models. Shared models are dynamically unshared when required. <p> They also assume ideal sensor conditions, where agents can perfectly sense each others' maneuvers, unless otherwise mentioned. Furthermore, the descriptions are provided in concrete terms using implementations of a pilot agent in a system called TacAir-Soar <ref> (Tambe et al. 1995) </ref>, built using the Soar architecture (Newell 1990; Rosenbloom et al. 1991). <p> To resolve such ambiguity, L adopts several techniques, such as assuming the worst-case hypothesis about its enemy, which in this case is that D is beaming rather than running away. We will not discuss RESC's ambiguity resolution any further in this paper (see <ref> (Tambe & Rosenbloom 1995) </ref> for more details). Thus, with the RESC approach, L tracks D's behaviors by continuously executing the operator LD hierarchy, and matching it against D's actions. <p> Such deliberate unsharing is another type of deceptive strategy that among many others, is one we have not examined in detail so far. 6 Experimental Results To understand the effectiveness of the agent tracking method introduced here, we have implemented an experimental variant of TacAir-Soar <ref> (Tambe et al. 1995) </ref>. The original TacAir-Soar system contains about 2000 rules, and automated pilots based on it have participated in combat exercises with expert human pilots (Tambe et al. 1995). <p> far. 6 Experimental Results To understand the effectiveness of the agent tracking method introduced here, we have implemented an experimental variant of TacAir-Soar <ref> (Tambe et al. 1995) </ref>. The original TacAir-Soar system contains about 2000 rules, and automated pilots based on it have participated in combat exercises with expert human pilots (Tambe et al. 1995). Our experimental version | created since it employs an experimental agent tracking technology | contains about 950 of these rules. This version can recursively track actions of individuals or groups of opponents while using the model sharing optimizations, and engaging in deception. <p> Our investigation was based on intelligent pilot agents in a real-world synthetic air-combat environment, already used in a large-scale operational military exercise <ref> (Tambe et al. 1995) </ref>.
Reference: <author> Tambe, M.; Johnson, W. L.; Jones, R.; Koss, F.; Laird, J. E.; Rosenbloom, P. S.; and Schwamb, K. </author> <year> 1995. </year> <title> Intelligent agents for interactive simulation environments. </title> <journal> AI Magazine 16(1). </journal>
Reference-contexts: Agent tracking, in contrast, can involve tracking a broader mix of goal-driven and reactive behaviors <ref> (Tambe & Rosenbloom 1995) </ref>. This capability is important for dynamic environments where agents do not rigidly follow plans. This paper focuses on the issues of recursive agent and agent-group tracking. Our investigation is based on an on-going effort to build intelligent pilot agents for simulated air-combat (Tambe et al. 1995). <p> This capability is important for dynamic environments where agents do not rigidly follow plans. This paper focuses on the issues of recursive agent and agent-group tracking. Our investigation is based on an on-going effort to build intelligent pilot agents for simulated air-combat <ref> (Tambe et al. 1995) </ref>. These pilot agents execute missions in a simulation environment called ModSAF, that is being commercially developed for the military (Calder et al. 1993). ModSAF provides a synthetic yet real-world setting for studying a broad range of challenging issues in agent tracking. <p> Thus, for executing recursive models (and for a practical investigation of recursive tracking), optimizations for real-time performance are critical. Previous work on optimizations for agent tracking has mostly focused on intra-model (within a single model) optimizations, e.g., heuristic pruning of irrelevant operators (Ward 1991) restricted backtrack search <ref> (Tambe & Rosenbloom 1995) </ref>, and abstraction (Hill & Johnson 1994). In contrast, this paper proposes inter-model (across multiple models) optimizations. It introduces an inter-model optimization called model sharing, which involves sharing the effort of tracking multiple models. Shared models are dynamically unshared when required. <p> They also assume ideal sensor conditions, where agents can perfectly sense each others' maneuvers, unless otherwise mentioned. Furthermore, the descriptions are provided in concrete terms using implementations of a pilot agent in a system called TacAir-Soar <ref> (Tambe et al. 1995) </ref>, built using the Soar architecture (Newell 1990; Rosenbloom et al. 1991). <p> To resolve such ambiguity, L adopts several techniques, such as assuming the worst-case hypothesis about its enemy, which in this case is that D is beaming rather than running away. We will not discuss RESC's ambiguity resolution any further in this paper (see <ref> (Tambe & Rosenbloom 1995) </ref> for more details). Thus, with the RESC approach, L tracks D's behaviors by continuously executing the operator LD hierarchy, and matching it against D's actions. <p> Such deliberate unsharing is another type of deceptive strategy that among many others, is one we have not examined in detail so far. 6 Experimental Results To understand the effectiveness of the agent tracking method introduced here, we have implemented an experimental variant of TacAir-Soar <ref> (Tambe et al. 1995) </ref>. The original TacAir-Soar system contains about 2000 rules, and automated pilots based on it have participated in combat exercises with expert human pilots (Tambe et al. 1995). <p> far. 6 Experimental Results To understand the effectiveness of the agent tracking method introduced here, we have implemented an experimental variant of TacAir-Soar <ref> (Tambe et al. 1995) </ref>. The original TacAir-Soar system contains about 2000 rules, and automated pilots based on it have participated in combat exercises with expert human pilots (Tambe et al. 1995). Our experimental version | created since it employs an experimental agent tracking technology | contains about 950 of these rules. This version can recursively track actions of individuals or groups of opponents while using the model sharing optimizations, and engaging in deception. <p> Our investigation was based on intelligent pilot agents in a real-world synthetic air-combat environment, already used in a large-scale operational military exercise <ref> (Tambe et al. 1995) </ref>.
Reference: <author> Ward, B. </author> <year> 1991. </year> <title> ET-Soar: Toward an ITS for Theory-Based Representations. </title> <type> Ph.D. Dissertation, </type> <institution> School of Computer Science, Carnegie Mellon Univ. </institution>
Reference-contexts: Thus, for executing recursive models (and for a practical investigation of recursive tracking), optimizations for real-time performance are critical. Previous work on optimizations for agent tracking has mostly focused on intra-model (within a single model) optimizations, e.g., heuristic pruning of irrelevant operators <ref> (Ward 1991) </ref> restricted backtrack search (Tambe & Rosenbloom 1995), and abstraction (Hill & Johnson 1994). In contrast, this paper proposes inter-model (across multiple models) optimizations. It introduces an inter-model optimization called model sharing, which involves sharing the effort of tracking multiple models. Shared models are dynamically unshared when required.
Reference: <author> Wilks, Y., and Ballim, A. </author> <year> 1987. </year> <title> Multiple agents and hueristic ascription of belief. </title> <booktitle> In Proceedings of International Joint Conference on Artificial Intelligence. </booktitle>
References-found: 15

