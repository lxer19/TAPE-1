URL: ftp://cse.ogi.edu/pub/tech-reports/1997/97-010.ps.gz
Refering-URL: ftp://cse.ogi.edu/pub/tech-reports/README.html
Root-URL: http://www.cse.ogi.edu
Email: -walidt, sheard-@cse.ogi.edu  
Title: Facets of Multi-Stage Computation in Software Architecture  
Author: Walid Taha Tim Sheard 
Keyword: Architectural design languages, program generation, multi-stage computation, reflection.  
Note: The papers treatment is rigorous, but not formal.  
Address: 20,000 NW Walker Rd, Portland, Oregon 92779, USA  
Affiliation: Oregon Graduate Institute  
Abstract: The goal of this paper is to demonstrate that an important, naturally-occurring, and disciplined form of reflection in software systems is readily expressible at the architectural level by using a new architectural operator (connector) called Engage. We begin by extending a simple data-flow architectural description language with this operator. We illustrate the expressive power of Engage by using it to describe both familiar and experimental software architectures. In doing so, we also demonstrate the prevalence of a reflective organizational pattern called multi-stage computation. We are not aware of any other architectural description language that captures the essential functionality of the Engage operator. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Alfred V. Aho, Ravi Sethi, Jeffrey D. Ullman, </author> <booktitle> Compilers: Principles, Techniques, and Tools, </booktitle> <publisher> Addison Wesley, </publisher> <year> 1986. </year>
Reference: 2. <author> Robert Allen and David Garlan, </author> <title> A Formal Approach to Software Architecture, </title> <journal> ACM Trans. on Software Engineering and Methodology, </journal> <volume> vol. 4, no. 4, </volume> <pages> pp. 319-364, </pages> <year> 1995. </year>
Reference: 3. <author> Robert Allen and David Garlan, </author> <title> A Formal Basis for Architectural Connection, </title> <journal> Transactions on Software Engineering and Methodology , July 1997. </journal>
Reference-contexts: Based only on intuition, this assumption still remains to be validated. To this end, we are trying to better understand how the Engage operator interacts with other architectural connectors <ref> [3] </ref>. 8 CONCLUSIONS We have demonstrated that an important dynamic aspect of software systems is easily expressible at the architectural level. In doing so, we have also illustrated the variety and diversity of multistage architectures, starting from compilers and going to partial evaluation and program generation systems.
Reference: 4. <author> Crispin Cowan, Tito Autrey, Charles Krasic, Calton Pu and Jonathan Walpole. </author> <title> Fast Concurrent Linking for an Adaptive Operating System, </title> <booktitle> Proc. International Conference on Configurable Distributed Systems (ICCDS'96), </booktitle> <month> May 6-8, </month> <year> 1996, </year> <institution> Annapolis MD. </institution>
Reference: 5. <author> Rowan Davies and Frank Pfenning, </author> <title> A Modal Analysis of Staged Computation, </title> <booktitle> In 23rd Annual ACM Symposium on Principles of Programming languages (POPL'96), </booktitle> <address> St. Petersburg Beach, Florida, </address> <month> January, </month> <year> 1996. </year>
Reference: 6. <author> David Garlan and Dewayne Perry, </author> <title> Introduction to the Special Issue on Software Architecture, </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> April </month> <year> 1995. </year>
Reference: 7. <author> Robert Glueck and Jesper Jorgensen, </author> <title> Fast Binding-Time Analysis for MultiLevel Specialization, </title> <booktitle> PSI-96: Andrei Ershov Second International Memorial Conference, Perspectives of System Informatics, Lecture Notes in Computer Science, </booktitle> <year> 1996. </year>
Reference: 8. <author> Paola Inverardi and Alex Wolf, </author> <title> Formal Specification and Analysis of Software Architectures Using the Chemical Abstract Machine Model, </title> <journal> IEEE Transactions on Software Engineering, Special Issue on Software Architecture, </journal> <volume> 21 </volume> (4):373-386, April 1995. 
Reference: 9. <author> David C. Luckham, James Vera, </author> <booktitle> An Event-Based Architecture Definition Language , IEEE Transactions on Software Engineering, </booktitle> <volume> Vol 21, No 9, pp.717-734. </volume> <month> Sep. </month> <year> 1995 </year> <month> , 21 pages. </month>
Reference: 10. <author> Neil D. Jones and Carsten K Gomard and Peter Sestoft, </author> <title> Partial Evaluation and Automatic Program Generation, </title> <publisher> Prentice-Hall, </publisher> <year> 1993. </year>
Reference: 11. <author> Richard B. Kieburtz, Laura McKinney et al, </author> <title> A Software Engineering Experiment in Software Component Generation, </title> <booktitle> Proc. International Conference on Software Engineering, </booktitle> <year> 1996. </year>
Reference: 12. <author> Mark Leone and Peter Lee, </author> <title> Deferred Compilation: The Automation of Runtime Code Generation, </title> <type> Technical Report CMU-CS-93-225, </type> <institution> Carnegie Melon University, </institution> <month> December, </month> <year> 1993. </year>
Reference: 13. <author> Dewayne E. Perry and Alexander L. Wolf. </author> <title> Foundations for the Study of Software Architecture, </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <month> 17:4 (October </month> <year> 1992). </year>
Reference: 14. <author> Jeff Magee, Naranker Dulay, Susan Eisenbach, and Jeff Kramer, </author> <title> Specifying Distributed Software Architectures, </title> <booktitle> In Proceedings of the Fifth European Software Engineering Conference, </booktitle> <address> ESEC'95, </address> <month> September </month> <year> 1995. </year>
Reference: 15. <author> David MacKenzi, Autoconf: </author> <title> Creating Automatic Configuration Scripts, </title> <address> Edition 2.8, </address> <month> January </month> <year> 1996. </year> <note> Available from &lt;ftp://prep.ai.mit.edu/pub/gnu/&gt; </note>
Reference: 16. <author> Mark Moriconi and Xiaolei Qian, </author> <title> Correctness and Composition of Software Architectures, </title> <booktitle> Proceedings of ACM SIGSOFT'94: Symposium on Foundations of Software Engineering, </booktitle> <address> New Orleans, Louisiana, </address> <publisher> December,1994, </publisher> <pages> pp. 164-174. </pages>
Reference-contexts: We intend to make the criteria for this requirement more objective as we develop more experience applying GDL. Employing a formalism, such as that employed by Moriconi and Qian <ref> [16] </ref>, will be a good first step in this direction. Finally, we have assumed that the issue of reflection is orthogonal to the presence of other forms of connectors at the architectural level. Based only on intuition, this assumption still remains to be validated.
Reference: 17. <author> Flemming Nielson and Hanne Riis Nielson, </author> <title> A Prescriptive Framework for Designing MultiLevel Lambda-Calculi, </title> <booktitle> In Proc. Partial Evaluation and Semantics-Based Program Manipulation 97, </booktitle> <address> Amsterdam, June 1997. </address> <publisher> ACM Press. </publisher>
Reference: 18. <author> Mary Shaw and David Garlan, </author> <title> Software Architecture: Perspectives on an Emerging Discipline, </title> <publisher> Prentice Hall, </publisher> <year> 1996. </year>
Reference: 19. <author> Yannis Smaragdakis and Don Batory, DiSTiL: </author> <title> A Transformation Library for Data Structures, </title> <booktitle> USENIX Conference on DomainSpecific Languages, </booktitle> <month> October </month> <year> 1997. </year>
Reference: 20. <author> Walid Taha and Tim Sheard, </author> <title> MultiStage Programming with Explicit Annotations, </title> <booktitle> In Proc. Partial Evaluation and Semantics-Based Program Manipulation 97, </booktitle> <address> Amsterdam, </address> <month> June </month> <year> 1997. </year> <note> ACM Press. Also available from &lt;http://www.cse.ogi.edu/~walidt&gt; </note>
Reference-contexts: introduction to the recent literature can be found in <ref> [20] </ref>. We are actively pursuing language support for effectively implementing such architectures. Our most recent efforts have been focused on formalizing the semantics and finding appropriate typesystems to allow safe (yet still powerful) multistage capabilities.
References-found: 20

