URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-93-25.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Preemptive Scheduling of Tasks with Reliability Requirements in Distributed Hard Real-Time Systems  
Author: Yingfeng Oh and Sang H. Son 
Abstract: Technical Report No. CS-93-25 May 24, 1993 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Audsley, </author> <title> N.C. Deadline monotonic scheduling, </title> <type> Doctoral Thesis, </type> <institution> Dept. Computer Science, University of York, </institution> <year> 1990. </year>
Reference: [2] <author> Avizienis, A. </author> <title> The N-version approach to fault-tolerant software, </title> <journal> IEEE Transactions on Software Engineering 11, </journal> <year> 1985, </year> <pages> pp. 1491-1501. </pages>
Reference: [3] <author> Balaji, S. et al. </author> <title> Workload redistribution for fault-tolerance in a hard real-time distributed computing system, </title> <publisher> FTCS-19, Chicago, Illinois, </publisher> <pages> pp. 366-373, </pages> <month> June </month> <year> 1989. </year> <month> 18 </month>
Reference: [4] <author> Bannister, J.A. and K. S. Trivedi. </author> <title> Task allocation in fault-tolerant distributed systems, </title> <journal> Acta Informatica, </journal> <volume> 20, </volume> <publisher> Springer-Verlag, </publisher> <year> 1983, </year> <pages> pp. 261-281. </pages>
Reference-contexts: Second Algorithm The performance of Algorithm 1 is somewhat out of our expectation, given the well-balanced result of (9m) / (8 (m - r + 1)), where m is the number of processors to be allocated, and r is the number of copies for each task, by Bannister and Trivedi <ref> [4] </ref>. <p> Even more improvement is obtained when all tasks have the same number of versions, and all versions of a task have the computation time requirement. This is illustrated in Figure 11. The result obtained by Bannister and Trivedi <ref> [4] </ref> does make sense under these situations. In summary, our simulation studies show that 1. The order of assigning tasks to processors affects the performance Algorithm 1 signifi cantly, regardless of which condition is used. 2.
Reference: [5] <author> Coffman, E.G., Jr. </author> <title> Computer and Job Shop Scheduling Theory, </title> <address> New York: </address> <publisher> Wiley, </publisher> <year> 1975. </year>
Reference: [6] <author> Coffman, E.G., Jr., M.R. Garey, and D.S. Johnson. </author> <title> An application of bin-packing to multiprocessor scheduling, </title> <journal> SIAM J. Computing 7, </journal> <year> 1978, </year> <pages> pp. 1-17. </pages>
Reference: [7] <author> Coffman, E.G. Jr., </author> <title> M.R. Garey, D.S. Johnson. Approximate algorithms for bin packing - An updated survey, In Algorithm Design for Computer System Design, </title> <editor> G. Ausiello, M. Lucertini, and P. Serafini (Eds), </editor> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985, </year> <pages> pp. 49-106. </pages>
Reference-contexts: A new algorithm which uses a different scheduling strategy is thus developed to obtain better performance. This new algorithm schedules tasks in the similar manner as bin-packing. Bin-packing algorithms <ref> [7] </ref> are a class of well-studied heuristic algorithms, which perform well for the assignment of items into fixed-size bins. The First-Fit (FF) and First-Fit-Decreasing (FFD) algorithms have very low asymptotic bounds. For FF, the asymptotic bound is 1.7, while for FFD, it is 11/9 [14].
Reference: [8] <author> Davari, S., and S.K. Dhall. </author> <title> An on line algorithm for real-time tasks allocation, </title> <booktitle> IEEE Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1986. </year>
Reference: [9] <author> Davari, S., and S.K. Dhall. </author> <title> On a periodic real-time task allocation problem, </title> <booktitle> Proc. of 19th Annual International Confernce on System Sciences, </booktitle> <year> 1986, </year> <pages> pp. 133-141. </pages>
Reference: [10] <author> Dhall, S.K., and C.L. Liu. </author> <title> On a real-time scheduling problem, </title> <journal> Operations Research, </journal> <volume> Vol. 26, </volume> <year> 1978, </year> <pages> pp. 127-140. </pages>
Reference: [11] <author> Garey, </author> <title> M.R. and D.S. Johnson. Computers and Intractability: A guide to the theory of NP-completeness, W.H. </title> <publisher> Freeman and Company, </publisher> <address> NY, </address> <year> 1978. </year>
Reference: [12] <author> Hopkins, A.L. et al. </author> <title> FTMP-A highly reliable fault-tolerant multiprocessor for aircraft, </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> Vol. 66, No. 10, </volume> <month> October, </month> <year> 1978. </year>
Reference: [13] <author> Johnson, B.W. </author> <title> Design and Analysis of Fault Tolerant Digital Systems, </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference: [14] <author> Johnson, </author> <title> D.S. Near-Optimal Bin Packing Algorithms, </title> <type> Doctoral Thesis, </type> <institution> MIT, </institution> <year> 1973 </year>
Reference-contexts: Bin-packing algorithms [7] are a class of well-studied heuristic algorithms, which perform well for the assignment of items into fixed-size bins. The First-Fit (FF) and First-Fit-Decreasing (FFD) algorithms have very low asymptotic bounds. For FF, the asymptotic bound is 1.7, while for FFD, it is 11/9 <ref> [14] </ref>. Since each item in the bin-packing problem is independent of other items, it can be assigned to any bin. This does not confirm to our problem definition. In other words, none of the bin-packing algorithms can be directly used to solve the TFT scheduling algorithm.
Reference: [15] <author> Kieckhafer, R.M., C.J. Walter, </author> <title> A.M. Finn, and P.M. Thambidurai. THe MAFT Architecture for distributed fault tolerance, </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. 37, No. 4, </volume> <month> April </month> <year> 1988, </year> <pages> pp. 398-405. </pages>
Reference: [16] <author> Knight, J.C. and P.E. Ammann. </author> <title> Design fault tolerance, Reliability Engineering and System Safety 32, </title> <booktitle> 1991, </booktitle> <pages> pp. 25-49. </pages>
Reference: [17] <author> Krishna, C.M. and K.C Shin. </author> <title> On scheduling tasks with a quick recovery from failure, </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35(5), </volume> <month> May </month> <year> 1986, </year> <pages> pp. 448-454. </pages>
Reference: [18] <author> Lehoczky, J.P., L. Sha, and J.K. Stronider. </author> <title> Enhanced aperiodic responsiveness in hard real-time environments, </title> <journal> IEEE RTSS, </journal> <year> 1987, </year> <pages> pp. 261-270. </pages>
Reference-contexts: The strategy to schedule a task system which has both periodic and sporadic tasks, is to schedule the periodic tasks first to meet their deadlines, then the sporadic tasks. Several algorithms <ref> [18] </ref> [33] [34] have also been proposed to integrate sporadic or n 2 1-( ) 17 aperiodic tasks into the scheduling of periodic tasks. They are Background, Polling, Priority Exchange, Extended Priority Exchange, Sporadic Server, and Deferrable Server.
Reference: [19] <author> Lehoczky, J., L. Sha, and Y. Ding. </author> <title> The rate monotonic scheduling algorithm: Exact characterization and average case behavior, </title> <journal> IEEE RTSS, </journal> <year> 1989, </year> <pages> pp. 166-171. </pages>
Reference: [20] <author> Lehoczky, J.P. </author> <title> Fixed priority scheduling of periodic task sets with arbitrary deadlines, </title> <journal> IEEE RTSS, </journal> <year> 1990, </year> <pages> pp. 201-209. </pages>
Reference: [21] <author> Leung, J.Y.T. and J. Whitehead. </author> <title> On the complexity of fixed-priority scheduling of periodic, real-time tasks, </title> <journal> Performance Evaluation, </journal> <volume> Vol. 2, </volume> <pages> pp. 237-250, </pages> <year> 1982. </year>
Reference: [22] <author> Liestman, A.L. and R.H. Campbell. </author> <title> A fault tolerant scheduling problem, </title> <journal> IEEE Transac 19 tions on Software Engineering, </journal> <volume> SE-12(11), </volume> <month> November </month> <year> 1986, </year> <pages> pp. 1089-1095. </pages>
Reference: [23] <author> Liu, C.L., and J. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard real-time environment, </title> <type> JACM 10(1), </type> <year> 1973. </year>
Reference: [24] <author> Liu. J.W.S., K-J. Lin, W-K. Shih, A. Yu, A-Y. Chung, and W. </author> <title> Zhao Algorithms for scheduling imprecise computations, </title> <journal> Computer, </journal> <volume> Vol. 24, No. 5, </volume> <month> May </month> <year> 1991, </year> <pages> pp. 58-69. </pages>
Reference: [25] <author> Oh, Y., and S.H. Son. </author> <title> Multiprocessor support for real-time fault-tolerant scheduling, </title> <booktitle> IEEE 1991 Workshop on Architectural Aspects of Real-Time Systems, </booktitle> <address> San Antonio, Texas, </address> <pages> pp. 76-80, </pages> <month> Dec. 3, </month> <year> 1991. </year>
Reference: [26] <author> Oh, Y., and S.H. Son. </author> <title> An algorithm for real-time fault-tolerant scheduling in multiprocessor systems, </title> <booktitle> 4th Euromicro Workshop on Real-Time Systems, </booktitle> <address> Athens, Greece, </address> <month> June </month> <year> 1992. </year>
Reference: [27] <author> Pradhan, D.K. </author> <title> Fault-Tolerant Computing -- Theory and Techniques, Volumes I and II, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1986. </year>
Reference: [28] <author> Serlin, O. </author> <title> Scheduling of time critical processes, </title> <booktitle> Proceedings of the Spring Joint Computers Conference 40, </booktitle> <year> 1972, </year> <pages> pp. 925-932. </pages>
Reference: [29] <author> Sha, L., J.P. Lehoczky, and R. Rajkumar. </author> <title> Solution for some practical problems in prioritized preemptive scheduling, </title> <journal> IEEE RTSS, </journal> <year> 1986, </year> <pages> pp. 181-191. </pages>
Reference-contexts: One case is how to schedule a set of periodic, multi-version tasks which synchronize in order to achieve timely-fault-tolerance. Other cases include: (1) task deadlines are not equal to task periods; (2) urgent tasks have longer periods. The deadline transformation algorithms <ref> [29] </ref> can be used. One of limitations of our results is that the precedence constraints of tasks are not considered.
Reference: [30] <author> Sha, L., and J.B. Goodenough. </author> <title> Real-time scheduling theory and Ada, </title> <booktitle> Computer, </booktitle> <month> April </month> <year> 1990, </year> <pages> pp. 53-65. </pages>
Reference: [31] <author> Shih, W-K., J.W.S. Liu, and C.L. Liu. </author> <title> Scheduling periodic jobs with deferred deadlines, </title> <type> Report No. </type> <institution> UIUCDCS-R-90-1583, University of Illinois, </institution> <year> 1990. </year>
Reference: [32] <author> Shin, K.G., G. Koob, and F. Jahanian. </author> <title> Fault-tolerance in real-time systems, </title> <journal> IEEE Real-Time Systems Newsletter, </journal> <volume> Vol. 7, No. 3, </volume> <year> 1991, </year> <pages> pp. 28-34. </pages>
Reference: [33] <author> Spector, A., and D. Gifford. </author> <title> The space shuttle primary computer system, </title> <journal> CACM, </journal> <month> Sep-tember </month> <year> 1984, </year> <pages> pp. 874-900. </pages>
Reference-contexts: The strategy to schedule a task system which has both periodic and sporadic tasks, is to schedule the periodic tasks first to meet their deadlines, then the sporadic tasks. Several algorithms [18] <ref> [33] </ref> [34] have also been proposed to integrate sporadic or n 2 1-( ) 17 aperiodic tasks into the scheduling of periodic tasks. They are Background, Polling, Priority Exchange, Extended Priority Exchange, Sporadic Server, and Deferrable Server.
Reference: [34] <author> Sprunt, B., J.P. Lehoczky, and L. Sha. </author> <title> Exploiting unused periodic time for aperiodic service using the extended priority exchange algorithm, </title> <journal> IEEE RTSS, </journal> <year> 1988, </year> <pages> pp. 251-258. </pages>
Reference-contexts: The strategy to schedule a task system which has both periodic and sporadic tasks, is to schedule the periodic tasks first to meet their deadlines, then the sporadic tasks. Several algorithms [18] [33] <ref> [34] </ref> have also been proposed to integrate sporadic or n 2 1-( ) 17 aperiodic tasks into the scheduling of periodic tasks. They are Background, Polling, Priority Exchange, Extended Priority Exchange, Sporadic Server, and Deferrable Server.
Reference: [35] <author> Sprunt, B. </author> <title> Aperiodic Task Scheduling for Real-Time Systems, </title> <type> Doctoral Thesis, </type> <institution> Carnegie Melon University, </institution> <year> 1990. </year>
Reference: [36] <author> Stankovic, </author> <title> J.A. </title> <booktitle> Misconception of real-time computing, IEEE Computer, </booktitle> <month> October </month> <year> 1988, </year> <pages> pp. 10-19. </pages>
Reference: [37] <author> Wensley, et.al. SIFT: </author> <title> design and analysis of a fault-tolerant computer for aircraft control, </title> <journal> Proc.of the IEEE, </journal> <volume> Vol. 66, No. 10, </volume> <month> October </month> <year> 1978, </year> <pages> pp. </pages> <month> 1240-1255. </month> <title> 20 for a task have the same computation times) </title>
References-found: 37

