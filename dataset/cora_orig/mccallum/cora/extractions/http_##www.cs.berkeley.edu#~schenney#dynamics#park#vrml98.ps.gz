URL: http://www.cs.berkeley.edu/~schenney/dynamics/park/vrml98.ps.gz
Refering-URL: http://www.cs.berkeley.edu/~schenney/dynamics/park/index.html
Root-URL: http://www.cs.berkeley.edu
Title: Efficient Dynamics Modeling for VRML and Java  
Author: Stephen Chenney Jeffrey Ichnowski David Forsyth 
Keyword: CR Descriptors: I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism Virtual reality; I.6.5 [Simulation and Modeling]: Model Development Modeling methodologies I.6.8 [Simulation and Modeling]: Types of Simulation Animation  
Address: Berkeley  
Affiliation: University of California at  
Date: Feb 16-19 1998  
Note: To appear in the 1998 Symposium on the Virtual Reality Modeling Language, Monterey, CA,  
Abstract: Using dynamical systems rather than keyframing to animate a world is a desirable yet computationally expensive approach. We present techniques for culling dynamical systems that avoid unnecessary computation, and describe tools for automating much of the required work. Based on qualitative observations of how viewer's predict dynamical state over time, we identify methods for generating state while ensuring consistency, which we define as ensuring that a viewer's predictions are satisfied. Our tools take as input a description of a dynamical system, and produce an alternate description that may be efficiently culled. We also describe an interactive modeler in which authors attach dynamic variables to geometric transformations, allowing the modular re-use of dynamical systems. Together, our tools enable large numbers of complex dynamic models to be efficiently and easily included in a VRML world while maintaining high frame rates. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David Baraff. </author> <title> Analytical methods for dynamic simulation of non-penetrating rigid bodies. </title> <journal> In Computer Graphics, </journal> <volume> volume 23(3), </volume> <pages> pages 233-232. </pages> <publisher> ACM SIG-GRAPH, </publisher> <address> July 1989. Boston, Massachusetts. </address>
Reference-contexts: able to generate state at twice the rate the renderer consumes it. 3.2 Finding the Range The range of the system is important because it restricts the region of state space we must concern ourselves with, and it allows us to re-scale each of the state variables to the range <ref> [0; 1] </ref>. The latter is necessary because the neural network approximations we use that map [0; 1] inputs to [0; 1] outputs. Some variables may be bound by the author in the input description, particularly angular variables (which are bounded by (; ]). <p> Range The range of the system is important because it restricts the region of state space we must concern ourselves with, and it allows us to re-scale each of the state variables to the range <ref> [0; 1] </ref>. The latter is necessary because the neural network approximations we use that map [0; 1] inputs to [0; 1] outputs. Some variables may be bound by the author in the input description, particularly angular variables (which are bounded by (; ]). <p> the system is important because it restricts the region of state space we must concern ourselves with, and it allows us to re-scale each of the state variables to the range <ref> [0; 1] </ref>. The latter is necessary because the neural network approximations we use that map [0; 1] inputs to [0; 1] outputs. Some variables may be bound by the author in the input description, particularly angular variables (which are bounded by (; ]).
Reference: [2] <author> Christopher M. Bishop. </author> <title> Neural Networks for Pattern Recognition. </title> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference: [3] <author> Deborah A. Carlson and Jessica K. Hodgins. </author> <title> Simulation levels of detail for real-time animation. </title> <booktitle> In Graphics Interface '97, </booktitle> <pages> pages 1-8, </pages> <address> 1997. Kelowna, BC, Canada, </address> <month> 21-23 May </month> <year> 1997. </year>
Reference-contexts: Sudarsky and Gotsman [12] demonstrate mechanisms for incorporating dynamic models into a BSP tree visibility scheme. They assume models that are closed-form functions of time, both to generate space-time bounding volumes and to generate new state quickly. This excludes most interesting models. Papers by Carlson and Hodgins <ref> [3] </ref> and Setas et. al. [11] have shown how to achieve speedups by applying level of detail techniques to a dynamic game environment and a forest environment respectively. For all the previous results, the models and approximations used were hand generated for a specific environment.
Reference: [4] <author> Stephen Chenney and David Forsyth. </author> <title> View-dependent culling of dynamic systems in virtual environments. </title> <booktitle> In Proceedings 1997 Symposium on Interactive 3D Graphics, </booktitle> <pages> pages 55-58, </pages> <address> April 1997. Providence, RI, </address> <month> April 27-30. </month>
Reference-contexts: If a world is designed as multiple files which are loaded in memory only as required, then it must be possible to cull dynamics, because the script will not even be present in memory if the subsection of the world it animates is not visible. In a previous paper <ref> [4] </ref> we showed how to build complex dynamical models that can be culled using any visibility scheme. That paper demonstrated significant and scalable speedups, allowing worlds of arbitrary size to be built without sacrificing dynamic content or frame rate.
Reference: [5] <author> Jessica K Hodgins, Wayne L Wooten, David C Brogan, and James F O'Brien. </author> <title> Animating human figures. </title> <booktitle> In Computer Graphics: Proceedings of SIGGRAPH 95, </booktitle> <pages> pages 71-78, </pages> <month> August </month> <year> 1995. </year> <institution> Los Angeles, </institution> <address> CA. </address>
Reference: [6] <author> Chieh Su Hsu. </author> <title> Cell-to-cell mapping: a method of global analysis for nonlinear systems. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1987. </year>
Reference-contexts: Given that a viewer cannot distinguish differences in state smaller than the size of a cell, we assume that the distribution on points within a single cell is uniform. This approach is similar to that of cell-to-cell mapping <ref> [6] </ref> as a means of analyzing dynamical systems, but we seek to discover different types of system behaviour.
Reference: [7] <author> R. L. Kautz and Bret M. Huggard. </author> <title> Chaos at the amusement park: Dynamics of a tilt-a-whirl. </title> <journal> American Journal of Physics, </journal> <volume> 62(1) </volume> <pages> 59-66, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: The governing equation of motion for the car, derived from Lagrange's equation and making use of small angle approx imations (following <ref> [7] </ref>) is: r 2 + _ gr 2 (ff sin fi cos ) + r 1 r 2 _ sin = 0 ff = ff 0 ff 1 cos 3 In modeling this system, we use one DynamicsVariable class for , ff and fi.
Reference: [8] <author> Michael D. McCool and Peter K. Harwood. </author> <title> Probability trees. </title> <booktitle> In Graphics Interface '97, </booktitle> <pages> pages 37-46, </pages> <year> 1997. </year>
Reference-contexts: We represent cells using a probability tree data structure <ref> [8] </ref>.
Reference: [9] <author> Brian Mirtich. </author> <title> Impulse-based Dynamics for Rigid-Body Simulation. </title> <type> PhD thesis, </type> <institution> University of California, Berke-ley, </institution> <year> 1996. </year>
Reference: [10] <author> William H. Press, Saul T. Teukolsky, William T. Vet-terling, and Brian P. Flannery. </author> <title> Numerical Recipes in C: </title> <booktitle> The Art of Scientific Computing. </booktitle> <publisher> Cambridge University Press, </publisher> <address> Cambridge, England, 2nd edition, </address> <year> 1992. </year>
Reference-contexts: We use another system for and _ , which is coded as a DynamicsSystem, and which we analyze for culling. is an angular variable, so it is bounded by (; ]. The evaluation code uses a numerical integration routine (taken from <ref> [10] </ref>) to generate new state. it's probability. Darker cells indicate that the system's state is more likely to be in that cell. Note that many cells are completely white, indicating that the system never enters a state within that cell.
Reference: [11] <author> M. N. Setas, M. R. Gomes, and J. M. Rebord~ao. </author> <title> Dynamic simulation of natural environments in virtual reality. </title> <booktitle> In SIVE95: The First Workshop on Simulation and Interaction in Virtual Environments, </booktitle> <month> July </month> <year> 1995. </year> <institution> University of Iowa, </institution> <address> Iowa City, IA. </address>
Reference-contexts: They assume models that are closed-form functions of time, both to generate space-time bounding volumes and to generate new state quickly. This excludes most interesting models. Papers by Carlson and Hodgins [3] and Setas et. al. <ref> [11] </ref> have shown how to achieve speedups by applying level of detail techniques to a dynamic game environment and a forest environment respectively. For all the previous results, the models and approximations used were hand generated for a specific environment.
Reference: [12] <author> Oded Sudarsky and Craig Gotsman. </author> <title> Output-sensitive visibility algorithms for dynamic scenes with applications to virtual reality. </title> <booktitle> In EUROGRAPHICS '96, </booktitle> <volume> volume 15(3), </volume> <year> 1996. </year>
Reference-contexts: In a previous paper [4] we showed how to build complex dynamical models that can be culled using any visibility scheme. That paper demonstrated significant and scalable speedups, allowing worlds of arbitrary size to be built without sacrificing dynamic content or frame rate. Sudarsky and Gotsman <ref> [12] </ref> demonstrate mechanisms for incorporating dynamic models into a BSP tree visibility scheme. They assume models that are closed-form functions of time, both to generate space-time bounding volumes and to generate new state quickly. This excludes most interesting models.
Reference: [13] <author> Xiaoyuan Tu and Demetri Terzopoulos. </author> <title> Artificial fishes: Physics, locomotion, perception, behavior. </title> <booktitle> In Computer Graphics: Proceedings of SIGGRAPH 94, </booktitle> <pages> pages 43-50, </pages> <year> 1994. </year>
References-found: 13

