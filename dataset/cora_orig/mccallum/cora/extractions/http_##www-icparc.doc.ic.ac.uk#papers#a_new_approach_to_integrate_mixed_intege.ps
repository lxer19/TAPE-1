URL: http://www-icparc.doc.ic.ac.uk/papers/a_new_approach_to_integrate_mixed_intege.ps
Refering-URL: http://www-icparc.doc.ic.ac.uk/papers.html
Root-URL: 
Email: E-mail: frr5, mgw, mh10g@doc.ic.ac.uk  
Title: A New Approach to Integrate Mixed Integer Programming with CLP  
Author: Robert Rodosek, Mark G. Wallace and Mozafar T. Hajian 
Address: London SW7 2AZ, England  
Affiliation: IC-Parc, Imperial College  
Abstract: This paper represents an integration of MIP and CLP by combining components of the CLP system ECLiPSe and the MIP system CPLEX. Our approach is introduced in three stages. Firstly we present an automatic transformation which maps general CLP programs onto such CLP programs that any disjunction is eliminated in favour of auxiliary binary variables. Secondly we present improvements of this mapping by using a committed choice operator and translations of pre-defined non-linear constraints. Thirdly we introduce a new hybrid algorithm which reduces the search space of the problem progressively by calling finite domain propagation in ECLiPSe as well as dual simplex in CPLEX. The advantages of this integration are illustrated by solving efficiently difficult sample problems, which the CLP solver and the MIP solver alone are not able to solve in reasonable time.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Barth, A. Bockmayer. </author> <title> Modelling Mixed-Integer Optimisation Problems in Constraint Logic Programming. </title> <type> In Technical Report, </type> <institution> MPI-I-95-2-011, Max-Planck-Institut fur Informatik, Saarbrucken, </institution> <year> 1995. </year>
Reference-contexts: Hadjiconstantinou et al. [5] developed a programming language using logic operators (e.g. ifthen, atleast) with a suggested translation of them into a conjunction of equalities and inequalities. This approach represents a "bottom-up" modelling where the problem variables are only binary variables. Barth and Bockmayer <ref> [1] </ref> demonstrated how to derive linear constraints from a class of non-linear 0-1 inequalities without adding auxiliary variables to represent the same set of integer solutions. We use CLP as a "top-down" modelling language.
Reference: [2] <author> N. L. Biggs. </author> <title> Discrete Mathematics. </title> <publisher> Oxford Science Publications, </publisher> <year> 1994. </year>
Reference-contexts: Pigeon-Hole Problem <ref> [2] </ref>: The problem is to show that it is not possible to put n + 1 pigeons into n pigeon-holes such that at most one pigeon is in each pigeon-hole. (We consider the example with 10 pigeons.) These benchmarks are chosen for a number of reasons: Smith et al. [16] have
Reference: [3] <author> CPLEX. </author> <title> Using the CPLEX Callable Library, Version 3.0. CPLEX Optimization, </title> <publisher> Inc., </publisher> <year> 1994. </year>
Reference-contexts: We use CLP as a "top-down" modelling language. Our starting point is a theorem stating that all non-recursive Horn clause programs can be transformed (in linear time) into MIP models. Thus CLP can be used simply as a modelling language for MIP solvers such as CPLEX <ref> [3] </ref>. This is the topic of section 2. The simple idea of using CLP as a modelling language for MIP has two limitations. Firstly the translation approach does tend to introduce extra variables into the MIP model, which can result in unnecessarily large and hard to solve MIP models.
Reference: [4] <author> M. Dincbas, P. Van Hentenryck, H. Simonis, A. Aggoun, T. Graf, F. Berthier. </author> <title> The Constraint Logic Programming Language CHIP. </title> <booktitle> In Proceedings of the 5th Generation Computer Systems (FGCS'88), Tokyo, </booktitle> <pages> pp. 693-702, </pages> <year> 1988. </year>
Reference-contexts: 1 INTRODUCTION The CLP Scheme by Jaffar and Lassez [9] outlines a theory of constraint programming over a single constraint domain. Practical constraint programming systems, however, incorporate several solvers. As early as 1990 the CHIP system included syntactic unification, finite domain propagation, a simplex solver and Boolean unification <ref> [4] </ref>. This paper explores the integration of just two of those solvers: finite domain propagation and simplex. Henceforth when we write CLP we refer to systems supporting both these solvers.
Reference: [5] <author> E. Hadjiconstantinou, C. Lucas, G. Mitra, S. Moody. </author> <title> Tools for Reformulating Logical Forms Into Zero-One Mixed Integer Programs. </title> <journal> European Journal of Operational Research, </journal> <volume> 00, </volume> <pages> pp. 1-15, </pages> <year> 1993. </year>
Reference-contexts: Our implementation contrasts with previous CLP systems in two respects: * It provides a tight coupling to a commercial MIP system (CPLEX). * It allows the finite domain solver and the simplex solver to share both variables and constraints. Hadjiconstantinou et al. <ref> [5] </ref> developed a programming language using logic operators (e.g. ifthen, atleast) with a suggested translation of them into a conjunction of equalities and inequalities. This approach represents a "bottom-up" modelling where the problem variables are only binary variables.
Reference: [6] <author> M. T. Hajian, H. El-Sakkout, M. Wallace, J. M. Lever and E. B. Richards. </author> <title> Towards a Closer Integration of Finite Domain Propagation and Simplex-Based Algorithm. </title> <type> In Technical Report, </type> <institution> IC-Parc, Imperial College, </institution> <address> London, </address> <year> 1995. </year>
Reference-contexts: Many practioners would be suspicious of this approach, doubting the efficiency of the resulting MIP model. However our experience has shown quite the contrary. We tackled an industrial fleet scheduling application using CLP and MIP <ref> [6] </ref>. The CLP model was very nice, but CLP's branch and bound did not, within days of computing, produce the optimal solution.
Reference: [7] <author> P. V. Hentenryck. </author> <title> Constraint Satisfaction in Logic Programming. Logic Programming Series. </title> <publisher> MIT Press, </publisher> <address> Cambridge, </address> <year> 1989. </year>
Reference-contexts: A solution of a program with goal p (Args) is defined by an assignment of values to the variables of Args returned by the usual evaluation of CLP programs <ref> [7] </ref>. Theorem 2.1 If p (Args) is a goal in the language of a program P , then it has the same set of solutions when evaluated against P and against gen (P ). <p> The CLP-solver is a constructive search strategy where only local constraint propagation (i.e. the FD-propagation) is used. A solution is found through enumeration, where values from the domains are assigned to the variables, while ensuring that the constraints remain consistent, until all the variables have been given a value <ref> [7] </ref>. The MIP solver is another constructive search strategy where only global constraint propagation (i.e. the simplex algorithm) is used. A solution is derived by the Branch and Bound technique using the optimal solution of the continuous relaxed problem [18]. <p> Step 5 Choose a new value for v, otherwise backtrack to Step 1. Step 6 Compute the solution s of the continuous relaxed subproblem using simplex. If an infeasibility is recognised, then go to Step 5, else go to Step 2. The algorithm instantiates the most-constrained <ref> [7] </ref> variable v by using the nearest integer number to the real value s (v) where s is the optimal solution of the relaxed problem. Simplex is called only if variable v is instantiated by a value different from s (v).
Reference: [8] <author> K. L. Hoffman, M. Padberg. </author> <title> Solving Airline Crew-Scheduling Problems by Branch-and-Cut. </title> <type> In Technical Report, </type> <institution> George Mason University and New York University, USA, </institution> <year> 1992. </year>
Reference-contexts: Set Partitioning Problem <ref> [8] </ref>: The problem is to collect a set M of subsets of N , M 2 N , such that they are pairwise disjoint, their union is N , and the sum of the weights of the subsets is minimal. (We consider the example with 197 subsets over 17 elements [8].) <p> <ref> [8] </ref>: The problem is to collect a set M of subsets of N , M 2 N , such that they are pairwise disjoint, their union is N , and the sum of the weights of the subsets is minimal. (We consider the example with 197 subsets over 17 elements [8].) 5.
Reference: [9] <author> J. Jaffar and J-L. Lassez. </author> <title> Constraint Logic Programming. </title> <booktitle> In Proceedings of the 14th ACM Symposium on Principles of Programming Languages, Munich, </booktitle> <pages> pp. 111-119, </pages> <year> 1987. </year>
Reference-contexts: 1 INTRODUCTION The CLP Scheme by Jaffar and Lassez <ref> [9] </ref> outlines a theory of constraint programming over a single constraint domain. Practical constraint programming systems, however, incorporate several solvers. As early as 1990 the CHIP system included syntactic unification, finite domain propagation, a simplex solver and Boolean unification [4].
Reference: [10] <author> A. D. Kelly, A. Macdonald, K. Mariott, H. Sondergaard, P. J. Stuckey, R. H. C. Yap. </author> <title> An Optimizing Compiler for CLP(R). </title> <booktitle> In Proceedings of the First International Conference on Principles and Practice of Constraint Programming, </booktitle> <address> Cassis, </address> <year> 1995. </year>
Reference-contexts: This is possible within our framework because the translation has enabled us to post all the linear constraints at the root of the search tree: the search is now reduced to the labelling (or alternatively domain splitting) of integer variables. Unlike CLP (R) <ref> [10] </ref>, therefore, we do not require a linear constraint solver that can handled the incremental posting of constraints. In section 5, we report on five sets of experiments we have carried out using the combined solver.
Reference: [11] <author> J. Little, K. Darby-Dowman. </author> <title> The Significance of Constraint Logic Programming to Operational Research. </title> <type> In Technical Report, </type> <institution> Brunel University, Department of Mathematics and Statistics, Brunel University, </institution> <address> Uxbridge, UK, </address> <year> 1995. </year>
Reference-contexts: Additional constraints are imposed by the capacities of the host yachts and the crew sizes of the guests. The problem is to minimise the number of host boats. 2. Generalised Assignment Problem <ref> [11] </ref>: The problem arises in the context of producing specified numbers of different types of telecommunication cabinets over a fixed time period. Each cabinet type requires a different set of elementary sequential operations, each taking the same time to be carried out. <p> Although a solution with 13 hosts is derived quickly, constraint programming has difficulties in recognising the optimal solution. On the other hand, simplex recognises already the infeasibility for 12 hosts. Little and Darby-Dowman <ref> [11] </ref> have shown that the good performance of the CLP solver, compared to the MIP solver, on the Generalised Assignment Problem is due to size of problems and, less obviously, to the degree to which effective local constraint propagation can take place.
Reference: [12] <author> M. J. Maher. </author> <title> Logic Semantics for a Class of Committed-Choice Programs. </title> <booktitle> In Proceedings of the ICLP, Melbourne, </booktitle> <pages> pp. 858-876, </pages> <year> 1987. </year>
Reference-contexts: Secondly there are many problems for which the CLP system outperforms MIP solvers, rather than the other way around. In such cases the translation is counter-productive. In section 3 we address the first problem by introducing guards into the CLP model, as in the ALPS language of Maher <ref> [12] </ref>, and the popular cc framework of Saraswat [15]. For unguarded CLP clauses, the translation requires auxiliary variables to capture the implicit disjunction, but for guarded rules no such auxiliary variables are needed. <p> Another example is a recursive CLP program which defines a linear constraint between every two variables of a list containing k variables. If the program has no guards, then the 2 Maher <ref> [12] </ref> presents a class of languages ALPS and some results which formalise these observations. translation introduces k (k + 1)=2 auxiliary variables.
Reference: [13] <author> J. Puget. </author> <title> A Comparison Between Constraint Programming and Integer Programming. Extended Abstract of the Applied Mathematical Programming and Modelling Conference, </title> <institution> Brunel University, </institution> <address> Uxbridge, UK, </address> <year> 1995. </year>
Reference: [14] <author> R. Rodosek. </author> <title> Translating Constraint Logic Programs to Mixed Integer Programs on Different Models of the N-Queens Problem. </title> <type> In Technical Report, </type> <institution> IC-Parc, Imperial College, </institution> <address> London, </address> <year> 1996. </year>
Reference-contexts: The most common integer variables in MIP models are 0-1 variables [17]. On the other hand, with local constraint propagation on the finite domains of variables, a better reduction is usually achieved on the original pre-defined CLP constraints <ref> [14] </ref>. To solve a given problem using both local and global propagation during the search, we define two stores of constraints. The CLP-store is handled by local propagation and the MIP-store is handled by global propagation.
Reference: [15] <author> V. A. Saraswat. </author> <title> Concurrent Constraint Programming. </title> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: In such cases the translation is counter-productive. In section 3 we address the first problem by introducing guards into the CLP model, as in the ALPS language of Maher [12], and the popular cc framework of Saraswat <ref> [15] </ref>. For unguarded CLP clauses, the translation requires auxiliary variables to capture the implicit disjunction, but for guarded rules no such auxiliary variables are needed.
Reference: [16] <author> B. M. Smith, S. C. Brailsford, P. M. Hubbard, H. P. Williams. </author> <title> The Progressive Party Problem: Integer Linear Programming and Constraint Programming Compared. </title> <booktitle> In Proceedings of the First International Conference on Principles and Practice of Constraint Programming, </booktitle> <address> Cassis, </address> <year> 1995. </year>
Reference-contexts: These experiments show that the combination offers genuine practical advantages over the MIP solver and over the CLP solver. For example we use a single program both to find the optimum, and to prove optimality, in the "progressive party problem" <ref> [16] </ref>. Finally, section 6 concludes the paper. 2 BASIC TRANSLATION RULES We use CLP as a modelling language for the CLP solver as well as the MIP solver. Many practioners would be suspicious of this approach, doubting the efficiency of the resulting MIP model. <p> A comparison between the MIP, CLP and CLP&simplex solvers on five problems is given in the following section. 5 EMPIRICAL RESULTS We consider five problems which are difficult for the CLP or MIP solver. 1. Progressive Party Problem <ref> [16] </ref>: The problem arises in the context of organising a "progressive party" at a yachting rally with 42 yachts. Some yachts are to be designated hosts; the crews of the remaining yachts visit the hosts for six successive half-hour periods. <p> Problem [2]: The problem is to show that it is not possible to put n + 1 pigeons into n pigeon-holes such that at most one pigeon is in each pigeon-hole. (We consider the example with 10 pigeons.) These benchmarks are chosen for a number of reasons: Smith et al. <ref> [16] </ref> have shown that the difference in the performance of the CLP solver versus the MIP solver on the Progressive Party Problem is particularly marked.
Reference: [17] <author> H. P. Williams. </author> <title> Model Building in Mathematical Programming. </title> <publisher> John Wiley and Sons, </publisher> <year> 1990. </year>
Reference-contexts: For such constraints the user defines a translation to linear constraints. However, a good performance of local and global propagation is dependent on the properties of the constraints. The most common integer variables in MIP models are 0-1 variables <ref> [17] </ref>. On the other hand, with local constraint propagation on the finite domains of variables, a better reduction is usually achieved on the original pre-defined CLP constraints [14]. To solve a given problem using both local and global propagation during the search, we define two stores of constraints.
Reference: [18] <author> H. P. Williams. </author> <title> Model Solving in Mathematical Programming. </title> <publisher> John Wiley and Sons, </publisher> <year> 1993. </year>
Reference-contexts: The MIP solver is another constructive search strategy where only global constraint propagation (i.e. the simplex algorithm) is used. A solution is derived by the Branch and Bound technique using the optimal solution of the continuous relaxed problem <ref> [18] </ref>. The relaxed problem is simply defined by replacing integer and binary type constraints in the MIP-store by real type constraints. Instead of an implementation of simplex in ECLiPSe, the linear constraints of the MIP-store are put to CPLEX.
References-found: 18

