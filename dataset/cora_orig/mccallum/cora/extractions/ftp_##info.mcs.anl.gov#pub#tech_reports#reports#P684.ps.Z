URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P684.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts97.htm
Root-URL: http://www.mcs.anl.gov
Title: The Hot List Strategy  
Author: Larry Wos with Gail W. Pieper 
Keyword: automated reasoning programs, hot list strategy, OTTER  
Address: Argonne, IL 60439  
Affiliation: Mathematics and Computer Science Division Argonne National Laboratory  
Abstract: Experimentation strongly suggests that, for attacking deep questions and hard problems with the assistance of an automated reasoning program, the more effective paradigms rely on the retention of deduced information. A significant obstacle ordinarily presented by such a paradigm is the deduction and retention of one or more needed conclusions whose complexity sharply delays their consideration. To mitigate the severity of the cited obstacle, I formulated and feature in this article the hot list strategy. The hot list strategy asks the researcher to choose, usually from among the input statements characterizing the problem under study, one or more statements that are conjectured to play a key role for assignment completion. The chosen statements|conjectured to merit revisiting, again and again|are placed in an input list of statements, called the hot list. When an automated reasoning program has decided to retain a new conclusion C|before any other statement is chosen to initiate conclusion drawing|the presence of a nonempty hot list (with an appropriate assignment of the input parameter known as heat) causes each inference rule in use to be applied to C together with the appropriate number of members of the hot list. Members of the hot list are used to complete applications of inference rules and not to initiate applications. The use of the hot list strategy thus enables an automated reasoning program to briefly consider a newly retained conclusion whose complexity would otherwise prevent its use for perhaps many CPU-hours. To give evidence of the value of the strategy, I focus on four contexts: (1) dramatically reducing the CPU time required to reach a desired goal, (2) finding a proof of a theorem that had previously resisted all but the more inventive automated attempts, (3) discovering a proof that is more elegant than previously known, and (4) answering a question that had steadfastly eluded researchers relying on an automated reasoning program. I also discuss a related strategy, the dynamic hot list strategy (formulated by my colleague W. McCune), that enables the program during a run to augment the contents of the hot list. In the Appendix, I give useful input files and interesting proofs. Because of frequent requests to do so, I include challenge problems to consider, commentary on my approach to experimentation and research, and suggestions to guide one in the use of McCune's automated reasoning program OTTER. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Boyer, R., and Moore, J, </author> <title> A Computational Logic. </title> <address> New York: </address> <publisher> Academic Press, </publisher> <year> 1979. </year>
Reference-contexts: Among the more effective approaches in which new information is accrued are the computational logic paradigm and the clause language paradigm [14, 15, 18]. The former provides the basis for the Boyer-Moore program <ref> [1, 2] </ref> (mainly used for program verification), and the latter (in the Argonne variant) provides the basis for McCune's OTTER [7, 8].
Reference: [2] <author> Boyer, R. S., and Moore, J S., </author> <title> A Computational Logic Handbook, 2nd ed., </title> <address> New York: </address> <note> Academic Press, 1998 (also Web information ftp://ftp.cs.utexas.edu/pub/boyer/nqthm/index.html). </note>
Reference-contexts: Among the more effective approaches in which new information is accrued are the computational logic paradigm and the clause language paradigm [14, 15, 18]. The former provides the basis for the Boyer-Moore program <ref> [1, 2] </ref> (mainly used for program verification), and the latter (in the Argonne variant) provides the basis for McCune's OTTER [7, 8].
Reference: [3] <editor> Henkin, L., Monk, J., and Tarski, A., </editor> <title> Cylindric Algebras, Part I, </title> <publisher> North-Holland, </publisher> <address> Ams-terdam, </address> <year> 1971. </year>
Reference-contexts: Third, and so intriguing, the question of whether every Robbins algebra is a Boolean algebra was open until McCune with his program EQP answered it in the affirmative [9]; in fact, Tarski and his students failed to answer the question. The question is posed in <ref> [3] </ref>. My focus here is on RAT5, a theorem that provides a splendid challenge for automated reasoning programs, especially those that do not offer AC-unification or induction.
Reference: [4] <author> Kalman, J., </author> <title> "A shortest single axiom for the classical equivalential calculus", </title> <journal> Notre Dame J. Formal Logic 19, </journal> <month> 141-144 </month> <year> (1978). </year>
Reference-contexts: I give Meredith's proof in the Appendix. As one sees, the inference rule used in the study is condensed detachment, used by Kalman in his landmark study of equivalential calculus <ref> [4, 5] </ref>; hyperresolution is used. Typically, in such investigations, the only clauses used to initiate applications of an inference rule are unit clauses.
Reference: [5] <author> Kalman, J., </author> <title> "Condensed detachment as a rule of inference", </title> <journal> Studia Logica 42, </journal> <month> 443-451 </month> <year> (1983). </year>
Reference-contexts: I give Meredith's proof in the Appendix. As one sees, the inference rule used in the study is condensed detachment, used by Kalman in his landmark study of equivalential calculus <ref> [4, 5] </ref>; hyperresolution is used. Typically, in such investigations, the only clauses used to initiate applications of an inference rule are unit clauses.
Reference: [6] <author> Lusk, E., and Overbeek, R., </author> <title> The Automated Reasoning System ITP, </title> <type> Technical Report ANL-84-27, </type> <institution> Argonne National Laboratory, Argonne, Illinois, </institution> <year> 1984. </year>
Reference-contexts: For historical interest, I now correct an error found in some of my earlier writings. Specifically, OTTER was not the first program to offer the hot list strategy. Rather, the strategy was first offered in the program ITP <ref> [6] </ref> in the mid-1980s.
Reference: [7] <author> McCune, W., </author> <title> OTTER 2.0 Users Guide, </title> <type> Technical Report ANL-90/9, </type> <institution> Argonne National Laboratory, Argonne, Illinois, </institution> <year> 1990. </year>
Reference-contexts: The former provides the basis for the Boyer-Moore program [1, 2] (mainly used for program verification), and the latter (in the Argonne variant) provides the basis for McCune's OTTER <ref> [7, 8] </ref>.
Reference: [8] <author> McCune, W., </author> <title> OTTER 3.0 Reference Manual and Guide, </title> <type> Technical Report ANL-94/6, </type> <institution> Argonne National Laboratory, Argonne, Illinois, </institution> <year> 1994. </year>
Reference-contexts: The former provides the basis for the Boyer-Moore program [1, 2] (mainly used for program verification), and the latter (in the Argonne variant) provides the basis for McCune's OTTER <ref> [7, 8] </ref>.
Reference: [9] <author> McCune, W., </author> <title> "Solution of the Robbins problem", </title> <journal> J. </journal> <note> Automated Reasoning, accepted for publication, 1997. 34 </note>
Reference-contexts: Third, and so intriguing, the question of whether every Robbins algebra is a Boolean algebra was open until McCune with his program EQP answered it in the affirmative <ref> [9] </ref>; in fact, Tarski and his students failed to answer the question. The question is posed in [3]. My focus here is on RAT5, a theorem that provides a splendid challenge for automated reasoning programs, especially those that do not offer AC-unification or induction.
Reference: [10] <author> Meredith, C. A., </author> <title> "Single axioms for the systems (C,N), (C,0), and (A,N) of the two--valued propositional calculus", </title> <journal> J. Computing Systems 1, </journal> <month> 155-164 </month> <year> (1953). </year>
Reference-contexts: P (i (x,i (n (x),y))). P (i (n (n (x)),x)). P (i (x,n (n (x)))). P (i (i (n (x),x),x)). end_of_list. The theorem under study asserts that Meredith's axiom is a single axiom for two-valued sentential (or propositional) calculus; see <ref> [10] </ref>. I give Meredith's proof in the Appendix. As one sees, the inference rule used in the study is condensed detachment, used by Kalman in his landmark study of equivalential calculus [4, 5]; hyperresolution is used.
Reference: [11] <author> Veroff, R., and Wos, L., </author> <title> "The linked inference principle, I: The formal treatment", </title> <journal> J. Automated Reasoning 8, </journal> <volume> no. 2, </volume> <month> 213-274 (April </month> <year> 1992). </year>
Reference-contexts: If associative unification without commutativity is desired, a clause for associativity is included in the hot list, and no clause for commutativity is included. 2.4 Linked Inference Rules Use of the hot list strategy can also (in effect) partially substitute for access to linked inference rules <ref> [11, 26] </ref>.
Reference: [12] <author> Winker, S., </author> <title> "Robbins algebra: Conditions that make a near-Boolean algebra Boolean", </title> <journal> J. Automated Reasoning 6, </journal> <volume> no. 4, </volume> <month> 465-489 (December </month> <year> 1990). </year>
Reference-contexts: The theorem was first proved by Winker using induction <ref> [12, 13] </ref>; McCune later obtained a proof with AC-unification. My goal, for years, has been to prove the theorem without induction and without AC-unification. In 1996, I made yet another attempt.
Reference: [13] <author> Winker, S., </author> <title> "Absorption and idempotency criteria for a problem in near-Boolean algebras", </title> <journal> J. Algebra 153, </journal> <volume> no. 1, </volume> <month> 414-423 (December </month> <year> 1992). </year>
Reference-contexts: The theorem was first proved by Winker using induction <ref> [12, 13] </ref>; McCune later obtained a proof with AC-unification. My goal, for years, has been to prove the theorem without induction and without AC-unification. In 1996, I made yet another attempt.
Reference: [14] <author> Wos, L., </author> <title> Automated Reasoning: 33 Basic Research Problems. </title> <address> Englewood Cliffs, N.J.: </address> <publisher> Prentice-Hall, </publisher> <year> 1987. </year>
Reference-contexts: Department of Energy, under Contract W-31-109-Eng-38. 1 the most effective approaches where no new information is retained are based on Prolog technology. Among the more effective approaches in which new information is accrued are the computational logic paradigm and the clause language paradigm <ref> [14, 15, 18] </ref>. The former provides the basis for the Boyer-Moore program [1, 2] (mainly used for program verification), and the latter (in the Argonne variant) provides the basis for McCune's OTTER [7, 8].
Reference: [15] <author> Wos, L., Overbeek, R., Lusk, E., and Boyle, J. </author> <title> Automated Reasoning: Introduction and Applications, 2nd ed., </title> <address> New York: </address> <publisher> McGraw-Hill, </publisher> <year> 1992. </year>
Reference-contexts: Department of Energy, under Contract W-31-109-Eng-38. 1 the most effective approaches where no new information is retained are based on Prolog technology. Among the more effective approaches in which new information is accrued are the computational logic paradigm and the clause language paradigm <ref> [14, 15, 18] </ref>. The former provides the basis for the Boyer-Moore program [1, 2] (mainly used for program verification), and the latter (in the Argonne variant) provides the basis for McCune's OTTER [7, 8].
Reference: [16] <author> Wos, L., </author> <title> "The resonance strategy", </title> <journal> Computers and Mathematics with Applications (special issue on automated reasoning) 29, </journal> <volume> no. 2, </volume> <month> 133-178 (February </month> <year> 1995). </year>
Reference-contexts: In approximately 38 CPU-seconds (on the equivalent of a SPARCstation-2), OTTER deduced UM with a proof of length 22 and level 11, with retention of clause (864). When I then deleted the use of the resonance strategy <ref> [16, 20] </ref>, in approximately 770 CPU-seconds OTTER deduced UM with a proof of length 20 and level 14, with retention of clause (9777). Why did the hot list strategy succeed? A key rests with the effect the strategy has when level saturation is being used.
Reference: [17] <author> Wos, L., </author> <title> "Searching for circles of pure proofs", </title> <journal> J. Automated Reasoning 15, </journal> <volume> no. 3, </volume> <month> 279-315 </month> <year> (1995). </year>
Reference-contexts: Regarding assignments for the values for the heat and the dynamic heat weight parameters| with the exceptions just noted and those discussed in Section 6.2|I can only suggest experimentation. One might profitably glance at some of the experiments I feature in Section 5; see also <ref> [17, 18, 19, 20] </ref> and especially [21] and [22]. (Of the various references, [21] is 19 the choice for the researcher wishing far more detail concerning tendencies exhibited by the options offered by OTTER.) Before I turn to hints for using the hot list strategy, the following observation needs utterance.
Reference: [18] <author> Wos, L., </author> <title> The Automation of Reasoning: An Experimenter's Notebook with OTTER Tutorial, </title> <publisher> Academic Press: </publisher> <address> New York, </address> <note> 1996 (see http://www.mcs.anl.gov/people/wos/index.html for input files and information on shorter proofs). </note>
Reference-contexts: Department of Energy, under Contract W-31-109-Eng-38. 1 the most effective approaches where no new information is retained are based on Prolog technology. Among the more effective approaches in which new information is accrued are the computational logic paradigm and the clause language paradigm <ref> [14, 15, 18] </ref>. The former provides the basis for the Boyer-Moore program [1, 2] (mainly used for program verification), and the latter (in the Argonne variant) provides the basis for McCune's OTTER [7, 8]. <p> Perhaps in the future, this deficiency will be sharply reduced 9 by having the program automatically (and possibly self-analytically) move certain clauses from list (sos) to list (usable) before they are chosen as the focus of attention; see Section 13.4 of <ref> [18] </ref>. List (sos) is the name of the list of clauses that have not yet been chosen as the focus of attention but are recursively traceable to the initial set of support or were in the initial set of support. <p> Note that no practical algorithm appears to exist for searching for short proofs, and note that numerous obstacles, some of which are indeed subtle, are encountered in such a search; see <ref> [18] </ref>, which takes the form of an experimental notebook. I focus on the formulas known as XHK and XHN, each of which alone is strong enough to provide a complete axiomatization for equivalential calculus. <p> The figures also illustrate a disadvantage of using this combination of strategies, for the size of the levels can grow far more rapidly. One final experiment merits discussion. In the spirit of cursory proof checking (as opposed to rigorous proof checking), both covered in <ref> [18] </ref>, I used as resonators the 20 steps 15 of the just-cited proof, assigned a value of 2 to each, and assigned to the max weight the value 2. <p> Regarding assignments for the values for the heat and the dynamic heat weight parameters| with the exceptions just noted and those discussed in Section 6.2|I can only suggest experimentation. One might profitably glance at some of the experiments I feature in Section 5; see also <ref> [17, 18, 19, 20] </ref> and especially [21] and [22]. (Of the various references, [21] is 19 the choice for the researcher wishing far more detail concerning tendencies exhibited by the options offered by OTTER.) Before I turn to hints for using the hot list strategy, the following observation needs utterance.
Reference: [19] <author> Wos, L., </author> <title> "OTTER and the Moufang identity problem", </title> <journal> J. Automated Reasoning 17, </journal> <volume> no. 2, </volume> <month> 215-257 </month> <year> (1996). </year>
Reference-contexts: Regarding assignments for the values for the heat and the dynamic heat weight parameters| with the exceptions just noted and those discussed in Section 6.2|I can only suggest experimentation. One might profitably glance at some of the experiments I feature in Section 5; see also <ref> [17, 18, 19, 20] </ref> and especially [21] and [22]. (Of the various references, [21] is 19 the choice for the researcher wishing far more detail concerning tendencies exhibited by the options offered by OTTER.) Before I turn to hints for using the hot list strategy, the following observation needs utterance.
Reference: [20] <author> Wos, L., </author> <title> "The power of combining resonance with heat", </title> <journal> J. Automated Reasoning 17, </journal> <volume> no. 2, </volume> <month> 23-81 </month> <year> (1996). </year>
Reference-contexts: In approximately 38 CPU-seconds (on the equivalent of a SPARCstation-2), OTTER deduced UM with a proof of length 22 and level 11, with retention of clause (864). When I then deleted the use of the resonance strategy <ref> [16, 20] </ref>, in approximately 770 CPU-seconds OTTER deduced UM with a proof of length 20 and level 14, with retention of clause (9777). Why did the hot list strategy succeed? A key rests with the effect the strategy has when level saturation is being used. <p> Regarding assignments for the values for the heat and the dynamic heat weight parameters| with the exceptions just noted and those discussed in Section 6.2|I can only suggest experimentation. One might profitably glance at some of the experiments I feature in Section 5; see also <ref> [17, 18, 19, 20] </ref> and especially [21] and [22]. (Of the various references, [21] is 19 the choice for the researcher wishing far more detail concerning tendencies exhibited by the options offered by OTTER.) Before I turn to hints for using the hot list strategy, the following observation needs utterance.
Reference: [21] <author> Wos, L., </author> <title> "Automating the search for elegant proofs", </title> <journal> J. </journal> <note> Automated Reasoning, accepted for publication, </note> <year> 1997. </year>
Reference-contexts: Again, I used the hot list strategy, motivated by a distantly related experiment in another logic calculus, an experiment that yielded under similar conditions an even shorter proof; see <ref> [21] </ref> and Section 3.4 of the technical report [23] that is a far longer version of this article. I was not rewarded: OTTER merely returned the 20-step proof already discussed. On a whim, I repeated the experiment with one change, that of omitting the use of the hot list strategy. <p> One might profitably glance at some of the experiments I feature in Section 5; see also [17, 18, 19, 20] and especially <ref> [21] </ref> and [22]. (Of the various references, [21] is 19 the choice for the researcher wishing far more detail concerning tendencies exhibited by the options offered by OTTER.) Before I turn to hints for using the hot list strategy, the following observation needs utterance. <p> One might profitably glance at some of the experiments I feature in Section 5; see also [17, 18, 19, 20] and especially <ref> [21] </ref> and [22]. (Of the various references, [21] is 19 the choice for the researcher wishing far more detail concerning tendencies exhibited by the options offered by OTTER.) Before I turn to hints for using the hot list strategy, the following observation needs utterance. <p> In some cases, I include lines preceded with "%", which McCune's program OTTER treats as a comment. The input files, as well as the proofs given here, provide the merest taste of what one can do with OTTER; more is found in my new book <ref> [21] </ref>. One of my main reasons for including specific proofs is my strong conviction that likelihood of experimentation producing valuable results is sharply increased.
Reference: [22] <author> Wos, L., </author> <title> "Experiments concerning the Automated Search for Elegant Proofs", </title> <type> Technical Memorandum ANL/MCS-TM-221, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, Illinois, </institution> <year> 1997. </year>
Reference-contexts: One might profitably glance at some of the experiments I feature in Section 5; see also [17, 18, 19, 20] and especially [21] and <ref> [22] </ref>. (Of the various references, [21] is 19 the choice for the researcher wishing far more detail concerning tendencies exhibited by the options offered by OTTER.) Before I turn to hints for using the hot list strategy, the following observation needs utterance.
Reference: [23] <author> Wos, L., </author> <title> "Experiments with the Hot List Strategy", </title> <type> Technical Memorandum ANL/MCS-TM-232, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, Illinois, </institution> <year> 1997. </year>
Reference-contexts: Again, I used the hot list strategy, motivated by a distantly related experiment in another logic calculus, an experiment that yielded under similar conditions an even shorter proof; see [21] and Section 3.4 of the technical report <ref> [23] </ref> that is a far longer version of this article. I was not rewarded: OTTER merely returned the 20-step proof already discussed. On a whim, I repeated the experiment with one change, that of omitting the use of the hot list strategy.
Reference: [24] <author> Wos, L., Winker, S., Veroff, R., Smith, B., and Henschen, L., </author> <title> "Questions concerning possible shortest single axioms in equivalential calculus: An application of automated theorem proving to infinite domains", </title> <journal> Notre Dame J. Formal Logic 24, </journal> <month> 205-223 </month> <year> (1983). </year> <month> 35 </month>
Reference-contexts: Indeed, whether either is a single axiom was an open question until Winker obtained proofs with excellent insight, many computer runs, much time, and considerable assistance from one of Argonne's automated reasoning programs <ref> [24, 25] </ref>.
Reference: [25] <author> Wos, L., Winker, S., Veroff, R., Smith, B., and Henschen, L., </author> <title> "A new use of an au-tomated reasoning assistant: Open questions in equivalential calculus and the study of infinite domains", </title> <booktitle> Artificial Intelligence 22, </booktitle> <month> 303-356 </month> <year> (1984). </year>
Reference-contexts: Indeed, whether either is a single axiom was an open question until Winker obtained proofs with excellent insight, many computer runs, much time, and considerable assistance from one of Argonne's automated reasoning programs <ref> [24, 25] </ref>.
Reference: [26] <author> Wos, L., Veroff, R., Smith, B., and McCune, W., </author> <title> "The Linked Inference Principle, II: The User's Viewpoint", </title> <booktitle> in Lecture Notes in Computer Science, </booktitle> <volume> Vol. 170, </volume> <editor> ed. R. E. Shostak, </editor> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <pages> pp. 316-332, </pages> <year> 1984. </year> <month> 36 </month>
Reference-contexts: If associative unification without commutativity is desired, a clause for associativity is included in the hot list, and no clause for commutativity is included. 2.4 Linked Inference Rules Use of the hot list strategy can also (in effect) partially substitute for access to linked inference rules <ref> [11, 26] </ref>.
References-found: 26

