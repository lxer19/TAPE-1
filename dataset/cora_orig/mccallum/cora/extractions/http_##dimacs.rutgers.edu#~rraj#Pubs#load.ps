URL: http://dimacs.rutgers.edu/~rraj/Pubs/load.ps
Refering-URL: http://dimacs.rutgers.edu/~rraj/Pubs/load.html
Root-URL: http://www.cs.rutgers.edu
Title: TIGHT ANALYSES OF TWO LOCAL LOAD BALANCING ALGORITHMS  
Author: BHASKAR GHOSH F. T. LEIGHTON BRUCE M. MAGGS ; S. MUTHUKRISHNAN C. GREG PLAXTON ; R. RAJARAMAN ; ANDR EA W. RICHA ; ROBERT E. TARJAN DAVID ZUCKERMAN ; 
Keyword: load balancing, distributed network algorithms.  
Note: AMS subject classification: 68Q22  
Abstract: This paper presents an analysis of the following load balancing algorithm. At each step, each node in a network examines the number of tokens at each of its neighbors and sends a token to each neighbor with at least 2d + 1 fewer tokens, where d is the maximum degree of any node in the network. We show that within O(=ff) steps, the algorithm reduces the maximum difference in tokens between any two nodes to at most O((d 2 log n)=ff), where is the global imbalance in tokens (i.e., the maximum difference between the number of tokens at any node initially and the average number of tokens), n is the number of nodes in the network, and ff is the edge expansion of the network. The time bound is tight in the sense that for any graph with edge expansion ff, and for any value , there exists an initial distribution of tokens with imbalance for which the time to reduce the imbalance to even =2 is at least (=ff). The bound on the final imbalance is tight in the sense that there exists a class of networks that can be locally balanced everywhere (i.e., the maximum difference in tokens between any two neighbors is at most 2d), while the global imbalance remains ((d 2 log n)=ff). Furthermore, we show that upon reaching a state with a global imbalance of O((d 2 log n)=ff), the time for this algorithm to locally balance the network can be as large as (n 1=2 ). We extend our analysis to a variant of this algorithm for dynamic and asynchronous networks. We also present tight bounds for a randomized algorithm in which each node sends at most one token in each step. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Afek, E. Gafni, and A. Rosen. </author> <title> The slide mechanism with applications in dynamic networks. </title> <booktitle> In Proceedings of the 11th ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 35-46, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: In general, work on dynamic and asynchronous networks has been limited. In work related to load balancing for instance, an end-to-end communication problem, namely one in which messages are routed from a single source to a single destination, has been studied in <ref> [1, 7] </ref> on dynamic networks. Our scenario is substantially more involved since we are required to move load between several sources and destinations simultaneously. Another result on dynamic networks is the recent analysis of a local algorithm for the approximate multicommodity flow problem [5, 6]. <p> We denote the average number of tokens by , i.e., = ( P v2V w (v))=n. For simplicity, throughout this paper we assume that is an integer. We assign a unique rank from <ref> [1; w (v)] </ref> to every token at v. The height of a token is its rank minus . The height of a node is the maximum among the heights of all its tokens. <p> For each bad index, there is a reduction by a factor of 1=(1 + ff=(2d)). Hence, there can be at most dlog (1+ff=(2d)) ne bad indices because (1 + ff=(2d)) log (1+ff=(2d)) n n. It follows that at least half of the indices in <ref> [1; 2dlog (1+ff=(2d)) ne] </ref> are good. Note that for 0 a 1, 1 + a e aa 2 =2 e a =2. Thus ln (1 + a) a=2, implying log (1 + a) = fi (a). <p> Thus, every subset of nodes in S &gt;0 expands, and we will use this expansion property to show that the number of nodes that have at least + 2 log (1+ff=(2d)) n tokens rapidly goes to zero. Recall that at least half of the indices in <ref> [1; 2dlog (1+ff=(2d)) ne] </ref> are good in any time step. Therefore, there exists an index j in [1; 2dlog (1+ff=(2d)) ne] that is good in at least half of those time steps in which jS &gt;0 j n=2. Hence j is good in at least T =4 steps. <p> Recall that at least half of the indices in <ref> [1; 2dlog (1+ff=(2d)) ne] </ref> are good in any time step. Therefore, there exists an index j in [1; 2dlog (1+ff=(2d)) ne] that is good in at least half of those time steps in which jS &gt;0 j n=2. Hence j is good in at least T =4 steps. <p> Without loss of generality, we assume that jS &gt;0 j n=2 holds in at least half of these steps. As shown in Section 2, there exists an index j in <ref> [1; 2dlog (1+ff=(2d)) ne] </ref> that is good in at least half of those steps in which jS &gt;0 j n=2. Hence in T steps of the algorithm, j is good in at least T =4 steps. <p> Consider T steps of DS. We assume without loss of generality that jS &gt;0 j n=2 at the start of at least T =2 steps. As shown in Section 2, there exists an index j in <ref> [1; 2dlog (1+ff=(2d)) ne] </ref> that is good in at least half of those steps in which jS &gt;0 j n=2. (Recall that index i is good if jS i j ffjS &gt;i j=2d.) If index j is good at the start of step t, we call t a good step.
Reference: [2] <author> W. Aiello, B. Awerbuch, B. Maggs, and S. Rao. </author> <title> Approximate load balancing on dynamic and asynchronous networks. </title> <booktitle> In Proceedings of the 25th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 632-641, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: At each step, a token is sent from node u to node v across edge (u; v) if at the beginning of the step node u contained at least 2d + 1 more tokens than node v. This algorithm was first analyzed in <ref> [2] </ref>. As in the single-port case, we analyze the multi-port algorithm in terms of both edge expansion and node expansion. In terms of edge expansion, the algorithm balances to within O ((d 2 log n)=ff) tokens in O (=ff) steps. <p> A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the load balancing algorithm <ref> [2, 11, 12, 14, 27, 31] </ref>. In these models, algorithms have been proposed for specific applications; also, proposed heuristics and algorithms have been analyzed using simulations and queuing-theoretic techniques [28, 35, 37]. <p> The second model is the one that we adopt here, namely one in which at most one unit load can be moved across a link in each time step. Load balancing algorithms for the second model were first proposed and analyzed in <ref> [2] </ref> for the multi-port variant and in [14] for the single-port variant. The upper bounds established by them are suboptimal by a factor of (log (n)) or ( p respectively. We improve these results for both single-port and multi-port variants. As remarked earlier, our multi-port results (and those in [2]) hold <p> in <ref> [2] </ref> for the multi-port variant and in [14] for the single-port variant. The upper bounds established by them are suboptimal by a factor of (log (n)) or ( p respectively. We improve these results for both single-port and multi-port variants. As remarked earlier, our multi-port results (and those in [2]) hold even for dynamic or asynchronous networks. In general, work on dynamic and asynchronous networks has been limited. <p> Second, our argument uses an exponential potential function. The analyses in [12, 21, 30], in contrast, use quadratic potential functions. Our potential function and our amortized analysis were necessary since a number of previous attempts using quadratic potential functions yielded suboptimal results <ref> [2, 14] </ref> for local load balancing. As mentioned earlier, we only consider the static aspect of load balancing. For a recent survey on the dynamic aspect of this problem (i.e., when tokens can be created or destroyed while the tokens are being balanced), see [40]. 3 1.3. Outline. <p> More specifically, in Section 4.1, we show that locally load balancing to within 2d tokens using the multi-port algorithm of <ref> [2] </ref> described in Section 1.1 can take ( p n) more time than globally load balancing to within O ((d log n)=) tokens. <p> We first prove that a variant of the local multi-port algorithm is optimal on dynamic synchronous networks in the same sense as for static synchronous networks. We then use a result of <ref> [2] </ref> that relates the dynamic synchronous and asynchronous models to extend our results to asynchronous networks. In the dynamic synchronous model, the edges of the network may fail or succeed dynamically. <p> We assume that at each step each node knows which of its adjacent edges are live. The local load balancing algorithm for static synchronous networks can be modified to work on dynamic synchronous networks. The algorithm presented here is essentially the same as in <ref> [2] </ref>. Since edges may fail dynamically, a node u may have no knowledge of the height of a neighboring node v and hence may be unable to decide whether to send a token to v. <p> We show that for any of the above events to occur, "many" tokens should have lost height in previous steps. We use a part of this prior potential drop to account for (i) and (ii). At a high level, our proof follows the lines of Lemma 3 of <ref> [2] </ref>. However, since the potential functions involved are different, the two proofs differ considerably in the details. We have included a complete proof of Lemma 5.2 in Appendix B. The main result follows from Lemmas 5.1 and 5.2. <p> By defining an appropriate potential function for tokens with heights below the average and repeating the analysis done for S &gt;j , we show that in another O (=ff) steps, all nodes have more than O (d 2 (log n)=ff) tokens. As suggested in <ref> [2] </ref>, a simple variant of DS can be defined for asynchronous networks. As shown in [2], the analysis for the dynamic synchronous case can be used for asynchronous networks to yield the same time bounds. <p> As suggested in <ref> [2] </ref>, a simple variant of DS can be defined for asynchronous networks. As shown in [2], the analysis for the dynamic synchronous case can be used for asynchronous networks to yield the same time bounds. Hence, the multi-port local load balancing algorithm balances to within O (d 2 log n=ff) tokens in time O (=ff) on aynchronous networks. 6. Tight bounds on off-line load balancing.
Reference: [3] <author> M. Ajtai, J. Komlos, and E. Szemeredi. </author> <title> Sorting in c log n parallel steps. </title> <journal> Combinatorica, </journal> <volume> 3 </volume> <pages> 1-19, </pages> <year> 1983. </year>
Reference-contexts: Peleg and Upfal [32] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing. Their work has been extended in [9, 18, 33]. These algorithms either use strong expanders to approximately balance the network, or the AKS sorting network <ref> [3] </ref> to perfectly balance the network. Thus, they do not work on networks of arbitrary topology. Also, these algorithms work by setting up fixed paths through the network on which load is moved and therefore cannot cope with changes in the network topology.
Reference: [4] <author> J. Aspnes, M. Herlihy, and N. Shavit. </author> <title> Counting networks and multiprocessor co-ordination. </title> <booktitle> In Proceedings of the 23rd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 348-358, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: In what follows, we focus on models that allow only local algorithms and on prior work that takes an analytical approach to the load balancing problem. Local algorithms restricted to particular networks have been studied on counting networks <ref> [4, 23] </ref>, hypercubes [20, 34], and meshes [17, 29]. Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal [32] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing.
Reference: [5] <author> B. Awerbuch and T. Leighton. </author> <title> A simple local-control approximation algorithm for multi-commodity flow. </title> <booktitle> In Proceedings of the 34th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 459-468, </pages> <month> October </month> <year> 1993. </year> <month> 25 </month>
Reference-contexts: Our scenario is substantially more involved since we are required to move load between several sources and destinations simultaneously. Another result on dynamic networks is the recent analysis of a local algorithm for the approximate multicommodity flow problem <ref> [5, 6] </ref>. While their result has several applications including the end-to-end communication problem mentioned above, it does not seem to extend to load balancing.
Reference: [6] <author> B. Awerbuch and T. Leighton. </author> <title> Improved approximation algorithms for the multi-commodity flow problem and local competitive routing in dynamic networks. </title> <booktitle> In Proceedings of the 26th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 487-496, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Our scenario is substantially more involved since we are required to move load between several sources and destinations simultaneously. Another result on dynamic networks is the recent analysis of a local algorithm for the approximate multicommodity flow problem <ref> [5, 6] </ref>. While their result has several applications including the end-to-end communication problem mentioned above, it does not seem to extend to load balancing.
Reference: [7] <author> B. Awerbuch, Y. Mansour, and N. Shavit. </author> <title> End-to-end communication with polynomial overhead. </title> <booktitle> In Proceedings of the 30th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 358-363, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: In general, work on dynamic and asynchronous networks has been limited. In work related to load balancing for instance, an end-to-end communication problem, namely one in which messages are routed from a single source to a single destination, has been studied in <ref> [1, 7] </ref> on dynamic networks. Our scenario is substantially more involved since we are required to move load between several sources and destinations simultaneously. Another result on dynamic networks is the recent analysis of a local algorithm for the approximate multicommodity flow problem [5, 6].
Reference: [8] <author> D. P. Bertsekas and J. N. Tsitsiklis. </author> <title> Parallel and Distributed Computation: Numerical Methods. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1989. </year>
Reference-contexts: In contrast, our local algorithm works on any arbitrary dynamic network that remains connected. On arbitrary topologies, load balancing has been studied under two models. In the first model, any amount of load can be moved across a link in any time step <ref> [8, 12, 14, 15, 19, 36] </ref>. The second model is the one that we adopt here, namely one in which at most one unit load can be moved across a link in each time step.
Reference: [9] <author> A. Broder, A. M. Frieze, E. Shamir, and E. Upfal. </author> <title> Near-perfect token distribution. </title> <booktitle> In Proceedings of the 19th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 308-317, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal [32] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing. Their work has been extended in <ref> [9, 18, 33] </ref>. These algorithms either use strong expanders to approximately balance the network, or the AKS sorting network [3] to perfectly balance the network. Thus, they do not work on networks of arbitrary topology.
Reference: [10] <author> H. Chernoff. </author> <title> A measure of asymptotic efficiency for tests of a hypothesis based on the sum of observations. </title> <journal> Annals of Mathematical Statistics, </journal> <volume> 23 </volume> <pages> 493-507, </pages> <year> 1952. </year>
Reference-contexts: By setting T = d (4 ln 4)=("-2 )e, we obtain E [ t+T ] t =4. By Markov's inequality, the probability that t+T t =2 is at most 1=2. Therefore, using standard Chernoff bounds <ref> [10] </ref>, we can show that in T 0 = 8aT d (log 0 + log n)e steps, T 0 &gt; 1 with probability at most O (1=( 0 ) a + 1=n a ) for any constant a &gt; 0.
Reference: [11] <author> Y. C. Chow and W. Kohler. </author> <title> Models for dynamic load balancing in a heterogeneous multiple processor system. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-28(5):57-68, </volume> <month> November </month> <year> 1980. </year>
Reference-contexts: A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the load balancing algorithm <ref> [2, 11, 12, 14, 27, 31] </ref>. In these models, algorithms have been proposed for specific applications; also, proposed heuristics and algorithms have been analyzed using simulations and queuing-theoretic techniques [28, 35, 37].
Reference: [12] <author> G. Cybenko. </author> <title> Dynamic load balancing for distributed memory multiprocessors. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 7(2) </volume> <pages> 279-301, </pages> <year> 1989. </year>
Reference-contexts: A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the load balancing algorithm <ref> [2, 11, 12, 14, 27, 31] </ref>. In these models, algorithms have been proposed for specific applications; also, proposed heuristics and algorithms have been analyzed using simulations and queuing-theoretic techniques [28, 35, 37]. <p> In contrast, our local algorithm works on any arbitrary dynamic network that remains connected. On arbitrary topologies, load balancing has been studied under two models. In the first model, any amount of load can be moved across a link in any time step <ref> [8, 12, 14, 15, 19, 36] </ref>. The second model is the one that we adopt here, namely one in which at most one unit load can be moved across a link in each time step. <p> First, the analysis of the rapid convergence of random walks [21, 30] relies on averaging arbitrary probabilities across any edge. This corresponds to sending an arbitrary (possibly nonintegral) load along an edge which is forbidden in our model. In this sense, the analysis in <ref> [12] </ref> (and all references in the unbounded capacity model) are similar to the random walk analysis. Second, our argument uses an exponential potential function. The analyses in [12, 21, 30], in contrast, use quadratic potential functions. <p> In this sense, the analysis in [12] (and all references in the unbounded capacity model) are similar to the random walk analysis. Second, our argument uses an exponential potential function. The analyses in <ref> [12, 21, 30] </ref>, in contrast, use quadratic potential functions. Our potential function and our amortized analysis were necessary since a number of previous attempts using quadratic potential functions yielded suboptimal results [2, 14] for local load balancing. As mentioned earlier, we only consider the static aspect of load balancing.
Reference: [13] <author> D. Eager, E. Lazowska, and J. Zahorjan. </author> <title> Adaptive load sharing in homogeneous distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(5):662-675, </volume> <year> 1986. </year>
Reference-contexts: Previous and related work. Load balancing has been studied extensively because it comes up in a wide variety of settings including adaptive mesh partitioning [17, 39], fine-grain functional programming [16], job scheduling in operating systems <ref> [13, 25] </ref>, and distributed tree searching [22, 26]. A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the load balancing algorithm [2, 11, 12, 14, 27, 31].
Reference: [14] <author> B. Ghosh and S. Muthukrishnan. </author> <title> Dynamic load balancing on parallel and distributed networks by random matchings. </title> <booktitle> In Proceedings of the 6th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 226-235, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: The remaining candidates form a matching M in the graph. For each edge (u; v) in M , u sends a token to v if at the beginning of the step node u contained at least two more tokens than v. This algorithm was first analyzed in <ref> [14] </ref>. We analyze the performance of the single-port algorithm in terms of both the edge expansion and the node expansion of the graph. In terms of edge expansion, we show that the single-port algorithm balances to within O ((d log n)=ff) tokens in O (d=ff) steps, with high probability. <p> A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the load balancing algorithm <ref> [2, 11, 12, 14, 27, 31] </ref>. In these models, algorithms have been proposed for specific applications; also, proposed heuristics and algorithms have been analyzed using simulations and queuing-theoretic techniques [28, 35, 37]. <p> In contrast, our local algorithm works on any arbitrary dynamic network that remains connected. On arbitrary topologies, load balancing has been studied under two models. In the first model, any amount of load can be moved across a link in any time step <ref> [8, 12, 14, 15, 19, 36] </ref>. The second model is the one that we adopt here, namely one in which at most one unit load can be moved across a link in each time step. <p> The second model is the one that we adopt here, namely one in which at most one unit load can be moved across a link in each time step. Load balancing algorithms for the second model were first proposed and analyzed in [2] for the multi-port variant and in <ref> [14] </ref> for the single-port variant. The upper bounds established by them are suboptimal by a factor of (log (n)) or ( p respectively. We improve these results for both single-port and multi-port variants. As remarked earlier, our multi-port results (and those in [2]) hold even for dynamic or asynchronous networks. <p> Second, our argument uses an exponential potential function. The analyses in [12, 21, 30], in contrast, use quadratic potential functions. Our potential function and our amortized analysis were necessary since a number of previous attempts using quadratic potential functions yielded suboptimal results <ref> [2, 14] </ref> for local load balancing. As mentioned earlier, we only consider the static aspect of load balancing. For a recent survey on the dynamic aspect of this problem (i.e., when tokens can be created or destroyed while the tokens are being balanced), see [40]. 3 1.3. Outline. <p> In order to prove the upper bound on E [ i ], we place a lower bound on E [m i ] that is obtained from the following lemma of <ref> [14] </ref>. Lemma 3.2 ([14]). For any edge e 2 E, the probability that e is selected in the matching is at least 1=(8d). Lemma 3.3. <p> We extend this bound to the single-port algorithm presented in <ref> [14] </ref>; i.e., upon reaching a state where the network is globally balanced to within O ((log n)=) tokens, the expected number of additional steps this algorithm may take to perform local balancing to within one token is (d p n).
Reference: [15] <author> B. Ghosh, S. Muthukrishnan, and M. H. Schultz. </author> <title> First and second order diffusive methods for rapid, coarse, distributed load balancing. </title> <booktitle> In Proceedings of the 8th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 72-81, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: In contrast, our local algorithm works on any arbitrary dynamic network that remains connected. On arbitrary topologies, load balancing has been studied under two models. In the first model, any amount of load can be moved across a link in any time step <ref> [8, 12, 14, 15, 19, 36] </ref>. The second model is the one that we adopt here, namely one in which at most one unit load can be moved across a link in each time step.
Reference: [16] <author> B. Goldberg and P. Hudak. </author> <title> Implementing functional programs on a hypercube multiprocessor. </title> <booktitle> In Proceedings of the 4th Conference on Hypercubes, Concurrent Computers and Applications, </booktitle> <volume> volume 1, </volume> <pages> pages 489-503, </pages> <year> 1989. </year>
Reference-contexts: Previous and related work. Load balancing has been studied extensively because it comes up in a wide variety of settings including adaptive mesh partitioning [17, 39], fine-grain functional programming <ref> [16] </ref>, job scheduling in operating systems [13, 25], and distributed tree searching [22, 26]. A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the load balancing algorithm [2, 11, 12, 14, 27, 31].
Reference: [17] <author> A. Heirich and S. Taylor. </author> <title> A parabolic theory of load balance. Research Report Caltech-CS-TR-93-25, Caltech Scalable Concurrent Computation Lab, </title> <address> Pasadena, CA, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: Previous and related work. Load balancing has been studied extensively because it comes up in a wide variety of settings including adaptive mesh partitioning <ref> [17, 39] </ref>, fine-grain functional programming [16], job scheduling in operating systems [13, 25], and distributed tree searching [22, 26]. A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the load balancing algorithm [2, 11, 12, 14, 27, 31]. <p> In what follows, we focus on models that allow only local algorithms and on prior work that takes an analytical approach to the load balancing problem. Local algorithms restricted to particular networks have been studied on counting networks [4, 23], hypercubes [20, 34], and meshes <ref> [17, 29] </ref>. Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal [32] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing. Their work has been extended in [9, 18, 33].
Reference: [18] <author> K. T. Herley. </author> <title> A note on the token distribution problem. </title> <journal> Information Processing Letters, </journal> <volume> 28 </volume> <pages> 329-334, </pages> <year> 1991. </year>
Reference-contexts: Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal [32] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing. Their work has been extended in <ref> [9, 18, 33] </ref>. These algorithms either use strong expanders to approximately balance the network, or the AKS sorting network [3] to perfectly balance the network. Thus, they do not work on networks of arbitrary topology.
Reference: [19] <author> S. H. Hosseini, B. Litow, M. Malkawi, J. McPherson, and K. Vairavan. </author> <title> Analysis of a graph coloring based distributed load balancing algorithm. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 10(2) </volume> <pages> 160-166, </pages> <year> 1990. </year>
Reference-contexts: In contrast, our local algorithm works on any arbitrary dynamic network that remains connected. On arbitrary topologies, load balancing has been studied under two models. In the first model, any amount of load can be moved across a link in any time step <ref> [8, 12, 14, 15, 19, 36] </ref>. The second model is the one that we adopt here, namely one in which at most one unit load can be moved across a link in each time step.
Reference: [20] <author> J. JaJa and K. W. Ryu. </author> <title> Load balancing and routing on the hypercube and related networks. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 14(4) </volume> <pages> 431-435, </pages> <year> 1992. </year>
Reference-contexts: In what follows, we focus on models that allow only local algorithms and on prior work that takes an analytical approach to the load balancing problem. Local algorithms restricted to particular networks have been studied on counting networks [4, 23], hypercubes <ref> [20, 34] </ref>, and meshes [17, 29]. Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal [32] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing. Their work has been extended in [9, 18, 33].
Reference: [21] <author> M. R. Jerrum and A. Sinclair. </author> <title> Conductance and the rapid mixing property for Markov chains: the approximation of the permanent resolved. </title> <booktitle> In Proceedings of the 20th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 235-244, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Indeed the convergence bounds in both cases depend on the expansion properties of the underlying graph and they are established using potential function arguments. There are however two important differences. First, the analysis of the rapid convergence of random walks <ref> [21, 30] </ref> relies on averaging arbitrary probabilities across any edge. This corresponds to sending an arbitrary (possibly nonintegral) load along an edge which is forbidden in our model. In this sense, the analysis in [12] (and all references in the unbounded capacity model) are similar to the random walk analysis. <p> In this sense, the analysis in [12] (and all references in the unbounded capacity model) are similar to the random walk analysis. Second, our argument uses an exponential potential function. The analyses in <ref> [12, 21, 30] </ref>, in contrast, use quadratic potential functions. Our potential function and our amortized analysis were necessary since a number of previous attempts using quadratic potential functions yielded suboptimal results [2, 14] for local load balancing. As mentioned earlier, we only consider the static aspect of load balancing.
Reference: [22] <author> R. Karp and Y. Zhang. </author> <title> A randomized parallel branch-and-bound procedure. </title> <journal> Journal of the ACM, </journal> <volume> 40 </volume> <pages> 765-789, </pages> <year> 1993. </year>
Reference-contexts: Previous and related work. Load balancing has been studied extensively because it comes up in a wide variety of settings including adaptive mesh partitioning [17, 39], fine-grain functional programming [16], job scheduling in operating systems [13, 25], and distributed tree searching <ref> [22, 26] </ref>. A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the load balancing algorithm [2, 11, 12, 14, 27, 31].
Reference: [23] <author> M. Klugerman and C. G. Plaxton. </author> <title> Small depth counting networks. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 417-428, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: In what follows, we focus on models that allow only local algorithms and on prior work that takes an analytical approach to the load balancing problem. Local algorithms restricted to particular networks have been studied on counting networks <ref> [4, 23] </ref>, hypercubes [20, 34], and meshes [17, 29]. Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal [32] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing.
Reference: [24] <author> T. Leighton, C. E. Leiserson, and D. Kravets. </author> <title> Theory of parallel and VLSI computation. </title> <booktitle> Research Seminar Series Report MIT/LCS/RSS 8, </booktitle> <institution> MIT Laboratory for Computer Science, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: i such that (i) there are at most d=2 such edges adjacent to any node in L i , and (ii) every subset S of L i of size less than or equal 11 to 2jL i j=3 has at least 0 jSj neighbors in L i n S (see <ref> [24, 38] </ref> for a proof that such a construction is possible). <p> Thus, S has at least (1 + 0 )jSj neighbors in L i+1 . Now we consider how L i+1 "expands" into L i . We can use an approach similar to that of <ref> [24, 38] </ref> to show that we can choose the edges between L i and L i+1 , respecting the degree constraints, such that any subset S of L i+1 of size less than or equal to 3jL i+1 j=(4 (1 + 0 )) has at least (1 + 0 )jSj neighbors <p> This construction is possible since (1 + 0 )3jL i+1 j=(4 (1+ 0 )) = 3 (1 + 0 )jL i j=4 &lt; jL i j. The same analysis as in <ref> [24] </ref>, but for a bipartite graph with node sets of sizes jL i+1 j and jL i+1 j=(1 + 0 ), and of regular node degrees d=(2 (2 + 0 )) and d (1 + 0 )=(2 (2 + 0 )), respectively, applies here.
Reference: [25] <author> F. C. H. Lin and R. M. Keller. </author> <title> The gradient model load balancing method. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13(1):32-38, </volume> <year> 1987. </year>
Reference-contexts: Previous and related work. Load balancing has been studied extensively because it comes up in a wide variety of settings including adaptive mesh partitioning [17, 39], fine-grain functional programming [16], job scheduling in operating systems <ref> [13, 25] </ref>, and distributed tree searching [22, 26]. A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the load balancing algorithm [2, 11, 12, 14, 27, 31].
Reference: [26] <author> R. Luling and B. Monien. </author> <title> Load balancing for distributed branch and bound algorithms. </title> <booktitle> In Proceedings of the 6th International Parallel Processing Symposium, </booktitle> <pages> pages 543-549, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Previous and related work. Load balancing has been studied extensively because it comes up in a wide variety of settings including adaptive mesh partitioning [17, 39], fine-grain functional programming [16], job scheduling in operating systems [13, 25], and distributed tree searching <ref> [22, 26] </ref>. A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the load balancing algorithm [2, 11, 12, 14, 27, 31].
Reference: [27] <author> R. Luling and B. Monien. </author> <title> A dynamic distributed load balancing algorithm with provable good performance. </title> <booktitle> In Proceedings of the 5th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 164-172, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the load balancing algorithm <ref> [2, 11, 12, 14, 27, 31] </ref>. In these models, algorithms have been proposed for specific applications; also, proposed heuristics and algorithms have been analyzed using simulations and queuing-theoretic techniques [28, 35, 37].
Reference: [28] <author> R. Luling, B. Monien, and F. Ramme. </author> <title> Load balancing in large networks: A comparative study. </title> <booktitle> In Proceedings of the 3rd IEEE Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 686-689, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: In these models, algorithms have been proposed for specific applications; also, proposed heuristics and algorithms have been analyzed using simulations and queuing-theoretic techniques <ref> [28, 35, 37] </ref>. In what follows, we focus on models that allow only local algorithms and on prior work that takes an analytical approach to the load balancing problem. Local algorithms restricted to particular networks have been studied on counting networks [4, 23], hypercubes [20, 34], and meshes [17, 29].
Reference: [29] <editor> F. Meyer auf der Heide, B. Oesterdiekhoff, and R. </editor> <title> Wanka. Strongly adaptive token distribution. </title> <booktitle> In Proceedings of the 20th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 398-409, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: We also study the off-line load balancing problem, in which every node has knowledge of the global state of the network. This problem has been studied on static synchronous networks in <ref> [29] </ref>. We use their results to obtain tight bounds on off-line load balancing in terms of edge expansion and node expansion. <p> In what follows, we focus on models that allow only local algorithms and on prior work that takes an analytical approach to the load balancing problem. Local algorithms restricted to particular networks have been studied on counting networks [4, 23], hypercubes [20, 34], and meshes <ref> [17, 29] </ref>. Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal [32] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing. Their work has been extended in [9, 18, 33]. <p> Therefore, m (X [ A (X)) jA (X)j. Theorem 1 of <ref> [29] </ref> obtains tight bounds on the off-line complexity of load balancing in terms of the function m. We restate the theorem using our notation and terminology. Before stating the theorem, we need one additional notation. <p> Since the number of steps is an integer, the desired claim follows. By using the techniques of <ref> [29] </ref>, we can modify the proof of Lemma 6.2 to show that any network G with node expansion and initial imbalance can be globally balanced to within 3 tokens in at most 2d (1 + )=e steps. <p> The proofs of Theorem 1 of <ref> [29] </ref> and Lemma 6.2 can be modified to establish the following result for the multi-port model. Lemma 6.3. Assume the multi-port model. <p> For all X V , we have (i) jI (X)jXjj minfjXj; jXjg (see proof of Lemma 6.2), and (ii) jM (X; X)j ff minfjXj; jXjg. It follows from (i) and (ii) that T d=ffe. 20 We modify the proofs of Theorem 1 and Lemma 4 of <ref> [29] </ref> (where the single-port model was assumed) to establish the desired claims for the multi-port model. We transform the load balancing problem on G to a network flow problem on a directed graph H = (V 0 ; E 0 ) which is constructed as follows.
Reference: [30] <author> M. Mihail. </author> <title> Conductance and convergence of Markov chains a combinatorial treatment of expanders. </title> <booktitle> In Proceedings of the 30th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 526-531, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: Indeed the convergence bounds in both cases depend on the expansion properties of the underlying graph and they are established using potential function arguments. There are however two important differences. First, the analysis of the rapid convergence of random walks <ref> [21, 30] </ref> relies on averaging arbitrary probabilities across any edge. This corresponds to sending an arbitrary (possibly nonintegral) load along an edge which is forbidden in our model. In this sense, the analysis in [12] (and all references in the unbounded capacity model) are similar to the random walk analysis. <p> In this sense, the analysis in [12] (and all references in the unbounded capacity model) are similar to the random walk analysis. Second, our argument uses an exponential potential function. The analyses in <ref> [12, 21, 30] </ref>, in contrast, use quadratic potential functions. Our potential function and our amortized analysis were necessary since a number of previous attempts using quadratic potential functions yielded suboptimal results [2, 14] for local load balancing. As mentioned earlier, we only consider the static aspect of load balancing.
Reference: [31] <author> L. M. Ni, C. Xu, and T. B. Gendreau. </author> <title> Distributed drafting algorithm for load balancing. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-11(10):1153-1161, </volume> <month> October </month> <year> 1985. </year>
Reference-contexts: A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the load balancing algorithm <ref> [2, 11, 12, 14, 27, 31] </ref>. In these models, algorithms have been proposed for specific applications; also, proposed heuristics and algorithms have been analyzed using simulations and queuing-theoretic techniques [28, 35, 37].
Reference: [32] <author> D. Peleg and E. Upfal. </author> <title> The generalized packet routing problem. </title> <journal> Theoretical Computer Science, </journal> <volume> 53 </volume> <pages> 281-293, </pages> <year> 1987. </year>
Reference-contexts: Local algorithms restricted to particular networks have been studied on counting networks [4, 23], hypercubes [20, 34], and meshes [17, 29]. Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal <ref> [32] </ref> pioneered this study by identifying certain small-degree expanders as being suitable for load balancing. Their work has been extended in [9, 18, 33]. These algorithms either use strong expanders to approximately balance the network, or the AKS sorting network [3] to perfectly balance the network.
Reference: [33] <author> D. Peleg and E. Upfal. </author> <title> The token distribution problem. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18 </volume> <pages> 229-243, </pages> <year> 1989. </year>
Reference-contexts: Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal [32] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing. Their work has been extended in <ref> [9, 18, 33] </ref>. These algorithms either use strong expanders to approximately balance the network, or the AKS sorting network [3] to perfectly balance the network. Thus, they do not work on networks of arbitrary topology.
Reference: [34] <author> C. G. Plaxton. </author> <title> Load balancing, selection and sorting on the hypercube. </title> <booktitle> In Proceedings of the 1989 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 64-73, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: In what follows, we focus on models that allow only local algorithms and on prior work that takes an analytical approach to the load balancing problem. Local algorithms restricted to particular networks have been studied on counting networks [4, 23], hypercubes <ref> [20, 34] </ref>, and meshes [17, 29]. Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal [32] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing. Their work has been extended in [9, 18, 33]. <p> The local algorithm balances in ( log n) time, while there exists an O ( p log n + log 2 n) time load balancing algorithm for the hypercube <ref> [34] </ref> which is optimal for sufficiently large.
Reference: [35] <author> J. Stankovic. </author> <title> Simulations of three adaptive, decentralized controlled, job scheduling algorithms. </title> <journal> Computer Networks, </journal> <volume> 8 </volume> <pages> 199-217, </pages> <year> 1984. </year>
Reference-contexts: In these models, algorithms have been proposed for specific applications; also, proposed heuristics and algorithms have been analyzed using simulations and queuing-theoretic techniques <ref> [28, 35, 37] </ref>. In what follows, we focus on models that allow only local algorithms and on prior work that takes an analytical approach to the load balancing problem. Local algorithms restricted to particular networks have been studied on counting networks [4, 23], hypercubes [20, 34], and meshes [17, 29].
Reference: [36] <author> R. Subramanian and I. D. Scherson. </author> <title> An analysis of diffusive load balancing. </title> <booktitle> In Proceedings of the 6th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 220-225, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: In contrast, our local algorithm works on any arbitrary dynamic network that remains connected. On arbitrary topologies, load balancing has been studied under two models. In the first model, any amount of load can be moved across a link in any time step <ref> [8, 12, 14, 15, 19, 36] </ref>. The second model is the one that we adopt here, namely one in which at most one unit load can be moved across a link in each time step.
Reference: [37] <author> A. N. Tantawi and D. Towsley. </author> <title> Optimal static load balancing in distributed computer systems. </title> <journal> Journal of the ACM, </journal> <volume> 32 </volume> <pages> 445-465, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: In these models, algorithms have been proposed for specific applications; also, proposed heuristics and algorithms have been analyzed using simulations and queuing-theoretic techniques <ref> [28, 35, 37] </ref>. In what follows, we focus on models that allow only local algorithms and on prior work that takes an analytical approach to the load balancing problem. Local algorithms restricted to particular networks have been studied on counting networks [4, 23], hypercubes [20, 34], and meshes [17, 29].
Reference: [38] <author> E. Upfal. </author> <title> An O(log N ) deterministic packet routing scheme. </title> <booktitle> In Proceedings of the 21st Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 241-250, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: i such that (i) there are at most d=2 such edges adjacent to any node in L i , and (ii) every subset S of L i of size less than or equal 11 to 2jL i j=3 has at least 0 jSj neighbors in L i n S (see <ref> [24, 38] </ref> for a proof that such a construction is possible). <p> Thus, S has at least (1 + 0 )jSj neighbors in L i+1 . Now we consider how L i+1 "expands" into L i . We can use an approach similar to that of <ref> [24, 38] </ref> to show that we can choose the edges between L i and L i+1 , respecting the degree constraints, such that any subset S of L i+1 of size less than or equal to 3jL i+1 j=(4 (1 + 0 )) has at least (1 + 0 )jSj neighbors
Reference: [39] <author> R. D. Williams. </author> <title> Performance of dynamic load balancing algorithms for unstructured mesh calculations. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 3(5) </volume> <pages> 457-481, </pages> <year> 1991. </year>
Reference-contexts: Previous and related work. Load balancing has been studied extensively because it comes up in a wide variety of settings including adaptive mesh partitioning <ref> [17, 39] </ref>, fine-grain functional programming [16], job scheduling in operating systems [13, 25], and distributed tree searching [22, 26]. A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the load balancing algorithm [2, 11, 12, 14, 27, 31].
Reference: [40] <author> C. Z. Xu and F. C. M. Lau. </author> <title> Iterative dynamic load balancing in multicomputers. </title> <journal> Journal of the Operational Research Society, </journal> <volume> 45(7) </volume> <pages> 786-796, </pages> <year> 1994. </year> <title> Fig. 2. The initial distribution of tokens on G for the first case. Fig. 3. The initial distribution of tokens on G for the second case. </title> <type> 27 </type>
Reference-contexts: As mentioned earlier, we only consider the static aspect of load balancing. For a recent survey on the dynamic aspect of this problem (i.e., when tokens can be created or destroyed while the tokens are being balanced), see <ref> [40] </ref>. 3 1.3. Outline. The remainder of this paper is organized as follows. Section 2 contains some definitions. Sec--tion 3.1 analyzes the performance of the single-port algorithm. Section 3.2 analyzes the performance of the multi-port algorithm.
References-found: 40

