URL: http://theory.lcs.mit.edu/tds/papers/Lynch/TM-487b.ps
Refering-URL: http://theory.lcs.mit.edu/tds/papers/Lynch/TM-487b.html
Root-URL: 
Email: lynch@theory.lcs.mit.edu  fritsv@cwi.nl  
Title: Forward and Backward Simulations Part II: Timing-Based Systems  
Author: Nancy Lynch Frits Vaandrager 
Note: (Revision of March 1, 1993 version)  
Date: September 9, 1993  
Address: Cambridge, MA 02139, USA  P.O. Box 4079, 1009 AB Amsterdam, The Netherlands  Kruislaan 403, 1098 SJ Amsterdam, The Netherlands  
Affiliation: MIT Laboratory for Computer Science  CWI  University of Amsterdam, Programming Research Group  
Abstract: A general automaton model for timing-based systems is presented and is used as the context for developing a variety of simulation proof techniques for such systems. These techniques include (1) refinements, (2) forward and backward simulations, (3) forward-backward and backward-forward simulations, and (4) history and prophecy relations. Soundness and completeness results are given for these simulations. These results are largely analogous to the results in Part I of this paper for untimed systems. In fact, many of the results for the timed case are obtained as consequences of the analogous results for the untimed case. 1991 Mathematics Subject Classification: 68Q60, 68Q68. 1991 CR Categories: C.3, F.1.1, F.3.1. Keywords and Phrases: Timing-based systems, real-time, timed automata, simulations, refinement mappings, forward simulations, backward simulations, forward-backward simulations, backward-forward simulations, history relations, prophecy relations. Notes: This work was supported by ONR contracts N00014-85-K-0168 and N00014-91-J-1988, by NSF grant CCR-8915206, and by DARPA contracts N00014-89-J-1988 and N00014-92-J-4033. Part of this work took place while the second author was employed by the Ecole des Mines, CMA, Sophia Antipolis, France. The second author also received partial support from the ESPRIT Basic Research Action 7166, CONCUR2. An earlier verion of this paper (Part I+II) appeared as [14]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alur and D.L. Dill. </author> <title> The theory of timed automata. </title> <editor> In de Bakker et al. </editor> <volume> [6], </volume> <pages> pages 45-73. </pages>
Reference-contexts: Our model can also be considered to be a generalization of the finite-state model of Alur and Dill <ref> [1] </ref>, since we are not restricted to the special structure of [1] for specifying time bounds. Also, we do not impose any finiteness restrictions on our automata. On the other hand, the model of [1] does have some facility for modeling liveness. 3 We refer the reader to Part I for <p> Our model can also be considered to be a generalization of the finite-state model of Alur and Dill <ref> [1] </ref>, since we are not restricted to the special structure of [1] for specifying time bounds. Also, we do not impose any finiteness restrictions on our automata. On the other hand, the model of [1] does have some facility for modeling liveness. 3 We refer the reader to Part I for a general discussion of the various simulation techniques, for the case <p> can also be considered to be a generalization of the finite-state model of Alur and Dill <ref> [1] </ref>, since we are not restricted to the special structure of [1] for specifying time bounds. Also, we do not impose any finiteness restrictions on our automata. On the other hand, the model of [1] does have some facility for modeling liveness. 3 We refer the reader to Part I for a general discussion of the various simulation techniques, for the case of untimed systems. <p> Then automaton D is semi-timed, but not timed. Proof: One can easily check that D is semi-timed. However, it is not timed: D does not satisfy the trajectory axiom S5 because that would imply, for instance, that the interval <ref> [0; 1] </ref> of reals can be injectively mapped into the rationals. At the time we first defined axiom S5, we constructed a complex counterexample to show that it was stronger than S5 0 . The simpler counterexample described above was subsequently discovered by Steve Schneider.
Reference: [2] <author> J.C.M. Baeten and J.A. Bergstra. </author> <title> Real time process algebra. </title> <journal> Journal of Formal Aspects of Computing Science, </journal> <volume> 3(2) </volume> <pages> 142-188, </pages> <year> 1991. </year>
Reference-contexts: We propose a notion of timed automaton, which is just an automaton (or labeled transition system) equipped with some additional structure. Specifically, each state of the automaton has an associated current time value. (Thus we use absolute time in the sense of <ref> [2] </ref>.) The actions of the automaton are of three kinds: visible actions, a special internal action t , and a special time-passage action -. <p> As in many other formalisms for real-time (See, for instance, <ref> [2, 5, 8, 16, 18, 19, 23] </ref>.), all actions except for the time-passage action are modeled as occurring instantaneously, i.e., they do not change the time component of the state.
Reference: [3] <editor> J.C.M. Baeten and J.W. Klop, editors. </editor> <booktitle> Proceedings CONCUR 90, Amsterdam, volume 458 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference: [4] <author> J. van Benthem. </author> <title> Time, logic and computation. </title> <editor> In J.W. de Bakker, W.P. de Roever, and G. Rozenberg, editors, </editor> <title> REX School/Workshop on Linear Time, Branching Time and Partial Order in Logics and Models for Concurrency, Noordwijkerhout, </title> <booktitle> volume 354 of Lecture Notes in Computer Science, </booktitle> <pages> pages 1-49. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: Thus we can 34 generalize our notion of a timed automaton by parametrizing it with a time domain (T; 0; &lt;). For an overview of different types of time domains that have been proposed in the literature we refer to <ref> [4] </ref>. Define a semi-timed automaton to be a timed automaton, except that it does not have to satisfy S5, but only the weaker axiom S5 0 . Here we give three results: 1. Each time deterministic semi-timed automaton is a timed automaton. 2.
Reference: [5] <author> G. Berry and L. Cosserat. </author> <title> The Esterel synchronous programming language and its mathematical semantics. In S.D. </title> <editor> Brookes, A.W. Roscoe, and G. Winskel, editors, </editor> <booktitle> Seminar on Concurrency, volume 197 of Lecture Notes in Computer Science, </booktitle> <pages> pages 389-448. </pages> <publisher> Springer-Verlag, </publisher> <year> 1984. </year> <month> 36 </month>
Reference-contexts: As in many other formalisms for real-time (See, for instance, <ref> [2, 5, 8, 16, 18, 19, 23] </ref>.), all actions except for the time-passage action are modeled as occurring instantaneously, i.e., they do not change the time component of the state.
Reference: [6] <editor> J.W. de Bakker, C. Huizing, W.P. de Roever, and G. Rozenberg, editors. </editor> <booktitle> Proceedings of the REX Workshop "Real-Time: Theory in Practice", volume 600 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [7] <author> R. Gerber and I. Lee. </author> <title> The formal treatment of priorities in real-time computation. </title> <booktitle> In Proceedings 6th IEEE Workshop on Real-Time Software and Operating Systems, </booktitle> <year> 1989. </year>
Reference-contexts: To specify times, we use a dense time domain, specifically, the nonnegative reals (starting with time 0 in the initial state), and we impose no lower bound on the time between events. This choice distinguishes our work from many others', e.g., <ref> [7, 8, 18, 19, 21, 24] </ref>, in which discrete time values or universal positive lower bounds on step time are used. Use of real 2 valued time is less restrictive, and we believe that the extra flexibility will be useful in the design and analysis of timing-based distributed algorithms.
Reference: [8] <author> J.F. Groote. </author> <title> Specification and verification of real time systems in ACP. </title> <type> Report CS-R9015, </type> <institution> CWI, </institution> <address> Amsterdam, </address> <year> 1990. </year> <note> An extended abstract appeared in L. </note> <editor> Logrippo, R.L. Probert and H. Ural, editors, </editor> <booktitle> Proceedings 10 th International Symposium on Protocol Specification, Testing and Verification, Ottawa, </booktitle> <pages> pages 261-274, </pages> <year> 1990. </year>
Reference-contexts: As in many other formalisms for real-time (See, for instance, <ref> [2, 5, 8, 16, 18, 19, 23] </ref>.), all actions except for the time-passage action are modeled as occurring instantaneously, i.e., they do not change the time component of the state. <p> To specify times, we use a dense time domain, specifically, the nonnegative reals (starting with time 0 in the initial state), and we impose no lower bound on the time between events. This choice distinguishes our work from many others', e.g., <ref> [7, 8, 18, 19, 21, 24] </ref>, in which discrete time values or universal positive lower bounds on step time are used. Use of real 2 valued time is less restrictive, and we believe that the extra flexibility will be useful in the design and analysis of timing-based distributed algorithms.
Reference: [9] <author> A. Jeffrey. </author> <title> A linear time process algebra. </title> <editor> In K.G. Larsen and A. Skou, editors, </editor> <booktitle> Proceedings of the Third Workshop on Computer Aided Verification, </booktitle> <address> Aalborg, Denmark, </address> <month> July </month> <year> 1991, </year> <booktitle> volume 575 of Lecture Notes in Computer Science, </booktitle> <pages> pages 432-442. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: As the time domain for our timed automata we have chosen the set R 0 of nonnegative real numbers. We could have chosen a different time domain though, or parametrized our automata with an arbitrary time domain as in <ref> [9, 20] </ref>. In order to state the axioms for timed automata, all we need is the presence of a set T of points in time, containing an initial point in time 0, and equipped with a binary relation &lt; expressing precedence.
Reference: [10] <author> A. Jeffrey, S. Schneider, and F.W. Vaandrager. </author> <title> A comparison of additivity axioms in timed transition systems, </title> <note> 1993. In preparation. </note>
Reference-contexts: It is immediate from the definition of a trajectory that S5 ) S5 0 . In this appendix we discuss the reverse implication. The relationship between the two axioms is also investigated in <ref> [10] </ref>. As the time domain for our timed automata we have chosen the set R 0 of nonnegative real numbers. We could have chosen a different time domain though, or parametrized our automata with an arbitrary time domain as in [9, 20].
Reference: [11] <author> B. Lampson, N. Lynch, and J. Stgaard-Andersen. </author> <title> Correctness of at-most-once message delivery protocols, </title> <note> 1993. Submitted for publication. </note>
Reference-contexts: It remains to apply these methods to a wide range of practical verification examples, in order to determine their utility, to develop them further, and to exploit their power. Timed forward simulations have already been used in [12] to verify some simple toy example timed systems, and in <ref> [11] </ref> to verify more realistic algorithms. These uses already suggest that 33 at least the timed forward simulations will prove to be very useful in practice, but more evidence is needed. <p> It remains to extend the model in these ways, while preserving the ability to use the simpler model of this paper where appropriate. Some preliminary work on integrating liveness into the present model appears in <ref> [11] </ref>. Both liveness and probabilities introduce their own sets of additional proof methods, e.g., temporal logic and Markov analysis. Eventually, the entire collection of proof tools should be integrated into a sensibly coordinated whole.
Reference: [12] <author> N.A. Lynch and H. Attiya. </author> <title> Using mappings to prove timing properties. </title> <journal> Distributed Computing, </journal> <volume> 6(2) </volume> <pages> 121-139, </pages> <year> 1992. </year>
Reference-contexts: Again, we prove soundness and completeness theorems, and theorems relating the different kinds of simulations to each other. The goal of extending simulation techniques to timing-based systems is also the motivation for the work of Lynch and Attiya in <ref> [12] </ref>. That work, however, only explores forward simulations. Also, the model used in [12] has considerably more structure than the very general model proposed here; it is based closely on the timed automaton model of Merritt, Modugno and Tuttle [16], which assumes that the system being modeled is describable in terms <p> The goal of extending simulation techniques to timing-based systems is also the motivation for the work of Lynch and Attiya in <ref> [12] </ref>. That work, however, only explores forward simulations. Also, the model used in [12] has considerably more structure than the very general model proposed here; it is based closely on the timed automaton model of Merritt, Modugno and Tuttle [16], which assumes that the system being modeled is describable in terms of a collection of separate tasks, each with associated upper and lower bounds <p> This extra structure supports the development of a useful progress measure proof method, which we do not develop here. On the other hand, the basic theorems about forward simulations that appear in <ref> [12] </ref> are stated in a setting that has more structure than is really necessary for those theorems. In this paper, we make only those assumptions that are needed for the basic results about simulation proof techniques. <p> In this paper we will not be concerned with I/O feasibility. Instead our objective will be to develop simulation-style proof techniques to show inclusion of timed traces. Even though our notion of timed automata has less structure than those of [16] and <ref> [12] </ref>, it is closely related to those models. Ours can be regarded as a generalization of the model in [12], in which the notion of separate tasks is removed. (There are some minor distinctions; for instance, we do not include names for internal actions, but label them all by the special <p> Even though our notion of timed automata has less structure than those of [16] and <ref> [12] </ref>, it is closely related to those models. Ours can be regarded as a generalization of the model in [12], in which the notion of separate tasks is removed. (There are some minor distinctions; for instance, we do not include names for internal actions, but label them all by the special symbol t . <p> The approach is analogous to that followed for Milner's CCS [17] where the problem of establishing a weak bisimulation is reduced to the problem of finding a strong bisimulation. Another example of this approach appears in <ref> [12] </ref>, where the problem of showing including of timed behaviors of certain kinds of timed automata is reduced to that of proving inclusion between sets of admissible behaviors of certain derived I/O automata. <p> It remains to apply these methods to a wide range of practical verification examples, in order to determine their utility, to develop them further, and to exploit their power. Timed forward simulations have already been used in <ref> [12] </ref> to verify some simple toy example timed systems, and in [11] to verify more realistic algorithms. These uses already suggest that 33 at least the timed forward simulations will prove to be very useful in practice, but more evidence is needed. Note that the results in [12] use a more <p> been used in <ref> [12] </ref> to verify some simple toy example timed systems, and in [11] to verify more realistic algorithms. These uses already suggest that 33 at least the timed forward simulations will prove to be very useful in practice, but more evidence is needed. Note that the results in [12] use a more restrictive model than the one in this paper, namely, that of [16]. The extra structure of that model supports development of specialized progress measure techniques not discussed in this paper. It remains to develop this and other specialized methods further.
Reference: [13] <author> N.A. Lynch and M.R. Tuttle. </author> <title> Hierarchical correctness proofs for distributed algorithms. </title> <booktitle> In Proceedings of the 6 th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 137-151, </pages> <month> August </month> <year> 1987. </year> <note> A full version is available as MIT Technical Report MIT/LCS/TR-387. </note>
Reference-contexts: This distinction is unimportant in a setting without separate tasks.) Also, the model of [16] includes treatment of fairness and liveness, whereas our model does not. (The model in [16] was originally designed as an extension of the untimed input/output automaton model of <ref> [13] </ref>, which emphasizes the notion of fair execution.) The reason we have not equipped our model with facilities for handling fairness and liveness is that we believe that in the setting of timing-based systems, most properties of practical importance can be expressed as safety properties, given the admissibility assumption that time
Reference: [14] <author> N.A. Lynch and F.W. Vaandrager. </author> <title> Forward and backward simulations for timing-based systems. </title> <editor> In de Bakker et al. </editor> <volume> [6], </volume> <pages> pages 397-446. </pages>
Reference-contexts: The usual kind of execution can be regarded as "sampling" our kind of timed execution at countably many points in time, as we show in Subsection 2.4.1 below. 1 This axiom is a strengthening of a similar axiom used in <ref> [14, 20, 23] </ref>, which, rephrased in our terminology, reads: S5 0 If s 0 -! s and s 0 :now &lt; t &lt; s:now , then there is an s 00 with s 00 :now = t such that s 0 -! s 00 and s 00 -! s.
Reference: [15] <author> N.A. Lynch and F.W. Vaandrager. </author> <title> Forward and backward simulations part I: </title> <journal> Untimed systems, </journal> <note> 1993. In preparation. </note>
Reference-contexts: The kinds of simulation techniques we describe are timed versions of the techniques studied in Part I of this paper, <ref> [15] </ref>. That is, we consider timed versions of refinements, forward simulations, backward simulations, forward-backward, backward-forward simulations, history relations and prophecy relations. Again, we prove soundness and completeness theorems, and theorems relating the different kinds of simulations to each other. <p> Finally, Section 7 contains our conclusions. 2 Timed Automata and Their Behaviors This section presents the basic definitions and results for timed automata. The development is generally parallel to that in Section 3 of Part I of this paper <ref> [15] </ref>. A 2.1 Timed Automata A timed automaton A is an automaton whose set of actions contains a special time-passage action -. The set of visible actions is defined by vis (A) = ext (A) f-g. <p> These include timed refinements, timed forward and backward simulations and combinations thereof, and timed history and prophecy relations. These techniques are analogous to those described in Part I, <ref> [15] </ref>, for untimed systems. As in that paper, we present basic results for all of the simulations, including soundness and completeness results. The development is organized so that the proofs are based on the results of Part I. <p> Eventually, the entire collection of proof tools should be integrated into a sensibly coordinated whole. Acknowledgements We thank Albert Meyer, Jeff Sanders, Roberto Segala, Jtrgen Stgaard-Andersen, Eugene Stark and George Varghese for their valuable criticism and useful comments on this paper and on <ref> [15] </ref>. We also thank the organizers of the 1991 REX Workshop for providing the environment for an active research interchange that led to many improvements in our work.
Reference: [16] <author> M. Merritt, F. Modugno, and M. Tuttle. </author> <title> Time constrained automata. </title> <editor> In J.C.M. Baeten and J.F. Groote, editors, </editor> <booktitle> Proceedings CONCUR 91, Amsterdam, volume 527 of Lecture Notes in Computer Science, </booktitle> <pages> pages 408-423. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: That work, however, only explores forward simulations. Also, the model used in [12] has considerably more structure than the very general model proposed here; it is based closely on the timed automaton model of Merritt, Modugno and Tuttle <ref> [16] </ref>, which assumes that the system being modeled is describable in terms of a collection of separate tasks, each with associated upper and lower bounds on its speed. This extra structure supports the development of a useful progress measure proof method, which we do not develop here. <p> As in many other formalisms for real-time (See, for instance, <ref> [2, 5, 8, 16, 18, 19, 23] </ref>.), all actions except for the time-passage action are modeled as occurring instantaneously, i.e., they do not change the time component of the state. <p> In this paper we will not be concerned with I/O feasibility. Instead our objective will be to develop simulation-style proof techniques to show inclusion of timed traces. Even though our notion of timed automata has less structure than those of <ref> [16] </ref> and [12], it is closely related to those models. <p> This distinction is unimportant in a setting without separate tasks.) Also, the model of <ref> [16] </ref> includes treatment of fairness and liveness, whereas our model does not. (The model in [16] was originally designed as an extension of the untimed input/output automaton model of [13], which emphasizes the notion of fair execution.) The reason we have not equipped our model with facilities for handling fairness and <p> This distinction is unimportant in a setting without separate tasks.) Also, the model of <ref> [16] </ref> includes treatment of fairness and liveness, whereas our model does not. (The model in [16] was originally designed as an extension of the untimed input/output automaton model of [13], which emphasizes the notion of fair execution.) The reason we have not equipped our model with facilities for handling fairness and liveness is that we believe that in the setting of timing-based systems, most properties of <p> These uses already suggest that 33 at least the timed forward simulations will prove to be very useful in practice, but more evidence is needed. Note that the results in [12] use a more restrictive model than the one in this paper, namely, that of <ref> [16] </ref>. The extra structure of that model supports development of specialized progress measure techniques not discussed in this paper. It remains to develop this and other specialized methods further. It remains to develop other proof methods within the same general timed automaton model.
Reference: [17] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <booktitle> Prentice-Hall International, </booktitle> <address> Englewood Cliffs, </address> <year> 1989. </year>
Reference-contexts: This reduction solves our problem, in a sense, since it allows us to use the various simulation techniques of Part I to prove inclusion results for timed automata. The approach is analogous to that followed for Milner's CCS <ref> [17] </ref> where the problem of establishing a weak bisimulation is reduced to the problem of finding a strong bisimulation.
Reference: [18] <author> F. Moller and C. Tofts. </author> <title> A temporal calculus of communicating systems. </title> <booktitle> In Baeten and Klop [3], </booktitle> <pages> pages 401-415. 37 </pages>
Reference-contexts: As in many other formalisms for real-time (See, for instance, <ref> [2, 5, 8, 16, 18, 19, 23] </ref>.), all actions except for the time-passage action are modeled as occurring instantaneously, i.e., they do not change the time component of the state. <p> To specify times, we use a dense time domain, specifically, the nonnegative reals (starting with time 0 in the initial state), and we impose no lower bound on the time between events. This choice distinguishes our work from many others', e.g., <ref> [7, 8, 18, 19, 21, 24] </ref>, in which discrete time values or universal positive lower bounds on step time are used. Use of real 2 valued time is less restrictive, and we believe that the extra flexibility will be useful in the design and analysis of timing-based distributed algorithms.
Reference: [19] <author> X. Nicollin, J.-L. Richier, J. Sifakis, and J. Voiron. </author> <title> ATP: An algebra for timed processes. </title> <editor> In M. Broy and C.B. Jones, editors, </editor> <booktitle> Proceedings IFIP TC2 Working Conference on Programming Concepts and Methods, Sea of Gallilea, Israel, </booktitle> <pages> pages 402-429, </pages> <year> 1990. </year>
Reference-contexts: As in many other formalisms for real-time (See, for instance, <ref> [2, 5, 8, 16, 18, 19, 23] </ref>.), all actions except for the time-passage action are modeled as occurring instantaneously, i.e., they do not change the time component of the state. <p> To specify times, we use a dense time domain, specifically, the nonnegative reals (starting with time 0 in the initial state), and we impose no lower bound on the time between events. This choice distinguishes our work from many others', e.g., <ref> [7, 8, 18, 19, 21, 24] </ref>, in which discrete time values or universal positive lower bounds on step time are used. Use of real 2 valued time is less restrictive, and we believe that the extra flexibility will be useful in the design and analysis of timing-based distributed algorithms.
Reference: [20] <author> X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> From ATP to timed graphs and hybrid systems. </title> <editor> In de Bakker et al. </editor> <volume> [6], </volume> <pages> pages 549-572. </pages>
Reference-contexts: The usual kind of execution can be regarded as "sampling" our kind of timed execution at countably many points in time, as we show in Subsection 2.4.1 below. 1 This axiom is a strengthening of a similar axiom used in <ref> [14, 20, 23] </ref>, which, rephrased in our terminology, reads: S5 0 If s 0 -! s and s 0 :now &lt; t &lt; s:now , then there is an s 00 with s 00 :now = t such that s 0 -! s 00 and s 00 -! s. <p> As the time domain for our timed automata we have chosen the set R 0 of nonnegative real numbers. We could have chosen a different time domain though, or parametrized our automata with an arbitrary time domain as in <ref> [9, 20] </ref>. In order to state the axioms for timed automata, all we need is the presence of a set T of points in time, containing an initial point in time 0, and equipped with a binary relation &lt; expressing precedence.
Reference: [21] <author> G.M. Reed and A.W. Roscoe. </author> <title> A timed model for communicating sequential processes. </title> <journal> Theoretical Computer Science, </journal> <volume> 58 </volume> <pages> 249-261, </pages> <year> 1988. </year>
Reference-contexts: To specify times, we use a dense time domain, specifically, the nonnegative reals (starting with time 0 in the initial state), and we impose no lower bound on the time between events. This choice distinguishes our work from many others', e.g., <ref> [7, 8, 18, 19, 21, 24] </ref>, in which discrete time values or universal positive lower bounds on step time are used. Use of real 2 valued time is less restrictive, and we believe that the extra flexibility will be useful in the design and analysis of timing-based distributed algorithms. <p> activity occurs within a bounded period of time. (For the second type of Zeno timed execution described above, the "infinite amount of activity" corresponds to the infinite number of time-passage steps needed to span the right-open interval.) Some models of real-time computation, for instance the earlier version of Timed CSP <ref> [21] </ref>, exclude Zeno executions altogether, but we allow them in order to make our results as general as possible. We note that, according to our definitions, there are timed automata in which from some (or even all) states no admissible timed execution fragment is possible.
Reference: [22] <author> F.W. Vaandrager and N.A. Lynch. </author> <title> Action transducers and timed automata. </title> <editor> In W.R. Cleaveland, editor, </editor> <booktitle> Proceedings CONCUR 92, </booktitle> <address> Stony Brook, NY, USA, </address> <booktitle> volume 630 of Lecture Notes in Computer Science, </booktitle> <pages> pages 436-455. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Second, as the infinite behaviors, we take the admissible timed traces, each of which consists of a sequence of timed external actions that can occur in an execution in which the time grows unboundedly (i.e., a "non-Zeno" infinite execution). In <ref> [22] </ref> it is argued that inclusion of finite and admissible timed traces is a good notion of implementation, provided that the implementation automaton satisfies the technical condition of I/O feasibility. In this paper we will not be concerned with I/O feasibility. <p> It remains to develop this and other specialized methods further. It remains to develop other proof methods within the same general timed automaton model. In particular, we are interested in extending the methods of process algebra to our timed automaton model. Our recent paper <ref> [22] </ref> contains the beginning of such work, including definitions of interesting operators on timed automata, and proofs of substitutivity results for the timed trace semantics, but there is more to be done.
Reference: [23] <author> Wang Yi. </author> <title> Real-time behaviour of asynchronous agents. </title> <booktitle> In Baeten and Klop [3], </booktitle> <pages> pages 502-520. </pages>
Reference-contexts: As in many other formalisms for real-time (See, for instance, <ref> [2, 5, 8, 16, 18, 19, 23] </ref>.), all actions except for the time-passage action are modeled as occurring instantaneously, i.e., they do not change the time component of the state. <p> The usual kind of execution can be regarded as "sampling" our kind of timed execution at countably many points in time, as we show in Subsection 2.4.1 below. 1 This axiom is a strengthening of a similar axiom used in <ref> [14, 20, 23] </ref>, which, rephrased in our terminology, reads: S5 0 If s 0 -! s and s 0 :now &lt; t &lt; s:now , then there is an s 00 with s 00 :now = t such that s 0 -! s 00 and s 00 -! s. <p> A The Trajectory Axiom Of the five axioms we give for timed automata, the axiom S5 If s 0 -! s then there exists a trajectory from s 0 to s. seems to us like the only one that might be controversial. In Wang <ref> [23] </ref> and elsewhere ([14, 20]), the following weaker axiom S5 0 occurs instead: S5 0 If s 0 -! s and s 0 :now &lt; t &lt; s:now , then there is an s 00 with s 00 :now = t such that s 0 -! s 00 and s 00
Reference: [24] <author> A. Zwarico. </author> <title> Timed Acceptance: An Algebra of Time Dependent Computing. </title> <type> PhD thesis, </type> <institution> Department of Computer and Information Science, University of Pennsylvania, </institution> <year> 1988. </year> <month> 38 </month>
Reference-contexts: To specify times, we use a dense time domain, specifically, the nonnegative reals (starting with time 0 in the initial state), and we impose no lower bound on the time between events. This choice distinguishes our work from many others', e.g., <ref> [7, 8, 18, 19, 21, 24] </ref>, in which discrete time values or universal positive lower bounds on step time are used. Use of real 2 valued time is less restrictive, and we believe that the extra flexibility will be useful in the design and analysis of timing-based distributed algorithms.
References-found: 24

