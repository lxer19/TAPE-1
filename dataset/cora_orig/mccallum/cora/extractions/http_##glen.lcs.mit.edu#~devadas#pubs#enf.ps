URL: http://glen.lcs.mit.edu/~devadas/pubs/enf.ps
Refering-URL: http://glen.lcs.mit.edu/~devadas/pubs/form.html
Root-URL: 
Title: Computation of Floating Mode Delay in Combinational Circuits: Theory and Algorithms  
Author: Srinivas Devadas Kurt Keutzer Sharad Malik 
Address: Cambridge, MA  Mountain View, CA  Princeton, NJ  
Affiliation: MIT  Synopsys  Princeton University  
Abstract: This paper addresses the problem of accurately computing the delay of a combinational logic circuit in the floating mode of operation. (In this mode the state of the circuit is considered to be unknown when a vector is applied at the inputs.) It is well known that using the length of the topologically longest path as an estimate of circuit delay may be pessimistic since this path may be false, i.e. it cannot propagate an event. Thus, the true delay corresponds to the length of the longest true path. This forces us to examine the conditions under which a path is true. We introduce the notion of static co-sensitization of paths which leads us to necessary and sufficient conditions for determining the truth or falsity of a single path, or a set of paths. We apply these results to develop a delay computation algorithm that has the unique feature that it is able to determine the truth or falsity of entire sets of paths simultaneously. This algorithm uses conventional stuck-at-fault testing techniques to arrive at a delay computation method that is both correct and computationally practical, even for particularly difficult circuits. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. B. Armstrong. </author> <title> On Finding a Nearly Minimal Set of Fault Detection Tests for Combination Logic Nets. </title> <journal> IEEE Transactions on Computers, </journal> <volume> EC-15(2):66-73, </volume> <month> February </month> <year> 1966. </year>
Reference-contexts: We use a circuit representation developed by Armstrong, called the Equivalent Normal Form <ref> [1] </ref>, to examine the interactions between the functional and temporal aspects of the behavior of a circuit. <p> Our approach is to use an alternative representation of a multilevel circuit developed by Armstrong <ref> [1] </ref> called the equivalent normal form or ENF. The ENF of a circuit is a two-level representation that represents the logic function computed by the multilevel circuit while retaining the path information. We illustrate the derivation of the ENF of a circuit with the help of an example taken from [1]. <p> <ref> [1] </ref> called the equivalent normal form or ENF. The ENF of a circuit is a two-level representation that represents the logic function computed by the multilevel circuit while retaining the path information. We illustrate the derivation of the ENF of a circuit with the help of an example taken from [1]. First, the circuit of Figure 1 is made internal fanout free by unfolding it. This is illustrated in Figure 2. The numbers inside the gates are unique identifiers for those gates. This involves duplicating gates if needed so that each copy of a gate has a single fanout connection.
Reference: [2] <author> R. </author> <title> Bergamaschi. </title> <booktitle> The Effects of False Paths in High-Level Synthesis . In The Proceedings of the International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1991. </year>
Reference-contexts: CPU Time Longest True adder16x2 25.0 12.0 96s adder16x4 21.0 12.0 132s mult8x8 44.0 44.0 6s mult16x16 88.0 88.0 23s C6288 94.0 94.0 18.9m bw 29.0 25.0 10s Table 1: Timing analysis using Timed-Test Generation 9 Concluding Remarks Due to the ease of generating false paths in high-level synthesis systems <ref> [2] </ref> there is a growing need for correctly identifying false paths to guide performance optimization, in a computationally efficient manner. In this paper we provided necessary and sufficient conditions for a path to be true in the floating mode of operation.
Reference: [3] <author> D. Brand and V. Iyengar. </author> <title> Timing analysis using functional analysis. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(10), </volume> <month> October </month> <year> 1988. </year>
Reference-contexts: This task should be performed by the analysis algorithm itself. Perhaps the first attempt at using the functional behavior of circuit elements during timing analysis was made by Brand and Iyengar <ref> [3] </ref>. However, as pointed out by the authors themselves, the conditions established for a path to be false were only necessary, not sufficient, and hence the computed delay was a correct but possibly pessimistic estimate.
Reference: [4] <author> M. A. Breuer and A. D. Friedman. </author> <title> Diagnosis and Reliable Design of Digital Systems. </title> <publisher> Computer Science Press, </publisher> <year> 1976. </year>
Reference-contexts: A circuit has a multiple-stuck-at-fault (multifault) if there are one or more stuck-at-faults in the circuit. A multifault is denoted as a set of its single fault components. For a fuller treatment of testing terminology, see <ref> [4, 8] </ref>. 3.3 Timing/Delay Testing A path in a combinational circuit is an alternating sequence of vertices and edges, fv 0 ; e 0 ; :::; v n ; e n ; v n+1 g, where edge e i , 1 i n, connects the output of vertex v i to
Reference: [5] <author> H. C. Chen and D. H. Du. </author> <title> Path Sensitization in Critical Path Problem. </title> <booktitle> In Proceedings, Tau 90: 1990 ACM Workshop on Timing Issues in the Specification and Synthesis of Digital Systems, </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: These paths are said to be false and must be excluded in analyzing the delay of the circuit. This paper examines the problem of computing the true delay of a combinational logic circuit that ignores the contribution of these false paths. We consider the floating mode of operation <ref> [5] </ref>. In the floating mode of operation when a vector is applied to the primary inputs, the states of the nodes in the circuit are assumed to be unknown. Pessimistic assumptions are made about the states so as to consider any possible event propagation based on previous history. <p> We then use these conditions to derive a delay analysis algorithm in Section 7. Preliminary results on applying 1 Chen and Du <ref> [5] </ref> were the first to determine the the necessary and sufficient conditions for a path to be true, However, our analysis technique is unique and lends itself to easy extension in dealing with sets of paths. 2 this algorithm to particularly troublesome circuits are given in Section 8. 2 Previous Work <p> McGeer and Brayton introduced the notion of viability of paths, a path had to be viable for it to be true. Hence, viability too may pessimistically result in a path being classified as true, while it may actually be false. Chen and Du <ref> [5] </ref> were the first to propose necessary and sufficient conditions for a path in the circuit to be true. A common limitation of all of these previous techniques is that they focus on one path in the circuit at a time. <p> While more sophisticated delay parameters such as slope delays and separate rise and fall delays are not 2 This is the same as that introduced in <ref> [5] </ref>. 6 directly accommodated into the "delay lumped at a gate" paradigm, it will be subsequently shown in Section 7.3 that the results in this paper hold for even those models. In [5] the following results were shown: * For the floating mode of operation, circuit delay under the fixed, monotone <p> delays and separate rise and fall delays are not 2 This is the same as that introduced in <ref> [5] </ref>. 6 directly accommodated into the "delay lumped at a gate" paradigm, it will be subsequently shown in Section 7.3 that the results in this paper hold for even those models. In [5] the following results were shown: * For the floating mode of operation, circuit delay under the fixed, monotone speedup and bounded delay model are the same (for the same upper bound on each delay value). * The circuit delay in the floating mode is an upper bound (hence correct though <p> Similarly for a = 0, the side input at the or gate 3 The fact that a path may be classified as being true even when it is false has been previously demonstrated by Chen and Du <ref> [5] </ref>. The purpose of this section is to show that the specific condition that viability does not consider is nothing but static co-sensitization. 12 is controlling while the value along the path is non-controlling. Thus, in either case the path is not statically co-sensitizable. <p> This topological interpretation has been used previously as the starting point for the delay computation algorithm presented in <ref> [5] </ref>. However, as we will see in the next section, analysis of the ENF enables us to strengthen this observation by extending this result to entire sets of paths. <p> With the former expansion the rising delay of the circuit in Figure 8 is 100 while with the latter it is 0! 7.4 Comparison with Previous Work The techniques previously described in the literature for delay analysis such as those presented in <ref> [12, 5] </ref> determine the condition for a path to be true. This reduces to a satisfiability problem where a satisfying input assignment needs to be determined that will make that condition true.
Reference: [6] <author> J. J. Cherry. Pearl: </author> <title> A CMOS timing analyzer. </title> <booktitle> In The Proceedings of the Design Automation Conference, </booktitle> <year> 1988. </year>
Reference-contexts: Initial attempts to deal with false paths in timing analysis depended on the designer providing some input to the timing analysis routine. This was done by explicitly listing the paths that were known to be false and had to be ignored <ref> [10, 6] </ref>. This had two drawbacks. First, the number of false paths may be very large, making their explicit listing very difficult.
Reference: [7] <author> S. Devadas, K. Keutzer, S. Malik, and A. Wang. </author> <title> Computation of Floating Mode Delay in Logic Circuits: Practice and Implementation. </title> <type> In MIT Technical Report, </type> <institution> Massachusetts Institute of Technology, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: Exactly the same paradigm is followed here for timed test generation. No details are provided here. These are reported in a companion paper <ref> [7] </ref>. 21 7.2.1 Bounded Justification It is interesting to note that the timing information also helps in pruning the search space during justification in the process of test pattern generation. <p> The multiplier examples take over 20 hours of CPU time when run on a path by path basis. The CPU times reported for our implementation were on a SUN-4 320 workstation. More com <br>- prehensive experimental results are reported in <ref> [7] </ref>. 25 Name Delay Estimate CPU Time Longest True adder16x2 25.0 12.0 96s adder16x4 21.0 12.0 132s mult8x8 44.0 44.0 6s mult16x16 88.0 88.0 23s C6288 94.0 94.0 18.9m bw 29.0 25.0 10s Table 1: Timing analysis using Timed-Test Generation 9 Concluding Remarks Due to the ease of generating false paths
Reference: [8] <author> H. Fujiwara. </author> <title> Logic Testing and Design for Testability. </title> <publisher> MIT Press, </publisher> <address> Cambridge MA, </address> <year> 1985. </year>
Reference-contexts: A circuit has a multiple-stuck-at-fault (multifault) if there are one or more stuck-at-faults in the circuit. A multifault is denoted as a set of its single fault components. For a fuller treatment of testing terminology, see <ref> [4, 8] </ref>. 3.3 Timing/Delay Testing A path in a combinational circuit is an alternating sequence of vertices and edges, fv 0 ; e 0 ; :::; v n ; e n ; v n+1 g, where edge e i , 1 i n, connects the output of vertex v i to
Reference: [9] <author> P. Goel. </author> <title> An Implicit Enumeration Algorithm to Generate Tests for Combinational Logic Circuits. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C30(3):215-222, </volume> <month> March </month> <year> 1981. </year>
Reference-contexts: Thus we see that these bounds prune the search for error values during justification. It should be noted that the exact procedure used for justification is different for different testing algorithms. For example, in PODEM <ref> [9] </ref> justification is only done for fault excitation. Since the multifault in question is at the primary input fanout edges, justification is trivial for that case.
Reference: [10] <author> R. B. Hitchcock. </author> <title> Timing verification and the timing analysis program. </title> <booktitle> In The Proceedings of the Design Automation Conference, </booktitle> <year> 1982. </year>
Reference-contexts: Initial attempts to deal with false paths in timing analysis depended on the designer providing some input to the timing analysis routine. This was done by explicitly listing the paths that were known to be false and had to be ignored <ref> [10, 6] </ref>. This had two drawbacks. First, the number of false paths may be very large, making their explicit listing very difficult.
Reference: [11] <author> V. Hrapcenko. </author> <title> Depth and delay in a network. </title> <journal> Soviet Math. Dokl., </journal> <volume> 19(4), </volume> <year> 1978. </year>
Reference-contexts: The important landmarks in this will be pointed out here. A more detailed history may be found in [12]. The earliest reference to this problem is made by Hrapcenko <ref> [11] </ref> who demonstrated the existence of false paths on a parametric circuit that he constructed. Initial attempts to deal with false paths in timing analysis depended on the designer providing some input to the timing analysis routine.
Reference: [12] <author> P. C. McGeer and R. K. Brayton. </author> <title> Integrating Functional and Temporal Domains in Logic Design. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year> <month> 27 </month>
Reference-contexts: The important landmarks in this will be pointed out here. A more detailed history may be found in <ref> [12] </ref>. The earliest reference to this problem is made by Hrapcenko [11] who demonstrated the existence of false paths on a parametric circuit that he constructed. Initial attempts to deal with false paths in timing analysis depended on the designer providing some input to the timing analysis routine. <p> This is referred to as the fixed delay model. However, in reality this number is typically an upper bound on the expected delay, so in fact the actual delay may be any number bounded above by d. This potential speedup is incorporated in the monotone speedup model <ref> [12] </ref>, which assumes that the delay for each component lies in the range [0; d]. The bounded delay model attempts to be more realistic about how much each component can in fact speed up. <p> Thus we see that static co-sensitization is a necessary condition for a path to be true. Note that static co-sensitization is a purely logical condition and does not depend on the delay values of the various circuit components. 6.1.1 Static Co-Sensitization and Viability In <ref> [12] </ref> a condition termed viability is presented as being sufficient for a path to be true. We now proceed to relate static co-sensitization to the relevant problem of viability of paths in a circuit. Consider a path passing through a gate g in the network. <p> Consider the circuit in Figure 8. Here the delay for the buffer after input x is 100 and all other gate delays are 0. 4 McGeer and Brayton <ref> [12] </ref> discuss the issue of complex gates in the context of viability. However only a conservative handling of the situation, using what they term as a symmetric macro-expansion, is provided. <p> With the former expansion the rising delay of the circuit in Figure 8 is 100 while with the latter it is 0! 7.4 Comparison with Previous Work The techniques previously described in the literature for delay analysis such as those presented in <ref> [12, 5] </ref> determine the condition for a path to be true. This reduces to a satisfiability problem where a satisfying input assignment needs to be determined that will make that condition true.
Reference: [13] <author> J. P. Roth. </author> <title> Diagnosis of Automata Failures: A Calculus and a Method. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 10 </volume> <pages> 278-291, </pages> <month> July </month> <year> 1966. </year> <month> 28 </month>
Reference-contexts: As shown in Figure 6 the first edge refers to the edge after any possible inverters at the primary inputs. This fault may then be tested using classic testing strategies. Using the classic D-calculus notation <ref> [13] </ref>, the test generation algorithm will try and find an input vector for which the stuck-at-0 edges have either a 0 or a D on them and a D is propagated to a primary output. 7.1 Timed Test Generation In general the leaf-DAG's are not available and are not easily constructed.
References-found: 13

