URL: http://www.isi.edu/teamcore/tambe/papers/98/robocup-lnai.ps
Refering-URL: http://www.isi.edu/soar/tambe/socteam.html
Root-URL: http://www.isi.edu
Email: robocup-sim@isi.edu  
Title: ISIS: Using an Explicit Model of Teamwork in RoboCup'97  
Author: Milind Tambe, Jafar Adibi, Yaser Al-Onaizan, Ali Erdem Gal A. Kaminka, Stacy C. Marsella, Ion Muslea, Marcello Tallis 
Web: www.isi.edu/soar/tambe/socteam.html  
Address: 4676 Admiralty Way Suite 1001 Marina del Rey, CA 90292, USA  
Affiliation: Information Sciences Institute and Computer Science Department University of Southern California  
Abstract: Team ISIS (ISI Synthetic) successfully participated in the first international RoboCup soccer tournament (RoboCup'97) held in Nagoya, Japan, in August 1997. ISIS won the third-place prize in over 30 teams that participated in the simulation league of RoboCup'97 (the most popular among the three RoboCup'97 leagues). In terms of research accomplishments, ISIS illustrated the usefulness of an explicit model of teamwork both in terms of reduced development time and improved teamwork flexibility. ISIS also took some initial steps towards learning of individual player skills. This paper discusses the design of ISIS in detail, with particular emphasis on its novel approach to team work.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> P. R. Cohen and H. J. Levesque. </author> <title> Teamwork. </title> <journal> Nous, </journal> <volume> 35, </volume> <year> 1991. </year>
Reference-contexts: This general model is motivated by the need for flexibility in team activities, as well as reuse of teamwork capabilities across domains [14, 15, 16]. STEAM uses the formal joint intentions framework <ref> [1, 7] </ref> as its basic building block, but with key enhancements to reflect the constraints of real-world domains. STEAM requires that individual team members explicitly represent their team's goals, plans and mutual beliefs. It then enables team members to autonomously reason about coordination and communication in teamwork, providing improved flexibility.
Reference: 2. <author> J. Firby. </author> <title> An investigation into reactive planning in complex domains. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI), </booktitle> <year> 1987. </year>
Reference-contexts: Activated operators are executed by the application rules. If the agent's current beliefs match an operator's termination rules, then the operator terminates. Agents built in other architectures such as PRS [4], BB1 [3], RAP <ref> [2] </ref> for dynamic domains may be similarly characterized in this fashion. The operator hierarchy shown in Figure 1 illustrates a portion of the operator hierarchy for ISIS player-agents in RoboCup.
Reference: 3. <author> B. Hayes-Roth, L. Brownston, and R. V. Gen. </author> <title> Multiagent collaobration in directed improvisation. </title> <booktitle> In Proceedings of the International Conference on Multi-Agent Systems (ICMAS-95), </booktitle> <year> 1995. </year>
Reference-contexts: Activated operators are executed by the application rules. If the agent's current beliefs match an operator's termination rules, then the operator terminates. Agents built in other architectures such as PRS [4], BB1 <ref> [3] </ref>, RAP [2] for dynamic domains may be similarly characterized in this fashion. The operator hierarchy shown in Figure 1 illustrates a portion of the operator hierarchy for ISIS player-agents in RoboCup.
Reference: 4. <author> F. F. Ingrand, M. P. Georgeff, , and A. S. Rao. </author> <title> An architecture for real-time reasoning and system control. </title> <journal> IEEE EXPERT, </journal> <volume> 7(6), </volume> <year> 1992. </year>
Reference-contexts: Activated operators are executed by the application rules. If the agent's current beliefs match an operator's termination rules, then the operator terminates. Agents built in other architectures such as PRS <ref> [4] </ref>, BB1 [3], RAP [2] for dynamic domains may be similarly characterized in this fashion. The operator hierarchy shown in Figure 1 illustrates a portion of the operator hierarchy for ISIS player-agents in RoboCup.
Reference: 5. <author> H. Kitano, M. Asada, Y. Kuniyoshi, I. Noda, and E. Osawa. </author> <title> Robocup: The robot world cup initiative. </title> <booktitle> In Proceedings of IJCAI-95 Workshop on Entertainment and AI/Alife, </booktitle> <year> 1995. </year>
Reference-contexts: Section 3 describes the teamwork capability in ISIS. Section 4 discusses C4.5-based learning in ISIS. Section 5 then provides a summary and topics for future work. We will assume that the reader is familiar with Soccer, the RoboCup simulation league rules, as well as the RoboCup simulator <ref> [5] </ref>. 2 ISIS Individual Agent Architecture An ISIS agent is developed as a two-level architecture. The lower level, developed in C, communicates inputs received from the RoboCup simulator (after sufficient pre-processing), to the higher level.
Reference: 6. <author> H. Kitano, M. Tambe, P. Stone, S. Coradesci, H. Matsubara, M. Veloso, I. Noda, E. Osawa, and M. Asada. </author> <title> The robocup synthetic agents' challenge. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <month> August </month> <year> 1997. </year>
Reference-contexts: ISIS's development is driven by the three research challenges emphasized in the RoboCup simulation league: (i) teamwork; (ii) multi-agent learning; and (iii) agent- and team-modeling <ref> [6] </ref>. With respect to teamwork, one key novelty in ISIS is its use of STEAM, a general, explicit model of teamwork to enable teamwork among player agents. <p> However, the RoboCup simulator will evolve for RoboCup'98, towards more human-like play. Overall, we hope to continue working on ISIS in preparation for RoboCup'98, and meet the research challenges outlined for the simulation league in teamwork, multi-agent learning and agent modeling <ref> [6] </ref>. Further information about ISIS, including the code, is available at the following web site: www.isi.edu/soar/tambe/socteam.html. STEAM code, with detailed documentation and traces is available at: www.isi.edu/soar/tambe/steam/steam.html ISIS team members can be reached at robocup-sim@isi.edu.
Reference: 7. <author> H. J. Levesque, P. R. Cohen, and J. Nunes. </author> <title> On acting together. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence. </booktitle> <address> Menlo Park, Calif.: </address> <publisher> AAAI press, </publisher> <year> 1990. </year>
Reference-contexts: This general model is motivated by the need for flexibility in team activities, as well as reuse of teamwork capabilities across domains [14, 15, 16]. STEAM uses the formal joint intentions framework <ref> [1, 7] </ref> as its basic building block, but with key enhancements to reflect the constraints of real-world domains. STEAM requires that individual team members explicitly represent their team's goals, plans and mutual beliefs. It then enables team members to autonomously reason about coordination and communication in teamwork, providing improved flexibility. <p> Currently, about 35% of the rules are reused in ISIS, and this reuse may likely increase in the future. 3.1 Joint Intentions STEAM's general model of teamwork is based on the joint intentions theory <ref> [7] </ref>. A joint intention of a team fi is based on its joint commitment, which is defined as a joint persistent goal (JPG). <p> Instead, a team operator can only be terminated if there is mutual belief that the operator is achieved, unachievable or irrelevant. Establishing such mutual belief in the termination of a team operator 1 WAG was originally called WG in <ref> [7] </ref>, but later termed WAG in [12]. can lead to communication. In particular, communication on termination of team operator arises if an agent privately realizes some fact relevant to the termination of a current team operator.
Reference: 8. <author> H. Matsubara, I. Noda, and K. Hiraki. </author> <title> Learning of cooperative actions in multi-agent systems: a case study of pass play in soccer. </title> <editor> In S. Sen, editor, </editor> <booktitle> AAAI Spring Symposium on Adaptation, Coevolution and Learning in multi-agent systems, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: The subteam players once again execute SIMPLE-DEFENSE to attempt to position themselves close to the goal. In this way, agents attempt to coordinate their defense of the goal, while also attempting to position themselves near it. 4 Learning Inspired by previous work on machine learning in RoboCup <ref> [13, 8] </ref>, we focused on techniques to improve individual players' skills to kick, pass, or intercept the ball. Fortunately, the two layer ISIS architecture helps to simplify the problem for skill learning.
Reference: 9. <author> A. Newell. </author> <title> Unified Theories of Cognition. </title> <publisher> Harvard Univ. Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference-contexts: For example, it does not decide which one of its three suggested kicking directions should actually be used by a player-agent. Instead, all such decision-making rests with the higher level, implemented in the Soar integrated AI architecture <ref> [9, 11] </ref>. Once the Soar-based higher-level reaches a decision, it communicates with the lower-level, which then sends the relevant information to the simulator. The Soar architecture involves dynamic execution of an operator (reactive plan) hierarchy. These operators consist of (i) precondition rules; (ii) application rules; and (iii) termination rules.
Reference: 10. <author> J. R. Quinlan. C4.5: </author> <title> Programs for machine learning. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference-contexts: Yet, a promising 35% of the original STEAM code was reused in RoboCup, and no new general-purpose teamwork code was required. With respect to multi-agent learning, the second challenge in RoboCup, ISIS took some initial steps towards addressing it. Using C4.5 <ref> [10] </ref>, ISIS players learned off-line to choose an intelligent kicking direction, avoiding areas of concentration of opponent players. With respect to the third challenge, ISIS also performed limited agent- and team-modeling (particularly relevant to teamwork), but detailed plan-recognition of opponent-team's strategies remains an open issue for future work. <p> That is, the learning algorithm is not forced to simultaneously learn to select if clearing the ball is the best choice among available alternatives. Instead, that decision is left to the higher-level. For the RoboCup'97 tournament, C4.5 <ref> [10] </ref> was successfully used in ISIS to learn to select an intelligent kicking direction. C4.5 rules were learned off-line via a batch of training examples to select a direction to kick towards the opponent's goal while avoiding areas of concentration of opponent players.
Reference: 11. <author> P. S. Rosenbloom, J. E. Laird, A. Newell, , and R. McCarl. </author> <title> A preliminary analysis of the soar architecture as a basis for general intelligence. </title> <journal> Artificial Intelligence, </journal> <volume> 47(1-3):289-325, </volume> <year> 1991. </year>
Reference-contexts: For example, it does not decide which one of its three suggested kicking directions should actually be used by a player-agent. Instead, all such decision-making rests with the higher level, implemented in the Soar integrated AI architecture <ref> [9, 11] </ref>. Once the Soar-based higher-level reaches a decision, it communicates with the lower-level, which then sends the relevant information to the simulator. The Soar architecture involves dynamic execution of an operator (reactive plan) hierarchy. These operators consist of (i) precondition rules; (ii) application rules; and (iii) termination rules.
Reference: 12. <author> I. Smith and P. Cohen. </author> <title> Towards semantics for an agent communication language based on speech acts. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI), </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: Such a commitment helps to avoid communication failures | to establish mutual belief, an agent must typically communicate with its teammates. Members of fi must synchronize to establish JPG (fi,p). To achieve such team synchronization we adapt the request-confirm protocol <ref> [12] </ref>, described below. <p> Instead, a team operator can only be terminated if there is mutual belief that the operator is achieved, unachievable or irrelevant. Establishing such mutual belief in the termination of a team operator 1 WAG was originally called WG in [7], but later termed WAG in <ref> [12] </ref>. can lead to communication. In particular, communication on termination of team operator arises if an agent privately realizes some fact relevant to the termination of a current team operator.
Reference: 13. <author> P. Stone and M. Veloso. </author> <title> Towards collaborative and adversarial learning: a case study in robotic soccer. </title> <editor> In S. Sen, editor, </editor> <booktitle> AAAI Spring Symposium on Adaptation, Coevolution and Learning in multi-agent systems, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: The subteam players once again execute SIMPLE-DEFENSE to attempt to position themselves close to the goal. In this way, agents attempt to coordinate their defense of the goal, while also attempting to position themselves near it. 4 Learning Inspired by previous work on machine learning in RoboCup <ref> [13, 8] </ref>, we focused on techniques to improve individual players' skills to kick, pass, or intercept the ball. Fortunately, the two layer ISIS architecture helps to simplify the problem for skill learning.
Reference: 14. <author> M. Tambe. </author> <title> Teamwork in real-world, dynamic environments. </title> <booktitle> In Proceedings of the International Conference on Multi-agent Systems (ICMAS), </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: With respect to teamwork, one key novelty in ISIS is its use of STEAM, a general, explicit model of teamwork to enable teamwork among player agents. This general model is motivated by the need for flexibility in team activities, as well as reuse of teamwork capabilities across domains <ref> [14, 15, 16] </ref>. STEAM uses the formal joint intentions framework [1, 7] as its basic building block, but with key enhancements to reflect the constraints of real-world domains. STEAM requires that individual team members explicitly represent their team's goals, plans and mutual beliefs.
Reference: 15. <author> M. Tambe. </author> <title> Agent architectures for flexible, practical teamwork. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI), </booktitle> <month> August </month> <year> 1997. </year>
Reference-contexts: With respect to teamwork, one key novelty in ISIS is its use of STEAM, a general, explicit model of teamwork to enable teamwork among player agents. This general model is motivated by the need for flexibility in team activities, as well as reuse of teamwork capabilities across domains <ref> [14, 15, 16] </ref>. STEAM uses the formal joint intentions framework [1, 7] as its basic building block, but with key enhancements to reflect the constraints of real-world domains. STEAM requires that individual team members explicitly represent their team's goals, plans and mutual beliefs.
Reference: 16. <author> M. Tambe. </author> <title> Towards flexible teamwork. </title> <journal> Journal of Artificial Intelligence Research (JAIR), </journal> <volume> 7 </volume> <pages> 83-124, </pages> <year> 1997. </year>
Reference-contexts: Developed at the University of Southern California's Information Sciences Institute (ISI), ISIS was also the top US simulation team. In terms of research accomplishments, ISIS illustrated the reuse of STEAM, a general model of teamwork <ref> [16] </ref>, that both reduced its development time and improved teamwork flexibility. ISIS's development is driven by the three research challenges emphasized in the RoboCup simulation league: (i) teamwork; (ii) multi-agent learning; and (iii) agent- and team-modeling [6]. <p> With respect to teamwork, one key novelty in ISIS is its use of STEAM, a general, explicit model of teamwork to enable teamwork among player agents. This general model is motivated by the need for flexibility in team activities, as well as reuse of teamwork capabilities across domains <ref> [14, 15, 16] </ref>. STEAM uses the formal joint intentions framework [1, 7] as its basic building block, but with key enhancements to reflect the constraints of real-world domains. STEAM requires that individual team members explicitly represent their team's goals, plans and mutual beliefs. <p> Given its domain-independence, STEAM also enables reuse across domains | here, RoboCup provided a challenging test domain, given its substantial dissimilarity from the original domain of STEAM's application (pilot teams for combat simulations for military training <ref> [16, 17] </ref>). Yet, a promising 35% of the original STEAM code was reused in RoboCup, and no new general-purpose teamwork code was required. With respect to multi-agent learning, the second challenge in RoboCup, ISIS took some initial steps towards addressing it. <p> STEAM's communication and coordination activities, driven by this theory, are discussed in Section 3.2. STEAM was originally developed in the context of building teams of helicopter pilot-agents for real-world military simulations <ref> [16] </ref>. Originally developed within Soar, STEAM is currently encoded in the form of 283 Soar rules. RoboCup has provided a challenging domain for testing reuse of these STEAM rules, in a substantially dissimilar domain. <p> If everyone confirms, a JPG is established. Thus, communication arises in the joint intentions theory to establish joint intentions, and to terminate them. However, communication in service of establishing and termination of each and every joint intention can be highly inefficient <ref> [16] </ref>. Hence, STEAM includes decision-theoretic communication selectivity.
Reference: 17. <author> M. Tambe, W. L. Johnson, R. Jones, F. Koss, J. E. Laird, P. S. Rosenbloom, and K. Schwamb. </author> <title> Intelligent agents for interactive simulation environments. </title> <journal> AI Magazine, </journal> <volume> 16(1), </volume> <month> Spring </month> <year> 1995. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: Given its domain-independence, STEAM also enables reuse across domains | here, RoboCup provided a challenging test domain, given its substantial dissimilarity from the original domain of STEAM's application (pilot teams for combat simulations for military training <ref> [16, 17] </ref>). Yet, a promising 35% of the original STEAM code was reused in RoboCup, and no new general-purpose teamwork code was required. With respect to multi-agent learning, the second challenge in RoboCup, ISIS took some initial steps towards addressing it.
References-found: 17

