URL: http://www.cs.twsu.edu/~haynes/cross_col.ps
Refering-URL: http://adept.cs.twsu.edu/~thomas/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: On-line Adaptation of Search via Knowledge Reuse  
Author: Thomas Haynes 
Address: St. Louis 8001 Natural Bridge Rd St. Louis, MO 63121-4499  
Affiliation: Department of Mathematics Computer Sciences University of Missouri,  
Abstract: We have integrated the distributed search of genetic programming based systems with collective memory to form a collective adaptation search method. Such a system significantly improves search as problem complexity is increased. In collective adaptation, search agents gather knowledge of their environment and deposit it in a central information repository. Process agents are then able to manipulate that focused knowledge, exploiting the exploration of the search agents. Communication is one-way, from the search agents to the process agents. As the process agents are able to refine the knowledge gathered by the search agents, we investigate two-way communication. Such communication directs the genetic programming based engine of the search agents.
Abstract-found: 1
Intro-found: 1
Reference: [ DeJong, 1990 ] <author> Kenneth A. DeJong. </author> <title> Genetic-algorithm-based learning. </title> <editor> In Y. Kodratoff and R. S. Michal-ski, editors, </editor> <booktitle> Machine Learning, Volume III. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> Los Alamos, CA, </address> <year> 1990. </year>
Reference: [ Garey and Johnson, 1979 ] <author> Michael R. Garey and David S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman and Co., </publisher> <address> San Francisco, CA, </address> <year> 1979. </year>
Reference-contexts: These simpler actions reflect a computational bound on either the reasoning power or memory storage of the individual agent. Such bounds are caused by the combinatorial explosion found in either search or optimization of NP complete problems <ref> [ Garey and Johnson, 1979 ] </ref> . Collective memory is defined as the combined knowledge gained by the interaction of the agents with both themselves and their environment. We combine the raw power of collective action with the expressiveness of collective memory to enhance a distributed search process. <p> Both finding the maximum and all cliques in a graph are NP complete <ref> [ Garey and Johnson, 1979 ] </ref> . to the hamming6-4 graph.
Reference: [ Haynes et al., 1995 ] <author> Thomas Haynes, Roger Wainwright, Sandip Sen, and Dale Schoenefeld. </author> <title> Strongly typed genetic programming in evolving cooperation strategies. </title> <editor> In Larry Eshelman, editor, </editor> <booktitle> Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <pages> pages 271-278, </pages> <address> San Francisco, CA, 1995. </address> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference-contexts: Both GA and GP represent search strategies in a population of chromosomes. Each chromosome in the population can be searching different parts of the search space or fitness landscape. Each chromosome can be considered to be a behavioral strategy to control an agent <ref> [ Haynes et al., 1995 ] </ref> and are considered to be autonomous in the sense that they do not typically interact to find a solution. <p> The only restriction is that the data type for each element be specified beforehand. This causes the initialization process and the various genetic operations to only construct syntactically correct trees. It has been shown that STGP can significantly reduce the search space <ref> [ Haynes et al., 1995, Montana, 1995 ] </ref> .
Reference: [ Haynes et al., 1996 ] <author> Thomas Haynes, Dale Schoenefeld, and Roger Wainwright. </author> <title> Type inheritance in strongly typed genetic programming. </title> <editor> In Kenneth E. Kinnear, Jr. and Peter J. Angeline, editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 18. </booktitle> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: The chromosome should be comprised of small and simple building blocks, which can easily be combined. 4 Clique Detection We have used clique detection as a benchmark for improving learning in GP systems <ref> [ Haynes, 1996, Haynes et al., 1996 ] </ref> . A collection of cliques in a graph can be represented as a list of a list of vertices which, in turn, can be represented by a tree structure.
Reference: [ Haynes, 1996 ] <author> Thomas Haynes. </author> <title> Duplication of coding segments in genetic programming. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence, </booktitle> <address> Portland, OR, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: The chromosome should be comprised of small and simple building blocks, which can easily be combined. 4 Clique Detection We have used clique detection as a benchmark for improving learning in GP systems <ref> [ Haynes, 1996, Haynes et al., 1996 ] </ref> . A collection of cliques in a graph can be represented as a list of a list of vertices which, in turn, can be represented by a tree structure. <p> This example graph exhibits nice regularities which allows for the efficient comparison of results across different test runs. We have utilized these regularities to identify and enumerate the building blocks, i.e., the connected components <ref> [ Haynes, 1996 ] </ref> . We repaired chromosomes by stripping out all invalid candidate cliques. We investigated various rates of return of repaired chromosomes into the population. We found that by duplicating the coding segments we could significantly improve the search process 1 . <p> The candidate cliques are duplicated in the chromosome following the repair strategy presented in Section 4 and in <ref> [ Haynes, 1996 ] </ref> . The parameters for the duplication follows that for the duplication of coding segments used while repairing and replacing chromosomes during fitness evaluation; for our purposes this means seven duplicates of the set of k candidate cliques are added to the chromosome.
Reference: [ Haynes, 1997 ] <author> Thomas Haynes. </author> <title> Collective memory search. </title> <booktitle> In Proceedings of the 1997 ACM Symposium on Applied Computing. </booktitle> <publisher> ACM Press, </publisher> <year> 1997. </year>
Reference-contexts: The evaluation of one chromosome typically is independent of all others. We have found that collective adaptation, which is the addition of collective memory to a GP-based learning system, significantly improves the search process as problem complexity is increased <ref> [ Haynes, 1997 ] </ref> . We believe that this improvement is a direct result of the change of focus from strict competition to cooperation. <p> Instead the search agents gather candidate cliques into the information center and the process agent removes duplicates and candidates subsumed by larger candidates. The addition of Passive-Active collective adaptation to the search technique significantly improves the efficiency of the search process <ref> [ Haynes, 1997 ] </ref> . We want to leverage that improvement to allow clique detection in more realistic graphs. The ten node graph we use to illustrate the clique detection is contrived and thus facilitates the search process, i.e. a known optimal solution exists.
Reference: [ Holland, 1975 ] <author> John H. Holland. </author> <booktitle> Adpatation in Natural and Artificial Systems. </booktitle> <publisher> University of Michigan Press, </publisher> <address> Ann Arbor, MI, </address> <year> 1975. </year>
Reference-contexts: We consider simple computational search agents, which are chromosomes in a genetic programming (GP) [ Koza, 1992 ] population. Genetic algorithms (GA) <ref> [ Holland, 1975 ] </ref> are a class of distributed search algorithms inspired by biological evolutionary adaptation. GP is an off-shoot of GA's, and is typically used in the automatic induction of programs. Both GA and GP represent search strategies in a population of chromosomes.
Reference: [ Johnson and Trick, 1993 ] <author> David S. Johnson and M. A. </author> <title> Trick. Cliques, coloring, and satisfiability: </title> <note> The second DIMACS challange. (to appear), </note> <year> 1993. </year>
Reference: [ Koza, 1992 ] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: The integration of action and memory leads to a distributed society of search agents which interact via collective memory; allowing for either agent communication or for a centralized search of the gathered knowledge. We consider simple computational search agents, which are chromosomes in a genetic programming (GP) <ref> [ Koza, 1992 ] </ref> population. Genetic algorithms (GA) [ Holland, 1975 ] are a class of distributed search algorithms inspired by biological evolutionary adaptation. GP is an off-shoot of GA's, and is typically used in the automatic induction of programs. <p> In this paper, we will examine the Active-Active model of access. This will entail extracting knowledge from the information center and using it to guide search agents in their exploration. 3 Genetic Programming Genetic programming is a machine learning technique used in the automatic induction of computer programs <ref> [ Koza, 1992 ] </ref> . A GP system is primarily comprised of three main parts: 2 * a population of chromosomes * a chromosome evaluator * a selection and recombination mechanism.
Reference: [ Montana, 1995 ] <author> David J. Montana. </author> <title> Strongly typed genetic programming. </title> <journal> Evolutionary Computation, </journal> <volume> 3(2) </volume> <pages> 199-230, </pages> <year> 1995. </year> <note> (Also published as BBN Technical Report #7866, </note> <institution> Cambridge, </institution> <address> MA, March 1994.). </address>
Reference-contexts: Montana claims that closure is a serious limitation to genetic programming. He introduces a variant of GP in strongly typed genetic programming (STGP), in which variables, constants, arguments, and returned values can be of any type <ref> [ Montana, 1995 ] </ref> . The only restriction is that the data type for each element be specified beforehand. This causes the initialization process and the various genetic operations to only construct syntactically correct trees. <p> The only restriction is that the data type for each element be specified beforehand. This causes the initialization process and the various genetic operations to only construct syntactically correct trees. It has been shown that STGP can significantly reduce the search space <ref> [ Haynes et al., 1995, Montana, 1995 ] </ref> .
Reference: [ Rosca and Ballard, 1996 ] <author> Justinian Rosca and Dana H. Ballard. </author> <title> Discovery of subroutines in genetic programming. </title> <editor> In P. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 9. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: The collected subtrees are not allowed to return to the population [ Tackett, 1995 ] . Rosca and Ballard consider an adaptive representation approach in which they extract small subtrees and allow them to be added back into the population by extending the alphabet <ref> [ Rosca and Ballard, 1996 ] </ref> . Finally, Seront considers a concept library system in which the knowledge gained from solving one problem, P a , is applied to the solution of similar problems [ Seront, 1995 ] .
Reference: [ Rosca, 1995 ] <author> Justinian Rosca. </author> <title> Towards automatic discovery of building blocks in genetic programming. </title> <editor> In E. S. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 78-85, </pages> <address> Menlo Park, CA, </address> <month> 10-12 November </month> <year> 1995. </year> <note> AAAI. </note>
Reference-contexts: Genetic programming researchers have extracted knowledge from chromosomes, building "libraries" or "banks" from which material could be extracted at a later date <ref> [ Tackett, 1995, Rosca, 1995, Rosca and Bal-lard, 1996 ] </ref> . The knowledge is in the form of a subtree of the chromosome. These subtrees are chosen based on their perceived utility, i.e. they appear often in chromosomes which are highly fit.
Reference: [ Seront, 1995 ] <author> Gregory Seront. </author> <title> External concepts reuse in genetic programming. </title> <editor> In E. S. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 94-98, </pages> <address> Menlo Park, CA, </address> <month> 10-12 November </month> <year> 1995. </year> <note> AAAI. </note>
Reference-contexts: Finally, Seront considers a concept library system in which the knowledge gained from solving one problem, P a , is applied to the solution of similar problems <ref> [ Seront, 1995 ] </ref> . The basic algorithm is to save the last generation used to solve problem P a and then use that generation to bootstrap the new population. The new population is allowed to perform in crossover with the library.
Reference: [ Tackett, 1993 ] <author> Walter Alden Tackett. </author> <title> Genetic programming for feature discovery and image discrimination. </title> <booktitle> In Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference: [ Tackett, 1995 ] <author> Walter Alden Tackett. </author> <title> Mining the genetic program. </title> <journal> IEEE Expert, </journal> <volume> 10(3) </volume> <pages> 28-38, </pages> <month> June </month> <year> 1995. </year> <month> 7 </month>
Reference-contexts: Genetic programming researchers have extracted knowledge from chromosomes, building "libraries" or "banks" from which material could be extracted at a later date <ref> [ Tackett, 1995, Rosca, 1995, Rosca and Bal-lard, 1996 ] </ref> . The knowledge is in the form of a subtree of the chromosome. These subtrees are chosen based on their perceived utility, i.e. they appear often in chromosomes which are highly fit. <p> However, the extracted knowledge is not processed: the information contained in one subtree is not combined with the information contained in other chromosomes. Tackett's gene-bank gathers statistical information about these subtrees. The collected subtrees are not allowed to return to the population <ref> [ Tackett, 1995 ] </ref> . Rosca and Ballard consider an adaptive representation approach in which they extract small subtrees and allow them to be added back into the population by extending the alphabet [ Rosca and Ballard, 1996 ] .
References-found: 15

