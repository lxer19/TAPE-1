URL: http://pauillac.inria.fr/~georget/Publications/manual.ps.gz
Refering-URL: http://pauillac.inria.fr/~georget/clpfds.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Yan.Georget@inria.fr  
Title: clp(FD,S) User's Manual This manual concerns only the finite domain constraint solver. Refer to wamcc
Author: Yan Georget 
Date: June 1998  
Web: http://pauillac.inria.fr/~georget  
Address: 78153 Le Chesnay FRANCE  
Affiliation: INRIA-Rocquencourt Domaine de Voluceau  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. Bistarelli, U. Montanari and F. Rossi. </author> <title> Constraint Solving over Semirings. </title> <booktitle> In Proceedings of IJCAI'95, </booktitle> <publisher> Morgan Kaufman, </publisher> <year> 1995. </year>
Reference-contexts: For example, clp (FD,Bool) is the language dedicated to the boolean semiring (ie usual constraint solving), while clp (FD,F uzzy) deals with the fuzzy semiring... It is recommended to read the wamcc user's manual [6] which explains how to use the underlying prolog language. Refer to <ref> [1, 2] </ref>, to get more informations about semiring-based constraint satisfaction. Finally [7] presents some details about the implementation, while some examples can be found in [7, 8]. 2 The distribution See the file ./INSTALL, to install the distribution.
Reference: [2] <author> S. Bistarelli, U. Montanari and F. Rossi. </author> <title> Semiring-based Constraint Solving and Optimization. </title> <journal> Journal of ACM, vol.44, </journal> <volume> n.2, </volume> <pages> pp. 201-236, </pages> <month> March </month> <year> 1997. </year>
Reference-contexts: For example, clp (FD,Bool) is the language dedicated to the boolean semiring (ie usual constraint solving), while clp (FD,F uzzy) deals with the fuzzy semiring... It is recommended to read the wamcc user's manual [6] which explains how to use the underlying prolog language. Refer to <ref> [1, 2] </ref>, to get more informations about semiring-based constraint satisfaction. Finally [7] presents some details about the implementation, while some examples can be found in [7, 8]. 2 The distribution See the file ./INSTALL, to install the distribution. <p> In <ref> [2] </ref>, it has been proved that one can define semiring-based constraint satisfaction using the following definition. Definition 2 (c-semiring) A c-semiring S is a semiring hA; +; fi; 0; 1i such that: + is idempotent, 1 is its absorbing element. <p> Definition 2 (c-semiring) A c-semiring S is a semiring hA; +; fi; 0; 1i such that: + is idempotent, 1 is its absorbing element. Let us consider relation S over A such that a S b iff a + b = b. The following results are proved in <ref> [2] </ref>: * S is a partial order, * + and fi are monotone on S , * 0 is its minimum and 1 its maximum, * hA; S i is a complete lattice and + is its lub. In order to implement Arc-Consistency (AC), we need the following stronger definition.
Reference: [3] <author> P. Codognet and D. Diaz. </author> <title> A Minimal Extension of the WAM for clp(FD). </title> <booktitle> In Proceedings of ICLP'93, 10th Int. Conf. on Logic Programming, </booktitle> <address> Budapest, Hungary, </address> <publisher> MIT Press 1993. </publisher>
Reference-contexts: 1 Introduction clp (FD,S) is a generic semiring-based constraint solver based on the wamcc prolog compiler. clp (FD,S) can model and solve classical CSPs, fuzzy CSPs, hierarchical CSPs and others. We have defined, as it as been done in <ref> [3, 4] </ref> for finite domain constraints, a general scheme for compiling semiring-based constraints. The kernel of clp (FD,S), is called SFD and is generic with respect to the semiring. Hence, we are able to generate new languages (new solvers) by specifying semirings, the rest of the implementation being unchanged. <p> FD variable Y and FD variable Z. 'x&gt;=yz:(a;b)'(?X,?Y,?Z,+A,+B) enforces FD variable X to be greater or equal than the product of FD variable Y and FD variable Z with truth values A (for satisfac tion) and B (for violation). clp (FD,S) also offers the linear constraints of clp (FD) (see <ref> [3] </ref> for more details), the truth value for satisfaction (resp. violation) is by default 1 (resp. 0). 11 6.2 Complex arithmetic constraints alldifferent (+Vars) enforces X 6= Y for each pair of FD variables (X; Y ) in the list Vars. g alldifferent (+Vars) contrains all the FD variables in the
Reference: [4] <author> P. Codognet and D. Diaz. </author> <title> Compiling Constraints in clp(FD). </title> <journal> Journal of Logic Programming, </journal> <year> 1996. </year>
Reference-contexts: 1 Introduction clp (FD,S) is a generic semiring-based constraint solver based on the wamcc prolog compiler. clp (FD,S) can model and solve classical CSPs, fuzzy CSPs, hierarchical CSPs and others. We have defined, as it as been done in <ref> [3, 4] </ref> for finite domain constraints, a general scheme for compiling semiring-based constraints. The kernel of clp (FD,S), is called SFD and is generic with respect to the semiring. Hence, we are able to generate new languages (new solvers) by specifying semirings, the rest of the implementation being unchanged.
Reference: [5] <author> D. Diaz. </author> <note> clp(FD) User's Manual. </note>
Reference-contexts: Finally [7] presents some details about the implementation, while some examples can be found in [7, 8]. 2 The distribution See the file ./INSTALL, to install the distribution. The distribution, once installed, provides: * a clp compiler clp fds (which is named wamcc in [6] and clp fd in <ref> [5] </ref>), * a makefile generator bmf clp fds (which is named bmf wamcc in [6] and bmf clp fd in [5]), * a C compiler wam gcc (which is named w gcc in [6] and fd gcc in [5]), * a C library libclp fds.a (which is named libwamcc.a in [6] <p> The distribution, once installed, provides: * a clp compiler clp fds (which is named wamcc in [6] and clp fd in <ref> [5] </ref>), * a makefile generator bmf clp fds (which is named bmf wamcc in [6] and bmf clp fd in [5]), * a C compiler wam gcc (which is named w gcc in [6] and fd gcc in [5]), * a C library libclp fds.a (which is named libwamcc.a in [6] and libclp fd.a in [5]). <p> clp fds (which is named wamcc in [6] and clp fd in <ref> [5] </ref>), * a makefile generator bmf clp fds (which is named bmf wamcc in [6] and bmf clp fd in [5]), * a C compiler wam gcc (which is named w gcc in [6] and fd gcc in [5]), * a C library libclp fds.a (which is named libwamcc.a in [6] and libclp fd.a in [5]). The distribution contains also this manual and some examples using different semirings. 3 3 How to use clp (FD,S) ? clp (FD,S) is very close in spirit to clp (FD). <p> bmf clp fds (which is named bmf wamcc in [6] and bmf clp fd in <ref> [5] </ref>), * a C compiler wam gcc (which is named w gcc in [6] and fd gcc in [5]), * a C library libclp fds.a (which is named libwamcc.a in [6] and libclp fd.a in [5]). The distribution contains also this manual and some examples using different semirings. 3 3 How to use clp (FD,S) ? clp (FD,S) is very close in spirit to clp (FD).
Reference: [6] <author> D. Diaz. </author> <note> wamcc User's Manual. </note>
Reference-contexts: For example, clp (FD,Bool) is the language dedicated to the boolean semiring (ie usual constraint solving), while clp (FD,F uzzy) deals with the fuzzy semiring... It is recommended to read the wamcc user's manual <ref> [6] </ref> which explains how to use the underlying prolog language. Refer to [1, 2], to get more informations about semiring-based constraint satisfaction. Finally [7] presents some details about the implementation, while some examples can be found in [7, 8]. 2 The distribution See the file ./INSTALL, to install the distribution. <p> Finally [7] presents some details about the implementation, while some examples can be found in [7, 8]. 2 The distribution See the file ./INSTALL, to install the distribution. The distribution, once installed, provides: * a clp compiler clp fds (which is named wamcc in <ref> [6] </ref> and clp fd in [5]), * a makefile generator bmf clp fds (which is named bmf wamcc in [6] and bmf clp fd in [5]), * a C compiler wam gcc (which is named w gcc in [6] and fd gcc in [5]), * a C library libclp fds.a (which <p> The distribution, once installed, provides: * a clp compiler clp fds (which is named wamcc in <ref> [6] </ref> and clp fd in [5]), * a makefile generator bmf clp fds (which is named bmf wamcc in [6] and bmf clp fd in [5]), * a C compiler wam gcc (which is named w gcc in [6] and fd gcc in [5]), * a C library libclp fds.a (which is named libwamcc.a in [6] and libclp fd.a in [5]). <p> provides: * a clp compiler clp fds (which is named wamcc in <ref> [6] </ref> and clp fd in [5]), * a makefile generator bmf clp fds (which is named bmf wamcc in [6] and bmf clp fd in [5]), * a C compiler wam gcc (which is named w gcc in [6] and fd gcc in [5]), * a C library libclp fds.a (which is named libwamcc.a in [6] and libclp fd.a in [5]). <p> [5]), * a makefile generator bmf clp fds (which is named bmf wamcc in <ref> [6] </ref> and bmf clp fd in [5]), * a C compiler wam gcc (which is named w gcc in [6] and fd gcc in [5]), * a C library libclp fds.a (which is named libwamcc.a in [6] and libclp fd.a in [5]). The distribution contains also this manual and some examples using different semirings. 3 3 How to use clp (FD,S) ? clp (FD,S) is very close in spirit to clp (FD).
Reference: [7] <author> Y. Georget and P. Codognet. </author> <title> Compiling Semiring-based Constraints with clp(FD,S). </title> <note> To appear in the Proceedings of CP'98, </note> <institution> Pisa, Italy. </institution>
Reference-contexts: It is recommended to read the wamcc user's manual [6] which explains how to use the underlying prolog language. Refer to [1, 2], to get more informations about semiring-based constraint satisfaction. Finally <ref> [7] </ref> presents some details about the implementation, while some examples can be found in [7, 8]. 2 The distribution See the file ./INSTALL, to install the distribution. <p> It is recommended to read the wamcc user's manual [6] which explains how to use the underlying prolog language. Refer to [1, 2], to get more informations about semiring-based constraint satisfaction. Finally [7] presents some details about the implementation, while some examples can be found in <ref> [7, 8] </ref>. 2 The distribution See the file ./INSTALL, to install the distribution. <p> Thus, one has to recompile the library after having changed the semiring used by SFD. This phase is described in the file ./INSTALL. Finally, the user can define his own semirings (according to the format given in ./src/Semirings). 1 In <ref> [7] </ref>, it is proven that the numerical representation of the semiring is also a semiring. 4 5 Basic notions about the solver clp (FD,S) introduces a minimal extension of the WAM for compiling semiring-based constraints. clp (FD,S) is based on an unique constraint of the form X in r.

References-found: 7

