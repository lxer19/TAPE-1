URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/reids/www/papers/monitor.ps.gz
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/reids/www/home/reidhome.html
Root-URL: http://www.cs.cmu.edu
Email: (joaquin@cs.cmu.edu, reids@cs.cmu.edu)  
Title: Robust Execution Monitoring for Navigation Plans  
Author: Joaqun L. Fernandez, Reid G. Simmons 
Address: 5000 Forbes Avenue Pittsburgh PA 15214  
Affiliation: School of Computer Science/Robotics Institute Carnegie Mellon University  
Abstract: This paper presents a general approach to robust execution monitoring. The goal is to provide coverage for many types of unexpected and unanticipated situations, while at the same time enabling the robot to quickly detect, and react to, specific contingencies. The approach uses a hierarchy of monitors, structured in layers of increasing specificity. We present the general approach, and show its application in the domain of indoor mobile robot navigation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. A. Brooks. </author> <title> A robust layered control system for a mobile robot. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> RA-2(1):14-23, </volume> <year> 1986. </year>
Reference-contexts: Previous Work Solutions to deal with errors depend strongly on the architecture used in the navigation system. For instance, error recovery is not used in pure reactive systems <ref> [1] </ref> because the system basically reacts to events. In the context of robot navigation, several architectures deal with exceptions (errors) in different ways [4] [10]. Monitoring and recovery processes are responsible for verifying that a robot is correctly executing its tasks, detecting when is not and handling exceptions.
Reference: [2] <author> S. Koenig, R. Goodwin, and R.G. Simmons. </author> <title> Robot navigation with Markov models: A framework for path planning and learning with limited computational resources. </title> <editor> In L. Dorst, M. van Lambalgen, and R. Voorbraak, editors, </editor> <booktitle> Reasoning with Uncertainty in Robotics, volume 1093 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 322-337. </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: This paper is mainly concerned with monitoring at the path-planning and navigation layers. Path planning uses a decision-theoretic generate, evaluate and refine strategy that is based on ideas from sensitivity analysis <ref> [2] </ref>. It tries to find paths that have the highest expected utility of travel, where utility is inversely proportional to travel time, and the planner takes into account the probability of the robot missing openings and the probability of finding blockages in the environment.
Reference: [3] <author> Fabrice R. Noreils. </author> <title> Integrating Error Recovery in a Mobile Robot Control System. </title> <booktitle> In IEEE Int. Conf. Robot. and Automat., </booktitle> <pages> pages 396-401, </pages> <year> 1990. </year>
Reference-contexts: In the context of robot navigation, several architectures deal with exceptions (errors) in different ways [4] [10]. Monitoring and recovery processes are responsible for verifying that a robot is correctly executing its tasks, detecting when is not and handling exceptions. In some architectures governed by planning <ref> [3] </ref> [9] the monitoring and recovery processes are used to check the correct completion of each step of the plan. Our monitoring and recovery architecture is independent of the navigation architecture.
Reference: [4] <author> Fabrice R. Noreils and G. Chatila. </author> <title> Plan Execution Monitoring and Control Architecture for Mobile Robots. </title> <journal> IEEE transactions on robotics and automation, </journal> <volume> 2 </volume> <pages> 396-401, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: For instance, error recovery is not used in pure reactive systems [1] because the system basically reacts to events. In the context of robot navigation, several architectures deal with exceptions (errors) in different ways <ref> [4] </ref> [10]. Monitoring and recovery processes are responsible for verifying that a robot is correctly executing its tasks, detecting when is not and handling exceptions.
Reference: [5] <author> Reid Simmons. </author> <title> Becoming increasingly reliable. </title> <booktitle> In Proc. of 2nd Intl. Conference on Artificial Intelligence Planning Systems, </booktitle> <address> Chicago, IL, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: The symptoms are dependent on the architecture since different architectures have to deal with different problems. Like other architectures, the architecture used in our research combines reactive and deliberative behaviors. The approach described here has roots in earlier work with a previous navigation system <ref> [5] </ref>. The main differences are that this approach is based on using a hierarchy of monitors to ensure coverage of the exception space, and focuses on symptoms (poor performance) that are observable from task execution data. <p> TCA provides control constructs for inter-process communication, task decomposition, task synchronization, resource management, monitoring and exception handling. One of its novel features is that monitors and exception handlers can be incrementally added to the system, without needing to modify existing code <ref> [5] </ref>. This provides support for the "structured control" design approach, where systems are developed by first implementing behaviors that work in the nominal situation, and then incrementally adding on reactive behaviors that handle exceptions [6].
Reference: [6] <author> Reid Simmons. </author> <title> Structured control for autonomous robots. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 10(1) </volume> <pages> 34-43, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: System integration is performed using the Task Control Architecture (TCA), a general framework for coordinating planning, sensing and real-time control <ref> [6] </ref>. TCA provides control constructs for inter-process communication, task decomposition, task synchronization, resource management, monitoring and exception handling. One of its novel features is that monitors and exception handlers can be incrementally added to the system, without needing to modify existing code [5]. <p> This provides support for the "structured control" design approach, where systems are developed by first implementing behaviors that work in the nominal situation, and then incrementally adding on reactive behaviors that handle exceptions <ref> [6] </ref>. Although this POMDP-based navigation system is fairly reliable (achieving its goals about 95% of the time), there are still situations where it fails. <p> Hierarchical Monitors for Navigation The monitors we developed for Xavier are structured as shown in Fig. 3. The monitors are implemented as an independent process that uses TCA control constructs to coordinate with the executing navigation tasks. In particular, we use the TCA "wiretap" mechanism <ref> [6] </ref> to determine when a new navigation task has started/ended, which tells the monitor process when to start/stop the set of monitors (except for the battery monitor, which is always running).
Reference: [7] <author> Reid Simmons, Rich Goodwin, Karen Zita Haigh, Sven Koenig, and Joseph O'Sullivan. </author> <title> A layered architecture for office delivery robots. </title> <editor> In W. Lewis Johnson, editor, </editor> <booktitle> Proceedings of Autonomous Agents '97, </booktitle> <pages> pages 245-252, </pages> <address> Marina del Rey, CA, </address> <month> February </month> <year> 1997. </year> <note> ACM Press. </note>
Reference-contexts: Xavier Xavier, the robot used in these experiments, is designed with a layered architecture, consisting of task scheduling, path planning, navigation, and obstacle avoidance components <ref> [7] </ref>. This paper is mainly concerned with monitoring at the path-planning and navigation layers. Path planning uses a decision-theoretic generate, evaluate and refine strategy that is based on ideas from sensitivity analysis [2].
Reference: [8] <author> Reid Simmons and Sven Koenig. </author> <title> Probabilistic Navigation in Partially Observable Environments. </title> <booktitle> In Proceedings of the International Joint Con-ferende on Artificial Intelligence (IJCAI), </booktitle> <pages> pages 1080-1087, </pages> <year> 1995. </year>
Reference-contexts: Navigation is performed using Partially Observable Markov Decision Process (POMDP) models <ref> [8] </ref>. The navigation system creates a POMDP model from a topological map of the building, augmented with approximate metric information. It takes the route produced by the path planner and creates a policy indicating how the robot should travel from each location.
Reference: [9] <author> Elizabeth Robertson Stuck. </author> <title> Detecting and Diagnosing Mistakes in Inexact Vision-based Navega-tion. </title> <type> PhD thesis, </type> <institution> University of Minnesota, </institution> <month> Novem-ber </month> <year> 1992. </year>
Reference-contexts: In the context of robot navigation, several architectures deal with exceptions (errors) in different ways [4] [10]. Monitoring and recovery processes are responsible for verifying that a robot is correctly executing its tasks, detecting when is not and handling exceptions. In some architectures governed by planning [3] <ref> [9] </ref> the monitoring and recovery processes are used to check the correct completion of each step of the plan. Our monitoring and recovery architecture is independent of the navigation architecture.
Reference: [10] <author> Elizabeth Robertson Stuck. </author> <title> Detecting and Diagnosing Mistakes. </title> <booktitle> In Proceedings of the IEEE/RSJ International conference on Intelligent Robots and Systems, </booktitle> <month> August </month> <year> 1995. </year>
Reference-contexts: For instance, error recovery is not used in pure reactive systems [1] because the system basically reacts to events. In the context of robot navigation, several architectures deal with exceptions (errors) in different ways [4] <ref> [10] </ref>. Monitoring and recovery processes are responsible for verifying that a robot is correctly executing its tasks, detecting when is not and handling exceptions. In some architectures governed by planning [3] [9] the monitoring and recovery processes are used to check the correct completion of each step of the plan.
References-found: 10

