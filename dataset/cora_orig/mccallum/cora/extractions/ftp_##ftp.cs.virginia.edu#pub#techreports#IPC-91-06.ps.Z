URL: ftp://ftp.cs.virginia.edu/pub/techreports/IPC-91-06.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Abstract-found: 0
Intro-found: 0
Reference: [AAA71] <institution> CODASYL Data Base Task Group Report, ACM, </institution> <address> New York, </address> <year> 1971. </year>
Reference-contexts: Also our definition provides for an attribute date_last_mod which is associated with the set (or file) as a whole, and not with any particular element (or record) in it. 3.4. Implementation of a Network Model The network model, as defined by the CODASYL/DBTG report <ref> [AAA71, NNN73] </ref>, explicitly used the concept of a "set", but only as the set of elements which were the image of a one-to-many map. But the term "map" was never used.
Reference: [ACO85] <author> A. Albano, L. Cardelli and R. Orsini, </author> <title> Galileo: A Strongly Typed Interactive Conceptual Lanugage, </title> <journal> Trans. Database Systems 10,2 (June 1985), </journal> <pages> 230-260. </pages>
Reference-contexts: The isa construct is used to define new classes. It is not a specific inheritance operator as in <ref> [ACO85, Car84] </ref> or [BuA86]. Inheritance is, however, implied because &lt;class_name &gt; is a sub-class of &lt;class &gt; and thus inherits all of the properties of &lt;class &gt; (or of all &lt;class&gt;es in its super class list.
Reference: [BBK87] <author> F. Bancilhon, T. Briggs, S. Khoshafian and P. Valduriez, </author> <title> FAD, a Powerful and Simple Database Language, </title> <booktitle> Proc. 13th VLDB Conf., </booktitle> <address> Brighton, England, </address> <month> Sep. </month> <year> 1987, </year> <pages> 97-105. </pages>
Reference-contexts: The concepts of element and object are so nearly synonymous that we are tempted use them interchangeably. We have chosen to use the term "element" partially because the term "object" already has many existing connotations in the computer literature <ref> [BBK87, CoM84, SSE87] </ref>, and partially because ADAMS elements are not properly objects in the sense of [Str88]. Nor is ADAMS is an object-oriented database system in the sense of [Kim90].
Reference: [BuA86] <author> P. Buneman and M. Atkinson, </author> <title> Inheritance and Persistence in Database Programming Languages, </title> <booktitle> Proc. ACM SIGMOD Conf. </booktitle> <month> 15,2 (May </month> <year> 1986), </year> <pages> 4-15. </pages>
Reference-contexts: The isa construct is used to define new classes. It is not a specific inheritance operator as in [ACO85, Car84] or <ref> [BuA86] </ref>. Inheritance is, however, implied because &lt;class_name &gt; is a sub-class of &lt;class &gt; and thus inherits all of the properties of &lt;class &gt; (or of all &lt;class&gt;es in its super class list.
Reference: [Car84] <author> L. Cardelli, </author> <title> A Semantics of Multiple Inheritance, in Semantics of Data Types, </title> <booktitle> Lecture Notes in Computer Science 173, </booktitle> <publisher> Springer Verlag, </publisher> <month> June </month> <year> 1984, </year> <pages> 51-67. </pages>
Reference-contexts: Nor is ADAMS is an object-oriented database system in the sense of [Kim90]. For example, there are no methods associated with ADAMS elements. "Object-based", as in [Weg87], is probably the best description of ADAMS, for it does employ the usual class hierarchy, with multiple inheri tance <ref> [Car84] </ref>; and it can support object-oriented database languages. 3 All elements (or instantiated objects, if you prefer this terminology) in an ADAMS database must be typed, that is belong to a known class. <p> The isa construct is used to define new classes. It is not a specific inheritance operator as in <ref> [ACO85, Car84] </ref> or [BuA86]. Inheritance is, however, implied because &lt;class_name &gt; is a sub-class of &lt;class &gt; and thus inherits all of the properties of &lt;class &gt; (or of all &lt;class&gt;es in its super class list.
Reference: [CDV88] <author> M. J. Carey, D. J. DeWitt and S. L. Vandenberg, </author> <title> A Data Model and Query Language for EXODUS, </title> <booktitle> Proc. SIGMOD Conf., </booktitle> <address> Chicago, IL, </address> <month> June </month> <year> 1988, </year> <pages> 413-423. </pages>
Reference-contexts: Whenever the word identifies a specific instance, it will be set in lower case characters. Reserved words have been emboldened for emphasis. The following three hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 9 However, we again emphasize that ADAMS itself is not properly an object-oriented database system in the manner of EXODUS <ref> [CDV88] </ref> or ORION [KGB90]. 7 ADAMS statements 10 follow this convention. Q isa CLASS Q_SET isa SET, of Q elements q_set instantiates_a Q_SET Q denotes a class (which is arbitrary).
Reference: [Cha76] <author> D. D. Chamberlin, </author> <title> Relational Data-Base Management Systems, </title> <journal> Computing Surveys 8,1 (Mar. </journal> <year> 1976), </year> <pages> 43-66. </pages>
Reference-contexts: In ORION [KBC87] the only mechanism for associating two different objects is an attribute concept, because there is no clear distinction between "objects" and "values", such as we have made. However, "primitive objects" behave similarly to our "values". Relational database languages, (c.f. <ref> [Cha76, Cod70, Kim79, Mai83, StW83] </ref>) use the term attribute identically (except that we call the image space a codomain). The relational model has no analog to a map; such inter-class relationships are implemented by the join operator.
Reference: [Cod70] <author> E. F. Codd, </author> <title> A Relational Model for Large Shared Data Banks, </title> <journal> Comm. of the ACM 13,6 (June 1970), </journal> <pages> 377-387. </pages>
Reference-contexts: In ORION [KBC87] the only mechanism for associating two different objects is an attribute concept, because there is no clear distinction between "objects" and "values", such as we have made. However, "primitive objects" behave similarly to our "values". Relational database languages, (c.f. <ref> [Cha76, Cod70, Kim79, Mai83, StW83] </ref>) use the term attribute identically (except that we call the image space a codomain). The relational model has no analog to a map; such inter-class relationships are implemented by the join operator. <p> The relational model does not require a map concept, which is at once both its great strength and its weakness. Mapping concepts are unfamiliar to many database users; so a database model which is based on only flat tables is much easier to explain and to visualize <ref> [Cod70] </ref>. But invariably relationships must be created between data sets; and the relational join is not always the most effective way of implementing the relationship. An attribute function defined on an ADAMS element functionally associates a single codomain value with that element.
Reference: [CAD87] <author> R. L. Cooper, M. P. Atkinson, A. Dearie and D. Abderrahmane, </author> <title> Constructing Database Systems in a Persistent Environment, </title> <booktitle> Proc. 13th VLDB Conf., </booktitle> <address> Brighton, England, </address> <month> Sep. </month> <year> 1987, </year> <pages> 117-125. </pages>
Reference-contexts: The statement | count int | x.a will assign the current image of x.a to the host language variable count , on which further processing can be performed. These ways of referencing codomain values correspond to putDomVal and getDomVal in <ref> [CAD87] </ref>. Attributes are a kind of element. Consequently, we may create sets of attributes and apply set operations to them. This capability is important in both the relational approach to databases and the handling of array data.
Reference: [CoM84] <author> G. Copeland and D. Maier, </author> <title> Making Smalltalk a Database System, </title> <booktitle> Proc. SIGMOD Conf., </booktitle> <address> Boston, </address> <month> June </month> <year> 1984, </year> <pages> 316-325. </pages>
Reference-contexts: The concepts of element and object are so nearly synonymous that we are tempted use them interchangeably. We have chosen to use the term "element" partially because the term "object" already has many existing connotations in the computer literature <ref> [BBK87, CoM84, SSE87] </ref>, and partially because ADAMS elements are not properly objects in the sense of [Str88]. Nor is ADAMS is an object-oriented database system in the sense of [Kim90].
Reference: [GoR83] <author> A. Goldberg and D. Robson, </author> <title> Smalltalk-80: The Language and Its Implementation, </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference-contexts: In UNIX, a sequence of objects is called a stream, which is processed by filters in pipes. An ADAMS sequence can be regarded as a database implemented stream. 2 In many object-oriented systems <ref> [GoR83, Kim90] </ref> the class denotes not only the universe of possible elements in the class, but the universe of actually instantiated objects as well.
Reference: [GPP68] <author> R. E. Griswold, J. F. Poage and I. P. Polonsky, </author> <title> The SNOBOL 4 Programming Language, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1968. </year>
Reference-contexts: If the predicate is not satisfied the statement fails 15 and the process is aborted. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 15 The possibility of an ADAMS statement f ailing is an important concept that is not found in many programming languages. We have borrowed the concept from SNOBOL <ref> [GPP68] </ref>. All database languages must make some provision for statement, and/or transaction, failure if one is to enforce concurrency criteria, such as serializability, or consistency constraints as above. 12 2.2. Designators A name uniquely designates something.
Reference: [GrG83] <author> R. E. Griswold and M. T. Griswold, </author> <title> The Icon Programming Language, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1983. </year>
Reference-contexts: Specifically, ADAMS recognizes: union , intersection , relative complement , element insertion , element deletion , set membership test, test for emptiness , car dinality , and looping over a set. ADAMS sequences support iterators <ref> [GrG83, GrO88] </ref> by means of the get_ f irst and get_next operators. They can be manipulated by append element, subsequence hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 5 The meaning of a name is often called metadata.
Reference: [GrO88] <author> R. E. Griswold and J. O'Bagy, SEQUE: </author> <title> A Programming Language for Manipulating Sequences, </title> <publisher> Comput. Lang. </publisher> <month> 13,1 (Mar. </month> <year> 1988), </year> <pages> 13-22. </pages>
Reference-contexts: Specifically, ADAMS recognizes: union , intersection , relative complement , element insertion , element deletion , set membership test, test for emptiness , car dinality , and looping over a set. ADAMS sequences support iterators <ref> [GrG83, GrO88] </ref> by means of the get_ f irst and get_next operators. They can be manipulated by append element, subsequence hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 5 The meaning of a name is often called metadata.
Reference: [Kim79] <author> W. Kim, </author> <title> Relational Database Systems, </title> <journal> Computing Surveys 11,3 (Sep. </journal> <year> 1979), </year> <pages> 185-211. </pages>
Reference-contexts: In ORION [KBC87] the only mechanism for associating two different objects is an attribute concept, because there is no clear distinction between "objects" and "values", such as we have made. However, "primitive objects" behave similarly to our "values". Relational database languages, (c.f. <ref> [Cha76, Cod70, Kim79, Mai83, StW83] </ref>) use the term attribute identically (except that we call the image space a codomain). The relational model has no analog to a map; such inter-class relationships are implemented by the join operator.
Reference: [KBC87] <author> W. Kim, J. Banerjee, H. T. Chou, J. Garza and D. Woelk, </author> <title> Composite Object Support in an Object-Oriented Database System, </title> <booktitle> Proc. OOPSLA '87, </booktitle> <month> Oct. </month> <year> 1987, </year> <pages> 118-125. </pages>
Reference-contexts: In contrast, a map is a function mapping elements into a class; its image is another ADAMS element. In DAPLEX [Shi81] these concepts are called property and f unction respectively. In ORION <ref> [KBC87] </ref> the only mechanism for associating two different objects is an attribute concept, because there is no clear distinction between "objects" and "values", such as we have made. However, "primitive objects" behave similarly to our "values".
Reference: [Kim90] <author> W. Kim, </author> <title> Object-Oriented Databases: Definition and Research Directions, </title> <journal> IEEE Trans. on Knowledge and Data Engineering 2,3 (Sep. </journal> <year> 1990), </year> <pages> 327-341. </pages>
Reference-contexts: In UNIX, a sequence of objects is called a stream, which is processed by filters in pipes. An ADAMS sequence can be regarded as a database implemented stream. 2 In many object-oriented systems <ref> [GoR83, Kim90] </ref> the class denotes not only the universe of possible elements in the class, but the universe of actually instantiated objects as well. <p> Nor is ADAMS is an object-oriented database system in the sense of <ref> [Kim90] </ref>.
Reference: [KGB90] <author> W. Kim, J. F. Garza, N. Ballou and D. Woelk, </author> <title> Architecture of the ORION Next-Generation Database System, </title> <journal> IEEE Trans. on Knowledge and Data Engineering 2,1 29 (Mar. </journal> <year> 1990), </year> <pages> 109-124. </pages>
Reference-contexts: Whenever the word identifies a specific instance, it will be set in lower case characters. Reserved words have been emboldened for emphasis. The following three hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 9 However, we again emphasize that ADAMS itself is not properly an object-oriented database system in the manner of EXODUS [CDV88] or ORION <ref> [KGB90] </ref>. 7 ADAMS statements 10 follow this convention. Q isa CLASS Q_SET isa SET, of Q elements q_set instantiates_a Q_SET Q denotes a class (which is arbitrary).
Reference: [Mai83] <author> D. Maier, </author> <title> The Theory of Relational Databases, </title> <publisher> Computer Science Press, </publisher> <address> Rockville, MD, </address> <year> 1983. </year>
Reference-contexts: In ORION [KBC87] the only mechanism for associating two different objects is an attribute concept, because there is no clear distinction between "objects" and "values", such as we have made. However, "primitive objects" behave similarly to our "values". Relational database languages, (c.f. <ref> [Cha76, Cod70, Kim79, Mai83, StW83] </ref>) use the term attribute identically (except that we call the image space a codomain). The relational model has no analog to a map; such inter-class relationships are implemented by the join operator. <p> When a mathematician exhausts his supply of convenient identifiers, he frequently hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 16 The vertical bar | is typically read as "such that". 17 Because all variables are bound to existing sets, evaluation of these expressions is "safe", in the sense of <ref> [Mai83, p.247] </ref>. 14 begins subscripting them, as in x 1 , x 2 , or G a , X b,k , etc. 18 The important aspect is that subscript-ing is purely a linguistic convention designed to provide a larger pool of available identifiers; it does not necessarily imply an array structure. <p> For example, it requires only the basic concepts of element, set, attribute and codomain. There is no equivalent of either the map or sequence concepts. It has been this very simplicity that has rendered it amenable to formal analysis (e.g. <ref> [Mai83, Ull82] </ref>), and has led to its wide spread use in practice. We will demonstrate this capability primarily by developing a running example. Recall the hackneyed, but comfortably familiar "Suppliers-Supplies-Parts" database that can be found in any undergraduate text.
Reference: [NNN73] <institution> CODASYL Data Description Language, National Bureau of Standards Handbook 113, U.S. Dept. of Commerce, </institution> <address> Washington, DC, </address> <year> 1973. </year>
Reference-contexts: Also our definition provides for an attribute date_last_mod which is associated with the set (or file) as a whole, and not with any particular element (or record) in it. 3.4. Implementation of a Network Model The network model, as defined by the CODASYL/DBTG report <ref> [AAA71, NNN73] </ref>, explicitly used the concept of a "set", but only as the set of elements which were the image of a one-to-many map. But the term "map" was never used.
Reference: [Pfa88] <author> J. L. Pfaltz, </author> <title> Implementing Set Operators Over a Semantic Hierarchy, </title> <institution> IPC TR-88-004, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: They can also be defined over sets whose elements belong to different (even noncomparable in the class hierarchy) classes; but care must be taken to correctly determine the class of elements in the resultant set <ref> [Pfa88] </ref>. 22 Here we have established the codomain partno consisting of all 8 symbol strings whose first character is a 'B' followed by a single upper case letter, four digits, a hyphen, and a single upper case letter A through H.
Reference: [PSF88] <author> J. L. Pfaltz, S. H. Son and J. C. </author> <title> French, The ADAMS Interface Language, </title> <booktitle> Proc. 3th Conf. on Hypercube Concurrent Computers and Applications, </booktitle> <address> Pasadena, CA, </address> <month> Jan. </month> <year> 1988, </year> <pages> 1382-1389. </pages>
Reference-contexts: There could be several in each class. For example, the ADAMS statements courses instantiates_a COURSES enrollment instantiates_a ENROLLMENT tenured instantiates_a FACULTY untenured instantiates_a FACULTY graduate instantiates_a STUDENTS hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 26 This school database structure has been previously described in <ref> [PSF88] </ref>. 24 undergrad instantiates_a STUDENTS would create an instantiated collection of data sets which are related in the fashion of Figure 3-5. student instructoradvisor advisor course enrollment coursesgrad_studentundergrad_student untenured_facultytenured_faculty All of these instantiated sets are initially empty.
Reference: [PFG89] <author> J. L. Pfaltz, J. C. French, A. Grimshaw, S. H. Son, P. Baron, S. Janet, Y. Lin, L. Loyd and R. McElrath, </author> <title> Implementation of the ADAMS Database System, </title> <institution> IPC TR-89-010, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: The use of such synonymous designators is completely optional. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 12 To support this linguistic feature, our ADAMS system <ref> [PFG89] </ref> implements attributes literally as functions, not fields in a static structure. Other implementations could be equally effective. 9 2.1.2.
Reference: [PfF90] <author> J. L. Pfaltz and J. C. </author> <title> French, Implementing Subscripted Identifiers in Scientific Databases, in Statistical and Scientific Database Management, </title> <editor> Z. Michalewicz (editor), </editor> <publisher> Springer-Verlag, </publisher> <address> Berlin-Heidelberg-New York, </address> <month> Apr. </month> <year> 1990, </year> <pages> 80-91. </pages>
Reference-contexts: This makes it easy to associate the entire array with other ADAMS elements by means of a map. Effective ways of actually implementing these kinds of subscripted representations are described in <ref> [PfF90] </ref>. 4.2. Sequences Given a provision for subscripting in the database model, there is no actual need for a sequence construct. One could define a set of subscripted elements and then manipulate the integer subscripts to impose a sequential order on the set.
Reference: [SSE87] <author> A. Sernadas, C. Sernadas and H. Ehrich, </author> <title> Object-Oriented Specification of Databases: An Algebraic Approach, </title> <booktitle> Proc. 13th VLDB Conf., </booktitle> <address> Brighton, England, </address> <month> Sep. </month> <year> 1987, </year> <pages> 107-116. </pages>
Reference-contexts: The concepts of element and object are so nearly synonymous that we are tempted use them interchangeably. We have chosen to use the term "element" partially because the term "object" already has many existing connotations in the computer literature <ref> [BBK87, CoM84, SSE87] </ref>, and partially because ADAMS elements are not properly objects in the sense of [Str88]. Nor is ADAMS is an object-oriented database system in the sense of [Kim90].
Reference: [Shi81] <author> D. W. Shipman, </author> <title> The Functional Data Model and the Data Language DAPLEX, </title> <journal> Trans. Database Systems 6,1 (Mar. </journal> <year> 1981), </year> <pages> 140-173. </pages>
Reference-contexts: An attribute is a function mapping elements into a codomain; that is, the image of an attribute is a value. In contrast, a map is a function mapping elements into a class; its image is another ADAMS element. In DAPLEX <ref> [Shi81] </ref> these concepts are called property and f unction respectively. In ORION [KBC87] the only mechanism for associating two different objects is an attribute concept, because there is no clear distinction between "objects" and "values", such as we have made. However, "primitive objects" behave similarly to our "values".
Reference: [Ste90] <author> M. Stonebraker and et.al, </author> <title> Third-Generation Database System Manifesto, </title> <booktitle> SIGMOD RECORD 19,3 (Sep. </booktitle> <year> 1990), </year> <pages> 31-44. </pages>
Reference-contexts: The expression x.m.a1 is well-formed, and denotes the current image value of a 1 applied to the element of the class Q which is the current image of x under m . Thus, ADAMS enables "navigational", or "pointer chasing", expressions which adherents of the relational model find abhorrent <ref> [Ste90] </ref>. But, the design goals of ADAMS have been to implement a variety of database models. ADAMS users can choose abstract database models which employ, or avoid, such constructs. 2.1.3. Predicates A predicate is any expression, P , that evaluates to true or false.
Reference: [StW83] <author> Q. Stout and P. Woodworth, </author> <title> Relational Databases, </title> <journal> Amer. Math. Monthly 90,2 (Feb. </journal> <year> 1983), </year> <pages> 101-118. </pages>
Reference-contexts: In ORION [KBC87] the only mechanism for associating two different objects is an attribute concept, because there is no clear distinction between "objects" and "values", such as we have made. However, "primitive objects" behave similarly to our "values". Relational database languages, (c.f. <ref> [Cha76, Cod70, Kim79, Mai83, StW83] </ref>) use the term attribute identically (except that we call the image space a codomain). The relational model has no analog to a map; such inter-class relationships are implemented by the join operator.
Reference: [Str87] <author> B. Stroustrup, </author> <title> The C++ Programming Language, </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1987. </year>
Reference-contexts: These are the kinds of higher level concepts that are primitive in most database design. ADAMS can bootstrap itself up, in a manner analogous to standard object-oriented programming languages <ref> [Str87, 81] </ref> 9 , so that the database designer can name these more complex data constructs and treat them as basic elements in his, or her, database view. But to do this we must develop additional linguistic and metalinguistic concepts. 2.1.
Reference: [Str88] <author> B. Stroustrup, </author> <title> What is Object-Oriented Programming?, </title> <journal> IEEE Software, </journal> <month> May </month> <year> 1988, </year> <pages> 10-2. </pages>
Reference-contexts: We have chosen to use the term "element" partially because the term "object" already has many existing connotations in the computer literature [BBK87, CoM84, SSE87], and partially because ADAMS elements are not properly objects in the sense of <ref> [Str88] </ref>. Nor is ADAMS is an object-oriented database system in the sense of [Kim90].
Reference: [Ull82] <author> J. D. Ullman, </author> <title> Principles of Database Systems, 2nd Ed., </title> <publisher> Computer Science Press, </publisher> <address> Rockville, MD, </address> <year> 1982. </year>
Reference-contexts: For example, it requires only the basic concepts of element, set, attribute and codomain. There is no equivalent of either the map or sequence concepts. It has been this very simplicity that has rendered it amenable to formal analysis (e.g. <ref> [Mai83, Ull82] </ref>), and has led to its wide spread use in practice. We will demonstrate this capability primarily by developing a running example. Recall the hackneyed, but comfortably familiar "Suppliers-Supplies-Parts" database that can be found in any undergraduate text.
Reference: [Weg87] <author> P. Wegner, </author> <title> Dimensions of Object-Based Language Design, </title> <booktitle> Proc. OOPSLA '87, </booktitle> <month> Oct. </month> <year> 1987, </year> <pages> 168-182. </pages>
Reference-contexts: Nor is ADAMS is an object-oriented database system in the sense of [Kim90]. For example, there are no methods associated with ADAMS elements. "Object-based", as in <ref> [Weg87] </ref>, is probably the best description of ADAMS, for it does employ the usual class hierarchy, with multiple inheri tance [Car84]; and it can support object-oriented database languages. 3 All elements (or instantiated objects, if you prefer this terminology) in an ADAMS database must be typed, that is belong to a

References-found: 32

