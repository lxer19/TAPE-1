URL: http://www.cs.caltech.edu/~arvo/papers/MetaHierarchies.ps
Refering-URL: http://www.cs.caltech.edu/~arvo/papers.html
Root-URL: http://www.cs.caltech.edu
Email: arvo@apollo.hp.com, arvo@yale.edu  
Title: Ray Tracing with Meta-Hierarchies  
Author: James Arvo 
Address: 300 Apollo Drive Chelmsford, MA 01824  
Affiliation: Apollo Systems Division of Hewlett-Packard  
Abstract: Because ray tracing acceleration techniques differ in their relative efficiency from scene to scene, no single technique can be optimal in all circumstances. This has lead researchers to develop hybrid algorithms that combine two or more distinct techniques into one. In this paper we describe a generalization of this idea, the meta-hierarchy, which arises from a procedural encapsulation of acceleration techniques described in [Kirk 88]. We discuss the pros and cons of this mechanism and suggest future research directions. 
Abstract-found: 1
Intro-found: 1
Reference: [Arvo 87] <author> Arvo, James, and David Kirk, </author> <title> "Fast Ray Tracing by Ray Classification," </title> <journal> Computer Graphics, </journal> <volume> Vol. 21, No. 4, </volume> <month> July </month> <year> 1987, </year> <pages> pp. 55-64. </pages>
Reference-contexts: Spatial subdivision algorithms include octrees [Glassner 84], BSP trees [Kaplan 87], uniform grids [Fujimoto 86], and macro regions [Devillers 89]. Directional techniques include the light buffer [Haines 86], the ray coherence algorithm [Ohta 87], and ray classification <ref> [Arvo 87] </ref>. Each dictates a particular organization of the geo metric entities comprising the environment and each prescribes a specific means of processing the data to locate the closest point of ray intersection. <p> We also save on the time required to build the aggregate initially since it is only built once. In the case of acceleration techniques that are constructed by lazy evaluation <ref> [Arvo 87] </ref>, their data structures may be partially built on behalf of each instance as rays encounter them.
Reference: [Arvo 89] <author> Arvo, James, and David Kirk, </author> <title> "A Survey of Ray Tracing Acceleration Techniques," in "An Introduction to Ray Tracing," edited by Andrew Glassner, </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: Though virtually every aspect of the algorithm has been studied for potential optimization, perhaps the greatest emphasis has been on the problem of efficiently finding the first point of intersection between a ray and a complex environment. Following the taxonomy outlined in <ref> [Arvo 89] </ref> we can classify the many algorithms devised for this type of optimization into three major categories: bounding volume hierarchies, spatial subdivision, and directional techniques. Representative algorithms in the bounding volume category are bounding box hierarchies [Rubin80] and bounding slabs [Kay 86]. <p> The method of simulated annealing may prove to be useful in coping with the resulting combinato rial optimization problem. Appendix A There are several references which contain probabilistic cost analysis of acceleration techniques. See [Goldsmith 87] or <ref> [Arvo 89] </ref> for a method of estimating the expected cost of intersecting a random ray with a bounding volume hierarchy. For expected costs associated with spatial subdivision see [Devillers 89] and the references therein.
Reference: [Devillers 89] <author> Devillers, Oliver, </author> <title> "The Macro-regions: an Efficient Space Subdivision Structure for Ray Tracing," Eurographics `89, </title> <editor> W. Hansmann, F.R.A. Hopgood, W. Strasser (Editors), </editor> <publisher> Elsevier Science Publishers B. V. (North-Holland), </publisher> <year> 1989, </year> <pages> pp. 27-38. </pages>
Reference-contexts: Representative algorithms in the bounding volume category are bounding box hierarchies [Rubin80] and bounding slabs [Kay 86]. Spatial subdivision algorithms include octrees [Glassner 84], BSP trees [Kaplan 87], uniform grids [Fujimoto 86], and macro regions <ref> [Devillers 89] </ref>. Directional techniques include the light buffer [Haines 86], the ray coherence algorithm [Ohta 87], and ray classification [Arvo 87]. <p> In particular, the bounding volumes are formed in such a way that siblings are guaranteed to be disjoint, in direct analogy with the vox-els of spatial subdivision. This is done by using octree subdivision to guide the creation of the volumes. Finally, Devillers <ref> [Devillers 89] </ref> introduced the notion of nesting one uniform grid structure within the voxels of another. <p> Appendix A There are several references which contain probabilistic cost analysis of acceleration techniques. See [Goldsmith 87] or [Arvo 89] for a method of estimating the expected cost of intersecting a random ray with a bounding volume hierarchy. For expected costs associated with spatial subdivision see <ref> [Devillers 89] </ref> and the references therein. Given the potential importance of this type of estimation to the problem of automatic meta-hierarchy creation, we now turn to a conditional probability theorem which forms the basis of the analysis.
Reference: [Fujimoto 86] <author> Fujimoto, Akira, Takayuki Tanaka, and Kansei Iwata, </author> <title> "ARTS: Accelerated Ray-Tracing System," </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> Vol. 6, No. 4, </volume> <month> April </month> <year> 1986, </year> <pages> pp. 16-26. </pages>
Reference-contexts: Representative algorithms in the bounding volume category are bounding box hierarchies [Rubin80] and bounding slabs [Kay 86]. Spatial subdivision algorithms include octrees [Glassner 84], BSP trees [Kaplan 87], uniform grids <ref> [Fujimoto 86] </ref>, and macro regions [Devillers 89]. Directional techniques include the light buffer [Haines 86], the ray coherence algorithm [Ohta 87], and ray classification [Arvo 87].
Reference: [Glassner 84] <author> Glassner, Andrew S., </author> <title> "Space Subdivision for Fast Ray Tracing," </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> Vol. 4, No. 10, </volume> <month> October </month> <year> 1984, </year> <pages> pp. 15-22. </pages>
Reference-contexts: Representative algorithms in the bounding volume category are bounding box hierarchies [Rubin80] and bounding slabs [Kay 86]. Spatial subdivision algorithms include octrees <ref> [Glassner 84] </ref>, BSP trees [Kaplan 87], uniform grids [Fujimoto 86], and macro regions [Devillers 89]. Directional techniques include the light buffer [Haines 86], the ray coherence algorithm [Ohta 87], and ray classification [Arvo 87].
Reference: [Glassner 88] <author> Glassner, Andrew S., </author> <title> "Spacetime Ray Tracing for Animation," </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> Vol. 8, No. 3, </volume> <month> March </month> <year> 1988, </year> <pages> pp. 60-70. </pages>
Reference-contexts: The additional advantage of instancing the same leaf node structure from many voxels allowed them to create scenes of enormous complexity. Glassner combined spatial subdivision with bounding volume hierarchies in a different way, creating a pure bounding volume hierarchy that possesses some of the characteristics of spatial subdivision <ref> [Glassner 88] </ref>. In particular, the bounding volumes are formed in such a way that siblings are guaranteed to be disjoint, in direct analogy with the vox-els of spatial subdivision. This is done by using octree subdivision to guide the creation of the volumes.
Reference: [Goldsmith 87] <author> Goldsmith, Jeffrey, and J. Salmon, </author> <title> "Automatic Creation of Object Hierarchies for Ray Tracing," </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> Vol. 7, No. 5, </volume> <month> May </month> <year> 1987, </year> <pages> pp. 14-20. </pages>
Reference-contexts: Considerations such as these are important because poor choices can easily increase the running time instead of decrease it. It is natural to ask whether this process can be performed automatically. Goldsmith and Salmon addressed the closely related problem of automatically creating efficient bounding volume hierarchies <ref> [Goldsmith 87] </ref>. This can be viewed as a special case of a meta-hierarchy: one in which the nodes encapsulate exhaustive search coupled with bounding volume tests. 1 Their approach was based on a metric for predicting the expected cost of intersecting a random ray with a given hierarchy. <p> The method of simulated annealing may prove to be useful in coping with the resulting combinato rial optimization problem. Appendix A There are several references which contain probabilistic cost analysis of acceleration techniques. See <ref> [Goldsmith 87] </ref> or [Arvo 89] for a method of estimating the expected cost of intersecting a random ray with a bounding volume hierarchy. For expected costs associated with spatial subdivision see [Devillers 89] and the references therein.
Reference: [Haines 86] <author> Haines, Eric A., and Donald P. Green-berg, </author> <title> "The Light Buffer: A Shadow-Testing Accelerator," </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> Vol. 6, No. 9, </volume> <month> September </month> <year> 1986, </year> <pages> pp. 6-16. </pages>
Reference-contexts: Representative algorithms in the bounding volume category are bounding box hierarchies [Rubin80] and bounding slabs [Kay 86]. Spatial subdivision algorithms include octrees [Glassner 84], BSP trees [Kaplan 87], uniform grids [Fujimoto 86], and macro regions [Devillers 89]. Directional techniques include the light buffer <ref> [Haines 86] </ref>, the ray coherence algorithm [Ohta 87], and ray classification [Arvo 87]. Each dictates a particular organization of the geo metric entities comprising the environment and each prescribes a specific means of processing the data to locate the closest point of ray intersection.
Reference: [Kaplan 87] <author> Kaplan, Michael R., </author> <title> "The Use of Spatial Coherence in Ray Tracing," in Techniques for Computer Graphics, </title> <editor> ed. David F. Rogers and Rae A. Earnshaw, </editor> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1987. </year>
Reference-contexts: Representative algorithms in the bounding volume category are bounding box hierarchies [Rubin80] and bounding slabs [Kay 86]. Spatial subdivision algorithms include octrees [Glassner 84], BSP trees <ref> [Kaplan 87] </ref>, uniform grids [Fujimoto 86], and macro regions [Devillers 89]. Directional techniques include the light buffer [Haines 86], the ray coherence algorithm [Ohta 87], and ray classification [Arvo 87].
Reference: [Kay 86] <author> Kay, Timothy L., and James Kajiya., </author> <title> "Ray Tracing Complex Scenes," </title> <journal> Computer Graphics, </journal> <volume> Vol. 20, No. 4, </volume> <month> August </month> <year> 1986, </year> <pages> pp. 269-278. </pages>
Reference-contexts: Following the taxonomy outlined in [Arvo 89] we can classify the many algorithms devised for this type of optimization into three major categories: bounding volume hierarchies, spatial subdivision, and directional techniques. Representative algorithms in the bounding volume category are bounding box hierarchies [Rubin80] and bounding slabs <ref> [Kay 86] </ref>. Spatial subdivision algorithms include octrees [Glassner 84], BSP trees [Kaplan 87], uniform grids [Fujimoto 86], and macro regions [Devillers 89]. Directional techniques include the light buffer [Haines 86], the ray coherence algorithm [Ohta 87], and ray classification [Arvo 87].
Reference: [Kirk 88] <author> Kirk, David, and James Arvo, </author> <title> "The Ray Tracing Kernel," </title> <booktitle> Proceedings of Ausgraph `88, </booktitle> <address> Melbourne, Australia, </address> <month> July </month> <year> 1988, </year> <pages> pp. 75-82. </pages>
Reference-contexts: This approach can be extended slightly to yield a convenient means of encapsulating acceleration techniques as well. This entails representing acceleration algorithms as aggregate objects, each with a procedural interface identical to that of primitive objects with the exception of one additional operation, add child (See <ref> [Kirk 88] </ref>, reprinted here). This operation makes an instance of a primitive or aggregate object subordinate to another aggregate object. The parent object is then responsible for performing the ray intersection operation on its collection of subordinate objects, or children, using their associated ray intersection methods. <p> One of the important advantages of the object data abstraction described in <ref> [Kirk 88] </ref> is that it lends itself to this type of construction. The uniformity of the interface across primitive and aggregate objects implies that any object can be the child of any aggregate object. <p> We can also choose to nest several different techniques simultaneously within a single structure such as an octree, employing uniform grids for collections of primitives that are fairly evenly dispersed and bounding volume hierarchies for small but closely packed collections of primitives. See <ref> [Kirk 88] </ref> for a specific example of how this type of nesting was used in the production of a large-scale ray traced animation. A single aggregate object may be instanced multiple times within the same environment in exact analogy with canonical primitive objects.
Reference: [Kirkpatrick 83] <author> Kirkpatrick, S., C. D. Gelatt, Jr., and M. P. Vecchi, </author> <title> "Optimization by Simulated Annealing," </title> <journal> Science, </journal> <volume> Vol. 220, </volume> <month> May 13, </month> <year> 1983, </year> <pages> pp. 671-680. </pages>
Reference-contexts: But even with such a metric, finding a near-optimal meta-hierarchy is a very difficult combinatorial optimization problem. A technique which may be applicable in this context is simulated annealing <ref> [Kirkpatrick 83] </ref>. This is a strategy for probabilistically exploring the solution space of large combinatorial optimization problems and finding incremental improvements in the objective function without getting stuck in a poor local minimum.
Reference: [Ohta 87] <author> Ohta, Masataka, and Mamouru Maekawa, </author> <title> "Ray Coherence Theorem and Constant Time Ray Tracing Algorithm," </title> <booktitle> Computer Graphics 1987 (Proceedings of CG International '87), </booktitle> <editor> ed. T. L. </editor> <booktitle> Kunii, </booktitle> <pages> pp. 303-314. </pages>
Reference-contexts: Representative algorithms in the bounding volume category are bounding box hierarchies [Rubin80] and bounding slabs [Kay 86]. Spatial subdivision algorithms include octrees [Glassner 84], BSP trees [Kaplan 87], uniform grids [Fujimoto 86], and macro regions [Devillers 89]. Directional techniques include the light buffer [Haines 86], the ray coherence algorithm <ref> [Ohta 87] </ref>, and ray classification [Arvo 87]. Each dictates a particular organization of the geo metric entities comprising the environment and each prescribes a specific means of processing the data to locate the closest point of ray intersection.
Reference: [Rubin80] <author> Rubin, Steve, and Turner Whitted, </author> <title> "A Three-Dimensional Representation for Fast Rendering of Complex Scenes," </title> <journal> Computer Graphics, </journal> <volume> Vol. 14, No. 3, </volume> <month> July </month> <year> 1980, </year> <pages> pp. 110-116. </pages>
Reference-contexts: Following the taxonomy outlined in [Arvo 89] we can classify the many algorithms devised for this type of optimization into three major categories: bounding volume hierarchies, spatial subdivision, and directional techniques. Representative algorithms in the bounding volume category are bounding box hierarchies <ref> [Rubin80] </ref> and bounding slabs [Kay 86]. Spatial subdivision algorithms include octrees [Glassner 84], BSP trees [Kaplan 87], uniform grids [Fujimoto 86], and macro regions [Devillers 89]. Directional techniques include the light buffer [Haines 86], the ray coherence algorithm [Ohta 87], and ray classification [Arvo 87].
Reference: [Scherson 87] <author> Scherson, Isaac D., and Elisha Cas-pary, </author> <title> "Data structures and the time complexity of ray tracing," The Visual Computer, </title> <journal> Springer-Verlag, </journal> <volume> Vol. 3, </volume> <year> 1987, </year> <pages> pp. 201-213. 6 </pages>
Reference-contexts: Two popular approaches that have been combined into hybrids are spatial subdivision and bounding volume hierarchies. Scherson and Caspary performed empirical studies in order to determine conditions in which one or the other proved more efficient <ref> [Scherson 87] </ref>. Their results led them to a hybrid that employed coarse octree subdivision at the top level and bounding volume hierarchies in the leaf voxels. Synder and Barr took a similar approach but performed the initial spatial subdivision using a uniform grid structure [Snyder 87].
Reference: [Snyder 87] <author> Snyder, John M. and Alan H. Barr, </author> <title> "Ray Tracing Complex Models Containing Surface Tessellations," </title> <journal> Computer Graphics, </journal> <volume> Vol. 21, No. 4, </volume> <month> July </month> <year> 1987, </year> <pages> pp. 119-126. </pages> <editor> [van de Hulst 81] van de Hulst, H. C., </editor> <title> "Light Scattering by Small Particles," </title> <publisher> Dover Publications, Inc., </publisher> <address> New York, </address> <year> 1981. </year>
Reference-contexts: Their results led them to a hybrid that employed coarse octree subdivision at the top level and bounding volume hierarchies in the leaf voxels. Synder and Barr took a similar approach but performed the initial spatial subdivision using a uniform grid structure <ref> [Snyder 87] </ref>. The additional advantage of instancing the same leaf node structure from many voxels allowed them to create scenes of enormous complexity. <p> See [Kirk 88] for a specific example of how this type of nesting was used in the production of a large-scale ray traced animation. A single aggregate object may be instanced multiple times within the same environment in exact analogy with canonical primitive objects. As observed in <ref> [Snyder 87] </ref>, this allows us to save space by reusing not only the objects managed by the aggregate but also the internal data structures (e.g. octrees or grids). We also save on the time required to build the aggregate initially since it is only built once.
Reference: [Whitted 80] <author> Whitted, Turner, </author> <title> "An Improved Illumination Model for Shaded Display," </title> <journal> Communications of the ACM, </journal> <volume> 32(6), </volume> <month> June </month> <year> 1980, </year> <pages> pp. 343-349. 7 </pages>
Reference-contexts: 1 Introduction Ray tracing acceleration has received much attention in the decade since Whitted introduced his illumination model and established ray tracing as one of the preeminent algorithms for high fidelity image synthesis <ref> [Whitted 80] </ref>. Though virtually every aspect of the algorithm has been studied for potential optimization, perhaps the greatest emphasis has been on the problem of efficiently finding the first point of intersection between a ray and a complex environment.
References-found: 17

