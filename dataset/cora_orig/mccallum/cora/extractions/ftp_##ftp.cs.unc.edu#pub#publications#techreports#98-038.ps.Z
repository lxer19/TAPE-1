URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/98-038.ps.Z
Refering-URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/FILE.html
Root-URL: http://www.cs.unc.edu
Title: MAPC: A library for Efficient and Exact Manipulation of Algebraic Points and Curves  
Author: John Keyser Tim Culver Dinesh Manocha Shankar Krishnan 
Address: Chapel Hill, NC 27599-3175  
Affiliation: Department of Computer Science University of North Carolina,  
Abstract: We present MAPC, a library for exact representation of geometric objects specifically points and algebraic curves in the plane. Our library makes use of several new algorithms, which we present here, including methods for finding the sign of a determinant, finding intersections between two curves, and breaking a curve into monotonic segments. These algorithms are used to speed-up the underlying computations. The library provides C++ classes that can be used to easily instantiate, manipulate, and perform queries on points and curves in the plane. The point classes can be used to represent points known in a variety of ways (e.g. as exact rational coordinates or algebraic numbers) in a unified manner. The curve class can be used to represent a portion of an algebraic curve. We have used MAPC for applications dealing with algebraic points and curves, including sorting points along a curve, computing arrangement of curves, medial axis computations and boundary evaluation of spline primitives. As compared to earlier algorithms and implementations utilizing exact arithmetic, our library is able to achieve more than an order of magnitude improvement in performance. 
Abstract-found: 1
Intro-found: 1
Reference: [AB88] <author> S.S. Abhyankar and C. Bajaj. </author> <title> Computations with algebraic curves. </title> <booktitle> In Lecture Notes in Computer Science, </booktitle> <volume> volume 358, </volume> <pages> pages 279-284. </pages> <publisher> Springer Verlag, </publisher> <year> 1988. </year>
Reference: [ABB + 92] <author> E. Anderson, Z. Bai, C. Bischof, J. Demmel, J. Dongarra, J. Du Croz, A. Greenbaum, S. Hammarling, and D. Sorensen. </author> <title> LAPACK User's Guide, Release 1.0. </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1992. </year>
Reference-contexts: Before running the Chinese-remainder code, we use a new filter based proposed by Demmel [Dem98]. The integer matrix is approximated with a double-precision floating-point matrix, and its singular value decomposition (SVD) is computed using the LAPACK library <ref> [ABB + 92] </ref>. The determinant sign is easily read off from the SVD. To diagnose the correctness of this sign, we apply a backwards error bound, as described in [DK90]. We use the l 2 matrix norm. <p> The function f (n) is known to be at worst 100n 3 . (We use f (n) = 100n 3 + 1 to account for the rounding error in representing A as a floating-point matrix.) The LAPACK User's Guide <ref> [ABB + 92] </ref> suggests that when computing backwards error bounds on the SVD, f (n) = 1 is realistic.
Reference: [ABD + 94] <author> F. Avnaim, J.-D. Boissonnat, O. Devillers, F. Preparata, and M. Yvinec. </author> <title> Evaluating signs of determinants using single-precision arithmetic. </title> <type> Research Report 2306, </type> <institution> INRIA, BP93, 06902 Sophia-Antipolis, France, </institution> <year> 1994. </year>
Reference-contexts: Karasick et. al. [KLN91] present a variety of techniques based on exact interval arithmetic on matrices of order 2-4. Fortune and Van Wyk [FV93] experiment with a variety of determinant algorithms and filters, and an expression compiler, on matrices of order 3-4. Avnaim et. al. <ref> [ABD + 94] </ref> computes determinant signs of order 2-3 using only single-precision arithmetic, assuming the matrix entries are single-precision. 4 2.3 2D Root Finding Finding 2D roots of a pair of bivariate equations is a well studied problem which is usually considered in a more general setting of finding roots of
Reference: [ACM84a] <author> D. S. Arnon, G. E. Collins, and S. McCallum. </author> <title> Cylindrical algebraic decomposition I: The basic algorithm. </title> <journal> SIAM J. Comput., </journal> <volume> 13(4) </volume> <pages> 865-877, </pages> <year> 1984. </year>
Reference-contexts: a number of other approaches, including those based on interval arithmetic have been explored. 2.4 Algebraic Curve Topology The curve decomposition algorithm which we discuss in section 4.3 is closely related to the problem of finding a Cylindrical Algebraic Decomposition (CAD) for a curve, although the CAD is more general. <ref> [ACM84a, ACM84b] </ref> gives a good overview of the CAD. [AF88] gives one example of an approach taken for computing the CAD.
Reference: [ACM84b] <author> D. S. Arnon, G. E. Collins, and S. McCallum. </author> <title> Cylindrical algebraic decomposition II: The adjacency algorithm for the plane. </title> <journal> SIAM J. Comput., </journal> <volume> 13(4) </volume> <pages> 878-889, </pages> <year> 1984. </year> <month> 27 </month>
Reference-contexts: a number of other approaches, including those based on interval arithmetic have been explored. 2.4 Algebraic Curve Topology The curve decomposition algorithm which we discuss in section 4.3 is closely related to the problem of finding a Cylindrical Algebraic Decomposition (CAD) for a curve, although the CAD is more general. <ref> [ACM84a, ACM84b] </ref> gives a good overview of the CAD. [AF88] gives one example of an approach taken for computing the CAD.
Reference: [AF88] <author> S. Arnborg and H. Feng. </author> <title> Algebraic decomposition of regular curves. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 5 </volume> <pages> 131-140, </pages> <year> 1988. </year>
Reference-contexts: interval arithmetic have been explored. 2.4 Algebraic Curve Topology The curve decomposition algorithm which we discuss in section 4.3 is closely related to the problem of finding a Cylindrical Algebraic Decomposition (CAD) for a curve, although the CAD is more general. [ACM84a, ACM84b] gives a good overview of the CAD. <ref> [AF88] </ref> gives one example of an approach taken for computing the CAD. Some work has addressed the specific problem we deal with more directly, notably [KYP92] (although their method is not exact). 3 Representations In this section we discuss the representations used by the C++ classes in our library.
Reference: [BBP95] <author> I. Biehl, J. Buchmann, and T. Papanikolaou. Lidia: </author> <title> A library for computational number theory. </title> <type> Technical Report SFB 124-C1, </type> <institution> Fachbereich Informatik, Universitt des Saarlandes, </institution> <year> 1995. </year>
Reference-contexts: Section 5 discusses how our approach differs from these previous approaches. 2.1 Geometric and Algebraic Libraries We mention here some of the previously developed geometric and algebraic libraries. In section 5, we discuss the differences between these systems and MAPC. LiDIA <ref> [BBP95] </ref> is a library developed for computational number theory which provides basic rational and polynomial operations that are useful in a number of geometric algorithms. LEDA [MN89] provides a number of geometric data types and geometric algorithms in addition to various number classes. <p> The classic algorithm for computing the determinant of an integer matrix is based on the Chinese remainder theorem. A recent treatment may be found in [MC93], and an efficient implementation may be found in the LiDIA library <ref> [BBP95] </ref>. Bronniman et. al. [BEPP97] improve this technique with a new Chinese-remainder reconstruction algorithm. Much of the recent work on the exact determinant-sign problem has focused on small matrices. Karasick et. al. [KLN91] present a variety of techniques based on exact interval arithmetic on matrices of order 2-4.
Reference: [BEPP97] <author> H. Bronnimann, I. Emiris, V. Pan, and S. Pion. </author> <title> Computing exact geometric predicates using modular arithmetic with single precision. </title> <booktitle> In Proc. 13th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 174-182, </pages> <year> 1997. </year>
Reference-contexts: The classic algorithm for computing the determinant of an integer matrix is based on the Chinese remainder theorem. A recent treatment may be found in [MC93], and an efficient implementation may be found in the LiDIA library [BBP95]. Bronniman et. al. <ref> [BEPP97] </ref> improve this technique with a new Chinese-remainder reconstruction algorithm. Much of the recent work on the exact determinant-sign problem has focused on small matrices. Karasick et. al. [KLN91] present a variety of techniques based on exact interval arithmetic on matrices of order 2-4. <p> Comparison of methods. In table 7, we show that the four-stage filter improves on the speed of the general Chinese-remainder algorithm as implemented in LiDIA. The routine we call "Inria" is Sylvain Pion's implementation of the algorithm in <ref> [BEPP97] </ref>. The Inria code and LiDIA implement essentially the same algorithm, and both take advantage of IEEE double-precision floating-point to compute in modular arithmetic. The Inria code allows as input only matrices with entries up to 53 bits in length, the largest integers that will fit in a double.
Reference: [Can87] <author> J. Canny. </author> <title> The Complexity of Robot Motion Planning. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1987. </year>
Reference: [Can88] <author> J.F. Canny. </author> <title> The Complexity of Robot Motion Planning. ACM Doctoral Dissertation Award. </title> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: These include boundary evaluation algorithms on NURBS and algebraic primitives [KKM97, Hof89], computing the medial axis or internal Voronoi regions of a polyhedron [SP95, CKM98], recognizing curved objects from images using aspect graphs [KP90], robot motion planning <ref> [Can88] </ref>, etc. Most of the earlier algorithms and libraries do not provide adequate support for manipulating algebraic points and curves. In this paper, we present efficient algorithms and a library, MAPC, for efficient and exact computation and manipulation of algebraic points and curves. <p> A number of approaches have been used to solve this. One approach is to use worst-case bit length estimates to guarantee accurate results (e.g. <ref> [Can88, Yu92] </ref>), Another approach involves the use of multivariate Sturm sequences (e.g. [Ped91, Mil92]). Grobner Basis methods are commonly used, particularly in general computer algebra systems.
Reference: [CKM98] <author> T. Culver, J. Keyser, and D. Manocha. </author> <title> Accurate computation of the medial axis of a polyhedron. </title> <type> Technical Report TR98-034, </type> <institution> Department of Computer Science, University of North Carolina, </institution> <year> 1998. </year>
Reference-contexts: The need for effective manipulation of algebraic points and curves comes up in several applications. These include boundary evaluation algorithms on NURBS and algebraic primitives [KKM97, Hof89], computing the medial axis or internal Voronoi regions of a polyhedron <ref> [SP95, CKM98] </ref>, recognizing curved objects from images using aspect graphs [KP90], robot motion planning [Can88], etc. Most of the earlier algorithms and libraries do not provide adequate support for manipulating algebraic points and curves. <p> Obtaining the turning points, then, is the primary bottleneck. 6.4 Sorting points along a curve One application we have applied MAPC to is that of sorting points along a curve. This problem is a key step in certain medial axis computations <ref> [CKM98] </ref>. Given the representation provided in MAPC the sorting procedure is not very complicated. Once the curve has been broken into monotonic segments with non-overlapping bounding boxes, we simply find which of the bounding boxes contains each of the points known to be on the curve.
Reference: [Dav93] <author> J. H. Davenport. </author> <title> Computer Algebra Systems and algorithms for algebraic computation. </title> <publisher> Academic Press, </publisher> <address> London, 2 edition, </address> <year> 1993. </year>
Reference-contexts: to find all intersections between the two curves, then a bound on the maximum and minimum sizes of real roots of X (x) = 0 (and Y (y) = 0), and thus of the real intersections of f = 0 and g = 0, can be obtained (e.g. as in <ref> [Dav93] </ref>), and this used to define the test region.
Reference: [Dem98] <author> J. Demmel. </author> <title> Private Communication, </title> <year> 1998. </year>
Reference-contexts: To compute the determinant modulo P , it is computed modulo each p i (typically using Gaussian elimination), and reconstructed from these residues. Before running the Chinese-remainder code, we use a new filter based proposed by Demmel <ref> [Dem98] </ref>. The integer matrix is approximated with a double-precision floating-point matrix, and its singular value decomposition (SVD) is computed using the LAPACK library [ABB + 92]. The determinant sign is easily read off from the SVD.
Reference: [DK90] <author> J. Demmel and W. Kahan. </author> <title> Accurate singular values of bidiagonal matrices. </title> <journal> SIAM J. Sci. Stat. Computing, </journal> <volume> 11 </volume> <pages> 873-992, </pages> <year> 1990. </year>
Reference-contexts: The determinant sign is easily read off from the SVD. To diagnose the correctness of this sign, we apply a backwards error bound, as described in <ref> [DK90] </ref>. We use the l 2 matrix norm. The computed SVD of the matrix A is the exact SVD of a nearby matrix A 0 , and the distance kA A 0 k can be bounded.
Reference: [FGK + 96] <author> Andreas Fabri, Geert-Jan Giezeman, Lutz Kettner, Stefan Schirra, and Sven Schonherr. </author> <title> The CGAL kernel: A basis for geometric computation. </title> <editor> In M. C. Lin and D. Manocha, editors, </editor> <booktitle> Applied Computational Geometry (Proc. WACG '96), volume 1148 of Lecture Notes Comput. Sci., </booktitle> <pages> pages 191-202. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: LiDIA [BBP95] is a library developed for computational number theory which provides basic rational and polynomial operations that are useful in a number of geometric algorithms. LEDA [MN89] provides a number of geometric data types and geometric algorithms in addition to various number classes. The CGAL library <ref> [FGK + 96] </ref> provides similar support, but in a more extensible format.
Reference: [For95] <author> Steven Fortune. </author> <title> Voronoi diagrams and delaunay triangulations. </title> <editor> In D. Z. Du and F. Hwang, editors, </editor> <booktitle> Computing in Euclidean Geometry, </booktitle> <pages> pages 225-265. </pages> <publisher> World Scientific Press, </publisher> <address> Singapore, </address> <year> 1995. </year>
Reference-contexts: 1 Introduction A common assumption in the design of geometric algorithms is that all points can be easily defined and manipulated. Such an assumption is usually a result of relying on the "real RAM" model of computation <ref> [For95] </ref>, in which all arithmetic operations are exact and take constant time. No computer implements this model. fl Currently at AT & T Research Labs 1 Implementors must sacrifice either exactness (as in floating-point) or constant time performance (as in multiprecision arithmetic).
Reference: [FV93] <author> S. Fortune and C. J. Van Wyk. </author> <title> Efficient exact arithmetic for computational geometry. </title> <booktitle> In Proc. 9th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 163-172, </pages> <year> 1993. </year> <month> 28 </month>
Reference-contexts: Much of the recent work on the exact determinant-sign problem has focused on small matrices. Karasick et. al. [KLN91] present a variety of techniques based on exact interval arithmetic on matrices of order 2-4. Fortune and Van Wyk <ref> [FV93] </ref> experiment with a variety of determinant algorithms and filters, and an expression compiler, on matrices of order 3-4. <p> that if we could remove all memory allocation problems (calls to malloc (), unnecessary memory cache misses, and so forth) from the determinant routine, we could attain a speedup of as much as 12. (Some techniques for improving the behavior of bigints with respect to memory management are explored in <ref> [FV93] </ref>.) Utility of filter stages. Table 8 shows the four stages in our filter in order, together with the number of matrices (out of 100) which terminate at that stage. This demonstrates the efficacy of the various stages.
Reference: [Hof89] <author> C.M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1989. </year>
Reference-contexts: Finding a way to effectively deal with points and curves can be a significant bottleneck in efficient and robust implementations of geometric algorithms. The need for effective manipulation of algebraic points and curves comes up in several applications. These include boundary evaluation algorithms on NURBS and algebraic primitives <ref> [KKM97, Hof89] </ref>, computing the medial axis or internal Voronoi regions of a polyhedron [SP95, CKM98], recognizing curved objects from images using aspect graphs [KP90], robot motion planning [Can88], etc. Most of the earlier algorithms and libraries do not provide adequate support for manipulating algebraic points and curves.
Reference: [KKM97] <author> J. Keyser, S. Krishnan, and D. Manocha. </author> <title> Efficient and accurate b-rep generation of low degree sculptured solids using exact arithmetic. </title> <booktitle> In ACM/SIGGRAPH Symposium on Solid Modeling, </booktitle> <pages> pages 42-55, </pages> <year> 1997. </year>
Reference-contexts: Finding a way to effectively deal with points and curves can be a significant bottleneck in efficient and robust implementations of geometric algorithms. The need for effective manipulation of algebraic points and curves comes up in several applications. These include boundary evaluation algorithms on NURBS and algebraic primitives <ref> [KKM97, Hof89] </ref>, computing the medial axis or internal Voronoi regions of a polyhedron [SP95, CKM98], recognizing curved objects from images using aspect graphs [KP90], robot motion planning [Can88], etc. Most of the earlier algorithms and libraries do not provide adequate support for manipulating algebraic points and curves. <p> The roots are represented as an interval, and roots are isolated using Sturm sequences, * ROOT2: ROOT2s allow the representation of roots of a pair of bivariate equations. ROOT2s isolate roots either by the use of a bivariate Sturm sequence (described in <ref> [KKM97] </ref>) or by a new method outlined in section 4.2. <p> This allows us to determine what portion of the curve a point lies on simply by finding which bounding box it is in. A direct way of performing such a subdivision has been discussed in <ref> [KKM97] </ref>. 5 Comparisons with other systems In this section we compare how MAPC differs from previous libraries. We do not know of any library which allows the unified exact representations for points and curves that MAPC does.
Reference: [KLN91] <author> Michael Karasick, Derek Lieber, and Lee R. Nackman. </author> <title> Efficient de-launay triangulation using rational arithmetic. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 10(1) </volume> <pages> 71-91, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Bronniman et. al. [BEPP97] improve this technique with a new Chinese-remainder reconstruction algorithm. Much of the recent work on the exact determinant-sign problem has focused on small matrices. Karasick et. al. <ref> [KLN91] </ref> present a variety of techniques based on exact interval arithmetic on matrices of order 2-4. Fortune and Van Wyk [FV93] experiment with a variety of determinant algorithms and filters, and an expression compiler, on matrices of order 3-4.
Reference: [KP90] <author> D.J. Kriegman and J. Ponce. </author> <title> Computing exact aspect graphs of curved objects: Solids of revolution. </title> <journal> International Journal of Computer Vision, </journal> <volume> 5(2) </volume> <pages> 119-135, </pages> <year> 1990. </year>
Reference-contexts: The need for effective manipulation of algebraic points and curves comes up in several applications. These include boundary evaluation algorithms on NURBS and algebraic primitives [KKM97, Hof89], computing the medial axis or internal Voronoi regions of a polyhedron [SP95, CKM98], recognizing curved objects from images using aspect graphs <ref> [KP90] </ref>, robot motion planning [Can88], etc. Most of the earlier algorithms and libraries do not provide adequate support for manipulating algebraic points and curves. In this paper, we present efficient algorithms and a library, MAPC, for efficient and exact computation and manipulation of algebraic points and curves.
Reference: [KYP92] <author> David J. Kriegman, Erliang Yeh, and Jean Ponce. </author> <title> Convex hulls of algebraic curves. </title> <editor> In J. D. Warren, editor, </editor> <booktitle> Proceedings of the International Society for Optical Engineering Volume 1830, Curves and Surfaces in Computer Vision and Graphics III, </booktitle> <pages> pages 118-127. </pages> <address> SPIE, Boston, </address> <year> 1992. </year>
Reference-contexts: Some work has addressed the specific problem we deal with more directly, notably <ref> [KYP92] </ref> (although their method is not exact). 3 Representations In this section we discuss the representations used by the C++ classes in our library. We first give an overview of the representations, and then discuss how these representations are particularly useful in geometric applications.
Reference: [MC93] <author> D. Manocha and J.F. Canny. </author> <title> Multipolynomial resultant algorithms. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 15(2) </volume> <pages> 99-122, </pages> <year> 1993. </year>
Reference-contexts: The classic algorithm for computing the determinant of an integer matrix is based on the Chinese remainder theorem. A recent treatment may be found in <ref> [MC93] </ref>, and an efficient implementation may be found in the LiDIA library [BBP95]. Bronniman et. al. [BEPP97] improve this technique with a new Chinese-remainder reconstruction algorithm. Much of the recent work on the exact determinant-sign problem has focused on small matrices.
Reference: [Mil92] <author> P. S. Milne. </author> <title> On the solutions of a set of polynomial equations. </title> <booktitle> In Symbolic and Numerical Computation for Artificial Intelligence, </booktitle> <pages> pages 89-102, </pages> <year> 1992. </year>
Reference-contexts: A number of approaches have been used to solve this. One approach is to use worst-case bit length estimates to guarantee accurate results (e.g. [Can88, Yu92]), Another approach involves the use of multivariate Sturm sequences (e.g. <ref> [Ped91, Mil92] </ref>). Grobner Basis methods are commonly used, particularly in general computer algebra systems.
Reference: [MN89] <author> K. Mehlhorn and S. Naher. LEDA, </author> <title> a library of efficient data types and algorithms. Report A 04/89, Fachber. </title> <type> Inform., </type> <institution> Univ. Saarlandes, Saarbrucken, West Germany, </institution> <year> 1989. </year>
Reference-contexts: In section 5, we discuss the differences between these systems and MAPC. LiDIA [BBP95] is a library developed for computational number theory which provides basic rational and polynomial operations that are useful in a number of geometric algorithms. LEDA <ref> [MN89] </ref> provides a number of geometric data types and geometric algorithms in addition to various number classes. The CGAL library [FGK + 96] provides similar support, but in a more extensible format.
Reference: [Ped91] <author> P. Pedersen. </author> <title> Multivariate sturm theory. </title> <booktitle> In Proceedings of AAECC, </booktitle> <pages> pages 318-332. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: A number of approaches have been used to solve this. One approach is to use worst-case bit length estimates to guarantee accurate results (e.g. [Can88, Yu92]), Another approach involves the use of multivariate Sturm sequences (e.g. <ref> [Ped91, Mil92] </ref>). Grobner Basis methods are commonly used, particularly in general computer algebra systems.
Reference: [Reg96] <author> Ashu Rege. </author> <title> A Toolkit for Algebra and Geometry. </title> <type> Ph.D. dissertation, </type> <institution> Univ. of California at Berkeley, Berkeley, California, </institution> <year> 1996. </year>
Reference-contexts: LEDA [MN89] provides a number of geometric data types and geometric algorithms in addition to various number classes. The CGAL library [FGK + 96] provides similar support, but in a more extensible format. The APU toolkit <ref> [Reg96] </ref>, much like the work of the FRISCO and POSSO projects, provides support for algebraic numbers. 2.2 Signs of determinants Many important geometric queries can be expressed as the sign of the determinant of a suitable matrix.
Reference: [She96] <author> Jonathan R. Shewchuk. </author> <title> Robust adaptive floating-point geometric predicates. </title> <booktitle> In Proc. 12th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 141-150, </pages> <year> 1996. </year>
Reference: [SP95] <author> E. C. Sherbrooke and N. M. Patrikalakis. </author> <title> Computation of medial axis transforms of 3d polyhedra. </title> <editor> In J. R. Rossignac and C. M. Hoffmann, editors, </editor> <booktitle> Proc. Third ACM Solid Modeling Conference, </booktitle> <year> 1995. </year> <month> 29 </month>
Reference-contexts: The need for effective manipulation of algebraic points and curves comes up in several applications. These include boundary evaluation algorithms on NURBS and algebraic primitives [KKM97, Hof89], computing the medial axis or internal Voronoi regions of a polyhedron <ref> [SP95, CKM98] </ref>, recognizing curved objects from images using aspect graphs [KP90], robot motion planning [Can88], etc. Most of the earlier algorithms and libraries do not provide adequate support for manipulating algebraic points and curves.

References-found: 29

