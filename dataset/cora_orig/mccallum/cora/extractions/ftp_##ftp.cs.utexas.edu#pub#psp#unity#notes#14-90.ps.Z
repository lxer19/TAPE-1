URL: ftp://ftp.cs.utexas.edu/pub/psp/unity/notes/14-90.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/psp/notesunity.html
Root-URL: http://www.cs.utexas.edu
Email: misra@cs.utexas.edu  
Phone: (512) 471-9547  
Title: Soundness of the Substitution Axiom Notes on UNITY: 14-90  
Author: Jayadev Misra 
Date: March 2, 1990  
Address: Austin, Texas 78712  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> Chandy, K. Mani and Jayadev Misra [1988]. </author> <title> Parallel Program Design: A Foundation, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1988. </year>
Reference-contexts: Since then proposals have appeared [2] to eliminate the substitution axiom altogether. The confusion stems from our (poor) choice of the symbol "" to stand for logical equivalence of predicates as well as to denote a definition in <ref> [1] </ref>. The substitution axiom is a labor-saving device. It allows us to shorten many predicates in a long proof. The engineering advantages of including the substitution axiom outweigh| in my opinion|the disadvantages of requiring a stricter discipline of program composition (see Section 7 of this note or Section 7.2.4 of [1]). <p> <ref> [1] </ref>. The substitution axiom is a labor-saving device. It allows us to shorten many predicates in a long proof. The engineering advantages of including the substitution axiom outweigh| in my opinion|the disadvantages of requiring a stricter discipline of program composition (see Section 7 of this note or Section 7.2.4 of [1]). However, unsoundness of the substitution axiom is certainly not one of the problems. In this note, I restate the inference rules for unless, ensures, leads-to and the substitution axiom. <p> t :: fp ^ :qg t fqgi p ensures q * p ensures q p 7! q p 7! r ; r 7! q * h9 m :: p:mi 7! q 3 Substitution Axiom We state the substitution axiom in a form slightly different, though equivalent, to the one in <ref> [1] </ref>: For a proof of a given program, any invariant of it can be regarded as a theorem. As a consequence, any invariant in a property can be replaced by true and true can be replaced by any invariant. <p> Then p 7! q follows. 6 Proofs of Derived Rules Consider a derived rule such as for the disjunction of unlesses (Section 3.6.1 of <ref> [1] </ref>): p unless q p 0 unless q 0 (p _ p 0 ) unless (:p ^ q 0 ) _ (:p 0 ^ q) _ (q ^ q 0 ) The proof in [1] assumes that each of the unless properties in the hypothesis is directly provable. <p> Derived Rules Consider a derived rule such as for the disjunction of unlesses (Section 3.6.1 of <ref> [1] </ref>): p unless q p 0 unless q 0 (p _ p 0 ) unless (:p ^ q 0 ) _ (:p 0 ^ q) _ (q ^ q 0 ) The proof in [1] assumes that each of the unless properties in the hypothesis is directly provable. <p> Using the above lemma p (I ^ J ) unless q (I ^ J ) and p 0 (I ^ J) unless q 0 (I ^ J ) are both directly provable. Therefore using the arguments in <ref> [1] </ref> we deduce|where ^p is a shorthand for p (I ^ J )| ^p ^ ^p 0 unless (: ^p ^ ^q 0 ) _ (: ^p 0 ^ ^q) _ (^q ^ ^q 0 ) Now applying the substitution axiom with I ^ J we deduce p ^ p 0 <p> Now observe that p ^ (q ) r) ^ I ^ J unless q ^ (q ) r) ^ I ^ J is directly provable, for some directly provable invariant I. Next applying the arguments in <ref> [1] </ref>, we may weaken the consequence to obtain: p ^ (q ) r) ^ I ^ J unless r Then applying the substitution axiom with (q ) r) ^ I ^ J we obtain p unless r 7 7 Program Composition One part of the union theorem (Section 7.2.1 of [1]) <p> <ref> [1] </ref>, we may weaken the consequence to obtain: p ^ (q ) r) ^ I ^ J unless r Then applying the substitution axiom with (q ) r) ^ I ^ J we obtain p unless r 7 7 Program Composition One part of the union theorem (Section 7.2.1 of [1]) states p unless q in F [] G = p unless q in F ^ p unless q in G The restriction, given in Section 7.2.4 of [1], is that any appeal to the substitution axiom made in any of the proofs|in F; G or F [] G|can only use <p> ^ I ^ J we obtain p unless r 7 7 Program Composition One part of the union theorem (Section 7.2.1 of <ref> [1] </ref>) states p unless q in F [] G = p unless q in F ^ p unless q in G The restriction, given in Section 7.2.4 of [1], is that any appeal to the substitution axiom made in any of the proofs|in F; G or F [] G|can only use the invariants of F [] G; it is not permissible to deduce p unless q in F , say, by using an invariant of F to appeal to
Reference: 2. <author> Sanders, Beverly A. </author> <year> [1990]. </year> <title> "Eliminating the substitution axiom from UNITY logic," </title> <note> to appear as ETH Departement Informatik TR 148, </note> <year> 1990. </year>
Reference-contexts: Last June, Jan van de Snepscheut showed me an example where p unless q, in a given program, for some specific p; q, could be proven "true" by application of the substitution axiom and "false" by appealing to the original definition. Since then proposals have appeared <ref> [2] </ref> to eliminate the substitution axiom altogether. The confusion stems from our (poor) choice of the symbol "" to stand for logical equivalence of predicates as well as to denote a definition in [1]. The substitution axiom is a labor-saving device.
Reference: 3. <author> Hunter, Geoffrey [1971]. Metalogic: </author> <title> An Introduction to the Metatheory of Standard First Order Logic, </title> <institution> University of California Press, Berkeley and Los Angeles, California, </institution> <year> 1971. </year>
Reference-contexts: the soundness of the proof system, next. 5 Soundness In a system such as ours|often called a positive axiom system, because negation of a property cannot be deduced|soundness amounts to showing that some properties cannot be deduced for a given program; in the literature this is known as absolute consistency <ref> [3] </ref>. We restrict ourselves to programs whose initial conditions are not identically false; call such programs nontrivial. Theorem: For any nontrivial program with initial condition ic, one of the following is not deducible. ic unless false ic ensures :ic Proof: Suppose we can deduce both of these properties.
References-found: 3

