URL: http://www.cs.umd.edu/~nau/planning/merging-ci92.ps
Refering-URL: http://www.cs.umd.edu/~nau/publications.html
Root-URL: 
Title: Merging Separately Generated Plans with Restricted Interactions  Major Classification: Problem solving. Minor Classification: Planning.  
Author: Qiang Yang Dana S. Nau James Hendler 
Keyword: Planning, Automated Reasoning, Problem Solving, Problem Decomposition, Search Control.  
Address: N2L 3G1, Canada.  College Park, MD. 20742, USA.  College Park, MD. 20742, USA.  
Affiliation: University of Waterloo  University of Maryland  University of Maryland  Computer Science, Waterloo, Ont.  Computer Science Department, Systems Research Center, and Institute for Advanced Computer Studies.  Computer Science Department, Systems Research Center, and Institute for Advanced Computer Studies.  
Note: Computational Intelligence,  
Email: Email: qyang@watdragon.waterloo.edu.  Email: nau@cs.umd.edu.  Email: hendler@cs.umd.edu.  
Phone: Tel: 519-888-4716.  Tel: 301-405-2684.  Tel: 301-454-4148.  
Date: 8(2):648-676, February 1992.  
Abstract: Generating action sequences to achieve a set of goals is a computationally difficult task. When multiple goals are present, the problem is even worse. Although many solutions to this problem have been discussed in the literature, practical solutions focus on the use of restricted mechanisms for planning or the application of domain dependent heuristics for providing rapid solutions (i.e. domain-dependent planning). One previously proposed technique for handling multiple goals efficiently is to design a planner or even a set of planners (usually domain-dependent) that can be used to generate separate plans for each goal. The outputs are typically either restricted to be independent and then concatenated into a single global plan, or else they are merged together using complex heuristic techniques. In this paper we explore a set of limitations, less restrictive than the assumption of independence, that still allow for the efficient merging of separate plans using straightforward algorithmic techniques. In particular, we demonstrate that for cases where separate plans can be individually generated, we can define a set of limitations on the allowable interactions between goals that allow efficient plan merging to occur. We propose a set of restrictions that are satisfied across a significant class of planning domains. We present algorithms that are efficient for special cases of multiple plan merging, propose a heuristic search algorithm that performs well in a more general case (where alternative partially-ordered plans have been generated for each goal), and describe an empirical study that demonstrates the efficiency of this search algorithm. fl This work was supported in part by an NSERC operating grant to Dr. Yang, by an NSF Presidential Young Investigator award for Dr. Nau, NSF Equipment grant CDA-8811952 for Dr. Nau, NSF Grant NSFD CDR-88003012 to the University of Maryland Systems Research Center, NSF grant IRI-8907890 for Dr. Nau and Dr. Hendler, and ONR grant N00014-91-J-1451 for Dr. Hendler. 
Abstract-found: 1
Intro-found: 1
Reference: [Allen, 1983] <author> J.F. Allen, </author> <title> "Maintaining Knowledge about Temporal Intervals," </title> <journal> Communications of the ACM, </journal> <volume> 26, No. 11, </volume> <pages> pages 832-843, </pages> <year> 1983. </year> <month> 29 </month>
Reference-contexts: However, to find the set of identical-action and simultaneous-action interactions, one needs more information than is contained in the common STRIPS operator representation. The additional information requires time points or intervals in action definitions <ref> [Allen, 1983] </ref>, or other such temporal representations. For the purpose of this paper, we will assume that the list of interactions can be constructed using a combination of the domain knowledge expressed in the operators, and the plans generated for the goals.
Reference: [Baker and Greenwood, 1987] <author> T.C. Baker, J.R. </author> <title> Greenwood "Star: an environment for development and execution of knowledge-based planning applications" Proceedings DARPA Knowledge-based Planning Workshop, </title> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: Within the domain-dependent planning world, the issue of integrating the outputs of several planners has been considered an important one. Two major DARPA initiatives, the AirLand Battle Management program (cf. <ref> [Baker and Greenwood, 1987, Greenwood et al. 1987] </ref>) and the Pilots' Associate program (cf. [Smith, 1987, Key, 1987]), for example, were centered around the notion of a set of different domain-specific planners generating separate plans for aspects of a mission with a central coordinator (generally viewed as itself some sort of
Reference: [Berlin et al. 1987] <author> Berlin, M., Bogdanowicz, J. and Diamond, W. </author> <booktitle> "Planning and control aspects of the scorpius vision system architecture" Proceedings DARPA Knowledge-based Planning Workshop, </booktitle> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: Such domain-dependent planning systems have been built for many practical problems. Some examples include military command and control planning applications [Baker and Greenwood, 1987, Glasson and Pomarede, 1987, Brown and Gaucus, 1987], route planning [Garvey and Wesley, 1987], autonomous vehicle navigation <ref> [Berlin et al. 1987, Linden and Owre, 1987] </ref>, and automated manufacturing [Chang and Wysk, 1985, Cutkoski and Tenenbaum, 1987, Hayes, 1987, Nau, 1987]. Within the domain-dependent planning world, the issue of integrating the outputs of several planners has been considered an important one.
Reference: [Brown and Gaucus, 1987] <author> A. Brown and Gaucus, D. </author> <booktitle> "Propsective Situation Assessment" Proceedings DARPA Knowledge-based Planning Workshop, </booktitle> <month> Dec. </month> <year> 1987. </year>
Reference: [Bylander, 1991] <author> T. Bylander, </author> <title> "Complexity Results for Planning," </title> <booktitle> Proc. IJCAI-91, </booktitle> <year> 1991, </year> <pages> pp. 274-279. </pages>
Reference: [Chapman, 1987] <author> D. Chapman, </author> <title> "Planning for Conjunctive Goals," </title> <booktitle> Artificial Intelligence (32), </booktitle> <year> 1987, </year> <pages> 333-377. </pages>
Reference-contexts: While much of modern planning research has focused on the issues of dealing with such interactions in domain-independent ways (for example <ref> [Chapman, 1987, Sacerdoti, 1977, Tate, 1977, Vere, 1983, Wilkins, 1984] </ref> 1 ), little work has focused on how the outcomes of either separate domain-dependent planners, or multiple runs of the same planner, could be combined into a single global plan. <p> Although these "least commitment" planners are more efficient in handling conflicts than their linear counterparts, there is still usually too much computation involved; the problem requires exponential time in most interesting cases <ref> [Chapman, 1987] </ref>. Such extensive computation is not feasible for planning in many real-world domains. This exponentiality is of particular difficulty in systems dealing with multiple goals: as more subgoals are added to a single conjoined goal, the solution time is drastically increased.
Reference: [Chang and Wysk, 1985] <author> T. C. Chang and R. A. Wysk, </author> <title> An Introduction to Automated Process Planning Systems, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1985. </year>
Reference-contexts: If the same machining operation is to be performed on two different holes of the same diameter, then these two operations can be merged by omitting the task of changing the cutting tool. This and several other similar manufacturing problems are of practical significance (see <ref> [Chang and Wysk, 1985, Hayes, 1987] </ref>), and in fact, much of the work in this paper derives from our ongoing work in developing a computer system for solving such problems [Nau, 1987, Nau et al. 1988]. Example 2.
Reference: [Cutkoski and Tenenbaum, 1987] <author> M. R. Cutkoski and J. M. Tenenbaum, </author> <title> "CAD/CAM Integration Through Concurrent Process and Product Design," </title> <booktitle> Proc. Symposium on Integrated and Intelligent Manufacturing at ASME Winter Annual Meeting, </booktitle> <year> 1987, </year> <pages> pp. 1-10. </pages>
Reference: [Drummond and Bresina, 1990] <author> M. Drummond and J. Bresina, </author> <title> "Anytime Synthetic Projection: Maximizing the Probability of Goal Satisfaction," </title> <booktitle> Proc. AAAI-90, </booktitle> <year> 1990, </year> <pages> 138-144. </pages>
Reference-contexts: For example, one idea currently being explored is to let a planner continue working to improve a plan as long as time permits <ref> [Drummond and Bresina, 1990] </ref>. The planner can successively generate different (usually improving) plans until some time threshold is exceeded. A similar idea, although less time-dependent, appears in the SIPS process planning system, which generates sequences of machining operations for producing machinable parts (cf. Example 2 of Section 3).
Reference: [Erol et al., 1991] <author> K. Erol, D. Nau, and V. S. Subrahmanian. </author> <title> "Complexity, Decidability and Undecidability Results for Domain-Independent Planning," </title> <note> submitted for publication, </note> <year> 1991. </year>
Reference: [Erol et al., 1992a] <author> K. Erol, D. Nau, and V. S. Subrahmanian, </author> <title> "When is Planning Decidable?", </title> <booktitle> Proc. First Internat. Conf. AI Planning Systems, </booktitle> <year> 1992, </year> <note> to appear. </note>
Reference: [Erol et al., 1992b] <author> K. Erol, D. Nau, and V. S. Subrahmanian, </author> <title> "On the Complexity of Domain-Independent Planning," </title> <booktitle> Proc. AAAI-92, </booktitle> <year> 1992, </year> <note> to appear. </note>
Reference: [Fikes and Nilsson, 1971] <author> R. E. Fikes and N. J. Nilsson, </author> <title> "STRIPS: A New Approach to the Application of Theorem Proving to Problem Solving," </title> <journal> Artificial Intelligence (2:3/4), </journal> <year> 1971, </year> <pages> 189-208. </pages>
Reference-contexts: This condition is satisfied in a planning problem if the individual goals can be achieved sequentially in any arbitrary order 3 . Early planners typically generated plans for the goals as if the planning problem were linear. As an example, the STRIPS planner <ref> [Fikes and Nilsson, 1971] </ref> handled compound goals that were conjuncts of component goals in this manner.
Reference: [Foulser et al. 1992] <author> D.E. Foulser, M. Li and Q. Yang, </author> <title> "Theory and Algorithms for Plan Merging," </title> <note> to appear in Artificial Intelligence, 1992. Also available as Research Report, </note> <institution> CS-90-40, University of Waterloo, Waterloo, Ont. Canada. </institution>
Reference-contexts: As we demonstrated earlier, if Restriction 2 is not satisfied then it is NP-hard to find an optimal merged plan. An alternative option is to find an algorithm that produces near-optimal plans. In <ref> [Foulser et al. 1992] </ref>, an algorithm is presented to find merged plans in the case where the only allowable interactions are action-merging interactions. Results presented in [Foulser et al. 1992] show that their algorithm is guaranteed to find near-optimal plans. <p> An alternative option is to find an algorithm that produces near-optimal plans. In <ref> [Foulser et al. 1992] </ref>, an algorithm is presented to find merged plans in the case where the only allowable interactions are action-merging interactions. Results presented in [Foulser et al. 1992] show that their algorithm is guaranteed to find near-optimal plans. Algorithm 3, shown below, generalizes their algorithm to handle the case where there can be not only action-merging interactions, but also simultaneous action interactions, identical action interactions, and action-precedence interactions.
Reference: [Freuder, 1982] <author> E.C. Freuder, </author> " <title> A sufficient condition of backtrack-free search." </title> <journal> Journal of the ACM, </journal> <volume> 29(1) </volume> <pages> 23-32, </pages> <year> 1982. </year> <month> 30 </month>
Reference-contexts: Thus, it would appear that in domains where the number of such conflicts is limited, our approach is still viable. Finally, we believe that a parallel can be drawn between the optimal merged plan problems and constraint satisfaction problems (CSP's) <ref> [Freuder, 1982, Mackworth, 1981] </ref>. In CSP, there is a set of variables, each with a set of possible values to be assigned to it, and a set of consistency relations between the variables. A solution to a problem using constraint propagation is to find one or all consistent variable assignments.
Reference: [Garey and Johnson, 1979] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractabil--ity, A Guide to the Theory of NP-Completeness, </title> <institution> Bell Laboratories, </institution> <address> Murray Hill, New Jersey, </address> <year> 1979. </year>
Reference: [Garvey and Wesley, 1987] <author> Garvey, T. and Wesley, L. </author> <note> "Knowledge-based Helicopter Route Planning" Proceedings DARPA Knowledge-based Planning Workshop, </note> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: Such domain-dependent planning systems have been built for many practical problems. Some examples include military command and control planning applications [Baker and Greenwood, 1987, Glasson and Pomarede, 1987, Brown and Gaucus, 1987], route planning <ref> [Garvey and Wesley, 1987] </ref>, autonomous vehicle navigation [Berlin et al. 1987, Linden and Owre, 1987], and automated manufacturing [Chang and Wysk, 1985, Cutkoski and Tenenbaum, 1987, Hayes, 1987, Nau, 1987]. Within the domain-dependent planning world, the issue of integrating the outputs of several planners has been considered an important one.
Reference: [Glasson and Pomarede, 1987] <author> D.P. Glasson, and J.L. Pomarede, </author> <title> "Navigation Sensor Planning for Future Tactical Fighter Missions" Proceedings DARPA Knowledge-based Planning Workshop, </title> <month> Dec. </month> <year> 1987. </year>
Reference: [Greenwood et al. 1987] <author> J. Greenwood, G. Stachnick and H. </author> <title> Kay "A Procedural Reasoning System for Army Maneuver Planning," </title> <booktitle> Proceedings DARPA Knowledge-based Planning Workshop, </booktitle> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: Within the domain-dependent planning world, the issue of integrating the outputs of several planners has been considered an important one. Two major DARPA initiatives, the AirLand Battle Management program (cf. <ref> [Baker and Greenwood, 1987, Greenwood et al. 1987] </ref>) and the Pilots' Associate program (cf. [Smith, 1987, Key, 1987]), for example, were centered around the notion of a set of different domain-specific planners generating separate plans for aspects of a mission with a central coordinator (generally viewed as itself some sort of
Reference: [Gupta and Nau, 1991] <author> N. Gupta and D. Nau, </author> <title> "Complexity Results for Blocks-World Planning," </title> <booktitle> Proc. AAAI-91, </booktitle> <year> 1991. </year> <note> Honorable mention for the best paper award. </note>
Reference: [Gupta and Nau, 1992] <author> N. Gupta and D. Nau, </author> <title> "On the Complexity of Blocks-World Planning," </title> <journal> Artificial Intelligence, </journal> <note> 1992, to appear. </note>
Reference-contexts: Plans for different goals may sometimes contain some of the same actions. An identical-action interaction occurs when an action in one plan must be identical to an 5 In fact, the classic "Blocks World" can be reformulated in this way; see <ref> [Gupta and Nau, 1992] </ref>. 6 action in one of the other plans. 4. Sometimes, two different actions must occur at the same time, and we call such an interaction a simultaneous-action interaction. An example would be two robotic hands working together in order to pick up an object.
Reference: [Hayes, 1987] <author> C. Hayes, </author> <title> "Using Goal Interactions to Guide Planning," </title> <booktitle> Proc. AAAI-87, </booktitle> <year> 1987, </year> <pages> 224-228. </pages>
Reference-contexts: If the same machining operation is to be performed on two different holes of the same diameter, then these two operations can be merged by omitting the task of changing the cutting tool. This and several other similar manufacturing problems are of practical significance (see <ref> [Chang and Wysk, 1985, Hayes, 1987] </ref>), and in fact, much of the work in this paper derives from our ongoing work in developing a computer system for solving such problems [Nau, 1987, Nau et al. 1988]. Example 2.
Reference: [Hendler et al. 1990] <editor> J. Hendler, A. Tate, and M. </editor> <title> Drummond "AI Planning: </title> <journal> Systems and Techniques" AI Magazine, </journal> <volume> 11(2), </volume> <month> May, </month> <year> 1990, </year> <pages> 61-77. </pages>
Reference-contexts: In this paper we discuss an approach to multiple-goal planning that falls somewhere in the middle of this trade-off. The approach is to generate plans for each goal individually, 1 A review of this work is presented in <ref> [Hendler et al. 1990] </ref>. 2 The most famous example of this is the "Sussman anomaly," in which solving one goal undoes the independently derived solution to the other. 2 ignoring how each plan might affect the other goals.
Reference: [Kambhampati and Tenenbaum, 1990] <author> S. Kambhampati and J.M. Tenenbaum, </author> <title> "Planning in Concurrent Domains," </title> <booktitle> Proc. of the DARPA Workshop on Innovative Approaches to Planning, Scheduling, and COntrol, </booktitle> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: More recently, a similar approach was proposed by Kambhampati and Tenen-baum <ref> [Kambhampati and Tenenbaum, 1990] </ref> for dealing with concurrent engineering sys 3 The literature sometimes uses the term "linear" to describe the situation where "some" rather than "any" ordering will work. A discussion of planning terminology is provided in [Tate et al. 1990]. 4 tems.
Reference: [Karinthi et al., 1992] <author> R. Karinthi, D. Nau, and Q. Yang. </author> <title> "Handling feature interactions in process planning," </title> <journal> Applied Artificial Intelligence, special issue on AI for manufacturing, </journal> <note> 1992, to appear. </note>
Reference-contexts: For a more detailed discussion of this problem, see <ref> [Karinthi et al., 1992] </ref>. 2. Although many logistics planning problems do not have both restrictions holding, there are interesting problems that do.
Reference: [Key, 1987] <author> C. </author> <title> Key "Cooperative Planning in the Pilot's Associate," </title> <booktitle> Proceedings DARPA Knowledge-based Planning Workshop, </booktitle> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: Within the domain-dependent planning world, the issue of integrating the outputs of several planners has been considered an important one. Two major DARPA initiatives, the AirLand Battle Management program (cf. [Baker and Greenwood, 1987, Greenwood et al. 1987]) and the Pilots' Associate program (cf. <ref> [Smith, 1987, Key, 1987] </ref>), for example, were centered around the notion of a set of different domain-specific planners generating separate plans for aspects of a mission with a central coordinator (generally viewed as itself some sort of domain-dependent expert system) that could integrate the outputs.
Reference: [Knuth, 1968] <author> D. E. Knuth, </author> <booktitle> The Art of Computer Programming, Volume 1: Fundamental Algorithms, </booktitle> <address> Addison-Weseley, Reading, Mass., </address> <year> 1968. </year>
Reference-contexts: Check to see whether the graph still represents a consistent partial ordering (this can be done in time O (n 2 ) using a topological sorting algorithm <ref> [Knuth, 1968] </ref>, with a straightforward extension to handle the simultaneous-action interactions). If it does not, then exit with failure (no global plan exists for this problem).
Reference: [Korf, 1987a] <author> Korf, R.E., </author> <title> "Planning as Search: A Quantitative Approach," </title> <booktitle> Artificial Intelligence (33), </booktitle> <year> 1987, </year> <pages> 65-88. </pages>
Reference-contexts: One piece of work that does relate to this area is Korf's <ref> [Korf, 1987a] </ref> analysis of the decomposition of plans into subgoals in search related planning systems. <p> In this case, this plan is the optimal merged plan. 4.3 Analysis: One plan per goal Korf <ref> [Korf, 1987a] </ref> has pointed out that given certain assumptions, one can reduce exponentially the time required to solve a conjoined-goal planning problem if the individual goals are independent. Below, we generalize Korf 's result. <p> In <ref> [Korf, 1987a] </ref>, Korf discusses this approach in the context of a particular example, namely the 8-puzzle. Below, we restate Korf 's assumptions and results in a more general abstract manner, allowing us (in Section 4.3.2) to use them to derive a similar result for the case of (restricted) dependent goals. <p> analysis, it follows that in the worst case, planning for G by decomposing it into the individual goals will achieve an exponential amount of reduction in the time required to solve the problem, provided that the individual goals are independent (the same result that Korf derived for the 8-puzzle in <ref> [Korf, 1987a] </ref>). 4.3.2 Dependent Goals In Section 4.3.1, we assumed that all goals were independent. In this section we generalize this result. <p> Such a technique has been explored in the literature either in the context of search problems relating to planning <ref> [Korf, 1987a] </ref> or using complex mechanisms for integrating the outputs of a set of planners (as discussed in Section 2). The approach taken in the paper has been to explore the merging of these plans in 28 the context of a set of limitations on the interactions between plans.
Reference: [Korf, 1987b] <author> Korf, R.E. </author> <title> "Real-Time Path Planning" Proceedings DARPA Knowledge-based Planning Workshop, </title> <month> Dec. </month> <year> 1987. </year>
Reference: [Linden and Owre, 1987] <author> Linden, T., and Owre, S. </author> <note> "Transformational Synthesis Applied to ALV Mission Planning" Proceedings DARPA Knowledge-based Planning Workshop, Dec. 1987. 31 </note>
Reference-contexts: Such domain-dependent planning systems have been built for many practical problems. Some examples include military command and control planning applications [Baker and Greenwood, 1987, Glasson and Pomarede, 1987, Brown and Gaucus, 1987], route planning [Garvey and Wesley, 1987], autonomous vehicle navigation <ref> [Berlin et al. 1987, Linden and Owre, 1987] </ref>, and automated manufacturing [Chang and Wysk, 1985, Cutkoski and Tenenbaum, 1987, Hayes, 1987, Nau, 1987]. Within the domain-dependent planning world, the issue of integrating the outputs of several planners has been considered an important one.
Reference: [Luria, 1987] <author> M. Luria, </author> <title> "Goal Conflict Concerns," </title> <booktitle> Proc. IJCAI, </booktitle> <year> 1987, </year> <pages> 1025-1031. </pages>
Reference: [Mackworth, 1981] <author> A.K. Mackworth, </author> " <title> Consistency in networks of relations," </title> <editor> In Webber and Nilsson, editors, </editor> <booktitle> Readings in Artificial Intelligence, </booktitle> <pages> pages 69-78. </pages> <publisher> Morgan Kauf-mann Publishers Inc., </publisher> <year> 1981. </year>
Reference-contexts: Thus, it would appear that in domains where the number of such conflicts is limited, our approach is still viable. Finally, we believe that a parallel can be drawn between the optimal merged plan problems and constraint satisfaction problems (CSP's) <ref> [Freuder, 1982, Mackworth, 1981] </ref>. In CSP, there is a set of variables, each with a set of possible values to be assigned to it, and a set of consistency relations between the variables. A solution to a problem using constraint propagation is to find one or all consistent variable assignments.
Reference: [Maier, 1978] <author> D. Maier, </author> <title> "The Complexity of Some Problems on Subsequences and Super-sequences," </title> <journal> J. ACM (25), </journal> <year> 1978, </year> <pages> 322-336. </pages>
Reference: [ McDermott, 1977] <author> D. </author> <title> McDermott Flexibility and Efficiency in a Computer Program for Designing Circuits, </title> <institution> AI Laboratory, Massachusetts Institute of Technology, </institution> <type> Technical Report AI-TR-402, </type> <year> 1977. </year>
Reference: [Nau, 1987] <author> D. S. Nau, </author> <title> "Automated Process Planning Using Hierarchical Abstraction," Award winner, Texas Instruments 1987 Call for Papers on Industrial Automation, </title> <journal> Texas Instruments Technical Journal, </journal> <month> Winter </month> <year> 1987, </year> <pages> 39-46. </pages>
Reference-contexts: This and several other similar manufacturing problems are of practical significance (see [Chang and Wysk, 1985, Hayes, 1987]), and in fact, much of the work in this paper derives from our ongoing work in developing a computer system for solving such problems <ref> [Nau, 1987, Nau et al. 1988] </ref>. Example 2. <p> A similar idea, although less time-dependent, appears in the SIPS process planning system, which generates sequences of machining operations for producing machinable parts (cf. Example 2 of Section 3). SIPS finds multiple plans for each part to be manufactured <ref> [Nau, 1987] </ref>). <p> As an example of such a domain, we have conducted experiments with the algorithm using the EFHA process planning system [Thompson, 1989], a domain-dependent planner based on the earlier SIPS process planner <ref> [Nau, 1987] </ref>. The decision to use EFHA was made for a largely pragmatic reason: as the developers of the code, we had complete access and could implement the algorithms in precise detail. <p> In the previous section, we have outlined several possible extensions of this work|but even without these, this approach is currently being used successfully in at least one application domain <ref> [Nau, 1987, Nau et al. 1988] </ref>. As we continue our research into more general forms of limited-interaction planning, we are convinced that this approach has potential for significantly improving the performance of planning systems across a number of additional domains.
Reference: [Nau et al. 1984] <author> D.S. Nau, V. Kumar and L. Kanal, </author> <title> "General Branch and Bound, and Its Relation to A* and AO*," </title> <journal> Artificial Intelligence, </journal> <volume> (23), </volume> <year> 1984, </year> <pages> 29-58. </pages>
Reference-contexts: Below we develop a lower bound function that is informed enough to reduce the search space dramatically in many cases. 10 The relationship between best-first branch and bound and the A* algorithm is well known <ref> [Nau et al. 1984] </ref>.
Reference: [Nau et al. 1988] <author> D. S. Nau, R. Karinthi, G. Vanecek, and Q. Yang, </author> <title> "Integrating AI and Solid Modeling for Design and Process Planning," </title> <booktitle> Proc. Second IFIP Working Group 5.2 Workshop on Intelligent CAD, </booktitle> <address> Cambridge, England, </address> <month> Sept. </month> <year> 1988. </year>
Reference-contexts: This and several other similar manufacturing problems are of practical significance (see [Chang and Wysk, 1985, Hayes, 1987]), and in fact, much of the work in this paper derives from our ongoing work in developing a computer system for solving such problems <ref> [Nau, 1987, Nau et al. 1988] </ref>. Example 2. <p> In the previous section, we have outlined several possible extensions of this work|but even without these, this approach is currently being used successfully in at least one application domain <ref> [Nau, 1987, Nau et al. 1988] </ref>. As we continue our research into more general forms of limited-interaction planning, we are convinced that this approach has potential for significantly improving the performance of planning systems across a number of additional domains.
Reference: [Nilsson, 1980] <author> N. Nilsson, </author> <booktitle> Principles of Artificial Intelligence, Chapters 7 and 8, </booktitle> <publisher> Tioga Publishing Co., </publisher> <year> 1980. </year>
Reference: [Preparata and Yeh, 1973] <author> F. P. Preparata and R. T. Yeh, </author> <title> Introduction to Discrete Structures, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1973. </year>
Reference-contexts: i + (i + n)n) = O (n 3 ). 7 In practice, of course, there may be more than one list of interactions|but in this case we simply take the union of the sets. 8 A Hasse diagram is a standard representation of a partially ordered set (e.g., see <ref> [Preparata and Yeh, 1973] </ref>). We actually need a slight generalization of a Hasse diagram here, since we also have the case where two non-identical actions are constrained to occur at the same time. 10 3.
Reference: [Sacerdoti, 1977] <author> E. D. Sacerdoti, </author> <title> "A Structure of Plans and Behavior," </title> <publisher> American Elsevier, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: While much of modern planning research has focused on the issues of dealing with such interactions in domain-independent ways (for example <ref> [Chapman, 1987, Sacerdoti, 1977, Tate, 1977, Vere, 1983, Wilkins, 1984] </ref> 1 ), little work has focused on how the outcomes of either separate domain-dependent planners, or multiple runs of the same planner, could be combined into a single global plan.
Reference: [Sellis, 1988] <author> T. Sellis, </author> <title> "Multiple-Query Optimization," </title> <journal> ACM Transactions on Database Systems (13:1), </journal> <month> March </month> <year> 1988, </year> <pages> 23-52. </pages>
Reference-contexts: Each task has a cost, and the cost of a plan is the sum of the costs of its tasks. Two tasks can be merged if they are the same, or if the result of evaluating one task reduces the cost of evaluating the other. The multiple-query optimization problem <ref> [Sellis, 1988] </ref> is to find a global access plan by selecting and merging the individual plans so that the cost of the global plan is minimized. As described in [Shim et al. 1991], the plan merging techniques described in this paper provide significantly improved performance in solving this problem.
Reference: [Shim et al. 1991] <author> K. Shim, T. Sellis, and D. Nau, </author> <title> "Improvements of a Heuristic Algorithm for Multiple-Query Optimization," </title> <note> submitted for journal publication, </note> <year> 1991. </year>
Reference-contexts: The multiple-query optimization problem [Sellis, 1988] is to find a global access plan by selecting and merging the individual plans so that the cost of the global plan is minimized. As described in <ref> [Shim et al. 1991] </ref>, the plan merging techniques described in this paper provide significantly improved performance in solving this problem. In this paper we consider two different cases of the optimal merged plan problem. <p> Thus, the mergeability classes form a partial order, in which the class that contains s and s 0 precedes the class that contains t and t 0 . For a more detailed discussion of the multiple-query optimization problem and how plan-merging applies to it, see <ref> [Shim et al. 1991] </ref>. Suppose the above restrictions are satisfied, and suppose we are given a set of plans S and a list of interactions, as was done in Section 4.1. If a global plan exists, then Algorithm 1 will produce the global plan combine (S).
Reference: [Smith, 1987] <author> Smith, </author> <title> "Plan Coordination in Support of Expert Systems Integration," </title> <booktitle> Proceedings DARPA Knowledge-based Planning Workshop, </booktitle> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: Within the domain-dependent planning world, the issue of integrating the outputs of several planners has been considered an important one. Two major DARPA initiatives, the AirLand Battle Management program (cf. [Baker and Greenwood, 1987, Greenwood et al. 1987]) and the Pilots' Associate program (cf. <ref> [Smith, 1987, Key, 1987] </ref>), for example, were centered around the notion of a set of different domain-specific planners generating separate plans for aspects of a mission with a central coordinator (generally viewed as itself some sort of domain-dependent expert system) that could integrate the outputs.
Reference: [Stefik, 1981] <author> M. Stefik, </author> <title> "Planning with Constraints (MOLGEN: </title> <booktitle> Part 1)," Artificial Intelligence (16), </booktitle> <year> 1981, </year> <pages> 111-140. </pages>
Reference: [Sussman, 1982] <author> G. Sussman, </author> <title> "A Computer Model of Skill Acquisition," </title> <publisher> American Elsevier, </publisher> <address> New York, </address> <year> 1982. </year>
Reference: [Tate, 1977] <author> A. Tate, </author> <title> "Generating Project Networks," </title> <booktitle> Proc. IJCAI, </booktitle> <year> 1977, </year> <pages> 888-893. 32 </pages>
Reference-contexts: While much of modern planning research has focused on the issues of dealing with such interactions in domain-independent ways (for example <ref> [Chapman, 1987, Sacerdoti, 1977, Tate, 1977, Vere, 1983, Wilkins, 1984] </ref> 1 ), little work has focused on how the outcomes of either separate domain-dependent planners, or multiple runs of the same planner, could be combined into a single global plan.
Reference: [Tate et al. 1990] <editor> A. Tate, J. Hendler, and M. </editor> <title> Drummond, "A Review of AI Planning Techniques" Readings in Planning, </title> <editor> Allen, J., Hendler, J., and Tate, A. (eds.) </editor> <publisher> Morgan-Kaufmann: </publisher> <address> Palo Alto, California, </address> <year> 1990. </year>
Reference-contexts: More recently, a similar approach was proposed by Kambhampati and Tenen-baum [Kambhampati and Tenenbaum, 1990] for dealing with concurrent engineering sys 3 The literature sometimes uses the term "linear" to describe the situation where "some" rather than "any" ordering will work. A discussion of planning terminology is provided in <ref> [Tate et al. 1990] </ref>. 4 tems. This work differed from the earlier work in that it allowed other entities than planners to be included and used a planning framework for the integration, as opposed to a domain-specific expert.
Reference: [Thompson, 1989] <author> S. Thompson, </author> <title> "Environment for Hierarchical Abstraction: A User Guide," </title> <type> Tech. Report, </type> <institution> Computer Science Department, University of Maryland, College Park, </institution> <year> 1989. </year>
Reference-contexts: As an example of such a domain, we have conducted experiments with the algorithm using the EFHA process planning system <ref> [Thompson, 1989] </ref>, a domain-dependent planner based on the earlier SIPS process planner [Nau, 1987]. The decision to use EFHA was made for a largely pragmatic reason: as the developers of the code, we had complete access and could implement the algorithms in precise detail.
Reference: [Vere, 1983] <author> S. A. Vere, </author> <title> "Planning in Time: Windows and Durations for Activities and Goals," </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence (PAMI-5:3), </journal> <year> 1983, </year> <pages> 246-247. </pages>
Reference-contexts: While much of modern planning research has focused on the issues of dealing with such interactions in domain-independent ways (for example <ref> [Chapman, 1987, Sacerdoti, 1977, Tate, 1977, Vere, 1983, Wilkins, 1984] </ref> 1 ), little work has focused on how the outcomes of either separate domain-dependent planners, or multiple runs of the same planner, could be combined into a single global plan. <p> A separate approach to dealing with inefficiency in the handling of multiple goals focuses on placing appropriate restrictions on goal and subgoal interactions. Perhaps the best known example of this is Vere's DEVISER <ref> [Vere, 1983] </ref> system which approached the problem by using temporal scopings associated with goals and actions. Much of the planning behavior in the DEVISER system involved setting up temporal constraints and comparing them to the durations of requisite actions.
Reference: [Wilensky, 1983] <author> R. Wilensky, </author> <title> Planning and Understanding, </title> <publisher> Addison-Wesley: </publisher> <address> Reading, Massachusetts, </address> <year> 1983. </year>
Reference-contexts: For example, consider the following situation (based on <ref> [Wilensky, 1983] </ref>): John lives one mile from a bakery and one mile from a dairy. The two stores are 1.5 miles apart. John has two goals: to buy bread and to buy milk. <p> The two stores are 1.5 miles apart. John has two goals: to buy bread and to buy milk. 9 Which, we remind the reader, may be a partial order. No assumption of total ordering was made. 18 This time, however, let us add the fact (based on <ref> [Wilensky, 1983] </ref>) that John lives 1.25 miles from a large grocery store that sells both bread and milk. The best plans for the individual goals involve two separate trips: one to the store and one to the dairy.
Reference: [Wilkins, 1984] <author> D. Wilkins, </author> <title> "Domain-independent Planning: Representation and Plan Generation," </title> <booktitle> Artificial Intelligence (22), </booktitle> <year> 1984. </year>
Reference-contexts: While much of modern planning research has focused on the issues of dealing with such interactions in domain-independent ways (for example <ref> [Chapman, 1987, Sacerdoti, 1977, Tate, 1977, Vere, 1983, Wilkins, 1984] </ref> 1 ), little work has focused on how the outcomes of either separate domain-dependent planners, or multiple runs of the same planner, could be combined into a single global plan. <p> Much of the planning behavior in the DEVISER system involved setting up temporal constraints and comparing them to the durations of requisite actions. Wilkins' SIPE system <ref> [Wilkins, 1984] </ref> provided a general mechanism for handling multiple goals, but also allowed for the integration of specific rules for limiting the set of interactions to be considered at various times in the planning, and to allow human operator interaction in eliminating possibilities and making decisions.
Reference: [Yang and Tenenberg, 1990] <author> Qiang Yang and Josh Tenenberg, "Abtweak: </author> <title> Abstracting a nonlinear, least commitment planner," </title> <booktitle> Proceedings of the Eigth National Conference on Artificial Intelligence, </booktitle> <address> Boston, </address> <month> August, </month> <year> 1990, </year> <pages> pages 204-209. </pages>
References-found: 52

