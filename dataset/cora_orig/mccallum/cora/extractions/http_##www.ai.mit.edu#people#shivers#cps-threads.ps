URL: http://www.ai.mit.edu/people/shivers/cps-threads.ps
Refering-URL: http://www.ai.mit.edu/people/shivers/citations.html
Root-URL: 
Email: shivers@ai.mit.edu  
Title: Continuations and threads: Expressing machine concurrency directly in advanced languages  
Author: Olin Shivers 
Address: Cambridge, Massachusetts, USA  
Affiliation: MIT AI Lab  
Abstract: It is well known [Wand] that concurrency can be expressed within languages that provide a continuation type. However, a number of misconceptions persist regarding the relationship between threads and continuations. I discuss the proper relationship between these two objects, and present a model for directly expressing concurrency using continuations. The model is designed to support systems programming, and has several novel features: it is synchronous, preemptable, and fully virtualisable, allowing schedulers to be written by unprivileged users that are indistinguishable from top-level schedulers that actually control access to the hardware resources.
Abstract-found: 1
Intro-found: 1
Reference: [AsyncCont] <author> John H. Reppy. </author> <title> Asnchronous signals in Standard ML. </title> <type> Technical report TR 90-1144, </type> <institution> Computer Science Department, Cornell University, </institution> <month> August </month> <year> 1990. </year>
Reference-contexts: Reppy's doctoral work on Concurrent ML [CML] provided a concurrency mechanism based on synchronous sequential processes, although Reppy did not consider problems of virtualisation. Reppy has also reported on the nature of continuations in a system with asynchronous interrupts <ref> [AsyncCont] </ref>. Philbin's doctoral work [Philbin, STNG] on the STNG operating system concerned the design of an operating system based on Scheme.
Reference: [C-threads] <author> Eric C. Cooper and Richard P. Draves. </author> <title> C threads. </title> <type> CMU Technical Report CMU-CS-88-154. </type> <month> September </month> <year> 1990. </year>
Reference-contexts: Continuations explicitly do not capture the store or the state of the I/O systems. They capture only the state that describes the processor. This abstraction seems a particularly elegant one. A typical thread package for Unix or Win32 will describe a thread context with some complex C struct <ref> [C-threads] </ref>.
Reference: [CML] <author> John H. Reppy. </author> <title> Higher Order Concurrency. </title> <type> PhD Dissertation, </type> <institution> Cor-nell University, </institution> <year> 1992. </year>
Reference-contexts: When an external event is observed, the thread's mixed state snaps or resolves itself into a single continuation, and the thread can then evolve forward. 6 This event model is similar to the one employed by CML <ref> [CML] </ref>, but it ex-poses what in CML is the underlying canonical event structure. <p> Dybvig has reported on nested engines, a similar concept for providing pre-emptable schedulers in Scheme [Engines]. A recent release of Scheme 48 [S48] uses a variant of these engines for its thread package. Reppy's doctoral work on Concurrent ML <ref> [CML] </ref> provided a concurrency mechanism based on synchronous sequential processes, although Reppy did not consider problems of virtualisation. Reppy has also reported on the nature of continuations in a system with asynchronous interrupts [AsyncCont].
Reference: [CSP] <author> C. A. R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1985. </year>
Reference-contexts: The standard work on concurrency models using serial processes with synchronous communications is Hoare's <ref> [CSP] </ref>. Wand's early paper [Wand] showed means of modeling OS concurrency in Scheme. However, Wand's model was intended more as an explicative aid than a practical tool for use in an actual operating system. Dybvig has reported on nested engines, a similar concept for providing pre-emptable schedulers in Scheme [Engines].
Reference: [Filinski] <author> Andrzej Filinski. </author> <title> Declarative Continuations and Categorical Duality. </title> <type> Master's thesis, </type> <institution> Computer Science Department, University of Copenhagen (August 1989). </institution> <type> DIKU Report 89/11. </type>
Reference-contexts: These relations are detailed further in Filinski's master's thesis <ref> [Filinski] </ref>. Because our multi-continuation CPS form permits us to choose the latter representation, we can encode the discrimination directly in the pc for greater efficiency.
Reference: [Engines] <author> R. Kent Dybvig and Robert Hieb. </author> <title> Engines from Continuations. </title> <booktitle> Computer Languages 14(2):109123, </booktitle> <year> 1989. </year>
Reference-contexts: Wand's early paper [Wand] showed means of modeling OS concurrency in Scheme. However, Wand's model was intended more as an explicative aid than a practical tool for use in an actual operating system. Dybvig has reported on nested engines, a similar concept for providing pre-emptable schedulers in Scheme <ref> [Engines] </ref>. A recent release of Scheme 48 [S48] uses a variant of these engines for its thread package. Reppy's doctoral work on Concurrent ML [CML] provided a concurrency mechanism based on synchronous sequential processes, although Reppy did not consider problems of virtualisation.
Reference: [Jsys] <institution> Digital Equipment Corporation. </institution> <note> TOPS-20 Monitor Calls Reference Manual. January 1980. Document AA-4166D-TM. </note>
Reference-contexts: The Tops-20 operating system employed multiple continuations over twenty years ago <ref> [Jsys] </ref>. Tops-20 system calls were invoked with the jsys instruction, which pushed the current program-counter onto the stack and trapped into the kernel. If the system call completed successfully, the operating system returned to the user program at word pc+2, that is, skipping the word following the jsys call.
Reference: [Philbin] <author> James Philbin. </author> <title> The Design of an Operating System for Modern Programming Languages. </title> <type> Doctoral Dissertation, </type> <institution> Yale University. Yale Computer Science Technical Report YALE/DCS/tr997. </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: Reppy's doctoral work on Concurrent ML [CML] provided a concurrency mechanism based on synchronous sequential processes, although Reppy did not consider problems of virtualisation. Reppy has also reported on the nature of continuations in a system with asynchronous interrupts [AsyncCont]. Philbin's doctoral work <ref> [Philbin, STNG] </ref> on the STNG operating system concerned the design of an operating system based on Scheme. The STNG system provided explicit models of virtual processors and threads in Scheme. 10 Conclusion The concurrency model we've just examined is neither completely developed, nor is it implemented and tested by experience.
Reference: [R4RS] <editor> J. Rees and W. Clinger (editors). </editor> <title> The revised 4 report on the algorithmic language Scheme. Lisp Pointers IV(3):1-55, </title> <month> JulySeptember </month> <year> 1991. </year>
Reference: [S48] <author> Richard A. Kelsey and Jonathan A. Rees. </author> <title> A tractable Scheme implementation. To appear, Lisp and Symbolic Computation, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> The Netherlands. </address> <note> (Also URL ftp://altdorf. ai.mit.edu/pub/jar/lsc.ps) </note>
Reference-contexts: However, Wand's model was intended more as an explicative aid than a practical tool for use in an actual operating system. Dybvig has reported on nested engines, a similar concept for providing pre-emptable schedulers in Scheme [Engines]. A recent release of Scheme 48 <ref> [S48] </ref> uses a variant of these engines for its thread package. Reppy's doctoral work on Concurrent ML [CML] provided a concurrency mechanism based on synchronous sequential processes, although Reppy did not consider problems of virtualisation.
Reference: [scsh] <author> Olin Shivers. </author> <title> A Scheme shell. </title> <note> To appear in the Journal of Lisp and Symbolic Computation. (Also available as technical report TR-635, </note> <institution> Laboratory for Computer Science, MIT; and technical report TR-94-10, Department of Computer Science, University of Hong Kong.) </institution> <month> 14 </month>
Reference: [STNG] <author> Suresh Jagannathan and Jim Philbin. </author> <title> A foundation for an efficient multi-threaded Scheme System. </title>
Reference-contexts: Reppy's doctoral work on Concurrent ML [CML] provided a concurrency mechanism based on synchronous sequential processes, although Reppy did not consider problems of virtualisation. Reppy has also reported on the nature of continuations in a system with asynchronous interrupts [AsyncCont]. Philbin's doctoral work <ref> [Philbin, STNG] </ref> on the STNG operating system concerned the design of an operating system based on Scheme. The STNG system provided explicit models of virtual processors and threads in Scheme. 10 Conclusion The concurrency model we've just examined is neither completely developed, nor is it implemented and tested by experience.
Reference: [Wand] <author> Mitchell Wand. </author> <title> Continuation-based multiprocessing. </title> <booktitle> In Conference Record of the 1980 LISP Conference, pages 1928, </booktitle> <address> Palo Alto, CA, </address> <year> 1980, </year> <editor> J. Allen, editor. </editor> <title> The Lisp Company. Republished by ACM. Errata I have seized the opportunity to make one emendation to the original cited on the title page: the three occurrences of existential types (9t:t) in sections seven and eight are incorrectly given as universal types (8t:t) in the original paper. </title> <type> 15 </type>
Reference-contexts: The standard work on concurrency models using serial processes with synchronous communications is Hoare's [CSP]. Wand's early paper <ref> [Wand] </ref> showed means of modeling OS concurrency in Scheme. However, Wand's model was intended more as an explicative aid than a practical tool for use in an actual operating system. Dybvig has reported on nested engines, a similar concept for providing pre-emptable schedulers in Scheme [Engines].
References-found: 13

