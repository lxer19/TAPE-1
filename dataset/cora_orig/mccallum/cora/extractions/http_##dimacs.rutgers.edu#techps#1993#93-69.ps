URL: http://dimacs.rutgers.edu/techps/1993/93-69.ps
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1993.html
Root-URL: http://www.cs.rutgers.edu
Title: Case Generators for the Maximum Clique Problem  
Author: by Laura A. Sanchis ; Arun Jagota 
Note: 2 Supported in part by NSF grant CCR-9101974. DIMACS is a cooperative project of Rutgers University, Princeton University, AT&T Bell Laboratories and Bellcore. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Address: Hamilton, NY 13346  Memphis, TN 38152  
Affiliation: Department of Computer Science Colgate University  Department of Mathematical Sciences Memphis State University  
Abstract: DIMACS Technical Report 93-69 October 1993 Some Experimental and Theoretical Results on Test 
Abstract-found: 1
Intro-found: 1
Reference: [BGS87] <author> D.H. Ballard, P.C. Gardner, and M.A. Srinivas. </author> <title> Graph problems and connectionist architectures. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Rochester, Rochester, </institution> <address> NY, </address> <year> 1987. </year> <month> - 24 </month> - 
Reference-contexts: We - 2 - normally choose = 4N . Let I = (w 0 ) where w 0 = jj=4. Earlier encodings of the Maximum Clique problem in Hopfield networks, different than the one above, are in <ref> [BGS87, 13, 19] </ref>. Encoding Maximum Clique in a Hopfield Network is equivalent to formulating it as an unconstrained quadratic minimization problem.
Reference: [1] <author> M. Brockington, J.C. Culberson, and P. VanBeek, </author> <year> 1993. </year> <title> Camouflaging Independent Sets in Quasi-Random Graphs. Presented at the Second DIMACS Algorithm Implementation Challenge Conference, </title> <month> October </month> <year> 1993. </year>
Reference-contexts: The Hopfield Network [7, 8] is structurally an N -vertex complete weighted graph. W = (w ij ) is the symmetric zero-diagonal matrix of real-valued weights, w ij is the weight of the edge fv i ; v j g. Vertices have binary-valued (in f0; 1g) or continuous (in <ref> [0; 1] </ref>) labels S i on them. I = (I i ) is the vector of external biases to vertices. We refer the reader to [6] for further details. We encode the Maximum Clique problem in a Hopfield Network as follows [9].
Reference: [2] <author> B. Bollobas and P. Erdos. </author> <title> Cliques in random graphs. </title> <journal> Proc. Camb. Phil. Soc., </journal> <volume> 80 </volume> <pages> 419-427, </pages> <year> 1976. </year>
Reference: [3] <author> A.G. Barto, R.S. Sutton, and C.W. Anderson. </author> <title> Neuronlike adaptive elements that can solve difficult learning control problems. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 13 </volume> <pages> 834-846, </pages> <year> 1983. </year>
Reference-contexts: One of the first influential papers on this topic is <ref> [3] </ref>. Our algorithm is as follows. Let SSD RL (U 0 ; M; k) denote up to M runs of SSD RL , each run starting from the same initial state U 0 and terminating at a state representing a clique.
Reference: [4] <author> R. Carraghan and P.M. Pardalos. </author> <title> An exact algorithm for the maximum clique problem. </title> <journal> Operations Research Letters, </journal> <volume> 9 </volume> <pages> 375-382, </pages> <year> 1990. </year>
Reference-contexts: However, the number of built-in independent sets and/or their sizes have to be relatively large in order to achieve this effect. The relatively large independent sets apparently also make the graphs easier for exact enumerative algorithms such as the one in <ref> [4] </ref>. The reason for this may be that once a relatively large clique is found by the enumerative algorithm, many paths can be pruned from its search tree, since it is clear that no larger clique can be found within those paths.
Reference: [5] <author> M.R. Garey and D.S. Johnson. </author> <title> Computers and intractability, a guide to the theory of NP-completeness. W.H. </title> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: Another approach was suggested by looking at the reduction from 3SAT to the minimum vertex cover problem which is found in <ref> [5] </ref>. In this reduction, a graph is constructed which is composed of cliques of sizes 2 and 3, with additional edges connecting vertices in the different cliques. In fact each additional edge joins a vertex from one of the 2 cliques to a vertex in one of the 3 cliques. <p> Proof: We will use a reduction from the 3SAT problem (CNF satisfiability with length three clauses) to the maximum independent set problem. This reduction is modelled on the reduction from 3SAT to the minimum vertex cover problem which is found in <ref> [5] </ref>. - 17 - The construction uses an integer parameter K where K 4 and K 1=p. The value of K is dependent only on the value of p and its choice will be considered later. <p> Note that the original formula is satisfiable if and only if L F has a maximum independent set of size 4N +R. The proof of this fact is similar to that given in the reduction from 3SAT to the minimum vertex cover problem given in <ref> [5] </ref>.
Reference: [6] <author> J. Hertz, A. Krogh, and R.G. Palmer. </author> <title> Introduction to the Theory of Neural Computation. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: Vertices have binary-valued (in f0; 1g) or continuous (in [0; 1]) labels S i on them. I = (I i ) is the vector of external biases to vertices. We refer the reader to <ref> [6] </ref> for further details. We encode the Maximum Clique problem in a Hopfield Network as follows [9]. Given an N -vertex graph G, construct a Hopfield network instance H with N vertices, one for each vertex v i in G.
Reference: [7] <author> J.J. </author> <title> Hopfield. Neural networks and physical systems with emergent collective computational abilities. </title> <booktitle> Proceedings of the National Academy of Sciences, </booktitle> <address> USA, 79, </address> <year> 1982. </year>
Reference-contexts: Jagota, and are based on the Hopfield network. They were first described in [9] and [11]. The Hopfield Network <ref> [7, 8] </ref> is structurally an N -vertex complete weighted graph. W = (w ij ) is the symmetric zero-diagonal matrix of real-valued weights, w ij is the weight of the edge fv i ; v j g. <p> By such a choice of F , the algorithm minimizes the "energy" function (1=2) ~ S T W ~ S ~ I T ~ S during its operation and hence always terminates <ref> [7] </ref>. Different instantiations of F lead to different instances of the generic algorithm "Discrete Descent".
Reference: [8] <author> J.J. </author> <title> Hopfield. Neurons with graded responses have collective computational properties like those of two-state neurons. </title> <booktitle> Proceedings of the National Academy of Sciences, </booktitle> <address> USA, 81, </address> <year> 1984. </year>
Reference-contexts: Jagota, and are based on the Hopfield network. They were first described in [9] and [11]. The Hopfield Network <ref> [7, 8] </ref> is structurally an N -vertex complete weighted graph. W = (w ij ) is the symmetric zero-diagonal matrix of real-valued weights, w ij is the weight of the edge fv i ; v j g.
Reference: [9] <author> A. Jagota. </author> <title> Efficiently approximating Max-Clique in a Hopfield-style network. </title> <booktitle> In International Joint Conference on Neural Networks, </booktitle> <volume> volume 2, </volume> <pages> pages 248-253, </pages> <address> New York, June 1992. Baltimore, June, </address> <publisher> IEEE. </publisher>
Reference-contexts: In this report we present further modifications to the generator, and the results of running more sophisticated approximation algorithms for the maximum clique problem on the generated test cases. The approximation algorithms are based on neural network heuristics and were first described in <ref> [9] </ref> and [11]. The next section describes the approximation algorithms to be tested. We then describe the test case generators and their properties. The following section presents experimental results derived from running the algorithms on test cases produced by the generators. <p> Jagota, and are based on the Hopfield network. They were first described in <ref> [9] </ref> and [11]. The Hopfield Network [7, 8] is structurally an N -vertex complete weighted graph. W = (w ij ) is the symmetric zero-diagonal matrix of real-valued weights, w ij is the weight of the edge fv i ; v j g. <p> I = (I i ) is the vector of external biases to vertices. We refer the reader to [6] for further details. We encode the Maximum Clique problem in a Hopfield Network as follows <ref> [9] </ref>. Given an N -vertex graph G, construct a Hopfield network instance H with N vertices, one for each vertex v i in G. Let w ij = 1 if vertices v i ; v j are adjacent in G, w ij = otherwise.
Reference: [10] <author> A. Jagota. </author> <title> The Hopfield-clique Network, Associative Memories, and Combinatorial Optimization. </title> <type> PhD thesis, </type> <institution> State University of New York at Buffalo, Department of Computer Science, 224 Bell Hall, </institution> <address> Amherst, NY 14260, </address> <year> 1993. </year> <note> Also available as Technical Report TR 93-12 from above address. </note>
Reference: [11] <author> A. Jagota and K.W. Regan. </author> <title> Performance of max-clique heuristics under description-length weighted distributions. </title> <type> Technical Report 92-24, </type> <institution> Department of Computer Science, SUNY at Buffalo, Buffalo, </institution> <address> NY, </address> <month> September </month> <year> 1992. </year> <note> Available from author. </note>
Reference-contexts: In this report we present further modifications to the generator, and the results of running more sophisticated approximation algorithms for the maximum clique problem on the generated test cases. The approximation algorithms are based on neural network heuristics and were first described in [9] and <ref> [11] </ref>. The next section describes the approximation algorithms to be tested. We then describe the test case generators and their properties. The following section presents experimental results derived from running the algorithms on test cases produced by the generators. <p> Jagota, and are based on the Hopfield network. They were first described in [9] and <ref> [11] </ref>. The Hopfield Network [7, 8] is structurally an N -vertex complete weighted graph. W = (w ij ) is the symmetric zero-diagonal matrix of real-valued weights, w ij is the weight of the edge fv i ; v j g.
Reference: [12] <author> D.S. Johnson, C.R. Aragon, L.A. McGeoch, and C. Schevon. </author> <title> Optimization by Simulated Annealing: An Experimental Evaluation, Part II (Graph Coloring and Number Partitioning). </title> <journal> Operations Research, </journal> <volume> 39 </volume> <pages> 378-406, </pages> <year> 1991. </year> <month> - 25 </month> - 
Reference-contexts: This algorithm is based on the one for finding large independent sets used in the graph coloring algorithm XRLF described in Johnson, Aragon, McGeoch, and Schevon <ref> [12] </ref>, originally suggested by Matula and Johri. It should be noted, however, that this algorithm is considerably slower than SSD (;) and SSD RL .
Reference: [13] <author> J.H.M. Korst and E.H.L. Aarts. </author> <title> Combinatorial optimization on a Boltzmann machine. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 6 </volume> <pages> 331-357, </pages> <year> 1989. </year>
Reference-contexts: We - 2 - normally choose = 4N . Let I = (w 0 ) where w 0 = jj=4. Earlier encodings of the Maximum Clique problem in Hopfield networks, different than the one above, are in <ref> [BGS87, 13, 19] </ref>. Encoding Maximum Clique in a Hopfield Network is equivalent to formulating it as an unconstrained quadratic minimization problem.
Reference: [14] <author> S. Kirkpatrick, C.D. Gelatt Jr., </author> , <title> and M.P. Vecchi. Optimization by simulated annealing. </title> <journal> Science, </journal> <volume> 220, </volume> <year> 1983. </year>
Reference: [15] <author> E.M. Palmer. </author> <title> Graphical evolution. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1985. </year> <note> (Matula's theorem is on page 76). </note>
Reference: [16] <author> L. Sanchis. </author> <title> On the complexity of test case generation for NP-hard problems. </title> <journal> Information Processing Letters, </journal> <volume> 36 </volume> <pages> 135-140, </pages> <year> 1990. </year>
Reference-contexts: This holds for a variety of edge densities and max clique values, in spite of the fact that for many of these parameter combinations, most graphs produced by our implementation of the generator appear to be quite easy. The following definition is from <ref> [16] </ref>. Definition 5.1 Let be an NP-hard optimization problem. A set B of instances of is hard with respect to if no polynomial-time approximation algorithm for can give the optimal answer for all instances in B, unless P=NP.
Reference: [17] <author> L. Sanchis. </author> <title> Generating hard and diverse test sets for NP-hard graph problems. </title> <note> Discrete Applied Mathematics, to appear. </note>
Reference-contexts: Because of the equivalence among the maximum clique, independent set, and minimum vertex cover problems, the generators produce test cases with known answers for all three of these problems. The original generating procedure was described in <ref> [17] </ref> in terms of the vertex cover problem. Some preliminary analysis and modifications based on evaluating the test cases by using some simple approximation algorithms, may be found in [18]. <p> with n vertices and maximum independent set of size pn, then G can have any number of edges between the values M in (n; p) and M ax (n; p), where M in (n; p) = (n; pn) and M ax (n; p) = (n pn)(n + pn 1)=2 (see <ref> [17] </ref>). We have M in (n; p) pn (n=pn + 1)(n=pn)=2 = (p + 1)n=(2p) So M in (n; p)=M E (n) ! 0 as n ! 1. <p> From <ref> [17] </ref> we know that there exists a graph G = (V; E) with n vertices and maximum independent set I of size pn, having m edges, m 1 type 1 edges, and m 2 type 2 edges, as long as m 1 's value is between M in 1 (n; p)
Reference: [18] <author> L. Sanchis. </author> <title> Test case construction for the vertex cover problem. </title> <booktitle> In Proceedings of the DIMACS Workshop on Computational Support for Discrete Mathematics, </booktitle> <month> March </month> <year> 1992. </year>
Reference-contexts: The original generating procedure was described in [17] in terms of the vertex cover problem. Some preliminary analysis and modifications based on evaluating the test cases by using some simple approximation algorithms, may be found in <ref> [18] </ref>. In this report we present further modifications to the generator, and the results of running more sophisticated approximation algorithms for the maximum clique problem on the generated test cases. The approximation algorithms are based on neural network heuristics and were first described in [9] and [11]. <p> Taking the complement of this graph, we obtain a graph with maximum clique size equal to k. In <ref> [18] </ref> it was reported that if the vertex partition into the k cliques, and the additional edges, are chosen at random, then the resulting graphs tend to be easily solvable by even quite simple greedy algorithms. <p> Choosing the k clique sizes as close to each other as possible also appears to produce harder graphs (relative to these greedy algorithms). The generators to be discussed here incorporate both of these variants. As explained in <ref> [18] </ref>, equalizing the degrees of cover and noncover vertices serves to foil greedy approximation algorithms which select vertices with high degrees to be in the cover. <p> Partitioning the vertices into k cliques of approximately equal sizes allows greater choice in choosing the additional edges, and also makes it easier to adjust the average degrees as described above. See <ref> [18] </ref> for more details about this construction method. It is also shown in [18] that the set of graphs produced by these generators is hard with respect to the minimum vertex cover problem, in the sense that no polynomial-time approximation algorithm can find the optimal answer for all graphs in the <p> Partitioning the vertices into k cliques of approximately equal sizes allows greater choice in choosing the additional edges, and also makes it easier to adjust the average degrees as described above. See <ref> [18] </ref> for more details about this construction method. It is also shown in [18] that the set of graphs produced by these generators is hard with respect to the minimum vertex cover problem, in the sense that no polynomial-time approximation algorithm can find the optimal answer for all graphs in the set, unless P=NP. <p> A similar statement must then apply with regard to the maximum independent set problem, and for the maximum clique problem in relation to the complemented graphs. Preliminary experimentation showed that the algorithms described in the previous section were more successful than the simpler algorithms considered in <ref> [18] </ref>, at solving the test cases. Some further modifications were made to the generators in an effort to produce experimentally harder graphs. One approach involved building extra independent sets into the constructed graph, or equivalently extra cliques into the complemented graph. <p> Also the value of r can be larger for graphs with smaller maximum clique values, since in this case the size of each of the k cliques is larger. We denote the original generator from <ref> [18] </ref> as SimParD. The generator just described will be denoted as SimParD (r). <p> The tables include data for graphs within and around these ranges. As mentioned previously, we found that the GSD and SSD algorithms, when iterated many times, perform much better on the generated graphs than the simple greedy strategies investigated in <ref> [18] </ref>. Also it can be seen that the graphs in Table 3 are in general somewhat more challenging for the algorithms than those in Table 2.
Reference: [19] <author> Y. Shrivastava, S. Dasgupta, and S.M. Reddy. </author> <title> Neural network solutions to a graph theoretic problem. </title> <booktitle> In Proceedings of IEEE International Symposium on Circuits and Systems, </booktitle> <pages> pages 2528-2531, </pages> <address> New York, 1990. </address> <publisher> IEEE. </publisher>
Reference-contexts: We - 2 - normally choose = 4N . Let I = (w 0 ) where w 0 = jj=4. Earlier encodings of the Maximum Clique problem in Hopfield networks, different than the one above, are in <ref> [BGS87, 13, 19] </ref>. Encoding Maximum Clique in a Hopfield Network is equivalent to formulating it as an unconstrained quadratic minimization problem.
References-found: 20

