URL: http://www.icsi.berkeley.edu/~snarayan/250.ps.Z
Refering-URL: http://www.icsi.berkeley.edu/~snarayan/
Root-URL: http://www.icsi.berkeley.edu
Title: ICSIM: An Object Oriented Simulation Environment for Structured Connectionist Nets. Class Project Report, Physics 250  
Author: by Srini Narayanan 
Note: The overall development of ICSIM is part of a joint effort with with Ben Gomes and Prof. Feldman at ICSI.  
Date: January 10, 1995  
Affiliation: Department Of Computer Science, UC Berkeley.  
Abstract: ICSIM is a simulator for structured connectionism under development at ICSI. Structured connectionism is characterized by the need for flexibility, efficiency and support for the design and reuse of modular substructure. We take the position that a fast object-oriented language like Sather [5] is an appropriate implementation medium to achieve these goals. The core of ICSIM consists of a hierarchy of classes that correspond to simulation entities. New connectionist models are realized by combining and specializing pre-existing classes. Whenever possible, auxillary functionality has been separated out into functional modules in order to keep the basic hierarchy as clean and simple as possible. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Feldman, J.A. </author> <title> et al (1988): Computing with Structured Connectionist Networks, </title> <journal> CACM 31, </journal> <pages> 2 pp. 170-207. </pages>
Reference-contexts: 1 Introduction This document describes ICSIM, a simulator built to support the development of Structured Connectionist Models <ref> [1] </ref> both on UNIX Workstation environments as well as on dedicated connectionist hardware architectures. Some basic ideas behind the simulator design were described in [2].
Reference: [2] <author> Schmidt, W. and Gomes, </author> <title> B (1991): ICSIM: An object oriented net simulator, </title> <publisher> ICSI TR-91-04. </publisher>
Reference-contexts: 1 Introduction This document describes ICSIM, a simulator built to support the development of Structured Connectionist Models [1] both on UNIX Workstation environments as well as on dedicated connectionist hardware architectures. Some basic ideas behind the simulator design were described in <ref> [2] </ref>. Since then, a shift in emphasis on the type of modelling environment to be supported, as well as new requirements on the types of hardware execution architectures have resulted in the new simulator design and implementation described in this report.
Reference: [3] <author> Lange, T.L. et al. </author> <year> (1989): </year> <title> DESCARTES: Development Environment For Simulating Hybrid Connectionist Architectures, </title> <type> TR UCLA-AI-89-06. </type>
Reference-contexts: Examples of simulators that attempt to cover a terrain similar to ICSIM include DESCARTES <ref> [3] </ref> and the Rochester Connectionist Simulator (RCS) [4]. Both these simulators have been used successfully to construct large models. However, DESCARTES is implemented in a Lisp-Based Environment and does not address our needs of portability and migration to dedicated hardware architectures.
Reference: [4] <author> Goddard, N. </author> <year> (1987): </year> <title> The Rochester Connectionist Simulator (RCS), </title> <type> User Manual TR, </type> <institution> Univ. Of Rochester. </institution>
Reference-contexts: Examples of simulators that attempt to cover a terrain similar to ICSIM include DESCARTES [3] and the Rochester Connectionist Simulator (RCS) <ref> [4] </ref>. Both these simulators have been used successfully to construct large models. However, DESCARTES is implemented in a Lisp-Based Environment and does not address our needs of portability and migration to dedicated hardware architectures.
Reference: [5] <author> Omohundro, </author> <title> S (1990): The Sather Language. </title>
Reference-contexts: ICSIM was designed with the view that an object-oriented design and implementation meets the specification, construction, and data management requirements of complex Connectionist Models. The simulator is implemented in the object-oriented language, Sather <ref> [5] </ref> and currently runs on Unix Workstations, and to a limited extent on the Ring Array Processor [6](RAP) hardware platform. This report describes the various features of the simulator implementation, both on a Sun Workstation as well as on the RAP.
Reference: [6] <author> Beck, J. </author> <year> (1990): </year> <title> Ring Array Processor(RAP) Hardware Archtiecture, </title> <publisher> ICSI-TR-90-050. </publisher>
Reference: [7] <author> Asenovic et al. </author> <year> (1992): </year> <note> CNS-1 Architectrure Specification Review 4.00, ICSI. </note>
Reference-contexts: ICSIM implementation on the RAP. 2 ICSIM Design Objectives The design of ICSIM is guided by three main objectives, which are: * To support research in structured connectionism. * To support transparent workstation-based development for execution on different server architectures. * To be able to run efficiently on the CNS <ref> [7] </ref>. The current state of flux of the CNS design necessitates an initial ICSIM emphasis on the first two objectives of supporting structured connectionist research and different server architectures. This report describes the implementation of ICSIM both on a Sun Workstation environment as well on the RAP architecture.
Reference: [8] <author> Regier, T. </author> <year> (1992): </year> <title> A Connectionist model of Perceptual Categorization, </title> <publisher> ICSI-TR-92-062. </publisher>
Reference-contexts: focus on the special characteristics of structured connectionist models that guide its design and implementation. 2 ICSIM DESIGN OBJECTIVES 5 2.1 What Characterizes Structured Connectionism? Researchers have recently attempted to apply the principles and techniques of massively parallel connectionist computing to solve well recognized problems in vision and language understanding <ref> [8] </ref>, knowledge representation [9, 10] and other areas that have proved intractable both to symbolic approaches as well as the unstructured general purpose learning strategy approach that characterizes a large part of Neural Network research. <p> In this case, the overall Model takes Any Computation along with the appropriate Port as a client (which the sub-models inherit by default). while the specialized modules can have various Learning specializations. This technique has been used in the ICSIM implementation of Terry Regier's thesis <ref> [8] </ref>. * Switching learning schemes is accomplished by changing the parameterization of the Model without affecting the structure. <p> Besides the Backpropagation example developed in this report, ICSIM has been 13 CONCLUSION 37 used to implement recurrent variations of the Backpropagation Network including Elman and Jordan Networks, as well as Structured Connectionist Models (Terry Regier's perceptual model <ref> [8] </ref> and Shastri's Temporal Phase Variable Binding [10] Model). Efforts are currently under way to extend the simulator in the following directions. * A General Purpose Sather based Interface is being developed to meet the special needs of ICSIM.
Reference: [9] <author> Shastri, </author> <title> L (1988): Semantic Networks, An Evidential Formulation and its Connectionist Realization Morgan-Kaufman, </title> <publisher> Los Altos. </publisher>
Reference-contexts: special characteristics of structured connectionist models that guide its design and implementation. 2 ICSIM DESIGN OBJECTIVES 5 2.1 What Characterizes Structured Connectionism? Researchers have recently attempted to apply the principles and techniques of massively parallel connectionist computing to solve well recognized problems in vision and language understanding [8], knowledge representation <ref> [9, 10] </ref> and other areas that have proved intractable both to symbolic approaches as well as the unstructured general purpose learning strategy approach that characterizes a large part of Neural Network research.
Reference: [10] <author> Shastri, L. and Ajjanagadde, V. </author> <year> (1990): </year> <title> A connectionist representation of rules, variables, and dynamic bindings, </title> <type> U. </type> <institution> Penn, Dept. Of CIS, TR-MS-CIS-90-05. </institution>
Reference-contexts: special characteristics of structured connectionist models that guide its design and implementation. 2 ICSIM DESIGN OBJECTIVES 5 2.1 What Characterizes Structured Connectionism? Researchers have recently attempted to apply the principles and techniques of massively parallel connectionist computing to solve well recognized problems in vision and language understanding [8], knowledge representation <ref> [9, 10] </ref> and other areas that have proved intractable both to symbolic approaches as well as the unstructured general purpose learning strategy approach that characterizes a large part of Neural Network research. <p> Besides the Backpropagation example developed in this report, ICSIM has been 13 CONCLUSION 37 used to implement recurrent variations of the Backpropagation Network including Elman and Jordan Networks, as well as Structured Connectionist Models (Terry Regier's perceptual model [8] and Shastri's Temporal Phase Variable Binding <ref> [10] </ref> Model). Efforts are currently under way to extend the simulator in the following directions. * A General Purpose Sather based Interface is being developed to meet the special needs of ICSIM.
Reference: [11] <author> Feldman, J.A. </author> <year> (1981): </year> <title> Dynamic Connections, </title> <type> TR, </type> <institution> Univ. Of Rochester. </institution>
Reference-contexts: For instance, in the case of an algorithm like backpropagation with Feed-Forward Networks, the learning and computation can be cleanly separated into backward and forward passes respectively. In other cases, as in recruitment learning <ref> [11] </ref> or associational learning (such as standard hebbian learning) or in certain re-inforcement learning schemes, such a separation is not possible, and the learning and computation are more intimately related. <p> to customize ICSIM to support the L0 project that is under way at UC Berkeley. * In the next phase of ICSIM, we expect to be concentrating on ICSIM implementation on the CNS architecture. * A Structured Connectionist Project is under way to implement a Knowl edge intensive recruitment learning <ref> [11] </ref> algorithm for connectionist concept acquisition. We expect that these and other forthcoming projects will test the implementation described in this report and lead to valuable experience guiding future development efforts. 14 REFERENCES 38
Reference: [12] <author> Kohn, </author> <note> Phil (1991): CLONES User's manual ICSI-TR-91-073. </note>
Reference-contexts: The RPC mechanism is the same as that used by CLONES <ref> [12] </ref>. The RPC mechanism has quite a high overhead, and it clearly unprofitable in the case of single unit operations. Hence, we define RAP "layers" of units. These layers can make use of larger scale matrix operations, rather than the vector operations that a single unit would use.
References-found: 12

