URL: http://www.cs.wustl.edu/~schmidt/cs544/svr4.sockets.ps.Z
Refering-URL: http://www.cs.wustl.edu/~schmidt/cs544/
Root-URL: http://www.cs.wustl.edu
Email: iv@Eng.Sun.COM glenn@Eng.Sun.COM  
Title: Implementing Berkeley Sockets in System V Release 4  
Author: Ian Vessey Glenn Skinner 
Address: Mountain View, California 94043  
Affiliation: Sun Microsystems Inc.  
Abstract: A major goal of the UNIX System V, Release 4 (SVR4) development effort has been to unify divergent lines of UNIX development into a single system offering the best features of its progenitors. A closely related goal has been to augment the programming interface to ``capture'' applications written for other UNIX variants, by making the facilities they depend on available in the unified system. The socket interface is a cornerstone of the 4BSD networking facilities, so its presence in SVR4 is an absolute necessity for application capture. This paper describes the design of the SVR4 socket implementation, the implementation problems we encountered, and their solutions. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Joy, William, Robert Fabry, Samuel Leffler, M. Kirk McKusick, and Michael Karels. </author> <title> ``Berkeley Software Architecture Manual 4.3BSD Edition'', </title> <institution> Department of Electrical Engineering and Computer Science. University of California, Berkeley, </institution> <address> California 94720, </address> <month> April, </month> <year> 1986. </year>
Reference-contexts: A closely related goal has been to augment the programming interface to ``capture'' applications written for other UNIX variants, by making the facilities they depend on available in the unified system. The socket interface <ref> [1] </ref> is a cornerstone of the 4BSD networking facilities, so its presence in SVR4 is an absolute necessity for application capture. Our socket implementation effort faced significant constraints. SVR4 has its own networking architecture, inspired by Dennis Ritchie's streams work [2] and the OSI reference model [3] .
Reference: 2. <author> Ritchie, Dennis, </author> <title> ``A Stream Input-Output System'', </title> <journal> AT&T Bell Laboratories Technical Journal, </journal> <volume> Vol. 63, No. 8, Part 2, </volume> <month> October, </month> <year> 1984. </year> <title> 3. ``Information Processing Systems Open Systems Interconnection Transport Service Definition'', ISO IS 8072, </title> <year> 1984. </year>
Reference-contexts: The socket interface [1] is a cornerstone of the 4BSD networking facilities, so its presence in SVR4 is an absolute necessity for application capture. Our socket implementation effort faced significant constraints. SVR4 has its own networking architecture, inspired by Dennis Ritchie's streams work <ref> [2] </ref> and the OSI reference model [3] . Compatibility considerations made it impractical to contemplate significant alterations to this framework. Thus we had to implement the socket interface in terms of the native System V networking facilities.
Reference: 4. <author> Lachman Associates, Inc., </author> <title> ``System V STREAMS TCP, Release 3.0, Network Programmer's Reference Manual'', </title> <editor> 1901 N. Naper Boulevard, Naperville, </editor> <publisher> Illinois, </publisher> <pages> 60563-8895, </pages> <year> 1988. </year>
Reference-contexts: This was of paramount importance. Existing applications written against the socket interface had to run in an SVR4 environment with no changes. The second major constraint was: fi The implementation had to be consistent with the SVR4 networking architecture. Socket implementations for previous System V releases <ref> [4] </ref> [5] had shown that these constraints were mutually contradictory. To achieve source compatibility, these predecessors had to resort to duplicating parts of the STREAMS framework or intercepting system calls.
Reference: 5. <author> Wollongong Group, Inc., </author> <title> The, ``WIN/386 Reference Manual'', </title> <address> 1129 San Antonio Road, Palo Alto, California 94303, </address> <month> December, </month> <year> 1987. </year>
Reference-contexts: This was of paramount importance. Existing applications written against the socket interface had to run in an SVR4 environment with no changes. The second major constraint was: fi The implementation had to be consistent with the SVR4 networking architecture. Socket implementations for previous System V releases [4] <ref> [5] </ref> had shown that these constraints were mutually contradictory. To achieve source compatibility, these predecessors had to resort to duplicating parts of the STREAMS framework or intercepting system calls.
Reference: 6. <institution> UNIX System V Release 4 Network Programmer's Guide, AT&T, </institution> <year> 1989. </year>
Reference-contexts: Creating a socket: In SVR4, this entails mapping the arguments passed in the socket call to the appropriate device file name using the SVR4 Network Selection Facility <ref> [6] </ref> . Once the device file name is known, socklib opens the file and calls ioctl to push sockmod onto the stream, inserting it between the stream head and the transport provider.
Reference: 7. <author> Leffler, Samuel, William Joy, Robert Fabry, Michael Karels. </author> <title> ``Networking Implementation Notes 4.3BSD Edition'', </title> <institution> Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <address> California 94720, </address> <month> April, </month> <year> 1986. </year>
Reference-contexts: In - 10 - - -- the BSD implementation, the socket layer and the protocol layer communicate through a procedural interface structured as a vector of operations defined in the protocol layer that are available for the socket layer to call <ref> [7] </ref> . In some cases the particular problem to be described in this section is a result of a service being available in the BSD socket-to-protocol interface but absent from its equivalent in SVR4.
Reference: 8. <institution> UNIX System V Release 3.0 Kernel Interfaces , AT&T, </institution> <year> 1983. </year>
Reference-contexts: The problem is that the TPI specifically says that data request messages on connectionless transports will consist of an M_PROTO message block followed by one or more M_DATA blocks containing at least one byte of data <ref> [8] </ref> .
Reference: 9. <institution> UNIX System V Release 4 Network Programmer's Guide, AT&T, </institution> <year> 1989. </year> <month> - 14 </month> - 
Reference-contexts: Therefore, it would have been naive to expect total compatibility between our socket implementation and its BSD counterpart, and some minor incompatibilities still remain <ref> [9] </ref> . Many of the problems we faced still need acceptable resolutions, especially the ones concerning the TPI. These TPI deficiencies must be rectified if TPI is to be as useful as it should be, rather than a hindrance.
References-found: 8

