URL: http://www.cs.cornell.edu/home/kleinber/ipl-plane.ps
Refering-URL: http://www.cs.cornell.edu/home/kleinber/kleinber.html
Root-URL: 
Title: Geometric Two-Server Algorithms  
Author: Ran El-Yaniv Jon Kleinberg 
Keyword: analysis of algorithms, on-line algorithms.  
Abstract: For two servers in d-dimensional space under the L 1 metric, we give an optimal 2-competitive algorithm which uses constant time and space per request. This considerably extends the class of metric spaces for which an optimal, fast two-server algorithm is known; previously, the only such spaces were those that could be embedded in a tree. The algorithm itself can be seen as a higher-dimensional generalization of the "double-coverage" strategy of Chrobak et al. 
Abstract-found: 1
Intro-found: 1
Reference: [CKPV] <author> M. Chrobak, H. Karloff, T. Payne, S. Vishwanathan, </author> <title> "New results on server prob lems," </title> <journal> SIAM J. Discrete Math., </journal> <volume> 4(1991), </volume> <pages> pp. 172-181. </pages>
Reference-contexts: deterministic algorithm known for two servers in a general metric space is only 4-competitive [CL2] (improving on a 10-competitive algorithm [IR]); and, until now, the only known metric spaces in which a fast algorithm could achieve the optimal ratio of 2 were those that could be embedded in a tree <ref> [CKPV, CL3] </ref>. 1 Thus, our result considerably extends the class of metric spaces for which there is known to be a fast, optimal algorithm. <p> As an additional motivation, we note that the fast 2-competitive algorithm for the tree is based on a very elegant technique, "Double-Coverage," that was first discovered for servers on a line <ref> [CKPV] </ref>. However, attempts to extend this technique to produce optimal deterministic algorithms in spaces more general than trees have so far not been successful. <p> By the standard potential-function argument, the following two facts will imply that our algorithm is 2-competitive (see e.g. <ref> [CKPV] </ref>): 1. When the adversary moves, paying c, it can raise by at most 2c. 2. When the algorithm moves, paying c 0 , it lowers by at least c 0 . <p> When the adversary moves, paying c, it can raise by at most 2c. 2. When the algorithm moves, paying c 0 , it lowers by at least c 0 . The first of these facts holds in any metric space, and has been proved in earlier papers <ref> [CKPV, CL3, CDRS] </ref>; the argument is simply that the value of the minimum-cost matching goes up by at most c 0 while the L 1 (s 1 ; s 2 ) term of is untouched. Now consider the second fact. We break the behavior of the algorithm into two phases.
Reference: [CL1] <author> M. Chrobak, L. Larmore, </author> <title> "A new approach to the server problem," </title> <journal> SIAM J. Discrete Math., </journal> <volume> 4(1991), </volume> <pages> pp. 323-328. </pages>
Reference-contexts: However, all known two-server algorithms attaining the optimum ratio of 2 must perform a considerable amount of computation on each request <ref> [MMS, CL1] </ref>; for example, in an infinite metric space such as &lt; d , these algorithms slow down with each additional request. Thus it is natural to search for more efficient algorithms.
Reference: [CL2] <author> M. Chrobak, L. Larmore, </author> <title> "On fast algorithms for two servers," </title> <journal> J. Algorithms, </journal> <volume> 12(1991), </volume> <pages> pp. 607-614. </pages>
Reference-contexts: Thus it is natural to search for more efficient algorithms. In the setting of the server problem, it is standard to treat arithmetic operations and comparisons on real numbers as unit-cost operations; following Irani and Rubinfeld, and Chrobak and Larmore <ref> [IR, CL2] </ref>, we refer to a server algorithm as fast if it maintains a constant number of real variables, and performs a constant number of operations on each request. <p> Within this framework, a fundamental question that is still open is the following: does there exist a two-server algorithm that is both fast and 2-competitive? Indeed, the best fast, deterministic algorithm known for two servers in a general metric space is only 4-competitive <ref> [CL2] </ref> (improving on a 10-competitive algorithm [IR]); and, until now, the only known metric spaces in which a fast algorithm could achieve the optimal ratio of 2 were those that could be embedded in a tree [CKPV, CL3]. 1 Thus, our result considerably extends the class of metric spaces for which
Reference: [CL3] <author> M. Chrobak, L. Larmore, </author> <title> "An optimal on-line algorithm for k-servers on trees," </title> <journal> SIAM J. Computing, </journal> <volume> 20(1991), </volume> <pages> pp. 144-148. </pages>
Reference-contexts: deterministic algorithm known for two servers in a general metric space is only 4-competitive [CL2] (improving on a 10-competitive algorithm [IR]); and, until now, the only known metric spaces in which a fast algorithm could achieve the optimal ratio of 2 were those that could be embedded in a tree <ref> [CKPV, CL3] </ref>. 1 Thus, our result considerably extends the class of metric spaces for which there is known to be a fast, optimal algorithm. <p> When the adversary moves, paying c, it can raise by at most 2c. 2. When the algorithm moves, paying c 0 , it lowers by at least c 0 . The first of these facts holds in any metric space, and has been proved in earlier papers <ref> [CKPV, CL3, CDRS] </ref>; the argument is simply that the value of the minimum-cost matching goes up by at most c 0 while the L 1 (s 1 ; s 2 ) term of is untouched. Now consider the second fact. We break the behavior of the algorithm into two phases.
Reference: [CDRS] <author> D. Coppersmith, P. Doyle, P. Raghavan, M. Snir, </author> <title> "Random walks on weighted graphs, with applications to on-line algorithms," </title> <journal> Journal of the ACM, </journal> <volume> 40(1993), </volume> <pages> pp. 421-453. </pages>
Reference-contexts: Proof. We analyze the algorithm's performance using the cdrs potential function <ref> [CDRS] </ref> = L 1 (s 1 ; s 2 ) + 2M min (S; A); where M min (S; A) denotes the value of the minimum-cost matching between the adversary servers and the on-line servers. <p> When the adversary moves, paying c, it can raise by at most 2c. 2. When the algorithm moves, paying c 0 , it lowers by at least c 0 . The first of these facts holds in any metric space, and has been proved in earlier papers <ref> [CKPV, CL3, CDRS] </ref>; the argument is simply that the value of the minimum-cost matching goes up by at most c 0 while the L 1 (s 1 ; s 2 ) term of is untouched. Now consider the second fact. We break the behavior of the algorithm into two phases.
Reference: [IR] <author> S. Irani, R. Rubinfeld, </author> <title> "A competitive 2-server algorithm," </title> <journal> Information Processing Let ters, </journal> <volume> 39(1991), </volume> <pages> pp. 85-91. </pages>
Reference-contexts: Thus it is natural to search for more efficient algorithms. In the setting of the server problem, it is standard to treat arithmetic operations and comparisons on real numbers as unit-cost operations; following Irani and Rubinfeld, and Chrobak and Larmore <ref> [IR, CL2] </ref>, we refer to a server algorithm as fast if it maintains a constant number of real variables, and performs a constant number of operations on each request. <p> Within this framework, a fundamental question that is still open is the following: does there exist a two-server algorithm that is both fast and 2-competitive? Indeed, the best fast, deterministic algorithm known for two servers in a general metric space is only 4-competitive [CL2] (improving on a 10-competitive algorithm <ref> [IR] </ref>); and, until now, the only known metric spaces in which a fast algorithm could achieve the optimal ratio of 2 were those that could be embedded in a tree [CKPV, CL3]. 1 Thus, our result considerably extends the class of metric spaces for which there is known to be a
Reference: [MMS] <author> M. Manasse, L. McGeoch, D. Sleator, </author> <title> "Competitive algorithms for server problems," </title> <journal> J. Algorithms, </journal> <volume> 11(1990), </volume> <pages> pp. 208-230. 6 </pages>
Reference-contexts: In our case, it has been known since the introduction of the k-server problem that there exists a deterministic 2-competitive two-server algorithm, and that no deterministic two-server algorithm can achieve a ratio better than 2 in any metric space <ref> [MMS] </ref>. However, all known two-server algorithms attaining the optimum ratio of 2 must perform a considerable amount of computation on each request [MMS, CL1]; for example, in an infinite metric space such as &lt; d , these algorithms slow down with each additional request. <p> However, all known two-server algorithms attaining the optimum ratio of 2 must perform a considerable amount of computation on each request <ref> [MMS, CL1] </ref>; for example, in an infinite metric space such as &lt; d , these algorithms slow down with each additional request. Thus it is natural to search for more efficient algorithms. <p> 2 &lt; d lies in t d (x; y) if and only if w i is between min (x i ; y i ) and max (x i ; y i ) for 1 Note that all three-point spaces can be embedded in a tree, so the balancing algorithm of <ref> [MMS] </ref> is included in this category as well. 2 i = 1; : : : ; d. A point z 2 &lt; d induces the following partial order z on &lt; d : x z y if and only if x is contained in the box t d (y; z).
References-found: 7

