URL: http://www.cs.utexas.edu/users/mfkb/notes/006.ps
Refering-URL: http://www.cs.utexas.edu/users/mfkb/notes/
Root-URL: http://www.cs.utexas.edu
Email: fpclark,porterg@cs.utexas.edu  
Title: Constructing Scripts from Components: Working Note 6  
Author: Peter Clark and Bruce Porter 
Address: UT Austin  
Affiliation: Dept. CS,  
Abstract-found: 0
Intro-found: 1
Reference: [Batory, 1995] <author> Batory, D. </author> <year> (1995). </year> <title> http://www.cs.utexas.edu/users/schwartz. (collection of papers from the Predator Research Group, </title> <institution> Dept CS, UT Austin). </institution>
Reference-contexts: Our work on building scripts from components thus takes us close to work on software composition and reuse. In our model below we draw heavily from the inspiring work by Don Batory's software group at Univ. Texas at Austin <ref> [Batory, 1995] </ref>. 1.2 Overview To give a flavor of the script composition method described here, have a quick look ahead to Figure 8. This figure illustrates how a particular script representing "a visit to a restaurant" is constructed from more general components (of types "acquisition", "client-server interaction", "fill", and "exchange"). <p> P2 [Batory et al., 1993] and the object-oriented P++ [Singhal and Batory, 1993] are software generators which compose software components based on the GenVoca model. A full collection of papers from Batory's group is on the world-wide web at <ref> [Batory, 1995] </ref>. 4.2 Similarities with GenVoca GenVoca's premise is that by standardizing the fundamental abstractions of a domain and their programming interfaces, it is possible to build plug-compatable, inter-operable, and interchangable building blocks called components. Components with the same interface are said to be in the same realm.
Reference: [Batory and Geraci, 1995] <author> Batory, D. and Geraci, B. J. </author> <year> (1995). </year> <title> Validating component compositions in software system generators. </title> <type> Tech Report 95-03, </type> <institution> Dept CS, Univ. Texas at Austin, TX. </institution>
Reference-contexts: An alternative, which Batory's group has explored, might be to express such constraints in some external design-rule language, and then perform some post-hoc composition validation to ensure such constraints are not violated <ref> [Batory and Geraci, 1995] </ref>.
Reference: [Batory and O'Malley, 1992] <author> Batory, D. and O'Malley, S. </author> <year> (1992). </year> <title> The design and implementation of hierarchical software systems with reusable components. </title> <journal> ACM Transactions on Software Engineering and Methodology. </journal>
Reference: [Batory et al., 1992] <author> Batory, D., Singhal, V., and Sirkin, M. </author> <year> (1992). </year> <title> Implementing a domain model for data structures. </title> <journal> Int. Journal of Software Engineering and Knowledge Engineering, </journal> <volume> 2(3) </volume> <pages> 375-402. </pages>
Reference-contexts: We summarize these similarities and differences here. Good overviews of the GenVoca method are given in [Batory and O'Malley, 1992, Batory and Geraci, 1995, Batory et al., 1992]. <ref> [Batory et al., 1992, Batory et al., 1993] </ref> give examples of components and composition in the domain of data structures. P2 [Batory et al., 1993] and the object-oriented P++ [Singhal and Batory, 1993] are software generators which compose software components based on the GenVoca model.
Reference: [Batory et al., 1993] <author> Batory, D., Singhal, V., Sirkin, M., and Thomas, J. </author> <year> (1993). </year> <title> Scalable software libraries. </title> <booktitle> In Proceedings ACM SIGSOFT'93 (Symposium on the Foundations of Software Engineering). </booktitle>
Reference-contexts: We summarize these similarities and differences here. Good overviews of the GenVoca method are given in [Batory and O'Malley, 1992, Batory and Geraci, 1995, Batory et al., 1992]. <ref> [Batory et al., 1992, Batory et al., 1993] </ref> give examples of components and composition in the domain of data structures. P2 [Batory et al., 1993] and the object-oriented P++ [Singhal and Batory, 1993] are software generators which compose software components based on the GenVoca model. <p> We summarize these similarities and differences here. Good overviews of the GenVoca method are given in [Batory and O'Malley, 1992, Batory and Geraci, 1995, Batory et al., 1992]. [Batory et al., 1992, Batory et al., 1993] give examples of components and composition in the domain of data structures. P2 <ref> [Batory et al., 1993] </ref> and the object-oriented P++ [Singhal and Batory, 1993] are software generators which compose software components based on the GenVoca model.
Reference: [Chapman, 1986] <author> Chapman, D. </author> <year> (1986). </year> <title> Cognitive cliches. AI Working Paper 286, </title> <publisher> MIT, </publisher> <address> MA. </address>
Reference-contexts: The recurring notion of cliches is based around the theme of composing intermediate-level descriptions to represent some specific, possibly time-varying, phenomenon <ref> [Chapman, 1986, Rich and Waters, 1990] </ref>. Our work in concept composition was originally motivated by similar concerns.
Reference: [Cullingford, 1978] <author> Cullingford, R. </author> <year> (1978). </year> <title> Script application: Computer understanding of newspaper stories. </title> <type> Tech Report 116, </type> <institution> Dept CS, Yale Univ. </institution>
Reference-contexts: A script is like a plan, except that the rationale for its action sequence might not be fully represented. Script-like structures have been extensively used in AI, in particular for natural language understanding <ref> [Schank and Abelson, 1977, DeJong, 1979, Cullingford, 1978] </ref>. Despite their utility, treating scripts as a self-contained chunks of knowledge is problematic for several reasons.
Reference: [DeJong, 1979] <author> DeJong, G. </author> <year> (1979). </year> <title> Prediction and substantiation: two processes that comprise understanding. </title> <booktitle> In IJCAI-79, </booktitle> <pages> pages 217-222. </pages>
Reference-contexts: A script is like a plan, except that the rationale for its action sequence might not be fully represented. Script-like structures have been extensively used in AI, in particular for natural language understanding <ref> [Schank and Abelson, 1977, DeJong, 1979, Cullingford, 1978] </ref>. Despite their utility, treating scripts as a self-contained chunks of knowledge is problematic for several reasons.
Reference: [Dyer, 1981] <author> Dyer, M. G. </author> <year> (1981). </year> <title> $RESTAURANT revisited, or `lunch with boris'. </title> <booktitle> In IJCAI-81, </booktitle> <pages> pages 234-236. </pages>
Reference-contexts: Schank's MOPs (Memory Organization Packets) were originally conceived as more general chunks which could be combined together [Schank, 1982], and Dyer's BORIS system allowed abstractions to be (manually) overlayed on a base script, as depicted in Figure 1 <ref> [Dyer, 1981] </ref>. The recurring notion of cliches is based around the theme of composing intermediate-level descriptions to represent some specific, possibly time-varying, phenomenon [Chapman, 1986, Rich and Waters, 1990]. Our work in concept composition was originally motivated by similar concerns.
Reference: [Falkenhainer and Forbus, 1991] <author> Falkenhainer, B. and Forbus, K. </author> <year> (1991). </year> <title> Compositional mod-elling: Finding the right model for the job. </title> <journal> Artificial Intelligence, </journal> <volume> 51 </volume> <pages> 95-143. </pages>
Reference-contexts: There probably needs to be some method of ensuring that we maintain particular perpsective (s) throughout the script, maybe analogous to the way compositional modelling ensures consistent modelling assumptions among fragments in a model <ref> [Falkenhainer and Forbus, 1991] </ref>. Often, multiple actions can be modelled as either a sequence of actions, or as different views of a single `composite' action.
Reference: [Genesereth, 1982] <author> Genesereth, M. R. </author> <year> (1982). </year> <title> The role of plans in intelligent teaching systems. </title> <editor> In Sleeman and Brown, editors, </editor> <booktitle> Intelligent Tutoring Systems, </booktitle> <pages> pages 137-155. </pages> <publisher> Academic Press, </publisher> <address> Cambridge, MA. </address>
Reference-contexts: I give the food to the eater. ... 3.7 Forming Predictions/Expectations In a similar way, we can use scripts to form expectations based on partially matching their structures with other scripts, or with a sequence of observed changes in the world (a process akin to plan recognition <ref> [Genesereth, 1982] </ref>).
Reference: [Rich and Waters, 1990] <author> Rich, C. and Waters, R. C. </author> <year> (1990). </year> <title> The Programmer's Apprentice. </title> <address> ACM/Addison-Wesley, Reading, MA. </address>
Reference-contexts: The recurring notion of cliches is based around the theme of composing intermediate-level descriptions to represent some specific, possibly time-varying, phenomenon <ref> [Chapman, 1986, Rich and Waters, 1990] </ref>. Our work in concept composition was originally motivated by similar concerns.
Reference: [Schank, 1982] <author> Schank, R. </author> <year> (1982). </year> <title> Dynamic Memory. </title> <publisher> Cambridge Univ. Press. </publisher> <pages> 18 </pages>
Reference-contexts: These limitations of scripts as self-contained chunks are well known, and more compositional approaches have often been advocated in the literature. Schank's MOPs (Memory Organization Packets) were originally conceived as more general chunks which could be combined together <ref> [Schank, 1982] </ref>, and Dyer's BORIS system allowed abstractions to be (manually) overlayed on a base script, as depicted in Figure 1 [Dyer, 1981]. The recurring notion of cliches is based around the theme of composing intermediate-level descriptions to represent some specific, possibly time-varying, phenomenon [Chapman, 1986, Rich and Waters, 1990].
Reference: [Schank and Abelson, 1977] <author> Schank, R. and Abelson, R. </author> <year> (1977). </year> <title> Scripts, Plans, Goals and Un--derstanding. </title> <publisher> Erlbaum, </publisher> <address> Hillsdale, NJ. </address>
Reference-contexts: A script is like a plan, except that the rationale for its action sequence might not be fully represented. Script-like structures have been extensively used in AI, in particular for natural language understanding <ref> [Schank and Abelson, 1977, DeJong, 1979, Cullingford, 1978] </ref>. Despite their utility, treating scripts as a self-contained chunks of knowledge is problematic for several reasons.
Reference: [Singhal and Batory, 1993] <author> Singhal, V. and Batory, D. </author> <year> (1993). </year> <title> P++: A language for software system generators. </title> <type> Tech Report 93-16, </type> <institution> Dept CS, Univ. Texas at Austin, TX. </institution> <month> 19 </month>
Reference-contexts: P2 [Batory et al., 1993] and the object-oriented P++ <ref> [Singhal and Batory, 1993] </ref> are software generators which compose software components based on the GenVoca model.
References-found: 15

