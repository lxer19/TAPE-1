URL: http://www.cs.utexas.edu/users/hudson/cs96.ps
Refering-URL: http://www.cs.utexas.edu/users/hudson/papers.html
Root-URL: 
Email: hudson@cs.utexas.edu  
Title: Representing Actions in Default Logic: A Situation Calculus Approach  
Author: Hudson Turner 
Address: Austin, TX 78712-1188, USA  
Affiliation: Department of Computer Sciences University of Texas at Austin  
Abstract: We address the problem of representing common-sense knowledge about action domains in the formalism of default logic. We employ a methodology proposed by Gelfond and Lifschitz which involves first defining a high-level language for representing knowledge about actions, and then specifying a translation from the high-level action language into a general-purpose formalism, such as default logic. Accordingly, we define a high-level action language AC, and specify sound and complete translations of portions of AC into default logic. The language AC includes propositions that represent "static causal laws" of the following kind: a fluent formula can be made true by making a fluent formula true. Such propositions are more expressive than the state constraints traditionally used to represent background knowledge. Our translation of AC domain descriptions into default logic is simple, in part because the "rule-like" nature of causal laws is easily reflected in such a rule-based formalism. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Baral, C. </author> <year> 1995. </year> <title> Reasoning about actions: nondeterministic effects, constraints, </title> <booktitle> and qualifications. In Proc. of IJCAI-95, </booktitle> <pages> 2017-2023. </pages>
Reference-contexts: In other recent related work, Baral <ref> (Baral 1995) </ref> proposes an action description language based closely upon revision programming (Marek & Truszczynski 1993; 1994; 1995). The semantics of his action language is given directly in terms of a translation into disjunctive logic programs.
Reference: <author> Brewka, G., and Hertzberg, J. </author> <year> 1993. </year> <title> How to do things with worlds: On formalizing actions and plans. </title> <journal> Journal of Logic and Computation 3(5). </journal>
Reference-contexts: Brewka and Hertzberg <ref> (Brewka & Hertzberg 1993) </ref> use inference rules to encode causal background knowledge for reasoning about action. Their definition differs markedly from ours though. For instance, as we point out in (McCain & Turner 1995), their approach cannot capture the notion of qualification constraints.
Reference: <author> Elkan, C. </author> <year> 1992. </year> <title> Reasoning about action in first-order logic. </title> <booktitle> In Proc. of the 1992 Canadian Conf. on Artificial Intelligence. </booktitle>
Reference: <author> Geffner, H. </author> <year> 1990. </year> <title> Causal theories of nonmonotonic reasoning. </title> <booktitle> In Proc. of AAAI-90, </booktitle> <pages> 524-530. </pages>
Reference: <author> Gelfond, M., and Lifschitz, V. </author> <year> 1993. </year> <title> Representing action and change by logic programs. </title> <journal> Journal of Logic Programming 17 </journal> <pages> 301-322. </pages>
Reference-contexts: Introduction In this paper we address the problem of representing commonsense knowledge about action domains in the formalism of default logic. We employ a methodology proposed by Gelfond and Lifschitz <ref> (Gelfond & Lifschitz 1993) </ref> which involves first defining a high-level language for representing commonsense knowledge about actions, and then specifying a translation from the high-level action language into a general-purpose formalism, such as default logic.
Reference: <author> Gelfond, M.; Lifschitz, V.; Przymusinska, H.; and Truszczynski, M. </author> <year> 1991. </year> <title> Disjunctive defaults. </title> <editor> In Allen, J.; Fikes, R.; and Sandewall, E., eds., </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proc. of the 2nd Int'l Conference, </booktitle> <pages> 230-237. </pages>
Reference-contexts: We say a formula is a consequence of D if it belongs to every extension of D. Default logic is due to Reiter (Reiter 1980). The definitions presented here follow <ref> (Gelfond et al. 1991) </ref>, and are equivalent to Reiter's.
Reference: <author> Ginsberg, M., and Smith, D. </author> <year> 1988. </year> <title> Reasoning about actions II: The qualification problem. </title> <booktitle> Artificial Intelligence 35 </booktitle> <pages> 311-342. </pages>
Reference-contexts: Qualification constraints are so-named because they can lead to "derived action preconditions," or "qualifications." 9 It 9 This idea was anticipated by Ginsberg and Smith <ref> (Ginsberg & Smith 1988) </ref>. is straightforward to verify that AC sufficiency propositions of the form suffices for False in fact function as qualification constraints, since such propositions simply rule out any state in which holds, without leading to any indirect effects.
Reference: <author> Giunchiglia, E.; Kartha, G. N.; and Lifschitz, V. </author> <year> 1995. </year> <title> Actions with indirect effects (extended abstract). </title> <booktitle> In Working Notes of the AAAI Spring Symposium on Extending Theories of Action, </booktitle> <pages> 80-85. </pages>
Reference-contexts: Accordingly, in this paper we define a high-level action language AC, and specify sound and complete translations of portions of AC into default logic. The action language AC is modeled after the language AR of Giunchiglia, Kartha and Lifschitz <ref> (Giunchiglia, Kartha, & Lifschitz 1995) </ref>. AR was introduced as an improvement on the language AR 0 (Kartha & Lifschitz 1994), adding non-boolean fluents to AR 0 and replacing the so-called "release" propositions in AR 0 with "possibly changes" propositions. <p> The Action Language AC The high-level action language AC is patterned after the language AR <ref> (Giunchiglia, Kartha, & Lifschitz 1995) </ref>. It also incorporates the approach to representing causal background knowledge that was introduced in (McCain & Turner 1995). <p> A value proposition is entailed by D if it is true in every model of D. Remarks on AC The action description language AC is modeled after the language AR of Giunchiglia, Kartha and Lifschitz <ref> (Giunchiglia, Kartha, & Lifschitz 1995) </ref>. Unlike the language AC, AR allows non-boolean fluents; but if we restrict our consideration to the propositional portion of AR, we find that the model structures for the two languages are identical. Syntactically, AC and AR are very similar. <p> The principle of minimal change is also reflected in the definition of possible next states in AR 0 (Kartha & Lifschitz 1994) and AR <ref> (Giunchiglia, Kartha, & Lifschitz 1995) </ref>. See (Mc-Cain & Turner 1995) and (Przymusinski & Turner 1995) for further discussion. whereas in AC these are distinct propositions. 7 As the preceding observations suggest, the set of well-formed propositional AR expressions is a proper subset of the set of well-formed AC expressions. <p> Thus, in qualification-free domain descriptions, all action preconditions are 11 These results are modeled on similar results for the language AR <ref> (Giunchiglia, Kartha, & Lifschitz 1995) </ref>.
Reference: <author> Hanks, S., and McDermott, D. </author> <year> 1987. </year> <title> Nonmonotonic logic and temporal projection. </title> <booktitle> Artificial Intelligence 33(3) </booktitle> <pages> 379-412. </pages>
Reference-contexts: We also specify a second, simpler embedding for those AC domain descriptions in which there are no action preconditions whatsoever. We conclude with a brief comparison of our default theory for the Yale Shooting domain <ref> (Hanks & McDermott 1987) </ref> with the default theories considered by Hanks and McDermott (Hanks & McDermott 1987) and by Morris (Morris 1988). All proofs are omitted. They will appear in (Turner 1996). <p> We also specify a second, simpler embedding for those AC domain descriptions in which there are no action preconditions whatsoever. We conclude with a brief comparison of our default theory for the Yale Shooting domain <ref> (Hanks & McDermott 1987) </ref> with the default theories considered by Hanks and McDermott (Hanks & McDermott 1987) and by Morris (Morris 1988). All proofs are omitted. They will appear in (Turner 1996). <p> Example 1 We begin with yet another variant of the Yale Shooting domain <ref> (Hanks & McDermott 1987) </ref>. There is a pilgrim and a turkey. The pilgrim has two guns. If the pilgrim fires a loaded gun, the turkey will not be alive afterwards. If the turkey is not alive it cannot be trotting. <p> Comparison with Previous Approaches At this point it may be interesting to briefly consider some of the ways in which our default theory for the Yale Shooting domain <ref> (Hanks & McDermott 1987) </ref> differs from the one proposed and found inadequate by Hanks and McDermott, and from the more adequate solution later proposed by Morris (Morris 1988). <p> By comparison, the default theory that was introduced and rejected by Hanks and McDermott <ref> (Hanks & McDermott 1987) </ref> is (essentially) the default theory D 4 that appears in Figure 6. In default theory D 4 , the well-known technical difficulty results from the fact that we can reason "backwards in time," using the rule describing the effect of Shoot and the inertia rules.
Reference: <author> Kartha, G. N., and Lifschitz, V. </author> <year> 1994. </year> <title> Actions with indirect effects (preliminary report). </title> <booktitle> In Proc. of the Fourth Int'l Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> 341-350. </pages>
Reference-contexts: The action language AC is modeled after the language AR of Giunchiglia, Kartha and Lifschitz (Giunchiglia, Kartha, & Lifschitz 1995). AR was introduced as an improvement on the language AR 0 <ref> (Kartha & Lifschitz 1994) </ref>, adding non-boolean fluents to AR 0 and replacing the so-called "release" propositions in AR 0 with "possibly changes" propositions. Since AC does not allow non-boolean fluents, but does include "possibly changes" propositions, AC essentially builds on propositional AR. <p> The principle of minimal change is also reflected in the definition of possible next states in AR 0 <ref> (Kartha & Lifschitz 1994) </ref> and AR (Giunchiglia, Kartha, & Lifschitz 1995). <p> On the other hand, we have observed that some AC domain descriptions are not AR domain descriptions. For example, consider the following AC formalization of the Two-Switches domain, adapted from <ref> (Kartha & Lifschitz 1994) </ref> (and originally introduced in (Lifschitz 1990)).
Reference: <author> Lifschitz, V., and Turner, H. </author> <year> 1995. </year> <title> From disjunctive programs to abduction. </title> <editor> In Dix, J.; Pereira, L.; and Przymusinski, T., eds., </editor> <booktitle> Non-Monotonic Extensions of Logic Programming (Lecture Notes in Artificial Intelligence 927). </booktitle> <publisher> Springer-Verlag. </publisher> <pages> 23-42. </pages>
Reference-contexts: Accordingly, in this paper we define a high-level action language AC, and specify sound and complete translations of portions of AC into default logic. The action language AC is modeled after the language AR of Giunchiglia, Kartha and Lifschitz <ref> (Giunchiglia, Kartha, & Lifschitz 1995) </ref>. AR was introduced as an improvement on the language AR 0 (Kartha & Lifschitz 1994), adding non-boolean fluents to AR 0 and replacing the so-called "release" propositions in AR 0 with "possibly changes" propositions. <p> The Action Language AC The high-level action language AC is patterned after the language AR <ref> (Giunchiglia, Kartha, & Lifschitz 1995) </ref>. It also incorporates the approach to representing causal background knowledge that was introduced in (McCain & Turner 1995). <p> A value proposition is entailed by D if it is true in every model of D. Remarks on AC The action description language AC is modeled after the language AR of Giunchiglia, Kartha and Lifschitz <ref> (Giunchiglia, Kartha, & Lifschitz 1995) </ref>. Unlike the language AC, AR allows non-boolean fluents; but if we restrict our consideration to the propositional portion of AR, we find that the model structures for the two languages are identical. Syntactically, AC and AR are very similar. <p> The principle of minimal change is also reflected in the definition of possible next states in AR 0 (Kartha & Lifschitz 1994) and AR <ref> (Giunchiglia, Kartha, & Lifschitz 1995) </ref>. See (Mc-Cain & Turner 1995) and (Przymusinski & Turner 1995) for further discussion. whereas in AC these are distinct propositions. 7 As the preceding observations suggest, the set of well-formed propositional AR expressions is a proper subset of the set of well-formed AC expressions. <p> Thus, in qualification-free domain descriptions, all action preconditions are 11 These results are modeled on similar results for the language AR <ref> (Giunchiglia, Kartha, & Lifschitz 1995) </ref>.
Reference: <author> Lifschitz, V. </author> <year> 1990. </year> <title> Frames in the space of situations. </title> <booktitle> Artificial Intelligence 46 </booktitle> <pages> 365-376. </pages>
Reference-contexts: This representational choice reflects the fact that "dead" simply means "not alive." When formalizing this, it is important that we recognize that the fluent Dead , roughly speaking, inherits its inertial properties from the fluent Alive; accordingly, we declare Dead to be a "nonframe" fluent <ref> (Lifschitz 1990) </ref>, to which the commonsense law of inertia does not apply. <p> On the other hand, we have observed that some AC domain descriptions are not AR domain descriptions. For example, consider the following AC formalization of the Two-Switches domain, adapted from (Kartha & Lifschitz 1994) (and originally introduced in <ref> (Lifschitz 1990) </ref>).
Reference: <author> Lifschitz, V. </author> <year> 1993. </year> <title> Restricted monotonicity. </title> <booktitle> In Proc. AAAI-93, </booktitle> <pages> 432-437. </pages>
Reference-contexts: Introduction In this paper we address the problem of representing commonsense knowledge about action domains in the formalism of default logic. We employ a methodology proposed by Gelfond and Lifschitz <ref> (Gelfond & Lifschitz 1993) </ref> which involves first defining a high-level language for representing commonsense knowledge about actions, and then specifying a translation from the high-level action language into a general-purpose formalism, such as default logic.
Reference: <author> Lin, F., and Reiter, R. </author> <year> 1994. </year> <title> State constraints revisited. </title> <journal> Journal of Logic and Computation 4(5) </journal> <pages> 655-678. </pages> <note> Special Issue on Actions and Processes. </note>
Reference-contexts: On the other hand, if we leave all fluents "in the frame," we find that unfastening the first clasp can sometimes have the unintended indirect effect of fastening the second clasp. Lin and Reiter <ref> (Lin & Reiter 1994) </ref> have suggested the name "ramification constraints" for state constraints that are used to derive indirect effects. For example, state constraints in the languages AR 0 and AR function as ramification constraints. <p> Recall that in AC such an expression stands for the sufficiency proposition True suffices for . It is natural to call such AC propositions ramification constraints. Lin and Reiter <ref> (Lin & Reiter 1994) </ref> describe another use of state constraints: as so-called "qualification constraints." Qualification constraints are state constraints that simply restrict the state space; they do not themselves lead to any indirect effects. <p> Recall that we abbreviate such sufficiency propositions as never : It is natural to call such AC propositions qualification constraints. 10 As an example of an AC domain description involving a qualification constraint, consider the following formalization of the Emperor Domain of Lin and Re-iter <ref> (Lin & Reiter 1994) </ref>. never Yellow (Block 1 ) ^ Yellow (Block 2 ) Paint (x) causes Yellow (x) This domain description does not entail the AC value proposition Yellow (Block 2 ) after Paint (Block 2 ) but it does entail the following weaker proposition. ( initially :Yellow (Block 1 <p> This would seem to be a weakness of his proposal, since disjunctive logic programs are relatively difficult to reason about. Lin (Lin 1995) introduces a circumscriptive approach to causal theories of action that is closely related to his previous work with Reiter <ref> (Lin & Reiter 1994) </ref>. Lin shows that for a special class of action descriptions, the meaning of a description can be obtained by a reasonably straightforward completion process; but in the general case, the semantics of Lin's action descriptions is given in terms of a complex minimization process.
Reference: <author> Lin, F. </author> <year> 1995. </year> <title> Embracing causality in specifying the indirect effects of actions. </title> <booktitle> In Proc. of IJCAI-95, </booktitle> <pages> 1985-1991. </pages>
Reference-contexts: But in doing so, we do not change the set of models. 8 Let us consider another example, adapted from <ref> (Lin 1995) </ref>, which demonstrates that it is not always possible to obtain intuitively correct results using state constraints augmented by the frame/nonframe distinction. In this action domain, there is a spring-loaded briefcase with two clasps. We have actions that unfasten the clasps, one at a time. <p> The semantics of his action language is given directly in terms of a translation into disjunctive logic programs. This would seem to be a weakness of his proposal, since disjunctive logic programs are relatively difficult to reason about. Lin <ref> (Lin 1995) </ref> introduces a circumscriptive approach to causal theories of action that is closely related to his previous work with Reiter (Lin & Reiter 1994).
Reference: <author> Marek, W., and Truszczynski, M. </author> <year> 1993. </year> <title> Revision programming. </title> <type> Manuscript. </type>
Reference: <author> Marek, W., and Truszczynski, M. </author> <year> 1994. </year> <title> Revision specifications by means of programs. </title> <booktitle> In Logics in AI. Proceedings of JELIA '94. </booktitle>
Reference: <author> Marek, W., and Truszczynski, M. </author> <year> 1995. </year> <title> Revision programming, database updates and integrity constraints. </title> <booktitle> In Proc. of the 5th Int'l Conf. on Database Theory, </booktitle> <pages> 368-382. </pages>
Reference: <author> McCain, N., and Turner, H. </author> <year> 1995. </year> <title> A causal theory of ramifications and qualifications. </title> <booktitle> In Proc. of IJCAI-95, </booktitle> <pages> 1978-1984. </pages>
Reference-contexts: Since AC does not allow non-boolean fluents, but does include "possibly changes" propositions, AC essentially builds on propositional AR. The language AC improves on propositional AR by adopting the method for representing causal background knowledge that was proposed by McCain and Turner in <ref> (McCain & Turner 1995) </ref>. In AR, background knowledge is represented in the form of state constraints, which have been traditionally used for this purpose. <p> Accordingly, AC includes propositions that express "static causal laws" of the following kind: in the action domain being described, one can make a fluent formula true by making a fluent formula true. In <ref> (McCain & Turner 1995) </ref> we argued for the usefulness of such propositions, and showed that they are more expressive than traditional state constraints. <p> For instance, the meta-variable x in the fourth expression below ranges over fGun 1 ; Gun 2 g. 2 See <ref> (McCain & Turner 1995) </ref> for additional motivation and explanation. The first rule in default theory D 1 reflects the as-sertion that the turkey is initially trotting, by ensuring that there can be no consistent extension of the default theory in which the turkey is initially not trotting. <p> The Action Language AC The high-level action language AC is patterned after the language AR (Giunchiglia, Kartha, & Lifschitz 1995). It also incorporates the approach to representing causal background knowledge that was introduced in <ref> (McCain & Turner 1995) </ref>. <p> A third difference is that in AR the expression impossible A if is an abbreviation for the effect proposition A causes False if 6 The fixpoint definition of possible next states in AC reflects a principle of "causal change" (see <ref> (McCain & Turner 1995) </ref>), as opposed to the principle of "minimal change" that underlies, for instance, Winslett's possible models approach to reasoning about action (Winslett 1988). <p> 1) _ Loc (x; 2) _ Loc (x; 3) _ Loc (x; 4) always :Loc (x; m) _ :Loc (x; n) (m 6= n) never Loc (A; n) ^ Loc (B; n) Move (x) causes :Loc (x; n) if Loc (x; n) 10 Much of this discussion is adapted from <ref> (McCain & Turner 1995) </ref>, where the relationship of static causal laws to ramification and qualification constraints is addressed in a more abstract setting. <p> Brewka and Hertzberg (Brewka & Hertzberg 1993) use inference rules to encode causal background knowledge for reasoning about action. Their definition differs markedly from ours though. For instance, as we point out in <ref> (McCain & Turner 1995) </ref>, their approach cannot capture the notion of qualification constraints. In fact, it sometimes yields different results even when derived action preconditions are not involved. <p> In fact, it sometimes yields different results even when derived action preconditions are not involved. The idea for the fixpoint definition of Res adopted in the semantics of AC was introduced in a pair of related papers (McCain & Turner 1995; Przymusin-ski & Turner 1995). In <ref> (McCain & Turner 1995) </ref> we show how the fixpoint definition can be derived as a natural extension of the corresponding definition from Winslett's (Winslett 1988) possible models approach to reasoning about the effects of actions.
Reference: <author> Morris, P. </author> <year> 1988. </year> <title> The anomalous extension problem in default reasoning. </title> <booktitle> Artificial Intelligence 35(3) </booktitle> <pages> 383-399. </pages>
Reference-contexts: We conclude with a brief comparison of our default theory for the Yale Shooting domain (Hanks & McDermott 1987) with the default theories considered by Hanks and McDermott (Hanks & McDermott 1987) and by Morris <ref> (Morris 1988) </ref>. All proofs are omitted. They will appear in (Turner 1996). <p> At this point it may be interesting to briefly consider some of the ways in which our default theory for the Yale Shooting domain (Hanks & McDermott 1987) differs from the one proposed and found inadequate by Hanks and McDermott, and from the more adequate solution later proposed by Morris <ref> (Morris 1988) </ref>. <p> Next consider the default theory for the Yale Shooting domain proposed by Morris <ref> (Morris 1988) </ref>, which is (essentially) the default theory D 5 shown in Figure 7. Even in Morris' default theory it appears that we can reason "backwards in time," using the rule describing the effect of the action Shoot .
Reference: <author> Przymusinski, T., and Turner, H. </author> <year> 1995. </year> <title> Update by means of inference rules. </title> <booktitle> In Proc. of the 3rd Int'l Conf. on Logic Programming and Nonmonotonic Reasoning, </booktitle> <pages> 156-174. </pages>
Reference-contexts: The principle of minimal change is also reflected in the definition of possible next states in AR 0 (Kartha & Lifschitz 1994) and AR (Giunchiglia, Kartha, & Lifschitz 1995). See (Mc-Cain & Turner 1995) and <ref> (Przymusinski & Turner 1995) </ref> for further discussion. whereas in AC these are distinct propositions. 7 As the preceding observations suggest, the set of well-formed propositional AR expressions is a proper subset of the set of well-formed AC expressions. <p> In (McCain & Turner 1995) we show how the fixpoint definition can be derived as a natural extension of the corresponding definition from Winslett's (Winslett 1988) possible models approach to reasoning about the effects of actions. In <ref> (Przymusinski & Turner 1995) </ref> the idea is explored in the more abstract setting of theory update.
Reference: <author> Reiter, R. </author> <year> 1980. </year> <title> A logic for default reasoning. </title> <journal> Artificial Intelligence 13(1,2):81-132. </journal>
Reference-contexts: We say a formula is a consequence of D if it belongs to every extension of D. Default logic is due to Reiter <ref> (Reiter 1980) </ref>. The definitions presented here follow (Gelfond et al. 1991), and are equivalent to Reiter's.
Reference: <author> Sandewall, E. </author> <year> 1994. </year> <title> Features and Fluents. </title> <publisher> Oxford University Press. </publisher>
Reference-contexts: Accordingly, the literal :Holds (Trotting; Result (Shoot (Gun 2 ); Result (Shoot (Gun 1 ); S 0 ))) is a consequence of the default theory. Example 2 Next we consider a variant of Sandewall's Russian Turkey Shoot domain <ref> (Sandewall 1994) </ref>. There is a turkey and a (single) gun. The turkey is initially alive.
Reference: <author> Thielscher, M. </author> <year> 1995. </year> <title> Computing ramifications by postprocessing. </title> <booktitle> In Proc. of IJCAI-95, </booktitle> <pages> 1994-2000. </pages>
Reference-contexts: Nonetheless, it seems likely that where the proposals of Baral and Lin overlap with ours, they will turn out to agree. Thielscher <ref> (Thielscher 1995) </ref> extends previous work, by himself and his colleagues, on reasoning about action in the formalism of equational logic programming. His proposal involves the use of state constraints accompanied by auxiliary information about directional, causal relationships between pairs of fluent atoms.
Reference: <author> Turner, H. </author> <year> 1994. </year> <title> Signed logic programs. </title> <editor> In Bruynooghe, M., ed., </editor> <booktitle> Logic Programming: Proc. of the 1994 Int'l Symposium, </booktitle> <pages> 61-75. </pages>
Reference: <author> Turner, H. </author> <year> 1996. </year> <title> Representing actions in logic programs and default theories: A situation calculus approach. </title> <journal> Journal of Logic Programming. Forthcoming. </journal>
Reference-contexts: We conclude with a brief comparison of our default theory for the Yale Shooting domain (Hanks & McDermott 1987) with the default theories considered by Hanks and McDermott (Hanks & McDermott 1987) and by Morris (Morris 1988). All proofs are omitted. They will appear in <ref> (Turner 1996) </ref>. Two Examples In order to illustrate the range of applicability of the definitions introduced in this paper, we next consider two example action domains, providing for each an informal description, a formalization in the action language AC, and a sound and complete translation into default logic.
Reference: <author> Winslett, M. </author> <year> 1988. </year> <title> Reasoning about action using a possible models approach. </title> <booktitle> In Proc. of AAAI-88, </booktitle> <pages> 89-93. </pages>
Reference-contexts: abbreviation for the effect proposition A causes False if 6 The fixpoint definition of possible next states in AC reflects a principle of "causal change" (see (McCain & Turner 1995)), as opposed to the principle of "minimal change" that underlies, for instance, Winslett's possible models approach to reasoning about action <ref> (Winslett 1988) </ref>. The principle of minimal change is also reflected in the definition of possible next states in AR 0 (Kartha & Lifschitz 1994) and AR (Giunchiglia, Kartha, & Lifschitz 1995). <p> In (McCain & Turner 1995) we show how the fixpoint definition can be derived as a natural extension of the corresponding definition from Winslett's <ref> (Winslett 1988) </ref> possible models approach to reasoning about the effects of actions. In (Przymusinski & Turner 1995) the idea is explored in the more abstract setting of theory update.
References-found: 27

