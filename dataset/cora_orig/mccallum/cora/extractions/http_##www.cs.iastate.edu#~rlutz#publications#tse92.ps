URL: http://www.cs.iastate.edu/~rlutz/publications/tse92.ps
Refering-URL: http://www.cs.iastate.edu/~rlutz/homepage.html
Root-URL: http://www.cs.iastate.edu
Title: Detecting Unsafe Error Recovery Schedules  
Author: Robyn R. Lutz Johnny S. K. Wong 
Date: July 31, 1996  
Address: Pasadena, CA 91109  Ames, IA 50011  
Affiliation: Jet Propulsion Laboratory California Institute of Technology  Department of Computer Science Iowa State University  
Abstract: This paper presents a mechanism for modeling timing, precedence, and data-consistency constraints on concurrently executing processes. The model allows durations and intervals between events to be specified. An algorithm is provided to detect schedules which may be unsafe with respect to the constraints. This work, motivated by the design and validation of autonomous error-recovery strategies on the Galileo spacecraft, appears to be applicable to a variety of asynchronous real-time systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alur, C. Courcoubetis, and D. Dill, </author> <title> "Model-Checking for Real-Time Systems," </title> <booktitle> in Proceedings of the 5th Annual IEEE Symposium on Logic in Computer Science. </booktitle> <address> Los Alamitos, CA: </address> <publisher> IEEE Computer Science Press, </publisher> <year> 1990, </year> <pages> pp. 414-425. </pages>
Reference-contexts: Real Time Logic models the timing aspects of a system specification to establish timing properties (periodic events and deadlines) [19]. Various extensions to temporal logic and temporal logic 5 model checking have been developed to formally describe timing requirements and to verify automatically that the system satisfies them <ref> [1, 9, 12, 17, 30] </ref>. These methods provide a good basis for specifying timing requirements but are either more ambitious (in that they model states) or less expressive (in that they only model a subset of timing constraints) than is needed for the spacecraft.
Reference: [2] <author> R. Alur and D. Dill, </author> <title> "Automata for Modeling Real-Time Systems," </title> <editor> in 17th ICALP , Ed. M. S. Paterson. </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 443. </pages> <address> New York: </address> <publisher> Springer-Verlag, </publisher> <year> 1990, </year> <pages> pp. 322-335. </pages>
Reference-contexts: Alternatively, processes can be repesented as timed Buchi automata (with upper time bounds on events) and the languages of timed traces that they accept can be investigated <ref> [2] </ref>. Real Time Logic models the timing aspects of a system specification to establish timing properties (periodic events and deadlines) [19].
Reference: [3] <author> M. Ben-Ari, </author> <booktitle> Principles of Concurrent Programming. </booktitle> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice-Hall, </publisher> <year> 1982. </year>
Reference: [4] <author> A. J. Bernstein, </author> <title> "Analysis of programs for parallel processing," </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. EC-15,5, </volume> <pages> pp. 757-762, </pages> <month> October </month> <year> 1966. </year>
Reference-contexts: C. Data-Consistency Constraints Data-consistency constraints involve restrictions placed on the order of commands when two or more processes access the same variable and at least one process changes the value of the variable <ref> [4] </ref>. In such cases a concurrent execution of the processes can lead to a result different from the sequential execution of the processes.
Reference: [5] <author> A. A. Bestavros, J. J. Clark, and N. J. Ferrier, </author> <title> "Management of Sensori-Motor Activity in Mobile Robots," </title> <booktitle> in Proceedings of the 1990 IEEE International Conference on Robotics and Automation. </booktitle> <address> Los Alamitos, CA: </address> <publisher> IEEE Computer Society, </publisher> <year> 1990, </year> <pages> pp. 592-597. </pages>
Reference-contexts: Petri net extensions model periodic events and deadlines [10, 21]. Automata-based methods model processes as a machine and try to prove a predicate (which may involve upper and lower time bounds on events) true for the reachable states in the machine <ref> [5, 13, 23] </ref>. Alternatively, processes can be repesented as timed Buchi automata (with upper time bounds on events) and the languages of timed traces that they accept can be investigated [2]. <p> This distinction between a "hard" time constraint (an interval within which the action should be taken) and a "soft" time constraint (an interval within which the action may occur) <ref> [5] </ref> is often absent in formal models. Autonomous error recovery onboard the spacecraft requires the spacecraft to have capabilities that it is only permitted to exercise subject to certain constraints.
Reference: [6] <author> G. Beutelschies, </author> <title> Galileo Space Flight Operations Plan, Command Dictionary. </title> <journal> 625-505, </journal> <volume> vol. 11, </volume> <editor> Rev. A. </editor> <address> Pasadena, CA: </address> <institution> Jet Propulsion Laboratory internal document, </institution> <year> 1989. </year> <month> 21 </month>
Reference-contexts: The constraints graph input to the constraints checker (Fig. 4) consists of 40 nodes and 40 edges <ref> [6, 26] </ref>. Of these edges, 20 are precedence edges and 20 are timing edges. The commands represented by the nodes address four different spacecraft subsystems.
Reference: [7] <author> R. H. Campbell and B. Randell, </author> <title> "Error Recovery in Asynchronous Systems," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. SE-12, </volume> <pages> pp. 811-826, </pages> <month> August </month> <year> 1986. </year>
Reference: [8] <author> S. Cheng, J. A. Stankovic, and K. Ramamritham, </author> <title> "Dynamic Scheduling of Groups of Tasks with Precedence Constraints in Distributed Hard Real-Time Systems," </title> <booktitle> IEEE Real-Time System Symposium. </booktitle> <address> New Orleans, LA: </address> <year> 1986, </year> <pages> pp. 166-174. </pages>
Reference-contexts: Some techniques consider both timing and precedence constraints, but their definition of timing constraints only in terms of periodic events (e.g., sampling rates), fixed execution times for events, and deadline or timeliness requirements provides too limited a model for the aperiodic and interval timing constraints on spacecraft commands <ref> [8, 35, 36, 40] </ref>. The work described here brings together the study of real-time constraints with the study of precedence and data-consistency constraints. A wide variety of powerful formalisms exists to model the specifications and behavior of real-time concurrent systems.
Reference: [9] <author> E. M. Clarke, E. A. Emerson, and A. P. Sistla, </author> <title> "Automatic Verification of Finite-State Concurrent Systems Using Temporal Logic Specifications," </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> vol. 8, </volume> <pages> pp. 244-263, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: Real Time Logic models the timing aspects of a system specification to establish timing properties (periodic events and deadlines) [19]. Various extensions to temporal logic and temporal logic 5 model checking have been developed to formally describe timing requirements and to verify automatically that the system satisfies them <ref> [1, 9, 12, 17, 30] </ref>. These methods provide a good basis for specifying timing requirements but are either more ambitious (in that they model states) or less expressive (in that they only model a subset of timing constraints) than is needed for the spacecraft.
Reference: [10] <author> J. E. Coolahan, Jr., and N. Roussopoulos, </author> <title> "A Timed Petri Net Methodology for Specifying Real-Time System Timing Requirements," </title> <booktitle> International Workshop on Timed Petri Nets. </booktitle> <address> Silver Springs, MD: </address> <publisher> IEEE, </publisher> <year> 1985. </year>
Reference-contexts: Many of these formalisms address to some degree the problem of checking timing constraints. However, none of the available methods readily translates to the domain of validating error recovery on spacecraft. Petri net extensions model periodic events and deadlines <ref> [10, 21] </ref>. Automata-based methods model processes as a machine and try to prove a predicate (which may involve upper and lower time bounds on events) true for the reachable states in the machine [5, 13, 23].
Reference: [11] <author> L. K. Dillon, et al., </author> <title> "An Interval Logic Based on Actions and Events," </title> <booktitle> in Proceedings of the Berkeley Workshop on Temporal and Real-Time Specification, </booktitle> <editor> Eds. P. B. Ladkin and F. H. Vogt. </editor> <address> Berkeley, CA: </address> <booktitle> International Computer Science Institute, TR-90-060, </booktitle> <pages> pp. 33-45. </pages>
Reference-contexts: The work decribed here discusses many of the same timing issues addressed by recent work in interval temporal logic <ref> [11, 32, 34, 38] </ref>. However, the emphasis there is on specifying and verifying system requirements (what the spacecraft must do) while the emphasis here is on verifying operational constraints (what the spacecraft should not be allowed to do).
Reference: [12] <author> E. A. Emerson, </author> <title> "Temporal and Modal Logic," </title> <booktitle> in Handbook of Theoretical Computer Science, </booktitle> <volume> vol. </volume> <editor> B, </editor> <title> Formal Models and Semantics., </title> <editor> Ed. J. van Leeuwen. Cam-bridge/Amsterdam: </editor> <publisher> MIT Press/Elsevier, </publisher> <year> 1990, </year> <pages> pp. 995-1072. </pages>
Reference-contexts: Real Time Logic models the timing aspects of a system specification to establish timing properties (periodic events and deadlines) [19]. Various extensions to temporal logic and temporal logic 5 model checking have been developed to formally describe timing requirements and to verify automatically that the system satisfies them <ref> [1, 9, 12, 17, 30] </ref>. These methods provide a good basis for specifying timing requirements but are either more ambitious (in that they model states) or less expressive (in that they only model a subset of timing constraints) than is needed for the spacecraft.
Reference: [13] <author> M. K. Franklin and A. Gabrelian, </author> <title> "A Transformational Method for Verifying Safety Properties in Real-Time Systems," </title> <booktitle> in Proceedings of the Real-Time Systems Symposium. </booktitle> <address> Los Alamitos, CA: </address> <publisher> IEEE Computer Society, </publisher> <year> 1989, </year> <pages> pp. 112-123. </pages>
Reference-contexts: Petri net extensions model periodic events and deadlines [10, 21]. Automata-based methods model processes as a machine and try to prove a predicate (which may involve upper and lower time bounds on events) true for the reachable states in the machine <ref> [5, 13, 23] </ref>. Alternatively, processes can be repesented as timed Buchi automata (with upper time bounds on events) and the languages of timed traces that they accept can be investigated [2].
Reference: [14] <author> R. M. Fujimoto, </author> <title> "Parallel Discrete Event Simulation," </title> <journal> Communications of the ACM , vol. </journal> <volume> 33, </volume> <pages> pp. 31-53, </pages> <month> Jan. </month> <year> 1990. </year>
Reference: [15] <author> H. Garca-Molina, </author> <title> "Using Semantic Knowledge for Transaction Processing in a Distributed Database," </title> <journal> ACM Transactions on Database Systems, </journal> <volume> vol. 8, </volume> <pages> pp. 186-213, </pages> <month> June </month> <year> 1983. </year>
Reference-contexts: Precedence and timing are fundamentally different in that precedence does not require a notion of duration [30]. Most methods that currently exist to model precedence constraints do not incorporate timing requirements and so are inadequate for modeling the timing constraints on spacecraft <ref> [15, 24, 28] </ref>. On the other hand, many techniques that are currently available to model timing constraints tend to ignore precedence constraints.
Reference: [16] <author> L. Grove, </author> <title> Galileo Space Flight Operations Plan, Fault Protection System Design and Operations. </title> <type> 625-505, </type> <note> vol. 8, Rev. A, Preliminary Release. </note> <institution> Pasadena, CA: Jet Propulsion Laboratory internal document, </institution> <month> April </month> <year> 1989. </year>
Reference-contexts: This is accomplished by dividing the critical sequence into a number of segments, each consisting of a distinct AACS configuration and an activity (e.g., the 400-Newton burn) needed for the completion of the sequence <ref> [16, 33] </ref>. Each segment of the sequence has an AACS INIT error-recovery response tailored to it, designed to bring the AACS back to the state required by the sequence at that point.
Reference: [17] <author> T. A. Henziger, Z. Manna, and A. Pnueli, </author> <title> "Temporal Proof Methodologies for Real-Time Systems," </title> <booktitle> in Proceedings of the 18th ACM Symposium on Principles of Programming Languages, </booktitle> <year> 1991, </year> <pages> pp. 353-366. </pages>
Reference-contexts: Real Time Logic models the timing aspects of a system specification to establish timing properties (periodic events and deadlines) [19]. Various extensions to temporal logic and temporal logic 5 model checking have been developed to formally describe timing requirements and to verify automatically that the system satisfies them <ref> [1, 9, 12, 17, 30] </ref>. These methods provide a good basis for specifying timing requirements but are either more ambitious (in that they model states) or less expressive (in that they only model a subset of timing constraints) than is needed for the spacecraft.
Reference: [18] <author> J. C. Horvath and L. P. Perry, </author> <title> "Hypercubes for Critical Spacecraft Command Verification," </title> <booktitle> AIAA Second International Symposium on Space Information Systems. </booktitle> <address> Pasadena, CA: AIAA, </address> <year> 1990. </year> <month> 22 </month>
Reference: [19] <author> F. Jahanian and A. K.-L. Mok, </author> <title> "Safety Analysis of Timing Properties in Real-Time Systems," </title> <journal> IEEE Transactions on Software Engineering vol. </journal> <volume> SE-12, </volume> <pages> pp. 890-904, </pages> <month> Sept. </month> <year> 1986. </year>
Reference-contexts: Alternatively, processes can be repesented as timed Buchi automata (with upper time bounds on events) and the languages of timed traces that they accept can be investigated [2]. Real Time Logic models the timing aspects of a system specification to establish timing properties (periodic events and deadlines) <ref> [19] </ref>. Various extensions to temporal logic and temporal logic 5 model checking have been developed to formally describe timing requirements and to verify automatically that the system satisfies them [1, 9, 12, 17, 30].
Reference: [20] <author> W. H. Kohler, </author> <title> "A Survey of Techniques for Synchronization and Recovery in Decentralized Computer Systems," </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 13, </volume> <pages> pp. 149-182, </pages> <month> June </month> <year> 1981. </year>
Reference-contexts: Most research in concurrency instead addresses the question of how concurrency can be maximized in a future system within some given constraints. 3. Solutions to error recovery usually involve the notion of atomic actions, but a spacecraft command cannot be adequately modeled as an atomic action <ref> [20, 37] </ref>. A command is defined to be an action. An issuance of a command is defined to be an event, the instantiation of an action at a specific point t in time. The issuance of a command is then assumed to occur instantaneously at this point in time.
Reference: [21] <author> N. G. Leveson and J. L. Stolzy, </author> <title> "Safety Analysis Using Petri Nets," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. SE-13, </volume> <pages> pp. 386-397, </pages> <month> March </month> <year> 1987. </year>
Reference-contexts: Many of these formalisms address to some degree the problem of checking timing constraints. However, none of the available methods readily translates to the domain of validating error recovery on spacecraft. Petri net extensions model periodic events and deadlines <ref> [10, 21] </ref>. Automata-based methods model processes as a machine and try to prove a predicate (which may involve upper and lower time bounds on events) true for the reachable states in the machine [5, 13, 23].
Reference: [22] <author> R. R. Lutz and J. S. K. Wong, </author> <title> "Validating System-Level Error Recovery for Spacecraft," </title> <booktitle> AIAA Computing in Aerospace 8 , vol. 1. </booktitle> <address> Washington: AIAA, </address> <year> 1991, </year> <pages> pp. 69-76. </pages>
Reference: [23] <author> N. Lynch and H. Attiya, </author> <title> "Using Mappings to Prove Timing Properties." </title> <address> MIT/LCS/TM-412.b. </address> <month> December, </month> <year> 1989. </year>
Reference-contexts: Petri net extensions model periodic events and deadlines [10, 21]. Automata-based methods model processes as a machine and try to prove a predicate (which may involve upper and lower time bounds on events) true for the reachable states in the machine <ref> [5, 13, 23] </ref>. Alternatively, processes can be repesented as timed Buchi automata (with upper time bounds on events) and the languages of timed traces that they accept can be investigated [2]. <p> Instead, the nominal execution time is added to the timing constraint. The cases for the inside-interval and the outside-interval edge types follow accordingly. B. Precedence Constraints While intercommand timing constraints are clearly safety properties, intercommand precedence constraints contain aspects of both safety and liveness properties <ref> [23] </ref>. Precedence constraints enforce an ordering of commands and so involve functional correctness, a concern of safety properties.
Reference: [24] <author> M. Maekawa, A. E. Oldehoeft, and R. R. Oldehoeft, </author> <title> Operating Systems, </title> <booktitle> Advanced Concepts. </booktitle> <address> Menlo Park, CA: Benjamin/Cummings, </address> <year> 1987. </year>
Reference-contexts: Precedence and timing are fundamentally different in that precedence does not require a notion of duration [30]. Most methods that currently exist to model precedence constraints do not incorporate timing requirements and so are inadequate for modeling the timing constraints on spacecraft <ref> [15, 24, 28] </ref>. On the other hand, many techniques that are currently available to model timing constraints tend to ignore precedence constraints.
Reference: [25] <author> M. A. McDonald, </author> <title> "Functional Emulation of Engineering Subsystem Interactions within the Galileo Spacecraft." M.S. </title> <type> Thesis. </type> <institution> Univ. of Southern California, </institution> <year> 1990. </year>
Reference: [26] <author> N. Medici, </author> <title> Galileo Spacecraft Flight Rules and Constraints. </title> <address> 625-270, Rev. C. Pasadena, CA: </address> <institution> Jet Propulsion Laboratory internal document, </institution> <month> July </month> <year> 1988. </year>
Reference-contexts: The constraints graph input to the constraints checker (Fig. 4) consists of 40 nodes and 40 edges <ref> [6, 26] </ref>. Of these edges, 20 are precedence edges and 20 are timing edges. The commands represented by the nodes address four different spacecraft subsystems.
Reference: [27] <author> K. Mehlhorn, </author> <title> Data Structures and Algorithms 2: Graph Algorithms and NP-Completeness. </title> <publisher> Berlin: Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: An edge which fails to satisfy the required predicate is flagged. In that case some scheduling of the processes can cause the constraint represented by that edge to be violated. Since the constraints graph is sparse, an adjacency list representation is used to store the graph <ref> [27] </ref>. Inputting a process to the constraints checker consists of adding a two-way pointer from each command in the process to the node in the constraints graph that represents the command. Each command has an associated time tag.
Reference: [28] <author> J. E. B. Moss, </author> <title> Nested Transactions, An Approach to Reliable Distributed Computing. </title> <address> Cambridge, MA: </address> <publisher> MIT Press, </publisher> <year> 1981. </year>
Reference-contexts: Precedence and timing are fundamentally different in that precedence does not require a notion of duration [30]. Most methods that currently exist to model precedence constraints do not incorporate timing requirements and so are inadequate for modeling the timing constraints on spacecraft <ref> [15, 24, 28] </ref>. On the other hand, many techniques that are currently available to model timing constraints tend to ignore precedence constraints.
Reference: [29] <author> J. D. Northcutt, </author> <title> Mechanisms for Reliable Distributed Real-Time Operating Systems, The Alpha Kernel. </title> <address> Boston: </address> <publisher> Academic Press, </publisher> <year> 1987. </year>
Reference: [30] <author> A. Pnueli and E. Harel, </author> <title> "Applications of Temporal Logic to the Specifications of Real Time Systems," in Formal Techniques in Real-Time and Fault-Tolerant Systems., </title> <editor> Ed. M. Joseph. </editor> <publisher> Berlin: Springer-Verlag, </publisher> <year> 1988, </year> <pages> pp. 84-98. </pages>
Reference-contexts: The solution here must take into account both precedence constraints and timing constraints. Precedence and timing are fundamentally different in that precedence does not require a notion of duration <ref> [30] </ref>. Most methods that currently exist to model precedence constraints do not incorporate timing requirements and so are inadequate for modeling the timing constraints on spacecraft [15, 24, 28]. On the other hand, many techniques that are currently available to model timing constraints tend to ignore precedence constraints. <p> Real Time Logic models the timing aspects of a system specification to establish timing properties (periodic events and deadlines) [19]. Various extensions to temporal logic and temporal logic 5 model checking have been developed to formally describe timing requirements and to verify automatically that the system satisfies them <ref> [1, 9, 12, 17, 30] </ref>. These methods provide a good basis for specifying timing requirements but are either more ambitious (in that they model states) or less expressive (in that they only model a subset of timing constraints) than is needed for the spacecraft.
Reference: [31] <author> B. Randell, P. A. Lee, and P. C. Treleaven, </author> <title> "Reliability Issues in Computing System Design," </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 10, </volume> <pages> pp. 123-166, </pages> <month> June </month> <year> 1978. </year>
Reference: [32] <author> R. R. Razouk and M. M. Gorlick, </author> <title> "A Real-Time Interval Logic for Reasoning About Executions of Real-Time Programs," </title> <booktitle> in Proceedings of the ACM SIGSOFT '89 Third Symposium on Software Testing, Analysis and Verification, </booktitle> <editor> Ed. R. A. Kemmerer. </editor> <booktitle> In Software Engineering Notes, </booktitle> <volume> vol. 14, </volume> <pages> pp. 10-19, </pages> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: The work decribed here discusses many of the same timing issues addressed by recent work in interval temporal logic <ref> [11, 32, 34, 38] </ref>. However, the emphasis there is on specifying and verifying system requirements (what the spacecraft must do) while the emphasis here is on verifying operational constraints (what the spacecraft should not be allowed to do).
Reference: [33] <editor> Relay/JOI Sequence, GLL3-120, Rev. D. </editor> <address> Pasadena, CA: </address> <publisher> Jet Propulsion Laboratory internal document, </publisher> <pages> pp. 108-177. 23 </pages>
Reference-contexts: This is accomplished by dividing the critical sequence into a number of segments, each consisting of a distinct AACS configuration and an activity (e.g., the 400-Newton burn) needed for the completion of the sequence <ref> [16, 33] </ref>. Each segment of the sequence has an AACS INIT error-recovery response tailored to it, designed to bring the AACS back to the state required by the sequence at that point.
Reference: [34] <author> R. L. Schwartz, P. M. Melliar-Smith, and F. H. Vogt, </author> <title> "An Interval-Based Temporal Logic," Logics of Programs, Workshop, </title> <editor> Ed. E. Clarke and D. Kozen. </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 164. </pages> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1984, </year> <pages> pp. 443-457. </pages>
Reference-contexts: The work decribed here discusses many of the same timing issues addressed by recent work in interval temporal logic <ref> [11, 32, 34, 38] </ref>. However, the emphasis there is on specifying and verifying system requirements (what the spacecraft must do) while the emphasis here is on verifying operational constraints (what the spacecraft should not be allowed to do).
Reference: [35] <author> L. Sha, R. Rajkumar, and J. P. Lehoczky, </author> <title> "Concurrency Control for Distributed Real-Time Databases," </title> <booktitle> SIGMOD RECORD , vol. </booktitle> <volume> 17, </volume> <pages> pp. 82-98, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: Some techniques consider both timing and precedence constraints, but their definition of timing constraints only in terms of periodic events (e.g., sampling rates), fixed execution times for events, and deadline or timeliness requirements provides too limited a model for the aperiodic and interval timing constraints on spacecraft commands <ref> [8, 35, 36, 40] </ref>. The work described here brings together the study of real-time constraints with the study of precedence and data-consistency constraints. A wide variety of powerful formalisms exists to model the specifications and behavior of real-time concurrent systems.
Reference: [36] <author> J. A. Stankovic and K. Ramamritham, </author> <title> Tutorial: Hard Real-Time Systems. </title> <address> Washing-ton, D.C.: </address> <publisher> The Computer Society, </publisher> <year> 1988. </year>
Reference-contexts: Some techniques consider both timing and precedence constraints, but their definition of timing constraints only in terms of periodic events (e.g., sampling rates), fixed execution times for events, and deadline or timeliness requirements provides too limited a model for the aperiodic and interval timing constraints on spacecraft commands <ref> [8, 35, 36, 40] </ref>. The work described here brings together the study of real-time constraints with the study of precedence and data-consistency constraints. A wide variety of powerful formalisms exists to model the specifications and behavior of real-time concurrent systems.
Reference: [37] <author> D. J. Taylor, </author> <title> "How Big Can an Atomic Action Be?" in Proceedings of the Fifth Symposium on Reliability in Distributed Software and Database Systems. </title> <address> Los Angeles: </address> <publisher> IEEE Computer Society, </publisher> <year> 1986, </year> <pages> pp. 121-124. </pages>
Reference-contexts: Most research in concurrency instead addresses the question of how concurrency can be maximized in a future system within some given constraints. 3. Solutions to error recovery usually involve the notion of atomic actions, but a spacecraft command cannot be adequately modeled as an atomic action <ref> [20, 37] </ref>. A command is defined to be an action. An issuance of a command is defined to be an event, the instantiation of an action at a specific point t in time. The issuance of a command is then assumed to occur instantaneously at this point in time.
Reference: [38] <author> F. H. Vogt and S. Leue, </author> <title> "The Paradigm of Real-Time Specification Based on Interval Logic," </title> <booktitle> in Proceedings of the Berkeley Workshop on Temporal and Real-Time Specification, </booktitle> <editor> Eds. P. B. Ladkin and F. H. Vogt. </editor> <address> Berkeley, CA: </address> <booktitle> International Computer Science Institute TR-90-060, </booktitle> <pages> pp. 153-178. </pages>
Reference-contexts: The work decribed here discusses many of the same timing issues addressed by recent work in interval temporal logic <ref> [11, 32, 34, 38] </ref>. However, the emphasis there is on specifying and verifying system requirements (what the spacecraft must do) while the emphasis here is on verifying operational constraints (what the spacecraft should not be allowed to do).
Reference: [39] <author> J. M. Wing, </author> <title> "A Specifier's Introduction to Formal Methods," </title> <journal> Computer , vol. </journal> <volume> 23, </volume> <pages> pp. 8-26, </pages> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: The classification into timing and precedence constraints corresponds loosely to the standard formal division of program correctness into safety properties and liveness properties. Safety properties can be stated informally as "nothing bad ever happens" and liveness properties as "something good eventually happens" <ref> [39] </ref>. A. Timing Constraints Intercommand timing constraints are safety properties. They impose a quantitative temporal relationship between the commands.
Reference: [40] <author> J. Xu and D. L. Parnas, </author> <title> "Scheduling Processes with Release Times, Deadlines, Precedence, and Exclusion Relations," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 16, </volume> <pages> pp. 360-369, </pages> <month> March </month> <year> 1990. </year> <title> 24 Index of Terms asynchronous systems, consistency constraints, error recovery, fault tolerance, hard-real-time systems, modeling, precedence, safety, scheduling, timing constraints. </title> <type> 25 </type>
Reference-contexts: Some techniques consider both timing and precedence constraints, but their definition of timing constraints only in terms of periodic events (e.g., sampling rates), fixed execution times for events, and deadline or timeliness requirements provides too limited a model for the aperiodic and interval timing constraints on spacecraft commands <ref> [8, 35, 36, 40] </ref>. The work described here brings together the study of real-time constraints with the study of precedence and data-consistency constraints. A wide variety of powerful formalisms exists to model the specifications and behavior of real-time concurrent systems.
References-found: 40

