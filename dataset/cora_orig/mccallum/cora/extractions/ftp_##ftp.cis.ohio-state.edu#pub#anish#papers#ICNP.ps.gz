URL: ftp://ftp.cis.ohio-state.edu/pub/anish/papers/ICNP.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/~anish/pub.html
Root-URL: 
Title: Once-and-Forall Management Protocol (OFMP)  
Author: Sandeep S. Kulkarni Anish Arora 
Keyword: network management, group operations, robust hierarchical control, diffusing computations, fault-tolerance, bounded memory  
Address: Columbus, OH 43210 USA  
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract: OFMP is a hierarchical, network management protocol that enables group operations to be executed on the management information bases of all nodes in the group. As long as no faults occur, OFMP ensures that all nodes execute their local operation exactly once in each group operation. If "immediately-detectable" faults occur, it ensures masking fault-tolerance; i.e., all non-failed nodes execute their local operation exactly once in each group operation. And, if "eventually-detectable" faults occur, it ensures stabilizing fault-tolerance; i.e., it eventually converges to a state from where all non-failed nodes execute their local operation exactly once in each subsequent group operation. Of special note is the ability of OFMP to detect using only a bounded amount of memory whether nodes have executed in same group operation, in a manner that masks immediately-detectable faults and stabilizes from eventually-detectable faults. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. Stallings. SNMP SNMPv2 and CMIP: </author> <title> The practical guide to network management standards. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1993. </year>
Reference: [2] <author> A. S. Tanenbaum. </author> <title> Computer networks. </title> <publisher> Prentice Hall, </publisher> <year> 1996. </year>
Reference: [3] <author> D. E. Comer. </author> <title> Internetworking with TCP/IP Vol 1, chapter 26. </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference: [4] <author> S. S. Kulkarni and A. Arora. </author> <title> Once-and-forall management protocol (OFMP). </title> <type> Technical Report OSU-CISRC-5/97-TR29, </type> <institution> Ohio State University, </institution> <year> 1997. </year>
Reference-contexts: Proof of correctness. The proof is based upon characterizing the set of states reached by OFMP in the presence of immedicately-detectable faults. For reasons of space, we have relegated it to the technical report version of the paper <ref> [4] </ref>. 5 Stabilizing from Eventually Detectable Faults OFMP satisfies Atmost-Once, Weak-Safety and Progress in the presence of immediately-detectable faults, but not in the presence of eventually-detectable faults. <p> Therefore, it suffices to set rc:(par:j) to 2 whenever par:j detects this. This refinement and the refinement of the immediately detectable fault is discussed in <ref> [4] </ref>. Dealing with the failure of ROOT. Our assumption that ROOT does not fail can be relaxed. Clearly, if ROOT fails during an OFMP computation, Progress of that computation may be violated. However, some other node can be chosen in a fault-tolerant manner to initiate future OFMP computations.
Reference: [5] <author> S. S. Kulkarni and A. Arora. </author> <title> Multitolerance in distributed reset. </title> <type> Technical Report OSU-CISRC TR13, </type> <institution> Ohio State University, </institution> <year> 1996. </year>
Reference-contexts: However, some other node can be chosen in a fault-tolerant manner to initiate future OFMP computations. Such a node may be chosen using a primary-backup protocol, a robust leader election protocol or, as shown in <ref> [5] </ref>, by appro priate choice of the underlying tree service. After the underlying tree service reconfigures a tree rooted at at the newly chosen node every OFMP computation will satisfy Atmost-Once, Weak-Safety and Progress.
Reference: [6] <author> A. Arora and M. G. Gouda. </author> <title> Closure and convergence: A foundation of fault-tolerant computing. </title> <journal> IEEE Transactions on Software Engineering, </journal> 19(11) 1015-1027, 1993. 
Reference: [7] <author> A. Gopal and K. Perry. </author> <title> Unifying self-stabilization and fault-tolerance. </title> <booktitle> Proceedings of the Twelfth Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 195-206, </pages> <year> 1993. </year>
Reference: [8] <author> I. Yen and F. Bastani. </author> <title> A highly safe self-stabilizing mutual exclusion algorithm. </title> <booktitle> Proceedings of the Second Workshop on Self-Stabilizing Systems, </booktitle> <year> 1995. </year>
Reference: [9] <author> S. Dolev and T. Herman. </author> <title> Superstabilizing protocols for dynamic distributed systems. </title> <booktitle> Proceedings of the Second Workshop on Self-Stabilizing Systems, </booktitle> <year> 1995. </year>
References-found: 9

