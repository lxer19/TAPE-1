URL: http://www.cs.colostate.edu/~howe/tech-rep.ps
Refering-URL: http://www.cs.colostate.edu/~howe/pubs.html
Root-URL: 
Phone: Phone: (970) 491-5792 Fax: (970) 491-2466  
Title: Methods for plan selection and refinement in a partial-order planner  
Author: Raghavan Srinivasan Adele E. Howe 
Web: WWW: http://www.cs.colostate.edu  
Address: Fort Collins, CO 80523-1873  
Affiliation: Computer Science Department Colorado State University  
Date: July 25, 1995  
Note: New  
Pubnum: Technical Report CS-95-03  
Abstract: Computer Science Technical Report 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Scott D. Anderson, Adam Carlson, David L. Westbrook, David M. Hart, and Paul R. Cohen. </author> <title> CLASP/CLIP common lisp analytical statistics package/common lisp instrumentation package. </title> <type> Technical Report TR 93-55, </type> <institution> Computer Science Department, University of Massachusetts, </institution> <year> 1993. </year> <month> 19 </month>
Reference-contexts: Using CLIP <ref> [1] </ref> (an instrumentation tool for defining and running data collection routines in a simulated environment), we collected data on what plans were generated, how certain open conditions were repaired, what threats were considered, and what variable bindings were used. From the initial experiments we made the following observations. 1.
Reference: [2] <author> Steve Hanks, Dat Nguyen, and Chris Thomas. </author> <title> A beginner's guide to the truckworld simulator. </title> <institution> Dept of CS&E UW-CSE-TR 93-06-09, University of Washington, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: This hard constraint is a simple form of the resource reasoning included in more sophisticated planning systems [8]. We developed this approach to address problems discovered when analyzing the behavior of UCPOP in Truckworld <ref> [2] </ref> (a simulator of trucks moving cargo between different destinations). UCPOP fails (i.e., could not find a plan even given a large search space) on apparently simple conjunctive subgoal problems in Truckworld. <p> The same set of problems without any modification is used for all versions. Most of the problems are from the example domains provided with UCPOP and tested in Joslin and Pollack's research with LCFR. Four of the problems are from the Truckworld domain <ref> [2] </ref>, all of which require picking up fuel drums; the four differ in the number of subgoals and arm positions. In all the domains, some of the operators were modified to include a special variable parameter for Bang-UCPOP.
Reference: [3] <author> Adele E. Howe and Paul R. Cohen. </author> <title> Detecting and explaining dependencies in execution traces. </title> <editor> In P. Cheeseman and R.W. Oldford, editors, </editor> <booktitle> Selecting Models from Data; Artificial Intelligence and Statistics IV, volume 89 of Lecture Notes in Statistics, chapter 8, </booktitle> <pages> pages 71-78. </pages> <publisher> Springer-Verlag, </publisher> <address> NY,NY, </address> <year> 1994. </year>
Reference-contexts: We wrote several clips to collect traces. Some of the clips we used are shown in figure 1 and figure 2. We analyzed the data with a variety of methods, from simple eyeballing through dependency detection <ref> [3] </ref>, and determined that, in effect, UCPOP was searching in circles: trying 5 (defclip gf-unsafe ( f plan) ( :output-file "gf-unsafe.clasp" :trigger-event (UCPOP::handle-unsafe :before) :components (current-plan flaws ) ) (values (gf-refines plan) f )) (1 NIL A 0 ((GETFUELDRUM-FROM-OUTSIDE 5 16 ARM-2 5 0 50 40) (GETFUELDRUM-FROM-OUTSIDE 5 ?POS3 ARM-1 ?BIG3
Reference: [4] <author> David Joslin and Martha Pollack. </author> <title> Least-cost flaw repair: A plan refinement strategy for partial-order planning. </title> <booktitle> In Proceedings of the Twelth National Conference on Artificial Intelligence, </booktitle> <pages> pages 1004-1009, </pages> <address> Seattle, WA, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: In general, UCPOP gives good results on small domains and problems in which subgoals are independent. For problems with interrelated subgoals or those requiring arithmetic, UCPOP often does not find a solution even with very large search limits. The Least Cost Flaw Repair (LCFR) strategy <ref> [4] </ref> improved search control in UCPOP by selecting the flaw with the minimum repair cost. The repair cost of a flaw is defined as the number of plans generated to repair it. Open conditions and threats are treated alike. <p> The total time spent in planning with LCFR can be more than that for UCPOP, even though UCPOP examines far more plans than LCFR. However, LCFR reduces the search space more than other flaw selection strategies [7]. A variant on LCFR, QLCFR <ref> [4] </ref>, assumes the cost of un-repaired flaws to be constant over time; it caches the results of estimating flaw repair costs and uses the cached cost as the estimate in subsequent flaw selection. QLCFR reduced the overhead of LCFR, but at a cost of solving fewer problems.
Reference: [5] <author> Subbarao Kambhampati and James A. Hendler. </author> <title> A validation-structure-based theory of plan modification and reuse. </title> <journal> Artificial Intelligence Journal, </journal> <pages> 55(2-3), </pages> <year> 1992. </year>
Reference-contexts: This sense of reuse is much more limited and local than what is typically meant by plan reuse (e.g., <ref> [5] </ref>); it is constrained to reusing the occasional step within a plan being developed. Consider a plan P with a set of flaws F . F can be grouped into a set of templates T = fT 1 ; T 2 ; : : : T m g.
Reference: [6] <author> J. Scott Penberthy and Daniel S. Weld. UCPOP: </author> <title> a sound, complete, partial order planner for adl. </title> <booktitle> In Proceedings of the Third International Conference on Knowledge Representation and Reasoning, </booktitle> <pages> pages 103-114, </pages> <year> 1992. </year>
Reference-contexts: As a consequence, we focused on the search strategies employed for these phases of plan generation. We used UCPOP because it is an easily available, domain independent partial order planner <ref> [6] </ref>. UCPOP plans by iteratively selecting and repairing flaws in the current plan. A flaw is repaired by adding steps and constraints to the plan. The search control strategy decides which partial plan to select for expansion. <p> When special variables are bound to particular unique values, marking threats as bogus when they are due to different instances of the same special variable operator does not affect correctness. The correctness and completeness of UCPOP has already been proven <ref> [6] </ref>, so we will show that all these cases are reducible to UCPOP. If UCPOP cannot find a solution (e.g., if enough unique values do not exist), then neither can our modification. 5.4.1 Proof To give a complete proof we need certain definitions.
Reference: [7] <author> Mark A. Peot and David E. Smith. </author> <title> Threat-removal strategies for partial-order planning. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 492-499, </pages> <year> 1993. </year>
Reference-contexts: The main drawback of LCFR is the overhead incurred for flaw selection. The total time spent in planning with LCFR can be more than that for UCPOP, even though UCPOP examines far more plans than LCFR. However, LCFR reduces the search space more than other flaw selection strategies <ref> [7] </ref>. A variant on LCFR, QLCFR [4], assumes the cost of un-repaired flaws to be constant over time; it caches the results of estimating flaw repair costs and uses the cached cost as the estimate in subsequent flaw selection.
Reference: [8] <author> A. Tate, B.Drabble, and J.Dalton. </author> <title> The use of condition types to restrict search in an ai planner. </title> <booktitle> In Proceedings of the Twelth National Conference on Artificial Intelligence, </booktitle> <pages> pages 1129-1134, </pages> <address> Seattle, WA, </address> <year> 1994. </year> <month> 20 </month>
Reference-contexts: A simple constraint is that multiple inclusions of the same operator within a single plan should be instantiated to different objects within the environment. This hard constraint is a simple form of the resource reasoning included in more sophisticated planning systems <ref> [8] </ref>. We developed this approach to address problems discovered when analyzing the behavior of UCPOP in Truckworld [2] (a simulator of trucks moving cargo between different destinations). UCPOP fails (i.e., could not find a plan even given a large search space) on apparently simple conjunctive subgoal problems in Truckworld. <p> In case no special variable is involved the new plans are added to plan-list. Otherwise, only one plan is added to plan-list and the rest to more-plan. Plan language constructs for restricting search space are available in some hierarchical planners. For example, O-Plan2 <ref> [8] </ref> uses condition types, which allow the domain writer to restrict selection of actions as well as to bind variables. The `only use for query' condition type of O-Plan2 resembles the Bang scheme, but differs in the situations for which it is the best approach.
References-found: 8

