URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1995/1995-31.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Phone: Tel. 31 30 531454  
Title: Scheduling UET, UCT dags with release dates and deadlines  
Author: Jacques Verriet 
Address: Padualaan 14, P.O. Box 80.089, 3508 TB Utrecht, The Netherlands,  
Affiliation: Utrecht University Department of Computer Science  
Date: September 1995  
Pubnum: UU-CS-1995-31  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> H.H. Ali and H. El-Rewini. </author> <title> The time complexity of scheduling interval orders with communication is polynomial. </title> <journal> Parallel Processing Letters, </journal> <volume> 3(1) </volume> <pages> 53-58, </pages> <year> 1993. </year> <month> 25 </month>
Reference-contexts: The objective of these problems is finding a shortest schedule for special classes of graphs on two processors or on an unrestrictively large number of processors such that the communication delays do not exceed the execution time of a task <ref> [11, 14, 1] </ref>. In this report another constraint is added to the scheduling problem. Every task has to be executed in a non-uniform time interval: each task must be executed after a given release date and must be completed before a given deadline.
Reference: [2] <author> P. Brucker, M.R. Garey, and D.S. Johnson. </author> <title> Scheduling equal-length tasks under treelike precedence constraints to minimize maximum lateness. </title> <journal> Mathematics of Operations Research, </journal> <volume> 2(3) </volume> <pages> 275-284, </pages> <month> August </month> <year> 1977. </year>
Reference-contexts: Such a schedule has the least urgent parent property. Each valid schedule for F with the least urgent parent property is a valid schedule for F 0 . So if a 0-optimal schedule for F exists, a 0-optimal schedule for F 0 exists. Brucker, et al <ref> [2] </ref> have presented an algorithm for scheduling delay-free inforests. This algorithm finds 0-optimal schedules, if such schedules exist. This algorithm is described below. First every deadline is modified. This is done the way it was described for inforests with communication delays.
Reference: [3] <author> P. Chretienne and C. Picouleau. </author> <title> Scheduling with communication delays: a survey. </title> <booktitle> In Proc. Summer School on Scheduling Theory and its Applications, </booktitle> <address> Bonas, France, </address> <year> 1992. </year> <note> To appear. </note>
Reference-contexts: Chretienne and Picouleau <ref> [3] </ref> have defined series-parallel graphs as follows. Series-parallel graphs have a single source and a single sink, and a recursive structure. The graph consisting of a single node is the smallest series-parallel graph, this single node is both its source and its sink.
Reference: [4] <author> E.G. Coffman, Jr. and R.L. Graham. </author> <title> Optimal scheduling for two-processor systems. </title> <journal> Acta Informatica, </journal> <volume> 1 </volume> <pages> 200-213, </pages> <year> 1972. </year>
Reference-contexts: Many of these subproblems have been shown to be NP-complete [15]. Only for very restricted problems efficient algorithms are known: the execution lengths of all tasks are equal, the communication delays for information exchange are neglected, the number of processors is two <ref> [4] </ref>, or special classes of precedence graphs are considered [9, 13, 16]. In parallel architectures large delays occur before the result of the execution of a task on one processor can be used by a task on another processor.
Reference: [5] <author> D. Coppersmith and S. Winograd. </author> <title> Matrix multiplication via algorithmic progressions. </title> <booktitle> In Proceedings of the 19th Annual Symposium on the Theory of Computation, </booktitle> <pages> pages 1-6, </pages> <year> 1987. </year>
Reference-contexts: Therefore the deadline modification takes O (e) time. If however G is not a transitive closure, the transitive closure of G has to be computed first. It takes O (n ff ) time to build the transitive closure of G for some ff. Coppersmith and Winograd <ref> [5] </ref> have bounded ff by 2:376. Goralckova and Koubek [8] have shown that the transitive closure of G can be computed in O (n + e + ne ) time, where e is the number of edges in the transitive reduct of G. Clearly e e.
Reference: [6] <author> M.R. Garey and D.S. Johnson. </author> <title> Scheduling tasks with nonuniform deadlines on two processors. </title> <journal> Journal of the ACM, </journal> <volume> 23(6) </volume> <pages> 461-467, </pages> <month> July </month> <year> 1976. </year>
Reference-contexts: R (u) and (S 0 ; : : : ; S t1 ; S t [ fug; S t+1 ; : : : ; S l1 ) is a partial schedule of G on m processors. 2 Scheduling outforests on two processors Two algorithms were presented by Garey and Johnson <ref> [6, 7] </ref> for scheduling arbitrary graphs without communication delays on two processors: one for scheduling graphs to meet deadlines and the other for scheduling with release dates and deadlines. <p> In this section two algorithms will be presented for scheduling on two processors with unit communication times. 2.1 Scheduling with deadlines A scheduling algorithm will be presented that finds optimal schedules on two processors for out-forests. The algorithm is similar to the algorithm by Garey and Johnson <ref> [6] </ref> for scheduling graphs with deadlines on two processors without communication delays. The algorithm consists of two steps. First the deadlines are modified, such that they are consistent with the precedence constraints. The modified deadlines are used to create a priority list containing all tasks.
Reference: [7] <author> M.R. Garey and D.S. Johnson. </author> <title> Two-processor scheduling with start-times and deadlines. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6(3) </volume> <pages> 416-426, </pages> <month> September </month> <year> 1977. </year>
Reference-contexts: This can be done by completely filling one processor and trans-lating the starting times and finishing times of the tasks scheduled on this processor into release dates and deadlines of the remaining tasks using the precedence constraints <ref> [7] </ref>. Release dates and deadlines can be eliminated by adding extra tasks and simulating the release dates and deadlines of the original tasks by adding precedence constraints between the original and the new tasks. In this report several scheduling algorithms will be presented. <p> R (u) and (S 0 ; : : : ; S t1 ; S t [ fug; S t+1 ; : : : ; S l1 ) is a partial schedule of G on m processors. 2 Scheduling outforests on two processors Two algorithms were presented by Garey and Johnson <ref> [6, 7] </ref> for scheduling arbitrary graphs without communication delays on two processors: one for scheduling graphs to meet deadlines and the other for scheduling with release dates and deadlines. <p> The algorithm presented in this section also consists of two parts. The first part modifies all release dates and deadlines, the second part does the actual scheduling. The algorithm is similar to the algorithm of Garey and Johnson <ref> [7] </ref> for scheduling arbitrary graphs on two processors with release dates and deadlines without communication delays. Because in every valid schedule a task u is scheduled after all its predecessors, the release date of u may exceed the release dates of all its predecessors. <p> However by carefully considering all triples, no triple needs to be considered twice and only O (n 3 ) triples have to be taken into account. The deadline modification algorithm consists of three nested loops. It is similar to the deadline modification algorithm by Garey and Johnson <ref> [7] </ref>. The outer loop selects values of d in decreasing order. For each value of d the middle loop selects nodes u, for which D (u) d, in order of increasing release dates. For fixed u; d the inner loop selects values r in increasing order.
Reference: [8] <author> A. Goralckova and V. </author> <title> Koubek. A reduct-and-closure algorithm for graphs. </title> <editor> In Becvar, editor, </editor> <booktitle> Mathematical Foundations of Computer Science 1979, number 74 in Lecture Notes in Computer Science, </booktitle> <pages> pages 301-307, </pages> <address> Berlin, 1979. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: If however G is not a transitive closure, the transitive closure of G has to be computed first. It takes O (n ff ) time to build the transitive closure of G for some ff. Coppersmith and Winograd [5] have bounded ff by 2:376. Goralckova and Koubek <ref> [8] </ref> have shown that the transitive closure of G can be computed in O (n + e + ne ) time, where e is the number of edges in the transitive reduct of G. Clearly e e. <p> For outforests and series-parallel graphs the deadline modification takes O (n 2 ) time: from the result by Goralckova and Koubek <ref> [8] </ref> mentioned the section 2.1 it follows that it takes O (n 2 ) time to compute the transitive closure of a series-parallel graph, since such a graph has at most 2n 2 edges as is proved in the following lemma. Lemma 3.4. Let G be a series-parallel graph.
Reference: [9] <author> T.C. Hu. </author> <title> Parallel sequencing and assembly line problems. </title> <journal> Operations Research, </journal> <volume> 9(6) </volume> <pages> 841-848, </pages> <year> 1961. </year>
Reference-contexts: Only for very restricted problems efficient algorithms are known: the execution lengths of all tasks are equal, the communication delays for information exchange are neglected, the number of processors is two [4], or special classes of precedence graphs are considered <ref> [9, 13, 16] </ref>. In parallel architectures large delays occur before the result of the execution of a task on one processor can be used by a task on another processor.
Reference: [10] <author> E.L. Lawler. </author> <title> Sequencing problems with series-parallel precedence constraints. </title> <type> Unpublished manuscript, </type> <year> 1978. </year>
Reference-contexts: P AR (G 1 ; : : : ; G k ) is shown in figure 11. G 1 G 2 : : : G k G 1 . . . G k This definition is similar to the definitions of two terminal series-parallel graphs by Lawler <ref> [10] </ref> and edge series-parallel graphs by Valdes, et al [16].
Reference: [11] <author> E.L. Lawler. </author> <title> Scheduling trees on multiprocessors with unit communication delays. </title> <type> Unpublished manuscript, </type> <year> 1993. </year>
Reference-contexts: The objective of these problems is finding a shortest schedule for special classes of graphs on two processors or on an unrestrictively large number of processors such that the communication delays do not exceed the execution time of a task <ref> [11, 14, 1] </ref>. In this report another constraint is added to the scheduling problem. Every task has to be executed in a non-uniform time interval: each task must be executed after a given release date and must be completed before a given deadline. <p> Let F be an inforest with the least urgent parent property. F will be transformed into an inforest to be scheduled without communication delays. This transformation is similar to the transformation for outforests defined by Lawler <ref> [11] </ref>. The transformed inforest will be called a delay-free inforest.
Reference: [12] <author> J.K. Lenstra, M. Veldhorst, and B. Veltman. </author> <title> The complexity of scheduling trees with communication delays. </title> <editor> In T. Lengauer, editor, </editor> <booktitle> Proc. 1st European Symposium on Algorithms, ESA '93, volume 726 of Lecture Notes in Computer Science, </booktitle> <pages> pages 284-294, </pages> <address> Berlin, </address> <year> 1993. </year> <note> Springer-Verlag. To appear in Journal of Algorithms. </note>
Reference-contexts: This algorithm finds a schedule meeting every deadline in polynomial time, if such a schedule exists. Checking whether a schedule on m processors of length at most D exists for an inforest with unit execution times and unit communication delays is shown to be NP-complete by Lenstra, et al <ref> [12] </ref>. Hence minimising the schedule length for inforests with the least urgent parent property instead of inforests with arbitrary deadlines is a subproblem of this problem that is solvable in polynomial time. Some preliminary definitions conclude this section. Let G be a graph.
Reference: [13] <author> C. H. Papadimitriou and M. Yannakakis. </author> <title> Scheduling interval-ordered tasks. </title> <journal> SIAM Journal on Computing, </journal> <volume> 8(3) </volume> <pages> 405-409, </pages> <month> August </month> <year> 1979. </year>
Reference-contexts: Only for very restricted problems efficient algorithms are known: the execution lengths of all tasks are equal, the communication delays for information exchange are neglected, the number of processors is two [4], or special classes of precedence graphs are considered <ref> [9, 13, 16] </ref>. In parallel architectures large delays occur before the result of the execution of a task on one processor can be used by a task on another processor.
Reference: [14] <author> C. Picouleau. </author> <title> New complexity results on the UET-UCT scheduling problem. </title> <booktitle> In Proc. Summer School on Scheduling Theory and its Applications, </booktitle> <pages> pages 487-502, </pages> <address> Bonas, France, </address> <year> 1992. </year> <note> To appear in Discrete Applied Mathematics. </note>
Reference-contexts: The objective of these problems is finding a shortest schedule for special classes of graphs on two processors or on an unrestrictively large number of processors such that the communication delays do not exceed the execution time of a task <ref> [11, 14, 1] </ref>. In this report another constraint is added to the scheduling problem. Every task has to be executed in a non-uniform time interval: each task must be executed after a given release date and must be completed before a given deadline.
Reference: [15] <author> J.D. Ullman. </author> <title> NP-complete scheduling problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 10 </volume> <pages> 384-393, </pages> <year> 1975. </year>
Reference-contexts: The objective of most of the examined subproblems is finding the shortest schedule of a precedence graph on a set of fully connected processors. Many of these subproblems have been shown to be NP-complete <ref> [15] </ref>. Only for very restricted problems efficient algorithms are known: the execution lengths of all tasks are equal, the communication delays for information exchange are neglected, the number of processors is two [4], or special classes of precedence graphs are considered [9, 13, 16].
Reference: [16] <author> J. Valdes, R.E. Tarjan, and E.L. Lawler. </author> <title> The recognition of series parallel digraphs. </title> <journal> SIAM Journal on Computing, </journal> <volume> 11(2) </volume> <pages> 298-313, </pages> <month> May </month> <year> 1982. </year> <month> 26 </month>
Reference-contexts: Only for very restricted problems efficient algorithms are known: the execution lengths of all tasks are equal, the communication delays for information exchange are neglected, the number of processors is two [4], or special classes of precedence graphs are considered <ref> [9, 13, 16] </ref>. In parallel architectures large delays occur before the result of the execution of a task on one processor can be used by a task on another processor. <p> G 1 G 2 : : : G k G 1 . . . G k This definition is similar to the definitions of two terminal series-parallel graphs by Lawler [10] and edge series-parallel graphs by Valdes, et al <ref> [16] </ref>. The class of series-parallel graphs, as we will consider them, is almost a subclass of the class of two terminal series-parallel graphs: the graph consisting of a single node is the only series-parallel graph, that is not a two terminal series-parallel graph.
References-found: 16

