URL: http://www.win.tue.nl/cs/fm/Herman.Geuvers/BRABasSNCC.ps.gz
Refering-URL: http://www.win.tue.nl/cs/fm/Herman.Geuvers/
Root-URL: http://www.win.tue.nl
Title: aaaaaaa A short and flexible proof of Strong Normalization for the Calculus of Constructions  
Author: Herman Geuvers 
Address: The Netherlands  
Affiliation: Faculty of Mathematics and Computer Science, Eindhoven University of Technology  
Abstract-found: 0
Intro-found: 1
Reference: [Altenkirch 1993a] <author> Th. Altenkirch, </author> <title> Yet another Strong Normalization proof for the Calculus of Constructions, </title> <institution> Laboratory for Foundations of Computer Science, </institution> <type> Manuscript, </type> <pages> 11 pp. </pages>
Reference: [Altenkirch 1993] <author> Th. Altenkirch, </author> <title> Constructions, Inductive types and Strong Normalization proof, </title> <type> Ph. D. Thesis, </type> <institution> University of Edinburgh, UK. </institution>
Reference-contexts: Some of them are of purely syntactical nature (like the ones in [Coquand 1985], [Geuvers and Nederhof 1991] and in [Coquand and Gallier 1990]), while others give a proof of normalization by describing an appropriate semantics (like [Ong and Ritter 1994] and <ref> [Altenkirch 1993] </ref>, who describe an denotational semantics, but also [Goguen 1994], who describes a typed operational semantics).
Reference: [Barbanera et al. 1995] <author> F. Barbanera, M. Fernandez, J.H. </author> <title> Geuvers, Modularity of Strong Normalization in the lambda-algebraic-cube, </title> <type> manuscript. </type>
Reference-contexts: The usual proof of the Classification Lemma uses the Church-Rosser property, Subject Reduction and Uniqueness of Types. However, for CC and the extensions of CC considered here, a direct proof can be given. (This can be done along the lines of <ref> [Barbanera et al. 1995] </ref>, where a proof of the Classification Lemma is given for the extension of CC with higher order algebtraic rewriting.) Note however that, even if there is no Classification Lemma, the definitions in this paper can still go through (with slightly more technical effort) in case one can
Reference: [Barendregt 1984] <author> H.P. Barendregt, </author> <title> The lambda calculus: its syntax and semantics, revised edition. </title> <booktitle> Studies in Logic and the Foundations of Mathematics, </booktitle> <publisher> North Holland. </publisher>
Reference: [Barendregt 1992] <author> H.P. Barendregt, </author> <title> Typed lambda calculi. </title> <editor> In Abramski et al. (eds.), </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <publisher> Oxford Univ. Press. </publisher>
Reference: [Berardi 1988] <author> S. Berardi, </author> <title> Towards a mathematical analysis of the Coquand-Huet calculus of constructions and the other systems in Barendregt's cube. </title> <institution> Dept. Computer Science, Carnegie-Mellon University and Dipartimento Matematica, Universita di Torino, Italy. </institution>
Reference-contexts: Apart from these, proofs of SN for CC can be found in <ref> [Berardi 1988] </ref>, [Luo 1990] (containing a proof of SN for the `Extended' Calculus of Constructions), [Terlouw 1993] and [Geuvers 1993] (containing a proof of SN for CC with fi and j reduction). Each of these proofs exploits the idea of interpreting types as specific sets of strongly normalizing -terms. <p> One possible approach to coping with type dependency is to look at sets of typed terms instead of untyped terms. This is done, for example, in <ref> [Berardi 1988] </ref> and [Coquand and Gallier 1990]. Another possibility is to reduce the question ? e-mail: herman@win.tue.nl of SN for a system with type dependency to SN for a system without type de-pendency. This is done in [Geuvers and Nederhof 1991]. <p> This again emphasises that the proof of SN for CC is of the same proof-theoretic complexity as the proof of SN for F!. (This has already been shown in <ref> [Berardi 1988] </ref> and [Geuvers and Nederhof 1991].) Furthermore, the proof uses only a minimal part of the meta-theory of CC. This makes it possible to extend the proof of SN for CC to larger systems (with more type constructors).
Reference: [Coquand 1985] <author> Th. Coquand, </author> <title> Une theorie des constructions, </title> <institution> These de troisieme cycle, Universite Paris VII, France. </institution>
Reference-contexts: 1. Introduction In the literature there are several different proofs of Strong Normalization (SN) for the Calculus of Constructions (CC). Some of them are of purely syntactical nature (like the ones in <ref> [Coquand 1985] </ref>, [Geuvers and Nederhof 1991] and in [Coquand and Gallier 1990]), while others give a proof of normalization by describing an appropriate semantics (like [Ong and Ritter 1994] and [Altenkirch 1993], who describe an denotational semantics, but also [Goguen 1994], who describes a typed operational semantics).
Reference: [Coquand 1990] <author> Th. Coquand, </author> <title> Metamathematical investigations of a calculus of constructions. </title> <booktitle> In Logic and Computer Science, </booktitle> <editor> ed. P.G. Odifreddi, </editor> <booktitle> APIC series, </booktitle> <volume> vol. 31, </volume> <publisher> Academic Press, </publisher> <pages> pp 91-122. </pages>
Reference: [Coquand and Gallier 1990] <author> Th. Coquand and J. Gallier, </author> <title> A proof of Strong Normalization for the Theory of Constructions using a Kripke-like interpretation, </title> <booktitle> In the Informal Proceedings of the Workshop on Logical Frameworks, Antibes, </booktitle> <month> May </month> <year> 1990. </year>
Reference-contexts: 1. Introduction In the literature there are several different proofs of Strong Normalization (SN) for the Calculus of Constructions (CC). Some of them are of purely syntactical nature (like the ones in [Coquand 1985], [Geuvers and Nederhof 1991] and in <ref> [Coquand and Gallier 1990] </ref>), while others give a proof of normalization by describing an appropriate semantics (like [Ong and Ritter 1994] and [Altenkirch 1993], who describe an denotational semantics, but also [Goguen 1994], who describes a typed operational semantics). <p> One possible approach to coping with type dependency is to look at sets of typed terms instead of untyped terms. This is done, for example, in [Berardi 1988] and <ref> [Coquand and Gallier 1990] </ref>. Another possibility is to reduce the question ? e-mail: herman@win.tue.nl of SN for a system with type dependency to SN for a system without type de-pendency. This is done in [Geuvers and Nederhof 1991].
Reference: [Coquand and Huet 1988] <author> Th. Coquand and G. Huet, </author> <title> The calculus of constructions, </title> <journal> Information and Computation, </journal> <volume> 76, </volume> <pages> pp 95-120. </pages>
Reference: [Coquand and Mohring 1990] <author> Th. Coquand and Ch. </author> <title> Paulin-Mohring Inductively defined types, </title> <editor> In P. Martin-Lof and G. Mints editors. </editor> <booktitle> COLOG-88 : International conference on computer logic, </booktitle> <publisher> LNCS 417. </publisher>
Reference: [Geuvers and Nederhof 1991] <author> J.H. Geuvers and M.J. Nederhof, </author> <title> A modular proof of strong normalisation for the calculus of constructions. </title> <journal> Journal of Functional Programming, </journal> <volume> vol 1 (2), </volume> <pages> pp 155-189. </pages>
Reference-contexts: 1. Introduction In the literature there are several different proofs of Strong Normalization (SN) for the Calculus of Constructions (CC). Some of them are of purely syntactical nature (like the ones in [Coquand 1985], <ref> [Geuvers and Nederhof 1991] </ref> and in [Coquand and Gallier 1990]), while others give a proof of normalization by describing an appropriate semantics (like [Ong and Ritter 1994] and [Altenkirch 1993], who describe an denotational semantics, but also [Goguen 1994], who describes a typed operational semantics). <p> This is done, for example, in [Berardi 1988] and [Coquand and Gallier 1990]. Another possibility is to reduce the question ? e-mail: herman@win.tue.nl of SN for a system with type dependency to SN for a system without type de-pendency. This is done in <ref> [Geuvers and Nederhof 1991] </ref>. Both approaches lead to rather involved proofs that consist of putting several steps together. Furthermore, these proofs do not easily scale up to extensions of CC with other type constructors. The approach that we use here is based on saturated sets. <p> This again emphasises that the proof of SN for CC is of the same proof-theoretic complexity as the proof of SN for F!. (This has already been shown in [Berardi 1988] and <ref> [Geuvers and Nederhof 1991] </ref>.) Furthermore, the proof uses only a minimal part of the meta-theory of CC. This makes it possible to extend the proof of SN for CC to larger systems (with more type constructors). In Section 4 we show this by proving SN for CC with W -types.
Reference: [Geuvers 1993] <author> J.H. </author> <title> Geuvers, Logics and Type Systems, </title> <type> Ph. D. thesis, </type> <institution> Universiteit Nijmegen, the Netherlands. </institution>
Reference-contexts: Apart from these, proofs of SN for CC can be found in [Berardi 1988], [Luo 1990] (containing a proof of SN for the `Extended' Calculus of Constructions), [Terlouw 1993] and <ref> [Geuvers 1993] </ref> (containing a proof of SN for CC with fi and j reduction). Each of these proofs exploits the idea of interpreting types as specific sets of strongly normalizing -terms. <p> The usefulness of this definition is due to the following lemma. (For a detailed proof see <ref> [Geuvers 1993] </ref>.) 2.5. Lemma (Classification).
Reference: [Geuvers and Werner 1994] <author> H. Geuvers and B. Werner, </author> <title> On the Church-Rosser property for Expressive Type Systems and its Consequences for their Metatheoretic Study, </title> <booktitle> in Proceedings of the Ninth Annual Symposium on Logic in Computer Science, </booktitle> <address> Paris, France, </address> <publisher> IEEE Computer Society, </publisher> <pages> pp 320-329. </pages>
Reference-contexts: For the Calculus of Constructions itself, these properties follow rather easily, but in general this is not the case. Therefore, in <ref> [Geuvers and Werner 1994] </ref>, the notion of soundness of a type system is introduced, stating that if two terms M and N (of the same type in the same context) are convertible, then they are convertible via a path through the well-typed terms.
Reference: [Gallier 1990] <editor> On Girard's "Candidats de Reductibilite". </editor> <booktitle> In Logic and Computer Science, </booktitle> <editor> ed. P.G. Odifreddi, </editor> <booktitle> APIC series, </booktitle> <volume> vol. 31, </volume> <publisher> Academic Press, </publisher> <pages> pp 123-204. </pages>
Reference: [Girard 1972] <author> J.-Y. Girard, </author> <title> Interpretation fonctionelle et elimination des coupures dans l'arithmetique d'ordre superieur. </title> <type> Ph.D. thesis, </type> <institution> Universite Paris VII, France. </institution>
Reference: [Girard et al. 1989] <author> J.-Y. Girard, Y. Lafont and P. Taylor, </author> <title> Proofs and types, Camb. </title> <booktitle> Tracts in Theoretical Computer Science 7, </booktitle> <publisher> Cambridge University Press. </publisher>
Reference: [Goguen 1994] <author> H. Goguen, </author> <title> A Typed Operational Semantics for Type Theory, </title> <type> PhD. thesis, </type> <institution> University of Edinburgh, UK, </institution> <year> 1994. </year>
Reference-contexts: of them are of purely syntactical nature (like the ones in [Coquand 1985], [Geuvers and Nederhof 1991] and in [Coquand and Gallier 1990]), while others give a proof of normalization by describing an appropriate semantics (like [Ong and Ritter 1994] and [Altenkirch 1993], who describe an denotational semantics, but also <ref> [Goguen 1994] </ref>, who describes a typed operational semantics).
Reference: [Luo 1990] <author> Z. Luo, </author> <title> An Extended Calculus of Constructions, </title> <type> Ph. D. Thesis, </type> <institution> University of Edinburgh, UK. </institution>
Reference-contexts: Apart from these, proofs of SN for CC can be found in [Berardi 1988], <ref> [Luo 1990] </ref> (containing a proof of SN for the `Extended' Calculus of Constructions), [Terlouw 1993] and [Geuvers 1993] (containing a proof of SN for CC with fi and j reduction). Each of these proofs exploits the idea of interpreting types as specific sets of strongly normalizing -terms. <p> It seems that, in order to treat this extension, one first has to prove a kind of quasi-normalization theorem (as in <ref> [Luo 1990] </ref>, for the Extended Calculus of Constructions) to have some restriction on the possible form of a kind.
Reference: [Luo 1989] <author> Z. Luo, </author> <title> ECC: An extended Calculus of Constructions. </title> <booktitle> Proc. of the fourth ann. symp. on Logic in Comp. Science, Asilomar, Cal. IEEE, </booktitle> <pages> pp 386-395. </pages>
Reference: [Martin-Lof 1984] <author> P. Martin-Lof, </author> <title> Intuitionistic Type Theory, Studies in Proof theory, </title> <publisher> Bibliopolis, Napoli. </publisher>
Reference-contexts: CC with W -types We now look at the extension of CC with Martin-Lof's W -types, a type constructor for representing types of well-founded trees. (See <ref> [Martin-Lof 1984] </ref> or [Nordstrom et al. 1990] for an extensive treatment of W -types and examples.) We just give the rules for W -types and the proof that the addition of these rules to CC preserves the SN property. 4.7. Definition.
Reference: [Nordstrom et al. 1990] <author> B. Nordstrom, K. Petersson, J.M. Smith, </author> <title> Programming in Martin-Lof's Type Theory. </title> <publisher> Oxford University Press. </publisher>
Reference-contexts: CC with W -types We now look at the extension of CC with Martin-Lof's W -types, a type constructor for representing types of well-founded trees. (See [Martin-Lof 1984] or <ref> [Nordstrom et al. 1990] </ref> for an extensive treatment of W -types and examples.) We just give the rules for W -types and the proof that the addition of these rules to CC preserves the SN property. 4.7. Definition.
Reference: [Ong and Ritter 1994] <author> L. Ong and E. Ritter, </author> <title> A generic Strong Normalization argument: application to the Calculus of Constructions, </title> <institution> University of Cambridge Computer Laboratory, </institution> <type> Manuscript, </type> <pages> 19 pp. </pages>
Reference-contexts: Some of them are of purely syntactical nature (like the ones in [Coquand 1985], [Geuvers and Nederhof 1991] and in [Coquand and Gallier 1990]), while others give a proof of normalization by describing an appropriate semantics (like <ref> [Ong and Ritter 1994] </ref> and [Altenkirch 1993], who describe an denotational semantics, but also [Goguen 1994], who describes a typed operational semantics).
Reference: [Scedrov 1990] <editor> A guide to polymorphic types. </editor> <booktitle> In Logic and Computer Science, </booktitle> <editor> ed. P.G. Odifreddi, </editor> <booktitle> APIC series, </booktitle> <volume> vol. 31, </volume> <publisher> Academic Press, </publisher> <pages> pp 387-420. </pages>
Reference: [Tait 1965] <author> W.W. Tait, </author> <title> Infinitely long terms of transfinite type. In Formal Systems and Recursive Functions, </title> <editor> eds. J.N. Crossley and M.A.E. Dummett, </editor> <publisher> North-Holland. </publisher>
Reference: [Tait 1975] <author> W.W. Tait, </author> <title> A realizability interpretation of the theory of species. </title> <booktitle> In Proceedings of Logic Colloquium, </booktitle> <editor> ed. R. Parikh, </editor> <volume> LNM 453, </volume> <pages> pp 240-251. </pages>
Reference: [Terlouw 1993] <author> J. Terlouw, </author> <title> Strong Normalization in type systems: a model theoretic approach, </title> <editor> In the Dirk van Dalen Festschrift, Eds. H. Barendregt, M. Bezem and J.W. </editor> <title> Klop, </title> <institution> Department of Philosophy, Utrecht University, </institution> <address> the Netherlands, </address> <month> pp 161-190. </month> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: Apart from these, proofs of SN for CC can be found in [Berardi 1988], [Luo 1990] (containing a proof of SN for the `Extended' Calculus of Constructions), <ref> [Terlouw 1993] </ref> and [Geuvers 1993] (containing a proof of SN for CC with fi and j reduction). Each of these proofs exploits the idea of interpreting types as specific sets of strongly normalizing -terms.
References-found: 27

