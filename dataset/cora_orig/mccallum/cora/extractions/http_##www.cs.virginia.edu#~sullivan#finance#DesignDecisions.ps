URL: http://www.cs.virginia.edu/~sullivan/finance/DesignDecisions.ps
Refering-URL: http://www.cs.virginia.edu/~sullivan/finance/finance.html
Root-URL: http://www.cs.virginia.edu
Email: sullivan@cs.virginia.edu  chal@cs.cmu.edu  sjha@cs.cmu.edu  
Phone: Tel. (804) 982-2206  
Title: Software Design Decisions as Real Options  
Author: KEVIN SULLIVAN PRASAD CHALASANI SOMESH JHA 
Date: June 3, 1997; Revised June 24, 1997  
Web: http://www.cs.virginia.edu/~sullivan  http://www.c3.lanl.gov/~chal  http://www.cs.cmu.edu/~sjha  
Address: Virginia  
Affiliation: University of  Los Alamos National Laboratory and Carnegie Mellon University  Carnegie Mellon University  
Abstract: University of Virginia Department of Computer Science Technical Report 97-14 Submitted to IEEE Transactions on Software Engineering Abstract Despite their status as foundational concepts in software engineering, many software design decision-making principles and heuristics, such as information hiding and the delaying of design decisions, are still idiosyncratic, ad hoc, poorly integrated and not clearly based on any sound theory. In this paper, we develop an economics-based approach to providing a firmer foundation for software design decision-making heuristics. We start with the premise is that many software design decisions are essentially about when if ever to make irreversible but delayable investments of valuable resources in software assets of uncertain value. This formulation reveals an analogy between software design decisions and real options, which are capital investment analogs of financial call options, for which there is a well-developed theory and body of knowledge. In particular, the theory of real options captures precisely the idea that there can be significant value in having flexibility to wait for better information before committing valuable resources to develop or obtain assets. The options-theoretic nature of many software design decisions allows us to bring option theory to bear on an analysis and refinement of critical, widely employed software design decision-making heuristics. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. R. Basili and A. J. Turner. </author> <title> Iterative enhancement: A practical technique for software development. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-1(4):390396, </volume> <month> Dec. </month> <year> 1975. </year>
Reference-contexts: program families [25] (delay making design decisions that distinguish sub-families); spiral software development processes [4] (attack the greatest risks first); delaying decisions [16, 36] (each design decision locks in upstream decisions and constrains downstream decisions); prototyping [4] (spend a little early to determine the best course of action); iterative enhancement <ref> [1] </ref> (develop a flexible, operational system early then add capabilities incrementally); and reuse [19] (spend extra to design assets so that you can amortize their costs over multiple uses).
Reference: [2] <author> F. Black and M. Scholes. </author> <title> The pricing of options and corporate liabilities. </title> <journal> J. Political Economy, </journal> <volume> 81:637654, </volume> <year> 1973. </year>
Reference-contexts: The mathematical foundation for rigorous valuation of flexibility in the form of options was laid by Black and Scholes in 1973 <ref> [2] </ref> and remains useful today for such purposes. To make these points more concrete (but with the arithmetic elided), let us return to our fictional restructuring problem. Consider the following alteration in the situation. Let's assume that the project to develop the new agent technology faces certain technical barriers.
Reference: [3] <author> B. W. </author> <title> Boehm. </title> <journal> Software engineering economics. IEEE Transactions on Software Engineering (SE), </journal> <volume> 10(1), </volume> <month> Jan. </month> <year> 1984. </year> <note> Also published in/as: Prentice-Hall publishers, </note> <year> 1981. </year>
Reference-contexts: One approach to providing a sound basis for decision-making is to appeal to economics, as advocated notably by Boehm <ref> [3] </ref>. Such an approach recognizes that software design decisions concern the expenditure of valuable resources (time, money, memory, etc.) in the face of uncertainty over future payoffs. <p> Section 10 ends with a summary and concluding thoughts. 2 Net Present Value The traditional economic approach to analyzing software engineering decisions focuses on so-called net present value (NPV). The financial aspects of Boehm's seminal article and book on software engineering economics <ref> [3] </ref>, emphasize NPV, for example. Boehm does address uncertainty over the present state of nature using the concept of the expected value of information, but he does not address strategies for responding to uncertainty about the future. <p> As noted by Boehm <ref> [3] </ref>, this kind of rule is often used by software engineers, implicitly or explicitly. But now we ask a different question, and one likely to arise given that so much software engineering activity is in maintaining existing systems rather than designing new ones. <p> Indeed, as we will see, quite the opposite is true. For example, in situations where a small investment today produces information that dispels uncertainty about the actual but unknown state of the present world, it can be optimal to invest resources in prototyping experiments. As Boehm has argued <ref> [3] </ref>, such investments are justified when the information that they reveal is worth more to the decision maker than its costse.g., when a small investment in a prototype averts a costly commitment to an unworkable design. More generally, information has value that can be quantified.
Reference: [4] <author> B. W. Boehm. </author> <title> A spiral model of software development and enhancement. </title> <journal> IEEE Computer, </journal> <volume> 21(5):6173, </volume> <month> May </month> <year> 1988. </year>
Reference-contexts: Key concepts include information hiding [26] (hide design decisions that are likely to change); program families [25] (delay making design decisions that distinguish sub-families); spiral software development processes <ref> [4] </ref> (attack the greatest risks first); delaying decisions [16, 36] (each design decision locks in upstream decisions and constrains downstream decisions); prototyping [4] (spend a little early to determine the best course of action); iterative enhancement [1] (develop a flexible, operational system early then add capabilities incrementally); and reuse [19] (spend <p> Key concepts include information hiding [26] (hide design decisions that are likely to change); program families [25] (delay making design decisions that distinguish sub-families); spiral software development processes <ref> [4] </ref> (attack the greatest risks first); delaying decisions [16, 36] (each design decision locks in upstream decisions and constrains downstream decisions); prototyping [4] (spend a little early to determine the best course of action); iterative enhancement [1] (develop a flexible, operational system early then add capabilities incrementally); and reuse [19] (spend extra to design assets so that you can amortize their costs over multiple uses).
Reference: [5] <author> R. A. Brealey and S. C. Myers. </author> <title> Principles of Corporate Finance. </title> <publisher> McGraw-Hill, </publisher> <address> 5th edition, </address> <year> 1996. </year>
Reference-contexts: Favaro rightfully criticizes analysis techniques that have been used to reason about investments in reuse but that are known to have serious shortcomings in relation to the NPV approach <ref> [5] </ref>. Favaro then settles on NPV as the most appropriate investment analysis technique. Under the traditional NPV approach, you analyze an investment decision by first calculating the present value of the income stream that the investment will generate. <p> The NPV is the first quantity minus the second: the value of the expected income minus the expected outflow. You then employ the traditional NPV rule taught to every business student: invest if and only if the NPV is positive <ref> [5] </ref>. A key idea behind the NPV approach is that benefits received in the future should be discounted according to an assumed interest rate that generally depends on both macroeconomic factors and on the riskiness of the proposed project. <p> Readers interested in a deeper but elementary discussion of the value of expansion flexibility, in the options interpretation of flexibility, and in a worked example are referred to Chapter 21 of Brealey and Meyers, on applications of options pricing theory <ref> [5] </ref>. 31 9.7 On Design as an Anticipatory Activity Let us now reconsider in light of the preceding discussion the old idea that software design is an anticipatory activity.
Reference: [6] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> The Design and Analysis of Computer Algorithms. </title> <address> Cambridge, Mass.: </address> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: This is the viewpoint that we will find most useful in this paper. The value V k can be computed for all k by a simple dynamic programming procedure (see <ref> [6] </ref>) as follows. First observe that V N = (S N L) + . This is clear both from formula (3) and from observing that the since option expires at time N , there is no advantage to waiting.
Reference: [7] <author> J. Cox, S. Ross, and M. Rubinstein. </author> <title> Option pricing: A simplified approach. </title> <institution> J. Financial Economics, 7:229264, </institution> <year> 1979. </year>
Reference-contexts: The field accounts for the overall trend; the Brownian motion for a superimposed uncertainty. This continuous-time process can be approximated in a rigorous sense by a discrete-time process called the binomial model <ref> [7] </ref>, defined as follows. The stock price process can be visualized in terms of the binomial tree introduced in the previous section. <p> When parameters p and u are chosen appropriately, it can be shown that the binomial model for the stock price approaches the above continuous-time model as N !1 <ref> [7] </ref>. In order to discount future cash flows to the present time, we will need to assume that money can be borrowed or lent (for example, via a bank or government bond) at a risk-free interest rate of r.
Reference: [8] <author> G. Daily. </author> <title> Beyond puts and calls: Option pricing as a powerful tool in decision-making. </title> <journal> The Actuary, </journal> <volume> 30(3), </volume> <year> 1996. </year>
Reference-contexts: Second, we appeal to an analogy between capital investment decisions and financial call optionsan analogy that has been the focus of important recent research in finance and capital investment <ref> [8, 9, 10, 13, 22, 34] </ref>. Briefly, a call option confers upon its holder the right but not the obligation to purchase assets (such as stocks) at set prices for certain periods of time.
Reference: [9] <author> A. Dixit and R. Pindyck. </author> <title> Investment under uncertainty. </title> <publisher> Princeton Univ. Press, </publisher> <year> 1994. </year>
Reference-contexts: Second, we appeal to an analogy between capital investment decisions and financial call optionsan analogy that has been the focus of important recent research in finance and capital investment <ref> [8, 9, 10, 13, 22, 34] </ref>. Briefly, a call option confers upon its holder the right but not the obligation to purchase assets (such as stocks) at set prices for certain periods of time. <p> Clearly the firm will not invest in the factory if S k &lt; L. On the other hand, should the firm invest simply because S k exceeds L? The traditional NPV rule says yes. However, as argued by Dixit and Pindyck <ref> [9] </ref> and others, this rule is flawed since it treats the decision problem as a now-or-never proposition. That is, if there is no possibility of delaying the decision, then the rule is indeed reasonable.
Reference: [10] <author> A. Dixit and R. Pindyck. </author> <title> The options approach to capital invesment. </title> <booktitle> Harvard Business Review, </booktitle> <pages> pages 105115, </pages> <month> May-June </month> <year> 1995. </year>
Reference-contexts: Second, we appeal to an analogy between capital investment decisions and financial call optionsan analogy that has been the focus of important recent research in finance and capital investment <ref> [8, 9, 10, 13, 22, 34] </ref>. Briefly, a call option confers upon its holder the right but not the obligation to purchase assets (such as stocks) at set prices for certain periods of time.
Reference: [11] <author> J. Favaro. </author> <title> A comparison of approaches to reuse investment analysis. </title> <booktitle> In Proceedings Fourth International Conference on Software Reuse. IEEE, </booktitle> <month> Apr. </month> <year> 1996. </year>
Reference-contexts: More recently Favaro has emphasized the key role that financial analysis can play in software engineeringin the area of software reuse, in particular <ref> [11] </ref>. Favaro rightfully criticizes analysis techniques that have been used to reason about investments in reuse but that are known to have serious shortcomings in relation to the NPV approach [5]. Favaro then settles on NPV as the most appropriate investment analysis technique.
Reference: [12] <author> M. Fayad and M. P. Cline. </author> <title> Aspects of software adaptability. </title> <journal> Communications of the ACM, </journal> <volume> 39(10):5859, </volume> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: Parnas's work on information hiding [26], ease of extension and contraction [27] and families of systems [25] goes to the heart of the matter, albeit without explicit appeal to financial concepts. More recently, Fayad and Cline <ref> [12] </ref>, to cite just one example, emphasize that design flexibility has costs, that flexibility should be designed in in those areas where it makes the most economic sense. They identify design patterns [14] as providing the hinges that are needed for flexibility in particular dimensions.
Reference: [13] <author> J. Flatto. </author> <title> The application of real options to the information technology valuation process: A benchmark study. </title> <type> PhD thesis, </type> <institution> Univ. of New Haven, </institution> <year> 1996. </year>
Reference-contexts: Second, we appeal to an analogy between capital investment decisions and financial call optionsan analogy that has been the focus of important recent research in finance and capital investment <ref> [8, 9, 10, 13, 22, 34] </ref>. Briefly, a call option confers upon its holder the right but not the obligation to purchase assets (such as stocks) at set prices for certain periods of time.
Reference: [14] <author> J. Gamma, Helm and Vlissides. </author> <title> Design Patters: Elements of Reusable Object Oriented Software. </title> <publisher> Addison Wesley, </publisher> <address> NY, </address> <year> 1994. </year>
Reference-contexts: More recently, Fayad and Cline [12], to cite just one example, emphasize that design flexibility has costs, that flexibility should be designed in in those areas where it makes the most economic sense. They identify design patterns <ref> [14] </ref> as providing the hinges that are needed for flexibility in particular dimensions. They even state that such hinges provide opportunities to make future changes that might be necessaryusing a word that clearly reflects a real options mode of thinking.
Reference: [15] <author> W. G. Griswold and D. Notkin. </author> <title> Automated assistance for program restructuring. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 2(3):228269, </volume> <month> jul </month> <year> 1993. </year>
Reference-contexts: A more complete, formal treatment appears in the remaining sections. Let us suppose that an engineer is considering remodularizing a large software system to impose a new information hiding interface (c.f., Griswold <ref> [15] </ref>). Such an interface is intended to hide a design decision, or secret, that is judged likely to change and that other modules needn't know about. <p> The options approach shows that this rule is wrong in general. Options theory also gives us a way to make precise the appealing notion that by reducing costs new technologies, such as restructuring tools <ref> [15] </ref>, can toggle a situation from one in which it is best to delay to one in which immediate investment is optimal. <p> Uncertainty about costs might reflect uncertainty about availability of skilled labor in the future, or about changes in technology, such as the development of automated restructuring tools that could significantly reduce costs <ref> [15] </ref>. To simplify matters, let us assume that the monthly profit B n from restructuring is 1500 at all times n 0 (there is no uncertainty in this regard).
Reference: [16] <author> A. Habermann, L. Flon, and L. Cooprider. </author> <title> Modularization and hierarchy in a family of operating systems. </title> <journal> Comm. of the ACM, </journal> <volume> 19(5):266272, </volume> <month> May </month> <year> 1976. </year>
Reference-contexts: Key concepts include information hiding [26] (hide design decisions that are likely to change); program families [25] (delay making design decisions that distinguish sub-families); spiral software development processes [4] (attack the greatest risks first); delaying decisions <ref> [16, 36] </ref> (each design decision locks in upstream decisions and constrains downstream decisions); prototyping [4] (spend a little early to determine the best course of action); iterative enhancement [1] (develop a flexible, operational system early then add capabilities incrementally); and reuse [19] (spend extra to design assets so that you can <p> Indeed, delaying software design decisions has long been recognized as an important software design strategy <ref> [16] </ref>. The theory of options suggests why this might be so. Unlike a decision to delay investing, a decision to invest is irreversible. Once time, money and materials are invested in such a document, those resources cannot be recovered by reversing the decision to invest.
Reference: [17] <author> F. S. Hillier and G. J. Liebermann. </author> <title> Introduction to Operations Research. </title> <publisher> McGraw Hill, </publisher> <year> 1995. </year>
Reference-contexts: More generally, information has value that can be quantified. This issue is important in decision analysis in systems engineering, and in decision-making with experimentation in particular. See Hillier and Liebermann for an introduction to and references on the topic <ref> [17] </ref>. The options view sheds additional light on the value of information approachand on the valued of phased investments in particular.
Reference: [18] <author> J. Hull. </author> <title> Options, Futures, and Other Derivative Securities. </title> <publisher> Prentice Hall, </publisher> <address> 2nd edition, </address> <year> 1993. </year>
Reference-contexts: We remark that stopping is just a convenient metaphor that could represent any action for which we are studying decision rules. 5 Financial Options We now describe some basic concepts in option theory. For further details we refer the reader to Hull's introductory text <ref> [18] </ref>. For a rigorous treatment, consult Merton's seminal work [23]. The simplest kinds of options are call options.
Reference: [19] <author> C. W. Kreuger. </author> <title> Software reuse. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(2):131183, </volume> <month> June </month> <year> 1992. </year>
Reference-contexts: processes [4] (attack the greatest risks first); delaying decisions [16, 36] (each design decision locks in upstream decisions and constrains downstream decisions); prototyping [4] (spend a little early to determine the best course of action); iterative enhancement [1] (develop a flexible, operational system early then add capabilities incrementally); and reuse <ref> [19] </ref> (spend extra to design assets so that you can amortize their costs over multiple uses). Unfortunately, many such heuristics at the heart of software design doctrine and practice are idiosyncratic, poorly integrated, not clearly based on or justified by any sound theory, and, we suspect, suboptimal in many situations.
Reference: [20] <author> P. Maes. </author> <title> Agents that reduce work and information overload. </title> <journal> Comm. of the ACM, </journal> <volume> 37(7), </volume> <month> July </month> <year> 1994. </year>
Reference-contexts: We consider a problem in the domain of software agents on the internet <ref> [20, 24, 33] </ref>. Agents are autonomous software entities that specialize in certain tasks. Several agents are already in place on the World Wide Web.
Reference: [21] <author> G. K. . L. Markosian. </author> <title> Applications of refine language tools to software quality assurance. </title> <booktitle> In The Ninth Knowledge-Based Software Engineering Conference, pages 2023. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year> <month> 36 </month>
Reference-contexts: Finally suppose that today we do not have the ability to restructure our product within three months, owing to lack of experience and the necessary infrastructure to use our restructuring tools effectively. Perhaps we plan to use Refine <ref> [21] </ref> as a tool, which requires a custom front end that does not yet exist, and that will take more than three months to build.
Reference: [22] <author> R. McDonald and D. Siegel. </author> <title> The value of waiting to invest. </title> <journal> Quarterly Journal of Economics, </journal> <volume> 101:707727, </volume> <year> 1986. </year>
Reference-contexts: Second, we appeal to an analogy between capital investment decisions and financial call optionsan analogy that has been the focus of important recent research in finance and capital investment <ref> [8, 9, 10, 13, 22, 34] </ref>. Briefly, a call option confers upon its holder the right but not the obligation to purchase assets (such as stocks) at set prices for certain periods of time.
Reference: [23] <author> R. C. Merton. </author> <title> Continuous-Time Finance. </title> <publisher> Blackwell, </publisher> <year> 1990. </year>
Reference-contexts: For further details we refer the reader to Hull's introductory text [18]. For a rigorous treatment, consult Merton's seminal work <ref> [23] </ref>. The simplest kinds of options are call options.
Reference: [24] <author> W. J. Mitchell. </author> <title> Space, Place and the Infobahn: City of Bits. </title> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: We consider a problem in the domain of software agents on the internet <ref> [20, 24, 33] </ref>. Agents are autonomous software entities that specialize in certain tasks. Several agents are already in place on the World Wide Web.
Reference: [25] <author> D. Parnas. </author> <title> On the design and development of program families. </title> <journal> Transactions on Software Engineering, </journal> <volume> SE-2, </volume> <month> Mar </month> <year> 1976. </year>
Reference-contexts: Because software design problems are complex, software engineers tend to depend heavily on a variety of critical and widely accepted design heuristics. Key concepts include information hiding [26] (hide design decisions that are likely to change); program families <ref> [25] </ref> (delay making design decisions that distinguish sub-families); spiral software development processes [4] (attack the greatest risks first); delaying decisions [16, 36] (each design decision locks in upstream decisions and constrains downstream decisions); prototyping [4] (spend a little early to determine the best course of action); iterative enhancement [1] (develop a <p> We are obviously not the first to notice that flexibility is of the essence in software design, and that flexibility has both costs and benefits. Parnas's work on information hiding [26], ease of extension and contraction [27] and families of systems <ref> [25] </ref> goes to the heart of the matter, albeit without explicit appeal to financial concepts. More recently, Fayad and Cline [12], to cite just one example, emphasize that design flexibility has costs, that flexibility should be designed in in those areas where it makes the most economic sense.
Reference: [26] <author> D. L. Parnas. </author> <title> On the criteria to be used in decomposing systems into modules. </title> <journal> Communications of the Association of Computing Machinery, </journal> <volume> 15(12):10531058, </volume> <month> Dec. </month> <year> 1972. </year>
Reference-contexts: Because software design problems are complex, software engineers tend to depend heavily on a variety of critical and widely accepted design heuristics. Key concepts include information hiding <ref> [26] </ref> (hide design decisions that are likely to change); program families [25] (delay making design decisions that distinguish sub-families); spiral software development processes [4] (attack the greatest risks first); delaying decisions [16, 36] (each design decision locks in upstream decisions and constrains downstream decisions); prototyping [4] (spend a little early to <p> Consider in particular the information hiding criterion for designing the modular structure of software. The idea is, again, to invest in modules that hide aspects of a system that are viewed as likely to change independently <ref> [26, 28] </ref>. The costs of a modularization decision includes the cost of designing, implementing, validating, verifying and documenting an interface; the lost opportunity to use the secret of a module directly; and the downstream cost of program restructuring if the future turns out to be other than as anticipated. <p> We are obviously not the first to notice that flexibility is of the essence in software design, and that flexibility has both costs and benefits. Parnas's work on information hiding <ref> [26] </ref>, ease of extension and contraction [27] and families of systems [25] goes to the heart of the matter, albeit without explicit appeal to financial concepts.
Reference: [27] <author> D. L. Parnas. </author> <title> Designing software for ease of extension and contraction. </title> <booktitle> In Proceedings of the Third International Conference on Software Engineering, </booktitle> <pages> pages 264277. </pages> <publisher> IEEE, </publisher> <year> 1978. </year>
Reference-contexts: We are obviously not the first to notice that flexibility is of the essence in software design, and that flexibility has both costs and benefits. Parnas's work on information hiding [26], ease of extension and contraction <ref> [27] </ref> and families of systems [25] goes to the heart of the matter, albeit without explicit appeal to financial concepts.
Reference: [28] <author> D. L. Parnas, P. C. Clements, and D. M. Weiss. </author> <title> The modular structure of complex systems. </title> <booktitle> In Proceedings of the 7 th International Conference on Software Engineering, </booktitle> <pages> pages 408419. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> Mar. </month> <year> 1984. </year> <note> This paper was cited as the best/most influential paper by the program committee for ICSE 17 in 1994. </note>
Reference-contexts: Consider in particular the information hiding criterion for designing the modular structure of software. The idea is, again, to invest in modules that hide aspects of a system that are viewed as likely to change independently <ref> [26, 28] </ref>. The costs of a modularization decision includes the cost of designing, implementing, validating, verifying and documenting an interface; the lost opportunity to use the secret of a module directly; and the downstream cost of program restructuring if the future turns out to be other than as anticipated.
Reference: [29] <author> E. Rechtin and M. W. Maier. </author> <title> The Art of Systems Architecting. </title> <publisher> CRC Press, </publisher> <address> Boca Raton, Florida, </address> <year> 1997. </year>
Reference-contexts: 1 Introduction In design situations of significant complexity, the utility of precise numerical and analytical approaches can break down, leaving engineers largely dependent on heuristic guidelines <ref> [29] </ref>. 1 Heuristics are essential intellectual tools of the system architect. One problem with heuristics, however, is that it's hard to evaluate their validity owing to the informality with which they are stated. Heuristics such as Simplify, simplify, simplify, might require little validation.
Reference: [30] <author> M. Shaw and D. Garlan. </author> <title> Software Architecture: Perspectives on an Emerging Discipline. </title> <publisher> Prentice-Hall, </publisher> <year> 1996. </year>
Reference-contexts: For example, the general area of software architecture focuses intensely on the question of the ways in which a system should be designed so as to accommodate likely change at an acceptable cost <ref> [30] </ref>. Consider in particular the information hiding criterion for designing the modular structure of software. The idea is, again, to invest in modules that hide aspects of a system that are viewed as likely to change independently [26, 28].
Reference: [31] <author> Sick. </author> <title> Real options. </title> <booktitle> In Handbook of Finance. </booktitle> <address> Elsevier/North-Holland, </address> <year> 1995. </year>
Reference-contexts: To make the analogy explicit, such investment opportunities are called real options. A real option can be seen as an opportunity to in a real, rather than a financial, asset, and as the flexibility that a manager has to delay deciding whether or not to invest <ref> [31] </ref>. Thus a company's capital investment problem can be viewed as one of obtaining and optimally exercising real options.
Reference: [32] <author> K. Sullivan. </author> <title> Software design: the options approach. </title> <booktitle> In Proc. Software Architectures Workshop, </booktitle> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: To the best of our knowledge, we are the first to connect real options to the problem of software design decision-making. One of the authors presented an earlier paper outlining the 3 basic idea at the 1996 Second International Software Architecture Workshop <ref> [32] </ref>. Our work also appears to be distinguished in two additional ways. First, we emphasize mathematical rigor in developing our arguments. <p> However, to the best of our knowledge, we were the first to identify real options explicitly as a rigorous theoretical foundation for a wide variety of important software design concepts <ref> [32] </ref>. Shortly after our early paper, Withey published a report [35] in which he presents what is essentially a real-options approach to analyzing investments in reusable assets for software product lines. By contrast to our work, his is not meant to present the underlying mathematics rigorously.
Reference: [33] <author> K. Sycara, K. Decker, A. Pannu, and M. Williamson. </author> <title> Distributed intelligent agents. </title> <type> Technical report, </type> <institution> Carnegie Mellon University, </institution> <year> 1996. </year>
Reference-contexts: We consider a problem in the domain of software agents on the internet <ref> [20, 24, 33] </ref>. Agents are autonomous software entities that specialize in certain tasks. Several agents are already in place on the World Wide Web.
Reference: [34] <author> L. Trigeorgis. </author> <title> Real Options. </title> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: Second, we appeal to an analogy between capital investment decisions and financial call optionsan analogy that has been the focus of important recent research in finance and capital investment <ref> [8, 9, 10, 13, 22, 34] </ref>. Briefly, a call option confers upon its holder the right but not the obligation to purchase assets (such as stocks) at set prices for certain periods of time.
Reference: [35] <author> J. Withey. </author> <title> Investment analysis of software assets for product lines. </title> <type> Technical Report CMU/SEI-96-TR-010, </type> <institution> Carnegie Mellon University/Software Engineering Institute, </institution> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: However, to the best of our knowledge, we were the first to identify real options explicitly as a rigorous theoretical foundation for a wide variety of important software design concepts [32]. Shortly after our early paper, Withey published a report <ref> [35] </ref> in which he presents what is essentially a real-options approach to analyzing investments in reusable assets for software product lines. By contrast to our work, his is not meant to present the underlying mathematics rigorously. Also, Withey seeks analysis techniques intended to evaluate specific reuse projects.
Reference: [36] <author> W. Wulf. </author> <title> Personal Communication with Kevin Sullivan. </title> <type> 37 </type>
Reference-contexts: Key concepts include information hiding [26] (hide design decisions that are likely to change); program families [25] (delay making design decisions that distinguish sub-families); spiral software development processes [4] (attack the greatest risks first); delaying decisions <ref> [16, 36] </ref> (each design decision locks in upstream decisions and constrains downstream decisions); prototyping [4] (spend a little early to determine the best course of action); iterative enhancement [1] (develop a flexible, operational system early then add capabilities incrementally); and reuse [19] (spend extra to design assets so that you can
References-found: 36

