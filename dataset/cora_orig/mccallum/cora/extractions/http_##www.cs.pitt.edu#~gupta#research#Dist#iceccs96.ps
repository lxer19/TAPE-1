URL: http://www.cs.pitt.edu/~gupta/research/Dist/iceccs96.ps
Refering-URL: http://www.cs.pitt.edu/~gupta/research/dist.html
Root-URL: 
Email: wuw@cs.pitt.edu  mspezial@starbase.cs.trincoll.edu  gupta@cs.pitt.edu  
Title: Designing a Non-intrusive Monitoring Tool for Developing Complex Distributed Applications  
Author: Wanqing Wu Madalene Spezialetti Rajiv Gupta 
Address: Pittsburgh Pittsburgh, PA 15260  Hartford, CT 06106  Pittsburgh Pittsburgh, PA 15260  
Affiliation: Department of Computer Science University of  Computer Science Department Trinity College  Department of Computer Science University of  
Abstract: The development of a distributed application that exhibits both desired functionality as well as performance is a complex task. Therefore the construction of monitoring tools to assist in the development of complex distributed applications is of great practical significance. Monitoring tools can be used to observe the behavior and fine tune the performance of an application. One of the fundamental problems that must be addressed in order to construct an effective monitoring tool is to ensure that the tool is able to report the true behavior of an application, that is, it is able to monitor the application non-intrusively. In order to do so we must avoid the affects of monitoring on the outcomes of non-deterministic aspects of a computation, including non-determinism introduced explicitly by the application programmer and non-determinism in the scheduling of application processes. We present protocols that enable the preservation of the overall program behavior. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Cristain. </author> <title> Probabilistic internal clock synchronization. </title> <booktitle> 13th IEEE Symp. on Reliable Distributed Systems, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: Since a global clock is not available in a distributed system, we maintain synchronized clocks and minimize intrusion through these clocks <ref> [1] </ref>. 3.2 The Critical Point Protocol In order to ensure proper execution of a running process at some site S past a critical point, it is essential to ensure that all messages are present at S which would have been present during an unmonitored execution.
Reference: [2] <author> J. A. Gannon, K. J. Williams, M. S. Andersland, T. L. Casa-vant, and J. E. Lummp. </author> <title> Trace recovery in multi-processing systems: Architectural considerations. </title> <booktitle> International Conference on Parallel Processing, </booktitle> <volume> Vol. II:99102, </volume> <month> August </month> <year> 1994. </year>
Reference-contexts: The impact of these changes can be particularly significant for certain kinds of behavior such as the fairness and load balancing capabilities of a scheduling algorithm. An approach for analyzing program behavior by post-processing of execution traces to compensate for the intrusive effects of monitoring <ref> [5, 2] </ref> has been commonly used. While this approach suffices if the user is interested in collecting performance data for any particular execution of the program, it is not suitable for studying behavioral characteristics that capture the likelihoods of various legal executions of a non-deterministic application.
Reference: [3] <author> R. Gupta and M. Spezialetti. </author> <title> Dynamic techniques for minimizing the intrusive affects of monitoring actions. </title> <booktitle> IEEE-CS 15th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 368376, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: While this approach suffices if the user is interested in collecting performance data for any particular execution of the program, it is not suitable for studying behavioral characteristics that capture the likelihoods of various legal executions of a non-deterministic application. In previous work <ref> [3, 8] </ref> we developed a general approach for on-line intrusion removal to address the limitations of the trace-based approach. <p> In previous work [3, 8] we developed a general approach for on-line intrusion removal to address the limitations of the trace-based approach. The technique presented in <ref> [3] </ref> addresses the avoidance of intrusion in the non-deterministic actions programmed in an application by the user while the technique described in [8] considers the avoidance of intrusion on the behavior of the scheduler used at each site in a distributed system.
Reference: [4] <author> C. A. R. Hoare. </author> <title> Communicating sequential processes. </title> <journal> Comm. of the ACM, </journal> <volume> 21(8):666677, </volume> <year> 1978. </year>
Reference-contexts: The processes communicate via non-blocking sends and blocking receives. We assume that the user can program non-determinism into an application by allowing a process to non-deterministically select a message from one of several senders during the execution of a receive <ref> [4] </ref>. We assume that the round robin scheduler maintains separate queues for ready and blocked processes and assigns a running process a fixed time quantum for execution. At the end of the time quantum the process is moved to the end of the ready queue.
Reference: [5] <author> A. Malony and D. Reed. </author> <title> Models for performance perturbation analysis. </title> <booktitle> ACM/ONR Workshop on Parallel and Distributed Debugging, </booktitle> <pages> pages 1525, </pages> <year> 1991. </year>
Reference-contexts: The impact of these changes can be particularly significant for certain kinds of behavior such as the fairness and load balancing capabilities of a scheduling algorithm. An approach for analyzing program behavior by post-processing of execution traces to compensate for the intrusive effects of monitoring <ref> [5, 2] </ref> has been commonly used. While this approach suffices if the user is interested in collecting performance data for any particular execution of the program, it is not suitable for studying behavioral characteristics that capture the likelihoods of various legal executions of a non-deterministic application.
Reference: [6] <author> M. Spezialetti and R. Gupta. </author> <title> Perturbation analysis: A static analysis approach for the non-intrusive monitoring of parallel programs. </title> <booktitle> Int'l Conf. on Parallel Processing, </booktitle> <volume> Vol. II:8188, </volume> <month> August </month> <year> 1994. </year>
Reference: [7] <author> W. Wu, M. Spezialetti, and R. Gupta. </author> <title> Guaranteed intrusion removal from monitored distributed applications. </title> <booktitle> Eighth IEEE Symp. on Parallel and Distributed Processing, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: The techniques presented are general and applicable to other types of scheduling paradigms. In <ref> [7] </ref> their applicability to priority-based preemptive scheduling is demonstrated.
Reference: [8] <author> W. Wu, M. Spezialetti, and R. Gupta. </author> <title> On-line avoidance of the intrusive affects of monitoring on runtime scheduling decisions. </title> <booktitle> IEEE-CS 16th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 216223, </pages> <month> May </month> <year> 1996. </year> <month> 8 </month>
Reference-contexts: While this approach suffices if the user is interested in collecting performance data for any particular execution of the program, it is not suitable for studying behavioral characteristics that capture the likelihoods of various legal executions of a non-deterministic application. In previous work <ref> [3, 8] </ref> we developed a general approach for on-line intrusion removal to address the limitations of the trace-based approach. <p> In previous work [3, 8] we developed a general approach for on-line intrusion removal to address the limitations of the trace-based approach. The technique presented in [3] addresses the avoidance of intrusion in the non-deterministic actions programmed in an application by the user while the technique described in <ref> [8] </ref> considers the avoidance of intrusion on the behavior of the scheduler used at each site in a distributed system. In the above works an upper bound on monitoring delays is assumed at each site. If this bound is ever exceeded by the application, the intrusion removal algorithm fails.
References-found: 8

