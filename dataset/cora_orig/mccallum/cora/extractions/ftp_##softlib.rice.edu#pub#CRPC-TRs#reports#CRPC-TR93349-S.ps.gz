URL: ftp://softlib.rice.edu/pub/CRPC-TRs/reports/CRPC-TR93349-S.ps.gz
Refering-URL: http://www.crpc.rice.edu/CRPC/softlib/TRs_online.html
Root-URL: 
Title: Automatic Data Layout Using 0-1 Integer Programming  
Author: Robert Bixby Ken Kennedy Ulrich Kremer* 
Address: P.O. Box 1892 Houston, TX 77251-1892  
Affiliation: Rice University  
Note: Center for Research on Parallel Computation  Corresponding Author;  
Pubnum: CRPC-TR93349-S  
Email: e-mail: kremer@cs.rice.edu  
Date: November, 1993  
Abstract-found: 0
Intro-found: 1
Reference: [ABCC93] <author> D. Applegate, R. Bixby, V. Chvatal, and W. Cook. </author> <title> The traveling salesman problem. </title> <note> 1993. In preparation. </note>
Reference-contexts: an integer programming success story exploiting all of the above advances is the recent work of Applegate, Bixby, Cook and Chvatal in which a 4461 city traveling salesman problem was solved to exact optimality using a complex branch-and-cut code running on a network of up to 60 loosely connected workstations <ref> [ABCC93] </ref>. 2 Framework for Automatic Data Layout This section is an overview of our proposed framework for automatic data layout for regular problems. Regular problems allow the compilation system to determine the communication requirements and to perform a variety of program optimizations at compile time.
Reference: [AL93] <author> J. Anderson and M. Lam. </author> <title> Global optimizations for parallelism and locality on scalable parallel machines. </title> <booktitle> In Proceedings of the SIGPLAN '93 Conference on Program Language Design and Implementation, </booktitle> <address> Albuquerque, NM, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: However, many researchers have recognized the need for dynamic remapping and are planning to develop solutions. Knobe, Lukas, and Dally [KLD92], and Chatterjee, Gilbert, Schreiber, and Teng [CGST93] address the problem of dynamic alignment in a framework particularly suitable for SIMD machines. More recently, Anderson and Lam <ref> [AL93] </ref> have proposed techniques for automatic data layout for distributed and shared address space machines. Their approach considers dynamic remapping. In contrast to most of the published work, our framework for automatic data layout is designed to work in the context of a programming assistance tool, not inside a compiler.
Reference: [BFKK91] <author> V. Balasundaram, G. Fox, K. Kennedy, and U. Kremer. </author> <title> A static performance estimator to guide data partitioning decisions. </title> <booktitle> In Proceedings of the Third ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <address> Williamsburg, VA, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: The selection process is based on static performance estimates of the candidate data layouts and of data remappings between layouts. A static performance estimator suitable for automatic data layout has been discussed elsewhere <ref> [BFKK91] </ref>. The selection process must consider the tradeoff between the exploitable parallelism of data layouts for each phase and the remapping costs of data layouts between phases. This last step solves the so-called inter-phase data layout problem. The inter-phase data layout problem is proven to be NP-complete [Kre93].
Reference: [Bix92] <author> R. Bixby. </author> <title> Implementing the Simplex method: The initial basis. </title> <journal> ORSA Journal on Computing, </journal> <volume> 4(3), </volume> <year> 1992. </year>
Reference-contexts: Nodes and edges are associated with costs (not shown here). into a 0-1 integer programming problem suitable to be solved by CPLEX 1 , a linear integer programming tool partly developed by Robert Bixby at Rice University <ref> [Bix92] </ref>. We give experimental results for different 0-1 integer programming formulations for an 800 line ADI integration code. 3 Simple Example The following example illustrates the framework for automatic data layout.
Reference: [Bix93] <author> R. Bixby. </author> <title> Progress in linear programming. </title> <type> Technical Report TR93-40, </type> <institution> Dept. of Computational and Applied Mathematics, Rice University, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: The basic technique for solving integer programs is to apply intelligent branch-and-bound using linear programming at the nodes. Important improvements have come in three areas. First, linear programming codes are on average approximately two orders of magnitude faster than they were 5 years ago, particularly for larger problems <ref> [Bix93] </ref>. Combined with the improvements in computing speed over that same period these codes represent an approximate four orders of magnitude improvement in our ability to solve linear programming problems. The second major development is in so-called cutting-plane technology.
Reference: [CGST93] <author> S. Chatterjee, J.R. Gilbert, R. Schreiber, and S-H. Teng. </author> <title> Automatic array alignment in data-parallel programs. </title> <booktitle> In Proceedings of the Twentieth Annual ACM Symposium on the Principles of Programming Languages, </booktitle> <address> Albuquerque, NM, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: Our work is one of the first to provide a framework for automatic data layout that considers dynamic remapping. However, many researchers have recognized the need for dynamic remapping and are planning to develop solutions. Knobe, Lukas, and Dally [KLD92], and Chatterjee, Gilbert, Schreiber, and Teng <ref> [CGST93] </ref> address the problem of dynamic alignment in a framework particularly suitable for SIMD machines. More recently, Anderson and Lam [AL93] have proposed techniques for automatic data layout for distributed and shared address space machines. Their approach considers dynamic remapping.
Reference: [CHZ91] <author> B. Chapman, H. Herbeck, and H. Zima. </author> <title> Automatic support for data distribution. </title> <booktitle> In Proceedings of the 6th Distributed Memory Computing Conference, </booktitle> <address> Portland, OR, </address> <month> April </month> <year> 1991. </year>
Reference: [CLR90] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press, </publisher> <year> 1990. </year> <month> 13 </month>
Reference-contexts: This last step solves the so-called inter-phase data layout problem. The inter-phase data layout problem is proven to be NP-complete [Kre93]. The proof is based on a reduction from the 3-CNF satisfiability problem (3-SAT) <ref> [CLR90] </ref>. In this paper, we focus on methods to compute the optimal solution of the inter-phase data layout problem. An instance of the inter-phase data layout problem is translated 3 phase. In the data layout graph, nodes represent candidate layouts and edges represent possible remappings.
Reference: [DFJ54] <author> G. B. Dantzig, D. R. Fulkerson, and S. M. Johnson. </author> <title> Solution of a large scale traveling salesman problem. </title> <journal> Operations Research, </journal> <volume> 7 </volume> <pages> 58-66, </pages> <year> 1954. </year>
Reference-contexts: Combined with the improvements in computing speed over that same period these codes represent an approximate four orders of magnitude improvement in our ability to solve linear programming problems. The second major development is in so-called cutting-plane technology. Motivated by work of Dantzig, Johnson and Fulkerson in the 50's <ref> [DFJ54] </ref>, Padberg, Groetschel and others have shown how cutting-plane techniques could be used to strengthen the linear programming relaxations of many pure 0-1 integer programming problems [GH91, PR91, HP92]. The strengthening is effected by studying the facets of the underlying polytope generated by the convex hull of 0-1 solutions.
Reference: [DHR93] <author> Anne Dierstein, Roman Hayer, and Thomas Rauber. </author> <title> Automatic parallelization for distributed memory multiprocessors. </title> <editor> In Christoph W. Kessler, editor, </editor> <title> Automatic Parallelization | New Approaches to Code Generation, Data Distribution, </title> <booktitle> and Performance Prediction, </booktitle> <pages> pages 192-217. </pages> <booktitle> Vieweg Advanced Studies in Computer Science, </booktitle> <publisher> Verlag Vieweg, Wiesbaden, </publisher> <address> Germany, </address> <year> 1993. </year>
Reference: [FHK + 90] <author> G. Fox, S. Hiranandani, K. Kennedy, C. Koelbel, U. Kremer, C. Tseng, and M. Wu. </author> <title> Fortran D language specification. </title> <type> Technical Report TR90-141, </type> <institution> Dept. of Computer Science, Rice University, </institution> <month> December </month> <year> 1990. </year>
Reference-contexts: For example, it is almost essential to consider the program as a whole rather than a series of independent subroutines. Of particular importance and complexity is the problem of determining when dynamic data redistribution will enhance overall performance. Fortunately, the designers of languages like HPF and Fortran D <ref> [FHK + 90] </ref>, by requiring that data layout specifications be provided by the programmer have opened the door for powerful new tools which can use intensive computation to determine a first approximation to a good data layout automatically.
Reference: [GH91] <author> M. Grotschel and O. Holland. </author> <title> Solution of large-scale symmetric traveling salesman problems. </title> <journal> Mathematical Programming, </journal> <volume> 51 </volume> <pages> 141-202, </pages> <year> 1991. </year>
Reference-contexts: The second major development is in so-called cutting-plane technology. Motivated by work of Dantzig, Johnson and Fulkerson in the 50's [DFJ54], Padberg, Groetschel and others have shown how cutting-plane techniques could be used to strengthen the linear programming relaxations of many pure 0-1 integer programming problems <ref> [GH91, PR91, HP92] </ref>. The strengthening is effected by studying the facets of the underlying polytope generated by the convex hull of 0-1 solutions. Knowledge of these facets leads to subroutines for recognizing inequalities violated by the current fractional solution.
Reference: [Gup92] <author> M. Gupta. </author> <title> Automatic Data Partitioning on Distributed Memory Multicomputers. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> September </month> <year> 1992. </year>
Reference: [HA90] <author> D. Hudak and S. Abraham. </author> <title> Compiler techniques for data partitioning of sequentially iterated parallel loops. </title> <booktitle> In Proceedings of the 1990 ACM International Conference on Supercomputing, </booktitle> <address> Amsterdam, The Netherlands, </address> <month> June </month> <year> 1990. </year>
Reference: [Hig93] <author> High Performance Fortran Forum. </author> <title> High Performance Fortran language specification, version 1.0. </title> <type> Technical Report CRPC-TR92225, </type> <institution> Center for Research on Parallel Computation, Rice University, Houston, TX, </institution> <month> May </month> <year> 1993. </year> <note> To appear in Scientific Programming, vol. 2, no. 1. </note>
Reference-contexts: 1 Introduction The advent of languages like High Performance Fortran <ref> [Hig93] </ref>, in which the programmer specifies parallelism implicitly by specifying the layout of an applications data across the processor array, has focused renewed attention on the problem of choosing a good data layout for parallel execution.
Reference: [HP92] <author> K. L. Hoffman and M. Padberg. </author> <title> Solving airline crew-scheduling problems by branch-and-cut. 1992. </title> <type> preprint. </type>
Reference-contexts: The second major development is in so-called cutting-plane technology. Motivated by work of Dantzig, Johnson and Fulkerson in the 50's [DFJ54], Padberg, Groetschel and others have shown how cutting-plane techniques could be used to strengthen the linear programming relaxations of many pure 0-1 integer programming problems <ref> [GH91, PR91, HP92] </ref>. The strengthening is effected by studying the facets of the underlying polytope generated by the convex hull of 0-1 solutions. Knowledge of these facets leads to subroutines for recognizing inequalities violated by the current fractional solution.
Reference: [KD93] <author> K. Knobe and W. Dally. </author> <title> Subspace optimizations. </title> <editor> In Christoph W. Kessler, editor, </editor> <title> Automatic Parallelization | New Approaches to Code Generation, Data Distribution, </title> <booktitle> and Performance Prediction, </booktitle> <pages> pages 153-176. </pages> <booktitle> Vieweg Advanced Studies in Computer Science, </booktitle> <publisher> Verlag Vieweg, Wiesbaden, </publisher> <address> Germany, </address> <year> 1993. </year>
Reference: [Ke93] <author> Christoph W. Keler. </author> <title> Knowledge-based automatic parallelization by pattern recognition. </title> <editor> In Christoph W. Kessler, editor, </editor> <title> Automatic Parallelization | New Approaches to Code Generation, Data Distribution, </title> <booktitle> and Performance Prediction, </booktitle> <pages> pages 110-135. </pages> <booktitle> Vieweg Advanced Studies in Computer Science, </booktitle> <publisher> Verlag Vieweg, Wiesbaden, </publisher> <address> Germany, </address> <year> 1993. </year>
Reference: [KK93] <author> K. Kennedy and U. Kremer. </author> <title> Initial framework for automatic data layout in Fortran D: A short update on a case study. </title> <type> Technical Report CRPC-TR93-324-S, </type> <institution> Center for Research on Parallel Computation, Rice University, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: Then, distribution analysis uses the alignment search spaces to build candidate data layout search spaces of reasonable alignments and distributions for each phase. A preliminary discussion of possible pruning heuristics and the sizes of their resulting search spaces can be found in <ref> [KK93] </ref>. Finally, a single candidate data layout scheme for each phase is selected, resulting in a data layout for the entire program. The selection process is based on static performance estimates of the candidate data layouts and of data remappings between layouts.
Reference: [KLD92] <author> K. Knobe, J.D. Lukas, and W.J. Dally. </author> <title> Dynamic alignment on distributed memory systems. </title> <booktitle> In Proceedings of the Third Workshop on Compilers for Parallel Computers, </booktitle> <address> Vienna, Austria, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: Our work is one of the first to provide a framework for automatic data layout that considers dynamic remapping. However, many researchers have recognized the need for dynamic remapping and are planning to develop solutions. Knobe, Lukas, and Dally <ref> [KLD92] </ref>, and Chatterjee, Gilbert, Schreiber, and Teng [CGST93] address the problem of dynamic alignment in a framework particularly suitable for SIMD machines. More recently, Anderson and Lam [AL93] have proposed techniques for automatic data layout for distributed and shared address space machines. Their approach considers dynamic remapping.
Reference: [KLS90] <author> K. Knobe, J. Lukas, and G. Steele, Jr. </author> <title> Data optimization: Allocation of arrays to reduce communication on SIMD machines. </title> <journal> Journal of Parallel and Distributed 14 Computing, </journal> <volume> 8(2) </volume> <pages> 102-118, </pages> <month> February </month> <year> 1990. </year>
Reference: [KMCKC93] <author> U. Kremer, J. Mellor-Crummey, K. Kennedy, and A. Carle. </author> <title> Automatic data layout for distributed-memory machines in the D programming environment. </title> <editor> In Christoph W. Kessler, editor, </editor> <title> Automatic Parallelization | New Approaches to Code Generation, Data Distribution, </title> <booktitle> and Performance Prediction, </booktitle> <pages> pages 136-152. </pages> <booktitle> Vieweg Advanced Studies in Computer Science, </booktitle> <publisher> Verlag Vieweg, Wiesbaden, </publisher> <address> Germany, </address> <year> 1993. </year> <note> Also available as technical report CRPC-TR93-298-S, </note> <institution> Rice University. </institution>
Reference-contexts: Phases are intended to represent program segments that perform operations on entire data objects. Data remapping is allowed only between phases. An operational definition of a phase is given elsewhere <ref> [KMCKC93] </ref>. Strategies for identifying program phases are a topic of current research. A data layout for a single phase is specified by the alignment and distribution of the arrays referenced in the phase.
Reference: [Kre93] <author> U. Kremer. </author> <title> NP-completeness of dynamic remapping. </title> <booktitle> In Proceedings of the Fourth Workshop on Compilers for Parallel Computers, </booktitle> <address> Delft, The Netherlands, </address> <month> December </month> <year> 1993. </year> <note> Also available as technical report CRPC-TR93-330-S (D Newsletter #8), </note> <institution> Rice University. </institution>
Reference-contexts: The selection process must consider the tradeoff between the exploitable parallelism of data layouts for each phase and the remapping costs of data layouts between phases. This last step solves the so-called inter-phase data layout problem. The inter-phase data layout problem is proven to be NP-complete <ref> [Kre93] </ref>. The proof is based on a reduction from the 3-CNF satisfiability problem (3-SAT) [CLR90]. In this paper, we focus on methods to compute the optimal solution of the inter-phase data layout problem. An instance of the inter-phase data layout problem is translated 3 phase. <p> Note that this implies not associating any cost with an initial data layout. Definition 2 results in an optimization problem. As mentioned above, the problem of determining a solution s ddl of an inter-phase data layout problem is NP-complete <ref> [Kre93] </ref>. 5.2 0-1 Integer Programming Problem This section describes the translation of an instance of the inter-phase data layout problem as defined in Definition 2 into an instance of a 0-1 integer programming problem with linear constraints, or 0-1 problem for short.
Reference: [LC91] <author> J. Li and M. Chen. </author> <title> The data alignment phase in compiling programs for distributed-memory machines. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 13(4) </volume> <pages> 213-221, </pages> <month> August </month> <year> 1991. </year>
Reference: [PM93] <author> Michael Philippsen and Markus U. Mock. </author> <title> Data and process alignment in modula-2*. </title> <editor> In Christoph W. Kessler, editor, </editor> <title> Automatic Parallelization | New Approaches to Code Generation, Data Distribution, </title> <booktitle> and Performance Prediction, </booktitle> <pages> pages 177-191. </pages> <booktitle> Vieweg Advanced Studies in Computer Science, </booktitle> <publisher> Verlag Vieweg, Wiesbaden, </publisher> <address> Germany, </address> <year> 1993. </year>
Reference: [PR91] <author> M. Padberg and G. Rinaldi. </author> <title> A branch-and-cut algorithm for the resolution of large-scale symmetric traveling salesman problems. </title> <journal> SIAM Review, </journal> <volume> 33 </volume> <pages> 60-100, </pages> <year> 1991. </year>
Reference-contexts: The second major development is in so-called cutting-plane technology. Motivated by work of Dantzig, Johnson and Fulkerson in the 50's [DFJ54], Padberg, Groetschel and others have shown how cutting-plane techniques could be used to strengthen the linear programming relaxations of many pure 0-1 integer programming problems <ref> [GH91, PR91, HP92] </ref>. The strengthening is effected by studying the facets of the underlying polytope generated by the convex hull of 0-1 solutions. Knowledge of these facets leads to subroutines for recognizing inequalities violated by the current fractional solution.
Reference: [RS89] <author> J. Ramanujam and P. Sadayappan. </author> <title> A methodology for parallelizing programs for mul-ticomputers and complex memory multiprocessors. </title> <booktitle> In Proceedings of Supercomputing '89, </booktitle> <address> Reno, NV, </address> <month> November </month> <year> 1989. </year>
Reference: [SS90] <author> L. Snyder and D. Socha. </author> <title> An algorithm producing balanced partitionings of data arrays. </title> <booktitle> In Proceedings of the 5th Distributed Memory Computing Conference, </booktitle> <address> Charleston, SC, </address> <month> April </month> <year> 1990. </year>
Reference: [Sus91] <author> A. Sussman. </author> <title> Model-Driven Mapping onto Distributed Memory Parallel Computers. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> September </month> <year> 1991. </year>
Reference: [Tse93] <author> C. Tseng. </author> <title> An Optimizing Fortran D Compiler for MIMD Distributed-Memory Machines. </title> <type> PhD thesis, </type> <institution> Rice University, Houston, TX, </institution> <month> January </month> <year> 1993. </year> <institution> Rice COMP TR93-199. </institution>
Reference-contexts: The corresponding data layout graphs 10 with different weights were generated by hand. Weights were chosen to model different com-munication costs and the presence or absence of compiler optimizations. For instance, a compiler may be able to generate a coarse-grain pipelined loop if the data layout induces cross-processor dependences <ref> [Tse93] </ref>. Whether the compiler performs such an optimization or not is represented by different node weights. We wrote a tool that generates the four distinct 0-1 problem formulations (see Section 5.2) for each input, weighted data layout graph.
Reference: [Who91] <author> S. Wholey. </author> <title> Automatic Data Mapping for Distributed-Memory Parallel Computers. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> May </month> <year> 1991. </year> <month> 15 </month>
References-found: 31

