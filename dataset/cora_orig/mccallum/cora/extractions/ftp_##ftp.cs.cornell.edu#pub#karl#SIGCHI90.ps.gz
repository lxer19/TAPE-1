URL: ftp://ftp.cs.cornell.edu/pub/karl/SIGCHI90.ps.gz
Refering-URL: http://www.cs.cornell.edu/Info/People/karl/publications.html
Root-URL: 
Title: USING CONSTRAINTS TO ACHIEVE STABILITY IN AUTOMATIC GRAPH LAYOUT ALGORITHMS  
Author: Karl-Friedrich Bohringer Frances Newbery Paulisch 
Keyword: Graphical user interfaces, graph layout algorithms, layout constraints.  
Address: Seattle, WA,  D-7500 Karlsruhe 1 West Germany  Hall,  Ithaca, NY 14853,  
Affiliation: Computing Systems,  Institute for Informatics University of Karlsruhe  Dept. of Computer Science, 4107 Upson  Cornell University,  
Note: Proc. of ACM SIGCHI Conf. on Human Factors in  Current address:  
Email: newbery@ira.uka.de  karl@cs.cornell.edu  
Phone: +49-721-6084068,  
Date: April 1990.  
Abstract: Automatic layout algorithms are commonly used when displaying graphs on the screen because they provide a "nice" drawing of the graph without user intervention. There are, however, a couple of disadvantages to automatic layout. Without user intervention, an automatic layout algorithm is only capable of producing an aesthetically pleasing drawing of the graph. User- or application-specified layout constraints (often concerning the semantics of a graph) are difficult or impossible to specify. A second problem is that automatic layout algorithms seldom make use of information in the current layout when calculating the new layout. This can also be frustrating to the user because whenever a new layout is done, the user's orientation in the graph is lost. This paper suggests using layout constraints to solve both of these problems. We show how user-specified layout constraints may be easily added to many automatic graph layout algorithms. Additionally, the constraints specified by the current layout are used when calculating the new layout to achieve a more stable layout. This approach allows a continuum between manual and automatic layout by allowing the user to specify how stable the graph's layout should be. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. F. Allen. </author> <title> Maintaining knowledge about tem-poral intervals. </title> <journal> Communications of the ACM, </journal> <volume> 26 </volume> <pages> 832-843, </pages> <year> 1983. </year>
Reference-contexts: On the other hand, principle 1 makes implementation much simpler (two- or three-dimensional constraints are no more difficult than one-dimensional constraints). Principle 2 is crucial for an efficient evaluation of the constraints. The evaluation of sets of linear equations is an common problem, for instance in temporal data bases <ref> [1, 10] </ref>. In conclusion of this section we define a low level (one- dimensional) constraint as a linear equation of two variables.
Reference: [2] <author> C. Batini, E. Nardelli, and R. Tamassia. </author> <title> A layout algorithm for data flow diagrams. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(4):538546, </volume> <month> April </month> <year> 1986. </year>
Reference-contexts: 1 INTRODUCTION Graphs, consisting of a set of nodes and a set of edges, are one of the most fundamental ways of representing relationships among objects. Programs that display a set of relationships as a graph <ref> [12, 11, 14, 2, 4] </ref> have become more prevalent in recent years because of two major factors. Firstly, a person is usually able to comprehend information better when it is presented pictorially (for example a graph) rather than in textual form.
Reference: [3] <author> K.-F. Bohringer. </author> <title> Stability in graph layout algo-rithms. </title> <type> Master's thesis, </type> <institution> University of Karlsruhe, Institute for Informatics, </institution> <month> July </month> <year> 1989. </year> <note> In German. </note>
Reference-contexts: One particular layout algorithm is used throughout as an example, but the same approach would work on many other layout algorithms as well. Our solution <ref> [3] </ref> uses layout constraints to achieve both structural and dynamic stability. As can be seen from the overview of our solution (Figure 1), our approach is layered. Constraints for a single dimension are specified at the lowest level. The next higher level manages those constraints.
Reference: [4] <author> E. Gansner, S. C. North, and K. P. Vo. DAG: </author> <title> A program that draws directed graphs. </title> <journal> Software| Practice and Experience, </journal> <volume> 18(11) </volume> <pages> 1047-1062, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: 1 INTRODUCTION Graphs, consisting of a set of nodes and a set of edges, are one of the most fundamental ways of representing relationships among objects. Programs that display a set of relationships as a graph <ref> [12, 11, 14, 2, 4] </ref> have become more prevalent in recent years because of two major factors. Firstly, a person is usually able to comprehend information better when it is presented pictorially (for example a graph) rather than in textual form. <p> There- fore, our system should be adaptable to several different ones. In the following we describe the integration into Sugiyama's layout algorithm [13]. This layout algorithm or some variation thereof is used in several systems that display directed graphs <ref> [12, 6, 4] </ref>.
Reference: [5] <author> A. K. Mackworth. </author> <title> Consistency in networks of relations. </title> <journal> Artificial Intelligence, </journal> <volume> 8 </volume> <pages> 99-118, </pages> <year> 1977. </year>
Reference-contexts: A set of constraints is defined to be con <p>- sistent if none of them are contradictory. The purpose of the evaluation of the constraint network (usually called "constraint propagation" <ref> [7, 5] </ref>) is to compute the global effects of local constraints. For example, from a chain of order relations like A:x &lt; B:x, B:x &lt; C:x, C:x &lt; D:x the relation A:x &lt; D:x should be derived.
Reference: [6] <author> E. B. Messinger. </author> <title> Automatic Layout of Large Directed Graphs. </title> <type> PhD thesis, </type> <institution> University of Washington, Department of Computer Sciences, </institution> <month> July </month> <year> 1989. </year> <note> TR Number 88-07-08. </note>
Reference-contexts: Structural stability is concerned with meeting the user-specified layout constraints. If many user-specified layout constraints are specified and satisfied then the graph will not have much freedom of movement. Dynamic stability is concerned with minimizing the difference between successive layouts of the graph [15]. Messinger <ref> [6] </ref> suggests that the difference be measured as "how many and how far vertices and edges move from their previous locations". Ideally, making a minor change in the graph's structure should cause only a minor change in the layout. <p> There- fore, our system should be adaptable to several different ones. In the following we describe the integration into Sugiyama's layout algorithm [13]. This layout algorithm or some variation thereof is used in several systems that display directed graphs <ref> [12, 6, 4] </ref>.
Reference: [7] <author> U. Montanari. </author> <title> Networks of constraints: Fundamental properties and applications to pic-ture processing. </title> <journal> Information Sciences, </journal> <volume> 7 </volume> <pages> 95-132, </pages> <year> 1974. </year>
Reference-contexts: A set of constraints is defined to be con <p>- sistent if none of them are contradictory. The purpose of the evaluation of the constraint network (usually called "constraint propagation" <ref> [7, 5] </ref>) is to compute the global effects of local constraints. For example, from a chain of order relations like A:x &lt; B:x, B:x &lt; C:x, C:x &lt; D:x the relation A:x &lt; D:x should be derived.
Reference: [8] <author> F. J. Newbery. </author> <title> EDGE: An extendible directed graph editor. </title> <type> Technical Report 8/88, </type> <institution> University of Karlsruhe, Institute for Informatics, </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: Section Three describes how a layout algorithm can be extended with a constraint manager to achieve structural and dynamic stability. Section Four briefly describes how we have integrated this solution into the EDGE graph editor <ref> [8, 16] </ref>. Section Five gives several examples that demonstrate how using layout constraints contribute to layout stability. <p> Thus using this method results in a stable graph layout at roughly the same speed as a completely new layout, producing a trade-off between Sugiyama's aesthetics and dynamic stability. 4 INTEGRATION WITH GRAPH EDITOR The EDGE graph editor <ref> [8, 16] </ref>, which offers a choice of several layout algorithms for displaying and editing graphs, was extended to include the modified Sugiyama algorithm and the associated constraint manager.
Reference: [9] <author> F. J. Newbery. </author> <title> An interface description language for graph editors. </title> <booktitle> In Proc. of the IEEE 1988 Workshop on Visual Languages, </booktitle> <address> Pittsburgh, PA, </address> <month> October </month> <year> 1988. </year>
Reference-contexts: The appropriate command is then sent to the 3-D constraint manager which responds accordingly. 4.2 Input/Output Interface The default input/output format is a high-level textual description of the format and appearance of the nodes and edges in the graph called GRL (Graph Representation Language) <ref> [9] </ref>. The portion of the GRL describing the constraints and their attributes is delimited by keywords and each constraint is a set of attribute:value pairs.
Reference: [10] <author> F. Puppe. </author> <title> Introduction to Expert Systems. </title> <publisher> Springer Verlag, </publisher> <year> 1988. </year> <note> In German. </note>
Reference-contexts: On the other hand, principle 1 makes implementation much simpler (two- or three-dimensional constraints are no more difficult than one-dimensional constraints). Principle 2 is crucial for an efficient evaluation of the constraints. The evaluation of sets of linear equations is an common problem, for instance in temporal data bases <ref> [1, 10] </ref>. In conclusion of this section we define a low level (one- dimensional) constraint as a linear equation of two variables.
Reference: [11] <author> G. Robins. </author> <title> The ISI grapher: a portable tool for displaying graphs pictorially. Computers in Symbolic Graphs and Communications (see. </title> <editor> Sven Moer), </editor> <address> Helsinki, Finland, </address> <month> August 17-18 </month> <year> 1987. </year> <note> Symboliikka '87. </note> <institution> Information Sciences Institute, Marina Del Rey, </institution> <address> CA. </address>
Reference-contexts: 1 INTRODUCTION Graphs, consisting of a set of nodes and a set of edges, are one of the most fundamental ways of representing relationships among objects. Programs that display a set of relationships as a graph <ref> [12, 11, 14, 2, 4] </ref> have become more prevalent in recent years because of two major factors. Firstly, a person is usually able to comprehend information better when it is presented pictorially (for example a graph) rather than in textual form.
Reference: [12] <author> L. A. Rowe, M. Davis, E. Messinger, C. Meyer, C. Spirakis, and A. Tuan. </author> <title> A browser for di-rected graphs. </title> <journal> Software|Practice and Experience, </journal> <volume> 17(1) </volume> <pages> 61-76, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: 1 INTRODUCTION Graphs, consisting of a set of nodes and a set of edges, are one of the most fundamental ways of representing relationships among objects. Programs that display a set of relationships as a graph <ref> [12, 11, 14, 2, 4] </ref> have become more prevalent in recent years because of two major factors. Firstly, a person is usually able to comprehend information better when it is presented pictorially (for example a graph) rather than in textual form. <p> There- fore, our system should be adaptable to several different ones. In the following we describe the integration into Sugiyama's layout algorithm [13]. This layout algorithm or some variation thereof is used in several systems that display directed graphs <ref> [12, 6, 4] </ref>.
Reference: [13] <author> K. Sugiyama, S. Tagawa, and M. </author> <title> Toda. Methods for visual understanding of hierarchical sys-tem structures. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> SMC-11(2):109125, </volume> <month> February </month> <year> 1981. </year>
Reference-contexts: As we stated before, the constraints are designed to meet user requests rather than the aesthetic goals of a particular layout algorithm. There- fore, our system should be adaptable to several different ones. In the following we describe the integration into Sugiyama's layout algorithm <ref> [13] </ref>. This layout algorithm or some variation thereof is used in several systems that display directed graphs [12, 6, 4].
Reference: [14] <author> R. Tamassia, C. Batini, and M. Talamo. </author> <title> An algo-rithm for automatic layout of entity relationship diagrams. </title> <editor> In C. Davis, S. Jajodia, P. Ng, and R. Yeh, editors, </editor> <booktitle> Entity-Relationship Approach to Software Engineering, </booktitle> <pages> pages 421-439. </pages> <publisher> NorthHolland Publishing Co, </publisher> <year> 1983. </year>
Reference-contexts: 1 INTRODUCTION Graphs, consisting of a set of nodes and a set of edges, are one of the most fundamental ways of representing relationships among objects. Programs that display a set of relationships as a graph <ref> [12, 11, 14, 2, 4] </ref> have become more prevalent in recent years because of two major factors. Firstly, a person is usually able to comprehend information better when it is presented pictorially (for example a graph) rather than in textual form.
Reference: [15] <author> R. Tamassia, G. D. Battista, and C. Batini. </author> <title> Automatic graph drawing and readability of diagraphs. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> SE-18(1):61-79, </volume> <month> Jan/Feb </month> <year> 1989. </year>
Reference-contexts: Structural stability is concerned with meeting the user-specified layout constraints. If many user-specified layout constraints are specified and satisfied then the graph will not have much freedom of movement. Dynamic stability is concerned with minimizing the difference between successive layouts of the graph <ref> [15] </ref>. Messinger [6] suggests that the difference be measured as "how many and how far vertices and edges move from their previous locations". Ideally, making a minor change in the graph's structure should cause only a minor change in the layout.
Reference: [16] <author> W. F. Tichy and F. J. Newbery. </author> <title> Knowledgebased editors for directed graphs. </title> <editor> In H. K. Nichols and D. Simpson, editors, ESEC'87, </editor> <booktitle> Lecture Notes in Computer Science No. </booktitle> <volume> 289, </volume> <pages> pages 101-109. </pages> <publisher> Springer Verlag, </publisher> <year> 1987. </year> <booktitle> Proc. of the 1st European Software Engineering Conference. </booktitle> <pages> 9 </pages>
Reference-contexts: Section Three describes how a layout algorithm can be extended with a constraint manager to achieve structural and dynamic stability. Section Four briefly describes how we have integrated this solution into the EDGE graph editor <ref> [8, 16] </ref>. Section Five gives several examples that demonstrate how using layout constraints contribute to layout stability. <p> Thus using this method results in a stable graph layout at roughly the same speed as a completely new layout, producing a trade-off between Sugiyama's aesthetics and dynamic stability. 4 INTEGRATION WITH GRAPH EDITOR The EDGE graph editor <ref> [8, 16] </ref>, which offers a choice of several layout algorithms for displaying and editing graphs, was extended to include the modified Sugiyama algorithm and the associated constraint manager.
References-found: 16

