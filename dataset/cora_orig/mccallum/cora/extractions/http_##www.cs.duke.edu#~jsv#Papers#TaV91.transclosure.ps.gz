URL: http://www.cs.duke.edu/~jsv/Papers/TaV91.transclosure.ps.gz
Refering-URL: http://www.cs.duke.edu/~jsv/Papers/catalog/node72.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: PARALLEL TRANSITIVE CLOSURE AND POINT LOCATION IN PLANAR STRUCTURES  
Author: ROBERTO TAMASSIA AND JEFFREY S. VITTER 
Keyword: Key words. parallel algorithms, parallel computation, graph algorithms, planar st-graphs, transitive closure, reachability, planar point location, computational geometry, fractional cascading, graph drawing, visibility  
Note: AMS(MOS) subject classifications. 68E05, 68C05, 68C25  
Abstract: Parallel algorithms for several graph and geometric problems are presented, including transitive closure and topological sorting in planar st-graphs, preprocessing planar subdivisions for point location queries, and construction of visibility representations and drawings of planar graphs. Most of these algorithms achieve optimal O(log n) running time using n= log n processors in the EREW PRAM model, n being the number of vertices. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. N. Afrati, D. Q. Goldin, and P. C. Kanellakis, </author> <title> Efficient parallelism for structured data: directed reachability in S-P DAGS, </title> <type> Tech. Report CS-88-07, </type> <institution> Department of Computer Science, Brown University, Providence, RI, </institution> <year> 1988. </year>
Reference-contexts: Series-parallel graphs are a subclass of planar st-graphs, and thus we get the following corollary, which is an improvement over the O (log 2 n)-time, n-processor CREW PRAM algorithm given by Afrati, Goldin, and Kanellakis <ref> [1] </ref>: Corollary 3.4. Reachability in series-parallel graphs can be computed on an EREW PRAM in O (log n) time with n= log n processors.
Reference: [2] <author> R. J. Anderson and G. L. Miller, </author> <title> Deterministic parallel list ranking, </title> <booktitle> in VLSI Algorithms and Architectures, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 319, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, New York, </address> <year> 1988, </year> <pages> pp. 81-90. </pages>
Reference-contexts: If an edge is the leftmost (rightmost) edge incoming into a vertex, its successor is defined as the leftmost (rightmost) edge outgoing from that vertex. This order relation induces a set of ordered paths, corresponding to the right boundaries (left boundaries) of the faces. By list ranking <ref> [2] </ref>, [8], the edges in the right boundary (left boundary) of each face can simultaneously identify a common vertex in O (log n) time with O (n= log n) processors.
Reference: [3] <author> M. J. Atallah, R. Cole, and M. T. Goodrich, </author> <title> Cascading divide-and-conquer: a technique for designing parallel algorithms, </title> <journal> SIAM J. Comput., </journal> <volume> 18 (1989), </volume> <pages> pp. </pages> <month> 499-532.. </month>
Reference-contexts: Queries in the bridged separator tree can be done in optimal O time using a p-processor CREW PRAM [56]. Nonmonotone subdivisions can be handled by our techniques by first applying a triangulation step, which takes O (log n) time using an n-processor CREW PRAM <ref> [3] </ref>, [60]. Our results improve certain aspects of the previous best results [3], [9], [11], [12]. Atallah, Cole, and Goodrich [3] give an algorithm to construct a suboptimal O (n log n)-space point location data structure in O (log n) time with n processors on a CREW PRAM. <p> Nonmonotone subdivisions can be handled by our techniques by first applying a triangulation step, which takes O (log n) time using an n-processor CREW PRAM <ref> [3] </ref>, [60]. Our results improve certain aspects of the previous best results [3], [9], [11], [12]. Atallah, Cole, and Goodrich [3] give an algorithm to construct a suboptimal O (n log n)-space point location data structure in O (log n) time with n processors on a CREW PRAM. <p> Nonmonotone subdivisions can be handled by our techniques by first applying a triangulation step, which takes O (log n) time using an n-processor CREW PRAM <ref> [3] </ref>, [60]. Our results improve certain aspects of the previous best results [3], [9], [11], [12]. Atallah, Cole, and Goodrich [3] give an algorithm to construct a suboptimal O (n log n)-space point location data structure in O (log n) time with n processors on a CREW PRAM. <p> Hence, we can apply the algorithm of Atallah, Cole, and Goodrich <ref> [3] </ref> for two-set dominance counting and obtain the following theorem. Theorem 3.5. Given a planar st-graph G with n vertices, the number of vertices 7 reachable from each vertex can be computed by an EREW PRAM in O (log n) time using n processors. <p> Establish bridges between the catalogs stored in adjacent nodes of T , according to the fractional cascading scheme of Atallah, Cole, and Goodrich <ref> [3] </ref>. The correctness of the algorithm follows from Lemma 4.4. Step 1 is performed using the techniques developed in the previous section. Step 2 can be easily done in O (log n) time with n= log n processors. <p> Next, from the rank, we access the node using the array constructed in Step 2. Such computation can be performed in O (log n) time with n= log n processors. The parallel fractional cascading technique of Atallah, Cole, and Goodrich <ref> [3] </ref> takes O (log n) time with n= log n processors to complete the construction of the bridged separator tree. <p> For nonmonotone subdivisions we perform a preliminary triangulation step and then apply the technique for monotone subdivisions. Triangulation can be performed by a CREW PRAM in O (log n) time with n processors <ref> [3] </ref>, [60]. We get the following theorem. Theorem 4.9. Let S be a subdivision with n vertices. An O (n)-space data structure supporting O (log n)-time point location queries in S can be constructed by a CREW PRAM in O (log n) time using n processors. <p> It can also be constructed in parallel by an EREW PRAM in O (log n) time and O (n log n) space with n processors <ref> [3] </ref>, or in O (log n) time and O (n) space with n= log n processors [43]. As regards visibility representations, there are sequential O (n)-time algorithms for their construction [13], [42], [52]. Theorem 5.3. Let G be a planar st-graph with n vertices.
Reference: [4] <author> R. Bayer and E. M. McCreight, </author> <title> Organization and maintenance of large ordered indices, </title> <journal> Acta Informatica, </journal> <volume> 1 (1972), </volume> <pages> pp. 173-189. </pages>
Reference-contexts: In array form, the shifts and swaps needed for dynamic maintenance can clearly be done in constant time using n processors. If n * processors are available for updates, where 0 &lt; * &lt; 1, the arrays can be replaced by B-trees <ref> [4] </ref> with nodes of degree fi (n * ) and hence O (1=*) height. This gives us the following result. Theorem 3.7. Let G be a planar st-graph with n vertices.
Reference: [5] <author> B. Chazelle, H. Edelsbrunner, and L. J. Guibas, </author> <title> The complexity of cutting convex poly-topes, </title> <booktitle> in Proc. 19th ACM Symposium on Theory of Computing, </booktitle> <year> 1987, </year> <pages> pp. 66-76. </pages>
Reference-contexts: The contact chain query problem for a convex subdivision and a direction consists of questions of the form: "If region r 0 is pushed in direction , will region r 00 be moved?" <ref> [5] </ref>. Without loss of generality, assume that is the horizontal direction.
Reference: [6] <author> N. Chiba, T. Nishizeki, S. Abe, and T. Ozawa, </author> <title> A linear algorithm for embedding planar graphs using PQ-trees, </title> <journal> J. Comput. System Sci., </journal> <volume> 30 (1985), </volume> <pages> pp. 54-76. </pages>
Reference-contexts: 1. Introduction. Planar st-graphs, which include series-parallel graphs as a special case, were first introduced by Lempel, Even, and Cederbaum [34] in connection with a planarity testing algorithm, and they have subsequently been used in a host of applications, dealing with partial orders [30], planar graph embedding <ref> [6] </ref>, [14], [49], graph planarization [37], graph drawing [13], [15], floor planning [57], planar point location [19], [39], visibility [36], [42], [52], [54], [58], [59], motion planning [41], and VLSI layout compaction [57].
Reference: [7] <author> R. Cole, </author> <title> Parallel merge sort, </title> <booktitle> in Proc. 27th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1986, </year> <pages> pp. 511-516. </pages>
Reference-contexts: If the embedding information is not available, but a planar straight-line drawing is given, the embedding can be determined on an EREW PRAM in O (log d) time with n processors by sorting, where d is the maximum vertex degree <ref> [7] </ref>. This is optimal in the worst case, since sorting can be reduced to computing the embedding. If neither the embedding nor a drawing is given, the embedding can be determined as follows: We first add the directed edge (s; t) to G if it does not already exist. <p> This can be done in O (log n) time using n processors <ref> [7] </ref>. Note that if the embedding of S is not given as part of the input, there is an (n log n) lower bound on the amount of work needed to compute the embedding in the worst case [32].
Reference: [8] <author> R. Cole and U. Vishkin, </author> <title> Approximate and exact parallel scheduling with applications to list, tree, and graph problems, </title> <booktitle> in Proc. 27th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1986, </year> <pages> pp. 478-491. </pages>
Reference-contexts: an embedding of b G on a CRCW PRAM in O (log n) time using the same number of processors needed to determine graph connectivity and to do bucket sorting in O (log n) time [40]; the best known processor bound for this uses n log log n processors deterministically <ref> [8] </ref>, [24]. The resulting embedding is consistent with having any particular edge of b G appear on the external face, so we can assume that the edge (s; t), and thus vertices s and t, are on the external face. <p> If an edge is the leftmost (rightmost) edge incoming into a vertex, its successor is defined as the leftmost (rightmost) edge outgoing from that vertex. This order relation induces a set of ordered paths, corresponding to the right boundaries (left boundaries) of the faces. By list ranking [2], <ref> [8] </ref>, the edges in the right boundary (left boundary) of each face can simultaneously identify a common vertex in O (log n) time with O (n= log n) processors.
Reference: [9] <author> R. Cole and O. Zajicek, </author> <title> An optimal parallel algorithm for building a data structure for point location, </title> <journal> J. Parallel Distributed Comput., </journal> <note> to appear. </note>
Reference-contexts: Nonmonotone subdivisions can be handled by our techniques by first applying a triangulation step, which takes O (log n) time using an n-processor CREW PRAM [3], [60]. Our results improve certain aspects of the previous best results [3], <ref> [9] </ref>, [11], [12]. Atallah, Cole, and Goodrich [3] give an algorithm to construct a suboptimal O (n log n)-space point location data structure in O (log n) time with n processors on a CREW PRAM. <p> A recent result of Cole and Zajicek <ref> [9] </ref> shows that the worst-case time can be reduced to O (log n) with n= log n processors at the expense of large constant factors.
Reference: [10] <author> D. Coppersmith and S. Winograd, </author> <title> Matrix multiplication via arithmetic progression, </title> <booktitle> in Proc. 28th ACM Symposium on Theory of Computing, </booktitle> <year> 1987, </year> <pages> pp. 1-6. </pages>
Reference-contexts: funds from IBM Corporation, and by National Science Foundation research grant DCR-8403613. 1 time on an EREW PRAM and O (log n) time on a CREW PRAM with M (n) pro-cessors [29], where the best known upper bound on M (n) is currently M (n) = O (n 2:376 ) <ref> [10] </ref>. Transitive closure is a fundamental problem, and as a result much attention is given to reducing the required number of processors.
Reference: [11] <author> N. Dadoun and D. G. Kirkpatrick, </author> <title> Parallel processing for efficient subdivision search, </title> <booktitle> in Proc. 3rd ACM Symposium on Computational Geometry, </booktitle> <year> 1987, </year> <pages> pp. </pages> <month> 205-214. </month> <title> [12] , Cooperative subdivision search algorithms with applications, </title> <booktitle> in Proc. 27th Annual Allerton Conference, </booktitle> <address> Monticello, IL, </address> <year> 1989, </year> <pages> pp. 538-547. </pages>
Reference-contexts: Nonmonotone subdivisions can be handled by our techniques by first applying a triangulation step, which takes O (log n) time using an n-processor CREW PRAM [3], [60]. Our results improve certain aspects of the previous best results [3], [9], <ref> [11] </ref>, [12]. Atallah, Cole, and Goodrich [3] give an algorithm to construct a suboptimal O (n log n)-space point location data structure in O (log n) time with n processors on a CREW PRAM. Dadoun and Kirkpatrick [11] show that the O (n)-space hierarchical point location data structure of Kirkpatrick [31] <p> Our results improve certain aspects of the previous best results [3], [9], <ref> [11] </ref>, [12]. Atallah, Cole, and Goodrich [3] give an algorithm to construct a suboptimal O (n log n)-space point location data structure in O (log n) time with n processors on a CREW PRAM. Dadoun and Kirkpatrick [11] show that the O (n)-space hierarchical point location data structure of Kirkpatrick [31] for triangulations can be constructed in O (log n log fl n) worst-case time and O (log n) expected time on a CREW PRAM with n processors.
Reference: [13] <author> G. Di Battista and R. Tamassia, </author> <title> Algorithms for plane representations of acyclic digraphs, </title> <type> Theoret. </type> <institution> Comput. Sci., </institution> <month> 61 </month> <year> (1988), </year> <pages> pp. </pages> <month> 175-198. </month> <title> [14] , Incremental planarity testing, </title> <booktitle> in Proc. 30th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1989, </year> <pages> pp. 436-441. </pages>
Reference-contexts: include series-parallel graphs as a special case, were first introduced by Lempel, Even, and Cederbaum [34] in connection with a planarity testing algorithm, and they have subsequently been used in a host of applications, dealing with partial orders [30], planar graph embedding [6], [14], [49], graph planarization [37], graph drawing <ref> [13] </ref>, [15], floor planning [57], planar point location [19], [39], visibility [36], [42], [52], [54], [58], [59], motion planning [41], and VLSI layout compaction [57]. In this paper, we present a new technique for constructing in parallel an implicit representation of the transitive closure of a planar st-graph. <p> Visibility representations and graph drawing. The concept of visibility plays a fundamental role in a variety of geometric problems and applications, such as art gallery problems [35], VLSI layout [25], [44], [57], motion planning [23], [41], and graph drawing <ref> [13] </ref>, [53]. Definition 5.1. Given a collection H of horizontal segments in the plane, the (vertical) visibility graph of H is the graph G whose vertices are the segments of H and whose edges are pairs of segments that see each other in the vertical direction. <p> As regards visibility representations, there are sequential O (n)-time algorithms for their construction <ref> [13] </ref>, [42], [52]. Theorem 5.3. Let G be a planar st-graph with n vertices. A visibility representation for G with integer coordinates and O (n 2 ) area can be computed by an EREW PRAM in O (log n) time using n= log n processors, which is optimal. Proof. <p> Proof. A visibility representation for G can be constructed by the following variation of previous algorithms <ref> [13] </ref>, [42], [52]. (1) Compute a topological ordering Y (v) of the vertices of G. (2) Compute a topological ordering X (f) of the vertices of G fl , the dual graph of G. (3) Draw each vertex-segment (v) at ordinate Y (v) and between abscissae X (left (v)) and X
Reference: [15] <author> G. Di Battista, R. Tamassia, and I. G. Tollis, </author> <title> Area requirement and symmetry display in drawing graphs, </title> <booktitle> in Proc. 5th ACM Symposium on Computational Geometry, </booktitle> <year> 1989, </year> <pages> pp. 51-60. </pages>
Reference-contexts: series-parallel graphs as a special case, were first introduced by Lempel, Even, and Cederbaum [34] in connection with a planarity testing algorithm, and they have subsequently been used in a host of applications, dealing with partial orders [30], planar graph embedding [6], [14], [49], graph planarization [37], graph drawing [13], <ref> [15] </ref>, floor planning [57], planar point location [19], [39], visibility [36], [42], [52], [54], [58], [59], motion planning [41], and VLSI layout compaction [57]. In this paper, we present a new technique for constructing in parallel an implicit representation of the transitive closure of a planar st-graph. <p> Examples include circuit schematics, algorithm animation, and diagrams for information systems analysis and design. The literature on graph drawing algorithms is spread over the broad spectrum of computer science [17], [50]. This problem has received increasing theoretical interest in recent years (cf. <ref> [15] </ref>, [20], [45]). Definition 5.5. A drawing of a graph maps each vertex into a point of the plane, and each edge (u; v) into a simple open curve between the points associated with the vertices u and v. A planar drawing has no crossing edges. <p> A reduced planar st-graph G admits a planar upward straight-line drawing such that the x- and y-coordinates of a vertex v are the ranks of v in the restriction to the vertices of the left- and right-sequence of G , respectively <ref> [15] </ref>. Hence, a reduced planar st-graph can be efficiently drawn in parallel from the result of Corollary 3.3.
Reference: [16] <author> P. Duchet, Y. Hamidoune, M. L. Vergnas, and H. Meyniel, </author> <title> Representing a planar graph by vertical lines joining different levels, </title> <journal> Discrete Math., </journal> <volume> 46 (1983), </volume> <pages> pp. 319-321. </pages>
Reference-contexts: In x 5, we investigate the problem of constructing visibility representations of 2 planar graphs, where the vertices are represented by horizontal segments and the edges by vertical segments. Such representations find applications in VLSI layout, motion planning, and graph drawing, and their combinatorial properties have been extensively investigated <ref> [16] </ref>, [42], [52], [54], [58], [59]. We give algorithms for constructing visibility representations of planar st-graphs and undirected planar graphs in O (log n) time with n= log n processors. <p> Besides having many applications, visibility graphs and representations are also of intrinsic theoretical interest, and their combinatorial properties have been extensively investigated <ref> [16] </ref>, [52], [54], [58], [59]. The visibility graph of a set of n segments can be computed in O (n log n) sequential time and O (n) space [44], which is optimal.
Reference: [17] <author> P. Eades and R. Tamassia, </author> <title> Algorithms for automatic graph drawing: an annotated bibliography, </title> <type> Tech. Report CS-89-09, </type> <institution> Department of Computer Science, Brown University, Providence, RI, </institution> <year> 1989. </year>
Reference-contexts: A number of data presentation problems involve drawing graphs so that they are easy to read and understand. Examples include circuit schematics, algorithm animation, and diagrams for information systems analysis and design. The literature on graph drawing algorithms is spread over the broad spectrum of computer science <ref> [17] </ref>, [50]. This problem has received increasing theoretical interest in recent years (cf. [15], [20], [45]). Definition 5.5.
Reference: [18] <author> M. Edahiro, I. Kokubo, and T. Asano, </author> <title> A new point-location algorithm and its practical efficiency | comparison with existing algorithms, </title> <journal> ACM Trans. Graphics, </journal> <volume> 3 (1984), </volume> <pages> pp. 86-109. </pages>
Reference-contexts: An empirical analysis of the performance of several point-location data structures shows that the hierarchical point location data structure does not perform well in practice since the constant factors hidden behind the big-oh notation are large, whereas the bridged separator-tree constructed by our algorithm is very efficient <ref> [18] </ref>. In x 5, we investigate the problem of constructing visibility representations of 2 planar graphs, where the vertices are represented by horizontal segments and the edges by vertical segments.
Reference: [19] <author> H. Edelsbrunner, L. J. Guibas, and J. Stolfi, </author> <title> Optimal point location in a monotone subdivision, </title> <journal> SIAM J. Computing, </journal> <volume> 15 (1986), </volume> <pages> pp. 317-340. 18 </pages>
Reference-contexts: first introduced by Lempel, Even, and Cederbaum [34] in connection with a planarity testing algorithm, and they have subsequently been used in a host of applications, dealing with partial orders [30], planar graph embedding [6], [14], [49], graph planarization [37], graph drawing [13], [15], floor planning [57], planar point location <ref> [19] </ref>, [39], visibility [36], [42], [52], [54], [58], [59], motion planning [41], and VLSI layout compaction [57]. In this paper, we present a new technique for constructing in parallel an implicit representation of the transitive closure of a planar st-graph. <p> We show how to preprocess a monotone subdivision in O (log n) time with n= log n processors on an EREW PRAM to obtain an O (n)-space data structure (the bridged separator tree <ref> [19] </ref>, [33]) that supports point location queries in O (log n) time. Our technique can also be extended to construct a fully dynamic data structure for point location. Queries in the bridged separator tree can be done in optimal O time using a p-processor CREW PRAM [56]. <p> The reader is referred to the book of Preparata and Shamos [38] for the geometric terminology used in this section and a description of various point location techniques. Our approach is based on the separator-method for point location <ref> [19] </ref>, [33]. 8 Definition 4.1. A monotone chain is a polygonal chain such that each hori-zontal line intersects it in at most one point. A polygon is monotone if its boundary is partitionable into two monotone chains. <p> proper edges visualized. (b) Separator tree for S. 10 By applying the fractional cascading technique to the catalogs of the separator tree, we obtain a bridged separator tree (also called layered dag ), which still uses O (n) space and supports queries in O (log n) time, which is optimal <ref> [19] </ref>. (Our method in the previous paragraph for determining the branching in "gaps" yields a slight simplification of the algorithm.) Definition 4.3. <p> In Step 3, we use a simple technique for computing in O (1) time the inorder rank of the lowest common ancestor of two leaves of a complete binary tree, given the ranks of such leaves in their left-to-right order <ref> [19] </ref>. Hence, the test lca (left (u; v); right (u; v)) = lca (left (v; w); right (v; w)) can be done in O (1) time using only the indices of the regions to the left and right of (u; v) and (v; w). <p> First, we pick any edge (u; v) of the list and compute in O (1) time the rank of node lca (left (u; v); right (u; v)) in the symmetric order <ref> [19] </ref>. Next, from the rank, we access the node using the array constructed in Step 2. Such computation can be performed in O (log n) time with n= log n processors.
Reference: [20] <author> H. de Fraysseix, J. Pach, and R. Pollack, </author> <title> Small sets supporting fary embeddings of planar graphs, </title> <booktitle> in Proc. 20th ACM Symposium on Theory of Computing, </booktitle> <year> 1988, </year> <pages> pp. 426-433. </pages>
Reference-contexts: Examples include circuit schematics, algorithm animation, and diagrams for information systems analysis and design. The literature on graph drawing algorithms is spread over the broad spectrum of computer science [17], [50]. This problem has received increasing theoretical interest in recent years (cf. [15], <ref> [20] </ref>, [45]). Definition 5.5. A drawing of a graph maps each vertex into a point of the plane, and each edge (u; v) into a simple open curve between the points associated with the vertices u and v. A planar drawing has no crossing edges.
Reference: [21] <author> H. Gazit, </author> <title> Optimal EREW parallel algorithms for connectivity, ear decomposition, and st-numbering of planar graphs, </title> <type> Manuscript, </type> <institution> Department of Computer Science, Duke University, Durham, NC, </institution> <year> 1990. </year>
Reference-contexts: Such an orientation of G can be computed by an EREW PRAM in O (log n) time with n= log n processors using the st-numbering algorithm of Gazit <ref> [21] </ref>. Theorem 5.4. Let G be a 2-connected embedded (undirected) planar graph with 15 Fig. 5. (a) Visibility representation for a planar st-graph G. (b) A planar upward polyline grid drawing of G. (c) A planar orthogonal grid drawing of an undirected graph. 16 n vertices.
Reference: [22] <author> L. J. Guibas and R. Sedgewick, </author> <title> A dichromatic framework for balanced trees, </title> <booktitle> in Proc. 19th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1978, </year> <pages> pp. 8-21. </pages>
Reference-contexts: By Theorem 2.5, we can determine if there is a path from u to v in G by checking whether u is before v in both sequences. Each sequence is stored in the leaves of a balanced red-black tree <ref> [22] </ref>. Dynamic updates require a sequence of splits and splices in the tree. Without loss of generality, let us restrict our attention to computing the left sequence of G. First we construct the dual graph G fl .
Reference: [23] <author> L. J. Guibas and F. F. Yao, </author> <title> On translating a set of rectangles, </title> <booktitle> in Advances in Computing Research, </booktitle> <volume> Vol. 1, </volume> <editor> F. P. Preparata, ed., </editor> <publisher> JAI Press Inc., </publisher> <address> Greenwich, CT, </address> <year> 1983, </year> <pages> pp. 61-77. </pages>
Reference-contexts: Visibility representations and graph drawing. The concept of visibility plays a fundamental role in a variety of geometric problems and applications, such as art gallery problems [35], VLSI layout [25], [44], [57], motion planning <ref> [23] </ref>, [41], and graph drawing [13], [53]. Definition 5.1.
Reference: [24] <author> T. Hagerup, </author> <title> Towards optimal parallel bucket sorting, </title> <type> Tech. Report 02/1987, </type> <institution> Universitat des Saarlandes, Saarbrucken, Germany, </institution> <month> January </month> <year> 1987. </year>
Reference-contexts: embedding of b G on a CRCW PRAM in O (log n) time using the same number of processors needed to determine graph connectivity and to do bucket sorting in O (log n) time [40]; the best known processor bound for this uses n log log n processors deterministically [8], <ref> [24] </ref>. The resulting embedding is consistent with having any particular edge of b G appear on the external face, so we can assume that the edge (s; t), and thus vertices s and t, are on the external face.
Reference: [25] <author> M. Y. Hsueh and D. O. Pederson, </author> <title> Computer-aided layout of LSI circuit building-blocks, </title> <booktitle> in Proc. IEEE Internat. Symposium on Circuits and Systems, </booktitle> <year> 1979, </year> <pages> pp. 474-477. </pages>
Reference-contexts: Visibility representations and graph drawing. The concept of visibility plays a fundamental role in a variety of geometric problems and applications, such as art gallery problems [35], VLSI layout <ref> [25] </ref>, [44], [57], motion planning [23], [41], and graph drawing [13], [53]. Definition 5.1.
Reference: [26] <author> J. Ja'Ja' and J. Simon, </author> <title> Parallel algorithms in graph theory: planarity testing, </title> <journal> SIAM J. Com-put., </journal> <volume> 11 (1982), </volume> <pages> pp. 314-328. </pages>
Reference-contexts: We present algorithms that construct planar drawings with vertices placed at integer coordinates and asymptotically optimal area in O (log n) time with n= log n processors. This improves substantially over the algorithm of Ja'Ja' and Simon <ref> [26] </ref>, which uses M (n) processors to construct in O (log 2 n) time a planar drawing with vertices placed at real coordinates and no known bound on the area. As a final remark, our parallel algorithms appear to be simple to implement and eminently practical. 2. Planar st-graphs. <p> The bound on the number of bends can be improved to the exact worst-case optimal 2n + 4 and the algorithm can be extended to 1-connected graphs [55]. Our results improve upon the previous parallel drawing algorithm presented by Ja'Ja' and Simon <ref> [26] </ref>, which constructs a straight-line planar drawing in O (log 2 n) time with M (n) processors, using real arithmetic for the computation of the coordinates of the vertices.
Reference: [27] <author> T. Kameda, </author> <title> On the vector representation of the reachability in planar directed graphs, </title> <journal> Inform. Process. Lett., </journal> <volume> 3 (1975), </volume> <pages> pp. 75-77. </pages>
Reference-contexts: This left sequence is also pictured as a path in Fig. 2 (c). The formal underpinning of the orders &lt; L and &lt; R can be found in the theory of planar lattices <ref> [27] </ref>, [30].
Reference: [28] <author> M. -Y. Kao and P. N. Klein, </author> <title> Towards overcoming the transitive-closure bottleneck: efficient parallel algorithms for planar digraphs, </title> <booktitle> in Proc. 22nd ACM Symposium on Theory of Computing, </booktitle> <year> 1990, </year> <pages> pp. 181-192. </pages>
Reference-contexts: Using a different data structure, updates take O (1) time with n processors and queries take O (1) time with one processor. Since the publication of the conference version of this paper, Kao and Klein <ref> [28] </ref> have developed a transitive closure algorithm for general planar graphs that runs in O (log 3 n) time using n processors on a CRCW PRAM. Section 4 considers the classical problem of point location in a planar subdivision, a fundamental searching primitive for a variety of geometric algorithms.
Reference: [29] <author> R. M. Karp and V. Ramachandran, </author> <title> A survey of parallel algorithms for shared memory machines, </title> <booktitle> in Handbook of Theoretical Computer Science, </booktitle> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: We adopt the standard parallel random-access machine (PRAM) model of computation, in which processors concurrently access a shared memory <ref> [29] </ref>. Communication costs are not taken into account by this model; the time to access a memory location is constant for each processor. An exclusive-read exclusive-write (EREW) PRAM prohibits concurrent access to the same location of the shared memory. <p> second author was also supported in part by a National Science Foundation Presidential Young Investigator Award CCR-8906419, with matching funds from IBM Corporation, and by National Science Foundation research grant DCR-8403613. 1 time on an EREW PRAM and O (log n) time on a CREW PRAM with M (n) pro-cessors <ref> [29] </ref>, where the best known upper bound on M (n) is currently M (n) = O (n 2:376 ) [10]. Transitive closure is a fundamental problem, and as a result much attention is given to reducing the required number of processors.
Reference: [30] <author> D. Kelly and I. </author> <title> Rival, Planar lattices, </title> <journal> Canad. J. Math., </journal> <volume> 27 (1975), </volume> <pages> pp. 636-665. </pages>
Reference-contexts: 1. Introduction. Planar st-graphs, which include series-parallel graphs as a special case, were first introduced by Lempel, Even, and Cederbaum [34] in connection with a planarity testing algorithm, and they have subsequently been used in a host of applications, dealing with partial orders <ref> [30] </ref>, planar graph embedding [6], [14], [49], graph planarization [37], graph drawing [13], [15], floor planning [57], planar point location [19], [39], visibility [36], [42], [52], [54], [58], [59], motion planning [41], and VLSI layout compaction [57]. <p> This left sequence is also pictured as a path in Fig. 2 (c). The formal underpinning of the orders &lt; L and &lt; R can be found in the theory of planar lattices [27], <ref> [30] </ref>.
Reference: [31] <author> D. G. Kirkpatrick, </author> <title> Optimal search in planar subdivisions, </title> <journal> SIAM J. Computing, </journal> <volume> 12 (1983), </volume> <pages> pp. </pages> <month> 28-35. </month> <title> [32] , Establishing order in planar subdivisions, Discrete & Computational Geometry, </title> <booktitle> 3 (1988), </booktitle> <pages> pp. 267-280. </pages>
Reference-contexts: Atallah, Cole, and Goodrich [3] give an algorithm to construct a suboptimal O (n log n)-space point location data structure in O (log n) time with n processors on a CREW PRAM. Dadoun and Kirkpatrick [11] show that the O (n)-space hierarchical point location data structure of Kirkpatrick <ref> [31] </ref> for triangulations can be constructed in O (log n log fl n) worst-case time and O (log n) expected time on a CREW PRAM with n processors.
Reference: [33] <author> D. T. Lee and F. P. Preparata, </author> <title> Location of a point in a planar subdivision and its applications, </title> <journal> SIAM J. Computing, </journal> <volume> 6 (1977), </volume> <pages> pp. 594-606. </pages>
Reference-contexts: We show how to preprocess a monotone subdivision in O (log n) time with n= log n processors on an EREW PRAM to obtain an O (n)-space data structure (the bridged separator tree [19], <ref> [33] </ref>) that supports point location queries in O (log n) time. Our technique can also be extended to construct a fully dynamic data structure for point location. Queries in the bridged separator tree can be done in optimal O time using a p-processor CREW PRAM [56]. <p> The reader is referred to the book of Preparata and Shamos [38] for the geometric terminology used in this section and a description of various point location techniques. Our approach is based on the separator-method for point location [19], <ref> [33] </ref>. 8 Definition 4.1. A monotone chain is a polygonal chain such that each hori-zontal line intersects it in at most one point. A polygon is monotone if its boundary is partitionable into two monotone chains. <p> is to perform a type of binary search on the set of separators = f 1 ; ; p1 g, where each separator i is assigned to a node (called node i ) of a balanced binary tree T (called the separator tree), whose leaves are the regions of S <ref> [33] </ref>. The sequence of the nodes of T in symmetric order is r 1 , 1 , r 2 , 2 , . . . , p1 , r p . <p> An example is shown in Fig. 3. The separator tree uses O (n) space and supports point location queries in O (log 2 n) time, where n is the number of vertices of S <ref> [33] </ref>. To perform a query, we trace a path in the separator tree from the root to the leaf r i containing the query point q.
Reference: [34] <author> A. Lempel, S. Even, and I. Cederbaum, </author> <title> An algorithm for planarity testing of graphs, in Theory of Graphs, </title> <booktitle> Internat. Symposium, </booktitle> <address> Rome, Italy, </address> <year> 1966, </year> <pages> pp. 215-232. </pages>
Reference-contexts: 1. Introduction. Planar st-graphs, which include series-parallel graphs as a special case, were first introduced by Lempel, Even, and Cederbaum <ref> [34] </ref> in connection with a planarity testing algorithm, and they have subsequently been used in a host of applications, dealing with partial orders [30], planar graph embedding [6], [14], [49], graph planarization [37], graph drawing [13], [15], floor planning [57], planar point location [19], [39], visibility [36], [42], [52], [54], [58], <p> Following the development of Tamassia and Preparata [51], we will consider a planar embedding of G with s as the lowest vertex and t as the highest vertex, and with all edges directed upwards. Planar st-graphs have the following important properties <ref> [34] </ref>, [52]: (1) Every vertex is on a directed path from s to t. (2) The incoming edges for each vertex appear consecutively around the vertex, and so do the outgoing edges.
Reference: [35] <author> J. O'Rourke, </author> <title> Art Gallery Theorems and Algorithms, </title> <publisher> Oxford University Press, </publisher> <address> London, </address> <year> 1987. </year>
Reference-contexts: Visibility representations and graph drawing. The concept of visibility plays a fundamental role in a variety of geometric problems and applications, such as art gallery problems <ref> [35] </ref>, VLSI layout [25], [44], [57], motion planning [23], [41], and graph drawing [13], [53]. Definition 5.1.
Reference: [36] <author> R. H. J. M. Otten and J. G. van Wijk, </author> <title> Graph representations in interactive layout design, </title> <booktitle> in Proc. IEEE Internat. Symposium on Circuits and Systems, </booktitle> <year> 1978, </year> <pages> pp. 914-918. </pages>
Reference-contexts: Lempel, Even, and Cederbaum [34] in connection with a planarity testing algorithm, and they have subsequently been used in a host of applications, dealing with partial orders [30], planar graph embedding [6], [14], [49], graph planarization [37], graph drawing [13], [15], floor planning [57], planar point location [19], [39], visibility <ref> [36] </ref>, [42], [52], [54], [58], [59], motion planning [41], and VLSI layout compaction [57]. In this paper, we present a new technique for constructing in parallel an implicit representation of the transitive closure of a planar st-graph.
Reference: [37] <author> T. Ozawa and H. Takahashi, </author> <title> A graph-planarization algorithm and its applications to random graphs, in Graph Theory and Algorithms, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 108, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, New York, </address> <year> 1981, </year> <pages> pp. 95-107. </pages>
Reference-contexts: Planar st-graphs, which include series-parallel graphs as a special case, were first introduced by Lempel, Even, and Cederbaum [34] in connection with a planarity testing algorithm, and they have subsequently been used in a host of applications, dealing with partial orders [30], planar graph embedding [6], [14], [49], graph planarization <ref> [37] </ref>, graph drawing [13], [15], floor planning [57], planar point location [19], [39], visibility [36], [42], [52], [54], [58], [59], motion planning [41], and VLSI layout compaction [57].
Reference: [38] <author> F. P. Preparata and M. I. Shamos, </author> <title> Computational Geometry, </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, New York, </address> <year> 1985. </year>
Reference-contexts: An example is pictured in Fig. 1. We assume in this paper, as stated in Definition 2.1, that the input graph representation is embedded, that is, for each vertex the cyclical ordering of its neighbors is given. The embedding is represented in standard form by doubly-connected edge lists <ref> [38] </ref>. If the embedding information is not available, but a planar straight-line drawing is given, the embedding can be determined on an EREW PRAM in O (log d) time with n processors by sorting, where d is the maximum vertex degree [7]. <p> Planar point location. In this section, we present fast parallel algorithms for constructing data structures to handle point location queries. The queries themselves can be done either serially or in parallel using concurrent read. The reader is referred to the book of Preparata and Shamos <ref> [38] </ref> for the geometric terminology used in this section and a description of various point location techniques. Our approach is based on the separator-method for point location [19], [33]. 8 Definition 4.1. <p> A (planar) subdivision S is a partition of the entire plane into polygons, called the regions of S. We assume a standard representation for the subdivision S and its embedding, such as a doubly-connected edge list representation <ref> [38] </ref>. A monotone subdivision is such that all its regions are monotone polygons. A monotone subdivision S is therefore associated with a planar st-graph G, where each edge is directed according to increasing ordinate, and s and t are associated with the vertices at 1 and +1 of S.
Reference: [39] <author> F. P. Preparata and R. Tamassia, </author> <title> Fully dynamic point location in a monotone subdivision, </title> <journal> SIAM J. Computing, </journal> <volume> 18 (1989), </volume> <pages> pp. 811-830. </pages>
Reference-contexts: introduced by Lempel, Even, and Cederbaum [34] in connection with a planarity testing algorithm, and they have subsequently been used in a host of applications, dealing with partial orders [30], planar graph embedding [6], [14], [49], graph planarization [37], graph drawing [13], [15], floor planning [57], planar point location [19], <ref> [39] </ref>, visibility [36], [42], [52], [54], [58], [59], motion planning [41], and VLSI layout compaction [57]. In this paper, we present a new technique for constructing in parallel an implicit representation of the transitive closure of a planar st-graph. <p> One property of a regular subdivision is that the proper edges of each separator in the separator tree are connected, so that there are no "gaps" in the middle of a separator, but only at the top and bottom <ref> [39] </ref>. Thus, all but the first and last catalog entries are associated with a proper edge e of i , and this simplifies the algorithm. This proves the following. Lemma 4.5. Let S be a regular subdivision with n vertices. <p> It can be shown that there is a unique monotone chain from high (r 0 ) to low (r 00 ), called a channel, and that all channels are vertex disjoint <ref> [39] </ref>. If the subdivision S is monotone, but not regular, we transform S into an equivalent regular subdivision by duplicating some edges [39]. <p> shown that there is a unique monotone chain from high (r 0 ) to low (r 00 ), called a channel, and that all channels are vertex disjoint <ref> [39] </ref>. If the subdivision S is monotone, but not regular, we transform S into an equivalent regular subdivision by duplicating some edges [39]. <p> The algorithm used in Theorem 4.8 can be modified to construct the fully dynamic point location data structure of Preparata and Tamassia <ref> [39] </ref> within the same time/processor bounds. For subdivisions that are represented without embedding information (e.g., by unsorted lists of vertices and edges), we need a preliminary step to compute its embedding, which consists of sorting the neighbors of each vertex v in clockwise order around v.
Reference: [40] <author> V. Ramachandran and J. H. Reif, </author> <title> An optimal parallel algorithm for graph planarity, </title> <booktitle> in Proc. IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1989, </year> <pages> pp. 282-287. </pages>
Reference-contexts: Let b G be the undirected planar graph corresponding to G. We can compute an embedding of b G on a CRCW PRAM in O (log n) time using the same number of processors needed to determine graph connectivity and to do bucket sorting in O (log n) time <ref> [40] </ref>; the best known processor bound for this uses n log log n processors deterministically [8], [24].
Reference: [41] <author> I. Rival and J. Urrutia, </author> <title> Representing orders by translating convex figures in the plane, Order, </title> <booktitle> 4 (1988), </booktitle> <pages> pp. 319-339. </pages>
Reference-contexts: a planarity testing algorithm, and they have subsequently been used in a host of applications, dealing with partial orders [30], planar graph embedding [6], [14], [49], graph planarization [37], graph drawing [13], [15], floor planning [57], planar point location [19], [39], visibility [36], [42], [52], [54], [58], [59], motion planning <ref> [41] </ref>, and VLSI layout compaction [57]. In this paper, we present a new technique for constructing in parallel an implicit representation of the transitive closure of a planar st-graph. <p> Visibility representations and graph drawing. The concept of visibility plays a fundamental role in a variety of geometric problems and applications, such as art gallery problems [35], VLSI layout [25], [44], [57], motion planning [23], <ref> [41] </ref>, and graph drawing [13], [53]. Definition 5.1. Given a collection H of horizontal segments in the plane, the (vertical) visibility graph of H is the graph G whose vertices are the segments of H and whose edges are pairs of segments that see each other in the vertical direction.
Reference: [42] <author> P. Rosenstiehl and R. E. Tarjan, </author> <title> Rectilinear planar layouts of planar graphs and bipolar orientations, </title> <journal> Discrete & Comput. Geom., </journal> <volume> 1 (1986), </volume> <pages> pp. 343-353. </pages>
Reference-contexts: Even, and Cederbaum [34] in connection with a planarity testing algorithm, and they have subsequently been used in a host of applications, dealing with partial orders [30], planar graph embedding [6], [14], [49], graph planarization [37], graph drawing [13], [15], floor planning [57], planar point location [19], [39], visibility [36], <ref> [42] </ref>, [52], [54], [58], [59], motion planning [41], and VLSI layout compaction [57]. In this paper, we present a new technique for constructing in parallel an implicit representation of the transitive closure of a planar st-graph. <p> Such representations find applications in VLSI layout, motion planning, and graph drawing, and their combinatorial properties have been extensively investigated [16], <ref> [42] </ref>, [52], [54], [58], [59]. We give algorithms for constructing visibility representations of planar st-graphs and undirected planar graphs in O (log n) time with n= log n processors. <p> As regards visibility representations, there are sequential O (n)-time algorithms for their construction [13], <ref> [42] </ref>, [52]. Theorem 5.3. Let G be a planar st-graph with n vertices. A visibility representation for G with integer coordinates and O (n 2 ) area can be computed by an EREW PRAM in O (log n) time using n= log n processors, which is optimal. Proof. <p> Proof. A visibility representation for G can be constructed by the following variation of previous algorithms [13], <ref> [42] </ref>, [52]. (1) Compute a topological ordering Y (v) of the vertices of G. (2) Compute a topological ordering X (f) of the vertices of G fl , the dual graph of G. (3) Draw each vertex-segment (v) at ordinate Y (v) and between abscissae X (left (v)) and X (right
Reference: [43] <author> J. E. Savage and M. G. Wloka, </author> <title> Parallel constraint graph generation, </title> <booktitle> in Proc. Decennial Caltech Conference on VLSI, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1989, </year> <pages> pp. 241-259. </pages>
Reference-contexts: It can also be constructed in parallel by an EREW PRAM in O (log n) time and O (n log n) space with n processors [3], or in O (log n) time and O (n) space with n= log n processors <ref> [43] </ref>. As regards visibility representations, there are sequential O (n)-time algorithms for their construction [13], [42], [52]. Theorem 5.3. Let G be a planar st-graph with n vertices.
Reference: [44] <author> M. Schlag, F. Luccio, P. Maestrini, D. T. Lee, and C. K. Wong, </author> <title> A visibility problem in VLSI layout compaction, </title> <booktitle> in Advances in Computing Research, </booktitle> <volume> Vol. 2, </volume> <editor> F. P. Preparata, ed., </editor> <publisher> JAI Press Inc., </publisher> <address> Greenwich, CT, </address> <year> 1985, </year> <pages> pp. 259-282. </pages>
Reference-contexts: Visibility representations and graph drawing. The concept of visibility plays a fundamental role in a variety of geometric problems and applications, such as art gallery problems [35], VLSI layout [25], <ref> [44] </ref>, [57], motion planning [23], [41], and graph drawing [13], [53]. Definition 5.1. <p> The visibility graph of a set of n segments can be computed in O (n log n) sequential time and O (n) space <ref> [44] </ref>, which is optimal. It can also be constructed in parallel by an EREW PRAM in O (log n) time and O (n log n) space with n processors [3], or in O (log n) time and O (n) space with n= log n processors [43].
Reference: [45] <author> W. Schnyder, </author> <title> Embedding planar graphs on the grid, </title> <booktitle> in Proc. 1st ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1990, </year> <pages> pp. 138-148. </pages>
Reference-contexts: Examples include circuit schematics, algorithm animation, and diagrams for information systems analysis and design. The literature on graph drawing algorithms is spread over the broad spectrum of computer science [17], [50]. This problem has received increasing theoretical interest in recent years (cf. [15], [20], <ref> [45] </ref>). Definition 5.5. A drawing of a graph maps each vertex into a point of the plane, and each edge (u; v) into a simple open curve between the points associated with the vertices u and v. A planar drawing has no crossing edges.
Reference: [46] <author> M. Snir, </author> <title> On parallel searching, </title> <journal> SIAM J. Computing, </journal> <volume> 14 (1989), </volume> <pages> pp. 688-708. </pages>
Reference-contexts: It achieves the same query time, but it is simpler and uses less preprocessing. The query time of O is optimal since we can reduce the problem of dictionary searching to planar point location, and thus the lower bound of Snir <ref> [46] </ref> applies. 5. Visibility representations and graph drawing. The concept of visibility plays a fundamental role in a variety of geometric problems and applications, such as art gallery problems [35], VLSI layout [25], [44], [57], motion planning [23], [41], and graph drawing [13], [53]. Definition 5.1.
Reference: [47] <author> J. A. Storer, </author> <title> On minimal node-cost planar embeddings, Networks, </title> <booktitle> 14 (1984), </booktitle> <pages> pp. 181-212. </pages>
Reference-contexts: Now, we consider planar orthogonal drawings of undirected graphs. Such drawings are typical of circuit layout, and are widely used in data presentation applications because of their regularity. Sequential algorithms for planar orthogonal drawings are given by Storer <ref> [47] </ref>, Tamassia [48], and Tamassia and Tollis [53]. Theorem 5.8. Let G be a 2-connected embedded (undirected ) planar graph with n vertices, each of degree at most four. <p> Because of its locality, this transformation can be easily parallelized. Hence, the result follows from Theorem 5.4. 17 The bounds on the area and the number of bends are asymptotically optimal <ref> [47] </ref>. The bound on the number of bends can be improved to the exact worst-case optimal 2n + 4 and the algorithm can be extended to 1-connected graphs [55].
Reference: [48] <author> R. Tamassia, </author> <title> On embedding a graph in the grid with the minimum number of bends, </title> <journal> SIAM J. Computing, </journal> <volume> 16 (1987), </volume> <pages> pp. </pages> <month> 421-444. </month> <title> [49] , A dynamic data structure for planar graph embedding, </title> <booktitle> in Automata, Languages and Programming, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 317, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, New York, </address> <year> 1988, </year> <pages> pp. 576-590. 19 </pages>
Reference-contexts: Now, we consider planar orthogonal drawings of undirected graphs. Such drawings are typical of circuit layout, and are widely used in data presentation applications because of their regularity. Sequential algorithms for planar orthogonal drawings are given by Storer [47], Tamassia <ref> [48] </ref>, and Tamassia and Tollis [53]. Theorem 5.8. Let G be a 2-connected embedded (undirected ) planar graph with n vertices, each of degree at most four.
Reference: [50] <author> R. Tamassia, G. D. Battista, and C. Batini, </author> <title> Automatic graph drawing and readability of diagrams, </title> <journal> IEEE Trans. Systems Man Cybernet., </journal> <volume> 18 (1988), </volume> <pages> pp. 61-79. </pages>
Reference-contexts: A number of data presentation problems involve drawing graphs so that they are easy to read and understand. Examples include circuit schematics, algorithm animation, and diagrams for information systems analysis and design. The literature on graph drawing algorithms is spread over the broad spectrum of computer science [17], <ref> [50] </ref>. This problem has received increasing theoretical interest in recent years (cf. [15], [20], [45]). Definition 5.5.
Reference: [51] <author> R. Tamassia and F. P. Preparata, </author> <title> Dynamic maintenance of planar digraphs, with applications, </title> <journal> Algorithmica, </journal> <volume> 5 (1990), </volume> <pages> pp. 509-527. </pages>
Reference-contexts: Such total orders, denoted &lt; L and &lt; R , provide an implicit representation of the transitive closure of G. Also, any such order yields a topological ordering of the vertices when restricted to V <ref> [51] </ref>. In x 3 we give an optimal O (log n)-time, (n= log n)-processor algorithm for constructing the orders &lt; L and &lt; R of an n-vertex planar st-graph G. <p> If the edge (s; t) was added in our construction earlier, it can be removed from b G, and the orientations of the edges can be reintroduced to get an embedding of the planar st-graph G. Following the development of Tamassia and Preparata <ref> [51] </ref>, we will consider a planar embedding of G with s as the lowest vertex and t as the highest vertex, and with all edges directed upwards. <p> For each x; y 2 V [ E [ F , exactly one of the following relations hold: x " y, y " x, x ! y, or y ! x <ref> [51] </ref>. This allows us to define the following two total orders: Definition 2.4. <p> The formal underpinning of the orders &lt; L and &lt; R can be found in the theory of planar lattices [27], [30]. The importance of the total orders &lt; L and &lt; R is that they can be used to answer transitive closure queries: Theorem 2.5. <ref> [51] </ref> There is a path from vertex u to vertex v in a planar st-graph G if and only if u precedes v in both the left and right sequences of G. 3. Transitive closure. <p> In the dynamic problem, the digraph can be updated by insertions and deletions, and the queries can be interspersed with the updates. In this section, we exploit the properties of planar st-graphs and give EREW PRAM algorithms for constructing the fully dynamic (sequential) data structure of Tamassia and Preparata <ref> [51] </ref> in O (log n) time with n= log n processors. The data structure consists of a pair of balanced trees associated with the left and right sequences and requires O (n) space. When used sequentially, it is fully dynamic and handles queries and updates in O (log n) time. <p> A fully dynamic data structure for the transitive closure query problem for G can be constructed by an EREW PRAM in O (log n) time using n= log n processors, which is optimal. Proof. Our algorithm constructs the data structure of Tamassia and Preparata <ref> [51] </ref> based on the left and right sequences of G. By Theorem 2.5, we can determine if there is a path from u to v in G by checking whether u is before v in both sequences. Each sequence is stored in the leaves of a balanced red-black tree [22]. <p> Lemma 3.2 below shows that this sequence is the left sequence of G. The right sequence can be constructed analogously. Given the left and right sequences of G, the dynamic data structure of Tamassia and Preparata <ref> [51] </ref> can be constructed easily in parallel. It consists of two balanced search trees, whose leaves consist of the elements of V [ E [ F .
Reference: [52] <author> R. Tamassia and I. G. Tollis, </author> <title> A unified approach to visibility representations of planar graphs, </title> <journal> Discrete & Comput. Geom., </journal> <volume> 1 (1986), </volume> <pages> pp. </pages> <month> 321-341. </month> <title> [53] , Planar grid embedding in linear time, </title> <journal> IEEE Trans. Circuits and Systems, </journal> <volume> 36 (1989), </volume> <pages> pp. </pages> <month> 1230-1234. </month> <title> [54] , Representations of graphs on a cylinder, </title> <journal> SIAM J. Discrete Math., </journal> <month> 4 </month> <year> (1991). </year>
Reference-contexts: and Cederbaum [34] in connection with a planarity testing algorithm, and they have subsequently been used in a host of applications, dealing with partial orders [30], planar graph embedding [6], [14], [49], graph planarization [37], graph drawing [13], [15], floor planning [57], planar point location [19], [39], visibility [36], [42], <ref> [52] </ref>, [54], [58], [59], motion planning [41], and VLSI layout compaction [57]. In this paper, we present a new technique for constructing in parallel an implicit representation of the transitive closure of a planar st-graph. <p> Such representations find applications in VLSI layout, motion planning, and graph drawing, and their combinatorial properties have been extensively investigated [16], [42], <ref> [52] </ref>, [54], [58], [59]. We give algorithms for constructing visibility representations of planar st-graphs and undirected planar graphs in O (log n) time with n= log n processors. <p> Following the development of Tamassia and Preparata [51], we will consider a planar embedding of G with s as the lowest vertex and t as the highest vertex, and with all edges directed upwards. Planar st-graphs have the following important properties [34], <ref> [52] </ref>: (1) Every vertex is on a directed path from s to t. (2) The incoming edges for each vertex appear consecutively around the vertex, and so do the outgoing edges. <p> Besides having many applications, visibility graphs and representations are also of intrinsic theoretical interest, and their combinatorial properties have been extensively investigated [16], <ref> [52] </ref>, [54], [58], [59]. The visibility graph of a set of n segments can be computed in O (n log n) sequential time and O (n) space [44], which is optimal. <p> As regards visibility representations, there are sequential O (n)-time algorithms for their construction [13], [42], <ref> [52] </ref>. Theorem 5.3. Let G be a planar st-graph with n vertices. A visibility representation for G with integer coordinates and O (n 2 ) area can be computed by an EREW PRAM in O (log n) time using n= log n processors, which is optimal. Proof. <p> Proof. A visibility representation for G can be constructed by the following variation of previous algorithms [13], [42], <ref> [52] </ref>. (1) Compute a topological ordering Y (v) of the vertices of G. (2) Compute a topological ordering X (f) of the vertices of G fl , the dual graph of G. (3) Draw each vertex-segment (v) at ordinate Y (v) and between abscissae X (left (v)) and X (right (v))
Reference: [55] <author> R. Tamassia, I. G. Tollis, and J. S. Vitter, </author> <title> Parallel construction of planar graph layouts, </title> <type> Manuscript, </type> <year> 1990. </year>
Reference-contexts: Hence, the result follows from Theorem 5.4. 17 The bounds on the area and the number of bends are asymptotically optimal [47]. The bound on the number of bends can be improved to the exact worst-case optimal 2n + 4 and the algorithm can be extended to 1-connected graphs <ref> [55] </ref>. Our results improve upon the previous parallel drawing algorithm presented by Ja'Ja' and Simon [26], which constructs a straight-line planar drawing in O (log 2 n) time with M (n) processors, using real arithmetic for the computation of the coordinates of the vertices.
Reference: [56] <author> R. Tamassia and J. S. Vitter, </author> <title> Optimal cooperative search in fractional cascaded data structures, </title> <booktitle> in Proc. 2nd ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <year> 1990, </year> <pages> pp. 307-316. </pages>
Reference-contexts: Our technique can also be extended to construct a fully dynamic data structure for point location. Queries in the bridged separator tree can be done in optimal O time using a p-processor CREW PRAM <ref> [56] </ref>. Nonmonotone subdivisions can be handled by our techniques by first applying a triangulation step, which takes O (log n) time using an n-processor CREW PRAM [3], [60]. Our results improve certain aspects of the previous best results [3], [9], [11], [12]. <p> The bridged separator tree data structure can also be used to process the queries in parallel. We show in a companion paper <ref> [56] </ref> that an O (n)-space data structure can be constructed with an EREW PRAM in O (log n) time using n= log n processors such that, for any 2 p n, point location queries can be done in O time using a CREW PRAM with p processors.
Reference: [57] <author> S. Wimer, I. Koren, and I. Cederbaum, Floorplans, </author> <title> planar graphs, and layouts, </title> <journal> IEEE Trans. Circuits and Systems, </journal> <volume> 35 (1988), </volume> <pages> pp. 267-278. </pages>
Reference-contexts: a special case, were first introduced by Lempel, Even, and Cederbaum [34] in connection with a planarity testing algorithm, and they have subsequently been used in a host of applications, dealing with partial orders [30], planar graph embedding [6], [14], [49], graph planarization [37], graph drawing [13], [15], floor planning <ref> [57] </ref>, planar point location [19], [39], visibility [36], [42], [52], [54], [58], [59], motion planning [41], and VLSI layout compaction [57]. In this paper, we present a new technique for constructing in parallel an implicit representation of the transitive closure of a planar st-graph. <p> they have subsequently been used in a host of applications, dealing with partial orders [30], planar graph embedding [6], [14], [49], graph planarization [37], graph drawing [13], [15], floor planning <ref> [57] </ref>, planar point location [19], [39], visibility [36], [42], [52], [54], [58], [59], motion planning [41], and VLSI layout compaction [57]. In this paper, we present a new technique for constructing in parallel an implicit representation of the transitive closure of a planar st-graph. <p> Visibility representations and graph drawing. The concept of visibility plays a fundamental role in a variety of geometric problems and applications, such as art gallery problems [35], VLSI layout [25], [44], <ref> [57] </ref>, motion planning [23], [41], and graph drawing [13], [53]. Definition 5.1.
Reference: [58] <author> S. K. Wismath, </author> <title> Characterizing bar line-of-sight graphs, </title> <booktitle> in Proc. 1st ACM Symposium on Computational Geometry, </booktitle> <year> 1985, </year> <pages> pp. </pages> <month> 147-152. </month> <title> [59] , Weighted visibility graphs of bars and related flow problems, in Algorithms and Data Structures, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 382, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, New York, </address> <year> 1989, </year> <pages> pp. 325-334. </pages>
Reference-contexts: [34] in connection with a planarity testing algorithm, and they have subsequently been used in a host of applications, dealing with partial orders [30], planar graph embedding [6], [14], [49], graph planarization [37], graph drawing [13], [15], floor planning [57], planar point location [19], [39], visibility [36], [42], [52], [54], <ref> [58] </ref>, [59], motion planning [41], and VLSI layout compaction [57]. In this paper, we present a new technique for constructing in parallel an implicit representation of the transitive closure of a planar st-graph. <p> Such representations find applications in VLSI layout, motion planning, and graph drawing, and their combinatorial properties have been extensively investigated [16], [42], [52], [54], <ref> [58] </ref>, [59]. We give algorithms for constructing visibility representations of planar st-graphs and undirected planar graphs in O (log n) time with n= log n processors. Also, we show that algorithms for drawing planar graphs that are based on the intermediate construction of visibility representations can be efficiently parallelized. <p> Besides having many applications, visibility graphs and representations are also of intrinsic theoretical interest, and their combinatorial properties have been extensively investigated [16], [52], [54], <ref> [58] </ref>, [59]. The visibility graph of a set of n segments can be computed in O (n log n) sequential time and O (n) space [44], which is optimal.
Reference: [60] <author> C. K. Yap, </author> <title> Parallel triangulation of a polygon in two calls to the trapezoidal map, </title> <journal> Algorith-mica, </journal> <volume> 3 (1988), </volume> <pages> pp. 279-288. 20 </pages>
Reference-contexts: Queries in the bridged separator tree can be done in optimal O time using a p-processor CREW PRAM [56]. Nonmonotone subdivisions can be handled by our techniques by first applying a triangulation step, which takes O (log n) time using an n-processor CREW PRAM [3], <ref> [60] </ref>. Our results improve certain aspects of the previous best results [3], [9], [11], [12]. Atallah, Cole, and Goodrich [3] give an algorithm to construct a suboptimal O (n log n)-space point location data structure in O (log n) time with n processors on a CREW PRAM. <p> For nonmonotone subdivisions we perform a preliminary triangulation step and then apply the technique for monotone subdivisions. Triangulation can be performed by a CREW PRAM in O (log n) time with n processors [3], <ref> [60] </ref>. We get the following theorem. Theorem 4.9. Let S be a subdivision with n vertices. An O (n)-space data structure supporting O (log n)-time point location queries in S can be constructed by a CREW PRAM in O (log n) time using n processors.
References-found: 53

