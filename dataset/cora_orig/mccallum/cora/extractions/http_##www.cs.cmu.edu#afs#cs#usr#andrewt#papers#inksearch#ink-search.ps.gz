URL: http://www.cs.cmu.edu/afs/cs/usr/andrewt/papers/inksearch/ink-search.ps.gz
Refering-URL: http://www.cs.cmu.edu/~andrewt/papers.html
Root-URL: 
Email: dpl@mitl.research.panasonic.com andrewt@mitl.research.panasonic.com  
Title: On the Searchability of Electronic Ink  
Author: Daniel Lopresti Andrew Tomkins 
Keyword: pen computing, approximate string matching, edit distance.  
Date: January 9, 1997  
Address: Way Princeton, NJ 08540 USA  
Affiliation: Matsushita Information Technology Laboratory Panasonic Technologies, Inc. Two Research  
Abstract: Pen-based computers and personal digital assistant's (PDA's) are new technologies that are growing in importance. In previous papers, we have espoused a philosophy we call "Computing in the Ink Domain" that treats ink as a first-class datatype. One of the most important questions that arises under this model concerns the searching of large quantities of previously stored pen-stroke data. In this paper, we examine the ink search problem. We present an algorithm based on a known dynamic programming technique, and examine its performance under a variety of circumstances. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Yoseph Linde, Andres Buzo, and Robert M. Gray. </author> <title> An algorithm for vector quantizer design. </title> <journal> IEEE Transactions on Communications, COM-28, </journal> <volume> No 1 </volume> <pages> 84-95, </pages> <year> 1980. </year>
Reference: [2] <author> Daniel Lopresti and Andrew Tomkins. </author> <title> Approximate matching of hand-drawn pictograms. </title> <booktitle> In Proceedings of the Third International Workshop on Frontiers in Handwriting Recognition, </booktitle> <pages> pages 102-111, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: This synthesis of new hardware and software raises many systems-level issues, including the possibility of new paradigms for human-computer interaction. In previous papers, we have espoused a philosophy we have come to call "Computing in the Ink Domain" <ref> [3, 2, 4] </ref>. Here, the need for traditional handwriting recognition (HWX) is often deferred and sometimes even eliminated. Instead, the day-to-day functionality that users require is realized by treating ink as a first-class datatype.
Reference: [3] <author> Daniel Lopresti and Andrew Tomkins. </author> <title> Pictographic naming. </title> <booktitle> In Adjunct Proceedings of the 1993 Conference on Human Factors in Computing Systems (INTERCHI'93), </booktitle> <pages> pages 77-78, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: This synthesis of new hardware and software raises many systems-level issues, including the possibility of new paradigms for human-computer interaction. In previous papers, we have espoused a philosophy we have come to call "Computing in the Ink Domain" <ref> [3, 2, 4] </ref>. Here, the need for traditional handwriting recognition (HWX) is often deferred and sometimes even eliminated. Instead, the day-to-day functionality that users require is realized by treating ink as a first-class datatype.
Reference: [4] <author> Daniel Lopresti and Andrew Tomkins. </author> <title> Computing in the ink domain. </title> <note> Submitted for publication, </note> <month> March </month> <year> 1994. </year>
Reference-contexts: This synthesis of new hardware and software raises many systems-level issues, including the possibility of new paradigms for human-computer interaction. In previous papers, we have espoused a philosophy we have come to call "Computing in the Ink Domain" <ref> [3, 2, 4] </ref>. Here, the need for traditional handwriting recognition (HWX) is often deferred and sometimes even eliminated. Instead, the day-to-day functionality that users require is realized by treating ink as a first-class datatype. <p> In this paper, we examine the following question: Given an ink text and an ink pattern, is it possible to search through the text and find all occurrences of the pattern without overwhelming the user with false "hits"? As we have noted previously (e.g., <ref> [4] </ref>), ink search serves as the basis for a broad range of user-oriented functionality.
Reference: [5] <author> J. MacQueen. </author> <title> Some methods for classification and analysis of multivariate observations. </title> <booktitle> Proceedings of the Fifth Berkeley Symposium on Mathematics, Statistics and Probability, </booktitle> <volume> 1 </volume> <pages> 281-296, </pages> <year> 1967. </year>
Reference-contexts: We cluster the feature vectors of the ink sample into 64 groups using a well-known clustering algorithm from the literature known as the k-means algorithm <ref> [5] </ref>. The feature vectors of the sample are processed sequentially. Each vector in turn is placed into a cluster, which is then updated to reflect the new member. Each cluster is represented by its centroid, the element-wise average of all vectors in the cluster.
Reference: [6] <author> Dean Rubine. </author> <title> The Automatic Recognition of Gestures. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1991. </year>
Reference-contexts: Figure 5 shows a sample line of stroke-segmented text. The bounding boxes of all strokes are shown. Feature Extraction. Rather than propose another new feature set, we have taken a set created by Dean Rubine in the context of gesture recognition <ref> [6] </ref>. This particular feature set, which converts each stroke into a real-valued 13-dimensional vector, seems to do well at discriminating single strokes, and is efficient to update as new points arrive.
Reference: [7] <author> Gerard Salton and Michael J. McGill. </author> <title> Introduction to Modern Information Retrieval. </title> <publisher> McGraw-Hill, Inc., </publisher> <year> 1983. </year> <month> 12 </month>
Reference-contexts: Quantifying the success of an algorithm under these circumstances is not simple. The field of information retrieval concerns itself with a similar problem in a different domain, however, and seems to have converged on the following two measures <ref> [7] </ref>: Recall The percentage of the time P is found. Precision The percentage of reported matches that are in fact true. Obviously it is desirable to have both of these measures as close to 1 as possible. There is, however, a fundamental trade-off between the two.
Reference: [8] <author> Robert Schalkoff. </author> <title> Pattern Recognition. Statistical, Structural and Neural Approaches. </title> <publisher> John Wiley & Sons, Inc, </publisher> <year> 1992. </year>
Reference-contexts: Instead of using standard Euclidean distance we now define the Mahalanobis distance <ref> [8] </ref> that we will use upon the space of feature vectors as follows: jj~vjj 2 d (~v; ~w) = jj (~v ~w)jj M (7) We now have a suitable distance measure for feature space, and can proceed to describe our vector quantization scheme.
Reference: [9] <author> Robert A. Wagner and Michael J. Fischer. </author> <title> The string-to-string correction problem. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 21(1) </volume> <pages> 168-173, </pages> <year> 1974. </year> <month> 13 </month>
Reference-contexts: Hence, approximate string matching is the appropriate paradigm for ink search. A standard model for approximate matching is provided by edit distance, also known as the "k-differences problem" in the literature. In the traditional case <ref> [9] </ref>, the following three operations are permitted: 1. delete a symbol, 2 2. insert a symbol, 3. substitute one symbol for another.
References-found: 9

