URL: file://dream.dai.ed.ac.uk/pub/papers/PS/pub716.ps.gz
Refering-URL: http://www.dai.ed.ac.uk:80/staff/personal_pages/bundy/drafts/ripple-faq.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: a.ireland@ed.ac.uk a.bundy@ed.ac.uk  
Title: Productive Use of Failure in Inductive Proof  
Author: Andrew Ireland Alan Bundy 
Address: 80 South Bridge EH1 1HN  
Affiliation: Department of Artificial Intelligence University of Edinburgh  
Abstract: Proof by mathematical induction gives rise to various kinds of eureka steps, e.g. missing lemmata, generalization, etc. Most inductive theorem provers rely upon user intervention in supplying the required eureka steps. In contrast, we present a novel theorem proving architecture for supporting the automatic discovery of eureka steps. We build upon rippling, a search control heuristic designed for inductive reasoning. We show how the failure of rippling can be used in bridging gaps in the search for inductive proofs.
Abstract-found: 1
Intro-found: 1
Reference: [Aub75] <author> R. Aubin. </author> <title> Some generalization heuristics in proofs by induction. </title> <editor> In G. Huet and G. Kahn, editors, </editor> <booktitle> Actes du Colloque Construction: </booktitle> <institution> Amelioration et verification de Programmes. Institut de recherche d'informatique et d'automatique, </institution> <year> 1975. </year>
Reference-contexts: Since the goal term structure is finite the associated search space is also finite. Finally, generalization is an important technique in minimizing context. We exploit two forms of generalization: replacement of common terms and distinguishing variables apart. In the context of automatic inductive theorem proving 25 Aubin <ref> [Aub75] </ref> was the first to investigate such techniques. We adopt similar heuristics to those developed by Aubin, e.g. exploiting primary recursion paths 7 in distinguishing between variables to generalization apart. All of the above heuristics may lead to invalid wave-rule suggestions. <p> There is a strong connection between creational wave-rules and well-founded inductions. The discovery of missing creational wave-rules may provide a handle on the problem of generating new inductions dynamically. 8 The examples come from a number of sources which include <ref> [Aub75] </ref>, [BM79], [MW85], [Wal94]. 9 This is without the aid of the linear arithmetic decision procedure. With the decision procedure, nqthm is able to prove T1, T3, T6 and T7.
Reference: [BM79] <author> R.S. Boyer and J.S. Moore. </author> <title> A Computational Logic. </title> <publisher> Academic Press, </publisher> <address> 1979. </address> <publisher> ACM monograph series. </publisher>
Reference-contexts: The conclusion is said to be fully-rippled and ready to be fertilized. 2 The phrase fertilization which describes the use of hypotheses was introduced in <ref> [BM79] </ref>. 7 The strategy as illustrated above is called longitudinal rippling. The aim of the strategy is to manipulate the wave-fronts so that they dominate the skeleton term structure of the induction conclusion. <p> Rippling allows for upward directed wave-fronts to be turned downward but not vice-versa. This restriction enables the use of bi-directional rewrite rules without the risk of looping. Other systems, such as nqthm <ref> [BM79] </ref>, rely upon the user to indicate which direction a bi-directional rewrite rule should be used. In proving (16) wave-rules (11) and (17) suggest induction on the variable t using rule (3). <p> In relation to other inductive theorem proving systems this kind of patching involves the user in supplying a hint in the form of a dummy recursive function which reflects the desired induction. 27 Secondly, lemma calculation is based upon the strategy of cross fertilization <ref> [BM79] </ref> and weak-fertilization [BSvH + 93]. A practical limitation of both these strategies is that they discover lemmas in-line. As a consequence the same lemma may be re-discovered and verified many times during the course of a proof. Lemma calculation factors out lemmas and verifies them as separate proof attempts. <p> There is a strong connection between creational wave-rules and well-founded inductions. The discovery of missing creational wave-rules may provide a handle on the problem of generating new inductions dynamically. 8 The examples come from a number of sources which include [Aub75], <ref> [BM79] </ref>, [MW85], [Wal94]. 9 This is without the aid of the linear arithmetic decision procedure. With the decision procedure, nqthm is able to prove T1, T3, T6 and T7.
Reference: [BR93] <author> A. Bouhoula and M. Rusinowitch. </author> <title> Automatic case analysis in proof by induction. </title> <booktitle> In Proceedings of the 13th IJCAI. International Joint Conference on Artificial Intelligence, </booktitle> <year> 1993. </year>
Reference-contexts: In contrast, Thomas & Jantke [TJ89] observe divergence patterns and use them to suggest generalizations in the context of inductive completion. A similar idea has been applied by Walsh [Wal94] to the problem of proof divergence in the spike <ref> [BR93] </ref> theorem prover. Divergence patterns generated by spike are used to suggest lemmas. Central to this approach is the technique of difference matching [BW92]. Difference matching is used to speculate the structure of missing lemmas by generalizing over a sequence of diverging formulae.
Reference: [BSvH + 93] <author> A. Bundy, A. Stevens, F. van Harmelen, A. Ireland, and A. Smaill. Rippling: </author> <title> A heuristic for guiding inductive proofs. </title> <journal> Artificial Intelligence, </journal> <volume> 62 </volume> <pages> 185-253, </pages> <year> 1993. </year> <note> Also available from Edinburgh as DAI Research Paper No. 567. 30 </note>
Reference-contexts: Most inductive theorem provers rely upon user intervention in spotting the need for, and in constructing such eureka steps. In contrast we present a theorem proving architecture which supports the automatic discovery of eureka steps through 2 the analysis of failed proof attempts. Our approach builds upon rippling <ref> [BvHSI90, BSvH + 93] </ref>, a heuristic which plays a pivotal role in guiding the search for an inductive proof. We demonstrate how the constraints rippling places on the search space and its declarative nature enable us to automatically patch failed proof attempts through the construction of appropriate eureka steps. <p> The general pattern of the longitudinal and transverse strategies is presented in figure 3. A detailed description of rippling appears in <ref> [BSvH + 93] </ref>. f (g (h ( c 1 (x) ); k (byc))) # )))) A schematic conclusion is shown which gives rise to both longitudinal and transverse ripples. 2.3.2 Fertilize method The fertilize method controls the application of induction hypotheses. <p> In relation to other inductive theorem proving systems this kind of patching involves the user in supplying a hint in the form of a dummy recursive function which reflects the desired induction. 27 Secondly, lemma calculation is based upon the strategy of cross fertilization [BM79] and weak-fertilization <ref> [BSvH + 93] </ref>. A practical limitation of both these strategies is that they discover lemmas in-line. As a consequence the same lemma may be re-discovered and verified many times during the course of a proof. Lemma calculation factors out lemmas and verifies them as separate proof attempts. <p> The generalization critic presented here represents a rational reconstruction and extension of this work. Lastly, the case analyses critic is an alternative to having a method for supporting conditional rewriting <ref> [BSvH + 93] </ref>. The critic mechanism, however, allows for more sophisticated case analyses involving the composition of multiple partial proofs. This idea is illustrated in [Ire92]. 6 Implementation and results The proof critics presented here have been implemented and tested. <p> The complementary destructor style induction is already incorporated within rippling. A destructor style induction introduces wave-fronts into the induction hypothesis, e.g. + Rippling uses creational wave-rules <ref> [BSvH + 93] </ref> to set-up a ripple in the conclusion by neutralizing the wave-fronts in the hypothesis, e.g.
Reference: [Bun88] <author> A. Bundy. </author> <title> The use of explicit plans to guide inductive proofs. </title> <editor> In R. Lusk and R. Overbeek, editors, </editor> <booktitle> 9th Conference on Automated Deduction, </booktitle> <pages> pages 111-120. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year> <note> Longer version available from Edinburgh as DAI Research Paper No. 349. </note>
Reference-contexts: how the systematic analysis of the failure of rippling can be used in the selection of induction schemas and the conjecturing of lemmata, generalizations and case analyses. 1.2 Background It has been shown how the common structure which defines a family of proofs can be expressed as a proof plan <ref> [Bun88] </ref>. This common structure can be exploited in the search for particular proofs. A proof plan has two complementary components: a proof method and a proof tactic. By prescribing the structure of a proof at the level of primitive inferences, a tactic [GMW79] provides the guarantee part of the proof.
Reference: [BvHHS90] <author> A. Bundy, F. van Harmelen, C. Horn, and A. Smaill. </author> <title> The Oyster-Clam system. In M.E. </title> <editor> Stickel, editor, </editor> <booktitle> 10th International Conference on Automated Deduction, </booktitle> <pages> pages 647-648. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year> <note> Lecture Notes in Artificial Intelligence No. 449. Also available from Edinburgh as DAI Research Paper 507. </note>
Reference-contexts: The critic mechanism, however, allows for more sophisticated case analyses involving the composition of multiple partial proofs. This idea is illustrated in [Ire92]. 6 Implementation and results The proof critics presented here have been implemented and tested. Our implementation is an extension of the clam <ref> [BvHHS90] </ref> proof planning system and exploits the higher-order features of -Prolog [MN88]. Our test results are presented in tables 2, 3 and 4. The proofs of all the example 28 conjectures 8 given in table 2 are discovered completely automatically.
Reference: [BvHSI90] <author> A. Bundy, F. van Harmelen, A. Smaill, and A. Ireland. </author> <title> Extensions to the rippling-out tactic for guiding inductive proofs. In M.E. </title> <editor> Stickel, editor, </editor> <booktitle> 10th International Conference on Automated Deduction, </booktitle> <pages> pages 132-146. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year> <note> Lecture Notes in Artificial Intelligence No. 449. Also available from Edinburgh as DAI Research Paper 459. </note>
Reference-contexts: Most inductive theorem provers rely upon user intervention in spotting the need for, and in constructing such eureka steps. In contrast we present a theorem proving architecture which supports the automatic discovery of eureka steps through 2 the analysis of failed proof attempts. Our approach builds upon rippling <ref> [BvHSI90, BSvH + 93] </ref>, a heuristic which plays a pivotal role in guiding the search for an inductive proof. We demonstrate how the constraints rippling places on the search space and its declarative nature enable us to automatically patch failed proof attempts through the construction of appropriate eureka steps.
Reference: [BW81] <author> A. Bundy and B. Welham. </author> <title> Using meta-level inference for selective application of multiple rewrite rules in algebraic manipulation. </title> <journal> Artificial Intelligence, </journal> <volume> 16(2) </volume> <pages> 189-212, </pages> <year> 1981. </year> <note> Also available from Edinburgh as DAI Research Paper 121. </note>
Reference-contexts: We have shown, through the use of proof critics, that rippling provides useful heuristic guidance even when a proof attempt fails. More generally, it has been argued <ref> [BW81] </ref> that the separation of meta-level control information from the object-level logic brings clarity, flexibility and modularity to reasoning systems as well as providing a more constrained search space. The proof critics technique demonstrates another advantage of this separation, namely robustness.
Reference: [BW92] <author> D. Basin and T. Walsh. </author> <title> Difference matching. </title> <editor> In Deepak Kapur, editor, </editor> <booktitle> 11th Conference on Automated Deduction, </booktitle> <pages> pages 295-309, </pages> <address> Saratoga Springs, NY, USA, </address> <month> June </month> <year> 1992. </year> <note> Published as Springer Lecture Notes in Artificial Intelligence, No 607. </note>
Reference-contexts: A similar idea has been applied by Walsh [Wal94] to the problem of proof divergence in the spike [BR93] theorem prover. Divergence patterns generated by spike are used to suggest lemmas. Central to this approach is the technique of difference matching <ref> [BW92] </ref>. Difference matching is used to speculate the structure of missing lemmas by generalizing over a sequence of diverging formulae. This process of overcoming divergence is largely independent of the spike proof strategy.
Reference: [Gen69] <author> G. </author> <title> Gentzen. The Collected Papers of Gerhard Gentzen. </title> <publisher> North Holland, </publisher> <year> 1969. </year> <title> edited by Szabo, M.E. </title>
Reference-contexts: A lemma may be a separate theorem which is required to complete the original proof. The introduction of such a lemma requires the cut rule of inference, i.e ; ff ` fi ` ff The cut rule can be eliminated from predicate calculus <ref> [Gen69] </ref> but not from inductive systems. Since the cut rule allows for the introduction of arbitrary new formulae, lemma discovery introduces an infinite branching point into the search space. * generalization: paradoxically, it is sometimes necessary to generalize a conjecture in order for an inductive proof to succeed.
Reference: [GMW79] <author> M.J. Gordon, A.J. Milner, </author> <title> and C.P. Wadsworth. Edinburgh LCF - A mechanised logic of computation, </title> <booktitle> volume 78 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1979. </year>
Reference-contexts: This common structure can be exploited in the search for particular proofs. A proof plan has two complementary components: a proof method and a proof tactic. By prescribing the structure of a proof at the level of primitive inferences, a tactic <ref> [GMW79] </ref> provides the guarantee part of the proof. In contrast a method provides a more declarative explanation of the proof by means of preconditions. Each method has associated effects. The execution of the effects simulates the application of the corresponding tactic.
Reference: [Har29] <author> G.H. Hardy. </author> <title> Mathematical proof. MIND: </title> <journal> A Quarterly Review of Psychology and Philosophy, </journal> <volume> XXXVIII(149):1-25, </volume> <month> January </month> <year> 1929. </year>
Reference-contexts: 1 Introduction 1.1 Motivation G.H. Hardy <ref> [Har29] </ref> draws an analogy between a mathematician and a person observing "a distant range of mountains". The key steps in a proof correspond to peaks in the mountain range. To see the proof one must observe the complete mountain range, i.e. the ridges which link all the peaks.
Reference: [Hes91] <author> J.T. Hesketh. </author> <title> Using Middle-Out Reasoning to Guide Inductive Theorem Proving. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, </institution> <year> 1991. </year>
Reference-contexts: If we choose first order variables then control is not a problem but the framework is not very general [Hut90]. Alternatively, using higher-order variables we gain generality but at the cost of controllability. Meta-level control information provides a basis for regaining controllability. Hesketh <ref> [Hes91] </ref> used the meta-level control information embedded within the wave-front annotations in controlling the search for generalizations. We adopt a similar approach to Hesketh in using the wave-fronts and wave-holes to divide the higher-order unification task into a number of sub-tasks. <p> As a consequence, we believe that the approach presented here provides a powerful framework for patching proofs. Fourthly, the use of higher-order meta variables in discovering generalizations through the introduction of accumulators was first achieved by Hesketh <ref> [Hes91] </ref>. The generalization critic presented here represents a rational reconstruction and extension of this work. Lastly, the case analyses critic is an alternative to having a method for supporting conditional rewriting [BSvH + 93].
Reference: [HK95] <author> D. Hutter and M. Kohlhase. </author> <title> A colored version of the -calculus. </title> <institution> Seki-report sr-95-05, University of Saarland, </institution> <year> 1995. </year>
Reference-contexts: Consequently, the skeleton preservation property of rippling is less useful for restricting search than in the case of lemma discovery. Higher-order annotated unification is a hard problem. We acknowledge that our approach is far from ideal. The interested reader is referred to <ref> [HK95] </ref> for some promising results we may be able to exploit in our future work. 4.4 Critic selection Multiple critics may be applicable to a particular proof failure. Preference is given to the critic with the most restrictive preconditions (see table 1).
Reference: [Hut90] <author> D. Hutter. </author> <title> Guiding inductive proofs. In M.E. </title> <editor> Stickel, editor, </editor> <booktitle> 10th International Conference on Automated Deduction, </booktitle> <pages> pages 147-161. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year> <booktitle> Lecture Notes in Artificial Intelligence No. </booktitle> <volume> 449. </volume> <pages> 31 </pages>
Reference-contexts: That is, while the ripple heuristic controls the rewriting of step-case goals it also constrains the search for induction rules and the application of induction hypotheses. The ripple heuristic is based upon the observation that a copy of the induction hypothesis is embedded within the induction conclusion. Following Hutter <ref> [Hut90] </ref> we call this the skeleton term structure. The role of the ripple method is to eliminate the difference between the conclusion and hypothesis while preserving the skeleton term structure. Meta-level annotations are used to express this control information. <p> The instantiation of such meta variables occurs as a side effect of applying wave-rules. The generality and controllability of such a technique is dependent upon the type of variables used. If we choose first order variables then control is not a problem but the framework is not very general <ref> [Hut90] </ref>. Alternatively, using higher-order variables we gain generality but at the cost of controllability. Meta-level control information provides a basis for regaining controllability. Hesketh [Hes91] used the meta-level control information embedded within the wave-front annotations in controlling the search for generalizations.
Reference: [Ire92] <author> A. Ireland. </author> <title> The Use of Planning Critics in Mechanizing Inductive Proofs. </title> <editor> In A. Voronkov, editor, </editor> <booktitle> International Conference on Logic Programming and Automated Reasoning - LPAR 92, St. Petersburg, Lecture Notes in Artificial Intelligence No. </booktitle> <volume> 624, </volume> <pages> pages 178-189. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year> <note> Also available from Edinburgh as DAI Research Paper 592. </note>
Reference-contexts: All the search is taken care of during the planning process. The real benefits of having separate planning and execution phases become apparent when a proof attempt fails. The declarative nature of method preconditions provides a basis for using failure productively. In <ref> [Ire92] </ref> an extension to the proof planning framework is proposed in which proof critics are introduced in order to complement proof methods. The role of the proof critic is to capture patchable exceptions to the proof method. <p> As well as patching failed proof attempts critics have also been applied to the problem of identifying and correcting faulty conjectures [MBI94]. 3 1.3 Overview In this paper we present the use of the critics mechanism <ref> [Ire92] </ref> in systematically analysing the failure of the ripple heuristic. In x2 a proof plan for induction is outlined in which we emphasize the pivotal role played by rippling. x3 forms the core of the paper. <p> Lemma calculation factors out lemmas and verifies them as separate proof attempts. This eliminates the redundancy problem mentioned above and provides a degree of modularity in structuring proofs. Thirdly, lemma speculation was first presented in <ref> [Ire92] </ref>. A missing lemma typically causes divergence in the rewriting of step-case proofs. Lemma speculation pre-empts such divergence. We are able to achieve this because of the constraints rippling imposes on the search space. <p> The diversity of patches associated with the ripple heuristic demonstrates the power of rippling and the proof critics mechanism. More generally the proof critics mechanism supports the global analysis of the proof process since it has access to the whole proof structure (see x5 of <ref> [Ire92] </ref>). As a consequence, we believe that the approach presented here provides a powerful framework for patching proofs. Fourthly, the use of higher-order meta variables in discovering generalizations through the introduction of accumulators was first achieved by Hesketh [Hes91]. <p> Lastly, the case analyses critic is an alternative to having a method for supporting conditional rewriting [BSvH + 93]. The critic mechanism, however, allows for more sophisticated case analyses involving the composition of multiple partial proofs. This idea is illustrated in <ref> [Ire92] </ref>. 6 Implementation and results The proof critics presented here have been implemented and tested. Our implementation is an extension of the clam [BvHHS90] proof planning system and exploits the higher-order features of -Prolog [MN88]. Our test results are presented in tables 2, 3 and 4.
Reference: [MBI94] <author> R. Monroy, A. Bundy, and A. Ireland. </author> <title> Proof Plans for the Correction of False Conjectures. </title> <editor> In F. Pfenning, editor, </editor> <booktitle> 5th International Conference on Logic Programming and Automated Reasoning, LPAR'94, Lecture Notes in Artificial Intelligence, v. </booktitle> <volume> 822, </volume> <pages> pages 54-68. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <note> Also available from Edinburgh as Research Paper 681. </note>
Reference-contexts: Critics are able to analyse partial proofs and have a global effect upon the proof process. As well as patching failed proof attempts critics have also been applied to the problem of identifying and correcting faulty conjectures <ref> [MBI94] </ref>. 3 1.3 Overview In this paper we present the use of the critics mechanism [Ire92] in systematically analysing the failure of the ripple heuristic.
Reference: [MN88] <author> D. Miller and G. Nadathur. </author> <title> An overview of Prolog. </title> <editor> In R. Bowen, K. & Kowalski, editor, </editor> <booktitle> Proceedings of the Fifth International Logic Programming Conference/ Fifth Symposium on Logic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: This idea is illustrated in [Ire92]. 6 Implementation and results The proof critics presented here have been implemented and tested. Our implementation is an extension of the clam [BvHHS90] proof planning system and exploits the higher-order features of -Prolog <ref> [MN88] </ref>. Our test results are presented in tables 2, 3 and 4. The proofs of all the example 28 conjectures 8 given in table 2 are discovered completely automatically. These proofs are based only upon definitions supplied by the user.
Reference: [MW85] <author> Z. Manna and R. Waldinger. </author> <title> The Logical Basis for Computer Programming, Vol 1: Deductive Reasoning. </title> <publisher> Addison Wesley, </publisher> <address> Reading, Mass, </address> <year> 1985. </year>
Reference-contexts: There is a strong connection between creational wave-rules and well-founded inductions. The discovery of missing creational wave-rules may provide a handle on the problem of generating new inductions dynamically. 8 The examples come from a number of sources which include [Aub75], [BM79], <ref> [MW85] </ref>, [Wal94]. 9 This is without the aid of the linear arithmetic decision procedure. With the decision procedure, nqthm is able to prove T1, T3, T6 and T7.
Reference: [TJ89] <editor> M. Thomas and K.P. Jantke. </editor> <title> Inductive inference for solving divergance in Knuth-Bendix. In K.P. </title> <editor> Jantke, editor, </editor> <title> Analogical and Inductive Inference, Procs. </title> <booktitle> of AII'89, </booktitle> <pages> pages 288-303. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: Thirdly, lemma speculation was first presented in [Ire92]. A missing lemma typically causes divergence in the rewriting of step-case proofs. Lemma speculation pre-empts such divergence. We are able to achieve this because of the constraints rippling imposes on the search space. In contrast, Thomas & Jantke <ref> [TJ89] </ref> observe divergence patterns and use them to suggest generalizations in the context of inductive completion. A similar idea has been applied by Walsh [Wal94] to the problem of proof divergence in the spike [BR93] theorem prover. Divergence patterns generated by spike are used to suggest lemmas.

References-found: 20

