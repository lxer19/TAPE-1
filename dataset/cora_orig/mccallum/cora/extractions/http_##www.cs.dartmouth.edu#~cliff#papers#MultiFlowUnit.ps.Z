URL: http://www.cs.dartmouth.edu/~cliff/papers/MultiFlowUnit.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~cliff/papers/
Root-URL: http://www.cs.dartmouth.edu
Title: Faster approximation algorithms for the unit capacity concurrent flow problem with applications to routing and
Author: Philip Klein Serge Plotkin Clifford Stein Eva Tardos 
Note: Research supported by NSF Research Initiation Award CCR-900-8226, by U.S. Army Research Office Grant #DAAL-03-91-G-0102, and by ONR Contract N00014-88-K-0166. Support provided by NSF PYI Award CCR-89-96272 with matching support from UPS and Sun and by an AT&T Bell Laboratories Graduate Fellowship. Research supported in part by a Packard Research Fellowship and by the National Science Foundation, the Air Force Office of Scientific Research, and the Office of Naval Research, through NSF grant DMS-8920550.  
Address: Providence, RI  Stanford, CA  Cambridge, MA  Ithaca, NY  
Affiliation: Computer Science Department Brown University  Department of Computer Science Stanford University  Laboratory for Computer Science MIT  School of Operations Research Cornell University  
Abstract: In this paper, we describe new algorithms for approximately solving the concurrent multicom-modity flow problem with uniform capacities. Our algorithms are much faster than previously known algorithms. Besides being an important problem in its own right, the uniform-capacity concurrent flow problem has many interesting applications. Leighton and Rao used uniform-capacity concurrent flow to find an approximately "sparsest cut" in a graph, and thereby approximately solve a wide variety of graph problems, including minimum feedback arc set, minimum cut linear arrangement, and minimum area layout. However, their method appeared to be impractical, as it required solving a large linear program. We show that their method might be practical by giving an O(m 2 log m) expected-time randomized algorithm for their concurrent flow problem on an m-edge graph. Raghavan and Thompson used uniform-capacity concurrent flow to approximately solve a channel width minimization problem in VLSI. We give an O(k 3=2 (m + n log n)) expected-time randomized algorithm and an O(k min fn; kg (m + n log n) log k) deterministic algorithm for this problem when the channel width is (log n), where k denotes the number of wires to be routed in an n-node, m-edge network. fl Research partially supported by ONR grant N00014-88-K-0243 and DARPA grant N00039-88-C0113 at Harvard University. Additional support provided by NSF Research Initiation Award CCR-901-2357, and by . the Office of Naval Research and the Defense Advanced Research Projects Agency under contract N00014-83-K-0146 and ARPA order 6320, amendment 1. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Thomas H. Cormen, Charles E. Leiserson, and Ronald L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press/McGraw-Hill, </publisher> <year> 1990. </year>
Reference-contexts: If the array gets too empty, copy its contents into a new array of half the size. The time required for copying can be amortized over the time required for the deletions that emptied the array. (See, for example, <ref> [1] </ref>, for a detailed description of this data structure.) Now we consider the more general case, in which the flow values of flow paths may vary. In this case, we use a three-level data structure. In the top level, the paths are organized according to their 15 starting nodes.
Reference: [2] <author> R. Dial. </author> <title> Algorithm 360: Shortest path forest with topological ordering. </title> <journal> Communications of the ACM, </journal> <volume> 12 </volume> <pages> 632-633, </pages> <year> 1969. </year>
Reference-contexts: ` (s; t) + n * 0 `(P ) = dist ` (s; t) + * 0 `(P ) Further, since each shortest path length is an integer multiple of * 0 `(P ) 2n , and no more than `(P ), we can use Dial's implementation of Dijkstra's algorithm <ref> [2] </ref> to compute dist ~ ` (s; t) in O (m + n* 1 ) time. Implementing FindPath with this approximate shortest path computation directly improves the time required by a deterministic implementation of Reduce.
Reference: [3] <author> M.L. Fredman and R.E. Tarjan. </author> <title> Fibonacci heaps and their uses in improved network optimization algorithms. </title> <journal> Journal of the ACM, </journal> <volume> 34 </volume> <pages> 596-615, </pages> <year> 1987. </year>
Reference-contexts: All of these algorithms use the shortest-paths algorithm of Fredman and Tarjan <ref> [3] </ref> that runs in O (m + n log n) time. To deterministically find a bad flow path, we first compute, for every source node s i , the length of the shortest path from s i to every other node v.
Reference: [4] <author> A. V. Goldberg and R. E. Tarjan. </author> <title> Solving minimum-cost flow problems by successive approximation. </title> <journal> Mathematics of Operations Research, </journal> <volume> 15(3) </volume> <pages> 430-466, </pages> <year> 1990. </year>
Reference-contexts: Our notion of relaxed optimality is analogous to the notion of *-optimality used by Goldberg and Tarjan in the context of the minimum-cost flow problem <ref> [4] </ref>. Let * &gt; 0 be an error parameter, f a multicommodity flow and ` a length function. Throughout this section we shall use * 0 to denote * 7 .
Reference: [5] <author> M. D. Hansen. </author> <title> Approximation algorithms for geometric embeddings in the plane with applications to parallel processing problems. </title> <booktitle> In Proceedings of the 30th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 604-610. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1989. </year>
Reference-contexts: As a consequence, they and other researchers have developed polylog-times-optimal approximation algorithms for a wide variety of graph problems, including minimum area VLSI layout, minimum cut linear arrangement, minimum feedback arc set [11], optimal linear and higher-dimensional arrangement <ref> [5] </ref>, minimum chordal fill [7], and single-processor scheduling [14]. The computational bottleneck of the method of Leighton and Rao is solving a unit-capacity concurrent flow problem with O (n) commodities, each with unit demand.
Reference: [6] <author> S. Kapoor and P. M. Vaidya. </author> <title> Fast algorithms for convex quadratic programming and multicom-modity flows. </title> <booktitle> In Proceedings of the 18th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 147-159, </pages> <year> 1986. </year>
Reference-contexts: Our algorithms compare favorably to previous work. The concurrent flow problem can be formulated as a linear program in O (mk) variables and O (m + nk) constraints (see, for example [15]). Linear programming can be used to solve the problem optimally in polynomial time. Kapoor and Vaidya <ref> [6] </ref> gave a method to speed up the matrix inversions involved in Karmarkar type algorithms for multicommodity flow problems; combining their technique with Vaidya's new linear programming algorithm using fast matrix multiplication [18] yields a time bound of O (k 3:5 n 3 p m log (nD)) for the unit-capacity concurrent
Reference: [7] <author> P. Klein, A. Agrawal, R. Ravi, and S. Rao. </author> <title> Approximation through multicommodity flow. </title> <booktitle> In Proceedings of the 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 726-737, </pages> <year> 1990. </year>
Reference-contexts: As a consequence, they and other researchers have developed polylog-times-optimal approximation algorithms for a wide variety of graph problems, including minimum area VLSI layout, minimum cut linear arrangement, minimum feedback arc set [11], optimal linear and higher-dimensional arrangement [5], minimum chordal fill <ref> [7] </ref>, and single-processor scheduling [14]. The computational bottleneck of the method of Leighton and Rao is solving a unit-capacity concurrent flow problem with O (n) commodities, each with unit demand. They appealed to linear programming techniques to show that the problem can be solved in polynomial time.
Reference: [8] <author> P. Klein and C. Stein. </author> <title> Leighton-Rao might be practical: a faster approximation algorithm for uniform concurrent flow. </title> <type> Unpublished manuscript, </type> <month> November </month> <year> 1989. </year>
Reference: [9] <author> P. Klein, C. Stein, and E. Tardos. </author> <title> Leighton-Rao might be practical: faster approximation algorithms for concurrent flow with uniform capacities. </title> <booktitle> In Proceedings of the 22nd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 310-321, </pages> <month> May </month> <year> 1990. </year> <month> 21 </month>
Reference-contexts: Note that by use of various combinations of our techniques, we can obtain slightly better bounds than those stated in Theorems 1.1 and 1.3. An earlier version of this paper has appeared in <ref> [9] </ref>. In the earlier version the case when both the capacities and the demands are uniform was considered separately from the more general case when only the capacities are assumed to be uniform.
Reference: [10] <author> F. T. Leighton, </author> <month> November </month> <year> 1989. </year> <title> Private communication. </title>
Reference-contexts: In their paper, they appealed to the fact that concurrent flow can be formulated as a linear program, and hence can be solved in polynomial time. A much more efficient approach is to use our unit-capacity approximation algorithm. The number of commodities required is O (n 2 ). Leighton <ref> [10] </ref> has discovered a technique to reduce the number of commodities required.
Reference: [11] <author> T. Leighton and S. Rao. </author> <title> An approximate max-flow min-cut theorem for uniform multicommodity flow problems with applications to approximation algorithms. </title> <booktitle> In Proceedings of the 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 422-431, </pages> <year> 1988. </year>
Reference-contexts: This technique enables each iteration to be carried out much more quickly than by using known deterministic methods. Part of our motivation in developing algorithms for concurrent flow derives from two important applications, finding sparsest cuts and finding a VLSI routing that minimizes channel width. Leighton and Rao <ref> [11] </ref> showed how to use the solution to a unit-capacity concurrent flow problem to find an approximate "sparsest cut" of a graph. <p> As a consequence, they and other researchers have developed polylog-times-optimal approximation algorithms for a wide variety of graph problems, including minimum area VLSI layout, minimum cut linear arrangement, minimum feedback arc set <ref> [11] </ref>, optimal linear and higher-dimensional arrangement [5], minimum chordal fill [7], and single-processor scheduling [14]. The computational bottleneck of the method of Leighton and Rao is solving a unit-capacity concurrent flow problem with O (n) commodities, each with unit demand. <p> The first application is to efficiently implement Leighton and Rao's sparsest cut approximation algorithm <ref> [11] </ref>, and the second application is to approximately minimize channel width in VLSI routing; the second problem was considered by Raghavan and Thompson [13] and Raghavan [12]. We start by reviewing the result of Leighton and Rao concerning finding an approximately sparsest cut in a graph. <p> A cut is sparsest if ffi (A; B)=(jAjjBj) is minimized. Leighton and Rao <ref> [11] </ref> gave an O (log n)-approximation algorithm for finding the sparsest cut of a graph. By applying this algorithm they obtained polylog times-optimal approximation algorithms for a wide variety of NP-complete graph problems, including 18 minimum feedback arc set, minimum cut linear arrangement, and minimum area layout.
Reference: [12] <author> P. Raghavan. </author> <title> Probabilistic construction of deterministic algorithms: approximating packing integer programs. </title> <booktitle> In Proceedings of the 27th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 10-18, </pages> <year> 1986. </year>
Reference-contexts: The previous best running time of O (n 4:5 p m log n) [18], is obtained by using linear programming techniques and fast matrix multiplication. Another application of our approximation algorithm is to VLSI routing in graphs. Raghavan and Thompson [13] and Raghavan <ref> [12] </ref> considered the problem of routing two-terminal nets (essentially wires) in a graph so as to approximately minimize the channel width, i.e., the maximum number of nets routed through an edge. The computational bottleneck in their algorithms is solving a unit-capacity concurrent flow problem. <p> The first application is to efficiently implement Leighton and Rao's sparsest cut approximation algorithm [11], and the second application is to approximately minimize channel width in VLSI routing; the second problem was considered by Raghavan and Thompson [13] and Raghavan <ref> [12] </ref>. We start by reviewing the result of Leighton and Rao concerning finding an approximately sparsest cut in a graph. <p> In fact, the constant implicit in this bound is quite small. Later Raghavan <ref> [12] </ref> showed how this conversion method can be made deterministic. The computational bottleneck is, once again, solving a unit-capacity concurrent flow problem. Theorems 5.3 and 5.4 are applicable, and yield good algorithms.
Reference: [13] <author> P. Raghavan and C. D. Thompson. </author> <title> Provably good routing in graphs: regular arrays. </title> <booktitle> In Proceedings of the 17th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 79-87, </pages> <year> 1985. </year>
Reference-contexts: The previous best running time of O (n 4:5 p m log n) [18], is obtained by using linear programming techniques and fast matrix multiplication. Another application of our approximation algorithm is to VLSI routing in graphs. Raghavan and Thompson <ref> [13] </ref> and Raghavan [12] considered the problem of routing two-terminal nets (essentially wires) in a graph so as to approximately minimize the channel width, i.e., the maximum number of nets routed through an edge. The computational bottleneck in their algorithms is solving a unit-capacity concurrent flow problem. <p> The first application is to efficiently implement Leighton and Rao's sparsest cut approximation algorithm [11], and the second application is to approximately minimize channel width in VLSI routing; the second problem was considered by Raghavan and Thompson <ref> [13] </ref> and Raghavan [12]. We start by reviewing the result of Leighton and Rao concerning finding an approximately sparsest cut in a graph. <p> For purposes of regularity the channels have uniform width. It is desirable to minimize that width in order to minimize the total area of the VLSI circuit. Raghavan and Thompson <ref> [13] </ref> give an approximation algorithm for minimizing the channel width. They model the problem as a graph problem in which one must route wires between pairs of nodes in a graph G so as to minimize the maximum number of wires routed through an edge. <p> But if w min is (log n), we can do substantially better. 2 In this case, a modified version of our algorithm ScalingConcurrent directly yields an integral f satisfying (5), although the big-Oh constant is not as good as that of <ref> [13] </ref>. Consider the procedure ScalingConcurrent. It consists of two parts. First the procedure Concurrent is called with * = 1 10 to achieve 1 10 -optimality. Next, ScalingConcurrent repeat edly calls Reduce, reducing the error parameter * by a factor of two every iteration, till the required accuracy is achieved.
Reference: [14] <author> R. Ravi, A. Agrawal, and P. Klein. </author> <title> Ordering problems approximated: single-processor scheduling and interval graph completion. </title> <booktitle> In Proceedings of the 1991 ICALP Conference, </booktitle> <pages> pages 751-762, </pages> <year> 1991. </year>
Reference-contexts: As a consequence, they and other researchers have developed polylog-times-optimal approximation algorithms for a wide variety of graph problems, including minimum area VLSI layout, minimum cut linear arrangement, minimum feedback arc set [11], optimal linear and higher-dimensional arrangement [5], minimum chordal fill [7], and single-processor scheduling <ref> [14] </ref>. The computational bottleneck of the method of Leighton and Rao is solving a unit-capacity concurrent flow problem with O (n) commodities, each with unit demand. They appealed to linear programming techniques to show that the problem can be solved in polynomial time.
Reference: [15] <author> F. Shahrokhi and D. W. Matula. </author> <title> The maximum concurrent flow problem. </title> <journal> Journal of the ACM, </journal> <volume> 37:318 - 334, </volume> <year> 1990. </year>
Reference-contexts: Our algorithms compare favorably to previous work. The concurrent flow problem can be formulated as a linear program in O (mk) variables and O (m + nk) constraints (see, for example <ref> [15] </ref>). Linear programming can be used to solve the problem optimally in polynomial time. <p> Shahrokhi and Matula <ref> [15] </ref> gave a combinatorial fully polynomial approximation scheme for the unit-capacity concurrent flow problem (which they called the concurrent flow problem with uniform capacities). Their algorithm runs in O (nm 7 * 5 ) time. <p> Their algorithm runs in O (nm 7 * 5 ) time. Our approach to solving concurrent flow problems is a modification of the framework originated by Shahrokhi and Matula <ref> [15] </ref>. The idea is to use a length function on the edges to reflect congestion, and iteratively reroute flow from long (more congested) paths to short (less congested) paths. Our approach differs from that of Shahrokhi and Matula in several ways. <p> We consider the optimization version of the multicommodity flow problem, called the concurrent flow problem, and first defined by Shahrokhi and Matula <ref> [15] </ref>. In this problem the objective is to compute the maximum possible value z such that there is a feasible multicommodity flow with demands z d (i) for every 1 i k. We call z the throughput of the multicommodity flow. <p> For a path P we shall use `(P ) to denote the length of P . We shall use j`j 1 to denote P sum of the length of the edges. The following theorem is a special case of the linear programming duality theorem (see, for example, <ref> [15] </ref>). <p> The basic step in our algorithms is choosing a flow path and rerouting some flow from this path to a "better" path. This step closely resembles the basic step in the algorithm of Shahrokhi and Matula <ref> [15] </ref>. The main differences are in the way we choose the paths and in the amount of flow that is rerouted at each iteration. The key idea is to measure how good the current flow is by using the notion of *-optimality, described in the previous section.
Reference: [16] <author> D D. Sleator and R.E. Tarjan. </author> <title> A data structure for dynamic trees. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 26 </volume> <pages> 362-391, </pages> <year> 1983. </year>
Reference-contexts: We must first update the flow graph G i to reflect this change. Second, the update might introduce directed cycles in G i , so we must eliminate such cycles of flow. We use an algorithm due to Sleator and Tarjan <ref> [16] </ref> to implement this process. Sleator and Tarjan gave a simple O (nm) algorithm and a more sophisticated O (m log n) algorithm for the problem of converting an arbitrary flow into an acyclic flow.
Reference: [17] <author> E. Tardos. </author> <title> Improved approximation algorithm for concurrent multi-commodity flows. </title> <type> Technical Report 872, </type> <institution> School of Operations Research and Industrial Engineering, Cornell University, </institution> <month> October </month> <year> 1989. </year>
Reference: [18] <author> P. M. Vaidya. </author> <title> Speeding up linear programming using fast matrix multiplication. </title> <booktitle> In Proceedings of the 30th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 332-337, </pages> <year> 1989. </year> <month> 22 </month>
Reference-contexts: Theorem 1.2 An O (log n)-factor approximation to the sparsest cut in a graph can be found by a randomized algorithm in expected O (m 2 log m) time. The previous best running time of O (n 4:5 p m log n) <ref> [18] </ref>, is obtained by using linear programming techniques and fast matrix multiplication. Another application of our approximation algorithm is to VLSI routing in graphs. <p> Linear programming can be used to solve the problem optimally in polynomial time. Kapoor and Vaidya [6] gave a method to speed up the matrix inversions involved in Karmarkar type algorithms for multicommodity flow problems; combining their technique with Vaidya's new linear programming algorithm using fast matrix multiplication <ref> [18] </ref> yields a time bound of O (k 3:5 n 3 p m log (nD)) for the unit-capacity concurrent flow problem with integer demands (where D denotes the sum of the demands) and an O ( p mk 2:5 n 2 log (n* 1 D)) bound for the approximation problem.
References-found: 18

