URL: http://www.cs.tamu.edu/people/cvj3341/research/ss-icra99.ps.gz
Refering-URL: http://www.cs.tamu.edu/people/cvj3341/research/research.html
Root-URL: http://www.cs.tamu.edu
Email: famato,cvj3341,dvallejog@cs.tamu.edu  
Title: An Adaptive Framework for `Single Shot' Motion Planning  
Author: Nancy M. Amato Christopher Jones Daniel Vallejo 
Address: College Station, TX 77843-3112  
Affiliation: Department of Computer Science, Texas A&M University  
Abstract: This paper proposes an adaptive framework for single shot motion planning (i.e., planning without preprocessing). This framework can be used in any situation, and in particular, is suitable for crowded environments in which the robot's free C-space has narrow corridors. The main idea of the proposed framework is that one should adaptively select a planner whose strengths match the current situation, and then switch to a different planner when circumstances change. This approach requires that we develop a set of planners, and characterize the strengths and weaknesses of each planner in such a way that we can easily select the best planner for the current situation. Our experimental results show that adaptive selection of different planning methods enables the algorithms to be used in a cooperative manner to successfully solve queries that none of them would be able to solve on their own. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. M. Ahuactzin and K. Gupta. </author> <title> A motion planning based approach for inverse kinematics of redundant robots: The kinematic roadmap. </title> <booktitle> In Proc. IEEE Int. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 3609-3614, </pages> <year> 1997. </year>
Reference-contexts: Queries are then processed by connecting the initial and goal configurations to the roadmap, and then finding a path in the roadmap between these two connection points. Recently, randomized or probabilistic roadmap methods (prms) have gained much attention for problems involving high-dimensional C-spaces <ref> [1, 2, 3, 4, 10, 12, 13, 16, 17] </ref>. Typically, the vertices of these roadmaps are obtained by sampling the robot's configuration space.
Reference: [2] <author> N. M. Amato, O. B. Bayazit, L. K. Dale, C. V. Jones, and D. Vallejo. </author> <title> Choosing good distance metrics and local planners for probabilistic roadmap methods. </title> <booktitle> In Proc. IEEE Int. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 630-637, </pages> <year> 1998. </year>
Reference-contexts: Queries are then processed by connecting the initial and goal configurations to the roadmap, and then finding a path in the roadmap between these two connection points. Recently, randomized or probabilistic roadmap methods (prms) have gained much attention for problems involving high-dimensional C-spaces <ref> [1, 2, 3, 4, 10, 12, 13, 16, 17] </ref>. Typically, the vertices of these roadmaps are obtained by sampling the robot's configuration space. <p> The particular methods currently in our bank are: * straight-line in C-space 3 * rotate-at-s planners * simple A fl -like planners All methods are described in detail in <ref> [2] </ref>. Briefly, the rotate-at-s planner first translates to an intermediate configuration c 0 , then rotates to the goal's orientation, and then translates to the goal; the parameter s represents the fractional part of the translational distance between the start and the goal that the robot first translates. <p> The fringe set for the next iteration is a subset of the current iterations fringeSpread set; it is first biased towards configurations far from the start, and then towards configurations close to the goal. (Distances are computed based on some C-space metric <ref> [2] </ref>.) After the iterative process, a path from the start to the goal is sought which uses intermediate configurations from all previous fringe sets.
Reference: [3] <author> N. M. Amato, O. B. Bayazit, L. K. Dale, C. V. Jones, and D. Vallejo. OBPRM: </author> <title> An obstacle-based PRM for 3D workspaces. </title> <booktitle> In Proc. Int. Workshop on Algorithmic Foundations of Robotics (WAFR), </booktitle> <year> 1998. </year>
Reference-contexts: Queries are then processed by connecting the initial and goal configurations to the roadmap, and then finding a path in the roadmap between these two connection points. Recently, randomized or probabilistic roadmap methods (prms) have gained much attention for problems involving high-dimensional C-spaces <ref> [1, 2, 3, 4, 10, 12, 13, 16, 17] </ref>. Typically, the vertices of these roadmaps are obtained by sampling the robot's configuration space. <p> This is implemented by passing all fringe configurations and the start and goal to the connection phase of our obprm probabilistic roadmap planning algorithm <ref> [3] </ref>. 3.3 Recursive Midpoint Method (RMM) Another single shot motion planning method included in the algorithm bank is the recursive midpoint method (rmm).
Reference: [4] <author> N. M. Amato and Y. Wu. </author> <title> A randomized roadmap method for path and manipulation planning. </title> <booktitle> In Proc. IEEE Int. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 113-120, </pages> <address> Minneapolis, MN, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: Queries are then processed by connecting the initial and goal configurations to the roadmap, and then finding a path in the roadmap between these two connection points. Recently, randomized or probabilistic roadmap methods (prms) have gained much attention for problems involving high-dimensional C-spaces <ref> [1, 2, 3, 4, 10, 12, 13, 16, 17] </ref>. Typically, the vertices of these roadmaps are obtained by sampling the robot's configuration space.
Reference: [5] <author> J. Barraquand and J.-C. Latombe. </author> <title> Robot motion planning: A distributed representation approach. </title> <journal> Int. J. Robot. Res., </journal> <volume> 10(6) </volume> <pages> 628-649, </pages> <year> 1991. </year>
Reference-contexts: Motion planning methods that operate in this fashion are often called single shot methods. One of the first randomized planning methods was the Randomized Path Planner (RPP) of Barraquand and Latombe <ref> [5] </ref>, which is a single shot planner. This method belongs to the general class of potential field methods, and uses random walks to attempt to try to escape local minima. <p> We have shown that this strategy can be used to solve challenging problems. However, much work remains to fully develop the framework. For example, more diverse algorithms need to be added to the algorithm bank (e.g., randomized methods such as RPP <ref> [5] </ref>) which can handle specialized situations (e.g., backing out of dead end, turning a sharp corner, etc.). Also, more work is needed to determine appropriate ways to evaluate configurations and select algorithms with matching strengths.
Reference: [6] <author> D. J. Challou, M. Gini, and V. Kumar. </author> <title> Parallel search algorithms for robot motion planning. </title> <booktitle> In Proc. IEEE Int. Conf. Robot. Autom. (ICRA), </booktitle> <volume> volume 2, </volume> <pages> pages 46-51, </pages> <year> 1993. </year>
Reference-contexts: This method belongs to the general class of potential field methods, and uses random walks to attempt to try to escape local minima. In general, these methods can be quite effective when the configuration space (C-space) is relatively uncluttered, but there exist simple situations in which they can fail <ref> [6, 12] </ref>. Some success has been achieved in adapting the general prm strategy to solve single queries by trying to restrict attention to `useful' portions of the C-space [10, 17].
Reference: [7] <author> H. Chang and T. Y. Li. </author> <title> Assembly maintainability study with motion planning. </title> <booktitle> In Proc. IEEE Int. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 1012-1019, </pages> <year> 1995. </year>
Reference-contexts: Motion planning algorithms for testing such conditions automatically during the design process would be a great aid to engineers, and have been the subject of previous work <ref> [7] </ref>. Such problems are ideal for single shot methods since one typically only needs to solve the problem once in a given environment.
Reference: [8] <author> B. R. Donald. </author> <title> A search algorithm for motion planning with six degrees of freedom. </title> <journal> Artif. Intell., </journal> <volume> 31(3) </volume> <pages> 295-353, </pages> <year> 1987. </year>
Reference-contexts: Some success has been achieved in adapting the general prm strategy to solve single queries by trying to restrict attention to `useful' portions of the C-space [10, 17]. A related idea is to use a sample of free points to specify promising subgoals for planning <ref> [8, 9] </ref>. 1 Single shot methods are also useful in dynamic en-vironments where obstacles in the workspace can move between queries. For example, roadmaps are rendered obsolete when an obstacle moves and must be regenerated or updated before a new query can safely be made.
Reference: [9] <author> B. Glavina. </author> <title> Solving findpath by combination of directed and randomized search. </title> <booktitle> In Proc. IEEE Int. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 1718-1723, </pages> <year> 1990. </year>
Reference-contexts: Some success has been achieved in adapting the general prm strategy to solve single queries by trying to restrict attention to `useful' portions of the C-space [10, 17]. A related idea is to use a sample of free points to specify promising subgoals for planning <ref> [8, 9] </ref>. 1 Single shot methods are also useful in dynamic en-vironments where obstacles in the workspace can move between queries. For example, roadmaps are rendered obsolete when an obstacle moves and must be regenerated or updated before a new query can safely be made.
Reference: [10] <author> D. Hsu, J-C. Latombe, and R. Motwani. </author> <title> Path planning in expansive configuration spaces. </title> <booktitle> In Proc. IEEE Int. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 2719-2726, </pages> <year> 1997. </year>
Reference-contexts: Queries are then processed by connecting the initial and goal configurations to the roadmap, and then finding a path in the roadmap between these two connection points. Recently, randomized or probabilistic roadmap methods (prms) have gained much attention for problems involving high-dimensional C-spaces <ref> [1, 2, 3, 4, 10, 12, 13, 16, 17] </ref>. Typically, the vertices of these roadmaps are obtained by sampling the robot's configuration space. <p> Some success has been achieved in adapting the general prm strategy to solve single queries by trying to restrict attention to `useful' portions of the C-space <ref> [10, 17] </ref>. A related idea is to use a sample of free points to specify promising subgoals for planning [8, 9]. 1 Single shot methods are also useful in dynamic en-vironments where obstacles in the workspace can move between queries.
Reference: [11] <author> Y. K. Hwang and N. Ahuja. </author> <title> Gross motion planning a survey. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(3) </volume> <pages> 219-291, </pages> <year> 1992. </year>
Reference-contexts: Although many different motion planning methods have been proposed, most are not used in practice since they are computation-ally infeasible except for some restricted cases, e.g., when the robot has very few degrees of freedom (dof) <ref> [11, 14] </ref>. Indeed, there is strong evidence that any complete planner (one that is guaranteed to find a solution or determine that none exists) requires time exponential in the number of dof of the robot [18]. For this reason, attention has focussed on randomized or probabilistic motion planning methods.
Reference: [12] <author> L. Kavraki and J. C. Latombe. </author> <title> Randomized preprocessing of configuration space for fast path planning. </title> <booktitle> In Proc. IEEE Int. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 2138-2145, </pages> <year> 1994. </year>
Reference-contexts: Queries are then processed by connecting the initial and goal configurations to the roadmap, and then finding a path in the roadmap between these two connection points. Recently, randomized or probabilistic roadmap methods (prms) have gained much attention for problems involving high-dimensional C-spaces <ref> [1, 2, 3, 4, 10, 12, 13, 16, 17] </ref>. Typically, the vertices of these roadmaps are obtained by sampling the robot's configuration space. <p> This method belongs to the general class of potential field methods, and uses random walks to attempt to try to escape local minima. In general, these methods can be quite effective when the configuration space (C-space) is relatively uncluttered, but there exist simple situations in which they can fail <ref> [6, 12] </ref>. Some success has been achieved in adapting the general prm strategy to solve single queries by trying to restrict attention to `useful' portions of the C-space [10, 17].
Reference: [13] <author> L. Kavraki, P. Svestka, J. C. Latombe, and M. Over-mars. </author> <title> Probabilistic roadmaps for path planning in high-dimensional configuration spaces. </title> <journal> IEEE Trans. Robot. Automat., </journal> <volume> 12(4) </volume> <pages> 566-580, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: Queries are then processed by connecting the initial and goal configurations to the roadmap, and then finding a path in the roadmap between these two connection points. Recently, randomized or probabilistic roadmap methods (prms) have gained much attention for problems involving high-dimensional C-spaces <ref> [1, 2, 3, 4, 10, 12, 13, 16, 17] </ref>. Typically, the vertices of these roadmaps are obtained by sampling the robot's configuration space.
Reference: [14] <author> J. C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: Although many different motion planning methods have been proposed, most are not used in practice since they are computation-ally infeasible except for some restricted cases, e.g., when the robot has very few degrees of freedom (dof) <ref> [11, 14] </ref>. Indeed, there is strong evidence that any complete planner (one that is guaranteed to find a solution or determine that none exists) requires time exponential in the number of dof of the robot [18]. For this reason, attention has focussed on randomized or probabilistic motion planning methods.
Reference: [15] <author> B. Mirtich. V-clip: </author> <title> Fast and robust polyhedral collision detection. </title> <type> Technical Report TR97-05, </type> <institution> Mitsubishi Electric Research Lab, </institution> <address> Cambridge, MA, </address> <year> 1997. </year>
Reference-contexts: All of these situations can be (approximately) tested using computable values such as the distance to the nearest obstacle, which are easily obtainable from most collision detection algorithms <ref> [15, 19, 20] </ref>. Each planning algorithm in the bank has characteristic values corresponding to how well it performs in the situations distinguished above. When an algorithm is added to the bank, values are assigned to these characteristics to represent the optimal or "ideal" working situation for the algorithm.
Reference: [16] <author> M. Overmars. </author> <title> A random approach to path planning. </title> <type> Technical Report RUU-CS-92-32, </type> <institution> Computer Science, Utrecht University, </institution> <address> The Netherlands, </address> <year> 1992. </year>
Reference-contexts: Queries are then processed by connecting the initial and goal configurations to the roadmap, and then finding a path in the roadmap between these two connection points. Recently, randomized or probabilistic roadmap methods (prms) have gained much attention for problems involving high-dimensional C-spaces <ref> [1, 2, 3, 4, 10, 12, 13, 16, 17] </ref>. Typically, the vertices of these roadmaps are obtained by sampling the robot's configuration space.
Reference: [17] <author> M. Overmars and P. Svestka. </author> <title> A probabilistic learning approach to motion planning. </title> <booktitle> In Proc. Workshop on Algorithmic Foundations of Robotics, </booktitle> <pages> pages 19-37, </pages> <year> 1994. </year>
Reference-contexts: Queries are then processed by connecting the initial and goal configurations to the roadmap, and then finding a path in the roadmap between these two connection points. Recently, randomized or probabilistic roadmap methods (prms) have gained much attention for problems involving high-dimensional C-spaces <ref> [1, 2, 3, 4, 10, 12, 13, 16, 17] </ref>. Typically, the vertices of these roadmaps are obtained by sampling the robot's configuration space. <p> Some success has been achieved in adapting the general prm strategy to solve single queries by trying to restrict attention to `useful' portions of the C-space <ref> [10, 17] </ref>. A related idea is to use a sample of free points to specify promising subgoals for planning [8, 9]. 1 Single shot methods are also useful in dynamic en-vironments where obstacles in the workspace can move between queries.
Reference: [18] <author> J. Reif. </author> <title> Complexity of the piano mover's problem and generalizations. </title> <booktitle> In Proc. IEEE Symp. Foundations of Computer Science (FOCS), </booktitle> <pages> pages 421-427, </pages> <year> 1979. </year>
Reference-contexts: Indeed, there is strong evidence that any complete planner (one that is guaranteed to find a solution or determine that none exists) requires time exponential in the number of dof of the robot <ref> [18] </ref>. For this reason, attention has focussed on randomized or probabilistic motion planning methods.
Reference: [19] <author> P. Xavier. </author> <title> Fast swept-volume distance for robust collision detection. </title> <booktitle> In Proc. IEEE Int. Conf. Robot. Au-tom. (ICRA), </booktitle> <pages> pages 1162-1169, </pages> <year> 1997. </year>
Reference-contexts: All of these situations can be (approximately) tested using computable values such as the distance to the nearest obstacle, which are easily obtainable from most collision detection algorithms <ref> [15, 19, 20] </ref>. Each planning algorithm in the bank has characteristic values corresponding to how well it performs in the situations distinguished above. When an algorithm is added to the bank, values are assigned to these characteristics to represent the optimal or "ideal" working situation for the algorithm.
Reference: [20] <author> P. G. Xavier and R. A. LaFarge. </author> <title> A configuration space toolkit for automated spatial reasoning: Technical results and ldrd project final report. </title> <type> Technical Report SAND97-0366, </type> <institution> Sandia National Laboratories, </institution> <year> 1997. </year> <month> 7 </month>
Reference-contexts: All of these situations can be (approximately) tested using computable values such as the distance to the nearest obstacle, which are easily obtainable from most collision detection algorithms <ref> [15, 19, 20] </ref>. Each planning algorithm in the bank has characteristic values corresponding to how well it performs in the situations distinguished above. When an algorithm is added to the bank, values are assigned to these characteristics to represent the optimal or "ideal" working situation for the algorithm. <p> When applied to algorithms in the bank, such methods would lead to self-adaptive algorithms. Acknowledgement We would like to thank the robotics group at Texas A&M. The collision detection library used in our code was Pat Xavier's C-Space Toolkit <ref> [20] </ref>. GE provided us with that CAD model and Product Vision, their CAD animation package.
References-found: 20

