URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1993/TR23.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: radiya-v@cis.ohio-state.edu, panda@cis.ohio-state.edu  
Phone: Tel: (614)-292-5199, FAX: (614)-292-2911  
Title: Task Assignment on Distributed-Memory Systems with Adaptive Wormhole Routing  
Author: Vibha A. Dixit-Radiya and Dhabaleswar K. Panda 
Keyword: Index Terms task assignment, wormhole-routing, adaptive routing, link contention, temporal communication graph, critical path, message-ordering, distributed memory systems.  
Note: Manuscript submitted on May 1, 1993 for IEEE Symposium on Parallel and Distributed Processing, 1993. All rights reserved by the authors until publication.  
Address: Columbus, Ohio 43210  
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract: Assignment of tasks of a parallel program onto processors of a distributed-memory system is critical to obtain minimal program completion time by minimizing communication overhead. Wormhole-routing switching technique, with various adaptive routing strategies, is increasingly becoming the trend to build scalable distributed-memory systems. This paper presents task assignment heuristics for such wormhole-routed systems and analyzes the effect of adaptive routing. A Temporal Communication Graph (TCG) is used to model task graphs and to identify communication steps that conflict both temporally and spatially. Heuristics are proposed to capture temporal link contention and derive optimal assignment in an iterative manner by pairwise exchanging of processors, associated with the critical communication edges, within d hops. The interplay between degree of routing adaptivity, topology, application characteristics, and optimal task assignment are studied through simulation experiments using random task graphs. The study indicates that even for systems supporting fully adaptive routing, optimal task assignment is necessary to reduce program completion time for communication bound applications. The proposed heuristics are general and can be applied to programs with regular/irregular communication and to any distributed-memory host system supporting message communication over minimal path. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Wayne Bollinger and Scott F. Midkiff, </author> <title> "Heursitic Technique for Processor and Link Assignment in Multicomputers," </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. 40, No. 3, </volume> <month> Mar </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Task assignment problem is defined as mapping tasks of a parallel program onto processors of a host multiprocessor system such that the program gets executed with minimal time <ref> [1, 14] </ref>. If the number of tasks exceeds the number of processors, the assignment phase is preceded by a clustering phase [5, 9, 10, 13, 19]. On distributed-memory systems, some messages need to travel longer paths depending on the distance between the communicating processors. <p> Hence, the assignment phase must consider the unequal distances between processors and link contention in obtaining an efficient solution. Previous research related to the assignment problem has modeled a distributed-memory program as task interaction graph <ref> [1, 9, 14] </ref>. These graphs only capture volume of communication between tasks and ignore the temporal information (when message communication occurs and by how much) completely. Some researchers [1, 14] have considered link contention for restricted cases of programs when communication between all tasks is synchronized. <p> Previous research related to the assignment problem has modeled a distributed-memory program as task interaction graph [1, 9, 14]. These graphs only capture volume of communication between tasks and ignore the temporal information (when message communication occurs and by how much) completely. Some researchers <ref> [1, 14] </ref> have considered link contention for restricted cases of programs when communication between all tasks is synchronized. However, there is no solution for assignment problem for general task graphs by taking link contention into account. In recent years, the communication architecture of distributed-memory systems is undergoing rapid advances. <p> These graphs can correspond to either SPMD or MPMD distributed-memory programs with arbitrary asynchronous communication patterns. We use a new graph-theoretic model, the Temporal Communication Graph (TCG), which is a hybrid of both precedence [13, 18] and the interaction models <ref> [1, 9, 14] </ref>. Temporal information on task computation and communication available from a TCG is used in identifying (a) link contention between spatially and temporally conflicting message transmissions and (b) critical messages. These messages, forming the critical execution path of the program determine the program completion time.
Reference: [2] <author> S. Chittor and R. Enbody, </author> <title> "Predicting the Effect of Mapping on the Communication Performance of Large Multicomputers," </title> <booktitle> Proceedings of the International Conference on Parallel Processing, </booktitle> <volume> Vol. II, </volume> <year> 1992, </year> <pages> pp. 1-4. </pages>
Reference-contexts: As a result, on these systems, link contention has severe impact on message latency than the distance it has to travel. Hence, it is increasingly becoming important to take link contention into account while mapping problems onto wormhole-routed systems <ref> [2] </ref>. As wormhole-routing switching technique is becoming the trend for building future distributed-memory systems, researchers are proposing deadlock-free routing schemes with varying adaptivity to improve system throughput. The adaptivity directly affect link contention and hence completion time of a parallel application.
Reference: [3] <author> A.A. Chien and J.H. Kim, </author> <title> "Planar Adaptive Routing: Low-cost Adaptive Networks for Multiprocessors," </title> <booktitle> Proceedings of the 19th Annual Int. Sym. on Computer Architecture, </booktitle> <month> May </month> <year> 1992, </year> <pages> pp. 268-277. </pages>
Reference-contexts: The adaptivity directly affect link contention and hence completion time of a parallel application. Deterministic (also known as e-cube or oblivious) routing [4] allows a message to take a fixed path from a given source to its destination. On the other hand, adaptive routing strategies (partially-adaptive <ref> [3] </ref> and fully adaptive [8]) permit messages to take alternate paths while avoiding the busy links. Such adaptivity has potential to reduce link contention between messages conflicting 1 temporally and spatially over some common links. <p> Fully adaptive algorithms allow a message to be routed along any of the shaortest paths from the source to the destination processor while partially adaptive algorithms restrict routing freedom. Figure 1b shows planar routing proposed in <ref> [3] </ref> which limits routing freedom to two dimensions at a time. It is thus partially adaptive for topologies with dimension greater than 2. Figure 1c shows how fully adaptive routing [8] can provide more edge-disjoint paths between two processors. <p> The focus was to determine up to what extent these factors impose or relax constraints on using optimal assignment heuristic. 7.1 Host system and TCG parameters We considered wormhole-routed systems with varying degree of adaptivity. Three different routing algorithms, e-cube (least adaptive), planar adaptive <ref> [3] </ref> (partially adaptive for 3 and higher dimensional systems), and fully adaptive [8], were considered. All these algorithms support message transfer over minimal path. We considered 64-processor system organized as either 8x8-mesh or 6-dimensional hypercube. Since planar routing ensures full adaptivity for meshes, we excluded it in our experiments.
Reference: [4] <author> W.J. Dally, </author> <title> "Virtual-channel Flow Control," </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> Vol. 3, </volume> <month> March </month> <year> 1992, </year> <pages> pp. 194-205. </pages>
Reference-contexts: However, there is no solution for assignment problem for general task graphs by taking link contention into account. In recent years, the communication architecture of distributed-memory systems is undergoing rapid advances. There is an increasing use of wormhole routing switching technique <ref> [4] </ref> in current generation multicomputers (nCUBE-2, iWarp, and Intel's Paragon) due to its communication efficiency over store-and-forward and circuit-switched routing. In wormhole routing, the header flit of a message establishes the path, intermediate flits follow the path, and the tail flit releases the path. <p> As wormhole-routing switching technique is becoming the trend for building future distributed-memory systems, researchers are proposing deadlock-free routing schemes with varying adaptivity to improve system throughput. The adaptivity directly affect link contention and hence completion time of a parallel application. Deterministic (also known as e-cube or oblivious) routing <ref> [4] </ref> allows a message to take a fixed path from a given source to its destination. On the other hand, adaptive routing strategies (partially-adaptive [3] and fully adaptive [8]) permit messages to take alternate paths while avoiding the busy links.
Reference: [5] <author> Vibha A. Dixit-Radiya and Dhabaleshwar K. Panda, </author> <title> "Mapping and Scheduling in Distributed-Memory Systems using Temporal Communication Graph Model," </title> <type> Technical Report, </type> <institution> The Ohio State University, OSU-CISRC-3/93-TR11, </institution> <year> 1993. </year>
Reference-contexts: If the number of tasks exceeds the number of processors, the assignment phase is preceded by a clustering phase <ref> [5, 9, 10, 13, 19] </ref>. On distributed-memory systems, some messages need to travel longer paths depending on the distance between the communicating processors. In addition, paths taken by messages may not always be edge-disjoint. This leads to link contention amongst messages traveling simultaneously over the same links. <p> We assume the number of tasks to be equal to the number of processors and address the problem of assignment of tasks onto specific topology. In a separate paper <ref> [5] </ref>, we have solved the clustering problem for general distributed-memory systems. We address the assignment problem for general task graphs that can be regular or irregular. These graphs can correspond to either SPMD or MPMD distributed-memory programs with arbitrary asynchronous communication patterns. <p> Nodes with no incoming edges are called source nodes and those with no outgoing edges are called sink nodes of the TCG. Figure 2 shows TCG representation for Gaussian elimination example clustered for m = 4 processors by Min-Completion clustering heuristic proposed in <ref> [5] </ref>. In the TCG, for example, node v 12 represents computation stage 2 of task T 1 . The amount of computation done in v 12 is 50 and 4 The ideal computation occurrence time estimates without link contention and resulting critical path are shown for the identity task-processor assignment.
Reference: [6] <author> Vibha A. Dixit-Radiya and Dhabaleshwar K. Panda, </author> <title> "Task Assignment with Link Contention on Distributed-Memory Systems," </title> <type> Technical Report, </type> <institution> The Ohio State University, OSU-CISRC-4/93-TR18, </institution> <year> 1993. </year>
Reference-contexts: Section 8 discusses conclusions and future work. 2 2 Preliminaries For the assignment problem on distributed-memory systems, our approach uses the Temporal Communication Graph (TCG) model for designing heuristics. This model captures temporal information of a program execution. In <ref> [6] </ref>, we have presented the suitability of TCG model over the precedence and interaction models for solving partitioning, clustering, and/or assignment problems for distributed-memory system. The TCG model was introduced and used by Lo [15] to obtain phase expressions for regular parallel programs. <p> The worst case time complexity of the Simple heuristic is O (jE c j + m 3 ). For the derivation, see <ref> [6] </ref>. 6 Iterative Assignment Heuristic (Min-Max-Contention) This is the main assignment heuristic which attempts to minimize completion time of a TCG on a MSG by minimizing the maximum link contention. <p> In this paper, this completion time is computed by simulating the TCG execution with a process-oriented discrete-event simulator CSIM. For details on complexity of CT cost see <ref> [6] </ref>. The number of iterations of this heuristic is not expected to be large since each iteration requires a positive reduction in completion time. <p> For example, for 64 tasks, this complexity is 64! = 1:26 fi 10 89 . Hence, we only made comparisons between the performance of Simple and MMC heuristics. In <ref> [6] </ref>, we have studied the performance of MMC heuristic over optimal for small values of m and the dynamics of d-hop heuristics for varying values of d and different TCG sizes on e-cube wormhole-routed systems.
Reference: [7] <author> M. Dikaiakos, A. Rogers, and K. Steiglitz, </author> <title> "Message Ordering in Multiprocessors with Synchronous Communication," </title> <booktitle> International Conference on Parallel Processing, 1992, Vol. III, </booktitle> <address> pp.196-203. </address>
Reference-contexts: The above temporal information forms the basis in developing our assignment heuristics. These heuristics are general and applicable to any system topology implementing minimal (a message always taking a minimal distance path) routing. The interplay of message-ordering strategy <ref> [7] </ref> on program completion time is also analyzed. The assignment heuristics are verified through simulation experiments performed on random task graphs. The interplay between (a) degree of routing adaptivity, (b)topology, and (c) application characteristics is observed through these experiments.
Reference: [8] <author> J. Duato, </author> <title> "Deadlock-Free Adaptive Routing Algorithms for Multicomputers: Evaluation of a New Algorithm," </title> <booktitle> Proceedings of the Sym. on Parallel and Distributed Processing, </booktitle> <month> Dec. </month> <year> 1991, </year> <pages> pp. 840-847. </pages>
Reference-contexts: Deterministic (also known as e-cube or oblivious) routing [4] allows a message to take a fixed path from a given source to its destination. On the other hand, adaptive routing strategies (partially-adaptive [3] and fully adaptive <ref> [8] </ref>) permit messages to take alternate paths while avoiding the busy links. Such adaptivity has potential to reduce link contention between messages conflicting 1 temporally and spatially over some common links. <p> Figure 1b shows planar routing proposed in [3] which limits routing freedom to two dimensions at a time. It is thus partially adaptive for topologies with dimension greater than 2. Figure 1c shows how fully adaptive routing <ref> [8] </ref> can provide more edge-disjoint paths between two processors. Higher adaptivity reduces message contentions and hence the overall completion time of a 3 program. However, as adaptivity increases, hardware cost to maintain deadlock freedom increases. <p> Three different routing algorithms, e-cube (least adaptive), planar adaptive [3] (partially adaptive for 3 and higher dimensional systems), and fully adaptive <ref> [8] </ref>, were considered. All these algorithms support message transfer over minimal path. We considered 64-processor system organized as either 8x8-mesh or 6-dimensional hypercube. Since planar routing ensures full adaptivity for meshes, we excluded it in our experiments.
Reference: [9] <author> F. Ercal, J. Ramanujam, and P. Sadayappan, </author> <title> "Task Allocation onto a Hypercube by Recursive Mincut Bipartitioning," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <month> Oct. </month> <year> 1990, </year> <pages> pp. 35-44. </pages>
Reference-contexts: If the number of tasks exceeds the number of processors, the assignment phase is preceded by a clustering phase <ref> [5, 9, 10, 13, 19] </ref>. On distributed-memory systems, some messages need to travel longer paths depending on the distance between the communicating processors. In addition, paths taken by messages may not always be edge-disjoint. This leads to link contention amongst messages traveling simultaneously over the same links. <p> Hence, the assignment phase must consider the unequal distances between processors and link contention in obtaining an efficient solution. Previous research related to the assignment problem has modeled a distributed-memory program as task interaction graph <ref> [1, 9, 14] </ref>. These graphs only capture volume of communication between tasks and ignore the temporal information (when message communication occurs and by how much) completely. Some researchers [1, 14] have considered link contention for restricted cases of programs when communication between all tasks is synchronized. <p> These graphs can correspond to either SPMD or MPMD distributed-memory programs with arbitrary asynchronous communication patterns. We use a new graph-theoretic model, the Temporal Communication Graph (TCG), which is a hybrid of both precedence [13, 18] and the interaction models <ref> [1, 9, 14] </ref>. Temporal information on task computation and communication available from a TCG is used in identifying (a) link contention between spatially and temporally conflicting message transmissions and (b) critical messages. These messages, forming the critical execution path of the program determine the program completion time.
Reference: [10] <author> A. Gerasoulis, S. Venugopal, and T. Yang, </author> <title> "Clustering Task Graphs for Message Passing Architectures," </title> <booktitle> International Conference on Supercomputing, </booktitle> <month> June </month> <year> 1990, </year> <pages> pp. 447-456. </pages>
Reference-contexts: If the number of tasks exceeds the number of processors, the assignment phase is preceded by a clustering phase <ref> [5, 9, 10, 13, 19] </ref>. On distributed-memory systems, some messages need to travel longer paths depending on the distance between the communicating processors. In addition, paths taken by messages may not always be edge-disjoint. This leads to link contention amongst messages traveling simultaneously over the same links.
Reference: [11] <author> Intel Corporation, </author> <title> Paragon XP/S Product Overview, </title> <year> 1991. </year>
Reference-contexts: Below, we briefly review three common routing algorithms, with different adaptivity, proposed by the researchers. A routing is minimal if the path selected is one of the shortest paths between the source and destination processor. Deterministic or oblivious routing used in <ref> [11, 12, 16] </ref> defines a single path from a source to a destination node and thus has zero adaptivity. Such routing is simple to implement and deadlock free. However, it does not make effective use of all communication links in a system. <p> The units of measurements for hcomp and hcomm need to be same in order to combine computation and communication cost directly. We assume that the host architecture supports concurrent computation and communication, which is common in present-day systems <ref> [11] </ref>. In this paper, without loss of generality, we assume that contention for injection and consumption channels are negligible. Systems are assumed to support a multiport communication model so that a processor can perform communication on all its incoming and outgoing links simultaneously.
Reference: [12] <author> Intel Corporation, </author> <title> A Touchstone DELTA System Description, </title> <year> 1991. </year>
Reference-contexts: Below, we briefly review three common routing algorithms, with different adaptivity, proposed by the researchers. A routing is minimal if the path selected is one of the shortest paths between the source and destination processor. Deterministic or oblivious routing used in <ref> [11, 12, 16] </ref> defines a single path from a source to a destination node and thus has zero adaptivity. Such routing is simple to implement and deadlock free. However, it does not make effective use of all communication links in a system.
Reference: [13] <author> S.J. Kim and J.C. Browne, </author> <title> "A General Approach to Mapping of Parallel Computations upon Multiprocessor Architectures," </title> <booktitle> International Conference on Parallel Processing, 1988, </booktitle> <volume> Vol. III, </volume> <pages> pp. 1-8. </pages>
Reference-contexts: If the number of tasks exceeds the number of processors, the assignment phase is preceded by a clustering phase <ref> [5, 9, 10, 13, 19] </ref>. On distributed-memory systems, some messages need to travel longer paths depending on the distance between the communicating processors. In addition, paths taken by messages may not always be edge-disjoint. This leads to link contention amongst messages traveling simultaneously over the same links. <p> We address the assignment problem for general task graphs that can be regular or irregular. These graphs can correspond to either SPMD or MPMD distributed-memory programs with arbitrary asynchronous communication patterns. We use a new graph-theoretic model, the Temporal Communication Graph (TCG), which is a hybrid of both precedence <ref> [13, 18] </ref> and the interaction models [1, 9, 14]. Temporal information on task computation and communication available from a TCG is used in identifying (a) link contention between spatially and temporally conflicting message transmissions and (b) critical messages.
Reference: [14] <author> Soo-Young Lee and J.K. Aggrawal, </author> <title> "A Mapping Strategy for Parallel Processing," </title> <journal> IEEE Transactions on Computers, April 1987, </journal> <volume> Vol. C-36, No. 4, </volume> <pages> pp. 433-441. </pages>
Reference-contexts: 1 Introduction Task assignment problem is defined as mapping tasks of a parallel program onto processors of a host multiprocessor system such that the program gets executed with minimal time <ref> [1, 14] </ref>. If the number of tasks exceeds the number of processors, the assignment phase is preceded by a clustering phase [5, 9, 10, 13, 19]. On distributed-memory systems, some messages need to travel longer paths depending on the distance between the communicating processors. <p> Hence, the assignment phase must consider the unequal distances between processors and link contention in obtaining an efficient solution. Previous research related to the assignment problem has modeled a distributed-memory program as task interaction graph <ref> [1, 9, 14] </ref>. These graphs only capture volume of communication between tasks and ignore the temporal information (when message communication occurs and by how much) completely. Some researchers [1, 14] have considered link contention for restricted cases of programs when communication between all tasks is synchronized. <p> Previous research related to the assignment problem has modeled a distributed-memory program as task interaction graph [1, 9, 14]. These graphs only capture volume of communication between tasks and ignore the temporal information (when message communication occurs and by how much) completely. Some researchers <ref> [1, 14] </ref> have considered link contention for restricted cases of programs when communication between all tasks is synchronized. However, there is no solution for assignment problem for general task graphs by taking link contention into account. In recent years, the communication architecture of distributed-memory systems is undergoing rapid advances. <p> These graphs can correspond to either SPMD or MPMD distributed-memory programs with arbitrary asynchronous communication patterns. We use a new graph-theoretic model, the Temporal Communication Graph (TCG), which is a hybrid of both precedence [13, 18] and the interaction models <ref> [1, 9, 14] </ref>. Temporal information on task computation and communication available from a TCG is used in identifying (a) link contention between spatially and temporally conflicting message transmissions and (b) critical messages. These messages, forming the critical execution path of the program determine the program completion time.
Reference: [15] <author> Virginia M. Lo, Sanjay Rajopadhye, Samik Gupta, David Keldsen, Moataz A. Mohamed, and Jan Telle, "OREGAMI: </author> <title> Software Tools for Mapping Parallel Computations to Parallel Architectures," </title> <type> Technical Report, </type> <institution> University of Oregon, </institution> <year> 1990. </year>
Reference-contexts: This model captures temporal information of a program execution. In [6], we have presented the suitability of TCG model over the precedence and interaction models for solving partitioning, clustering, and/or assignment problems for distributed-memory system. The TCG model was introduced and used by Lo <ref> [15] </ref> to obtain phase expressions for regular parallel programs. However, in this work, temporal information in the phase expressions were used only after the assignment phase to produce application-specific routing to minimize link contention [15]. <p> The TCG model was introduced and used by Lo <ref> [15] </ref> to obtain phase expressions for regular parallel programs. However, in this work, temporal information in the phase expressions were used only after the assignment phase to produce application-specific routing to minimize link contention [15]. Scope of such approach is very restrictive on current systems where the routing is always specified by its hardware. A good mapping scheme should be able to capture true (temporal) link contention for applications with regular/irregular communication being targeted on distributed-memory systems with given routing schemes.
Reference: [16] <author> NCUBE Company, </author> <title> NCUBE 6400 Processor Manual, </title> <year> 1990. </year>
Reference-contexts: Below, we briefly review three common routing algorithms, with different adaptivity, proposed by the researchers. A routing is minimal if the path selected is one of the shortest paths between the source and destination processor. Deterministic or oblivious routing used in <ref> [11, 12, 16] </ref> defines a single path from a source to a destination node and thus has zero adaptivity. Such routing is simple to implement and deadlock free. However, it does not make effective use of all communication links in a system.
Reference: [17] <author> Lionel M. Ni and P.K. McKinley, </author> <title> "A Survey of Wormhole Routing Techniques in Direct Networks," </title> <booktitle> IEEE Computer, </booktitle> <month> Feb. </month> <year> 1993, </year> <pages> pp. 62. </pages>
Reference: [18] <author> Hesham El-Rewini and T.G. Lewis, </author> <title> "Scheduling Parallel Program Tasks onto Arbitrary Target Machines," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 9, </volume> <year> 1990, </year> <pages> pp. 138-153. </pages>
Reference-contexts: We address the assignment problem for general task graphs that can be regular or irregular. These graphs can correspond to either SPMD or MPMD distributed-memory programs with arbitrary asynchronous communication patterns. We use a new graph-theoretic model, the Temporal Communication Graph (TCG), which is a hybrid of both precedence <ref> [13, 18] </ref> and the interaction models [1, 9, 14]. Temporal information on task computation and communication available from a TCG is used in identifying (a) link contention between spatially and temporally conflicting message transmissions and (b) critical messages.
Reference: [19] <author> Vivek Sarkar, </author> <title> "Partitioning and Scheduling Parallel Programs for Multiprocessors," </title> <booktitle> Research Monographs in Parallel and Distributed Computing, </booktitle> <publisher> The MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: If the number of tasks exceeds the number of processors, the assignment phase is preceded by a clustering phase <ref> [5, 9, 10, 13, 19] </ref>. On distributed-memory systems, some messages need to travel longer paths depending on the distance between the communicating processors. In addition, paths taken by messages may not always be edge-disjoint. This leads to link contention amongst messages traveling simultaneously over the same links.
Reference: [20] <author> Herb Schwetman, </author> <title> "Introduction to Process-Oriented Simulation and CSIM," </title> <booktitle> Proceedings of Winter Simulation Conference, </booktitle> <year> 1990. </year> <month> 22 </month>
Reference-contexts: It can be noted that a node can start execution only after all messages that it is waiting for, have reached the destination processor. For our paper, we obtain A EST, A EFT, and MRT measures by executing a TCG on a process-oriented discrete-event simulator written in CSIM <ref> [20] </ref>. Figure 3 shows the actual occurrence estimates for the example TCG. The actual completion time of the corresponding program is 610. <p> The actual program completion time and link contention, used by the heuristics to determine critical communication edges, were obtained by by executing a TCG on a process-oriented discrete-event simulator written in CSIM <ref> [20] </ref>. This simulator supports flit-level message transfer and models the communication architecture of a wormhole-routed system accurately, including demand multiplexing over virtual channels.
References-found: 20

