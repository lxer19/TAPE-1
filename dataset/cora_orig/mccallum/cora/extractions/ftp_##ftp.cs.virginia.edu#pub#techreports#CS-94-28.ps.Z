URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-94-28.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Extensible FiLe Systems (ELFS) An Object-Ori ented Approach to High Performance File I/O  
Phone: (804) 982-2200 FAX: (804) 982-2214  
Author: John F. Karpovich Andrew S. Grimshaw James C. French 
Note: Work partially sponsored by NSF, NASA, CESDIS and NRAO.  
Date: July 22, 1994  
Address: THORNTON HALL CHARLOTTESVILLE, VIRGINIA 22903-2442  
Affiliation: DEPARTMENT OF COMPUTER SCIENCE UNIVERSITY OF VIRGINIA  
Abstract: Appeared in Proceedings of the Ninth Annual Conference on Object-Oriented Programming Systems, Languages, and Applications, pp. 191-204, October 1994. Also available as University of Virginia, Department of Computer Science Technical Report CS-94-28 via the web @ ftp:/ /ftp.cs.virginia.edu/pub/techreports/README.html. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. S. Grimshaw and E. C. Loyot, Jr., </author> <title> ELFS: Object-Oriented Extensible File Systems, </title> <institution> University of Virginia, Computer Science TR 91-14, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: This problem is further aggravated for parallel programs where the processing power of the application is effectively increased by using multiple processors. The ExtensibLe File System (ELFS) approach, first proposed by Grimshaw and Loyot <ref> [1] </ref>, is based on the idea that in order to achieve high performance and 1. This work has been partially funded by grants NSF ASC 9201822, NASA CS-CESDIS 5908-93, and NASA NGT-50970. ExtensibLe File Systems (ELFS): An Object-Oriented Approach to High Performance File I/O John F. Karpovich, Andrew S.
Reference: [2] <author> C. J. Date, </author> <title> An Introduction to Database Systems, Volume I, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1986. </year>
Reference-contexts: A DBMS attempts to provide these services while still achieving as much performance as possible. There are a number of different approaches for how a DBMS should be developed, including hierarchical, relational and object-oriented approaches <ref> [2] </ref>. Each puts different emphasis on the structure of the DBMS implementation and interface, providing differing degrees of usability, maintenance, and performance.
Reference: [3] <author> J.L. Bentley and J.H. Friedman, </author> <title> Data Structures for Range Searching, </title> <journal> ACM Computing Surveys, </journal> <volume> Vol. 11, No. 4, </volume> <pages> pp. 397-409, </pages> <month> December </month> <year> 1979. </year>
Reference: [4] <author> J. T. Robinson, </author> <title> The K-D-B-Tree: A Search Structure for Large Multidimensional Dynamic Indexes, </title> <booktitle> ACM SIGMOD Proceedings of Annual Meeting, </booktitle> <pages> pp. 10-18, </pages> <year> 1981. </year>
Reference: [5] <author> A. Guttman, R-Trees: </author> <title> A Dynamic Index Structure for Spatial Searching, </title> <booktitle> Proceedings of Annual Meeting, ACM SIGMOD Record, </booktitle> <volume> Vol. 14, No. 2, </volume> <pages> pp. 47-57, </pages> <year> 1984. </year>
Reference-contexts: The database literature contains many examples of creative file structures that are well suited for particular application needs or types of data. Examples include tree-based structures such as k-d trees [3,4] and R trees <ref> [5] </ref>, partitioning-based structures like grid files [6] and Piecewise Linear Order-Preserving-hashing (or PLOP) files [7,8], primary files with secondary in-dexes, and many others. Each of these file structures has advantages and disadvantages under different access requirements and data attributes.
Reference: [6] <author> J. Nievergelt and H. Hinterberger, </author> <title> The Grid File: An Adaptable, Symmetric Multikey File Structure, </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 9, No. 1, </volume> <pages> pp. 38-71, </pages> <month> March </month> <year> 1984. </year>
Reference-contexts: The database literature contains many examples of creative file structures that are well suited for particular application needs or types of data. Examples include tree-based structures such as k-d trees [3,4] and R trees [5], partitioning-based structures like grid files <ref> [6] </ref> and Piecewise Linear Order-Preserving-hashing (or PLOP) files [7,8], primary files with secondary in-dexes, and many others. Each of these file structures has advantages and disadvantages under different access requirements and data attributes.
Reference: [7] <author> H. Kriegel and B. Seeger, PLOP-Hashing: </author> <title> A Grid File without a Directory, </title> <booktitle> Proceedings of the Fourth International Conference on Data Engineering, </booktitle> <pages> pp. 369-376, </pages> <month> February </month> <year> 1988. </year>
Reference: [8] <author> H. Kriegel and B. Seeger, </author> <title> Techniques for Design and Implementation of Efficient Spatial Access Methods, </title> <booktitle> Proceedings of the 14th VLDB Conference, </booktitle> <pages> pp. 360-370, </pages> <year> 1988. </year>
Reference: [9] <author> A. S. Grimshaw, </author> <title> Easy to Use Object-Oriented Parallel Programming with Mentat, </title> <booktitle> IEEE Computer, </booktitle> <pages> pp. 39-51, </pages> <month> May, </month> <year> 1993. </year>
Reference-contexts: We next present our experience in applying the ELFS methodology to real-world problems. Specifically, we have created two file hierarchies, a two dimensional dense matrix file hierarchy and a multidimensional range searching file hierarchy. Both file hierarchies were implemented using Mentat, an object-oriented parallel processing system <ref> [9] </ref>. Mentat programs are written in the Mentat Programming Language (MPL), an extension of C++. The major addition to C++ in MPL is that classes can be tagged as being Mentat classes, which means that the member function invocations on the class are executed in parallel whenever possible.
Reference: [10] <author> B. Pane, </author> <title> Efficient Manipulation of Out-of-Core Matrices, </title> <institution> University of Virginia, Department of Computer Science. </institution>
Reference-contexts: In all cases the TwoDMatrixFile is far superior for column retrievals. Figure 6 shows these results. Note that performance of CFS on column reads was so low that they are not included in the graphs. For more detailed discussion of the TwoDMatrixFile performance see <ref> [10] </ref>. 4.2: Multidimensional Range Searching (MRS) File Object Multidimensional range searches appear in a wide range of applications. Such applications view a data set as an n-dimensional data space, where each dimension represents the values along a key field present in the data.
Reference: [11] <author> J. F. Karpovich, Andrew S. Grimshaw, James C. </author> <title> French, Breaking the I/O Bottleneck at the National Radio Astronomy Observatory, </title> <institution> University of Virginia, Computer Science, </institution> <note> in progress. </note>
Reference-contexts: Though other file structures could be used for multidimensional range searches, it is our opinion that none of these candidates is clearly superior to PLOP files, while PLOP files have a relatively straightfor ward implementation. For a more in depth analysis of the choice of file structure see <ref> [11] </ref>. A PLOP file views a data set as a multidimensional data space. The data space is partitioned by splitting each dimension into a series of ranges called slices. The intersection of a slice from each dimension defines one logical data bucket.
Reference: [12] <author> J. F. Karpovich, Andrew S. Grimshaw, James C. </author> <title> French, High Performance Access to Radio Astronomy Data: A Case Study, </title> <booktitle> to appear in Proceedings of 7th International Working Conference on Scientific and Statistical Database Management, </booktitle> <month> September </month> <year> 1994. </year>
Reference: [13] <author> D. A. Patterson, G. Gibson, and R. H. Katz, </author> <title> A Case for Redundant Arrays of Inexpensive Disks (RAID), </title> <booktitle> Proceedings of SIGMOD International Conference on Management of Data, </booktitle> <pages> pp. 109-116, </pages> <year> 1988. </year>
Reference-contexts: Hardware designers are constantly trying to improve the performance of raw I/O devices. New organizational techniques, such as RAIDs <ref> [13] </ref>, have been developed to better structure and use the devices currently available. Research has been done on better file organization [3-8] and there have been extensions made to programming languages to support high performance I/O, for example extensions to HPF Fortran detailed by Brezany, et al [14].
Reference: [14] <author> P. Brezany, M. Gerndt, P. Mehrotra, and H. Zima, </author> <title> Concurrent File Operations in High Performance Fortran, </title> <type> ICASE Report No. </type> <pages> 92-46, pp. 1-15, </pages> <year> 1992. </year>
Reference-contexts: Research has been done on better file organization [3-8] and there have been extensions made to programming languages to support high performance I/O, for example extensions to HPF Fortran detailed by Brezany, et al <ref> [14] </ref>. High performance file systems have been specially made for specific architectures, such as the Concurrent File System (CFS) for Intel supercomputers [15]. Other researchers have looked into user interface issues for manipulating persistent data.
Reference: [15] <author> P. Pierce, </author> <title> A Concurrent File System for a Highly Parallel Mass Storage Subsystem, </title> <booktitle> Proceedings of 4th Conference on Hypercubes, Concurrent Computers, and Applications, </booktitle> <volume> vol I, </volume> <pages> pp. 155-160, </pages> <year> 1989. </year>
Reference-contexts: High performance file systems have been specially made for specific architectures, such as the Concurrent File System (CFS) for Intel supercomputers <ref> [15] </ref>. Other researchers have looked into user interface issues for manipulating persistent data. Examples include Kotzs work on multiprocessor file system interfaces [16], the Vesta Parallel File System introduced by Corbett, et al [17] and the many works in the OODBMS field.
Reference: [16] <author> D. Kotz, </author> <title> Multiprocessor File System Interfaces, </title> <institution> Dartmouth College, Dept. of Mathematics and Computer Science, </institution> <type> technical report PCS-TR92-179, </type> <year> 1992. </year>
Reference-contexts: High performance file systems have been specially made for specific architectures, such as the Concurrent File System (CFS) for Intel supercomputers [15]. Other researchers have looked into user interface issues for manipulating persistent data. Examples include Kotzs work on multiprocessor file system interfaces <ref> [16] </ref>, the Vesta Parallel File System introduced by Corbett, et al [17] and the many works in the OODBMS field. These are just a few examples of related work in the field, but they do illustrate some of the variety of approaches used.
Reference: [17] <author> P. F. Corbett, D. G. Feitelson, J-P. Prost, and S. J. Baylor, </author> <title> Parallel Access to Files in the Vesta Parallel File System, </title> <booktitle> Proceedings of Supercomputing 93, </booktitle> <pages> pp. 472-481, </pages> <year> 1993. </year>
Reference-contexts: Other researchers have looked into user interface issues for manipulating persistent data. Examples include Kotzs work on multiprocessor file system interfaces [16], the Vesta Parallel File System introduced by Corbett, et al <ref> [17] </ref> and the many works in the OODBMS field. These are just a few examples of related work in the field, but they do illustrate some of the variety of approaches used.
Reference: [18] <author> S. B. Zdonik and D. Maier, </author> <title> Readings in Object-Oriented Database Systems, </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo CA, </address> <year> 1990. </year>
Reference: [19] <author> F. Manola, S. Heiler, D. Georgakopoulos, M. Homick, and M. Brodie, </author> <title> Distributed Object Management, </title> <journal> International Journal of Intelligent and Cooperative Information Systems, </journal> <volume> Vol. 1, No. 1, </volume> <month> June </month> <year> 1992. </year>
References-found: 19

