URL: ftp://ftp.cs.toronto.edu/pub/eric/REFSQ97.ps.gz
Refering-URL: http://www.cs.toronto.edu/~eric/
Root-URL: 
Title: Why Agent-Oriented Requirements Engineering  
Author: Eric S. K. Yu 
Web: www.cs.utoronto.ca/~eric  
Address: Toronto, Ontario, Canada M5S 3G6  
Affiliation: Faculty of Information Studies, University of Toronto  
Abstract: Agent concepts have been used in a number of recent approaches to requirements engineering. In view of the rapid shift towards open, networked, and cooperative computing, we argue for the fuller development of emerging agent-oriented approaches to requirements engineering. Such approaches would address crucial requirements engineering concerns such as functionality, quality, and process, using agent as the focal concept.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> B. Boehm, H. </author> <title> In, Identifying Quality-Requirement Conflicts, </title> <journal> IEEE Software, </journal> <pages> pp. 25-35, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: During redesign, quality requirements are renegotiated between agents. The i fl framework therefore offers a distributed treatment of quality issues. This is one of the areas that needs to be further developed. The WinWin framework <ref> [1] </ref> links quality goals to stakeholders, and is therefore a step in this direction. 3.5 Agents and Process The concept of process is pervasive in systems development and in RE (e.g., [16]).
Reference: 2. <author> J. A. Bubenko, </author> <title> Information Modeling in the Context of System Development, </title> <booktitle> Proc. IFIP, </booktitle> <pages> pp. 395-411, </pages> <year> 1980. </year>
Reference-contexts: 1 Introduction Agent concepts have been used in a number of recent approaches to Requirements Engineering (RE). It is generally acknowledged that the main focus of Requirements Engineering should be on the characterization of the intended system in relation to its environment <ref> [2, 12, 14] </ref>. Agent concepts have been introduced in RE primarily as modelling constructs to characterize active elements in the environment, usually including the target system. These active elements may be human or machine, and may contain hardware and/or software.
Reference: 3. <author> J. A. Bubenko, </author> <title> Extending the Scope of Information Modeling, </title> <booktitle> Proc. 4th Int. Workshop on the Deductive Approach to Information Systems and Databases, </booktitle> <address> Lloret-Costa Brava, Catalonia, </address> <month> Sept. </month> <pages> 20-22, </pages> <year> 1993, </year> <pages> pp. 73-98. </pages>
Reference-contexts: Agents in Albert are not intentional and do not have goals. The language focuses on specification, and is not concerned with the examination of alternatives for meeting goals. (c) The F3 framework The F3 framework (From Fuzzy to Formal) <ref> [3] </ref> is a framework which aims to cover a wide range of requirements engineering activities. An important part of the framework is the "Enterprise Model". This model has five submodels: Objective Model, Concept Model, Activities and Usage Model, the Actors Model, and Information Systems Requirements Model.
Reference: 4. <author> K. L. Chung, </author> <title> Representing and Using Non-Functional Requirements for Information System Development: A Process-Oriented Approach, </title> <type> Ph.D. Thesis, also Tech. </type> <institution> Rpt. DKBS-TR-93-1, Dept. of Comp. Sci., Univ. of Toronto, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Since it is possible to have agents without goals in an RE framework (e.g., Albert), and also goals without agents (e.g., the NFR framework <ref> [4] </ref>), an important question is: How can agent concepts and goal concepts complement each other in an RE framework? In several frameworks, the goal concept dominates over the agent concept, i.e., the framework is more (centrally) goal-driven than agent-driven. <p> However, in order for goals to be assigned as responsibilities to agents, they must be reduced sufficiently as to be expressible formally in terms of logical formulas. In the NFR framework <ref> [4] </ref>, quality goals are treated systematically using a concept of satisficing. i fl follows the NFR framework approach, bringing non-functional goals (called softgoals) into an agent-oriented framework. Softgoals, like other goals, appear as relationships among agents.
Reference: 5. <author> A. Dardenne, A. van Lamsweerde and S. Fickas, </author> <title> Goal-Directed Requirements Acquisition, </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 20, </volume> <pages> pp. 3-50, </pages> <year> 1993. </year>
Reference-contexts: During the design process, goals are replaced by `responsibilities' and assigned to subsets of agents. Ultimately, responsibilities are subdivided so that individual pieces are assigned to individual agents. KAOS is a framework for goal-directed requirements acquisition <ref> [5] </ref>. As in CSD, a composite system viewpoint is adopted. Agents may be human, hardware or software. The concept of agent is similar to that in CSD. An agent is a specialized kind of object. Like other objects, it has states and other properties associated with objects.
Reference: 6. <author> G. De Michelis, E. Dubois, M. Jarke, F. Matthes, J. Mylopoulos, K. Pohl, J. Schmidt, C. Woo, and E. Yu, </author> <title> "Cooperative Information Systems: A Manifesto," </title> <note> to appear in Cooperative Information Systems: </note> <editor> Trends and Directions, M. Papazoglou and H. Schlageter, eds., </editor> <publisher> Academic Press, </publisher> <year> 1997. </year>
Reference-contexts: An agent-oriented approach to RE will be of particular interest for new settings in which there is a high degree of open distributed computing [13, 17], and in which change is ongoing <ref> [6] </ref>. In agent--oriented RE frameworks, crucial RE concerns such as functionality, quality, and process will be organized around agents so that they will be addressed in a way which is appropriate for open, distributed, and constantly evolving environments. <p> For example, most frameworks treat agents as specializations of objects. However, if agents are intentional, the implications of inheriting intentional properties is not so clear. 3.7 Agents and Change In many environments, it will be important to be able to deal with ongoing evolution <ref> [6] </ref>. The agent concept in RE may provide a pivotal point for organizing knowledge in the presence of change, because agents are often the originators of change [11].
Reference: 7. <author> E. Dubois, Ph. Du Bois, F. Dubru, and M. Petit, </author> <title> "Agent-Oriented Re--quirements Engineering: A Case Study Using the Albert Language", </title> <booktitle> Proc. 4th Int. Working Conference on Dynamic Modelling and Information System - DYNMOD-IV, </booktitle> <address> Noordwijkerhoud (The Netherlands), </address> <month> September </month> <year> 1994. </year> <institution> Delft University Press, </institution> <year> 1994. </year>
Reference-contexts: Each agent is characterized by actions that change or maintain its own state of knowledge about the external world and/or states of other agents. Such actions are performed by agents in order to discharge contractual obligations expressed in terms of internal and cooperation constraints <ref> [7, 8] </ref>. Functional requirements in Albert are expressed in terms of a set of formal statements. These statements are grouped around agents in order to define the set of admissible behaviour the agents may experience.
Reference: 8. <author> Ph. Du Bois, </author> <title> The Albert II Language On the Design and the Use of a Formal Specification Language for Requirements Analysis, </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science, University of Namur, </institution> <year> 1995. </year>
Reference-contexts: Each agent is characterized by actions that change or maintain its own state of knowledge about the external world and/or states of other agents. Such actions are performed by agents in order to discharge contractual obligations expressed in terms of internal and cooperation constraints <ref> [7, 8] </ref>. Functional requirements in Albert are expressed in terms of a set of formal statements. These statements are grouped around agents in order to define the set of admissible behaviour the agents may experience.
Reference: 9. <author> M. S. Feather, </author> <title> Language Support for the Specification and Development of Composite Systems, </title> <journal> ACM Trans. Prog. Lang. and Sys. </journal> <volume> 9 (2), </volume> <pages> pp. 198-234, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: The specification of the automated system should be derived systematically from the desired behaviour of the overall system. Typically, one starts with global system goals, which are decomposed until they can be assigned to individual agents <ref> [9, 10] </ref>. Agents have capabilities, which means that their behaviour (sequences of activities) can be constrained so that desired properties are satisfied. During the design process, goals are replaced by `responsibilities' and assigned to subsets of agents. Ultimately, responsibilities are subdivided so that individual pieces are assigned to individual agents. <p> A multi-lateral characterization of requirements relationships is more suited to a networked computing environment. 3.3 Agents and Goals The concept of goal has been found to be a very useful one in RE, where one wants to deal with choice, and constraints on a space of possibilities (e.g., <ref> [9] </ref>).
Reference: 10. <author> M. S. Feather, </author> <title> Composite System Design, </title> <booktitle> ICSE-16 Workshop on Research Issues in the Intersection Between Software Engineering and Artificial Intelligence, International Conference on Software Engineering, </booktitle> <address> Sorrento, Italy, </address> <month> May 16-20, </month> <year> 1994. </year>
Reference-contexts: The specification of the automated system should be derived systematically from the desired behaviour of the overall system. Typically, one starts with global system goals, which are decomposed until they can be assigned to individual agents <ref> [9, 10] </ref>. Agents have capabilities, which means that their behaviour (sequences of activities) can be constrained so that desired properties are satisfied. During the design process, goals are replaced by `responsibilities' and assigned to subsets of agents. Ultimately, responsibilities are subdivided so that individual pieces are assigned to individual agents.
Reference: 11. <author> O.C.Z. Gotel and A.C.W. Finkelstein, </author> <title> An Analysis of the Requirements Traceability Problem, </title> <booktitle> Proc. IEEE Int. Conf. on Requirements Engineering, Colorado Springs, </booktitle> <pages> pp. 94-101, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: The agent concept in RE may provide a pivotal point for organizing knowledge in the presence of change, because agents are often the originators of change <ref> [11] </ref>.
Reference: 12. <author> S. J. Greenspan, J. Mylopoulos, and A. Borgida, </author> <title> Capturing More World Knowledge in the Requirements Specification, </title> <booktitle> Proc. Int. Conf. on Software Eng., </booktitle> <address> Tokyo, </address> <year> 1982. </year>
Reference-contexts: 1 Introduction Agent concepts have been used in a number of recent approaches to Requirements Engineering (RE). It is generally acknowledged that the main focus of Requirements Engineering should be on the characterization of the intended system in relation to its environment <ref> [2, 12, 14] </ref>. Agent concepts have been introduced in RE primarily as modelling constructs to characterize active elements in the environment, usually including the target system. These active elements may be human or machine, and may contain hardware and/or software.
Reference: 13. <author> M. Hamilton, </author> <booktitle> The Shift to Net-Centric Computing IEEE Computer, </booktitle> <pages> pp. 31-39, </pages> <month> Aug. </month> <year> 1996. </year>
Reference-contexts: An agent-oriented approach to RE will be of particular interest for new settings in which there is a high degree of open distributed computing <ref> [13, 17] </ref>, and in which change is ongoing [6]. In agent--oriented RE frameworks, crucial RE concerns such as functionality, quality, and process will be organized around agents so that they will be addressed in a way which is appropriate for open, distributed, and constantly evolving environments.
Reference: 14. <author> M. Jackson, </author> <title> System Development, </title> <publisher> Prentice-Hall, </publisher> <year> 1983. </year>
Reference-contexts: 1 Introduction Agent concepts have been used in a number of recent approaches to Requirements Engineering (RE). It is generally acknowledged that the main focus of Requirements Engineering should be on the characterization of the intended system in relation to its environment <ref> [2, 12, 14] </ref>. Agent concepts have been introduced in RE primarily as modelling constructs to characterize active elements in the environment, usually including the target system. These active elements may be human or machine, and may contain hardware and/or software.
Reference: 15. <author> J. Mylopoulos, A. Borgida, M. Jarke, M. Koubarakis, </author> <title> Telos: Representing Knowledge about Information Systems, </title> <journal> ACM Trans. Info. Sys., </journal> <volume> 8 (4), </volume> <pages> pp. 325-362, </pages> <year> 1990. </year>
Reference-contexts: Conceptual mod-elling frameworks such as Telos <ref> [15] </ref> provide knowledge structuring mechanisms such as classification, generalization, aggregation, and time to help organize knowledge along various dimensions. How agent concepts interact with these dimensions needs to be further investigated, given that the intentional dimension of agents may bring different ontological and epistemological assumptions.
Reference: 16. <author> K. Pohl, </author> <title> Process-Centered Requirements Engineering. </title> <publisher> Wiley/Research Studies Press, </publisher> <address> New York, </address> <year> 1996. </year>
Reference-contexts: This is one of the areas that needs to be further developed. The WinWin framework [1] links quality goals to stakeholders, and is therefore a step in this direction. 3.5 Agents and Process The concept of process is pervasive in systems development and in RE (e.g., <ref> [16] </ref>). When there are multiple agents, one needs to have ways of characterizing the "who" that is involved in a process, and the extent and nature of involvement.
Reference: 17. <author> E. Yourdon, </author> <title> Java, the Web, </title> <booktitle> and Software Development, IEEE Computer, </booktitle> <pages> pp. 25-30, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: An agent-oriented approach to RE will be of particular interest for new settings in which there is a high degree of open distributed computing <ref> [13, 17] </ref>, and in which change is ongoing [6]. In agent--oriented RE frameworks, crucial RE concerns such as functionality, quality, and process will be organized around agents so that they will be addressed in a way which is appropriate for open, distributed, and constantly evolving environments.
Reference: 18. <author> E. Yu, </author> <title> Modelling Strategic Relationships for Process Reengineering, </title> <type> Ph.D. thesis, </type> <institution> Dept. of Computer Science, University of Toronto, </institution> <year> 1995. </year>
Reference-contexts: The overall Enterprise Model is linked to the more formal Information Systems Model via Implemented-By and Supported-By types of relationships. (d) The i* modelling framework i fl is a framework for modelling and redesigning intentional relationships among strategic actors <ref> [18, 20] </ref>. It was developed as a framework to support the early phase of requirements engineering. The strategic actor is the central concept. Actors have intentional properties such as goals, beliefs, abilities, and commitments. They are strategic in that they are concerned about opportunities and vulnerabilities.
Reference: 19. <author> E. Yu, P. Du Bois, E. Dubois, J. Mylopoulos, </author> <title> "From Organization Models to System Requirements A `Cooperating Agents' Approach," </title> <booktitle> Proc. 3rd Int. Conf. on Cooperative Information Systems (CoopIS-95), </booktitle> <address> Vienna, Austria, </address> <pages> pp. 194-204, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: In focusing on different parts of RE, namely the early-phase (strategic reasoning) and late-phase (specification) respectively, the two frameworks came up with substantially different notions of agent. A loose coupling between these two frameworks each with their own notion of agent may be an appropriate solution <ref> [19, 20] </ref>. 4 Conclusions We argued for the further development of agent concepts for RE.
Reference: 20. <author> E. Yu, </author> <title> "Towards Modelling and Reasoning Support for Early-Phase Requirements Engineering," </title> <booktitle> Proc. IEEE Int. Symp. Requirements Engineering, Annapolis, Maryland, </booktitle> <pages> pp. 226-235, </pages> <month> January </month> <year> 1997. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: The overall Enterprise Model is linked to the more formal Information Systems Model via Implemented-By and Supported-By types of relationships. (d) The i* modelling framework i fl is a framework for modelling and redesigning intentional relationships among strategic actors <ref> [18, 20] </ref>. It was developed as a framework to support the early phase of requirements engineering. The strategic actor is the central concept. Actors have intentional properties such as goals, beliefs, abilities, and commitments. They are strategic in that they are concerned about opportunities and vulnerabilities. <p> In focusing on different parts of RE, namely the early-phase (strategic reasoning) and late-phase (specification) respectively, the two frameworks came up with substantially different notions of agent. A loose coupling between these two frameworks each with their own notion of agent may be an appropriate solution <ref> [19, 20] </ref>. 4 Conclusions We argued for the further development of agent concepts for RE.
References-found: 20

