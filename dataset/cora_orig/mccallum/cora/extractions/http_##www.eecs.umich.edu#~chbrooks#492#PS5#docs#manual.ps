URL: http://www.eecs.umich.edu/~chbrooks/492/PS5/docs/manual.ps
Refering-URL: http://www.eecs.umich.edu/~chbrooks/492/PS5/ucpop-tutorial.html
Root-URL: http://www.cs.umich.edu
Email: bug-ucpop@cs.washington.edu  
Title: ucpop User's Manual (Version 4.0)  
Author: Anthony Barrett, Dave Christianson, Marc Friedman, Chung Kwok, Keith Golden, Scott Penberthy, Ying Sun, Daniel Weld 
Address: Seattle, WA 98105  
Affiliation: Department of Computer Science and Engineering 1 University of Washington  
Abstract: Technical Report 93-09-06d November 6, 1995 1 We thank Marc Young for contributions to the documentation, Claudia Chiang and Alan Lundy for comments and proofreading, and other members of the AI group for discussions and suggestions regarding UW planning research. This work was funded in part by National Science Foundation Grants IRI-8957302 and IRI-9303461, Office of Naval Research Grants 90-J-1904 and N00014-94-1-0060, Apple Computer, Rockwell International, and the Xerox corporation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Allen, N. Lehrer, M. Boddy, J. Breese, M. Burstein, J. Carciofini, R. Desimone, C. Hammond, J. Lowrance, R. MacGregor, T. Russ, B. Schrag, S. Smith, A. Tate, M. Wellman, and D. Wilkins. </author> <title> Knowledge representation specification language. </title> <type> Technical Report Version 2.0, </type> <institution> DARPA / Rome Laboratory Planning and Scheduling Initiative, </institution> <year> 1992. </year>
Reference-contexts: A complete explanation of pdb operation is too lengthy for this manual | please refer instead to pdb's own reference manual, included as distribution file doc/pdb.html. 4 Creating New Domains Planning domains are defined using an action description language that is inspired by KRSL <ref> [1] </ref> but corresponds more closely to ADL [12] in expressive content. This section describes the salient features of ucpop's language and provides its grammar. 6 If you do not run clim then you should seriously consider buying it (contact your Lisp vendor for details).
Reference: [2] <institution> Artificial Intelligence Applications Institute, </institution> <address> 80 South Bridge, Edinburgh EH1 1HN, United Kingdom. </address> <note> O-Plan2 Users Guide, 1994. Available via anonymous ftp from aiai.ed.ac.uk. </note>
Reference: [3] <author> A. Barrett and D. Weld. </author> <title> Task-decomposition via plan parsing. </title> <booktitle> In Proc. 12th Nat. Conf. on A.I., </booktitle> <month> July </month> <year> 1994. </year> <note> Available via FTP from pub/ai/ at ftp.cs.washington.edu. </note>
Reference: [4] <author> J. Carbonell, J. Blythe, O. Etzioni, Y. Gil, R. Joseph, D. Kahn, C. Knoblock, S. Minton, A. Perez, S. Reilly, M. Veloso, and X. Wang. </author> <title> Prodigy 4.0: The manual and tutorial. </title> <institution> Cmu-cs-92-150, Carnegie-Mellon University, </institution> <year> 1992. </year> <note> Available via anonymous ftp from ftp.cs.cmu. </note>
Reference: [5] <editor> Foley et. al. </editor> <booktitle> Computer Graphics: Principles and Practice. </booktitle> <publisher> Addison Wesley, </publisher> <year> 1990. </year>
Reference: [6] <author> Preece et. al. </author> <title> Human-Computer Interaction. </title> <publisher> Addison Wesley, </publisher> <year> 1994. </year>
Reference: [7] <author> S. Kambhampati and Biplav Srivastava. </author> <title> Universal classical planner: An algorithm for unifying state- space and plan-space planning. </title> <institution> Department of Computer Science and Engineering TR-94-002, Arizona State University, </institution> <month> January </month> <year> 1995 1995. </year> <note> Submitted to IJCAI. </note>
Reference: [8] <author> P. Karp, J. Lowrance, T. Strat, and D. Wilkins. </author> <title> The grasper-cl graph management system. </title> <type> Technical report, </type> <institution> SRI International, </institution> <address> 333 Ravenswood Avenue, Menlo Park, CA 94025, </address> <month> February </month> <year> 1994. </year> <note> Available via http://www.ai.sri.com/people/wilkins/papers.html. </note>
Reference: [9] <author> R. Korf. </author> <title> Linear-space best-first search: Summary of results. </title> <booktitle> In Proc. 10th Nat. Conf. on A.I., </booktitle> <pages> pages 533-538, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Since the function bf-control performs a best first search, it uses exponential space. Another way to make ucpop avoid swamping a machine is to use the function ibf-control instead. This function performs an iterative deepening best first search as defined in <ref> [9] </ref>. 7 3.2 Operating ucpop from the Graphical User-Interface This section describes the Plan DeBugger (pdb), a graphical plan-space browser built to support the ucpop family of planners.
Reference: [10] <author> S. Minton, C. Knoblock, D. Koukka, Y. Gil, R. Joseph, and J. Carbonell. </author> <title> PRODIGY 2.0: The Manual and Tutorial. </title> <institution> CMU-CS-89-146, Carnegie-Mellon University, </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: If (on ?x ?y) is true at the time of the forall, then (clear ?x) must also be true. Considering all three options ensures completeness. The syntax and semantics of forall and exists was inspired by prodigy <ref> [10] </ref>. Finally, the &lt;GD&gt; is optional in forall and exists equations. This lets the user specify goals like (not (exists (on ?x b))) to require that a block b is clear. 4.4 Effects ucpop allows both conditional and universally quantified effects. <p> of a fact, the arithmetic &lt; operation, appears below and is used as a filter when planning. (define (fact (less-than ?x ?y)) (cond ((or (variable:variable? ?x) (variable:variable? ?y)) :no-match-attempted) ((and (numberp ?x) (numberp ?x) (&lt; ?x ?y)) '(nil)) The calling conventions for these functions are similar to those in prodigy <ref> [10] </ref>. When resolving a fact goal, ucpop evaluates the associated lisp function within the context of the goal term. For instance, the goal (less-than 5 13) would make ucpop evaluate the function with ?x and ?y being bound to the symbols 5 and 13 respectively. <p> The search controller uses a production system to guide 14 this process. Such an approach to search control is by no means new. Our control language was influenced by search control in prodigy <ref> [10] </ref>. To run a simple example that uses a controller defined in controllers.lisp and a problem from domains.lisp you can type: (sc-control 'uget-paid #'bf-mimic) This defines and runs the example problem mentioned earlier.
Reference: [11] <author> E. Pednault. </author> <title> Synthesizing plans that contain actions with context-dependent effects. </title> <journal> Computational Intelligence, </journal> <volume> 4(4) </volume> <pages> 356-372, </pages> <year> 1988. </year>
Reference-contexts: The rest of this manual assumes that you are in this package and refers to symbols locally. 3.1.1 A Simple Example To run a small example from domains.lisp you can type (bf-control 'uget-paid) This defines and runs Pednault's famous example <ref> [11] </ref> involving transportation of objects between home and work using a briefcase whose effects involve both universal quantification (all objects are moved) and conditional effects (if they are inside the briefcase when it is moved). Section 1.1 of [13] describes how ucpop solves a problem in this domain.
Reference: [12] <author> E. Pednault. </author> <title> ADL: Exploring the middle ground between STRIPS and the situation calculus. </title> <booktitle> In Proc. 1st Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 324-332, </pages> <year> 1989. </year> <month> 31 </month>
Reference-contexts: 1 Introduction This handout details the ucpop planning system | a clean Common Lisp implementation of an elegant algorithm for partial order planning with an expressive action representation. ucpop handles a large subset of ADL <ref> [12] </ref>, including actions with conditional effects, universally quantified preconditions and effects, and universally quantified goals. ucpop has desirable formal properties: e.g., [13] proves soundness and completeness. <p> complete explanation of pdb operation is too lengthy for this manual | please refer instead to pdb's own reference manual, included as distribution file doc/pdb.html. 4 Creating New Domains Planning domains are defined using an action description language that is inspired by KRSL [1] but corresponds more closely to ADL <ref> [12] </ref> in expressive content. This section describes the salient features of ucpop's language and provides its grammar. 6 If you do not run clim then you should seriously consider buying it (contact your Lisp vendor for details).
Reference: [13] <author> J.S. Penberthy and D. Weld. UCPOP: </author> <title> A sound, complete, partial order plan-ner for ADL. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 103-114, </pages> <month> October </month> <year> 1992. </year> <note> Available via FTP from pub/ai/ at ftp.cs.washington.edu. </note>
Reference-contexts: ucpop planning system | a clean Common Lisp implementation of an elegant algorithm for partial order planning with an expressive action representation. ucpop handles a large subset of ADL [12], including actions with conditional effects, universally quantified preconditions and effects, and universally quantified goals. ucpop has desirable formal properties: e.g., <ref> [13] </ref> proves soundness and completeness. <p> Any totally ordered completion of this partially ordered plan will achieve the problem's goals. Of necessity, this overview has been brief and conceptual. For a complete description of the ucpop algorithm see the file doc/kr92-ucpop.ps which contains a postscript version of the original paper <ref> [13] </ref>. For a tutorial introduction to least commitment planning (with several comprehensive examples) see the file doc/planning-intro.ps [16]. 2 In fact, domain dependent information can be used to guide the choice. <p> Section 1.1 of <ref> [13] </ref> describes how ucpop solves a problem in this domain. You may find it helpful to refer to that paper as you read the actual Common Lisp encoding below.
Reference: [14] <author> M. Peot and D. Smith. </author> <title> Threat-removal strategies for partial-order planning. </title> <booktitle> In Proc. 11th Nat. Conf. on A.I., </booktitle> <pages> pages 492-499, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Backtracking ensures that all choices will be eventually considered. 3 Setting the *dsep* switch to nil allows ucpop to use separation as an additional threat protection mechanism. Separation add binding constraints (when consistent) that ensure that S k cannot interfere with r. However, as explained in <ref> [14] </ref> separation is unnecessary and unproductive if threat processing is delayed. 1 1.2 New Features for Version 4.0 Many new features have been added to ucpop. The plan-space browser, originally known as the VCR, has been renamed pdb, or Plan DeBugger. <p> The variable *d-sep* is used to control the definition of an unsafety condition. When it is set to nil, all steps that can affect a link are reported as unsafety conditions. Otherwise, unsafety conditions only occur when a step affects a link without the addition of binding constraints. See <ref> [14] </ref> for a more detailed explanation of this strategy. A.2 Global Variables There are several global variables used to control ucpop. For instance, the variable *search-limit* was already mentioned in section 3.1.3.
Reference: [15] <author> L. Schubert and A. Gerevini. </author> <title> Accelerating partial order planners by improving plan and goal choices. </title> <booktitle> In Proceedings of the 7th IEEE Int. Conference on Tools with Artificial Intelligence, </booktitle> <month> November </month> <year> 1995. </year>
Reference-contexts: Section 4.7 describes how users can specify safety constraints in a domain. The language is also extended to allow specification of primary and side effects of actions to control search. ucpop supports ZLIFO, an alternative flaw ranking function which makes the planner go faster on many problems <ref> [15] </ref>. Type (turn-zlifo-on) and (turn-zlifo-off) to toggle all the ZLIFO settings at once. ZLIFO does not work on domains with universally quantified variables. See the file zlifo.doc for more details. 1.3 New Features in Previous Versions ucpop supports domain axioms as explained in section 4.5.
Reference: [16] <author> D. Weld. </author> <title> An introduction to least-commitment planning. </title> <journal> AI Magazine, </journal> <pages> pages 27-61, </pages> <month> Winter </month> <year> 1994. </year> <note> Available via FTP from pub/ai/ at ftp.cs.washington.edu. </note>
Reference-contexts: Of necessity, this overview has been brief and conceptual. For a complete description of the ucpop algorithm see the file doc/kr92-ucpop.ps which contains a postscript version of the original paper [13]. For a tutorial introduction to least commitment planning (with several comprehensive examples) see the file doc/planning-intro.ps <ref> [16] </ref>. 2 In fact, domain dependent information can be used to guide the choice. Backtracking ensures that all choices will be eventually considered. 3 Setting the *dsep* switch to nil allows ucpop to use separation as an additional threat protection mechanism.
Reference: [17] <author> D. Weld and O. Etzioni. </author> <title> The first law of robotics (a call to arms). </title> <booktitle> In Proc. 12th Nat. Conf. on A.I., </booktitle> <month> July </month> <year> 1994. </year> <note> Available via FTP from pub/ai/ at ftp.cs.washington.edu. 32 </note>
Reference-contexts: For details of safety constraints, please refer to <ref> [17] </ref> which is included as distribution file doc/first-law-aaai94.ps. 5 Creating a Search Controller ucpop solves a planning problem by taking an initial dummy plan, and performing a best first search through a space of plans for a solution.
References-found: 17

