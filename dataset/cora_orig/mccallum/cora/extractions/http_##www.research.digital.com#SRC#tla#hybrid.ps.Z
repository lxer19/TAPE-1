URL: http://www.research.digital.com/SRC/tla/hybrid.ps.Z
Refering-URL: http://www.research.digital.com/SRC/tla/papers.html
Root-URL: http://www.research.digital.com
Email: lamport@src.dec.com  
Title: Hybrid Systems in TLA  
Author: Leslie Lamport 
Date: 6 April 1993  
Affiliation: Digital Equipment Corporation Systems Research Center  
Abstract: To appear in: Hans Rischel and Anders P. Ravn, editors, Hybrid Systems, Lecture Notes in Computer Science, Berlin, 1993. Springer-Verlag. (Proceedings of a Workshop on Theory of Hybrid Systems, held 19-21 October 1992 at Lyngby, Denmark.) 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Martn Abadi and Leslie Lamport. </author> <title> An old-fashioned recipe for real time. </title> <type> Research Report 91, </type> <institution> Digital Equipment Corporation Systems Research Center, </institution> <year> 1992. </year> <title> An earlier version, without proofs, </title> <booktitle> appeared in [3, </booktitle> <pages> pages 1-27]. </pages>
Reference-contexts: In TLA + , one cannot declare x to be a Boolean variable and write 2x, one must instead write something like 2 (x = "T"). Although seemingly innocuous, Boolean variables pose the following problem. A specification may require an array x <ref> [1] </ref>, : : : , x [17] of flexible variables. Formally, such an array is a variable x whose value is a function with domain f1; : : :; 17g. <p> The RealTime module. 2.1 Real Time in TLA A method for writing real-time specifications in TLA is described in <ref> [1] </ref>. We now review this approach and introduce TLA + by defining the operators from [1] in the TLA + module RealTime of Figure 2. <p> The RealTime module. 2.1 Real Time in TLA A method for writing real-time specifications in TLA is described in <ref> [1] </ref>. We now review this approach and introduce TLA + by defining the operators from [1] in the TLA + module RealTime of Figure 2. The RealTime module first imports the module Reals, which is assumed to define the set R of real numbers with its usual arithmetic operators. 1 The module declares two parameters: the (flexible) variable now and the constant 1. <p> The axioms about the real numbers needed to prove such real-time properties as the correctness of Fischer's protocol <ref> [1] </ref> form a decidable theory. 6 that now is initially in R, and every step either (i) sets the new value of now to a real number greater than its current value and (ii) leaves the value of v unchanged, or else it leaves now unchanged. (A list of formulas bulleted <p> This is asserted by the formula RT (v) when v is the tuple whose components are the system's discrete variables. In <ref> [1] </ref>, timing constraints are expressed through the use of timer variables. <p> There are many ways of defining timers for expressing real-time constraints, and they are all easily expressed in TLA + . The method used in <ref> [1] </ref> is probably not optimal for the gas burner example. Although we might be able to simplify the specifications in this example by defining a new kind of timer, in practice one would use a fixed set of operators defined in a standard module like RealTime. <p> To make the example more realistic, we have used a pre-existing set of operators. 2.2 Hybrid Systems To represent hybrid systems in TLA, continuous system variables are represented by variables that change when now does. The gas-burner specification of RRH can be expressed using only the timers introduced in <ref> [1] </ref>. However, RRH's specification is somewhat artificial, apparently chosen to avoid reasoning with continuous mathematics. Instead of the natural requirement that the concentration of unburned gas never exceeds some value, RRH require that unburned gas never be released for more than 4 seconds out of any 30-second period. <p> Because it poses an interesting new challenge for TLA + , we specify the more natural requirement and prove that it is implied by the requirement of RRH. 2 Another type of timer is also defined in <ref> [1] </ref>, but it is not needed here. 7 The gas concentration g will satisfy an integral equation of the form g (t) = t 0 where the function F depends on the discrete variables. <p> Assume: MaxCon 4 fl fl (1 + (1=(1 exp [(30) fl ffi]))) Prove: RT (v) ^ Req1 ) Req0 h1i1. 999 999x : 8 r 2 R : [x [r] = 0+ G (r) j false; v] Proof: Follows from a standard theorem about the validity of adding history variables <ref> [1] </ref>, which asserts the validity of 999 999 x : (x = f ) ^ 2 [x 0 = g] w if x does not occur in f and x 0 does not occur in g. h1i2. ^ now = a ^ 8 r 2 R : [x [r] = 0+
Reference: 2. <author> K. Mani Chandy and Jayadev Misra. </author> <title> Parallel Program Design. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1988. </year>
Reference-contexts: At the moment, only a few syntactic issues remain unresolved. Because it is completely formal, some things are a little more awkward to express in TLA + than in "semi-formal" methods. For example, most semi-formal methods, such as Unity <ref> [2] </ref> and the temporal logic of Manna and Pnueli [7], allow Boolean-valued variables; TLA + does not. In TLA + , one cannot declare x to be a Boolean variable and write 2x, one must instead write something like 2 (x = "T"). <p> It is a strange formalism in which it is undecidable whether a formula is a wff. TLA + avoids this problem by not having Boolean-valued variables. Neither Manna and Pnueli [7] nor Misra and Chandy <ref> [2] </ref>, in books that are hundreds of pages long, indicate how they formalize Boolean arrays. There are dozens of similar issues that must be resolved in designing a complete language. A simple informal specification might not look so simple if it had to be written formally.
Reference: 3. <editor> J. W. de Bakker, C. Huizing, W. P. de Roever, and G. Rozenberg, editors. </editor> <booktitle> Real-Time: Theory in Practice, volume 600 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year> <title> Proceedings of a REX Real-Time Workshop, held in The Netherlands in June, </title> <year> 1991. </year>
Reference: 4. <author> Urban Engberg, Peter Grtnning, and Leslie Lamport. </author> <title> Mechanical verification of concurrent systems with tla. In Logics of Programs, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <address> Berlin, Heidelberg, New York, June 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: One reason is that the deduction principle, from which one deduces P ) Q by assuming P and proving Q, is invalid for most modal logics. In our work on the mechanical verification of TLA <ref> [4] </ref>, we have found formalizing temporal logic reasoning to be much more difficult than formalizing ordinary mathematical reasoning. Temporal logic proofs that look simple when done by hand can be tedious to check mechanically. <p> Q.E.D. Proof: From h2i3 by simple predicate logic, using the validity of 9 a : now = a. Because it involves quantification over flexible variables, this part of the proof cannot be handled by TLP, the mechanical verification system for TLA based on the LP theorem prover <ref> [4] </ref>. 7 The rest of the proof can, in principle, be verified using TLP. However, TLP does not yet contain the full definitional capability of TLA + , so many of the definitions would have to be expanded by hand.
Reference: 5. <author> Leslie Lamport. </author> <title> The temporal logic of actions. </title> <type> Research Report 79, </type> <institution> Digital Equipment Corporation, Systems Research Center, </institution> <month> December </month> <year> 1991. </year> <month> 26 </month>
Reference-contexts: 1 Introduction TLA + is a formal specification language based on TLA, the Temporal Logic of Actions <ref> [5] </ref>. We use TLA + to specify and verify a toy hybrid system|a gas burner described by Ravn, Rischel, and Hansen (RRH) [8]. The TLA + specification and proof can be compared with the one by RRH that uses the Duration Calculus. <p> The only additional operators are TLA's action operators (such as Enabled ) and temporal operators (such as 2). The syntax and formal semantics of these operators, which fit on one page, can be found in <ref> [5] </ref>. 4 Logic true false ^ _ : ) , 8 x : p 9 x : p 8 x 2 S : p 9 x 2 S : p choose x : p [Equals some x satisfying p] Sets = 6= 2 =2 [ " " [set difference] fe 1
Reference: 6. <author> A. C. Leisenring. </author> <title> Mathematical Logic and Hilbert's "-Symbol. </title> <publisher> Gordon and Breach, </publisher> <address> New York, </address> <year> 1969. </year>
Reference-contexts: Riemann integral 6 of the function f is defined to be a real number r such that, for every *, there is some ffi such that the approximation for every partition with subintervals of length less than ffi lies within * of r. (The operator choose denotes Hilbert's " operator <ref> [6] </ref>, so choose r : P (r) equals some value r such that P (r) is true, if such an r exists; otherwise, it has an unspecified value.) [c+ a G] The function f such that f [r] equals c+ R r a G [f [t]; t] dt. (The expression [s
Reference: 7. <author> Zohar Manna and Amir Pnueli. </author> <title> The Temporal Logic of Concurrent Systems. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: At the moment, only a few syntactic issues remain unresolved. Because it is completely formal, some things are a little more awkward to express in TLA + than in "semi-formal" methods. For example, most semi-formal methods, such as Unity [2] and the temporal logic of Manna and Pnueli <ref> [7] </ref>, allow Boolean-valued variables; TLA + does not. In TLA + , one cannot declare x to be a Boolean variable and write 2x, one must instead write something like 2 (x = "T"). Although seemingly innocuous, Boolean variables pose the following problem. <p> It is a strange formalism in which it is undecidable whether a formula is a wff. TLA + avoids this problem by not having Boolean-valued variables. Neither Manna and Pnueli <ref> [7] </ref> nor Misra and Chandy [2], in books that are hundreds of pages long, indicate how they formalize Boolean arrays. There are dozens of similar issues that must be resolved in designing a complete language.
Reference: 8. <author> Anders P. Ravn, Hans Rischel, and Kirsten M. Hansen. </author> <title> Specifying and verifying requirements of real-time systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <note> January 1993. to appear. </note>
Reference-contexts: 1 Introduction TLA + is a formal specification language based on TLA, the Temporal Logic of Actions [5]. We use TLA + to specify and verify a toy hybrid system|a gas burner described by Ravn, Rischel, and Hansen (RRH) <ref> [8] </ref>. The TLA + specification and proof can be compared with the one by RRH that uses the Duration Calculus. We do not expect TLA + to permit the best possible specification of this or any other particular example. <p> The on and off values of the other variables are similarly denoted by the strings "on" and "off". As is customary in TLA 8 @ @ Gas supply Ignition transformer Flame detector ( ( ( ( Flame - Heatreq signal Fig. 3. The gas burner. (Figure taken from <ref> [8] </ref>.) module BurnerParameters import HybridSystems, RealTime parameters gas, heatReq, flame, ignition : variables state function v = hgas; heatReq; flame; ignitioni predicates Gas = gas = "on" Flame = flame = "on" Heatreq = heatReq = "on" Ignition = ignition = "on" Fig. 4. <p> RRH also specify an "architecture". However, a comparison of Figures 2 and 3 of <ref> [8] </ref> reveals that this architecture is just the same implementation expressed in a CSP-like language. <p> The control model, adapted from Figures 2 and 3 of <ref> [8] </ref>. 21 from the HybridSystems module. However, we have already presented one level of specification and verification using the HybridSystems module's operators, so this would be more of the same. Moreover, this is not the type of specification one would naturally write with TLA.
References-found: 8

