URL: ftp://dirleton.csres.utexas.edu/pub/reports/082.ps
Refering-URL: http://www.cli.com/reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Verifying a Knowledge-Based Fuzzy Controller  
Phone: (512) 322-9951  
Author: Miren Carranza 
Note: This work was supported in part at Computational Logic, Inc., by the Defense Advanced Research Projects Agency, ARPA Order 7406. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of Computational Logic, Inc., the Defense Advanced Research Projects Agency or the U.S. Government.  
Address: 1717 W. 6th St. Suite 290 Austin, Texas 78703  
Affiliation: Computational Logic Inc.  
Abstract: Technical Report 82 September 1992 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> W.R. Bevier. </author> <title> "Kit and the Short Stack". </title> <journal> Journal of Automated Reasoning 5, </journal> <month> 4 (December </month> <year> 1989), </year> <pages> 519-530. </pages>
Reference-contexts: A subfield of formal methods is automated reasoning that attempts to partially mechanize the process of reasoning about system correctness. Mechanically supported formal methods have been applied to a variety of applications such as: language implementations [16, 20], operating systems <ref> [1] </ref>, concurrent algorithms [8, 14], fault-tolerant systems [3], computer hardware [7], a simple real-time controller [5], and a wide variety of others. We are attempting to apply such techniques to a new application domain, namely the correctness of fuzzy rule-based control systems.
Reference: 2. <author> W.R. Bevier, W.A. Hunt, Jr., J S. Moore, W.D. Young. </author> <title> "An Approach to Systems Verification". </title> <journal> Journal of Automated Reasoning 5, </journal> <month> 4 (December </month> <year> 1989), </year> <pages> 411-428. </pages>
Reference-contexts: Recent work at CLI includes the mechanically checked proofs of a high-level language compiler, an assembler, a microprocessor, and a simple multi-tasking operating system. These verified components were integrated into a vertically verified system called the ``CLI Short Stack'' <ref> [2] </ref>, the first such system of which we are aware. Many other interesting theorems have been proven as well.
Reference: 3. <author> W.R. Bevier, W.D. Young. </author> <title> The Proof of Correctness of a Fault-Tolerant Circuit Design. </title> <booktitle> Proceedings of the Second International Working Conference on Dependable Computing for Critical Applications, </booktitle> <month> February, </month> <year> 1991, </year> <pages> pp. 107-114. </pages>
Reference-contexts: A subfield of formal methods is automated reasoning that attempts to partially mechanize the process of reasoning about system correctness. Mechanically supported formal methods have been applied to a variety of applications such as: language implementations [16, 20], operating systems [1], concurrent algorithms [8, 14], fault-tolerant systems <ref> [3] </ref>, computer hardware [7], a simple real-time controller [5], and a wide variety of others. We are attempting to apply such techniques to a new application domain, namely the correctness of fuzzy rule-based control systems.
Reference: 4. <author> R.S. Boyer and J S. Moore. </author> <title> A Computational Logic. </title> <publisher> Academic Press, Inc., ACM Monograph Series, </publisher> <address> Boston, </address> <year> 1979. </year>
Reference-contexts: I also would like to express my appreciation to Dr. Benito Fernandez of the University of Texas at Austin for his help on the topic of fuzzy systems. 10 Appendix A The Boyer-Moore Logic and Theorem Prover The Boyer-Moore logic <ref> [4, 6] </ref> is a quantifier-free, first-order predicate calculus with equality and induction. Logic formulas are written in a prefix-style, Lisp-like notation. Recursive functions may be defined and must be proven to terminate. The logic includes several built-in data types: Booleans, natural numbers, lists, literal atoms, and integers.
Reference: 5. <author> R. S. Boyer, M. W. Green and J S. Moore. </author> <title> The Use of a Formal Simulator to Verify a Simple Real Time Control Program. In Beauty Is Our Business, </title> <publisher> Springer-Verlag, </publisher> <year> 1990, </year> <pages> pp. 55-64. </pages>
Reference-contexts: Mechanically supported formal methods have been applied to a variety of applications such as: language implementations [16, 20], operating systems [1], concurrent algorithms [8, 14], fault-tolerant systems [3], computer hardware [7], a simple real-time controller <ref> [5] </ref>, and a wide variety of others. We are attempting to apply such techniques to a new application domain, namely the correctness of fuzzy rule-based control systems.
Reference: 6. <author> R.S. Boyer and J S. Mooer. </author> <title> A Computational Logic Handbook. </title> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: We are attempting to apply such techniques to a new application domain, namely the correctness of fuzzy rule-based control systems. To this end, we have modeled a simple controller in the computational logic of Boyer and Moore <ref> [6] </ref> and proved some theorems about its behavior using the automatic theorem prover that supports that logic. We should note that both our fuzzy controller and the model of its behavior are quite simple. <p> I also would like to express my appreciation to Dr. Benito Fernandez of the University of Texas at Austin for his help on the topic of fuzzy systems. 10 Appendix A The Boyer-Moore Logic and Theorem Prover The Boyer-Moore logic <ref> [4, 6] </ref> is a quantifier-free, first-order predicate calculus with equality and induction. Logic formulas are written in a prefix-style, Lisp-like notation. Recursive functions may be defined and must be proven to terminate. The logic includes several built-in data types: Booleans, natural numbers, lists, literal atoms, and integers. <p> The logic includes several built-in data types: Booleans, natural numbers, lists, literal atoms, and integers. Additional data types can be defined. The syntax, axioms, and rules of inference of the logic are given precisely in A Computational Logic Handbook <ref> [6] </ref>. The Boyer-Moore logic can be extended by the application of the following axiomatic acts: defining functions, adding recursively constructed data types, and adding arbitrary axioms. Adding an arbitrary formula as an axiom does not guarantee the soundness of the logic; we do not use this feature.
Reference: 7. <author> Bishop C. Brock, W.A. Hunt, Jr., and W.D. Young. </author> <title> Introduction to a Formally Defined Hardware Description Language. </title> <booktitle> Proceedings of the IFIP Conference on Theorem Provers in Circuit Design, </booktitle> <year> 1992, </year> <pages> pp. 3-36. </pages>
Reference-contexts: Mechanically supported formal methods have been applied to a variety of applications such as: language implementations [16, 20], operating systems [1], concurrent algorithms [8, 14], fault-tolerant systems [3], computer hardware <ref> [7] </ref>, a simple real-time controller [5], and a wide variety of others. We are attempting to apply such techniques to a new application domain, namely the correctness of fuzzy rule-based control systems.
Reference: 8. <author> D.M. Goldschlag. </author> <title> "Mechanically Verifying Concurrent Programs with the Boyer-Moore Prover". </title> <journal> IEEE Transactions on Software Engineering 16 (September 1990). </journal>
Reference-contexts: A subfield of formal methods is automated reasoning that attempts to partially mechanize the process of reasoning about system correctness. Mechanically supported formal methods have been applied to a variety of applications such as: language implementations [16, 20], operating systems [1], concurrent algorithms <ref> [8, 14] </ref>, fault-tolerant systems [3], computer hardware [7], a simple real-time controller [5], and a wide variety of others. We are attempting to apply such techniques to a new application domain, namely the correctness of fuzzy rule-based control systems.
Reference: 9. <author> D.I. Good and W.D. Young. </author> <title> Mathematical Methods for Digital Systems Development. In VDM '91: Formal Software Development Methods, </title> <editor> S. Prehn and W.J. Toetenal, Ed., </editor> <booktitle> Springer-Verlag Lecture Notes in Computer Science 552, </booktitle> <year> 1991, </year> <pages> pp. 406-430. </pages>
Reference-contexts: We would like to extend this work in several ways. Proofs of the properties are currently quite inelegant and rely upon the simplicity of the controller. We envision developing a ``reusable theory'' <ref> [9] </ref> of fuzzy control that will allow us to prove more general and more broadly applicable theorems. The mechanical support in the prover for the underlying mathematics of fuzzy control is lacking. Rationals are supported in the Boyer-Moore logic, but real number arithmetic and analysis is not.
Reference: 10. <author> L.P. Holmblad and J.J. Ostergaard. </author> <title> Control of a Cement Kiln in Fuzzy Logic. In Fuzzy Information and Decision Processes, </title> <editor> M. Gupta and E. Sanchez, Ed., </editor> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1982. </year>
Reference-contexts: Fuzzy rule-based control systems are similar to expert systems in that the rules embody human expert knowledge about the control operation that is being mechanized. To illustrate, one of the first applications of fuzzy control was the automation of the operation of a cement kiln <ref> [10] </ref>. Though humans could operate the kiln efficiently, efforts to find a representative control function failed. The exact mathematical specification of the process proved too comprehensive and complex to build. A fuzzy representation of the process was developed and performed successfully.
Reference: 11. <author> B. Kosko. </author> <title> Neural Networks and Fuzzy Systems: A Dynamical Systems Approach to Machine Intelligence. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1992. </year>
Reference-contexts: In the example above, since the current level is more in the low than medium range, the combination of the rules may call for the drain to be closed slightly. There are many methods described in the literature <ref> [11, 12, 13] </ref> to combine the recommended fuzzy control actions into a single crisp control action. We describe our approach in a subsequent section. The operation of the fuzzy controller may be summarized in the following list of steps. 1. <p> There are several methods to combine the different fuzzy control actions considering the corresponding strengths with which each was recommended. We use the de-fuzzification method known as the Fuzzy Centroid Method <ref> [11] </ref>. Notice that our crisp input values have been fuzzified into a collection of fuzzy states such as -(LOW-LEVEL 14), (MED-FLOW 20)-. However, we have designed our rule set in such a way that there is exactly one rule with antecedent &lt;LOW-LEVEL, MED-FLOW&gt;, namely, &lt;low-level, med-flow&gt; fi min-close.
Reference: 12. <author> G. Langari and M. Tomizuka. </author> <title> Fuzzy Linguistic Model Based Control. </title> <type> Technical Report CFL-90-004, </type> <institution> Texas A&M University Center for Fuzzy Logic and Intelligent Systems Research, </institution> <month> September, </month> <year> 1990. </year>
Reference-contexts: In the example above, since the current level is more in the low than medium range, the combination of the rules may call for the drain to be closed slightly. There are many methods described in the literature <ref> [11, 12, 13] </ref> to combine the recommended fuzzy control actions into a single crisp control action. We describe our approach in a subsequent section. The operation of the fuzzy controller may be summarized in the following list of steps. 1.
Reference: 13. <author> C.C. Lee. </author> <title> "Fuzzy Logic in Control Systems: Fuzzy Logic Controller-Part I)". </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics 20, </journal> <note> 2 (March-April 1990), </note> . 
Reference-contexts: In the example above, since the current level is more in the low than medium range, the combination of the rules may call for the drain to be closed slightly. There are many methods described in the literature <ref> [11, 12, 13] </ref> to combine the recommended fuzzy control actions into a single crisp control action. We describe our approach in a subsequent section. The operation of the fuzzy controller may be summarized in the following list of steps. 1. <p> To do this, we establish a weighting factor (firing strength) of each rule and then combine the rules according to this weighting factor to determine a final crisp action. Various approaches to this problem are discussed in <ref> [13] </ref>. 6 To determine the firing strength of each rule we use a method derived independently by Mamdani [15] and Togai [19]. This uses the multivalued logical-implication operator: truth -a (i) -&gt; b (j)- = min -a (i), b (j)-.
Reference: 14. <author> C. Lengauer, C.H. Huang. </author> <title> A Mechanically Certified Theorem about Optimal Concurrency of Sorting Networks. </title> <booktitle> Proceedings 13th ACM POPL, </booktitle> <year> 1986, </year> <pages> pp. 307-317. </pages>
Reference-contexts: A subfield of formal methods is automated reasoning that attempts to partially mechanize the process of reasoning about system correctness. Mechanically supported formal methods have been applied to a variety of applications such as: language implementations [16, 20], operating systems [1], concurrent algorithms <ref> [8, 14] </ref>, fault-tolerant systems [3], computer hardware [7], a simple real-time controller [5], and a wide variety of others. We are attempting to apply such techniques to a new application domain, namely the correctness of fuzzy rule-based control systems.
Reference: 15. <author> E.H. Mamdani. </author> <title> "Application of Fuzzy Logic to Approximate Reasoning Using Linguistic Synthesis". </title> <journal> IEEE Transactions on Computers C-26, </journal> <month> 12 (December </month> <year> 1977), </year> <pages> 1182-1191. </pages>
Reference-contexts: Various approaches to this problem are discussed in [13]. 6 To determine the firing strength of each rule we use a method derived independently by Mamdani <ref> [15] </ref> and Togai [19]. This uses the multivalued logical-implication operator: truth -a (i) -&gt; b (j)- = min -a (i), b (j)-. For each rule in our database we determine the activation degree of the consequent the recommended control action as follows.
Reference: 16. <author> J S. Moore. </author> <title> "A Mechanically Verified Language Implementation". </title> <journal> Journal of Automated Reasoning 5, </journal> <month> 4 (December </month> <year> 1989), </year> <pages> 493-518. </pages>
Reference-contexts: A subfield of formal methods is automated reasoning that attempts to partially mechanize the process of reasoning about system correctness. Mechanically supported formal methods have been applied to a variety of applications such as: language implementations <ref> [16, 20] </ref>, operating systems [1], concurrent algorithms [8, 14], fault-tolerant systems [3], computer hardware [7], a simple real-time controller [5], and a wide variety of others. We are attempting to apply such techniques to a new application domain, namely the correctness of fuzzy rule-based control systems.
Reference: 17. <author> G.L. Steele, Jr. </author> <title> Common LISP: The Language. </title> <publisher> Digital Press, </publisher> <year> 1984. </year>
Reference-contexts: Adding an arbitrary formula as an axiom does not guarantee the soundness of the logic; we do not use this feature. The Boyer-Moore theorem proving system (theorem prover) is a Common Lisp <ref> [17] </ref> program that provides a user with various commands to extend the logic and to prove theorems. A user enters theorem prover commands through the top-level Common Lisp interpreter.
Reference: 18. <author> M. Sugeno, </author> <title> editor. Industrial Applications of Fuzzy Control. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1985. </year> <note> 19. </note> ?. <author> Togai and H. Watanabe. </author> <title> "Expert System on a Chip: An Engine for Realtime Approximate Reasoning". </title> <journal> IEEE Expert 1, </journal> <month> 3 </month> <year> (1986). </year>
Reference-contexts: Fuzzy Control Conventional controllers cannot provide adequate control for systems that have time-varying parameters, unknown structures, and multiple objects. Yet numerous systems with such characteristics are controlled by humans. There have been several success stories in the construction of automated controllers based on human expertise, notably using fuzzy controllers <ref> [18] </ref>. Fuzzy rule-based control systems are similar to expert systems in that the rules embody human expert knowledge about the control operation that is being mechanized. To illustrate, one of the first applications of fuzzy control was the automation of the operation of a cement kiln [10]. <p> However, we hope to continue with the present tools and develop as much proof support as possible within our current proof paradigm. Our controller is unrealistically simple. We would like to formalize and prove properties of an existing fuzzy controller such as Sugeno's predictive controller <ref> [18] </ref>. Acknowledgements: I want to acknowledge the work of the many researchers at Computational Logic who have contributed to the development of proof methodologies and strategies that have paved the way for the formalization and verification of systems in the Boyer-Moore logic.
Reference: 20. <author> W.D. Young. </author> <title> "A Mechanically Verified Code Generator". </title> <note> Journal of Automated Reasoning 5, 4 (December 1989), 493-518. i Table of Contents </note>
Reference-contexts: A subfield of formal methods is automated reasoning that attempts to partially mechanize the process of reasoning about system correctness. Mechanically supported formal methods have been applied to a variety of applications such as: language implementations <ref> [16, 20] </ref>, operating systems [1], concurrent algorithms [8, 14], fault-tolerant systems [3], computer hardware [7], a simple real-time controller [5], and a wide variety of others. We are attempting to apply such techniques to a new application domain, namely the correctness of fuzzy rule-based control systems.
Reference: 1. <institution> Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 </institution>
Reference-contexts: A subfield of formal methods is automated reasoning that attempts to partially mechanize the process of reasoning about system correctness. Mechanically supported formal methods have been applied to a variety of applications such as: language implementations [16, 20], operating systems <ref> [1] </ref>, concurrent algorithms [8, 14], fault-tolerant systems [3], computer hardware [7], a simple real-time controller [5], and a wide variety of others. We are attempting to apply such techniques to a new application domain, namely the correctness of fuzzy rule-based control systems.
Reference: 2. <institution> Fuzzy Control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 </institution>
Reference-contexts: Recent work at CLI includes the mechanically checked proofs of a high-level language compiler, an assembler, a microprocessor, and a simple multi-tasking operating system. These verified components were integrated into a vertically verified system called the ``CLI Short Stack'' <ref> [2] </ref>, the first such system of which we are aware. Many other interesting theorems have been proven as well.


Reference: 5. <institution> Conclusions and Future Directions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9 </institution>
Reference-contexts: Mechanically supported formal methods have been applied to a variety of applications such as: language implementations [16, 20], operating systems [1], concurrent algorithms [8, 14], fault-tolerant systems [3], computer hardware [7], a simple real-time controller <ref> [5] </ref>, and a wide variety of others. We are attempting to apply such techniques to a new application domain, namely the correctness of fuzzy rule-based control systems.
References-found: 22

