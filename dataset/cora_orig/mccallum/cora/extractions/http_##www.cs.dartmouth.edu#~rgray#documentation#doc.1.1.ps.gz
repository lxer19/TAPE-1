URL: http://www.cs.dartmouth.edu/~rgray/documentation/doc.1.1.ps.gz
Refering-URL: http://www.cs.dartmouth.edu/~agent/papers/index.html
Root-URL: http://www.cs.dartmouth.edu
Email: E-mail: robert.s.gray@dartmouth.edu  
Title: Agent Tcl: Alpha Release 1.1  
Author: Robert S. Gray 
Note: Supported by AFOSR contract F49620-93-1-0266 and ONR contract N00014-95-1-1204  
Date: December 1, 1995  
Address: Hanover, NH 03755  
Affiliation: Department of Computer Science Dartmouth College  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [JvRS95] <author> Dag Johansen, Robbert van Renesse, and Fred B. Scheidner. </author> <title> Operating system support for mobile agents. </title> <booktitle> In Proceedings of the 5th IEEE Workshop on Hot Topics in Operating Systems, </booktitle> <year> 1995. </year>
Reference-contexts: The two most notable transportable agent systems are Telescript from General Magic [Whi94, Whi95b, Whi95a] and TACOMA from Cornell University <ref> [JvRS95] </ref>. Telescript is a dynamic object-oriented language that is centered around network communication. An agent written in Telescript uses the go instruction to migrate to a new machine. The agent continues execution on the new machine from the instruction after the go. <p> Transportable agents are a convenient paradigm for distributed computing. They make efficient use of network resources, support the peer-to-peer model and tolerate network disconnection. In addition they 4 hide the communication channels but not the location of the computation <ref> [JvRS95] </ref>. The agent specifies when and where to migrate but the system handles the transmission details.
Reference: [Lew95] <author> Ted G. Lewis. </author> <booktitle> Where is client/server software heading? IEEE Computer, </booktitle> <pages> pages 49-55, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Transportable agents replace this artificial division with a peer-to-peer model in which agents communicate as peers and act as both clients and servers depending on their current needs and capabilities. Such a model provides far more flexibility when developing distributed applications <ref> [Lew95] </ref>. In addition traditional servers provide a fixed set of operations. All operations that are not provided in this fixed set must be performed at the client.
Reference: [Ous94] <author> John K. Ousterhout. </author> <title> Tcl and the Tk toolkit. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1994. </year>
Reference-contexts: Tk is relatively easy to learn, however, since it provides high-level commands for creating Motif-like interfaces. For example, the following Tk script creates a button that says "Hello, World!". Clicking on the button terminates the script. This example was taken from <ref> [Ous94] </ref>. #!/usr/contrib/bin/wish # # hello.tk # # This is the "Hello, World!" example from [Ous94]. # make the "Hello, World!" button button .button -text "Hello, World!" -command exit pack .button 13 Again there are three ways to execute the script. <p> For example, the following Tk script creates a button that says "Hello, World!". Clicking on the button terminates the script. This example was taken from <ref> [Ous94] </ref>. #!/usr/contrib/bin/wish # # hello.tk # # This is the "Hello, World!" example from [Ous94]. # make the "Hello, World!" button button .button -text "Hello, World!" -command exit pack .button 13 Again there are three ways to execute the script. Type wish and then source hello.tk; type wish hello.tk; or turn on the execution permissions for file hello.tk and just type hello.tk. <p> Type wish and then source hello.tk; type wish hello.tk; or turn on the execution permissions for file hello.tk and just type hello.tk. There are numerous sources of information on Tcl and Tk. I recommend the book by Ousterhout <ref> [Ous94] </ref>, the book by Welch [Wel95] and the Tcl news group comp.lang.tcl. 7 Agent Tcl Standard Tcl has no notion of transportability so we have developed an extended version of Tcl called Agent Tcl that provides a special set of commands. <p> Note that you can use all of the listed constructs; the limitation is that you can not create or define the construct on one machine and then transmit it to another machine. All of these Tcl features are described in <ref> [Ous94] </ref> and [Wel95]. The most important thing to note is that it is nearly impossible to use them accidentally. <p> The reason is that an agent might not need to interact with the user on certain machines or at certain times. Thus it requests a main window only when needed. For example, the "Hello, World!" script from <ref> [Ous94] </ref> should be rewritten as #!/usr/contrib/bin/agent-tk # hello.two.tk # # This is the "Hello, World!" example from [Ous95] except that we use "main # create" to get a main window. # create the main window main create -name Hello -display :0 59 # make the "Hello, World!" button button .button -text
Reference: [Ous95] <author> John K. Ousterhout. </author> <title> Scripts and agents: The new software high ground. </title> <booktitle> Invited Talk at 1995 Winter USENIX Conference, </booktitle> <month> January </month> <year> 1995. </year>
Reference-contexts: In addition an application can dynamically distribute its server components when it starts executing. Applications that have been suggested for transportable agents include distributed information retrieval, network management, active e-mail, active documents, control of remote devices and electronic shopping <ref> [Whi94, Ous95] </ref>. Our research group at Dartmouth began exploring transportable agents in the context of distributed information retrieval and attempted to find an existing system that would meet our needs. <p> Thus it requests a main window only when needed. For example, the "Hello, World!" script from [Ous94] should be rewritten as #!/usr/contrib/bin/agent-tk # hello.two.tk # # This is the "Hello, World!" example from <ref> [Ous95] </ref> except that we use "main # create" to get a main window. # create the main window main create -name Hello -display :0 59 # make the "Hello, World!" button button .button -text "Hello, World!" -command exit pack .button This script creates the window Clicking on the "Hello, World!" causes
Reference: [Wel95] <author> Brent B. Welch. </author> <title> Practical Programming in Tcl and Tk. </title> <publisher> Prentice-Hall, </publisher> <address> Upper Saddle River, New Jersey, </address> <year> 1995. </year>
Reference-contexts: Type wish and then source hello.tk; type wish hello.tk; or turn on the execution permissions for file hello.tk and just type hello.tk. There are numerous sources of information on Tcl and Tk. I recommend the book by Ousterhout [Ous94], the book by Welch <ref> [Wel95] </ref> and the Tcl news group comp.lang.tcl. 7 Agent Tcl Standard Tcl has no notion of transportability so we have developed an extended version of Tcl called Agent Tcl that provides a special set of commands. <p> Note that you can use all of the listed constructs; the limitation is that you can not create or define the construct on one machine and then transmit it to another machine. All of these Tcl features are described in [Ous94] and <ref> [Wel95] </ref>. The most important thing to note is that it is nearly impossible to use them accidentally. If you do not know what they are or do not think that you are using them, you are not using them. 7.7 Meetings A meeting is a direct connection between two agents.
Reference: [Whi94] <author> James E. White. </author> <title> Telescript technology: The foundation for the electronic marketplace. General Magic White Paper, General Magic, </title> <year> 1994. </year>
Reference-contexts: Although the idea of a program that can move from machine to machine under its own control is not new [WVF89], it is only in the last two years that production-quality systems have been implemented. The two most notable transportable agent systems are Telescript from General Magic <ref> [Whi94, Whi95b, Whi95a] </ref> and TACOMA from Cornell University [JvRS95]. Telescript is a dynamic object-oriented language that is centered around network communication. An agent written in Telescript uses the go instruction to migrate to a new machine. The agent continues execution on the new machine from the instruction after the go. <p> An agent executes local to the resource and returns only its final result to the client. No network resources are wasted on intermediate data. The performance gain is greatest in low bandwidth or high latency networks <ref> [Whi94] </ref>. Modern client/server techniques such as remote evaluation and SUPRA-RPC allow a program to migrate to the resource as well. However these techniques maintain the fixed client/server division since the programs are anonymous entities that can not communicate easily with each other. <p> Transportable agents do not require a continuous connection and do not require the maintenance of state information at both the local and remote machine. This makes transportable agents more fault tolerant [WVF89] and in combination with their low use of network resources makes them ideally suited to mobile computing <ref> [Whi94] </ref>. Mobile computing is characterized by high latency, low bandwidth and periods of disconnection from the network. Transportable agents are a convenient paradigm for distributed computing. They make efficient use of network resources, support the peer-to-peer model and tolerate network disconnection. <p> In addition an application can dynamically distribute its server components when it starts executing. Applications that have been suggested for transportable agents include distributed information retrieval, network management, active e-mail, active documents, control of remote devices and electronic shopping <ref> [Whi94, Ous95] </ref>. Our research group at Dartmouth began exploring transportable agents in the context of distributed information retrieval and attempted to find an existing system that would meet our needs.
Reference: [Whi95a] <author> James E. White. </author> <title> Telescript technology: An introduction to the language. General Magic White Paper, General Magic, </title> <year> 1995. </year>
Reference-contexts: Although the idea of a program that can move from machine to machine under its own control is not new [WVF89], it is only in the last two years that production-quality systems have been implemented. The two most notable transportable agent systems are Telescript from General Magic <ref> [Whi94, Whi95b, Whi95a] </ref> and TACOMA from Cornell University [JvRS95]. Telescript is a dynamic object-oriented language that is centered around network communication. An agent written in Telescript uses the go instruction to migrate to a new machine. The agent continues execution on the new machine from the instruction after the go.
Reference: [Whi95b] <author> James E. White. </author> <title> Telescript technology: Scenes from the electronic marketplace. General Magic White Paper, General Magic, </title> <year> 1995. </year>
Reference-contexts: Although the idea of a program that can move from machine to machine under its own control is not new [WVF89], it is only in the last two years that production-quality systems have been implemented. The two most notable transportable agent systems are Telescript from General Magic <ref> [Whi94, Whi95b, Whi95a] </ref> and TACOMA from Cornell University [JvRS95]. Telescript is a dynamic object-oriented language that is centered around network communication. An agent written in Telescript uses the go instruction to migrate to a new machine. The agent continues execution on the new machine from the instruction after the go.
Reference: [WVF89] <author> C. Daniel Wolfson, Ellen M. Voorhees, and Maura M. Flatley. </author> <title> Intelligent routers. </title> <booktitle> In Proceedings of the Ninth International Conference on Distributed Computing Systems, </booktitle> <pages> pages 371-376. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1989. </year> <month> 70 </month>
Reference-contexts: The program chooses when and where to migrate. It can suspend its execution at an arbitrary point, transport to another machine and resume execution on the new machine. Although the idea of a program that can move from machine to machine under its own control is not new <ref> [WVF89] </ref>, it is only in the last two years that production-quality systems have been implemented. The two most notable transportable agent systems are Telescript from General Magic [Whi94, Whi95b, Whi95a] and TACOMA from Cornell University [JvRS95]. Telescript is a dynamic object-oriented language that is centered around network communication. <p> In addition remote evaluation and SUPRA-RPC require a connection between communicating machines. Transportable agents do not require a continuous connection and do not require the maintenance of state information at both the local and remote machine. This makes transportable agents more fault tolerant <ref> [WVF89] </ref> and in combination with their low use of network resources makes them ideally suited to mobile computing [Whi94]. Mobile computing is characterized by high latency, low bandwidth and periods of disconnection from the network. Transportable agents are a convenient paradigm for distributed computing.
References-found: 9

