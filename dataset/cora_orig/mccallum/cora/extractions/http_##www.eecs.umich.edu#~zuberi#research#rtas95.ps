URL: http://www.eecs.umich.edu/~zuberi/research/rtas95.ps
Refering-URL: http://www.eecs.umich.edu/~zuberi/research/
Root-URL: http://www.cs.umich.edu
Email: fzuberi,kgshing@eecs.umich.edu  
Title: Non-Preemptive Scheduling of Messages on Controller Area Network for Real-Time Control Applications  
Author: Khawar M. Zuberi and Kang G. Shin 
Address: Ann Arbor, MI 48109-2122  
Affiliation: Real-Time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: Scheduling messages on the Controller Area Network (CAN) corresponds to assigning identifiers (IDs) to messages according to their priorities. If fixed-priority scheduling such as deadline monotonic (DM) is used to calculate these priorities, then in general, it will result in low schedulability. Dynamic scheduling schemes such as earliest-deadline (ED) can give greater schedulability, but they are not practical for CAN because if the ID is to reflect message deadlines then a long ID must be used. This increases the length of each message to the point that ED is no better than DM. Our solution to this problem is the mixed traffic scheduler (MTS), which is a cross between ED and DM, and provides high schedulability without needing long IDs. Through simulations, we compare the performance of MTS with that of DM and ED* (an imaginary scheduler which works like ED, except it needs only short IDs). We use a realistic workload in our simulations based on messages typically found in computer-integrated manufacturing. Our simulations show that MTS performs much better than DM and at the same level as ED*, except under high loads and tight deadlines, when ED* is superior. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Brignell and N. White, </author> <title> Intelligent Sensor Systems, </title> <address> Bristol, Philadelphia, </address> <year> 1994. </year>
Reference-contexts: A better solution will be to distribute intelligence by using smart sensors (sensors with limited processing abilities) <ref> [1] </ref>. In other words, it is far better to let the sensor detect the event and notify the processor. This way, instead of one message every 10ms, there will be just one message whenever the event occurs, which is at least 10s apart. <p> In fact, maximum interval between two such events is unbounded (event may never occur again). In such cases, using periodic messages is a waste because there is nothing to say most of the time. Smart sensors <ref> [1] </ref> are most suitable for detecting such events. These sensors have DSP capabilities to recognize events on their own, so they signal the controller only when required.
Reference: [2] <author> A. Tanenbaum, </author> <title> Computer Networks, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1989. </year>
Reference-contexts: The protocol must give fast bus access to high priority sporadic messages. R2. Since all real-time systems also have periodic messages, the protocol should be able to support such messages efficiently as well. When trying to find such a protocol, we can immediately disregard CSMA-CD protocols like Ethernet <ref> [2] </ref> because of their unbounded network access latency. We can consider synchronous protocols like the token bus [2] and the time-triggered protocol (TTP) [3]. <p> When trying to find such a protocol, we can immediately disregard CSMA-CD protocols like Ethernet <ref> [2] </ref> because of their unbounded network access latency. We can consider synchronous protocols like the token bus [2] and the time-triggered protocol (TTP) [3]. They satisfy the second requirement but not the first: it is well-known that these protocols give a large worst-case bus access latency making them unsuitable for systems with tight-deadline sporadic messages [4].
Reference: [3] <author> H. Kopetz and G. Grunsteidl, </author> <title> "TTP a protocol for fault-tolerant real-time systems," </title> <journal> IEEE Computer, </journal> <volume> vol. 27, no. 1, </volume> <pages> pp. 14-23, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: When trying to find such a protocol, we can immediately disregard CSMA-CD protocols like Ethernet [2] because of their unbounded network access latency. We can consider synchronous protocols like the token bus [2] and the time-triggered protocol (TTP) <ref> [3] </ref>. They satisfy the second requirement but not the first: it is well-known that these protocols give a large worst-case bus access latency making them unsuitable for systems with tight-deadline sporadic messages [4].
Reference: [4] <author> J. K. Strosnider and T. E. Marchok, </author> <title> "Responsive, deterministic IEEE 802.5 token ring scheduling," </title> <journal> Journal of Real-Time Systems, </journal> <volume> vol. 1, no. 2, </volume> <pages> pp. 133-158, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: We can consider synchronous protocols like the token bus [2] and the time-triggered protocol (TTP) [3]. They satisfy the second requirement but not the first: it is well-known that these protocols give a large worst-case bus access latency making them unsuitable for systems with tight-deadline sporadic messages <ref> [4] </ref>. The Controller Area Network (CAN) [5, 6] is a contention-based multi-master network which uses a wired-OR (or wired-AND) bus and has the potential to efficiently handle both periodic as well as sporadic messages, thus satisfying both R1 and R2.
Reference: [5] <institution> CAN Specification Version 2.0, Robert Bosch GmbH, </institution> <year> 1991. </year>
Reference-contexts: They satisfy the second requirement but not the first: it is well-known that these protocols give a large worst-case bus access latency making them unsuitable for systems with tight-deadline sporadic messages [4]. The Controller Area Network (CAN) <ref> [5, 6] </ref> is a contention-based multi-master network which uses a wired-OR (or wired-AND) bus and has the potential to efficiently handle both periodic as well as sporadic messages, thus satisfying both R1 and R2. <p> The next section describes the CAN protocol in detail. Section 3 describes the various types of messages in our target application workload. Section 4 gives the MTS algorithm and its schedulability conditions. Section 5 gives simulation results. The paper concludes with Section 6. 2 Controller Area Network (CAN) CAN <ref> [5, 6] </ref> is an advanced serial communication protocol for distributed real-time control systems.
Reference: [6] <editor> SAE Handbook, </editor> <booktitle> Society of Automotive Engineers, </booktitle> <pages> pp. </pages> <address> 20.379-20.392, </address> <year> 1993. </year>
Reference-contexts: They satisfy the second requirement but not the first: it is well-known that these protocols give a large worst-case bus access latency making them unsuitable for systems with tight-deadline sporadic messages [4]. The Controller Area Network (CAN) <ref> [5, 6] </ref> is a contention-based multi-master network which uses a wired-OR (or wired-AND) bus and has the potential to efficiently handle both periodic as well as sporadic messages, thus satisfying both R1 and R2. <p> The next section describes the CAN protocol in detail. Section 3 describes the various types of messages in our target application workload. Section 4 gives the MTS algorithm and its schedulability conditions. Section 5 gives simulation results. The paper concludes with Section 6. 2 Controller Area Network (CAN) CAN <ref> [5, 6] </ref> is an advanced serial communication protocol for distributed real-time control systems.
Reference: [7] <author> A. K. Mok, </author> <title> "Fundamental design problems of distributed systems for the hard real-time environment," </title> <type> Ph.D thesis, </type> <institution> MIT, </institution> <year> 1983. </year>
Reference-contexts: Fortunately, in most real-world situations, there is a minimum interval between consecutive aperiodic events. This corresponds to a minimum interarrival time (MIT) for these messages. Such aperiodic messages which have a MIT are called sporadic messages <ref> [7] </ref>. Knowing the MIT of a sporadic message makes it possible to guarantee its delivery even under the worst possible situation. 3.3 Non-real-time messages In a manufacturing environment, an operator must be able to monitor the status of every device in the system.
Reference: [8] <author> K. Jeffay, D. F. Stanat, and C. U. Martel, </author> <title> "On non-preemptive scheduling of periodic and sporadic tasks," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 129-139, </pages> <year> 1991. </year>
Reference-contexts: Moreover, each message must have a unique ID (which is a requirement of CAN). This can be done by dividing the ID into three 2 Non-preemptive scheduling under release time constraints is NP-hard in the strong sense <ref> [8] </ref>, meaning that there is no polynomial time scheduler which will always give the maximum schedulable utilization. However, Zhao and Ramamritham [9] showed that ED performs better than other simple heuristics. fields [12], as shown in Figure 2. The deadline field is derived from the deadline of the message.
Reference: [9] <author> W. Zhao and K. Ramamritham, </author> <title> "Simple and integrated heuristic algorithms for scheduling tasks with time and resource constraints," </title> <journal> Jounal of Systems and Software, </journal> <volume> vol. 7, </volume> <pages> pp. 195-205, </pages> <year> 1987. </year>
Reference-contexts: This can be done by dividing the ID into three 2 Non-preemptive scheduling under release time constraints is NP-hard in the strong sense [8], meaning that there is no polynomial time scheduler which will always give the maximum schedulable utilization. However, Zhao and Ramamritham <ref> [9] </ref> showed that ED performs better than other simple heuristics. fields [12], as shown in Figure 2. The deadline field is derived from the deadline of the message. Actually, it is the logical inverse of the deadline because we want the shortest deadline to have the highest priority.
Reference: [10] <author> C. L. Liu and J. W. Layland, </author> <title> "Scheduling algorithms for multiprogramming in a hard real-time environment," </title> <journal> Journal of the ACM, </journal> <volume> vol. 20, no. 1, </volume> <pages> pp. 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: The most popular form of fixed-priority real-time scheduling is rate monotonic (RM) <ref> [10] </ref>. In this scheme, messages with a shorter period get higher priority than those with longer periods. RM assumes that deadline equals period, which is not always true. So, instead of RM, we can use its close relative, deadline monotonic (DM) scheduling [11].
Reference: [11] <author> J. Y.-T. Leung and J. Whitehead, </author> <title> "On the complexity of fixed-priority scheduling of periodic, real-time tasks," </title> <journal> Performance Evaluation, </journal> <volume> vol. 2, no. 4, </volume> <pages> pp. 237-250, </pages> <month> December </month> <year> 1982. </year>
Reference-contexts: In this scheme, messages with a shorter period get higher priority than those with longer periods. RM assumes that deadline equals period, which is not always true. So, instead of RM, we can use its close relative, deadline monotonic (DM) scheduling <ref> [11] </ref>. With DM, messages with tighter deadlines are assigned higher priorities. Then these priorities will form the ID for each message. Once a message starts transmission, it will run to completion even if higher-priority messages are released during this time; that is, we must use the non-preemptive version of DM.
Reference: [12] <author> K. G. Shin, </author> <title> "Real-time communications in a computer-controlled workcell," </title> <journal> IEEE Trans. Robotics and Automation, </journal> <volume> vol. 7, no. 1, </volume> <pages> pp. 105-113, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: However, Zhao and Ramamritham [9] showed that ED performs better than other simple heuristics. fields <ref> [12] </ref>, as shown in Figure 2. The deadline field is derived from the deadline of the message. Actually, it is the logical inverse of the deadline because we want the shortest deadline to have the highest priority. <p> So, if two messages have the same deadline, the one with the higher uniqueness code will win. This uniqueness code also serves to identify the message for reception purposes. For ED scheduling, messages may be assigned codes arbitrarily as long as they are unique for each message <ref> [12] </ref>. However, as we will see later, the question of assigning uniqueness codes will be critical in MTS. In Figure 2 there is also a 1-bit priority field which is 1 for real-time messages and 0 otherwise. This ensures that real-time messages always have higher priority than non-real-time ones. <p> This ensures that real-time messages always have higher priority than non-real-time ones. As time progresses, deadline values get larger and larger. Eventually, they will require more bits than are available in the CAN ID field. The obvious solution is to use slack time <ref> [12] </ref> (time to deadline) instead of the deadline itself. But this introduces two other problems: P1. Remaining slack time of a message changes with every clock tick. This will require IDs of all messages to be updated continually (at the start of each arbitration round).
Reference: [13] <author> Q. Zheng and K. G. Shin, </author> <title> "On the ability of establishing real-time channels in point-to-point packet-switched networks," </title> <journal> IEEE Trans. Communications, </journal> <pages> pp. 1096-1105, </pages> <month> Febru-ary/March/April </month> <year> 1994. </year>
Reference-contexts: We will first review such conditions for non-preemptive ED and DM, and then develop those for MTS. Earliest-deadline: Schedulability conditions for non-preemptive ED are described by Zheng and Shin <ref> [13] </ref>. For worst-case, sporadic messages are treated as periodic with period equal to their MIT. Then, if all messages are released at the same time t = 0 (creating the worst-possible congestion), they will still be schedulable if the following two conditions hold: 1. j=1 C j =T j 1.
Reference: [14] <author> D. D. Kandlur, K. G. Shin, and D. Fer-rari, </author> <title> "Real-time communication in multihop networks," </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <volume> vol. 5, no. 10, </volume> <pages> pp. 1044-1056, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: If the bus ever becomes idle during [0; d i C i ], then i is schedulable. If messages are num bered according to their priority with j = 0 being the highest-priority message, then i is schedulable if <ref> [14] </ref>: 9t 2 S; j=1 d (t j )=T j eC j + C p t; where S =fset of all release times of messages 0; 1; ; i1 through time d i C i g [fd i C i g, and j are the relative phase offsets.
Reference: [15] <author> M. Ehsani, I. Hussain, and K. R. Ramani, </author> <title> "An analysis of the error in indirect rotor position sensing of switched reluctance motors," </title> <booktitle> in International Conference on Industrial Electronics, Control and Instrumentation, </booktitle> <pages> pp. 295-300, </pages> <month> Octo-ber </month> <year> 1991. </year>
Reference-contexts: Currently-available drives can operate at speeds of up to 1200 rpm or higher. Frequency of updates needed to control such drives is a function of how much error (e.g., in position and velocity) is tolerable for the application at hand <ref> [15] </ref>, but these frequencies can be as high as 10 kHz. As already mentioned, a pair of messages are involved in controlling each drive. First, the drive will send feedback to the controller. The controller will require some time to compute the new command, then send this to the drive.
Reference: [16] <author> S. Soloman, </author> <title> Sensors and Control Systems in Manufacturing, </title> <publisher> McGraw-Hill, Inc., </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: When the fingers touch the object, the controller must switch to force control to avoid both slippage at one hand and damage to the object (from excessive force) at the other. To detect first-contact, each finger is equipped with a sensor which will send a message on contact <ref> [16] </ref>. Since the controller must immediately switch control strategies, this message will not only have a hard deadline, but also a very tight one.
Reference: [17] <institution> Electrical Equipment of Industrial Machines | Serial Data Link for Real-Time Communication between Controls and Drives, </institution> <note> International Elec-trotechnical Commission, Rev. 8, </note> <year> 1994. </year>
Reference-contexts: Now, we must consider the length of each message. The standard CAN message format requires 47 framing bits per message for ID, CRC, etc. For position or velocity control of a drive, 32-bit command and 32-bit feedback variables are required <ref> [17] </ref>, making each message 79 bits long. We use this length for each periodic message in the workload as well as for the longest possible message (C p ). Aperiodic messages are used to notify a controller of some event.
References-found: 17

