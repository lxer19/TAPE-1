URL: http://theory.lcs.mit.edu/~luca/pubs/parapx.ps.Z
Refering-URL: http://theory.lcs.mit.edu/~luca/papers.html
Root-URL: 
Email: Email: trevisan@dsi.uniroma1.it.  
Title: Positive Linear Programming, Parallel Approximation and PCP's  
Author: Luca Trevisan 
Address: Via Salaria 113, I-00198 Roma, Italy.  
Affiliation: Universita di Roma La Sapienza, Dipartimento di Scienze dell'Informazione,  
Abstract: Several sequential approximation algorithms are based on the following paradigm: solve a linear or semidefinite programming relaxation, then use randomized rounding to convert fractional solutions of the relaxation into integer solutions for the original combinatorial problem. We demonstrate that such a paradigm can also yield parallel approximation algorithms by showing how to convert certain linear programming relaxations into essentially equivalent positive linear programming [18] relaxations that can be near-optimally solved in NC. Building on this technique, and finding some new linear programming relaxations, we develop improved parallel approximation algorithms for Max Sat, Max DiCut, and Max k-CSP. We also show a connection between probabilistic proof checking and a restricted version of Max k-CSP. This implies that our approximation algorithm for Max k-CSP can be used to prove inclusion in P for certain PCP classes.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> N. Alon and J. Spencer. </author> <title> The Probabilistic Method. </title> <publisher> Wiley Interscience, </publisher> <year> 1992. </year>
Reference-contexts: Proof. Regarding the first claim, in order to compute a 2 1k -approximate solution it is sufficient to optimally solve (CSP), then use the random rounding scheme described in Theorem 11 and finally use conditional expectation (see <ref> [1] </ref>) to obtain an assigment whose measure is no smaller than the average measure of such random assigment. The approximation guarantee follows from Theorem 11. <p> proof , V tosses at most r (jxj) random coins; - V has query complexity q (where q is an integer) if for any input x, any random string R, and any proof , V reads at most q bits from ; - V has soundness s (where s 2 <ref> [0; 1] </ref> is a real) if, for any x 62 L, ACC [V (x)] s; - V has completeness c (where c 2 [0; 1] is a real) if, for any x 2 L, ACC [V (x)] c. Remark. <p> any input x, any random string R, and any proof , V reads at most q bits from ; - V has soundness s (where s 2 <ref> [0; 1] </ref> is a real) if, for any x 62 L, ACC [V (x)] s; - V has completeness c (where c 2 [0; 1] is a real) if, for any x 2 L, ACC [V (x)] c. Remark. Note that a verifier that has query complexity q can read its q bits adaptively, that is, the i-th access to the proof may depend on the outcomes of the previous i 1 accesses.
Reference: 2. <author> S. Arora, D. Karger, and M. Karpinski. </author> <title> Polynomial time approximation schemes for dense instances of graph problems. </title> <booktitle> In Proc. of the 27th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 284-293, </pages> <year> 1995. </year>
Reference-contexts: This problem is somehow implicit in [20] and has been defined in [15] (it has also been called "Max k Function Sat" in <ref> [2] </ref> and "Max k-GSAT" in [21]). The interest in this problem has been mainly related to the fact that it can express any Max SNP problem. Variations of this problem have also been studied due to their application to the field of Artificial Intelligence (see [16] and the references therein).
Reference: 3. <author> M. Bellare. </author> <title> Proof checking and approximation: Towards tight results. </title> <journal> Sigact News, </journal> <volume> 27(1), </volume> <year> 1996. </year>
Reference-contexts: Such results strengthen previous ones appeared in [4]. Related and independent results After completing this research, we learnt that Cristina Bazgan independentely used linear programming and random rounding to approximate Max kConjSAT within a factor e=(e 1=k + 1) k <ref> [3] </ref>. Such approximation is better than 2 k , but is worse than 2 1k . Motivated by the results of the present paper, a :3674-approximate algorithm for Max 3 Conj Sat has been recently developed in [26].
Reference: 4. <author> M. Bellare, O. Goldreich, and M. Sudan. </author> <title> Free bits, PCP's and non-approximability towards tight results (3rd version). </title> <note> Technical Report ECCC TR95-24, 1995. Preliminary version in Proc. of FOCS'95. </note>
Reference-contexts: Such results strengthen previous ones appeared in <ref> [4] </ref>. Related and independent results After completing this research, we learnt that Cristina Bazgan independentely used linear programming and random rounding to approximate Max kConjSAT within a factor e=(e 1=k + 1) k [3]. Such approximation is better than 2 k , but is worse than 2 1k . <p> For any k &gt; 1, the weighted Max k-CSP problem is 2 1k -approximable in polynomial time, and (2 1k o (1))-approximable in NC. 5 Relations with Proof Checking We start giving some definitions about probabilistically checkable proofs (we follow the notation used in <ref> [4] </ref>). A verifier is an oracle probabilistic polynomial-time Turing machine V . During its computation, V tosses random coins, reads its input and has oracle access to a string called proof. Let x be an input and be a proof. <p> Several recent results about the hardness of approximation of combinatorial problems (including Max Sat <ref> [4] </ref> and Max DiCut [4, 26]) have been proved using the fact, proved in [4], that NP = PCP1; slog; 3 for any s &gt; 0:85. The verifier developed to prove such result is adaptive. <p> Several recent results about the hardness of approximation of combinatorial problems (including Max Sat [4] and Max DiCut <ref> [4, 26] </ref>) have been proved using the fact, proved in [4], that NP = PCP1; slog; 3 for any s &gt; 0:85. The verifier developed to prove such result is adaptive. Using less than 3 queries or having a soundness smaller than 0.85 would immediately imply improved non-approximability results. <p> Several recent results about the hardness of approximation of combinatorial problems (including Max Sat <ref> [4] </ref> and Max DiCut [4, 26]) have been proved using the fact, proved in [4], that NP = PCP1; slog; 3 for any s &gt; 0:85. The verifier developed to prove such result is adaptive. Using less than 3 queries or having a soundness smaller than 0.85 would immediately imply improved non-approximability results. <p> Theorem 15 (Max kConjSAT vs PCP). If Max kConjSAT is r-approximable for some r 1, then PCPc; slog; k P for any c=s &gt; 1=r. Proof. (Rough Sketch) We assume familiarity with the terminology of <ref> [4] </ref>. For any of the 2 O (log n) = poly (n) possible random strings we consider the behaviour of the verifier and we encode it using a (1; 0)-gadget. Such gadget contains a conjunctive clause for each accepting configuration of the verifier. <p> Theorem 16 (Hardness of Max kConjSAT). For any k 11, if Max kConjSAT is 2 bk=11c -approximable, then P = NP. Proof. Bellare Goldreich and Sudan <ref> [4] </ref> prove that NP = PCP1; 0:5log; 11. Then, bk=11c independent repetitions of their protocol yield NP = PCP1; 2 bk=11c log; k: applying Theorem 15, the claim follows. ut The following result can be obtained combining Theorems 12 and 15 Theorem 17 (Weak PCP classes). <p> PCPc; slog; q P for any c=s &gt; 2 q1 . In particular, PCP1; 0:249log; 3 P. The above theorem improves over previous results by Bellare, Goldreich and Sudan <ref> [4] </ref>, stating that PCPc; slog; q P for any c=s &gt; 2 q and PCP1; 0:18log; 3 P, respectively. Acknowledgments I wish to thank Pierluigi Crescenzi for suggesting the problem, encouraging this research, and giving several useful suggestions.
Reference: 5. <author> G. Bongiovanni, P. Crescenzi, and S. De Agostino. </author> <title> Descriptive complexity and parallel approximation of optimization problems. </title> <type> Manuscript, </type> <year> 1991. </year>
Reference-contexts: Our algorithm achieves similar approximation with a remarkably faster running time. The best previous NC approximation for this problem was 1/2, due to Bongio-vanni et al. <ref> [5] </ref> and, independentely, to Hunt et al. [13] using techniques of Luby [17]. More generally, [5, 13] developed NC approximation algorithms for all the problems in the Max SNP [20] class. In particular, their algorithm for Max Sat requires a quadratic number of processors. <p> Our algorithm achieves similar approximation with a remarkably faster running time. The best previous NC approximation for this problem was 1/2, due to Bongio-vanni et al. [5] and, independentely, to Hunt et al. [13] using techniques of Luby [17]. More generally, <ref> [5, 13] </ref> developed NC approximation algorithms for all the problems in the Max SNP [20] class. In particular, their algorithm for Max Sat requires a quadratic number of processors. <p> The linear programming relaxation is then converted into a PLP relaxation. Since the random rounding analysis only required pair-wise independence, we have an NC (1=2 o (1))-approximate algorithm for Max DiCut. Previous results <ref> [17, 5, 13] </ref> implied that this problem was 1=4-approximable in NC. Sequential approximation algorithms for this problem are, however, far better: Feige and Goemans [8] (improving a previous :796-approximate algorithm by Goemans and Williamson [10]) recently gave a :855-approximate algorithm using semidefinite programming. The Max k-CSP problem.
Reference: 6. <author> D.P. Bovet and P. Crescenzi. </author> <title> Introduction to the Theory of Complexity. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: See e.g. <ref> [6] </ref> for formal definitions. programming and random rounding to give a 3/4-approximation for the Max Sat problem, matching a previous result by Yannakakis [27] with a simpler algorithm. Outstanding approximation results have been obtained in the last two years by randomly rounding semidefinite relaxations of combinatorial problems. <p> that the best approximation that is currently achievable for Max Sat using sequential algorithms [9, 10, 8] is roughly :76, and to obtain 2 Recall that, informally, an NC algorithm is an algorithm that runs on a parallel computer in poly-logarithmic time using a polynomial number of processors (see e.g. <ref> [6] </ref> for formal definitions). such approximation it is necessary to solve semidefinite programs; Yannakakis' 3=4-approximate algorithm [27] requires to solve max flow problems. Our algorithm achieves similar approximation with a remarkably faster running time.
Reference: 7. <author> B. Chor and M. Sudan. </author> <title> A geometric approach to betweennes. </title> <booktitle> In Proc. of the 3rd European Symposium on Algorithms, </booktitle> <year> 1995. </year>
Reference-contexts: Starting with the celebrated results by Goemans and Williamson [10], who showed that Max Cut and Max 2Sat are :878-approximable with this technique, an increasing number of results have been obtained using semidefinite programming, including better results for Max 2Sat and new results for graph coloring, and the "betweeness" problem <ref> [8, 14, 7] </ref>. Shmoys' recent survey on approximation algorithms [25] contains other applications of linear and semidefinite programming.
Reference: 8. <author> U. Feige and M. Goemans. </author> <title> Approximating the value of two provers proof systems, with applications to MAX 2SAT and MAX DICUT. </title> <booktitle> In Proc. of the 3rd IEEE Israel Symposium on Theory of Computing and Systems, </booktitle> <pages> pages 182-189, </pages> <year> 1995. </year>
Reference-contexts: Starting with the celebrated results by Goemans and Williamson [10], who showed that Max Cut and Max 2Sat are :878-approximable with this technique, an increasing number of results have been obtained using semidefinite programming, including better results for Max 2Sat and new results for graph coloring, and the "betweeness" problem <ref> [8, 14, 7] </ref>. Shmoys' recent survey on approximation algorithms [25] contains other applications of linear and semidefinite programming. <p> Since PLP can be solved sequentially in quasi-linear time, our translation also implies a (3=4 o (1))- approximate sequential algorithm that runs in ~ O (m), where m is the number of clauses. Recall that the best approximation that is currently achievable for Max Sat using sequential algorithms <ref> [9, 10, 8] </ref> is roughly :76, and to obtain 2 Recall that, informally, an NC algorithm is an algorithm that runs on a parallel computer in poly-logarithmic time using a polynomial number of processors (see e.g. [6] for formal definitions). such approximation it is necessary to solve semidefinite programs; Yannakakis' 3=4-approximate <p> Since the random rounding analysis only required pair-wise independence, we have an NC (1=2 o (1))-approximate algorithm for Max DiCut. Previous results [17, 5, 13] implied that this problem was 1=4-approximable in NC. Sequential approximation algorithms for this problem are, however, far better: Feige and Goemans <ref> [8] </ref> (improving a previous :796-approximate algorithm by Goemans and Williamson [10]) recently gave a :855-approximate algorithm using semidefinite programming. The Max k-CSP problem.
Reference: 9. <author> M. Goemans and D. Williamson. </author> <title> New 3/4-approximation algorithms for the maximum satisfiability problem. </title> <journal> SIAM J. on Discrete Mathematics, </journal> <volume> 7(4) </volume> <pages> 656-666, </pages> <year> 1994. </year> <note> Preliminary version in Proc. of IPCO'93. </note>
Reference-contexts: However, randomized rounding schemes (first introduced by Raghavan and Thompson [22]) are in general more efficient and are usually derandomizable. For example, Goemans and Williamson <ref> [9] </ref> use linear ? Research partially supported by the HCM SCOOP project of the European Union. <p> Contrary to this intuition, we show that some good linear programming relaxations can be "translated" in a PLP form, thus yielding NC approximation algorithms. The Max Sat problem. We first consider the Max Sat problem, and its linear programming relaxation due to Goemans and Williamson <ref> [9] </ref>. <p> We seek for an assigment of truth value to the variables fx 1 ; : : : ; x n g that maximizes the sum of the weights of the satisfied clauses. We show how to convert the linear programming relaxation of Max Sat of <ref> [9] </ref> into an "essentially" equivalent PLP relaxation. We also show how to introduce a minor change in Goemans and Williamson's arguments and thus prove the 3/4-approximation guarantee assuming only 5-wise independence. As a consequence, we have that the Max Sat problem is (3=4 o (1))-approximable in NC. <p> Since PLP can be solved sequentially in quasi-linear time, our translation also implies a (3=4 o (1))- approximate sequential algorithm that runs in ~ O (m), where m is the number of clauses. Recall that the best approximation that is currently achievable for Max Sat using sequential algorithms <ref> [9, 10, 8] </ref> is roughly :76, and to obtain 2 Recall that, informally, an NC algorithm is an algorithm that runs on a parallel computer in poly-logarithmic time using a polynomial number of processors (see e.g. [6] for formal definitions). such approximation it is necessary to solve semidefinite programs; Yannakakis' 3=4-approximate <p> Let also w tot def = j=1 w j . Goemans and Williamson <ref> [9] </ref> consider the following linear programming relaxation of the Max Sat problem. max j=1 w j z j z j i2C + t i + i2C (1 t i ) for all j 2 [m] 0 t i 1 for all i 2 [n] In [9] it is shown that (SAT1) <p> Goemans and Williamson <ref> [9] </ref> consider the following linear programming relaxation of the Max Sat problem. max j=1 w j z j z j i2C + t i + i2C (1 t i ) for all j 2 [m] 0 t i 1 for all i 2 [n] In [9] it is shown that (SAT1) is indeed a relaxation of Max Sat. Theorem 4 ([9], Theorem 5.3). Let (t; z) be a feasible solution for (SAT1).
Reference: 10. <author> M.X. Goemans and D.P. Williamson. </author> <title> Improved approximation algorithms for maximum cut and satisfiability problems using semidefinite programming. </title> <journal> J. of the ACM, </journal> <volume> 42(6) </volume> <pages> 1115-1145, </pages> <year> 1995. </year> <note> Preliminary version in Proc. of STOC'94. </note>
Reference-contexts: Outstanding approximation results have been obtained in the last two years by randomly rounding semidefinite relaxations of combinatorial problems. Starting with the celebrated results by Goemans and Williamson <ref> [10] </ref>, who showed that Max Cut and Max 2Sat are :878-approximable with this technique, an increasing number of results have been obtained using semidefinite programming, including better results for Max 2Sat and new results for graph coloring, and the "betweeness" problem [8, 14, 7]. <p> Since PLP can be solved sequentially in quasi-linear time, our translation also implies a (3=4 o (1))- approximate sequential algorithm that runs in ~ O (m), where m is the number of clauses. Recall that the best approximation that is currently achievable for Max Sat using sequential algorithms <ref> [9, 10, 8] </ref> is roughly :76, and to obtain 2 Recall that, informally, an NC algorithm is an algorithm that runs on a parallel computer in poly-logarithmic time using a polynomial number of processors (see e.g. [6] for formal definitions). such approximation it is necessary to solve semidefinite programs; Yannakakis' 3=4-approximate <p> Previous results [17, 5, 13] implied that this problem was 1=4-approximable in NC. Sequential approximation algorithms for this problem are, however, far better: Feige and Goemans [8] (improving a previous :796-approximate algorithm by Goemans and Williamson <ref> [10] </ref>) recently gave a :855-approximate algorithm using semidefinite programming. The Max k-CSP problem. In both the above cases, we use PLP relaxations and random rounding to remarkably improve over previous parallel algorithms, but we do not entirely match (or we even fall far below) the performances of known sequential algorithms.
Reference: 11. <author> D.J. Haglin. </author> <title> Approximating maximum 2-CNF satisfiability. </title> <journal> Parallel Processing Letters, </journal> <volume> 2 </volume> <pages> 181-187, </pages> <year> 1992. </year>
Reference-contexts: More generally, [5, 13] developed NC approximation algorithms for all the problems in the Max SNP [20] class. In particular, their algorithm for Max Sat requires a quadratic number of processors. More recently, Haglin <ref> [11] </ref> presented an NC 1/2-approximate algorithm for Max 2Sat that uses a linear number of processors, and Serna and Xhafa [24] showed that a linear number of processors is sufficient to 1/2-approximate the general Max Sat problem. The Max DiCut problem. We then turn to the Max DiCut problem.
Reference: 12. <author> D. Hochbaum. </author> <title> Approximation algorithms for set covering and vertex cover problems. </title> <journal> SIAM J. on Computing, </journal> <volume> 11 </volume> <pages> 555-556, </pages> <year> 1982. </year>
Reference-contexts: Thus, if we round an optimum solution for the relaxation we will get an r-approximate 1 solution for the combinatorial problem. A well known early example of this technique is Hochbaum's approximation algorithm for Min Weight Vertex Cover <ref> [12] </ref>, where a simple deterministic rounding scheme is used. However, randomized rounding schemes (first introduced by Raghavan and Thompson [22]) are in general more efficient and are usually derandomizable. For example, Goemans and Williamson [9] use linear ? Research partially supported by the HCM SCOOP project of the European Union.
Reference: 13. <author> H. B. Hunt III, M.V. Marathe, V. Radhakrishnan, S.S. Ravi, D.J. Rosenkrantz, and R.E. Stearns. </author> <title> Every problem in MAX SNP has a parallel approximation algorithm. </title> <type> Manuscript, </type> <year> 1993. </year>
Reference-contexts: Our algorithm achieves similar approximation with a remarkably faster running time. The best previous NC approximation for this problem was 1/2, due to Bongio-vanni et al. [5] and, independentely, to Hunt et al. <ref> [13] </ref> using techniques of Luby [17]. More generally, [5, 13] developed NC approximation algorithms for all the problems in the Max SNP [20] class. In particular, their algorithm for Max Sat requires a quadratic number of processors. <p> Our algorithm achieves similar approximation with a remarkably faster running time. The best previous NC approximation for this problem was 1/2, due to Bongio-vanni et al. [5] and, independentely, to Hunt et al. [13] using techniques of Luby [17]. More generally, <ref> [5, 13] </ref> developed NC approximation algorithms for all the problems in the Max SNP [20] class. In particular, their algorithm for Max Sat requires a quadratic number of processors. <p> The linear programming relaxation is then converted into a PLP relaxation. Since the random rounding analysis only required pair-wise independence, we have an NC (1=2 o (1))-approximate algorithm for Max DiCut. Previous results <ref> [17, 5, 13] </ref> implied that this problem was 1=4-approximable in NC. Sequential approximation algorithms for this problem are, however, far better: Feige and Goemans [8] (improving a previous :796-approximate algorithm by Goemans and Williamson [10]) recently gave a :855-approximate algorithm using semidefinite programming. The Max k-CSP problem.
Reference: 14. <author> D. Karger, R. Motwani, and M. Sudan. </author> <title> Approximate graph coloring by semidef-inite programming. </title> <booktitle> In Proc. of the 35th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 2-13, </pages> <year> 1994. </year>
Reference-contexts: Starting with the celebrated results by Goemans and Williamson [10], who showed that Max Cut and Max 2Sat are :878-approximable with this technique, an increasing number of results have been obtained using semidefinite programming, including better results for Max 2Sat and new results for graph coloring, and the "betweeness" problem <ref> [8, 14, 7] </ref>. Shmoys' recent survey on approximation algorithms [25] contains other applications of linear and semidefinite programming.
Reference: 15. <author> S. Khanna, R. Motwani, M. Sudan, and U. Vazirani. </author> <title> On syntactic versus computational views of approximability. </title> <booktitle> In Proc. of the 35th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 819-830, </pages> <year> 1994. </year>
Reference-contexts: For any k 1, the Max k-CSP problem is the variation of the Max Sat problem where any clause (also called constraint) is allowed to be an arbitrary boolean function over k variables. This problem is somehow implicit in [20] and has been defined in <ref> [15] </ref> (it has also been called "Max k Function Sat" in [2] and "Max k-GSAT" in [21]). The interest in this problem has been mainly related to the fact that it can express any Max SNP problem. <p> We show that in order to r-approximate this problem it is sufficient to r-approximate its restricted version Max kConjSAT, where each clause is a conjunction of literals. For both problems, only 2 k -approximate (see e.g. <ref> [15] </ref>) algorithms are known. We define a linear programming relaxation of the Max kConjSAT problem and we show that a proper random rounding scheme can be used to yield a 2 1k approximation.
Reference: 16. <author> H.C. Lau and O. Watanabe. </author> <title> Randomized approximation of the constraint satisfaction problem. </title> <booktitle> In Proc. of the 5th Scandinavian Workshop on Algorithm Theory, </booktitle> <year> 1996. </year>
Reference-contexts: The interest in this problem has been mainly related to the fact that it can express any Max SNP problem. Variations of this problem have also been studied due to their application to the field of Artificial Intelligence (see <ref> [16] </ref> and the references therein). We show that in order to r-approximate this problem it is sufficient to r-approximate its restricted version Max kConjSAT, where each clause is a conjunction of literals. For both problems, only 2 k -approximate (see e.g. [15]) algorithms are known.
Reference: 17. <author> M. Luby. </author> <title> A simple parallel algorithm for the maximal independent set problem. </title> <journal> SIAM J. on Computing, </journal> <volume> 15 </volume> <pages> 1036-1053, </pages> <year> 1986. </year>
Reference-contexts: Our algorithm achieves similar approximation with a remarkably faster running time. The best previous NC approximation for this problem was 1/2, due to Bongio-vanni et al. [5] and, independentely, to Hunt et al. [13] using techniques of Luby <ref> [17] </ref>. More generally, [5, 13] developed NC approximation algorithms for all the problems in the Max SNP [20] class. In particular, their algorithm for Max Sat requires a quadratic number of processors. <p> The linear programming relaxation is then converted into a PLP relaxation. Since the random rounding analysis only required pair-wise independence, we have an NC (1=2 o (1))-approximate algorithm for Max DiCut. Previous results <ref> [17, 5, 13] </ref> implied that this problem was 1=4-approximable in NC. Sequential approximation algorithms for this problem are, however, far better: Feige and Goemans [8] (improving a previous :796-approximate algorithm by Goemans and Williamson [10]) recently gave a :855-approximate algorithm using semidefinite programming. The Max k-CSP problem.
Reference: 18. <author> M. Luby and N. Nisan. </author> <title> A parallel approximation algorithm for positive linear programming. </title> <booktitle> In Proc. of the 25th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 448-457, </pages> <year> 1993. </year>
Reference-contexts: However, there exists a restricted version of linear programming (called Positive Linear Programming, PLP for short) that can be near-optimally solved using an NC algorithm 2 by Luby and Nisan <ref> [18] </ref>. <p> Given an instance I of Max Sat we let opt MS (I) be the measure of an optimum solution for I. Definition 1 <ref> [18] </ref>. A minimization linear program is said to be an instance of positive linear programming (PLP for short) if it is written as min c T x Ax b where all the entries of A, b and c are non-negative. Minimization positive linear programs are also called covering problems. <p> Minimization positive linear programs are also called covering problems. Luby and Nisan developed a very efficient algorithm for approximating posi tive linear programming problems. Theorem 2 <ref> [18] </ref>. There exists a parallel algorithm that given in input a minimization instance P of PLP of size N and a rational * &gt; 0 returns a feasible solution for P whose cost is at most (1 + *) times the optimum.
Reference: 19. <author> M. Luby and A. Wigderson. </author> <title> Pairwise independence and derandomization. </title> <type> Technical Report ICSI TR-95-035, </type> <year> 1995. </year>
Reference-contexts: Furthermore, the algorithm runs in time polynomial in 1=* and log N using O (N ) processors. The following result is useful to derandomize parallel algorithms where ran-domization is only needed to generate random variables with limited independence. Theorem 3 (see e.g. <ref> [19] </ref>, Section 16). A pairwise independent distribution of n random variables of size O (n) is explicitely constructable in NC. For any k &gt; 2, a k-wise independent distribution of n random variables of size O (n k ) is explicitely constructable in NC.
Reference: 20. <author> C. H. Papadimitriou and M. Yannakakis. </author> <title> Optimization, approximation, and complexity classes. </title> <journal> J. of Computer and System Sciences, </journal> <volume> 43 </volume> <pages> 425-440, </pages> <year> 1991. </year> <note> Preliminary version in Proc. of STOC'88. </note>
Reference-contexts: The best previous NC approximation for this problem was 1/2, due to Bongio-vanni et al. [5] and, independentely, to Hunt et al. [13] using techniques of Luby [17]. More generally, [5, 13] developed NC approximation algorithms for all the problems in the Max SNP <ref> [20] </ref> class. In particular, their algorithm for Max Sat requires a quadratic number of processors. <p> For any k 1, the Max k-CSP problem is the variation of the Max Sat problem where any clause (also called constraint) is allowed to be an arbitrary boolean function over k variables. This problem is somehow implicit in <ref> [20] </ref> and has been defined in [15] (it has also been called "Max k Function Sat" in [2] and "Max k-GSAT" in [21]). The interest in this problem has been mainly related to the fact that it can express any Max SNP problem.
Reference: 21. <author> C.H. Papadimitriou. </author> <title> Computational Complexity. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: This problem is somehow implicit in [20] and has been defined in [15] (it has also been called "Max k Function Sat" in [2] and "Max k-GSAT" in <ref> [21] </ref>). The interest in this problem has been mainly related to the fact that it can express any Max SNP problem. Variations of this problem have also been studied due to their application to the field of Artificial Intelligence (see [16] and the references therein).
Reference: 22. <author> P. Raghavan and C.D. Thompson. </author> <title> Randomized rounding: a technique for provably good algorithms and algorithmic proofs. </title> <journal> Combinatorica, </journal> <volume> 7 </volume> <pages> 365-374, </pages> <year> 1987. </year>
Reference-contexts: A well known early example of this technique is Hochbaum's approximation algorithm for Min Weight Vertex Cover [12], where a simple deterministic rounding scheme is used. However, randomized rounding schemes (first introduced by Raghavan and Thompson <ref> [22] </ref>) are in general more efficient and are usually derandomizable. For example, Goemans and Williamson [9] use linear ? Research partially supported by the HCM SCOOP project of the European Union.
Reference: 23. <author> M. Serna. </author> <title> Approximating linear programming is log-space complete for P. </title> <journal> Information Processing Letters, </journal> <volume> 37, </volume> <year> 1991. </year>
Reference-contexts: Unfortunately, such powerful techniques do not seem to be useful to develop efficient parallel approximation algorithms, the main reason being that both linear and semidefinite programming not only are P-hard problems, but it is even P-hard to approximate them <ref> [23] </ref>. However, there exists a restricted version of linear programming (called Positive Linear Programming, PLP for short) that can be near-optimally solved using an NC algorithm 2 by Luby and Nisan [18].
Reference: 24. <author> M. Serna and F. Xhafa. </author> <title> On parallel versus sequential approximation. </title> <booktitle> In Proc. of the 3rd European Symposium on Algorithms, </booktitle> <pages> pages 409-419, </pages> <year> 1995. </year>
Reference-contexts: In particular, their algorithm for Max Sat requires a quadratic number of processors. More recently, Haglin [11] presented an NC 1/2-approximate algorithm for Max 2Sat that uses a linear number of processors, and Serna and Xhafa <ref> [24] </ref> showed that a linear number of processors is sufficient to 1/2-approximate the general Max Sat problem. The Max DiCut problem. We then turn to the Max DiCut problem.
Reference: 25. <author> D. Shmoys. </author> <title> Computing near-optimal solutions to combinatorial optimization problems. In Combinatorial Optimization. </title> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <volume> Vol. 20, </volume> <year> 1995. </year>
Reference-contexts: Shmoys' recent survey on approximation algorithms <ref> [25] </ref> contains other applications of linear and semidefinite programming. Unfortunately, such powerful techniques do not seem to be useful to develop efficient parallel approximation algorithms, the main reason being that both linear and semidefinite programming not only are P-hard problems, but it is even P-hard to approximate them [23].
Reference: 26. <author> L. Trevisan, G.B. Sorkin, M. Sudan, and D.P. Williamson. Gadgets, approxima-tion, </author> <title> and linear programming. </title> <booktitle> In Proc. of the 37th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1996. </year>
Reference-contexts: Such approximation is better than 2 k , but is worse than 2 1k . Motivated by the results of the present paper, a :3674-approximate algorithm for Max 3 Conj Sat has been recently developed in <ref> [26] </ref>. Seemingly, this algorithm does not extend to the general Max k Conj Sat problem, and, since it involves semidefinite programming, it cannot be easily parallelized. Preliminaries In what follows we will denote by [n] the set f1; : : : ; ng. <p> Several recent results about the hardness of approximation of combinatorial problems (including Max Sat [4] and Max DiCut <ref> [4, 26] </ref>) have been proved using the fact, proved in [4], that NP = PCP1; slog; 3 for any s &gt; 0:85. The verifier developed to prove such result is adaptive. Using less than 3 queries or having a soundness smaller than 0.85 would immediately imply improved non-approximability results.
Reference: 27. <author> M. Yannakakis. </author> <title> On the approximation of maximum satisfiability. </title> <journal> J. of Algorithms, </journal> <volume> 17 </volume> <pages> 475-502, </pages> <year> 1994. </year> <title> Preliminary version in Proc. of SODA'92. This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: See e.g. [6] for formal definitions. programming and random rounding to give a 3/4-approximation for the Max Sat problem, matching a previous result by Yannakakis <ref> [27] </ref> with a simpler algorithm. Outstanding approximation results have been obtained in the last two years by randomly rounding semidefinite relaxations of combinatorial problems. <p> 8] is roughly :76, and to obtain 2 Recall that, informally, an NC algorithm is an algorithm that runs on a parallel computer in poly-logarithmic time using a polynomial number of processors (see e.g. [6] for formal definitions). such approximation it is necessary to solve semidefinite programs; Yannakakis' 3=4-approximate algorithm <ref> [27] </ref> requires to solve max flow problems. Our algorithm achieves similar approximation with a remarkably faster running time. The best previous NC approximation for this problem was 1/2, due to Bongio-vanni et al. [5] and, independentely, to Hunt et al. [13] using techniques of Luby [17]. <p> Starting with an optimum solution for (SAT1), one gets a random assigment that, on the average, has a cost that is at least 3/4 of the optimum. An explicit 3/4-approximate assignment can be found deterministically using the method of conditional expectation ([1], see also <ref> [27] </ref>). We shall now show how to convert (SAT1) into an equivalent instance of PLP. <p> After applying random rounding, de-randomization can be done in linear time using conditional expectation (see e.g. <ref> [27] </ref>). Observe that, while doing the derandomization, we can ignore all literals occuring in a clause but the first five (this is compatible with our approximation analysis).
References-found: 27

