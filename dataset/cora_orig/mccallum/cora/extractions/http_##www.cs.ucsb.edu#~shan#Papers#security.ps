URL: http://www.cs.ucsb.edu/~shan/Papers/security.ps
Refering-URL: http://www.cs.ucsb.edu/~shan/
Root-URL: http://www.cs.ucsb.edu
Email: gray@cs.ust.hk  fai@cs.ust.hk  shan@cs.ucsb.edu  
Title: Provable Security for Cryptographic ProtocolsExact Analysis and Engineering Applications  
Author: James W. Gray, III Kin Fai Epsilon Ip King-Shan Lui 
Address: HONG KONG  HONG KONG  Santa Barbara, California USA  
Affiliation: Department of Computer Science Hong Kong University of Science and Techology Clear Water Bay  Department of Computer Science Hong Kong University of Science and Techology Clear Water Bay  Department of Computer Science University of California  
Abstract: We develop an approach to deriving concrete engineering advice for cryptographic protocols from provable-security-style proofs of security. The approach is illustrated with a simple, yet useful protocol. The proof is novel and is the first published proof that provides an exact relationship between a high-level protocol and multiple cryptographic primitives. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Bellare, R. Guerin, and P. Rogaway. </author> <title> XOR MACs: New methods for message authentication using finite pseudorandom functions. </title> <booktitle> In Advances in CryptologyProc. CRYPTO '95, (LNCS 963), </booktitle> <year> 1995. </year>
Reference-contexts: More recently, cryptographers attempting to make their results more practical have measured time less coarsely. Stillin order to maintain formalitythey have measured time in terms of abstract execution steps <ref> [1] </ref> or used big-oh notation [4]. In either case, execution time is measured only up to some unspecified (albeit constant) factor.
Reference: [2] <author> M. Bellare and P. Rogaway. </author> <title> Entity authentication and key distribution. </title> <booktitle> In Advances in CryptologyProc. CRYPTO '93, </booktitle> <volume> (LNCS 773), </volume> <pages> pages 232249. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Modeling an RRP Our model has its roots in the work of Dolev and Yao [8] and is closely related to state-based and algebraic approaches to cryptographic protocol analysis [13] as well as other provable-security approaches to cryptographic protocols <ref> [2] </ref> [3]. The model assumes the protocol is being used in an environment where the adversary is in control of all communication between clients and server. That is, the adversary can read, block, and/or modify any message sent over the communication medium.
Reference: [3] <author> M. Bellare and P. Rogaway. </author> <title> Provably secure session key distributionthe three party case. </title> <booktitle> In Proc. 1995 ACM Symposium on Theory of Computing, </booktitle> <year> 1995. </year>
Reference-contexts: Modeling an RRP Our model has its roots in the work of Dolev and Yao [8] and is closely related to state-based and algebraic approaches to cryptographic protocol analysis [13] as well as other provable-security approaches to cryptographic protocols [2] <ref> [3] </ref>. The model assumes the protocol is being used in an environment where the adversary is in control of all communication between clients and server. That is, the adversary can read, block, and/or modify any message sent over the communication medium.
Reference: [4] <author> M. Bellare and P. Rogaway. </author> <title> The Exact security of digital signatureshow to sign with RSA and Rabin. </title> <booktitle> In Advances in CryptologyProc. Eurocrypt '96, (LNCS 1070), </booktitle> <year> 1996. </year>
Reference-contexts: More recently, cryptographers attempting to make their results more practical have measured time less coarsely. Stillin order to maintain formalitythey have measured time in terms of abstract execution steps [1] or used big-oh notation <ref> [4] </ref>. In either case, execution time is measured only up to some unspecified (albeit constant) factor. Although this is an improvement in terms of the practicality of their results, the remaining unspecified factor may be important in engineering practice, so we prefer not to abstract it away. <p> For all these reasons, it is clearly prudent to factor a margin of safety into system designs. We do this below. Security Assumptions for a Practical PKSS In <ref> [4] </ref>, Bel-lare and Rogaway define and analyze a PKSS called the Probabilistic Signature Scheme (PSS), which is built on top of RSA [18] and a cryptographic hash function, such as MD5 or SHA-1 (see [12] or [19] for descriptions of these functions). <p> Bellare and Rogaway's analysis shows the security of PSS can be precisely related to the difficulty of inverting RSA. In particular, we can cast Theorem 4.1 from <ref> [4] </ref> into the framework of the present paper as follows. 11 There are 31,536,000 seconds in a year. 11 Theorem 7.1 (Bellare and Rogaway) Fix the RSA modu-lus used in PSS to be some length, say, K bits.
Reference: [5] <author> E. Biham and A. Shamir. </author> <title> Differential cryptanalysis of des-like cryptosystems. </title> <journal> Journal of Cryptology, </journal> <volume> 4(1):372, </volume> <year> 1991. </year>
Reference-contexts: In attempting to do this, the RRP adversary may be exploiting a logical flaw in the protocol, performing a brute force search for a key, or even attempting some kind of statistical attack, such as differential cryptanalysis <ref> [5] </ref>. As such, the RRP adversary may be making probabilistic choices during its execution. Further, a given protocol may be probabilistic. For example, protocols may use an encryption scheme where keys are chosen from some initial distribution and/or the encryption operation itself is probabilistic.
Reference: [6] <author> M. Blaze, W. Diffie, R. Rivest, B. Schneier, T. Shimomura, E. Thompson, and M. Wiener. </author> <title> Minimal key lengths for symmetric ciphers to provide adequate commercial security, a report by an ad hoc group of cryptographers and computer 13 scientists, </title> <month> Jan. </month> <year> 1996. </year> <note> This report was sponsored by the Business Software Alliance. It is available on the Internet via http://www.bsa.org/policy/encryption/ cryptographers.html. </note>
Reference-contexts: However, such measures do not account for important practical considerations such as design costs and implementation technology. For example, building on Wiener's work [21], Blaze, et al consider the general problem of building key cracking machines <ref> [6] </ref>. In their analysis, the implementation technologyi.e., Field-Programmable Gate Array (FPGA) versus Application Specific Integrated Circuits (ASIC)is an important consideration in determining the construction cost and execution speed of a key cracking machine. <p> To consider brute-force key searching in general, we follow the report of Blaze, et al <ref> [6] </ref> and consider two meta-classes of adversariesthose with a budget of $10,000 and those with a budget of $300,000. With respect to (t)-($10,000) class adversaries, our basic assumption is that the adversary will make use of Field Programmable Gate Array (FPGA) technology.
Reference: [7] <author> D. E. Denning and G. M. Sacco. </author> <title> Timestamps in key distribution protocols. </title> <journal> Communications of the ACM, </journal> <volume> 24(8):533 536, </volume> <month> Aug. </month> <year> 1981. </year>
Reference-contexts: For example, the public-key distribution protocols of [15], [14, Fig. 11-32], and [22] have known flaws (and do not satisfy our definition of a secure RRP, given below). Denning and Sacco's public-key distribution protocol <ref> [7, x III.A] </ref> has no known flaws, but makes use of timestamps and thereby depends on synchronized clocks. Reasoning about timestamp-based protocols within the provable-security framework remains a topic for future work. <p> In the case of a time server, a non-current value could be a previous time, which can also cause significant security problems <ref> [7] </ref>. Despite the number of times RRPs have appeared in the literature, the present paper provides the first proof of such a protocol in the reduction-based provable-security tradition.
Reference: [8] <author> D. Dolev and A. C. Yao. </author> <title> On the security of public key protocols. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> IT-29(2):198208, </volume> <month> Mar. </month> <year> 1983. </year>
Reference-contexts: Despite the number of times RRPs have appeared in the literature, the present paper provides the first proof of such a protocol in the reduction-based provable-security tradition. Modeling an RRP Our model has its roots in the work of Dolev and Yao <ref> [8] </ref> and is closely related to state-based and algebraic approaches to cryptographic protocol analysis [13] as well as other provable-security approaches to cryptographic protocols [2] [3]. The model assumes the protocol is being used in an environment where the adversary is in control of all communication between clients and server.
Reference: [9] <author> S. Goldwasser and S. Micali. </author> <title> Probabilistic encryption. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 28(1):270299, </volume> <month> Apr. </month> <year> 1984. </year>
Reference-contexts: 1. Introduction In the theoretical cryptography community, there is a body of techniques known as provable security (see <ref> [9] </ref> for the seminal work), wherein various problems are reduced to other problems. Having such a reduction means that solving the latter implies a solution to the former. Thus, as long as the former problem remains computationally-unsolvable the latter does too.
Reference: [10] <author> J. Y. Halpern and M. R. Tuttle. </author> <title> Knowledge, probability, </title> <journal> and adversaries. JACM, </journal> <volume> 40(4):917962, </volume> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: For this purpose, we make use of probabilistic execution trees (see, e.g., [20] or <ref> [10] </ref>). Informally, each node in a probabilistic execution tree represents a global state of the system. This includes the adversary's state, plus the states of the server and all the clients. Arcs in the tree represent state transitions. <p> In summary, a given adversary A induces a probabilistic execution tree, which in turn induces a probability measure P A ( ) that is defined on all events. (See <ref> [10] </ref> for a detailed treatment.) The final semantic concept we need is time. For a given run of the system, we take time to be an indexing of the states forming that run. <p> That is, the various possible or-derings would be modeled as distinct adversaries and hence, give rise to separate probabilistic execution trees. See <ref> [10] </ref> for details. 4 ways. * We refer to the time that certain events occur.
Reference: [11] <author> T. Hwang and Y.-H. Chen. </author> <title> On the security of SPLICE/AS the authentication system in WIDE internet. </title> <journal> Information Processing Letters, </journal> <volume> 53:97101, </volume> <year> 1995. </year>
Reference-contexts: Denning and Sacco's public-key distribution protocol [7, x III.A] has no known flaws, but makes use of timestamps and thereby depends on synchronized clocks. Reasoning about timestamp-based protocols within the provable-security framework remains a topic for future work. The public-key distribution protocol of Hwang and Chen <ref> [11] </ref> is essentially the same as ours (but they have not provided a proof of its security). RRPs can also be applied to the problem of clock synchronization.
Reference: [12] <author> C. Kaufman, R. Perlman, and M. Speciner. </author> <title> Network Security, Private Communication in a Public World. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1995. </year>
Reference-contexts: The response from the server should provide the most recent public-key of that principal. Such a protocol is a useful alternative to public-key distribution via certificates, since key revocation is problematic with certificates. (See <ref> [12, Section 7.7.3] </ref> for a discussion of certificate revocation.) With a public-key server, key revocation can be accomplished by deleting or updating the principal's key at the key server. Protocols for public-key distribution have appeared in the literature several times, sometimes flawed and sometimes unflawed. <p> We do this below. Security Assumptions for a Practical PKSS In [4], Bel-lare and Rogaway define and analyze a PKSS called the Probabilistic Signature Scheme (PSS), which is built on top of RSA [18] and a cryptographic hash function, such as MD5 or SHA-1 (see <ref> [12] </ref> or [19] for descriptions of these functions). Bellare and Rogaway's analysis shows the security of PSS can be precisely related to the difficulty of inverting RSA.
Reference: [13] <author> R. Kemmerer, C. Meadows, and J. Millen. </author> <title> Three systems for cryptographic protocol analysis. </title> <journal> Journal of Cryptology, </journal> <volume> 7:79130, </volume> <year> 1994. </year>
Reference-contexts: Modeling an RRP Our model has its roots in the work of Dolev and Yao [8] and is closely related to state-based and algebraic approaches to cryptographic protocol analysis <ref> [13] </ref> as well as other provable-security approaches to cryptographic protocols [2] [3]. The model assumes the protocol is being used in an environment where the adversary is in control of all communication between clients and server.
Reference: [14] <author> C. H. Meyer and S. M. Matyas. </author> <title> Cryptography: A New Dimension in Computer Data Security. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1982. </year>
Reference-contexts: Protocols for public-key distribution have appeared in the literature several times, sometimes flawed and sometimes unflawed. For example, the public-key distribution protocols of [15], <ref> [14, Fig. 11-32] </ref>, and [22] have known flaws (and do not satisfy our definition of a secure RRP, given below). Denning and Sacco's public-key distribution protocol [7, x III.A] has no known flaws, but makes use of timestamps and thereby depends on synchronized clocks.
Reference: [15] <author> R. M. Needham and M. D. Schroeder. </author> <title> Using encryption for authentication in large networks of computers. </title> <journal> Communications of the ACM, </journal> <volume> 21(12):993999, </volume> <month> Dec. </month> <year> 1978. </year>
Reference-contexts: Protocols for public-key distribution have appeared in the literature several times, sometimes flawed and sometimes unflawed. For example, the public-key distribution protocols of <ref> [15] </ref>, [14, Fig. 11-32], and [22] have known flaws (and do not satisfy our definition of a secure RRP, given below). Denning and Sacco's public-key distribution protocol [7, x III.A] has no known flaws, but makes use of timestamps and thereby depends on synchronized clocks.
Reference: [16] <author> A. M. Odlyzko. </author> <title> The future of integer factorization. </title> <institution> RSA Laboratories' CryptoBytes, The technical newsletter of RSA Laboratories, 1(2):512, </institution> <month> summer </month> <year> 1995. </year> <note> Available on the Internet via http://www.rsa.com/. </note>
Reference: [17] <author> M. K. Reiter, K. P. Birman, and R. V. Renesse. </author> <title> A security architecture for fault-tolerant systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(4):340371, </volume> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: RRPs can also be applied to the problem of clock synchronization. In this application, a time server maintains the official time and clients periodically resynchronize to the official time by querying the time server. Reiter, et al describe and use such a protocol <ref> [17, Fig. 2] </ref> as an integral part of their security architecture. Their protocol is essentially the same as ours. 1 In both the above applications, the desired property is that clients accept only current (aka fresh) responses from the server. We make the notion of current precise below. <p> The model assumes the protocol is being used in an environment where the adversary is in control of all communication between clients and server. That is, the adversary can read, block, and/or modify any message sent over the communication medium. This in 1 Since the time server <ref> [17] </ref> responds to only one possible query, their protocol omits two of the data items we include. cludes modifying message headers so messages appear to be sent by principals other than the adversary.
Reference: [18] <author> R. L. Rivest, A. Shamir, and L. Adleman. </author> <title> A method for obtaining digital signatures and public-key cryptosystems. </title> <journal> Communications of the ACM, </journal> <volume> 21(2):120126, </volume> <month> Feb. </month> <year> 1978. </year>
Reference-contexts: We do this below. Security Assumptions for a Practical PKSS In [4], Bel-lare and Rogaway define and analyze a PKSS called the Probabilistic Signature Scheme (PSS), which is built on top of RSA <ref> [18] </ref> and a cryptographic hash function, such as MD5 or SHA-1 (see [12] or [19] for descriptions of these functions). Bellare and Rogaway's analysis shows the security of PSS can be precisely related to the difficulty of inverting RSA.
Reference: [19] <author> B. Schneier. </author> <title> Applied cryptography: protocols, algorithms, and source code in C. </title> <publisher> Wiley, </publisher> <address> New York, </address> <note> second edition, </note> <year> 1996. </year>
Reference-contexts: We do this below. Security Assumptions for a Practical PKSS In [4], Bel-lare and Rogaway define and analyze a PKSS called the Probabilistic Signature Scheme (PSS), which is built on top of RSA [18] and a cryptographic hash function, such as MD5 or SHA-1 (see [12] or <ref> [19] </ref> for descriptions of these functions). Bellare and Rogaway's analysis shows the security of PSS can be precisely related to the difficulty of inverting RSA.
Reference: [20] <author> R. van Glabbeek, B. Steffen, S. Smolka, and C. Tofts. </author> <title> Reactive, generative, and stratified models of probabilistic processes. </title> <booktitle> In Proceedings of Fifth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 130141, </pages> <year> 1990. </year>
Reference-contexts: While we are not fully formalizing RRP adversaries, it is useful to have a semantic model to fix our intuitions regarding the probabilistic choices made by the RRP adversary and the protocol participants during the test. For this purpose, we make use of probabilistic execution trees (see, e.g., <ref> [20] </ref> or [10]). Informally, each node in a probabilistic execution tree represents a global state of the system. This includes the adversary's state, plus the states of the server and all the clients. Arcs in the tree represent state transitions.
Reference: [21] <author> M. J. Wiener. </author> <title> Efficient DES key search. </title> <type> Technical Report TR-244, </type> <institution> School of Computer Science, Carleton University, </institution> <month> May </month> <year> 1994. </year> <title> Reprinted in Practical Cryptography for Data Internetworks, </title> <editor> W. Stallings (ed.), </editor> <publisher> IEEE Computer Society Press, </publisher> <pages> pp 3179, </pages> <year> (1996). </year>
Reference-contexts: Regarding our second parameterconstruction costit is clear the actual execution time of a given algorithm depends on the machine on which it is running, including the CPU architecture, available RAM, etc. Further, it is well known that special-purpose hardware can be used to speed up cryptanalytic attacks (e.g., see <ref> [21] </ref>). The underlying resource here is money. Roughly speaking, if an adversary has more money to spend, he can speed up his attack. <p> However, such measures do not account for important practical considerations such as design costs and implementation technology. For example, building on Wiener's work <ref> [21] </ref>, Blaze, et al consider the general problem of building key cracking machines [6]. In their analysis, the implementation technologyi.e., Field-Programmable Gate Array (FPGA) versus Application Specific Integrated Circuits (ASIC)is an important consideration in determining the construction cost and execution speed of a key cracking machine. <p> Such a known plaintext-ciphertext pair can be used to perform a brute-force key search. For example, it has been shown by Wiener <ref> [21] </ref> that with a $100,000 investment, an attacker can build a DES key searching machine that takes a single plaintext-ciphertext pair and recovers the corresponding DES key in about 35 hours.
Reference: [22] <author> S. Yamaguchi, K. Okayama, and H. Miyahara. </author> <title> Design and implementation of an authentication system in WIDE internet environment. </title> <booktitle> In Proceedings of the IEEE Region 10 Conference on Computer and Communication Systems, </booktitle> <pages> pages 653657, </pages> <address> Hong Kong, </address> <month> Sept. </month> <year> 1990. </year> <month> 14 </month>
Reference-contexts: Protocols for public-key distribution have appeared in the literature several times, sometimes flawed and sometimes unflawed. For example, the public-key distribution protocols of [15], [14, Fig. 11-32], and <ref> [22] </ref> have known flaws (and do not satisfy our definition of a secure RRP, given below). Denning and Sacco's public-key distribution protocol [7, x III.A] has no known flaws, but makes use of timestamps and thereby depends on synchronized clocks.
References-found: 22

