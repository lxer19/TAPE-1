URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/TM166.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts92.htm
Root-URL: http://www.mcs.anl.gov
Title: ADIFOR Working Note #8: Hybrid Evaluation of Second Derivatives in ADIFOR  
Author: by Christian Bischof, George Corliss, and Andreas Griewank 
Address: Argonne, IL 60439  
Affiliation: Mathematics and Computer Science Division Argonne National Laboratory  
Pubnum: Technical Memorandum ANL/MCS-TM-166  
Abstract: Many algorithms for scientific computation require second- or higher-order partial derivatives, which can be efficiently computed by propagating a set of univariate Taylor series. We describe how to implement second-order mixed partial derivative computations in ADIFOR (Automatic Differentiation In FORtran), a Fortran-to-Fortran source transformation tool. Globally, we propagate three-term univariate Taylor series in the forward mode. Locally, we preaccumulate local gradients and Hessians for complicated expressions on the right-hand sides of assignment statements. We describe the source transformations and give an example of the transformed code. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Christian Bischof, Alan Carle, George Corliss, and Andreas Griewank. </author> <title> ADIFOR : Automatic differentiation in a source translation environment. </title> <type> Preprint MCS-P288-0192, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, Ill., </institution> <month> January </month> <year> 1992. </year> <title> ADI-FOR Working Note # 5. </title> <booktitle> Accepted for the International Symposium on Symbolic and Algebraic Computation, </booktitle> <month> July 27-29, </month> <year> 1992, </year> <institution> Berkeley, Calif. </institution>
Reference-contexts: We assume that the reader is familiar with the Fortran-to-Fortran source transformation tool AD-IFOR (Automatic Differentiation In FORtran) as described in <ref> [1, 2, 3, 4, 6] </ref>, as well as with the theoretical framework for computing second- and higher-order mixed partial derivatives by interpolating from sets of univariate Taylor series [5]. Here, we describe the implementation in ADIFOR of the framework outlined in [5].
Reference: [2] <author> Christian Bischof, Alan Carle, George Corliss, Andreas Griewank, and Paul Hovland. ADIFOR: </author> <title> Fortran source translation for efficient derivatives. </title> <type> Preprint MCS-P278-1291, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, Ill., </institution> <month> December </month> <year> 1991. </year> <note> ADI-FOR Working Note # 4. </note>
Reference-contexts: We assume that the reader is familiar with the Fortran-to-Fortran source transformation tool AD-IFOR (Automatic Differentiation In FORtran) as described in <ref> [1, 2, 3, 4, 6] </ref>, as well as with the theoretical framework for computing second- and higher-order mixed partial derivatives by interpolating from sets of univariate Taylor series [5]. Here, we describe the implementation in ADIFOR of the framework outlined in [5].
Reference: [3] <author> Christian Bischof, Alan Carle, George Corliss, Andreas Griewank, and Paul Hovland. </author> <title> Generating derivative codes from Fortran programs. </title> <journal> Scientific Computing, </journal> <note> to appear. ADIFOR Working Note # 1. Also appeared as Preprint MCS-P263-0991, </note> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, Ill., </institution> <year> 1991, </year> <note> and as Technical Report 91185, Center for Research in Parallel Computation, </note> <institution> Rice University, Houston, Tex. </institution> <month> 77251, </month> <year> 1991. </year>
Reference-contexts: We assume that the reader is familiar with the Fortran-to-Fortran source transformation tool AD-IFOR (Automatic Differentiation In FORtran) as described in <ref> [1, 2, 3, 4, 6] </ref>, as well as with the theoretical framework for computing second- and higher-order mixed partial derivatives by interpolating from sets of univariate Taylor series [5]. Here, we describe the implementation in ADIFOR of the framework outlined in [5]. <p> Then the ADIFOR-generated variables g$u and h$u in h$fcn contain g$u (j) := @u h$u (j; i) := @ 2 u We illustrate the code to be generated by ADIFOR by a simple example similar to that used in <ref> [3] </ref> to motivate the hybrid mode for first derivative objects. Consider the subroutine in Listing 1. subroutine fcn (x, xdim, f, fdim) integer xdim, fdim real x (xdim), f (fdim) f (1) = -x (1) / (x (2) * x (3) * x (4)) return end Listing 1. <p> Then write the resulting code. 5 Example of the Generated Code As an example of the tasks that ADIFOR must perform to generate code to compute second-order derivatives, we take the assignment statement w = -y / (z * z * z) used as an example in <ref> [3] </ref> to motivate the generation of code for the hybrid mode. We proceed in incremental steps from a simple subroutine containing this assignment statement to the final subroutine illustrating the code to be generated by ADIFOR.
Reference: [4] <author> Christian Bischof, George Corliss, and Andreas Griewank. </author> <title> ADIFOR exception handling. </title> <type> Technical Memorandum ANL/MCS-TM-159, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, Ill., </institution> <month> January </month> <year> 1992. </year> <note> ADIFOR Working Note # 3. </note>
Reference-contexts: We assume that the reader is familiar with the Fortran-to-Fortran source transformation tool AD-IFOR (Automatic Differentiation In FORtran) as described in <ref> [1, 2, 3, 4, 6] </ref>, as well as with the theoretical framework for computing second- and higher-order mixed partial derivatives by interpolating from sets of univariate Taylor series [5]. Here, we describe the implementation in ADIFOR of the framework outlined in [5].
Reference: [5] <author> Christian Bischof, George Corliss, and Andreas Griewank. </author> <title> Structured second- and higher-order derivatives through univariate Taylor series. </title> <type> Preprint MCS-P296-0392, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, Ill., </institution> <year> 1992. </year> <note> ADIFOR Working Note # 6. </note>
Reference-contexts: We assume that the reader is familiar with the Fortran-to-Fortran source transformation tool AD-IFOR (Automatic Differentiation In FORtran) as described in [1, 2, 3, 4, 6], as well as with the theoretical framework for computing second- and higher-order mixed partial derivatives by interpolating from sets of univariate Taylor series <ref> [5] </ref>. Here, we describe the implementation in ADIFOR of the framework outlined in [5]. In Section 2, we outline briefly where second derivatives are required for reliable scientific computation. A more complete survey of algorithms that require second- and higher-order derivatives is in [5]. <p> tool AD-IFOR (Automatic Differentiation In FORtran) as described in [1, 2, 3, 4, 6], as well as with the theoretical framework for computing second- and higher-order mixed partial derivatives by interpolating from sets of univariate Taylor series <ref> [5] </ref>. Here, we describe the implementation in ADIFOR of the framework outlined in [5]. In Section 2, we outline briefly where second derivatives are required for reliable scientific computation. A more complete survey of algorithms that require second- and higher-order derivatives is in [5]. <p> interpolating from sets of univariate Taylor series <ref> [5] </ref>. Here, we describe the implementation in ADIFOR of the framework outlined in [5]. In Section 2, we outline briefly where second derivatives are required for reliable scientific computation. A more complete survey of algorithms that require second- and higher-order derivatives is in [5]. In Section 3, we discuss components of the algorithm we implement if ADIFOR for computing second derivatives: forward-mode Hessians, interpolation, forward-mode Taylor series, and preaccu-mulation. Section 4 contains a discussion of the tasks accomplished by ADIFOR in its generation of code to compute second-order derivatives. <p> The mathematical theory of recovering high-order mixed partial derivatives from values propagated as univariate Taylor series is given in <ref> [5] </ref>. Here, we outline the ideas and sketch an implementation. 6 3.2.1 Interpolation Suppose we have a program that evaluates a scalar function w = f (u; v) with two independent variables u and v 2 R. <p> w y ; and Thus, we can calculate the missing cross term as w xy = fi 0:5 (w xx + w yy ): This is a simple instantiation of the general interpolation procedure for an arbitrary number of independent variables and for arbitrary order mixed partial derivatives described in <ref> [5] </ref>. 7 3.2.2 Forward-Mode Univariate Taylor Series Here, we consider how univariate Taylor series provide the values required to compute dense Hessians by the interpolation scheme outlined in Section 3.2.1.
Reference: [6] <author> Christian Bischof and Paul Hovland. </author> <title> Using ADIFOR to compute dense and sparse Jacobians. </title> <type> Technical Memorandum ANL/MCS-TM-158, </type> <institution> Mathematics and Computer Science Division, Ar-gonne National Laboratory, Argonne, Ill., </institution> <month> October </month> <year> 1991. </year> <note> ADIFOR Working Note # 2. </note>
Reference-contexts: We assume that the reader is familiar with the Fortran-to-Fortran source transformation tool AD-IFOR (Automatic Differentiation In FORtran) as described in <ref> [1, 2, 3, 4, 6] </ref>, as well as with the theoretical framework for computing second- and higher-order mixed partial derivatives by interpolating from sets of univariate Taylor series [5]. Here, we describe the implementation in ADIFOR of the framework outlined in [5].
Reference: [7] <author> John Dennis and R. Schnabel. </author> <title> Numerical Methods for Unconstrained Optimization and Nonlinear Equations. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1983. </year>
Reference-contexts: Given f : R n 7! R, unconstrained optimization algorithms minimize f locally by solving rf = 0 using a Newton or a secant-type iterative method <ref> [7] </ref>. The Newton iteration requires the Hessian r 2 f . In nonlinearly constrained optimization, the curvature of the constraint surfaces is represented by the Hessians r 2 c i of the active constraints c i (x) = 0.
Reference: [8] <author> Andreas Griewank. </author> <title> On automatic differentiation. </title> <editor> In M. Iri and K. Tanabe, editors, </editor> <booktitle> Mathematical Programming: Recent Developments and Applications, </booktitle> <pages> pages 83 - 108. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1989. </year>
Reference-contexts: The alternative of overall reverse-mode propagation of adjoint values <ref> [8] </ref> is attractive for computing gradients, but for the highly structured Hessians and higher-order derivatives, the global application of the forward mode is satisfactory.
Reference: [9] <author> Louis B. Rall. </author> <title> Differentiation in Pascal-SC: Type GRADIENT. </title> <journal> ACM Trans. Math. Software, </journal> <volume> 10(2):161 - 184, </volume> <month> June </month> <year> 1984. </year> <month> 22 </month>
Reference-contexts: In the rest of this section, we examine in detail the three building blocks listed above. 3.1 Forward-Mode Hessians One could use the forward mode of automatic differentiation to compute the gradient and the dense Hessian of f by propagating the first- and second-derivative objects strictly in the forward mode <ref> [9] </ref>. We describe how this would be done to show that the combination of preaccumulation and interpolation yields much more efficient code. 3.1.1 Example Multiplication Suppose that u and v are active variables (they depend on values of independent variables).
References-found: 9

