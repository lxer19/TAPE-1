URL: http://pertsserver.cs.uiuc.edu/papers/GiLi95.ps
Refering-URL: http://pertsserver.cs.uiuc.edu/papers/
Root-URL: http://www.cs.uiuc.edu
Title: SCHEDULING TASKS WITH AND/OR PRECEDENCE CONSTRAINTS  
Author: D. W. GILLIES AND J. W.-S. LIU 
Keyword: Key words. non-preemptive scheduling, list scheduling, minimal length schedules, algorithm analysis, multiprocessor systems, NP-complete problems.  
Note: AMS subject classifications. 68M20, 68Q25, 90B35, 90C90.  
Abstract: In traditional precedence-constrained scheduling a task is ready to execute when all its predecessors are complete. We call such a task an AND task. In this paper we allow certain tasks to be ready when just one of their predecessors is complete. These tasks are known as OR tasks. We analyze the complexity of two types of real-time AND/OR task scheduling problems. In the first type of problem, all the predecessors of every OR task must eventually be completed, but in the second type of problem, some OR predecessors may be left unscheduled. We show that most problems involving tasks with individual deadlines are NP-complete, and then present two priority-driven heuristic algorithms to minimize completion time on a multiprocessor. These algorithms provide the same level of worst-case performance as some previous priority-driven algorithms for scheduling AND-only task systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P.-R. Chang, </author> <title> Parallel algorithms and VLSI architectures for robotics and assembly scheduling, </title> <type> Ph.D. thesis, </type> <institution> Purdue University, West Lafayette, IN, </institution> <year> 1988. </year>
Reference-contexts: In some applications all the predecessors of an OR task must eventually be completed, that is, they cannot be skipped. We call the model for this type of application the AND/OR/unskipped model. For example, in robotic assembly <ref> [1] </ref>, one out of four bolts may secure an engine head well enough to allow further work on other parts of the engine head. However, the remaining three bolts must eventually be installed. The unskipped variant also models tasks that share resources.
Reference: [2] <author> E. G. Coffman, Jr., ed., </author> <title> Computer and Job Shop Scheduling Theory, </title> <publisher> John Wiley, </publisher> <address> New York, NY, </address> <year> 1976. </year>
Reference-contexts: W 0 =W o 2 1=m. Examples of AND-only task systems that achieve this bound may be found in <ref> [2] </ref> and [10]. It is known [10] that no AND-only priority-driven heuristic can avoid 21=m worst-case performance (because priority-driven heuristics never intentionally idle the processor, and sometimes intentional idling is needed). Our priority-driven heuristic will schedule AND-only task systems as a special case.
Reference: [3] <author> J. Y. Chung, J. W.-S. Liu, and K. J. Lin, </author> <title> Scheduling Periodic Jobs That Allow Imprecise Results, </title> <journal> IEEE Trans. Computers, </journal> <volume> 39 (1990), </volume> <pages> pp. 1156-1174. </pages>
Reference-contexts: The AND/OR/skipped problem also arises in hard real-time scheduling. When there is insufficient time for a task system to meet its deadlines, we may convert appropriate tasks to imprecise computations <ref> [3] </ref>, which may be modeled as OR tasks whose predecessors may be skipped. We are concerned with ways to schedule AND/OR precedence-constrained tasks to meet deadlines or to minimize completion time. Most of these problems are generalizations of traditional deterministic scheduling problems that are NP-hard. <p> All the tasks T 1 : : : T k have a common AND direct successor T k+1 . For each 3SAT clause we assign an interval of 3 units of time starting at time zero. Hence the intervals <ref> [0; 3] </ref>; [3; 6]; : : :; [3n 3; 3n] correspond to clause 1, clause 2, : : :, clause n. <p> All the tasks T 1 : : : T k have a common AND direct successor T k+1 . For each 3SAT clause we assign an interval of 3 units of time starting at time zero. Hence the intervals [0; 3]; <ref> [3; 6] </ref>; : : :; [3n 3; 3n] correspond to clause 1, clause 2, : : :, clause n.
Reference: [4] <author> E. G. Coffman, Jr., J. Y. Leung, and D. W. Ting, </author> <title> Bin packing: maximizing the number of pieces packed, </title> <journal> Acta Informatica, </journal> <volume> 9 (1978), </volume> <pages> pp. 263-271. </pages>
Reference-contexts: Some obvious priority-driven scheduling algorithms such as fewest predecessors first, least slack first, and some generalizations of the algorithms in <ref> [4] </ref> neglect to compare the deadlines among different in-trees. In the worst case these algorithms may meet only p n deadlines when it is possible to meet n out of n + 1 deadlines. For more information the reader is referred to [11] [12]. 3.2. Scheduling to Minimize Completion Time.
Reference: [5] <author> L. S. Homem de Mello and A. C. Sanderson, </author> <title> AND/OR graph representation of assembly plans, </title> <booktitle> Proc. AAAI (1986) pp. </booktitle> <pages> 1113-1119. </pages>
Reference-contexts: These different sequences arise from algebraic laws such as associativity and distributivity. Only one sequence needs to be executed, and the other sequences may be skipped. Another application that can be characterized by this model is manufacturing planning <ref> [5] </ref> because certain manufacturing steps obey associative and distributive algebraic laws. The AND/OR/skipped problem also arises in hard real-time scheduling.
Reference: [6] <author> M. R. Garey and D. S. Johnson, </author> <title> Two-processor scheduling with start-times and deadlines, </title> <journal> SIAM J. Comput., </journal> <volume> 6 (1977), </volume> <pages> pp. 416-428. </pages>
Reference-contexts: For two problems that are known to be NP-hard, we give heuristic algorithms to minimize completion time. The algorithms have small running time and good worst-case performance. Our work is related to some previous work on deterministic scheduling to meet deadlines <ref> [6] </ref> [8] and to minimize completion time [9] [10] [13] [14]. We were inspired by an AND/OR model that was proposed as a means of modeling distributed systems for real-time control [18]. Two recent systems incorporated AND/OR precedence constraints of some sort in their implementation [16] [19]. <p> We then explain why no priority-driven heuristic can provide a better worst-case performance bound than the one presented here. 3.1. Scheduling to Meet Deadlines on a Single Processor. There are well-known polynomial-time algorithms <ref> [6] </ref> [8] for scheduling tasks with AND-only precedence constraints, identical processing times, and arbitrary deadlines on one or two processors. It is natural to ask whether the corresponding AND/OR scheduling problems may be solved in polynomial time. <p> All the tasks T 1 : : : T k have a common AND direct successor T k+1 . For each 3SAT clause we assign an interval of 3 units of time starting at time zero. Hence the intervals [0; 3]; <ref> [3; 6] </ref>; : : :; [3n 3; 3n] correspond to clause 1, clause 2, : : :, clause n.
Reference: [7] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability: a Guide to the Theory of NP-completeness, </title> <editor> W. H. </editor> <publisher> Freeman and Co., </publisher> <address> San Francisco, CA, </address> <year> 1979. </year>
Reference-contexts: Given a hypergraph H = (V; E) of 3n vertices and a set of hyper-edges, each of which is incident to three vertices, the problem is to find a set of exactly n edges that covers all the vertices with no overlap. This problem is NP-complete <ref> [7] </ref>. The exact 3-cover problem can be transformed into an AND/OR scheduling problem as follows. Create a task system (G; D) composed entirely of unit processing-time AND/OR SCHEDULING 5 tasks. There is an OR task T i in the task system for each hypergraph vertex v i in H.
Reference: [8] <author> M. R. Garey, D. S. Johnson, B. B. Simons, and R. E. Tarjan, </author> <title> Scheduling unit-time tasks with arbitrary release times and deadlines, </title> <journal> SIAM J. Comput. </journal> <volume> 10 (1981), </volume> <pages> pp. 256-269. </pages>
Reference-contexts: For two problems that are known to be NP-hard, we give heuristic algorithms to minimize completion time. The algorithms have small running time and good worst-case performance. Our work is related to some previous work on deterministic scheduling to meet deadlines [6] <ref> [8] </ref> and to minimize completion time [9] [10] [13] [14]. We were inspired by an AND/OR model that was proposed as a means of modeling distributed systems for real-time control [18]. Two recent systems incorporated AND/OR precedence constraints of some sort in their implementation [16] [19]. <p> We then explain why no priority-driven heuristic can provide a better worst-case performance bound than the one presented here. 3.1. Scheduling to Meet Deadlines on a Single Processor. There are well-known polynomial-time algorithms [6] <ref> [8] </ref> for scheduling tasks with AND-only precedence constraints, identical processing times, and arbitrary deadlines on one or two processors. It is natural to ask whether the corresponding AND/OR scheduling problems may be solved in polynomial time. Unfortunately, this extended problem is NP-complete, even when all the deadlines are the same. <p> Therefore, when there are O (log n) OR tasks in the AND/OR task system, it is possible to enumerate in polynomial time the set of all possible AND-only task graphs and apply an optimal AND-only scheduling algorithm such as the one described in <ref> [8] </ref>. On the other hand, Theorems 3.1-3.3 show that many natural scheduling problems with O (n) 6 D. W. GILLIES AND J. W.-S. LIU Table 1 Complexity of AND/OR/unskipped problems. (a) Scheduling to meet deadlines with identical processing times on 1 processor.
Reference: [9] <author> D. W. Gillies and J. W.-S. Liu, </author> <title> Greed in resource scheduling, </title> <booktitle> Proc. IEEE Real-Time Systems Symposium, 10 (1989), </booktitle> <pages> pp. 285-294. </pages>
Reference-contexts: For two problems that are known to be NP-hard, we give heuristic algorithms to minimize completion time. The algorithms have small running time and good worst-case performance. Our work is related to some previous work on deterministic scheduling to meet deadlines [6] [8] and to minimize completion time <ref> [9] </ref> [10] [13] [14]. We were inspired by an AND/OR model that was proposed as a means of modeling distributed systems for real-time control [18]. Two recent systems incorporated AND/OR precedence constraints of some sort in their implementation [16] [19]. The remainder of this paper is organized as follows.
Reference: [10] <author> D. W. Gillies and J. W.-S. Liu, </author> <title> Greed in resource scheduling, </title> <journal> Acta Informatica, </journal> <volume> 28 (1991), </volume> <pages> pp. 755-775. </pages>
Reference-contexts: For two problems that are known to be NP-hard, we give heuristic algorithms to minimize completion time. The algorithms have small running time and good worst-case performance. Our work is related to some previous work on deterministic scheduling to meet deadlines [6] [8] and to minimize completion time [9] <ref> [10] </ref> [13] [14]. We were inspired by an AND/OR model that was proposed as a means of modeling distributed systems for real-time control [18]. Two recent systems incorporated AND/OR precedence constraints of some sort in their implementation [16] [19]. The remainder of this paper is organized as follows. <p> W 0 =W o 2 1=m. Examples of AND-only task systems that achieve this bound may be found in [2] and <ref> [10] </ref>. It is known [10] that no AND-only priority-driven heuristic can avoid 21=m worst-case performance (because priority-driven heuristics never intentionally idle the processor, and sometimes intentional idling is needed). Our priority-driven heuristic will schedule AND-only task systems as a special case. <p> W 0 =W o 2 1=m. Examples of AND-only task systems that achieve this bound may be found in [2] and <ref> [10] </ref>. It is known [10] that no AND-only priority-driven heuristic can avoid 21=m worst-case performance (because priority-driven heuristics never intentionally idle the processor, and sometimes intentional idling is needed). Our priority-driven heuristic will schedule AND-only task systems as a special case.
Reference: [11] <author> D. W Gillies, and J. W.-S. Liu, </author> <title> Scheduling Tasks with AND/OR Precedence Constraints, </title> <type> Rep. </type> <institution> No. UIUCDCS-R-90-1627 (UIUC-ENG-1766), Department of Computer Science, Univ. of Illinois, Urbana, </institution> <year> 1991. </year>
Reference-contexts: Surprisingly, even this simplified AND/OR scheduling problem is NP-complete Theorem 3.4. The problem of AND/OR/unskipped scheduling to meet deadlines, where the task system is a simple in-forest with identical processing times, is NP-complete. Proof. The proof may be found in <ref> [11] </ref>. Theorems 3.1-3.3 allow us to arrive at the following conclusion. Every AND/OR task graph with k OR tasks, each of which has l direct predecessors, corresponds to a set of l k different AND-only task graphs. <p> In the worst case these algorithms may meet only p n deadlines when it is possible to meet n out of n + 1 deadlines. For more information the reader is referred to <ref> [11] </ref> [12]. 3.2. Scheduling to Minimize Completion Time. We now consider the problem of scheduling AND/OR/unskipped tasks with arbitrary processing times on m processors to meet a common deadline. This problem is equivalent to that of scheduling to minimize the overall completion time. <p> Proof. The proof is contained in the appendix. Theorem 4.2. The problem of AND/OR/skipped scheduling to meet deadlines, where the task system is a simple in-forest with identical processing times, is NP-complete. Proof. The proof may be found in <ref> [11] </ref>. Now we consider the case where the task system is a simple in-forest and only the OR tasks have deadlines. <p> A. Appendix. This appendix presents the proofs of Theorems 3.2, 3.4, 4.1, 4.3, and Corollary 3.1. Proofs of Theorems 3.3 and 4.2 may be found in both <ref> [11] </ref> and [12]. Except where noted, all proofs refer to the scheduling of a single processor. Theorem 3.2. The problem of AND/OR/unskipped scheduling to meet deadlines, where tasks have identical processing times, arbitrary deadlines, and in-tree precedence constraints, is NP-complete. Proof. Our proof is based on a reduction from 3SAT. <p> Furthermore, the task chains guarantee that the truth or falsity of a variable is consistent among different 3SAT clauses. Thus, a schedule is feasible if and only if there is a satisfying truth assignment. All the other proofs in this appendix and in <ref> [11] </ref> and [12] are modifications of the proof of Theorem 3.2. In particular, Theorems 3.3 and 4.2 require a large simple in-tree for each term in a 3SAT expression, and have been omitted for brevity. Corollary 3.1. The problem remains NP-complete if only the OR tasks have deadlines. Proof.
Reference: [12] <author> D. W Gillies, </author> <title> Algorithms to schedule tasks with AND/OR precedence constraints, </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science, Univ. of Illinois, Urbana, </institution> <year> 1993. </year>
Reference-contexts: In the worst case these algorithms may meet only p n deadlines when it is possible to meet n out of n + 1 deadlines. For more information the reader is referred to [11] <ref> [12] </ref>. 3.2. Scheduling to Minimize Completion Time. We now consider the problem of scheduling AND/OR/unskipped tasks with arbitrary processing times on m processors to meet a common deadline. This problem is equivalent to that of scheduling to minimize the overall completion time. <p> There are also situations where both OR/skipped and OR/unskipped tasks are present in a single in-tree. With slight modifications our AND/OR/skipped heuristic can be used to handle such mixed task systems. Details of these transformations and algorithms appear in <ref> [12] </ref>. During this investigation we reached several conclusions about the complexity of AND/OR scheduling. Contrary to our intuition, the skipped problems we considered were generally of higher complexity than the corresponding unskipped problems. This can be seen by comparing Table 1 and Table 2, and the proofs in the appendix. <p> A. Appendix. This appendix presents the proofs of Theorems 3.2, 3.4, 4.1, 4.3, and Corollary 3.1. Proofs of Theorems 3.3 and 4.2 may be found in both [11] and <ref> [12] </ref>. Except where noted, all proofs refer to the scheduling of a single processor. Theorem 3.2. The problem of AND/OR/unskipped scheduling to meet deadlines, where tasks have identical processing times, arbitrary deadlines, and in-tree precedence constraints, is NP-complete. Proof. Our proof is based on a reduction from 3SAT. <p> Furthermore, the task chains guarantee that the truth or falsity of a variable is consistent among different 3SAT clauses. Thus, a schedule is feasible if and only if there is a satisfying truth assignment. All the other proofs in this appendix and in [11] and <ref> [12] </ref> are modifications of the proof of Theorem 3.2. In particular, Theorems 3.3 and 4.2 require a large simple in-tree for each term in a 3SAT expression, and have been omitted for brevity. Corollary 3.1. The problem remains NP-complete if only the OR tasks have deadlines. Proof.
Reference: [13] <author> R. L Graham, </author> <title> Bounds on multiprocessing timing anomalies, </title> <journal> SIAM J. Appl. Math., </journal> <volume> 17 (1969), </volume> <pages> pp. 416-429. </pages>
Reference-contexts: The algorithms have small running time and good worst-case performance. Our work is related to some previous work on deterministic scheduling to meet deadlines [6] [8] and to minimize completion time [9] [10] <ref> [13] </ref> [14]. We were inspired by an AND/OR model that was proposed as a means of modeling distributed systems for real-time control [18]. Two recent systems incorporated AND/OR precedence constraints of some sort in their implementation [16] [19]. The remainder of this paper is organized as follows. <p> This argument is used inductively to transform G o into G 0 with no increase in the maximum path length. This establishes the lemma. The following fact is proved in the well-known paper <ref> [13] </ref>. Lemma 3.7. In any priority-driven schedule, there is a chain of tasks that executes during all the idle periods (when one or more processors are not in use), and this chain is not longer than the completion time of an optimal schedule.
Reference: [14] <author> T. C Hu, </author> <title> Parallel sequencing and assembly line problems, </title> <journal> Operations Res., </journal> <volume> 9 (1961), </volume> <pages> pp. 841-848. </pages>
Reference-contexts: The algorithms have small running time and good worst-case performance. Our work is related to some previous work on deterministic scheduling to meet deadlines [6] [8] and to minimize completion time [9] [10] [13] <ref> [14] </ref>. We were inspired by an AND/OR model that was proposed as a means of modeling distributed systems for real-time control [18]. Two recent systems incorporated AND/OR precedence constraints of some sort in their implementation [16] [19]. The remainder of this paper is organized as follows. <p> About thirty years ago, T. C. Hu gave a polynomial-time algorithm to schedule an AND-only task system with in-tree precedence constraints on m processors <ref> [14] </ref>. Thus, there is some hope that if we restrict the AND/OR/unskipped task system to have in-tree precedence constraints, there may exist a polynomial-time algorithm. Unfortunately, the following theorem shows that this AND/OR scheduling problem is NP-complete. Theorem 3.2.
Reference: [15] <author> E. L. Lawler, J. K. Lenstra, A. H. G. Rinnooy Kan, and D. B. Shmoys, </author> <title> Sequencing and Scheduling: Algorithms and Complexity, </title> <type> Rep. </type> <institution> No. BS-R8908, Centre for Mathematics and Computer Science, </institution> <address> Amsterdam, Holland, </address> <year> 1989. </year>
Reference-contexts: Task Processing Time General Graph In-Tree Identical NP-C <ref> [15] </ref> for AND-only NP-C (Theorem 3.4) Arbitrary Minimum-Path Heuristic Minimum-Path Heuristic Input: Task graph G = (T; A; P) Step 1: For each OR task T i with no OR predecessors: (a) Let T k be a direct predecessor of T i that minimizes the longest path ending at T k <p> Scheduling to Minimize Completion Time. We now consider the problem of scheduling AND/OR/unskipped tasks with arbitrary processing times on m processors to meet a common deadline. This problem is equivalent to that of scheduling to minimize the overall completion time. Ullman has shown this problem to be NP-complete <ref> [15] </ref> for AND-only task systems where all the tasks have identical processing times. However, Hu's algorithm solves this problem in polynomial time for in-tree precedence constraints. Unfortunately, the problem becomes NP-complete when OR tasks are allowed. Theorem 3.5. <p> Our priority-driven heuristic will schedule AND-only task systems as a special case. Hence, it is not possible to get better worst-case performance from an AND/OR scheduling algorithm without a better AND-only scheduling algorithm. In fact, it has been a long-standing open problem to find a better AND-only scheduling algorithm <ref> [15] </ref>. 8 D. W. GILLIES AND J. W.-S. LIU Table 2 Complexity of AND/OR/skipped problems (a) Scheduling to meet deadlines with identical processing times on 1 processor. <p> Task Processing Time General Graph In-Tree Identical NP-C <ref> [15] </ref> ( 3=2 fl OP T ) NP-C (Theorem 4.3) Arbitrary No Algorithm Path-Balancing Heuristic 4. Skipped Problems. In an AND/OR/skipped scheduling problem, the inessential predecessors of an OR task may be skipped entirely. <p> It follows that unless P = NP no polynomial-time AND/OR/skipped scheduling heuristic can guarantee a worst-case completion time of less than 3/2 times the length of an optimal schedule. In contrast to this, if the task system is AND-only, it is known <ref> [15] </ref> that no polynomial-time heuristic can guarantee a worst-case completion time of less than of 4/3 times the length of an optimal schedule. 5. Conclusion. We have analyzed the skipped and unskipped variants of the AND/OR scheduling problem with deadlines.
Reference: [16] <author> M. C. McElvany, </author> <title> Guaranteeing deadlines in MAFT, </title> <booktitle> Proc. IEEE Real-Time Systems Symposium, 9 (1988), </booktitle> <pages> pp. 130-139. </pages> <address> 16 D. </address> <publisher> W. </publisher> <editor> GILLIES AND J. W.-S. </editor> <publisher> LIU </publisher>
Reference-contexts: We were inspired by an AND/OR model that was proposed as a means of modeling distributed systems for real-time control [18]. Two recent systems incorporated AND/OR precedence constraints of some sort in their implementation <ref> [16] </ref> [19]. The remainder of this paper is organized as follows. Section 2 describes our assumptions about the AND/OR scheduling problem and introduces the terminology used in later sections. Section 3 investigates the unskipped problem with multiple deadlines and analyzes an algorithm to minimize completion time.
Reference: [17] <author> J. M. Moore, </author> <title> An n job, one machine sequencing algorithm for minimizing the number of late jobs, </title> <institution> Management Sci., </institution> <month> 15 </month> <year> (1968), </year> <pages> pp. 102-109. </pages>
Reference-contexts: Deadlines Location General Graph In-Tree Simple In-Forest 1 Deadline O (n) Deadlines On All Tasks NP-C (Theorem 3.1) NP-C (Theorem 4.1) NP-C (Theorem 4.2) ON OR Tasks Only NP-C (Theorem 3.1) NP-C (Theorem 4.1) <ref> [17] </ref> Algorithm (b) Scheduling to minimize completion time on m processors. Task Processing Time General Graph In-Tree Identical NP-C [15] ( 3=2 fl OP T ) NP-C (Theorem 4.3) Arbitrary No Algorithm Path-Balancing Heuristic 4. Skipped Problems. <p> To produce such a schedule, we note that an OR task together with one predecessor subtree consisting of k i AND tasks may be thought of as one large task with processing time k i + 1. Then the algorithm of <ref> [17] </ref>, which minimizes unit penalty on a single processor, may be used to schedule tasks with processing time (k i + 1), to maximize the number of OR tasks that meet their deadline.
Reference: [18] <author> D. Peng and K. G. Shin, </author> <title> Modeling of concurrent task execution in a distributed system for real-time control, </title> <journal> IEEE Trans. Computers, </journal> <volume> 36 (1987), </volume> <pages> pp. 500-516. </pages>
Reference-contexts: Our work is related to some previous work on deterministic scheduling to meet deadlines [6] [8] and to minimize completion time [9] [10] [13] [14]. We were inspired by an AND/OR model that was proposed as a means of modeling distributed systems for real-time control <ref> [18] </ref>. Two recent systems incorporated AND/OR precedence constraints of some sort in their implementation [16] [19]. The remainder of this paper is organized as follows. Section 2 describes our assumptions about the AND/OR scheduling problem and introduces the terminology used in later sections.
Reference: [19] <author> V. Saletore and L. V. Kale, </author> <title> Obtaining first solution faster in AND and OR parallel execution of logic programs, </title> <booktitle> North American Conference on Logic Programming, 1 (1989), </booktitle> <pages> pp. 390-406. </pages>
Reference-contexts: We were inspired by an AND/OR model that was proposed as a means of modeling distributed systems for real-time control [18]. Two recent systems incorporated AND/OR precedence constraints of some sort in their implementation [16] <ref> [19] </ref>. The remainder of this paper is organized as follows. Section 2 describes our assumptions about the AND/OR scheduling problem and introduces the terminology used in later sections. Section 3 investigates the unskipped problem with multiple deadlines and analyzes an algorithm to minimize completion time.
References-found: 19

