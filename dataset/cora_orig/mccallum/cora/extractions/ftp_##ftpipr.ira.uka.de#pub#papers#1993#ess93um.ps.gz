URL: ftp://ftpipr.ira.uka.de/pub/papers/1993/ess93um.ps.gz
Refering-URL: ftp://ftpipr.ira.uka.de/.public_html/papersna.html
Root-URL: 
Title: DISTRIBUTED SIMULATION OF ROBOT TASKS  
Author: Ulrich Mehlhaus and Willi Alexander Rausch 
Address: Kaiserstrae 12, D-76128 Karlsruhe, Germany  
Affiliation: Institute for Real-Time Computer Systems and Robotics University of Karlsruhe, Department of Computer Science  
Abstract: Software environments which simulate the behavior of complex systems often lead to a computational expense that reaches the limit of hardware resources. The "conventional" approach partitions the global system program into a set of successively called subprograms, where the programmer is responsible for scheduling and synchronization of all subprograms. Increasing the complexity of the global program (i.e., simulating a more complex application) reduces overall performance, because more subprograms have to be handled within the same time period. In many simulation environments | also in the area of robot simulation | some of the subprograms are independent from others, allowing them to be executed in parallel. To achieve this goal, each has to be represented as one operating system process (a task). All tasks may be distributed within a network of processors, so (1) "true" parallelism is achieved and (2) the simulation system performance is (nearly) independent of the system structure complexity. This approach could also support a heterogeneous network, where some of the tasks are instantiated on specialized nodes (e.g., transputers, graphic-workstations, etc.). In this paper, the integrated D i SCUS environment (Distributed Simulation and Control in a Unix System) is presented, which is used for distributed simulation of assembly cells. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Dongarra, J.; G.A. Geist; R. Mancheck; and V.S. Sun-daram. </author> <year> 1993. </year> <title> Integrated PVM Framework Supports Heterogeneous Network Computing. </title> <journal> Computers in Physics, </journal> <volume> 7(2) </volume> <pages> 166-175. </pages>
Reference-contexts: Each component may be instantiated as a task on a separate node of a heterogeneous network: currently Sun-3, Sun-4, Silicon Graphics and ESV 2 workstations are supported. For transparent message exchange, a public domain library (called PVM Parallel Virtual machine) is used, providing flexible configuration and convenient message routing <ref> (Dongarra 1993) </ref>. The specific functionality of a component A can be accessed by a set of commands C A . To activate a particular command C j 2 C A , a component B may send a message M i .
Reference: <author> Gauthier, D.; P. Freedman; G. Carayannis; and A.S. Mal-owany. </author> <year> 1987. </year> <title> Interprocess communication for distributed robotics. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> RA-3(6):493-504, </volume> <month> December. </month>
Reference: <author> Graves, S.; L. Ciscon; and J.D. Wise. </author> <year> 1992. </year> <title> A modular software system for distributed telerobotics. </title> <booktitle> In IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 2783-2785. </pages> <publisher> IEEE. </publisher>
Reference: <author> Guptill, R. and S. Ahmad. </author> <year> 1992. </year> <title> Multiprocessor based trajectory generation for multiple robotic devices. </title> <editor> In A. Fijani and A. Bejczy, editors, </editor> <booktitle> Parallel computation systems for robotics: algorithms and architectures, chapter 5. </booktitle> <publisher> World Scientific. </publisher>
Reference-contexts: In (Zomaya 1992), the computation of the (inverse) Jacobian is parallelized by different task-allocation and network configurations. The parallel computation of inverse dynamics is described, for instance, in (Lee 1992), and multiprocessor-based generation of robotic trajectories can be found in <ref> (Guptill and Ahmad 1992) </ref>. On the level of task parallelization, research is being performed to classify general communication principles and architectures suitable for distributed robotic software development (Gauthier et al. 1987; Ueyama et al. 1992). The second main area of research is the simulation and control of robotic systems.
Reference: <author> Kuhnapfel, U. </author> <year> 1992. </year> <title> Graphische Realzeitunterstutzung fur Fernhandhabungsvorgangen in komplexen Arbeits-umgebungen im Rahmen eines Systems zur Steuerung, Simulation und Off-Line-Programmierung. </title> <type> PhD thesis, </type> <institution> Kernforschungszentrum Karlsruhe, Germany. </institution>
Reference-contexts: A variety of commercial and academic tools support the generation phase by simulating the functionality of the assembly cell with its components (in <ref> (Kuhnapfel 1992) </ref>, an extensive overview and a comparison of most commercial robotic simulation systems is given). Usually these tools offer a library of predefined components where the user may select the appropriate ones to configure the assembly cell.
Reference: <author> Lee, C.S.G. </author> <year> 1992. </year> <title> Parallel algorithms and architectures for inverse dynamics computation. In Parallel computation systems for robotics: algorithms and architectures, </title> <editor> A. Fijani and A. Bejczy, eds., </editor> <publisher> World Scientific, </publisher> <address> chapter 1. </address>
Reference-contexts: In (Zomaya 1992), the computation of the (inverse) Jacobian is parallelized by different task-allocation and network configurations. The parallel computation of inverse dynamics is described, for instance, in <ref> (Lee 1992) </ref>, and multiprocessor-based generation of robotic trajectories can be found in (Guptill and Ahmad 1992). On the level of task parallelization, research is being performed to classify general communication principles and architectures suitable for distributed robotic software development (Gauthier et al. 1987; Ueyama et al. 1992).
Reference: <author> Mehlhaus, U. </author> <year> 1992. </year> <title> A concept for distributed robot simulation and control. </title> <booktitle> In International Symposium on Distributed Autonomous Robotic Systems, Wako, Japan, </booktitle> <pages> pages 151-158. </pages>
Reference-contexts: Due to this fact, the number of inter-process message exchanges has to be kept as small as possible. This can be achieved by equipping the components with a high degree of autonomy leading to a semantically high component interface <ref> (Mehlhaus 1992) </ref>. All the components fulfilling these requirements may be used within the D i SCUS environment (Distributed Simulation and Control in a Unix System).
Reference: <author> Miller, </author> <title> D.J. and R.C. Lennox. 1990. An object-oriented environment for robot system architectures. </title> <booktitle> In IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 1, </volume> <pages> pages 352-361. </pages> <publisher> IEEE Computer Society, IEEE Computer Society Press. </publisher>
Reference-contexts: As opposed to "traditional" applications, where a bunch of objects together form one program <ref> (e.g., Miller and Lennox 1990) </ref>, each component is mapped to one UNIX process 1 , a task. Therefore, global variables (accessible from all objects) can no longer be used, because the tasks are instantiated within a disjunctive address space.
Reference: <author> Ueyama, T.; T. Fukuda; and F. Arai. </author> <year> 1992. </year> <title> Configuration of communication structure for distributed intelligent robotic system. </title> <booktitle> In IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 807-812. </pages> <publisher> IEEE. van der Smagt, </publisher> <pages> P.P. </pages> <year> 1992. </year> <note> Simderella User's Manual. </note> <institution> University of Amsterdam, </institution> <address> Amsterdam, The Netherlands. </address>
Reference: <author> Whitcomb, L.L. and D.E. Koditschek. </author> <year> 1990. </year> <title> Robot control in a message passing environment: Theoretical questions and preliminary experiments. </title> <booktitle> In IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 2, </volume> <pages> pages 1198-1203, </pages> <publisher> IEEE. </publisher>
Reference: <author> Zomaya, A.Y. </author> <year> 1992. </year> <title> Modelling and simulation of robot manipulators: a parallel processing approach, </title> <booktitle> volume 8 of World Scientific series in robotics and automated systems. </booktitle> <publisher> World Scientific. </publisher>
Reference-contexts: Concentrating on the distribution aspect, one can find different levels of possible parallelization: on the algorithmic level, the time consuming, robotic-specific arithmetic is accelerated by using multiple processors. In <ref> (Zomaya 1992) </ref>, the computation of the (inverse) Jacobian is parallelized by different task-allocation and network configurations. The parallel computation of inverse dynamics is described, for instance, in (Lee 1992), and multiprocessor-based generation of robotic trajectories can be found in (Guptill and Ahmad 1992).
References-found: 11

