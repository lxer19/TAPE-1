URL: http://www.cs.man.ac.uk/fmethods/people/visserw/otfbdd.ps.gz
Refering-URL: http://www.cs.man.ac.uk/fmethods/LaTeX/people/willem-visser.html
Root-URL: http://www.cs.man.ac.uk
Title: Using OBDD encodings for Space Efficient State Storage during On-the- Model Checking DRAFT  
Author: Willem C. Visser 
Date: October 24, 1995  
Abstract: The use of an Ordered Binary Decision Diagram (OBDD) to store all visited states during on-the-fly model checking (or reachability analysis) is investigated. To improve the time and space efficiency a novel state compression technique is introduced. This compression technique is safe, in the sense that no two unique states will have the same compressed representation. A number of real-world (as opposed to contrived) examples are used to evaluate an experimental implementation of the OBDD state store within the SPIN validation tool. In all the examples a reduction in space is achieved when using the OBDD state store as opposed to the more traditional hash table state store. The memory and time usage when combining partial orders with the OBDD state store is also considered. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> O. Bernholtz, M. Vardi, and P. Wolper. </author> <title> An automata-theoretic approach to branching-time model checking. </title> <booktitle> In CAV '94 : 6th International Conference on Computer Aided Verification, volume 818 of Lecture Notes in Computer Science, </booktitle> <year> 1994. </year>
Reference-contexts: One possible solution to this is only to generate the part of the state graph required to validate (or invalidate) the given temporal logic requirement. This technique is commonly referred to as on-the-fly model checking, since the state graph is generated during model checking <ref> [21, 1] </ref>. On-the-fly algorithms generate the state space in a depth first manner and keeps track of all reached states to avoid doing unnecessary work. <p> Model Checking Although it has long been known that linear time temporal logic can be efficiently model checked by only generating relevant parts of a state graph [21], it is has only comparatively recently been shown that the same is true of the branching time temporal logics CTL and CTL* <ref> [1, 2] </ref>. Here we will only concentrate on efficient state storage during on-the-fly model checking and therefore not be concerned about the temporal logic being used. The behavioural model of the system to be verified will be represented as a transition system.
Reference: [2] <author> G. Bhat, R. Cleaveland, and O. Grumberg. </author> <title> Efficient on-the-fly model checking for ctl*. </title> <booktitle> In Symposium on Logic in Computer Science, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: Model Checking Although it has long been known that linear time temporal logic can be efficiently model checked by only generating relevant parts of a state graph [21], it is has only comparatively recently been shown that the same is true of the branching time temporal logics CTL and CTL* <ref> [1, 2] </ref>. Here we will only concentrate on efficient state storage during on-the-fly model checking and therefore not be concerned about the temporal logic being used. The behavioural model of the system to be verified will be represented as a transition system.
Reference: [3] <author> Randall E. Bryant. </author> <title> Symbolic Boolean Manipulation with Ordered Binary-Decision Diagrams. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(3) </volume> <pages> 293-318, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: For OBDDs, on the other hand, the size of an OBDD is heavily dependent on the ordering of the boolean variables within it. An even bigger disadvantage of OBDDs is that certain boolean functions will always have an exponentially sized OBDD regardless of the variable ordering used <ref> [3] </ref>. Integer multiplication is an example of such a function. The size of the OBDD representing the transition relation can therefore cause the symbolic model checking to become impractical. In this paper we will investigate a combination of on-the-fly model checking and OBDD encodings.
Reference: [4] <author> R.E. Bryant. </author> <title> Graph-based Algorithms for Boolean Function Manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35(8):677-691, </volume> <month> August </month> <year> 1986. </year>
Reference-contexts: Arguably the biggest advancement in reducing the limitations imposed by the state explosion problem 1 was made with the advent of symbolic model checking [16]. In symbolic model checking the transition relation is no longer represented explicitly, but rather implicitly by encoding it with ordered binary decision diagrams (OBDDs) <ref> [4] </ref>. The temporal logic formula to be checked is translated into its fixed point representation. The model checking algorithm proceeds by calculating these fixed points by performing operations on the OBDD that represents the transition relation.
Reference: [5] <author> E. Clarke, O. Grumberg, and D. </author> <title> Long. Verification tools for finite-state concurrent systems. </title> <booktitle> In </booktitle>
Reference-contexts: A so-called model checker is then used to check whether the Kripke structure satisfies (is a model of) the temporal formula specifying the required behaviour. Surveys of model checking techniques can be found in [23] and <ref> [5] </ref>. Early model checking algorithms [7] required the complete state graph be generated before-hand and kept in memory throughout the model checking process.
References-found: 5

