URL: http://www.eecs.umich.edu/~gurevich/Opera/122.ps
Refering-URL: http://www.eecs.umich.edu/~gurevich/annotated.html
Root-URL: http://www.cs.umich.edu
Email: gurevich@eecs.umich.edu  soparkar@eecs.umich.edu  wallace@eecs.umich.edu  
Title: Formalizing Database Recovery  
Author: Yuri Gurevich Nandit Soparkar Charles Wallace 
Address: USA  USA  USA  
Affiliation: University of Michigan,  University of Michigan,  University of Michigan,  
Abstract: Failure resilience is an essential requirement for database systems, yet there has been little effort to specify and verify techniques for failure recovery formally. The desire to improve performance has resulted in algorithms of considerable sophistication, yet understood by few and prone to errors. In this paper, we illustrate how the methodology of Gurevich Abstract State Machines can elucidate recovery and provide formal rigor to the design of a recovery algorithm. In a series of refinements, we model a recovery algorithm at several levels of abstraction, verifying the correctness of each model. This work suggests that our approach can be applied to more advanced recovery mechanisms. 
Abstract-found: 1
Intro-found: 1
Reference: [BGR95] <author> E. Borger, Y. Gurevich, and D. Rosenzweig. </author> <title> The bakery algorithm: yet another specification and verification. </title> <booktitle> In Borger [Bor95a], </booktitle> <pages> pages 231-243. </pages>
Reference: [BHG87] <author> P. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference: [Bor95a] <editor> E. Borger, editor. </editor> <title> Specification and Validation Methods. </title> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference: [Bor95b] <author> E. Borger. </author> <title> Why use Evolving Algebras for hardware and software engineering? In Proceedings of SOFSEM 1995, </title> <year> 1995. </year>
Reference: [BR94] <author> E. Borger and D. Rosenzweig. </author> <title> A mathematical definition of full Prolog. </title> <booktitle> Science of Computer Programming, </booktitle> <year> 1994. </year>
Reference: [Elm92] <author> A. K. Elmagarmid. </author> <title> Database Transaction Models for Advanced Applications. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference: [GR93] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference: [Gur93] <author> Y. Gurevich. </author> <title> Evolving Algebras: an attempt to discover semantics. </title> <editor> In G. Rozenberg and A. Salom-a, editors, </editor> <booktitle> Current Trends in Theoretical Computer Science, </booktitle> <pages> pages 266-292. </pages> <publisher> World Scientific, </publisher> <year> 1993. </year>
Reference: [Gur95] <author> Y. Gurevich. </author> <title> Evolving Algebras 1993: Lipari guide. </title> <booktitle> In Borger [Bor95a], </booktitle> <pages> pages 9-36. </pages>
Reference: [GW95] <author> Y. Gurevich and C. Wallace. </author> <title> Specification and verification of the undo/redo algorithm for database recovery. </title> <type> Technical Report CSE-TR-249-95, </type> <institution> University of Michigan, </institution> <year> 1995. </year>
Reference: [HM] <author> J. Huggins and R. Mani. </author> <title> The Evolving Algebra interpreter version 2.0. </title> <note> Available at ftp://ftp.eecs.umich.edu/groups/gasm/. </note>
Reference-contexts: ASMs require little overhead in terms of formal machinery, so the models are elegant, intuitive, and accessible to those unfamiliar with formal methods. Moreover, they are executable; using the ASM interpreter developed at the University of Michigan <ref> [HM] </ref>, we have implemented all the models presented in this paper. With the work described in this paper as a starting point, we are confident about the applicability of ASMs to more difficult recovery problems. ASMs provide a formal underpinning to complex database techniques that enhances reliability and fosters understanding.
Reference: [Kuo93] <author> D. Kuo. </author> <title> Model and Verification of Recovery Algorithms. </title> <type> PhD thesis, </type> <institution> University of Sydney, </institution> <year> 1993. </year>
Reference: [MHL + 92] <author> C. Mohan, D. Haderle, B. Lindsay, H. Pirahesh, and P. Schwarz. </author> <title> ARIES: A transaction recovery method supporting fine-granularity locking and partial rollbacks using write-ahead logging. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 17(1) </volume> <pages> 94-162, </pages> <year> 1992. </year>
Reference: [WGS95] <author> C. Wallace, Y. Gurevich, and N. Soparkar. </author> <title> Formalizing recovery in transaction-oriented database systems. </title> <editor> In S. Chaudhuri, A. Deshpande, and R. Krishnamurthy, editors, </editor> <booktitle> Advances in Data Management '95: Proceedings of the Seventh International Conference on Management of Data, </booktitle> <pages> pages 166-185. </pages> <publisher> Tata McGraw-Hill, </publisher> <year> 1995. </year> <title> This article was processed using the L A T E X macro package with JUCS style </title>
References-found: 14

