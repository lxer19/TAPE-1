URL: http://www.cs.dartmouth.edu/~rus/papers/agents/jiis.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~rus/papers/agents/agents.html
Root-URL: http://www.cs.dartmouth.edu
Email: rus@cs.dartmouth.edu  
Title: Transportable Information Agents  
Author: DANIELA RUS, ROBERT GRAY, AND DAVID KOTZ Editor: Ibrahim Imam 
Keyword: mobile agents, distributed information access  
Address: Hanover NH 03755  
Affiliation: Department of Computer Science, Dartmouth,  
Note: 1-24 c Kluwer Academic Publishers, Boston. Manufactured in The Netherlands.  
Abstract: Transportable agents are autonomous programs. They can move through a heterogeneous network of computers migrating from host to host under their own control. They can sense the state of the network, monitor software conditions, and interact with other agents or resources. The network-sensing tools allow our agents to adapt to the network configuration and to navigate under the control of reactive plans. In this paper we describe the design and implementation of a transportable agent system and focus on navigation tools that give our agents autonomy. We also discuss the intelligent and adaptive behavior of autonomous agents in distributed information access tasks. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J. Aslam, K. Pelekhov, and D. </author> <title> Rus, Generating, visualizing, and evaluating high-accuracy clusters for information organization, </title> <type> Technical Report PCS-TR97-319, </type> <institution> Department of Computer Science, Dartmouth, </institution> <year> 1997. </year>
Reference-contexts: The user may click on a node to view the text of the document. The blobs in the organization graphs represent topic clusters. The user may click on a cluster to view the titles of its documents. The topic-subtopic clustering is done by using the star algorithm described in <ref> [1] </ref>. The star algorithm covers the thresholded similarity graph associated with a collection of documents with dense star-shaped subgraphs.
Reference: 2. <author> A. Birrell and B. Nelson, </author> <title> Implementing remote procedure calls, </title> <journal> in ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: We draw from 3 research results in several distinct areas: operating systems, agents, information retrieval, and mobile robotics. Although little has been published on transportable agents, much work has been done concerning the general concept of remote computation. Remote Procedure Call (RPC) <ref> [2] </ref> was an early form of remote client-server processing. Falcone [4] discusses a distributed-system in which a programming language provides a remote service interface as an alternative to RPC calls. Stamos and Gifford [27] introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors. <p> Many agents, however, need more structured and flexible communication. Thus, higher-level communication protocols are provided at the agent level on top of the lower-level mechanisms. One of our higher-level mechanisms is Agent RPC [20], which is analogous to traditional RPC <ref> [2] </ref>, and allows an agent to invoke operations exported from another agent as if they were local procedures. An interface definition is compiled into client and server stubs, which are included in the client and server agents.
Reference: 3. <author> O. Etzioni and D. Weld, </author> <title> A softbot-based interface to the Internet, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 72-76, </pages> <year> 1994. </year>
Reference-contexts: In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [12], softbots by <ref> [3] </ref>, sodabots by [13], software agents by [5], personal assistants by [18, 19], and information agents by [24, 23]. We are interested in the same class of tasks as [3, 18, 19, 13]. Etzioni and Weld [3] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Agents are called knowbots by [12], softbots by [3], sodabots by [13], software agents by [5], personal assistants by [18, 19], and information agents by [24, 23]. We are interested in the same class of tasks as <ref> [3, 18, 19, 13] </ref>. Etzioni and Weld [3] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [19, 18] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. <p> Agents are called knowbots by [12], softbots by <ref> [3] </ref>, sodabots by [13], software agents by [5], personal assistants by [18, 19], and information agents by [24, 23]. We are interested in the same class of tasks as [3, 18, 19, 13]. Etzioni and Weld [3] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [19, 18] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions.
Reference: 4. <author> J. Falcone, </author> <title> A programmable interface language for heterogeneous distributed systems, </title> <journal> in ACM Transactions on Computer Systems, </journal> <volume> 5(4) </volume> <pages> 330-351, </pages> <year> 1987. </year>
Reference-contexts: Although little has been published on transportable agents, much work has been done concerning the general concept of remote computation. Remote Procedure Call (RPC) [2] was an early form of remote client-server processing. Falcone <ref> [4] </ref> discusses a distributed-system in which a programming language provides a remote service interface as an alternative to RPC calls. Stamos and Gifford [27] introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors.
Reference: 5. <author> M. Genesereth and S. Ketchpel, </author> <title> Software agents, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 48-53, </pages> <year> 1994. </year>
Reference-contexts: In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [12], softbots by [3], sodabots by [13], software agents by <ref> [5] </ref>, personal assistants by [18, 19], and information agents by [24, 23]. We are interested in the same class of tasks as [3, 18, 19, 13]. Etzioni and Weld [3] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> The corresponding server stub unpacks the arguments, invokes the appropriate sever operation, and then sends back the result. We are also developing support for the federated KQML architecture of <ref> [5] </ref>. Here, a server agent expresses its capabilities in a declarative language, and registers this description to a hierarchical system of "facilitators". A client agent expresses its request in the same declarative language, and sends the request to its local facilitator.
Reference: 6. <author> James Gosling and Henry McGilton. </author> <title> The Java language environment: A white paper. Sun Microsystems White Paper, Sun Microsystems, </title> <year> 1995. </year>
Reference-contexts: The fourth level of the Agent Tcl core is an execution environment for each supported agent language. Agent Tcl supports Tcl [29], Java <ref> [6] </ref>, and Scheme [14], so its "execution environments" are a Tcl interpeter (Tcl 7.5), a Scheme interpeter (Scheme 48), and a Java interpeter (Sun JDK 1.1).
Reference: 7. <author> R. Gray, </author> <title> Agent Tcl, </title> <booktitle> in Proceedings of the CIKM Workshop on Intelligent Agents, </booktitle> <address> Baltimore, MD, </address> <year> 1995. </year>
Reference-contexts: Rus and Subramanian [24, 23] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work <ref> [7, 8, 20, 10, 16, 25] </ref> we describe other aspects of transportable agents in Agent Tcl. 3. Agent Tcl: a Transportable Agent System Like all mobile-agent systems, the main component of Agent Tcl 4 is a server that runs one each machine.
Reference: 8. <author> R. Gray, </author> <title> Agent Tcl: A transportable agent system, </title> <booktitle> in Proceedings of the Fourth Annual Tcl/Tk Workshop, </booktitle> <address> Monterey, Ca, </address> <year> 1996. </year>
Reference-contexts: Stamos and Gifford [27] introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents [30]. Other notable transportable agent systems include Agent Tcl <ref> [8] </ref>, Odyssey 2 , Tacoma [11], Mobile Service Agents [28], IBM Aglets 3 , and Sumatra [22]. Odyssey is General Magic's Java-based successor to Telescript; Telescript itself has been withdrawn from the market. <p> Rus and Subramanian [24, 23] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work <ref> [7, 8, 20, 10, 16, 25] </ref> we describe other aspects of transportable agents in Agent Tcl. 3. Agent Tcl: a Transportable Agent System Like all mobile-agent systems, the main component of Agent Tcl 4 is a server that runs one each machine. <p> Security Security is a critical issue in any mobile-code system. Agent Tcl current protects machines from malicious agents, but does not yet protect agents from malicious machines. A full description of the security mechanisms is beyond the scope of this paper and can can be found in <ref> [8] </ref> and [9]. Here we give only a brief description.
Reference: 9. <author> R. Gray. </author> <title> Agent Tcl: A flexible and secure mobile-agent system, </title> <type> Ph.D. thesis, </type> <institution> Department of Computer Science, Dartmouth College, </institution> <year> 1997. </year>
Reference-contexts: Security Security is a critical issue in any mobile-code system. Agent Tcl current protects machines from malicious agents, but does not yet protect agents from malicious machines. A full description of the security mechanisms is beyond the scope of this paper and can can be found in [8] and <ref> [9] </ref>. Here we give only a brief description.
Reference: 10. <author> R. Gray, D. Kotz, S. Nog, D. Rus, and G. Cybenko, </author> <title> Mobile Agents for Mobile Computing, </title> <type> Technical Report PCS-TR96-285, </type> <institution> Department of Computer Science, Dartmouth College, </institution> <year> 1996. </year>
Reference-contexts: We support adaptation with an infrastructure of network-sensing modules. Agents can sense hardware conditions (for example, whether a host is connected to the network) or software conditions (for example, a specific change in a database). The systems infrastructure for information processing on mobile computers is described in detail in <ref> [10] </ref>. Transportable agents provide a convenient, efficient, and intelligent paradigm for implementing distributed applications, especially in the context of wireless computing. First, by migrating to the location of an electronic resource, an agent can access the resource locally and eliminate costly data transfers over congested networks. <p> This capability supports distributed information-processing applications on mobile computers. Third, the network-sensing capabilities enable agents to autonomously find the host computer, even when the host changes its geographical location. Our system infrastructure for using mobile agents with mobile computing is described in <ref> [10] </ref>. Fourth, the network software- and hardware-sensing capabilities permit transportable agents to navigate adaptively. Fifth, our transportable agents can communicate with each other even when they do not know their specific locations in the network. <p> Rus and Subramanian [24, 23] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work <ref> [7, 8, 20, 10, 16, 25] </ref> we describe other aspects of transportable agents in Agent Tcl. 3. Agent Tcl: a Transportable Agent System Like all mobile-agent systems, the main component of Agent Tcl 4 is a server that runs one each machine. <p> If the site crashes while the agent is there, the agent dies. A sample session from running this information-retrieval agent is shown in Figure 8. We have extended this experiment using the mobile computer-support functions described in Section 4.2 and <ref> [10] </ref> as follows. We started the information access agent on a laptop computer called Bond, and the agent immediately jumped off the laptop to interact with Smart agents throughout the network.
Reference: 11. <author> D. Johansen, R. van Renesse, and F. Schneider, </author> <title> Operating system support for mobile agents, </title> <booktitle> in Proceedings of the 5th IEEE Workshop on Hot Topics in Operating Systems, </booktitle> <year> 1995. </year>
Reference-contexts: The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents [30]. Other notable transportable agent systems include Agent Tcl [8], Odyssey 2 , Tacoma <ref> [11] </ref>, Mobile Service Agents [28], IBM Aglets 3 , and Sumatra [22]. Odyssey is General Magic's Java-based successor to Telescript; Telescript itself has been withdrawn from the market. <p> The server will (but does not yet) provide a nonvolatile store so that agents can back up their internal state as desired. The server will restore the agents from the nonvolatile store in the event of machine failure. As in Tacoma <ref> [11] </ref>, all other services are provided by agents. These services, some of which are shown at right in Figure 1, include network sensing, location-independent addressing, and high-level communication.
Reference: 12. <author> R. Kahn and V. Cerf, </author> <title> The World of Knowbots, report to the Corporation for National Research Initiative, </title> <address> Arlington, VA, </address> <year> 1988. </year>
Reference-contexts: Previous Work Kahn's proposal <ref> [12] </ref> about architectures for retrieving information from electronic repositories was the first recognition of the utility of software agents for information processing. It provides context for the issues discussed in this paper. We draw from 3 research results in several distinct areas: operating systems, agents, information retrieval, and mobile robotics. <p> In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by <ref> [12] </ref>, softbots by [3], sodabots by [13], software agents by [5], personal assistants by [18, 19], and information agents by [24, 23]. We are interested in the same class of tasks as [3, 18, 19, 13].
Reference: 13. <author> H. Kautz, B. Selman, and M. Coen, </author> <title> Bottom-up design of software agents, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 143-145, </pages> <year> 1994. </year>
Reference-contexts: In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [12], softbots by [3], sodabots by <ref> [13] </ref>, software agents by [5], personal assistants by [18, 19], and information agents by [24, 23]. We are interested in the same class of tasks as [3, 18, 19, 13]. Etzioni and Weld [3] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Agents are called knowbots by [12], softbots by [3], sodabots by [13], software agents by [5], personal assistants by [18, 19], and information agents by [24, 23]. We are interested in the same class of tasks as <ref> [3, 18, 19, 13] </ref>. Etzioni and Weld [3] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [19, 18] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions.
Reference: 14. <author> Richard Kelsey and Jonathan Rees. </author> <title> A tractable Scheme implementation. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 7(4), </volume> <year> 1995. </year>
Reference-contexts: The fourth level of the Agent Tcl core is an execution environment for each supported agent language. Agent Tcl supports Tcl [29], Java [6], and Scheme <ref> [14] </ref>, so its "execution environments" are a Tcl interpeter (Tcl 7.5), a Scheme interpeter (Scheme 48), and a Java interpeter (Sun JDK 1.1).
Reference: 15. <author> K. Kotay and D. Kotz, </author> <title> Transportable agents, </title> <booktitle> in Workshop on Intelligent Information Agents, </booktitle> <month> December </month> <year> 1994. </year> <month> 24 </month>
Reference: 16. <author> D. Kotz, R. Gray, and D. </author> <title> Rus, Transportable Agents Support Worldwide Applications, </title> <booktitle> in Proceedings of SIGOPS96, </booktitle> <year> 1996. </year>
Reference-contexts: Rus and Subramanian [24, 23] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work <ref> [7, 8, 20, 10, 16, 25] </ref> we describe other aspects of transportable agents in Agent Tcl. 3. Agent Tcl: a Transportable Agent System Like all mobile-agent systems, the main component of Agent Tcl 4 is a server that runs one each machine.
Reference: 17. <author> Jacob Y. Levy and John K. Ousterhout. </author> <title> Safe Tcl toolkit for electronic meeting places. </title> <booktitle> In Proceedings of the First USENIX Workshop on Electronic Commerce, </booktitle> <pages> pages 133-135, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: However, a separate enforcement module for each language minimizes the modifications that need to be made to the standard Tcl and Scheme interpreters, which has made the prototyping phase of the Agent Tcl project much easier. For Tcl, the enforcement module is based around Safe Tcl <ref> [17] </ref>, which executes a Tcl script in two interpreters, an untrusted "user" interpreter and a trusted "kernel" interpreter. Dangerous commands, such as open and write, are removed from the user interpreter and replaced with links to secure versions of those commands in the trusted interpreter.
Reference: 18. <author> P. Maes, </author> <title> Agents that reduce work and information overload, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 31-40, </pages> <year> 1994. </year>
Reference-contexts: In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [12], softbots by [3], sodabots by [13], software agents by [5], personal assistants by <ref> [18, 19] </ref>, and information agents by [24, 23]. We are interested in the same class of tasks as [3, 18, 19, 13]. Etzioni and Weld [3] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Agents are called knowbots by [12], softbots by [3], sodabots by [13], software agents by [5], personal assistants by [18, 19], and information agents by [24, 23]. We are interested in the same class of tasks as <ref> [3, 18, 19, 13] </ref>. Etzioni and Weld [3] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [19, 18] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. <p> We are interested in the same class of tasks as [3, 18, 19, 13]. Etzioni and Weld [3] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes <ref> [19, 18] </ref> study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. Rus and Subramanian [24, 23] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition.
Reference: 19. <author> T. Mitchell, R. Caruana, D. Freitag, J. McDermott, and D. Zabowski, </author> <title> Experience with a learning personal assistant, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 81-91, </pages> <year> 1994. </year>
Reference-contexts: In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [12], softbots by [3], sodabots by [13], software agents by [5], personal assistants by <ref> [18, 19] </ref>, and information agents by [24, 23]. We are interested in the same class of tasks as [3, 18, 19, 13]. Etzioni and Weld [3] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Agents are called knowbots by [12], softbots by [3], sodabots by [13], software agents by [5], personal assistants by [18, 19], and information agents by [24, 23]. We are interested in the same class of tasks as <ref> [3, 18, 19, 13] </ref>. Etzioni and Weld [3] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [19, 18] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. <p> We are interested in the same class of tasks as [3, 18, 19, 13]. Etzioni and Weld [3] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes <ref> [19, 18] </ref> study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. Rus and Subramanian [24, 23] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition.
Reference: 20. <author> S. Nog, S. Chawala, and D. Kotz, </author> <title> An RPC mechanism for transportable agents, </title> <type> Technical Report PCS-TR96-280, </type> <institution> Department of Computer Science, Dartmouth College, </institution> <year> 1996. </year>
Reference-contexts: Rus and Subramanian [24, 23] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work <ref> [7, 8, 20, 10, 16, 25] </ref> we describe other aspects of transportable agents in Agent Tcl. 3. Agent Tcl: a Transportable Agent System Like all mobile-agent systems, the main component of Agent Tcl 4 is a server that runs one each machine. <p> Many agents, however, need more structured and flexible communication. Thus, higher-level communication protocols are provided at the agent level on top of the lower-level mechanisms. One of our higher-level mechanisms is Agent RPC <ref> [20] </ref>, which is analogous to traditional RPC [2], and allows an agent to invoke operations exported from another agent as if they were local procedures. An interface definition is compiled into client and server stubs, which are included in the client and server agents.
Reference: 21. <author> J. Ousterhout, </author> <title> Tcl and the Tk Toolkit, </title> <publisher> in Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1994. </year>
Reference: 22. <author> M. Ranganathan, A. Acharya, S .Sharma, and J .Saltz. </author> <title> Network-aware mobile programs. </title> <booktitle> In Proceedings of the 1997 USENIX Technical Conference, </booktitle> <pages> pages 91-104, </pages> <year> 1997. </year>
Reference-contexts: The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents [30]. Other notable transportable agent systems include Agent Tcl [8], Odyssey 2 , Tacoma [11], Mobile Service Agents [28], IBM Aglets 3 , and Sumatra <ref> [22] </ref>. Odyssey is General Magic's Java-based successor to Telescript; Telescript itself has been withdrawn from the market.
Reference: 23. <author> D. Rus and D. Subramanian, </author> <title> Customizing Multimedia Information Access, </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 7, no. 4, </volume> <year> 1995. </year>
Reference-contexts: In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [12], softbots by [3], sodabots by [13], software agents by [5], personal assistants by [18, 19], and information agents by <ref> [24, 23] </ref>. We are interested in the same class of tasks as [3, 18, 19, 13]. Etzioni and Weld [3] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Etzioni and Weld [3] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [19, 18] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. Rus and Subramanian <ref> [24, 23] </ref> propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work [7, 8, 20, 10, 16, 25] we describe other aspects of transportable agents in Agent Tcl. 3.
Reference: 24. <author> D. Rus and D. Subramanian, </author> <title> Customizing Information Access, </title> <journal> ACM Transactions on Information Systems, </journal> <volume> volume 15, number 1, </volume> <pages> pp. 67-101, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [12], softbots by [3], sodabots by [13], software agents by [5], personal assistants by [18, 19], and information agents by <ref> [24, 23] </ref>. We are interested in the same class of tasks as [3, 18, 19, 13]. Etzioni and Weld [3] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Etzioni and Weld [3] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [19, 18] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. Rus and Subramanian <ref> [24, 23] </ref> propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work [7, 8, 20, 10, 16, 25] we describe other aspects of transportable agents in Agent Tcl. 3.
Reference: 25. <author> D. Rus, R. Gray, and D. Kotz, </author> <title> Transportable Information Agents, </title> <booktitle> in Proceedings of the 1997 International Conference on Autonomous Agents, </booktitle> <institution> Marina del Ray, California, </institution> <year> 1997. </year>
Reference-contexts: Rus and Subramanian [24, 23] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work <ref> [7, 8, 20, 10, 16, 25] </ref> we describe other aspects of transportable agents in Agent Tcl. 3. Agent Tcl: a Transportable Agent System Like all mobile-agent systems, the main component of Agent Tcl 4 is a server that runs one each machine.
Reference: 26. <author> G. Salton. </author> <title> The Smart document retrieval project. </title> <booktitle> In Proceedings of the Fourteenth Annual International ACM/SIGIR Conference on Research and Development in Information Retrieval, </booktitle> <pages> pages 356-358, </pages> <year> 1991. </year>
Reference-contexts: The network location of the various agents is shown on the left side. file-watch looks at the size of the file and compares the content of the file against a query or a previous version of the file using information retrieval techniques <ref> [26] </ref>. 5.1. Virtual Yellow Pages The virtual yellow pages are a distributed database of service locations maintained by a hierarchical set of navigation agents. Services register with the Yellow Page Agents that are scattered throughout the system (Figure 5) and manage the yellow pages. <p> This caching optimization would make the two respective execution times nearly identical. 6.2. Distributed Information Retrieval with Transportable Agents We have built information-access agents that interface with the Smart information retrieval system. The Smart system is a successful statistical information-retrieval system <ref> [26] </ref> that uses the vector-space model to measure the textual similarity between documents. The idea of the vector-space model is that each word that occurs in a collection defines an axis in the space of all words in the collection.
Reference: 27. <author> J. Stamos and D. Gifford, </author> <title> Remote execution, </title> <journal> in ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(4) </volume> <pages> 537-565, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Remote Procedure Call (RPC) [2] was an early form of remote client-server processing. Falcone [4] discusses a distributed-system in which a programming language provides a remote service interface as an alternative to RPC calls. Stamos and Gifford <ref> [27] </ref> introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents [30].
Reference: 28. <author> B. Tomsen, L. Leth, F. Knabe, and P-Y. Chevalier, </author> <title> Mobile agents, </title> <type> ECRC external report, </type> <institution> European Computer-Industry Research Center, </institution> <year> 1995. </year>
Reference-contexts: The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents [30]. Other notable transportable agent systems include Agent Tcl [8], Odyssey 2 , Tacoma [11], Mobile Service Agents <ref> [28] </ref>, IBM Aglets 3 , and Sumatra [22]. Odyssey is General Magic's Java-based successor to Telescript; Telescript itself has been withdrawn from the market.
Reference: 29. <author> Brent B. Welch. </author> <title> Practical Programming in Tcl and Tk. </title> <publisher> Prentice-Hall, </publisher> <address> New Jersey, </address> <year> 1995. </year>
Reference-contexts: The fourth level of the Agent Tcl core is an execution environment for each supported agent language. Agent Tcl supports Tcl <ref> [29] </ref>, Java [6], and Scheme [14], so its "execution environments" are a Tcl interpeter (Tcl 7.5), a Scheme interpeter (Scheme 48), and a Java interpeter (Sun JDK 1.1).
Reference: 30. <author> J. E. White, </author> <title> Telescript technology: The foundation for the electronic marketplace, General Magic White Paper, General Magic, </title> <publisher> Inc., </publisher> <year> 1994. </year> <title> 25 top part of the figure. The agent travels to a proxy site where it spawns children that search in parallel several sites. When all the children agents are back with the retrieved results, the agent fuses their data and returns to the home site. Here, it displays the results as a ranked list of titles, a topic organization graph, and a graph that shows the inter-document similarities. </title> <type> 26 </type>
Reference-contexts: Stamos and Gifford [27] introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents <ref> [30] </ref>. Other notable transportable agent systems include Agent Tcl [8], Odyssey 2 , Tacoma [11], Mobile Service Agents [28], IBM Aglets 3 , and Sumatra [22]. Odyssey is General Magic's Java-based successor to Telescript; Telescript itself has been withdrawn from the market.
References-found: 30

