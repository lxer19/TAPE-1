URL: http://www.cs.colorado.edu/~markm/papers/arcadia.ps.gz
Refering-URL: http://www.cs.colorado.edu/~markm/listpub.html
Root-URL: http://www.cs.colorado.edu
Title: Q: A Multi-lingual Interprocess Communications System for Software Environment Implementation  
Author: Mark J. Maybee Dennis H. Heimbigner David L. Levine Leon J. Osterweil 
Abstract: This paper describes the motivation for, design and implementation of, and experience with, Q, a set of matched C and Ada interfaces designed to support interprocess communication between these two languages. Q's interfaces are adapted from the remote procedure call interface model. Certain of these adaptations were necessitated by the lack of key C language features in the Ada language. Additional features were inspired by language features present in Ada that are not commonly found in C implementations. Q defines an interprocess communication model common to both languages, and a type space common to both languages. Q has evolved and been improved as a consequence of its application and use. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Accetta, R. Baron, D. Golub, R. Rashid, A. Tevanian, and M. Young. </author> <title> Mach: A new kernel foundation for unix development. </title> <booktitle> In Procedings of the Summer 1986 USENIX Technical Conference and Exhibition, </booktitle> <month> June </month> <year> 1986. </year>
Reference-contexts: Matchmaker When supported by the capability-based interpro-cess communications found in the Mach kernel <ref> [1] </ref> Matchmaker provides a heterogeneous, distributed, object-oriented programming facility. Currently the Mach/Matchmaker system supports the generation of interfaces between C, Common Lisp, Ada, and Page 2 Pascal. The Matchmaker language defines the type model within which the supported languages may exchange data objects.
Reference: [2] <author> A. D. Birrell and B. J. Nelson. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: in the interprocess communication model, * a specification of the current Q software imple mentation, and * the limitations of the scope of the Q activities and the long term goals of the work. 2 Related Work Our model of interprocess communication is derived from the remote procedure call model <ref> [2] </ref>. We have adapted this model for use in a multi-typespace environment.
Reference: [3] <author> Michael J. Carey, David J. DeWitt, Daniel Frank, Goetz Graefe, M. Muralikrishna, Joel E. Richardson, and Eugene J. Shekita. </author> <title> The architecture of the EXODUS extensible DBMS. </title> <booktitle> In International Workshop on Object-Oriented Database Systems, </booktitle> <pages> pages 52-65, </pages> <year> 1986. </year>
Reference-contexts: Triton relies on a client/server split between the application program and its object manager. It is implemented atop the EXODUS <ref> [3] </ref> database system. Chiron is a user interface development system (UIDS) supporting the user interface needs of the Arcadia project. It emphasizes the value of separating application programs from any display and user interface processes by means of a client/server split.
Reference: [4] <author> Jon Crowcroft, Ian Wakeman, Zheng Wang, </author> <title> and Dejan Sirovica. </title> <journal> Is layering harmful? IEEE Network Magazine, </journal> <volume> 6(1), </volume> <month> January </month> <year> 1992. </year> <title> The missing figures appear in a correction, </title> <type> 6(2), </type> <month> March </month> <year> 1992. </year>
Reference-contexts: Packet sizes that are integral multiples of 4 Kb exhibit anomalously poor performance with XDR/RPC using TCP because of implementation deficiencies <ref> [4] </ref>. The slight additional message overhead of QDR/QPC shifts the anomalies to somewhat smaller packet sizes. ronments being developed by Arcadia. As the needs of these environments evolve, Q will evolve to provide the necessary support.
Reference: [5] <author> Dennis Heimbigner. </author> <title> Triton Reference Manual, </title> <month> 1 July </month> <year> 1990. </year>
Reference-contexts: It is supporting the interprocess communication needs of the Arcadia research consortium's [18] Triton <ref> [5] </ref> and Chiron [22, 9] projects. Triton is a highly extensible and flexible object management system being developed to complement the PGRAPHITE [19], PIC [21], and SLI [20] systems for supporting Arcadia persistence and shared data management requirements.
Reference: [6] <author> M. Herlihy and B. H. Liskov. </author> <title> A value transmission method for abstract data types. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 4(4) </volume> <pages> 527-551, </pages> <month> October </month> <year> 1982. </year>
Reference-contexts: We have adapted this model for use in a multi-typespace environment. Similar work has been done at Carnegie Mellon University with the Matchmaker language [8], designed to support the construction of multilingual interprocess communication interfaces, at the Massachusetts Institute of Technology with the Mercury project <ref> [11, 6] </ref>, which uses a value transmission method for abstract data types, at the University of Maryland with the Polylith Software Bus [12], a system for interconnecting mixed-language software components for execution in a heterogeneous environment, and by Isis Distributed Systems, with a platform for distributed and fault-tolerant computing [7].
Reference: [7] <institution> Isis Distributed Systems, Inc. </institution> <note> The Isis Distributed Toolkit Version 3.0 User Reference Manual, </note> <year> 1992. </year>
Reference-contexts: project [11, 6], which uses a value transmission method for abstract data types, at the University of Maryland with the Polylith Software Bus [12], a system for interconnecting mixed-language software components for execution in a heterogeneous environment, and by Isis Distributed Systems, with a platform for distributed and fault-tolerant computing <ref> [7] </ref>. Matchmaker When supported by the capability-based interpro-cess communications found in the Mach kernel [1] Matchmaker provides a heterogeneous, distributed, object-oriented programming facility. Currently the Mach/Matchmaker system supports the generation of interfaces between C, Common Lisp, Ada, and Page 2 Pascal.
Reference: [8] <author> Michael B. Jones and Richard F. Rashid. </author> <title> Mach and matchmaker: Kernel and language support for object-oriented distributed systems. </title> <type> Technical Report CMU-CS-87-150, </type> <institution> Carnegie Mellon University, </institution> <month> September </month> <year> 1986. </year>
Reference-contexts: We have adapted this model for use in a multi-typespace environment. Similar work has been done at Carnegie Mellon University with the Matchmaker language <ref> [8] </ref>, designed to support the construction of multilingual interprocess communication interfaces, at the Massachusetts Institute of Technology with the Mercury project [11, 6], which uses a value transmission method for abstract data types, at the University of Maryland with the Polylith Software Bus [12], a system for interconnecting mixed-language software components
Reference: [9] <author> Rudolf K. Keller, Mary Cameron, Richard N. Taylor, and Dennis B. Troup. </author> <title> User interface development and software environments: </title> <booktitle> The Chiron-1 system. In Proceedings of the Thirteenth International Conference on Software Engineering, </booktitle> <pages> pages 208-218, </pages> <address> Austin, TX, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: It is supporting the interprocess communication needs of the Arcadia research consortium's [18] Triton [5] and Chiron <ref> [22, 9] </ref> projects. Triton is a highly extensible and flexible object management system being developed to complement the PGRAPHITE [19], PIC [21], and SLI [20] systems for supporting Arcadia persistence and shared data management requirements. Triton relies on a client/server split between the application program and its object manager.
Reference: [10] <author> S. J. Le*er, M. K. McKusick, M. J. Karels, and J. S. Quarterman. </author> <title> The Design and Implementation of the 4.3BSD UNIX Operating System. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1989. </year>
Reference-contexts: The implementation of RPC is also designed for use with C, utilizing standard C call semantics, and is restricted in its implementation to versions of Unix with IPC sockets available <ref> [10] </ref>. The Q interfaces, QDR and QPC, provide support for the transfer of objects built from Ada and C base types, between programs written in C and Ada. The Q system architecture is shown in Figure 3. The discussion presented here will focus on the Ada implementation.
Reference: [11] <author> B. H. Liskov, T. Bloom, D. Gifford, R. Schei-fler, and W. Weihl. </author> <title> Communication in the mercury system. </title> <booktitle> In Proceedings of the 21st Annual Hawaii Conference on System Sciences, </booktitle> <pages> pages 178-187. </pages> <publisher> IEEE, </publisher> <month> January </month> <year> 1988. </year>
Reference-contexts: We have adapted this model for use in a multi-typespace environment. Similar work has been done at Carnegie Mellon University with the Matchmaker language [8], designed to support the construction of multilingual interprocess communication interfaces, at the Massachusetts Institute of Technology with the Mercury project <ref> [11, 6] </ref>, which uses a value transmission method for abstract data types, at the University of Maryland with the Polylith Software Bus [12], a system for interconnecting mixed-language software components for execution in a heterogeneous environment, and by Isis Distributed Systems, with a platform for distributed and fault-tolerant computing [7].
Reference: [12] <author> James M. Purtilo. </author> <title> The polylith software bus. </title> <type> Technical Report UMIACS-TR-90-65, </type> <institution> University of Maryland, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: Carnegie Mellon University with the Matchmaker language [8], designed to support the construction of multilingual interprocess communication interfaces, at the Massachusetts Institute of Technology with the Mercury project [11, 6], which uses a value transmission method for abstract data types, at the University of Maryland with the Polylith Software Bus <ref> [12] </ref>, a system for interconnecting mixed-language software components for execution in a heterogeneous environment, and by Isis Distributed Systems, with a platform for distributed and fault-tolerant computing [7]. Matchmaker When supported by the capability-based interpro-cess communications found in the Mach kernel [1] Matchmaker provides a heterogeneous, distributed, object-oriented programming facility.
Reference: [13] <author> Joel E. Richardson and Michael J. Carey. </author> <title> Programming constructs for database system implementation in EXODUS. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference, </booktitle> <year> 1987. </year>
Reference-contexts: Q provides such an abstraction and fits well into the Triton model. Triton object management capabilities are serverized such that any process within the environment can request services asynchronously as a client. The Triton server is written in the E programming language <ref> [13] </ref>, utilizing the EXODUS database toolkit system. The E programming language is an extension to the C++ programming language [15], which is in turn an object-oriented extension to C. Q supports interoperability between Ada, C++, and E programs. The bulk of Triton's clients are written in Ada.
Reference: [14] <author> Xiping Song, Mark Maybee, Lee Osterweil, and Dennis Heimbigner. </author> <title> REBUS:a requirement specification process program. </title> <type> Technical Report UCI-90-17, </type> <institution> Department of Information and Computer Science, University of California, </institution> <month> April </month> <year> 1990. </year> <pages> Page 12 </pages>
Reference-contexts: Distribution also facilitates this. Motivation for Q Distributed systems must often pass typed objects between separate subcomponents written in different languages. For example, the Rebus system <ref> [14] </ref> in the Arcadia environment project [18] uses an Ada front end to interact with the user, and a C back end to provide database services.
Reference: [15] <author> B. Stroustrup. </author> <title> The C++ Programming Lan--guage. </title> <publisher> Addison-Wesley, </publisher> <address> Menlo Park, California, </address> <year> 1986. </year>
Reference-contexts: Triton object management capabilities are serverized such that any process within the environment can request services asynchronously as a client. The Triton server is written in the E programming language [13], utilizing the EXODUS database toolkit system. The E programming language is an extension to the C++ programming language <ref> [15] </ref>, which is in turn an object-oriented extension to C. Q supports interoperability between Ada, C++, and E programs. The bulk of Triton's clients are written in Ada. A client process passes data to Triton by encoding and decoding the data using the QDR data representation scheme.
Reference: [16] <author> Sun Microsystems. XDR: </author> <title> External data representation standard. </title> <type> Technical Report RFC-1014, </type> <institution> Sun Microsystems, Inc., </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: The SunOS 1 inter-process communications capability | XDR/RPC 2 | provides the ability to ex 1 SunOS is a network UNIX operating system developed by Sun Microsystems 2 eXternal Data Representation/Remote Procedure Call Page 1 change meaningfully typed data values between two processes <ref> [17, 16] </ref>. This model supports a procedure call abstraction of inter-process communication, allowing one process to make a procedure call to another process | even across machine boundaries and independent of machine architectures | and have XDR/RPC handle the details of inter-process communication. <p> This frees any service tasks to respond to incoming service requests. Where previously a peer process was required to alternate between client and service processing, it is now able to interleave such tasks arbitrarily. 6 The Implementation The communication semantics for Q were abstracted from Sun's XDR standard <ref> [16] </ref> and RPC protocol [17]. Specifically, the model is derived from | and implemented on top of | version 4.0 of Sun XDR/RPC. The implementation of XDR is designed for use with the C programming language, offering support for the standard C base data types.
Reference: [17] <author> Sun Microsystems. </author> <title> RPC: Remote procedure call protocol specification. </title> <type> Technical Report RFC-1057, </type> <institution> Sun Microsystems, Inc., </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: The SunOS 1 inter-process communications capability | XDR/RPC 2 | provides the ability to ex 1 SunOS is a network UNIX operating system developed by Sun Microsystems 2 eXternal Data Representation/Remote Procedure Call Page 1 change meaningfully typed data values between two processes <ref> [17, 16] </ref>. This model supports a procedure call abstraction of inter-process communication, allowing one process to make a procedure call to another process | even across machine boundaries and independent of machine architectures | and have XDR/RPC handle the details of inter-process communication. <p> Where previously a peer process was required to alternate between client and service processing, it is now able to interleave such tasks arbitrarily. 6 The Implementation The communication semantics for Q were abstracted from Sun's XDR standard [16] and RPC protocol <ref> [17] </ref>. Specifically, the model is derived from | and implemented on top of | version 4.0 of Sun XDR/RPC. The implementation of XDR is designed for use with the C programming language, offering support for the standard C base data types.
Reference: [18] <author> Richard N. Taylor, Frank C. Belz, Lori A. Clarke, Leon Osterweil, Richard W. Selby, Jack C. Wileden, Alexander L. Wolf, and Michal Young. </author> <title> Foundations for the Arcadia environment architecture. </title> <booktitle> In Proceedings of ACM SIG-SOFT '88: Third Symposium on Software Development Environments, </booktitle> <pages> pages 1-13, </pages> <address> Boston, </address> <month> November </month> <year> 1988. </year> <note> Appeared as SIGPLAN Notices 24 (2) and Software Engineering Notes 13 (5). </note>
Reference-contexts: Distribution also facilitates this. Motivation for Q Distributed systems must often pass typed objects between separate subcomponents written in different languages. For example, the Rebus system [14] in the Arcadia environment project <ref> [18] </ref> uses an Ada front end to interact with the user, and a C back end to provide database services. <p> It is supporting the interprocess communication needs of the Arcadia research consortium's <ref> [18] </ref> Triton [5] and Chiron [22, 9] projects. Triton is a highly extensible and flexible object management system being developed to complement the PGRAPHITE [19], PIC [21], and SLI [20] systems for supporting Arcadia persistence and shared data management requirements.
Reference: [19] <author> Jack C. Wileden, Alexander L. Wolf, Charles D. Fisher, and Peri L. Tarr. PGRAPHITE: </author> <title> An experiment in persistent typed object management. </title> <booktitle> In Proceedings of ACM SIGSOFT '88: Third Symposium on Software Development Environments, </booktitle> <pages> pages 130-142, </pages> <address> Boston, </address> <month> November </month> <year> 1988. </year>
Reference-contexts: It is supporting the interprocess communication needs of the Arcadia research consortium's [18] Triton [5] and Chiron [22, 9] projects. Triton is a highly extensible and flexible object management system being developed to complement the PGRAPHITE <ref> [19] </ref>, PIC [21], and SLI [20] systems for supporting Arcadia persistence and shared data management requirements. Triton relies on a client/server split between the application program and its object manager. It is implemented atop the EXODUS [3] database system.
Reference: [20] <author> Jack C. Wileden, Alexander L. Wolf, William R. Rosenblatt, and Peri L. Tarr. </author> <title> Specification level interoperability. </title> <booktitle> In Proceedings of the Twelfth International Conference on Software Engineering, </booktitle> <address> Nice, </address> <month> March </month> <year> 1990. </year>
Reference-contexts: It is supporting the interprocess communication needs of the Arcadia research consortium's [18] Triton [5] and Chiron [22, 9] projects. Triton is a highly extensible and flexible object management system being developed to complement the PGRAPHITE [19], PIC [21], and SLI <ref> [20] </ref> systems for supporting Arcadia persistence and shared data management requirements. Triton relies on a client/server split between the application program and its object manager. It is implemented atop the EXODUS [3] database system.
Reference: [21] <author> Alexander L. Wolf, Lori A. Clarke, and Jack C. Wileden. </author> <title> Ada-based support for programming-in-the-large. </title> <journal> IEEE Software, </journal> <volume> 2(2) </volume> <pages> 58-71, </pages> <month> March </month> <year> 1985. </year>
Reference-contexts: It is supporting the interprocess communication needs of the Arcadia research consortium's [18] Triton [5] and Chiron [22, 9] projects. Triton is a highly extensible and flexible object management system being developed to complement the PGRAPHITE [19], PIC <ref> [21] </ref>, and SLI [20] systems for supporting Arcadia persistence and shared data management requirements. Triton relies on a client/server split between the application program and its object manager. It is implemented atop the EXODUS [3] database system.
Reference: [22] <author> Michal Young, Richard N. Taylor, and Dennis B. Troup. </author> <title> Software environment architectures and user interface facilities. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14(6) </volume> <pages> 697-708, </pages> <month> June </month> <year> 1988. </year> <pages> Page 13 </pages>
Reference-contexts: It is supporting the interprocess communication needs of the Arcadia research consortium's [18] Triton [5] and Chiron <ref> [22, 9] </ref> projects. Triton is a highly extensible and flexible object management system being developed to complement the PGRAPHITE [19], PIC [21], and SLI [20] systems for supporting Arcadia persistence and shared data management requirements. Triton relies on a client/server split between the application program and its object manager.
References-found: 22

