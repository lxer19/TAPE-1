URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1995/UM-CS-1995-016.ps
Refering-URL: http://laser.cs.umass.edu/abstracts/95-016.html
Root-URL: 
Email: chamilla@cs.umass.edu  
Title: An Exploratory Study of Program Metrics as Predictors of Reachability Analysis Performance  
Author: Albert Timothy Chamillard 
Address: Amherst, MA 01003  
Affiliation: Department of Computer Science University of Massachusetts, Amherst  
Note: email:  
Abstract: CMPSCI Technical Report 95-16 February 24, 1995 Abstract This paper presents the results of an exploratory experiment investigating the use of program metrics to predict reachability graph size, reachability graph generation time, and deadlock check times for concurrent Ada programs. In general, reachability analysis is intractable, so it is important to be able to predict whether or not this analysis technique is feasible given a specific program to be analyzed. We briefly introduce the program representations used to perform the deadlock reachability analysis and describe a set of metrics on those representations. We present empirical results that quantify the value of each metric as a predictor of the reachability graph size and the practicality of deadlock reachability analysis. 
Abstract-found: 1
Intro-found: 1
Reference: [Coh94] <author> Paul Cohen. </author> <note> Empirical Methods for Computer Science . To be published. </note>
Reference-contexts: We also utilize multiple regression techniques to generate standardized regression coefficients, which we then use to estimate the relative strengths of each metric as a predictor of the measurement values. Finally, we develop several causal models using the w heuristic described in <ref> [Coh94] </ref>. Parameter Estimation Most of the metric and measurement values for the experiment are constant for a given program; in other words, the values will be exactly the same every time they are calculated for that program. <p> Randomization Tests We know that we can use randomization tests, in conjunction with correlation, to test the hypothesis that two samples are dependent <ref> [Coh94] </ref>. We can therefore select a metric and a measurement, perform a randomization test, and determine the probability of calculating the given correlation under the null hypothesis that the metric and the measurement are independent. <p> Because we already understand the causal ordering in our model, our main effort is expended on quantifying the causal effects in the model to build a set of structural equations <ref> [Coh94] </ref> for each of the models. We loosely follow Cohen's approach using the w statistic, which measures the proportion of indirect effect of one variate on another, though we have made some methodological changes.
Reference: [DCN94] <author> Matthew B. Dwyer, Lori A. Clarke, and Kari A. Nies. </author> <title> A compact petri net representation for concurrent programs. </title> <type> Technical Report TR 94-46, </type> <institution> University of Massachusetts, Amherst, </institution> <year> 1994. </year>
Reference-contexts: M0 is a list of all the places in the net that are initially marked. Petri net modeling appears to be a valuable tool for modeling concurrent software [SC88]; a compact Petri net representation can be generated from the TIGs of a program <ref> [DCN94] </ref>. To generate the Petri net, we build a place for each node in the set of TIGs of a program.
Reference: [DS92] <author> Srinivasarao Damerla and Sol M. Shatz. </author> <title> Software complexity and Ada rendezvous: Metrics based on nondeterminism. </title> <journal> Journal of Systems and Software , 17(2) </journal> <pages> 119-127, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: One of the characteristics of concurrent Ada programs that makes them particularly difficult to analyze is nondeterminism. None of the metrics above try to account for nondeterminism in the program being analyzed. Damerla and Shatz <ref> [DS92] </ref> propose several metrics that we include in our experiment; the metrics are intended to quantify the nondeterminism in Ada programs. a is used to account for the nondeterminism in entries when several tasks can make entry calls on those entries (entry nondeterminism). a is given by ( )Calls i e
Reference: [LC89] <author> Douglas L. Long and Lori A. Clarke. </author> <title> Task interaction graphs for concurrency analysis. </title> <booktitle> In Proceedings of the 11th International Conference on Software Engineering , pages 44-52, </booktitle> <address> Pittsburgh PA, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: Finally, we use the Petri net to generate a reachability graph to represent an estimate of all states the program can enter when started in the initial program state. Each of these representations is described briefly below. Task Interaction Graphs Long and Clarke <ref> [LC89] </ref> suggest using Task Interaction Graphs (TIGs) as a concise program representation that retains interaction information. The TIG consists of a finite set of nodes, N = -n i -, and a finite set of directed edges, E = -e i -.
Reference: [LT93] <author> David L. Levine and Richard N. Taylor. </author> <title> Metric-driven reengineering for static concurrency analysis. </title> <booktitle> In Proceedings of the 1993 International Symposium on Software Testing and Analysis (ISSTA) , pages 40-50, </booktitle> <address> Cambridge MA, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: The one is subtracted because a select with only one call on an entry within the select is deterministic. g is used to account for total nondeterminism ( g a b= + ). 5 Levine and Taylor <ref> [LT93] </ref> propose a metric similar to g called C nd to account for nondeterminism; the difference is that C nd includes entry nondeterminism for all entries (as opposed to only those not in selects) and counts the number of select alternatives with one or more callers when calculating select nondeterminism.
Reference: [Pet77] <author> James L. Peterson. </author> <title> Petri nets. </title> <journal> Computing Surveys , 9(3) </journal> <pages> 223-252, </pages> <month> September </month> <year> 1977. </year>
Reference-contexts: begin if BranchCond then accepter.entry1; else accepter.entry2; end if; end caller1; task body caller2 is begin accepter.entry2; end caller2; begin data null; end data; 5 Entry_Call (accepter.entry2) Entry_Call (accepter.entry1) 3 2 Petri Nets Petri nets have been proposed as a natural and powerful model of information flow in a system <ref> [Pet77] </ref>. A Petri net can be represented as a 5-tuple (P, T, I, O, M0). P is the set of places in the Petri net; a place can hold zero or more tokens. If a place holds one or more tokens, the place is said to be marked .
Reference: [SC88] <author> S.M. Shatz and W.K. Cheng. </author> <title> A petri net framework for automated static analysis of Ada tasking behavior. </title> <journal> The Journal of Systems and Software , 8(5) </journal> <pages> 343-359, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: M0 is a list of all the places in the net that are initially marked. Petri net modeling appears to be a valuable tool for modeling concurrent software <ref> [SC88] </ref>; a compact Petri net representation can be generated from the TIGs of a program [DCN94]. To generate the Petri net, we build a place for each node in the set of TIGs of a program.
Reference: [Tay83] <author> Richard N. Taylor. </author> <title> Complexity of analyzing the synchronization structure of concurrent programs. </title> <journal> Acta Informatica , 19 </journal> <pages> 57-84, </pages> <year> 1983. </year>
Reference-contexts: The Laboratory for Advanced Software Engineering Research has constructed a set of tools that support analysis of concurrent Ada programs. One such tool generates the reachability graph for a program, and another tool checks for deadlock in the reachability graph. Reachability analysis is known to be intractable in general <ref> [Tay83] </ref>, so it is important to predict when performing deadlock reachability analysis will be feasible and when alternate static analysis techniques should be used instead.
Reference: [Wam85] <author> Gordon Kent Wampler. </author> <title> Static concurrency analysis of Ada programs. </title> <type> Master's thesis, </type> <institution> University of California, Irvine, </institution> <year> 1985. </year> <note> As cited in [LT93]. 18 </note>
Reference-contexts: Wampler has proposed the metric N T/2 as a good predictor of reachability graph size, at least for some programs <ref> [Wam85] </ref>; we include this metric in our experiment as well. We suspect that the number of possible communications in a program affects the number of reachable states for that program.
References-found: 9

