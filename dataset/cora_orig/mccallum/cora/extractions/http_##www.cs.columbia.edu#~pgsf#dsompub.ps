URL: http://www.cs.columbia.edu/~pgsf/dsompub.ps
Refering-URL: http://www.cs.columbia.edu/~pgsf/
Root-URL: http://www.cs.columbia.edu
Email: -pgsf,yy-@cs.columbia.edu  
Title: Management of Application Quality of Service  
Author: Patrcia Gomes Soares Florissi and Yechiam Yemini 
Address: New York, NY 10027  
Affiliation: Distributed Computing and Communications (DCC) Lab Computer Science Department Columbia University,  
Abstract: This paper proposes a new language for the development of distributed multimedia applications: Quality Assurance Language (QuAL). QuAL abstractions allow the specification of Quality of Service (QoS) constraints expected from the underlying computing and communication environment. QuAL specifications are compiled into run time components that monitor the actual QoS delivered. Upon QoS violations, application provided exception handlers are signaled to act upon the faulty events. Language level abstractions of QoS shelter programs from the heterogeneity of underlying infrastructures. This simplifies the development and maintenance of multimedia applications and promotes their portability and reuse. QuAL generates Management Information Bases (MIBs) that contain QoS statistics per application. Such MIBs may be used to integrate application level QoS management into standard network management frameworks.
Abstract-found: 1
Intro-found: 1
Reference: [anderson90] <author> Anderson, D. P., Tzou, S., Wahbe, R., Govindan, R., and Andrews, M., </author> <title> Support for Continuous Media in the DASH System, </title> <booktitle> in Tenth International Conference on Distributed Computing Systems, </booktitle> <address> Paris, </address> <year> 1990. </year>
Reference-contexts: Thus, it has significant advantages in relation to frameworks that are specialized for certain application domains [cohen81] [cole81] [keller93], and to approaches that expose programmers directly to transport layer and session layer service interfaces [topolcic90] <ref> [anderson90] </ref>. QuAL language constructs for the expression of processing constraints target handling of real time demands in a generic and robust way, that enables graceful recovery from degradation.
Reference: [auerbach92] <author> Auerbach, J., </author> <title> Concert/C Specification, </title> <type> Tech. Rep., </type> <institution> IBM T. J. Watson Research Center, </institution> <address> Yorktown Heights, NY, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: QuAL also provides operators to enable dynamic renegotiation of QoS parameters. A renegotiation can happen at any time during process execution and it will occur concurrently with the sending and arrival of messages. The examples described in this paper use Concert/C <ref> [auerbach92] </ref> as the base process oriented language and adopt the following conventions.
Reference: [cohen81] <author> Cohen, D., </author> <title> A Network Voice Protocol NVP-II, </title> <type> Tech. Rep., </type> <institution> USC/Information Sciences Institute, </institution> <month> April </month> <year> 1981. </year>
Reference-contexts: This approach is general, does not limit the domain of applications, and bridges heterogeneity at transport and session layers. Thus, it has significant advantages in relation to frameworks that are specialized for certain application domains <ref> [cohen81] </ref> [cole81] [keller93], and to approaches that expose programmers directly to transport layer and session layer service interfaces [topolcic90] [anderson90]. QuAL language constructs for the expression of processing constraints target handling of real time demands in a generic and robust way, that enables graceful recovery from degradation.
Reference: [cole81] <author> Cole, E., </author> <title> PVP - A Packet Video Protocol, </title> <type> Tech. Rep., </type> <institution> W-Note 28, USC/Information Sciences Institute, </institution> <month> August </month> <year> 1981. </year>
Reference-contexts: This approach is general, does not limit the domain of applications, and bridges heterogeneity at transport and session layers. Thus, it has significant advantages in relation to frameworks that are specialized for certain application domains [cohen81] <ref> [cole81] </ref> [keller93], and to approaches that expose programmers directly to transport layer and session layer service interfaces [topolcic90] [anderson90]. QuAL language constructs for the expression of processing constraints target handling of real time demands in a generic and robust way, that enables graceful recovery from degradation.
Reference: [comer91] <author> Comer, D. E., Stevens, D. L., </author> <title> Internetworking with TCP/IP Volume 1 Prentice Hall, </title> <address> NJ, </address> <year> 1991. </year>
Reference-contexts: The communication timing constraints of distributed multimedia applications undermine the use of such generic approaches. Consider, for example, a real time video transmission. First, loss control through message retransmission as employed by a connection oriented service (such as TCP <ref> [comer91] </ref>) is not suitable in this case. Retransmission causes an additional communication delay that results in abrupt disruptions in video flow. Second, video transmissions require the management of jitter, a Quality of Service (QoS) constraint not required by traditional data transfers.
Reference: [florissi94] <author> Florissi, P. G. S., QuAL: </author> <title> Quality Assurance Language (thesis proposal), </title> <type> Tech. Rep. </type> <institution> CUCS-007-94, Columbia University, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: Constraints associated to outports are checked as messages are sent whereas the ones associated to inports are checked when 5 messages are received. The details regarding the syntax for the specification of contracts and associated monitoring functions can be found in <ref> [florissi94] </ref>. 3 QuAL Supports Processing QoS QuAL adds real time language constructs to enable the expression of processing timing constraints, such as deadlines to process messages. Example 3.1 illustrates the real time processing of video in the context of a multimedia conferencing application. <p> Regarding distributed computing, QuAL is anchored in the process model and its abstractions can be added as an extension to any process oriented language. References [soares92] and <ref> [florissi94] </ref> overview current approaches for programming distributed applications, and discuss the advantages in choosing Concert/C as the base language for the first QuAL prototype. Regarding QoS provision, QuAL provides a general purpose application level abstraction for the negotiation, establishment and management of QoS dependable communications. <p> A survey of real time languages can be found in [halang91] and an analysis of the approach used in QuAL to handle real time features can be found in <ref> [florissi94] </ref>. 6 Conclusions This paper describes the Quality Assurance Language (QuAL) that eases the management of Quality of Service (QoS) for distributed multimedia computing and communication applications. QuAL provides language level abstractions for the specification, negotiation, and management of communication and processing QoS constraints.
Reference: [freed93] <author> Freed, N., and Kille, S., </author> <title> Network Service Monitoring MIB, </title> <type> Internet Draft, </type> <month> November, </month> <year> 1993. </year>
Reference-contexts: running on the system outport: information about the connections to the QoS demanding outports of the applications running on the system inport: information about the connections to the QoS demanding inports of the applications running on the system 4.1 Application Group The application group augments the Network Service Monitoring MIB <ref> [freed93] </ref> (NSM MIB) to include information about application QoS. NSM MIB consists of a table which has one row for each managed application that is currently in execution.
Reference: [halang91] <author> Halang, W. A. and Stoyenko, A. D., </author> <title> Constructing Predictable Real Time Systems . Boston/Dordrecht/London: </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: QuAL language constructs for the expression of processing constraints target handling of real time demands in a generic and robust way, that enables graceful recovery from degradation. A survey of real time languages can be found in <ref> [halang91] </ref> and an analysis of the approach used in QuAL to handle real time features can be found in [florissi94]. 6 Conclusions This paper describes the Quality Assurance Language (QuAL) that eases the management of Quality of Service (QoS) for distributed multimedia computing and communication applications.
Reference: [keller93] <author> Keller, R. and Effelsberg, W., MCAM: </author> <title> An Application Layer Protocol for Movie Control, Access, </title> <booktitle> and Management, in First ACM International Conference on Multimedia, </booktitle> <address> Anaheim, </address> <year> 1993. </year>
Reference-contexts: This approach is general, does not limit the domain of applications, and bridges heterogeneity at transport and session layers. Thus, it has significant advantages in relation to frameworks that are specialized for certain application domains [cohen81] [cole81] <ref> [keller93] </ref>, and to approaches that expose programmers directly to transport layer and session layer service interfaces [topolcic90] [anderson90]. QuAL language constructs for the expression of processing constraints target handling of real time demands in a generic and robust way, that enables graceful recovery from degradation.
Reference: [kernighan88] <author> Kernighan, B. W. and Ritchie, D. M., </author> <title> The C Programming Language , second ed. </title> <publisher> Prentice Hall, </publisher> <address> NJ, </address> <year> 1988. </year>
Reference-contexts: The examples described in this paper use Concert/C [auerbach92] as the base process oriented language and adopt the following conventions. Keywords and constructs in QuAL are written using bold face, in Concert/C are underlined, and in C <ref> [kernighan88] </ref> are written using plain text. 2.1 Specifying and Monitoring Network Level QoS Measures QuAL provides the following abstract QoS attributes for the specification of network level QoS measures: loss tolerance, permutation tolerance, maximum end-end delay, maximum inter-message delay, average transmission rate, peak transmission rate, and recovery time.
Reference: [soares92] <author> Soares, P. G., </author> <title> On Remote Procedure Call, </title> <booktitle> in Second CASCON International Conference , Toronto, </booktitle> <address> Canada, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Regarding distributed computing, QuAL is anchored in the process model and its abstractions can be added as an extension to any process oriented language. References <ref> [soares92] </ref> and [florissi94] overview current approaches for programming distributed applications, and discuss the advantages in choosing Concert/C as the base language for the first QuAL prototype. Regarding QoS provision, QuAL provides a general purpose application level abstraction for the negotiation, establishment and management of QoS dependable communications.
Reference: [stallings93] <author> Stallings, W., SNMP, SNMPv2, and CMIP . Addison Wesley, </author> <year> 1993. </year>
Reference-contexts: Management Instrumentation of Applications application A is executing in a workstation that is being managed by a remote Simple Network Management Protocol (SNMP) Sender CMPlow CMPnlow CMPmed CMPnmed CMPhigh CMPnhigh Exceptions Exceptions Exceptions Application Layer QuAL Runtime Layer Transport Layer To Receiver A To Receiver B To Receiver C 6 <ref> [stallings93] </ref> manager. Application A was instrumented at compile time to generate management information during execution that reflects the performance of its activities. An SNMP agent running on the managed workstation is responsible for collecting the information generated by the QuAL application. <p> Such agent maintains the information collected into a QoS MIB, i.e., an information store that contains data related to application QoS. Objects in the QoS MIB are defined using the subset of Abstract Syntax Notation One (ASN.1) <ref> [stallings93] </ref> defined by the SNMP framework. QuAL runtime SNMP agents are also responsible for answering QoS MIB access requests from external management entities that comply with the SNMP protocol.
Reference: [topolcic90] <author> Topolcic, C. </author> <title> Internet Stream Protocol, Requests for Comments 1190, </title> <month> October, </month> <year> 1990. </year>
Reference-contexts: The receivers of the broadcast have different amounts of communication resources available for the transmission of video, as illustrated in Figure 2.1. The connections also differ on the time tolerated for recovery from connection failures. The three connections use the ST-II <ref> [topolcic90] </ref> transport protocol. The connections were established between 8:00:04am and 8:00:07am, and became active at 08:00:08am. Only the connection with outport 76276 had problems. The connection failed three times since initialization, the last failure was at 08:00:13am, and 6sec were spent in recovering. <p> Thus, it has significant advantages in relation to frameworks that are specialized for certain application domains [cohen81] [cole81] [keller93], and to approaches that expose programmers directly to transport layer and session layer service interfaces <ref> [topolcic90] </ref> [anderson90]. QuAL language constructs for the expression of processing constraints target handling of real time demands in a generic and robust way, that enables graceful recovery from degradation.
References-found: 13

