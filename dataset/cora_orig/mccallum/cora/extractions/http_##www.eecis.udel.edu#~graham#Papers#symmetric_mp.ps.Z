URL: http://www.eecis.udel.edu/~graham/Papers/symmetric_mp.ps.Z
Refering-URL: http://www.eecis.udel.edu/~graham/Papers/
Root-URL: http://www.eecis.udel.edu
Title: lock (if necessary). a writer lock on i_rwlock. 6.4: Inode cache the inode cache. This
Author: lock, ifree_lock. A. Garg. [] R.A. Gingell, J.P. Moran, W.A. Shannon. [] S. Khanna, M. Sebree, J. Zolnowski. [] M.L. Powell, S.R. Kleiman, S. Barton, D. Shah, D. Stein, M. Weeks. 
Keyword: 6.5: Super blocks and cylinder groups  [7] UNIX System Laboratories. UNIX System V Release 4 ES/MP Multiprocessing Detailed Specifications.  
Note: 6.3: Directory manipulation Directory lookup is done under a readers lock on i_r-wlock and directory changes are done under  A readers/writer lock, icache_lock, is used to protect  A  7: References [1]  5.0, accepted, Winter 1992 USENIX Confer  SunOS Multi-thread Architecture, Proceed ings of the Winter 1991 USENIX Conference. [6] SunSoft Inc. Multithreading Techniques used in the Sun-OS 5.0 Kernel, To be submitted, Summer 1992 USENIX Conference.  
Abstract: The inode cache holds inodes representing the most frequently used files, directories, and devices. It is used to look up particular inodes given the inode number. During inode lookup, if the desired inode is not found in the cache, a free or least recently used inode is reclaimed and the desired inode is fetched from disk into the new inode structure. A free list of least recently used inodes is maintained so that stale inodes can be recycled. When searching for an inode a readers version of icache_lock is taken. If the inode is found it is marked as referenced. If the inode is not found, the free list is locked to get an unused inode. If no unused inode exists a new one is allocated. Most of the data in the super block is read only and does not require a lock to access it. However the fields that have to do with changeable file system state (e.g. modified, summary information) are protected by the vfs_lock of the associated VFS structure. Many of the file systems in SunOS 5.0 employ separate threads to handle asynchronous write requests. Most of the processing time associated with a write request is spent gathering dirty pages, setting up the I/O request, and obtaining locks. This work can be deferred to the file system asynchronous write threads, allowing the thread that issued the write to return sooner. On a multiprocessor this has the additional advantage that another processor can service the asynchronous write requests while the generating thread continues to run. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Garg. </author> <title> Parallel STREAMS: a Multiprocessor Implementation, </title> <booktitle> Proceedings of the Winter 1990 USENIX Conference. </booktitle>
Reference: [2] <author> R.A. Gingell, J.P. Moran, </author> <title> W.A. Shannon. Virtual Memory Architecture in SunOS, </title> <booktitle> Proceedings of the Summer 1987 USENIX Conference. </booktitle>
Reference: [3] <author> S. Khanna, M. Sebree, J. Zolnowski. </author> <title> Realtime Scheduling in SunOS 5.0, accepted, </title> <booktitle> Winter 1992 USENIX Confer ence. </booktitle>
Reference: [4] <author> S.R. Kleiman, Vnodes: </author> <title> An Architecture for Multiple File System Types in Sun UNIX, </title> <booktitle> Proceedings of the Summer 1986 USENIX Conference. </booktitle>
Reference: [5] <author> M.L. Powell, S.R. Kleiman, S. Barton, D. Shah, D. Stein, M. Weeks. </author> <title> SunOS Multi-thread Architecture, </title> <booktitle> Proceed ings of the Winter 1991 USENIX Conference. </booktitle>
Reference: [6] <author> SunSoft Inc. </author> <title> Multithreading Techniques used in the Sun-OS 5.0 Kernel, To be submitted, </title> <booktitle> Summer 1992 USENIX Conference. </booktitle>

References-found: 6

