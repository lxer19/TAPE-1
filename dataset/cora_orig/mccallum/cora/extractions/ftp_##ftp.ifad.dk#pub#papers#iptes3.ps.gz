URL: ftp://ftp.ifad.dk/pub/papers/iptes3.ps.gz
Refering-URL: http://www.ifad.dk/publications/publications.html
Root-URL: 
Title: IPTES: A Concurrent Engineering Approach for Real-Time Software Development  
Author: P. Pulli R. Elmstrtm 
Address: Kaitovayla 1, P.O. Box 201, SF-90571 Oulu, Finland  Forskerparken 10, DK-5230 Odense M, Denmark  
Affiliation: Technical Research Centre of Finland (VTT) Computer Technology Laboratory  The Institute of Applied Computer Science (IFAD)  
Abstract: The constantly increasing concurrency, complexity, and risks associated with the industrial development of real-time embedded computer systems has been approached in different ways in recent years. In Esprit project no. EP5570, called IPTES, a methodology and a supporting environment to support the Boehm's spiral process are being developed. The prototyping environment will enable the specification, development, and verification of executable system models so that different parts of the system may represent different modeling levels and yet can be executed as a total system. Concurrent engineering problems in connection with multi-supplier, distributed software development are also addressed in the IPTES environment. In the IPTES project the concept of heterogeneous prototyping is proposed as a solution. Each of the development teams may use relatively abstract models of the other parts of the systems as a testbed (environment model) for their own part, yet they can proceed developing their own part full speed by means of advancing the maturity of their part to the next abstraction level(s). The IPTES environment provides a set of tools to help in the process of creating, analysing, and testing distributed heterogeneous prototypes. 
Abstract-found: 1
Intro-found: 1
Reference: [Agresti86] <author> W. </author> <title> Agresti (editor). New Paradigms for Software Development. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1986. </year> <pages> 295 pages. </pages>
Reference-contexts: Over the last few years, more and more attention has been paid to alternative software development models that could both overcome deficiencies <ref> [Agresti86] </ref> of the traditional waterfall model [Boehm81], and accommodate activities such as prototyping, reuse, and automatic coding as part of the process. In ESPRIT project EP5570, IPTES 1 , a methodology and a supporting environment to support Boehm's spiral process are being developed.
Reference: [Akao90] <author> Y. Akao. </author> <title> Quality Function Deployment. Integrating Customer Requirements into Product Design. </title> <publisher> Productivity Press, </publisher> <address> Cambridge, Mas-sachusetts Norwalk, Connecticut, </address> <year> 1990. </year> <pages> 369 pages. </pages>
Reference-contexts: In IPTES we have chosen to support decision making with an advanced form of value analysis especially suited for teamwork. Quality Function Deployment (QFD) [Zultner89] was developed in Japan in 1970's and 1980's <ref> [Akao90] </ref> as an integrated set of quality tools and techniques. It is used for market research and product design purposes to make explicit the "voice of the customer" throughout the product design process.
Reference: [Aoyama87] <author> M. Aoyama. </author> <title> Concurrent Development of Software Systems ANew Development Paradigm. </title> <booktitle> ACM Sigsoft Software Engineering Notes, </booktitle> <volume> 12(3) </volume> <pages> 20-23, </pages> <year> 1987. </year>
Reference-contexts: The project is developing modules matching the spiral model iterative life cycle steps. The project has selected value analysis as a decision support technique to be applied for identification of objectives and alternatives, for traceability, and for various constraints. Aoyama <ref> [Aoyama87] </ref> and Hatley [Hatley91] have studied the requirements for organisation infrastructure to support concurrent development of embedded software-intensive systems. [Blumofe&88] and [Cadre90] describe a commercial, graphical executable specification tool, Teamwork/SIM. This tool supports a limited form of execution, capable of expressing only control and timing issues.
Reference: [Athena89] <author> Athena Systems Inc. Foresight: </author> <title> Modeling and Simulation Toolset for Real-Time System Development, User's Manual. </title> <month> March </month> <year> 1989. </year>
Reference-contexts: Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT. There are a number of tools for SA/RT logical model execution [Webb&86], [Reilly&87], [Coomber&90], <ref> [Athena89] </ref>. Some of the surveyed tools can be used for execution of heterogeneous models, and in that sense they make incremental prototyping possible.
Reference: [Blumofe&88] <author> R. Blumofe, A. Hecht. </author> <title> Executing Real-Time Structured Analysis specifications. </title> <booktitle> ACM Sigsoft Software Engineering Notes, </booktitle> <pages> pages 32-40, 13, </pages> <month> 3 </month> <year> 1989. </year>
Reference-contexts: The project has selected value analysis as a decision support technique to be applied for identification of objectives and alternatives, for traceability, and for various constraints. Aoyama [Aoyama87] and Hatley [Hatley91] have studied the requirements for organisation infrastructure to support concurrent development of embedded software-intensive systems. <ref> [Blumofe&88] </ref> and [Cadre90] describe a commercial, graphical executable specification tool, Teamwork/SIM. This tool supports a limited form of execution, capable of expressing only control and timing issues. Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT.
Reference: [Boehm81] <author> B. Boehm. </author> <title> Software Engineering Economics. </title> <publisher> Prentice-Hall, </publisher> <year> 1981. </year> <pages> 767 pages. </pages>
Reference-contexts: Over the last few years, more and more attention has been paid to alternative software development models that could both overcome deficiencies [Agresti86] of the traditional waterfall model <ref> [Boehm81] </ref>, and accommodate activities such as prototyping, reuse, and automatic coding as part of the process. In ESPRIT project EP5570, IPTES 1 , a methodology and a supporting environment to support Boehm's spiral process are being developed.
Reference: [Boehm88] <author> B. Boehm. </author> <title> A Spiral Model of Software Development and Enhancement. </title> <journal> IEEE Computer, </journal> <volume> 21(5) </volume> <pages> 61-72, </pages> <year> 1988. </year>
Reference-contexts: In section 4 we present the benefits foreseen in applying the IPTES approach. In section 5 we present some related work and finally in section 6 we give some concluding remarks. 2 Spiral Process Model The spiral model proposed by Boehm <ref> [Boehm88] </ref> (Figure 1) is a development process model in which prototyping and reuse are important ingredients. The model describes an iterative development process where planning, risk identification and resolution and development (of prototypes or product) are part of each iteration. <p> The concurrent threads may be organised around levels of risk <ref> [Boehm88] </ref>. Figure 2 gives an example [TRW89] of concurrent development threads in a hypotethical development project targeted to a major breakthrough product. In Figure 2, the horizontal axis represents elapsed time.
Reference: [Boehm91] <author> B. W. Boehm. </author> <title> Software Risk Management: </title> <booktitle> Principles and Practices. IEEE Software, </booktitle> <pages> pages 32-41, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: risk control activities throughout major portions of the development process. 1 IPTES is an acronym for Incremental Prototyping Technology for Embedded real-time Systems 1 represents the cumulative cost, and the angular dimension represents the progress made in completing each cycle of the spiral. 2 Risk management involves the following steps <ref> [Boehm91] </ref>: * Risk assessment techniques Risk identification produces lists of the project specific risk items likely to compro mise a project's success. Risk analysis quantifies the loss probability and loss magnitude for each identified risk item, and it assesses compound risks in risk item interactions.
Reference: [Cadre90] <institution> Cadre Technologies Inc. Teamwork/SIM. </institution> <note> User's Guide. Release 4.0. </note> <month> December </month> <year> 1990. </year> <title> Part Number D048XX4A. </title> <type> 12 </type>
Reference-contexts: The project has selected value analysis as a decision support technique to be applied for identification of objectives and alternatives, for traceability, and for various constraints. Aoyama [Aoyama87] and Hatley [Hatley91] have studied the requirements for organisation infrastructure to support concurrent development of embedded software-intensive systems. [Blumofe&88] and <ref> [Cadre90] </ref> describe a commercial, graphical executable specification tool, Teamwork/SIM. This tool supports a limited form of execution, capable of expressing only control and timing issues. Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT.
Reference: [Coleman&90] <author> G.L. Coleman, C.P. Ellison, G.G. Gardner, D.L. Sandini, J.W. Brackett. </author> <title> Experience in Modelling a Concurrent Software System using Statem-ate. </title> <booktitle> Proceedings of the Compeuro'90 Conference. </booktitle> <address> Tel Aviv, </address> <publisher> Isreal, </publisher> <pages> pages 104-108, </pages> <address> Washington D.C. </address> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1990. </year>
Reference-contexts: Currently, an abstraction level equivalent to the logical model of SA/RT is supported 4 . However, it is possible to combine the prototype code generated out of Statemate models with user-written programs in Ada or C [Harel&90], <ref> [Coleman&90] </ref>. A recently started EUREKA project "RiskMan" [Manperil&91] is working on defining a project management methodology and developing a toolset for the management of large, predominantly software-oriented systems. The project is developing modules matching the spiral model iterative life cycle steps.
Reference: [Coomber&90] <author> C. Coomber, R. Childs. </author> <title> A graphical tool for prototyping of real-time systems. </title> <booktitle> ACM Sigsoft Software Engineering Notes, </booktitle> <pages> pages 70-82, 15, </pages> <month> 2 </month> <year> 1990. </year>
Reference-contexts: Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT. There are a number of tools for SA/RT logical model execution [Webb&86], [Reilly&87], <ref> [Coomber&90] </ref>, [Athena89]. Some of the surveyed tools can be used for execution of heterogeneous models, and in that sense they make incremental prototyping possible.
Reference: [Curtis87] <author> B. Curtis. </author> <title> Models of Iteration in Software Development. </title> <booktitle> Proc. 3rd International Software Process Workshop, Breckenridge, Colorado, </booktitle> <pages> pages 53-56, </pages> <month> 17-19 November </month> <year> 1987. </year>
Reference-contexts: We see the QFD techniques as complementing the Boehm spiral model in teamwork-based decision support. From the decision making point of view, the QFD matrices present a roadmap for the actual decision network <ref> [Curtis87] </ref> of the project team.
Reference: [DOD-STD-2167A] <institution> Military standard DOD-STD-2167A: Defence System Software Development. Department of Defence (US), </institution> <month> February </month> <year> 1988. </year> <pages> 51 pages. </pages>
Reference-contexts: The spiral has to be customised on a company or project basis. [Royce90] presents a derivative of the spiral model which explicitly defines these milestones according to the US military standard <ref> [DOD-STD-2167A] </ref>. [Nettles91] describes another on-going coordinated effort of producing guidelines for applying Spiral model which also heads for DOD-2167A compliance. We have chosen not to strive for 2167A compliance, because it being a document driven approach tends to force excess synchronisation of concurrent development threads.
Reference: [Elmstrtm&93a] <author> R. Elmstrtm, R. Lintulampi, M. Pezze. </author> <title> Giving Semantics to SA/RT by Means of High-Level Timed Petri Nets. </title> <journal> This issue of Real-Time Systems Journal, </journal> <year> 1993. </year>
Reference-contexts: However, SA/RT being a semi-formal language implies that an executable dialect of the SA/RT notation has to be developed since the use of incremental prototyping requires the use of executable specification languages. In the IPTES project we have chosen to use VDM-SL <ref> [Elmstrtm&93a] </ref> and high-level timed Petri nets [Felder&93] to give exact formal syntax and semantics to SA/RT. 6 the other subsystems are modeled at higher levels of abstraction.
Reference: [Elmstrtm&93b] <author> R. Elmstrtm, P.B. Lassen, M. Andersen. </author> <title> An Executable Subset of VDM-SL, in an SA/RT Framework. </title> <journal> This issue of Real-Time Systems Journal, </journal> <year> 1993. </year>
Reference-contexts: Notice that models communicate through shared elements, such as data-flows, data-stores, operating system communication primitives, and procedure calls. 7 concurrency of working groups. 8 We have also defined an executable subset of the emerging BSI and ISO standard VDM-SL language <ref> [Elmstrtm&93b] </ref> to be used for specifying the data transformation part of SA/RT in mini-specifications. The derived mini-specification language is called IPTES Meta-IV. A high-level timed Petri net (HLTPN) kernel is used as the underlying execution mechanism of the IPTES environment.
Reference: [Felder&93] <author> M. Felder, C. Ghezzi, M. Pezze. </author> <title> High-Level Timed Petri Nets as a Kernel for Executable Specification. </title> <journal> This issue of Real-Time Systems Journal, </journal> <year> 1993. </year>
Reference-contexts: However, SA/RT being a semi-formal language implies that an executable dialect of the SA/RT notation has to be developed since the use of incremental prototyping requires the use of executable specification languages. In the IPTES project we have chosen to use VDM-SL [Elmstrtm&93a] and high-level timed Petri nets <ref> [Felder&93] </ref> to give exact formal syntax and semantics to SA/RT. 6 the other subsystems are modeled at higher levels of abstraction.
Reference: [Gabriel89] <editor> R.P. Gabriel (editor). </editor> <title> Draft Report on Requirements for a Common Prototyping System. </title> <journal> ACM Sigplan Notices, </journal> <volume> 24(3) </volume> <pages> 93-165, </pages> <year> 1989. </year>
Reference-contexts: Over the lifetime of the prototype the mix of abstraction levels may change <ref> [Gabriel89] </ref>. Figures 4 and 5 [Mortensen90] illustrate the concept of the heterogeneous prototype. 3.2 Incremental Prototype Incremental prototyping is the process of building heterogeneous prototypes over time. The incremental prototyping process may contain concurrent engineering [Reddy&92], i.e. there may be several teams working simultaneously with different heterogeneous prototypes. <p> Piecewise modernisation of a mature product * Controlled transfer of technically and commercially risky features into products * Improved control over time within the project * Advanced quality management * Harnessing application code generators in development work 5 Related Work Gabriel presents the requirements for a future prototyping environment in <ref> [Gabriel89] </ref>. Gabriel foresees the need for heterogeneous prototyping by requiring that elements from behavioural and structural prototypes can be combined and during the development process this mix may change as the requirements to the prototype change. 9 individual benefits of the IPTES approach.
Reference: [Goldberg&85] <author> A. Goldberg, D. Robson. </author> <title> Smalltalk-80: The Language and its implementation. </title> <publisher> Addison Wesley, </publisher> <address> Reading Massachusetts, </address> <year> 1985. </year>
Reference-contexts: Any programming language can be used for constructing object-oriented software. However, the benefits of object-orientation were first realised with proper languages and environments like Smalltalk-80 <ref> [Goldberg&85] </ref>. 11 * IPTES allows efficient development work structuring and allocation to concurrent devel-opment teams and individuals.
Reference: [Gomaa89] <author> H. Gomaa. </author> <title> A Software Design Method for Distributed Real-Time Applications. </title> <journal> The Journal of Systems and Software, </journal> <volume> 9(2) </volume> <pages> 81-94, </pages> <year> 1989. </year>
Reference-contexts: IPTES guidelines. well-known embedded system development method, Ward & Mellor's Structured Analysis for Real-Time Systems (SA/RT) method [Ward&85] enhanced with a subsystems level of abstraction similar to one proposed in <ref> [Gomaa89] </ref>. This extension may prove useful for large systems development and for concurrent engineering [Reddy&92] purposes.
Reference: [Harel87] <author> D. Harel. StateCharts: </author> <title> A Visual Formalism for Complex Systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8(3) </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference-contexts: The abstraction level supported is roughly equivalent to the software environment model of SA/RT 3 . Harel et al. have produced a commercial, graphical executable specification tool, Statemate [Harel&90], that has prototyping features. It is possible to automatically generate prototype code from the activity-chart and Statechart <ref> [Harel87] </ref> specifications. Currently translations into Ada and C code are supported. A limitation of the Statemate tool is that it does not support multiple abstraction levels. Currently, an abstraction level equivalent to the logical model of SA/RT is supported 4 .
Reference: [Harel&90] <author> D. Harel, H. Lachover, A. Naamad, A. Pnueli, M. Politi, R. Sherman, A. Shtull-Trauring, M. Trakhtenbrot. STATEMATE: </author> <title> A Working Environment for the Development of Complex Reactive Systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(4) </volume> <pages> 403-414, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: A limitation of the Luqi's system is that it does not support multiple abstraction levels. The abstraction level supported is roughly equivalent to the software environment model of SA/RT 3 . Harel et al. have produced a commercial, graphical executable specification tool, Statemate <ref> [Harel&90] </ref>, that has prototyping features. It is possible to automatically generate prototype code from the activity-chart and Statechart [Harel87] specifications. Currently translations into Ada and C code are supported. A limitation of the Statemate tool is that it does not support multiple abstraction levels. <p> Currently, an abstraction level equivalent to the logical model of SA/RT is supported 4 . However, it is possible to combine the prototype code generated out of Statemate models with user-written programs in Ada or C <ref> [Harel&90] </ref>, [Coleman&90]. A recently started EUREKA project "RiskMan" [Manperil&91] is working on defining a project management methodology and developing a toolset for the management of large, predominantly software-oriented systems. The project is developing modules matching the spiral model iterative life cycle steps. <p> This is because Luqi's system does not have a mini-specification language; instead Ada is used. 4 <ref> [Harel&90] </ref> mentions plans to make the prototype code generation more adjustable. This can be interpreted as an indication of interest to support more physical abstraction levels. 5 To better understand the difference between "makes possible" and "supports", consider the case of object-orientation.
Reference: [Hatley91] <editor> D.J. Hatley. </editor> <booktitle> Parallel, Cooperative System Development. Proceedings of Embedded Systems Conference, </booktitle> <address> Santa Clara, </address> <booktitle> California, </booktitle> <volume> Vol II, </volume> <pages> 823-836, </pages> <month> September 24-27 </month> <year> 1991. </year>
Reference-contexts: The project is developing modules matching the spiral model iterative life cycle steps. The project has selected value analysis as a decision support technique to be applied for identification of objectives and alternatives, for traceability, and for various constraints. Aoyama [Aoyama87] and Hatley <ref> [Hatley91] </ref> have studied the requirements for organisation infrastructure to support concurrent development of embedded software-intensive systems. [Blumofe&88] and [Cadre90] describe a commercial, graphical executable specification tool, Teamwork/SIM. This tool supports a limited form of execution, capable of expressing only control and timing issues. Computations and data have been omitted.
Reference: [King89] <author> B. King. </author> <title> Better Designs in Half the Time: Implementing QFD Quality Function Deployment in America. </title> <publisher> Goal/QPC, Methuen, </publisher> <address> Massachusetts, </address> <year> 1989. </year> <pages> 564 pages. 13 </pages>
Reference-contexts: From the decision making point of view, the QFD matrices present a roadmap for the actual decision network [Curtis87] of the project team. We are currently looking for ways to extend the current QFD system <ref> [King89] </ref> for identification and quantification of risk elements of the product, project, and the company infrastructure. 3.4 Specification Languages We have chosen Ward and Mellor's Structured Analysis for Real-Time Systems (SA/RT) graphical notation as a basis for specification and design descriptions in IPTES.
Reference: [Leon&93] <author> G. Leon, J.A. de la Puente, J.C. Due~nas, A. Alonso, and N. Zakhama. </author> <title> The IPTES Environment: Support for Incremental, Heterogeneous and Distributed Prototyping. </title> <journal> This issue of Real-Time Systems Journal, </journal> <year> 1993. </year>
Reference-contexts: This kernel is used as basis for the execution and analysis of these SA/RT-VDM models. The HLTPN kernel makes the IPTES environment open for extension to other executable specification languages. Run-time adaptation techniques <ref> [Leon&93] </ref> define a basic set of distributed data, control, and timing exchange mechanisms between the HLTPN kernel and high-level programming language routines. 3.5 Tool Environment The IPTES environment [Leon&93] provides a set of graphically-oriented tools to help in the process of creating, analysing and testing distributed heterogeneous prototypes. <p> The HLTPN kernel makes the IPTES environment open for extension to other executable specification languages. Run-time adaptation techniques <ref> [Leon&93] </ref> define a basic set of distributed data, control, and timing exchange mechanisms between the HLTPN kernel and high-level programming language routines. 3.5 Tool Environment The IPTES environment [Leon&93] provides a set of graphically-oriented tools to help in the process of creating, analysing and testing distributed heterogeneous prototypes. The visualisa-tion of prototype execution is based on graphical animation techniques [Pulli&93].
Reference: [Luqi86] <author> Luqi. </author> <title> Rapid prototyping for large software system design. </title> <type> Ph.D thesis, </type> <institution> University of Minnesota, </institution> <address> 103 pages, </address> <year> 1986. </year>
Reference-contexts: The columns describe the mechanisms supporting the benefit. 10 Luqi has presented a prototyping environment for large software system design based on reusable Ada software components <ref> [Luqi86] </ref>. The computational model is based on data flow under semantically unified control and timing constraints. Luqi has presented the importance of the computational model for a prototyping tool, language and method in [Luqi86]. A limitation of the Luqi's system is that it does not support multiple abstraction levels. <p> Luqi has presented a prototyping environment for large software system design based on reusable Ada software components <ref> [Luqi86] </ref>. The computational model is based on data flow under semantically unified control and timing constraints. Luqi has presented the importance of the computational model for a prototyping tool, language and method in [Luqi86]. A limitation of the Luqi's system is that it does not support multiple abstraction levels. The abstraction level supported is roughly equivalent to the software environment model of SA/RT 3 . Harel et al. have produced a commercial, graphical executable specification tool, Statemate [Harel&90], that has prototyping features.
Reference: [Manperil&91] <author> C. Manperil, Y. Rommel, J. Prinz. </author> <title> Risk Management Applied to Predominantly Software-Oriented Systems: The RiskMan Project. </title> <type> Draft paper, </type> <note> available from CGI/CR2A, 19 Avenue Dubonnet, 92411 Courbevoie Cedex. </note>
Reference-contexts: Currently, an abstraction level equivalent to the logical model of SA/RT is supported 4 . However, it is possible to combine the prototype code generated out of Statemate models with user-written programs in Ada or C [Harel&90], [Coleman&90]. A recently started EUREKA project "RiskMan" <ref> [Manperil&91] </ref> is working on defining a project management methodology and developing a toolset for the management of large, predominantly software-oriented systems. The project is developing modules matching the spiral model iterative life cycle steps.
Reference: [Mortensen90] <author> B. G. Mortensen (Coordinating Proposer). IPTES: </author> <title> Incremental Proto-typing Technology for Embedded Real-Time Systems. Part II. Project Description. </title> <type> Technical Report, </type> <address> IFAD, Odense, Denmark, </address> <month> January 8, </month> <year> 1990. </year>
Reference-contexts: Over the lifetime of the prototype the mix of abstraction levels may change [Gabriel89]. Figures 4 and 5 <ref> [Mortensen90] </ref> illustrate the concept of the heterogeneous prototype. 3.2 Incremental Prototype Incremental prototyping is the process of building heterogeneous prototypes over time. The incremental prototyping process may contain concurrent engineering [Reddy&92], i.e. there may be several teams working simultaneously with different heterogeneous prototypes.
Reference: [Nettles91] <author> D. Nettles. </author> <title> Consortium Prepares Evolutionary Spiral Process Deliver-ables. </title> <journal> SPC Quarterly, </journal> <pages> pages 4-6, </pages> <month> Spring </month> <year> 1991. </year>
Reference-contexts: The spiral has to be customised on a company or project basis. [Royce90] presents a derivative of the spiral model which explicitly defines these milestones according to the US military standard [DOD-STD-2167A]. <ref> [Nettles91] </ref> describes another on-going coordinated effort of producing guidelines for applying Spiral model which also heads for DOD-2167A compliance. We have chosen not to strive for 2167A compliance, because it being a document driven approach tends to force excess synchronisation of concurrent development threads.
Reference: [Puente&93] <author> J.A. de la Puente, A. Alonso, G. Leon, J.C. Due~nas. </author> <title> Distributed Execution of Specifications. </title> <journal> This issue of Real-Time Systems Journal, </journal> <year> 1993. </year>
Reference-contexts: The visualisa-tion of prototype execution is based on graphical animation techniques [Pulli&93]. Internally, the environment is based on a representation of the system in terms of high-level timed Petri nets with shared places <ref> [Puente&93] </ref>.
Reference: [Pulli&91b] <author> P. Pulli, R. Elmstrtm, G. Leon, J.A. de la Puente. </author> <title> IPTES Incremental Prototyping Technology for Embedded real-time Systems. </title> <booktitle> ESPRIT Information Processing Systems and Software, Results and Progress of Selected Projects 1991, </booktitle> <pages> pages 497-512, </pages> <booktitle> Esprit, Commission of the Eu-ropean Communities, </booktitle> <month> November </month> <year> 1991. </year>
Reference-contexts: These benefits are achieved with strong modeling, prototyping and decision support capabilities. 7 Acknowlegdements The work presented in this paper has been carried out in the IPTES project <ref> [Pulli&91b] </ref>. The objective of the IPTES (Incremental Prototyping Technology for Embedded Real-Time Systems) project is to develop methodologies, tools, and theoretical results on distributed pro-totyping of real-time systems. IPTES is partially funded by the European Communities under the ESPRIT programme, project no.
Reference: [Pulli&93] <author> P. Pulli, M. Heikkinen, R. Lintulampi. </author> <title> Graphical Animation as a Form of Prototyping Real-Time Software Systems. </title> <journal> This issue of Real-Time Systems Journal, </journal> <year> 1993. </year>
Reference-contexts: The visualisa-tion of prototype execution is based on graphical animation techniques <ref> [Pulli&93] </ref>. Internally, the environment is based on a representation of the system in terms of high-level timed Petri nets with shared places [Puente&93].
Reference: [Reddy&92] <author> R. Reddy, </author> <title> R.T. </title> <editor> Wood, K.J. Cleetus. </editor> <booktitle> The DARPA Initiative in Concurrent Engineering. Concurrent Engineering Research in Review, </booktitle> <pages> pages 2-10, </pages> <month> Winter </month> <year> 1991/1992, 1992. </year>
Reference-contexts: IPTES guidelines. well-known embedded system development method, Ward & Mellor's Structured Analysis for Real-Time Systems (SA/RT) method [Ward&85] enhanced with a subsystems level of abstraction similar to one proposed in [Gomaa89]. This extension may prove useful for large systems development and for concurrent engineering <ref> [Reddy&92] </ref> purposes. <p> Over the lifetime of the prototype the mix of abstraction levels may change [Gabriel89]. Figures 4 and 5 [Mortensen90] illustrate the concept of the heterogeneous prototype. 3.2 Incremental Prototype Incremental prototyping is the process of building heterogeneous prototypes over time. The incremental prototyping process may contain concurrent engineering <ref> [Reddy&92] </ref>, i.e. there may be several teams working simultaneously with different heterogeneous prototypes.
Reference: [Reilly&87] <author> E.L. Reilly, J.W. Brackett. </author> <title> An experimental system for executing Real-Time Structured Analysis models. </title> <booktitle> Proceedings of the XII Structure Methods Conference. </booktitle> <address> Chicago, </address> <publisher> Illinois. </publisher> <pages> Pages 301-313, </pages> <address> Chicago, </address> <booktitle> Structured Techniques Association, </booktitle> <month> May </month> <year> 1987. </year>
Reference-contexts: This tool supports a limited form of execution, capable of expressing only control and timing issues. Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT. There are a number of tools for SA/RT logical model execution [Webb&86], <ref> [Reilly&87] </ref>, [Coomber&90], [Athena89]. Some of the surveyed tools can be used for execution of heterogeneous models, and in that sense they make incremental prototyping possible.
Reference: [Royce90] <author> W. </author> <title> Royce. TRW's Ada Process Model for Incremental Development of Large Software Systems. </title> <booktitle> 12th International Conference on Software Engineering, </booktitle> <pages> pages 2-11, </pages> <year> 1990. </year>
Reference-contexts: The spiral has to be customised on a company or project basis. <ref> [Royce90] </ref> presents a derivative of the spiral model which explicitly defines these milestones according to the US military standard [DOD-STD-2167A]. [Nettles91] describes another on-going coordinated effort of producing guidelines for applying Spiral model which also heads for DOD-2167A compliance.
Reference: [TRW89] <author> A. </author> <title> Marmor-Squires (principal investigator). Process Model for High Performance Trusted Systems in Ada. </title> <type> Technical Report, </type> <institution> TRW Systems Division, Fairfax, Virginia, </institution> <month> August </month> <year> 1989. </year> <pages> 76 pages. 14 </pages>
Reference-contexts: The concurrent threads may be organised around levels of risk [Boehm88]. Figure 2 gives an example <ref> [TRW89] </ref> of concurrent development threads in a hypotethical development project targeted to a major breakthrough product. In Figure 2, the horizontal axis represents elapsed time. The vertical axis represents the level of abstraction at which a representation or an understanding of the system is being developed.
Reference: [Ward&85] <author> P.T. Ward and S.J. Mellor. </author> <title> Structured Development for Real-Time Systems. Volume 1-3, </title> <publisher> Yourdon Press, </publisher> <address> New York, </address> <pages> 1985-1986. </pages>
Reference-contexts: We have chosen not to strive for 2167A compliance, because it being a document driven approach tends to force excess synchronisation of concurrent development threads. IPTES guidelines. well-known embedded system development method, Ward & Mellor's Structured Analysis for Real-Time Systems (SA/RT) method <ref> [Ward&85] </ref> enhanced with a subsystems level of abstraction similar to one proposed in [Gomaa89]. This extension may prove useful for large systems development and for concurrent engineering [Reddy&92] purposes.
Reference: [Webb&86] <author> M. Webb, P. Ward. </author> <title> Executable Data Flow Diagrams: An Experimental Implementation. </title> <booktitle> Proceedings of the Structured Development Forum VIII. </booktitle> <address> Chicago, Illinois. </address> <booktitle> Structured Techniques Association, </booktitle> <pages> pages 1-21, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: This tool supports a limited form of execution, capable of expressing only control and timing issues. Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT. There are a number of tools for SA/RT logical model execution <ref> [Webb&86] </ref>, [Reilly&87], [Coomber&90], [Athena89]. Some of the surveyed tools can be used for execution of heterogeneous models, and in that sense they make incremental prototyping possible.
Reference: [Zultner89] <author> R. E. Zultner. </author> <title> Software Quality (Function) Deployment Applying QFD to Software. </title> <booktitle> 13th Rocky Mountain Quality Conference, </booktitle> <year> 1989. </year> <title> Available from Zultner & Company, </title> <address> 12 Wallingford Drive, Princeton, NJ 08540. </address> <pages> 11 pages. 15 </pages>
Reference-contexts: In IPTES we have chosen to support decision making with an advanced form of value analysis especially suited for teamwork. Quality Function Deployment (QFD) <ref> [Zultner89] </ref> was developed in Japan in 1970's and 1980's [Akao90] as an integrated set of quality tools and techniques. It is used for market research and product design purposes to make explicit the "voice of the customer" throughout the product design process.
References-found: 38

