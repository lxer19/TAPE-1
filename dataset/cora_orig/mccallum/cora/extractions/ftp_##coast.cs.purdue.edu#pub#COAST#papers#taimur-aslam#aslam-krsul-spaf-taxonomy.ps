URL: ftp://coast.cs.purdue.edu/pub/COAST/papers/taimur-aslam/aslam-krsul-spaf-taxonomy.ps
Refering-URL: http://www.cs.purdue.edu/coast/coast-library.html
Root-URL: http://www.cs.purdue.edu
Email: faslam,krsul,spafg@cs.purdue.edu  
Title: Use of A Taxonomy of Security Faults  
Author: Taimur Aslam, Ivan Krsul, and Eugene H. Spafford 
Date: September 4, 1996  
Address: West Lafayette, IN 47907-1398  
Affiliation: COAST Laboratory Department of Computer Sciences Purdue University  
Pubnum: Technical Report TR-96-051  
Abstract: We define a classification of security faults in the Unix operating system. We state the criteria used to categorize the faults and present examples of the different fault types. We present the design and implementation details of a prototype database to store vulnerability information collected from different sources. The data is organized according to our fault categories. The information in the database can be applied in static audit analysis of systems, intrusion detection, and fault detection. We also identify and describe software testing methods that should be effective in detecting different faults in our classification scheme. fl This paper to be presented at the 19th National Information Systems Security Conference, October 22-25, 1996, Balti-more, Maryland. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> CERT advisory CA-91:18. </author> <title> Computer Emergency Response Team Advisory, </title> <year> 1991. </year>
Reference-contexts: This flaw qualifies as a configuration error in our taxonomy because tftp was not properly installed. tftp should have been enabled such that access to the file system was restricted via the chroot command <ref> [1, 2] </ref>. 3.4 Environment Faults Environment faults are introduced when specifications are translated to code but sufficient attention is not paid to the run-time environment. Environmental faults can also occur when different modules interact in an unanticipated manner.
Reference: [2] <author> CERT advisory CA-91:19. </author> <title> Computer Emergency Response Team Advisory, </title> <year> 1991. </year>
Reference-contexts: This flaw qualifies as a configuration error in our taxonomy because tftp was not properly installed. tftp should have been enabled such that access to the file system was restricted via the chroot command <ref> [1, 2] </ref>. 3.4 Environment Faults Environment faults are introduced when specifications are translated to code but sufficient attention is not paid to the run-time environment. Environmental faults can also occur when different modules interact in an unanticipated manner.
Reference: [3] <author> CERT advisory CA-93:17. </author> <title> Computer Emergency Response Team Advisory, </title> <year> 1993. </year>
Reference-contexts: The mutant terminates execution of the program if certain specified conditions are not satisfied. For instance, a timing window between the access permission checks and the actual logging in xterm could be exploited to compromise security <ref> [3] </ref>. A mutant for this vulnerability could be designed that terminated execution thus killing the mutant, if the access checks had been completed. This mutant could be placed between the access checks and the logging to detect the race condition. Mutants can also be designed to detect improper serialization operations. <p> If xterm operated as a setuid or setgid process, then a race condition between the access check permissions to the logging file and the logging itself allowed users to replace any arbitrary file with the logging file <ref> [3] </ref>.
Reference: [4] <author> CERT advisory CA-94:02. </author> <title> Computer Emergency Response Team Advisory, </title> <year> 1994. </year>
Reference-contexts: In SunOS 4.1.x, if a host entry in the file was longer than 256 characters, or if the number of hosts exceeded the cache capacity, a buffer overflow allowed any non-trusted host to mount the file system <ref> [4] </ref>. This allowed unauthorized users read and write access to all files on a system. This error occurred because the system failed to check that it had read more than 256 characters or that it had exhausted the cache capacity. Another example is the uux utility in Unix.
Reference: [5] <author> DeMillo R. A, Hocking E. D, and Meritt M. </author> <note> J. </note>
Reference-contexts: In addition to functional testing, mutation testing can also be used to detect boundary conditions by designing appropriate language dependent mutants [7, 12, 31, 14]. Domain analysis can be applied to detect boundary condition errors. Domain analysis has been studied with two variables and examined with three variables <ref> [19, 5] </ref>. The main disadvantage of domain testing is that it can only be applied to a small number of variables as the difficulty of selecting test cases becomes increasingly complex. In an experiment by Howden, path analysis revealed the existence of one out of three path selection errors [18].
References-found: 5

