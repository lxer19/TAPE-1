URL: http://www.cse.ogi.edu/~barga/papers/vldb.ps
Refering-URL: http://www.cse.ogi.edu/~barga/
Root-URL: http://www.cse.ogi.edu
Email: email: fbarga,caltong@cse.ogi.edu  
Title: A Practical and Modular Method to Implement Extended Transaction Models  
Author: Roger Barga and Calton Pu 
Address: P.O. Box 91000 Portland, OR 97291-1000  
Affiliation: Department of Computer Science and Engineering Oregon Graduate Institute of Science Technology  
Abstract: Although many extended transaction models have been proposed [Elm93], few practical implementations exist and even fewer can support more than one model. We present the Reflective Transaction Framework, as a practical and modular method to implement extended transaction models. We achieve modularity by applying the Open Implementation approach [Kic92] (also known as meta-object protocol [KdRB91]) to the design of the reflective transaction framework. We achieve practicality by implementing on top of a commercial transaction processing monitor. For our implementation of the reflective transaction framework, we introduce transaction adapters, add-on modules built on top of existing commercial TP components, such as Encina, that extend their functionality to support extended transaction features and semantics. Since our framework design is based on the transaction processing monitor architecture [GR93], it is widely applicable to many modern TP monitors. The reflective transaction framework enables us to implement a wide range of independently proposed extended transaction models, which we demonstrate by implementing the split/join model [PKH88] and cooperative transaction groups [MP92, RC92]. 
Abstract-found: 1
Intro-found: 1
Reference: [BDG + 94] <author> A. Biliris, et al. </author> <title> Asset: A system for supporting extended transactions. </title> <booktitle> In Proceedings of 1994 ACM SIGMOD, </booktitle> <pages> pages 44-53, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: And on the implementation side, transaction adapters are close enough to the TP monitor architecture to support a practical implementation on top of commercial software. An example of the language primitives approach is ASSET <ref> [BDG + 94] </ref>, in which the ability to implement extended transaction models is provided at a very low level by embedding ACTA-based primitives in the host language of an object-oriented database. Using ASSET, an application programmer can construct extended tranactions from scratch by properly composing the available languistic primitives.
Reference: [Ber90] <author> Philip A. Bernstein. </author> <title> Transaction processing monitors. </title> <journal> CACM, </journal> <volume> 33(11) </volume> <pages> 75-86, </pages> <year> 1990. </year>
Reference-contexts: For this purpose we have chosen the standard transaction processing monitor architecture, introduced in Bernstein <ref> [Ber90] </ref> and detailed in Gray [GR93], which we abbreviate as the "TP Monitor Architecture". The TP Monitor Architecture is abstract enough to allow observations on TP systems in general, and yet concrete enough to make implementation details obvious in a modern TP monitor, such as Transarc's Encina or Novell's Tuxedo. <p> clarify its relationship to work similar in spirit to ours. 5.1 Extending the Encina TP Monitor TP monitors provide a general framework for transaction processing, supplying the "glue" to bind the many software components of a TP system through services like multithreaded processes, interprocess communication, queue management, and system management <ref> [Ber90] </ref>. While early TP monitors were constructed from tightly integrated product-specific services, modern TP monitors, such as Transarc's Encina [Encina], are layered on modular transaction middleware services.
Reference: [BP95] <author> R. S. Barga and C. Pu. </author> <title> A practical and modular implementation of extended transaction models. </title> <type> Technical Report OGI-CSE-95-004, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <month> February </month> <year> 1995. </year>
Reference-contexts: We describe the implementation of other extended transaction models in the full version of this conference paper <ref> [BP95] </ref>. Through the introduction of metatrans-actions we have enabled transactions to exhibit different extended semantics simply by binding to different extended transaction control operations. This binding can be done dynamically at run time using the meta-transaction interface. <p> Finally, we introduce the individual transaction adapters, and for selected adapters we outline their implementation in Encina. For reasons of space, we must limit our description of transaction adapters, however more detailed descriptions of the reflective transaction framework and transaction adapters can be found in our other papers <ref> [BP95, BPZH95] </ref>. 4.1 Overview of Transaction Adapters Transaction adapters are add-on modules built on top of existing commercial TP components to extend their functionality in support of extended transaction features and semantics. <p> Our early experience shows that the reflective transaction framework is general enough to implement a wide range of extended transaction models <ref> [BP95] </ref>. While the importance of extended transaction models has been known for many years, their use in real-world applications has been hampered by the lack of practical implementations.
Reference: [BPZH95] <author> R.S. Barga, C. Pu, T. Zhou, </author> <title> and W.W. Hseush. A practical method for implementing semantics-based concurrency control. </title> <type> Technical Report OGI-CSE-95, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: Finally, we introduce the individual transaction adapters, and for selected adapters we outline their implementation in Encina. For reasons of space, we must limit our description of transaction adapters, however more detailed descriptions of the reflective transaction framework and transaction adapters can be found in our other papers <ref> [BP95, BPZH95] </ref>. 4.1 Overview of Transaction Adapters Transaction adapters are add-on modules built on top of existing commercial TP components to extend their functionality in support of extended transaction features and semantics. <p> By adapting the definition of conflict offered by the underlying TP system, the conflict adapter is able to provide support for a variety of extended transaction models and semantics-based concurrency control protocols <ref> [BPZH95] </ref>. The conflict adapter relaxes conflicts between E-transactions by two means: a compatibility table defining conflict relationships between operations, and a no-conflict table that records all conflicts explicitly relaxed between E-transactions. <p> The generality of the relaxed conflict rule allows the conflict adapter to capture many semantics-based concurrency control protocols discussed in the literature <ref> [BPZH95] </ref>, and combine them with extended transactions models. <p> If the list of data objects is empty, then T i permits T j access to any data object on which it holds a lock. A complete description of the conflict adapter and its associated TRACS, along with a description of its Encina implementation is described elsewhere <ref> [BPZH95] </ref>. 4.5 Lock Adapter Locks on data objects can restrict the ability of a transaction to see the effects of other transactions on data objects while they are executing. <p> If the field listing the data objects is empty then this corresponds to all locks that T i holds. The lock adapter supports additional options for specifying what locks are to be delegated, which are described elsewhere <ref> [BPZH95] </ref>. 9 5 Discussion In this section, we first discuss aspects of layering our implementation of the reflective transaction framework on the Encina TP Monitor.
Reference: [BEK93] <author> O. Bukhres, et al. </author> <title> Implementation of the Flex Transaction Model. </title> <journal> Bulletin of the IEEE Technical Committee on Data Engineering, </journal> <volume> 16(2) </volume> <pages> 28-32, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Prototype implementations of special-purpose extended transaction models can be found in the literature. Some well known representatives include the APRICOTS system [Sch93] (A PRototype Implementation of a COnTract System [WR93]), the multi-level transaction model [WH93], and the Flex transaction model used in the InterBase project <ref> [BEK93] </ref>. Also related, an approach to implement extended transaction models using a commercial workflow manager has been suggested in [MAG + 95], though the generality of this approach remains to be seen.
Reference: [CR90] <author> P.K. Chrysanthis and K. Ramamritham. </author> <title> ACTA: A framework for specifying and reasoning about transaction structure and behavior. </title> <booktitle> In Proceedings of 1990 ACM SIGMOD, </booktitle> <pages> pages 194-203, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: The ability to describe different 1 extended transaction models in a common framework has been demonstrated previously in theoretical frameworks such as ACTA <ref> [CR90] </ref>. However, the practical implementation of such independently proposed extended transaction models in an industrial-grade transaction management system is new and significant. The rest of this paper is organized as follows. We present the Reflective Transaction Framework in Section 2. <p> The ability to specify different extended transaction models using a small set of modeling primitives was first demonstrated in the formal framework of ACTA <ref> [CR90] </ref>. In ACTA five simple building blocks are used to specify the essential components of extended transaction models, namely history, inter-transaction dependencies, transaction conflict, transaction view, and delegation.
Reference: [Elm93] <editor> Ahmed K. Elmagarmid, editor. </editor> <title> Database Transaction Models for Advanced Applications. </title> <publisher> Mor-gan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: Numerous extended transaction models have been proposed <ref> [Elm93] </ref> which relax the ACID prop Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the VLDB copyright notice and the title of the publication and its date appear, and notice is given that <p> We refer the reader to Elmagarmid <ref> [Elm93] </ref> for a collection of recent work. In contrast, the reflective transaction framework represents an evolutionary approach. Rather than attempting to develop a specialized transaction execution facility, the reflective transaction framework seeks to build support for extended transactions from transaction facilities which support classic transactions.
Reference: [Encina] <institution> Transarc Corp. Encina Product Overview. Transarc Corp, </institution> <address> Pittsburgh, PA., </address> <year> 1991. </year>
Reference-contexts: Transaction adapters take advantage of existing transaction services to the extent possible, eliminating unnecessary infrastructure development and facilitating technology transfer. Insight that a commercial TP monitor could be used was derived, in part, from previous research in which we extended Encina <ref> [Encina] </ref>, a commercial TP facility distributed and supported by Transarc, to implement Epsilon Serializability [PC93]. In this paper, we again take advantage of Encina's modularity to implement the reflective transaction framework. <p> While early TP monitors were constructed from tightly integrated product-specific services, modern TP monitors, such as Transarc's Encina <ref> [Encina] </ref>, are layered on modular transaction middleware services. These transaction middleware services provide the basic building blocks for many of the features that a TP monitor must provide, and have a wide variety of uses.
Reference: [ETPR] <author> Transarc Corp. </author> <title> Encina Toolkit Server Core Programmer's Reference. </title> <institution> Transarc Corp, </institution> <address> Pitts-burgh, PA., </address> <year> 1991. </year>
Reference-contexts: Though each E-transaction will define its own function for processing commit or abort transaction management operations, the Transaction Management Adapter must provide commit and abort preprocessing to manage transaction dependencies. Thus, we define two functions, PreCommit and PreAbort, and register each with the appropriate callback function <ref> [ETPR] </ref>. The definitions of these new functions are outlined below: PreCommit (T i ) Function Execution Steps: 1.
Reference: [GHKM94] <author> D. Georgakopoulos, et al. </author> <title> Specification and management of extended transactions in a programmable transaction environment. </title> <booktitle> In Proceedings of the 1994 IEEE Conference on Data Engineering, </booktitle> <pages> pages 462-473, </pages> <month> Feb </month> <year> 1994. </year>
Reference-contexts: Using ASSET, an application programmer can construct extended tranactions from scratch by properly composing the available languistic primitives. In contrast, TSME <ref> [GHKM94] </ref> represents the specialized transaction facility approach, in which the ability to implement extended transaction models is provided at a high level through a transaction specification language and mechanisms which configure the run-time transaction facility to realize extended extended transactions.
Reference: [GR93] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1993. </year>
Reference-contexts: We achieve modularity by applying the Open Implementation approach [Kic92], also known as meta-object protocol [KdRB91], to design the reflective transaction framework. We achieve practicality by basing the implementation of the reflective transaction framework on the Transaction Processing (TP) Monitor Architecture <ref> [GR93] </ref>, which is widely applicable to many modern commercial TP systems. One goal of our research is to bring together research advances in extended transaction models and commercial TP monitors, an interaction from which both sides may benefit. <p> For this purpose we have chosen the standard transaction processing monitor architecture, introduced in Bernstein [Ber90] and detailed in Gray <ref> [GR93] </ref>, which we abbreviate as the "TP Monitor Architecture". The TP Monitor Architecture is abstract enough to allow observations on TP systems in general, and yet concrete enough to make implementation details obvious in a modern TP monitor, such as Transarc's Encina or Novell's Tuxedo. <p> Together, these modules provide the basic building blocks for the services of the standard TP monitor architecture <ref> [GR93, pp. 21] </ref>. It was a basic tenet that our reflective transaction framework should be built as a relatively thin layer over the transaction middleware services provided by the Transarc Toolkit.
Reference: [KdRB91] <author> G. Kiczales, et al. </author> <title> The Art of the Metaobject Protocol. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: In this paper, we present the Reflective Transaction Framework as a practical and modular method to implement extended transaction models. We achieve modularity by applying the Open Implementation approach [Kic92], also known as meta-object protocol <ref> [KdRB91] </ref>, to design the reflective transaction framework. We achieve practicality by basing the implementation of the reflective transaction framework on the Transaction Processing (TP) Monitor Architecture [GR93], which is widely applicable to many modern commercial TP systems.
Reference: [Kic92] <author> Gregor Kiczales. </author> <title> Towards a new model of abstraction in software engineering. </title> <booktitle> In Proceedings of the IMSA Workshop on Reflection and Meta-level Architectures, </booktitle> <year> 1992. </year> <note> See http://www.xerox.com/PARC/spl/eca/oi.html for updates. </note>
Reference-contexts: In this paper, we present the Reflective Transaction Framework as a practical and modular method to implement extended transaction models. We achieve modularity by applying the Open Implementation approach <ref> [Kic92] </ref>, also known as meta-object protocol [KdRB91], to design the reflective transaction framework. We achieve practicality by basing the implementation of the reflective transaction framework on the Transaction Processing (TP) Monitor Architecture [GR93], which is widely applicable to many modern commercial TP systems. <p> This separation follows the Open Implementation approach <ref> [Kic92] </ref>, in which the functional interface is separated from the meta interface, and the purpose of the meta interface is to modify the behavior of the functional interface. In our separation of interfaces, presented below, Level 1 and Level 2 are functional, subdivided for clarity only.
Reference: [Mae87] <author> P. Maes. </author> <title> Concepts and experiments in computational reflection. </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications (OOPSLA), </booktitle> <month> Octo-ber </month> <year> 1987. </year>
Reference-contexts: An application programmer can then use both the transaction demarcation interface and the extended transaction interface to develop transactional applications. Reflection <ref> [Mae87] </ref> plays a crucial role in the reflective transaction framework, making it possible to open up the transaction processing system's functionality without revealing unnecessary implementation details.
Reference: [MAG + 95] <author> C. Mohan, et al. Exotica: </author> <title> A research Perspective on Workflow Management Systems. </title> <journal> Bulletin of the IEEE Technical Committee on Data Engineering, </journal> <pages> pages 19-26, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Also related, an approach to implement extended transaction models using a commercial workflow manager has been suggested in <ref> [MAG + 95] </ref>, though the generality of this approach remains to be seen. In a final note on related work, a feature which further distinguishes our work is the application of the Open Implementation approach.
Reference: [Moh94] <author> C. Mohan. </author> <title> Advanced transaction models | survey and critique. </title> <booktitle> Tutorial Presented at the ACM SIGMOD International Conference on Management of Data, </booktitle> <year> 1994. </year>
Reference-contexts: Furthermore, since most extended transaction models have been merely theoretical constructs, there are a number of important design issues that have generally not been discussed in the literature <ref> [Moh94] </ref>. Our hope is that the reflective transaction framework will remedy this situation, providing a clear migration path to incorporate research advances in 11 extended transaction models into commercial TP moni-tors. This will enable us to draw conclusions from direct experience in applying extended models in real, working environments.
Reference: [MP92] <author> B. Martin and C. Pederson. </author> <title> Long-lived concurrent activities. </title> <editor> In Amar Gupta, editor, </editor> <booktitle> Distributed Object Management, </booktitle> <pages> pages 188-206. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: The reflective transaction framework enables us to implement a wide range of extended transaction models, and we illustrate this with the implementation of two independently proposed extended transaction models for collaborative work (split/join [PKH88] and cooperative groups <ref> [MP92, RC92] </ref>). The ability to describe different 1 extended transaction models in a common framework has been demonstrated previously in theoretical frameworks such as ACTA [CR90]. However, the practical implementation of such independently proposed extended transaction models in an industrial-grade transaction management system is new and significant. <p> follows: E_joinOperation // delegate locks related to objects in DelegateSet. delegate_lock (T2, DelegateSet); // delegate ops related to objects in DelegateSet. delegate_op (T2, DelegateSet); // terminate execution of T1. commit (T1); // return control to invoking transaction. return; - 3.2 Cooperative Group Transaction Model In the cooperative group transaction model <ref> [MP92, RC92] </ref>, individual transactions may join a transaction group designed to facilitate cooperative access to a set of data objects. The cooperative group model supports two types of transactions, namely, group transactions and member transactions, each having its own set of transaction management operations.
Reference: [PC93] <author> C. Pu and S.W. Chen. </author> <title> ACID properties need fast relief: Relaxing consistency using epsilon serializability. </title> <booktitle> In Proceedings of Fifth International Workshop on High Performance Transaction Systems, Asilomar, </booktitle> <address> California, </address> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: Insight that a commercial TP monitor could be used was derived, in part, from previous research in which we extended Encina [Encina], a commercial TP facility distributed and supported by Transarc, to implement Epsilon Serializability <ref> [PC93] </ref>. In this paper, we again take advantage of Encina's modularity to implement the reflective transaction framework.
Reference: [PKH88] <author> C. Pu, et al. </author> <title> Split-transactions for open-ended activities. </title> <booktitle> In Proceedings of the Fourteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 27-36, </pages> <address> Los Angeles, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: In this paper, we again take advantage of Encina's modularity to implement the reflective transaction framework. The reflective transaction framework enables us to implement a wide range of extended transaction models, and we illustrate this with the implementation of two independently proposed extended transaction models for collaborative work (split/join <ref> [PKH88] </ref> and cooperative groups [MP92, RC92]). The ability to describe different 1 extended transaction models in a common framework has been demonstrated previously in theoretical frameworks such as ACTA [CR90]. <p> As such, the many variations that exist on the split/join and cooperative group transaction models were considered outside the scope of this paper. 3.1 Split/Join Transaction Model In the split/join transaction model <ref> [PKH88] </ref> it is possible for an E-transaction to split into two serializ-able E-transactions or join another E-transaction. E-transactions in the split/join model are associated with five transaction management operations: Begin, Split, Join, Abort, and Commit.
Reference: [RC92] <author> K. Ramamritham and P.K. Chrysanthis. </author> <title> In search of acceptability criteria: Database consistency requirements and transaction correctness properties. </title> <editor> In Amar Gupta, editor, </editor> <booktitle> Distributed Object Management, </booktitle> <pages> pages 212-230. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: The reflective transaction framework enables us to implement a wide range of extended transaction models, and we illustrate this with the implementation of two independently proposed extended transaction models for collaborative work (split/join [PKH88] and cooperative groups <ref> [MP92, RC92] </ref>). The ability to describe different 1 extended transaction models in a common framework has been demonstrated previously in theoretical frameworks such as ACTA [CR90]. However, the practical implementation of such independently proposed extended transaction models in an industrial-grade transaction management system is new and significant. <p> follows: E_joinOperation // delegate locks related to objects in DelegateSet. delegate_lock (T2, DelegateSet); // delegate ops related to objects in DelegateSet. delegate_op (T2, DelegateSet); // terminate execution of T1. commit (T1); // return control to invoking transaction. return; - 3.2 Cooperative Group Transaction Model In the cooperative group transaction model <ref> [MP92, RC92] </ref>, individual transactions may join a transaction group designed to facilitate cooperative access to a set of data objects. The cooperative group model supports two types of transactions, namely, group transactions and member transactions, each having its own set of transaction management operations.
Reference: [Reu82] <author> A. Reuter. </author> <title> Concurrency on high traffic data elements. </title> <booktitle> ACM Principles of Database Systems, </booktitle> <volume> 8(2) </volume> <pages> 186-213, </pages> <year> 1982. </year>
Reference-contexts: 1 Introduction Although the ACID properties (atomicity, consistency, isolation, and durability) <ref> [Reu82] </ref> of traditional transactions in Online Transaction Processing (OLTP) systems have proven very useful in banking and airline reservations, they are stronger than necessary for many applications and in some cases prevent desirable sharing of information.
Reference: [Sch93] <author> F. Schwenkreis. </author> <title> APRICOTS A prototype implementation of a ConTract System. </title> <booktitle> In Proceedings of the 12th Symposium on Reliable Distributed Systems, </booktitle> <address> Princeton, NJ., </address> <publisher> IEEE Computer Press, </publisher> <year> 1993. </year>
Reference-contexts: Prototype implementations of special-purpose extended transaction models can be found in the literature. Some well known representatives include the APRICOTS system <ref> [Sch93] </ref> (A PRototype Implementation of a COnTract System [WR93]), the multi-level transaction model [WH93], and the Flex transaction model used in the InterBase project [BEK93].
Reference: [WR93] <author> H. Wachter and A. Reuter. </author> <title> The ConTract Model. </title> <booktitle> In [Elm93]. </booktitle>
Reference-contexts: Prototype implementations of special-purpose extended transaction models can be found in the literature. Some well known representatives include the APRICOTS system [Sch93] (A PRototype Implementation of a COnTract System <ref> [WR93] </ref>), the multi-level transaction model [WH93], and the Flex transaction model used in the InterBase project [BEK93]. Also related, an approach to implement extended transaction models using a commercial workflow manager has been suggested in [MAG + 95], though the generality of this approach remains to be seen.
Reference: [WH93] <author> G. Weikum and C. Hasse. </author> <title> Multi-level transaction management for complex objects: Implementation, performance, parallelism. </title> <journal> In VLDB Journal, </journal> <volume> 2(4), </volume> <year> 1993. </year> <month> 12 </month>
Reference-contexts: Prototype implementations of special-purpose extended transaction models can be found in the literature. Some well known representatives include the APRICOTS system [Sch93] (A PRototype Implementation of a COnTract System [WR93]), the multi-level transaction model <ref> [WH93] </ref>, and the Flex transaction model used in the InterBase project [BEK93]. Also related, an approach to implement extended transaction models using a commercial workflow manager has been suggested in [MAG + 95], though the generality of this approach remains to be seen.
References-found: 24

