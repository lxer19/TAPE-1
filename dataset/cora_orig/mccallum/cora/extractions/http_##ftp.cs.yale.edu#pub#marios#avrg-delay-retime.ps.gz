URL: http://ftp.cs.yale.edu/pub/marios/avrg-delay-retime.ps.gz
Refering-URL: http://ftp.cs.yale.edu/pub/marios/
Root-URL: http://www.cs.yale.edu
Email: e-mail: marios@theory.lcs.mit.edu  
Title: Understanding Retiming through Maximum Average-Delay Cycles  
Author: Marios C. Papaefthymiou 
Note: 1 Supported in part by the Defense Advanced Research Projects Agency under contract N00014-87-K-0825.  
Address: Cambridge, MA 02139  
Affiliation: Laboratory for Computer Science Massachusetts Institute of Technology  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> McGraw-Hill, MIT Press, </publisher> <year> 1990. </year> <month> 17 </month>
Reference-contexts: In order to compute the minimum feasible period of the circuit, we can use Karp's O (V E) strongly polynomial algorithm for finding maximum average-weight cycles in a graph [4]. For the shortest-paths problem we can use the Bellman-Ford O (V E) algorithm <ref> [1] </ref>. For these choices the total running-time is O (V E). However, under the reasonable assumption that w max is independent of the size of the circuit, we can use scaling algorithms to obtain improved running times. <p> In practice, we expect d max and w max to be independent of the size of the circuit. Our algorithm operates as follows. First, it finds dR (C fl (G))e by binary searching the interval <ref> [1; : : : ; V d max ] </ref> of possible periods for the smallest integer n that does not induce negative-weight cycles in G 0 = (V; E; w 0 ), where w 0 (e) = w (e) d (v)=n for every edge u e ! v 2 E. <p> Ini tially, it identifies dR (C fl (G))e by binary searching the interval <ref> [1; : : : ; V d max ] </ref> for the smallest integer n that does not induce negative-weight cycles in G 0 . Each iteration requires the solution of one shortest-paths problem on G 0 [5]. <p> Use Algorithm MLP to binary search the d max + 1 possible values of min (G) for the minimum period that achieves latency no greater than l. 2 Step 1 is a depth-first search in G and requires O (E) steps <ref> [1] </ref>. Step 2 performs O (lg d max ) applications of Algorithm MLP. Therefore, Algorithm MPP terminates in O (E lg d max ) steps.
Reference: [2] <author> S. Even and A. Litman. </author> <title> On the capabilities of systolic systems. </title> <booktitle> 3rd ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <month> July </month> <year> 1991. </year>
Reference-contexts: As a special case of these general bounds we have that the maximum delay-to-register ratio in any unit-delay circuit characterizes exactly the minimum clock period achievable by retiming. (The result for the special case of unit-delay circuitry has been claimed independently in <ref> [2] </ref>.) Our tight bounds yield better algorithms for several important problems related to retiming, such as minimum clock period retiming, retiming for approximately minimum clock period and minimum clock period pipelining. The rest of the paper has five sections.
Reference: [3] <author> H. Gabow and R. Tarjan. </author> <title> Faster scaling algorithms for network problems. </title> <journal> SIAM J. Computing, </journal> <month> October </month> <year> 1989. </year>
Reference-contexts: Our procedure utilizes known scaling algorithms for finding maximum average-weight cycles and single-source shortest-paths in a graph <ref> [11, 3] </ref>. Its running-time improves the running-time obtained using the techniques in [10] by a multiplicative factor of O (lg V ). In Section 4.2 we show how to retime arbitrary delay circuits to achieve their minimum clock period in O (V E lg d max ) steps. <p> In [10], the problem is solved by performing a binary search over the jV j possible clock periods. Each iteration in the binary search requires the solution of a shortest-paths problem. Using the Gabow-Tarjan algorithm for shortest-paths <ref> [3] </ref>, the total running-time of this algorithm is O (V 1=2 E lg V lg (V w max )), where w max is the maximum number of registers on any wire in the circuit. <p> be found in O (V 1=2 E lg (V w max )) steps, using the Ahuja-Orlin scaling algorithm [11] for maximum average-weight cycles in a graph, and the shortest-paths lengths can be found in O (V 1=2 E lg (V w max )) steps, using the Gabow-Tarjan algorithm for shortest-paths <ref> [3] </ref>. <p> The computation of dR (C fl (G))e can be performed in O (V 1=2 E lg (V d max w max ) lg (V d max )) steps, using the Gabow-Tarjan algorithm for shortest-paths <ref> [3] </ref>. <p> The overall running-time of this algorithm is O (V 1=2 E lg (V d max w max ) lg (V d max )), using the Gabow-Tarjan scaling algorithm for shortest-paths <ref> [3] </ref>. 11 5 Minimum Clock Period Pipelining of Combinational Cir- cuitry 5.1 The Algorithm In this section, we use ideas drawn from the characterization of the minimum clock period for sequential circuits to develop an O (E lg d max ) algorithm for the problem of minimum clock period pipelining of
Reference: [4] <author> R. Karp. </author> <title> A characterization of the minimum cycle mean in a digraph. </title> <journal> Discrete Mathematics, </journal> <volume> 23 </volume> <pages> 309-311, </pages> <year> 1978. </year>
Reference-contexts: In [10] it is shown that the rounded-up lengths of these shortest-paths yield a retiming with clock period min (G). In order to compute the minimum feasible period of the circuit, we can use Karp's O (V E) strongly polynomial algorithm for finding maximum average-weight cycles in a graph <ref> [4] </ref>. For the shortest-paths problem we can use the Bellman-Ford O (V E) algorithm [1]. For these choices the total running-time is O (V E).
Reference: [5] <author> E. L. Lawler. </author> <title> Combinatorial Optimization, Networks and Matroids. </title> <publisher> Holt, Rinehart and Win-ston, </publisher> <address> New York, </address> <year> 1976. </year>
Reference-contexts: Determine a set of integer feasible values for the unknowns x (u) or determine that no such set exists. 2 The following theorem is classic in the field of combinatorial optimization <ref> [5, 12] </ref>, and provides a method for solving Problem DC. <p> We denote by G c = (V; E c ; w c ) the constraint graph corresponding to the inequalities (1) and (2) for a given c. Theorem 2 implies that we can use the Bellman-Ford O (V E)-time shortest-paths algorithm <ref> [5, page 74] </ref> on the dense constraint graph G c in order to find a retimed circuit with clock-period no greater than c in O (V 3 ) steps. <p> Each iteration in the binary search requires the solution of a shortest-paths problem on G 0 <ref> [5] </ref>. Subsequently, the algorithm binary searches the interval [dR (C fl (G))e ; : : : ; dR (C fl (G))e + d max 1] of possible min (G) values, for the minimum integer that yields a legal retiming of the circuit. <p> Ini tially, it identifies dR (C fl (G))e by binary searching the interval [1; : : : ; V d max ] for the smallest integer n that does not induce negative-weight cycles in G 0 . Each iteration requires the solution of one shortest-paths problem on G 0 <ref> [5] </ref>. Rounding up the lengths of the shortest-paths from the last of these iterations yields, according to Theorem 4, a retiming of the circuit with period that does not exceed min (G) by more than d max 1. <p> The following theorem <ref> [5] </ref> provides a method for solving this kind of problems.
Reference: [6] <author> F. T. Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays, Trees and Hypercubes. </title> <publisher> Morgan Kaufman, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction The semisystolic model of computation affords great flexibility and ease in designing parallel algorithms, and can be implemented by synchronous circuits built of functional elements and globally clocked registers <ref> [6] </ref>. Retiming, which was introduced in [7, 8, 9] and treated in [10], is a well-known design automation technique which transforms a given synchronous circuit into a faster circuit, that is, a circuit with shorter clock period, by relocating the registers of the given circuit while preserving its functionality.
Reference: [7] <author> C. E. Leiserson. </author> <title> Area-efficient VLSI Computation. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <year> 1981. </year> <title> Published in book form by the MIT Press, </title> <address> Cambridge, Massachusetts, </address> <year> 1983. </year>
Reference-contexts: 1 Introduction The semisystolic model of computation affords great flexibility and ease in designing parallel algorithms, and can be implemented by synchronous circuits built of functional elements and globally clocked registers [6]. Retiming, which was introduced in <ref> [7, 8, 9] </ref> and treated in [10], is a well-known design automation technique which transforms a given synchronous circuit into a faster circuit, that is, a circuit with shorter clock period, by relocating the registers of the given circuit while preserving its functionality. <p> We use these bounds to obtain improved algorithms for several important problems related to retiming. We model a synchronous circuit according to <ref> [7, 8, 9] </ref> by a circuit graph G = (V; E; d; w). A vertex v 2 V corresponds to a functional element of the circuit, and an edge u e ! v 2 E corresponds to a wire between the functional elements u and v.
Reference: [8] <author> C. E. Leiserson, F. M. Rose, and J. B. Saxe. </author> <title> Optimizing synchronous circuitry by retiming. </title> <booktitle> 3rd Caltech Conference on VLSI, </booktitle> <year> 1983. </year> <editor> R. Bryant, </editor> <publisher> ed., </publisher> <pages> pp. 87-116. </pages>
Reference-contexts: 1 Introduction The semisystolic model of computation affords great flexibility and ease in designing parallel algorithms, and can be implemented by synchronous circuits built of functional elements and globally clocked registers [6]. Retiming, which was introduced in <ref> [7, 8, 9] </ref> and treated in [10], is a well-known design automation technique which transforms a given synchronous circuit into a faster circuit, that is, a circuit with shorter clock period, by relocating the registers of the given circuit while preserving its functionality. <p> We use these bounds to obtain improved algorithms for several important problems related to retiming. We model a synchronous circuit according to <ref> [7, 8, 9] </ref> by a circuit graph G = (V; E; d; w). A vertex v 2 V corresponds to a functional element of the circuit, and an edge u e ! v 2 E corresponds to a wire between the functional elements u and v.
Reference: [9] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Optimizing synchronous systems. </title> <journal> Journal of VLSI and Computer Systems, </journal> <volume> 1(1) </volume> <pages> 41-67, </pages> <year> 1983. </year>
Reference-contexts: 1 Introduction The semisystolic model of computation affords great flexibility and ease in designing parallel algorithms, and can be implemented by synchronous circuits built of functional elements and globally clocked registers [6]. Retiming, which was introduced in <ref> [7, 8, 9] </ref> and treated in [10], is a well-known design automation technique which transforms a given synchronous circuit into a faster circuit, that is, a circuit with shorter clock period, by relocating the registers of the given circuit while preserving its functionality. <p> We use these bounds to obtain improved algorithms for several important problems related to retiming. We model a synchronous circuit according to <ref> [7, 8, 9] </ref> by a circuit graph G = (V; E; d; w). A vertex v 2 V corresponds to a functional element of the circuit, and an edge u e ! v 2 E corresponds to a wire between the functional elements u and v.
Reference: [10] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Retiming synchronous circuitry. </title> <journal> Algorithmica, </journal> <volume> 6(1), </volume> <year> 1991. </year> <note> Also available as MIT/LCS/TM-372. </note>
Reference-contexts: 1 Introduction The semisystolic model of computation affords great flexibility and ease in designing parallel algorithms, and can be implemented by synchronous circuits built of functional elements and globally clocked registers [6]. Retiming, which was introduced in [7, 8, 9] and treated in <ref> [10] </ref>, is a well-known design automation technique which transforms a given synchronous circuit into a faster circuit, that is, a circuit with shorter clock period, by relocating the registers of the given circuit while preserving its functionality. <p> Our procedure utilizes known scaling algorithms for finding maximum average-weight cycles and single-source shortest-paths in a graph [11, 3]. Its running-time improves the running-time obtained using the techniques in <ref> [10] </ref> by a multiplicative factor of O (lg V ). In Section 4.2 we show how to retime arbitrary delay circuits to achieve their minimum clock period in O (V E lg d max ) steps. <p> of registers on any wire in the circuit grow subpolynomially with the size of the circuit (actually, it is realistic to assume that d max and w max do not depend at all on the size of the circuit), our algorithm is asymptotically more efficient than the previously known schemes <ref> [10] </ref>, because our preprocessing step guarantees that the range of the binary search is small. In Section 4.3 we present an O (V 1=2 E lg (V d max w max ) lg (V d max ))-time procedure for retiming a circuit with arbitrary delays. <p> For unit-delay circuitry, this running-time is optimal within a constant multiplicative factor. The previous general techniques required O (V E lg V ) steps <ref> [10] </ref>. Finally, Section 6 concludes the paper and proposes an interesting open problem. 4 2 Retiming and Shortest Paths In this section we define some notation and terminology needed in the rest of the paper. We formulate retiming according to [10] as a set of difference constraints, and we introduce the <p> general techniques required O (V E lg V ) steps <ref> [10] </ref>. Finally, Section 6 concludes the paper and proposes an interesting open problem. 4 2 Retiming and Shortest Paths In this section we define some notation and terminology needed in the rest of the paper. We formulate retiming according to [10] as a set of difference constraints, and we introduce the notion of the constraint graph. Finally, we exhibit the relation between retiming and the existence of single-source shortest-paths in the constraint graph. <p> There are potentially O (V 2 ) inequalities of the form (2), one for each pair of vertices in G, and they can be computed in O (V E + V 2 lg V ) steps <ref> [10] </ref>. The constraints (1) and (2) on the unknowns r (v) in Theorem 1 are linear inequalities involving only differences of unknowns. <p> An asymptotically faster algorithm which runs in O (V E)-time is given in <ref> [10] </ref>. 3 Minimum Clock Period Characterization 3.1 Bounds on min (G) In this section we characterize the minimum clock period min (G) that we can obtain by retiming a given general circuit G = (V; E; d; w) in terms of the maximum delay-to-register ratio of the cycles in the circuit <p> Specifically, we consider the following problem: Given a unit-delay sequential circuit G = (V; E; 1; w), determine a retiming r such that (G r ) is minimum. In <ref> [10] </ref>, the problem is solved by performing a binary search over the jV j possible clock periods. Each iteration in the binary search requires the solution of a shortest-paths problem. <p> Then, it solves a single shortest-paths problem on the graph G 0 = (V; E; w 0 ), where w 0 (e) = w (e) 1= min (G) for every edge u e ! v 2 E. In <ref> [10] </ref> it is shown that the rounded-up lengths of these shortest-paths yield a retiming with clock period min (G). In order to compute the minimum feasible period of the circuit, we can use Karp's O (V E) strongly polynomial algorithm for finding maximum average-weight cycles in a graph [4]. <p> An O (V E lg V ) algorithm for this problem is given in <ref> [10] </ref>. This algorithm performs an O (V E + V 2 lg V ) preprocessing step that computes all O (V 2 ) possible clock periods. Subsequently, it binary searches this set of possible clock periods in order to find the minimum feasible one. <p> Each iteration in the binary search for min (G) uses the O (V E) retiming algorithm of Leiserson-Saxe <ref> [10] </ref>, and thus the overall running-time is O (V E lg d max ). 4.3 Retiming for Approximately Minimum Clock Period In this section we give an algorithm for determining a retiming of a circuit with arbitrary delays, such that its clock period is approximately minimized.
Reference: [11] <author> J. B. Orlin and R. K. Ahuja. </author> <title> New scaling algorithms for the assignment and minimum cycle mean problem. </title> <type> Technical Report 2019-88, </type> <institution> MIT Sloan School of Management, </institution> <year> 1988. </year>
Reference-contexts: Our procedure utilizes known scaling algorithms for finding maximum average-weight cycles and single-source shortest-paths in a graph <ref> [11, 3] </ref>. Its running-time improves the running-time obtained using the techniques in [10] by a multiplicative factor of O (lg V ). In Section 4.2 we show how to retime arbitrary delay circuits to achieve their minimum clock period in O (V E lg d max ) steps. <p> However, under the reasonable assumption that w max is independent of the size of the circuit, we can use scaling algorithms to obtain improved running times. The minimum clock period can be found in O (V 1=2 E lg (V w max )) steps, using the Ahuja-Orlin scaling algorithm <ref> [11] </ref> for maximum average-weight cycles in a graph, and the shortest-paths lengths can be found in O (V 1=2 E lg (V w max )) steps, using the Gabow-Tarjan algorithm for shortest-paths [3].
Reference: [12] <author> C. Papadimitriou and K. Steiglitz. </author> <title> Combinatorial Optimization, Algorithms and Complexity. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1982. </year>
Reference-contexts: Determine a set of integer feasible values for the unknowns x (u) or determine that no such set exists. 2 The following theorem is classic in the field of combinatorial optimization <ref> [5, 12] </ref>, and provides a method for solving Problem DC.
Reference: [13] <author> M. C. Papaefthymiou. </author> <title> On retiming synchronous circuitry and mixed-integer optimization. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> September </month> <year> 1990. </year> <note> Available as MIT/LCS/TR-486. </note>

References-found: 13

