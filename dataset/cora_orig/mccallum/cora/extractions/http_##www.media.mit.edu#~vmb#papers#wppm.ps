URL: http://www.media.mit.edu/~vmb/papers/wppm.ps
Refering-URL: http://www.media.mit.edu/~vmb/
Root-URL: http://www.media.mit.edu
Title: A System for Parallel Media Processing  
Author: John A. Watlington and V. Michael Bove, Jr. 
Keyword: multimedia, dataflow, streams, digital signal processing  
Note: (correspondence to second author)  
Address: 20 Ames Street, Room E15-324, Cambridge MA 02139 USA  
Affiliation: MIT Media Laboratory  
Email: wad@media.mit.edu, vmb@media.mit.edu  
Phone: +1 617 253 0334, fax +1 617 258 6264  
Abstract: We describe a parallel computer system for processing media: audio, video, and graphics, among others. The system supports medium to coarse grain parallelism, using a dataflow model of execution, on a range of machine architectures scaling from a single von Neumann or general purpose processor (GPP) up to networks of several hundred heterogeneous processors. A distributed resource manager, extending or subsuming the functionality of a traditional operating system, is an integral and necessary part of the system. While we are building a system for processing a variety of media, in this paper we concentrate on video because it provides an extreme case in terms of both data rates and available parallelism. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Arvind and Robert A. </author> <title> Iannucci. Two fundamental issues in multiprocessing. </title> <booktitle> In Proc. of DFLVR Conf. on Parallel Processing in Science and Eng., </booktitle> <year> 1987. </year> <title> Also in Architectural 14 Alternatives for Exploiting Parallelism, </title> <editor> ed. by David J. Lilja, </editor> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1991. </year>
Reference-contexts: Another example is a reconfigurable processor, which may be rapidly configured to provide application specific functionality [23][8]. 1 According to Arvind <ref> [1] </ref>, the two fundamental issues encountered in building a parallel processor computer system are: 1. The non-deterministic latency associated with accessing shared memory in a multiprocessor, and 2.
Reference: [2] <author> Arvind and R. E. Thomas. I-structures: </author> <title> An efficient data type for functional languages. </title> <type> Technical Report LSC/TM-178, </type> <institution> MIT Laboratory for Computer Science, </institution> <year> 1980. </year>
Reference-contexts: The synchronization state of a stream fragment follows the state diagram shown above. This is similar to that proposed for an I-structure <ref> [2] </ref>, with an extension to support two priority levels. This is done to avoid the condition of processors sitting idle, by beginning data-driven processing in the absence of data demands.
Reference: [3] <author> Edward A. Ashcroft, Anthony A. Faustini, Rangaswamy Jagannathan, and William W. Wadge. </author> <title> Multidimensional Programming. </title> <publisher> Oxford Univ. Press, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: While a demand-driven approach prevents unnecessary computations from being performed, a demand for application output typically sees the complete computational latency of the application before the requested data is available. The demand driven evaluation, or eduction <ref> [3] </ref>, of a dependency graph is described by two rules : 8 1. The need for an data value at the output of a process causes it to be demanded. 2. <p> Data and instructions may be lost or garbled in transmission between processors, and processor nodes may function incorrectly for various reasons. The fault-tolerant nature of functional languages, and eduction in particular, have been noted previously [10] <ref> [3] </ref>.
Reference: [4] <author> V. Michael Bove, Jr. </author> <title> Multimedia based on object models: Some whys and hows. </title> <journal> IBM Systems Journal, </journal> <volume> 35(3 & 4), </volume> <year> 1996. </year>
Reference: [5] <author> V. Michael Bove, Jr., Brett D. Granger, and John A. Watlington. </author> <title> Real-time decoding and display of structured video. </title> <booktitle> In Proc. IEEE Int'l. Conf. on Multimedia Computing and Systems '94, </booktitle> <address> Boston, MA, </address> <month> May </month> <year> 1994. </year>
Reference: [6] <author> Joseph T. Buck and Edward A. Lee. </author> <title> Scheduling dynamic dataflow graphs with bounded memory using the token flow mode. </title> <booktitle> In Proc. IEEE 1993 Intl. Conf. on Acoustics, Speech and Signal Processing, </booktitle> <address> pages I-429 - I-432, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: If not a constant rate process, upper and lower bounds may be used to characterize the process rate <ref> [6] </ref>, but a following stream merge will require serial stream reassembly. An example of the latter situation from digital media is variable-length coding, for which a maximum and minimum compression factor are known, but the instantaneous rate will vary with the statistics of the data. <p> While both data and process parallelism are available in this example, the chosen partition on a homogenous machine will most likely be data partitioning to minimize communication between processing nodes. As indicated earlier, memory constraints may force partitions smaller than the most efficient to be used. As discussed elsewhere <ref> [6] </ref>, it is also possible to construct dependency graphs which may (due to feedback loops) only be evaluated using synchronization data blocks of limited size. While stream access overlap allows pipelining, it also increases the communications cost of obtained data parallelism.
Reference: [7] <author> D. Culler and G. Papadopoulos. </author> <title> The Explicit Token Store. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 10(4) </volume> <pages> 289-308, </pages> <month> Dec </month> <year> 1990. </year>
Reference-contexts: Unfortunately, a fine-grained dataflow implementation encounters the high overhead of synchronizing (token matching, or scheduling) every instruction, producing results which aren't competitive with imperative implementations of equivalent cost. Several of the refinements to fine-grained, static, dataflow are attempts to utilize data and instruction locality <ref> [7] </ref>. In particular, hybrid dataflow schemes [9][16][17] propose a scheduling quantum larger than a single instruction in an effort to minimize the amount of synchronization while still providing an acceptable level of parallelism.
Reference: [8] <author> Setven A. Guccione and Mario J. Gonzalez. </author> <title> A data-parallel programming model for reconfigurable architectures. </title> <booktitle> In Proc. IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <pages> pages 79-87, </pages> <address> Napa, CA, </address> <year> 1993. </year>
Reference: [9] <editor> R.A. Iannucci. </editor> <title> Toward a Dataflow/von Neumann Hybrid Architecture. </title> <booktitle> In Proc. 15th Annual Int'l Symposium on Computer Architecture, </booktitle> <pages> pages 131-140. </pages> <publisher> ACM, </publisher> <year> 1988. </year>
Reference: [10] <author> R. Jagannathan and E. A. Ashcroft. </author> <title> Fault tolerance in parallel implementations of functional languages. </title> <booktitle> In Proc. 21th Int'l Symp. on Fault-Tolerant Computing, </booktitle> <pages> pages 256-263, </pages> <address> Montreal, Quebec, Canada, </address> <month> June </month> <year> 1991. </year> <journal> IEEE. </journal> <volume> 15 </volume>
Reference-contexts: Data and instructions may be lost or garbled in transmission between processors, and processor nodes may function incorrectly for various reasons. The fault-tolerant nature of functional languages, and eduction in particular, have been noted previously <ref> [10] </ref> [3].
Reference: [11] <author> K.H. Kim and Chittur Subbaraman. </author> <title> Fault-tolerant real-time objects. </title> <journal> Communications of the ACM, </journal> <volume> 40(1) </volume> <pages> 75-82, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: The resource manager is responsible for evaluating the graphs presented to it to produce output data. Although the nature of the data being processed introduces real-time constraints, we reject as unecessarily limited systems which guarantee performance through static scheduling <ref> [11] </ref>. The method of evaluation selected, eduction, heavily influences the inherent fault-tolerance of the system. 7.1 Eduction There are two basic methods of evaluating the dependency graph which describes a program: demand driven (or call-by-need) and data driven (call-by-value).
Reference: [12] <author> R. Lee. </author> <title> Subword parallelism with MAX-2. </title> <journal> IEEE Micro, </journal> <volume> 16(4) </volume> <pages> 51-59, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: Single "general-purpose" processors, now often with specialized instructions/datapaths for manipulating small data elements in parallel (e.g. using a 32-bit ALU to process 8-bit R,G,B pixel values simultaneously [20] <ref> [12] </ref>), provide adequate flexibility and are showing promise of meeting the needs of the current generation of media applications. Yet, for the reasons presented above, algorithms and applications which require tens to thousands of times more computation and memory bandwidth than current applications are being developed.
Reference: [13] <author> Henry M. Levy. </author> <title> Capability-Based Computer Systems. </title> <publisher> Digital Press, </publisher> <address> Bedford, Mass, </address> <year> 1984. </year>
Reference: [14] <author> A. Ikonomopoulos Murat Kunt and M. Kocher. </author> <title> Second-generation image-coding techniques. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 73(4) </volume> <pages> 549-574, </pages> <year> 1985. </year>
Reference: [15] <author> H. G. Musmann. </author> <title> Object-oriented analysis-synthesis coding of moving objects. Signal Processing: </title> <journal> Image Communication, </journal> <volume> 1 </volume> <pages> 117-138, </pages> <year> 1989. </year>
Reference: [16] <author> R.S. Nikhil, G.M. Papadopoulos, and Arvind. </author> <title> *t: A multithreaded massively parallel architecture. </title> <booktitle> In Proc. 19th Annual Int'l Symposium on Computer Architecture, </booktitle> <pages> pages 156-167, </pages> <year> 1992. </year>
Reference: [17] <author> M. Sato, Y. Kodama, S. Sakai, Y. Yamaguchi, and Y. Koumura. </author> <title> Thread-based programming for em-4 hybrid dataflow machine. </title> <booktitle> In Proc. 19th Annual Int'l Symposium on Computer Architecture, </booktitle> <pages> pages 146-155, </pages> <year> 1992. </year>
Reference: [18] <author> Pierre St.-Hilaire, Steven A. Benton, and Mark Lucente. </author> <title> Synthetic aperture holography: a novel approach to three dimensional displays. </title> <journal> Journal of the Optical Society of America A, </journal> <volume> 9(11) </volume> <pages> 1969-1977, </pages> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: Digital video unlike digital audio is far from operating at human 1 perceptual limits. As display technologies and communications bandwidth permit, higher def-inition systems will add to the computational demands. Alternative output technologies, for example the holographic video displays developed at the MIT Media Laboratory <ref> [18] </ref> [22], push these demands still further. Custom processors operating in parallel and using hardwired communications networks are capable of meeting the computational demands of media processing for a given application, yet the flexibility to support different algorithms is difficult to provide with these architectures.
Reference: [19] <author> Andrew S. Tanenbaum, Sape J. Mullender, and Robbert van Renesse. </author> <title> Using Sparse Capabilities in a Distributed Operating System. </title> <booktitle> In Proceedings 6th Annual Int'l. Conf. on Distributed Computing Systems, </booktitle> <pages> pages 553-563, </pages> <address> New York, 1986. </address> <publisher> IEEE. </publisher>
Reference: [20] <author> M. Tremblay, J. M. O'Connor, V. Narayanan, and H. Liang. </author> <title> VIS speeds new media processing. </title> <journal> IEEE Micro, </journal> <volume> 16(4) </volume> <pages> 51-59, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: Single "general-purpose" processors, now often with specialized instructions/datapaths for manipulating small data elements in parallel (e.g. using a 32-bit ALU to process 8-bit R,G,B pixel values simultaneously <ref> [20] </ref> [12]), provide adequate flexibility and are showing promise of meeting the needs of the current generation of media applications. Yet, for the reasons presented above, algorithms and applications which require tens to thousands of times more computation and memory bandwidth than current applications are being developed.
Reference: [21] <author> John Watlington and V. Michael Bove, Jr. </author> <title> Stream-based computing and future television. </title> <booktitle> In Proc. 137th SMPTE Technical Conference, </booktitle> <month> Sep </month> <year> 1995. </year>
Reference-contexts: The use of shared libraries allows common tasks to be easily extended to support system-specific specialized processors. Otherwise, the application would have to be pre-compiled for all target architectures: a highly undesirable situation. 5 Streams We extend hybrid dataflow with the introduction of streams <ref> [21] </ref>, a natural means of describing data which changes along any dimension. In its simplest manifestation, a stream may represent a variable which is modified over time. Each entry along a dimension represents a change in the value of the variable.
Reference: [22] <author> John A. Watlington, Mark Lucente, Carlton J. Sparrell, V. Michael Bove, Jr., and Ichiro Tamitani. </author> <title> A hardware architecture for rapid generation of electro-holographic fringe patterns. </title> <booktitle> In SPIE Proc. #2406-23 Practical Holography IX, </booktitle> <address> Bellingham, WA, </address> <month> Feb. </month> <year> 1995. </year> <pages> SPIE. </pages>
Reference-contexts: Digital video unlike digital audio is far from operating at human 1 perceptual limits. As display technologies and communications bandwidth permit, higher def-inition systems will add to the computational demands. Alternative output technologies, for example the holographic video displays developed at the MIT Media Laboratory [18] <ref> [22] </ref>, push these demands still further. Custom processors operating in parallel and using hardwired communications networks are capable of meeting the computational demands of media processing for a given application, yet the flexibility to support different algorithms is difficult to provide with these architectures.
Reference: [23] <author> M. Wazlowski, L. Agarwal, T. Lee, A. Smith, E. Lam, P. Athanas, H. Silverman, and S. Ghosh. </author> <title> PRISM-II Compiler and Architecture. </title> <booktitle> In Proc. IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <pages> pages 9-16, </pages> <address> Napa, CA, </address> <year> 1993. </year> <month> 16 </month>
References-found: 23

