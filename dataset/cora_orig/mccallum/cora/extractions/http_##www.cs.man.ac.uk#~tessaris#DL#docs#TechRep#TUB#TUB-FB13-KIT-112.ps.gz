URL: http://www.cs.man.ac.uk/~tessaris/DL/docs/TechRep/TUB/TUB-FB13-KIT-112.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~tessaris/DL/papers.html
Root-URL: http://www.cs.man.ac.uk
Email: atms@cs.tu-berlin.de  
Title: Persistent Maintenance of Object Descriptions using BACK  
Author: Albrecht Schmiedel 
Date: November 1993  
Address: Projekt KIT-BACK, FR 5-12 Franklinstr. 28/29 D-10587 Berlin  
Affiliation: Technische Universit at Berlin  
Abstract: KIT REPORT 112 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bagnasco, C., Spampinato, L., Vischi, C., </author> <booktitle> The EUROPE BR UCKE Language. Deliverable for ESPRIT P5120 AIMS, </booktitle> <month> November </month> <year> 1991. </year>
Reference: [2] <author> Borgida, A., and Brachman, </author> <title> R.J., Loading Data into Description Rea-soners. </title> <booktitle> Proceedings of ACM SIGMOD '93, </booktitle> <address> Washington DC, </address> <year> 1993 </year>
Reference-contexts: This certainly lifts the space limitation mentioned above, and it also alleviates the limits imposed by processing times in those cases where the classification inference can be "delegated" to the database machinery by issuing an appropriate set of queries (cf. <ref> [2] </ref>) These two approaches are by no means mutually exclusive. In fact, a genuinely persistent DL system acting as a server to applications and as a client to a variety of databases and other data sources is an appealing scenario.
Reference: [3] <author> Carey, M.J., DeWitt, D.J., Graefe, G., Haight, D.M., Richardson, J.E., Schuh, D.E., Skekita, E.J., and Vandenberg, </author> <title> S.L, The EXODUS extensible DBMS project: An overview. </title> <editor> In Stanley B. Zdonik and David Maier, editors, </editor> <booktitle> Readings in Object-Oriented Database Systems, Data Management Series. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> 1990 8 Conceivably automatically, </address> <note> although we haven't studied this aspect. 17 </note>
Reference-contexts: One solution for both aspects would probably be to implement BACK on top of a persistent storage manager such as Exodus <ref> [3] </ref>; it would transparently map data structures created by BACK to secondary storage, translate back and forth between pointers and object ids (known as pointer swizzling), and page in and out relevant portions of memory as needed.
Reference: [4] <author> Devanbu, P.T., </author> <title> Translating Description Logics to Information Server Queries. To appear in: </title> <booktitle> Proceedings of Second Conference on Information and Knowledge Management (CIKM '93), </booktitle> <address> Washington DC, </address> <year> 1993. </year>
Reference: [5] <author> Hoppe, Th., Kindermann, C., Quantz, J.J., Schmiedel, A., and Fischer, M., </author> <title> BACK V5 Tutorial and Manual. </title> <type> KIT Report 100, </type> <institution> Department of Computer Science, Technische Universitat Berlin, </institution> <address> Berlin, Germany, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: Every occurrence of a defined concept can equivalently be replaced by a term containing only primitive concepts and roles, and term-forming operators. 4 For a more detailed description of the BACK language see <ref> [5] </ref>. 6 bloodPressureSystolic and all (hasValue, gt (140)) =&gt; abnormal. bloodPressureSystolic and all (hasValue, 110..140) =&gt; normal. bloodPressureSystolic and all (hasValue, lt (110)) =&gt; abnormal. bloodPressureDiastolic and all (hasValue, gt (100)) =&gt; abnormal. bloodPressureDiastolic and all (hasValue, 60..110) =&gt; normal. bloodPressureDiastolic and all (hasValue, lt (60)) =&gt; abnormal.
Reference: [6] <author> Illarramendi, A., Blanco, J.M., and Goni, A., </author> <title> A Uniform Approach To Design a Federated System Using BACK. Proceedings Terminological Logic Users Workshop, </title> <type> KIT Report 95, </type> <institution> Technische Universitat Berlin, </institution> <month> October </month> <year> 1991 </year>
Reference-contexts: A terminological system with a customized persistency mechanism (though not for a very expressive language) has been described in [7]. The other approach to scaling up the size of potential KBs involves some kind of coupling to external databases. This direction is pursued in the AIMS project ([1], <ref> [6] </ref>), and recently also by [2],[4]. The primary motivation here is to access large, pre-existing databases transparently via a rich domain model expressed in the description logic. <p> In fact, a genuinely persistent DL system acting as a server to applications and as a client to a variety of databases and other data sources is an appealing scenario. The conceptual modelling capabilities make a DL system an ideal candidate as a front-end for heterogeneous data sources (cf. <ref> [6] </ref>). In this paper we describe a method for building a persistent index on externally stored instances which has proven to be effective as an extension to a pure in-core system, but would be equally useful as part of an intrinsically persistent system that accesses external data.
Reference: [7] <author> Mays, E., Lanka, S., Dionne, B., and Weida, T., </author> <title> A Persistent Store for Large Shared Knowledge Bases. </title> <journal> IEEE Transaction on Knowledge and Data Engineering, </journal> <volume> Vol. 3, No. 1, </volume> <month> March </month> <year> 1991 </year>
Reference-contexts: Both limitations can be overcome by providing some kind of persistency: 1 An exception to this is K-REP <ref> [7] </ref>. 2 * For handling a large number of instances, there must be transparent access to instances residing on secondary storage, * and the results of classification and recognition (the actual services of the terminological reasoner) must be made persistent as well in order to avoid redoing them each time an <p> A terminological system with a customized persistency mechanism (though not for a very expressive language) has been described in <ref> [7] </ref>. The other approach to scaling up the size of potential KBs involves some kind of coupling to external databases. This direction is pursued in the AIMS project ([1], [6]), and recently also by [2],[4].
Reference: [8] <author> Nebel, B., and Peltason, C., </author> <title> Terminological Reasoning and Information Management. </title> <editor> in: Karagiannis, D. (editor), </editor> <booktitle> Information Systems and Artificial Intelligence, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991 </year> <month> 18 </month>
Reference-contexts: Then we describe how it can be used to guide queries. Finally, we discuss some open problems and possible extensions. 2 To my knowledge, this term was first used in <ref> [8] </ref> 4 Basic entities: patient :&lt; anything. examination :&lt; anything and not (patient). observation :&lt; anything and not (patient) and not (examination). Basic relations: hasExam :&lt; domain (patient) and range (examination). hasItem :&lt; domain (examination) and range (observation). hasValue :&lt; domain (observation) and range (number).
References-found: 8

