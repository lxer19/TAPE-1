URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr91/tr91-027.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr91-abstracts.html
Root-URL: http://www.cis.ufl.edu
Title: Upgrading Vertices In Trees, Series-Parallel Digraphs And General Series-Parallel Digraphs To Bound Path Length+  
Author: Doowon Paik Sartaj Sahni 
Keyword: And Phrases Vertex upgrading, bounding path length, trees, series-parallel digraphs, general series-parallel digraphs  
Note: Research supported, in part, by the National Science Foundation under grant MIP 86-17374.  
Affiliation: University of Minnesota University of Florida  
Abstract: We consider trees, series-parallel digraphs, and general series-parallel digraphs that have vertex weights and delays. The length/delay of a path is the sum of the delays on the path. We show that minimal weight vertex subsets X such that the length of the longest path is bounded by a given value d when all vertices in X are upgraded to have delay 0 can be found in pseudo polynomial time. In case all delays are unit or all weights are unit, our algorithms have a quadratic complexity. For the case of trees with unit weights and unit delays, we develop a linear time algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [HORO78] <author> E. Horowitz, and S. Sahni, </author> <title> "Fundamentals of Computer Algorithms", </title> <publisher> Computer Science Press, </publisher> <address> Maryland, </address> <year> 1978. </year>
Reference-contexts: Let (l, c ) S (r) be the pair with least cost c . It is easy to see that the least weight vertex set W such that d (T|W ) d has weight c . We shall describe how to compute S (r). Using the back-trace strategy of <ref> [HORO78, cf. chapter on dynamic programming] </ref> we can compute the W that results in d (T|W) d and u W S w (u) = c in less time than needed to compute S (r) (however, S (r) and some of the other S's computed while computing S (r) are needed for <p> Since S (v ) contains only nondom-inated pairs, all pairs in S (v ) have different l and c values. So, JS (v )J min - d, w where w = u = 1 n w (u). Using the technique of <ref> [HORO78] </ref>, S (v) can be computed from the S (u)'s of its children in time O (min-d,w-*k v ). To compute S (r) we need to compute S (v ) for all vertices v . <p> We shall show how to compute F (G) and hence (l ,c ,Y). The actual W may be obtained using a backtrace step as described in <ref> [HORO78] </ref>. 8 G 1 s t s 1 t 1 s 2 t 2 (a) G 1 (b) G 2 (c) G 1 //G 2 s 1 t 2 3.1. G Is A Chain Consider the case when G has only two vertices s and t.
Reference: [LAWL78] <author> E. L. Lawler, </author> <title> "Sequencing Jobs To Minimize Total Weighted Completion Time subject to precedence constraints", </title> <journal> Annals of Discrete Math. </journal> <volume> 2, </volume> <year> 1978, </year> <pages> 75-90. </pages>
Reference-contexts: So, we can obtain F (G) for any SPDAG in time O (n*min -d, u V (G) S w (u)- ). For SPDAGs with unit delay or unit weight, this is O (n 2 ). 12 4. General Series Parallel Dags General series parallel dags (GSPDAGs) were introduced in <ref> [LAWL78, MONM77, SIDN76] </ref>. A linear time algorithm to determine whether or not a given dag is a GSPDAG was developed in [VALD79]. This paper also contains a linear time algorithm to obtain a series-parallel decomposition of a GSPDAG. The definitions and terminology used in this section are derived from [VALD79].
Reference: [MONM77] <author> C. L. Monma and J. B. Sidney, </author> <title> "A General Algorithm For Optimal Job Sequencing With Series-Parallel Constraints", </title> <type> Technical Report No. 347, </type> <institution> School of Operations Research and Industrial Engineering, Cornell University, </institution> <address> Ithaca, N.Y., </address> <month> July </month> <year> 1977. </year>
Reference-contexts: So, we can obtain F (G) for any SPDAG in time O (n*min -d, u V (G) S w (u)- ). For SPDAGs with unit delay or unit weight, this is O (n 2 ). 12 4. General Series Parallel Dags General series parallel dags (GSPDAGs) were introduced in <ref> [LAWL78, MONM77, SIDN76] </ref>. A linear time algorithm to determine whether or not a given dag is a GSPDAG was developed in [VALD79]. This paper also contains a linear time algorithm to obtain a series-parallel decomposition of a GSPDAG. The definitions and terminology used in this section are derived from [VALD79].
Reference: [PAIK90] <author> D. Paik, S. Reddy, and S. Sahni, </author> <title> "Vertex Splitting In Dags And Applications To Partial Scan Designs And Lossy Circuits", </title> <institution> University of Florida, </institution> <type> Technical Report, </type> <institution> 90-34,1990. </institution> <month> 17 </month>
Reference: [PAIK91a] <author> D. Paik, S. Reddy, and S. Sahni, </author> <title> "Deleting Verticies To Bound Path Lengths", </title> <institution> University of Florida, </institution> <type> Technical Report, </type> <pages> 91-4, </pages> <year> 1990. </year>
Reference: [PAIK91b] <author> D. Paik, and S. Sahni, </author> <title> "Upgrading Circuit Modules To Improve Performance", </title> <institution> University of Florida, </institution> <type> Technical Report, </type> <year> 1991. </year>
Reference: [SIDN76] <author> J. B. Sidney, </author> <title> "The Two Machine Flow Line Problem With Series-Parallel Precedence Relations", </title> <type> Working paper 76-19, </type> <institution> Faculty of Management Science, University of Ottawa, </institution> <month> November </month> <year> 1976. </year>
Reference-contexts: So, we can obtain F (G) for any SPDAG in time O (n*min -d, u V (G) S w (u)- ). For SPDAGs with unit delay or unit weight, this is O (n 2 ). 12 4. General Series Parallel Dags General series parallel dags (GSPDAGs) were introduced in <ref> [LAWL78, MONM77, SIDN76] </ref>. A linear time algorithm to determine whether or not a given dag is a GSPDAG was developed in [VALD79]. This paper also contains a linear time algorithm to obtain a series-parallel decomposition of a GSPDAG. The definitions and terminology used in this section are derived from [VALD79].
Reference: [VALD79] <author> J. Valders, R. E. Tarjan, and E. L. Lawler, </author> <title> "The recognition of Series Parallel digraphs", </title> <journal> SIAM J. Comput., </journal> <volume> 11 (1982), </volume> <pages> pp. 298-313. </pages>
Reference-contexts: Complexity The series-parallel decomposition of an SPDAG can be determined in O (n) time <ref> [VALD79] </ref>. <p> For SPDAGs with unit delay or unit weight, this is O (n 2 ). 12 4. General Series Parallel Dags General series parallel dags (GSPDAGs) were introduced in [LAWL78, MONM77, SIDN76]. A linear time algorithm to determine whether or not a given dag is a GSPDAG was developed in <ref> [VALD79] </ref>. This paper also contains a linear time algorithm to obtain a series-parallel decomposition of a GSPDAG. The definitions and terminology used in this section are derived from [VALD79]. <p> A linear time algorithm to determine whether or not a given dag is a GSPDAG was developed in <ref> [VALD79] </ref>. This paper also contains a linear time algorithm to obtain a series-parallel decomposition of a GSPDAG. The definitions and terminology used in this section are derived from [VALD79]. A transitive dag is a dag G = (V, E) such that &lt; i,j&gt; E whenever there is a path from i to j. <p> Step2: Let X be the minimum weight vertex subset such that d (G -|X) d. Step3: Output X. Since the transitive reduction of a GSPDAG G can be obtained in time linear in the number of vertices and edges in G <ref> [VALD79] </ref>, we need be concerned only with step 2. Our strategy for this is similar to that used in Section 3 for SPDAGs.
References-found: 8

