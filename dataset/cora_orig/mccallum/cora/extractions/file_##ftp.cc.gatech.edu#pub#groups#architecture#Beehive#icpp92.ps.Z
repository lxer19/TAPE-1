URL: file://ftp.cc.gatech.edu/pub/groups/architecture/Beehive/icpp92.ps.Z
Refering-URL: http://www.cs.gatech.edu/computing/Architecture/Beehive/index.html
Root-URL: 
Email: davism@cc.gatech.edu and rama@cc.gatech.edu  
Title: A DISTRIBUTED HARDWARE BARRIER IN AN OPTICAL BUS-BASED DISTRIBUTED SHARED MEMORY MULTIPROCESSOR  
Author: Martin H. Davis, Jr. and Umakishore Ramachandran 
Address: Atlanta, GA 30332-0280  
Affiliation: College of Computing Georgia Institute of Technology  
Date: 228-31, Aug. 17-21, 1992 1  
Note: 21st ICPP, Vol. I, pp.  
Abstract: After defining our distributed shared memory multiprocessor architecture which uses an optically based interconnection network, we give a pure hardware optical barrier synchronization mechanism. Because of the current state of optical technology, we introduce a more realistic optical barrier mechanism, called the Distributed Shared Hardware Barrier (DSHB), which is a combination of software and hardware (electronic and optical). We give a brief analysis of the cost of the DSHB scheme and show how this scheme combines the flexibility of software barrier techniques with the efficiency of hardware barrier techniques. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. D. Brooks III. </author> <title> The butterfly barrier. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 15(4) </volume> <pages> 295-307, </pages> <year> 1986. </year>
Reference-contexts: The notification phase entails the processes recognizing that barrier completion has happened and that they may proceed past the barrier. Various software and hardware techniques have been proposed to implement barriers. Software techniques include the original centralized counter [10] and multiple counters (or flags) with various combining patterns <ref> [1, 7, 11, 14] </ref>. Hardware techniques include the original wired-AND gate [10], a tree of AND gates [12], combining trees embedded in the interconnection network switching hardware [4, 9], a bit-addressable register [13], wired-NOR synchronization fl This work has been funded in part by NSF PYI Award MIP-9058430.
Reference: [2] <author> M. H. Davis, Jr. and U. Ramachandran. </author> <title> Optical bus protocol for a distributed shared memory multiprocessor. In Optical Enhancements to Computing Technology, July 1991. </title> <booktitle> SPIE Volume 1563. </booktitle>
Reference-contexts: An important characteristic of the OBR is that messages propagate unidirectionally and that it is a broadcast medium (more details may be found in <ref> [2] </ref>). Another important property of the OBR is its tremendous transmission capacity (on the order of Terahertz). One way to exploit this capacity is to split the large bandwidth into multiple (relatively) lower-speed channels. Each channel, which acts as an independent logical OBR, is assigned a unique wavelength.
Reference: [3] <author> M. H. Davis, Jr. and U. Ramachandran. </author> <title> A distributed hardware barrier in an optical bus-based distributed shared memory multiprocessor. </title> <type> Technical Report GIT-CC-92/18, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <year> 1992. </year>
Reference-contexts: A more detailed version is available as a Technical Report <ref> [3] </ref>. lines [8], and a tree of AND gates augmented with "clearing" latches [5].
Reference: [4] <author> E. Freudenthal and A. Gottlieb. </author> <title> Process coo-ordination with fetch-and-increment. </title> <booktitle> In Fourth International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 260-8, </pages> <month> Apr. </month> <year> 1991. </year>
Reference-contexts: Software techniques include the original centralized counter [10] and multiple counters (or flags) with various combining patterns [1, 7, 11, 14]. Hardware techniques include the original wired-AND gate [10], a tree of AND gates [12], combining trees embedded in the interconnection network switching hardware <ref> [4, 9] </ref>, a bit-addressable register [13], wired-NOR synchronization fl This work has been funded in part by NSF PYI Award MIP-9058430. A more detailed version is available as a Technical Report [3]. lines [8], and a tree of AND gates augmented with "clearing" latches [5].
Reference: [5] <author> K. Ghose and D.-C. Cheng. </author> <title> Efficient synchronization schemes for large-scale shared-memory multiprocessors. </title> <booktitle> In 1991 International Conference on Parallel Processing, </booktitle> <volume> volume I, </volume> <pages> pages I-153-60, </pages> <year> 1991. </year>
Reference-contexts: A more detailed version is available as a Technical Report [3]. lines [8], and a tree of AND gates augmented with "clearing" latches <ref> [5] </ref>. Because the barrier can conveniently implement various styles of parallel programming (e.g., the fork-join construct or DOALL loop parallelism [13]), it is imperative, as with all synchronization primitives, that the barrier mechanism be both flexible and efficient. Software techniques, though flexible, suffer from being inefficient.
Reference: [6] <author> R. Gupta and M. Epstein. </author> <title> High speed synchronization of processors using fuzzy barriers. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 19(1) </volume> <pages> 53-73, </pages> <year> 1990. </year>
Reference-contexts: This optimization would allow the fast determination of the virtual address of the barrier data structure. Gupta <ref> [6] </ref> has proposed a "fuzzy" barrier in which the barrier is a region of statements. The fuzzy barrier allows a process to perform useful work while waiting for other processes to reach the barrier.
Reference: [7] <author> R. Gupta and C. R. Hill. </author> <title> A scalable implementation of barrier synchronization using an adaptive combining tree. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 18(3) </volume> <pages> 161-80, </pages> <year> 1989. </year>
Reference-contexts: The notification phase entails the processes recognizing that barrier completion has happened and that they may proceed past the barrier. Various software and hardware techniques have been proposed to implement barriers. Software techniques include the original centralized counter [10] and multiple counters (or flags) with various combining patterns <ref> [1, 7, 11, 14] </ref>. Hardware techniques include the original wired-AND gate [10], a tree of AND gates [12], combining trees embedded in the interconnection network switching hardware [4, 9], a bit-addressable register [13], wired-NOR synchronization fl This work has been funded in part by NSF PYI Award MIP-9058430.
Reference: [8] <author> K. Hwang and S. Shang. </author> <title> Wired-NOR barrier synchronization for designing large shared-memory multiprocessors. </title> <booktitle> In 1991 International Conference on Parallel Processing, </booktitle> <volume> volume I, </volume> <pages> pages I-171-5, </pages> <year> 1991. </year>
Reference-contexts: A more detailed version is available as a Technical Report [3]. lines <ref> [8] </ref>, and a tree of AND gates augmented with "clearing" latches [5]. Because the barrier can conveniently implement various styles of parallel programming (e.g., the fork-join construct or DOALL loop parallelism [13]), it is imperative, as with all synchronization primitives, that the barrier mechanism be both flexible and efficient.
Reference: [9] <author> D. N. Jayasimha. </author> <title> Distributed synchronizers. </title> <booktitle> In 1988 International Conference on Parallel Processing, </booktitle> <pages> pages 23-7, </pages> <year> 1988. </year>
Reference-contexts: Software techniques include the original centralized counter [10] and multiple counters (or flags) with various combining patterns [1, 7, 11, 14]. Hardware techniques include the original wired-AND gate [10], a tree of AND gates [12], combining trees embedded in the interconnection network switching hardware <ref> [4, 9] </ref>, a bit-addressable register [13], wired-NOR synchronization fl This work has been funded in part by NSF PYI Award MIP-9058430. A more detailed version is available as a Technical Report [3]. lines [8], and a tree of AND gates augmented with "clearing" latches [5].
Reference: [10] <author> H. F. Jordan. </author> <title> A special purpose architecture for finite element analysis. </title> <booktitle> In 1978 International Conference on Parallel Processing, </booktitle> <pages> pages 263-6, </pages> <year> 1978. </year>
Reference-contexts: Introduction A necessary aspect of parallel programming is synchronization, the coordination of parallel processes and their activities. A frequently used synchronization construct is the barrier, first proposed by Jordan <ref> [10] </ref>. A barrier is a rendezvous point for some set of processes. The barrier operation comprises two parts, the arrival and notification phases. The arrival phase consists of the processes making their presence known at the barrier. When all the processes arrive at the barrier, then barrier completion has occurred. <p> The notification phase entails the processes recognizing that barrier completion has happened and that they may proceed past the barrier. Various software and hardware techniques have been proposed to implement barriers. Software techniques include the original centralized counter <ref> [10] </ref> and multiple counters (or flags) with various combining patterns [1, 7, 11, 14]. Hardware techniques include the original wired-AND gate [10], a tree of AND gates [12], combining trees embedded in the interconnection network switching hardware [4, 9], a bit-addressable register [13], wired-NOR synchronization fl This work has been funded <p> Various software and hardware techniques have been proposed to implement barriers. Software techniques include the original centralized counter <ref> [10] </ref> and multiple counters (or flags) with various combining patterns [1, 7, 11, 14]. Hardware techniques include the original wired-AND gate [10], a tree of AND gates [12], combining trees embedded in the interconnection network switching hardware [4, 9], a bit-addressable register [13], wired-NOR synchronization fl This work has been funded in part by NSF PYI Award MIP-9058430.
Reference: [11] <author> J. M. Mellor-Crummey and M. L. Scott. </author> <title> Synchronization without contention. </title> <booktitle> In Fourth International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 269-78, </pages> <month> Apr. </month> <year> 1991. </year>
Reference-contexts: The notification phase entails the processes recognizing that barrier completion has happened and that they may proceed past the barrier. Various software and hardware techniques have been proposed to implement barriers. Software techniques include the original centralized counter [10] and multiple counters (or flags) with various combining patterns <ref> [1, 7, 11, 14] </ref>. Hardware techniques include the original wired-AND gate [10], a tree of AND gates [12], combining trees embedded in the interconnection network switching hardware [4, 9], a bit-addressable register [13], wired-NOR synchronization fl This work has been funded in part by NSF PYI Award MIP-9058430.
Reference: [12] <author> M. T. O'Keefe and H. G. Dietz. </author> <title> Hardware barrier synchronization: Dynamic barrier MIMD (DBM). </title> <booktitle> In 1990 International Conference on Parallel Processing, </booktitle> <volume> volume I, </volume> <pages> pages I-43-46, </pages> <year> 1990. </year>
Reference-contexts: Various software and hardware techniques have been proposed to implement barriers. Software techniques include the original centralized counter [10] and multiple counters (or flags) with various combining patterns [1, 7, 11, 14]. Hardware techniques include the original wired-AND gate [10], a tree of AND gates <ref> [12] </ref>, combining trees embedded in the interconnection network switching hardware [4, 9], a bit-addressable register [13], wired-NOR synchronization fl This work has been funded in part by NSF PYI Award MIP-9058430.
Reference: [13] <author> C. D. Polychronopoulos. </author> <title> Compiler optimizations for enhancing parallelism and their impact on architecture design. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(8) </volume> <pages> 991-1004, </pages> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: Software techniques include the original centralized counter [10] and multiple counters (or flags) with various combining patterns [1, 7, 11, 14]. Hardware techniques include the original wired-AND gate [10], a tree of AND gates [12], combining trees embedded in the interconnection network switching hardware [4, 9], a bit-addressable register <ref> [13] </ref>, wired-NOR synchronization fl This work has been funded in part by NSF PYI Award MIP-9058430. A more detailed version is available as a Technical Report [3]. lines [8], and a tree of AND gates augmented with "clearing" latches [5]. <p> A more detailed version is available as a Technical Report [3]. lines [8], and a tree of AND gates augmented with "clearing" latches [5]. Because the barrier can conveniently implement various styles of parallel programming (e.g., the fork-join construct or DOALL loop parallelism <ref> [13] </ref>), it is imperative, as with all synchronization primitives, that the barrier mechanism be both flexible and efficient. Software techniques, though flexible, suffer from being inefficient.
Reference: [14] <author> P. Tang and P.-C. Yew. </author> <title> Software combining algorithms for distributing hot-spot addressing. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 10 </volume> <pages> 130-9, </pages> <year> 1990. </year>
Reference-contexts: The notification phase entails the processes recognizing that barrier completion has happened and that they may proceed past the barrier. Various software and hardware techniques have been proposed to implement barriers. Software techniques include the original centralized counter [10] and multiple counters (or flags) with various combining patterns <ref> [1, 7, 11, 14] </ref>. Hardware techniques include the original wired-AND gate [10], a tree of AND gates [12], combining trees embedded in the interconnection network switching hardware [4, 9], a bit-addressable register [13], wired-NOR synchronization fl This work has been funded in part by NSF PYI Award MIP-9058430.
References-found: 14

