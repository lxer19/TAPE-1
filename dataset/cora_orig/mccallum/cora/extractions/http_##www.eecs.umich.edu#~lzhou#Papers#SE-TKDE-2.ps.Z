URL: http://www.eecs.umich.edu/~lzhou/Papers/SE-TKDE-2.ps.Z
Refering-URL: http://www.eecs.umich.edu/~lzhou/
Root-URL: http://www.cs.umich.edu
Title: Schema Evolution of an Object-Oriented Real-Time Database System for Manufacturing Automation  
Author: Lei Zhou, Elke A. Rundensteiner, Kang G. Shin 
Keyword: Data model, database, envelope/letter classes, letter class hierarchy, object-oriented, performance poly-morphism, real-time, schema evolution.  
Date: 1999 1  
Note: IEEE TRANSACTIONS ON KNOWLEDGE AND DATA ENGINEERING, VOL. XX, NO. Y, MONTH  
Abstract: The database schemata often experience considerable changes during the development and initial use phases of database systems for advanced applications, such as manufacturing automation and computer-aided design. An automated schema evolution system can significantly reduce the amount of effort and potential errors related to schema changes. Although schema evolution for non-real-time databases was the subject of previous research, its impact on real-time database systems remains unexplored. These advanced applications typically utilize object-oriented data models to handle complex data types. However, there exists no agreed-upon real-time object-oriented data model that can be used as foundation to define a schema evolution framework. Therefore, we first design a conceptual real-time object-oriented data model, called ROMPP (Real-time Object Model with Performance Polymorphism). It captures the key characteristics of real-time applications, namely, timing constraints and performance polymorphism, by utilizing specialization dimension and letter class hierarchy constructs, respectively. We then re-evaluate previous (non-real-time) schema evolution support in the context of real-time databases. This results in modifications to the semantics of schema changes and to the needs of schema change resolution rules and schema invariants. Furthermore, we expand the schema change framework with new constructs|including new schema change operators, new resolution rules, and new invariants|necessary for handling the real-time characteristics of ROMPP. We adopt and extend an axiomatic model to express the semantics of ROMPP schema changes. Using manufacturing control applications, we demonstrate the applicability of ROMPP and potential benefits of the proposed schema evolution system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Albus, "NIST Open-Architecture," </author> <booktitle> Int'l Workshop on Open-Architecture Controllers for Automation, </booktitle> <month> April </month> <year> 1994. </year>
Reference: [2] <author> B. Anderson, </author> <title> "Next Generation Workstation/Machine Controller (NGC)," </title> <booktitle> Proc. </booktitle> <address> IPC'92, </address> <month> April </month> <year> 1992, </year> <pages> pp. </pages> <month> xix-xxvi. </month>
Reference-contexts: An OODB schema is equal to the class hierarchy. B. Model Description Based on our evaluation of existing real-time systems [4, 10, 15, 17, 20, 24, 47] and real-time manufacturing applications <ref> [2, 5, 23] </ref>, we have identified two key characteristics for real-time data models: timing constraints and performance polymorphism. In open-architecture machine tool controllers, control tasks periodically read sensor data, compute control parameters, and issue actuator commands.
Reference: [3] <author> J. Banerjee, W. Kim, H.-J. Kim, and H.F. Korth, </author> <title> "Semantics and Implementation of Schema Evolution in Object-Oriented Databases," </title> <booktitle> SIGMOD, </booktitle> <year> 1987, </year> <pages> pp. 311-322. </pages>
Reference-contexts: By contrast, ROMPP offers not only explicit constructs for timing specifications but also an automated mechanism to support performance polymorphism. We then develop a framework for changes to schemata of real-time OODBs based on the schema change taxonomy currently being employed by virtually all existing (non-real-time) schema evolution systems <ref> [3] </ref>. While schema evolution has been defined for many object-oriented data models [3, 26, 31, 52], none of them is for RTDBSs. <p> We then develop a framework for changes to schemata of real-time OODBs based on the schema change taxonomy currently being employed by virtually all existing (non-real-time) schema evolution systems [3]. While schema evolution has been defined for many object-oriented data models <ref> [3, 26, 31, 52] </ref>, none of them is for RTDBSs. We re-evaluate this work in the context of RTDBSs, making modifications to the semantics of schema changes and to the needs of schema change resolution rules and schema invariants. <p> For this purpose, we need to apply the typical steps of defining schema evolution framework <ref> [3] </ref> to our real-time object model as follows: 1. Identify a schema change taxonomy. We need to determine which schema changes are meaningful, given the definition of a ROMPP schema. 2. Identify schema change invariants. <p> The effect of each schema change identified in Step 1 on the rest of the schema is investigated and its impact on the underlying data is also considered. A. Schema Change Taxonomy One of the first object-oriented schema change approaches was proposed by Banerjee et al. <ref> [3] </ref> for ORION [18]. This taxonomy was adopted in most other schema evolution research for OODBs [26, 31, 52] and represents the most frequently used set of schema changes. <p> Although a number of schema changes in our taxonomy are the same as those in <ref> [3] </ref>, we show in Section III-D that the semantics of some of these changes are quite different. In order to support changes of ROMPP schemata, we must evaluate the application of the above types of changes to both letter and envelope class hierarchies. B. <p> B. Schema Change Invariants In order for any schema change to maintain a correct database, it must guarantee the consistency of the schema. We thus need schema invariants to define the correctness of schema properties. We have adopted the following invariants proposed in <ref> [3] </ref> with some modifications: 1. Class Hierarchy Invariant. The class hierarchy is a rooted and directed acyclic graph with uniquely named nodes (classes) and unlabeled edges (is-a relationships) (see Definition 4). 2. Distinct Name (Signature) Invariant. All instance variables of a class must have distinct names. <p> We define the semantics of both categories of schema changes in this section. Because of the envelope/letter structure of ROMPP, all schema changes to letter class hierarchies and some changes to the envelope class hierarchy have different semantics from traditional ones (e.g., <ref> [3] </ref>). It is often dependent on individual applications whether it is meaningful to convert existing instances of a class to those of the modified class. <p> It may require s's subclasses to change their parent's name. D.3 Schema Changes to an Envelope Class Hierarchy In general, changes to an envelope class hierarchy have similar semantics to those defined in <ref> [3] </ref>. In addition, the changes must be propagated to the corresponding letter classes, if any, since letter class hierarchies are descendants of their corresponding envelope classes. The changes may cause reorganizations of the specialization spaces associated with letter class hierarchies. <p> The prototype controller was effectively utilized to cut metal parts using the milling machine. ZHOU ET AL.: SCHEMA EVOLUTION OF AN OO RTDBS 17 V. RELATED WORK A. Schema Evolution There has been considerable work on defining schema evolution for OODBs. Examples are schema evolution for ORION <ref> [3] </ref>, O2 [52], GemStone [31] and GOOSE [26]. However, none of them addressed schema evolution in the context of real-time OODBs. The traditional approach is to define a number of invariants that must be satisfied by the schema and then to define rules for maintaining these invariants (e.g., [3]). <p> for ORION <ref> [3] </ref>, O2 [52], GemStone [31] and GOOSE [26]. However, none of them addressed schema evolution in the context of real-time OODBs. The traditional approach is to define a number of invariants that must be satisfied by the schema and then to define rules for maintaining these invariants (e.g., [3]). To avoid expensive changes to existing applications dependent on the original schema, researchers studied other approaches such as object-oriented views [35, 36, 44] and versions [19, 25]. [32] proposes an axiomatic model to provide a common framework for defining and comparing different schema evolution policies. <p> All of these typically support the schema change taxonomy initially proposed for ORION <ref> [3] </ref>. In this paper, we focus instead on the real-time aspects of schema evolution, in addition to the traditional schema change taxonomy. To our knowledge, this work in schema evolution of real-time object-oriented databases is the first of its kind. B.
Reference: [4] <author> T. E. Bihari, and P. Gopinath, </author> <title> "Object-Oriented Real-Time Systems: Concepts and Examples," </title> <journal> IEEE Computers, </journal> <month> December </month> <year> 1992, </year> <pages> pp. 25-32. </pages>
Reference-contexts: An OODB schema is equal to the class hierarchy. B. Model Description Based on our evaluation of existing real-time systems <ref> [4, 10, 15, 17, 20, 24, 47] </ref> and real-time manufacturing applications [2, 5, 23], we have identified two key characteristics for real-time data models: timing constraints and performance polymorphism. In open-architecture machine tool controllers, control tasks periodically read sensor data, compute control parameters, and issue actuator commands. <p> In this paper, we show that timing constraints and performance polymorphism are two key characteristics of real-time applications and should be explicitly supported by a real-time data model. CHAOS (Concurrent Hierarchical Adaptable Object System) <ref> [4, 38] </ref> is an object-based language and programming/execution system designed for dynamic real-time applications. One of its key components is a C-based run-time library for the real-time kernel. CHAOS supports a limited form of dynamic parameterization of generic classes to allow easy development of different implementations of objects.
Reference: [5] <author> S. Birla, </author> <title> "A Conceptual Framework for Modeling Manufacturing Automation," Directed Study Report, </title> <institution> Department of Electrical Engineering and Computer Science, The University of Michigan, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: An OODB schema is equal to the class hierarchy. B. Model Description Based on our evaluation of existing real-time systems [4, 10, 15, 17, 20, 24, 47] and real-time manufacturing applications <ref> [2, 5, 23] </ref>, we have identified two key characteristics for real-time data models: timing constraints and performance polymorphism. In open-architecture machine tool controllers, control tasks periodically read sensor data, compute control parameters, and issue actuator commands.
Reference: [6] <author> G. Booch, </author> <title> Object-Oriented Design with Applications, </title> <address> Ben-jamin/Cummings, </address> <year> 1991. </year>
Reference: [7] <author> P. Butterworth, A. Otis, and J. Stein, </author> <title> "The Gemstone Object Database Management System," </title> <journal> Communications of the ACM, </journal> <volume> Vol. 34, No. 10, </volume> <month> October </month> <year> 1991, </year> <pages> pp. 64-77. </pages>
Reference-contexts: In other words, we are not proposing a complete 3 data model, but one that is suitable and sufficient for manufacturing applications. A. Basic Object-Oriented Concepts ROMPP adopts basic object-oriented concepts, such as class and inheritance, as can be found in most object-oriented data models <ref> [7, 11, 18, 27] </ref>. For completeness, these concepts are defined below. Definition 1.
Reference: [8] <author> R.G.G. Cattell, </author> <title> Object Data Management: Object-Oriented and Extended Relational Database Systems, </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference: [9] <author> J. Coplien, </author> <title> Advanced C++ Programming Styles and Idioms, </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: Should the performance requirements of an application change, the mechanism would transparently rebind the requested service with the most appropriate implementation. Performance polymorphism in ROMPP is captured by the letter class hierarchy constructs, which are based on an object-oriented programming technique|the enve lope/letter structure <ref> [9] </ref>. Definition 8. An envelope/letter structure is a composite object structure formed by a pair of classes that act as one: an outer class (envelope class, or EC) that is the visible part to the user, and an inner class (letter class, or LC) that contains implementation details. Definition 9. <p> D. ROMPP ROMPP uses specialization dimensions to characterize timing constraints and letter class hierarchies to capture performance polymorphism. Constraints are specified in a string, which is then passed to the part of RTDBS that implements performance polymorphism. An exemplar-based technique <ref> [9] </ref> is adopted to realize the automatic performance polymorphism mechanism. This mechanism customizes applications by binding appropriate service objects with the applications at their start-up time, according to their respective constraints. Exemplars are special, one-per-class objects that are prototype representatives of an entire class.
Reference: [10] <author> U. Dayal, B. Blaustein, A. Buchmann, U. Chakravarthy, M. Hsu, R. Ledin, D. McCarthy, A. Rosenthal, S. Sarin, M.J. Carey, M. Livny, and R. Jauhari, </author> <title> "The HiPAC Project: Combining Active Databases and Timing Constraints," </title> <booktitle> SIGMOD Record, </booktitle> <volume> Vol. 17, No. 1, </volume> <month> March </month> <year> 1988, </year> <pages> pp. 51-70. </pages>
Reference-contexts: An OODB schema is equal to the class hierarchy. B. Model Description Based on our evaluation of existing real-time systems <ref> [4, 10, 15, 17, 20, 24, 47] </ref> and real-time manufacturing applications [2, 5, 23], we have identified two key characteristics for real-time data models: timing constraints and performance polymorphism. In open-architecture machine tool controllers, control tasks periodically read sensor data, compute control parameters, and issue actuator commands. <p> Also, the knowledge about the characteristics of the letter classes may be stored in individual envelope classes, such that different binding procedures may be chosen for different letter class hierarchies. HiPAC (High Performance ACtive database System) <ref> [10] </ref> combines databases with rule capabilities. Rules in HiPAC are first-class objects. A rule, among other features, allows the specification of its timing and other properties. When instances of the same class of rules are applied to different situations or objects, they may have different timing specifications.
Reference: [11] <editor> O. Deux, et al., </editor> <title> "The O2 System," </title> <journal> Communications of the ACM, </journal> <volume> Vol. 34, No. 10, </volume> <month> October </month> <year> 1991, </year> <pages> pp. 34-48. </pages>
Reference-contexts: In other words, we are not proposing a complete 3 data model, but one that is suitable and sufficient for manufacturing applications. A. Basic Object-Oriented Concepts ROMPP adopts basic object-oriented concepts, such as class and inheritance, as can be found in most object-oriented data models <ref> [7, 11, 18, 27] </ref>. For completeness, these concepts are defined below. Definition 1. <p> This taxonomy was adopted in most other schema evolution research for OODBs [26, 31, 52] and represents the most frequently used set of schema changes. In fact, most commercial OODB systems have implemented a subset of this taxonomy as their schema change support <ref> [11, 16, 31] </ref> However, this taxonomy does not consider any real-time aspects of object models. We extend the taxonomy with schema changes for ROMPP.
Reference: [12] <author> L. DiPippo, and V. Wolfe, </author> <title> "Object-based Semantic Real-time Concurrency Control," </title> <booktitle> Proceedings of Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1993, </year> <pages> pp. 87-96. </pages>
Reference-contexts: XX, NO. Y, MONTH 1999 istic of rules, where an envelope class represents a generic rule (or a class of rules) and letter classes represent the same rule with different timing specifications, which may require different implementations. RTSORAC (Real-Time Semantic Objects Relationships And Constraints) <ref> [12, 30, 47] </ref> incorporates a comprehensive model for concurrency control in real-time OODBs and a flexible approach to synchronizing real-time transactions. It considers a broad range of semantic information regarding logical and temporal consistency, and allows a wide range of correctness criteria that relax serializability.
Reference: [13] <author> M.H. Graham, </author> <title> "Issues in Real-Time Data Management," </title> <journal> Journal of Real-Time Systems, </journal> <volume> 4, </volume> <year> 1992, </year> <pages> pp. 185-202. </pages>
Reference: [14] <author> J.E. Hopcroft, and J.D. Ullman, </author> <title> Introduction to Automata Theory, Languages, and Computation, </title> <publisher> Addison-Wesley, </publisher> <year> 1979. </year>
Reference-contexts: One might think that it would be easy to determine the execution time of a method by analyzing its source code. Unfortunately, this is a variant of the famous Turing machine halting problem, which is in general undecidable <ref> [14] </ref>. If restrictions are placed on the code, such as prohibiting loops and carefully controlling I/O, it becomes theoretically possible to synthesize the execution time. However, with modern CPU architectures that employ caches and pipelines, this analysis of method execution times can be very difficult.
Reference: [15] <author> Y. Ihikawa, H. Tokuda, and C.W. Mercer, </author> <title> "An Object-Oriented Real-Time Programming Language," </title> <booktitle> IEEE Computer, </booktitle> <month> October </month> <year> 1992, </year> <pages> pp. 66-73. </pages>
Reference-contexts: An OODB schema is equal to the class hierarchy. B. Model Description Based on our evaluation of existing real-time systems <ref> [4, 10, 15, 17, 20, 24, 47] </ref> and real-time manufacturing applications [2, 5, 23], we have identified two key characteristics for real-time data models: timing constraints and performance polymorphism. In open-architecture machine tool controllers, control tasks periodically read sensor data, compute control parameters, and issue actuator commands. <p> These letter classes are specialized along several dimensions|the parameterized attributes in CHAOS. ARTS (Advanced Real-time Technology) [24, 45] is a distributed real-time operating system kernel. RTC++ <ref> [15] </ref> is an extension of C++. Both of them are based on the same real-time object model, which describes real-time properties in systems and encapsulates rigid timing constraints in an object. Each object is composed of data, one or more threads of execution, and a set of exported operations.
Reference: [16] <institution> Itasca Systems, Inc., ITASCA System Overview, Unisys, Min-neapolis, Minnesota, </institution> <year> 1990. </year>
Reference-contexts: This taxonomy was adopted in most other schema evolution research for OODBs [26, 31, 52] and represents the most frequently used set of schema changes. In fact, most commercial OODB systems have implemented a subset of this taxonomy as their schema change support <ref> [11, 16, 31] </ref> However, this taxonomy does not consider any real-time aspects of object models. We extend the taxonomy with schema changes for ROMPP.
Reference: [17] <author> K.B. Kenny, and K.-J. Lin, </author> <title> "Building Flexible Real-Time Systems Using the Flex Language," </title> <booktitle> IEEE Computer, </booktitle> <month> May </month> <year> 1991, </year> <pages> pp. 70-78. </pages>
Reference-contexts: We make no such distinction and will use the terms interchangeably. 2 The term performance polymorphism first appeared in <ref> [17] </ref>. mance polymorphism, they neither explicitly capture these concepts nor provide a mechanism to enforce them. By contrast, ROMPP offers not only explicit constructs for timing specifications but also an automated mechanism to support performance polymorphism. <p> An OODB schema is equal to the class hierarchy. B. Model Description Based on our evaluation of existing real-time systems <ref> [4, 10, 15, 17, 20, 24, 47] </ref> and real-time manufacturing applications [2, 5, 23], we have identified two key characteristics for real-time data models: timing constraints and performance polymorphism. In open-architecture machine tool controllers, control tasks periodically read sensor data, compute control parameters, and issue actuator commands. <p> All these operations typically need to be completed within each control cycle, i.e., with timing constraints. Open-architecture requirements of machine tool controllers mandate and facilitate the development of hardware and software modules that have the same functionality and interface but with different performance. This characteristic, called performance polymorphism <ref> [17] </ref>, is also a fundamental requirement for manufacturing automation applications. We will show that a simple model capturing these two key characteristics can provide significant help to manufacturing control application developers. <p> The use of real-time object libraries is suggested to remedy this. As discussed in Section II-B.2, this is an undesirable solution in comparison with direct support of performance polymorphism. In ROMPP, we address this issue by explicitly supporting performance polymorphism, using the letter class hierarchy concept. Flex <ref> [17] </ref> is a derivative of C++. It supports two modes of flexible real-time programs, designed to adjust execution times so that all important deadlines are guaranteed to be met. First, it allows computations to return imprecise results.
Reference: [18] <author> W. Kim, J.F. Garza, N. Ballou, and D. Woelk, </author> <title> "Architecture of the ORION Next-Generation Database System," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> Vol. 2, No. 1, </volume> <month> March </month> <year> 1990, </year> <pages> pp. 109-124. </pages>
Reference-contexts: In other words, we are not proposing a complete 3 data model, but one that is suitable and sufficient for manufacturing applications. A. Basic Object-Oriented Concepts ROMPP adopts basic object-oriented concepts, such as class and inheritance, as can be found in most object-oriented data models <ref> [7, 11, 18, 27] </ref>. For completeness, these concepts are defined below. Definition 1. <p> The effect of each schema change identified in Step 1 on the rest of the schema is investigated and its impact on the underlying data is also considered. A. Schema Change Taxonomy One of the first object-oriented schema change approaches was proposed by Banerjee et al. [3] for ORION <ref> [18] </ref>. This taxonomy was adopted in most other schema evolution research for OODBs [26, 31, 52] and represents the most frequently used set of schema changes.
Reference: [19] <author> W. Kim, and H.-T. Chou, </author> <title> "Version of Schema For Object-Oriented Databases," </title> <type> MCC Technical Report, </type> <note> ACA-ST-278-87, Rev. 1, </note> <month> February </month> <year> 1988. </year>
Reference-contexts: To avoid expensive changes to existing applications dependent on the original schema, researchers studied other approaches such as object-oriented views [35, 36, 44] and versions <ref> [19, 25] </ref>. [32] proposes an axiomatic model to provide a common framework for defining and comparing different schema evolution policies. All of these typically support the schema change taxonomy initially proposed for ORION [3].
Reference: [20] <author> V.B. Lortz, </author> <title> "An Object-Oriented Real-Time Database System for Multiprocessors," </title> <type> Ph.D. dissertation, </type> <institution> Department of Electrical Engineering and Computer Science, University of Michigan, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: An OODB schema is equal to the class hierarchy. B. Model Description Based on our evaluation of existing real-time systems <ref> [4, 10, 15, 17, 20, 24, 47] </ref> and real-time manufacturing applications [2, 5, 23], we have identified two key characteristics for real-time data models: timing constraints and performance polymorphism. In open-architecture machine tool controllers, control tasks periodically read sensor data, compute control parameters, and issue actuator commands. <p> The object-oriented approach is thus critical to our system. This transaction execution model maximizes the performance benefits of using main memory because it eliminates the overhead implicit in client-server architectures <ref> [20] </ref>. E. Performance Evaluation A key problem in utilizing ROMPP for a particular application is how to obtain performance values of methods for a specialization dimension, in particular, method execution times. <p> It considers a broad range of semantic information regarding logical and temporal consistency, and allows a wide range of correctness criteria that relax serializability. However, performance polymorphism is again not provided. MDARTS (Multiprocessor Database Architecture for Real-Time Systems) <ref> [20, 21] </ref> supports explicit declarations of real-time requirements and semantic constraints within application code. It examines these declarations during application initialization and dynamically adjusts its data management strategy. The research reported in this paper is an integral part of the ongoing MDARTS project.
Reference: [21] <author> V.B. Lortz, and K.G. Shin, "MDARTS: </author> <title> A Multiprocessor Database Architecture for Real-Time Systems," </title> <type> Technical Report CSE-TR-155-93, </type> <institution> Department of Electrical Engineering and Computer Science, University of Michigan, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: It considers a broad range of semantic information regarding logical and temporal consistency, and allows a wide range of correctness criteria that relax serializability. However, performance polymorphism is again not provided. MDARTS (Multiprocessor Database Architecture for Real-Time Systems) <ref> [20, 21] </ref> supports explicit declarations of real-time requirements and semantic constraints within application code. It examines these declarations during application initialization and dynamically adjusts its data management strategy. The research reported in this paper is an integral part of the ongoing MDARTS project.
Reference: [22] <author> S. Marche, </author> <title> "Measuring the Stability of Data Models," </title> <journal> European Journal of Information Systems, </journal> <year> 1993, </year> <pages> pp. 37-47. </pages>
Reference: [23] <author> Martin Marietta Astronautics Group, </author> <title> Next Generation Workstation/Machine Controller Specification for an Open System Architecture Standard, </title> <address> NGC-0001-13-000-SYS edition, </address> <month> March </month> <year> 1992. </year>
Reference-contexts: An OODB schema is equal to the class hierarchy. B. Model Description Based on our evaluation of existing real-time systems [4, 10, 15, 17, 20, 24, 47] and real-time manufacturing applications <ref> [2, 5, 23] </ref>, we have identified two key characteristics for real-time data models: timing constraints and performance polymorphism. In open-architecture machine tool controllers, control tasks periodically read sensor data, compute control parameters, and issue actuator commands.
Reference: [24] <author> C.W. Mercer, and H. Tokuda, </author> <title> "The ARTS Real-Time Object Model," </title> <booktitle> Proceedings of the 11th Real-Time Systems Symposium, </booktitle> <year> 1990, </year> <pages> pp. 2-10. </pages>
Reference-contexts: An OODB schema is equal to the class hierarchy. B. Model Description Based on our evaluation of existing real-time systems <ref> [4, 10, 15, 17, 20, 24, 47] </ref> and real-time manufacturing applications [2, 5, 23], we have identified two key characteristics for real-time data models: timing constraints and performance polymorphism. In open-architecture machine tool controllers, control tasks periodically read sensor data, compute control parameters, and issue actuator commands. <p> The parameterization of generic classes in CHAOS can be directly modeled by ROMPP, where envelope classes can represent generic classes and letter classes correspond to different implementations. These letter classes are specialized along several dimensions|the parameterized attributes in CHAOS. ARTS (Advanced Real-time Technology) <ref> [24, 45] </ref> is a distributed real-time operating system kernel. RTC++ [15] is an extension of C++. Both of them are based on the same real-time object model, which describes real-time properties in systems and encapsulates rigid timing constraints in an object.
Reference: [25] <author> S. Monk, and I. Sommerville, </author> <title> "Schema Evolution in OODBs Using Class Versioning," </title> <booktitle> SIGMOD Record, </booktitle> <volume> Vol. 22, No. 3, </volume> <month> Septem-ber </month> <year> 1993, </year> <pages> pp. 16-22. </pages>
Reference-contexts: To avoid expensive changes to existing applications dependent on the original schema, researchers studied other approaches such as object-oriented views [35, 36, 44] and versions <ref> [19, 25] </ref>. [32] proposes an axiomatic model to provide a common framework for defining and comparing different schema evolution policies. All of these typically support the schema change taxonomy initially proposed for ORION [3].
Reference: [26] <author> M.M.A. Morsi, S.B. Navathe, and H.-J. Kim, </author> <title> "A Schema Management and Prototyping Interface for an Object-Oriented Database Environment," </title> <editor> in F. Van Assche, B. Moulin, and C. Rolland (Editors), </editor> <title> Object Oriented Approach in Information Systems, </title> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1991, </year> <pages> pp. 157-180. </pages>
Reference-contexts: We then develop a framework for changes to schemata of real-time OODBs based on the schema change taxonomy currently being employed by virtually all existing (non-real-time) schema evolution systems [3]. While schema evolution has been defined for many object-oriented data models <ref> [3, 26, 31, 52] </ref>, none of them is for RTDBSs. We re-evaluate this work in the context of RTDBSs, making modifications to the semantics of schema changes and to the needs of schema change resolution rules and schema invariants. <p> A. Schema Change Taxonomy One of the first object-oriented schema change approaches was proposed by Banerjee et al. [3] for ORION [18]. This taxonomy was adopted in most other schema evolution research for OODBs <ref> [26, 31, 52] </ref> and represents the most frequently used set of schema changes. In fact, most commercial OODB systems have implemented a subset of this taxonomy as their schema change support [11, 16, 31] However, this taxonomy does not consider any real-time aspects of object models. <p> ZHOU ET AL.: SCHEMA EVOLUTION OF AN OO RTDBS 17 V. RELATED WORK A. Schema Evolution There has been considerable work on defining schema evolution for OODBs. Examples are schema evolution for ORION [3], O2 [52], GemStone [31] and GOOSE <ref> [26] </ref>. However, none of them addressed schema evolution in the context of real-time OODBs. The traditional approach is to define a number of invariants that must be satisfied by the schema and then to define rules for maintaining these invariants (e.g., [3]).
Reference: [27] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <year> 1992. </year>
Reference-contexts: In other words, we are not proposing a complete 3 data model, but one that is suitable and sufficient for manufacturing applications. A. Basic Object-Oriented Concepts ROMPP adopts basic object-oriented concepts, such as class and inheritance, as can be found in most object-oriented data models <ref> [7, 11, 18, 27] </ref>. For completeness, these concepts are defined below. Definition 1.
Reference: [28] <author> Open-Architecture Controls Team, </author> <title> Developer's Guide for Open-Architecture Control of the Robotool, </title> <institution> Department of Electrical Engineering and Computer Science and Department of Mechanical Engineering and Applied Mechanics, The University of Michi-gan, </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: The GUI task communicates with the HMI task using message passing. The control functionality is performed by the X-, Y- and Z-Axis control tasks. To control the motion of each axis, either the PID control algorithm or the fuzzy logic control algorithm (developed by mechanical engineers) <ref> [28] </ref> is used. In the PID control, a position error (difference between a reference position input and a feedback from an encoder) 15 These tasks are run under QNX, which supports priority-based preemptive scheduling. A larger number represents a higher priority. Fig. 13.
Reference: [29] <author> G. Ozsoyoglu, and R. Snodgrass, </author> <title> "Temporal and Real-Time Databases: A Survey," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> Vol. 7, No. 4, </volume> <month> August </month> <year> 1995, </year> <pages> pp. 513-532. </pages>
Reference: [30] <author> J. Peckham, V.F. Wolfe, JJ Prichard, and L.C. DiPippo, "RT-SORAC: </author> <title> Design of a Real-Time Object-Oriented Database System," </title> <type> Technical Report 94-231, </type> <institution> University of Rhode Island, </institution> <year> 1994. </year>
Reference-contexts: XX, NO. Y, MONTH 1999 istic of rules, where an envelope class represents a generic rule (or a class of rules) and letter classes represent the same rule with different timing specifications, which may require different implementations. RTSORAC (Real-Time Semantic Objects Relationships And Constraints) <ref> [12, 30, 47] </ref> incorporates a comprehensive model for concurrency control in real-time OODBs and a flexible approach to synchronizing real-time transactions. It considers a broad range of semantic information regarding logical and temporal consistency, and allows a wide range of correctness criteria that relax serializability.
Reference: [31] <author> J. Penney, and J. Stein, </author> <title> "Class Modification in the GemStore Object-Oriented Database System," </title> <booktitle> Proceedings of the 2nd International Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <month> October </month> <year> 1987. </year>
Reference-contexts: We then develop a framework for changes to schemata of real-time OODBs based on the schema change taxonomy currently being employed by virtually all existing (non-real-time) schema evolution systems [3]. While schema evolution has been defined for many object-oriented data models <ref> [3, 26, 31, 52] </ref>, none of them is for RTDBSs. We re-evaluate this work in the context of RTDBSs, making modifications to the semantics of schema changes and to the needs of schema change resolution rules and schema invariants. <p> A. Schema Change Taxonomy One of the first object-oriented schema change approaches was proposed by Banerjee et al. [3] for ORION [18]. This taxonomy was adopted in most other schema evolution research for OODBs <ref> [26, 31, 52] </ref> and represents the most frequently used set of schema changes. In fact, most commercial OODB systems have implemented a subset of this taxonomy as their schema change support [11, 16, 31] However, this taxonomy does not consider any real-time aspects of object models. <p> This taxonomy was adopted in most other schema evolution research for OODBs [26, 31, 52] and represents the most frequently used set of schema changes. In fact, most commercial OODB systems have implemented a subset of this taxonomy as their schema change support <ref> [11, 16, 31] </ref> However, this taxonomy does not consider any real-time aspects of object models. We extend the taxonomy with schema changes for ROMPP. <p> ZHOU ET AL.: SCHEMA EVOLUTION OF AN OO RTDBS 17 V. RELATED WORK A. Schema Evolution There has been considerable work on defining schema evolution for OODBs. Examples are schema evolution for ORION [3], O2 [52], GemStone <ref> [31] </ref> and GOOSE [26]. However, none of them addressed schema evolution in the context of real-time OODBs. The traditional approach is to define a number of invariants that must be satisfied by the schema and then to define rules for maintaining these invariants (e.g., [3]).
Reference: [32] <author> R.J. Peters, </author> <title> and M.T. Ozsu, "Axiomatization of Dynamic Schema Evolution in Objectbases," </title> <booktitle> Proceedings of the 11th International Conference on Data Engineering, </booktitle> <month> March </month> <year> 1995, </year> <pages> pp. 156-164. </pages>
Reference-contexts: Furthermore, we expand the schema change framework with new constructs|including new schema change operators, new resolution rules, and new invariants|necessary for handling additional features specific to the real-time aspects of ROMPP. We use an axiomatic model <ref> [32] </ref> to formally express the semantics of schema changes. This allows well-defined semantics (as opposed to other schema evolution models that are vaguely described in English language) and easy comparison with other yet-to-be-developed real-time schema evolution approaches. <p> Therefore, we only describe the impact of schema changes on existing data without discussing when and how they are actually converted. D.1 Axiomatization of Schema Changes To introduce a formal specification of schema change semantics, we adopt an axiomatic model similar to the one in <ref> [32] </ref>, which has been proven sound and complete. The main differences between ours and that in [32] are: * We use the terminology of class, subclass and superclass (descendant and ancestor), instead of type, subtype, and supertype. * The Axiom of Pointedness is not used, since there is no single class <p> D.1 Axiomatization of Schema Changes To introduce a formal specification of schema change semantics, we adopt an axiomatic model similar to the one in <ref> [32] </ref>, which has been proven sound and complete. The main differences between ours and that in [32] are: * We use the terminology of class, subclass and superclass (descendant and ancestor), instead of type, subtype, and supertype. * The Axiom of Pointedness is not used, since there is no single class used as a common base class in ROMPP (i.e., there is not a single class that <p> The axioms provide a consistent and automatic mechanism for re-computing the entire class lattice after a change is made to either the essential superclasses P e (t) or the essential properties N e (t) of a class t. These schema change axioms are sound and complete <ref> [32] </ref>. 10 IEEE TRANSACTIONS ON KNOWLEDGE AND DATA ENGINEERING, VOL. XX, NO. Y, MONTH 1999 TABLE II Axioms of subclassing and property inheritance. <p> To avoid expensive changes to existing applications dependent on the original schema, researchers studied other approaches such as object-oriented views [35, 36, 44] and versions [19, 25]. <ref> [32] </ref> proposes an axiomatic model to provide a common framework for defining and comparing different schema evolution policies. All of these typically support the schema change taxonomy initially proposed for ORION [3].
Reference: [33] <author> G. Pritschow and G. Junghans, </author> <booktitle> presentations at the International Workshop on Open-Architecture Controllers for Automation, </booktitle> <address> Ann Arbor, Michigan, </address> <month> April </month> <year> 1994. </year>
Reference: [34] <author> G. Pritschow, and C. Daniel, </author> <title> "Open Control System | A Future-Oriented Concept," </title> <booktitle> Proceedings of the 27th CIRP International Seminar on Manufacturing Systems, </booktitle> <month> May </month> <year> 1995, </year> <pages> pp. 5-17. </pages>
Reference: [35] <author> Y.G. Ra, </author> <title> and E.A. Rundensteiner, "A Transparent Object-Oriented Schema Change Approach Using View Evolution," </title> <booktitle> Proceedings of the 11th International Conference on Data Engineering, </booktitle> <month> March </month> <year> 1995, </year> <pages> pp. 165-172. </pages>
Reference-contexts: The traditional approach is to define a number of invariants that must be satisfied by the schema and then to define rules for maintaining these invariants (e.g., [3]). To avoid expensive changes to existing applications dependent on the original schema, researchers studied other approaches such as object-oriented views <ref> [35, 36, 44] </ref> and versions [19, 25]. [32] proposes an axiomatic model to provide a common framework for defining and comparing different schema evolution policies. All of these typically support the schema change taxonomy initially proposed for ORION [3].
Reference: [36] <author> Y.G. Ra, </author> <title> and E.A. Rundensteiner, "A Transparent Schema Evolution System Based on Object-Oriented View Technology," </title> <journal> to appear in IEEE Transactions on Knowledge and Data Engineering, </journal> <year> 1997. </year>
Reference-contexts: The traditional approach is to define a number of invariants that must be satisfied by the schema and then to define rules for maintaining these invariants (e.g., [3]). To avoid expensive changes to existing applications dependent on the original schema, researchers studied other approaches such as object-oriented views <ref> [35, 36, 44] </ref> and versions [19, 25]. [32] proposes an axiomatic model to provide a common framework for defining and comparing different schema evolution policies. All of these typically support the schema change taxonomy initially proposed for ORION [3].
Reference: [37] <author> K. Ramamritham, </author> <title> "Real-Time Databases," Distributed and Parallel Databases, </title> <type> 1, </type> <year> 1993, </year> <pages> pp. 199-226. </pages>
Reference: [38] <author> K. Schwan, P. Gopinath, and W. Bo, </author> <title> "CHAOS-Kernel Support for Objects in the Real-Time Domain," </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. C-36, No. 8, </volume> <month> August </month> <year> 1987, </year> <pages> pp. 904-916. </pages>
Reference-contexts: In this paper, we show that timing constraints and performance polymorphism are two key characteristics of real-time applications and should be explicitly supported by a real-time data model. CHAOS (Concurrent Hierarchical Adaptable Object System) <ref> [4, 38] </ref> is an object-based language and programming/execution system designed for dynamic real-time applications. One of its key components is a C-based run-time library for the real-time kernel. CHAOS supports a limited form of dynamic parameterization of generic classes to allow easy development of different implementations of objects.
Reference: [39] <author> K.G. Shin, and P. Ramanathan, </author> <title> "Real-Time Computing: A New Discipline of Computer Science and Engineering," </title> <journal> IEEE Proceedings, </journal> <volume> Vol. 82, No. 1, </volume> <month> January </month> <year> 1994, </year> <pages> pp. 6-24. </pages>
Reference: [40] <author> M. Singhal, </author> <title> "Issues and Approaches to Design of Real-Time Database Systems," </title> <booktitle> SIGMOD Record, </booktitle> <volume> Vol. 17, No. 1, </volume> <month> March </month> <year> 1988, </year> <pages> pp. 19-33. </pages>
Reference: [41] <author> D. Sjoberg, </author> <title> "Quantifying Schema Evolution," </title> <booktitle> Information and Software Technology, </booktitle> <month> January </month> <year> 1993, </year> <pages> pp. 35-54. </pages>
Reference: [42] <author> N. Soparkar, H.F. Korth, and A. Silberschatz, </author> <title> "Database with Deadline and Contingency Constraints," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> Vol. 7, No. 4, </volume> <month> August </month> <year> 1995, </year> <pages> pp. 552-565. </pages>
Reference: [43] <author> A. Stevens, </author> <title> C++ Database Development, </title> <editor> 2nd ed., MIS:Press, </editor> <year> 1994. </year>
Reference: [44] <author> V.C. Taube, </author> <title> and E.A. Rundensteiner, "Schema Removal Issues for Transparent Schema Evolution," </title> <booktitle> Sixth International Workshop on Research Issues on Data Engineering, Interoperability of Nontraditional Database Systems, </booktitle> <month> Feb. </month> <year> 1996. </year>
Reference-contexts: The traditional approach is to define a number of invariants that must be satisfied by the schema and then to define rules for maintaining these invariants (e.g., [3]). To avoid expensive changes to existing applications dependent on the original schema, researchers studied other approaches such as object-oriented views <ref> [35, 36, 44] </ref> and versions [19, 25]. [32] proposes an axiomatic model to provide a common framework for defining and comparing different schema evolution policies. All of these typically support the schema change taxonomy initially proposed for ORION [3].
Reference: [45] <author> H. Tokuda, and C.W. Mercer, </author> <title> "ARTS: A Distributed Real-Time Kernel," </title> <journal> ACM Operating Systems Review, </journal> <volume> 23(3), </volume> <month> July </month> <year> 1989, </year> <pages> pp. 29-53. </pages>
Reference-contexts: The parameterization of generic classes in CHAOS can be directly modeled by ROMPP, where envelope classes can represent generic classes and letter classes correspond to different implementations. These letter classes are specialized along several dimensions|the parameterized attributes in CHAOS. ARTS (Advanced Real-time Technology) <ref> [24, 45] </ref> is a distributed real-time operating system kernel. RTC++ [15] is an extension of C++. Both of them are based on the same real-time object model, which describes real-time properties in systems and encapsulates rigid timing constraints in an object.
Reference: [46] <author> O. Ulusoy, </author> <title> "Current Research on Real-Time Databases," </title> <journal> SIG-MOD Record, </journal> <volume> Vol. 21, No. 4, </volume> <month> December </month> <year> 1992, </year> <pages> pp. 16-21. </pages>
Reference: [47] <author> V.F. Wolfe, L.B. Cingiser, J. Peckham, and J. Prichard, </author> <title> "A Model For Real-Time Object-Oriented Databases," </title> <booktitle> Proceedings of the Tenth IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <month> May </month> <year> 1993, </year> <pages> pp. 57-63. </pages>
Reference-contexts: An OODB schema is equal to the class hierarchy. B. Model Description Based on our evaluation of existing real-time systems <ref> [4, 10, 15, 17, 20, 24, 47] </ref> and real-time manufacturing applications [2, 5, 23], we have identified two key characteristics for real-time data models: timing constraints and performance polymorphism. In open-architecture machine tool controllers, control tasks periodically read sensor data, compute control parameters, and issue actuator commands. <p> XX, NO. Y, MONTH 1999 istic of rules, where an envelope class represents a generic rule (or a class of rules) and letter classes represent the same rule with different timing specifications, which may require different implementations. RTSORAC (Real-Time Semantic Objects Relationships And Constraints) <ref> [12, 30, 47] </ref> incorporates a comprehensive model for concurrency control in real-time OODBs and a flexible approach to synchronizing real-time transactions. It considers a broad range of semantic information regarding logical and temporal consistency, and allows a wide range of correctness criteria that relax serializability.
Reference: [48] <author> L. Zhou, E.A. Rundensteiner, and K.G. Shin, </author> <title> "Schema Evolution for Real-Time Object-Oriented Databases," </title> <journal> Technical Report 20 IEEE TRANSACTIONS ON KNOWLEDGE AND DATA ENGINEERING, </journal> <volume> VOL. XX, NO. </volume> <pages> Y, </pages> <month> MONTH </month> <year> 1999 </year> <month> CSE-TR-199-94, </month> <institution> Department of EECS, University of Michigan, </institution> <month> March </month> <year> 1994. </year>
Reference: [49] <author> L. Zhou, E.A. Rundensteiner, and K.G. Shin, </author> <title> "OODB Support for Real-Time Open-Architecture Controllers," </title> <booktitle> Proceedings of the Fourth International Conference on Database Systems for Advanced Applications, </booktitle> <month> April </month> <year> 1995, </year> <pages> pp. 206-213. </pages>
Reference-contexts: In this paper, we also demonstrate the utility of our real-time object-oriented data model and schema evolution framework based on manufacturing applications. A preliminary description of ROMPP can be found in <ref> [49] </ref>. We build upon this research by proposing a schema evolution framework for real-time object-oriented databases in general and for ROMPP in particular. We also present an in-depth evaluation of our approach for machine tool control applications. The main contributions of this paper are summarized below.
Reference: [50] <author> L. Zhou, M.J. Washburn, K.G. Shin, </author> <title> and E.A. Rundensteiner, "Performance Evaluation of Modular Real-Time Controllers," </title> <booktitle> to appear in the 1996 ASME International Mechanical Engineering Congress and Exposition, </booktitle> <month> November </month> <year> 1996. </year>
Reference-contexts: Different implementations of database services (letter classes) are organized in reusable class libraries. These libraries also include many useful system classes, such as a class called Task. It is a generic real-time task and can be used to compose application tasks <ref> [50] </ref>. The RTDBS uses performance evaluation tools to measure, analyze, and store performance information of database services and application modules. Schema evolution tools will help the user make changes to the application. <p> A number of database service objects, organized as a class library, have been implemented to facilitate the development of control applications. For example, a task template may be used as a building block for a periodic control task <ref> [50] </ref>. In order to achieve high performance, database transactions are embedded in application tasks and executed directly in main memory, as opposed to in the database server, thus avoiding the context switching cost.
Reference: [51] <author> L. Zhou, K.G. Shin, E.A. Rundensteiner, and N. Soparkar, </author> <title> "Probabilistic Real-Time Data Access with Deadline and Interval Constraints," </title> <note> to appear in Sang H. </note> <author> Son, Kwei-Jay Lin and Azer Bestavros ed., </author> <title> Real-Time Databases Systems: Issues and Applications, </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1997. </year>
Reference-contexts: Tools for performance evaluation are being developed and will be integrated into ROMPP. The preliminary results of our empirical studies are reported in <ref> [51] </ref>. F. Need for Schema Evolution Support first constructs individual control tasks using task templates provided by the RTDBS and reusable objects previously developed and stored in the RTDBS. These control tasks may also be reusable modules for future applications. <p> In this case, it may be appropriate to introduce the notion of completion probability, which specifies the required probability that a task must meet its deadline. These tasks require probabilistic deadline guarantees. This is one of the issues we are currently investigating <ref> [51] </ref>. We would also like to enhance the real-time object model by introducing more sophisticated constructs that allow, for instance, value propagation (e.g., propagation of the performance value of a method to other methods that use it) and conditional specifications (e.g., performance dependency on system configuration).

References-found: 51

