URL: http://www.isi.edu/~ariadne/cs541/ip.ps
Refering-URL: http://www.isi.edu/~ariadne/cs541/example-projects.html
Root-URL: http://www.isi.edu
Title: High-Level Inspection Planning for Coordinate Measuring Machines using Domain Independent Planners  
Author: Steven Spitz 
Date: September 11, 1998  
Pubnum: CS541 AI Planning  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. L. Blum and M. L. Furst, </author> <title> Fast planning through planning graph analysis, </title> <booktitle> In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence, </booktitle> <address> Montreal, Canada, </address> <year> 1995. </year>
Reference: [2] <author> H. A. ElMaraghy and W. H. ElMaraghy, </author> <title> Computer-Aided Inspection Planning (CAIP), Advances in Feature Based Manufacturing, </title> <editor> J. J. Shau, M. Mantyla and D. S. Nau (Editors), </editor> <volume> Chapter 16, </volume> <pages> pages 363-396, </pages> <publisher> Elsevier Science B. V. </publisher> <year> 1994. </year>
Reference-contexts: Related Work Computer Aided Inspection Planning (CAIP) is a fairly recent field that was developed to support quality control systems in manufacturing <ref> [2] </ref>. Most systems that were developed in this area are rule-based Expert Systems that rely on a feature-based part model. The features in the model can be complex and may contain inspection code fragments (ICFs) that describe how you can inspect each feature [6].
Reference: [3] <author> D. E. Foulser, M. Li and Q. Yang, </author> <title> Theory and Algorithms for Plan Merging, </title> <journal> Artificial Intelligence, </journal> <volume> 57(2-3):143-182, </volume> <year> 1992. </year>
Reference-contexts: Work has been done on generating plans of maximum utility [9]. These methods normally use traditional plan space search, while pruning unpromising branches based on the utility function. This is not the approach taken in this paper. Here I will like to introduce the theory of plan merging <ref> [3] </ref> and demonstrate how it can be used specifically in the domain of inspection planning. First, we assign costs to actions. The cost should reflect the time it takes to execute the action and maybe other preferences (e.g., stable setups or cheaper probes). <p> If youre merging linear plans such as in Figure 6, then this can be reduced to the shortest common supersequence problem which is NPC <ref> [3] </ref>. Plan merging evolved from the process planning domain [3,6]. The main idea was that most process planning domains enumerated a finite number of instantiated actions that could be included in a plan. In our case, these actions are the primitive inspection plans.
Reference: [4] <author> C. Gazen, </author> <title> Extended GraphPlan, Research Project for AI Planning, </title> <year> 1996. </year>
Reference: [5] <author> F. L. Merat and G. M. Radack, </author> <title> Automatic Inspection Planning within a Feature Based CAD System, </title> <journal> Robotics & Computer Integrated Manufacturing, </journal> <volume> Vol. 9, No. 1, </volume> <pages> pp. 61-69, </pages> <year> 1992. </year>
Reference-contexts: However, I have indicated promising methods for optimal planning using plan merging and clustering techniques. Future work should entail developing a Geometric preprocessor that will produce the PIPs. This task seems rather encouraging based on previous work by Spyridi & Requicha [7] and based on feature-based design techniques <ref> [5] </ref>. Still, there may be an infinite number of PIPs in reality and the framework described in this paper should be extended to handle continuous domains.
Reference: [6] <author> D. S. Nau, S. K. Gupta, W. C. Regli, </author> <title> AI Planning Versus manufacturing Operation Planning: A Case Study, </title> <booktitle> In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1010-1015, </pages> <address> Seattle, WA, </address> <year> 1994. </year>
Reference-contexts: Most systems that were developed in this area are rule-based Expert Systems that rely on a feature-based part model. The features in the model can be complex and may contain inspection code fragments (ICFs) that describe how you can inspect each feature <ref> [6] </ref>. These ICFs are similar in function to the PIPs described in this paper, except that we use PIPs for simple surface features. A problem with ICFs is that they do not reflect global information such as accessibility to the feature or what happens when two features interact.
Reference: [7] <author> A. Spyridi, </author> <title> Automatic Generation of High Level Inspection Plans for Coordinate Measuring Machines, </title> <type> Ph.D. Dissertation, Technical Report #IRIS-94 324, </type> <institution> The University of Southern California, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: These features can be geometrically covered 2 by different sets of primitive surface features. The reason we need to use coverings is that many primary features cannot be inspected in a single CMM state configuration (see for example Figure 3). Measurements 1 This simplified version is taken from <ref> [7] </ref> page 137. 2 A set of surface features cover a primary feature, if the union of the former is a superset of the later. 4 capture the relation between tolerances, primary features and their respective segmentation into surface features. <p> However, I have indicated promising methods for optimal planning using plan merging and clustering techniques. Future work should entail developing a Geometric preprocessor that will produce the PIPs. This task seems rather encouraging based on previous work by Spyridi & Requicha <ref> [7] </ref> and based on feature-based design techniques [5]. Still, there may be an infinite number of PIPs in reality and the framework described in this paper should be extended to handle continuous domains.
Reference: [8] <author> A. Spyridi and A. A. G. Requicha, </author> <title> Automatic Programming for Coordinate Measuring Machines, </title> <booktitle> Proceedings ICRA 94, </booktitle> <address> San Diego, CA, </address> <pages> pp. 1107-1112, </pages> <month> May 8-13, </month> <year> 1994. </year>
Reference: [9] <author> M. Williamson and S. Hanks, </author> <title> Optimal Planning with a Goal-Directed Utility Model, </title> <type> xxx </type>
Reference-contexts: A trivially correct plan is illustrated in Figure 6. I.S. CHANGESU CHANGE-PG CHANGE-PD INSPECTSF MEASURE CHANGESU CHANGE-PG CHANGE-PD INSPECTSF MEASURE CHANGESU CHANGE-PG CHANGE-PD INSPECTSF MEASURE G.S. Work has been done on generating plans of maximum utility <ref> [9] </ref>. These methods normally use traditional plan space search, while pruning unpromising branches based on the utility function. This is not the approach taken in this paper.
References-found: 9

