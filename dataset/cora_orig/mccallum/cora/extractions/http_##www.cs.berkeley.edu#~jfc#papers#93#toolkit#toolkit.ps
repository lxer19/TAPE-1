URL: http://www.cs.berkeley.edu/~jfc/papers/93/toolkit/toolkit.ps
Refering-URL: http://www.cs.berkeley.edu/~jfc/
Root-URL: 
Title: A Toolkit for Non-linear Algebra  
Author: John Canny 
Date: August 16, 1993  
Address: Berkeley, CA, 94720  
Affiliation: University of California  
Abstract: This report describes an implementation, now in progress, of a toolkit for polynomial algebra. The toolkit is being written in C, and it can solve systems of equations over the complex numbers, and inequalities over the reals. There are many applications of such a toolkit, since problems from many branches of science and engineering can be formulated using systems of polynomial equations and inequalities. By several well-known theorems, in particular Tarski's on the decid-ability of the theory of the reals, it is possible to solve such problems in principle. But the worst case bounds are exponential or doubly-exponential in the number of variables, and no practical system has appeared that can deal with large problems. On the other hand, systems of polynomials may have a special structure, a kind of sparseness, that implies a complexity (measured by the algebraic degree) much lower than the worst case. Indeed, most of the applications we have studied are of this type. Very recently, algorithms have been developed by the author and others that can exploit this structure. This realization is a strong motivation for developing the toolkit at this time. In addition, there have been improvements in algorithms for sign determination and symbolic-numeric computation, and we feel that these methods are now advanced enough to warrant implementation.
Abstract-found: 1
Intro-found: 1
Reference: [Ber75] <author> D. N. Bernstein. </author> <title> The number of roots of a system of equations. </title> <journal> (Translated from) Funktsional'nyi Analiz i Ego Prilozheniya, </journal> <volume> 9(3) </volume> <pages> 1-4, </pages> <month> Jul-Sep </month> <year> 1975. </year>
Reference-contexts: A bound derived from the set of non-zero coefficients is called a Bernstein 3 bound. Bernstein showed that his bound is exact if all the coefficients of the polynomial system are generic <ref> [Ber75] </ref>. In fact they are exact under much weaker assumptions: Only the coefficients of terms that lie at the vertices of the Newton polytopes (defined later in this section) need to be generic for the bounds to be exact [CR91]. <p> The Newton polytopes capture the combinatorial properties of the system in a remarkable way. We have the following bound on the number of roots of a system of m = n polynomials in n variables, see <ref> [Ber75] </ref>, [Kus76], [Kho78]. Theorem 2.4 (Bernstein's Theorem) Let f 1 ; : : : ; f n 2 C [x 1 ; x 1 ; : : : ; x n ; x 1 n ].
Reference: [Bet92] <author> U. Betke. </author> <title> Mixed volumes of polytopes. </title> <journal> Arch. der Math., </journal> <volume> 58 </volume> <pages> 388-391, </pages> <year> 1992. </year>
Reference: [BF91] <author> J. Backelin and R. Froberg. </author> <title> How we proved that there are exactly 924 cyclic 7-roots. </title> <booktitle> In International Symposium on Symbolic and Algebraic Computation, </booktitle> <pages> pages 103-111, </pages> <address> 1991. Bonn. </address>
Reference-contexts: As a benchmark, we give its running times for bounding the number of cyclic n-roots for various n. The cyclic n-roots problem is of some independent interest, but it has primarily served as a computational benchmark for algebraic algorithms. More details and references are given in <ref> [BF91] </ref>. The equations themselves arise in Fourier analysis. <p> The last equation x 1 x n = 1 forces all the solutions to lie in (C fl ) n . So Bernstein's theorem provides an exact count allowing for multiplicities. In the one case where the number of solutions is known, n = 7 <ref> [BF91] </ref>, the multiplicities are all 1, and the Bernstein bound is exact. To our knowledge, the bounds for n = 9 and n = 10 have not been computed before, and the value for n = 7 tooks many hours to compute using a Grobner algorithm called Bergmann in [BF91]. <p> 7 <ref> [BF91] </ref>, the multiplicities are all 1, and the Bernstein bound is exact. To our knowledge, the bounds for n = 9 and n = 10 have not been computed before, and the value for n = 7 tooks many hours to compute using a Grobner algorithm called Bergmann in [BF91]. This is an encouraging sign for the effectiveness of the mixed volume algorithm. 4 Toolkit Overview: Symbolic Kit As shown in figure 5, the primary function of the symbolic toolkit is to determine solvability of systems of polynomial inequalities over the real numbers.
Reference: [BOKR86] <author> M. Ben-Or, D. Kozen, and J. Reif. </author> <title> The complexity of elementary algebra and geometry. </title> <journal> J. Comp. and Sys. Sci., </journal> <volume> 32 </volume> <pages> 251-264, </pages> <year> 1986. </year>
Reference-contexts: The partial derivatives are again computed using SLPs, and they will be non-zero for almost all choices of l. 4.3 Sign Determination Most of the recent work on real algebraic algorithms makes use of a sign-determination lemma due to Ben-Or, Kozen and Reif <ref> [BOKR86] </ref>. This lemma, henceforth called "BKR", takes a univariate polynomial p (s), and polynomials q 1 (s); : : : ; q k (s), and returns m sign sequences 2 f; 0; +g k , where m is the number of real roots of p (s).
Reference: [Can88a] <author> J.F. Canny. </author> <title> The Complexity of Robot Motion Planning. </title> <publisher> M.I.T. Press, </publisher> <address> Cambridge, </address> <year> 1988. </year>
Reference-contexts: Much recent work [HRS90], [Ren92] [GV92] has focussed on improving the asymptotic complexity bounds for the theory of the reals, but unfortunately, most of it ignores the complexity in practice. The work of the author <ref> [Can88a] </ref>, [Can91b], [Can91a], [Can93b], [Can93a] on the other hand, has been specifically directed at practical algorithms. The collection of techniques developed in those papers permits symbolic calculation (i.e. exact calculation, even with singular inputs) whose complexity is polynomial in the effective degree mentioned earlier. <p> For example, computing connected components of algebraic curves, and ordering points along those curves. This leads ultimately to an algorithm for computing connected components <ref> [Can88a] </ref>. We also plan to implement some fast query algorithms for point location in arrangements of polynomial surfaces. The algebraic algorithms needed in these applications are all contained in the toolkit. This explains the toolkit moniker, and the module-by-module description in this report.
Reference: [Can88b] <author> J.F. Canny. </author> <title> Some algebraic and geometric computations in PSPACE. </title> <booktitle> In ACM Symposium on Theory of Computing, </booktitle> <pages> pages 460-467, </pages> <year> 1988. </year>
Reference-contexts: The coordinates x 0 2 ; : : : ; x 0 n are a basis for the n 1 dimensional linear space which is the kernel of . The process of solving this system in the limit is described in <ref> [Can88b] </ref> and [Can90], and involves computing the resultant of the system, arranging it in powers of , and retaining the lowest degree coefficient. <p> The system f = 0 will usually be derived from equation 8 of the last section. 19 There are several ways to construct (p; r) from f . One method uses polynomial GCDs and was described in <ref> [Can88b] </ref>. A more efficient method based on differentiation was given by Renegar [Ren89], and that is the one we use in the toolkit. Compared to the cost of computing the polynomial p (s), Renegar's method computes all the r i (s)'s in only n times as many operations.
Reference: [Can90] <author> J.F. Canny. </author> <title> Generalized characteristic polynomials. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 9(3), </volume> <year> 1990. </year>
Reference-contexts: The coordinates x 0 2 ; : : : ; x 0 n are a basis for the n 1 dimensional linear space which is the kernel of . The process of solving this system in the limit is described in [Can88b] and <ref> [Can90] </ref>, and involves computing the resultant of the system, arranging it in powers of , and retaining the lowest degree coefficient.
Reference: [Can91a] <author> J.F. Canny. </author> <title> Computing roadmaps of general semi-algebraic sets. </title> <booktitle> In AAECC-91, 1991. </booktitle> <address> New Orleans. </address>
Reference-contexts: Much recent work [HRS90], [Ren92] [GV92] has focussed on improving the asymptotic complexity bounds for the theory of the reals, but unfortunately, most of it ignores the complexity in practice. The work of the author [Can88a], [Can91b], <ref> [Can91a] </ref>, [Can93b], [Can93a] on the other hand, has been specifically directed at practical algorithms. The collection of techniques developed in those papers permits symbolic calculation (i.e. exact calculation, even with singular inputs) whose complexity is polynomial in the effective degree mentioned earlier. <p> This is a safer representation since the ordering check can determine if the float descriptions are too close to order, and flag failure rather than producing an incorrect ordering. 4.5 Computing with Infinitesimals In the algorithms of [HRS90], [Ren92], [GV92] and <ref> [Can91a] </ref>, various singularities are dealt with by perturbing the input polynomials with infinitesimals. This moves the problem away from the singularity, and when done carefully preserves the important properties (like connectivity or non-emptiness) of the input. Computations with an infinitesimal * are done in the rational field Q (*).
Reference: [Can91b] <author> J.F. Canny. </author> <title> An improved sign determination algorithm. </title> <booktitle> In AAECC-91, 1991. </booktitle> <address> New Orleans. </address>
Reference-contexts: Much recent work [HRS90], [Ren92] [GV92] has focussed on improving the asymptotic complexity bounds for the theory of the reals, but unfortunately, most of it ignores the complexity in practice. The work of the author [Can88a], <ref> [Can91b] </ref>, [Can91a], [Can93b], [Can93a] on the other hand, has been specifically directed at practical algorithms. The collection of techniques developed in those papers permits symbolic calculation (i.e. exact calculation, even with singular inputs) whose complexity is polynomial in the effective degree mentioned earlier. <p> Each sign sequence corresponds to a particular root ff j of p (s), in such a way that i = sign (q i (ff j )). Given the importance of BKR, it is natural to look for improvements and simplifications. In <ref> [Can91b] </ref> and [Can93b], we described a faster and simpler version of BKR, which allows purely 20 symbolic elimination. <p> This task reduces to determining the value of a single element of K n;m given its row and column indices. Both steps can be solved with simple recursive procedures whose running time is O (nm) and O (n) respectively. Refer to <ref> [Can91b] </ref> and [Can93b] for details. Let m denote the number of real roots of p (s), then m is not more than d, the degree of p (s).
Reference: [Can93a] <author> J. Canny. </author> <title> Computing roadmaps of general semi-algebraic sets. </title> <journal> Computer Journal, </journal> <note> 1993. Special Issue on Quantifier Elimination. </note>
Reference-contexts: Much recent work [HRS90], [Ren92] [GV92] has focussed on improving the asymptotic complexity bounds for the theory of the reals, but unfortunately, most of it ignores the complexity in practice. The work of the author [Can88a], [Can91b], [Can91a], [Can93b], <ref> [Can93a] </ref> on the other hand, has been specifically directed at practical algorithms. The collection of techniques developed in those papers permits symbolic calculation (i.e. exact calculation, even with singular inputs) whose complexity is polynomial in the effective degree mentioned earlier.
Reference: [Can93b] <author> J. Canny. </author> <title> Improved algorithms for sign-determination and existential quantifier elimination. </title> <journal> Computer Journal, </journal> <note> 1993. Special Issue on Quantifier Elimination. 28 </note>
Reference-contexts: Much recent work [HRS90], [Ren92] [GV92] has focussed on improving the asymptotic complexity bounds for the theory of the reals, but unfortunately, most of it ignores the complexity in practice. The work of the author [Can88a], [Can91b], [Can91a], <ref> [Can93b] </ref>, [Can93a] on the other hand, has been specifically directed at practical algorithms. The collection of techniques developed in those papers permits symbolic calculation (i.e. exact calculation, even with singular inputs) whose complexity is polynomial in the effective degree mentioned earlier. <p> For simplicity of explanation, we will assume that the set S is closed and bounded, and that the surfaces f i = 0 are in general position. These assumptions are not necessary, and methods for dealing with other cases are given in <ref> [Can93b] </ref>. Since we know the polynomials f i are in general position, the intersection of any n + 1 of them in n dimensions will be null. Any j n of them will intersect in a manifold of dimension n j. <p> Each sign sequence corresponds to a particular root ff j of p (s), in such a way that i = sign (q i (ff j )). Given the importance of BKR, it is natural to look for improvements and simplifications. In [Can91b] and <ref> [Can93b] </ref>, we described a faster and simpler version of BKR, which allows purely 20 symbolic elimination. <p> This task reduces to determining the value of a single element of K n;m given its row and column indices. Both steps can be solved with simple recursive procedures whose running time is O (nm) and O (n) respectively. Refer to [Can91b] and <ref> [Can93b] </ref> for details. Let m denote the number of real roots of p (s), then m is not more than d, the degree of p (s). The overall running time is: O (n (md 2 log 2 m + m 3 )) (9) assuming naive algorithms for polynomial arithmetic.
Reference: [CE93] <author> J. Canny and I. Emiris. </author> <title> An efficient algorithm for the sparse mixed resultant. In Con--ference on Algebraic Algorithms and Error-Correcting Codes, </title> <address> Puerto Rico, </address> <year> 1993. </year>
Reference-contexts: Algorithms to do this have appeared in the last year. An efficient homotopy algorithm for sparse systems was described in [HS92]. The first efficient algorithms for the sparse resultant were described by the author and a collaborator in <ref> [CE93] </ref>, [EC93]. Development in symbolic computation on polynomials has a longer history. Since the work of Collins in 1975, and Schwartz and Sharir and Grigor'ev et al., in the early 1980s, there has been steadily increasing interest in algorithms for the first-order theory of the reals. <p> Thirdly, linear algebra algorithms are easily parallelizable, and we inherit this property when we transform from non-linear to linear with a determinantal formula. The first determinantal formulae for the sparse resultant were given by the author and a collaborator in <ref> [CE93] </ref> and [EC93]. We will refer to those later in this section. Sparse equation solving is still a developing field, and sparse methods are not the full answer to exploiting low solution count. For systems with non-generic coefficients, the Bernstein bounds may still be poor. <p> Note that the leading diagonal is always non-zero. This property is important in proving that the determinant of M is non-zero in <ref> [CE93] </ref>. 2.2.1 The Size of M M is an jEj fi jEj matrix. The cardinality of jEj to a good approximation equals the volume of Q. <p> in a single variable, the resultant is the determinant of the Sylvester matrix: 2 6 6 6 6 4 . . . g m g 0 0 . . . 0 g m g 0 7 7 7 7 7 The form of the resultant matrix in the sparse case <ref> [CE93] </ref> is analogous, although in the multivariate case, the structure is more varied, as can be seen in the example resultant from section 2.2. But one important common feature is that each row of the matrix represents a multiple of one of the polynomials. <p> In this case, all the coordinates of the solution ~ can be recovered from the eigenvector corresponding to the eigenvalue l (~). This method is even simpler if the sparse resultant matrix of <ref> [CE93] </ref> is used. It is possible to define the matrix M of section 2.1 in such a way that the constant coefficient of g (s; x), which is the only coefficient depending on s, falls always on the leading diagonal.
Reference: [CR91] <author> J.F. Canny and J.M. Rojas. </author> <title> An optimal condition for determining the exact number of roots of a polynomial system. </title> <booktitle> In International Symposium on Symbolic and Algebraic Computation, 1991. </booktitle> <address> Bonn, Germany. </address>
Reference-contexts: In fact they are exact under much weaker assumptions: Only the coefficients of terms that lie at the vertices of the Newton polytopes (defined later in this section) need to be generic for the bounds to be exact <ref> [CR91] </ref>. So if we can write down a system in a form where these coefficients are independent, we know how to correctly count the solutions. Using sparse homotopy and resultant methods, we know also how to compute the solutions in a running time that depends on their number.
Reference: [Dix08] <author> A.L. Dixon. </author> <title> The eliminant of three quantics in two independent variables. </title> <journal> Proceedings of London Mathematical Society, </journal> <volume> 6 </volume> <pages> 49-69, 209-236, </pages> <year> 1908. </year>
Reference-contexts: When their complexity is measured as a function of the number of solutions, their performance is poor. This has been clear for specific systems for which a sparse resultant was already known. An example is the Dixon resultant <ref> [Dix08] </ref> for tensor product surface implicitization [MC92a]. The solution using resultants can be computed in 1/100 the time of a Grobner solution [Hof90]. The value of the special purpose resultants like Dixon's has been clear for some time.
Reference: [EC93] <author> I. Emiris and J. Canny. </author> <title> A practical algorithm for the sparse mixed resultant. </title> <booktitle> In International Symposium on Symbolic and Algebraic Computation, </booktitle> <year> 1993. </year>
Reference-contexts: Algorithms to do this have appeared in the last year. An efficient homotopy algorithm for sparse systems was described in [HS92]. The first efficient algorithms for the sparse resultant were described by the author and a collaborator in [CE93], <ref> [EC93] </ref>. Development in symbolic computation on polynomials has a longer history. Since the work of Collins in 1975, and Schwartz and Sharir and Grigor'ev et al., in the early 1980s, there has been steadily increasing interest in algorithms for the first-order theory of the reals. <p> Thirdly, linear algebra algorithms are easily parallelizable, and we inherit this property when we transform from non-linear to linear with a determinantal formula. The first determinantal formulae for the sparse resultant were given by the author and a collaborator in [CE93] and <ref> [EC93] </ref>. We will refer to those later in this section. Sparse equation solving is still a developing field, and sparse methods are not the full answer to exploiting low solution count. For systems with non-generic coefficients, the Bernstein bounds may still be poor. <p> Our resultant matrix size is O ((de) n ), and so is polynomial in the resultant degree considered either as a function of d or a function of n. But there is still room for considerable improvement. 2.2.2 A smaller sparse resultant matrix An improved construction is described in <ref> [EC93] </ref>. That paper defines a matrix M 0 whose determinant is a multiple of the resultant, and whose size is at most the size of M . In general, it is known to be impossible to construct a matrix whose determinant is exactly the sparse resultant.
Reference: [FIKY88] <author> T. S. Freeman, G. Imirzian, E. Kaltofen, and L. Yagati. Dagwood: </author> <title> A system for manipulating polynomials given by straight-line programs. </title> <journal> ACM Trans. Math. Software, </journal> <volume> 14(3) </volume> <pages> 218-240, </pages> <year> 1988. </year>
Reference-contexts: Rather than doing this repeatedly, we can obtain the lowest degree term by differentiating a straight-line program. 4.5.1 Straight-Line Program Arithmetic In our approach, we use arithmetic straight-line programs to represent the intermediate values in a calculation, as advocated by Kaltofen et al. in <ref> [Kal88, Kal89, FIKY88] </ref>. An SLP may be represented 23 as a directed acyclic graph. Each node of the graph holds an operation type, such as "+" and a value.
Reference: [FM90] <author> O. D. Faugeras and S. Maybank. </author> <title> Motion from point matches: Multiplicity of solutions. </title> <journal> International Journal of Computer Vision, </journal> <volume> 4(3) </volume> <pages> 225-246, </pages> <year> 1990. </year>
Reference-contexts: Typical examples of sparse systems are those that describe the inverse kinematics for a 6R robot [MC92b], forward kinematics for the Stewart platform [Mer92], camera motion from point matches <ref> [FM90] </ref>, and geometric constraints describing two- or three-dimensional objects [Owe91]. As the dimension of the problem increases, the difference between the sparse and non-sparse bounds 2 increases dramatically. <p> But by reducing the Bernstein bound, we can use methods based on sparse homotopies or sparse resultants to solve the problem with much better time bounds. We have applied this idea to a problem in computer vision. The problem, discussed in <ref> [FM90] </ref>, is to determine the camera displacement given the x; y coordinates of a set of points from two views. <p> The main result of the paper <ref> [FM90] </ref> is that this system has 10 solutions, meaning that there are 10 possiblities for the camera displacement. (In fact this result was proved earlier by Demazure, but the proof was non-elementary, and the proof in [FM90] is straightforward) If we evaluate the Bernstein bound for the system as given, we <p> The main result of the paper <ref> [FM90] </ref> is that this system has 10 solutions, meaning that there are 10 possiblities for the camera displacement. (In fact this result was proved earlier by Demazure, but the proof was non-elementary, and the proof in [FM90] is straightforward) If we evaluate the Bernstein bound for the system as given, we find that there should be 18 solutions. 26 But inspection of the equations shows that there are common subexpressions in the last two equations.
Reference: [GKZ90] <author> I. M. Gel'fand, M. M. Kapranov, and A. V. Zelevinsky. </author> <title> Discriminants of polynomials in several variables and triangulations of Newton polytopes. </title> <journal> (Translated from) Algebara i Analiz, </journal> <volume> 2 </volume> <pages> 1-62, </pages> <year> 1990. </year> <note> (English Translation in) Leningrad Math. J. 2 (1991). </note>
Reference-contexts: Certainly, one would like an analogue for polynomials with any given structure (the set of exponents appearing in the polynomials). These general resultants were defined first by Gel'fond et al., as a special case of an A-discriminant <ref> [GKZ90] </ref>. We will term them sparse resultants. A Poisson formula for the sparse resultant was given in [PS91]. The Poisson formula expresses the resultant in terms of symmetric functions, and makes it easy to find a sparse resultant's degree.
Reference: [GV92] <author> D.Y. Grigor'ev and N.N. Vorobjov. </author> <title> Counting connected components of a semialgebraic set in subexponential time. </title> <journal> Computational Complexity, </journal> <volume> 2 </volume> <pages> 133-186, </pages> <year> 1992. </year>
Reference-contexts: The theory of the reals is very powerful because it allows declarative description of an object via constraints, and leaves it to the decision algorithm to find an instance of the object. Much recent work [HRS90], [Ren92] <ref> [GV92] </ref> has focussed on improving the asymptotic complexity bounds for the theory of the reals, but unfortunately, most of it ignores the complexity in practice. The work of the author [Can88a], [Can91b], [Can91a], [Can93b], [Can93a] on the other hand, has been specifically directed at practical algorithms. <p> This is a safer representation since the ordering check can determine if the float descriptions are too close to order, and flag failure rather than producing an incorrect ordering. 4.5 Computing with Infinitesimals In the algorithms of [HRS90], [Ren92], <ref> [GV92] </ref> and [Can91a], various singularities are dealt with by perturbing the input polynomials with infinitesimals. This moves the problem away from the singularity, and when done carefully preserves the important properties (like connectivity or non-emptiness) of the input. <p> The time complexity of the inequality solver is k n+1 d (O (n)) c 2 arithmetic steps. This is an improvement over the previously published algorithms for the existential theory [Ren92], [HRS90] and <ref> [GV92] </ref>, and is within a factor of k of optimal. More importantly, the algorithm is simple, and there are no large constants hidden in the exponents. The d O (n) bound can be made more precise. <p> This assumes that the input is non-singular or has only low-order singularities. Higher order singularities may require many derivatives to be taken, pushing the complexity up as a polynomial in the number of derivatives. This is a dramatic improvement over other published algorithms [Ren92], [HRS90] and <ref> [GV92] </ref>, all of which give only a "big-O" estimate of the exponents of both k and d, that is, their bounds are of the form (kd) O (n) .
Reference: [Hof90] <author> C.M. Hoffmann. </author> <title> Algebraic and numeric techniques for offsets and blends. </title> <editor> In W. Dahmen, M. Gasca, and C. Micchelli, editors, </editor> <booktitle> Computations of Curves and Surfaces, </booktitle> <pages> pages 499-528. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1990. </year>
Reference-contexts: This has been clear for specific systems for which a sparse resultant was already known. An example is the Dixon resultant [Dix08] for tensor product surface implicitization [MC92a]. The solution using resultants can be computed in 1/100 the time of a Grobner solution <ref> [Hof90] </ref>. The value of the special purpose resultants like Dixon's has been clear for some time. Certainly, one would like an analogue for polynomials with any given structure (the set of exponents appearing in the polynomials).
Reference: [HRS90] <author> J. Heintz, M.F. Roy, and P. Solerno. Complexite du principe de Tarski-Seidenberg. </author> <title> Bull. </title> <journal> Soc. Math. France, </journal> <volume> 118 </volume> <pages> 101-126, </pages> <year> 1990. </year>
Reference-contexts: The theory of the reals is very powerful because it allows declarative description of an object via constraints, and leaves it to the decision algorithm to find an instance of the object. Much recent work <ref> [HRS90] </ref>, [Ren92] [GV92] has focussed on improving the asymptotic complexity bounds for the theory of the reals, but unfortunately, most of it ignores the complexity in practice. The work of the author [Can88a], [Can91b], [Can91a], [Can93b], [Can93a] on the other hand, has been specifically directed at practical algorithms. <p> This is a safer representation since the ordering check can determine if the float descriptions are too close to order, and flag failure rather than producing an incorrect ordering. 4.5 Computing with Infinitesimals In the algorithms of <ref> [HRS90] </ref>, [Ren92], [GV92] and [Can91a], various singularities are dealt with by perturbing the input polynomials with infinitesimals. This moves the problem away from the singularity, and when done carefully preserves the important properties (like connectivity or non-emptiness) of the input. <p> The time complexity of the inequality solver is k n+1 d (O (n)) c 2 arithmetic steps. This is an improvement over the previously published algorithms for the existential theory [Ren92], <ref> [HRS90] </ref> and [GV92], and is within a factor of k of optimal. More importantly, the algorithm is simple, and there are no large constants hidden in the exponents. The d O (n) bound can be made more precise. <p> This assumes that the input is non-singular or has only low-order singularities. Higher order singularities may require many derivatives to be taken, pushing the complexity up as a polynomial in the number of derivatives. This is a dramatic improvement over other published algorithms [Ren92], <ref> [HRS90] </ref> and [GV92], all of which give only a "big-O" estimate of the exponents of both k and d, that is, their bounds are of the form (kd) O (n) .
Reference: [HS92] <author> Birkett Huber and Bernd Sturmfels. </author> <title> Homotopies preserving the newton polytopes. </title> <institution> Cor-nell University, </institution> <type> manuscript, </type> <year> 1992. </year>
Reference-contexts: Sparseness can also be exploited to speedup equation solving and elimination of variables. Algorithms to do this have appeared in the last year. An efficient homotopy algorithm for sparse systems was described in <ref> [HS92] </ref>. The first efficient algorithms for the sparse resultant were described by the author and a collaborator in [CE93], [EC93]. Development in symbolic computation on polynomials has a longer history. <p> Subsequent calculations will only need to track the Bernstein number of solutions. But this is a poor solution when one has to deal with polynomial systems that do not all have the same structure. Fortunately, the problem of finding start systems was recently solved in <ref> [HS92] </ref>. The solution is not in the form of a single start system g = 0, but a family of start systems f j F = 0, where F ranges over the mixed facets of a mixed subdivision. <p> We track these solutions from f j F (x) = 0 to f = 0, using a homotopy method. There is a very satisfying proof in <ref> [HS92] </ref> which shows that every root of f = 0 is the endpoint of a path begining at a root f j F = 0 for some mixed facet F . <p> This is exactly the total volume of all the faces F , which is exactly the mixed volume of Q 1 ; : : : ; Q n . In this way, <ref> [HS92] </ref> provides a constructive proof of Bernstein's theorem. 3.2.1 Computing Mixed Cells and Volumes The idea of a mixed subdivision of a Minkowski sum of polytopes is described in an appendix (section 7).
Reference: [Kal88] <author> Erich Kaltofen. </author> <title> Greatest common divisors of polynomials given by straight-line programs. </title> <journal> Journal of the ACM, </journal> <volume> 35(1) </volume> <pages> 231-264, </pages> <year> 1988. </year>
Reference-contexts: Rather than doing this repeatedly, we can obtain the lowest degree term by differentiating a straight-line program. 4.5.1 Straight-Line Program Arithmetic In our approach, we use arithmetic straight-line programs to represent the intermediate values in a calculation, as advocated by Kaltofen et al. in <ref> [Kal88, Kal89, FIKY88] </ref>. An SLP may be represented 23 as a directed acyclic graph. Each node of the graph holds an operation type, such as "+" and a value.
Reference: [Kal89] <author> Erich Kaltofen. </author> <title> Factorization of polynomials given by straight-line programs. </title> <editor> In S. Micali, editor, </editor> <booktitle> Randomness and Computation, volume 5 of Advances in Computing Research, </booktitle> <pages> pages 375-412. </pages> <publisher> JAI Press, </publisher> <address> Greenwhich, Connecticut, </address> <year> 1989. </year>
Reference-contexts: Rather than doing this repeatedly, we can obtain the lowest degree term by differentiating a straight-line program. 4.5.1 Straight-Line Program Arithmetic In our approach, we use arithmetic straight-line programs to represent the intermediate values in a calculation, as advocated by Kaltofen et al. in <ref> [Kal88, Kal89, FIKY88] </ref>. An SLP may be represented 23 as a directed acyclic graph. Each node of the graph holds an operation type, such as "+" and a value.
Reference: [Kan92] <author> J-M. Kantor. </author> <title> Sur le polynome associe a un polytope a sommets entiers dans r n . C. </title> <journal> R. Acad. Sci. Paris, </journal> <volume> 314 </volume> <pages> 669-672, </pages> <year> 1992. </year>
Reference-contexts: Hence deg R = (n + 1)! Vol (Q 1 ) : The Minkowski Sum has volume Vol (Q) = (n + 1) n Vol (Q 1 ) and the number of lattice points in it is asymptotically the same <ref> [Kan92] </ref>. Then jEj = O (n+1)! .
Reference: [Kho78] <author> A.G. Khovanskii. </author> <title> Newton polyhedra and the genus of complete intersections. </title> <journal> (Translated from) Funktsional'nyi Analiz i Ego Prilozheniya, </journal> <volume> 12(1) </volume> <pages> 51-61, </pages> <month> Jan-Mar </month> <year> 1978. </year> <month> 29 </month>
Reference-contexts: The Newton polytopes capture the combinatorial properties of the system in a remarkable way. We have the following bound on the number of roots of a system of m = n polynomials in n variables, see [Ber75], [Kus76], <ref> [Kho78] </ref>. Theorem 2.4 (Bernstein's Theorem) Let f 1 ; : : : ; f n 2 C [x 1 ; x 1 ; : : : ; x n ; x 1 n ].
Reference: [Kho91] <author> A. G. Khovanskii. </author> <title> Fewnomials. </title> <publisher> AMS Press, </publisher> <address> Providence, Rhode Island, </address> <year> 1991. </year>
Reference-contexts: But if one places some reasonable constraints on the domain of the state variables, some remarkable properties emerge. This line of work began with the remarkable book by Khovanski <ref> [Kho91] </ref>. He showed, among other things, that Bezout-like bounds apply to the number of intersections of trajectories ("p-curves") of Pfaffian systems. Recently there has been progress on extension of the theory of the reals with exponential functions [Ric92], which are the simplest examples of p-curves.
Reference: [Kus76] <author> A.G. Kushnirenko. </author> <title> Newton polytopes and the Bezout theorem. </title> <journal> (Translated from) Funk-tsional'nyi Analiz i Ego Prilozheniya, </journal> <volume> 10(3), </volume> <month> Jul-Sep </month> <year> 1976. </year>
Reference-contexts: The Newton polytopes capture the combinatorial properties of the system in a remarkable way. We have the following bound on the number of roots of a system of m = n polynomials in n variables, see [Ber75], <ref> [Kus76] </ref>, [Kho78]. Theorem 2.4 (Bernstein's Theorem) Let f 1 ; : : : ; f n 2 C [x 1 ; x 1 ; : : : ; x n ; x 1 n ].
Reference: [LL88] <author> H.Y. Lee and C.G. Liang. </author> <title> A new vector theory for the analysis of spatial mechanisms. </title> <journal> Mechanisms and Machine Theory, </journal> <volume> 23(3) </volume> <pages> 209-217, </pages> <year> 1988. </year>
Reference-contexts: This would be a very difficult problem to solve, if there really were this many solutions. But it has been shown that there are only 16, and <ref> [LL88] </ref> and [RR89] gave constructive proofs. A real-time solver based on [RR89] is described in [MC92b]. A large gap between the Bezout bound and the actual number of solutions is not unusual for geometric problems, although it is not always as dramatic as for inverse kinematics.
Reference: [Mac02] <author> F.S. </author> <title> Macaulay. On some formula in elimination. </title> <booktitle> Proceedings of London Mathematical Society, </booktitle> <pages> pages 3-27, </pages> <month> May </month> <year> 1902. </year>
Reference-contexts: In contrast with sparse methods, which have appeared in the last year, most equation-solving approaches do not exploit the paucity of solutions, and instead have a complexity that depends on the Bezout bound. This has been true both of homotopy methods [TM85] and general homogenous resultants <ref> [Mac02] </ref>. Some progress has been made in homotopy methods in the last few years, [MS87] and [VC92]. These methods take advantage of some but not all forms of sparseness.
Reference: [MC91a] <author> D. Manocha and J. Canny. </author> <title> Efficient techniques for multipolynomial resultant algorithms. </title> <booktitle> In ISSAC-91, 1991. </booktitle> <address> Bonn, Germany. </address>
Reference-contexts: We believe it will find very wide application in the future, and along with homotopy methods will become the methods of choice for polynomial equation solving. It is described more fully in <ref> [MC91a] </ref> and [MC93], and applied to a robotics problem in [MC92b] and to geometric modeling in [MC91b]. In the last section, we summarized the theory of sparse systems and defined the resultant of a system of n + 1 equations in n unknowns.
Reference: [MC91b] <author> D. Manocha and J.F. Canny. </author> <title> A new approach for surface intersection. </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(4) </volume> <pages> 491-516, </pages> <year> 1991. </year> <note> Special issue on Solid Modeling. </note>
Reference-contexts: We believe it will find very wide application in the future, and along with homotopy methods will become the methods of choice for polynomial equation solving. It is described more fully in [MC91a] and [MC93], and applied to a robotics problem in [MC92b] and to geometric modeling in <ref> [MC91b] </ref>. In the last section, we summarized the theory of sparse systems and defined the resultant of a system of n + 1 equations in n unknowns. Before this general formula was known, there were many 11 resultant formulae for specific systems.
Reference: [MC92a] <author> D. Manocha and J.F. Canny. </author> <title> The implicit representation of rational parametric surfaces. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 13 </volume> <pages> 485-510, </pages> <year> 1992. </year>
Reference-contexts: When their complexity is measured as a function of the number of solutions, their performance is poor. This has been clear for specific systems for which a sparse resultant was already known. An example is the Dixon resultant [Dix08] for tensor product surface implicitization <ref> [MC92a] </ref>. The solution using resultants can be computed in 1/100 the time of a Grobner solution [Hof90]. The value of the special purpose resultants like Dixon's has been clear for some time. <p> See section 3.1. To use a resultant for variable elimination, we repeatedly evaluate the resultant for specializations of the other variables (those not to be eliminated), and use Chinese remaindering and sparse interpolation to reconstruct the answer. This method is applied to surface implicitization in <ref> [MC92a] </ref>. 2.1 The Sparse resultant matrix For the sparse resultant, we assume we have m = n + 1 polynomials in n variables. We wish to define a square matrix M whose determinant is divisible by the sparse resultant of f 1 ; : : : ; f n+1 .
Reference: [MC92b] <author> D. Manocha and J.F. Canny. </author> <title> Real time inverse kinematics of general 6R manipulators. </title> <booktitle> In IEEE Conference on Robotics and Automation, </booktitle> <pages> pages 383-389, </pages> <year> 1992. </year>
Reference-contexts: Typical examples of sparse systems are those that describe the inverse kinematics for a 6R robot <ref> [MC92b] </ref>, forward kinematics for the Stewart platform [Mer92], camera motion from point matches [FM90], and geometric constraints describing two- or three-dimensional objects [Owe91]. As the dimension of the problem increases, the difference between the sparse and non-sparse bounds 2 increases dramatically. <p> This would be a very difficult problem to solve, if there really were this many solutions. But it has been shown that there are only 16, and [LL88] and [RR89] gave constructive proofs. A real-time solver based on [RR89] is described in <ref> [MC92b] </ref>. A large gap between the Bezout bound and the actual number of solutions is not unusual for geometric problems, although it is not always as dramatic as for inverse kinematics. <p> We believe it will find very wide application in the future, and along with homotopy methods will become the methods of choice for polynomial equation solving. It is described more fully in [MC91a] and [MC93], and applied to a robotics problem in <ref> [MC92b] </ref> and to geometric modeling in [MC91b]. In the last section, we summarized the theory of sparse systems and defined the resultant of a system of n + 1 equations in n unknowns. Before this general formula was known, there were many 11 resultant formulae for specific systems.
Reference: [MC93] <author> D. Manocha and J. Canny. </author> <title> Multipolynomial resultant algorithms. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 15(2) </volume> <pages> 99-122, </pages> <year> 1993. </year>
Reference-contexts: Once a resultant matrix is defined, it can be used for numerical equation solving or for symbolic variable elimination. For the first use, we construct from the resultant matrix another matrix whose eigenvectors define the solutions of the system <ref> [MC93] </ref>. This method is based on the use of generalized companion matrices, and provides a particularly simple way to deal with non-linear systems. The resultant matrix is the same for all polynomial systems with a given set of exponents, and can be computed o*ine. <p> We believe it will find very wide application in the future, and along with homotopy methods will become the methods of choice for polynomial equation solving. It is described more fully in [MC91a] and <ref> [MC93] </ref>, and applied to a robotics problem in [MC92b] and to geometric modeling in [MC91b]. In the last section, we summarized the theory of sparse systems and defined the resultant of a system of n + 1 equations in n unknowns. <p> The only problem is that p may not be known exactly, and using an a priori bound on p often leads to unnecessarily high precision. To get around this problem, in <ref> [MC93] </ref> we used a probabilistic scheme that does chinese remainder lifting incrementally, and stops when it has sufficient precision. At this point the lifted integers stop changing with from one iteration to the next.
Reference: [Mer92] <author> J-P. Merlet. </author> <title> Direct kinematics and assembly modes of parallel manipulators. </title> <journal> International Journal of Robotics Research, </journal> <volume> 11(2) </volume> <pages> 150-162, </pages> <year> 1992. </year>
Reference-contexts: Typical examples of sparse systems are those that describe the inverse kinematics for a 6R robot [MC92b], forward kinematics for the Stewart platform <ref> [Mer92] </ref>, camera motion from point matches [FM90], and geometric constraints describing two- or three-dimensional objects [Owe91]. As the dimension of the problem increases, the difference between the sparse and non-sparse bounds 2 increases dramatically.
Reference: [MS87] <author> A.P. Morgan and A.J. Sommese. </author> <title> A homotopy for solving general polynomial systems that respects m-homogeneous structures. </title> <journal> Applied Mathematics and Computations, </journal> <volume> 24 </volume> <pages> 101-113, </pages> <year> 1987. </year>
Reference-contexts: This has been true both of homotopy methods [TM85] and general homogenous resultants [Mac02]. Some progress has been made in homotopy methods in the last few years, <ref> [MS87] </ref> and [VC92]. These methods take advantage of some but not all forms of sparseness. Grobner basis algorithms have a complexity that depends on the effective degree, and so they work well on systems with few roots.
Reference: [Owe91] <author> J. C. Owen. </author> <title> Algebraic solution for geometry from dimensional constraints. </title> <editor> In J. Rossignac and J. Turner, editors, </editor> <booktitle> Symp. on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 397-407. </pages> <publisher> ACM Press, </publisher> <year> 1991. </year>
Reference-contexts: Typical examples of sparse systems are those that describe the inverse kinematics for a 6R robot [MC92b], forward kinematics for the Stewart platform [Mer92], camera motion from point matches [FM90], and geometric constraints describing two- or three-dimensional objects <ref> [Owe91] </ref>. As the dimension of the problem increases, the difference between the sparse and non-sparse bounds 2 increases dramatically.
Reference: [Pri91] <author> Doug Priest. </author> <title> Algorithms for arbitrary precision floating point arithmetic. </title> <booktitle> In Proc. 10th Symp. on Computer Arithmetic, </booktitle> <year> 1991. </year> <title> edited by K. </title> <editor> Kornerup and D. </editor> <publisher> Matula. </publisher>
Reference-contexts: Then the precision is automatically increased until the result of the test is known for certain. An arbitrary precision floating point system is described in <ref> [Pri91] </ref>. This approach is as good as a symbolic approach and guarantees correct results. The problem is that if the two quantities to be tested really are equal, the precision must be extended all the way to the equivalent of exact integer calculation.
Reference: [PS91] <author> P. Pedersen and B. Sturmfels. </author> <title> Product formulas for sparse resultants. </title> <type> Manuscript, </type> <year> 1991. </year>
Reference-contexts: These general resultants were defined first by Gel'fond et al., as a special case of an A-discriminant [GKZ90]. We will term them sparse resultants. A Poisson formula for the sparse resultant was given in <ref> [PS91] </ref>. The Poisson formula expresses the resultant in terms of symmetric functions, and makes it easy to find a sparse resultant's degree. The most convenient description of a resultant is using a Sylvester formula.
Reference: [Ren89] <author> J. Renegar. </author> <title> On the computational complexity and geometry of the first-order theory of the reals, parts I, II and III. </title> <type> Technical Report 852,855,856, </type> <institution> Cornell University, Operations Research Dept., </institution> <year> 1989. </year>
Reference-contexts: The system f = 0 will usually be derived from equation 8 of the last section. 19 There are several ways to construct (p; r) from f . One method uses polynomial GCDs and was described in [Can88b]. A more efficient method based on differentiation was given by Renegar <ref> [Ren89] </ref>, and that is the one we use in the toolkit. Compared to the cost of computing the polynomial p (s), Renegar's method computes all the r i (s)'s in only n times as many operations.
Reference: [Ren92] <author> J. Renegar. </author> <title> On the computational complexity of the first-order theory of the reals, parts I, II, III. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 13(3) </volume> <pages> 255-352, </pages> <year> 1992. </year> <month> 30 </month>
Reference-contexts: The theory of the reals is very powerful because it allows declarative description of an object via constraints, and leaves it to the decision algorithm to find an instance of the object. Much recent work [HRS90], <ref> [Ren92] </ref> [GV92] has focussed on improving the asymptotic complexity bounds for the theory of the reals, but unfortunately, most of it ignores the complexity in practice. The work of the author [Can88a], [Can91b], [Can91a], [Can93b], [Can93a] on the other hand, has been specifically directed at practical algorithms. <p> This is a safer representation since the ordering check can determine if the float descriptions are too close to order, and flag failure rather than producing an incorrect ordering. 4.5 Computing with Infinitesimals In the algorithms of [HRS90], <ref> [Ren92] </ref>, [GV92] and [Can91a], various singularities are dealt with by perturbing the input polynomials with infinitesimals. This moves the problem away from the singularity, and when done carefully preserves the important properties (like connectivity or non-emptiness) of the input. <p> The time complexity of the inequality solver is k n+1 d (O (n)) c 2 arithmetic steps. This is an improvement over the previously published algorithms for the existential theory <ref> [Ren92] </ref>, [HRS90] and [GV92], and is within a factor of k of optimal. More importantly, the algorithm is simple, and there are no large constants hidden in the exponents. The d O (n) bound can be made more precise. <p> This assumes that the input is non-singular or has only low-order singularities. Higher order singularities may require many derivatives to be taken, pushing the complexity up as a polynomial in the number of derivatives. This is a dramatic improvement over other published algorithms <ref> [Ren92] </ref>, [HRS90] and [GV92], all of which give only a "big-O" estimate of the exponents of both k and d, that is, their bounds are of the form (kd) O (n) .
Reference: [Ric92] <author> Dan Richardson. </author> <title> Computing the topology of a bounded non-algebraic curve in the plane. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 14(6), </volume> <year> 1992. </year>
Reference-contexts: This line of work began with the remarkable book by Khovanski [Kho91]. He showed, among other things, that Bezout-like bounds apply to the number of intersections of trajectories ("p-curves") of Pfaffian systems. Recently there has been progress on extension of the theory of the reals with exponential functions <ref> [Ric92] </ref>, which are the simplest examples of p-curves. We plan to work on further extensions of the theory of the reals to include Pfaffian constraints, and eventually incorporate this capability into the toolkit.
Reference: [RR89] <author> M. Raghavan and B. Roth. </author> <title> Kinematic analysis of the 6r manipulator of general geometry. </title> <booktitle> In International Symposium on Robotics Research, </booktitle> <pages> pages 314-320, </pages> <address> Tokyo, </address> <year> 1989. </year>
Reference-contexts: This would be a very difficult problem to solve, if there really were this many solutions. But it has been shown that there are only 16, and [LL88] and <ref> [RR89] </ref> gave constructive proofs. A real-time solver based on [RR89] is described in [MC92b]. A large gap between the Bezout bound and the actual number of solutions is not unusual for geometric problems, although it is not always as dramatic as for inverse kinematics. <p> This would be a very difficult problem to solve, if there really were this many solutions. But it has been shown that there are only 16, and [LL88] and <ref> [RR89] </ref> gave constructive proofs. A real-time solver based on [RR89] is described in [MC92b]. A large gap between the Bezout bound and the actual number of solutions is not unusual for geometric problems, although it is not always as dramatic as for inverse kinematics. <p> Much less than Bezout at 46,000 but still 4 excessive. But the Bernstein bound drops rapidly if we rewrite the equations in a form where there are fewer dependencies. For example, using some of the equations of <ref> [RR89] </ref> gives a Bernstein bound of 384. When the coefficient relations come from common subexpressions, there is a systematic way to remove them by introducing new variables. An example of this is given later in section 5.1. <p> The simplest way of writing down these equations gives rise to 6 equations of degree 6. The Bernstein bound is about 2,000, while the Bezout bound is 46,000. The number of affine solutions is only 16 <ref> [RR89] </ref>. The kinematic equations of [RR89] for the same problem give a Bernstein bound of 384. The large fluctuation in the bounds is caused by the heavy dependencies between the coefficients of the equations. <p> The simplest way of writing down these equations gives rise to 6 equations of degree 6. The Bernstein bound is about 2,000, while the Bezout bound is 46,000. The number of affine solutions is only 16 <ref> [RR89] </ref>. The kinematic equations of [RR89] for the same problem give a Bernstein bound of 384. The large fluctuation in the bounds is caused by the heavy dependencies between the coefficients of the equations.
Reference: [Stu92] <author> B. Sturmfels. </author> <title> Sparse systems of polynomial equations. </title> <booktitle> Lecture Notes, NSF Regional Geometry Institute, </booktitle> <address> Amherst College, Amherst, Mass., </address> <month> July </month> <year> 1992. </year>
Reference: [SV89] <author> M.W. Spong and M. Vidyasagar. </author> <title> Robot Dynamics and Control. </title> <publisher> John Wiley and Sons, </publisher> <year> 1989. </year>
Reference-contexts: For inverse kinematics, it is easy to see why. The long series of matrix multiplications leads to many common subexpressions. Each T i matrix is determined by 4 parameters (called Denavit-Hartenberg parameters <ref> [SV89] </ref>), and with 6 joints, the whole robot is described by 24 parameters. The gripper has 6 degrees of freedom, so the T e matrix depends on 6 parameters. Each inverse kinematics system is determined by 24 + 6 = 30 parameters.
Reference: [SZ93] <author> B. Sturmfels and A. Zelevinsky. </author> <title> Multigraded resultants of sylvester type. </title> <journal> Journal of Algebra, </journal> <note> 1993. to appear. </note>
Reference-contexts: The most convenient description of a resultant is using a Sylvester formula. The Sylvester formula expresses the resultant as the determinant of a matrix whose elements are the polynomial coefficients or zero. Sylvester formulae were given for a class of multi-homogeneous systems in <ref> [SZ93] </ref>. In general, sparse resultants cannot be computed via a Sylvester formula, but they all have a determinantal formula, which expresses them as a factor of a matrix determinant. The determinantal formula is important for several reasons. Firstly, it is efficient. <p> So M 0 has to be larger than optimal. But we claim the construction of M 0 leads to close-to-optimal size. We cannot make this statement quantitative yet, but have found some strong supporting evidence. Namely, in all the cases where optimal-size matrices are known to exist (enumerated in <ref> [SZ93] </ref>), the matrix M 0 has optimal size. This is the algorithm we plan to use in the toolkit for the elimination task. Even if we cannot prove better bounds on its size, we will gather plenty of empirical data on its effectiveness. 3 Toolkit Overview: Numerical Kit systems.
Reference: [TM85] <author> L.W. Tsai and A.P. Morgan. </author> <title> Solving the kinematics of the most general six and five-degree-of-freedom manipulators by continuation methods. </title> <journal> Transactions of the ASME, Journal of Mechanisms, Transmissions and Automation in Design, </journal> <volume> 107 </volume> <pages> 189-200, </pages> <year> 1985. </year>
Reference-contexts: In contrast with sparse methods, which have appeared in the last year, most equation-solving approaches do not exploit the paucity of solutions, and instead have a complexity that depends on the Bezout bound. This has been true both of homotopy methods <ref> [TM85] </ref> and general homogenous resultants [Mac02]. Some progress has been made in homotopy methods in the last few years, [MS87] and [VC92]. These methods take advantage of some but not all forms of sparseness.

References-found: 48

