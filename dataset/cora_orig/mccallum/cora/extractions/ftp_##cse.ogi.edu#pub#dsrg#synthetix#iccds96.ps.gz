URL: ftp://cse.ogi.edu/pub/dsrg/synthetix/iccds96.ps.gz
Refering-URL: http://www.cse.ogi.edu/~crispin/
Root-URL: http://www.cse.ogi.edu
Email: (synthetix-request@cse.ogi.edu)  
Title: Fast Concurrent Dynamic Linking for an Adaptive Operating System  
Author: Crispin Cowan, Tito Autrey, Charles Krasic, Calton Pu, and Jonathan Walpole 
Affiliation: Department of Computer Science and Engineering Oregon Graduate Institute of Science Technology  
Abstract: The need for customizable and application-specific operating systems has been recognized for many years. A customizable operating system is one that can adapt to some particular circumstance to gain some functional or performance benefits. Microkernels have attempted to address this problem, but suffer performance degradation due to the cost of inter-process protection barriers. Commercial operating systems that can efficiently adapt themselves to changing circumstances have failed to appear, in part due to the difficulty of providing an interface that is efficient to invoke, provides a protection barrier, and can be dynamically reconfigured. Providing such a safe, efficient, and dynamic interface in a concurrent operating system requires an effective con-currency control mechanism to prevent conflicts between system components proposing to execute specialized components, and those components responsible for dynamically replacing specialized components. This paper outlines our basic approach to specialization of operating systems, and details our dynamic replacement mechanism and its con-currency control features. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Thomas B. Alexander, Kenneth G. Robertson, Dean T. Lindsey, Donald L. Rogers, John R. Ober-meyer, John R. Keller, Keith Y. Oka, and Marlin M. Jones II. </author> <title> Corporate Business Servers: An Alternative to Mainframes for Business Computing. </title> <journal> Hewlett-Packard Journal, </journal> <volume> 45(3) </volume> <pages> 8-30, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: To provide some basis for comparison, we compare these costs to the cost of a simple indirect function call, and to the cost of a semaphore lock on the same architecture: a Hewlett-Packard 9000 series 800 G70 (9000/887) dual-processor server <ref> [1] </ref>. All of the performance figures given are for the uncon-tended case, i.e. no concurrent attempt to execute or replug the replugging point.
Reference: [2] <author> Arindam Banerji and David L. Cohn. </author> <title> An Infrastructure for Application-Specific Customization. </title> <booktitle> In Proceedings of the ACM European SIGOPS Workshop, </booktitle> <month> September </month> <year> 1994. </year>
Reference-contexts: Choices [7] provides generalized components, called frameworks, which can be replaced with specialized versions using inheritance and dynamic linking. The Spring kernel uses an extensible RPC framework [15] to redirect object invocations to appropriate handlers based on the type of object. The Substrate Object Model <ref> [2] </ref> supports extensibility in the AIX kernel by providing additional interfaces for passing usage hints and customizing in-kernel implementations. Similarly, the Apertos operating system [31] supports dynamic reconfiguration by modifying an object's behavior through operations on its meta-interface.
Reference: [3] <author> Brian N. Bershad, David D. Redell, and John R. El-lis. </author> <title> Fast Mutual Exclusion for Uniprocessors. </title> <booktitle> In Fifth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS-V), </booktitle> <pages> pages 223-233, </pages> <address> Boston, MA, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: If there are not, then it is a quasi-invariant that the file is not shared, and the acquisition of the concurrency locks can be omitted from the specialized read mechanism. This is an important savings, because concurrency locks can be quite slow on shared memory multiprocessors <ref> [3] </ref>. Non-sharing of files is a quasi-invariant, because at any time another process may open the file and access it. To protect against this possibility, guards are placed in all locations in the kernel where files may be opened (open, creat, etc.).
Reference: [4] <author> Brian N. Bershad, Stefan Savage, Przemys law Pardyak, Emin Gun Sirer, Marc Fiuczynski, David Becker, Susan Eggers, and Craig Chambers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain, Colorado, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: In view of the fact that performance really matters, operating system researchers have explored several alternatives to the micro-kernel approach. Projects such as SPIN <ref> [4] </ref> and the Exokernel [13] provide facilities to allow applications to incorporate their own variants of OS functionality while moving the traditional microkernel protection barriers up or down so as to minimize the performance penalties of dynamic configuration. Object-oriented operating systems use objects for configurability and to provide protection. <p> Similarly, Flex [8] allows dynamic loading of operating system modules into the Mach kernel, and uses a migrating threads model to reduce IPC overhead. One problem with allowing applications to load modules into the kernel is loss of protection. The SPIN kernel <ref> [4] </ref> allows applications to load executable modules, called spindles, dynamically into the kernel. These spindles are written in a type-safe programming language to ensure that they do not adversely affect kernel operations. Object-oriented operating systems allow customization through the use of inheritance, invocation redirection, and meta-interfaces.
Reference: [5] <author> D.L. Black, D.B. Golub, D.P. Julin, R.F. Rashid, R.P. Draves, R.W. Dean, A. Forin, J. Barrera, H. Tokuda, G. Malan, and D. Bohman. </author> <title> Microkernel Operating System Architecture and Mach. </title> <booktitle> In Proceedings of the Workshop on Micro-Kernels and Other Kernel Architectures, </booktitle> <pages> pages 11-30, </pages> <address> Seattle, WA, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: Thus it is important to provide operating system facilities that are appropriate to the application. Micro-kernels have addressed this problem by providing a minimal kernel, and encapsulating the rest of OS functionality in replaceable server processes <ref> [5, 6, 10, 11, 17, 24, 29] </ref>. Such systems can be customized by replacing or providing additional servers that implement the desired policies while making use of existing mechanisms provided by the micro-kernel. Using this approach, customization is supported at a coarse granularity, through the replacement of complete servers.
Reference: [6] <author> F. J. Burkowski, C. L. A. Clarke, Crispin Cowan, and G. J. Vreugdenhil. </author> <title> Architectural Support for Lightweight Tasking in the Sylvan Multiprocessor System. </title> <booktitle> In Symposium on Experience with Distributed and Multiprocessor Systems (SEDMS II), </booktitle> <pages> pages 165-184, </pages> <address> Atlanta, Georgia, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: Thus it is important to provide operating system facilities that are appropriate to the application. Micro-kernels have addressed this problem by providing a minimal kernel, and encapsulating the rest of OS functionality in replaceable server processes <ref> [5, 6, 10, 11, 17, 24, 29] </ref>. Such systems can be customized by replacing or providing additional servers that implement the desired policies while making use of existing mechanisms provided by the micro-kernel. Using this approach, customization is supported at a coarse granularity, through the replacement of complete servers.
Reference: [7] <author> Roy H. Campbell, Nayeem Islam, and Peter Madany. </author> <title> Choices: Frameworks and Refinement. </title> <journal> Computing Systems, </journal> <volume> 5(3) </volume> <pages> 217-257, </pages> <year> 1992. </year>
Reference-contexts: Object-oriented operating systems allow customization through the use of inheritance, invocation redirection, and meta-interfaces. Mukherjee and Schwan et al [14, 22, 23] control concurrent execution and modification of an object using attributes and object ownership. Choices <ref> [7] </ref> provides generalized components, called frameworks, which can be replaced with specialized versions using inheritance and dynamic linking. The Spring kernel uses an extensible RPC framework [15] to redirect object invocations to appropriate handlers based on the type of object.
Reference: [8] <author> John B. Carter, Bryan Ford, Mike Hibler, Ravindra Kuramkote, Jeffrey Law, Lay Lepreau, Douglas B. Orr, Leigh Stoller, and Mark Swanson. </author> <title> FLEX: A Tool for Building Efficient and Flexible Systems. </title> <booktitle> In Proceedings of the Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 198-202, </pages> <address> Napa, CA, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: OMOS automatically decides which version of a module will best meet the specified requirements, functioning somewhat like an interface definition language. OMOS does deal with concurrency issues, but functions at a coarser granularity than our system because it was designed to support the Flex microkernel <ref> [8] </ref>. Chorus [29] allows modules, known as supervisor actors, to be loaded into the kernel address space. A special ized IPC mechanism is used for communication between actors within the kernel address space. Similarly, Flex [8] allows dynamic loading of operating system modules into the Mach kernel, and uses a migrating <p> a coarser granularity than our system because it was designed to support the Flex microkernel <ref> [8] </ref>. Chorus [29] allows modules, known as supervisor actors, to be loaded into the kernel address space. A special ized IPC mechanism is used for communication between actors within the kernel address space. Similarly, Flex [8] allows dynamic loading of operating system modules into the Mach kernel, and uses a migrating threads model to reduce IPC overhead. One problem with allowing applications to load modules into the kernel is loss of protection.
Reference: [9] <author> Shanwei Cen, Calton Pu, Richard Staehli, Crispin Cowan, and Jonathan Walpole. </author> <title> A Distributed Real-Time MPEG Video Audio Player. </title> <booktitle> In Proceedings of the 1995 International Workshop on Network and Operating System Support for Digital Audio and Video (NOSSDAV'95), </booktitle> <pages> pages 151-162, </pages> <address> New Hamp-shire, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: This experiment showed how the use of feedback to make multimedia presentations adaptive enables video to be played across an irregular network such as the Internet without benefit of resource reservations <ref> [9] </ref>. We use software feedback [20, 27], reminiscent of hardware feedback, to adapt multi-media presentations to the changing conditions of the Internet. Our video player has a distributed client-server architecture. <p> Such a facility is essential for operating systems that wish to adaptively reconfigure themselves at a fine granularity. Fine-grained adaptivity is required to use the techniques of optimistic and incremental specializa tion, described here and in <ref> [9, 26] </ref>. The concurrent dynamic linking mechanism here has been shown to improve performance over symmetric spinlocks if replaceable functions are executed at least 2.8 times more frequently than they are replaced.
Reference: [10] <author> David R. Cheriton. </author> <title> The V Distributed System. </title> <journal> Communications of the ACM, </journal> <volume> 31(3) </volume> <pages> 314-333, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: Thus it is important to provide operating system facilities that are appropriate to the application. Micro-kernels have addressed this problem by providing a minimal kernel, and encapsulating the rest of OS functionality in replaceable server processes <ref> [5, 6, 10, 11, 17, 24, 29] </ref>. Such systems can be customized by replacing or providing additional servers that implement the desired policies while making use of existing mechanisms provided by the micro-kernel. Using this approach, customization is supported at a coarse granularity, through the replacement of complete servers.
Reference: [11] <author> David R. Cheriton, M. A. Malcolm, L. S. Melen, and G. R. Sager. Thoth, </author> <title> A Portable Real-Time Operating System. </title> <journal> Communications of the ACM, </journal> <volume> 22(2) </volume> <pages> 105-115, </pages> <month> February </month> <year> 1979. </year>
Reference-contexts: Thus it is important to provide operating system facilities that are appropriate to the application. Micro-kernels have addressed this problem by providing a minimal kernel, and encapsulating the rest of OS functionality in replaceable server processes <ref> [5, 6, 10, 11, 17, 24, 29] </ref>. Such systems can be customized by replacing or providing additional servers that implement the desired policies while making use of existing mechanisms provided by the micro-kernel. Using this approach, customization is supported at a coarse granularity, through the replacement of complete servers.
Reference: [12] <author> E. W. Dijkstra. </author> <title> Cooperating Sequential Processes. </title> <editor> In F. Genuys, editor, </editor> <booktitle> Programming Languages. </booktitle> <publisher> Academic Press, </publisher> <address> London, UK, </address> <year> 1968. </year>
Reference: [13] <author> Dawson R. Engler, M. Frans Kaashoek, and James O'Toole Jr. Exokernel: </author> <title> An Operating System Architecture for Application-level Resource Management. </title> <booktitle> In Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain, Colorado, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: In view of the fact that performance really matters, operating system researchers have explored several alternatives to the micro-kernel approach. Projects such as SPIN [4] and the Exokernel <ref> [13] </ref> provide facilities to allow applications to incorporate their own variants of OS functionality while moving the traditional microkernel protection barriers up or down so as to minimize the performance penalties of dynamic configuration. Object-oriented operating systems use objects for configurability and to provide protection.
Reference: [14] <author> Ahmed Gheith, Bodhisattwa Mukherjee, Dilma Silva, and Karsten Schwan. KTK: </author> <title> Kernel Support for Configurable Objects and Invocations. </title> <booktitle> In International Workshop on Configurable Distributed Systems, </booktitle> <month> March </month> <year> 1994. </year> <note> Also available as GIT-CC-94/11, ftp://ftp.cc.gatech.edu/pub/coc/ tech reports/1994/GIT-CC-94-11.ps.Z. </note>
Reference-contexts: These spindles are written in a type-safe programming language to ensure that they do not adversely affect kernel operations. Object-oriented operating systems allow customization through the use of inheritance, invocation redirection, and meta-interfaces. Mukherjee and Schwan et al <ref> [14, 22, 23] </ref> control concurrent execution and modification of an object using attributes and object ownership. Choices [7] provides generalized components, called frameworks, which can be replaced with specialized versions using inheritance and dynamic linking.
Reference: [15] <author> Graham Hamilton, Michael L. Powell, and James G. Mitchell. Subcontract: </author> <title> A flexible base of distributed programming. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating System Principles (SOSP'93), </booktitle> <pages> pages 69-79, </pages> <address> Asheville, NC, </address> <month> Decem-ber </month> <year> 1993. </year>
Reference-contexts: Mukherjee and Schwan et al [14, 22, 23] control concurrent execution and modification of an object using attributes and object ownership. Choices [7] provides generalized components, called frameworks, which can be replaced with specialized versions using inheritance and dynamic linking. The Spring kernel uses an extensible RPC framework <ref> [15] </ref> to redirect object invocations to appropriate handlers based on the type of object. The Substrate Object Model [2] supports extensibility in the AIX kernel by providing additional interfaces for passing usage hints and customizing in-kernel implementations.
Reference: [16] <author> Maurice Herlihy. </author> <title> Wait-Free Synchronization. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 13(1) </volume> <pages> 124-149, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: information than simple concurrency locks: they indicate that while the executing process is not currently executing with respect to x, it will expect to be able to resume execution at some point. 4.2 THE REPLUGGING ALGORITHM It is possible to solve this concurrency problem using some form of wait-free synchronization <ref> [16] </ref>. However, wait-free synchronization is not always faster than simple locking, can be considerably more complex, and may require hardware support for variations of atomic test&set instructions.
Reference: [17] <author> Dan Hildebrand. </author> <title> An Architectural Overview of QNX. </title> <booktitle> In Proceedings of the USENIX Workshop on Micro-kernels and Other Kernel Architectures, </booktitle> <pages> pages 113-123, </pages> <address> Seattle, WA, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: Thus it is important to provide operating system facilities that are appropriate to the application. Micro-kernels have addressed this problem by providing a minimal kernel, and encapsulating the rest of OS functionality in replaceable server processes <ref> [5, 6, 10, 11, 17, 24, 29] </ref>. Such systems can be customized by replacing or providing additional servers that implement the desired policies while making use of existing mechanisms provided by the micro-kernel. Using this approach, customization is supported at a coarse granularity, through the replacement of complete servers.
Reference: [18] <author> W. Wilson Ho and Ronald A. Olsson. </author> <title> An Approach to Genuine Dynamic Linking. </title> <journal> Software | Practice and Experience, </journal> <volume> 21 </volume> <pages> 375-390, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: The dld tool <ref> [18] </ref> provides for basic dynamic linking, but is designed to be used by an application program. As such, it does not deal with concurrency issues, but does partially automate the garbage collection of un-used functions from the program's address space.
Reference: [19] <author> Henry Massalin and Calton Pu. </author> <title> Threads and In--put/Output in the Synthesis Kernel. </title> <booktitle> In Symposium on Operating Systems Principles, </booktitle> <year> 1989. </year>
Reference-contexts: Previous work [20, 28] had already shown that specialized mechanism could provide performance benefits of up to a factor of 56 <ref> [19] </ref>, but this work did not clearly distinguish between the benefits provided by specialized mechanisms and benefits provided by other means, such as a kernel hand-coded in assembler. In this experiment we produced a specialized implementation of the read system call mechanism.
Reference: [20] <author> Henry Massalin and Calton Pu. </author> <title> Fine-Grain Adaptive Scheduling Using Feedback. </title> <journal> Computing Systems, </journal> <volume> 3(1) </volume> <pages> 139-173, </pages> <month> Winter </month> <year> 1990. </year>
Reference-contexts: Subsection 3.2 describes fine-grained policy specialization through software feedback in a distributed multimedia player. 3.1 OPTIMISTIC AND INCREMENTAL SPECIALIZATION IN HP-UX The experiment in [26] sought to evaluate the effectiveness of mechanism specialization in a commercial operating system. Previous work <ref> [20, 28] </ref> had already shown that specialized mechanism could provide performance benefits of up to a factor of 56 [19], but this work did not clearly distinguish between the benefits provided by specialized mechanisms and benefits provided by other means, such as a kernel hand-coded in assembler. <p> This experiment showed how the use of feedback to make multimedia presentations adaptive enables video to be played across an irregular network such as the Internet without benefit of resource reservations [9]. We use software feedback <ref> [20, 27] </ref>, reminiscent of hardware feedback, to adapt multi-media presentations to the changing conditions of the Internet. Our video player has a distributed client-server architecture.
Reference: [21] <author> David Mosberger, Larry L. Peterson, and Sean O'Malley. </author> <title> Protocol Latency: MIPS and Reality. </title> <type> Report TR 95-02, </type> <institution> Dept of Computer Science, University of Arizona, Tuscon, Arizona, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: Third, the explicit use of invariants and guards in Syn-thetix also supports the composability of specializations: guards determine whether two specializations are compos-able. Other extensible operating systems do not provide support to automatically determine whether separate extensions are composable. Like Synthetix, Scout <ref> [21] </ref> has focused on the specialization of existing systems code. Scout has concentrated on networking code and has focused on specializations that minimize code and data caching effects. In contrast, we have focused on parametric specialization to reduce the length of various fast paths in the kernel.
Reference: [22] <author> Bodhisattwa Mukherjee and Karsten Schwan. </author> <title> Experiments with Configurable Locks for Multiprocessors. </title> <type> Report GIT-CC-93/05, </type> <institution> College of Computing, Georgia Institute of Technlolgy, </institution> <address> Atlanta, GA, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: The problem can be serious when the optimizations embedded in the operating system are particularly bad for the new application. For instance, the usual paging policy provided by most operating systems is simply not appropriate for database applications [30]. Mukherjee and Schwan <ref> [22] </ref> showed that both spinlocks and blocking locks can provide superior performance under different circumstances. Thus it is important to provide operating system facilities that are appropriate to the application. <p> These spindles are written in a type-safe programming language to ensure that they do not adversely affect kernel operations. Object-oriented operating systems allow customization through the use of inheritance, invocation redirection, and meta-interfaces. Mukherjee and Schwan et al <ref> [14, 22, 23] </ref> control concurrent execution and modification of an object using attributes and object ownership. Choices [7] provides generalized components, called frameworks, which can be replaced with specialized versions using inheritance and dynamic linking.
Reference: [23] <author> Bodhisattwa Mukherjee and Karsten Schwan. </author> <title> Improving Performance by use of Adaptive Object: Experimentation with a Configurable Multiprocessor Thread Package. </title> <booktitle> In Second IEEE International Symposium on High-Performance Distributed Computing (HPDC-2), </booktitle> <address> Spokane, WA, </address> <month> July </month> <year> 1993. </year> <note> Also available as GIT-CC-93/17, ftp://ftp.cc.gatech.edu/pub/coc/ tech reports/1993/GIT-CC-93-17.ps.Z. </note>
Reference-contexts: These spindles are written in a type-safe programming language to ensure that they do not adversely affect kernel operations. Object-oriented operating systems allow customization through the use of inheritance, invocation redirection, and meta-interfaces. Mukherjee and Schwan et al <ref> [14, 22, 23] </ref> control concurrent execution and modification of an object using attributes and object ownership. Choices [7] provides generalized components, called frameworks, which can be replaced with specialized versions using inheritance and dynamic linking.
Reference: [24] <author> S. J. Mullender, G. van Rossum, A. S. Tanenbaum, R. van Renesse, and H. van Staveren. </author> <title> Amoeba | A distributed Operating System for the 1990's. </title> <journal> IEEE Computer, </journal> <volume> 23(5), </volume> <month> May </month> <year> 1990. </year>
Reference-contexts: Thus it is important to provide operating system facilities that are appropriate to the application. Micro-kernels have addressed this problem by providing a minimal kernel, and encapsulating the rest of OS functionality in replaceable server processes <ref> [5, 6, 10, 11, 17, 24, 29] </ref>. Such systems can be customized by replacing or providing additional servers that implement the desired policies while making use of existing mechanisms provided by the micro-kernel. Using this approach, customization is supported at a coarse granularity, through the replacement of complete servers.
Reference: [25] <author> Doug Orr. </author> <title> OMOS an object server for program execution. </title> <booktitle> In Proc. International Workshop on Object-Oriented Operating Systems, </booktitle> <year> 1992. </year>
Reference-contexts: The dld tool [18] provides for basic dynamic linking, but is designed to be used by an application program. As such, it does not deal with concurrency issues, but does partially automate the garbage collection of un-used functions from the program's address space. The OMOS system <ref> [25] </ref> dynamically links modules in a system in an object-oriented manner. OMOS automatically decides which version of a module will best meet the specified requirements, functioning somewhat like an interface definition language.
Reference: [26] <author> Calton Pu, Tito Autrey, Andrew Black, Charles Con-sel, Crispin Cowan, Jon Inouye, Lakshmi Kethana, Jonathan Walpole, and Ke Zhang. </author> <title> Optimistic Incremental Specialization: Streamlining a Commercial Operating System. </title> <booktitle> In Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain, Colorado, </address> <month> De-cember </month> <year> 1995. </year>
Reference-contexts: This section reviews these experiments. Subsection 3.1 describes optimistic and incremental mechanism specialization in the HP-UX operating system. Subsection 3.2 describes fine-grained policy specialization through software feedback in a distributed multimedia player. 3.1 OPTIMISTIC AND INCREMENTAL SPECIALIZATION IN HP-UX The experiment in <ref> [26] </ref> sought to evaluate the effectiveness of mechanism specialization in a commercial operating system. <p> Such a facility is essential for operating systems that wish to adaptively reconfigure themselves at a fine granularity. Fine-grained adaptivity is required to use the techniques of optimistic and incremental specializa tion, described here and in <ref> [9, 26] </ref>. The concurrent dynamic linking mechanism here has been shown to improve performance over symmetric spinlocks if replaceable functions are executed at least 2.8 times more frequently than they are replaced.
Reference: [27] <author> Calton Pu and Robert M. Fuhrer. </author> <title> Feedback-Based Scheduling: a Toolbox Approach. </title> <booktitle> In Proceedings of Fourth Workshop on Workstation Operating Systems, </booktitle> <address> Napa Valley, CA, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: This experiment showed how the use of feedback to make multimedia presentations adaptive enables video to be played across an irregular network such as the Internet without benefit of resource reservations [9]. We use software feedback <ref> [20, 27] </ref>, reminiscent of hardware feedback, to adapt multi-media presentations to the changing conditions of the Internet. Our video player has a distributed client-server architecture.
Reference: [28] <author> Calton Pu, Henry Massalin, and John Ioannidis. </author> <title> The Synthesis Kernel. </title> <journal> Computing Systems, </journal> <volume> 1(1) </volume> <pages> 11-32, </pages> <month> Winter </month> <year> 1988. </year>
Reference-contexts: Subsection 3.2 describes fine-grained policy specialization through software feedback in a distributed multimedia player. 3.1 OPTIMISTIC AND INCREMENTAL SPECIALIZATION IN HP-UX The experiment in [26] sought to evaluate the effectiveness of mechanism specialization in a commercial operating system. Previous work <ref> [20, 28] </ref> had already shown that specialized mechanism could provide performance benefits of up to a factor of 56 [19], but this work did not clearly distinguish between the benefits provided by specialized mechanisms and benefits provided by other means, such as a kernel hand-coded in assembler.
Reference: [29] <author> M. Rozier, V. Abrossimov, F. Armand, I. Boule, M. Gien, M. Guillemont, F. Herrman, C. Kaiser, S. Langlois, P. Leonard, and W. Neuhauser. </author> <title> Overview of the Chorus Distributed Operating System. </title> <booktitle> In Proceedings of the Workshop on Micro-Kernels and Other Kernel Architectures, </booktitle> <pages> pages 39-69, </pages> <address> Seattle, WA, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: Thus it is important to provide operating system facilities that are appropriate to the application. Micro-kernels have addressed this problem by providing a minimal kernel, and encapsulating the rest of OS functionality in replaceable server processes <ref> [5, 6, 10, 11, 17, 24, 29] </ref>. Such systems can be customized by replacing or providing additional servers that implement the desired policies while making use of existing mechanisms provided by the micro-kernel. Using this approach, customization is supported at a coarse granularity, through the replacement of complete servers. <p> OMOS automatically decides which version of a module will best meet the specified requirements, functioning somewhat like an interface definition language. OMOS does deal with concurrency issues, but functions at a coarser granularity than our system because it was designed to support the Flex microkernel [8]. Chorus <ref> [29] </ref> allows modules, known as supervisor actors, to be loaded into the kernel address space. A special ized IPC mechanism is used for communication between actors within the kernel address space.
Reference: [30] <author> Michael Stonebraker. </author> <title> Operating system Support for Database Management. </title> <journal> Communications of ACM, </journal> <volume> 24(7), </volume> <year> 1981. </year>
Reference-contexts: The problem can be serious when the optimizations embedded in the operating system are particularly bad for the new application. For instance, the usual paging policy provided by most operating systems is simply not appropriate for database applications <ref> [30] </ref>. Mukherjee and Schwan [22] showed that both spinlocks and blocking locks can provide superior performance under different circumstances. Thus it is important to provide operating system facilities that are appropriate to the application.
Reference: [31] <author> Yasuhiko Yokote. </author> <title> The Apertos Reflective Operating System: The Concept and Its Implementation. </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications (OOPSLA'92), </booktitle> <address> Vancouver, BC, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: The Substrate Object Model [2] supports extensibility in the AIX kernel by providing additional interfaces for passing usage hints and customizing in-kernel implementations. Similarly, the Apertos operating system <ref> [31] </ref> supports dynamic reconfiguration by modifying an object's behavior through operations on its meta-interface. Synthetix differs from the other extensible operating systems described above in a number of ways. First, Syn-thetix infers the specializations needed even for applications that have never considered the need for specialization.
References-found: 31

