URL: http://www.cse.ogi.edu/~lingliu/Papers/final-jcis.ps
Refering-URL: http://www.cse.ogi.edu/~lingliu/CQ/publication.html
Root-URL: http://www.cse.ogi.edu
Email: flingliu,caltong@cse.ogi.edu  kirill@cs.ualberta.ca  
Title: Distributed Query Scheduling Service: An Architecture and Its Implementation  
Author: Ling Liu and Calton Pu Kirill Richine 
Keyword: Distributed and Cooperative Information System, Distributed Query Scheduling, Dis tributed Heterogeneous Information service.  
Note: This research is partially supported by DARPA contract MDA972-97-1-0016, Intel, and Boeing.  
Address: P.O.Box 91000 Portland Oregon 97291-1000 USA  GSB615, Edmonton T6G2H1 AB, Canada  
Affiliation: Oregon Graduate Institute Department of Computer Science Engineering  University of Alberta Department of Computer Science  
Abstract: We present the systematic design and development of a distributed query scheduling service (DQS) in the context of DIOM, a distributed and interoperable query mediation system [26]. DQS consists of an extensible architecture for distributed query processing, a three-phase optimization algorithm for generating efficient query execution schedules, and a prototype implementation. Functionally, two important execution models of distributed queries, namely moving query to data or moving data to query, are supported and combined into a unified framework, allowing the data sources with limited search and filtering capabilities to be incorporated through wrappers into the distributed query scheduling process. Algorithmically, conventional optimization factors (such as join order) are considered separately from and refined by distributed system factors (such as data distribution, execution location, heterogeneous host capabilities), allowing for stepwise refinement through three optimization phases: compilation, parallelization, site selection and execution. A subset of DQS algorithms has been implemented in Java to demonstrate the practicality of the architecture and the usefulness of the distributed query scheduling algorithm in optimizing execution schedules for inter-site queries. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Apers, A. Hevner, and S. Yao. </author> <title> Optimization algorithms for distributed queries. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> 9(1), </volume> <year> 1993. </year>
Reference-contexts: Some solutions perform a rather exhaustive enumeration of query plans, hence do not scale well <ref> [1, 3, 9, 13, 22, 31, 34, 35, 38, 47] </ref>. Especially for the Internet-scale application scenarios with large number of data sources, these schemes are too expensive.
Reference: [2] <author> Y. Arens and et al. </author> <title> Retrieving and integrating data from multiple information sources. </title> <journal> International Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 2(2) </volume> <pages> 127-158, </pages> <year> 1993. </year>
Reference-contexts: Several distributed information mediation systems are being built for providing uniform access over multiple information sources based on the mediator architecture [48]. DIOM [26] is a prototype of the distributed information mediator systems. Other prototype systems include TSIMMIS [12], Garlic [4], CARNOT [6], SIMS <ref> [2] </ref>, DISCO [5]), and Information Manifold [21].
Reference: [3] <author> P. A. Bernstein, N. Goodman, E. Wong, C. L. Reeve, and J. J. B. Rothnie. </author> <title> Query processing in a system for distributed databases (sdd-1). </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(4) </volume> <pages> 602-626, </pages> <month> December </month> <year> 1981. </year>
Reference-contexts: Several distributed DBMS prototypes were developed during early 1980s, such as R* [23, 38], SDD-1 <ref> [3] </ref>, and distributed INGRES [43]. All extended single-site DBMSs to manage relations that were distributed over the sites in a computer network. Various techniques were developed for handling distributed query optimization [3, 38, 8] and distributed transactions [3, 23]. <p> Several distributed DBMS prototypes were developed during early 1980s, such as R* [23, 38], SDD-1 [3], and distributed INGRES [43]. All extended single-site DBMSs to manage relations that were distributed over the sites in a computer network. Various techniques were developed for handling distributed query optimization <ref> [3, 38, 8] </ref> and distributed transactions [3, 23]. Commercial systems based on these techniques are now available from several relational DBMS vendors. Architecturally, each distributed DBMS assumes a "share nothing" architecture [42] and supports the basic distributed processing model of "moving query to data". <p> All extended single-site DBMSs to manage relations that were distributed over the sites in a computer network. Various techniques were developed for handling distributed query optimization [3, 38, 8] and distributed transactions <ref> [3, 23] </ref>. Commercial systems based on these techniques are now available from several relational DBMS vendors. Architecturally, each distributed DBMS assumes a "share nothing" architecture [42] and supports the basic distributed processing model of "moving query to data". <p> Some solutions perform a rather exhaustive enumeration of query plans, hence do not scale well <ref> [1, 3, 9, 13, 22, 31, 34, 35, 38, 47] </ref>. Especially for the Internet-scale application scenarios with large number of data sources, these schemes are too expensive. <p> expected size of the intermediate result of the query [7, 46]; * (b) considering only such join orderings that do not result in Cartesian product between rela tions [39]; * (c) performing the joins whose estimated result is smaller before the joins that are expected to have larger intermediate result <ref> [3, 7] </ref>. The heuristic-based optimization involves the use of query rewriting rules to generate the optimized query expression that is equivalent to the original query. An optimize query expression here refers to the one that minimizes the response time or the overall processing cost.
Reference: [4] <author> M. Carey, L. Haas, P. Schwarz, and et al. </author> <title> Towards heterogeneous multimedia information systems: the garlic approach. </title> <booktitle> In IEEE Int. Workshop on Research Issues in Data Engineering, </booktitle> <year> 1995. </year>
Reference-contexts: Several distributed information mediation systems are being built for providing uniform access over multiple information sources based on the mediator architecture [48]. DIOM [26] is a prototype of the distributed information mediator systems. Other prototype systems include TSIMMIS [12], Garlic <ref> [4] </ref>, CARNOT [6], SIMS [2], DISCO [5]), and Information Manifold [21].
Reference: [5] <author> Y. Chang, L. Raschid, and B. Dorr. </author> <title> Transforming queries from a relational schema to an equivalent object schema: a prototype based on f-logic. </title> <booktitle> In Proceedings of the International Symposium on Methodologies in Information Systems (ISMIS), </booktitle> <year> 1994. </year>
Reference-contexts: Several distributed information mediation systems are being built for providing uniform access over multiple information sources based on the mediator architecture [48]. DIOM [26] is a prototype of the distributed information mediator systems. Other prototype systems include TSIMMIS [12], Garlic [4], CARNOT [6], SIMS [2], DISCO <ref> [5] </ref>), and Information Manifold [21].
Reference: [6] <author> C. Collet, M. Huhns, and W. Shen. </author> <title> Obtaining complete answers from incomplete databases. </title> <booktitle> In IEEE Computer, </booktitle> <year> 1991. </year>
Reference-contexts: Several distributed information mediation systems are being built for providing uniform access over multiple information sources based on the mediator architecture [48]. DIOM [26] is a prototype of the distributed information mediator systems. Other prototype systems include TSIMMIS [12], Garlic [4], CARNOT <ref> [6] </ref>, SIMS [2], DISCO [5]), and Information Manifold [21].
Reference: [7] <author> U. Dayal. </author> <title> Query processing in a multidtatabase system. Query Processing in Database Systems, </title> <year> 1985. </year>
Reference-contexts: We summarize the common tactics used in the standard optimizer technology in Heuristic 1. Heuristic 1 (Common Heuristics) * (a) moving relational selection and projection operators down the query tree to reduce the expected size of the intermediate result of the query <ref> [7, 46] </ref>; * (b) considering only such join orderings that do not result in Cartesian product between rela tions [39]; * (c) performing the joins whose estimated result is smaller before the joins that are expected to have larger intermediate result [3, 7]. <p> expected size of the intermediate result of the query [7, 46]; * (b) considering only such join orderings that do not result in Cartesian product between rela tions [39]; * (c) performing the joins whose estimated result is smaller before the joins that are expected to have larger intermediate result <ref> [3, 7] </ref>. The heuristic-based optimization involves the use of query rewriting rules to generate the optimized query expression that is equivalent to the original query. An optimize query expression here refers to the one that minimizes the response time or the overall processing cost.
Reference: [8] <author> R. Epstein, Stonebraker, and E. Wong. </author> <title> Distributed query processing in relational database systems. </title> <booktitle> In Proc. ACM SIGMOD, </booktitle> <year> 1978. </year>
Reference-contexts: Several distributed DBMS prototypes were developed during early 1980s, such as R* [23, 38], SDD-1 [3], and distributed INGRES [43]. All extended single-site DBMSs to manage relations that were distributed over the sites in a computer network. Various techniques were developed for handling distributed query optimization <ref> [3, 38, 8] </ref> and distributed transactions [3, 23]. Commercial systems based on these techniques are now available from several relational DBMS vendors. Architecturally, each distributed DBMS assumes a "share nothing" architecture [42] and supports the basic distributed processing model of "moving query to data".
Reference: [9] <author> R. Epstein and M. Stonebraker. </author> <title> Analysis of distributed database strategies. </title> <booktitle> In The International Conference on Very Large Data Bases, </booktitle> <year> 1980. </year>
Reference-contexts: Some solutions perform a rather exhaustive enumeration of query plans, hence do not scale well <ref> [1, 3, 9, 13, 22, 31, 34, 35, 38, 47] </ref>. Especially for the Internet-scale application scenarios with large number of data sources, these schemes are too expensive.
Reference: [10] <author> C. Galindo-Legaria, A. Pellenkoft, and M. Kersten. </author> <title> Randomized join order selection why use transformations? In The International Conference on Very Large Data Bases, </title> <year> 1994. </year>
Reference-contexts: Especially for the Internet-scale application scenarios with large number of data sources, these schemes are too expensive. Some other solutions reduce the search space using techniques like simulated annealing, random probes, or other heuristics <ref> [10, 18, 17, 30, 33, 41, 45, 44] </ref>. While these approaches may generate efficient plans in the intended cases, they do not have good performance guarantees in terms of the quality of the plans generated.
Reference: [11] <author> S. Ganguly, W. Hasan, and R. Krishnamurthy. </author> <title> Query optimization for parallel execution. </title> <booktitle> In Proc. ACM-SIGMOD Conf. on Management of Data, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: Recent research demonstrates that bushy query plan trees permit substantial gains in performance in both serial (e.g., [16]) and parallel (e.g., <ref> [11] </ref>) database systems. We intend to experiment with different optimization strategies proposed to determine which method provides the best results in the DIOM system. 13 4.5 Query Parallelization Phase This phase takes a binary query operator tree as input and produces a non-binary query plan tree.
Reference: [12] <author> H. Garcia-Molina and et al. </author> <title> The TSIMMIS approach to mediation: data models and languages (extended abstract). </title> <booktitle> In NGITS, </booktitle> <year> 1995. </year> <month> 37 </month>
Reference-contexts: Several distributed information mediation systems are being built for providing uniform access over multiple information sources based on the mediator architecture [48]. DIOM [26] is a prototype of the distributed information mediator systems. Other prototype systems include TSIMMIS <ref> [12] </ref>, Garlic [4], CARNOT [6], SIMS [2], DISCO [5]), and Information Manifold [21].
Reference: [13] <author> L. Haas, D. Kossmann, E. Wimmers, and J. Yan. </author> <title> Optimizing queries across diverse data sources. </title> <booktitle> In The International Conference on Very Large Data Bases, </booktitle> <year> 1997. </year>
Reference-contexts: Some solutions perform a rather exhaustive enumeration of query plans, hence do not scale well <ref> [1, 3, 9, 13, 22, 31, 34, 35, 38, 47] </ref>. Especially for the Internet-scale application scenarios with large number of data sources, these schemes are too expensive.
Reference: [14] <author> J. Howard, M. Kazar, S. Menees, D. Nichols, M. Satyanarayanan, R. N. Sidebotham, and M. J. West. </author> <title> Scale and performance in a distributed file system. </title> <journal> ACM Trans. Computer Systems, </journal> <volume> 6(1), </volume> <year> 1988. </year>
Reference-contexts: object schema to interoperate among multiple sources via the KIF knowledge interchange logic, but it is unclear how their logic-based transformation system scales when changes occur in the number of the sources or the content of individual sources. 2.3 Client-Server File Systems In client-server distributed file systems such as Andrew <ref> [14] </ref> and the NFS-oriented commercial offerings, a file or a collection of files is the unit of storage allocation and has unique home on some server. Architecturally, unlike the previous two types of systems, client-server file systems implement the strategy of "moving the data to the query".
Reference: [15] <author> T. Ibaraki and T. Kameda. </author> <title> On the optimal nesting order for computing n-relational joins. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 9(3), </volume> <year> 1984. </year>
Reference-contexts: Many of these techniques may generate plans that is arbitrarily far from the optimized one, or even fail to generate a feasible plan, when the user query does have a feasible plan. Other interesting solutions proposed so far are those <ref> [15, 37] </ref> which use specific cost models and clever techniques to produce optimized join orders efficiently.
Reference: [16] <author> Y. Ioannidis and Y. C. Kang. </author> <title> Left-deep vs. bushy trees: An analysis of strategy spaces and its implications for query optimization. </title> <booktitle> In Proc. ACM-SIGMOD Conf. on Management of Data, </booktitle> <year> 1991. </year>
Reference-contexts: Furthermore, this first phase can consist of any optimization method proposed for single-site database management systems, which produces (or can be modified to produce) a binary query operator tree. Recent research demonstrates that bushy query plan trees permit substantial gains in performance in both serial (e.g., <ref> [16] </ref>) and parallel (e.g., [11]) database systems. We intend to experiment with different optimization strategies proposed to determine which method provides the best results in the DIOM system. 13 4.5 Query Parallelization Phase This phase takes a binary query operator tree as input and produces a non-binary query plan tree.
Reference: [17] <author> Y. Ioannidis and E. Wong. </author> <title> Query optimization by simulated annealing. </title> <booktitle> In Proc. ACM-SIGMOD Conf. on Management of Data, </booktitle> <year> 1987. </year>
Reference-contexts: Especially for the Internet-scale application scenarios with large number of data sources, these schemes are too expensive. Some other solutions reduce the search space using techniques like simulated annealing, random probes, or other heuristics <ref> [10, 18, 17, 30, 33, 41, 45, 44] </ref>. While these approaches may generate efficient plans in the intended cases, they do not have good performance guarantees in terms of the quality of the plans generated.
Reference: [18] <author> Y. Ioannidis and Y.Kang. </author> <title> Randomized algorithms for optimizing large join queries. </title> <booktitle> In Proc. ACM-SIGMOD Conf. on Management of Data, </booktitle> <year> 1990. </year>
Reference-contexts: Especially for the Internet-scale application scenarios with large number of data sources, these schemes are too expensive. Some other solutions reduce the search space using techniques like simulated annealing, random probes, or other heuristics <ref> [10, 18, 17, 30, 33, 41, 45, 44] </ref>. While these approaches may generate efficient plans in the intended cases, they do not have good performance guarantees in terms of the quality of the plans generated.
Reference: [19] <author> N. Kabre and D. J. DeWitt. </author> <title> Efficient mid-query re-optimization of sub-optimal query execution plans. </title> <booktitle> In Proc. ACM-SIGMOD Conf. on Management of Data, </booktitle> <year> 1998. </year>
Reference-contexts: Although the initial use of "single-site" optimization may often generate sub-optimal plans, as pointed out in <ref> [29, 19] </ref>, we believe that other strategies require an arbitrarily large amount of current global knowledge regarding integrated schema and data. In the rest of the paper the term query plan and query tree are used interchangeably.
Reference: [20] <author> Y. Lee. </author> <title> Rainbow: A prototype of the diom interoperable system. MSc. </title> <type> Thesis, </type> <institution> Department of Computer Science, University of Alberta, </institution> <month> July, </month> <year> 1996. </year>
Reference-contexts: For each subquery, the subquery execution module will invoke the corresponding wrapper function to execute the subquery. The issue of subquery translation and subquery execution is beyond the scope of this paper and is covered in detail in <ref> [20, 26] </ref>. The results returned by each subquery will be first packaged through the local result packaging module at the corresponding wrapper and then sent to the query result assembly step at the mediator tier to combine with other subquery results, before delivering the final answer to the user.
Reference: [21] <author> A. Levy, A. Rajaraman, and J. Ordille. </author> <title> Querying heterogeneous information sources using source descriptions. </title> <booktitle> In Proceedings of the 22nd International Conference on Very Large Data Bases, </booktitle> <year> 1996. </year>
Reference-contexts: DIOM [26] is a prototype of the distributed information mediator systems. Other prototype systems include TSIMMIS [12], Garlic [4], CARNOT [6], SIMS [2], DISCO [5]), and Information Manifold <ref> [21] </ref>.
Reference: [22] <author> C. Li, R. Yerneni, V. Vassalos, H. Garcia-Molina, Y. Papakonstantinou, J. Ullman, and M.Valiveti. </author> <title> Capability based mediation in tsimmis. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <year> 1998. </year>
Reference-contexts: Some solutions perform a rather exhaustive enumeration of query plans, hence do not scale well <ref> [1, 3, 9, 13, 22, 31, 34, 35, 38, 47] </ref>. Especially for the Internet-scale application scenarios with large number of data sources, these schemes are too expensive.
Reference: [23] <author> B. G. Lindsay, L. Haas, C. Mohan, P. Wilms, and R. Yost. </author> <title> Computation and Communication in R fl : A Distributed Database Manager. </title> <journal> ACM Trans. Computer Systems, </journal> <volume> 2(1), </volume> <year> 1984. </year>
Reference-contexts: Several distributed DBMS prototypes were developed during early 1980s, such as R* <ref> [23, 38] </ref>, SDD-1 [3], and distributed INGRES [43]. All extended single-site DBMSs to manage relations that were distributed over the sites in a computer network. Various techniques were developed for handling distributed query optimization [3, 38, 8] and distributed transactions [3, 23]. <p> All extended single-site DBMSs to manage relations that were distributed over the sites in a computer network. Various techniques were developed for handling distributed query optimization [3, 38, 8] and distributed transactions <ref> [3, 23] </ref>. Commercial systems based on these techniques are now available from several relational DBMS vendors. Architecturally, each distributed DBMS assumes a "share nothing" architecture [42] and supports the basic distributed processing model of "moving query to data".
Reference: [24] <author> L. Liu. </author> <title> Query routing in structured open environments. </title> <type> Technical report, </type> <institution> TR97-10, Department of Computing Science, University of Alberta, Edmonton, Alberta, </institution> <month> Feb. </month> <year> 1997. </year>
Reference-contexts: Mediators are software modules that handle application-specific service requests [25]. One of the main tasks of the mediator sub-system is to utilize the metadata obtained from both information consumers (i.e., user profiles) and information producers (i.e., source capability descriptions) for efficient processing of distributed queries <ref> [24] </ref>. Wrappers are software modules that need to be built around the external Information sources in order to make them accessible from the network of DIOM mediators. Each wrapper serves one individual information source. <p> This task is performed by mapping the consumers' domain model terminology to the information producers' resource model terminology, by eliminating null queries, which return empty results, and by transforming ambiguous queries into semantic-clean queries <ref> [24] </ref>. The consumers' user query profiles and producers' source capability descriptions play an important role in establishing the interconnection between a consumer's query request and the relevant information sources.
Reference: [25] <author> L. Liu and C. Pu. </author> <title> The distributed interoperable object model and its application to large-scale interoperable database systems. </title> <booktitle> In ACM International Conference on Information and Knowledge Management (CIKM'95), </booktitle> <address> Baltimore, Maryland, USA, </address> <month> November </month> <year> 1995. </year>
Reference-contexts: Mediators are software modules that handle application-specific service requests <ref> [25] </ref>. One of the main tasks of the mediator sub-system is to utilize the metadata obtained from both information consumers (i.e., user profiles) and information producers (i.e., source capability descriptions) for efficient processing of distributed queries [24].
Reference: [26] <author> L. Liu and C. Pu. </author> <title> An adaptive object-oriented approach to integration and access of heterogeneous information sources. DISTRIBUTED AND PARALLEL DATABASES: </title> <journal> An International Journal, </journal> <volume> 5(2), </volume> <year> 1997. </year>
Reference-contexts: The first contribution of the paper is the systematic development of a distributed query scheduling service that addresses these issues in the context of DIOM, a distributed and interoperable query mediation system <ref> [26] </ref>. The novelty of such a service is two-fold. First, it provides an extensible architecture for distributed query processing, which supports and coordinates between the two possible execution models of distributed queries 1 : (1) moving query to data and (2) moving data to query. <p> Several distributed information mediation systems are being built for providing uniform access over multiple information sources based on the mediator architecture [48]. DIOM <ref> [26] </ref> is a prototype of the distributed information mediator systems. Other prototype systems include TSIMMIS [12], Garlic [4], CARNOT [6], SIMS [2], DISCO [5]), and Information Manifold [21]. <p> However, it is unclear how such solutions, which rely heavily on sophisticated statistics about content of each remote data source, can be applied effectively to situations in an open environment. 3 Background and Terminology 3.1 An Overview of the DIOM system The DIOM <ref> [26] </ref> system has two-tier architecture and offers services at both the mediator tier and the wrapper tier (see Figure 1). Mediators are software modules that handle application-specific service requests [25]. <p> In this section we briefly describe the mechanisms by which DIOM handles query parsing (initial pre-processing), query optimization and query execution. the query mediation manager is to coordinate the communication and distribution of the processing of information consumer's query requests among the network of mediators and wrappers <ref> [26] </ref>. The general procedure of distributed query processing in DIOM primarily consists of the following steps: query compilation, query parallelization, site selection and execution, and query result assembly at the mediator tier, and subquery translation, subquery execution, and local result packaging at the wrapper tier. <p> For each subquery, the subquery execution module will invoke the corresponding wrapper function to execute the subquery. The issue of subquery translation and subquery execution is beyond the scope of this paper and is covered in detail in <ref> [20, 26] </ref>. The results returned by each subquery will be first packaged through the local result packaging module at the corresponding wrapper and then sent to the query result assembly step at the mediator tier to combine with other subquery results, before delivering the final answer to the user. <p> Site Selection for Single Union Inter-Site Queries Consider the following example query asking for all customer names and addresses who live in Edmonton, Canada: SELECT customer.name, customer.address FROM customer WHERE customer.city != `Edmonton' AND customer.country = `Canada'. != is a substring matching operator introduced in DIOM Interface query language (IQL) <ref> [26] </ref>.
Reference: [27] <author> L. Liu, C. Pu, R. Barga, and T. Zhou. </author> <title> Differential evaluation of continual queries. </title> <booktitle> In IEEE Proceedings of the 16th International Conference on Distributed Computing Systems, </booktitle> <address> Hong Kong, </address> <month> May 27-30 </month> <year> 1996. </year>
Reference-contexts: On the development side, we are continuing our effort in the implementation of other heuristics described in Section 4 in the new release of the DQS software package. We are also interested in extending distributed query scheduling service to support continual queries <ref> [27, 36 28] </ref> in large-scale distributed systems. This includes the implementation methodology for building smart wrappers that can extract or sample useful statistical information and source capability descriptions of available data sources.
Reference: [28] <author> L. Liu, C. Pu, W. Tang, J. Biggs, D. Buttler, W. Han, P. Benninghoff, and Fenghua. </author> <title> CQ: A Personalized Update Monitoring Toolkit. </title> <booktitle> In Proceedings of ACM SIGMOD Conference, </booktitle> <year> 1998. </year> <month> 38 </month>
Reference: [29] <author> L. Mackert and F. M. Lohman. </author> <title> R* optimizer validation and performance evaluation for local queries. </title> <booktitle> In Proc. 1986 ACM-SIGMOD Conf. on Management of Data, </booktitle> <year> 1986. </year>
Reference-contexts: Traditional cost-based query optimizers, including nearly all optimizers found in commercial products, have been based on resource-usage models and exponential-complexity dynamic programming search algorithms similar to those developed in System R [39]. Extensions of these traditional optimizers to handle distributed database systems, as in R* <ref> [38, 29] </ref>, is straightforward and produces optimized plans. However this approach has a key disadvantage. The exponential complexity of the search space makes the use of such optimizers impractical in very large distributed systems. <p> Although the initial use of "single-site" optimization may often generate sub-optimal plans, as pointed out in <ref> [29, 19] </ref>, we believe that other strategies require an arbitrarily large amount of current global knowledge regarding integrated schema and data. In the rest of the paper the term query plan and query tree are used interchangeably. <p> This is not to say that all hosts must be on the same local network work or a set of completely homogeneous networks, but rather that the networks are all "fast" in the sense discussed in <ref> [29] </ref>, such that network bandwidth does not overwhelmingly dominate query processing costs.
Reference: [30] <author> K. Morris. </author> <title> An algorithms for ordering subgoals in nail! In ACM PODS, </title> <year> 1988. </year>
Reference-contexts: Especially for the Internet-scale application scenarios with large number of data sources, these schemes are too expensive. Some other solutions reduce the search space using techniques like simulated annealing, random probes, or other heuristics <ref> [10, 18, 17, 30, 33, 41, 45, 44] </ref>. While these approaches may generate efficient plans in the intended cases, they do not have good performance guarantees in terms of the quality of the plans generated.
Reference: [31] <author> K. Ono and G. Lohman. </author> <title> Measuring the complexity of join enumeration in query optimization. </title> <booktitle> In The International Conference on Very Large Data Bases, </booktitle> <year> 1990. </year>
Reference-contexts: Some solutions perform a rather exhaustive enumeration of query plans, hence do not scale well <ref> [1, 3, 9, 13, 22, 31, 34, 35, 38, 47] </ref>. Especially for the Internet-scale application scenarios with large number of data sources, these schemes are too expensive.
Reference: [32] <author> M. Ozsu and P. Valduriez. </author> <title> Principles of Distributed Database Systems. </title> <publisher> Prentice-Hall, </publisher> <year> 1991. </year>
Reference-contexts: In this section we first discuss each of the three approaches and summarize their architectural difference, and then discuss the state of art technology in distributed query optimization research that are related to our work. 2.1 Distributed Database Systems We first consider the approach taken by distributed database management systems <ref> [32] </ref>. Several distributed DBMS prototypes were developed during early 1980s, such as R* [23, 38], SDD-1 [3], and distributed INGRES [43]. All extended single-site DBMSs to manage relations that were distributed over the sites in a computer network. <p> This site coordinates the processing of all queries coming from the users. Due to the critical role of communication parameter in the traditional distributed query processing cost, the semijoin operator was introduced to reduce communication cost of inter-site joins <ref> [32] </ref>. The main idea of the semi-join operator is to move the key portion of the data at one remote data site to another before performing the actual inter-site join operation. 3 2.2 Distributed Information Mediation Systems Distributed information mediation systems are evolved from federated database systems [40]. <p> The main tactics used in this initial phase are those that are commonly used in commercial relational DBMS products. Most of the tactics are also covered in many of the database text books (e.g., <ref> [46, 32] </ref>). The second optimization phase is query parallelization. This phase determines the degree of parallelism used throughout the distributed processing of the query plan tree generated from the first pass. It consists of two steps: query routing and parallel query plan generation.
Reference: [33] <author> C. Papadimitriou and K. Steilitz. </author> <title> Combinatorial Optimization: Algorithms and Complexity. </title> <publisher> Prentice-Hall, </publisher> <year> 1982. </year>
Reference-contexts: Especially for the Internet-scale application scenarios with large number of data sources, these schemes are too expensive. Some other solutions reduce the search space using techniques like simulated annealing, random probes, or other heuristics <ref> [10, 18, 17, 30, 33, 41, 45, 44] </ref>. While these approaches may generate efficient plans in the intended cases, they do not have good performance guarantees in terms of the quality of the plans generated.
Reference: [34] <author> Y. Papakonstantinou, A. Gupta, and L. Haas. </author> <title> Capability-based query rewriting in mediator systems. </title> <booktitle> In Proceedings of the International Conference on Parallel and Distributed Information Systems, </booktitle> <address> Miami Beach, Florida, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: Some solutions perform a rather exhaustive enumeration of query plans, hence do not scale well <ref> [1, 3, 9, 13, 22, 31, 34, 35, 38, 47] </ref>. Especially for the Internet-scale application scenarios with large number of data sources, these schemes are too expensive.
Reference: [35] <author> A. Pellenkoft, C. Galindo-Legaria, and M. Kersten. </author> <title> The complexity of transformation-based join enumeration. </title> <booktitle> In The International Conference on Very Large Data Bases, </booktitle> <year> 1997. </year>
Reference-contexts: Some solutions perform a rather exhaustive enumeration of query plans, hence do not scale well <ref> [1, 3, 9, 13, 22, 31, 34, 35, 38, 47] </ref>. Especially for the Internet-scale application scenarios with large number of data sources, these schemes are too expensive.
Reference: [36] <author> K. Richine. </author> <title> Distributed query scheduling in the context of diom: An experiment. MSc. </title> <type> Thesis, </type> <institution> Department of Computer Science, University of Alberta, </institution> <month> April, </month> <year> 1997. </year>
Reference-contexts: In DIOM, this observation is used as a heuristic for union operators in inter-site queries. We omit the formal proof here due to space limitation. Readers who are interested in further details may refer to the technical report <ref> [36] </ref>. Note that, however, the rules in Equation 4 may not be true if the assumptions of equal unit communication and equal local processing costs are broken. That is, there may be cases where assigning union operator to the result delivery site will not lead to the minimum cost [36]. 23 <p> report <ref> [36] </ref>. Note that, however, the rules in Equation 4 may not be true if the assumptions of equal unit communication and equal local processing costs are broken. That is, there may be cases where assigning union operator to the result delivery site will not lead to the minimum cost [36]. 23 4.7.2 Site Selection for Single Join Inter-site Queries We have described the cost function formulae and the rules that optimize the site selection plans for single union inter-site queries. In this section we discuss the cost function formulae used in site selection for single join inter-site queries. <p> Indeed, if the result of a join has the size that is less than the sum of the sizes of its operand, then the outcome would be quite different <ref> [36] </ref>. The cost functions in Equation 5 will be used to make the decision about the best site 24 selection plan. Due to the space limitation, we omit the concrete examples that illustrate the cost functions for inter-site joins. Readers who are interested in further detail may refer to [36]. <p> different <ref> [36] </ref>. The cost functions in Equation 5 will be used to make the decision about the best site 24 selection plan. Due to the space limitation, we omit the concrete examples that illustrate the cost functions for inter-site joins. Readers who are interested in further detail may refer to [36]. <p> Readers who are interested in further detail may refer to the technical report <ref> [36] </ref>. So far we have described the theoretical foundations and the design framework for distributed query scheduling service in DIOM. <p> Readers who are interested in further detail may refer to <ref> [36] </ref>. 5.2 DQP Components 5.2.1 Query Manager The Query Manager is the main component that coordinates the work of both DQP and UIP components. A new query manager object is instantiated in the Query Entry Form whenever the user submits a query.
Reference: [37] <author> W. Scheufele and G. Moerkotte. </author> <title> On the complexity of generating optimal plans with cross products. </title> <booktitle> In ACM PODS'97, </booktitle> <year> 1997. </year>
Reference-contexts: Many of these techniques may generate plans that is arbitrarily far from the optimized one, or even fail to generate a feasible plan, when the user query does have a feasible plan. Other interesting solutions proposed so far are those <ref> [15, 37] </ref> which use specific cost models and clever techniques to produce optimized join orders efficiently.
Reference: [38] <author> P. G. Selinger and M. Adiba. </author> <title> Access path selection in distributed database management systems. </title> <booktitle> In Int. Conf. on Very Large Data Bases, </booktitle> <year> 1980. </year>
Reference-contexts: Several distributed DBMS prototypes were developed during early 1980s, such as R* <ref> [23, 38] </ref>, SDD-1 [3], and distributed INGRES [43]. All extended single-site DBMSs to manage relations that were distributed over the sites in a computer network. Various techniques were developed for handling distributed query optimization [3, 38, 8] and distributed transactions [3, 23]. <p> Several distributed DBMS prototypes were developed during early 1980s, such as R* [23, 38], SDD-1 [3], and distributed INGRES [43]. All extended single-site DBMSs to manage relations that were distributed over the sites in a computer network. Various techniques were developed for handling distributed query optimization <ref> [3, 38, 8] </ref> and distributed transactions [3, 23]. Commercial systems based on these techniques are now available from several relational DBMS vendors. Architecturally, each distributed DBMS assumes a "share nothing" architecture [42] and supports the basic distributed processing model of "moving query to data". <p> Some solutions perform a rather exhaustive enumeration of query plans, hence do not scale well <ref> [1, 3, 9, 13, 22, 31, 34, 35, 38, 47] </ref>. Especially for the Internet-scale application scenarios with large number of data sources, these schemes are too expensive. <p> Traditional cost-based query optimizers, including nearly all optimizers found in commercial products, have been based on resource-usage models and exponential-complexity dynamic programming search algorithms similar to those developed in System R [39]. Extensions of these traditional optimizers to handle distributed database systems, as in R* <ref> [38, 29] </ref>, is straightforward and produces optimized plans. However this approach has a key disadvantage. The exponential complexity of the search space makes the use of such optimizers impractical in very large distributed systems.
Reference: [39] <author> P. G. Selinger, M. M. Astrahan, D. D. Chamberlin, R. A. Lorie, and T. G. Price. </author> <title> Access path selection in a relational database management system. </title> <booktitle> In Proc. ACM-SIGMOD Conf. on Management of Data, </booktitle> <year> 1979. </year>
Reference-contexts: Traditional cost-based query optimizers, including nearly all optimizers found in commercial products, have been based on resource-usage models and exponential-complexity dynamic programming search algorithms similar to those developed in System R <ref> [39] </ref>. Extensions of these traditional optimizers to handle distributed database systems, as in R* [38, 29], is straightforward and produces optimized plans. However this approach has a key disadvantage. The exponential complexity of the search space makes the use of such optimizers impractical in very large distributed systems. <p> Heuristic 1 (Common Heuristics) * (a) moving relational selection and projection operators down the query tree to reduce the expected size of the intermediate result of the query [7, 46]; * (b) considering only such join orderings that do not result in Cartesian product between rela tions <ref> [39] </ref>; * (c) performing the joins whose estimated result is smaller before the joins that are expected to have larger intermediate result [3, 7]. The heuristic-based optimization involves the use of query rewriting rules to generate the optimized query expression that is equivalent to the original query.
Reference: [40] <author> A. Sheth and J. Larson. </author> <title> Federated database systems for managing distributed, heterogeneous, and autonomous databases. </title> <journal> ACM Computing Surveys, </journal> <volume> Vol. 22, No.3 1990. </volume> <pages> 183-236. </pages>
Reference-contexts: The main idea of the semi-join operator is to move the key portion of the data at one remote data site to another before performing the actual inter-site join operation. 3 2.2 Distributed Information Mediation Systems Distributed information mediation systems are evolved from federated database systems <ref> [40] </ref>. A main difference between distributed database systems, federated database system and distributed information mediation systems is the open world assumption, namely, the distributed information mediation systems must deal with the dynamics of an open environment, where information sources available on-line are constantly changing in number, volume, content and capability.
Reference: [41] <author> M. Steinbrunn, G. Moerkotte, and A. Kemper. </author> <title> Heuristic and randomized optimization for the join ordering problem. </title> <journal> VLDB Journal, </journal> <volume> 6(3), </volume> <year> 1997. </year>
Reference-contexts: Especially for the Internet-scale application scenarios with large number of data sources, these schemes are too expensive. Some other solutions reduce the search space using techniques like simulated annealing, random probes, or other heuristics <ref> [10, 18, 17, 30, 33, 41, 45, 44] </ref>. While these approaches may generate efficient plans in the intended cases, they do not have good performance guarantees in terms of the quality of the plans generated.
Reference: [42] <author> M. Stonebraker. </author> <title> The case for shared nothing. </title> <journal> IEEE Database Engineering, </journal> <volume> 9(1), </volume> <year> 1986. </year>
Reference-contexts: Various techniques were developed for handling distributed query optimization [3, 38, 8] and distributed transactions [3, 23]. Commercial systems based on these techniques are now available from several relational DBMS vendors. Architecturally, each distributed DBMS assumes a "share nothing" architecture <ref> [42] </ref> and supports the basic distributed processing model of "moving query to data". Thus, these systems allocate data to the sites in a computer network and the data allocation is managed by a database administrator.
Reference: [43] <author> M. Stonebraker. </author> <title> The design and implementation of distributed ingres. The INGRES Papers, </title> <editor> M. Stonebraker (ed.)(Addison-Wesley, </editor> <address> Reading, MA), </address> <year> 1986. </year>
Reference-contexts: Several distributed DBMS prototypes were developed during early 1980s, such as R* [23, 38], SDD-1 [3], and distributed INGRES <ref> [43] </ref>. All extended single-site DBMSs to manage relations that were distributed over the sites in a computer network. Various techniques were developed for handling distributed query optimization [3, 38, 8] and distributed transactions [3, 23]. Commercial systems based on these techniques are now available from several relational DBMS vendors.
Reference: [44] <author> A. Swami. </author> <title> Optimization of large join queries. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <year> 1988. </year>
Reference-contexts: Especially for the Internet-scale application scenarios with large number of data sources, these schemes are too expensive. Some other solutions reduce the search space using techniques like simulated annealing, random probes, or other heuristics <ref> [10, 18, 17, 30, 33, 41, 45, 44] </ref>. While these approaches may generate efficient plans in the intended cases, they do not have good performance guarantees in terms of the quality of the plans generated.
Reference: [45] <author> A. Swami. </author> <title> Optimization of large join queries: Combining heuristic and combinatorial techniques. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <year> 1989. </year>
Reference-contexts: Especially for the Internet-scale application scenarios with large number of data sources, these schemes are too expensive. Some other solutions reduce the search space using techniques like simulated annealing, random probes, or other heuristics <ref> [10, 18, 17, 30, 33, 41, 45, 44] </ref>. While these approaches may generate efficient plans in the intended cases, they do not have good performance guarantees in terms of the quality of the plans generated.
Reference: [46] <author> J. D. Ullman. </author> <title> Principles of Database Systems. </title> <publisher> Computer Science Press, </publisher> <year> 1982. </year>
Reference-contexts: The main tactics used in this initial phase are those that are commonly used in commercial relational DBMS products. Most of the tactics are also covered in many of the database text books (e.g., <ref> [46, 32] </ref>). The second optimization phase is query parallelization. This phase determines the degree of parallelism used throughout the distributed processing of the query plan tree generated from the first pass. It consists of two steps: query routing and parallel query plan generation. <p> We summarize the common tactics used in the standard optimizer technology in Heuristic 1. Heuristic 1 (Common Heuristics) * (a) moving relational selection and projection operators down the query tree to reduce the expected size of the intermediate result of the query <ref> [7, 46] </ref>; * (b) considering only such join orderings that do not result in Cartesian product between rela tions [39]; * (c) performing the joins whose estimated result is smaller before the joins that are expected to have larger intermediate result [3, 7].
Reference: [47] <author> B. Vance and D. Maier. </author> <title> Rapid bushy join-order optimization with cartesian products. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <year> 1996. </year> <month> 39 </month>
Reference-contexts: Some solutions perform a rather exhaustive enumeration of query plans, hence do not scale well <ref> [1, 3, 9, 13, 22, 31, 34, 35, 38, 47] </ref>. Especially for the Internet-scale application scenarios with large number of data sources, these schemes are too expensive.
Reference: [48] <author> G. Wiederhold. </author> <title> Mediators in the architecture of future information systems. </title> <journal> IEEE Computer Magazine, </journal> <month> March </month> <year> 1992. </year> <month> 40 </month>
Reference-contexts: Several distributed information mediation systems are being built for providing uniform access over multiple information sources based on the mediator architecture <ref> [48] </ref>. DIOM [26] is a prototype of the distributed information mediator systems. Other prototype systems include TSIMMIS [12], Garlic [4], CARNOT [6], SIMS [2], DISCO [5]), and Information Manifold [21].
References-found: 48

