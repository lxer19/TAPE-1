URL: http://www.cs.ucsd.edu/groups/csl/pubs/conf/nossdav95.ps
Refering-URL: http://www.cs.ucsd.edu/groups/csl/pubs/author.html
Root-URL: http://www.cs.ucsd.edu
Phone: 2  
Title: Workstation Video Playback Performance with Competitive Process Load  
Author: Kevin Fall Joseph Pasquale and Steven McCanne 
Address: San Diego, CA 92093-0114, USA  Berkeley, CA 94720, USA  
Affiliation: 1 University of California,  Lawrence Berkeley Laboratory,  
Abstract: While many researchers believe that multimedia applications are best managed with hard, real-time scheduling mechanisms, models based on application-level adaptation with relaxed scheduling constraints are gaining acceptance. We analyze an existing video conferencing application, which was designed without explicit support for CPU resource management, and propose modifications to its architecture to support CPU load adaptation. Inter-frame display times (IDT) for a 30 frames/sec video segment are analyzed for increasing multiprocessing loads. As expected, the IDT variance (and mean) increases markedly with load, especially beyond saturation. We show that this display jitter can be significantly reduced by gracefully adapting the application's load requirements to match the available CPU resources.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> H. Tokuda and T. Kitayama, </author> <title> "Dynamic QOS Control Based on Real-Time Threads," </title> <booktitle> Proc. 4th Intl. Workshop on Network and OS Support for Digital Audio and Video, </booktitle> <year> 1993. </year>
Reference-contexts: Improving playback continuity is generally accomplished by employing reservation-based CPU scheduling, or by shedding load when resources are in short supply. Several real-time schemes employ schedulers which require performance parameters to be specified prior to program execution <ref> [1, 2, 3] </ref>. Other real-time systems strive to alleviate the user from preselecting resource requirements, and instead rely on adaptive resource management (ARM) [4, 5]. In ARM, applications self-adapt over time in order to match their resource demands to the system's resource availability.
Reference: 2. <author> D. Anderson, </author> <title> "Metascheduling for Continuous Media," </title> <journal> TOCS, </journal> <volume> vol. 11, </volume> <pages> pp. 226-252, </pages> <month> Aug </month> <year> 1993. </year>
Reference-contexts: Improving playback continuity is generally accomplished by employing reservation-based CPU scheduling, or by shedding load when resources are in short supply. Several real-time schemes employ schedulers which require performance parameters to be specified prior to program execution <ref> [1, 2, 3] </ref>. Other real-time systems strive to alleviate the user from preselecting resource requirements, and instead rely on adaptive resource management (ARM) [4, 5]. In ARM, applications self-adapt over time in order to match their resource demands to the system's resource availability.
Reference: 3. <author> K. Jeffay, D. L. Stone, T. Talley, and S. F. </author> <title> D, "Adaptive, Best-Effort Delivery of Digital Audio and Video Across Packet-Switched Networks," </title> <booktitle> Proc. 3rd Intl Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <month> Nov </month> <year> 1992. </year>
Reference-contexts: Improving playback continuity is generally accomplished by employing reservation-based CPU scheduling, or by shedding load when resources are in short supply. Several real-time schemes employ schedulers which require performance parameters to be specified prior to program execution <ref> [1, 2, 3] </ref>. Other real-time systems strive to alleviate the user from preselecting resource requirements, and instead rely on adaptive resource management (ARM) [4, 5]. In ARM, applications self-adapt over time in order to match their resource demands to the system's resource availability.
Reference: 4. <author> M. Jones, </author> <title> "Adaptive Real-Time Resource Management Supporting Modular Composition of Digital Multimedia Services," </title> <booktitle> Proc. 4th Intl. Workshop on Network and OS Support for Digital Audio and Video, </booktitle> <year> 1993. </year>
Reference-contexts: Several real-time schemes employ schedulers which require performance parameters to be specified prior to program execution [1, 2, 3]. Other real-time systems strive to alleviate the user from preselecting resource requirements, and instead rely on adaptive resource management (ARM) <ref> [4, 5] </ref>. In ARM, applications self-adapt over time in order to match their resource demands to the system's resource availability. Although ARM was originally proposed for real-time systems, it can also improve system performance on non-real-time scheduled systems. We define multiple processes executing to accomplish a common task cooperating processes.
Reference: 5. <author> J. D. Northcutt and E. M. Kuerner, </author> <title> "System Support for Time-Critical Media Applications," Sun Microsystems Internal Research Notes, no. </title> <address> SMLI-92-0077, </address> <year> 1990. </year>
Reference-contexts: Several real-time schemes employ schedulers which require performance parameters to be specified prior to program execution [1, 2, 3]. Other real-time systems strive to alleviate the user from preselecting resource requirements, and instead rely on adaptive resource management (ARM) <ref> [4, 5] </ref>. In ARM, applications self-adapt over time in order to match their resource demands to the system's resource availability. Although ARM was originally proposed for real-time systems, it can also improve system performance on non-real-time scheduled systems. We define multiple processes executing to accomplish a common task cooperating processes.
Reference: 6. <author> J. Nieh, J. Hanko, D. Northcutt, and G. Wall, </author> <title> "SVR4 UNIX Scheduler Unacceptable for Multimedia Applications," </title> <booktitle> Proc. 4th Intl. Workshop on Network and OS Support for Digital Audio and Video, </booktitle> <year> 1993. </year>
Reference-contexts: Even when real-time kernel support is available, specifying the parameters needed to ensure cooperative processes are scheduled at appropriate times is difficult <ref> [6] </ref>. When competitive processes are present, an application may fail to deliver its media stream at a sufficiently fast rate or at a sufficiently regular rate to maintain playback continuity. In this overloaded state, applications can resort to load shedding to reduce their CPU resource requirements.
Reference: 7. <author> C. Compton and D. Tennenhouse, </author> <title> "Collaborative Load Shedding for Media-Based Applications," </title> <booktitle> International Conference on Multimedia Computing and Systems, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: In this overloaded state, applications can resort to load shedding to reduce their CPU resource requirements. It has been suggested that load shedding may be combined with application-implemented adaptive control to provide good continuous media performance without the need for user-specified resource requirements <ref> [7] </ref>. Such techniques have already been demonstrated to be effective for handling network congestion [8, 9]. This paper explores the effects of competitive process load upon the otherwise smooth operation of a multi-process video playback application on a non-real-time operating system. <p> In order to maintain smooth media playback, the application must match its CPU demand to current availability. We pursue this idea with the modified architecture in Figure 2, which has been similarly proposed in <ref> [7] </ref>. Here, a load monitoring agent determines when CPU resources become scarce and induces the application to shed load. Within vic, load shedding could occur by rendering frames at a rate below the source rate.
Reference: 8. <author> H. Kanakia, P. Mishra, and A. Reibman, </author> <title> "An Adaptive Congestion Control Scheme for Real-Time Packet Video Transport," </title> <booktitle> Proc. SIGCOMM '93, </booktitle> <month> Sep </month> <year> 1993. </year>
Reference-contexts: It has been suggested that load shedding may be combined with application-implemented adaptive control to provide good continuous media performance without the need for user-specified resource requirements [7]. Such techniques have already been demonstrated to be effective for handling network congestion <ref> [8, 9] </ref>. This paper explores the effects of competitive process load upon the otherwise smooth operation of a multi-process video playback application on a non-real-time operating system.
Reference: 9. <author> V. Jacobson, </author> <title> "Congestion Avoidance and Control," </title> <booktitle> Proc. SIGCOMM '88, </booktitle> <month> Aug </month> <year> 1988. </year>
Reference-contexts: It has been suggested that load shedding may be combined with application-implemented adaptive control to provide good continuous media performance without the need for user-specified resource requirements [7]. Such techniques have already been demonstrated to be effective for handling network congestion <ref> [8, 9] </ref>. This paper explores the effects of competitive process load upon the otherwise smooth operation of a multi-process video playback application on a non-real-time operating system.
Reference: 10. <author> S. McCanne and V. Jacobson, </author> <title> VIC: Video Conference. </title> <institution> U.C. Berkeley and Lawrence Berkeley Laboratory. </institution> <note> Software available via ftp://ftp.ee.lbl.gov/conferencing/vic. </note>
Reference-contexts: To alleviate this problem, we propose a modified design and present measurements that demonstrate the efficacy of our approach. 2 Current Architecture To investigate the effect of competitive process load on the operation of a continuous media application, we instrumented the UCB/LBL video conferencing application, vic <ref> [10] </ref>. The basic architecture is illustrated Fig. 1. Receive data path processing in vic. in Figure 1. Packets containing encoded video arrive from the network and are reassembled into encoding-specific framing units, which are decoded by a software or hardware codec. The decoded frames are then rendered and displayed.
Reference: 11. <author> S. Floyd and V. Jacobson, </author> <title> "Random Early Detection Gateways for Congestion Avoidance," </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> vol. 1, </volume> <pages> pp. 397-413, </pages> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: We term the latter method drop-on-overload, because load is shed well after the system is heavily saturated. The distinction between drop-on-overload and EDLS is analogous to that between drop-tail and random-early drop (RED) gateways <ref> [11] </ref> in packet networks. Here, drop-tail routers react to load by dropping packets only after their queues are full, while RED gateways attempt to react incipient congestion before the router becomes overloaded. 4 Results are observed results from our experiments.
References-found: 11

