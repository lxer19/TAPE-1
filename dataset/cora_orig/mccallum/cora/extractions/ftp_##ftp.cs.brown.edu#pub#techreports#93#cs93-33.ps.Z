URL: ftp://ftp.cs.brown.edu/pub/techreports/93/cs93-33.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-93-33.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> Craig Chambers. </author> <title> The Design and Implementation of the Self Compiler, an Optimizing Compiler for Object-Oriented Progamming Languages. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1992. </year>
Reference-contexts: Here, we present the design of a generic graphics system, not its implementation. Research indicates that the mechanisms we use can be implemented efficiently <ref> [1] </ref>, but whether efficiently enough to satisfy the performance needs of the graphics community is a topic for future research. Graphics applications, especially interactive applications, make use of editable objects that share information in editable ways.
Reference: [2] <author> Craig Chambers. </author> <title> Object-oriented multi-methods in Cecil. </title> <booktitle> In Proceedings of ECOOP, </booktitle> <year> 1992. </year>
Reference-contexts: This form of multiple-dispatch is derived from that presented for the Cecil programming language, which supports multi-methods <ref> [2] </ref>. However, Cecil is a complete programming language, whereas we propose an object model that could be implemented in numerous programming languages. Cecil thus addresses a broader spectrum of applications, including an incremental typing facility that seems to be unnecessary for graphics (and is not included in this design).
Reference: [3] <author> D. Brookshire Conner, Scott S. Snibbe, Kenneth P. Herndon, Daniel C. Robbins, Robert C. Zeleznik, and Andries van Dam. </author> <title> Three-dimensional widgets. </title> <editor> In Marc Levoy and Edwin E. Catmull, editors, </editor> <booktitle> Proceedings of the 1992 Symposium on Interactive Three-Dimensional Graphics, </booktitle> <pages> pages 183-188. </pages> <publisher> ACM SIGGRAPH, </publisher> <month> March </month> <year> 1992. </year> <month> 14 </month>
Reference-contexts: Ideally, both operations should be performed by an abstract snap method on two generic objects. Clearly, this cannot be performed by a singly polymorphic object system. 2.3.7 Future systems As more and more applications provide more dynamic, interactive, graphical interfaces, the demands on future graphics systems will increase [8] <ref> [3] </ref>. They will have to support objects that in one interactive session may change appearance and behavior, and change internal representation to perform at optimal speeds. Complex graphics systems that provide several mechanisms where one simple mechanism would suffice will unnecessarily complicate the implementation of such applications.
Reference: [4] <author> D. Brookshire Conner and Andries van Dam. </author> <title> Sharing between graphical objects using delegation. </title> <booktitle> In Proceedings of the 1992 Workshop on Object-Oriented Graphics, </booktitle> <year> 1992. </year> <note> To be published. </note>
Reference-contexts: For this reason, previous work indicated that a delegation-based object model, with its dynamic, changing patterns of sharing, was better suited to graphics than a class-based object model <ref> [4] </ref>. This paper, in addition to reaffirming that point, describes in more detail how delegation can implement various sharing mechanisms used in graphics systems. The method lookup required by graphics is also shown to be inherently multiply polymorphic. <p> Graphics systems today are already too complex to learn easily. To make these highly interactive applications possible, we must make graphics systems at once simpler and more flexible. 8 3 The Design In Section 2.3 and previous work <ref> [4] </ref>, we saw that many graphics systems attempt to provide attributes that can be shared among primitives in a changeable, object-by-object basis. 1 We further saw that graphics systems try to provide extensible sets of operations on primitives, and that these operations often act on several primitives at once.
Reference: [5] <author> Conal Elliott, Greg Schechter, Salim Abi-Ezzi, and Michael Deering. TBAG: </author> <title> Time, Behavior, and Geometry. Unpublished, 1991. Sun Microsystems internal document. </title>
Reference-contexts: Anticipating this development, recent research has presented object-oriented systems for three-dimensional interaction, including Brown University's UGA system [20], SGI's IRIS Inventor [16], and Sun's TBAG <ref> [5] </ref>. 2.2 What do graphics systems provide? All graphics systems provide three basic entities: * primitives * attributes * actions to apply to the primitives Primitives are the obvious objects in a graphics system. They include polygons, lines, points, and other geometric shapes.
Reference: [6] <author> James Foley, Andries van Dam, Steven Feiner, and John Forbes Hughes. </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice. </booktitle> <publisher> Addison Wesley, </publisher> <address> second edition, </address> <year> 1990. </year>
Reference-contexts: This solution is not a magic bullet: someone still has to write the particular implementations of primitives and operations on them, although this task is in the domain of well-understood problems <ref> [6] </ref>.
Reference: [7] <author> Tom Gaskins. </author> <title> PHIGS Programming Manual. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <year> 1992. </year>
Reference-contexts: These include the X Window System and toolkits written for it, such as Motif [13] and Interviews [19], the PostScript programming language, Garnet [11], and the Macintosh Toolbox. Some graphics libraries are tailored to more specific tasks, such as image composition and three-dimensional rendering, as provided by PHIGS <ref> [7] </ref>, GL [14], and Dore [9]. These packages are currently targeted at relatively limited application domains, such as CAD/CAM.
Reference: [8] <author> Mark Green and Robert Jacob. </author> <title> SIGGRAPH '90 workshop report: Software architectures and metaphors for non-WIMP user interfaces. </title> <journal> Computer Graphics, </journal> <volume> 25(3) </volume> <pages> 229-235, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Ideally, both operations should be performed by an abstract snap method on two generic objects. Clearly, this cannot be performed by a singly polymorphic object system. 2.3.7 Future systems As more and more applications provide more dynamic, interactive, graphical interfaces, the demands on future graphics systems will increase <ref> [8] </ref> [3]. They will have to support objects that in one interactive session may change appearance and behavior, and change internal representation to perform at optimal speeds. Complex graphics systems that provide several mechanisms where one simple mechanism would suffice will unnecessarily complicate the implementation of such applications.
Reference: [9] <author> Kubota Pacific, Inc. </author> <title> Dore Programmer's Manual, </title> <year> 1992. </year>
Reference-contexts: Some graphics libraries are tailored to more specific tasks, such as image composition and three-dimensional rendering, as provided by PHIGS [7], GL [14], and Dore <ref> [9] </ref>. These packages are currently targeted at relatively limited application domains, such as CAD/CAM. However, much as 2D graphical interfaces became widespread when 2D screen technology became sufficiently advanced, we believe that 3D graphical interfaces will become widespread as 3D rendering hardware becomes a commodity feature. <p> Order of attributes within a structure (as well as all previous attributes encountered in the hierarchy) determines which attributes apply to a primitive. PHIGS offers a strictly closed set of primitives, attributes, and operations. Some improvements on PHIGS, notably Dore <ref> [9] </ref>, provide limited forms of extensibility, allowing additional primitives, attributes and operations.
Reference: [10] <author> Brad A. Myers. </author> <title> User-interface tools: Introduction and survey. </title> <journal> IEEE Software, </journal> <pages> pages 15-23, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: Instead, we propose a model designed specifically to address the needs of graphics. Object orientation has much to offer graphics. It is widely acknowledged that graphics programming, especially interactive graphics programming, requires a lot of code <ref> [10] </ref>. Graphics problems are often complex, involving many special cases. Code to implement the interface of modern graphical applications is often half or more of the application's code. In addition, graphical applications are more common now than ever before.
Reference: [11] <author> Brad A. Myers, Dario A. Guise, Roger B. Dannenberg, Brad Vander Zanden, David S. Kosbie, Edward Pervin, Andrew Mickish, and Philippe Marchal. Garnet: </author> <title> Comprehensive support for graphical, highly interactive user interfaces. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 71-85, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Most modern applications have graphical user interfaces, typically two-dimensional. Thus, there are a variety of graphics libraries supporting 2D drawing and interac 3 tion. These include the X Window System and toolkits written for it, such as Motif [13] and Interviews [19], the PostScript programming language, Garnet <ref> [11] </ref>, and the Macintosh Toolbox. Some graphics libraries are tailored to more specific tasks, such as image composition and three-dimensional rendering, as provided by PHIGS [7], GL [14], and Dore [9]. These packages are currently targeted at relatively limited application domains, such as CAD/CAM.
Reference: [12] <author> Brad A. Myers, Dario A. Guise, and Brad Vander Zanden. </author> <title> Declarative programming in a prototype-instance system: Object-oriented programming without writing methods. </title> <booktitle> In Proceedings of OOPSLA, </booktitle> <pages> pages 184-200, </pages> <year> 1992. </year>
Reference-contexts: It uses a delegation-based object system with one-way constraints between attributes of objects <ref> [12] </ref>. Delegation was used in Garnet because standard class-instance models (such as CLOS) were found to be insufficiently flexible. However, delegation is used primarily to support primitives as classes or exemplars.
Reference: [13] <institution> Open Software Foundation. </institution> <note> OSF/Motif Reference Guide. </note>
Reference-contexts: Most modern applications have graphical user interfaces, typically two-dimensional. Thus, there are a variety of graphics libraries supporting 2D drawing and interac 3 tion. These include the X Window System and toolkits written for it, such as Motif <ref> [13] </ref> and Interviews [19], the PostScript programming language, Garnet [11], and the Macintosh Toolbox. Some graphics libraries are tailored to more specific tasks, such as image composition and three-dimensional rendering, as provided by PHIGS [7], GL [14], and Dore [9].
Reference: [14] <institution> Silicon Graphics, Inc. </institution> <note> GL Programmer's Manual. 15 </note>
Reference-contexts: Some graphics libraries are tailored to more specific tasks, such as image composition and three-dimensional rendering, as provided by PHIGS [7], GL <ref> [14] </ref>, and Dore [9]. These packages are currently targeted at relatively limited application domains, such as CAD/CAM. However, much as 2D graphical interfaces became widespread when 2D screen technology became sufficiently advanced, we believe that 3D graphical interfaces will become widespread as 3D rendering hardware becomes a commodity feature.
Reference: [15] <author> Lynn Andrea Stein, Henry Lieberman, and David Ungar. </author> <title> A shared view of sharing: The treaty of Orlando. </title> <editor> In Won Kim and Frederick H. Lochovsky, editors, </editor> <title> Object-Oriented Concepts, Databases, and Applications, </title> <publisher> ACM Press Frontier Series. ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: dispatch of operations performed on primitives We now consider the nature of these traits in graphics systems, and then go through the potential advantages of these traits gained for graphics systems, both separately and in combination. 1 In terms of the "Treaty of Orlando", this is dynamic, implicit, per-object sharing <ref> [15] </ref>. 9 3.1 The basic object model We begin by examining the nature of the object model without inheritance.
Reference: [16] <author> Paul S. Strauss and Rikk Carey. </author> <title> An object-oriented 3D graphics toolkit. </title> <editor> In Edwin E. Catmull, editor, </editor> <booktitle> SIGGRAPH '92 Conference Proceedings, </booktitle> <pages> pages 341-349. </pages> <publisher> ACM SIGGRAPH, Addison-Wesley, </publisher> <month> July </month> <year> 1992. </year>
Reference-contexts: Anticipating this development, recent research has presented object-oriented systems for three-dimensional interaction, including Brown University's UGA system [20], SGI's IRIS Inventor <ref> [16] </ref>, and Sun's TBAG [5]. 2.2 What do graphics systems provide? All graphics systems provide three basic entities: * primitives * attributes * actions to apply to the primitives Primitives are the obvious objects in a graphics system. They include polygons, lines, points, and other geometric shapes.
Reference: [17] <author> David Ungar and Randall B. Smith. </author> <title> Self: The power of simplicity. </title> <booktitle> In OOPSLA '87 Conference Proceedings, </booktitle> <pages> pages 227-241, </pages> <year> 1987. </year> <note> Published as SIGPLAN Notices, 22, 12 (1987). </note>
Reference-contexts: One-way constraints are another mechanism provided by Garnet. However, one-way constraints can be handled trivially in a delegation system like the Self programming language <ref> [17, 18] </ref> by simply resending a message. Garnet places a great deal of emphasis on declarative programming, which solves a recurrent problem in graphics programming: the order of operations. Most graphics systems use the order of attributes to determine which attribute to use for a primitive. <p> In a traditional object-oriented system, a method (that is, a specific response to a message) is associated with one and only one object, whether that object is a class, as in class-instance systems, or a prototype, as in delegation systems like Self <ref> [17, 18] </ref>. As we have seen, this is insufficient to support the operations applied to primitives in graphics systems, which choose code based on several objects, not just one. Thus, in our design, methods are associated with not one object but with a set of objects.
Reference: [18] <author> David Ungar and Randall B. Smith. </author> <title> Self: The power of simplicity. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 4(3), </volume> <year> 1991. </year>
Reference-contexts: One-way constraints are another mechanism provided by Garnet. However, one-way constraints can be handled trivially in a delegation system like the Self programming language <ref> [17, 18] </ref> by simply resending a message. Garnet places a great deal of emphasis on declarative programming, which solves a recurrent problem in graphics programming: the order of operations. Most graphics systems use the order of attributes to determine which attribute to use for a primitive. <p> In a traditional object-oriented system, a method (that is, a specific response to a message) is associated with one and only one object, whether that object is a class, as in class-instance systems, or a prototype, as in delegation systems like Self <ref> [17, 18] </ref>. As we have seen, this is insufficient to support the operations applied to primitives in graphics systems, which choose code based on several objects, not just one. Thus, in our design, methods are associated with not one object but with a set of objects.
Reference: [19] <author> John M. Vlissides and Mark A. Linton. Unidraw: </author> <title> a framework for building domain-specific graphical editors. </title> <booktitle> In Proceedings of the ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 158-167, </pages> <year> 1989. </year>
Reference-contexts: Most modern applications have graphical user interfaces, typically two-dimensional. Thus, there are a variety of graphics libraries supporting 2D drawing and interac 3 tion. These include the X Window System and toolkits written for it, such as Motif [13] and Interviews <ref> [19] </ref>, the PostScript programming language, Garnet [11], and the Macintosh Toolbox. Some graphics libraries are tailored to more specific tasks, such as image composition and three-dimensional rendering, as provided by PHIGS [7], GL [14], and Dore [9]. These packages are currently targeted at relatively limited application domains, such as CAD/CAM.
Reference: [20] <author> Robert C. Zeleznik, D. Brookshire Conner, Matthias W. Wloka, Daniel G. Aliaga, Nate Huang, Phillip M. Hubbard, Brian Knep, Henry Kaufman, John F. Hughes, and Andries van Dam. </author> <title> An object-oriented framework for the integration of interactive animation techniques. </title> <editor> In Thomas W. Sederberg, editor, </editor> <booktitle> SIGGRAPH '91 Conference Proceedings, </booktitle> <pages> pages 105-112. </pages> <publisher> ACM SIGGRAPH, Addison-Wesley, </publisher> <month> July </month> <year> 1991. </year>
Reference-contexts: However, much as 2D graphical interfaces became widespread when 2D screen technology became sufficiently advanced, we believe that 3D graphical interfaces will become widespread as 3D rendering hardware becomes a commodity feature. Anticipating this development, recent research has presented object-oriented systems for three-dimensional interaction, including Brown University's UGA system <ref> [20] </ref>, SGI's IRIS Inventor [16], and Sun's TBAG [5]. 2.2 What do graphics systems provide? All graphics systems provide three basic entities: * primitives * attributes * actions to apply to the primitives Primitives are the obvious objects in a graphics system.
Reference: [21] <author> Robert C. Zeleznik, Kenneth P. Herndon, Daniel C. Robbins, Nate Huang, Tom Meyer, Noah Parker, and John F. Hughes. </author> <title> A toolkit for interactive construction of 3D interfaces. </title> <booktitle> In SIGGRAPH '93 Conference Proceedings. ACM SIGGRAPH, </booktitle> <publisher> Addison-Wesley, </publisher> <month> July </month> <year> 1993. </year> <note> Video paper. Submitted for publication. 16 implemented as a subclass of a generic drawableObject class. 17 </note>
Reference-contexts: Its object system is singly polymorphic. Recent work describes an interactive way to build richly interactive three-dimensional objects <ref> [21] </ref> by snapping and constraining simpler objects to one another. However, determining the behavior of two objects snapped to each other depends on the types of both objects. For example, snapping a point to a plane asserts different constraints from snapping a point to a line.
References-found: 21

