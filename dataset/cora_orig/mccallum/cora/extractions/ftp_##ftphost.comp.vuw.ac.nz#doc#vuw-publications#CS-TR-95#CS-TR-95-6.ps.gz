URL: ftp://ftphost.comp.vuw.ac.nz/doc/vuw-publications/CS-TR-95/CS-TR-95-6.ps.gz
Refering-URL: http://www.progsoc.uts.edu.au/~geldridg/cpp/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Object-Oriented Programming and Reusability  
Phone: Tel: +64 4 471 5328 Fax: +64 4 495 5232  
Author: Robert Biddle, Ewan Tempero, and Peter Andreae 
Note: Internet: Tech.Reports@comp.vuw.ac.nz  
Address: PO Box 600 Wellington New Zealand  
Affiliation: VICTORIA UNIVERSITY OF WELLINGTON VUW Department of Computer Science  
Abstract: Technical Report CS-TR-95/6 July 25, 1995 Abstract Some recent commentaries have suggested that Object-Oriented Programming has not been successful in increasing the productivity of software engineers. The main argument is that the object structure is not sufficiently reusable in different contexts. Alternative strategies involving "software components" have been proposed. In this paper, we explore the connection between object-oriented programming and reusability. We show that object-oriented programming does support design for reusability, but does so in ways that are not well understood. The designer must make careful decisions with reusability in mind, and in particular must include consideration of reusability in the process of class identification and class organisation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Peter Andreae, Robert Biddle, and Ewan Tempero. </author> <title> Understanding code reusability: Experience with C and C++. </title> <journal> New Zealand Journal of Computing, </journal> <volume> 5(2) </volume> <pages> 23-38, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: Three important properties of code that make it more reusable <ref> [1] </ref> are generality, flexibility, and safety. Generality is about structuring the component so that details of its behaviour can be customised (for example parameters to procedures). Flexibility is about minimising the requirements of the context on what component is appropriate (for example, overloading of procedure names).
Reference: [2] <author> T. J Biggerstaff and A. J Perlis, </author> <title> editors. </title> <booktitle> Software Reusability, </booktitle> <volume> volume 1. </volume> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: Most definitions of software reuse involve some variation of "the use of engineering knowledge or artifacts from existing systems to build new ones" [4]. This definition encompasses many diverse areas, from application generators, to domain analysis, to design patterns, to classification and search, to management <ref> [11, 2] </ref>. However there has been almost no discussion in any of these areas on how to use OOP effectively for the creation of reusable code.
Reference: [3] <author> Grady Booch. </author> <title> Object-Oriented Analysis and Design with Applications. </title> <journal> Ben-jamin/Cummings, </journal> <note> second edition, </note> <year> 1994. </year>
Reference: [4] <author> William Frakes and Sadahiro Isoda. </author> <title> Success factors for systematic reuse. </title> <journal> IEEE Software, </journal> <pages> pages 14-22, </pages> <month> September </month> <year> 1994. </year> <month> 9 </month>
Reference-contexts: Adding to the confusion is the fact that the area of "software reuse" is very broad. Most definitions of software reuse involve some variation of "the use of engineering knowledge or artifacts from existing systems to build new ones" <ref> [4] </ref>. This definition encompasses many diverse areas, from application generators, to domain analysis, to design patterns, to classification and search, to management [11, 2]. However there has been almost no discussion in any of these areas on how to use OOP effectively for the creation of reusable code.
Reference: [5] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley Professional Computing Series. Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Another common exhortation to programmers is "design for reuse!" Here at least there are clearer guidelines as to what approaches to take (see for example <ref> [5] </ref>). However, such guidelines, while they may be presented in the context of OOP, do not explain how OOP helps (or hinders) in the implementation of such designs. Even good expositions of object technology that discuss design for reuse ([3]) seldom discuss how to use OOP effectively in this regard.
Reference: [6] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk-80: The Language and its implementation. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year> <note> Reprinted with corrections, </note> <month> July </month> <year> 1985. </year>
Reference-contexts: In this way, the reusability of the container may be combined with the reusability of context code that uses objects held by the container. Some OOP languages do not provide genericity (Smalltalk <ref> [6] </ref>, for example), and inheritance is used by itself to address the issue of container reusability. In this approach, a container class is constructed to hold objects described by an inheritance hierarchy that encompasses all classes of objects that the container might hold.
Reference: [7] <author> Scott Henninger. </author> <title> Using iterative refinement to find reusable software. </title> <journal> IEEE Software, </journal> <pages> pages 48-60, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: Although the first two steps are important <ref> [10, 7] </ref>, it is the last that has the biggest impact on the reusability of software | a component that requires an editor to make it useful is not a very reusable one. Three important properties of code that make it more reusable [1] are generality, flexibility, and safety.
Reference: [8] <author> Michael Jackson. </author> <title> System Development. </title> <booktitle> Series in Computer Science. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1983. </year>
Reference-contexts: Although both elements are always involved, much of the time program design has been more concerned with one than the other. For a long time, the design of control structure was the primary concern; some later techniques such as "Jackson Structured Programming" <ref> [8] </ref> shifted the emphasis to data structure design. OOP can be seen as a synthesis of the two approaches. In organising control, we started with only the branching, structure and developed some very complicated programs.
Reference: [9] <author> Bertrand Meyer. </author> <title> Genericity versus inheritance. </title> <editor> In Norman Meyrowitz, editor, </editor> <booktitle> 1986 Object-Oriented Programming Systems, Languages, and Applications Conference Proceedings, </booktitle> <pages> pages 291-405, </pages> <month> October </month> <year> 1986. </year> <journal> Published as ACM SIGPLAN Notices, </journal> <volume> 21(11), </volume> <month> November </month> <year> 1986. </year>
Reference-contexts: As Meyer has said: ": : : any acceptable solution must in the end be expressible in terms of programs, and programming languages fundamentally shape the software designers' way of thinking" <ref> [9] </ref>. This means that whatever programming language is used must have features that allow the creation of reusable code, and those features must be properly used.
Reference: [10] <author> Bertrand Meyer. </author> <title> Lessons from the design of the Eiffel libraries. </title> <journal> Communications of the ACM, </journal> <volume> 33(9) </volume> <pages> 69-88, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Although the first two steps are important <ref> [10, 7] </ref>, it is the last that has the biggest impact on the reusability of software | a component that requires an editor to make it useful is not a very reusable one. Three important properties of code that make it more reusable [1] are generality, flexibility, and safety.
Reference: [11] <institution> IEEE Software. </institution> <note> Special issue on systematic reuse, </note> <month> September </month> <year> 1994. </year>
Reference-contexts: Most definitions of software reuse involve some variation of "the use of engineering knowledge or artifacts from existing systems to build new ones" [4]. This definition encompasses many diverse areas, from application generators, to domain analysis, to design patterns, to classification and search, to management <ref> [11, 2] </ref>. However there has been almost no discussion in any of these areas on how to use OOP effectively for the creation of reusable code.
Reference: [12] <author> Bjarne Stroustrup. </author> <title> The design of C++. </title> <booktitle> The Distinguished Lecture Series VIII (video), </booktitle> <publisher> University Video Communications, </publisher> <month> March </month> <year> 1994. </year>
Reference-contexts: Even good expositions of object technology that discuss design for reuse ([3]) seldom discuss how to use OOP effectively in this regard. Some go so far as to say reusability is not directly connected to OOP at all <ref> [12] </ref>, but that it is solely due to good design. Adding to the confusion is the fact that the area of "software reuse" is very broad. Most definitions of software reuse involve some variation of "the use of engineering knowledge or artifacts from existing systems to build new ones" [4].
Reference: [13] <author> Will Tracz. </author> <title> Software reuse maxims. </title> <journal> ACM Software Engineering Notes, </journal> <volume> 13(4) </volume> <pages> 28-31, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: However there has been almost no discussion in any of these areas on how to use OOP effectively for the creation of reusable code. While there are many important parts to the process of reusing software, in the end there has to be code to reuse <ref> [13] </ref> and it must be in a form amenable to reuse | the fact that the design is reusable does not mean the the code that results from it will be reusable.
Reference: [14] <author> Jon Udell. </author> <title> Componentware. </title> <journal> BYTE, </journal> <pages> pages 47-56, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Proponents of object-oriented programming (OOP) claim it as the solution to the creation of reusable software, the holy grail of software engineering. Now however, some commentaries suggest it has not lived up to expectations ("Object technology failed to deliver on the promise of reuse." <ref> [14] </ref>). It is true that the amount of reusable software is not as high as the marketing hype associated with the object-oriented bandwagon has led us to expect.
Reference: [15] <author> David Ungar and Randall B. Smith. </author> <title> Self: The power of simplicity. </title> <booktitle> In 1987 Object-Oriented Programming Systems, Languages, and Applications Conference Proceedings, </booktitle> <pages> pages 227-242, </pages> <year> 1987. </year> <note> Published as ACM SIGPLAN Notices 22(12), </note> <month> December </month> <year> 1987. </year> <month> 10 </month>
Reference-contexts: In the real world, however, there are many ways to classify things, and the ways are not always consistent. Some OOP languages (such as Self <ref> [15] </ref>) allow dynamic organisation of objects; others (such as C++) require the programmer to deal will classification conflicts at the design stage, and make classes explicit in the program | this typically allows more efficient implementation.
References-found: 15

