URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/290a93.S.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu:80/~shiple/publications/index.html
Root-URL: http://www.cs.berkeley.edu
Title: Survey of Equivalences for Transition Systems  
Author: Thomas R. Shiple 
Note: EE290A: Discrete Event Systems  
Date: May 19, 1993  
Address: Berkeley, CA 94720  
Affiliation: Department of EECS, University of California,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. C. Browne, E. M. Clarke, and O. Grumberg. </author> <title> Characterizing Kripke structures in temporal logic. </title> <type> Technical Report CS 87-104, </type> <institution> Department of Computer Science, Carnegie Mellon University, </institution> <year> 1987. </year>
Reference-contexts: Sifikas proceeds to show that an equivalence he defines, similar to Milner's weak bisimulation, strongly preserves a subset of CTL. Browne, Clarke, and Grumberg <ref> [1] </ref> have also investigated the notion of property preservation. They use Kripke structures to model systems. A Kripke structure does not have edge labels; instead, each state is labeled by a subset of atomic propositions AP .
Reference: [2] <author> R. de Nicola and M. C. B. Hennessy. </author> <title> Testing equivalence for processes. </title> <journal> Journal of Theoretical Computer Science, </journal> <volume> 34(1) </volume> <pages> 83-133, </pages> <year> 1984. </year>
Reference-contexts: For state transition graphs, failure equivalence is the same as the testing equivalence of De Nicola and Hennesy <ref> [2] </ref>. 2.3.4 Readiness This equivalence is very similar to failure equivalence, except now we list exactly the actions which are ready to be performed at the end of any run.
Reference: [3] <author> David L. Dill, Alan J. Hu, and Howard Wong-Toi. </author> <title> Checking for language inclusion using simulation preorders. </title> <booktitle> In Proc. Third Workshop on Computer-Aided Verification, </booktitle> <year> 1991. </year>
Reference-contexts: In verification, it may be sufficient to know that the behavior of an implementation, is contained in the specification; equivalence is too strong of a condition. Dill, Hu, and Wong-Toi <ref> [3] </ref> use simulation preorders to approximate trace inclusion. They define a safety simulation relation, which is essentially the simulation defined in Section 2.3.7.
Reference: [4] <author> J. C. Fernandez, A. Kerbrat, and L. Mounier. </author> <title> Symbolic equivalence checking. </title> <booktitle> In Proc. Fifth Workshop on Computer-Aided Verification, </booktitle> <year> 1993. </year>
Reference-contexts: Another equivalence is the weak bisimulation of Fernandez <ref> [4] </ref>, which requires an action on t fl a to be matched by an action on t fl a, using exactly the same number of t 's. <p> The idea is to apply minimization before each composition step to yield an equivalent, yet smaller product machine <ref> [4] </ref>. However, this works only if the equivalence used for minimization is congruent with respect to composition. 5 Conclusion I have presented in this paper a number of equivalences for state transition graphs. Many more equivalences have been presented in the literature for more general models.
Reference: [5] <author> Abraham Ginzburg. </author> <title> Algebraic Theory of Automata. </title> <publisher> Academic Press, </publisher> <address> New York and London, </address> <year> 1968. </year>
Reference-contexts: There is a long history of equivalences for transition systems. The notion of trace equivalence of automata probably arose early in the development of automata theory. Ginzburg <ref> [5] </ref> introduced in 1968 the concept of weak homomorphisms, which essentially is the notion that the behavior of one system covers that of another. Park [9] is credited with developing the concept of bisimulation in 1981. Most of the equivalences discussed here have been proposed since 1981.
Reference: [6] <author> M. C. B. Hennessy and Robin Milner. </author> <title> On observing nondeterminism and concurrency. </title> <editor> In J. de Bakker and J. van Leeuwen, editors, </editor> <booktitle> Proceedings of the International Colloquium on Automata, Languages, and Programming (ICALP), volume 85 of Lecture Notes in Computer Science, </booktitle> <pages> pages 299-309. </pages> <publisher> Springer-Verlag, </publisher> <year> 1980. </year>
Reference-contexts: That is, the following clause is added to the definition of simulation formulas to yield the set of bisimulation formulas L B : 4. If 62 L B , then : 2 L B . 4. s j= : if s 6j= . This is known as Hennessy-Milner logic <ref> [6] </ref>. The set of bisimulation formulas that are satisfied by state s is denoted by B (s). The states s and t are bisimulation equivalent, or bisimilar, if B (s) = B (t).
Reference: [7] <author> Paris C. Kanellakis and Scott A. Smolka. </author> <title> CCS expressions, finite state processes, and three problems of equivalence. </title> <journal> Information and Computation, </journal> <volume> 86(1) </volume> <pages> 43-68, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: In the case of nondeterministic STGs, I was not able to find complexity results for all the presented equivalences. However, it is known that trace and failure equivalence are PSPACE-complete <ref> [7] </ref>. On the other hand, it is known that bisimulation equivalence is polynomial. I conjecture that all the "linear-time equivalences" (from ready trace and below) are PSPACE-complete, and the "branching-time equivalences" (bisimulation, ready simulation, and simulation) are polynomial. Some rational for this conjecture can be seen by examining Figure 1.
Reference: [8] <author> Robin Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: Sequential means that the system can perform at most one action at a time: there are not systems running in parallel, and thus, the type of communication is not an issue. Concrete means that there are no silent, or internal, actions (Milner's "t " <ref> [8] </ref>): all actions are treated equally. Lastly, finitely branching means that each state has only a finite number of next states. In this case, for the equivalences studied, if two systems can be distinguished by their infinite behavior, then they can be distinguished by their finite behavior. <p> There are several equivalences in the literature that coincide with bisimulation for state transition graphs, but differ when a silent action (t ) is present. Strong bisimulation does not distinguish t , and thus is the bisimulation in this paper. The weak bisimulation of Milner <ref> [8] </ref> ignores t : an action on a 6= t can be matched by an action on the string t fl at fl , and an action on t can be matched by an action on t fl .
Reference: [9] <author> David Park. </author> <title> Concurrency and automata on infinite sequences. </title> <editor> In Peter Deussen, editor, </editor> <booktitle> Theoretical Computer Science, volume 104 of Lecture Notes in Computer Science, </booktitle> <pages> pages 167-183. </pages> <publisher> Springer-Verlag, </publisher> <month> March </month> <year> 1981. </year>
Reference-contexts: The notion of trace equivalence of automata probably arose early in the development of automata theory. Ginzburg [5] introduced in 1968 the concept of weak homomorphisms, which essentially is the notion that the behavior of one system covers that of another. Park <ref> [9] </ref> is credited with developing the concept of bisimulation in 1981. Most of the equivalences discussed here have been proposed since 1981. In Section 2, I describe many of the equivalences that have been proposed. This section broadly follows the presentation of van Glabbeek [14].
Reference: [10] <author> I. C. C. Phillips. </author> <title> Refusal testing. </title> <journal> Journal of Theoretical Computer Science, </journal> <volume> 50 </volume> <pages> 241-284, </pages> <year> 1987. </year>
Reference-contexts: Figures 4 and 5 together show that F T and R are not comparable. For state transition graphs, failure trace equivalence is the same as the refusal equivalence of Phillips <ref> [10] </ref>. As we move through the lattice from trace equivalence up to ready trace equivalence, we are allowed to gather more information about what other actions are possible (or impossible) along a run.
Reference: [11] <author> A. Pnueli. </author> <title> Linear and branching structures in the semantics and logics of reactive systems. </title> <editor> In W. Brauer, editor, </editor> <booktitle> Proceedings of the International Colloquium on Automata, Languages, and Programming (ICALP), volume 194 of Lecture Notes in Computer Science, </booktitle> <pages> pages 15-32. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Likewise, it is not true that S implies RS, since this would lead to S implies RT , which has already been disproved. Ready simulation equivalence is the same as the barbed equivalence of Pnueli <ref> [11] </ref>. 2.3.9 Bisimulation equivalence As van Glabbeek mentions, bisimulation is the "oldest and most powerful" equivalence "from which most others have been derived by omitting some of its features".
Reference: [12] <author> Alexander Rabinovich. </author> <title> Checking equivalences between concurrent systems of finite agents. </title> <editor> In W. Kuich, editor, </editor> <booktitle> Proceedings of the International Colloquium on Automata, Languages, and Programming (ICALP), volume 623 of Lecture Notes in Computer Science, </booktitle> <pages> pages 696-707. </pages> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1992. </year> <month> 15 </month>
Reference-contexts: When we move to this realm, checking any of the equivalences becomes PSPACE-hard <ref> [12] </ref>. Specifically, a problem instance is: two systems of communicating STGs, M = M 1 kM 2 k : : : kM k and N = N 1 kN 2 k : : : kN k .
Reference: [13] <author> Joseph Sifakis. </author> <title> Property preserving homomorphisms of transition systems. </title> <editor> In E. Clarke and D. Kozen, editors, </editor> <booktitle> Workshop on Logics of Programs, volume 164 of Lecture Notes in Computer Science, </booktitle> <pages> pages 458-473. </pages> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1983. </year>
Reference-contexts: However, notice that the definitions given above for the various equivalences make no mention of preserving sets of properties: Sifikas refers to these definitions as operational equivalences <ref> [13] </ref>. As Sifikas points out, each operational equivalence should be associated with a class of properties that the equivalence preserves. More precisely, let L be a logic for specifying properties.
Reference: [14] <author> R. J. van Glabbeek. </author> <title> The linear time branching time spectrum. </title> <editor> In J. C. M. Baeten and J. W. Klop, editors, </editor> <title> CONCUR '90, Theories of Concurrency: Unification and Extension, </title> <booktitle> volume 458 of Lecture Notes in Computer Science, </booktitle> <pages> pages 278-297. </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1990. </year> <month> 16 </month>
Reference-contexts: Park [9] is credited with developing the concept of bisimulation in 1981. Most of the equivalences discussed here have been proposed since 1981. In Section 2, I describe many of the equivalences that have been proposed. This section broadly follows the presentation of van Glabbeek <ref> [14] </ref>. Section 3 discusses the complexity of checking equivalences. <p> Van Glabbeek <ref> [14] </ref> cites four different axes of classification: 1. branching time vs. linear time: linear time does not distinguish two execution paths that differ only in the alternate paths seen, whereas branching time does. 2. internal vs. external actions: should internal actions of a system be hidden from observation, or treated equally <p> In other words, at each step in a run, we are allowed to completely explore all other possible runs: "Thus an observation yields a tree rather than a sequence of actions" <ref> [14] </ref>. 7 2.3.7 Simulation equivalence The weakest branching-time equivalence is simulation equivalence. The actions observed from a state using this equivalence can be coded as expressions in a simple language. Definition 2 The set L S of simulation formulas over is defined inductively by: 1. <p> Another equivalence is the weak bisimulation of Fernandez [4], which requires an action on t fl a to be matched by an action on t fl a, using exactly the same number of t 's. As a final example, van Glabbeek and Weijland <ref> [14] </ref> define branching bisimulation, where an action on a 6= t can be matched by an action on the string t fl a, and an action on t must be matched by an action on * (i.e. no action).
References-found: 14

