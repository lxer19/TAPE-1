URL: http://HTTP.CS.Berkeley.EDU/~padmanab/papers/www_fall94.ps
Refering-URL: 
Root-URL: 
Title: Improving HTTP Latency  
Author: Venkata N. Padmanabhan Jeffrey C. Mogul 
Affiliation: (University of California Berkeley)  (Digital Equipment Corporation Western Research Laboratory)  
Abstract: The HTTP protocol, as currently used in the World Wide Web, uses a separate TCP connection for each file requested. This adds significant and unnecessary overhead, especially in the number of network round trips required. We analyze the costs of this approach and propose simple modifications to HTTP that, while interoperating with unmodified implementations, avoid the unnecessary network costs. We implemented our modifications, and our measurements show that they dramatically reduce latencies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Tim Berners-Lee. </author> <title> Hypertext Transfer Protocol (HTTP). Internet Draft draft-ietf-iiir-http-00.txt, </title> <type> IETF, </type> <month> November, </month> <year> 1993. </year> <note> This is a working draft. </note>
Reference-contexts: When the network path is congested, queueing delays can increase the RTT by large factors. This means that, in order to avoid network latency, we must avoid round trips through the network. Unfortunately, the Hypertext Transport Protocol (HTTP) <ref> [1] </ref>, as it is currently used in the Web, incurs many more round trips than necessary. In this paper, we analyze that problem, and show that almost all of the unnecessary round trips may be eliminated by surprisingly simple changes to the HTTP protocol and its implementations. <p> Requests and responses are expressed in a simple ASCII format. The precise specification of HTTP is in a state of flux. Most existing implementations conform to <ref> [1] </ref>, a document which effectively no longer exists. A revision of the specification is in progress.
Reference: [2] <author> N. Borenstein and N. Freed. </author> <title> MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies. </title> <type> RFC 1521, </type> <institution> Internet Engineering Task Force, </institution> <month> September, </month> <year> 1993. </year>
Reference-contexts: If the ``Content-Length'' field is present, it indicates the size of the Data field and hence the end of the message. 2. The ``Content-Type'' field may specify a ``boundary'' delimiter, following the syntax for MIME multipart messages <ref> [2] </ref>. 3. The server (but not the client) may indicate the end of the message simply by closing the TCP connection after the last data byte. Later on we will explore the implications of the message termination mechanism. 3.
Reference: [3] <author> R. Braden. </author> <title> Requirements for Internet Hosts -- Communication Layers. </title> <type> RFC 1122, </type> <institution> Internet Engineering Task Force, </institution> <month> October, </month> <year> 1989. </year>
Reference-contexts: This last configuration reflects a widely-used technique meant to avoid IP fragmentation <ref> [3] </ref>; more modern practice could use the full available packet size [7]. In each configuration, we measured throughput for a large variety of connection lengths and a few popular TCP buffer (maximum window) sizes.
Reference: [4] <author> CompuServe, </author> <title> Incorporated. Graphics Interchange Format Standard. </title> <year> 1987. </year>
Reference-contexts: As we noted earlier, one sample showed a mean document size of about 13K bytes, and a median of under 2K bytes. About 45% of these retrievals were for Graphics Interchange Format <ref> [4] </ref> (GIF) files, used for both inline and out-of-line images. This sub-sample showed a slightly larger mean and a slightly smaller median; our guess is that the very large GIF files were not inlined images. The proposed use of JPEG for inlined images will tend to reduce these sizes.
Reference: [5] <author> Steven Glassman. </author> <title> A Caching Relay for the World Wide Web. </title> <booktitle> In Proceedings of the First International World-Wide Web Conference, </booktitle> <pages> pages 69-76. </pages> <address> Geneva, </address> <month> May, </month> <year> 1994. </year>
Reference-contexts: A server has no way of knowing which of the inlined images in a document are in the client's cache. Since the GETALL method causes the server to return all the images, this seems to defeat the purpose of the client's image cache (or of a caching relay <ref> [5] </ref>). GETALL is still useful in situations where the client knows that it has no relevant images cached (for example, if its cache contains no images from the server in question).
Reference: [6] <author> Van Jacobson. </author> <title> Congestion Avoidance and Control. </title> <booktitle> In Proc. SIGCOMM '88 Symposium on Communications Architectures and Protocols, </booktitle> <pages> pages 314-329. </pages> <address> Stanford, CA, </address> <month> August, </month> <year> 1988. </year>
Reference-contexts: The proposed use of JPEG for inlined images will tend to reduce these sizes. Unfortunately, TCP does not fully utilize the available network bandwidth for the first few round-trips of a connection. This is because modern TCP implementations use a technique called slow-start <ref> [6] </ref> to avoid network congestion. The slow-start approach requires the TCP sender to open its ``congestion window'' gradually, doubling the number of packets each round-trip time.
Reference: [7] <author> Jeffrey C. Mogul and Stephen Deering. </author> <title> Path MTU Discovery. </title> <type> RFC 1191, </type> <institution> Network Information Center, SRI International, </institution> <month> November, </month> <year> 1990. </year>
Reference-contexts: This last configuration reflects a widely-used technique meant to avoid IP fragmentation [3]; more modern practice could use the full available packet size <ref> [7] </ref>. In each configuration, we measured throughput for a large variety of connection lengths and a few popular TCP buffer (maximum window) sizes.
Reference: [8] <author> Jon B. Postel. </author> <title> Transmission Control Protocol. </title> <type> RFC 793, </type> <institution> Network Information Center, SRI International, </institution> <month> September, </month> <year> 1981. </year>
Reference-contexts: HTTP protocol elements We briefly sketch the HTTP protocol, to provide sufficient background for understanding the rest of this paper. We omit a lot of detail not directly relevant to HTTP latency. The HTTP protocol is layered over a reliable bidirectional byte stream, normally TCP <ref> [8] </ref>. Each HTTP interaction consists of a request sent from the client to the server, followed by a response sent from the server to the client. Requests and responses are expressed in a simple ASCII format. The precise specification of HTTP is in a state of flux. <p> It would be quite expensive to re-authenticate principals on each HTTP request. Although the TCP connections may be active for only a few seconds, the TCP specification requires that the host which closed the connection remember certain per-connection information for four minutes <ref> [8] </ref> (although many implementations do violate this specification and use a much shorter timer.) A busy server could end up with its tables full of connections in this ``TIME-WAIT'' state, either leaving no room for new connections, or perhaps imposing excessive connection table management costs.
Reference: [9] <author> J. Postel and J. Reynolds. </author> <title> Telnet Protocol Specification. </title> <type> RFC 854, </type> <institution> Network Information Center, SRI International, </institution> <month> May, </month> <year> 1983. </year>
Reference-contexts: on its way to the client: Boundary delimiter The server can safely insert a boundary delimiter (perhaps as simple as a single character) if it can examine the entire data stream and ``escape'' any instance of the delimiter that appears in the data (as is done in the Telnet protocol <ref> [9] </ref>). This requires both the server and client to examine each byte of data, which is clearly inefficient. Blocked data transmission protocol The server could read data from the script and send it to the client in arbitrary-length blocks, each preceded by a length indicator.

References-found: 9

