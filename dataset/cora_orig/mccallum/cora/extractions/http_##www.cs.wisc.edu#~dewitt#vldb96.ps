URL: http://www.cs.wisc.edu/~dewitt/vldb96.ps
Refering-URL: http://www.cs.wisc.edu/~dewitt/
Root-URL: 
Email: carey@almaden.ibm.com  dewitt@cs.wisc.edu  
Title: Of Objects and Databases: A Decade of Turmoil  
Author: Michael J. Carey David J. DeWitt 
Address: 650 Harry Road, K55/B1 San Jose, CA 95120  Madison, WI 53706  
Affiliation: IBM Almaden Research Center  Computer Sciences Department University of Wisconsin-Madison  
Abstract: A decade ago, the connection between ob jects and databases was new and was be ing explored in a number of different ways within our community. Driven by the per ception that managing traditional business data was largely a solved problem, projects were investigating ideas such as adding ab stract data types to relational databases and building extensible database systems, object oriented database systems, and toolkits for constructing special-purpose database sys tems. In addition, work was underway else where in the computer science research com munity on extending programming languages with database-inspired features such as persis tence and transactions. In this paper, we take a look at where our field was a decade ago and where it is now in terms of database support for objects (and vice versa). We look both at research projects and at commercial database products. We share our vision and our biases about the fu ture of objects and databases, and we identify a number of research challenges that remain to be addressed in order to ultimately achieve our vision. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the VLDB copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Very Large Data Base Endowment. To copy otherwise, or to republish, requires a fee and/or special permission from the Endowment. Proceedings of the 22nd VLDB Conference Mumbai(Bombay), India, 1996 
Abstract-found: 1
Intro-found: 1
Reference: [Andr87] <author> T. Andrews and C. Harris, </author> <title> "Combining Language and Database Advances in an Object Oriented Development Environment," </title> <booktitle> Proc. 1987 ACM OOPSLA Conference, </booktitle> <address> Orlando, FL, </address> <month> Oct. </month> <year> 1987. </year>
Reference-contexts: Three early OODB projects laid the foundation in this area Gem stone [Cope84, Maie86], which was based on Smalltalk, Vbase <ref> [Andr87] </ref>, which was based on a CLU-like lan guage, and Orion [Bane87], which was based on CLOS. Again, a major motivation was to reduce or elimi nate the impedance mismatch cited in our discussion of persistent programming language work.
Reference: [Atki87] <author> M. Atkinson and P. Buneman, </author> <title> "Types and Persistence in Database Programming Languages," </title> <journal> ACM Computing Surveys 19(2), </journal> <month> June </month> <year> 1987. </year>
Reference-contexts: Database system toolkits/components Research on extended relational database systems had been in progress for several years in 1986, and it was beginning to bear significant fruit [Ston86a]. Al though work on persistent programming languages had also been underway for some time in the programming languages community <ref> [Atki87] </ref>, work on applying those ideas to object-oriented languages was just taking off. Object-oriented database systems were a brand new idea, having just been born [Cope84], and nobody was quite sure what they should be yet. <p> A good survey of the state of this area as of a decade ago, when ob jects were entering the persistent language scene, can be found in <ref> [Atki87] </ref>. 1 In many respects, the recent "Third Manifesto" of Darwen and Date [Darw95] seems to be some combination of a rediscov ery and an elaboration of this approach.
Reference: [Atki90] <author> M. Atkinson et al, </author> <title> "The Object-Oriented Database System Manifesto," </title> <booktitle> Proc. 1st DOOD Conf., </booktitle> <address> Kyoto, Japan, </address> <year> 1989. </year>
Reference-contexts: One early milestone, which helped to focus both research and de velopment, was a general prescription developed by a collection of leading database system and language researchers for what constitutes an object-oriented database system <ref> [Atki90] </ref>. It was agreed that such sys tems must support all of the following: complex ob jects, object identity, encapsulation, inheritance and substitutability, late binding, computationally com plete methods, an extensible type system, persistence, secondary storage management, concurrency control, recovery, and ad hoc queries. <p> The path that object-relational database systems (as extended relational database systems are now known [Ston96]) have followed was foretold in a docu ment drafted by a different set of leading database re searchers [Comm90] in response to the "OODB Mani festo" cited earlier <ref> [Atki90] </ref>. This document gave three main tenets for so-called "third-generation" database systems: provide support for richer object structures and rules, subsume second generation (i.e., relational) DBMSs, and be open to other subsystems, e.g., tools and multidatabase middleware products.
Reference: [Bane87] <author> J. Banerjee et al, </author> <title> "Data Model Issues for Object-Oriented Applications," </title> <journal> ACM Trans. on Of fice Info. Sys. </journal> <volume> 5(1), </volume> <month> Jan. </month> <year> 1987. </year>
Reference-contexts: Three early OODB projects laid the foundation in this area Gem stone [Cope84, Maie86], which was based on Smalltalk, Vbase [Andr87], which was based on a CLU-like lan guage, and Orion <ref> [Bane87] </ref>, which was based on CLOS. Again, a major motivation was to reduce or elimi nate the impedance mismatch cited in our discussion of persistent programming language work.
Reference: [Bato86] <author> D. Batory et al, </author> <title> "GENESIS: A Project to Develop an Extensible Database Management Sys tem," </title> <booktitle> in [Ditt86]. </booktitle>
Reference-contexts: Such domain-appropriate DBMSs would likely have a number of fundamental differ ences, such as different query languages, different ac cess methods, different storage organizations, and per haps even different transaction mechanisms. Key projects representing this approach were our EXODUS project [Care86b], the GENESIS project <ref> [Bato86] </ref>, and the DASDBS project [Depp86].
Reference: [Blak96] <author> J. Blakeley, </author> <title> "Data Access for the Masses through OLE DB," </title> <booktitle> Proc. 1996 ACM SIGMOD Con ference, </booktitle> <address> Montreal, Canada, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Also looming on the horizon is Microsoft's OLE DB work <ref> [Blak96] </ref>, which offers an approach to separating query optimization from execution in a world where data lives elsewhere in addition to databases. We will comment further on OLE DB in Section 4.2.4. <p> This approach to legacy data is being explored in the Garlic project at the IBM Almaden Research Center [Care95], while semi-structured data is a focus of the TSIMMIS project at Stanford [Garc95]. Meanwhile, the Microsoft OLE DB work <ref> [Blak96] </ref> is also address ing this problem space, e.g., by defining the protocol for a query processor to use in talking to non-database data sources. 4.2.5 Standards In the area of standards, SQL3 is moving in the di rection that we have outlined, and it is drawing on OQL for inspiration
Reference: [Care86a] <author> M. Carey, D. DeWitt, J. Richardson, and E. Shekita, </author> <title> "Object and File Management in the EXODUS Extensible Database System," </title> <booktitle> Proc. 12th VLDB Conf., </booktitle> <address> Kyoto, Japan, </address> <month> Aug. </month> <year> 1986. </year>
Reference-contexts: Key projects representing this approach were our EXODUS project [Care86b], the GENESIS project [Bato86], and the DASDBS project [Depp86]. EXO DUS provided a storage manager for objects <ref> [Care86a] </ref> and provided a persistent programming language (E, based on C++) that was to be used for writing new access methods and query operators; it also provided a query optimizer generator for generating an opti mizer for a domain-appropriate query language from a rule-based language specification. <p> The future of objects and databases appears bright, yet much is left to do... 6 Acknowledgements Joel Richardson and Eugene Shekita were co-authors of the 1986 VLDB paper <ref> [Care86a] </ref> that led to our be ing invited to write this paper. We wish to thank them and the many other superb University of Wisconsin students, staff, and faculty colleagues who we've had the pleasure of working with on projects related to the topic of this paper.
Reference: [Care86b] <author> M. Carey et al, </author> <title> "The Architecture of the EXODUS Extensible DBMS," </title> <booktitle> in [Ditt86]. </booktitle>
Reference-contexts: Object-oriented database systems were a brand new idea, having just been born [Cope84], and nobody was quite sure what they should be yet. Finally, work on database system toolkits and component architectures, including our own EXODUS project <ref> [Care86b] </ref>, had also just begun. For those wishing to gain a deeper perspective into the field at that time, [Ditt86] pro vides an interesting and reasonably accurate snapshot of objects and databases as of 1986. A decade later, things are much clearer, at least in our view. <p> Such domain-appropriate DBMSs would likely have a number of fundamental differ ences, such as different query languages, different ac cess methods, different storage organizations, and per haps even different transaction mechanisms. Key projects representing this approach were our EXODUS project <ref> [Care86b] </ref>, the GENESIS project [Bato86], and the DASDBS project [Depp86].
Reference: [Care88] <author> M. Carey, D. DeWitt, and S. Vandenberg, </author> <title> "A Data Model and Query Language for EXODUS," </title> <booktitle> Proc. 1988 ACM SIGMOD Conference, </booktitle> <address> Chicago, IL, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: We ourselves put EXODUS to the test on what would now be characterized as an object-relational Page 4 data model (EXTRA) and query language (EXCESS) that we designed mid-way through the EXODUS project <ref> [Care88] </ref>. To make a long story short, we found that there was still way too much to do in building such a system to declare EXODUS as hav ing succeeded in that regard. <p> Object-relational database systems today suffer to some extent from the same problem that plagues OODB systems there are too many differences from 3 Notice that object-relational database systems have ended up adopting the "pointer spaghetti" approach that Postgres worked to avoid, but that were advocated and studied elsewhere, e.g., <ref> [Zani83, Care88] </ref>. 4 It is interesting to note that the foundation for many of the row type extensions predates the initial object revolution by several years, having been laid in part by efforts such as Daplex [Ship81] and GEM [Zani83]. vendor to vendor.
Reference: [Care94] <author> M. Carey et al, </author> <title> "Shoring Up Persistent Ap plications," </title> <booktitle> Proc. 1994 ACM SIGMOD Conf., </booktitle> <address> Min neapolis, MN, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: One common problem was that most wanted to use EXODUS to implement their own object servers; thus, the EXODUS storage man ager's client/server architecture tended to get in the way, introducing an unwanted level of indirection for their systems <ref> [Care94] </ref>. Some projects also made use of the E programming language, but "serious" database implementors would have preferred more control over low-level details (e.g., buffering, concurrency, recov ery), and application-oriented programmers found it a bit too low-level (no collections, queries, etc.).
Reference: [Care95] <author> M. Carey et al, </author> <title> "Towards Heterogeneous Multimedia Information Systems: </title> <booktitle> The Garlic Ap proach," Proc. 1995 IEEE RIDE Workshop, </booktitle> <address> Taipei, Taiwan, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: This approach to legacy data is being explored in the Garlic project at the IBM Almaden Research Center <ref> [Care95] </ref>, while semi-structured data is a focus of the TSIMMIS project at Stanford [Garc95].
Reference: [Catt96] <author> R. Cattell (ed.), </author> <title> The Object Database Stan dard: ODMG-93 (Release 1.2), </title> <publisher> Morgan Kaufman Publishers, </publisher> <year> 1996. </year> <pages> Page 11 </pages>
Reference-contexts: This group has worked to draft OODB stan dards for an object data language (ODL), an ob ject query language (OQL), and a C++ program ming interface for manipulating and querying object databases. The latest version of their specification, called ODMG-93 Release 1.2, was published earlier this year <ref> [Catt96] </ref>. With all that research, and all these companies plus a draft standard what could possibly be wrong? Several things. First, despite a decade of hard work, it has been nearly impossible to gain complete agree ment on anything having to do with object-oriented database systems.
Reference: [Comm90] <author> Committee for Advanced DBMS Function, </author> <title> "Third-Generation Database System Manifesto," </title> <booktitle> SIGMOD Record 19(3), </booktitle> <month> July </month> <year> 1990. </year>
Reference-contexts: The path that object-relational database systems (as extended relational database systems are now known [Ston96]) have followed was foretold in a docu ment drafted by a different set of leading database re searchers <ref> [Comm90] </ref> in response to the "OODB Mani festo" cited earlier [Atki90]. This document gave three main tenets for so-called "third-generation" database systems: provide support for richer object structures and rules, subsume second generation (i.e., relational) DBMSs, and be open to other subsystems, e.g., tools and multidatabase middleware products.
Reference: [Cope84] <author> G. Copeland and D. Maier, </author> <title> "Making Smalltalk a Database System,", </title> <booktitle> Proc. 1984 ACM SIGMOD Conference, </booktitle> <address> Boston, MA, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: Al though work on persistent programming languages had also been underway for some time in the programming languages community [Atki87], work on applying those ideas to object-oriented languages was just taking off. Object-oriented database systems were a brand new idea, having just been born <ref> [Cope84] </ref>, and nobody was quite sure what they should be yet. Finally, work on database system toolkits and component architectures, including our own EXODUS project [Care86b], had also just begun. <p> Three early OODB projects laid the foundation in this area Gem stone <ref> [Cope84, Maie86] </ref>, which was based on Smalltalk, Vbase [Andr87], which was based on a CLU-like lan guage, and Orion [Bane87], which was based on CLOS. Again, a major motivation was to reduce or elimi nate the impedance mismatch cited in our discussion of persistent programming language work.
Reference: [Darw95] <author> H. Darwen and C. </author> <title> Date, </title> <booktitle> "The Third Mani festo," SIGMOD Record 24(1), </booktitle> <month> March </month> <year> 1995. </year>
Reference-contexts: A good survey of the state of this area as of a decade ago, when ob jects were entering the persistent language scene, can be found in [Atki87]. 1 In many respects, the recent "Third Manifesto" of Darwen and Date <ref> [Darw95] </ref> seems to be some combination of a rediscov ery and an elaboration of this approach.
Reference: [Depp86] <author> U. Deppisch, H. Paul, and J. Schek, </author> <title> "A Stor age System for Complex Objects," </title> <booktitle> in [Ditt86]. </booktitle>
Reference-contexts: Such domain-appropriate DBMSs would likely have a number of fundamental differ ences, such as different query languages, different ac cess methods, different storage organizations, and per haps even different transaction mechanisms. Key projects representing this approach were our EXODUS project [Care86b], the GENESIS project [Bato86], and the DASDBS project <ref> [Depp86] </ref>.
Reference: [DeWi94] <author> D. DeWitt, N. Kabra, J. Luo, J Patel, and J. Yu, </author> <title> "Client-Server Paradise," </title> <booktitle> Proc. 20th VLDB Conference, </booktitle> <address> Santiago, Chile, </address> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: Some of these issues are currently being explored for image and GIS data types in the context of the Paradise project at Wisconsin <ref> [DeWi94] </ref>. 4.2.4 Legacy Data Sources Although it has always been our fond hope that databases will someday achieve world domination, we recognize that solutions requiring all the world's data to be moved into a database system will never be uni versally accepted.
Reference: [Ditt86] <editor> K. Dittrich and U. Dayal (eds.), </editor> <booktitle> Proc. 1st Int'l. Workshop on Object-Oriented Database Sys tems, </booktitle> <address> Pacific Grove, CA, </address> <month> Sept. </month> <year> 1986. </year>
Reference-contexts: Finally, work on database system toolkits and component architectures, including our own EXODUS project [Care86b], had also just begun. For those wishing to gain a deeper perspective into the field at that time, <ref> [Ditt86] </ref> pro vides an interesting and reasonably accurate snapshot of objects and databases as of 1986. A decade later, things are much clearer, at least in our view.
Reference: [Garc95] <author> H. Garcia-Molina et al, </author> <title> "The TSIMMIS Ap proach to Mediation: Data Models and Languages," </title> <booktitle> Proc. 2nd Int'l. Workshop on Next Generation Info. Technologies and Systems, </booktitle> <address> Naharia, Israel, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: This approach to legacy data is being explored in the Garlic project at the IBM Almaden Research Center [Care95], while semi-structured data is a focus of the TSIMMIS project at Stanford <ref> [Garc95] </ref>.
Reference: [Kim93] <author> W. Kim, </author> <title> "Object-Oriented Database Sys tems: Promises, Reality, and Future," </title> <booktitle> Proc. 19th VLDB Conference, </booktitle> <address> Dublin, Ireland, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: In addition to other base type attributes, "row objects" are permitted to contain reference-valued attributes. Model-wise, such typed row references (e.g., ref (Dept) are treated as an 2 Another paper that we would recommend to interested read ers is <ref> [Kim93] </ref>; it explains how object-oriented and relational database technologies should be combined from the perspective of UniSQL's founder.
Reference: [Kim95] <author> W. Kim (Ed.), </author> <title> Modern Database Systems: The Object Model, Interoperability, and Beyond, </title> <publisher> ACM Press, </publisher> <year> 1995. </year>
Reference-contexts: We refer interested readers to resources such as <ref> [Zdon90, Ston94, Kim95] </ref> as well as to the pro ceedings of conference series like VLDB and SIGMOD for more information about topics and results that we can only touch upon here. The remainder of this paper is organized as follows.
Reference: [Maie86] <author> D. Maier et al, </author> <title> "Development of an Object Oriented DBMS,", </title> <booktitle> Proc. 1986 ACM OOPSLA Con ference, </booktitle> <address> Portland, OR, </address> <month> Oct. </month> <year> 1986. </year>
Reference-contexts: Three early OODB projects laid the foundation in this area Gem stone <ref> [Cope84, Maie86] </ref>, which was based on Smalltalk, Vbase [Andr87], which was based on a CLU-like lan guage, and Orion [Bane87], which was based on CLOS. Again, a major motivation was to reduce or elimi nate the impedance mismatch cited in our discussion of persistent programming language work.
Reference: [Ong84] <author> J. Ong, D. Fogg, and M. Stonebraker, </author> <title> "Im plementation of Data Abstraction in the Relational Database System Ingres," </title> <booktitle> SIGMOD Record 14(1), </booktitle> <month> March </month> <year> 1984. </year>
Reference-contexts: ADT functions could be used in queries and would be dynamically loaded as needed at runtime. This approach was pioneered by the ADT-Ingres ef fort at UC-Berkeley in the early 1980's <ref> [Ong84] </ref>. 1 In the mid-1980's, the Postgres project began as a follow-on to Ingres, initially laying out an approach to providing query optimizers with information about the properties of ADTs and their functions [Ston86a]. Another goal of Postgres was to provide support for storing and querying complex objects.
Reference: [Schw86] <author> P. Schwarz et al, </author> <title> "Extensibility in the Star burst Database System," </title> <booktitle> in [Ditt86]. </booktitle>
Reference-contexts: Another important project that started at this time was the IBM Starburst project <ref> [Schw86] </ref>.
Reference: [Ship81] <author> D. Shipman, </author> <title> "The Functional Data Model and the Data Language DAPLEX," </title> <journal> ACM Trans. on Database Sys. </journal> <volume> 6(1), </volume> <month> March </month> <year> 1981. </year>
Reference-contexts: approach that Postgres worked to avoid, but that were advocated and studied elsewhere, e.g., [Zani83, Care88]. 4 It is interesting to note that the foundation for many of the row type extensions predates the initial object revolution by several years, having been laid in part by efforts such as Daplex <ref> [Ship81] </ref> and GEM [Zani83]. vendor to vendor. However, the SQL3 standards ef fort is working hard to standardize most of these fea tures; it has included an ADT concept for some time, and was amended recently to include support for row objects and references as well.
Reference: [Ston86a] <author> M. Stonebraker, </author> <title> "Inclusion of New Types in Relational Data Base Systems," </title> <booktitle> Proc. 2nd IEEE Data Eng. Conf., </booktitle> <address> Los Angeles, CA, </address> <month> Feb. </month> <year> 1986. </year>
Reference-contexts: Extended relational database systems 2. Persistent programming languages 3. Object-oriented database systems 4. Database system toolkits/components Research on extended relational database systems had been in progress for several years in 1986, and it was beginning to bear significant fruit <ref> [Ston86a] </ref>. Al though work on persistent programming languages had also been underway for some time in the programming languages community [Atki87], work on applying those ideas to object-oriented languages was just taking off. <p> This approach was pioneered by the ADT-Ingres ef fort at UC-Berkeley in the early 1980's [Ong84]. 1 In the mid-1980's, the Postgres project began as a follow-on to Ingres, initially laying out an approach to providing query optimizers with information about the properties of ADTs and their functions <ref> [Ston86a] </ref>. Another goal of Postgres was to provide support for storing and querying complex objects.
Reference: [Ston86b] <author> M. Stonebraker, </author> <title> "Object Management in Postgres Using Procedures," </title> <booktitle> in [Ditt86]. </booktitle>
Reference-contexts: Another goal of Postgres was to provide support for storing and querying complex objects. Here, the Post gres project advocated a somewhat radical "proce dure as a data type" approach <ref> [Ston86b] </ref>, and rejected the CODASYL-like "pointer spaghetti" that they felt characterized systems that supported inter-object ref erences (such as object-oriented database systems).
Reference: [Ston94] <author> M. Stonebraker, </author> <booktitle> Readings in Database Sys tems (2nd Edition), </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1994. </year>
Reference-contexts: We refer interested readers to resources such as <ref> [Zdon90, Ston94, Kim95] </ref> as well as to the pro ceedings of conference series like VLDB and SIGMOD for more information about topics and results that we can only touch upon here. The remainder of this paper is organized as follows.
Reference: [Ston96] <author> M. Stonebraker, </author> <title> Object-Relational DBMSs: The Next Great Wave, </title> <publisher> Morgan Kaufmann Publish ers, </publisher> <year> 1996. </year>
Reference-contexts: In fact, over time these systems have adopted some of the more attractive data model and query language features from the OODB world; this trend will no doubt continue. The path that object-relational database systems (as extended relational database systems are now known <ref> [Ston96] </ref>) have followed was foretold in a docu ment drafted by a different set of leading database re searchers [Comm90] in response to the "OODB Mani festo" cited earlier [Atki90]. <p> One key example is in the area of ADTs, particularly those ADTs defined in external programming languages. To process queries involving such ADTs well, an object-relational query processor must be aware of information about properties of the type and of its operations, selectivity estimates, and function costs <ref> [Ston96] </ref>. Object-relational database systems bring an opportunity for third-party vendors to provide libraries of ADTs (and also row types) that address certain problem domains - i.e., instead of pro viding special-purpose data managers, future domain specialists could make a business out of providing ex tensions for object-relational systems.
Reference: [Zani83] <author> Carlo Zaniolo, </author> <title> "The Database Language GEM," </title> <booktitle> Proc. 1983 ACM SIGMOD Conference, </booktitle> <address> San Jose, CA, </address> <month> May </month> <year> 1983. </year>
Reference-contexts: Object-relational database systems today suffer to some extent from the same problem that plagues OODB systems there are too many differences from 3 Notice that object-relational database systems have ended up adopting the "pointer spaghetti" approach that Postgres worked to avoid, but that were advocated and studied elsewhere, e.g., <ref> [Zani83, Care88] </ref>. 4 It is interesting to note that the foundation for many of the row type extensions predates the initial object revolution by several years, having been laid in part by efforts such as Daplex [Ship81] and GEM [Zani83]. vendor to vendor. <p> worked to avoid, but that were advocated and studied elsewhere, e.g., [Zani83, Care88]. 4 It is interesting to note that the foundation for many of the row type extensions predates the initial object revolution by several years, having been laid in part by efforts such as Daplex [Ship81] and GEM <ref> [Zani83] </ref>. vendor to vendor. However, the SQL3 standards ef fort is working hard to standardize most of these fea tures; it has included an ADT concept for some time, and was amended recently to include support for row objects and references as well.
Reference: [Zdon90] <author> Z. Zdonik and D. Maier, </author> <title> Readings in Object Oriented Database Systems, </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1990. </year> <pages> Page 12 </pages>
Reference-contexts: We refer interested readers to resources such as <ref> [Zdon90, Ston94, Kim95] </ref> as well as to the pro ceedings of conference series like VLDB and SIGMOD for more information about topics and results that we can only touch upon here. The remainder of this paper is organized as follows.
References-found: 31

