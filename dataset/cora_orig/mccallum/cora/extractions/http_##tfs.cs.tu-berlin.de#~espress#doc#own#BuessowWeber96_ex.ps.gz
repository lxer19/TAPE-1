URL: http://tfs.cs.tu-berlin.de/~espress/doc/own/BuessowWeber96_ex.ps.gz
Refering-URL: http://www.first.gmd.de/~espress/gesamt_public.html
Root-URL: 
Title: Structural and Behavioral Models of the Steam-Boiler Control System  
Author: Robert Bussow, Matthias Weber 
Note: Table of Contents  
Address: Berlin  
Affiliation: Technische Universitat  
Abstract: This paper presents a system specification of the steam boiler control system described in [1]: To manage complexity and to foster separation of concerns the design model is divided into three views: The architectural view specified with object and class diagrams, the reactive view specified with statecharts, and the functional view specified with Z. A systematic relationship between the reactive and the functional view entails proof obligations to guarantee semantic compatibility. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Jean-Raymond Abrial. </author> <title> Steam-boiler control specification problem. Material for the 5 available through ftp://ftp.cs.tu-berlin.de/pub/local/uebb/ 34 Dagstuhl meeting Methods for Semantics and Specification, </title> <address> June 4-9, </address> <year> 1995., </year> <month> August </month> <year> 1994. </year>
Reference-contexts: The next section sketches some key ideas of this combination; after that we present a solution to the steam boiler control specification problem. Throughout the presentation, we make an effort to stick faithfully to the specification of this problem given in <ref> [1] </ref>, especially with respect to the physical interface of the control software. For ease of understanding, the reader should be familiar with the informal specification of the steam-boiler control system as set out in [1]. <p> presentation, we make an effort to stick faithfully to the specification of this problem given in <ref> [1] </ref>, especially with respect to the physical interface of the control software. For ease of understanding, the reader should be familiar with the informal specification of the steam-boiler control system as set out in [1]. <p> If more failures occur, the system should enter the emergency stop mode. If sensors considered as defective have been repaired, the system may resume its normal mode.Our modes differ slightly from those defined in the informal specification. This is mainly due to our realization that, according to <ref> [1] </ref>, the failure of a pump itself is not allowed to cause an emergency. Finally, the system should be able to detect likely failures of the data transmis sion, in case of aberrant or missing signals from the physical units. 2 In contrast to [1], here, a defective pump does not <p> to our realization that, according to <ref> [1] </ref>, the failure of a pump itself is not allowed to cause an emergency. Finally, the system should be able to detect likely failures of the data transmis sion, in case of aberrant or missing signals from the physical units. 2 In contrast to [1], here, a defective pump does not affect the degraded or rescue modes, as long as its pump controller is still working.
Reference: 2. <author> L. M. Barroca, J. S. Fitzgerald, and L. Spencer. </author> <title> The architectural specification of an avionics subsystem. </title> <booktitle> In IEEE Workshop on Industrial-strength Formal Specification Techniques, </booktitle> <pages> pages 17-29. </pages> <publisher> IEEE Press, </publisher> <year> 1995. </year>
Reference-contexts: For ease of understanding, the reader should be familiar with the informal specification of the steam-boiler control system as set out in [1]. The idea of combining statecharts and Z is certainly not new, e.g. <ref> [2] </ref> uses a combination of Z and timed statecharts in the context of an application from avionics. 2 Specification Methodology A widely used technique in modern software engineering is to model a system by a combination of different but semantically compatible - "views" of that system.
Reference: 3. <author> G. Booch. </author> <title> Object-Oriented Analysis and Design with Applications. </title> <note> Benjamin Cum-mings, second edition, </note> <year> 1994. </year>
Reference-contexts: For the description of this model, we adopt the object-oriented 2 Fig. 1. The three modeling views of an embedded system modeling paradigm <ref> [3, for instance] </ref>: We understand an embedded control system as a hierarchically structured collection of objects that change state and interact with each other throughout their lifetime. <p> Since this is a very small example, the analysis and architectural design is straightforward. The results are summarized in the class and instance diagrams presented in this section. We use notations inspired from OMT [6] and Booch <ref> [3] </ref>. However, choice of notations is by no means essential and it should not be difficult for the experienced reader to translate the information content of the following diagrams into his favorite notation. Structurally, the steam-boiler is an object that controls several physical units (see Figure 2).
Reference: 4. <author> D. Harel. Statecharts: </author> <title> A visual formalism for complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8(3) </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference-contexts: Reactive behavior is modeled by specifying how, and under which timing constraints, operations from external objects are requested or supplied (or both) in the state changes of objects. We specify reactive behavior using an appropriate variant of timed hierarchical state transition diagrams, i.e. with a variant of statecharts <ref> [4] </ref>. There are two reasons for this choice: firstly, statecharts have proven to be sufficiently expressive for modeling complex component interactions and time control, and secondly, the use of statecharts, or close variants of statecharts, is currently spreading in industry.
Reference: 5. <author> D. Harel and E. Gery. </author> <title> Executable Object-Modeling with Statecharts. </title> <booktitle> In Proc. </booktitle> <volume> ICSE 18, </volume> <year> 1996. </year>
Reference-contexts: A variety of formal semantics for statecharts have been developed [9]. The present paper is more in the line of current work on embedding statecharts into an object-oriented setting [7] <ref> [5] </ref>. Therefore, we would like to make two remarks about basic semantic concepts of the statechart notation as used in this report: The basic communication mechanism is point-to-point communication rather than broadcasting.
Reference: 6. <author> J. Rumbaugh et al. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice-Hall, </publisher> <year> 1991. </year>
Reference-contexts: Since this is a very small example, the analysis and architectural design is straightforward. The results are summarized in the class and instance diagrams presented in this section. We use notations inspired from OMT <ref> [6] </ref> and Booch [3]. However, choice of notations is by no means essential and it should not be difficult for the experienced reader to translate the information content of the following diagrams into his favorite notation. Structurally, the steam-boiler is an object that controls several physical units (see Figure 2).
Reference: 7. <author> B. Selic, G. Gullekson, and P. T. Ward. </author> <title> Real-Time Object-Oriented Modeling. </title> <publisher> John Wiley & Sons, </publisher> <year> 1994. </year>
Reference-contexts: Both kinds of transition may subsequently trigger a number of external activities, e.g. by requesting services from other system objects. A variety of formal semantics for statecharts have been developed [9]. The present paper is more in the line of current work on embedding statecharts into an object-oriented setting <ref> [7] </ref> [5]. Therefore, we would like to make two remarks about basic semantic concepts of the statechart notation as used in this report: The basic communication mechanism is point-to-point communication rather than broadcasting. <p> As wiil be specified in the architectural view, communications can be synchronous or asynchronous. Following the approach in <ref> [7] </ref>, operation transitions are thus based on the concepts of request and provision of operations rather than the concept of event. The execution of a transition is not timeless and external messages may arrive at any time.
Reference: 8. <author> M. Spivey. </author> <title> The Z Notation, A Reference Manual. </title> <publisher> Prentice Hall, </publisher> <address> 2nd edition, </address> <year> 1992. </year>
Reference-contexts: Often, functional behavior in state-based systems is specified by textual or formal descriptions of pre- and postconditions and of data invariants. In our approach, we specify the functional behavior of objects using the state-based formal specification language Z <ref> [8] </ref>. There are two main reasons for using Z: firstly, in our view, Z has proven to be particularly useful for modeling complex functional data transformations; and secondly, both in academia and industry, Z has become one of the most widely used formal specification notations.
Reference: 9. <author> M. von der Beeck. </author> <title> A comparison of statecharts variants. </title> <booktitle> In Symposium on Fault-Tolerant Computing, </booktitle> <publisher> LNCS. Springer, </publisher> <year> 1994. </year>
Reference-contexts: The first kinds of transition may additionally be guarded by a condition. Both kinds of transition may subsequently trigger a number of external activities, e.g. by requesting services from other system objects. A variety of formal semantics for statecharts have been developed <ref> [9] </ref>. The present paper is more in the line of current work on embedding statecharts into an object-oriented setting [7] [5].
Reference: 10. <author> M. Weber. </author> <title> Integrating Mathematical Techniques in the Development of Embedded Control Systems. </title> <type> internal report; TU-Berlin, </type> <year> 1996. </year> <month> 35 </month>
Reference-contexts: Notations for the structural model, as well as notations for the dynamic and functional models, are discussed extensively in <ref> [10] </ref>. 5 Reactive Model We concentrate here on the reactive behavior of the steam boiler control.
References-found: 10

