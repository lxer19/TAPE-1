URL: ftp://ftp.eecs.umich.edu/people/aprakash/collaboration/papers/CSE-TR-156-14.ps.gz
Refering-URL: http://www.eecs.umich.edu/~aprakash/publications.html
Root-URL: http://www.cs.umich.edu
Title: Undoing Actions in Collaborative Work: Framework and Experience  
Author: Atul Prakash Michael J. Knister 
Keyword: Undo, collaboration, groupware, user recovery  
Address: Ann Arbor, MI 48109-2122  
Affiliation: Software Systems Research Laboratory Department of Electrical Engineering and Computer Science University of Michigan,  
Pubnum: Tecnical Report CSE-TR-196-94  
Email: Email: aprakash@eecs.umich.edu, mknister@eecs.umich.edu  
Phone: Phone: (313) 763-1585  
Abstract: The ability to undo operations is a standard feature in most single-user interactive applications. However, most current collaborative applications that allow several users to work simultaneously on a shared document lack undo capabilities; those which provide undo generally provide only a global undo, in which the last change made by anyone to a document is undone, rather than allowing users to individually reverse their own changes. In this paper, we propose a general framework for undoing actions in collaborative systems. The framework takes into account the possibility of conflicts between different users' actions that may prevent a normal undo. The framework also allows selection of actions to undo based on who performed them, where they occurred, or any other appropriate criterion. The proposed framework have been incorporated in DistEdit, a toolkit for building text group editors. Based on our experience, we discuss methods for maintaining the undo information in a groupware environment. We also describe our experience in using the group undo facilities. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. M. Abdel-Wahab, S. Guan, and J. Nievergelt. </author> <title> Shared workspaces for group collaboration: An experiment using Internet and Unix inter-process communication. </title> <journal> IEEE Communications Magazine, </journal> <pages> pages 10-16, </pages> <month> Nov. </month> <year> 1988. </year>
Reference-contexts: In recent years, there has been a growing interest in the area of computer-supported cooperative work or groupware, the goal of which is to provide support for collaborative work among users in a shared workspace <ref> [1, 11, 12, 36] </ref>. An undo facility can be important in groupware systems for several 1 reasons.
Reference: [2] <author> Gregory D. Abowd and Alan J. Dix. </author> <title> Giving undo attention. </title> <journal> Interacting with Computers, </journal> <volume> 4(3) </volume> <pages> 317-342, </pages> <year> 1992. </year>
Reference-contexts: Independently and about the same time as our work [32, 33], undo schemes for collaborative systems were proposed by Berlage [5], Chaudhary and Dewan [6], and Abowd and Dix <ref> [2] </ref>. We provide a comparison with these schemes below. Berlage [5] and Chaudhary and Dewan [6] both recommend undoing any operation on the history list by simply executing its inverse provided the inverse is executable in the current state. <p> In Section 6.4, we elaborate, in terms of the framework presented in this paper, on the semantics of the above approach and some situations in which it may be appropriate to use. Abowd and Dix <ref> [2] </ref> recognize the need for dealing with dependencies among users' operations and suggest a basic framework similar to that suggested in this paper for dealing with dependencies. The focus in their work has been on trying to understand formally the behavior desired of undo in a group environment.
Reference: [3] <author> J.E. Archer and R. Conway. </author> <title> COPE: A cooperative programming environment. </title> <type> Technical Report TR-81-459, </type> <institution> Cornell University, </institution> <month> June </month> <year> 1981. </year>
Reference-contexts: Usually the redo of the last undo is also allowed (often implemented as an undo of the last undo) so that, in the above example, E can be redone. 2.2 Linear Undo Model and US&R Model The Interlisp system [38], COPE <ref> [3] </ref>, and Aloe [24] are some of the systems that used the linear undo model. The linear undo model allows undoing of a sequence of operations and keeps a pointer which tracks the next operation to be undone. Operations can then be redone, after possibly doing some new operations.
Reference: [4] <author> R.M. Baecker, D. Nastos, I.R. Posner, and K.L. Mawby. </author> <title> The user-centered iterative design of collaborative software. </title> <booktitle> In INTERCHI'93 Conference Proceedings, </booktitle> <pages> pages 399-405. </pages> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: The framework is quite general, being applicable to a variety of documents types, such as text, graphics, and multimedia. The proposed techniques have been successfully incorporated in DistEdit [22], a group editor toolkit, and a version of of SASSE <ref> [26, 4] </ref>, a group editor. The basic ideas of our undo framework were presented in an earlier version of this paper [32]. This paper makes several additional contributions. <p> It would be desirable to ensure that a group editor's 16 undo is as efficient when the editor is used with only one user editing, as is often the case in practice <ref> [4, 29] </ref>. The selective undo algorithm, as described above, is O (n 2 ) for single-user history undo.
Reference: [5] <author> Thomas Berlage. </author> <title> From undo to multi-user applications. </title> <booktitle> In Vienna Conference on Human Computer Interaction, </booktitle> <month> September 20-22 </month> <year> 1993. </year>
Reference-contexts: Independently and about the same time as our work [32, 33], undo schemes for collaborative systems were proposed by Berlage <ref> [5] </ref>, Chaudhary and Dewan [6], and Abowd and Dix [2]. We provide a comparison with these schemes below. Berlage [5] and Chaudhary and Dewan [6] both recommend undoing any operation on the history list by simply executing its inverse provided the inverse is executable in the current state. <p> Independently and about the same time as our work [32, 33], undo schemes for collaborative systems were proposed by Berlage <ref> [5] </ref>, Chaudhary and Dewan [6], and Abowd and Dix [2]. We provide a comparison with these schemes below. Berlage [5] and Chaudhary and Dewan [6] both recommend undoing any operation on the history list by simply executing its inverse provided the inverse is executable in the current state. <p> Several researchers have suggested group undo schemes which are based on the idea of simply executing the inverse of an operation if the inverse is executable in the current state <ref> [5, 6] </ref>. To distinguish it from our approach, we will broadly call such schemes as state-based undo. Unfortunately, the conditions under which state-based undo schemes actually give predictable, reasonable behavior and their semantic effect are usually not stated.
Reference: [6] <author> Rajiv Chaudhary and Prasun Dewan. </author> <title> Multi-user undo/redo. </title> <type> Technical Report Technical Report TR125P, </type> <institution> Computer Science Department, Purdue University, </institution> <year> 1992. </year>
Reference-contexts: Independently and about the same time as our work [32, 33], undo schemes for collaborative systems were proposed by Berlage [5], Chaudhary and Dewan <ref> [6] </ref>, and Abowd and Dix [2]. We provide a comparison with these schemes below. Berlage [5] and Chaudhary and Dewan [6] both recommend undoing any operation on the history list by simply executing its inverse provided the inverse is executable in the current state. <p> Independently and about the same time as our work [32, 33], undo schemes for collaborative systems were proposed by Berlage [5], Chaudhary and Dewan <ref> [6] </ref>, and Abowd and Dix [2]. We provide a comparison with these schemes below. Berlage [5] and Chaudhary and Dewan [6] both recommend undoing any operation on the history list by simply executing its inverse provided the inverse is executable in the current state. <p> Several researchers have suggested group undo schemes which are based on the idea of simply executing the inverse of an operation if the inverse is executable in the current state <ref> [5, 6] </ref>. To distinguish it from our approach, we will broadly call such schemes as state-based undo. Unfortunately, the conditions under which state-based undo schemes actually give predictable, reasonable behavior and their semantic effect are usually not stated.
Reference: [7] <author> P.P. Chen. </author> <title> The entity-relationship model: toward a unified view of data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <month> January </month> <year> 1976. </year>
Reference-contexts: In this paper, we assume that the conceptual model of a document consists of a set of attributed objects with relations between them. The conceptual model is based on the idea of the entity-relationship model used in modeling databases <ref> [7] </ref>. The physical model of a document, in contrast, is the actual data structure used to represent the document. An operation on a document in the physical model modifies the data structure used to represent the document.
Reference: [8] <author> W.D. Elliott, W.A. Potas, and A. Van Dam. </author> <title> Computer assisted tracing of text evolution. </title> <booktitle> In Proceedings of AFIPS Fall Joint Computer Conference, </booktitle> <pages> pages 533-540, </pages> <year> 1971. </year>
Reference-contexts: It will be useful to incorporate such schemes in single-user editors and group editors and evaluate their use in practice. The history list could also be applicable to other tasks, such as seeing a trace of the evolution of the text <ref> [8] </ref>. The mechanisms for transposing operations could be useful in providing the additional capability of seeing a selective evolution of the text, for instance the evolution history of a particular section of the document. In the future, we plan to explore such uses of the history list.
Reference: [9] <author> C. Ellis, S.J. Gibbs, and G. Rein. </author> <title> Design and use of a group editor. </title> <editor> In G. Cockton, editor, </editor> <booktitle> Engineering for Human-Computer Interaction, </booktitle> <pages> pages 13-25. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <month> September </month> <year> 1988. </year>
Reference-contexts: In particular, one user may not be aware of all actions done by other users. The behavior of undo should be consistent with a user's awareness of actions done on the document. Many groupware applications have been built that support multi-user work on a shared document, e.g, Grove <ref> [9] </ref>, ShrEdit [25], CES [18], and MACE [28]. Almost none, as far as we are aware, provide an undo facility that addresses all the above issues. Those applications that do provide an undo usually only provide a global undo facility rather than a per-user undo facility. <p> Two problems can arise in ensuring consistent behavior of the undo operation. First, the history list may not be identical at each site. In several group editing systems such as DistEdit [22] and Grove <ref> [9] </ref>, to ensure good response time, operations are done locally first and then broadcast. Thus, concurrent operations can end up in different orders on different history lists.
Reference: [10] <author> C. Ellis, S.J. Gibbs, and G. Rein. </author> <title> Concurrency control in groupware systems. </title> <booktitle> In Proceedings of the ACM SIGMOD '89 Conference on Management of Data, </booktitle> <pages> pages 399-407. </pages> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: In the definition of Transpose (), notice the change in position argument in Transpose () so that the Transpose Property is satisfied. The Transpose () function above is similar to the T opt matrix defined in <ref> [10] </ref>. We leave it to the reader to determine the Conflict and Transpose definitions for the other three combinations of these two operations. A definition of these two functions for general string insert and delete operations can be found in [33].
Reference: [11] <author> C.A. Ellis, S.J. Gibbs, and G.L. Rein. </author> <title> Groupware: Some issues and experiences. </title> <booktitle> Communic--ations of the ACM, </booktitle> <pages> pages 38-51, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: In recent years, there has been a growing interest in the area of computer-supported cooperative work or groupware, the goal of which is to provide support for collaborative work among users in a shared workspace <ref> [1, 11, 12, 36] </ref>. An undo facility can be important in groupware systems for several 1 reasons.
Reference: [12] <author> M. Elwart-Keys, D. Halonen, M. Horton, R. Kass, and P. Scott. </author> <title> User interface requirements for face to face groupware. </title> <type> Technical Report CMI-89-020, </type> <institution> Center for Machine Intelligence, </institution> <address> Ann Arbor, MI, </address> <month> December </month> <year> 1989. </year>
Reference-contexts: In recent years, there has been a growing interest in the area of computer-supported cooperative work or groupware, the goal of which is to provide support for collaborative work among users in a shared workspace <ref> [1, 11, 12, 36] </ref>. An undo facility can be important in groupware systems for several 1 reasons.
Reference: [13] <author> K.P. Eswaran, J.N. Gray, R.A. Lorie, </author> <title> and I.L. Traiger. The notions of consistency and predicate locks in a relational database system. </title> <journal> CACM, </journal> <volume> 8(11) </volume> <pages> 624-633, </pages> <year> 1976. </year>
Reference-contexts: The notion of position may not appear in the conceptual model if users, when editing, are expected to be interested in modifying the ordering of characters, rather than their specific positions in the document. Following the work on concurrency control in databases <ref> [13, 31, 31, 37] </ref>, one can define the notion of read-set and write-set for an operation in terms of its effect on the conceptual-model state of the document. The read-set of an operation done in a particular state is the set of objects/attributes/relations read by the operation. <p> Our notion of conflict is similar to the notion of conflict in the concurrency theory of database transactions <ref> [13, 30, 31, 37] </ref>. One difference is that we allow for a Transpose function that modifies the operations when interchanging them; in current database theory, operations are not modified when they are reordered. As we will see, that complicates the algorithms for undo substantially.
Reference: [14] <author> R. Fish, R. Kraut, M. Leland, and M. Cohen. Quilt: </author> <title> A collaborative tool for cooperative writing. </title> <booktitle> In Proceedings of ACM SIGOIS Conference, </booktitle> <pages> pages 30-37, </pages> <year> 1988. </year>
Reference-contexts: Finally, it includes our experience in implementing and using the proposed undo facilities in the DistEdit toolkit [22]. 2 Several groupware applications support asynchronous sharing, e.g., Quilt <ref> [14] </ref> and Prep [27], where group members work on a shared document at different times.
Reference: [15] <author> J.D. Foley and V.L. Wallace. </author> <title> The art of natural graphical man-machine conversion. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 62(4) </volume> <pages> 4622-471, </pages> <month> April </month> <year> 1974. </year>
Reference-contexts: 1 Introduction The ability to undo operations is a standard and useful feature in most interactive single-user applications. For instance, the availability of an undo facility in editors is useful for reversing erroneous actions [20], and reducing user frustration with new systems <ref> [15] </ref>, especially those that allow users to invoke commands that can modify system state in complex ways. The availability of undo can also encourage users to experiment, acting not only as a safety net, but also allowing users to try out different approaches to solving problems using backtracking [39].
Reference: [16] <author> R.F. Gordon, G.B. Leeman, and C.H. Lewis. </author> <title> Concepts and implications of undo for interactive recovery. </title> <booktitle> In Proceedings of the 1985 ACM Annual Conference, </booktitle> <pages> pages 150-157. </pages> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: In general, the inverse of an operation A may depend on state of the document prior to A <ref> [16] </ref>. For instance, on a text document, if a DelChar (10) operation is done, which deletes the character at position 10, then in order to determine its inverse, we must know the character that was deleted.
Reference: [17] <editor> J.N. Gray. </editor> <booktitle> Notes on Database Operating Systems, </booktitle> <pages> pages 394-481. </pages> <publisher> Springer-Verlag, </publisher> <year> 1978. </year>
Reference-contexts: property that it is possible to go back to any previous state, and the need for taking dependencies among operations does not arise since operations are never skipped. 2.4 Checkpoint and Recovery Schemes Checkpoint and recovery is a common strategy for dealing with failures and abort of transactions in databases <ref> [17] </ref>. Such schemes are usually not used for implementing undo in editor-type applications because it is usually less expensive to execute the inverse of operations to get back to an earlier state than to maintain a number of checkpoints and do forward execution to get to the current state. <p> the transpose property is that S ffi B 0 ffi A 0 S ffi A ffi B for an arbitrary state S. 4.4 Relation to the work in Databases Our conceptual model of a document and the operations on it is similar to the read-write model of transactions in databases <ref> [17, 31] </ref>. Our notion of conflict is similar to the notion of conflict in the concurrency theory of database transactions [13, 30, 31, 37].
Reference: [18] <author> I. Grief, R. Seliger, and W. Weihl. </author> <title> Atomic data abstractions in a distributed collaborative editing system. </title> <booktitle> In Proc. of the 13th Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 160-172, </pages> <year> 1976. </year>
Reference-contexts: The behavior of undo should be consistent with a user's awareness of actions done on the document. Many groupware applications have been built that support multi-user work on a shared document, e.g, Grove [9], ShrEdit [25], CES <ref> [18] </ref>, and MACE [28]. Almost none, as far as we are aware, provide an undo facility that addresses all the above issues. Those applications that do provide an undo usually only provide a global undo facility rather than a per-user undo facility.
Reference: [19] <author> M. Hammer, R. Ilson, T. Anderson, E. Gilbert, M. Good, B. Niamir, L. Rosenstein, and S. Schoichet. </author> <title> The implementation of etude, an integrated and interactive document production system. </title> <booktitle> In Proceedings of the ACM SIGPLAN/SIGOA Conference on Text Manipulation, </booktitle> <pages> pages 137-146. </pages> <publisher> ACM, </publisher> <address> New York, </address> <month> June </month> <year> 1981. </year>
Reference-contexts: We also discuss undo techniques that have been proposed for groupware systems. 2.1 Single-step Undo Several early editors, including Lampson's Bravo for the Alto [23] and Hammer et al.'s ETUDE editor/formatter <ref> [19] </ref>, provided single-step undo. Single-step undo is common in more recent systems including many Macintosh and Windows applications as well as editors such as vi. Single-step undo allows undo of only the last operation.
Reference: [20] <author> W.J. Hansen. </author> <title> User engineering principles for interactive systems. </title> <booktitle> In AFIPS Conference Pro-cessings, </booktitle> <volume> volume 39, </volume> <pages> pages 523-532. </pages> <publisher> AFIPS Press, </publisher> <year> 1971. </year>
Reference-contexts: 1 Introduction The ability to undo operations is a standard and useful feature in most interactive single-user applications. For instance, the availability of an undo facility in editors is useful for reversing erroneous actions <ref> [20] </ref>, and reducing user frustration with new systems [15], especially those that allow users to invoke commands that can modify system state in complex ways.
Reference: [21] <author> M. Knister and A. Prakash. DistEdit: </author> <title> A distributed toolkit for supporting multiple group editors. </title> <booktitle> In Proceedings of the Third Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 343-355, </pages> <address> Los Angeles, California, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: Section 6 suggests ways of improving the performance of the algorithm for many common situations. Section 7 discusses the design and implementation issues we faced in incorporating the undo scheme in the group text editor toolkit, DistEdit <ref> [21, 22] </ref>. In the same section, based on our experience with DistEdit's undo facilities, we also discuss some important user-interface design issues, for instance the utility of providing both a per-user undo and a global undo in a groupware system. <p> The techniques proposed in this paper have been implemented in the DistEdit toolkit <ref> [21] </ref>. The techniques are presented in the context of history undo; however, many aspects of the techniques, such as the notions of Transpose and Conflict, are also applicable to implementing undo based on the linear and US&R models.
Reference: [22] <author> M. Knister and A. Prakash. </author> <title> Issues in the design of a toolkit for supporting multiple group editors. </title> <journal> Computing Systems The Journal of the Usenix Association, </journal> <volume> 6(2) </volume> <pages> 135-166, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: This paper presents a framework for implementing undo in groupware applications that addresses the above-mentioned technical issues. The framework is quite general, being applicable to a variety of documents types, such as text, graphics, and multimedia. The proposed techniques have been successfully incorporated in DistEdit <ref> [22] </ref>, a group editor toolkit, and a version of of SASSE [26, 4], a group editor. The basic ideas of our undo framework were presented in an earlier version of this paper [32]. This paper makes several additional contributions. <p> Finally, it includes our experience in implementing and using the proposed undo facilities in the DistEdit toolkit <ref> [22] </ref>. 2 Several groupware applications support asynchronous sharing, e.g., Quilt [14] and Prep [27], where group members work on a shared document at different times. <p> Section 6 suggests ways of improving the performance of the algorithm for many common situations. Section 7 discusses the design and implementation issues we faced in incorporating the undo scheme in the group text editor toolkit, DistEdit <ref> [21, 22] </ref>. In the same section, based on our experience with DistEdit's undo facilities, we also discuss some important user-interface design issues, for instance the utility of providing both a per-user undo and a global undo in a groupware system. <p> In our experience, the selective undo algorithm with the optimizations discussed above is efficient enough for almost all practical purposes and also provides cleaner semantics with respect to consistency with the history list. 7 Implementation and Experience The per-user Emacs-style history undo has been implemented in the DistEdit toolkit <ref> [22] </ref>. This undo facility automatically becomes available to all editors that use the DistEdit toolkit. At present, GNU Emacs and xedit are the two editors that we have modified to use DistEdit. status/control window that informs the user about the state of the group session and functions specific to group-editing. <p> Two problems can arise in ensuring consistent behavior of the undo operation. First, the history list may not be identical at each site. In several group editing systems such as DistEdit <ref> [22] </ref> and Grove [9], to ensure good response time, operations are done locally first and then broadcast. Thus, concurrent operations can end up in different orders on different history lists.
Reference: [23] <author> B.W. Lampson. </author> <title> Bravo Manual. In Alto User's Handbook. </title> <institution> Xerox Palo Alto Research Center, </institution> <year> 1978. </year>
Reference-contexts: A more detailed discussion of these techniques can be found in [39], and a formalization of undo and redo facilities can be found in [41]. We also discuss undo techniques that have been proposed for groupware systems. 2.1 Single-step Undo Several early editors, including Lampson's Bravo for the Alto <ref> [23] </ref> and Hammer et al.'s ETUDE editor/formatter [19], provided single-step undo. Single-step undo is common in more recent systems including many Macintosh and Windows applications as well as editors such as vi. Single-step undo allows undo of only the last operation.
Reference: [24] <author> C. </author> <title> Linxi and A.N. Habermann. A history mechanism and undo/redo/reuse support in Aloe. </title> <type> Technical Report Technical Report CMU-CS-86-148, </type> <institution> CS Department, Carnegie-Mellon University, </institution> <year> 1986. </year>
Reference-contexts: Usually the redo of the last undo is also allowed (often implemented as an undo of the last undo) so that, in the above example, E can be redone. 2.2 Linear Undo Model and US&R Model The Interlisp system [38], COPE [3], and Aloe <ref> [24] </ref> are some of the systems that used the linear undo model. The linear undo model allows undoing of a sequence of operations and keeps a pointer which tracks the next operation to be undone. Operations can then be redone, after possibly doing some new operations.
Reference: [25] <author> L. McGuffin and G. M. Olson. ShrEdit: </author> <title> A shared electronic workspace. </title> <type> Technical Report CSMIL Technical Report No. 45, </type> <institution> The University of Michigan, </institution> <address> Ann Arbor, </address> <year> 1992. </year>
Reference-contexts: The behavior of undo should be consistent with a user's awareness of actions done on the document. Many groupware applications have been built that support multi-user work on a shared document, e.g, Grove [9], ShrEdit <ref> [25] </ref>, CES [18], and MACE [28]. Almost none, as far as we are aware, provide an undo facility that addresses all the above issues. Those applications that do provide an undo usually only provide a global undo facility rather than a per-user undo facility.
Reference: [26] <author> Alex Mitchell. </author> <type> personal communication, </type> <institution> University of Toronto, </institution> <year> 1992. </year> <month> 25 </month>
Reference-contexts: The framework is quite general, being applicable to a variety of documents types, such as text, graphics, and multimedia. The proposed techniques have been successfully incorporated in DistEdit [22], a group editor toolkit, and a version of of SASSE <ref> [26, 4] </ref>, a group editor. The basic ideas of our undo framework were presented in an earlier version of this paper [32]. This paper makes several additional contributions.
Reference: [27] <editor> C.M. Neuwirth, D.S. Kaufer, R. Chandhok, and J.H. Morris. </editor> <booktitle> Issues in the design of com-puter support for co-authoring and commenting. In Proceedings of the Third Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 183-195, </pages> <address> Los Angeles, California, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: Finally, it includes our experience in implementing and using the proposed undo facilities in the DistEdit toolkit [22]. 2 Several groupware applications support asynchronous sharing, e.g., Quilt [14] and Prep <ref> [27] </ref>, where group members work on a shared document at different times.
Reference: [28] <author> R.E. Newman-Wolfe and H. K. Pelimuhandiram. MACE: </author> <title> A fine-grained concurrent editor. </title> <booktitle> In Proceedings of the ACM/IEEE Conference on Organizational Computing Systems (COCS 91), </booktitle> <pages> pages 240-254, </pages> <address> Atlanta, Georgia, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: The behavior of undo should be consistent with a user's awareness of actions done on the document. Many groupware applications have been built that support multi-user work on a shared document, e.g, Grove [9], ShrEdit [25], CES [18], and MACE <ref> [28] </ref>. Almost none, as far as we are aware, provide an undo facility that addresses all the above issues. Those applications that do provide an undo usually only provide a global undo facility rather than a per-user undo facility. MACE [28] does provide a simple form of per-user undo facility, allowing <p> document, e.g, Grove [9], ShrEdit [25], CES [18], and MACE <ref> [28] </ref>. Almost none, as far as we are aware, provide an undo facility that addresses all the above issues. Those applications that do provide an undo usually only provide a global undo facility rather than a per-user undo facility. MACE [28] does provide a simple form of per-user undo facility, allowing a user to undo only those modifications that he made by explicitly locking modified sections of the document, and only if he hasn't released the locks since the modifications.
Reference: [29] <author> J.S. Olson, G.M. Olson, M. Storrtsten, and M. Carter. </author> <title> Groupware close up: A comparison of the group design process with and without a simple group editor. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 11(4) </volume> <pages> 321-348, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: It would be desirable to ensure that a group editor's 16 undo is as efficient when the editor is used with only one user editing, as is often the case in practice <ref> [4, 29] </ref>. The selective undo algorithm, as described above, is O (n 2 ) for single-user history undo.
Reference: [30] <author> C.H. Papadimitriou. </author> <title> The serializability of concurrent database updates. </title> <journal> Journal of the ACM, </journal> <volume> 26(4) </volume> <pages> 631-653, </pages> <year> 1979. </year>
Reference-contexts: Our notion of conflict is similar to the notion of conflict in the concurrency theory of database transactions <ref> [13, 30, 31, 37] </ref>. One difference is that we allow for a Transpose function that modifies the operations when interchanging them; in current database theory, operations are not modified when they are reordered. As we will see, that complicates the algorithms for undo substantially.
Reference: [31] <author> C.H. Papadimitriou. </author> <title> Database Concurrency Control. </title> <publisher> Computer Science Press, </publisher> <year> 1986. </year>
Reference-contexts: The notion of position may not appear in the conceptual model if users, when editing, are expected to be interested in modifying the ordering of characters, rather than their specific positions in the document. Following the work on concurrency control in databases <ref> [13, 31, 31, 37] </ref>, one can define the notion of read-set and write-set for an operation in terms of its effect on the conceptual-model state of the document. The read-set of an operation done in a particular state is the set of objects/attributes/relations read by the operation. <p> the transpose property is that S ffi B 0 ffi A 0 S ffi A ffi B for an arbitrary state S. 4.4 Relation to the work in Databases Our conceptual model of a document and the operations on it is similar to the read-write model of transactions in databases <ref> [17, 31] </ref>. Our notion of conflict is similar to the notion of conflict in the concurrency theory of database transactions [13, 30, 31, 37]. <p> Our notion of conflict is similar to the notion of conflict in the concurrency theory of database transactions <ref> [13, 30, 31, 37] </ref>. One difference is that we allow for a Transpose function that modifies the operations when interchanging them; in current database theory, operations are not modified when they are reordered. As we will see, that complicates the algorithms for undo substantially.
Reference: [32] <author> A. Prakash and M. Knister. </author> <title> Undoing actions in collaborative work. </title> <booktitle> In Proceedings of the Fourth Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 273-280, </pages> <address> Toronto, Canada, </address> <month> Oc-tober </month> <year> 1992. </year>
Reference-contexts: The proposed techniques have been successfully incorporated in DistEdit [22], a group editor toolkit, and a version of of SASSE [26, 4], a group editor. The basic ideas of our undo framework were presented in an earlier version of this paper <ref> [32] </ref>. This paper makes several additional contributions. First, it includes a detailed discussion of properties that editing operations should satisfy in order to provide reasonable, predictable undo behavior to the users. <p> Independently and about the same time as our work <ref> [32, 33] </ref>, undo schemes for collaborative systems were proposed by Berlage [5], Chaudhary and Dewan [6], and Abowd and Dix [2]. We provide a comparison with these schemes below.
Reference: [33] <author> A. Prakash and M. Knister. </author> <title> Undoing actions in collaborative work. </title> <type> Technical Report CSE-TR-125-92, </type> <institution> CSE Division, Department of EECS, The University of Michigan, </institution> <address> Ann Arbor, </address> <month> March </month> <year> 1992. </year>
Reference-contexts: Independently and about the same time as our work <ref> [32, 33] </ref>, undo schemes for collaborative systems were proposed by Berlage [5], Chaudhary and Dewan [6], and Abowd and Dix [2]. We provide a comparison with these schemes below. <p> We leave it to the reader to determine the Conflict and Transpose definitions for the other three combinations of these two operations. A definition of these two functions for general string insert and delete operations can be found in <ref> [33] </ref>. Example 2: Document Model Applied to Graphics Editors Let's assume that two of the commands that are stored on the history list of a graphical editor are * DrawCircle (x,y, radius, CircleID): Draw a circle at position (x,y) of the specified radius. <p> What should a user/system do when an undo command fails due to a conflict? We discuss two approaches to handle the problem. The first approach is for the system to determine all the conflicting operations (using a conflict list generation algorithm, such as the one described in <ref> [33] </ref>) and give the user an option to undo all the conflicting operations along with the requested operation. The user probably would have to be shown the effect of undoing the conflicting operations and this is an interesting user interface research issue.
Reference: [34] <author> Rajeev Rastogi, Henry F. Korth, and Abraham Silberschatz. </author> <title> Strict histories in object-based database systems. </title> <booktitle> In Proc. of ACM Conference on Principles of Database Systems, </booktitle> <year> 1993. </year>
Reference-contexts: One difference is that we allow for a Transpose function that modifies the operations when interchanging them; in current database theory, operations are not modified when they are reordered. As we will see, that complicates the algorithms for undo substantially. As in the database work on concurrency control <ref> [34] </ref>, we could have defined more elaborate conceptual models that distinguish between different types of write operations, thereby reducing conflicts.
Reference: [35] <author> R. Stallman. </author> <title> GNU Emacs Manual, </title> <year> 1985. </year>
Reference-contexts: Furthermore, the models do not address the issue that simply re-doing operations may not semantically make sense or may lead to unexpected results if an earlier operation is skipped. 2.3 History Undo The history undo scheme, used in the Emacs editor <ref> [35] </ref>, also allows undoing of a sequence of operations but, unlike the linear undo and US&R schemes, it appends the undo operations to the end of the history list. The undo operations in the history list are treated as any other operations, allowing them to be undone later if desired.
Reference: [36] <author> M. Stefik, G. Foster, D.G. Bobrow, K. Kahn, S. Lanning, and L. Suchman. </author> <title> Beyond the Chalkboard: Computer support for collaboration and problem solving in meetings. </title> <journal> Communications of the ACM, </journal> <volume> 30(1) </volume> <pages> 32-47, </pages> <month> Jan. </month> <year> 1987. </year>
Reference-contexts: In recent years, there has been a growing interest in the area of computer-supported cooperative work or groupware, the goal of which is to provide support for collaborative work among users in a shared workspace <ref> [1, 11, 12, 36] </ref>. An undo facility can be important in groupware systems for several 1 reasons.
Reference: [37] <author> R.E. Sterns, </author> <title> P.M. Lewis II, and D.J. Rosenkrantz. Concurrency controls for database systems. </title> <booktitle> In Proceedings of the 17th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 19-32, </pages> <year> 1976. </year>
Reference-contexts: The notion of position may not appear in the conceptual model if users, when editing, are expected to be interested in modifying the ordering of characters, rather than their specific positions in the document. Following the work on concurrency control in databases <ref> [13, 31, 31, 37] </ref>, one can define the notion of read-set and write-set for an operation in terms of its effect on the conceptual-model state of the document. The read-set of an operation done in a particular state is the set of objects/attributes/relations read by the operation. <p> Our notion of conflict is similar to the notion of conflict in the concurrency theory of database transactions <ref> [13, 30, 31, 37] </ref>. One difference is that we allow for a Transpose function that modifies the operations when interchanging them; in current database theory, operations are not modified when they are reordered. As we will see, that complicates the algorithms for undo substantially.
Reference: [38] <author> W. Teitelman. </author> <title> Interlisp Reference Manual. </title> <institution> Xerox Palo Alto Research Center, </institution> <year> 1978. </year>
Reference-contexts: Usually the redo of the last undo is also allowed (often implemented as an undo of the last undo) so that, in the above example, E can be redone. 2.2 Linear Undo Model and US&R Model The Interlisp system <ref> [38] </ref>, COPE [3], and Aloe [24] are some of the systems that used the linear undo model. The linear undo model allows undoing of a sequence of operations and keeps a pointer which tracks the next operation to be undone.
Reference: [39] <author> H. Thimbleby. </author> <booktitle> User Interface Design, </booktitle> <pages> pages 261-286. </pages> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: The availability of undo can also encourage users to experiment, acting not only as a safety net, but also allowing users to try out different approaches to solving problems using backtracking <ref> [39] </ref>. In recent years, there has been a growing interest in the area of computer-supported cooperative work or groupware, the goal of which is to provide support for collaborative work among users in a shared workspace [1, 11, 12, 36]. <p> For instance, the above operation might be stored as DelChar (10, c) on the history list, where c is the deleted character. Below, we summarize the primary methods for doing undo in single-user systems. A more detailed discussion of these techniques can be found in <ref> [39] </ref>, and a formalization of undo and redo facilities can be found in [41]. We also discuss undo techniques that have been proposed for groupware systems. 2.1 Single-step Undo Several early editors, including Lampson's Bravo for the Alto [23] and Hammer et al.'s ETUDE editor/formatter [19], provided single-step undo.
Reference: [40] <author> J.S. Vitter. US&R: </author> <title> A new framework for redoing. </title> <journal> IEEE Software, </journal> <pages> pages 39-52, </pages> <month> October </month> <year> 1984. </year>
Reference-contexts: So, if one wants to revert back to the original state without the F , it is not possible. One could undo F , but then D and E must be done manually. The Undo, Skip, Redo (US&R) model <ref> [40] </ref> supports redo like the linear undo model, but also allows a user-friendly skipping of some operations during the redo.
Reference: [41] <author> Y. Yang. </author> <title> A new conceptual model for interactive user recovery and and command reuse facilities. </title> <booktitle> In Proceedings of the CHI'88 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 165-170. </pages> <publisher> ACM Press, </publisher> <month> May </month> <year> 1988. </year> <month> 26 </month>
Reference-contexts: Below, we summarize the primary methods for doing undo in single-user systems. A more detailed discussion of these techniques can be found in [39], and a formalization of undo and redo facilities can be found in <ref> [41] </ref>. We also discuss undo techniques that have been proposed for groupware systems. 2.1 Single-step Undo Several early editors, including Lampson's Bravo for the Alto [23] and Hammer et al.'s ETUDE editor/formatter [19], provided single-step undo.
References-found: 41

