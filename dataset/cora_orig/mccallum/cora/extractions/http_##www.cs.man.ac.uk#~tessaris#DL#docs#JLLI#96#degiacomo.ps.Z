URL: http://www.cs.man.ac.uk/~tessaris/DL/docs/JLLI/96/degiacomo.ps.Z
Refering-URL: http://www.cs.man.ac.uk/~tessaris/DL/papers.html
Root-URL: http://www.cs.man.ac.uk
Email: degiacomo@dis.uniroma1.it  
Title: Eliminating "Converse" from Converse P DL  
Author: Giuseppe De Giacomo 
Keyword: Key words: Propositional dynamic logics, logics of programs, modal logics, decision procedures.  
Address: Via Salaria 113, 00198 Roma, Italy  
Affiliation: Dipartimento di Informatica e Sistemistica Universita di Roma "La Sapienza"  
Abstract: In this paper we show that it is possible to eliminate the "converse" operator from the propositional dynamic logic CP DL (Converse P DL), without compromising the soundness and completeness of inference for it. Specifically we present an encoding of CP DL formulae into P DL that eliminates the converse programs from a CP DL formula, but adds enough information so as not to destroy its original meaning with respect to satisfiability, validity, and logical implication. Notably, the resulting P DL formula is polynomially related to the original one. This fact allows one to build inference procedures for CP DL, by encoding CP DL formulae into P DL, and then running an inference procedure for P DL. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> M. Ben-Ari, J. Y. Halpern, and A. Pnueli. </author> <title> Deterministic propositional dynamic logic: finite models, complexity, and completeness. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 25 </volume> <pages> 402-417, </pages> <year> 1982. </year>
Reference-contexts: : : ; OE g ?iOE, with g 0, such that: all tests OE i ? occur in r; M; s j= hOE 1 ?; : : : ; OE g ?iOE; 6 The notion of path used here has the same role as the one of trajectory used in <ref> [1] </ref>, and that of execution sequence in [19]. However, the technical details of the various notions differ.
Reference: 2. <author> P. Blackburn and E. Spaan. </author> <title> A modal perspective on computational complexity of attribute value grammar. </title> <journal> Journal of Logic, Language and Information, </journal> <volume> 2 </volume> <pages> 129-169, </pages> <year> 1993. </year>
Reference-contexts: 1. Introduction Propositional dynamic logics are modal logics originally developed for specifying and reasoning on program schemata. Over the years, they have proved to be a valuable theoretical tool in many areas of Computer Science, Logic, Computational Linguistics, and Artificial Intelligence (e.g. <ref> [12, 18, 21, 20, 2, 10, 8, 17] </ref>). In particular many inference procedures, decidability results, and complexity results in such areas rely on research done within propositional dynamic logics. In this paper we consider two well-known propositional dynamic logics, namely P DL and CP DL.
Reference: 3. <author> G. De Giacomo. </author> <title> Decidability of Class-Based Knowledge Representation Formalisms. </title> <type> PhD thesis, </type> <institution> Dipartimento di Informatica e Sistemistica, Universita di Roma "La Sapienza", </institution> <year> 1995. </year>
Reference-contexts: For example, when propositional dynamic logics are applied in the context of knowledge representation formalisms based on classes and links, converse programs are necessary in order to navigate links in both directions <ref> [4, 5, 3] </ref>. 2 Giuseppe De Giacomo cal implication. Notably the resulting P DL formula is polynomially related to the original one. This encoding on the one hand helps to better understand the nature of the converse operator. <p> We discuss this issue further, at the end of the paper. In fact the technique used for deriving the encoding is quite general. The author has used such a technique to prove decidability and to characterize the computational complexity of several variants of propositional dynamic logics <ref> [4, 5, 3] </ref>, which include constructs as "graded modalities" [6, 22] and "nominals" [13, 9]. Intuitively, the technique is based on two main points. Let the "Source Logic" be SL and the "Target Logic" be T L (in this paper these logics are CP DL and P DL respectively): 1.
Reference: 4. <author> G. De Giacomo and M. Lenzerini. </author> <title> Boosting the correspondence between description logics and propositional dynamic logics. </title> <booktitle> In Proceedings of the Twelth National Conference on Artificial Intelligence (AAAI-94), </booktitle> <pages> pages 205-212, </pages> <year> 1994. </year>
Reference-contexts: For example, when propositional dynamic logics are applied in the context of knowledge representation formalisms based on classes and links, converse programs are necessary in order to navigate links in both directions <ref> [4, 5, 3] </ref>. 2 Giuseppe De Giacomo cal implication. Notably the resulting P DL formula is polynomially related to the original one. This encoding on the one hand helps to better understand the nature of the converse operator. <p> We discuss this issue further, at the end of the paper. In fact the technique used for deriving the encoding is quite general. The author has used such a technique to prove decidability and to characterize the computational complexity of several variants of propositional dynamic logics <ref> [4, 5, 3] </ref>, which include constructs as "graded modalities" [6, 22] and "nominals" [13, 9]. Intuitively, the technique is based on two main points. Let the "Source Logic" be SL and the "Target Logic" be T L (in this paper these logics are CP DL and P DL respectively): 1.
Reference: 5. <author> G. De Giacomo and M. Lenzerini. </author> <title> What's in an aggregate: foundation for description logics with tuples and set. </title> <booktitle> In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence (IJCAI-95), </booktitle> <pages> pages 801-807, </pages> <year> 1995. </year>
Reference-contexts: For example, when propositional dynamic logics are applied in the context of knowledge representation formalisms based on classes and links, converse programs are necessary in order to navigate links in both directions <ref> [4, 5, 3] </ref>. 2 Giuseppe De Giacomo cal implication. Notably the resulting P DL formula is polynomially related to the original one. This encoding on the one hand helps to better understand the nature of the converse operator. <p> We discuss this issue further, at the end of the paper. In fact the technique used for deriving the encoding is quite general. The author has used such a technique to prove decidability and to characterize the computational complexity of several variants of propositional dynamic logics <ref> [4, 5, 3] </ref>, which include constructs as "graded modalities" [6, 22] and "nominals" [13, 9]. Intuitively, the technique is based on two main points. Let the "Source Logic" be SL and the "Target Logic" be T L (in this paper these logics are CP DL and P DL respectively): 1.
Reference: 6. <author> M. Fattorosi-Barnaba and F. De Caro. </author> <title> Graded modalities I. </title> <journal> Studia Logica, </journal> <volume> 44 </volume> <pages> 197-221, </pages> <year> 1985. </year>
Reference-contexts: In fact the technique used for deriving the encoding is quite general. The author has used such a technique to prove decidability and to characterize the computational complexity of several variants of propositional dynamic logics [4, 5, 3], which include constructs as "graded modalities" <ref> [6, 22] </ref> and "nominals" [13, 9]. Intuitively, the technique is based on two main points. Let the "Source Logic" be SL and the "Target Logic" be T L (in this paper these logics are CP DL and P DL respectively): 1.
Reference: 7. <author> N. J. Fisher and R. E. Ladner. </author> <title> Propositional dynamic logic of regular programs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 18 </volume> <pages> 194-211, </pages> <year> 1979. </year>
Reference-contexts: In particular many inference procedures, decidability results, and complexity results in such areas rely on research done within propositional dynamic logics. In this paper we consider two well-known propositional dynamic logics, namely P DL and CP DL. P DL is the original propositional dynamic logic defined in <ref> [7] </ref>, whereas CP DL, also defined in [7], extends P DL by including a special construct to denote the "converse" of a program. <p> In this paper we consider two well-known propositional dynamic logics, namely P DL and CP DL. P DL is the original propositional dynamic logic defined in <ref> [7] </ref>, whereas CP DL, also defined in [7], extends P DL by including a special construct to denote the "converse" of a program. Such a construct allows for the expressing of facts about states preceding the current one, i.e. facts about states that can be reached by executing a given program backward 1 . <p> r 2 ; r r 2 ; (r fl 1 ) fl ; (OE?) = OE?. 5 That is, if a formula has a model, it has a model which is connected (see below). jlli155.tex; 4/03/1996; 15:58; no v.; p.5 Eliminating "Converse" from Converse P DL 5 The Fisher-Ladner closure <ref> [7] </ref> of a CP DL formula , denoted CL (), is the least set F such that 2 F and such that: OE 1 ^ OE 2 2 F ) OE 1 ; OE 2 2 F OE 2 F ) :OE 2 F (if OE is not of the form <p> Both the number and the size of the formulae in CL () are linearly bounded by the size of <ref> [7] </ref>. Note that, by definition, if OE 2 CL (), then CL (OE) CL (). Let us denote the empty sequence of programs by the program ", and define h"iOE = OE and ["]OE = OE. <p> Conclusion The logics P DL and CP DL share many characteristics, and many of the results for P DL extend to CP DL without difficulty. For instance the proofs of finite model property and decidability for P DL in <ref> [7] </ref> are easily extended to CP DL, jlli155.tex; 4/03/1996; 15:58; no v.; p.16 16 Giuseppe De Giacomo as well as the proof of EXPTIME-completeness of satisfiability in [15]. <p> To be more precise, the inference procedures for P DL based on the enumeration of models such as those in <ref> [7, 15] </ref> can be easily modified to accommodate converse programs. But these procedures are better suited for proving theoretical results than for use in practice, since they are inherently exponential, not only in the worst-case.
Reference: 8. <author> N. Friedman and J. Halpern. </author> <title> On the complexity of conditional logics. </title> <booktitle> In Proceedings of the Fourth International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> page 202-213, </pages> <year> 1994. </year>
Reference-contexts: 1. Introduction Propositional dynamic logics are modal logics originally developed for specifying and reasoning on program schemata. Over the years, they have proved to be a valuable theoretical tool in many areas of Computer Science, Logic, Computational Linguistics, and Artificial Intelligence (e.g. <ref> [12, 18, 21, 20, 2, 10, 8, 17] </ref>). In particular many inference procedures, decidability results, and complexity results in such areas rely on research done within propositional dynamic logics. In this paper we consider two well-known propositional dynamic logics, namely P DL and CP DL.
Reference: 9. <author> G. Gargov and V. Goranko. </author> <title> Modal logic with names. </title> <journal> Journal of Philosophical Logic, </journal> <volume> 22 </volume> <pages> 607-636, </pages> <year> 1993. </year>
Reference-contexts: In fact the technique used for deriving the encoding is quite general. The author has used such a technique to prove decidability and to characterize the computational complexity of several variants of propositional dynamic logics [4, 5, 3], which include constructs as "graded modalities" [6, 22] and "nominals" <ref> [13, 9] </ref>. Intuitively, the technique is based on two main points. Let the "Source Logic" be SL and the "Target Logic" be T L (in this paper these logics are CP DL and P DL respectively): 1.
Reference: 10. <author> J. Halpern and Y. Moses. </author> <title> A guide to completeness and complexity for modal logics of knowledge and belief. </title> <journal> Artificial Intelligence, </journal> <volume> 54 </volume> <pages> 319-379, </pages> <year> 1992. </year>
Reference-contexts: 1. Introduction Propositional dynamic logics are modal logics originally developed for specifying and reasoning on program schemata. Over the years, they have proved to be a valuable theoretical tool in many areas of Computer Science, Logic, Computational Linguistics, and Artificial Intelligence (e.g. <ref> [12, 18, 21, 20, 2, 10, 8, 17] </ref>). In particular many inference procedures, decidability results, and complexity results in such areas rely on research done within propositional dynamic logics. In this paper we consider two well-known propositional dynamic logics, namely P DL and CP DL.
Reference: 11. <author> D. Harel. </author> <title> Dynamic logic. </title> <booktitle> In Handbook of Philosophical Logic, </booktitle> <pages> pages 497-603. </pages> <address> D. </address> <publisher> Reidel Publishing Company, Oxford, </publisher> <year> 1984. </year>
Reference-contexts: 6j= OE M; s j= hriOE iff 9s 0 :(s; s 0 ) 2 R r and M; s 0 j= OE M; s j= [r]OE iff 8s 0 :(s; s 0 ) 2 R r implies M; s 0 j= OE 3 For surveys on propositional dynamic logics, see <ref> [11, 12] </ref> and also [18] 4 Also called "transition systems". jlli155.tex; 4/03/1996; 15:58; no v.; p.4 4 Giuseppe De Giacomo where, for every program r, the relation R r is defined by induction on the formation of r as follows: R P S fi S R R 1 ;R 2 =
Reference: 12. <author> D. Kozen and J. Tiuryn. </author> <title> Logics of programs. </title> <booktitle> In Handbook of Theoretical Computer Science, </booktitle> <pages> pages 790-840. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1990. </year>
Reference-contexts: 1. Introduction Propositional dynamic logics are modal logics originally developed for specifying and reasoning on program schemata. Over the years, they have proved to be a valuable theoretical tool in many areas of Computer Science, Logic, Computational Linguistics, and Artificial Intelligence (e.g. <ref> [12, 18, 21, 20, 2, 10, 8, 17] </ref>). In particular many inference procedures, decidability results, and complexity results in such areas rely on research done within propositional dynamic logics. In this paper we consider two well-known propositional dynamic logics, namely P DL and CP DL. <p> 6j= OE M; s j= hriOE iff 9s 0 :(s; s 0 ) 2 R r and M; s 0 j= OE M; s j= [r]OE iff 8s 0 :(s; s 0 ) 2 R r implies M; s 0 j= OE 3 For surveys on propositional dynamic logics, see <ref> [11, 12] </ref> and also [18] 4 Also called "transition systems". jlli155.tex; 4/03/1996; 15:58; no v.; p.4 4 Giuseppe De Giacomo where, for every program r, the relation R r is defined by induction on the formation of r as follows: R P S fi S R R 1 ;R 2 = <p> Observe that satisfiability of a formula OE can be reformulated in terms of logical implication simply as ; 6j= :OE. In turn a logical implication j= OE can be reformulated in terms of satisfiability, by making use of the following result <ref> [12] </ref>. THEOREM 1. Let be a finite set of CP DL axioms, and OE a CP DL formula.
Reference: 13. <author> S. Passy and T. Tinchev. </author> <title> An essay in combinatory dynamic logic. </title> <journal> Information and Computation, </journal> <volume> 93 </volume> <pages> 263-332, </pages> <year> 1991. </year>
Reference-contexts: In fact the technique used for deriving the encoding is quite general. The author has used such a technique to prove decidability and to characterize the computational complexity of several variants of propositional dynamic logics [4, 5, 3], which include constructs as "graded modalities" [6, 22] and "nominals" <ref> [13, 9] </ref>. Intuitively, the technique is based on two main points. Let the "Source Logic" be SL and the "Target Logic" be T L (in this paper these logics are CP DL and P DL respectively): 1.
Reference: 14. <author> V. R. Pratt. </author> <title> A practical decision method for propositional dynamic logic. </title> <booktitle> In Proceedings of the 10th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 326-337, </pages> <year> 1978. </year>
Reference-contexts: But these procedures are better suited for proving theoretical results than for use in practice, since they are inherently exponential, not only in the worst-case. In contrast, inference procedures for P DL such as those in <ref> [14, 16] </ref>, based on tableaux methods, which are much more efficient in practical cases, are difficult to modify to cope with converse programs. The difficulty can be intuitively grasped by observing how these procedures attempt to build a model of a P DL formula in order to check its satisfiability.
Reference: 15. <author> V. R. Pratt. </author> <title> Models of program logics. </title> <booktitle> In Proceedings of the 20th IEEE Symposium on the Foundations of Computer Science, </booktitle> <pages> pages 115-122, </pages> <year> 1979. </year>
Reference-contexts: For instance the proofs of finite model property and decidability for P DL in [7] are easily extended to CP DL, jlli155.tex; 4/03/1996; 15:58; no v.; p.16 16 Giuseppe De Giacomo as well as the proof of EXPTIME-completeness of satisfiability in <ref> [15] </ref>. However, while efficient in practical cases inference procedures have been successfully developed for P DL, extending them to CP DL has proved to be a difficult task, and to the best of our knowledge had been unsuccessful till now. <p> To be more precise, the inference procedures for P DL based on the enumeration of models such as those in <ref> [7, 15] </ref> can be easily modified to accommodate converse programs. But these procedures are better suited for proving theoretical results than for use in practice, since they are inherently exponential, not only in the worst-case.
Reference: 16. <author> V. R. Pratt. </author> <title> A near-optimal method for reasoning about action. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 20 </volume> <pages> 231-255, </pages> <year> 1980. </year>
Reference-contexts: But these procedures are better suited for proving theoretical results than for use in practice, since they are inherently exponential, not only in the worst-case. In contrast, inference procedures for P DL such as those in <ref> [14, 16] </ref>, based on tableaux methods, which are much more efficient in practical cases, are difficult to modify to cope with converse programs. The difficulty can be intuitively grasped by observing how these procedures attempt to build a model of a P DL formula in order to check its satisfiability.
Reference: 17. <author> K. Schild. </author> <title> A correspondence theory for terminological logics: preliminary report. </title> <booktitle> In Proceedings of the Twelth International Joint Conference on Artificial Intelligence (IJCAI-91), </booktitle> <pages> pages 466-471, </pages> <year> 1991. </year>
Reference-contexts: 1. Introduction Propositional dynamic logics are modal logics originally developed for specifying and reasoning on program schemata. Over the years, they have proved to be a valuable theoretical tool in many areas of Computer Science, Logic, Computational Linguistics, and Artificial Intelligence (e.g. <ref> [12, 18, 21, 20, 2, 10, 8, 17] </ref>). In particular many inference procedures, decidability results, and complexity results in such areas rely on research done within propositional dynamic logics. In this paper we consider two well-known propositional dynamic logics, namely P DL and CP DL.
Reference: 18. <author> C. Stirling. </author> <title> Modal and temporal logic. </title> <booktitle> In Handbook of Logic in Computer Science, </booktitle> <pages> pages 477-563. </pages> <publisher> Clarendon Press, Oxford, </publisher> <year> 1992. </year>
Reference-contexts: 1. Introduction Propositional dynamic logics are modal logics originally developed for specifying and reasoning on program schemata. Over the years, they have proved to be a valuable theoretical tool in many areas of Computer Science, Logic, Computational Linguistics, and Artificial Intelligence (e.g. <ref> [12, 18, 21, 20, 2, 10, 8, 17] </ref>). In particular many inference procedures, decidability results, and complexity results in such areas rely on research done within propositional dynamic logics. In this paper we consider two well-known propositional dynamic logics, namely P DL and CP DL. <p> j= hriOE iff 9s 0 :(s; s 0 ) 2 R r and M; s 0 j= OE M; s j= [r]OE iff 8s 0 :(s; s 0 ) 2 R r implies M; s 0 j= OE 3 For surveys on propositional dynamic logics, see [11, 12] and also <ref> [18] </ref> 4 Also called "transition systems". jlli155.tex; 4/03/1996; 15:58; no v.; p.4 4 Giuseppe De Giacomo where, for every program r, the relation R r is defined by induction on the formation of r as follows: R P S fi S R R 1 ;R 2 = R r 1 ffi
Reference: 19. <author> R. S. Streett. </author> <title> Propositional dynamic logic of looping and converse is elementary decidable. </title> <journal> Information and Control, </journal> <volume> 54 </volume> <pages> 121-141, </pages> <year> 1982. </year>
Reference-contexts: g 0, such that: all tests OE i ? occur in r; M; s j= hOE 1 ?; : : : ; OE g ?iOE; 6 The notion of path used here has the same role as the one of trajectory used in [1], and that of execution sequence in <ref> [19] </ref>. However, the technical details of the various notions differ.
Reference: 20. <author> J. Van Benthem and J. Bergstra. </author> <title> Logic of transition systems. </title> <journal> Journal of Logic, Language and Information, </journal> <volume> 3(4) </volume> <pages> 247-283, </pages> <year> 1995. </year>
Reference-contexts: 1. Introduction Propositional dynamic logics are modal logics originally developed for specifying and reasoning on program schemata. Over the years, they have proved to be a valuable theoretical tool in many areas of Computer Science, Logic, Computational Linguistics, and Artificial Intelligence (e.g. <ref> [12, 18, 21, 20, 2, 10, 8, 17] </ref>). In particular many inference procedures, decidability results, and complexity results in such areas rely on research done within propositional dynamic logics. In this paper we consider two well-known propositional dynamic logics, namely P DL and CP DL.
Reference: 21. <editor> J. Van Benthem, J. Van Eijck, and V. Stebletsova. </editor> <title> Modal logic, transition systems and processes. </title> <journal> Journal of Logic and Computation, </journal> <volume> 4(5) </volume> <pages> 811-855, </pages> <year> 1994. </year>
Reference-contexts: 1. Introduction Propositional dynamic logics are modal logics originally developed for specifying and reasoning on program schemata. Over the years, they have proved to be a valuable theoretical tool in many areas of Computer Science, Logic, Computational Linguistics, and Artificial Intelligence (e.g. <ref> [12, 18, 21, 20, 2, 10, 8, 17] </ref>). In particular many inference procedures, decidability results, and complexity results in such areas rely on research done within propositional dynamic logics. In this paper we consider two well-known propositional dynamic logics, namely P DL and CP DL.
Reference: 22. <author> W. van der Hoek and M. de Rijke. </author> <title> Counting objects. </title> <journal> Journal of Logic and Computation, </journal> <volume> 5(3) </volume> <pages> 325-345, </pages> <year> 1995. </year> <note> jlli155.tex; 4/03/1996; 15:58; no v.; p.18 </note>
Reference-contexts: In fact the technique used for deriving the encoding is quite general. The author has used such a technique to prove decidability and to characterize the computational complexity of several variants of propositional dynamic logics [4, 5, 3], which include constructs as "graded modalities" <ref> [6, 22] </ref> and "nominals" [13, 9]. Intuitively, the technique is based on two main points. Let the "Source Logic" be SL and the "Target Logic" be T L (in this paper these logics are CP DL and P DL respectively): 1.
References-found: 22

