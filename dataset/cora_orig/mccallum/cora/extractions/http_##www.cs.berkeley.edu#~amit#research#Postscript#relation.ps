URL: http://www.cs.berkeley.edu/~amit/research/Postscript/relation.ps
Refering-URL: http://www.cs.berkeley.edu/~amit/research/index.html
Root-URL: http://www.cs.berkeley.edu
Title: Inter-channel relationships in multi-party real-time communication  
Author: Amit Gupta and Mark Moran 
Affiliation: Tenet Group University of California at Berkeley  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> David Anderson. </author> <title> Meta-scheduling for continuous media. </title> <type> Technical Report TR UCB/CSD 90/599, </type> <institution> University of California, Berkeley, </institution> <address> CA, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: Other important relationships exist between channels, such as overlapped routing, disjoint-path routing, inter-stream synchronization, and relative priorities. While others have recognized the importance of some of these relationships in the past (e.g. <ref> [1, 5] </ref>), they have proposed special case mechanisms for specifying a single relationship. Channel groups, however, provide a unifying abstraction and an easily-extensible interface to allow applications to express these relationships to the network. <p> Da Costa Carmo et al. introduced a multimedia flow grouping, called bundle, as a "parallel grouping of several flows within a given temporal range" [5] . The strands of Rangan and Vin [9] and the ropes of the Berkeley DASH project <ref> [1] </ref> are also similar to bundles. Campbell et al. describe an orchestration service for coordinating multiple related transport virtual circuits for synchronization and for linking QoS degradations together [4]. There are at least three proposals for specifying these relationships for RSVP [11].
Reference: [2] <author> Anindo Banerjea. </author> <title> Fault management for real-time networks. </title> <type> PhD dissertation, </type> <institution> University of Cali-fornia at Berkeley, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: Also, the related parameters relationship described below will benefit from a similar facility. No type-specific description is required for this group. Disjoint path routing Several techniques for providing fault-tolerance require a group of channels to be routed over paths that are as disjoint as possible <ref> [2] </ref>. To support these techniques, we can define the disjoint routing type of relationship. Again, no type-specific description is required.
Reference: [3] <author> Anindo Banerjea, Domenico Ferrari, Bruce Mah, Mark Moran, Dinesh Verma, and Hui Zhang. </author> <title> The Tenet real-time protocol suite: Design, implementation, and experiences. </title> <type> Technical Report TR-94-059, </type> <institution> International Computer Science Institute, Berkeley, California, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: 1 Introduction A distributed real-time application typically consists of a number of real-time connections (hereafter called channels to distinguish them from non real-time connections). Traditional real-time communication schemes (e.g., <ref> [3, 10] </ref>) assume that different channels are independent, when in reality, important relationships often exist between them [7]. We introduce a channel group abstraction that allows network clients to describe these relationships explicitly to the network service provider.
Reference: [4] <author> Andrew Campbell, Geoffrey Coulson, Francisco Garcia, and David Hutchison. </author> <title> A continuous media transport and orchestration service. </title> <booktitle> Proceedings of SIGCOMM 92, </booktitle> <address> Baltimore, MD, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: The application can reduce its buffering requirements if the network considers the two channels together and gives them similar delay bounds. We call this type of relationship related parameters. This type of relationship can also be used to link congestion-induced QoS degradations on related channels, as in <ref> [4] </ref>. The type-specific description consists of a predicate that links the parameters of interest among the channels. <p> The strands of Rangan and Vin [9] and the ropes of the Berkeley DASH project [1] are also similar to bundles. Campbell et al. describe an orchestration service for coordinating multiple related transport virtual circuits for synchronization and for linking QoS degradations together <ref> [4] </ref>. There are at least three proposals for specifying these relationships for RSVP [11]. RSVP filters are somewhat analogous to resource sharing groups; for route-bunding, the proposal is for the application to use the explicit routes mechanism, to specify a new route that overlaps with the previous routes.
Reference: [5] <author> Luiz F. Rust da Costa Carmo, Pierre de Saqui-Sannes, and Jean-Pierre Courtiat. </author> <title> Basic synchronization concepts in multimedia systems. </title> <booktitle> Proceedings of Third International Workshop on Network and Operating Systems Support for Distributed Audio and Video, </booktitle> <address> San Diego, CA, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Other important relationships exist between channels, such as overlapped routing, disjoint-path routing, inter-stream synchronization, and relative priorities. While others have recognized the importance of some of these relationships in the past (e.g. <ref> [1, 5] </ref>), they have proposed special case mechanisms for specifying a single relationship. Channel groups, however, provide a unifying abstraction and an easily-extensible interface to allow applications to express these relationships to the network. <p> Da Costa Carmo et al. introduced a multimedia flow grouping, called bundle, as a "parallel grouping of several flows within a given temporal range" <ref> [5] </ref> . The strands of Rangan and Vin [9] and the ropes of the Berkeley DASH project [1] are also similar to bundles. Campbell et al. describe an orchestration service for coordinating multiple related transport virtual circuits for synchronization and for linking QoS degradations together [4].
Reference: [6] <author> Amit Gupta, Wendy Heffner, Mark Moran, and Clemens Szyperski. </author> <title> Multi-party real-time communication in computer networks. </title> <booktitle> Collected abstracts of 4th International Workshop on Network and Operating Systems Support for Digital Audio and Video, </booktitle> <pages> pages 37-39, </pages> <address> Lancaster, UK, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: The network, then, is free to use the group specification or the specifications of the individual channels at any server (node or link) in the network. We use this type of relationship in our multi-party real-time communication protocols <ref> [6] </ref>. Simulations show that resource sharing techniques appreciably increase the connection acceptance rate [7]. Route overlapping A number of applications would benefit from a network provision that permits them to request that the routes for a group of channels overlap as much as possible.
Reference: [7] <author> Amit Gupta, Winnie Howe, Mark Moran, and Quyen Nguyen. </author> <title> Resource sharing in multi-party realtime communication. </title> <booktitle> To appear in Proceedings of INFOCOM 95, </booktitle> <address> Boston, MA, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: 1 Introduction A distributed real-time application typically consists of a number of real-time connections (hereafter called channels to distinguish them from non real-time connections). Traditional real-time communication schemes (e.g., [3, 10]) assume that different channels are independent, when in reality, important relationships often exist between them <ref> [7] </ref>. We introduce a channel group abstraction that allows network clients to describe these relationships explicitly to the network service provider. For example, in a typical video conference only one or two speakers will be active at a time. <p> We use this type of relationship in our multi-party real-time communication protocols [6]. Simulations show that resource sharing techniques appreciably increase the connection acceptance rate <ref> [7] </ref>. Route overlapping A number of applications would benefit from a network provision that permits them to request that the routes for a group of channels overlap as much as possible. For example, the gains due to resource sharing [7] can improve significantly if the routing system tries to maximize the <p> show that resource sharing techniques appreciably increase the connection acceptance rate <ref> [7] </ref>. Route overlapping A number of applications would benefit from a network provision that permits them to request that the routes for a group of channels overlap as much as possible. For example, the gains due to resource sharing [7] can improve significantly if the routing system tries to maximize the overlap between the routes of channels that belong to the same resource sharing group. Also, the related parameters relationship described below will benefit from a similar facility. No type-specific description is required for this group.
Reference: [8] <author> Amit Gupta and Mark Moran. </author> <title> Channel groups: A unifying abstraction for specifying inter-stream relationships. </title> <type> Technical Report TR-93-015, </type> <institution> International Computer Science Institute, Berkeley, California, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: Also, when video is coded using hierarchical coding, it is more important that the base layer data gets across to the 2 receivers. The examples above illustrate the establishment type of relationship; the interested reader is referred to <ref> [8] </ref> for further details about this relationship. 3 Concluding remarks Many researchers have proposed many different abstractions for capturing inter-channel relationships. Da Costa Carmo et al. introduced a multimedia flow grouping, called bundle, as a "parallel grouping of several flows within a given temporal range" [5] .
Reference: [9] <author> Venkat Rangan and Harrick N. Vin. </author> <title> Designing file systems for digital video and audio. </title> <booktitle> Proceedngs of the 13th ACM symposium on operating systems principles, </booktitle> <address> Monterey, CA, </address> <month> oct </month> <year> 1991. </year> <month> 3 </month>
Reference-contexts: Da Costa Carmo et al. introduced a multimedia flow grouping, called bundle, as a "parallel grouping of several flows within a given temporal range" [5] . The strands of Rangan and Vin <ref> [9] </ref> and the ropes of the Berkeley DASH project [1] are also similar to bundles. Campbell et al. describe an orchestration service for coordinating multiple related transport virtual circuits for synchronization and for linking QoS degradations together [4].
Reference: [10] <author> Claudio Topolcic. </author> <title> Experimental internet stream protocol, </title> <note> version 2 (ST-II), October 1990. RFC 1190. </note>
Reference-contexts: 1 Introduction A distributed real-time application typically consists of a number of real-time connections (hereafter called channels to distinguish them from non real-time connections). Traditional real-time communication schemes (e.g., <ref> [3, 10] </ref>) assume that different channels are independent, when in reality, important relationships often exist between them [7]. We introduce a channel group abstraction that allows network clients to describe these relationships explicitly to the network service provider.
Reference: [11] <author> Lixia Zhang, Steve Deering, Deborah Estrin, Scott Shenker, and Daniel Zappala. RSVP: </author> <title> A new resource reservation protocol. </title> <journal> IEEE Networks Magazine, </journal> <volume> 31(9) </volume> <pages> 8-18, </pages> <month> September </month> <year> 1993. </year> <month> 4 </month>
Reference-contexts: Campbell et al. describe an orchestration service for coordinating multiple related transport virtual circuits for synchronization and for linking QoS degradations together [4]. There are at least three proposals for specifying these relationships for RSVP <ref> [11] </ref>. RSVP filters are somewhat analogous to resource sharing groups; for route-bunding, the proposal is for the application to use the explicit routes mechanism, to specify a new route that overlaps with the previous routes.
References-found: 11

