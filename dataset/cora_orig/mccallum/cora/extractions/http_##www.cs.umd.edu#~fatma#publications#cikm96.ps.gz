URL: http://www.cs.umd.edu/~fatma/publications/cikm96.ps.gz
Refering-URL: http://www.cs.umd.edu/~fatma/publications.html
Root-URL: 
Email: ffatma,nural,pinar,cem,asumang@srdc.metu.edu.tr  
Title: Dynamic Query Optimization on a Distributed Object Management Platform  
Author: Fatma Ozcan Sena Nural Pinar Koksal Cem Evrendilek Asuman Dogac 
Note: This work is partially being supported by the Turk-ish State Planning Organization, Project Number: AFP-03-12DPT.95K120500, by the Scientific and Technical Research Council of Turkey, Project Number: EEEAG-Yazilim5, by Mo-torola (USA) and by Sevgi Holding  
Address: 06531 Ankara Turkey  (Turkey)  
Affiliation: Software Research and Development Center Middle East Technical University (METU)  
Abstract: In this paper, we describe a dynamic query optimization technique for a multidatabase system, namely MIND, implemented on a DOM environment. Dynamic query optimization, which schedules intersite operations at run-time, fits better to such an environment since it benefits from location transparency provided by the DOM framework. In this way, the dynamic changes in the configuration of system resources such as a relocated DBMS or a new mirror to an existing DBMS, do not affect the optimized query execution in the system. Furthermore, the uncertainty in estimating the appearance times (i.e., the execution time of the global subquery at a local DBMS) of partial results are avoided because there is no need for the dynamic optimizer to know the logical cost parameters of the underlying local DBMS. In scheduling the intersite operations a statistical decision mechanism is used. We also consider the schema integration information to make room for further query optimization. For this purpose, a method is presented that forms global query graphs by taking the schema integration information into account which is then used by the dynamic query optimizer. The proposed scheme tries to exploit the inherent parallelism in the system as much as possible. The performance of the developed method is compared with two other most related techniques and the results of the experiments indicate that the dynamic query optimization technique presented in this paper has a better performance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Brodie and S. Ceri, </author> <title> "On Intelligent and Cooperative Information Systems: A Workshop Summary", </title> <journal> Int. Journal of Intelligent and Cooperative Information Systems, </journal> <volume> Vol. 1, No:2, </volume> <year> 1992 </year>
Reference-contexts: The dynamic optimizer proposed, schedules the intersite operations of the query graphs of the hypergraphs. 5 Dynamic Query Optimization It is anticipated that DOM architecture is the technology of the future since it provides solutions to the problems of distributed and heterogeneous information systems <ref> [1, 8] </ref>. Such a middleware makes easy integration of a broad range of systems possible that not only contain DBMSs but also file systems, spreadsheets and workflow systems. Since DOM architectures provide location transparent access to the objects, it is necessary to develop query optimization strategies based on this fact.
Reference: [2] <author> U. Dayal, </author> <title> "Processing Queries over Generalization Hierarchies in a Multidatabase System", </title> <booktitle> International Conf. on Very Large Data Bases </booktitle>
Reference-contexts: In a multidatabase system when a global query is decomposed, two types of queries [14] are produced. One is the queries against the export schemas, the other is the post-processing queries <ref> [2] </ref> that combine the results returned by the LDBMSs. Due to autonomy of the local systems, there is no way of optimizing the subqueries against the export schemas. Only the execution of post 117 processing queries can be optimized.
Reference: [3] <author> A. Dogac, et. al, </author> <title> "METU Object-Oriented DBMS", Demo Description, </title> <booktitle> in Proc. of ACM Sigmod Intl. Conf. on Management of Data, </booktitle> <address> Minneapolis, </address> <month> May </month> <year> 1994 </year>
Reference-contexts: There is one implementation 118 for each of the local DBMSs; currently supported systems include Oracle7 1 , Sybase 2 , Adabas D 3 and MOOD (METU Object-Oriented Database System) <ref> [3, 5] </ref>. An overall view of MIND is provided in Figure 1. The basic components of the global layer in MIND consists of the following classes: Global Database Agent (GDA) class, Schema Information Manager (SIM) class and the Query Processor (QP) class.
Reference: [4] <author> A. Dogac, et. al, </author> <title> "METU Interoperable Database System", </title> <journal> ACM SIGMOD Record, </journal> <volume> 24(3), </volume> <month> September, </month> <year> 1995. </year>
Reference-contexts: Yet, in order to exploit the location transparency feature of a DOM architecture, changes in multidatabase query processing are necessary. In this paper, we describe a dynamic query optimization technique implemented for a multidatabase system, namely MIND <ref> [4, 6, 7] </ref>, realized on a DOM environment, namely CORBA (Common Object Request Broker Architecture) [18], which is a standard developed by OMG (Object Management Group). In a multidatabase system when a global query is decomposed, two types of queries [14] are produced. <p> appearance times of the partial results are estimated by applying synthetic database calibration [9] and an execution plan is generated before sending the subqueries to the local DBMSs. 3 MIND Architecture The dynamic query optimization scheme described in this paper has been implemented within the scope of the MIND project <ref> [4, 6, 7] </ref>. MIND is a multidatabase system prototype whose architecture is based on OMG's Object Management Architecture (OMA). The components of the MIND are designed as CORBA objects communicating with each other through an ORB. In MIND, local DBMSs are encapsulated in a generic database object.
Reference: [5] <author> A. Dogac, et. al, </author> <title> "METU Object-Oriented DBMS Kernel", </title> <booktitle> in Proc. of Intl. Conf on Database and Expert Systems Applications, London, September 1995 (Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995). </year>
Reference-contexts: There is one implementation 118 for each of the local DBMSs; currently supported systems include Oracle7 1 , Sybase 2 , Adabas D 3 and MOOD (METU Object-Oriented Database System) <ref> [3, 5] </ref>. An overall view of MIND is provided in Figure 1. The basic components of the global layer in MIND consists of the following classes: Global Database Agent (GDA) class, Schema Information Manager (SIM) class and the Query Processor (QP) class.
Reference: [6] <author> A. Dogac, et. al, </author> <title> "A Multidatabase System Implementation on CORBA", </title> <booktitle> 6th Intl. Workshop on Research Issues in Data Engineering (RIDE-NDS '96), </booktitle> <address> New Orleans, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: Yet, in order to exploit the location transparency feature of a DOM architecture, changes in multidatabase query processing are necessary. In this paper, we describe a dynamic query optimization technique implemented for a multidatabase system, namely MIND <ref> [4, 6, 7] </ref>, realized on a DOM environment, namely CORBA (Common Object Request Broker Architecture) [18], which is a standard developed by OMG (Object Management Group). In a multidatabase system when a global query is decomposed, two types of queries [14] are produced. <p> appearance times of the partial results are estimated by applying synthetic database calibration [9] and an execution plan is generated before sending the subqueries to the local DBMSs. 3 MIND Architecture The dynamic query optimization scheme described in this paper has been implemented within the scope of the MIND project <ref> [4, 6, 7] </ref>. MIND is a multidatabase system prototype whose architecture is based on OMG's Object Management Architecture (OMA). The components of the MIND are designed as CORBA objects communicating with each other through an ORB. In MIND, local DBMSs are encapsulated in a generic database object.
Reference: [7] <author> A. Dogac, et. al, </author> <title> "METU Interoperable Database System", Demo Description, </title> <booktitle> in Proc. of ACM Sigmod Intl. Conf. on Management of Data, </booktitle> <address> Montreal, </address> <month> June </month> <year> 1996 </year>
Reference-contexts: Yet, in order to exploit the location transparency feature of a DOM architecture, changes in multidatabase query processing are necessary. In this paper, we describe a dynamic query optimization technique implemented for a multidatabase system, namely MIND <ref> [4, 6, 7] </ref>, realized on a DOM environment, namely CORBA (Common Object Request Broker Architecture) [18], which is a standard developed by OMG (Object Management Group). In a multidatabase system when a global query is decomposed, two types of queries [14] are produced. <p> appearance times of the partial results are estimated by applying synthetic database calibration [9] and an execution plan is generated before sending the subqueries to the local DBMSs. 3 MIND Architecture The dynamic query optimization scheme described in this paper has been implemented within the scope of the MIND project <ref> [4, 6, 7] </ref>. MIND is a multidatabase system prototype whose architecture is based on OMG's Object Management Architecture (OMA). The components of the MIND are designed as CORBA objects communicating with each other through an ORB. In MIND, local DBMSs are encapsulated in a generic database object.
Reference: [8] <author> A. Dogac, C. Dengi and T. Ozsu, </author> <title> "Building Interoper-able Database Management Systems on Distributed Object Management Platforms", </title> <note> Technical Report 95-12-01 Software R&D Center, METU, </note> <month> October </month> <year> 1995 </year>
Reference-contexts: The dynamic optimizer proposed, schedules the intersite operations of the query graphs of the hypergraphs. 5 Dynamic Query Optimization It is anticipated that DOM architecture is the technology of the future since it provides solutions to the problems of distributed and heterogeneous information systems <ref> [1, 8] </ref>. Such a middleware makes easy integration of a broad range of systems possible that not only contain DBMSs but also file systems, spreadsheets and workflow systems. Since DOM architectures provide location transparent access to the objects, it is necessary to develop query optimization strategies based on this fact.
Reference: [9] <author> W. Du, R. Krishnamurthy and M-C. Shan, </author> <title> "Query Optimization in Heterogeneous DBMS", </title> <booktitle> Proc. of the 18th Int. Conf. on VLDB, </booktitle> <month> August </month> <year> 1992. </year>
Reference-contexts: In this technique, the appearance times of the partial results are estimated by applying synthetic database calibration <ref> [9] </ref> and an execution plan is generated before sending the subqueries to the local DBMSs. 3 MIND Architecture The dynamic query optimization scheme described in this paper has been implemented within the scope of the MIND project [4, 6, 7]. <p> As shown in Figure 5, the difference between the tree-balancing algorithm and the dynamic technique increases as the number of partial results increase. In Figure 5, dynamic query optimization technique proposed in this paper is slightly better than the technique proposed in [12, 11] which requires database calibration <ref> [9] </ref>. It should be noted that database calibration is a costly process.
Reference: [10] <author> W. Du, M-C Shan and U. Dayal, </author> <title> "Reducing Multi-database Query Response Time by Tree Balancing", </title> <booktitle> In ACM SIGMOD Intl. Conf. on Management of Data, </booktitle> <year> 1995. </year>
Reference-contexts: Although the query optimization is performed in parallel, this algorithm produces only serial query execution plans. Furthermore, the algorithm does not consider the plans with bushy inners. In <ref> [10] </ref>, a technique is suggested to reduce query response time in multidatabase systems. In this paper, the authors propose an algorithm that first produces an optimal left deep join tree and then reduces the response time using simple tree transformations. <p> The overhead incurred by these algorithms are O (n 2 ), n being the number of nodes in the query graph. The algorithms do not guarantee that the resulting tree is optimal with respect to the total response time <ref> [10] </ref>. The algorithm that produces left deep join trees does not consider the bushy inners. The tree transformation algorithms suggested in [10] try to reduce the response time by finding cost reducing bushy inners. <p> The algorithms do not guarantee that the resulting tree is optimal with respect to the total response time <ref> [10] </ref>. The algorithm that produces left deep join trees does not consider the bushy inners. The tree transformation algorithms suggested in [10] try to reduce the response time by finding cost reducing bushy inners. However, since they start with a left deep join tree, they may miss the least costly bushy inners. In [11, 12], a cost based query optimization strategy is given. <p> It is necessary to take a union of these remaining results to get the final result according to the semantics of the global query. 6 Performance Evaluation In this section, performance comparisons of the proposed optimization technique with the two most related techniques are presented. The first algorithm <ref> [10] </ref> tries to reduce the response time by tree balancing. And the second algorithm [11, 12] tries to maximize the parallelism in execution by also considering the parameters stemming from the nature of multidatabases. <p> For this purpose, a method to produce a set of query graphs, corresponding to the schema integration information, is proposed. The performance results show that the proposed technique is an effective one and performs better than the algorithm given in <ref> [10] </ref>. Although the proposed technique performs almost the same as the technique given in [11, 12], it does not require costly operations such as database calibration. As a future work, we plan to investigate the effect of the changes in the constant a on the execution costs.
Reference: [11] <author> C. Evrendilek, </author> <title> "Multidatabase Query Processing and Optimization", </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Engineering, </institution> <note> METU, in Preparation, </note> <year> 1996. </year>
Reference-contexts: The tree transformation algorithms suggested in [10] try to reduce the response time by finding cost reducing bushy inners. However, since they start with a left deep join tree, they may miss the least costly bushy inners. In <ref> [11, 12] </ref>, a cost based query optimization strategy is given. In this strategy, the optimization algorithm tries to maximize the parallelism in execution while taking the federated nature of the problem into account. <p> The first algorithm [10] tries to reduce the response time by tree balancing. And the second algorithm <ref> [11, 12] </ref> tries to maximize the parallelism in execution by also considering the parameters stemming from the nature of multidatabases. Both of these techniques perform static query optimization in multidatabase systems, that is, the execution plan is decided at compile-time. <p> As shown in Figure 5, the difference between the tree-balancing algorithm and the dynamic technique increases as the number of partial results increase. In Figure 5, dynamic query optimization technique proposed in this paper is slightly better than the technique proposed in <ref> [12, 11] </ref> which requires database calibration [9]. It should be noted that database calibration is a costly process. <p> The performance results show that the proposed technique is an effective one and performs better than the algorithm given in [10]. Although the proposed technique performs almost the same as the technique given in <ref> [11, 12] </ref>, it does not require costly operations such as database calibration. As a future work, we plan to investigate the effect of the changes in the constant a on the execution costs.
Reference: [12] <author> C. Evrendilek, A. Dogac, S. Nural and F. Ozcan, </author> <title> "Query Decomposition, Optimization and Processing in Multidatabase Systems", </title> <booktitle> in Proc. of Workshop on Next Generation Information Technologies and Systems, </booktitle> <address> Naharia, Israel, </address> <month> June, </month> <year> 1995. </year>
Reference-contexts: The tree transformation algorithms suggested in [10] try to reduce the response time by finding cost reducing bushy inners. However, since they start with a left deep join tree, they may miss the least costly bushy inners. In <ref> [11, 12] </ref>, a cost based query optimization strategy is given. In this strategy, the optimization algorithm tries to maximize the parallelism in execution while taking the federated nature of the problem into account. <p> The first algorithm [10] tries to reduce the response time by tree balancing. And the second algorithm <ref> [11, 12] </ref> tries to maximize the parallelism in execution by also considering the parameters stemming from the nature of multidatabases. Both of these techniques perform static query optimization in multidatabase systems, that is, the execution plan is decided at compile-time. <p> As shown in Figure 5, the difference between the tree-balancing algorithm and the dynamic technique increases as the number of partial results increase. In Figure 5, dynamic query optimization technique proposed in this paper is slightly better than the technique proposed in <ref> [12, 11] </ref> which requires database calibration [9]. It should be noted that database calibration is a costly process. <p> The performance results show that the proposed technique is an effective one and performs better than the algorithm given in [10]. Although the proposed technique performs almost the same as the technique given in <ref> [11, 12] </ref>, it does not require costly operations such as database calibration. As a future work, we plan to investigate the effect of the changes in the constant a on the execution costs.
Reference: [13] <author> John E. Freund, </author> <title> Modern Elementary Statistics, </title> <publisher> Prentice-Hall, </publisher> <year> 1988 </year>
Reference-contexts: We need to find out those values with large positive deviation. We 121 can determine such values by using the mean and the standard deviation of this population <ref> [13] </ref>. The problem can now be stated as follows: Associate a threshold value with a partial result R i by finding the mean and standard deviation of the population, consisting of the weight functions of all intersite operations that R i is involved in.
Reference: [14] <author> W. Kim, </author> <title> Modern Database Systems, </title> <address> Adison-Wesley, </address> <year> 1995 </year>
Reference-contexts: In a multidatabase system when a global query is decomposed, two types of queries <ref> [14] </ref> are produced. One is the queries against the export schemas, the other is the post-processing queries [2] that combine the results returned by the LDBMSs. Due to autonomy of the local systems, there is no way of optimizing the subqueries against the export schemas.
Reference: [15] <author> G.M. Lohman, et. al, </author> <title> "Query Processing in R fl ", Query Processing in Database Systems, </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Communication cost and conversion cost for intermediate results are taken to be proportional to the sizes of intermediate results. The left deep tree used as the initial input for the Hybrid Algorithm is obtained as in R* <ref> [15] </ref>. In the second phase of the experiments the effect of the deviation of the estimated costs from their actual values is explored. For this purpose, programs are run for five different deviations from the estimations.
Reference: [16] <author> F. Ozcan, </author> <title> "Dynamic Query Optimization on a Distributed Object Management Platform", M.Sc. </title> <type> Thesis, </type> <institution> Dept. of Computer Engineering, METU, </institution> <month> February </month> <year> 1996. </year>
Reference-contexts: However, since the difference between a near-optimum and a bad execution plan may be enormous, finding an effective technique for optimizing post-processing queries is essential. Dynamic query optimization technique described in this paper is an attempt in this respect <ref> [16] </ref>. The technique proposed uses the available partial results at run-time without dictating an execution site. In scheduling the intersite operations between the partial results, the conditions between these results should be considered. Additionally, a decision mechanism is required to find out the execution order. <p> Next, this formula is converted into disjunctive normal form (DNF) and then Query Graph Construction Algorithm (QGCA) is applied to the conjunctions. The QGCA employs a set of rules in constructing query graphs to satisfy the constraints <ref> [16] </ref>. 120 The output of QGCA is a hypergraph whose nodes contain query graphs and are connected to each other by join conditions. <p> Since DOM architectures provide location transparent access to the objects, it is necessary to develop query optimization strategies based on this fact. The dynamic query optimization scheme <ref> [16] </ref>, which is a step in this direction, uses the available partial results at run-time, instead of producing an execution plan based on the estimated execution time of subqueries. <p> if no operation involving the available result can be scheduled insert the object into a list of finished objects else if it is the second level of scheduling find a partial result that can be combined with the available result and schedule the operation The detailed algorithm is given in <ref> [16] </ref>. In the second level of scheduling, threshold is not used, because calculating the weight functions of these joins require that the cardinality and some other statistics be available. However, the required data are available only when the graph is contracted to a single 122 algorithms node.
Reference: [17] <author> C. Ozkan, A. Dogac, M. Altinel, </author> <title> "A Cost Model for Path Expressions in Object-Oriented Queries", </title> <journal> Journal of Database Management, Vol.7, </journal> <volume> No.3, </volume> <month> June </month> <year> 1996. </year>
Reference-contexts: The sizes of the partial results changes from 4K to 1M and the selectivities are calculated with respect to cardinal-ity and unique cardinality values assuming uniform distribution for each partial result. The calculation of the cardinality and unique cardinality values for intermediate results are performed as in <ref> [17] </ref>. Initial appearance times for the partial results are also randomly chosen assuming that the sizes of the partial results are uncorrelated with the appearance times but correlated with the type of the global subquery.
Reference: [18] <author> Object Management Group, </author> <title> The Common Object Services Specification, Volume 1, OMG Document Number 94.1.1, </title> <month> January </month> <year> 1994. </year>
Reference-contexts: In this paper, we describe a dynamic query optimization technique implemented for a multidatabase system, namely MIND [4, 6, 7], realized on a DOM environment, namely CORBA (Common Object Request Broker Architecture) <ref> [18] </ref>, which is a standard developed by OMG (Object Management Group). In a multidatabase system when a global query is decomposed, two types of queries [14] are produced.
Reference: [19] <author> B. Salzberg. </author> <title> File Structures: An Analytical Approach, </title> <publisher> Prentice Hall Inc., </publisher> <year> 1988. </year>
Reference-contexts: For the estimation of IP cost (R i ; R j ), if the operation is join, three join methods, namely, hash-partition, sort-merge and nested loops with hashing are used and the cost calculations to select the least costly of these three join methods are performed as in <ref> [19] </ref>. If the operation is outerjoin then nested loops method is used.
Reference: [20] <author> S. Salza, G. Barone and T. Morzy, </author> <title> "Distributed Query Optimization in Loosely Coupled Multidatabase Systems", </title> <booktitle> Proc. of Intl. Conf. on Database Theory, </booktitle> <year> 1995. </year> <month> 124 </month>
Reference-contexts: Finally, Section 7 contains the conclusions and future work. 2 Related Work As we have stated, all of the previous work done in multidatabase query processing have concentrated in static optimization of post-processing queries. In <ref> [20] </ref>, a distributed query optimization algorithm is presented for multidatabases.
References-found: 20

