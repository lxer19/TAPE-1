URL: http://www.cs.pitt.edu/~gupta/research/Dist/icdcs98.ps
Refering-URL: http://www.cs.pitt.edu/~gupta/research/dist.html
Root-URL: 
Title: A Protocol for Removing Communication Intrusion in Monitored Distributed Systems  
Author: Wanqing Wu Madalene Spezialetti Rajiv Gupta 
Address: Pittsburgh Pittsburgh, PA 15260 Hartford, CT 06106 Pittsburgh, PA 15260  
Affiliation: Dept. of Comp. Science Math., Comp. and Eng. Center Dept. of Comp. Science University of Pittsburgh Trinity College University of  
Abstract: The development of a distributed application that exhibits both desired functionality as well as performance is a complex task. Therefore, the construction of monitoring tools to assist in the development of complex distributed applications is of great practical significance. For example, monitoring tools can be used to observe the behavior and fine tune the performance. One of the fundamental problems that must be addressed is to ensure that the monitoring tool is able to report the true behavior of an application, that is, it is able to monitor the application non-intrusively. In this paper, we identify the intrusive effects of monitoring on communication in an arbitrary point-to-point network and present the enhanced communication protocol for on-line communication intrusion removal. Our experiments demonstrates that the intrinsic overhead of a distributed system integrated with online intrusion removal techniques is 0.43%, 98.3% of intrusion on the accumulated number of events and 97.2% of intrusion on the sequence of event occurrences can be removed successfully. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Cristain, </author> <title> "Probabilistic Clock Synchronization," </title> <journal> Distributed Computing, </journal> <volume> 3 </volume> <pages> 146-158, </pages> <year> 1989. </year>
Reference-contexts: Our techniquess require synchronized clocks and we assume that the clocks at different sites are perfectly synchronized using the algorithm in <ref> [1] </ref>. 3.1 Maintaining Intrusion Time To remove intrusion at critical actions, we require a mechanism for tracking the progress of computation and communication activities of each site.
Reference: [2] <author> J.A. Gannon, K.J. Williams, M.S. Andersland, J.E. Lummp, and T.L. Casavant, </author> <title> "Using Perturbation Tracking to Compensate for Intrusion Propagation in Message Passing Systems," </title> <booktitle> 14th Int'l Conf. on Dist. Computing Sys., </booktitle> <address> Poland, </address> <year> 1994. </year>
Reference-contexts: One approach to reducing the impact of monitoring is through the use of hardware support [5]. However, the special purpose or redundant hardware required by these systems limits their application. A generally applicable approach explored by Malony et al. [4] and Casavant et al. <ref> [2] </ref> for minimizing the intrusive effects of monitoring is to use software techniques for estimating the true execution time of a computation by compensating for intrusion-induced effects. Off-line processing of execution traces, collected by running the instrumented program, is carried out to compensate for intrusive effects of monitoring.
Reference: [3] <author> L. Lamport, </author> <title> "Time, Clocks and the Ordering of Events in Distributed Systems," </title> <journal> Comm. of the ACM, </journal> <volume> 21(7), </volume> <pages> pages 558-565, </pages> <year> 1978. </year>
Reference: [4] <author> A. Malony and D. Reed, </author> <title> "Models for performance perturbation analysis," </title> <booktitle> ACM/ONR Workshop on Parallel and Dist. Debugging, </booktitle> <pages> pages 15-25, </pages> <year> 1991. </year>
Reference-contexts: One approach to reducing the impact of monitoring is through the use of hardware support [5]. However, the special purpose or redundant hardware required by these systems limits their application. A generally applicable approach explored by Malony et al. <ref> [4] </ref> and Casavant et al. [2] for minimizing the intrusive effects of monitoring is to use software techniques for estimating the true execution time of a computation by compensating for intrusion-induced effects.
Reference: [5] <author> J.P. Tsai, K.F. Fang, and H. Chen, </author> <title> "A Noninvasive Architecture to Monitor Real-Time Distributed Systems," </title> <journal> IEEE Computer, </journal> <volume> 23(3) </volume> <pages> 11-23, </pages> <year> 1990. </year>
Reference-contexts: One approach to reducing the impact of monitoring is through the use of hardware support <ref> [5] </ref>. However, the special purpose or redundant hardware required by these systems limits their application.
Reference: [6] <author> K.M. Chandy and J. Misra, </author> <title> "Distributed Simulation: </title>
Reference-contexts: Thus, characteristics such as the fairness and load balancing capabilities of a scheduling algorithm cannot be studied using the above approach. Another alternative approach to distributed program analysis, which does not involve runtime monitoring, is program simulation <ref> [6, 7] </ref>. The performance of the conservative approach [6] highly depends on lookahead, that is, the prediction of future execution. The optimistic approach [7] suffers from the overhead of rolling back in case of errors and usually needs hardware support for good performance. <p> Thus, characteristics such as the fairness and load balancing capabilities of a scheduling algorithm cannot be studied using the above approach. Another alternative approach to distributed program analysis, which does not involve runtime monitoring, is program simulation [6, 7]. The performance of the conservative approach <ref> [6] </ref> highly depends on lookahead, that is, the prediction of future execution. The optimistic approach [7] suffers from the overhead of rolling back in case of errors and usually needs hardware support for good performance.
References-found: 6

