URL: ftp://ftp.cs.utah.edu/techreports/1996/UUCS-96-001.ps.Z
Refering-URL: ftp://ftp.cs.utah.edu/techreports/1996/index.html
Root-URL: 
Email: E-mail: fswanson,stollerg@cs.utah.edu  
Title: Low Latency Workstation Cluster Communications Using Sender-Based Protocols  
Author: Mark R. Swanson Leigh B. Stoller 
Date: January 24, 1996  
Address: Salt Lake City, UT 84112, USA  
Affiliation: Department of Computer Science University of Utah  
Pubnum: UUCS-96-001  
Abstract: The use of workstations on a local area network to form scalable multicomputers has become quite common. A serious performance bottleneck in such "carpet clusters" is the communication protocol that is used to send data between nodes. We report on the design and implementation of a class of communication protocols, known as sender-based, in which the sender specifies the locations at which messages are placed in the receiver's address space. The protocols are shown to deliver near-link latency and near-link bandwidth using Medusa FDDI controllers, within the BSD 4.3 and HP-UX 9.01 operating systems. The protocols are also shown to be flexible and powerful enough to support common distributed programming models, including but not limited to RPC, while maintaining expected standards of system and application security and integrity. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Banks, D., and Prudence, M. </author> <title> A High-Performance Network Architecture for a PA-RISC Workstation. </title> <journal> IEEE Journal on Selected Areas in Communications 11, </journal> <month> 2 (February </month> <year> 1993), </year> <pages> 191-202. </pages>
Reference-contexts: The operating systems were our modified versions of HP-UX 9.01 and BSD 4.3. The workstations were connected to an FDDI ring using Medusa <ref> [1] </ref> interfaces; no other machines were on the ring. We will present two sets of measurements: * basic timings of the interconnect; * micro-benchmarks of our protocols. 6.1 Basic Interconnect Characteristics At the device level, our prototype is currently implemented for the Medusa FDDI controller.
Reference: [2] <author> Clark, D., Jacobson, V., Romkey, J., and Salwen, H. </author> <title> An Analysis of TCP Processing Overhead. </title> <journal> IEEE Communications Magazine 11, </journal> <month> 2 (June </month> <year> 1989), </year> <pages> 23-29. </pages>
Reference-contexts: The latency of these fabrics is sufficiently low that the time spent even in the control processing portion of standard general purpose protocols, notably IP-based protocols such as TCP and UDP, will soon dwarf the transmission time <ref> [2] </ref>. Examples of the fabrics we consider potentially viable are Fibre Channel [6] and R2 [5]. <p> This specification enables the receiving end to place the (packets comprising a) message directly into a user-space buffer. Others <ref> [4, 2] </ref> have shown that avoiding copying of large messages is of crucial importance given the limited memory bandwidths in modern workstations.
Reference: [3] <author> Dally, W., et al. </author> <title> The Message-Driven Processor: A Multicomputer Processing Node with Efficient Mechanisms. </title> <booktitle> IEEE Micro 12, </booktitle> <month> 2 (April </month> <year> 1992), </year> <pages> 23-39. </pages>
Reference-contexts: Examples of the fabrics we consider potentially viable are Fibre Channel [6] and R2 [5]. Our target systems, clusters of commodity workstations running essentially standard operating systems, rules out approaches such as those taken by Alewife [8], Typhoon [12], *T [11], or MDP <ref> [3] </ref>, which rely on custom processors and/or non-standard operating systems. Continued reliance on standard protocols can impose unnecessary communication costs. The services required by applications on these clusters are often far more modest than those provided by the standard protocols. For example, consider a client-server application.
Reference: [4] <author> Dalton, C., Watson, G., Banks, D., Calamvokis, C., Edwards, A., and Lumley, J. Afterburner: </author> <title> A Network-Independent Card Provides Architectural Support for High-Performance Protocols. </title> <journal> IEEE Network (July 1993), </journal> <pages> 36-43. </pages>
Reference-contexts: This specification enables the receiving end to place the (packets comprising a) message directly into a user-space buffer. Others <ref> [4, 2] </ref> have shown that avoiding copying of large messages is of crucial importance given the limited memory bandwidths in modern workstations.
Reference: [5] <author> Davis, A., Cherkasova, L., Kotov, V., Robinson, I., and Rokicki, T. </author> <title> R2 A Damped Adaptive Multiprocessor Interconnection Component. </title> <booktitle> In Proceedings of the University of Washington Conference on Multiprocessor Interconnects (May 1994). </booktitle>
Reference-contexts: Examples of the fabrics we consider potentially viable are Fibre Channel [6] and R2 <ref> [5] </ref>. Our target systems, clusters of commodity workstations running essentially standard operating systems, rules out approaches such as those taken by Alewife [8], Typhoon [12], *T [11], or MDP [3], which rely on custom processors and/or non-standard operating systems. Continued reliance on standard protocols can impose unnecessary communication costs.
Reference: [6] <author> Fibre Channel Association. </author> <title> Fibre Channel: Connection to the Future, </title> <year> 1994. </year>
Reference-contexts: The latency of these fabrics is sufficiently low that the time spent even in the control processing portion of standard general purpose protocols, notably IP-based protocols such as TCP and UDP, will soon dwarf the transmission time [2]. Examples of the fabrics we consider potentially viable are Fibre Channel <ref> [6] </ref> and R2 [5]. Our target systems, clusters of commodity workstations running essentially standard operating systems, rules out approaches such as those taken by Alewife [8], Typhoon [12], *T [11], or MDP [3], which rely on custom processors and/or non-standard operating systems.
Reference: [7] <author> Hewlett-Packard Co. </author> <title> PA-RISC 1.1 Architecture and Instruction Set Reference Manual, </title> <month> February </month> <year> 1994. </year>
Reference-contexts: The two kernels are structurally very similar, since they share common roots. They have diverged significantly at the detailed level, however. In both cases, those architectural features of the PA-RISC <ref> [7] </ref> that facilitated increased efficiency were employed. We assume any serious attempt to achieve low latency communication will need to be sensitive to the capabilities of the host system. Two performance-enhancing modifications to normal operating system facilities are described here.
Reference: [8] <author> Kubiatowicz, J., and Agarwal, A. </author> <title> Anatomy of a Message in the Alewife Multiprocessor. </title> <booktitle> In Proceedings of the 7th ACM Internatonal Conference on Supercomputing (July 1993). </booktitle>
Reference-contexts: Examples of the fabrics we consider potentially viable are Fibre Channel [6] and R2 [5]. Our target systems, clusters of commodity workstations running essentially standard operating systems, rules out approaches such as those taken by Alewife <ref> [8] </ref>, Typhoon [12], *T [11], or MDP [3], which rely on custom processors and/or non-standard operating systems. Continued reliance on standard protocols can impose unnecessary communication costs. The services required by applications on these clusters are often far more modest than those provided by the standard protocols.
Reference: [9] <author> Maeda, C., and Bershad, B. </author> <title> Protocol Service Decomposition for High-Performance Networking. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating System Principles (December 1993), </booktitle> <pages> pp. 244-255. </pages>
Reference-contexts: Even relatively complex protocols can be made efficient through careful implementation [13, 10]. One approach to reducing protocol handling overhead is to allow the application to perform high frequency operations, usually sending and receiving messages, directly, without involving the OS <ref> [9] </ref>. While this approach can produce good results, it is often difficult to ensure security and fairness within a general purpose computing environment. Another approach, which we have pursued, is to leave these functions in the OS, but to engineer efficient implementations of them.
Reference: [10] <author> Mckenney, P. E., and Dove, K. F. </author> <title> Efficient Demultiplexing of Incoming TCP Packets. </title> <booktitle> In Proceedings of the 1992 Conference on Communications Architectures, Protocols, and Applications (August 1992), </booktitle> <pages> pp. 269-279. </pages>
Reference-contexts: Regardless of the semantics of a given protocol, its performance is generally more strongly influenced by its specific implementation than the semantics it imposes. Even relatively complex protocols can be made efficient through careful implementation <ref> [13, 10] </ref>. One approach to reducing protocol handling overhead is to allow the application to perform high frequency operations, usually sending and receiving messages, directly, without involving the OS [9].
Reference: [11] <author> Nikhil, R. S., Papdopoulous, G., and Arvind. </author> <title> *T: A Multithreaded Massively Parallel Architecture. </title> <booktitle> In Proceedings of the 19th Annual International Symposium on Computer Architecture (May 1992), </booktitle> <pages> pp. 156-167. </pages>
Reference-contexts: Examples of the fabrics we consider potentially viable are Fibre Channel [6] and R2 [5]. Our target systems, clusters of commodity workstations running essentially standard operating systems, rules out approaches such as those taken by Alewife [8], Typhoon [12], *T <ref> [11] </ref>, or MDP [3], which rely on custom processors and/or non-standard operating systems. Continued reliance on standard protocols can impose unnecessary communication costs. The services required by applications on these clusters are often far more modest than those provided by the standard protocols. For example, consider a client-server application.
Reference: [12] <author> Reinhardt, S., Larus, J., and Wood, D. Tempest and Typhoon: </author> <title> User-Level Shared Memory. </title> <booktitle> In Proceedings of the 21st Annual International Symposium on Computer Architecture (April 1994), </booktitle> <pages> pp. 325-336. </pages>
Reference-contexts: Examples of the fabrics we consider potentially viable are Fibre Channel [6] and R2 [5]. Our target systems, clusters of commodity workstations running essentially standard operating systems, rules out approaches such as those taken by Alewife [8], Typhoon <ref> [12] </ref>, *T [11], or MDP [3], which rely on custom processors and/or non-standard operating systems. Continued reliance on standard protocols can impose unnecessary communication costs. The services required by applications on these clusters are often far more modest than those provided by the standard protocols.
Reference: [13] <author> Thekkath, C., and Levy, H. </author> <title> Limits to Low-Latency Communications on High-Speed Networks. </title> <journal> ACM Transactions on Computer Systems 11, </journal> <month> 2 (May </month> <year> 1993), </year> <pages> 179-203. </pages>
Reference-contexts: Regardless of the semantics of a given protocol, its performance is generally more strongly influenced by its specific implementation than the semantics it imposes. Even relatively complex protocols can be made efficient through careful implementation <ref> [13, 10] </ref>. One approach to reducing protocol handling overhead is to allow the application to perform high frequency operations, usually sending and receiving messages, directly, without involving the OS [9].
Reference: [14] <author> Wilkes, J. </author> <title> Hamlyn an interface for sender-based communication. </title> <type> Tech. Rep. </type> <institution> HPL-OSR-92-13, Hewlett-Packard Research Laboratory, </institution> <month> November </month> <year> 1992. </year> <month> 10 </month>
Reference-contexts: Low-level implementation concerns are addressed in Section 4. In Section 5, the use of sample applications to validate the protocols is discussed. Section 6 presents timings of a prototype implementation. 2 Sender-Based Protocols The core concept of sender-based <ref> [14] </ref> protocols lies in the specification, by the sender, of the location at which a message is to be placed in the receiver's memory. This specification enables the receiving end to place the (packets comprising a) message directly into a user-space buffer.
References-found: 14

