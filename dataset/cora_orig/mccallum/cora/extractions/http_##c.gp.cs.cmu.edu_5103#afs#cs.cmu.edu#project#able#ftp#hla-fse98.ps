URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/project/able/ftp/hla-fse98.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/project/able/www/paper_abstracts/hla-fse98.html
Root-URL: http://www.cs.cmu.edu
Email: roballen@btv.ibm.com  garlan@cs.cmu.edu  jivers@cs.cmu.edu  
Title: Formal Modeling and Analysis of the HLA Component Integration Standard  
Author: Robert J. Allen David Garlan James Ivers 
Keyword: Component integration standards, component-based software, protocol families, software architecture, formal specification.  
Address: AQPV 862F 1000 River Road Essex Junction, VT 05452 USA  Pittsburgh, PA 15213 USA  Pittsburgh, PA 15213 USA  
Affiliation: IBM, Dept.  School of Computer Science Carnegie Mellon University  School of Computer Science Carnegie Mellon University  
Abstract: An increasingly important trend in the engineering of complex systems is the design of component integration standards. Such standards define rules of interaction and shared communication infrastructure that permit composition of systems out of independently-developed parts. A problem with these standards is that it is often difficult to understand exactly what they require and provide, and to analyze them in order to understand their deeper properties. In this paper we use our experience in modeling the High Level Architecture (HLA) for Distributed Simulation to show how one can capture the structured protocol inherent in an integration standard as a formal architectural model that can be analyzed to detect anomalies, race conditions, and deadlocks. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Abowd, R. Allen, and D. Garlan. </author> <title> Formalizing style to understand descriptions of software architecture. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <month> October </month> <year> 1995. </year>
Reference-contexts: Also closely related is work on formal definitions of architectural styles. In particular, Moriconi and colleagues describe techniques for refining between styles [15]. In other work carried out by this paper's authors, we have considered how Z and Wright can be used to define styles <ref> [1, 2] </ref>. The work described in this paper differs from previous work in this area in that it represents a much larger-scale application of architectural modeling than has been reported in the literature, and introduces new techniques to carry it out.
Reference: [2] <author> R. Allen. </author> <title> Formalism and informalism in architectural style: A case study. </title> <booktitle> In Proc of the First Intl. Workshop on Architectures for Software Systems, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: Also closely related is work on formal definitions of architectural styles. In particular, Moriconi and colleagues describe techniques for refining between styles [15]. In other work carried out by this paper's authors, we have considered how Z and Wright can be used to define styles <ref> [1, 2] </ref>. The work described in this paper differs from previous work in this area in that it represents a much larger-scale application of architectural modeling than has been reported in the literature, and introduces new techniques to carry it out.
Reference: [3] <author> R. Allen. </author> <title> A Formal Approach to Software Architecture. </title> <type> PhD thesis, CMU, </type> <institution> School of Computer Science, </institution> <month> January </month> <year> 1997. </year> <note> CMU/SCS Report CMU-CS-97-144. </note>
Reference-contexts: For this paper, however, we will restrict our presentation to just those parts of Wright that concern the specification of the HLA. For further details, the reader is referred to <ref> [3] </ref>. it distinguishes between initiating an event and observing an event. An event that is initiated by a process is written with an overbar. <p> See <ref> [3] </ref> for technical details. 4 The full Wright specification is about 15 pages long [5]. For the purposes of this paper we present only certain parts of the model to highlight its key features.
Reference: [4] <author> R. Allen and D. Garlan. </author> <title> A formal basis for architectural connection. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <month> July </month> <year> 1997. </year>
Reference-contexts: Specifically, we use the Wright architectural description language (ADL) as the modeling language <ref> [4] </ref> to define the HLA. <p> Unlike some ADLs, however, Wright permits the explicit definition of new connector types, and provides formal, automatable criteria for checking the consistency of those types <ref> [4] </ref>. 2 In Wright a connector type has a name, an optional set of parameters, a set of role descriptions, and a glue description. The name identifies the kind of connector. The parameters provide instantiation values for the connector.
Reference: [5] <author> R. J. Allen, D. Garlan, and J. Ivers. </author> <title> A Wright specification of the HLA. </title> <type> Technical report, </type> <institution> Carnegie Mellon University, School of Computer Science, </institution> <year> 1998. </year>
Reference-contexts: See [3] for technical details. 4 The full Wright specification is about 15 pages long <ref> [5] </ref>. For the purposes of this paper we present only certain parts of the model to highlight its key features. There are also a few other differences arising from the fact that our final model includes fixes for several of the problems identified in this paper. them.
Reference: [6] <author> E. Clarke et al. </author> <title> Automatic verification of finite state concurrent systems using temporal logic specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <month> April </month> <year> 1986. </year>
Reference-contexts: The third area is work on protocol specification and analysis. There has been considerable research on ways to specify protocols using a variety of formalisms, such as I/O Automata [13], SMV <ref> [6] </ref>, SDL [11], and Petri Nets [16]. While our research shares many of the same goals, there are notable differences. First, most protocol analysis assumes you are starting with a complete description of the protocol.
Reference: [7] <author> C. A. Damon, R. Melton, R. J. Allen, E. Bigelow, J. M. Ivers, and D. Garlan. </author> <title> Formalizing a specification for analysis: The HLA ownership properties. </title> <type> Technical Report CMU-CS-98-149, </type> <institution> Carnegie Mellon University, School of Computer Science, </institution> <year> 1998. </year>
Reference-contexts: This suggests that future work on modeling architectural standards can and should exploit other complementary approaches and tools for architectural modeling and analysis. Indeed, in our own work we we also formalized parts of the specification using StateCharts (which appear in [23]) and Z <ref> [7] </ref>. In particular, we used these formalisms to handle the state-oriented aspects of the system. For example, a key property that should be maintained by a federation is that there is at most one owner for every simulated object in the system.
Reference: [8] <editor> Failures Divergence Refinement: </editor> <title> FDR2 User Manual. Formal Systems (Europe) Ltd., </title> <publisher> Oxford, </publisher> <address> England, </address> <note> version 2.22 edition, </note> <month> October </month> <year> 1997. </year>
Reference-contexts: We discovered about a dozen such anomalies using a combination of careful review and the facilities of a commercial model checker for CSP, called FDR <ref> [8] </ref>. To make use of the model checker we used two primary techniques. The first was to look for potential deadlocks in parts of the specification. 5 When the tool detects "deadlock" it provides a trace showing where the process goes awry.
Reference: [9] <author> D. Garlan, R. Allen, and J. Ockerbloom. </author> <title> Architectural mismatch: Why reuse is so hard. </title> <journal> IEEE Software, </journal> <month> November </month> <year> 1995. </year>
Reference-contexts: Component integration standards greatly simplify the construction of complex systems from existing parts. Since components share assumptions about the nature of interaction with their environment many of the general problems of component mismatch do not arise <ref> [9] </ref>. Thus it is easier for imple mentors to combine parts written by multiple vendors and to add new parts to existing systems. Moreover, the use of a standard's supporting infrastructure can substantially reduce the amount of custom code that must be written to support communication between those parts.
Reference: [10] <author> C. A. R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference-contexts: As we will see in the case of the HLA, this separation allows us to distinguish between the interface that each simulation must conform to, and the coordinating behavior of the run-time infrastructure. Wright uses a variant of CSP <ref> [10] </ref> to define role and glue behavior. Each such specification defines a pattern of events (called a process) using operators for sequencing ("!" and ";"), choice ("u" and " "), and parallel composition ("k"). Appendix A contains more details on the parts of CSP that we use in this paper.
Reference: [11] <author> G. J. Holzmann. </author> <title> Design and Validation of Computer Protocols. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: The third area is work on protocol specification and analysis. There has been considerable research on ways to specify protocols using a variety of formalisms, such as I/O Automata [13], SMV [6], SDL <ref> [11] </ref>, and Petri Nets [16]. While our research shares many of the same goals, there are notable differences. First, most protocol analysis assumes you are starting with a complete description of the protocol.
Reference: [12] <author> D. C. Luckham, L. M. Augustin, J. J. Kenney, J. Veera, D. Bryan, and W. Mann. </author> <title> Specification and analysis of system architecture using Rapide. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> April </month> <year> 1995. </year>
Reference-contexts: The first area is the growing field of architectural description and analysis. Currently there are many architecture description languages (ADLs) and tools to support their use (such as <ref> [12, 19, 15, 14] </ref>). While ADLs are far from being in widespread use, there have been several examples of their application to realistic case studies. This paper contributes to this body of case studies, but pushes on a different dimension|namely, the application of architectural modeling to component integration standards. <p> This paper contributes to this body of case studies, but pushes on a different dimension|namely, the application of architectural modeling to component integration standards. Among existing ADLs the one used here, Wright, is most closely related to Rapide <ref> [12] </ref>, as both use event patterns to describe abstract behavior of architectures. Indeed, parts of the HLA have been modeled by the developers of Rapide. Wright differs from Rapide insofar as it supports definition of connectors as explicit semantic entities and permits static analysis using model checking tools.
Reference: [13] <author> N. A. Lynch and M. R. Tuttle. </author> <title> An introduction to input/output automata. </title> <type> Technical Report MIT/LCS/TM-373, </type> <institution> MIT LCS, </institution> <year> 1988. </year>
Reference-contexts: The third area is work on protocol specification and analysis. There has been considerable research on ways to specify protocols using a variety of formalisms, such as I/O Automata <ref> [13] </ref>, SMV [6], SDL [11], and Petri Nets [16]. While our research shares many of the same goals, there are notable differences. First, most protocol analysis assumes you are starting with a complete description of the protocol.
Reference: [14] <author> J. Magee, N. Dulay, S. Eisenbach, and J. Kramer. </author> <title> Specifying distributed software architectures. </title> <booktitle> In Proceedings ESEC'95, </booktitle> <month> September </month> <year> 1995. </year>
Reference-contexts: The first area is the growing field of architectural description and analysis. Currently there are many architecture description languages (ADLs) and tools to support their use (such as <ref> [12, 19, 15, 14] </ref>). While ADLs are far from being in widespread use, there have been several examples of their application to realistic case studies. This paper contributes to this body of case studies, but pushes on a different dimension|namely, the application of architectural modeling to component integration standards.
Reference: [15] <author> M. Moriconi, X. Qian, and R. Riemenschneider. </author> <title> Correct architecture refinement. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> April </month> <year> 1995. </year>
Reference-contexts: The first area is the growing field of architectural description and analysis. Currently there are many architecture description languages (ADLs) and tools to support their use (such as <ref> [12, 19, 15, 14] </ref>). While ADLs are far from being in widespread use, there have been several examples of their application to realistic case studies. This paper contributes to this body of case studies, but pushes on a different dimension|namely, the application of architectural modeling to component integration standards. <p> An example close in spirit to our work is that of Sul-livan and colleagues, who used Z to model and analyze the Microsoft COM standard [21]. Also closely related is work on formal definitions of architectural styles. In particular, Moriconi and colleagues describe techniques for refining between styles <ref> [15] </ref>. In other work carried out by this paper's authors, we have considered how Z and Wright can be used to define styles [1, 2].
Reference: [16] <author> J. Peterson. </author> <title> Petri nets. </title> <journal> ACM Computing Surveys, </journal> <month> September </month> <year> 1977. </year>
Reference-contexts: The third area is work on protocol specification and analysis. There has been considerable research on ways to specify protocols using a variety of formalisms, such as I/O Automata [13], SMV [6], SDL [11], and Petri Nets <ref> [16] </ref>. While our research shares many of the same goals, there are notable differences. First, most protocol analysis assumes you are starting with a complete description of the protocol. In contrast, in our work the protocol is typically implicit in the API of some integration standard documentation.
Reference: [17] <institution> RASSP project overview, </institution> <note> Version 1.0. CSIS TR, </note> <institution> Dept of Electrical Engineering, University of Virginia, </institution> <year> 1994. </year>
Reference-contexts: More recent examples include a growing number of domain-specific integration standards in areas as diverse as programming environments, robotics control [20], and signal processing <ref> [17] </ref>. Additionally some aspects of general-purpose object-oriented systems, such as CORBA, COM/DCOM/OLE/ActiveX, and JavaBeans function as component integration standards. Component integration standards greatly simplify the construction of complex systems from existing parts.
Reference: [18] <author> A. W. Roscoe. </author> <title> The Theory and Practice of Concur-rency. </title> <publisher> Prentice Hall, </publisher> <year> 1998. </year>
Reference-contexts: is parameterized by the number of federates (nfeds) in a joint simulation; there can be an arbitrary number of 3 Wright uses a non-standard interpretation of external choice in the case in which one of the branches is x: specifically, the choice remains external, unlike, for example, the treatment in <ref> [18] </ref>. See [3] for technical details. 4 The full Wright specification is about 15 pages long [5]. For the purposes of this paper we present only certain parts of the model to highlight its key features.
Reference: [19] <author> M. Shaw, R. DeLine, D. V. Klein, T. L. Ross, D. M. Young, and G. Zelesnik. </author> <title> Abstractions for software architecture and tools to support them. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> April </month> <year> 1995. </year>
Reference-contexts: The first area is the growing field of architectural description and analysis. Currently there are many architecture description languages (ADLs) and tools to support their use (such as <ref> [12, 19, 15, 14] </ref>). While ADLs are far from being in widespread use, there have been several examples of their application to realistic case studies. This paper contributes to this body of case studies, but pushes on a different dimension|namely, the application of architectural modeling to component integration standards.
Reference: [20] <author> D. B. Stewart, R. A. Volpe, and P. K. Khosla. </author> <title> Integration of real-time software modules for reconfigurable sensor-based control systems. </title> <booktitle> In Proc 1992 IEEE/RSJ Intl Conf on Intelligent Robots and Systems. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> July </month> <year> 1992. </year>
Reference-contexts: More recent examples include a growing number of domain-specific integration standards in areas as diverse as programming environments, robotics control <ref> [20] </ref>, and signal processing [17]. Additionally some aspects of general-purpose object-oriented systems, such as CORBA, COM/DCOM/OLE/ActiveX, and JavaBeans function as component integration standards. Component integration standards greatly simplify the construction of complex systems from existing parts.
Reference: [21] <author> K. Sullivan, J. Socha, and M. Marchukov. </author> <title> Using formal methods to reason about architectural standards. </title> <booktitle> In Proceedings of the 1997 International Conference on Software Engineering, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: The second related area is research on the analysis of standards. An example close in spirit to our work is that of Sul-livan and colleagues, who used Z to model and analyze the Microsoft COM standard <ref> [21] </ref>. Also closely related is work on formal definitions of architectural styles. In particular, Moriconi and colleagues describe techniques for refining between styles [15]. In other work carried out by this paper's authors, we have considered how Z and Wright can be used to define styles [1, 2].
Reference: [22] <author> U.S. </author> <title> Department of Defense. High Level Architecture Interface Specification, </title> <note> Version 1.2, August 1997. Also available via http://www.dmso.mil/projects/hla/. </note>
Reference-contexts: This leads to technical issues not typically dealt with in the protocol literature, such as ways to structure such a broad interface. 3 The "High Level Architecture" for Distributed Simulation The "High Level Architecture" (HLA) is a component integration standard for distributed simulation <ref> [22] </ref>. It was developed by the Defense Modeling and Simulation Office (DMSO) to support interoperability between simulations purchased from different vendors. 1 This is a critical concern for the US government, which spends billions on third party simulations, coming from a wide variety of vendors. <p> set of parameters, a possible return value, pre- and post-conditions, and a list of the exceptions that may occur as a result of invoking the service. (Figure 1 summarizes the HLA terms used in this paper.) An example of a typical RTI service is shown in Figure 3 (taken from <ref> [22] </ref>). This service is initiated by a federate (an individual simulation) when it wants to pause the federation (the entire distributed simulation). The effects of calling the service are to cause the RTI to coordinate a distributed handshaking algorithm in which it asks each of the simulations to pause.
Reference: [23] <author> U.S. </author> <title> Department of Defense. High Level Architecture Interface Specification, Version 1.3, </title> <type> draft 1, </type> <month> April </month> <year> 1998. </year> <note> Also available via http://www.dmso.mil/projects/hla/. </note>
Reference-contexts: This suggests that future work on modeling architectural standards can and should exploit other complementary approaches and tools for architectural modeling and analysis. Indeed, in our own work we we also formalized parts of the specification using StateCharts (which appear in <ref> [23] </ref>) and Z [7]. In particular, we used these formalisms to handle the state-oriented aspects of the system. For example, a key property that should be maintained by a federation is that there is at most one owner for every simulated object in the system.
References-found: 23

