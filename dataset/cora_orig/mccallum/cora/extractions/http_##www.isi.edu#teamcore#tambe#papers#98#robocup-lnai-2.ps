URL: http://www.isi.edu/teamcore/tambe/papers/98/robocup-lnai-2.ps
Refering-URL: http://www.isi.edu/soar/tambe/socteam.html
Root-URL: http://www.isi.edu
Email: robocup-sim@isi.edu  
Title: Using an Explicit Teamwork Model and Learning in RoboCup: An Extended Abstract  
Author: Stacy Marsella, Jafar Adibi, Yaser Al-Onaizan, Ali Erdem, Randall Hill Gal A. Kaminka, Zhun Qiu, Milind Tambe 
Address: 4676 Admiralty Way, Marina del Rey, CA 90292, USA  
Affiliation: Information Sciences Institute and Computer Science Department University of Southern California  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> T. F. Bersano-Begey, P. G. Kenny, and E. H. Durfee. </author> <title> Agent teamwork, adaptive learning, and adversarial planning in robocup using a prs architecture. In RoboCup-97: The first robot world cup soccer games and conferences. </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, Germany, </address> <year> 1998. </year>
Reference-contexts: Some researchers investigating teamwork in RoboCup have used explicit team plans and roles, but they have relied on domain-dependent communication and coordination. Typical examples include <ref> [2, 1] </ref>. Other investigations of teamwork in RoboCup have used implicit or emergent coordination. A typical example is Yokota et al.[20]. Our application of learning in ISIS agents is similar to some of the other investigations of learning in RoboCup agents.
Reference: 2. <author> S. Ch'ng and L. Padgham. </author> <title> Team description: Royal merlbourne knights. In RoboCup-97: The first robot world cup soccer games and conferences. </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, Germany, </address> <year> 1998. </year>
Reference-contexts: Some researchers investigating teamwork in RoboCup have used explicit team plans and roles, but they have relied on domain-dependent communication and coordination. Typical examples include <ref> [2, 1] </ref>. Other investigations of teamwork in RoboCup have used implicit or emergent coordination. A typical example is Yokota et al.[20]. Our application of learning in ISIS agents is similar to some of the other investigations of learning in RoboCup agents.
Reference: 3. <author> P. R. Cohen and H. J. Levesque. </author> <title> Teamwork. </title> <journal> Nous, </journal> <volume> 35, </volume> <year> 1991. </year>
Reference-contexts: As a result, it enables team members to autonomously reason about coordination and communication, improving teamwork flexibility. Furthermore, due to its domain-independence, STEAM has been demonstrated to be reusable across domains. STEAM uses the formal joint intentions framework <ref> [3, 7] </ref> as its basic building block, but it is also influenced by the SharedPlans theory [5], and includes key enhancements to reflect the constraints of real-world domains.
Reference: 4. <author> J. Firby. </author> <title> An investigation into reactive planning in complex domains. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI), </booktitle> <year> 1987. </year>
Reference-contexts: Execution of higher-level abstract operators leads to subgoals, where new operators are selected for execution, and thus a hierarchical expansion of operators ensues. Operators in Soar are thus similar to reactive plans in architectures such as RAP <ref> [4] </ref>. 3 Teamwork There are two key aspects of ISIS's approach to teamwork. The first is the explicit representation of team activities via the use of explicit representation of team operators (reactive team plans).
Reference: 5. <author> B. Grosz and S. Kraus. </author> <title> Collaborative plans for complex group actions. </title> <journal> Artificial Intelligence, </journal> <volume> 86 </volume> <pages> 269-358, </pages> <year> 1996. </year>
Reference-contexts: Furthermore, due to its domain-independence, STEAM has been demonstrated to be reusable across domains. STEAM uses the formal joint intentions framework [3, 7] as its basic building block, but it is also influenced by the SharedPlans theory <ref> [5] </ref>, and includes key enhancements to reflect the constraints of real-world domains. For instance, the Joint intentions theory requires that agents attain mutual belief in establishing and terminating joint intentions, but does not specify how mutual belief should be attained.
Reference: 6. <author> N. Jennings. </author> <title> Controlling cooperative problem solving in industrial multi-agent systems using joint intentions. </title> <journal> Artificial Intelligence, </journal> <volume> 75, </volume> <year> 1995. </year>
Reference-contexts: In particular, to surmount uncertainties that arise in dynamic environments and maintain coherence in teamwork, team members must be provided the capability of highly flexible coordination and communication. To this end, general-purpose explicit models of teamwork have recently been proposed as a promising approach to enhance teamwork flexibility <ref> [6, 19] </ref>. Essentially, teamwork models provide agents with the capability of first principles reasoning about teamwork to provide teamwork flexibility. Such teamwork models also enable code reuse. We investigate the use of STEAM [17, 18, 19], a state-of-the-art general-purpose model of teamwork. <p> The STEAM teamwork model used in ISIS, is among just a very few implemented general models of teamwork. Other models include Jennings' joint responsibility framework in the GRATE* system <ref> [6] </ref> (based on Joint Intentions theory), and Rich and Sidner's COLLAGEN [13] (based on the SharedPlans theory), that both operate in complex domains.
Reference: 7. <author> H. J. Levesque, P. R. Cohen, and J. Nunes. </author> <title> On acting together. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence. </booktitle> <address> Menlo Park, Calif.: </address> <publisher> AAAI press, </publisher> <year> 1990. </year>
Reference-contexts: As a result, it enables team members to autonomously reason about coordination and communication, improving teamwork flexibility. Furthermore, due to its domain-independence, STEAM has been demonstrated to be reusable across domains. STEAM uses the formal joint intentions framework <ref> [3, 7] </ref> as its basic building block, but it is also influenced by the SharedPlans theory [5], and includes key enhancements to reflect the constraints of real-world domains.
Reference: 8. <author> S. Luke, Hohn C., J. Farris, G. Jackson, and J. Hendler. </author> <title> Co-evolving soccer softbot team coordination with genetic programming. In RoboCup-97: The first robot world cup soccer games and conferences. </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, Germany, </address> <year> 1998. </year>
Reference: 9. <author> H. Matsubara, I. Noda, and K. Hiraki. </author> <title> Learning of cooperative actions in multi-agent systems: a case study of pass play in soccer. </title> <editor> In S. Sen, editor, </editor> <booktitle> AAAI Spring Symposium on Adaptation, Coevolution and Learning in multi-agent systems, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: So in this specific case, the player involved will either stick to its own belief or turn to other's observation directly, rather than bothering to argue to resolve the disagreement. 4 Lower-level skills and Learning Inspired by previous work on machine learning in RoboCup <ref> [15, 9] </ref>, we focused on techniques to improve individual players' skills to kick, pass, or intercept the ball. Fortunately, the two layer ISIS architecture helps to simplify the problem for skill learning.
Reference: 10. <author> T. M. Mitchell, R. M. Keller, and S. T. Kedar-Cabelli. </author> <title> Explanation-based generalization: A unifying view. </title> <journal> Machine Learning, </journal> <volume> 1(1) </volume> <pages> 47-80, </pages> <year> 1986. </year>
Reference: 11. <author> A. Newell. </author> <title> Unified Theories of Cognition. </title> <publisher> Harvard Univ. Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference-contexts: The lower-level also computes a plan to intercept the ball consisting of turn or dash actions. The lower-level does not make any decisions with respect to its recommendations however. Instead, all such decision-making rests with the higher level, implemented in the Soar integrated AI architecture <ref> [11, 14] </ref>. Once the Soar-based higher-level reaches a decision, it communicates with the lower-level, which then sends the relevant information to the simulator. The Soar architecture involves dynamic execution of an operator (reactive plan) hierarchy. <p> Therefore, to improve efficiency, we plan to compile the teamwork model, so that the typical cases of reasoning about teamwork are speeded up. This can be achieved via machine learning methods such as chunking <ref> [11] </ref> (a form of explanation-based learning)[10]. The teamwork model itself will be retained however, since unusual cases may still arise, and require the first principles teamwork reasoning offered by the teamwork model.
Reference: 12. <author> J. R. Quinlan. C4.5: </author> <title> Programs for machine learning. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference-contexts: To address these problems, we decided to rely on automated, o*ine learning of the shooting rules. A human expert created a set of shooting situations, and selected the optimal shooting direction for each such situation. The learning system trained on these shooting scenarios. C4.5 <ref> [12] </ref> was used as the learning system, in part because it has the appropriate expressive power to express game situations and can handle both missing attributes and a large number of training cases.
Reference: 13. <author> C. Rich and C. Sidner. COLLAGEN: </author> <title> When agents collaborate with people. </title> <booktitle> In Proceedings of the International Conference on Autonomous Agents (Agents'97), </booktitle> <year> 1997. </year>
Reference-contexts: The STEAM teamwork model used in ISIS, is among just a very few implemented general models of teamwork. Other models include Jennings' joint responsibility framework in the GRATE* system [6] (based on Joint Intentions theory), and Rich and Sidner's COLLAGEN <ref> [13] </ref> (based on the SharedPlans theory), that both operate in complex domains.
Reference: 14. <author> P. S. Rosenbloom, J. E. Laird, A. Newell, , and R. McCarl. </author> <title> A preliminary analysis of the soar architecture as a basis for general intelligence. </title> <journal> Artificial Intelligence, </journal> <volume> 47(1-3):289-325, </volume> <year> 1991. </year>
Reference-contexts: The lower-level also computes a plan to intercept the ball consisting of turn or dash actions. The lower-level does not make any decisions with respect to its recommendations however. Instead, all such decision-making rests with the higher level, implemented in the Soar integrated AI architecture <ref> [11, 14] </ref>. Once the Soar-based higher-level reaches a decision, it communicates with the lower-level, which then sends the relevant information to the simulator. The Soar architecture involves dynamic execution of an operator (reactive plan) hierarchy.
Reference: 15. <author> P. Stone and M. Veloso. </author> <title> Towards collaborative and adversarial learning: a case study in robotic soccer. </title> <editor> In S. Sen, editor, </editor> <booktitle> AAAI Spring Symposium on Adaptation, Coevolution and Learning in multi-agent systems, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: So in this specific case, the player involved will either stick to its own belief or turn to other's observation directly, rather than bothering to argue to resolve the disagreement. 4 Lower-level skills and Learning Inspired by previous work on machine learning in RoboCup <ref> [15, 9] </ref>, we focused on techniques to improve individual players' skills to kick, pass, or intercept the ball. Fortunately, the two layer ISIS architecture helps to simplify the problem for skill learning.
Reference: 16. <author> P. Stone and M. Veloso. </author> <title> Using decision tree confidence factors for multiagent control. In RoboCup-97: The first robot world cup soccer games and conferences. </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, Germany, </address> <year> 1998. </year>
Reference-contexts: Our application of learning in ISIS agents is similar to some of the other investigations of learning in RoboCup agents. For instance, Luke et al.[8] use genetic programming to build agents that learn to use their basic individual skills in coordination. Stone and Veloso <ref> [16] </ref> present a related approach, in which the agents learn a decision tree which enables them to select a recipient for a pass. In terms of related work outside RoboCup, the use of a teamwork model remains a distinguishing aspect of teamwork in ISIS.
Reference: 17. <author> M. Tambe. </author> <title> Teamwork in real-world, dynamic environments. </title> <booktitle> In Proceedings of the International Conference on Multi-agent Systems (ICMAS), </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: Essentially, teamwork models provide agents with the capability of first principles reasoning about teamwork to provide teamwork flexibility. Such teamwork models also enable code reuse. We investigate the use of STEAM <ref> [17, 18, 19] </ref>, a state-of-the-art general-purpose model of teamwork. STEAM models team members' responsibilities and commitments in teamwork in a domain-independent fashion. As a result, it enables team members to autonomously reason about coordination and communication, improving teamwork flexibility.
Reference: 18. <author> M. Tambe. </author> <title> Agent architectures for flexible, practical teamwork. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI), </booktitle> <month> August </month> <year> 1997. </year>
Reference-contexts: Essentially, teamwork models provide agents with the capability of first principles reasoning about teamwork to provide teamwork flexibility. Such teamwork models also enable code reuse. We investigate the use of STEAM <ref> [17, 18, 19] </ref>, a state-of-the-art general-purpose model of teamwork. STEAM models team members' responsibilities and commitments in teamwork in a domain-independent fashion. As a result, it enables team members to autonomously reason about coordination and communication, improving teamwork flexibility.
Reference: 19. <author> M. Tambe. </author> <title> Towards flexible teamwork. </title> <journal> Journal of Artificial Intelligence Research (JAIR), </journal> <volume> 7 </volume> <pages> 83-124, </pages> <year> 1997. </year>
Reference-contexts: In particular, to surmount uncertainties that arise in dynamic environments and maintain coherence in teamwork, team members must be provided the capability of highly flexible coordination and communication. To this end, general-purpose explicit models of teamwork have recently been proposed as a promising approach to enhance teamwork flexibility <ref> [6, 19] </ref>. Essentially, teamwork models provide agents with the capability of first principles reasoning about teamwork to provide teamwork flexibility. Such teamwork models also enable code reuse. We investigate the use of STEAM [17, 18, 19], a state-of-the-art general-purpose model of teamwork. <p> Essentially, teamwork models provide agents with the capability of first principles reasoning about teamwork to provide teamwork flexibility. Such teamwork models also enable code reuse. We investigate the use of STEAM <ref> [17, 18, 19] </ref>, a state-of-the-art general-purpose model of teamwork. STEAM models team members' responsibilities and commitments in teamwork in a domain-independent fashion. As a result, it enables team members to autonomously reason about coordination and communication, improving teamwork flexibility. <p> STEAM significantly differs from both these frameworks, via its focus on a different (and arguably wider) set of teamwork capabilities that arise in domains with teams of more than two-three agents, with more complex team organizational hierarchies, and with practical emphasis on communication costs (see <ref> [19] </ref> for a more detailed discussion). 7 Summary We have discussed teamwork and learning, two important research issues in multi-agent systems. The vehicle for our research is ISIS, an implemented team of soccer playing agents, that successfully participated in the simulation league of the RoboCup'97 soccer tournament.
Reference: 20. <author> K. Yokota, K. Ozako, Matsumoto A., T. Fujii, Asama H., and I. Endo. </author> <title> Cooperation towards team play. In RoboCup-97: The first robot world cup soccer games and conferences. </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, Germany, </address> <year> 1998. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
References-found: 20

