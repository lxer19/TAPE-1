URL: http://www.cs.unc.edu/~stotts/pub/issta96.ps.gz
Refering-URL: http://www.cs.unc.edu/~stotts/Daistish/index.html
Root-URL: http://www.cs.unc.edu
Title: Daistish: Systematic Algebraic Testing for OO Programs in the Presence of Side-effects of a perl
Author: Merlin Hughes and David Stotts 
Web: URL http://www.cs.unc.edu/~stotts/Daistish/  
Note: Daistish consists  can be obtained via WWW at  
Address: Chapel Hill, NC 27599-3175  
Affiliation: Department of Computer Science University of North Carolina  
Abstract: Daistish is a tool that performs systematic algebraic testing similar to Gannon's DAISTS tool [2]. However, Daistish creates effective test drivers for programs in languages that use side effects to implement ADTs; this includes C++ and most other object-oriented languages. The functional approach of DAISTS does not apply directly in these cases. The approach in our work is most similar to the AS-TOOT system of Doong and Frankl [1]; Daistish differs from ASTOOT by using Guttag-style algebraic specs (functional notation), by allowing aliasing of type names to tailor the application of parameters in test cases, and by retaining the abilities of DAISTS to compose new test points from existing ones. Dais-tish is a Perl script, and is compact and practical to apply. We describe the implementation and our experiments in both Eiffel and C++. Our work has concentrated on solving the semantics-specific issues of correctly duplicating objects for comparison; we have not worked on methods for selecting specific test cases. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Doong, R.-K., and Frankl, P. G. </author> <title> The AS-TOOT approach to testing object-oriented on programs. </title> <journal> ACM Transactions on Software Engineering and Methodology (April 1994), </journal> <pages> 101-130. </pages>
Reference-contexts: Our specs, then, use functional notation but indicate in many of the functions that the parameters and return values are handled by-reference. The project most similar to Daistish is the AS-TOOT system by Doong and Frankl <ref> [1] </ref>. ASTOOT is also based on DAISTS, and allows this form of testing for object-oriented languages (they specifically reported on an Eiffel version).
Reference: [2] <author> Gannon, J., McMullin, P., and Hamlet, R. </author> <title> Data-abstraction implementation, specification, and testing. </title> <journal> IEEE Transactions on Programming Languages and Systems 3, </journal> <month> 3 (July </month> <year> 1981), </year> <pages> 211-223. </pages>
Reference-contexts: 1 Related work We have based our work on Gannon's DAISTS system <ref> [2] </ref>. DAISTS used Guttag-style algebraic specifications [6, 4, 3] as a test oracle for systematic testing of ADT implementations in a functional language. A functional language was used because algebraic specs are usually written in a functional notation.
Reference: [3] <author> Guttag, J. </author> <title> Notes on type abstraction (version 2). </title> <journal> IEEE Transactions on Software Engineering TR-SE 6, </journal> <month> 1 (Jan. </month> <year> 1980), </year> <pages> 13-23. </pages>
Reference-contexts: 1 Related work We have based our work on Gannon's DAISTS system [2]. DAISTS used Guttag-style algebraic specifications <ref> [6, 4, 3] </ref> as a test oracle for systematic testing of ADT implementations in a functional language. A functional language was used because algebraic specs are usually written in a functional notation.
Reference: [4] <author> Guttag, J. V., and Horning, J. J. </author> <title> The algebraic specification of abstract data types. </title> <journal> Acta Informatica 10 (1978), </journal> <pages> 27-52. </pages>
Reference-contexts: 1 Related work We have based our work on Gannon's DAISTS system [2]. DAISTS used Guttag-style algebraic specifications <ref> [6, 4, 3] </ref> as a test oracle for systematic testing of ADT implementations in a functional language. A functional language was used because algebraic specs are usually written in a functional notation.
Reference: [5] <author> Guttag, J. V., Horning, J. J., and Wing, J. M. </author> <title> The Larch family of specification languages. </title> <booktitle> IEEE Software 2, </booktitle> <month> 5 (September </month> <year> 1985), </year> <pages> 24-36. </pages>
Reference-contexts: We will compare the details of Daistish and ASTOOT after explaining the structure and functioning of Daistish. Another body of related work is the two-level specifications in Larch <ref> [5, 11, 12] </ref>. Specs in Larch have a part written as algebraic axioms, in functional notation; a second part describes semantic-specific details for a particular programming language.
Reference: [6] <author> Guttag, J. V., Horowitz, E., and Musser, D. R. </author> <title> Abstract data types and software validation. </title> <journal> Communications of the ACM 21 (Dec. </journal> <year> 1978), </year> <pages> 1048-1063. </pages>
Reference-contexts: 1 Related work We have based our work on Gannon's DAISTS system [2]. DAISTS used Guttag-style algebraic specifications <ref> [6, 4, 3] </ref> as a test oracle for systematic testing of ADT implementations in a functional language. A functional language was used because algebraic specs are usually written in a functional notation.
Reference: [7] <author> Hoffman, D., and Snodgrass, R. </author> <title> Trace specifications: Methodology and models. </title> <journal> IEEE Transactions on Software Engineering 14, </journal> <month> 9 (Sept. </month> <year> 1988), </year> <pages> 1243-1252. </pages>
Reference-contexts: Rather than use the traditional functional notation of algebraic specs, AS-TOOT uses a spec language called LOBAS that is similar in notation to the trace specs of Parnas <ref> [9, 7] </ref>. LOBAS includes the useful ability to specify inequal 1 ity between left and right sides of an axiom, some-thing we have not worked on in Daistish. We will compare the details of Daistish and ASTOOT after explaining the structure and functioning of Daistish.
Reference: [8] <author> Meyer, B. </author> <title> Eiffel: The Language. </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: Our first prototype was developed for programs written in Eiffel <ref> [8] </ref>. We have developed a second implementation for a reasonable subset of C++, and we are continuing to refine and experiment with the C++ version.
Reference: [9] <author> Parnas, D. L., and Wang, Y. </author> <title> The trace assertion method of module interface specification. </title> <type> Technical Report 89-261, </type> <institution> Queen's University, Kingston, </institution> <address> Ontario, </address> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: Rather than use the traditional functional notation of algebraic specs, AS-TOOT uses a spec language called LOBAS that is similar in notation to the trace specs of Parnas <ref> [9, 7] </ref>. LOBAS includes the useful ability to specify inequal 1 ity between left and right sides of an axiom, some-thing we have not worked on in Daistish. We will compare the details of Daistish and ASTOOT after explaining the structure and functioning of Daistish.
Reference: [10] <author> Stotts, P. D., and Furuta, R. </author> <title> Petri-net-based hypertext: Document structure with browsing semantics. </title> <journal> ACM Transactions on Information Systems 7, </journal> <month> 1 (Jan. </month> <year> 1989), </year> <pages> 3-29. </pages>
Reference-contexts: Students worked in teams of three; each student had at least an undergraduate level of programming expertise. Each team was required to write algebraic specs for a Petri net object (PNET), which formed the basis of a simplified hypermedia engine along the lines of Trellis <ref> [10] </ref>. The teams produced specs containing on the order of 60-80 axioms to fully express the behavior of the type. A portion of a spec file for the Petri net type is shown in figures 2 and 3.
Reference: [11] <author> Wing, J. M. </author> <title> Writing Larch interface language specifications. </title> <journal> ACM Transactions on Programming Languages and Systems 9, </journal> <month> 1 (Jan. </month> <year> 1987), </year> <pages> 1-24. </pages>
Reference-contexts: We will compare the details of Daistish and ASTOOT after explaining the structure and functioning of Daistish. Another body of related work is the two-level specifications in Larch <ref> [5, 11, 12] </ref>. Specs in Larch have a part written as algebraic axioms, in functional notation; a second part describes semantic-specific details for a particular programming language.
Reference: [12] <author> Wing, J. M. </author> <title> Using Larch to specify avalon/c++ objects. </title> <journal> IEEE Transactions on Software Engineering 16, </journal> <month> 9 (September </month> <year> 1990), </year> <pages> 1076-1088. </pages>
Reference-contexts: We will compare the details of Daistish and ASTOOT after explaining the structure and functioning of Daistish. Another body of related work is the two-level specifications in Larch <ref> [5, 11, 12] </ref>. Specs in Larch have a part written as algebraic axioms, in functional notation; a second part describes semantic-specific details for a particular programming language.
References-found: 12

