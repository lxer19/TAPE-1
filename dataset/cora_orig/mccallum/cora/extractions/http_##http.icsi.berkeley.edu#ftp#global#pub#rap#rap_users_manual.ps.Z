URL: http://http.icsi.berkeley.edu/ftp/global/pub/rap/rap_users_manual.ps.Z
Refering-URL: http://http.icsi.berkeley.edu/ftp/global/pub/rap/
Root-URL: http://http.icsi.berkeley.edu
Title: Ring Array Processor (RAP): Software User 's Manual Version 1.0  
Author: P. Kohn and J. Bilmes 
Address: 1947 Center Street, Suite 600 Berkeley, CA 94704-1105, USA  
Affiliation: International Computer Science Institute  
Abstract: The RAP machine is a high performance parallel processor developed at ICSI as described in previous technical reports. This report documents the RAP software environment. It is intended for the moderately experienced C programmer who wishes to program the RAP. The RAP software environment is very similar to the UNIX C programming environment. However, there are some differences arising from the hardware that the programmer must keep in mind. Also described is the RAP library which contains hand-optimized matrix, vector and inter-processor communications routines. SIMD programs can be developed under UNIX with a simulated RAP library and then recompiled to run on the RAP. Other parallel programming styles are also described. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Beck, </author> <title> ``The Ring Array Processor (RAP): Hardware,'' </title> <booktitle> International Computer Science Institute TR-90-048, </booktitle> <year> 1990. </year>
Reference-contexts: 1. Introduction This software user's manual is designed for the relatively experienced C programmer who wants to begin programming on the Ring Array Processor (RAP). Separate reports describe the RAP hardware <ref> [1] </ref> [2], the RAP software internals [3], RAP algorithms [4] and speech research supported by the RAP [5] [6]. Also relevant to the RAP user are the manuals from Texas Instruments for their C compiler [8], assembler and linker [9], simulator [10] and the TMS320C3x User's Guide [11]. <p> the following script called my_script: # this is a RAPMC script * # change to affect all nodes load yo # load the yo program 0 &gt; out0 # send each node's standard output to a different file 1 &gt; out1 3 &gt; out3 # run yo with yo's argv <ref> [1] </ref> = "yo_param1" and argv [2] = "yo_param2" run yo_param1 yo_param2 wait # wait for all nodes to finish running quit # quit this rapmc so someone else can get their batch job done. you may run RAPMC from the unix command line as: % rapmc -f my_script & To redirect <p> Therefore, RAPMC will not get stopped, the message <ref> [1] </ref> + Stopped (tty input) rapmc will not appear, and RAPMC will be able to continue processing all incoming RAP data (i.e. RAP output that has been redirected to files or piped to programs will continue being redirected or piped). <p> When you type background, the shell will not show the RAPMC process as a background job. It is still running, however. Don't let the shell fool you. For example: 0&gt; bg -22- Stopped % Continuing RAPMC in background # RAPMC message when it continues % jobs <ref> [1] </ref> + Stopped rapmc # rapmc is actually still running here % fg rapmc 0&gt; background will not work when running RAPMC under the Bourne shell since the Bourne shell has no job control. 7.9.10. wait wait This will pause until the current rap node has exited from the previous run <p> named in second argument */ printf ("changing to directory: %s"n", av [2]); cd (av [2]); if (ac &gt; 1) - /* 1 or more arguments: * print out file named in first argument */ file = fopen (av <ref> [1] </ref>,"r"); if (file == NULL) panic ("can not open file %s"n", av [1]); while ( fgets (buf, sizeof (buf), file) != NULL ) printf ("read: %s", buf); fclose (file); - printf (""nGOTTA GO NOW!"n"); exit (123); - -31- 13.2. makefile The following is a listing of the makefile from the example subdirectory of the RAP software distribution. # This makefile compiles and links
Reference: [2] <author> N. Morgan, J. Beck, P. Kohn, J. Bilmes, E. Allman, & J. Beer, </author> <title> ``The RAP: a Ring Array Processor for Layered Network Calculations,'' </title> <booktitle> Proc. of Intl. Conf. on Application Specific Array Proces sors, </booktitle> <pages> pp. 296-308. </pages> <publisher> IEEE Computer Society Press, </publisher> <address> Princeton, N.J., </address> <year> 1990. </year>
Reference-contexts: 1. Introduction This software user's manual is designed for the relatively experienced C programmer who wants to begin programming on the Ring Array Processor (RAP). Separate reports describe the RAP hardware [1] <ref> [2] </ref>, the RAP software internals [3], RAP algorithms [4] and speech research supported by the RAP [5] [6]. Also relevant to the RAP user are the manuals from Texas Instruments for their C compiler [8], assembler and linker [9], simulator [10] and the TMS320C3x User's Guide [11]. <p> # this is a RAPMC script * # change to affect all nodes load yo # load the yo program 0 &gt; out0 # send each node's standard output to a different file 1 &gt; out1 3 &gt; out3 # run yo with yo's argv [1] = "yo_param1" and argv <ref> [2] </ref> = "yo_param2" run yo_param1 yo_param2 wait # wait for all nodes to finish running quit # quit this rapmc so someone else can get their batch job done. you may run RAPMC from the unix command line as: % rapmc -f my_script & To redirect standard error output to a <p> RAP with %d processors"n", NODE_ID, N_NODE); printf ("got %d command line arguments"n", ac); for (i=0; i&lt;ac; i++) printf ("argument %d is %s"n", i, av [i]); if (ac &gt; 2) - /* 2 or more arguments, * change to directory named in second argument */ printf ("changing to directory: %s"n", av <ref> [2] </ref>); cd (av [2]); if (ac &gt; 1) - /* 1 or more arguments: * print out file named in first argument */ file = fopen (av [1],"r"); if (file == NULL) panic ("can not open file %s"n", av [1]); while ( fgets (buf, sizeof (buf), file) != NULL ) printf <p> processors"n", NODE_ID, N_NODE); printf ("got %d command line arguments"n", ac); for (i=0; i&lt;ac; i++) printf ("argument %d is %s"n", i, av [i]); if (ac &gt; 2) - /* 2 or more arguments, * change to directory named in second argument */ printf ("changing to directory: %s"n", av <ref> [2] </ref>); cd (av [2]); if (ac &gt; 1) - /* 1 or more arguments: * print out file named in first argument */ file = fopen (av [1],"r"); if (file == NULL) panic ("can not open file %s"n", av [1]); while ( fgets (buf, sizeof (buf), file) != NULL ) printf ("read: %s", buf);
Reference: [3] <author> J. Bilmes & P. Kohn, </author> <title> ``The Ring Array Processor (RAP): </title> <booktitle> Software Architecture,'' International Computer Science Institute TR-90-050, </booktitle> <year> 1990. </year>
Reference-contexts: 1. Introduction This software user's manual is designed for the relatively experienced C programmer who wants to begin programming on the Ring Array Processor (RAP). Separate reports describe the RAP hardware [1] [2], the RAP software internals <ref> [3] </ref>, RAP algorithms [4] and speech research supported by the RAP [5] [6]. Also relevant to the RAP user are the manuals from Texas Instruments for their C compiler [8], assembler and linker [9], simulator [10] and the TMS320C3x User's Guide [11].
Reference: [4] <author> N. Morgan, </author> <title> ``The Ring Array Processor (RAP): </title> <booktitle> Algorithms and Architecture'' International Com puter Science Institute TR-90-047, </booktitle> <year> 1990. </year>
Reference-contexts: 1. Introduction This software user's manual is designed for the relatively experienced C programmer who wants to begin programming on the Ring Array Processor (RAP). Separate reports describe the RAP hardware [1] [2], the RAP software internals [3], RAP algorithms <ref> [4] </ref> and speech research supported by the RAP [5] [6]. Also relevant to the RAP user are the manuals from Texas Instruments for their C compiler [8], assembler and linker [9], simulator [10] and the TMS320C3x User's Guide [11].
Reference: [5] <author> N. Morgan, C. Wooters, H. Bourlard, & M. Cohen, </author> <title> ``Continuous Speech Recognition on the Resource Management Database using Connectionist Probability Estimation,'' </title> <type> ICSI Technical report TR-090-044, </type> <note> also to be published in proceedings of ICSLP-90, Kobe, Japan. </note>
Reference-contexts: 1. Introduction This software user's manual is designed for the relatively experienced C programmer who wants to begin programming on the Ring Array Processor (RAP). Separate reports describe the RAP hardware [1] [2], the RAP software internals [3], RAP algorithms [4] and speech research supported by the RAP <ref> [5] </ref> [6]. Also relevant to the RAP user are the manuals from Texas Instruments for their C compiler [8], assembler and linker [9], simulator [10] and the TMS320C3x User's Guide [11].
Reference: [6] <author> N. Morgan, H. Hermansky, C. Wooters, P. Kohn, & H. Bourlard, </author> <title> ``Phonetically-based Speaker-Independent Continuous Speech Recognition Using PLP Analysis with Multilayer Perceptrons,'' </title> <booktitle> submitted to IEEE Intl. Conf. on Acoustics, Speech, & Signal Processing, </booktitle> <address> Toronto, Canada, </address> <year> 1991. </year>
Reference-contexts: 1. Introduction This software user's manual is designed for the relatively experienced C programmer who wants to begin programming on the Ring Array Processor (RAP). Separate reports describe the RAP hardware [1] [2], the RAP software internals [3], RAP algorithms [4] and speech research supported by the RAP [5] <ref> [6] </ref>. Also relevant to the RAP user are the manuals from Texas Instruments for their C compiler [8], assembler and linker [9], simulator [10] and the TMS320C3x User's Guide [11].
Reference: [7] <author> P. Kohn, </author> <title> ``CLONES: A Connectionist Layered Object-oriented NEtwork Simulator,'' </title> <booktitle> In prepara tion. </booktitle>
Reference-contexts: On top of this we plan to build a new backpropagation training program tentatively called CLONES (Connectionist Layered Object-oriented NEtwork Simulator) that runs on the RAP and SUN workstation <ref> [7] </ref>. -30- 13.
Reference: [8] <author> Texas Instruments, </author> <title> TMS320C30 C Compiler Reference Guide, </title> <address> SPRU034A, </address> <year> 1989. </year>
Reference-contexts: Separate reports describe the RAP hardware [1] [2], the RAP software internals [3], RAP algorithms [4] and speech research supported by the RAP [5] [6]. Also relevant to the RAP user are the manuals from Texas Instruments for their C compiler <ref> [8] </ref>, assembler and linker [9], simulator [10] and the TMS320C3x User's Guide [11]. The goals of the RAP software design were: Make it efficient for computational tasks of interest (backpropagation and speech recognition algorithms). <p> SP pointer pointer no Stack pointer - special register RC yes no yes Used for structure copy/assignment RS yes no yes Used for structure copy/assignment RE yes no yes Used for structure copy/assignment Stack structure and compiler register usage are discussed in detail in the TMS320C30 C Compiler Reference Manual <ref> [8] </ref> chapter 4 on the run-time environment. The most important aspects are summarized below. By definition, temporary registers can be changed by any function call; they need not be saved or restored by a function. <p> your output executable here: OUT_FILE = yo # root directory for rap software distribution # SET ROOT_DIR TO THE PATH TO THE TOP OF THE RAP DISTRIBUTION DIRECTORY ROOT_DIR = &lt;replace this with the distribution directory&gt; # C compiler options # (see table 2-1 in the TMS320C30 C Compiler Reference <ref> [8] </ref>) # -q option is for "quiet" mode (no banners, etc.) # -o2 option turns on the optimizer # -mf option allows pointers outside of the 64k base page C_FLAGS = -q -o2 # Assembler options ASM_FLAGS = # Linker options # (see table 9-1 in the TMS320C30 Assembly Language Tools
Reference: [9] <institution> Texas Instruments, TMS320C30 Assembly Language Tools, SPRU035, </institution> <year> 1988. </year>
Reference-contexts: Separate reports describe the RAP hardware [1] [2], the RAP software internals [3], RAP algorithms [4] and speech research supported by the RAP [5] [6]. Also relevant to the RAP user are the manuals from Texas Instruments for their C compiler [8], assembler and linker <ref> [9] </ref>, simulator [10] and the TMS320C3x User's Guide [11]. The goals of the RAP software design were: Make it efficient for computational tasks of interest (backpropagation and speech recognition algorithms). Make it easy to learn and use by speech scientists who are often not familar with object-oriented languages. <p> Description The linker command file is described in detail in the Texas Instrument Assembly Language Tools manual <ref> [9] </ref>. The linker command file described here is provided in the example subdirectory mentioned in the quick start section. There are three parts of the linker command file: arguments to the link command (map file name), the memory block declarations (e.g. <p> # -q option is for "quiet" mode (no banners, etc.) # -o2 option turns on the optimizer # -mf option allows pointers outside of the 64k base page C_FLAGS = -q -o2 # Assembler options ASM_FLAGS = # Linker options # (see table 9-1 in the TMS320C30 Assembly Language Tools <ref> [9] </ref>) # the "-q" option is for "quiet" mode (no banners, etc.) LNK_FLAGS = -q # subdirectories of rap software root directory BIN_DIR = $(ROOT_DIR)/bin LIB_DIR = $(ROOT_DIR)/lib INCLUDE_DIR = $(ROOT_DIR)/include TI_INCLUDE_DIR = $(ROOT_DIR)/include/ti # executables for compiler and linker CC = $(BIN_DIR)/cl30 # generic link step $(OUT_FILE): $(OBJ_FILES) $(LIB_DIR)/rap.lib $-LNK-
Reference: [10] <institution> Texas Instruments, TMS320C30 Simulator, SPRU017, </institution> <year> 1989. </year>
Reference-contexts: Separate reports describe the RAP hardware [1] [2], the RAP software internals [3], RAP algorithms [4] and speech research supported by the RAP [5] [6]. Also relevant to the RAP user are the manuals from Texas Instruments for their C compiler [8], assembler and linker [9], simulator <ref> [10] </ref> and the TMS320C3x User's Guide [11]. The goals of the RAP software design were: Make it efficient for computational tasks of interest (backpropagation and speech recognition algorithms). Make it easy to learn and use by speech scientists who are often not familar with object-oriented languages.
Reference: [11] <institution> Texas Instruments, </institution> <note> Third-Generation TMS320 User's Guide, SPRU031, 1988. -40- </note>
Reference-contexts: Also relevant to the RAP user are the manuals from Texas Instruments for their C compiler [8], assembler and linker [9], simulator [10] and the TMS320C3x User's Guide <ref> [11] </ref>. The goals of the RAP software design were: Make it efficient for computational tasks of interest (backpropagation and speech recognition algorithms). Make it easy to learn and use by speech scientists who are often not familar with object-oriented languages. <p> The CPU can do up to three memory accesses to RAM0 and/or RAM1 in every processor cycle as summarized in table 10-2 of the TMS320C3x User's Guide <ref> [11] </ref>. At most one external memory read can happen per processor cycle. The CPU can only write one external word every two processor cycle. The user can allocate data structures using the standard malloc function. <p> Do not try to create or read this digested file with any other machine without checking the oating point encoding. There are routines for converting between IEEE and TMS320C30 oating point formats that can be found in the Software Applications section of the TMS320C3x User's Guide <ref> [11] </ref>. These routines are written in TMS320C30 assembly language and would be difficult to port because they rely on the oating point instructions. 3.9. Compiler bugs Several TI C compiler bugs have been found during the RAP development. <p> Each processor also has two high speed serial ports that can interconnected to create more complex communication topologies. Currently, there is no support in the RAP library for the serial ports. They are described in detail in the TMS320C3x User's Guide <ref> [11] </ref>. 5. Quick start: Running a simple program on the RAP This section contains step by step instructions to get a simple SIMD style example program to run on the RAP. <p> Address registers (AR0 to AR7), Index registers (IR0 and IR1), Block size register (BK) 2. Data Pointer register (DP) 3. Stack Pointer This is just one example of pipeline delays. There are many more described in Chapters 10 and 8 of the TMS320C3x User's Guide <ref> [11] </ref>. The following table summarizes the cases where delays occur. <p> However, when using the parallel instructions in a loop it often makes sense to unroll one loop and split it before and after the RPTB or RPTS block. See the examples at the end of the TMS320C3x User 's Manual <ref> [11] </ref>. Since RPTB loops can not be nested, time critical loops that already contain one or more RPTB loops must use other tricks such as unrolling and/or the decrement and delayed branch on con dition instruction (DB&lt;cond&gt;D). 8.6. Addressing modes Check the addressing modes, some have useful side effects. <p> There are delay cycles added due to changes to address registers caused by these side effects. 8.7. Parallel instructions The parallel instructions only allow a very limited number of addressing mode combinations. In general check the "Operands" section of the instruction description in the TMS320C3x User 's Manual <ref> [11] </ref> to be sure that the addressing mode you want is possible. The four basic addressing modes are register, direct, indirect and immediate. Direct is always indicated by an "@" before a name.
Reference: [12] <author> D.E. Rumelhart, G.E. Hinton & R.J. Williams, </author> <title> ``Learning Internal Representations by Error Propagation,'' </title> <booktitle> in Parallel Distributed Processing. Exploration of the Microstructure of Cogni tion. </booktitle> <volume> vol. 1: </volume> <booktitle> Foundations, </booktitle> <editor> ed. D. E. Rumelhart & J. L. McClelland, </editor> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: Make it as much like the standard UNIX environment as possible (allow program debugging under UNIX). Get the RAP system software operational as soon as possible. 2. The RAP: overview and current status The RAP is a high performance parallel processor designed to train layered backpropagation networks <ref> [12] </ref>. Each processing element is a TMS320C30 digital signal processor that can sustain 32 million oating point operations per second. The prototype 8 processor (2 board) system runs at 256 MFLOPS and can pass data at up to 512 Mb/sec around its communication ring.

References-found: 12

