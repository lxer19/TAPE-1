URL: http://www.brunel.ac.uk/~cspgssk/documents/para96/para96.ps.gz
Refering-URL: http://www.brunel.ac.uk/~cspgssk/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Bulk Synchronous Parallelisation of Genetic Programming  
Author: Dimitris C. Dracopoulos and Simon Kent 
Address: London, UK  
Affiliation: Brunel University Department of Computer Science and Information Systems  
Abstract: A parallel implementation of Genetic Programming (GP) is described, using the Bulk SynchronousParallel Programming (BSP) model, as implemented by the Oxford BSP library. Two approaches to the parallel implementation of GP are examined. The first is based on global parallelisation while the second implements the island model for evolutionary algorithms. It is shown that considerable speedup of the GP execution can be achieved and that the BSP model is very suit able for parallelisation of similar algorithms.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> David E. Goldberg. </author> <title> Genetic Algorithms in Search, Optimization and Machine Learning. </title> <publisher> Ad-dison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction Genetic Programming (GP) is a relatively new discipline which offers a method for the automatic discovery of computer programs to solve problems which are difficult, or impossible to solve through conventional methods. Genetic programming [3] is an extension of the genetic algorithm (GA) <ref> [1] </ref> function optimisation method. Both methods are based on the evolutionary process of Darwinian natural selection. Despite its advantages, one drawback of Genetic Programming is the considerable execution time which can be required to produce a solution. The process is, however, very amenable to parallelisation.
Reference: 2. <author> V. Scott Gordon and Darrell Whitley. </author> <title> Serial and parallel genetic algorithms as function optim-izers. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms. </booktitle> <publisher> Morgan Kaufman, </publisher> <year> 1993. </year>
Reference-contexts: The coarse grained parallel-isation method attempts to reduce the communication between processes, thus reducing overhead, and improving speedup. The approach adopted is known as the Island Model and has been used, for example, by Gordon <ref> [2] </ref> to produce implementations of a parallel genetic algorithm and also by Koza [4]. A number of processes are started, each with their own private population, which they are responsible for initialising, evaluating and evolving. Unlike global parallelisa-tion, all processes have equal status.
Reference: 3. <author> John R. Koza. </author> <title> Genetic Programming: on the Programming of Computers by means of Natural Selection. </title> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction Genetic Programming (GP) is a relatively new discipline which offers a method for the automatic discovery of computer programs to solve problems which are difficult, or impossible to solve through conventional methods. Genetic programming <ref> [3] </ref> is an extension of the genetic algorithm (GA) [1] function optimisation method. Both methods are based on the evolutionary process of Darwinian natural selection. Despite its advantages, one drawback of Genetic Programming is the considerable execution time which can be required to produce a solution. <p> The Oxford BSP Library basic operations. 4 The Problem The problem chosen to test the BSP GP implementation was the Artificial Ant problem as used by Koza <ref> [3] </ref>. The problem involves moving a robot ant along a trail of food which lies on a grid. This trail contains 157 pieces of food as shown in Figure 3.
Reference: 4. <author> John R. Koza and David Andre. </author> <title> Parallel genetic programming on a network of transputers. </title> <type> Technical Report CS-TR-95-1542, </type> <institution> Stanford University, </institution> <year> 1995. </year>
Reference-contexts: Both methods are based on the evolutionary process of Darwinian natural selection. Despite its advantages, one drawback of Genetic Programming is the considerable execution time which can be required to produce a solution. The process is, however, very amenable to parallelisation. Koza <ref> [4] </ref> has carried out some work on parallel GP using transputers, however there has been relatively little work in this area (unlike genetic algorithms for which several parallel implementations exist). <p> The coarse grained parallel-isation method attempts to reduce the communication between processes, thus reducing overhead, and improving speedup. The approach adopted is known as the Island Model and has been used, for example, by Gordon [2] to produce implementations of a parallel genetic algorithm and also by Koza <ref> [4] </ref>. A number of processes are started, each with their own private population, which they are responsible for initialising, evaluating and evolving. Unlike global parallelisa-tion, all processes have equal status. The standard GP process is modified by the addition of a migration operator as shown in Figure 5.
Reference: 5. <author> Richard Miller and Joy Reed. </author> <title> The Oxford BSP Library users' guide. </title> <type> Technical report, </type> <institution> University of Oxford, </institution> <year> 1993. </year>
Reference-contexts: In the Oxford BSP user guide <ref> [5] </ref>, it is suggested that a conservative upper bound for the overhead involved in performing one of the supersteps is: Fig. 6. Topologies used with the island model GP implementation.
Reference: 6. <author> Leslie G. Valiant. </author> <title> A bridging model for parallel computation. </title> <journal> Communications of the Association for Computing Machinery, </journal> <volume> 33(8) </volume> <pages> 103-111, </pages> <year> 1990. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: This process of fitness evaluation and evolution is repeatedly applied until a solution is found or a timeout occurs. The whole process is illustrated in Figure 2. 3 BSP The Bulk Synchronous Parallel Programming model was proposed by Leslie Valiant <ref> [6] </ref> for general-purpose parallel computing. The model provides a very basic set of operations which allow synchronisation of processors, and communication between them. This may be implemented using a dedicated language, or by means of a library of routines.
References-found: 6

