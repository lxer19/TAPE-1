URL: http://www.iscs.nus.edu.sg/~liub/publications/pricai96.ps
Refering-URL: 
Root-URL: 
Email: liub@iscs.nus.sg  
Title: An Improved Generic Arc Consistency Algorithm and Its Specializations  
Author: Bing Liu 
Address: Lower Kent Ridge Road, Singapore 119260  
Affiliation: Department of Information Systems and Computer Science National University of Singapore  
Abstract: Many general and specific arc consistency algorithms have been produced in the past for solving Constraint Satisfaction Problems (CSP). The important general algorithms are AC-3, AC-4, AC-5 and AC-6. AC-5 is also a generic algorithm. It can be reduced to AC-3, AC-4 and AC-6. Specific algorithms are efficient specializations of the general ones for specific constraints. Functional, anti-functional and monotonic constraints are three important classes of specific constraints. AC-5 has been specialized to produce an O( ed ) algorithm (in time) for these classes of constraints. However, this specialization does not reduce the space requirement. In practical applications, both time and space requirements are important. This paper makes two contributions. First, it proposes an improved generic arc consistency algorithm, called AC-5*, which can be specialized to reduce both time and space complexities. Second, it presents a more efficient technique for handling an important subclass of functional constraints, namely increasing functional constraints (IFC). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Bessiere and M. Cordier, </author> <title> Arc-consistency and arc-consistency again, </title> <journal> Artificial Intelligence, </journal> <volume> 65 </volume> <pages> 179-190, </pages> <year> 1994. </year>
Reference-contexts: 1. Introduction Arc consistency techniques are the key techniques for solving CSPs. Past research has produced many general and specific arc consistency algorithms. The most important general algorithms are AC-3 [6], AC-4 [8], AC-5 [10] and AC-6 <ref> [1] </ref>. AC-5 is also a generic algorithm, and it can be reduced to AC-3, AC-4 and AC-6. <p> AC-5 is also a generic algorithm, and it can be reduced to AC-3, AC-4 and AC-6. Among these algorithms, AC-3 has the optimal space complexity of O (e + nd) [8], while AC-4 and AC-6 have the optimal time complexity of O (ed 2 ) <ref> [8, 1] </ref>, where n is the number of variables, e is the number of arcs, and d is the size of the domain. Specific algorithms are efficient specializations of the general ones for specific constraints [9, 10]. <p> AC-4 has the optimal time complexity of O (ed 2 ) [8], but its space complexity is O (ed 2 ) [8]. AC-6 reduces the space complexity of AC-4 to O (ed) from O (ed 2 ) <ref> [1] </ref>. AC-5 provides an generic algorithm that can exploit the structure of the domain and the structure of the constraint to produce more efficient algorithms for specific constraints. The most commonly used specific constraints are FCs, ATFCs and MCs. <p> Recently, [2] proposed another general arc consistency algorithm AC-7. The main idea of AC-7 is to take advantage of the bidirectionality of constraints to reduce the number of consistency checks. Its space requirement is still O (ed) like AC-6 <ref> [1] </ref>. [2] did mention that the semantics of constraints can be used to infer or reduce constraint checks. However, it is not clear how AC-7 could be specialized to reduce both the time and space complexities for IFCs, ATFCs and MCs. 7.
Reference: [2] <author> C. Bessiere, E. Freuder and J-C. Regin, </author> <title> Using inference to reduce arc consistency computation, </title> <booktitle> IJCAI-95, </booktitle> <pages> 592-598, </pages> <year> 1995. </year>
Reference-contexts: More importantly, it is now possible to have an arc consistency algorithm for IFCs, ATFCs and MCs, which is both optimal in time and also optimal in space. Recently, <ref> [2] </ref> proposed another general arc consistency algorithm AC-7. The main idea of AC-7 is to take advantage of the bidirectionality of constraints to reduce the number of consistency checks. Its space requirement is still O (ed) like AC-6 [1]. [2] did mention that the semantics of constraints can be used to <p> Recently, <ref> [2] </ref> proposed another general arc consistency algorithm AC-7. The main idea of AC-7 is to take advantage of the bidirectionality of constraints to reduce the number of consistency checks. Its space requirement is still O (ed) like AC-6 [1]. [2] did mention that the semantics of constraints can be used to infer or reduce constraint checks. However, it is not clear how AC-7 could be specialized to reduce both the time and space complexities for IFCs, ATFCs and MCs. 7.
Reference: [3] <editor> Ilog Solver Reference Manual, ILOG, </editor> <year> 1993. </year>
Reference-contexts: Functional (FC), anti-functional (ATFC) and monotonic constraints (MC) are three important classes of specific constraints. In recent years, the CSP model has been implemented in constraint programming languages, such as CHIP [9] and Ilog Solver <ref> [3] </ref>, for solving practical combinatorial search problems, such as scheduling and resource allocations [3, 10]. The basic constraints used in these languages are special cases of FC, ATFC and MC. <p> Functional (FC), anti-functional (ATFC) and monotonic constraints (MC) are three important classes of specific constraints. In recent years, the CSP model has been implemented in constraint programming languages, such as CHIP [9] and Ilog Solver [3], for solving practical combinatorial search problems, such as scheduling and resource allocations <ref> [3, 10] </ref>. The basic constraints used in these languages are special cases of FC, ATFC and MC. In [10], AC-5 is specialized to produce an algorithm running in O (ed) (the optimal time complexity [10]) for these three classes of constraints. <p> This cannot be achieved with existing techniques. These results are significant in practice because the basic functional constraint used in the current constraint programming languages <ref> [9, 3] </ref> is actually an IFC. 2. <p> An example of an IFC is x = y + 5. An example of an ATFC is x y, and an example of a MC is x y + 1. The basic constraints in the current constraint languages are special cases of FC, ATFC and MC <ref> [10, 3] </ref>. In fact, they are equations (aX = bY + c), inequalities (aX bY + c) and disequations (aX bY), where a, b and c are constants and a, b 0. Domain values are natural numbers. <p> The most commonly used specific constraints are FCs, ATFCs and MCs. Their subclasses (i.e., equations, disequations and inequalities) form the core of the current constraint languages, e.g., CHIP [9], Ilog Solver <ref> [3] </ref>, etc. In [10], AC-5 is specialized to achieve an O (ed) algorithm in time for these constraint classes. However, AC-5 cannot be specialized to reduce the space complexity. AC-5* is an improvement over AC-5. It is also a generic algorithm.
Reference: [4] <author> B. Liu, AC-5*: </author> <title> an improved AC-5 and its specializations, 1996. </title> <type> DISCS Technical Report. </type> <year> 1996. </year>
Reference-contexts: In this paper, we call these two procedures the initial check procedure and the recheck procedure respectively for intuitive reasons. This separation is important because of efficiency reasons <ref> [4] </ref>. 3. AC-5* Algorithm Since AC-5* is intended to improve AC-5, before presenting AC-5*, we make some observations about AC-5. Take note that all arc consistency algorithms work with a queue Q containing elements to be rechecked. <p> The theorem can be proven quite easily. Interested readers, please refer to <ref> [4] </ref>. For an incremental CSP, we no longer have the freedom to order the constraints to satisfy the above condition. However, it can be partially satisfied. Thus, those IFCs that do not satisfy the condition still need recheck.
Reference: [5] <author> B. Liu, </author> <title> Increasing functional constraints need to be checked only once, </title> <booktitle> IJCAI-95, </booktitle> <address> Montreal, Canada, </address> <month> August 19-25, </month> <year> 1995. </year>
Reference-contexts: In this method, IFCs need to be checked only once, rather than many times as in a typical consistency check process. The main idea of this technique was first introduced in <ref> [5] </ref>. This paper enhances the technique and presents two implications of it. 1. Although the new technique is still O (ed) (in time) for IFCs, the same as that of AC-5, experiments show that it outperforms the existing techniques substantially. 2. <p> For easy reference, we call this implementation, AC-5* 3 , as it is similar to AC-3. The main difference is that AC-3 does not distinguish initial check and recheck. Here, we will also describe our new technique for checking IFCs, which is an improvement over that in <ref> [5] </ref>. The main improvement is in the handling of cycles of IFCs, which were not handled satisfactorily [5]. With this technique, we can achieve the optimal space complexity of O (e + nd) and the optimal time complexity of O (ed) for IFCs, ATFCs, and MCs. <p> The main difference is that AC-3 does not distinguish initial check and recheck. Here, we will also describe our new technique for checking IFCs, which is an improvement over that in <ref> [5] </ref>. The main improvement is in the handling of cycles of IFCs, which were not handled satisfactorily [5]. With this technique, we can achieve the optimal space complexity of O (e + nd) and the optimal time complexity of O (ed) for IFCs, ATFCs, and MCs. <p> See <ref> [5] </ref> for an example and the proof of its correctness. NonMergeCheck given in Figure 7 consists of two parts, the first part (line 2-16) is used when D i .merge = D j .merge, and the second part (line 17-22) is used otherwise. <p> We implemented AC-3, AC-5, AC-5* IFC 3 with specialized techniques for checking those classes of constraints. AC-3 uses the specialized techniques in [9], and AC-5 uses the specialized techniques in [10]. They both use the same domain data structure in [10] (in <ref> [5] </ref>, AC-3 uses the data structure in [9]). AC-5* IFC uses the new technique for merging IFCs, and the techniques in [10] for the other constraints and also for those not merged IFCs.
Reference: [6] <author> A. K. Mackworth, </author> <title> Consistency in networks of relations, </title> <journal> Artificial Intelligence, </journal> <volume> 8 </volume> <pages> 99-118, </pages> <year> 1977. </year>
Reference-contexts: 1. Introduction Arc consistency techniques are the key techniques for solving CSPs. Past research has produced many general and specific arc consistency algorithms. The most important general algorithms are AC-3 <ref> [6] </ref>, AC-4 [8], AC-5 [10] and AC-6 [1]. AC-5 is also a generic algorithm, and it can be reduced to AC-3, AC-4 and AC-6.
Reference: [7] <author> A. K. Mackworth, and E. C. Freuder, </author> <title> The complexity of some polynomial network consistency algorithms for constraint satisfaction problems, </title> <journal> Artificial Intelligence, </journal> <volume> 25 </volume> <pages> 65-74, </pages> <year> 1985. </year>
Reference-contexts: We denote by e the number of arcs in G, by d the size of the largest domain, and by arc (G) the set of arcs in G. In this paper, we assume the standard definitions of arc consistency <ref> [7, 10] </ref>. We now define functional (FC) and increasing functional (IFC) constraints. We will not define anti-functional and monotonic constraints as they can be found in [10]. Since our techniques require a total ordering on the domain, let us define it here first. Definition 1. <p> These comparisons show that the new technique consistently produces considerable saving. 6. Related Work Many general arc consistency algorithms have been developed in the past. AC-3 has the optimal space complexity of O (e + nd) <ref> [7, 8] </ref>, but its time complexity is O (ed 3 ) [7]. AC-4 has the optimal time complexity of O (ed 2 ) [8], but its space complexity is O (ed 2 ) [8]. AC-6 reduces the space complexity of AC-4 to O (ed) from O (ed 2 ) [1]. <p> These comparisons show that the new technique consistently produces considerable saving. 6. Related Work Many general arc consistency algorithms have been developed in the past. AC-3 has the optimal space complexity of O (e + nd) [7, 8], but its time complexity is O (ed 3 ) <ref> [7] </ref>. AC-4 has the optimal time complexity of O (ed 2 ) [8], but its space complexity is O (ed 2 ) [8]. AC-6 reduces the space complexity of AC-4 to O (ed) from O (ed 2 ) [1].
Reference: [8] <author> R. Mohr and T.C. Henderson, </author> <title> Arc and path consistency revisited, </title> <journal> Artificial Intelligence, </journal> <volume> 28 </volume> <pages> 225-233, </pages> <year> 1986. </year>
Reference-contexts: 1. Introduction Arc consistency techniques are the key techniques for solving CSPs. Past research has produced many general and specific arc consistency algorithms. The most important general algorithms are AC-3 [6], AC-4 <ref> [8] </ref>, AC-5 [10] and AC-6 [1]. AC-5 is also a generic algorithm, and it can be reduced to AC-3, AC-4 and AC-6. Among these algorithms, AC-3 has the optimal space complexity of O (e + nd) [8], while AC-4 and AC-6 have the optimal time complexity of O (ed 2 ) <p> The most important general algorithms are AC-3 [6], AC-4 <ref> [8] </ref>, AC-5 [10] and AC-6 [1]. AC-5 is also a generic algorithm, and it can be reduced to AC-3, AC-4 and AC-6. Among these algorithms, AC-3 has the optimal space complexity of O (e + nd) [8], while AC-4 and AC-6 have the optimal time complexity of O (ed 2 ) [8, 1], where n is the number of variables, e is the number of arcs, and d is the size of the domain. <p> AC-5 is also a generic algorithm, and it can be reduced to AC-3, AC-4 and AC-6. Among these algorithms, AC-3 has the optimal space complexity of O (e + nd) [8], while AC-4 and AC-6 have the optimal time complexity of O (ed 2 ) <ref> [8, 1] </ref>, where n is the number of variables, e is the number of arcs, and d is the size of the domain. Specific algorithms are efficient specializations of the general ones for specific constraints [9, 10]. <p> These comparisons show that the new technique consistently produces considerable saving. 6. Related Work Many general arc consistency algorithms have been developed in the past. AC-3 has the optimal space complexity of O (e + nd) <ref> [7, 8] </ref>, but its time complexity is O (ed 3 ) [7]. AC-4 has the optimal time complexity of O (ed 2 ) [8], but its space complexity is O (ed 2 ) [8]. AC-6 reduces the space complexity of AC-4 to O (ed) from O (ed 2 ) [1]. <p> Related Work Many general arc consistency algorithms have been developed in the past. AC-3 has the optimal space complexity of O (e + nd) [7, 8], but its time complexity is O (ed 3 ) [7]. AC-4 has the optimal time complexity of O (ed 2 ) <ref> [8] </ref>, but its space complexity is O (ed 2 ) [8]. AC-6 reduces the space complexity of AC-4 to O (ed) from O (ed 2 ) [1]. <p> AC-3 has the optimal space complexity of O (e + nd) [7, 8], but its time complexity is O (ed 3 ) [7]. AC-4 has the optimal time complexity of O (ed 2 ) <ref> [8] </ref>, but its space complexity is O (ed 2 ) [8]. AC-6 reduces the space complexity of AC-4 to O (ed) from O (ed 2 ) [1]. AC-5 provides an generic algorithm that can exploit the structure of the domain and the structure of the constraint to produce more efficient algorithms for specific constraints.
Reference: [9] <author> P. van Hentenryck, </author> <title> Constraint satisfaction in logic programming, </title> <year> 1989. </year>
Reference-contexts: Specific algorithms are efficient specializations of the general ones for specific constraints <ref> [9, 10] </ref>. These algorithms typically exploit the semantics of individual constraints in consistency check, and they are more widely used in practical applications than the general ones. Functional (FC), anti-functional (ATFC) and monotonic constraints (MC) are three important classes of specific constraints. <p> Functional (FC), anti-functional (ATFC) and monotonic constraints (MC) are three important classes of specific constraints. In recent years, the CSP model has been implemented in constraint programming languages, such as CHIP <ref> [9] </ref> and Ilog Solver [3], for solving practical combinatorial search problems, such as scheduling and resource allocations [3, 10]. The basic constraints used in these languages are special cases of FC, ATFC and MC. <p> This cannot be achieved with existing techniques. These results are significant in practice because the basic functional constraint used in the current constraint programming languages <ref> [9, 3] </ref> is actually an IFC. 2. <p> Equations are special cases of IFC (see Section 2). All the algorithms are implemented in CMU Common Lisp on SPARC-2. We implemented AC-3, AC-5, AC-5* IFC 3 with specialized techniques for checking those classes of constraints. AC-3 uses the specialized techniques in <ref> [9] </ref>, and AC-5 uses the specialized techniques in [10]. They both use the same domain data structure in [10] (in [5], AC-3 uses the data structure in [9]). <p> We implemented AC-3, AC-5, AC-5* IFC 3 with specialized techniques for checking those classes of constraints. AC-3 uses the specialized techniques in <ref> [9] </ref>, and AC-5 uses the specialized techniques in [10]. They both use the same domain data structure in [10] (in [5], AC-3 uses the data structure in [9]). AC-5* IFC uses the new technique for merging IFCs, and the techniques in [10] for the other constraints and also for those not merged IFCs. <p> The most commonly used specific constraints are FCs, ATFCs and MCs. Their subclasses (i.e., equations, disequations and inequalities) form the core of the current constraint languages, e.g., CHIP <ref> [9] </ref>, Ilog Solver [3], etc. In [10], AC-5 is specialized to achieve an O (ed) algorithm in time for these constraint classes. However, AC-5 cannot be specialized to reduce the space complexity. AC-5* is an improvement over AC-5. It is also a generic algorithm.
Reference: [10] <author> P. van Hentenryck, Y. Deville and C-M. Teng, </author> <title> A generic arc-consistency algorithm and its specifications, </title> <journal> Artificial Intelligence, </journal> <volume> 27 </volume> <pages> 291-322, </pages> <year> 1992. </year>
Reference-contexts: 1. Introduction Arc consistency techniques are the key techniques for solving CSPs. Past research has produced many general and specific arc consistency algorithms. The most important general algorithms are AC-3 [6], AC-4 [8], AC-5 <ref> [10] </ref> and AC-6 [1]. AC-5 is also a generic algorithm, and it can be reduced to AC-3, AC-4 and AC-6. <p> Specific algorithms are efficient specializations of the general ones for specific constraints <ref> [9, 10] </ref>. These algorithms typically exploit the semantics of individual constraints in consistency check, and they are more widely used in practical applications than the general ones. Functional (FC), anti-functional (ATFC) and monotonic constraints (MC) are three important classes of specific constraints. <p> Functional (FC), anti-functional (ATFC) and monotonic constraints (MC) are three important classes of specific constraints. In recent years, the CSP model has been implemented in constraint programming languages, such as CHIP [9] and Ilog Solver [3], for solving practical combinatorial search problems, such as scheduling and resource allocations <ref> [3, 10] </ref>. The basic constraints used in these languages are special cases of FC, ATFC and MC. In [10], AC-5 is specialized to produce an algorithm running in O (ed) (the optimal time complexity [10]) for these three classes of constraints. <p> The basic constraints used in these languages are special cases of FC, ATFC and MC. In <ref> [10] </ref>, AC-5 is specialized to produce an algorithm running in O (ed) (the optimal time complexity [10]) for these three classes of constraints. However, due to its fixed queue element representation, it cannot be specialized to reduce the space complexity. <p> The basic constraints used in these languages are special cases of FC, ATFC and MC. In <ref> [10] </ref>, AC-5 is specialized to produce an algorithm running in O (ed) (the optimal time complexity [10]) for these three classes of constraints. However, due to its fixed queue element representation, it cannot be specialized to reduce the space complexity. <p> We denote by e the number of arcs in G, by d the size of the largest domain, and by arc (G) the set of arcs in G. In this paper, we assume the standard definitions of arc consistency <ref> [7, 10] </ref>. We now define functional (FC) and increasing functional (IFC) constraints. We will not define anti-functional and monotonic constraints as they can be found in [10]. Since our techniques require a total ordering on the domain, let us define it here first. Definition 1. <p> In this paper, we assume the standard definitions of arc consistency [7, 10]. We now define functional (FC) and increasing functional (IFC) constraints. We will not define anti-functional and monotonic constraints as they can be found in <ref> [10] </ref>. Since our techniques require a total ordering on the domain, let us define it here first. Definition 1. A domain D i 1 a - is totally ordered iff v k k+1 Definition 2 . <p> An example of an IFC is x = y + 5. An example of an ATFC is x y, and an example of a MC is x y + 1. The basic constraints in the current constraint languages are special cases of FC, ATFC and MC <ref> [10, 3] </ref>. In fact, they are equations (aX = bY + c), inequalities (aX bY + c) and disequations (aX bY), where a, b and c are constants and a, b 0. Domain values are natural numbers. <p> This means that for different constraints different procedures can be used. A RC C ONS checks an arc when it is first encountered, and L OCAL A RC C ONS rechecks it if its consistency is broken. <ref> [10] </ref> provides the special A RC C ONS and L OCAL A RC C ONS procedures for checking FCs, ATFCs and MCs in time O (ed). In this paper, we call these two procedures the initial check procedure and the recheck procedure respectively for intuitive reasons. <p> The focus is on showing how the new technique for IFCs performs compared to the existing techniques. The constraints involved in the comparison are equations, inequalities and disequations, which are the basic constraints of the 10 current constraint languages <ref> [10] </ref>. Equations are special cases of IFC (see Section 2). All the algorithms are implemented in CMU Common Lisp on SPARC-2. We implemented AC-3, AC-5, AC-5* IFC 3 with specialized techniques for checking those classes of constraints. <p> All the algorithms are implemented in CMU Common Lisp on SPARC-2. We implemented AC-3, AC-5, AC-5* IFC 3 with specialized techniques for checking those classes of constraints. AC-3 uses the specialized techniques in [9], and AC-5 uses the specialized techniques in <ref> [10] </ref>. They both use the same domain data structure in [10] (in [5], AC-3 uses the data structure in [9]). AC-5* IFC uses the new technique for merging IFCs, and the techniques in [10] for the other constraints and also for those not merged IFCs. <p> We implemented AC-3, AC-5, AC-5* IFC 3 with specialized techniques for checking those classes of constraints. AC-3 uses the specialized techniques in [9], and AC-5 uses the specialized techniques in <ref> [10] </ref>. They both use the same domain data structure in [10] (in [5], AC-3 uses the data structure in [9]). AC-5* IFC uses the new technique for merging IFCs, and the techniques in [10] for the other constraints and also for those not merged IFCs. <p> AC-3 uses the specialized techniques in [9], and AC-5 uses the specialized techniques in <ref> [10] </ref>. They both use the same domain data structure in [10] (in [5], AC-3 uses the data structure in [9]). AC-5* IFC uses the new technique for merging IFCs, and the techniques in [10] for the other constraints and also for those not merged IFCs. AC-5* 3 uses the techniques (initial check and recheck) described in Section 4 for IFCs and similar techniques to those in [10] for other constraints. We report two sets of tests. <p> AC-5* IFC uses the new technique for merging IFCs, and the techniques in <ref> [10] </ref> for the other constraints and also for those not merged IFCs. AC-5* 3 uses the techniques (initial check and recheck) described in Section 4 for IFCs and similar techniques to those in [10] for other constraints. We report two sets of tests. One set uses CSPs with only IFCs, in particular, equations as discussed in Section 2. The other set uses typical scheduling problems. <p> The most commonly used specific constraints are FCs, ATFCs and MCs. Their subclasses (i.e., equations, disequations and inequalities) form the core of the current constraint languages, e.g., CHIP [9], Ilog Solver [3], etc. In <ref> [10] </ref>, AC-5 is specialized to achieve an O (ed) algorithm in time for these constraint classes. However, AC-5 cannot be specialized to reduce the space complexity. AC-5* is an improvement over AC-5. It is also a generic algorithm.
References-found: 10

