URL: ftp://softlib.rice.edu/pub/CRPC-TRs/reports/CRPC-TR94598.ps.gz
Refering-URL: http://www.crpc.rice.edu/CRPC/softlib/TRs_online.html
Root-URL: 
Email: evdv@ama.caltech.edu  
Title: Domain Decomposition vs. Concurrent Multigrid  
Author: Eric F. Van de Velde 
Note: 1 This material is based upon work supported by the NSF under Cooperative Agreement No. CCR-9120008. The government has certain rights in this material.  
Date: August 29, 1994  
Address: Pasadena, CA 91125  
Affiliation: Applied Mathematics 217-50 Caltech  
Pubnum: CRPC-94-11  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> P. E. Bjtrstad and O. B. Widlund. </author> <title> Iterative methods for the solution of elliptic problems on regions partitioned into substructures. </title> <journal> SIAM Journal on Numerical Analysis, </journal> <volume> 23 </volume> <pages> 1097-1120, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction Although there are many variants, there are only two basic types of domain-decomposition methods. The oldest variety is due to Schwarz [7] and dates back to 1869. The Schwarz-iteration method decomposes a domain into two or more overlapping subdomains. In 1986, Bjtrstad and Widlund <ref> [1] </ref> proposed a domain-decomposition method with nonoverlapping subdomains. Originally, these methods were used to reduce problems on irregular domains to problems on regular domains. More recently, domain decomposition has been used as a technique for concurrent computing. The proceedings of several international conferences [3, 4] cover these and other developments.
Reference: [2] <author> A. Brandt. </author> <title> Multi-level adaptive solutions to boundary-value problems. </title> <journal> Mathematics of Computation, </journal> <volume> 31 </volume> <pages> 333-390, </pages> <year> 1977. </year>
Reference-contexts: More recently, domain decomposition has been used as a technique for concurrent computing. The proceedings of several international conferences [3, 4] cover these and other developments. Multigrid methods have gained an enormous popularity since 1977, when Brandt <ref> [2] </ref> showed that they are practical fast solution methods. Concurrent implementations were developed as soon as concurrent computers became available. Our computational experiment compares the two types of domain decomposition and a full-multigrid method. Each numerical method solves the same problem to the same error tolerance.
Reference: [3] <author> T. F. Chan, R. Glowinski, J. Periaux, and O. B. Widlund, </author> <title> editors. Domain Decomposition Methods for Partial Differential Equations. </title> <publisher> SIAM, </publisher> <year> 1990. </year>
Reference-contexts: In 1986, Bjtrstad and Widlund [1] proposed a domain-decomposition method with nonoverlapping subdomains. Originally, these methods were used to reduce problems on irregular domains to problems on regular domains. More recently, domain decomposition has been used as a technique for concurrent computing. The proceedings of several international conferences <ref> [3, 4] </ref> cover these and other developments. Multigrid methods have gained an enormous popularity since 1977, when Brandt [2] showed that they are practical fast solution methods. Concurrent implementations were developed as soon as concurrent computers became available.
Reference: [4] <editor> R. Glowinski, G. Golub, G. Meurant, and J. Periaux, editors. </editor> <title> Proceedings of the First International Symposium on Domain Decomposition Methods for Partial Differential Equations. </title> <publisher> SIAM, </publisher> <year> 1988. </year>
Reference-contexts: In 1986, Bjtrstad and Widlund [1] proposed a domain-decomposition method with nonoverlapping subdomains. Originally, these methods were used to reduce problems on irregular domains to problems on regular domains. More recently, domain decomposition has been used as a technique for concurrent computing. The proceedings of several international conferences <ref> [3, 4] </ref> cover these and other developments. Multigrid methods have gained an enormous popularity since 1977, when Brandt [2] showed that they are practical fast solution methods. Concurrent implementations were developed as soon as concurrent computers became available.
Reference: [5] <author> M. J. Holst. </author> <title> The Poisson-Boltzman Equation. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1994. </year>
Reference-contexts: Subdomain solvers. Table 2 was adapted from Holst <ref> [5] </ref>. It lists several possible subdomain solvers and their theoretical complexity when applied to the Poisson equation in two and three dimensions. The number N is the number of unknowns. In the text, we focus on the complexity of two-dimensional solvers.
Reference: [6] <author> E. Isaacson and H. B. Keller. </author> <title> Analysis of Numerical Methods. </title> <publisher> John Wiley and Sons, </publisher> <year> 1966. </year>
Reference-contexts: If L = 0, procedure mg Poisson grid calls solve Poisson grid, the coarsest-grid solver. For the coarsest-grid problem, we do not worry about performance and use Jacobi relaxation, which is the easiest to implement. Isaacson and Keller <ref> [6] </ref> show that this scheme has a convergence rate R J = 2 L 2 : The length scales L and d are as defined in (4) but with the footnote that d is the length scale of the coarsest grid. 26 The coarsest-grid solver applies K Jacobi-relaxation steps to the <p> It is an advantage of the Schwarz iteration that one can use sequential solvers on the subdomains. We use successive overrelaxation with optimal parameter. This procedure is almost optimal and easy to implement. Isaac-son and Keller <ref> [6] </ref> show that the convergence rate is given by R SOR = 2 ` Note that we use the length scale ` of the subdomain. The computation of the number of SOR-iteration steps K follows the same heuristic procedure as the one used in the coarsest-grid solver of multigrid.
Reference: [7] <author> H. A. Schwarz. </author> <title> Ueber einige Abbildungsaufgaben. </title> <journal> Journal fur die reine und angewandte Mathematik, </journal> <volume> 70 </volume> <pages> 105-120, 1869. </pages>
Reference-contexts: 1 Introduction Although there are many variants, there are only two basic types of domain-decomposition methods. The oldest variety is due to Schwarz <ref> [7] </ref> and dates back to 1869. The Schwarz-iteration method decomposes a domain into two or more overlapping subdomains. In 1986, Bjtrstad and Widlund [1] proposed a domain-decomposition method with nonoverlapping subdomains. Originally, these methods were used to reduce problems on irregular domains to problems on regular domains.
Reference: [8] <author> C. L. Seitz, W. C. Athas, C. M. Flaig, A. J. Martin, J. Seizovic, C. S. Steele, and W.-K. Su. </author> <title> The architecture and programming of the Ametek series 2010 multicomputer. In G.C. Fox, editor, Hypercube Concurrent Computers and Applications. </title> <publisher> ACM Press, </publisher> <year> 1988. </year>
Reference-contexts: Expanding the application range beyond the regular Pois--son problem requires considerable effort for any method. However, the obstacles seem significantly greater for domain decomposition. 8.2 The Computer All timings were obtained on the Symult S2010 <ref> [8] </ref>. This multicomputer is a collection of 168 Motorola 68020 processors connected in a rectangular communication network with worm-hole routing. In many concurrent-computing circles, this computer is classified as antique furniture. However, it does have advantages. Our main motivation for using this system is access.
Reference: [9] <author> E. F. Van de Velde. </author> <title> Concurrent Scientific Computing. Number 16 in Texts in Applied Mathematics. </title> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Implementation details are important, particularly because the magnitude of the difference in performance is beyond any prior expectation. Unfortunately, only the most important aspects of each program can be discussed within the space limitations of a paper. Van de Velde <ref> [9] </ref> gives a high-level derivation of the two most important concurrent programs: multigrid (Chapter 9) and domain decomposition with nonoverlapping subdomains (Chapter 10). Readers who wish all the technical details may request from the author the program listings, documented by an electronic supplement [10] to this paper. <p> Although the sequential-execution time remains important to interpret some results, an inaccurate sequential-execution time does not invalidate the whole plot. A detailed discussion on logarithmic execution-time plots is found in Chapter 1 of Van de Velde <ref> [9] </ref>. Ideally, a computation using twice the number of nodes should finish in half the time. Such ideal performance is called linear speed-up. Because of the logarithmic scales, lines of linear speed-up are straight lines with a known slope. The dotted lines in our plots show this slope. <p> With these, it is difficult to find data distributions that ensure compatibility between multigrid levels. Three-dimensional problems. We only studied two-dimensional problems. Could domain decomposition perform better when applied to three-dimensional problems? In fact, the analysis in Van de Velde <ref> [9] </ref> already indicates that domain decomposition without overlap is not suitable for three-dimensional problems. This conclusion is reached purely on grounds of memory overhead for the ghost boundaries. The same conclusion is valid for domain decomposition with large overlap.
Reference: [10] <author> E. F. Van de Velde. </author> <title> Program documentation for "Domain Decomposition vs. Concurrent Multigrid". </title> <type> Report CRPC-94-11a, </type> <institution> California Institute of Technology, </institution> <year> 1994. </year>
Reference-contexts: Van de Velde [9] gives a high-level derivation of the two most important concurrent programs: multigrid (Chapter 9) and domain decomposition with nonoverlapping subdomains (Chapter 10). Readers who wish all the technical details may request from the author the program listings, documented by an electronic supplement <ref> [10] </ref> to this paper. Any experiment is necessarily limited in scope; this experiment is not an exception.
Reference: [11] <author> P. </author> <title> Wesseling. An Introduction to Multigrid Methods. </title> <publisher> John Wiley and Sons, </publisher> <year> 1992. </year>
Reference-contexts: - int k ; solve_Poisson_grid (U [0],F [0]) ; return ; - smooth_Poisson_grid (3,U [L],F [L]) ; residual_Poisson_grid (U [L],F [L],R [L]) ; restrict_grid (R [L],F [L-1]) ; zero_grid (U [L-1]) ; mg_Poisson_grid (1,L-1,U,F,R) ; prolongadd_grid (U [L-1],U [L]) ; - smooth_Poisson_grid (3,U [L],F [L]) ; - dimensional problems, Wesseling <ref> [11] </ref> argues that omg = 4=5 achieves an optimal smoothing factor of 2=5.
Reference: [12] <author> D. M. Young. </author> <title> Iterative Solution of Large Linear Systems. </title> <publisher> Academic Press, </publisher> <year> 1971. </year> <month> 47 </month>
Reference-contexts: Ideally, a computation should be defined in terms of a few interesting parameters. The remaining coordinates that define each computation should be carefully controlled and, ideally, kept constant. Classical analysis of iterative methods for linear systems as developed by Young <ref> [12] </ref> computes a convergence rate. Given this rate, one can estimate the number of iteration steps until convergence from the magnitude of the initial error and the required accuracy on the result. This type of analysis is actually an application of performance analysis as defined here. <p> The asymptotic convergence rate R SOR underestimates the observed convergence rate; this fact is discussed by Young <ref> [12] </ref>. As a result, the computed number of iteration steps does not solve the subproblems to sufficient accuracy.
References-found: 12

