URL: http://www.cs.wisc.edu/~shoup/papers/dlbounds1.ps.Z
Refering-URL: http://www.cs.wisc.edu/~shoup/papers/
Root-URL: 
Email: sho@zurich.ibm.com  
Title: Lower Bounds for Discrete Logarithms and Related Problems  
Author: Victor Shoup 
Address: Research-Zurich, Saumerstr. 4, 8803 Ruschlikon, Switzerland  
Affiliation: IBM  
Abstract: This paper considers the computational complexity of the discrete logarithm and related problems in the context of "generic algorithms"|that is, algorithms which do not exploit any special properties of the encodings of group elements, other than the property that each group element is encoded as a unique binary string. Lower bounds on the complexity of these problems are proved that match the known upper bounds: any generic algorithm must perform (p 1=2 ) group operations, where p is the largest prime dividing the order of the group. Also, a new method for correcting a faulty Diffie-Hellman oracle is presented.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> L. Babai and E. Szemeredi. </author> <title> On the complexity of matrix group problems I. </title> <booktitle> In 25th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 229-240, </pages> <year> 1984. </year>
Reference-contexts: Theorem 7 and its corollary show how to efficiently turn an oracle that is occasionally correct into one that is almost always correct. The theorem is also useful in the application of the Goldreich-Levin theorem to hard bits of the Diffie-Hellman problem. Related Work Babai and Szemeredi <ref> [1] </ref> proved lower bounds in a "black box" model in which the encoding of group elements is not necessarily unique, and the group oracle must be consulted to test for equality.
Reference: 2. <author> D. Boneh and R. J. Lipton. </author> <title> Algorithms for black-box fields and their application to cryptography. </title> <booktitle> In Advances in Cryptology-Crypto '96, </booktitle> <pages> pages 283-297, </pages> <year> 1996. </year>
Reference-contexts: Suppose we are given an oracle for solving the Diffie-Hellman problem in a group G, and now want to solve the Diffie-Hellman problem in a proper subgroup H. This problem is interesting, as it plays an important role in Maurer's [5] and Boneh and Lipton's <ref> [2] </ref> reductions from the discrete logarithm problem to the Diffie-Hellman problem: they require Diffie-Hellman oracles for prime-order subgroups. Theorem 5 implies that in the context of generic algorithms, there are situations where the oracle for G does not help at all in solving the problem in H. <p> Here, * is small, but nonnegligible. The problem is to use this oracle to build an efficient algorithm for the Diffie-Hellman problem whose output is almost certainly correct for all inputs. One motivation for this problem is again the reductions of [5] and <ref> [2] </ref> from the discrete logarithm problem to the Diffie-Hellman problem; these reductions require a nearly-perfect oracle|a faulty oracle will simply not do. Given such an oracle, using the standard random self-reduction, we can run it O (1=*) times so that with high probability one of its outputs is correct.
Reference: 3. <author> J. Buchmann, </author> <year> 1995. </year> <type> Personal communication. </type>
Reference-contexts: Theorem 2 deals with the analog for the discrete logarithm problem in noncyclic groups, which was suggested to the author by Buchmann <ref> [3] </ref>. Suppose G is the product of r cyclic groups of prime order p. Then any generic algorithm that (with high probability) expresses a given element on a given basis for G must perform at least (p r=2 ) group operations. In x3 we consider the Diffie-Hellman problem.
Reference: 4. <author> O. Goldreich and L. A. Levin. </author> <title> A hard-core predicate for all one-way functions. </title> <booktitle> In 21st Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 25-32, </pages> <year> 1989. </year>
Reference-contexts: The problem is to use this oracle to solve the Diffie-Hellman problem. Another situation in which this type of oracle arises is in the hard-bit construction of Goldreich and Levin <ref> [4] </ref>, where a bit-predicting oracle can be turned into this type of oracle. Theorem 7 Given a (k; ffi) Diffie-Hellman oracle with ffi &gt; 7=8, we can construct a probabilistic (generic) algorithm for the Diffie-Hellman problem with the following properties.
Reference: 5. <author> U. Maurer. </author> <title> Towards the equivalence of breaking the Diffie-Hellman protocol and computing discrete logarithms. </title> <booktitle> In Advances in Cryptology-Crypto '94, </booktitle> <pages> pages 271-281, </pages> <year> 1994. </year>
Reference-contexts: Suppose we are given an oracle for solving the Diffie-Hellman problem in a group G, and now want to solve the Diffie-Hellman problem in a proper subgroup H. This problem is interesting, as it plays an important role in Maurer's <ref> [5] </ref> and Boneh and Lipton's [2] reductions from the discrete logarithm problem to the Diffie-Hellman problem: they require Diffie-Hellman oracles for prime-order subgroups. <p> Here, * is small, but nonnegligible. The problem is to use this oracle to build an efficient algorithm for the Diffie-Hellman problem whose output is almost certainly correct for all inputs. One motivation for this problem is again the reductions of <ref> [5] </ref> and [2] from the discrete logarithm problem to the Diffie-Hellman problem; these reductions require a nearly-perfect oracle|a faulty oracle will simply not do.
Reference: 6. <author> U. Maurer and S. Wolf. </author> <title> Diffie-Hellman oracles. </title> <booktitle> In Advances in Cryptology-Crypto '96, </booktitle> <pages> pages 268-282, </pages> <year> 1996. </year>
Reference-contexts: This transformation can be accomplished by means of a simulator that preserves time, but not space|the simulator must store the representations of all group elements computed by the algorithm. For the problem of correcting a faulty Diffie-Hellman oracle, Maurer and Wolf <ref> [6] </ref> independently devised a scheme based on techniques quite different from ours. It seems that our scheme is substantially simpler and more efficient than theirs. 2 The Discrete Logarithm Problem The main result of this section is the following.
Reference: 7. <author> V. I. Nechaev. </author> <title> Complexity of a determinate algorithm for the discrete logarithm. </title> <journal> Mathematical Notes, </journal> <volume> 55(2) </volume> <pages> 165-172, </pages> <year> 1994. </year> <journal> Translated from Matematicheskie Za-metki, </journal> 55(2):91-101, 1994. 
Reference-contexts: For a cyclic group of order n, if p is the largest prime divisor of n, their results give an (p) lower bound. Note that the Pohlig-Hellman algorithm does not work in this model. More recently, Nechaev <ref> [7] </ref> considered algorithms for the discrete logarithm problem in the following computational model: an algorithm is allowed to perform group operations and equality tests, but no other operations on group elements are allowed|the notion of encodings of elements does not enter into this model at all.
Reference: 8. <author> S. Pohlig and M. Hellman. </author> <title> An improved algorithm for computing logarithms over GF(p) and its cryptographic significance. </title> <journal> IEEE Trans. Inf. Theory, </journal> <volume> 24 </volume> <pages> 106-110, </pages> <year> 1978. </year>
Reference-contexts: To measure the running time of such an algorithm, we count both the number of bit operations, and the number of group operations (i.e., oracle queries). It is readily seen that the classical Pohlig-Hellman algorithm <ref> [8] </ref> is a generic algorithm. Let p denote the largest prime divisor of n.
Reference: 9. <author> J. M. Pollard. </author> <title> Monte Carlo methods for index computation mod p. </title> <journal> Mathematics of Computation, </journal> <volume> 32 </volume> <pages> 918-924, </pages> <year> 1978. </year>
Reference-contexts: Note that this algorithm makes essential use of the fact that group elements are uniquely encoded as bit strings, which facilitates the use of fast sorting-and-searching techniques. Pollard's discrete logarithm algorithm <ref> [9] </ref> also falls into this generic class. This algorithm is much more space efficient than the Pohlig-Hellman algorithm, but its efficiency relies on the heuristic assumption that the encoding function behaves like a random mapping.
Reference: 10. <author> C. Schnorr. </author> <title> Efficient signature generation by smart cards. </title> <journal> J. Cryptology, </journal> <volume> 4:161--174, </volume> <year> 1991. </year>
Reference-contexts: Theorem 5 implies that in the context of generic algorithms, there are situations where the oracle for G does not help at all in solving the problem in H. In x4 we consider the security of an identification scheme due to Schnorr <ref> [10] </ref> based on the discrete logarithm problem. While this scheme is known to be secure against "passive" attacks, its security against "active" attacks is not well understood. Theorem 6 shows that this scheme is indeed secure against active attacks when the adversary is a generic algorithm. <p> Such an attack is called "active." An attack where no prior interaction with P is allowed is called "passive." Clearly, security against active attacks is preferable to security against passive attacks. An identification scheme due to Schnorr <ref> [10] </ref> runs as follows. Let G be a cyclic group of order n, with a publicly known generator g. P 's private key is an element x 2 Z=n, and its public key is h = g x . The value x is randomly chosen.
Reference: 11. <author> J. T. Schwartz. </author> <title> Fast probabilistic algorithms for verification of polynomial identities. </title> <journal> J. ACM, </journal> <volume> 27(4) </volume> <pages> 701-717, </pages> <year> 1980. </year>
Reference-contexts: Then for random x 1 ; : : : ; x k 2 Z=p t , the probability that F (x 1 ; : : : ; x k ) = 0 is at most d=p. Proof. For t = 1, this is proved in Schwartz <ref> [11] </ref>. For t &gt; 1, one divides the equation F = 0 by the highest possible power of p, and obtains a nonzero equation of no greater degree that holds modulo p.
References-found: 11

