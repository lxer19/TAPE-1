URL: ftp://ftp.cs.dartmouth.edu/TR/TR96-302.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/reports/abstracts/TR96-302/
Root-URL: http://www.cs.dartmouth.edu
Title: Cross-input Amortization Captures the Diffuse Adversary  
Author: Neal E. Young 
Address: Hanover, NH 03755-3510  
Affiliation: Department of Computer Science Dartmouth College  
Note: Available at  
Pubnum: Technical Report PCS-TR96-302  
Email: ney@cs.dartmouth.edu  
Web: URL ftp://ftp.cs.dartmouth.edu/TR/TR96-302.ps.Z  
Abstract: Koutsoupias and Papadimitriou recently raised the question of how well deterministic on-line paging algorithms can do against a certain class of adversarially biased random inputs [3]. Such an input is given in an on-line fashion; the adversary determines the next request probabilistically, subject to the constraint that no page may be requested with probability more than a fixed * &gt; 0. In this paper, we answer their question by estimating, within a factor of two, the optimal competitive ratio of any deterministic on-line strategy against this adversary. We further analyze randomized on-line strategies, obtaining upper and lower bounds within a factor of two. These estimates reveal the qualitative changes as * ranges continuously from 1 (the standard model) towards 0 (a severely handicapped adversary). The key to our upper bounds is a novel charging scheme that is appropriate for adversarially biased random inputs. The scheme adjusts the costs of each input so that the expected cost of a random input is unchanged, but working with adjusted costs, we can obtain worst-case bounds on a per-input basis. This lets us use worst-case analysis techniques while still thinking of some of the costs as expected costs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. A. Belady. </author> <title> A study of replacement algorithms for virtual storage computers. </title> <journal> IBM Systems Journal, </journal> <volume> 5 </volume> <pages> 78-101, </pages> <year> 1966. </year>
Reference-contexts: An algorithm for the problem must specify which page to evict when a fault occurs. Given an algorithm A and a sequence x, we let A (x) denote the cost (number of faults) incurred by A in servicing x. The optimal algorithm, Opt <ref> [1] </ref>, evicts the page that will be next requested latest. An algorithm 3 is on-line if the choice of which page to evict is independent of subsequent requests.
Reference: [2] <author> A. Fiat, R. M. Karp, M. Luby, L. A. McGeoch, D. D. Sleator, and N. E. Young. </author> <title> Competitive paging algorithms. </title> <journal> Journal of Algorithms, </journal> <volume> 12 </volume> <pages> 685-699, </pages> <year> 1991. </year>
Reference-contexts: for * 1 k+1 , 1 1 R ( * ) R ( * ; Lru) 2 1 + ln 1 *k ; while for * 1 k+1 , 1 + ln 2* 1 + ln * : The upper bound holds for first-in-first-out (Fifo) and the marking algorithm (Mark, <ref> [2, 4, 5] </ref>) as well as for Lru. (The upper bound does not hold for flush-when-full (Fwf).) We also estimate the optimal ratio for randomized on-line strategies, R r ( * ), which Koutsoupias and Papadimitriou do not consider. <p> the page requested was previously requested during the phase (these requests play an important role in the analysis); new | the page requested was not requested during this or the previous phase; worrisome | the request is not new, but nonetheless causes Lru to fault. 4 It was previously observed <ref> [2, 4, 5] </ref> that in a phase with m new requests, Opt incurs at least m=2 faults in the traditional amortized sense. (This is because in two consecutive phases, if the second has m new requests, then k + m distinct pages are requested; since Opt has a cache of size
Reference: [3] <author> Elias Koutsoupias and Christos H. Papadimitriou. </author> <title> Beyond competitive analysis. </title> <booktitle> In Proc. of the 35th IEEE Annual Symp. on Foundation of Computer Science, </booktitle> <pages> pages 394-400, </pages> <year> 1994. </year>
Reference-contexts: One model for this is to assume that the inputs are generated by a random source that has been biased in a constrained fashion by an adversary that chooses the worst possible bias for the algorithm in question. Koutsoupias and Papadimitriou <ref> [3] </ref> recently studied how well any deterministic on-line paging algorithm can do against such an adversary. Their adversary, * , is allowed to select the next request only probabilistically, with each page being requested with probability at most some * &gt; 0. <p> The optimal algorithm, Opt [1], evicts the page that will be next requested latest. An algorithm 3 is on-line if the choice of which page to evict is independent of subsequent requests. Following Koutsoupias and Papadimitriou <ref> [3] </ref>, given a known class of distributions of the input sequences and an algorithm A, define R (; A) = max E D [A (x)] and A where A ranges over the class of deterministic on-line algorithms, and R r () = min R (; A); where A ranges over the <p> Fix m = maxf1; d 1 * e kg. The adversary requests the pages in an on-line fashion. At the beginning of a phase, the adversary requests m new pages by assigning probability only 6 to pages not in Lru's cache. (Here we follow <ref> [3] </ref> in assuming that there are at least 1 * + k pages available.) For the remainder of the phase, at each request the adversary assigns probability to pages with the following priority. First priority is given to pages requested last phase or this phase but not in A's cache.
Reference: [4] <author> Neal Young. </author> <title> Competitive paging and dual-guided algorithms for weighted caching and matching. </title> <type> (Thesis) Tech. Rep. </type> <institution> CS-TR-348-91, Computer Science Department, Princeton University, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: for * 1 k+1 , 1 1 R ( * ) R ( * ; Lru) 2 1 + ln 1 *k ; while for * 1 k+1 , 1 + ln 2* 1 + ln * : The upper bound holds for first-in-first-out (Fifo) and the marking algorithm (Mark, <ref> [2, 4, 5] </ref>) as well as for Lru. (The upper bound does not hold for flush-when-full (Fwf).) We also estimate the optimal ratio for randomized on-line strategies, R r ( * ), which Koutsoupias and Papadimitriou do not consider. <p> the page requested was previously requested during the phase (these requests play an important role in the analysis); new | the page requested was not requested during this or the previous phase; worrisome | the request is not new, but nonetheless causes Lru to fault. 4 It was previously observed <ref> [2, 4, 5] </ref> that in a phase with m new requests, Opt incurs at least m=2 faults in the traditional amortized sense. (This is because in two consecutive phases, if the second has m new requests, then k + m distinct pages are requested; since Opt has a cache of size
Reference: [5] <author> Neal Young. </author> <title> The k-server dual and loose competitiveness for paging. </title> <journal> Algorithmica, </journal> <volume> 11(6) </volume> <pages> 525-541, </pages> <year> 1994. </year>
Reference-contexts: for * 1 k+1 , 1 1 R ( * ) R ( * ; Lru) 2 1 + ln 1 *k ; while for * 1 k+1 , 1 + ln 2* 1 + ln * : The upper bound holds for first-in-first-out (Fifo) and the marking algorithm (Mark, <ref> [2, 4, 5] </ref>) as well as for Lru. (The upper bound does not hold for flush-when-full (Fwf).) We also estimate the optimal ratio for randomized on-line strategies, R r ( * ), which Koutsoupias and Papadimitriou do not consider. <p> the page requested was previously requested during the phase (these requests play an important role in the analysis); new | the page requested was not requested during this or the previous phase; worrisome | the request is not new, but nonetheless causes Lru to fault. 4 It was previously observed <ref> [2, 4, 5] </ref> that in a phase with m new requests, Opt incurs at least m=2 faults in the traditional amortized sense. (This is because in two consecutive phases, if the second has m new requests, then k + m distinct pages are requested; since Opt has a cache of size
References-found: 5

