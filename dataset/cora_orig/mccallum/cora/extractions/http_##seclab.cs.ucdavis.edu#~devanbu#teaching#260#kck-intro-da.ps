URL: http://seclab.cs.ucdavis.edu/~devanbu/teaching/260/kck-intro-da.ps
Refering-URL: http://seclab.cs.ucdavis.edu/~devanbu/teaching/260/sched.html
Root-URL: http://www.cs.ucdavis.edu
Email: kck@vision.postech.ac.kr  
Phone: tel: (82)562-79-2258  
Title: Feature-Oriented Domain Analysis for Software Reuse  
Author: Kyo-Chul Kang 
Keyword: domain analysis, reuse  
Address: 790-600 Korea  
Affiliation: Department of Computer Science Pohang Institute of Science and Technology Pohang, Kyungbuk  
Abstract: The systematic discovery and exploitation of commonality across related software systems is a fundamental technical requirement for achieving successful software reuse. Domain analysis is one technique that can be applied to meet this requirement. This article presents a method for examining related software systems and the underlying theory of the class of systems they represent. The method produces a generic description, or domain model, of the requirements of those systems and of approaches for implementing new systems in the class. The article proposes a model-based software development approach that uses a domain model as the basis for application development. 
Abstract-found: 1
Intro-found: 1
Reference: [CONKLIN88] <author> Conklin, J., Begeman, </author> <title> M.L., "gIBIS: A Hypertext Tool for Exploratory Policy Discussion", </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 6(4) </volume> <pages> 303-331, </pages> <month> October, </month> <year> 1988. </year>
Reference-contexts: there would be nowhere to draw the final zap lines from. 5.2.3 Issues and Decisions A record of the issues and decisions that arise in the course of the features analysis must be incorporated into the features model to provide the rationale for choosing options and selecting among several alternatives <ref> [CONKLIN88] </ref>. As an example, the interactiveF eedback feature has two different alternatives: ghostF eedback and opaqueF eedback. It is impossible to select one or the other without having access to the same information the original designer had.
Reference: [GILR89] <author> Gilroy, K.A., Comer, E.R., Grau, J.K., Mer-let, P.J. </author> <title> "Impact of Domain Analysis on Reuse Methods" U.S. </title> <publisher> Army CECOM, </publisher> <address> Ft. Monmouth, NJ, </address> <month> Nov. </month> <year> 1989. </year>
Reference-contexts: The methods proposed in <ref> [GILR89, PRIE87] </ref> suggest that there are three basic phases in the domain analysis process: * Context analysis: The domain analyst interacts with users and domain experts to establish the bounds of the domain and establish a proper scope for the analysis.
Reference: [HAREL89] <author> Harel, D., Rolph, S., </author> <title> "Modeling ana Analyzing Complex Reactive Systems: The Statemate Approach", </title> <booktitle> Proceedings of the AIAA Computers in Aerospace VII Conference, </booktitle> <pages> pp. 239-246, </pages> <institution> The American Institute of Aeronautics abd Astronautics, </institution> <address> Washington, DC, </address> <month> October, </month> <year> 1989 </year>
Reference-contexts: The model abstract and represents these common/differing functions so that a specific application can be viewed as an adaptation or refinement of the model. The example domain analysis uses Statemate Stat-echarts and Activitycharts to represent the functional model <ref> [HAREL89] </ref>. No existing tool adequately handles the requirements necessary for modeling common functionality and handling parameterization through features. Statemate offers a good, general-purpose specification tool, though the application of the tool to support domain analysis requires tailoring.
Reference: [KANG89] <author> Kang, K.C., </author> <title> "Features Analysis: An Approach to Domain Analysis", </title> <booktitle> Proceedings of the Reuse in Practice Workshop, </booktitle> <month> July 11-13, </month> <year> 1989, </year> <institution> Pittsburgh, PA., IDA log No. HQ90-035350/1 </institution>
Reference: [KANG90] <author> Kang, K.C., Cohen, S.G., Hess, J.A, Novak, W.E., Peterson, </author> <title> A.S. "Feature-Oriented Domain Analysis (FODA): Feasibility Study", </title> <institution> CMUSEI-90-TR-21, Software Engineering Institute, Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference-contexts: This section presents an example of their application, focusing on the features model and behavioral model from domain modeling. A more comprehensive example covering all aspects of the method can be found in <ref> [KANG90] </ref>. As a sample domain window manager software, a sub-domain of window management systems software, was selected as it offers a fairly complex set of requirements for domain analysis and is an application area that should be familiar to most users of the method. <p> The functional view of the domain was also created using Activitycharts. As with the behavioral view, features were used to parameterize the model and specify mandatory, optional, and alternative functions and data flows. These models are not included in this paper but can be found in <ref> [KANG90] </ref>. 6 Conclusions Domain analysis is a necessary first step in establishing requirements for software reuse.
Reference: [PRIE87] <author> Prieto-Diaz, R., </author> <title> "Domain Analysis for Reusability", </title> <booktitle> Proceedings of COMPSAC 87; The Eleventh Annual International Computer Software and Applications Conference, </booktitle> <pages> pp. 23-29, </pages> <publisher> IEEE Computer Society, </publisher> <address> Washington, DC, </address> <month> Oct. </month> <year> 1987 </year>
Reference-contexts: The methods proposed in <ref> [GILR89, PRIE87] </ref> suggest that there are three basic phases in the domain analysis process: * Context analysis: The domain analyst interacts with users and domain experts to establish the bounds of the domain and establish a proper scope for the analysis.
Reference: [PRIE90] <author> Prieto-Diaz, R., </author> <title> "Domain Analysis: An Introduction", </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 15(2), </volume> <pages> pp. 47-54, </pages> <month> Apr. </month> <year> 1990 </year>
Reference-contexts: 1 Introduction The systematic discovery and exploitation of commonality across related software systems is a fundamental technical requirement for achieving successful software reuse <ref> [PRIE90] </ref>. Domain analysis is one technique that can be applied to meet this requirement. By examining a class of related software systems and the commonality underlying the theory of those systems, domain analysis can provide a reference model for describing the class.
References-found: 7

