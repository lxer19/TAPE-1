URL: http://www.cs.princeton.edu/courses/archive/spr96/cs425/postscripts/sigmod-96-arch.ps
Refering-URL: http://www.cs.princeton.edu/courses/archive/spr96/cs425/wto.html
Root-URL: http://www.cs.princeton.edu
Keyword: Index Terms Parallel Multimedia Database, Teradata, User-Defined Functions, Content-Based Analysis.  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Stonebraker, </author> <title> The Case for Shared Nothing, </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> Vol. 9, No. 2, </volume> <pages> pp. 4-9. </pages>
Reference-contexts: Symmetric multiprocessing (SMP) and massively parallel processing (MPP) hardware architectures provide such capabilities. The computer resources on these machines can be configured as a shared-nothing set of virtual processors (vprocs), each with its own CPU, memory, and disk space. These vprocs operate in a shared-nothing database environment <ref> [1] </ref>. Each vproc operates independently and in parallel with other vprocs. The number of vprocs on these machines is configurable and not necessarily equal to the number of physical CPUs. By using vprocs as addressable logical processors, system reconfiguration and fault resilience operations become more manageable.
Reference: [2] <author> W. OConnell, D. Schrader, H. Chen, </author> <title> Teradata SQL3 Multimedia Database Server, Technology For Multimedia, </title> <note> IEEE Press, Book Chapter, To appear late 1996. </note>
Reference: [3] <author> F. Carino, W. Sterling, </author> <title> I.T. Ieong, Moonbase--A Complete Multimedia Database Solution, </title> <booktitle> Proc. of the ACM Multimedia Conf. Wkshp on Multimedia Database Mgmt Sys., </booktitle> <address> San Francisco, CA, </address> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: The minimal theoretical performance reduction in the system would then be 1/N for an N-node system. In reality, experience with the Teradata DBS indicates that this results in dreadful interconnection problems on a large system. 5.1.1 Cliques The Multimedia Object Manager uses the Teradata database technique called cliques <ref> [3] </ref>. Cliques are groups of nodes of size C (where C is configurable, typically as four nodes). By grouping nodes in cliques, instead of by twos, the work of a failed node is split evenly across C-1 nodes.
Reference: [4] <author> M. Olson, </author> <title> Cover You Assets, </title> <booktitle> Illustra Information Technologies, Inc., SIGMOD, </booktitle> <volume> Vol. 24, No. </volume> <pages> 2, </pages> <address> San Jose, CA, </address> <year> 1995, </year> <note> p. 453. </note>
Reference-contexts: The Multimedia Infrastructure provides communication and system resource management across the vprocs. Three Multimedia Object Manager software components are discussed in this paper: Programmable agents [5] A parallel storage system A library of User-Defined Functions (UDFs) <ref> [4] </ref> Each user request results in agents being dispatched, in parallel, to the appropriate vprocs.
Reference: [5] <author> M. Geneserethm, S. Ketchpel, </author> <title> Software Agents, </title> <journal> Comm. of ACM, Special Issue Intelligent Agents, </journal> <volume> Vol. 37, No. 7, </volume> <month> July </month> <year> 1994, </year> <pages> pp. 48-53. </pages>
Reference-contexts: Once the Interface Manager has dispatched the agents, one or more Object Managers may be involved in servicing the agents in parallel. The Multimedia Infrastructure provides communication and system resource management across the vprocs. Three Multimedia Object Manager software components are discussed in this paper: Programmable agents <ref> [5] </ref> A parallel storage system A library of User-Defined Functions (UDFs) [4] Each user request results in agents being dispatched, in parallel, to the appropriate vprocs.
Reference: [6] <author> G. Agha, </author> <title> Actors: A Model of Concurrent Computing in Distributed Systems, </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: An agent may remove itself from the system when it receives an appropriate event type. 4.1 Agent Model The Multimedia Object Managers agent model consists of the following four components: A script 3 Context Events (messages) A mailbox (to receive events) <ref> [6] </ref> Agents are programmed through a scripting language, which defines the control ow and invocation of UDFs. Since the agent executor must understand the semantics of the script, the operations that an agent can perform range from very simple to very complex. <p> Agent scripts are executed by an executor, one on each vproc. The agents initial context is set via its initial event. The models basis is the Actors programming model. <ref> [6] </ref> The 3. A script is a set of instructions telling the agent what to do. 4 Multimedia Object Manager team has extended the model for appropriate step-execution of UDFs by the agent scripts [3][7]. <p> The model provides a powerful transportation mechanism for data as well as an execution mechanism for control structures. An agent is a script along with its context and a mailbox. The arrival of an event in its mailbox triggers its execution <ref> [6] </ref>. This triggering causes the agent to execute the agents script. The degree of concurrency in the system can be controlled by adding or reducing the number of agents in the Multimedia Object Manager. Agents may be initially placed on all or a subset of the parallel vprocs [6]. 4.2 Agent <p> its execution <ref> [6] </ref>. This triggering causes the agent to execute the agents script. The degree of concurrency in the system can be controlled by adding or reducing the number of agents in the Multimedia Object Manager. Agents may be initially placed on all or a subset of the parallel vprocs [6]. 4.2 Agent Flexibility and Scalability Using an asynchronous light-weight agent model as the basic form of computation offers advantages over process-oriented models. In addition to easier dataow modeling, [7] the agent infrastructure provides exibility.
Reference: [7] <author> G. Thiruvathukal, W. OConnell, T. Christopher, </author> <title> Toward Scalable Parallel Software: Interfacing to Non-von Neumann Programming Environments, </title> <booktitle> Proc. of the SIAM 95, </booktitle> <address> San Francisco, CA, </address> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: Agents may be initially placed on all or a subset of the parallel vprocs [6]. 4.2 Agent Flexibility and Scalability Using an asynchronous light-weight agent model as the basic form of computation offers advantages over process-oriented models. In addition to easier dataow modeling, <ref> [7] </ref> the agent infrastructure provides exibility. Encapsulating the UDF execution into agents provides additional exibility in optimizing system performance: Agents can be dispatched to the vprocs so the amount of remote object access required in UDF execution is minimized. Furthermore, agents fit nicely into a massively parallel environment. <p> Furthermore, agents fit nicely into a massively parallel environment. This is due to the asynchronous nature of agents concurrently overlapping communication and computation <ref> [7] </ref>. The computation scales easily by increasing the number of cloned agents on the system. <p> This is not agent migration in which we piggyback the agents context along with the event, but it is the ability to control the ow of computation by conditionally sending events to other agents based on the current agents state information. This is a form of data ow <ref> [7] </ref>. This provides a very powerful computation paradigm in which a multi-step agent execution plan can be accomplished by a number of vprocs.
Reference: [8] <author> A. Biliris, E. Panagos, </author> <title> A High-Performance Configurable Storage Manager, </title> <booktitle> Proc. of the IEEE 9th Intl Conf. on Data Engineering, </booktitle> <address> Taipei, Taiwan, </address> <month> March </month> <year> 1995, </year> <pages> pp. 35 - 43. </pages>
Reference-contexts: Parallelism is achieved through data distribution, allowing UDF invocation to be done on each vproc in parallel. The Multimedia Object Manager utilizes BeSS (Bell Labs Storage System) to provide persistent storage and allocation, concurrency control, and recovery <ref> [8] </ref>. BeSS is a high-performance configurable database storage manager that provides Two-Phase Commit and Two-Phase Locking protocols to the Multimedia Object Manager [10]. All operations in BeSS are performed under database transactional semantics. Additionally, BeSS uses memory mapping techniques that provide near-memory-speed pointer dereferences (for memory-resident objects). <p> Sequential access performance requires that reading/ writing large chunks of objects must be close to the transfer rate [15]. The Multimedia Object Manager makes effective use of asynchronous I/O parallelism, data striping, and disk allocation for high-performance storage and retrieval <ref> [8] </ref>. Large objects spanning multiple pages can be accessed and updated as if they were a stream of bytes, even though internally they may not be contiguous and may possibly be striped over many disks. Efficient byte-range operations, such as insert, append, and truncate are provided, among others.
Reference: [9] <author> F. Carino, W. Sterling, P. Kostamaa, </author> <title> Industrial Database Supercomputer Exegesis--DBC/1012, the NCR 3700, The Ynet and the BYNET, Emerging Trends in Knowledge and Database Systems, </title> <journal> IEEE Adv. </journal> <note> Computer Science Book Chapter, </note> <year> 1994. </year>
Reference-contexts: merging answer sets. 4.3 Installing Agents Agents can be sent/installed from any application to any vproc (through the Multimedia Object Managers API) in one of the following three modes: Monocast Multicast Broadcast These operations are very efficient on networks such as the BYNET interconnect in the NCR 5100M MPP machine <ref> [9] </ref>. In the multicast mode, the application can select a predefined subset of vprocs. Broadcast mode involves all vprocs. Sending events to agents can also be done in any mode. The cloning of agents is a powerful model of computation. <p> Due to the stringent data availability requirement on high-end systems (where individual hardware faults have a higher probability of occurrence), multiple hardware data paths are provided to each physical storage device. This technique is used by the Teradata database running on the NCR System 5100M MPP machine <ref> [9] </ref>. This technique increases the availability of data in case of path failures (for example, a lost physical node). In cases of storage device failures (for example, a lost disk), data redundancy is used.
Reference: [10] <author> J. Gray, A. Reuter, </author> <title> Transaction Processing: Concepts and Techniques, </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1993. </year>
Reference-contexts: The Multimedia Object Manager utilizes BeSS (Bell Labs Storage System) to provide persistent storage and allocation, concurrency control, and recovery [8]. BeSS is a high-performance configurable database storage manager that provides Two-Phase Commit and Two-Phase Locking protocols to the Multimedia Object Manager <ref> [10] </ref>. All operations in BeSS are performed under database transactional semantics. Additionally, BeSS uses memory mapping techniques that provide near-memory-speed pointer dereferences (for memory-resident objects). BeSS also offers extensive support for large objects, including capabilities for striping across disk volumes. <p> In this mode, processes operate on objects in their own private buffer pool. 5.3.1 Transactional Semantics The system provides the traditional ACID transaction properties (Atomicity, Concurrency, Isolation, and Durability). Concurrency control is provided through two-phase locking (2PL), while recovery is provided through logging <ref> [10] </ref>. Since moving computation (versus data) is not always possible, each storage manager supports remote object access. Thus, in the case of both locally and remotely accessed data, all pages and locks accessed by processes remain cached on the node where the transaction is executing.
Reference: [11] <author> N. Gehani, H. V. Jagadish, W. Roome, OdeFS: </author> <title> A File System Interface to an Object-Oriented Database, </title> <booktitle> Proc. of the 20th VLDB Conf., </booktitle> <address> Santiago, Chile, </address> <year> 1994. </year>
Reference: [12] <author> S. Ghandehardizadeh, D. DeWitt, </author> <title> Hybrid-Range Partitioning Strategy: A New Declustering Strategy for Multiprocessor Database Machines, </title> <booktitle> Proc. of the 16th VLDB, </booktitle> <address> Brisbane, Australia, </address> <year> 1990, </year> <pages> pp. 481-492. </pages>
Reference: [13] <author> C. Faloutsos, N. Koudas, I. Kamel, </author> <title> Declustering Spatial Databases on a Multi-Computer Architecture, </title> <type> 11 Technical Report TM 950720-07, </type> <institution> AT&T Bell Laboratories, </institution> <month> Sept. </month> <note> 1995; to appear in the Proc. Extending Database Tech., </note> <institution> France, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: To accomplish fast querying, objects are preprocessed (through UDFs). This step generates additional metadata on the objects, which must be updated when the raw objects are modified. The Multimedia Object Manager will evolve to provide a generic framework for spatial indexing on feature vector 9 keys <ref> [13] </ref>. This framework allows faster access to objects based on their attributes. Each ADT feature attribute may require its own index structure. When an agent is accessing objects, it first checks to see if the attribute of interest in the ADT is indexed. If so, it accesses the index.
Reference: [14] <author> A. Biliris, W. OConnell, E. Panagos, </author> <title> BeSS Reference Guide, Release 0.8, </title> <type> Technical Report, </type> <institution> AT&T Bell Laboratories, </institution> <month> Sept. </month> <year> 1995. </year>
Reference: [15] <author> A. Biliris, </author> <title> An Efficient Database Storage Structure for Large Dynamic Objects, </title> <booktitle> Proc. of the IEEE 8th International Conference on Data Engineering, </booktitle> <address> Phoenix, AZ, </address> <month> Feb. </month> <year> 1992, </year> <pages> pp. 301-308. </pages>
Reference-contexts: Each vproc on a node manages a single BeSS database, consisting of one or more storage areas. Each storage area is partitioned into fixed-sized extents. Allocation from an extent is based on the binary buddy system <ref> [15] </ref>. All control information (storage managers metadata, such as control segments) is kept in a root (primary) area, while data segments can be dispersed throughout all areas in the database. <p> Random access performance requires that the cost of locating byte ranges be independent of the objects size. Sequential access performance requires that reading/ writing large chunks of objects must be close to the transfer rate <ref> [15] </ref>. The Multimedia Object Manager makes effective use of asynchronous I/O parallelism, data striping, and disk allocation for high-performance storage and retrieval [8]. <p> In addition, since the Multimedia Object Manager is managing all its disk allocation, the storage manager must store objects so that utilization of large objects is close to 100%. This requires that objects be stored with minimal internal fragmentation <ref> [15] </ref>. Each large object is stored in a set of variable-sized segments, each consisting of adjacent disk pages. As insertions, deletions, and appends are done, the segments may be grown or broken up. New segments may be added as the object grows.
Reference: [16] <author> C. Lamb, G. Landis, J. Orenstein, D. Weinreb, </author> <title> The ObjectStore Database System, </title> <journal> Comm. of the ACM, </journal> <volume> 34(10):pp. </volume> <pages> 51-63, </pages> <month> Oct. </month> <year> 1991. </year>
Reference: [17] <author> A. Biliris, E. Panagos, EOS: </author> <title> An Extensible Object Store, </title> <booktitle> Proc. of ACM-SIGMOD 1994 Intl Conference on Management of Data, </booktitle> <address> Minneapolis, MN, </address> <month> May </month> <year> 1994, </year> <title> p 517. </title>
Reference: [18] <author> W. Sterling, F. Carino, C. Boss, </author> <title> Multimedia Databases and Servers, </title> <journal> AT&T Technical Journal, </journal> <volume> Sept./Oct. </volume> <year> 1995, </year> <pages> pp. 54-67. </pages>
Reference: [19] <author> W. Kim, </author> <title> UniSQL/X Unified Relational and Object-Oriented Database System, </title> <booktitle> Proc. of the ACM SIGMOD, </booktitle> <volume> Vol. 23, No. 2, p 481, </volume> <month> June </month> <year> 1994. </year>
Reference: [20] <author> M. Ubell, </author> <title> The Montage Extensible Datablade Architecture, </title> <booktitle> Proc. of the ACM SIGMOD, </booktitle> <volume> Vol. 23, No. 2, p 482, </volume> <month> June </month> <year> 1994. </year>
Reference: [21] <author> H. Pirahesh, </author> <title> Object-Oriented Features of DB2 Client/ Server, </title> <booktitle> Proc. of the ACM SIGMOD, </booktitle> <volume> Vol. 23, No. 2, p 483, </volume> <month> June </month> <year> 1994. </year>
Reference: [22] <institution> Oracle Corp., </institution> <note> Oracle Media Server--Data Sheet, in http://www.oracle.com/info/products/newMedia/ oms.html </note>
Reference-contexts: Additional database servers are also being introduced that specialize in selected ADTs, such as image matching <ref> [22] </ref> and geographic information systems [25]. NCRs experience in configuring and managing the largest commercial decision support database system, which has over eleven terabytes of on-line relational data, has given us insight into the need of high end applications with multimedia capabilities.
Reference: [23] <author> Sybase, Inc., </author> <title> Command Reference Manual, Release 4.9, </title> <year> 1992. </year>
Reference: [24] <institution> Virage Technology, Inc., </institution> <note> Visual Information Retrieval White Paper, available in http:// www.virage.com/. </note>
Reference: [25] <author> D. Dewitt, N. Kabro, J. Luo, J. Patel, J.Yu, </author> <title> Client-Server Paradise, </title> <booktitle> Proc. of the 20th VLDB Conference, </booktitle> <address> Santiago, Chile, </address> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: Additional database servers are also being introduced that specialize in selected ADTs, such as image matching [22] and geographic information systems <ref> [25] </ref>. NCRs experience in configuring and managing the largest commercial decision support database system, which has over eleven terabytes of on-line relational data, has given us insight into the need of high end applications with multimedia capabilities.
References-found: 25

