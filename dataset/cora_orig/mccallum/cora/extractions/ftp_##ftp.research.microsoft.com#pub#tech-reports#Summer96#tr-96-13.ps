URL: ftp://ftp.research.microsoft.com/pub/tech-reports/Summer96/tr-96-13.ps
Refering-URL: http://www.research.microsoft.com/sn/
Root-URL: http://www.research.microsoft.com
Title: An Overview of the Rialto Real-Time Architecture  
Author: Michael B. Jones, Joseph S. Barrera III, Alessandro Forin, Paul J. Leach, Daniela Rou, Marcel-Ctlin Rou 
Note: Paper published in the proceedings of the Seventh ACM SIGOPS European Workshop (SIGOPS  
Address: One Microsoft Way Redmond, WA 98052  
Affiliation: Microsoft Research Advanced Technology Division Microsoft Corporation  
Date: July, 1996  96), September, 1996.  
Abstract: Technical Report MSR-TR-96-13 
Abstract-found: 1
Intro-found: 1
Reference: [Compton & Tennenhouse 93] <author> Charles L. Compton and David L. Tennenhouse. </author> <title> Collaborative Load Shedding. </title> <booktitle> In Proceedings of the Workshop on the Role of Real-Time in Multimedia/Interactive Computing Systems. IEEE Computer Society, </booktitle> <address> Raleigh-Durham, NC, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: Unlike the approaches above, the VuSystem work at MIT <ref> [Compton & Tennenhouse 93] </ref> takes the position that resource reservation is inappropriate and that applications should dynamically and cooperatively shed load when necessary, but they bemoan the crude measures available for deciding when to shed load.
Reference: [Jones 93] <author> Michael B. Jones. </author> <title> Adaptive Real-Time Resource Management Supporting Composition of Independently Authored Time-Critical Services. </title> <booktitle> In Proceedings of the Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 135-139. </pages> <publisher> IEEE Computer Society, </publisher> <address> Napa, CA, </address> <month> October, </month> <year> 1993. </year>
Reference-contexts: Applications use time constraints primarily through the BeginConstraint () and EndConstraint () calls. This is a somewhat simpler mechanism than that which we originally proposed to implement in <ref> [Jones 93] </ref>. 2.1 BeginConstraint () and EndConstraint () The BeginConstraint () call takes the following parameters: Start Time: Earliest time to begin running the code. Estimate: Estimated time needed to execute code. Deadline: Latest time the code may finish running. Criticality: How important it is to meet the deadline.
Reference: [Jones et al. 95] <author> Michael B. Jones, Paul J. Leach, Richard P. Draves, Joseph S. Barrera, III. </author> <title> Modular Real-Time Resource Management in the Rialto Operating System. </title> <booktitle> In Proceedings of the Fifth Workshop on Hot Topics in Operating Systems, </booktitle> <pages> pages 12-17. </pages> <publisher> IEEE Computer Society, </publisher> <address> Orcas Island, WA, </address> <month> May, </month> <year> 1995. </year>
Reference-contexts: Thus, higher level mechanisms are also needed to solve resource contention issues. 3. Real-Time Resource Management In order to avoid persistent overload of resources needed by real-time applications and the resulting unpredictable execution, Rialto implements a real-time resource management mechanism. Since this mechanism has already been discussed in <ref> [Jones et al. 95] </ref>, only an overview of its key concepts will be given here. 3.1 Resource Self-Awareness and Negotiation The main idea is that in Rialto, real-time programs have mechanisms available to them allowing them to be resource self-aware.
Reference: [Mercer et al. 94] <author> Clifford W. Mercer, Stefan Savage, Hideyuki Tokuda. </author> <title> Processor Capacity Reserves: Operating System Support for Multimedia Applications. </title> <booktitle> In Proceedings of the IEEE International Conference on Multimedia Computing and Systems (ICMCS), </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: CPU reservations are similar to the processor capacity reserves described in <ref> [Mercer et al. 94] </ref>. The CPU scheduler allocates CPU time among activities with runnable threads based on the activitys CPU reservation. <p> Finally, since their algorithm makes all timing decisions using periodic 10 ms clock interrupts instead of running the clock as an aperiodic device, they can only service deadlines at a 10 ms or larger granularity. Mercers processor capacity reserves <ref> [Mercer et al. 94] </ref> are similar in spirit to our activity-based CPU reservations.
Reference: [Nieh & Lam 96] <author> Jason Nieh and Monica S. Lam. </author> <title> The design of SMART: A Scheduler for Multimedia Applications. </title> <type> Technical Report CSL-TR-96-697, </type> <institution> Computer Systems Laboratory, Stanford University, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: If satisfiable, the constraint ensures that the event is handled within a bounded response time. 7. Related Work The SMART scheduler work at Stanford <ref> [Nieh & Lam 96] </ref> is probably the closest to our own. They share the goals of allowing reasonable mixing of real-time and non-real-time applications on the same machines. Several significant differences are apparent.
References-found: 5

