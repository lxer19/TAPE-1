URL: http://www.cs.iastate.edu/tech-reports/TR98-08.ps
Refering-URL: http://www.cs.iastate.edu/tech-reports/catalog.html
Root-URL: http://www.cs.iastate.edu
Title: ACL Eliminating Parameter Aliasing with Dynamic Dispatch  
Author: Olga Antropova and Gary T. Leavens Olga Antropova and Gary T. Leavens. 
Degree: All rights reserved.  
Address: 226 Atanasoff Hall  Ames, Iowa 50011-1040, USA  
Affiliation: Department of Computer Science  Iowa State University  
Note: Submitted for publication. Copyright c 1998 by  
Date: July 1998  
Pubnum: TR #98-08  
Abstract: Keywords: reference parameter aliasing, global variable aliasing, multi-body procedures, dynamic dispatch, static dispatch, program verification, ACL language, alias-free programs, compiler optimizations, call-by-value and call-by-result patterns. 1997 CR Categories: D.3.1 [Programming Languages] Formal Definitions and Theory | semantics; D.3.3 [Programming Languages] Language Constructs and Features | control structures, procedures, functions, and subroutines; D.3.m [Programming Languages] Miscellaneous | dynamic dispatch, multiple dispatch; F.3.1 [Logics and Meanings of Programs] Specifying and Verifying and Reasoning about Programs | logics of programs. 
Abstract-found: 1
Intro-found: 1
Reference: [AG98] <author> Ken Arnold and James Gosling. </author> <title> The Java Programming Language. The Java Series. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <note> second edition, </note> <year> 1998. </year>
Reference-contexts: It involves separate proofs for all possible aliasing combinations among formal parameter names, and formal parameters and global variable names [GL80]. In many contemporary programming languages parameter aliases are common. For example C++ [Str97] has call-by-reference. Other object-oriented languages such as Smalltalk [GR83] and Java <ref> [AG98] </ref>, and even mostly-functional languages such as ML [MTH90] and Scheme [RCA + 86], manipulate objects indirectly, through references. In such languages assignment as well as parameter passing may cause aliasing. 1.1 Related work Back in 1977 the programming language Euclid was developed.
Reference: [AVAU86] <author> R. Sethi A. V. Aho and J. D. Ullman. </author> <booktitle> Compilers. Principles, Techniques and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: 1 Introduction Two or more names that reference the same location are called aliases. Aliases and mutation make writing programs and reasoning about their correctness more difficult [Mor94] [HW73]. Some compiler optimizations become impossible in the presence of aliasing <ref> [AVAU86, p. 648] </ref>, which results in slower executable code. For this reason, much research has concentrated on flow analysis to detect aliases. In this paper we concentrate on aliases generated by reference parameters. The language we study has neither alias declarations nor pointer variables.
Reference: [BKK + 86] <author> Daniel G. Bobrow, Kenneth Kahn, George Kiczales, Larry Mas-inter, Mark Stefik, and Frank Zdybel. Commonloops: </author> <title> Merging lisp and object-oriented programming. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 21(11) </volume> <pages> 17-29, </pages> <month> November </month> <year> 1986. </year> <booktitle> OOPSLA '86 Conference Proceedings, </booktitle> <editor> Norman Meyrowitz (editor), </editor> <month> September </month> <year> 1986, </year> <institution> Portland, Oregon. </institution>
Reference-contexts: It is different from those described above in that it automates calling the appropriate procedure based on the aliasing combination that occurs dynamically, using a variant of multimethod dispatch <ref> [BKK + 86] </ref> [Cas97] [Moo86] as found, for example, in CLOS [Pae93] and Cecil [Cha92]. 5 2.1 Our approach: dispatch based on aliasing patterns To prohibit parameter aliasing, our approach expects a procedure implementation to have multiple bodies|one for each possible combination of aliases among the parameters and global variables.
Reference: [Cas97] <author> Giuseppe Castagna. </author> <title> Object-Oriented Programming: A Unified Foundation. </title> <booktitle> Progress in Theoretical Computer Science. </booktitle> <publisher> Birkhauser, </publisher> <address> Boston, </address> <year> 1997. </year>
Reference-contexts: It is different from those described above in that it automates calling the appropriate procedure based on the aliasing combination that occurs dynamically, using a variant of multimethod dispatch [BKK + 86] <ref> [Cas97] </ref> [Moo86] as found, for example, in CLOS [Pae93] and Cecil [Cha92]. 5 2.1 Our approach: dispatch based on aliasing patterns To prohibit parameter aliasing, our approach expects a procedure implementation to have multiple bodies|one for each possible combination of aliases among the parameters and global variables.
Reference: [Cha92] <author> Craig Chambers. </author> <title> Object-oriented multi-methods in Cecil. </title> <editor> In Ole Lehrmann Madsen, editor, </editor> <booktitle> ECOOP '92, European Conference on Object-Oriented Programming, Utrecht, The Netherlands, volume 615 of Lecture Notes in Computer Science, </booktitle> <pages> pages 33-56. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1992. </year>
Reference-contexts: It is different from those described above in that it automates calling the appropriate procedure based on the aliasing combination that occurs dynamically, using a variant of multimethod dispatch [BKK + 86] [Cas97] [Moo86] as found, for example, in CLOS [Pae93] and Cecil <ref> [Cha92] </ref>. 5 2.1 Our approach: dispatch based on aliasing patterns To prohibit parameter aliasing, our approach expects a procedure implementation to have multiple bodies|one for each possible combination of aliases among the parameters and global variables.
Reference: [FWH92] <author> Daniel P. Friedman, Mitchell Wand, and Christopher T. Haynes. </author> <title> Essentials of Programming Languages. </title> <publisher> McGraw-Hill Book Co., </publisher> <address> New York, N.Y., </address> <year> 1992. </year>
Reference-contexts: value parameters cannot be aliases to other parameters or to global variables; 2. parameters of different types cannot be aliased to each other in ACL 2 , likewise a parameter of one type cannot be aliased to a global variable of another type; 3. since ACL uses the "direct model" <ref> [FWH92] </ref> of arrays (as in Pascal) and has no reference or pointer variables, imported global variables cannot be aliases to each other, and an atomic imported global cannot be an alias to an element of an array.
Reference: [GL80] <author> D. Gries and G. Levin. </author> <title> Assignment and the procedure call proof rules. </title> <journal> TOPLAS, </journal> <volume> 2(4) </volume> <pages> 564-579, </pages> <year> 1980. </year>
Reference-contexts: It involves separate proofs for all possible aliasing combinations among formal parameter names, and formal parameters and global variable names <ref> [GL80] </ref>. In many contemporary programming languages parameter aliases are common. For example C++ [Str97] has call-by-reference. Other object-oriented languages such as Smalltalk [GR83] and Java [AG98], and even mostly-functional languages such as ML [MTH90] and Scheme [RCA + 86], manipulate objects indirectly, through references.
Reference: [GR83] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk-80, The Language and its Implementation. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, Mass., </address> <year> 1983. </year> <month> 20 </month>
Reference-contexts: It involves separate proofs for all possible aliasing combinations among formal parameter names, and formal parameters and global variable names [GL80]. In many contemporary programming languages parameter aliases are common. For example C++ [Str97] has call-by-reference. Other object-oriented languages such as Smalltalk <ref> [GR83] </ref> and Java [AG98], and even mostly-functional languages such as ML [MTH90] and Scheme [RCA + 86], manipulate objects indirectly, through references. In such languages assignment as well as parameter passing may cause aliasing. 1.1 Related work Back in 1977 the programming language Euclid was developed.
Reference: [HJW + 92] <editor> Paul Hudak, Simon Peyton Jones, Philip Wadler, et al. </editor> <title> Report on the programming language Haskell: A non-strict, purely functional language, version 1.2. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 27(5), </volume> <month> May </month> <year> 1992. </year>
Reference-contexts: The disadvantage of this approach, however, is that it would be impossible to determine whether an alternative had been intentionally or accidentally omitted. 3 Implementation Overview ACL has been implemented as an interpreter written in Haskell <ref> [HJW + 92] </ref>. The implementation is available from the following URL. ftp://ftp.cs.iastate.edu/techreports/TR98-07/ In this section we briefly describe some of its key algorithms.
Reference: [HLW + 92] <author> John Hogg, Doug Lea, Alan Wills, Dennis deChampeaux, and Richard Holt. </author> <title> The Geneva Convention on the treatment of object aliasing. </title> <journal> OOPS Messenger, </journal> <volume> 3(2) </volume> <pages> 11-16, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: It would be interesting to study how the idea would apply to languages that operate on more complex objects, as occur in object-oriented languages. Recently several designs for object-oriented languages that deal with aliasing have appeared [Hog91] <ref> [HLW + 92] </ref> [Utt95]. Since these works concentrate on other kinds of aliasing, as opposed to parameter aliasing, it would be interesting to combine our ideas with their approaches in a single language. Acknowledgements Thanks to Mark Utting for discussions about aliasing.
Reference: [Hog91] <author> John Hogg. </author> <title> Islands: Aliasing protection in object-oriented languages. </title> <booktitle> In Proceedings of the OOPSLA '91 Conference on Object-oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 271-285, </pages> <month> November </month> <year> 1991. </year> <journal> Published as ACM SIG-PLAN Notices, </journal> <volume> volume 26, number 11. </volume>
Reference-contexts: It would be interesting to study how the idea would apply to languages that operate on more complex objects, as occur in object-oriented languages. Recently several designs for object-oriented languages that deal with aliasing have appeared <ref> [Hog91] </ref> [HLW + 92] [Utt95]. Since these works concentrate on other kinds of aliasing, as opposed to parameter aliasing, it would be interesting to combine our ideas with their approaches in a single language. Acknowledgements Thanks to Mark Utting for discussions about aliasing.
Reference: [HW73] <author> C. A. R. Hoare and N. Wirth. </author> <title> An axiomatic definition of the programming language pascal. </title> <journal> Acta Informatica, </journal> <volume> 2(4) </volume> <pages> 335-355, </pages> <year> 1973. </year>
Reference-contexts: 1 Introduction Two or more names that reference the same location are called aliases. Aliases and mutation make writing programs and reasoning about their correctness more difficult [Mor94] <ref> [HW73] </ref>. Some compiler optimizations become impossible in the presence of aliasing [AVAU86, p. 648], which results in slower executable code. For this reason, much research has concentrated on flow analysis to detect aliases. In this paper we concentrate on aliases generated by reference parameters.
Reference: [Moo86] <author> David A. Moon. </author> <title> Object-oriented programming with Flavors. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 21(11) </volume> <pages> 1-8, </pages> <month> November </month> <year> 1986. </year> <booktitle> OOPSLA '86 Conference Proceedings, </booktitle> <editor> Norman Meyrowitz (editor), </editor> <address> Septem-ber 1986, Portland, Oregon. </address>
Reference-contexts: It is different from those described above in that it automates calling the appropriate procedure based on the aliasing combination that occurs dynamically, using a variant of multimethod dispatch [BKK + 86] [Cas97] <ref> [Moo86] </ref> as found, for example, in CLOS [Pae93] and Cecil [Cha92]. 5 2.1 Our approach: dispatch based on aliasing patterns To prohibit parameter aliasing, our approach expects a procedure implementation to have multiple bodies|one for each possible combination of aliases among the parameters and global variables.
Reference: [Mor94] <author> Caroll Morgan. </author> <title> Procedures, parameters and abstraction: separate concerns. </title> <publisher> In Morgan and Vickers [MV94], </publisher> <pages> pages 47-58. </pages>
Reference-contexts: 1 Introduction Two or more names that reference the same location are called aliases. Aliases and mutation make writing programs and reasoning about their correctness more difficult <ref> [Mor94] </ref> [HW73]. Some compiler optimizations become impossible in the presence of aliasing [AVAU86, p. 648], which results in slower executable code. For this reason, much research has concentrated on flow analysis to detect aliases. In this paper we concentrate on aliases generated by reference parameters. <p> 3 (a [i], a [j]) g else if (i == j && j == k) f p2 4 (a [i]) g else f p2 (a [i], a [j], a [k]) rules for languages with call-by-value-result (and call-by-result) "usually" consider passing the same location to multiple result parameters to be "invalid" <ref> [Mor94, p. 57] </ref>. Hence, to reason about such a language one would need prohibitions on parameter aliasing that are similar to Euclid's. The following sections describe the new approach to the problem of eliminating aliasing due to reference parameters, and our experimental implementation of it|the programming language ACL.
Reference: [MTH90] <author> Robin Milner, Mads Tofte, and Robert Harper. </author> <title> The Definition of Standard ML. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference-contexts: In many contemporary programming languages parameter aliases are common. For example C++ [Str97] has call-by-reference. Other object-oriented languages such as Smalltalk [GR83] and Java [AG98], and even mostly-functional languages such as ML <ref> [MTH90] </ref> and Scheme [RCA + 86], manipulate objects indirectly, through references. In such languages assignment as well as parameter passing may cause aliasing. 1.1 Related work Back in 1977 the programming language Euclid was developed.
Reference: [MV94] <author> Carroll Morgan and Trevor Vickers, </author> <title> editors. </title> <booktitle> On the refinement calculus. Formal approaches of computing and information technology series. </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1994. </year>
Reference: [Pae93] <author> Andreas Paepcke. </author> <title> Object-Oriented Programming: The CLOS Perspective. </title> <publisher> The MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: It is different from those described above in that it automates calling the appropriate procedure based on the aliasing combination that occurs dynamically, using a variant of multimethod dispatch [BKK + 86] [Cas97] [Moo86] as found, for example, in CLOS <ref> [Pae93] </ref> and Cecil [Cha92]. 5 2.1 Our approach: dispatch based on aliasing patterns To prohibit parameter aliasing, our approach expects a procedure implementation to have multiple bodies|one for each possible combination of aliases among the parameters and global variables.
Reference: [PHL + 77] <author> G. J. Popek, J. J. Horning, B. W. Lampson, J. G. Mitchell, and R. L. </author> <title> London. Notes on the design of euclid. </title> <journal> ACM SIGPLAN 21 Notices, </journal> <volume> 12(3) </volume> <pages> 11-18, </pages> <month> March </month> <year> 1977. </year> <booktitle> Proceedings of an ACM Con--ference on Language Design for Reliable Software, </booktitle> <address> Raliegh, North Carolina, </address> <month> March, </month> <year> 1977. </year>
Reference-contexts: Euclid was designed to aid program verification, and prohibiting alias was important in making verification practical. Euclid "... demonstrated that it is possible to completely eliminate aliasing in a practical programming language" <ref> [PHL + 77, p. 16] </ref>. The approach the authors took to eliminate aliases resulting from reference parameters was to prohibit procedure calls when the actual parameters overlapped. This includes structured data passed along with a component (e.g., an array A and its element A [1]). <p> Often i and j are computed by expressions, and it is not possible to determine statically whether i 6= j. Euclid requires the compiler "to generate a legality assertion to guarantee their distinctness" <ref> [PHL + 77, p. 14] </ref>. For global variables, Euclid requires explicit importation of those that are 3 used by a procedure. Like parameters, imported globals should not overlap with the parameters. <p> To avoid unnecessary alias combinations with global variables, we adopt Euclid's idea of explicitly importing global variables in procedures <ref> [PHL + 77] </ref>. (Functions and procedures are implicitly available in procedure bodies since they cannot be aliased to variables in the language that we study.) In general, dynamic dispatch must be used to find the appropriate procedure body to execute since the concrete alias combination among the parameters often cannot be <p> We claim, however, that the efficiency of an ACL program need be no worse when written in another language when dealing with aliases. For example, ACL programs should be no slower than Euclid programs <ref> [PHL + 77] </ref>. This claim is true despite Euclid's static dispatch.
Reference: [RCA + 86] <author> Jonathan Rees, William Clinger, H. Abelson, N. I. Adams IV, D. H. Bartley, G. Brooks, R. K. Dybvig, D. P. Friedman, R. Hal-stead, C. Hanson, C. T. Haynes, E. Kohlbecker, D. Oxley, K. M. Pitman, G. J. Rozas, G. J. Sussman, and M. Wand. </author> <title> Revised 3 report on the algorithmic language scheme. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 21(12) </volume> <pages> 37-79, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: In many contemporary programming languages parameter aliases are common. For example C++ [Str97] has call-by-reference. Other object-oriented languages such as Smalltalk [GR83] and Java [AG98], and even mostly-functional languages such as ML [MTH90] and Scheme <ref> [RCA + 86] </ref>, manipulate objects indirectly, through references. In such languages assignment as well as parameter passing may cause aliasing. 1.1 Related work Back in 1977 the programming language Euclid was developed. Euclid was designed to aid program verification, and prohibiting alias was important in making verification practical.
Reference: [Str97] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language: Third Edition. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, Mass., </address> <year> 1997. </year>
Reference-contexts: It involves separate proofs for all possible aliasing combinations among formal parameter names, and formal parameters and global variable names [GL80]. In many contemporary programming languages parameter aliases are common. For example C++ <ref> [Str97] </ref> has call-by-reference. Other object-oriented languages such as Smalltalk [GR83] and Java [AG98], and even mostly-functional languages such as ML [MTH90] and Scheme [RCA + 86], manipulate objects indirectly, through references.
Reference: [Utt95] <author> Mark Utting. </author> <title> Reasoning about aliasing. </title> <booktitle> In Proceedings of the Fourth Australasian Refinement Workshop (ARW-95), </booktitle> <pages> pages 195-211. </pages> <institution> School of Computer Science and Engineering, The University of New South Wales, </institution> <month> April </month> <year> 1995. </year> <note> Available from http://www.cs.waikato.ac.nz/~marku 22 </note>
Reference-contexts: Restrictions similar to those on arrays and their elements apply to collections and elements of collections, when those are passed to a procedure or imported. Recent work on eliminating aliasing in object-oriented languages by Ut-ting extends Euclid's idea of collections <ref> [Utt95] </ref>. In Utting's work, complex objects (possibly sharing memory locations) are viewed as a set of disjoint collections (local stores) of homogeneous objects. Local stores are treated as arrays and pointers as indexes. The proof rules for arrays can thus be applied. <p> It would be interesting to study how the idea would apply to languages that operate on more complex objects, as occur in object-oriented languages. Recently several designs for object-oriented languages that deal with aliasing have appeared [Hog91] [HLW + 92] <ref> [Utt95] </ref>. Since these works concentrate on other kinds of aliasing, as opposed to parameter aliasing, it would be interesting to combine our ideas with their approaches in a single language. Acknowledgements Thanks to Mark Utting for discussions about aliasing.
References-found: 21

