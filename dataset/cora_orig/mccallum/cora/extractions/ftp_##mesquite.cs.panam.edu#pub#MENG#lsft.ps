URL: ftp://mesquite.cs.panam.edu/pub/MENG/lsft.ps
Refering-URL: http://www.cs.panam.edu/meng/pub.html
Root-URL: http://www.cs.panam.edu
Email: dfinkel@cs.wpi.edu  meng@bucknell.edu  
Title: Load Sharing That Supports Fault Tolerance in a Distributed Computing System  
Author: David Finkel Xiannong Meng Sanjay Parikh 
Note: This research was supported by the National Science Foundation under grant CCR-8802584.  
Address: Worcester, MA 01609  Lewisburg, PA 17837  Worcester, MA 01609  
Affiliation: Department of Computer Science Worcester Polytechnic Institute  Department of Computer Science Bucknell University  Department of Computer Science Worcester Polytechnic Institute  
Abstract-found: 0
Intro-found: 1
Reference: [EAG86] <author> D.L. Eager, E.D. Lazowska, and J. Zahorjan, </author> <title> "Adaptive Load Sharing in Homogeneous Distributed Systems," </title> <journal> IEEE Trans. Soft. Eng. </journal> <volume> SE-12 (1986), </volume> <pages> 662-675. </pages>
Reference-contexts: Many schemes for load sharing have been proposed <ref> [EAG86] </ref>, [FER87], [ZHO86]; in this paper we will consider a sender-initiated threshold scheme similar to that proposed by Shin and Chang [SHI89]. A distributed system can be used to provide fault tolerance to a single fault by using one node to act as a backup to another. <p> Status information on all nodes is immediately available through the use of global variables. This is justified by the observation that the messages being exchanged are very small, and that network congestion is not typically a significant source of delay <ref> [EAG86] </ref>. 9 3.2 Experimental Choices We employed the method of batch means to construct 95% confidence intervals for the system response time. We ran the simulation for 10000 time units and discarded the output for the first 500 time units. <p> By comparing the components of Tables 2 and 3 (for example 2A, 2C and 2E), we see that small transfer thresholds give the best performance; that is, that it's worthwhile to be aggressive in implementing load sharing. This is in agreement with the results obtained by other researchers <ref> [EAG86] </ref>, [SHI89]. 5 Conclusions We constructed an approximate analytic model of a distributed system in which nodes exchange jobs and state information in order to implement load sharing and fault tolerance. We also constructed a more detailed simulation model to test the accuracy of the approximate analytic model.
Reference: [FER87] <author> D. Ferrari and S. Zhou, </author> <title> "An Empirical Investigation of Load Indices for Load Balancing Applications," </title> <booktitle> Proc. PERFORMANCE '87, </booktitle> <address> Brussels, Belgium, </address> <month> December </month> <year> 1987, </year> <pages> 515-528. </pages>
Reference-contexts: Many schemes for load sharing have been proposed [EAG86], <ref> [FER87] </ref>, [ZHO86]; in this paper we will consider a sender-initiated threshold scheme similar to that proposed by Shin and Chang [SHI89]. A distributed system can be used to provide fault tolerance to a single fault by using one node to act as a backup to another.
Reference: [FIN90] <author> D. Finkel and S.K. </author> <title> Tripathi,"A Performance Analysis of a Buddy System for Fault Tolerance", Performance Evaluation 11, </title> <month> 177 - 185 </month> <year> (1990). </year>
Reference-contexts: In this way, a single failure at one node can be masked by invoking that node's backup. Several methods for achieving this have been proposed. In this paper we use a method similar to <ref> [FIN90] </ref>, a process pair approach [GRA91] in which each process started at any node has a backup process on another node, which can be started in case of failure at the primary node. 2 The reason for combining load sharing and fault tolerance is that the overhead nec-essary to implement these <p> In this way each node is the backup to exactly one other node. When a node completes a job, it informs the backup node, so that the backup copy of this job can be discarded. This scheme is described in greater detail in <ref> [FIN90] </ref>. 1.3 Integrated System Several modifications are made to the above schemes to incorporate them into an integrated system. If a node transfers a job as part of the load sharing scheme, it keeps a copy of the job as the backup.
Reference: [PEG90] <author> C.D. Pegden, R.E. Shannon, and R.P. Sadowski, </author> <title> Introduction to Simulation Using SIMAN, </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: The rest of the data was divided into batches, and confidence intervals were then built based on the batch means. The results are presented in the next section. The simulation program was written in SIMAN simulation language <ref> [PEG90] </ref>. SIMAN was chosen because its many advanced modeling features greatly simplified the construction and analysis of our simulation model.
Reference: [GRA91] <author> J. Gray and D.P. </author> <title> Siewiorek, </title> <journal> "High-Availability Computer Systems", IEEE Computer, </journal> <volume> vol. 24, no. </volume> <month> 9 (Sept. </month> <year> 1991), </year> <pages> 39 - 48. </pages>
Reference-contexts: In this way, a single failure at one node can be masked by invoking that node's backup. Several methods for achieving this have been proposed. In this paper we use a method similar to [FIN90], a process pair approach <ref> [GRA91] </ref> in which each process started at any node has a backup process on another node, which can be started in case of failure at the primary node. 2 The reason for combining load sharing and fault tolerance is that the overhead nec-essary to implement these two procedures is very similar
Reference: [LIV82] <author> M. Livny and M. Melman, </author> <title> "Load Balancing in Homogeneous Broadcast Distributed Systems", </title> <booktitle> Proceedings of the Computer Network Symposium, </booktitle> <address> College Park, Maryland, </address> <note> April 1982; Performance Evaluation Review, 11 (1982), 47 - 55. </note>
Reference-contexts: The impetus for load sharing is the observation that even in a heavily loaded system, there is a high probability that one or more nodes is idle <ref> [LIV82] </ref>, and the observation that in many real systems, there are many idle workstations [OUS87]. Many schemes for load sharing have been proposed [EAG86], [FER87], [ZHO86]; in this paper we will consider a sender-initiated threshold scheme similar to that proposed by Shin and Chang [SHI89].
Reference: [OUS87] <author> J. Ousterhout and F. Douglis, </author> <title> "Process Migration in the Sprite Operating System", </title> <booktitle> IEEE Proceedings of 7th Conference on Distributed Computing (1987), </booktitle> <volume> 18 - 25. </volume>
Reference-contexts: The impetus for load sharing is the observation that even in a heavily loaded system, there is a high probability that one or more nodes is idle [LIV82], and the observation that in many real systems, there are many idle workstations <ref> [OUS87] </ref>. Many schemes for load sharing have been proposed [EAG86], [FER87], [ZHO86]; in this paper we will consider a sender-initiated threshold scheme similar to that proposed by Shin and Chang [SHI89].
Reference: [SHI89] <author> K.G. Shin and Y.C. Chang, </author> <title> "Load Sharing in Distributed Real-time Systems with State-Change Broadcasts", </title> <journal> IEEE Trans. on Computers Vol C-38, </journal> <volume> No. </volume> <month> 8 (Aug. </month> <year> 1989). </year>
Reference-contexts: Many schemes for load sharing have been proposed [EAG86], [FER87], [ZHO86]; in this paper we will consider a sender-initiated threshold scheme similar to that proposed by Shin and Chang <ref> [SHI89] </ref>. A distributed system can be used to provide fault tolerance to a single fault by using one node to act as a backup to another. In this way, a single failure at one node can be masked by invoking that node's backup. <p> Each node is capable of processing any of the jobs, and normally each node processes its own input stream. Job interarrival times and service times are assumed to follow independent exponential distributions. 1.1 Load Sharing The load sharing scheme modeled is similar to that proposed in <ref> [SHI89] </ref>. In our scheme, each node is in one of three states: underloaded (U), fully loaded (F) or overloaded (V). There are two thresholds, T H f and T H v , based on a node's queue length (including the job in service, if any), which determines a node's state. <p> By comparing the components of Tables 2 and 3 (for example 2A, 2C and 2E), we see that small transfer thresholds give the best performance; that is, that it's worthwhile to be aggressive in implementing load sharing. This is in agreement with the results obtained by other researchers [EAG86], <ref> [SHI89] </ref>. 5 Conclusions We constructed an approximate analytic model of a distributed system in which nodes exchange jobs and state information in order to implement load sharing and fault tolerance. We also constructed a more detailed simulation model to test the accuracy of the approximate analytic model.
Reference: [STA70] <author> P. A. Stark, </author> <title> Introduction to Numerical Methods, </title> <publisher> Macmillan Publishing Co, </publisher> <address> New York, </address> <year> 1970. </year>
Reference-contexts: Gaussian elimination was used to solve the resulting system of linear equations. The system is very stable because the values at the diagonal line are large compared to the rest of the system <ref> [STA70] </ref>. 2.1.2 Iterative Solution Several parameters of the Markov models are not known in advance, so an iterative solution was used.
Reference: [TRI82] <author> Kishor Trivedi, </author> <title> Probability & Statistics With Reliability, Queueing, </title> <booktitle> and Computer Science Applications, Prentice-Hall, 1982. </booktitle> <volume> 18 19 </volume>
Reference-contexts: the following: q m q and p m p Thus, o = p fi fi i=0 q i P n2 i 1q m p m = i=T H v +1 and 1 X ae i (1 ae) = ae T H f +1 where ae = = (see, for example, <ref> [TRI82] </ref>). This results in o ae T H v +1 1 ae T H f +1 This concludes the proof that transfer rate o is monotonically increasing and is bounded above. Thus o converges.
Reference: [ZHO86] <author> S. Zhou, </author> <title> "A Trace Driven Simulation Study of Dynamic Load Balancing", </title> <type> Technical Report No. </type> <note> UCB/CSD 87/305 (Sept 86). 20 </note>
Reference-contexts: Many schemes for load sharing have been proposed [EAG86], [FER87], <ref> [ZHO86] </ref>; in this paper we will consider a sender-initiated threshold scheme similar to that proposed by Shin and Chang [SHI89]. A distributed system can be used to provide fault tolerance to a single fault by using one node to act as a backup to another.
References-found: 11

