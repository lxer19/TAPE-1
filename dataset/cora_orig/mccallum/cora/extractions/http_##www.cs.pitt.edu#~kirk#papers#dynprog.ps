URL: http://www.cs.pitt.edu/~kirk/papers/dynprog.ps
Refering-URL: http://www.cs.pitt.edu/~kirk/edupapers.html
Root-URL: 
Email: kirk@cs.pitt.edu  
Title: How to Design Dynamic Programming Algorithms Sans Recursion  
Author: Kirk Pruhs 
Address: Pittsburgh Pittsburgh, PA 15260  
Affiliation: Computer Science Department University of  
Abstract: We describe a method, which we call the Pruning Method, for designing dynamic programming algorithms that does not require the algorithm designer to be comfortable with recursion. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gilles Brassard and Paul Bratley, </author> <title> Fundamentals of Algorithmics, </title> <publisher> Prentice Hall, </publisher> <year> 1996. </year>
Reference-contexts: 1 Introduction In teaching algorithms courses, dynamic programming is the topic that maximizes the ratio of my students' perceived difficulty of the topic to my perceived difficulty of the topic. Most of the standard textbooks (e.g. <ref> [1, 2, 3, 5] </ref>) on algorithms offer the following strategy for designing a dynamic programming algorithm for an optimization problem P: 1. Find a recursive algorithm/formula/property that computes/defines/characterizes the optimal solution to an instance of P. 2.
Reference: [2] <author> Thomas Cormen, Charles Leiserson, and Ronald Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> McGraw-Hill, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction In teaching algorithms courses, dynamic programming is the topic that maximizes the ratio of my students' perceived difficulty of the topic to my perceived difficulty of the topic. Most of the standard textbooks (e.g. <ref> [1, 2, 3, 5] </ref>) on algorithms offer the following strategy for designing a dynamic programming algorithm for an optimization problem P: 1. Find a recursive algorithm/formula/property that computes/defines/characterizes the optimal solution to an instance of P. 2.
Reference: [3] <author> Udi Manber, </author> <title> Introduction to Algorithms: A Creative Approach, </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction In teaching algorithms courses, dynamic programming is the topic that maximizes the ratio of my students' perceived difficulty of the topic to my perceived difficulty of the topic. Most of the standard textbooks (e.g. <ref> [1, 2, 3, 5] </ref>) on algorithms offer the following strategy for designing a dynamic programming algorithm for an optimization problem P: 1. Find a recursive algorithm/formula/property that computes/defines/characterizes the optimal solution to an instance of P. 2. <p> Essentially the idea is that shorter subsequences that end in smaller numbers might be preferable, to longer subsequences that end in larger numbers, since they are easier to extend. As shown in <ref> [3] </ref>, it is sufficient to remember the subsequence of each length that ends in the smallest last number. Let LIS (k; `) be the smallest last number of a subsequence of length ` of x 1 ; : : : ; x k . <p> Hence, one disadvantage of teaching the Pruning Method is that it can rob students of an opportunity to improve their recursive thinking skills. For more information on developing algorithms using recursion, I highly recommend [4], and more generally <ref> [3] </ref>. Acknowledgments: I would like to thank Marty Wolf, and Udi Manber for helpful comments.
Reference: [4] <author> Udi Manber, </author> <title> "Using induction to design algorithms,", </title> <journal> Communications of the ACM, </journal> <volume> 31, 1300 - 1313, </volume> <month> November </month> <year> 1988. </year>
Reference-contexts: Hence, one disadvantage of teaching the Pruning Method is that it can rob students of an opportunity to improve their recursive thinking skills. For more information on developing algorithms using recursion, I highly recommend <ref> [4] </ref>, and more generally [3]. Acknowledgments: I would like to thank Marty Wolf, and Udi Manber for helpful comments.
Reference: [5] <author> Richard Neapolitan and Kumarss Naimipour, </author> <title> Foundations of Algorithms, </title> <editor> D. C. Heath, </editor> <year> 1996. </year>
Reference-contexts: 1 Introduction In teaching algorithms courses, dynamic programming is the topic that maximizes the ratio of my students' perceived difficulty of the topic to my perceived difficulty of the topic. Most of the standard textbooks (e.g. <ref> [1, 2, 3, 5] </ref>) on algorithms offer the following strategy for designing a dynamic programming algorithm for an optimization problem P: 1. Find a recursive algorithm/formula/property that computes/defines/characterizes the optimal solution to an instance of P. 2.
References-found: 5

