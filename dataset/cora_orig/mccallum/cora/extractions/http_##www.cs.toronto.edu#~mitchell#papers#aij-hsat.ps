URL: http://www.cs.toronto.edu/~mitchell/papers/aij-hsat.ps
Refering-URL: http://www.cs.toronto.edu/~mitchell/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: email: mitchell@ai.toronto.edu  email: selman@research.att.com  email: hector@ai.toronto.edu  
Title: Generating Hard Satisfiability Problems  
Author: Bart Selman b David Mitchell a; and Hector J. Levesque c; 
Address: Toronto, Toronto, Canada M5S 1A4  Murray Hill, NJ 07974  Toronto, Toronto, Canada M5S 1A4  
Affiliation: a Dept. of Computer Science, University of  b AI Principles Research Dept., AT&T Bell Laboratories,  c Dept. of Computer Science, University of  
Abstract: We report results from large-scale experiments in satisfiability testing. As has been observed by others, testing the satisfiability of random formulas often appears surprisingly easy. Here we show that by using the right distribution of instances, and appropriate parameter values, it is possible to generate random formulas that are hard, that is, for which satisfiability testing is quite difficult. Our results provide a benchmark for the evaluation of satisfiability-testing procedures. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Beckman, R.J. and Cook, R.D., </author> <title> Outlier.........s, </title> <journal> Technometrics, </journal> <volume> 25(2) </volume> <pages> 119-149, </pages> <year> (1983). </year>
Reference-contexts: But our current interest is what the "bulk" of instances from the distribution are like, not the unusual or extreme cases. As the median is more robust in the presence of such "outliers" <ref> [1] </ref>, it appears to be a more informative statistic for current purposes. 3 In Figure 2, we see the following pattern: For formulas that are either relatively short or relatively long, DP finishes quickly, but the formulas of medium length take much longer.
Reference: [2] <author> Bollobas, B., </author> <title> Random Graphs. </title> <publisher> Academic Press, </publisher> <address> London (1985). </address>
Reference-contexts: The experimental data suggests that there may be a threshold for satisfiability, at about 4.25 clauses per variable in the case of 3-SAT. Threshold phenomena are common in some other types of combinatoric structures, such as random graphs <ref> [2] </ref>. Not only are our experimental results consistent with the analytic results, they also provide a much more fine-grained picture of how 3-SAT behaves in practice. One reason for the limitations of analytic results is the complexity of the analyses required.
Reference: [3] <author> Broder, A., Frieze, A., and Upfal, E., </author> <title> On the Satisfiability and Maximum Satisfiability of Random 3-CNF Formulas. </title> <booktitle> Fourth Annual ACM-SIAM Symposium on Discrete Algorithms (1993) 322-330. </booktitle>
Reference-contexts: For ratios below 1.63, a simple heuristic algorithm finds satisfying assignments to random 3-SAT with high probability, in polynomial time <ref> [3] </ref>. Other analytic results for random 3-SAT are reviewed in [23,5]. As we mentioned in Section 3, establishing theoretically the exact nature the satisfiability transition for random K-SAT, when K &gt; 2, is a challenging open problem.
Reference: [4] <author> Buro, M. and Kleine-Buning, H., </author> <title> Report on a SAT competition. </title> <type> Technical Report # 110, </type> <institution> Dept. of Mathematics and Informatics, University of Paderborn, </institution> <address> Germany (1992). </address>
Reference: [5] <author> Chao, M. and Franco, J., </author> <title> Probabilistic analysis of a generalization of the unit-clause literal selection heuristics for the k satisfiability problem. </title> <type> Inform. </type> <institution> Sci., </institution> <month> 51 </month> <year> (1990) </year> <month> 23-42. </month>
Reference: [6] <author> Chvatal,V. and Reed, B., </author> <title> Mick gets some (the odds are on his side). </title> <booktitle> Proc. </booktitle> <month> FOCS-92 </month> <year> (1992) </year> <month> 620-627. </month>
Reference: [7] <author> Chvatal,V. and Szemeredi, E., </author> <title> Many hard examples for resolution. </title> <journal> J. of the ACM, </journal> <month> 35(4) </month> <year> (1988) </year> <month> 759-208. </month>
Reference-contexts: Unfortunately, this result does not directly tell us much about the expected time to find a single assignment. A result of Chvatal and Szemeredi <ref> [7] </ref> gives further insight. Extending a ground-breaking result by Haken [19], they showed that any resolution strategy requires exponential time with probability approaching 1 on unsatisfiable random 3-SAT formulas, when the ratio of clauses to variables is held constant.
Reference: [8] <author> Cheeseman, P., Kanefsky, B., Taylor, and William M., </author> <title> Where the Really Hard Problems Are. </title> <booktitle> Proceedings IJCAI-91 (1991) 163-169. </booktitle>
Reference-contexts: A valuable contribution was made by Cheeseman et al. <ref> [8] </ref>, who explored the hardness of random instances of various NP-complete problems. They observed a similar easy-hard-easy pattern as a function of one or more problem parameters for instances of graph coloring and Hamiltonian circuit. They also give some preliminary results for satisfiability.
Reference: [9] <author> Cook, S.A., </author> <title> The complexity of theorem-proving procedures. </title> <booktitle> Proceedings of the 3rd Annual ACM Symposium on the Theory of Computing (1971) 151-158. </booktitle>
Reference-contexts: Supported in part by a grant from the Natural Sciences and Engineering Research Council of Canada. Preprint submitted to Elsevier Science May 1 1995 really needed is a better understanding of how these procedures perform "on average". The first computational task shown to be NP-hard, by Cook <ref> [9] </ref>, was propositional satisfiability or SAT: Given a formula of the propositional calculus, decide if there is an assignment to its variables that makes the formula true according to the usual rules of interpretation.
Reference: [10] <author> Crawford, J.M. and Auton, L.D., </author> <title> Experimental results on the cross-over point in satisfiability problems. </title> <booktitle> Proc. </booktitle> <month> AAAI93 </month> <year> (1993). </year>
Reference-contexts: Our results suggest that the exponential for ratios in the hard area grows much faster than in the easy (over-constrained) area. This has been confirmed by recent results for a highly-optimized variant of DP developed by Crawford and Auton <ref> [10] </ref>. Experiments show that in the hard area, at a ratio of 4.3, their procedure scales with 2 (n=17) , whereas at a ratio of 10, the scaling is with 2 (n=57) . This difference in growth rate has important practical 4 To state this differently, consider Figure 2.
Reference: [11] <author> Davis, M. and Putnam, H., </author> <title> A computing procedure for quantification theory. </title> <journal> Journal of the ACM, </journal> <month> 7 </month> <year> (1960) </year> <month> 201-215. </month>
Reference-contexts: Otherwise, set v to the opposite value, and return the result of calling DP on the re-simplified formula. Fig. 1. The DP procedure. 2 The Davis-Putnam Procedure One of the most widely used methods for propositional satisfiability testing is the Davis-Putnam procedure <ref> [11] </ref>.
Reference: [12] <author> Davis, M., Logemann, G., and Loveland, D., </author> <title> A Machine Program for Theorem-Proving, </title> <journal> Communications of the ACM, </journal> <volume> 5 </volume> <month> 394-397 </month> <year> (1962). </year> <title> [13] de la Vega, W.F., On random 2SAT. </title> <type> Manuscript 1992. </type>
Reference-contexts: Fig. 1. The DP procedure. 2 The Davis-Putnam Procedure One of the most widely used methods for propositional satisfiability testing is the Davis-Putnam procedure [11]. Our procedure, which we refer to as DP, is the splitting variant of the Davis-Putnam procedure as described in <ref> [12] </ref>, but without the pure literal rule. (The pure literal rule is: if a literal p occurs in a formula, but its negation does not, then p can be immediately assigned the value true.) DP is sketched in Figure 1.
Reference: [14] <author> Franco, J. and Paull, M., </author> <title> Probabilistic analysis of the Davis Putnam procedure for solving the satisfiability problem. </title> <journal> Discrete Applied Math. </journal> <month> 5 </month> <year> (1983) </year> <month> 77-87. </month>
Reference-contexts: The big problem is that to examine how well a procedure does on average one must assume a distribution of instances. Indeed, as we will discuss below, Franco and Paull <ref> [14] </ref> refuted the Goldberg result by showing that it was a direct consequence of the choice of distribution. It is not that Goldberg had a clever algorithm, or that the problem is easy, but that he had used a distribution with a preponderance of easy instances. <p> Thus, the more interesting results are for the modified version in which empty and unit clauses are disallowed. This distribution we call Random P-SAT. Analytic results by Franco and Paull <ref> [14] </ref> suggest that one probably cannot generate computationally challenging instances from this model, and our ex 10 formula distribution vars K-SAT (3) P-SAT (3) P-SAT (4) 25 253 33 53 75 46,915 111 392 Table 1 Number of DP calls at hardest point, for fixed-length (K-SAT) and constant-density (P-SAT) formulas, with <p> The main impetus for this research was early results by Goldberg [18], which suggested 11 that SAT might in fact be efficiently solvable, on average, using DP. Franco and Paull <ref> [14] </ref> showed that Goldberg's positive results were a direct consequence of the distribution used | a variant of the constant-density model | and thus overly optimistic. <p> Goldberg's formulas were so easy to satisfy that an algorithm which simply tried randomly generated assignments would, with probability approaching 1, find a satisfying assignment in a constant number of guesses. Further analytic results for the constant-density model can be found in [5,28,31]. Franco and Paull <ref> [14] </ref> also investigated the performance of DP on random formulas with a fixed clause length of 3, and suggested that it might be more useful for generating random instances, an hypothesis we have confirmed experimentally here.
Reference: [15] <author> Frieze, A. and Suen, S., </author> <title> Analysis of three simple heuristics on a random instance of k-SAT, </title> <type> Manuscript, </type> <year> 1992. </year> <month> 15 </month>
Reference-contexts: As N gets large the probability that an instance of Random 3-SAT is satisfiable approaches 0 whenever the ratio of clauses to variables is less than 3.003 <ref> [15] </ref>, and approaches 1 when this ratio is greater than 4.758 [23]. As can be seen, our empirical results are in agreement with, though much more fine-grained than, the best theoretical bounds.
Reference: [16] <author> Garey, M.R. and Johnson, </author> <title> D.S., Computers and Intractability, A Guide to the Theory of NP-Completeness. </title> <address> New York, NY: </address> <publisher> W.H. Freeman (1979). </publisher>
Reference-contexts: Subsequent tasks have been shown to be NP-hard by proving they are at least as hard as SAT. Roughly, a task is NP-hard if a good algorithm for it would entail a good algorithm for SAT. Unlike many other NP-hard tasks (see <ref> [16] </ref> for a catalogue), SAT is of special concern to AI because of its direct relationship to deductive reasoning (i.e., given a collection of base facts , a sentence ff may be deduced iff [ f:ffg is not satisfiable).
Reference: [17] <author> Goerdt, A., </author> <title> A threshold for unsatisfiability. </title> <type> Manuscript 1991. </type>
Reference: [18] <author> Goldberg, A., </author> <title> On the complexity of the satisfiability problem. </title> <journal> Courant Computer Science Report, </journal> <volume> No. </volume> <pages> 16, </pages> <address> New York University, NY, </address> <year> 1979. </year>
Reference-contexts: It seems that, at least for the time being, we must rely largely on empirical results. A number of papers (some discussed below) have claimed that the difficulty of SAT on randomly generated problems is not so daunting. For example, an often-quoted result by Goldberg <ref> [18] </ref> suggests that SAT can be readily solved "on average" in polynomial time. This does not settle the question of how well the methods will work in practice, but at first blush it does appear to be more relevant to AI than contrived worst cases. <p> The SAT procedure we used for our tests is the Davis-Putnam procedure, which we describe below. We believe this was a good choice for two reasons: First, it is equivalent to a particular case of resolution <ref> [18] </ref>, the most widely used general reasoning method in AI; second, until recently, almost all empirical work on SAT testing has used one or another refinement of this method, which facilitates comparison. We suspect that our results on hard and easy areas generalize to all SAT procedures. <p> The main impetus for this research was early results by Goldberg <ref> [18] </ref>, which suggested 11 that SAT might in fact be efficiently solvable, on average, using DP. Franco and Paull [14] showed that Goldberg's positive results were a direct consequence of the distribution used | a variant of the constant-density model | and thus overly optimistic.
Reference: [19] <author> Haken, A., </author> <title> The intractability of resolution. </title> <note> Theoretical Computer Science 39 (1985) 297-308. </note>
Reference-contexts: Unfortunately, this result does not directly tell us much about the expected time to find a single assignment. A result of Chvatal and Szemeredi [7] gives further insight. Extending a ground-breaking result by Haken <ref> [19] </ref>, they showed that any resolution strategy requires exponential time with probability approaching 1 on unsatisfiable random 3-SAT formulas, when the ratio of clauses to variables is held constant. Random 3-SAT formulas are unsatisfiable with probability approaching 1 whenever the ratio of clauses to variables is greater than 4.758 [23].
Reference: [20] <author> Hooker, J.N., </author> <title> Resolution vs. cutting plane solution of inference problems: Some computational experience. </title> <journal> Operations Research Letter, </journal> <month> 7(1) </month> <year> (1988) </year> <month> 1-7. </month>
Reference: [21] <author> Hooker, J.N. and Fedjki, C., </author> <title> Branch-and-cut solution of inference problems in propositional logic, </title> <journal> Annals of Math. and Artif. Intell., </journal> <volume> 1 </volume> <pages> 123-139, </pages> <year> (1990). </year>
Reference-contexts: In this case, we have set the probability P to give an average clause length of 3. Although we see a slight easy-hard-easy pattern (previously noted by Hooker <ref> [21] </ref>), the hard area is not nearly as pronounced as that for random 3-SAT formulas of similar size, and in absolute terms the random P-SAT formulas are much easier.
Reference: [22] <author> Kamath, A.P., Karmarker, N.K., Ramakrishnan, K.G., and Resende, M.G.C., </author> <title> Computational experience with an interior point algorithm on the satisfiability problem. Proceedings, Integer Programming and Combinatorial Optimization, </title> <address> Waterloo, Canada: </address> <note> Mathematical Programming Society (1990) 333-349. </note>
Reference: [23] <author> Kamath, A.P., Motwani, A., Palem, R., and Spirakis, P., </author> <title> Tail Bounds for Occupancy and the Satisfiability Threshold Conjecture. </title> <booktitle> Proc. </booktitle> <address> FOCS-94, </address> <year> (1994). </year>
Reference-contexts: As N gets large the probability that an instance of Random 3-SAT is satisfiable approaches 0 whenever the ratio of clauses to variables is less than 3.003 [15], and approaches 1 when this ratio is greater than 4.758 <ref> [23] </ref>. As can be seen, our empirical results are in agreement with, though much more fine-grained than, the best theoretical bounds. <p> Random 3-SAT formulas are unsatisfiable with probability approaching 1 whenever the ratio of clauses to variables is greater than 4.758 <ref> [23] </ref>. So, given that DP corresponds to a particular resolution strategy as mentioned above, it follows that the average time complexity on such formulas is exponential. This result may appear inconsistent with our claim that over-constrained formulas are easy, but it is not.
Reference: [24] <author> Kirkpatrick, Scott and Selman, Bart, </author> <title> Critical Behavior in the Satisfiability of Random Boolean Expressions, </title> <journal> Science, </journal> <volume> 264 </volume> <pages> 1297-1301, </pages> <year> (1994). </year>
Reference: [25] <author> Larrabee, T. and Tsuji, Y., </author> <title> Evidence for a Satisfiability Threshold for Random 3CNF Formulas, </title> <booktitle> Proc. of the AAAI Spring Symposium on AI and NP-hard problems, </booktitle> <address> Palto Alto, CA (1993). </address>
Reference-contexts: The formulas in the hard area appear to be the most challenging for the strategies we have tested, and we conjecture that they will be for every (heuristic) method. This conjecture is supported by other workers, for example Larrabee and Tsuji <ref> [25] </ref>, who used a satisfiability procedure quite different from the Davis-Putnam procedure, but found the same hard and easy areas.
Reference: [26] <author> Mitchell, D., Selman, B., and Levesque, H.J., </author> <title> Hard and easy distributions of SAT problems. </title> <booktitle> Tenth National Conference on Artificial Intelligence (AAAI-92), </booktitle> <address> San Jose, CA (1992) 459-465. </address>
Reference-contexts: On the other hand, it is argued that this analysis is irrelevant to AI since it is based on worst-case scenarios, and that what is ? An earlier version of this paper <ref> [26] </ref> was presented at AAAI-92. Correspondence to: Bart Selman, AT&T Bell Laboratories, Murray Hill, NJ 07974. Telephone: (908) 582-2221. E-mail: selman@research.att.com. 1 Work carried out while visiting AT&T Bell Laboratories. 2 Fellow of the Canadian Institute for Advanced Research. <p> We suspect that our results on hard and easy areas generalize to all SAT procedures. This paper is an extension of a previous report <ref> [26] </ref>. The primary observations and arguments remain the same, but we have used much larger sample sizes (10,000 formulas per point, rather than 500), which eliminates most of the sampling error and so gives a clearer picture of the behaviors of interest.
Reference: [27] <author> Mitchell, D. and Levesque H.J., </author> <title> Some pitfalls for experimenters with random SAT. This volume. </title>
Reference-contexts: Median number of recursive DP calls for Random 3-SAT formulas, as a function of the ratio of clauses-to-variables. picture, we limit our attention to formulas with K = 3, that is, random 3-SAT. (Some data on other values of K can be found in <ref> [27] </ref>.) For a given N and M , an instance of random 3-SAT is produced by randomly generating M clauses of length 3.
Reference: [28] <author> Purdom, P., </author> <title> A Survey of Average Time Analyses of Satisfiability Algorithms. </title> <journal> Journal of Information Processing, </journal> <volume> 13(4), </volume> <year> (1990). </year>
Reference: [29] <author> Selman, B., Levesque, H.J., Mitchell, D., GSAT: </author> <title> A new method for solving hard satisfiability problems. </title> <booktitle> Tenth National Conference on Artificial Intelligence (AAAI-92), </booktitle> <address> San Jose, CA (1992) 440-446. </address>
Reference-contexts: While the easy cases we have found can be solved by almost any reasonable method, it is the hard cases ultimately that separate the winners from the losers. Thus, our data is presented as challenging test material for developers of SAT procedures (see Selman <ref> [29] </ref>, for example). The SAT procedure we used for our tests is the Davis-Putnam procedure, which we describe below.
Reference: [30] <author> Williams, C.P. and Hogg, T., </author> <title> Using deep structure to locate hard problems. </title> <booktitle> Proc. AAAI-92, </booktitle> <address> San Jose, CA (1992) 472-277. </address>
Reference: [31] <author> Wu, L.C., and Tang, C.Y., </author> <title> Solving the satisfiability problem by using randomized approach. </title> <journal> Information Processing Letters, </journal> <volume> 41 </volume> <pages> 187-190, </pages> <year> (1992). </year>
Reference: [32] <author> Zabih, R. and McAllester, D., </author> <title> A rearrangement search strategy for determining propositional satisfiability. </title> <booktitle> Proc. AAAI-88 (1988) 155-160. </booktitle> <pages> 16 </pages>
References-found: 31

