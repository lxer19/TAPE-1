URL: file://ic.eecs.berkeley.edu/pub/Dist_Algs/papers/mc-compel.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/Respep/Research/dist-sim/publications.html
Root-URL: 
Email: hsheng@ic.EECS.Berkeley.EDU  
Title: A GENERALIZED SELF-SCATTERING TECHNIQUE FOR MONTE CARLO SIMULATION SUITABLE FOR SIMD ARCHITECTURES  
Author: Henry Sheng, Roberto Guerrieri and Alberto Sangiovanni-Vincentelli 
Address: 211-202 Cory Hall  Berkeley, CA 94720-1772, U.S.A.  Italy  
Affiliation: Department of Electrical Engineering and Computer Sciences  University of California,  Dipartimento di Elettronica e Informatica Universita di Bologna,  
Abstract: We present a generalized self-scattering method for generating carrier free flight times in Monte Carlo simulation. Compared to traditional approaches, the added flexibility of this approach results in fewer fictitious scatterings, which is especially appealing for load balance and efficiency when a SIMD parallel computer is used. Speedups from 19% to 69% over an optimized variable-G approach are shown for an implementation on the Connection Machine CM-2. The performance sensitivities to applied fields and grid spacings are also presented. The conversion of existing variable-G software to this new approach requires only a few changes. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R.W. Hockney and J.W. Eastwood. </author> <title> Computer Simulation Using Particles. </title> <publisher> McGraw Hill, </publisher> <year> 1981. </year>
Reference-contexts: Introduction The Monte Carlo method for semiconductor device simulation <ref> [1, 2, 3] </ref> offers a way to analyze devices in great detail from a microscopic approach. <p> The probability of this fictitious scattering event is arbitrary, provided that it is non-negative, and can be constructed to make the integral inversion easy. The most commonly used techniques are the constant-G [3, 11, 12] or variable-G <ref> [1, 13, 14] </ref> algorithms. Here, the self-scattering probability is constructed so that the total scattering probability, G (E), is a piecewise constant function which can be used in place of the true probability in equation (1), under the condition that G (E) P (E); 8E.
Reference: [2] <author> T. Kurosawa. </author> <title> Monte Carlo Calculation of Hot-Electron Problems. </title> <booktitle> Proceedings of the International Conference on the Physics of Semiconductors, </booktitle> <pages> pages 424-426, </pages> <year> 1966. </year>
Reference-contexts: Introduction The Monte Carlo method for semiconductor device simulation <ref> [1, 2, 3] </ref> offers a way to analyze devices in great detail from a microscopic approach.
Reference: [3] <author> C. Jacoboni and P. Lugli. </author> <title> The Monte Carlo Method for Semiconductor Device Simulation. </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: Introduction The Monte Carlo method for semiconductor device simulation <ref> [1, 2, 3] </ref> offers a way to analyze devices in great detail from a microscopic approach. <p> Monte Carlo Flight Time Generation Monte Carlo simulation is time-consuming because it requires the generation of a large number of carrier flights. A key computational ingredient of simulating these flights is the generation of the associated free flight times, which may be obtained through the inversion of the integral <ref> [3] </ref>: Z t P (t 0 )dt 0 = 0 where r is a random number, P (t) and P (E) are the instantaneous carrier scattering probabilities in time and energy, respectively, and x represents the spatial location of the carrier. <p> Fortunately, a simplification of this task can be achieved if a fictitious self-scattering [11] mechanism is assumed. The probability of this fictitious scattering event is arbitrary, provided that it is non-negative, and can be constructed to make the integral inversion easy. The most commonly used techniques are the constant-G <ref> [3, 11, 12] </ref> or variable-G [1, 13, 14] algorithms. Here, the self-scattering probability is constructed so that the total scattering probability, G (E), is a piecewise constant function which can be used in place of the true probability in equation (1), under the condition that G (E) P (E); 8E. <p> A proper choice for a generalized S (E) can be derived from the representation of the band structure, described by the E k relationship: E (fi + ffE) = 2m fl (2) Ellipsoidal behavior can be accounted for through the Herring-Vogt transformation <ref> [3] </ref>. In our approach, the E k relation is a locally parameterized model, where the full energy bands can be decomposed into subregions, each locally described by a set of parameters (ff; fi).
Reference: [4] <author> S. Selbeherr. </author> <title> Analysis and Simulation of Semiconductor Devices. </title> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: Introduction The Monte Carlo method for semiconductor device simulation [1, 2, 3] offers a way to analyze devices in great detail from a microscopic approach. It solves the Boltzmann Transport Equation <ref> [4] </ref> by statistically simulating the behavior of charge carriers, and is often used to obtain accurate solutions of device behavior where moment-based approaches such as drift-diffusion or hydrodynamic models are inadequate.
Reference: [5] <author> M. Fischetti and S. Laux. </author> <title> Monte Carlo Simulation of Submicron Si MOSFET. </title> <booktitle> Proceedings of SISDEP '88, </booktitle> <pages> pages 26-28, </pages> <year> 1988. </year>
Reference-contexts: Unfortunately, Monte Carlo offers accuracy at the expense of great computational cost. For instance, results related to a self-consistent Monte Carlo simulation of a two-dimensional silicon MOSFET required several days of CPU time on an IBM 3090/600E with vector processing capabilities <ref> [5] </ref>. Our approach to manage this cost is through the application of high-performance computer architectures. In this paper, we propose an algorithmic approach to decrease further the CPU requirements through a technique for efficient flight time generation.
Reference: [6] <author> M.J. Flynn. </author> <title> Very High Speed Computing Systems. </title> <journal> Proc. IEEE, </journal> <volume> 54 </volume> <pages> 1901-1909, </pages> <year> 1966. </year>
Reference-contexts: In this paper, we propose an algorithmic approach to decrease further the CPU requirements through a technique for efficient flight time generation. In addition to performance gains through reducing the number of fictitious scattering events, this algorithm promotes better load balancing in single instruction-stream, multiple data-stream (SIMD) <ref> [6] </ref> machines. We present results from a massively parallel SIMD implementation [7].
Reference: [7] <author> H. Sheng, R. Guerrieri, and A.L. Sangiovanni-Vincentelli. </author> <title> Massively Parallel Computation for Three-Dimensional Monte Carlo Device Simulation. </title> <booktitle> Proceedings of SISDEP '91, </booktitle> <pages> pages 285-290, </pages> <year> 1991. </year>
Reference-contexts: In addition to performance gains through reducing the number of fictitious scattering events, this algorithm promotes better load balancing in single instruction-stream, multiple data-stream (SIMD) [6] machines. We present results from a massively parallel SIMD implementation <ref> [7] </ref>. This paper is organized as follows: Section 2 describes the computational model; in Section 3 , we discuss generation of flight times in Monte Carlo; Section 4 describes the generalized algorithm for self-scattering; the computational results are shown in Section 5; finally, some conclusions are made in Section 6. <p> P (t) and P (E) are composed of the summation of individual contributions from the scattering mechanisms. In this work, the scattering mechanisms from <ref> [7] </ref> are modelled: acoustic phonons, optical phonon absorption and emission, ionized impurities, impact ionization, and oxide interface scattering. In the case of impact ionization, the effects of secondary pair generation are ignored. <p> Processing efficiencies were therefore measured for simulations involving gridless bulk silicon with a dopant level 10 16 cm 3 as a performance benchmark, running on a CM-2 with 1024 processors. The scattering mechanisms included in the simulation are the same as in <ref> [7] </ref>. Results from the generalized self-scattering algorithm were compared with the results from three optimized choices of energy segment size for the variable-G technique. Four energy patches were used in the generalized self-scattering implementation (with boundaries at 0.052 eV, 0.175 eV, and 0.45 eV).
Reference: [8] <author> D. Hillis. </author> <title> The Connection Machine. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1985. </year>
Reference-contexts: Computational Model The Connection Machine CM-2 <ref> [8] </ref> is a massively parallel SIMD computing system. A fully-configured system contains 64K processors. These processors can be allocated into Virtual Processor (VP) sets, where many virtual processors can be mapped onto a single physical processor.
Reference: [9] <author> C. Stanfill. </author> <title> Communications Architecture in the Connection Machine System. </title> <type> Technical report, </type> <institution> Thinking Machines Corporation, </institution> <year> 1987. </year>
Reference-contexts: Communication among processing elements on the CM-2 is accommodated through a hypercube network <ref> [9] </ref>, with the processors residing at the nodes of the cube. This architecture employs a data-parallel software paradigm. In this paradigm, the parallelism comes from simultaneous operations across large sets of data, rather than from multiple threads of control [10].
Reference: [10] <author> D. Hillis and Jr. G. Steele. </author> <title> Data Parallel Algorithms. </title> <journal> Communications of the ACM, </journal> <pages> pages 1170-1183, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: This architecture employs a data-parallel software paradigm. In this paradigm, the parallelism comes from simultaneous operations across large sets of data, rather than from multiple threads of control <ref> [10] </ref>. Instead of average case performance of a task, the worst-case performance is of relevance in a SIMD paradigm. With high probability, some processor will exhibit worst-case performance and other processors will, during this time, be idle.
Reference: [11] <author> H. Rees. </author> <title> Calculation of Distribution Functions by Exploiting the Stability of the Steady State. </title> <journal> J. Phys. Chem. Solids, </journal> <volume> 30 </volume> <pages> 643-655, </pages> <year> 1969. </year>
Reference-contexts: Unfortunately, the contributions to total scattering probability from these mechanisms are typically quite complex and the inversion of the resulting integral becomes computationally expensive. Fortunately, a simplification of this task can be achieved if a fictitious self-scattering <ref> [11] </ref> mechanism is assumed. The probability of this fictitious scattering event is arbitrary, provided that it is non-negative, and can be constructed to make the integral inversion easy. The most commonly used techniques are the constant-G [3, 11, 12] or variable-G [1, 13, 14] algorithms. <p> Fortunately, a simplification of this task can be achieved if a fictitious self-scattering [11] mechanism is assumed. The probability of this fictitious scattering event is arbitrary, provided that it is non-negative, and can be constructed to make the integral inversion easy. The most commonly used techniques are the constant-G <ref> [3, 11, 12] </ref> or variable-G [1, 13, 14] algorithms. Here, the self-scattering probability is constructed so that the total scattering probability, G (E), is a piecewise constant function which can be used in place of the true probability in equation (1), under the condition that G (E) P (E); 8E.
Reference: [12] <author> R. Yorsten. </author> <title> Free-Flight Time Generation in the Monte Carlo Simulation of Carrier Transport in Semiconductors. </title> <journal> Journal of Computational Physics, </journal> <volume> 64 </volume> <pages> 177-194, </pages> <year> 1986. </year>
Reference-contexts: Fortunately, a simplification of this task can be achieved if a fictitious self-scattering [11] mechanism is assumed. The probability of this fictitious scattering event is arbitrary, provided that it is non-negative, and can be constructed to make the integral inversion easy. The most commonly used techniques are the constant-G <ref> [3, 11, 12] </ref> or variable-G [1, 13, 14] algorithms. Here, the self-scattering probability is constructed so that the total scattering probability, G (E), is a piecewise constant function which can be used in place of the true probability in equation (1), under the condition that G (E) P (E); 8E. <p> In addition, the choice of constants for these methods is difficult and requires knowledge of the underlying probability distributions, while the efficiency of the simulator is highly dependent on this choice. A variety of approaches to construct efficient self-scattering functions have been developed and are reviewed in <ref> [12] </ref>. Unfortunately, the self-scattering schemes which are advocated in this work may not be optimal for data-parallelism. In addition to the minimization of self-scatterings, optimality of flight time generation in SIMD machines requires the consideration of load balancing among processors, since these machines require instruction-level synchronization during execution.
Reference: [13] <author> C. Moglestue. </author> <title> A Self-Consistent Monte Carlo Particle Model to Analyze Semiconductor Microcomponents of Any Geometry. </title> <journal> IEEE Transactions on CAD, </journal> <pages> pages 326-345, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: The probability of this fictitious scattering event is arbitrary, provided that it is non-negative, and can be constructed to make the integral inversion easy. The most commonly used techniques are the constant-G [3, 11, 12] or variable-G <ref> [1, 13, 14] </ref> algorithms. Here, the self-scattering probability is constructed so that the total scattering probability, G (E), is a piecewise constant function which can be used in place of the true probability in equation (1), under the condition that G (E) P (E); 8E.
Reference: [14] <author> E. Sangiorgi, B. Ricco, and F. Venturi. MOS2: </author> <title> An Efficient Monte Carlo Simulator for MOS Devices. </title> <journal> IEEE Transactions on CAD, </journal> <pages> pages 259-271, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: The probability of this fictitious scattering event is arbitrary, provided that it is non-negative, and can be constructed to make the integral inversion easy. The most commonly used techniques are the constant-G [3, 11, 12] or variable-G <ref> [1, 13, 14] </ref> algorithms. Here, the self-scattering probability is constructed so that the total scattering probability, G (E), is a piecewise constant function which can be used in place of the true probability in equation (1), under the condition that G (E) P (E); 8E. <p> However, the use of multiple bounding segments results in energy-induced false scatterings, a false scattering event caused by the transition of carriers across an energy subregion. This mechanism is analogous to the case of the fictitious energy-induced scattering associated with the variable-G scheme <ref> [14] </ref>. Hence, though the bounding function can be made more accurate with more energy segments, a tradeoff exists with the number of fictitious scattering events induced by the energy domain boundaries. <p> Results from the generalized self-scattering algorithm were compared with the results from three optimized choices of energy segment size for the variable-G technique. Four energy patches were used in the generalized self-scattering implementation (with boundaries at 0.052 eV, 0.175 eV, and 0.45 eV). The strategy from <ref> [14] </ref> was used for determining good choices for the energy segment sizes in the variable-G technique. The results are shown in figure 2 as a function of the applied electric field. <p> In simulating a constant number of carrier flights, the generalized self-scattering method (GSS) showed a 69% improvement in processing efficiency over the best variable-G method for an applied electric field of 33000 V/cm. Whereas optimality with the variable-G technique typically requires 15-20 segments <ref> [14] </ref>, substantially fewer (3-5) segments are typically necessary for this generalized technique, leading to fewer energy-induced false scatterings.
Reference: [15] <author> D. Webber, E. Tomacruz, R. Guerrieri, A. Sangiovanni-Vincentelli. </author> <title> A Massively Parallel Algorithm for Three-Dimensional Device Simulation. </title> <journal> IEEE Transactions on CAD, </journal> <pages> pages 1201-1209, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: In this manner, the uniqueness of the solution is ensured. Results Both the generalized self-scattering and the variable-G schemes were implemented on a static-field Monte Carlo simulator for the Connection Machine CM-2, where the electric field has been provided by a three-dimensional drift-diffusion simulator <ref> [15] </ref>. Processing efficiency can be used to compare the relative quality of the algorithms.
References-found: 15

