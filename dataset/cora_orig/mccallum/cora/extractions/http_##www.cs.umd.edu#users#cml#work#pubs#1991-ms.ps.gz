URL: http://www.cs.umd.edu/users/cml/work/pubs/1991-ms.ps.gz
Refering-URL: http://www.cs.umd.edu/users/cml/work/pubs/
Root-URL: 
Title: Defining a Virtual Machine for Executing MVP-L Project Plans  
Author: Christopher Martin Lott 
Degree: submitted to The Graduate School of  in partial fulfillment of the requirements for the degree of Master of Science  
Date: August 16, 1991  
Address: College Park  
Affiliation: The University of Maryland,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> G. Kaiser, N. S. Barghouti, and M. H. Sokolsky. </author> <title> Preliminary Experience with Process Modeling in the Marvel Software Development Environment Kernel, </title> <booktitle> Proceedings of the 23rd Annual Hawaii International Conference on System Sciences, v. II, </booktitle> <pages> pp. 131-140, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: One method of achieving execution of project plans involves translating project plans into some other imperative language that in turn will be compiled and run. Other methods that were considered are translation into Marvel, a rule-based language <ref> [1] </ref>, and translation into a tabular state-machine description. A translation into another system is possible because a project plan contains the complete information necessary to translate and execute the plan, it is defined in a formal language, and execution semantics are defined for the language.
Reference: [2] <author> Christopher M. Lott and H. Dieter Rombach. </author> <title> An MVP-L1 Solution for the Software Process Modeling Problem." </title> <booktitle> To be published in the Proceedings of the Sixth International Software Process Workshop, </booktitle> <address> Hakodate, Japan, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: Because no absolute measure of naturalness can ever be made, the design of the language was based on empirical evidence and experience. Recent experience has shown that MVP-L models are comprehensible to process participants after some explanation of the language <ref> [2] </ref>. The elementary model types of MVP-L are process, product, and resource models. A model is only a type description. Just as in a conventional language, we cannot discuss the state of a type, only of an object of that type when instantiated in some environment.
Reference: [3] <author> Leon Osterweil. </author> <title> Software Processes are Software Too." </title> <booktitle> In Proceedings of the Ninth International Conference on Software Engineering, </booktitle> <pages> pages 2-13, </pages> <address> Monterey, CA, </address> <month> March </month> <year> 1987. </year>
Reference: [4] <author> H. Dieter Rombach. MVP-L: </author> <title> A Language for Process Modeling In-The-Large, </title> <institution> UMIACS-TR-91-96, CS-TR-2709, Department of Computer Science, University of Maryland, College Park, Maryland 20742, </institution> <year> 1991. </year>
Reference-contexts: For the planning/enaction phase, the goals focus on building and checking models easily. For the execution and analysis/feedback phases, the goals involve providing a support environment for execution of the process as guided by the enacted model. Goals are discussed at length in <ref> [4] </ref>. Goal 1: Build descriptive process models Descriptive modeling is simple if process knowledge is represented in a form which can be reviewed by application (process) experts. <p> Finally, the system interface (level 0) provides the base support environment which is necessary for these activities. The experience base interface and other details are explored in more detail in <ref> [4] </ref>. In practice, the virtual machine will be implemented by translating MVP-L plans into some other form. Experiments with translating MVP-L into Ada have shown some promise. 1.6.1 Requirements for an execution environment A support environment is required to provide at least the following facilities for executing MVP-L project plans. <p> Execution semantics of the language are based on a formal execution model. This section introduces features of the language from the perspective of execution semantics. Requirements for the language and the use of language features are discussed at length in <ref> [4] </ref>. 2.1 Requirements for the Language The following list of requirements is an attempt to satisfy the goals of the MVP project as they relate to the modeling language. These requirements are excerpted from [4]. <p> Requirements for the language and the use of language features are discussed at length in <ref> [4] </ref>. 2.1 Requirements for the Language The following list of requirements is an attempt to satisfy the goals of the MVP project as they relate to the modeling language. These requirements are excerpted from [4]. Use understandable, natural notations The language should be straightforward to understand, especially for users who are unfamiliar with process-modeling terminology. MVP-L satisfies this requirement by using keywords and model types that were chosen to correspond to the ways people discuss process. <p> The MVP-L language was designed specifically to satisfy this requirement. 6 2.2 MVP-L Objects and Model Types This section introduces the model types and objects of the language from the perspective of what they mean at execution time. Language features and modeling issues are explained in more detail in <ref> [4] </ref>. The examples used in this paper are abstract to allow the discussion to focus on execution semantics and not the work represented by the models. All model type names are suffixed with model, and comment lines are prefixed with two leading dashes (- -), as in Ada. <p> This example is taken from <ref> [4] </ref>. project_plan A is -- this is a project plan object for doing abstract work -- useful for demonstration of a project plan import -- name the models to be used product_model B1_Type; product_model B21_Type; product_model B22_Type; process_model A1_Type; process_model A2_Type; objects -- instantiate the objects (products, processes) to be used
Reference: [5] <author> Stanley M. Sutton, Jr. APPL/A: </author> <title> A Prototype Language for Software-process Programming." </title> <type> PhD thesis, </type> <institution> University of Colorado, </institution> <month> August </month> <year> 1990. </year> <month> 35 </month>
Reference-contexts: First, tasking is an elementary part of the Ada language. Second, Ada provides well-structured facilities for interprocess communication, namely entries. Third, using Ada gives us the Ada runtime environment for free. Finally, we have considered the possibility of translating MVP-L models into Appl/A <ref> [5] </ref> for execution, which we thought to be a task similar to translation into Ada. 4.3 Implementation concerns Real-world activities are represented as independent processes in the translation. This brought up a number of concerns.
References-found: 5

