URL: http://www.cs.umd.edu/users/matos/HASE_97.ps
Refering-URL: http://www.cs.umd.edu/users/matos/papers.html
Root-URL: 
Email: fmatos, purtilog@cs.umd.edu  white@cs.gmu.edu  
Title: Automated Computation of Decomposable Synchronization Conditions  
Author: Gilberto Matos, James Purtilo Elizabeth White 
Keyword: receptive safety properties, automated synchronization, concurrent software, automated code generation, reliability.  
Address: College Park, Maryland  Fairfax, Virginia  
Affiliation: University of Maryland  George Mason University  
Abstract: High assurance systems have various types of system requirements, most notably safety, real-time, reliability, security and availability. The primary goal of high assurance system designers is to integrate various functions of the system while preserving the system consistency with the requirements. In this paper we show how automated synchronization based on receptive safety rules facilitates this integration. GenEx is a synchronization tool that computes the synchronization conditions necessary for the system components to satisfy their receptive safety requirements, while preserving the real-time and liveness properties of the system. The complexity of concurrent software systems limits the use of formal development and verification techniques in industrial applications. GenEx computes the synchronization conditions independently for each receptive safety rule, thus significantly reducing the complexity of the behavior analysis. We show how, using GenEx synchronization, we designed a controller for a medium-sized industrial production system with safety, liveness and real-time requirements. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Martin Abadi and Leslie Lamport. </author> <title> "Composing Specifications". </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15 </volume> <pages> 73-132, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: Fortunately, analysis with respect to receptive safety rules can be performed on partial systems and it has been shown that the verified safety is preserved when the parts of the system are composed <ref> [1] </ref>. <p> Our method facilitates the automated integration and composition of finite state-based concurrent and distributed systems. We use receptive safety rules <ref> [1] </ref> to define acceptable partial orders of system actions and synchronize the components to interact correctly with respect to those constraints. Figure 1 shows a high level view of the integration process using our method. Components are independently designed finite state machines, produced to perform specific functions. <p> Receptive safety properties are very important for the implementation of reliable systems because the realizable part of any property is a receptive property. The realizable part of a property is defined as a topologically closed set of execution traces that includes only traces acceptable by that property <ref> [1] </ref>. This means that any system that satisfies a nonreceptive property has to satisfy a receptive safety property. <p> The synchronization of systems based on desired temporal properties is theoretically discussed in [4], and preservation of safety properties in composed systems in <ref> [1] </ref>. One of our goals is to extend GenEx to accommodate larger subsystems then the ones in the production cell example. We have a prototype of a static safety analysis algorithm that will produce synchronization conditions without generating even a subsystem reach-ability graph.
Reference: [2] <author> J.R. Burch, E.M. Clarke, K.L. McMillan, D.J. Dill, and L.J. Hwang. </author> <title> "Symbolic Model Checking: 10 20 States and Beyond". </title> <booktitle> In Proceedings of the Fifth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 428-439, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: In the case of the FEED TABLE rule, the bound on complexity is 160 states, and the actual complexity of the reachability graph is just under 100 states. The analysis of systems with this complexity is trivial for current verification tools <ref> [2] </ref> [8]. The table in Figure 7 shows the size of the state spaces generated for the safety analysis with respect to individual safety rules. The table shows the components whose interaction is analyzed and the number of states in the combined reachability graph.
Reference: [3] <author> S. C. Cheung and J. Kramer. </author> " <title> Compositional Reachability Analysis of Finite-State Distributed Systems with User-Specified Constraints". </title> <booktitle> In SIG-SOFT'95 Third ACM SIGSOFT Symposium on the Foundations of Software Engineering, </booktitle> <pages> pages 140-151, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: They are nevertheless well within the acceptable limits for analysis using our method. 5 Related and Future Research This integration method produces synchronized systems based on independent system components. The resulting systems are comparable to systems based on stronger synchronization assumptions, such as those using labeled transition systems (LTS) <ref> [3] </ref>. The strong synchronization assumptions in LTS lead to very elegant specifications and composition but complicate the implementation in distributed environments. The explicit differentiation in GenEx between safety rules and components makes it easier to define rules that guarantee correct composition without global behavior analysis.
Reference: [4] <author> E. Allen Emerson and Edmund M. Clarke. </author> <title> "Us ing Branching Time Temporal Logic to Synthesize Synchronization Skeletons". </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 2(3) </volume> <pages> 241-266, </pages> <month> Dec </month> <year> 1982. </year>
Reference-contexts: The specification of unacceptable behaviors is the main role of the safety rules in GenEx, because we use the safety violations preconditions to derive the triggering conditions for the safety preserving actions. The synchronization of systems based on desired temporal properties is theoretically discussed in <ref> [4] </ref>, and preservation of safety properties in composed systems in [1]. One of our goals is to extend GenEx to accommodate larger subsystems then the ones in the production cell example.
Reference: [5] <author> C. Lewerentz and T. Lindner. </author> <title> "Formal Devel opment of Reactive Systems". </title> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1995. </year>
Reference-contexts: The process produces modified components that include the necessary synchronization mechanisms to satisfy the given safety rules. This paper shows the use of our method for designing a controller for the production cell system <ref> [5] </ref> used for a case study of over a dozen formal design methods for concurrent systems. We formally verified the safety of the controller, and produced an executable system capable of controlling the production cell. <p> Some transitions that enforce real-time requirements 4 Complexity of the Analysis The production cell system was classified in <ref> [5] </ref> as a medium complexity industrial system, with a total system space complexity estimated at fifty million states. This kind of complexity makes it infeasible to analyze using exhaustive methods.
Reference: [6] <author> David C. Luckham, James Vera, Doug Bryan, Larry Augustin, and Frank Belz. </author> <title> "Partial Order-ings of Events Sets and Their Application to Pro-totyping Concurrent Timed Systems". </title> <journal> Journal of Systems and Software, </journal> <volume> 21(3) </volume> <pages> 253-265, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: The safety rules that we use to synchronize components have two roles: 1) they define the partial order interpretation of system behavior, and 2) relate them to the unacceptable behaviors. The partial order interpretation has some similarities with the approach in Rapide <ref> [6] </ref>, where component actions are explicitly triggered by matching system behaviors with predefined partial orders. While the triggered actions are specified by the user in Rapide, GenEx derives these actions from the necessity of preserving the system safety.
Reference: [7] <author> Gilberto Matos, James Purtilo, and Elizabeth White. </author> <title> "Automated Computation of Decomposable Synchronization Conditions". </title> <institution> Research Report CS-TR-3748, University of Maryland, College Park,Md 20740, USA, </institution> <month> February </month> <year> 1997. </year>
Reference-contexts: a method for the integration of concurrent systems using receptive safety rules as in fl This research is Supported by the Office of Naval Research under contract ONR N000149410320 and by the National Science Foundation under contract NSF 96-25-202 teraction constraints, and partitioned safety analysis to compute the component synchronization <ref> [7] </ref>. Our method is embodied in a design tool GenEx that analyzes the behavior of the system and modifies its components to produce a reliably safe executable system with respect to the given safety rules. Our method facilitates the automated integration and composition of finite state-based concurrent and distributed systems.
Reference: [8] <author> K.L. McMillan. </author> <title> Symbolic Model Checking. </title> <publisher> Kluwer Academic, </publisher> <year> 1993. </year>
Reference-contexts: In the case of the FEED TABLE rule, the bound on complexity is 160 states, and the actual complexity of the reachability graph is just under 100 states. The analysis of systems with this complexity is trivial for current verification tools [2] <ref> [8] </ref>. The table in Figure 7 shows the size of the state spaces generated for the safety analysis with respect to individual safety rules. The table shows the components whose interaction is analyzed and the number of states in the combined reachability graph.
References-found: 8

