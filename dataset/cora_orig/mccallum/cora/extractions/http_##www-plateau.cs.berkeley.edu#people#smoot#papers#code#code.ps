URL: http://www-plateau.cs.berkeley.edu/people/smoot/papers/code/code.ps
Refering-URL: http://www-plateau.cs.berkeley.edu/people/smoot/papers/
Root-URL: 
Title: Coded Replication: A Space-Efficient Technique for Increasing File Availability  
Author: Michael E. Flaster and Stephen R. Smoot 
Address: Berkeley, California 94720  
Affiliation: Computer Science Division Electrical Engineering and Computer Science University of California at Berkeley  
Abstract: Distributed file systems offer a potential increase in file availability through replication of data. Many previous solutions have had large space requirements to achieve high availability. In this paper, we propose a method of replication that is extremely space efficient and yet provides significantly better availability than Dynamic Voting (the best of the previous methods) for reasonably reliable systems. The method employs Reed-Solomon encoding techniques, permitting each node to hold a small amount of the file, and yet allow reconstruction of the entire file given only a subset of the nodes. This increases availability at the cost of increased processing time, instead of increased disk space. The technique is shown to be flexible both in system resource demands and in the availability provided. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Daniel Barbara and Hector Garcia-Molina. </author> <title> The Vulnerability of Voting Mechanisms. </title> <booktitle> In Symposium on Reliability in Distributed Software and Database Systems, </booktitle> <address> Silver Springs, MD, </address> <month> October </month> <year> 1984. </year>
Reference-contexts: This improves availability as since that node is up a lot, it can have more sway in gathering a quorum. Mechanisms for assigning votes are discussed in <ref> [1, 2, 18, 7] </ref> presence of a network partition, because two different partitions cannot both contain the majority of the votes.
Reference: [2] <author> Daniel Barbara, Hector Garcia-Molina, and Annemarie Spauster. </author> <title> Policies for Dynamic Vote Reassignment. </title> <booktitle> In Third International Conference on Data Engineering, </booktitle> <address> Los An-geles, CA, </address> <month> February </month> <year> 1987. </year>
Reference-contexts: This improves availability as since that node is up a lot, it can have more sway in gathering a quorum. Mechanisms for assigning votes are discussed in <ref> [1, 2, 18, 7] </ref> presence of a network partition, because two different partitions cannot both contain the majority of the votes.
Reference: [3] <author> Elwyn R. Berlekamp. </author> <title> Algebraic Coding Theory. </title> <publisher> McGraw-Hill Book Company, </publisher> <address> New York, NY, </address> <year> 1968. </year>
Reference-contexts: The purpose of encoding is to add redundant information so that if parts of the message word are lost or modified, the original code words can still be recovered. There are different ways for information to be lost <ref> [3] </ref>. Traditionally, codes are used to correct errors in transmission. An error involves the corruption of an unknown character in the message word. Another use for codes is correcting erasures.
Reference: [4] <author> Elwyn R. Berlekamp, </author> <title> editor. Key Papers in The Development of Coding Theory. </title> <publisher> IEEE Press, </publisher> <address> New York, NY, </address> <year> 1974. </year>
Reference: [5] <author> P.A. Bernstein and N. Goodman. </author> <title> An Algorithm for Concurrency Control and Recovery in Replicated Distributed Databases. </title> <journal> ACM Transactions on Database Systems, </journal> <month> December </month> <year> 1984. </year>
Reference-contexts: The main reason for this problem is that read and write quorums are determined statically. When nodes containing half the votes are down in this scheme, it is impossible for the file to be available for both reads and writes. 2.2 Available Copies In the Available Copies scheme <ref> [5, 9] </ref>, a client can read from any node which has a current copy of the file, while writes must go to all functioning nodes. When nodes fail and return to the network, all of their resident replicas are marked comatose, and become unavailable.
Reference: [6] <author> Danco Davcev and W.A. Burkhard. </author> <title> Consistency and Recovery Control for Replicated Files. </title> <booktitle> In Proc. Tenth ACM Symposium on Operating Systems, Operating Systems Review, </booktitle> <year> 1985. </year>
Reference-contexts: If the network becomes partitioned, multiple inconsistent versions of the file may be created. Its applicability is thus limited to systems which are not subject to partitions, such as single Ethernets. 2.3 Dynamic Voting Dynamic Voting <ref> [6] </ref> was created to allow files to have the same availability as in Available Copies, and yet to perform correctly in the case of network partitions. In Dynamic Voting, there exists a set of nodes for every file containing replicas of the current version of the file.
Reference: [7] <author> Hector Garcia-Molina. </author> <title> Elections in Distributed Computer Systems. </title> <journal> IEEE Transactions on Computers, </journal> <month> January </month> <year> 1982. </year>
Reference-contexts: This improves availability as since that node is up a lot, it can have more sway in gathering a quorum. Mechanisms for assigning votes are discussed in <ref> [1, 2, 18, 7] </ref> presence of a network partition, because two different partitions cannot both contain the majority of the votes.
Reference: [8] <author> David K. Gifford. </author> <title> Weighted Voting for Replicated Data. </title> <booktitle> In Proc. Seventh ACM Symposium on Operating Systems Principles, </booktitle> <year> 1979. </year>
Reference-contexts: Finally, we summarize our conclusions. 1 2 Managing Replication We shall briefly summarize some relevant work in replication for distributed file systems. 2.1 Weighted Voting The first voting consistency protocol proposed was Weighted Voting, described by Gifford in <ref> [8] </ref>. In this scheme, n copies of a file are placed on different nodes. Each copy is called a replica. Each replica is also granted a number of votes, which represents how "important" (based on some user-defined rubric) that replica is.
Reference: [9] <author> N. Goodman, D. Skeen, A. Chan, U. Dayal, R. Fox, and D. Ries. </author> <title> A Recovery Algorithm for a Distributed Database System. </title> <booktitle> In Proceedings of the Second ACM Symposium on Principles of Database Systems, </booktitle> <address> Atlanta, GA, </address> <month> March </month> <year> 1983. </year> <month> 12 </month>
Reference-contexts: The main reason for this problem is that read and write quorums are determined statically. When nodes containing half the votes are down in this scheme, it is impossible for the file to be available for both reads and writes. 2.2 Available Copies In the Available Copies scheme <ref> [5, 9] </ref>, a client can read from any node which has a current copy of the file, while writes must go to all functioning nodes. When nodes fail and return to the network, all of their resident replicas are marked comatose, and become unavailable.
Reference: [10] <author> Hideki IMAI and Tsutomu MATSUMOTO. </author> <title> Coding Theory and Its Applications in Japan. In Applied Algebra, Algebraic Algorithms and Error-Correcting Codes, </title> <booktitle> 5 t h International Conference, </booktitle> <address> Menorca, Spain, </address> <month> June </month> <year> 1987. </year> <note> An Extended Abstract in Lecture Notes in Computer Science, Number 356, </note> <editor> edited by L. Huguet and A. </editor> <publisher> Poli. </publisher>
Reference-contexts: correcting 16 era sures.) It was able to handle message words that were 255 characters long, it computed the necessary matrices dynamically (instead of having them all computed a priori and stored in a table), and yet it was still able to operate at a speed of approximately 50 Mb/s <ref> [10] </ref>. These speeds were attainable over four years ago; codes can clearly be processed orders of magnitudes faster when the processing is done in hardware instead of in software.
Reference: [11] <author> Sushil Jajodia. </author> <title> Managing Replicated Files in Partitioned Distributed Database Systems. </title> <booktitle> In International Conference on Distributed Computing Systems, </booktitle> <address> Los Angeles, CA, </address> <month> February </month> <year> 1987. </year>
Reference-contexts: When two copies remain, any failure looks like a halving-partition. So, Dynamic Voting allows access to the file only as long as two copies remain accessible. In Linear Dynamic Voting <ref> [11] </ref>, replicas are ordered a priori, to allow a single partition to access the file in the case of a halving-partition. During a halving-partition, only the partition containing the highest numbered replica is allowed to continue accessing the file.
Reference: [12] <author> Darrell D. Long and Jehan-Fran~cois P^aris. </author> <title> On Improving the Availability of Replicated Files. </title> <booktitle> In Symposium on Reliability in Distributed Software and Database Systems, </booktitle> <address> Williamsburg, Va, </address> <month> 17-19 March </month> <year> 1987. </year>
Reference-contexts: Figure 4 shows an expansion of a very important region of Figure 3, namely the region corresponding to the systems where nodes are up more than 90% of the time. (According to <ref> [12] </ref> most modern computers have p 0:95.) that a file will be unavailable. For the very compact and fast (5,3) code, when nodes are up 90% of the time, it performs 69% better than Dynamic Voting, despite using much less space.
Reference: [13] <author> Darrell D. </author> <note> Long and Jehan-Fran~cois P^aris. </note>
Reference-contexts: So, Linear Dynamic Voting allows a file to be available whenever two copies are accessible, and half of the time when a single copy is available. Dynamic Voting offers the highest availability of any previous technique, in partitionable networks. A "realistic" form has been proposed <ref> [13] </ref> that does not require instantaneous information transfer, but that reduces the availability somewhat. Consistency is only maintained, however, when all nodes see failures occur in the exact same order. 2.4 Regeneration Regeneration [15] is a general replication technique, which can augment most of the other techniques.
References-found: 13

