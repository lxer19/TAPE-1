URL: http://www.cse.ogi.edu/~hongwei/academic/papers/lfcs97.ps
Refering-URL: http://www.cse.ogi.edu/~hongwei/academic/publications.html
Root-URL: http://www.cse.ogi.edu
Email: email: hwxi+@cs.cmu.edu  
Title: Simulating -Expansions with fi-Reductions in the Second-Order Polymorphic -Calculus  
Author: Hongwei Xi 
Address: Pittsburgh, PA 15213, USA  
Affiliation: Department of Mathematical Sciences Carnegie Mellon University  
Abstract: We introduce an approach to simulating -expansions with fi-reductions in the second-order polymorphic -calculus. This generalizes the work of Di Cosmo and Delia Kesner which simulates -expansions with fi-reductions in simply typed settings, positively solving the conjecture on whether the simulation technique can be extended to polymorphic settings. We then present a modular proof that the second-order polymorphic -calculus with an expansive version of -reduction is strong normalizing and confluent. The simulation is also promising to provide modular proofs showing that other rewriting systems are also strongly normalizing after expanded with certain versions of -expansion.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Y. </author> <title> Akama (1993), On Mints' reduction for ccc-calculus. In Typed lambda-calculi and applications, </title> <booktitle> vol. 664 of LNCS, </booktitle> <pages> pp 1-12. </pages>
Reference-contexts: The use of -expansion as a rewrite rule was suggested in [18]. Mints [17] presented a proof for the confluence and (weak) normalization of a simply typed -calculus with surjective pairing and -expansion. A flaw in Mints's proof was later corrected in [6]. Y. Akama <ref> [1] </ref> proved the confluence and strong normalization of the above system, which is also given by C.B. Jay and N. Ghani [15]. Di Cosmo and Kesner discovered a translation () ffi which simulates -expansion with fi-reduction in a simply typed setting [8].
Reference: 2. <author> H.P. </author> <title> Barendregt (1984), The Lambda Calculus: Its Syntax and Semantics, </title> <publisher> North-Holland publishing company, Amsterdam. </publisher>
Reference: 3. <author> H.P. </author> <title> Barendregt (1992), Lambda calculi with types, </title> <booktitle> Handbook of Logic in Computer Science edited by S. </booktitle> <editor> Abramsky, Dov M. Gabbay and T.S.E. Maibaum, </editor> <publisher> Clarendon Press, Oxford, </publisher> <pages> pp. 117-414. </pages>
Reference: 4. <author> Val Breazu-Tannen and Jean Gallier (1991), </author> <title> Polymorphic rewriting conserves strong normalization, </title> <journal> Theoretic Computer Sicence, </journal> <volume> vol. 83, </volume> <pages> pp 3-28. </pages>
Reference: 5. <author> Val Breazu-Tannen and Jean Gallier (1994), </author> <title> Polymorphic rewriting preserves algebraic confluence, </title> <journal> Information and Computation, </journal> <volume> vol. 114(1), </volume> <pages> pp. 1-29. </pages>
Reference-contexts: We then present a modular proof, showing the second-order polymorphic -calculus with a version of -expansion is strongly normalizing and confluent. This new translation is also promising to be a powerful technique dealing with -expansions in other polymorphic settings <ref> [5] </ref>. Extensional polymorphism is studied in [5, 9, 10, 13]. A modular proof for the strong normalisation and confluence of fifi 2 fl (in our notation) is given in [10], which is rather long and complicated. <p> We then present a modular proof, showing the second-order polymorphic -calculus with a version of -expansion is strongly normalizing and confluent. This new translation is also promising to be a powerful technique dealing with -expansions in other polymorphic settings [5]. Extensional polymorphism is studied in <ref> [5, 9, 10, 13] </ref>. A modular proof for the strong normalisation and confluence of fifi 2 fl (in our notation) is given in [10], which is rather long and complicated. <p> A clean modular proof of 2 j= SN ( ! fifi 2 fl 2 fl ) follows immediately. We intend to investigate the effects of augmenting first--order algebraic rewriting systems with ! fifi 2 fl 2 fl . Improvements on <ref> [5] </ref> seems to be immediate. Also we shall study the use of our technique in more complicated - calculi such as the high-order polymorphic -calculus ! and the construction of calculus C.
Reference: 6. <author> Djordje Cubric (1992), </author> <title> On free ccc, </title> <type> Manuscripts. </type>
Reference-contexts: The use of -expansion as a rewrite rule was suggested in [18]. Mints [17] presented a proof for the confluence and (weak) normalization of a simply typed -calculus with surjective pairing and -expansion. A flaw in Mints's proof was later corrected in <ref> [6] </ref>. Y. Akama [1] proved the confluence and strong normalization of the above system, which is also given by C.B. Jay and N. Ghani [15]. Di Cosmo and Kesner discovered a translation () ffi which simulates -expansion with fi-reduction in a simply typed setting [8].
Reference: 7. <author> R. Di Cosmo and D. </author> <month> Kesner </month> <year> (1994), </year> <title> Combining the first order algebraic rewriting systems, recursion and extensional lambda calculi. </title> <editor> In Serge Abiteboul and Eli Shamir, editors, </editor> <booktitle> International Conference on Automata, Languages and Programming, vol. 820 of LNCS, </booktitle> <pages> pp. 462-472. </pages>
Reference-contexts: Jay and N. Ghani [15]. Di Cosmo and Kesner discovered a translation () ffi which simulates -expansion with fi-reduction in a simply typed setting [8]. An application of this translation can also be found in <ref> [7] </ref>. <p> The translation discovered by Di Cosmo and Kesner provides a modular approach to proving that many rewriting systems are still strong normalizing and confluent after augmented with restricted versions of -expansion <ref> [7] </ref>. This is a very useful proof technique in the first-order settings. Unfortunately, their translation cannot be applied to polymorphic settings directly. Although they have proven that the second-order polymorphic -calculus with surjective pairing and a version of -expansion is strongly normalizing and confluent, their proof is not modular.
Reference: 8. <author> R. Di Cosmo and D. </author> <month> Kesner </month> <year> (1994), </year> <title> Simulating expansions without expansions. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> vol. 4, </volume> <pages> pp. 1-48. </pages>
Reference-contexts: Y. Akama [1] proved the confluence and strong normalization of the above system, which is also given by C.B. Jay and N. Ghani [15]. Di Cosmo and Kesner discovered a translation () ffi which simulates -expansion with fi-reduction in a simply typed setting <ref> [8] </ref>. An application of this translation can also be found in [7]. <p> Proof. Since it is well-known that 2 j= SN (! fifi 2 ), 2 j= SN ( ! fifi 2 fl 2 fl ) follows immediately. It can be verified that ! fifi 2 fl 2 fl is weakly confluent <ref> [8] </ref>. Therefore, ! fifi 2 fl 2 fl is confluent by Newman's Lemma. Roberto Di Cosmo and Delia Kesner have also proven Corollary 9 in [9] with a method involving reducibility candidates due to Tait [21] and Girard [14]. Hence, their proof is not modular.
Reference: 9. <author> R. Di Cosmo and D. </author> <month> Kesner </month> <year> (1995), </year> <title> Rewriting with polymorphic extensional lambda-calculus. </title> <booktitle> In Proceedings of Computer Science Logic '95 , vol. 1092 of Lecture Notes in Computer Science, </booktitle> <pages> pages 215-232. </pages>
Reference-contexts: We then present a modular proof, showing the second-order polymorphic -calculus with a version of -expansion is strongly normalizing and confluent. This new translation is also promising to be a powerful technique dealing with -expansions in other polymorphic settings [5]. Extensional polymorphism is studied in <ref> [5, 9, 10, 13] </ref>. A modular proof for the strong normalisation and confluence of fifi 2 fl (in our notation) is given in [10], which is rather long and complicated. <p> Since fifi 2 fl is fifi 2 fl 2 fl excluding ! 2 fl , the result simply follows from our main result (Corollary 9). We point out that proofs for our main result have been already presented in <ref> [9] </ref> and [13], but those proofs are not modular. They are established upon the well-known reducibility candidates method due to Tait [21] and Girard [14]. It is interesting to mention that the author learned the use -expansion while studying the equivalence between strong and weak normalizations in various typed -calculi. <p> It can be verified that ! fifi 2 fl 2 fl is weakly confluent [8]. Therefore, ! fifi 2 fl 2 fl is confluent by Newman's Lemma. Roberto Di Cosmo and Delia Kesner have also proven Corollary 9 in <ref> [9] </ref> with a method involving reducibility candidates due to Tait [21] and Girard [14]. Hence, their proof is not modular.
Reference: 10. <author> R. Di Cosmo and A. </author> <month> Piperno </month> <year> (1995), </year> <title> Expanding Extensional Polymorphism, </title> <booktitle> In Proceedings of Typed Lambda-Calculi and Applications, vol. 902 of LNCS, </booktitle> <pages> pp. 139-153. </pages>
Reference-contexts: We then present a modular proof, showing the second-order polymorphic -calculus with a version of -expansion is strongly normalizing and confluent. This new translation is also promising to be a powerful technique dealing with -expansions in other polymorphic settings [5]. Extensional polymorphism is studied in <ref> [5, 9, 10, 13] </ref>. A modular proof for the strong normalisation and confluence of fifi 2 fl (in our notation) is given in [10], which is rather long and complicated. <p> This new translation is also promising to be a powerful technique dealing with -expansions in other polymorphic settings [5]. Extensional polymorphism is studied in [5, 9, 10, 13]. A modular proof for the strong normalisation and confluence of fifi 2 fl (in our notation) is given in <ref> [10] </ref>, which is rather long and complicated. Since fifi 2 fl is fifi 2 fl 2 fl excluding ! 2 fl , the result simply follows from our main result (Corollary 9). <p> Hence, their proof is not modular. Also a modular proof for the strong normalization and confluence of a subsystem of fifi 2 fl 2 fl is presented in <ref> [10] </ref>, but the proof | in the author's opinion | is very much involved and can hardly be scaled to other more complicated systems such as fifi 2 fl 2 fl . 5 Conclusions and Future Work We have demonstrated how to simulate -expansion with fi-reduction in the second-order polymorphic -calculus
Reference: 11. <author> Daniel J. </author> <title> Dougherty (1993), Some lambda calculi with categorical sums and products. </title> <booktitle> In Proceedings of the 5th International Conference on Rewriting Techniques and Applications. </booktitle>
Reference: 12. <author> N. </author> <title> Ghani (1995), fi-equality for coproducts. In Typed lambda-calculi and applications, </title> <booktitle> vol. 902 of LNCS, </booktitle> <pages> pp. 171-185. </pages>
Reference: 13. <author> N. </author> <title> Ghani (1996), Eta Expansions in System F, </title> <type> Manuscripts. </type>
Reference-contexts: We then present a modular proof, showing the second-order polymorphic -calculus with a version of -expansion is strongly normalizing and confluent. This new translation is also promising to be a powerful technique dealing with -expansions in other polymorphic settings [5]. Extensional polymorphism is studied in <ref> [5, 9, 10, 13] </ref>. A modular proof for the strong normalisation and confluence of fifi 2 fl (in our notation) is given in [10], which is rather long and complicated. <p> Since fifi 2 fl is fifi 2 fl 2 fl excluding ! 2 fl , the result simply follows from our main result (Corollary 9). We point out that proofs for our main result have been already presented in [9] and <ref> [13] </ref>, but those proofs are not modular. They are established upon the well-known reducibility candidates method due to Tait [21] and Girard [14]. It is interesting to mention that the author learned the use -expansion while studying the equivalence between strong and weak normalizations in various typed -calculi.
Reference: 14. <institution> J.-Y. Girard (1972), Interpretation fonctionnelle et elimination des coupures de l'arithmetique d'ordre superieur, These de doctorat d'etat, Universite Paris VII. </institution>
Reference-contexts: We point out that proofs for our main result have been already presented in [9] and [13], but those proofs are not modular. They are established upon the well-known reducibility candidates method due to Tait [21] and Girard <ref> [14] </ref>. It is interesting to mention that the author learned the use -expansion while studying the equivalence between strong and weak normalizations in various typed -calculi. <p> This can yield a bound for the lengths of fi-reduction sequence from simply typed terms. Details can also be founded in [22]. 2 Preliminaries The second-order polymorphic typed -calculus 2 is originally introduced in <ref> [14] </ref> and [19], where Church typing is involved. We now give a slightly different formulation of 2. <p> Therefore, ! fifi 2 fl 2 fl is confluent by Newman's Lemma. Roberto Di Cosmo and Delia Kesner have also proven Corollary 9 in [9] with a method involving reducibility candidates due to Tait [21] and Girard <ref> [14] </ref>. Hence, their proof is not modular.
Reference: 15. <author> C.B. Jay and N. </author> <title> Ghani (1996), The virtues of eta-expansion, </title> <journal> Journal of Functional Programming, </journal> <volume> vol. 5(2), </volume> <pages> pp. 135-154. </pages>
Reference-contexts: A flaw in Mints's proof was later corrected in [6]. Y. Akama [1] proved the confluence and strong normalization of the above system, which is also given by C.B. Jay and N. Ghani <ref> [15] </ref>. Di Cosmo and Kesner discovered a translation () ffi which simulates -expansion with fi-reduction in a simply typed setting [8]. An application of this translation can also be found in [7].
Reference: 16. <author> J. Lambek and P.J. </author> <title> Scott (1986), An introduction to higher order categorical logic, </title> <publisher> Cambridge University Press. </publisher>
Reference-contexts: The confluence breaks down as shown in the following well-known example <ref> [16] </ref>: x:f (x) ! f and x:f (x) ! T x:fl; where f is of type T ! T and x of type T. Note that both f and x:fl cannot be contracted further.
Reference: 17. <author> G.E. </author> <title> Mints (1979), Theory of categories and theory of proofs (I). </title> <booktitle> In Urgent Question of Logic and the Methodology of Science [In Russian], </booktitle> <address> Kiev. </address>
Reference-contexts: However, this method can produce an unwieldy system since infinitely many rules have to be included in order to handle terms of other similar types. The use of -expansion as a rewrite rule was suggested in [18]. Mints <ref> [17] </ref> presented a proof for the confluence and (weak) normalization of a simply typed -calculus with surjective pairing and -expansion. A flaw in Mints's proof was later corrected in [6]. Y. Akama [1] proved the confluence and strong normalization of the above system, which is also given by C.B.
Reference: 18. <author> D. </author> <title> Prawitz (1971), Ideas and results of proof theory, </title> <booktitle> Proceedings of the 2nd Scan-dinavia logic symposium, </booktitle> <editor> editor J.E. Fenstad, </editor> <publisher> North-Holland Publishing Company, Amsterdam. </publisher>
Reference-contexts: However, this method can produce an unwieldy system since infinitely many rules have to be included in order to handle terms of other similar types. The use of -expansion as a rewrite rule was suggested in <ref> [18] </ref>. Mints [17] presented a proof for the confluence and (weak) normalization of a simply typed -calculus with surjective pairing and -expansion. A flaw in Mints's proof was later corrected in [6]. Y.
Reference: 19. <author> J. </author> <title> Reynolds (1974), Towards a theory of type structure, </title> <booktitle> Colloquium sur la Progr-mmation, vol. 19 of LNCS, </booktitle> <pages> pp. 408-423. </pages>
Reference-contexts: This can yield a bound for the lengths of fi-reduction sequence from simply typed terms. Details can also be founded in [22]. 2 Preliminaries The second-order polymorphic typed -calculus 2 is originally introduced in [14] and <ref> [19] </ref>, where Church typing is involved. We now give a slightly different formulation of 2.
Reference: 20. <author> H. </author> <title> Schwichtenberg (1991), An upper bound for reduction sequences in the typed lambda-calculus, </title> <journal> Archive for Mathematical Logic, </journal> <volume> 30 </volume> <pages> 405-408. </pages>
Reference-contexts: They are established upon the well-known reducibility candidates method due to Tait [21] and Girard [14]. It is interesting to mention that the author learned the use -expansion while studying the equivalence between strong and weak normalizations in various typed -calculi. Schwichtenberg <ref> [20] </ref> used -expansion to translate simply typed -terms into simply typed I-terms so that fi-reduction sequences from the former can be simulated by those from the latter. This can yield a bound for the lengths of fi-reduction sequence from simply typed terms.
Reference: 21. <author> W. </author> <title> Tait (1967), Intensional Interpretations of functionals of finite type I, </title> <journal> J. symbolic logic 32, </journal> <pages> pp. 198-212. </pages>
Reference-contexts: We point out that proofs for our main result have been already presented in [9] and [13], but those proofs are not modular. They are established upon the well-known reducibility candidates method due to Tait <ref> [21] </ref> and Girard [14]. It is interesting to mention that the author learned the use -expansion while studying the equivalence between strong and weak normalizations in various typed -calculi. <p> It can be verified that ! fifi 2 fl 2 fl is weakly confluent [8]. Therefore, ! fifi 2 fl 2 fl is confluent by Newman's Lemma. Roberto Di Cosmo and Delia Kesner have also proven Corollary 9 in [9] with a method involving reducibility candidates due to Tait <ref> [21] </ref> and Girard [14]. Hence, their proof is not modular.
Reference: 22. <author> H. </author> <title> Xi (1996), Upper bounds for standardizations and an application, </title> <type> Research Report 96-189, </type> <institution> Department of Mathematical Sciences, Carnegie Mellon University, Pittsburgh. </institution>
Reference-contexts: Schwichtenberg [20] used -expansion to translate simply typed -terms into simply typed I-terms so that fi-reduction sequences from the former can be simulated by those from the latter. This can yield a bound for the lengths of fi-reduction sequence from simply typed terms. Details can also be founded in <ref> [22] </ref>. 2 Preliminaries The second-order polymorphic typed -calculus 2 is originally introduced in [14] and [19], where Church typing is involved. We now give a slightly different formulation of 2.
Reference: 23. <author> H. </author> <title> Xi (1996), Simulating eta-expansions with beta-reductions in the second-order polymorphic lambda-Calculus, </title> <type> Research Report, </type> <institution> Department of Mathematical Sciences, Carnegie Mellon University, </institution> <month> Pittsburgh. </month> <title> Available through pointer: http://www.cs.cmu.edu/~hwxi/papers/EtaSim.ps This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: For instance, jM j !! fifi 2 jN j means that every version of jM j fifi 2 -reduces to some version of jN j. If the reader is interested in the proof details for the following results, please see <ref> [23] </ref>. Proposition 4.
References-found: 23

