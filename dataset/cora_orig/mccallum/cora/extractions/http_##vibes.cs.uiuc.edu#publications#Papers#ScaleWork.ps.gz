URL: http://vibes.cs.uiuc.edu/publications/Papers/ScaleWork.ps.gz
Refering-URL: http://vibes.cs.uiuc.edu/People/Staff/Aydt/publications.htm
Root-URL: http://www.cs.uiuc.edu
Title: Scalable Performance Analysis: The Pablo Performance Analysis Environment  
Author: Daniel A. Reed Ruth A. Aydt Roger J. Noe Phillip C. Roth Keith A. Shields Bradley W. Schwartz Luis F. Tavera 
Address: Urbana, Illinois 61801  
Affiliation: Department of Computer Science University of Illinois  
Abstract: Developers of application codes for massively parallel computer systems face daunting performance tuning and optimization problems that must be solved if massively parallel systems are to fulfill their promise. Recording and analyzing the dynamics of application program, system software, and hardware interactions is the key to understanding and the prerequisite to performance tuning, but this instrumentation and analysis must not unduly perturb program execution. Pablo is a performance analysis environment designed to provide unobtrusive performance data capture, analysis, and presentation across a wide variety of scalable parallel systems. Current efforts include dynamic statistical clustering to reduce the volume of data that must be captured and complete performance data immersion via head-mounted displays. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Aydt, R. A. SDDF: </author> <title> The Pablo Self-Describing Data Format. </title> <type> Tech. rep., </type> <institution> University of Illinois at Urbana-Champaign, Department of Computer Science, </institution> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: Given the specification of instrumentation points, the parsers emit modified source code with embedded instrumentation. At execution time, the inserted instrumentation code invokes routines supplied by the data capture library, producing performance data in a standard event data format <ref> [9, 1] </ref>. 4.2 Instrumentation Options To balance the countervailing needs of detailed data and minimal perturbation, the Pablo instrumentation software supports three class of instrumentation events: tracing, counting, and time intervals. Each of the three event classes lies at a different point in the spectrum of detail and perturbation.
Reference: [2] <author> Cleveland, W. S., and MiGill, M. E., Eds. </author> <title> Dynamic Graphics for Statistics. </title> <publisher> Wadsworth & Brooks/Cole, </publisher> <year> 1988. </year>
Reference-contexts: Moreover, some metrics are discrete, others are continuous, and their dynamic ranges can differ by multiple orders of magnitude. In consequence, performance data presentation techniques share many of the problems common to statistical data analysis <ref> [2] </ref>, and most techniques for visualizing grid-based data (.e.g., volume visualization) are not directly applicable. 6.2 Presentation Metaphors The projection of a circle from three to two dimensions is an ellipse; the eccentricity is determined by the viewing perspective and the orientation of the circle. <p> Using dynamic performance data captured with the Pablo instrumentation library, we have implemented a performance data presentation metaphor that shows all the possible three-dimensional projections of a sparsely populated, n-dimensional space. This metaphor is a generalization of a two-dimensional scatterplot matrix <ref> [2] </ref>. Two-dimensional scatterplot matrices contain an array of x-y scatterplots that collectively represent all n 2 n combinations of two of the n variables; the n degenerate cases where both variables are identical lie on the diagonal of the scatterplot matrix.
Reference: [3] <author> FCCSET. </author> <title> Grand Challenges 1993: High Performance Computing and Communications, </title> <booktitle> the FY 1993 U.S. Research and Development Program. </booktitle> <institution> Federal Coordinating Council for Science, Engineering and Technology, Office of Science and Technology Policy, </institution> <year> 1992. </year>
Reference-contexts: DAVT63-91-C-0029, by the National Science Foundation under grants NSF IRI 92-12976 and NSF CDA87-22836, by the National Aeronautics and Space Administration under NASA Contract Number NAG-1-613, and by a collaborative research agreement with the Intel Supercomputer Systems Division. dynamics, or computational drug design) <ref> [3] </ref>. Several vendors have begun delivery of massively parallel systems with peak performance of a few hundred gi-gaflops, and all have clear performance growth paths to multiple teraflops within three years.
Reference: [4] <author> Jain, A. K., and Dubes, R. C. </author> <title> Algorithms for Clustering Data. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1988. </year>
Reference-contexts: Most points are closely clustered because they correspond to processors with similar behavior. If one could identify representatives of these equivalence classes and only record data from those representatives, one would obtain detailed performance metrics without capturing gigabytes of data. Statistical clustering <ref> [4] </ref> is one of the standard techniques for identifying data equivalence classes. Most clustering techniques are either hierarchical or parti-tional. Hierarchical techniques initially assign each point to a singleton cluster and then combine clusters to produce a sequence of hierarchical clusters.
Reference: [5] <author> Madhyastha, T. M., and Reed, D. A. </author> <title> A Framework for Sonification Design. In Data Sonification, </title> <editor> G. Kramer, Ed. </editor> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1993. </year>
Reference-contexts: As such, it consists of two primary components: (1) portable software instrumentation, and (2) portable performance data analysis, with a performance data meta-format coupling the instrumentation with the data analysis. The instrumentation, data format, analysis environment, and display options are briefly described below; for greater detail, see <ref> [9, 5, 8] </ref>. Pablo's portable software instrumentation has been designed to support interactive specification of source code instrumentation points. The software instrumentation can be used to gather performance data about either system or application codes, though our initial target is the latter. <p> Sound provides a rich set of attributes (e.g., duration, pitch, volume, and timbre), and all of these can be controlled via our sonification toolkit <ref> [5] </ref>.
Reference: [6] <author> Malony, A. D., and Reed, D. A. </author> <title> Visualizing Parallel Computer System Performance. In Instrumentation for Future Parallel Computing Systems, </title> <editor> M. Sim-mons, R. Koskela, and I. Bucher, Eds. </editor> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1989, </year> <pages> pp. 59-90. </pages>
Reference-contexts: needed if performance environments are to scale with massively parallel systems; these are the subject of x5 and x6. 3 Pablo Software Overview The design of the Pablo performance analysis environment draws on the lessons learned from the design, implementation and use of two previous generations of performance analysis software <ref> [6, 7] </ref>. Based on this experience, the bulk of the Pablo environment design effort has centered on supporting portability, scalability, and extensibility. Pablo is best viewed as a toolkit for the construction of performance analysis environments.
Reference: [7] <author> Malony, A. D., Reed, D. A., and Rudolph, D. C. </author> <title> Integrating Performance Data Collection, Analysis, and Visualization. In Parallel Computer Systems: Performance Instrumentation and Visualization, </title> <editor> M. Simmons, R. Koskela, and I. Bucher, Eds. </editor> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1990. </year>
Reference-contexts: needed if performance environments are to scale with massively parallel systems; these are the subject of x5 and x6. 3 Pablo Software Overview The design of the Pablo performance analysis environment draws on the lessons learned from the design, implementation and use of two previous generations of performance analysis software <ref> [6, 7] </ref>. Based on this experience, the bulk of the Pablo environment design effort has centered on supporting portability, scalability, and extensibility. Pablo is best viewed as a toolkit for the construction of performance analysis environments.
Reference: [8] <author> Reed, D. A., Aydt, R. A., Madhyastha, T. M., Noe, R. J., Shields, K. A., and Schwartz, B. W. </author> <title> An Overview of the Pablo Performance Analysis environment. </title> <type> Tech. rep., </type> <institution> University of Illinois at Urbana-Champaign, Department of Computer Science, </institution> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: As such, it consists of two primary components: (1) portable software instrumentation, and (2) portable performance data analysis, with a performance data meta-format coupling the instrumentation with the data analysis. The instrumentation, data format, analysis environment, and display options are briefly described below; for greater detail, see <ref> [9, 5, 8] </ref>. Pablo's portable software instrumentation has been designed to support interactive specification of source code instrumentation points. The software instrumentation can be used to gather performance data about either system or application codes, though our initial target is the latter.
Reference: [9] <author> Reed, D. A., Olson, R. D., Aydt, R. A., Mad-hyastha, T. M., Birkett, T., Jensen, D. W., Nazief, B. A. A., and Totty, B. K. </author> <title> Scalable Performance Environments for Parallel Systems. </title> <booktitle> In Proceedings of the Sixth Distributed Memory Computing Conference (1991), </booktitle> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: As such, it consists of two primary components: (1) portable software instrumentation, and (2) portable performance data analysis, with a performance data meta-format coupling the instrumentation with the data analysis. The instrumentation, data format, analysis environment, and display options are briefly described below; for greater detail, see <ref> [9, 5, 8] </ref>. Pablo's portable software instrumentation has been designed to support interactive specification of source code instrumentation points. The software instrumentation can be used to gather performance data about either system or application codes, though our initial target is the latter. <p> Given the specification of instrumentation points, the parsers emit modified source code with embedded instrumentation. At execution time, the inserted instrumentation code invokes routines supplied by the data capture library, producing performance data in a standard event data format <ref> [9, 1] </ref>. 4.2 Instrumentation Options To balance the countervailing needs of detailed data and minimal perturbation, the Pablo instrumentation software supports three class of instrumentation events: tracing, counting, and time intervals. Each of the three event classes lies at a different point in the spectrum of detail and perturbation.
Reference: [10] <author> Stardent Computer, Inc. </author> <title> Application Visualization System, User's Guide, </title> <year> 1989. </year>
Reference-contexts: Our initial architectural targets are the Thinking Machines CM-5 and the Intel Paragon XP/S systems. The performance analysis component of Pablo consists of a set of data transformation modules that can be graphically interconnected, in the style of AVS <ref> [10] </ref>, to form an acyclic, directed data analysis graph. Performance data flows through the graph nodes and is transformed to yield the desired performance metrics.
References-found: 10

