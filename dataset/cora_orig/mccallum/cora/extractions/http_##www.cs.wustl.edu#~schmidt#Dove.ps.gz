URL: http://www.cs.wustl.edu/~schmidt/Dove.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/new.html
Root-URL: http://www.cs.wustl.edu
Email: mlkirche@rupert.informatik.uni-stuttgart.de, schmidt@cs.wustl.edu  
Title: DOVE: A Distributed Object Visualization Environment Applying CORBA, Java Beans, and C++ to Monitor and
Author: Michael Kircher and Douglas C. Schmidt 
Address: St. Louis, MO 63130, (314) 935-4215  
Affiliation: Department of Computer Science Washington University  
Abstract: This paper appeared in the March 1999 C++ Report. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> BMC. </editor> <address> http://www.bmc.com. BMC, </address> <year> 1998. </year>
Reference-contexts: DOVE itself is a framework, which provides an integrated set of components that defines a reusable architecture for a family of related monitoring and visualization applications. Conventional monitoring and visualization tools, such as BMC Patrol <ref> [1] </ref> or IBM NetView, have generally evolved without explicit concern for software qualities like modularity, reuse, or flexibility. Therefore, it's hard for these legacy tools to adapt rapidly to changing application requirements and endsystem/network environments.
Reference: [2] <author> David Flanagan. </author> <title> JAVA in a Nutshell 2nd ed. </title> <address> O'Reilly, </address> <year> 1997. </year>
Reference-contexts: The DOVE-enabled Browser is implemented using Java <ref> [2] </ref>, which supports the use of Java Beans. Our scalability problems were alleviated by implementing the DOVE Agent with the CORBA Events Service, as discussed in Section 3.3.
Reference: [3] <author> Dan Frantz, Michi Henning, Michael Neville, Tod MacFadden, Jeff Mischkinski, and Martin Chapman. ftp://ftp.omg.org/pub/docs/orbos/98-10-11.pdf. OMG, </author> <year> 1998. </year>
Reference-contexts: If the Naming Service IOR is received, the client ORB converts it into an object reference using the standard CORBA string to object operation. 1 The OMG has recently standardized a Interoperable Naming Service specification <ref> [3] </ref>. However, at the time this paper was written no ORBs implement this specification.
Reference: [4] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Moreover the Visualization Components were not dynamically loadable, so the set of Visualization Component could not be enhanced at run-time. 3.4.3 Solution We used the Observer pattern <ref> [4] </ref> to provide a generic mechanism for registering and accessing Visualization Components. This pattern decouples the metrics and the Visualization Components, making it possible to connect a metric with any Visualization Component. It also allows several different Visualization Components to be connected to the same metric. <p> Therefore, we used the Visitor pattern <ref> [4] </ref> to traverse these trees. All Visitors inherit from NodeVisitor. which provides the basic functionality to traverse a tree. The visitor method PrintVisitor accepts a file name and a tree as input. <p> In particular, applying the patterns to DOVE made the software easier to understand and maintain compared with earlier systems we developed that weren't explicitly designed using patterns. Some of the key design patterns we used in DOVE are Observer, Factory, and Visitor <ref> [4] </ref>. * Using an interface definition language like CORBA IDL simplifies the development of heterogeneous components written in different programming languages.
Reference: [5] <author> Timothy H. Harrison, David L. Levine, and Douglas C. Schmidt. </author> <title> The Design and Performance of a Real-time CORBA Event Service. </title> <booktitle> In Proceedings of OOPSLA '97, </booktitle> <address> Atlanta, GA, </address> <month> October </month> <year> 1997. </year> <note> ACM. </note>
Reference-contexts: tasks: * Service advertisement The DOVE Agent advertises the monitored applications, locations, metrics and control services available. * Change notifications A DOVE-enabled Browser can automatically be updated when monitored metrics change values. * Data reduction and correlation Filtering and correlation are supported in DOVE Agents via the CORBA Events Service <ref> [5] </ref>. * Visualization configuration Visualization Components can be integrated dynamically by specifying the name of a Java Beans repository. <p> Moreover, this prototype hard-codes the schema information directly into the applications, which makes it hard to change the communication protocols without changing the DOVE components. 3.3.3 Solution Use the CORBA Events Service <ref> [5] </ref> as the communication mechanism to multicast events from event suppliers to registered event consumers through an Event Channel. The DOVE Agent is then implemented as an Event Channel.
Reference: [6] <author> Prashant Jain and Douglas C. Schmidt. </author> <title> Service Con-figurator: A Pattern for Dynamic Configuration of Services. </title> <booktitle> In Proceedings of the 3 rd Conference on Object-Oriented Technologies and Systems. USENIX, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: DOVE's configuration process supports highly dynamic applications via the Service Configurator pattern <ref> [6] </ref>. It is not necessary, therefore, to recompile, relink, or restart applications in order to change their monitoring configurations. DOVE MIB: A DOVE MIB is a repository of information in DOVE. It stores configuration information, such as the identify of advertised services, about monitored applications.
Reference: [7] <author> Prashant Jain, Seth Widoff, and Douglas C. Schmidt. </author> <title> The Design and Performance of MedJava A Distributed Electronic Medical Imaging System Developed with Java Applets and Web Tools. </title> <booktitle> In Proceedings of the 4 rd Conference on Object-Oriented Technologies and Systems. USENIX, </booktitle> <month> April </month> <year> 1998. </year>
Reference-contexts: For example, developers may want to send special messages to the Visualization Component when the application sets a flag in the DOVE MIB. DOVE Components in more detail, using a system developed to monitor distributed electronic medical imaging systems <ref> [7] </ref>. In this figure, an Image Server publishes the outgoing number of megabytes and updates the value every time a client finishes downloading an image.
Reference: [8] <author> Harald Mueller. </author> <title> Patterns for Handling Exception Handling Successfully. C++ Report, </title> <type> 8(1), </type> <month> January </month> <year> 1996. </year>
Reference-contexts: VisiBroker for Java is not as good as highly-optimized real-time C++ ORBs like TAO, they are sufficient to support the connection of Java user interfaces to distributed applications and components. * When used properly, exception handling shortens component debugging and testing time considerably since it's not possible to ignore errors <ref> [8] </ref>. Points of failure can quickly be tracked down to the source. * Memory management is highly problematic in C++ applications. Therefore, it's essential to use memory man agement tools, such as Purify and Bounds Checker.
Reference: [9] <author> OMG. </author> <title> CORBA services: Common Object Services Specification. </title> <type> OMG, </type> <year> 1997. </year>
Reference-contexts: The stored information must be saved in a human readable way. The following are several alternative ways to build a DOVE MIB: Have a MIB connected directly to the Events Service: The Events Service could implement the persistence storage of events in itself. The CORBA Object Services specification <ref> [9] </ref> states that an Event Channel can store events for a specified time, passing it along to any consumer who registers with the channel during that period of time (e.g., it may keep event notifications about changes to engineering specifications for a week).
Reference: [10] <author> Douglas C. Schmidt. </author> <title> The Reactor: An Object-Oriented Interface for Event-Driven UNIX I/O Multiplexing (Part 1 of 2). C++ Report, </title> <type> 5(2), </type> <month> February </month> <year> 1993. </year>
Reference-contexts: DOVE's main components, i.e., the DOVE Browser, DOVE Agent, and DOVE MIB; and Section 4 presents concluding remarks. 2 Overview of DOVE 2.1 Example Application of DOVE It is hard to monitor distributed or embedded systems since application components in these systems are often not connected directly to user interfaces <ref> [10] </ref>. Moreover, many real-time applications lack spare computing cycles in which to process status or performance information and provide feedback to users or administrators.
Reference: [11] <author> Douglas C. Schmidt. </author> <title> ACE: an Object-Oriented Framework for Developing Distributed Applications. </title> <booktitle> In Proceedings of the 6 th USENIX C++ Technical Conference, </booktitle> <address> Cambridge, Massachusetts, </address> <month> April </month> <year> 1994. </year> <institution> USENIX Association. </institution>
Reference-contexts: Finally, it plots the next point on the graph. 2.3 The DOVE Middleware Infrastructure To increase our productivity and to leverage existing development effort, DOVE is based on the ACE framework <ref> [11] </ref>, the TAO real-time CORBA ORB [13], and Java Beans [14]. Each middleware infrastructure component is summarized below. Overview of ACE and TAO: The ADAPTIVE Communication Environment (ACE) is an OO framework developed by the Distributed Object Computing (DOC) group at Washing-ton University [12].
Reference: [12] <author> Douglas C. Schmidt. </author> <title> The ADAPTIVE Communicaton Environment. DOC group, </title> <address> Washington University, </address> <year> 1994. </year>
Reference-contexts: Each middleware infrastructure component is summarized below. Overview of ACE and TAO: The ADAPTIVE Communication Environment (ACE) is an OO framework developed by the Distributed Object Computing (DOC) group at Washing-ton University <ref> [12] </ref>. The ACE framework implements fundamental design patterns for communication software. ACE is targeted for developers of high-performance communication services and applications on UNIX and Win32 platforms. ACE simplifies the development of OO network applications and services that utilize interprocess communication, event de-multiplexing, explicit dynamic linking, and concurrency.
Reference: [13] <author> Douglas C. Schmidt, David L. Levine, and Sumedh Mungee. </author> <title> The Design and Performance of Real-Time Object Request Brokers. </title> <journal> Computer Communications, </journal> <volume> 21(4):294324, </volume> <month> April </month> <year> 1998. </year>
Reference-contexts: Finally, it plots the next point on the graph. 2.3 The DOVE Middleware Infrastructure To increase our productivity and to leverage existing development effort, DOVE is based on the ACE framework [11], the TAO real-time CORBA ORB <ref> [13] </ref>, and Java Beans [14]. Each middleware infrastructure component is summarized below. Overview of ACE and TAO: The ADAPTIVE Communication Environment (ACE) is an OO framework developed by the Distributed Object Computing (DOC) group at Washing-ton University [12]. The ACE framework implements fundamental design patterns for communication software. <p> ACE automates system configuration and reconfiguration by dynamically linking services into applications at run-time and executing these services in one or more processes or threads. The ACE ORB (TAO) is an ORB endsystem architecture for high-performance, real-time CORBA <ref> [13] </ref>. TAO implements the CORBA 2.x standard and addresses performance limitations with conventional ORBs. Like ACE, TAO was developed by the DOC group at Washington University. Both ACE and TAO are freely available using an open source development model.
Reference: [14] <author> Sun. </author> <title> http://java.sun.com/beans/spec.html. Sun Mi-crosystems, </title> <publisher> Inc, </publisher> <year> 1997. </year>
Reference-contexts: Finally, it plots the next point on the graph. 2.3 The DOVE Middleware Infrastructure To increase our productivity and to leverage existing development effort, DOVE is based on the ACE framework [11], the TAO real-time CORBA ORB [13], and Java Beans <ref> [14] </ref>. Each middleware infrastructure component is summarized below. Overview of ACE and TAO: The ADAPTIVE Communication Environment (ACE) is an OO framework developed by the Distributed Object Computing (DOC) group at Washing-ton University [12]. The ACE framework implements fundamental design patterns for communication software. <p> In general, Java Beans are Java classes that conform to certain standards. Inheritance from a special base class is not needed to create a Java Bean, though developers must conform to certain design guidelines <ref> [14] </ref>. For instance, method names should conform to a naming convention so that reuse and configuration are facilitated.
Reference: [15] <author> Sun. </author> <title> http://www.javasoft.com:81/products/jini/index.html. Sun Microsystems, </title> <publisher> Inc, </publisher> <year> 1998. </year>
Reference-contexts: These metrics are derived from information advertised by the Agent. The following tasks are perform by DOVE-enabled Browsers: * Service discovery The Browser uses Agents to discover which server applications in a distributed system are offering DOVE services. This discovery process is similar to JavaSoft's Jini framework <ref> [15] </ref>. * Visualization builder This builder allows end-users to bind graphical or data gathering components to data published by DOVE-enabled Applications. The Browser then packages the resulting tool in its own applet or application. Likewise, the Browser can save this tool to a file for later use.
Reference: [16] <author> Steve Vinoski. </author> <title> CORBA: Integrating Diverse Applications Within Distributed Heterogeneous Environments. </title> <journal> IEEE Communications Magazine, </journal> <volume> 14(2), </volume> <month> February </month> <year> 1997. </year>
Reference-contexts: 1 Introduction Large-scale distributed systems typically contain many heterogeneous components <ref> [16] </ref>. To manage these types of systems, applications and administrators must be able to monitor the status and proper functioning of system resources. This paper describes the design and use of a distributed object visualization environment (DOVE) that supports monitoring and visualization of applications and services in heterogeneous distributed systems.
Reference: [17] <author> Visigenic. </author> <title> VisiBroker for JAVA 3.1 documentation. </title> <address> Visi-genic, </address> <year> 1998. </year>
Reference-contexts: the first prototype was not extensible since it used exposed the details of the data types used to communicate between the various DOVE components. 3.1.3 Solution We introduced CORBA IDL definitions for DOVE component interfaces and replaced the socket connection between the Application Proxy and the DOVE-enabled Browser by CORBA <ref> [18, 17] </ref> calls using the newly defined CORBA interfaces. The DOVE-enabled Browser is implemented using Java [2], which supports the use of Java Beans. Our scalability problems were alleviated by implementing the DOVE Agent with the CORBA Events Service, as discussed in Section 3.3.
Reference: [18] <author> Andreas Vogel and Keith Duddy. </author> <title> Java Programming with CORBA. </title> <publisher> Wiley & Sons, </publisher> <year> 1997. </year> <month> 11 </month>
Reference-contexts: the first prototype was not extensible since it used exposed the details of the data types used to communicate between the various DOVE components. 3.1.3 Solution We introduced CORBA IDL definitions for DOVE component interfaces and replaced the socket connection between the Application Proxy and the DOVE-enabled Browser by CORBA <ref> [18, 17] </ref> calls using the newly defined CORBA interfaces. The DOVE-enabled Browser is implemented using Java [2], which supports the use of Java Beans. Our scalability problems were alleviated by implementing the DOVE Agent with the CORBA Events Service, as discussed in Section 3.3.
References-found: 18

