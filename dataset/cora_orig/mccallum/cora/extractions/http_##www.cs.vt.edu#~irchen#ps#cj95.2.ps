URL: http://www.cs.vt.edu/~irchen/ps/cj95.2.ps
Refering-URL: http://www.cs.vt.edu/~irchen/
Root-URL: http://www.cs.vt.edu
Title: On Applying Imprecise Computation to Real-Time AI Systems  
Author: Ing-Ray Chen 
Abstract: Imprecise computation is known as a technique for real-time systems where precise outputs are traded off for timely responses to system events. This paper discusses how the technique can be applied to a class of real-time AI systems designed for solving combinatorial problems and proposes an evaluation method for assessing if imprecise computation can satisfy both the timing and functional requirements of these systems. Index Terms | Artificial Intelligence programs, imprecise computation, real-time AI, accept ability criteria.
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> 10th IEEE Conference on AI for applications, </institution> <address> San Antonio, </address> <month> March, </month> <year> 1994. </year> <booktitle> [2] 2nd International Conference on AI Planning Systems, </booktitle> <address> Chicago, </address> <month> June </month> <year> 1994. </year> <booktitle> [3] 3rd IFAC International Workshop on AI in Real Time Control, </booktitle> <month> Sep. </month> <year> 1991, </year> <institution> Sonoma Valley, Calif., USA. </institution>
Reference-contexts: The incorporation of Artificial Intelligence (AI) techniques into real-time control systems has emerged to become a state-of-the-art demand in recent years as evidenced from numerous conferences, workshops and articles <ref> [1, 2, 3, 19, 26] </ref> held or published each year to discuss the subject. One central theme of the discussion is how to make such AI systems real-time, that is, how to ensure that the functional and timing requirements of such systems are satisfied.
Reference: [4] <author> M. Boddy and T. Dean, </author> <title> "Solving time-dependent planning problems," </title> <booktitle> 11th International Joint Conf. on AI, </booktitle> <year> 1989, </year> <pages> pp. 979-984. </pages>
Reference-contexts: One approach is to look at parallel architecture [8, 12, 16] for better performance with real-time applications in mind in the hope that the timing requirement may be better satisfied. Another approach is to devise time-constrained search algorithms <ref> [4, 7, 11, 14] </ref> coupled with knowledge-constrained search space [20, 24] so as to commit to actions based on limited information and computation in limited time, e.g., the result produced thus far when time expires is the one to be used since it represents the best bet. <p> In this paper, we exclude this possibility (such that there is no deadline-violation failures) by considering a class of real-time AI systems for solving combinatorial problems for which there always exist any-time or time-constrained solutions <ref> [4] </ref> so that a solution, no matter how imperfect it can be, can always be found when time expires. <p> For this latter class of real-time applications, the lowest version can be implemented by using any-time algorithms <ref> [4] </ref> to guarantee that the timing requirement is satisfied. 3 Assessment Metric and Methodology In order for the system designer to have a concrete idea on whether the functional requirement has been compromised due to the deployment of imprecise computation, we propose the notion of acceptability criteria which precisely define the <p> It considers the whole search space as it looks for the optimal route. The second version, on the other hand, uses a suboptimal search algorithm called RT A fl [14] coupled with an any-time algorithm <ref> [4] </ref>. Under the second version, the missile moves toward the target in increment of horizontal distance window (e.g., 50 kilometers) nearer to the target one at a time such that within each distance window the probability of being shot down is the minimum.
Reference: [5] <author> I.R. Chen, F.B. Bastani and T. Tsao, </author> <title> "On the reliability of AI planning software in real-time applications," </title> <journal> IEEE Trans. Knowledge and Data Eng., </journal> <month> Feb. </month> <year> 1995, </year> <pages> pp. 4-13. </pages>
Reference-contexts: response time distributions and W 1 ; W 2 ; : : : ; W n (in mono 4 tonically decreasing order) be the worst-case computation times which are obtained by testing each version with the anticipated operational profile which the system is expected to encounter during its operational phase <ref> [5, 17] </ref>. In responding to a problem solving request with a deadline of t R , the system adopts the following policy to ensure that the timing requirement is satisfied while it tries to meet the functional requirement as much as possible. <p> In our earlier work, this quality function metric was defined as the probability that the AI system can satisfy both its timing and functional requirements as a function of the number of problem requests (or missions) which the system may encounter during its life time <ref> [5] </ref>. Of course, for continuous, reactive systems, the number of problem requests which the system may encounter during its life time is infinity.
Reference: [6] <author> I.R. Chen and T. Tsao, </author> <title> "A reliability model for real-time expert systems," </title> <journal> IEEE Trans. Reliability, </journal> <month> March, </month> <year> 1995, </year> <month> pp.54-62. </month>
Reference-contexts: For rule-based production systems <ref> [6, 12] </ref> different versions can be implemented based on imprecise computation by restricting the knowledge or information used by the AI software in searching for a solution.
Reference: [7] <author> L.C. Chu and B.W. Wah, </author> <title> "Solution of constrained optimization problems in limited time," IEEE Workshop on Imprecise and Approximate Computation, </title> <booktitle> 1992, </booktitle> <pages> pp. 40-44. </pages>
Reference-contexts: One approach is to look at parallel architecture [8, 12, 16] for better performance with real-time applications in mind in the hope that the timing requirement may be better satisfied. Another approach is to devise time-constrained search algorithms <ref> [4, 7, 11, 14] </ref> coupled with knowledge-constrained search space [20, 24] so as to commit to actions based on limited information and computation in limited time, e.g., the result produced thus far when time expires is the one to be used since it represents the best bet. <p> possible ways of implementing multiple versions of the AI system software to achieve such guarantee. 2.2 Possible Ways of Implementing Real-Time AI Systems Based on Imprecise Computation For combinatorial AI search problems, existing any-time and time-constrained algorithms (e.g., RT A fl [14], DY N ORAII [11] and T CA fl <ref> [7] </ref>) can be used to implement lower versions while optimal algorithms (e.g., A fl [21] and IDA fl [13]) can be used to implement higher versions.
Reference: [8] <author> A. Gupta, </author> <title> Parallelism in Production Systems, </title> <publisher> Los Altos, Morgan Kaufman, </publisher> <year> 1987. </year>
Reference-contexts: Current research directions toward making AI systems real-time are conducted on an ad-hoc basis and basically adopt one of the following two approaches. One approach is to look at parallel architecture <ref> [8, 12, 16] </ref> for better performance with real-time applications in mind in the hope that the timing requirement may be better satisfied.
Reference: [9] <author> J. J. Grimm, G.B. Lamont, and A.J. Terzuoli, </author> <title> "A parallelized search strategy for solving a multicriteria aircraft routing problem," </title> <booktitle> Proc. 1993 ACM/SIGAPP Symposium on Applied Computing, </booktitle> <address> Indianapolis, </address> <year> 1993, </year> <pages> pp. 570-577. </pages>
Reference-contexts: Such systems include flying route-finding systems for which a direct flying route between the source and destination can be considered as an any-time solution <ref> [9] </ref>, missile systems for which not considering radar threats can lead to a quick solution, and medical monitoring and caring units for which immediate imperfect treatment plans are available [19]. <p> Consider a real-time AI planning subsystem embedded within an intelligent missile launching system that launches missiles against anti-missile threats <ref> [9] </ref>. The aim of the mission for each missile launched is to hit the target without being shot down. From the view of the missile, the sky (from some particular altitude looking down) is a two-dimensional x-y map with certain locations marked with anti-missile threats and associated intensities.
Reference: [10] <author> P.N. Haley, </author> <title> "Real-time for RETE," </title> <booktitle> 3rd Workshop on Robotics and Expert Systems, </booktitle> <year> 1987. </year>
Reference-contexts: For the match algorithm, lower versions can have more restricted way of performing the match, including limiting the number of matches for a join operation and/or the number of instances of a pattern or a relation embodied in the l.h.s. condition elements of rules (as suggested in <ref> [10] </ref>). For the select algorithms, higher versions can use optimal algorithms such as A fl and lower versions can use time-constrained algorithms such as RT A fl [14] or DY N ORAII [11] to speed up execution.
Reference: [11] <author> B. Hamidzadeh, and S. Shekhar, </author> <title> "Specification and analysis of real-time problem solvers," </title> <journal> IEEE Trans. Soft. Eng., </journal> <month> August </month> <year> 1993, </year> <pages> pp. 788-803. </pages>
Reference-contexts: One approach is to look at parallel architecture [8, 12, 16] for better performance with real-time applications in mind in the hope that the timing requirement may be better satisfied. Another approach is to devise time-constrained search algorithms <ref> [4, 7, 11, 14] </ref> coupled with knowledge-constrained search space [20, 24] so as to commit to actions based on limited information and computation in limited time, e.g., the result produced thus far when time expires is the one to be used since it represents the best bet. <p> Below we describe possible ways of implementing multiple versions of the AI system software to achieve such guarantee. 2.2 Possible Ways of Implementing Real-Time AI Systems Based on Imprecise Computation For combinatorial AI search problems, existing any-time and time-constrained algorithms (e.g., RT A fl [14], DY N ORAII <ref> [11] </ref> and T CA fl [7]) can be used to implement lower versions while optimal algorithms (e.g., A fl [21] and IDA fl [13]) can be used to implement higher versions. <p> For the select algorithms, higher versions can use optimal algorithms such as A fl and lower versions can use time-constrained algorithms such as RT A fl [14] or DY N ORAII <ref> [11] </ref> to speed up execution. For the firing phase, parallel rule-firing [12] can also be considered for implementing lower versions, while sequential rule-firing can be used for implementing higher versions. There are some important points that should be mentioned.
Reference: [12] <author> T. Ishida, </author> <title> "An optimization algorithm for production systems," </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <month> Aug. </month> <year> 1994, </year> <pages> pp. 549-558. 17 </pages>
Reference-contexts: Current research directions toward making AI systems real-time are conducted on an ad-hoc basis and basically adopt one of the following two approaches. One approach is to look at parallel architecture <ref> [8, 12, 16] </ref> for better performance with real-time applications in mind in the hope that the timing requirement may be better satisfied. <p> For rule-based production systems <ref> [6, 12] </ref> different versions can be implemented based on imprecise computation by restricting the knowledge or information used by the AI software in searching for a solution. <p> For the select algorithms, higher versions can use optimal algorithms such as A fl and lower versions can use time-constrained algorithms such as RT A fl [14] or DY N ORAII [11] to speed up execution. For the firing phase, parallel rule-firing <ref> [12] </ref> can also be considered for implementing lower versions, while sequential rule-firing can be used for implementing higher versions. There are some important points that should be mentioned.
Reference: [13] <author> R.E. Korf, </author> <title> "Depth-first iterative deepening: an optimal admissible tree search," </title> <journal> Artificial Intelligence, </journal> <volume> Vol. 27, </volume> <year> 1985, </year> <pages> pp. 97-109. </pages>
Reference-contexts: of Implementing Real-Time AI Systems Based on Imprecise Computation For combinatorial AI search problems, existing any-time and time-constrained algorithms (e.g., RT A fl [14], DY N ORAII [11] and T CA fl [7]) can be used to implement lower versions while optimal algorithms (e.g., A fl [21] and IDA fl <ref> [13] </ref>) can be used to implement higher versions. For rule-based production systems [6, 12] different versions can be implemented based on imprecise computation by restricting the knowledge or information used by the AI software in searching for a solution.
Reference: [14] <author> R.E. Korf, </author> <title> "Real-time heuristic search," </title> <journal> Artificial Intelligence Journal, </journal> <volume> Vol. 42, </volume> <year> 1990, </year> <pages> pp. 189-211. </pages>
Reference-contexts: One approach is to look at parallel architecture [8, 12, 16] for better performance with real-time applications in mind in the hope that the timing requirement may be better satisfied. Another approach is to devise time-constrained search algorithms <ref> [4, 7, 11, 14] </ref> coupled with knowledge-constrained search space [20, 24] so as to commit to actions based on limited information and computation in limited time, e.g., the result produced thus far when time expires is the one to be used since it represents the best bet. <p> Below we describe possible ways of implementing multiple versions of the AI system software to achieve such guarantee. 2.2 Possible Ways of Implementing Real-Time AI Systems Based on Imprecise Computation For combinatorial AI search problems, existing any-time and time-constrained algorithms (e.g., RT A fl <ref> [14] </ref>, DY N ORAII [11] and T CA fl [7]) can be used to implement lower versions while optimal algorithms (e.g., A fl [21] and IDA fl [13]) can be used to implement higher versions. <p> For the select algorithms, higher versions can use optimal algorithms such as A fl and lower versions can use time-constrained algorithms such as RT A fl <ref> [14] </ref> or DY N ORAII [11] to speed up execution. For the firing phase, parallel rule-firing [12] can also be considered for implementing lower versions, while sequential rule-firing can be used for implementing higher versions. There are some important points that should be mentioned. <p> It considers the whole search space as it looks for the optimal route. The second version, on the other hand, uses a suboptimal search algorithm called RT A fl <ref> [14] </ref> coupled with an any-time algorithm [4]. Under the second version, the missile moves toward the target in increment of horizontal distance window (e.g., 50 kilometers) nearer to the target one at a time such that within each distance window the probability of being shot down is the minimum.
Reference: [15] <author> J. Liu, K.J. Lin, W.K. Shih, and A.C. Yu, </author> <title> "Algorithms for scheduling imprecise computation," </title> <booktitle> IEEE Computer, </booktitle> <month> May </month> <year> 1991, </year> <pages> pp. 58-68. </pages>
Reference-contexts: More specifically, we investigate whether the imprecise computation method <ref> [15, 23] </ref> can be applied as a specific technique for developing real-time AI systems. Under the principle of imprecise computation, more than one version of the AI system software for the same system task are developed.
Reference: [16] <author> D.P Miranker, and B.J. Lofaso, </author> <title> "The organization and performance of a TREAT-based production system compiler," </title> <journal> IEEE Trans. Knowledge and Data Eng., </journal> <volume> Vol. 3, No. 1, </volume> <month> March </month> <year> 1991, </year> <pages> pp. 3-10. </pages>
Reference-contexts: Current research directions toward making AI systems real-time are conducted on an ad-hoc basis and basically adopt one of the following two approaches. One approach is to look at parallel architecture <ref> [8, 12, 16] </ref> for better performance with real-time applications in mind in the hope that the timing requirement may be better satisfied.
Reference: [17] <author> J.D. Musa, A. Iannino, and K. Okumoto, </author> <title> Software Reliability: Measurement, Prediction, Application, </title> <publisher> McGraw-Hill, </publisher> <year> 1987. </year>
Reference-contexts: response time distributions and W 1 ; W 2 ; : : : ; W n (in mono 4 tonically decreasing order) be the worst-case computation times which are obtained by testing each version with the anticipated operational profile which the system is expected to encounter during its operational phase <ref> [5, 17] </ref>. In responding to a problem solving request with a deadline of t R , the system adopts the following policy to ensure that the timing requirement is satisfied while it tries to meet the functional requirement as much as possible. <p> These testing data may be obtained during the testing and debugging phase through testing the AI system incorporating imprecise computation with its anticipated problem-solving request profile. The maximum likelihood estimates (MLEs) <ref> [17] </ref> of G (:) and can be derived as follows.
Reference: [18] <author> J.D. Musa, </author> <title> "Operational profiles in software reliability engineering," </title> <journal> IEEE Software, </journal> <month> March </month> <year> 1993, </year> <pages> pp. 14-32. </pages>
Reference-contexts: Under the evaluation methodology, the system developed is tested based on its operational profile <ref> [18] </ref>, from which testing results are collected so as to parameterize (i.e., give parameter values to) a quality function equation (such as Equation 1 derived based on the Strict acceptability criterion) to measure the quality function of the system.
Reference: [19] <editor> D.J. Musliner, et al., </editor> <booktitle> "The challenges of real-time AI," IEEE Computer, </booktitle> <month> Jan. </month> <year> 1995, </year> <pages> pp. 58-66. </pages>
Reference-contexts: The incorporation of Artificial Intelligence (AI) techniques into real-time control systems has emerged to become a state-of-the-art demand in recent years as evidenced from numerous conferences, workshops and articles <ref> [1, 2, 3, 19, 26] </ref> held or published each year to discuss the subject. One central theme of the discussion is how to make such AI systems real-time, that is, how to ensure that the functional and timing requirements of such systems are satisfied. <p> Unfortunately, current design, analysis and verification techniques for integrating AI techniques into control systems have not kept pace little work has been done in designing and verifying the functional and timing requirements of such systems <ref> [19, 25] </ref>. Current research directions toward making AI systems real-time are conducted on an ad-hoc basis and basically adopt one of the following two approaches. <p> flying route-finding systems for which a direct flying route between the source and destination can be considered as an any-time solution [9], missile systems for which not considering radar threats can lead to a quick solution, and medical monitoring and caring units for which immediate imperfect treatment plans are available <ref> [19] </ref>. In these systems, lowest versions conceptually correspond to the mandatory component whose execution time must be bounded and thus can be guaranteed off-line, while higher versions correspond to optional components which are to be selectively executed at run-time to refine the solution according to how much computation time remains.
Reference: [20] <author> C.J. Paul, A. Acharya, B. Black, and J.K. Strosnider, </author> <title> "Reducing problem-solving variance to improve predictability," </title> <journal> Communications of the ACM, </journal> <month> August </month> <year> 1991, </year> <pages> pp. 80-93. </pages>
Reference-contexts: One approach is to look at parallel architecture [8, 12, 16] for better performance with real-time applications in mind in the hope that the timing requirement may be better satisfied. Another approach is to devise time-constrained search algorithms [4, 7, 11, 14] coupled with knowledge-constrained search space <ref> [20, 24] </ref> so as to commit to actions based on limited information and computation in limited time, e.g., the result produced thus far when time expires is the one to be used since it represents the best bet. <p> These approaches reduce the matching time performed by the underlying matching algorithm during the match phase because the rule-base is simplier, smaller and less powerful <ref> [20, 24] </ref>. Consequently, less time is needed to find a solution. The second way to implement imprecise computation is to keep the rule-base the same, but use multiple versions of the algorithms used in the match, select, and/or act phases in order to reduce the planning time.
Reference: [21] <author> J. Pearl, </author> <title> Heuristics: Intelligent Search Strategies for Computer Problem Solving, </title> <publisher> Addison-Wesley, </publisher> <year> 1984. </year>
Reference-contexts: guarantee. 2.2 Possible Ways of Implementing Real-Time AI Systems Based on Imprecise Computation For combinatorial AI search problems, existing any-time and time-constrained algorithms (e.g., RT A fl [14], DY N ORAII [11] and T CA fl [7]) can be used to implement lower versions while optimal algorithms (e.g., A fl <ref> [21] </ref> and IDA fl [13]) can be used to implement higher versions. For rule-based production systems [6, 12] different versions can be implemented based on imprecise computation by restricting the knowledge or information used by the AI software in searching for a solution. <p> We consider the case that the AI program is implemented with two versions based on imprecise computation. Both versions must consider the physical constraints of the missile dynamics, e.g., no backward, and sudden vertical movements, etc. The first version uses an optimal search algorithm called A fl <ref> [21] </ref> which, when given sufficient time, can always find the best flying route among all in terms of the smallest probability of being shot down. It considers the whole search space as it looks for the optimal route.
Reference: [22] <author> B. Randell, </author> <title> "System structure for software fault tolerance," </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> Vol. 1, No. 1, </volume> <month> June </month> <year> 1975, </year> <pages> pp. 220-232. </pages>
Reference-contexts: Thus, the versions are ordered according to the efficiency with which they are able to produce solutions. This structure is similar in concept to that of recovery block in software fault tolerance <ref> [22] </ref>.
Reference: [23] <author> W.L. Shin and Jane W.S. Liu, </author> <title> "Algorithms for scheduling imprecise computations with timing constraints to minimize maximum error," </title> <journal> IEEE Trans. Computers,, </journal> <volume> Vol. 44, No. 3, </volume> <month> March </month> <year> 1995, </year> <pages> pp. 466-471. </pages>
Reference-contexts: More specifically, we investigate whether the imprecise computation method <ref> [15, 23] </ref> can be applied as a specific technique for developing real-time AI systems. Under the principle of imprecise computation, more than one version of the AI system software for the same system task are developed.
Reference: [24] <author> J.K. Strosnider and C.J. Paul, </author> <title> "A structured view of real-time problem solving," </title> <journal> AI Magazine, </journal> <month> Summer </month> <year> 1994, </year> <pages> pp. 45-66. </pages>
Reference-contexts: One approach is to look at parallel architecture [8, 12, 16] for better performance with real-time applications in mind in the hope that the timing requirement may be better satisfied. Another approach is to devise time-constrained search algorithms [4, 7, 11, 14] coupled with knowledge-constrained search space <ref> [20, 24] </ref> so as to commit to actions based on limited information and computation in limited time, e.g., the result produced thus far when time expires is the one to be used since it represents the best bet. <p> These approaches reduce the matching time performed by the underlying matching algorithm during the match phase because the rule-base is simplier, smaller and less powerful <ref> [20, 24] </ref>. Consequently, less time is needed to find a solution. The second way to implement imprecise computation is to keep the rule-base the same, but use multiple versions of the algorithms used in the match, select, and/or act phases in order to reduce the planning time.
Reference: [25] <author> J. A. Stankovic, </author> <title> "Misconceptions about real-time computing: a serious problem for next-generation systems," </title> <journal> Computer, </journal> <volume> Vol. 21, No. 10, </volume> <month> Oct. </month> <year> 1988. </year>
Reference-contexts: Unfortunately, current design, analysis and verification techniques for integrating AI techniques into control systems have not kept pace little work has been done in designing and verifying the functional and timing requirements of such systems <ref> [19, 25] </ref>. Current research directions toward making AI systems real-time are conducted on an ad-hoc basis and basically adopt one of the following two approaches.
Reference: [26] <institution> IEEE Transactions on Knowledge and Data Engineering, </institution> <note> Special issue for Dependability of AI programs, </note> <month> Feb </month> <year> 1995. </year>
Reference-contexts: The incorporation of Artificial Intelligence (AI) techniques into real-time control systems has emerged to become a state-of-the-art demand in recent years as evidenced from numerous conferences, workshops and articles <ref> [1, 2, 3, 19, 26] </ref> held or published each year to discuss the subject. One central theme of the discussion is how to make such AI systems real-time, that is, how to ensure that the functional and timing requirements of such systems are satisfied.
Reference: [27] <author> L.A. Zadeh, </author> <title> "Fuzzy sets and information granularity," Advances in Fuzzy Set Theory and Application, </title> <address> North-Hollard, </address> <year> 1979. </year> <month> 18 </month>
Reference-contexts: This issue is interesting for two reasons: (1) from the timing perspective, the exponential search time behavior exhibited by AI programs makes them highly undesirable for real-time applications, and (2) from the functional perspective, the correctness of the output of AI programs is a fuzzy <ref> [27] </ref> rather than a binary quantity, since results produced by AI techniques may not be categorized as correct or not.
References-found: 25

