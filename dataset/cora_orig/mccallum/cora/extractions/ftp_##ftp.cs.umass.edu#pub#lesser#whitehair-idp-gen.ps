URL: ftp://ftp.cs.umass.edu/pub/lesser/whitehair-idp-gen.ps
Refering-URL: http://dis.cs.umass.edu/research/idp.html
Root-URL: 
Email: Email: whitehair@cs.umass.edu  
Title: IDP: A Formalism for Modeling and Analyzing Complex Interpretation Problem Domains  
Author: Robert C. Whitehair and Victor R. Lesser 
Keyword: control, search, mathematical foundations  
Date: January 5, 1995  
Address: Amherst, MA 01003 413-545-3444(voice) 413-545-1249(fax)  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: This paper presents the IDP formalism for representing and analyzing complex interpretation problem domains. The formalism is being used to analyze the relationship between the performance of search-based interpretation problem solving systems and the inherent properties, or structure, of problem domains in which they are applied. Models built using this formalism can be used for describing, predicting and explaining the behavior of interpretation systems and for generalizing a specific problem solving architecture to other domains. Examples demonstrate how domain phenomena such as noise and missing data are represented, how non-local relationships between subproblems can be modeled, and how quantitative properties of search spaces can be calculated. fl This material is based upon work supported by the National Science Foundation under Grant No. IRI-9321324 and the Office of Naval Research contract N00014-92-J-1450. The content does not necessarily reflect the position or the policy of the Government and no official endorsement should be inferred. This paper has not already been accepted by and is not currently under review for a journal or another conference. Nor will it be submitted for such during IJCAI's review preiod. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Norman Carver and Victor Lesser. </author> <title> The Evolution of Blackboard Control. </title> <journal> Expert Systems with Applications, </journal> <volume> 7(1), </volume> <year> 1991. </year> <note> Special issue on The Blackboard Paradigm and Its Applications. </note>
Reference-contexts: In addition, the IDP formalism supports comparative experiments and analyses involving different problem solvers applied in the same domain and the same problem solver applied to different domains. Consequently, this work represents an initial step needed to formalize complex search processes, such as those associated with blackboard systems <ref> [1] </ref> that are used in sophisticated interpretation systems. The next section demonstrates how the IDP G formalism can represent domain phenomena such as noise and missing data. <p> For example, MARKER (V1,S8) = 0.07. Consequently, ignoring S8 data might be a reasonable strategy in this situation. In general, the marker and differentiator relationships can be used to explain the success of techniques such as approximate processing and incremental planning <ref> [1] </ref>. From a bottom-up perspective, the differentiator relationship can identify the intermediate results that are most appropriate for abstracting and clustering. From a top-down perspective, the marker relationship can help predict the expected characteristics of intermediate results derived from model-driven processing and thus focus processing by filtering out noise.
Reference: [2] <author> Norman Carver and Victor R. Lesser. </author> <title> Planning for the control of an interpretation system. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 23(6), </volume> <year> 1993. </year> <note> Special Issue on Scheduling, Planning, and Control. </note>
Reference-contexts: In interpretation problems, the set I is constructed dynamically. This is in contrast to classification problems where I is preenumerated and the problem solving task involves only the identification of the best element of I <ref> [2] </ref>. For many domains, a distinct I can be specified in a naturally structured way and it is this structure that is exploited by control architectures to reduce the number of elements of I that must be generated or to otherwise increase the efficiency with which I is specified. <p> In this section, we will discuss how the IDP G formalism addresses these issues. The interpretation domain which we will study in detail is a vehicle tracking problem based on acoustic sensor data as defined in our previous work on RESUN <ref> [2] </ref>. The problem solver's input consists of preprocessed sensor data gathered from a single contiguous region. The problem solver then processes the data in an attempt to identify the type of vehicle that generated the signals and the path it traversed 3 through the region. <p> Also, this information could be used in differential diagnosis processing to disambiguate competing hypotheses <ref> [2] </ref>. For example, in certain situations it is possible to use marker information to determine if a hypothesis was erroneously derived from noise. By examining a hypothesis' supporting data, a problem solver can determine if the support from a strong marker is consistent with expectations. <p> Knowledge about differentiators can be used both in the design of problem solving architectures and dynamic control algorithms. Architecturally, differentiators can be used to construct special operators for differential diagnosis <ref> [2] </ref>. In control algorithms, differentiators can be used to focus problem solving activity [3]. In the vehicle tracking grammar, S1, S2, and S3 are strong differentiators for the event V1 (a vehicle location of type 1).
Reference: [3] <author> Lee D. Erman, Frederick Hayes-Roth, Victor R. Lesser, and D. Raj Reddy. </author> <title> The Hearsay-II speech-understanding system: Integrating knowledge to resolve uncertainty. </title> <journal> Computing Surveys, </journal> <volume> 12(2) </volume> <pages> 213-253, </pages> <month> June </month> <year> 1980. </year>
Reference-contexts: feature structures: component (or syntax), 1 Intuitively, interpretation problems are tasks where a stream of input data is analyzed and an explanation is postulated as to what domain events occurred to generate the signal data the problem solver is attempting to interpret the signal data and determine what caused it <ref> [3] </ref>. 2 A domain theory is the computational theory that is the basis for a problem solver's functionality. 1 utility (or credibility) 3 , probability (or distribution), and cost. The different feature structures are represented in terms of a domain grammar and functions associated with production rules of the grammar. <p> For interpretation domains, a modeling formalism must deal effectively with interacting phenomena, noise, missing data, distortion, and masking <ref> [3] </ref>. In this section, we will discuss how the IDP G formalism addresses these issues. The interpretation domain which we will study in detail is a vehicle tracking problem based on acoustic sensor data as defined in our previous work on RESUN [2]. <p> Knowledge about differentiators can be used both in the design of problem solving architectures and dynamic control algorithms. Architecturally, differentiators can be used to construct special operators for differential diagnosis [2]. In control algorithms, differentiators can be used to focus problem solving activity <ref> [3] </ref>. In the vehicle tracking grammar, S1, S2, and S3 are strong differentiators for the event V1 (a vehicle location of type 1).
Reference: [4] <author> King Sun Fu. </author> <title> Syntactic Pattern Recognition and Applications. </title> <publisher> PH, </publisher> <year> 1982. </year>
Reference-contexts: Each syntactic rule of the grammar is associated with a corresponding semantic process which determines the actual meaning of an interpretation. This representation is similar to that used in the Composite Decision Process (CDP) model of Kanal and Kumar [6] and the semantic grammars used by Fu <ref> [4] </ref>. Based on this definition of interpretation, we define the Interpretation Decision Problem (IDP) formalism. The formalism comprises two components, one for modeling the domain phenomena that generate a specific problem instance and one for modeling the structure of an interpretation problem solver.
Reference: [5] <author> Gerald Gazdar, Geoffrey K. Pullum, and Ivan A. Sag. </author> <title> Auxiliaries and related phenomena in a restrictive theory of grammar. </title> <booktitle> Language, </booktitle> <volume> 58(3) </volume> <pages> 591-638, </pages> <year> 1982. </year>
Reference-contexts: Semantics associated with each production rule determine the actual domain interpretation. The semantic functions will typically make use of grammar element attributes that are not used by syntactic functions. These attributes are represented using the feature list convention described by Gazdar, et al. <ref> [5] </ref>.
Reference: [6] <editor> Vipin Kumar and Laveen N. Kanal. </editor> <title> The CDP: A unifying formulation for heuristic search, dynamic programming, and branch-and-bound. </title> <editor> In L. Kanal and V. Kumar, editors, </editor> <booktitle> Search in Artificial Intelligence, Symbolic computation, chapter 1, </booktitle> <pages> pages 1-27. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: Each syntactic rule of the grammar is associated with a corresponding semantic process which determines the actual meaning of an interpretation. This representation is similar to that used in the Composite Decision Process (CDP) model of Kanal and Kumar <ref> [6] </ref> and the semantic grammars used by Fu [4]. Based on this definition of interpretation, we define the Interpretation Decision Problem (IDP) formalism.
Reference: [7] <author> Robert C. Whitehair and Victor R. Lesser. </author> <title> A Framework for the Analysis of Sophisticated Control in Interpretation Systems. </title> <type> Technical Report 93-53, </type> <institution> Department of Computer and Information Science, University of Massachusetts, </institution> <address> Amherst, Massachusetts 01003, </address> <year> 1993. </year> <month> 14 </month>
Reference-contexts: The generational component of the IDP formalism will be referred to as IDP G and the interpretation component will be referred to as IDP I . The primary focus of this paper will be on IDP G and the details of IDP I are left to <ref> [7] </ref>. <p> This is represented g A (g C ; g D ; C ( p (C; D))), where C ( p (i; j; :::)) is the cost of applying the semantic function P . 3 In <ref> [7] </ref>, credibility structures are formally linked to the semantics associated with full and partial interpretations. <p> The uses and advantages of the SNT representation are discussed in <ref> [7] </ref>. 2 The probability structure is defined in terms of the function, . For each p 2 P , (p) represents the distribution of RHSs associated with p. <p> Furthermore, this analysis can also identify patterns and structures that can be used to construct effective problem solving strategies <ref> [7] </ref>. In addition, the IDP formalism supports comparative experiments and analyses involving different problem solvers applied in the same domain and the same problem solver applied to different domains. <p> For example, each particular kind of vehicle track has a maximum velocity and acceleration that cannot be exceeded. Offset represents a displacement from a base position. This is used to generate pattern tracks of multiple vehicles and ghost tracks <ref> [7] </ref>. Figure 1 explicitly shows how feature lists are modified for the different grammar rules. For example, rule 10 indicates that the generation of two track locations from a pattern track location involves adding the offset to the x and y locations of track location T1. <p> All of the group level production rules include examples of sensor shifting. For example, the second RHS of rule 23 shows a shift from S2 to S3. Similar shifting can occur at all levels of the grammar. 2.3 Correlated and Uncorrelated Noise In <ref> [7] </ref>, we identified two kinds of noise, correlated and uncorrelated. Correlated noise leads to the generation of additional high-level interpretations. This ambiguity causes the problem solver to perform additional work to differentiate the possible interpretations. <p> This ambiguity causes the problem solver to perform additional work to differentiate the possible interpretations. Uncorrelated noise may lead to additional work, but it does not lead to the generation of additional interpretations. Often, uncorrelated noise can be identified and eliminated from further processing with low-cost pruning operators <ref> [7] </ref>. The complexity of the example grammar is such that it is difficult to identify all correlated and uncorrelated noise by inspection alone. However, the rules associated with the non-terminal n include examples of both. <p> In <ref> [7] </ref> we present analytical techniques for calculating a variety of different domain properties including expected cost of problem solving, expected frequencies of domain events, expected costs of individual interpretation search paths, the expected cost associated with incorrect search paths, ambiguity relationships, a quantified potential value for meta-operators, and more. <p> Definition 3.5 Ambiguity Given a domain event, A, its interpretation is ambiguous with the interpretation of a second domain event, B, when B subsumes A (the subsume relationship is specified in <ref> [7] </ref>). i.e., A is ambiguous with B when the low-level signal data generated by B can be mistaken for an A. Note that this definition of ambiguity is not reflexive. Thus, A being ambiguous with B does not imply that B is ambiguous with A.
References-found: 7

