URL: http://www.cs.columbia.edu/~kar/pubsk/gluenail.ps
Refering-URL: http://www.cs.columbia.edu/~kar/pubsk/pubsk.html
Root-URL: http://www.cs.columbia.edu
Email: fphipps, mad, karg@cs.stanford.edu  
Title: Glue-Nail: A Deductive Database System  
Author: Geoffrey Phipps Marcia A. Derr Kenneth A. Ross 
Date: March, 1991  
Note: 13th  
Address: Stanford CA 94305  
Affiliation: Department of Computer Science, Stanford University,  
Abstract: Glue is a procedural language for deductive databases. It is designed to complement the purely declarative NAIL! language, firstly by performing system functions impossible to write in NAIL!, and secondly by allowing the procedural specification of algorithms for critical code sections. The two languages together are sufficient to write a complete application. Glue was designed to be as close to NAIL! as possible, hence minimizing the impedance mismatch problem. In this paper we concentrate on Glue. Pseudo-higher order programming is used in both languages, in the style of HiLog [1]. In particular Glue-Nail can handle set valued attributes (non-1NF schemas) in a clean and efficient manner. NAIL! code is compiled into Glue code, simplifying the system design. An experimental implementation has been written, a more efficient version is under design. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Weidong Chen, Michael Kifer, and David S. Warren. HiLog: </author> <title> A First-Order Semantics for Higher-Order Logic Programming Constructs. In Proceed 10 To be honest it could be said that neither language really has a type system. </title> <booktitle> ings 2nd Int Workshop on Database Programming Languages, </booktitle> <year> 1989. </year>
Reference-contexts: These sets of sets then have to be explicitly flattened. The only type of set equality available is set unification, which can be expensive. Glue-Nail borrows the second order syntax scheme of HiLog <ref> [1] </ref>. In this scheme a set valued attribute contains the name of a predicate (i.e. the name of a set), rather than the value (members) of a set. Sets are therefore just normal predicates.
Reference: [2] <author> Danette Chimenti and Ruben Gamboa. </author> <title> The SALAD Cookbook: A User/Programmer's Guide. </title> <type> Technical Report ACT-ST-346-89, </type> <institution> Microelectronics and Computer Technology Corporation, </institution> <year> 1989. </year>
Reference: [3] <author> Katherine Morris, Jeffrey Ullman, and Allen van Gelder. </author> <title> Design Overview of the NAIL! System. </title> <booktitle> In Proceedings 3rd Int Conference on Logic Programming, </booktitle> <pages> pages 554-568, </pages> <address> New York, 1986. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: 1 Introduction The Glue language grew out of our experiences of designing and implementing the first NAIL! system <ref> [3] </ref>, and of using commercial database systems. From a software engineering point of view, declarative logic based languages offer many advantages over traditional relational databases, primarily due to their simplicity and high-level approach (for example, see the introductions of [4] and [10]).
Reference: [4] <author> Shamim Naqvi and Shalom Tsur. </author> <title> A Logical Language for Data and Knowledge Bases. </title> <publisher> Computer Science Press, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: From a software engineering point of view, declarative logic based languages offer many advantages over traditional relational databases, primarily due to their simplicity and high-level approach (for example, see the introductions of <ref> [4] </ref> and [10]). Relational database systems free the programmer from worrying about the physical data representation and access methods. <p> This language is Glue. Embedding a query language in a procedural language is common in databases, for example, embedding SQL in C. Unfortunately we then usually run into the impedance mismatch problem (for an example description, see <ref> [4] </ref>). This is the name for the collection of problems that arise when we interface two dissimilar languages. It has no formal academic definition, but it is a serious problem in real programming systems. <p> It could be said that Aditi has started with the relational engine (the back end), CORAL with the query language (the front end), with Glue holding the middle ground. NAIL! has already covered the front end. 8.1 LDL LDL ([2], <ref> [4] </ref>) does not have a separate procedural language, it can itself perform I/O and EDB updates. As in Glue, update and I/O subgoals are fixed in a rule and cannot be moved. Rules containing updates are not allowed to fail. There is a forever meta-predicate.
Reference: [5] <author> Geoffrey Phipps. </author> <title> Glue A Deductive Database Programming Language. </title> <editor> In Jan Chomicki, editor, </editor> <booktitle> Proceedings of the NACLP'90 Workshop on Deductive Databases. </booktitle> <institution> Kansas State University Technical Report TR-CS-90-14, </institution> <year> 1990. </year>
Reference: [6] <author> Geoffrey Phipps. </author> <title> The Glue Manual, Version 1.0. </title> <type> Technical Report STAN-CS-91-1353, </type> <institution> Department of Computer Science, Stanford University, </institution> <year> 1990. </year>
Reference-contexts: Data Lifetimes: Explicit. Permanent data is stored in the EDB, Glue procedures and NAIL! rules both compute their values from the current state of the EDB. A full description of Glue is available in <ref> [6] </ref>. 12 Acknowledgements The majority of the design of Glue is due to Geoffrey Phipps. Ken Ross provided the basic design of the assignment statement with respect to relations, and its coupling with the repeat loop. The implementation of the parser and compiler was done by Geoffrey Phipps.
Reference: [7] <author> Raghu Ramakrishnan. </author> <title> Magic Templates: A Spellbinding Approach to Logic Programs. </title> <booktitle> In Proceedings Fifth International Conference on Logic Programming, </booktitle> <year> 1988. </year>
Reference-contexts: Module import lists can be bound at run time, allowing a form of meta programming. In Glue-Nail we use the higher-order system of HiLog, there is no separate system for meta-programming. CORAL allows variables in the EDB, partly to allow the use of the Magic Templates query compilation algorithm <ref> [7] </ref>. Hence a database lookup in CORAL requires unification, not just matching. Searching the database for a tuple match is the fundamental operation of any deductive database system. It remains to be seen whether the extra power provided by magic templates justifies the increased cost of a database lookup.
Reference: [8] <author> Raghu Ramakrishnan, Per Bothner, Divesh Srivas-tava, and S. Sudarshan. </author> <title> CORAL A Database Programming Language. </title> <editor> In Jan Chomicki, editor, </editor> <booktitle> Proceedings of the NACLP'90 Workshop on Deductive Databases. </booktitle> <institution> Kansas State University Technical Report TR-CS-90-14, </institution> <year> 1990. </year>
Reference-contexts: Our experience of writing LDL programs is that the procedural parts of the program (updates, and sets to a lesser extent) tend to dominate the programmer's thinking, hence negating the theoretically declarative nature of the language. 8.2 CORAL The query language of CORAL <ref> [8] </ref> is very similar to that of LDL, however it uses the same two language approach as Glue-Nail. CORAL has chosen to use the existing object-oriented language C++ as the procedural language.
Reference: [9] <author> Jayen Vaghani, Kotagiri Ramamohanarao, David B. Kemp, Zoltan Somo-gyi, and Peter J. Stuckey. </author> <title> The Aditi Deductive Database System. </title> <editor> In Jan Chomicki, editor, </editor> <booktitle> Proceedings of the NACLP'90 Workshop on Deductive Databases. </booktitle> <institution> Kansas State University Technical Report TR-CS-90-14, </institution> <year> 1990. </year>
Reference: [10] <author> Carlo Zaniolo. </author> <title> Deductive Databases Theory Meets Practice. </title> <booktitle> In Proceedings 2nd International Conference on Extending Database Technology, </booktitle> <year> 1990. </year>
Reference-contexts: From a software engineering point of view, declarative logic based languages offer many advantages over traditional relational databases, primarily due to their simplicity and high-level approach (for example, see the introductions of [4] and <ref> [10] </ref>). Relational database systems free the programmer from worrying about the physical data representation and access methods. Deductive database systems do the same for views and fl Also AT&T Bell Laboratories, Murray Hill, NJ 07974 y This work supported by AFOSR-88-0266, NSF-87-12791, and a gift of Mitsubishi Electric. recursion.
References-found: 10

