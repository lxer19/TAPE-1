URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1992/1992-12.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Tourist Guide through Treewidth  
Author: Hans L. Bodlaender 
Note: The paper contains an extensive bibliography.  
Address: P.O.Box 80.089, 3508 TB Utrecht, the Netherlands  
Affiliation: Department of Computer Science, Utrecht University  
Abstract: A short overview is given of many recent results in algorithmic graph theory that deal with the notions treewidth, and pathwidth. We discuss algorithms that find tree-decompositions, algorithms that use tree-decompositions to solve hard problems efficiently, graph minor theory, and some applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. R. Abrahamson and M. R. Fellows. </author> <title> Finite automata, bounded treewidth and well-quasiordering. In Graph Structure Theory, </title> <journal> Contemporary Mathematics vol. </journal> <volume> 147, </volume> <pages> pages 539-564. </pages> <publisher> American Mathematical Society, </publisher> <year> 1993. </year>
Reference-contexts: Both Lagergren and Arnborg [91] and Bodlaender and Kloks [31, 82] give such an algorithm, using an involved application of the technique, discussed in section 4. Independently, results of a similar nature were obtained by Abrahamson and Fellows <ref> [1] </ref>. From these results it follows that a technique of Fellows and Langston [62] can be used to compute the corresponding obstruction set.
Reference: [2] <author> R. Agarwala and D. Fernandez-Baca. </author> <title> A polynomical-time algorithm for the phylogeny problem when the number of character states is fixed. </title> <type> Manuscript, </type> <year> 1992. </year>
Reference-contexts: So, a necessary condition is that the treewidth of G is smaller than the number of colors. See <ref> [2, 28, 33, 79, 80, 98] </ref>. 4 3.5 Natural language processing Kornai and Tuza [88] have observed that dependency graphs of sentences encoding the major syntactic relations among the words have usually pathwidth at most 6. The pathwidth closely resembles the narrowness of these graphs.
Reference: [3] <author> S. Arnborg. </author> <title> Efficient algorithms for combinatorial problems on graphs with bounded decomposability A survey. </title> <journal> BIT, </journal> <volume> 25 </volume> <pages> 2-23, </pages> <year> 1985. </year>
Reference-contexts: In figure 1, an example of a graph with treewidth and pathwidth 2 is given, together with a tree- and path-decomposition of it. Clearly, the pathwidth of a graph is at least its treewidth. There are several equivalent characterizations of the notions of treewidth and pathwidth, see e.g. <ref> [3, 15, 18, 99, 143] </ref>. The (probably) most well known equivalent characterization of treewidth is by the notion `partial k-tree', see [132, 139].
Reference: [4] <author> S. Arnborg. </author> <title> Graph decompositions and tree automata in reasoning with uncertainty. </title> <type> Manuscript, </type> <note> to appear in Journal of Experimental and Theoretical AI, </note> <year> 1991. </year>
Reference-contexts: Problems which can be dealt with in this way include many well-known NP-complete problems, like Independent Set, Hamiltonian circuit, Steiner Tree, etc., but also certain statistical computations (including some with applications to reasoning with uncertainity in expert systems [92, 138]), and some PSPACE-complete problems <ref> [4, 5, 26] </ref>. Results of this type can be found | among others | in [3, 4, 5, 8, 10, 14, 19, 26, 22, 31, 37, 44, 47, 52, 55, 67, 69, 71, 73, 74, 75, 87, 90, 93, 94, 95, 96, 107, 132, 137, 141, 142, 143, 144, 145].
Reference: [5] <author> S. Arnborg. </author> <title> Some PSPACE-complete logic decision problems that become linear time solvable on formula graphs of bounded treewidth. </title> <type> Manuscript, </type> <year> 1991. </year>
Reference-contexts: Problems which can be dealt with in this way include many well-known NP-complete problems, like Independent Set, Hamiltonian circuit, Steiner Tree, etc., but also certain statistical computations (including some with applications to reasoning with uncertainity in expert systems [92, 138]), and some PSPACE-complete problems <ref> [4, 5, 26] </ref>. Results of this type can be found | among others | in [3, 4, 5, 8, 10, 14, 19, 26, 22, 31, 37, 44, 47, 52, 55, 67, 69, 71, 73, 74, 75, 87, 90, 93, 94, 95, 96, 107, 132, 137, 141, 142, 143, 144, 145].
Reference: [6] <author> S. Arnborg, D. G. Corneil, and A. Proskurowski. </author> <title> Complexity of finding em--beddings in a k-tree. </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 8 </volume> <pages> 277-284, </pages> <year> 1987. </year>
Reference-contexts: Unfortunately, determining whether the treewidth of a given graph G = (V; E) is at most a given integer k is NP-complete <ref> [6] </ref>. The latter result holds also for pathwidth [6]. The complexity of these problem has been studied for several classes of graphs. Table 1 mentions several of the known results of this type. <p> Unfortunately, determining whether the treewidth of a given graph G = (V; E) is at most a given integer k is NP-complete <ref> [6] </ref>. The latter result holds also for pathwidth [6]. The complexity of these problem has been studied for several classes of graphs. Table 1 mentions several of the known results of this type. Polynomial time approximation algorithms with O (log n) performance ratio for treewidth, and O (log 2 n) performance ratio for pathwidth, are presented in [29]. <p> P (1) N [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation graphs P [34] P [34] Circular permutation graphs P [34] O Cocomparability graphs N <ref> [6, 72] </ref> N [6, 72] Cographs P [36] P [36] Chordal bipartite graphs P [86] N [35] Interval graphs P (2) P (2) Circular arc graphs P [135] O Circle graphs P [83] N [35] P = polynomial time solvable. C = constant, hence linear time solvable. N = NP-complete. <p> [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation graphs P [34] P [34] Circular permutation graphs P [34] O Cocomparability graphs N <ref> [6, 72] </ref> N [6, 72] Cographs P [36] P [36] Chordal bipartite graphs P [86] N [35] Interval graphs P (2) P (2) Circular arc graphs P [135] O Circle graphs P [83] N [35] P = polynomial time solvable. C = constant, hence linear time solvable. N = NP-complete.
Reference: [7] <author> S. Arnborg, B. Courcelle, A. Proskurowski, and D. Seese. </author> <title> An algebraic theory of graph reduction. </title> <editor> In H. Ehrig, H. Kreowski, and G. Rozenberg, editors, </editor> <booktitle> Proceedings of the Fourth Workshop on Graph Grammars and Their Applications to Computer Science, </booktitle> <pages> pages 70-83. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 532, </volume> <year> 1991. </year> <note> To appear in J. ACM. </note>
Reference-contexts: For example, the connected graphs with treewidth 2 are exactly those graphs that can be rewritten to a single vertex, using the operations shown in figure 4. For larger k, also recognition algorithms based on rewriting exist <ref> [7] </ref>. (In [7], a much larger class of problems is also shown to be solvable with these rewrite techniques.) The latter algorithms can at present, not produce a corresponding tree-decomposition of the input graph. <p> For example, the connected graphs with treewidth 2 are exactly those graphs that can be rewritten to a single vertex, using the operations shown in figure 4. For larger k, also recognition algorithms based on rewriting exist <ref> [7] </ref>. (In [7], a much larger class of problems is also shown to be solvable with these rewrite techniques.) The latter algorithms can at present, not produce a corresponding tree-decomposition of the input graph.
Reference: [8] <author> S. Arnborg, J. Lagergren, and D. Seese. </author> <title> Easy problems for tree-decomposable graphs. </title> <journal> J. Algorithms, </journal> <volume> 12 </volume> <pages> 308-340, </pages> <year> 1991. </year>
Reference-contexts: One of the most pow-erfull results of this type is the result by Courcelle [47, 51, 46], which has been extended by Arnborg et al <ref> [8] </ref>, by Borie et al [38], and by Courcelle and Mosbah [52], on (Extended) Monadic Second Order formulas.
Reference: [9] <author> S. Arnborg and A. Proskurowski. </author> <title> Characterization and recognition of partial 3-trees. </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 7 </volume> <pages> 305-314, </pages> <year> 1986. </year>
Reference-contexts: The graphs with treewidth 1 are exactly the forests. Algorithms that recognize graphs with treewidth 2 and 3 in linear time, and find the corresponding tree-decompositions were described by Matousek and Thomas [97], using results from <ref> [9] </ref>. A similar algorithm (with a quite involved case analysis) for treewidth 4 was found recently by Sanders [130]. For example, the connected graphs with treewidth 2 are exactly those graphs that can be rewritten to a single vertex, using the operations shown in figure 4.
Reference: [10] <author> S. Arnborg and A. Proskurowski. </author> <title> Linear time algorithms for NP-hard problems restricted to partial k-trees. </title> <journal> Disc. Appl. Math., </journal> <volume> 23 </volume> <pages> 11-24, </pages> <year> 1989. </year>
Reference: [11] <author> S. Arnborg and A. Proskurowski. </author> <title> Canonical representations of partial 2- and 3-trees. </title> <booktitle> In Proceedings of the 2nd Scandinavian Workshop on Algorithm Theory, </booktitle> <pages> pages 310-319. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 477, </volume> <year> 1990. </year>
Reference-contexts: The problem whether two given graphs are isomorphic is also solvable in polynomial time, when the graphs have bounded treewidth <ref> [11, 22, 42] </ref>. The techniques are here somewhat different. There also exist problems that remain hard when restricted to graphs with constant bounded treewidth, for instance the bandwidth problem is NP-complete for a very restricted subclass of the trees [100].
Reference: [12] <author> S. Arnborg, A. Proskurowski, and D. G. Corneil. </author> <title> Forbidden minors characterization of partial 3-trees. </title> <journal> Disc. Math., </journal> <volume> 80 </volume> <pages> 1-19, </pages> <year> 1990. </year>
Reference-contexts: Even when we do not know the obstruction set, in several cases it is still possible to construct polynomial time algorithms based on minor tests (see [63]). In some cases, obstruction sets, and hence the decision algorithms themselves are computable <ref> [12, 16, 40, 57, 62, 78, 81, 91, 103, 131, 136] </ref>. The size of the obstruction sets can grow very fast: for instance, the obstruction set of the graphs with pathwidth at most k contains at least k! 2 trees, each containing 53 k 1 2 vertices [136].
Reference: [13] <author> S. Arnborg, A. Proskurowski, and D. Seese. </author> <title> Monadic second order logic, tree automata and forbidden minors. </title> <editor> In E. Borger, H. Kleine Buning, M. M. Richter, and W. Schonfeld, editors, </editor> <booktitle> Proceedings 4th Workshop on Computer Science Logic, CSL'90, </booktitle> <pages> pages 1-16. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 533, </volume> <year> 1991. </year>
Reference-contexts: tests can be done in linear time with a procedure of the type, discussed in section 4, the following result can be derived: every class of graphs that does not contain all planar graphs and that is closed under minor taking, can be recognized in O (n) time. (See also <ref> [13] </ref>.) Many applications of this theory were found by Fellows and Langston [58, 60, 61]. Note however that the constants hidden in the `O'-notation may be quite large, and that the proof of theorem 5.1 is inherently non-constructive (in a deep mathematical sense) [66].
Reference: [14] <author> M. W. Bern, E. L. Lawler, and A. L. Wong. </author> <title> Linear time computation of optimal subgraphs of decomposable graphs. </title> <journal> J. Algorithms, </journal> <volume> 8 </volume> <pages> 216-235, </pages> <year> 1987. </year>
Reference-contexts: Then, the algorithm can be seen as a finite state tree-automata, and optimalization techniques can be applied, similar to Myhill-Nerode theory <ref> [14, 62] </ref>. (See also [48, 45, 49].) In [64, 65] parametric problems on graphs with bounded treewidth are solved, using modifications of the technique, presented above.
Reference: [15] <author> D. Bienstock. </author> <title> Graph searching, path-width, tree-width and related problems (a survey). </title> <journal> DIMACS Ser. in Discrete Mathematics and Theoretical Computer Science, </journal> <volume> 5 </volume> <pages> 33-49, </pages> <year> 1991. </year>
Reference-contexts: In figure 1, an example of a graph with treewidth and pathwidth 2 is given, together with a tree- and path-decomposition of it. Clearly, the pathwidth of a graph is at least its treewidth. There are several equivalent characterizations of the notions of treewidth and pathwidth, see e.g. <ref> [3, 15, 18, 99, 143] </ref>. The (probably) most well known equivalent characterization of treewidth is by the notion `partial k-tree', see [132, 139].
Reference: [16] <author> D. Bienstock and N. Dean. </author> <title> On obstructions to small face covers in planar graphs. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 55 </volume> <pages> 163-189, </pages> <year> 1992. </year>
Reference-contexts: Even when we do not know the obstruction set, in several cases it is still possible to construct polynomial time algorithms based on minor tests (see [63]). In some cases, obstruction sets, and hence the decision algorithms themselves are computable <ref> [12, 16, 40, 57, 62, 78, 81, 91, 103, 131, 136] </ref>. The size of the obstruction sets can grow very fast: for instance, the obstruction set of the graphs with pathwidth at most k contains at least k! 2 trees, each containing 53 k 1 2 vertices [136].
Reference: [17] <author> D. Bienstock, N. Robertson, P. D. Seymour, and R. Thomas. </author> <title> Quickly excluding a forest. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 52 </volume> <pages> 274-283, </pages> <year> 1991. </year> <month> 14 </month>
Reference: [18] <author> H. L. Bodlaender. </author> <title> Classes of graphs with bounded treewidth. </title> <type> Technical Report RUU-CS-86-22, </type> <institution> Dept. of Computer Science, Utrecht University, </institution> <address> Utrecht, the Netherlands, </address> <year> 1986. </year>
Reference-contexts: In figure 1, an example of a graph with treewidth and pathwidth 2 is given, together with a tree- and path-decomposition of it. Clearly, the pathwidth of a graph is at least its treewidth. There are several equivalent characterizations of the notions of treewidth and pathwidth, see e.g. <ref> [3, 15, 18, 99, 143] </ref>. The (probably) most well known equivalent characterization of treewidth is by the notion `partial k-tree', see [132, 139]. <p> See [50]. 3 Applications Several well-studied graph classes have bounded treewidth or pathwidth, hence many results discussed here also apply for these classes. Examples are trees (treewidth 1), series-parallel graphs (treewidth 2), outerplanar graphs (treewidth 2), and Halin graphs (treewidth 3). See e.g. <ref> [18, 20, 132, 143] </ref>. We mention some other applications. 3.1 VLSI layouts A well studied problem in VLSI layout theory is the Gate Matrix Layout problem.
Reference: [19] <author> H. L. Bodlaender. </author> <title> Dynamic programming algorithms on graphs with bounded tree-width. </title> <booktitle> In Proceedings of the 15th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 105-119. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 317, </volume> <year> 1988. </year>
Reference-contexts: For some problems (e.g. the maximum independent set problem) polynomial time algorithms are still known to exist, if the input graph is given together with a tree-decomposition of treewidth O (log n). (See e.g. <ref> [19] </ref>.) For other problems, it is unknown whether such algorithms exist. The problem whether two given graphs are isomorphic is also solvable in polynomial time, when the graphs have bounded treewidth [11, 22, 42]. The techniques are here somewhat different.
Reference: [20] <author> H. L. Bodlaender. </author> <title> Some classes of graphs with bounded treewidth. </title> <journal> Bulletin of the EATCS, </journal> <volume> 36 </volume> <pages> 116-126, </pages> <year> 1988. </year>
Reference-contexts: See [50]. 3 Applications Several well-studied graph classes have bounded treewidth or pathwidth, hence many results discussed here also apply for these classes. Examples are trees (treewidth 1), series-parallel graphs (treewidth 2), outerplanar graphs (treewidth 2), and Halin graphs (treewidth 3). See e.g. <ref> [18, 20, 132, 143] </ref>. We mention some other applications. 3.1 VLSI layouts A well studied problem in VLSI layout theory is the Gate Matrix Layout problem. <p> Class Treewidth Pathwidth Bounded degree N [35] N [101] (3) Trees/Forests C P [133] Series-parallel graphs C P [32] Outerplanar graphs C P [32] Halin graphs C [143] P [32] k-Outerplanar graphs C <ref> [20] </ref> P [32] Planar graphs O N [101] (3) Chordal graphs P (1) N [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation graphs P [34] P
Reference: [21] <author> H. L. Bodlaender. </author> <title> Improved self-reduction algorithms for graphs with bounded treewidth. </title> <booktitle> In Proc. 15th Int. Workshop on Graph-theoretic Concepts in Computer Science WG'89, </booktitle> <pages> pages 232-244. </pages> <publisher> Springer Verlag, </publisher> <address> Lect. </address> <booktitle> Notes in Computer Science, </booktitle> <volume> vol. 411, </volume> <year> 1990. </year> <note> To appear in: Annals of Discrete Mathematics. </note>
Reference-contexts: Also, the algorithms are recognition algorithms: they do not constuct anything (like a vertex ordering, tree-decomposition, etc.) A technique that allows us in some cases to overcome non-constructive aspects of this theory is self-reduction, advocated by Fellows and Langston, see e.g. <ref> [21, 39, 59, 63] </ref>. Self reduction is the technique to consult a decision algorithm a number of times with different inputs in order to construct a solution for the original problem.
Reference: [22] <author> H. L. Bodlaender. </author> <title> Polynomial algorithms for graph isomorphism and chromatic index on partial k-trees. </title> <journal> J. Algorithms, </journal> <volume> 11 </volume> <pages> 631-643, </pages> <year> 1990. </year>
Reference-contexts: The problem whether two given graphs are isomorphic is also solvable in polynomial time, when the graphs have bounded treewidth <ref> [11, 22, 42] </ref>. The techniques are here somewhat different. There also exist problems that remain hard when restricted to graphs with constant bounded treewidth, for instance the bandwidth problem is NP-complete for a very restricted subclass of the trees [100].
Reference: [23] <author> H. L. Bodlaender. </author> <title> Dynamic algorithms for graphs with treewidth 2. </title> <type> Manuscript, </type> <year> 1992. </year>
Reference-contexts: This algorithm uses a recursion technique, and the result in [31] as essential ingredients. A study to dynamic algorithms for graphs with small treewidth has been made by Cohen et al. [43] and recently by the author <ref> [23] </ref>. Acknowledgements I thank Bruno Courcelle, Jens Gustedt, Ton Kloks, Mike Fellows, Detlef Seese, and Andrzej Proskurowski for useful comments on earlier versions of this tourist guide.
Reference: [24] <author> H. L. Bodlaender. </author> <title> A linear time algorithm for finding tree-decompositions of small treewidth. </title> <type> Technical Report RUU-CS-92-27, </type> <institution> Department of Computer Science, Utrecht University, </institution> <address> Utrecht, the Netherlands, </address> <year> 1992. </year> <note> To appear in proceedings STOC'93. </note>
Reference-contexts: Recently, the author has found a linear time algorithm for the problems to decide whether a graph has pathwidth or treewidth at most some constant k, and if so, to find a path- or tree-decomposition with pathwidth or treewidth at most k <ref> [24] </ref>. This algorithm uses a recursion technique, and the result in [31] as essential ingredients. A study to dynamic algorithms for graphs with small treewidth has been made by Cohen et al. [43] and recently by the author [23].
Reference: [25] <author> H. L. Bodlaender. </author> <title> On disjoint cycles. </title> <booktitle> In Proceedings 17th International Workshop on Graph-Theoretic Concepts in Computer Science WG'91, </booktitle> <pages> pages 230-239. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 570, </volume> <year> 1992. </year>
Reference-contexts: This clearly limits the practicality of the approach described above. Also, in some cases, linear time minor tests are possible <ref> [27, 25, 54, 63] </ref>. For instance, suppose that H is a cycle of length k. The algorithm is as follows: first make a depth-first search spanning tree T = (V; F ) of the input graph G = (V; E).
Reference: [26] <author> H. L. Bodlaender. </author> <title> Complexity of path-forming games. </title> <journal> Theor. Comp. Sc., </journal> <volume> 110 </volume> <pages> 215-245, </pages> <year> 1993. </year>
Reference-contexts: Problems which can be dealt with in this way include many well-known NP-complete problems, like Independent Set, Hamiltonian circuit, Steiner Tree, etc., but also certain statistical computations (including some with applications to reasoning with uncertainity in expert systems [92, 138]), and some PSPACE-complete problems <ref> [4, 5, 26] </ref>. Results of this type can be found | among others | in [3, 4, 5, 8, 10, 14, 19, 26, 22, 31, 37, 44, 47, 52, 55, 67, 69, 71, 73, 74, 75, 87, 90, 93, 94, 95, 96, 107, 132, 137, 141, 142, 143, 144, 145].
Reference: [27] <author> H. L. Bodlaender. </author> <title> On linear time minor tests with depth first search. </title> <journal> J. Algorithms, </journal> <volume> 14 </volume> <pages> 1-23, </pages> <year> 1993. </year>
Reference-contexts: As 8 an example, consider the problem of finding a simple path of length at least k (k constant) in an undirected graph. (There are direct and more efficient algorithms for this problem <ref> [27, 63] </ref>; the solution here is presented only to explain the technique.) The class of graphs that do not contain such a path is closed under minor taking, and does not contain all planar graphs, so we have a linear time algorithm, deciding whether a given graph contains a simple path <p> This clearly limits the practicality of the approach described above. Also, in some cases, linear time minor tests are possible <ref> [27, 25, 54, 63] </ref>. For instance, suppose that H is a cycle of length k. The algorithm is as follows: first make a depth-first search spanning tree T = (V; F ) of the input graph G = (V; E).
Reference: [28] <author> H. L. Bodlaender, M. R. Fellows, and T. J. Warnow. </author> <title> Two strikes against perfect phylogeny. </title> <booktitle> In Proceedings 19th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 273-283, </pages> <address> Berlin, 1992. </address> <publisher> Springer Verlag, Lecture Notes in Computer Science 623. </publisher>
Reference-contexts: So, a necessary condition is that the treewidth of G is smaller than the number of colors. See <ref> [2, 28, 33, 79, 80, 98] </ref>. 4 3.5 Natural language processing Kornai and Tuza [88] have observed that dependency graphs of sentences encoding the major syntactic relations among the words have usually pathwidth at most 6. The pathwidth closely resembles the narrowness of these graphs.
Reference: [29] <author> H. L. Bodlaender, J. R. Gilbert, H. Hafsteinsson, and T. Kloks. </author> <title> Approximating treewidth, pathwidth, and minimum elimination tree height. </title> <editor> In G. Schmidt and R. Berghammer, editors, </editor> <booktitle> Proceedings 17th International Workshop on 15 Graph-Theoretic Concepts in Computer Science WG'91, </booktitle> <pages> pages 1-12. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 570, </volume> <year> 1992. </year>
Reference-contexts: One can show that to bound the maximum size of these matrices corresponds to bounding the treewidth of the graph, described above. For more details, see e.g. <ref> [29] </ref>. 3.3 Expert systems Graphs modelling certain type of expert systems have been observed to have small treewidth in practice. Tree-decompositions of small treewidth for these graphs can be used to perform efficiently certian otherwise time-consuming statistical compu tations needed for reasoning with uncertainity in these systems. <p> The complexity of these problem has been studied for several classes of graphs. Table 1 mentions several of the known results of this type. Polynomial time approximation algorithms with O (log n) performance ratio for treewidth, and O (log 2 n) performance ratio for pathwidth, are presented in <ref> [29] </ref>. For several classes of perfect graphs, polynomial time approximation algorithms can be found in [84]. <p> The running time of this algorithm is singly exponential in k. Similar, but slower algorithms have been found by Robertson and Seymour [119] and by Lagergren [89], the latter result also has an efficient parallel variant. 11 These algorithms and the approximation algorithm in <ref> [29] </ref> are based on repeatedly finding separators. <p> This gives a recursion depth of O (log n), and results in an O (n log n) algorithm. (The expose above is only a very rough sketch of some of the most important ideas of the algorithms. See further <ref> [29, 89, 108, 119] </ref>.) 12 Using the algorithm of theorem 5.1, and a constant number of minor tests, it follows that the `treewidth k' and `pathwidth k' problems (for constant k) are decidable in O (n log n) time. (Use that the treewidth and pathwidth can not increase by taking minors.)
Reference: [30] <author> H. L. Bodlaender and J. Gustedt. </author> <title> A conjecture on the pathwidth of k-trees. </title> <booktitle> In: Proceedings AMS Summer Conference on Graph Minors, </booktitle> <year> 1992. </year> <title> Contemp. Math. 147. In section "Open Problems", </title> <editor> editor N. Dean, </editor> <year> 1993. </year>
Reference-contexts: For some problems the complexity when we restrict the instances to graphs with bounded treewidth is open, like the problem to determine the pathwidth of graphs with treewidth 2 <ref> [30] </ref>. 5 Graph minors In this section, we give a short overview of some recent results on graph minors.
Reference: [31] <author> H. L. Bodlaender and T. Kloks. </author> <title> Better algorithms for the pathwidth and treewidth of graphs. </title> <booktitle> In Proceedings of the 18th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 544-555. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 510, </volume> <year> 1991. </year>
Reference-contexts: Both Lagergren and Arnborg [91] and Bodlaender and Kloks <ref> [31, 82] </ref> give such an algorithm, using an involved application of the technique, discussed in section 4. Independently, results of a similar nature were obtained by Abrahamson and Fellows [1]. <p> Independently, results of a similar nature were obtained by Abrahamson and Fellows [1]. From these results it follows that a technique of Fellows and Langston [62] can be used to compute the corresponding obstruction set. Bodlaender and Kloks <ref> [31] </ref> also discuss how in the same time bounds the path- or tree-decompositions with pathwidth or treewidth at most k can be found, if existing. <p> This algorithm uses a recursion technique, and the result in <ref> [31] </ref> as essential ingredients. A study to dynamic algorithms for graphs with small treewidth has been made by Cohen et al. [43] and recently by the author [23].
Reference: [32] <author> H. L. Bodlaender and T. Kloks. </author> <title> Efficient and constructive algorithms for the pathwidth and treewidth of graphs. </title> <type> Manuscript. </type> <note> A preliminary version appeared as [31], </note> <year> 1993. </year>
Reference-contexts: Class Treewidth Pathwidth Bounded degree N [35] N [101] (3) Trees/Forests C P [133] Series-parallel graphs C P <ref> [32] </ref> Outerplanar graphs C P [32] Halin graphs C [143] P [32] k-Outerplanar graphs C [20] P [32] Planar graphs O N [101] (3) Chordal graphs P (1) N [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split <p> Class Treewidth Pathwidth Bounded degree N [35] N [101] (3) Trees/Forests C P [133] Series-parallel graphs C P <ref> [32] </ref> Outerplanar graphs C P [32] Halin graphs C [143] P [32] k-Outerplanar graphs C [20] P [32] Planar graphs O N [101] (3) Chordal graphs P (1) N [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, <p> Class Treewidth Pathwidth Bounded degree N [35] N [101] (3) Trees/Forests C P [133] Series-parallel graphs C P <ref> [32] </ref> Outerplanar graphs C P [32] Halin graphs C [143] P [32] k-Outerplanar graphs C [20] P [32] Planar graphs O N [101] (3) Chordal graphs P (1) N [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation <p> Class Treewidth Pathwidth Bounded degree N [35] N [101] (3) Trees/Forests C P [133] Series-parallel graphs C P <ref> [32] </ref> Outerplanar graphs C P [32] Halin graphs C [143] P [32] k-Outerplanar graphs C [20] P [32] Planar graphs O N [101] (3) Chordal graphs P (1) N [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation graphs P [34] P [34] Circular
Reference: [33] <author> H. L. Bodlaender and T. Kloks. </author> <title> A simple linear time algorithm for triangulating three-colored graphs. </title> <journal> J. Algorithms, </journal> <volume> 15 </volume> <pages> 160-172, </pages> <year> 1993. </year>
Reference-contexts: So, a necessary condition is that the treewidth of G is smaller than the number of colors. See <ref> [2, 28, 33, 79, 80, 98] </ref>. 4 3.5 Natural language processing Kornai and Tuza [88] have observed that dependency graphs of sentences encoding the major syntactic relations among the words have usually pathwidth at most 6. The pathwidth closely resembles the narrowness of these graphs.
Reference: [34] <author> H. L. Bodlaender, T. Kloks, and D. Kratsch. </author> <title> Treewidth and pathwidth of permutation graphs. </title> <booktitle> In Proceedings 20th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 114-125, </pages> <address> Berlin, </address> <year> 1993. </year> <title> Springer Verlag, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 700. </pages>
Reference-contexts: C [20] P [32] Planar graphs O N [101] (3) Chordal graphs P (1) N [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation graphs P <ref> [34] </ref> P [34] Circular permutation graphs P [34] O Cocomparability graphs N [6, 72] N [6, 72] Cographs P [36] P [36] Chordal bipartite graphs P [86] N [35] Interval graphs P (2) P (2) Circular arc graphs P [135] O Circle graphs P [83] N [35] P = polynomial time <p> P [32] Planar graphs O N [101] (3) Chordal graphs P (1) N [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation graphs P <ref> [34] </ref> P [34] Circular permutation graphs P [34] O Cocomparability graphs N [6, 72] N [6, 72] Cographs P [36] P [36] Chordal bipartite graphs P [86] N [35] Interval graphs P (2) P (2) Circular arc graphs P [135] O Circle graphs P [83] N [35] P = polynomial time solvable. <p> N [101] (3) Chordal graphs P (1) N [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation graphs P <ref> [34] </ref> P [34] Circular permutation graphs P [34] O Cocomparability graphs N [6, 72] N [6, 72] Cographs P [36] P [36] Chordal bipartite graphs P [86] N [35] Interval graphs P (2) P (2) Circular arc graphs P [135] O Circle graphs P [83] N [35] P = polynomial time solvable.
Reference: [35] <author> H. L. Bodlaender, T. Kloks, D. Kratsch, and H. Muller, </author> <year> 1993. </year> <title> Unpublished results. </title>
Reference-contexts: Seymour and Thomas gave a polynomial time algorithm for the branchwidth of planar graphs [134]; this directly implies a polynomial time approximation algorithm for the treewidth of planar graphs with a performance ratio 1 1 2 [114]. Class Treewidth Pathwidth Bounded degree N <ref> [35] </ref> N [101] (3) Trees/Forests C P [133] Series-parallel graphs C P [32] Outerplanar graphs C P [32] Halin graphs C [143] P [32] k-Outerplanar graphs C [20] P [32] Planar graphs O N [101] (3) Chordal graphs P (1) N [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal <p> P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation graphs P [34] P [34] Circular permutation graphs P [34] O Cocomparability graphs N [6, 72] N [6, 72] Cographs P [36] P [36] Chordal bipartite graphs P [86] N <ref> [35] </ref> Interval graphs P (2) P (2) Circular arc graphs P [135] O Circle graphs P [83] N [35] P = polynomial time solvable. C = constant, hence linear time solvable. N = NP-complete. <p> N Permutation graphs P [34] P [34] Circular permutation graphs P [34] O Cocomparability graphs N [6, 72] N [6, 72] Cographs P [36] P [36] Chordal bipartite graphs P [86] N <ref> [35] </ref> Interval graphs P (2) P (2) Circular arc graphs P [135] O Circle graphs P [83] N [35] P = polynomial time solvable. C = constant, hence linear time solvable. N = NP-complete.
Reference: [36] <author> H. L. Bodlaender and R. H. Mohring. </author> <title> The pathwidth and treewidth of cographs. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 6 </volume> <pages> 181-188, </pages> <year> 1993. </year>
Reference-contexts: P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation graphs P [34] P [34] Circular permutation graphs P [34] O Cocomparability graphs N [6, 72] N [6, 72] Cographs P <ref> [36] </ref> P [36] Chordal bipartite graphs P [86] N [35] Interval graphs P (2) P (2) Circular arc graphs P [135] O Circle graphs P [83] N [35] P = polynomial time solvable. C = constant, hence linear time solvable. N = NP-complete. <p> N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation graphs P [34] P [34] Circular permutation graphs P [34] O Cocomparability graphs N [6, 72] N [6, 72] Cographs P <ref> [36] </ref> P [36] Chordal bipartite graphs P [86] N [35] Interval graphs P (2) P (2) Circular arc graphs P [135] O Circle graphs P [83] N [35] P = polynomial time solvable. C = constant, hence linear time solvable. N = NP-complete.
Reference: [37] <author> R. B. Borie. </author> <title> Recursively Constructed Graph Families. </title> <type> PhD thesis, </type> <institution> School of Information and Computer Science, Georgia Institute of Technology, </institution> <year> 1988. </year>
Reference: [38] <author> R. B. Borie, R. G. Parker, and C. A. Tovey. </author> <title> Automatic generation of linear-time algorithms from predicate calculus descriptions of problems on recursively constructed graph families. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 555-582, </pages> <year> 1992. </year>
Reference-contexts: One of the most pow-erfull results of this type is the result by Courcelle [47, 51, 46], which has been extended by Arnborg et al [8], by Borie et al <ref> [38] </ref>, and by Courcelle and Mosbah [52], on (Extended) Monadic Second Order formulas.
Reference: [39] <author> D. J. Brown, M. R. Fellows, and M. A. Langston. </author> <title> Nonconstructive polynomial-time decidability and self-reducibility. </title> <journal> Int. J. Computer Math., </journal> <volume> 31 </volume> <pages> 1-9, </pages> <year> 1989. </year>
Reference-contexts: Also, the algorithms are recognition algorithms: they do not constuct anything (like a vertex ordering, tree-decomposition, etc.) A technique that allows us in some cases to overcome non-constructive aspects of this theory is self-reduction, advocated by Fellows and Langston, see e.g. <ref> [21, 39, 59, 63] </ref>. Self reduction is the technique to consult a decision algorithm a number of times with different inputs in order to construct a solution for the original problem.
Reference: [40] <author> R. L. Bryant, M. R. Fellows, N. G. Kinnersley, and M. A. Langston. </author> <title> On finding obstruction sets and polynomial-time algorithms for gate matrix layout. </title> <booktitle> In Proc. 25th Allerton Conf. on Communication, Control and Computing, </booktitle> <year> 1987. </year>
Reference-contexts: Even when we do not know the obstruction set, in several cases it is still possible to construct polynomial time algorithms based on minor tests (see [63]). In some cases, obstruction sets, and hence the decision algorithms themselves are computable <ref> [12, 16, 40, 57, 62, 78, 81, 91, 103, 131, 136] </ref>. The size of the obstruction sets can grow very fast: for instance, the obstruction set of the graphs with pathwidth at most k contains at least k! 2 trees, each containing 53 k 1 2 vertices [136].
Reference: [41] <author> N. Chandrasekharan. </author> <title> Fast Parallel Algorithms and Enumeration Techniques for Partial k-Trees. </title> <type> PhD thesis, </type> <institution> Clemson University, </institution> <year> 1990. </year> <month> 16 </month>
Reference: [42] <author> N. Chandrasekharan. </author> <title> Isomorphism testing of k-trees is in NC, for fixed k. </title> <journal> Inform. Proc. Letters, </journal> <volume> 34 </volume> <pages> 283-287, </pages> <year> 1990. </year>
Reference-contexts: The problem whether two given graphs are isomorphic is also solvable in polynomial time, when the graphs have bounded treewidth <ref> [11, 22, 42] </ref>. The techniques are here somewhat different. There also exist problems that remain hard when restricted to graphs with constant bounded treewidth, for instance the bandwidth problem is NP-complete for a very restricted subclass of the trees [100].
Reference: [43] <author> R. F. Cohen, S. Sairam, R. Tamassia, and J. S. Vitter. </author> <title> Dynamic algorithms for bounded tree-width graphs. </title> <type> Technical Report CS-92-19, </type> <institution> Department of Computer Science, Brown University, </institution> <year> 1992. </year>
Reference-contexts: This algorithm uses a recursion technique, and the result in [31] as essential ingredients. A study to dynamic algorithms for graphs with small treewidth has been made by Cohen et al. <ref> [43] </ref> and recently by the author [23]. Acknowledgements I thank Bruno Courcelle, Jens Gustedt, Ton Kloks, Mike Fellows, Detlef Seese, and Andrzej Proskurowski for useful comments on earlier versions of this tourist guide.
Reference: [44] <author> D. G. Corneil and J. M. Keil. </author> <title> A dynamic programming approach to the dominating set problem on k-trees. </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 8 </volume> <pages> 535-543, </pages> <year> 1987. </year>
Reference: [45] <author> B. Courcelle. </author> <title> The monadic second-order logic of graphs VI: On several representations of graphs by relational structures. </title> <type> Technical Report 89-99, </type> <institution> Bordeaux-I University, </institution> <year> 1989. </year> <note> To appear in: Discrete Applied Mathematics. </note>
Reference-contexts: Then, the algorithm can be seen as a finite state tree-automata, and optimalization techniques can be applied, similar to Myhill-Nerode theory [14, 62]. (See also <ref> [48, 45, 49] </ref>.) In [64, 65] parametric problems on graphs with bounded treewidth are solved, using modifications of the technique, presented above.
Reference: [46] <author> B. Courcelle. </author> <title> Graph rewriting: an algebraic and logical approach. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> volume B, </volume> <pages> pages 192-242, </pages> <address> Amsterdam, 1990. </address> <publisher> North Holland Publ. </publisher> <address> Comp. </address>
Reference-contexts: The technique works for many examples. However, there are also results that state that large classes of problems can be solved in linear time, when a tree-decomposition with constant bounded treewidth is available. One of the most pow-erfull results of this type is the result by Courcelle <ref> [47, 51, 46] </ref>, which has been extended by Arnborg et al [8], by Borie et al [38], and by Courcelle and Mosbah [52], on (Extended) Monadic Second Order formulas.
Reference: [47] <author> B. Courcelle. </author> <title> The monadic second-order logic of graphs I: Recognizable sets of finite graphs. </title> <journal> Information and Computation, </journal> <volume> 85 </volume> <pages> 12-75, </pages> <year> 1990. </year>
Reference-contexts: The technique works for many examples. However, there are also results that state that large classes of problems can be solved in linear time, when a tree-decomposition with constant bounded treewidth is available. One of the most pow-erfull results of this type is the result by Courcelle <ref> [47, 51, 46] </ref>, which has been extended by Arnborg et al [8], by Borie et al [38], and by Courcelle and Mosbah [52], on (Extended) Monadic Second Order formulas.
Reference: [48] <author> B. Courcelle. </author> <title> The monadic second-order logic of graphs V: On closing the gap between definability and recognizability. </title> <journal> Theor. Comp. Sc., </journal> <volume> 80 </volume> <pages> 153-202, </pages> <year> 1991. </year>
Reference-contexts: Then, the algorithm can be seen as a finite state tree-automata, and optimalization techniques can be applied, similar to Myhill-Nerode theory [14, 62]. (See also <ref> [48, 45, 49] </ref>.) In [64, 65] parametric problems on graphs with bounded treewidth are solved, using modifications of the technique, presented above.
Reference: [49] <author> B. Courcelle. </author> <title> The monadic second-order logic of graphs VII: Graphs as relational structures. </title> <type> Manuscript, </type> <note> to appear in: Theoretical Computer Science, </note> <year> 1991. </year>
Reference-contexts: Then, the algorithm can be seen as a finite state tree-automata, and optimalization techniques can be applied, similar to Myhill-Nerode theory [14, 62]. (See also <ref> [48, 45, 49] </ref>.) In [64, 65] parametric problems on graphs with bounded treewidth are solved, using modifications of the technique, presented above.
Reference: [50] <author> B. Courcelle. </author> <title> Graph grammars, monadic second-order logic and the theory of graph minors. </title> <journal> Bulletin of the EATCS, </journal> <volume> 46 </volume> <pages> 193-226, </pages> <year> 1992. </year> <title> To appear in: </title> <booktitle> Proceedings AMS Summer Research Conference on Graph Minors. </booktitle>
Reference-contexts: Also, tree decompositions are reflected by graph expressions, where graphs are built by operations on graphs with some special vertices (the sources) like: parallel composition, forget sources, renaming of sources. The treewidth can be characterized in terms of the number of sources used in the operations. See <ref> [50] </ref>. 3 Applications Several well-studied graph classes have bounded treewidth or pathwidth, hence many results discussed here also apply for these classes. Examples are trees (treewidth 1), series-parallel graphs (treewidth 2), outerplanar graphs (treewidth 2), and Halin graphs (treewidth 3). See e.g. [18, 20, 132, 143].
Reference: [51] <author> B. Courcelle. </author> <title> The monadic second-order logic of graphs III: Treewidth, forbidden minors and complexity issues. </title> <journal> Informatique Theorique, </journal> <volume> 26 </volume> <pages> 257-286, </pages> <year> 1992. </year>
Reference-contexts: The technique works for many examples. However, there are also results that state that large classes of problems can be solved in linear time, when a tree-decomposition with constant bounded treewidth is available. One of the most pow-erfull results of this type is the result by Courcelle <ref> [47, 51, 46] </ref>, which has been extended by Arnborg et al [8], by Borie et al [38], and by Courcelle and Mosbah [52], on (Extended) Monadic Second Order formulas.
Reference: [52] <author> B. Courcelle and M. Mosbah. </author> <title> Monadic second-order evaluations on tree-decomposable graphs. </title> <journal> Theor. Comp. Sc., </journal> <volume> 109 </volume> <pages> 49-82, </pages> <year> 1993. </year>
Reference-contexts: One of the most pow-erfull results of this type is the result by Courcelle [47, 51, 46], which has been extended by Arnborg et al [8], by Borie et al [38], and by Courcelle and Mosbah <ref> [52] </ref>, on (Extended) Monadic Second Order formulas.
Reference: [53] <author> N. Deo, M. S. Krishnamoorty, and M. A. Langston. </author> <title> Exact and approximate solutions for the gate matrix layout problem. </title> <journal> IEEE Trans. Computer Aided Design, </journal> <volume> 6 </volume> <pages> 79-84, </pages> <year> 1987. </year>
Reference-contexts: An example is given in figure 2. The 3 problem of finding a permutation of the gates, such that all nets can be made within the minimum number of tracks is equivalent to the pathwidth problem (see [63]). See [99] for an extensive overview. See also <ref> [53] </ref>. 3.2 Cholesky factorization There is also a close connection between treewidth, and Choleski factorization on sparse symmetric matrices.
Reference: [54] <author> R. G. Downey and M. R. Fellows. </author> <title> Fixed-parameter tractability and completeness. </title> <type> Manuscript, </type> <year> 1991. </year> <month> 17 </month>
Reference-contexts: This clearly limits the practicality of the approach described above. Also, in some cases, linear time minor tests are possible <ref> [27, 25, 54, 63] </ref>. For instance, suppose that H is a cycle of length k. The algorithm is as follows: first make a depth-first search spanning tree T = (V; F ) of the input graph G = (V; E).
Reference: [55] <author> E. S. El-Mallah and C. J. Colbourn. </author> <title> Partial k-tree algorithms. </title> <journal> Congressus Numerantium, </journal> <volume> 64 </volume> <pages> 105-119, </pages> <year> 1988. </year>
Reference: [56] <author> M. R. Fellows. </author> <title> The Robertson-Seymour theorems: A survey of applications. </title> <journal> Contemporary Mathematics, </journal> <volume> 89 </volume> <pages> 1-18, </pages> <year> 1989. </year>
Reference: [57] <author> M. R. Fellows, N. G. Kinnersley, and M. A. Langston. </author> <title> Finite-basis theorems, and a computational integrated approach to obstruction set isolation. </title> <editor> In E. Kaltofen and S. M. Watt, editors, </editor> <booktitle> Proceedings of the 3rd Conference on Computers and Mathematics, </booktitle> <pages> pages 37-45, </pages> <address> New York, 1989. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: Even when we do not know the obstruction set, in several cases it is still possible to construct polynomial time algorithms based on minor tests (see [63]). In some cases, obstruction sets, and hence the decision algorithms themselves are computable <ref> [12, 16, 40, 57, 62, 78, 81, 91, 103, 131, 136] </ref>. The size of the obstruction sets can grow very fast: for instance, the obstruction set of the graphs with pathwidth at most k contains at least k! 2 trees, each containing 53 k 1 2 vertices [136].
Reference: [58] <author> M. R. Fellows and M. A. Langston. </author> <title> Nonconstructive advances in polynomial-time complexity. </title> <journal> Inform. Proc. Letters, </journal> <volume> 26 </volume> <pages> 157-162, </pages> <year> 1987. </year>
Reference-contexts: type, discussed in section 4, the following result can be derived: every class of graphs that does not contain all planar graphs and that is closed under minor taking, can be recognized in O (n) time. (See also [13].) Many applications of this theory were found by Fellows and Langston <ref> [58, 60, 61] </ref>. Note however that the constants hidden in the `O'-notation may be quite large, and that the proof of theorem 5.1 is inherently non-constructive (in a deep mathematical sense) [66].
Reference: [59] <author> M. R. Fellows and M. A. Langston. </author> <title> Fast self-reduction algorithms for combinatorial problems of VLSI design. </title> <booktitle> In Proc. 3rd Aegean Workshop on Computing, </booktitle> <pages> pages 278-287. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 319, </volume> <year> 1988. </year>
Reference-contexts: Also, the algorithms are recognition algorithms: they do not constuct anything (like a vertex ordering, tree-decomposition, etc.) A technique that allows us in some cases to overcome non-constructive aspects of this theory is self-reduction, advocated by Fellows and Langston, see e.g. <ref> [21, 39, 59, 63] </ref>. Self reduction is the technique to consult a decision algorithm a number of times with different inputs in order to construct a solution for the original problem.
Reference: [60] <author> M. R. Fellows and M. A. Langston. </author> <title> Layout permutation problems and well-partially-ordered sets. </title> <editor> In J. Reif, editor, </editor> <booktitle> 5th MIT Conf. on Advanced Research in VLSI, </booktitle> <pages> pages 315-327, </pages> <address> Cambridge, MA, 1988. </address> <publisher> Springer Verlag Lecture Notes in Computer Science 319. </publisher>
Reference-contexts: type, discussed in section 4, the following result can be derived: every class of graphs that does not contain all planar graphs and that is closed under minor taking, can be recognized in O (n) time. (See also [13].) Many applications of this theory were found by Fellows and Langston <ref> [58, 60, 61] </ref>. Note however that the constants hidden in the `O'-notation may be quite large, and that the proof of theorem 5.1 is inherently non-constructive (in a deep mathematical sense) [66].
Reference: [61] <author> M. R. Fellows and M. A. Langston. </author> <title> Nonconstructive tools for proving polynomial-time decidability. </title> <journal> J. ACM, </journal> <volume> 35 </volume> <pages> 727-739, </pages> <year> 1988. </year>
Reference-contexts: type, discussed in section 4, the following result can be derived: every class of graphs that does not contain all planar graphs and that is closed under minor taking, can be recognized in O (n) time. (See also [13].) Many applications of this theory were found by Fellows and Langston <ref> [58, 60, 61] </ref>. Note however that the constants hidden in the `O'-notation may be quite large, and that the proof of theorem 5.1 is inherently non-constructive (in a deep mathematical sense) [66].
Reference: [62] <author> M. R. Fellows and M. A. Langston. </author> <title> An analogue of the Myhill-Nerode theorem and its use in computing finite-basis characterizations. </title> <booktitle> In Proceedings of the 30th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 520-525, </pages> <year> 1989. </year>
Reference-contexts: Then, the algorithm can be seen as a finite state tree-automata, and optimalization techniques can be applied, similar to Myhill-Nerode theory <ref> [14, 62] </ref>. (See also [48, 45, 49].) In [64, 65] parametric problems on graphs with bounded treewidth are solved, using modifications of the technique, presented above. <p> Even when we do not know the obstruction set, in several cases it is still possible to construct polynomial time algorithms based on minor tests (see [63]). In some cases, obstruction sets, and hence the decision algorithms themselves are computable <ref> [12, 16, 40, 57, 62, 78, 81, 91, 103, 131, 136] </ref>. The size of the obstruction sets can grow very fast: for instance, the obstruction set of the graphs with pathwidth at most k contains at least k! 2 trees, each containing 53 k 1 2 vertices [136]. <p> Independently, results of a similar nature were obtained by Abrahamson and Fellows [1]. From these results it follows that a technique of Fellows and Langston <ref> [62] </ref> can be used to compute the corresponding obstruction set. Bodlaender and Kloks [31] also discuss how in the same time bounds the path- or tree-decompositions with pathwidth or treewidth at most k can be found, if existing.
Reference: [63] <author> M. R. Fellows and M. A. Langston. </author> <title> On search, decision and the efficiency of polynomial-time algorithms. </title> <booktitle> In Proceedings of the 21rd Annual Symposium on Theory of Computing, </booktitle> <pages> pages 501-512, </pages> <year> 1989. </year>
Reference-contexts: An example is given in figure 2. The 3 problem of finding a permutation of the gates, such that all nets can be made within the minimum number of tracks is equivalent to the pathwidth problem (see <ref> [63] </ref>). See [99] for an extensive overview. See also [53]. 3.2 Cholesky factorization There is also a close connection between treewidth, and Choleski factorization on sparse symmetric matrices. <p> Also, the algorithms are recognition algorithms: they do not constuct anything (like a vertex ordering, tree-decomposition, etc.) A technique that allows us in some cases to overcome non-constructive aspects of this theory is self-reduction, advocated by Fellows and Langston, see e.g. <ref> [21, 39, 59, 63] </ref>. Self reduction is the technique to consult a decision algorithm a number of times with different inputs in order to construct a solution for the original problem. <p> As 8 an example, consider the problem of finding a simple path of length at least k (k constant) in an undirected graph. (There are direct and more efficient algorithms for this problem <ref> [27, 63] </ref>; the solution here is presented only to explain the technique.) The class of graphs that do not contain such a path is closed under minor taking, and does not contain all planar graphs, so we have a linear time algorithm, deciding whether a given graph contains a simple path <p> When no edge can be deleted anymore, the resulting graph is precisely the desired path. Even when we do not know the obstruction set, in several cases it is still possible to construct polynomial time algorithms based on minor tests (see <ref> [63] </ref>). In some cases, obstruction sets, and hence the decision algorithms themselves are computable [12, 16, 40, 57, 62, 78, 81, 91, 103, 131, 136]. <p> This clearly limits the practicality of the approach described above. Also, in some cases, linear time minor tests are possible <ref> [27, 25, 54, 63] </ref>. For instance, suppose that H is a cycle of length k. The algorithm is as follows: first make a depth-first search spanning tree T = (V; F ) of the input graph G = (V; E). <p> This is a tree-decomposition of G with treewidth at most k 2. Use this tree-decomposition to solve the problem in linear time. (See <ref> [63] </ref>.) 6 Finding tree-decompositions In this section we consider the problem of finding tree-decompositions, and determining the treewidth of a graph. Unfortunately, determining whether the treewidth of a given graph G = (V; E) is at most a given integer k is NP-complete [6].
Reference: [64] <author> D. Fernandez-Baca and G. Slutzki. </author> <title> Solving parametric problems on trees. </title> <journal> J. Algorithms, </journal> <volume> 10 </volume> <pages> 381-402, </pages> <year> 1989. </year>
Reference-contexts: Then, the algorithm can be seen as a finite state tree-automata, and optimalization techniques can be applied, similar to Myhill-Nerode theory [14, 62]. (See also [48, 45, 49].) In <ref> [64, 65] </ref> parametric problems on graphs with bounded treewidth are solved, using modifications of the technique, presented above.
Reference: [65] <author> D. Fernandez-Baca and G. Slutzki. </author> <title> Parametic problems on graphs of bounded treewidth. </title> <editor> In O. Nurmi and E. Ukkonen, editors, </editor> <booktitle> Proceedings 3rd Scandina-vian Workshop on Algorithm Theory, </booktitle> <pages> pages 304-316. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 621, </volume> <year> 1992. </year>
Reference-contexts: Then, the algorithm can be seen as a finite state tree-automata, and optimalization techniques can be applied, similar to Myhill-Nerode theory [14, 62]. (See also [48, 45, 49].) In <ref> [64, 65] </ref> parametric problems on graphs with bounded treewidth are solved, using modifications of the technique, presented above.
Reference: [66] <author> H. Friedman, N. Robertson, and P. D. Seymour. </author> <title> The metamathematics of the graph minor theorem. </title> <journal> Contemporary Mathematics, </journal> <volume> 65 </volume> <pages> 229-261, </pages> <year> 1987. </year> <month> 18 </month>
Reference-contexts: Note however that the constants hidden in the `O'-notation may be quite large, and that the proof of theorem 5.1 is inherently non-constructive (in a deep mathematical sense) <ref> [66] </ref>. I.e., it is not possible in all cases to extract the obstruction set of a class of graphs G, given a formal proof that G is minor closed.
Reference: [67] <author> D. Granot and D. Skorin-Kapov. </author> <title> On some optimization problems on k-trees and partial k-trees. </title> <type> Manuscript, </type> <note> to appear in Discrete Appl. Math., </note> <year> 1988. </year>
Reference: [68] <author> J. Gustedt. </author> <title> Path width for chordal graphs is NP-complete. </title> <type> Technical Report 221/1989, </type> <institution> Technical University Berlin, </institution> <year> 1989. </year> <note> To appear in Discr. Appl. Math. </note>
Reference-contexts: Class Treewidth Pathwidth Bounded degree N [35] N [101] (3) Trees/Forests C P [133] Series-parallel graphs C P [32] Outerplanar graphs C P [32] Halin graphs C [143] P [32] k-Outerplanar graphs C [20] P [32] Planar graphs O N [101] (3) Chordal graphs P (1) N <ref> [68] </ref> Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation graphs P [34] P [34] Circular permutation graphs P [34] O Cocomparability graphs N [6, 72] N [6, <p> degree N [35] N [101] (3) Trees/Forests C P [133] Series-parallel graphs C P [32] Outerplanar graphs C P [32] Halin graphs C [143] P [32] k-Outerplanar graphs C [20] P [32] Planar graphs O N [101] (3) Chordal graphs P (1) N <ref> [68] </ref> Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation graphs P [34] P [34] Circular permutation graphs P [34] O Cocomparability graphs N [6, 72] N [6, 72] Cographs P [36] P [36] Chordal <p> C P [133] Series-parallel graphs C P [32] Outerplanar graphs C P [32] Halin graphs C [143] P [32] k-Outerplanar graphs C [20] P [32] Planar graphs O N [101] (3) Chordal graphs P (1) N <ref> [68] </ref> Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation graphs P [34] P [34] Circular permutation graphs P [34] O Cocomparability graphs N [6, 72] N [6, 72] Cographs P [36] P [36] Chordal bipartite graphs P [86] N [35] Interval <p> [32] Halin graphs C [143] P [32] k-Outerplanar graphs C [20] P [32] Planar graphs O N [101] (3) Chordal graphs P (1) N [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P <ref> [68, 84] </ref> Bipartite graphs N N Permutation graphs P [34] P [34] Circular permutation graphs P [34] O Cocomparability graphs N [6, 72] N [6, 72] Cographs P [36] P [36] Chordal bipartite graphs P [86] N [35] Interval graphs P (2) P (2) Circular arc graphs P [135] O Circle
Reference: [69] <author> A. Habel. </author> <title> Graph-theoretic properties compatible with graph derivations. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Proceedings 14th International Workshop on Graph-Theoretic Concepts in Computer Science WG'88, </booktitle> <pages> pages 11-29. </pages> <booktitle> Springer Ver-lag, Lecture Notes in Computer Science, </booktitle> <volume> vol. 344, </volume> <year> 1988. </year>
Reference: [70] <author> A. Habel and H. J. Kreowski. </author> <title> May we introduce to you: hyperedge replacement. </title> <editor> In H. Ehrig, M. Nagl, and A. Rosenberg, editors, </editor> <booktitle> Proc. Graph-Grammars and their Applications to Computer Science '86, </booktitle> <pages> pages 15-26. </pages> <publisher> Springer Verlag, </publisher> <address> Lect. </address> <note> Notes in Comp. Science vol. 291, </note> <year> 1987. </year>
Reference: [71] <author> A. Habel and H.-J. Kreowski. </author> <title> Filtering hyperedge-replacement languages through compatible properties. </title> <booktitle> In Proceedings 15th International Workshop on Graph-Theoretic Concepts in Computer Science WG'89, </booktitle> <year> 1990. </year>
Reference: [72] <author> M. Habib and R. H. Mohring. </author> <title> Treewidth of cocomparability graphs and a new order-theoretic parameter. </title> <type> Technical Report 336/1992, </type> <institution> Fachbereich Mathe-matik, Technische Universitat Berlin, </institution> <year> 1992. </year>
Reference-contexts: P (1) N [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation graphs P [34] P [34] Circular permutation graphs P [34] O Cocomparability graphs N <ref> [6, 72] </ref> N [6, 72] Cographs P [36] P [36] Chordal bipartite graphs P [86] N [35] Interval graphs P (2) P (2) Circular arc graphs P [135] O Circle graphs P [83] N [35] P = polynomial time solvable. C = constant, hence linear time solvable. N = NP-complete. <p> [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation graphs P [34] P [34] Circular permutation graphs P [34] O Cocomparability graphs N <ref> [6, 72] </ref> N [6, 72] Cographs P [36] P [36] Chordal bipartite graphs P [86] N [35] Interval graphs P (2) P (2) Circular arc graphs P [135] O Circle graphs P [83] N [35] P = polynomial time solvable. C = constant, hence linear time solvable. N = NP-complete.
Reference: [73] <author> E. Hare, S. Hedetniemi, R. Laskar, K. Peters, and T. Wimer. </author> <title> Linear-time comptability of combinatorial problems on generalized-series-parallel graphs. </title> <editor> In D. S. Johnson, T. Nishizeki, A. Nozaki, and H. S. Wilf, editors, </editor> <booktitle> Proc. of the Japan-US Joint Seminar on Discrete Algorithms and Complexity, </booktitle> <address> Orlando, Florida, 1987. </address> <publisher> Academic Press, Inc. </publisher>
Reference: [74] <author> W. Hohberg and R. Reischuk. </author> <title> A framework to design algorithms for optimization problems on graphs. </title> <type> Preprint, </type> <month> April </month> <year> 1990. </year>
Reference: [75] <author> K. Jansen and P. Sche*er. </author> <title> Generalized coloring for tree-like graphs. </title> <booktitle> In Proceedings 18th International Workshop on Graph-Theoretic Concepts in Computer Science WG'92, </booktitle> <pages> pages 50-59, </pages> <address> Berlin, </address> <year> 1993. </year> <title> Springer Verlag, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 657. </pages>
Reference: [76] <author> D. S. Johnson. </author> <title> The NP-completeness column: An ongoing guide. </title> <journal> J. Algorithms, </journal> <volume> 6 </volume> <pages> 434-451, </pages> <year> 1985. </year>
Reference: [77] <author> D. S. Johnson. </author> <title> The NP-completeness column: An ongoing guide. </title> <journal> J. Algorithms, </journal> <volume> 8 </volume> <pages> 285-303, </pages> <year> 1987. </year>
Reference: [78] <author> Y. Kajitani, A. Ishizuka, and S. Ueno. </author> <title> Characterization of partial 3 trees in terms of 3 structures. </title> <booktitle> Graphs and Combinatorics, </booktitle> <volume> 2 </volume> <pages> 233-246, </pages> <year> 1986. </year> <month> 19 </month>
Reference-contexts: Even when we do not know the obstruction set, in several cases it is still possible to construct polynomial time algorithms based on minor tests (see [63]). In some cases, obstruction sets, and hence the decision algorithms themselves are computable <ref> [12, 16, 40, 57, 62, 78, 81, 91, 103, 131, 136] </ref>. The size of the obstruction sets can grow very fast: for instance, the obstruction set of the graphs with pathwidth at most k contains at least k! 2 trees, each containing 53 k 1 2 vertices [136].
Reference: [79] <author> S. Kannan and T. Warnow. </author> <title> Inferring evolutionary history from DNA se-quences. </title> <booktitle> In Proceedings of the 31rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 362-371, </pages> <year> 1990. </year>
Reference-contexts: So, a necessary condition is that the treewidth of G is smaller than the number of colors. See <ref> [2, 28, 33, 79, 80, 98] </ref>. 4 3.5 Natural language processing Kornai and Tuza [88] have observed that dependency graphs of sentences encoding the major syntactic relations among the words have usually pathwidth at most 6. The pathwidth closely resembles the narrowness of these graphs.
Reference: [80] <author> S. Kannan and T. Warnow. </author> <title> Triangulating 3-colored graphs. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 5 </volume> <pages> 249-258, </pages> <year> 1992. </year>
Reference-contexts: So, a necessary condition is that the treewidth of G is smaller than the number of colors. See <ref> [2, 28, 33, 79, 80, 98] </ref>. 4 3.5 Natural language processing Kornai and Tuza [88] have observed that dependency graphs of sentences encoding the major syntactic relations among the words have usually pathwidth at most 6. The pathwidth closely resembles the narrowness of these graphs.
Reference: [81] <author> N. G. Kinnersley. </author> <title> Obstruction Set Isolation for Layout Permutation Problems. </title> <type> PhD thesis, </type> <institution> Washington State University, </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: Even when we do not know the obstruction set, in several cases it is still possible to construct polynomial time algorithms based on minor tests (see [63]). In some cases, obstruction sets, and hence the decision algorithms themselves are computable <ref> [12, 16, 40, 57, 62, 78, 81, 91, 103, 131, 136] </ref>. The size of the obstruction sets can grow very fast: for instance, the obstruction set of the graphs with pathwidth at most k contains at least k! 2 trees, each containing 53 k 1 2 vertices [136].
Reference: [82] <author> T. Kloks. </author> <title> Treewidth. </title> <type> PhD thesis, </type> <institution> Utrecht University, </institution> <address> Utrecht, the Netherlands, </address> <year> 1993. </year>
Reference-contexts: Both Lagergren and Arnborg [91] and Bodlaender and Kloks <ref> [31, 82] </ref> give such an algorithm, using an involved application of the technique, discussed in section 4. Independently, results of a similar nature were obtained by Abrahamson and Fellows [1].
Reference: [83] <author> T. Kloks. </author> <title> Treewidth of circle graphs. </title> <type> Technical Report RUU-CS-93-12, </type> <institution> Department of Computer Science, Utrecht University, Utrecht, </institution> <year> 1993. </year>
Reference-contexts: graphs N N Permutation graphs P [34] P [34] Circular permutation graphs P [34] O Cocomparability graphs N [6, 72] N [6, 72] Cographs P [36] P [36] Chordal bipartite graphs P [86] N [35] Interval graphs P (2) P (2) Circular arc graphs P [135] O Circle graphs P <ref> [83] </ref> N [35] P = polynomial time solvable. C = constant, hence linear time solvable. N = NP-complete.
Reference: [84] <author> T. Kloks and H. Bodlaender. </author> <title> Approximating treewidth and pathwidth of some classes of perfect graphs. </title> <booktitle> In Proceedings Third International Symposium on Algorithms and Computation, ISAAC'92, </booktitle> <pages> pages 116-125, </pages> <address> Berlin, </address> <year> 1992. </year> <title> Springer Verlag, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 650. </pages>
Reference-contexts: Polynomial time approximation algorithms with O (log n) performance ratio for treewidth, and O (log 2 n) performance ratio for pathwidth, are presented in [29]. For several classes of perfect graphs, polynomial time approximation algorithms can be found in <ref> [84] </ref>. Seymour and Thomas gave a polynomial time algorithm for the branchwidth of planar graphs [134]; this directly implies a polynomial time approximation algorithm for the treewidth of planar graphs with a performance ratio 1 1 2 [114]. <p> [32] Halin graphs C [143] P [32] k-Outerplanar graphs C [20] P [32] Planar graphs O N [101] (3) Chordal graphs P (1) N [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P <ref> [68, 84] </ref> Bipartite graphs N N Permutation graphs P [34] P [34] Circular permutation graphs P [34] O Cocomparability graphs N [6, 72] N [6, 72] Cographs P [36] P [36] Chordal bipartite graphs P [86] N [35] Interval graphs P (2) P (2) Circular arc graphs P [135] O Circle
Reference: [85] <author> T. Kloks, H. Bodlaender, H. Muller, and D. Kratsch. </author> <title> Computing treewidth and minimum fill-in: All you need are the minimal separators. To appear in: </title> <booktitle> proceedings 1st European Symposium on Algorithms, </booktitle> <address> ESA'93, </address> <year> 1993. </year>
Reference-contexts: graphs C P [32] Outerplanar graphs C P [32] Halin graphs C [143] P [32] k-Outerplanar graphs C [20] P [32] Planar graphs O N [101] (3) Chordal graphs P (1) N [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P <ref> [85] </ref> P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation graphs P [34] P [34] Circular permutation graphs P [34] O Cocomparability graphs N [6, 72] N [6, 72] Cographs P [36] P [36] Chordal bipartite graphs P [86] N [35] Interval graphs P (2) P <p> P [32] Outerplanar graphs C P [32] Halin graphs C [143] P [32] k-Outerplanar graphs C [20] P [32] Planar graphs O N [101] (3) Chordal graphs P (1) N [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P <ref> [85] </ref> P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation graphs P [34] P [34] Circular permutation graphs P [34] O Cocomparability graphs N [6, 72] N [6, 72] Cographs P [36] P [36] Chordal bipartite graphs P [86] N [35] Interval graphs P (2) P (2) Circular
Reference: [86] <author> T. Kloks and D. Kratsch. </author> <title> Treewidth of chordal bipartite graphs. </title> <editor> In P. En-jalbert, A. Finkel, and K. W. Wagner, editors, </editor> <booktitle> Proceedings Symp. Theoretical Aspects of Computer Science, STACS'93, </booktitle> <pages> pages 80-89, </pages> <address> Berlin, </address> <year> 1993. </year> <title> Springer Verlag, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 665. </pages>
Reference-contexts: P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation graphs P [34] P [34] Circular permutation graphs P [34] O Cocomparability graphs N [6, 72] N [6, 72] Cographs P [36] P [36] Chordal bipartite graphs P <ref> [86] </ref> N [35] Interval graphs P (2) P (2) Circular arc graphs P [135] O Circle graphs P [83] N [35] P = polynomial time solvable. C = constant, hence linear time solvable. N = NP-complete.
Reference: [87] <author> E. Korach and N. Solel. </author> <title> Linear time algorithm for minimum weight Steiner tree in graphs with bounded treewidth. </title> <type> Manuscript, </type> <year> 1990. </year>
Reference: [88] <author> A. Kornai and Z. Tuza. Narrowness, </author> <title> pathwidth, and their application in natural language processing. </title> <type> Manuscript. </type> <note> Submitted Disc. Appl. Math., </note> <year> 1990. </year>
Reference-contexts: So, a necessary condition is that the treewidth of G is smaller than the number of colors. See [2, 28, 33, 79, 80, 98]. 4 3.5 Natural language processing Kornai and Tuza <ref> [88] </ref> have observed that dependency graphs of sentences encoding the major syntactic relations among the words have usually pathwidth at most 6. The pathwidth closely resembles the narrowness of these graphs. For the relationship of this notion to natural language processing, see [88]. 4 Bounded treewidth and linear time algorithms An <p> 4 3.5 Natural language processing Kornai and Tuza <ref> [88] </ref> have observed that dependency graphs of sentences encoding the major syntactic relations among the words have usually pathwidth at most 6. The pathwidth closely resembles the narrowness of these graphs. For the relationship of this notion to natural language processing, see [88]. 4 Bounded treewidth and linear time algorithms An important reason for the interest in tree-decompositions, is that if we have a tree-decomposition of a graph G = (V; E) with its treewidth bounded by some fixed constant k, then we can solve many problems that are hard (intractable) for arbitrary
Reference: [89] <author> J. Lagergren. </author> <title> Efficient parallel algorithms for tree-decomposition and related problems. </title> <booktitle> In Proceedings of the 31rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 173-182, </pages> <year> 1990. </year>
Reference-contexts: Actually, the result proven by Reed has a number, larger than 3k + 2. Minor improvements give the result stated above. The running time of this algorithm is singly exponential in k. Similar, but slower algorithms have been found by Robertson and Seymour [119] and by Lagergren <ref> [89] </ref>, the latter result also has an efficient parallel variant. 11 These algorithms and the approximation algorithm in [29] are based on repeatedly finding separators. <p> This gives a recursion depth of O (log n), and results in an O (n log n) algorithm. (The expose above is only a very rough sketch of some of the most important ideas of the algorithms. See further <ref> [29, 89, 108, 119] </ref>.) 12 Using the algorithm of theorem 5.1, and a constant number of minor tests, it follows that the `treewidth k' and `pathwidth k' problems (for constant k) are decidable in O (n log n) time. (Use that the treewidth and pathwidth can not increase by taking minors.)
Reference: [90] <author> J. Lagergren. </author> <title> Algorithms and Minimal Forbidden Minors for Tree-decomposable Graphs. </title> <type> PhD thesis, </type> <institution> Royal Institute of Technology, Stockholm, Sweden, </institution> <year> 1991. </year>
Reference: [91] <author> J. Lagergren and S. Arnborg. </author> <title> Finding minimal forbidden minors using a finite congruence. </title> <booktitle> In Proceedings of the 18th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 533-543. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 510, </volume> <year> 1991. </year> <month> 20 </month>
Reference-contexts: Even when we do not know the obstruction set, in several cases it is still possible to construct polynomial time algorithms based on minor tests (see [63]). In some cases, obstruction sets, and hence the decision algorithms themselves are computable <ref> [12, 16, 40, 57, 62, 78, 81, 91, 103, 131, 136] </ref>. The size of the obstruction sets can grow very fast: for instance, the obstruction set of the graphs with pathwidth at most k contains at least k! 2 trees, each containing 53 k 1 2 vertices [136]. <p> Both Lagergren and Arnborg <ref> [91] </ref> and Bodlaender and Kloks [31, 82] give such an algorithm, using an involved application of the technique, discussed in section 4. Independently, results of a similar nature were obtained by Abrahamson and Fellows [1].
Reference: [92] <author> S. J. Lauritzen and D. J. Spiegelhalter. </author> <title> Local computations with probabilities on graphical structures and their application to expert systems. </title> <journal> The Journal of the Royal Statistical Society. Series B (Methodological), </journal> <volume> 50 </volume> <pages> 157-224, </pages> <year> 1988. </year>
Reference-contexts: Tree-decompositions of small treewidth for these graphs can be used to perform efficiently certian otherwise time-consuming statistical compu tations needed for reasoning with uncertainity in these systems. See e.g. <ref> [92, 138] </ref>. 3.4 Evolution theory Researchers in molecular biology are interested in the problem, given a set of species, a set of characteristics, and for each specie and each characteristic, the value that that characteristic has for that specie, to find a `good' evolution tree for these species and their possibly <p> Problems which can be dealt with in this way include many well-known NP-complete problems, like Independent Set, Hamiltonian circuit, Steiner Tree, etc., but also certain statistical computations (including some with applications to reasoning with uncertainity in expert systems <ref> [92, 138] </ref>), and some PSPACE-complete problems [4, 5, 26].
Reference: [93] <author> C. Lautemann. </author> <title> Efficient algorithms on context-free graph languages. </title> <booktitle> In Proceedings of the 15th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 362-378. </pages> <publisher> Springer Verlag, </publisher> <address> Lect. </address> <booktitle> Notes in Comp. </booktitle> <address> Sc. 317, </address> <year> 1988. </year>
Reference: [94] <author> S. Mahajan and J. G. Peters. </author> <title> Regularity and locality in k-terminal graphs. </title> <type> Manuscript, </type> <year> 1990. </year>
Reference: [95] <author> E. Mata-Montero. </author> <title> Resilience of partial k-tree networks with edge and node failures. </title> <journal> Networks, </journal> <volume> 21 </volume> <pages> 321-344, </pages> <year> 1991. </year>
Reference: [96] <author> J. Matousek and R. Thomas. </author> <title> On the complexity of finding iso- and other mor-phisms for partial k-trees. </title> <type> Manuscript, </type> <note> to appear in: Topological, Algebraical, and Combinatorial Structures, </note> <editor> J. Nesetril, ed., </editor> <publisher> North-Holland, </publisher> <year> 1988. </year>
Reference: [97] <author> J. Matousek and R. Thomas. </author> <title> Algorithms finding tree-decompositions of graphs. </title> <journal> J. Algorithms, </journal> <volume> 12 </volume> <pages> 1-22, </pages> <year> 1991. </year>
Reference-contexts: The graphs with treewidth 1 are exactly the forests. Algorithms that recognize graphs with treewidth 2 and 3 in linear time, and find the corresponding tree-decompositions were described by Matousek and Thomas <ref> [97] </ref>, using results from [9]. A similar algorithm (with a quite involved case analysis) for treewidth 4 was found recently by Sanders [130]. For example, the connected graphs with treewidth 2 are exactly those graphs that can be rewritten to a single vertex, using the operations shown in figure 4.
Reference: [98] <author> F. R. McMorris, T. Warnow, and T. Wimer. </author> <title> Triangulating colored graphs. </title> <note> In proceedings SODA'92, to appear in SIAM J. Disc. Math., </note> <year> 1991. </year>
Reference-contexts: So, a necessary condition is that the treewidth of G is smaller than the number of colors. See <ref> [2, 28, 33, 79, 80, 98] </ref>. 4 3.5 Natural language processing Kornai and Tuza [88] have observed that dependency graphs of sentences encoding the major syntactic relations among the words have usually pathwidth at most 6. The pathwidth closely resembles the narrowness of these graphs.
Reference: [99] <author> R. H. Mohring. </author> <title> Graph problems related to gate matrix layout and PLA folding. </title> <editor> In E. Mayr, H. Noltemeier, and M. Sys lo, editors, </editor> <title> Computational Graph Theory, </title> <journal> Comuting Suppl. </journal> <volume> 7, </volume> <pages> pages 17-51. </pages> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: In figure 1, an example of a graph with treewidth and pathwidth 2 is given, together with a tree- and path-decomposition of it. Clearly, the pathwidth of a graph is at least its treewidth. There are several equivalent characterizations of the notions of treewidth and pathwidth, see e.g. <ref> [3, 15, 18, 99, 143] </ref>. The (probably) most well known equivalent characterization of treewidth is by the notion `partial k-tree', see [132, 139]. <p> An example is given in figure 2. The 3 problem of finding a permutation of the gates, such that all nets can be made within the minimum number of tracks is equivalent to the pathwidth problem (see [63]). See <ref> [99] </ref> for an extensive overview. See also [53]. 3.2 Cholesky factorization There is also a close connection between treewidth, and Choleski factorization on sparse symmetric matrices.
Reference: [100] <author> B. Monien. </author> <title> The bandwidth minimization problem for caterpillars with hair length 3 is NP-complete. </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 7 </volume> <pages> 505-512, </pages> <year> 1986. </year>
Reference-contexts: The techniques are here somewhat different. There also exist problems that remain hard when restricted to graphs with constant bounded treewidth, for instance the bandwidth problem is NP-complete for a very restricted subclass of the trees <ref> [100] </ref>. For some problems the complexity when we restrict the instances to graphs with bounded treewidth is open, like the problem to determine the pathwidth of graphs with treewidth 2 [30]. 5 Graph minors In this section, we give a short overview of some recent results on graph minors.
Reference: [101] <author> B. Monien and I. H. Sudborough. </author> <title> Min cut is NP-complete for edge weighted trees. </title> <journal> Theor. Comp. Sc., </journal> <volume> 58 </volume> <pages> 209-229, </pages> <year> 1988. </year>
Reference-contexts: Seymour and Thomas gave a polynomial time algorithm for the branchwidth of planar graphs [134]; this directly implies a polynomial time approximation algorithm for the treewidth of planar graphs with a performance ratio 1 1 2 [114]. Class Treewidth Pathwidth Bounded degree N [35] N <ref> [101] </ref> (3) Trees/Forests C P [133] Series-parallel graphs C P [32] Outerplanar graphs C P [32] Halin graphs C [143] P [32] k-Outerplanar graphs C [20] P [32] Planar graphs O N [101] (3) Chordal graphs P (1) N [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P <p> Class Treewidth Pathwidth Bounded degree N [35] N <ref> [101] </ref> (3) Trees/Forests C P [133] Series-parallel graphs C P [32] Outerplanar graphs C P [32] Halin graphs C [143] P [32] k-Outerplanar graphs C [20] P [32] Planar graphs O N [101] (3) Chordal graphs P (1) N [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, 84] Bipartite graphs N N Permutation graphs P [34] P [34] Circular permutation graphs P [34] O
Reference: [102] <author> M. H. Mosbah. </author> <title> Constructions d'Algorithmes Pour les Graphes Structures par des Methodes Algebriques et Logiques. </title> <type> PhD thesis, </type> <institution> Universite Bordeaux-I, </institution> <year> 1992. </year>
Reference: [103] <author> R. Motwani, A. Raghunathan, and H. Saran. </author> <title> Constructive results from graph minors: Linkless embeddings. </title> <booktitle> In Proceedings of the 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 398-407, </pages> <year> 1988. </year>
Reference-contexts: Even when we do not know the obstruction set, in several cases it is still possible to construct polynomial time algorithms based on minor tests (see [63]). In some cases, obstruction sets, and hence the decision algorithms themselves are computable <ref> [12, 16, 40, 57, 62, 78, 81, 91, 103, 131, 136] </ref>. The size of the obstruction sets can grow very fast: for instance, the obstruction set of the graphs with pathwidth at most k contains at least k! 2 trees, each containing 53 k 1 2 vertices [136].
Reference: [104] <author> A. Proskurowski. </author> <title> Separating subgraphs in k-trees: </title> <journal> Cables and caterpillars. Disc. Math., </journal> <volume> 49 </volume> <pages> 275-285, </pages> <year> 1984. </year> <month> 21 </month>
Reference: [105] <author> A. Proskurowski. </author> <title> Maximal graphs of pathwidth k or searching a partial k--caterpillar. </title> <type> Technical Report CIS-TR-89-17, </type> <institution> Dept. of Computer and Information Science, University of Oregon, </institution> <year> 1989. </year>
Reference: [106] <author> A. Proskurowski and M. M. Sys lo. </author> <title> Efficient computations in tree-like graphs. </title> <type> Technical Report 235, </type> <institution> Mathematik, Techn. Univ. </institution> <address> Berlin, </address> <year> 1989. </year>
Reference: [107] <author> V. Radhakrishnan, H. B. Hunt III, and R. E. Stearns. </author> <title> Efficient algorithms for solving systems of linear equations and path problems. </title> <type> Technical Report 91-21, </type> <institution> Dept. of Computer Science, SUNY Albany, </institution> <year> 1991. </year>
Reference: [108] <author> B. Reed. </author> <title> Finding approximate separators and computing tree-width quickly. </title> <booktitle> In Proceedings of the 24th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 221-228, </pages> <year> 1992. </year>
Reference-contexts: For arbitrary fixed k, an O (n log n) algorithm can be found, using the following result, due to Reed <ref> [108] </ref>. Theorem 6.1 For every constant k, there exists an O (n log n) algorithm, that given a graph G = (V; E), either outputs that the treewidth of G is larger than k, or outputs a tree-decomposition of G with treewidth at most 3k + 2. <p> Reed <ref> [108] </ref> has shown that one can also find small sized separator sets S, that do not only separate X, but also partition V 0 into sets of size at most 3=4 of jV 0 j. <p> This gives a recursion depth of O (log n), and results in an O (n log n) algorithm. (The expose above is only a very rough sketch of some of the most important ideas of the algorithms. See further <ref> [29, 89, 108, 119] </ref>.) 12 Using the algorithm of theorem 5.1, and a constant number of minor tests, it follows that the `treewidth k' and `pathwidth k' problems (for constant k) are decidable in O (n log n) time. (Use that the treewidth and pathwidth can not increase by taking minors.)
Reference: [109] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. I. Excluding a forest. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 35 </volume> <pages> 39-61, </pages> <year> 1983. </year>
Reference-contexts: In many cases, additional ideas will be required to turn the methods, described here, into really practical algorithms. 2 Definitions In this section we give the most important definitions, with an example. The notions of treewidth and pathwidth were introduced by Robertson and Seymour <ref> [109, 115] </ref>. fl email: hansb@cs.ruu.nl. This work was partially supported by the ESPRIT Basic Research Actions of the EC under contract 7141 (project ALCOM II). 1 Definition.
Reference: [110] <author> N. Robertson and P. D. Seymour. </author> <title> Generalizing Kuratowskis theorem. </title> <journal> Con-gressus Numerantium, </journal> <volume> 45 </volume> <pages> 129-138, </pages> <year> 1984. </year>
Reference: [111] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. III. Planar tree-width. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 36 </volume> <pages> 49-64, </pages> <year> 1984. </year>
Reference: [112] <author> N. Robertson and P. D. Seymour. </author> <title> Graph width and well-quasi ordering: a survey. </title> <editor> In J. A. Bondy and U. S. R. Murty, editors, </editor> <booktitle> Progress in Graph Theory, </booktitle> <pages> pages 399-406, </pages> <address> Toronto, 1984. </address> <publisher> Academic Press. </publisher>
Reference: [113] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors | a survey. </title> <editor> In I. Ander-son, editor, </editor> <booktitle> Surveys in Combinatorics, </booktitle> <pages> pages 153-171. </pages> <publisher> Cambridge Univ. Press, </publisher> <year> 1985. </year>
Reference: [114] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XI. Distance on a surface. </title> <type> Manuscript, </type> <year> 1985. </year>
Reference-contexts: Seymour and Thomas gave a polynomial time algorithm for the branchwidth of planar graphs [134]; this directly implies a polynomial time approximation algorithm for the treewidth of planar graphs with a performance ratio 1 1 2 <ref> [114] </ref>.
Reference: [115] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. II. Algorithmic aspects of tree-width. </title> <journal> J. Algorithms, </journal> <volume> 7 </volume> <pages> 309-322, </pages> <year> 1986. </year>
Reference-contexts: In many cases, additional ideas will be required to turn the methods, described here, into really practical algorithms. 2 Definitions In this section we give the most important definitions, with an example. The notions of treewidth and pathwidth were introduced by Robertson and Seymour <ref> [109, 115] </ref>. fl email: hansb@cs.ruu.nl. This work was partially supported by the ESPRIT Basic Research Actions of the EC under contract 7141 (project ALCOM II). 1 Definition.
Reference: [116] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. V. Excluding a planar graph. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 41 </volume> <pages> 92-114, </pages> <year> 1986. </year>
Reference: [117] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. VI. Disjoint paths across a disc. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 41 </volume> <pages> 115-138, </pages> <year> 1986. </year>
Reference: [118] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XII. Excluding a non-planar graph. </title> <type> Manuscript, </type> <year> 1986. </year> <month> 22 </month>
Reference: [119] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XIII. The disjoint paths problem. </title> <type> Manuscript, </type> <year> 1986. </year>
Reference-contexts: Actually, the result proven by Reed has a number, larger than 3k + 2. Minor improvements give the result stated above. The running time of this algorithm is singly exponential in k. Similar, but slower algorithms have been found by Robertson and Seymour <ref> [119] </ref> and by Lagergren [89], the latter result also has an efficient parallel variant. 11 These algorithms and the approximation algorithm in [29] are based on repeatedly finding separators. <p> If the treewidth of G is at most k, then a 1/3-2/3 separator, as needed for the algorithm, exists of size at most k, and can be found, in time, linear in V 0 , using flow techniques <ref> [119] </ref>. <p> This gives a recursion depth of O (log n), and results in an O (n log n) algorithm. (The expose above is only a very rough sketch of some of the most important ideas of the algorithms. See further <ref> [29, 89, 108, 119] </ref>.) 12 Using the algorithm of theorem 5.1, and a constant number of minor tests, it follows that the `treewidth k' and `pathwidth k' problems (for constant k) are decidable in O (n log n) time. (Use that the treewidth and pathwidth can not increase by taking minors.)
Reference: [120] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XIV. Taming a vortex. </title> <type> Manuscript, </type> <year> 1987. </year>
Reference: [121] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. VII. Disjoint paths on a surface. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 45 </volume> <pages> 212-254, </pages> <year> 1988. </year>
Reference: [122] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. IV. Tree-width and well-quasi-ordering. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 48 </volume> <pages> 227-254, </pages> <year> 1990. </year>
Reference: [123] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. IX. Disjoint crossed paths. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 49 </volume> <pages> 40-77, </pages> <year> 1990. </year>
Reference: [124] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. VIII. A Kuratowski theorem for general surfaces. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 48 </volume> <pages> 255-288, </pages> <year> 1990. </year>
Reference: [125] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. X. Obstructions to tree-decomposition. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 52 </volume> <pages> 153-190, </pages> <year> 1991. </year>
Reference: [126] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XV. Etending an embedding. </title> <type> Manuscript, </type> <year> 1991. </year>
Reference: [127] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XVI. Giant steps. </title> <type> Manuscript, </type> <year> 1991. </year>
Reference: [128] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XVII. Excluding a nonplanar graph. </title> <type> Manuscript, </type> <year> 1991. </year>
Reference: [129] <author> N. Robertson, P. D. Seymour, and R. Thomas. </author> <title> Quickly excluding a planar graph. </title> <type> Technical Report TR89-16, </type> <institution> DIMACS, </institution> <year> 1989. </year>
Reference-contexts: The constant factor of the algorithm in theorem 5.2 is very high, making this algorithm not suitable for practical use. In <ref> [129] </ref>, it is shown that one can take in 5.3 c H = 20 4jV H j+8jE H j 5 .
Reference: [130] <author> D. P. Sanders. </author> <title> On linear recognition of tree-width at most four. </title> <type> Manuscript, </type> <year> 1992. </year>
Reference-contexts: Algorithms that recognize graphs with treewidth 2 and 3 in linear time, and find the corresponding tree-decompositions were described by Matousek and Thomas [97], using results from [9]. A similar algorithm (with a quite involved case analysis) for treewidth 4 was found recently by Sanders <ref> [130] </ref>. For example, the connected graphs with treewidth 2 are exactly those graphs that can be rewritten to a single vertex, using the operations shown in figure 4.
Reference: [131] <author> A. Satyanarayana and L. Tung. </author> <title> A characterization of partial 3-trees. </title> <journal> Networks, </journal> <volume> 20 </volume> <pages> 299-322, </pages> <year> 1990. </year>
Reference-contexts: Even when we do not know the obstruction set, in several cases it is still possible to construct polynomial time algorithms based on minor tests (see [63]). In some cases, obstruction sets, and hence the decision algorithms themselves are computable <ref> [12, 16, 40, 57, 62, 78, 81, 91, 103, 131, 136] </ref>. The size of the obstruction sets can grow very fast: for instance, the obstruction set of the graphs with pathwidth at most k contains at least k! 2 trees, each containing 53 k 1 2 vertices [136].
Reference: [132] <author> P. Sche*er. </author> <title> Die Baumweite von Graphen als ein Ma fur die Kompliziertheit algorithmischer Probleme. </title> <type> PhD thesis, </type> <institution> Akademie der Wissenschaften der DDR, </institution> <address> Berlin, </address> <year> 1989. </year>
Reference-contexts: Clearly, the pathwidth of a graph is at least its treewidth. There are several equivalent characterizations of the notions of treewidth and pathwidth, see e.g. [3, 15, 18, 99, 143]. The (probably) most well known equivalent characterization of treewidth is by the notion `partial k-tree', see <ref> [132, 139] </ref>. Also, tree decompositions are reflected by graph expressions, where graphs are built by operations on graphs with some special vertices (the sources) like: parallel composition, forget sources, renaming of sources. The treewidth can be characterized in terms of the number of sources used in the operations. <p> See [50]. 3 Applications Several well-studied graph classes have bounded treewidth or pathwidth, hence many results discussed here also apply for these classes. Examples are trees (treewidth 1), series-parallel graphs (treewidth 2), outerplanar graphs (treewidth 2), and Halin graphs (treewidth 3). See e.g. <ref> [18, 20, 132, 143] </ref>. We mention some other applications. 3.1 VLSI layouts A well studied problem in VLSI layout theory is the Gate Matrix Layout problem.
Reference: [133] <author> P. Sche*er. </author> <title> A linear algorithm for the pathwidth of trees. </title> <editor> In R. Bodendiek and R. Henn, editors, </editor> <booktitle> Topics in combinatorics and graph theory, </booktitle> <pages> pages 613-620, </pages> <address> Heidelberg, 1990. </address> <publisher> Physica-Verlag. </publisher> <pages> 23 </pages>
Reference-contexts: Class Treewidth Pathwidth Bounded degree N [35] N [101] (3) Trees/Forests C P <ref> [133] </ref> Series-parallel graphs C P [32] Outerplanar graphs C P [32] Halin graphs C [143] P [32] k-Outerplanar graphs C [20] P [32] Planar graphs O N [101] (3) Chordal graphs P (1) N [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs
Reference: [134] <author> P. D. Seymour and R. Thomas. </author> <title> Call routing and the ratcatcher. </title> <type> Manuscript, </type> <year> 1990. </year>
Reference-contexts: For several classes of perfect graphs, polynomial time approximation algorithms can be found in [84]. Seymour and Thomas gave a polynomial time algorithm for the branchwidth of planar graphs <ref> [134] </ref>; this directly implies a polynomial time approximation algorithm for the treewidth of planar graphs with a performance ratio 1 1 2 [114].
Reference: [135] <author> R. Sundaram, K. Sher Singh, and C. Pandu Rangan. </author> <title> Treewidth of circular-arc graphs. </title> <type> Manuscript, </type> <note> to appear in SIAM J. Disc. Math., </note> <year> 1991. </year>
Reference-contexts: (1) P [68, 84] Bipartite graphs N N Permutation graphs P [34] P [34] Circular permutation graphs P [34] O Cocomparability graphs N [6, 72] N [6, 72] Cographs P [36] P [36] Chordal bipartite graphs P [86] N [35] Interval graphs P (2) P (2) Circular arc graphs P <ref> [135] </ref> O Circle graphs P [83] N [35] P = polynomial time solvable. C = constant, hence linear time solvable. N = NP-complete.
Reference: [136] <author> A. Takahashi, S. Ueno, and Y. Kajitani. </author> <title> Minimal acyclic forbidden minors for the family of graphs with bounded path-width. </title> <booktitle> In SIGAL 91-19-3, IPSJ, 1991. To appear in: Annals of discrete mathematics (Proceedings of 2nd Japan conference on graph theory and combinatorics, </booktitle> <year> 1990). </year>
Reference-contexts: Even when we do not know the obstruction set, in several cases it is still possible to construct polynomial time algorithms based on minor tests (see [63]). In some cases, obstruction sets, and hence the decision algorithms themselves are computable <ref> [12, 16, 40, 57, 62, 78, 81, 91, 103, 131, 136] </ref>. The size of the obstruction sets can grow very fast: for instance, the obstruction set of the graphs with pathwidth at most k contains at least k! 2 trees, each containing 53 k 1 2 vertices [136]. <p> The size of the obstruction sets can grow very fast: for instance, the obstruction set of the graphs with pathwidth at most k contains at least k! 2 trees, each containing 53 k 1 2 vertices <ref> [136] </ref>. This clearly limits the practicality of the approach described above. Also, in some cases, linear time minor tests are possible [27, 25, 54, 63]. For instance, suppose that H is a cycle of length k.
Reference: [137] <author> J. Telle and A. Proskurowski. </author> <title> Efficient sets in partial k-trees. </title> <type> Technical report, </type> <institution> Department of Computer and Information Science, University of Oregon, </institution> <year> 1991. </year>
Reference: [138] <author> L. C. van der Gaag. </author> <title> Probability-Based Models for Plausible Reasoning. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <year> 1990. </year>
Reference-contexts: Tree-decompositions of small treewidth for these graphs can be used to perform efficiently certian otherwise time-consuming statistical compu tations needed for reasoning with uncertainity in these systems. See e.g. <ref> [92, 138] </ref>. 3.4 Evolution theory Researchers in molecular biology are interested in the problem, given a set of species, a set of characteristics, and for each specie and each characteristic, the value that that characteristic has for that specie, to find a `good' evolution tree for these species and their possibly <p> Problems which can be dealt with in this way include many well-known NP-complete problems, like Independent Set, Hamiltonian circuit, Steiner Tree, etc., but also certain statistical computations (including some with applications to reasoning with uncertainity in expert systems <ref> [92, 138] </ref>), and some PSPACE-complete problems [4, 5, 26].
Reference: [139] <editor> J. van Leeuwen. </editor> <booktitle> Graph algorithms. In Handbook of Theoretical Computer Science, A: Algorithms and Complexity Theory, </booktitle> <pages> pages 527-631, </pages> <address> Amsterdam, 1990. </address> <publisher> North Holland Publ. </publisher> <address> Comp. </address>
Reference-contexts: Clearly, the pathwidth of a graph is at least its treewidth. There are several equivalent characterizations of the notions of treewidth and pathwidth, see e.g. [3, 15, 18, 99, 143]. The (probably) most well known equivalent characterization of treewidth is by the notion `partial k-tree', see <ref> [132, 139] </ref>. Also, tree decompositions are reflected by graph expressions, where graphs are built by operations on graphs with some special vertices (the sources) like: parallel composition, forget sources, renaming of sources. The treewidth can be characterized in terms of the number of sources used in the operations.
Reference: [140] <author> K. Wagner. </author> <title> Uber eine Eigenshaft der ebenen Complexe. </title> <journal> Math. Ann., </journal> <volume> 14 </volume> <pages> 570-590, </pages> <year> 1937. </year>
Reference-contexts: For example, the obstruction set of the planar graphs is fK 5 ; K 3;3 g <ref> [140] </ref>. Theorem 5.1 was formerly known as Wagners conjecture. Theorem 5.2 For every graph H, there exists an O (n 3 ) algorithm, that, given a graph G, tests whether H is a minor of G.
Reference: [141] <author> M. Wiegers. </author> <title> The k-section of treewidth restricted graphs. </title> <editor> In B. Rovan, editor, </editor> <booktitle> Proceedings Conference on Mathematical Foundations of Computer Science MFCS'90, </booktitle> <pages> pages 530-537, </pages> <address> Berlin, </address> <year> 1990. </year> <title> Springer Verlag, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 452. </pages>
Reference: [142] <author> T. V. Wimer. </author> <title> Linear algorithms for the dominating cycle problems in series-parallel graphs, 2-trees and Halin graphs. </title> <journal> Congressus Numerantium, </journal> <volume> 56, </volume> <year> 1987. </year>
Reference: [143] <author> T. V. Wimer. </author> <title> Linear Algorithms on k-Terminal Graphs. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, Clemson University, </institution> <year> 1987. </year>
Reference-contexts: In figure 1, an example of a graph with treewidth and pathwidth 2 is given, together with a tree- and path-decomposition of it. Clearly, the pathwidth of a graph is at least its treewidth. There are several equivalent characterizations of the notions of treewidth and pathwidth, see e.g. <ref> [3, 15, 18, 99, 143] </ref>. The (probably) most well known equivalent characterization of treewidth is by the notion `partial k-tree', see [132, 139]. <p> See [50]. 3 Applications Several well-studied graph classes have bounded treewidth or pathwidth, hence many results discussed here also apply for these classes. Examples are trees (treewidth 1), series-parallel graphs (treewidth 2), outerplanar graphs (treewidth 2), and Halin graphs (treewidth 3). See e.g. <ref> [18, 20, 132, 143] </ref>. We mention some other applications. 3.1 VLSI layouts A well studied problem in VLSI layout theory is the Gate Matrix Layout problem. <p> Class Treewidth Pathwidth Bounded degree N [35] N [101] (3) Trees/Forests C P [133] Series-parallel graphs C P [32] Outerplanar graphs C P [32] Halin graphs C <ref> [143] </ref> P [32] k-Outerplanar graphs C [20] P [32] Planar graphs O N [101] (3) Chordal graphs P (1) N [68] Starlike chordal graphs P (1) N [68] k-Starlike chordal graphs P (1) P [68] Co-chordal graphs P [85] P [85] Split graphs P (1) P [68, 84] Bipartite graphs N
Reference: [144] <author> T. V. Wimer, S. T. Hedetniemi, and R. Laskar. </author> <title> A methodology for constructing linear graph algorithms. </title> <journal> Congressus Numerantium, </journal> <volume> 50 </volume> <pages> 43-60, </pages> <year> 1985. </year>
Reference: [145] <author> X. Zhou, S. Nakano, H. Suzuki, and T. Nishizeki. </author> <title> An efficient algorithm for edge-coloring series-parallel multigraphs. </title> <editor> In I. Simon, editor, </editor> <booktitle> Proceedings LATIN'92, </booktitle> <pages> pages 516-529. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 583, </volume> <year> 1992. </year> <month> 24 </month>
References-found: 145

