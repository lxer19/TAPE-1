URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1993/tr-93-034.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1993.html
Root-URL: http://www.icsi.berkeley.edu
Title: On Lines Missing Polyhedral Sets in 3-Space log n upper bound on the worst case
Author: Marco Pellegrini 
Note: (1) An O(n 3 2 c  (2) An O(n 3 2 c  A preliminary version of this work appeared in the Proceedings of the 9th ACM Symposium on Computational Geometry [30].  
Address: I 1947 Center Street Suite 600 Berkeley, California 94704  King's College London  King's College, Strand, London WC2R 2LS U.K.  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  Dept. of Computer Science,  Department of Computer Science,  
Pubnum: TR-93-034  
Email: marco@dcs.kcl.ac.uk  
Phone: 1-510-642-4274 FAX 1-510-643-7684  
Date: July 1993  
Abstract: We show some combinatorial and algorithmic results concerning sets of lines and polyhedral objects in 3-space. Our main results include: (4) Computing the intersection of two polyhedral terrains in 3-space with n total edges in time O(n 4=3+* + k 1=3 n 1+* + k log 2 n), where k is the size of the output, and * &gt; 0 an arbitrary small but fixed constant. This algorithm improves on the best previous result of Chazelle at al. [8]. The tools used to obtain these results include Plucker coordinates of lines, random sampling and polarity transformations in 3-space. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal. </author> <type> Personal communication. </type> <month> January </month> <year> 1992. </year>
Reference-contexts: The upper bound of Theorem 2 is almost tight. Using an idea of Agarwal <ref> [1] </ref> a slightly tighter O (n 3 log n) bound on F (L) can be found. 4 Translating sets of lines Once we know that the set of free lines with respect to L has complexity at most O (n 3 fi (n)) the first algorithmic problem to be addressed is <p> At the end of the query we return i f (l), which will be empty in case the query 9 line l is not free. Given a query line l we initialize i f (l) to <ref> [1; +1] </ref> and we locate the point p (l) in Plucker space in K (R) stored at the root of D (L). If p (l) falls out of any simplex or is within a simplex marked not-F, then we set i f (l) = ;.
Reference: [2] <author> P. K. Agarwal and J. Matousek. </author> <title> Ray shooting and parametric search. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 517-526, </pages> <year> 1992. </year>
Reference-contexts: If we interpret p 0 (l; v) and p (l) as hyperplanes we can answer equivalent problems which are an half-space range problem in 1-space and a half-space emptiness problem in 5-space. Using a multi-level data structure approach in <ref> [2] </ref> and [20] (see also [21] for an abstract treatment of multi-level data structures) we obtain that such test can be computed in time O (n 1+* =s 1=2 ) using a data structure of size s with jB t j s jB t j 2 .
Reference: [3] <author> P. K. Agarwal and M. Sharir. </author> <title> Applications of a new space partitioning technique. </title> <booktitle> In Proceedings of the 1991 Workshop on Algorithms and Data Structures, number 519 in Lecture Notes in Computer Science, </booktitle> <pages> pages 379-391. </pages> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: This first paper has been followed by others (e.g. [27] [28] [13] <ref> [3] </ref> [31] [10] [29]) in which the original ideas have been improved or applied to a range of new problems in 3-space. This paper is in the same line of research and it aims at improving bounds on the combinatorial structure of sets of lines.
Reference: [4] <author> B. Aronov, J. Matousek, and M. Sharir. </author> <title> On the sum of squares of cell complexities in hyperplane arrangements. </title> <booktitle> In Proceedings of the 7th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 307-313, </pages> <year> 1991. </year>
Reference-contexts: Under this general position hypothesis we have that any polyhedron K c (L) is simple. From Lemma 2.1 in <ref> [4] </ref> we have that the number of vertices of a simple polyhedron is an upper bound to the number of faces of any dimension bounding the polyhedron.
Reference: [5] <author> B. Aronov and M. Sharir. </author> <title> Triangles in space or building (and analyzing) castles in the air. </title> <journal> Combinatorica, </journal> <volume> 10(2) </volume> <pages> 137-173, </pages> <year> 1990. </year>
Reference-contexts: Most combinatorial results for polyhedral sets in 3-space describe bounds on sets of points (or planes via duality) in 3-space [14, 33]. Recently, Aronov and Sharir <ref> [5, 6] </ref> could find non-trivial bounds on the complexity of one cell in an arrangement of triangles in 3-space. This is equivalent to determining the worst case complexity of one isotopy class of points induced by a set of triangles in 3-space 1 .
Reference: [6] <author> B. Aronov and M. Sharir. </author> <title> Castles in the air revisited. </title> <booktitle> In Proceedings of the 8th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 146-256, </pages> <year> 1992. </year>
Reference-contexts: Most combinatorial results for polyhedral sets in 3-space describe bounds on sets of points (or planes via duality) in 3-space [14, 33]. Recently, Aronov and Sharir <ref> [5, 6] </ref> could find non-trivial bounds on the complexity of one cell in an arrangement of triangles in 3-space. This is equivalent to determining the worst case complexity of one isotopy class of points induced by a set of triangles in 3-space 1 .
Reference: [7] <author> B. Chazelle. </author> <title> An optimal algorithm for intersecting three-dimensional convex polyhedra. </title> <booktitle> In Proceedings of the 30th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 586-591, </pages> <year> 1989. </year>
Reference-contexts: The intersection of two convex polyhedra can be compute O (n) time which is optimal <ref> [7] </ref>. The intersection of two simple non-convex polyhedra can be computed in time O (n 8=5+* + k log n), where k is the output size [28]. <p> In Section 5 we present the algorithm for intersecting two polyhedral terrains. 2 Missing lines, stabbing lines and polarity Let us consider a well-known duality transformation between points and planes in 3-space, namely the polarity ffi <ref> [33, 7] </ref> which maps a point p = (a; b; c) distinct from the origin O into the plane ffi (p) of equation ax + by + cz = 1.
Reference: [8] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, and M. Sharir. </author> <title> Lines in space: </title> <booktitle> combinatorics, algorithms and applications. In Proc. of the 21st Symposium on Theory of Computing, </booktitle> <pages> pages 382-393, </pages> <year> 1989. </year>
Reference-contexts: This is equivalent to determining the worst case complexity of one isotopy class of points induced by a set of triangles in 3-space 1 . In a seminal paper of 1989 <ref> [8] </ref> Chazelle, Edelsbrunner, Guibas and Sharir use in an original way a range of techniques (Plucker coordinates of lines, geometric random sampling, segment trees) and obtain new bounds on the complexity of certain configurations of lines in 3-space as well as efficient algorithms for solving problems on polyhedral terrains. <p> An (n 2 ) lower bound for M (P ) is easy to construct and a slightly more complex (n 2 ff (n)) bound is mentioned in [17]. For a set of lines L: I (L) = fi (n 2 ) and M (L) = fi (n 4 ) <ref> [8] </ref>. In [8] a cubic upper bound is obtained for the lines vertically above L, which matches a cubic worst case lower bound. <p> For a set of lines L: I (L) = fi (n 2 ) and M (L) = fi (n 4 ) <ref> [8] </ref>. In [8] a cubic upper bound is obtained for the lines vertically above L, which matches a cubic worst case lower bound. The set F (L) is a superset of the set of lines vertically above L, since no fixed direction is involved in the definition of a free line. <p> In Section 3 we prove that F (L) = O (n 3 fi (n)) which almost matches the (n 3 ) lower bound in <ref> [8] </ref>. 1.2 Collision free translations of polyhedral objects Moving objects without collisions is an important problem in robotics and CAD/CAM in relation to assembly of objects composed of polyhedral parts [23]. General versions of the assembly problems for polyhedra in 3-space can be PSPACE-hard [23]. <p> The intersection of two simple non-convex polyhedra can be computed in time O (n 8=5+* + k log n), where k is the output size [28]. For the case of polyhedral terrains (which are graphs of piecewise-linear continuous bivariate functions) Chazelle et al. <ref> [8] </ref> obtain an intersection algorithm with time bound O (n 3=2+* + k log 2 n). <p> The algorithms for convex polyhedra and simple polyhedra satisfy this ideal condition. The result for terrains in <ref> [8] </ref> does not, since the best known algorithm for testing the intersection of two terrains has complexity O (n 4=3+* ) [8]. <p> The algorithms for convex polyhedra and simple polyhedra satisfy this ideal condition. The result for terrains in <ref> [8] </ref> does not, since the best known algorithm for testing the intersection of two terrains has complexity O (n 4=3+* ) [8]. In Section 5 we combine the approach of Chazelle et al. with recent results on halfspace range queries [20] obtaining a total running time O (n 4=3+* + k 1=3+* n 1+* + k log 2 n). <p> This algorithm matches the best known intersection-testing algorithm for k &lt; n, and is almost optimal for k &gt; n 3=2 (within a polylogarithmic factor). We refer to the algorithm in <ref> [8] </ref> as the CEGS-Algorithm. For the range 0 &lt; k &lt; n 3=2 our algorithm has better asymptotic performance than the CEGS-Algorithm and for k &gt; n 3=2 it is as fast. As follows from the discussion in [9] and [8], the running time is dominated by the time needed to <p> We refer to the algorithm in <ref> [8] </ref> as the CEGS-Algorithm. For the range 0 &lt; k &lt; n 3=2 our algorithm has better asymptotic performance than the CEGS-Algorithm and for k &gt; n 3=2 it is as fast. As follows from the discussion in [9] and [8], the running time is dominated by the time needed to find all intersections of an edge from one terrain with a face on the other terrain. The main new idea is to detect efficiently those edges that do not contribute to the intersection. <p> A standard perturbation argument <ref> [14, 8] </ref> shows that the maximum complexity of K (L) is attained by a set of hyperplanes in general position (i.e. any 5 hyperplanes meet in a single point). Under this general position hypothesis we have that any polyhedron K c (L) is simple. <p> corollary: Corollary 2 Given a set L of n lines in 3-space the complexity of the set of free lines F (L) is O (n 3 2 c log n ), for a suitable constant c. 8 Since the lines in the construction of an upper envelope of lines in <ref> [8] </ref> are particular free lines, the lower bound (n 3 ) in [8] holds for free lines. The upper bound of Theorem 2 is almost tight. <p> the complexity of the set of free lines F (L) is O (n 3 2 c log n ), for a suitable constant c. 8 Since the lines in the construction of an upper envelope of lines in <ref> [8] </ref> are particular free lines, the lower bound (n 3 ) in [8] holds for free lines. The upper bound of Theorem 2 is almost tight. <p> If n = m, we have T (n; n) = O (n 1:5+* ). 5 Intersecting polyhedral terrains 5.1 The CEGS-Algorithm We start recollecting the main features of the Hereditary Segment Tree (HST) introduced in <ref> [8] </ref> [9]. <p> Over the whole data structure each actual intersection can be charged to this event, which is called a witness intersection, at most O (log ffi n) times. Those intersections not found using witness intersections can be found using easier planar techniques <ref> [8] </ref>. During the preprocessing we build T (B; R) with the auxiliary trees T v . Moreover at each node t of a tree T v with associated list B t of length less than p n we build a data structure described in [8] of size quadratic in the number <p> be found using easier planar techniques <ref> [8] </ref>. During the preprocessing we build T (B; R) with the auxiliary trees T v . Moreover at each node t of a tree T v with associated list B t of length less than p n we build a data structure described in [8] of size quadratic in the number of blue edges, such that any witness intersection is detected in time O (log n). The overall time to construct such data structures is O (n 3=2+* ) and this cost contributes to the final overhead term of the CEGS-Algorithm. <p> Thus the cost of detecting witness intersection from now on is charged to the number of witness intersections k log ffi n. Choosing ffi = n * 0 for a positive * 0 &lt; * we obtain the overall time bound. To summarize, in the CEGS-algorithm <ref> [8, 9] </ref> we can distinguish four main cost factors. During preprocessing: (i) cost for setting up the HST data structure. (ii) cost for setting up the data structure to check witness intersections. <p> The bound on the preprocessing time of the algorithm and on the time of a single query depends on the total number of intersections to discover and not on their distribution over the tree. On the other hand any intersection that is discovered (witness intersection <ref> [8] </ref>) must be traced down to the leaves of the tree. As we observed the query time decreases with the level, therefore we obtain the maximum cost under the assumption that all intersections are discovered at the highest level possible, which amounts to saturating the high levels of the tree. <p> Also, we choose ffi = n * 0 . This completes the proof of Theorem 5. Theorem 5 and the reduction in <ref> [8, 9] </ref> lead to the following corollary: Corollary 3 The intersection of two terrains of total size n can be found in time O (n 4=3+* + K 1=3 n 1+* + K log 2 n), where K is the size of the intersection. 6 Conclusions We have shown some combinatorial
Reference: [9] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, and M. Sharir. </author> <title> Algorithms for bichromatic line segments problems and polyhedral terrains. </title> <note> To appear in Algorithmica. Also Tech. Rep. </note> <institution> UIUCDCS-R-90-1578, University of Illinois at Urbana Champaign, Dept. of Comp. Sci., </institution> <year> 1990. </year>
Reference-contexts: We refer to the algorithm in [8] as the CEGS-Algorithm. For the range 0 &lt; k &lt; n 3=2 our algorithm has better asymptotic performance than the CEGS-Algorithm and for k &gt; n 3=2 it is as fast. As follows from the discussion in <ref> [9] </ref> and [8], the running time is dominated by the time needed to find all intersections of an edge from one terrain with a face on the other terrain. The main new idea is to detect efficiently those edges that do not contribute to the intersection. <p> If n = m, we have T (n; n) = O (n 1:5+* ). 5 Intersecting polyhedral terrains 5.1 The CEGS-Algorithm We start recollecting the main features of the Hereditary Segment Tree (HST) introduced in [8] <ref> [9] </ref>. <p> Thus the cost of detecting witness intersection from now on is charged to the number of witness intersections k log ffi n. Choosing ffi = n * 0 for a positive * 0 &lt; * we obtain the overall time bound. To summarize, in the CEGS-algorithm <ref> [8, 9] </ref> we can distinguish four main cost factors. During preprocessing: (i) cost for setting up the HST data structure. (ii) cost for setting up the data structure to check witness intersections. <p> Also, we choose ffi = n * 0 . This completes the proof of Theorem 5. Theorem 5 and the reduction in <ref> [8, 9] </ref> lead to the following corollary: Corollary 3 The intersection of two terrains of total size n can be found in time O (n 4=3+* + K 1=3 n 1+* + K log 2 n), where K is the size of the intersection. 6 Conclusions We have shown some combinatorial
Reference: [10] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, and M. Sharir. </author> <title> Diameter, width, closest line pair and parametric search. </title> <booktitle> In Proceedings of the 8th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 120-129, </pages> <year> 1992. </year>
Reference-contexts: This first paper has been followed by others (e.g. [27] [28] [13] [3] [31] <ref> [10] </ref> [29]) in which the original ideas have been improved or applied to a range of new problems in 3-space. This paper is in the same line of research and it aims at improving bounds on the combinatorial structure of sets of lines.
Reference: [11] <author> B. Chazelle, T. Ottman, E. Soisalon-Soininen, and D. Wood. </author> <title> The complexity of decid-ability of separation. </title> <booktitle> In Proceedings of the 11th International Colloquium on Automata, Programming, and Languages, </booktitle> <pages> pages 125-134, </pages> <year> 1984. </year>
Reference-contexts: The problem whether for a class of polyhedral objects a separation direction always exists is discussed in [37]. Efficient assembly algorithms have been found in the case when the direction of movement is given for all the objects <ref> [24, 16, 11] </ref> (see [37] for a survey). In the planar case Pollack et al. give algorithms for separating two simple polygons by a sequence of translations [32].
Reference: [12] <author> K. Clarkson. </author> <title> New applications of random sampling in computational geometry. </title> <journal> Discrete & Computational Geometry, </journal> <volume> 2 </volume> <pages> 195-222, </pages> <year> 1987. </year> <month> 16 </month>
Reference-contexts: The convex polyhedra in K (R) are all disjoint and have a total of O (r 3 fi (r)) faces of any dimension. Therefore we can triangulate these Plucker polyhedra obtaining O (r 3 fi (r)) disjoint simplices. From the random sampling theory <ref> [12] </ref>, each simplex is cut by no more than O (n=r log r) of the Plucker hyperplanes corresponding to lines in L. Let s be a simplex in Plucker space so generated and let c be the corresponding cell in A G (R).
Reference: [13] <author> M. de Berg, D. Halperlin, M. Overmars, J. Snoeyink, and M. van Kreveld. </author> <title> Efficient ray-shooting and hidden surface removal. </title> <booktitle> In Proceedings of the 7th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 21-30, </pages> <year> 1991. </year>
Reference-contexts: This first paper has been followed by others (e.g. [27] [28] <ref> [13] </ref> [3] [31] [10] [29]) in which the original ideas have been improved or applied to a range of new problems in 3-space. This paper is in the same line of research and it aims at improving bounds on the combinatorial structure of sets of lines.
Reference: [14] <author> H. Edelsbrunner. </author> <title> Algorithms in Combinatorial Geometry. </title> <publisher> Springer Verlag, </publisher> <year> 1987. </year>
Reference-contexts: One of the reasons for this state of affairs is that the combinatorial properties of of lines and other 1-dimensional objects in 3-space are not well understood. Most combinatorial results for polyhedral sets in 3-space describe bounds on sets of points (or planes via duality) in 3-space <ref> [14, 33] </ref>. Recently, Aronov and Sharir [5, 6] could find non-trivial bounds on the complexity of one cell in an arrangement of triangles in 3-space. This is equivalent to determining the worst case complexity of one isotopy class of points induced by a set of triangles in 3-space 1 . <p> The upper bound on the running time of this algorithm depends on the combinatorial bound for F (L). 1.3 Intersection of polyhedral terrains Computing the intersection of polyhedra in 3-space is a basic problem in computational geometry <ref> [33, 14] </ref>. The intersection of two convex polyhedra can be compute O (n) time which is optimal [7]. The intersection of two simple non-convex polyhedra can be computed in time O (n 8=5+* + k log n), where k is the output size [28]. <p> A standard perturbation argument <ref> [14, 8] </ref> shows that the maximum complexity of K (L) is attained by a set of hyperplanes in general position (i.e. any 5 hyperplanes meet in a single point). Under this general position hypothesis we have that any polyhedron K c (L) is simple. <p> These vertices are the vertices of K (L 1 ()). The number of such vertices is O (n 2 ), by the Upper Bound Theorem for polytopes (see <ref> [14, Chapter 6,Theorem 6.12] </ref>). 2) jA (4; 1; L)j. These are vertices formed by intersecting an edge of K (L 1 ()) with an hyperplane from H 2 ().
Reference: [15] <author> H. Edelsbrunner, L. Guibas, and M. Sharir. </author> <title> The complexity and construction of many faces in arrangements of lines and segments. </title> <journal> Discrete & Computational Geometry, </journal> <volume> 5 </volume> <pages> 161-196, </pages> <year> 1990. </year>
Reference-contexts: The correctness of the algorithm comes from an argument similar to that of Theorem 3. The time bound for T (n; m) is O (n 3=4 m 3=4+* + n 1+* + m 1+* ), as follows from an analysis similar to one in <ref> [15] </ref>. If n = m, we have T (n; n) = O (n 1:5+* ). 5 Intersecting polyhedral terrains 5.1 The CEGS-Algorithm We start recollecting the main features of the Hereditary Segment Tree (HST) introduced in [8] [9].
Reference: [16] <author> J. Guibas and F. Yao. </author> <title> On translating sets of rectangles. </title> <booktitle> In Proceedings of the 12th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 154-160, </pages> <year> 1980. </year>
Reference-contexts: The problem whether for a class of polyhedral objects a separation direction always exists is discussed in [37]. Efficient assembly algorithms have been found in the case when the direction of movement is given for all the objects <ref> [24, 16, 11] </ref> (see [37] for a survey). In the planar case Pollack et al. give algorithms for separating two simple polygons by a sequence of translations [32].
Reference: [17] <author> D. Halperin and M. Sharir. </author> <title> New bounds for lower envelopes in three dimensions, with applications to visibility in terrains. </title> <booktitle> In Proceedings of the 9th ACM Symposium on Computational Geometry, </booktitle> <year> 1993. </year>
Reference-contexts: This result is proved by establishing an interesting duality relation (through a polarity transformation) between stabbing and missing lines in 3-space. A similar result is obtained in <ref> [17] </ref> using different techniques. The technique in [17] can be extended to prove a similar bound on the set of rays missing a terrain. <p> This result is proved by establishing an interesting duality relation (through a polarity transformation) between stabbing and missing lines in 3-space. A similar result is obtained in <ref> [17] </ref> using different techniques. The technique in [17] can be extended to prove a similar bound on the set of rays missing a terrain. An (n 2 ) lower bound for M (P ) is easy to construct and a slightly more complex (n 2 ff (n)) bound is mentioned in [17]. <p> The technique in <ref> [17] </ref> can be extended to prove a similar bound on the set of rays missing a terrain. An (n 2 ) lower bound for M (P ) is easy to construct and a slightly more complex (n 2 ff (n)) bound is mentioned in [17]. For a set of lines L: I (L) = fi (n 2 ) and M (L) = fi (n 4 ) [8]. In [8] a cubic upper bound is obtained for the lines vertically above L, which matches a cubic worst case lower bound.
Reference: [18] <author> J. Matousek. </author> <title> Construction of *-nets. </title> <booktitle> In Proceedings of the 5th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 1-10, </pages> <year> 1989. </year>
Reference-contexts: We present a proof of a bound on F (L) which follows closely the proof of an upper bound on the set of lines stabbing n triangles in 3-space [31]. Given the planar arrangement of lines A G (L) on G we use Matousek's technique <ref> [18, 19] </ref> to partition the plane G into a set G (L) of O (r 2 ) triangles so that no triangle meets more than O (n=r) hyperplanes. Let be one of these triangles on G.
Reference: [19] <author> J. Matousek. </author> <title> Cutting hyperplane arrangements. </title> <booktitle> In Proceedings of the 6th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 1-9, </pages> <year> 1990. </year>
Reference-contexts: We present a proof of a bound on F (L) which follows closely the proof of an upper bound on the set of lines stabbing n triangles in 3-space [31]. Given the planar arrangement of lines A G (L) on G we use Matousek's technique <ref> [18, 19] </ref> to partition the plane G into a set G (L) of O (r 2 ) triangles so that no triangle meets more than O (n=r) hyperplanes. Let be one of these triangles on G.
Reference: [20] <author> J. Matousek. </author> <title> Reporting points in halfspaces. </title> <booktitle> In Proceedings of the 32th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 207-215, </pages> <year> 1991. </year>
Reference-contexts: The result for terrains in [8] does not, since the best known algorithm for testing the intersection of two terrains has complexity O (n 4=3+* ) [8]. In Section 5 we combine the approach of Chazelle et al. with recent results on halfspace range queries <ref> [20] </ref> obtaining a total running time O (n 4=3+* + k 1=3+* n 1+* + k log 2 n). This algorithm matches the best known intersection-testing algorithm for k &lt; n, and is almost optimal for k &gt; n 3=2 (within a polylogarithmic factor). <p> If we interpret p 0 (l; v) and p (l) as hyperplanes we can answer equivalent problems which are an half-space range problem in 1-space and a half-space emptiness problem in 5-space. Using a multi-level data structure approach in [2] and <ref> [20] </ref> (see also [21] for an abstract treatment of multi-level data structures) we obtain that such test can be computed in time O (n 1+* =s 1=2 ) using a data structure of size s with jB t j s jB t j 2 .
Reference: [21] <author> J. Matousek. </author> <title> Range searching with efficient hierarchical cuttings. </title> <booktitle> In Proceedings of the 8th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 276-285, </pages> <year> 1992. </year>
Reference-contexts: If we interpret p 0 (l; v) and p (l) as hyperplanes we can answer equivalent problems which are an half-space range problem in 1-space and a half-space emptiness problem in 5-space. Using a multi-level data structure approach in [2] and [20] (see also <ref> [21] </ref> for an abstract treatment of multi-level data structures) we obtain that such test can be computed in time O (n 1+* =s 1=2 ) using a data structure of size s with jB t j s jB t j 2 .
Reference: [22] <author> N. Megiddo. </author> <title> Linear programming in linear time when the dimension is fixed. </title> <journal> Journal of ACM, </journal> <volume> 31(1) </volume> <pages> 115-126, </pages> <year> 1984. </year>
Reference-contexts: we separate one set from the other using one translation v? This is equivalent to ask whether: 9v [ i2A;j2B In turns this is equivalent to solving jAjjBj linear inequalities, which we can solve in time time O (jAjjBj) using for example Megiddo's method for linear programming in linear time <ref> [22] </ref>. A quadratic method is obtained also by modifying for lines a method of Nurmi and Sack [25] for polyhedra, followed by an application of linear programming. The discussion of the previous section gives us a first handle to produce a a subquadratic algorithm.
Reference: [23] <author> B. Natarajan. </author> <title> On planning assemblies. </title> <booktitle> In Proceedings of the 4th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 299-308, </pages> <year> 1988. </year>
Reference-contexts: prove that F (L) = O (n 3 fi (n)) which almost matches the (n 3 ) lower bound in [8]. 1.2 Collision free translations of polyhedral objects Moving objects without collisions is an important problem in robotics and CAD/CAM in relation to assembly of objects composed of polyhedral parts <ref> [23] </ref>. General versions of the assembly problems for polyhedra in 3-space can be PSPACE-hard [23]. In this paper we discuss some restricted types of assembly problems for which we can design efficient algorithms. <p> (n 3 ) lower bound in [8]. 1.2 Collision free translations of polyhedral objects Moving objects without collisions is an important problem in robotics and CAD/CAM in relation to assembly of objects composed of polyhedral parts <ref> [23] </ref>. General versions of the assembly problems for polyhedra in 3-space can be PSPACE-hard [23]. In this paper we discuss some restricted types of assembly problems for which we can design efficient algorithms. The problem whether for a class of polyhedral objects a separation direction always exists is discussed in [37].
Reference: [24] <author> O. Nurmi. </author> <title> On translating a set of objects in 2- and 3-dimensional space. Computer Vision, </title> <journal> Graphics, and Image Processing, </journal> <volume> 36 </volume> <pages> 42-52, </pages> <year> 1986. </year>
Reference-contexts: The problem whether for a class of polyhedral objects a separation direction always exists is discussed in [37]. Efficient assembly algorithms have been found in the case when the direction of movement is given for all the objects <ref> [24, 16, 11] </ref> (see [37] for a survey). In the planar case Pollack et al. give algorithms for separating two simple polygons by a sequence of translations [32].
Reference: [25] <author> O. Nurmi and J. Sack. </author> <title> Separating a polyhedron by one translation from a set of obstacles. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Proc. Workshop on Graph-Theoretic Concepts in Computer Science, volume 344 of Lecture Notes in Computer Science, </booktitle> <pages> pages 202-212, </pages> <year> 1988. </year>
Reference-contexts: When C 1 and C 2 are two convex polyhedra V (C 1 ; C 2 ) = fi (n) and V (C 1 ; C 2 ) is computed in time O (n) <ref> [25] </ref>. In this paper we consider the case V (L 1 ; L 2 ) where L 1 and L 2 are sets of lines in 3-space. We show that V (L 1 ; L 2 ) = fi (n). <p> We show that V (L 1 ; L 2 ) = fi (n). One feasible direction can be found easily in time O (n 2 ) by adapting a technique in <ref> [25] </ref>. We give in Section 4 a non-trivial algorithm that finds a feasible direction in time O (n 1:5+* ), for every * &gt; 0. <p> A quadratic method is obtained also by modifying for lines a method of Nurmi and Sack <ref> [25] </ref> for polyhedra, followed by an application of linear programming. The discussion of the previous section gives us a first handle to produce a a subquadratic algorithm.
Reference: [26] <author> D. Nussbaum and J. Sack. </author> <title> Translation separability of polyhedra. </title> <booktitle> In Abstracts of the first Canadian Conference on Computational Geometry, </booktitle> <pages> page 34, </pages> <year> 1989. </year>
Reference-contexts: When P 1 and P 2 are two simple polyhedra, V (P 1 ; P 2 ) = fi (n 4 ) in the worst case <ref> [26] </ref> and 2 the set V (P 1 ; P 2 ) can be computed in time O (n 4 log n).
Reference: [27] <author> M. Pellegrini. </author> <title> Stabbing and ray shooting in 3-dimensional space. </title> <booktitle> In Proceedings of the 6th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 177-186, </pages> <year> 1990. </year>
Reference-contexts: This first paper has been followed by others (e.g. <ref> [27] </ref> [28] [13] [3] [31] [10] [29]) in which the original ideas have been improved or applied to a range of new problems in 3-space. This paper is in the same line of research and it aims at improving bounds on the combinatorial structure of sets of lines.
Reference: [28] <author> M. Pellegrini. </author> <title> Ray shooting on triangles in 3-space. </title> <address> Algorithmica,9:471-494, </address> <year> 1993. </year> <month> 17 </month>
Reference-contexts: This first paper has been followed by others (e.g. [27] <ref> [28] </ref> [13] [3] [31] [10] [29]) in which the original ideas have been improved or applied to a range of new problems in 3-space. This paper is in the same line of research and it aims at improving bounds on the combinatorial structure of sets of lines. <p> The intersection of two convex polyhedra can be compute O (n) time which is optimal [7]. The intersection of two simple non-convex polyhedra can be computed in time O (n 8=5+* + k log n), where k is the output size <ref> [28] </ref>. For the case of polyhedral terrains (which are graphs of piecewise-linear continuous bivariate functions) Chazelle et al. [8] obtain an intersection algorithm with time bound O (n 3=2+* + k log 2 n). <p> If we choose r to be a constant then the query time is O (log 2 n). If we choose r = n - and we use auxiliary fast point location data structure (e.g. see <ref> [31, 28] </ref>) we can reduce the query time to O (log n). 4.1 Finding a feasible direction Given two sets of lines A and B can we separate one set from the other using one translation v? This is equivalent to ask whether: 9v [ i2A;j2B In turns this is equivalent
Reference: [29] <author> M. Pellegrini. </author> <title> On Collision-free placements of simplices and the closest pair of lines in 3-space. </title> <note> To appear in SIAM J. on Computing. Preliminary version in Proceedings of the 8th ACM Symposium on Computational Geometry, pages 130-137, </note> <year> 1992. </year>
Reference-contexts: This first paper has been followed by others (e.g. [27] [28] [13] [3] [31] [10] <ref> [29] </ref>) in which the original ideas have been improved or applied to a range of new problems in 3-space. This paper is in the same line of research and it aims at improving bounds on the combinatorial structure of sets of lines. <p> We can interpret this bilinear form as testing the relative position of a point p 0 (l 0 ; v) with respect to the hyperplane 0 (l) on a 2-dimensional projective plane G. Considering the signs (+1; 1) as boolean values, the following technical lemma is proved in <ref> [29] </ref>: Lemma 2 ([29]) A line l is above a set L = fl i g of lines with respect to v if and only if the following predicate is true: ^ [(l i l) xor tsp (l i ; l; v)] (5) Our aim is to find a bound on
Reference: [30] <author> M. Pellegrini. </author> <title> On Lines Missing Polyhedral Sets in 3-Space. </title> <booktitle> In Proceedings of the 9th ACM Symposium on Computational Geometry, </booktitle> <year> 1993. </year>
Reference-contexts: A related challenge is to use effectively these combinatorial bounds for solving algorithmic visibility problems in 3-space. In a preliminary version of this paper <ref> [30] </ref> the repeated computation of the shadow of a star-shaped polyhedron from view-points given on-line is considered. Unfortunately the solution sketched in [30] has a flaw. <p> A related challenge is to use effectively these combinatorial bounds for solving algorithmic visibility problems in 3-space. In a preliminary version of this paper <ref> [30] </ref> the repeated computation of the shadow of a star-shaped polyhedron from view-points given on-line is considered. Unfortunately the solution sketched in [30] has a flaw. <p> At the moment it is not clear thus whether the time and storage complexity claimed in <ref> [30] </ref> on this problem can be achieved.
Reference: [31] <author> M. Pellegrini and P. Shor. </author> <title> Finding stabbing lines in 3-space. </title> <journal> Discrete & Computational Geometry, </journal> <volume> 8 </volume> <pages> 191-208, </pages> <year> 1992. </year>
Reference-contexts: This first paper has been followed by others (e.g. [27] [28] [13] [3] <ref> [31] </ref> [10] [29]) in which the original ideas have been improved or applied to a range of new problems in 3-space. This paper is in the same line of research and it aims at improving bounds on the combinatorial structure of sets of lines. <p> is the O (n 3 fi (n)) bound on the complexity of the 1 The results of Aronov and Sharir are more general and hold in d-space. 1 set of lines stabbing a set of convex polyhedra, where fi (n) = 2 c p log n is a subpolynomial function <ref> [31] </ref>. For any of the above mentioned sets of lines its complexity can be expressed as the number of extremal lines in the set. <p> Therefore we can apply the result on the set of stabbing lines described in <ref> [31] </ref> to bound the number of extremal stabbing lines for P ffi . <p> We present a proof of a bound on F (L) which follows closely the proof of an upper bound on the set of lines stabbing n triangles in 3-space <ref> [31] </ref>. Given the planar arrangement of lines A G (L) on G we use Matousek's technique [18, 19] to partition the plane G into a set G (L) of O (r 2 ) triangles so that no triangle meets more than O (n=r) hyperplanes. <p> We obtain the following equation F (n) r 2 n 2 + n 3 r + n 3 + r 3 F (n=r) + r 2 F (n=r) (8) where we omit multiplicative constants. Equation 8 is solved in <ref> [31] </ref> and we obtain the main theorem: Theorem 2 Given a set L of n lines in 3-space the complexity of P p for a suitable constant c. and the following corollary: Corollary 2 Given a set L of n lines in 3-space the complexity of the set of free lines <p> If we choose r to be a constant then the query time is O (log 2 n). If we choose r = n - and we use auxiliary fast point location data structure (e.g. see <ref> [31, 28] </ref>) we can reduce the query time to O (log n). 4.1 Finding a feasible direction Given two sets of lines A and B can we separate one set from the other using one translation v? This is equivalent to ask whether: 9v [ i2A;j2B In turns this is equivalent
Reference: [32] <author> R. Pollack, M. Sharir, and S. Sifrony. </author> <title> Separating two simple polygons by a sequence of translations. </title> <journal> Discrete & Computational Geometry, </journal> <volume> 3 </volume> <pages> 123-136, </pages> <year> 1988. </year>
Reference-contexts: Efficient assembly algorithms have been found in the case when the direction of movement is given for all the objects [24, 16, 11] (see [37] for a survey). In the planar case Pollack et al. give algorithms for separating two simple polygons by a sequence of translations <ref> [32] </ref>. If we allow more complicated types of movement the assembly problem merges with the much studied motion planning problems (see [34] for a survey).
Reference: [33] <author> F. Preparata and M. Shamos. </author> <title> Computational Geometry: an Introduction. </title> <publisher> Springr Verlag, </publisher> <year> 1985. </year>
Reference-contexts: One of the reasons for this state of affairs is that the combinatorial properties of of lines and other 1-dimensional objects in 3-space are not well understood. Most combinatorial results for polyhedral sets in 3-space describe bounds on sets of points (or planes via duality) in 3-space <ref> [14, 33] </ref>. Recently, Aronov and Sharir [5, 6] could find non-trivial bounds on the complexity of one cell in an arrangement of triangles in 3-space. This is equivalent to determining the worst case complexity of one isotopy class of points induced by a set of triangles in 3-space 1 . <p> The upper bound on the running time of this algorithm depends on the combinatorial bound for F (L). 1.3 Intersection of polyhedral terrains Computing the intersection of polyhedra in 3-space is a basic problem in computational geometry <ref> [33, 14] </ref>. The intersection of two convex polyhedra can be compute O (n) time which is optimal [7]. The intersection of two simple non-convex polyhedra can be computed in time O (n 8=5+* + k log n), where k is the output size [28]. <p> In Section 5 we present the algorithm for intersecting two polyhedral terrains. 2 Missing lines, stabbing lines and polarity Let us consider a well-known duality transformation between points and planes in 3-space, namely the polarity ffi <ref> [33, 7] </ref> which maps a point p = (a; b; c) distinct from the origin O into the plane ffi (p) of equation ax + by + cz = 1. <p> If no two facets of P are coplanar then there is a one-to-one correspondence between k-faces of P and (2 k)-faces of P ffi . The polarity transformation is convolutory (i.e. (P ffi ) ffi = P ) <ref> [33] </ref>. Given a line l as a locus of points we obtain in the dual space a locus of planes which is a 1-dimensional pencil of planes. The line l ffi dual to l is the axis of the pencil.
Reference: [34] <author> J. Schwartz and M. Sharir. </author> <title> A survey of motion planning and related geometric algorithms. </title> <editor> In D. Kapur and J. Mundy, editors, </editor> <booktitle> Geometric Reasoning, </booktitle> <pages> pages 157-169. </pages> <publisher> The MIT press, </publisher> <year> 1989. </year>
Reference-contexts: In the planar case Pollack et al. give algorithms for separating two simple polygons by a sequence of translations [32]. If we allow more complicated types of movement the assembly problem merges with the much studied motion planning problems (see <ref> [34] </ref> for a survey). We consider an intermediate case where the direction of movement is part of the answer to the problem, and it ranges over the whole sphere of directions, but we allow a single simultaneous translation.
Reference: [35] <author> D. M. H. Sommerville. </author> <title> Analytical geometry of three dimensions. </title> <publisher> Cambridge University Press, </publisher> <year> 1951. </year>
Reference-contexts: The six quantities ~ ij = x i y j x j y i for ij = 01; 02; 03; 12; 23; 31 are called Plucker coordinates of the line l (oriented from x to y) <ref> [35] </ref>. These coordinates are the two-by-two minors of the two-by-four matrix formed by the coordinates of the point a (on the first row) and b (on the second row).
Reference: [36] <author> J. Stolfi. </author> <title> Primitives for computational geometry. </title> <type> Technical Report 36, </type> <institution> Digital SRC, </institution> <year> 1989. </year>
Reference-contexts: Equation 3 can be rewritten in the form l (p l 0 ) = 0, which is equivalent to requiring point p (l 0 ) to belong to hyperplane (l). Computations that are standard in real spaces can be done in oriented projective spaces using a method in <ref> [36] </ref>. For any given pair of lines l and l 0 the sign of l (p l 0 ) is called the Plucker relative orientation of l and l 0 , denoted by l l 0 .
Reference: [37] <author> G. Toussaint. </author> <title> Movable separability of sets. </title> <editor> In G. Toussaint, editor, </editor> <booktitle> Computational Geometry, </booktitle> <pages> pages 335-375. </pages> <publisher> North-Holland, </publisher> <year> 1985. </year> <month> 18 </month>
Reference-contexts: General versions of the assembly problems for polyhedra in 3-space can be PSPACE-hard [23]. In this paper we discuss some restricted types of assembly problems for which we can design efficient algorithms. The problem whether for a class of polyhedral objects a separation direction always exists is discussed in <ref> [37] </ref>. Efficient assembly algorithms have been found in the case when the direction of movement is given for all the objects [24, 16, 11] (see [37] for a survey). In the planar case Pollack et al. give algorithms for separating two simple polygons by a sequence of translations [32]. <p> The problem whether for a class of polyhedral objects a separation direction always exists is discussed in <ref> [37] </ref>. Efficient assembly algorithms have been found in the case when the direction of movement is given for all the objects [24, 16, 11] (see [37] for a survey). In the planar case Pollack et al. give algorithms for separating two simple polygons by a sequence of translations [32]. If we allow more complicated types of movement the assembly problem merges with the much studied motion planning problems (see [34] for a survey).
References-found: 37

