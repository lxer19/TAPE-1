URL: http://www.cs.umr.edu/techreports/93-13.ps
Refering-URL: http://www.cs.umr.edu/techreports/
Root-URL: 
Title: OPERATIONAL EVALUATION OF RESPONSIVENESS PROPERTIES  
Author: Grace Tsai, Matt Insall and Bruce McMillin 
Date: June 30, 1993  
Pubnum: CSC-93-06  
Abstract: This work was supported in part by the National Science Foundation under Grant Numbers MSS-9216479 and CDA-9222827, and, in part, from the Air Force Office of Scientific Research under contract number F49620-92-J-0546. Grace Tsai and Bruce McMillin are with the Department of Computer Science at the University of Missouri-Rolla, Rolla, MO 65401. Matt Insall is with the Department of Mathematics and Statistics at the University of Missouri-Rolla, Rolla, MO 65401. 
Abstract-found: 1
Intro-found: 1
Reference: - <author> 20 - [LeSA92] de Lemos, R., Saeed, A. and Anderson, T., </author> <title> ``Analysis of Timeliness Requirements in Safety-Critical Systems,'', </title> <booktitle> Lecture Notes in Computer Science 571, Formal Techniques in Real-Time and Fault-Tolerant Systems, </booktitle> <year> 1992. </year> <pages> pp. 171-192. </pages> <editor> [LeSW92] de Lemos, R., Saeed, A. and Waterworth, A., </editor> <title> ``Exception Handling in Real-Time Software from Specification to Design,'', </title> <booktitle> The Second International Workshop on Responsive Computing Systems, </booktitle> <year> 1992, </year> <pages> pp. 108-121. </pages>
Reference: [Hoar69] <author> Hoare, C. </author> <title> ``An Axiomatic Basis for Computer Programming'', </title> <journal> Communications of the ACM, </journal> <volume> 12, 10, </volume> <year> 1969, </year> <pages> pp. 576-583. </pages>
Reference-contexts: The actions performed in the translation include updates of auxiliary variables, sending and receiving messages, which are described below. - 7 - (P j , !, t i , u ): (P j !, u , t i ) in CSP <ref> [Hoar69] </ref> notation, which denotes that a message with content u is sent to process P j at time t i with respect to the clock of process P i . (P j , ?, t i , u ): (P j ?u , t i ) in CSP notation, which denotes
Reference: [Lamp78] <author> Lamport, L., </author> <title> ``Time, Clocks and the Ordering of Events in a Distributed System,'' </title> <journal> Communications of the ACM, </journal> <volume> Vol. 21, No. 7, </volume> <year> 1978, </year> <pages> pp. 558-565. </pages>
Reference-contexts: The incorporation of logical clocks into the translation is to obtain a total ordering of all causally related events of the system, which is based on the concept of a ``happened before'' relation <ref> [Lamp78] </ref>. To keep track of operations, each process must maintain a history that records all the operations performed and observed so far, which is defined below. <p> OPERATIONAL EVALUATION OF RESPONSIVENESS ASSERTIONS We have shown that the translation process defines a global schedule (a history) for all the local operations of processes in the distributed system. This history is defined in terms of multiple clock readings through the incorporation of a "happened before" relation <ref> [Lamp78] </ref>. This section describes how processes can utilize their own histories to check the satisfaction of responsiveness assertions in the execution environment. The idea is that the run-time satisfaction of responsiveness assertions is guaranteed if there exist no tuples in a history that violate the assertion to be evaluated. <p> The reason is - 14 - that the time indexes of tuples in V h are generated according to a "happened before" <ref> [Lamp78] </ref> relation, and there are no overlapped time indexes between the sets P (V h , assertion 1 ) and P (V h , assertion 2 ), so there is no need to keep the tuples for assertion 1 . Then, we consider the overhead of communication.
Reference: [LuMc91b] <author> Lutfiyya, H. and McMillin, B. </author> <title> ``Formal Generation Of Executable Assertions For A Fault-Tolerant Parallel Matrix Relaxation,'' </title> <institution> UMR Department of Computer Science Technical Report CSC-91-13, </institution> <month> October, </month> <year> 1991. </year>
Reference-contexts: In other words, the implementation dependencies are isolated first and then they check if system specification and the required implementation dependencies can be enforced by control structures that meet the required timing constraints. - 3 - The proposed approach is based on Changeling <ref> [LuMc91b, LuSM92, LuSM92a] </ref>, which chooses axiomatic proof system as the mathematical model and uses assertions generated from the proof outline to detect errors. However, this paper focuses on establishing run-time satisfaction of system behavior-characterized by responsiveness property, for the life-critical system.
Reference: [LuSM92] <author> Lutfiyya, H., Schollmeyer, M., and McMillin, B., </author> <title> ``Fault-Tolerant Distributed Sort Generated from a Verification Proof Outline,'' 2nd Responsive Systems Symposium, </title> <note> Springer-Verlag (to appear). </note>
Reference-contexts: In other words, the implementation dependencies are isolated first and then they check if system specification and the required implementation dependencies can be enforced by control structures that meet the required timing constraints. - 3 - The proposed approach is based on Changeling <ref> [LuMc91b, LuSM92, LuSM92a] </ref>, which chooses axiomatic proof system as the mathematical model and uses assertions generated from the proof outline to detect errors. However, this paper focuses on establishing run-time satisfaction of system behavior-characterized by responsiveness property, for the life-critical system.
Reference: [LuSM92a] <author> Lutfiyya, H., Schollmeyer, M., and McMillin, B., </author> <title> ``Formal Generation of Executable Assertions for Application-Oriented Fault Tolerance,'' </title> <institution> UMR Department of Computer Science Technical Report CSC-92-15, </institution> <month> October, </month> <year> 1992. </year>
Reference-contexts: In other words, the implementation dependencies are isolated first and then they check if system specification and the required implementation dependencies can be enforced by control structures that meet the required timing constraints. - 3 - The proposed approach is based on Changeling <ref> [LuMc91b, LuSM92, LuSM92a] </ref>, which chooses axiomatic proof system as the mathematical model and uses assertions generated from the proof outline to detect errors. However, this paper focuses on establishing run-time satisfaction of system behavior-characterized by responsiveness property, for the life-critical system.
Reference: [LuSM92b] <author> Lutfiyya, H., Sun, A., and McMillin, B., </author> <title> ``Fault-Tolerant Concurrent Branch and Bound Algorithm Derived from Program Verification,'' </title> <booktitle> The Sixteen Annual Internal Computer Software and Applications Conference, </booktitle> <year> 1992, </year> <pages> pp. 182-187. </pages>
Reference: [Male90] <author> Malek, M., </author> <title> "Responsive Systems: A Challenge for the Nineties," Keynote Address, </title> <booktitle> Proc. EUROMICRO90, 16th Symp. in Microprocessing and Microprogramming, </booktitle> <address> Amersterdam, The Netherlands, </address> <publisher> North Holland, </publisher> <year> 1990, </year> <pages> pp. 9-16, pp. 622-628. </pages>
Reference-contexts: 1. INTRODUCTION A responsive system <ref> [Male90] </ref> is one which responds to internal programs or external inputs in a timely, dependable and predictable manner. In such life-critical system, any failure can cause catastrophe, and ensuring run-time satisfaction of assertions---expected behavior, is a necessity.
Reference: [Mok91] <author> Mok, Aloysium K. </author> <title> ``Coping with Implementation Dependencies in Real-Time Systme Verification,'' </title> <booktitle> Lecture Notes in Computer Science 600, Real-Time: Theory in Practice, 1991 pp. </booktitle> <pages> 485-501. </pages>
Reference-contexts: This approach---operational evaluation of assertions provides software safety through implicit redundancy, since safety constraints or run-time satisfaction are examined upon the communications. There are other approaches to cope with dependencies in the execution environment. In <ref> [Mok91] </ref>, implementation dependencies, e.g., architecture or resource constraints, are explicitly identified and are brought in as need.
Reference: [PePn90] <author> Peled, D. and Pnueli, A. </author> <title> ``Proving Partial Order Liveness Properties,'' </title> <booktitle> 17th Colloquium on Automata, Language and Programming, edited by M.S. Peterson, </booktitle> <year> 1990, </year> <pages> pp. 553-571. - 21 </pages> - 
Reference-contexts: In such systems, bounded response is crucial and one failure can cause a catastrophe. The logic is called Interval Temporal Logic (ITL), which supports the analysis of responsiveness properties-a subset of the liveness properties. This ITL is an extension of Interleaving Set Temporal Logic (ISTL * ) <ref> [PePn90] </ref>, which adopts a partial order semantics. Hence, the logic ITL captures the temporal and distributed aspects of responsive systems.
References-found: 10

