URL: http://www.cs.cmu.edu/afs/andrew/usr/hx22/papers/rr-96-192.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs/user/hwxi/www/manuscripts.html
Root-URL: 
Email: Email: hwxi@cs.cmu.edu  
Title: An Induction Measure on -terms and Its Applications 1  
Author: Hongwei Xi 
Note: 1 Research Report N. 96-192,  
Address: 5000 Forbes Avenue Pittsburgh, PA 15213  Pittsburgh  
Affiliation: Department of Mathematical Sciences Carnegie Mellon University  Mathematics Department, Carnegie Mellon University,  
Abstract-found: 0
Intro-found: 1
Reference: [And71] <author> P.B. </author> <title> Andrews (1971), Resolution in type theory, </title> <journal> J. Symbolic Logic 36, </journal> <pages> pp. 414-432. </pages>
Reference-contexts: A proof of a weak normalisation theorem for simply typed -calculus can be given by a method originating from Turing's work [Gan80], independently invented by Prawitz [Pra65] in proof theory. A detailed account of it can also be found in <ref> [And71] </ref>. Several authors have invented between techniques to infer from this result strong normalisation of simply typed -calculus and related systems, see [Ned73], [Klo80], [deGr93], and [KW94].
Reference: [Bar76] <editor> H.P. Barendregt et al. </editor> <year> (1976), </year> <title> Some notes on lambda reduction, </title> <type> Preprint No. 22, </type> <institution> University of Utrecht, Department of mathematics, </institution> <note> pp. 13-53. </note>
Reference-contexts: Roughly speaking, when a fi-redex (x:u)v is contracted, we have to check that v has a normal form if x does not occur free in u. This idea of memorising a subterm that is erased is due to Nederpelt and Klop, and can also be found in <ref> [Bar76] </ref>, where a perpetual strategy F 1 is introduced to prove the conservation theorem for K-calculus, and in [BK82], where a characterisation on perpetual redexes is presented. With this observation, we introduce a notion of hybrid relation, or . l -relation. <p> Many results in the paper are also done in the frameork of [RS95], but the arguments in our opinion - are more involved in some cases. There exists a close similarity between . l -relation and the perpetual strategies in <ref> [Bar76] </ref> and [BK82]. Other ideas of transforming strong normalisation into weak normalisation can also be found in [Ned73], [Klo80], [deGr93] and [KW94]. . l -relation brings out inner fi-redexes or their residuals by leftmost reductions and subterm relations.
Reference: [Bar84] <author> H.P. </author> <title> Barendregt (1984), The Lambda Calculus: Its Syntax and Semantics, </title> <publisher> North-Holland publishing company, Amsterdam. </publisher>
Reference-contexts: In Section 6, a syntactic proof of the strong normalisation theorem for pure simply typed -calculus is given. 6. some remarks on . l -relation are drawn. 2 2. Preliminaries This section briefly describes some notations used throughout the paper. We assume the familiarity with -calculus <ref> [Bar84] </ref>. The set of -terms is denoted by fl. We write t; u; v; w : : : for -terms, r; : : : for fi-redexes, and x; y; : : : for variables. We assume -conversion to be applied whenever necessary. <p> We assume Barendregt's variable convention to avoid name collisions. We also assume some elementary properties of substitution, e.g. the substitution lemma (Lemma 2.1.16 <ref> [Bar84] </ref>). <p> Let t l Then H l (t) = H (t l ) &lt; 1 by induction hypothesis since S (t l ) &lt; S (t). This yields H (t) = 1 + maxfH s (t); H l (t)g &lt; 1. The following lemma, similar to Lemma 13.4.5 in <ref> [Bar84] </ref>, is needed in the proof of the upcoming H-S lemma. <p> Lemma 3.2 Given t = C [r], where r = (x:u)v is the leftmost fi-redex in t; if S (v) &lt; 1 and S (t l ) &lt; 1 for t l = C [ufx := vg], then S (t) &lt; 1. Proof See <ref> [Bar84] </ref>. Lemma 3.3 (H-S) If H (t) &lt; 1 then S (t) &lt; 1. Proof We proceed by induction on H (t). If H (t) = 0 then t is a variable and thus S (t) = 0 &lt; 1. <p> Also H (t 1i ) = H (t fl 1i ) &lt; 1. This yields H s (t) &lt; 1. For those who are familiar with the F 1 strategy in <ref> [Bar84] </ref>, it can be readily proven that Lemma 5..2 is equivalent to the fact that F 1 is perpetual. <p> The intuition behind the proof is showing simultaneously that the leftmost reduction sequence from t is finite and every leftmost redex contracted is a fi P -redex. This is closely related to the method used in <ref> [Bar84] </ref> but works in a wider context. This also summarises the key idea in [BK82]. Now we are ready to prove the well-known conservation theorem and the characterisation theorem on perpetual redexes in [BK82]. <p> This contradicts that r is a perpetual redex. Hence the corollary has been justified. The corresponding proofs in <ref> [Bar84] </ref> and [BK82] are proven using perpetual strategies, while this proof simply shows what happens to the residuals of C [ ]-special redex r in H-relation sequences from C [r]. <p> The main difference between induction on H and a perpetual strategy lies in that the former brings out inner redexes using H-relations while the latter enters a term to find them. Our proof captures the essential ideas in <ref> [Bar84] </ref> and [BK82], avoids some much involved arguments in [BK82], and is perhaps easier to follow. This can be viewed as a generalisation as well as a simplification. 6.
Reference: [BK82] <author> J.A. Bergstra and J.W. </author> <title> Klop (1982), Strong normalization and perpetual reductions in the lambda calculus, </title> <journal> J. Inform. Process. Cybernet. </journal> <volume> 18 (718), </volume> <pages> pp. 403-417. </pages>
Reference-contexts: This idea of memorising a subterm that is erased is due to Nederpelt and Klop, and can also be found in [Bar76], where a perpetual strategy F 1 is introduced to prove the conservation theorem for K-calculus, and in <ref> [BK82] </ref>, where a characterisation on perpetual redexes is presented. With this observation, we introduce a notion of hybrid relation, or . l -relation. <p> First a new proof of the finiteness of developments theorem is presented, which is quite concise when compared with other proofs in the literature. We then demonstrate a short proof for the conservation theorem in K calculus theorem and a much simplified proof for the main result in <ref> [BK82] </ref>, namely, the characterisation of perpetual redexes. Turning our attention to a typed system, we present a syntactic proof of the strong normalisation theorem for simply typed -calculus. Lastly, some relations between H and other methods are mentioned. <p> In Section 4, a fundamental theorem in -calculus, finiteness of developments, is proven via the notion of . l -relation. 4. In Section 5, the conservation theorem for K-calculus and the characterisation of perpetual redexes in <ref> [BK82] </ref> are presented. 5. In Section 6, a syntactic proof of the strong normalisation theorem for pure simply typed -calculus is given. 6. some remarks on . l -relation are drawn. 2 2. Preliminaries This section briefly describes some notations used throughout the paper. <p> This is closely related to the method used in [Bar84] but works in a wider context. This also summarises the key idea in <ref> [BK82] </ref>. Now we are ready to prove the well-known conservation theorem and the characterisation theorem on perpetual redexes in [BK82]. Corollary 5.7 (Conservation Theorem) If t ! t 0 by the contraction of a fi I -redex then the strong normalisability of t 0 implies the strong normalisability of t. <p> This is closely related to the method used in [Bar84] but works in a wider context. This also summarises the key idea in <ref> [BK82] </ref>. Now we are ready to prove the well-known conservation theorem and the characterisation theorem on perpetual redexes in [BK82]. Corollary 5.7 (Conservation Theorem) If t ! t 0 by the contraction of a fi I -redex then the strong normalisability of t 0 implies the strong normalisability of t. <p> This contradicts that r is a perpetual redex. Hence the corollary has been justified. The corresponding proofs in [Bar84] and <ref> [BK82] </ref> are proven using perpetual strategies, while this proof simply shows what happens to the residuals of C [ ]-special redex r in H-relation sequences from C [r]. <p> The main difference between induction on H and a perpetual strategy lies in that the former brings out inner redexes using H-relations while the latter enters a term to find them. Our proof captures the essential ideas in [Bar84] and <ref> [BK82] </ref>, avoids some much involved arguments in [BK82], and is perhaps easier to follow. This can be viewed as a generalisation as well as a simplification. 6. <p> The main difference between induction on H and a perpetual strategy lies in that the former brings out inner redexes using H-relations while the latter enters a term to find them. Our proof captures the essential ideas in [Bar84] and <ref> [BK82] </ref>, avoids some much involved arguments in [BK82], and is perhaps easier to follow. This can be viewed as a generalisation as well as a simplification. 6. Simply Typed -calculus In this section, we give a syntactic proof of the strong normalisation theorem for simply typed -calculus, and show clearly where types play the crucial role. <p> Many results in the paper are also done in the frameork of [RS95], but the arguments in our opinion - are more involved in some cases. There exists a close similarity between . l -relation and the perpetual strategies in [Bar76] and <ref> [BK82] </ref>. Other ideas of transforming strong normalisation into weak normalisation can also be found in [Ned73], [Klo80], [deGr93] and [KW94]. . l -relation brings out inner fi-redexes or their residuals by leftmost reductions and subterm relations. <p> Perpetual strategies spot the crucial places where fi-reductions may change the strong normal-isability of a term. They are often intuitive but can involve a great deal of syntactic overhead such as some proofs in <ref> [BK82] </ref>. Controlling erasure reduces (x:y:u)v to y:(x:u)v so that one can avoid contracting fi K - redexes while keep reducing fi I -redexes. In this way, the conservation theorem can yield a result on strong normalisation when a corresponding one on weak normalisation is obtained.
Reference: [Chu41] <author> A. Church, </author> <year> (1941), </year> <title> The calculi of lambda conversion, </title> <publisher> Princeton University Press, Prince-ton. </publisher>
Reference-contexts: 1. Introduction In -calculus and some other rewriting systems, an induction measure on terms usually plays a pivotal role in the proofs of various theorems related to strong normalisation or termination. The present research starts with the following simple observation. The conservation theorem in <ref> [Chu41] </ref> states an interesting property for I-calculus, i.e., a term is strongly normalising if it has a normal form. A nave extension of this theorem to K-calculus, namely, the usual -calculus, would fail. For instance, (x:y:y)(!!), where ! = x:xx, is not strongly normalising but has a normal form y:y.
Reference: [CR36] <author> A. Church and J.B. </author> <title> Rosser (1936), Some properties of conversions, </title> <journal> Trans. Amer. Math. Soc. </journal> <volume> 39, </volume> <pages> pp. 472-482. </pages>
Reference-contexts: Usually developments are defined via the rewriting system consisting of labelled -terms with labelled fi-reduction. The finiteness of developments theorem (FD) states that developments are always finite. A version of this theorem for I-calculus was proven in <ref> [CR36] </ref>; for K-calculus, it was proven by Schroer in [Sch65] and independently by Hyland in [Hyl73] and by Hindley in [Hin78]. The result states strong normalisability of a certain notion of reduction ! 0 , defined below.
Reference: [Daa80] <author> D.T. van Daalen, </author> <title> The language theory of Automath, </title> <type> dissertation, </type> <institution> Technological University Eindhoven. </institution>
Reference-contexts: This yields H (t fl ) = 1 + maxfH s (t fl ); H l (t fl )g &lt; 1. This lemma summarises a crucial idea in the proof of strong normalisation theorem for the labelled -calculus in <ref> [Daa80] </ref>, namely, the set of strongly normalising terms is closed under SN -head substitutions. Notice that all strongly normalising 0 -terms are SN -head in fl 0 ; by the above lemma, the strongly normalising 0 -terms are closed under substitution; FD follows immediately. <p> The proof can also be adapted to handle intersection types, as in [RS95]. Comparing this proof with the proof of the strong normalisation theorem for labelled -calculus in <ref> [Daa80] </ref>, we can notice that the underline strategies resemble each other. Our proof is very short since Lemma 6..3 has captured the essential idea in [Daa80]. The corresponding proof in [RS95] is intimately related to ours. Lemma 6..7 can be regarded as a reformulation of their Theorem 8.7. <p> Comparing this proof with the proof of the strong normalisation theorem for labelled -calculus in <ref> [Daa80] </ref>, we can notice that the underline strategies resemble each other. Our proof is very short since Lemma 6..3 has captured the essential idea in [Daa80]. The corresponding proof in [RS95] is intimately related to ours. Lemma 6..7 can be regarded as a reformulation of their Theorem 8.7. Since Lemma 6..3 is established in the untyped setting, it is perhaps clearer in our proof to see where types play the crucial role.
Reference: [deGr93] <author> P. </author> <title> de Groote (1993), The conservation theorem revisited, </title> <booktitle> Int'l conf. Typed lambda calculi and applications, vol. 664 of LNCS, </booktitle> <pages> pp. 163-178. </pages>
Reference-contexts: A detailed account of it can also be found in [And71]. Several authors have invented between techniques to infer from this result strong normalisation of simply typed -calculus and related systems, see [Ned73], [Klo80], <ref> [deGr93] </ref>, and [KW94]. <p> There exists a close similarity between . l -relation and the perpetual strategies in [Bar76] and [BK82]. Other ideas of transforming strong normalisation into weak normalisation can also be found in [Ned73], [Klo80], <ref> [deGr93] </ref> and [KW94]. . l -relation brings out inner fi-redexes or their residuals by leftmost reductions and subterm relations. It is often easier to prove H (t) &lt; 1 than to prove S (t) &lt; 1 for given -terms t.
Reference: [deVr85] <author> R. </author> <title> de Vrijer (1985), A direct proof of the finite developments theorem, </title> <journal> Journal of Symbolic Logic, </journal> <volume> 50 </volume> <pages> 339-343. </pages>
Reference-contexts: Proof Let n = 0 in Lemma 4..5, then we have H 0 (u) &lt; 1 for every 0 -term u. The theorem follows from Lemma 4..4. Compared with other corresponding proofs, the conciseness of the proof is certainly noticeable. Two other closely related proofs can be found in <ref> [deVr85] </ref> and [RS95]. The proof in [deVr85] gives an exact bound for the length of every development, and thus, is more perspicuous but with a more involved argument. <p> The theorem follows from Lemma 4..4. Compared with other corresponding proofs, the conciseness of the proof is certainly noticeable. Two other closely related proofs can be found in <ref> [deVr85] </ref> and [RS95]. The proof in [deVr85] gives an exact bound for the length of every development, and thus, is more perspicuous but with a more involved argument. The proof in [RS95] independently uses a different characterization of fi 0 -strong normalisability to prove FD, and also proves finiteness of so-called superdevelopments.
Reference: [Gan80] <author> R.O. </author> <title> Gandy (1980), An early proof of normalisation by A.M. Turing, To: </title> <booktitle> H.B. Curry: Essays on combinatory logic, lambda calculus and formalism, </booktitle> <publisher> Academic press, </publisher> <pages> pp. 453-456. </pages>
Reference-contexts: We intend to prove the next theorem in this section. Theorem 6.5 (Strong Normalisation for Simply Typed -Calculus) Every term in simply typed lambda calculus is strongly normalising. A proof of a weak normalisation theorem for simply typed -calculus can be given by a method originating from Turing's work <ref> [Gan80] </ref>, independently invented by Prawitz [Pra65] in proof theory. A detailed account of it can also be found in [And71]. Several authors have invented between techniques to infer from this result strong normalisation of simply typed -calculus and related systems, see [Ned73], [Klo80], [deGr93], and [KW94].
Reference: [Gan80a] <author> R.O. </author> <title> Gandy (1980), Proofs of Strong Normalisation, To: </title> <booktitle> H.B. Curry: Essays on Com-binatory logic, lambda calculus and formalism, </booktitle> <publisher> Academic press, </publisher> <pages> pp. 457-478. </pages>
Reference: [Gir72] <institution> J.-Y. Girard (1972), Interpretation fonctionnelle et elimination des coupures de l'arithmetique d'ordre superieur, These de doctorat d'etat, Universite Paris VII. </institution>
Reference: [Gir89] <author> J.-Y. Girard et al. </author> <year> (1989), </year> <title> Proofs and types, </title> <publisher> Cambridge Press, </publisher> <pages> 176 pp. 13 </pages>
Reference: [God58] <author> K. </author> <title> Godel (1958), Uber eine bisher noch nicht benutzte Erweiterung des finiten Stand--punktes, </title> <type> Dialectica 12, </type> <pages> pp. 280-287. </pages>
Reference: [Gog94] <author> Healfdene Goguen (1994), </author> <title> A typed operational semantics for type theory, </title> <type> Ph.D. thesis, </type> <institution> Dept. of Comp. Sci., The Univ. of Edinburgh. </institution>
Reference-contexts: This also makes our proof easier to be adapted to other systems such as those aforementioned. 7. Related Work . l -relation bears a great resemblance to the reduction strategies used in <ref> [Gog94] </ref> and [RS95]. Many results in the paper are also done in the frameork of [RS95], but the arguments in our opinion - are more involved in some cases. There exists a close similarity between . l -relation and the perpetual strategies in [Bar76] and [BK82].
Reference: [Hin78] <author> J.R. </author> <title> Hindley (1978), Reductions of residuals are finite, </title> <journal> Trans. Amer. Math. Soc. </journal> <volume> 240, </volume> <pages> pp. 345-361. </pages>
Reference-contexts: The finiteness of developments theorem (FD) states that developments are always finite. A version of this theorem for I-calculus was proven in [CR36]; for K-calculus, it was proven by Schroer in [Sch65] and independently by Hyland in [Hyl73] and by Hindley in <ref> [Hin78] </ref>. The result states strong normalisability of a certain notion of reduction ! 0 , defined below. In this section we give a brief proof of the theorem based on the hybrid relation.
Reference: [HL93] <author> F. Honsell and M. </author> <month> Lenisa </month> <year> (1993), </year> <title> Some Results on the Full Abstraction Problem for Restriced Lambda Calculi. </title> <booktitle> In Mathematical Foundations of Computer Science, Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> ??. 
Reference: [Hue94] <author> Gerard Huet (1994), </author> <title> Residual Theory in -Calculus: A Formal Development, </title> <journal> Journal of Functional Programming vol. </journal> <volume> 4, </volume> <pages> pp. 371-394. </pages>
Reference: [Hyl73] <author> J.M.E. </author> <title> Hyland (1973), A simple proof of the Church-Rosser theorem, </title> <publisher> Typescript, Oxford University, </publisher> <pages> 7 pp. </pages>
Reference-contexts: The finiteness of developments theorem (FD) states that developments are always finite. A version of this theorem for I-calculus was proven in [CR36]; for K-calculus, it was proven by Schroer in [Sch65] and independently by Hyland in <ref> [Hyl73] </ref> and by Hindley in [Hin78]. The result states strong normalisability of a certain notion of reduction ! 0 , defined below. In this section we give a brief proof of the theorem based on the hybrid relation.
Reference: [Hyl76] <author> J.M.E. </author> <title> Hyland (1976), A syntactic characterisation of the equality in some models of the -calculus, </title> <journal> J. London Math. Soc. </journal> <volume> (2) 12, </volume> <pages> pp. 361-370. </pages>
Reference: [KW94] <author> A.J. Kfoury and J.B. </author> <title> Wells (1994), New notions of reduction and non-semantic proofs of fi-strong normalisation in typed -calculi, </title> <type> Tech. Rep. 94-104, </type> <institution> Computer Science Department, Boston University. </institution>
Reference-contexts: A detailed account of it can also be found in [And71]. Several authors have invented between techniques to infer from this result strong normalisation of simply typed -calculus and related systems, see [Ned73], [Klo80], [deGr93], and <ref> [KW94] </ref>. <p> There exists a close similarity between . l -relation and the perpetual strategies in [Bar76] and [BK82]. Other ideas of transforming strong normalisation into weak normalisation can also be found in [Ned73], [Klo80], [deGr93] and <ref> [KW94] </ref>. . l -relation brings out inner fi-redexes or their residuals by leftmost reductions and subterm relations. It is often easier to prove H (t) &lt; 1 than to prove S (t) &lt; 1 for given -terms t.
Reference: [Kha94] <author> Z. </author> <month> Khasidashvili </month> <year> (1994), </year> <title> Perpetuality and Strong Normalization in Orthogonal Term Rewriting Systems. </title> <editor> In P. Enjalbert, E.W. Mayr, and K.W. Wagner (eds.), </editor> <booktitle> Symposium on Theoretical Aspects of Computer Science, Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 775. </pages>
Reference: [Kha94] <author> Z. </author> <month> Khasidashvili </month> <year> (1994), </year> <title> The longest perpetual Reductions in Orthogonal Expression Reduction Systems. </title> <editor> In A Nerode and Yu. V. matiyasevich (eds.), </editor> <booktitle> Logical Foundations of Computer Science, Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 813. </pages>
Reference: [Klo80] <author> J.W. </author> <title> Klop (1980), Combinatory Reduction Systems, </title> <type> Ph.D. thesis, </type> <institution> CWI, Amsterdam, Mathematical center tracts, </institution> <note> No. 127. </note>
Reference-contexts: A detailed account of it can also be found in [And71]. Several authors have invented between techniques to infer from this result strong normalisation of simply typed -calculus and related systems, see [Ned73], <ref> [Klo80] </ref>, [deGr93], and [KW94]. <p> There exists a close similarity between . l -relation and the perpetual strategies in [Bar76] and [BK82]. Other ideas of transforming strong normalisation into weak normalisation can also be found in [Ned73], <ref> [Klo80] </ref>, [deGr93] and [KW94]. . l -relation brings out inner fi-redexes or their residuals by leftmost reductions and subterm relations. It is often easier to prove H (t) &lt; 1 than to prove S (t) &lt; 1 for given -terms t.
Reference: [Lev75] <author> J.-J. Levy, </author> <title> An algebraic interpretation of -fi-K-calculus and a labelled -calculus, </title> <booktitle> Proceedings of the Symposium held in Rome, Lecture Notes in Computer Science 37, edited by C. Bohm, </booktitle> <publisher> Springer-Verlag, Berlin, </publisher> <pages> pp. 147-165. </pages>
Reference: [Ned73] <author> R.P. </author> <title> Nederpelt (1973), Strong normalization in a typed lambda calculus with lambda structured types, </title> <type> Ph.D. thesis, </type> <institution> Technische Hogeschool Eindhoven. </institution>
Reference-contexts: A detailed account of it can also be found in [And71]. Several authors have invented between techniques to infer from this result strong normalisation of simply typed -calculus and related systems, see <ref> [Ned73] </ref>, [Klo80], [deGr93], and [KW94]. <p> There exists a close similarity between . l -relation and the perpetual strategies in [Bar76] and [BK82]. Other ideas of transforming strong normalisation into weak normalisation can also be found in <ref> [Ned73] </ref>, [Klo80], [deGr93] and [KW94]. . l -relation brings out inner fi-redexes or their residuals by leftmost reductions and subterm relations. It is often easier to prove H (t) &lt; 1 than to prove S (t) &lt; 1 for given -terms t.
Reference: [Pra65] <author> D. </author> <title> Prawitz (1965), Natural Deduction: A proof theoretical study, </title> <publisher> Almquist & Wiksell publishing company. </publisher>
Reference-contexts: Theorem 6.5 (Strong Normalisation for Simply Typed -Calculus) Every term in simply typed lambda calculus is strongly normalising. A proof of a weak normalisation theorem for simply typed -calculus can be given by a method originating from Turing's work [Gan80], independently invented by Prawitz <ref> [Pra65] </ref> in proof theory. A detailed account of it can also be found in [And71]. Several authors have invented between techniques to infer from this result strong normalisation of simply typed -calculus and related systems, see [Ned73], [Klo80], [deGr93], and [KW94].
Reference: [Pra71] <author> D. </author> <title> Prawitz (1971), Ideas and results of proof theory, </title> <booktitle> Proceedings of the 2nd scandinavian logic symposium, </booktitle> <editor> editor J.E. Fenstad, </editor> <publisher> North-Holland Publishing Company, Amsterdam. </publisher>
Reference: [Raa96] <author> F. van Raamsdonk (1996), </author> <title> Confluence and Normalisation for Higher-Order Rewriting PhD thesis, </title> <publisher> Vrije Universiteit Amsterdam, </publisher> <address> The Netherlands. </address>
Reference: [RS95] <author> F. van Raamsdonk and P. Severi, </author> <title> On normalisation, </title> <type> CWI technical report, No. 45, </type> <year> 1995. </year>
Reference-contexts: The theorem follows from Lemma 4..4. Compared with other corresponding proofs, the conciseness of the proof is certainly noticeable. Two other closely related proofs can be found in [deVr85] and <ref> [RS95] </ref>. The proof in [deVr85] gives an exact bound for the length of every development, and thus, is more perspicuous but with a more involved argument. The proof in [RS95] independently uses a different characterization of fi 0 -strong normalisability to prove FD, and also proves finiteness of so-called superdevelopments. <p> Two other closely related proofs can be found in [deVr85] and <ref> [RS95] </ref>. The proof in [deVr85] gives an exact bound for the length of every development, and thus, is more perspicuous but with a more involved argument. The proof in [RS95] independently uses a different characterization of fi 0 -strong normalisability to prove FD, and also proves finiteness of so-called superdevelopments. The present technique can also be adapted to that case. <p> Several authors have invented between techniques to infer from this result strong normalisation of simply typed -calculus and related systems, see [Ned73], [Klo80], [deGr93], and [KW94]. Another proof, using a different characterisation of strongly normalising terms is given in <ref> [RS95] </ref> Definition 6.6 The complexity com (T ) of a type T is defined as follows. com (T ) = 0 if T is atomic; maxf1 + com (T 0 ); com (T 1 )g if T = T 0 ! T 1 . <p> The proof can also be adapted to handle intersection types, as in <ref> [RS95] </ref>. Comparing this proof with the proof of the strong normalisation theorem for labelled -calculus in [Daa80], we can notice that the underline strategies resemble each other. Our proof is very short since Lemma 6..3 has captured the essential idea in [Daa80]. The corresponding proof in [RS95] is intimately related to <p> intersection types, as in <ref> [RS95] </ref>. Comparing this proof with the proof of the strong normalisation theorem for labelled -calculus in [Daa80], we can notice that the underline strategies resemble each other. Our proof is very short since Lemma 6..3 has captured the essential idea in [Daa80]. The corresponding proof in [RS95] is intimately related to ours. Lemma 6..7 can be regarded as a reformulation of their Theorem 8.7. Since Lemma 6..3 is established in the untyped setting, it is perhaps clearer in our proof to see where types play the crucial role. <p> This also makes our proof easier to be adapted to other systems such as those aforementioned. 7. Related Work . l -relation bears a great resemblance to the reduction strategies used in [Gog94] and <ref> [RS95] </ref>. Many results in the paper are also done in the frameork of [RS95], but the arguments in our opinion - are more involved in some cases. There exists a close similarity between . l -relation and the perpetual strategies in [Bar76] and [BK82]. <p> This also makes our proof easier to be adapted to other systems such as those aforementioned. 7. Related Work . l -relation bears a great resemblance to the reduction strategies used in [Gog94] and <ref> [RS95] </ref>. Many results in the paper are also done in the frameork of [RS95], but the arguments in our opinion - are more involved in some cases. There exists a close similarity between . l -relation and the perpetual strategies in [Bar76] and [BK82].
Reference: [Sch65] <author> D.E. </author> <month> Schroer </month> <year> (1965), </year> <title> The Church-Rosser Theorem, </title> <type> Dissertation, </type> <institution> Cornell university, </institution> <address> Ithaca, New York, USA. </address> <month> 14 </month>
Reference-contexts: Usually developments are defined via the rewriting system consisting of labelled -terms with labelled fi-reduction. The finiteness of developments theorem (FD) states that developments are always finite. A version of this theorem for I-calculus was proven in [CR36]; for K-calculus, it was proven by Schroer in <ref> [Sch65] </ref> and independently by Hyland in [Hyl73] and by Hindley in [Hin78]. The result states strong normalisability of a certain notion of reduction ! 0 , defined below. In this section we give a brief proof of the theorem based on the hybrid relation.
Reference: [Sev96] <author> P. </author> <title> Severi (1996), Normalisation in Lambda Calculus and its relation to type inference Ph.D. </title> <type> thesis, </type> <institution> Technische Universiteit Eindhoven, The Netherlands. </institution>
Reference: [Str96] <author> M.H. </author> <month> Strensen </month> <year> (1996), </year> <title> Effective Longest and Infinite Reduction Paths in Untyped lambda-Calculi. </title> <editor> In H. Kirchner (ed.), </editor> <booktitle> Colloquium on Trees in Algebra and Programming, Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 1059. </pages>
Reference: [Str9?] <author> M.H. </author> <title> Strensen (199?), </title> <type> PhD thesis. </type>
Reference: [Tai67] <author> W. </author> <title> Tait (1967), Intensional Interpretations of funtionals of finite type I, </title> <journal> J. symbolic logic 32, </journal> <pages> pp. 198-212. </pages>
Reference: [Wad76] <author> C.P. </author> <title> Wadsworth (1976), The relation between computational and denotational properties for Scott's D 1 -models of -calculus. </title> <type> 15 </type>
References-found: 36

