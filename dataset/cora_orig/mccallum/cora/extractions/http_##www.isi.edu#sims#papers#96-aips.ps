URL: http://www.isi.edu/sims/papers/96-aips.ps
Refering-URL: http://www.isi.edu/~knoblock/
Root-URL: 
Email: knoblock@isi.edu  
Title: Building a Planner for Information Gathering: A Report from the Trenches  
Author: Craig A. Knoblock 
Address: 4676 Admiralty Way Marina del Rey, CA 90292, USA  
Affiliation: Information Sciences Institute and Department of Computer Science University of Southern California  
Abstract: Information gathering requires locating and integrating data from a set of distributed information sources. These sources may contain overlapping data and can come from different types of sources, including traditional databases, knowledge bases, programs, and Web pages. In this paper we focus on the problem of how to apply a general-purpose planner to produce plans for information gathering. We identify the critical functionality of the basic planner, describe how the information gathering problem can be cast as a planning problem, and present our approach to efficiently generating high-quality plans in this application domain. The resulting information gathering planner is used as the query processor in the SIMS information mediator, which is being applied to provide access to data for transportation logistics and trauma care. We present empirical results in the transportation domain to demonstrate that this planner can efficiently produce information gathering plans on a set of example queries that were provided with the databases. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Ambros-Ingerson, J., and Steel, S. </author> <year> 1988. </year> <title> Integrating planning, execution, and monitoring. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> 83-88. </pages>
Reference: <author> Arens, Y., and Knoblock, C. A. </author> <year> 1992. </year> <title> Planning and reformulating queries for semantically-modeled mul-tidabase systems. </title> <booktitle> In Proceedings of the First International Conference on Information and Knowledge Management, </booktitle> <pages> 92-101. </pages>
Reference: <author> Arens, Y.; Chee, C. Y.; Hsu, C.-N.; and Knoblock, C. A. </author> <year> 1993. </year> <title> Retrieving and integrating data from multiple information sources. </title> <journal> International Journal on Intelligent and Cooperative Information Systems 2(2) </journal> <pages> 127-158. </pages>
Reference-contexts: In the initial representation of this problem in Prodigy, we cast as much of this problem as possible as a planning problem <ref> (Arens et al. 1993) </ref>. The operators manipulated the individual terms of a query to determine which terms depended on other terms, which in turn determines the order in which different queries would be executed.
Reference: <author> Arens, Y.; Knoblock, C. A.; and Shen, W.-M. </author> <year> 1996. </year> <title> Query reformulation for dynamic information integration. </title> <journal> Journal of Intelligent Information Systems. </journal>
Reference-contexts: The reformulation operators include: choose-source, infer-equivalence, substitute-definition, and decompose. The reformulation operators are used to rewrite the query expressed in domain terms into queries expressed in terms of the available information sources. The details of the reformulation operators are provided in <ref> (Arens, Knoblock, & Shen 1996) </ref>. Consider the operator shown in Table 3, which defines a join performed in the local system. This operator is used to achieve the goal of making some information available in the local knowledge base of the sims information mediator.
Reference: <author> Barrett, A.; Golden, K.; Penberthy, S.; and Weld, D. </author> <year> 1993. </year> <note> UCPOP user's manual (version 2.0). Technical Report 93-09-06, </note> <institution> Department of Computer Science and Engineering, University of Washington. </institution>
Reference-contexts: Since Prodigy produces totally-ordered plans, the plans produced by Prodigy were converted into a parallel-execution plans using the algorithm of Veloso (Veloso 1989), which converts a totally-ordered plan into a partially ordered plan. In the next version of the system we switched to UCPOP 2.0 <ref> (Barrett et al. 1993) </ref> because we needed a partial-order planning capability. The initial version in Prodigy returned the first plan produced using the set of heuristics, but as the plans became more complex it became clear that this was insufficient.
Reference: <author> Currie, K., and Tate, A. </author> <year> 1991. </year> <title> O-plan: The open planning architecture. </title> <booktitle> Artificial Intelligence 52(1) </booktitle> <pages> 49-86. </pages>
Reference-contexts: Other important work on using planning technology to solve real problems, such as in SIPE (Wilkins 1988) and O-Plan <ref> (Currie & Tate 1991) </ref>, has relied on careful engineering of the domains such that problems can be solved with only a modest amount of search. When people build specialized planners for specific applications they develop techniques and heuristics that make some interesting class of problems tractable.
Reference: <author> Etzioni, O., and Weld, D. S. </author> <year> 1994. </year> <title> A softbot-based interface to the Internet. </title> <journal> Communications of the ACM 37(7). </journal>
Reference-contexts: Shekhar (1989) developed an approach to trading off search time with execution time in optimizing query access plans. Both of these systems assume that the query access plans are given. Another planner that has been built for a information gathering task is the xii planner <ref> (Etzioni, Golden, & Weld 1994) </ref>. This planner serves as the query processor for the Unix Softbot (Etzioni & Weld 1994). Compared to Sage, xii reasons about the information at a different level of granularity. Instead of representing general actions for manipulating data, each operator corresponds to a Unix command. <p> Both of these systems assume that the query access plans are given. Another planner that has been built for a information gathering task is the xii planner (Etzioni, Golden, & Weld 1994). This planner serves as the query processor for the Unix Softbot <ref> (Etzioni & Weld 1994) </ref>. Compared to Sage, xii reasons about the information at a different level of granularity. Instead of representing general actions for manipulating data, each operator corresponds to a Unix command. The advantage of their approach is that it provides finer-grained control and reasoning of the information.
Reference: <author> Etzioni, O.; Hanks, S.; Weld, D.; Draper, D.; Lesh, N.; and Williamson, M. </author> <year> 1992. </year> <title> An approach to planning with incomplete information. </title> <booktitle> In Proceedings of the Third International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> 115-125. </pages>
Reference: <author> Etzioni, O.; Golden, K.; and Weld, D. </author> <year> 1994. </year> <title> Tractable closed-world reasoning with updates. </title> <booktitle> In Fourth International Conference on Principles of Knowledge Representation and Reasoning. </booktitle>
Reference-contexts: Shekhar (1989) developed an approach to trading off search time with execution time in optimizing query access plans. Both of these systems assume that the query access plans are given. Another planner that has been built for a information gathering task is the xii planner <ref> (Etzioni, Golden, & Weld 1994) </ref>. This planner serves as the query processor for the Unix Softbot (Etzioni & Weld 1994). Compared to Sage, xii reasons about the information at a different level of granularity. Instead of representing general actions for manipulating data, each operator corresponds to a Unix command. <p> Both of these systems assume that the query access plans are given. Another planner that has been built for a information gathering task is the xii planner (Etzioni, Golden, & Weld 1994). This planner serves as the query processor for the Unix Softbot <ref> (Etzioni & Weld 1994) </ref>. Compared to Sage, xii reasons about the information at a different level of granularity. Instead of representing general actions for manipulating data, each operator corresponds to a Unix command. The advantage of their approach is that it provides finer-grained control and reasoning of the information.
Reference: <author> Furukawa, K. </author> <year> 1977. </year> <title> A deductive question answering system on relational data bases. </title> <booktitle> In Proceedings of the Fifth International Joint Conference on Artificial Intelligence, </booktitle> <pages> 59-66. </pages>
Reference-contexts: A variety of work on planning has explored various aspects of the query access planning problem. The LADDER system (Sacerdoti 1977) had a similar goal of integrating multiple sources of information. They developed a planner <ref> (Furukawa 1977) </ref> based on a theorem prover that is used to find the minimal set of sources to cover a query, and they combined it with a specialized heuristic algorithm that produces an efficient query access plan.
Reference: <author> Jarke, M., and Koch, J. </author> <year> 1984. </year> <title> Query optimization in database systems. </title> <journal> ACM Computing Surveys 16(2) </journal> <pages> 111-152. </pages>
Reference: <author> Knoblock, C. A., and Levy, A. </author> <year> 1995. </year> <title> Exploiting run-time information for efficient processing of queries. </title> <booktitle> In Working Notes of the AAAI Spring Symposium on Information Gathering in Heterogeneous, Distributed Environments. </booktitle>
Reference-contexts: To support the sensing we added explicit run-time variables (Ambros-Ingerson & Steel 1988; Etzioni et al. 1992) which provide a mechanism for the planner to use the results of a sensing action. The support for execution, replanning, and sensing are described in <ref> (Knoblock 1995) </ref> and will not be described further in this paper. In the remainder of this paper we will focus on how the information gathering task is represented in Sage and how the planner efficiently generates plans in this domain. <p> In the Web we will have to deal with the problem of combining information from many more sources. In addition, sensing actions will probably play a larger role since a query may require gathering additional information in order to locate the relevant sources to answer a query <ref> (Knoblock & Levy 1995) </ref>. We expect that the combination of larger plans and more operators will require us to push even harder on techniques for efficiently generating high-quality plans. Acknowledgments Thanks to Jose Luis Ambite for his work on developing a good evaluation function for the planner.
Reference: <author> Knoblock, C. A.; Arens, Y.; and Hsu, C.-N. </author> <year> 1994. </year> <title> Cooperating agents for information retrieval. </title> <booktitle> In Proceedings of the Second International Conference on Cooperative Information Systems. </booktitle>
Reference-contexts: First, we added support for compound objects, which required extending the matching algorithm. Second, we added an explicit representation of reusable resources and extended the planner to identify possible resource conflicts and refine the plan to eliminate them. This allows the planner to generate plans with simultaneous actions. (See <ref> (Knoblock 1994) </ref> for more detail.) In addition, we added support in Sage for simultaneous and interleaved planning and execution. This is done by tightly integrating the execution into the planning process and letting the planner decide which actions to execute and when to execute them.
Reference: <author> Knoblock, C. A. </author> <year> 1994. </year> <title> Generating parallel execution plans with a partial-order planner. </title> <booktitle> In Proceedings of the Second International Conference on Artificial Intelligence Planning Systems. </booktitle>
Reference-contexts: First, we added support for compound objects, which required extending the matching algorithm. Second, we added an explicit representation of reusable resources and extended the planner to identify possible resource conflicts and refine the plan to eliminate them. This allows the planner to generate plans with simultaneous actions. (See <ref> (Knoblock 1994) </ref> for more detail.) In addition, we added support in Sage for simultaneous and interleaved planning and execution. This is done by tightly integrating the execution into the planning process and letting the planner decide which actions to execute and when to execute them.
Reference: <author> Knoblock, C. A. </author> <year> 1995. </year> <title> Planning, executing, </title> <booktitle> sensing, and replanning for information gathering. In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence. </booktitle>
Reference-contexts: To support the sensing we added explicit run-time variables (Ambros-Ingerson & Steel 1988; Etzioni et al. 1992) which provide a mechanism for the planner to use the results of a sensing action. The support for execution, replanning, and sensing are described in <ref> (Knoblock 1995) </ref> and will not be described further in this paper. In the remainder of this paper we will focus on how the information gathering task is represented in Sage and how the planner efficiently generates plans in this domain. <p> In the Web we will have to deal with the problem of combining information from many more sources. In addition, sensing actions will probably play a larger role since a query may require gathering additional information in order to locate the relevant sources to answer a query <ref> (Knoblock & Levy 1995) </ref>. We expect that the combination of larger plans and more operators will require us to push even harder on techniques for efficiently generating high-quality plans. Acknowledgments Thanks to Jose Luis Ambite for his work on developing a good evaluation function for the planner.
Reference: <author> Landers, T., and Rosenberg, R. L. </author> <year> 1982. </year> <title> An overview of Multibase. </title> <editor> In Schneider, H., ed., </editor> <booktitle> Distributed Data Bases. </booktitle> <publisher> North-Holland. </publisher>
Reference: <author> Levy, A. Y.; Srivastava, D.; and Kirk, T. </author> <year> 1995. </year> <title> Data model and query evaluation in global information systems. </title> <journal> Journal of Intelligent Information Systems, </journal> <note> Special Issue on Networked Information Discovery and Retrieval 5(2). </note>
Reference-contexts: In the Web we will have to deal with the problem of combining information from many more sources. In addition, sensing actions will probably play a larger role since a query may require gathering additional information in order to locate the relevant sources to answer a query <ref> (Knoblock & Levy 1995) </ref>. We expect that the combination of larger plans and more operators will require us to push even harder on techniques for efficiently generating high-quality plans. Acknowledgments Thanks to Jose Luis Ambite for his work on developing a good evaluation function for the planner.
Reference: <author> MacGregor, R. </author> <year> 1990. </year> <title> The evolving technology of classification-based knowledge representation systems. </title> <editor> In Sowa, J., ed., </editor> <booktitle> Principles of Semantic Networks: Explorations in the Representation of Knowledge. </booktitle> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: This information comprises the static part of the initial state information. To organize this information and access it efficiently, these models are stored in a knowledge representation sys-tem called Loom <ref> (MacGregor 1990) </ref>. The information is then accessed directly through the functional predicates, which make direct calls to Loom. The dynamic part of the initial state information is comprised of literals that define the available information sources (e.g., databases) and the servers (e.g., an Oracle DBMS) they are running on.
Reference: <author> Minton, S.; Knoblock, C. A.; Kuokka, D. R.; Gil, Y.; Joseph, R. L.; and Carbonell, J. G. </author> <year> 1989. </year> <title> PRODIGY 2.0: The manual and tutorial. </title> <type> Technical Report CMU-CS-89-146, </type> <institution> School of Computer Science, Carnegie Mellon University. </institution>
Reference-contexts: Finally, we identify some of the critical planning research problems, and then describe some of our plans for future work. The Basic Planner The first prototype of the overall system (Arens & Knoblock 1992; Arens et al. 1993) was built using the Prodigy 2.0 planner <ref> (Minton et al. 1989) </ref>. Prodigy was chosen because it has a expressive operator representation language and a rich language for expressing control knowledge. This initial version of the system produced a satisficing solution in that it searched the space using a set of heuristics that produced a reasonably good solution.
Reference: <author> Reddy, M.; Prasad, B.; and Reddy, P. </author> <year> 1989. </year> <title> Query processing in heterogeneous distributed database management systems. </title> <editor> In Gupta, A., ed., </editor> <title> Integration of Information Systems: Bridging Heterogeneous Databases. </title> <publisher> NY: IEEE Press. </publisher> <pages> 264-277. </pages>
Reference: <author> Sacerdoti, E. D. </author> <year> 1977. </year> <title> Language access to distributed data with error recovery. </title> <booktitle> In Proceedings of the Fifth International Joint Conference on Artificial Intelligence, </booktitle> <pages> 196-202. </pages>
Reference-contexts: Instead, we have focused on the problem of deciding where to get the information, where to process it, and what order to do the processing. A variety of work on planning has explored various aspects of the query access planning problem. The LADDER system <ref> (Sacerdoti 1977) </ref> had a similar goal of integrating multiple sources of information.
Reference: <author> Selinger, P. G.; Astrahan, M.; Chamberlin, D.; Lorie, R.; and Price, T. </author> <year> 1988. </year> <title> Access path selection in a relational database management system. </title> <booktitle> In Artificial Intelligence and Databases. </booktitle> <address> Los Altos, CA: </address> <publisher> Morgan Kaufmann. </publisher> <pages> 511-522. </pages>
Reference: <author> Shekhar, S., and Dutta, S. </author> <year> 1989. </year> <title> Minimizing response times in real time planning and search. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence. </booktitle>
Reference: <author> Veloso, M. M. </author> <year> 1989. </year> <title> Nonlinear problem solving using intelligent casual-commitment. </title> <type> Technical Report CMU-CS-89-210, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference-contexts: To do this required explicitly representing the potential parallelism in the plan. Since Prodigy produces totally-ordered plans, the plans produced by Prodigy were converted into a parallel-execution plans using the algorithm of Veloso <ref> (Veloso 1989) </ref>, which converts a totally-ordered plan into a partially ordered plan. In the next version of the system we switched to UCPOP 2.0 (Barrett et al. 1993) because we needed a partial-order planning capability.
Reference: <author> Wilkins, D. E. </author> <year> 1988. </year> <title> Practical Planning: Extending the Classical AI Planning Paradigm. </title> <address> San Mateo, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Other important work on using planning technology to solve real problems, such as in SIPE <ref> (Wilkins 1988) </ref> and O-Plan (Currie & Tate 1991), has relied on careful engineering of the domains such that problems can be solved with only a modest amount of search. When people build specialized planners for specific applications they develop techniques and heuristics that make some interesting class of problems tractable.
Reference: <author> Yang, Q.; Nau, D. S.; and Hendler, J. </author> <year> 1992. </year> <title> Merging separately generated plans with restricted interactions. </title> <booktitle> Computational Intelligence 8(4). </booktitle>
References-found: 26

