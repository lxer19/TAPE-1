URL: http://www.cs.caltech.edu/~kiniry/projects/papers/FMPPTA98/fmppta98.ps
Refering-URL: http://www.cs.caltech.edu/~kiniry/projects/papers/kiniry/index.html
Root-URL: http://www.cs.caltech.edu
Email: [mani,paolo,kiniry]@cs.caltech.edu  
Title: A Cottage Industry of Software Publishing: Implications for Theories of Composition  
Author: K. Mani Chandy, Paolo A.G. Sivilotti, Joseph R. Kiniry 
Web: http://www.infospheres.caltech.edu/  
Address: Pasadena, CA 91125  
Affiliation: Department of Computer Science, California Institute of Technology, m/c 256-80,  
Abstract: This note explores the use of UNITY-based theories to facilitate a cottage industry of software publishing. The requirements for such an industry are discussed, the appropriateness of UNITY specification and compositional theories for these requirements are analyzed, and further research opportunities in this area are identified. This work is based on joint work with Beverly Sanders, and the ideas discussed here have been explored jointly with Paul Sivilotti and Joseph Kiniry. 
Abstract-found: 1
Intro-found: 1
Reference: [BPS97] <author> Tim Bray, Jean Paoli, </author> <title> and C.M. Sperberg-McQueen. Extensible Markup Language (XML) Proposed W3C Recommendation PR-xml-971208, </title> <month> Dec </month> <year> 1997. </year> <note> http://www.w3.org/TR/PR-xml. </note>
Reference-contexts: We can prove properties about relationships between classes. For instance, we can prove that one class is a refinement of another. Such proofs are relevant to our infrastructure, but demonstrations of the "equivalence" between classes and reality are not. We use markup languages like XML <ref> [BPS97] </ref> to describe object ontologies. An example of an evolving, ontology-focused specialization of XML is the Ontology Markup Language (OML).[Ken98] Permanence of Specifications and Theorems. People can publish theorems about class specifications.
Reference: [CKRZ98] <author> K. Mani Chandy, Joseph R. Kiniry, Adam Rifkin, </author> <note> and Dan Zimmerman In-fospheres 2 Users Manual, </note> <month> Mar </month> <year> 1998. </year> <note> http://www.infospheres.caltech.edu/. </note>
Reference: [CM88] <author> K. Mani Chandy and Jayadev Misra. </author> <title> Parallel Program Design: A Founda--tion. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference: [CS95] <author> K. Mani Chandy and Beverly A. Sanders. </author> <title> Predicate transformers for reasoning about concurrent computation. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 24 </volume> <pages> 129-148, </pages> <year> 1995. </year>
Reference-contexts: This characteristic is relevant to our vision of a cottage industry of software components. We need to be able to reason about object composition in the easiest way possible. For convenience, we summarize the relevant part of <ref> [CS95] </ref> which introduces program properties and shows how 8 and 9 forms the basis for the logic. A program property, or just property for short, is a predicate on programs. Here, we use programs and objects interchangeably. <p> We use objects where method calls pass arguments by value and not by reference because that is easier to implement and also doesn't make reasoning harder. And, we assume the existence of monitors to manage atomicity of operations. We obtain compositionality by using guarantees properties from <ref> [CS95] </ref>. For program properties p and q, the program property (p guarantees q) holds for an object G means that for any object H in which G is a component, if p holds for H then q holds for H. Therefore, a guarantees property is an exists-only property. <p> This approach simplifies proofs of object composition, but it has a price: Your object may be useful in an application that you hadn't designed it for, and the guarantees properties that you used in the specification may not help in proving properties for that application. See the references in <ref> [CS95] </ref> and [CM88,CM88,MS96,SC97] for further discussion and past work on the material of this section. 5 Conclusion This paper is an exploration of issues that stem from attempting to facilitate a cottage industry of software components.
Reference: [Cox96] <author> Brad Cox. </author> <title> Superdistribution : Objects As Property on the Electronic Frontier Addison-Wesley, </title> <year> 1996 </year>
Reference: [Gru93] <author> T. R. Gruber. </author> <title> A translation approach to portable ontologies Knowledge Acquisition, </title> <booktitle> 5(2) </booktitle> <pages> 199-220, </pages> <year> 1993. </year>
Reference: [Ken98] <author> Robert Kent et al. </author> <title> Ontology Markup Language (OML) http://asimov.eecs.wsu.edu/WAVE/Ontologies/OML/OML-DTD.html. </title>
Reference: [MS96] <author> R. Manohar and P. Sivilotti. </author> <title> Composing processes using modified rely-guarantee specifications. </title> <type> Caltech technical report CS-TR-96-22, </type> <year> 1996. </year>
Reference: [SC97] <author> Paolo A. G. Sivilotti and K. Mani Chandy, </author> <title> A Distributed Infrastructure for Software Component Technology. </title> <type> Technical Report CS-TR-97-32, </type> <institution> Department of Computer Science, California Institute of Technology, </institution> <month> September </month> <year> 1997. </year> <month> ftp://ftp.cs.caltech.edu/tr/cs-tr-97-32.ps.Z. </month>
Reference-contexts: A specification of version V of class C remains unchanged for ever (unless it is proved wrong). So, we can think of publications of ground classes, specifications, and theorems relating classes, in terms of a growing world-wide pool. <ref> [SC97] </ref> Search for Classes. Imagine that you have been given the task of developing a class for a given specification.
References-found: 9

