URL: ftp://ftp.cs.ucsd.edu/pub/team/asavailmgr.ps.Z
Refering-URL: http://www.cs.ucsd.edu/users/flaviu/publications.html
Root-URL: http://www.cs.ucsd.edu
Title: Automatic Service Availability Management in Asynchronous Distributed Systems  
Author: Flaviu Cristian and Shivakant Mishra 
Address: La Jolla, CA 920930114, USA  
Affiliation: Department of Computer Science Engineering University of California, San Diego  
Abstract: An Availability Management service is responsible for automatically ensuring that all critical services of a distributed system remain continuously available to users despite node removals and restarts caused by failures, maintenance and growth. We present an Availability Management service for an asynchronous distributed system characterized by unbounded communication delays and by the availability at all nodes of local, nonsynchronized timers that measure the passage of real time with some known accuracy. Examples of such systems are Unix, VMS, VM or MVS based distributed systems connected by local area networks such as Ethernet, token ring, FDDI, or channel-to-channel adapters. The presentation stresses the main ideas behind this new service, and outlines a simple design that depends upon the existence of asynchronous membership and atomic broadcast group communication services. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Abbadi, D. Skeen, and F. Cristian. </author> <title> An efficient fault-tolerant protocol for replicated data management. </title> <booktitle> In SIGACT/SIGMOD, </booktitle> <year> 1985. </year>
Reference-contexts: In such asynchronous environments, it is common to limit communication between team members only to those members that have joined a common group (or view, as it was called in <ref> [1] </ref>), where two processes p and q will be in the same group if they could communicate in a timely manner when the group was created. Processes that belong to different groups do not communicate with each other and are said to be (logically) partitioned.
Reference: [2] <author> K. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight causal and atomic group multi-cast. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <month> Aug </month> <year> 1991. </year>
Reference-contexts: Notice that unlike a synchronous atomic broadcast service [10], there is no bound on the time it takes to deliver an update to the active team members by an asynchronous atomic broadcast service. Protocols for implementing asynchronous atomic broadcast for point-to-point and broadcast channel based networks are given in <ref> [4, 3, 6, 12, 13, 15, 2] </ref>. The implementation of the asynchronous Availability Management service depends [8] directly on the asynchronous atomic broadcast service, which depends on an asynchronous membership service, which in turn depends on an asynchronous datagram communication service.
Reference: [3] <author> R. Carr. </author> <title> The Tandem global update protocol. </title> <journal> Tandem Systems Review, </journal> <month> Jun </month> <year> 1985. </year>
Reference-contexts: Notice that unlike a synchronous atomic broadcast service [10], there is no bound on the time it takes to deliver an update to the active team members by an asynchronous atomic broadcast service. Protocols for implementing asynchronous atomic broadcast for point-to-point and broadcast channel based networks are given in <ref> [4, 3, 6, 12, 13, 15, 2] </ref>. The implementation of the asynchronous Availability Management service depends [8] directly on the asynchronous atomic broadcast service, which depends on an asynchronous membership service, which in turn depends on an asynchronous datagram communication service.
Reference: [4] <author> J. Chang and N. Maxemchuk. </author> <title> Reliable broadcast protocols. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(3) </volume> <pages> 251-273, </pages> <month> Aug </month> <year> 1984. </year>
Reference-contexts: Notice that unlike a synchronous atomic broadcast service [10], there is no bound on the time it takes to deliver an update to the active team members by an asynchronous atomic broadcast service. Protocols for implementing asynchronous atomic broadcast for point-to-point and broadcast channel based networks are given in <ref> [4, 3, 6, 12, 13, 15, 2] </ref>. The implementation of the asynchronous Availability Management service depends [8] directly on the asynchronous atomic broadcast service, which depends on an asynchronous membership service, which in turn depends on an asynchronous datagram communication service.
Reference: [5] <author> F. Cristian. </author> <title> A rigorous approach to fault-tolerant programming. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-11(1):23-31, </volume> <month> Jan </month> <year> 1985. </year>
Reference-contexts: Let A denote the set of all nodes in the system, and Maj denote the set of nodes in the active (majority) group. The Availability Management service provides two kinds of operations to two (or possibly three) concurrent "users": the human administrator and the Adverse Environment (and possibly time) <ref> [5] </ref>. The human administrator can invoke operations start-service (s), stop-service (s), add-hosts (s,h), and remove-hosts (s,h), s 2 S, h A. The Adverse Environment can invoke the remove-nodes (n) operation, n A.
Reference: [6] <author> F. Cristian. </author> <title> Asynchronous atomic broadcast. </title> <journal> IBM Technical Disclosure Bulletin, </journal> <volume> 33(9) </volume> <pages> 115-116, </pages> <month> Feb </month> <year> 1991. </year> <booktitle> Also presented at the First IEEE Workshop on Management of Replicated Data, </booktitle> <address> Houston, TX, </address> <month> (Nov </month> <year> 1990). </year>
Reference-contexts: the active group: let hist (p) and hist (q) be the histories of updates delivered to p and q by the atomic broadcast service since group creation, then either hist (p) is a prefix of hist (q) or hist (p)=hist (q) or hist (q) is a prefix of hist (p) <ref> [6] </ref>. Notice that unlike a synchronous atomic broadcast service [10], there is no bound on the time it takes to deliver an update to the active team members by an asynchronous atomic broadcast service. <p> Notice that unlike a synchronous atomic broadcast service [10], there is no bound on the time it takes to deliver an update to the active team members by an asynchronous atomic broadcast service. Protocols for implementing asynchronous atomic broadcast for point-to-point and broadcast channel based networks are given in <ref> [4, 3, 6, 12, 13, 15, 2] </ref>. The implementation of the asynchronous Availability Management service depends [8] directly on the asynchronous atomic broadcast service, which depends on an asynchronous membership service, which in turn depends on an asynchronous datagram communication service.
Reference: [7] <author> F. Cristian. </author> <title> Reaching agreement on processor-group membership in synchronous distributed systems. </title> <journal> Distributed Computing, </journal> <volume> 4 </volume> <pages> 175-187, </pages> <year> 1991. </year>
Reference-contexts: We assume an asynchronous membership service that organizes the groups of active team members into a linear history so that members in successive active groups agree on the history of past active groups. Unlike in a synchronous membership service <ref> [7] </ref>, there is no bound on the time it takes to form a new group after failures or recoveries are detected. Protocols for implementing asynchronous membership services satisfying different properties for point-to-point and broadcast channel based networks are given in [14, 16, 18].
Reference: [8] <author> F. Cristian. </author> <title> Understanding fault-tolerant distributed systems. </title> <journal> Communications of ACM, </journal> <volume> 34(2) </volume> <pages> 56-78, </pages> <month> Feb </month> <year> 1991. </year>
Reference-contexts: different and totally ordered, and that the nodes have amnesia-crash 1 for simplicity, in this paper we only consider static replication policies, where the number of replicas is constant. failure semantics: after a crash, a node restarts in a predefined initial state independent of the inputs seen before the crash <ref> [8] </ref>. We don't assume any particular network topology: it can be point-to-point or broadcast channel based. Further we assume an asynchronous communication network: there is no bound on the message transmission delays between nodes. <p> Protocols for implementing asynchronous atomic broadcast for point-to-point and broadcast channel based networks are given in [4, 3, 6, 12, 13, 15, 2]. The implementation of the asynchronous Availability Management service depends <ref> [8] </ref> directly on the asynchronous atomic broadcast service, which depends on an asynchronous membership service, which in turn depends on an asynchronous datagram communication service. The dependency relations among these services is shown in Figure 1.
Reference: [9] <author> F. Cristian. </author> <title> Automatic reconfiguration in the presence of failures. </title> <journal> Software Engineering Journal, </journal> <pages> pages 53-60, </pages> <month> Mar </month> <year> 1993. </year>
Reference-contexts: The latter service ensures that application server migrations are transparent to clients despite communication component failures. As mentioned in <ref> [9] </ref>, this service enables a client of a service s to invoke an operation o by simply passing s.o to the transport service available on the client's node without knowing where a server for s resides.
Reference: [10] <author> F. Cristian, H. Aghili, R. Strong, and D. Dolev. </author> <title> Atomic broadcast: From simple message diffusion to Byzantine agreement. </title> <booktitle> In Proceedings of the Fifteenth International Symposium on Fault--Tolerant Computing, </booktitle> <pages> pages 200-206, </pages> <address> Ann Arbor, MI, </address> <month> Jun </month> <year> 1985. </year>
Reference-contexts: Notice that unlike a synchronous atomic broadcast service <ref> [10] </ref>, there is no bound on the time it takes to deliver an update to the active team members by an asynchronous atomic broadcast service. Protocols for implementing asynchronous atomic broadcast for point-to-point and broadcast channel based networks are given in [4, 3, 6, 12, 13, 15, 2].
Reference: [11] <author> J. Gray. </author> <title> An approach to decentralized computer systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(6):684-692, </volume> <month> Jun </month> <year> 1986. </year>
Reference-contexts: This paper was published in Proc. 2d Int. Workshop on Configurable Distributed Systems, Pittsburgh, March 1994. unavailability. For example, <ref> [11] </ref> reports that 42 % of the failures in the Tandem distributed systems are caused by human mistakes made during maintenance, operation and configuration.
Reference: [12] <author> M. F. Kaashoek, A. Tanenbaum, S. F. Hummel, and H. Bal. </author> <title> An efficient reliable broadcast protocol. </title> <journal> Operating Systems Review, </journal> <volume> 23(4) </volume> <pages> 5-19, </pages> <month> Oct </month> <year> 1989. </year>
Reference-contexts: Notice that unlike a synchronous atomic broadcast service [10], there is no bound on the time it takes to deliver an update to the active team members by an asynchronous atomic broadcast service. Protocols for implementing asynchronous atomic broadcast for point-to-point and broadcast channel based networks are given in <ref> [4, 3, 6, 12, 13, 15, 2] </ref>. The implementation of the asynchronous Availability Management service depends [8] directly on the asynchronous atomic broadcast service, which depends on an asynchronous membership service, which in turn depends on an asynchronous datagram communication service.
Reference: [13] <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Broadcast protocols for distributed systems. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 1(1) </volume> <pages> 17-25, </pages> <month> Jan </month> <year> 1990. </year>
Reference-contexts: Notice that unlike a synchronous atomic broadcast service [10], there is no bound on the time it takes to deliver an update to the active team members by an asynchronous atomic broadcast service. Protocols for implementing asynchronous atomic broadcast for point-to-point and broadcast channel based networks are given in <ref> [4, 3, 6, 12, 13, 15, 2] </ref>. The implementation of the asynchronous Availability Management service depends [8] directly on the asynchronous atomic broadcast service, which depends on an asynchronous membership service, which in turn depends on an asynchronous datagram communication service.
Reference: [14] <author> S. Mishra, L. Peterson, and R. Schlichting. </author> <title> A membership protocol based on partial order. </title> <booktitle> In Proceedings of the Second Working Conference on Dependable Computing for Critical Applications, </booktitle> <pages> pages 137-145, </pages> <address> Tucson, AZ, </address> <month> Feb </month> <year> 1991. </year>
Reference-contexts: Unlike in a synchronous membership service [7], there is no bound on the time it takes to form a new group after failures or recoveries are detected. Protocols for implementing asynchronous membership services satisfying different properties for point-to-point and broadcast channel based networks are given in <ref> [14, 16, 18] </ref>. An asynchronous atomic broadcast service enables any member p of a group to broadcast an update u to all members of that group in such a way that u is de livered to all active and correct members in the same order.
Reference: [15] <author> S. Mishra, L. Peterson, and R. Schlichting. </author> <title> Consul: A communication substrate for fault-tolerant distributed programs. </title> <journal> Distributed Systems Engineering Journal, </journal> <note> 1993. to appear. </note>
Reference-contexts: Notice that unlike a synchronous atomic broadcast service [10], there is no bound on the time it takes to deliver an update to the active team members by an asynchronous atomic broadcast service. Protocols for implementing asynchronous atomic broadcast for point-to-point and broadcast channel based networks are given in <ref> [4, 3, 6, 12, 13, 15, 2] </ref>. The implementation of the asynchronous Availability Management service depends [8] directly on the asynchronous atomic broadcast service, which depends on an asynchronous membership service, which in turn depends on an asynchronous datagram communication service.
Reference: [16] <author> L. E. Moser, P. M. Melliar-Smith, and V. Agrawala. </author> <title> Membership algorithms for asynchronous distributed systems. </title> <booktitle> In Proceedings of the Eleventh International Conference on Distributed Computing Systems, </booktitle> <pages> pages 480-488, </pages> <address> Ar-lington, TX, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Unlike in a synchronous membership service [7], there is no bound on the time it takes to form a new group after failures or recoveries are detected. Protocols for implementing asynchronous membership services satisfying different properties for point-to-point and broadcast channel based networks are given in <ref> [14, 16, 18] </ref>. An asynchronous atomic broadcast service enables any member p of a group to broadcast an update u to all members of that group in such a way that u is de livered to all active and correct members in the same order.
Reference: [17] <author> D. L. Parnas. </author> <title> A technique for software module specification with examples. </title> <journal> Communications of the ACM, </journal> <volume> 15(5), </volume> <year> 1972. </year>
Reference-contexts: Such implementation details are hidden from users, who need only know the externally visible, abstract service specification <ref> [17] </ref>. For example, a database service can be implemented by a single database server, by a set of distributed servers that each manages a fragment of the database state, or by a group of redundant distributed database servers that each manages a replica of the entire database.
Reference: [18] <author> A. Ricciardi and K. Birman. </author> <title> Using process groups to implement failure detection in asynchronous environments. </title> <booktitle> In Eleventh ACM Symposium on Principles of Distributed Computing, </booktitle> <address> Montreal, Canada, </address> <month> Aug </month> <year> 1991. </year>
Reference-contexts: Unlike in a synchronous membership service [7], there is no bound on the time it takes to form a new group after failures or recoveries are detected. Protocols for implementing asynchronous membership services satisfying different properties for point-to-point and broadcast channel based networks are given in <ref> [14, 16, 18] </ref>. An asynchronous atomic broadcast service enables any member p of a group to broadcast an update u to all members of that group in such a way that u is de livered to all active and correct members in the same order.
References-found: 18

