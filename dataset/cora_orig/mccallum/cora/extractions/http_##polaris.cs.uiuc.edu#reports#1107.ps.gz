URL: http://polaris.cs.uiuc.edu/reports/1107.ps.gz
Refering-URL: http://polaris.cs.uiuc.edu/tech_reports.html
Root-URL: http://www.cs.uiuc.edu
Title: VISTA: A SYSTEM FOR REMOTE DATA VISUALIZATION  
Author: ALLAN TUCHMAN, GEORGE CYBENKO, DAVID JABLONOWSKI, BRIAN BLISS, SANJAY SHARMA 
Abstract: Vista is a system for remote visualization of data. With minimal and possibly automatic instrumentation, an application run in the Vista environment will have its data (variables and data structures) made available to a visualization system on a remote workstation. Vista provides a window into the application by showing program data automatically during execution. The data to be displayed and the type of display to be used are chosen interactively while the application is executing. Any data display can be enabled or disabled at any time; it is not necessary to specify the data or graphics technique before compilation as with conventional graphics tools. The application may execute locally, on a remote supercomputer, on several clusters of a shared memory computer, or even across a network of distributed computers. The system architecture is designed to interact with an executing application, however the Vista model allows a data or trace file to replace the executing application, providing a visualization "data browser" for existing data or simulation runs. Designed primarily for scientific visualization, Vista also offers an environment for more effective debugging, program development, and a tool for viewing results. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. H. Brown, </author> <title> Exploring algorithm using balsa-II, </title> <booktitle> Computer, 21 (1988), </booktitle> <pages> pp. 14-36. </pages>
Reference-contexts: There are a several well-known systems promoted for either distributed visualization or animation. Many of these are discussed and compared with Vista in our full report [3] including AVS [4], aPE [2], Balsa-II <ref> [1] </ref>, and PEX. In this paper we present the design of Vista, an example of its use, and some architectural details of the system. 2. Design. In this section we describe the conceptual design of Vista and show how our requirements and goals motivated that design.
Reference: [2] <author> D. S. Dyer, </author> <title> A dataflow toolkit for visualization, </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 10 (1990), </volume> <pages> pp. 60-69. </pages>
Reference-contexts: There are a several well-known systems promoted for either distributed visualization or animation. Many of these are discussed and compared with Vista in our full report [3] including AVS [4], aPE <ref> [2] </ref>, Balsa-II [1], and PEX. In this paper we present the design of Vista, an example of its use, and some architectural details of the system. 2. Design. In this section we describe the conceptual design of Vista and show how our requirements and goals motivated that design.
Reference: [3] <author> A. Tuchman, D. Jablonowski, and G. Cybenko, </author> <title> Vista: A system for remote data visualization, </title> <type> Tech. Report 1067, </type> <institution> Center for Supercomputing Research and Development, University of Illinois at Urbana-Champaign, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: There are a several well-known systems promoted for either distributed visualization or animation. Many of these are discussed and compared with Vista in our full report <ref> [3] </ref> including AVS [4], aPE [2], Balsa-II [1], and PEX. In this paper we present the design of Vista, an example of its use, and some architectural details of the system. 2. Design. <p> The Vista Architecture. The underlying Vista model shown in Figure 3 identifies each major component of the system. As each module is presented, only its important functions and interface to other processes are described in this section. Implementation is described in more detail elsewhere <ref> [3] </ref>. Each of the four large boxes in Figure 3 is a separate process. The user interface is a part of the Visualization Manager, or VM. To the user the VM appears to be the bulk of Vista. <p> For example, the VDM may accept connections from several different hosts in one session; the ADM may need to send an interrupt to the application if it needs information immediately, before the next program vis-point. The Data Manager design includes other functions discussed in <ref> [3] </ref>. Underlying each module is a layered communication library which transparently passes high-level messages between modules, assuring reliable delivery and transparent access to data. Each message is assigned a unique identifier allowing responses to be paired with the original request when necessary.
Reference: [4] <author> C. Upson, T Faulhaber, Jr., D. Kamins, D. Laidlaw, D. Schlegel, J. Vroom, R. Gurwitz, and A. van Dam, </author> <title> The application visualization system: A computational environment for scientific visualization, </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 9 (1989), </volume> <pages> pp. 30-42. </pages>
Reference-contexts: There are a several well-known systems promoted for either distributed visualization or animation. Many of these are discussed and compared with Vista in our full report [3] including AVS <ref> [4] </ref>, aPE [2], Balsa-II [1], and PEX. In this paper we present the design of Vista, an example of its use, and some architectural details of the system. 2. Design. In this section we describe the conceptual design of Vista and show how our requirements and goals motivated that design.
References-found: 4

