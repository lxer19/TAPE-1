URL: http://www.cs.toronto.edu/~chechik/courses97/csc2108/projects/web/1.ps
Refering-URL: http://www.cs.toronto.edu/~chechik/courses97/csc2108/projects/web/
Root-URL: 
Title: 1. UPPAAL and SCSI Protocol Example  
Author: By Andr Wong 
Web: http://www.docs.uu.se/docs/rtmv/uppaal  
Note: Page i 1.  
Abstract: Formal methods that are easy to use but with limited flexibility are sometimes criticized as inefficient and ineffective. This report took a detailed look at UPPAAL 1 [1], a toolbox for modeling, simulating and verifying real-time systems, that is jointly developed by Uppsala University and Aalborg University. Specifically, components of the UPPAAL toolbox, the modeling language and the verification language are investigated. A Small Computer System Interface (SCSI) bus protocol example is presented to illustrate various features of UPPAAL. In addition, there are discussions regarding advantages and tradeoffs in using UPPAAL. It is concluded that UPPAAL is still in its infant research state and is currently suitable for modeling small real-time systems only. In general, formal methods should be able to model a reasonable variety of systems. Even if they are designed for restricted application domains, they should be flexible enough to satisfy common needs in those domains to be qualified as useful formal methods. It is apparent that UPPAAL does not meet the expectations of a useful formal method although a general conclusion cannot be drawn, as UPPAAL just happens to be a bad example that is in its early development stage. The author still believes that there is a need for formal methods that are user-friendly and the goal can be accomplished. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Johan Bengtsson, Kim G. Larsen, Fredrik Larsson, Paul Pettersson and Wang Yi. </author> <title> UPPAAL - a Tool Suite for Automatic Verification of Real-Time Systems. </title> <booktitle> In Proceedings of the 4th DIMACS Workshop on Verification and Control of Hybrid Systems, </booktitle> <address> New Brunswick, New Jersey, </address> <month> 22-24 October, </month> <year> 1995. </year>
Reference-contexts: Finally, All transitions inside an automaton are declared in a transition list which looks like trans transition, transition, transition ... Clock variables, data variables, channels and automata declarations shown in the gray Config box in Page 5 The simplified textual syntax is presented here informally for further understanding. Consult <ref> [1] </ref> for the complete BNF syntax. The semantics of UPPAAL modeling language is similar to that of a conventional finite state machine. A UPPAAL model is a parallel composition of all of its automata. <p> The shortest path can be used as a diagnose trace for the UPPAAL simulator. Additional details of the model checking algorithm can be found in <ref> [1] </ref>. The algorithm searches all executable states. <p> UPPAAL modeling language lacks the flexibility and expressiveness of other formal methods. The inflexibility comes from the limited variety of models can that be modeled effectively. As discussed in the previous section, UPPAAL seems to be suitable for modeling small real time systems. In additional, even though <ref> [1] </ref> stated that one of the goals of UPPAAL is to make the modeling language as close to a high level real-time programming language as possible, many simple programming constructs are not implemented in its current version. Even the functionality of the assignment statement is severely restricted. <p> A simpler solution is to provide a facility to automatically convert temporal logic properties to the corresponding test automata in a manner like SPIN, which <ref> [1] </ref> says will be included in the next version of UPPAAL. The numerous feature comparisons of SPIN with UPPAAL in this section are not incidental. The similarity between SPIN and UPPAAL has drawn some attentions among researchers [6].
Reference: 2. <author> Kim G. Larsen, Paul Pettersson and Wang Yi. </author> <title> UPPAAL in a Nutshell. </title> <booktitle> Springer International Journal of Software Tools for Technology Transfer 1(1/2), </booktitle> <month> October </month> <year> 1997. </year>
Reference-contexts: For properties that cannot be expressed directly in the verification language, a workaround suggested by <ref> [2] </ref> is to manually create additional automata that observe changes to variables in the actual model, i.e atomic1 and atomic2 in this case. Those test automata reflect their observations by moving to different states. A test automaton for Y is illustrated in Figure 7. <p> Finally, to actually prove Y, an extra property l=A [] not (Test.bad) is needed to indirectly prove the bounded liveness property. The property states that the test automaton never stays in the state bad. The manual addition of a test automaton may seem unintuitive but <ref> [2] </ref> showed that a system S satisfies Y if the parallel composition of the S and Test satisfies l. Y is a bounded liveness property in this example but in general, it can be any arbitrary property. <p> Additional details of the model checking algorithm can be found in [1]. The algorithm searches all executable states. It can be observed that the algorithm depends heavily on the d d inclusion test and the emptiness test of d s . <ref> [2] </ref> claims that these tests have been implemented efficiently by representing the constraint systems as weighted directed graphs, and can be evaluated in O (n ) where n is the number of variables in the constraint systems.
Reference: 3. <author> R. Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1989. </year>
Reference-contexts: Synchronization channels are communication media that allow two automata to communicate with each other via signaling, i.e. channels do not carry data. For example, a channel a is declared in Similar to Calculus of Communicating Systems (CCS) <ref> [3] </ref>, communication on channels occurs as a two-process synchronization, but the nature of this kind of synchronization prohibits broadcasting, which is common in many real-time systems.
Reference: 4. <author> A. Olivero, J. Sifakis, and S. Yovine. </author> <title> Using Abstractions for the Verification of Linear Hybrids Systems. </title> <booktitle> In Proc. of CAV 94, volume 818 of Lectures Notes in Computer Science, </booktitle> <year> 1994. </year>
Reference-contexts: Autograph 1 is used for drawing the system shown in Figure 1. The graphical format has the advantage of user-friendliness, while the textual format gives model specifiers a fast and convenient way to express complex systems. The UPPAAL modeling language can also be used to model linear hybrid automata <ref> [4] </ref>, which are timed automata with clocks whose rates are bounded in a certain interval. Both formats are equivalent except when modeling linear hybrid automata, in which the textual format must be used.
Reference: 5. <author> Zvonko G. Vranesic. Safwat G. </author> <title> Zaky. Microcomputer Structures, </title> <address> Orlando: </address> <publisher> Saunders College Publishing, </publisher> <year> 1989. </year>
Reference-contexts: A UPPAAL Example The SCSI protocol, a relatively well-known protocol for connecting microcomputer devices to a common peripheral bus, is presented as an example to illustrate various features of UPPAAL. The SCSI protocol example is based on the description found in <ref> [5] </ref>. Using the SCSI protocol, multiple CPUs can share one or more SCSI buses, and each SCSI bus can daisy chain up to eight devices. SCSI is also widely used in PC servers by virtue of its ability to offload CPU utilization in data transfer.
Reference: 6. <author> Henrik Ejersbo Jensen, Kim G. Larsen, and Arne Skou. </author> <title> Modelling and Analysis of a Collision Avoidance Protocol using SPIN and UPPAAL. </title> <booktitle> In Proceedings of the 2nd SPIN Workshop. </booktitle> <institution> Rutgers University, </institution> <address> New Jersey, USA, </address> <month> 5 August </month> <year> 1996. </year>
Reference-contexts: The numerous feature comparisons of SPIN with UPPAAL in this section are not incidental. The similarity between SPIN and UPPAAL has drawn some attentions among researchers <ref> [6] </ref>. Compared to UPPAAL, SPIN has a much richer feature set and a more complete modeling language but lacks timing support. Although it provides a better simulation facility, the less than ideal verification tool is unable to verify large models. Some concurrency actions like broadcasting cannot be modeled accurately.
Reference: 7. <author> Constance Heitmeyer and Dino Mandrioli, </author> <title> "Formal Methods for Real-Time Computing: An Overview," </title> <editor> in Constance Heitmeyer and Dino Mandrioli (eds), </editor> <title> in Formal Methods for Real-Time Computing. </title> <publisher> John Wiley, </publisher> <address> New York, </address> <year> 1996. </year>
Reference-contexts: However, UPPAAL is by no means the only research effort in this area. According to surveys in formal methods <ref> [7, 8] </ref>, there are many other graphical formal methods like Statecharts [9], Petri Nets [10] and Timed Transition Models/Real-Time Temporal Logic [11]. UPPAAL is chosen among them because its syntax and semantics seem to be the simplest of all, and because it is freely available.
Reference: 8. <author> J.S. Ostroff. </author> <title> Formal Methods for the Specification and Design of Real-Time Safety Critical Systems. </title> <journal> Journal of Systems and Software, </journal> <volume> Vol. 18, No. 1, </volume> <month> April </month> <year> 1992. </year>
Reference-contexts: However, UPPAAL is by no means the only research effort in this area. According to surveys in formal methods <ref> [7, 8] </ref>, there are many other graphical formal methods like Statecharts [9], Petri Nets [10] and Timed Transition Models/Real-Time Temporal Logic [11]. UPPAAL is chosen among them because its syntax and semantics seem to be the simplest of all, and because it is freely available.
Reference: 9. <author> D. Harel, H. Lachover, A. Naamad, A. Pnueli, M. Politi, R. Sherman, and M. Trachtenbrot. Statemate: </author> <title> a working environment for the development of complex reactive systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16 </volume> <pages> 403-414, </pages> <year> 1990. </year>
Reference-contexts: However, UPPAAL is by no means the only research effort in this area. According to surveys in formal methods [7, 8], there are many other graphical formal methods like Statecharts <ref> [9] </ref>, Petri Nets [10] and Timed Transition Models/Real-Time Temporal Logic [11]. UPPAAL is chosen among them because its syntax and semantics seem to be the simplest of all, and because it is freely available.
Reference: 10. <author> W. Reisig. </author> <title> Petri nets: an introduction. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1985. </year>
Reference-contexts: However, UPPAAL is by no means the only research effort in this area. According to surveys in formal methods [7, 8], there are many other graphical formal methods like Statecharts [9], Petri Nets <ref> [10] </ref> and Timed Transition Models/Real-Time Temporal Logic [11]. UPPAAL is chosen among them because its syntax and semantics seem to be the simplest of all, and because it is freely available.
Reference: 11. <author> J.S. Ostroff. </author> <title> Real-time computer control of discrete event systems modelled by extended state machines: a temporal logic approach. </title> <type> Technical Report 8618, </type> <institution> Systems Control Group, Dept. of Electrical Engineering, University of Toronto, </institution> <month> September </month> <year> 1986. </year> <note> revised January 1987. </note>
Reference-contexts: However, UPPAAL is by no means the only research effort in this area. According to surveys in formal methods [7, 8], there are many other graphical formal methods like Statecharts [9], Petri Nets [10] and Timed Transition Models/Real-Time Temporal Logic <ref> [11] </ref>. UPPAAL is chosen among them because its syntax and semantics seem to be the simplest of all, and because it is freely available. Page 2 UPPAAL is a toolbox for modeling, simulating and verifying real-time systems which includes a modeling language, a simulator and a model checker.
Reference: 12. <author> Gerard J. Holzmann. </author> <title> Design and Validation of Computer Protocols, </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: The author has conducted some informal experiments and found out that UPPAAL is indeed quite efficient when compared to other formal method tools like SPIN <ref> [12] </ref>. passed := - waiting := (sv 0 ,d 0 ) -repeat begin remove (sv,d) from waiting if (sv,d) satisfies b then return success else if not (d d) for all (sv,d) passed then begin add (sv,d) to passed successor := (sv s ,d s ) : (sv,d) a (sv s <p> Although the model has close to twenty-five billion total possible states, verification of properties seems to take seconds, and the memory requirement is negligible. This is considered extremely efficient when some other formal method tools like SPIN <ref> [12] </ref> take hundreds of megabytes of memory even when verifying small systems. The main reason for the efficient verification is the application of the symbolic techniques that reduces verification problems to that of manipulating and solving simple constraint systems, as discussed in section 4.
Reference: 13. <author> Kim G. Larsen, Paul Pettersson and Wang Yi. </author> <title> Model-Checking for Real-Time Systems. </title> <booktitle> In Proc. of Fundamentals of Computation Theory, volume 965 of Lecture Notes in Computer Science, </booktitle> <pages> pages 62-88, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: The main reason for the efficient verification is the application of the symbolic techniques that reduces verification problems to that of manipulating and solving simple constraint systems, as discussed in section 4. Restrictions to reachability analysis are also crucial to the efficiency of the model checkers <ref> [13] </ref>. For non real-time systems, data variable constraints and temporal logic properties can usually represent most desired properties. However, for real-time systems, relaxed temporal properties like temporal logic are insufficient as precise timing constraints are needed for their correctness.
Reference: 14. <author> R. Gerth, D. Peled, M.Y. Vardi, and P. Wolper. </author> <title> Simple On-The-Fly Automatic Verification of Linear Temporal Logic. </title> <booktitle> Proc. IFIP/WG6.1 Symp. Protocol Specifications, Testing and Verification (PSTV95), </booktitle> <pages> pp. 3-18, </pages> <address> Warsaw, Poland, </address> <publisher> Chapman & Hall, </publisher> <month> June </month> <year> 1995. </year>
Reference-contexts: Those never claims are actually Bchi automata that are generated mechanically based on a simple on-the-fly construction <ref> [14] </ref>. They are generated in a way that they formally accept only those system executions that satisfy the corresponding LTL formulae. Therefore, the inclusion of those generated automata in a SPIN model lets SPIN indirectly verify the LTL formulae, much like what test automata do for UPPAAL.
References-found: 14

