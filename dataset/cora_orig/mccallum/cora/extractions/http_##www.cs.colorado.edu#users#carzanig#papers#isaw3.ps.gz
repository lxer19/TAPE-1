URL: http://www.cs.colorado.edu/users/carzanig/papers/isaw3.ps.gz
Refering-URL: http://www.cs.colorado.edu/users/carzanig/papers/index.html
Root-URL: http://www.cs.colorado.edu
Email: carzanig@cs.colorado.edu  dinitto@elet.polimi.it  dsr@ics.uci.edu  alw@cs.colorado.edu  
Title: Issues in Supporting Event-based Architectural Styles  
Author: Antonio Carzaniga Elisabetta Di Nitto CEFRIEL and UCI David S. Rosenblum Alexander L. Wolf 
Address: Campus Box 430 Boulder, CO 80309-0430  Via Fucini, 2 20133 Milano, Italy  ICS2 209 Irvine, CA 92697-3425  Campus Box 430 Boulder, CO 80309-0430  
Affiliation: Univ. of Colorado at Boulder Dept. of Computer Science  CEFRIEL  Univ. of California, Irvine Dept. of Inf. and Comp. Science  Univ. of Colorado at Boulder Dept. of Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> G. Cugola, E. Di Nitto, and A. Fuggetta, </author> <title> Exploiting an Event-based Infrastructure to Develop Complex Distributed Systems, </title> <booktitle> In Proceedings of the 20th International Conference on Software Engineering , Kyoto, </booktitle> <address> Japan, </address> <month> April </month> <year> 1998. </year>
Reference-contexts: We started investigating the event-based style two years ago in two separate research efforts where we participated in the definition of a general model for event-based architectures [4] and in the development an event-based infrastructure called JEDI <ref> [1] </ref>. By using JEDI and by comparing it with other systems and infrastructures, we recognized a number of different variations of the event-based style. These variations have different impact on the structure, the behavior, and the performance (in other words, on the architecture) of applications. <p> Notice that this property is established by the subscriber, and it is not hard-coded in any element of the notification (as in Smatsockets) or in a channel (as in the CORBA event service). JEDI <ref> [1] </ref> provides a mechanism for event subscription having a similar expressive power. In JEDI a notification is defined by a name and by a number of parameters. For instance, Alarm (PC1, HALTED) is a notification whose name is Alarm and has two parameters whose values are PC1 and HALTED.
Reference: [2] <author> B. Krishnamurthy and D. S. Rosenblum, Yeast: </author> <title> A General Purpose Event-Action System, </title> <journal> IEEE Transactions on Software Engineering , Vol. </journal> <volume> 21, No. 10, </volume> <month> October </month> <year> 1995. </year>
Reference-contexts: In JEDI, event receivers subscribe for event patterns , which are expressions over the name and parameters of a notification. So, for example, Alarm*(_, _) would match all the notifications whose name starts with Alarm and that have two parameters. Yeast <ref> [2] </ref> is an event-action system . It observes event sequences and reacts to their occurrence according to some action specification. It is not an event-based infrastructure per se , since its event service triggers actions relevant to human beings rather than delivering notifications to other software components.
Reference: [3] <institution> Object Management Group, </institution> <month> CORBAservices: </month> <title> Common Object Services Specification, </title> <month> December </month> <year> 1997. </year>
Reference-contexts: These two effects guarantee a high compositionality and reconfigurability of a software architecture. In the last few years, interest in the event-based style among practitioners has resulted in the development of a number of event-based middleware infrastructures (see for instance <ref> [3] </ref>, [7], and [6]). These infrastructures implicitly support the event-based style; that is, they provide APIs and frameworks for defining applications structured according to this style. <p> This high-level architectural style is being exploited by most of the event-based infrastructures that have been currently implemented. In the following we mention a few of these that provide significant variations of the style. CORBA defines the concept of channel, which is a simplified version of an event service <ref> [3] </ref>. All the recipients that are connected to a channel receive all the notifications that are published by object of interests on that channel. Smartsockets [7] proposes a more powerful approach in which the event service can accept subscriptions for a number of different subjects.
Reference: [4] <author> D.S. Rosenblum and A.L. Wolf, </author> <title> A Design Framework for Internet-Scale Event Observation and Notification, </title> <booktitle> In Proceedings of the 6th European Software Engineering Conference (Joint with SIGSOFT '97, Foundations of Software Engineering), </booktitle> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: These infrastructures implicitly support the event-based style; that is, they provide APIs and frameworks for defining applications structured according to this style. We started investigating the event-based style two years ago in two separate research efforts where we participated in the definition of a general model for event-based architectures <ref> [4] </ref> and in the development an event-based infrastructure called JEDI [1]. By using JEDI and by comparing it with other systems and infrastructures, we recognized a number of different variations of the event-based style.
Reference: [5] <author> M. Shaw and P. Clements, </author> <title> Toward Boxology: Preliminary Classification of Architectural Styles, </title> <booktitle> In Proceedings of the Second International Software Architecture Workshop (ISAW-2) , San Francisco (CA), </booktitle> <address> USA, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: Each of them defines a set of design rules that identify the kinds of components and connectors that may be used to compose a system or a subsystem, together with local or global constraints on the way the composition is done <ref> [5] </ref>. The formalization of styles helps the understanding and categorization of existing architectures and supports developers in the definition of the structure of new systems. A style that is very prevalent for large-scale distributed applications is the event-based style .
Reference: [6] <author> B. Segall and D. Arnold, </author> <title> Elvin has left the building: A publish/subscribe notification service with quencing, </title> <booktitle> In Proceedings of AUUG97, </booktitle> <month> September </month> <year> 1997. </year>
Reference-contexts: These two effects guarantee a high compositionality and reconfigurability of a software architecture. In the last few years, interest in the event-based style among practitioners has resulted in the development of a number of event-based middleware infrastructures (see for instance [3], [7], and <ref> [6] </ref>). These infrastructures implicitly support the event-based style; that is, they provide APIs and frameworks for defining applications structured according to this style.
Reference: [7] <author> Talarian Corporation, </author> <title> Mission Critical Interprocess Communications an Introduction to Smartsockets, </title> <type> white paper. </type>
Reference-contexts: These two effects guarantee a high compositionality and reconfigurability of a software architecture. In the last few years, interest in the event-based style among practitioners has resulted in the development of a number of event-based middleware infrastructures (see for instance [3], <ref> [7] </ref>, and [6]). These infrastructures implicitly support the event-based style; that is, they provide APIs and frameworks for defining applications structured according to this style. <p> CORBA defines the concept of channel, which is a simplified version of an event service [3]. All the recipients that are connected to a channel receive all the notifications that are published by object of interests on that channel. Smartsockets <ref> [7] </ref> proposes a more powerful approach in which the event service can accept subscriptions for a number of different subjects. Each notification is characterized by its subject and a data part . A component receives all the event notifications that belong to the subjects to which it has subscribed.
Reference: [8] <author> TIBCO Corporation, TIB/Rendezvous, </author> <note> white paper. http://www.rv.tibco.com/rvwhitepaper.html. </note>
Reference-contexts: A component receives all the event notifications that belong to the subjects to which it has subscribed. Therefore, the subject defines a kind of virtual connector between objects of interest and recipients. The same approach based on the subject has been adopted by TIBCO for the development of TIB/Rendezvous <ref> [8] </ref>. Event notification Component A (recipient) Component B Component C (object of interest) Component E Component F (recipient) Event Service Event channels and subjects are simple mechanisms for connecting event receivers and objects of interest. However, they are not very flexible.
References-found: 8

