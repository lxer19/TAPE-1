URL: ftp://ftp.cs.washington.edu/pub/orca/papers/icpp97.ps
Refering-URL: http://www.cs.washington.edu/research/projects/zpl/papers/abstracts/icpp97.html
Root-URL: 
Title: Quantifying the Effects of Communication Optimizations  
Author: Sung-Eun Choi Lawrence Snyder 
Address: Box 352350  Seattle, WA 98195-2350  
Affiliation: Department of Computer Science and Engineering  University of Washington  
Note: Appears in "Proceedings of the IEEE International Conference on Parallel Processing," pages 218-222, 1997.  
Abstract: Using a specially constructed machine independent communication optimizer that allows control over optimization selection, we quantify the performance benefit of three well known communication optimizations: redundant communication removal, communication combination, and communication pipelining. The numbers are shown relative to the base performance of benchmark programs using the standard communication optimization of message vectorization. The effects on the number of calls to communication routines, both static and dynamic, are tabulated. We consider a variety of communication primitives including those found in Intel's NX library, PVM and the T3D's SHMEM library. The results show substantial improvement, with two combinations of optimizations being most effective. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Braford L. Chamberlain, Sung-Eun Choi, and Lawrence Snyder. </author> <title> Ironman: A machine independent parallel communication abstraction to replace message passing in compilers. </title> <type> Technical Report 97-04-04, </type> <institution> University of Washington, </institution> <year> 1997. </year>
Reference-contexts: In our notation, we use i; j as subscripts to indicate whole array operations. For convenience, we will assume the compiler generates message passing code by emitting message sends and receives, though this is a simplification of what the ZPL compiler does <ref> [1] </ref>. For clarity of presentation, we omit the bounds information as well as the source and destination of the send and receive operations. communication. <p> The ZPL compiler generates machine independent SPMD ANSI C code. The C code is compiled using the target machine's native C compiler and linked with the ZPL runtime libraries to produce an executable. More information on communication in ZPL can be found elsewhere <ref> [1, 3] </ref>. 3.2 Influence of Machine Characteristics Our first experiment is simply to determine the machine dependent characteristics that affect the optimizations on the Paragon and the T3D. We measure the software overhead, i.e., the exposed communication cost, for different communication primitives in our framework.
Reference: [2] <author> Chamberlain et al. Factor-Join: </author> <title> A unique approach to compiling array languages for parallel machines. </title> <booktitle> In LCPC, </booktitle> <year> 1996. </year>
Reference-contexts: Parallelizing compilers for scalar languages such as Fortran 77 must perform message vectorization since the unit of representation, and thus the unit of communication, is a single scalar value. Compilers for array languages can directly use arrays and array slices as the unit of representation <ref> [2] </ref>, eliminating the need for message vectorization. Thus the baseline of comparison will be optimization using only message vectorization. In our notation, we use i; j as subscripts to indicate whole array operations.
Reference: [3] <author> Sung-Eun Choi and Lawrence Snyder. </author> <title> Quantifying the effect of communication optimizations. </title> <type> Technical Report 97-04-05, </type> <institution> University of Washington, </institution> <year> 1997. </year>
Reference-contexts: The ZPL compiler generates machine independent SPMD ANSI C code. The C code is compiled using the target machine's native C compiler and linked with the ZPL runtime libraries to produce an executable. More information on communication in ZPL can be found elsewhere <ref> [1, 3] </ref>. 3.2 Influence of Machine Characteristics Our first experiment is simply to determine the machine dependent characteristics that affect the optimizations on the Paragon and the T3D. We measure the software overhead, i.e., the exposed communication cost, for different communication primitives in our framework.
References-found: 3

