URL: http://www-cs-students.stanford.edu/~csilvers/papers/sm-sigir.ps
Refering-URL: http://www-cs-students.stanford.edu/~csilvers/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: csilvers@cs.stanford.edu  jpederse@verity.com  
Phone: (415)937-2853  (408)542-2323  
Title: Almost-Constant-Time Clustering of Arbitrary Corpus Subsets  
Author: Craig Silverstein Jan O. Pedersen 
Address: Gates Hall, Stanford, CA 94305  894 Ross Dr., Sunnyvale, CA 94089  
Affiliation: Stanford University  Verity Inc.  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Manette B. Lazear Adrienne J. Kleiboemer and Jan O. Pedersen. </author> <title> Tailoring a retieval system for naive users. </title> <booktitle> In Fifth Annual Symposium on Document Analysis and Information Retrieval, </booktitle> <month> April </month> <year> 1996. </year>
Reference-contexts: This constant-time clustering technique is constrained to document collections that correspond to sets of nodes in the precomputed hierarchy, such as arise when one performs Scatter/Gather on an entire collection. However, Scatter/Gather browsing is most useful as a tool for viewing search results, which are arbitrary corpus subsets <ref> [1] </ref>. Indeed, experiments indicate that searching followed by the presentation of clusters and selection of the most relevant one improves precision with respect to a baseline presentation of ranked documents [6].
Reference: [2] <author> D. R. Cutting, D. R. Karger, J. O. Pedersen, and J. W. Tukey. Scatter/gather: </author> <title> A cluster-based approach to browsing large document collections. </title> <booktitle> In Proc. 15th Annual Int'l ACM SIGIR Conference on R&D in IR, </booktitle> <month> June </month> <year> 1992. </year> <note> Also available as Xerox PARC technical report SSL-92-02. </note>
Reference-contexts: 1 Introduction Document clustering has emerged as an important tool for the presentation and navigation of document collections. For example, the Scatter/Gather browsing paradigm clusters documents into topic-coherent groups and presents descriptive textual summaries to the user <ref> [2] </ref>. Informed by the summaries, the user may select clusters, thereby forming a subcollection, for iterative examination. The clustering and reclustering is done on the fly, so that different topics are seen depending on the subcollection clustered.
Reference: [3] <author> Douglass R. Cutting, David R. Karger, and Jan O. Pedersen. </author> <title> Constant interaction-time Scatter/Gather browsing of very large document collections. </title> <booktitle> In Proceedings of the 16th Annual International ACM/SIGIR Conference, </booktitle> <pages> pages 126-135, </pages> <address> Pittsburgh, PA, </address> <year> 1993. </year>
Reference-contexts: The general approach is to precompute, off-line, a global cluster hierarchy, a tree structure whose leaves are documents and whose internal nodes correspond to aggregates of similar documents. The cluster hierarchy is then used to accelerate on-line clustering. For example, Cutting, Karger, and Pedersen <ref> [3] </ref> develop a constant-time Scatter/Gather step, assuming that one starts with document subsets corresponding to nodes in a precomputed hierarchy. Suppose one wants to cluster an entire collection into five groups. <p> The cluster hierarchy is computed off-line, typically in N log N time by recursively applying a linear-time partitioning algorithm (see, for example, <ref> [3] </ref>). The goal is to cluster (partition) S into p groups. Note that this algorithm will be similar in kind to an algorithm that takes S and clusters it from scratch. <p> The corpus was preprocessed by the Xerox PARC TextDatabase engine [4], including the construction of a cluster hierarchy with fan-out 5 and 201,772 internal nodes. We used a linear-time partitioning algorithm called fractionation as the baseline direct clustering method <ref> [3] </ref>. For the fast clustering methods we expanded until we had collected 200 nodes (m = 200), and then used fractionation to cluster back to five groups.
Reference: [4] <author> Douglass R. Cutting, Jan O. Pedersen, and Per-Kristian Halvorsen. </author> <title> An object-oriented architecture for text retrieval. </title> <booktitle> In Conference Proceedings of RIAO'91, Intelligent Text and Image Handling, Barcelona, Spain, </booktitle> <pages> pages 285-298, </pages> <month> April </month> <year> 1991. </year> <note> Also available as Xerox PARC technical report SSL-90-83. </note>
Reference-contexts: We used the TREC4 ad hoc evaluation corpus, consisting of 567,522 documents and 49 queries with relevance assessments [5]. The corpus was preprocessed by the Xerox PARC TextDatabase engine <ref> [4] </ref>, including the construction of a cluster hierarchy with fan-out 5 and 201,772 internal nodes. We used a linear-time partitioning algorithm called fractionation as the baseline direct clustering method [3].
Reference: [5] <author> Donna Harman, </author> <title> editor. </title> <booktitle> The Fourth Text REtrieval Conference. </booktitle> <institution> National Institute of Standards and Technology Special Publication 500-236, </institution> <year> 1996. </year>
Reference-contexts: That is, we ran one Scatter/Gather step and measured the precision, at three cut-off values, of the best cluster (the one with the highest density of relevant documents). We used the TREC4 ad hoc evaluation corpus, consisting of 567,522 documents and 49 queries with relevance assessments <ref> [5] </ref>. The corpus was preprocessed by the Xerox PARC TextDatabase engine [4], including the construction of a cluster hierarchy with fan-out 5 and 201,772 internal nodes. We used a linear-time partitioning algorithm called fractionation as the baseline direct clustering method [3].
Reference: [6] <author> Marti A. Hearst and Jan O. Pedersen. </author> <title> Reexamining the cluster hypothesis: </title> <booktitle> Scatter/gather on retrieval results. In Proc. 19th Annual Int'l ACM SIGIR Conference on R&D in IR, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: The clustering and reclustering is done on the fly, so that different topics are seen depending on the subcollection clustered. This is preferrable to navigating with respect to a static, global, topic hierarchy since the induced topics are specific to the document set under investigation <ref> [6] </ref>. However, since typical clustering algorithms are at least linear in the number of objects to be clustered (see e.g. [7]), the computational cost of these operations may be too great for interactive use if the document set is large. <p> However, Scatter/Gather browsing is most useful as a tool for viewing search results, which are arbitrary corpus subsets [1]. Indeed, experiments indicate that searching followed by the presentation of clusters and selection of the most relevant one improves precision with respect to a baseline presentation of ranked documents <ref> [6] </ref>. <p> On the down side, it will ignore large nodes with few matches if these matches are distributed evenly among the children. 7 3 Results To evaluate the fast clustering methods with respect to the baseline performance of direct clustering, we used the methodology proposed in <ref> [6] </ref>. That is, we ran one Scatter/Gather step and measured the precision, at three cut-off values, of the best cluster (the one with the highest density of relevant documents). We used the TREC4 ad hoc evaluation corpus, consisting of 567,522 documents and 49 queries with relevance assessments [5].
Reference: [7] <author> Anil K. Jain and Richard C. Dubes. </author> <title> Algorithms for Clustering Data. </title> <publisher> Pretice Hall, </publisher> <address> Engelwood Cliffs, N.J. 07632, </address> <year> 1988. </year> <month> 14 </month>
Reference-contexts: This is preferrable to navigating with respect to a static, global, topic hierarchy since the induced topics are specific to the document set under investigation [6]. However, since typical clustering algorithms are at least linear in the number of objects to be clustered (see e.g. <ref> [7] </ref>), the computational cost of these operations may be too great for interactive use if the document set is large. The computational cost of on-the-fly, or on-line, document clustering may be greatly reduced by preprocessing the document collection.
References-found: 7

