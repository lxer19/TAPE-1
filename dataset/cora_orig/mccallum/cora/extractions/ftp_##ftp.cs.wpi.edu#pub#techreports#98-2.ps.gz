URL: ftp://ftp.cs.wpi.edu/pub/techreports/98-2.ps.gz
Refering-URL: http://cs.wpi.edu/Resources/techreports/index.html
Root-URL: 
Title: Data Warehouse Evolution: Trade-offs between Quality and Cost of Query Rewritings  
Author: by Andreas Koeller Anisoara Nica Elke A. Rundensteiner 
Date: January 1998  
Pubnum: WPI-CS-TR-98-2  
Abstract: Computer Science Technical Report Series WORCESTER POLYTECHNIC INSTITUTE Computer Science Department 100 Institute Road, Worcester, Massachusetts 01609-2280 
Abstract-found: 1
Intro-found: 1
Reference: [AAS97] <author> D. Agrawal, A. El Abbadi, and A. Singh. </author> <title> Efficient View Maintenance at Data Warehouses. </title> <booktitle> In Proceedings of SIGMOD, </booktitle> <pages> pages 417-427, </pages> <year> 1997. </year>
Reference-contexts: in the context of our view synchronization problem of EVE, it is also likely to be useful for a number of different scenarios in the area of query reformulation such as query rewriting using views [LMS95], where several different ways of rewriting a query are conceivable, or data warehouse maintenance <ref> [AAS97, ZGMHW95] </ref>, for which our cost measurement approach and optimization insights gained by our performance studies can be valuable. This work builds partly upon the EVE project and is complementary to our previous work on finding and generating view rewritings [LNR97b]. <p> This work builds partly upon the EVE project and is complementary to our previous work on finding and generating view rewritings [LNR97b]. It goes beyond the work in traditional query optimization <ref> [JK84, vdBK94, AAS97] </ref> since it is not concerned with finding the best way to execute a well-defined query, but with finding the best (not necessarily equivalent) query for a particular problem. <p> This current paper now addresses this need by establishing a model for systematically ranking otherwise incomparable solutions for view synchronization. The problem of query optimization has been addressed for instance by Jarke et al. [JK84], van den Berg et al. [vdBK94], or Agrawal et al. <ref> [AAS97] </ref>. These works are concerned with optimizing a given query in order to execute it in an efficient way. View synchronization in the EVE environment encounters a different problem, namely we have to select a good (but not necessarily equivalent) query among several possible ones. <p> They also give a taxonomy for different levels of correctness for view maintenance algorithms. A second paper by the same authors ("Strobe", [ZGMW96]) extends their findings towards multi-source information spaces, but does not incorporate any performance model or cost studies. Agrawal et al. <ref> [AAS97] </ref> propose the SWEEP-algorithm, which can ensure consistency of the data warehouse in a larger number of cases compared to the Strobe family of algorithms. Finally, [ZGMHW95] contains a performance study similar to ours.
Reference: [BLT86] <author> J. A. Blakeley, P.-E. Larson, and F. W. Tompa. </author> <title> Efficiently Updating Materialized Views. </title> <booktitle> Proceedings of SIGMOD, </booktitle> <pages> pages 61-71, </pages> <year> 1986. </year>
Reference-contexts: We contend that, with these two dimensions, it is possible to compare different view queries (or legal rewritings) with each other, even if they are not equivalent (as commonly assumed for query rewritings in the context of query optimization <ref> [BLT86, GM95] </ref> or in more recent work on rewriting queries using views [LMS95, CKP95]). <p> It builds upon previous cost models of incremental view maintenance <ref> [BLT86, ZGMHW95, ZWGM97] </ref> but extends the QC-Model to now also incorporate a measure of divergence from the intended view specification. <p> For the problem of incremental view maintenance, a concept which we use in our performance studies, earlier work has been done by several other projects in the literature [CTL + 96, GMS93]. Blakeley et al. <ref> [BLT86] </ref> are concerned with a centralized environment only. Also, they have looked at incremental view maintenance assuming non-concurrent updates (updates are sufficiently spaced to not interfere with each other, each update reaches the data warehouse before the next update is executed at any of the base relations).
Reference: [CKL + 96] <author> L.S. Colby, A. Kawaguchi, D.F. Lieuwen, I.S. Mumick, and K.A. Ross. </author> <title> Supporting Multiple View Maintenance Policies. </title> <type> AT&T Technical Memo, </type> <year> 1996. </year>
Reference-contexts: Most of the prior work on views in distributed database systems has focused on the problem of view maintenance (e.g., propagating data changes to the view) <ref> [GM95, QW97, CKL + 96] </ref>. In [RLN97], we establish a taxonomy of view adaptation problems that identifies alternate dimensions of the problem space, and hence serves as a framework for characterizing and hence distinguishing our view synchronization problem from other (previously studied) view adaptation problems.
Reference: [CKP95] <author> S. Chaudhuri, R. Krishnamurthy, and S. Potamianos. </author> <title> Optimizing Query with Materialized Views. </title> <booktitle> In Proceedings of IEEE International Conference on Data Engineering, </booktitle> <year> 1995. </year>
Reference-contexts: contend that, with these two dimensions, it is possible to compare different view queries (or legal rewritings) with each other, even if they are not equivalent (as commonly assumed for query rewritings in the context of query optimization [BLT86, GM95] or in more recent work on rewriting queries using views <ref> [LMS95, CKP95] </ref>).
Reference: [CTL + 96] <author> L.S. Colby, T.Griffin, L.Libkin, I.S.Mumick, and H.Trickey. </author> <title> Algorithms for Deferred View Maintenance. </title> <booktitle> In Proceedings of SIGMOD, </booktitle> <pages> pages 469-480, </pages> <year> 1996. </year>
Reference-contexts: For the problem of incremental view maintenance, a concept which we use in our performance studies, earlier work has been done by several other projects in the literature <ref> [CTL + 96, GMS93] </ref>. Blakeley et al. [BLT86] are concerned with a centralized environment only.
Reference: [GJM96] <author> A. Gupta, H.V. Jagadish, </author> <title> and I.S. Mumick. Data Integration using Self-Maintainable Views. </title> <booktitle> In Proceedings of International Conference on Extending Database Technology (EDBT), </booktitle> <year> 1996. </year>
Reference-contexts: The best case CF M = 0 occurs when there is only one relation referred to in the view V (or when V is self-maintainable as discussed in <ref> [GJM96] </ref>. Self-maintainability is out of the scope of this paper, so we do not discuss it any further.).
Reference: [GM95] <author> A. Gupta and I.S. Mumick. </author> <title> Maintenance of Materialized Views: Problems, Techniques, </title> <journal> and Applications. IEEE Data Engineering Bulletin, Special Issue on Materialized Views and Warehousing, </journal> <volume> 18(2) </volume> <pages> 3-19, </pages> <year> 1995. </year>
Reference-contexts: We contend that, with these two dimensions, it is possible to compare different view queries (or legal rewritings) with each other, even if they are not equivalent (as commonly assumed for query rewritings in the context of query optimization <ref> [BLT86, GM95] </ref> or in more recent work on rewriting queries using views [LMS95, CKP95]). <p> Most of the prior work on views in distributed database systems has focused on the problem of view maintenance (e.g., propagating data changes to the view) <ref> [GM95, QW97, CKL + 96] </ref>. In [RLN97], we establish a taxonomy of view adaptation problems that identifies alternate dimensions of the problem space, and hence serves as a framework for characterizing and hence distinguishing our view synchronization problem from other (previously studied) view adaptation problems.
Reference: [GMR95] <author> A. Gupta, I.S. Mumick, and K.A. Ross. </author> <title> Adapting Materialized Views after Redefinition. </title> <booktitle> In Pro--ceedings of ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 211-222, </pages> <year> 1995. </year>
Reference-contexts: Once the underlying ISs change their capabilities, the views derived from them may become undefined. This new problem is in contrast to work on incremental view maintenance which addresses changes at the data but not at the schema level [ZGMW96, ZWGM97] and to recent work on view redefinition <ref> [GMR95, MD96] </ref>. In the EVE (Evolvable View Environment) project [LNR97b], we began to tackle this new problem [LNR97a, NLR97, RLN97, NLR98].
Reference: [GMS93] <author> A. Gupta, </author> <title> I.S. Mumick, and V.S. Subrahmanian. Maintaining Views Incrementally. </title> <booktitle> In Proceedings of SIGMOD, </booktitle> <pages> pages 157-166, </pages> <year> 1993. </year>
Reference-contexts: For the problem of incremental view maintenance, a concept which we use in our performance studies, earlier work has been done by several other projects in the literature <ref> [CTL + 96, GMS93] </ref>. Blakeley et al. [BLT86] are concerned with a centralized environment only.
Reference: [JK84] <author> M. Jarke and J. Koch. </author> <title> Query Optimization in Database Systems. </title> <journal> ACM Computing Surveys, </journal> <pages> pages 111-152, </pages> <year> 1984. </year>
Reference-contexts: This work builds partly upon the EVE project and is complementary to our previous work on finding and generating view rewritings [LNR97b]. It goes beyond the work in traditional query optimization <ref> [JK84, vdBK94, AAS97] </ref> since it is not concerned with finding the best way to execute a well-defined query, but with finding the best (not necessarily equivalent) query for a particular problem. <p> This current paper now addresses this need by establishing a model for systematically ranking otherwise incomparable solutions for view synchronization. The problem of query optimization has been addressed for instance by Jarke et al. <ref> [JK84] </ref>, van den Berg et al. [vdBK94], or Agrawal et al. [AAS97]. These works are concerned with optimizing a given query in order to execute it in an efficient way.
Reference: [LKNR98] <author> A. J. Lee, A. Koeller, A. Nica, and E. A. Rundensteiner. </author> <title> Data Warehousing Evolution: Trade-offs between Quality and Cost. </title> <type> Technical Report WPI-CS-TR-98-2, </type> <institution> Worcester Polytechnic Institute, Dept. of Computer Science, </institution> <year> 1998. </year>
Reference-contexts: Local schema changes at information sources participating in a data warehouse will generally cause a view in the warehouse to become invalid. This problem has been addressed by our previous work on the EVE-project <ref> [LNR97a, NLR97, LNR97b, NLR98, LKNR98] </ref>. In this work, we now focussed on performance issues raised by view synchronization.
Reference: [LMS95] <author> A.Y. Levy, A.O. Mendelzon, and Y. Sagiv. </author> <title> Answering Queries Using Views. </title> <booktitle> In Proceedings of ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 95-104, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: contend that, with these two dimensions, it is possible to compare different view queries (or legal rewritings) with each other, even if they are not equivalent (as commonly assumed for query rewritings in the context of query optimization [BLT86, GM95] or in more recent work on rewriting queries using views <ref> [LMS95, CKP95] </ref>). <p> While we have initially developed this novel QC-Model in the context of our view synchronization problem of EVE, it is also likely to be useful for a number of different scenarios in the area of query reformulation such as query rewriting using views <ref> [LMS95] </ref>, where several different ways of rewriting a query are conceivable, or data warehouse maintenance [AAS97, ZGMHW95], for which our cost measurement approach and optimization insights gained by our performance studies can be valuable. <p> Rather, the work on precision and recall establishes measures of how well boolean queries perform on textual documents in terms of term similarities and counts. Much research has been done on query reformulation using materialized views. For example, Levy et al. <ref> [LRU96, LMS95, SDJL96] </ref> consider the problem of replacing an original query with a new expression containing materialized view definitions such that the new query is equivalent to the old one. <p> To the best of our knowledge, there is no work done in this context of query reformulation using views with the goal of generating queries without equivalence (for example, the new reformulated query could be a subset of the original query). This approach to query reformulation <ref> [LMS95] </ref> has some similarities with our view synchronization process, but again it is set in a different environment and has different goals.
Reference: [LNR97a] <author> A. J. Lee, A. Nica, and E. A. Rundensteiner. </author> <title> Keeping Virtual Information Resources Up and Running. In Proceedings of IBM Centre for Advanced Studies Conference CASCON97, </title> <type> Best Paper Award, </type> <pages> pages 1-14, </pages> <month> November </month> <year> 1997. </year>
Reference-contexts: In the EVE (Evolvable View Environment) project [LNR97b], we began to tackle this new problem <ref> [LNR97a, NLR97, RLN97, NLR98] </ref>. We have proposed Evolvable SQL (E-SQL), an extension of SQL that allows a view definer to specify preferences about what information is essential and what information can be replaced or discarded in a materialized view when the base tables providing this information change or become unavailable. <p> In [RLN97], we establish a taxonomy of view adaptation problems that identifies alternate dimensions of the problem space, and hence serves as a framework for characterizing and hence distinguishing our view synchronization problem from other (previously studied) view adaptation problems. In <ref> [LNR97a, LNR97b] </ref>, we introduce the overall EVE solution framework, in particular the concept of associating evolution preferences with view specifications. We also present an algorithm for achieving view synchronization, called the Simple View Synchronization algorithm (SVS). <p> These experiments were conducted in the context of our EVE system, i.e., all rewritings of a view were being generated by our synchronization algorithm <ref> [LNR97a, NLR98] </ref>. However, as our system is not fully instrumented with our QC-Model yet, the reported measures are computed using our algebraic findings instead of measuring them directly from an implemented system. <p> Local schema changes at information sources participating in a data warehouse will generally cause a view in the warehouse to become invalid. This problem has been addressed by our previous work on the EVE-project <ref> [LNR97a, NLR97, LNR97b, NLR98, LKNR98] </ref>. In this work, we now focussed on performance issues raised by view synchronization. <p> A first prototype of the EVE system is fully functional, and has been demonstrated at the IBM technology showcase during the CASCON '97 conference <ref> [LNR97a] </ref>. The results of this paper are currently being incorporated into our EVE prototype system which had previously simply picked the first legal view rewriting it discovered and not necessarily the best one.
Reference: [LNR97b] <author> A. J. Lee, A. Nica, and E. A. Rundensteiner. </author> <title> The EVE Framework: View Evolution in an Evolving Environment. </title> <type> Technical Report WPI-CS-TR-97-4, </type> <institution> Worcester Polytechnic Institute, Dept. of Computer Science, </institution> <year> 1997. </year>
Reference-contexts: This new problem is in contrast to work on incremental view maintenance which addresses changes at the data but not at the schema level [ZGMW96, ZWGM97] and to recent work on view redefinition [GMR95, MD96]. In the EVE (Evolvable View Environment) project <ref> [LNR97b] </ref>, we began to tackle this new problem [LNR97a, NLR97, RLN97, NLR98]. <p> This work builds partly upon the EVE project and is complementary to our previous work on finding and generating view rewritings <ref> [LNR97b] </ref>. It goes beyond the work in traditional query optimization [JK84, vdBK94, AAS97] since it is not concerned with finding the best way to execute a well-defined query, but with finding the best (not necessarily equivalent) query for a particular problem. <p> In [RLN97], we establish a taxonomy of view adaptation problems that identifies alternate dimensions of the problem space, and hence serves as a framework for characterizing and hence distinguishing our view synchronization problem from other (previously studied) view adaptation problems. In <ref> [LNR97a, LNR97b] </ref>, we introduce the overall EVE solution framework, in particular the concept of associating evolution preferences with view specifications. We also present an algorithm for achieving view synchronization, called the Simple View Synchronization algorithm (SVS). <p> Furthermore, we introduce the concept of ranking alternative view redefinitions through the QC-Model presented in this paper. 3 Review of the EVE Project In this section, we will review the concepts of the Evolvable View Environment (EVE) <ref> [LNR97b] </ref> as needed for the remainder of this paper. Our EVE-system provides a solution for the problem of capability changes in distributed networks of information systems (Figure 1). Major concepts of this architecture are [LNR97b]: 5 * IS Registration All information sources (IS) participating in the system register themselves with EVE <p> EVE Project In this section, we will review the concepts of the Evolvable View Environment (EVE) <ref> [LNR97b] </ref> as needed for the remainder of this paper. Our EVE-system provides a solution for the problem of capability changes in distributed networks of information systems (Figure 1). Major concepts of this architecture are [LNR97b]: 5 * IS Registration All information sources (IS) participating in the system register themselves with EVE through the Meta Knowledge Base (MKB). <p> These three features will now be introduced. 6 3.1 Establishing Preferences for the Evolution of SQL Views | E-SQL E-SQL or Evolvable-SQL is an extension of SQL that allows the view definer to express preferences for view evolution <ref> [LNR97b] </ref>. A user defining a view can specify what information is indispensable, what information is replaceable by (well defined) similar information from other ISs and whether a changing view extent is acceptable under certain circumstances. <p> first implementation of EVE, this is a SQL-based relational type model, although extended object models used by other projects will be employed in future versions. 8 3.3 View Synchronization The EVE system employs several algorithms for keeping up views under schema changes of underlying ISs i.e., for achieving view synchronization <ref> [LNR97b, NLR98] </ref>. Once a view is defined, EVE tracks schema changes in all participating ISs for this view. <p> Such a rewritten query is called a view rewriting, and if it fulfills certain criteria of correctness <ref> [LNR97b] </ref>, it is called a legal rewriting. <p> J C R, S = (R:A = S:A) 7 As mentioned earlier, this computation is only necessary in the case of VE ="" 17 After the capability change "delete-relation R", one possible rewriting for this view would be <ref> [LNR97b] </ref> CREATE VIEW V 1 (VE = `') AS SELECT T:A (AR = true); S:B FROM T (RR = true); S WHERE T:A = S:A (CR = true) (19) This rewriting replaces the dropped relation R with the relation T , replacing the one missing attribute R:A in the view by <p> Local schema changes at information sources participating in a data warehouse will generally cause a view in the warehouse to become invalid. This problem has been addressed by our previous work on the EVE-project <ref> [LNR97a, NLR97, LNR97b, NLR98, LKNR98] </ref>. In this work, we now focussed on performance issues raised by view synchronization.
Reference: [LRU96] <author> A. Y. Levy, A. Rajaraman, and J. D. Ullman. </author> <title> Answering queries using limited external processors. </title> <booktitle> In Proceedings of the Fifteenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 227-237, </pages> <address> Montreal, Canada, </address> <month> 3-5 June </month> <year> 1996. </year>
Reference-contexts: Rather, the work on precision and recall establishes measures of how well boolean queries perform on textual documents in terms of term similarities and counts. Much research has been done on query reformulation using materialized views. For example, Levy et al. <ref> [LRU96, LMS95, SDJL96] </ref> consider the problem of replacing an original query with a new expression containing materialized view definitions such that the new query is equivalent to the old one.
Reference: [MD96] <author> M. Mohania and G. Dong. </author> <title> Algorithms for Adapting Materialized Views in Data Warehouses. </title> <booktitle> International Symposium on Cooperative Database Systems for Advanced Applications, </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: Once the underlying ISs change their capabilities, the views derived from them may become undefined. This new problem is in contrast to work on incremental view maintenance which addresses changes at the data but not at the schema level [ZGMW96, ZWGM97] and to recent work on view redefinition <ref> [GMR95, MD96] </ref>. In the EVE (Evolvable View Environment) project [LNR97b], we began to tackle this new problem [LNR97a, NLR97, RLN97, NLR98].
Reference: [NLR97] <author> A. Nica, A.J . Lee, and E. A. Rundensteiner. </author> <title> View Synchronization with Complex Substitution Algorithms. </title> <type> Technical Report WPI-CS-TR-97-8, </type> <institution> Worcester Polytechnic Institute, Dept. of Computer Science, </institution> <year> 1997. </year>
Reference-contexts: In the EVE (Evolvable View Environment) project [LNR97b], we began to tackle this new problem <ref> [LNR97a, NLR97, RLN97, NLR98] </ref>. We have proposed Evolvable SQL (E-SQL), an extension of SQL that allows a view definer to specify preferences about what information is essential and what information can be replaced or discarded in a materialized view when the base tables providing this information change or become unavailable. <p> Local schema changes at information sources participating in a data warehouse will generally cause a view in the warehouse to become invalid. This problem has been addressed by our previous work on the EVE-project <ref> [LNR97a, NLR97, LNR97b, NLR98, LKNR98] </ref>. In this work, we now focussed on performance issues raised by view synchronization.
Reference: [NLR98] <author> A. Nica, A. J. Lee, and E. A. Rundensteiner. </author> <title> The CVS Algorithm for View Synchronization in Evolvable Large-Scale Information Systems. </title> <booktitle> To appear in Proceedings of International Conference on Extending Database Technology (EDBT'98), </booktitle> <address> Valencia, Spain, </address> <month> March </month> <year> 1998. </year>
Reference-contexts: In the EVE (Evolvable View Environment) project [LNR97b], we began to tackle this new problem <ref> [LNR97a, NLR97, RLN97, NLR98] </ref>. We have proposed Evolvable SQL (E-SQL), an extension of SQL that allows a view definer to specify preferences about what information is essential and what information can be replaced or discarded in a materialized view when the base tables providing this information change or become unavailable. <p> SVS produces a set of view definitions that can all be used as legal rewritings for view queries under capability changes. A new algorithm that is more general and imporves on the current SVS algorithm is introduced in <ref> [NLR98] </ref>. This Complex View Synchronization algorithm (CVS) generates an even larger number of alternative legal rewritings, thus raising the need for an efficiency model as introduced. This current paper now addresses this need by establishing a model for systematically ranking otherwise incomparable solutions for view synchronization. <p> first implementation of EVE, this is a SQL-based relational type model, although extended object models used by other projects will be employed in future versions. 8 3.3 View Synchronization The EVE system employs several algorithms for keeping up views under schema changes of underlying ISs i.e., for achieving view synchronization <ref> [LNR97b, NLR98] </ref>. Once a view is defined, EVE tracks schema changes in all participating ISs for this view. <p> These experiments were conducted in the context of our EVE system, i.e., all rewritings of a view were being generated by our synchronization algorithm <ref> [LNR97a, NLR98] </ref>. However, as our system is not fully instrumented with our QC-Model yet, the reported measures are computed using our algebraic findings instead of measuring them directly from an implemented system. <p> Local schema changes at information sources participating in a data warehouse will generally cause a view in the warehouse to become invalid. This problem has been addressed by our previous work on the EVE-project <ref> [LNR97a, NLR97, LNR97b, NLR98, LKNR98] </ref>. In this work, we now focussed on performance issues raised by view synchronization.
Reference: [QW97] <author> D. Quass and J. Widom. </author> <title> On-Line Warehouse View Maintenance. </title> <booktitle> In Proceedings of SIGMOD, </booktitle> <pages> pages 393-400, </pages> <year> 1997. </year>
Reference-contexts: Most of the prior work on views in distributed database systems has focused on the problem of view maintenance (e.g., propagating data changes to the view) <ref> [GM95, QW97, CKL + 96] </ref>. In [RLN97], we establish a taxonomy of view adaptation problems that identifies alternate dimensions of the problem space, and hence serves as a framework for characterizing and hence distinguishing our view synchronization problem from other (previously studied) view adaptation problems.
Reference: [RJB89] <author> V. V. Raghavan, G. S. Jung, and P. Bollmann. </author> <title> A critical investigation of recall and precision as measures of retrieval system performance. </title> <journal> ACM Transactions on Office Information Systems, </journal> <pages> pages 205-229, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: This in some way parallels the concept of precision and recall used in the field of information retrieval <ref> [RJB89] </ref>, although it is set in an entirely different context. Information retrieval generally does not deal with selecting subsets of tuples from a typed relation nor with combining such relation fragments via joins into larger result tuples.
Reference: [RLN97] <author> E. A. Rundensteiner, A. J. Lee, and A. </author> <title> Nica. On Preserving Views in Evolving Environments. </title> <booktitle> In Proceedings of 4th Int. Workshop on Knowledge Representation Meets Databases (KRDB'97): Intelligent Access to Heterogeneous Information, pages 13.1-13.11, </booktitle> <address> Athens, Greece, </address> <month> August </month> <year> 1997. </year>
Reference-contexts: In the EVE (Evolvable View Environment) project [LNR97b], we began to tackle this new problem <ref> [LNR97a, NLR97, RLN97, NLR98] </ref>. We have proposed Evolvable SQL (E-SQL), an extension of SQL that allows a view definer to specify preferences about what information is essential and what information can be replaced or discarded in a materialized view when the base tables providing this information change or become unavailable. <p> Most of the prior work on views in distributed database systems has focused on the problem of view maintenance (e.g., propagating data changes to the view) [GM95, QW97, CKL + 96]. In <ref> [RLN97] </ref>, we establish a taxonomy of view adaptation problems that identifies alternate dimensions of the problem space, and hence serves as a framework for characterizing and hence distinguishing our view synchronization problem from other (previously studied) view adaptation problems. <p> a relation R, we would replace R entirely if an appropriate relation can be found that already participates in the view definition (this is valid for all workload models). 8 Conclusion View synchronization refers to the new and important problem of how to maintain views in dynamic distributed information systems <ref> [RLN97] </ref>. These issues become important as more and more diverse and autonomous database systems are incorporated into large data warehouses. Local schema changes at information sources participating in a data warehouse will generally cause a view in the warehouse to become invalid.
Reference: [SDJL96] <author> D. Srivastava, S. Dar, H.V. Jagadish, and A.Y. Levy. </author> <title> Answering Queries with Aggregation Using Views. </title> <booktitle> In International Conference on Very Large Data Bases, </booktitle> <pages> pages 318-329, </pages> <year> 1996. </year>
Reference-contexts: Rather, the work on precision and recall establishes measures of how well boolean queries perform on textual documents in terms of term similarities and counts. Much research has been done on query reformulation using materialized views. For example, Levy et al. <ref> [LRU96, LMS95, SDJL96] </ref> consider the problem of replacing an original query with a new expression containing materialized view definitions such that the new query is equivalent to the old one.
Reference: [vdBK94] <author> C. A. van den Berg and M.L. Kersten. </author> <title> An Analysis of a Dynamic Query Optimization Schema for Different Data Distributions. </title> <editor> In J. C. Freytag, D. Maier, and G. Vossen, editors, </editor> <title> Query Processing for Advanced Database Systems, </title> <booktitle> chapter 15, </booktitle> <pages> pages 449-473. </pages> <publisher> Morgan Kaufmann Pub., </publisher> <year> 1994. </year> <month> 35 </month>
Reference-contexts: This work builds partly upon the EVE project and is complementary to our previous work on finding and generating view rewritings [LNR97b]. It goes beyond the work in traditional query optimization <ref> [JK84, vdBK94, AAS97] </ref> since it is not concerned with finding the best way to execute a well-defined query, but with finding the best (not necessarily equivalent) query for a particular problem. <p> This current paper now addresses this need by establishing a model for systematically ranking otherwise incomparable solutions for view synchronization. The problem of query optimization has been addressed for instance by Jarke et al. [JK84], van den Berg et al. <ref> [vdBK94] </ref>, or Agrawal et al. [AAS97]. These works are concerned with optimizing a given query in order to execute it in an efficient way. View synchronization in the EVE environment encounters a different problem, namely we have to select a good (but not necessarily equivalent) query among several possible ones.
Reference: [Wid95] <author> J. Widom. </author> <title> Research Problems in Data Warehousing. </title> <booktitle> In Proceedings of International Conference on Information and Knowledge Management, </booktitle> <pages> pages 25-30, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Advanced applications such as web-based information services, data warehousing, digital libraries, and data mining typically gather data from a large number of interconnected Information Sources (ISs) in an environment such as the World Wide Web <ref> [Wid95] </ref>. There is generally a large variety and number of autonomous ISs to be expected, having diverse data models, supporting different query interfaces and query processing capabilities, and even freely updating both their contents and their capabilities.
Reference: [ZGMHW95] <author> Y. Zhuge, H. Garcia-Molina, J. Hammer, and J. Widom. </author> <title> View Maintenance in a Warehousing Environment. </title> <booktitle> In Proceedings of SIGMOD, </booktitle> <pages> pages 316-327, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: in the context of our view synchronization problem of EVE, it is also likely to be useful for a number of different scenarios in the area of query reformulation such as query rewriting using views [LMS95], where several different ways of rewriting a query are conceivable, or data warehouse maintenance <ref> [AAS97, ZGMHW95] </ref>, for which our cost measurement approach and optimization insights gained by our performance studies can be valuable. This work builds partly upon the EVE project and is complementary to our previous work on finding and generating view rewritings [LNR97b]. <p> It builds upon previous cost models of incremental view maintenance <ref> [BLT86, ZGMHW95, ZWGM97] </ref> but extends the QC-Model to now also incorporate a measure of divergence from the intended view specification. <p> Second, we explore how to overall find good replacements for materialized view queries that become invalid due to schema changes of underlying base tables. 3 Third, we elaborate this by introducing a new measure of quality for such a replacement, and adopt existing cost models <ref> [ZGMHW95] </ref> for our purposes in order to establish an integrated efficiency model for view synchronization evaluation. The fourth contribution is an experimental evaluation of our findings that demonstrates the utility of our QC-Model . <p> One component of the desirability of a new view is of course the cost of view maintenance after IS data updates. For this, we hence are able to adopt and adapt a measure similar to traditional view maintenance costs <ref> [ZGMHW95] </ref>, measuring different parameters in an incremental update environment. <p> Based on the concept of updates interfering with each other due to long transmission times between base relations and the data warehouse, these works attack increasingly complex scenarios of handling concurrent updates by collecting update information in queues and handling them in batches. Zhuge et al. <ref> [ZGMHW95, ZWGM97] </ref> introduce the ECA algorithm for incremental view maintenance and report on findings on the cost of their algorithm, but in a different environment from ours (a single information source is assumed). They also give a taxonomy for different levels of correctness for view maintenance algorithms. <p> Agrawal et al. [AAS97] propose the SWEEP-algorithm, which can ensure consistency of the data warehouse in a larger number of cases compared to the Strobe family of algorithms. Finally, <ref> [ZGMHW95] </ref> contains a performance study similar to ours. However, their work is limited to a comparison between traditional view recomputation and incremental view maintenance algorithms, and does not compare quality and cost between different rewritings for a query, while the latter is the topic of our work. <p> A legal rewriting is considered to be preferred if its expected view maintenance costs are low compared to other legal rewritings. We further assume that a conventional incremental view maintenance algorithm similar to the one specified in <ref> [ZGMHW95] </ref> is used to bring the view extent up-to-date right after the IS data is updated. We assume the IS data updates are sufficiently spaced from each other, so concurrent data updates are not considered in this paper. <p> K = the number of bytes per physical block. Similar to previous work <ref> [ZGMHW95] </ref>, we now introduce three major cost factors (for a single data content update) for a particular legal rewriting: the number of messages exchanged, the number of bytes transferred, and the I/O cost at the local ISs.
Reference: [ZGMW96] <author> Y. Zhuge, H. Garcia-Molina, and J. L. Wiener. </author> <title> The Strobe Algorithms for Multi-Source Warehouse Consistency. </title> <booktitle> In International Conference on Parallel and Distributed Information Systems, </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: Once the underlying ISs change their capabilities, the views derived from them may become undefined. This new problem is in contrast to work on incremental view maintenance which addresses changes at the data but not at the schema level <ref> [ZGMW96, ZWGM97] </ref> and to recent work on view redefinition [GMR95, MD96]. In the EVE (Evolvable View Environment) project [LNR97b], we began to tackle this new problem [LNR97a, NLR97, RLN97, NLR98]. <p> They also give a taxonomy for different levels of correctness for view maintenance algorithms. A second paper by the same authors ("Strobe", <ref> [ZGMW96] </ref>) extends their findings towards multi-source information spaces, but does not incorporate any performance model or cost studies. Agrawal et al. [AAS97] propose the SWEEP-algorithm, which can ensure consistency of the data warehouse in a larger number of cases compared to the Strobe family of algorithms.
Reference: [ZWGM97] <author> Y. Zhuge, J. L. Wiener, and H. Garcia-Molina. </author> <title> Multiple View Consistency for Data Warehousing. </title> <booktitle> In Proceedings of IEEE International Conference on Data Engineering, </booktitle> <pages> pages 289-300, </pages> <year> 1997. </year> <month> 36 </month>
Reference-contexts: Once the underlying ISs change their capabilities, the views derived from them may become undefined. This new problem is in contrast to work on incremental view maintenance which addresses changes at the data but not at the schema level <ref> [ZGMW96, ZWGM97] </ref> and to recent work on view redefinition [GMR95, MD96]. In the EVE (Evolvable View Environment) project [LNR97b], we began to tackle this new problem [LNR97a, NLR97, RLN97, NLR98]. <p> It builds upon previous cost models of incremental view maintenance <ref> [BLT86, ZGMHW95, ZWGM97] </ref> but extends the QC-Model to now also incorporate a measure of divergence from the intended view specification. <p> Based on the concept of updates interfering with each other due to long transmission times between base relations and the data warehouse, these works attack increasingly complex scenarios of handling concurrent updates by collecting update information in queues and handling them in batches. Zhuge et al. <ref> [ZGMHW95, ZWGM97] </ref> introduce the ECA algorithm for incremental view maintenance and report on findings on the cost of their algorithm, but in a different environment from ours (a single information source is assumed). They also give a taxonomy for different levels of correctness for view maintenance algorithms.
References-found: 27

