URL: ftp://ftp.cs.columbia.edu/reports/reports-1995/cucs-008-95.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1995.html
Root-URL: http://www.cs.columbia.edu
Email: email: J.Arnold@ma30.bull.com  
Phone: phone: 508-294-2356 fax: 508-294-4848  
Title: Integrating, Customizing, and Extending Environments with a Message-Based Architecture  
Author: John E. Arnold Steven S. Popovich John E. Arnold and Steven S. Popovich 
Keyword: Software Integration, Message-based Architecture, Process Modeling, Federated Systems, Process-Centered Environments  
Note: Copyright 1995  
Address: 300 Concord Road MA30-821A Billerica, MA 01821  New York, NY 10027  
Affiliation: US Applied Research Laboratory Bull HN Information Systems Inc.  Department of Computer Science Columbia University  
Abstract: Message-based architectures have typically been used for integrating an engineer's set of tools as in FIELD and SoftBench. This paper presents our experience using a message-based architecture to integrate complex, multi-user environments. Where this style of control integration has been effective for encapsulating independent tools within an environment, we show that these techniques are also useful for integrating environments themselves. Our experience comes from our integration of two types of process-centered software development environments: a groupware application that implements a Fagan-style code inspection process and a software development process environment where code inspection is a single step in the overall process. We use a message-based mechanism to federate the two process engines such that the two process formalisms complement rather than compete with each other. Moreover, we see that the two process engines can provide some synergy when used in a single, integrated software process environment, Specifically, the integrated environment uses the process modeling and enactment services of one process engine to customize and extend the code inspection process implemented in a different process engine. The customization and extension of the original collaborative application was accomplished without modifying the application. This was possible because the integration mechanism was designed for multi-user, distributed evironments and encouraged the use of an environment's services by other environments. The results of our study indicate that the message-based architecture originally conceived for tool-oriented control integration is equally well-suited for environment integration. 1 The work reported in this paper was done while Popovich was at Bull HN Information Systems Inc. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Israel Z. Ben-Shaul, Gail E. Kaiser and George T. Heineman. </author> <title> An Architecture for Multi-User Software Development Environments. </title> <booktitle> Computing Systems, The Journal of the USENIX Association 6(2) </booktitle> <pages> 65-103, </pages> <month> Spring, </month> <year> 1993. </year>
Reference-contexts: Multiple process clients connect to the server, with each performing a particular role in the process. The server maintains the process objectbase, which is not directly accessed by the clients. The MARVEL <ref> [1] </ref> system exemplifies this model. One straightforward extension of a PCE into a distributed environment is the shared objectbase model. In this model, there may be multiple process engines, each of which may have multiple clients attached to it. The engines share a single objectbase, however.
Reference: [2] <author> Israel Z. Ben-Shaul and Gail E. </author> <note> Kaiser. </note>
Reference-contexts: We can further refine the message-based architecture of Peuschel and Wolf into two architectures, by considering whether the communication between process engines is bus-based or point-to-point. We call these two architectures the bus and point-to-point architectures. The Oz <ref> [2] </ref> PCE is based on the point-to-point model, with homogeneous process engines (which, however, enact heterogeneous processes).
References-found: 2

