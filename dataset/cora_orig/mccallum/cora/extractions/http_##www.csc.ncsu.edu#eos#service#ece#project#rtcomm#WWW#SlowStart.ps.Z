URL: http://www.csc.ncsu.edu/eos/service/ece/project/rtcomm/WWW/SlowStart.ps.Z
Refering-URL: http://www.csc.ncsu.edu/eos/service/ece/project/rtcomm/WWW/other.html
Root-URL: http://www.csc.ncsu.edu
Email: reevesg@eos.ncsu.edu  
Title: A Simple Approach to Refine Slow-start of TCP Congestion Control  
Author: Haining Wang Hongjie Xin Douglas S. Reeves 
Keyword: Congestion control, TCP, Slow-start, performance evaluation  
Address: Raleigh, NC 27695 E-mail:fhwang3, hxin,  
Affiliation: Department of Computer Science North Carolina State University  
Abstract: This paper presents a new variant of Slow-start, called Smooth-start, which improves the performance of TCP congestion control at the start of a TCP connection or after a retransmission timeout. It is known that Slow-start causes multiple packet loss, and reduces effective throughput when the available bandwidth of a connection is overestimated. Smooth-start solves this problem by approaching flow equilibrium in a more conservative way. Simulation results show that Smooth-start can significantly reduce packet loss, and improve effective throughput during an overestimation period which usually happens at the beginning of a TCP connection. Furthermore, the implementation of Smooth-start is very simple. All TCP modifications are at the sending side only. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Ahn, P. Danzig, Z. Liu, and L. Yan, </author> <title> "Evaluation of TCP Vegas: Emulation and Experiment", </title> <booktitle> Proceedings of ACM SIGCOMM'95, </booktitle> <address> Cambridge, MA, </address> <pages> pp. 185-195, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: Instead of constant linear growth of the window size during the congestion avoidance phase, TCP Vegas adopts three different strategies depending on the round trip delay: increment, decrement and unchanged. Using live emulation, Ahn et al. <ref> [1] </ref> evaluate the performance of TCP Vegas and confirm the claims about TCP Vegas made in [4]. A modified Slow-start algorithm is also introduced in TCP Vegas, which limits the exponential growth of Slow-start to every other round-trip time, not every round-trip time. <p> To some extent, Slow-start can be viewed as a special case of Smooth-start. In this paper, the probe number k is limited to [2; 3] and the separator number t is limited to the range of <ref> [1; 3] </ref>. 4.4 Overhead of the Smooth-start The overhead of the Smooth-start depends on the probe strategy being taken, which is determined by the probe number k and the separator number t.
Reference: [2] <author> H. Balakrishnan, V. Padmanabhan, S. Seshan, M. Stemm, R. Katz, </author> <title> "TCP Behavior of a Busy Internet Server: Analysis and Improvements", </title> <booktitle> Proceedings of IEEE INFOCOM'98. </booktitle>
Reference-contexts: Fall and Floyd [5] show the benefits of selective acknowledgments by simulation. Through trace analyses, it is found that over 85% of Retransmission Timeouts are due to tiny congestion windows that prevent Fast Retransmit and Fast Recovery from being triggered <ref> [2, 16] </ref>. Based on the packet conservation rule [11], an enhancement of Fast Recovery is made to resolve the tiny congestion window problem. Also an integrated approach to congestion control and loss recovery is proposed in [2] to address the problem of multiple concurrent connections from a single host. <p> Based on the packet conservation rule [11], an enhancement of Fast Recovery is made to resolve the tiny congestion window problem. Also an integrated approach to congestion control and loss recovery is proposed in <ref> [2] </ref> to address the problem of multiple concurrent connections from a single host. <p> However, if k is set to 1 and t is set to 0, then Smooth-start is converted to Slow-start. To some extent, Slow-start can be viewed as a special case of Smooth-start. In this paper, the probe number k is limited to <ref> [2; 3] </ref> and the separator number t is limited to the range of [1; 3]. 4.4 Overhead of the Smooth-start The overhead of the Smooth-start depends on the probe strategy being taken, which is determined by the probe number k and the separator number t.
Reference: [3] <author> B. Braden et al, </author> <title> "Recommendations on Queue Management and Congestion Avoidance in the Internet", INTERNET DRAFT, </title> <address> draft-irtf-e2e-queue-mgt-00.txt, </address> <month> March </month> <year> 1997. </year>
Reference-contexts: However, if k is set to 1 and t is set to 0, then Smooth-start is converted to Slow-start. To some extent, Slow-start can be viewed as a special case of Smooth-start. In this paper, the probe number k is limited to <ref> [2; 3] </ref> and the separator number t is limited to the range of [1; 3]. 4.4 Overhead of the Smooth-start The overhead of the Smooth-start depends on the probe strategy being taken, which is determined by the probe number k and the separator number t. <p> To some extent, Slow-start can be viewed as a special case of Smooth-start. In this paper, the probe number k is limited to [2; 3] and the separator number t is limited to the range of <ref> [1; 3] </ref>. 4.4 Overhead of the Smooth-start The overhead of the Smooth-start depends on the probe strategy being taken, which is determined by the probe number k and the separator number t. <p> The router without any free buffer has no choice but to drop the incoming data packets. This pathological simulation result verifies our analyses made above. It also confirms the counter-intuitive conclusion made in <ref> [3] </ref> that maintaining normally-small queues can result in higher throughput as well as lower end-to-end delay. The fundamental reason for this is that under bursty traffic in LAN and WAN [15, 22], the normally-small queues in routers should have enough free buffer space to absorb the bursty traffic. <p> Many new mechanisms deployed in routers for queue management have been proposed to resolve the unfairness and other problems in the packet-switched network <ref> [3, 7, 17] </ref>. The Smooth-start algorithm is employed at the sender side. It is less aggressive than Slow-start, getting to the equilibrium of a TCP connection in a more conservative way. The goal of Smooth-start is to achieve less packet losses and improve effective throughput of a TCP connection.
Reference: [4] <author> L. Brakmo, S. O'Malley, and L. Peterson, </author> <title> "TCP Vegas: New Technique for Congestion Detection and Avoidance", </title> <booktitle> Proceedings of ACM SIGCOMM'94, </booktitle> <address> London, UK, </address> <pages> pp. 24-35, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: The timeout will cause substantial TCP performance degradation. To resolve these issues, several new methods have been proposed <ref> [4, 10, 18, 19] </ref>. An appropriate initial value of ssthresh, which dictates when a TCP sender shifts from Slow-start phase into Congestion Avoidance phase, is critical to the performance of a TCP connection. An ideal ssthresh should be very close to the full network capacity. <p> The method of estimation is similar to the packet-pair technique proposed by Keshav [14]. The second change is to resolve the performance degradation caused by multiple occurrences of packet loss by modifying the Fast Recovery algorithm. In TCP Vegas <ref> [4] </ref>, a modified congestion avoidance algorithm is proposed to allow more efficient network bandwidth utilization and higher network throughput. Instead of constant linear growth of the window size during the congestion avoidance phase, TCP Vegas adopts three different strategies depending on the round trip delay: increment, decrement and unchanged. <p> Using live emulation, Ahn et al. [1] evaluate the performance of TCP Vegas and confirm the claims about TCP Vegas made in <ref> [4] </ref>. A modified Slow-start algorithm is also introduced in TCP Vegas, which limits the exponential growth of Slow-start to every other round-trip time, not every round-trip time.
Reference: [5] <author> K. Fall and S. Floyd, </author> <title> "Simulation-based Comparisons of Tahoe, Reno, and SACK TCP", </title> <journal> ACM Computer Communication Review, </journal> <volume> Vol. 26, No. 3, </volume> <pages> pp. 5-21, </pages> <month> July </month> <year> 1996. </year>
Reference-contexts: Using selective 3 acknowledgments, when non-contiguous data is received by a receiver, duplicate ACKs bearing SACK options inform the sender about the packets that have been correctly received. Multiple packet losses per window are recovered in a round-trip time. Fall and Floyd <ref> [5] </ref> show the benefits of selective acknowledgments by simulation. Through trace analyses, it is found that over 85% of Retransmission Timeouts are due to tiny congestion windows that prevent Fast Retransmit and Fast Recovery from being triggered [2, 16]. <p> We modified three different versions of TCP (Tahoe, Reno and SACK) to have the Smooth-start algorithm. The simulation network topology is shown in Figure 6. This topology is the same as that used by Fall and Floyd <ref> [5] </ref>. In Figure 6, R1 represents a finite-buffer drop-tail router, S1 and S2 represent sending hosts, and K1 represents a receiving host. The links are labeled with their corresponding bandwidth and delays. A drop-tail router with a FIFO service is used. <p> This is because Fine-8 is too conservative when the TCP window size is smaller than the actual bandwidth-delay product. To clearly illustrate the dynamics of the TCP connection, in the following figures, the simulation results are presented using the standard technique of TCP sequence number plots <ref> [5] </ref>. The graphs from the simulations were generated by tracing packets entering and departing router R1. For each figure, the x-axis represents the packet arrival or departure time in seconds. The y-axis represents the packet number mod 90. Packets are numbered starting with packet 0.
Reference: [6] <author> S. Floyd, and V. Jacobson, </author> <title> "On Traffic Phase Effects in Packet-Switched Gateways", </title> <journal> Inter-networking: Research and Experience, </journal> <volume> Vol. 3, No. 3, </volume> <pages> pp. 115-156, </pages> <month> September </month> <year> 1992. </year> <month> 20 </month>
Reference-contexts: The Drop Tail gateway used in our simulation discards arriving packets when the buffer of the gateway is full. It is well known that a Drop Tail gateway often arbitrarily distributes packet loss among TCP connections and also tends to penalize bursty connections <ref> [6] </ref>. With the drop-tail discarding algorithm and the FIFO service discipline, the effect of global synchronization has also been found in one-way TCP traffic and two-way TCP traffic [26, 29].
Reference: [7] <author> S. Floyd and V. Jacobson, </author> <title> "Random Early Detection gateways for Congestion Avoidance", </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> Vol. 1, No. 4, </volume> <pages> pp. 397-413, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: It makes routers avoid the exhaustion of their buffer space, and ssthresh is set to cwnd/2. Therefore, more severe congestion can be prevented. This strategy is widely used in various congestion control schemes where routers are likely to have a mechanism to detect incipient congestion <ref> [7, 8, 24, 25] </ref>. In these schemes, routers or switches detect incipient congestion by computing the average queue length, and execute congestion control 5 when the queue length exceeds a certain threshold. Now let us look at the exception of Fine-4 in which the TCP window size is 56. <p> The simulation results also show that ssthresh/8 is a bad choice for the separator. Although the fine-grained probe strategy has the problem with a Drop-tail router as mentioned above, if active queue management mechanism like Random Early Detection <ref> [7] </ref> and the Explicit Congestion Notification mechanism [8, 25] are deployed at routers, Fine-2 could be a very good probe strategy. 5.5 Integrating with ssthresh Estimator As Smooth-start does not require an ssthresh estimator [10], the integration of Smooth-start and ssthresh estimator yields a better performance. <p> Many new mechanisms deployed in routers for queue management have been proposed to resolve the unfairness and other problems in the packet-switched network <ref> [3, 7, 17] </ref>. The Smooth-start algorithm is employed at the sender side. It is less aggressive than Slow-start, getting to the equilibrium of a TCP connection in a more conservative way. The goal of Smooth-start is to achieve less packet losses and improve effective throughput of a TCP connection.
Reference: [8] <author> S. Floyd, </author> <title> "TCP and Explicit Congestion Notification", </title> <journal> ACM Computer Communication Review, </journal> <volume> Vol. 24 No. 5, </volume> <pages> pp 10-23, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: It makes routers avoid the exhaustion of their buffer space, and ssthresh is set to cwnd/2. Therefore, more severe congestion can be prevented. This strategy is widely used in various congestion control schemes where routers are likely to have a mechanism to detect incipient congestion <ref> [7, 8, 24, 25] </ref>. In these schemes, routers or switches detect incipient congestion by computing the average queue length, and execute congestion control 5 when the queue length exceeds a certain threshold. Now let us look at the exception of Fine-4 in which the TCP window size is 56. <p> The simulation results also show that ssthresh/8 is a bad choice for the separator. Although the fine-grained probe strategy has the problem with a Drop-tail router as mentioned above, if active queue management mechanism like Random Early Detection [7] and the Explicit Congestion Notification mechanism <ref> [8, 25] </ref> are deployed at routers, Fine-2 could be a very good probe strategy. 5.5 Integrating with ssthresh Estimator As Smooth-start does not require an ssthresh estimator [10], the integration of Smooth-start and ssthresh estimator yields a better performance.
Reference: [9] <author> S. Floyd, M. Allman, and C. Partridge, </author> <title> "Increasing TCP's Initial Window", INTERNET DRAFT, </title> <address> draft-floyd-incr-init-win-00.txt, </address> <month> July </month> <year> 1997. </year>
Reference-contexts: The simulation results confirm that. The TCP window size of the simulations is set to 64. Table 6 shows the percentage of the utilized bandwidth of a TCP connection. The initial TCP window size of a connection is suggested to increase from 1 segment to roughly 4K bytes <ref> [9] </ref>.
Reference: [10] <author> J. Hoe, </author> <title> "Improving the Start-up Behavior of a Congestion Control Scheme for TCP", </title> <booktitle> Proceeding of ACM SIGCOMM'96, </booktitle> <address> Stanford, CA, </address> <pages> pp. 270-280, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: The timeout will cause substantial TCP performance degradation. To resolve these issues, several new methods have been proposed <ref> [4, 10, 18, 19] </ref>. An appropriate initial value of ssthresh, which dictates when a TCP sender shifts from Slow-start phase into Congestion Avoidance phase, is critical to the performance of a TCP connection. An ideal ssthresh should be very close to the full network capacity. <p> If the sender accurately estimates the value of ssthresh and adjusts it to the dynamics of network capacity, the TCP performance should be greatly improved. Recognizing the problems during the start-up period, Hoe <ref> [10] </ref> proposes to use an estimated value of ssthresh, instead of the default value. <p> Therefore, it is very hard to set up and maintain an appropriate ssthresh. The improvement of ssthresh estimator <ref> [10] </ref> is limited. In this paper, we propose a modification of Slow-start, called Smooth-start, which complements Hoe's proposal. At the beginning of a connection or after a retransmission timeout, the original Slow-start algorithm is applied. <p> The current Implementations of TCP congestion control were later augmented with Fast Retransmit and Fast Recovery algorithms [13, 27]. To improve the start-up behavior of a TCP connection, Hoe <ref> [10] </ref> proposes two possible changes to the congestion control scheme in current TCP implementations. One change is to use an estimated value instead of the default value for ssthresh. The method of estimation is similar to the packet-pair technique proposed by Keshav [14]. <p> with a Drop-tail router as mentioned above, if active queue management mechanism like Random Early Detection [7] and the Explicit Congestion Notification mechanism [8, 25] are deployed at routers, Fine-2 could be a very good probe strategy. 5.5 Integrating with ssthresh Estimator As Smooth-start does not require an ssthresh estimator <ref> [10] </ref>, the integration of Smooth-start and ssthresh estimator yields a better performance. The key point here is that the estimated ssthresh is no worse than and is frequently better than the arbitrary default. The simulation results are shown in Figures 13 and 14.
Reference: [11] <author> V. Jacobson, </author> <title> "Congestion Avoidance and Control", </title> <booktitle> Proceedings of ACM SIGCOMM'88, </booktitle> <address> Stan-ford, CA, </address> <pages> pp. 314-329, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Section 5 shows the simulation results with respect to different probe strategies and different TCP window sizes. It also analyzes simulation results and derives appropriate probe strategies for different TCP versions. Section 6 presents the future work. Finally, Section 7 concludes the paper. 2 Related Work Van Jacobson <ref> [11] </ref> provided ground-breaking research in the field of TCP congestion control, in which the Slow-start and Congestion Avoidance algorithms were proposed. The current Implementations of TCP congestion control were later augmented with Fast Retransmit and Fast Recovery algorithms [13, 27]. <p> Fall and Floyd [5] show the benefits of selective acknowledgments by simulation. Through trace analyses, it is found that over 85% of Retransmission Timeouts are due to tiny congestion windows that prevent Fast Retransmit and Fast Recovery from being triggered [2, 16]. Based on the packet conservation rule <ref> [11] </ref>, an enhancement of Fast Recovery is made to resolve the tiny congestion window problem. Also an integrated approach to congestion control and loss recovery is proposed in [2] to address the problem of multiple concurrent connections from a single host. <p> However, in the TCP congestion control schemes initiated by Van Jacobson <ref> [11] </ref>, the TCP window size wnd is set to the minimum of the congestion window and the receiver advertised window. The congestion window cwnd is adjusted dynamically in response to network congestion. wnd = min (cwnd; rwnd) The TCP congestion control algorithm runs in two phases: Slow-start and Congestion Avoidance.
Reference: [12] <author> V. Jacobson and R. Braden, </author> <title> "TCP Extensions for Long-Delay Paths", Request for Comments 1072, </title> <month> October </month> <year> 1988. </year>
Reference-contexts: A recent study [21] shows that packet loss rate on the Internet has doubled within a year and burst loss of packets is common. To solve the problem of multiple occurrences of packet loss from the same window, Selective Acknowledgment (SACK) <ref> [12, 19] </ref> has been proposed. Using selective 3 acknowledgments, when non-contiguous data is received by a receiver, duplicate ACKs bearing SACK options inform the sender about the packets that have been correctly received. Multiple packet losses per window are recovered in a round-trip time.
Reference: [13] <author> V. Jacobson, </author> <title> "Berkeley TCP evolution from 4.3-tahoe to 4.3-reno", </title> <booktitle> Proceedings of the Eighteenth Internet Engineering Task Force, </booktitle> <pages> pp. 365, </pages> <year> 1990. </year>
Reference-contexts: Isolated packet loss can be efficiently handled by Fast Recovery <ref> [13, 27] </ref>, avoiding retransmission timeout. * Smooth-start produces less bursty traffic than Slow-start, which reduces the fluctuation of the offered load on the networks. The drawback of Smooth-start is that it takes longer for the transmission rate to reach the optimal equilibrium operating point. <p> Finally, Section 7 concludes the paper. 2 Related Work Van Jacobson [11] provided ground-breaking research in the field of TCP congestion control, in which the Slow-start and Congestion Avoidance algorithms were proposed. The current Implementations of TCP congestion control were later augmented with Fast Retransmit and Fast Recovery algorithms <ref> [13, 27] </ref>. To improve the start-up behavior of a TCP connection, Hoe [10] proposes two possible changes to the congestion control scheme in current TCP implementations. One change is to use an estimated value instead of the default value for ssthresh.
Reference: [14] <author> S. Keshav, </author> <title> "A Control-Theoretic Approach to Flow Control", </title> <booktitle> Proceedings of ACM SIG-COMM'91, </booktitle> <address> Zurich, Switzerland, </address> <pages> pp. 3-15, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: One change is to use an estimated value instead of the default value for ssthresh. The method of estimation is similar to the packet-pair technique proposed by Keshav <ref> [14] </ref>. The second change is to resolve the performance degradation caused by multiple occurrences of packet loss by modifying the Fast Recovery algorithm. In TCP Vegas [4], a modified congestion avoidance algorithm is proposed to allow more efficient network bandwidth utilization and higher network throughput.
Reference: [15] <author> W. Leland, M. Taqqu, W. Willinger, and D. Wilson, </author> <title> "On the Self-Similar Nature of Ethernet Traffic (Extended Version)", </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> Vol. 2, No. 1, </volume> <pages> pp. 1-15, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: This pathological simulation result verifies our analyses made above. It also confirms the counter-intuitive conclusion made in [3] that maintaining normally-small queues can result in higher throughput as well as lower end-to-end delay. The fundamental reason for this is that under bursty traffic in LAN and WAN <ref> [15, 22] </ref>, the normally-small queues in routers should have enough free buffer space to absorb the bursty traffic. When Fine-4 is employed and the TCP window size is 56, we can find another interesting simulation result from TCP Tahoe.
Reference: [16] <author> D. Lin and H. T. Kung, </author> <title> "TCP Fast Recovery Stategies: Analysis and Improvements", </title> <booktitle> Proceedings of IEEE INFOCOM'98. </booktitle>
Reference-contexts: Fall and Floyd [5] show the benefits of selective acknowledgments by simulation. Through trace analyses, it is found that over 85% of Retransmission Timeouts are due to tiny congestion windows that prevent Fast Retransmit and Fast Recovery from being triggered <ref> [2, 16] </ref>. Based on the packet conservation rule [11], an enhancement of Fast Recovery is made to resolve the tiny congestion window problem. Also an integrated approach to congestion control and loss recovery is proposed in [2] to address the problem of multiple concurrent connections from a single host. <p> Also an integrated approach to congestion control and loss recovery is proposed in [2] to address the problem of multiple concurrent connections from a single host. Lin and Kung <ref> [16] </ref> also presented a loss-sensitive window reduction mechanism. 3 Slow-Start In the original TCP specification [23], the window used by the sender, denoted as wnd, is equal to the receiver advertised window rwnd regardless of the load in the network.
Reference: [17] <author> D. Lin and R. Morris, </author> <title> "Dynamics of Random Early Detection" Proceedings of ACM SIG-COMM'97, </title> <booktitle> Cannes, France, </booktitle> <pages> pp. 127-137, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: Many new mechanisms deployed in routers for queue management have been proposed to resolve the unfairness and other problems in the packet-switched network <ref> [3, 7, 17] </ref>. The Smooth-start algorithm is employed at the sender side. It is less aggressive than Slow-start, getting to the equilibrium of a TCP connection in a more conservative way. The goal of Smooth-start is to achieve less packet losses and improve effective throughput of a TCP connection.
Reference: [18] <author> M. Mathis and J. Mahdavi, "Forward Acknowledgment (FACK): </author> <title> Refining TCP Congestion Control", </title> <booktitle> Proceedings of ACM SIGCOMM'96, </booktitle> <address> Stanford, CA, </address> <pages> pp. 281-291, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: The timeout will cause substantial TCP performance degradation. To resolve these issues, several new methods have been proposed <ref> [4, 10, 18, 19] </ref>. An appropriate initial value of ssthresh, which dictates when a TCP sender shifts from Slow-start phase into Congestion Avoidance phase, is critical to the performance of a TCP connection. An ideal ssthresh should be very close to the full network capacity.
Reference: [19] <author> M. Mathis, J. Mahdavi, S. Floyd, and A. Romanow, </author> <title> "TCP Selective Acknowledgment Option", Internet Draft, </title> <booktitle> work in progress, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: The timeout will cause substantial TCP performance degradation. To resolve these issues, several new methods have been proposed <ref> [4, 10, 18, 19] </ref>. An appropriate initial value of ssthresh, which dictates when a TCP sender shifts from Slow-start phase into Congestion Avoidance phase, is critical to the performance of a TCP connection. An ideal ssthresh should be very close to the full network capacity. <p> A recent study [21] shows that packet loss rate on the Internet has doubled within a year and burst loss of packets is common. To solve the problem of multiple occurrences of packet loss from the same window, Selective Acknowledgment (SACK) <ref> [12, 19] </ref> has been proposed. Using selective 3 acknowledgments, when non-contiguous data is received by a receiver, duplicate ACKs bearing SACK options inform the sender about the packets that have been correctly received. Multiple packet losses per window are recovered in a round-trip time.
Reference: [20] <author> S. McCanne and S. Floyd, </author> <title> ns-LBNL Network Simulator. Obtain via: </title> <address> http://www-nrg.ee.lbl.gov/ns/. </address>
Reference-contexts: The number of lag points corresponds to the number of extra RTTs introduced by Smooth-start for cwnd to reach the ssthresh. 8 5 Simulations for Smooth-start 5.1 Simulation Setup We tested the Smooth-start algorithm by implementing it in the LBNL network simulator ns <ref> [20] </ref>. We modified three different versions of TCP (Tahoe, Reno and SACK) to have the Smooth-start algorithm. The simulation network topology is shown in Figure 6. This topology is the same as that used by Fall and Floyd [5].
Reference: [21] <author> V. Paxson, </author> <title> "End-to-End Internet Packet Dynamics", </title> <booktitle> Proceedings of ACM SIGCOMM'97, Cannes, France, </booktitle> <pages> pp. 139-152, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: However, the problem is that multiple packet losses from the same window may happen during the exponential growth phase in the modified Slow-start algorithm. A recent study <ref> [21] </ref> shows that packet loss rate on the Internet has doubled within a year and burst loss of packets is common. To solve the problem of multiple occurrences of packet loss from the same window, Selective Acknowledgment (SACK) [12, 19] has been proposed.
Reference: [22] <author> V. Paxson and S. Floyd, </author> <title> "Wide-Area Traffic: The Failure of Poisson Modeling", </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> Vol. 3, No. 3, </volume> <pages> pp. 226-244, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: This pathological simulation result verifies our analyses made above. It also confirms the counter-intuitive conclusion made in [3] that maintaining normally-small queues can result in higher throughput as well as lower end-to-end delay. The fundamental reason for this is that under bursty traffic in LAN and WAN <ref> [15, 22] </ref>, the normally-small queues in routers should have enough free buffer space to absorb the bursty traffic. When Fine-4 is employed and the TCP window size is 56, we can find another interesting simulation result from TCP Tahoe.
Reference: [23] <author> J. Postel, </author> <title> Transmission control protocol, Request for Comments 793, </title> <institution> DDN Network Information Center, SRI International, </institution> <month> September </month> <year> 1981. </year>
Reference-contexts: Also an integrated approach to congestion control and loss recovery is proposed in [2] to address the problem of multiple concurrent connections from a single host. Lin and Kung [16] also presented a loss-sensitive window reduction mechanism. 3 Slow-Start In the original TCP specification <ref> [23] </ref>, the window used by the sender, denoted as wnd, is equal to the receiver advertised window rwnd regardless of the load in the network.
Reference: [24] <author> K. K. Ramakrishnan and R. Jain, </author> <title> "A Binary Feedback Scheme for Congestion Avoidance in Computer Networks" ACM Transactions on Computer Systems, </title> <journal> Vol. </journal> <volume> 8, No. 2, </volume> <pages> pp. 158-181, </pages> <year> 1990. </year>
Reference-contexts: It makes routers avoid the exhaustion of their buffer space, and ssthresh is set to cwnd/2. Therefore, more severe congestion can be prevented. This strategy is widely used in various congestion control schemes where routers are likely to have a mechanism to detect incipient congestion <ref> [7, 8, 24, 25] </ref>. In these schemes, routers or switches detect incipient congestion by computing the average queue length, and execute congestion control 5 when the queue length exceeds a certain threshold. Now let us look at the exception of Fine-4 in which the TCP window size is 56.
Reference: [25] <author> K. K. Ramakrishnan and S. Floyd, </author> <title> "A Proposal to add Explicit Congestion Notification (ECN) to IPv6 and to TCP" INTERNET DRAFT, </title> <booktitle> draft-kksjf-ecn-00.txt, work in progress. </booktitle> <month> November </month> <year> 1997. </year>
Reference-contexts: It makes routers avoid the exhaustion of their buffer space, and ssthresh is set to cwnd/2. Therefore, more severe congestion can be prevented. This strategy is widely used in various congestion control schemes where routers are likely to have a mechanism to detect incipient congestion <ref> [7, 8, 24, 25] </ref>. In these schemes, routers or switches detect incipient congestion by computing the average queue length, and execute congestion control 5 when the queue length exceeds a certain threshold. Now let us look at the exception of Fine-4 in which the TCP window size is 56. <p> The simulation results also show that ssthresh/8 is a bad choice for the separator. Although the fine-grained probe strategy has the problem with a Drop-tail router as mentioned above, if active queue management mechanism like Random Early Detection [7] and the Explicit Congestion Notification mechanism <ref> [8, 25] </ref> are deployed at routers, Fine-2 could be a very good probe strategy. 5.5 Integrating with ssthresh Estimator As Smooth-start does not require an ssthresh estimator [10], the integration of Smooth-start and ssthresh estimator yields a better performance.
Reference: [26] <author> S. Shenker, L. Zhang, and D. D. Clark, </author> <title> "Some Observations on the Dynamics of a Congestion Control Algorithm", </title> <journal> ACM Computer Communication Review, </journal> <volume> Vol. 20, No. 4, </volume> <pages> pp. 30-39, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: With the drop-tail discarding algorithm and the FIFO service discipline, the effect of global synchronization has also been found in one-way TCP traffic and two-way TCP traffic <ref> [26, 29] </ref>. Many new mechanisms deployed in routers for queue management have been proposed to resolve the unfairness and other problems in the packet-switched network [3, 7, 17]. The Smooth-start algorithm is employed at the sender side.
Reference: [27] <author> W. R. </author> <title> Stevens, </title> <journal> TCP/IP Illustrated, </journal> <volume> volume 1. </volume> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1994. </year>
Reference-contexts: Isolated packet loss can be efficiently handled by Fast Recovery <ref> [13, 27] </ref>, avoiding retransmission timeout. * Smooth-start produces less bursty traffic than Slow-start, which reduces the fluctuation of the offered load on the networks. The drawback of Smooth-start is that it takes longer for the transmission rate to reach the optimal equilibrium operating point. <p> Finally, Section 7 concludes the paper. 2 Related Work Van Jacobson [11] provided ground-breaking research in the field of TCP congestion control, in which the Slow-start and Congestion Avoidance algorithms were proposed. The current Implementations of TCP congestion control were later augmented with Fast Retransmit and Fast Recovery algorithms <ref> [13, 27] </ref>. To improve the start-up behavior of a TCP connection, Hoe [10] proposes two possible changes to the congestion control scheme in current TCP implementations. One change is to use an estimated value instead of the default value for ssthresh.
Reference: [28] <author> K. Thompson, G. J. Miller, and R. Wilder, </author> <title> "Wide-Area Internet Traffic Patterns and Characteristics", </title> <journal> IEEE Network, </journal> <volume> Vol. 11, No. 6, </volume> <pages> pp. 10-23, </pages> <month> November/December </month> <year> 1997. </year>
Reference-contexts: Many popular Internet application protocols, such as HTTP, ftp, and telnet, are implemented using TCP. Since these protocols generate the majority of traffic on the Internet, the TCP congestion control algorithm can be greatly optimized by adapting to the common behavior of these protocols. The latest Internet traffic measurements <ref> [28] </ref> indicate that many TCP flows are short-lived 1 . The characteristics of the short transfer are that a relatively small number of data packets are delivered and the TCP connection usually is torn down before it reaches steady state.
Reference: [29] <author> L. Zhang, S. Shenker, and D. D. Clark, </author> <title> "Observations on the Dynamics of a Congestion Control Algorithm: The Effects of Two Way Traffic", </title> <booktitle> Proceedings of ACM SIGCOMM'91, </booktitle> <address> Zurich, Switzerland, </address> <pages> pp. 133-148, </pages> <month> September </month> <year> 1991. </year> <month> 22 </month>
Reference-contexts: With the drop-tail discarding algorithm and the FIFO service discipline, the effect of global synchronization has also been found in one-way TCP traffic and two-way TCP traffic <ref> [26, 29] </ref>. Many new mechanisms deployed in routers for queue management have been proposed to resolve the unfairness and other problems in the packet-switched network [3, 7, 17]. The Smooth-start algorithm is employed at the sender side.
References-found: 29

