URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-92-20/s2k-92-20.ps.Z
Refering-URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-92-20/
Root-URL: http://www.cs.berkeley.edu
Title: Tioga Providing Data Management Support for Scientific Visualization Applications  
Author: Michael Stonebraker, Jolly Chen, Nobuko Nathan, Caroline Paxson 
Date: Abstract  
Address: Berkeley, CA 94720  
Affiliation: Computer Science Division, EECS Department University of California  
Abstract: We present a user interface paradigm for database management systems motivated by scientific visualization applications. Our graphical user interface includes a "boxes and arrows" notation for database access and a flight simulator model of movement through information space. We also provide means to specify a hierarchy of abstracts of data of different types and resolutions. In addition, multiple portals on data may be related as master and slaves. The underlying DBMS support for this system includes the compilation of query plans into megaplans, new algorithms for data buffering, and provisions for a guaranteed rate of delivery.
Abstract-found: 1
Intro-found: 1
Reference: [Agra89] <author> Agrawal, R. and Gehani, N., </author> <title> "ODE: The Language and the Data Model," </title> <booktitle> Proc. 1989 ACM-SIGMOD Conference on Management of Data, </booktitle> <address> Portland, OR, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: Little attention has been addressed to the programming needs of the scientific user of a DBMS. Instead, work on programming language integration with DBMSs has focused on the seamless integration of general purpose languages, such as C++, with data base systems <ref> [Rich87, Agra89] </ref>. Although the main motivation for using a DBMS for scientific data is storage management for large data objects, a DBMS provides other useful features as well for the scientific community. A DBMS has the ability to scale up gracefully for these large data sets.
Reference: [Baru84] <author> Baru, C. and Su, S., </author> <title> "Performance Evaluation of the Statistical Aggregation by Categorization in the SM3 System," </title> <booktitle> Proc. 1984 ACM-SIGMOD Conference on Management of Data, </booktitle> <address> Boston, MA, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: Note that our architecture differs from other work that sought to support scientific users of database systems. Previous efforts have tended to concentrate on broad requirements [DeWi82], representing scientific data [Ozso85], and statistical computations on large databases <ref> [Baru84] </ref>. Little attention has been addressed to the programming needs of the scientific user of a DBMS. Instead, work on programming language integration with DBMSs has focused on the seamless integration of general purpose languages, such as C++, with data base systems [Rich87, Agra89].
Reference: [Chen92] <author> Chen, J. "RASQL: </author> <title> A Graphical Query Language for Recipes," </title> <booktitle> work in progress. </booktitle>
Reference-contexts: Such a recipe can be saved in two different ways. The recipe can be stored as a graph-like structure in a cookbook, a collection of recipes in the database. We provide a query tool to support browsing the cookbook. This tool RASQL is described in a companion paper <ref> [Chen92] </ref>. RASQL is integrated with the diagram editor, so a user can retrieve a recipe from the cookbook, modify it with the diagram editor, and then install his new recipe back into the cookbook. Alternately, a recipe can be encapsulated or canned into a new ingredient.
Reference: [DeWi82] <author> Dewitt, D. et. al., </author> <title> "A Framework for Research in Database Management for Statistical Analysis," </title> <booktitle> Proceedings of the 1982 SIGMOD International Conference on Management of Data, </booktitle> <address> Orlando, FL, </address> <month> June </month> <year> 1982. </year>
Reference-contexts: Note that our architecture differs from other work that sought to support scientific users of database systems. Previous efforts have tended to concentrate on broad requirements <ref> [DeWi82] </ref>, representing scientific data [Ozso85], and statistical computations on large databases [Baru84]. Little attention has been addressed to the programming needs of the scientific user of a DBMS.
Reference: [Dozi89] <author> Dozier, J., </author> <title> "Spectral Signature of Alpine Snow Cover from the Landsat Thematic Mapper," Remote Sensing Environment, </title> <month> March </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Scientific visualization applications often deal with data objects of very large sizes. Examples include large regular arrays such as those found in global circulation models [Mech91] as well as in remote sensing applications <ref> [Dozi89] </ref>. Also prevalent are large data structures modeling roads, drainage networks, vegetation patterns, etc. that are represented as collections of arcs, polygons, or points. Popular visualization systems such as AVS, Explorer, or Khoros offer scientific users a visual programming environment and powerful visualization tools to manipulate and display scientific data.
Reference: [Ferr90] <author> Ferrari, D., </author> <title> "Client Requirements for Real-Time Communication Services," </title> <journal> IEEE Communications Magazine, </journal> <month> November </month> <year> 1990. </year>
Reference-contexts: In the diagram, the network boxes indicate either local or remote network connections. Local connections are assumed to be fast enough to meet delivery guarantees. The network manager is assumed to support delivery guarantees for remote connections using approaches such as <ref> [Ferr90] </ref>. Rates of data delivery will be specificed via contractual protocols that each subsystem will follow. Note that performance constraints must propagate throughout all components and agreements must be secured from all components before the contract can be reliably carried out.
Reference: [Gree89] <author> Greene, D., </author> <title> "An Implementation and Performance Analysis of Spatial Data Access Methods," </title> <booktitle> Proc. 1989 Data Engineering Conference, </booktitle> <address> Los Angeles, CA, </address> <month> February </month> <year> 1989. </year>
Reference-contexts: Currently, POSTGRES supports functions written in the query language and functions written in C. See [Mosh91] for more information. Although Tioga is oriented towards POSTGRES, our proposal can be readily adapted to any system that supports an extendible type system, user-defined functions, and a multi-dimensional access method, e.g. <ref> [Robi81, Niev84, Gutm84, Rous85, Ston86, Gree89, Kolo91, Ston91] </ref>. Note that our architecture differs from other work that sought to support scientific users of database systems. Previous efforts have tended to concentrate on broad requirements [DeWi82], representing scientific data [Ozso85], and statistical computations on large databases [Baru84].
Reference: [Gutm84] <author> Gutman, A., "R-trees: </author> <title> A Dynamic Index Structure for Spatial Searching," </title> <booktitle> Proc. 1984 ACM-SIGMOD Conference on Management of Data, </booktitle> <address> Boston, MA, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: Currently, POSTGRES supports functions written in the query language and functions written in C. See [Mosh91] for more information. Although Tioga is oriented towards POSTGRES, our proposal can be readily adapted to any system that supports an extendible type system, user-defined functions, and a multi-dimensional access method, e.g. <ref> [Robi81, Niev84, Gutm84, Rous85, Ston86, Gree89, Kolo91, Ston91] </ref>. Note that our architecture differs from other work that sought to support scientific users of database systems. Previous efforts have tended to concentrate on broad requirements [DeWi82], representing scientific data [Ozso85], and statistical computations on large databases [Baru84].
Reference: [Haas90] <author> Haas, L. et. al., </author> <title> "Starburst Mid-Flight: As the Dust Clears," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> March </month> <year> 1990. </year> <month> 18 </month>
Reference-contexts: Since such objects are complex and are 2 not well served by conventional relational DBMSs, the DBMS research community has constructed a collection of next generation DBMSs that support such objects much more effectively. Example data managers in this class are POSTGRES [Ston90], IRIS [Wilk90], Starburst <ref> [Haas90] </ref>, and Orion [Kim90]. Our architecture assumes the presence of a next generation DBMS. Two features of POSTGRES were important in our design of Tioga. First, POSTGRES supports a facility through which a user can define new data types.
Reference: [Hero80] <author> Herot, Christopher F., </author> <title> "Spatial Management of Data," </title> <journal> ACM Transactions on Database Systems, </journal> <month> December </month> <year> 1980. </year>
Reference-contexts: It is also the browser's responsibility to display appropriately the values that are returned from the recipe, using a display system similar to SDMS <ref> [Hero80] </ref>. To assist the browser, the DBMS will store functions of the form display (object, N-D-polygon, screen-requirements) which returns a screen representation for a given data object, locating it within a specific polygon of the global coordinate system in a way consistent with the screen requirements. <p> To satisfy this requirement, the recipe execution system must be capable of producing recipe output at varying levels of detail. The zoom in/zoom out capability is reminiscent of SDMS <ref> [Hero80] </ref>, which used it in a browsing context. In SDMS additional detail appeared automatically and was hard-wired into the system. For recipe management, we propose the following much more flexible scheme.
Reference: [John92] <author> Johnson, R.R. et. al., </author> <title> "USD A Database Management System for Scientific Research," </title> <booktitle> Proceedings of the 1992 SIGMOD International Conference on Management of Data, </booktitle> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: On the other hand, recipe management is not bound to an E-R model but can implement many kinds of relationships between records. Also, multiple kinds of browsers can be included in our architecture. USD <ref> [John92] </ref> has a similar "boxes and arrows" diagram notation, and each box can be a function as in our proposal. However, USD enforces a semantic net data model on the diagram, whereas we make no such restriction.
Reference: [Kim90] <author> Kim, W. et. al., </author> <title> "Architecture of the ORION Next-Generation Database System," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> March </month> <year> 1990. </year>
Reference-contexts: Since such objects are complex and are 2 not well served by conventional relational DBMSs, the DBMS research community has constructed a collection of next generation DBMSs that support such objects much more effectively. Example data managers in this class are POSTGRES [Ston90], IRIS [Wilk90], Starburst [Haas90], and Orion <ref> [Kim90] </ref>. Our architecture assumes the presence of a next generation DBMS. Two features of POSTGRES were important in our design of Tioga. First, POSTGRES supports a facility through which a user can define new data types.
Reference: [Kolo91] <author> Kolovson, C. and Stonebraker, M., </author> <title> "Segment Indexes: Dynamic Indexing Techniques for Multi-dimensional Interval Data," </title> <booktitle> Proc. 1991 ACM-SIGMOD Conference on Management of Data, </booktitle> <address> Denver, </address> <publisher> CO. </publisher>
Reference-contexts: Currently, POSTGRES supports functions written in the query language and functions written in C. See [Mosh91] for more information. Although Tioga is oriented towards POSTGRES, our proposal can be readily adapted to any system that supports an extendible type system, user-defined functions, and a multi-dimensional access method, e.g. <ref> [Robi81, Niev84, Gutm84, Rous85, Ston86, Gree89, Kolo91, Ston91] </ref>. Note that our architecture differs from other work that sought to support scientific users of database systems. Previous efforts have tended to concentrate on broad requirements [DeWi82], representing scientific data [Ozso85], and statistical computations on large databases [Baru84].
Reference: [Mech91] <author> Mechoso, C. et. al., </author> <title> "Distribution of a Coupled Atmosphere-Ocean General Circulation Model Across High-Speed Networks," </title> <booktitle> Proceedings of the 4th International Symposium on Computational Fluid Dynamics, </booktitle> <year> 1991. </year>
Reference-contexts: 1 Introduction Scientific visualization applications often deal with data objects of very large sizes. Examples include large regular arrays such as those found in global circulation models <ref> [Mech91] </ref> as well as in remote sensing applications [Dozi89]. Also prevalent are large data structures modeling roads, drainage networks, vegetation patterns, etc. that are represented as collections of arcs, polygons, or points.
Reference: [Mosh91] <editor> Mosher, C. ed., </editor> <title> "The POSTGRES Reference Manual," </title> <institution> Electronics Research Laboratory, University of California, Berkeley, CA, </institution> <note> Memo 91/57, </note> <month> August </month> <year> 1991. </year>
Reference-contexts: The user must provide the types and number of the input arguments and the type of the function result as well as the location of the code for the function. Currently, POSTGRES supports functions written in the query language and functions written in C. See <ref> [Mosh91] </ref> for more information. Although Tioga is oriented towards POSTGRES, our proposal can be readily adapted to any system that supports an extendible type system, user-defined functions, and a multi-dimensional access method, e.g. [Robi81, Niev84, Gutm84, Rous85, Ston86, Gree89, Kolo91, Ston91].
Reference: [Niev84] <author> Nievergelt, J. et. al., </author> <title> "The Grid File: An Adaptable, Symmetric Multikey File Structure," </title> <journal> ACM Transactions on Database Systems, </journal> <month> March </month> <year> 1984. </year>
Reference-contexts: Currently, POSTGRES supports functions written in the query language and functions written in C. See [Mosh91] for more information. Although Tioga is oriented towards POSTGRES, our proposal can be readily adapted to any system that supports an extendible type system, user-defined functions, and a multi-dimensional access method, e.g. <ref> [Robi81, Niev84, Gutm84, Rous85, Ston86, Gree89, Kolo91, Ston91] </ref>. Note that our architecture differs from other work that sought to support scientific users of database systems. Previous efforts have tended to concentrate on broad requirements [DeWi82], representing scientific data [Ozso85], and statistical computations on large databases [Baru84].
Reference: [Ozso85] <author> Ozsoyoglu, G. et. al., </author> <title> "A Language and a Physical Organization Technique for Summary Tables," </title> <booktitle> Proc. 1985 ACM-SIGMOD Conference on Management of Data, </booktitle> <address> Austin, TX, </address> <month> May </month> <year> 1985. </year>
Reference-contexts: Note that our architecture differs from other work that sought to support scientific users of database systems. Previous efforts have tended to concentrate on broad requirements [DeWi82], representing scientific data <ref> [Ozso85] </ref>, and statistical computations on large databases [Baru84]. Little attention has been addressed to the programming needs of the scientific user of a DBMS.
Reference: [Rich87] <author> Richardson, J. and Carey, M., </author> <title> "Programming Constructs for Database System Implementation in EXODUS," </title> <booktitle> Proc. 1987 ACM-SIGMOD Conference on Management of Data, </booktitle> <address> San Francisco, CA, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: Little attention has been addressed to the programming needs of the scientific user of a DBMS. Instead, work on programming language integration with DBMSs has focused on the seamless integration of general purpose languages, such as C++, with data base systems <ref> [Rich87, Agra89] </ref>. Although the main motivation for using a DBMS for scientific data is storage management for large data objects, a DBMS provides other useful features as well for the scientific community. A DBMS has the ability to scale up gracefully for these large data sets.
Reference: [Robi81] <author> Robinson, J., </author> <title> "The K-D-B Tree: A Search Structure for Large Multidimensional Indexes," </title> <booktitle> Proc. 1981 ACM-SIGMOD Conference on Management of Data, </booktitle> <address> Ann Arbor, MI, </address> <month> May </month> <year> 1981. </year>
Reference-contexts: Currently, POSTGRES supports functions written in the query language and functions written in C. See [Mosh91] for more information. Although Tioga is oriented towards POSTGRES, our proposal can be readily adapted to any system that supports an extendible type system, user-defined functions, and a multi-dimensional access method, e.g. <ref> [Robi81, Niev84, Gutm84, Rous85, Ston86, Gree89, Kolo91, Ston91] </ref>. Note that our architecture differs from other work that sought to support scientific users of database systems. Previous efforts have tended to concentrate on broad requirements [DeWi82], representing scientific data [Ozso85], and statistical computations on large databases [Baru84].
Reference: [Roge87] <author> Rogers, T.R., and Cattel, R.G.G., </author> <title> "Entity-Relationship Database User Interfaces," </title> <booktitle> Proceedings of the ER Institute, </booktitle> <institution> Baton Rouge, LA, </institution> <year> 1987. </year>
Reference-contexts: These can then be separately rendered by calling the display function again. 2.5 Relationship to Other Browsing Paradigms Cattell and Rogers <ref> [Roge87] </ref> describe a user interface which uses an entity-relationship data model constructed for a given data base.
Reference: [Rous85] <author> Rousoupoulis, N. and Leifker, D., </author> <title> "Direct Spatial Search on Pictorial Databases Using Packed R-trees," </title> <booktitle> Proc. 1985 ACM-SIGMOD Conference on Management of Data, </booktitle> <address> Austin, TX, </address> <month> June </month> <year> 1985. </year>
Reference-contexts: Currently, POSTGRES supports functions written in the query language and functions written in C. See [Mosh91] for more information. Although Tioga is oriented towards POSTGRES, our proposal can be readily adapted to any system that supports an extendible type system, user-defined functions, and a multi-dimensional access method, e.g. <ref> [Robi81, Niev84, Gutm84, Rous85, Ston86, Gree89, Kolo91, Ston91] </ref>. Note that our architecture differs from other work that sought to support scientific users of database systems. Previous efforts have tended to concentrate on broad requirements [DeWi82], representing scientific data [Ozso85], and statistical computations on large databases [Baru84].
Reference: [Seli79] <author> Selinger, P. et. al., </author> <title> "Access Path Selection in a Relational Data Base System," </title> <booktitle> Proc 1979 ACM-SIGMOD Conference on Management of Data, </booktitle> <address> Boston, MA, </address> <month> June </month> <year> 1979. </year>
Reference-contexts: Assuming that the network manager has agreed to deliver on the contract, we now consider how the DBMS can also provide a guarantee. Traditionally, DBMSs create an optimized plan for an ad-hoc query at run-time <ref> [Seli79] </ref>. The query optimizer attempts to find the lowest cost plan. Optimizers already estimate costs in terms of I/O and CPU resources. I/O resources are usually measured in disk pages fetched and CPU resources in estimated number of instructions.
Reference: [Sell88] <author> Sellis, </author> <title> T.K., "Multiple-Query Optimization," </title> <journal> ACM Transactions on Database Systems, </journal> <month> March </month> <year> 1988. </year>
Reference-contexts: Although this algorithm is not optimal, we expect it will give good real-world performance. A simulation study is planned to test this hypothesis. This caching of intermediate results has been advocated in <ref> [Sell88, Sell90] </ref>; however, this work is interested in the optimization of multiple queries in a query stream and hopes that a previous result can be useful as a part of a subsequent query.
Reference: [Sell90] <author> Sellis, T.K. and Ghosh, S., </author> <title> "On the Multiple-Query Optimization Problem," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> June </month> <year> 1990. </year> <month> 19 </month>
Reference-contexts: Although this algorithm is not optimal, we expect it will give good real-world performance. A simulation study is planned to test this hypothesis. This caching of intermediate results has been advocated in <ref> [Sell88, Sell90] </ref>; however, this work is interested in the optimization of multiple queries in a query stream and hopes that a previous result can be useful as a part of a subsequent query.
Reference: [Ston75] <author> Stonebraker, M., </author> <title> "Implementation of Integrity Constraints and Views by Query Modi--fication," </title> <booktitle> Proc. 1975 ACM-SIGMOD Conference, </booktitle> <address> San Jose, CA, </address> <month> May </month> <year> 1975. </year>
Reference-contexts: The reason for doing this is that the query plan for the combined POSTQUEL function may be more efficient than the query plans of the individual functions executed serially. The algorithm for collapsing two POSTQUEL functions is basically the query-modification technique for view composition discussed in <ref> [Ston75] </ref>. As [Ston75] notes, though, if either POSTQUEL function includes aggregate functions, this technique fails. If a recipe ingredient is opaque to POSTGRES, such as a C function, it can still be coalesced with a preceding POSTQUEL box. <p> The reason for doing this is that the query plan for the combined POSTQUEL function may be more efficient than the query plans of the individual functions executed serially. The algorithm for collapsing two POSTQUEL functions is basically the query-modification technique for view composition discussed in <ref> [Ston75] </ref>. As [Ston75] notes, though, if either POSTQUEL function includes aggregate functions, this technique fails. If a recipe ingredient is opaque to POSTGRES, such as a C function, it can still be coalesced with a preceding POSTQUEL box.
Reference: [Ston84] <author> Stonebraker, M. and Rowe, L., </author> <title> "Database Portals ANew Application Program Interface," </title> <booktitle> Proceedings of the 10th International Conference on Very Large Databases, </booktitle> <address> Singapore, </address> <month> August </month> <year> 1984. </year>
Reference-contexts: In this architecture, certain services are performed within the DBMS and others in a separate front-end rendering engine. Section 2 also describes the protocol by which these two components communicate and indicates how this protocol is different from previous ones such as cursors and portals <ref> [Ston84] </ref>. Then, in Section 3 we describe how our framework supports additional functionality in the areas of abstracts of data, browser synchronization, and visual updating of data. Section 4 discusses the run-time support provided by the DBMS for recipe execution. <p> In this way, they include some of the constructs proposed in portals, which allow an application program to retrieve multiple records in a variety of ways along a single dimension <ref> [Ston84] </ref>. Our browser-DBMS protocol generalizes portals to operate in an N-dimensional space. Recipes do not include explicit update commands; rather they rely on the browser to issue separate POSTQUEL commands for this purpose.
Reference: [Ston86] <author> Stonebraker, M. and Rowe, L., </author> <title> "The Design of POSTGRES," </title> <booktitle> Proc. 1986 ACM-SIGMOD Conference on Management of Data, </booktitle> <address> Washington, D.C., </address> <month> May </month> <year> 1986. </year>
Reference-contexts: Currently, POSTGRES supports functions written in the query language and functions written in C. See [Mosh91] for more information. Although Tioga is oriented towards POSTGRES, our proposal can be readily adapted to any system that supports an extendible type system, user-defined functions, and a multi-dimensional access method, e.g. <ref> [Robi81, Niev84, Gutm84, Rous85, Ston86, Gree89, Kolo91, Ston91] </ref>. Note that our architecture differs from other work that sought to support scientific users of database systems. Previous efforts have tended to concentrate on broad requirements [DeWi82], representing scientific data [Ozso85], and statistical computations on large databases [Baru84].
Reference: [Ston90] <author> Stonebraker, M. et. al., </author> <title> "The Implementation of POSTGRES," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> March </month> <year> 1990. </year>
Reference-contexts: Since such objects are complex and are 2 not well served by conventional relational DBMSs, the DBMS research community has constructed a collection of next generation DBMSs that support such objects much more effectively. Example data managers in this class are POSTGRES <ref> [Ston90] </ref>, IRIS [Wilk90], Starburst [Haas90], and Orion [Kim90]. Our architecture assumes the presence of a next generation DBMS. Two features of POSTGRES were important in our design of Tioga. First, POSTGRES supports a facility through which a user can define new data types.
Reference: [Ston91] <author> Stonebraker, M., </author> <title> "Managing Persistent Objects in a Multi-level Store," </title> <institution> Electronics Research laboratory Memorandum M91/72, University of California, Berkeley, </institution> <month> February </month> <year> 1991. </year>
Reference-contexts: Currently, POSTGRES supports functions written in the query language and functions written in C. See [Mosh91] for more information. Although Tioga is oriented towards POSTGRES, our proposal can be readily adapted to any system that supports an extendible type system, user-defined functions, and a multi-dimensional access method, e.g. <ref> [Robi81, Niev84, Gutm84, Rous85, Ston86, Gree89, Kolo91, Ston91] </ref>. Note that our architecture differs from other work that sought to support scientific users of database systems. Previous efforts have tended to concentrate on broad requirements [DeWi82], representing scientific data [Ozso85], and statistical computations on large databases [Baru84].
Reference: [Ston92] <author> Stonebraker, M. and Dozier, J., </author> <title> "SEQUOIA 2000: Large Capacity Object Servers to Support Global Change Research," </title> <type> SEQUOIA 2000 Technical Report No 1, </type> <institution> Electronics Research Lab, University of California, Berkeley, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: The Tioga system is part of the Sequoia 2000 Global Change Research Project. 1 This paper is organized as follows. In Section 2 we explore the architecture which we are implementing as part of the Sequoia 2000 project <ref> [Ston92] </ref>. In this architecture, certain services are performed within the DBMS and others in a separate front-end rendering engine. Section 2 also describes the protocol by which these two components communicate and indicates how this protocol is different from previous ones such as cursors and portals [Ston84].
Reference: [Wilk90] <author> Wilkinson, K. et. al., </author> <title> "The IRIS Architecture and Implementation," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> March </month> <year> 1990. </year> <month> 20 </month>
Reference-contexts: Since such objects are complex and are 2 not well served by conventional relational DBMSs, the DBMS research community has constructed a collection of next generation DBMSs that support such objects much more effectively. Example data managers in this class are POSTGRES [Ston90], IRIS <ref> [Wilk90] </ref>, Starburst [Haas90], and Orion [Kim90]. Our architecture assumes the presence of a next generation DBMS. Two features of POSTGRES were important in our design of Tioga. First, POSTGRES supports a facility through which a user can define new data types.
References-found: 31

