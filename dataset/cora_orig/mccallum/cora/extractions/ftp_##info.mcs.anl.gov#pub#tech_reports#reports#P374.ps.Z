URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P374.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts93.htm
Root-URL: http://www.mcs.anl.gov
Email: rbutler@sinkhole.unf.edu lusk@mcs.anl.gov  
Title: p4-Linda: A Portable Implementation of Linda  
Author: Ralph M. Butler Alan L. Leveton Ewing L. Lusk 
Address: Jacksonville, FL 32246 Argonne, IL 60439  
Affiliation: College of Comp. and Inf. Sci. Math. and Comp. Sci. Division University of North Florida Argonne National Laboratory  
Abstract: Facilities such as interprocess communication and protection of shared resources have been added to operating systems to support multiprogramming and have since been adapted to exploit explicit multiprocessing within the scope of two models: the shared-memory model and the distributed (message-passing) model. When multiprocessors (or networks of heterogeneous processors) are used for explicit parallelism, the difference between these models is exposed to the programmer. The p4 tool set was originally developed to buffer the programmer from synchronization issues while offering an added advantage in portability, however two models are often still needed to develop parallel algorithms. We provide two implementations of Linda in an attempt to support a single high-level programming model on top of the existing paradigms in order to provide a consistent semantics regardless of the underlying model. Linda's fundamental properties associated with generative communication eliminate the distinction between shared and distributed memory. 
Abstract-found: 1
Intro-found: 1
Reference: <institution> References </institution>
Reference: [1] <author> S. Ahuja, N. Carriero, and D Gelernter. </author> <title> Linda and friends. </title> <journal> IEEE Computer, </journal> <volume> 19(8) </volume> <pages> 26-34, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Four operations are central to Linda: out, in, rd and eval. Out (t) adds tuple t to tuple space. The elements of t are evaluated before the tuple is added to tuple space <ref> [1] </ref>. For example, if array [4] contains the value 10, out ("sum",2,array [4]) adds the tuple ("sum",2,10) to tuple space and the process continues immediately. <p> Normally, m consists of a combination of actual and formal parameters, where the actuals in m must match the actuals in t by type and position and the formals in m are assigned values in t <ref> [1] </ref>. Thus, given the tuple noted above, in ("sum",?i,?j) matches "sum", assigns 2 to i, 10 to j, and the tuple is removed from tuple space. Rd is similar to in except that the matched tuple remains in tuple space. <p> Eval is not primitive in Linda and is actually constructed on top of out and provides Linda with a mechanism to dynamically create multiple processes to assist in a task. Implementations of Linda exist that do not recognize the eval operation <ref> [1] </ref>, including a network model based on worker replication - n nodes are given n copies of a program, thereby obviating the need for dynamic process creation. Tuple members are usually simple data types: characters, one-dimensional strings, integers, or floats.
Reference: [2] <author> James Boyle, Ralph Butler, Terrence Disz, Barnett Glickfeld, Ewing Lusk, Ross Overbeek, James Patter-son, and Rick Stevens. </author> <title> Portable Programs for Parallel Processors. </title> <publisher> Holt, Rinehart, and Winston, </publisher> <year> 1987. </year>
Reference-contexts: We are reminded both of the restriction operation in relational databases and instantiation in logic languages [8]. The structured name should not be confused with the logical name, which is simply the initial 3 p4 Background p4 [4] <ref> [2] </ref> [9] is a set of parallel programming tools designed to support portability across a wide range of multiprocessor/multicomputer architectures (hence the name "Portable Programs for Parallel Processors"). <p> To process an item, consumer simply removes it from tuple space and outs the acknowledgement. #include "sr_linda.h" #define MAXVAL 1000 main (argc,argv) int argc; char **argv; - int primes (); int last,i,ok; struct linda_eval_tbl linda_eval_funcs <ref> [2] </ref>; linda_eval_funcs [0].ptr = consumer; strcpy (linda_eval_funcs [0].name,"consumer"); linda_eval_funcs [1].ptr = NULL; linda_init (&argc,argv,linda_eval_funcs); for (i=0; i &lt;= MAXVAL; i++) - eval ("%s","consumer"); in ("%s%d","ack",i); printf ("mainline exiting"n"); linda_end (); - int consumer () - in ("%s?d","msg",&val); return (1); - This program works with both versions of the code if we
Reference: [3] <author> R. Butler and N. Karonis. </author> <title> Exploitation of parallelism in prototypical deduction problems. </title> <booktitle> In Ninth International Conference on Automated Deduction, </booktitle> <pages> pages 333-343, </pages> <year> 1988. </year>
Reference-contexts: The semi-groups problem [11] falls into this category, and thus is a very good candidate for p4-Linda's message passing implementation. A short discussion of an algorithm suggested by <ref> [3] </ref> follows the problem description. As input, the program is given a set of words and an operation table that defines how to build new words from existing ones.
Reference: [4] <author> Ralph Butler and Ewing Lusk. </author> <title> User's guide to the p4 parallel programming system. </title> <type> Technical Report ANL-92/17, </type> <institution> Argonne National Laboratory, Mathematics and Computer Science Division, </institution> <month> October </month> <year> 1992. </year>
Reference-contexts: Four operations are central to Linda: out, in, rd and eval. Out (t) adds tuple t to tuple space. The elements of t are evaluated before the tuple is added to tuple space [1]. For example, if array <ref> [4] </ref> contains the value 10, out ("sum",2,array [4]) adds the tuple ("sum",2,10) to tuple space and the process continues immediately. In (m) attempts to match some tuple t in tuple space to the template m and, if a match is found, removes t from tuple space. <p> Four operations are central to Linda: out, in, rd and eval. Out (t) adds tuple t to tuple space. The elements of t are evaluated before the tuple is added to tuple space [1]. For example, if array <ref> [4] </ref> contains the value 10, out ("sum",2,array [4]) adds the tuple ("sum",2,10) to tuple space and the process continues immediately. In (m) attempts to match some tuple t in tuple space to the template m and, if a match is found, removes t from tuple space. <p> We are reminded both of the restriction operation in relational databases and instantiation in logic languages [8]. The structured name should not be confused with the logical name, which is simply the initial 3 p4 Background p4 <ref> [4] </ref> [2] [9] is a set of parallel programming tools designed to support portability across a wide range of multiprocessor/multicomputer architectures (hence the name "Portable Programs for Parallel Processors").
Reference: [5] <author> N. Carriero and D. Gelernter. </author> <title> The s/net's linda kernel. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 4(2) </volume> <pages> 110-129, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: We opted for a centralized tuple space because the alternative methods require building fast deletion and broadcast protocols, an effort beyond the scope of the project. For an interesting discussion of these schemes see <ref> [5] </ref>. Tuples are stored as structures in the local memory of the tuple space manager.
Reference: [6] <author> N. Carriero and D. Gelernter. </author> <title> How to write parallel programs. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3) </volume> <pages> 323-356, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: The abstract environment called tuple space forms the basis of Linda's model of communication. A process generates an object called a tuple and places it in a globally shared collection of tuples called tuple space. Theoretically, the object remains in tuple space forever, unless removed by another process <ref> [6] </ref>. Tuple space holds two varieties of tuples. Process or "live" tuples are under active evaluation, incorporate executable code, and execute concurrently. Data tuples are passive, ordered collections of data items. For example, the tuple ("mother","age",56) contains three data items: two strings and an integer. <p> Data tuples are passive, ordered collections of data items. For example, the tuple ("mother","age",56) contains three data items: two strings and an integer. A process tuple that is finished executing resolves into a data tuple, which may in turn be read or consumed by other processes <ref> [6] </ref>. Four operations are central to Linda: out, in, rd and eval. Out (t) adds tuple t to tuple space. The elements of t are evaluated before the tuple is added to tuple space [1]. <p> A process executing eval creates a live tuple and continues. In creating the active tuple, eval implicitly spawns a new process that begins to work evaluating the tuple <ref> [6] </ref>. For example, if the function abs (x) computes the absolute value of x, then eval ("ab",-6,abs (-6)) creates or allocates another process to compute the absolute value of -6. <p> Tuple members are usually simple data types: characters, one-dimensional strings, integers, or floats. In some Linda implementations tuples can include more complex data types (e.g., integer arrays) <ref> [6] </ref>. These data structures are removed from or added to tuple space just like the more fundamental types. Operations which insert or withdraw from tuple space do so atomically. <p> One special-purpose mechanism is called the askfor monitor. A common pattern in multiprocessing, sometimes called agenda parallelism <ref> [6] </ref>, focuses on a list of tasks to be performed and is epitomized in the master/worker paradigm. A master process initializes a computation and creates worker processes capable of performing, in parallel, a step in the computation.
Reference: [7] <author> N. Carriero and D. Gelernter. </author> <title> Linda in context. </title> <journal> Communications of the ACM, </journal> <volume> 32(4) </volume> <pages> 444-458, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: This decision resulted in certain limitations on eval and out. A Linda kernel cited in <ref> [7] </ref> allows eval tuples to have more than two elements. For example, a typical eval may appear as: eval ("key",i,primes (i)) which spawns a process to compute whether or not i is prime. After the tuple is evaluated, the tuple ("key",i,&lt; result &gt;) is added to tuple space.
Reference: [8] <author> D. Gelernter. </author> <title> Generative communication in linda. </title> <journal> ACM Transactions on Programming Language Systems, </journal> <volume> 7(1) </volume> <pages> 80-112, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: This model may run on a large multicomputer, or on a collection of heterogeneous machines, including a network of workstations. It provides a more portable system at the possible risk of suffering some loss in performance. 2 Linda Background Linda is described in <ref> [8] </ref>. Gelernter introduces generative communication, which he argues is sufficiently different from the three basic kinds of concurrent programming mechanisms of the time (monitors, message-passing, and remote operations) as to make it a fourth model. <p> In theory, nondeterminism is inherent; it is assumed that the tuples are unordered in tuple space so that, given a template m and matching tuples t1, t2 and t3, it can not be determined which tuple will be removed by in (m) <ref> [8] </ref>. In practice, implementations of tuple space fall short of pure nondeterminism. Some ordering is inescapable but remains implementation dependent. It is in the spirit of Linda programming not to presuppose any ordering of tuples in the underlying mechanism. <p> Spatial and temporal uncoupling also mark Linda. Any number of processes may retrieve tuples, and tuples added to tuple space by out remain in tuple space until removed by in <ref> [8] </ref>. A property called structured naming deserves special consideration. Given the operations out (t1) and in (m1), all actuals in t1 must match the corresponding actuals in m1 for matching to succeed. The actuals in t1 constitute a structured name or key and, loosely speaking, make tuple space content addressable. <p> For example, if ("sum",10,9) is a tuple in tuple space, then the success of the operation in ("sum",?x,10) is predicated upon the structured name ["sum",10]. We are reminded both of the restriction operation in relational databases and instantiation in logic languages <ref> [8] </ref>. The structured name should not be confused with the logical name, which is simply the initial 3 p4 Background p4 [4] [2] [9] is a set of parallel programming tools designed to support portability across a wide range of multiprocessor/multicomputer architectures (hence the name "Portable Programs for Parallel Processors").
Reference: [9] <author> Virginia Herrarte and Ewing Lusk. </author> <title> Studying parallel program behavior with Upshot. </title> <type> Technical Report ANL-91/15, </type> <institution> Argonne National Laboratory, Mathematics and Computer Science Division, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: We are reminded both of the restriction operation in relational databases and instantiation in logic languages [8]. The structured name should not be confused with the logical name, which is simply the initial 3 p4 Background p4 [4] [2] <ref> [9] </ref> is a set of parallel programming tools designed to support portability across a wide range of multiprocessor/multicomputer architectures (hence the name "Portable Programs for Parallel Processors").
Reference: [10] <author> W. Leler. </author> <title> Linda meets unix. </title> <journal> IEEE Computer, </journal> <volume> 23(2) </volume> <pages> 43-54, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: Some ordering is inescapable but remains implementation dependent. It is in the spirit of Linda programming not to presuppose any ordering of tuples in the underlying mechanism. Sequencing transactions upon tuple space is facilitated using a sequencing key as an additional tuple element <ref> [10] </ref>, a method employed to program distributed arrays in Linda. Thus the ith element of vector "A" is accessed via in ("A",i,&lt;some_number&gt;) while the ith + 1 element is added to tuple space with out ("A",i+1,&lt;some_number&gt;) Several properties distinguish Linda. <p> In the message-passing model, this translates into multiple tuple managers. A distributed askfor, or use of several monitors, may provide the answer to distributed tuple spaces in the monitors model. A Linda kernel described in <ref> [10] </ref> implements multiple tuple spaces. 10 Conclusions We have implemented two compatible versions of Linda on top of the p4 portable parallel programming system, one to take advantage of shared-memory architectures, the other to utilize resources of networked machines, offering an advantage in portability.
Reference: [11] <author> E. Lusk and R. McFadden. </author> <title> Using automated reasoning tools: A study of the semigroup f2b2. </title> <journal> Semigroup Forum, </journal> <volume> 36(1) </volume> <pages> 75-88, </pages> <year> 1987. </year>
Reference-contexts: Synchronization Communication Time in Method Medium Seconds Monitors Shared-memory 3 Message-passing Shared-memory 25 Message-passing Ethernet 70 Table 1: Times for Example Program Executions 8 A Semigroups Problem There exists a class of programs in which communication costs decrease as execution time increases. The semi-groups problem <ref> [11] </ref> falls into this category, and thus is a very good candidate for p4-Linda's message passing implementation. A short discussion of an algorithm suggested by [3] follows the problem description.
References-found: 12

