URL: http://www.cs.colorado.edu/~zorn/oopsla95/kossmann.ps
Refering-URL: http://www.cs.colorado.edu/~zorn/oopsla95/papers.html
Root-URL: http://www.cs.colorado.edu
Email: f kossmann j franklin g@cs.umd.edu  
Title: Architecture and Performance of Large and Disperse Distributed Object Base Systems  
Author: Donald Kossmann Michael J. Franklin 
Address: College Park, MD 20742  
Affiliation: Department of Computer Science and UMIACS University of Maryland  
Abstract-found: 0
Intro-found: 1
Reference: [Cat94] <author> R. G. G. Cattell, </author> <title> editor. Object Database Standard. </title> <publisher> Morgan-Kaufmann Publishers, </publisher> <address> San Mateo, CA, USA, </address> <year> 1994. </year>
Reference-contexts: At no time is it possible to freeze or stop a system to reconfigure the servers or reorganize the database. In addition, new applications (e.g., multi-media) and the wider acceptance of object-oriented database technology <ref> [Cat94] </ref> has pushed researchers and vendors to create object-oriented database systems that support data-intensive applications that browse through large collections of objects or process very large objects (e.g., image data).
Reference: [CDF + 94] <author> M. J. Carey, D. J. DeWitt, M. J. Franklin, N. E. Hall, M. L. McAuliffe, J. F. Naughton, D. T. Schuh, M. H. Solomon, C. K. Tan, O. G. Tsatalos, S. J. White, and M. J. Zwilling. </author> <title> Shoring up persistent applications. </title> <booktitle> In Proc. of the ACM SIGMOD Conf. on Management of Data, </booktitle> <pages> pages 383-394, </pages> <address> Minneapolis, MI, USA, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Clearly, neither the distributed relational systems of the late seventies nor the current client-server architectures are going to be appropriate for this scenario. As a consequence, the design of and experimentation with new database architectures for distributed systems is being promoted; the most known research projects are SHORE <ref> [CDF + 94] </ref> and Mariposa [SAD + 94, SDK + 94].
Reference: [CG94] <author> R. L. Cole and G. Graefe. </author> <title> Optimization of dynamic query evaluation plans. </title> <booktitle> In Proc. of the ACM SIGMOD Conf. on Management of Data, </booktitle> <pages> pages 150-160, </pages> <address> Minneapolis, MI, USA, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: The execution and activation times of a 10-way join query (with 10 sets of 10,000 objects of 100 bytes each) were measured. All 3 For centralized database systems in which the search space of a query optimizer is much smaller, dynamic query optimization has been studied in, e.g., <ref> [CG94] </ref>. 4 the joins were functional joins that, for example, occur in path expressions. Every tuple of a relation matched exactly one tuple of another relation. The whole experimental environment is described in detail in [KF95].
Reference: [CL86] <author> M. Carey and H. Lu. </author> <title> Load balancing in a locally distributed database system. </title> <booktitle> In Proc. of the ACM SIGMOD Conf. on Management of Data, </booktitle> <pages> pages 108-119, </pages> <address> Washington, USA, </address> <year> 1986. </year>
Reference-contexts: At activation-time, the incomplete plan is refined carrying out site selection depending on the location of copies of objects and the load of the machines. A similar approach was first proposed in <ref> [CL86] </ref>. Dynamic: Only parsing is carried out at compile-time, and the optimization of a query (join ordering and site selection) is completely carried out while the query is activated.
Reference: [DNSV95] <author> D. DeWitt, J. Naughton, J. Shafer, and S. Venkataraman. </author> <title> Parallelizing OODBMS traversals: A performance evaluation, </title> <month> May </month> <year> 1995. </year> <note> Submitted for Publication. </note>
Reference-contexts: of parallelism that can be exploited depends on the availability of copies of objects at different sites (data allocation and caching) and on the query: most relational queries can be parallelized fairly easily; methods such as the traversals of the OO7 benchmark sometimes can and sometimes cannot be parallelized well <ref> [DNSV95] </ref>. The remainder of this position paper is organized as follows: Section 2 discusses alternative execution policies and approaches to dynamic query optimization, the two concepts we believe are going to be very important for distributed object base systems.
Reference: [EGK95] <author> A. Eickler, C. A. Gerlhof, and D. Kossmann. </author> <title> A performance evaluation of OID mapping techniques. </title> <booktitle> In Proc. of the Conf. on Very Large Data Bases (VLDB), </booktitle> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Upon 1 http://www.cs.umd.edu/projects/dimsum/index.html 2 request of a client, data in the granularity of objects or database pages are shipped from a server to the client. In a system with many servers, yellow pages or name servers keep the information which servers store copies of objects <ref> [EGK95] </ref>. Using query shipping, database operations are carried out on servers.
Reference: [Fra93] <author> M. Franklin. </author> <title> Caching and Memory Management in Client-Server Database Systems. </title> <type> PhD thesis, </type> <institution> University of Wisconsin, Madison, Wisconsin, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Section 3 presents the results of some performance experiments, and Section 4 contains a summary. 2 Architectures of Distributed Object Bases 2.1 Flexible Execution Policies State-of-the-art client-server database systems employ either a data-shipping or a query-shipping execution policy <ref> [Fra93] </ref>. Using data shipping, all application-level database operations (e.g., methods or joins) are executed at the client workstation at which the operation was initiated. Upon 1 http://www.cs.umd.edu/projects/dimsum/index.html 2 request of a client, data in the granularity of objects or database pages are shipped from a server to the client.
Reference: [KF95] <author> D. Kossmann and M. Franklin. </author> <title> A study of query execution strategies for client-server database systems. </title> <type> Technical Report CS-TR-3512, </type> <institution> University of Maryland, College Park, MD 20742, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: Both query shipping and data shipping impose strong restrictions upon where operations can be carried out, and therefore, sometimes do not fully exploit the resources of a distributed system. In <ref> [KF95] </ref>, we identified a more flexible execution policy referred to as hybrid shipping. Combining the options provided by data and query shipping, hybrid shipping allows operations to be carried out at servers and at client workstations. <p> Every tuple of a relation matched exactly one tuple of another relation. The whole experimental environment is described in detail in <ref> [KF95] </ref>. Table 3 lists the execution time of the 10-way join query in 4 different system configurations using the three execution policies described in Section 2.1 and using full dynamic query optimization to generate the plans.
Reference: [KK95] <author> A. Kemper and D. Kossmann. </author> <title> Adaptable pointer swizzling strategies in object bases: Design, realization, and quantitative analysis. </title> <journal> The VLDB Journal, </journal> <volume> 4(3) </volume> <pages> 519-566, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: Typically, object-oriented databases have been used in very computation-intensive and/or highly interactive applications (e.g., engineering applications), and therefore, techniques such as pointer swizzling <ref> [Mos92, KK95] </ref> have been used to speed up the processing of persistent objects at workstations. In this environment, scalabilty means that an arbitrary number of client workstations can be connected to the servers.
Reference: [MGS + 94] <author> D. Maier, G. Graefe, L. Shapiro, S. Daniels, T. Keller, and B. Vance. </author> <title> Issues in distributed object assembly. </title> <editor> In T. Ozsu, U. Dayal, and P. Valduriez, editors, </editor> <booktitle> Distributed Object Management, </booktitle> <pages> pages 165-181, </pages> <address> San Mateo, CA, USA, </address> <month> May </month> <year> 1994. </year> <title> Morgan-Kaufmann Publishers. </title> <booktitle> International Workshop on Distributed Object Management. </booktitle>
Reference-contexts: Similarly, a join can be carried out at the site of the inner relation, of the outer relation, or of the consumer operator that processes the result of the join (possibly, the client), as observed in <ref> [MGS + 94] </ref>.
Reference: [Mos92] <author> J. E. B. Moss. </author> <title> Working with persistent objects: To swizzle or not to swizzle. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> 18(8) </volume> <pages> 657-673, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: Typically, object-oriented databases have been used in very computation-intensive and/or highly interactive applications (e.g., engineering applications), and therefore, techniques such as pointer swizzling <ref> [Mos92, KK95] </ref> have been used to speed up the processing of persistent objects at workstations. In this environment, scalabilty means that an arbitrary number of client workstations can be connected to the servers.
Reference: [RK86] <author> N. Roussopoulos and H. Kang. </author> <booktitle> Principles and techniques in the design of ADMS. IEEE Computer, </booktitle> <volume> 19 </volume> <pages> 19-25, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: Site selection must also be carried out for data shipping and for query shipping: for example, the system must decide which copy of an object to use, if objects are replicated. But, site selection is most complex for hybrid shipping. 2 One exception is ADMS <ref> [RK86] </ref>, which caches query results at clients. 3 2.2 Dynamic Query Optimization Query optimization can be carried out in one of the following three ways 3 : Static: At compile-time, the query is parsed and a query evaluation plan is generated specifying the join order and where every operator is to
Reference: [SAD + 94] <author> M. Stonebraker, P. M. Aoki, R. Devine, W. Litwin, and M. Olson. Mariposa: </author> <title> A new architecture for distributed data. </title> <booktitle> In Proc. IEEE Conf. on Data Engineering, </booktitle> <pages> pages 54-65, </pages> <address> Houston, TX, </address> <year> 1994. </year>
Reference-contexts: As a consequence, the design of and experimentation with new database architectures for distributed systems is being promoted; the most known research projects are SHORE [CDF + 94] and Mariposa <ref> [SAD + 94, SDK + 94] </ref>.
Reference: [SDK + 94] <author> M. Stonebraker, R. Devine, M. Kornacker, W. Litwin, A. Pfeffer, A. Sah, and C. Staelin. </author> <title> An economic paradigm for query processing and data migration in Mariposa. </title> <booktitle> In Proc. of the IEEE Conf. on Parallel and Distributed Information Systems, </booktitle> <pages> pages 58-67, </pages> <month> September </month> <year> 1994. </year> <month> 6 </month>
Reference-contexts: As a consequence, the design of and experimentation with new database architectures for distributed systems is being promoted; the most known research projects are SHORE [CDF + 94] and Mariposa <ref> [SAD + 94, SDK + 94] </ref>.
References-found: 14

