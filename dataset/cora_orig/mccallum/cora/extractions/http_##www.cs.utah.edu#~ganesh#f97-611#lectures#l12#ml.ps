URL: http://www.cs.utah.edu/~ganesh/f97-611/lectures/l12/ml.ps
Refering-URL: http://www.cs.utah.edu/~ganesh/f97-611/lectures/l12/
Root-URL: 
Email: fspmiller,kfhoechg@cca.rockwell.com  
Title: Specifying the Mode Logic of a Flight Guidance System in CoRE  
Author: Steven P. Miller and Karl F. Hoech Collins 
Date: October 20, 1997  
Address: Cedar Rapids, IA 52498 USA  
Affiliation: Rockwell International  
Note: Commercial Avionics  Name Date 1997=10=2015 59 18 Printed on  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> T. Alspaugh, Stuart Faulk, K. Britton, R. Parker, David Parnas, and J. Shore. </author> <title> Software requirements for the A-7E aircraft. </title> <type> Technical Report NRL/FR/5530-92-9194, </type> <institution> Naval Research Laboratory, </institution> <address> Washington, D.C., </address> <year> 1992. </year>
Reference: [2] <author> Mark R. Blackburn and Robert D. Busser. </author> <title> T-VEC:a tool for developing critical systems. </title> <booktitle> In Eleventh Annual Conference on Computer Assurance, </booktitle> <pages> pages 237-249, </pages> <address> Gaithersburg, MD, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: The ability to perform consistency and completeness checks has been shown to be a very effective technique for eliminating errors from requirements models in SCR, RSML, and Tablewise [17, 16, 15, 19]. The value of automatically generating test cases from a formal requirements model has been conclusively demonstrated in <ref> [2] </ref>. Formal requirements and design models have been used to generate code in ROOM and Tablewise [30, 19]. Automated tools are being developed to perform safety analysis of RSML specifications [29].
Reference: [3] <author> Barry B. Boehm. </author> <title> Software Engineering Economics. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1981. </year>
Reference: [4] <author> Joan J. Britt. </author> <title> Case study: Applying formal methods to the traffic alert and collision avoidance system (TCAS) II. </title> <booktitle> In Ninth Annual Conference on Computer Assurance, </booktitle> <pages> pages 39-52, </pages> <address> Gaithersburg, MD, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: To deal with this problem, we extended our model with the notion of a transition bus introduced by Nancy Leveson's group when specifying TCAS II in RSML <ref> [4, 22] </ref>. The transition bus is the dark horizontal line in Figure A.8. <p> We found the use of a transition bus introduced by Nancy Leveson's group when specifying TCAS II in RSML <ref> [4, 22] </ref> essential for drawing the transition diagrams. This simple extension turned a virtually unreadable diagram into a valuable visual aid. Such a capability should probably be included in any graphical transition model intended for use in industrial applications.
Reference: [5] <author> Lisa Brownsword and Paul Clements. </author> <title> A case study in successful product line development. </title> <type> Technical Report CMU/SEI-96-TR-016, </type> <institution> Software Engineering Institute, Pittsburg, Pennsylvania 15213, </institution> <month> October </month> <year> 1996. </year>
Reference-contexts: example, it would have been helpful to have a hysteresis class that could be parameterized with a base type and the thresholds. 3.7 Support for Product Families Many software developers are realizing that they do not produce software for a single product, but rather for a family of similar products <ref> [5] </ref>. Approaches such as the Software Productivity Consortium's Synthesis methodology [24] and Lucent's FAST process [12] provide explicit processes and methods to support the development of product families rather than single product instances.
Reference: [6] <author> Alan M. Davis. </author> <title> Software Requirements (Revised): Objects, Functions, and States. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1993. </year>
Reference: [7] <author> Alan M. Davis. </author> <title> A study of requirements tool users. </title> <type> Technical Report SPC-95118-MC, </type> <institution> Software Productivity Consortium, </institution> <address> 2214 Rock Hill Road, Herndon, VA 22070, </address> <month> January </month> <year> 1996. </year>
Reference: [8] <author> Stuart Faulk, John Brackett, Paul Ward, and James Kirby, Jr. </author> <title> The CoRE method for real-time requirements. </title> <journal> IEEE Software, </journal> <volume> 9(5) </volume> <pages> 22-33, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: A detailed example of the FGS CoRE specification is discussed in Section 2. Many of the ideas presented above are described in greater detail there. More information can be found in <ref> [8, 10, 11] </ref>. 2 Modes can also be viewed as a summarization of the system's input history since a deterministic system can always be placed in a particular state or mode by repeating a sequence of inputs from the initial mode. 3 If a mode machine only affects a single class,
Reference: [9] <author> Stuart R. Faulk. </author> <title> Software requirements: A tutorial. </title> <type> Technical Report NRL/MR/5546-95-7775, </type> <institution> Center for High Assurance Systems, Naval Research Laboratory, </institution> <address> Washinton, DC 20375-5320, </address> <month> November </month> <year> 1995. </year>
Reference: [10] <author> Stuart R. Faulk, Lisa Finneran, James Kirby, and Assad Moini. </author> <title> Consortium requirements engineering guidebook. </title> <type> Technical Report SPC-92060-CMC, </type> <institution> Software Productivity Consortium, </institution> <address> 2214 Rock Hill Road, Herndon, VA 22070, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: The class model superimposes an object-oriented organization on the behavioral model by grouping into classes portions of the specification that are related and likely to change together. 1.3.1 The CoRE Behavioral Model The behavioral model is based on a standard mathematical model of embedded-system behavior known as the four-variable model <ref> [10] </ref>. <p> A detailed example of the FGS CoRE specification is discussed in Section 2. Many of the ideas presented above are described in greater detail there. More information can be found in <ref> [8, 10, 11] </ref>. 2 Modes can also be viewed as a summarization of the system's input history since a deterministic system can always be placed in a particular state or mode by repeating a sequence of inputs from the initial mode. 3 If a mode machine only affects a single class, <p> this situation can occur, how should the system 20 October 20, 1997 R Collins W Avionics & Communications react? Should it prioritize the events and react to them sequentially, discard some events, or react in some entirely new fashion than what is specified for the individual events? The CoRE Guidebook <ref> [10] </ref> does not address this issue. In SCR [17], an assumption is made that only one monitored quantity can change at any instance in time. <p> Approaches such as the Software Productivity Consortium's Synthesis methodology [24] and Lucent's FAST process [12] provide explicit processes and methods to support the development of product families rather than single product instances. While the CoRE class model was introduced specifically to minimize the impact of change, the CoRE Guidebook <ref> [10] </ref> discusses this from the perspective of a single product, not a family of products.
Reference: [11] <author> Stuart R. Faulk, Lisa Finneran, James Kirby, Sudhir Shah, and James Sutton. </author> <title> Experience applying the CoRE method to the Lockheed C-130J software requirements. </title> <booktitle> In Ninth Annual Conference on Computer Assurance, </booktitle> <pages> pages 3-8, </pages> <address> Gaithersburg, MD, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: A detailed example of the FGS CoRE specification is discussed in Section 2. Many of the ideas presented above are described in greater detail there. More information can be found in <ref> [8, 10, 11] </ref>. 2 Modes can also be viewed as a summarization of the system's input history since a deterministic system can always be placed in a particular state or mode by repeating a sequence of inputs from the initial mode. 3 If a mode machine only affects a single class,
Reference: [12] <author> Neeraj K. Gupta, Lalita Jategaonkar Jagadeesan, Eleftherious E. Koutsofios, and David M. Weiss. Auditdraw: </author> <title> Generating audits the fast way. </title> <booktitle> In Third International Symposium on Requirements Engineering, </booktitle> <pages> pages 188-197, </pages> <address> Annapolis, MD, </address> <month> January </month> <year> 1997. </year> <title> 28 R Collins W Avionics & Communications </title>
Reference-contexts: Approaches such as the Software Productivity Consortium's Synthesis methodology [24] and Lucent's FAST process <ref> [12] </ref> provide explicit processes and methods to support the development of product families rather than single product instances. While the CoRE class model was introduced specifically to minimize the impact of change, the CoRE Guidebook [10] discusses this from the perspective of a single product, not a family of products.
Reference: [13] <author> D. Harel. Statecharts: </author> <title> A visual formalism for complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8, </volume> <year> 1987. </year>
Reference-contexts: In the FGS example, the mode logic is complex enough that the mode transition rules are given in two complementary forms, a mode transition diagram and a mode transition table. The mode transition diagram consists of a hierarchial state transition diagram similar to Statecharts <ref> [13, 14] </ref>. The transitions on this diagram are labeled with a transition identification number at the source and destination modes of the transition. This same identification number is used to label the detailed description of the transition in the mode transition table. <p> The FGS example can serve as a valuable benchmark example for the evaluation of other methods and tools such as SCR fl [17, 16], RSML [22, 29], Statecharts and StateMate <ref> [13, 14] </ref>, and ROOM [30], and PVS [27]. We plan to restate the FGS specification in many of these approaches in order to compare their effectiveness. We expect that the use of automated tools will uncover several errors not yet detected.
Reference: [14] <author> D. Harel, A. Pnueli, J.P. Schmidt, and R. Sherman. </author> <title> On the formal semantics of statecharts. </title> <booktitle> In 2nd IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 54-64, </pages> <year> 1987. </year>
Reference-contexts: In the FGS example, the mode logic is complex enough that the mode transition rules are given in two complementary forms, a mode transition diagram and a mode transition table. The mode transition diagram consists of a hierarchial state transition diagram similar to Statecharts <ref> [13, 14] </ref>. The transitions on this diagram are labeled with a transition identification number at the source and destination modes of the transition. This same identification number is used to label the detailed description of the transition in the mode transition table. <p> We did not try to develop a formal semantics for our extensions since CoRE itself, while based on a formal model, does not have a formal syntax and semantics. 1 This was partly because we knew there were many subtle problems that would be difficult to resolve <ref> [14, 32] </ref> and partly because we planned to use this example to evaluate several methods and tools, each with their own syntax and semantics. <p> However, CoRE does not provide a precise semantics for such cascading transitions. This can lead to a variety of interpretations as discussed in <ref> [14] </ref>. <p> The FGS example can serve as a valuable benchmark example for the evaluation of other methods and tools such as SCR fl [17, 16], RSML [22, 29], Statecharts and StateMate <ref> [13, 14] </ref>, and ROOM [30], and PVS [27]. We plan to restate the FGS specification in many of these approaches in order to compare their effectiveness. We expect that the use of automated tools will uncover several errors not yet detected.
Reference: [15] <author> Mats P. Heimdahl and Nancy G. Leveson. </author> <title> Completeness and consistency in hierarchial state-based requirements. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(6) </volume> <pages> 363-377, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: The ability to perform consistency and completeness checks has been shown to be a very effective technique for eliminating errors from requirements models in SCR, RSML, and Tablewise <ref> [17, 16, 15, 19] </ref>. The value of automatically generating test cases from a formal requirements model has been conclusively demonstrated in [2]. Formal requirements and design models have been used to generate code in ROOM and Tablewise [30, 19].
Reference: [16] <author> Constance Heitmeyer, Alan Bull, Carolyn Gasarch, and Bruce Labaw. SCR*: </author> <title> A toolset for specifying and analyzing requirements. </title> <booktitle> In Tenth International Conference on Computer Assurance, </booktitle> <pages> pages 109-122, </pages> <address> Gaithersburg, MA, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: Instead, 1 This is in contrast to SCR, which does have a well-defined syntax and semantics <ref> [16, 17] </ref>. 19 October 20, 1997 R Collins W Avionics & Communications we tried to eliminate obvious trouble spots, such as transitions being simultaneously enabled from both a mode and its submode, from our particular example. 3.2 Transition Bus As discussed in Section 2.4.3.2, the problem with depicting the FGS transitions <p> The applicability of CoRE to problem domains with complex graphical interfaces and transformational logic, such as avionics displays, also needs to be explored. The FGS example can serve as a valuable benchmark example for the evaluation of other methods and tools such as SCR fl <ref> [17, 16] </ref>, RSML [22, 29], Statecharts and StateMate [13, 14], and ROOM [30], and PVS [27]. We plan to restate the FGS specification in many of these approaches in order to compare their effectiveness. We expect that the use of automated tools will uncover several errors not yet detected. <p> The full potential of CoRE lies in exploiting the underlying formal model via automated tools. The developers of SCR, RSML, and ROOM have all cited the usefulness of being able to execute and visualize the requirements <ref> [16, 22, 30] </ref>. The ability to perform consistency and completeness checks has been shown to be a very effective technique for eliminating errors from requirements models in SCR, RSML, and Tablewise [17, 16, 15, 19]. <p> The ability to perform consistency and completeness checks has been shown to be a very effective technique for eliminating errors from requirements models in SCR, RSML, and Tablewise <ref> [17, 16, 15, 19] </ref>. The value of automatically generating test cases from a formal requirements model has been conclusively demonstrated in [2]. Formal requirements and design models have been used to generate code in ROOM and Tablewise [30, 19]. <p> Automated tools are being developed to perform safety analysis of RSML specifications [29]. Proofs of specific properties, such as safety, liveness, and timing properties are also possible if the requirements are based on a precise, formal model <ref> [27, 16, 31] </ref>. All of the above illustrate the benefits possible given a formal requirements model. The key decisions to be made next are which methods to commit to, which tools to automate, and how to integrate these capabilities into current practice.
Reference: [17] <author> Constance Heitmeyer, Bruce Labaw, and D. Kiskis. </author> <title> Consistency checking of SCR-style requirements specification. </title> <booktitle> In IEEE International Symposium on Requirements Engineering, </booktitle> <month> March </month> <year> 1995. </year>
Reference-contexts: Instead, 1 This is in contrast to SCR, which does have a well-defined syntax and semantics <ref> [16, 17] </ref>. 19 October 20, 1997 R Collins W Avionics & Communications we tried to eliminate obvious trouble spots, such as transitions being simultaneously enabled from both a mode and its submode, from our particular example. 3.2 Transition Bus As discussed in Section 2.4.3.2, the problem with depicting the FGS transitions <p> In SCR <ref> [17] </ref>, an assumption is made that only one monitored quantity can change at any instance in time. <p> The applicability of CoRE to problem domains with complex graphical interfaces and transformational logic, such as avionics displays, also needs to be explored. The FGS example can serve as a valuable benchmark example for the evaluation of other methods and tools such as SCR fl <ref> [17, 16] </ref>, RSML [22, 29], Statecharts and StateMate [13, 14], and ROOM [30], and PVS [27]. We plan to restate the FGS specification in many of these approaches in order to compare their effectiveness. We expect that the use of automated tools will uncover several errors not yet detected. <p> The ability to perform consistency and completeness checks has been shown to be a very effective technique for eliminating errors from requirements models in SCR, RSML, and Tablewise <ref> [17, 16, 15, 19] </ref>. The value of automatically generating test cases from a formal requirements model has been conclusively demonstrated in [2]. Formal requirements and design models have been used to generate code in ROOM and Tablewise [30, 19].
Reference: [18] <author> K. Heninger. </author> <title> Specifying software requirements for complex systems: New techniques and their applications. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(1):2-12, </volume> <month> January </month> <year> 1980. </year>
Reference-contexts: Since the purpose of the rest of the specification is to define how the system reacts to changes in the monitored variables, these descriptions should reflect only the user's view of the monitored variable and refrain from mentioning how the data is used by the software <ref> [18] </ref>. For numeric variables, the precision with which the variable can be observed is also given. Monitored variables that are not directly referenced by another class have their definitions hidden in the encapsulated section.
Reference: [19] <author> D.N. Hoover and Zewei Chen. Tablewise, </author> <title> a decision table tool. </title> <booktitle> In Tenth International Conference on Computer Assurance, </booktitle> <pages> pages 97-108, </pages> <address> Gaithersburg, MA, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: The ability to perform consistency and completeness checks has been shown to be a very effective technique for eliminating errors from requirements models in SCR, RSML, and Tablewise <ref> [17, 16, 15, 19] </ref>. The value of automatically generating test cases from a formal requirements model has been conclusively demonstrated in [2]. Formal requirements and design models have been used to generate code in ROOM and Tablewise [30, 19]. <p> The value of automatically generating test cases from a formal requirements model has been conclusively demonstrated in [2]. Formal requirements and design models have been used to generate code in ROOM and Tablewise <ref> [30, 19] </ref>. Automated tools are being developed to perform safety analysis of RSML specifications [29]. Proofs of specific properties, such as safety, liveness, and timing properties are also possible if the requirements are based on a precise, formal model [27, 16, 31].
Reference: [20] <author> David Hughes and Michael Dornheim. </author> <title> Automated cockpits: Who's in charge?: Parts I & II. </title> <booktitle> Aviation Week & Space Technology, </booktitle> <month> January 30-February 6, </month> <year> 1995. </year>
Reference-contexts: This problem was chosen precisely because it is a complex problem that is known to be a source of difficulty <ref> [20] </ref>. The example is not a complete specification for an FGS. It covers only the mode control logic. Other parts of an FGS, such as the flight control laws, seem to be well understood and were not included. System failures and error conditions also were not covered.
Reference: [21] <author> Nancy Leveson. Safeware, </author> <title> System Safety and Computers. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference: [22] <author> Nancy G. Leveson, Mats Per Erik Heimdahl, Holly Hildreth, and Jon Damon Reese. </author> <title> Requirements specifications for process-control systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 20(9) </volume> <pages> 684-707, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: To deal with this problem, we extended our model with the notion of a transition bus introduced by Nancy Leveson's group when specifying TCAS II in RSML <ref> [4, 22] </ref>. The transition bus is the dark horizontal line in Figure A.8. <p> We found the use of a transition bus introduced by Nancy Leveson's group when specifying TCAS II in RSML <ref> [4, 22] </ref> essential for drawing the transition diagrams. This simple extension turned a virtually unreadable diagram into a valuable visual aid. Such a capability should probably be included in any graphical transition model intended for use in industrial applications. <p> The applicability of CoRE to problem domains with complex graphical interfaces and transformational logic, such as avionics displays, also needs to be explored. The FGS example can serve as a valuable benchmark example for the evaluation of other methods and tools such as SCR fl [17, 16], RSML <ref> [22, 29] </ref>, Statecharts and StateMate [13, 14], and ROOM [30], and PVS [27]. We plan to restate the FGS specification in many of these approaches in order to compare their effectiveness. We expect that the use of automated tools will uncover several errors not yet detected. <p> The full potential of CoRE lies in exploiting the underlying formal model via automated tools. The developers of SCR, RSML, and ROOM have all cited the usefulness of being able to execute and visualize the requirements <ref> [16, 22, 30] </ref>. The ability to perform consistency and completeness checks has been shown to be a very effective technique for eliminating errors from requirements models in SCR, RSML, and Tablewise [17, 16, 15, 19].
Reference: [23] <author> Robyn R. Lutz. </author> <title> Analyzing software requirements errors in safety-critical, embedded systems. </title> <booktitle> In IEEE International Symposium on Requirements Engineering, </booktitle> <address> San Diego, CA, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: However, additional modes may be introduced if they make significant contributions to the clarity of the specification 1 Studies have found that misunderstanding the hardware interfaces is one of the main sources of safety related software errors <ref> [23] </ref>. 7 October 20, 1997 R Collins W Avionics & Communications or acceptance by the end users. 2 Finally, terms are provide as a notational convenience and aid in structuring a specification. Terms are simply functions of monitored variables, modes, and other terms.
Reference: [24] <author> Rich McCabe. </author> <title> Reuse-driven software processes guidebook. </title> <type> Technical Report SPC-92019-CMC, </type> <institution> Software Productivity Consortium, </institution> <address> 2214 Rock Hill Road, Herndon, VA 22070, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: Approaches such as the Software Productivity Consortium's Synthesis methodology <ref> [24] </ref> and Lucent's FAST process [12] provide explicit processes and methods to support the development of product families rather than single product instances. <p> While the CoRE class model was introduced specifically to minimize the impact of change, the CoRE Guidebook [10] discusses this from the perspective of a single product, not a family of products. SPC's Synthesis method <ref> [24] </ref> does provide guidance for specifying the requirements for a product family, but does make use of the CoRE method. 22 October 20, 1997 R Collins W Avionics & Communications Ideally, one would like to use the CoRE class model to embed the commonalities between members of the product family in
Reference: [25] <author> C.R. Nobe and W.E. Warner. </author> <title> Lessons learned from a trial application of requirements modeling using Statecharts. </title> <booktitle> In 2nd International Conference on Requirements Engineering, </booktitle> <pages> pages 86-93, </pages> <address> Colorado Springs, CO, </address> <month> April </month> <year> 1996. </year>
Reference: [26] <author> U.S. </author> <title> General Accounting Office. Mission critical systems: Defense attempting to address major software challenges, </title> <year> 1992. </year> <month> GAO/IMTEC-93-13. </month>
Reference: [27] <author> Sam Owre, John Rushby, Natarajan Shankar, and Friedrich von Henke. </author> <title> Formal verification for fault-tolerant architectures: Prolegomena to the design of PVS. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(2) </volume> <pages> 107-125, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: The FGS example can serve as a valuable benchmark example for the evaluation of other methods and tools such as SCR fl [17, 16], RSML [22, 29], Statecharts and StateMate [13, 14], and ROOM [30], and PVS <ref> [27] </ref>. We plan to restate the FGS specification in many of these approaches in order to compare their effectiveness. We expect that the use of automated tools will uncover several errors not yet detected. One of the largest areas for future work is the development of tools. <p> Automated tools are being developed to perform safety analysis of RSML specifications [29]. Proofs of specific properties, such as safety, liveness, and timing properties are also possible if the requirements are based on a precise, formal model <ref> [27, 16, 31] </ref>. All of the above illustrate the benefits possible given a formal requirements model. The key decisions to be made next are which methods to commit to, which tools to automate, and how to integrate these capabilities into current practice.
Reference: [28] <author> C.V. Ramamoorthy, A. Prakash, W. Tsai, and Y. Usuda. </author> <title> Software engineering: Problems and perspectives. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 191-209, </pages> <month> October </month> <year> 1984. </year>
Reference: [29] <author> Vivek Ratan, Kurt Partridge, Jon Reese, and Nancy Leveson. </author> <title> Safety analysis tools for requirements specification. </title> <booktitle> In Eleventh Annual Conference on Computer Assurance, </booktitle> <pages> pages 149-160, </pages> <address> Gaithersburg, MD, </address> <month> June </month> <year> 1996. </year> <month> 29 October 20, </month> <title> 1997 R Collins W Avionics & Communications </title>
Reference-contexts: The applicability of CoRE to problem domains with complex graphical interfaces and transformational logic, such as avionics displays, also needs to be explored. The FGS example can serve as a valuable benchmark example for the evaluation of other methods and tools such as SCR fl [17, 16], RSML <ref> [22, 29] </ref>, Statecharts and StateMate [13, 14], and ROOM [30], and PVS [27]. We plan to restate the FGS specification in many of these approaches in order to compare their effectiveness. We expect that the use of automated tools will uncover several errors not yet detected. <p> The value of automatically generating test cases from a formal requirements model has been conclusively demonstrated in [2]. Formal requirements and design models have been used to generate code in ROOM and Tablewise [30, 19]. Automated tools are being developed to perform safety analysis of RSML specifications <ref> [29] </ref>. Proofs of specific properties, such as safety, liveness, and timing properties are also possible if the requirements are based on a precise, formal model [27, 16, 31]. All of the above illustrate the benefits possible given a formal requirements model.
Reference: [30] <author> Bran Selic, Garth Gullekson, and Paul T. Ward. </author> <title> Real-Time Object-Oriented Modeling. </title> <publisher> John Wiley & Sons, Inc., </publisher> <address> New York, NY, </address> <year> 1999. </year>
Reference-contexts: The FGS example can serve as a valuable benchmark example for the evaluation of other methods and tools such as SCR fl [17, 16], RSML [22, 29], Statecharts and StateMate [13, 14], and ROOM <ref> [30] </ref>, and PVS [27]. We plan to restate the FGS specification in many of these approaches in order to compare their effectiveness. We expect that the use of automated tools will uncover several errors not yet detected. One of the largest areas for future work is the development of tools. <p> The full potential of CoRE lies in exploiting the underlying formal model via automated tools. The developers of SCR, RSML, and ROOM have all cited the usefulness of being able to execute and visualize the requirements <ref> [16, 22, 30] </ref>. The ability to perform consistency and completeness checks has been shown to be a very effective technique for eliminating errors from requirements models in SCR, RSML, and Tablewise [17, 16, 15, 19]. <p> The value of automatically generating test cases from a formal requirements model has been conclusively demonstrated in [2]. Formal requirements and design models have been used to generate code in ROOM and Tablewise <ref> [30, 19] </ref>. Automated tools are being developed to perform safety analysis of RSML specifications [29]. Proofs of specific properties, such as safety, liveness, and timing properties are also possible if the requirements are based on a precise, formal model [27, 16, 31].
Reference: [31] <author> Tirumale Sreemani and Joanne M. Atlee. </author> <title> Feasibility of model checking software requirements. </title> <booktitle> In Eleventh Annual Conference on Computer Assurance, </booktitle> <pages> pages 77-88, </pages> <address> Gaithersburg, MD, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Automated tools are being developed to perform safety analysis of RSML specifications [29]. Proofs of specific properties, such as safety, liveness, and timing properties are also possible if the requirements are based on a precise, formal model <ref> [27, 16, 31] </ref>. All of the above illustrate the benefits possible given a formal requirements model. The key decisions to be made next are which methods to commit to, which tools to automate, and how to integrate these capabilities into current practice.
Reference: [32] <author> Michael von der Beeck. </author> <title> A comparison of Statecharts variants. </title> <booktitle> In Third International Symposium on Formal Techniques in Real-Time and Fault-Tolerant Systems, </booktitle> <pages> pages 128-148, </pages> <address> Lubeck, Germany, </address> <month> September </month> <year> 1994. </year> <month> 30 October 20, </month> <title> 1997 R Collins W Avionics & Communications </title>
Reference-contexts: We did not try to develop a formal semantics for our extensions since CoRE itself, while based on a formal model, does not have a formal syntax and semantics. 1 This was partly because we knew there were many subtle problems that would be difficult to resolve <ref> [14, 32] </ref> and partly because we planned to use this example to evaluate several methods and tools, each with their own syntax and semantics.
References-found: 32

