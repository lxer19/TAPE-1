URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/arup/pub/www/papers/ftbm-ieee.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/arup/pub/www/resume.html
Root-URL: 
Title: Measuring Software Dependability by Robustness Benchmarking  
Author: Arup Mukherjee Daniel P. Siewiorek 
Keyword: Index Terms system reliability, software dependability, robustness benchmarking, test suite organization, object-oriented benchmarks, software validation, extensible benchmarks.  
Abstract: Inability to identify weaknesses or to quantify advancements in software system robustness frequently hinders the development of robust software systems. Efforts have been made to develop benchmarks of software robustness to address this problem, but they all suffer from significant shortcomings. This paper presents the various features that are desirable in a benchmark of system robustness, and evaluates some existing benchmarks according to these features. A new hierarchically structured approach to building robustness benchmarks, which overcomes many deficiencies of past efforts, is also presented. This approach has been applied to building a hierarchically structured benchmark that tests part of the Unix file and virtual memory systems. The resultant benchmark has successfully been used to identify new response class stuctures that were not detected in a similar situation by other less organized techniques. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Amaral, C. Jacquemot, R. Lea, </author> <title> Implementing a modular object oriented distributed operating system on top of CHORUS, </title> <booktitle> Proceedings of OpenForum '92, </booktitle> <address> Utrecht, The Netherlands November 1992. </address>
Reference-contexts: Changes in the hierarchy due to oversights in the original design may require significant changes in the benchmark suite. Fortunately, the object-oriented operating systems community has devoted much effort to exploring such hierarchies, and to using them as the basis for operating system implementation (e.g., [8], [3], [12], <ref> [1] </ref>). Although the optimal design of resource hierarchies is still a matter of debate, we believe that further experience will show that it does not present an insurmountable problem for hierarchically structured benchmark suites.
Reference: [2] <author> J. H. Barton, E. W. Czeck, Z. Z. Segall, D. P. Siewiorek, </author> <title> Fault Injection Experiments Using FIAT, </title> <journal> IEEE Transactions on Computers, </journal> <volume> Volume 39, Number 4, </volume> <month> April </month> <year> 1990, </year> <pages> pp. 575-582. </pages>
Reference-contexts: The possible effects of a fault may be classified according to any of several taxonomies, such as those of <ref> [2] </ref>, [4], or [15], which are summarized in Table 1. All of these taxonomies necessitate a means of measuring the effect on processes other than those owned by the benchmark itself.
Reference: [3] <author> R. Campbell, N. Islam, </author> <title> Choices: A Parallel Object-Oriented Operating System, in Research Directions in Concurrent Object-Oriented Programming, </title> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: Note that operating systems of the future are likely to provide object-oriented hierarchical interfaces to their facilities and will thereby eliminate the need to construct the interface library. Recent research prototypes that exemplify this trend include the Spring [8], Choices <ref> [3] </ref> and Chorus [12] operating systems. Note also that although hierarchical interfaces and benchmarks are most easily written in a language that supports object-oriented programming (such as C++), they can also be written in more traditional languages (such as C) with some extra effort on the part of the programmer. <p> Changes in the hierarchy due to oversights in the original design may require significant changes in the benchmark suite. Fortunately, the object-oriented operating systems community has devoted much effort to exploring such hierarchies, and to using them as the basis for operating system implementation (e.g., [8], <ref> [3] </ref>, [12], [1]). Although the optimal design of resource hierarchies is still a matter of debate, we believe that further experience will show that it does not present an insurmountable problem for hierarchically structured benchmark suites.
Reference: [4] <author> F. Cristian, </author> <title> Understanding Fault-Tolerant Distributed Systems, </title> <journal> Communications of the ACM, </journal> <volume> Volume 34, Number 2, </volume> <month> February </month> <year> 1991, </year> <pages> pp. 56-78. </pages>
Reference-contexts: The possible effects of a fault may be classified according to any of several taxonomies, such as those of [2], <ref> [4] </ref>, or [15], which are summarized in Table 1. All of these taxonomies necessitate a means of measuring the effect on processes other than those owned by the benchmark itself.
Reference: [5] <author> H. J. Curnow, B. A. Wichmann, </author> <title> A Synthetic Benchmark, </title> <journal> The Computer Journal, </journal> <volume> Volume 19, Number 1, </volume> <year> 1976, </year> <pages> pp. 4349. </pages>
Reference-contexts: Later, focus shifted to attempts to measure overall system performance in scenarios designed to reflect common uses of the system. The latter approach led first to synthetic benchmarks, such as Whetstone <ref> [5] </ref> and Dhrys- tone [17], and then to applications oriented benchmarks such 1 as the SPEC [14] suite, which measures performance under prototypical workloads built from a collection of real applications.
Reference: [6] <author> C. P. Dingman, J. Marshall, D. P. Siewiorek, </author> <title> Measuring Robustness of a Fault Tolerant Aerospace System, </title> <booktitle> Proceedings of the 25th International Symposium on Fault-Tolerant Computing, </booktitle> <address> Pasadena, CA, </address> <month> June </month> <year> 1995, </year> <pages> pp 522-527. </pages>
Reference-contexts: of Result Class Tested Tests correct unexpected error bad success terminated warm restart cold restart read file 252 175 77 0 0 0 0 write file 252 178 42 24 0 0 0 Table 6: The results of running the read file and write file tests on an ASCM system <ref> [6] </ref>.
Reference: [7] <author> J. Gosling, H. McGilton, </author> <title> The Java(tm) Language Environment: </title> <note> A White Paper, unpublished, http://java.sun.com/ whitePaper/java-whitepaper-1.html </note>
Reference-contexts: In particular, the proliferation of multiplatform object-oriented runtime environments is likely to produce many opportunities for similar robustness evaluation. (In the near future, multiple implementations of the Java <ref> [7] </ref> run- time environment are likely to provide one such arena.) The detailed investigation of such applications remains to be pursued.
Reference: [8] <author> G. Hamilton, P. Kougiouris, </author> <title> The Spring Nucleus: A Microkernel for Objects, </title> <type> Technical Report # TR-93-14, </type> <institution> Sun Microsystems Laboratories, Mountain View, </institution> <address> CA 94043. </address>
Reference-contexts: Note that operating systems of the future are likely to provide object-oriented hierarchical interfaces to their facilities and will thereby eliminate the need to construct the interface library. Recent research prototypes that exemplify this trend include the Spring <ref> [8] </ref>, Choices [3] and Chorus [12] operating systems. <p> Changes in the hierarchy due to oversights in the original design may require significant changes in the benchmark suite. Fortunately, the object-oriented operating systems community has devoted much effort to exploring such hierarchies, and to using them as the basis for operating system implementation (e.g., <ref> [8] </ref>, [3], [12], [1]). Although the optimal design of resource hierarchies is still a matter of debate, we believe that further experience will show that it does not present an insurmountable problem for hierarchically structured benchmark suites.
Reference: [9] <author> G. A. Kanawati, N. A. Kanawati, J. A. Abraham, </author> <note> FERRARI: </note>
Reference-contexts: Differentiation amongst systems should reflect the number of such errors uncovered. In attempting to design a useful benchmark with the most general applicability, several issues must be considered. For example, if a benchmark simulates memory faults via fault injection into the supervisor code of an operating system (as in <ref> [9] </ref> or [10]), it is not likely to be easily portable between operating systems, perhaps not even between operating systems that are very similar from an application's point of view similar operating system interfaces are often backed by very different bodies of code.
References-found: 9

