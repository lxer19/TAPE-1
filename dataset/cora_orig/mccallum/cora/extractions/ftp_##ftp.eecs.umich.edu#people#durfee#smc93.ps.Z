URL: ftp://ftp.eecs.umich.edu/people/durfee/smc93.ps.Z
Refering-URL: http://ai.eecs.umich.edu/people/durfee/vita.html
Root-URL: http://www.cs.umich.edu
Email: kgshing@eecs.umich.edu  
Phone: (313) 763-5363  
Title: CIRCA: A Cooperative Intelligent Real-Time Control Architecture  
Author: David J. Musliner Edmund H. Durfee Kang G. Shin fdjm, durfee, 
Keyword: Index Terms: Real-Time Control; Artificial Intelligence; Reactive Systems; Resource Scheduling; Planning; Cooperation; Intelligent Robotics.  
Note: To appear in IEEE Transactions on Systems, Man, and Cybernetics, vol. 23, no. 6, 1993.  
Address: Ann Arbor, Michigan 48109-2122  
Affiliation: Computer Science and Engineering Division Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: Most research into applying AI techniques to real-time control problems has limited the power of AI methods or embedded "reactivity" in an AI system. We present an alternative, cooperative architecture that uses separate AI and real-time subsystems to address the problems for which each is designed; a structured interface allows the subsystems to communicate without compromising their respective performance goals. By reasoning about its own bounded reactivity, CIRCA can guarantee that it will meet hard deadlines while still using unpredictable AI methods. With its abilities to guarantee or trade off the timeliness, precision, confidence, and completeness of its output, CIRCA provides more flexible performance than previous systems. The work reported in this paper was supported in part by the National Science Foundation under Grants DMC-8721492 and IRI-9158473, by the Office of Naval Research under Grant N00014-91-J-1115, and by a NSF Graduate Fellowship. The opinions, findings, and recommendations expressed in this publication are those of the authors, and do not necessarily reflect the views of the funding agencies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. E. Agre and D. Chapman, "Pengi: </author> <title> An Implementation of a Theory of Activity," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 268-272. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference-contexts: While AI methods are characterized by unpredictable or high-variance performance, real-time control systems require constant, predictable performance. Most research on "real-time AI" focuses either on restricted AI techniques that have predictable performance characteristics [4, 19, 23] or on reactive systems that retain little of the power of traditional AI <ref> [1, 5] </ref>. Several researchers are investigating systems which combine reactive and traditional AI methods [2, 14, 31, 35]. These approaches have concentrated on retaining both reactive and unpredictable mechanisms, but do not address the guarantees required by hard real-time tasks. <p> However, if more than one TAP could be active simultaneously, issues of command fusion and resource access arbitration would complicate the predictability. Reactive architectures which assume numerous parallel behaviors have been developed to address these CIRCA 10 12:28 March 26, 1993 problems <ref> [1, 5, 34] </ref>. 4.5 How CIRCA Meets the Requirements for Real-Time Intelligent Systems Based on an extensive survey of current research and development, Laffey et al. [24] outlined several requirements for real-time intelligent systems. <p> right 70 degrees, plus or minus 30 degrees" might lead to disaster, while a completely different response such as "halt" would be far better [11]. 6.2 Reactive Architectures At the other end of the "processor count" dimension, embedding intelligence in a real-time system leads to reactive architectures such as Pengi <ref> [1] </ref> and the subsumption architecture [5]. Like CIRCA, these systems have separate behaviors which are each responsible for recognizing and reacting to specific input patterns. However, these systems assume that all of their behaviors are running concurrently on separate processors.
Reference: [2] <author> R. C. Arkin, </author> <title> "Integrating Behavioral, Perceptual, and World Knowledge in Reactive Navigation," </title> <booktitle> in Robotics and Autonomous Systems 6, </booktitle> <pages> pp. 105-122, </pages> <year> 1990. </year>
Reference-contexts: Most research on "real-time AI" focuses either on restricted AI techniques that have predictable performance characteristics [4, 19, 23] or on reactive systems that retain little of the power of traditional AI [1, 5]. Several researchers are investigating systems which combine reactive and traditional AI methods <ref> [2, 14, 31, 35] </ref>. These approaches have concentrated on retaining both reactive and unpredictable mechanisms, but do not address the guarantees required by hard real-time tasks. To combine unrestricted AI techniques with the ability to make hard performance guarantees, we propose a Cooperative Intelligent Real-time Control Architecture (CIRCA). <p> Also, the strategic planning and RAP execution subsystems share a global world model; this shared resource could lead to contention problems that would delay the subsystems. CIRCA avoids shared data for this reason, and relies instead on message passing and interrupts. Arkin's Autonomous Robot Architecture (AuRA) <ref> [2] </ref> includes a reactive execution subsystem and a hierarchical planner that determines which reactive "schemas" are active. A world modelling subsystem controls AuRA's stored knowledge, providing an interface that avoids shared-memory assumptions.
Reference: [3] <author> J. E. Arnold, </author> <title> "Experiences with the Subsumption Architecture," </title> <booktitle> in Conf. on Artificial Intelligence Applications, </booktitle> <pages> pp. 93-100, </pages> <year> 1989. </year>
Reference-contexts: For example, the subsumption architecture [5] assigns each reactive element to a separate processor. Such assumptions limit scalability: it would be highly impractical to build a subsumption system to control an oil drilling platform, which can make up to 20,000 signals available to its operators <ref> [3, 24] </ref>. Other systems recognize that processor limitations make realistic control systems subject to the same "bounded rationality" [38] as humans, pushing ideal performance out of reach. To deal with bounded rationality, these systems provide differing levels of guarantees for the four performance dimensions.
Reference: [4] <author> M. Boddy and T. Dean, </author> <title> "Solving Time-Dependent Planning Problems," </title> <booktitle> in Proc. Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 979-984, </pages> <month> August </month> <year> 1989. </year> <month> CIRCA 21 12:28 March 26, </month> <year> 1993 </year>
Reference-contexts: While AI methods are characterized by unpredictable or high-variance performance, real-time control systems require constant, predictable performance. Most research on "real-time AI" focuses either on restricted AI techniques that have predictable performance characteristics <ref> [4, 19, 23] </ref> or on reactive systems that retain little of the power of traditional AI [1, 5]. Several researchers are investigating systems which combine reactive and traditional AI methods [2, 14, 31, 35]. <p> We call methods that halt when they reach a certain threshold along a dimension "any-&lt;dimension&gt;" algorithms. For example, "any-time" algorithms can be terminated at any time, yielding some result, possibly with reduced precision, confidence, or completeness <ref> [4, 7, 19] </ref>. If "any-time" algorithms are interrupted before the deadline for every response, they guarantee timeliness and completeness. Many iterative numerical methods [6] are "any-precision" algorithms that terminate when a result with a certain precision has been achieved. <p> A refinement of the single-processor approach uses iterative improvement algorithms to guarantee that the intelligent system can be interrupted at any time and will still yield a solution, possibly with reduced precision or confidence <ref> [4, 19] </ref>. Such "anytime" algorithms cannot provide 4 Sets of related TAPs can be grouped together into "behaviors" for scheduling efficiency. The follow-hall behavior in Figure 10 includes TAPs to recognize landmarks during a cautious traverse.
Reference: [5] <author> R. A. Brooks, </author> <title> "A Robust Layered Control System for a Mobile Robot," </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> vol. RA-2, no. 1, </volume> <pages> pp. 14-22, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: While AI methods are characterized by unpredictable or high-variance performance, real-time control systems require constant, predictable performance. Most research on "real-time AI" focuses either on restricted AI techniques that have predictable performance characteristics [4, 19, 23] or on reactive systems that retain little of the power of traditional AI <ref> [1, 5] </ref>. Several researchers are investigating systems which combine reactive and traditional AI methods [2, 14, 31, 35]. These approaches have concentrated on retaining both reactive and unpredictable mechanisms, but do not address the guarantees required by hard real-time tasks. <p> An ideal intelligent control system could guarantee that any possible sequence of inputs would elicit optimal responses from the system, within all timing requirements. Some systems strive for this ideal by assuming they have unlimited processing resources. For example, the subsumption architecture <ref> [5] </ref> assigns each reactive element to a separate processor. Such assumptions limit scalability: it would be highly impractical to build a subsumption system to control an oil drilling platform, which can make up to 20,000 signals available to its operators [3, 24]. <p> However, if more than one TAP could be active simultaneously, issues of command fusion and resource access arbitration would complicate the predictability. Reactive architectures which assume numerous parallel behaviors have been developed to address these CIRCA 10 12:28 March 26, 1993 problems <ref> [1, 5, 34] </ref>. 4.5 How CIRCA Meets the Requirements for Real-Time Intelligent Systems Based on an extensive survey of current research and development, Laffey et al. [24] outlined several requirements for real-time intelligent systems. <p> minus 30 degrees" might lead to disaster, while a completely different response such as "halt" would be far better [11]. 6.2 Reactive Architectures At the other end of the "processor count" dimension, embedding intelligence in a real-time system leads to reactive architectures such as Pengi [1] and the subsumption architecture <ref> [5] </ref>. Like CIRCA, these systems have separate behaviors which are each responsible for recognizing and reacting to specific input patterns. However, these systems assume that all of their behaviors are running concurrently on separate processors.
Reference: [6] <author> R. L. Burden and J. D. Faires, </author> <title> Numerical Analysis, </title> <publisher> PWS-KENT Publishing Co., </publisher> <year> 1989. </year>
Reference-contexts: For example, "any-time" algorithms can be terminated at any time, yielding some result, possibly with reduced precision, confidence, or completeness [4, 7, 19]. If "any-time" algorithms are interrupted before the deadline for every response, they guarantee timeliness and completeness. Many iterative numerical methods <ref> [6] </ref> are "any-precision" algorithms that terminate when a result with a certain precision has been achieved. Similarly, algorithms that halt when the confidence in a solution rises above a threshold are examples of "any-confidence" algorithms.
Reference: [7] <author> J.-Y. Chung, J. W. Liu, and K.-J. Lin, </author> <title> "Scheduling Periodic Jobs That Allow Imprecise Results," </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. 39, no. 9, </volume> <pages> pp. 1156-1174, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: We call methods that halt when they reach a certain threshold along a dimension "any-&lt;dimension&gt;" algorithms. For example, "any-time" algorithms can be terminated at any time, yielding some result, possibly with reduced precision, confidence, or completeness <ref> [4, 7, 19] </ref>. If "any-time" algorithms are interrupted before the deadline for every response, they guarantee timeliness and completeness. Many iterative numerical methods [6] are "any-precision" algorithms that terminate when a result with a certain precision has been achieved. <p> The follow-hall behavior in Figure 10 includes TAPs to recognize landmarks during a cautious traverse. CIRCA 18 12:28 March 26, 1993 any performance guarantees, since the degree of response quality reduction is not under the sys-tem's control. The imprecise computation method <ref> [7] </ref> specifies that some minimum amount of computation is performed before the problem-solving can be interrupted, and thus this method could make guarantees about its worst-case performance. However, all of these methods are limited to problems which are suited to iterative improvement algorithms.
Reference: [8] <author> J. Connell and P. Viola, </author> <title> "Cooperative Control of a Semi-Autonomous Mobile Robot," </title> <booktitle> in Proc. IEEE Int'l Conf. on Robotics and Automation, </booktitle> <pages> pp. 1118-1121, </pages> <year> 1990. </year>
Reference-contexts: However, these systems assume that all of their behaviors are running concurrently on separate processors. In addition to the scaling problems discussed earlier, the processor-per-behavior scheme also wastes computing power, since many behaviors need not be active at various times. Other systems <ref> [8, 39] </ref> have made provisions to activate only subsets of behaviors, in much the same way as CIRCA runs different TAP schedules. <p> This eliminates the possibility of recursive subgoaling, providing an immediate reaction once the productions are matched. However, since Soar tries to match all its productions all the time, its growing knowledge base makes bounding 5 Although Connell and Viola <ref> [8] </ref> are on a similar track: they use a human to make the decisions. CIRCA 19 12:28 March 26, 1993 reaction time problematic. Assumptions of complete match parallelism lead to the same scaling difficulties and inefficiency as the reactive architectures discussed above.
Reference: [9] <author> T. Dean and D. McDermott, </author> <title> "Temporal Data Base Management," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 32, no. 1, </volume> <pages> pp. 1-55, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: The AIS uses these mechanisms to reason about the temporal relations between tasks, so that it can focus its attention on the earliest-deadline task during time-pressured situations. Nothing prohibits the integration of truth maintenance systems [10] or more efficient temporal reasoning systems <ref> [9, 22] </ref> into the AIS. Continuous Operation and Fault Tolerance: The architecture uses asynchrony, the TAP interface, and safe sets of states to isolate the predictable RTS (which is continuously reactive) from the unpredictable AIS (which is continuously deliberative).
Reference: [10] <author> J. Doyle, </author> <title> "A Truth Maintenance System," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 12, no. 3, </volume> <pages> pp. 231-272, </pages> <year> 1979. </year>
Reference-contexts: The AIS uses these mechanisms to reason about the temporal relations between tasks, so that it can focus its attention on the earliest-deadline task during time-pressured situations. Nothing prohibits the integration of truth maintenance systems <ref> [10] </ref> or more efficient temporal reasoning systems [9, 22] into the AIS. Continuous Operation and Fault Tolerance: The architecture uses asynchrony, the TAP interface, and safe sets of states to isolate the predictable RTS (which is continuously reactive) from the unpredictable AIS (which is continuously deliberative).
Reference: [11] <author> E. H. Durfee, </author> <title> "A Cooperative Approach to Planning for Real-Time Control," </title> <booktitle> in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 277-283, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: These control problems require systems which can be proven to meet the hard deadlines imposed by the environment. Unfortunately, many AI techniques and heuristics are not suited to analyses that would provide guaranteed response times <ref> [11] </ref>. Even when AI techniques can be shown to have predictable response times, the variance in these response times is typically so large that providing timeliness guarantees based on the worst-case performance would result in severe underutilization of the computational resources during normal operations [33]. <p> We will also consider the types of performance guarantees these systems can provide, and thus how well they address real-time control issues. There are two common approaches to developing intelligent real-time control systems: embedding an AI system within a real-time system, and vice versa <ref> [11] </ref>. 6.1 Embedding Intelligence in a Real-Time System Most researchers strive to embed intelligence within a real-time system, so that the AI mechanisms are required to meet deadlines. <p> For example, when traversing a crowded area, a quick approximation (to an ideal collision avoidance maneuver) such as "turn right 70 degrees, plus or minus 30 degrees" might lead to disaster, while a completely different response such as "halt" would be far better <ref> [11] </ref>. 6.2 Reactive Architectures At the other end of the "processor count" dimension, embedding intelligence in a real-time system leads to reactive architectures such as Pengi [1] and the subsumption architecture [5].
Reference: [12] <author> R. J. Firby, </author> <title> "An Investigation into Reactive Planning in Complex Domains," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 202-206, </pages> <year> 1987. </year>
Reference-contexts: For example, Figure 3 shows an instance of the simple stop-if-object-ahead TAP class used in the hallway-following task. The TEST specifies that the TAP should only be executed if the robot 1 Not to be confused with Firby's RAPs <ref> [12] </ref>, which are larger in scale and do not have predictable execution times. <p> Hanks and Firby [14] are investigating a similar approach, combining a transformational planner [15] with an execution module based on Reactive-Action Packages (RAPs) <ref> [12] </ref>. Their work does not concentrate on providing timeliness, since RAPs are executed by a complex queue manager. Also, the strategic planning and RAP execution subsystems share a global world model; this shared resource could lead to contention problems that would delay the subsystems.
Reference: [13] <author> M. P. Georgeff and F. F. Ingrand, </author> <title> "Decision-Making in an Embedded Reasoning System," </title> <booktitle> in Proc. Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 972-978, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: This section also presents a formal statement of the guarantees that CIRCA can provide. Section 5 describes our prototype implementation, which incorporates an AI subsystem combining features of both the PRS <ref> [13, 20] </ref> and blackboard [32] architectures. The prototype system pilots a Heathkit Hero 2000 robot through the hallways of our building. The robot uses sonar to sense its orientation with respect to the hallway, as well as to sense obstacles and the open/closed status of doorways along its path. <p> The prototype AIS must be able to reason about multiple goals and about multiple methods for achieving those goals, so that it can evaluate tradeoffs of the various performance dimensions based on resource limitations, event probabilities, criticality measures, etc. The prototype inferencing mechanism incorporates features derived from the PRS <ref> [13, 20] </ref> and blackboard architectures [32].
Reference: [14] <author> S. Hanks and R. J. Firby, </author> <title> "Issues and Architectures for Planning and Execution," </title> <booktitle> in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 59-70, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Most research on "real-time AI" focuses either on restricted AI techniques that have predictable performance characteristics [4, 19, 23] or on reactive systems that retain little of the power of traditional AI [1, 5]. Several researchers are investigating systems which combine reactive and traditional AI methods <ref> [2, 14, 31, 35] </ref>. These approaches have concentrated on retaining both reactive and unpredictable mechanisms, but do not address the guarantees required by hard real-time tasks. To combine unrestricted AI techniques with the ability to make hard performance guarantees, we propose a Cooperative Intelligent Real-time Control Architecture (CIRCA). <p> They too are investigating the mechanisms by which a planning system can generate real-time task requirements. However, by restricting the system to a single processor, they exacerbate the complex issues of trading off action and deliberation <ref> [14, 29] </ref>. A refinement of the single-processor approach uses iterative improvement algorithms to guarantee that the intelligent system can be interrupted at any time and will still yield a solution, possibly with reduced precision or confidence [4, 19]. <p> Reactive systems simply run as fast as they can, and thus they are only "coincidently real-time" [24]. Finally, since purely reactive systems lack the ability to learn and to form complex symbolic plans or expectations, they have little of the power we associate with intelligent systems <ref> [14] </ref>. Essentially, all of the inferencing and uncertainty associated with intelligent behavior has been engineered out of these systems. <p> Hanks and Firby <ref> [14] </ref> are investigating a similar approach, combining a transformational planner [15] with an execution module based on Reactive-Action Packages (RAPs) [12]. Their work does not concentrate on providing timeliness, since RAPs are executed by a complex queue manager.
Reference: [15] <author> S. Hanks, </author> <title> "Practical Temporal Projection," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference-contexts: Hanks and Firby [14] are investigating a similar approach, combining a transformational planner <ref> [15] </ref> with an execution module based on Reactive-Action Packages (RAPs) [12]. Their work does not concentrate on providing timeliness, since RAPs are executed by a complex queue manager.
Reference: [16] <author> B. Hayes-Roth, </author> <title> "A Multi-Processor Interrupt-Driven Architecture for Adaptive Intelligent Systems," </title> <type> Technical Report KSL 87-31, </type> <institution> Knowledge Systems Laboratory, Stanford University, </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: We are investigating ways in which the communication interrupt handler can save the state of a KS rather than aborting it <ref> [16] </ref>. Remaining interruptible gives PRS and our AIS the useful ability to perform arbitrarily complex computations within a KS while also attending to ongoing world events.
Reference: [17] <author> B. Hayes-Roth, </author> <title> "Architectural Foundations for Real-Time Performance in Intelligent Agents," </title> <journal> Journal of Real-Time Systems, </journal> <volume> vol. 2, no. 1/2, </volume> <pages> pp. 99-125, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: This not only allows the Scheduler to make guarantees, it also gives the AIS control over the amount of feedback data which the RTS sends to the AIS, allowing a dynamic filtering similar to that used by Guardian <ref> [17] </ref>. In general, the RTS might run on multiple processors, as long as the Scheduler could model its performance correctly. We have presented the RTS and TAP interface for a single processor; the principles of predictable primitives and incremental, scheduled communication would extend in a straightforward manner.
Reference: [18] <author> J. Hendler and A. Agrawala, </author> <title> "Mission Critical Planning: </title> <booktitle> AI on the MARUTI Real-Time Operating System," in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 77-84, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: While these systems achieve the desired isolation of the real-time processes from the AI processes, they do not address the fundamental issue of how the systems interact to provide overall goal-directed performance. Hendler and Agrawala <ref> [18] </ref> are integrating the Dynamic Reaction system and the MARUTI operating system, to implement guaranteed real-time reactive reasoning in a manner very similar to CIRCA's guaranteed TAP schedules. They too are investigating the mechanisms by which a planning system can generate real-time task requirements.
Reference: [19] <author> E. J. Horvitz, </author> <title> "Reasoning About Beliefs and Actions Under Computational Resource Constraints," </title> <booktitle> in Proc. Workshop on Uncertainty in AI, </booktitle> <year> 1987. </year>
Reference-contexts: While AI methods are characterized by unpredictable or high-variance performance, real-time control systems require constant, predictable performance. Most research on "real-time AI" focuses either on restricted AI techniques that have predictable performance characteristics <ref> [4, 19, 23] </ref> or on reactive systems that retain little of the power of traditional AI [1, 5]. Several researchers are investigating systems which combine reactive and traditional AI methods [2, 14, 31, 35]. <p> We call methods that halt when they reach a certain threshold along a dimension "any-&lt;dimension&gt;" algorithms. For example, "any-time" algorithms can be terminated at any time, yielding some result, possibly with reduced precision, confidence, or completeness <ref> [4, 7, 19] </ref>. If "any-time" algorithms are interrupted before the deadline for every response, they guarantee timeliness and completeness. Many iterative numerical methods [6] are "any-precision" algorithms that terminate when a result with a certain precision has been achieved. <p> A refinement of the single-processor approach uses iterative improvement algorithms to guarantee that the intelligent system can be interrupted at any time and will still yield a solution, possibly with reduced precision or confidence <ref> [4, 19] </ref>. Such "anytime" algorithms cannot provide 4 Sets of related TAPs can be grouped together into "behaviors" for scheduling efficiency. The follow-hall behavior in Figure 10 includes TAPs to recognize landmarks during a cautious traverse.
Reference: [20] <author> F. F. Ingrand and M. P. Georgeff, </author> <title> "Managing Deliberation and Reasoning in Real-Time AI Systems," </title> <booktitle> in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 284-291, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: This section also presents a formal statement of the guarantees that CIRCA can provide. Section 5 describes our prototype implementation, which incorporates an AI subsystem combining features of both the PRS <ref> [13, 20] </ref> and blackboard [32] architectures. The prototype system pilots a Heathkit Hero 2000 robot through the hallways of our building. The robot uses sonar to sense its orientation with respect to the hallway, as well as to sense obstacles and the open/closed status of doorways along its path. <p> The prototype AIS must be able to reason about multiple goals and about multiple methods for achieving those goals, so that it can evaluate tradeoffs of the various performance dimensions based on resource limitations, event probabilities, criticality measures, etc. The prototype inferencing mechanism incorporates features derived from the PRS <ref> [13, 20] </ref> and blackboard architectures [32]. <p> Each KS also has a set of routines that are run if the KS is actually "fired," or chosen and executed. The interpreter that chooses the next KS to fire is drawn almost directly from the PRS architecture <ref> [20] </ref>, and bears little resemblance to a blackboard's agenda mechanism. Figure 7 shows the Lisp code for the prototype AIS interpreter. <p> Remaining interruptible gives PRS and our AIS the useful ability to perform arbitrarily complex computations within a KS while also attending to ongoing world events. In particular, Ingrand and Georgeff <ref> [20] </ref> have shown that, given certain reasonable assumptions about event frequency and KS precondition complexity, the prototype AIS will notice every event that generates an interrupt. The prototype AIS has KSs to incrementally form hierarchical plans to navigate through the hallways of our floor.
Reference: [21] <author> L. P. Kaelbling, </author> <title> "An Architecture for Intelligent Reactive Systems," </title> <booktitle> in Proc. Workshop on Reasoning About Actions and Plans, </booktitle> <pages> pp. 395-410. </pages> <publisher> AAAI, </publisher> <year> 1986. </year>
Reference-contexts: Thus the real-time tasks can be guaranteed to meet their deadlines, and the AI task assumes the remaining CPU time (minus context switching overhead). Kaelbling <ref> [21] </ref> presents a similar approach in which the real-time processes are described in REX, a language with provable run-time properties.
Reference: [22] <author> J. A. Koomen, </author> <title> "The TIMELOGIC Temporal Reasoning System," </title> <institution> in University of Rochester Computer Science Department Technical Report 231, </institution> <year> 1989. </year>
Reference-contexts: The AIS uses these mechanisms to reason about the temporal relations between tasks, so that it can focus its attention on the earliest-deadline task during time-pressured situations. Nothing prohibits the integration of truth maintenance systems [10] or more efficient temporal reasoning systems <ref> [9, 22] </ref> into the AIS. Continuous Operation and Fault Tolerance: The architecture uses asynchrony, the TAP interface, and safe sets of states to isolate the predictable RTS (which is continuously reactive) from the unpredictable AIS (which is continuously deliberative).
Reference: [23] <author> R. E. Korf, </author> <title> "Real-Time Search for Dynamic Planning," </title> <booktitle> in Proc. AAAI Spring Symp. on Planning in Uncertain, Unpredictable, or Changing Environments, </booktitle> <year> 1990. </year>
Reference-contexts: While AI methods are characterized by unpredictable or high-variance performance, real-time control systems require constant, predictable performance. Most research on "real-time AI" focuses either on restricted AI techniques that have predictable performance characteristics <ref> [4, 19, 23] </ref> or on reactive systems that retain little of the power of traditional AI [1, 5]. Several researchers are investigating systems which combine reactive and traditional AI methods [2, 14, 31, 35].
Reference: [24] <author> T. J. Laffey, P. A. Cox, J. L. Schmidt, S. M. Kao, and J. Y. </author> <title> Read, "Real-Time Knowledge-Based Systems," </title> <journal> AI Magazine, </journal> <volume> vol. 9, no. 1, </volume> <pages> pp. 27-45, </pages> <address> 1988. CIRCA 22 12:28 March 26, </address> <year> 1993 </year>
Reference-contexts: Since the number of possible domain situations is too large to be fully enumerated, and the consequences of failure are so severe, testing alone is insufficient to guarantee the required real-time performance <ref> [24, 40] </ref>. These control problems require systems which can be proven to meet the hard deadlines imposed by the environment. Unfortunately, many AI techniques and heuristics are not suited to analyses that would provide guaranteed response times [11]. <p> For example, the subsumption architecture [5] assigns each reactive element to a separate processor. Such assumptions limit scalability: it would be highly impractical to build a subsumption system to control an oil drilling platform, which can make up to 20,000 signals available to its operators <ref> [3, 24] </ref>. Other systems recognize that processor limitations make realistic control systems subject to the same "bounded rationality" [38] as humans, pushing ideal performance out of reach. To deal with bounded rationality, these systems provide differing levels of guarantees for the four performance dimensions. <p> Reactive architectures which assume numerous parallel behaviors have been developed to address these CIRCA 10 12:28 March 26, 1993 problems [1, 5, 34]. 4.5 How CIRCA Meets the Requirements for Real-Time Intelligent Systems Based on an extensive survey of current research and development, Laffey et al. <ref> [24] </ref> outlined several requirements for real-time intelligent systems. In this section, we show how CIRCA meets most of these requirements explicitly, and provides a framework within which advanced AI techniques can address the remaining goals. <p> One way to accomplish this is to simplify an AI system's knowledge-base and inference mechanism so that it responds to all inputs within a bounded time <ref> [24, 27] </ref>. Unfortunately, this approach engineers out of the AI system the high-variance unpredictability which distinguishes AI techniques from simple algorithms. In a sense, when a system with these limitations can always solve a problem, that problem is no longer in the realm of AI. <p> CIRCA's resource allocation and scheduling are crucial to the system's flexibility, extensibility and efficiency. And, by explicitly reasoning about time and resources, CIRCA is able to provide guaranteed performance, which reactive systems cannot. Reactive systems simply run as fast as they can, and thus they are only "coincidently real-time" <ref> [24] </ref>. Finally, since purely reactive systems lack the ability to learn and to form complex symbolic plans or expectations, they have little of the power we associate with intelligent systems [14]. Essentially, all of the inferencing and uncertainty associated with intelligent behavior has been engineered out of these systems.
Reference: [25] <author> J. E. Laird, </author> <title> "Integrating Planning and Execution in Soar," </title> <booktitle> in Proc. AAAI Spring Symp. on Planning in Uncertain, Unpredictable, or Changing Environments, </booktitle> <year> 1990. </year>
Reference-contexts: These systems use a set of designated reactions which bypass the normal invocation mechanisms, leading to faster response times. Soar [26], for example, encodes reactive knowledge in the same production form as its other knowledge, with the added feature that reactive operators are fired immediately after they are matched <ref> [25] </ref>. This eliminates the possibility of recursive subgoaling, providing an immediate reaction once the productions are matched. <p> The choice of TAPs also has the effect of focusing the system's attention on features which are deemed important, eliminating the assumption that all changes in the world are detected by the sensor system <ref> [25] </ref>. 6.4 Cooperative Systems CIRCA demonstrates an alternative to the embedded approaches, using separate, concurrent AI and real-time subsystems to cooperatively produce the desired performance. Hanks and Firby [14] are investigating a similar approach, combining a transformational planner [15] with an execution module based on Reactive-Action Packages (RAPs) [12].
Reference: [26] <author> J. E. Laird, A. Newell, and P. S. Rosenbloom, </author> <title> "SOAR: An Architecture for General Intelligence," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 33, </volume> <pages> pp. 1-64, </pages> <year> 1987. </year>
Reference-contexts: These systems use a set of designated reactions which bypass the normal invocation mechanisms, leading to faster response times. Soar <ref> [26] </ref>, for example, encodes reactive knowledge in the same production form as its other knowledge, with the added feature that reactive operators are fired immediately after they are matched [25]. This eliminates the possibility of recursive subgoaling, providing an immediate reaction once the productions are matched.
Reference: [27] <author> J. S. Lark, L. D. Erman, S. Forrest, et al., </author> <title> "Concepts, Methods, and Languages for Building Timely Intelligent Systems," </title> <journal> Journal of Real-Time Systems, </journal> <volume> vol. 2, no. 1/2, </volume> <pages> pp. 127-148, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: One way to accomplish this is to simplify an AI system's knowledge-base and inference mechanism so that it responds to all inputs within a bounded time <ref> [24, 27] </ref>. Unfortunately, this approach engineers out of the AI system the high-variance unpredictability which distinguishes AI techniques from simple algorithms. In a sense, when a system with these limitations can always solve a problem, that problem is no longer in the realm of AI.
Reference: [28] <author> V. R. Lesser, J. Pavlin, and E. Durfee, </author> <title> "Approximate Processing in Real-Time Problem Solving," </title> <journal> AI Magazine, </journal> <volume> vol. 9, no. 1, </volume> <pages> pp. 49-61, </pages> <year> 1988. </year>
Reference-contexts: Section 6 presents a more detailed comparison to related work, and Section 7 concludes with a brief discussion of future research directions. 2 Performance Tradeoffs and Bounded Reactivity The responses of an intelligent control system can be rated along four dimensions: completeness, precision, confidence, and timeliness <ref> [28] </ref>. Completeness means that responses are produced for all possible inputs; timeliness means that the responses are produced before any associated deadlines. Precision and confidence together determine the "quality" of a solution, or how accurate the output is, to the best of the system's knowledge.
Reference: [29] <author> R. Levinson, </author> <title> "Autonomous Prediction and Reaction with Dynamic Deadlines," </title> <booktitle> in Proc. AAAI Spring Symp. on Planning in Uncertain, Unpredictable, or Changing Environments, </booktitle> <year> 1990. </year>
Reference-contexts: They too are investigating the mechanisms by which a planning system can generate real-time task requirements. However, by restricting the system to a single processor, they exacerbate the complex issues of trading off action and deliberation <ref> [14, 29] </ref>. A refinement of the single-processor approach uses iterative improvement algorithms to guarantee that the intelligent system can be interrupted at any time and will still yield a solution, possibly with reduced precision or confidence [4, 19].
Reference: [30] <author> C. L. Liu and J. W. Layland, </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard Real-Time Environment," </title> <journal> Journal of the ACM, </journal> <volume> vol. 20, no. 1, </volume> <pages> pp. 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: A more sophisticated Scheduler would be able to take into account such dependencies and produce more efficient schedules. By assuming TAP independence and TAP atomicity, the prototype Scheduler can use a simplified deadline-driven scheduling algorithm <ref> [30] </ref> to optimally derive a TAP schedule. This algorithm specifies that, each time the system can choose which TAP to run, it should run the available TAP with the closest deadline. <p> The maximum possible loop size is equal to the least common multiple of the TAP MAX-PERIODs. Note that we can relax the atomicity requirements, and allow TAP preemption, without losing the ability to build a provably optimal schedule. Deadline-driven scheduling has been shown to be optimal for such problems <ref> [30] </ref>, but the short execution time of current TAPs does not warrant the cost of adding preemption mechanisms to the RTS.
Reference: [31] <author> D. P. Miller and E. Gat, </author> <title> "Exploiting Known Topologies to Navigate with Low-Computation Sensing," </title> <booktitle> in Proc. SPIE Sensor Fusion Conf., </booktitle> <month> November </month> <year> 1990. </year>
Reference-contexts: Most research on "real-time AI" focuses either on restricted AI techniques that have predictable performance characteristics [4, 19, 23] or on reactive systems that retain little of the power of traditional AI [1, 5]. Several researchers are investigating systems which combine reactive and traditional AI methods <ref> [2, 14, 31, 35] </ref>. These approaches have concentrated on retaining both reactive and unpredictable mechanisms, but do not address the guarantees required by hard real-time tasks. To combine unrestricted AI techniques with the ability to make hard performance guarantees, we propose a Cooperative Intelligent Real-time Control Architecture (CIRCA). <p> This corresponds directly to CIRCA's reasoning about TAP parameters. However, although sensing monitors are under the control of a central AI system, the reactive elements of TCA which attempt to keep the system safe are outside the system's control [36]. Miller and Gat have developed the three-layer ATLANTIS system <ref> [31] </ref>, in which the bottom layer provides a subsumption-like reactive controller and the top layer is a deliberative planner and world modeller. In between, the sequencing layer turns on and off sets of reactive behaviors, much as CIRCA runs different TAP schedules.
Reference: [32] <author> P. Nii, </author> <title> "The Blackboard Model of Problem Solving," </title> <journal> AI Magazine, </journal> <volume> vol. VII, no. 2, </volume> <pages> pp. 38-53, </pages> <month> Summer </month> <year> 1986. </year>
Reference-contexts: This section also presents a formal statement of the guarantees that CIRCA can provide. Section 5 describes our prototype implementation, which incorporates an AI subsystem combining features of both the PRS [13, 20] and blackboard <ref> [32] </ref> architectures. The prototype system pilots a Heathkit Hero 2000 robot through the hallways of our building. The robot uses sonar to sense its orientation with respect to the hallway, as well as to sense obstacles and the open/closed status of doorways along its path. <p> The prototype inferencing mechanism incorporates features derived from the PRS [13, 20] and blackboard architectures <ref> [32] </ref>.
Reference: [33] <author> C. J. Paul, A. Acharya, B. Black, and J. K. Strosnider, </author> <title> "Reducing Problem-Solving Variance to Improve Predictability," </title> <journal> Communications of the ACM, </journal> <volume> vol. 34, no. 8, </volume> <pages> pp. 81-93, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Even when AI techniques can be shown to have predictable response times, the variance in these response times is typically so large that providing timeliness guarantees based on the worst-case performance would result in severe underutilization of the computational resources during normal operations <ref> [33] </ref>. Thus we perceive an apparent conflict between the nature of AI and the needs of real-world, real-time control systems. While AI methods are characterized by unpredictable or high-variance performance, real-time control systems require constant, predictable performance. <p> Another approach to embedding intelligence in a real-time system assumes that the system runs on a single processor which must satisfy both the bounded real-time tasks and the uncertain AI tasks. Paul et al. <ref> [33] </ref> deal with this problem by encapsulating high-variance AI tasks within a server process that is scheduled to run around the real-time tasks. Thus the real-time tasks can be guaranteed to meet their deadlines, and the AI task assumes the remaining CPU time (minus context switching overhead).
Reference: [34] <author> D. W. Payton, </author> <title> "An Architecture for Reflexive Autonomous Vehicle Control," </title> <booktitle> in Proc. IEEE Int'l Conf. on Robotics and Automation, </booktitle> <volume> volume 3, </volume> <pages> pp. 1838-1845, </pages> <year> 1986. </year>
Reference-contexts: However, if more than one TAP could be active simultaneously, issues of command fusion and resource access arbitration would complicate the predictability. Reactive architectures which assume numerous parallel behaviors have been developed to address these CIRCA 10 12:28 March 26, 1993 problems <ref> [1, 5, 34] </ref>. 4.5 How CIRCA Meets the Requirements for Real-Time Intelligent Systems Based on an extensive survey of current research and development, Laffey et al. [24] outlined several requirements for real-time intelligent systems.
Reference: [35] <author> R. Simmons, </author> <title> "An Architecture for Coordinating Planning, Sensing, and Action," </title> <booktitle> in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 292-297, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Most research on "real-time AI" focuses either on restricted AI techniques that have predictable performance characteristics [4, 19, 23] or on reactive systems that retain little of the power of traditional AI [1, 5]. Several researchers are investigating systems which combine reactive and traditional AI methods <ref> [2, 14, 31, 35] </ref>. These approaches have concentrated on retaining both reactive and unpredictable mechanisms, but do not address the guarantees required by hard real-time tasks. To combine unrestricted AI techniques with the ability to make hard performance guarantees, we propose a Cooperative Intelligent Real-time Control Architecture (CIRCA). <p> CIRCA's AIS and Scheduler can provide similar functionality by monitoring the RTS, as mentioned in Section 4.5. AuRA does not address the timeliness or resource restrictions that are the focus of our architecture. Simmons' Task Control Architecture (TCA) also combines reactive and planning systems <ref> [35, 37] </ref>. Although TCA does not provide execution-time guarantees, it does reason about its limited sensor capabilities, and is intended to derive sensing parameters (such as frequency) from a causal explanation of the sensing behavior and environment. This corresponds directly to CIRCA's reasoning about TAP parameters.
Reference: [36] <author> R. Simmons, </author> <title> "Robust Behavior with Limited Resources," </title> <booktitle> in Proc. AAAI Spring Symp. on Planning in Uncertain, Unpredictable, or Changing Environments, </booktitle> <year> 1990. </year>
Reference-contexts: This corresponds directly to CIRCA's reasoning about TAP parameters. However, although sensing monitors are under the control of a central AI system, the reactive elements of TCA which attempt to keep the system safe are outside the system's control <ref> [36] </ref>. Miller and Gat have developed the three-layer ATLANTIS system [31], in which the bottom layer provides a subsumption-like reactive controller and the top layer is a deliberative planner and world modeller.
Reference: [37] <author> R. Simmons, </author> <title> "Coordinating Planning, Perception, and Action for Mobile Robots," </title> <booktitle> in AAAI Spring Symposium, </booktitle> <year> 1991. </year>
Reference-contexts: CIRCA's AIS and Scheduler can provide similar functionality by monitoring the RTS, as mentioned in Section 4.5. AuRA does not address the timeliness or resource restrictions that are the focus of our architecture. Simmons' Task Control Architecture (TCA) also combines reactive and planning systems <ref> [35, 37] </ref>. Although TCA does not provide execution-time guarantees, it does reason about its limited sensor capabilities, and is intended to derive sensing parameters (such as frequency) from a causal explanation of the sensing behavior and environment. This corresponds directly to CIRCA's reasoning about TAP parameters.
Reference: [38] <author> H. A. Simon, </author> <title> Models of Bounded Rationality, </title> <editor> M. I. T. </editor> <publisher> Press, </publisher> <year> 1982. </year>
Reference-contexts: Such assumptions limit scalability: it would be highly impractical to build a subsumption system to control an oil drilling platform, which can make up to 20,000 signals available to its operators [3, 24]. Other systems recognize that processor limitations make realistic control systems subject to the same "bounded rationality" <ref> [38] </ref> as humans, pushing ideal performance out of reach. To deal with bounded rationality, these systems provide differing levels of guarantees for the four performance dimensions. The guarantees that a system provides are often defined by the conditions that determine when its control algorithm returns a result.
Reference: [39] <author> M. H. Soldo, </author> <title> "Reactive and Preplanned Control in a Mobile Robot," </title> <booktitle> in Proc. IEEE Int'l Conf. on Robotics and Automation, </booktitle> <pages> pp. 1128-1132, </pages> <year> 1990. </year>
Reference-contexts: However, these systems assume that all of their behaviors are running concurrently on separate processors. In addition to the scaling problems discussed earlier, the processor-per-behavior scheme also wastes computing power, since many behaviors need not be active at various times. Other systems <ref> [8, 39] </ref> have made provisions to activate only subsets of behaviors, in much the same way as CIRCA runs different TAP schedules.
Reference: [40] <author> J. A. Stankovic, </author> <title> "Misconceptions about Real-Time Computing: A Serious Problem for Next-Generation Systems," </title> <journal> IEEE Computer, </journal> <volume> vol. 21, no. 10, </volume> <pages> pp. 10-19, </pages> <month> October </month> <year> 1988. </year> <month> CIRCA 23 12:28 March 26, </month> <year> 1993 </year>
Reference-contexts: Since the number of possible domain situations is too large to be fully enumerated, and the consequences of failure are so severe, testing alone is insufficient to guarantee the required real-time performance <ref> [24, 40] </ref>. These control problems require systems which can be proven to meet the hard deadlines imposed by the environment. Unfortunately, many AI techniques and heuristics are not suited to analyses that would provide guaranteed response times [11].
References-found: 40

