URL: ftp://ftp.eecs.umich.edu/groups/gasm/lintime.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.cs.umich.edu
Title: The Linear Time Hierarchy Theorems for  
Date: 2  
Note: Yuri Gurevich  
Abstract: State Machines and RAMs Abstract: We prove the Linear Time Hierarchy Theorems for random access machines and Gurevich abstract state machines. One long-term goal of this line or research is to prove lower bounds for natural linear time problems. 
Abstract-found: 1
Intro-found: 1
Reference: [Aho, Hopcroft and Ullman 74] <author> Alfred V. Aho, John E. Hopcroft and Jeffrey D. Ull-man, </author> <title> "The Design and Analysis of Computer Algorithms", </title> <publisher> Addison-Wesley, </publisher> <year> 1974. </year>
Reference-contexts: As for abstract state machines, the existence of such a diagonalizing RAM implies a linear time hierarchy theorem. There are numerous RAM models in the literature. We generally follow <ref> [Aho, Hopcroft and Ullman 74] </ref>, but for simplicity we avoid tapes by using registers not only for computation but also for input and output. Also, we adopt the convention that the content of a register must be a non-negative integer.
Reference: [Boerger 95] <author> Egon Borger, </author> <title> "Annotated Bibliography on Evolving Algebras," in "Specification and Validation Methods", </title> <editor> ed. E. Borger, </editor> <publisher> Oxford University Press, </publisher> <year> 1995, </year> <pages> 37-51. </pages>
Reference-contexts: One can easily define a kind of ASMs equivalent to Addition RAMs, Addition and Multiplication RAMs, etc. According to the ASM thesis, any algorithm can be closely simulated, on its natural abstraction level, by an appropriate ASM [Gurevich 91]. The thesis has been confirmed in numerous applications <ref> [Boerger 95, dell Castillo 97, Huggins 97] </ref>. The ASM model offers an abstract parametrized version of linear time. Tell us 1 Partially supported by NSF grant DMS-9505118. Mathematics Department, Uni versity of Michigan, Ann Arbor, MI 48109-1109, ablass@umich.edu 2 Partially supported by NSF and ONR.
Reference: [Blass and Gurevich 94] <author> Andreas Blass and Yuri Gurevich, </author> <title> "Evolving Algebras and Linear Time Hierarchy", </title> <booktitle> in "IFIP 1994 World Computer Congress, Volume I: Technology and Foundations", </booktitle> <editor> eds. B. Pehrson and I. Simon, </editor> <publisher> North-Holland, Amsterdam, </publisher> <pages> 383-390. </pages>
Reference-contexts: In the case of RAMs, the diagonalizing predator lock-step simulates a given prey without preprocessing. A recognition of hang states can be easily achieved as well. The results of this paper have been announced in <ref> [Blass and Gurevich 94] </ref>. 248 Blass A., Gurevich Y.: The Linear Time Hierarchy Theorems for Abstract State ... 2 Preliminaries 2.1 Provisos In this paper, we consider a restricted class of algorithms satisfying the following conditions.
Reference: [Blass and Gurevich 97] <author> Andreas Blass and Yuri Gurevich, </author> <title> "The Linear Time Hierarchy Theorem for Reactive Abstract State Machines", </title> <note> in preparation. </note>
Reference-contexts: We presume, however, that there are no external functions and thus the ASMs do not interact with the environment. Elsewhere, we intend to generalize the linear time hierachy theorem to reactive ASMs <ref> [Blass and Gurevich 97] </ref>. We presume also that initial states do not have any predefined static non-logic universes and functions. But incorporating static universes and functions is relatively easy; we explain the necessary changes. The paper is organized as follows. Section 2: Preliminaries. <p> It is possible to achieve a simulation without preprocessing and with hang-state recognition but the proof is much harder and is not needed for proving the ASM linear time hierarchy theorem. We intend to give the proof in <ref> [Blass and Gurevich 97] </ref> where these improvements are needed. Section 6: Diagonalization Program. We interleave the rules of the diagonal-ization program with explanations. Section 7: ASM Linear Time Hierarchy Theorem. We prove the hierarchy theorem and give some comments. <p> Preprocessing and Disabling-State Recognition Timed Diag simulates its prey with preprocessing and without disabling state recognition. That suffices for the Linear Time Hierarchy Theorem. It is possible to get rid of preprocessing and achieve disabling-state recognition, but this is not trivial. We will do that improvement elsewhere <ref> [Blass and Gurevich 97] </ref> where we will be able to take advantage of these features. Static Functions One may want to have initial states with universes and various static functions.
Reference: [dell Castillo 97] <author> Giuseppe del Castillo, </author> <title> editor, Abstract State Machines, </title> <institution> Paderborn Home Page, </institution> <note> http://www.uni-paderborn.de/cs/asm.html. </note>
Reference-contexts: One can easily define a kind of ASMs equivalent to Addition RAMs, Addition and Multiplication RAMs, etc. According to the ASM thesis, any algorithm can be closely simulated, on its natural abstraction level, by an appropriate ASM [Gurevich 91]. The thesis has been confirmed in numerous applications <ref> [Boerger 95, dell Castillo 97, Huggins 97] </ref>. The ASM model offers an abstract parametrized version of linear time. Tell us 1 Partially supported by NSF grant DMS-9505118. Mathematics Department, Uni versity of Michigan, Ann Arbor, MI 48109-1109, ablass@umich.edu 2 Partially supported by NSF and ONR.
Reference: [Dexter, Doyle and Gurevich 97] <author> Scott Dexter, Patrick Doyle and Yuri Gurevich, </author> <title> "Gurevich Abstract State Machines and Schonhage Storage Modification Machines", </title> <journal> J. of Universal Computer Science, </journal> <note> this issue. </note>
Reference-contexts: These machines are also known as Gurevich (abstract state) machines or evolving algebras. Unary ASMs (using no basic functions of arity 2) with limited interaction with the outside world are equivalent to the storage modification machines of Schonhage <ref> [Dexter, Doyle and Gurevich 97] </ref>. One can easily define a kind of ASMs equivalent to Addition RAMs, Addition and Multiplication RAMs, etc. According to the ASM thesis, any algorithm can be closely simulated, on its natural abstraction level, by an appropriate ASM [Gurevich 91]. <p> Moreover, there is a polynomial time algorithm that transforms any given program to a normal form program. The proof, found in <ref> [Dexter, Doyle and Gurevich 97] </ref>, consists essentially of three steps. First, rename variables so that no two imports (that is, occurrences of the import command) use the same variable. Second, move all imports to the beginning of the program and all endimports to the end.
Reference: [Gurevich 91] <author> Yuri Gurevich, </author> <title> "Evolving Algebras: An Attempt to Discover Semantics", </title> <booktitle> in "Current Trends in Theoretical Computer Science", </booktitle> <editor> Eds. G. Rozenberg and A. Salomaa, </editor> <publisher> World Scientific, </publisher> <year> 1993, </year> <pages> 266-292. </pages> <note> Originally published in the Bulletin of European Association for Theoretical Computer Science 43 (1991), 264-284. </note>
Reference-contexts: Contrary to polynomial time, linear time is not a robust notion. Successor RAMs, RAMs with addition, RAMs with addition and multiplication, etc. all give different versions of linear time. The most versatile machine model we know is the abstract state machine (ASM) model <ref> [Gurevich 91, Gurevich 95] </ref>. These machines are also known as Gurevich (abstract state) machines or evolving algebras. Unary ASMs (using no basic functions of arity 2) with limited interaction with the outside world are equivalent to the storage modification machines of Schonhage [Dexter, Doyle and Gurevich 97]. <p> One can easily define a kind of ASMs equivalent to Addition RAMs, Addition and Multiplication RAMs, etc. According to the ASM thesis, any algorithm can be closely simulated, on its natural abstraction level, by an appropriate ASM <ref> [Gurevich 91] </ref>. The thesis has been confirmed in numerous applications [Boerger 95, dell Castillo 97, Huggins 97]. The ASM model offers an abstract parametrized version of linear time. Tell us 1 Partially supported by NSF grant DMS-9505118. <p> Section 2: Preliminaries. A particular notion of lock-step simulation is introduced. Roughly speaking, a simulation of one algorithm by another is lock-step 3 if the simulating algorithm (the "predator") makes only a bounded number of steps to simulate one step of the simulated algorithm (the "prey") <ref> [Gurevich 91] </ref>. The term "lock-step" replaces the term "real time" used by Michael Rabin and others in 1960s; the reason is that the term "real time" has a different meaning now. The notions of equivalence mentioned above utilize lock-step simulations. Section 3: Abstract State Machines.
Reference: [Gurevich 95] <author> Yuri Gurevich, </author> <title> "Evolving Algebras 1993: Lipari Guide", in "Specification and Validation Methods", </title> <editor> Ed. E. Borger, </editor> <publisher> Oxford University Press, </publisher> <year> 1995, </year> <pages> 9-36. </pages>
Reference-contexts: Contrary to polynomial time, linear time is not a robust notion. Successor RAMs, RAMs with addition, RAMs with addition and multiplication, etc. all give different versions of linear time. The most versatile machine model we know is the abstract state machine (ASM) model <ref> [Gurevich 91, Gurevich 95] </ref>. These machines are also known as Gurevich (abstract state) machines or evolving algebras. Unary ASMs (using no basic functions of arity 2) with limited interaction with the outside world are equivalent to the storage modification machines of Schonhage [Dexter, Doyle and Gurevich 97]. <p> The smallest appropriate c is the lag factor of the simulation. 2 3 Abstract State Machines For the reader's convenience, we recall here Gurevich abstract state machines (ASMs) also known as evolving algebras. More details can be found in <ref> [Gurevich 95] </ref>. ASM experts can skip most of this section; read only about the normal form at the end of the section. 3.1 States and Updates Vocabularies and Terms As usual in logic, a vocabulary is a finite collection of relation and function names of fixed arities. <p> Every other function evaluates to undef if at least one of the arguments is in the reserve. (This simpler semantical definition of the reserve differs inessentially from the more syntactical definition in <ref> [Gurevich 95] </ref>.) In this paper, non-reserve elements different from true, false, undef will be called regular. It is often convenient to think about a state A as a map from locations to contents.
Reference: [Huggins 97] <author> James K. Huggins, </author> <title> editor, Abstract State Machines, </title> <institution> Michigan Home Page, </institution> <note> http://www.eecs.umich.edu/gasm. </note>
Reference-contexts: One can easily define a kind of ASMs equivalent to Addition RAMs, Addition and Multiplication RAMs, etc. According to the ASM thesis, any algorithm can be closely simulated, on its natural abstraction level, by an appropriate ASM [Gurevich 91]. The thesis has been confirmed in numerous applications <ref> [Boerger 95, dell Castillo 97, Huggins 97] </ref>. The ASM model offers an abstract parametrized version of linear time. Tell us 1 Partially supported by NSF grant DMS-9505118. Mathematics Department, Uni versity of Michigan, Ann Arbor, MI 48109-1109, ablass@umich.edu 2 Partially supported by NSF and ONR.
Reference: [Jones 93] <author> Neil D. Jones, </author> <title> "Constant Time Factors Do Matter", </title> <booktitle> ACM Symp. on Theory of Computing, </booktitle> <year> 1993, </year> <pages> 602-611. </pages>
Reference-contexts: 1 Introduction In <ref> [Jones 93] </ref>, Neil Jones exhibited a computation model where the linear speedup theorem fails and, instead, a linear time hierarchy theorem holds: There exists a positive constant c such that, for every positive d, Time (cdn)Time (dn) 6= ;. In fact, Jones exhibited several computation models of that kind.
Reference: [Schoenhage 80] <author> Arnold Schonhage, </author> <title> "Storage modification machines", </title> <journal> SIAM J. Computing, </journal> <note> 9 (1980), 490-508. </note> <author> 278 Blass A., Gurevich Y.: </author> <title> The Linear Time Hierarchy Theorems for Abstract State </title> ... 
Reference-contexts: The models described in detail in Jones's paper were particularly designed for the linear time hierarchy theorem, but he mentioned that the linear time hierarchy theorem also holds for Schonhage's storage modification machines <ref> [Schoenhage 80] </ref>. In an appropriate sense, storage modification machines are equivalent to random access machine whose only arithmetical operation is successor (Successor RAMs) [Schoenhage 80]. In general, even the Successor RAM model is too restrictive for many applications, e.g., computational geometry. <p> Jones's paper were particularly designed for the linear time hierarchy theorem, but he mentioned that the linear time hierarchy theorem also holds for Schonhage's storage modification machines <ref> [Schoenhage 80] </ref>. In an appropriate sense, storage modification machines are equivalent to random access machine whose only arithmetical operation is successor (Successor RAMs) [Schoenhage 80]. In general, even the Successor RAM model is too restrictive for many applications, e.g., computational geometry. One result of this paper is the Linear Time Hierarchy Theorem for random access machines with the usual arithmetical operations; see Section 9.
References-found: 11

