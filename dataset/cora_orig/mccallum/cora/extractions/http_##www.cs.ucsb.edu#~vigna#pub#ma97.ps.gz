URL: http://www.cs.ucsb.edu/~vigna/pub/ma97.ps.gz
Refering-URL: http://www.cs.ucsb.edu/~vigna/listpub.html
Root-URL: http://www.cs.ucsb.edu
Email: [ghezzi vigna]@elet.polimi.it.  
Title: Mobile Code Paradigms and Technologies: A Case Study  
Author: Carlo Ghezzi and Giovanni Vigna 
Keyword: mobile code, design paradigms, case study  
Address: P.za L. Da Vinci 23, 20100 Milano, Italy  
Affiliation: Dip. Elettronica e Informazione, Politecnico di Milano  
Abstract: The opportunities offered by the Internet are encouraging research aimed at the creation of a computational infrastructure that exploits the wide spread communication infrastructure. The mobile computation paradigm is a proposal to build a computational infrastructure that goes beyond the well-known client-server paradigm and increases dynamicity and flexibility. Despite the promising first steps, there is still confusion on the role of paradigms and technology in the development on applications based on the mobile computation paradigm. We present a case study in which we develop several versions of an application using different paradigms and different technologies in order to show when these concepts come into play and which are their relationships. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <editor> J. Baumann, C. Tschudin, and J. Vitek, editors. </editor> <booktitle> Proceedings of the 2 nd ECOOP Workshop on Mobile Objects ("Agents on the Move"), </booktitle> <year> 1996. </year>
Reference-contexts: To consolidate the explosion of network-centric applications, we believe that research is needed both at the level of enabling technologies and at the level of design paradigms. In fact, in order to fill this gap, the concept of mobile computations has become the focus of much recent research <ref> [1] </ref>. In this framework, the computational infrastructure is composed of a (possibly world-wide) distributed environment with several computational environments (CEs) that support the computations of executing units (EUs). Such EUs may change their computational environment and even the code they execute dynamically.
Reference: 2. <author> A. D. Birrell and B. J. Nelson. </author> <title> Implementing remote procedure calls. </title> <type> Technical Report CSL-83-7, </type> <institution> XEROX, </institution> <month> October </month> <year> 1983. </year>
Reference-contexts: Given a particular paradigm, which technology should be used? We identify three classes of technologies [7]: Message-based These technologies enable the communication between remote EUs in the form of message exchange. A typical example is RPC <ref> [2] </ref>. Weakly mobile These technologies provide mechanisms that enable an EU to send code to be executed in a remote CE together with some initialization data or to bind dynamically code downloaded from a remote EU.
Reference: 3. <author> L. Cardelli. Obliq: </author> <title> A language with distributed scope. </title> <type> Technical report, </type> <institution> Digital Equipment Corporation, Systems Research Center, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: Examples of such technologies are the rsh facility in UNIX, languages like M0 [14] and Obliq <ref> [3] </ref>, or systems like TACOMA [9] and Mole [13]. Strongly mobile These technologies enable EUs to move with their code and execution state to a different CE. An example is represented by the Telescript technology. We implemented the different architectures of our application using different types of technologies. <p> Strongly mobile These technologies enable EUs to move with their code and execution state to a different CE. An example is represented by the Telescript technology. We implemented the different architectures of our application using different types of technologies. We chose Tcl-DP [12], Obliq <ref> [3] </ref>, and Agent Tcl [8]. Tcl-DP is an extension of the Tcl language [11] for distributed programming. Tcl-DP provides support for TCP/IP and RPC programming. It is a message-based technology. Obliq is an untyped, object-based, lexically scoped, interpreted language. It supports remote method invocation and remote evaluation of code.
Reference: 4. <author> A. Carzaniga, G. P. Picco, and G. Vigna. </author> <title> Designing Distributed Applications using Mobile Code Paradigms. </title> <booktitle> In Proceedings of the 1997 International Conference on Software Engineering, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: The software architecture designed according to the selected design paradigm should then be mapped onto an implementation using the technology (languages and their support tools) that best fit the chosen paradigm. Unfortunately, the distinction between paradigms <ref> [4] </ref> and technologies [5] is often blurred and not well understood. The focus of our work is exactly on understanding the conceptual foundations of mobile computations, trying to identify the specific issues that characterize mobile code applications at all stages of their development process. <p> Such applications are highly dynamic from the point of view of both code and location and therefore it is necessary to take into account these concepts at the design level. We identified three main paradigms for mobile computations: Remote Evaluation (REV), Code on Demand (COD), and Mobile Agent (MA) <ref> [4] </ref>. Although we don't claim that such paradigms cover all possible design structuring styles for network-centric applications, they can be viewed as the most typical representatives.
Reference: 5. <author> G. Cugola, C. Ghezzi, G.P. Picco, and G. Vigna. </author> <title> Analyzing Mobile Code Languages. In Special Issue on Mobile Object Systems, </title> <publisher> LNCS. Springer-Verlag, </publisher> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: The software architecture designed according to the selected design paradigm should then be mapped onto an implementation using the technology (languages and their support tools) that best fit the chosen paradigm. Unfortunately, the distinction between paradigms [4] and technologies <ref> [5] </ref> is often blurred and not well understood. The focus of our work is exactly on understanding the conceptual foundations of mobile computations, trying to identify the specific issues that characterize mobile code applications at all stages of their development process.
Reference: 6. <author> T. Dovera and R. Nespoli. Paradigmi e tecnologie per lo sviluppo di applicazioni basate su codice mobile. </author> <type> Master's thesis, </type> <institution> Politecnico di Milano, </institution> <year> 1996. </year>
Reference-contexts: Further work is needed to fully understand the effect of the new computational infrastructure provided by the network on the entire lifecycle of MCAs. Acknowledgments A preliminary treatment of the issues discussed in this paper can be found in <ref> [6] </ref>. We wish to thank Tullio Dovera and Roberto Nespoli for implementing most of the experiments illustrated here. The previous work about classification of mobile code languages and paradigms was carried out with G. Cugola, A. Carzaniga, G. P. Picco, and A. Fuggetta.
Reference: 7. <author> C. Ghezzi, G. Cugola, G. P. Picco, and G. Vigna. </author> <title> A Characterization of Mobility and State Distribution in Mobile Code Languages. </title> <booktitle> In Proceedings of the 2 nd ECOOP Workshop on Mobile Object Systems, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: Given a particular paradigm, which technology should be used? We identify three classes of technologies <ref> [7] </ref>: Message-based These technologies enable the communication between remote EUs in the form of message exchange. A typical example is RPC [2].
Reference: 8. <author> R.S. Gray. </author> <title> Agent Tcl: A Transportable Agent System. </title> <booktitle> In Proceedings of the CIKM'95 Workshop on Intelligent Information Agents, </booktitle> <year> 1995. </year>
Reference-contexts: Strongly mobile These technologies enable EUs to move with their code and execution state to a different CE. An example is represented by the Telescript technology. We implemented the different architectures of our application using different types of technologies. We chose Tcl-DP [12], Obliq [3], and Agent Tcl <ref> [8] </ref>. Tcl-DP is an extension of the Tcl language [11] for distributed programming. Tcl-DP provides support for TCP/IP and RPC programming. It is a message-based technology. Obliq is an untyped, object-based, lexically scoped, interpreted language. It supports remote method invocation and remote evaluation of code.
Reference: 9. <author> D. Johansen, R. van Renesse, and F.B. Schneider. </author> <title> An Introduction to the TACOMA Distributed System Version 1.0. </title> <type> Technical Report 95-23, </type> <institution> "University of Tromst and Cornell University", </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: Examples of such technologies are the rsh facility in UNIX, languages like M0 [14] and Obliq [3], or systems like TACOMA <ref> [9] </ref> and Mole [13]. Strongly mobile These technologies enable EUs to move with their code and execution state to a different CE. An example is represented by the Telescript technology. We implemented the different architectures of our application using different types of technologies.
Reference: 10. <author> Sun Microsystems. </author> <title> The Java Language: A White Paper. </title> <type> Technical report, </type> <institution> Sun Microsystems, </institution> <year> 1994. </year>
Reference-contexts: Such EUs may change their computational environment and even the code they execute dynamically. Several technologies, like Telescript [16], Messengers [15], and Java <ref> [10] </ref> have been pro-posed. Still, the development of applications based on the mobile computation paradigm (shortly, Mobile Code Applications or MCAs) lacks a methodological background.
Reference: 11. <author> J.K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: An example is represented by the Telescript technology. We implemented the different architectures of our application using different types of technologies. We chose Tcl-DP [12], Obliq [3], and Agent Tcl [8]. Tcl-DP is an extension of the Tcl language <ref> [11] </ref> for distributed programming. Tcl-DP provides support for TCP/IP and RPC programming. It is a message-based technology. Obliq is an untyped, object-based, lexically scoped, interpreted language. It supports remote method invocation and remote evaluation of code. Therefore it is both a message-based and a weakly mobile technology.
Reference: 12. <author> B. Smith and L. Rowe. Tcl-DP. Documentation, </author> <year> 1996. </year>
Reference-contexts: Strongly mobile These technologies enable EUs to move with their code and execution state to a different CE. An example is represented by the Telescript technology. We implemented the different architectures of our application using different types of technologies. We chose Tcl-DP <ref> [12] </ref>, Obliq [3], and Agent Tcl [8]. Tcl-DP is an extension of the Tcl language [11] for distributed programming. Tcl-DP provides support for TCP/IP and RPC programming. It is a message-based technology. Obliq is an untyped, object-based, lexically scoped, interpreted language.
Reference: 13. <author> M. Straer, J. Baumann, and F. Hohl. MOLE: </author> <title> A Java Based Mobile Agent System. </title> <booktitle> In Proceedings of the 2 n d ECOOP Workshop on Mobile Objects ("Agents on the Move"), </booktitle> <year> 1996. </year>
Reference-contexts: Examples of such technologies are the rsh facility in UNIX, languages like M0 [14] and Obliq [3], or systems like TACOMA [9] and Mole <ref> [13] </ref>. Strongly mobile These technologies enable EUs to move with their code and execution state to a different CE. An example is represented by the Telescript technology. We implemented the different architectures of our application using different types of technologies. We chose Tcl-DP [12], Obliq [3], and Agent Tcl [8].
Reference: 14. <author> C. F. Tschudin. </author> <title> An Introduction to the M0 Messenger Language. </title> <institution> University of Geneva, Switzerland, </institution> <year> 1994. </year>
Reference-contexts: Weakly mobile These technologies provide mechanisms that enable an EU to send code to be executed in a remote CE together with some initialization data or to bind dynamically code downloaded from a remote EU. Examples of such technologies are the rsh facility in UNIX, languages like M0 <ref> [14] </ref> and Obliq [3], or systems like TACOMA [9] and Mole [13]. Strongly mobile These technologies enable EUs to move with their code and execution state to a different CE. An example is represented by the Telescript technology.
Reference: 15. <author> Christian F. Tschudin. OO-Agents and Messengers. </author> <booktitle> In ECOOP'95 Workshop on Objects and Agents, </booktitle> <month> August </month> <year> 1995. </year>
Reference-contexts: In this framework, the computational infrastructure is composed of a (possibly world-wide) distributed environment with several computational environments (CEs) that support the computations of executing units (EUs). Such EUs may change their computational environment and even the code they execute dynamically. Several technologies, like Telescript [16], Messengers <ref> [15] </ref>, and Java [10] have been pro-posed. Still, the development of applications based on the mobile computation paradigm (shortly, Mobile Code Applications or MCAs) lacks a methodological background.
Reference: 16. <author> James E. White. </author> <title> Telescript Technology: The Foundation for the Electronic Marketplace. </title> <type> Technical report, </type> <institution> General Magic, Inc., </institution> <year> 1994. </year> <note> White Paper. </note>
Reference-contexts: In this framework, the computational infrastructure is composed of a (possibly world-wide) distributed environment with several computational environments (CEs) that support the computations of executing units (EUs). Such EUs may change their computational environment and even the code they execute dynamically. Several technologies, like Telescript <ref> [16] </ref>, Messengers [15], and Java [10] have been pro-posed. Still, the development of applications based on the mobile computation paradigm (shortly, Mobile Code Applications or MCAs) lacks a methodological background.
References-found: 16

