URL: http://www.cs.ucdavis.edu/~rogaway/papers/reducing-ro.ps
Refering-URL: http://www.cs.ucdavis.edu/research/tech-reports/1997.html
Root-URL: http://www.cs.ucdavis.edu
Email: E-mail: rogaway@cs.ucdavis.edu.  
Title: Minimizing the Use of Random Oracles in Authenticated Encryption Schemes  
Author: By Mihir Bellare and Phillip Rogaway 
Web: URL: http://wwwcsif.cs.ucdavis.edu/~rogaway.  
Address: CA 95616, USA.  
Affiliation: 2 Dept. of Computer Science, University of California at Davis, Davis,  
Date: 1.2, April 4, 1997.  
Note: Draft  Supported by NSF CAREER Award CCR-9624560 and a grant from Certicom Corp..  
Abstract: A cryptographic scheme is "provably secure" if an attack on the scheme implies an attack on the underlying primitive which it uses. A cryptographic scheme is "provably secure in the random-oracle model" if it uses a cryptographic hash function F and is provably secure when F is modeled by a public random function. Demonstrating that a cryptographic scheme is provably secure in the random-oracle model engenders much assurance in the scheme's correctness. But there may remain some lingering fear that the concrete hash function instantiates the random oracle differs from a random function in some significant way. So it is good to try to limit reliance on random oracles. Motivated by the emerging IEEE P1363 "Standard for Public-Key Cryptography" we describe two encryption schemes which use their random oracles in a rather limited way. The schemes achieve semantic security and plaintext awareness under assumptions we will specify. One scheme uses the RSA primitive; the other uses Diffie-Hellman. In either case messages longer than the modulus length can be safely and directly encrypted without relying on the hash functions modeled as random-oracles to be good for private-key encryption. 1 Dept. of Computer Science & Engineering, University of California at San Diego, 9500 Gilman Drive, La Jolla, California 92093, USA. E-Mail: mihir@cs.ucsd.edu. URL: http://www-cse.ucsd.edu/users/mihir. Supported by NSF CAREER Award CCR-9624439 and a Packard Foundation Fellowship in Science and Engineering. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Bellare, R. Canetti and H. Krawczyk, </author> <title> "Keying hash functions for message authentication," </title> <booktitle> Advances in Cryptology - Crypto 96 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 1109, </volume> <editor> N. Koblitz ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: This is a much weaker assumption than the standard one for a secure message authentication code. A one-time MAC can be achieved "cryptographically" (eg., by HMAC <ref> [1] </ref>) or "non-cryptographically" (eg., by an almost-univeral-2 family of hash functions). * One-Time Encryption This is a function OneTimeENC that takes a string encKey of some length encKeyLen, and a string M of arbitrary length, and produces a string encM = OneTimeENC encKey (M ).
Reference: [2] <author> M. Bellare and P. Rogaway, </author> <title> "Random oracles are practical: A paradigm for designing efficient protocols," </title> <booktitle> Proceedings of the First Annual Conference on Computer and Communications Security, ACM, </booktitle> <year> 1993. </year>
Reference-contexts: To address this problem the current authors suggested a few years back that the random oracle model could provide an effective tool to simultaneously achieve efficiency and something which is "close to" provable security <ref> [2] </ref>. The idea is to assume during algorithm design and analysis that all parties have access to a public random oracle| that is, a publicly-know "black box" which, on input of a string x, returns a random string R (x) of some appropriate length. <p> The thesis underlying the random oracle paradigm is that substantial assurance remains despite the not-theoretically-justified instantiation step. For more details on this approach, see <ref> [2] </ref>. The buying of provable-security-style assurance without loss of efficiency has made the random oracle model an attractive choice for doing rigorous yet practical work in several cryptographic domains. In particular, the approach has been followed for asymmetric encryption [2, 3] and digital signatures [2, 4, 18]. <p> For more details on this approach, see [2]. The buying of provable-security-style assurance without loss of efficiency has made the random oracle model an attractive choice for doing rigorous yet practical work in several cryptographic domains. In particular, the approach has been followed for asymmetric encryption <ref> [2, 3] </ref> and digital signatures [2, 4, 18]. It is a particularly attractive approach for designing the sort of simple, efficient, as-high-assurance-as-possible schemes one wants for cryptographic standards. And one such standards effort is currently going on. <p> The buying of provable-security-style assurance without loss of efficiency has made the random oracle model an attractive choice for doing rigorous yet practical work in several cryptographic domains. In particular, the approach has been followed for asymmetric encryption [2, 3] and digital signatures <ref> [2, 4, 18] </ref>. It is a particularly attractive approach for designing the sort of simple, efficient, as-high-assurance-as-possible schemes one wants for cryptographic standards. And one such standards effort is currently going on. The IEEE working group known as "P1363" has been drafting a Standard for Public-Key Cryptography [10]. <p> Here we explain some of the issues and guarantees, without repeating discussion which can be found in <ref> [2] </ref>. Since we began working in the random-oracle model we have sought to make clear that provable security in the random-oracle model is significantly different from (and fundamentally weaker than) provable-security in the standard model.
Reference: [3] <author> M. Bellare and P. Rogaway, </author> <title> "Optimal asymmetric encryption- How to encrypt with RSA". </title> <note> Current version available at URL of either author. Earlier version in Advances in Cryptology - Eurocrypt 94 Proceedings, Lecture Notes in Computer Science Vol. 950, </note> <editor> A. De Santis ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <month> 14 </month>
Reference-contexts: For more details on this approach, see [2]. The buying of provable-security-style assurance without loss of efficiency has made the random oracle model an attractive choice for doing rigorous yet practical work in several cryptographic domains. In particular, the approach has been followed for asymmetric encryption <ref> [2, 3] </ref> and digital signatures [2, 4, 18]. It is a particularly attractive approach for designing the sort of simple, efficient, as-high-assurance-as-possible schemes one wants for cryptographic standards. And one such standards effort is currently going on. <p> In a (non-current) draft of the P1363 document (Aug 22, 1996) a formatting procedure called "OAEP" <ref> [3] </ref> was used in a way that permitted strings longer than the modulus length to be directly encrypted using the RSA primitive. 3 OAEP uses two hash functions, G and H, and in the security proof for RSA-using-OAEP encryption [3], G and H are modeled as random oracles. <p> the P1363 document (Aug 22, 1996) a formatting procedure called "OAEP" <ref> [3] </ref> was used in a way that permitted strings longer than the modulus length to be directly encrypted using the RSA primitive. 3 OAEP uses two hash functions, G and H, and in the security proof for RSA-using-OAEP encryption [3], G and H are modeled as random oracles. Referring now to Figure 1, it is proven in [3] that if any part of U = maskedSeed k maskedDB is encrypted using the RSA primitive x 7! x e mod N , then, in the random-oracle model, the RSA-using-OAEP encryption scheme <p> permitted strings longer than the modulus length to be directly encrypted using the RSA primitive. 3 OAEP uses two hash functions, G and H, and in the security proof for RSA-using-OAEP encryption <ref> [3] </ref>, G and H are modeled as random oracles. Referring now to Figure 1, it is proven in [3] that if any part of U = maskedSeed k maskedDB is encrypted using the RSA primitive x 7! x e mod N , then, in the random-oracle model, the RSA-using-OAEP encryption scheme is secure. (Here one assumes that the RSA primitive is hard to invert on random strings.) In the <p> It could just as easily be based on elliptic curves. 1.5 A suggestions for RSA-based encryption We keep the structure of OAEP exactly in tact and simply refine the interpretation of the functions G and H. In doing this, we preserve plaintext-awareness <ref> [3] </ref> as well as semantic security [9, 3]. The underlying idea springs from the fact that the proof of security for RSA-using-OAEP [3] did not really need G and H to consist entirely of random oracles. <p> It could just as easily be based on elliptic curves. 1.5 A suggestions for RSA-based encryption We keep the structure of OAEP exactly in tact and simply refine the interpretation of the functions G and H. In doing this, we preserve plaintext-awareness [3] as well as semantic security <ref> [9, 3] </ref>. The underlying idea springs from the fact that the proof of security for RSA-using-OAEP [3] did not really need G and H to consist entirely of random oracles. <p> In doing this, we preserve plaintext-awareness <ref> [3] </ref> as well as semantic security [9, 3]. The underlying idea springs from the fact that the proof of security for RSA-using-OAEP [3] did not really need G and H to consist entirely of random oracles. <p> scheme is semantically secure if the probability that the adversary wins is at most 1=2 + * for some small * which measures the security of the scheme. 12 * Plaintext awareness: This is a strong property of an encryption scheme which ensures some sort of "integrity" of the plaintext <ref> [3] </ref>. Roughly, the adversary cannot produce a valid ciphertext without "knowing" the corresponding plaintext. This prevents an adversary from modifying a given ciphertext so as to induce a desired change in the plaintext [7], and also prevents chosen-ciphertext attacks. <p> condition is assured by requiring that there exist a plaintext extractor E who can see the adversary's oracle queries and the answers to them (both for the random oracles and for the encryption oracle), and, given C, will find the corresponding plaintext P . (Note: This formulation extends that of <ref> [3] </ref>, who had forgotten to supply the adversary with an oracle for E . <p> First we consider the scheme which is the modified OAEP except that G is a random oracle, rather than being prg (GG ()). (But H is still as defined in the scheme.) We now must trace through the proof of semantic security of the standard OAEP given in <ref> [3, Appendix A] </ref>. This proof is modified to still hold with the modified H. Given the above, we now consider what happens if the random oracle G is replaced by prg (GG).
Reference: [4] <author> M. Bellare and P. Rogaway, </author> <title> "The exact security of digital signatures- How to sign with RSA and Rabin." </title> <note> Current version available at URL of either author. Earlier version in Advances in Cryptology - Eurocrypt 96 Proceedings, Lecture Notes in Computer Science Vol. 1070, </note> <editor> U. Maurer ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The buying of provable-security-style assurance without loss of efficiency has made the random oracle model an attractive choice for doing rigorous yet practical work in several cryptographic domains. In particular, the approach has been followed for asymmetric encryption [2, 3] and digital signatures <ref> [2, 4, 18] </ref>. It is a particularly attractive approach for designing the sort of simple, efficient, as-high-assurance-as-possible schemes one wants for cryptographic standards. And one such standards effort is currently going on. The IEEE working group known as "P1363" has been drafting a Standard for Public-Key Cryptography [10].
Reference: [5] <author> M. Blum and S. Goldwasser, </author> <title> "An efficient probabilistic public-key encryption scheme which hides all partial information," </title> <booktitle> Advances in Cryptology - Crypto 84 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 196, </volume> <editor> R. Blakely ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference: [6] <author> I. Damg -ard, </author> <title> "Towards practical public key cryptosystems secure against chosen ciphertext attacks," </title> <booktitle> Advances in Cryptology - Crypto 91 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 576, </volume> <editor> J. Feigen-baum ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [7] <author> D. Dolev, C. Dwork and M. Naor, </author> <title> "Non-malleable cryptography," </title> <booktitle> Proceedings of the 23rd Annual Symposium on Theory of Computing, ACM, </booktitle> <year> 1991. </year>
Reference-contexts: Roughly, the adversary cannot produce a valid ciphertext without "knowing" the corresponding plaintext. This prevents an adversary from modifying a given ciphertext so as to induce a desired change in the plaintext <ref> [7] </ref>, and also prevents chosen-ciphertext attacks.
Reference: [8] <author> C. </author> <title> Ellison, </title> <type> personal communication, </type> <month> September </month> <year> 1996. </year>
Reference-contexts: About this method Carl Ellison observed: "if we let the OAEP-masked PK [public key] payload [U ] get bigger than the modulus, then that part of the payload which overhangs the PK modulus is being symmetrically encrypted by the [function G in the] OAEP operation" <ref> [8] </ref>. This is true. What happens in this case is that a part of the payload is not RSA-encapsulated by the RSA primitive and so, in this case, there is no interaction between the RSA primitive and (part of the output of) the function G.
Reference: [9] <author> S. Goldwasser and S. Micali, </author> <title> "Probabilistic Encryption," </title> <journal> Journal of Computer and System Sciences 28, </journal> <pages> 270-299, </pages> <month> April </month> <year> 1984. </year>
Reference-contexts: It could just as easily be based on elliptic curves. 1.5 A suggestions for RSA-based encryption We keep the structure of OAEP exactly in tact and simply refine the interpretation of the functions G and H. In doing this, we preserve plaintext-awareness [3] as well as semantic security <ref> [9, 3] </ref>. The underlying idea springs from the fact that the proof of security for RSA-using-OAEP [3] did not really need G and H to consist entirely of random oracles. <p> At this point we will provide only brief sketches of the results and ideas of the proofs. 4.1 The notions Let us first recall the notions. * Semantic security: This is the basic property ensuring that an eavesdropping adversary gets no useful information about the plaintext from the ciphertext <ref> [9] </ref>. Formally, the setup is like this. Let us fix an encryption scheme, either OAEP or DLAES. Let the adversary A be given the public encryption key and also be given oracle access to any random oracles the scheme uses.
Reference: [10] <institution> IEEE P1363 Committee, </institution> <note> IEEE P1363 Working Draft, February 6, 1997. Lisa Yiquin, editor. Current draft in http://stdsbbs.ieee.org/groups/1363/index.html. </note>
Reference-contexts: It is a particularly attractive approach for designing the sort of simple, efficient, as-high-assurance-as-possible schemes one wants for cryptographic standards. And one such standards effort is currently going on. The IEEE working group known as "P1363" has been drafting a Standard for Public-Key Cryptography <ref> [10] </ref>. This will be the first document owned by any standard-setting authority which provides general-purpose, bit-level specification for doing public key encryption, digital signatures, and key agreement using public-key techniques. <p> Thus we now restate the formatting method, slightly adjusting the notation from that in <ref> [10] </ref>. <p> Algorithm: For x a point in some finite field, we will write " x" to denote the string which encodes x (according to some fixed formatting conventions). (1) Generate a "one-time key pair" (g u ; u). (In <ref> [10] </ref> this is done with a primitive called "DLKGP.") Convert g u to an octet string g u . (In [10] this is done with a primitive called "I2OSP.") (2) Derive a field element g uv , the secret value, from the public key g v and the one-time private key <p> field, we will write " x" to denote the string which encodes x (according to some fixed formatting conventions). (1) Generate a "one-time key pair" (g u ; u). (In <ref> [10] </ref> this is done with a primitive called "DLKGP.") Convert g u to an octet string g u . (In [10] this is done with a primitive called "I2OSP.") (2) Derive a field element g uv , the secret value, from the public key g v and the one-time private key u. (In [10], the primitive which does this is called "DLSVDP.") Convert g uv to an octet string g uv <p> done with a primitive called "DLKGP.") Convert g u to an octet string g u . (In <ref> [10] </ref> this is done with a primitive called "I2OSP.") (2) Derive a field element g uv , the secret value, from the public key g v and the one-time private key u. (In [10], the primitive which does this is called "DLSVDP.") Convert g uv to an octet string g uv (using I2OSP). (3) Apply the idealized hash function GG to g u and g uv to obtain a string of macKeyLen + encKeyLen octets ggOutput .
Reference: [11] <author> D. Johnson and S. Matyas. </author> <title> "Asymmetric encryption: evolution and enhancements," </title> <journal> CryptoBytes, </journal> <volume> Vol. 2, No. 1, </volume> <month> Spring </month> <year> 1996. </year>
Reference: [12] <author> D. Johnson, A. Lee, W. Martin, S. Matyas and J. Wilkins, </author> <title> "Hybrid key distribution scheme giving key record recovery," </title> <journal> IBM Technical Disclosure Bulletin, </journal> <volume> 37(2A), </volume> <pages> 5-16, </pages> <month> February </month> <year> 1994. </year>
Reference: [13] <author> D. Johnson, S. Matyas, M. Peyravian, </author> <title> "Encryption of long blocks using a short-block encryption procedure." </title> <month> November </month> <year> 1996. </year> <note> Available in http://stdsbbs.ieee.org/groups/1363/index.html. </note>
Reference: [14] <author> IEEE P1363 Committee, Burt Kaliski, </author> <title> chair. Unpublished e-mail memorandum with subject heading: "Technical Subcommittee on Encryption Schemes." </title> <month> September 10, </month> <year> 1996. </year>
Reference-contexts: Their description of the problem to be addressed provides the context for our work. Here is an excerpt from the public announcement on the formation of the subcommittee <ref> [14] </ref>: It has been recognized for some time that there is a gap in security between public-key primitives, such as raw RSA encryption (c = m e mod n) and raw discrete logarithm key agreement (z = y x mod p), and public-key encryption schemes, which need to provide confidentiality of
Reference: [15] <author> M. Luby and C. Rackoff, </author> <title> "How to construct pseudorandom permutations from pseudorandom functions." </title> <journal> SIAM J. Computation, </journal> <volume> Vol. 17, No. 2, </volume> <month> April </month> <year> 1988. </year>
Reference: [16] <author> S. Matyas, M. Peyravian, A. Roginsky, </author> <title> "Security analysis of Feistel ladder formatting procedure." </title> <month> March </month> <year> 1997. </year> <note> Available in http://stdsbbs.ieee.org/groups/1363/index.html. </note>
Reference: [17] <author> M. Naor and M. Yung, </author> <title> "Public-key cryptosystems provably secure against chosen ciphertext attacks," </title> <booktitle> Proceedings of the 22nd Annual Symposium on Theory of Computing, ACM, </booktitle> <year> 1990. </year>
Reference: [18] <author> D. Pointcheval and J. Stern, </author> <title> "Security proofs for signatures," </title> <booktitle> Advances in Cryptology Euro-crypt 96 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 1070, </volume> <editor> U. Maurer ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The buying of provable-security-style assurance without loss of efficiency has made the random oracle model an attractive choice for doing rigorous yet practical work in several cryptographic domains. In particular, the approach has been followed for asymmetric encryption [2, 3] and digital signatures <ref> [2, 4, 18] </ref>. It is a particularly attractive approach for designing the sort of simple, efficient, as-high-assurance-as-possible schemes one wants for cryptographic standards. And one such standards effort is currently going on. The IEEE working group known as "P1363" has been drafting a Standard for Public-Key Cryptography [10].
Reference: [19] <author> R. Rivest, A. Shamir and L. Adleman, </author> <title> "A method for obtaining digital signatures and public key cryptosystems," </title> <note> CACM 21 (1978). </note>
Reference: [20] <author> RSA Data Security, Inc., </author> <title> "PKCS #1: RSA Encryption Standard," </title> <month> June </month> <year> 1991. </year>
Reference: [21] <author> Y. Zheng, </author> <title> "Public key authenticated encryption schemes using universal hashing," </title> <type> (15 Oct 96). </type> <note> Unpublished contribution to P1363. ftp://stdsbbs.ieee.org/pub/p1363/contributions/aes-uhf.ps </note>
Reference: [22] <author> Y. Zheng and J. Seberry, </author> <title> "Immunizing public key cryptosystems against chosen ciphertext attack." </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 11, no. 5, </volume> <month> 715-724 </month> <year> (1993). </year> <month> 15 </month>
References-found: 22

