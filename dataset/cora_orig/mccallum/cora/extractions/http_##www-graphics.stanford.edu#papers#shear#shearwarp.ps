URL: http://www-graphics.stanford.edu/papers/shear/shearwarp.ps
Refering-URL: http://www-graphics.stanford.edu/papers/shear/gamma-corrected/
Root-URL: http://www.cs.stanford.edu
Title: Fast Volume Rendering Using a Shear-Warp Factorization of the Viewing Transformation  
Author: Philippe Lacroute Marc Levoy 
Keyword: CR Categories: I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism; I.3.3 [Computer Graphics]: Picture/Image Generation|Display Algorithms. Additional Keywords: Volume rendering, Coherence, Scientific visualization, Medical imaging.  
Affiliation: Computer Systems Laboratory Stanford University  Computer Science Department Stanford University  
Abstract: Several existing volume rendering algorithms operate by factoring the viewing transformation into a 3D shear parallel to the data slices, a projection to form an intermediate but distorted image, and a 2D warp to form an undistorted final image. We extend this class of algorithms in three ways. First, we describe a new object-order rendering algorithm based on the factorization that is significantly faster than published algorithms with minimal loss of image quality. Shear-warp factorizations have the property that rows of voxels in the volume are aligned with rows of pixels in the intermediate image. We use this fact to construct a scanline-based algorithm that traverses the volume and the intermediate image in synchrony, taking advantage of the spatial coherence present in both. We use spatial data structures based on run-length encoding for both the volume and the intermediate image. Our implementation running on an SGI Indigo workstation renders a 256 3 voxel medical data set in one second. Our second extension is a shear-warp factorization for perspective viewing transformations, and we show how our rendering algorithm can support this extension. Third, we introduce a data structure for encoding spatial coherence in unclassified volumes (i.e. scalar fields with no precomputed opacity). When combined with our shear-warp rendering algorithm this data structure allows us to classify and render a 256 3 voxel volume in three seconds. The method extends to support mixed volumes and geometry and is parallelizable. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Cameron, G. G. and P. E. Undrill. </author> <title> Rendering volumetric medical image data on a SIMD-architecture computer. </title> <booktitle> In Proceedings of the Third Eurographics Workshop on Rendering, </booktitle> <pages> 135-145, </pages> <address> Bristol, UK, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: Shear-warp factorizations are not new. They have been used to simplify data communication patterns in volume rendering algorithms for SIMD parallel processors <ref> [1] </ref> [17] and to simplify the generation of paths through a volume in a serial image-order algorithm [22]. The advantage of shear-warp factorizations is that scanlines of the volume data and scanlines of the intermediate image are always aligned. <p> S transforms the volume into sheared object space, and M warp transforms sheared object coordinates into image coordinates. Cameron and Undrill <ref> [1] </ref> and Schroder and Stoll [17] describe this factorization for the case of rotation matrices. <p> Transform the intermediate image to image space by warp ing it according to M warp . This second resampling step produces the correct final image. The parallel-projection version of this algorithm was first described by Cameron and Undrill <ref> [1] </ref>. Our new optimizations are described in the next section. The projection in sheared object space has several geometric properties that simplify the compositing step of the algorithm: Property 1: Scanlines of pixels in the intermediate image are parallel to scanlines of voxels in the volume data.
Reference: [2] <author> Crow, Franklin C. </author> <title> Summed-area tables for texture mapping. </title> <booktitle> Proceedings of SIGGRAPH '84. Computer Graphics, </booktitle> <volume> 18(3) </volume> <pages> 207-212, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: If the integral is zero then all voxels must be transparent. fl This integration can be performed in constant time using a multi-dimensional summed-area table <ref> [2] </ref> [5]. The voxels themselves are stored in a third data structure, a simple 3D array. The overall algorithm for rendering unclassified data sets proceeds as follows.
Reference: [3] <author> Danskin, John and Pat Hanrahan. </author> <title> Fast algorithms for volume ray tracing. </title> <booktitle> In 1992 Workshop on Volume Visualization, </booktitle> <pages> 91-98, </pages> <address> Boston, MA, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: These data structures are built during a preprocessing step from a classified volume: a volume to which an opacity transfer function has been applied. Such spatial data structures include octrees and pyramids [13] [12] [8] <ref> [3] </ref>, k-d trees [18] and distance transforms [23]. Although this type of optimization is data-dependent, researchers have reported that in typical classified volumes 70-95% of the voxels are transparent [12] [18]. <p> Other than a slight loss due to the two-pass resampling, our algorithm does not trade off quality for speed. This is in contrast to algorithms that subsample the data set and can therefore miss small features [10] <ref> [3] </ref>. Section 2 of this paper describes the shear-warp factorization and its important mathematical properties. We also describe a new extension of the factorization for perspective projections. Section 3 describes three variants of our volume rendering algorithm.
Reference: [4] <author> Drebin, Robert A., Loren Carpenter and Pat Hanrahan. </author> <title> Volume rendering. </title> <booktitle> Proceedings of SIGGRAPH '88. Computer Graphics, </booktitle> <volume> 22(4) </volume> <pages> 65-74, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: The projection in sheared object space is simple and efficient. sampling filter footprint is not view dependent, so the resampling complications of splatting algorithms [20] are avoided. Several other algorithms also use multipass resampling <ref> [4] </ref> [7] [19], but these methods require three or more resampling steps. Our algorithm requires only two resampling steps for an arbitrary perspective viewing transformation, and the second resampling is an inexpensive 2D warp. The 3D volume is traversed only once.
Reference: [5] <author> Glassner, Andrew S. </author> <title> Multidimensional sum tables. </title> <booktitle> In Graphics Gems, </booktitle> <pages> 376-381. </pages> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: If the integral is zero then all voxels must be transparent. fl This integration can be performed in constant time using a multi-dimensional summed-area table [2] <ref> [5] </ref>. The voxels themselves are stored in a third data structure, a simple 3D array. The overall algorithm for rendering unclassified data sets proceeds as follows.
Reference: [6] <author> Glassner, Andrew S. </author> <title> Normal coding. </title> <booktitle> In Graphics Gems, </booktitle> <pages> 257-264. </pages> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: We use a bilinear interpolation filter and a gather-type convolution (backward projection): two voxel scanlines are traversed simultaneously to compute a single intermediate image scanline at a time. Scatter-type convolution (forward projection) is also possible. We use a lookup-table based system for shading <ref> [6] </ref>.
Reference: [7] <author> Hanrahan, Pat. </author> <title> Three-pass affine transforms for volume rendering. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 71-77, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: The projection in sheared object space is simple and efficient. sampling filter footprint is not view dependent, so the resampling complications of splatting algorithms [20] are avoided. Several other algorithms also use multipass resampling [4] <ref> [7] </ref> [19], but these methods require three or more resampling steps. Our algorithm requires only two resampling steps for an arbitrary perspective viewing transformation, and the second resampling is an inexpensive 2D warp. The 3D volume is traversed only once.
Reference: [8] <author> Laur, David and Pat Hanrahan. </author> <title> Hierarchical splatting: A progressive refinement algorithm for volume rendering. </title> <booktitle> Proceedings of SIGGRAPH '91. Computer Graphics, </booktitle> <volume> 25(4) </volume> <pages> 285-288, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Interactive rendering rates have been reported using large parallel processors [17] [19] and using algorithms that trade off image quality for speed [10] <ref> [8] </ref>, but high-quality images take tens of seconds or minutes to generate on current workstations. In this paper we present a new algorithm which achieves near-interactive rendering rates on a workstation without significantly sacrificing quality. <p> These data structures are built during a preprocessing step from a classified volume: a volume to which an opacity transfer function has been applied. Such spatial data structures include octrees and pyramids [13] [12] <ref> [8] </ref> [3], k-d trees [18] and distance transforms [23]. Although this type of optimization is data-dependent, researchers have reported that in typical classified volumes 70-95% of the voxels are transparent [12] [18]. <p> This processing order has the disadvantage that the spatial data structure must be traversed once for every ray, resulting in redundant computation (e.g. multiple descents of an octree). In contrast, object-order algorithms operate by splatting voxels into the image while streaming through the volume data in storage order [20] <ref> [8] </ref>. However, this processing order makes it difficult to implement early ray termination, an effective optimization in ray-casting algorithms [12]. In this paper we describe a new algorithm which combines the advantages of image-order and object-order algorithms.
Reference: [9] <author> Levoy, Marc. </author> <title> Display of surfaces from volume data. </title> <journal> IEEE Computer Graphics & Applications, </journal> <volume> 8(3) </volume> <pages> 29-37, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Algorithms that use spatial data structures can be divided into two categories according to the order in which the data structures are traversed: image-order or object-order. Image-order algorithms operate by casting rays from each image pixel and processing the voxels along each ray <ref> [9] </ref>. This processing order has the disadvantage that the spatial data structure must be traversed once for every ray, resulting in redundant computation (e.g. multiple descents of an octree). <p> We allow the opacity transfer function to be any scalar function of a multi-dimensional scalar domain: ff = f (p; q; :::) For example, the opacity might be a function of the scalar field and its gradient magnitude <ref> [9] </ref>: ff = f (d; jrdj) The function f essentially partitions a multi-dimensional feature space into transparent and non-transparent regions, and our goal is to decide quickly which portions of a given scanline contain voxels in the non-transparent regions of the feature space.
Reference: [10] <author> Levoy, Marc. </author> <title> Volume rendering by adaptive refinement. </title> <journal> The Visual Computer, </journal> <volume> 6(1) </volume> <pages> 2-7, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: Interactive rendering rates have been reported using large parallel processors [17] [19] and using algorithms that trade off image quality for speed <ref> [10] </ref> [8], but high-quality images take tens of seconds or minutes to generate on current workstations. In this paper we present a new algorithm which achieves near-interactive rendering rates on a workstation without significantly sacrificing quality. <p> Other than a slight loss due to the two-pass resampling, our algorithm does not trade off quality for speed. This is in contrast to algorithms that subsample the data set and can therefore miss small features <ref> [10] </ref> [3]. Section 2 of this paper describes the shear-warp factorization and its important mathematical properties. We also describe a new extension of the factorization for perspective projections. Section 3 describes three variants of our volume rendering algorithm.
Reference: [11] <author> Levoy, Marc and Ross Whitaker. </author> <title> Gaze-directed volume rendering. </title> <journal> Computer Graphics, </journal> <volume> 24(2) </volume> <pages> 217-223, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Two types of solutions have been proposed for perspective volume rendering using ray-casters: as the distance along a ray increases the ray can be split into multiple rays [14], or each sample point can sample a larger portion of the volume using a mip-map <ref> [11] </ref> [16]. The object-order splatting algorithm can also handle perspective, but the resampling filter footprint must be recomputed for every voxel [20]. The shear-warp factorization provides a simple and efficient solution to the sampling problem for perspective projections.
Reference: [12] <author> Levoy, Marc. </author> <title> Efficient ray tracing of volume data. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 9(3) </volume> <pages> 245-261, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: These data structures are built during a preprocessing step from a classified volume: a volume to which an opacity transfer function has been applied. Such spatial data structures include octrees and pyramids [13] <ref> [12] </ref> [8] [3], k-d trees [18] and distance transforms [23]. Although this type of optimization is data-dependent, researchers have reported that in typical classified volumes 70-95% of the voxels are transparent [12] [18]. <p> Such spatial data structures include octrees and pyramids [13] <ref> [12] </ref> [8] [3], k-d trees [18] and distance transforms [23]. Although this type of optimization is data-dependent, researchers have reported that in typical classified volumes 70-95% of the voxels are transparent [12] [18]. Algorithms that use spatial data structures can be divided into two categories according to the order in which the data structures are traversed: image-order or object-order. Image-order algorithms operate by casting rays from each image pixel and processing the voxels along each ray [9]. <p> In contrast, object-order algorithms operate by splatting voxels into the image while streaming through the volume data in storage order [20] [8]. However, this processing order makes it difficult to implement early ray termination, an effective optimization in ray-casting algorithms <ref> [12] </ref>. In this paper we describe a new algorithm which combines the advantages of image-order and object-order algorithms. <p> The opaque pixel links achieve the same effect as early ray termination in ray-casting algorithms <ref> [12] </ref>. However, the effectiveness of this optimization depends on coherence of the opaque regions of the image. The runs of opaque pixels are typically large so that many pixels can be skipped at once, minimizing the number of pixels that are examined. <p> The "Switch Modes" arrow head oriented at 45 degrees relative to the axes of the volume (1.2 sec.). same data set as in Figure 9 using a ray-caster <ref> [12] </ref> for quality comparison (13.8 sec.). parallel projection of the human head data set classified with semitransparent skin (3.0 sec.). parallel projection of an engine block with semitransparent and opaque surfaces (2.3 sec.). parallel projection of a CT scan of a human abdomen (2.2 sec.). <p> Figure 16 is a perspective color rendering of the engine data set which took 3.8 sec. to compute. For comparison purposes we rendered the head data set with a ray-caster that uses early ray termination and a pyramid to exploit object coherence <ref> [12] </ref>. Because of its lower computational overhead the shear-warp algorithm is more than five times faster for the 128 3 data sets and more than ten times faster for the 256 3 data sets. <p> Degraded performance can be ex pected if a substantial fraction of the classified volume has low but non-transparent opacity, but in our experience such classification functions are less useful. 4.2 Image Quality but produced by a ray-caster using trilinear interpolation <ref> [12] </ref>. The two images are virtually identical. Nevertheless, there are two potential quality problems associated with the shear-warp algorithm. First, the algorithm involves two resampling steps: each slice is resampled during compositing, and the intermediate image is resampled during the final warp.
Reference: [13] <author> Meagher, Donald J. </author> <title> Efficient synthetic image generation of arbitrary 3-D objects. </title> <booktitle> In Proceeding of the IEEE Conference on Pattern Recognition and Image Processing, </booktitle> <pages> 473-478, </pages> <year> 1982. </year>
Reference-contexts: These data structures are built during a preprocessing step from a classified volume: a volume to which an opacity transfer function has been applied. Such spatial data structures include octrees and pyramids <ref> [13] </ref> [12] [8] [3], k-d trees [18] and distance transforms [23]. Although this type of optimization is data-dependent, researchers have reported that in typical classified volumes 70-95% of the voxels are transparent [12] [18].
Reference: [14] <author> Novins, Kevin L., Fran~cois X. Sillion, and Donald P. Green-berg. </author> <title> An efficient method for volume rendering using perspective projection. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 95-102, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: In the next section we extend these advantages to a perspective volume rendering algorithm. 3.2 Perspective Projection Rendering Algorithm Most of the work in volume rendering has focused on parallel projections. However, perspective projections provide additional cues for resolving depth ambiguities <ref> [14] </ref> and are essential to correctly compute occlusions in such applications as a beam's eye view for radiation treatment planning. Perspective projections present a problem because the viewing rays diverge so it is difficult to sample the volume uniformly. <p> Perspective projections present a problem because the viewing rays diverge so it is difficult to sample the volume uniformly. Two types of solutions have been proposed for perspective volume rendering using ray-casters: as the distance along a ray increases the ray can be split into multiple rays <ref> [14] </ref>, or each sample point can sample a larger portion of the volume using a mip-map [11] [16]. The object-order splatting algorithm can also handle perspective, but the resampling filter footprint must be recomputed for every voxel [20].
Reference: [15] <author> Porter, Thomas and Tom Duff. </author> <title> Compositing digital images. </title> <booktitle> Proceedings of SIGGRAPH '84. Computer Graphics, </booktitle> <volume> 18(3) </volume> <pages> 253-259, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: Transform the volume data to sheared object space by translating and resampling each slice according to S. For perspective transformations, also scale each slice. P specifies which of the three possible slicing directions to use. 2. Composite the resampled slices together in front-to-back order using the "over" operator <ref> [15] </ref>.
Reference: [16] <author> Sakas, Georgios and Matthias Gerth. </author> <title> Sampling and antialiasing of discrete 3-D volume density textures. </title> <booktitle> In Proceedings of Eurographics '91, </booktitle> <pages> 87-102, </pages> <address> Vienna, Austria, </address> <month> Septem-ber </month> <year> 1991. </year>
Reference-contexts: Two types of solutions have been proposed for perspective volume rendering using ray-casters: as the distance along a ray increases the ray can be split into multiple rays [14], or each sample point can sample a larger portion of the volume using a mip-map [11] <ref> [16] </ref>. The object-order splatting algorithm can also handle perspective, but the resampling filter footprint must be recomputed for every voxel [20]. The shear-warp factorization provides a simple and efficient solution to the sampling problem for perspective projections.
Reference: [17] <author> Schr oder, Peter and Gordon Stoll. </author> <title> Data parallel volume rendering as line drawing. </title> <booktitle> In Proceedings of the 1992 Workshop on Volume Visualization, </booktitle> <pages> 25-32, </pages> <address> Boston, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: Interactive rendering rates have been reported using large parallel processors <ref> [17] </ref> [19] and using algorithms that trade off image quality for speed [10] [8], but high-quality images take tens of seconds or minutes to generate on current workstations. In this paper we present a new algorithm which achieves near-interactive rendering rates on a workstation without significantly sacrificing quality. <p> Shear-warp factorizations are not new. They have been used to simplify data communication patterns in volume rendering algorithms for SIMD parallel processors [1] <ref> [17] </ref> and to simplify the generation of paths through a volume in a serial image-order algorithm [22]. The advantage of shear-warp factorizations is that scanlines of the volume data and scanlines of the intermediate image are always aligned. <p> S transforms the volume into sheared object space, and M warp transforms sheared object coordinates into image coordinates. Cameron and Undrill [1] and Schroder and Stoll <ref> [17] </ref> describe this factorization for the case of rotation matrices.
Reference: [18] <author> Subramanian, K. R. and Donald S. Fussell. </author> <title> Applying space subdivision techniques to volume rendering. </title> <booktitle> In Proceedings of Visualization '90, </booktitle> <pages> 150-159, </pages> <address> San Francisco, California, </address> <month> Oc-tober </month> <year> 1990. </year>
Reference-contexts: These data structures are built during a preprocessing step from a classified volume: a volume to which an opacity transfer function has been applied. Such spatial data structures include octrees and pyramids [13] [12] [8] [3], k-d trees <ref> [18] </ref> and distance transforms [23]. Although this type of optimization is data-dependent, researchers have reported that in typical classified volumes 70-95% of the voxels are transparent [12] [18]. <p> Such spatial data structures include octrees and pyramids [13] [12] [8] [3], k-d trees <ref> [18] </ref> and distance transforms [23]. Although this type of optimization is data-dependent, researchers have reported that in typical classified volumes 70-95% of the voxels are transparent [12] [18]. Algorithms that use spatial data structures can be divided into two categories according to the order in which the data structures are traversed: image-order or object-order. Image-order algorithms operate by casting rays from each image pixel and processing the voxels along each ray [9].
Reference: [19] <author> Vezina, Guy, Peter A. Fletcher, and Philip K. Robertson. </author> <title> Volume rendering on the MasPar MP-1. </title> <booktitle> In 1992 Workshop on Volume Visualization, </booktitle> <pages> 3-8, </pages> <address> Boston, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: Interactive rendering rates have been reported using large parallel processors [17] <ref> [19] </ref> and using algorithms that trade off image quality for speed [10] [8], but high-quality images take tens of seconds or minutes to generate on current workstations. In this paper we present a new algorithm which achieves near-interactive rendering rates on a workstation without significantly sacrificing quality. <p> The projection in sheared object space is simple and efficient. sampling filter footprint is not view dependent, so the resampling complications of splatting algorithms [20] are avoided. Several other algorithms also use multipass resampling [4] [7] <ref> [19] </ref>, but these methods require three or more resampling steps. Our algorithm requires only two resampling steps for an arbitrary perspective viewing transformation, and the second resampling is an inexpensive 2D warp. The 3D volume is traversed only once. <p> Because of its lower computational overhead the shear-warp algorithm is more than five times faster for the 128 3 data sets and more than ten times faster for the 256 3 data sets. Our algorithm running on a workstation is competitive with algorithms for massively parallel processors ([17], <ref> [19] </ref> and others), although the parallel implementations do not rely on coherence optimizations and therefore their performance results are not data dependent as ours are. Our experiments show that the running time of the algorithms in Sections 3.1-3.2 is proportional to the number of voxels which are resampled and composited.
Reference: [20] <author> Westover, Lee. </author> <title> Footprint evaluation for volume rendering. </title> <booktitle> Proceedings of SIGGRAPH '90. Computer Graphics, </booktitle> <volume> 24(4) </volume> <pages> 367-376, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: This processing order has the disadvantage that the spatial data structure must be traversed once for every ray, resulting in redundant computation (e.g. multiple descents of an octree). In contrast, object-order algorithms operate by splatting voxels into the image while streaming through the volume data in storage order <ref> [20] </ref> [8]. However, this processing order makes it difficult to implement early ray termination, an effective optimization in ray-casting algorithms [12]. In this paper we describe a new algorithm which combines the advantages of image-order and object-order algorithms. <p> In our algorithm the re viewing rays image plane volume slices shear project warp a parallel projection by translating each slice. The projection in sheared object space is simple and efficient. sampling filter footprint is not view dependent, so the resampling complications of splatting algorithms <ref> [20] </ref> are avoided. Several other algorithms also use multipass resampling [4] [7] [19], but these methods require three or more resampling steps. Our algorithm requires only two resampling steps for an arbitrary perspective viewing transformation, and the second resampling is an inexpensive 2D warp. <p> The object-order splatting algorithm can also handle perspective, but the resampling filter footprint must be recomputed for every voxel <ref> [20] </ref>. The shear-warp factorization provides a simple and efficient solution to the sampling problem for perspective projections. Each slice of the volume is transformed to sheared object space by a translation and a uniform scale, and the slices are then resampled and composited together.
Reference: [21] <author> Wilhelms, Jane and Allen Van Gelder. </author> <title> Octrees for faster isosurface generation. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 57-62, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Step 3: Subdivide the scanline and repeat this algorithm recur sively. If the size of the current scanline portion is below a threshold then render it instead of subdividing. This algorithm relies on two data structures for efficiency (Figure 7). First, Step 1 uses a precomputed min-max octree <ref> [21] </ref>. Each octree node contains the extrema of the parameter values for a subcube of the volume. Second, to implement Step 2 of the algorithm we need to integrate the function f over the region of the feature space found in Step 1.
Reference: [22] <author> Yagel, Roni and Arie Kaufman. </author> <title> Template-based volume viewing. </title> <booktitle> In Eurographics 92, </booktitle> <address> C-153-167, Cambridge, UK, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: Shear-warp factorizations are not new. They have been used to simplify data communication patterns in volume rendering algorithms for SIMD parallel processors [1] [17] and to simplify the generation of paths through a volume in a serial image-order algorithm <ref> [22] </ref>. The advantage of shear-warp factorizations is that scanlines of the volume data and scanlines of the intermediate image are always aligned. In previous efforts this property has been used to develop SIMD volume rendering algorithms.
Reference: [23] <author> Zuiderveld, Karel J., Anton H.J. Koning, and Max A. Viergever. </author> <title> Acceleration of ray-casting using 3D distance transforms. </title> <booktitle> In Proceedings of Visualization in Biomedical Computing 1992, </booktitle> <pages> 324-335, </pages> <address> Chapel Hill, North Carolina, </address> <month> Oc-tober </month> <year> 1992. </year>
Reference-contexts: These data structures are built during a preprocessing step from a classified volume: a volume to which an opacity transfer function has been applied. Such spatial data structures include octrees and pyramids [13] [12] [8] [3], k-d trees [18] and distance transforms <ref> [23] </ref>. Although this type of optimization is data-dependent, researchers have reported that in typical classified volumes 70-95% of the voxels are transparent [12] [18]. Algorithms that use spatial data structures can be divided into two categories according to the order in which the data structures are traversed: image-order or object-order.
References-found: 23

