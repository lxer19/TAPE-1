URL: ftp://rtcl.eecs.umich.edu/outgoing/dpk/impl.ps.Z
Refering-URL: http://www.eecs.umich.edu/RTCL/harts/
Root-URL: 
Email: kgshin@eecs.umich.edu  
Title: Design of a Communication Subsystem for HARTS  
Author: Dilip D. Kandlur Kang G. Shin T. J. 
Keyword: Index Terms Real-time systems, communications, guaranteed delay, operating systems.  
Address: Yorktown Heights, NY 10598  kandlur@watson.ibm.com Ann Arbor, Michigan 48109-2122.  
Affiliation: IBM Research Division Real-Time Computing Laboratory  Watson Research Center Dept. of Elec. Engr. and Comp. Sci.  The University of Michigan  
Abstract: In a distributed real-time system, large or unpredictable delays in the delivery of messages can adversely affect the execution of tasks dependent on these messages. Consequently, it is necessary to associate deadlines with messages between cooperating processes. Therefore, the operating system of a distributed real-time system has to support messages with time constraints, and provide predictable inter-process communication. This paper describes the design of a communication subsystem for HARTS, which is a distributed real-time system being developed at the Real-Time Computing Laboratory, the University of Michigan. This subsystem supports a scheme for predictable inter-process communication in which the system provides a priori guarantees for the timely delivery of messages. It also provides other services like clock synchronization and reliable broadcasting, services that are required to support critical real-time applications. The work reported here was supported in part by an IBM Graduate Fellowship and by the Office of Naval Research under Contract N00014-85-K-0122. Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the funding agencies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. P. Anderson, S. Y. Tzou, R. Wahbe, R. Govindan, and M. Andrews, </author> <title> "Support for continuous media in the DASH system," </title> <booktitle> in Proc. 10th International Conference on Distributed Computing Systems, </booktitle> <pages> pp. 54-61. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1990. </year>
Reference-contexts: The message generation process is specified in terms of a linear bounded arrival process, a model which was first proposed by Cruz [12]. This model has also been adopted by Anderson and others <ref> [1, 4] </ref> for continuous media applications, and some of the terminology given below is from [1]. <p> The message generation process is specified in terms of a linear bounded arrival process, a model which was first proposed by Cruz [12]. This model has also been adopted by Anderson and others [1, 4] for continuous media applications, and some of the terminology given below is from <ref> [1] </ref>.
Reference: [2] <author> D. P. Anderson, </author> <title> "A software architecture for network communication," </title> <booktitle> in Proc. 8th International Conference on Distributed Computing Systems, </booktitle> <pages> pp. 376-383, </pages> <month> June </month> <year> 1988. </year> <month> 33 </month>
Reference-contexts: There has not been much work reported on the problem of providing time-constrained communication in a local-area point-to-point interconnection network. However, the work by Ferrari, Anderson and others in the DASH and Tenet projects <ref> [15, 2, 3] </ref> dealing with continuous-media communication in wide-area networks is related to the work reported here. Our approach to providing guaranteed real-time communication is similar to the one presented in [15].
Reference: [3] <author> D. P. Anderson and D. Ferrari, </author> <title> "The DASH project: An overview," </title> <type> Technical Report 84/405, </type> <institution> UCB Computer Science Division, EECS, Berkeley, </institution> <address> CA, </address> <month> February </month> <year> 1988. </year>
Reference-contexts: There has not been much work reported on the problem of providing time-constrained communication in a local-area point-to-point interconnection network. However, the work by Ferrari, Anderson and others in the DASH and Tenet projects <ref> [15, 2, 3] </ref> dealing with continuous-media communication in wide-area networks is related to the work reported here. Our approach to providing guaranteed real-time communication is similar to the one presented in [15].
Reference: [4] <author> D. P. Anderson, R. G. Herrtwich, and C. Schaefer, "SRP: </author> <title> A resource reservation protocol for guaranteed performance communication in the internet," </title> <type> Technical Report TR-90-006, </type> <institution> International Computer Science Institute, Berkeley, </institution> <month> February </month> <year> 1990. </year>
Reference-contexts: The message generation process is specified in terms of a linear bounded arrival process, a model which was first proposed by Cruz [12]. This model has also been adopted by Anderson and others <ref> [1, 4] </ref> for continuous media applications, and some of the terminology given below is from [1].
Reference: [5] <author> E. A. Arnould, F. J. Bitz, E. C. Cooper, H. T. Kung, R. D. Sansom, and P. A. Steenkiste, </author> <title> "The design of Nectar: A network backplane for heterogeneous multicomputers," </title> <booktitle> in Proceedings of the Third Intl. Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS-III), </booktitle> <pages> pp. 205-216. </pages> <publisher> ACM, </publisher> <month> April </month> <year> 1989. </year>
Reference-contexts: It is specifically designed for the VMTP protocol, and it provides a 4 5 "device" interface to the application processors which are responsible for executing higher level protocols. The Nectar system <ref> [5] </ref> uses a communications adapter board (CAB) which features a general-purpose SPARC processor. The CAB software organization [11] is similar to our design and provides a high-level interface to the host processors. However, these systems do not deal with the problem of real-time communication. This paper is organized as follows.
Reference: [6] <author> K. Arvind, K. Ramamritham, and J. A. Stankovic, </author> <title> "A local area network architecture for communication in distributed real-time systems," </title> <journal> Journal of Real-Time Systems, </journal> <volume> vol. 3, no. 2, </volume> , <month> May </month> <year> 1991. </year>
Reference-contexts: In their work, the time-constraint on periodic messages is implicitly assumed to be 6 the beginning of the next period. Recently, Arvind and others <ref> [6, 7] </ref> have proposed a scheme for guaranteed delivery of messages on a multiple access network using a window-based medium access control algorithm. However, their guarantee computation is based on a local worst-case analysis where it is assumed that all other nodes in the network have packets to send.
Reference: [7] <author> K. Arvind, K. Ramamritham, and J. A. Stankovic, </author> <title> "Window MAC protocols for real-time communication services," </title> <type> COINS Technical Report 90-127, </type> <institution> University of Massachusetts at Amherst, </institution> <month> January </month> <year> 1991. </year>
Reference-contexts: In their work, the time-constraint on periodic messages is implicitly assumed to be 6 the beginning of the next period. Recently, Arvind and others <ref> [6, 7] </ref> have proposed a scheme for guaranteed delivery of messages on a multiple access network using a window-based medium access control algorithm. However, their guarantee computation is based on a local worst-case analysis where it is assumed that all other nodes in the network have packets to send.
Reference: [8] <author> A. D. Birrell and B. J. Nelson, </author> <title> "Implementing remote procedure calls," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 2, no. 1, </volume> <pages> pp. 39-59, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: The protocol also provides control operations using which processes on the APs can access the time. 5.3 Other Protocols The RPC protocol implements a request-reply operation with at most once semantics, using the technique of Birrell and Nelson <ref> [8] </ref>. It handles only the RPC transport mechanism. Clients of this protocol are expected to marshal the call arguments into a request packet, and subsequently extract the return results from the reply packet. The fragment protocol (FRAG) fragments large messages into link level size packets and transports them.
Reference: [9] <author> J.-M. Chang and N. F. Maxemchuk, </author> <title> "Reliable broadcast protocols," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 2, no. 3, </volume> <pages> pp. 251-273, </pages> <month> August </month> <year> 1984. </year>
Reference-contexts: We have developed a scheme for replication in which the NM functions are placed on three adjacent nodes, so that up to two failures can be tolerated. This is based on the reliable broadcast scheme developed by Chang and Maxemchuk <ref> [9] </ref>. One of the three NMs is picked to be the token holder. The client node broadcasts its request using a simple broadcast. The token holding manager assigns a serial number to the request and processes the request in sequence. <p> Failure of one of the NM nodes has to be handled very carefully, since these maintain primary state information about the rest of system. A failure of this type can be handled using techniques similar to those developed in <ref> [9] </ref>. If the node which failed is the token holder, then our channel establishment procedure ensures that the state information is up-to-date on at least one of the other nodes. Such a node will be selected as the new token holder.
Reference: [10] <author> M.-S. Chen, K. G. Shin, and D. D. Kandlur, </author> <title> "Addressing, routing, and broadcasting in hexagonal mesh multiprocessors," </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. C-39, no. 1, </volume> <pages> pp. 10-18, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: In contrast to these approaches, we consider a (partially connected) point-to-point interconnection network with a regular structure as a good candidate for use in real-time control systems. Examples of such networks include hypercubes and meshes <ref> [36, 10] </ref>. The existence of multiple disjoint paths between nodes in these networks make them robust to link and node 2 failures. Also, the links in this network operate in parallel, thus resulting in a higher total throughput than that of shared medium networks like buses and rings.
Reference: [11] <author> E. C. Cooper, P. A. Steenkiste, R. D. Ransom, and B. D. Zill, </author> <title> "Protocol implementation on the Nectar communication processor," </title> <booktitle> in Proceedings of the SIGCOMM Symposium, </booktitle> <pages> pp. 135-144. </pages> <publisher> ACM, </publisher> <month> September </month> <year> 1990. </year>
Reference-contexts: It is specifically designed for the VMTP protocol, and it provides a 4 5 "device" interface to the application processors which are responsible for executing higher level protocols. The Nectar system [5] uses a communications adapter board (CAB) which features a general-purpose SPARC processor. The CAB software organization <ref> [11] </ref> is similar to our design and provides a high-level interface to the host processors. However, these systems do not deal with the problem of real-time communication. This paper is organized as follows.
Reference: [12] <author> R. L. Cruz, </author> <title> A Calculus for Network Delay and a Note on Topologies of Interconnection Networks, </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> July </month> <year> 1987. </year> <note> available as technical report UILU-ENG-87-2246. </note>
Reference-contexts: Message Generation Model: Since a significant portion of the traffic which requires guarantees will be periodic, our model for message generation is slanted towards periodic traffic. The message generation process is specified in terms of a linear bounded arrival process, a model which was first proposed by Cruz <ref> [12] </ref>. This model has also been adopted by Anderson and others [1, 4] for continuous media applications, and some of the terminology given below is from [1].
Reference: [13] <author> M. L. Dertouzos, </author> <title> "Control robotics: The procedural control of physical processes," </title> <booktitle> in Proceedings IFIP Congress, </booktitle> <pages> pp. 807-813, </pages> <year> 1974. </year>
Reference-contexts: The EDD algorithm has been shown to be the optimal scheduling algorithm for many different environments, including preemptive scheduling of periodic tasks <ref> [13, 32] </ref>. However, it is difficult to determine whether a given task 11 1. Select a source-destination route for the channel. 2. Compute the worst-case delay for a message on each link on the route.
Reference: [14] <author> J. W. Dolter, P. Ramanathan, and K. G. Shin, </author> <title> "A microprogrammable VLSI routing controller for HARTS," </title> <booktitle> in Proc. IEEE Int'l. Conf. on Computer Design: VLSI in Computers, </booktitle> <pages> pp. 160-163, </pages> <address> Boston, MA., </address> <month> October </month> <year> 1989, </year> <note> IEEE. </note>
Reference-contexts: Its main components are the programmable routing controller (PRC), the network interface unit (NI), and the interface management unit (IMU). The PRC, which is an ASIC, subsumes the functions of the original routing controller <ref> [14] </ref> and also interfaces with the general-purpose IMU (a MIPS R3000 processor). The network interface consists of AMD's TAXI serial transmitter/receiver communication devices which are capable of achieving a data throughput rate of 100 Mbps.
Reference: [15] <author> D. Ferrari and D. C. Verma, </author> <title> "A scheme for real-time channel establishment in wide-area networks," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. SAC-8, no. 3, </volume> <pages> pp. 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: There has not been much work reported on the problem of providing time-constrained communication in a local-area point-to-point interconnection network. However, the work by Ferrari, Anderson and others in the DASH and Tenet projects <ref> [15, 2, 3] </ref> dealing with continuous-media communication in wide-area networks is related to the work reported here. Our approach to providing guaranteed real-time communication is similar to the one presented in [15]. <p> However, the work by Ferrari, Anderson and others in the DASH and Tenet projects [15, 2, 3] dealing with continuous-media communication in wide-area networks is related to the work reported here. Our approach to providing guaranteed real-time communication is similar to the one presented in <ref> [15] </ref>. However, our method for computing the guarantees is more general and we can show the delay bound test of [15] as a special case of our method. <p> Our approach to providing guaranteed real-time communication is similar to the one presented in <ref> [15] </ref>. However, our method for computing the guarantees is more general and we can show the delay bound test of [15] as a special case of our method. Moreover, we present an integrated solution to the problem of buffer reservation and flow-control. 2.1 Message Types In a real-time system, there are several classes of messages with different requirements. <p> In the context of time-constrained communication, the communication model has to preserve message boundaries, and so a byte stream model is not suitable. Connection-oriented service is considered more suitable for real-time applications which require guaranteed delivery time for communication <ref> [15] </ref>. The rationale for this choice is that, given an isolated message with an arbitrary deadline, it is very difficult to guarantee its delivery a priori.
Reference: [16] <editor> J. Goldberg et al., </editor> <title> "Development and analysis of SIFT," </title> <type> NASA contractor report 172146, </type> <institution> NASA Langley Research Center, </institution> <month> February </month> <year> 1984. </year> <month> 34 </month>
Reference-contexts: One of the goals in the design of the interconnection network is to provide reliable communication in the presence of component failures. The approach taken in multicomputers like SIFT <ref> [16] </ref> and MAFT [26] is to provide a fully-connected network, where each node is connected to every other node with dedicated point-to-point links. Although this method is extremely reliable, it does not scale and can be used only in systems with a small number of nodes.
Reference: [17] <author> N. C. Hutchinson and L. L. Peterson, </author> <title> "The x-Kernel: An architecture for implementing network protocols," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 17, no. 1, </volume> <pages> pp. 1-13, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Thus, in the 16 discussion that follows, we take the liberty of using the terms "NP" and "ENP" interchangeably. The NP kernel We have employed a derivative of the x-Kernel <ref> [17] </ref> as the executive for the NP, since it is well suited for supporting communication protocols. The x-Kernel provides several facilities for implementing protocols like a uniform protocol interface, and libraries to efficiently manipulate messages and maintain mappings. It supports three types of communication objects: protocols, sessions, and messages. <p> The timing for creating a kernel process was measured by repeatedly creating a process, which immediately destroyed itself. The reported timing therefore is a sum of process create, context switch, and process destroy. The kernel performance is somewhat slower than the figures reported for the Sun-3 <ref> [17] </ref> because the ENP card has a slow (10 MHz) 68000 processor. Also, some of the processing power is used for a software DRAM refresh. The round-trip times reported are all for packets with 100 bytes data.
Reference: [18] <author> N. C. Hutchinson, L. L. Peterson, M. B. Abbott, and S. O'Malley, </author> <title> "RPC in the x-Kernel: Evaluating new design techniques," </title> <booktitle> in Proc. 12th Symp. on Operating Systems Principles, </booktitle> <pages> pp. 91-101. </pages> <publisher> ACM, </publisher> <month> December </month> <year> 1989. </year>
Reference-contexts: Among the protocols, hnet implements the hexagonal mesh link-level protocol, and uses Ethernet encapsulation for packet transmission. The request-reply protocol is based on the chan protocol (see <ref> [18] </ref>) and implements RPC transport. The application interface has also been implemented and supports both synchronous and asynchronous delivery of messages. Table 2 shows sample performance measurements for some selected operations.
Reference: [19] <author> H. Kanakia and D. R. Cheriton, </author> <title> "The VMP network adapter board (NAB): High-performance network communications for multiprocessors," </title> <booktitle> in Proceedings of the SIG-COMM Symposium, </booktitle> <pages> pp. 175-187. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1988. </year>
Reference-contexts: However, this does not necessarily translate into longer execution time because of the execution-communication overlap between the APs and the NP. Other systems have also used communication processors to improve network performance. The network adapter board of the VMP system <ref> [19] </ref> implements some link and network level protocols in the hardware. It is specifically designed for the VMTP protocol, and it provides a 4 5 "device" interface to the application processors which are responsible for executing higher level protocols.
Reference: [20] <author> D. D. Kandlur, </author> <title> "The x-kernel on the ENP-10 Ethernet processor," RTCL working document, </title> <month> December </month> <year> 1990. </year>
Reference-contexts: For example, the ENP-10 does not have any memory mapping hardware, nor does it make any distinction between user and supervisor state for memory access. Hence, the process management routines have been modified to remove all virtual address space support. Details of this port can be found in <ref> [20] </ref>. The application programmer interface to the communication subsystem has been designed to provide both synchronous and asynchronous forms of message delivery. The interface allows uniform access to any protocol on the NP, and is implemented as a layer which is split across the NP and the APs.
Reference: [21] <author> D. D. Kandlur, </author> <title> Networking in Distributed Real-time Systems, </title> <type> PhD thesis, </type> <institution> The University of Michigan, Ann Arbor, Rackham School of Graduate Studies, </institution> <address> Ann Arbor, Michigan 48109, </address> <month> August </month> <year> 1991. </year>
Reference-contexts: Signaling between the NP and the APs is accomplished using mailboxes in memory, and inter-processor interrupts. Fig. 5 shows a block diagram of the interface, further details can be found in <ref> [21] </ref>. 18 5 Communication Services Communication services are provided in the form of protocols running on the x-Kernel. Fig. 6 gives an overview of the communication subsystem, and shows the dependencies between various protocols. The link-level protocol supports broadcast addresses, and also provides a reliable broadcast mechanism.
Reference: [22] <author> D. D. Kandlur, D. L. Kiskis, and K. G. Shin, "HARTOS: </author> <title> a distributed real-time operating system," </title> <journal> ACM SIGOPS Operating Systems Review, </journal> <volume> vol. 23, no. 3, </volume> <pages> pp. 72-89, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: It is implemented as a client of the RPC protocol, which it uses to talk to its peers on other nodes. The protocol uses broadcasting to locate remote objects, so the RPC protocol was modified to accept broadcast destination addresses. We can implement the existing HARTOS calls <ref> [22] </ref> in the form of a client protocol module sitting on top of RPC. Some of the HARTOS calls are not necessary because their function has been subsumed in other protocols.
Reference: [23] <author> D. D. Kandlur and K. G. Shin, </author> <title> "Traffic routing for networks with virtual cut-through capability," </title> <booktitle> in Proc. 10th International Conference on Distributed Computing Systems, </booktitle> <pages> pp. 398-405. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1990. </year>
Reference-contexts: The actual processing time for a message is proportional to its length and since HARTS is homogeneous, it is not node dependent. We employ an incremental routing algorithm, described in <ref> [23] </ref>, to select routes for channels. This algorithm uses the link loads imposed by existing channels as a parameter in the selection of the route for the new channel.
Reference: [24] <author> D. D. Kandlur and K. G. Shin, </author> <title> "Reliable broadcast algorithms for HARTS," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 9, </volume> , <month> November </month> <year> 1991. </year>
Reference-contexts: Therefore, it is necessary to provide support for efficient broadcasting, and for reliable broadcasting in the presence of unknown (or even Byzantine) faults. In earlier work we have developed solutions to some of these problems, for example, clock synchronization [34] and reliable broadcasting <ref> [24] </ref>. Typically, clock synchronization can be achieved by using either hardware or software solutions. Hardware solutions can achieve very tight synchronization, but they do so at the expense of employing additional lines for clock signals or using a separate clock network. <p> It is a software algorithm that requires no modifications to the network, and uses timestamp-ing hardware at the nodes to achieve reasonably tight synchronization. For broadcasting, we 3 developed a broadcast primitive which is applicable to interconnection networks with virtual cut-through switching <ref> [24] </ref>. The primitive is well-suited for broadcasting in mesh-connected multicomputers, where a simple broadcast can be achieved using only two packet transmissions in the best case. <p> Broadcast packets also carry some additional information in the route specification field, hop count, tag and step, which is required to implement the broadcast algorithms of <ref> [24] </ref>. When a broadcast packet is received, this protocol module notes the direction in which it was received and checks to see whether the packet was able to propagate forward using virtual cut-through at the PRC. <p> If not, it assumes the responsibility of propagating the packet forward in conformance with the RELAY primitive <ref> [24] </ref>. It then uses the destination, hop count, tag, and step fields, and the direction information, to determine whether the packet has to be forwarded in any other directions.
Reference: [25] <author> D. D. Kandlur, K. G. Shin, and D. Ferrari, </author> <title> "Real-time communication in multi-hop networks," </title> <booktitle> in Proceedings of the 11th Intl. Conference on Distributed Computing Systems, </booktitle> <pages> pp. 300-307. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1991. </year>
Reference-contexts: The priority mechanism used for the transmission of these messages is described in Section 3.2. Real-time messages: The channel establishment operation is quite complicated in this case, and its detailed account is given in <ref> [25] </ref>. It is summarized here for completeness. In a point-to-point interconnection network, there are two alternatives for routing messages in the network, namely dynamic and static routing. <p> We therefore use fixed-priority scheduling as a heuristic in determining the feasibility. When a channel is to be established, for each link on its route we estimate the worst-case response time for a message based on fixed-priority scheduling using the method outlined in <ref> [25] </ref>. The response time analysis is based on an approximation of preemptive scheduling. Pure preemptive scheduling cannot be used in the context of message scheduling, because, if the transmission of a message is interrupted, the message is lost and has to be retransmitted. <p> While using this procedure, it is necessary to ensure that the new channel does not affect the guaranteed delivery times of existing channels. This is taken care of when assigning the priority of each channel as described in <ref> [25] </ref>. 12 3.2 Run-time Scheduling Messages are composed of packets, and packets carry information about the message and the channel, to which they belong. When a packet arrives at a node, or is generated in the node, it is dispatched to the appropriate outgoing link. <p> Since the worst-case link delay for a channel depends mainly on the other channels using that link, we do not have to consider other traffic while computing the link load. The algorithm for computing the worst-case link delay, which is presented in <ref> [25] </ref>, is a pseudo-polynomial time algorithm. Its execution time depends on the number of channels and the inter-arrival time of messages on the channels.
Reference: [26] <author> R. M. Kieckhafer, C. J. Walter, A. M. Finn, and P. M. Thambidurai, </author> <title> "The MAFT architecture for distributed fault tolerance," </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. C-37, no. 4, </volume> <pages> pp. 398-405, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: One of the goals in the design of the interconnection network is to provide reliable communication in the presence of component failures. The approach taken in multicomputers like SIFT [16] and MAFT <ref> [26] </ref> is to provide a fully-connected network, where each node is connected to every other node with dedicated point-to-point links. Although this method is extremely reliable, it does not scale and can be used only in systems with a small number of nodes.
Reference: [27] <author> J. F. Kurose, M. Schwartz, and Y. Yemini, </author> <title> "Multiple-access protocols and time-constrained communication," </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 16, no. 1, </volume> <pages> pp. 43-70, </pages> <month> March </month> <year> 1984. </year>
Reference-contexts: For example, in the case of CSMA/CD networks, the proposed protocols include the virtual-time based methods [41] and the window-based access methods [28, 42]. The survey paper by Kurose et al. <ref> [27] </ref> discusses many of the other proposed techniques. Most of these schemes can be classified as best-effort schemes, where the system tries to ensure that most messages meet their deadlines, but it cannot give any guarantees about the delivery times.
Reference: [28] <author> J. F. Kurose, M. Schwartz, and Y. Yemini, </author> <title> "Controlling window protocols for time-constrained communication in multiple access networks," </title> <journal> IEEE Trans. Communications, </journal> <volume> vol. 36, no. 1, </volume> <pages> pp. 41-49, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: Many of these efforts have been directed towards designing medium access protocols for multiple-access networks which consider time constraints on messages. For example, in the case of CSMA/CD networks, the proposed protocols include the virtual-time based methods [41] and the window-based access methods <ref> [28, 42] </ref>. The survey paper by Kurose et al. [27] discusses many of the other proposed techniques. Most of these schemes can be classified as best-effort schemes, where the system tries to ensure that most messages meet their deadlines, but it cannot give any guarantees about the delivery times.
Reference: [29] <author> J. H. Lala, </author> <title> "AIPS tutorial," </title> <type> Technical report, </type> <institution> The Charles Stark Draper Laboratory, Inc., </institution> <month> January </month> <year> 1987. </year>
Reference-contexts: Although this method is extremely reliable, it does not scale and can be used only in systems with a small number of nodes. For larger systems, it is necessary to use networks which are not fully-connected. A notable approach to providing fault-tolerant communications is the AIPS virtual bus scheme <ref> [29, 30] </ref>. The AIPS network controllers are connected by multiple point-to-point links, but they are configured under software control to act as a single virtual bus.
Reference: [30] <author> J. H. Lala, R. E. Harper, and L. S. Alger, </author> <title> "A design approach for ultrareliable real-time systems," </title> <journal> IEEE Computer, </journal> <volume> vol. 24, no. 5, </volume> <pages> pp. 12-22, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Although this method is extremely reliable, it does not scale and can be used only in systems with a small number of nodes. For larger systems, it is necessary to use networks which are not fully-connected. A notable approach to providing fault-tolerant communications is the AIPS virtual bus scheme <ref> [29, 30] </ref>. The AIPS network controllers are connected by multiple point-to-point links, but they are configured under software control to act as a single virtual bus.
Reference: [31] <author> L. Lamport and P. M. Melliar-Smith, </author> <title> "Synchronizing clocks in the presence of faults," </title> <journal> Journal of ACM, </journal> <volume> vol. 32, no. 1, </volume> <pages> pp. 52-78, </pages> <month> January </month> <year> 1985. </year> <month> 35 </month>
Reference-contexts: It uses the clock synchronization scheme presented in [34] since it allows moderately tight synchronization and does not require a separate clock network. This scheme relies on a hardware timestamping mechanism to disseminate its clock value to other nodes [34] and uses the Interactive Convergence Algorithm <ref> [31] </ref> on the clock values that it receives from other nodes. The network interface must affix a transmit timestamp to a clock packet just before its transmission and it must append a receive timestamp to any clock packet that it receives.
Reference: [32] <author> C. L. Liu and J. W. Layland, </author> <title> "Scheduling algorithms for multiprogramming in a hard--real-time environment," </title> <journal> Journal of the ACM, </journal> <volume> vol. 20, no. 1, </volume> <pages> pp. 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: The EDD algorithm has been shown to be the optimal scheduling algorithm for many different environments, including preemptive scheduling of periodic tasks <ref> [13, 32] </ref>. However, it is difficult to determine whether a given task 11 1. Select a source-destination route for the channel. 2. Compute the worst-case delay for a message on each link on the route.
Reference: [33] <author> A. Olson and K. G. Shin, </author> <title> "Probabilistic clock synchronization in large distributed systems," </title> <booktitle> in Proceedings of the 11th Intl. Conference on Distributed Computing Systems, </booktitle> <pages> pp. 290-297. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1991. </year>
Reference-contexts: For example, we will be able to measure the performance of the reliable broadcast algorithms using representative workloads. We will also be able to measure the overheads of our clock synchronization algorithm and compare it against other proposed algorithms, such as <ref> [33] </ref>. Moreover, we can experiment with the policies used for scheduling messages to assess their effects on the best-effort class of messages. Acknowledgments We would like to thank James Dolter, Stuart Daniel, and Ashish Mehra for the many useful discussions regarding the design of the HARTS NP.
Reference: [34] <author> P. Ramanathan, D. D. Kandlur, and K. G. Shin, </author> <title> "Hardware-assisted software clock synchronization for homogeneous distributed systems," </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. C-39, no. 4, </volume> <pages> pp. 514-524, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Therefore, it is necessary to provide support for efficient broadcasting, and for reliable broadcasting in the presence of unknown (or even Byzantine) faults. In earlier work we have developed solutions to some of these problems, for example, clock synchronization <ref> [34] </ref> and reliable broadcasting [24]. Typically, clock synchronization can be achieved by using either hardware or software solutions. Hardware solutions can achieve very tight synchronization, but they do so at the expense of employing additional lines for clock signals or using a separate clock network. <p> Software solutions, on the other hand, use messages to periodically exchange clock values between nodes and they adjust the individual clocks based on these clock values. In <ref> [34] </ref>, we developed a clock synchronization scheme which strikes a balance between the additional hardware required and the clock skews that can be attained. It is a software algorithm that requires no modifications to the network, and uses timestamp-ing hardware at the nodes to achieve reasonably tight synchronization. <p> This definition of the logical arrival time is feasible because the nodes in the system have synchronized clocks. We assume that the maximum skew between clocks on different nodes is small compared to the message delivery delays, and skews of this order can be realized (as in <ref> [34] </ref>). The logical arrival time that is assigned to messages is used by the message scheduler, which is based on a variation of the multiclass EDD algorithm. <p> It uses the clock synchronization scheme presented in <ref> [34] </ref> since it allows moderately tight synchronization and does not require a separate clock network. This scheme relies on a hardware timestamping mechanism to disseminate its clock value to other nodes [34] and uses the Interactive Convergence Algorithm [31] on the clock values that it receives from other nodes. <p> It uses the clock synchronization scheme presented in <ref> [34] </ref> since it allows moderately tight synchronization and does not require a separate clock network. This scheme relies on a hardware timestamping mechanism to disseminate its clock value to other nodes [34] and uses the Interactive Convergence Algorithm [31] on the clock values that it receives from other nodes. The network interface must affix a transmit timestamp to a clock packet just before its transmission and it must append a receive timestamp to any clock packet that it receives. <p> W 3 : Clock time of the immediate sender when it relayed this message. W 4 : Accumulated transit delay not counting the delay at the im mediate sender. W 5 : The time on the local clock when this message was received. 21 The description in <ref> [34] </ref> assumes that the clock used for timestamping is the same as the node clock. In practice, the timing constraints imposed by the timestamping mechanism on the send-receive hardware are such that it is necessary to use more than one clock.
Reference: [35] <author> P. Ramanathan and K. G. Shin, </author> <title> "A multiple copy approach to delivering messages under deadline constraints," </title> <booktitle> in Proceedings of the Twenty-first International Symposium on Fault-tolerant Computing, </booktitle> <pages> pp. 300-307. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1991. </year>
Reference-contexts: These paths have to be node disjoint, so that the message will be delivered even in the presence of congestion and failures. We also choose the paths such that their interaction with the paths of other Alert messages is minimized. Ramanathan and Shin <ref> [35] </ref> show how the multiple copy approach can improve the probability of timely delivery for messages in addition to tolerating component failures. Non real-time messages: In this case, channel establishment is a local operation.
Reference: [36] <author> C. L. Seitz, </author> <title> "The cosmic cube," </title> <journal> Communications of ACM, </journal> <volume> vol. 28, no. 1, </volume> <pages> pp. 22-33, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: In contrast to these approaches, we consider a (partially connected) point-to-point interconnection network with a regular structure as a good candidate for use in real-time control systems. Examples of such networks include hypercubes and meshes <ref> [36, 10] </ref>. The existence of multiple disjoint paths between nodes in these networks make them robust to link and node 2 failures. Also, the links in this network operate in parallel, thus resulting in a higher total throughput than that of shared medium networks like buses and rings.
Reference: [37] <author> K. G. Shin, </author> <title> "HARTS: A distributed real-time architecture," </title> <journal> IEEE Computer, </journal> <volume> vol. 24, no. 5, </volume> <pages> pp. 25-35, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: In this paper, our aim is to integrate and implement these solutions to provide communication services for applications. Our approach is to develop a communication subsystem which supports real-time communication and provides a global time-base for the system. We use HARTS <ref> [37] </ref>, which is a distributed real-time system being developed at the Real-time Computing Laboratory, The University of Michigan, as the vehicle for our development. The system is comprised of several multiprocessor nodes connected by a point-to-point interconnection network with a hexagonal mesh topology.
Reference: [38] <author> J. A. Stankovic and K. Ramamritham, </author> <title> Tutorial: Hard Real-Time Systems, </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1988. </year>
Reference-contexts: 1 Introduction A commonly-used definition states that a real-time system is one in which the value of a computation depends not only on the logical correctness of the results, but also on the time at which the results are produced <ref> [38] </ref>. This definition reinforces the notion that time is one of the most important entities in the system, and there are timing constraints associated with system tasks.
Reference: [39] <author> J. K. Strosnider, </author> <title> Highly Responsive Real-Time Token Rings, </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: Moreover, we present an integrated solution to the problem of buffer reservation and flow-control. 2.1 Message Types In a real-time system, there are several classes of messages with different requirements. As was done in <ref> [39] </ref>, we classify message traffic into three classes: 1. Alert messages 2. Real-time messages 3. Non real-time messages. Alert messages are aperiodic and have strict delivery time constraints. They are considered to represent critical conditions, hence they are allowed to interfere with normal system operations.
Reference: [40] <author> J. K. Strosnider and T. E. Marchok, </author> <title> "Responsive, deterministic IEEE 802.5 token ring scheduling," </title> <journal> Journal of Real-Time Systems, </journal> <volume> vol. 1, no. 2, </volume> <pages> pp. 133-158, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: The performance of these algorithms is demonstrated mainly by simulation using certain stochastic arrival and deadline patterns. On the other hand, when the system has some information about the arrival pattern of messages, it can provide guarantees about their delivery times. For example, Strosnider and Marchok <ref> [40] </ref> use a variation of the rate-monotonic scheduling algorithm to control access to a token-ring network. They assign priorities at design time to message sources based on the periodicity of message generation using which they can check for the possibility of deadline overrun.
Reference: [41] <author> W. Zhao and K. Ramamritham, </author> <title> "Virtual time CSMA protocols for hard real-time communication," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 13, no. 8, </volume> <pages> pp. 938-952, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: Many of these efforts have been directed towards designing medium access protocols for multiple-access networks which consider time constraints on messages. For example, in the case of CSMA/CD networks, the proposed protocols include the virtual-time based methods <ref> [41] </ref> and the window-based access methods [28, 42]. The survey paper by Kurose et al. [27] discusses many of the other proposed techniques.
Reference: [42] <author> W. Zhao, J. A. Stankovic, and K. Ramamritham, </author> <title> "A multi-access window protocol for transmission of time constrained messages," </title> <booktitle> in Proc. 8th International Conference on Distributed Computing Systems, </booktitle> <pages> pp. 384-392, </pages> <month> June </month> <year> 1988. </year> <month> 36 </month>
Reference-contexts: Many of these efforts have been directed towards designing medium access protocols for multiple-access networks which consider time constraints on messages. For example, in the case of CSMA/CD networks, the proposed protocols include the virtual-time based methods [41] and the window-based access methods <ref> [28, 42] </ref>. The survey paper by Kurose et al. [27] discusses many of the other proposed techniques. Most of these schemes can be classified as best-effort schemes, where the system tries to ensure that most messages meet their deadlines, but it cannot give any guarantees about the delivery times.
References-found: 42

