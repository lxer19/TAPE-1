URL: http://www.icsi.berkeley.edu/ftp/global/pub/techreports/1994/tr-94-013.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/ftp/global/pub/techreports/1994/
Root-URL: http://www.icsi.berkeley.edu
Email: fgaede,guentherg@wiwi.hu-berlin.de  
Title: Processing Joins with User-Defined Functions  
Author: Volker Gaede and Oliver G unther 
Keyword: functional join, query processing, user-defined predicates, -ordering, -function, extensible and object-oriented database system  
Address: Spandauer Str. 1 10178 Berlin, Germany  
Affiliation: Institut f ur Wirtschaftsinformatik Humboldt-Universit at zu Berlin  
Abstract: Most strategies for the computation of relational joins (such as sort-merge or hash-join) are facing major difficulties if the join predicate involves complex, user-defined functions rather than just simple arithmetic comparisons. In this paper, we identify a class of user-defined functions that can be included in a join predicate, such that a join between two sets R and S can still be computed efficiently, i.e., in time significantly less than O(jRj jSj). For that purpose, we introduce the notion of the -function, an operator to process each set element separately with respect to the user-defined function(s) being used. Then any particular join query containing those functions can be computed by a variation of some traditional join strategy. After demonstrating this technique on a spatial database example, we present the results of a theoretical analysis and a practical performance evaluation. 
Abstract-found: 1
Intro-found: 1
Reference: [AF93] <author> Karl Aberer and Gisela Fischer. </author> <title> Object-oriented query processing: The impact of methods on language, architecture and optimization. </title> <type> Technical Report GMD no. 763, </type> <institution> GMD-IPSI, Darmstadt, Germany, </institution> <year> 1993. </year>
Reference-contexts: Several proposals have been made to address this problem. Graefe and Maier present an approach where a request can be sent to a class or object to reveal any relevant execution information [GM88]. Aberer and Fischer <ref> [AF93] </ref> recently proposed a scheme to optimize methods based on equivalences within a method algebra. The revelation scheme of the P/FDM system [JG91] is only applicable if the a canonical form of the function (e.g., its source code) is available to the optimizer.
Reference: [BKS93] <author> Thomas Brinkhoff, Hans-Peter Kriegel, and Bernhard Seeger. </author> <title> Efficient processing of spatial joins using r-trees. </title> <booktitle> In Proc. of the 1993 ACM Int. Conf. on the Management of Data, SIGMOD Record, </booktitle> <volume> volume 22, </volume> <pages> pages 237-246, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Due to the spatial nature of the adjacent operator, it is also called a spatial join <ref> [BKS93, G u93] </ref>. If the operands are regular cells, as they result from a z-order partitioning of space, adjacent fulfills the criteria for being a -predicate, which can be shown as follows. Two cells are considered adjacent (or neighbors) if they share at least one common border (4-adjacency).
Reference: [Bla91] <author> Jose A. Blakeley. </author> <title> Object query module. </title> <type> Technical report, </type> <institution> Texas Instrument Incorporation, </institution> <year> 1991. </year> <title> DARPA Open Object-Oriented Database Preliminary Module Specification. </title>
Reference-contexts: Once introduced, these user-defined functions may of course be included in queries, e.g., as a -operator in a join query. Consider the following example that refers to two user-defined functions called adjacent and area (here we use the syntax of the object-oriented query language ZQL [C++], as defined in <ref> [Bla91] </ref>): Query 1 set&lt;NewObject&gt; * result; result = SELECT NewObject (b, r) FROM Biotope * b IN Biotope_extent, Road * r IN Road_extent WHERE adjacent (b, r) && area (b) &gt;= 50; With regard to efficient query processing, the main problem is that user-defined operators are black boxes for the optimizer.
Reference: [Dit91] <author> Klaus R. Dittrich. </author> <title> Object-oriented database systems: The notion and the issues. </title> <booktitle> In On Object-Oriented Database Systems, </booktitle> <pages> pages 3-10. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: To handle these requirements, an increasing number of commercial database systems allow users to introduce their own application-specific data types and operators. This kind of extensibility is also an essential feature of object-oriented database systems; it is often called behavioral object-orientation <ref> [Dit91] </ref>. Once introduced, these user-defined functions may of course be included in queries, e.g., as a -operator in a join query.
Reference: [Gae93] <author> Volker Gaede. </author> <title> Z-ordering and its application in the context of query processing. </title> <type> Technical Report FAW-TR-93016, </type> <institution> FAW Ulm, Germany, </institution> <year> 1993. </year>
Reference-contexts: Note that z-ordering does not completely preserve spatial proximity. For a comprehensive discussion of z-values and their possible usage in the context of query processing see, for example, [OM88] or <ref> [Gae93] </ref>. @ @ E E L t t 000 001 010 011 100 101 110 111 0 1 001 011 101 111 10 00 1 0110 110001001 001 corresponding z-values.
Reference: [GM88] <author> G otz Graefe and David Maier. </author> <title> Query optimization in object-oriented database system: A prospectus. </title> <booktitle> In Advances in Object-Oriented Database System, </booktitle> <pages> pages 358-363. </pages> <publisher> Springer Verlag, </publisher> <month> September </month> <year> 1988. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <pages> 334. </pages>
Reference-contexts: Several proposals have been made to address this problem. Graefe and Maier present an approach where a request can be sent to a class or object to reveal any relevant execution information <ref> [GM88] </ref>. Aberer and Fischer [AF93] recently proposed a scheme to optimize methods based on equivalences within a method algebra. The revelation scheme of the P/FDM system [JG91] is only applicable if the a canonical form of the function (e.g., its source code) is available to the optimizer. <p> This set of equivalences can be made available to the optimizer in a Revelation-like fashion <ref> [GM88] </ref>, e.g., by sending a message to the -function to reveal possible equivalences. Second, as can be seen from the execution plan, the -function is a stream operator similar to the well-known sort operator.
Reference: [Gra93] <author> G otz Graefe. </author> <title> Query evaluation techniques for large databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 25(2) </volume> <pages> 73-170, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Note that in those descriptions, the roles of R and S may be exchanged, depending on efficiency considerations. Note also that some (but not all) of these strategies remain applicable for being an arithmetic comparison operator other than equality. For a more detailed overview see, for example, [ME92] or <ref> [Gra93] </ref>. While the equijoin is still the most common join operation, the relevance of more complex -operators is increasing steadily. Non-standard database applications such as CAD, geography, or multimedia require more advanced ways to connect different data sets, including spatial and temporal operators.
Reference: [G u93] <author> Oliver G unther. </author> <title> Efficient computation of spatial joins. </title> <booktitle> In Proc. 9th Int. Conf. on Data Engineering, </booktitle> <year> 1993. </year>
Reference-contexts: Due to the spatial nature of the adjacent operator, it is also called a spatial join <ref> [BKS93, G u93] </ref>. If the operands are regular cells, as they result from a z-order partitioning of space, adjacent fulfills the criteria for being a -predicate, which can be shown as follows. Two cells are considered adjacent (or neighbors) if they share at least one common border (4-adjacency).
Reference: [HS93] <author> Joseph M. Hellerstein and Michael Stonebraker. </author> <title> Predicate migration: Optimizing queries with expensive predicates. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 267-276, </pages> <year> 1993. </year>
Reference-contexts: The revelation scheme of the P/FDM system [JG91] is only applicable if the a canonical form of the function (e.g., its source code) is available to the optimizer. If the source code is not available, the optimizer usually resorts to a simple nested loop algorithm. Hellerstein and Stonebraker <ref> [HS93] </ref> recently proposed an optimization scheme for expensive predicates based on ranking. Their approach tackles the problem in a practical 2 fashion but leaves space for more optimization, especially of more complex join predicates (see section 6). <p> [# loop iterations]) Join 500x500 (merge) D=17 (1 function call) 3 3 3 3 3 D=5 (5 function calls) + + + + D=9 (9 function calls) 2 2 2 2 D=17 (17 function calls) fi fi fi fi 6 A Note on Implementation Issues The application of predicate migration <ref> [HS93] </ref> to Query 1 would probably result in the query plan given in figure 5 (a), i.e., Postgres would resort to a simple nested loop. Since the join predicate is not a simple equivalence test anymore, the optimizer would not be able to propose a better strategy.
Reference: [JG91] <author> Zhuoan Jiao and Peter M. D. Gray. </author> <title> Optimisation of methods in a navigational query language. </title> <booktitle> In Proc. of the 2nd Int. Conf. on Deductive and Object-Oriented Databases, </booktitle> <pages> pages 22-35, </pages> <year> 1991. </year>
Reference-contexts: Graefe and Maier present an approach where a request can be sent to a class or object to reveal any relevant execution information [GM88]. Aberer and Fischer [AF93] recently proposed a scheme to optimize methods based on equivalences within a method algebra. The revelation scheme of the P/FDM system <ref> [JG91] </ref> is only applicable if the a canonical form of the function (e.g., its source code) is available to the optimizer. If the source code is not available, the optimizer usually resorts to a simple nested loop algorithm.
Reference: [ME92] <author> Priti Mishra and Margaret H. Eich. </author> <title> Join processing in relational databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(1) </volume> <pages> 63-113, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Note that in those descriptions, the roles of R and S may be exchanged, depending on efficiency considerations. Note also that some (but not all) of these strategies remain applicable for being an arithmetic comparison operator other than equality. For a more detailed overview see, for example, <ref> [ME92] </ref> or [Gra93]. While the equijoin is still the most common join operation, the relevance of more complex -operators is increasing steadily. Non-standard database applications such as CAD, geography, or multimedia require more advanced ways to connect different data sets, including spatial and temporal operators.
Reference: [OM88] <author> Jack A. Orenstein and Frank Manola. </author> <title> Probe: Spatial data modeling and query processing in an image database application. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14 </volume> <pages> 611-629, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Instead of decrypting each tuple to perform a requested predicate evaluation, one could transform the interesting tuples by means of the -function and then search the result. 4 3 An Example 3.1 Z-Ordering A spatial access method well-known in the field of geographic databases is the z-ordering proposed by Orenstein <ref> [OM88] </ref>. Z-ordering is based on the successive regular subdivision of a given area into smaller rectangles or squares. Orenstein uses the Peano order to sort the cells of the resulting grid, and a bit-interleaving scheme to attach a unique identifier (the z-value) to each one of them. <p> Note that z-ordering does not completely preserve spatial proximity. For a comprehensive discussion of z-values and their possible usage in the context of query processing see, for example, <ref> [OM88] </ref> or [Gae93]. @ @ E E L t t 000 001 010 011 100 101 110 111 0 1 001 011 101 111 10 00 1 0110 110001001 001 corresponding z-values.
Reference: [SZ90] <author> Gail M. Shaw and Stanley B. Zdonik. </author> <title> A query algebra for object-oriented databases. </title> <booktitle> In Proc. IEEE Conf. on Data Engineering, </booktitle> <pages> pages 154-162, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: For example, in order to find all pairs of objects in a spatial database whose distance is less than d, it suffices to define one -predicate and represent d as a parameter c k . 3. The Ojoin defined by Shaw and Zdonik <ref> [SZ90] </ref> in the context of object-oriented databases is also a special case of a functional join.
Reference: [Ull88] <author> Jeffrey Ullman. </author> <booktitle> Principles of Database and Knowledge Base Systems, </booktitle> <volume> volume 1. </volume> <publisher> Computer Science Press, </publisher> <year> 1988. </year> <month> 23 </month>
Reference-contexts: 1 Introduction One of the most common operations in relational database systems is the relational join. Ullman <ref> [Ull88] </ref> gives the following definition: Definition 1 (-Join) The -join of relations R and S on columns i and j, written R 1 ij S, where is an arithmetic comparison operator (=; &lt;; and so on), is those tuples in the Cartesian product of R and S where the i-th component
Reference: [Val87] <author> P. Valduriez. </author> <title> Join indices. </title> <journal> ACM Transaction on Database Systems, </journal> <volume> 12(2), </volume> <year> 1987. </year> <month> 24 </month>
References-found: 15

