URL: http://swarm.cs.wustl.edu/csg/papers/1998-1.ps.Z
Refering-URL: http://swarm.cs.wustl.edu/cgi-bin/pubs/papers/
Root-URL: 
Email: roman@cs.wustl.edu  mccap@research.bell-labs.com  
Phone: 2  
Title: An Introduction to Mobile UNITY  
Author: Gruia-Catalin Roman and Peter J. McCann 
Web: http://www.cs.wustl.edu/~roman  
Address: One Brookings Drive, St. Louis, MO 63130 U.S.A.  1000 E. Warrenville Road, Naperville, IL 60566 U.S.A.  
Affiliation: 1 Washington University, Department of Computer Science  Bell Laboratories, Lucent Technologies  
Abstract: We define a mobile system as a collection of independently executing components which may migrate through some (logical or physical) space during the course of the computation, with the pattern of connectivity among components changing as they move in and out of proximity. This paper presents Mobile UNITY, a modular notation for expressing mobile computations and a logic for reasoning about their temporal properties.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> M. Satyanarayanan, James J. Kistler, Lily B. Mummert, Maria R. Ebling, Puneet Kumar, and Qi Lu, </author> <title> "Experience with disconnected operation in a mobile computing environment," </title> <booktitle> in Proceedings of the USENIX Symposium on Mobile and Location-Indepedent Computing, </booktitle> <address> Cambridge, MA, </address> <year> 1993, </year> <pages> pp. 11-28. </pages>
Reference-contexts: By "decoupled," we mean that applications must be able to run while disconnected from or weakly connected to servers. "Opportunistic" means that interactions can be accomplished only when connectivity is available. These aspects are already apparent in working systems such as Coda <ref> [1] </ref>, a filesystem supporting disconnected operation, and Bayou [2], a replicated database where updates are propagated by pairwise interaction among servers, without involving any global synchronization.
Reference: 2. <author> D. Terry, M. Theimer, K. Petersen, A. Demers, M. Spreitzer, and C. Hauser, </author> <title> "Managing update conflicts in Bayou, a weakly connected replicated storage system," </title> <journal> Operating Systems Review, </journal> <volume> vol. 29, no. 5, </volume> <pages> pp. 172-83, </pages> <year> 1995. </year>
Reference-contexts: These aspects are already apparent in working systems such as Coda [1], a filesystem supporting disconnected operation, and Bayou <ref> [2] </ref>, a replicated database where updates are propagated by pairwise interaction among servers, without involving any global synchronization. In addition to being weakly connected, mobile computers change location frequently, which leads to demand for context dependent services, e.g., the location dependent World Wide Web browser of Voelker et al [3].
Reference: 3. <author> Geoffrey M. Voelker and Brian N. Bershad, "Mobisaic: </author> <title> An information system for a mobile wireless computing environment," </title> <booktitle> in Proceedings of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <year> 1994, </year> <pages> pp. 185-90, </pages> <publisher> IEEE. </publisher>
Reference-contexts: In addition to being weakly connected, mobile computers change location frequently, which leads to demand for context dependent services, e.g., the location dependent World Wide Web browser of Voelker et al <ref> [3] </ref>. Even if the goal is transparent mobility, e.g., Mobile IP [4], explicit reasoning about location and location changes is required to argue that a given protocol properly implements location transparency. This paper proposes a new notation and underlying formal model supporting specification of and reasoning about decoupled, location-aware systems.
Reference: 4. <author> Charles Perkins, </author> <title> "IP mobility support," RFC 2002, </title> <institution> IETF Network Working Group, </institution> <year> 1996. </year>
Reference-contexts: In addition to being weakly connected, mobile computers change location frequently, which leads to demand for context dependent services, e.g., the location dependent World Wide Web browser of Voelker et al [3]. Even if the goal is transparent mobility, e.g., Mobile IP <ref> [4] </ref>, explicit reasoning about location and location changes is required to argue that a given protocol properly implements location transparency. This paper proposes a new notation and underlying formal model supporting specification of and reasoning about decoupled, location-aware systems. Our approach is based on the UNITY [5] model of concurrency. <p> Several pairwise high-level transient interaction constructs (e.g., shared variables and statement synchronization) were presented in [7]. Moreover, Mobile UNITY has been used in [8] in an exercise involving the specification and verification of a network protocol (Mobile IP <ref> [4] </ref>) and to express various forms of code mobility [9]. The notation promises to be a useful research tool for investigating new abstractions in mobile computing.
Reference: 5. <author> K. M. Chandy and J. Misra, </author> <title> Parallel Program Design: A Foundation, </title> <publisher> Addison-Wesley, </publisher> <address> New York, NY, </address> <year> 1988. </year>
Reference-contexts: This paper proposes a new notation and underlying formal model supporting specification of and reasoning about decoupled, location-aware systems. Our approach is based on the UNITY <ref> [5] </ref> model of concurrency. This work extends the UNITY notation with constructs for expressing both component location and transient interactions among components. Section 2 is a succinct introduction to our new notation, called Mobile UNITY. A formal axiomatic definition of each construct is included. <p> All assignment statements of a given program are extended in an identical manner. The reactive statements form a program that is scheduled to execute to fixed-point after each individual assignment statement including those that 1 For the sake of brevity we assume the reader to be familiar with UNITY <ref> [5] </ref>, its notation and related concepts. III appear inside a transaction. This construct allows us to simulate the effects of the interrupt processing mechanisms. In the remainder of this section we examine each of these new constructs in turn and develop a proof logic that accommodates these notational extensions.
Reference: 6. <author> M. Abadi and L. Lamport, </author> <title> "An old-fashioned recipe for real-time," </title> <booktitle> in Lecture Notes in Computer Science, </booktitle> <editor> J. W. de Bakker, C. Huizing, W. P. Roever, and G. Rosenberg, Eds., </editor> <volume> vol. 600, </volume> <pages> pp. 1-27. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Reasoning about the correctness of the above protocol will naturally require assumptions about the value of . The expression of the real-time constraints here is similar to the MinTime and MaxTime of <ref> [6] </ref>, except that we choose here to deal with discrete, local clocks rather than a continuous, global one. 4 Conclusion The Mobile UNITY notation and logic is the result of a careful reevaluation of the implications of mobility on UNITY, a model originally intended for statically structured distributed systems.
Reference: 7. <author> G.-C. Roman, P. J. McCann, and J. Y. Plun, </author> <title> "Mobile UNITY: Reasoning and specification in mobile computing," </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> vol. 6, no. 3, </volume> <year> 1997, </year> <pages> 250-282. </pages>
Reference-contexts: The set of constructs that form the basis for the coordination language component of Mobile UNITY is very small but has been shown to be highly expressive. Several pairwise high-level transient interaction constructs (e.g., shared variables and statement synchronization) were presented in <ref> [7] </ref>. Moreover, Mobile UNITY has been used in [8] in an exercise involving the specification and verification of a network protocol (Mobile IP [4]) and to express various forms of code mobility [9]. The notation promises to be a useful research tool for investigating new abstractions in mobile computing.
Reference: 8. <author> P.J. McCann and G.-C. Roman, </author> <title> "Mobile UNITY coordination constructs applied to packet forwarding for mobile hosts," </title> <booktitle> in Second International Conference on Coordination Languages and Models, </booktitle> <editor> D. Garlan, D. Metayer, and D. Le, Eds., </editor> <address> Berlin, </address> <month> September </month> <year> 1997, </year> <pages> pp. 338-354, </pages> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Several pairwise high-level transient interaction constructs (e.g., shared variables and statement synchronization) were presented in [7]. Moreover, Mobile UNITY has been used in <ref> [8] </ref> in an exercise involving the specification and verification of a network protocol (Mobile IP [4]) and to express various forms of code mobility [9]. The notation promises to be a useful research tool for investigating new abstractions in mobile computing.
Reference: 9. <author> G.P. Picco, G.-C. Roman, and P.J. McCann, </author> <title> "Expressing code mobility in Mobile UNITY," </title> <booktitle> in Sixth European Software Engineering Conference (ESEC'97), </booktitle> <address> Zurich, </address> <year> 1997, </year> <pages> pp. 500-518. </pages>
Reference-contexts: Several pairwise high-level transient interaction constructs (e.g., shared variables and statement synchronization) were presented in [7]. Moreover, Mobile UNITY has been used in [8] in an exercise involving the specification and verification of a network protocol (Mobile IP [4]) and to express various forms of code mobility <ref> [9] </ref>. The notation promises to be a useful research tool for investigating new abstractions in mobile computing.
References-found: 9

