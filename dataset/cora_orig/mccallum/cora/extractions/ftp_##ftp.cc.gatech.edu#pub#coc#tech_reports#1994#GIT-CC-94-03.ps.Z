URL: ftp://ftp.cc.gatech.edu/pub/coc/tech_reports/1994/GIT-CC-94-03.ps.Z
Refering-URL: http://www.cs.gatech.edu/tech_reports/index.94.html
Root-URL: 
Title: Reasoning About Conditional Progress Properties  
Author: Ken Calvert 
Date: March 1994  
Address: Atlanta, GA 30332-0280  Atlanta, Georgia 30332-0280  
Affiliation: College of Computing Georgia Institute of Technology  College of Computing Georgia Institute of Technology  
Pubnum: GIT-CC-94/03  
Abstract: In some otherwise attractive formalisms, it can be difficult or even impossible to specify progress in such a way that a component of a distributed system can be proved correct independent of its environment. This problem arises because the nested dependencies between the component and its environment cannot be conveniently expressed in the formalism. A typical example is a communication protocol, which is supposed to provide reliable data transfer even over channels that are unboundedly lossy: the channels only deliver messages if the protocol transmits them often enough, while the protocol only guarantees reliable service if the channels deliver sufficiently many messages. This paper investigates the extent to which such progress specifications can be dealt with using predicate calculus and a single temporal operator (leads-to) having a simple proof theory. It turns out that under the proper semantic interpretation, many progress specifications expressing complex dependences can be represented using certain boolean combinations of leads-to properties. By adding two simple inference rules to an existing proof theory, we obtain a (relatively) complete theory for a large class of conditional progress properties, without the complexity of the full temporal logic; such a theory can be used with various compositional specification formalisms. Based on the results, an approach to specification of protocol progress is outlined and illustrated with an example. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Martin Abadi. </author> <title> An axiomatization of lamport's temporal logic of actions. </title> <type> Technical Report Research Report 65, </type> <institution> DEC Systems Research Center, </institution> <month> October </month> <year> 1990. </year>
Reference-contexts: However, it admits arbitrary temporal formulas constructed using the "2" operator (and its dual, "3"), and is thus more powerful than the theory presented here. It also has a more complex proof system: an axiomatization of the propositional fragment of TLA by Abadi <ref> [1] </ref> has 14 axioms and three inference rules, in addition to the underlying propositional calculus.
Reference: [2] <author> Martn Abadi and Leslie Lamport. </author> <title> Composing specifications. </title> <booktitle> In Stepwise Refinement of Distributed Systems (LNCS 430). </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Abadi and Lamport <ref> [2] </ref> have given sufficient semantic conditions for such a conclusion to be valid. The results of this paper, together with the compositional theory of module specifications presented elsewhere [5, 4] constitute a theory that satisfies the semantic conditions given by Abadi and Lamport.
Reference: [3] <author> Kenneth L. Calvert. </author> <title> Module composition and refinement: Extending the Lam-Shankar theory. </title> <type> Technical Report GIT-CC-91/58, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <year> 1991. </year>
Reference-contexts: The _-monotonicity rule, proved in Section 5, justifies such a conclusion in a compositional theory. Obviously the results presented here are of greatest utility in the context of a compositional theory. The extended theory was developed for use with such a theory of module specifications <ref> [3, 5] </ref>.
Reference: [4] <author> Kenneth L. Calvert. </author> <title> Protocol Conversion and Quotient Problems. </title> <type> PhD thesis, </type> <institution> University of Texas at Austin, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: Abadi and Lamport [2] have given sufficient semantic conditions for such a conclusion to be valid. The results of this paper, together with the compositional theory of module specifications presented elsewhere <ref> [5, 4] </ref> constitute a theory that satisfies the semantic conditions given by Abadi and Lamport. In the theory of Lam and Shankar, on the other hand, such "circular" dependencies are avoided altogether by requiring the composite to have a certain kind of well-founded structure.
Reference: [5] <author> Kenneth L. Calvert. </author> <title> Module composition and refinement with applications to protocol conversion. In Proceedings XII Symposium on Protocol Specification, Testing, and Verification, </title> <address> Orlando, Florida. </address> <publisher> North-Holland, </publisher> <month> June </month> <year> 1992. </year>
Reference-contexts: The _-monotonicity rule, proved in Section 5, justifies such a conclusion in a compositional theory. Obviously the results presented here are of greatest utility in the context of a compositional theory. The extended theory was developed for use with such a theory of module specifications <ref> [3, 5] </ref>. <p> Abadi and Lamport [2] have given sufficient semantic conditions for such a conclusion to be valid. The results of this paper, together with the compositional theory of module specifications presented elsewhere <ref> [5, 4] </ref> constitute a theory that satisfies the semantic conditions given by Abadi and Lamport. In the theory of Lam and Shankar, on the other hand, such "circular" dependencies are avoided altogether by requiring the composite to have a certain kind of well-founded structure.
Reference: [6] <author> Kenneth L. Calvert. </author> <title> Specifying progress properties with leads-to. </title> <type> Technical Report GIT-CC-92/59, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <month> December </month> <year> 1992. </year> <note> available via anonymous FTP from ftp.cc.gatech.edu. </note>
Reference-contexts: It turns out, however, that any disjunction of persistent leads-to properties can be replaced by single leads-to property (which also happens to be persistent). It is also possible to similarly replace finite disjunctions of leads-to properties that are not persistent with a single leads-to property <ref> [6] </ref>. For simplicity, we focus here on the case in which all disjuncts are persistent. 5.1 Disjunctions of Leads-to Properties The following theorem is the basis for the results that follow in this section. Theorem 4. <p> exists a finite set W X of properties such that (i) each property in W X is in provable form, and 14 (ii) any behavior satisfies X if and only if it satisfies every property in W X . 2 A proof of this result appears in an earlier report <ref> [6] </ref>. Translating to provable form involves finding a conjunctive normal form (CNF) equivalent for X; unfortunately, this may result in an exponential blowup of the "size" of the property (i.e. the number of occurrences of simple leads-to properties in the expression defining it).
Reference: [7] <author> K. Mani Chandy and Jayadev Misra. </author> <title> Parallel Program Design: A Foundation. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: Althougth the underlying logic described in Section 2 differs in several ways from the UNITY logic, the differences do not affect completeness. The most obvious difference is the extra inference rule, PSP (which stands for Progress-Safety-Progress). This rule is derived as a metatheorem in the standard theory <ref> [7] </ref>. Thus, adding it as one of the postulated inference rules does not change the set of leads-to properties that can be derived for a given program from a given set of assumptions. <p> The extended theory was developed for use with such a theory of module specifications [3, 5]. Proving conditional progress is tricky in compositional theories, becuase of the 4 At this writing, the Completion rule <ref> [7] </ref> has not been proved for the new theory. 5 We assume here that all properties apply to the same program. 18 infinitary nature of progress properties: showing that a system does not satisfy a progress property requires exhibiting an infinite behavior. <p> Using the theory presented here, such restrictions would be unecessary. 7.4 Related Work Various examples of problems exhibiting progress dependencies have appeared in the literature <ref> [11, 7, 18] </ref>. In some of these, boolean combinations of leads-to properties are used and proved informally.
Reference: [8] <author> Edsger W. Dijkstra and Carel S. Scholten. </author> <title> Predicate Calculus and Program Semantics. </title> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference: [9] <author> Rob Gerth and Amir Pnueli. </author> <title> Rooting UNITY. </title> <booktitle> In Proceedings of the Fifth International Workshop on Software Specification and Design, </booktitle> <address> Pittsburgh, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: Once p and q are both true, q must remain true until p is falsified; otherwise the progress obligation is not discharged. 17 7.2 Relationship to UNITY Theory A number of completeness proofs for the UNITY logic have been given in the literature <ref> [15, 16, 17, 9] </ref>. Althougth the underlying logic described in Section 2 differs in several ways from the UNITY logic, the differences do not affect completeness. The most obvious difference is the extra inference rule, PSP (which stands for Progress-Safety-Progress).
Reference: [10] <author> Geoffrey Hunter. </author> <month> Metalogic. </month> <institution> University of California Press, </institution> <year> 1971. </year>
Reference: [11] <author> Simon S. Lam and A. Udaya Shankar. </author> <title> Specifying modules to satisfy interfaces: A state transition system approach. </title> <type> Technical Report TR88-30, </type> <institution> University of Texas at Austin, Department of Computer Sciences, </institution> <month> August </month> <year> 1988. </year> <note> (revised September 1990). </note>
Reference-contexts: Using the theory presented here, such restrictions would be unecessary. 7.4 Related Work Various examples of problems exhibiting progress dependencies have appeared in the literature <ref> [11, 7, 18] </ref>. In some of these, boolean combinations of leads-to properties are used and proved informally.
Reference: [12] <author> Simon S. Lam and A. Udaya Shankar. </author> <title> A relational notation for state transition systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(7) </volume> <pages> 755-775, </pages> <month> July </month> <year> 1990. </year> <month> 20 </month>
Reference: [13] <author> Leslie Lamport. </author> <title> A temporal logic of actions. </title> <type> Technical Report Research Report 57, </type> <institution> DEC Systems Research Center, </institution> <month> April </month> <year> 1990. </year>
Reference-contexts: They also give a relatively complete inference rule for properties of this particular, which may be used to specify strong fairness. Lamport's Temporal Logic of Actions (TLA) <ref> [13] </ref> combines the single temporal operator "2" with two-place predicates (relations) on states to obtain a theory in which programs and abstract specifications are both defined using the same language, and satisfaction is simply logical implication.
Reference: [14] <author> Zohar Manna and Amir Pnueli. </author> <title> Temporal Logic of Reactive and Concurrent Systems. </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Tsay and Bagrodia [20] have shown equivalence between provability of UNITY conditional properties of the form "Hypothesis: true ; p Conclusion: true ; q" and formulas of the form "23p ) 23q" in Manna and Pnueli's temporal logic <ref> [14] </ref>. They also give a relatively complete inference rule for properties of this particular, which may be used to specify strong fairness.
Reference: [15] <author> Jan Pachl. </author> <title> A simple proof of a completeness result for leads-to in the UNITY logic. </title> <journal> Information Processing Letters, </journal> <volume> 41 </volume> <pages> 35-38, </pages> <year> 1992. </year>
Reference-contexts: Once p and q are both true, q must remain true until p is falsified; otherwise the progress obligation is not discharged. 17 7.2 Relationship to UNITY Theory A number of completeness proofs for the UNITY logic have been given in the literature <ref> [15, 16, 17, 9] </ref>. Althougth the underlying logic described in Section 2 differs in several ways from the UNITY logic, the differences do not affect completeness. The most obvious difference is the extra inference rule, PSP (which stands for Progress-Safety-Progress).
Reference: [16] <author> J. R. Rao. </author> <title> On a notion of completeness for the leads-to. </title> <booktitle> Notes on UNITY: </booktitle> <pages> 24-90, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Once p and q are both true, q must remain true until p is falsified; otherwise the progress obligation is not discharged. 17 7.2 Relationship to UNITY Theory A number of completeness proofs for the UNITY logic have been given in the literature <ref> [15, 16, 17, 9] </ref>. Althougth the underlying logic described in Section 2 differs in several ways from the UNITY logic, the differences do not affect completeness. The most obvious difference is the extra inference rule, PSP (which stands for Progress-Safety-Progress).
Reference: [17] <author> Beverly A. Sanders. </author> <title> Eliminating the substitution axiom from UNITY logic. </title> <type> Technical Report 128, </type> <institution> Eidgenossische Technische Hochschule Zurich, Institut fur Computersysteme, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: Once p and q are both true, q must remain true until p is falsified; otherwise the progress obligation is not discharged. 17 7.2 Relationship to UNITY Theory A number of completeness proofs for the UNITY logic have been given in the literature <ref> [15, 16, 17, 9] </ref>. Althougth the underlying logic described in Section 2 differs in several ways from the UNITY logic, the differences do not affect completeness. The most obvious difference is the extra inference rule, PSP (which stands for Progress-Safety-Progress).
Reference: [18] <author> Beverly A. Sanders. </author> <title> Stepwise refinement of mixed specifications of concurrent programs. </title> <booktitle> In Proceedings of IFIP TC2/WG2.3 Working Conference on Programming Concepts and Methods, Sea of Gallilee, </booktitle> <address> Isreal, April 1990. </address> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1990. </year>
Reference-contexts: Using the theory presented here, such restrictions would be unecessary. 7.4 Related Work Various examples of problems exhibiting progress dependencies have appeared in the literature <ref> [11, 7, 18] </ref>. In some of these, boolean combinations of leads-to properties are used and proved informally.
Reference: [19] <author> A. Udaya Shankar and Simon S. Lam. </author> <title> Time-dependent distributed systems: Proving safety, liveness, and real-time properties. </title> <journal> Distributed Computing, </journal> 1987(2) 61-78, 1987. 
Reference: [20] <author> Yih-Kuen Tsay and Rajive L. Bagrodia. </author> <title> Deducing fairness properties for UNITY programs. </title> <type> unpublished manuscript, </type> <year> 1993. </year>
Reference-contexts: Using the theory presented here, such restrictions would be unecessary. 7.4 Related Work Various examples of problems exhibiting progress dependencies have appeared in the literature [11, 7, 18]. In some of these, boolean combinations of leads-to properties are used and proved informally. Tsay and Bagrodia <ref> [20] </ref> have shown equivalence between provability of UNITY conditional properties of the form "Hypothesis: true ; p Conclusion: true ; q" and formulas of the form "23p ) 23q" in Manna and Pnueli's temporal logic [14].
References-found: 20

