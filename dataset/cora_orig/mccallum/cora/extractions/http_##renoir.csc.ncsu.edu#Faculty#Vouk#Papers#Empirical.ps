URL: http://renoir.csc.ncsu.edu/Faculty/Vouk/Papers/Empirical.ps
Refering-URL: http://renoir.csc.ncsu.edu/UNET/Personnel/vouk.Jan96.html
Root-URL: http://www.csc.ncsu.edu
Email: -vouk, kct-@adm.csc.ncsu.edu  
Title: Empirical Studies of Predicate-Based Software Testing  
Author: M. A. Vouk, K. C. Tai and A. Paradkar 
Address: Box 8206  Raleigh, NC 27659-8206, USA  
Affiliation: Computer Science Department,  North Carolina State University  
Abstract: We report the results of three empirical studies of fault detection and stability performance of the predicate-based BOR (Boolean OperatoR) testing strategy. BOR testing is used to develop test cases based on formal software specification, or based on the implementation code. We evaluated the BOR strategy with respect to some other strategies by using Boolean expressions and actual software. We applied it to software specification cause-effect graphs of a safety-related real-time control system, and to a set of N-version programs. We found that BOR testing is very effective at detecting faults in predicates, and that BOR-based approach has consistently better fault detection performance than branch testing, thorough (but informal) functional testing, simple state-based testing, and random testing. Our results indicate that BOR test selection strategy is practical and effective for detection of faulty predicates, and is suitable for generation of safety-sensitive test-cases. 
Abstract-found: 1
Intro-found: 1
Reference: [Ake78] <author> Akers, S. B., </author> <title> "Binary decision diagrams", </title> <journal> IEEE Trans. Comp., </journal> <volume> Vol. C-27, No. 6, </volume> <year> 1978, </year> <pages> 509-516. </pages>
Reference-contexts: Figure 1 shows the BDD of C#. The notion of BDDs has been used in the representation, verification and testing of boolean functions and logical circuits <ref> [Ake78, Bry86] </ref>. The BDD of a compound predicate is equivalent to the compound predicate modified by replacing "AND" and "OR" with "AND THEN" and "OR ELSE", respectively. (For C1 AND THEN C2, if C1 is false, then C2 is ignored.
Reference: [Bei90] <author> B. Beizer, </author> <title> Software Testing Techniques, 2nd edition, </title> <publisher> Van Nostrand, </publisher> <year> 1990. </year>
Reference-contexts: 1. Introduction One common approach to software testing, referred to as predicate testing, is to require certain types of tests for each predicate (or condition) in a program or software specification. A number of predicate testing strategies have been proposed, including branch testing, domain testing, and others <ref> [How87, Bei90] </ref>. The field of evaluation of predicate testing strategies is very active and a number of theoretical [e.g., Cla85, Fra88, Kor88, Su89, Zei92, Fra93a, Wey94, Tai94] and experimental [e.g., Dur84, Tai87, Nta88, Su89, For93, Fra93b, Wey94, Tai94] studies are available. <p> The shutdown specification-CEG was constructed by one person in about 20 hours, and the CEG-based test-case generation can be automated. Also, CEGs can be analyzed for the detection of ambiguities and inconsistencies in system specification <ref> [Mye79, Bei90] </ref>. It is also worth noting that the additional tests needed for 100% BOR coverage of the shutdown CEG detected a bug in the boiler's implementation (see next section).
Reference: [Bry86] <author> Bryant, R. E., </author> <title> Graph-based algorithms for boolean function manipulation", </title> <journal> IEEE Trans. Computers, </journal> <volume> C-35, No. 8, </volume> <month> August </month> <year> 1986, </year> <pages> 677-691. </pages>
Reference-contexts: Figure 1 shows the BDD of C#. The notion of BDDs has been used in the representation, verification and testing of boolean functions and logical circuits <ref> [Ake78, Bry86] </ref>. The BDD of a compound predicate is equivalent to the compound predicate modified by replacing "AND" and "OR" with "AND THEN" and "OR ELSE", respectively. (For C1 AND THEN C2, if C1 is false, then C2 is ignored.
Reference: [Cla85] <author> L.A. Clarke, A. Podgurski, D. Richardson, and S. Zeil, </author> <title> "A comparison of data flow path selection criteria," </title> <booktitle> in Proc. 8th ICSE, </booktitle> <pages> pp 244-251, </pages> <year> 1985. </year>
Reference-contexts: A number of predicate testing strategies have been proposed, including branch testing, domain testing, and others [How87, Bei90]. The field of evaluation of predicate testing strategies is very active and a number of theoretical <ref> [e.g., Cla85, Fra88, Kor88, Su89, Zei92, Fra93a, Wey94, Tai94] </ref> and experimental [e.g., Dur84, Tai87, Nta88, Su89, For93, Fra93b, Wey94, Tai94] studies are available. In this paper, we discuss several experimental evaluations of a set of predicate-based test generation and selection criteria called boolean operator (BOR) testing [Tai87, Tai93].
Reference: [DeM91] <author> DeMillo, R. A., and Offut, A. J., </author> <title> "Constraint-based automatic test data generation" IEEE Trans. </title> <journal> Software Engineering, </journal> <volume> Vol. SE-17, No. 9, </volume> <month> Sept. </month> <year> 1991, </year> <pages> 900-910. </pages>
Reference: [Dur84] <author> J.W. Duran and S.C. Ntafos, </author> <title> "An Evaluation of Random Testing," </title> <journal> IEEE Trans. Software Eng., </journal> <volume> vol. SE-10, </volume> <pages> pp. 438-444, </pages> <year> 1984. </year>
Reference-contexts: A number of predicate testing strategies have been proposed, including branch testing, domain testing, and others [How87, Bei90]. The field of evaluation of predicate testing strategies is very active and a number of theoretical [e.g., Cla85, Fra88, Kor88, Su89, Zei92, Fra93a, Wey94, Tai94] and experimental <ref> [e.g., Dur84, Tai87, Nta88, Su89, For93, Fra93b, Wey94, Tai94] </ref> studies are available. In this paper, we discuss several experimental evaluations of a set of predicate-based test generation and selection criteria called boolean operator (BOR) testing [Tai87, Tai93].
Reference: [Elm73] <author> Elmendorf, W. R., </author> <title> "Cause-effect graphs in functional testing", </title> <institution> TR-00.2487, IBM Systems Development Division, </institution> <address> Poughkeepsie, NY, </address> <year> 1973. </year>
Reference: [For93] <author> Foreman L. M., and Zweben S. H., </author> <title> "A study of the effectiveness of control and data flow testing strategies", </title> <journal> J. Systems Software, </journal> <volume> No. 21, </volume> <year> 1993, </year> <pages> 215-228. </pages>
Reference-contexts: A number of predicate testing strategies have been proposed, including branch testing, domain testing, and others [How87, Bei90]. The field of evaluation of predicate testing strategies is very active and a number of theoretical [e.g., Cla85, Fra88, Kor88, Su89, Zei92, Fra93a, Wey94, Tai94] and experimental <ref> [e.g., Dur84, Tai87, Nta88, Su89, For93, Fra93b, Wey94, Tai94] </ref> studies are available. In this paper, we discuss several experimental evaluations of a set of predicate-based test generation and selection criteria called boolean operator (BOR) testing [Tai87, Tai93].
Reference: [Fra88] <author> Frankl, P. G., and Weyuker, E. J., </author> <title> "An applicable family of data flow testing criteria," </title> <journal> IEEE TSE, </journal> <volume> Vol. 14, No. 10, </volume> <month> Oct. </month> <year> 1988, </year> <pages> 1483-1498. </pages>
Reference-contexts: A number of predicate testing strategies have been proposed, including branch testing, domain testing, and others [How87, Bei90]. The field of evaluation of predicate testing strategies is very active and a number of theoretical <ref> [e.g., Cla85, Fra88, Kor88, Su89, Zei92, Fra93a, Wey94, Tai94] </ref> and experimental [e.g., Dur84, Tai87, Nta88, Su89, For93, Fra93b, Wey94, Tai94] studies are available. In this paper, we discuss several experimental evaluations of a set of predicate-based test generation and selection criteria called boolean operator (BOR) testing [Tai87, Tai93]. <p> For each program we measured the coverages of puses <ref> [Fra88, Wey88] </ref>, BRO constraints, branches and statements. 1000100101 0.3 0.5 0.7 0.9 Random Testing - Branch Coverage Number of Test Cases C v r g L 4 L 5 L 3 L 1 1000100101 0.3 0.5 0.7 0.9 Random Testing - BRO Coverage Number of Test Cases C v r g
Reference: [Fra93a] <author> Frankl, P. G., and Weyuker, E. J., </author> <title> "A formal analysis of the fault-detecting ability of testing methods", </title> <journal> IEEE TSE, </journal> <volume> Vol. 19, No. 3, </volume> <month> Mar. </month> <year> 1993, </year> <pages> 202-213. </pages>
Reference-contexts: A number of predicate testing strategies have been proposed, including branch testing, domain testing, and others [How87, Bei90]. The field of evaluation of predicate testing strategies is very active and a number of theoretical <ref> [e.g., Cla85, Fra88, Kor88, Su89, Zei92, Fra93a, Wey94, Tai94] </ref> and experimental [e.g., Dur84, Tai87, Nta88, Su89, For93, Fra93b, Wey94, Tai94] studies are available. In this paper, we discuss several experimental evaluations of a set of predicate-based test generation and selection criteria called boolean operator (BOR) testing [Tai87, Tai93].
Reference: [Fra93b] <author> Frankl, P. G., and Weiss S. N., </author> <title> "An experimental comparison of the effectiveness of branch testing and data flow testing", </title> <journal> IEEE TSE, </journal> <volume> Vol. 19, No. 8, </volume> <month> Aug. </month> <year> 1993, </year> <pages> 774-787. </pages>
Reference-contexts: A number of predicate testing strategies have been proposed, including branch testing, domain testing, and others [How87, Bei90]. The field of evaluation of predicate testing strategies is very active and a number of theoretical [e.g., Cla85, Fra88, Kor88, Su89, Zei92, Fra93a, Wey94, Tai94] and experimental <ref> [e.g., Dur84, Tai87, Nta88, Su89, For93, Fra93b, Wey94, Tai94] </ref> studies are available. In this paper, we discuss several experimental evaluations of a set of predicate-based test generation and selection criteria called boolean operator (BOR) testing [Tai87, Tai93].
Reference: [How82] <author> Howden, W. E., </author> <title> "Weak mutation testing and completeness of test cases," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> Vol. SE-8, No. 4, </volume> <month> July </month> <year> 1982, </year> <pages> 371-37 9. </pages>
Reference-contexts: Relational Operator Testing: For a relational expression, say (E &lt;rop&gt; E"), this strategy requires three tests satisfying the following requirements <ref> [How82] </ref>: (1) one test makes E &gt; E", (2) one test makes E &lt; E", and (3) one test makes E = E". If &lt;rop&gt; is incorrect and E and E" are correct, then this strategy guarantees the detection of the incorrect &lt;rop&gt;.
Reference: [How87] <author> W.E. Howden, </author> <title> "Functional Program Testing and Analysis", </title> <publisher> McGraw-Hill Book Co., </publisher> <year> 1987. </year>
Reference-contexts: 1. Introduction One common approach to software testing, referred to as predicate testing, is to require certain types of tests for each predicate (or condition) in a program or software specification. A number of predicate testing strategies have been proposed, including branch testing, domain testing, and others <ref> [How87, Bei90] </ref>. The field of evaluation of predicate testing strategies is very active and a number of theoretical [e.g., Cla85, Fra88, Kor88, Su89, Zei92, Fra93a, Wey94, Tai94] and experimental [e.g., Dur84, Tai87, Nta88, Su89, For93, Fra93b, Wey94, Tai94] studies are available.
Reference: [IRR93] <author> Inst. </author> <title> for Risk Research, "Generic problem competition", </title> <booktitle> International Symposium Design and Review of Software Controlled Safety-Related Systems, </booktitle> <address> Waterloo, Canada, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: The specifications were developed as part of the generic problem exercise conducted for the 1993 International Workshop on the Design and Review of Software Controlled Safety-Related Systems <ref> [IRR93] </ref>. A version of the boiler control and monitoring system was developed at North Carolina State University [Vou93a]. This software was used in this empirical study. A brief description of the boiler system is given below. <p> During the development of the boiler system at NCSU, the original, informal, specification of the system <ref> [IRR93] </ref> was rewritten in terms of a number of extended finitestate machines 1 (EFSMs), and test suites for the unit, integration and system testing of the boiler system were constructed according to the boiler's EFSM specification [Par93].
Reference: [Kor88] <author> B. Koren and J. Laski, </author> <title> "STAD - A system for testing and debugging: user perspective," </title> <booktitle> Proc. Second Workshop on Software Testing, Verification, and Analysis, </booktitle> <address> Banff, Canada, </address> <publisher> Computer Society Press, </publisher> <pages> pp 13 - 20, </pages> <year> 1988. </year>
Reference-contexts: A number of predicate testing strategies have been proposed, including branch testing, domain testing, and others [How87, Bei90]. The field of evaluation of predicate testing strategies is very active and a number of theoretical <ref> [e.g., Cla85, Fra88, Kor88, Su89, Zei92, Fra93a, Wey94, Tai94] </ref> and experimental [e.g., Dur84, Tai87, Nta88, Su89, For93, Fra93b, Wey94, Tai94] studies are available. In this paper, we discuss several experimental evaluations of a set of predicate-based test generation and selection criteria called boolean operator (BOR) testing [Tai87, Tai93].
Reference: [Mye79] <author> Myers, G. J., </author> <title> The Art of Software Testing, </title> <publisher> Wiley, </publisher> <year> 1979. </year>
Reference-contexts: For this effect we derived a specification cause-effect graph (CEG) and analyzed its implementation (code) CEG. The notion of CEGs was developed for system specification and test generation <ref> [Mye79] </ref>. A CEG is a graphical notation for describing logical relationships among causes and effects. <p> The shutdown specification-CEG was constructed by one person in about 20 hours, and the CEG-based test-case generation can be automated. Also, CEGs can be analyzed for the detection of ambiguities and inconsistencies in system specification <ref> [Mye79, Bei90] </ref>. It is also worth noting that the additional tests needed for 100% BOR coverage of the shutdown CEG detected a bug in the boiler's implementation (see next section).
Reference: [Nag82] <author> Nagel, P. M., and Skrivan J. A., </author> <title> "Software reliability: Repetitive run experimentation and modelling", </title> <institution> BSC-40336, Boeing, </institution> <address> Seattle, Wa., </address> <year> 1982. </year>
Reference-contexts: Six functionally equivalent programs were produced as part of another study [Vou86a, Vou86b]. Programs solve a navigational problem, an extended version of the "Earth Satellite Problem" used by Nagle at al. <ref> [Nag82] </ref>. They were written independently by graduate level students to the same specification. The programming language was Pascal. The size of the Pascal programs ranged from 400 to 800 Pascal statements.
Reference: [Nta84] <author> S.C. Ntafos, </author> <title> "On Required Element Testing", </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> Vol. SE-10, </volume> <pages> pp 793-803, </pages> <year> 1984. </year>
Reference: [Nta88] <author> S.C. Ntafos, </author> <title> "A Comparison of Some Structural Testing Strategies", </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> Vol. SE-14 (6), </volume> <pages> pp 868-874, </pages> <year> 1988. </year>
Reference-contexts: A number of predicate testing strategies have been proposed, including branch testing, domain testing, and others [How87, Bei90]. The field of evaluation of predicate testing strategies is very active and a number of theoretical [e.g., Cla85, Fra88, Kor88, Su89, Zei92, Fra93a, Wey94, Tai94] and experimental <ref> [e.g., Dur84, Tai87, Nta88, Su89, For93, Fra93b, Wey94, Tai94] </ref> studies are available. In this paper, we discuss several experimental evaluations of a set of predicate-based test generation and selection criteria called boolean operator (BOR) testing [Tai87, Tai93].
Reference: [Par93] <author> A. Paradkar, I. Shields, and J. Waters, </author> <title> "The NCSU Solution to the Generic Problem Exercise: Boiler Control and Monitoring System,", </title> <address> NCSU, </address> <year> 1993. </year>
Reference-contexts: development of the boiler system at NCSU, the original, informal, specification of the system [IRR93] was rewritten in terms of a number of extended finitestate machines 1 (EFSMs), and test suites for the unit, integration and system testing of the boiler system were constructed according to the boiler's EFSM specification <ref> [Par93] </ref>. The EFSM specification-based test suites were then developed to ensure thorough testing of the boiler system. In addition to the coverage of every state and branch of individual EFSMs, great effort was made to construct additional test cases to cover special event situations.
Reference: [Par94] <author> A. Paradkar, </author> <title> "On The Experience of Using Cause-Effect Graphs for Software Specification,", </title> <note> to appear in Proc. CASCON '94, </note> <month> October </month> <year> 1994. </year>
Reference-contexts: During the construction of the of the CEG we detected a specification ambiguity and built its resolution into the CEG <ref> [Par94] </ref>. This helped detect resulting problems that have propagated into the implementations. Satisfaction of the BOR criterion required generation of 43 test cases. Full CEG coverage would have required 65 test cases.
Reference: [Rap85] <author> S. Rapps and E.J. Weyuker, </author> <title> "Selecting software test data using data flow information," </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> Vol. SE-11(4), </volume> <pages> pp 367-375, </pages> <year> 1985. </year>
Reference: [Su89] <author> Su, H. K., </author> <title> "Test generation for boolean expressions and combinational logic circuits", </title> <type> Ph.D. dissertation, </type> <institution> Dept. of Computer Science, North Carolina State University, </institution> <year> 1989. </year>
Reference-contexts: A number of predicate testing strategies have been proposed, including branch testing, domain testing, and others [How87, Bei90]. The field of evaluation of predicate testing strategies is very active and a number of theoretical <ref> [e.g., Cla85, Fra88, Kor88, Su89, Zei92, Fra93a, Wey94, Tai94] </ref> and experimental [e.g., Dur84, Tai87, Nta88, Su89, For93, Fra93b, Wey94, Tai94] studies are available. In this paper, we discuss several experimental evaluations of a set of predicate-based test generation and selection criteria called boolean operator (BOR) testing [Tai87, Tai93]. <p> A number of predicate testing strategies have been proposed, including branch testing, domain testing, and others [How87, Bei90]. The field of evaluation of predicate testing strategies is very active and a number of theoretical [e.g., Cla85, Fra88, Kor88, Su89, Zei92, Fra93a, Wey94, Tai94] and experimental <ref> [e.g., Dur84, Tai87, Nta88, Su89, For93, Fra93b, Wey94, Tai94] </ref> studies are available. In this paper, we discuss several experimental evaluations of a set of predicate-based test generation and selection criteria called boolean operator (BOR) testing [Tai87, Tai93].
Reference: [Tai87] <author> Tai, K. C., and Su, H. K., </author> <title> "Test generation for boolean expressions," </title> <booktitle> Proc. COMPSAC '87, </booktitle> <year> 1987, </year> <pages> 278-283. </pages>
Reference-contexts: A number of predicate testing strategies have been proposed, including branch testing, domain testing, and others [How87, Bei90]. The field of evaluation of predicate testing strategies is very active and a number of theoretical [e.g., Cla85, Fra88, Kor88, Su89, Zei92, Fra93a, Wey94, Tai94] and experimental <ref> [e.g., Dur84, Tai87, Nta88, Su89, For93, Fra93b, Wey94, Tai94] </ref> studies are available. In this paper, we discuss several experimental evaluations of a set of predicate-based test generation and selection criteria called boolean operator (BOR) testing [Tai87, Tai93]. <p> In this paper, we discuss several experimental evaluations of a set of predicate-based test generation and selection criteria called boolean operator (BOR) testing <ref> [Tai87, Tai93] </ref>. In the remainder of this section, we give some basic * Research supported in part by an IBM Center for Advanced Studies (Canada) research fellowship, NASA Grant No. NAG-1-983 and NSF grant CCR-8907807 definitions.
Reference: [Tai93] <author> Tai, K. C., </author> <title> "Predicate-based test generation for computer programs", </title> <booktitle> Proc. Inter. Conf. on Software Engineering, </booktitle> <address> pp.267-276, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: In this paper, we discuss several experimental evaluations of a set of predicate-based test generation and selection criteria called boolean operator (BOR) testing <ref> [Tai87, Tai93] </ref>. In the remainder of this section, we give some basic * Research supported in part by an IBM Center for Advanced Studies (Canada) research fellowship, NASA Grant No. NAG-1-983 and NSF grant CCR-8907807 definitions. <p> BOR Testing ((E1&lt;E2)& (E3&gt;E4)) |(E5=E6) C# t4 t f t t t6 f t f f The constraint set -(t,t,f), (t,f,t), (t,f,f), (f,t,f)- is called a BOR constraint set for C#. An algorithm, called BOR_GEN, for generating a minimum BOR constraint set for a compound predicate was given in <ref> [Tai93] </ref>. For a predicate with n, n&gt;0, AND/OR operators, its minimum BOR constraint set contains at most n+2 constraints. For a compound predicate, BOR testing requires the coverage of a minimum BOR constraint set for this predicate. <p> The constraint set -(&lt;,&gt;,&lt;), (&lt;,=,&lt;), (&lt;,&lt;,=), (&lt;,&lt;,&lt;), (=,=,&gt;), (&gt;,=,&gt;)- is called a BRO constraint set for C#. A algorithm, called BRO_GEN for generating a minimum BRO constraint set for a compound predicate was given in <ref> [Tai93] </ref>. For a predicate with n, n&gt;0, AND/OR operators, its minimum BRO constraint set contains at most 2*n+3 constraints. For a compound predicate, BRO testing requires the coverage of a minimum BRO constraint set for this predicate. Table 6. <p> Consider the predicate C#. If a constraint for C# can never be covered by any test for C#, it is said to be an infeasible constraint for C#. More discussion on infeasible constraints can be found in <ref> [Tai93] </ref>. 3. A comparison between BOR, BDD Path, and Branch testing by using Boolean expressions For a predicate with n, n&gt;0, AND/OR operators, branch testing requires 2 tests, BOR testing n+2 or less tests, and BDD Path testing n+2 or more, up to O (2 n ), tests.
Reference: [Tai94] <author> Tai, K. C., Vouk, M. A., Paradkar, A., and Lu, P., </author> <title> "Evaluation of A Predicate-Based Software Testing Strategy," </title> <journal> To appear in IBM Systems Journal, </journal> <volume> Vol. 33, No. 3, </volume> <year> 1994. </year>
Reference-contexts: A number of predicate testing strategies have been proposed, including branch testing, domain testing, and others [How87, Bei90]. The field of evaluation of predicate testing strategies is very active and a number of theoretical <ref> [e.g., Cla85, Fra88, Kor88, Su89, Zei92, Fra93a, Wey94, Tai94] </ref> and experimental [e.g., Dur84, Tai87, Nta88, Su89, For93, Fra93b, Wey94, Tai94] studies are available. In this paper, we discuss several experimental evaluations of a set of predicate-based test generation and selection criteria called boolean operator (BOR) testing [Tai87, Tai93]. <p> A number of predicate testing strategies have been proposed, including branch testing, domain testing, and others [How87, Bei90]. The field of evaluation of predicate testing strategies is very active and a number of theoretical [e.g., Cla85, Fra88, Kor88, Su89, Zei92, Fra93a, Wey94, Tai94] and experimental <ref> [e.g., Dur84, Tai87, Nta88, Su89, For93, Fra93b, Wey94, Tai94] </ref> studies are available. In this paper, we discuss several experimental evaluations of a set of predicate-based test generation and selection criteria called boolean operator (BOR) testing [Tai87, Tai93]. <p> Although BDD path testing requires at least as many tests as BOR testing, its use of "don't care" reduces its effectiveness for fault detection. (3) similar to the experimental comparisons with the Elmendorf's algorithm [Elm78] reported in <ref> [Tai94] </ref>, BOR testing almost guarantees the detection of boolean operator faults and incorrect parentheses. 4. Applying BOR testing to a safety-related real-time system In this section, we describe an application of BOR testing to control software for a simplified real-time boiler control and monitoring system. <p> We then measured the BOR coverage that this set offered for the specification-CEG and for the implementation-CEG of one module, or C program. We used the BOR_COV algorithm to measure the BOR coverage of the shutdown specification-CEG by the shutdown test set <ref> [Tai94] </ref>. Of the 372 tests in the shutdown test set, 59 tests (about 1/6 of the total) were found to be redundant. Also, 24 more constraints were needed for BOR testing. So the BOR coverage of the shutdown CEG by the shutdown test set was (372-59)/(372-59+24) = 0.928.
Reference: [Vou86a] <author> M.A. Vouk, D.F. McAllister, and K.C. Tai, </author> <title> "An Experimental Evaluation of the Effectiveness of Random Testing of Fault-tolerant Software", </title> <booktitle> Proc. Workshop on Software Testing, </booktitle> <address> Banff, Canada, </address> <publisher> IEEE CS Press, </publisher> <pages> 74-81, </pages> <month> July </month> <year> 1986. </year>
Reference-contexts: Six functionally equivalent programs were produced as part of another study <ref> [Vou86a, Vou86b] </ref>. Programs solve a navigational problem, an extended version of the "Earth Satellite Problem" used by Nagle at al. [Nag82]. They were written independently by graduate level students to the same specification. The programming language was Pascal.
Reference: [Vou86b] <author> Vouk, M. A., Helsabeck, M. L., McAllister, D. F, and Tai, K. C., </author> <title> "On testing of functionally equivalent components of fault-tolerant software", </title> <booktitle> Proc. COMPSAC (Computer Software and Applications) '86, </booktitle> <month> Oct. </month> <year> 1986, </year> <pages> 414-419. </pages>
Reference-contexts: Six functionally equivalent programs were produced as part of another study <ref> [Vou86a, Vou86b] </ref>. Programs solve a navigational problem, an extended version of the "Earth Satellite Problem" used by Nagle at al. [Nag82]. They were written independently by graduate level students to the same specification. The programming language was Pascal. <p> Special consideration was given to extremal and special values, explicit or implicit, in the specification (boundaries, singularities, etc.), as well as in the known problem solution algorithms. Random data were generated using a uniform distribution for all input parameters. Failures observed in the components are described in <ref> [Vou86b] </ref>. For technical reasons, only five of those program were used in the current experiment. 5 . 1 An evaluation of BOR testing We built the "Earth Satellite Problem" CEG using the requirements specifications and then selected test cases according to the BOR criteria.
Reference: [Vou89] <author> Vouk, M. A., Coyle, R. E., "BGG: </author> <title> A testing coverage tool " Proc. </title> <booktitle> 7th Northwest Software Quality Conference, </booktitle> <year> 1989, </year> <pages> 212-233 </pages>
Reference-contexts: A tool called BGG, developed at North Carolina State University to measure the test coverage of statements, branches, and various types of data flow metrics for Pascal programs <ref> [Vou89] </ref>, was extended to generate BOR and BRO constraint sets for predicates in a Pascal program, and to measure the coverage of BOR and BRO constraints in a Pascal program according to a given test set. Six functionally equivalent programs were produced as part of another study [Vou86a, Vou86b].
Reference: [Vou93a] <author> Vouk, M. A., and Paradkar, A., </author> <title> "Design and Review of Software Controlled Safety-Related Systems: The NCSU Experience With the Generic Problem Exercise," </title> <booktitle> Inter. Invitational Workshop on the Design and Review of Software Controlled Safety-Related Systems, </booktitle> <address> Ottawa, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: The specifications were developed as part of the generic problem exercise conducted for the 1993 International Workshop on the Design and Review of Software Controlled Safety-Related Systems [IRR93]. A version of the boiler control and monitoring system was developed at North Carolina State University <ref> [Vou93a] </ref>. This software was used in this empirical study. A brief description of the boiler system is given below. The simplified boiler system used in the study consists of a natural-gas fired water-tube boiler producing saturated steam.
Reference: [Vou93b] <author> M.A. Vouk, </author> <title> "Fault and Failure Analysis," </title> <booktitle> Third Workshop on Issues in Software Reliability Workshop Program, </booktitle> <institution> U.S. West Advanced Technologies, Boulder Colorado, </institution> <month> Nov. </month> <year> 1993 </year>
Reference-contexts: Similar variance in coverage metrics has been seen in experiments with other software <ref> [Vou93b] </ref>. Interestingly, the "best behaved" metric appears to be puse.
Reference: [Wei85] <author> M.D. Weiser, J.D. Gannon, and P.R. McMullin, </author> <title> "Comparison of structured test coverage metrics," </title> <journal> IEEE Software, </journal> <volume> Vol 2(2), </volume> <pages> pp 80-85, </pages> <year> 1985. </year>
Reference: [Wey88] <author> E.J. Weyuker, </author> <title> "An empirical study of the complexity of data flow testing", </title> <booktitle> Proc. Second Workshop on Software Testing, Verification, and Analysis, </booktitle> <address> Banff, Canada, </address> <publisher> Computer Society Press, </publisher> <pages> pp 188-195, </pages> <year> 1988. </year>
Reference-contexts: For each program we measured the coverages of puses <ref> [Fra88, Wey88] </ref>, BRO constraints, branches and statements. 1000100101 0.3 0.5 0.7 0.9 Random Testing - Branch Coverage Number of Test Cases C v r g L 4 L 5 L 3 L 1 1000100101 0.3 0.5 0.7 0.9 Random Testing - BRO Coverage Number of Test Cases C v r g
Reference: [Wey94] <author> E.J. Weyuker, E., T. Goradia, and A. Singh, </author> <title> "Automatically generating test data from a boolean specification," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> Vol. 20, No. 5, </volume> <pages> 353-363, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: A number of predicate testing strategies have been proposed, including branch testing, domain testing, and others [How87, Bei90]. The field of evaluation of predicate testing strategies is very active and a number of theoretical <ref> [e.g., Cla85, Fra88, Kor88, Su89, Zei92, Fra93a, Wey94, Tai94] </ref> and experimental [e.g., Dur84, Tai87, Nta88, Su89, For93, Fra93b, Wey94, Tai94] studies are available. In this paper, we discuss several experimental evaluations of a set of predicate-based test generation and selection criteria called boolean operator (BOR) testing [Tai87, Tai93]. <p> A number of predicate testing strategies have been proposed, including branch testing, domain testing, and others [How87, Bei90]. The field of evaluation of predicate testing strategies is very active and a number of theoretical [e.g., Cla85, Fra88, Kor88, Su89, Zei92, Fra93a, Wey94, Tai94] and experimental <ref> [e.g., Dur84, Tai87, Nta88, Su89, For93, Fra93b, Wey94, Tai94] </ref> studies are available. In this paper, we discuss several experimental evaluations of a set of predicate-based test generation and selection criteria called boolean operator (BOR) testing [Tai87, Tai93]. <p> For a predicate with n, n&gt;0, AND/OR operators, BDD path testing strategy requires (n+2) or more, up to O (2 n ), constraints. Meaningful Impact Strategies: In <ref> [Wey94] </ref> a family of strategies for generating tests for a boolean expression was described. Below we show a test set for C# according to one of these strategies, called the MIN strategy. Table 4.
Reference: [Zei92] <author> S.J. Zeil, F.H. Afifi, and L.J. White, </author> <title> "Detection of Linear Errors via Domain Testing," </title> <journal> ACM Trans. Soft. Eng., </journal> <volume> Vol 1(4), </volume> <pages> pp. 422-451, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: A number of predicate testing strategies have been proposed, including branch testing, domain testing, and others [How87, Bei90]. The field of evaluation of predicate testing strategies is very active and a number of theoretical <ref> [e.g., Cla85, Fra88, Kor88, Su89, Zei92, Fra93a, Wey94, Tai94] </ref> and experimental [e.g., Dur84, Tai87, Nta88, Su89, For93, Fra93b, Wey94, Tai94] studies are available. In this paper, we discuss several experimental evaluations of a set of predicate-based test generation and selection criteria called boolean operator (BOR) testing [Tai87, Tai93].
References-found: 35

