URL: http://www.cs.helsinki.fi/~htoivone/pubs/toivonen.ps.gz
Refering-URL: http://www.cs.helsinki.fi/research/pmdm/datamining/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: of Frequent Patterns in Large Data Collections  
Author: Hannu Toivonen 
Address: Finland  
Affiliation: University of Helsinki  
Note: Discovery  
Abstract: Department of Computer Science Series of Publications A Report A-1996-5 
Abstract-found: 1
Intro-found: 1
Reference: [AIS93] <author> R. Agrawal, T. Imielinski, and A. Swami. </author> <title> Mining association rules between sets of items in large databases. </title> <editor> In P. Buneman and S. Jajodia, editors, </editor> <booktitle> Proceedings of the 1993 ACM SIG-MOD International Conference on Management of Data (SIG-MOD'93), </booktitle> <pages> pages 207-216, </pages> <address> Washington, D.C., 1993. </address> <publisher> ACM. </publisher>
Reference-contexts: These companies are now realizing that new methods are emerging for the analysis of the databases they have accumulated more or less as a side product, and that by using these methods they possibly can gain a competitive advantage. Discovery of association rules <ref> [AIS93] </ref> has been identified as an important data mining problem. The original motivation for searching association rules came from the need to analyze so called supermarket basket data, that is, to examine customer behavior in terms of the purchased products. <p> The frequency of a rule is the amount of positive evidence for the rule. For a rule to be considered interesting, it must be strong enough and common enough. The association rule discovery task <ref> [AIS93] </ref> is now the following: given R, r, min fr, and min conf, find all association rules X ) Y that hold in r with respect to min fr and min conf, and such that X and Y are disjoint and non-empty. <p> Association rules are only monotone with respect to contraction of the right-hand side: if X ) Y [ fAg holds, then X ) Y holds. 2.2 Rule generation Association rules that hold in a binary database can be discovered in two phases <ref> [AIS93] </ref>. First, find all frequent item sets X R and their frequencies. Then test separately for all Y X with Y 6= ; whether the rule 2.3 Finding frequent sets 11 X n Y ) Y holds with sufficient confidence. Algorithm 2.9 (from [AIS93]) uses this approach to generate all association <p> database can be discovered in two phases <ref> [AIS93] </ref>. First, find all frequent item sets X R and their frequencies. Then test separately for all Y X with Y 6= ; whether the rule 2.3 Finding frequent sets 11 X n Y ) Y holds with sufficient confidence. Algorithm 2.9 (from [AIS93]) uses this approach to generate all association rules that hold in the input database. The harder part of the problem, the task of finding the frequent sets, is considered in the following subsection. <p> As expected, the execution time is linear with respect to the number of rows in the database. Note also that the constant term of the candidate generation time does not essentially show in the figures. 2.5 Extensions and related work Since their introduction in 1993 <ref> [AIS93] </ref>, association rules have been researched a lot. In this section we discuss related work, some of which regards extensions to the basic framework of association rules. More remotely related research is discussed in Chapter 4. <p> in detail an algorithm that can deal, in addition to sets, also with multisets and ordered sets. 2.5 Extensions and related work 21 1 4 16 Relative time Relative size of database 0.200 - - - 0.075 fi fi fi 4 4 4 The frequent set discovery method presented in <ref> [AIS93] </ref> also works in a generate and test fashion, but the candidate generation is quite different. An essential difference is that in [AIS93] both candidate generation and evaluation are performed during the database pass. <p> 21 1 4 16 Relative time Relative size of database 0.200 - - - 0.075 fi fi fi 4 4 4 The frequent set discovery method presented in <ref> [AIS93] </ref> also works in a generate and test fashion, but the candidate generation is quite different. An essential difference is that in [AIS93] both candidate generation and evaluation are performed during the database pass. Most importantly, however, the method fails to take advantage of Proposition 2.11 and it generates candidates that cannot be frequent. Also in experimental comparisons the method of [AIS93] has been shown to perform worse than the algorithms of this <p> An essential difference is that in <ref> [AIS93] </ref> both candidate generation and evaluation are performed during the database pass. Most importantly, however, the method fails to take advantage of Proposition 2.11 and it generates candidates that cannot be frequent. Also in experimental comparisons the method of [AIS93] has been shown to perform worse than the algorithms of this section [AMS + 96, AS94, MTV94a]. Association rule generation The confidence of association rules is monotone decreasing with respect to moving items from the left-hand side of the rule to the right-hand side. <p> In [AS94], hashing is used during the database pass to efficiently determine the collection of candidates that match a row. The method of [PCY95], in turn, uses hashing to identify and prune non-frequent candidates before the database pass. There is also a modification of the original algorithm of <ref> [AIS93] </ref> that uses SQL for the discovery of frequent sets [HS93]. Item hierarchies Association rule algorithms have been generalized to work with items arranged to hierarchies or taxonomies [HF95, HKMT95, SA95]. <p> The idea of checking all weaker patterns when generating candidates has, however, been missed, e.g., in the original algorithm for discovering frequent sets <ref> [AIS93] </ref> and in the inference of inclusion dependencies [KMRS92, MR92a]. In the area of machine learning, the version spaces of Mitchell [Mit82] are the first systematic use of strength hierarchies and concepts similar to our border. <p> In 1993, when the research leading to this thesis was started, data mining and knowledge discovery were concepts known only to few people, not including the author. The problem of discovering association rules was first introduced in the same year <ref> [AIS93] </ref>. Since then, data mining and knowledge discovery have become buzzwords within the database community. During these three years, about 50 research articles related to association rules alone have been published, including those that describe this research. Commercial interest, if not even hype, is now catching up quickly.
Reference: [AMS + 96] <author> R. Agrawal, H. Mannila, R. Srikant, H. Toivonen, and A. I. Verkamo. </author> <title> Fast discovery of association rules. </title> <editor> In U. M. Fayyad, G. Piatetsky-Shapiro, P. Smyth, and R. Uthurusamy, editors, </editor> <booktitle> Advances in Knowledge Discovery and Data Mining, </booktitle> <pages> pages 307-328. </pages> <publisher> AAAI Press, </publisher> <address> Menlo Park, CA, </address> <year> 1996. </year>
Reference-contexts: Most of the results have been published before, many of them in joint articles with Prof. Heikki Mannila and Dr. Inkeri Verkamo: the algorithm for finding association rules <ref> [AMS + 96, MTV94a] </ref>, the generalized problem, algorithm, and analysis [MT96c], the methods for finding association rules using sampling [Toi96], the idea of approximate discovery of Boolean rules [MT96b], and the problem of discovering frequent episodes in sequences [MTV94b, MTV95]. <p> In that section we give an efficient method for the discovery of all frequent sets. Experiments with the method are described in Section 2.4. Finally, we review extensions and other related work in Section 2.5. Parts of the work described in this chapter have been published in <ref> [AMS + 96, MTV94a] </ref>. 2.1 Association rules Given a collection of sets of items, association rules describe how likely various combinations of items are to occur together in the same sets. <p> Most importantly, however, the method fails to take advantage of Proposition 2.11 and it generates candidates that cannot be frequent. Also in experimental comparisons the method of [AIS93] has been shown to perform worse than the algorithms of this section <ref> [AMS + 96, AS94, MTV94a] </ref>. Association rule generation The confidence of association rules is monotone decreasing with respect to moving items from the left-hand side of the rule to the right-hand side. <p> Evaluating the selection criterion is thus fast, possibly even faster than evaluating whether a potential candidate is a valid candidate or not. The problem complexity of these settings has not received much attention. Some lower bounds for the problem of finding all frequent sets are given in <ref> [AMS + 96, MTV94a] </ref>. A thorough analysis of the problem of discovering functional dependencies is given in [MR92a, MR92b]. For various algorithms for finding functional dependencies, see [Bel95, MR92a, MR92b, MR94, PK95]. <p> We first consider how accurate the frequencies computed from a random sample are. As has been noted before, samples of reasonable size provide good approximations for frequencies of sets <ref> [AMS + 96, MTV94a] </ref>. Related work on using a sample for approximately verifying the truth of arbitrary sentences of relational tuple calculus is considered in [KM94]. <p> In this section we also present variants of the method and give experimental results. Test organization We used three synthetic data sets from [AS94] in our tests. These databases model supermarket basket data, and they have been used as benchmarks for several association rule algorithms <ref> [AMS + 96, AS94, HKMT95, PCY95, SON95] </ref>. The central properties of the data sets are the following. There are jRj = 1 000 items, and the average number T of items per row is 5, 10, or 20. The number jrj of rows is approximately 100 000.
Reference: [AS92] <author> N. Alon and J. H. Spencer. </author> <title> The Probabilistic Method. </title> <publisher> John Wiley Inc., </publisher> <address> New York, NY, </address> <year> 1992. </year>
Reference-contexts: Proof The Chernoff bounds give the result P r [jx npj &gt; a] &lt; 2e 2a 2 =n , where x is a random variable with binomial distribution B (n; p) <ref> [AS92] </ref>.
Reference: [AS94] <author> R. Agrawal and R. Srikant. </author> <title> Fast algorithms for mining association rules in large databases. </title> <editor> In J. Bocca, M. Jarke, and C. Zaniolo, editors, </editor> <booktitle> Proceedings of the Twentieth International Conference on Very Large Data Bases (VLDB'94), </booktitle> <pages> pages 487-499, </pages> <address> Santiago, Chile, 1994. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: In this section we discuss related work, some of which regards extensions to the basic framework of association rules. More remotely related research is discussed in Chapter 4. Candidate generation Definition 2.13 and Algorithm 2.14 for candidate generation were presented independently in <ref> [AS94, MTV94a] </ref>. <p> Most importantly, however, the method fails to take advantage of Proposition 2.11 and it generates candidates that cannot be frequent. Also in experimental comparisons the method of [AIS93] has been shown to perform worse than the algorithms of this section <ref> [AMS + 96, AS94, MTV94a] </ref>. Association rule generation The confidence of association rules is monotone decreasing with respect to moving items from the left-hand side of the rule to the right-hand side. <p> Actually, the candidate generation Algorithm 2.18 can be used to construct candidates for rule right-hand sides <ref> [AS94] </ref>. Database pass For large databases it is important to minimize the database activity, i.e., improve on Algorithm 2.22. Matching a candidate X 22 2 Discovery of association rules against a row in the database in the straightforward way results in repeating work that has been done previously. <p> Instead of starting from the scratch again, information about the matches of the subsets can be utilized. In particular, a candidate set X matches exactly those rows that are matched by any two subsets of size jXj 1 <ref> [AS94] </ref>. One can create a new temporary binary database with an item for each candidate, and to fill the database in during the database pass. <p> Hashing has been used at least for two tasks in the discovery of fre 2.5 Extensions and related work 23 quent sets. In <ref> [AS94] </ref>, hashing is used during the database pass to efficiently determine the collection of candidates that match a row. The method of [PCY95], in turn, uses hashing to identify and prune non-frequent candidates before the database pass. <p> In this section we also present variants of the method and give experimental results. Test organization We used three synthetic data sets from <ref> [AS94] </ref> in our tests. These databases model supermarket basket data, and they have been used as benchmarks for several association rule algorithms [AMS + 96, AS94, HKMT95, PCY95, SON95]. The central properties of the data sets are the following. <p> In this section we also present variants of the method and give experimental results. Test organization We used three synthetic data sets from [AS94] in our tests. These databases model supermarket basket data, and they have been used as benchmarks for several association rule algorithms <ref> [AMS + 96, AS94, HKMT95, PCY95, SON95] </ref>. The central properties of the data sets are the following. There are jRj = 1 000 items, and the average number T of items per row is 5, 10, or 20. The number jrj of rows is approximately 100 000. <p> The number jrj of rows is approximately 100 000. The average size I of maximal frequent sets, i.e., sets in the positive border, is 2, 4, or 6. Table 5.2 summarizes the parameters for the data sets; see <ref> [AS94] </ref> for more details of the data generation. We assume that the real data collections from which association rules are discovered can be much larger than the test data sets. To make the experiments fair we use sampling with replacement.
Reference: [AS95] <author> R. Agrawal and R. Srikant. </author> <title> Mining sequential patterns. </title> <editor> In P. Yu and A. Chen, editors, </editor> <booktitle> Proceedings of the Eleventh International Conference on Data Engineering (ICDE'95), </booktitle> <pages> pages 3-14, </pages> <address> Taipei, Taiwan, 1995. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The described algorithm finds patterns that are similar to serial episodes; however, the patterns have a given minimum length, and the occurrences can be within a given edit distance. The problem of discovering so called sequential patterns is also closely related <ref> [AS95] </ref>. Sequential patterns are similar to serial episodes; they could 104 7 Discovery of episodes in sequences also be roughly described as association rules discovered from ordered sets. More lately, the pattern class has been extended with windowing, some extra time constraints, and an event taxonomy [SA96b].
Reference: [Bel95] <author> S. Bell. </author> <title> Discovery and maintenance of functional dependencies by independencies. </title> <editor> In U. M. Fayyad and R. Uthurusamy, editors, </editor> <booktitle> Proceedings of the First International Conference on Knowledge Discovery and Data Mining (KDD'95), </booktitle> <pages> pages 27-32, </pages> <address> Montreal, Canada, 1995. </address> <publisher> AAAI Press. </publisher> <address> 110 References </address>
Reference-contexts: Some lower bounds for the problem of finding all frequent sets are given in [AMS + 96, MTV94a]. A thorough analysis of the problem of discovering functional dependencies is given in [MR92a, MR92b]. For various algorithms for finding functional dependencies, see <ref> [Bel95, MR92a, MR92b, MR94, PK95] </ref>.
Reference: [Ber73] <author> C. Berge. </author> <title> Hypergraphs. Combinatorics of Finite Sets. </title> <publisher> North-Holland Publishing Company, </publisher> <address> Amsterdam, The Netherlands, </address> <note> 3rd edition, </note> <year> 1973. </year>
Reference-contexts: In this section we showed that for patterns representable as sets the notion of negative border corresponds to the minimal transversals of a suitably defined hypergraph. The advantage of this is that the wealth of material about transversals (see, e.g., <ref> [Ber73] </ref>) can be used, e.g., in the design of algorithms or complexity analysis for specific knowledge discovery problems.
Reference: [CFP84] <author> M. A. Casanova, R. Fagin, and C. Papadimitriou. </author> <title> Inclusion dependencies and their interaction with functional dependencies. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 28 </volume> <pages> 29-59, </pages> <year> 1984. </year>
Reference-contexts: Recall, again, that the purpose is to find the rules that hold, and then use other methods to select the most useful ones|the specificity is certainly one criterion, but not the only one [PS91]. 3.3.2 Inclusion dependencies Next we consider the discovery of inclusion dependencies <ref> [CFP84] </ref> that hold in a given database. In essence, an inclusion dependency R [X] S [Y ] means that all the values of attributes X in a given relation over R are also values of attributes Y in a given relation over S.
Reference: [Cod70] <author> E. F. Codd. </author> <title> A relational model for large shared data banks. </title> <journal> Communications of the ACM, </journal> <volume> 13(6) </volume> <pages> 377-387, </pages> <year> 1970. </year>
Reference-contexts: Note that the partial order given above is a strength hierarchy also with this criterion. 3.3.3 Functional dependencies Next we consider the discovery of functional dependencies <ref> [Cod70] </ref> between attributes in a database; this is another example of database reverse engineering by the discovery of integrity constraints. Definition 3.18 Given a relation schema R, a functional dependency over R is an expression X ! A; where X R and A 2 R.
Reference: [DB93] <author> L. De Raedt and M. Bruynooghe. </author> <title> A theory of clausal discovery. </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence (IJCAI-93), </booktitle> <pages> pages 1058-1053, </pages> <address> Chambery, France, 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The algorithm repeatedly evaluates patterns along paths between the weakest and the strongest patterns until the border is located. The strength hierarchies are used to prune from evaluation those patterns for which the truth of selection criterion is already known. 4.6 Related work 49 Claudien <ref> [DB93] </ref> discovers minimally complete first order clausal theories from databases; in our terms a minimally complete theory roughly corresponds to the positive border.
Reference: [Den68] <author> P. J. Denning. </author> <title> The working set model of program behavior. </title> <journal> Communications of the ACM, </journal> <volume> 11(5) </volume> <pages> 323-333, </pages> <year> 1968. </year>
Reference-contexts: Also, comparable strategies using a sliding window have been used, e.g., to study the locality of reference in virtual memory <ref> [Den68] </ref>. Our setting differs from these in that our window is a queue with the special property that we know in advance when an event will leave the window; this knowledge is used in the recognition of serial episodes.
Reference: [EG95] <author> T. Eiter and G. Gottlob. </author> <title> Identifying the minimal transversals of a hypergraph and related problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 24(6) </volume> <pages> 1278-1304, </pages> <year> 1995. </year>
Reference-contexts: For various algorithms for finding functional dependencies, see [Bel95, MR92a, MR92b, MR94, PK95]. The relevance of transversals to computing the theory of a model has been known in the context of finding functional dependencies [MR94] and several other specific problems <ref> [EG95] </ref>. 50 4 Complexity of finding all frequent patterns Chapter 5 Sampling large databases for frequent sets If enough data is collected, anything may be proven by statistical methods. William's and Holland's Law The size of the data collection has an essential role in data mining.
Reference: [EP96] <author> J. F. Elder IV and D. </author> <title> Pregibon. A statistical perspective of knowledge discovery in databases. </title> <editor> In U. M. Fayyad, G. Piatetsky-Shapiro, P. Smyth, and R. Uthurusamy, editors, </editor> <booktitle> Advances in Knowledge Discovery and Data Mining, </booktitle> <pages> pages 83-113. </pages> <publisher> AAAI Press, </publisher> <address> Menlo Park, CA, </address> <year> 1996. </year>
Reference-contexts: Several aspects that are carefully dealt with in statistics, such as significance, variation, or explicit bias, have been largely ignored in data mining. A statistical perspective on data mining can be found in <ref> [EP96] </ref>. Many researchers in the machine learning community like to think that the field of machine learning covers also data mining. In any case, typical machine learning and typical data mining can be contrasted.
Reference: [FK94] <author> M. Fredman and L. Khachiyan. </author> <title> On the complexity of dualiz-ation of monotone disjunctive normal forms. </title> <type> Technical Report LCSR-TR-225, </type> <institution> Department of Computer Science, Rutgers University, Newark, NJ, </institution> <year> 1994. </year>
Reference-contexts: The complexity of computing the minimal transversals of a hypergraph has long been open; it is, however, known that transversals can be computed in time O (n O (log n) ), where n is the sum of the sizes of the edges of both the hypergraph and its minimal transversals <ref> [FK94, Kha95] </ref>. 4.6 Related work Many of the concepts and ideas of this and the previous chapter are known in different contexts.
Reference: [FMMT96] <author> T. Fukuda, Y. Morimoto, S. Morishita, and T. Tokuyama. </author> <title> Mining optimized association rules for numeric attributes. </title> <booktitle> In Proceedings of the Fifteenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems (PODS'96), </booktitle> <pages> pages 182-191, </pages> <address> Montral, Canada, 1996. </address> <publisher> ACM. </publisher>
Reference-contexts: The candidate generation method can be modified so that it does not generate internally inconsistent candidate sets that contain items derived from the same attribute. Association rules for numeric attributes are considered in <ref> [FMMT96, SA96a] </ref>. In addition to associations between single values, as above, the authors develop methods for automatic selection of useful value intervals to be used in the sets and rules.
Reference: [For82] <author> C. L. Forgy. </author> <title> Rete: A fast algorithm for the many pattern/many object pattern match problem. </title> <journal> Artificial Intelligence, </journal> <volume> 19 </volume> <pages> 17-37, </pages> <year> 1982. </year> <note> References 111 </note>
Reference-contexts: Taking advantage of the slowly changing contents of the group of recent events has been studied, e.g., in artificial intelligence, where a similar problem in spirit is the many pattern/many object pattern match problem in production system interpreters <ref> [For82] </ref>.
Reference: [FPSSU96] <editor> U. M. Fayyad, G. Piatetsky-Shapiro, P. Smyth, and R. Uthur-usamy, editors. </editor> <booktitle> Advances in Knowledge Discovery and Data Mining. </booktitle> <publisher> AAAI Press, </publisher> <address> Menlo Park, CA, </address> <year> 1996. </year>
Reference-contexts: The goal of data mining, also called knowledge discovery in databases or KDD for short, is to analyze these data sets and to find regularities that provide new insight into the business or process that generates the data. A recent overview of research in data mining is given in <ref> [FPSSU96] </ref>. The current interest towards data mining is understandable: several companies have large collections of data describing their daily operations. For instance, in many countries retailers are required by the law to store copies of the receipts of their sales.
Reference: [GJS92] <author> N. Gehani, H. Jagadish, and O. Shmueli. </author> <title> Event specification in an active object-oriented database. </title> <editor> In M. Stonebraker, editor, </editor> <booktitle> Proceedings of the 1992 ACM SIGMOD International Conference on Management of Data (SIGMOD'92), </booktitle> <pages> pages 81-90, </pages> <address> San Diego, CA, 1992. </address> <publisher> ACM. </publisher>
Reference-contexts: work 103 0 400 800 0 20 40 60 80 100 120 140 160 180 Time (s) Window width Trivial method Incremental method r r r r r b b b b b b b b b width. a related problem is the efficient detection of trigger events (see e.g. <ref> [GJS92] </ref>). Also, comparable strategies using a sliding window have been used, e.g., to study the locality of reference in virtual memory [Den68].
Reference: [GL89] <author> R. Grossi and F. Luccio. </author> <title> Simple and efficient string matching with k mismatches. </title> <journal> Information Processing Letters, </journal> <volume> 33 </volume> <pages> 113-120, </pages> <year> 1989. </year>
Reference-contexts: The methods for matching sets of episodes against a sequence have some similarities to the algorithms used in string matching (e.g., <ref> [GL89] </ref>). In particular, recognizing serial episodes in a sequence can be seen as locating all occurrences of subsequences, or matches of patterns with variable length don't care symbols, where the length of the occurrences is limited by the window width.
Reference: [HF95] <author> J. Han and Y. Fu. </author> <title> Discovery of multiple-level association rules from large databases. </title> <editor> In U. Dayal, P. M. D. Gray, and S. Nishio, editors, </editor> <booktitle> Proceedings of the 21st International Conference on Very Large Data Bases (VLDB'95), </booktitle> <pages> pages 420-431, </pages> <address> Zurich, Swizerland, 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: There is also a modification of the original algorithm of [AIS93] that uses SQL for the discovery of frequent sets [HS93]. Item hierarchies Association rule algorithms have been generalized to work with items arranged to hierarchies or taxonomies <ref> [HF95, HKMT95, SA95] </ref>. Concept hierarchies exist often for the items: for instance, in the supermarket environment we know that Samuel Adams is a beer brand, that beer is a beverage, and so on. <p> Various extensions to association rules apply directly or with minor modifications to episodes, too. For instance, these methods can be extended with an event taxonomy by a direct application of the similar extensions to association rules <ref> [HF95, HKMT95, SA95] </ref>. See Section 2.5 for extensions and work related to association rules. Technical problems related to the recognition of episodes have been researched in several fields.
Reference: [HKM + 96a] <author> K. Hatonen, M. Klemettinen, H. Mannila, P. Ronkainen, and H. Toivonen. </author> <title> Knowledge discovery from telecommunication network alarm databases. </title> <editor> In S. Y. Su, editor, </editor> <booktitle> Proceedings of the Twelth International Conference on Data Engineering (ICDE'96), </booktitle> <pages> pages 115-122, </pages> <address> New Orleans, LA, 1996. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The development of methods for analyzing sequences has, in particular, benefitted from working with real data and real problems. The projects have gained from the algorithms and Freddie, too: regularities discovered in telecommunication databases have been incorporated into event handling software of telecommunication operators <ref> [HKM + 96a] </ref>. TASA, a discovery system based on Freddie and on tools for browsing the discovered rules, is described in [HKM + 96a, HKM + 96b]. 6 1 Introduction Chapter 2 Discovery of association rules Predicting the future is easy. Getting it right is the hard part. <p> The projects have gained from the algorithms and Freddie, too: regularities discovered in telecommunication databases have been incorporated into event handling software of telecommunication operators [HKM + 96a]. TASA, a discovery system based on Freddie and on tools for browsing the discovered rules, is described in <ref> [HKM + 96a, HKM + 96b] </ref>. 6 1 Introduction Chapter 2 Discovery of association rules Predicting the future is easy. Getting it right is the hard part. Howard Frank We start by studying the discovery of association rules, a simple but important case of frequent patterns. <p> Extending the association rule methods to deal with multisets and ordered sets is fairly straightforward. As a final note it should be mentioned that the described methods have been used to analyze several alarm databases for telecommunication operators. Applications of the methods have been described in <ref> [HKM + 96a, HKM + 96b] </ref>. The goal of discovering new and useful knowledge has been achieved: episode rules discovered from alarm sequences have actually been taken into use in alarm handling software by the operators. Chapter 8 Discussion It gets harder the more you know.
Reference: [HKM + 96b] <author> K. Hatonen, M. Klemettinen, H. Mannila, P. Ronkainen, and H. Toivonen. TASA: </author> <title> Telecommunication alarm sequence analyzer, or "How to enjoy faults in your network". </title> <booktitle> In 1996 IEEE Network Operations and Management Symposium (NOMS'96), </booktitle> <pages> pages 520-529, </pages> <address> Kyoto, Japan, 1996. </address> <publisher> IEEE. </publisher>
Reference-contexts: The projects have gained from the algorithms and Freddie, too: regularities discovered in telecommunication databases have been incorporated into event handling software of telecommunication operators [HKM + 96a]. TASA, a discovery system based on Freddie and on tools for browsing the discovered rules, is described in <ref> [HKM + 96a, HKM + 96b] </ref>. 6 1 Introduction Chapter 2 Discovery of association rules Predicting the future is easy. Getting it right is the hard part. Howard Frank We start by studying the discovery of association rules, a simple but important case of frequent patterns. <p> Extending the association rule methods to deal with multisets and ordered sets is fairly straightforward. As a final note it should be mentioned that the described methods have been used to analyze several alarm databases for telecommunication operators. Applications of the methods have been described in <ref> [HKM + 96a, HKM + 96b] </ref>. The goal of discovering new and useful knowledge has been achieved: episode rules discovered from alarm sequences have actually been taken into use in alarm handling software by the operators. Chapter 8 Discussion It gets harder the more you know.
Reference: [HKMT95] <author> M. Holsheimer, M. Kersten, H. Mannila, and H. Toivonen. </author> <title> A perspective on databases and data mining. </title> <editor> In U. M. Fayyad and R. Uthurusamy, editors, </editor> <booktitle> Proceedings of the First International Conference on Knowledge Discovery and Data Mining (KDD'95), </booktitle> <pages> pages 150-155, </pages> <address> Montreal, Canada, 1995. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Such reuse does not usually pay off in the first iterations: there are many candidates and they have high frequencies. An alternative strategy for the database pass is to use inverted structures <ref> [HKMT95, SON95] </ref>. The idea here is to organize the storage by the items of the original database rather than by its rows. The information per an item A is represented by the set M (fAg) of (the identifiers of) the rows that contain A. <p> The main difference is that when using inverted structures, the non-frequent items need not be read at all. The above mentioned idea of reusing results from previous database passes can be implemented efficiently by storing the intersections representing frequent sets <ref> [HKMT95] </ref>. <p> There is also a modification of the original algorithm of [AIS93] that uses SQL for the discovery of frequent sets [HS93]. Item hierarchies Association rule algorithms have been generalized to work with items arranged to hierarchies or taxonomies <ref> [HF95, HKMT95, SA95] </ref>. Concept hierarchies exist often for the items: for instance, in the supermarket environment we know that Samuel Adams is a beer brand, that beer is a beverage, and so on. <p> In this section we also present variants of the method and give experimental results. Test organization We used three synthetic data sets from [AS94] in our tests. These databases model supermarket basket data, and they have been used as benchmarks for several association rule algorithms <ref> [AMS + 96, AS94, HKMT95, PCY95, SON95] </ref>. The central properties of the data sets are the following. There are jRj = 1 000 items, and the average number T of items per row is 5, 10, or 20. The number jrj of rows is approximately 100 000. <p> Various extensions to association rules apply directly or with minor modifications to episodes, too. For instance, these methods can be extended with an event taxonomy by a direct application of the similar extensions to association rules <ref> [HF95, HKMT95, SA95] </ref>. See Section 2.5 for extensions and work related to association rules. Technical problems related to the recognition of episodes have been researched in several fields.
Reference: [HS92] <author> P. J. Haas and A. N. Swami. </author> <title> Sequential sampling procedures for query size estimation. </title> <editor> In M. Stonebraker, editor, </editor> <booktitle> Proceedings of 112 References the 1992 ACM SIGMOD International Conference on Management of Data (SIGMOD'92), </booktitle> <pages> pages 341-350, </pages> <address> San Diego, CA, 1992. </address> <publisher> ACM. </publisher>
Reference-contexts: Depending on how randomly the rows have been assigned to the blocks, this method can give good or bad results. For the design and analysis of sampling methods see, e.g, [OR89]. The related problem of sampling for query estimation is considered in <ref> [HS92] </ref>. The reduction in database activity is achieved at the cost of considering some item sets that Algorithm 2.14 does not generate and check.
Reference: [HS93] <author> M. Houtsma and A. Swami. </author> <title> Set-oriented mining of association rules. </title> <type> Research Report RJ 9567, </type> <institution> IBM Almaden Research Center, </institution> <address> San Jose, CA, </address> <year> 1993. </year>
Reference-contexts: The method of [PCY95], in turn, uses hashing to identify and prune non-frequent candidates before the database pass. There is also a modification of the original algorithm of [AIS93] that uses SQL for the discovery of frequent sets <ref> [HS93] </ref>. Item hierarchies Association rule algorithms have been generalized to work with items arranged to hierarchies or taxonomies [HF95, HKMT95, SA95].
Reference: [JCH95] <author> I. Jonassen, J. F. Collins, and D. G. Higgins. </author> <title> Finding flexible patterns in unaligned protein sequences. </title> <journal> Protein Science, </journal> <volume> 4(8) </volume> <pages> 1587-1595, </pages> <year> 1995. </year>
Reference-contexts: In general, the depth-first search strategy may be useful if the collections of frequent patterns on each level are very large, or if computing the selection criterion from the database is cheap. Pratt <ref> [JCH95] </ref>, a system for the discovery of patterns in protein sequences, is a good example of such an application. <p> The classes of patterns differ from ours; they can be, e.g., substrings with fixed length don't care symbols <ref> [JCH95] </ref>. Closer to our patterns are those considered in [WCM + 94]. The described algorithm finds patterns that are similar to serial episodes; however, the patterns have a given minimum length, and the occurrences can be within a given edit distance.
Reference: [KA95] <author> A. J. Knobbe and P. W. Adriaans. </author> <title> Discovering foreign key relations in relational databases. </title> <editor> In G. N. Yves Kodratoff and C. Taylor, editors, </editor> <booktitle> Workshop Notes of the ECML-95 Workshop on Statistics, Machine Learning, and Knowledge Discovery in Databases, </booktitle> <pages> pages 94-99, </pages> <address> Heraklion, Greece, </address> <year> 1995. </year> <pages> MLnet. </pages>
Reference-contexts: Practical databases have inclusion dependencies, since most of the data is interconnected. Discovery of inclusion dependencies is useful in database reverse engineering <ref> [KA95, KMRS92, MR92a] </ref>.
Reference: [Kha95] <author> R. Khardon. </author> <title> Translating between Horn representations and their characteristic models. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 3 </volume> <pages> 349-372, </pages> <year> 1995. </year>
Reference-contexts: The complexity of computing the minimal transversals of a hypergraph has long been open; it is, however, known that transversals can be computed in time O (n O (log n) ), where n is the sum of the sizes of the edges of both the hypergraph and its minimal transversals <ref> [FK94, Kha95] </ref>. 4.6 Related work Many of the concepts and ideas of this and the previous chapter are known in different contexts.
Reference: [Klo95] <author> W. Klosgen. </author> <title> Efficient discovery of interesting statements in databases. </title> <journal> Journal of Intelligent Information Systems, </journal> <volume> 4(1) </volume> <pages> 53-69, </pages> <year> 1995. </year>
Reference-contexts: There are several knowledge discovery settings that can be seen as the discovery of all frequent patterns. We very briefly contrast our work with two important systems, Explora and Claudien. Explora <ref> [Klo95] </ref> is a system for discovering patterns describing outstanding subgroups of a given database. Explora employs strength hierarchies: it organizes patterns into hierarchies and lets the user specify which are strength hierarchies with respect to the domain and the user's interests.
Reference: [KLS95] <author> J. Kahn, N. Linial, and A. Samorodnitsky. Inclusion-exclusion: </author> <title> exact and approximate. </title> <type> Manuscript, </type> <year> 1995. </year>
Reference-contexts: On the other hand, it is easy to see that C = 2 s , where s = jfY X Y 2 Bd (F (r))gj, is sufficient. Approximation of the inclusion-exclusion sum has been considered also in <ref> [KLS95, LN90] </ref>, where it is shown that knowing the terms (1) jY j fr (Y ) of the inclusion-exclusion formula for all Y with jY j p jXj is sufficient for getting good approximations to the whole sum.
Reference: [KM94] <author> J. Kivinen and H. Mannila. </author> <title> The power of sampling in knowledge discovery. </title> <booktitle> In Proceedings of the Thirteenth ACM SIG-ACT-SIGMOD-SIGART Symposium on Principles of Database Systems (PODS'94), </booktitle> <pages> pages 77-85, </pages> <address> Minneapolis, MN, </address> <month> May </month> <year> 1994. </year> <note> ACM. </note>
Reference-contexts: As has been noted before, samples of reasonable size provide good approximations for frequencies of sets [AMS + 96, MTV94a]. Related work on using a sample for approximately verifying the truth of arbitrary sentences of relational tuple calculus is considered in <ref> [KM94] </ref>.
Reference: [KMR + 94] <author> M. Klemettinen, H. Mannila, P. Ronkainen, H. Toivonen, and A. I. Verkamo. </author> <title> Finding interesting rules from large sets of discovered association rules. </title> <editor> In N. Adam, B. Bhargava, and Y. Ye-sha, editors, </editor> <booktitle> Proceedings of the Third International Conference on Information and Knowledge Management (CIKM'94), </booktitle> <pages> pages 401-407, </pages> <address> Gaithersburg, MD, </address> <year> 1994. </year> <note> ACM. References 113 </note>
Reference-contexts: The problem of rule ranking is far from trivial. An interactive method for browsing rules is based on templates <ref> [KMR + 94] </ref>, regular expressions that specify the rules that are to be selected or explicitly excluded. Automatic methods for pruning redundant rules and for clustering rules have been considered in [TKR + 95]. Each of the following chapters discusses some aspect strongly related to frequent sets.
Reference: [KMRS92] <author> M. Kantola, H. Mannila, K.-J. Raiha, and H. Siirtola. </author> <title> Discovering functional and inclusion dependencies in relational databases. </title> <journal> International Journal of Intelligent Systems, </journal> <volume> 7(7) </volume> <pages> 591-607, </pages> <year> 1992. </year>
Reference-contexts: Practical databases have inclusion dependencies, since most of the data is interconnected. Discovery of inclusion dependencies is useful in database reverse engineering <ref> [KA95, KMRS92, MR92a] </ref>. <p> Those algorithms take partial advantage of the strength hierarchy: for candidate patterns they require only that weaker patterns at level 1 are selected by q, not that all weaker patterns are selected <ref> [KMRS92] </ref>. In the same way that exact database rules can be generalized to strong rules, we could define almost correct inclusion dependencies by allowing for small inconsistencies in the database. <p> The idea of checking all weaker patterns when generating candidates has, however, been missed, e.g., in the original algorithm for discovering frequent sets [AIS93] and in the inference of inclusion dependencies <ref> [KMRS92, MR92a] </ref>. In the area of machine learning, the version spaces of Mitchell [Mit82] are the first systematic use of strength hierarchies and concepts similar to our border.
Reference: [KMT96] <author> M. Klemettinen, H. Mannila, and H. Toivonen. </author> <title> Interactive exploration of discovered knowledge: A methodology for interaction, and usability studies. </title> <type> Technical Report C-1996-3, </type> <institution> Department of Computer Science, University of Helsinki, Finland, </institution> <year> 1996. </year>
Reference-contexts: Thousands of association or episodes rules often hold in a data collection, and confidence and frequency alone are not enough to point out the most useful rules. The following interactive methodology for data mining|close to OLAP in spirit|has been suggested in <ref> [KMT96] </ref>: discover a large collection of rules or frequent sets at once, and provide tools with which the user can then efficiently query the rule set.
Reference: [Lai93] <author> P. Laird. </author> <title> Identifying and using patterns in sequential data. </title> <editor> In K. Jantke, S. Kobayashi, E. Tomita, and T. Yokomori, editors, </editor> <booktitle> Algorithmic Learning Theory, 4th International Workshop, </booktitle> <pages> pages 1-18, </pages> <address> Berlin, Germany, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: More lately, the pattern class has been extended with windowing, some extra time constraints, and an event taxonomy [SA96b]. For a survey on patterns in sequential data, see <ref> [Lai93] </ref>. The class of patterns discovered can be easily modified in several directions. First, the methods can be used to analyze several sequences. If the sequences are short and windowing is not meaningful, simpler database passes are sufficient.
Reference: [LN90] <author> N. Linial and N. Nisan. </author> <title> Approximate inclusion-exclusion. </title> <booktitle> In Proceedings of the Twenty Second Annual ACM Symposium on Theory of Computing (STOC'90), </booktitle> <pages> pages 260-270, </pages> <address> Baltimore, MD, 1990. </address> <publisher> ACM. </publisher>
Reference-contexts: On the other hand, it is easy to see that C = 2 s , where s = jfY X Y 2 Bd (F (r))gj, is sufficient. Approximation of the inclusion-exclusion sum has been considered also in <ref> [KLS95, LN90] </ref>, where it is shown that knowing the terms (1) jY j fr (Y ) of the inclusion-exclusion formula for all Y with jY j p jXj is sufficient for getting good approximations to the whole sum.
Reference: [Mit82] <author> T. M. Mitchell. </author> <title> Generalization as search. </title> <journal> Artificial Intelligence, </journal> <volume> 18 </volume> <pages> 203-226, </pages> <year> 1982. </year>
Reference-contexts: The idea of checking all weaker patterns when generating candidates has, however, been missed, e.g., in the original algorithm for discovering frequent sets [AIS93] and in the inference of inclusion dependencies [KMRS92, MR92a]. In the area of machine learning, the version spaces of Mitchell <ref> [Mit82] </ref> are the first systematic use of strength hierarchies and concepts similar to our border.
Reference: [MR92a] <author> H. Mannila and K.-J. Raiha. </author> <title> Design of Relational Databases. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Wokingham, United Kingdom, </address> <year> 1992. </year>
Reference-contexts: Practical databases have inclusion dependencies, since most of the data is interconnected. Discovery of inclusion dependencies is useful in database reverse engineering <ref> [KA95, KMRS92, MR92a] </ref>. <p> Algorithm 2.14 is thus optimal under the simplifying restriction that the only way of controlling the algorithm is to use the information whether a set is frequent or not. Another corollary gives a result about finding functional dependencies that in the more specific setting is not easy to find <ref> [MR92a, MR92b] </ref>. For simplicity, we present the result here for the case of finding the keys of a relation. We define keys first. <p> The idea of checking all weaker patterns when generating candidates has, however, been missed, e.g., in the original algorithm for discovering frequent sets [AIS93] and in the inference of inclusion dependencies <ref> [KMRS92, MR92a] </ref>. In the area of machine learning, the version spaces of Mitchell [Mit82] are the first systematic use of strength hierarchies and concepts similar to our border. <p> The problem complexity of these settings has not received much attention. Some lower bounds for the problem of finding all frequent sets are given in [AMS + 96, MTV94a]. A thorough analysis of the problem of discovering functional dependencies is given in <ref> [MR92a, MR92b] </ref>. For various algorithms for finding functional dependencies, see [Bel95, MR92a, MR92b, MR94, PK95]. <p> Some lower bounds for the problem of finding all frequent sets are given in [AMS + 96, MTV94a]. A thorough analysis of the problem of discovering functional dependencies is given in [MR92a, MR92b]. For various algorithms for finding functional dependencies, see <ref> [Bel95, MR92a, MR92b, MR94, PK95] </ref>.
Reference: [MR92b] <author> H. Mannila and K.-J. Raiha. </author> <title> On the complexity of inferring functional dependencies. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 40 </volume> <pages> 237-243, </pages> <year> 1992. </year>
Reference-contexts: These have the minimal left-hand sides of true functional dependencies. The strength hierarchy given above is used by many of the most efficient known algorithms for discovering functional dependencies <ref> [MR92b, MR94] </ref>. These algorithms work more in a depth-first like manner, jumping in the strength hierarchy. <p> Algorithm 2.14 is thus optimal under the simplifying restriction that the only way of controlling the algorithm is to use the information whether a set is frequent or not. Another corollary gives a result about finding functional dependencies that in the more specific setting is not easy to find <ref> [MR92a, MR92b] </ref>. For simplicity, we present the result here for the case of finding the keys of a relation. We define keys first. <p> The problem complexity of these settings has not received much attention. Some lower bounds for the problem of finding all frequent sets are given in [AMS + 96, MTV94a]. A thorough analysis of the problem of discovering functional dependencies is given in <ref> [MR92a, MR92b] </ref>. For various algorithms for finding functional dependencies, see [Bel95, MR92a, MR92b, MR94, PK95]. <p> Some lower bounds for the problem of finding all frequent sets are given in [AMS + 96, MTV94a]. A thorough analysis of the problem of discovering functional dependencies is given in [MR92a, MR92b]. For various algorithms for finding functional dependencies, see <ref> [Bel95, MR92a, MR92b, MR94, PK95] </ref>.
Reference: [MR94] <author> H. Mannila and K.-J. Raiha. </author> <title> Algorithms for inferring functional dependencies. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 12(1) </volume> <pages> 83-99, </pages> <year> 1994. </year>
Reference-contexts: These have the minimal left-hand sides of true functional dependencies. The strength hierarchy given above is used by many of the most efficient known algorithms for discovering functional dependencies <ref> [MR92b, MR94] </ref>. These algorithms work more in a depth-first like manner, jumping in the strength hierarchy. <p> Some lower bounds for the problem of finding all frequent sets are given in [AMS + 96, MTV94a]. A thorough analysis of the problem of discovering functional dependencies is given in [MR92a, MR92b]. For various algorithms for finding functional dependencies, see <ref> [Bel95, MR92a, MR92b, MR94, PK95] </ref>. <p> A thorough analysis of the problem of discovering functional dependencies is given in [MR92a, MR92b]. For various algorithms for finding functional dependencies, see [Bel95, MR92a, MR92b, MR94, PK95]. The relevance of transversals to computing the theory of a model has been known in the context of finding functional dependencies <ref> [MR94] </ref> and several other specific problems [EG95]. 50 4 Complexity of finding all frequent patterns Chapter 5 Sampling large databases for frequent sets If enough data is collected, anything may be proven by statistical methods.
Reference: [MT96a] <author> H. Mannila and H. Toivonen. </author> <title> Discovering generalized episodes using minimal occurrences. </title> <editor> In E. Simoudis, J. Han, and U. Fayyad, editors, </editor> <booktitle> Proceedings of the Second International Conference on Knowledge Discovery and Data Mining (KDD'96), </booktitle> <pages> pages 146-151, </pages> <address> Portland, OR, 1996. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Then, in the recognition phase, for a candidate episode ff we can compute the set of windows in which ff occurs as the intersection of the sets of windows for two subepisodes of ff. This holds for all but serial episodes, for which some additional information is needed. In <ref> [MT96a] </ref>, a related algorithm for the database pass is presented. <p> An extension similar to this last idea has been presented in <ref> [MT96a] </ref>. In that framework one can actually express episodes with two time bounds, such as "if A and B occur within 30 seconds, then C will follow within 2 minutes". Third, other patterns could be searched for, e.g., substrings with fixed length don't care symbols.
Reference: [MT96b] <author> H. Mannila and H. Toivonen. </author> <title> Multiple uses of frequent sets and condensed representations. </title> <editor> In E. Simoudis, J. Han, 114 References and U. Fayyad, editors, </editor> <booktitle> Proceedings of the Second International Conference on Knowledge Discovery and Data Mining (KDD'96), </booktitle> <pages> pages 189-194, </pages> <address> Portland, OR, 1996. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Heikki Mannila and Dr. Inkeri Verkamo: the algorithm for finding association rules [AMS + 96, MTV94a], the generalized problem, algorithm, and analysis [MT96c], the methods for finding association rules using sampling [Toi96], the idea of approximate discovery of Boolean rules <ref> [MT96b] </ref>, and the problem of discovering frequent episodes in sequences [MTV94b, MTV95]. All the material in this thesis represents original work, except for the definition of association rules and the basic rule generation method in the beginning of Chapter 2. <p> As it turns out, good approximations of frequencies and confidences of Boolean rules can be computed from the frequent sets alone. Experimental results on the accuracy of the estimated frequencies are given in Section 6.3. Parts of this chapter have been published in <ref> [MT96b] </ref>. 6.1 Boolean formulas and rules We generalize the notions of set and association rule to Boolean formula and Boolean rule as follows. Definition 6.1 Let R be a set and r a binary database over R. A literal is an expression A or A, where A 2 R. <p> Since 106 8 Discussion the number of Boolean rules that hold in a database is usually huge, a useful approach is that the user queries the system for specific rules or classes of rules. Using the collection of frequent sets as a condensed representation <ref> [MT96b] </ref> of the database, the queries can be answered approximately without looking at the database. This approach has a strong connection to on-line analytical processing or OLAP: ad hoc queries for summaries from large data collections can be answered efficiently.
Reference: [MT96c] <author> H. Mannila and H. Toivonen. </author> <title> On an algorithm for finding all interesting sentences. </title> <editor> In R. Trappl, editor, </editor> <booktitle> Cybernetics and Systems, Volume II, The Thirteenth European Meeting on Cybernetics and Systems Research, </booktitle> <pages> pages 973-978, </pages> <address> Vienna, Austria, </address> <year> 1996. </year> <institution> Austrian Society for Cybernetic Studies. </institution>
Reference-contexts: Most of the results have been published before, many of them in joint articles with Prof. Heikki Mannila and Dr. Inkeri Verkamo: the algorithm for finding association rules [AMS + 96, MTV94a], the generalized problem, algorithm, and analysis <ref> [MT96c] </ref>, the methods for finding association rules using sampling [Toi96], the idea of approximate discovery of Boolean rules [MT96b], and the problem of discovering frequent episodes in sequences [MTV94b, MTV95]. <p> Finally, in Section 3.4, we extend the setting and the algorithm for discovery in several database states. A review of related work is postponed to follow the analysis of the approach in Chapter 4. Parts of the material of this chapter have been published in <ref> [MT96c] </ref>. 3.1 The discovery task A significant fraction of the discussion in this and the following chapter is formalized in the framework of the relational data model, so we start by defining its basic concepts. <p> Work related to the task of discovering all frequent patterns, to the generic algorithm, and to the analysis is reviewed in Section 4.6. Many results of this chapter have appeared in <ref> [MT96c] </ref>. 4.1 The border Consider the theory T (P; r; q) of some set P of patterns. <p> We analyzed the problem of discovering all frequent patterns in Chapter 4, where we also showed that the algorithm for the discovery of frequent sets is optimal under some constraints. The knowledge discovery setting of Chapters 3 and 4, presented originally in <ref> [MT96c] </ref>, is so far perhaps the only attempt to provide a unified view to data mining. In Chapter 5 we considered the use of sampling in the discovery of association rules, and we gave methods that are efficient in terms of database activity.
Reference: [MTV94a] <author> H. Mannila, H. Toivonen, and A. I. Verkamo. </author> <title> Efficient algorithms for discovering association rules. </title> <editor> In U. M. Fayyad and R. Uthurusamy, editors, </editor> <booktitle> Knowledge Discovery in Databases, Papers from the 1994 AAAI Workshop (KDD'94), </booktitle> <pages> pages 181-192, </pages> <address> Seattle, WA, 1994. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Most of the results have been published before, many of them in joint articles with Prof. Heikki Mannila and Dr. Inkeri Verkamo: the algorithm for finding association rules <ref> [AMS + 96, MTV94a] </ref>, the generalized problem, algorithm, and analysis [MT96c], the methods for finding association rules using sampling [Toi96], the idea of approximate discovery of Boolean rules [MT96b], and the problem of discovering frequent episodes in sequences [MTV94b, MTV95]. <p> In that section we give an efficient method for the discovery of all frequent sets. Experiments with the method are described in Section 2.4. Finally, we review extensions and other related work in Section 2.5. Parts of the work described in this chapter have been published in <ref> [AMS + 96, MTV94a] </ref>. 2.1 Association rules Given a collection of sets of items, association rules describe how likely various combinations of items are to occur together in the same sets. <p> In this section we discuss related work, some of which regards extensions to the basic framework of association rules. More remotely related research is discussed in Chapter 4. Candidate generation Definition 2.13 and Algorithm 2.14 for candidate generation were presented independently in <ref> [AS94, MTV94a] </ref>. <p> Most importantly, however, the method fails to take advantage of Proposition 2.11 and it generates candidates that cannot be frequent. Also in experimental comparisons the method of [AIS93] has been shown to perform worse than the algorithms of this section <ref> [AMS + 96, AS94, MTV94a] </ref>. Association rule generation The confidence of association rules is monotone decreasing with respect to moving items from the left-hand side of the rule to the right-hand side. <p> Evaluating the selection criterion is thus fast, possibly even faster than evaluating whether a potential candidate is a valid candidate or not. The problem complexity of these settings has not received much attention. Some lower bounds for the problem of finding all frequent sets are given in <ref> [AMS + 96, MTV94a] </ref>. A thorough analysis of the problem of discovering functional dependencies is given in [MR92a, MR92b]. For various algorithms for finding functional dependencies, see [Bel95, MR92a, MR92b, MR94, PK95]. <p> We first consider how accurate the frequencies computed from a random sample are. As has been noted before, samples of reasonable size provide good approximations for frequencies of sets <ref> [AMS + 96, MTV94a] </ref>. Related work on using a sample for approximately verifying the truth of arbitrary sentences of relational tuple calculus is considered in [KM94].
Reference: [MTV94b] <author> H. Mannila, H. Toivonen, and A. I. Verkamo. </author> <title> Finding association rules efficiently in sequential data. </title> <type> Technical Report C-1994-40, </type> <institution> Department of Computer Science, University of Hel-sinki, Finland, </institution> <year> 1994. </year>
Reference-contexts: Inkeri Verkamo: the algorithm for finding association rules [AMS + 96, MTV94a], the generalized problem, algorithm, and analysis [MT96c], the methods for finding association rules using sampling [Toi96], the idea of approximate discovery of Boolean rules [MT96b], and the problem of discovering frequent episodes in sequences <ref> [MTV94b, MTV95] </ref>. All the material in this thesis represents original work, except for the definition of association rules and the basic rule generation method in the beginning of Chapter 2. <p> Experimental results are presented in Section 7.6. Finally, we suggest extensions and review related work in Section 7.7. This chapter is mostly based on [MTV95], but the first formulations and results on the discovery of episodes were presented already in <ref> [MTV94b] </ref>. 7.1 Event sequences and episodes Most data mining and machine learning techniques are adapted towards the analysis of unordered collections of data. However, there are important application areas where the data to be analyzed has an inherent sequential structure.
Reference: [MTV95] <author> H. Mannila, H. Toivonen, and A. I. Verkamo. </author> <title> Discovering frequent episodes in sequences. </title> <editor> In U. M. Fayyad and R. Uthur-usamy, editors, </editor> <booktitle> Proceedings of the First International Conference on Knowledge Discovery and Data Mining (KDD'95), </booktitle> <pages> pages 210-215, </pages> <address> Montreal, Canada, 1995. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Inkeri Verkamo: the algorithm for finding association rules [AMS + 96, MTV94a], the generalized problem, algorithm, and analysis [MT96c], the methods for finding association rules using sampling [Toi96], the idea of approximate discovery of Boolean rules [MT96b], and the problem of discovering frequent episodes in sequences <ref> [MTV94b, MTV95] </ref>. All the material in this thesis represents original work, except for the definition of association rules and the basic rule generation method in the beginning of Chapter 2. <p> In Section 7.5 we shortly discuss other types of episodes. Experimental results are presented in Section 7.6. Finally, we suggest extensions and review related work in Section 7.7. This chapter is mostly based on <ref> [MTV95] </ref>, but the first formulations and results on the discovery of episodes were presented already in [MTV94b]. 7.1 Event sequences and episodes Most data mining and machine learning techniques are adapted towards the analysis of unordered collections of data.
Reference: [OR89] <author> F. Olken and D. Rotem. </author> <title> Random sampling from B + trees. </title> <editor> In P. M. G. Apers and G. Wiederhold, editors, </editor> <booktitle> Proceedings of the Fifteenth International Conference on Very Large Data Bases (VLDB'89), </booktitle> <pages> pages 269-277, </pages> <address> Amsterdam, The Nether-lands, 1989. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Depending on how randomly the rows have been assigned to the blocks, this method can give good or bad results. For the design and analysis of sampling methods see, e.g, <ref> [OR89] </ref>. The related problem of sampling for query estimation is considered in [HS92]. The reduction in database activity is achieved at the cost of considering some item sets that Algorithm 2.14 does not generate and check.
Reference: [PCY95] <author> J. S. Park, M.-S. Chen, and P. S. Yu. </author> <title> An effective hash-based algorithm for mining association rules. </title> <editor> In M. Carey and D. Schneider, editors, </editor> <booktitle> Proceedings of the 1995 ACM SIG-MOD International Conference on Management of Data (SIG-MOD'95), </booktitle> <pages> pages 175-186, </pages> <address> San Jose, CA, 1995. </address> <publisher> ACM. </publisher>
Reference-contexts: Hashing has been used at least for two tasks in the discovery of fre 2.5 Extensions and related work 23 quent sets. In [AS94], hashing is used during the database pass to efficiently determine the collection of candidates that match a row. The method of <ref> [PCY95] </ref>, in turn, uses hashing to identify and prune non-frequent candidates before the database pass. There is also a modification of the original algorithm of [AIS93] that uses SQL for the discovery of frequent sets [HS93]. <p> In this section we also present variants of the method and give experimental results. Test organization We used three synthetic data sets from [AS94] in our tests. These databases model supermarket basket data, and they have been used as benchmarks for several association rule algorithms <ref> [AMS + 96, AS94, HKMT95, PCY95, SON95] </ref>. The central properties of the data sets are the following. There are jRj = 1 000 items, and the average number T of items per row is 5, 10, or 20. The number jrj of rows is approximately 100 000.
Reference: [PK95] <author> B. Pfahringer and S. Kramer. </author> <title> Compression-based evaluation of partial determinations. </title> <editor> In U. M. Fayyad and R. Uthurusamy, editors, </editor> <booktitle> Proceedings of the First International Conference on Knowledge Discovery and Data Mining (KDD'95), </booktitle> <pages> pages 234-239, </pages> <address> Montreal, Canada, 1995. </address> <publisher> AAAI Press. </publisher> <address> References 115 </address>
Reference-contexts: Some lower bounds for the problem of finding all frequent sets are given in [AMS + 96, MTV94a]. A thorough analysis of the problem of discovering functional dependencies is given in [MR92a, MR92b]. For various algorithms for finding functional dependencies, see <ref> [Bel95, MR92a, MR92b, MR94, PK95] </ref>.
Reference: [PS91] <author> G. Piatetsky-Shapiro. </author> <title> Discovery, analysis, and presentation of strong rules. </title> <editor> In G. Piatetsky-Shapiro and W. J. Frawley, editors, </editor> <booktitle> Knowledge Discovery in Databases, </booktitle> <pages> pages 229-248. </pages> <publisher> AAAI Press, </publisher> <address> Menlo Park, CA, </address> <year> 1991. </year>
Reference-contexts: The purpose is to show how the algorithm fits different discovery tasks, and to demonstrate how the selection criterion q can actually be based on other properties of patterns than the frequency. 3.3.1 Exact database rules Exact database rules <ref> [PS91] </ref> are a rule formalism that is somewhat more general than association rules: numerical and categorical attributes are considered. On the other hand, the confidence of exact rules must be 1; a small variation gives strong rules which can have a confidence less than 1. <p> The KID3 algorithm <ref> [PS91] </ref> for discovering exact database rules, in turn, considers in one iteration all rules with the same attribute on the left-hand side. KID3 does not directly evaluate q on all those rules; instead, it stores some summary information from which rules that hold can be extracted. <p> Recall, again, that the purpose is to find the rules that hold, and then use other methods to select the most useful ones|the specificity is certainly one criterion, but not the only one <ref> [PS91] </ref>. 3.3.2 Inclusion dependencies Next we consider the discovery of inclusion dependencies [CFP84] that hold in a given database.
Reference: [PTW83] <author> G. Polya, R. E. Tarjan, and D. R. Woods. </author> <title> Notes on Introductory Combinatorics. </title> <publisher> Birkhauser, </publisher> <address> Boston, MA, </address> <year> 1983. </year>
Reference-contexts: normal form is fr ( W P V i.e., a sum of frequencies of conjunctions of literals. (Remember that the empty Boolean formula ; is true on all rows, i.e, fr (;) = 1.) Proof The proposition is a straightforward application of the principle of inclusion and exclusion, see, e.g., <ref> [PTW83] </ref>. Example 6.8 Consider the formula = ((A ^ B) _ C _ D) which is in disjunctive normal form.
Reference: [SA95] <author> R. Srikant and R. Agrawal. </author> <title> Mining generalized association rules. </title> <editor> In U. Dayal, P. M. D. Gray, and S. Nishio, editors, </editor> <booktitle> Proceedings of the 21st International Conference on Very Large Data Bases (VLDB'95), </booktitle> <pages> pages 407-419, </pages> <address> Zurich, Swizerland, 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: There is also a modification of the original algorithm of [AIS93] that uses SQL for the discovery of frequent sets [HS93]. Item hierarchies Association rule algorithms have been generalized to work with items arranged to hierarchies or taxonomies <ref> [HF95, HKMT95, SA95] </ref>. Concept hierarchies exist often for the items: for instance, in the supermarket environment we know that Samuel Adams is a beer brand, that beer is a beverage, and so on. <p> Various extensions to association rules apply directly or with minor modifications to episodes, too. For instance, these methods can be extended with an event taxonomy by a direct application of the similar extensions to association rules <ref> [HF95, HKMT95, SA95] </ref>. See Section 2.5 for extensions and work related to association rules. Technical problems related to the recognition of episodes have been researched in several fields.
Reference: [SA96a] <author> R. Srikant and R. Agrawal. </author> <title> Mining quantitative association rules in large relational tables. </title> <editor> In H. Jagadish and I. Mumick, editors, </editor> <booktitle> Proceedings of the 1996 ACM SIGMOD International Conference on Management of Data (SIGMOD'96), </booktitle> <pages> pages 1-12, </pages> <address> Montreal, Canada, 1996. </address> <publisher> ACM. </publisher>
Reference-contexts: The candidate generation method can be modified so that it does not generate internally inconsistent candidate sets that contain items derived from the same attribute. Association rules for numeric attributes are considered in <ref> [FMMT96, SA96a] </ref>. In addition to associations between single values, as above, the authors develop methods for automatic selection of useful value intervals to be used in the sets and rules.
Reference: [SA96b] <author> R. Srikant and R. Agrawal. </author> <title> Mining sequential patterns: Generalizations and performance improvements. </title> <editor> In P. M. G. Apers, M. Bouzeghoub, and G. Gardarin, editors, </editor> <booktitle> Advances in Database Technology|5th International Conference on Extending Database Technology (EDBT'96), </booktitle> <pages> pages 3-17, </pages> <address> Avignon, France, 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Sequential patterns are similar to serial episodes; they could 104 7 Discovery of episodes in sequences also be roughly described as association rules discovered from ordered sets. More lately, the pattern class has been extended with windowing, some extra time constraints, and an event taxonomy <ref> [SA96b] </ref>. For a survey on patterns in sequential data, see [Lai93]. The class of patterns discovered can be easily modified in several directions. First, the methods can be used to analyze several sequences. If the sequences are short and windowing is not meaningful, simpler database passes are sufficient.
Reference: [Sie95] <author> A. Siebes. </author> <title> Data surveying, foundations of an inductive query language. </title> <editor> In U. M. Fayyad and R. Uthurusamy, editors, </editor> <booktitle> Proceedings of the First International Conference on Knowledge Discovery and Data Mining (KDD'95), </booktitle> <pages> pages 269-274, </pages> <address> Montreal, Canada, 1995. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Mitchell's learning task is different from ours, but conceptually Mitchell's set S of the most specific consistent patterns is the same as our positive border. |A generic viewpoint to knowledge discovery algorithms, similar to ours, has been expressed in <ref> [Sie95] </ref>. There are several knowledge discovery settings that can be seen as the discovery of all frequent patterns. We very briefly contrast our work with two important systems, Explora and Claudien. Explora [Klo95] is a system for discovering patterns describing outstanding subgroups of a given database.
Reference: [SON95] <author> A. Savasere, E. Omiecinski, and S. Navathe. </author> <title> An efficient algorithm for mining association rules in large databases. </title> <editor> In U. Dayal, P. M. D. Gray, and S. Nishio, editors, </editor> <booktitle> Proceedings of the 21st International Conference on Very Large Data Bases (VLDB'95), </booktitle> <pages> pages 432-444, </pages> <address> Zurich, Swizerland, 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Such reuse does not usually pay off in the first iterations: there are many candidates and they have high frequencies. An alternative strategy for the database pass is to use inverted structures <ref> [HKMT95, SON95] </ref>. The idea here is to organize the storage by the items of the original database rather than by its rows. The information per an item A is represented by the set M (fAg) of (the identifiers of) the rows that contain A. <p> In the Partition method <ref> [SON95] </ref>, a database too large to fit in main memory is partitioned, and each partition is analyzed separately in main memory. The first database pass consists of identifying in each part the collection of all locally frequent sets. <p> In this section we also present variants of the method and give experimental results. Test organization We used three synthetic data sets from [AS94] in our tests. These databases model supermarket basket data, and they have been used as benchmarks for several association rule algorithms <ref> [AMS + 96, AS94, HKMT95, PCY95, SON95] </ref>. The central properties of the data sets are the following. There are jRj = 1 000 items, and the average number T of items per row is 5, 10, or 20. The number jrj of rows is approximately 100 000.
Reference: [TKR + 95] <author> H. Toivonen, M. Klemettinen, P. Ronkainen, K. Hatonen, and H. Mannila. </author> <title> Pruning and grouping of discovered association rules. </title> <editor> In G. N. Yves Kodratoff and C. Taylor, editors, </editor> <booktitle> Workshop Notes of the ECML-95 Workshop on Statistics, Machine 116 References Learning, and Knowledge Discovery in Databases, </booktitle> <pages> pages 47-52, </pages> <address> Heraklion, Greece, </address> <year> 1995. </year> <pages> MLnet. </pages>
Reference-contexts: An interactive method for browsing rules is based on templates [KMR + 94], regular expressions that specify the rules that are to be selected or explicitly excluded. Automatic methods for pruning redundant rules and for clustering rules have been considered in <ref> [TKR + 95] </ref>. Each of the following chapters discusses some aspect strongly related to frequent sets. In Chapter 3 we present a generalization of Algorithm 2.14 for 24 2 Discovery of association rules the discovery of different types of frequent patterns.
Reference: [Toi96] <author> H. Toivonen. </author> <title> Sampling large databases for association rules. </title> <editor> In T. M. Vijayaraman, A. P. Buchmann, C. Mohan, and N. L. Sarda, editors, </editor> <booktitle> Proceedings of the 22nd International Conference on Very Large Data Bases (VLDB'96), </booktitle> <pages> pages 134-145, </pages> <address> Mumbay, India, 1996. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Most of the results have been published before, many of them in joint articles with Prof. Heikki Mannila and Dr. Inkeri Verkamo: the algorithm for finding association rules [AMS + 96, MTV94a], the generalized problem, algorithm, and analysis [MT96c], the methods for finding association rules using sampling <ref> [Toi96] </ref>, the idea of approximate discovery of Boolean rules [MT96b], and the problem of discovering frequent episodes in sequences [MTV94b, MTV95]. All the material in this thesis represents original work, except for the definition of association rules and the basic rule generation method in the beginning of Chapter 2. <p> In Section 5.3 we give variations of algorithms and experimental results. The results show that the methods reduce the disk activity considerably, making the approach attractive especially for large databases. This chapter is based on <ref> [Toi96] </ref>. 52 5 Sampling large databases for frequent sets 5.1 Sampling in the discovery of frequent sets An obvious way of reducing the database activity of knowledge discovery is to use only a random sample of the database and to find approximate regularities.
Reference: [WCM + 94] <author> J. T.-L. Wang, G.-W. Chirn, T. G. Marr, B. Shapiro, D. Shasha, and K. Zhang. </author> <title> Combinatorial pattern discovery for scientific data: Some preliminary results. </title> <editor> In R. Snodgrass and M. Winslett, editors, </editor> <booktitle> Proceedings of the 1994 ACM SIG-MOD International Conference on Management of Data (SIG-MOD'94), </booktitle> <pages> pages 115-125, </pages> <address> Minneapolis, MI, 1994. </address> <publisher> ACM. </publisher> <address> ISSN 1238-8645 ISBN 951-45-7531-8 Helsinki 1996 Helsinki University Printing House </address>
Reference-contexts: The classes of patterns differ from ours; they can be, e.g., substrings with fixed length don't care symbols [JCH95]. Closer to our patterns are those considered in <ref> [WCM + 94] </ref>. The described algorithm finds patterns that are similar to serial episodes; however, the patterns have a given minimum length, and the occurrences can be within a given edit distance. The problem of discovering so called sequential patterns is also closely related [AS95].
References-found: 59

